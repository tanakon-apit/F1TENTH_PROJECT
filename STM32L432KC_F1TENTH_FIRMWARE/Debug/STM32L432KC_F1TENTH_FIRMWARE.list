
STM32L432KC_F1TENTH_FIRMWARE.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001b96c  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000ca0  0801bb00  0801bb00  0001cb00  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801c7a0  0801c7a0  0001e168  2**0
                  CONTENTS
  4 .ARM          00000008  0801c7a0  0801c7a0  0001d7a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801c7a8  0801c7a8  0001e168  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801c7a8  0801c7a8  0001d7a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0801c7ac  0801c7ac  0001d7ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000168  20000000  0801c7b0  0001e000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000c0e0  20000168  0801c918  0001e168  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  2000c248  0801c918  0001e248  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0001e168  2**0
                  CONTENTS, READONLY
 12 .debug_info   00029bc2  00000000  00000000  0001e198  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00005aae  00000000  00000000  00047d5a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001e48  00000000  00000000  0004d808  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  00028f99  00000000  00000000  0004f650  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   000282c5  00000000  00000000  000785e9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    000e2d9a  00000000  00000000  000a08ae  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .comment      0000009c  00000000  00000000  00183648  2**0
                  CONTENTS, READONLY
 19 .debug_rnglists 0000175b  00000000  00000000  001836e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00008fd8  00000000  00000000  00184e40  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000071  00000000  00000000  0018de18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000168 	.word	0x20000168
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0801bae4 	.word	0x0801bae4

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000016c 	.word	0x2000016c
 80001cc:	0801bae4 	.word	0x0801bae4

080001d0 <strcmp>:
 80001d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d8:	2a01      	cmp	r2, #1
 80001da:	bf28      	it	cs
 80001dc:	429a      	cmpcs	r2, r3
 80001de:	d0f7      	beq.n	80001d0 <strcmp>
 80001e0:	1ad0      	subs	r0, r2, r3
 80001e2:	4770      	bx	lr

080001e4 <strlen>:
 80001e4:	4603      	mov	r3, r0
 80001e6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ea:	2a00      	cmp	r2, #0
 80001ec:	d1fb      	bne.n	80001e6 <strlen+0x2>
 80001ee:	1a18      	subs	r0, r3, r0
 80001f0:	3801      	subs	r0, #1
 80001f2:	4770      	bx	lr
	...

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	@ 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	3c01      	subs	r4, #1
 80003dc:	bf28      	it	cs
 80003de:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003e2:	d2e9      	bcs.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_dmul>:
 8000618:	b570      	push	{r4, r5, r6, lr}
 800061a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800061e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000622:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000626:	bf1d      	ittte	ne
 8000628:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800062c:	ea94 0f0c 	teqne	r4, ip
 8000630:	ea95 0f0c 	teqne	r5, ip
 8000634:	f000 f8de 	bleq	80007f4 <__aeabi_dmul+0x1dc>
 8000638:	442c      	add	r4, r5
 800063a:	ea81 0603 	eor.w	r6, r1, r3
 800063e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000642:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000646:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800064a:	bf18      	it	ne
 800064c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000654:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000658:	d038      	beq.n	80006cc <__aeabi_dmul+0xb4>
 800065a:	fba0 ce02 	umull	ip, lr, r0, r2
 800065e:	f04f 0500 	mov.w	r5, #0
 8000662:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000666:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800066a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800066e:	f04f 0600 	mov.w	r6, #0
 8000672:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000676:	f09c 0f00 	teq	ip, #0
 800067a:	bf18      	it	ne
 800067c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000680:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000684:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000688:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800068c:	d204      	bcs.n	8000698 <__aeabi_dmul+0x80>
 800068e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000692:	416d      	adcs	r5, r5
 8000694:	eb46 0606 	adc.w	r6, r6, r6
 8000698:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800069c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ac:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006b0:	bf88      	it	hi
 80006b2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006b6:	d81e      	bhi.n	80006f6 <__aeabi_dmul+0xde>
 80006b8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006bc:	bf08      	it	eq
 80006be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006c2:	f150 0000 	adcs.w	r0, r0, #0
 80006c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006d0:	ea46 0101 	orr.w	r1, r6, r1
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	ea81 0103 	eor.w	r1, r1, r3
 80006dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e0:	bfc2      	ittt	gt
 80006e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	popgt	{r4, r5, r6, pc}
 80006ec:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006f0:	f04f 0e00 	mov.w	lr, #0
 80006f4:	3c01      	subs	r4, #1
 80006f6:	f300 80ab 	bgt.w	8000850 <__aeabi_dmul+0x238>
 80006fa:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006fe:	bfde      	ittt	le
 8000700:	2000      	movle	r0, #0
 8000702:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000706:	bd70      	pople	{r4, r5, r6, pc}
 8000708:	f1c4 0400 	rsb	r4, r4, #0
 800070c:	3c20      	subs	r4, #32
 800070e:	da35      	bge.n	800077c <__aeabi_dmul+0x164>
 8000710:	340c      	adds	r4, #12
 8000712:	dc1b      	bgt.n	800074c <__aeabi_dmul+0x134>
 8000714:	f104 0414 	add.w	r4, r4, #20
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f305 	lsl.w	r3, r0, r5
 8000720:	fa20 f004 	lsr.w	r0, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000734:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000738:	fa21 f604 	lsr.w	r6, r1, r4
 800073c:	eb42 0106 	adc.w	r1, r2, r6
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 040c 	rsb	r4, r4, #12
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f304 	lsl.w	r3, r0, r4
 8000758:	fa20 f005 	lsr.w	r0, r0, r5
 800075c:	fa01 f204 	lsl.w	r2, r1, r4
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800076c:	f141 0100 	adc.w	r1, r1, #0
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 0520 	rsb	r5, r4, #32
 8000780:	fa00 f205 	lsl.w	r2, r0, r5
 8000784:	ea4e 0e02 	orr.w	lr, lr, r2
 8000788:	fa20 f304 	lsr.w	r3, r0, r4
 800078c:	fa01 f205 	lsl.w	r2, r1, r5
 8000790:	ea43 0302 	orr.w	r3, r3, r2
 8000794:	fa21 f004 	lsr.w	r0, r1, r4
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800079c:	fa21 f204 	lsr.w	r2, r1, r4
 80007a0:	ea20 0002 	bic.w	r0, r0, r2
 80007a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f094 0f00 	teq	r4, #0
 80007b8:	d10f      	bne.n	80007da <__aeabi_dmul+0x1c2>
 80007ba:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007be:	0040      	lsls	r0, r0, #1
 80007c0:	eb41 0101 	adc.w	r1, r1, r1
 80007c4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3c01      	subeq	r4, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1a6>
 80007ce:	ea41 0106 	orr.w	r1, r1, r6
 80007d2:	f095 0f00 	teq	r5, #0
 80007d6:	bf18      	it	ne
 80007d8:	4770      	bxne	lr
 80007da:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007de:	0052      	lsls	r2, r2, #1
 80007e0:	eb43 0303 	adc.w	r3, r3, r3
 80007e4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3d01      	subeq	r5, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1c6>
 80007ee:	ea43 0306 	orr.w	r3, r3, r6
 80007f2:	4770      	bx	lr
 80007f4:	ea94 0f0c 	teq	r4, ip
 80007f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007fc:	bf18      	it	ne
 80007fe:	ea95 0f0c 	teqne	r5, ip
 8000802:	d00c      	beq.n	800081e <__aeabi_dmul+0x206>
 8000804:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080e:	d1d1      	bne.n	80007b4 <__aeabi_dmul+0x19c>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000818:	f04f 0000 	mov.w	r0, #0
 800081c:	bd70      	pop	{r4, r5, r6, pc}
 800081e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000822:	bf06      	itte	eq
 8000824:	4610      	moveq	r0, r2
 8000826:	4619      	moveq	r1, r3
 8000828:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082c:	d019      	beq.n	8000862 <__aeabi_dmul+0x24a>
 800082e:	ea94 0f0c 	teq	r4, ip
 8000832:	d102      	bne.n	800083a <__aeabi_dmul+0x222>
 8000834:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000838:	d113      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800083a:	ea95 0f0c 	teq	r5, ip
 800083e:	d105      	bne.n	800084c <__aeabi_dmul+0x234>
 8000840:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000844:	bf1c      	itt	ne
 8000846:	4610      	movne	r0, r2
 8000848:	4619      	movne	r1, r3
 800084a:	d10a      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800084c:	ea81 0103 	eor.w	r1, r1, r3
 8000850:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000854:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000858:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	bd70      	pop	{r4, r5, r6, pc}
 8000862:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000866:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800086a:	bd70      	pop	{r4, r5, r6, pc}

0800086c <__aeabi_ddiv>:
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000872:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000876:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800087a:	bf1d      	ittte	ne
 800087c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000880:	ea94 0f0c 	teqne	r4, ip
 8000884:	ea95 0f0c 	teqne	r5, ip
 8000888:	f000 f8a7 	bleq	80009da <__aeabi_ddiv+0x16e>
 800088c:	eba4 0405 	sub.w	r4, r4, r5
 8000890:	ea81 0e03 	eor.w	lr, r1, r3
 8000894:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000898:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800089c:	f000 8088 	beq.w	80009b0 <__aeabi_ddiv+0x144>
 80008a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008c4:	429d      	cmp	r5, r3
 80008c6:	bf08      	it	eq
 80008c8:	4296      	cmpeq	r6, r2
 80008ca:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ce:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008d2:	d202      	bcs.n	80008da <__aeabi_ddiv+0x6e>
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	1ab6      	subs	r6, r6, r2
 80008dc:	eb65 0503 	sbc.w	r5, r5, r3
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ea:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000948:	ea55 0e06 	orrs.w	lr, r5, r6
 800094c:	d018      	beq.n	8000980 <__aeabi_ddiv+0x114>
 800094e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000952:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000956:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800095a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800095e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000962:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000966:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800096a:	d1c0      	bne.n	80008ee <__aeabi_ddiv+0x82>
 800096c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000970:	d10b      	bne.n	800098a <__aeabi_ddiv+0x11e>
 8000972:	ea41 0100 	orr.w	r1, r1, r0
 8000976:	f04f 0000 	mov.w	r0, #0
 800097a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800097e:	e7b6      	b.n	80008ee <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000984:	bf04      	itt	eq
 8000986:	4301      	orreq	r1, r0
 8000988:	2000      	moveq	r0, #0
 800098a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800098e:	bf88      	it	hi
 8000990:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000994:	f63f aeaf 	bhi.w	80006f6 <__aeabi_dmul+0xde>
 8000998:	ebb5 0c03 	subs.w	ip, r5, r3
 800099c:	bf04      	itt	eq
 800099e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009a6:	f150 0000 	adcs.w	r0, r0, #0
 80009aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	pop	{r4, r5, r6, pc}
 80009b0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009bc:	bfc2      	ittt	gt
 80009be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	popgt	{r4, r5, r6, pc}
 80009c8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009cc:	f04f 0e00 	mov.w	lr, #0
 80009d0:	3c01      	subs	r4, #1
 80009d2:	e690      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009d4:	ea45 0e06 	orr.w	lr, r5, r6
 80009d8:	e68d      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009de:	ea94 0f0c 	teq	r4, ip
 80009e2:	bf08      	it	eq
 80009e4:	ea95 0f0c 	teqeq	r5, ip
 80009e8:	f43f af3b 	beq.w	8000862 <__aeabi_dmul+0x24a>
 80009ec:	ea94 0f0c 	teq	r4, ip
 80009f0:	d10a      	bne.n	8000a08 <__aeabi_ddiv+0x19c>
 80009f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009f6:	f47f af34 	bne.w	8000862 <__aeabi_dmul+0x24a>
 80009fa:	ea95 0f0c 	teq	r5, ip
 80009fe:	f47f af25 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a02:	4610      	mov	r0, r2
 8000a04:	4619      	mov	r1, r3
 8000a06:	e72c      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a08:	ea95 0f0c 	teq	r5, ip
 8000a0c:	d106      	bne.n	8000a1c <__aeabi_ddiv+0x1b0>
 8000a0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a12:	f43f aefd 	beq.w	8000810 <__aeabi_dmul+0x1f8>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e722      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a20:	bf18      	it	ne
 8000a22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a26:	f47f aec5 	bne.w	80007b4 <__aeabi_dmul+0x19c>
 8000a2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a2e:	f47f af0d 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a36:	f47f aeeb 	bne.w	8000810 <__aeabi_dmul+0x1f8>
 8000a3a:	e712      	b.n	8000862 <__aeabi_dmul+0x24a>

08000a3c <__gedf2>:
 8000a3c:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 8000a40:	e006      	b.n	8000a50 <__cmpdf2+0x4>
 8000a42:	bf00      	nop

08000a44 <__ledf2>:
 8000a44:	f04f 0c01 	mov.w	ip, #1
 8000a48:	e002      	b.n	8000a50 <__cmpdf2+0x4>
 8000a4a:	bf00      	nop

08000a4c <__cmpdf2>:
 8000a4c:	f04f 0c01 	mov.w	ip, #1
 8000a50:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a66:	d01b      	beq.n	8000aa0 <__cmpdf2+0x54>
 8000a68:	b001      	add	sp, #4
 8000a6a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a6e:	bf0c      	ite	eq
 8000a70:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a74:	ea91 0f03 	teqne	r1, r3
 8000a78:	bf02      	ittt	eq
 8000a7a:	ea90 0f02 	teqeq	r0, r2
 8000a7e:	2000      	moveq	r0, #0
 8000a80:	4770      	bxeq	lr
 8000a82:	f110 0f00 	cmn.w	r0, #0
 8000a86:	ea91 0f03 	teq	r1, r3
 8000a8a:	bf58      	it	pl
 8000a8c:	4299      	cmppl	r1, r3
 8000a8e:	bf08      	it	eq
 8000a90:	4290      	cmpeq	r0, r2
 8000a92:	bf2c      	ite	cs
 8000a94:	17d8      	asrcs	r0, r3, #31
 8000a96:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a9a:	f040 0001 	orr.w	r0, r0, #1
 8000a9e:	4770      	bx	lr
 8000aa0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d102      	bne.n	8000ab0 <__cmpdf2+0x64>
 8000aaa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aae:	d107      	bne.n	8000ac0 <__cmpdf2+0x74>
 8000ab0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d1d6      	bne.n	8000a68 <__cmpdf2+0x1c>
 8000aba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000abe:	d0d3      	beq.n	8000a68 <__cmpdf2+0x1c>
 8000ac0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdrcmple>:
 8000ac8:	4684      	mov	ip, r0
 8000aca:	4610      	mov	r0, r2
 8000acc:	4662      	mov	r2, ip
 8000ace:	468c      	mov	ip, r1
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4663      	mov	r3, ip
 8000ad4:	e000      	b.n	8000ad8 <__aeabi_cdcmpeq>
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdcmpeq>:
 8000ad8:	b501      	push	{r0, lr}
 8000ada:	f7ff ffb7 	bl	8000a4c <__cmpdf2>
 8000ade:	2800      	cmp	r0, #0
 8000ae0:	bf48      	it	mi
 8000ae2:	f110 0f00 	cmnmi.w	r0, #0
 8000ae6:	bd01      	pop	{r0, pc}

08000ae8 <__aeabi_dcmpeq>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff fff4 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000af0:	bf0c      	ite	eq
 8000af2:	2001      	moveq	r0, #1
 8000af4:	2000      	movne	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmplt>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffea 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b04:	bf34      	ite	cc
 8000b06:	2001      	movcc	r0, #1
 8000b08:	2000      	movcs	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmple>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffe0 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b18:	bf94      	ite	ls
 8000b1a:	2001      	movls	r0, #1
 8000b1c:	2000      	movhi	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmpge>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffce 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b2c:	bf94      	ite	ls
 8000b2e:	2001      	movls	r0, #1
 8000b30:	2000      	movhi	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmpgt>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffc4 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b40:	bf34      	ite	cc
 8000b42:	2001      	movcc	r0, #1
 8000b44:	2000      	movcs	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmpun>:
 8000b4c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x10>
 8000b56:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b5a:	d10a      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x20>
 8000b66:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b6a:	d102      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b6c:	f04f 0000 	mov.w	r0, #0
 8000b70:	4770      	bx	lr
 8000b72:	f04f 0001 	mov.w	r0, #1
 8000b76:	4770      	bx	lr

08000b78 <__aeabi_d2uiz>:
 8000b78:	004a      	lsls	r2, r1, #1
 8000b7a:	d211      	bcs.n	8000ba0 <__aeabi_d2uiz+0x28>
 8000b7c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b80:	d211      	bcs.n	8000ba6 <__aeabi_d2uiz+0x2e>
 8000b82:	d50d      	bpl.n	8000ba0 <__aeabi_d2uiz+0x28>
 8000b84:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b88:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b8c:	d40e      	bmi.n	8000bac <__aeabi_d2uiz+0x34>
 8000b8e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b92:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b96:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b9a:	fa23 f002 	lsr.w	r0, r3, r2
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000baa:	d102      	bne.n	8000bb2 <__aeabi_d2uiz+0x3a>
 8000bac:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000bb0:	4770      	bx	lr
 8000bb2:	f04f 0000 	mov.w	r0, #0
 8000bb6:	4770      	bx	lr

08000bb8 <__aeabi_d2f>:
 8000bb8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bbc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000bc0:	bf24      	itt	cs
 8000bc2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000bc6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000bca:	d90d      	bls.n	8000be8 <__aeabi_d2f+0x30>
 8000bcc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000bd0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bd4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bd8:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000bdc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000be0:	bf08      	it	eq
 8000be2:	f020 0001 	biceq.w	r0, r0, #1
 8000be6:	4770      	bx	lr
 8000be8:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000bec:	d121      	bne.n	8000c32 <__aeabi_d2f+0x7a>
 8000bee:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000bf2:	bfbc      	itt	lt
 8000bf4:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000bf8:	4770      	bxlt	lr
 8000bfa:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000bfe:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c02:	f1c2 0218 	rsb	r2, r2, #24
 8000c06:	f1c2 0c20 	rsb	ip, r2, #32
 8000c0a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c0e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c12:	bf18      	it	ne
 8000c14:	f040 0001 	orrne.w	r0, r0, #1
 8000c18:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c1c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c20:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c24:	ea40 000c 	orr.w	r0, r0, ip
 8000c28:	fa23 f302 	lsr.w	r3, r3, r2
 8000c2c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c30:	e7cc      	b.n	8000bcc <__aeabi_d2f+0x14>
 8000c32:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c36:	d107      	bne.n	8000c48 <__aeabi_d2f+0x90>
 8000c38:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c3c:	bf1e      	ittt	ne
 8000c3e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c42:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c46:	4770      	bxne	lr
 8000c48:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c4c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c50:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c54:	4770      	bx	lr
 8000c56:	bf00      	nop

08000c58 <__aeabi_ldivmod>:
 8000c58:	b97b      	cbnz	r3, 8000c7a <__aeabi_ldivmod+0x22>
 8000c5a:	b972      	cbnz	r2, 8000c7a <__aeabi_ldivmod+0x22>
 8000c5c:	2900      	cmp	r1, #0
 8000c5e:	bfbe      	ittt	lt
 8000c60:	2000      	movlt	r0, #0
 8000c62:	f04f 4100 	movlt.w	r1, #2147483648	@ 0x80000000
 8000c66:	e006      	blt.n	8000c76 <__aeabi_ldivmod+0x1e>
 8000c68:	bf08      	it	eq
 8000c6a:	2800      	cmpeq	r0, #0
 8000c6c:	bf1c      	itt	ne
 8000c6e:	f06f 4100 	mvnne.w	r1, #2147483648	@ 0x80000000
 8000c72:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000c76:	f000 b9b5 	b.w	8000fe4 <__aeabi_idiv0>
 8000c7a:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c7e:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c82:	2900      	cmp	r1, #0
 8000c84:	db09      	blt.n	8000c9a <__aeabi_ldivmod+0x42>
 8000c86:	2b00      	cmp	r3, #0
 8000c88:	db1a      	blt.n	8000cc0 <__aeabi_ldivmod+0x68>
 8000c8a:	f000 f84d 	bl	8000d28 <__udivmoddi4>
 8000c8e:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c92:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c96:	b004      	add	sp, #16
 8000c98:	4770      	bx	lr
 8000c9a:	4240      	negs	r0, r0
 8000c9c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ca0:	2b00      	cmp	r3, #0
 8000ca2:	db1b      	blt.n	8000cdc <__aeabi_ldivmod+0x84>
 8000ca4:	f000 f840 	bl	8000d28 <__udivmoddi4>
 8000ca8:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cac:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb0:	b004      	add	sp, #16
 8000cb2:	4240      	negs	r0, r0
 8000cb4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cb8:	4252      	negs	r2, r2
 8000cba:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000cbe:	4770      	bx	lr
 8000cc0:	4252      	negs	r2, r2
 8000cc2:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000cc6:	f000 f82f 	bl	8000d28 <__udivmoddi4>
 8000cca:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cce:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cd2:	b004      	add	sp, #16
 8000cd4:	4240      	negs	r0, r0
 8000cd6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cda:	4770      	bx	lr
 8000cdc:	4252      	negs	r2, r2
 8000cde:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000ce2:	f000 f821 	bl	8000d28 <__udivmoddi4>
 8000ce6:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cea:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cee:	b004      	add	sp, #16
 8000cf0:	4252      	negs	r2, r2
 8000cf2:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000cf6:	4770      	bx	lr

08000cf8 <__aeabi_uldivmod>:
 8000cf8:	b953      	cbnz	r3, 8000d10 <__aeabi_uldivmod+0x18>
 8000cfa:	b94a      	cbnz	r2, 8000d10 <__aeabi_uldivmod+0x18>
 8000cfc:	2900      	cmp	r1, #0
 8000cfe:	bf08      	it	eq
 8000d00:	2800      	cmpeq	r0, #0
 8000d02:	bf1c      	itt	ne
 8000d04:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000d08:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000d0c:	f000 b96a 	b.w	8000fe4 <__aeabi_idiv0>
 8000d10:	f1ad 0c08 	sub.w	ip, sp, #8
 8000d14:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000d18:	f000 f806 	bl	8000d28 <__udivmoddi4>
 8000d1c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d20:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d24:	b004      	add	sp, #16
 8000d26:	4770      	bx	lr

08000d28 <__udivmoddi4>:
 8000d28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d2c:	9d08      	ldr	r5, [sp, #32]
 8000d2e:	460c      	mov	r4, r1
 8000d30:	2b00      	cmp	r3, #0
 8000d32:	d14e      	bne.n	8000dd2 <__udivmoddi4+0xaa>
 8000d34:	4694      	mov	ip, r2
 8000d36:	458c      	cmp	ip, r1
 8000d38:	4686      	mov	lr, r0
 8000d3a:	fab2 f282 	clz	r2, r2
 8000d3e:	d962      	bls.n	8000e06 <__udivmoddi4+0xde>
 8000d40:	b14a      	cbz	r2, 8000d56 <__udivmoddi4+0x2e>
 8000d42:	f1c2 0320 	rsb	r3, r2, #32
 8000d46:	4091      	lsls	r1, r2
 8000d48:	fa20 f303 	lsr.w	r3, r0, r3
 8000d4c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d50:	4319      	orrs	r1, r3
 8000d52:	fa00 fe02 	lsl.w	lr, r0, r2
 8000d56:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d5a:	fa1f f68c 	uxth.w	r6, ip
 8000d5e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000d62:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d66:	fb07 1114 	mls	r1, r7, r4, r1
 8000d6a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d6e:	fb04 f106 	mul.w	r1, r4, r6
 8000d72:	4299      	cmp	r1, r3
 8000d74:	d90a      	bls.n	8000d8c <__udivmoddi4+0x64>
 8000d76:	eb1c 0303 	adds.w	r3, ip, r3
 8000d7a:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000d7e:	f080 8112 	bcs.w	8000fa6 <__udivmoddi4+0x27e>
 8000d82:	4299      	cmp	r1, r3
 8000d84:	f240 810f 	bls.w	8000fa6 <__udivmoddi4+0x27e>
 8000d88:	3c02      	subs	r4, #2
 8000d8a:	4463      	add	r3, ip
 8000d8c:	1a59      	subs	r1, r3, r1
 8000d8e:	fa1f f38e 	uxth.w	r3, lr
 8000d92:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d96:	fb07 1110 	mls	r1, r7, r0, r1
 8000d9a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d9e:	fb00 f606 	mul.w	r6, r0, r6
 8000da2:	429e      	cmp	r6, r3
 8000da4:	d90a      	bls.n	8000dbc <__udivmoddi4+0x94>
 8000da6:	eb1c 0303 	adds.w	r3, ip, r3
 8000daa:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8000dae:	f080 80fc 	bcs.w	8000faa <__udivmoddi4+0x282>
 8000db2:	429e      	cmp	r6, r3
 8000db4:	f240 80f9 	bls.w	8000faa <__udivmoddi4+0x282>
 8000db8:	4463      	add	r3, ip
 8000dba:	3802      	subs	r0, #2
 8000dbc:	1b9b      	subs	r3, r3, r6
 8000dbe:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000dc2:	2100      	movs	r1, #0
 8000dc4:	b11d      	cbz	r5, 8000dce <__udivmoddi4+0xa6>
 8000dc6:	40d3      	lsrs	r3, r2
 8000dc8:	2200      	movs	r2, #0
 8000dca:	e9c5 3200 	strd	r3, r2, [r5]
 8000dce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dd2:	428b      	cmp	r3, r1
 8000dd4:	d905      	bls.n	8000de2 <__udivmoddi4+0xba>
 8000dd6:	b10d      	cbz	r5, 8000ddc <__udivmoddi4+0xb4>
 8000dd8:	e9c5 0100 	strd	r0, r1, [r5]
 8000ddc:	2100      	movs	r1, #0
 8000dde:	4608      	mov	r0, r1
 8000de0:	e7f5      	b.n	8000dce <__udivmoddi4+0xa6>
 8000de2:	fab3 f183 	clz	r1, r3
 8000de6:	2900      	cmp	r1, #0
 8000de8:	d146      	bne.n	8000e78 <__udivmoddi4+0x150>
 8000dea:	42a3      	cmp	r3, r4
 8000dec:	d302      	bcc.n	8000df4 <__udivmoddi4+0xcc>
 8000dee:	4290      	cmp	r0, r2
 8000df0:	f0c0 80f0 	bcc.w	8000fd4 <__udivmoddi4+0x2ac>
 8000df4:	1a86      	subs	r6, r0, r2
 8000df6:	eb64 0303 	sbc.w	r3, r4, r3
 8000dfa:	2001      	movs	r0, #1
 8000dfc:	2d00      	cmp	r5, #0
 8000dfe:	d0e6      	beq.n	8000dce <__udivmoddi4+0xa6>
 8000e00:	e9c5 6300 	strd	r6, r3, [r5]
 8000e04:	e7e3      	b.n	8000dce <__udivmoddi4+0xa6>
 8000e06:	2a00      	cmp	r2, #0
 8000e08:	f040 8090 	bne.w	8000f2c <__udivmoddi4+0x204>
 8000e0c:	eba1 040c 	sub.w	r4, r1, ip
 8000e10:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e14:	fa1f f78c 	uxth.w	r7, ip
 8000e18:	2101      	movs	r1, #1
 8000e1a:	fbb4 f6f8 	udiv	r6, r4, r8
 8000e1e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000e22:	fb08 4416 	mls	r4, r8, r6, r4
 8000e26:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e2a:	fb07 f006 	mul.w	r0, r7, r6
 8000e2e:	4298      	cmp	r0, r3
 8000e30:	d908      	bls.n	8000e44 <__udivmoddi4+0x11c>
 8000e32:	eb1c 0303 	adds.w	r3, ip, r3
 8000e36:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 8000e3a:	d202      	bcs.n	8000e42 <__udivmoddi4+0x11a>
 8000e3c:	4298      	cmp	r0, r3
 8000e3e:	f200 80cd 	bhi.w	8000fdc <__udivmoddi4+0x2b4>
 8000e42:	4626      	mov	r6, r4
 8000e44:	1a1c      	subs	r4, r3, r0
 8000e46:	fa1f f38e 	uxth.w	r3, lr
 8000e4a:	fbb4 f0f8 	udiv	r0, r4, r8
 8000e4e:	fb08 4410 	mls	r4, r8, r0, r4
 8000e52:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e56:	fb00 f707 	mul.w	r7, r0, r7
 8000e5a:	429f      	cmp	r7, r3
 8000e5c:	d908      	bls.n	8000e70 <__udivmoddi4+0x148>
 8000e5e:	eb1c 0303 	adds.w	r3, ip, r3
 8000e62:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 8000e66:	d202      	bcs.n	8000e6e <__udivmoddi4+0x146>
 8000e68:	429f      	cmp	r7, r3
 8000e6a:	f200 80b0 	bhi.w	8000fce <__udivmoddi4+0x2a6>
 8000e6e:	4620      	mov	r0, r4
 8000e70:	1bdb      	subs	r3, r3, r7
 8000e72:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000e76:	e7a5      	b.n	8000dc4 <__udivmoddi4+0x9c>
 8000e78:	f1c1 0620 	rsb	r6, r1, #32
 8000e7c:	408b      	lsls	r3, r1
 8000e7e:	fa22 f706 	lsr.w	r7, r2, r6
 8000e82:	431f      	orrs	r7, r3
 8000e84:	fa20 fc06 	lsr.w	ip, r0, r6
 8000e88:	fa04 f301 	lsl.w	r3, r4, r1
 8000e8c:	ea43 030c 	orr.w	r3, r3, ip
 8000e90:	40f4      	lsrs	r4, r6
 8000e92:	fa00 f801 	lsl.w	r8, r0, r1
 8000e96:	0c38      	lsrs	r0, r7, #16
 8000e98:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000e9c:	fbb4 fef0 	udiv	lr, r4, r0
 8000ea0:	fa1f fc87 	uxth.w	ip, r7
 8000ea4:	fb00 441e 	mls	r4, r0, lr, r4
 8000ea8:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000eac:	fb0e f90c 	mul.w	r9, lr, ip
 8000eb0:	45a1      	cmp	r9, r4
 8000eb2:	fa02 f201 	lsl.w	r2, r2, r1
 8000eb6:	d90a      	bls.n	8000ece <__udivmoddi4+0x1a6>
 8000eb8:	193c      	adds	r4, r7, r4
 8000eba:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8000ebe:	f080 8084 	bcs.w	8000fca <__udivmoddi4+0x2a2>
 8000ec2:	45a1      	cmp	r9, r4
 8000ec4:	f240 8081 	bls.w	8000fca <__udivmoddi4+0x2a2>
 8000ec8:	f1ae 0e02 	sub.w	lr, lr, #2
 8000ecc:	443c      	add	r4, r7
 8000ece:	eba4 0409 	sub.w	r4, r4, r9
 8000ed2:	fa1f f983 	uxth.w	r9, r3
 8000ed6:	fbb4 f3f0 	udiv	r3, r4, r0
 8000eda:	fb00 4413 	mls	r4, r0, r3, r4
 8000ede:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000ee2:	fb03 fc0c 	mul.w	ip, r3, ip
 8000ee6:	45a4      	cmp	ip, r4
 8000ee8:	d907      	bls.n	8000efa <__udivmoddi4+0x1d2>
 8000eea:	193c      	adds	r4, r7, r4
 8000eec:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 8000ef0:	d267      	bcs.n	8000fc2 <__udivmoddi4+0x29a>
 8000ef2:	45a4      	cmp	ip, r4
 8000ef4:	d965      	bls.n	8000fc2 <__udivmoddi4+0x29a>
 8000ef6:	3b02      	subs	r3, #2
 8000ef8:	443c      	add	r4, r7
 8000efa:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000efe:	fba0 9302 	umull	r9, r3, r0, r2
 8000f02:	eba4 040c 	sub.w	r4, r4, ip
 8000f06:	429c      	cmp	r4, r3
 8000f08:	46ce      	mov	lr, r9
 8000f0a:	469c      	mov	ip, r3
 8000f0c:	d351      	bcc.n	8000fb2 <__udivmoddi4+0x28a>
 8000f0e:	d04e      	beq.n	8000fae <__udivmoddi4+0x286>
 8000f10:	b155      	cbz	r5, 8000f28 <__udivmoddi4+0x200>
 8000f12:	ebb8 030e 	subs.w	r3, r8, lr
 8000f16:	eb64 040c 	sbc.w	r4, r4, ip
 8000f1a:	fa04 f606 	lsl.w	r6, r4, r6
 8000f1e:	40cb      	lsrs	r3, r1
 8000f20:	431e      	orrs	r6, r3
 8000f22:	40cc      	lsrs	r4, r1
 8000f24:	e9c5 6400 	strd	r6, r4, [r5]
 8000f28:	2100      	movs	r1, #0
 8000f2a:	e750      	b.n	8000dce <__udivmoddi4+0xa6>
 8000f2c:	f1c2 0320 	rsb	r3, r2, #32
 8000f30:	fa20 f103 	lsr.w	r1, r0, r3
 8000f34:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f38:	fa24 f303 	lsr.w	r3, r4, r3
 8000f3c:	4094      	lsls	r4, r2
 8000f3e:	430c      	orrs	r4, r1
 8000f40:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000f44:	fa00 fe02 	lsl.w	lr, r0, r2
 8000f48:	fa1f f78c 	uxth.w	r7, ip
 8000f4c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000f50:	fb08 3110 	mls	r1, r8, r0, r3
 8000f54:	0c23      	lsrs	r3, r4, #16
 8000f56:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000f5a:	fb00 f107 	mul.w	r1, r0, r7
 8000f5e:	4299      	cmp	r1, r3
 8000f60:	d908      	bls.n	8000f74 <__udivmoddi4+0x24c>
 8000f62:	eb1c 0303 	adds.w	r3, ip, r3
 8000f66:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 8000f6a:	d22c      	bcs.n	8000fc6 <__udivmoddi4+0x29e>
 8000f6c:	4299      	cmp	r1, r3
 8000f6e:	d92a      	bls.n	8000fc6 <__udivmoddi4+0x29e>
 8000f70:	3802      	subs	r0, #2
 8000f72:	4463      	add	r3, ip
 8000f74:	1a5b      	subs	r3, r3, r1
 8000f76:	b2a4      	uxth	r4, r4
 8000f78:	fbb3 f1f8 	udiv	r1, r3, r8
 8000f7c:	fb08 3311 	mls	r3, r8, r1, r3
 8000f80:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000f84:	fb01 f307 	mul.w	r3, r1, r7
 8000f88:	42a3      	cmp	r3, r4
 8000f8a:	d908      	bls.n	8000f9e <__udivmoddi4+0x276>
 8000f8c:	eb1c 0404 	adds.w	r4, ip, r4
 8000f90:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 8000f94:	d213      	bcs.n	8000fbe <__udivmoddi4+0x296>
 8000f96:	42a3      	cmp	r3, r4
 8000f98:	d911      	bls.n	8000fbe <__udivmoddi4+0x296>
 8000f9a:	3902      	subs	r1, #2
 8000f9c:	4464      	add	r4, ip
 8000f9e:	1ae4      	subs	r4, r4, r3
 8000fa0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000fa4:	e739      	b.n	8000e1a <__udivmoddi4+0xf2>
 8000fa6:	4604      	mov	r4, r0
 8000fa8:	e6f0      	b.n	8000d8c <__udivmoddi4+0x64>
 8000faa:	4608      	mov	r0, r1
 8000fac:	e706      	b.n	8000dbc <__udivmoddi4+0x94>
 8000fae:	45c8      	cmp	r8, r9
 8000fb0:	d2ae      	bcs.n	8000f10 <__udivmoddi4+0x1e8>
 8000fb2:	ebb9 0e02 	subs.w	lr, r9, r2
 8000fb6:	eb63 0c07 	sbc.w	ip, r3, r7
 8000fba:	3801      	subs	r0, #1
 8000fbc:	e7a8      	b.n	8000f10 <__udivmoddi4+0x1e8>
 8000fbe:	4631      	mov	r1, r6
 8000fc0:	e7ed      	b.n	8000f9e <__udivmoddi4+0x276>
 8000fc2:	4603      	mov	r3, r0
 8000fc4:	e799      	b.n	8000efa <__udivmoddi4+0x1d2>
 8000fc6:	4630      	mov	r0, r6
 8000fc8:	e7d4      	b.n	8000f74 <__udivmoddi4+0x24c>
 8000fca:	46d6      	mov	lr, sl
 8000fcc:	e77f      	b.n	8000ece <__udivmoddi4+0x1a6>
 8000fce:	4463      	add	r3, ip
 8000fd0:	3802      	subs	r0, #2
 8000fd2:	e74d      	b.n	8000e70 <__udivmoddi4+0x148>
 8000fd4:	4606      	mov	r6, r0
 8000fd6:	4623      	mov	r3, r4
 8000fd8:	4608      	mov	r0, r1
 8000fda:	e70f      	b.n	8000dfc <__udivmoddi4+0xd4>
 8000fdc:	3e02      	subs	r6, #2
 8000fde:	4463      	add	r3, ip
 8000fe0:	e730      	b.n	8000e44 <__udivmoddi4+0x11c>
 8000fe2:	bf00      	nop

08000fe4 <__aeabi_idiv0>:
 8000fe4:	4770      	bx	lr
 8000fe6:	bf00      	nop

08000fe8 <pvPortMallocMicroROS>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMallocMicroROS( size_t xWantedSize )
{
 8000fe8:	b580      	push	{r7, lr}
 8000fea:	b08a      	sub	sp, #40	@ 0x28
 8000fec:	af00      	add	r7, sp, #0
 8000fee:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8000ff0:	2300      	movs	r3, #0
 8000ff2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8000ff4:	f00a fd10 	bl	800ba18 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8000ff8:	4b5a      	ldr	r3, [pc, #360]	@ (8001164 <pvPortMallocMicroROS+0x17c>)
 8000ffa:	681b      	ldr	r3, [r3, #0]
 8000ffc:	2b00      	cmp	r3, #0
 8000ffe:	d101      	bne.n	8001004 <pvPortMallocMicroROS+0x1c>
		{
			prvHeapInit();
 8001000:	f000 f986 	bl	8001310 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8001004:	4b58      	ldr	r3, [pc, #352]	@ (8001168 <pvPortMallocMicroROS+0x180>)
 8001006:	681a      	ldr	r2, [r3, #0]
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	4013      	ands	r3, r2
 800100c:	2b00      	cmp	r3, #0
 800100e:	f040 8090 	bne.w	8001132 <pvPortMallocMicroROS+0x14a>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	2b00      	cmp	r3, #0
 8001016:	d01e      	beq.n	8001056 <pvPortMallocMicroROS+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8001018:	2208      	movs	r2, #8
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	4413      	add	r3, r2
 800101e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	f003 0307 	and.w	r3, r3, #7
 8001026:	2b00      	cmp	r3, #0
 8001028:	d015      	beq.n	8001056 <pvPortMallocMicroROS+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	f023 0307 	bic.w	r3, r3, #7
 8001030:	3308      	adds	r3, #8
 8001032:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	f003 0307 	and.w	r3, r3, #7
 800103a:	2b00      	cmp	r3, #0
 800103c:	d00b      	beq.n	8001056 <pvPortMallocMicroROS+0x6e>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800103e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001042:	f383 8811 	msr	BASEPRI, r3
 8001046:	f3bf 8f6f 	isb	sy
 800104a:	f3bf 8f4f 	dsb	sy
 800104e:	617b      	str	r3, [r7, #20]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8001050:	bf00      	nop
 8001052:	bf00      	nop
 8001054:	e7fd      	b.n	8001052 <pvPortMallocMicroROS+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	2b00      	cmp	r3, #0
 800105a:	d06a      	beq.n	8001132 <pvPortMallocMicroROS+0x14a>
 800105c:	4b43      	ldr	r3, [pc, #268]	@ (800116c <pvPortMallocMicroROS+0x184>)
 800105e:	681b      	ldr	r3, [r3, #0]
 8001060:	687a      	ldr	r2, [r7, #4]
 8001062:	429a      	cmp	r2, r3
 8001064:	d865      	bhi.n	8001132 <pvPortMallocMicroROS+0x14a>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8001066:	4b42      	ldr	r3, [pc, #264]	@ (8001170 <pvPortMallocMicroROS+0x188>)
 8001068:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800106a:	4b41      	ldr	r3, [pc, #260]	@ (8001170 <pvPortMallocMicroROS+0x188>)
 800106c:	681b      	ldr	r3, [r3, #0]
 800106e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8001070:	e004      	b.n	800107c <pvPortMallocMicroROS+0x94>
				{
					pxPreviousBlock = pxBlock;
 8001072:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001074:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8001076:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001078:	681b      	ldr	r3, [r3, #0]
 800107a:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800107c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800107e:	685b      	ldr	r3, [r3, #4]
 8001080:	687a      	ldr	r2, [r7, #4]
 8001082:	429a      	cmp	r2, r3
 8001084:	d903      	bls.n	800108e <pvPortMallocMicroROS+0xa6>
 8001086:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001088:	681b      	ldr	r3, [r3, #0]
 800108a:	2b00      	cmp	r3, #0
 800108c:	d1f1      	bne.n	8001072 <pvPortMallocMicroROS+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800108e:	4b35      	ldr	r3, [pc, #212]	@ (8001164 <pvPortMallocMicroROS+0x17c>)
 8001090:	681b      	ldr	r3, [r3, #0]
 8001092:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001094:	429a      	cmp	r2, r3
 8001096:	d04c      	beq.n	8001132 <pvPortMallocMicroROS+0x14a>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8001098:	6a3b      	ldr	r3, [r7, #32]
 800109a:	681b      	ldr	r3, [r3, #0]
 800109c:	2208      	movs	r2, #8
 800109e:	4413      	add	r3, r2
 80010a0:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80010a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80010a4:	681a      	ldr	r2, [r3, #0]
 80010a6:	6a3b      	ldr	r3, [r7, #32]
 80010a8:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80010aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80010ac:	685a      	ldr	r2, [r3, #4]
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	1ad2      	subs	r2, r2, r3
 80010b2:	2308      	movs	r3, #8
 80010b4:	005b      	lsls	r3, r3, #1
 80010b6:	429a      	cmp	r2, r3
 80010b8:	d920      	bls.n	80010fc <pvPortMallocMicroROS+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80010ba:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	4413      	add	r3, r2
 80010c0:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80010c2:	69bb      	ldr	r3, [r7, #24]
 80010c4:	f003 0307 	and.w	r3, r3, #7
 80010c8:	2b00      	cmp	r3, #0
 80010ca:	d00b      	beq.n	80010e4 <pvPortMallocMicroROS+0xfc>
	__asm volatile
 80010cc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80010d0:	f383 8811 	msr	BASEPRI, r3
 80010d4:	f3bf 8f6f 	isb	sy
 80010d8:	f3bf 8f4f 	dsb	sy
 80010dc:	613b      	str	r3, [r7, #16]
}
 80010de:	bf00      	nop
 80010e0:	bf00      	nop
 80010e2:	e7fd      	b.n	80010e0 <pvPortMallocMicroROS+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80010e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80010e6:	685a      	ldr	r2, [r3, #4]
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	1ad2      	subs	r2, r2, r3
 80010ec:	69bb      	ldr	r3, [r7, #24]
 80010ee:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80010f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80010f2:	687a      	ldr	r2, [r7, #4]
 80010f4:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80010f6:	69b8      	ldr	r0, [r7, #24]
 80010f8:	f000 f96c 	bl	80013d4 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80010fc:	4b1b      	ldr	r3, [pc, #108]	@ (800116c <pvPortMallocMicroROS+0x184>)
 80010fe:	681a      	ldr	r2, [r3, #0]
 8001100:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001102:	685b      	ldr	r3, [r3, #4]
 8001104:	1ad3      	subs	r3, r2, r3
 8001106:	4a19      	ldr	r2, [pc, #100]	@ (800116c <pvPortMallocMicroROS+0x184>)
 8001108:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800110a:	4b18      	ldr	r3, [pc, #96]	@ (800116c <pvPortMallocMicroROS+0x184>)
 800110c:	681a      	ldr	r2, [r3, #0]
 800110e:	4b19      	ldr	r3, [pc, #100]	@ (8001174 <pvPortMallocMicroROS+0x18c>)
 8001110:	681b      	ldr	r3, [r3, #0]
 8001112:	429a      	cmp	r2, r3
 8001114:	d203      	bcs.n	800111e <pvPortMallocMicroROS+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8001116:	4b15      	ldr	r3, [pc, #84]	@ (800116c <pvPortMallocMicroROS+0x184>)
 8001118:	681b      	ldr	r3, [r3, #0]
 800111a:	4a16      	ldr	r2, [pc, #88]	@ (8001174 <pvPortMallocMicroROS+0x18c>)
 800111c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800111e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001120:	685a      	ldr	r2, [r3, #4]
 8001122:	4b11      	ldr	r3, [pc, #68]	@ (8001168 <pvPortMallocMicroROS+0x180>)
 8001124:	681b      	ldr	r3, [r3, #0]
 8001126:	431a      	orrs	r2, r3
 8001128:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800112a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800112c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800112e:	2200      	movs	r2, #0
 8001130:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8001132:	f00a fc7f 	bl	800ba34 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8001136:	69fb      	ldr	r3, [r7, #28]
 8001138:	f003 0307 	and.w	r3, r3, #7
 800113c:	2b00      	cmp	r3, #0
 800113e:	d00b      	beq.n	8001158 <pvPortMallocMicroROS+0x170>
	__asm volatile
 8001140:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001144:	f383 8811 	msr	BASEPRI, r3
 8001148:	f3bf 8f6f 	isb	sy
 800114c:	f3bf 8f4f 	dsb	sy
 8001150:	60fb      	str	r3, [r7, #12]
}
 8001152:	bf00      	nop
 8001154:	bf00      	nop
 8001156:	e7fd      	b.n	8001154 <pvPortMallocMicroROS+0x16c>
	return pvReturn;
 8001158:	69fb      	ldr	r3, [r7, #28]
}
 800115a:	4618      	mov	r0, r3
 800115c:	3728      	adds	r7, #40	@ 0x28
 800115e:	46bd      	mov	sp, r7
 8001160:	bd80      	pop	{r7, pc}
 8001162:	bf00      	nop
 8001164:	20000f90 	.word	0x20000f90
 8001168:	20000f9c 	.word	0x20000f9c
 800116c:	20000f94 	.word	0x20000f94
 8001170:	20000f88 	.word	0x20000f88
 8001174:	20000f98 	.word	0x20000f98

08001178 <vPortFreeMicroROS>:
/*-----------------------------------------------------------*/

void vPortFreeMicroROS( void *pv )
{
 8001178:	b580      	push	{r7, lr}
 800117a:	b086      	sub	sp, #24
 800117c:	af00      	add	r7, sp, #0
 800117e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	2b00      	cmp	r3, #0
 8001188:	d04a      	beq.n	8001220 <vPortFreeMicroROS+0xa8>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800118a:	2308      	movs	r3, #8
 800118c:	425b      	negs	r3, r3
 800118e:	697a      	ldr	r2, [r7, #20]
 8001190:	4413      	add	r3, r2
 8001192:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8001194:	697b      	ldr	r3, [r7, #20]
 8001196:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8001198:	693b      	ldr	r3, [r7, #16]
 800119a:	685a      	ldr	r2, [r3, #4]
 800119c:	4b22      	ldr	r3, [pc, #136]	@ (8001228 <vPortFreeMicroROS+0xb0>)
 800119e:	681b      	ldr	r3, [r3, #0]
 80011a0:	4013      	ands	r3, r2
 80011a2:	2b00      	cmp	r3, #0
 80011a4:	d10b      	bne.n	80011be <vPortFreeMicroROS+0x46>
	__asm volatile
 80011a6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80011aa:	f383 8811 	msr	BASEPRI, r3
 80011ae:	f3bf 8f6f 	isb	sy
 80011b2:	f3bf 8f4f 	dsb	sy
 80011b6:	60fb      	str	r3, [r7, #12]
}
 80011b8:	bf00      	nop
 80011ba:	bf00      	nop
 80011bc:	e7fd      	b.n	80011ba <vPortFreeMicroROS+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80011be:	693b      	ldr	r3, [r7, #16]
 80011c0:	681b      	ldr	r3, [r3, #0]
 80011c2:	2b00      	cmp	r3, #0
 80011c4:	d00b      	beq.n	80011de <vPortFreeMicroROS+0x66>
	__asm volatile
 80011c6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80011ca:	f383 8811 	msr	BASEPRI, r3
 80011ce:	f3bf 8f6f 	isb	sy
 80011d2:	f3bf 8f4f 	dsb	sy
 80011d6:	60bb      	str	r3, [r7, #8]
}
 80011d8:	bf00      	nop
 80011da:	bf00      	nop
 80011dc:	e7fd      	b.n	80011da <vPortFreeMicroROS+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80011de:	693b      	ldr	r3, [r7, #16]
 80011e0:	685a      	ldr	r2, [r3, #4]
 80011e2:	4b11      	ldr	r3, [pc, #68]	@ (8001228 <vPortFreeMicroROS+0xb0>)
 80011e4:	681b      	ldr	r3, [r3, #0]
 80011e6:	4013      	ands	r3, r2
 80011e8:	2b00      	cmp	r3, #0
 80011ea:	d019      	beq.n	8001220 <vPortFreeMicroROS+0xa8>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80011ec:	693b      	ldr	r3, [r7, #16]
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	2b00      	cmp	r3, #0
 80011f2:	d115      	bne.n	8001220 <vPortFreeMicroROS+0xa8>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80011f4:	693b      	ldr	r3, [r7, #16]
 80011f6:	685a      	ldr	r2, [r3, #4]
 80011f8:	4b0b      	ldr	r3, [pc, #44]	@ (8001228 <vPortFreeMicroROS+0xb0>)
 80011fa:	681b      	ldr	r3, [r3, #0]
 80011fc:	43db      	mvns	r3, r3
 80011fe:	401a      	ands	r2, r3
 8001200:	693b      	ldr	r3, [r7, #16]
 8001202:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8001204:	f00a fc08 	bl	800ba18 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8001208:	693b      	ldr	r3, [r7, #16]
 800120a:	685a      	ldr	r2, [r3, #4]
 800120c:	4b07      	ldr	r3, [pc, #28]	@ (800122c <vPortFreeMicroROS+0xb4>)
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	4413      	add	r3, r2
 8001212:	4a06      	ldr	r2, [pc, #24]	@ (800122c <vPortFreeMicroROS+0xb4>)
 8001214:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8001216:	6938      	ldr	r0, [r7, #16]
 8001218:	f000 f8dc 	bl	80013d4 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 800121c:	f00a fc0a 	bl	800ba34 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8001220:	bf00      	nop
 8001222:	3718      	adds	r7, #24
 8001224:	46bd      	mov	sp, r7
 8001226:	bd80      	pop	{r7, pc}
 8001228:	20000f9c 	.word	0x20000f9c
 800122c:	20000f94 	.word	0x20000f94

08001230 <getBlockSize>:
/*-----------------------------------------------------------*/

/*-----------------------------------------------------------*/
size_t getBlockSize( void *pv )
{
 8001230:	b480      	push	{r7}
 8001232:	b087      	sub	sp, #28
 8001234:	af00      	add	r7, sp, #0
 8001236:	6078      	str	r0, [r7, #4]

	uint8_t *puc = ( uint8_t * ) pv;
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	617b      	str	r3, [r7, #20]
	BlockLink_t *pxLink;

	puc -= xHeapStructSize;
 800123c:	2308      	movs	r3, #8
 800123e:	425b      	negs	r3, r3
 8001240:	697a      	ldr	r2, [r7, #20]
 8001242:	4413      	add	r3, r2
 8001244:	617b      	str	r3, [r7, #20]
	pxLink = ( void * ) puc;
 8001246:	697b      	ldr	r3, [r7, #20]
 8001248:	613b      	str	r3, [r7, #16]

	size_t count = pxLink->xBlockSize & ~xBlockAllocatedBit;
 800124a:	693b      	ldr	r3, [r7, #16]
 800124c:	685a      	ldr	r2, [r3, #4]
 800124e:	4b06      	ldr	r3, [pc, #24]	@ (8001268 <getBlockSize+0x38>)
 8001250:	681b      	ldr	r3, [r3, #0]
 8001252:	43db      	mvns	r3, r3
 8001254:	4013      	ands	r3, r2
 8001256:	60fb      	str	r3, [r7, #12]

	return count;
 8001258:	68fb      	ldr	r3, [r7, #12]
}
 800125a:	4618      	mov	r0, r3
 800125c:	371c      	adds	r7, #28
 800125e:	46bd      	mov	sp, r7
 8001260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001264:	4770      	bx	lr
 8001266:	bf00      	nop
 8001268:	20000f9c 	.word	0x20000f9c

0800126c <pvPortReallocMicroROS>:
/*-----------------------------------------------------------*/

void *pvPortReallocMicroROS( void *pv, size_t xWantedSize )
{
 800126c:	b580      	push	{r7, lr}
 800126e:	b084      	sub	sp, #16
 8001270:	af00      	add	r7, sp, #0
 8001272:	6078      	str	r0, [r7, #4]
 8001274:	6039      	str	r1, [r7, #0]
	vTaskSuspendAll();
 8001276:	f00a fbcf 	bl	800ba18 <vTaskSuspendAll>

	void * newmem = pvPortMallocMicroROS(xWantedSize);
 800127a:	6838      	ldr	r0, [r7, #0]
 800127c:	f7ff feb4 	bl	8000fe8 <pvPortMallocMicroROS>
 8001280:	60b8      	str	r0, [r7, #8]
	if (newmem != NULL && pv != NULL)
 8001282:	68bb      	ldr	r3, [r7, #8]
 8001284:	2b00      	cmp	r3, #0
 8001286:	d017      	beq.n	80012b8 <pvPortReallocMicroROS+0x4c>
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	2b00      	cmp	r3, #0
 800128c:	d014      	beq.n	80012b8 <pvPortReallocMicroROS+0x4c>
	{
		size_t count = getBlockSize(pv) - xHeapStructSize;
 800128e:	6878      	ldr	r0, [r7, #4]
 8001290:	f7ff ffce 	bl	8001230 <getBlockSize>
 8001294:	4603      	mov	r3, r0
 8001296:	2208      	movs	r2, #8
 8001298:	1a9b      	subs	r3, r3, r2
 800129a:	60fb      	str	r3, [r7, #12]
		if (xWantedSize < count)
 800129c:	683a      	ldr	r2, [r7, #0]
 800129e:	68fb      	ldr	r3, [r7, #12]
 80012a0:	429a      	cmp	r2, r3
 80012a2:	d201      	bcs.n	80012a8 <pvPortReallocMicroROS+0x3c>
		{
			count = xWantedSize;
 80012a4:	683b      	ldr	r3, [r7, #0]
 80012a6:	60fb      	str	r3, [r7, #12]
		}
		memcpy(newmem, pv, count);
 80012a8:	68fa      	ldr	r2, [r7, #12]
 80012aa:	6879      	ldr	r1, [r7, #4]
 80012ac:	68b8      	ldr	r0, [r7, #8]
 80012ae:	f018 fd90 	bl	8019dd2 <memcpy>

		vPortFreeMicroROS(pv);
 80012b2:	6878      	ldr	r0, [r7, #4]
 80012b4:	f7ff ff60 	bl	8001178 <vPortFreeMicroROS>
	}

	( void ) xTaskResumeAll();
 80012b8:	f00a fbbc 	bl	800ba34 <xTaskResumeAll>

	return newmem;
 80012bc:	68bb      	ldr	r3, [r7, #8]
}
 80012be:	4618      	mov	r0, r3
 80012c0:	3710      	adds	r7, #16
 80012c2:	46bd      	mov	sp, r7
 80012c4:	bd80      	pop	{r7, pc}

080012c6 <pvPortCallocMicroROS>:
/*-----------------------------------------------------------*/

void *pvPortCallocMicroROS( size_t num, size_t xWantedSize )
{
 80012c6:	b580      	push	{r7, lr}
 80012c8:	b086      	sub	sp, #24
 80012ca:	af00      	add	r7, sp, #0
 80012cc:	6078      	str	r0, [r7, #4]
 80012ce:	6039      	str	r1, [r7, #0]
	vTaskSuspendAll();
 80012d0:	f00a fba2 	bl	800ba18 <vTaskSuspendAll>
	size_t count = xWantedSize*num;
 80012d4:	683b      	ldr	r3, [r7, #0]
 80012d6:	687a      	ldr	r2, [r7, #4]
 80012d8:	fb02 f303 	mul.w	r3, r2, r3
 80012dc:	617b      	str	r3, [r7, #20]

	void * mem = pvPortMallocMicroROS(count);
 80012de:	6978      	ldr	r0, [r7, #20]
 80012e0:	f7ff fe82 	bl	8000fe8 <pvPortMallocMicroROS>
 80012e4:	60f8      	str	r0, [r7, #12]
  	char *in_dest = (char*)mem;
 80012e6:	68fb      	ldr	r3, [r7, #12]
 80012e8:	613b      	str	r3, [r7, #16]

  	while(count--)
 80012ea:	e004      	b.n	80012f6 <pvPortCallocMicroROS+0x30>
    	*in_dest++ = 0;
 80012ec:	693b      	ldr	r3, [r7, #16]
 80012ee:	1c5a      	adds	r2, r3, #1
 80012f0:	613a      	str	r2, [r7, #16]
 80012f2:	2200      	movs	r2, #0
 80012f4:	701a      	strb	r2, [r3, #0]
  	while(count--)
 80012f6:	697b      	ldr	r3, [r7, #20]
 80012f8:	1e5a      	subs	r2, r3, #1
 80012fa:	617a      	str	r2, [r7, #20]
 80012fc:	2b00      	cmp	r3, #0
 80012fe:	d1f5      	bne.n	80012ec <pvPortCallocMicroROS+0x26>

	( void ) xTaskResumeAll();
 8001300:	f00a fb98 	bl	800ba34 <xTaskResumeAll>
  	return mem;
 8001304:	68fb      	ldr	r3, [r7, #12]
}
 8001306:	4618      	mov	r0, r3
 8001308:	3718      	adds	r7, #24
 800130a:	46bd      	mov	sp, r7
 800130c:	bd80      	pop	{r7, pc}
	...

08001310 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8001310:	b480      	push	{r7}
 8001312:	b085      	sub	sp, #20
 8001314:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8001316:	f640 33b8 	movw	r3, #3000	@ 0xbb8
 800131a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800131c:	4b27      	ldr	r3, [pc, #156]	@ (80013bc <prvHeapInit+0xac>)
 800131e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8001320:	68fb      	ldr	r3, [r7, #12]
 8001322:	f003 0307 	and.w	r3, r3, #7
 8001326:	2b00      	cmp	r3, #0
 8001328:	d00c      	beq.n	8001344 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800132a:	68fb      	ldr	r3, [r7, #12]
 800132c:	3307      	adds	r3, #7
 800132e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8001330:	68fb      	ldr	r3, [r7, #12]
 8001332:	f023 0307 	bic.w	r3, r3, #7
 8001336:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8001338:	68ba      	ldr	r2, [r7, #8]
 800133a:	68fb      	ldr	r3, [r7, #12]
 800133c:	1ad3      	subs	r3, r2, r3
 800133e:	4a1f      	ldr	r2, [pc, #124]	@ (80013bc <prvHeapInit+0xac>)
 8001340:	4413      	add	r3, r2
 8001342:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8001344:	68fb      	ldr	r3, [r7, #12]
 8001346:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8001348:	4a1d      	ldr	r2, [pc, #116]	@ (80013c0 <prvHeapInit+0xb0>)
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800134e:	4b1c      	ldr	r3, [pc, #112]	@ (80013c0 <prvHeapInit+0xb0>)
 8001350:	2200      	movs	r2, #0
 8001352:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	68ba      	ldr	r2, [r7, #8]
 8001358:	4413      	add	r3, r2
 800135a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800135c:	2208      	movs	r2, #8
 800135e:	68fb      	ldr	r3, [r7, #12]
 8001360:	1a9b      	subs	r3, r3, r2
 8001362:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8001364:	68fb      	ldr	r3, [r7, #12]
 8001366:	f023 0307 	bic.w	r3, r3, #7
 800136a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800136c:	68fb      	ldr	r3, [r7, #12]
 800136e:	4a15      	ldr	r2, [pc, #84]	@ (80013c4 <prvHeapInit+0xb4>)
 8001370:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8001372:	4b14      	ldr	r3, [pc, #80]	@ (80013c4 <prvHeapInit+0xb4>)
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	2200      	movs	r2, #0
 8001378:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800137a:	4b12      	ldr	r3, [pc, #72]	@ (80013c4 <prvHeapInit+0xb4>)
 800137c:	681b      	ldr	r3, [r3, #0]
 800137e:	2200      	movs	r2, #0
 8001380:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8001386:	683b      	ldr	r3, [r7, #0]
 8001388:	68fa      	ldr	r2, [r7, #12]
 800138a:	1ad2      	subs	r2, r2, r3
 800138c:	683b      	ldr	r3, [r7, #0]
 800138e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8001390:	4b0c      	ldr	r3, [pc, #48]	@ (80013c4 <prvHeapInit+0xb4>)
 8001392:	681a      	ldr	r2, [r3, #0]
 8001394:	683b      	ldr	r3, [r7, #0]
 8001396:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8001398:	683b      	ldr	r3, [r7, #0]
 800139a:	685b      	ldr	r3, [r3, #4]
 800139c:	4a0a      	ldr	r2, [pc, #40]	@ (80013c8 <prvHeapInit+0xb8>)
 800139e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80013a0:	683b      	ldr	r3, [r7, #0]
 80013a2:	685b      	ldr	r3, [r3, #4]
 80013a4:	4a09      	ldr	r2, [pc, #36]	@ (80013cc <prvHeapInit+0xbc>)
 80013a6:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80013a8:	4b09      	ldr	r3, [pc, #36]	@ (80013d0 <prvHeapInit+0xc0>)
 80013aa:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 80013ae:	601a      	str	r2, [r3, #0]
}
 80013b0:	bf00      	nop
 80013b2:	3714      	adds	r7, #20
 80013b4:	46bd      	mov	sp, r7
 80013b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ba:	4770      	bx	lr
 80013bc:	200003d0 	.word	0x200003d0
 80013c0:	20000f88 	.word	0x20000f88
 80013c4:	20000f90 	.word	0x20000f90
 80013c8:	20000f98 	.word	0x20000f98
 80013cc:	20000f94 	.word	0x20000f94
 80013d0:	20000f9c 	.word	0x20000f9c

080013d4 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80013d4:	b480      	push	{r7}
 80013d6:	b085      	sub	sp, #20
 80013d8:	af00      	add	r7, sp, #0
 80013da:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80013dc:	4b28      	ldr	r3, [pc, #160]	@ (8001480 <prvInsertBlockIntoFreeList+0xac>)
 80013de:	60fb      	str	r3, [r7, #12]
 80013e0:	e002      	b.n	80013e8 <prvInsertBlockIntoFreeList+0x14>
 80013e2:	68fb      	ldr	r3, [r7, #12]
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	60fb      	str	r3, [r7, #12]
 80013e8:	68fb      	ldr	r3, [r7, #12]
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	687a      	ldr	r2, [r7, #4]
 80013ee:	429a      	cmp	r2, r3
 80013f0:	d8f7      	bhi.n	80013e2 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80013f2:	68fb      	ldr	r3, [r7, #12]
 80013f4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80013f6:	68fb      	ldr	r3, [r7, #12]
 80013f8:	685b      	ldr	r3, [r3, #4]
 80013fa:	68ba      	ldr	r2, [r7, #8]
 80013fc:	4413      	add	r3, r2
 80013fe:	687a      	ldr	r2, [r7, #4]
 8001400:	429a      	cmp	r2, r3
 8001402:	d108      	bne.n	8001416 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8001404:	68fb      	ldr	r3, [r7, #12]
 8001406:	685a      	ldr	r2, [r3, #4]
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	685b      	ldr	r3, [r3, #4]
 800140c:	441a      	add	r2, r3
 800140e:	68fb      	ldr	r3, [r7, #12]
 8001410:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8001412:	68fb      	ldr	r3, [r7, #12]
 8001414:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	685b      	ldr	r3, [r3, #4]
 800141e:	68ba      	ldr	r2, [r7, #8]
 8001420:	441a      	add	r2, r3
 8001422:	68fb      	ldr	r3, [r7, #12]
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	429a      	cmp	r2, r3
 8001428:	d118      	bne.n	800145c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800142a:	68fb      	ldr	r3, [r7, #12]
 800142c:	681a      	ldr	r2, [r3, #0]
 800142e:	4b15      	ldr	r3, [pc, #84]	@ (8001484 <prvInsertBlockIntoFreeList+0xb0>)
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	429a      	cmp	r2, r3
 8001434:	d00d      	beq.n	8001452 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	685a      	ldr	r2, [r3, #4]
 800143a:	68fb      	ldr	r3, [r7, #12]
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	685b      	ldr	r3, [r3, #4]
 8001440:	441a      	add	r2, r3
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8001446:	68fb      	ldr	r3, [r7, #12]
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	681a      	ldr	r2, [r3, #0]
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	601a      	str	r2, [r3, #0]
 8001450:	e008      	b.n	8001464 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8001452:	4b0c      	ldr	r3, [pc, #48]	@ (8001484 <prvInsertBlockIntoFreeList+0xb0>)
 8001454:	681a      	ldr	r2, [r3, #0]
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	601a      	str	r2, [r3, #0]
 800145a:	e003      	b.n	8001464 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800145c:	68fb      	ldr	r3, [r7, #12]
 800145e:	681a      	ldr	r2, [r3, #0]
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8001464:	68fa      	ldr	r2, [r7, #12]
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	429a      	cmp	r2, r3
 800146a:	d002      	beq.n	8001472 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800146c:	68fb      	ldr	r3, [r7, #12]
 800146e:	687a      	ldr	r2, [r7, #4]
 8001470:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8001472:	bf00      	nop
 8001474:	3714      	adds	r7, #20
 8001476:	46bd      	mov	sp, r7
 8001478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800147c:	4770      	bx	lr
 800147e:	bf00      	nop
 8001480:	20000f88 	.word	0x20000f88
 8001484:	20000f90 	.word	0x20000f90

08001488 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8001488:	b580      	push	{r7, lr}
 800148a:	b082      	sub	sp, #8
 800148c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800148e:	4b1e      	ldr	r3, [pc, #120]	@ (8001508 <MX_DMA_Init+0x80>)
 8001490:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001492:	4a1d      	ldr	r2, [pc, #116]	@ (8001508 <MX_DMA_Init+0x80>)
 8001494:	f043 0301 	orr.w	r3, r3, #1
 8001498:	6493      	str	r3, [r2, #72]	@ 0x48
 800149a:	4b1b      	ldr	r3, [pc, #108]	@ (8001508 <MX_DMA_Init+0x80>)
 800149c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800149e:	f003 0301 	and.w	r3, r3, #1
 80014a2:	607b      	str	r3, [r7, #4]
 80014a4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 80014a6:	4b18      	ldr	r3, [pc, #96]	@ (8001508 <MX_DMA_Init+0x80>)
 80014a8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80014aa:	4a17      	ldr	r2, [pc, #92]	@ (8001508 <MX_DMA_Init+0x80>)
 80014ac:	f043 0302 	orr.w	r3, r3, #2
 80014b0:	6493      	str	r3, [r2, #72]	@ 0x48
 80014b2:	4b15      	ldr	r3, [pc, #84]	@ (8001508 <MX_DMA_Init+0x80>)
 80014b4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80014b6:	f003 0302 	and.w	r3, r3, #2
 80014ba:	603b      	str	r3, [r7, #0]
 80014bc:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 5, 0);
 80014be:	2200      	movs	r2, #0
 80014c0:	2105      	movs	r1, #5
 80014c2:	2010      	movs	r0, #16
 80014c4:	f001 fed8 	bl	8003278 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 80014c8:	2010      	movs	r0, #16
 80014ca:	f001 fef1 	bl	80032b0 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel7_IRQn, 5, 0);
 80014ce:	2200      	movs	r2, #0
 80014d0:	2105      	movs	r1, #5
 80014d2:	2011      	movs	r0, #17
 80014d4:	f001 fed0 	bl	8003278 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel7_IRQn);
 80014d8:	2011      	movs	r0, #17
 80014da:	f001 fee9 	bl	80032b0 <HAL_NVIC_EnableIRQ>
  /* DMA2_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Channel6_IRQn, 5, 0);
 80014de:	2200      	movs	r2, #0
 80014e0:	2105      	movs	r1, #5
 80014e2:	2044      	movs	r0, #68	@ 0x44
 80014e4:	f001 fec8 	bl	8003278 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel6_IRQn);
 80014e8:	2044      	movs	r0, #68	@ 0x44
 80014ea:	f001 fee1 	bl	80032b0 <HAL_NVIC_EnableIRQ>
  /* DMA2_Channel7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Channel7_IRQn, 5, 0);
 80014ee:	2200      	movs	r2, #0
 80014f0:	2105      	movs	r1, #5
 80014f2:	2045      	movs	r0, #69	@ 0x45
 80014f4:	f001 fec0 	bl	8003278 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel7_IRQn);
 80014f8:	2045      	movs	r0, #69	@ 0x45
 80014fa:	f001 fed9 	bl	80032b0 <HAL_NVIC_EnableIRQ>

}
 80014fe:	bf00      	nop
 8001500:	3708      	adds	r7, #8
 8001502:	46bd      	mov	sp, r7
 8001504:	bd80      	pop	{r7, pc}
 8001506:	bf00      	nop
 8001508:	40021000 	.word	0x40021000

0800150c <cubemx_transport_open>:
#define UART_DMA_BUFFER_SIZE 2048

static uint8_t dma_buffer[UART_DMA_BUFFER_SIZE];
static size_t dma_head = 0, dma_tail = 0;

bool cubemx_transport_open(struct uxrCustomTransport * transport){
 800150c:	b580      	push	{r7, lr}
 800150e:	b084      	sub	sp, #16
 8001510:	af00      	add	r7, sp, #0
 8001512:	6078      	str	r0, [r7, #4]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	f8d3 328c 	ldr.w	r3, [r3, #652]	@ 0x28c
 800151a:	60fb      	str	r3, [r7, #12]
    HAL_UART_Receive_DMA(uart, dma_buffer, UART_DMA_BUFFER_SIZE);
 800151c:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8001520:	4904      	ldr	r1, [pc, #16]	@ (8001534 <cubemx_transport_open+0x28>)
 8001522:	68f8      	ldr	r0, [r7, #12]
 8001524:	f007 f8fa 	bl	800871c <HAL_UART_Receive_DMA>
    return true;
 8001528:	2301      	movs	r3, #1
}
 800152a:	4618      	mov	r0, r3
 800152c:	3710      	adds	r7, #16
 800152e:	46bd      	mov	sp, r7
 8001530:	bd80      	pop	{r7, pc}
 8001532:	bf00      	nop
 8001534:	20000fa0 	.word	0x20000fa0

08001538 <cubemx_transport_close>:

bool cubemx_transport_close(struct uxrCustomTransport * transport){
 8001538:	b580      	push	{r7, lr}
 800153a:	b084      	sub	sp, #16
 800153c:	af00      	add	r7, sp, #0
 800153e:	6078      	str	r0, [r7, #4]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	f8d3 328c 	ldr.w	r3, [r3, #652]	@ 0x28c
 8001546:	60fb      	str	r3, [r7, #12]
    HAL_UART_DMAStop(uart);
 8001548:	68f8      	ldr	r0, [r7, #12]
 800154a:	f007 f933 	bl	80087b4 <HAL_UART_DMAStop>
    return true;
 800154e:	2301      	movs	r3, #1
}
 8001550:	4618      	mov	r0, r3
 8001552:	3710      	adds	r7, #16
 8001554:	46bd      	mov	sp, r7
 8001556:	bd80      	pop	{r7, pc}

08001558 <cubemx_transport_write>:

size_t cubemx_transport_write(struct uxrCustomTransport* transport, uint8_t * buf, size_t len, uint8_t * err){
 8001558:	b580      	push	{r7, lr}
 800155a:	b086      	sub	sp, #24
 800155c:	af00      	add	r7, sp, #0
 800155e:	60f8      	str	r0, [r7, #12]
 8001560:	60b9      	str	r1, [r7, #8]
 8001562:	607a      	str	r2, [r7, #4]
 8001564:	603b      	str	r3, [r7, #0]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 8001566:	68fb      	ldr	r3, [r7, #12]
 8001568:	f8d3 328c 	ldr.w	r3, [r3, #652]	@ 0x28c
 800156c:	617b      	str	r3, [r7, #20]

    HAL_StatusTypeDef ret;
    if (uart->gState == HAL_UART_STATE_READY){
 800156e:	697b      	ldr	r3, [r7, #20]
 8001570:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8001572:	2b20      	cmp	r3, #32
 8001574:	d11a      	bne.n	80015ac <cubemx_transport_write+0x54>
        ret = HAL_UART_Transmit_DMA(uart, buf, len);
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	b29b      	uxth	r3, r3
 800157a:	461a      	mov	r2, r3
 800157c:	68b9      	ldr	r1, [r7, #8]
 800157e:	6978      	ldr	r0, [r7, #20]
 8001580:	f007 f850 	bl	8008624 <HAL_UART_Transmit_DMA>
 8001584:	4603      	mov	r3, r0
 8001586:	74fb      	strb	r3, [r7, #19]
        while (ret == HAL_OK && uart->gState != HAL_UART_STATE_READY){
 8001588:	e002      	b.n	8001590 <cubemx_transport_write+0x38>
            osDelay(1);
 800158a:	2001      	movs	r0, #1
 800158c:	f009 f9e2 	bl	800a954 <osDelay>
        while (ret == HAL_OK && uart->gState != HAL_UART_STATE_READY){
 8001590:	7cfb      	ldrb	r3, [r7, #19]
 8001592:	2b00      	cmp	r3, #0
 8001594:	d103      	bne.n	800159e <cubemx_transport_write+0x46>
 8001596:	697b      	ldr	r3, [r7, #20]
 8001598:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800159a:	2b20      	cmp	r3, #32
 800159c:	d1f5      	bne.n	800158a <cubemx_transport_write+0x32>
        }

        return (ret == HAL_OK) ? len : 0;
 800159e:	7cfb      	ldrb	r3, [r7, #19]
 80015a0:	2b00      	cmp	r3, #0
 80015a2:	d101      	bne.n	80015a8 <cubemx_transport_write+0x50>
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	e002      	b.n	80015ae <cubemx_transport_write+0x56>
 80015a8:	2300      	movs	r3, #0
 80015aa:	e000      	b.n	80015ae <cubemx_transport_write+0x56>
    }else{
        return 0;
 80015ac:	2300      	movs	r3, #0
    }
}
 80015ae:	4618      	mov	r0, r3
 80015b0:	3718      	adds	r7, #24
 80015b2:	46bd      	mov	sp, r7
 80015b4:	bd80      	pop	{r7, pc}
	...

080015b8 <cubemx_transport_read>:

size_t cubemx_transport_read(struct uxrCustomTransport* transport, uint8_t* buf, size_t len, int timeout, uint8_t* err){
 80015b8:	b580      	push	{r7, lr}
 80015ba:	b088      	sub	sp, #32
 80015bc:	af00      	add	r7, sp, #0
 80015be:	60f8      	str	r0, [r7, #12]
 80015c0:	60b9      	str	r1, [r7, #8]
 80015c2:	607a      	str	r2, [r7, #4]
 80015c4:	603b      	str	r3, [r7, #0]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 80015c6:	68fb      	ldr	r3, [r7, #12]
 80015c8:	f8d3 328c 	ldr.w	r3, [r3, #652]	@ 0x28c
 80015cc:	617b      	str	r3, [r7, #20]

    int ms_used = 0;
 80015ce:	2300      	movs	r3, #0
 80015d0:	61fb      	str	r3, [r7, #28]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80015d2:	b672      	cpsid	i
}
 80015d4:	bf00      	nop
    do
    {
        __disable_irq();
        dma_tail = UART_DMA_BUFFER_SIZE - __HAL_DMA_GET_COUNTER(uart->hdmarx);
 80015d6:	697b      	ldr	r3, [r7, #20]
 80015d8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	685b      	ldr	r3, [r3, #4]
 80015de:	f5c3 6300 	rsb	r3, r3, #2048	@ 0x800
 80015e2:	4a1c      	ldr	r2, [pc, #112]	@ (8001654 <cubemx_transport_read+0x9c>)
 80015e4:	6013      	str	r3, [r2, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80015e6:	b662      	cpsie	i
}
 80015e8:	bf00      	nop
        __enable_irq();
        ms_used++;
 80015ea:	69fb      	ldr	r3, [r7, #28]
 80015ec:	3301      	adds	r3, #1
 80015ee:	61fb      	str	r3, [r7, #28]
        osDelay(portTICK_RATE_MS);
 80015f0:	2001      	movs	r0, #1
 80015f2:	f009 f9af 	bl	800a954 <osDelay>
    } while (dma_head == dma_tail && ms_used < timeout);
 80015f6:	4b18      	ldr	r3, [pc, #96]	@ (8001658 <cubemx_transport_read+0xa0>)
 80015f8:	681a      	ldr	r2, [r3, #0]
 80015fa:	4b16      	ldr	r3, [pc, #88]	@ (8001654 <cubemx_transport_read+0x9c>)
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	429a      	cmp	r2, r3
 8001600:	d103      	bne.n	800160a <cubemx_transport_read+0x52>
 8001602:	69fa      	ldr	r2, [r7, #28]
 8001604:	683b      	ldr	r3, [r7, #0]
 8001606:	429a      	cmp	r2, r3
 8001608:	dbe3      	blt.n	80015d2 <cubemx_transport_read+0x1a>
    
    size_t wrote = 0;
 800160a:	2300      	movs	r3, #0
 800160c:	61bb      	str	r3, [r7, #24]
    while ((dma_head != dma_tail) && (wrote < len)){
 800160e:	e011      	b.n	8001634 <cubemx_transport_read+0x7c>
        buf[wrote] = dma_buffer[dma_head];
 8001610:	4b11      	ldr	r3, [pc, #68]	@ (8001658 <cubemx_transport_read+0xa0>)
 8001612:	681a      	ldr	r2, [r3, #0]
 8001614:	68b9      	ldr	r1, [r7, #8]
 8001616:	69bb      	ldr	r3, [r7, #24]
 8001618:	440b      	add	r3, r1
 800161a:	4910      	ldr	r1, [pc, #64]	@ (800165c <cubemx_transport_read+0xa4>)
 800161c:	5c8a      	ldrb	r2, [r1, r2]
 800161e:	701a      	strb	r2, [r3, #0]
        dma_head = (dma_head + 1) % UART_DMA_BUFFER_SIZE;
 8001620:	4b0d      	ldr	r3, [pc, #52]	@ (8001658 <cubemx_transport_read+0xa0>)
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	3301      	adds	r3, #1
 8001626:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800162a:	4a0b      	ldr	r2, [pc, #44]	@ (8001658 <cubemx_transport_read+0xa0>)
 800162c:	6013      	str	r3, [r2, #0]
        wrote++;
 800162e:	69bb      	ldr	r3, [r7, #24]
 8001630:	3301      	adds	r3, #1
 8001632:	61bb      	str	r3, [r7, #24]
    while ((dma_head != dma_tail) && (wrote < len)){
 8001634:	4b08      	ldr	r3, [pc, #32]	@ (8001658 <cubemx_transport_read+0xa0>)
 8001636:	681a      	ldr	r2, [r3, #0]
 8001638:	4b06      	ldr	r3, [pc, #24]	@ (8001654 <cubemx_transport_read+0x9c>)
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	429a      	cmp	r2, r3
 800163e:	d003      	beq.n	8001648 <cubemx_transport_read+0x90>
 8001640:	69ba      	ldr	r2, [r7, #24]
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	429a      	cmp	r2, r3
 8001646:	d3e3      	bcc.n	8001610 <cubemx_transport_read+0x58>
    }
    
    return wrote;
 8001648:	69bb      	ldr	r3, [r7, #24]
}
 800164a:	4618      	mov	r0, r3
 800164c:	3720      	adds	r7, #32
 800164e:	46bd      	mov	sp, r7
 8001650:	bd80      	pop	{r7, pc}
 8001652:	bf00      	nop
 8001654:	200017a4 	.word	0x200017a4
 8001658:	200017a0 	.word	0x200017a0
 800165c:	20000fa0 	.word	0x20000fa0

08001660 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8001660:	b580      	push	{r7, lr}
 8001662:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8001664:	4a04      	ldr	r2, [pc, #16]	@ (8001678 <MX_FREERTOS_Init+0x18>)
 8001666:	2100      	movs	r1, #0
 8001668:	4804      	ldr	r0, [pc, #16]	@ (800167c <MX_FREERTOS_Init+0x1c>)
 800166a:	f009 f8e1 	bl	800a830 <osThreadNew>
 800166e:	4603      	mov	r3, r0
 8001670:	4a03      	ldr	r2, [pc, #12]	@ (8001680 <MX_FREERTOS_Init+0x20>)
 8001672:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 8001674:	bf00      	nop
 8001676:	bd80      	pop	{r7, pc}
 8001678:	0801bbb0 	.word	0x0801bbb0
 800167c:	08001cf1 	.word	0x08001cf1
 8001680:	200017a8 	.word	0x200017a8

08001684 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001684:	b480      	push	{r7}
 8001686:	b085      	sub	sp, #20
 8001688:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800168a:	4b15      	ldr	r3, [pc, #84]	@ (80016e0 <MX_GPIO_Init+0x5c>)
 800168c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800168e:	4a14      	ldr	r2, [pc, #80]	@ (80016e0 <MX_GPIO_Init+0x5c>)
 8001690:	f043 0304 	orr.w	r3, r3, #4
 8001694:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001696:	4b12      	ldr	r3, [pc, #72]	@ (80016e0 <MX_GPIO_Init+0x5c>)
 8001698:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800169a:	f003 0304 	and.w	r3, r3, #4
 800169e:	60fb      	str	r3, [r7, #12]
 80016a0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80016a2:	4b0f      	ldr	r3, [pc, #60]	@ (80016e0 <MX_GPIO_Init+0x5c>)
 80016a4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80016a6:	4a0e      	ldr	r2, [pc, #56]	@ (80016e0 <MX_GPIO_Init+0x5c>)
 80016a8:	f043 0301 	orr.w	r3, r3, #1
 80016ac:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80016ae:	4b0c      	ldr	r3, [pc, #48]	@ (80016e0 <MX_GPIO_Init+0x5c>)
 80016b0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80016b2:	f003 0301 	and.w	r3, r3, #1
 80016b6:	60bb      	str	r3, [r7, #8]
 80016b8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80016ba:	4b09      	ldr	r3, [pc, #36]	@ (80016e0 <MX_GPIO_Init+0x5c>)
 80016bc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80016be:	4a08      	ldr	r2, [pc, #32]	@ (80016e0 <MX_GPIO_Init+0x5c>)
 80016c0:	f043 0302 	orr.w	r3, r3, #2
 80016c4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80016c6:	4b06      	ldr	r3, [pc, #24]	@ (80016e0 <MX_GPIO_Init+0x5c>)
 80016c8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80016ca:	f003 0302 	and.w	r3, r3, #2
 80016ce:	607b      	str	r3, [r7, #4]
 80016d0:	687b      	ldr	r3, [r7, #4]

}
 80016d2:	bf00      	nop
 80016d4:	3714      	adds	r7, #20
 80016d6:	46bd      	mov	sp, r7
 80016d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016dc:	4770      	bx	lr
 80016de:	bf00      	nop
 80016e0:	40021000 	.word	0x40021000

080016e4 <MX_I2C1_Init>:
DMA_HandleTypeDef hdma_i2c1_rx;
DMA_HandleTypeDef hdma_i2c1_tx;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80016e4:	b580      	push	{r7, lr}
 80016e6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80016e8:	4b1b      	ldr	r3, [pc, #108]	@ (8001758 <MX_I2C1_Init+0x74>)
 80016ea:	4a1c      	ldr	r2, [pc, #112]	@ (800175c <MX_I2C1_Init+0x78>)
 80016ec:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00702991;
 80016ee:	4b1a      	ldr	r3, [pc, #104]	@ (8001758 <MX_I2C1_Init+0x74>)
 80016f0:	4a1b      	ldr	r2, [pc, #108]	@ (8001760 <MX_I2C1_Init+0x7c>)
 80016f2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80016f4:	4b18      	ldr	r3, [pc, #96]	@ (8001758 <MX_I2C1_Init+0x74>)
 80016f6:	2200      	movs	r2, #0
 80016f8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80016fa:	4b17      	ldr	r3, [pc, #92]	@ (8001758 <MX_I2C1_Init+0x74>)
 80016fc:	2201      	movs	r2, #1
 80016fe:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001700:	4b15      	ldr	r3, [pc, #84]	@ (8001758 <MX_I2C1_Init+0x74>)
 8001702:	2200      	movs	r2, #0
 8001704:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8001706:	4b14      	ldr	r3, [pc, #80]	@ (8001758 <MX_I2C1_Init+0x74>)
 8001708:	2200      	movs	r2, #0
 800170a:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800170c:	4b12      	ldr	r3, [pc, #72]	@ (8001758 <MX_I2C1_Init+0x74>)
 800170e:	2200      	movs	r2, #0
 8001710:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001712:	4b11      	ldr	r3, [pc, #68]	@ (8001758 <MX_I2C1_Init+0x74>)
 8001714:	2200      	movs	r2, #0
 8001716:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001718:	4b0f      	ldr	r3, [pc, #60]	@ (8001758 <MX_I2C1_Init+0x74>)
 800171a:	2200      	movs	r2, #0
 800171c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800171e:	480e      	ldr	r0, [pc, #56]	@ (8001758 <MX_I2C1_Init+0x74>)
 8001720:	f002 f9ce 	bl	8003ac0 <HAL_I2C_Init>
 8001724:	4603      	mov	r3, r0
 8001726:	2b00      	cmp	r3, #0
 8001728:	d001      	beq.n	800172e <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800172a:	f000 fdfd 	bl	8002328 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800172e:	2100      	movs	r1, #0
 8001730:	4809      	ldr	r0, [pc, #36]	@ (8001758 <MX_I2C1_Init+0x74>)
 8001732:	f004 fa49 	bl	8005bc8 <HAL_I2CEx_ConfigAnalogFilter>
 8001736:	4603      	mov	r3, r0
 8001738:	2b00      	cmp	r3, #0
 800173a:	d001      	beq.n	8001740 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 800173c:	f000 fdf4 	bl	8002328 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001740:	2100      	movs	r1, #0
 8001742:	4805      	ldr	r0, [pc, #20]	@ (8001758 <MX_I2C1_Init+0x74>)
 8001744:	f004 fa8b 	bl	8005c5e <HAL_I2CEx_ConfigDigitalFilter>
 8001748:	4603      	mov	r3, r0
 800174a:	2b00      	cmp	r3, #0
 800174c:	d001      	beq.n	8001752 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800174e:	f000 fdeb 	bl	8002328 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001752:	bf00      	nop
 8001754:	bd80      	pop	{r7, pc}
 8001756:	bf00      	nop
 8001758:	20005854 	.word	0x20005854
 800175c:	40005400 	.word	0x40005400
 8001760:	00702991 	.word	0x00702991

08001764 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001764:	b580      	push	{r7, lr}
 8001766:	b09e      	sub	sp, #120	@ 0x78
 8001768:	af00      	add	r7, sp, #0
 800176a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800176c:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8001770:	2200      	movs	r2, #0
 8001772:	601a      	str	r2, [r3, #0]
 8001774:	605a      	str	r2, [r3, #4]
 8001776:	609a      	str	r2, [r3, #8]
 8001778:	60da      	str	r2, [r3, #12]
 800177a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800177c:	f107 0310 	add.w	r3, r7, #16
 8001780:	2254      	movs	r2, #84	@ 0x54
 8001782:	2100      	movs	r1, #0
 8001784:	4618      	mov	r0, r3
 8001786:	f018 fa05 	bl	8019b94 <memset>
  if(i2cHandle->Instance==I2C1)
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	4a4c      	ldr	r2, [pc, #304]	@ (80018c0 <HAL_I2C_MspInit+0x15c>)
 8001790:	4293      	cmp	r3, r2
 8001792:	f040 8090 	bne.w	80018b6 <HAL_I2C_MspInit+0x152>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8001796:	2340      	movs	r3, #64	@ 0x40
 8001798:	613b      	str	r3, [r7, #16]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 800179a:	2300      	movs	r3, #0
 800179c:	63fb      	str	r3, [r7, #60]	@ 0x3c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800179e:	f107 0310 	add.w	r3, r7, #16
 80017a2:	4618      	mov	r0, r3
 80017a4:	f005 f986 	bl	8006ab4 <HAL_RCCEx_PeriphCLKConfig>
 80017a8:	4603      	mov	r3, r0
 80017aa:	2b00      	cmp	r3, #0
 80017ac:	d001      	beq.n	80017b2 <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 80017ae:	f000 fdbb 	bl	8002328 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80017b2:	4b44      	ldr	r3, [pc, #272]	@ (80018c4 <HAL_I2C_MspInit+0x160>)
 80017b4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80017b6:	4a43      	ldr	r2, [pc, #268]	@ (80018c4 <HAL_I2C_MspInit+0x160>)
 80017b8:	f043 0302 	orr.w	r3, r3, #2
 80017bc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80017be:	4b41      	ldr	r3, [pc, #260]	@ (80018c4 <HAL_I2C_MspInit+0x160>)
 80017c0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80017c2:	f003 0302 	and.w	r3, r3, #2
 80017c6:	60fb      	str	r3, [r7, #12]
 80017c8:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80017ca:	23c0      	movs	r3, #192	@ 0xc0
 80017cc:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80017ce:	2312      	movs	r3, #18
 80017d0:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80017d2:	2301      	movs	r3, #1
 80017d4:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80017d6:	2303      	movs	r3, #3
 80017d8:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80017da:	2304      	movs	r3, #4
 80017dc:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80017de:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 80017e2:	4619      	mov	r1, r3
 80017e4:	4838      	ldr	r0, [pc, #224]	@ (80018c8 <HAL_I2C_MspInit+0x164>)
 80017e6:	f002 f801 	bl	80037ec <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80017ea:	4b36      	ldr	r3, [pc, #216]	@ (80018c4 <HAL_I2C_MspInit+0x160>)
 80017ec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80017ee:	4a35      	ldr	r2, [pc, #212]	@ (80018c4 <HAL_I2C_MspInit+0x160>)
 80017f0:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80017f4:	6593      	str	r3, [r2, #88]	@ 0x58
 80017f6:	4b33      	ldr	r3, [pc, #204]	@ (80018c4 <HAL_I2C_MspInit+0x160>)
 80017f8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80017fa:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80017fe:	60bb      	str	r3, [r7, #8]
 8001800:	68bb      	ldr	r3, [r7, #8]

    /* I2C1 DMA Init */
    /* I2C1_RX Init */
    hdma_i2c1_rx.Instance = DMA2_Channel6;
 8001802:	4b32      	ldr	r3, [pc, #200]	@ (80018cc <HAL_I2C_MspInit+0x168>)
 8001804:	4a32      	ldr	r2, [pc, #200]	@ (80018d0 <HAL_I2C_MspInit+0x16c>)
 8001806:	601a      	str	r2, [r3, #0]
    hdma_i2c1_rx.Init.Request = DMA_REQUEST_5;
 8001808:	4b30      	ldr	r3, [pc, #192]	@ (80018cc <HAL_I2C_MspInit+0x168>)
 800180a:	2205      	movs	r2, #5
 800180c:	605a      	str	r2, [r3, #4]
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800180e:	4b2f      	ldr	r3, [pc, #188]	@ (80018cc <HAL_I2C_MspInit+0x168>)
 8001810:	2200      	movs	r2, #0
 8001812:	609a      	str	r2, [r3, #8]
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001814:	4b2d      	ldr	r3, [pc, #180]	@ (80018cc <HAL_I2C_MspInit+0x168>)
 8001816:	2200      	movs	r2, #0
 8001818:	60da      	str	r2, [r3, #12]
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 800181a:	4b2c      	ldr	r3, [pc, #176]	@ (80018cc <HAL_I2C_MspInit+0x168>)
 800181c:	2280      	movs	r2, #128	@ 0x80
 800181e:	611a      	str	r2, [r3, #16]
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001820:	4b2a      	ldr	r3, [pc, #168]	@ (80018cc <HAL_I2C_MspInit+0x168>)
 8001822:	2200      	movs	r2, #0
 8001824:	615a      	str	r2, [r3, #20]
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001826:	4b29      	ldr	r3, [pc, #164]	@ (80018cc <HAL_I2C_MspInit+0x168>)
 8001828:	2200      	movs	r2, #0
 800182a:	619a      	str	r2, [r3, #24]
    hdma_i2c1_rx.Init.Mode = DMA_NORMAL;
 800182c:	4b27      	ldr	r3, [pc, #156]	@ (80018cc <HAL_I2C_MspInit+0x168>)
 800182e:	2200      	movs	r2, #0
 8001830:	61da      	str	r2, [r3, #28]
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001832:	4b26      	ldr	r3, [pc, #152]	@ (80018cc <HAL_I2C_MspInit+0x168>)
 8001834:	2200      	movs	r2, #0
 8001836:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 8001838:	4824      	ldr	r0, [pc, #144]	@ (80018cc <HAL_I2C_MspInit+0x168>)
 800183a:	f001 fd47 	bl	80032cc <HAL_DMA_Init>
 800183e:	4603      	mov	r3, r0
 8001840:	2b00      	cmp	r3, #0
 8001842:	d001      	beq.n	8001848 <HAL_I2C_MspInit+0xe4>
    {
      Error_Handler();
 8001844:	f000 fd70 	bl	8002328 <Error_Handler>
    }

    __HAL_LINKDMA(i2cHandle,hdmarx,hdma_i2c1_rx);
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	4a20      	ldr	r2, [pc, #128]	@ (80018cc <HAL_I2C_MspInit+0x168>)
 800184c:	63da      	str	r2, [r3, #60]	@ 0x3c
 800184e:	4a1f      	ldr	r2, [pc, #124]	@ (80018cc <HAL_I2C_MspInit+0x168>)
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	6293      	str	r3, [r2, #40]	@ 0x28

    /* I2C1_TX Init */
    hdma_i2c1_tx.Instance = DMA2_Channel7;
 8001854:	4b1f      	ldr	r3, [pc, #124]	@ (80018d4 <HAL_I2C_MspInit+0x170>)
 8001856:	4a20      	ldr	r2, [pc, #128]	@ (80018d8 <HAL_I2C_MspInit+0x174>)
 8001858:	601a      	str	r2, [r3, #0]
    hdma_i2c1_tx.Init.Request = DMA_REQUEST_5;
 800185a:	4b1e      	ldr	r3, [pc, #120]	@ (80018d4 <HAL_I2C_MspInit+0x170>)
 800185c:	2205      	movs	r2, #5
 800185e:	605a      	str	r2, [r3, #4]
    hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001860:	4b1c      	ldr	r3, [pc, #112]	@ (80018d4 <HAL_I2C_MspInit+0x170>)
 8001862:	2210      	movs	r2, #16
 8001864:	609a      	str	r2, [r3, #8]
    hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001866:	4b1b      	ldr	r3, [pc, #108]	@ (80018d4 <HAL_I2C_MspInit+0x170>)
 8001868:	2200      	movs	r2, #0
 800186a:	60da      	str	r2, [r3, #12]
    hdma_i2c1_tx.Init.MemInc = DMA_MINC_ENABLE;
 800186c:	4b19      	ldr	r3, [pc, #100]	@ (80018d4 <HAL_I2C_MspInit+0x170>)
 800186e:	2280      	movs	r2, #128	@ 0x80
 8001870:	611a      	str	r2, [r3, #16]
    hdma_i2c1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001872:	4b18      	ldr	r3, [pc, #96]	@ (80018d4 <HAL_I2C_MspInit+0x170>)
 8001874:	2200      	movs	r2, #0
 8001876:	615a      	str	r2, [r3, #20]
    hdma_i2c1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001878:	4b16      	ldr	r3, [pc, #88]	@ (80018d4 <HAL_I2C_MspInit+0x170>)
 800187a:	2200      	movs	r2, #0
 800187c:	619a      	str	r2, [r3, #24]
    hdma_i2c1_tx.Init.Mode = DMA_NORMAL;
 800187e:	4b15      	ldr	r3, [pc, #84]	@ (80018d4 <HAL_I2C_MspInit+0x170>)
 8001880:	2200      	movs	r2, #0
 8001882:	61da      	str	r2, [r3, #28]
    hdma_i2c1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001884:	4b13      	ldr	r3, [pc, #76]	@ (80018d4 <HAL_I2C_MspInit+0x170>)
 8001886:	2200      	movs	r2, #0
 8001888:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK)
 800188a:	4812      	ldr	r0, [pc, #72]	@ (80018d4 <HAL_I2C_MspInit+0x170>)
 800188c:	f001 fd1e 	bl	80032cc <HAL_DMA_Init>
 8001890:	4603      	mov	r3, r0
 8001892:	2b00      	cmp	r3, #0
 8001894:	d001      	beq.n	800189a <HAL_I2C_MspInit+0x136>
    {
      Error_Handler();
 8001896:	f000 fd47 	bl	8002328 <Error_Handler>
    }

    __HAL_LINKDMA(i2cHandle,hdmatx,hdma_i2c1_tx);
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	4a0d      	ldr	r2, [pc, #52]	@ (80018d4 <HAL_I2C_MspInit+0x170>)
 800189e:	639a      	str	r2, [r3, #56]	@ 0x38
 80018a0:	4a0c      	ldr	r2, [pc, #48]	@ (80018d4 <HAL_I2C_MspInit+0x170>)
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	6293      	str	r3, [r2, #40]	@ 0x28

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 5, 0);
 80018a6:	2200      	movs	r2, #0
 80018a8:	2105      	movs	r1, #5
 80018aa:	201f      	movs	r0, #31
 80018ac:	f001 fce4 	bl	8003278 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 80018b0:	201f      	movs	r0, #31
 80018b2:	f001 fcfd 	bl	80032b0 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 80018b6:	bf00      	nop
 80018b8:	3778      	adds	r7, #120	@ 0x78
 80018ba:	46bd      	mov	sp, r7
 80018bc:	bd80      	pop	{r7, pc}
 80018be:	bf00      	nop
 80018c0:	40005400 	.word	0x40005400
 80018c4:	40021000 	.word	0x40021000
 80018c8:	48000400 	.word	0x48000400
 80018cc:	200058a8 	.word	0x200058a8
 80018d0:	4002046c 	.word	0x4002046c
 80018d4:	200058f0 	.word	0x200058f0
 80018d8:	40020480 	.word	0x40020480
 80018dc:	00000000 	.word	0x00000000

080018e0 <enc_timer_callback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void enc_timer_callback(rcl_timer_t * timer, int64_t last_call_time)
{
 80018e0:	b5b0      	push	{r4, r5, r7, lr}
 80018e2:	b088      	sub	sp, #32
 80018e4:	af00      	add	r7, sp, #0
 80018e6:	60f8      	str	r0, [r7, #12]
 80018e8:	e9c7 2300 	strd	r2, r3, [r7]
	static bool isfirst_callback = true;
	RCLC_UNUSED(last_call_time);
	if (timer != NULL)
 80018ec:	68fb      	ldr	r3, [r7, #12]
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	f000 8122 	beq.w	8001b38 <enc_timer_callback+0x258>
	{

#ifdef SENSOR_ON
		switch (state)
 80018f4:	4b94      	ldr	r3, [pc, #592]	@ (8001b48 <enc_timer_callback+0x268>)
 80018f6:	781b      	ldrb	r3, [r3, #0]
 80018f8:	2b03      	cmp	r3, #3
 80018fa:	f200 8099 	bhi.w	8001a30 <enc_timer_callback+0x150>
 80018fe:	a201      	add	r2, pc, #4	@ (adr r2, 8001904 <enc_timer_callback+0x24>)
 8001900:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001904:	08001915 	.word	0x08001915
 8001908:	080019af 	.word	0x080019af
 800190c:	080019e5 	.word	0x080019e5
 8001910:	08001961 	.word	0x08001961
		{
		case forward:
			if (bldc_cmd > 0) RC_Write(&bldc, vel2rc(bldc_cmd));
 8001914:	4b8d      	ldr	r3, [pc, #564]	@ (8001b4c <enc_timer_callback+0x26c>)
 8001916:	edd3 7a00 	vldr	s15, [r3]
 800191a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800191e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001922:	dd0e      	ble.n	8001942 <enc_timer_callback+0x62>
 8001924:	4b89      	ldr	r3, [pc, #548]	@ (8001b4c <enc_timer_callback+0x26c>)
 8001926:	edd3 7a00 	vldr	s15, [r3]
 800192a:	eeb0 0a67 	vmov.f32	s0, s15
 800192e:	f000 fbcb 	bl	80020c8 <vel2rc>
 8001932:	eef0 7a40 	vmov.f32	s15, s0
 8001936:	eeb0 0a67 	vmov.f32	s0, s15
 800193a:	4885      	ldr	r0, [pc, #532]	@ (8001b50 <enc_timer_callback+0x270>)
 800193c:	f008 fe70 	bl	800a620 <RC_Write>
			else {
				RC_Write(&bldc, vel2rc(0));
				state = brake;
			}
			break;
 8001940:	e076      	b.n	8001a30 <enc_timer_callback+0x150>
				RC_Write(&bldc, vel2rc(0));
 8001942:	ed9f 0a84 	vldr	s0, [pc, #528]	@ 8001b54 <enc_timer_callback+0x274>
 8001946:	f000 fbbf 	bl	80020c8 <vel2rc>
 800194a:	eef0 7a40 	vmov.f32	s15, s0
 800194e:	eeb0 0a67 	vmov.f32	s0, s15
 8001952:	487f      	ldr	r0, [pc, #508]	@ (8001b50 <enc_timer_callback+0x270>)
 8001954:	f008 fe64 	bl	800a620 <RC_Write>
				state = brake;
 8001958:	4b7b      	ldr	r3, [pc, #492]	@ (8001b48 <enc_timer_callback+0x268>)
 800195a:	2203      	movs	r2, #3
 800195c:	701a      	strb	r2, [r3, #0]
			break;
 800195e:	e067      	b.n	8001a30 <enc_timer_callback+0x150>
		case brake:
			RC_Write(&bldc, vel2rc(bldc_cmd));
 8001960:	4b7a      	ldr	r3, [pc, #488]	@ (8001b4c <enc_timer_callback+0x26c>)
 8001962:	edd3 7a00 	vldr	s15, [r3]
 8001966:	eeb0 0a67 	vmov.f32	s0, s15
 800196a:	f000 fbad 	bl	80020c8 <vel2rc>
 800196e:	eef0 7a40 	vmov.f32	s15, s0
 8001972:	eeb0 0a67 	vmov.f32	s0, s15
 8001976:	4876      	ldr	r0, [pc, #472]	@ (8001b50 <enc_timer_callback+0x270>)
 8001978:	f008 fe52 	bl	800a620 <RC_Write>
			if (bldc_cmd > 0) state = forward;
 800197c:	4b73      	ldr	r3, [pc, #460]	@ (8001b4c <enc_timer_callback+0x26c>)
 800197e:	edd3 7a00 	vldr	s15, [r3]
 8001982:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001986:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800198a:	dd03      	ble.n	8001994 <enc_timer_callback+0xb4>
 800198c:	4b6e      	ldr	r3, [pc, #440]	@ (8001b48 <enc_timer_callback+0x268>)
 800198e:	2200      	movs	r2, #0
 8001990:	701a      	strb	r2, [r3, #0]
			else if (bldc_cmd < 0) state = backward_1;
			break;
 8001992:	e04d      	b.n	8001a30 <enc_timer_callback+0x150>
			else if (bldc_cmd < 0) state = backward_1;
 8001994:	4b6d      	ldr	r3, [pc, #436]	@ (8001b4c <enc_timer_callback+0x26c>)
 8001996:	edd3 7a00 	vldr	s15, [r3]
 800199a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800199e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80019a2:	d400      	bmi.n	80019a6 <enc_timer_callback+0xc6>
			break;
 80019a4:	e044      	b.n	8001a30 <enc_timer_callback+0x150>
			else if (bldc_cmd < 0) state = backward_1;
 80019a6:	4b68      	ldr	r3, [pc, #416]	@ (8001b48 <enc_timer_callback+0x268>)
 80019a8:	2201      	movs	r2, #1
 80019aa:	701a      	strb	r2, [r3, #0]
			break;
 80019ac:	e040      	b.n	8001a30 <enc_timer_callback+0x150>
		case backward_1:
			RC_Write(&bldc, vel2rc(0));
 80019ae:	ed9f 0a69 	vldr	s0, [pc, #420]	@ 8001b54 <enc_timer_callback+0x274>
 80019b2:	f000 fb89 	bl	80020c8 <vel2rc>
 80019b6:	eef0 7a40 	vmov.f32	s15, s0
 80019ba:	eeb0 0a67 	vmov.f32	s0, s15
 80019be:	4864      	ldr	r0, [pc, #400]	@ (8001b50 <enc_timer_callback+0x270>)
 80019c0:	f008 fe2e 	bl	800a620 <RC_Write>
			if (bldc_cmd < 0) state = backward_2;
 80019c4:	4b61      	ldr	r3, [pc, #388]	@ (8001b4c <enc_timer_callback+0x26c>)
 80019c6:	edd3 7a00 	vldr	s15, [r3]
 80019ca:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80019ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80019d2:	d503      	bpl.n	80019dc <enc_timer_callback+0xfc>
 80019d4:	4b5c      	ldr	r3, [pc, #368]	@ (8001b48 <enc_timer_callback+0x268>)
 80019d6:	2202      	movs	r2, #2
 80019d8:	701a      	strb	r2, [r3, #0]
			else state = brake;
			break;
 80019da:	e029      	b.n	8001a30 <enc_timer_callback+0x150>
			else state = brake;
 80019dc:	4b5a      	ldr	r3, [pc, #360]	@ (8001b48 <enc_timer_callback+0x268>)
 80019de:	2203      	movs	r2, #3
 80019e0:	701a      	strb	r2, [r3, #0]
			break;
 80019e2:	e025      	b.n	8001a30 <enc_timer_callback+0x150>
		case backward_2:
			if (bldc_cmd < 0) RC_Write(&bldc, vel2rc(bldc_cmd));
 80019e4:	4b59      	ldr	r3, [pc, #356]	@ (8001b4c <enc_timer_callback+0x26c>)
 80019e6:	edd3 7a00 	vldr	s15, [r3]
 80019ea:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80019ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80019f2:	d50e      	bpl.n	8001a12 <enc_timer_callback+0x132>
 80019f4:	4b55      	ldr	r3, [pc, #340]	@ (8001b4c <enc_timer_callback+0x26c>)
 80019f6:	edd3 7a00 	vldr	s15, [r3]
 80019fa:	eeb0 0a67 	vmov.f32	s0, s15
 80019fe:	f000 fb63 	bl	80020c8 <vel2rc>
 8001a02:	eef0 7a40 	vmov.f32	s15, s0
 8001a06:	eeb0 0a67 	vmov.f32	s0, s15
 8001a0a:	4851      	ldr	r0, [pc, #324]	@ (8001b50 <enc_timer_callback+0x270>)
 8001a0c:	f008 fe08 	bl	800a620 <RC_Write>
			else {
				RC_Write(&bldc, vel2rc(0));
				state = brake;
			}
			break;
 8001a10:	e00d      	b.n	8001a2e <enc_timer_callback+0x14e>
				RC_Write(&bldc, vel2rc(0));
 8001a12:	ed9f 0a50 	vldr	s0, [pc, #320]	@ 8001b54 <enc_timer_callback+0x274>
 8001a16:	f000 fb57 	bl	80020c8 <vel2rc>
 8001a1a:	eef0 7a40 	vmov.f32	s15, s0
 8001a1e:	eeb0 0a67 	vmov.f32	s0, s15
 8001a22:	484b      	ldr	r0, [pc, #300]	@ (8001b50 <enc_timer_callback+0x270>)
 8001a24:	f008 fdfc 	bl	800a620 <RC_Write>
				state = brake;
 8001a28:	4b47      	ldr	r3, [pc, #284]	@ (8001b48 <enc_timer_callback+0x268>)
 8001a2a:	2203      	movs	r2, #3
 8001a2c:	701a      	strb	r2, [r3, #0]
			break;
 8001a2e:	bf00      	nop
		}
		RC_Write(&servo, ang2rc(servo_cmd));
 8001a30:	4b49      	ldr	r3, [pc, #292]	@ (8001b58 <enc_timer_callback+0x278>)
 8001a32:	edd3 7a00 	vldr	s15, [r3]
 8001a36:	eeb0 0a67 	vmov.f32	s0, s15
 8001a3a:	f000 fc1d 	bl	8002278 <ang2rc>
 8001a3e:	eef0 7a40 	vmov.f32	s15, s0
 8001a42:	eeb0 0a67 	vmov.f32	s0, s15
 8001a46:	4845      	ldr	r0, [pc, #276]	@ (8001b5c <enc_timer_callback+0x27c>)
 8001a48:	f008 fdea 	bl	800a620 <RC_Write>

		int16_t counter = __HAL_TIM_GET_COUNTER(&htim1);
 8001a4c:	4b44      	ldr	r3, [pc, #272]	@ (8001b60 <enc_timer_callback+0x280>)
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a52:	83fb      	strh	r3, [r7, #30]
		int32_t delta_counter = counter - enc.prev_counter;
 8001a54:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8001a58:	4a42      	ldr	r2, [pc, #264]	@ (8001b64 <enc_timer_callback+0x284>)
 8001a5a:	f9b2 2000 	ldrsh.w	r2, [r2]
 8001a5e:	1a9b      	subs	r3, r3, r2
 8001a60:	61bb      	str	r3, [r7, #24]
		enc.prev_counter = counter;
 8001a62:	4a40      	ldr	r2, [pc, #256]	@ (8001b64 <enc_timer_callback+0x284>)
 8001a64:	8bfb      	ldrh	r3, [r7, #30]
 8001a66:	8013      	strh	r3, [r2, #0]

		if (delta_counter < -32768) enc.pos += (65535.0 * enc.gain);
 8001a68:	69bb      	ldr	r3, [r7, #24]
 8001a6a:	f513 4f00 	cmn.w	r3, #32768	@ 0x8000
 8001a6e:	da16      	bge.n	8001a9e <enc_timer_callback+0x1be>
 8001a70:	4b3c      	ldr	r3, [pc, #240]	@ (8001b64 <enc_timer_callback+0x284>)
 8001a72:	e9d3 4506 	ldrd	r4, r5, [r3, #24]
 8001a76:	4b3b      	ldr	r3, [pc, #236]	@ (8001b64 <enc_timer_callback+0x284>)
 8001a78:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8001a7c:	a330      	add	r3, pc, #192	@ (adr r3, 8001b40 <enc_timer_callback+0x260>)
 8001a7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a82:	f7fe fdc9 	bl	8000618 <__aeabi_dmul>
 8001a86:	4602      	mov	r2, r0
 8001a88:	460b      	mov	r3, r1
 8001a8a:	4620      	mov	r0, r4
 8001a8c:	4629      	mov	r1, r5
 8001a8e:	f7fe fc0d 	bl	80002ac <__adddf3>
 8001a92:	4602      	mov	r2, r0
 8001a94:	460b      	mov	r3, r1
 8001a96:	4933      	ldr	r1, [pc, #204]	@ (8001b64 <enc_timer_callback+0x284>)
 8001a98:	e9c1 2306 	strd	r2, r3, [r1, #24]
 8001a9c:	e019      	b.n	8001ad2 <enc_timer_callback+0x1f2>
		else if (delta_counter > 32768) enc.pos -= (65535.0 * enc.gain);
 8001a9e:	69bb      	ldr	r3, [r7, #24]
 8001aa0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8001aa4:	dd15      	ble.n	8001ad2 <enc_timer_callback+0x1f2>
 8001aa6:	4b2f      	ldr	r3, [pc, #188]	@ (8001b64 <enc_timer_callback+0x284>)
 8001aa8:	e9d3 4506 	ldrd	r4, r5, [r3, #24]
 8001aac:	4b2d      	ldr	r3, [pc, #180]	@ (8001b64 <enc_timer_callback+0x284>)
 8001aae:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8001ab2:	a323      	add	r3, pc, #140	@ (adr r3, 8001b40 <enc_timer_callback+0x260>)
 8001ab4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ab8:	f7fe fdae 	bl	8000618 <__aeabi_dmul>
 8001abc:	4602      	mov	r2, r0
 8001abe:	460b      	mov	r3, r1
 8001ac0:	4620      	mov	r0, r4
 8001ac2:	4629      	mov	r1, r5
 8001ac4:	f7fe fbf0 	bl	80002a8 <__aeabi_dsub>
 8001ac8:	4602      	mov	r2, r0
 8001aca:	460b      	mov	r3, r1
 8001acc:	4925      	ldr	r1, [pc, #148]	@ (8001b64 <enc_timer_callback+0x284>)
 8001ace:	e9c1 2306 	strd	r2, r3, [r1, #24]
		enc.unwrap_pos = counter * enc.gain; //(counter * enc.gain) + enc.pos;
 8001ad2:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8001ad6:	4618      	mov	r0, r3
 8001ad8:	f7fe fd34 	bl	8000544 <__aeabi_i2d>
 8001adc:	4b21      	ldr	r3, [pc, #132]	@ (8001b64 <enc_timer_callback+0x284>)
 8001ade:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8001ae2:	f7fe fd99 	bl	8000618 <__aeabi_dmul>
 8001ae6:	4602      	mov	r2, r0
 8001ae8:	460b      	mov	r3, r1
 8001aea:	491e      	ldr	r1, [pc, #120]	@ (8001b64 <enc_timer_callback+0x284>)
 8001aec:	e9c1 2304 	strd	r2, r3, [r1, #16]

		enc_msg.data.data[0] = enc.unwrap_pos;
 8001af0:	4b1d      	ldr	r3, [pc, #116]	@ (8001b68 <enc_timer_callback+0x288>)
 8001af2:	6919      	ldr	r1, [r3, #16]
 8001af4:	4b1b      	ldr	r3, [pc, #108]	@ (8001b64 <enc_timer_callback+0x284>)
 8001af6:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8001afa:	e9c1 2300 	strd	r2, r3, [r1]
#endif
		if (!isfirst_callback) RCSOFTCHECK(rcl_publish(&enc_publisher, &enc_msg, NULL))
 8001afe:	4b1b      	ldr	r3, [pc, #108]	@ (8001b6c <enc_timer_callback+0x28c>)
 8001b00:	781b      	ldrb	r3, [r3, #0]
 8001b02:	f083 0301 	eor.w	r3, r3, #1
 8001b06:	b2db      	uxtb	r3, r3
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	d006      	beq.n	8001b1a <enc_timer_callback+0x23a>
 8001b0c:	2200      	movs	r2, #0
 8001b0e:	4916      	ldr	r1, [pc, #88]	@ (8001b68 <enc_timer_callback+0x288>)
 8001b10:	4817      	ldr	r0, [pc, #92]	@ (8001b70 <enc_timer_callback+0x290>)
 8001b12:	f00b fd37 	bl	800d584 <rcl_publish>
 8001b16:	6178      	str	r0, [r7, #20]
		else isfirst_callback = !isfirst_callback;
	}
}
 8001b18:	e00e      	b.n	8001b38 <enc_timer_callback+0x258>
		else isfirst_callback = !isfirst_callback;
 8001b1a:	4b14      	ldr	r3, [pc, #80]	@ (8001b6c <enc_timer_callback+0x28c>)
 8001b1c:	781b      	ldrb	r3, [r3, #0]
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	bf14      	ite	ne
 8001b22:	2301      	movne	r3, #1
 8001b24:	2300      	moveq	r3, #0
 8001b26:	b2db      	uxtb	r3, r3
 8001b28:	f083 0301 	eor.w	r3, r3, #1
 8001b2c:	b2db      	uxtb	r3, r3
 8001b2e:	f003 0301 	and.w	r3, r3, #1
 8001b32:	b2da      	uxtb	r2, r3
 8001b34:	4b0d      	ldr	r3, [pc, #52]	@ (8001b6c <enc_timer_callback+0x28c>)
 8001b36:	701a      	strb	r2, [r3, #0]
}
 8001b38:	bf00      	nop
 8001b3a:	3720      	adds	r7, #32
 8001b3c:	46bd      	mov	sp, r7
 8001b3e:	bdb0      	pop	{r4, r5, r7, pc}
 8001b40:	00000000 	.word	0x00000000
 8001b44:	40efffe0 	.word	0x40efffe0
 8001b48:	20000016 	.word	0x20000016
 8001b4c:	2000593c 	.word	0x2000593c
 8001b50:	200003c0 	.word	0x200003c0
 8001b54:	00000000 	.word	0x00000000
 8001b58:	20005938 	.word	0x20005938
 8001b5c:	200003b0 	.word	0x200003b0
 8001b60:	2000599c 	.word	0x2000599c
 8001b64:	20000018 	.word	0x20000018
 8001b68:	20000270 	.word	0x20000270
 8001b6c:	20000038 	.word	0x20000038
 8001b70:	2000025c 	.word	0x2000025c

08001b74 <imu_timer_callback>:

void imu_timer_callback(rcl_timer_t * timer, int64_t last_call_time)
{
 8001b74:	b580      	push	{r7, lr}
 8001b76:	b086      	sub	sp, #24
 8001b78:	af00      	add	r7, sp, #0
 8001b7a:	60f8      	str	r0, [r7, #12]
 8001b7c:	e9c7 2300 	strd	r2, r3, [r7]
	static bool isfirst_callback = true;
	RCLC_UNUSED(last_call_time);
	if (timer != NULL)
 8001b80:	68fb      	ldr	r3, [r7, #12]
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	d07f      	beq.n	8001c86 <imu_timer_callback+0x112>
	{
#ifdef SENSOR_ON
		if (bno.flag == HAL_OK)
 8001b86:	4b42      	ldr	r3, [pc, #264]	@ (8001c90 <imu_timer_callback+0x11c>)
 8001b88:	799b      	ldrb	r3, [r3, #6]
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	d106      	bne.n	8001b9c <imu_timer_callback+0x28>
		{
			BNO055_Read_DMA(&bno, 0);
 8001b8e:	2100      	movs	r1, #0
 8001b90:	483f      	ldr	r0, [pc, #252]	@ (8001c90 <imu_timer_callback+0x11c>)
 8001b92:	f008 f94d 	bl	8009e30 <BNO055_Read_DMA>
			bno.flag = HAL_BUSY;
 8001b96:	4b3e      	ldr	r3, [pc, #248]	@ (8001c90 <imu_timer_callback+0x11c>)
 8001b98:	2202      	movs	r2, #2
 8001b9a:	719a      	strb	r2, [r3, #6]
		}
		imu_msg.data.data[0] = bno.gyro.x;
 8001b9c:	4b3d      	ldr	r3, [pc, #244]	@ (8001c94 <imu_timer_callback+0x120>)
 8001b9e:	6919      	ldr	r1, [r3, #16]
 8001ba0:	4b3b      	ldr	r3, [pc, #236]	@ (8001c90 <imu_timer_callback+0x11c>)
 8001ba2:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 8001ba6:	e9c1 2300 	strd	r2, r3, [r1]
		imu_msg.data.data[1] = bno.gyro.y;
 8001baa:	4b3a      	ldr	r3, [pc, #232]	@ (8001c94 <imu_timer_callback+0x120>)
 8001bac:	691b      	ldr	r3, [r3, #16]
 8001bae:	f103 0108 	add.w	r1, r3, #8
 8001bb2:	4b37      	ldr	r3, [pc, #220]	@ (8001c90 <imu_timer_callback+0x11c>)
 8001bb4:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	@ 0x40
 8001bb8:	e9c1 2300 	strd	r2, r3, [r1]
		imu_msg.data.data[2] = bno.gyro.z;
 8001bbc:	4b35      	ldr	r3, [pc, #212]	@ (8001c94 <imu_timer_callback+0x120>)
 8001bbe:	691b      	ldr	r3, [r3, #16]
 8001bc0:	f103 0110 	add.w	r1, r3, #16
 8001bc4:	4b32      	ldr	r3, [pc, #200]	@ (8001c90 <imu_timer_callback+0x11c>)
 8001bc6:	e9d3 2312 	ldrd	r2, r3, [r3, #72]	@ 0x48
 8001bca:	e9c1 2300 	strd	r2, r3, [r1]
		imu_msg.data.data[3] = bno.lin_acc.x;
 8001bce:	4b31      	ldr	r3, [pc, #196]	@ (8001c94 <imu_timer_callback+0x120>)
 8001bd0:	691b      	ldr	r3, [r3, #16]
 8001bd2:	f103 0118 	add.w	r1, r3, #24
 8001bd6:	4b2e      	ldr	r3, [pc, #184]	@ (8001c90 <imu_timer_callback+0x11c>)
 8001bd8:	e9d3 2322 	ldrd	r2, r3, [r3, #136]	@ 0x88
 8001bdc:	e9c1 2300 	strd	r2, r3, [r1]
		imu_msg.data.data[4] = bno.lin_acc.y;
 8001be0:	4b2c      	ldr	r3, [pc, #176]	@ (8001c94 <imu_timer_callback+0x120>)
 8001be2:	691b      	ldr	r3, [r3, #16]
 8001be4:	f103 0120 	add.w	r1, r3, #32
 8001be8:	4b29      	ldr	r3, [pc, #164]	@ (8001c90 <imu_timer_callback+0x11c>)
 8001bea:	e9d3 2324 	ldrd	r2, r3, [r3, #144]	@ 0x90
 8001bee:	e9c1 2300 	strd	r2, r3, [r1]
		imu_msg.data.data[5] = bno.lin_acc.z;
 8001bf2:	4b28      	ldr	r3, [pc, #160]	@ (8001c94 <imu_timer_callback+0x120>)
 8001bf4:	691b      	ldr	r3, [r3, #16]
 8001bf6:	f103 0128 	add.w	r1, r3, #40	@ 0x28
 8001bfa:	4b25      	ldr	r3, [pc, #148]	@ (8001c90 <imu_timer_callback+0x11c>)
 8001bfc:	e9d3 2326 	ldrd	r2, r3, [r3, #152]	@ 0x98
 8001c00:	e9c1 2300 	strd	r2, r3, [r1]
		imu_msg.data.data[6] = bno.quat.x;
 8001c04:	4b23      	ldr	r3, [pc, #140]	@ (8001c94 <imu_timer_callback+0x120>)
 8001c06:	691b      	ldr	r3, [r3, #16]
 8001c08:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8001c0c:	4b20      	ldr	r3, [pc, #128]	@ (8001c90 <imu_timer_callback+0x11c>)
 8001c0e:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	@ 0x68
 8001c12:	e9c1 2300 	strd	r2, r3, [r1]
		imu_msg.data.data[7] = bno.quat.y;
 8001c16:	4b1f      	ldr	r3, [pc, #124]	@ (8001c94 <imu_timer_callback+0x120>)
 8001c18:	691b      	ldr	r3, [r3, #16]
 8001c1a:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 8001c1e:	4b1c      	ldr	r3, [pc, #112]	@ (8001c90 <imu_timer_callback+0x11c>)
 8001c20:	e9d3 231c 	ldrd	r2, r3, [r3, #112]	@ 0x70
 8001c24:	e9c1 2300 	strd	r2, r3, [r1]
		imu_msg.data.data[8] = bno.quat.z;
 8001c28:	4b1a      	ldr	r3, [pc, #104]	@ (8001c94 <imu_timer_callback+0x120>)
 8001c2a:	691b      	ldr	r3, [r3, #16]
 8001c2c:	f103 0140 	add.w	r1, r3, #64	@ 0x40
 8001c30:	4b17      	ldr	r3, [pc, #92]	@ (8001c90 <imu_timer_callback+0x11c>)
 8001c32:	e9d3 231e 	ldrd	r2, r3, [r3, #120]	@ 0x78
 8001c36:	e9c1 2300 	strd	r2, r3, [r1]
		imu_msg.data.data[9] = bno.quat.w;
 8001c3a:	4b16      	ldr	r3, [pc, #88]	@ (8001c94 <imu_timer_callback+0x120>)
 8001c3c:	691b      	ldr	r3, [r3, #16]
 8001c3e:	f103 0148 	add.w	r1, r3, #72	@ 0x48
 8001c42:	4b13      	ldr	r3, [pc, #76]	@ (8001c90 <imu_timer_callback+0x11c>)
 8001c44:	e9d3 2320 	ldrd	r2, r3, [r3, #128]	@ 0x80
 8001c48:	e9c1 2300 	strd	r2, r3, [r1]
#endif
		if (!isfirst_callback) RCSOFTCHECK(rcl_publish(&imu_publisher, &imu_msg, NULL))
 8001c4c:	4b12      	ldr	r3, [pc, #72]	@ (8001c98 <imu_timer_callback+0x124>)
 8001c4e:	781b      	ldrb	r3, [r3, #0]
 8001c50:	f083 0301 	eor.w	r3, r3, #1
 8001c54:	b2db      	uxtb	r3, r3
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	d006      	beq.n	8001c68 <imu_timer_callback+0xf4>
 8001c5a:	2200      	movs	r2, #0
 8001c5c:	490d      	ldr	r1, [pc, #52]	@ (8001c94 <imu_timer_callback+0x120>)
 8001c5e:	480f      	ldr	r0, [pc, #60]	@ (8001c9c <imu_timer_callback+0x128>)
 8001c60:	f00b fc90 	bl	800d584 <rcl_publish>
 8001c64:	6178      	str	r0, [r7, #20]
		else isfirst_callback = !isfirst_callback;
	}
}
 8001c66:	e00e      	b.n	8001c86 <imu_timer_callback+0x112>
		else isfirst_callback = !isfirst_callback;
 8001c68:	4b0b      	ldr	r3, [pc, #44]	@ (8001c98 <imu_timer_callback+0x124>)
 8001c6a:	781b      	ldrb	r3, [r3, #0]
 8001c6c:	2b00      	cmp	r3, #0
 8001c6e:	bf14      	ite	ne
 8001c70:	2301      	movne	r3, #1
 8001c72:	2300      	moveq	r3, #0
 8001c74:	b2db      	uxtb	r3, r3
 8001c76:	f083 0301 	eor.w	r3, r3, #1
 8001c7a:	b2db      	uxtb	r3, r3
 8001c7c:	f003 0301 	and.w	r3, r3, #1
 8001c80:	b2da      	uxtb	r2, r3
 8001c82:	4b05      	ldr	r3, [pc, #20]	@ (8001c98 <imu_timer_callback+0x124>)
 8001c84:	701a      	strb	r2, [r3, #0]
}
 8001c86:	bf00      	nop
 8001c88:	3718      	adds	r7, #24
 8001c8a:	46bd      	mov	sp, r7
 8001c8c:	bd80      	pop	{r7, pc}
 8001c8e:	bf00      	nop
 8001c90:	200002c8 	.word	0x200002c8
 8001c94:	2000028c 	.word	0x2000028c
 8001c98:	20000039 	.word	0x20000039
 8001c9c:	20000260 	.word	0x20000260

08001ca0 <subscription_callback>:

void subscription_callback(const void * msgin)
{
 8001ca0:	b580      	push	{r7, lr}
 8001ca2:	b084      	sub	sp, #16
 8001ca4:	af00      	add	r7, sp, #0
 8001ca6:	6078      	str	r0, [r7, #4]
	const std_msgs__msg__Float64MultiArray *cmd_msg = (const std_msgs__msg__Float64MultiArray *)msgin;
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	60fb      	str	r3, [r7, #12]

	servo_cmd = cmd_msg->data.data[0];
 8001cac:	68fb      	ldr	r3, [r7, #12]
 8001cae:	691b      	ldr	r3, [r3, #16]
 8001cb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001cb4:	4610      	mov	r0, r2
 8001cb6:	4619      	mov	r1, r3
 8001cb8:	f7fe ff7e 	bl	8000bb8 <__aeabi_d2f>
 8001cbc:	4603      	mov	r3, r0
 8001cbe:	4a09      	ldr	r2, [pc, #36]	@ (8001ce4 <subscription_callback+0x44>)
 8001cc0:	6013      	str	r3, [r2, #0]
	bldc_cmd = cmd_msg->data.data[1];
 8001cc2:	68fb      	ldr	r3, [r7, #12]
 8001cc4:	691b      	ldr	r3, [r3, #16]
 8001cc6:	3308      	adds	r3, #8
 8001cc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ccc:	4610      	mov	r0, r2
 8001cce:	4619      	mov	r1, r3
 8001cd0:	f7fe ff72 	bl	8000bb8 <__aeabi_d2f>
 8001cd4:	4603      	mov	r3, r0
 8001cd6:	4a04      	ldr	r2, [pc, #16]	@ (8001ce8 <subscription_callback+0x48>)
 8001cd8:	6013      	str	r3, [r2, #0]
}
 8001cda:	bf00      	nop
 8001cdc:	3710      	adds	r7, #16
 8001cde:	46bd      	mov	sp, r7
 8001ce0:	bd80      	pop	{r7, pc}
 8001ce2:	bf00      	nop
 8001ce4:	20005938 	.word	0x20005938
 8001ce8:	2000593c 	.word	0x2000593c
 8001cec:	00000000 	.word	0x00000000

08001cf0 <StartDefaultTask>:

void StartDefaultTask(void *argument)
{
 8001cf0:	b5b0      	push	{r4, r5, r7, lr}
 8001cf2:	b090      	sub	sp, #64	@ 0x40
 8001cf4:	af02      	add	r7, sp, #8
 8001cf6:	61f8      	str	r0, [r7, #28]
	rmw_uros_set_custom_transport(
 8001cf8:	4b5d      	ldr	r3, [pc, #372]	@ (8001e70 <StartDefaultTask+0x180>)
 8001cfa:	9301      	str	r3, [sp, #4]
 8001cfc:	4b5d      	ldr	r3, [pc, #372]	@ (8001e74 <StartDefaultTask+0x184>)
 8001cfe:	9300      	str	r3, [sp, #0]
 8001d00:	4b5d      	ldr	r3, [pc, #372]	@ (8001e78 <StartDefaultTask+0x188>)
 8001d02:	4a5e      	ldr	r2, [pc, #376]	@ (8001e7c <StartDefaultTask+0x18c>)
 8001d04:	495e      	ldr	r1, [pc, #376]	@ (8001e80 <StartDefaultTask+0x190>)
 8001d06:	2001      	movs	r0, #1
 8001d08:	f00c fba2 	bl	800e450 <rmw_uros_set_custom_transport>
			cubemx_transport_open,
			cubemx_transport_close,
			cubemx_transport_write,
			cubemx_transport_read);

	rcl_allocator_t freeRTOS_allocator = rcutils_get_zero_initialized_allocator();
 8001d0c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001d10:	4618      	mov	r0, r3
 8001d12:	f00c f91d 	bl	800df50 <rcutils_get_zero_initialized_allocator>
	freeRTOS_allocator.allocate = microros_allocate;
 8001d16:	4b5b      	ldr	r3, [pc, #364]	@ (8001e84 <StartDefaultTask+0x194>)
 8001d18:	627b      	str	r3, [r7, #36]	@ 0x24
	freeRTOS_allocator.deallocate = microros_deallocate;
 8001d1a:	4b5b      	ldr	r3, [pc, #364]	@ (8001e88 <StartDefaultTask+0x198>)
 8001d1c:	62bb      	str	r3, [r7, #40]	@ 0x28
	freeRTOS_allocator.reallocate = microros_reallocate;
 8001d1e:	4b5b      	ldr	r3, [pc, #364]	@ (8001e8c <StartDefaultTask+0x19c>)
 8001d20:	62fb      	str	r3, [r7, #44]	@ 0x2c
	freeRTOS_allocator.zero_allocate =  microros_zero_allocate;
 8001d22:	4b5b      	ldr	r3, [pc, #364]	@ (8001e90 <StartDefaultTask+0x1a0>)
 8001d24:	633b      	str	r3, [r7, #48]	@ 0x30
	if (!rcutils_set_default_allocator(&freeRTOS_allocator)) printf("Error on default allocators (line %d)\n", __LINE__);
 8001d26:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001d2a:	4618      	mov	r0, r3
 8001d2c:	f00c f91e 	bl	800df6c <rcutils_set_default_allocator>
 8001d30:	4603      	mov	r3, r0
 8001d32:	f083 0301 	eor.w	r3, r3, #1
 8001d36:	b2db      	uxtb	r3, r3
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	d003      	beq.n	8001d44 <StartDefaultTask+0x54>
 8001d3c:	21d0      	movs	r1, #208	@ 0xd0
 8001d3e:	4855      	ldr	r0, [pc, #340]	@ (8001e94 <StartDefaultTask+0x1a4>)
 8001d40:	f017 fe4c 	bl	80199dc <iprintf>

	allocator = rcl_get_default_allocator();
 8001d44:	4c54      	ldr	r4, [pc, #336]	@ (8001e98 <StartDefaultTask+0x1a8>)
 8001d46:	463b      	mov	r3, r7
 8001d48:	4618      	mov	r0, r3
 8001d4a:	f00c f92f 	bl	800dfac <rcutils_get_default_allocator>
 8001d4e:	4625      	mov	r5, r4
 8001d50:	463c      	mov	r4, r7
 8001d52:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001d54:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001d56:	6823      	ldr	r3, [r4, #0]
 8001d58:	602b      	str	r3, [r5, #0]
	rclc_support_init(&support, 0, NULL, &allocator);
 8001d5a:	4b4f      	ldr	r3, [pc, #316]	@ (8001e98 <StartDefaultTask+0x1a8>)
 8001d5c:	2200      	movs	r2, #0
 8001d5e:	2100      	movs	r1, #0
 8001d60:	484e      	ldr	r0, [pc, #312]	@ (8001e9c <StartDefaultTask+0x1ac>)
 8001d62:	f00b ffcd 	bl	800dd00 <rclc_support_init>
	rclc_node_init_default(&node, "mcu_node", "", &support);
 8001d66:	4b4d      	ldr	r3, [pc, #308]	@ (8001e9c <StartDefaultTask+0x1ac>)
 8001d68:	4a4d      	ldr	r2, [pc, #308]	@ (8001ea0 <StartDefaultTask+0x1b0>)
 8001d6a:	494e      	ldr	r1, [pc, #312]	@ (8001ea4 <StartDefaultTask+0x1b4>)
 8001d6c:	484e      	ldr	r0, [pc, #312]	@ (8001ea8 <StartDefaultTask+0x1b8>)
 8001d6e:	f00c f815 	bl	800dd9c <rclc_node_init_default>

	rclc_publisher_init_default(
 8001d72:	f00d f853 	bl	800ee1c <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Float64MultiArray>
 8001d76:	4602      	mov	r2, r0
 8001d78:	4b4c      	ldr	r3, [pc, #304]	@ (8001eac <StartDefaultTask+0x1bc>)
 8001d7a:	494b      	ldr	r1, [pc, #300]	@ (8001ea8 <StartDefaultTask+0x1b8>)
 8001d7c:	484c      	ldr	r0, [pc, #304]	@ (8001eb0 <StartDefaultTask+0x1c0>)
 8001d7e:	f00c f849 	bl	800de14 <rclc_publisher_init_default>
			&enc_publisher,
			&node,
			ROSIDL_GET_MSG_TYPE_SUPPORT(std_msgs, msg, Float64MultiArray),
			"enc_raw");
	rclc_publisher_init_default(
 8001d82:	f00d f84b 	bl	800ee1c <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Float64MultiArray>
 8001d86:	4602      	mov	r2, r0
 8001d88:	4b4a      	ldr	r3, [pc, #296]	@ (8001eb4 <StartDefaultTask+0x1c4>)
 8001d8a:	4947      	ldr	r1, [pc, #284]	@ (8001ea8 <StartDefaultTask+0x1b8>)
 8001d8c:	484a      	ldr	r0, [pc, #296]	@ (8001eb8 <StartDefaultTask+0x1c8>)
 8001d8e:	f00c f841 	bl	800de14 <rclc_publisher_init_default>
			&imu_publisher,
			&node,
			ROSIDL_GET_MSG_TYPE_SUPPORT(std_msgs, msg, Float64MultiArray),
			"imu_raw");

	rclc_subscription_init_default(
 8001d92:	f00d f843 	bl	800ee1c <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Float64MultiArray>
 8001d96:	4602      	mov	r2, r0
 8001d98:	4b48      	ldr	r3, [pc, #288]	@ (8001ebc <StartDefaultTask+0x1cc>)
 8001d9a:	4943      	ldr	r1, [pc, #268]	@ (8001ea8 <StartDefaultTask+0x1b8>)
 8001d9c:	4848      	ldr	r0, [pc, #288]	@ (8001ec0 <StartDefaultTask+0x1d0>)
 8001d9e:	f00c f86d 	bl	800de7c <rclc_subscription_init_default>
			&cmd_subscription,
			&node,
			ROSIDL_GET_MSG_TYPE_SUPPORT(std_msgs, msg, Float64MultiArray),
			"mcu_cmd");

	rclc_timer_init_default(
 8001da2:	4b48      	ldr	r3, [pc, #288]	@ (8001ec4 <StartDefaultTask+0x1d4>)
 8001da4:	9300      	str	r3, [sp, #0]
 8001da6:	a330      	add	r3, pc, #192	@ (adr r3, 8001e68 <StartDefaultTask+0x178>)
 8001da8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001dac:	493b      	ldr	r1, [pc, #236]	@ (8001e9c <StartDefaultTask+0x1ac>)
 8001dae:	4846      	ldr	r0, [pc, #280]	@ (8001ec8 <StartDefaultTask+0x1d8>)
 8001db0:	f00c f898 	bl	800dee4 <rclc_timer_init_default>
			&enc_timer,
			&support,
			RCL_MS_TO_NS(20),
			enc_timer_callback);

	rclc_timer_init_default(&imu_timer,
 8001db4:	4b45      	ldr	r3, [pc, #276]	@ (8001ecc <StartDefaultTask+0x1dc>)
 8001db6:	9300      	str	r3, [sp, #0]
 8001db8:	4a45      	ldr	r2, [pc, #276]	@ (8001ed0 <StartDefaultTask+0x1e0>)
 8001dba:	f04f 0300 	mov.w	r3, #0
 8001dbe:	4937      	ldr	r1, [pc, #220]	@ (8001e9c <StartDefaultTask+0x1ac>)
 8001dc0:	4844      	ldr	r0, [pc, #272]	@ (8001ed4 <StartDefaultTask+0x1e4>)
 8001dc2:	f00c f88f 	bl	800dee4 <rclc_timer_init_default>
			&support,
			RCL_MS_TO_NS(10),
			imu_timer_callback);

	enc_msg.data.capacity = 1;
 8001dc6:	4b44      	ldr	r3, [pc, #272]	@ (8001ed8 <StartDefaultTask+0x1e8>)
 8001dc8:	2201      	movs	r2, #1
 8001dca:	619a      	str	r2, [r3, #24]
	enc_msg.data.data = (double*) malloc(enc_msg.data.capacity * sizeof(double));
 8001dcc:	4b42      	ldr	r3, [pc, #264]	@ (8001ed8 <StartDefaultTask+0x1e8>)
 8001dce:	699b      	ldr	r3, [r3, #24]
 8001dd0:	00db      	lsls	r3, r3, #3
 8001dd2:	4618      	mov	r0, r3
 8001dd4:	f017 fb68 	bl	80194a8 <malloc>
 8001dd8:	4603      	mov	r3, r0
 8001dda:	461a      	mov	r2, r3
 8001ddc:	4b3e      	ldr	r3, [pc, #248]	@ (8001ed8 <StartDefaultTask+0x1e8>)
 8001dde:	611a      	str	r2, [r3, #16]
	enc_msg.data.size = 1;
 8001de0:	4b3d      	ldr	r3, [pc, #244]	@ (8001ed8 <StartDefaultTask+0x1e8>)
 8001de2:	2201      	movs	r2, #1
 8001de4:	615a      	str	r2, [r3, #20]

	imu_msg.data.capacity = 10;
 8001de6:	4b3d      	ldr	r3, [pc, #244]	@ (8001edc <StartDefaultTask+0x1ec>)
 8001de8:	220a      	movs	r2, #10
 8001dea:	619a      	str	r2, [r3, #24]
	imu_msg.data.data = (double*) malloc(imu_msg.data.capacity * sizeof(double));
 8001dec:	4b3b      	ldr	r3, [pc, #236]	@ (8001edc <StartDefaultTask+0x1ec>)
 8001dee:	699b      	ldr	r3, [r3, #24]
 8001df0:	00db      	lsls	r3, r3, #3
 8001df2:	4618      	mov	r0, r3
 8001df4:	f017 fb58 	bl	80194a8 <malloc>
 8001df8:	4603      	mov	r3, r0
 8001dfa:	461a      	mov	r2, r3
 8001dfc:	4b37      	ldr	r3, [pc, #220]	@ (8001edc <StartDefaultTask+0x1ec>)
 8001dfe:	611a      	str	r2, [r3, #16]
	imu_msg.data.size = 10;
 8001e00:	4b36      	ldr	r3, [pc, #216]	@ (8001edc <StartDefaultTask+0x1ec>)
 8001e02:	220a      	movs	r2, #10
 8001e04:	615a      	str	r2, [r3, #20]

	cmd_msg.data.capacity = 2;
 8001e06:	4b36      	ldr	r3, [pc, #216]	@ (8001ee0 <StartDefaultTask+0x1f0>)
 8001e08:	2202      	movs	r2, #2
 8001e0a:	619a      	str	r2, [r3, #24]
	cmd_msg.data.data = (double*) malloc(cmd_msg.data.capacity * sizeof(double));
 8001e0c:	4b34      	ldr	r3, [pc, #208]	@ (8001ee0 <StartDefaultTask+0x1f0>)
 8001e0e:	699b      	ldr	r3, [r3, #24]
 8001e10:	00db      	lsls	r3, r3, #3
 8001e12:	4618      	mov	r0, r3
 8001e14:	f017 fb48 	bl	80194a8 <malloc>
 8001e18:	4603      	mov	r3, r0
 8001e1a:	461a      	mov	r2, r3
 8001e1c:	4b30      	ldr	r3, [pc, #192]	@ (8001ee0 <StartDefaultTask+0x1f0>)
 8001e1e:	611a      	str	r2, [r3, #16]
	cmd_msg.data.size = 2;
 8001e20:	4b2f      	ldr	r3, [pc, #188]	@ (8001ee0 <StartDefaultTask+0x1f0>)
 8001e22:	2202      	movs	r2, #2
 8001e24:	615a      	str	r2, [r3, #20]

	rclc_executor_init(&executor, &support.context, 3, &allocator);
 8001e26:	4b1c      	ldr	r3, [pc, #112]	@ (8001e98 <StartDefaultTask+0x1a8>)
 8001e28:	2203      	movs	r2, #3
 8001e2a:	492e      	ldr	r1, [pc, #184]	@ (8001ee4 <StartDefaultTask+0x1f4>)
 8001e2c:	482e      	ldr	r0, [pc, #184]	@ (8001ee8 <StartDefaultTask+0x1f8>)
 8001e2e:	f00b fcc3 	bl	800d7b8 <rclc_executor_init>
	rclc_executor_add_subscription(&executor, &cmd_subscription, &cmd_msg, &subscription_callback, ON_NEW_DATA);
 8001e32:	2300      	movs	r3, #0
 8001e34:	9300      	str	r3, [sp, #0]
 8001e36:	4b2d      	ldr	r3, [pc, #180]	@ (8001eec <StartDefaultTask+0x1fc>)
 8001e38:	4a29      	ldr	r2, [pc, #164]	@ (8001ee0 <StartDefaultTask+0x1f0>)
 8001e3a:	4921      	ldr	r1, [pc, #132]	@ (8001ec0 <StartDefaultTask+0x1d0>)
 8001e3c:	482a      	ldr	r0, [pc, #168]	@ (8001ee8 <StartDefaultTask+0x1f8>)
 8001e3e:	f00b fd2f 	bl	800d8a0 <rclc_executor_add_subscription>
	rclc_executor_add_timer(&executor, &enc_timer);
 8001e42:	4921      	ldr	r1, [pc, #132]	@ (8001ec8 <StartDefaultTask+0x1d8>)
 8001e44:	4828      	ldr	r0, [pc, #160]	@ (8001ee8 <StartDefaultTask+0x1f8>)
 8001e46:	f00b fd65 	bl	800d914 <rclc_executor_add_timer>
	rclc_executor_add_timer(&executor, &imu_timer);
 8001e4a:	4922      	ldr	r1, [pc, #136]	@ (8001ed4 <StartDefaultTask+0x1e4>)
 8001e4c:	4826      	ldr	r0, [pc, #152]	@ (8001ee8 <StartDefaultTask+0x1f8>)
 8001e4e:	f00b fd61 	bl	800d914 <rclc_executor_add_timer>
	rclc_executor_spin(&executor);
 8001e52:	4825      	ldr	r0, [pc, #148]	@ (8001ee8 <StartDefaultTask+0x1f8>)
 8001e54:	f00b ff1a 	bl	800dc8c <rclc_executor_spin>

	while(1)
	{
		rclc_executor_spin_some(&executor, RCL_MS_TO_NS(1));
 8001e58:	4a25      	ldr	r2, [pc, #148]	@ (8001ef0 <StartDefaultTask+0x200>)
 8001e5a:	f04f 0300 	mov.w	r3, #0
 8001e5e:	4822      	ldr	r0, [pc, #136]	@ (8001ee8 <StartDefaultTask+0x1f8>)
 8001e60:	f00b fefe 	bl	800dc60 <rclc_executor_spin_some>
 8001e64:	e7f8      	b.n	8001e58 <StartDefaultTask+0x168>
 8001e66:	bf00      	nop
 8001e68:	01312d00 	.word	0x01312d00
 8001e6c:	00000000 	.word	0x00000000
 8001e70:	080015b9 	.word	0x080015b9
 8001e74:	08001559 	.word	0x08001559
 8001e78:	08001539 	.word	0x08001539
 8001e7c:	0800150d 	.word	0x0800150d
 8001e80:	20005a80 	.word	0x20005a80
 8001e84:	08002335 	.word	0x08002335
 8001e88:	08002379 	.word	0x08002379
 8001e8c:	080023b1 	.word	0x080023b1
 8001e90:	0800241d 	.word	0x0800241d
 8001e94:	0801bb0c 	.word	0x0801bb0c
 8001e98:	20000240 	.word	0x20000240
 8001e9c:	20000184 	.word	0x20000184
 8001ea0:	0801bb34 	.word	0x0801bb34
 8001ea4:	0801bb38 	.word	0x0801bb38
 8001ea8:	20000254 	.word	0x20000254
 8001eac:	0801bb44 	.word	0x0801bb44
 8001eb0:	2000025c 	.word	0x2000025c
 8001eb4:	0801bb4c 	.word	0x0801bb4c
 8001eb8:	20000260 	.word	0x20000260
 8001ebc:	0801bb54 	.word	0x0801bb54
 8001ec0:	20000264 	.word	0x20000264
 8001ec4:	080018e1 	.word	0x080018e1
 8001ec8:	20000268 	.word	0x20000268
 8001ecc:	08001b75 	.word	0x08001b75
 8001ed0:	00989680 	.word	0x00989680
 8001ed4:	2000026c 	.word	0x2000026c
 8001ed8:	20000270 	.word	0x20000270
 8001edc:	2000028c 	.word	0x2000028c
 8001ee0:	200002a8 	.word	0x200002a8
 8001ee4:	20000188 	.word	0x20000188
 8001ee8:	200001c0 	.word	0x200001c0
 8001eec:	08001ca1 	.word	0x08001ca1
 8001ef0:	000f4240 	.word	0x000f4240

08001ef4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001ef4:	b580      	push	{r7, lr}
 8001ef6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001ef8:	f001 f8a9 	bl	800304e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001efc:	f000 f86c 	bl	8001fd8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001f00:	f7ff fbc0 	bl	8001684 <MX_GPIO_Init>
  MX_DMA_Init();
 8001f04:	f7ff fac0 	bl	8001488 <MX_DMA_Init>
  MX_USART2_UART_Init();
 8001f08:	f000 ff7a 	bl	8002e00 <MX_USART2_UART_Init>
  MX_TIM1_Init();
 8001f0c:	f000 fd54 	bl	80029b8 <MX_TIM1_Init>
  MX_TIM2_Init();
 8001f10:	f000 fdac 	bl	8002a6c <MX_TIM2_Init>
  MX_TIM15_Init();
 8001f14:	f000 fdfe 	bl	8002b14 <MX_TIM15_Init>
  MX_I2C1_Init();
 8001f18:	f7ff fbe4 	bl	80016e4 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
#ifdef SENSOR_ON
  HALCHECK(BNO055_Init(&bno, &hi2c1, 0, NDOF))
 8001f1c:	e002      	b.n	8001f24 <main+0x30>
 8001f1e:	2064      	movs	r0, #100	@ 0x64
 8001f20:	f001 f8ce 	bl	80030c0 <HAL_Delay>
 8001f24:	230c      	movs	r3, #12
 8001f26:	2200      	movs	r2, #0
 8001f28:	4923      	ldr	r1, [pc, #140]	@ (8001fb8 <main+0xc4>)
 8001f2a:	4824      	ldr	r0, [pc, #144]	@ (8001fbc <main+0xc8>)
 8001f2c:	f007 fe9d 	bl	8009c6a <BNO055_Init>
 8001f30:	4603      	mov	r3, r0
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	d1f3      	bne.n	8001f1e <main+0x2a>
#ifdef BNO_CALIB_ON
  BNO055_Calibrated(&bno, &bno_stat, &bno_off);
#endif
  BNO055_SetOffsets(&bno, &bno_off);
 8001f36:	4922      	ldr	r1, [pc, #136]	@ (8001fc0 <main+0xcc>)
 8001f38:	4820      	ldr	r0, [pc, #128]	@ (8001fbc <main+0xc8>)
 8001f3a:	f008 f971 	bl	800a220 <BNO055_SetOffsets>
  BNO055_SetAxis(&bno, P0_Config, P0_Sign);
 8001f3e:	2204      	movs	r2, #4
 8001f40:	2121      	movs	r1, #33	@ 0x21
 8001f42:	481e      	ldr	r0, [pc, #120]	@ (8001fbc <main+0xc8>)
 8001f44:	f008 fa1f 	bl	800a386 <BNO055_SetAxis>
  HALCHECK(RC_Init(&servo, &htim15, TIM_CHANNEL_1, CPU_FREQ, true))
 8001f48:	e002      	b.n	8001f50 <main+0x5c>
 8001f4a:	2064      	movs	r0, #100	@ 0x64
 8001f4c:	f001 f8b8 	bl	80030c0 <HAL_Delay>
 8001f50:	2301      	movs	r3, #1
 8001f52:	ed9f 0a1c 	vldr	s0, [pc, #112]	@ 8001fc4 <main+0xd0>
 8001f56:	2200      	movs	r2, #0
 8001f58:	491b      	ldr	r1, [pc, #108]	@ (8001fc8 <main+0xd4>)
 8001f5a:	481c      	ldr	r0, [pc, #112]	@ (8001fcc <main+0xd8>)
 8001f5c:	f008 fa9a 	bl	800a494 <RC_Init>
 8001f60:	4603      	mov	r3, r0
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d1f1      	bne.n	8001f4a <main+0x56>
  HALCHECK(RC_Init(&bldc, &htim15, TIM_CHANNEL_2, CPU_FREQ, false))
 8001f66:	e002      	b.n	8001f6e <main+0x7a>
 8001f68:	2064      	movs	r0, #100	@ 0x64
 8001f6a:	f001 f8a9 	bl	80030c0 <HAL_Delay>
 8001f6e:	2300      	movs	r3, #0
 8001f70:	ed9f 0a14 	vldr	s0, [pc, #80]	@ 8001fc4 <main+0xd0>
 8001f74:	2204      	movs	r2, #4
 8001f76:	4914      	ldr	r1, [pc, #80]	@ (8001fc8 <main+0xd4>)
 8001f78:	4815      	ldr	r0, [pc, #84]	@ (8001fd0 <main+0xdc>)
 8001f7a:	f008 fa8b 	bl	800a494 <RC_Init>
 8001f7e:	4603      	mov	r3, r0
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	d1f1      	bne.n	8001f68 <main+0x74>
  RC_Set_Input_Range(&servo, 0.5, 2.5);
 8001f84:	eef0 0a04 	vmov.f32	s1, #4	@ 0x40200000  2.5
 8001f88:	eeb6 0a00 	vmov.f32	s0, #96	@ 0x3f000000  0.5
 8001f8c:	480f      	ldr	r0, [pc, #60]	@ (8001fcc <main+0xd8>)
 8001f8e:	f008 fb0d 	bl	800a5ac <RC_Set_Input_Range>
  RC_Set_Input_Range(&bldc, 0.5, 2.5);
 8001f92:	eef0 0a04 	vmov.f32	s1, #4	@ 0x40200000  2.5
 8001f96:	eeb6 0a00 	vmov.f32	s0, #96	@ 0x3f000000  0.5
 8001f9a:	480d      	ldr	r0, [pc, #52]	@ (8001fd0 <main+0xdc>)
 8001f9c:	f008 fb06 	bl	800a5ac <RC_Set_Input_Range>
  HAL_TIM_Encoder_Start(&htim1, TIM_CHANNEL_ALL);
 8001fa0:	213c      	movs	r1, #60	@ 0x3c
 8001fa2:	480c      	ldr	r0, [pc, #48]	@ (8001fd4 <main+0xe0>)
 8001fa4:	f005 fb5c 	bl	8007660 <HAL_TIM_Encoder_Start>
#endif
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8001fa8:	f008 fbf8 	bl	800a79c <osKernelInitialize>

  /* Call init function for freertos objects (in cmsis_os2.c) */
  MX_FREERTOS_Init();
 8001fac:	f7ff fb58 	bl	8001660 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8001fb0:	f008 fc18 	bl	800a7e4 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001fb4:	bf00      	nop
 8001fb6:	e7fd      	b.n	8001fb4 <main+0xc0>
 8001fb8:	20005854 	.word	0x20005854
 8001fbc:	200002c8 	.word	0x200002c8
 8001fc0:	20000000 	.word	0x20000000
 8001fc4:	4c989680 	.word	0x4c989680
 8001fc8:	20005a34 	.word	0x20005a34
 8001fcc:	200003b0 	.word	0x200003b0
 8001fd0:	200003c0 	.word	0x200003c0
 8001fd4:	2000599c 	.word	0x2000599c

08001fd8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001fd8:	b580      	push	{r7, lr}
 8001fda:	b096      	sub	sp, #88	@ 0x58
 8001fdc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001fde:	f107 0314 	add.w	r3, r7, #20
 8001fe2:	2244      	movs	r2, #68	@ 0x44
 8001fe4:	2100      	movs	r1, #0
 8001fe6:	4618      	mov	r0, r3
 8001fe8:	f017 fdd4 	bl	8019b94 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001fec:	463b      	mov	r3, r7
 8001fee:	2200      	movs	r2, #0
 8001ff0:	601a      	str	r2, [r3, #0]
 8001ff2:	605a      	str	r2, [r3, #4]
 8001ff4:	609a      	str	r2, [r3, #8]
 8001ff6:	60da      	str	r2, [r3, #12]
 8001ff8:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8001ffa:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8001ffe:	f003 fe99 	bl	8005d34 <HAL_PWREx_ControlVoltageScaling>
 8002002:	4603      	mov	r3, r0
 8002004:	2b00      	cmp	r3, #0
 8002006:	d001      	beq.n	800200c <SystemClock_Config+0x34>
  {
    Error_Handler();
 8002008:	f000 f98e 	bl	8002328 <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 800200c:	f003 fe74 	bl	8005cf8 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8002010:	4b21      	ldr	r3, [pc, #132]	@ (8002098 <SystemClock_Config+0xc0>)
 8002012:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002016:	4a20      	ldr	r2, [pc, #128]	@ (8002098 <SystemClock_Config+0xc0>)
 8002018:	f023 0318 	bic.w	r3, r3, #24
 800201c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 8002020:	2314      	movs	r3, #20
 8002022:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8002024:	2301      	movs	r3, #1
 8002026:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8002028:	2301      	movs	r3, #1
 800202a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 800202c:	2300      	movs	r3, #0
 800202e:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8002030:	2360      	movs	r3, #96	@ 0x60
 8002032:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002034:	2302      	movs	r3, #2
 8002036:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8002038:	2301      	movs	r3, #1
 800203a:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 800203c:	2301      	movs	r3, #1
 800203e:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 40;
 8002040:	2328      	movs	r3, #40	@ 0x28
 8002042:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8002044:	2307      	movs	r3, #7
 8002046:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8002048:	2302      	movs	r3, #2
 800204a:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800204c:	2302      	movs	r3, #2
 800204e:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002050:	f107 0314 	add.w	r3, r7, #20
 8002054:	4618      	mov	r0, r3
 8002056:	f003 fec3 	bl	8005de0 <HAL_RCC_OscConfig>
 800205a:	4603      	mov	r3, r0
 800205c:	2b00      	cmp	r3, #0
 800205e:	d001      	beq.n	8002064 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 8002060:	f000 f962 	bl	8002328 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002064:	230f      	movs	r3, #15
 8002066:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002068:	2303      	movs	r3, #3
 800206a:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800206c:	2300      	movs	r3, #0
 800206e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002070:	2300      	movs	r3, #0
 8002072:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002074:	2300      	movs	r3, #0
 8002076:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8002078:	463b      	mov	r3, r7
 800207a:	2104      	movs	r1, #4
 800207c:	4618      	mov	r0, r3
 800207e:	f004 fac3 	bl	8006608 <HAL_RCC_ClockConfig>
 8002082:	4603      	mov	r3, r0
 8002084:	2b00      	cmp	r3, #0
 8002086:	d001      	beq.n	800208c <SystemClock_Config+0xb4>
  {
    Error_Handler();
 8002088:	f000 f94e 	bl	8002328 <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 800208c:	f004 ff08 	bl	8006ea0 <HAL_RCCEx_EnableMSIPLLMode>
}
 8002090:	bf00      	nop
 8002092:	3758      	adds	r7, #88	@ 0x58
 8002094:	46bd      	mov	sp, r7
 8002096:	bd80      	pop	{r7, pc}
 8002098:	40021000 	.word	0x40021000

0800209c <HAL_I2C_MemRxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800209c:	b480      	push	{r7}
 800209e:	b083      	sub	sp, #12
 80020a0:	af00      	add	r7, sp, #0
 80020a2:	6078      	str	r0, [r7, #4]
	if (hi2c->Instance == bno.hi2cx->Instance) bno.flag = HAL_OK;
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	681a      	ldr	r2, [r3, #0]
 80020a8:	4b06      	ldr	r3, [pc, #24]	@ (80020c4 <HAL_I2C_MemRxCpltCallback+0x28>)
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	429a      	cmp	r2, r3
 80020b0:	d102      	bne.n	80020b8 <HAL_I2C_MemRxCpltCallback+0x1c>
 80020b2:	4b04      	ldr	r3, [pc, #16]	@ (80020c4 <HAL_I2C_MemRxCpltCallback+0x28>)
 80020b4:	2200      	movs	r2, #0
 80020b6:	719a      	strb	r2, [r3, #6]
}
 80020b8:	bf00      	nop
 80020ba:	370c      	adds	r7, #12
 80020bc:	46bd      	mov	sp, r7
 80020be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020c2:	4770      	bx	lr
 80020c4:	200002c8 	.word	0x200002c8

080020c8 <vel2rc>:

float vel2rc(float speed)
{
 80020c8:	b5b0      	push	{r4, r5, r7, lr}
 80020ca:	b084      	sub	sp, #16
 80020cc:	af00      	add	r7, sp, #0
 80020ce:	ed87 0a01 	vstr	s0, [r7, #4]
	float rc_signal = 1.5;
 80020d2:	f04f 537f 	mov.w	r3, #1069547520	@ 0x3fc00000
 80020d6:	60fb      	str	r3, [r7, #12]
	if (speed > 0) {
 80020d8:	edd7 7a01 	vldr	s15, [r7, #4]
 80020dc:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80020e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80020e4:	dd4a      	ble.n	800217c <vel2rc+0xb4>
		rc_signal = fminf((2.0e-7 * pow(speed, 2)) - (2.0e-5 * speed) + 1.5074, 2.0);
 80020e6:	6878      	ldr	r0, [r7, #4]
 80020e8:	f7fe fa3e 	bl	8000568 <__aeabi_f2d>
 80020ec:	4602      	mov	r2, r0
 80020ee:	460b      	mov	r3, r1
 80020f0:	ed9f 1b4f 	vldr	d1, [pc, #316]	@ 8002230 <vel2rc+0x168>
 80020f4:	ec43 2b10 	vmov	d0, r2, r3
 80020f8:	f018 fd40 	bl	801ab7c <pow>
 80020fc:	ec51 0b10 	vmov	r0, r1, d0
 8002100:	a34d      	add	r3, pc, #308	@ (adr r3, 8002238 <vel2rc+0x170>)
 8002102:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002106:	f7fe fa87 	bl	8000618 <__aeabi_dmul>
 800210a:	4602      	mov	r2, r0
 800210c:	460b      	mov	r3, r1
 800210e:	4614      	mov	r4, r2
 8002110:	461d      	mov	r5, r3
 8002112:	6878      	ldr	r0, [r7, #4]
 8002114:	f7fe fa28 	bl	8000568 <__aeabi_f2d>
 8002118:	a349      	add	r3, pc, #292	@ (adr r3, 8002240 <vel2rc+0x178>)
 800211a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800211e:	f7fe fa7b 	bl	8000618 <__aeabi_dmul>
 8002122:	4602      	mov	r2, r0
 8002124:	460b      	mov	r3, r1
 8002126:	4620      	mov	r0, r4
 8002128:	4629      	mov	r1, r5
 800212a:	f7fe f8bd 	bl	80002a8 <__aeabi_dsub>
 800212e:	4602      	mov	r2, r0
 8002130:	460b      	mov	r3, r1
 8002132:	4610      	mov	r0, r2
 8002134:	4619      	mov	r1, r3
 8002136:	a344      	add	r3, pc, #272	@ (adr r3, 8002248 <vel2rc+0x180>)
 8002138:	e9d3 2300 	ldrd	r2, r3, [r3]
 800213c:	f7fe f8b6 	bl	80002ac <__adddf3>
 8002140:	4602      	mov	r2, r0
 8002142:	460b      	mov	r3, r1
 8002144:	4610      	mov	r0, r2
 8002146:	4619      	mov	r1, r3
 8002148:	f7fe fd36 	bl	8000bb8 <__aeabi_d2f>
 800214c:	4603      	mov	r3, r0
 800214e:	eef0 0a00 	vmov.f32	s1, #0	@ 0x40000000  2.0
 8002152:	ee00 3a10 	vmov	s0, r3
 8002156:	f018 fda9 	bl	801acac <fminf>
 800215a:	ed87 0a03 	vstr	s0, [r7, #12]
		if (rc_signal < 1.55) rc_signal = 1.5;
 800215e:	68f8      	ldr	r0, [r7, #12]
 8002160:	f7fe fa02 	bl	8000568 <__aeabi_f2d>
 8002164:	a33a      	add	r3, pc, #232	@ (adr r3, 8002250 <vel2rc+0x188>)
 8002166:	e9d3 2300 	ldrd	r2, r3, [r3]
 800216a:	f7fe fcc7 	bl	8000afc <__aeabi_dcmplt>
 800216e:	4603      	mov	r3, r0
 8002170:	2b00      	cmp	r3, #0
 8002172:	d054      	beq.n	800221e <vel2rc+0x156>
 8002174:	f04f 537f 	mov.w	r3, #1069547520	@ 0x3fc00000
 8002178:	60fb      	str	r3, [r7, #12]
 800217a:	e050      	b.n	800221e <vel2rc+0x156>
	} else if (speed < 0) {
 800217c:	edd7 7a01 	vldr	s15, [r7, #4]
 8002180:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002184:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002188:	d549      	bpl.n	800221e <vel2rc+0x156>
		rc_signal = fmaxf(-(3.0e-7 * pow(speed, 2)) + (6.0e-5 * speed) + 1.473, 1.0);
 800218a:	6878      	ldr	r0, [r7, #4]
 800218c:	f7fe f9ec 	bl	8000568 <__aeabi_f2d>
 8002190:	a331      	add	r3, pc, #196	@ (adr r3, 8002258 <vel2rc+0x190>)
 8002192:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002196:	f7fe fa3f 	bl	8000618 <__aeabi_dmul>
 800219a:	4602      	mov	r2, r0
 800219c:	460b      	mov	r3, r1
 800219e:	4614      	mov	r4, r2
 80021a0:	461d      	mov	r5, r3
 80021a2:	6878      	ldr	r0, [r7, #4]
 80021a4:	f7fe f9e0 	bl	8000568 <__aeabi_f2d>
 80021a8:	4602      	mov	r2, r0
 80021aa:	460b      	mov	r3, r1
 80021ac:	ed9f 1b20 	vldr	d1, [pc, #128]	@ 8002230 <vel2rc+0x168>
 80021b0:	ec43 2b10 	vmov	d0, r2, r3
 80021b4:	f018 fce2 	bl	801ab7c <pow>
 80021b8:	ec51 0b10 	vmov	r0, r1, d0
 80021bc:	a328      	add	r3, pc, #160	@ (adr r3, 8002260 <vel2rc+0x198>)
 80021be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80021c2:	f7fe fa29 	bl	8000618 <__aeabi_dmul>
 80021c6:	4602      	mov	r2, r0
 80021c8:	460b      	mov	r3, r1
 80021ca:	4620      	mov	r0, r4
 80021cc:	4629      	mov	r1, r5
 80021ce:	f7fe f86b 	bl	80002a8 <__aeabi_dsub>
 80021d2:	4602      	mov	r2, r0
 80021d4:	460b      	mov	r3, r1
 80021d6:	4610      	mov	r0, r2
 80021d8:	4619      	mov	r1, r3
 80021da:	a323      	add	r3, pc, #140	@ (adr r3, 8002268 <vel2rc+0x1a0>)
 80021dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80021e0:	f7fe f864 	bl	80002ac <__adddf3>
 80021e4:	4602      	mov	r2, r0
 80021e6:	460b      	mov	r3, r1
 80021e8:	4610      	mov	r0, r2
 80021ea:	4619      	mov	r1, r3
 80021ec:	f7fe fce4 	bl	8000bb8 <__aeabi_d2f>
 80021f0:	4603      	mov	r3, r0
 80021f2:	eef7 0a00 	vmov.f32	s1, #112	@ 0x3f800000  1.0
 80021f6:	ee00 3a10 	vmov	s0, r3
 80021fa:	f018 fd3a 	bl	801ac72 <fmaxf>
 80021fe:	ed87 0a03 	vstr	s0, [r7, #12]
		if (rc_signal > 1.4) rc_signal = 1.5;
 8002202:	68f8      	ldr	r0, [r7, #12]
 8002204:	f7fe f9b0 	bl	8000568 <__aeabi_f2d>
 8002208:	a319      	add	r3, pc, #100	@ (adr r3, 8002270 <vel2rc+0x1a8>)
 800220a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800220e:	f7fe fc93 	bl	8000b38 <__aeabi_dcmpgt>
 8002212:	4603      	mov	r3, r0
 8002214:	2b00      	cmp	r3, #0
 8002216:	d002      	beq.n	800221e <vel2rc+0x156>
 8002218:	f04f 537f 	mov.w	r3, #1069547520	@ 0x3fc00000
 800221c:	60fb      	str	r3, [r7, #12]
	}
	return rc_signal;
 800221e:	68fb      	ldr	r3, [r7, #12]
 8002220:	ee07 3a90 	vmov	s15, r3
}
 8002224:	eeb0 0a67 	vmov.f32	s0, s15
 8002228:	3710      	adds	r7, #16
 800222a:	46bd      	mov	sp, r7
 800222c:	bdb0      	pop	{r4, r5, r7, pc}
 800222e:	bf00      	nop
 8002230:	00000000 	.word	0x00000000
 8002234:	40000000 	.word	0x40000000
 8002238:	9abcaf48 	.word	0x9abcaf48
 800223c:	3e8ad7f2 	.word	0x3e8ad7f2
 8002240:	88e368f1 	.word	0x88e368f1
 8002244:	3ef4f8b5 	.word	0x3ef4f8b5
 8002248:	765fd8ae 	.word	0x765fd8ae
 800224c:	3ff81e4f 	.word	0x3ff81e4f
 8002250:	cccccccd 	.word	0xcccccccd
 8002254:	3ff8cccc 	.word	0x3ff8cccc
 8002258:	4d551d69 	.word	0x4d551d69
 800225c:	3f0f7510 	.word	0x3f0f7510
 8002260:	f40d8376 	.word	0xf40d8376
 8002264:	3e9421f5 	.word	0x3e9421f5
 8002268:	72b020c5 	.word	0x72b020c5
 800226c:	3ff79168 	.word	0x3ff79168
 8002270:	66666666 	.word	0x66666666
 8002274:	3ff66666 	.word	0x3ff66666

08002278 <ang2rc>:

float ang2rc(float ang)
{
 8002278:	b5b0      	push	{r4, r5, r7, lr}
 800227a:	b084      	sub	sp, #16
 800227c:	af00      	add	r7, sp, #0
 800227e:	ed87 0a01 	vstr	s0, [r7, #4]
	float rc_signal = 1.35;
 8002282:	4b1d      	ldr	r3, [pc, #116]	@ (80022f8 <ang2rc+0x80>)
 8002284:	60fb      	str	r3, [r7, #12]
	rc_signal += ang / M_PI_2;
 8002286:	68f8      	ldr	r0, [r7, #12]
 8002288:	f7fe f96e 	bl	8000568 <__aeabi_f2d>
 800228c:	4604      	mov	r4, r0
 800228e:	460d      	mov	r5, r1
 8002290:	6878      	ldr	r0, [r7, #4]
 8002292:	f7fe f969 	bl	8000568 <__aeabi_f2d>
 8002296:	a316      	add	r3, pc, #88	@ (adr r3, 80022f0 <ang2rc+0x78>)
 8002298:	e9d3 2300 	ldrd	r2, r3, [r3]
 800229c:	f7fe fae6 	bl	800086c <__aeabi_ddiv>
 80022a0:	4602      	mov	r2, r0
 80022a2:	460b      	mov	r3, r1
 80022a4:	4620      	mov	r0, r4
 80022a6:	4629      	mov	r1, r5
 80022a8:	f7fe f800 	bl	80002ac <__adddf3>
 80022ac:	4602      	mov	r2, r0
 80022ae:	460b      	mov	r3, r1
 80022b0:	4610      	mov	r0, r2
 80022b2:	4619      	mov	r1, r3
 80022b4:	f7fe fc80 	bl	8000bb8 <__aeabi_d2f>
 80022b8:	4603      	mov	r3, r0
 80022ba:	60fb      	str	r3, [r7, #12]
	rc_signal = fmaxf(fminf(rc_signal, 1.794), -0.905);
 80022bc:	eddf 0a0f 	vldr	s1, [pc, #60]	@ 80022fc <ang2rc+0x84>
 80022c0:	ed97 0a03 	vldr	s0, [r7, #12]
 80022c4:	f018 fcf2 	bl	801acac <fminf>
 80022c8:	eef0 7a40 	vmov.f32	s15, s0
 80022cc:	eddf 0a0c 	vldr	s1, [pc, #48]	@ 8002300 <ang2rc+0x88>
 80022d0:	eeb0 0a67 	vmov.f32	s0, s15
 80022d4:	f018 fccd 	bl	801ac72 <fmaxf>
 80022d8:	ed87 0a03 	vstr	s0, [r7, #12]
	return rc_signal;
 80022dc:	68fb      	ldr	r3, [r7, #12]
 80022de:	ee07 3a90 	vmov	s15, r3
}
 80022e2:	eeb0 0a67 	vmov.f32	s0, s15
 80022e6:	3710      	adds	r7, #16
 80022e8:	46bd      	mov	sp, r7
 80022ea:	bdb0      	pop	{r4, r5, r7, pc}
 80022ec:	f3af 8000 	nop.w
 80022f0:	54442d18 	.word	0x54442d18
 80022f4:	3ff921fb 	.word	0x3ff921fb
 80022f8:	3faccccd 	.word	0x3faccccd
 80022fc:	3fe5a1cb 	.word	0x3fe5a1cb
 8002300:	bf67ae14 	.word	0xbf67ae14

08002304 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002304:	b580      	push	{r7, lr}
 8002306:	b082      	sub	sp, #8
 8002308:	af00      	add	r7, sp, #0
 800230a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	4a04      	ldr	r2, [pc, #16]	@ (8002324 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8002312:	4293      	cmp	r3, r2
 8002314:	d101      	bne.n	800231a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8002316:	f000 feb3 	bl	8003080 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800231a:	bf00      	nop
 800231c:	3708      	adds	r7, #8
 800231e:	46bd      	mov	sp, r7
 8002320:	bd80      	pop	{r7, pc}
 8002322:	bf00      	nop
 8002324:	40001000 	.word	0x40001000

08002328 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002328:	b480      	push	{r7}
 800232a:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 800232c:	b672      	cpsid	i
}
 800232e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002330:	bf00      	nop
 8002332:	e7fd      	b.n	8002330 <Error_Handler+0x8>

08002334 <microros_allocate>:
void vPortFreeMicroROS( void *pv );
void *pvPortReallocMicroROS( void *pv, size_t xWantedSize );
size_t getBlockSize( void *pv );
void *pvPortCallocMicroROS( size_t num, size_t xWantedSize );

void * microros_allocate(size_t size, void * state){
 8002334:	b580      	push	{r7, lr}
 8002336:	b082      	sub	sp, #8
 8002338:	af00      	add	r7, sp, #0
 800233a:	6078      	str	r0, [r7, #4]
 800233c:	6039      	str	r1, [r7, #0]
  (void) state;
  // printf("-- Alloc %d (prev: %d B)\n",size, xPortGetFreeHeapSize());
  absoluteUsedMemory += size;
 800233e:	4b0c      	ldr	r3, [pc, #48]	@ (8002370 <microros_allocate+0x3c>)
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	461a      	mov	r2, r3
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	4413      	add	r3, r2
 8002348:	461a      	mov	r2, r3
 800234a:	4b09      	ldr	r3, [pc, #36]	@ (8002370 <microros_allocate+0x3c>)
 800234c:	601a      	str	r2, [r3, #0]
  usedMemory += size;
 800234e:	4b09      	ldr	r3, [pc, #36]	@ (8002374 <microros_allocate+0x40>)
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	461a      	mov	r2, r3
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	4413      	add	r3, r2
 8002358:	461a      	mov	r2, r3
 800235a:	4b06      	ldr	r3, [pc, #24]	@ (8002374 <microros_allocate+0x40>)
 800235c:	601a      	str	r2, [r3, #0]
  return pvPortMallocMicroROS(size);
 800235e:	6878      	ldr	r0, [r7, #4]
 8002360:	f7fe fe42 	bl	8000fe8 <pvPortMallocMicroROS>
 8002364:	4603      	mov	r3, r0
}
 8002366:	4618      	mov	r0, r3
 8002368:	3708      	adds	r7, #8
 800236a:	46bd      	mov	sp, r7
 800236c:	bd80      	pop	{r7, pc}
 800236e:	bf00      	nop
 8002370:	20005940 	.word	0x20005940
 8002374:	20005944 	.word	0x20005944

08002378 <microros_deallocate>:

void microros_deallocate(void * pointer, void * state){
 8002378:	b580      	push	{r7, lr}
 800237a:	b082      	sub	sp, #8
 800237c:	af00      	add	r7, sp, #0
 800237e:	6078      	str	r0, [r7, #4]
 8002380:	6039      	str	r1, [r7, #0]
  (void) state;
  // printf("-- Free %d (prev: %d B)\n",getBlockSize(pointer), xPortGetFreeHeapSize());
  if (NULL != pointer){
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	2b00      	cmp	r3, #0
 8002386:	d00c      	beq.n	80023a2 <microros_deallocate+0x2a>
    usedMemory -= getBlockSize(pointer);
 8002388:	6878      	ldr	r0, [r7, #4]
 800238a:	f7fe ff51 	bl	8001230 <getBlockSize>
 800238e:	4603      	mov	r3, r0
 8002390:	4a06      	ldr	r2, [pc, #24]	@ (80023ac <microros_deallocate+0x34>)
 8002392:	6812      	ldr	r2, [r2, #0]
 8002394:	1ad3      	subs	r3, r2, r3
 8002396:	461a      	mov	r2, r3
 8002398:	4b04      	ldr	r3, [pc, #16]	@ (80023ac <microros_deallocate+0x34>)
 800239a:	601a      	str	r2, [r3, #0]
    vPortFreeMicroROS(pointer);
 800239c:	6878      	ldr	r0, [r7, #4]
 800239e:	f7fe feeb 	bl	8001178 <vPortFreeMicroROS>
  }
}
 80023a2:	bf00      	nop
 80023a4:	3708      	adds	r7, #8
 80023a6:	46bd      	mov	sp, r7
 80023a8:	bd80      	pop	{r7, pc}
 80023aa:	bf00      	nop
 80023ac:	20005944 	.word	0x20005944

080023b0 <microros_reallocate>:

void * microros_reallocate(void * pointer, size_t size, void * state){
 80023b0:	b580      	push	{r7, lr}
 80023b2:	b084      	sub	sp, #16
 80023b4:	af00      	add	r7, sp, #0
 80023b6:	60f8      	str	r0, [r7, #12]
 80023b8:	60b9      	str	r1, [r7, #8]
 80023ba:	607a      	str	r2, [r7, #4]
  (void) state;
  // printf("-- Realloc %d -> %d (prev: %d B)\n",getBlockSize(pointer),size, xPortGetFreeHeapSize());
  absoluteUsedMemory += size;
 80023bc:	4b15      	ldr	r3, [pc, #84]	@ (8002414 <microros_reallocate+0x64>)
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	461a      	mov	r2, r3
 80023c2:	68bb      	ldr	r3, [r7, #8]
 80023c4:	4413      	add	r3, r2
 80023c6:	461a      	mov	r2, r3
 80023c8:	4b12      	ldr	r3, [pc, #72]	@ (8002414 <microros_reallocate+0x64>)
 80023ca:	601a      	str	r2, [r3, #0]
  usedMemory += size;
 80023cc:	4b12      	ldr	r3, [pc, #72]	@ (8002418 <microros_reallocate+0x68>)
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	461a      	mov	r2, r3
 80023d2:	68bb      	ldr	r3, [r7, #8]
 80023d4:	4413      	add	r3, r2
 80023d6:	461a      	mov	r2, r3
 80023d8:	4b0f      	ldr	r3, [pc, #60]	@ (8002418 <microros_reallocate+0x68>)
 80023da:	601a      	str	r2, [r3, #0]
  if (NULL == pointer){
 80023dc:	68fb      	ldr	r3, [r7, #12]
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d104      	bne.n	80023ec <microros_reallocate+0x3c>
    return pvPortMallocMicroROS(size);
 80023e2:	68b8      	ldr	r0, [r7, #8]
 80023e4:	f7fe fe00 	bl	8000fe8 <pvPortMallocMicroROS>
 80023e8:	4603      	mov	r3, r0
 80023ea:	e00e      	b.n	800240a <microros_reallocate+0x5a>
  } else {
    usedMemory -= getBlockSize(pointer);
 80023ec:	68f8      	ldr	r0, [r7, #12]
 80023ee:	f7fe ff1f 	bl	8001230 <getBlockSize>
 80023f2:	4603      	mov	r3, r0
 80023f4:	4a08      	ldr	r2, [pc, #32]	@ (8002418 <microros_reallocate+0x68>)
 80023f6:	6812      	ldr	r2, [r2, #0]
 80023f8:	1ad3      	subs	r3, r2, r3
 80023fa:	461a      	mov	r2, r3
 80023fc:	4b06      	ldr	r3, [pc, #24]	@ (8002418 <microros_reallocate+0x68>)
 80023fe:	601a      	str	r2, [r3, #0]
    return pvPortReallocMicroROS(pointer,size);
 8002400:	68b9      	ldr	r1, [r7, #8]
 8002402:	68f8      	ldr	r0, [r7, #12]
 8002404:	f7fe ff32 	bl	800126c <pvPortReallocMicroROS>
 8002408:	4603      	mov	r3, r0
  }
}
 800240a:	4618      	mov	r0, r3
 800240c:	3710      	adds	r7, #16
 800240e:	46bd      	mov	sp, r7
 8002410:	bd80      	pop	{r7, pc}
 8002412:	bf00      	nop
 8002414:	20005940 	.word	0x20005940
 8002418:	20005944 	.word	0x20005944

0800241c <microros_zero_allocate>:

void * microros_zero_allocate(size_t number_of_elements, size_t size_of_element, void * state){
 800241c:	b580      	push	{r7, lr}
 800241e:	b084      	sub	sp, #16
 8002420:	af00      	add	r7, sp, #0
 8002422:	60f8      	str	r0, [r7, #12]
 8002424:	60b9      	str	r1, [r7, #8]
 8002426:	607a      	str	r2, [r7, #4]
  (void) state;
  // printf("-- Calloc %d x %d = %d -> (prev: %d B)\n",number_of_elements,size_of_element, number_of_elements*size_of_element, xPortGetFreeHeapSize());
  absoluteUsedMemory += number_of_elements*size_of_element;
 8002428:	68fb      	ldr	r3, [r7, #12]
 800242a:	68ba      	ldr	r2, [r7, #8]
 800242c:	fb02 f303 	mul.w	r3, r2, r3
 8002430:	4a0c      	ldr	r2, [pc, #48]	@ (8002464 <microros_zero_allocate+0x48>)
 8002432:	6812      	ldr	r2, [r2, #0]
 8002434:	4413      	add	r3, r2
 8002436:	461a      	mov	r2, r3
 8002438:	4b0a      	ldr	r3, [pc, #40]	@ (8002464 <microros_zero_allocate+0x48>)
 800243a:	601a      	str	r2, [r3, #0]
  usedMemory += number_of_elements*size_of_element;
 800243c:	68fb      	ldr	r3, [r7, #12]
 800243e:	68ba      	ldr	r2, [r7, #8]
 8002440:	fb02 f303 	mul.w	r3, r2, r3
 8002444:	4a08      	ldr	r2, [pc, #32]	@ (8002468 <microros_zero_allocate+0x4c>)
 8002446:	6812      	ldr	r2, [r2, #0]
 8002448:	4413      	add	r3, r2
 800244a:	461a      	mov	r2, r3
 800244c:	4b06      	ldr	r3, [pc, #24]	@ (8002468 <microros_zero_allocate+0x4c>)
 800244e:	601a      	str	r2, [r3, #0]
  return pvPortCallocMicroROS(number_of_elements,size_of_element);
 8002450:	68b9      	ldr	r1, [r7, #8]
 8002452:	68f8      	ldr	r0, [r7, #12]
 8002454:	f7fe ff37 	bl	80012c6 <pvPortCallocMicroROS>
 8002458:	4603      	mov	r3, r0
 800245a:	4618      	mov	r0, r3
 800245c:	3710      	adds	r7, #16
 800245e:	46bd      	mov	sp, r7
 8002460:	bd80      	pop	{r7, pc}
 8002462:	bf00      	nop
 8002464:	20005940 	.word	0x20005940
 8002468:	20005944 	.word	0x20005944
 800246c:	00000000 	.word	0x00000000

08002470 <UTILS_NanosecondsToTimespec>:
#define NANOSECONDS_PER_SECOND     ( 1000000000LL )                                /**< Nanoseconds per second. */
#define NANOSECONDS_PER_TICK       ( NANOSECONDS_PER_SECOND / configTICK_RATE_HZ ) /**< Nanoseconds per FreeRTOS tick. */

void UTILS_NanosecondsToTimespec( int64_t llSource,
                                  struct timespec * const pxDestination )
{
 8002470:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8002474:	b086      	sub	sp, #24
 8002476:	af00      	add	r7, sp, #0
 8002478:	e9c7 0102 	strd	r0, r1, [r7, #8]
 800247c:	607a      	str	r2, [r7, #4]
    long lCarrySec = 0;
 800247e:	2300      	movs	r3, #0
 8002480:	617b      	str	r3, [r7, #20]

    /* Convert to timespec. */
    pxDestination->tv_sec = ( time_t ) ( llSource / NANOSECONDS_PER_SECOND );
 8002482:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002486:	a320      	add	r3, pc, #128	@ (adr r3, 8002508 <UTILS_NanosecondsToTimespec+0x98>)
 8002488:	e9d3 2300 	ldrd	r2, r3, [r3]
 800248c:	f7fe fbe4 	bl	8000c58 <__aeabi_ldivmod>
 8002490:	4602      	mov	r2, r0
 8002492:	460b      	mov	r3, r1
 8002494:	6879      	ldr	r1, [r7, #4]
 8002496:	e9c1 2300 	strd	r2, r3, [r1]
    pxDestination->tv_nsec = ( long ) ( llSource % NANOSECONDS_PER_SECOND );
 800249a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800249e:	a31a      	add	r3, pc, #104	@ (adr r3, 8002508 <UTILS_NanosecondsToTimespec+0x98>)
 80024a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80024a4:	f7fe fbd8 	bl	8000c58 <__aeabi_ldivmod>
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	609a      	str	r2, [r3, #8]

    /* Subtract from tv_sec if tv_nsec < 0. */
    if( pxDestination->tv_nsec < 0L )
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	689b      	ldr	r3, [r3, #8]
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	da20      	bge.n	80024f6 <UTILS_NanosecondsToTimespec+0x86>
    {
        /* Compute the number of seconds to carry. */
        lCarrySec = ( pxDestination->tv_nsec / ( long ) NANOSECONDS_PER_SECOND ) + 1L;
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	689b      	ldr	r3, [r3, #8]
 80024b8:	4a11      	ldr	r2, [pc, #68]	@ (8002500 <UTILS_NanosecondsToTimespec+0x90>)
 80024ba:	fb82 1203 	smull	r1, r2, r2, r3
 80024be:	1712      	asrs	r2, r2, #28
 80024c0:	17db      	asrs	r3, r3, #31
 80024c2:	1ad3      	subs	r3, r2, r3
 80024c4:	3301      	adds	r3, #1
 80024c6:	617b      	str	r3, [r7, #20]

        pxDestination->tv_sec -= ( time_t ) ( lCarrySec );
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80024ce:	6979      	ldr	r1, [r7, #20]
 80024d0:	17c8      	asrs	r0, r1, #31
 80024d2:	460c      	mov	r4, r1
 80024d4:	4605      	mov	r5, r0
 80024d6:	ebb2 0804 	subs.w	r8, r2, r4
 80024da:	eb63 0905 	sbc.w	r9, r3, r5
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	e9c3 8900 	strd	r8, r9, [r3]
        pxDestination->tv_nsec += lCarrySec * ( long ) NANOSECONDS_PER_SECOND;
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	689a      	ldr	r2, [r3, #8]
 80024e8:	697b      	ldr	r3, [r7, #20]
 80024ea:	4906      	ldr	r1, [pc, #24]	@ (8002504 <UTILS_NanosecondsToTimespec+0x94>)
 80024ec:	fb01 f303 	mul.w	r3, r1, r3
 80024f0:	441a      	add	r2, r3
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	609a      	str	r2, [r3, #8]
    }
}
 80024f6:	bf00      	nop
 80024f8:	3718      	adds	r7, #24
 80024fa:	46bd      	mov	sp, r7
 80024fc:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8002500:	44b82fa1 	.word	0x44b82fa1
 8002504:	3b9aca00 	.word	0x3b9aca00
 8002508:	3b9aca00 	.word	0x3b9aca00
 800250c:	00000000 	.word	0x00000000

08002510 <clock_gettime>:

int clock_gettime( int clock_id,
                   struct timespec * tp )
{
 8002510:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002514:	b08e      	sub	sp, #56	@ 0x38
 8002516:	af00      	add	r7, sp, #0
 8002518:	6278      	str	r0, [r7, #36]	@ 0x24
 800251a:	6239      	str	r1, [r7, #32]
    TimeOut_t xCurrentTime = { 0 };
 800251c:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 8002520:	2300      	movs	r3, #0
 8002522:	6013      	str	r3, [r2, #0]
 8002524:	6053      	str	r3, [r2, #4]

    /* Intermediate variable used to convert TimeOut_t to struct timespec.
     * Also used to detect overflow issues. It must be unsigned because the
     * behavior of signed integer overflow is undefined. */
    uint64_t ullTickCount = 0ULL;
 8002526:	f04f 0200 	mov.w	r2, #0
 800252a:	f04f 0300 	mov.w	r3, #0
 800252e:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
    /* Silence warnings about unused parameters. */
    ( void ) clock_id;

    /* Get the current tick count and overflow count. vTaskSetTimeOutState()
     * is used to get these values because they are both static in tasks.c. */
    vTaskSetTimeOutState( &xCurrentTime );
 8002532:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8002536:	4618      	mov	r0, r3
 8002538:	f009 fd00 	bl	800bf3c <vTaskSetTimeOutState>

    /* Adjust the tick count for the number of times a TickType_t has overflowed.
     * portMAX_DELAY should be the maximum value of a TickType_t. */
    ullTickCount = ( uint64_t ) ( xCurrentTime.xOverflowCount ) << ( sizeof( TickType_t ) * 8 );
 800253c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800253e:	17da      	asrs	r2, r3, #31
 8002540:	61bb      	str	r3, [r7, #24]
 8002542:	61fa      	str	r2, [r7, #28]
 8002544:	f04f 0200 	mov.w	r2, #0
 8002548:	f04f 0300 	mov.w	r3, #0
 800254c:	69b9      	ldr	r1, [r7, #24]
 800254e:	000b      	movs	r3, r1
 8002550:	2200      	movs	r2, #0
 8002552:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30

    /* Add the current tick count. */
    ullTickCount += xCurrentTime.xTimeOnEntering;
 8002556:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002558:	2200      	movs	r2, #0
 800255a:	461c      	mov	r4, r3
 800255c:	4615      	mov	r5, r2
 800255e:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 8002562:	1911      	adds	r1, r2, r4
 8002564:	60b9      	str	r1, [r7, #8]
 8002566:	416b      	adcs	r3, r5
 8002568:	60fb      	str	r3, [r7, #12]
 800256a:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 800256e:	e9c7 340c 	strd	r3, r4, [r7, #48]	@ 0x30

    /* Convert ullTickCount to timespec. */
    UTILS_NanosecondsToTimespec( ( int64_t ) ullTickCount * NANOSECONDS_PER_TICK, tp );
 8002572:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 8002576:	4602      	mov	r2, r0
 8002578:	460b      	mov	r3, r1
 800257a:	f04f 0400 	mov.w	r4, #0
 800257e:	f04f 0500 	mov.w	r5, #0
 8002582:	015d      	lsls	r5, r3, #5
 8002584:	ea45 65d2 	orr.w	r5, r5, r2, lsr #27
 8002588:	0154      	lsls	r4, r2, #5
 800258a:	4622      	mov	r2, r4
 800258c:	462b      	mov	r3, r5
 800258e:	ebb2 0800 	subs.w	r8, r2, r0
 8002592:	eb63 0901 	sbc.w	r9, r3, r1
 8002596:	f04f 0200 	mov.w	r2, #0
 800259a:	f04f 0300 	mov.w	r3, #0
 800259e:	ea4f 2349 	mov.w	r3, r9, lsl #9
 80025a2:	ea43 53d8 	orr.w	r3, r3, r8, lsr #23
 80025a6:	ea4f 2248 	mov.w	r2, r8, lsl #9
 80025aa:	4690      	mov	r8, r2
 80025ac:	4699      	mov	r9, r3
 80025ae:	eb18 0a00 	adds.w	sl, r8, r0
 80025b2:	eb49 0b01 	adc.w	fp, r9, r1
 80025b6:	f04f 0200 	mov.w	r2, #0
 80025ba:	f04f 0300 	mov.w	r3, #0
 80025be:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80025c2:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80025c6:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80025ca:	ebb2 040a 	subs.w	r4, r2, sl
 80025ce:	603c      	str	r4, [r7, #0]
 80025d0:	eb63 030b 	sbc.w	r3, r3, fp
 80025d4:	607b      	str	r3, [r7, #4]
 80025d6:	e9d7 4500 	ldrd	r4, r5, [r7]
 80025da:	4623      	mov	r3, r4
 80025dc:	181b      	adds	r3, r3, r0
 80025de:	613b      	str	r3, [r7, #16]
 80025e0:	462b      	mov	r3, r5
 80025e2:	eb41 0303 	adc.w	r3, r1, r3
 80025e6:	617b      	str	r3, [r7, #20]
 80025e8:	6a3a      	ldr	r2, [r7, #32]
 80025ea:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80025ee:	f7ff ff3f 	bl	8002470 <UTILS_NanosecondsToTimespec>

    return 0;
 80025f2:	2300      	movs	r3, #0
 80025f4:	4618      	mov	r0, r3
 80025f6:	3738      	adds	r7, #56	@ 0x38
 80025f8:	46bd      	mov	sp, r7
 80025fa:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
	...

08002600 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002600:	b580      	push	{r7, lr}
 8002602:	b082      	sub	sp, #8
 8002604:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002606:	4b11      	ldr	r3, [pc, #68]	@ (800264c <HAL_MspInit+0x4c>)
 8002608:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800260a:	4a10      	ldr	r2, [pc, #64]	@ (800264c <HAL_MspInit+0x4c>)
 800260c:	f043 0301 	orr.w	r3, r3, #1
 8002610:	6613      	str	r3, [r2, #96]	@ 0x60
 8002612:	4b0e      	ldr	r3, [pc, #56]	@ (800264c <HAL_MspInit+0x4c>)
 8002614:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002616:	f003 0301 	and.w	r3, r3, #1
 800261a:	607b      	str	r3, [r7, #4]
 800261c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800261e:	4b0b      	ldr	r3, [pc, #44]	@ (800264c <HAL_MspInit+0x4c>)
 8002620:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002622:	4a0a      	ldr	r2, [pc, #40]	@ (800264c <HAL_MspInit+0x4c>)
 8002624:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002628:	6593      	str	r3, [r2, #88]	@ 0x58
 800262a:	4b08      	ldr	r3, [pc, #32]	@ (800264c <HAL_MspInit+0x4c>)
 800262c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800262e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002632:	603b      	str	r3, [r7, #0]
 8002634:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8002636:	2200      	movs	r2, #0
 8002638:	210f      	movs	r1, #15
 800263a:	f06f 0001 	mvn.w	r0, #1
 800263e:	f000 fe1b 	bl	8003278 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002642:	bf00      	nop
 8002644:	3708      	adds	r7, #8
 8002646:	46bd      	mov	sp, r7
 8002648:	bd80      	pop	{r7, pc}
 800264a:	bf00      	nop
 800264c:	40021000 	.word	0x40021000

08002650 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002650:	b580      	push	{r7, lr}
 8002652:	b08e      	sub	sp, #56	@ 0x38
 8002654:	af00      	add	r7, sp, #0
 8002656:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 8002658:	2300      	movs	r3, #0
 800265a:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 800265e:	4b34      	ldr	r3, [pc, #208]	@ (8002730 <HAL_InitTick+0xe0>)
 8002660:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002662:	4a33      	ldr	r2, [pc, #204]	@ (8002730 <HAL_InitTick+0xe0>)
 8002664:	f043 0310 	orr.w	r3, r3, #16
 8002668:	6593      	str	r3, [r2, #88]	@ 0x58
 800266a:	4b31      	ldr	r3, [pc, #196]	@ (8002730 <HAL_InitTick+0xe0>)
 800266c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800266e:	f003 0310 	and.w	r3, r3, #16
 8002672:	60fb      	str	r3, [r7, #12]
 8002674:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002676:	f107 0210 	add.w	r2, r7, #16
 800267a:	f107 0314 	add.w	r3, r7, #20
 800267e:	4611      	mov	r1, r2
 8002680:	4618      	mov	r0, r3
 8002682:	f004 f985 	bl	8006990 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8002686:	6a3b      	ldr	r3, [r7, #32]
 8002688:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 800268a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800268c:	2b00      	cmp	r3, #0
 800268e:	d103      	bne.n	8002698 <HAL_InitTick+0x48>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8002690:	f004 f952 	bl	8006938 <HAL_RCC_GetPCLK1Freq>
 8002694:	6378      	str	r0, [r7, #52]	@ 0x34
 8002696:	e004      	b.n	80026a2 <HAL_InitTick+0x52>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8002698:	f004 f94e 	bl	8006938 <HAL_RCC_GetPCLK1Freq>
 800269c:	4603      	mov	r3, r0
 800269e:	005b      	lsls	r3, r3, #1
 80026a0:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80026a2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80026a4:	4a23      	ldr	r2, [pc, #140]	@ (8002734 <HAL_InitTick+0xe4>)
 80026a6:	fba2 2303 	umull	r2, r3, r2, r3
 80026aa:	0c9b      	lsrs	r3, r3, #18
 80026ac:	3b01      	subs	r3, #1
 80026ae:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 80026b0:	4b21      	ldr	r3, [pc, #132]	@ (8002738 <HAL_InitTick+0xe8>)
 80026b2:	4a22      	ldr	r2, [pc, #136]	@ (800273c <HAL_InitTick+0xec>)
 80026b4:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 80026b6:	4b20      	ldr	r3, [pc, #128]	@ (8002738 <HAL_InitTick+0xe8>)
 80026b8:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80026bc:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 80026be:	4a1e      	ldr	r2, [pc, #120]	@ (8002738 <HAL_InitTick+0xe8>)
 80026c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80026c2:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 80026c4:	4b1c      	ldr	r3, [pc, #112]	@ (8002738 <HAL_InitTick+0xe8>)
 80026c6:	2200      	movs	r2, #0
 80026c8:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80026ca:	4b1b      	ldr	r3, [pc, #108]	@ (8002738 <HAL_InitTick+0xe8>)
 80026cc:	2200      	movs	r2, #0
 80026ce:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80026d0:	4b19      	ldr	r3, [pc, #100]	@ (8002738 <HAL_InitTick+0xe8>)
 80026d2:	2200      	movs	r2, #0
 80026d4:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 80026d6:	4818      	ldr	r0, [pc, #96]	@ (8002738 <HAL_InitTick+0xe8>)
 80026d8:	f004 fce4 	bl	80070a4 <HAL_TIM_Base_Init>
 80026dc:	4603      	mov	r3, r0
 80026de:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 80026e2:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d11b      	bne.n	8002722 <HAL_InitTick+0xd2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 80026ea:	4813      	ldr	r0, [pc, #76]	@ (8002738 <HAL_InitTick+0xe8>)
 80026ec:	f004 fd88 	bl	8007200 <HAL_TIM_Base_Start_IT>
 80026f0:	4603      	mov	r3, r0
 80026f2:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 80026f6:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d111      	bne.n	8002722 <HAL_InitTick+0xd2>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80026fe:	2036      	movs	r0, #54	@ 0x36
 8002700:	f000 fdd6 	bl	80032b0 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	2b0f      	cmp	r3, #15
 8002708:	d808      	bhi.n	800271c <HAL_InitTick+0xcc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 800270a:	2200      	movs	r2, #0
 800270c:	6879      	ldr	r1, [r7, #4]
 800270e:	2036      	movs	r0, #54	@ 0x36
 8002710:	f000 fdb2 	bl	8003278 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002714:	4a0a      	ldr	r2, [pc, #40]	@ (8002740 <HAL_InitTick+0xf0>)
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	6013      	str	r3, [r2, #0]
 800271a:	e002      	b.n	8002722 <HAL_InitTick+0xd2>
      }
      else
      {
        status = HAL_ERROR;
 800271c:	2301      	movs	r3, #1
 800271e:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8002722:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 8002726:	4618      	mov	r0, r3
 8002728:	3738      	adds	r7, #56	@ 0x38
 800272a:	46bd      	mov	sp, r7
 800272c:	bd80      	pop	{r7, pc}
 800272e:	bf00      	nop
 8002730:	40021000 	.word	0x40021000
 8002734:	431bde83 	.word	0x431bde83
 8002738:	20005948 	.word	0x20005948
 800273c:	40001000 	.word	0x40001000
 8002740:	20000044 	.word	0x20000044

08002744 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002744:	b480      	push	{r7}
 8002746:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002748:	bf00      	nop
 800274a:	e7fd      	b.n	8002748 <NMI_Handler+0x4>

0800274c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800274c:	b480      	push	{r7}
 800274e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002750:	bf00      	nop
 8002752:	e7fd      	b.n	8002750 <HardFault_Handler+0x4>

08002754 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002754:	b480      	push	{r7}
 8002756:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002758:	bf00      	nop
 800275a:	e7fd      	b.n	8002758 <MemManage_Handler+0x4>

0800275c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800275c:	b480      	push	{r7}
 800275e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002760:	bf00      	nop
 8002762:	e7fd      	b.n	8002760 <BusFault_Handler+0x4>

08002764 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002764:	b480      	push	{r7}
 8002766:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002768:	bf00      	nop
 800276a:	e7fd      	b.n	8002768 <UsageFault_Handler+0x4>

0800276c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800276c:	b480      	push	{r7}
 800276e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002770:	bf00      	nop
 8002772:	46bd      	mov	sp, r7
 8002774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002778:	4770      	bx	lr
	...

0800277c <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 800277c:	b580      	push	{r7, lr}
 800277e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8002780:	4802      	ldr	r0, [pc, #8]	@ (800278c <DMA1_Channel6_IRQHandler+0x10>)
 8002782:	f000 ff3a 	bl	80035fa <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 8002786:	bf00      	nop
 8002788:	bd80      	pop	{r7, pc}
 800278a:	bf00      	nop
 800278c:	20005b08 	.word	0x20005b08

08002790 <DMA1_Channel7_IRQHandler>:

/**
  * @brief This function handles DMA1 channel7 global interrupt.
  */
void DMA1_Channel7_IRQHandler(void)
{
 8002790:	b580      	push	{r7, lr}
 8002792:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel7_IRQn 0 */

  /* USER CODE END DMA1_Channel7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8002794:	4802      	ldr	r0, [pc, #8]	@ (80027a0 <DMA1_Channel7_IRQHandler+0x10>)
 8002796:	f000 ff30 	bl	80035fa <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel7_IRQn 1 */

  /* USER CODE END DMA1_Channel7_IRQn 1 */
}
 800279a:	bf00      	nop
 800279c:	bd80      	pop	{r7, pc}
 800279e:	bf00      	nop
 80027a0:	20005b50 	.word	0x20005b50

080027a4 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 80027a4:	b580      	push	{r7, lr}
 80027a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 80027a8:	4802      	ldr	r0, [pc, #8]	@ (80027b4 <I2C1_EV_IRQHandler+0x10>)
 80027aa:	f001 fd39 	bl	8004220 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 80027ae:	bf00      	nop
 80027b0:	bd80      	pop	{r7, pc}
 80027b2:	bf00      	nop
 80027b4:	20005854 	.word	0x20005854

080027b8 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80027b8:	b580      	push	{r7, lr}
 80027ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80027bc:	4802      	ldr	r0, [pc, #8]	@ (80027c8 <USART2_IRQHandler+0x10>)
 80027be:	f006 f88b 	bl	80088d8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80027c2:	bf00      	nop
 80027c4:	bd80      	pop	{r7, pc}
 80027c6:	bf00      	nop
 80027c8:	20005a80 	.word	0x20005a80

080027cc <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 and channel2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80027cc:	b580      	push	{r7, lr}
 80027ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80027d0:	4802      	ldr	r0, [pc, #8]	@ (80027dc <TIM6_DAC_IRQHandler+0x10>)
 80027d2:	f004 ffd3 	bl	800777c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80027d6:	bf00      	nop
 80027d8:	bd80      	pop	{r7, pc}
 80027da:	bf00      	nop
 80027dc:	20005948 	.word	0x20005948

080027e0 <DMA2_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA2 channel6 global interrupt.
  */
void DMA2_Channel6_IRQHandler(void)
{
 80027e0:	b580      	push	{r7, lr}
 80027e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Channel6_IRQn 0 */

  /* USER CODE END DMA2_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 80027e4:	4802      	ldr	r0, [pc, #8]	@ (80027f0 <DMA2_Channel6_IRQHandler+0x10>)
 80027e6:	f000 ff08 	bl	80035fa <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Channel6_IRQn 1 */

  /* USER CODE END DMA2_Channel6_IRQn 1 */
}
 80027ea:	bf00      	nop
 80027ec:	bd80      	pop	{r7, pc}
 80027ee:	bf00      	nop
 80027f0:	200058a8 	.word	0x200058a8

080027f4 <DMA2_Channel7_IRQHandler>:

/**
  * @brief This function handles DMA2 channel7 global interrupt.
  */
void DMA2_Channel7_IRQHandler(void)
{
 80027f4:	b580      	push	{r7, lr}
 80027f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Channel7_IRQn 0 */

  /* USER CODE END DMA2_Channel7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_tx);
 80027f8:	4802      	ldr	r0, [pc, #8]	@ (8002804 <DMA2_Channel7_IRQHandler+0x10>)
 80027fa:	f000 fefe 	bl	80035fa <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Channel7_IRQn 1 */

  /* USER CODE END DMA2_Channel7_IRQn 1 */
}
 80027fe:	bf00      	nop
 8002800:	bd80      	pop	{r7, pc}
 8002802:	bf00      	nop
 8002804:	200058f0 	.word	0x200058f0

08002808 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002808:	b480      	push	{r7}
 800280a:	af00      	add	r7, sp, #0
  return 1;
 800280c:	2301      	movs	r3, #1
}
 800280e:	4618      	mov	r0, r3
 8002810:	46bd      	mov	sp, r7
 8002812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002816:	4770      	bx	lr

08002818 <_kill>:

int _kill(int pid, int sig)
{
 8002818:	b580      	push	{r7, lr}
 800281a:	b082      	sub	sp, #8
 800281c:	af00      	add	r7, sp, #0
 800281e:	6078      	str	r0, [r7, #4]
 8002820:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002822:	f017 faa1 	bl	8019d68 <__errno>
 8002826:	4603      	mov	r3, r0
 8002828:	2216      	movs	r2, #22
 800282a:	601a      	str	r2, [r3, #0]
  return -1;
 800282c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8002830:	4618      	mov	r0, r3
 8002832:	3708      	adds	r7, #8
 8002834:	46bd      	mov	sp, r7
 8002836:	bd80      	pop	{r7, pc}

08002838 <_exit>:

void _exit (int status)
{
 8002838:	b580      	push	{r7, lr}
 800283a:	b082      	sub	sp, #8
 800283c:	af00      	add	r7, sp, #0
 800283e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002840:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8002844:	6878      	ldr	r0, [r7, #4]
 8002846:	f7ff ffe7 	bl	8002818 <_kill>
  while (1) {}    /* Make sure we hang here */
 800284a:	bf00      	nop
 800284c:	e7fd      	b.n	800284a <_exit+0x12>

0800284e <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800284e:	b580      	push	{r7, lr}
 8002850:	b086      	sub	sp, #24
 8002852:	af00      	add	r7, sp, #0
 8002854:	60f8      	str	r0, [r7, #12]
 8002856:	60b9      	str	r1, [r7, #8]
 8002858:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800285a:	2300      	movs	r3, #0
 800285c:	617b      	str	r3, [r7, #20]
 800285e:	e00a      	b.n	8002876 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002860:	f3af 8000 	nop.w
 8002864:	4601      	mov	r1, r0
 8002866:	68bb      	ldr	r3, [r7, #8]
 8002868:	1c5a      	adds	r2, r3, #1
 800286a:	60ba      	str	r2, [r7, #8]
 800286c:	b2ca      	uxtb	r2, r1
 800286e:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002870:	697b      	ldr	r3, [r7, #20]
 8002872:	3301      	adds	r3, #1
 8002874:	617b      	str	r3, [r7, #20]
 8002876:	697a      	ldr	r2, [r7, #20]
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	429a      	cmp	r2, r3
 800287c:	dbf0      	blt.n	8002860 <_read+0x12>
  }

  return len;
 800287e:	687b      	ldr	r3, [r7, #4]
}
 8002880:	4618      	mov	r0, r3
 8002882:	3718      	adds	r7, #24
 8002884:	46bd      	mov	sp, r7
 8002886:	bd80      	pop	{r7, pc}

08002888 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002888:	b580      	push	{r7, lr}
 800288a:	b086      	sub	sp, #24
 800288c:	af00      	add	r7, sp, #0
 800288e:	60f8      	str	r0, [r7, #12]
 8002890:	60b9      	str	r1, [r7, #8]
 8002892:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002894:	2300      	movs	r3, #0
 8002896:	617b      	str	r3, [r7, #20]
 8002898:	e009      	b.n	80028ae <_write+0x26>
  {
    __io_putchar(*ptr++);
 800289a:	68bb      	ldr	r3, [r7, #8]
 800289c:	1c5a      	adds	r2, r3, #1
 800289e:	60ba      	str	r2, [r7, #8]
 80028a0:	781b      	ldrb	r3, [r3, #0]
 80028a2:	4618      	mov	r0, r3
 80028a4:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80028a8:	697b      	ldr	r3, [r7, #20]
 80028aa:	3301      	adds	r3, #1
 80028ac:	617b      	str	r3, [r7, #20]
 80028ae:	697a      	ldr	r2, [r7, #20]
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	429a      	cmp	r2, r3
 80028b4:	dbf1      	blt.n	800289a <_write+0x12>
  }
  return len;
 80028b6:	687b      	ldr	r3, [r7, #4]
}
 80028b8:	4618      	mov	r0, r3
 80028ba:	3718      	adds	r7, #24
 80028bc:	46bd      	mov	sp, r7
 80028be:	bd80      	pop	{r7, pc}

080028c0 <_close>:

int _close(int file)
{
 80028c0:	b480      	push	{r7}
 80028c2:	b083      	sub	sp, #12
 80028c4:	af00      	add	r7, sp, #0
 80028c6:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80028c8:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 80028cc:	4618      	mov	r0, r3
 80028ce:	370c      	adds	r7, #12
 80028d0:	46bd      	mov	sp, r7
 80028d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028d6:	4770      	bx	lr

080028d8 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80028d8:	b480      	push	{r7}
 80028da:	b083      	sub	sp, #12
 80028dc:	af00      	add	r7, sp, #0
 80028de:	6078      	str	r0, [r7, #4]
 80028e0:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80028e2:	683b      	ldr	r3, [r7, #0]
 80028e4:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80028e8:	605a      	str	r2, [r3, #4]
  return 0;
 80028ea:	2300      	movs	r3, #0
}
 80028ec:	4618      	mov	r0, r3
 80028ee:	370c      	adds	r7, #12
 80028f0:	46bd      	mov	sp, r7
 80028f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028f6:	4770      	bx	lr

080028f8 <_isatty>:

int _isatty(int file)
{
 80028f8:	b480      	push	{r7}
 80028fa:	b083      	sub	sp, #12
 80028fc:	af00      	add	r7, sp, #0
 80028fe:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002900:	2301      	movs	r3, #1
}
 8002902:	4618      	mov	r0, r3
 8002904:	370c      	adds	r7, #12
 8002906:	46bd      	mov	sp, r7
 8002908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800290c:	4770      	bx	lr

0800290e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800290e:	b480      	push	{r7}
 8002910:	b085      	sub	sp, #20
 8002912:	af00      	add	r7, sp, #0
 8002914:	60f8      	str	r0, [r7, #12]
 8002916:	60b9      	str	r1, [r7, #8]
 8002918:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800291a:	2300      	movs	r3, #0
}
 800291c:	4618      	mov	r0, r3
 800291e:	3714      	adds	r7, #20
 8002920:	46bd      	mov	sp, r7
 8002922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002926:	4770      	bx	lr

08002928 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002928:	b580      	push	{r7, lr}
 800292a:	b086      	sub	sp, #24
 800292c:	af00      	add	r7, sp, #0
 800292e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002930:	4a14      	ldr	r2, [pc, #80]	@ (8002984 <_sbrk+0x5c>)
 8002932:	4b15      	ldr	r3, [pc, #84]	@ (8002988 <_sbrk+0x60>)
 8002934:	1ad3      	subs	r3, r2, r3
 8002936:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002938:	697b      	ldr	r3, [r7, #20]
 800293a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800293c:	4b13      	ldr	r3, [pc, #76]	@ (800298c <_sbrk+0x64>)
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	2b00      	cmp	r3, #0
 8002942:	d102      	bne.n	800294a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002944:	4b11      	ldr	r3, [pc, #68]	@ (800298c <_sbrk+0x64>)
 8002946:	4a12      	ldr	r2, [pc, #72]	@ (8002990 <_sbrk+0x68>)
 8002948:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800294a:	4b10      	ldr	r3, [pc, #64]	@ (800298c <_sbrk+0x64>)
 800294c:	681a      	ldr	r2, [r3, #0]
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	4413      	add	r3, r2
 8002952:	693a      	ldr	r2, [r7, #16]
 8002954:	429a      	cmp	r2, r3
 8002956:	d207      	bcs.n	8002968 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002958:	f017 fa06 	bl	8019d68 <__errno>
 800295c:	4603      	mov	r3, r0
 800295e:	220c      	movs	r2, #12
 8002960:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002962:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8002966:	e009      	b.n	800297c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002968:	4b08      	ldr	r3, [pc, #32]	@ (800298c <_sbrk+0x64>)
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800296e:	4b07      	ldr	r3, [pc, #28]	@ (800298c <_sbrk+0x64>)
 8002970:	681a      	ldr	r2, [r3, #0]
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	4413      	add	r3, r2
 8002976:	4a05      	ldr	r2, [pc, #20]	@ (800298c <_sbrk+0x64>)
 8002978:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800297a:	68fb      	ldr	r3, [r7, #12]
}
 800297c:	4618      	mov	r0, r3
 800297e:	3718      	adds	r7, #24
 8002980:	46bd      	mov	sp, r7
 8002982:	bd80      	pop	{r7, pc}
 8002984:	20010000 	.word	0x20010000
 8002988:	00000400 	.word	0x00000400
 800298c:	20005998 	.word	0x20005998
 8002990:	2000c248 	.word	0x2000c248

08002994 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8002994:	b480      	push	{r7}
 8002996:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8002998:	4b06      	ldr	r3, [pc, #24]	@ (80029b4 <SystemInit+0x20>)
 800299a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800299e:	4a05      	ldr	r2, [pc, #20]	@ (80029b4 <SystemInit+0x20>)
 80029a0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80029a4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 80029a8:	bf00      	nop
 80029aa:	46bd      	mov	sp, r7
 80029ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029b0:	4770      	bx	lr
 80029b2:	bf00      	nop
 80029b4:	e000ed00 	.word	0xe000ed00

080029b8 <MX_TIM1_Init>:
TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim15;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 80029b8:	b580      	push	{r7, lr}
 80029ba:	b08c      	sub	sp, #48	@ 0x30
 80029bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80029be:	f107 030c 	add.w	r3, r7, #12
 80029c2:	2224      	movs	r2, #36	@ 0x24
 80029c4:	2100      	movs	r1, #0
 80029c6:	4618      	mov	r0, r3
 80029c8:	f017 f8e4 	bl	8019b94 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80029cc:	463b      	mov	r3, r7
 80029ce:	2200      	movs	r2, #0
 80029d0:	601a      	str	r2, [r3, #0]
 80029d2:	605a      	str	r2, [r3, #4]
 80029d4:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80029d6:	4b23      	ldr	r3, [pc, #140]	@ (8002a64 <MX_TIM1_Init+0xac>)
 80029d8:	4a23      	ldr	r2, [pc, #140]	@ (8002a68 <MX_TIM1_Init+0xb0>)
 80029da:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80029dc:	4b21      	ldr	r3, [pc, #132]	@ (8002a64 <MX_TIM1_Init+0xac>)
 80029de:	2200      	movs	r2, #0
 80029e0:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80029e2:	4b20      	ldr	r3, [pc, #128]	@ (8002a64 <MX_TIM1_Init+0xac>)
 80029e4:	2200      	movs	r2, #0
 80029e6:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 80029e8:	4b1e      	ldr	r3, [pc, #120]	@ (8002a64 <MX_TIM1_Init+0xac>)
 80029ea:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80029ee:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80029f0:	4b1c      	ldr	r3, [pc, #112]	@ (8002a64 <MX_TIM1_Init+0xac>)
 80029f2:	2200      	movs	r2, #0
 80029f4:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80029f6:	4b1b      	ldr	r3, [pc, #108]	@ (8002a64 <MX_TIM1_Init+0xac>)
 80029f8:	2200      	movs	r2, #0
 80029fa:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80029fc:	4b19      	ldr	r3, [pc, #100]	@ (8002a64 <MX_TIM1_Init+0xac>)
 80029fe:	2200      	movs	r2, #0
 8002a00:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8002a02:	2303      	movs	r3, #3
 8002a04:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8002a06:	2300      	movs	r3, #0
 8002a08:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8002a0a:	2301      	movs	r3, #1
 8002a0c:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8002a0e:	2300      	movs	r3, #0
 8002a10:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8002a12:	2300      	movs	r3, #0
 8002a14:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8002a16:	2300      	movs	r3, #0
 8002a18:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8002a1a:	2301      	movs	r3, #1
 8002a1c:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8002a1e:	2300      	movs	r3, #0
 8002a20:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8002a22:	2300      	movs	r3, #0
 8002a24:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 8002a26:	f107 030c 	add.w	r3, r7, #12
 8002a2a:	4619      	mov	r1, r3
 8002a2c:	480d      	ldr	r0, [pc, #52]	@ (8002a64 <MX_TIM1_Init+0xac>)
 8002a2e:	f004 fd71 	bl	8007514 <HAL_TIM_Encoder_Init>
 8002a32:	4603      	mov	r3, r0
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	d001      	beq.n	8002a3c <MX_TIM1_Init+0x84>
  {
    Error_Handler();
 8002a38:	f7ff fc76 	bl	8002328 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002a3c:	2300      	movs	r3, #0
 8002a3e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8002a40:	2300      	movs	r3, #0
 8002a42:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002a44:	2300      	movs	r3, #0
 8002a46:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8002a48:	463b      	mov	r3, r7
 8002a4a:	4619      	mov	r1, r3
 8002a4c:	4805      	ldr	r0, [pc, #20]	@ (8002a64 <MX_TIM1_Init+0xac>)
 8002a4e:	f005 fc79 	bl	8008344 <HAL_TIMEx_MasterConfigSynchronization>
 8002a52:	4603      	mov	r3, r0
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	d001      	beq.n	8002a5c <MX_TIM1_Init+0xa4>
  {
    Error_Handler();
 8002a58:	f7ff fc66 	bl	8002328 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8002a5c:	bf00      	nop
 8002a5e:	3730      	adds	r7, #48	@ 0x30
 8002a60:	46bd      	mov	sp, r7
 8002a62:	bd80      	pop	{r7, pc}
 8002a64:	2000599c 	.word	0x2000599c
 8002a68:	40012c00 	.word	0x40012c00

08002a6c <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8002a6c:	b580      	push	{r7, lr}
 8002a6e:	b08c      	sub	sp, #48	@ 0x30
 8002a70:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8002a72:	f107 030c 	add.w	r3, r7, #12
 8002a76:	2224      	movs	r2, #36	@ 0x24
 8002a78:	2100      	movs	r1, #0
 8002a7a:	4618      	mov	r0, r3
 8002a7c:	f017 f88a 	bl	8019b94 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002a80:	463b      	mov	r3, r7
 8002a82:	2200      	movs	r2, #0
 8002a84:	601a      	str	r2, [r3, #0]
 8002a86:	605a      	str	r2, [r3, #4]
 8002a88:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002a8a:	4b21      	ldr	r3, [pc, #132]	@ (8002b10 <MX_TIM2_Init+0xa4>)
 8002a8c:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8002a90:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8002a92:	4b1f      	ldr	r3, [pc, #124]	@ (8002b10 <MX_TIM2_Init+0xa4>)
 8002a94:	2200      	movs	r2, #0
 8002a96:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002a98:	4b1d      	ldr	r3, [pc, #116]	@ (8002b10 <MX_TIM2_Init+0xa4>)
 8002a9a:	2200      	movs	r2, #0
 8002a9c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 8002a9e:	4b1c      	ldr	r3, [pc, #112]	@ (8002b10 <MX_TIM2_Init+0xa4>)
 8002aa0:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002aa4:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002aa6:	4b1a      	ldr	r3, [pc, #104]	@ (8002b10 <MX_TIM2_Init+0xa4>)
 8002aa8:	2200      	movs	r2, #0
 8002aaa:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002aac:	4b18      	ldr	r3, [pc, #96]	@ (8002b10 <MX_TIM2_Init+0xa4>)
 8002aae:	2200      	movs	r2, #0
 8002ab0:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8002ab2:	2301      	movs	r3, #1
 8002ab4:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8002ab6:	2300      	movs	r3, #0
 8002ab8:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8002aba:	2301      	movs	r3, #1
 8002abc:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8002abe:	2300      	movs	r3, #0
 8002ac0:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8002ac2:	2300      	movs	r3, #0
 8002ac4:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8002ac6:	2300      	movs	r3, #0
 8002ac8:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8002aca:	2301      	movs	r3, #1
 8002acc:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8002ace:	2300      	movs	r3, #0
 8002ad0:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8002ad2:	2300      	movs	r3, #0
 8002ad4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8002ad6:	f107 030c 	add.w	r3, r7, #12
 8002ada:	4619      	mov	r1, r3
 8002adc:	480c      	ldr	r0, [pc, #48]	@ (8002b10 <MX_TIM2_Init+0xa4>)
 8002ade:	f004 fd19 	bl	8007514 <HAL_TIM_Encoder_Init>
 8002ae2:	4603      	mov	r3, r0
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	d001      	beq.n	8002aec <MX_TIM2_Init+0x80>
  {
    Error_Handler();
 8002ae8:	f7ff fc1e 	bl	8002328 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002aec:	2300      	movs	r3, #0
 8002aee:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002af0:	2300      	movs	r3, #0
 8002af2:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002af4:	463b      	mov	r3, r7
 8002af6:	4619      	mov	r1, r3
 8002af8:	4805      	ldr	r0, [pc, #20]	@ (8002b10 <MX_TIM2_Init+0xa4>)
 8002afa:	f005 fc23 	bl	8008344 <HAL_TIMEx_MasterConfigSynchronization>
 8002afe:	4603      	mov	r3, r0
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	d001      	beq.n	8002b08 <MX_TIM2_Init+0x9c>
  {
    Error_Handler();
 8002b04:	f7ff fc10 	bl	8002328 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8002b08:	bf00      	nop
 8002b0a:	3730      	adds	r7, #48	@ 0x30
 8002b0c:	46bd      	mov	sp, r7
 8002b0e:	bd80      	pop	{r7, pc}
 8002b10:	200059e8 	.word	0x200059e8

08002b14 <MX_TIM15_Init>:
/* TIM15 init function */
void MX_TIM15_Init(void)
{
 8002b14:	b580      	push	{r7, lr}
 8002b16:	b096      	sub	sp, #88	@ 0x58
 8002b18:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM15_Init 0 */

  /* USER CODE END TIM15_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002b1a:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8002b1e:	2200      	movs	r2, #0
 8002b20:	601a      	str	r2, [r3, #0]
 8002b22:	605a      	str	r2, [r3, #4]
 8002b24:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002b26:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8002b2a:	2200      	movs	r2, #0
 8002b2c:	601a      	str	r2, [r3, #0]
 8002b2e:	605a      	str	r2, [r3, #4]
 8002b30:	609a      	str	r2, [r3, #8]
 8002b32:	60da      	str	r2, [r3, #12]
 8002b34:	611a      	str	r2, [r3, #16]
 8002b36:	615a      	str	r2, [r3, #20]
 8002b38:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8002b3a:	1d3b      	adds	r3, r7, #4
 8002b3c:	222c      	movs	r2, #44	@ 0x2c
 8002b3e:	2100      	movs	r1, #0
 8002b40:	4618      	mov	r0, r3
 8002b42:	f017 f827 	bl	8019b94 <memset>

  /* USER CODE BEGIN TIM15_Init 1 */

  /* USER CODE END TIM15_Init 1 */
  htim15.Instance = TIM15;
 8002b46:	4b39      	ldr	r3, [pc, #228]	@ (8002c2c <MX_TIM15_Init+0x118>)
 8002b48:	4a39      	ldr	r2, [pc, #228]	@ (8002c30 <MX_TIM15_Init+0x11c>)
 8002b4a:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 0;
 8002b4c:	4b37      	ldr	r3, [pc, #220]	@ (8002c2c <MX_TIM15_Init+0x118>)
 8002b4e:	2200      	movs	r2, #0
 8002b50:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002b52:	4b36      	ldr	r3, [pc, #216]	@ (8002c2c <MX_TIM15_Init+0x118>)
 8002b54:	2200      	movs	r2, #0
 8002b56:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 65535;
 8002b58:	4b34      	ldr	r3, [pc, #208]	@ (8002c2c <MX_TIM15_Init+0x118>)
 8002b5a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002b5e:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002b60:	4b32      	ldr	r3, [pc, #200]	@ (8002c2c <MX_TIM15_Init+0x118>)
 8002b62:	2200      	movs	r2, #0
 8002b64:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 8002b66:	4b31      	ldr	r3, [pc, #196]	@ (8002c2c <MX_TIM15_Init+0x118>)
 8002b68:	2200      	movs	r2, #0
 8002b6a:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002b6c:	4b2f      	ldr	r3, [pc, #188]	@ (8002c2c <MX_TIM15_Init+0x118>)
 8002b6e:	2200      	movs	r2, #0
 8002b70:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim15) != HAL_OK)
 8002b72:	482e      	ldr	r0, [pc, #184]	@ (8002c2c <MX_TIM15_Init+0x118>)
 8002b74:	f004 fb98 	bl	80072a8 <HAL_TIM_PWM_Init>
 8002b78:	4603      	mov	r3, r0
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d001      	beq.n	8002b82 <MX_TIM15_Init+0x6e>
  {
    Error_Handler();
 8002b7e:	f7ff fbd3 	bl	8002328 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002b82:	2300      	movs	r3, #0
 8002b84:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002b86:	2300      	movs	r3, #0
 8002b88:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 8002b8a:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8002b8e:	4619      	mov	r1, r3
 8002b90:	4826      	ldr	r0, [pc, #152]	@ (8002c2c <MX_TIM15_Init+0x118>)
 8002b92:	f005 fbd7 	bl	8008344 <HAL_TIMEx_MasterConfigSynchronization>
 8002b96:	4603      	mov	r3, r0
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	d001      	beq.n	8002ba0 <MX_TIM15_Init+0x8c>
  {
    Error_Handler();
 8002b9c:	f7ff fbc4 	bl	8002328 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002ba0:	2360      	movs	r3, #96	@ 0x60
 8002ba2:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.Pulse = 0;
 8002ba4:	2300      	movs	r3, #0
 8002ba6:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002ba8:	2300      	movs	r3, #0
 8002baa:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8002bac:	2300      	movs	r3, #0
 8002bae:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002bb0:	2300      	movs	r3, #0
 8002bb2:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8002bb4:	2300      	movs	r3, #0
 8002bb6:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8002bb8:	2300      	movs	r3, #0
 8002bba:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim15, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002bbc:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8002bc0:	2200      	movs	r2, #0
 8002bc2:	4619      	mov	r1, r3
 8002bc4:	4819      	ldr	r0, [pc, #100]	@ (8002c2c <MX_TIM15_Init+0x118>)
 8002bc6:	f004 fedb 	bl	8007980 <HAL_TIM_PWM_ConfigChannel>
 8002bca:	4603      	mov	r3, r0
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	d001      	beq.n	8002bd4 <MX_TIM15_Init+0xc0>
  {
    Error_Handler();
 8002bd0:	f7ff fbaa 	bl	8002328 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim15, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002bd4:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8002bd8:	2204      	movs	r2, #4
 8002bda:	4619      	mov	r1, r3
 8002bdc:	4813      	ldr	r0, [pc, #76]	@ (8002c2c <MX_TIM15_Init+0x118>)
 8002bde:	f004 fecf 	bl	8007980 <HAL_TIM_PWM_ConfigChannel>
 8002be2:	4603      	mov	r3, r0
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	d001      	beq.n	8002bec <MX_TIM15_Init+0xd8>
  {
    Error_Handler();
 8002be8:	f7ff fb9e 	bl	8002328 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8002bec:	2300      	movs	r3, #0
 8002bee:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8002bf0:	2300      	movs	r3, #0
 8002bf2:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8002bf4:	2300      	movs	r3, #0
 8002bf6:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8002bf8:	2300      	movs	r3, #0
 8002bfa:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8002bfc:	2300      	movs	r3, #0
 8002bfe:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8002c00:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002c04:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8002c06:	2300      	movs	r3, #0
 8002c08:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim15, &sBreakDeadTimeConfig) != HAL_OK)
 8002c0a:	1d3b      	adds	r3, r7, #4
 8002c0c:	4619      	mov	r1, r3
 8002c0e:	4807      	ldr	r0, [pc, #28]	@ (8002c2c <MX_TIM15_Init+0x118>)
 8002c10:	f005 fbfe 	bl	8008410 <HAL_TIMEx_ConfigBreakDeadTime>
 8002c14:	4603      	mov	r3, r0
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d001      	beq.n	8002c1e <MX_TIM15_Init+0x10a>
  {
    Error_Handler();
 8002c1a:	f7ff fb85 	bl	8002328 <Error_Handler>
  }
  /* USER CODE BEGIN TIM15_Init 2 */

  /* USER CODE END TIM15_Init 2 */
  HAL_TIM_MspPostInit(&htim15);
 8002c1e:	4803      	ldr	r0, [pc, #12]	@ (8002c2c <MX_TIM15_Init+0x118>)
 8002c20:	f000 f8b8 	bl	8002d94 <HAL_TIM_MspPostInit>

}
 8002c24:	bf00      	nop
 8002c26:	3758      	adds	r7, #88	@ 0x58
 8002c28:	46bd      	mov	sp, r7
 8002c2a:	bd80      	pop	{r7, pc}
 8002c2c:	20005a34 	.word	0x20005a34
 8002c30:	40014000 	.word	0x40014000

08002c34 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 8002c34:	b580      	push	{r7, lr}
 8002c36:	b08c      	sub	sp, #48	@ 0x30
 8002c38:	af00      	add	r7, sp, #0
 8002c3a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002c3c:	f107 031c 	add.w	r3, r7, #28
 8002c40:	2200      	movs	r2, #0
 8002c42:	601a      	str	r2, [r3, #0]
 8002c44:	605a      	str	r2, [r3, #4]
 8002c46:	609a      	str	r2, [r3, #8]
 8002c48:	60da      	str	r2, [r3, #12]
 8002c4a:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM1)
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	4a3d      	ldr	r2, [pc, #244]	@ (8002d48 <HAL_TIM_Encoder_MspInit+0x114>)
 8002c52:	4293      	cmp	r3, r2
 8002c54:	d12a      	bne.n	8002cac <HAL_TIM_Encoder_MspInit+0x78>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002c56:	4b3d      	ldr	r3, [pc, #244]	@ (8002d4c <HAL_TIM_Encoder_MspInit+0x118>)
 8002c58:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002c5a:	4a3c      	ldr	r2, [pc, #240]	@ (8002d4c <HAL_TIM_Encoder_MspInit+0x118>)
 8002c5c:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8002c60:	6613      	str	r3, [r2, #96]	@ 0x60
 8002c62:	4b3a      	ldr	r3, [pc, #232]	@ (8002d4c <HAL_TIM_Encoder_MspInit+0x118>)
 8002c64:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002c66:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002c6a:	61bb      	str	r3, [r7, #24]
 8002c6c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002c6e:	4b37      	ldr	r3, [pc, #220]	@ (8002d4c <HAL_TIM_Encoder_MspInit+0x118>)
 8002c70:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002c72:	4a36      	ldr	r2, [pc, #216]	@ (8002d4c <HAL_TIM_Encoder_MspInit+0x118>)
 8002c74:	f043 0301 	orr.w	r3, r3, #1
 8002c78:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002c7a:	4b34      	ldr	r3, [pc, #208]	@ (8002d4c <HAL_TIM_Encoder_MspInit+0x118>)
 8002c7c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002c7e:	f003 0301 	and.w	r3, r3, #1
 8002c82:	617b      	str	r3, [r7, #20]
 8002c84:	697b      	ldr	r3, [r7, #20]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8002c86:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8002c8a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c8c:	2302      	movs	r3, #2
 8002c8e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c90:	2300      	movs	r3, #0
 8002c92:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002c94:	2302      	movs	r3, #2
 8002c96:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8002c98:	2301      	movs	r3, #1
 8002c9a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002c9c:	f107 031c 	add.w	r3, r7, #28
 8002ca0:	4619      	mov	r1, r3
 8002ca2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002ca6:	f000 fda1 	bl	80037ec <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8002caa:	e049      	b.n	8002d40 <HAL_TIM_Encoder_MspInit+0x10c>
  else if(tim_encoderHandle->Instance==TIM2)
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002cb4:	d144      	bne.n	8002d40 <HAL_TIM_Encoder_MspInit+0x10c>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002cb6:	4b25      	ldr	r3, [pc, #148]	@ (8002d4c <HAL_TIM_Encoder_MspInit+0x118>)
 8002cb8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002cba:	4a24      	ldr	r2, [pc, #144]	@ (8002d4c <HAL_TIM_Encoder_MspInit+0x118>)
 8002cbc:	f043 0301 	orr.w	r3, r3, #1
 8002cc0:	6593      	str	r3, [r2, #88]	@ 0x58
 8002cc2:	4b22      	ldr	r3, [pc, #136]	@ (8002d4c <HAL_TIM_Encoder_MspInit+0x118>)
 8002cc4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002cc6:	f003 0301 	and.w	r3, r3, #1
 8002cca:	613b      	str	r3, [r7, #16]
 8002ccc:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002cce:	4b1f      	ldr	r3, [pc, #124]	@ (8002d4c <HAL_TIM_Encoder_MspInit+0x118>)
 8002cd0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002cd2:	4a1e      	ldr	r2, [pc, #120]	@ (8002d4c <HAL_TIM_Encoder_MspInit+0x118>)
 8002cd4:	f043 0301 	orr.w	r3, r3, #1
 8002cd8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002cda:	4b1c      	ldr	r3, [pc, #112]	@ (8002d4c <HAL_TIM_Encoder_MspInit+0x118>)
 8002cdc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002cde:	f003 0301 	and.w	r3, r3, #1
 8002ce2:	60fb      	str	r3, [r7, #12]
 8002ce4:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002ce6:	4b19      	ldr	r3, [pc, #100]	@ (8002d4c <HAL_TIM_Encoder_MspInit+0x118>)
 8002ce8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002cea:	4a18      	ldr	r2, [pc, #96]	@ (8002d4c <HAL_TIM_Encoder_MspInit+0x118>)
 8002cec:	f043 0302 	orr.w	r3, r3, #2
 8002cf0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002cf2:	4b16      	ldr	r3, [pc, #88]	@ (8002d4c <HAL_TIM_Encoder_MspInit+0x118>)
 8002cf4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002cf6:	f003 0302 	and.w	r3, r3, #2
 8002cfa:	60bb      	str	r3, [r7, #8]
 8002cfc:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8002cfe:	2320      	movs	r3, #32
 8002d00:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d02:	2302      	movs	r3, #2
 8002d04:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d06:	2300      	movs	r3, #0
 8002d08:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d0a:	2300      	movs	r3, #0
 8002d0c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002d0e:	2301      	movs	r3, #1
 8002d10:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002d12:	f107 031c 	add.w	r3, r7, #28
 8002d16:	4619      	mov	r1, r3
 8002d18:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002d1c:	f000 fd66 	bl	80037ec <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8002d20:	2308      	movs	r3, #8
 8002d22:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d24:	2302      	movs	r3, #2
 8002d26:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d28:	2300      	movs	r3, #0
 8002d2a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d2c:	2300      	movs	r3, #0
 8002d2e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002d30:	2301      	movs	r3, #1
 8002d32:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002d34:	f107 031c 	add.w	r3, r7, #28
 8002d38:	4619      	mov	r1, r3
 8002d3a:	4805      	ldr	r0, [pc, #20]	@ (8002d50 <HAL_TIM_Encoder_MspInit+0x11c>)
 8002d3c:	f000 fd56 	bl	80037ec <HAL_GPIO_Init>
}
 8002d40:	bf00      	nop
 8002d42:	3730      	adds	r7, #48	@ 0x30
 8002d44:	46bd      	mov	sp, r7
 8002d46:	bd80      	pop	{r7, pc}
 8002d48:	40012c00 	.word	0x40012c00
 8002d4c:	40021000 	.word	0x40021000
 8002d50:	48000400 	.word	0x48000400

08002d54 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8002d54:	b480      	push	{r7}
 8002d56:	b085      	sub	sp, #20
 8002d58:	af00      	add	r7, sp, #0
 8002d5a:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM15)
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	4a0a      	ldr	r2, [pc, #40]	@ (8002d8c <HAL_TIM_PWM_MspInit+0x38>)
 8002d62:	4293      	cmp	r3, r2
 8002d64:	d10b      	bne.n	8002d7e <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM15_MspInit 0 */

  /* USER CODE END TIM15_MspInit 0 */
    /* TIM15 clock enable */
    __HAL_RCC_TIM15_CLK_ENABLE();
 8002d66:	4b0a      	ldr	r3, [pc, #40]	@ (8002d90 <HAL_TIM_PWM_MspInit+0x3c>)
 8002d68:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002d6a:	4a09      	ldr	r2, [pc, #36]	@ (8002d90 <HAL_TIM_PWM_MspInit+0x3c>)
 8002d6c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002d70:	6613      	str	r3, [r2, #96]	@ 0x60
 8002d72:	4b07      	ldr	r3, [pc, #28]	@ (8002d90 <HAL_TIM_PWM_MspInit+0x3c>)
 8002d74:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002d76:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002d7a:	60fb      	str	r3, [r7, #12]
 8002d7c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM15_MspInit 1 */

  /* USER CODE END TIM15_MspInit 1 */
  }
}
 8002d7e:	bf00      	nop
 8002d80:	3714      	adds	r7, #20
 8002d82:	46bd      	mov	sp, r7
 8002d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d88:	4770      	bx	lr
 8002d8a:	bf00      	nop
 8002d8c:	40014000 	.word	0x40014000
 8002d90:	40021000 	.word	0x40021000

08002d94 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8002d94:	b580      	push	{r7, lr}
 8002d96:	b088      	sub	sp, #32
 8002d98:	af00      	add	r7, sp, #0
 8002d9a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002d9c:	f107 030c 	add.w	r3, r7, #12
 8002da0:	2200      	movs	r2, #0
 8002da2:	601a      	str	r2, [r3, #0]
 8002da4:	605a      	str	r2, [r3, #4]
 8002da6:	609a      	str	r2, [r3, #8]
 8002da8:	60da      	str	r2, [r3, #12]
 8002daa:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM15)
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	4a11      	ldr	r2, [pc, #68]	@ (8002df8 <HAL_TIM_MspPostInit+0x64>)
 8002db2:	4293      	cmp	r3, r2
 8002db4:	d11c      	bne.n	8002df0 <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM15_MspPostInit 0 */

  /* USER CODE END TIM15_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002db6:	4b11      	ldr	r3, [pc, #68]	@ (8002dfc <HAL_TIM_MspPostInit+0x68>)
 8002db8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002dba:	4a10      	ldr	r2, [pc, #64]	@ (8002dfc <HAL_TIM_MspPostInit+0x68>)
 8002dbc:	f043 0301 	orr.w	r3, r3, #1
 8002dc0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002dc2:	4b0e      	ldr	r3, [pc, #56]	@ (8002dfc <HAL_TIM_MspPostInit+0x68>)
 8002dc4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002dc6:	f003 0301 	and.w	r3, r3, #1
 8002dca:	60bb      	str	r3, [r7, #8]
 8002dcc:	68bb      	ldr	r3, [r7, #8]
    /**TIM15 GPIO Configuration
    PA1     ------> TIM15_CH1N
    PA3     ------> TIM15_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_3;
 8002dce:	230a      	movs	r3, #10
 8002dd0:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002dd2:	2302      	movs	r3, #2
 8002dd4:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002dd6:	2300      	movs	r3, #0
 8002dd8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002dda:	2300      	movs	r3, #0
 8002ddc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF14_TIM15;
 8002dde:	230e      	movs	r3, #14
 8002de0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002de2:	f107 030c 	add.w	r3, r7, #12
 8002de6:	4619      	mov	r1, r3
 8002de8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002dec:	f000 fcfe 	bl	80037ec <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM15_MspPostInit 1 */

  /* USER CODE END TIM15_MspPostInit 1 */
  }

}
 8002df0:	bf00      	nop
 8002df2:	3720      	adds	r7, #32
 8002df4:	46bd      	mov	sp, r7
 8002df6:	bd80      	pop	{r7, pc}
 8002df8:	40014000 	.word	0x40014000
 8002dfc:	40021000 	.word	0x40021000

08002e00 <MX_USART2_UART_Init>:
DMA_HandleTypeDef hdma_usart2_tx;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8002e00:	b580      	push	{r7, lr}
 8002e02:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002e04:	4b14      	ldr	r3, [pc, #80]	@ (8002e58 <MX_USART2_UART_Init+0x58>)
 8002e06:	4a15      	ldr	r2, [pc, #84]	@ (8002e5c <MX_USART2_UART_Init+0x5c>)
 8002e08:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 921600;
 8002e0a:	4b13      	ldr	r3, [pc, #76]	@ (8002e58 <MX_USART2_UART_Init+0x58>)
 8002e0c:	f44f 2261 	mov.w	r2, #921600	@ 0xe1000
 8002e10:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002e12:	4b11      	ldr	r3, [pc, #68]	@ (8002e58 <MX_USART2_UART_Init+0x58>)
 8002e14:	2200      	movs	r2, #0
 8002e16:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002e18:	4b0f      	ldr	r3, [pc, #60]	@ (8002e58 <MX_USART2_UART_Init+0x58>)
 8002e1a:	2200      	movs	r2, #0
 8002e1c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002e1e:	4b0e      	ldr	r3, [pc, #56]	@ (8002e58 <MX_USART2_UART_Init+0x58>)
 8002e20:	2200      	movs	r2, #0
 8002e22:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002e24:	4b0c      	ldr	r3, [pc, #48]	@ (8002e58 <MX_USART2_UART_Init+0x58>)
 8002e26:	220c      	movs	r2, #12
 8002e28:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002e2a:	4b0b      	ldr	r3, [pc, #44]	@ (8002e58 <MX_USART2_UART_Init+0x58>)
 8002e2c:	2200      	movs	r2, #0
 8002e2e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002e30:	4b09      	ldr	r3, [pc, #36]	@ (8002e58 <MX_USART2_UART_Init+0x58>)
 8002e32:	2200      	movs	r2, #0
 8002e34:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002e36:	4b08      	ldr	r3, [pc, #32]	@ (8002e58 <MX_USART2_UART_Init+0x58>)
 8002e38:	2200      	movs	r2, #0
 8002e3a:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002e3c:	4b06      	ldr	r3, [pc, #24]	@ (8002e58 <MX_USART2_UART_Init+0x58>)
 8002e3e:	2200      	movs	r2, #0
 8002e40:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002e42:	4805      	ldr	r0, [pc, #20]	@ (8002e58 <MX_USART2_UART_Init+0x58>)
 8002e44:	f005 fb9f 	bl	8008586 <HAL_UART_Init>
 8002e48:	4603      	mov	r3, r0
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d001      	beq.n	8002e52 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8002e4e:	f7ff fa6b 	bl	8002328 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002e52:	bf00      	nop
 8002e54:	bd80      	pop	{r7, pc}
 8002e56:	bf00      	nop
 8002e58:	20005a80 	.word	0x20005a80
 8002e5c:	40004400 	.word	0x40004400

08002e60 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002e60:	b580      	push	{r7, lr}
 8002e62:	b09e      	sub	sp, #120	@ 0x78
 8002e64:	af00      	add	r7, sp, #0
 8002e66:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002e68:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8002e6c:	2200      	movs	r2, #0
 8002e6e:	601a      	str	r2, [r3, #0]
 8002e70:	605a      	str	r2, [r3, #4]
 8002e72:	609a      	str	r2, [r3, #8]
 8002e74:	60da      	str	r2, [r3, #12]
 8002e76:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002e78:	f107 0310 	add.w	r3, r7, #16
 8002e7c:	2254      	movs	r2, #84	@ 0x54
 8002e7e:	2100      	movs	r1, #0
 8002e80:	4618      	mov	r0, r3
 8002e82:	f016 fe87 	bl	8019b94 <memset>
  if(uartHandle->Instance==USART2)
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	4a56      	ldr	r2, [pc, #344]	@ (8002fe4 <HAL_UART_MspInit+0x184>)
 8002e8c:	4293      	cmp	r3, r2
 8002e8e:	f040 80a5 	bne.w	8002fdc <HAL_UART_MspInit+0x17c>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8002e92:	2302      	movs	r3, #2
 8002e94:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8002e96:	2300      	movs	r3, #0
 8002e98:	637b      	str	r3, [r7, #52]	@ 0x34
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002e9a:	f107 0310 	add.w	r3, r7, #16
 8002e9e:	4618      	mov	r0, r3
 8002ea0:	f003 fe08 	bl	8006ab4 <HAL_RCCEx_PeriphCLKConfig>
 8002ea4:	4603      	mov	r3, r0
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d001      	beq.n	8002eae <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8002eaa:	f7ff fa3d 	bl	8002328 <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002eae:	4b4e      	ldr	r3, [pc, #312]	@ (8002fe8 <HAL_UART_MspInit+0x188>)
 8002eb0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002eb2:	4a4d      	ldr	r2, [pc, #308]	@ (8002fe8 <HAL_UART_MspInit+0x188>)
 8002eb4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002eb8:	6593      	str	r3, [r2, #88]	@ 0x58
 8002eba:	4b4b      	ldr	r3, [pc, #300]	@ (8002fe8 <HAL_UART_MspInit+0x188>)
 8002ebc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002ebe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002ec2:	60fb      	str	r3, [r7, #12]
 8002ec4:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002ec6:	4b48      	ldr	r3, [pc, #288]	@ (8002fe8 <HAL_UART_MspInit+0x188>)
 8002ec8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002eca:	4a47      	ldr	r2, [pc, #284]	@ (8002fe8 <HAL_UART_MspInit+0x188>)
 8002ecc:	f043 0301 	orr.w	r3, r3, #1
 8002ed0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002ed2:	4b45      	ldr	r3, [pc, #276]	@ (8002fe8 <HAL_UART_MspInit+0x188>)
 8002ed4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002ed6:	f003 0301 	and.w	r3, r3, #1
 8002eda:	60bb      	str	r3, [r7, #8]
 8002edc:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA15 (JTDI)     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = VCP_TX_Pin;
 8002ede:	2304      	movs	r3, #4
 8002ee0:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ee2:	2302      	movs	r3, #2
 8002ee4:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ee6:	2300      	movs	r3, #0
 8002ee8:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002eea:	2303      	movs	r3, #3
 8002eec:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002eee:	2307      	movs	r3, #7
 8002ef0:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 8002ef2:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8002ef6:	4619      	mov	r1, r3
 8002ef8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002efc:	f000 fc76 	bl	80037ec <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VCP_RX_Pin;
 8002f00:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002f04:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f06:	2302      	movs	r3, #2
 8002f08:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f0a:	2300      	movs	r3, #0
 8002f0c:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002f0e:	2303      	movs	r3, #3
 8002f10:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF3_USART2;
 8002f12:	2303      	movs	r3, #3
 8002f14:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 8002f16:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8002f1a:	4619      	mov	r1, r3
 8002f1c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002f20:	f000 fc64 	bl	80037ec <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Channel6;
 8002f24:	4b31      	ldr	r3, [pc, #196]	@ (8002fec <HAL_UART_MspInit+0x18c>)
 8002f26:	4a32      	ldr	r2, [pc, #200]	@ (8002ff0 <HAL_UART_MspInit+0x190>)
 8002f28:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Request = DMA_REQUEST_2;
 8002f2a:	4b30      	ldr	r3, [pc, #192]	@ (8002fec <HAL_UART_MspInit+0x18c>)
 8002f2c:	2202      	movs	r2, #2
 8002f2e:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002f30:	4b2e      	ldr	r3, [pc, #184]	@ (8002fec <HAL_UART_MspInit+0x18c>)
 8002f32:	2200      	movs	r2, #0
 8002f34:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002f36:	4b2d      	ldr	r3, [pc, #180]	@ (8002fec <HAL_UART_MspInit+0x18c>)
 8002f38:	2200      	movs	r2, #0
 8002f3a:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002f3c:	4b2b      	ldr	r3, [pc, #172]	@ (8002fec <HAL_UART_MspInit+0x18c>)
 8002f3e:	2280      	movs	r2, #128	@ 0x80
 8002f40:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002f42:	4b2a      	ldr	r3, [pc, #168]	@ (8002fec <HAL_UART_MspInit+0x18c>)
 8002f44:	2200      	movs	r2, #0
 8002f46:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002f48:	4b28      	ldr	r3, [pc, #160]	@ (8002fec <HAL_UART_MspInit+0x18c>)
 8002f4a:	2200      	movs	r2, #0
 8002f4c:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 8002f4e:	4b27      	ldr	r3, [pc, #156]	@ (8002fec <HAL_UART_MspInit+0x18c>)
 8002f50:	2220      	movs	r2, #32
 8002f52:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8002f54:	4b25      	ldr	r3, [pc, #148]	@ (8002fec <HAL_UART_MspInit+0x18c>)
 8002f56:	f44f 5240 	mov.w	r2, #12288	@ 0x3000
 8002f5a:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8002f5c:	4823      	ldr	r0, [pc, #140]	@ (8002fec <HAL_UART_MspInit+0x18c>)
 8002f5e:	f000 f9b5 	bl	80032cc <HAL_DMA_Init>
 8002f62:	4603      	mov	r3, r0
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	d001      	beq.n	8002f6c <HAL_UART_MspInit+0x10c>
    {
      Error_Handler();
 8002f68:	f7ff f9de 	bl	8002328 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart2_rx);
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	4a1f      	ldr	r2, [pc, #124]	@ (8002fec <HAL_UART_MspInit+0x18c>)
 8002f70:	675a      	str	r2, [r3, #116]	@ 0x74
 8002f72:	4a1e      	ldr	r2, [pc, #120]	@ (8002fec <HAL_UART_MspInit+0x18c>)
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	6293      	str	r3, [r2, #40]	@ 0x28

    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Channel7;
 8002f78:	4b1e      	ldr	r3, [pc, #120]	@ (8002ff4 <HAL_UART_MspInit+0x194>)
 8002f7a:	4a1f      	ldr	r2, [pc, #124]	@ (8002ff8 <HAL_UART_MspInit+0x198>)
 8002f7c:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Request = DMA_REQUEST_2;
 8002f7e:	4b1d      	ldr	r3, [pc, #116]	@ (8002ff4 <HAL_UART_MspInit+0x194>)
 8002f80:	2202      	movs	r2, #2
 8002f82:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002f84:	4b1b      	ldr	r3, [pc, #108]	@ (8002ff4 <HAL_UART_MspInit+0x194>)
 8002f86:	2210      	movs	r2, #16
 8002f88:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002f8a:	4b1a      	ldr	r3, [pc, #104]	@ (8002ff4 <HAL_UART_MspInit+0x194>)
 8002f8c:	2200      	movs	r2, #0
 8002f8e:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002f90:	4b18      	ldr	r3, [pc, #96]	@ (8002ff4 <HAL_UART_MspInit+0x194>)
 8002f92:	2280      	movs	r2, #128	@ 0x80
 8002f94:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002f96:	4b17      	ldr	r3, [pc, #92]	@ (8002ff4 <HAL_UART_MspInit+0x194>)
 8002f98:	2200      	movs	r2, #0
 8002f9a:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002f9c:	4b15      	ldr	r3, [pc, #84]	@ (8002ff4 <HAL_UART_MspInit+0x194>)
 8002f9e:	2200      	movs	r2, #0
 8002fa0:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8002fa2:	4b14      	ldr	r3, [pc, #80]	@ (8002ff4 <HAL_UART_MspInit+0x194>)
 8002fa4:	2200      	movs	r2, #0
 8002fa6:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8002fa8:	4b12      	ldr	r3, [pc, #72]	@ (8002ff4 <HAL_UART_MspInit+0x194>)
 8002faa:	f44f 5240 	mov.w	r2, #12288	@ 0x3000
 8002fae:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8002fb0:	4810      	ldr	r0, [pc, #64]	@ (8002ff4 <HAL_UART_MspInit+0x194>)
 8002fb2:	f000 f98b 	bl	80032cc <HAL_DMA_Init>
 8002fb6:	4603      	mov	r3, r0
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	d001      	beq.n	8002fc0 <HAL_UART_MspInit+0x160>
    {
      Error_Handler();
 8002fbc:	f7ff f9b4 	bl	8002328 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart2_tx);
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	4a0c      	ldr	r2, [pc, #48]	@ (8002ff4 <HAL_UART_MspInit+0x194>)
 8002fc4:	671a      	str	r2, [r3, #112]	@ 0x70
 8002fc6:	4a0b      	ldr	r2, [pc, #44]	@ (8002ff4 <HAL_UART_MspInit+0x194>)
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	6293      	str	r3, [r2, #40]	@ 0x28

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 8002fcc:	2200      	movs	r2, #0
 8002fce:	2105      	movs	r1, #5
 8002fd0:	2026      	movs	r0, #38	@ 0x26
 8002fd2:	f000 f951 	bl	8003278 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8002fd6:	2026      	movs	r0, #38	@ 0x26
 8002fd8:	f000 f96a 	bl	80032b0 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8002fdc:	bf00      	nop
 8002fde:	3778      	adds	r7, #120	@ 0x78
 8002fe0:	46bd      	mov	sp, r7
 8002fe2:	bd80      	pop	{r7, pc}
 8002fe4:	40004400 	.word	0x40004400
 8002fe8:	40021000 	.word	0x40021000
 8002fec:	20005b08 	.word	0x20005b08
 8002ff0:	4002006c 	.word	0x4002006c
 8002ff4:	20005b50 	.word	0x20005b50
 8002ff8:	40020080 	.word	0x40020080

08002ffc <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8002ffc:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8003034 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8003000:	f7ff fcc8 	bl	8002994 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003004:	480c      	ldr	r0, [pc, #48]	@ (8003038 <LoopForever+0x6>)
  ldr r1, =_edata
 8003006:	490d      	ldr	r1, [pc, #52]	@ (800303c <LoopForever+0xa>)
  ldr r2, =_sidata
 8003008:	4a0d      	ldr	r2, [pc, #52]	@ (8003040 <LoopForever+0xe>)
  movs r3, #0
 800300a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800300c:	e002      	b.n	8003014 <LoopCopyDataInit>

0800300e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800300e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003010:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003012:	3304      	adds	r3, #4

08003014 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003014:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003016:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003018:	d3f9      	bcc.n	800300e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800301a:	4a0a      	ldr	r2, [pc, #40]	@ (8003044 <LoopForever+0x12>)
  ldr r4, =_ebss
 800301c:	4c0a      	ldr	r4, [pc, #40]	@ (8003048 <LoopForever+0x16>)
  movs r3, #0
 800301e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003020:	e001      	b.n	8003026 <LoopFillZerobss>

08003022 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003022:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003024:	3204      	adds	r2, #4

08003026 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003026:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003028:	d3fb      	bcc.n	8003022 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800302a:	f016 fea3 	bl	8019d74 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800302e:	f7fe ff61 	bl	8001ef4 <main>

08003032 <LoopForever>:

LoopForever:
    b LoopForever
 8003032:	e7fe      	b.n	8003032 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8003034:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8003038:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800303c:	20000168 	.word	0x20000168
  ldr r2, =_sidata
 8003040:	0801c7b0 	.word	0x0801c7b0
  ldr r2, =_sbss
 8003044:	20000168 	.word	0x20000168
  ldr r4, =_ebss
 8003048:	2000c248 	.word	0x2000c248

0800304c <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800304c:	e7fe      	b.n	800304c <ADC1_IRQHandler>

0800304e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800304e:	b580      	push	{r7, lr}
 8003050:	b082      	sub	sp, #8
 8003052:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8003054:	2300      	movs	r3, #0
 8003056:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003058:	2003      	movs	r0, #3
 800305a:	f000 f902 	bl	8003262 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800305e:	200f      	movs	r0, #15
 8003060:	f7ff faf6 	bl	8002650 <HAL_InitTick>
 8003064:	4603      	mov	r3, r0
 8003066:	2b00      	cmp	r3, #0
 8003068:	d002      	beq.n	8003070 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800306a:	2301      	movs	r3, #1
 800306c:	71fb      	strb	r3, [r7, #7]
 800306e:	e001      	b.n	8003074 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8003070:	f7ff fac6 	bl	8002600 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8003074:	79fb      	ldrb	r3, [r7, #7]
}
 8003076:	4618      	mov	r0, r3
 8003078:	3708      	adds	r7, #8
 800307a:	46bd      	mov	sp, r7
 800307c:	bd80      	pop	{r7, pc}
	...

08003080 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003080:	b480      	push	{r7}
 8003082:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8003084:	4b06      	ldr	r3, [pc, #24]	@ (80030a0 <HAL_IncTick+0x20>)
 8003086:	781b      	ldrb	r3, [r3, #0]
 8003088:	461a      	mov	r2, r3
 800308a:	4b06      	ldr	r3, [pc, #24]	@ (80030a4 <HAL_IncTick+0x24>)
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	4413      	add	r3, r2
 8003090:	4a04      	ldr	r2, [pc, #16]	@ (80030a4 <HAL_IncTick+0x24>)
 8003092:	6013      	str	r3, [r2, #0]
}
 8003094:	bf00      	nop
 8003096:	46bd      	mov	sp, r7
 8003098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800309c:	4770      	bx	lr
 800309e:	bf00      	nop
 80030a0:	20000048 	.word	0x20000048
 80030a4:	20005b98 	.word	0x20005b98

080030a8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80030a8:	b480      	push	{r7}
 80030aa:	af00      	add	r7, sp, #0
  return uwTick;
 80030ac:	4b03      	ldr	r3, [pc, #12]	@ (80030bc <HAL_GetTick+0x14>)
 80030ae:	681b      	ldr	r3, [r3, #0]
}
 80030b0:	4618      	mov	r0, r3
 80030b2:	46bd      	mov	sp, r7
 80030b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030b8:	4770      	bx	lr
 80030ba:	bf00      	nop
 80030bc:	20005b98 	.word	0x20005b98

080030c0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80030c0:	b580      	push	{r7, lr}
 80030c2:	b084      	sub	sp, #16
 80030c4:	af00      	add	r7, sp, #0
 80030c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80030c8:	f7ff ffee 	bl	80030a8 <HAL_GetTick>
 80030cc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80030d8:	d005      	beq.n	80030e6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 80030da:	4b0a      	ldr	r3, [pc, #40]	@ (8003104 <HAL_Delay+0x44>)
 80030dc:	781b      	ldrb	r3, [r3, #0]
 80030de:	461a      	mov	r2, r3
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	4413      	add	r3, r2
 80030e4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80030e6:	bf00      	nop
 80030e8:	f7ff ffde 	bl	80030a8 <HAL_GetTick>
 80030ec:	4602      	mov	r2, r0
 80030ee:	68bb      	ldr	r3, [r7, #8]
 80030f0:	1ad3      	subs	r3, r2, r3
 80030f2:	68fa      	ldr	r2, [r7, #12]
 80030f4:	429a      	cmp	r2, r3
 80030f6:	d8f7      	bhi.n	80030e8 <HAL_Delay+0x28>
  {
  }
}
 80030f8:	bf00      	nop
 80030fa:	bf00      	nop
 80030fc:	3710      	adds	r7, #16
 80030fe:	46bd      	mov	sp, r7
 8003100:	bd80      	pop	{r7, pc}
 8003102:	bf00      	nop
 8003104:	20000048 	.word	0x20000048

08003108 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003108:	b480      	push	{r7}
 800310a:	b085      	sub	sp, #20
 800310c:	af00      	add	r7, sp, #0
 800310e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	f003 0307 	and.w	r3, r3, #7
 8003116:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003118:	4b0c      	ldr	r3, [pc, #48]	@ (800314c <__NVIC_SetPriorityGrouping+0x44>)
 800311a:	68db      	ldr	r3, [r3, #12]
 800311c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800311e:	68ba      	ldr	r2, [r7, #8]
 8003120:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003124:	4013      	ands	r3, r2
 8003126:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800312c:	68bb      	ldr	r3, [r7, #8]
 800312e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003130:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8003134:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003138:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800313a:	4a04      	ldr	r2, [pc, #16]	@ (800314c <__NVIC_SetPriorityGrouping+0x44>)
 800313c:	68bb      	ldr	r3, [r7, #8]
 800313e:	60d3      	str	r3, [r2, #12]
}
 8003140:	bf00      	nop
 8003142:	3714      	adds	r7, #20
 8003144:	46bd      	mov	sp, r7
 8003146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800314a:	4770      	bx	lr
 800314c:	e000ed00 	.word	0xe000ed00

08003150 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003150:	b480      	push	{r7}
 8003152:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003154:	4b04      	ldr	r3, [pc, #16]	@ (8003168 <__NVIC_GetPriorityGrouping+0x18>)
 8003156:	68db      	ldr	r3, [r3, #12]
 8003158:	0a1b      	lsrs	r3, r3, #8
 800315a:	f003 0307 	and.w	r3, r3, #7
}
 800315e:	4618      	mov	r0, r3
 8003160:	46bd      	mov	sp, r7
 8003162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003166:	4770      	bx	lr
 8003168:	e000ed00 	.word	0xe000ed00

0800316c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800316c:	b480      	push	{r7}
 800316e:	b083      	sub	sp, #12
 8003170:	af00      	add	r7, sp, #0
 8003172:	4603      	mov	r3, r0
 8003174:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003176:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800317a:	2b00      	cmp	r3, #0
 800317c:	db0b      	blt.n	8003196 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800317e:	79fb      	ldrb	r3, [r7, #7]
 8003180:	f003 021f 	and.w	r2, r3, #31
 8003184:	4907      	ldr	r1, [pc, #28]	@ (80031a4 <__NVIC_EnableIRQ+0x38>)
 8003186:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800318a:	095b      	lsrs	r3, r3, #5
 800318c:	2001      	movs	r0, #1
 800318e:	fa00 f202 	lsl.w	r2, r0, r2
 8003192:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003196:	bf00      	nop
 8003198:	370c      	adds	r7, #12
 800319a:	46bd      	mov	sp, r7
 800319c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031a0:	4770      	bx	lr
 80031a2:	bf00      	nop
 80031a4:	e000e100 	.word	0xe000e100

080031a8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80031a8:	b480      	push	{r7}
 80031aa:	b083      	sub	sp, #12
 80031ac:	af00      	add	r7, sp, #0
 80031ae:	4603      	mov	r3, r0
 80031b0:	6039      	str	r1, [r7, #0]
 80031b2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80031b4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	db0a      	blt.n	80031d2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80031bc:	683b      	ldr	r3, [r7, #0]
 80031be:	b2da      	uxtb	r2, r3
 80031c0:	490c      	ldr	r1, [pc, #48]	@ (80031f4 <__NVIC_SetPriority+0x4c>)
 80031c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80031c6:	0112      	lsls	r2, r2, #4
 80031c8:	b2d2      	uxtb	r2, r2
 80031ca:	440b      	add	r3, r1
 80031cc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80031d0:	e00a      	b.n	80031e8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80031d2:	683b      	ldr	r3, [r7, #0]
 80031d4:	b2da      	uxtb	r2, r3
 80031d6:	4908      	ldr	r1, [pc, #32]	@ (80031f8 <__NVIC_SetPriority+0x50>)
 80031d8:	79fb      	ldrb	r3, [r7, #7]
 80031da:	f003 030f 	and.w	r3, r3, #15
 80031de:	3b04      	subs	r3, #4
 80031e0:	0112      	lsls	r2, r2, #4
 80031e2:	b2d2      	uxtb	r2, r2
 80031e4:	440b      	add	r3, r1
 80031e6:	761a      	strb	r2, [r3, #24]
}
 80031e8:	bf00      	nop
 80031ea:	370c      	adds	r7, #12
 80031ec:	46bd      	mov	sp, r7
 80031ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031f2:	4770      	bx	lr
 80031f4:	e000e100 	.word	0xe000e100
 80031f8:	e000ed00 	.word	0xe000ed00

080031fc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80031fc:	b480      	push	{r7}
 80031fe:	b089      	sub	sp, #36	@ 0x24
 8003200:	af00      	add	r7, sp, #0
 8003202:	60f8      	str	r0, [r7, #12]
 8003204:	60b9      	str	r1, [r7, #8]
 8003206:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	f003 0307 	and.w	r3, r3, #7
 800320e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003210:	69fb      	ldr	r3, [r7, #28]
 8003212:	f1c3 0307 	rsb	r3, r3, #7
 8003216:	2b04      	cmp	r3, #4
 8003218:	bf28      	it	cs
 800321a:	2304      	movcs	r3, #4
 800321c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800321e:	69fb      	ldr	r3, [r7, #28]
 8003220:	3304      	adds	r3, #4
 8003222:	2b06      	cmp	r3, #6
 8003224:	d902      	bls.n	800322c <NVIC_EncodePriority+0x30>
 8003226:	69fb      	ldr	r3, [r7, #28]
 8003228:	3b03      	subs	r3, #3
 800322a:	e000      	b.n	800322e <NVIC_EncodePriority+0x32>
 800322c:	2300      	movs	r3, #0
 800322e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003230:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8003234:	69bb      	ldr	r3, [r7, #24]
 8003236:	fa02 f303 	lsl.w	r3, r2, r3
 800323a:	43da      	mvns	r2, r3
 800323c:	68bb      	ldr	r3, [r7, #8]
 800323e:	401a      	ands	r2, r3
 8003240:	697b      	ldr	r3, [r7, #20]
 8003242:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003244:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8003248:	697b      	ldr	r3, [r7, #20]
 800324a:	fa01 f303 	lsl.w	r3, r1, r3
 800324e:	43d9      	mvns	r1, r3
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003254:	4313      	orrs	r3, r2
         );
}
 8003256:	4618      	mov	r0, r3
 8003258:	3724      	adds	r7, #36	@ 0x24
 800325a:	46bd      	mov	sp, r7
 800325c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003260:	4770      	bx	lr

08003262 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003262:	b580      	push	{r7, lr}
 8003264:	b082      	sub	sp, #8
 8003266:	af00      	add	r7, sp, #0
 8003268:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800326a:	6878      	ldr	r0, [r7, #4]
 800326c:	f7ff ff4c 	bl	8003108 <__NVIC_SetPriorityGrouping>
}
 8003270:	bf00      	nop
 8003272:	3708      	adds	r7, #8
 8003274:	46bd      	mov	sp, r7
 8003276:	bd80      	pop	{r7, pc}

08003278 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003278:	b580      	push	{r7, lr}
 800327a:	b086      	sub	sp, #24
 800327c:	af00      	add	r7, sp, #0
 800327e:	4603      	mov	r3, r0
 8003280:	60b9      	str	r1, [r7, #8]
 8003282:	607a      	str	r2, [r7, #4]
 8003284:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8003286:	2300      	movs	r3, #0
 8003288:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800328a:	f7ff ff61 	bl	8003150 <__NVIC_GetPriorityGrouping>
 800328e:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003290:	687a      	ldr	r2, [r7, #4]
 8003292:	68b9      	ldr	r1, [r7, #8]
 8003294:	6978      	ldr	r0, [r7, #20]
 8003296:	f7ff ffb1 	bl	80031fc <NVIC_EncodePriority>
 800329a:	4602      	mov	r2, r0
 800329c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80032a0:	4611      	mov	r1, r2
 80032a2:	4618      	mov	r0, r3
 80032a4:	f7ff ff80 	bl	80031a8 <__NVIC_SetPriority>
}
 80032a8:	bf00      	nop
 80032aa:	3718      	adds	r7, #24
 80032ac:	46bd      	mov	sp, r7
 80032ae:	bd80      	pop	{r7, pc}

080032b0 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80032b0:	b580      	push	{r7, lr}
 80032b2:	b082      	sub	sp, #8
 80032b4:	af00      	add	r7, sp, #0
 80032b6:	4603      	mov	r3, r0
 80032b8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80032ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80032be:	4618      	mov	r0, r3
 80032c0:	f7ff ff54 	bl	800316c <__NVIC_EnableIRQ>
}
 80032c4:	bf00      	nop
 80032c6:	3708      	adds	r7, #8
 80032c8:	46bd      	mov	sp, r7
 80032ca:	bd80      	pop	{r7, pc}

080032cc <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80032cc:	b480      	push	{r7}
 80032ce:	b085      	sub	sp, #20
 80032d0:	af00      	add	r7, sp, #0
 80032d2:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	d101      	bne.n	80032de <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 80032da:	2301      	movs	r3, #1
 80032dc:	e098      	b.n	8003410 <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	461a      	mov	r2, r3
 80032e4:	4b4d      	ldr	r3, [pc, #308]	@ (800341c <HAL_DMA_Init+0x150>)
 80032e6:	429a      	cmp	r2, r3
 80032e8:	d80f      	bhi.n	800330a <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	461a      	mov	r2, r3
 80032f0:	4b4b      	ldr	r3, [pc, #300]	@ (8003420 <HAL_DMA_Init+0x154>)
 80032f2:	4413      	add	r3, r2
 80032f4:	4a4b      	ldr	r2, [pc, #300]	@ (8003424 <HAL_DMA_Init+0x158>)
 80032f6:	fba2 2303 	umull	r2, r3, r2, r3
 80032fa:	091b      	lsrs	r3, r3, #4
 80032fc:	009a      	lsls	r2, r3, #2
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	4a48      	ldr	r2, [pc, #288]	@ (8003428 <HAL_DMA_Init+0x15c>)
 8003306:	641a      	str	r2, [r3, #64]	@ 0x40
 8003308:	e00e      	b.n	8003328 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	461a      	mov	r2, r3
 8003310:	4b46      	ldr	r3, [pc, #280]	@ (800342c <HAL_DMA_Init+0x160>)
 8003312:	4413      	add	r3, r2
 8003314:	4a43      	ldr	r2, [pc, #268]	@ (8003424 <HAL_DMA_Init+0x158>)
 8003316:	fba2 2303 	umull	r2, r3, r2, r3
 800331a:	091b      	lsrs	r3, r3, #4
 800331c:	009a      	lsls	r2, r3, #2
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	4a42      	ldr	r2, [pc, #264]	@ (8003430 <HAL_DMA_Init+0x164>)
 8003326:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	2202      	movs	r2, #2
 800332c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 800333e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003342:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 800334c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	691b      	ldr	r3, [r3, #16]
 8003352:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003358:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	699b      	ldr	r3, [r3, #24]
 800335e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003364:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	6a1b      	ldr	r3, [r3, #32]
 800336a:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 800336c:	68fa      	ldr	r2, [r7, #12]
 800336e:	4313      	orrs	r3, r2
 8003370:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	68fa      	ldr	r2, [r7, #12]
 8003378:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if (hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	689b      	ldr	r3, [r3, #8]
 800337e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003382:	d039      	beq.n	80033f8 <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003388:	4a27      	ldr	r2, [pc, #156]	@ (8003428 <HAL_DMA_Init+0x15c>)
 800338a:	4293      	cmp	r3, r2
 800338c:	d11a      	bne.n	80033c4 <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 800338e:	4b29      	ldr	r3, [pc, #164]	@ (8003434 <HAL_DMA_Init+0x168>)
 8003390:	681a      	ldr	r2, [r3, #0]
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003396:	f003 031c 	and.w	r3, r3, #28
 800339a:	210f      	movs	r1, #15
 800339c:	fa01 f303 	lsl.w	r3, r1, r3
 80033a0:	43db      	mvns	r3, r3
 80033a2:	4924      	ldr	r1, [pc, #144]	@ (8003434 <HAL_DMA_Init+0x168>)
 80033a4:	4013      	ands	r3, r2
 80033a6:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 80033a8:	4b22      	ldr	r3, [pc, #136]	@ (8003434 <HAL_DMA_Init+0x168>)
 80033aa:	681a      	ldr	r2, [r3, #0]
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	6859      	ldr	r1, [r3, #4]
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80033b4:	f003 031c 	and.w	r3, r3, #28
 80033b8:	fa01 f303 	lsl.w	r3, r1, r3
 80033bc:	491d      	ldr	r1, [pc, #116]	@ (8003434 <HAL_DMA_Init+0x168>)
 80033be:	4313      	orrs	r3, r2
 80033c0:	600b      	str	r3, [r1, #0]
 80033c2:	e019      	b.n	80033f8 <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 80033c4:	4b1c      	ldr	r3, [pc, #112]	@ (8003438 <HAL_DMA_Init+0x16c>)
 80033c6:	681a      	ldr	r2, [r3, #0]
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80033cc:	f003 031c 	and.w	r3, r3, #28
 80033d0:	210f      	movs	r1, #15
 80033d2:	fa01 f303 	lsl.w	r3, r1, r3
 80033d6:	43db      	mvns	r3, r3
 80033d8:	4917      	ldr	r1, [pc, #92]	@ (8003438 <HAL_DMA_Init+0x16c>)
 80033da:	4013      	ands	r3, r2
 80033dc:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 80033de:	4b16      	ldr	r3, [pc, #88]	@ (8003438 <HAL_DMA_Init+0x16c>)
 80033e0:	681a      	ldr	r2, [r3, #0]
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	6859      	ldr	r1, [r3, #4]
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80033ea:	f003 031c 	and.w	r3, r3, #28
 80033ee:	fa01 f303 	lsl.w	r3, r1, r3
 80033f2:	4911      	ldr	r1, [pc, #68]	@ (8003438 <HAL_DMA_Init+0x16c>)
 80033f4:	4313      	orrs	r3, r2
 80033f6:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
  /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
  /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	2200      	movs	r2, #0
 80033fc:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	2201      	movs	r2, #1
 8003402:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	2200      	movs	r2, #0
 800340a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 800340e:	2300      	movs	r3, #0
}
 8003410:	4618      	mov	r0, r3
 8003412:	3714      	adds	r7, #20
 8003414:	46bd      	mov	sp, r7
 8003416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800341a:	4770      	bx	lr
 800341c:	40020407 	.word	0x40020407
 8003420:	bffdfff8 	.word	0xbffdfff8
 8003424:	cccccccd 	.word	0xcccccccd
 8003428:	40020000 	.word	0x40020000
 800342c:	bffdfbf8 	.word	0xbffdfbf8
 8003430:	40020400 	.word	0x40020400
 8003434:	400200a8 	.word	0x400200a8
 8003438:	400204a8 	.word	0x400204a8

0800343c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800343c:	b580      	push	{r7, lr}
 800343e:	b086      	sub	sp, #24
 8003440:	af00      	add	r7, sp, #0
 8003442:	60f8      	str	r0, [r7, #12]
 8003444:	60b9      	str	r1, [r7, #8]
 8003446:	607a      	str	r2, [r7, #4]
 8003448:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800344a:	2300      	movs	r3, #0
 800344c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8003454:	2b01      	cmp	r3, #1
 8003456:	d101      	bne.n	800345c <HAL_DMA_Start_IT+0x20>
 8003458:	2302      	movs	r3, #2
 800345a:	e04b      	b.n	80034f4 <HAL_DMA_Start_IT+0xb8>
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	2201      	movs	r2, #1
 8003460:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800346a:	b2db      	uxtb	r3, r3
 800346c:	2b01      	cmp	r3, #1
 800346e:	d13a      	bne.n	80034e6 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	2202      	movs	r2, #2
 8003474:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	2200      	movs	r2, #0
 800347c:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	681a      	ldr	r2, [r3, #0]
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	f022 0201 	bic.w	r2, r2, #1
 800348c:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800348e:	683b      	ldr	r3, [r7, #0]
 8003490:	687a      	ldr	r2, [r7, #4]
 8003492:	68b9      	ldr	r1, [r7, #8]
 8003494:	68f8      	ldr	r0, [r7, #12]
 8003496:	f000 f979 	bl	800378c <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 800349a:	68fb      	ldr	r3, [r7, #12]
 800349c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d008      	beq.n	80034b4 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	681a      	ldr	r2, [r3, #0]
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	f042 020e 	orr.w	r2, r2, #14
 80034b0:	601a      	str	r2, [r3, #0]
 80034b2:	e00f      	b.n	80034d4 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	681a      	ldr	r2, [r3, #0]
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	f022 0204 	bic.w	r2, r2, #4
 80034c2:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	681a      	ldr	r2, [r3, #0]
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	f042 020a 	orr.w	r2, r2, #10
 80034d2:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	681a      	ldr	r2, [r3, #0]
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	f042 0201 	orr.w	r2, r2, #1
 80034e2:	601a      	str	r2, [r3, #0]
 80034e4:	e005      	b.n	80034f2 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	2200      	movs	r2, #0
 80034ea:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 80034ee:	2302      	movs	r3, #2
 80034f0:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 80034f2:	7dfb      	ldrb	r3, [r7, #23]
}
 80034f4:	4618      	mov	r0, r3
 80034f6:	3718      	adds	r7, #24
 80034f8:	46bd      	mov	sp, r7
 80034fa:	bd80      	pop	{r7, pc}

080034fc <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80034fc:	b480      	push	{r7}
 80034fe:	b085      	sub	sp, #20
 8003500:	af00      	add	r7, sp, #0
 8003502:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003504:	2300      	movs	r3, #0
 8003506:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800350e:	b2db      	uxtb	r3, r3
 8003510:	2b02      	cmp	r3, #2
 8003512:	d008      	beq.n	8003526 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	2204      	movs	r2, #4
 8003518:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	2200      	movs	r2, #0
 800351e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8003522:	2301      	movs	r3, #1
 8003524:	e022      	b.n	800356c <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	681a      	ldr	r2, [r3, #0]
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	f022 020e 	bic.w	r2, r2, #14
 8003534:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	681a      	ldr	r2, [r3, #0]
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	f022 0201 	bic.w	r2, r2, #1
 8003544:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800354a:	f003 021c 	and.w	r2, r3, #28
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003552:	2101      	movs	r1, #1
 8003554:	fa01 f202 	lsl.w	r2, r1, r2
 8003558:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	2201      	movs	r2, #1
 800355e:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	2200      	movs	r2, #0
 8003566:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return status;
 800356a:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 800356c:	4618      	mov	r0, r3
 800356e:	3714      	adds	r7, #20
 8003570:	46bd      	mov	sp, r7
 8003572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003576:	4770      	bx	lr

08003578 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003578:	b580      	push	{r7, lr}
 800357a:	b084      	sub	sp, #16
 800357c:	af00      	add	r7, sp, #0
 800357e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003580:	2300      	movs	r3, #0
 8003582:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800358a:	b2db      	uxtb	r3, r3
 800358c:	2b02      	cmp	r3, #2
 800358e:	d005      	beq.n	800359c <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	2204      	movs	r2, #4
 8003594:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8003596:	2301      	movs	r3, #1
 8003598:	73fb      	strb	r3, [r7, #15]
 800359a:	e029      	b.n	80035f0 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	681a      	ldr	r2, [r3, #0]
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	f022 020e 	bic.w	r2, r2, #14
 80035aa:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	681a      	ldr	r2, [r3, #0]
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	f022 0201 	bic.w	r2, r2, #1
 80035ba:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80035c0:	f003 021c 	and.w	r2, r3, #28
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80035c8:	2101      	movs	r1, #1
 80035ca:	fa01 f202 	lsl.w	r2, r1, r2
 80035ce:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	2201      	movs	r2, #1
 80035d4:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	2200      	movs	r2, #0
 80035dc:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	d003      	beq.n	80035f0 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80035ec:	6878      	ldr	r0, [r7, #4]
 80035ee:	4798      	blx	r3
    }
  }
  return status;
 80035f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80035f2:	4618      	mov	r0, r3
 80035f4:	3710      	adds	r7, #16
 80035f6:	46bd      	mov	sp, r7
 80035f8:	bd80      	pop	{r7, pc}

080035fa <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80035fa:	b580      	push	{r7, lr}
 80035fc:	b084      	sub	sp, #16
 80035fe:	af00      	add	r7, sp, #0
 8003600:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003616:	f003 031c 	and.w	r3, r3, #28
 800361a:	2204      	movs	r2, #4
 800361c:	409a      	lsls	r2, r3
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	4013      	ands	r3, r2
 8003622:	2b00      	cmp	r3, #0
 8003624:	d026      	beq.n	8003674 <HAL_DMA_IRQHandler+0x7a>
 8003626:	68bb      	ldr	r3, [r7, #8]
 8003628:	f003 0304 	and.w	r3, r3, #4
 800362c:	2b00      	cmp	r3, #0
 800362e:	d021      	beq.n	8003674 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	f003 0320 	and.w	r3, r3, #32
 800363a:	2b00      	cmp	r3, #0
 800363c:	d107      	bne.n	800364e <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	681a      	ldr	r2, [r3, #0]
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	f022 0204 	bic.w	r2, r2, #4
 800364c:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003652:	f003 021c 	and.w	r2, r3, #28
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800365a:	2104      	movs	r1, #4
 800365c:	fa01 f202 	lsl.w	r2, r1, r2
 8003660:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003666:	2b00      	cmp	r3, #0
 8003668:	d071      	beq.n	800374e <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800366e:	6878      	ldr	r0, [r7, #4]
 8003670:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8003672:	e06c      	b.n	800374e <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003678:	f003 031c 	and.w	r3, r3, #28
 800367c:	2202      	movs	r2, #2
 800367e:	409a      	lsls	r2, r3
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	4013      	ands	r3, r2
 8003684:	2b00      	cmp	r3, #0
 8003686:	d02e      	beq.n	80036e6 <HAL_DMA_IRQHandler+0xec>
 8003688:	68bb      	ldr	r3, [r7, #8]
 800368a:	f003 0302 	and.w	r3, r3, #2
 800368e:	2b00      	cmp	r3, #0
 8003690:	d029      	beq.n	80036e6 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	f003 0320 	and.w	r3, r3, #32
 800369c:	2b00      	cmp	r3, #0
 800369e:	d10b      	bne.n	80036b8 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	681a      	ldr	r2, [r3, #0]
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	f022 020a 	bic.w	r2, r2, #10
 80036ae:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	2201      	movs	r2, #1
 80036b4:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80036bc:	f003 021c 	and.w	r2, r3, #28
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80036c4:	2102      	movs	r1, #2
 80036c6:	fa01 f202 	lsl.w	r2, r1, r2
 80036ca:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	2200      	movs	r2, #0
 80036d0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80036d8:	2b00      	cmp	r3, #0
 80036da:	d038      	beq.n	800374e <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80036e0:	6878      	ldr	r0, [r7, #4]
 80036e2:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 80036e4:	e033      	b.n	800374e <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80036ea:	f003 031c 	and.w	r3, r3, #28
 80036ee:	2208      	movs	r2, #8
 80036f0:	409a      	lsls	r2, r3
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	4013      	ands	r3, r2
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d02a      	beq.n	8003750 <HAL_DMA_IRQHandler+0x156>
 80036fa:	68bb      	ldr	r3, [r7, #8]
 80036fc:	f003 0308 	and.w	r3, r3, #8
 8003700:	2b00      	cmp	r3, #0
 8003702:	d025      	beq.n	8003750 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	681a      	ldr	r2, [r3, #0]
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	f022 020e 	bic.w	r2, r2, #14
 8003712:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003718:	f003 021c 	and.w	r2, r3, #28
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003720:	2101      	movs	r1, #1
 8003722:	fa01 f202 	lsl.w	r2, r1, r2
 8003726:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	2201      	movs	r2, #1
 800372c:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	2201      	movs	r2, #1
 8003732:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	2200      	movs	r2, #0
 800373a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003742:	2b00      	cmp	r3, #0
 8003744:	d004      	beq.n	8003750 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800374a:	6878      	ldr	r0, [r7, #4]
 800374c:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 800374e:	bf00      	nop
 8003750:	bf00      	nop
}
 8003752:	3710      	adds	r7, #16
 8003754:	46bd      	mov	sp, r7
 8003756:	bd80      	pop	{r7, pc}

08003758 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8003758:	b480      	push	{r7}
 800375a:	b083      	sub	sp, #12
 800375c:	af00      	add	r7, sp, #0
 800375e:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8003766:	b2db      	uxtb	r3, r3
}
 8003768:	4618      	mov	r0, r3
 800376a:	370c      	adds	r7, #12
 800376c:	46bd      	mov	sp, r7
 800376e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003772:	4770      	bx	lr

08003774 <HAL_DMA_GetError>:
  * @param  hdma : pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8003774:	b480      	push	{r7}
 8003776:	b083      	sub	sp, #12
 8003778:	af00      	add	r7, sp, #0
 800377a:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
}
 8003780:	4618      	mov	r0, r3
 8003782:	370c      	adds	r7, #12
 8003784:	46bd      	mov	sp, r7
 8003786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800378a:	4770      	bx	lr

0800378c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800378c:	b480      	push	{r7}
 800378e:	b085      	sub	sp, #20
 8003790:	af00      	add	r7, sp, #0
 8003792:	60f8      	str	r0, [r7, #12]
 8003794:	60b9      	str	r1, [r7, #8]
 8003796:	607a      	str	r2, [r7, #4]
 8003798:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800379a:	68fb      	ldr	r3, [r7, #12]
 800379c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800379e:	f003 021c 	and.w	r2, r3, #28
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80037a6:	2101      	movs	r1, #1
 80037a8:	fa01 f202 	lsl.w	r2, r1, r2
 80037ac:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	683a      	ldr	r2, [r7, #0]
 80037b4:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	689b      	ldr	r3, [r3, #8]
 80037ba:	2b10      	cmp	r3, #16
 80037bc:	d108      	bne.n	80037d0 <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	687a      	ldr	r2, [r7, #4]
 80037c4:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	68ba      	ldr	r2, [r7, #8]
 80037cc:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80037ce:	e007      	b.n	80037e0 <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	68ba      	ldr	r2, [r7, #8]
 80037d6:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	687a      	ldr	r2, [r7, #4]
 80037de:	60da      	str	r2, [r3, #12]
}
 80037e0:	bf00      	nop
 80037e2:	3714      	adds	r7, #20
 80037e4:	46bd      	mov	sp, r7
 80037e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ea:	4770      	bx	lr

080037ec <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80037ec:	b480      	push	{r7}
 80037ee:	b087      	sub	sp, #28
 80037f0:	af00      	add	r7, sp, #0
 80037f2:	6078      	str	r0, [r7, #4]
 80037f4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80037f6:	2300      	movs	r3, #0
 80037f8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80037fa:	e148      	b.n	8003a8e <HAL_GPIO_Init+0x2a2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80037fc:	683b      	ldr	r3, [r7, #0]
 80037fe:	681a      	ldr	r2, [r3, #0]
 8003800:	2101      	movs	r1, #1
 8003802:	697b      	ldr	r3, [r7, #20]
 8003804:	fa01 f303 	lsl.w	r3, r1, r3
 8003808:	4013      	ands	r3, r2
 800380a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	2b00      	cmp	r3, #0
 8003810:	f000 813a 	beq.w	8003a88 <HAL_GPIO_Init+0x29c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003814:	683b      	ldr	r3, [r7, #0]
 8003816:	685b      	ldr	r3, [r3, #4]
 8003818:	f003 0303 	and.w	r3, r3, #3
 800381c:	2b01      	cmp	r3, #1
 800381e:	d005      	beq.n	800382c <HAL_GPIO_Init+0x40>
 8003820:	683b      	ldr	r3, [r7, #0]
 8003822:	685b      	ldr	r3, [r3, #4]
 8003824:	f003 0303 	and.w	r3, r3, #3
 8003828:	2b02      	cmp	r3, #2
 800382a:	d130      	bne.n	800388e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	689b      	ldr	r3, [r3, #8]
 8003830:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8003832:	697b      	ldr	r3, [r7, #20]
 8003834:	005b      	lsls	r3, r3, #1
 8003836:	2203      	movs	r2, #3
 8003838:	fa02 f303 	lsl.w	r3, r2, r3
 800383c:	43db      	mvns	r3, r3
 800383e:	693a      	ldr	r2, [r7, #16]
 8003840:	4013      	ands	r3, r2
 8003842:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003844:	683b      	ldr	r3, [r7, #0]
 8003846:	68da      	ldr	r2, [r3, #12]
 8003848:	697b      	ldr	r3, [r7, #20]
 800384a:	005b      	lsls	r3, r3, #1
 800384c:	fa02 f303 	lsl.w	r3, r2, r3
 8003850:	693a      	ldr	r2, [r7, #16]
 8003852:	4313      	orrs	r3, r2
 8003854:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	693a      	ldr	r2, [r7, #16]
 800385a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	685b      	ldr	r3, [r3, #4]
 8003860:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003862:	2201      	movs	r2, #1
 8003864:	697b      	ldr	r3, [r7, #20]
 8003866:	fa02 f303 	lsl.w	r3, r2, r3
 800386a:	43db      	mvns	r3, r3
 800386c:	693a      	ldr	r2, [r7, #16]
 800386e:	4013      	ands	r3, r2
 8003870:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003872:	683b      	ldr	r3, [r7, #0]
 8003874:	685b      	ldr	r3, [r3, #4]
 8003876:	091b      	lsrs	r3, r3, #4
 8003878:	f003 0201 	and.w	r2, r3, #1
 800387c:	697b      	ldr	r3, [r7, #20]
 800387e:	fa02 f303 	lsl.w	r3, r2, r3
 8003882:	693a      	ldr	r2, [r7, #16]
 8003884:	4313      	orrs	r3, r2
 8003886:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	693a      	ldr	r2, [r7, #16]
 800388c:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800388e:	683b      	ldr	r3, [r7, #0]
 8003890:	685b      	ldr	r3, [r3, #4]
 8003892:	f003 0303 	and.w	r3, r3, #3
 8003896:	2b03      	cmp	r3, #3
 8003898:	d017      	beq.n	80038ca <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	68db      	ldr	r3, [r3, #12]
 800389e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80038a0:	697b      	ldr	r3, [r7, #20]
 80038a2:	005b      	lsls	r3, r3, #1
 80038a4:	2203      	movs	r2, #3
 80038a6:	fa02 f303 	lsl.w	r3, r2, r3
 80038aa:	43db      	mvns	r3, r3
 80038ac:	693a      	ldr	r2, [r7, #16]
 80038ae:	4013      	ands	r3, r2
 80038b0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80038b2:	683b      	ldr	r3, [r7, #0]
 80038b4:	689a      	ldr	r2, [r3, #8]
 80038b6:	697b      	ldr	r3, [r7, #20]
 80038b8:	005b      	lsls	r3, r3, #1
 80038ba:	fa02 f303 	lsl.w	r3, r2, r3
 80038be:	693a      	ldr	r2, [r7, #16]
 80038c0:	4313      	orrs	r3, r2
 80038c2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	693a      	ldr	r2, [r7, #16]
 80038c8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80038ca:	683b      	ldr	r3, [r7, #0]
 80038cc:	685b      	ldr	r3, [r3, #4]
 80038ce:	f003 0303 	and.w	r3, r3, #3
 80038d2:	2b02      	cmp	r3, #2
 80038d4:	d123      	bne.n	800391e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80038d6:	697b      	ldr	r3, [r7, #20]
 80038d8:	08da      	lsrs	r2, r3, #3
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	3208      	adds	r2, #8
 80038de:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80038e2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80038e4:	697b      	ldr	r3, [r7, #20]
 80038e6:	f003 0307 	and.w	r3, r3, #7
 80038ea:	009b      	lsls	r3, r3, #2
 80038ec:	220f      	movs	r2, #15
 80038ee:	fa02 f303 	lsl.w	r3, r2, r3
 80038f2:	43db      	mvns	r3, r3
 80038f4:	693a      	ldr	r2, [r7, #16]
 80038f6:	4013      	ands	r3, r2
 80038f8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80038fa:	683b      	ldr	r3, [r7, #0]
 80038fc:	691a      	ldr	r2, [r3, #16]
 80038fe:	697b      	ldr	r3, [r7, #20]
 8003900:	f003 0307 	and.w	r3, r3, #7
 8003904:	009b      	lsls	r3, r3, #2
 8003906:	fa02 f303 	lsl.w	r3, r2, r3
 800390a:	693a      	ldr	r2, [r7, #16]
 800390c:	4313      	orrs	r3, r2
 800390e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003910:	697b      	ldr	r3, [r7, #20]
 8003912:	08da      	lsrs	r2, r3, #3
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	3208      	adds	r2, #8
 8003918:	6939      	ldr	r1, [r7, #16]
 800391a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8003924:	697b      	ldr	r3, [r7, #20]
 8003926:	005b      	lsls	r3, r3, #1
 8003928:	2203      	movs	r2, #3
 800392a:	fa02 f303 	lsl.w	r3, r2, r3
 800392e:	43db      	mvns	r3, r3
 8003930:	693a      	ldr	r2, [r7, #16]
 8003932:	4013      	ands	r3, r2
 8003934:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003936:	683b      	ldr	r3, [r7, #0]
 8003938:	685b      	ldr	r3, [r3, #4]
 800393a:	f003 0203 	and.w	r2, r3, #3
 800393e:	697b      	ldr	r3, [r7, #20]
 8003940:	005b      	lsls	r3, r3, #1
 8003942:	fa02 f303 	lsl.w	r3, r2, r3
 8003946:	693a      	ldr	r2, [r7, #16]
 8003948:	4313      	orrs	r3, r2
 800394a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	693a      	ldr	r2, [r7, #16]
 8003950:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003952:	683b      	ldr	r3, [r7, #0]
 8003954:	685b      	ldr	r3, [r3, #4]
 8003956:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800395a:	2b00      	cmp	r3, #0
 800395c:	f000 8094 	beq.w	8003a88 <HAL_GPIO_Init+0x29c>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003960:	4b52      	ldr	r3, [pc, #328]	@ (8003aac <HAL_GPIO_Init+0x2c0>)
 8003962:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003964:	4a51      	ldr	r2, [pc, #324]	@ (8003aac <HAL_GPIO_Init+0x2c0>)
 8003966:	f043 0301 	orr.w	r3, r3, #1
 800396a:	6613      	str	r3, [r2, #96]	@ 0x60
 800396c:	4b4f      	ldr	r3, [pc, #316]	@ (8003aac <HAL_GPIO_Init+0x2c0>)
 800396e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003970:	f003 0301 	and.w	r3, r3, #1
 8003974:	60bb      	str	r3, [r7, #8]
 8003976:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8003978:	4a4d      	ldr	r2, [pc, #308]	@ (8003ab0 <HAL_GPIO_Init+0x2c4>)
 800397a:	697b      	ldr	r3, [r7, #20]
 800397c:	089b      	lsrs	r3, r3, #2
 800397e:	3302      	adds	r3, #2
 8003980:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003984:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8003986:	697b      	ldr	r3, [r7, #20]
 8003988:	f003 0303 	and.w	r3, r3, #3
 800398c:	009b      	lsls	r3, r3, #2
 800398e:	220f      	movs	r2, #15
 8003990:	fa02 f303 	lsl.w	r3, r2, r3
 8003994:	43db      	mvns	r3, r3
 8003996:	693a      	ldr	r2, [r7, #16]
 8003998:	4013      	ands	r3, r2
 800399a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80039a2:	d00d      	beq.n	80039c0 <HAL_GPIO_Init+0x1d4>
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	4a43      	ldr	r2, [pc, #268]	@ (8003ab4 <HAL_GPIO_Init+0x2c8>)
 80039a8:	4293      	cmp	r3, r2
 80039aa:	d007      	beq.n	80039bc <HAL_GPIO_Init+0x1d0>
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	4a42      	ldr	r2, [pc, #264]	@ (8003ab8 <HAL_GPIO_Init+0x2cc>)
 80039b0:	4293      	cmp	r3, r2
 80039b2:	d101      	bne.n	80039b8 <HAL_GPIO_Init+0x1cc>
 80039b4:	2302      	movs	r3, #2
 80039b6:	e004      	b.n	80039c2 <HAL_GPIO_Init+0x1d6>
 80039b8:	2307      	movs	r3, #7
 80039ba:	e002      	b.n	80039c2 <HAL_GPIO_Init+0x1d6>
 80039bc:	2301      	movs	r3, #1
 80039be:	e000      	b.n	80039c2 <HAL_GPIO_Init+0x1d6>
 80039c0:	2300      	movs	r3, #0
 80039c2:	697a      	ldr	r2, [r7, #20]
 80039c4:	f002 0203 	and.w	r2, r2, #3
 80039c8:	0092      	lsls	r2, r2, #2
 80039ca:	4093      	lsls	r3, r2
 80039cc:	693a      	ldr	r2, [r7, #16]
 80039ce:	4313      	orrs	r3, r2
 80039d0:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80039d2:	4937      	ldr	r1, [pc, #220]	@ (8003ab0 <HAL_GPIO_Init+0x2c4>)
 80039d4:	697b      	ldr	r3, [r7, #20]
 80039d6:	089b      	lsrs	r3, r3, #2
 80039d8:	3302      	adds	r3, #2
 80039da:	693a      	ldr	r2, [r7, #16]
 80039dc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80039e0:	4b36      	ldr	r3, [pc, #216]	@ (8003abc <HAL_GPIO_Init+0x2d0>)
 80039e2:	689b      	ldr	r3, [r3, #8]
 80039e4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	43db      	mvns	r3, r3
 80039ea:	693a      	ldr	r2, [r7, #16]
 80039ec:	4013      	ands	r3, r2
 80039ee:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80039f0:	683b      	ldr	r3, [r7, #0]
 80039f2:	685b      	ldr	r3, [r3, #4]
 80039f4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	d003      	beq.n	8003a04 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 80039fc:	693a      	ldr	r2, [r7, #16]
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	4313      	orrs	r3, r2
 8003a02:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003a04:	4a2d      	ldr	r2, [pc, #180]	@ (8003abc <HAL_GPIO_Init+0x2d0>)
 8003a06:	693b      	ldr	r3, [r7, #16]
 8003a08:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8003a0a:	4b2c      	ldr	r3, [pc, #176]	@ (8003abc <HAL_GPIO_Init+0x2d0>)
 8003a0c:	68db      	ldr	r3, [r3, #12]
 8003a0e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	43db      	mvns	r3, r3
 8003a14:	693a      	ldr	r2, [r7, #16]
 8003a16:	4013      	ands	r3, r2
 8003a18:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003a1a:	683b      	ldr	r3, [r7, #0]
 8003a1c:	685b      	ldr	r3, [r3, #4]
 8003a1e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	d003      	beq.n	8003a2e <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 8003a26:	693a      	ldr	r2, [r7, #16]
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	4313      	orrs	r3, r2
 8003a2c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003a2e:	4a23      	ldr	r2, [pc, #140]	@ (8003abc <HAL_GPIO_Init+0x2d0>)
 8003a30:	693b      	ldr	r3, [r7, #16]
 8003a32:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8003a34:	4b21      	ldr	r3, [pc, #132]	@ (8003abc <HAL_GPIO_Init+0x2d0>)
 8003a36:	685b      	ldr	r3, [r3, #4]
 8003a38:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	43db      	mvns	r3, r3
 8003a3e:	693a      	ldr	r2, [r7, #16]
 8003a40:	4013      	ands	r3, r2
 8003a42:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003a44:	683b      	ldr	r3, [r7, #0]
 8003a46:	685b      	ldr	r3, [r3, #4]
 8003a48:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	d003      	beq.n	8003a58 <HAL_GPIO_Init+0x26c>
        {
          temp |= iocurrent;
 8003a50:	693a      	ldr	r2, [r7, #16]
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	4313      	orrs	r3, r2
 8003a56:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003a58:	4a18      	ldr	r2, [pc, #96]	@ (8003abc <HAL_GPIO_Init+0x2d0>)
 8003a5a:	693b      	ldr	r3, [r7, #16]
 8003a5c:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8003a5e:	4b17      	ldr	r3, [pc, #92]	@ (8003abc <HAL_GPIO_Init+0x2d0>)
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	43db      	mvns	r3, r3
 8003a68:	693a      	ldr	r2, [r7, #16]
 8003a6a:	4013      	ands	r3, r2
 8003a6c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003a6e:	683b      	ldr	r3, [r7, #0]
 8003a70:	685b      	ldr	r3, [r3, #4]
 8003a72:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d003      	beq.n	8003a82 <HAL_GPIO_Init+0x296>
        {
          temp |= iocurrent;
 8003a7a:	693a      	ldr	r2, [r7, #16]
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	4313      	orrs	r3, r2
 8003a80:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003a82:	4a0e      	ldr	r2, [pc, #56]	@ (8003abc <HAL_GPIO_Init+0x2d0>)
 8003a84:	693b      	ldr	r3, [r7, #16]
 8003a86:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8003a88:	697b      	ldr	r3, [r7, #20]
 8003a8a:	3301      	adds	r3, #1
 8003a8c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003a8e:	683b      	ldr	r3, [r7, #0]
 8003a90:	681a      	ldr	r2, [r3, #0]
 8003a92:	697b      	ldr	r3, [r7, #20]
 8003a94:	fa22 f303 	lsr.w	r3, r2, r3
 8003a98:	2b00      	cmp	r3, #0
 8003a9a:	f47f aeaf 	bne.w	80037fc <HAL_GPIO_Init+0x10>
  }
}
 8003a9e:	bf00      	nop
 8003aa0:	bf00      	nop
 8003aa2:	371c      	adds	r7, #28
 8003aa4:	46bd      	mov	sp, r7
 8003aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aaa:	4770      	bx	lr
 8003aac:	40021000 	.word	0x40021000
 8003ab0:	40010000 	.word	0x40010000
 8003ab4:	48000400 	.word	0x48000400
 8003ab8:	48000800 	.word	0x48000800
 8003abc:	40010400 	.word	0x40010400

08003ac0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003ac0:	b580      	push	{r7, lr}
 8003ac2:	b082      	sub	sp, #8
 8003ac4:	af00      	add	r7, sp, #0
 8003ac6:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	d101      	bne.n	8003ad2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003ace:	2301      	movs	r3, #1
 8003ad0:	e08d      	b.n	8003bee <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003ad8:	b2db      	uxtb	r3, r3
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d106      	bne.n	8003aec <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	2200      	movs	r2, #0
 8003ae2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8003ae6:	6878      	ldr	r0, [r7, #4]
 8003ae8:	f7fd fe3c 	bl	8001764 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	2224      	movs	r2, #36	@ 0x24
 8003af0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	681a      	ldr	r2, [r3, #0]
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	f022 0201 	bic.w	r2, r2, #1
 8003b02:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	685a      	ldr	r2, [r3, #4]
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8003b10:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	689a      	ldr	r2, [r3, #8]
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003b20:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	68db      	ldr	r3, [r3, #12]
 8003b26:	2b01      	cmp	r3, #1
 8003b28:	d107      	bne.n	8003b3a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	689a      	ldr	r2, [r3, #8]
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003b36:	609a      	str	r2, [r3, #8]
 8003b38:	e006      	b.n	8003b48 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	689a      	ldr	r2, [r3, #8]
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8003b46:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	68db      	ldr	r3, [r3, #12]
 8003b4c:	2b02      	cmp	r3, #2
 8003b4e:	d108      	bne.n	8003b62 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	685a      	ldr	r2, [r3, #4]
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003b5e:	605a      	str	r2, [r3, #4]
 8003b60:	e007      	b.n	8003b72 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	685a      	ldr	r2, [r3, #4]
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003b70:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	685b      	ldr	r3, [r3, #4]
 8003b78:	687a      	ldr	r2, [r7, #4]
 8003b7a:	6812      	ldr	r2, [r2, #0]
 8003b7c:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8003b80:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003b84:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	68da      	ldr	r2, [r3, #12]
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003b94:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	691a      	ldr	r2, [r3, #16]
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	695b      	ldr	r3, [r3, #20]
 8003b9e:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	699b      	ldr	r3, [r3, #24]
 8003ba6:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	430a      	orrs	r2, r1
 8003bae:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	69d9      	ldr	r1, [r3, #28]
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	6a1a      	ldr	r2, [r3, #32]
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	430a      	orrs	r2, r1
 8003bbe:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	681a      	ldr	r2, [r3, #0]
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	f042 0201 	orr.w	r2, r2, #1
 8003bce:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	2200      	movs	r2, #0
 8003bd4:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	2220      	movs	r2, #32
 8003bda:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	2200      	movs	r2, #0
 8003be2:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	2200      	movs	r2, #0
 8003be8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8003bec:	2300      	movs	r3, #0
}
 8003bee:	4618      	mov	r0, r3
 8003bf0:	3708      	adds	r7, #8
 8003bf2:	46bd      	mov	sp, r7
 8003bf4:	bd80      	pop	{r7, pc}
	...

08003bf8 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003bf8:	b580      	push	{r7, lr}
 8003bfa:	b088      	sub	sp, #32
 8003bfc:	af02      	add	r7, sp, #8
 8003bfe:	60f8      	str	r0, [r7, #12]
 8003c00:	4608      	mov	r0, r1
 8003c02:	4611      	mov	r1, r2
 8003c04:	461a      	mov	r2, r3
 8003c06:	4603      	mov	r3, r0
 8003c08:	817b      	strh	r3, [r7, #10]
 8003c0a:	460b      	mov	r3, r1
 8003c0c:	813b      	strh	r3, [r7, #8]
 8003c0e:	4613      	mov	r3, r2
 8003c10:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003c18:	b2db      	uxtb	r3, r3
 8003c1a:	2b20      	cmp	r3, #32
 8003c1c:	f040 80f9 	bne.w	8003e12 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003c20:	6a3b      	ldr	r3, [r7, #32]
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	d002      	beq.n	8003c2c <HAL_I2C_Mem_Write+0x34>
 8003c26:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	d105      	bne.n	8003c38 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003c32:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8003c34:	2301      	movs	r3, #1
 8003c36:	e0ed      	b.n	8003e14 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003c3e:	2b01      	cmp	r3, #1
 8003c40:	d101      	bne.n	8003c46 <HAL_I2C_Mem_Write+0x4e>
 8003c42:	2302      	movs	r3, #2
 8003c44:	e0e6      	b.n	8003e14 <HAL_I2C_Mem_Write+0x21c>
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	2201      	movs	r2, #1
 8003c4a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003c4e:	f7ff fa2b 	bl	80030a8 <HAL_GetTick>
 8003c52:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003c54:	697b      	ldr	r3, [r7, #20]
 8003c56:	9300      	str	r3, [sp, #0]
 8003c58:	2319      	movs	r3, #25
 8003c5a:	2201      	movs	r2, #1
 8003c5c:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8003c60:	68f8      	ldr	r0, [r7, #12]
 8003c62:	f001 fce4 	bl	800562e <I2C_WaitOnFlagUntilTimeout>
 8003c66:	4603      	mov	r3, r0
 8003c68:	2b00      	cmp	r3, #0
 8003c6a:	d001      	beq.n	8003c70 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8003c6c:	2301      	movs	r3, #1
 8003c6e:	e0d1      	b.n	8003e14 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	2221      	movs	r2, #33	@ 0x21
 8003c74:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	2240      	movs	r2, #64	@ 0x40
 8003c7c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	2200      	movs	r2, #0
 8003c84:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	6a3a      	ldr	r2, [r7, #32]
 8003c8a:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8003c90:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	2200      	movs	r2, #0
 8003c96:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003c98:	88f8      	ldrh	r0, [r7, #6]
 8003c9a:	893a      	ldrh	r2, [r7, #8]
 8003c9c:	8979      	ldrh	r1, [r7, #10]
 8003c9e:	697b      	ldr	r3, [r7, #20]
 8003ca0:	9301      	str	r3, [sp, #4]
 8003ca2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003ca4:	9300      	str	r3, [sp, #0]
 8003ca6:	4603      	mov	r3, r0
 8003ca8:	68f8      	ldr	r0, [r7, #12]
 8003caa:	f000 ff11 	bl	8004ad0 <I2C_RequestMemoryWrite>
 8003cae:	4603      	mov	r3, r0
 8003cb0:	2b00      	cmp	r3, #0
 8003cb2:	d005      	beq.n	8003cc0 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	2200      	movs	r2, #0
 8003cb8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8003cbc:	2301      	movs	r3, #1
 8003cbe:	e0a9      	b.n	8003e14 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003cc4:	b29b      	uxth	r3, r3
 8003cc6:	2bff      	cmp	r3, #255	@ 0xff
 8003cc8:	d90e      	bls.n	8003ce8 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	22ff      	movs	r2, #255	@ 0xff
 8003cce:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003cd4:	b2da      	uxtb	r2, r3
 8003cd6:	8979      	ldrh	r1, [r7, #10]
 8003cd8:	2300      	movs	r3, #0
 8003cda:	9300      	str	r3, [sp, #0]
 8003cdc:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8003ce0:	68f8      	ldr	r0, [r7, #12]
 8003ce2:	f001 fe5d 	bl	80059a0 <I2C_TransferConfig>
 8003ce6:	e00f      	b.n	8003d08 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003cec:	b29a      	uxth	r2, r3
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003cf6:	b2da      	uxtb	r2, r3
 8003cf8:	8979      	ldrh	r1, [r7, #10]
 8003cfa:	2300      	movs	r3, #0
 8003cfc:	9300      	str	r3, [sp, #0]
 8003cfe:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003d02:	68f8      	ldr	r0, [r7, #12]
 8003d04:	f001 fe4c 	bl	80059a0 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003d08:	697a      	ldr	r2, [r7, #20]
 8003d0a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003d0c:	68f8      	ldr	r0, [r7, #12]
 8003d0e:	f001 fcdd 	bl	80056cc <I2C_WaitOnTXISFlagUntilTimeout>
 8003d12:	4603      	mov	r3, r0
 8003d14:	2b00      	cmp	r3, #0
 8003d16:	d001      	beq.n	8003d1c <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8003d18:	2301      	movs	r3, #1
 8003d1a:	e07b      	b.n	8003e14 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d20:	781a      	ldrb	r2, [r3, #0]
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d2c:	1c5a      	adds	r2, r3, #1
 8003d2e:	68fb      	ldr	r3, [r7, #12]
 8003d30:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003d36:	b29b      	uxth	r3, r3
 8003d38:	3b01      	subs	r3, #1
 8003d3a:	b29a      	uxth	r2, r3
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003d44:	3b01      	subs	r3, #1
 8003d46:	b29a      	uxth	r2, r3
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003d50:	b29b      	uxth	r3, r3
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	d034      	beq.n	8003dc0 <HAL_I2C_Mem_Write+0x1c8>
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	d130      	bne.n	8003dc0 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003d5e:	697b      	ldr	r3, [r7, #20]
 8003d60:	9300      	str	r3, [sp, #0]
 8003d62:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003d64:	2200      	movs	r2, #0
 8003d66:	2180      	movs	r1, #128	@ 0x80
 8003d68:	68f8      	ldr	r0, [r7, #12]
 8003d6a:	f001 fc60 	bl	800562e <I2C_WaitOnFlagUntilTimeout>
 8003d6e:	4603      	mov	r3, r0
 8003d70:	2b00      	cmp	r3, #0
 8003d72:	d001      	beq.n	8003d78 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8003d74:	2301      	movs	r3, #1
 8003d76:	e04d      	b.n	8003e14 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003d7c:	b29b      	uxth	r3, r3
 8003d7e:	2bff      	cmp	r3, #255	@ 0xff
 8003d80:	d90e      	bls.n	8003da0 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003d82:	68fb      	ldr	r3, [r7, #12]
 8003d84:	22ff      	movs	r2, #255	@ 0xff
 8003d86:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003d8c:	b2da      	uxtb	r2, r3
 8003d8e:	8979      	ldrh	r1, [r7, #10]
 8003d90:	2300      	movs	r3, #0
 8003d92:	9300      	str	r3, [sp, #0]
 8003d94:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8003d98:	68f8      	ldr	r0, [r7, #12]
 8003d9a:	f001 fe01 	bl	80059a0 <I2C_TransferConfig>
 8003d9e:	e00f      	b.n	8003dc0 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003da4:	b29a      	uxth	r2, r3
 8003da6:	68fb      	ldr	r3, [r7, #12]
 8003da8:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003dae:	b2da      	uxtb	r2, r3
 8003db0:	8979      	ldrh	r1, [r7, #10]
 8003db2:	2300      	movs	r3, #0
 8003db4:	9300      	str	r3, [sp, #0]
 8003db6:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003dba:	68f8      	ldr	r0, [r7, #12]
 8003dbc:	f001 fdf0 	bl	80059a0 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003dc4:	b29b      	uxth	r3, r3
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	d19e      	bne.n	8003d08 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003dca:	697a      	ldr	r2, [r7, #20]
 8003dcc:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003dce:	68f8      	ldr	r0, [r7, #12]
 8003dd0:	f001 fcc3 	bl	800575a <I2C_WaitOnSTOPFlagUntilTimeout>
 8003dd4:	4603      	mov	r3, r0
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	d001      	beq.n	8003dde <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8003dda:	2301      	movs	r3, #1
 8003ddc:	e01a      	b.n	8003e14 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	2220      	movs	r2, #32
 8003de4:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	6859      	ldr	r1, [r3, #4]
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	681a      	ldr	r2, [r3, #0]
 8003df0:	4b0a      	ldr	r3, [pc, #40]	@ (8003e1c <HAL_I2C_Mem_Write+0x224>)
 8003df2:	400b      	ands	r3, r1
 8003df4:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	2220      	movs	r2, #32
 8003dfa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	2200      	movs	r2, #0
 8003e02:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	2200      	movs	r2, #0
 8003e0a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8003e0e:	2300      	movs	r3, #0
 8003e10:	e000      	b.n	8003e14 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8003e12:	2302      	movs	r3, #2
  }
}
 8003e14:	4618      	mov	r0, r3
 8003e16:	3718      	adds	r7, #24
 8003e18:	46bd      	mov	sp, r7
 8003e1a:	bd80      	pop	{r7, pc}
 8003e1c:	fe00e800 	.word	0xfe00e800

08003e20 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003e20:	b580      	push	{r7, lr}
 8003e22:	b088      	sub	sp, #32
 8003e24:	af02      	add	r7, sp, #8
 8003e26:	60f8      	str	r0, [r7, #12]
 8003e28:	4608      	mov	r0, r1
 8003e2a:	4611      	mov	r1, r2
 8003e2c:	461a      	mov	r2, r3
 8003e2e:	4603      	mov	r3, r0
 8003e30:	817b      	strh	r3, [r7, #10]
 8003e32:	460b      	mov	r3, r1
 8003e34:	813b      	strh	r3, [r7, #8]
 8003e36:	4613      	mov	r3, r2
 8003e38:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003e40:	b2db      	uxtb	r3, r3
 8003e42:	2b20      	cmp	r3, #32
 8003e44:	f040 80fd 	bne.w	8004042 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8003e48:	6a3b      	ldr	r3, [r7, #32]
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	d002      	beq.n	8003e54 <HAL_I2C_Mem_Read+0x34>
 8003e4e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8003e50:	2b00      	cmp	r3, #0
 8003e52:	d105      	bne.n	8003e60 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003e5a:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8003e5c:	2301      	movs	r3, #1
 8003e5e:	e0f1      	b.n	8004044 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003e66:	2b01      	cmp	r3, #1
 8003e68:	d101      	bne.n	8003e6e <HAL_I2C_Mem_Read+0x4e>
 8003e6a:	2302      	movs	r3, #2
 8003e6c:	e0ea      	b.n	8004044 <HAL_I2C_Mem_Read+0x224>
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	2201      	movs	r2, #1
 8003e72:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003e76:	f7ff f917 	bl	80030a8 <HAL_GetTick>
 8003e7a:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003e7c:	697b      	ldr	r3, [r7, #20]
 8003e7e:	9300      	str	r3, [sp, #0]
 8003e80:	2319      	movs	r3, #25
 8003e82:	2201      	movs	r2, #1
 8003e84:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8003e88:	68f8      	ldr	r0, [r7, #12]
 8003e8a:	f001 fbd0 	bl	800562e <I2C_WaitOnFlagUntilTimeout>
 8003e8e:	4603      	mov	r3, r0
 8003e90:	2b00      	cmp	r3, #0
 8003e92:	d001      	beq.n	8003e98 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8003e94:	2301      	movs	r3, #1
 8003e96:	e0d5      	b.n	8004044 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	2222      	movs	r2, #34	@ 0x22
 8003e9c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	2240      	movs	r2, #64	@ 0x40
 8003ea4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	2200      	movs	r2, #0
 8003eac:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	6a3a      	ldr	r2, [r7, #32]
 8003eb2:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8003eb8:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	2200      	movs	r2, #0
 8003ebe:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003ec0:	88f8      	ldrh	r0, [r7, #6]
 8003ec2:	893a      	ldrh	r2, [r7, #8]
 8003ec4:	8979      	ldrh	r1, [r7, #10]
 8003ec6:	697b      	ldr	r3, [r7, #20]
 8003ec8:	9301      	str	r3, [sp, #4]
 8003eca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003ecc:	9300      	str	r3, [sp, #0]
 8003ece:	4603      	mov	r3, r0
 8003ed0:	68f8      	ldr	r0, [r7, #12]
 8003ed2:	f000 fe51 	bl	8004b78 <I2C_RequestMemoryRead>
 8003ed6:	4603      	mov	r3, r0
 8003ed8:	2b00      	cmp	r3, #0
 8003eda:	d005      	beq.n	8003ee8 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	2200      	movs	r2, #0
 8003ee0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8003ee4:	2301      	movs	r3, #1
 8003ee6:	e0ad      	b.n	8004044 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003eec:	b29b      	uxth	r3, r3
 8003eee:	2bff      	cmp	r3, #255	@ 0xff
 8003ef0:	d90e      	bls.n	8003f10 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	22ff      	movs	r2, #255	@ 0xff
 8003ef6:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003efc:	b2da      	uxtb	r2, r3
 8003efe:	8979      	ldrh	r1, [r7, #10]
 8003f00:	4b52      	ldr	r3, [pc, #328]	@ (800404c <HAL_I2C_Mem_Read+0x22c>)
 8003f02:	9300      	str	r3, [sp, #0]
 8003f04:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8003f08:	68f8      	ldr	r0, [r7, #12]
 8003f0a:	f001 fd49 	bl	80059a0 <I2C_TransferConfig>
 8003f0e:	e00f      	b.n	8003f30 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003f14:	b29a      	uxth	r2, r3
 8003f16:	68fb      	ldr	r3, [r7, #12]
 8003f18:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003f1a:	68fb      	ldr	r3, [r7, #12]
 8003f1c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003f1e:	b2da      	uxtb	r2, r3
 8003f20:	8979      	ldrh	r1, [r7, #10]
 8003f22:	4b4a      	ldr	r3, [pc, #296]	@ (800404c <HAL_I2C_Mem_Read+0x22c>)
 8003f24:	9300      	str	r3, [sp, #0]
 8003f26:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003f2a:	68f8      	ldr	r0, [r7, #12]
 8003f2c:	f001 fd38 	bl	80059a0 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8003f30:	697b      	ldr	r3, [r7, #20]
 8003f32:	9300      	str	r3, [sp, #0]
 8003f34:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003f36:	2200      	movs	r2, #0
 8003f38:	2104      	movs	r1, #4
 8003f3a:	68f8      	ldr	r0, [r7, #12]
 8003f3c:	f001 fb77 	bl	800562e <I2C_WaitOnFlagUntilTimeout>
 8003f40:	4603      	mov	r3, r0
 8003f42:	2b00      	cmp	r3, #0
 8003f44:	d001      	beq.n	8003f4a <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8003f46:	2301      	movs	r3, #1
 8003f48:	e07c      	b.n	8004044 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f54:	b2d2      	uxtb	r2, r2
 8003f56:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f5c:	1c5a      	adds	r2, r3, #1
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003f66:	3b01      	subs	r3, #1
 8003f68:	b29a      	uxth	r2, r3
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003f72:	b29b      	uxth	r3, r3
 8003f74:	3b01      	subs	r3, #1
 8003f76:	b29a      	uxth	r2, r3
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003f80:	b29b      	uxth	r3, r3
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	d034      	beq.n	8003ff0 <HAL_I2C_Mem_Read+0x1d0>
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	d130      	bne.n	8003ff0 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003f8e:	697b      	ldr	r3, [r7, #20]
 8003f90:	9300      	str	r3, [sp, #0]
 8003f92:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003f94:	2200      	movs	r2, #0
 8003f96:	2180      	movs	r1, #128	@ 0x80
 8003f98:	68f8      	ldr	r0, [r7, #12]
 8003f9a:	f001 fb48 	bl	800562e <I2C_WaitOnFlagUntilTimeout>
 8003f9e:	4603      	mov	r3, r0
 8003fa0:	2b00      	cmp	r3, #0
 8003fa2:	d001      	beq.n	8003fa8 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8003fa4:	2301      	movs	r3, #1
 8003fa6:	e04d      	b.n	8004044 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003fac:	b29b      	uxth	r3, r3
 8003fae:	2bff      	cmp	r3, #255	@ 0xff
 8003fb0:	d90e      	bls.n	8003fd0 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	22ff      	movs	r2, #255	@ 0xff
 8003fb6:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003fbc:	b2da      	uxtb	r2, r3
 8003fbe:	8979      	ldrh	r1, [r7, #10]
 8003fc0:	2300      	movs	r3, #0
 8003fc2:	9300      	str	r3, [sp, #0]
 8003fc4:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8003fc8:	68f8      	ldr	r0, [r7, #12]
 8003fca:	f001 fce9 	bl	80059a0 <I2C_TransferConfig>
 8003fce:	e00f      	b.n	8003ff0 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003fd4:	b29a      	uxth	r2, r3
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003fde:	b2da      	uxtb	r2, r3
 8003fe0:	8979      	ldrh	r1, [r7, #10]
 8003fe2:	2300      	movs	r3, #0
 8003fe4:	9300      	str	r3, [sp, #0]
 8003fe6:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003fea:	68f8      	ldr	r0, [r7, #12]
 8003fec:	f001 fcd8 	bl	80059a0 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003ff4:	b29b      	uxth	r3, r3
 8003ff6:	2b00      	cmp	r3, #0
 8003ff8:	d19a      	bne.n	8003f30 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003ffa:	697a      	ldr	r2, [r7, #20]
 8003ffc:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003ffe:	68f8      	ldr	r0, [r7, #12]
 8004000:	f001 fbab 	bl	800575a <I2C_WaitOnSTOPFlagUntilTimeout>
 8004004:	4603      	mov	r3, r0
 8004006:	2b00      	cmp	r3, #0
 8004008:	d001      	beq.n	800400e <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 800400a:	2301      	movs	r3, #1
 800400c:	e01a      	b.n	8004044 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	2220      	movs	r2, #32
 8004014:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	6859      	ldr	r1, [r3, #4]
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	681a      	ldr	r2, [r3, #0]
 8004020:	4b0b      	ldr	r3, [pc, #44]	@ (8004050 <HAL_I2C_Mem_Read+0x230>)
 8004022:	400b      	ands	r3, r1
 8004024:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	2220      	movs	r2, #32
 800402a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	2200      	movs	r2, #0
 8004032:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004036:	68fb      	ldr	r3, [r7, #12]
 8004038:	2200      	movs	r2, #0
 800403a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800403e:	2300      	movs	r3, #0
 8004040:	e000      	b.n	8004044 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8004042:	2302      	movs	r3, #2
  }
}
 8004044:	4618      	mov	r0, r3
 8004046:	3718      	adds	r7, #24
 8004048:	46bd      	mov	sp, r7
 800404a:	bd80      	pop	{r7, pc}
 800404c:	80002400 	.word	0x80002400
 8004050:	fe00e800 	.word	0xfe00e800

08004054 <HAL_I2C_Mem_Read_DMA>:
  * @param  Size Amount of data to be read
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                       uint16_t MemAddSize, uint8_t *pData, uint16_t Size)
{
 8004054:	b580      	push	{r7, lr}
 8004056:	b088      	sub	sp, #32
 8004058:	af02      	add	r7, sp, #8
 800405a:	60f8      	str	r0, [r7, #12]
 800405c:	4608      	mov	r0, r1
 800405e:	4611      	mov	r1, r2
 8004060:	461a      	mov	r2, r3
 8004062:	4603      	mov	r3, r0
 8004064:	817b      	strh	r3, [r7, #10]
 8004066:	460b      	mov	r3, r1
 8004068:	813b      	strh	r3, [r7, #8]
 800406a:	4613      	mov	r3, r2
 800406c:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef dmaxferstatus;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004074:	b2db      	uxtb	r3, r3
 8004076:	2b20      	cmp	r3, #32
 8004078:	f040 80c2 	bne.w	8004200 <HAL_I2C_Mem_Read_DMA+0x1ac>
  {
    if ((pData == NULL) || (Size == 0U))
 800407c:	6a3b      	ldr	r3, [r7, #32]
 800407e:	2b00      	cmp	r3, #0
 8004080:	d002      	beq.n	8004088 <HAL_I2C_Mem_Read_DMA+0x34>
 8004082:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8004084:	2b00      	cmp	r3, #0
 8004086:	d105      	bne.n	8004094 <HAL_I2C_Mem_Read_DMA+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800408e:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8004090:	2301      	movs	r3, #1
 8004092:	e0b6      	b.n	8004202 <HAL_I2C_Mem_Read_DMA+0x1ae>
    }

    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	699b      	ldr	r3, [r3, #24]
 800409a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800409e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80040a2:	d101      	bne.n	80040a8 <HAL_I2C_Mem_Read_DMA+0x54>
    {
      return HAL_BUSY;
 80040a4:	2302      	movs	r3, #2
 80040a6:	e0ac      	b.n	8004202 <HAL_I2C_Mem_Read_DMA+0x1ae>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80040ae:	2b01      	cmp	r3, #1
 80040b0:	d101      	bne.n	80040b6 <HAL_I2C_Mem_Read_DMA+0x62>
 80040b2:	2302      	movs	r3, #2
 80040b4:	e0a5      	b.n	8004202 <HAL_I2C_Mem_Read_DMA+0x1ae>
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	2201      	movs	r2, #1
 80040ba:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	2222      	movs	r2, #34	@ 0x22
 80040c2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode        = HAL_I2C_MODE_MEM;
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	2240      	movs	r2, #64	@ 0x40
 80040ca:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	2200      	movs	r2, #0
 80040d2:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	6a3a      	ldr	r2, [r7, #32]
 80040d8:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80040de:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	4a4a      	ldr	r2, [pc, #296]	@ (800420c <HAL_I2C_Mem_Read_DMA+0x1b8>)
 80040e4:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->XferISR     = I2C_Mem_ISR_DMA;
 80040e6:	68fb      	ldr	r3, [r7, #12]
 80040e8:	4a49      	ldr	r2, [pc, #292]	@ (8004210 <HAL_I2C_Mem_Read_DMA+0x1bc>)
 80040ea:	635a      	str	r2, [r3, #52]	@ 0x34
    hi2c->Devaddress  = DevAddress;
 80040ec:	897a      	ldrh	r2, [r7, #10]
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	64da      	str	r2, [r3, #76]	@ 0x4c

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80040f2:	68fb      	ldr	r3, [r7, #12]
 80040f4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80040f6:	b29b      	uxth	r3, r3
 80040f8:	2bff      	cmp	r3, #255	@ 0xff
 80040fa:	d903      	bls.n	8004104 <HAL_I2C_Mem_Read_DMA+0xb0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	22ff      	movs	r2, #255	@ 0xff
 8004100:	851a      	strh	r2, [r3, #40]	@ 0x28
 8004102:	e004      	b.n	800410e <HAL_I2C_Mem_Read_DMA+0xba>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004108:	b29a      	uxth	r2, r3
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	851a      	strh	r2, [r3, #40]	@ 0x28
    }

    /* If Memory address size is 8Bit */
    if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800410e:	88fb      	ldrh	r3, [r7, #6]
 8004110:	2b01      	cmp	r3, #1
 8004112:	d109      	bne.n	8004128 <HAL_I2C_Mem_Read_DMA+0xd4>
    {
      /* Prefetch Memory Address */
      hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004114:	893b      	ldrh	r3, [r7, #8]
 8004116:	b2da      	uxtb	r2, r3
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Reset Memaddress content */
      hi2c->Memaddress = 0xFFFFFFFFU;
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8004124:	651a      	str	r2, [r3, #80]	@ 0x50
 8004126:	e00b      	b.n	8004140 <HAL_I2C_Mem_Read_DMA+0xec>
    }
    /* If Memory address size is 16Bit */
    else
    {
      /* Prefetch Memory Address (MSB part, LSB will be manage through interrupt) */
      hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8004128:	893b      	ldrh	r3, [r7, #8]
 800412a:	0a1b      	lsrs	r3, r3, #8
 800412c:	b29b      	uxth	r3, r3
 800412e:	b2da      	uxtb	r2, r3
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Prepare Memaddress buffer for LSB part */
      hi2c->Memaddress = I2C_MEM_ADD_LSB(MemAddress);
 8004136:	893b      	ldrh	r3, [r7, #8]
 8004138:	b2db      	uxtb	r3, r3
 800413a:	461a      	mov	r2, r3
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	651a      	str	r2, [r3, #80]	@ 0x50
    }

    if (hi2c->hdmarx != NULL)
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004144:	2b00      	cmp	r3, #0
 8004146:	d020      	beq.n	800418a <HAL_I2C_Mem_Read_DMA+0x136>
    {
      /* Set the I2C DMA transfer complete callback */
      hi2c->hdmarx->XferCpltCallback = I2C_DMAMasterReceiveCplt;
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800414c:	4a31      	ldr	r2, [pc, #196]	@ (8004214 <HAL_I2C_Mem_Read_DMA+0x1c0>)
 800414e:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Set the DMA error callback */
      hi2c->hdmarx->XferErrorCallback = I2C_DMAError;
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004154:	4a30      	ldr	r2, [pc, #192]	@ (8004218 <HAL_I2C_Mem_Read_DMA+0x1c4>)
 8004156:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Set the unused DMA callbacks to NULL */
      hi2c->hdmarx->XferHalfCpltCallback = NULL;
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800415c:	2200      	movs	r2, #0
 800415e:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->hdmarx->XferAbortCallback = NULL;
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004164:	2200      	movs	r2, #0
 8004166:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Enable the DMA channel */
      dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)pData,
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	3324      	adds	r3, #36	@ 0x24
 8004172:	4619      	mov	r1, r3
 8004174:	6a3a      	ldr	r2, [r7, #32]
                                       hi2c->XferSize);
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
      dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)pData,
 800417a:	f7ff f95f 	bl	800343c <HAL_DMA_Start_IT>
 800417e:	4603      	mov	r3, r0
 8004180:	75fb      	strb	r3, [r7, #23]
      __HAL_UNLOCK(hi2c);

      return HAL_ERROR;
    }

    if (dmaxferstatus == HAL_OK)
 8004182:	7dfb      	ldrb	r3, [r7, #23]
 8004184:	2b00      	cmp	r3, #0
 8004186:	d127      	bne.n	80041d8 <HAL_I2C_Mem_Read_DMA+0x184>
 8004188:	e013      	b.n	80041b2 <HAL_I2C_Mem_Read_DMA+0x15e>
      hi2c->State     = HAL_I2C_STATE_READY;
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	2220      	movs	r2, #32
 800418e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      hi2c->Mode      = HAL_I2C_MODE_NONE;
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	2200      	movs	r2, #0
 8004196:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 800419a:	68fb      	ldr	r3, [r7, #12]
 800419c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800419e:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 80041a2:	68fb      	ldr	r3, [r7, #12]
 80041a4:	645a      	str	r2, [r3, #68]	@ 0x44
      __HAL_UNLOCK(hi2c);
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	2200      	movs	r2, #0
 80041aa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 80041ae:	2301      	movs	r3, #1
 80041b0:	e027      	b.n	8004202 <HAL_I2C_Mem_Read_DMA+0x1ae>
    {
      /* Send Slave Address and Memory Address */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 80041b2:	88fb      	ldrh	r3, [r7, #6]
 80041b4:	b2da      	uxtb	r2, r3
 80041b6:	8979      	ldrh	r1, [r7, #10]
 80041b8:	4b18      	ldr	r3, [pc, #96]	@ (800421c <HAL_I2C_Mem_Read_DMA+0x1c8>)
 80041ba:	9300      	str	r3, [sp, #0]
 80041bc:	2300      	movs	r3, #0
 80041be:	68f8      	ldr	r0, [r7, #12]
 80041c0:	f001 fbee 	bl	80059a0 <I2C_TransferConfig>

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	2200      	movs	r2, #0
 80041c8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
                process unlock */
      /* Enable ERR, TC, STOP, NACK, TXI interrupt */
      /* possible to enable all of these */
      /* I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI |
        I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
      I2C_Enable_IRQ(hi2c, I2C_XFER_TX_IT);
 80041cc:	2101      	movs	r1, #1
 80041ce:	68f8      	ldr	r0, [r7, #12]
 80041d0:	f001 fc18 	bl	8005a04 <I2C_Enable_IRQ>
      __HAL_UNLOCK(hi2c);

      return HAL_ERROR;
    }

    return HAL_OK;
 80041d4:	2300      	movs	r3, #0
 80041d6:	e014      	b.n	8004202 <HAL_I2C_Mem_Read_DMA+0x1ae>
      hi2c->State     = HAL_I2C_STATE_READY;
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	2220      	movs	r2, #32
 80041dc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      hi2c->Mode      = HAL_I2C_MODE_NONE;
 80041e0:	68fb      	ldr	r3, [r7, #12]
 80041e2:	2200      	movs	r2, #0
 80041e4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80041ec:	f043 0210 	orr.w	r2, r3, #16
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	645a      	str	r2, [r3, #68]	@ 0x44
      __HAL_UNLOCK(hi2c);
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	2200      	movs	r2, #0
 80041f8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 80041fc:	2301      	movs	r3, #1
 80041fe:	e000      	b.n	8004202 <HAL_I2C_Mem_Read_DMA+0x1ae>
  }
  else
  {
    return HAL_BUSY;
 8004200:	2302      	movs	r3, #2
  }
}
 8004202:	4618      	mov	r0, r3
 8004204:	3718      	adds	r7, #24
 8004206:	46bd      	mov	sp, r7
 8004208:	bd80      	pop	{r7, pc}
 800420a:	bf00      	nop
 800420c:	ffff0000 	.word	0xffff0000
 8004210:	080046d9 	.word	0x080046d9
 8004214:	0800552f 	.word	0x0800552f
 8004218:	080055c5 	.word	0x080055c5
 800421c:	80002000 	.word	0x80002000

08004220 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c) /* Derogation MISRAC2012-Rule-8.13 */
{
 8004220:	b580      	push	{r7, lr}
 8004222:	b084      	sub	sp, #16
 8004224:	af00      	add	r7, sp, #0
 8004226:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	699b      	ldr	r3, [r3, #24]
 800422e:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800423c:	2b00      	cmp	r3, #0
 800423e:	d005      	beq.n	800424c <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004244:	68ba      	ldr	r2, [r7, #8]
 8004246:	68f9      	ldr	r1, [r7, #12]
 8004248:	6878      	ldr	r0, [r7, #4]
 800424a:	4798      	blx	r3
  }
}
 800424c:	bf00      	nop
 800424e:	3710      	adds	r7, #16
 8004250:	46bd      	mov	sp, r7
 8004252:	bd80      	pop	{r7, pc}

08004254 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004254:	b480      	push	{r7}
 8004256:	b083      	sub	sp, #12
 8004258:	af00      	add	r7, sp, #0
 800425a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 800425c:	bf00      	nop
 800425e:	370c      	adds	r7, #12
 8004260:	46bd      	mov	sp, r7
 8004262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004266:	4770      	bx	lr

08004268 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004268:	b480      	push	{r7}
 800426a:	b083      	sub	sp, #12
 800426c:	af00      	add	r7, sp, #0
 800426e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8004270:	bf00      	nop
 8004272:	370c      	adds	r7, #12
 8004274:	46bd      	mov	sp, r7
 8004276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800427a:	4770      	bx	lr

0800427c <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800427c:	b480      	push	{r7}
 800427e:	b083      	sub	sp, #12
 8004280:	af00      	add	r7, sp, #0
 8004282:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8004284:	bf00      	nop
 8004286:	370c      	adds	r7, #12
 8004288:	46bd      	mov	sp, r7
 800428a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800428e:	4770      	bx	lr

08004290 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004290:	b480      	push	{r7}
 8004292:	b083      	sub	sp, #12
 8004294:	af00      	add	r7, sp, #0
 8004296:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8004298:	bf00      	nop
 800429a:	370c      	adds	r7, #12
 800429c:	46bd      	mov	sp, r7
 800429e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042a2:	4770      	bx	lr

080042a4 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 80042a4:	b480      	push	{r7}
 80042a6:	b083      	sub	sp, #12
 80042a8:	af00      	add	r7, sp, #0
 80042aa:	6078      	str	r0, [r7, #4]
 80042ac:	460b      	mov	r3, r1
 80042ae:	70fb      	strb	r3, [r7, #3]
 80042b0:	4613      	mov	r3, r2
 80042b2:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 80042b4:	bf00      	nop
 80042b6:	370c      	adds	r7, #12
 80042b8:	46bd      	mov	sp, r7
 80042ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042be:	4770      	bx	lr

080042c0 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80042c0:	b480      	push	{r7}
 80042c2:	b083      	sub	sp, #12
 80042c4:	af00      	add	r7, sp, #0
 80042c6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 80042c8:	bf00      	nop
 80042ca:	370c      	adds	r7, #12
 80042cc:	46bd      	mov	sp, r7
 80042ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042d2:	4770      	bx	lr

080042d4 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80042d4:	b480      	push	{r7}
 80042d6:	b083      	sub	sp, #12
 80042d8:	af00      	add	r7, sp, #0
 80042da:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 80042dc:	bf00      	nop
 80042de:	370c      	adds	r7, #12
 80042e0:	46bd      	mov	sp, r7
 80042e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042e6:	4770      	bx	lr

080042e8 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 80042e8:	b480      	push	{r7}
 80042ea:	b083      	sub	sp, #12
 80042ec:	af00      	add	r7, sp, #0
 80042ee:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 80042f0:	bf00      	nop
 80042f2:	370c      	adds	r7, #12
 80042f4:	46bd      	mov	sp, r7
 80042f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042fa:	4770      	bx	lr

080042fc <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80042fc:	b480      	push	{r7}
 80042fe:	b083      	sub	sp, #12
 8004300:	af00      	add	r7, sp, #0
 8004302:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8004304:	bf00      	nop
 8004306:	370c      	adds	r7, #12
 8004308:	46bd      	mov	sp, r7
 800430a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800430e:	4770      	bx	lr

08004310 <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 8004310:	b580      	push	{r7, lr}
 8004312:	b086      	sub	sp, #24
 8004314:	af00      	add	r7, sp, #0
 8004316:	60f8      	str	r0, [r7, #12]
 8004318:	60b9      	str	r1, [r7, #8]
 800431a:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004320:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 8004322:	68bb      	ldr	r3, [r7, #8]
 8004324:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 8004326:	68fb      	ldr	r3, [r7, #12]
 8004328:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800432c:	2b01      	cmp	r3, #1
 800432e:	d101      	bne.n	8004334 <I2C_Slave_ISR_IT+0x24>
 8004330:	2302      	movs	r3, #2
 8004332:	e0e1      	b.n	80044f8 <I2C_Slave_ISR_IT+0x1e8>
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	2201      	movs	r2, #1
 8004338:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 800433c:	693b      	ldr	r3, [r7, #16]
 800433e:	f003 0320 	and.w	r3, r3, #32
 8004342:	2b00      	cmp	r3, #0
 8004344:	d008      	beq.n	8004358 <I2C_Slave_ISR_IT+0x48>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	f003 0320 	and.w	r3, r3, #32
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 800434c:	2b00      	cmp	r3, #0
 800434e:	d003      	beq.n	8004358 <I2C_Slave_ISR_IT+0x48>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 8004350:	6939      	ldr	r1, [r7, #16]
 8004352:	68f8      	ldr	r0, [r7, #12]
 8004354:	f000 fe4a 	bl	8004fec <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8004358:	693b      	ldr	r3, [r7, #16]
 800435a:	f003 0310 	and.w	r3, r3, #16
 800435e:	2b00      	cmp	r3, #0
 8004360:	d04b      	beq.n	80043fa <I2C_Slave_ISR_IT+0xea>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8004368:	2b00      	cmp	r3, #0
 800436a:	d046      	beq.n	80043fa <I2C_Slave_ISR_IT+0xea>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004370:	b29b      	uxth	r3, r3
 8004372:	2b00      	cmp	r3, #0
 8004374:	d128      	bne.n	80043c8 <I2C_Slave_ISR_IT+0xb8>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800437c:	b2db      	uxtb	r3, r3
 800437e:	2b28      	cmp	r3, #40	@ 0x28
 8004380:	d108      	bne.n	8004394 <I2C_Slave_ISR_IT+0x84>
 8004382:	697b      	ldr	r3, [r7, #20]
 8004384:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8004388:	d104      	bne.n	8004394 <I2C_Slave_ISR_IT+0x84>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 800438a:	6939      	ldr	r1, [r7, #16]
 800438c:	68f8      	ldr	r0, [r7, #12]
 800438e:	f000 ff3f 	bl	8005210 <I2C_ITListenCplt>
 8004392:	e031      	b.n	80043f8 <I2C_Slave_ISR_IT+0xe8>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800439a:	b2db      	uxtb	r3, r3
 800439c:	2b29      	cmp	r3, #41	@ 0x29
 800439e:	d10e      	bne.n	80043be <I2C_Slave_ISR_IT+0xae>
 80043a0:	697b      	ldr	r3, [r7, #20]
 80043a2:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80043a6:	d00a      	beq.n	80043be <I2C_Slave_ISR_IT+0xae>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	2210      	movs	r2, #16
 80043ae:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 80043b0:	68f8      	ldr	r0, [r7, #12]
 80043b2:	f001 f898 	bl	80054e6 <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 80043b6:	68f8      	ldr	r0, [r7, #12]
 80043b8:	f000 fcf3 	bl	8004da2 <I2C_ITSlaveSeqCplt>
 80043bc:	e01c      	b.n	80043f8 <I2C_Slave_ISR_IT+0xe8>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80043be:	68fb      	ldr	r3, [r7, #12]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	2210      	movs	r2, #16
 80043c4:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 80043c6:	e08f      	b.n	80044e8 <I2C_Slave_ISR_IT+0x1d8>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	2210      	movs	r2, #16
 80043ce:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80043d0:	68fb      	ldr	r3, [r7, #12]
 80043d2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80043d4:	f043 0204 	orr.w	r2, r3, #4
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 80043dc:	697b      	ldr	r3, [r7, #20]
 80043de:	2b00      	cmp	r3, #0
 80043e0:	d003      	beq.n	80043ea <I2C_Slave_ISR_IT+0xda>
 80043e2:	697b      	ldr	r3, [r7, #20]
 80043e4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80043e8:	d17e      	bne.n	80044e8 <I2C_Slave_ISR_IT+0x1d8>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80043ee:	4619      	mov	r1, r3
 80043f0:	68f8      	ldr	r0, [r7, #12]
 80043f2:	f000 ff61 	bl	80052b8 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 80043f6:	e077      	b.n	80044e8 <I2C_Slave_ISR_IT+0x1d8>
 80043f8:	e076      	b.n	80044e8 <I2C_Slave_ISR_IT+0x1d8>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 80043fa:	693b      	ldr	r3, [r7, #16]
 80043fc:	f003 0304 	and.w	r3, r3, #4
 8004400:	2b00      	cmp	r3, #0
 8004402:	d02f      	beq.n	8004464 <I2C_Slave_ISR_IT+0x154>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	f003 0304 	and.w	r3, r3, #4
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 800440a:	2b00      	cmp	r3, #0
 800440c:	d02a      	beq.n	8004464 <I2C_Slave_ISR_IT+0x154>
  {
    if (hi2c->XferCount > 0U)
 800440e:	68fb      	ldr	r3, [r7, #12]
 8004410:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004412:	b29b      	uxth	r3, r3
 8004414:	2b00      	cmp	r3, #0
 8004416:	d018      	beq.n	800444a <I2C_Slave_ISR_IT+0x13a>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800441e:	68fb      	ldr	r3, [r7, #12]
 8004420:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004422:	b2d2      	uxtb	r2, r2
 8004424:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004426:	68fb      	ldr	r3, [r7, #12]
 8004428:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800442a:	1c5a      	adds	r2, r3, #1
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004434:	3b01      	subs	r3, #1
 8004436:	b29a      	uxth	r2, r3
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004440:	b29b      	uxth	r3, r3
 8004442:	3b01      	subs	r3, #1
 8004444:	b29a      	uxth	r2, r3
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 800444a:	68fb      	ldr	r3, [r7, #12]
 800444c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800444e:	b29b      	uxth	r3, r3
 8004450:	2b00      	cmp	r3, #0
 8004452:	d14b      	bne.n	80044ec <I2C_Slave_ISR_IT+0x1dc>
 8004454:	697b      	ldr	r3, [r7, #20]
 8004456:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800445a:	d047      	beq.n	80044ec <I2C_Slave_ISR_IT+0x1dc>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 800445c:	68f8      	ldr	r0, [r7, #12]
 800445e:	f000 fca0 	bl	8004da2 <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 8004462:	e043      	b.n	80044ec <I2C_Slave_ISR_IT+0x1dc>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8004464:	693b      	ldr	r3, [r7, #16]
 8004466:	f003 0308 	and.w	r3, r3, #8
 800446a:	2b00      	cmp	r3, #0
 800446c:	d009      	beq.n	8004482 <I2C_Slave_ISR_IT+0x172>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	f003 0308 	and.w	r3, r3, #8
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8004474:	2b00      	cmp	r3, #0
 8004476:	d004      	beq.n	8004482 <I2C_Slave_ISR_IT+0x172>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 8004478:	6939      	ldr	r1, [r7, #16]
 800447a:	68f8      	ldr	r0, [r7, #12]
 800447c:	f000 fbd0 	bl	8004c20 <I2C_ITAddrCplt>
 8004480:	e035      	b.n	80044ee <I2C_Slave_ISR_IT+0x1de>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8004482:	693b      	ldr	r3, [r7, #16]
 8004484:	f003 0302 	and.w	r3, r3, #2
 8004488:	2b00      	cmp	r3, #0
 800448a:	d030      	beq.n	80044ee <I2C_Slave_ISR_IT+0x1de>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	f003 0302 	and.w	r3, r3, #2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8004492:	2b00      	cmp	r3, #0
 8004494:	d02b      	beq.n	80044ee <I2C_Slave_ISR_IT+0x1de>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 8004496:	68fb      	ldr	r3, [r7, #12]
 8004498:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800449a:	b29b      	uxth	r3, r3
 800449c:	2b00      	cmp	r3, #0
 800449e:	d018      	beq.n	80044d2 <I2C_Slave_ISR_IT+0x1c2>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80044a0:	68fb      	ldr	r3, [r7, #12]
 80044a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80044a4:	781a      	ldrb	r2, [r3, #0]
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80044b0:	1c5a      	adds	r2, r3, #1
 80044b2:	68fb      	ldr	r3, [r7, #12]
 80044b4:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 80044b6:	68fb      	ldr	r3, [r7, #12]
 80044b8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80044ba:	b29b      	uxth	r3, r3
 80044bc:	3b01      	subs	r3, #1
 80044be:	b29a      	uxth	r2, r3
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80044c8:	3b01      	subs	r3, #1
 80044ca:	b29a      	uxth	r2, r3
 80044cc:	68fb      	ldr	r3, [r7, #12]
 80044ce:	851a      	strh	r2, [r3, #40]	@ 0x28
 80044d0:	e00d      	b.n	80044ee <I2C_Slave_ISR_IT+0x1de>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 80044d2:	697b      	ldr	r3, [r7, #20]
 80044d4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80044d8:	d002      	beq.n	80044e0 <I2C_Slave_ISR_IT+0x1d0>
 80044da:	697b      	ldr	r3, [r7, #20]
 80044dc:	2b00      	cmp	r3, #0
 80044de:	d106      	bne.n	80044ee <I2C_Slave_ISR_IT+0x1de>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 80044e0:	68f8      	ldr	r0, [r7, #12]
 80044e2:	f000 fc5e 	bl	8004da2 <I2C_ITSlaveSeqCplt>
 80044e6:	e002      	b.n	80044ee <I2C_Slave_ISR_IT+0x1de>
    if (hi2c->XferCount == 0U)
 80044e8:	bf00      	nop
 80044ea:	e000      	b.n	80044ee <I2C_Slave_ISR_IT+0x1de>
    if ((hi2c->XferCount == 0U) && \
 80044ec:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 80044ee:	68fb      	ldr	r3, [r7, #12]
 80044f0:	2200      	movs	r2, #0
 80044f2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 80044f6:	2300      	movs	r3, #0
}
 80044f8:	4618      	mov	r0, r3
 80044fa:	3718      	adds	r7, #24
 80044fc:	46bd      	mov	sp, r7
 80044fe:	bd80      	pop	{r7, pc}

08004500 <I2C_Master_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                            uint32_t ITSources)
{
 8004500:	b580      	push	{r7, lr}
 8004502:	b088      	sub	sp, #32
 8004504:	af02      	add	r7, sp, #8
 8004506:	60f8      	str	r0, [r7, #12]
 8004508:	60b9      	str	r1, [r7, #8]
 800450a:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t xfermode;

  /* Process Locked */
  __HAL_LOCK(hi2c);
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004512:	2b01      	cmp	r3, #1
 8004514:	d101      	bne.n	800451a <I2C_Master_ISR_DMA+0x1a>
 8004516:	2302      	movs	r3, #2
 8004518:	e0d9      	b.n	80046ce <I2C_Master_ISR_DMA+0x1ce>
 800451a:	68fb      	ldr	r3, [r7, #12]
 800451c:	2201      	movs	r2, #1
 800451e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8004522:	68bb      	ldr	r3, [r7, #8]
 8004524:	f003 0310 	and.w	r3, r3, #16
 8004528:	2b00      	cmp	r3, #0
 800452a:	d016      	beq.n	800455a <I2C_Master_ISR_DMA+0x5a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8004532:	2b00      	cmp	r3, #0
 8004534:	d011      	beq.n	800455a <I2C_Master_ISR_DMA+0x5a>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004536:	68fb      	ldr	r3, [r7, #12]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	2210      	movs	r2, #16
 800453c:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800453e:	68fb      	ldr	r3, [r7, #12]
 8004540:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004542:	f043 0204 	orr.w	r2, r3, #4
 8004546:	68fb      	ldr	r3, [r7, #12]
 8004548:	645a      	str	r2, [r3, #68]	@ 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 800454a:	2120      	movs	r1, #32
 800454c:	68f8      	ldr	r0, [r7, #12]
 800454e:	f001 fa59 	bl	8005a04 <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8004552:	68f8      	ldr	r0, [r7, #12]
 8004554:	f000 ffc7 	bl	80054e6 <I2C_Flush_TXDR>
 8004558:	e0b4      	b.n	80046c4 <I2C_Master_ISR_DMA+0x1c4>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 800455a:	68bb      	ldr	r3, [r7, #8]
 800455c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004560:	2b00      	cmp	r3, #0
 8004562:	d071      	beq.n	8004648 <I2C_Master_ISR_DMA+0x148>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 800456a:	2b00      	cmp	r3, #0
 800456c:	d06c      	beq.n	8004648 <I2C_Master_ISR_DMA+0x148>
  {
    /* Disable TC interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_TCI);
 800456e:	68fb      	ldr	r3, [r7, #12]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	681a      	ldr	r2, [r3, #0]
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800457c:	601a      	str	r2, [r3, #0]

    if (hi2c->XferCount != 0U)
 800457e:	68fb      	ldr	r3, [r7, #12]
 8004580:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004582:	b29b      	uxth	r3, r3
 8004584:	2b00      	cmp	r3, #0
 8004586:	d04e      	beq.n	8004626 <I2C_Master_ISR_DMA+0x126>
    {
      /* Recover Slave address */
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	685b      	ldr	r3, [r3, #4]
 800458e:	b29b      	uxth	r3, r3
 8004590:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004594:	827b      	strh	r3, [r7, #18]

      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004596:	68fb      	ldr	r3, [r7, #12]
 8004598:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800459a:	b29b      	uxth	r3, r3
 800459c:	2bff      	cmp	r3, #255	@ 0xff
 800459e:	d906      	bls.n	80045ae <I2C_Master_ISR_DMA+0xae>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	22ff      	movs	r2, #255	@ 0xff
 80045a4:	851a      	strh	r2, [r3, #40]	@ 0x28
        xfermode = I2C_RELOAD_MODE;
 80045a6:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80045aa:	617b      	str	r3, [r7, #20]
 80045ac:	e010      	b.n	80045d0 <I2C_Master_ISR_DMA+0xd0>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 80045ae:	68fb      	ldr	r3, [r7, #12]
 80045b0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80045b2:	b29a      	uxth	r2, r3
 80045b4:	68fb      	ldr	r3, [r7, #12]
 80045b6:	851a      	strh	r2, [r3, #40]	@ 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80045bc:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80045c0:	d003      	beq.n	80045ca <I2C_Master_ISR_DMA+0xca>
        {
          xfermode = hi2c->XferOptions;
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80045c6:	617b      	str	r3, [r7, #20]
 80045c8:	e002      	b.n	80045d0 <I2C_Master_ISR_DMA+0xd0>
        }
        else
        {
          xfermode = I2C_AUTOEND_MODE;
 80045ca:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80045ce:	617b      	str	r3, [r7, #20]
        }
      }

      /* Set the new XferSize in Nbytes register */
      I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, xfermode, I2C_NO_STARTSTOP);
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80045d4:	b2da      	uxtb	r2, r3
 80045d6:	8a79      	ldrh	r1, [r7, #18]
 80045d8:	2300      	movs	r3, #0
 80045da:	9300      	str	r3, [sp, #0]
 80045dc:	697b      	ldr	r3, [r7, #20]
 80045de:	68f8      	ldr	r0, [r7, #12]
 80045e0:	f001 f9de 	bl	80059a0 <I2C_TransferConfig>

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 80045e4:	68fb      	ldr	r3, [r7, #12]
 80045e6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80045e8:	b29a      	uxth	r2, r3
 80045ea:	68fb      	ldr	r3, [r7, #12]
 80045ec:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80045ee:	1ad3      	subs	r3, r2, r3
 80045f0:	b29a      	uxth	r2, r3
 80045f2:	68fb      	ldr	r3, [r7, #12]
 80045f4:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80045f6:	68fb      	ldr	r3, [r7, #12]
 80045f8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80045fc:	b2db      	uxtb	r3, r3
 80045fe:	2b22      	cmp	r3, #34	@ 0x22
 8004600:	d108      	bne.n	8004614 <I2C_Master_ISR_DMA+0x114>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8004602:	68fb      	ldr	r3, [r7, #12]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	681a      	ldr	r2, [r3, #0]
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004610:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8004612:	e057      	b.n	80046c4 <I2C_Master_ISR_DMA+0x1c4>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	681a      	ldr	r2, [r3, #0]
 800461a:	68fb      	ldr	r3, [r7, #12]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004622:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8004624:	e04e      	b.n	80046c4 <I2C_Master_ISR_DMA+0x1c4>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	685b      	ldr	r3, [r3, #4]
 800462c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004630:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8004634:	d003      	beq.n	800463e <I2C_Master_ISR_DMA+0x13e>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 8004636:	68f8      	ldr	r0, [r7, #12]
 8004638:	f000 fb76 	bl	8004d28 <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount != 0U)
 800463c:	e042      	b.n	80046c4 <I2C_Master_ISR_DMA+0x1c4>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 800463e:	2140      	movs	r1, #64	@ 0x40
 8004640:	68f8      	ldr	r0, [r7, #12]
 8004642:	f000 fe39 	bl	80052b8 <I2C_ITError>
    if (hi2c->XferCount != 0U)
 8004646:	e03d      	b.n	80046c4 <I2C_Master_ISR_DMA+0x1c4>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8004648:	68bb      	ldr	r3, [r7, #8]
 800464a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800464e:	2b00      	cmp	r3, #0
 8004650:	d028      	beq.n	80046a4 <I2C_Master_ISR_DMA+0x1a4>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8004658:	2b00      	cmp	r3, #0
 800465a:	d023      	beq.n	80046a4 <I2C_Master_ISR_DMA+0x1a4>
  {
    if (hi2c->XferCount == 0U)
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004660:	b29b      	uxth	r3, r3
 8004662:	2b00      	cmp	r3, #0
 8004664:	d119      	bne.n	800469a <I2C_Master_ISR_DMA+0x19a>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	685b      	ldr	r3, [r3, #4]
 800466c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004670:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8004674:	d025      	beq.n	80046c2 <I2C_Master_ISR_DMA+0x1c2>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 8004676:	68fb      	ldr	r3, [r7, #12]
 8004678:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800467a:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800467e:	d108      	bne.n	8004692 <I2C_Master_ISR_DMA+0x192>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	685a      	ldr	r2, [r3, #4]
 8004686:	68fb      	ldr	r3, [r7, #12]
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800468e:	605a      	str	r2, [r3, #4]
    if (hi2c->XferCount == 0U)
 8004690:	e017      	b.n	80046c2 <I2C_Master_ISR_DMA+0x1c2>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 8004692:	68f8      	ldr	r0, [r7, #12]
 8004694:	f000 fb48 	bl	8004d28 <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount == 0U)
 8004698:	e013      	b.n	80046c2 <I2C_Master_ISR_DMA+0x1c2>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 800469a:	2140      	movs	r1, #64	@ 0x40
 800469c:	68f8      	ldr	r0, [r7, #12]
 800469e:	f000 fe0b 	bl	80052b8 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 80046a2:	e00e      	b.n	80046c2 <I2C_Master_ISR_DMA+0x1c2>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 80046a4:	68bb      	ldr	r3, [r7, #8]
 80046a6:	f003 0320 	and.w	r3, r3, #32
 80046aa:	2b00      	cmp	r3, #0
 80046ac:	d00a      	beq.n	80046c4 <I2C_Master_ISR_DMA+0x1c4>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	f003 0320 	and.w	r3, r3, #32
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 80046b4:	2b00      	cmp	r3, #0
 80046b6:	d005      	beq.n	80046c4 <I2C_Master_ISR_DMA+0x1c4>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 80046b8:	68b9      	ldr	r1, [r7, #8]
 80046ba:	68f8      	ldr	r0, [r7, #12]
 80046bc:	f000 fbce 	bl	8004e5c <I2C_ITMasterCplt>
 80046c0:	e000      	b.n	80046c4 <I2C_Master_ISR_DMA+0x1c4>
    if (hi2c->XferCount == 0U)
 80046c2:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 80046c4:	68fb      	ldr	r3, [r7, #12]
 80046c6:	2200      	movs	r2, #0
 80046c8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 80046cc:	2300      	movs	r3, #0
}
 80046ce:	4618      	mov	r0, r3
 80046d0:	3718      	adds	r7, #24
 80046d2:	46bd      	mov	sp, r7
 80046d4:	bd80      	pop	{r7, pc}
	...

080046d8 <I2C_Mem_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Mem_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                         uint32_t ITSources)
{
 80046d8:	b580      	push	{r7, lr}
 80046da:	b088      	sub	sp, #32
 80046dc:	af02      	add	r7, sp, #8
 80046de:	60f8      	str	r0, [r7, #12]
 80046e0:	60b9      	str	r1, [r7, #8]
 80046e2:	607a      	str	r2, [r7, #4]
  uint32_t direction = I2C_GENERATE_START_WRITE;
 80046e4:	4b8d      	ldr	r3, [pc, #564]	@ (800491c <I2C_Mem_ISR_DMA+0x244>)
 80046e6:	617b      	str	r3, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hi2c);
 80046e8:	68fb      	ldr	r3, [r7, #12]
 80046ea:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80046ee:	2b01      	cmp	r3, #1
 80046f0:	d101      	bne.n	80046f6 <I2C_Mem_ISR_DMA+0x1e>
 80046f2:	2302      	movs	r3, #2
 80046f4:	e10e      	b.n	8004914 <I2C_Mem_ISR_DMA+0x23c>
 80046f6:	68fb      	ldr	r3, [r7, #12]
 80046f8:	2201      	movs	r2, #1
 80046fa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 80046fe:	68bb      	ldr	r3, [r7, #8]
 8004700:	f003 0310 	and.w	r3, r3, #16
 8004704:	2b00      	cmp	r3, #0
 8004706:	d016      	beq.n	8004736 <I2C_Mem_ISR_DMA+0x5e>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 800470e:	2b00      	cmp	r3, #0
 8004710:	d011      	beq.n	8004736 <I2C_Mem_ISR_DMA+0x5e>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004712:	68fb      	ldr	r3, [r7, #12]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	2210      	movs	r2, #16
 8004718:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800471a:	68fb      	ldr	r3, [r7, #12]
 800471c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800471e:	f043 0204 	orr.w	r2, r3, #4
 8004722:	68fb      	ldr	r3, [r7, #12]
 8004724:	645a      	str	r2, [r3, #68]	@ 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 8004726:	2120      	movs	r1, #32
 8004728:	68f8      	ldr	r0, [r7, #12]
 800472a:	f001 f96b 	bl	8005a04 <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800472e:	68f8      	ldr	r0, [r7, #12]
 8004730:	f000 fed9 	bl	80054e6 <I2C_Flush_TXDR>
 8004734:	e0e9      	b.n	800490a <I2C_Mem_ISR_DMA+0x232>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TXIS) != RESET) && \
 8004736:	68bb      	ldr	r3, [r7, #8]
 8004738:	f003 0302 	and.w	r3, r3, #2
 800473c:	2b00      	cmp	r3, #0
 800473e:	d00e      	beq.n	800475e <I2C_Mem_ISR_DMA+0x86>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	f003 0302 	and.w	r3, r3, #2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TXIS) != RESET) && \
 8004746:	2b00      	cmp	r3, #0
 8004748:	d009      	beq.n	800475e <I2C_Mem_ISR_DMA+0x86>
  {
    /* Write LSB part of Memory Address */
    hi2c->Instance->TXDR = hi2c->Memaddress;
 800474a:	68fb      	ldr	r3, [r7, #12]
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	68fa      	ldr	r2, [r7, #12]
 8004750:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8004752:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Reset Memaddress content */
    hi2c->Memaddress = 0xFFFFFFFFU;
 8004754:	68fb      	ldr	r3, [r7, #12]
 8004756:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800475a:	651a      	str	r2, [r3, #80]	@ 0x50
 800475c:	e0d5      	b.n	800490a <I2C_Mem_ISR_DMA+0x232>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 800475e:	68bb      	ldr	r3, [r7, #8]
 8004760:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004764:	2b00      	cmp	r3, #0
 8004766:	d05f      	beq.n	8004828 <I2C_Mem_ISR_DMA+0x150>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 800476e:	2b00      	cmp	r3, #0
 8004770:	d05a      	beq.n	8004828 <I2C_Mem_ISR_DMA+0x150>
  {
    /* Disable Interrupt related to address step */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8004772:	2101      	movs	r1, #1
 8004774:	68f8      	ldr	r0, [r7, #12]
 8004776:	f001 f9c9 	bl	8005b0c <I2C_Disable_IRQ>

    /* Enable only Error interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 800477a:	2110      	movs	r1, #16
 800477c:	68f8      	ldr	r0, [r7, #12]
 800477e:	f001 f941 	bl	8005a04 <I2C_Enable_IRQ>

    if (hi2c->XferCount != 0U)
 8004782:	68fb      	ldr	r3, [r7, #12]
 8004784:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004786:	b29b      	uxth	r3, r3
 8004788:	2b00      	cmp	r3, #0
 800478a:	d048      	beq.n	800481e <I2C_Mem_ISR_DMA+0x146>
    {
      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800478c:	68fb      	ldr	r3, [r7, #12]
 800478e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004790:	b29b      	uxth	r3, r3
 8004792:	2bff      	cmp	r3, #255	@ 0xff
 8004794:	d910      	bls.n	80047b8 <I2C_Mem_ISR_DMA+0xe0>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 8004796:	68fb      	ldr	r3, [r7, #12]
 8004798:	22ff      	movs	r2, #255	@ 0xff
 800479a:	851a      	strh	r2, [r3, #40]	@ 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 800479c:	68fb      	ldr	r3, [r7, #12]
 800479e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80047a0:	b299      	uxth	r1, r3
 80047a2:	68fb      	ldr	r3, [r7, #12]
 80047a4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80047a6:	b2da      	uxtb	r2, r3
 80047a8:	2300      	movs	r3, #0
 80047aa:	9300      	str	r3, [sp, #0]
 80047ac:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80047b0:	68f8      	ldr	r0, [r7, #12]
 80047b2:	f001 f8f5 	bl	80059a0 <I2C_TransferConfig>
 80047b6:	e011      	b.n	80047dc <I2C_Mem_ISR_DMA+0x104>
                           I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 80047b8:	68fb      	ldr	r3, [r7, #12]
 80047ba:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80047bc:	b29a      	uxth	r2, r3
 80047be:	68fb      	ldr	r3, [r7, #12]
 80047c0:	851a      	strh	r2, [r3, #40]	@ 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 80047c2:	68fb      	ldr	r3, [r7, #12]
 80047c4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80047c6:	b299      	uxth	r1, r3
 80047c8:	68fb      	ldr	r3, [r7, #12]
 80047ca:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80047cc:	b2da      	uxtb	r2, r3
 80047ce:	2300      	movs	r3, #0
 80047d0:	9300      	str	r3, [sp, #0]
 80047d2:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80047d6:	68f8      	ldr	r0, [r7, #12]
 80047d8:	f001 f8e2 	bl	80059a0 <I2C_TransferConfig>
                           I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
      }

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80047e0:	b29a      	uxth	r2, r3
 80047e2:	68fb      	ldr	r3, [r7, #12]
 80047e4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80047e6:	1ad3      	subs	r3, r2, r3
 80047e8:	b29a      	uxth	r2, r3
 80047ea:	68fb      	ldr	r3, [r7, #12]
 80047ec:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80047ee:	68fb      	ldr	r3, [r7, #12]
 80047f0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80047f4:	b2db      	uxtb	r3, r3
 80047f6:	2b22      	cmp	r3, #34	@ 0x22
 80047f8:	d108      	bne.n	800480c <I2C_Mem_ISR_DMA+0x134>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 80047fa:	68fb      	ldr	r3, [r7, #12]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	681a      	ldr	r2, [r3, #0]
 8004800:	68fb      	ldr	r3, [r7, #12]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004808:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 800480a:	e07e      	b.n	800490a <I2C_Mem_ISR_DMA+0x232>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	681a      	ldr	r2, [r3, #0]
 8004812:	68fb      	ldr	r3, [r7, #12]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800481a:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 800481c:	e075      	b.n	800490a <I2C_Mem_ISR_DMA+0x232>
    }
    else
    {
      /* Wrong size Status regarding TCR flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 800481e:	2140      	movs	r1, #64	@ 0x40
 8004820:	68f8      	ldr	r0, [r7, #12]
 8004822:	f000 fd49 	bl	80052b8 <I2C_ITError>
    if (hi2c->XferCount != 0U)
 8004826:	e070      	b.n	800490a <I2C_Mem_ISR_DMA+0x232>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8004828:	68bb      	ldr	r3, [r7, #8]
 800482a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800482e:	2b00      	cmp	r3, #0
 8004830:	d05d      	beq.n	80048ee <I2C_Mem_ISR_DMA+0x216>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8004838:	2b00      	cmp	r3, #0
 800483a:	d058      	beq.n	80048ee <I2C_Mem_ISR_DMA+0x216>
  {
    /* Disable Interrupt related to address step */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 800483c:	2101      	movs	r1, #1
 800483e:	68f8      	ldr	r0, [r7, #12]
 8004840:	f001 f964 	bl	8005b0c <I2C_Disable_IRQ>

    /* Enable only Error and NACK interrupt for data transfer */
    I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 8004844:	2110      	movs	r1, #16
 8004846:	68f8      	ldr	r0, [r7, #12]
 8004848:	f001 f8dc 	bl	8005a04 <I2C_Enable_IRQ>

    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800484c:	68fb      	ldr	r3, [r7, #12]
 800484e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004852:	b2db      	uxtb	r3, r3
 8004854:	2b22      	cmp	r3, #34	@ 0x22
 8004856:	d101      	bne.n	800485c <I2C_Mem_ISR_DMA+0x184>
    {
      direction = I2C_GENERATE_START_READ;
 8004858:	4b31      	ldr	r3, [pc, #196]	@ (8004920 <I2C_Mem_ISR_DMA+0x248>)
 800485a:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800485c:	68fb      	ldr	r3, [r7, #12]
 800485e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004860:	b29b      	uxth	r3, r3
 8004862:	2bff      	cmp	r3, #255	@ 0xff
 8004864:	d910      	bls.n	8004888 <I2C_Mem_ISR_DMA+0x1b0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8004866:	68fb      	ldr	r3, [r7, #12]
 8004868:	22ff      	movs	r2, #255	@ 0xff
 800486a:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 800486c:	68fb      	ldr	r3, [r7, #12]
 800486e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004870:	b299      	uxth	r1, r3
 8004872:	68fb      	ldr	r3, [r7, #12]
 8004874:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004876:	b2da      	uxtb	r2, r3
 8004878:	697b      	ldr	r3, [r7, #20]
 800487a:	9300      	str	r3, [sp, #0]
 800487c:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8004880:	68f8      	ldr	r0, [r7, #12]
 8004882:	f001 f88d 	bl	80059a0 <I2C_TransferConfig>
 8004886:	e011      	b.n	80048ac <I2C_Mem_ISR_DMA+0x1d4>
                         I2C_RELOAD_MODE, direction);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800488c:	b29a      	uxth	r2, r3
 800488e:	68fb      	ldr	r3, [r7, #12]
 8004890:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Set NBYTES to write and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8004892:	68fb      	ldr	r3, [r7, #12]
 8004894:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004896:	b299      	uxth	r1, r3
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800489c:	b2da      	uxtb	r2, r3
 800489e:	697b      	ldr	r3, [r7, #20]
 80048a0:	9300      	str	r3, [sp, #0]
 80048a2:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80048a6:	68f8      	ldr	r0, [r7, #12]
 80048a8:	f001 f87a 	bl	80059a0 <I2C_TransferConfig>
                         I2C_AUTOEND_MODE, direction);
    }

    /* Update XferCount value */
    hi2c->XferCount -= hi2c->XferSize;
 80048ac:	68fb      	ldr	r3, [r7, #12]
 80048ae:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80048b0:	b29a      	uxth	r2, r3
 80048b2:	68fb      	ldr	r3, [r7, #12]
 80048b4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80048b6:	1ad3      	subs	r3, r2, r3
 80048b8:	b29a      	uxth	r2, r3
 80048ba:	68fb      	ldr	r3, [r7, #12]
 80048bc:	855a      	strh	r2, [r3, #42]	@ 0x2a

    /* Enable DMA Request */
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80048be:	68fb      	ldr	r3, [r7, #12]
 80048c0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80048c4:	b2db      	uxtb	r3, r3
 80048c6:	2b22      	cmp	r3, #34	@ 0x22
 80048c8:	d108      	bne.n	80048dc <I2C_Mem_ISR_DMA+0x204>
    {
      hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 80048ca:	68fb      	ldr	r3, [r7, #12]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	681a      	ldr	r2, [r3, #0]
 80048d0:	68fb      	ldr	r3, [r7, #12]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80048d8:	601a      	str	r2, [r3, #0]
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80048da:	e016      	b.n	800490a <I2C_Mem_ISR_DMA+0x232>
    }
    else
    {
      hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	681a      	ldr	r2, [r3, #0]
 80048e2:	68fb      	ldr	r3, [r7, #12]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80048ea:	601a      	str	r2, [r3, #0]
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80048ec:	e00d      	b.n	800490a <I2C_Mem_ISR_DMA+0x232>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 80048ee:	68bb      	ldr	r3, [r7, #8]
 80048f0:	f003 0320 	and.w	r3, r3, #32
 80048f4:	2b00      	cmp	r3, #0
 80048f6:	d008      	beq.n	800490a <I2C_Mem_ISR_DMA+0x232>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	f003 0320 	and.w	r3, r3, #32
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 80048fe:	2b00      	cmp	r3, #0
 8004900:	d003      	beq.n	800490a <I2C_Mem_ISR_DMA+0x232>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 8004902:	68b9      	ldr	r1, [r7, #8]
 8004904:	68f8      	ldr	r0, [r7, #12]
 8004906:	f000 faa9 	bl	8004e5c <I2C_ITMasterCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800490a:	68fb      	ldr	r3, [r7, #12]
 800490c:	2200      	movs	r2, #0
 800490e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8004912:	2300      	movs	r3, #0
}
 8004914:	4618      	mov	r0, r3
 8004916:	3718      	adds	r7, #24
 8004918:	46bd      	mov	sp, r7
 800491a:	bd80      	pop	{r7, pc}
 800491c:	80002000 	.word	0x80002000
 8004920:	80002400 	.word	0x80002400

08004924 <I2C_Slave_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                           uint32_t ITSources)
{
 8004924:	b580      	push	{r7, lr}
 8004926:	b088      	sub	sp, #32
 8004928:	af00      	add	r7, sp, #0
 800492a:	60f8      	str	r0, [r7, #12]
 800492c:	60b9      	str	r1, [r7, #8]
 800492e:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8004930:	68fb      	ldr	r3, [r7, #12]
 8004932:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004934:	61bb      	str	r3, [r7, #24]
  uint32_t treatdmanack = 0U;
 8004936:	2300      	movs	r3, #0
 8004938:	61fb      	str	r3, [r7, #28]
  HAL_I2C_StateTypeDef tmpstate;

  /* Process locked */
  __HAL_LOCK(hi2c);
 800493a:	68fb      	ldr	r3, [r7, #12]
 800493c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004940:	2b01      	cmp	r3, #1
 8004942:	d101      	bne.n	8004948 <I2C_Slave_ISR_DMA+0x24>
 8004944:	2302      	movs	r3, #2
 8004946:	e0bf      	b.n	8004ac8 <I2C_Slave_ISR_DMA+0x1a4>
 8004948:	68fb      	ldr	r3, [r7, #12]
 800494a:	2201      	movs	r2, #1
 800494c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8004950:	68bb      	ldr	r3, [r7, #8]
 8004952:	f003 0320 	and.w	r3, r3, #32
 8004956:	2b00      	cmp	r3, #0
 8004958:	d008      	beq.n	800496c <I2C_Slave_ISR_DMA+0x48>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	f003 0320 	and.w	r3, r3, #32
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8004960:	2b00      	cmp	r3, #0
 8004962:	d003      	beq.n	800496c <I2C_Slave_ISR_DMA+0x48>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, ITFlags);
 8004964:	68b9      	ldr	r1, [r7, #8]
 8004966:	68f8      	ldr	r0, [r7, #12]
 8004968:	f000 fb40 	bl	8004fec <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 800496c:	68bb      	ldr	r3, [r7, #8]
 800496e:	f003 0310 	and.w	r3, r3, #16
 8004972:	2b00      	cmp	r3, #0
 8004974:	f000 8095 	beq.w	8004aa2 <I2C_Slave_ISR_DMA+0x17e>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 800497e:	2b00      	cmp	r3, #0
 8004980:	f000 808f 	beq.w	8004aa2 <I2C_Slave_ISR_DMA+0x17e>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0 */
    /* So clear Flag NACKF only */
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800498a:	2b00      	cmp	r3, #0
 800498c:	d104      	bne.n	8004998 <I2C_Slave_ISR_DMA+0x74>
        (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET))
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8004994:	2b00      	cmp	r3, #0
 8004996:	d07d      	beq.n	8004a94 <I2C_Slave_ISR_DMA+0x170>
    {
      /* Split check of hdmarx, for MISRA compliance */
      if (hi2c->hdmarx != NULL)
 8004998:	68fb      	ldr	r3, [r7, #12]
 800499a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800499c:	2b00      	cmp	r3, #0
 800499e:	d00c      	beq.n	80049ba <I2C_Slave_ISR_DMA+0x96>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET)
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80049a6:	2b00      	cmp	r3, #0
 80049a8:	d007      	beq.n	80049ba <I2C_Slave_ISR_DMA+0x96>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx) == 0U)
 80049aa:	68fb      	ldr	r3, [r7, #12]
 80049ac:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	685b      	ldr	r3, [r3, #4]
 80049b2:	2b00      	cmp	r3, #0
 80049b4:	d101      	bne.n	80049ba <I2C_Slave_ISR_DMA+0x96>
          {
            treatdmanack = 1U;
 80049b6:	2301      	movs	r3, #1
 80049b8:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      /* Split check of hdmatx, for MISRA compliance  */
      if (hi2c->hdmatx != NULL)
 80049ba:	68fb      	ldr	r3, [r7, #12]
 80049bc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80049be:	2b00      	cmp	r3, #0
 80049c0:	d00c      	beq.n	80049dc <I2C_Slave_ISR_DMA+0xb8>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET)
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80049c8:	2b00      	cmp	r3, #0
 80049ca:	d007      	beq.n	80049dc <I2C_Slave_ISR_DMA+0xb8>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx) == 0U)
 80049cc:	68fb      	ldr	r3, [r7, #12]
 80049ce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	685b      	ldr	r3, [r3, #4]
 80049d4:	2b00      	cmp	r3, #0
 80049d6:	d101      	bne.n	80049dc <I2C_Slave_ISR_DMA+0xb8>
          {
            treatdmanack = 1U;
 80049d8:	2301      	movs	r3, #1
 80049da:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      if (treatdmanack == 1U)
 80049dc:	69fb      	ldr	r3, [r7, #28]
 80049de:	2b01      	cmp	r3, #1
 80049e0:	d128      	bne.n	8004a34 <I2C_Slave_ISR_DMA+0x110>
      {
        if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 80049e2:	68fb      	ldr	r3, [r7, #12]
 80049e4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80049e8:	b2db      	uxtb	r3, r3
 80049ea:	2b28      	cmp	r3, #40	@ 0x28
 80049ec:	d108      	bne.n	8004a00 <I2C_Slave_ISR_DMA+0xdc>
 80049ee:	69bb      	ldr	r3, [r7, #24]
 80049f0:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80049f4:	d104      	bne.n	8004a00 <I2C_Slave_ISR_DMA+0xdc>
          /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
             Warning[Pa134]: left and right operands are identical */
        {
          /* Call I2C Listen complete process */
          I2C_ITListenCplt(hi2c, ITFlags);
 80049f6:	68b9      	ldr	r1, [r7, #8]
 80049f8:	68f8      	ldr	r0, [r7, #12]
 80049fa:	f000 fc09 	bl	8005210 <I2C_ITListenCplt>
 80049fe:	e048      	b.n	8004a92 <I2C_Slave_ISR_DMA+0x16e>
        }
        else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004a06:	b2db      	uxtb	r3, r3
 8004a08:	2b29      	cmp	r3, #41	@ 0x29
 8004a0a:	d10e      	bne.n	8004a2a <I2C_Slave_ISR_DMA+0x106>
 8004a0c:	69bb      	ldr	r3, [r7, #24]
 8004a0e:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8004a12:	d00a      	beq.n	8004a2a <I2C_Slave_ISR_DMA+0x106>
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004a14:	68fb      	ldr	r3, [r7, #12]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	2210      	movs	r2, #16
 8004a1a:	61da      	str	r2, [r3, #28]

          /* Flush TX register */
          I2C_Flush_TXDR(hi2c);
 8004a1c:	68f8      	ldr	r0, [r7, #12]
 8004a1e:	f000 fd62 	bl	80054e6 <I2C_Flush_TXDR>

          /* Last Byte is Transmitted */
          /* Call I2C Slave Sequential complete process */
          I2C_ITSlaveSeqCplt(hi2c);
 8004a22:	68f8      	ldr	r0, [r7, #12]
 8004a24:	f000 f9bd 	bl	8004da2 <I2C_ITSlaveSeqCplt>
 8004a28:	e033      	b.n	8004a92 <I2C_Slave_ISR_DMA+0x16e>
        }
        else
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004a2a:	68fb      	ldr	r3, [r7, #12]
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	2210      	movs	r2, #16
 8004a30:	61da      	str	r2, [r3, #28]
      if (treatdmanack == 1U)
 8004a32:	e034      	b.n	8004a9e <I2C_Slave_ISR_DMA+0x17a>
      }
      else
      {
        /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004a34:	68fb      	ldr	r3, [r7, #12]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	2210      	movs	r2, #16
 8004a3a:	61da      	str	r2, [r3, #28]

        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004a3c:	68fb      	ldr	r3, [r7, #12]
 8004a3e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004a40:	f043 0204 	orr.w	r2, r3, #4
 8004a44:	68fb      	ldr	r3, [r7, #12]
 8004a46:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Store current hi2c->State, solve MISRA2012-Rule-13.5 */
        tmpstate = hi2c->State;
 8004a48:	68fb      	ldr	r3, [r7, #12]
 8004a4a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004a4e:	75fb      	strb	r3, [r7, #23]

        if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8004a50:	69bb      	ldr	r3, [r7, #24]
 8004a52:	2b00      	cmp	r3, #0
 8004a54:	d003      	beq.n	8004a5e <I2C_Slave_ISR_DMA+0x13a>
 8004a56:	69bb      	ldr	r3, [r7, #24]
 8004a58:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004a5c:	d11f      	bne.n	8004a9e <I2C_Slave_ISR_DMA+0x17a>
        {
          if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8004a5e:	7dfb      	ldrb	r3, [r7, #23]
 8004a60:	2b21      	cmp	r3, #33	@ 0x21
 8004a62:	d002      	beq.n	8004a6a <I2C_Slave_ISR_DMA+0x146>
 8004a64:	7dfb      	ldrb	r3, [r7, #23]
 8004a66:	2b29      	cmp	r3, #41	@ 0x29
 8004a68:	d103      	bne.n	8004a72 <I2C_Slave_ISR_DMA+0x14e>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8004a6a:	68fb      	ldr	r3, [r7, #12]
 8004a6c:	2221      	movs	r2, #33	@ 0x21
 8004a6e:	631a      	str	r2, [r3, #48]	@ 0x30
 8004a70:	e008      	b.n	8004a84 <I2C_Slave_ISR_DMA+0x160>
          }
          else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8004a72:	7dfb      	ldrb	r3, [r7, #23]
 8004a74:	2b22      	cmp	r3, #34	@ 0x22
 8004a76:	d002      	beq.n	8004a7e <I2C_Slave_ISR_DMA+0x15a>
 8004a78:	7dfb      	ldrb	r3, [r7, #23]
 8004a7a:	2b2a      	cmp	r3, #42	@ 0x2a
 8004a7c:	d102      	bne.n	8004a84 <I2C_Slave_ISR_DMA+0x160>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8004a7e:	68fb      	ldr	r3, [r7, #12]
 8004a80:	2222      	movs	r2, #34	@ 0x22
 8004a82:	631a      	str	r2, [r3, #48]	@ 0x30
          {
            /* Do nothing */
          }

          /* Call the corresponding callback to inform upper layer of End of Transfer */
          I2C_ITError(hi2c, hi2c->ErrorCode);
 8004a84:	68fb      	ldr	r3, [r7, #12]
 8004a86:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004a88:	4619      	mov	r1, r3
 8004a8a:	68f8      	ldr	r0, [r7, #12]
 8004a8c:	f000 fc14 	bl	80052b8 <I2C_ITError>
      if (treatdmanack == 1U)
 8004a90:	e005      	b.n	8004a9e <I2C_Slave_ISR_DMA+0x17a>
 8004a92:	e004      	b.n	8004a9e <I2C_Slave_ISR_DMA+0x17a>
      }
    }
    else
    {
      /* Only Clear NACK Flag, no DMA treatment is pending */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004a94:	68fb      	ldr	r3, [r7, #12]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	2210      	movs	r2, #16
 8004a9a:	61da      	str	r2, [r3, #28]
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8004a9c:	e00f      	b.n	8004abe <I2C_Slave_ISR_DMA+0x19a>
      if (treatdmanack == 1U)
 8004a9e:	bf00      	nop
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8004aa0:	e00d      	b.n	8004abe <I2C_Slave_ISR_DMA+0x19a>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 8004aa2:	68bb      	ldr	r3, [r7, #8]
 8004aa4:	f003 0308 	and.w	r3, r3, #8
 8004aa8:	2b00      	cmp	r3, #0
 8004aaa:	d008      	beq.n	8004abe <I2C_Slave_ISR_DMA+0x19a>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	f003 0308 	and.w	r3, r3, #8
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 8004ab2:	2b00      	cmp	r3, #0
 8004ab4:	d003      	beq.n	8004abe <I2C_Slave_ISR_DMA+0x19a>
  {
    I2C_ITAddrCplt(hi2c, ITFlags);
 8004ab6:	68b9      	ldr	r1, [r7, #8]
 8004ab8:	68f8      	ldr	r0, [r7, #12]
 8004aba:	f000 f8b1 	bl	8004c20 <I2C_ITAddrCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8004abe:	68fb      	ldr	r3, [r7, #12]
 8004ac0:	2200      	movs	r2, #0
 8004ac2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8004ac6:	2300      	movs	r3, #0
}
 8004ac8:	4618      	mov	r0, r3
 8004aca:	3720      	adds	r7, #32
 8004acc:	46bd      	mov	sp, r7
 8004ace:	bd80      	pop	{r7, pc}

08004ad0 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8004ad0:	b580      	push	{r7, lr}
 8004ad2:	b086      	sub	sp, #24
 8004ad4:	af02      	add	r7, sp, #8
 8004ad6:	60f8      	str	r0, [r7, #12]
 8004ad8:	4608      	mov	r0, r1
 8004ada:	4611      	mov	r1, r2
 8004adc:	461a      	mov	r2, r3
 8004ade:	4603      	mov	r3, r0
 8004ae0:	817b      	strh	r3, [r7, #10]
 8004ae2:	460b      	mov	r3, r1
 8004ae4:	813b      	strh	r3, [r7, #8]
 8004ae6:	4613      	mov	r3, r2
 8004ae8:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8004aea:	88fb      	ldrh	r3, [r7, #6]
 8004aec:	b2da      	uxtb	r2, r3
 8004aee:	8979      	ldrh	r1, [r7, #10]
 8004af0:	4b20      	ldr	r3, [pc, #128]	@ (8004b74 <I2C_RequestMemoryWrite+0xa4>)
 8004af2:	9300      	str	r3, [sp, #0]
 8004af4:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8004af8:	68f8      	ldr	r0, [r7, #12]
 8004afa:	f000 ff51 	bl	80059a0 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004afe:	69fa      	ldr	r2, [r7, #28]
 8004b00:	69b9      	ldr	r1, [r7, #24]
 8004b02:	68f8      	ldr	r0, [r7, #12]
 8004b04:	f000 fde2 	bl	80056cc <I2C_WaitOnTXISFlagUntilTimeout>
 8004b08:	4603      	mov	r3, r0
 8004b0a:	2b00      	cmp	r3, #0
 8004b0c:	d001      	beq.n	8004b12 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8004b0e:	2301      	movs	r3, #1
 8004b10:	e02c      	b.n	8004b6c <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004b12:	88fb      	ldrh	r3, [r7, #6]
 8004b14:	2b01      	cmp	r3, #1
 8004b16:	d105      	bne.n	8004b24 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004b18:	893b      	ldrh	r3, [r7, #8]
 8004b1a:	b2da      	uxtb	r2, r3
 8004b1c:	68fb      	ldr	r3, [r7, #12]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	629a      	str	r2, [r3, #40]	@ 0x28
 8004b22:	e015      	b.n	8004b50 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8004b24:	893b      	ldrh	r3, [r7, #8]
 8004b26:	0a1b      	lsrs	r3, r3, #8
 8004b28:	b29b      	uxth	r3, r3
 8004b2a:	b2da      	uxtb	r2, r3
 8004b2c:	68fb      	ldr	r3, [r7, #12]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004b32:	69fa      	ldr	r2, [r7, #28]
 8004b34:	69b9      	ldr	r1, [r7, #24]
 8004b36:	68f8      	ldr	r0, [r7, #12]
 8004b38:	f000 fdc8 	bl	80056cc <I2C_WaitOnTXISFlagUntilTimeout>
 8004b3c:	4603      	mov	r3, r0
 8004b3e:	2b00      	cmp	r3, #0
 8004b40:	d001      	beq.n	8004b46 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8004b42:	2301      	movs	r3, #1
 8004b44:	e012      	b.n	8004b6c <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004b46:	893b      	ldrh	r3, [r7, #8]
 8004b48:	b2da      	uxtb	r2, r3
 8004b4a:	68fb      	ldr	r3, [r7, #12]
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8004b50:	69fb      	ldr	r3, [r7, #28]
 8004b52:	9300      	str	r3, [sp, #0]
 8004b54:	69bb      	ldr	r3, [r7, #24]
 8004b56:	2200      	movs	r2, #0
 8004b58:	2180      	movs	r1, #128	@ 0x80
 8004b5a:	68f8      	ldr	r0, [r7, #12]
 8004b5c:	f000 fd67 	bl	800562e <I2C_WaitOnFlagUntilTimeout>
 8004b60:	4603      	mov	r3, r0
 8004b62:	2b00      	cmp	r3, #0
 8004b64:	d001      	beq.n	8004b6a <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8004b66:	2301      	movs	r3, #1
 8004b68:	e000      	b.n	8004b6c <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8004b6a:	2300      	movs	r3, #0
}
 8004b6c:	4618      	mov	r0, r3
 8004b6e:	3710      	adds	r7, #16
 8004b70:	46bd      	mov	sp, r7
 8004b72:	bd80      	pop	{r7, pc}
 8004b74:	80002000 	.word	0x80002000

08004b78 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8004b78:	b580      	push	{r7, lr}
 8004b7a:	b086      	sub	sp, #24
 8004b7c:	af02      	add	r7, sp, #8
 8004b7e:	60f8      	str	r0, [r7, #12]
 8004b80:	4608      	mov	r0, r1
 8004b82:	4611      	mov	r1, r2
 8004b84:	461a      	mov	r2, r3
 8004b86:	4603      	mov	r3, r0
 8004b88:	817b      	strh	r3, [r7, #10]
 8004b8a:	460b      	mov	r3, r1
 8004b8c:	813b      	strh	r3, [r7, #8]
 8004b8e:	4613      	mov	r3, r2
 8004b90:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8004b92:	88fb      	ldrh	r3, [r7, #6]
 8004b94:	b2da      	uxtb	r2, r3
 8004b96:	8979      	ldrh	r1, [r7, #10]
 8004b98:	4b20      	ldr	r3, [pc, #128]	@ (8004c1c <I2C_RequestMemoryRead+0xa4>)
 8004b9a:	9300      	str	r3, [sp, #0]
 8004b9c:	2300      	movs	r3, #0
 8004b9e:	68f8      	ldr	r0, [r7, #12]
 8004ba0:	f000 fefe 	bl	80059a0 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004ba4:	69fa      	ldr	r2, [r7, #28]
 8004ba6:	69b9      	ldr	r1, [r7, #24]
 8004ba8:	68f8      	ldr	r0, [r7, #12]
 8004baa:	f000 fd8f 	bl	80056cc <I2C_WaitOnTXISFlagUntilTimeout>
 8004bae:	4603      	mov	r3, r0
 8004bb0:	2b00      	cmp	r3, #0
 8004bb2:	d001      	beq.n	8004bb8 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8004bb4:	2301      	movs	r3, #1
 8004bb6:	e02c      	b.n	8004c12 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004bb8:	88fb      	ldrh	r3, [r7, #6]
 8004bba:	2b01      	cmp	r3, #1
 8004bbc:	d105      	bne.n	8004bca <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004bbe:	893b      	ldrh	r3, [r7, #8]
 8004bc0:	b2da      	uxtb	r2, r3
 8004bc2:	68fb      	ldr	r3, [r7, #12]
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	629a      	str	r2, [r3, #40]	@ 0x28
 8004bc8:	e015      	b.n	8004bf6 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8004bca:	893b      	ldrh	r3, [r7, #8]
 8004bcc:	0a1b      	lsrs	r3, r3, #8
 8004bce:	b29b      	uxth	r3, r3
 8004bd0:	b2da      	uxtb	r2, r3
 8004bd2:	68fb      	ldr	r3, [r7, #12]
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004bd8:	69fa      	ldr	r2, [r7, #28]
 8004bda:	69b9      	ldr	r1, [r7, #24]
 8004bdc:	68f8      	ldr	r0, [r7, #12]
 8004bde:	f000 fd75 	bl	80056cc <I2C_WaitOnTXISFlagUntilTimeout>
 8004be2:	4603      	mov	r3, r0
 8004be4:	2b00      	cmp	r3, #0
 8004be6:	d001      	beq.n	8004bec <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8004be8:	2301      	movs	r3, #1
 8004bea:	e012      	b.n	8004c12 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004bec:	893b      	ldrh	r3, [r7, #8]
 8004bee:	b2da      	uxtb	r2, r3
 8004bf0:	68fb      	ldr	r3, [r7, #12]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8004bf6:	69fb      	ldr	r3, [r7, #28]
 8004bf8:	9300      	str	r3, [sp, #0]
 8004bfa:	69bb      	ldr	r3, [r7, #24]
 8004bfc:	2200      	movs	r2, #0
 8004bfe:	2140      	movs	r1, #64	@ 0x40
 8004c00:	68f8      	ldr	r0, [r7, #12]
 8004c02:	f000 fd14 	bl	800562e <I2C_WaitOnFlagUntilTimeout>
 8004c06:	4603      	mov	r3, r0
 8004c08:	2b00      	cmp	r3, #0
 8004c0a:	d001      	beq.n	8004c10 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8004c0c:	2301      	movs	r3, #1
 8004c0e:	e000      	b.n	8004c12 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8004c10:	2300      	movs	r3, #0
}
 8004c12:	4618      	mov	r0, r3
 8004c14:	3710      	adds	r7, #16
 8004c16:	46bd      	mov	sp, r7
 8004c18:	bd80      	pop	{r7, pc}
 8004c1a:	bf00      	nop
 8004c1c:	80002000 	.word	0x80002000

08004c20 <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8004c20:	b580      	push	{r7, lr}
 8004c22:	b084      	sub	sp, #16
 8004c24:	af00      	add	r7, sp, #0
 8004c26:	6078      	str	r0, [r7, #4]
 8004c28:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004c30:	b2db      	uxtb	r3, r3
 8004c32:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8004c36:	2b28      	cmp	r3, #40	@ 0x28
 8004c38:	d16a      	bne.n	8004d10 <I2C_ITAddrCplt+0xf0>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	699b      	ldr	r3, [r3, #24]
 8004c40:	0c1b      	lsrs	r3, r3, #16
 8004c42:	b2db      	uxtb	r3, r3
 8004c44:	f003 0301 	and.w	r3, r3, #1
 8004c48:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	699b      	ldr	r3, [r3, #24]
 8004c50:	0c1b      	lsrs	r3, r3, #16
 8004c52:	b29b      	uxth	r3, r3
 8004c54:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 8004c58:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	689b      	ldr	r3, [r3, #8]
 8004c60:	b29b      	uxth	r3, r3
 8004c62:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004c66:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	68db      	ldr	r3, [r3, #12]
 8004c6e:	b29b      	uxth	r3, r3
 8004c70:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 8004c74:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	68db      	ldr	r3, [r3, #12]
 8004c7a:	2b02      	cmp	r3, #2
 8004c7c:	d138      	bne.n	8004cf0 <I2C_ITAddrCplt+0xd0>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 8004c7e:	897b      	ldrh	r3, [r7, #10]
 8004c80:	09db      	lsrs	r3, r3, #7
 8004c82:	b29a      	uxth	r2, r3
 8004c84:	89bb      	ldrh	r3, [r7, #12]
 8004c86:	4053      	eors	r3, r2
 8004c88:	b29b      	uxth	r3, r3
 8004c8a:	f003 0306 	and.w	r3, r3, #6
 8004c8e:	2b00      	cmp	r3, #0
 8004c90:	d11c      	bne.n	8004ccc <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 8004c92:	897b      	ldrh	r3, [r7, #10]
 8004c94:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004c9a:	1c5a      	adds	r2, r3, #1
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	649a      	str	r2, [r3, #72]	@ 0x48
        if (hi2c->AddrEventCount == 2U)
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004ca4:	2b02      	cmp	r3, #2
 8004ca6:	d13b      	bne.n	8004d20 <I2C_ITAddrCplt+0x100>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	2200      	movs	r2, #0
 8004cac:	649a      	str	r2, [r3, #72]	@ 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	2208      	movs	r2, #8
 8004cb4:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	2200      	movs	r2, #0
 8004cba:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8004cbe:	89ba      	ldrh	r2, [r7, #12]
 8004cc0:	7bfb      	ldrb	r3, [r7, #15]
 8004cc2:	4619      	mov	r1, r3
 8004cc4:	6878      	ldr	r0, [r7, #4]
 8004cc6:	f7ff faed 	bl	80042a4 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8004cca:	e029      	b.n	8004d20 <I2C_ITAddrCplt+0x100>
        slaveaddrcode = ownadd2code;
 8004ccc:	893b      	ldrh	r3, [r7, #8]
 8004cce:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8004cd0:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8004cd4:	6878      	ldr	r0, [r7, #4]
 8004cd6:	f000 ff19 	bl	8005b0c <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	2200      	movs	r2, #0
 8004cde:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8004ce2:	89ba      	ldrh	r2, [r7, #12]
 8004ce4:	7bfb      	ldrb	r3, [r7, #15]
 8004ce6:	4619      	mov	r1, r3
 8004ce8:	6878      	ldr	r0, [r7, #4]
 8004cea:	f7ff fadb 	bl	80042a4 <HAL_I2C_AddrCallback>
}
 8004cee:	e017      	b.n	8004d20 <I2C_ITAddrCplt+0x100>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8004cf0:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8004cf4:	6878      	ldr	r0, [r7, #4]
 8004cf6:	f000 ff09 	bl	8005b0c <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	2200      	movs	r2, #0
 8004cfe:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8004d02:	89ba      	ldrh	r2, [r7, #12]
 8004d04:	7bfb      	ldrb	r3, [r7, #15]
 8004d06:	4619      	mov	r1, r3
 8004d08:	6878      	ldr	r0, [r7, #4]
 8004d0a:	f7ff facb 	bl	80042a4 <HAL_I2C_AddrCallback>
}
 8004d0e:	e007      	b.n	8004d20 <I2C_ITAddrCplt+0x100>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	2208      	movs	r2, #8
 8004d16:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	2200      	movs	r2, #0
 8004d1c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
}
 8004d20:	bf00      	nop
 8004d22:	3710      	adds	r7, #16
 8004d24:	46bd      	mov	sp, r7
 8004d26:	bd80      	pop	{r7, pc}

08004d28 <I2C_ITMasterSeqCplt>:
  * @brief  I2C Master sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITMasterSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8004d28:	b580      	push	{r7, lr}
 8004d2a:	b082      	sub	sp, #8
 8004d2c:	af00      	add	r7, sp, #0
 8004d2e:	6078      	str	r0, [r7, #4]
  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	2200      	movs	r2, #0
 8004d34:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* No Generate Stop, to permit restart mode */
  /* The stop will be done at the end of transfer, when I2C_AUTOEND_MODE enable */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004d3e:	b2db      	uxtb	r3, r3
 8004d40:	2b21      	cmp	r3, #33	@ 0x21
 8004d42:	d115      	bne.n	8004d70 <I2C_ITMasterSeqCplt+0x48>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	2220      	movs	r2, #32
 8004d48:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	2211      	movs	r2, #17
 8004d50:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->XferISR       = NULL;
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	2200      	movs	r2, #0
 8004d56:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8004d58:	2101      	movs	r1, #1
 8004d5a:	6878      	ldr	r0, [r7, #4]
 8004d5c:	f000 fed6 	bl	8005b0c <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	2200      	movs	r2, #0
 8004d64:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->MasterTxCpltCallback(hi2c);
#else
    HAL_I2C_MasterTxCpltCallback(hi2c);
 8004d68:	6878      	ldr	r0, [r7, #4]
 8004d6a:	f7ff fa73 	bl	8004254 <HAL_I2C_MasterTxCpltCallback>
    hi2c->MasterRxCpltCallback(hi2c);
#else
    HAL_I2C_MasterRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8004d6e:	e014      	b.n	8004d9a <I2C_ITMasterSeqCplt+0x72>
    hi2c->State         = HAL_I2C_STATE_READY;
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	2220      	movs	r2, #32
 8004d74:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	2212      	movs	r2, #18
 8004d7c:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->XferISR       = NULL;
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	2200      	movs	r2, #0
 8004d82:	635a      	str	r2, [r3, #52]	@ 0x34
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8004d84:	2102      	movs	r1, #2
 8004d86:	6878      	ldr	r0, [r7, #4]
 8004d88:	f000 fec0 	bl	8005b0c <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	2200      	movs	r2, #0
 8004d90:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_MasterRxCpltCallback(hi2c);
 8004d94:	6878      	ldr	r0, [r7, #4]
 8004d96:	f7ff fa67 	bl	8004268 <HAL_I2C_MasterRxCpltCallback>
}
 8004d9a:	bf00      	nop
 8004d9c:	3708      	adds	r7, #8
 8004d9e:	46bd      	mov	sp, r7
 8004da0:	bd80      	pop	{r7, pc}

08004da2 <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8004da2:	b580      	push	{r7, lr}
 8004da4:	b084      	sub	sp, #16
 8004da6:	af00      	add	r7, sp, #0
 8004da8:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	2200      	movs	r2, #0
 8004db6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8004dba:	68fb      	ldr	r3, [r7, #12]
 8004dbc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004dc0:	2b00      	cmp	r3, #0
 8004dc2:	d008      	beq.n	8004dd6 <I2C_ITSlaveSeqCplt+0x34>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	681a      	ldr	r2, [r3, #0]
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8004dd2:	601a      	str	r2, [r3, #0]
 8004dd4:	e00c      	b.n	8004df0 <I2C_ITSlaveSeqCplt+0x4e>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8004dd6:	68fb      	ldr	r3, [r7, #12]
 8004dd8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004ddc:	2b00      	cmp	r3, #0
 8004dde:	d007      	beq.n	8004df0 <I2C_ITSlaveSeqCplt+0x4e>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	681a      	ldr	r2, [r3, #0]
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8004dee:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004df6:	b2db      	uxtb	r3, r3
 8004df8:	2b29      	cmp	r3, #41	@ 0x29
 8004dfa:	d112      	bne.n	8004e22 <I2C_ITSlaveSeqCplt+0x80>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	2228      	movs	r2, #40	@ 0x28
 8004e00:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	2221      	movs	r2, #33	@ 0x21
 8004e08:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8004e0a:	2101      	movs	r1, #1
 8004e0c:	6878      	ldr	r0, [r7, #4]
 8004e0e:	f000 fe7d 	bl	8005b0c <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	2200      	movs	r2, #0
 8004e16:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8004e1a:	6878      	ldr	r0, [r7, #4]
 8004e1c:	f7ff fa2e 	bl	800427c <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8004e20:	e017      	b.n	8004e52 <I2C_ITSlaveSeqCplt+0xb0>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004e28:	b2db      	uxtb	r3, r3
 8004e2a:	2b2a      	cmp	r3, #42	@ 0x2a
 8004e2c:	d111      	bne.n	8004e52 <I2C_ITSlaveSeqCplt+0xb0>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	2228      	movs	r2, #40	@ 0x28
 8004e32:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	2222      	movs	r2, #34	@ 0x22
 8004e3a:	631a      	str	r2, [r3, #48]	@ 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8004e3c:	2102      	movs	r1, #2
 8004e3e:	6878      	ldr	r0, [r7, #4]
 8004e40:	f000 fe64 	bl	8005b0c <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	2200      	movs	r2, #0
 8004e48:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8004e4c:	6878      	ldr	r0, [r7, #4]
 8004e4e:	f7ff fa1f 	bl	8004290 <HAL_I2C_SlaveRxCpltCallback>
}
 8004e52:	bf00      	nop
 8004e54:	3710      	adds	r7, #16
 8004e56:	46bd      	mov	sp, r7
 8004e58:	bd80      	pop	{r7, pc}
	...

08004e5c <I2C_ITMasterCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITMasterCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8004e5c:	b580      	push	{r7, lr}
 8004e5e:	b086      	sub	sp, #24
 8004e60:	af00      	add	r7, sp, #0
 8004e62:	6078      	str	r0, [r7, #4]
 8004e64:	6039      	str	r1, [r7, #0]
  uint32_t tmperror;
  uint32_t tmpITFlags = ITFlags;
 8004e66:	683b      	ldr	r3, [r7, #0]
 8004e68:	617b      	str	r3, [r7, #20]
  __IO uint32_t tmpreg;

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	2220      	movs	r2, #32
 8004e70:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004e78:	b2db      	uxtb	r3, r3
 8004e7a:	2b21      	cmp	r3, #33	@ 0x21
 8004e7c:	d107      	bne.n	8004e8e <I2C_ITMasterCplt+0x32>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8004e7e:	2101      	movs	r1, #1
 8004e80:	6878      	ldr	r0, [r7, #4]
 8004e82:	f000 fe43 	bl	8005b0c <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	2211      	movs	r2, #17
 8004e8a:	631a      	str	r2, [r3, #48]	@ 0x30
 8004e8c:	e00c      	b.n	8004ea8 <I2C_ITMasterCplt+0x4c>
  }
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004e94:	b2db      	uxtb	r3, r3
 8004e96:	2b22      	cmp	r3, #34	@ 0x22
 8004e98:	d106      	bne.n	8004ea8 <I2C_ITMasterCplt+0x4c>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8004e9a:	2102      	movs	r1, #2
 8004e9c:	6878      	ldr	r0, [r7, #4]
 8004e9e:	f000 fe35 	bl	8005b0c <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	2212      	movs	r2, #18
 8004ea6:	631a      	str	r2, [r3, #48]	@ 0x30
  {
    /* Do nothing */
  }

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	6859      	ldr	r1, [r3, #4]
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	681a      	ldr	r2, [r3, #0]
 8004eb2:	4b4c      	ldr	r3, [pc, #304]	@ (8004fe4 <I2C_ITMasterCplt+0x188>)
 8004eb4:	400b      	ands	r3, r1
 8004eb6:	6053      	str	r3, [r2, #4]

  /* Reset handle parameters */
  hi2c->XferISR       = NULL;
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	2200      	movs	r2, #0
 8004ebc:	635a      	str	r2, [r3, #52]	@ 0x34
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	4a49      	ldr	r2, [pc, #292]	@ (8004fe8 <I2C_ITMasterCplt+0x18c>)
 8004ec2:	62da      	str	r2, [r3, #44]	@ 0x2c

  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET)
 8004ec4:	697b      	ldr	r3, [r7, #20]
 8004ec6:	f003 0310 	and.w	r3, r3, #16
 8004eca:	2b00      	cmp	r3, #0
 8004ecc:	d009      	beq.n	8004ee2 <I2C_ITMasterCplt+0x86>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	2210      	movs	r2, #16
 8004ed4:	61da      	str	r2, [r3, #28]

    /* Set acknowledge error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004eda:	f043 0204 	orr.w	r2, r3, #4
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Fetch Last receive data if any */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) && (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET))
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004ee8:	b2db      	uxtb	r3, r3
 8004eea:	2b60      	cmp	r3, #96	@ 0x60
 8004eec:	d10a      	bne.n	8004f04 <I2C_ITMasterCplt+0xa8>
 8004eee:	697b      	ldr	r3, [r7, #20]
 8004ef0:	f003 0304 	and.w	r3, r3, #4
 8004ef4:	2b00      	cmp	r3, #0
 8004ef6:	d005      	beq.n	8004f04 <I2C_ITMasterCplt+0xa8>
  {
    /* Read data from RXDR */
    tmpreg = (uint8_t)hi2c->Instance->RXDR;
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004efe:	b2db      	uxtb	r3, r3
 8004f00:	60fb      	str	r3, [r7, #12]
    UNUSED(tmpreg);
 8004f02:	68fb      	ldr	r3, [r7, #12]
  }

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8004f04:	6878      	ldr	r0, [r7, #4]
 8004f06:	f000 faee 	bl	80054e6 <I2C_Flush_TXDR>

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004f0e:	613b      	str	r3, [r7, #16]

  /* Call the corresponding callback to inform upper layer of End of Transfer */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) || (tmperror != HAL_I2C_ERROR_NONE))
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004f16:	b2db      	uxtb	r3, r3
 8004f18:	2b60      	cmp	r3, #96	@ 0x60
 8004f1a:	d002      	beq.n	8004f22 <I2C_ITMasterCplt+0xc6>
 8004f1c:	693b      	ldr	r3, [r7, #16]
 8004f1e:	2b00      	cmp	r3, #0
 8004f20:	d006      	beq.n	8004f30 <I2C_ITMasterCplt+0xd4>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004f26:	4619      	mov	r1, r3
 8004f28:	6878      	ldr	r0, [r7, #4]
 8004f2a:	f000 f9c5 	bl	80052b8 <I2C_ITError>
  }
  else
  {
    /* Nothing to do */
  }
}
 8004f2e:	e054      	b.n	8004fda <I2C_ITMasterCplt+0x17e>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004f36:	b2db      	uxtb	r3, r3
 8004f38:	2b21      	cmp	r3, #33	@ 0x21
 8004f3a:	d124      	bne.n	8004f86 <I2C_ITMasterCplt+0x12a>
    hi2c->State = HAL_I2C_STATE_READY;
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	2220      	movs	r2, #32
 8004f40:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	2200      	movs	r2, #0
 8004f48:	631a      	str	r2, [r3, #48]	@ 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004f50:	b2db      	uxtb	r3, r3
 8004f52:	2b40      	cmp	r3, #64	@ 0x40
 8004f54:	d10b      	bne.n	8004f6e <I2C_ITMasterCplt+0x112>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	2200      	movs	r2, #0
 8004f5a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      __HAL_UNLOCK(hi2c);
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	2200      	movs	r2, #0
 8004f62:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_MemTxCpltCallback(hi2c);
 8004f66:	6878      	ldr	r0, [r7, #4]
 8004f68:	f7ff f9b4 	bl	80042d4 <HAL_I2C_MemTxCpltCallback>
}
 8004f6c:	e035      	b.n	8004fda <I2C_ITMasterCplt+0x17e>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	2200      	movs	r2, #0
 8004f72:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      __HAL_UNLOCK(hi2c);
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	2200      	movs	r2, #0
 8004f7a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8004f7e:	6878      	ldr	r0, [r7, #4]
 8004f80:	f7ff f968 	bl	8004254 <HAL_I2C_MasterTxCpltCallback>
}
 8004f84:	e029      	b.n	8004fda <I2C_ITMasterCplt+0x17e>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004f8c:	b2db      	uxtb	r3, r3
 8004f8e:	2b22      	cmp	r3, #34	@ 0x22
 8004f90:	d123      	bne.n	8004fda <I2C_ITMasterCplt+0x17e>
    hi2c->State = HAL_I2C_STATE_READY;
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	2220      	movs	r2, #32
 8004f96:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	2200      	movs	r2, #0
 8004f9e:	631a      	str	r2, [r3, #48]	@ 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004fa6:	b2db      	uxtb	r3, r3
 8004fa8:	2b40      	cmp	r3, #64	@ 0x40
 8004faa:	d10b      	bne.n	8004fc4 <I2C_ITMasterCplt+0x168>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	2200      	movs	r2, #0
 8004fb0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      __HAL_UNLOCK(hi2c);
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	2200      	movs	r2, #0
 8004fb8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_MemRxCpltCallback(hi2c);
 8004fbc:	6878      	ldr	r0, [r7, #4]
 8004fbe:	f7fd f86d 	bl	800209c <HAL_I2C_MemRxCpltCallback>
}
 8004fc2:	e00a      	b.n	8004fda <I2C_ITMasterCplt+0x17e>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	2200      	movs	r2, #0
 8004fc8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      __HAL_UNLOCK(hi2c);
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	2200      	movs	r2, #0
 8004fd0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8004fd4:	6878      	ldr	r0, [r7, #4]
 8004fd6:	f7ff f947 	bl	8004268 <HAL_I2C_MasterRxCpltCallback>
}
 8004fda:	bf00      	nop
 8004fdc:	3718      	adds	r7, #24
 8004fde:	46bd      	mov	sp, r7
 8004fe0:	bd80      	pop	{r7, pc}
 8004fe2:	bf00      	nop
 8004fe4:	fe00e800 	.word	0xfe00e800
 8004fe8:	ffff0000 	.word	0xffff0000

08004fec <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8004fec:	b580      	push	{r7, lr}
 8004fee:	b086      	sub	sp, #24
 8004ff0:	af00      	add	r7, sp, #0
 8004ff2:	6078      	str	r0, [r7, #4]
 8004ff4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 8004ffe:	683b      	ldr	r3, [r7, #0]
 8005000:	617b      	str	r3, [r7, #20]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005008:	73fb      	strb	r3, [r7, #15]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	2220      	movs	r2, #32
 8005010:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8005012:	7bfb      	ldrb	r3, [r7, #15]
 8005014:	2b21      	cmp	r3, #33	@ 0x21
 8005016:	d002      	beq.n	800501e <I2C_ITSlaveCplt+0x32>
 8005018:	7bfb      	ldrb	r3, [r7, #15]
 800501a:	2b29      	cmp	r3, #41	@ 0x29
 800501c:	d108      	bne.n	8005030 <I2C_ITSlaveCplt+0x44>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 800501e:	f248 0101 	movw	r1, #32769	@ 0x8001
 8005022:	6878      	ldr	r0, [r7, #4]
 8005024:	f000 fd72 	bl	8005b0c <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	2221      	movs	r2, #33	@ 0x21
 800502c:	631a      	str	r2, [r3, #48]	@ 0x30
 800502e:	e019      	b.n	8005064 <I2C_ITSlaveCplt+0x78>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8005030:	7bfb      	ldrb	r3, [r7, #15]
 8005032:	2b22      	cmp	r3, #34	@ 0x22
 8005034:	d002      	beq.n	800503c <I2C_ITSlaveCplt+0x50>
 8005036:	7bfb      	ldrb	r3, [r7, #15]
 8005038:	2b2a      	cmp	r3, #42	@ 0x2a
 800503a:	d108      	bne.n	800504e <I2C_ITSlaveCplt+0x62>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 800503c:	f248 0102 	movw	r1, #32770	@ 0x8002
 8005040:	6878      	ldr	r0, [r7, #4]
 8005042:	f000 fd63 	bl	8005b0c <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	2222      	movs	r2, #34	@ 0x22
 800504a:	631a      	str	r2, [r3, #48]	@ 0x30
 800504c:	e00a      	b.n	8005064 <I2C_ITSlaveCplt+0x78>
  }
  else if (tmpstate == HAL_I2C_STATE_LISTEN)
 800504e:	7bfb      	ldrb	r3, [r7, #15]
 8005050:	2b28      	cmp	r3, #40	@ 0x28
 8005052:	d107      	bne.n	8005064 <I2C_ITSlaveCplt+0x78>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT | I2C_XFER_RX_IT);
 8005054:	f248 0103 	movw	r1, #32771	@ 0x8003
 8005058:	6878      	ldr	r0, [r7, #4]
 800505a:	f000 fd57 	bl	8005b0c <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_NONE;
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	2200      	movs	r2, #0
 8005062:	631a      	str	r2, [r3, #48]	@ 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	685a      	ldr	r2, [r3, #4]
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8005072:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	6859      	ldr	r1, [r3, #4]
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	681a      	ldr	r2, [r3, #0]
 800507e:	4b62      	ldr	r3, [pc, #392]	@ (8005208 <I2C_ITSlaveCplt+0x21c>)
 8005080:	400b      	ands	r3, r1
 8005082:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8005084:	6878      	ldr	r0, [r7, #4]
 8005086:	f000 fa2e 	bl	80054e6 <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 800508a:	693b      	ldr	r3, [r7, #16]
 800508c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005090:	2b00      	cmp	r3, #0
 8005092:	d013      	beq.n	80050bc <I2C_ITSlaveCplt+0xd0>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	681a      	ldr	r2, [r3, #0]
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80050a2:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80050a8:	2b00      	cmp	r3, #0
 80050aa:	d01f      	beq.n	80050ec <I2C_ITSlaveCplt+0x100>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	685b      	ldr	r3, [r3, #4]
 80050b4:	b29a      	uxth	r2, r3
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80050ba:	e017      	b.n	80050ec <I2C_ITSlaveCplt+0x100>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 80050bc:	693b      	ldr	r3, [r7, #16]
 80050be:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80050c2:	2b00      	cmp	r3, #0
 80050c4:	d012      	beq.n	80050ec <I2C_ITSlaveCplt+0x100>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	681a      	ldr	r2, [r3, #0]
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80050d4:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80050da:	2b00      	cmp	r3, #0
 80050dc:	d006      	beq.n	80050ec <I2C_ITSlaveCplt+0x100>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	685b      	ldr	r3, [r3, #4]
 80050e6:	b29a      	uxth	r2, r3
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	855a      	strh	r2, [r3, #42]	@ 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 80050ec:	697b      	ldr	r3, [r7, #20]
 80050ee:	f003 0304 	and.w	r3, r3, #4
 80050f2:	2b00      	cmp	r3, #0
 80050f4:	d020      	beq.n	8005138 <I2C_ITSlaveCplt+0x14c>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 80050f6:	697b      	ldr	r3, [r7, #20]
 80050f8:	f023 0304 	bic.w	r3, r3, #4
 80050fc:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005108:	b2d2      	uxtb	r2, r2
 800510a:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005110:	1c5a      	adds	r2, r3, #1
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800511a:	2b00      	cmp	r3, #0
 800511c:	d00c      	beq.n	8005138 <I2C_ITSlaveCplt+0x14c>
    {
      hi2c->XferSize--;
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005122:	3b01      	subs	r3, #1
 8005124:	b29a      	uxth	r2, r3
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800512e:	b29b      	uxth	r3, r3
 8005130:	3b01      	subs	r3, #1
 8005132:	b29a      	uxth	r2, r3
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800513c:	b29b      	uxth	r3, r3
 800513e:	2b00      	cmp	r3, #0
 8005140:	d005      	beq.n	800514e <I2C_ITSlaveCplt+0x162>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005146:	f043 0204 	orr.w	r2, r3, #4
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	2200      	movs	r2, #0
 8005152:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferISR = NULL;
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	2200      	movs	r2, #0
 800515a:	635a      	str	r2, [r3, #52]	@ 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005160:	2b00      	cmp	r3, #0
 8005162:	d010      	beq.n	8005186 <I2C_ITSlaveCplt+0x19a>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005168:	4619      	mov	r1, r3
 800516a:	6878      	ldr	r0, [r7, #4]
 800516c:	f000 f8a4 	bl	80052b8 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005176:	b2db      	uxtb	r3, r3
 8005178:	2b28      	cmp	r3, #40	@ 0x28
 800517a:	d141      	bne.n	8005200 <I2C_ITSlaveCplt+0x214>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 800517c:	6979      	ldr	r1, [r7, #20]
 800517e:	6878      	ldr	r0, [r7, #4]
 8005180:	f000 f846 	bl	8005210 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8005184:	e03c      	b.n	8005200 <I2C_ITSlaveCplt+0x214>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800518a:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800518e:	d014      	beq.n	80051ba <I2C_ITSlaveCplt+0x1ce>
    I2C_ITSlaveSeqCplt(hi2c);
 8005190:	6878      	ldr	r0, [r7, #4]
 8005192:	f7ff fe06 	bl	8004da2 <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	4a1c      	ldr	r2, [pc, #112]	@ (800520c <I2C_ITSlaveCplt+0x220>)
 800519a:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	2220      	movs	r2, #32
 80051a0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	2200      	movs	r2, #0
 80051a8:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	2200      	movs	r2, #0
 80051ae:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 80051b2:	6878      	ldr	r0, [r7, #4]
 80051b4:	f7ff f884 	bl	80042c0 <HAL_I2C_ListenCpltCallback>
}
 80051b8:	e022      	b.n	8005200 <I2C_ITSlaveCplt+0x214>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80051c0:	b2db      	uxtb	r3, r3
 80051c2:	2b22      	cmp	r3, #34	@ 0x22
 80051c4:	d10e      	bne.n	80051e4 <I2C_ITSlaveCplt+0x1f8>
    hi2c->State = HAL_I2C_STATE_READY;
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	2220      	movs	r2, #32
 80051ca:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	2200      	movs	r2, #0
 80051d2:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	2200      	movs	r2, #0
 80051d8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 80051dc:	6878      	ldr	r0, [r7, #4]
 80051de:	f7ff f857 	bl	8004290 <HAL_I2C_SlaveRxCpltCallback>
}
 80051e2:	e00d      	b.n	8005200 <I2C_ITSlaveCplt+0x214>
    hi2c->State = HAL_I2C_STATE_READY;
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	2220      	movs	r2, #32
 80051e8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	2200      	movs	r2, #0
 80051f0:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	2200      	movs	r2, #0
 80051f6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 80051fa:	6878      	ldr	r0, [r7, #4]
 80051fc:	f7ff f83e 	bl	800427c <HAL_I2C_SlaveTxCpltCallback>
}
 8005200:	bf00      	nop
 8005202:	3718      	adds	r7, #24
 8005204:	46bd      	mov	sp, r7
 8005206:	bd80      	pop	{r7, pc}
 8005208:	fe00e800 	.word	0xfe00e800
 800520c:	ffff0000 	.word	0xffff0000

08005210 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8005210:	b580      	push	{r7, lr}
 8005212:	b082      	sub	sp, #8
 8005214:	af00      	add	r7, sp, #0
 8005216:	6078      	str	r0, [r7, #4]
 8005218:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	4a25      	ldr	r2, [pc, #148]	@ (80052b4 <I2C_ITListenCplt+0xa4>)
 800521e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	2200      	movs	r2, #0
 8005224:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	2220      	movs	r2, #32
 800522a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	2200      	movs	r2, #0
 8005232:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferISR = NULL;
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	2200      	movs	r2, #0
 800523a:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 800523c:	683b      	ldr	r3, [r7, #0]
 800523e:	f003 0304 	and.w	r3, r3, #4
 8005242:	2b00      	cmp	r3, #0
 8005244:	d022      	beq.n	800528c <I2C_ITListenCplt+0x7c>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005250:	b2d2      	uxtb	r2, r2
 8005252:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005258:	1c5a      	adds	r2, r3, #1
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005262:	2b00      	cmp	r3, #0
 8005264:	d012      	beq.n	800528c <I2C_ITListenCplt+0x7c>
    {
      hi2c->XferSize--;
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800526a:	3b01      	subs	r3, #1
 800526c:	b29a      	uxth	r2, r3
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005276:	b29b      	uxth	r3, r3
 8005278:	3b01      	subs	r3, #1
 800527a:	b29a      	uxth	r2, r3
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005284:	f043 0204 	orr.w	r2, r3, #4
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	645a      	str	r2, [r3, #68]	@ 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 800528c:	f248 0103 	movw	r1, #32771	@ 0x8003
 8005290:	6878      	ldr	r0, [r7, #4]
 8005292:	f000 fc3b 	bl	8005b0c <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	2210      	movs	r2, #16
 800529c:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	2200      	movs	r2, #0
 80052a2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 80052a6:	6878      	ldr	r0, [r7, #4]
 80052a8:	f7ff f80a 	bl	80042c0 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 80052ac:	bf00      	nop
 80052ae:	3708      	adds	r7, #8
 80052b0:	46bd      	mov	sp, r7
 80052b2:	bd80      	pop	{r7, pc}
 80052b4:	ffff0000 	.word	0xffff0000

080052b8 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 80052b8:	b580      	push	{r7, lr}
 80052ba:	b084      	sub	sp, #16
 80052bc:	af00      	add	r7, sp, #0
 80052be:	6078      	str	r0, [r7, #4]
 80052c0:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80052c8:	73fb      	strb	r3, [r7, #15]

  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	2200      	movs	r2, #0
 80052ce:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	4a6d      	ldr	r2, [pc, #436]	@ (800548c <I2C_ITError+0x1d4>)
 80052d6:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->XferCount     = 0U;
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	2200      	movs	r2, #0
 80052dc:	855a      	strh	r2, [r3, #42]	@ 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80052e2:	683b      	ldr	r3, [r7, #0]
 80052e4:	431a      	orrs	r2, r3
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 80052ea:	7bfb      	ldrb	r3, [r7, #15]
 80052ec:	2b28      	cmp	r3, #40	@ 0x28
 80052ee:	d005      	beq.n	80052fc <I2C_ITError+0x44>
 80052f0:	7bfb      	ldrb	r3, [r7, #15]
 80052f2:	2b29      	cmp	r3, #41	@ 0x29
 80052f4:	d002      	beq.n	80052fc <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 80052f6:	7bfb      	ldrb	r3, [r7, #15]
 80052f8:	2b2a      	cmp	r3, #42	@ 0x2a
 80052fa:	d10b      	bne.n	8005314 <I2C_ITError+0x5c>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 80052fc:	2103      	movs	r1, #3
 80052fe:	6878      	ldr	r0, [r7, #4]
 8005300:	f000 fc04 	bl	8005b0c <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	2228      	movs	r2, #40	@ 0x28
 8005308:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	4a60      	ldr	r2, [pc, #384]	@ (8005490 <I2C_ITError+0x1d8>)
 8005310:	635a      	str	r2, [r3, #52]	@ 0x34
 8005312:	e030      	b.n	8005376 <I2C_ITError+0xbe>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8005314:	f248 0103 	movw	r1, #32771	@ 0x8003
 8005318:	6878      	ldr	r0, [r7, #4]
 800531a:	f000 fbf7 	bl	8005b0c <I2C_Disable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800531e:	6878      	ldr	r0, [r7, #4]
 8005320:	f000 f8e1 	bl	80054e6 <I2C_Flush_TXDR>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800532a:	b2db      	uxtb	r3, r3
 800532c:	2b60      	cmp	r3, #96	@ 0x60
 800532e:	d01f      	beq.n	8005370 <I2C_ITError+0xb8>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	2220      	movs	r2, #32
 8005334:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Check if a STOPF is detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	699b      	ldr	r3, [r3, #24]
 800533e:	f003 0320 	and.w	r3, r3, #32
 8005342:	2b20      	cmp	r3, #32
 8005344:	d114      	bne.n	8005370 <I2C_ITError+0xb8>
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	699b      	ldr	r3, [r3, #24]
 800534c:	f003 0310 	and.w	r3, r3, #16
 8005350:	2b10      	cmp	r3, #16
 8005352:	d109      	bne.n	8005368 <I2C_ITError+0xb0>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	2210      	movs	r2, #16
 800535a:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005360:	f043 0204 	orr.w	r2, r3, #4
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	645a      	str	r2, [r3, #68]	@ 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	2220      	movs	r2, #32
 800536e:	61da      	str	r2, [r3, #28]
      }

    }
    hi2c->XferISR       = NULL;
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	2200      	movs	r2, #0
 8005374:	635a      	str	r2, [r3, #52]	@ 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800537a:	60bb      	str	r3, [r7, #8]

  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005380:	2b00      	cmp	r3, #0
 8005382:	d039      	beq.n	80053f8 <I2C_ITError+0x140>
 8005384:	68bb      	ldr	r3, [r7, #8]
 8005386:	2b11      	cmp	r3, #17
 8005388:	d002      	beq.n	8005390 <I2C_ITError+0xd8>
 800538a:	68bb      	ldr	r3, [r7, #8]
 800538c:	2b21      	cmp	r3, #33	@ 0x21
 800538e:	d133      	bne.n	80053f8 <I2C_ITError+0x140>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800539a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800539e:	d107      	bne.n	80053b0 <I2C_ITError+0xf8>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	681a      	ldr	r2, [r3, #0]
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80053ae:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80053b4:	4618      	mov	r0, r3
 80053b6:	f7fe f9cf 	bl	8003758 <HAL_DMA_GetState>
 80053ba:	4603      	mov	r3, r0
 80053bc:	2b01      	cmp	r3, #1
 80053be:	d017      	beq.n	80053f0 <I2C_ITError+0x138>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80053c4:	4a33      	ldr	r2, [pc, #204]	@ (8005494 <I2C_ITError+0x1dc>)
 80053c6:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	2200      	movs	r2, #0
 80053cc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80053d4:	4618      	mov	r0, r3
 80053d6:	f7fe f8cf 	bl	8003578 <HAL_DMA_Abort_IT>
 80053da:	4603      	mov	r3, r0
 80053dc:	2b00      	cmp	r3, #0
 80053de:	d04d      	beq.n	800547c <I2C_ITError+0x1c4>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80053e4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80053e6:	687a      	ldr	r2, [r7, #4]
 80053e8:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80053ea:	4610      	mov	r0, r2
 80053ec:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80053ee:	e045      	b.n	800547c <I2C_ITError+0x1c4>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 80053f0:	6878      	ldr	r0, [r7, #4]
 80053f2:	f000 f851 	bl	8005498 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80053f6:	e041      	b.n	800547c <I2C_ITError+0x1c4>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80053fc:	2b00      	cmp	r3, #0
 80053fe:	d039      	beq.n	8005474 <I2C_ITError+0x1bc>
 8005400:	68bb      	ldr	r3, [r7, #8]
 8005402:	2b12      	cmp	r3, #18
 8005404:	d002      	beq.n	800540c <I2C_ITError+0x154>
 8005406:	68bb      	ldr	r3, [r7, #8]
 8005408:	2b22      	cmp	r3, #34	@ 0x22
 800540a:	d133      	bne.n	8005474 <I2C_ITError+0x1bc>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005416:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800541a:	d107      	bne.n	800542c <I2C_ITError+0x174>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	681a      	ldr	r2, [r3, #0]
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800542a:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005430:	4618      	mov	r0, r3
 8005432:	f7fe f991 	bl	8003758 <HAL_DMA_GetState>
 8005436:	4603      	mov	r3, r0
 8005438:	2b01      	cmp	r3, #1
 800543a:	d017      	beq.n	800546c <I2C_ITError+0x1b4>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005440:	4a14      	ldr	r2, [pc, #80]	@ (8005494 <I2C_ITError+0x1dc>)
 8005442:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	2200      	movs	r2, #0
 8005448:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005450:	4618      	mov	r0, r3
 8005452:	f7fe f891 	bl	8003578 <HAL_DMA_Abort_IT>
 8005456:	4603      	mov	r3, r0
 8005458:	2b00      	cmp	r3, #0
 800545a:	d011      	beq.n	8005480 <I2C_ITError+0x1c8>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005460:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005462:	687a      	ldr	r2, [r7, #4]
 8005464:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8005466:	4610      	mov	r0, r2
 8005468:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800546a:	e009      	b.n	8005480 <I2C_ITError+0x1c8>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 800546c:	6878      	ldr	r0, [r7, #4]
 800546e:	f000 f813 	bl	8005498 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8005472:	e005      	b.n	8005480 <I2C_ITError+0x1c8>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 8005474:	6878      	ldr	r0, [r7, #4]
 8005476:	f000 f80f 	bl	8005498 <I2C_TreatErrorCallback>
  }
}
 800547a:	e002      	b.n	8005482 <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800547c:	bf00      	nop
 800547e:	e000      	b.n	8005482 <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8005480:	bf00      	nop
}
 8005482:	bf00      	nop
 8005484:	3710      	adds	r7, #16
 8005486:	46bd      	mov	sp, r7
 8005488:	bd80      	pop	{r7, pc}
 800548a:	bf00      	nop
 800548c:	ffff0000 	.word	0xffff0000
 8005490:	08004311 	.word	0x08004311
 8005494:	080055f3 	.word	0x080055f3

08005498 <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8005498:	b580      	push	{r7, lr}
 800549a:	b082      	sub	sp, #8
 800549c:	af00      	add	r7, sp, #0
 800549e:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80054a6:	b2db      	uxtb	r3, r3
 80054a8:	2b60      	cmp	r3, #96	@ 0x60
 80054aa:	d10e      	bne.n	80054ca <I2C_TreatErrorCallback+0x32>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	2220      	movs	r2, #32
 80054b0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	2200      	movs	r2, #0
 80054b8:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	2200      	movs	r2, #0
 80054be:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 80054c2:	6878      	ldr	r0, [r7, #4]
 80054c4:	f7fe ff1a 	bl	80042fc <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80054c8:	e009      	b.n	80054de <I2C_TreatErrorCallback+0x46>
    hi2c->PreviousState = I2C_STATE_NONE;
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	2200      	movs	r2, #0
 80054ce:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	2200      	movs	r2, #0
 80054d4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_ErrorCallback(hi2c);
 80054d8:	6878      	ldr	r0, [r7, #4]
 80054da:	f7fe ff05 	bl	80042e8 <HAL_I2C_ErrorCallback>
}
 80054de:	bf00      	nop
 80054e0:	3708      	adds	r7, #8
 80054e2:	46bd      	mov	sp, r7
 80054e4:	bd80      	pop	{r7, pc}

080054e6 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80054e6:	b480      	push	{r7}
 80054e8:	b083      	sub	sp, #12
 80054ea:	af00      	add	r7, sp, #0
 80054ec:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	699b      	ldr	r3, [r3, #24]
 80054f4:	f003 0302 	and.w	r3, r3, #2
 80054f8:	2b02      	cmp	r3, #2
 80054fa:	d103      	bne.n	8005504 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	2200      	movs	r2, #0
 8005502:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	699b      	ldr	r3, [r3, #24]
 800550a:	f003 0301 	and.w	r3, r3, #1
 800550e:	2b01      	cmp	r3, #1
 8005510:	d007      	beq.n	8005522 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	699a      	ldr	r2, [r3, #24]
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	f042 0201 	orr.w	r2, r2, #1
 8005520:	619a      	str	r2, [r3, #24]
  }
}
 8005522:	bf00      	nop
 8005524:	370c      	adds	r7, #12
 8005526:	46bd      	mov	sp, r7
 8005528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800552c:	4770      	bx	lr

0800552e <I2C_DMAMasterReceiveCplt>:
  * @brief DMA I2C master receive process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAMasterReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800552e:	b580      	push	{r7, lr}
 8005530:	b084      	sub	sp, #16
 8005532:	af00      	add	r7, sp, #0
 8005534:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800553a:	60fb      	str	r3, [r7, #12]

  /* Disable DMA Request */
  hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800553c:	68fb      	ldr	r3, [r7, #12]
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	681a      	ldr	r2, [r3, #0]
 8005542:	68fb      	ldr	r3, [r7, #12]
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800554a:	601a      	str	r2, [r3, #0]

  /* If last transfer, enable STOP interrupt */
  if (hi2c->XferCount == 0U)
 800554c:	68fb      	ldr	r3, [r7, #12]
 800554e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005550:	b29b      	uxth	r3, r3
 8005552:	2b00      	cmp	r3, #0
 8005554:	d104      	bne.n	8005560 <I2C_DMAMasterReceiveCplt+0x32>
  {
    /* Enable STOP interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 8005556:	2120      	movs	r1, #32
 8005558:	68f8      	ldr	r0, [r7, #12]
 800555a:	f000 fa53 	bl	8005a04 <I2C_Enable_IRQ>
    {
      /* Enable TC interrupts */
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
    }
  }
}
 800555e:	e02d      	b.n	80055bc <I2C_DMAMasterReceiveCplt+0x8e>
    hi2c->pBuffPtr += hi2c->XferSize;
 8005560:	68fb      	ldr	r3, [r7, #12]
 8005562:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005564:	68fa      	ldr	r2, [r7, #12]
 8005566:	8d12      	ldrh	r2, [r2, #40]	@ 0x28
 8005568:	441a      	add	r2, r3
 800556a:	68fb      	ldr	r3, [r7, #12]
 800556c:	625a      	str	r2, [r3, #36]	@ 0x24
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800556e:	68fb      	ldr	r3, [r7, #12]
 8005570:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005572:	b29b      	uxth	r3, r3
 8005574:	2bff      	cmp	r3, #255	@ 0xff
 8005576:	d903      	bls.n	8005580 <I2C_DMAMasterReceiveCplt+0x52>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8005578:	68fb      	ldr	r3, [r7, #12]
 800557a:	22ff      	movs	r2, #255	@ 0xff
 800557c:	851a      	strh	r2, [r3, #40]	@ 0x28
 800557e:	e004      	b.n	800558a <I2C_DMAMasterReceiveCplt+0x5c>
      hi2c->XferSize = hi2c->XferCount;
 8005580:	68fb      	ldr	r3, [r7, #12]
 8005582:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005584:	b29a      	uxth	r2, r3
 8005586:	68fb      	ldr	r3, [r7, #12]
 8005588:	851a      	strh	r2, [r3, #40]	@ 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)hi2c->pBuffPtr,
 800558a:	68fb      	ldr	r3, [r7, #12]
 800558c:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 800558e:	68fb      	ldr	r3, [r7, #12]
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	3324      	adds	r3, #36	@ 0x24
 8005594:	4619      	mov	r1, r3
 8005596:	68fb      	ldr	r3, [r7, #12]
 8005598:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800559a:	461a      	mov	r2, r3
                         hi2c->XferSize) != HAL_OK)
 800559c:	68fb      	ldr	r3, [r7, #12]
 800559e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)hi2c->pBuffPtr,
 80055a0:	f7fd ff4c 	bl	800343c <HAL_DMA_Start_IT>
 80055a4:	4603      	mov	r3, r0
 80055a6:	2b00      	cmp	r3, #0
 80055a8:	d004      	beq.n	80055b4 <I2C_DMAMasterReceiveCplt+0x86>
      I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 80055aa:	2110      	movs	r1, #16
 80055ac:	68f8      	ldr	r0, [r7, #12]
 80055ae:	f7ff fe83 	bl	80052b8 <I2C_ITError>
}
 80055b2:	e003      	b.n	80055bc <I2C_DMAMasterReceiveCplt+0x8e>
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
 80055b4:	2140      	movs	r1, #64	@ 0x40
 80055b6:	68f8      	ldr	r0, [r7, #12]
 80055b8:	f000 fa24 	bl	8005a04 <I2C_Enable_IRQ>
}
 80055bc:	bf00      	nop
 80055be:	3710      	adds	r7, #16
 80055c0:	46bd      	mov	sp, r7
 80055c2:	bd80      	pop	{r7, pc}

080055c4 <I2C_DMAError>:
  * @brief  DMA I2C communication error callback.
  * @param hdma DMA handle
  * @retval None
  */
static void I2C_DMAError(DMA_HandleTypeDef *hdma)
{
 80055c4:	b580      	push	{r7, lr}
 80055c6:	b084      	sub	sp, #16
 80055c8:	af00      	add	r7, sp, #0
 80055ca:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80055d0:	60fb      	str	r3, [r7, #12]

  /* Disable Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 80055d2:	68fb      	ldr	r3, [r7, #12]
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	685a      	ldr	r2, [r3, #4]
 80055d8:	68fb      	ldr	r3, [r7, #12]
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80055e0:	605a      	str	r2, [r3, #4]

  /* Call the corresponding callback to inform upper layer of End of Transfer */
  I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 80055e2:	2110      	movs	r1, #16
 80055e4:	68f8      	ldr	r0, [r7, #12]
 80055e6:	f7ff fe67 	bl	80052b8 <I2C_ITError>
}
 80055ea:	bf00      	nop
 80055ec:	3710      	adds	r7, #16
 80055ee:	46bd      	mov	sp, r7
 80055f0:	bd80      	pop	{r7, pc}

080055f2 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 80055f2:	b580      	push	{r7, lr}
 80055f4:	b084      	sub	sp, #16
 80055f6:	af00      	add	r7, sp, #0
 80055f8:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80055fe:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 8005600:	68fb      	ldr	r3, [r7, #12]
 8005602:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005604:	2b00      	cmp	r3, #0
 8005606:	d003      	beq.n	8005610 <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8005608:	68fb      	ldr	r3, [r7, #12]
 800560a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800560c:	2200      	movs	r2, #0
 800560e:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  if (hi2c->hdmarx != NULL)
 8005610:	68fb      	ldr	r3, [r7, #12]
 8005612:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005614:	2b00      	cmp	r3, #0
 8005616:	d003      	beq.n	8005620 <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8005618:	68fb      	ldr	r3, [r7, #12]
 800561a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800561c:	2200      	movs	r2, #0
 800561e:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  I2C_TreatErrorCallback(hi2c);
 8005620:	68f8      	ldr	r0, [r7, #12]
 8005622:	f7ff ff39 	bl	8005498 <I2C_TreatErrorCallback>
}
 8005626:	bf00      	nop
 8005628:	3710      	adds	r7, #16
 800562a:	46bd      	mov	sp, r7
 800562c:	bd80      	pop	{r7, pc}

0800562e <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800562e:	b580      	push	{r7, lr}
 8005630:	b084      	sub	sp, #16
 8005632:	af00      	add	r7, sp, #0
 8005634:	60f8      	str	r0, [r7, #12]
 8005636:	60b9      	str	r1, [r7, #8]
 8005638:	603b      	str	r3, [r7, #0]
 800563a:	4613      	mov	r3, r2
 800563c:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800563e:	e031      	b.n	80056a4 <I2C_WaitOnFlagUntilTimeout+0x76>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005640:	683b      	ldr	r3, [r7, #0]
 8005642:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005646:	d02d      	beq.n	80056a4 <I2C_WaitOnFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005648:	f7fd fd2e 	bl	80030a8 <HAL_GetTick>
 800564c:	4602      	mov	r2, r0
 800564e:	69bb      	ldr	r3, [r7, #24]
 8005650:	1ad3      	subs	r3, r2, r3
 8005652:	683a      	ldr	r2, [r7, #0]
 8005654:	429a      	cmp	r2, r3
 8005656:	d302      	bcc.n	800565e <I2C_WaitOnFlagUntilTimeout+0x30>
 8005658:	683b      	ldr	r3, [r7, #0]
 800565a:	2b00      	cmp	r3, #0
 800565c:	d122      	bne.n	80056a4 <I2C_WaitOnFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800565e:	68fb      	ldr	r3, [r7, #12]
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	699a      	ldr	r2, [r3, #24]
 8005664:	68bb      	ldr	r3, [r7, #8]
 8005666:	4013      	ands	r3, r2
 8005668:	68ba      	ldr	r2, [r7, #8]
 800566a:	429a      	cmp	r2, r3
 800566c:	bf0c      	ite	eq
 800566e:	2301      	moveq	r3, #1
 8005670:	2300      	movne	r3, #0
 8005672:	b2db      	uxtb	r3, r3
 8005674:	461a      	mov	r2, r3
 8005676:	79fb      	ldrb	r3, [r7, #7]
 8005678:	429a      	cmp	r2, r3
 800567a:	d113      	bne.n	80056a4 <I2C_WaitOnFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800567c:	68fb      	ldr	r3, [r7, #12]
 800567e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005680:	f043 0220 	orr.w	r2, r3, #32
 8005684:	68fb      	ldr	r3, [r7, #12]
 8005686:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8005688:	68fb      	ldr	r3, [r7, #12]
 800568a:	2220      	movs	r2, #32
 800568c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8005690:	68fb      	ldr	r3, [r7, #12]
 8005692:	2200      	movs	r2, #0
 8005694:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005698:	68fb      	ldr	r3, [r7, #12]
 800569a:	2200      	movs	r2, #0
 800569c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 80056a0:	2301      	movs	r3, #1
 80056a2:	e00f      	b.n	80056c4 <I2C_WaitOnFlagUntilTimeout+0x96>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80056a4:	68fb      	ldr	r3, [r7, #12]
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	699a      	ldr	r2, [r3, #24]
 80056aa:	68bb      	ldr	r3, [r7, #8]
 80056ac:	4013      	ands	r3, r2
 80056ae:	68ba      	ldr	r2, [r7, #8]
 80056b0:	429a      	cmp	r2, r3
 80056b2:	bf0c      	ite	eq
 80056b4:	2301      	moveq	r3, #1
 80056b6:	2300      	movne	r3, #0
 80056b8:	b2db      	uxtb	r3, r3
 80056ba:	461a      	mov	r2, r3
 80056bc:	79fb      	ldrb	r3, [r7, #7]
 80056be:	429a      	cmp	r2, r3
 80056c0:	d0be      	beq.n	8005640 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80056c2:	2300      	movs	r3, #0
}
 80056c4:	4618      	mov	r0, r3
 80056c6:	3710      	adds	r7, #16
 80056c8:	46bd      	mov	sp, r7
 80056ca:	bd80      	pop	{r7, pc}

080056cc <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80056cc:	b580      	push	{r7, lr}
 80056ce:	b084      	sub	sp, #16
 80056d0:	af00      	add	r7, sp, #0
 80056d2:	60f8      	str	r0, [r7, #12]
 80056d4:	60b9      	str	r1, [r7, #8]
 80056d6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80056d8:	e033      	b.n	8005742 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80056da:	687a      	ldr	r2, [r7, #4]
 80056dc:	68b9      	ldr	r1, [r7, #8]
 80056de:	68f8      	ldr	r0, [r7, #12]
 80056e0:	f000 f87e 	bl	80057e0 <I2C_IsErrorOccurred>
 80056e4:	4603      	mov	r3, r0
 80056e6:	2b00      	cmp	r3, #0
 80056e8:	d001      	beq.n	80056ee <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80056ea:	2301      	movs	r3, #1
 80056ec:	e031      	b.n	8005752 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80056ee:	68bb      	ldr	r3, [r7, #8]
 80056f0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80056f4:	d025      	beq.n	8005742 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80056f6:	f7fd fcd7 	bl	80030a8 <HAL_GetTick>
 80056fa:	4602      	mov	r2, r0
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	1ad3      	subs	r3, r2, r3
 8005700:	68ba      	ldr	r2, [r7, #8]
 8005702:	429a      	cmp	r2, r3
 8005704:	d302      	bcc.n	800570c <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8005706:	68bb      	ldr	r3, [r7, #8]
 8005708:	2b00      	cmp	r3, #0
 800570a:	d11a      	bne.n	8005742 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 800570c:	68fb      	ldr	r3, [r7, #12]
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	699b      	ldr	r3, [r3, #24]
 8005712:	f003 0302 	and.w	r3, r3, #2
 8005716:	2b02      	cmp	r3, #2
 8005718:	d013      	beq.n	8005742 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800571a:	68fb      	ldr	r3, [r7, #12]
 800571c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800571e:	f043 0220 	orr.w	r2, r3, #32
 8005722:	68fb      	ldr	r3, [r7, #12]
 8005724:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8005726:	68fb      	ldr	r3, [r7, #12]
 8005728:	2220      	movs	r2, #32
 800572a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800572e:	68fb      	ldr	r3, [r7, #12]
 8005730:	2200      	movs	r2, #0
 8005732:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005736:	68fb      	ldr	r3, [r7, #12]
 8005738:	2200      	movs	r2, #0
 800573a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 800573e:	2301      	movs	r3, #1
 8005740:	e007      	b.n	8005752 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8005742:	68fb      	ldr	r3, [r7, #12]
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	699b      	ldr	r3, [r3, #24]
 8005748:	f003 0302 	and.w	r3, r3, #2
 800574c:	2b02      	cmp	r3, #2
 800574e:	d1c4      	bne.n	80056da <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8005750:	2300      	movs	r3, #0
}
 8005752:	4618      	mov	r0, r3
 8005754:	3710      	adds	r7, #16
 8005756:	46bd      	mov	sp, r7
 8005758:	bd80      	pop	{r7, pc}

0800575a <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800575a:	b580      	push	{r7, lr}
 800575c:	b084      	sub	sp, #16
 800575e:	af00      	add	r7, sp, #0
 8005760:	60f8      	str	r0, [r7, #12]
 8005762:	60b9      	str	r1, [r7, #8]
 8005764:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005766:	e02f      	b.n	80057c8 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8005768:	687a      	ldr	r2, [r7, #4]
 800576a:	68b9      	ldr	r1, [r7, #8]
 800576c:	68f8      	ldr	r0, [r7, #12]
 800576e:	f000 f837 	bl	80057e0 <I2C_IsErrorOccurred>
 8005772:	4603      	mov	r3, r0
 8005774:	2b00      	cmp	r3, #0
 8005776:	d001      	beq.n	800577c <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8005778:	2301      	movs	r3, #1
 800577a:	e02d      	b.n	80057d8 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800577c:	f7fd fc94 	bl	80030a8 <HAL_GetTick>
 8005780:	4602      	mov	r2, r0
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	1ad3      	subs	r3, r2, r3
 8005786:	68ba      	ldr	r2, [r7, #8]
 8005788:	429a      	cmp	r2, r3
 800578a:	d302      	bcc.n	8005792 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800578c:	68bb      	ldr	r3, [r7, #8]
 800578e:	2b00      	cmp	r3, #0
 8005790:	d11a      	bne.n	80057c8 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8005792:	68fb      	ldr	r3, [r7, #12]
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	699b      	ldr	r3, [r3, #24]
 8005798:	f003 0320 	and.w	r3, r3, #32
 800579c:	2b20      	cmp	r3, #32
 800579e:	d013      	beq.n	80057c8 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80057a0:	68fb      	ldr	r3, [r7, #12]
 80057a2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80057a4:	f043 0220 	orr.w	r2, r3, #32
 80057a8:	68fb      	ldr	r3, [r7, #12]
 80057aa:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80057ac:	68fb      	ldr	r3, [r7, #12]
 80057ae:	2220      	movs	r2, #32
 80057b0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80057b4:	68fb      	ldr	r3, [r7, #12]
 80057b6:	2200      	movs	r2, #0
 80057b8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80057bc:	68fb      	ldr	r3, [r7, #12]
 80057be:	2200      	movs	r2, #0
 80057c0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 80057c4:	2301      	movs	r3, #1
 80057c6:	e007      	b.n	80057d8 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80057c8:	68fb      	ldr	r3, [r7, #12]
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	699b      	ldr	r3, [r3, #24]
 80057ce:	f003 0320 	and.w	r3, r3, #32
 80057d2:	2b20      	cmp	r3, #32
 80057d4:	d1c8      	bne.n	8005768 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80057d6:	2300      	movs	r3, #0
}
 80057d8:	4618      	mov	r0, r3
 80057da:	3710      	adds	r7, #16
 80057dc:	46bd      	mov	sp, r7
 80057de:	bd80      	pop	{r7, pc}

080057e0 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80057e0:	b580      	push	{r7, lr}
 80057e2:	b08a      	sub	sp, #40	@ 0x28
 80057e4:	af00      	add	r7, sp, #0
 80057e6:	60f8      	str	r0, [r7, #12]
 80057e8:	60b9      	str	r1, [r7, #8]
 80057ea:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80057ec:	2300      	movs	r3, #0
 80057ee:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 80057f2:	68fb      	ldr	r3, [r7, #12]
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	699b      	ldr	r3, [r3, #24]
 80057f8:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 80057fa:	2300      	movs	r3, #0
 80057fc:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8005802:	69bb      	ldr	r3, [r7, #24]
 8005804:	f003 0310 	and.w	r3, r3, #16
 8005808:	2b00      	cmp	r3, #0
 800580a:	d068      	beq.n	80058de <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800580c:	68fb      	ldr	r3, [r7, #12]
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	2210      	movs	r2, #16
 8005812:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8005814:	e049      	b.n	80058aa <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8005816:	68bb      	ldr	r3, [r7, #8]
 8005818:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800581c:	d045      	beq.n	80058aa <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800581e:	f7fd fc43 	bl	80030a8 <HAL_GetTick>
 8005822:	4602      	mov	r2, r0
 8005824:	69fb      	ldr	r3, [r7, #28]
 8005826:	1ad3      	subs	r3, r2, r3
 8005828:	68ba      	ldr	r2, [r7, #8]
 800582a:	429a      	cmp	r2, r3
 800582c:	d302      	bcc.n	8005834 <I2C_IsErrorOccurred+0x54>
 800582e:	68bb      	ldr	r3, [r7, #8]
 8005830:	2b00      	cmp	r3, #0
 8005832:	d13a      	bne.n	80058aa <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8005834:	68fb      	ldr	r3, [r7, #12]
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	685b      	ldr	r3, [r3, #4]
 800583a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800583e:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8005840:	68fb      	ldr	r3, [r7, #12]
 8005842:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8005846:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8005848:	68fb      	ldr	r3, [r7, #12]
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	699b      	ldr	r3, [r3, #24]
 800584e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005852:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005856:	d121      	bne.n	800589c <I2C_IsErrorOccurred+0xbc>
 8005858:	697b      	ldr	r3, [r7, #20]
 800585a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800585e:	d01d      	beq.n	800589c <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8005860:	7cfb      	ldrb	r3, [r7, #19]
 8005862:	2b20      	cmp	r3, #32
 8005864:	d01a      	beq.n	800589c <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8005866:	68fb      	ldr	r3, [r7, #12]
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	685a      	ldr	r2, [r3, #4]
 800586c:	68fb      	ldr	r3, [r7, #12]
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005874:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8005876:	f7fd fc17 	bl	80030a8 <HAL_GetTick>
 800587a:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800587c:	e00e      	b.n	800589c <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800587e:	f7fd fc13 	bl	80030a8 <HAL_GetTick>
 8005882:	4602      	mov	r2, r0
 8005884:	69fb      	ldr	r3, [r7, #28]
 8005886:	1ad3      	subs	r3, r2, r3
 8005888:	2b19      	cmp	r3, #25
 800588a:	d907      	bls.n	800589c <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 800588c:	6a3b      	ldr	r3, [r7, #32]
 800588e:	f043 0320 	orr.w	r3, r3, #32
 8005892:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8005894:	2301      	movs	r3, #1
 8005896:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 800589a:	e006      	b.n	80058aa <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800589c:	68fb      	ldr	r3, [r7, #12]
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	699b      	ldr	r3, [r3, #24]
 80058a2:	f003 0320 	and.w	r3, r3, #32
 80058a6:	2b20      	cmp	r3, #32
 80058a8:	d1e9      	bne.n	800587e <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80058aa:	68fb      	ldr	r3, [r7, #12]
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	699b      	ldr	r3, [r3, #24]
 80058b0:	f003 0320 	and.w	r3, r3, #32
 80058b4:	2b20      	cmp	r3, #32
 80058b6:	d003      	beq.n	80058c0 <I2C_IsErrorOccurred+0xe0>
 80058b8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80058bc:	2b00      	cmp	r3, #0
 80058be:	d0aa      	beq.n	8005816 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 80058c0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80058c4:	2b00      	cmp	r3, #0
 80058c6:	d103      	bne.n	80058d0 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80058c8:	68fb      	ldr	r3, [r7, #12]
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	2220      	movs	r2, #32
 80058ce:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 80058d0:	6a3b      	ldr	r3, [r7, #32]
 80058d2:	f043 0304 	orr.w	r3, r3, #4
 80058d6:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 80058d8:	2301      	movs	r3, #1
 80058da:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 80058de:	68fb      	ldr	r3, [r7, #12]
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	699b      	ldr	r3, [r3, #24]
 80058e4:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80058e6:	69bb      	ldr	r3, [r7, #24]
 80058e8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80058ec:	2b00      	cmp	r3, #0
 80058ee:	d00b      	beq.n	8005908 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 80058f0:	6a3b      	ldr	r3, [r7, #32]
 80058f2:	f043 0301 	orr.w	r3, r3, #1
 80058f6:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80058f8:	68fb      	ldr	r3, [r7, #12]
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8005900:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8005902:	2301      	movs	r3, #1
 8005904:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8005908:	69bb      	ldr	r3, [r7, #24]
 800590a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800590e:	2b00      	cmp	r3, #0
 8005910:	d00b      	beq.n	800592a <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8005912:	6a3b      	ldr	r3, [r7, #32]
 8005914:	f043 0308 	orr.w	r3, r3, #8
 8005918:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800591a:	68fb      	ldr	r3, [r7, #12]
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8005922:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8005924:	2301      	movs	r3, #1
 8005926:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800592a:	69bb      	ldr	r3, [r7, #24]
 800592c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005930:	2b00      	cmp	r3, #0
 8005932:	d00b      	beq.n	800594c <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8005934:	6a3b      	ldr	r3, [r7, #32]
 8005936:	f043 0302 	orr.w	r3, r3, #2
 800593a:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800593c:	68fb      	ldr	r3, [r7, #12]
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005944:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8005946:	2301      	movs	r3, #1
 8005948:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 800594c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005950:	2b00      	cmp	r3, #0
 8005952:	d01c      	beq.n	800598e <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8005954:	68f8      	ldr	r0, [r7, #12]
 8005956:	f7ff fdc6 	bl	80054e6 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800595a:	68fb      	ldr	r3, [r7, #12]
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	6859      	ldr	r1, [r3, #4]
 8005960:	68fb      	ldr	r3, [r7, #12]
 8005962:	681a      	ldr	r2, [r3, #0]
 8005964:	4b0d      	ldr	r3, [pc, #52]	@ (800599c <I2C_IsErrorOccurred+0x1bc>)
 8005966:	400b      	ands	r3, r1
 8005968:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 800596a:	68fb      	ldr	r3, [r7, #12]
 800596c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800596e:	6a3b      	ldr	r3, [r7, #32]
 8005970:	431a      	orrs	r2, r3
 8005972:	68fb      	ldr	r3, [r7, #12]
 8005974:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8005976:	68fb      	ldr	r3, [r7, #12]
 8005978:	2220      	movs	r2, #32
 800597a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800597e:	68fb      	ldr	r3, [r7, #12]
 8005980:	2200      	movs	r2, #0
 8005982:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005986:	68fb      	ldr	r3, [r7, #12]
 8005988:	2200      	movs	r2, #0
 800598a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 800598e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8005992:	4618      	mov	r0, r3
 8005994:	3728      	adds	r7, #40	@ 0x28
 8005996:	46bd      	mov	sp, r7
 8005998:	bd80      	pop	{r7, pc}
 800599a:	bf00      	nop
 800599c:	fe00e800 	.word	0xfe00e800

080059a0 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80059a0:	b480      	push	{r7}
 80059a2:	b087      	sub	sp, #28
 80059a4:	af00      	add	r7, sp, #0
 80059a6:	60f8      	str	r0, [r7, #12]
 80059a8:	607b      	str	r3, [r7, #4]
 80059aa:	460b      	mov	r3, r1
 80059ac:	817b      	strh	r3, [r7, #10]
 80059ae:	4613      	mov	r3, r2
 80059b0:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80059b2:	897b      	ldrh	r3, [r7, #10]
 80059b4:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80059b8:	7a7b      	ldrb	r3, [r7, #9]
 80059ba:	041b      	lsls	r3, r3, #16
 80059bc:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80059c0:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80059c6:	6a3b      	ldr	r3, [r7, #32]
 80059c8:	4313      	orrs	r3, r2
 80059ca:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80059ce:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80059d0:	68fb      	ldr	r3, [r7, #12]
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	685a      	ldr	r2, [r3, #4]
 80059d6:	6a3b      	ldr	r3, [r7, #32]
 80059d8:	0d5b      	lsrs	r3, r3, #21
 80059da:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 80059de:	4b08      	ldr	r3, [pc, #32]	@ (8005a00 <I2C_TransferConfig+0x60>)
 80059e0:	430b      	orrs	r3, r1
 80059e2:	43db      	mvns	r3, r3
 80059e4:	ea02 0103 	and.w	r1, r2, r3
 80059e8:	68fb      	ldr	r3, [r7, #12]
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	697a      	ldr	r2, [r7, #20]
 80059ee:	430a      	orrs	r2, r1
 80059f0:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80059f2:	bf00      	nop
 80059f4:	371c      	adds	r7, #28
 80059f6:	46bd      	mov	sp, r7
 80059f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059fc:	4770      	bx	lr
 80059fe:	bf00      	nop
 8005a00:	03ff63ff 	.word	0x03ff63ff

08005a04 <I2C_Enable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Enable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8005a04:	b480      	push	{r7}
 8005a06:	b085      	sub	sp, #20
 8005a08:	af00      	add	r7, sp, #0
 8005a0a:	6078      	str	r0, [r7, #4]
 8005a0c:	460b      	mov	r3, r1
 8005a0e:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 8005a10:	2300      	movs	r3, #0
 8005a12:	60fb      	str	r3, [r7, #12]

  if ((hi2c->XferISR != I2C_Master_ISR_DMA) && \
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005a18:	4a39      	ldr	r2, [pc, #228]	@ (8005b00 <I2C_Enable_IRQ+0xfc>)
 8005a1a:	4293      	cmp	r3, r2
 8005a1c:	d032      	beq.n	8005a84 <I2C_Enable_IRQ+0x80>
      (hi2c->XferISR != I2C_Slave_ISR_DMA) && \
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
  if ((hi2c->XferISR != I2C_Master_ISR_DMA) && \
 8005a22:	4a38      	ldr	r2, [pc, #224]	@ (8005b04 <I2C_Enable_IRQ+0x100>)
 8005a24:	4293      	cmp	r3, r2
 8005a26:	d02d      	beq.n	8005a84 <I2C_Enable_IRQ+0x80>
      (hi2c->XferISR != I2C_Mem_ISR_DMA))
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
      (hi2c->XferISR != I2C_Slave_ISR_DMA) && \
 8005a2c:	4a36      	ldr	r2, [pc, #216]	@ (8005b08 <I2C_Enable_IRQ+0x104>)
 8005a2e:	4293      	cmp	r3, r2
 8005a30:	d028      	beq.n	8005a84 <I2C_Enable_IRQ+0x80>
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8005a32:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8005a36:	2b00      	cmp	r3, #0
 8005a38:	da03      	bge.n	8005a42 <I2C_Enable_IRQ+0x3e>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8005a3a:	68fb      	ldr	r3, [r7, #12]
 8005a3c:	f043 03b8 	orr.w	r3, r3, #184	@ 0xb8
 8005a40:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8005a42:	887b      	ldrh	r3, [r7, #2]
 8005a44:	f003 0301 	and.w	r3, r3, #1
 8005a48:	2b00      	cmp	r3, #0
 8005a4a:	d003      	beq.n	8005a54 <I2C_Enable_IRQ+0x50>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 8005a4c:	68fb      	ldr	r3, [r7, #12]
 8005a4e:	f043 03f2 	orr.w	r3, r3, #242	@ 0xf2
 8005a52:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8005a54:	887b      	ldrh	r3, [r7, #2]
 8005a56:	f003 0302 	and.w	r3, r3, #2
 8005a5a:	2b00      	cmp	r3, #0
 8005a5c:	d003      	beq.n	8005a66 <I2C_Enable_IRQ+0x62>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 8005a5e:	68fb      	ldr	r3, [r7, #12]
 8005a60:	f043 03f4 	orr.w	r3, r3, #244	@ 0xf4
 8005a64:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 8005a66:	887b      	ldrh	r3, [r7, #2]
 8005a68:	2b10      	cmp	r3, #16
 8005a6a:	d103      	bne.n	8005a74 <I2C_Enable_IRQ+0x70>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8005a6c:	68fb      	ldr	r3, [r7, #12]
 8005a6e:	f043 0390 	orr.w	r3, r3, #144	@ 0x90
 8005a72:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 8005a74:	887b      	ldrh	r3, [r7, #2]
 8005a76:	2b20      	cmp	r3, #32
 8005a78:	d133      	bne.n	8005ae2 <I2C_Enable_IRQ+0xde>
    {
      /* Enable STOP interrupts */
      tmpisr |= I2C_IT_STOPI;
 8005a7a:	68fb      	ldr	r3, [r7, #12]
 8005a7c:	f043 0320 	orr.w	r3, r3, #32
 8005a80:	60fb      	str	r3, [r7, #12]
    if (InterruptRequest == I2C_XFER_CPLT_IT)
 8005a82:	e02e      	b.n	8005ae2 <I2C_Enable_IRQ+0xde>
    }
  }

  else
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8005a84:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8005a88:	2b00      	cmp	r3, #0
 8005a8a:	da03      	bge.n	8005a94 <I2C_Enable_IRQ+0x90>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8005a8c:	68fb      	ldr	r3, [r7, #12]
 8005a8e:	f043 03b8 	orr.w	r3, r3, #184	@ 0xb8
 8005a92:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8005a94:	887b      	ldrh	r3, [r7, #2]
 8005a96:	f003 0301 	and.w	r3, r3, #1
 8005a9a:	2b00      	cmp	r3, #0
 8005a9c:	d003      	beq.n	8005aa6 <I2C_Enable_IRQ+0xa2>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 8005a9e:	68fb      	ldr	r3, [r7, #12]
 8005aa0:	f043 03f2 	orr.w	r3, r3, #242	@ 0xf2
 8005aa4:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8005aa6:	887b      	ldrh	r3, [r7, #2]
 8005aa8:	f003 0302 	and.w	r3, r3, #2
 8005aac:	2b00      	cmp	r3, #0
 8005aae:	d003      	beq.n	8005ab8 <I2C_Enable_IRQ+0xb4>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 8005ab0:	68fb      	ldr	r3, [r7, #12]
 8005ab2:	f043 03f4 	orr.w	r3, r3, #244	@ 0xf4
 8005ab6:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 8005ab8:	887b      	ldrh	r3, [r7, #2]
 8005aba:	2b10      	cmp	r3, #16
 8005abc:	d103      	bne.n	8005ac6 <I2C_Enable_IRQ+0xc2>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8005abe:	68fb      	ldr	r3, [r7, #12]
 8005ac0:	f043 0390 	orr.w	r3, r3, #144	@ 0x90
 8005ac4:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 8005ac6:	887b      	ldrh	r3, [r7, #2]
 8005ac8:	2b20      	cmp	r3, #32
 8005aca:	d103      	bne.n	8005ad4 <I2C_Enable_IRQ+0xd0>
    {
      /* Enable STOP interrupts */
      tmpisr |= (I2C_IT_STOPI | I2C_IT_TCI);
 8005acc:	68fb      	ldr	r3, [r7, #12]
 8005ace:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8005ad2:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8005ad4:	887b      	ldrh	r3, [r7, #2]
 8005ad6:	2b40      	cmp	r3, #64	@ 0x40
 8005ad8:	d103      	bne.n	8005ae2 <I2C_Enable_IRQ+0xde>
    {
      /* Enable TC interrupts */
      tmpisr |= I2C_IT_TCI;
 8005ada:	68fb      	ldr	r3, [r7, #12]
 8005adc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005ae0:	60fb      	str	r3, [r7, #12]
  }

  /* Enable interrupts only at the end */
  /* to avoid the risk of I2C interrupt handle execution before */
  /* all interrupts requested done */
  __HAL_I2C_ENABLE_IT(hi2c, tmpisr);
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	6819      	ldr	r1, [r3, #0]
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	68fa      	ldr	r2, [r7, #12]
 8005aee:	430a      	orrs	r2, r1
 8005af0:	601a      	str	r2, [r3, #0]
}
 8005af2:	bf00      	nop
 8005af4:	3714      	adds	r7, #20
 8005af6:	46bd      	mov	sp, r7
 8005af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005afc:	4770      	bx	lr
 8005afe:	bf00      	nop
 8005b00:	08004501 	.word	0x08004501
 8005b04:	08004925 	.word	0x08004925
 8005b08:	080046d9 	.word	0x080046d9

08005b0c <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8005b0c:	b480      	push	{r7}
 8005b0e:	b085      	sub	sp, #20
 8005b10:	af00      	add	r7, sp, #0
 8005b12:	6078      	str	r0, [r7, #4]
 8005b14:	460b      	mov	r3, r1
 8005b16:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 8005b18:	2300      	movs	r3, #0
 8005b1a:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8005b1c:	887b      	ldrh	r3, [r7, #2]
 8005b1e:	f003 0301 	and.w	r3, r3, #1
 8005b22:	2b00      	cmp	r3, #0
 8005b24:	d00f      	beq.n	8005b46 <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 8005b26:	68fb      	ldr	r3, [r7, #12]
 8005b28:	f043 0342 	orr.w	r3, r3, #66	@ 0x42
 8005b2c:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005b34:	b2db      	uxtb	r3, r3
 8005b36:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8005b3a:	2b28      	cmp	r3, #40	@ 0x28
 8005b3c:	d003      	beq.n	8005b46 <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8005b3e:	68fb      	ldr	r3, [r7, #12]
 8005b40:	f043 03b0 	orr.w	r3, r3, #176	@ 0xb0
 8005b44:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8005b46:	887b      	ldrh	r3, [r7, #2]
 8005b48:	f003 0302 	and.w	r3, r3, #2
 8005b4c:	2b00      	cmp	r3, #0
 8005b4e:	d00f      	beq.n	8005b70 <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 8005b50:	68fb      	ldr	r3, [r7, #12]
 8005b52:	f043 0344 	orr.w	r3, r3, #68	@ 0x44
 8005b56:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005b5e:	b2db      	uxtb	r3, r3
 8005b60:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8005b64:	2b28      	cmp	r3, #40	@ 0x28
 8005b66:	d003      	beq.n	8005b70 <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8005b68:	68fb      	ldr	r3, [r7, #12]
 8005b6a:	f043 03b0 	orr.w	r3, r3, #176	@ 0xb0
 8005b6e:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8005b70:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8005b74:	2b00      	cmp	r3, #0
 8005b76:	da03      	bge.n	8005b80 <I2C_Disable_IRQ+0x74>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8005b78:	68fb      	ldr	r3, [r7, #12]
 8005b7a:	f043 03b8 	orr.w	r3, r3, #184	@ 0xb8
 8005b7e:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 8005b80:	887b      	ldrh	r3, [r7, #2]
 8005b82:	2b10      	cmp	r3, #16
 8005b84:	d103      	bne.n	8005b8e <I2C_Disable_IRQ+0x82>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8005b86:	68fb      	ldr	r3, [r7, #12]
 8005b88:	f043 0390 	orr.w	r3, r3, #144	@ 0x90
 8005b8c:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 8005b8e:	887b      	ldrh	r3, [r7, #2]
 8005b90:	2b20      	cmp	r3, #32
 8005b92:	d103      	bne.n	8005b9c <I2C_Disable_IRQ+0x90>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 8005b94:	68fb      	ldr	r3, [r7, #12]
 8005b96:	f043 0320 	orr.w	r3, r3, #32
 8005b9a:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8005b9c:	887b      	ldrh	r3, [r7, #2]
 8005b9e:	2b40      	cmp	r3, #64	@ 0x40
 8005ba0:	d103      	bne.n	8005baa <I2C_Disable_IRQ+0x9e>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 8005ba2:	68fb      	ldr	r3, [r7, #12]
 8005ba4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005ba8:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	6819      	ldr	r1, [r3, #0]
 8005bb0:	68fb      	ldr	r3, [r7, #12]
 8005bb2:	43da      	mvns	r2, r3
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	400a      	ands	r2, r1
 8005bba:	601a      	str	r2, [r3, #0]
}
 8005bbc:	bf00      	nop
 8005bbe:	3714      	adds	r7, #20
 8005bc0:	46bd      	mov	sp, r7
 8005bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bc6:	4770      	bx	lr

08005bc8 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8005bc8:	b480      	push	{r7}
 8005bca:	b083      	sub	sp, #12
 8005bcc:	af00      	add	r7, sp, #0
 8005bce:	6078      	str	r0, [r7, #4]
 8005bd0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005bd8:	b2db      	uxtb	r3, r3
 8005bda:	2b20      	cmp	r3, #32
 8005bdc:	d138      	bne.n	8005c50 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005be4:	2b01      	cmp	r3, #1
 8005be6:	d101      	bne.n	8005bec <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8005be8:	2302      	movs	r3, #2
 8005bea:	e032      	b.n	8005c52 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	2201      	movs	r2, #1
 8005bf0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	2224      	movs	r2, #36	@ 0x24
 8005bf8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	681a      	ldr	r2, [r3, #0]
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	f022 0201 	bic.w	r2, r2, #1
 8005c0a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	681a      	ldr	r2, [r3, #0]
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	681b      	ldr	r3, [r3, #0]
 8005c16:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8005c1a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	6819      	ldr	r1, [r3, #0]
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	683a      	ldr	r2, [r7, #0]
 8005c28:	430a      	orrs	r2, r1
 8005c2a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	681a      	ldr	r2, [r3, #0]
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	f042 0201 	orr.w	r2, r2, #1
 8005c3a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	2220      	movs	r2, #32
 8005c40:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	2200      	movs	r2, #0
 8005c48:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8005c4c:	2300      	movs	r3, #0
 8005c4e:	e000      	b.n	8005c52 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8005c50:	2302      	movs	r3, #2
  }
}
 8005c52:	4618      	mov	r0, r3
 8005c54:	370c      	adds	r7, #12
 8005c56:	46bd      	mov	sp, r7
 8005c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c5c:	4770      	bx	lr

08005c5e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8005c5e:	b480      	push	{r7}
 8005c60:	b085      	sub	sp, #20
 8005c62:	af00      	add	r7, sp, #0
 8005c64:	6078      	str	r0, [r7, #4]
 8005c66:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005c6e:	b2db      	uxtb	r3, r3
 8005c70:	2b20      	cmp	r3, #32
 8005c72:	d139      	bne.n	8005ce8 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005c7a:	2b01      	cmp	r3, #1
 8005c7c:	d101      	bne.n	8005c82 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8005c7e:	2302      	movs	r3, #2
 8005c80:	e033      	b.n	8005cea <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	2201      	movs	r2, #1
 8005c86:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	2224      	movs	r2, #36	@ 0x24
 8005c8e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	681a      	ldr	r2, [r3, #0]
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	f022 0201 	bic.w	r2, r2, #1
 8005ca0:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8005caa:	68fb      	ldr	r3, [r7, #12]
 8005cac:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8005cb0:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8005cb2:	683b      	ldr	r3, [r7, #0]
 8005cb4:	021b      	lsls	r3, r3, #8
 8005cb6:	68fa      	ldr	r2, [r7, #12]
 8005cb8:	4313      	orrs	r3, r2
 8005cba:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	68fa      	ldr	r2, [r7, #12]
 8005cc2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	681a      	ldr	r2, [r3, #0]
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	f042 0201 	orr.w	r2, r2, #1
 8005cd2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	2220      	movs	r2, #32
 8005cd8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	2200      	movs	r2, #0
 8005ce0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8005ce4:	2300      	movs	r3, #0
 8005ce6:	e000      	b.n	8005cea <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8005ce8:	2302      	movs	r3, #2
  }
}
 8005cea:	4618      	mov	r0, r3
 8005cec:	3714      	adds	r7, #20
 8005cee:	46bd      	mov	sp, r7
 8005cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cf4:	4770      	bx	lr
	...

08005cf8 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8005cf8:	b480      	push	{r7}
 8005cfa:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005cfc:	4b05      	ldr	r3, [pc, #20]	@ (8005d14 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	4a04      	ldr	r2, [pc, #16]	@ (8005d14 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8005d02:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005d06:	6013      	str	r3, [r2, #0]
}
 8005d08:	bf00      	nop
 8005d0a:	46bd      	mov	sp, r7
 8005d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d10:	4770      	bx	lr
 8005d12:	bf00      	nop
 8005d14:	40007000 	.word	0x40007000

08005d18 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8005d18:	b480      	push	{r7}
 8005d1a:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8005d1c:	4b04      	ldr	r3, [pc, #16]	@ (8005d30 <HAL_PWREx_GetVoltageRange+0x18>)
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 8005d24:	4618      	mov	r0, r3
 8005d26:	46bd      	mov	sp, r7
 8005d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d2c:	4770      	bx	lr
 8005d2e:	bf00      	nop
 8005d30:	40007000 	.word	0x40007000

08005d34 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8005d34:	b480      	push	{r7}
 8005d36:	b085      	sub	sp, #20
 8005d38:	af00      	add	r7, sp, #0
 8005d3a:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005d42:	d130      	bne.n	8005da6 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8005d44:	4b23      	ldr	r3, [pc, #140]	@ (8005dd4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8005d4c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005d50:	d038      	beq.n	8005dc4 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8005d52:	4b20      	ldr	r3, [pc, #128]	@ (8005dd4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8005d5a:	4a1e      	ldr	r2, [pc, #120]	@ (8005dd4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005d5c:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8005d60:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8005d62:	4b1d      	ldr	r3, [pc, #116]	@ (8005dd8 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	2232      	movs	r2, #50	@ 0x32
 8005d68:	fb02 f303 	mul.w	r3, r2, r3
 8005d6c:	4a1b      	ldr	r2, [pc, #108]	@ (8005ddc <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8005d6e:	fba2 2303 	umull	r2, r3, r2, r3
 8005d72:	0c9b      	lsrs	r3, r3, #18
 8005d74:	3301      	adds	r3, #1
 8005d76:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005d78:	e002      	b.n	8005d80 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8005d7a:	68fb      	ldr	r3, [r7, #12]
 8005d7c:	3b01      	subs	r3, #1
 8005d7e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005d80:	4b14      	ldr	r3, [pc, #80]	@ (8005dd4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005d82:	695b      	ldr	r3, [r3, #20]
 8005d84:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005d88:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005d8c:	d102      	bne.n	8005d94 <HAL_PWREx_ControlVoltageScaling+0x60>
 8005d8e:	68fb      	ldr	r3, [r7, #12]
 8005d90:	2b00      	cmp	r3, #0
 8005d92:	d1f2      	bne.n	8005d7a <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8005d94:	4b0f      	ldr	r3, [pc, #60]	@ (8005dd4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005d96:	695b      	ldr	r3, [r3, #20]
 8005d98:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005d9c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005da0:	d110      	bne.n	8005dc4 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8005da2:	2303      	movs	r3, #3
 8005da4:	e00f      	b.n	8005dc6 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8005da6:	4b0b      	ldr	r3, [pc, #44]	@ (8005dd4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8005dae:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005db2:	d007      	beq.n	8005dc4 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8005db4:	4b07      	ldr	r3, [pc, #28]	@ (8005dd4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8005dbc:	4a05      	ldr	r2, [pc, #20]	@ (8005dd4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005dbe:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8005dc2:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8005dc4:	2300      	movs	r3, #0
}
 8005dc6:	4618      	mov	r0, r3
 8005dc8:	3714      	adds	r7, #20
 8005dca:	46bd      	mov	sp, r7
 8005dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dd0:	4770      	bx	lr
 8005dd2:	bf00      	nop
 8005dd4:	40007000 	.word	0x40007000
 8005dd8:	20000040 	.word	0x20000040
 8005ddc:	431bde83 	.word	0x431bde83

08005de0 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005de0:	b580      	push	{r7, lr}
 8005de2:	b088      	sub	sp, #32
 8005de4:	af00      	add	r7, sp, #0
 8005de6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	2b00      	cmp	r3, #0
 8005dec:	d102      	bne.n	8005df4 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8005dee:	2301      	movs	r3, #1
 8005df0:	f000 bc02 	b.w	80065f8 <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005df4:	4b96      	ldr	r3, [pc, #600]	@ (8006050 <HAL_RCC_OscConfig+0x270>)
 8005df6:	689b      	ldr	r3, [r3, #8]
 8005df8:	f003 030c 	and.w	r3, r3, #12
 8005dfc:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005dfe:	4b94      	ldr	r3, [pc, #592]	@ (8006050 <HAL_RCC_OscConfig+0x270>)
 8005e00:	68db      	ldr	r3, [r3, #12]
 8005e02:	f003 0303 	and.w	r3, r3, #3
 8005e06:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	f003 0310 	and.w	r3, r3, #16
 8005e10:	2b00      	cmp	r3, #0
 8005e12:	f000 80e4 	beq.w	8005fde <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8005e16:	69bb      	ldr	r3, [r7, #24]
 8005e18:	2b00      	cmp	r3, #0
 8005e1a:	d007      	beq.n	8005e2c <HAL_RCC_OscConfig+0x4c>
 8005e1c:	69bb      	ldr	r3, [r7, #24]
 8005e1e:	2b0c      	cmp	r3, #12
 8005e20:	f040 808b 	bne.w	8005f3a <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8005e24:	697b      	ldr	r3, [r7, #20]
 8005e26:	2b01      	cmp	r3, #1
 8005e28:	f040 8087 	bne.w	8005f3a <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8005e2c:	4b88      	ldr	r3, [pc, #544]	@ (8006050 <HAL_RCC_OscConfig+0x270>)
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	f003 0302 	and.w	r3, r3, #2
 8005e34:	2b00      	cmp	r3, #0
 8005e36:	d005      	beq.n	8005e44 <HAL_RCC_OscConfig+0x64>
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	699b      	ldr	r3, [r3, #24]
 8005e3c:	2b00      	cmp	r3, #0
 8005e3e:	d101      	bne.n	8005e44 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8005e40:	2301      	movs	r3, #1
 8005e42:	e3d9      	b.n	80065f8 <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	6a1a      	ldr	r2, [r3, #32]
 8005e48:	4b81      	ldr	r3, [pc, #516]	@ (8006050 <HAL_RCC_OscConfig+0x270>)
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	f003 0308 	and.w	r3, r3, #8
 8005e50:	2b00      	cmp	r3, #0
 8005e52:	d004      	beq.n	8005e5e <HAL_RCC_OscConfig+0x7e>
 8005e54:	4b7e      	ldr	r3, [pc, #504]	@ (8006050 <HAL_RCC_OscConfig+0x270>)
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005e5c:	e005      	b.n	8005e6a <HAL_RCC_OscConfig+0x8a>
 8005e5e:	4b7c      	ldr	r3, [pc, #496]	@ (8006050 <HAL_RCC_OscConfig+0x270>)
 8005e60:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005e64:	091b      	lsrs	r3, r3, #4
 8005e66:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005e6a:	4293      	cmp	r3, r2
 8005e6c:	d223      	bcs.n	8005eb6 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	6a1b      	ldr	r3, [r3, #32]
 8005e72:	4618      	mov	r0, r3
 8005e74:	f000 fdbe 	bl	80069f4 <RCC_SetFlashLatencyFromMSIRange>
 8005e78:	4603      	mov	r3, r0
 8005e7a:	2b00      	cmp	r3, #0
 8005e7c:	d001      	beq.n	8005e82 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8005e7e:	2301      	movs	r3, #1
 8005e80:	e3ba      	b.n	80065f8 <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005e82:	4b73      	ldr	r3, [pc, #460]	@ (8006050 <HAL_RCC_OscConfig+0x270>)
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	4a72      	ldr	r2, [pc, #456]	@ (8006050 <HAL_RCC_OscConfig+0x270>)
 8005e88:	f043 0308 	orr.w	r3, r3, #8
 8005e8c:	6013      	str	r3, [r2, #0]
 8005e8e:	4b70      	ldr	r3, [pc, #448]	@ (8006050 <HAL_RCC_OscConfig+0x270>)
 8005e90:	681b      	ldr	r3, [r3, #0]
 8005e92:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	6a1b      	ldr	r3, [r3, #32]
 8005e9a:	496d      	ldr	r1, [pc, #436]	@ (8006050 <HAL_RCC_OscConfig+0x270>)
 8005e9c:	4313      	orrs	r3, r2
 8005e9e:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005ea0:	4b6b      	ldr	r3, [pc, #428]	@ (8006050 <HAL_RCC_OscConfig+0x270>)
 8005ea2:	685b      	ldr	r3, [r3, #4]
 8005ea4:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	69db      	ldr	r3, [r3, #28]
 8005eac:	021b      	lsls	r3, r3, #8
 8005eae:	4968      	ldr	r1, [pc, #416]	@ (8006050 <HAL_RCC_OscConfig+0x270>)
 8005eb0:	4313      	orrs	r3, r2
 8005eb2:	604b      	str	r3, [r1, #4]
 8005eb4:	e025      	b.n	8005f02 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005eb6:	4b66      	ldr	r3, [pc, #408]	@ (8006050 <HAL_RCC_OscConfig+0x270>)
 8005eb8:	681b      	ldr	r3, [r3, #0]
 8005eba:	4a65      	ldr	r2, [pc, #404]	@ (8006050 <HAL_RCC_OscConfig+0x270>)
 8005ebc:	f043 0308 	orr.w	r3, r3, #8
 8005ec0:	6013      	str	r3, [r2, #0]
 8005ec2:	4b63      	ldr	r3, [pc, #396]	@ (8006050 <HAL_RCC_OscConfig+0x270>)
 8005ec4:	681b      	ldr	r3, [r3, #0]
 8005ec6:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	6a1b      	ldr	r3, [r3, #32]
 8005ece:	4960      	ldr	r1, [pc, #384]	@ (8006050 <HAL_RCC_OscConfig+0x270>)
 8005ed0:	4313      	orrs	r3, r2
 8005ed2:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005ed4:	4b5e      	ldr	r3, [pc, #376]	@ (8006050 <HAL_RCC_OscConfig+0x270>)
 8005ed6:	685b      	ldr	r3, [r3, #4]
 8005ed8:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	69db      	ldr	r3, [r3, #28]
 8005ee0:	021b      	lsls	r3, r3, #8
 8005ee2:	495b      	ldr	r1, [pc, #364]	@ (8006050 <HAL_RCC_OscConfig+0x270>)
 8005ee4:	4313      	orrs	r3, r2
 8005ee6:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8005ee8:	69bb      	ldr	r3, [r7, #24]
 8005eea:	2b00      	cmp	r3, #0
 8005eec:	d109      	bne.n	8005f02 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	6a1b      	ldr	r3, [r3, #32]
 8005ef2:	4618      	mov	r0, r3
 8005ef4:	f000 fd7e 	bl	80069f4 <RCC_SetFlashLatencyFromMSIRange>
 8005ef8:	4603      	mov	r3, r0
 8005efa:	2b00      	cmp	r3, #0
 8005efc:	d001      	beq.n	8005f02 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8005efe:	2301      	movs	r3, #1
 8005f00:	e37a      	b.n	80065f8 <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8005f02:	f000 fc81 	bl	8006808 <HAL_RCC_GetSysClockFreq>
 8005f06:	4602      	mov	r2, r0
 8005f08:	4b51      	ldr	r3, [pc, #324]	@ (8006050 <HAL_RCC_OscConfig+0x270>)
 8005f0a:	689b      	ldr	r3, [r3, #8]
 8005f0c:	091b      	lsrs	r3, r3, #4
 8005f0e:	f003 030f 	and.w	r3, r3, #15
 8005f12:	4950      	ldr	r1, [pc, #320]	@ (8006054 <HAL_RCC_OscConfig+0x274>)
 8005f14:	5ccb      	ldrb	r3, [r1, r3]
 8005f16:	f003 031f 	and.w	r3, r3, #31
 8005f1a:	fa22 f303 	lsr.w	r3, r2, r3
 8005f1e:	4a4e      	ldr	r2, [pc, #312]	@ (8006058 <HAL_RCC_OscConfig+0x278>)
 8005f20:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8005f22:	4b4e      	ldr	r3, [pc, #312]	@ (800605c <HAL_RCC_OscConfig+0x27c>)
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	4618      	mov	r0, r3
 8005f28:	f7fc fb92 	bl	8002650 <HAL_InitTick>
 8005f2c:	4603      	mov	r3, r0
 8005f2e:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8005f30:	7bfb      	ldrb	r3, [r7, #15]
 8005f32:	2b00      	cmp	r3, #0
 8005f34:	d052      	beq.n	8005fdc <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8005f36:	7bfb      	ldrb	r3, [r7, #15]
 8005f38:	e35e      	b.n	80065f8 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	699b      	ldr	r3, [r3, #24]
 8005f3e:	2b00      	cmp	r3, #0
 8005f40:	d032      	beq.n	8005fa8 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8005f42:	4b43      	ldr	r3, [pc, #268]	@ (8006050 <HAL_RCC_OscConfig+0x270>)
 8005f44:	681b      	ldr	r3, [r3, #0]
 8005f46:	4a42      	ldr	r2, [pc, #264]	@ (8006050 <HAL_RCC_OscConfig+0x270>)
 8005f48:	f043 0301 	orr.w	r3, r3, #1
 8005f4c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8005f4e:	f7fd f8ab 	bl	80030a8 <HAL_GetTick>
 8005f52:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8005f54:	e008      	b.n	8005f68 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8005f56:	f7fd f8a7 	bl	80030a8 <HAL_GetTick>
 8005f5a:	4602      	mov	r2, r0
 8005f5c:	693b      	ldr	r3, [r7, #16]
 8005f5e:	1ad3      	subs	r3, r2, r3
 8005f60:	2b02      	cmp	r3, #2
 8005f62:	d901      	bls.n	8005f68 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8005f64:	2303      	movs	r3, #3
 8005f66:	e347      	b.n	80065f8 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8005f68:	4b39      	ldr	r3, [pc, #228]	@ (8006050 <HAL_RCC_OscConfig+0x270>)
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	f003 0302 	and.w	r3, r3, #2
 8005f70:	2b00      	cmp	r3, #0
 8005f72:	d0f0      	beq.n	8005f56 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005f74:	4b36      	ldr	r3, [pc, #216]	@ (8006050 <HAL_RCC_OscConfig+0x270>)
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	4a35      	ldr	r2, [pc, #212]	@ (8006050 <HAL_RCC_OscConfig+0x270>)
 8005f7a:	f043 0308 	orr.w	r3, r3, #8
 8005f7e:	6013      	str	r3, [r2, #0]
 8005f80:	4b33      	ldr	r3, [pc, #204]	@ (8006050 <HAL_RCC_OscConfig+0x270>)
 8005f82:	681b      	ldr	r3, [r3, #0]
 8005f84:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	6a1b      	ldr	r3, [r3, #32]
 8005f8c:	4930      	ldr	r1, [pc, #192]	@ (8006050 <HAL_RCC_OscConfig+0x270>)
 8005f8e:	4313      	orrs	r3, r2
 8005f90:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005f92:	4b2f      	ldr	r3, [pc, #188]	@ (8006050 <HAL_RCC_OscConfig+0x270>)
 8005f94:	685b      	ldr	r3, [r3, #4]
 8005f96:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	69db      	ldr	r3, [r3, #28]
 8005f9e:	021b      	lsls	r3, r3, #8
 8005fa0:	492b      	ldr	r1, [pc, #172]	@ (8006050 <HAL_RCC_OscConfig+0x270>)
 8005fa2:	4313      	orrs	r3, r2
 8005fa4:	604b      	str	r3, [r1, #4]
 8005fa6:	e01a      	b.n	8005fde <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8005fa8:	4b29      	ldr	r3, [pc, #164]	@ (8006050 <HAL_RCC_OscConfig+0x270>)
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	4a28      	ldr	r2, [pc, #160]	@ (8006050 <HAL_RCC_OscConfig+0x270>)
 8005fae:	f023 0301 	bic.w	r3, r3, #1
 8005fb2:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8005fb4:	f7fd f878 	bl	80030a8 <HAL_GetTick>
 8005fb8:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8005fba:	e008      	b.n	8005fce <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8005fbc:	f7fd f874 	bl	80030a8 <HAL_GetTick>
 8005fc0:	4602      	mov	r2, r0
 8005fc2:	693b      	ldr	r3, [r7, #16]
 8005fc4:	1ad3      	subs	r3, r2, r3
 8005fc6:	2b02      	cmp	r3, #2
 8005fc8:	d901      	bls.n	8005fce <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8005fca:	2303      	movs	r3, #3
 8005fcc:	e314      	b.n	80065f8 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8005fce:	4b20      	ldr	r3, [pc, #128]	@ (8006050 <HAL_RCC_OscConfig+0x270>)
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	f003 0302 	and.w	r3, r3, #2
 8005fd6:	2b00      	cmp	r3, #0
 8005fd8:	d1f0      	bne.n	8005fbc <HAL_RCC_OscConfig+0x1dc>
 8005fda:	e000      	b.n	8005fde <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8005fdc:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	681b      	ldr	r3, [r3, #0]
 8005fe2:	f003 0301 	and.w	r3, r3, #1
 8005fe6:	2b00      	cmp	r3, #0
 8005fe8:	d073      	beq.n	80060d2 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8005fea:	69bb      	ldr	r3, [r7, #24]
 8005fec:	2b08      	cmp	r3, #8
 8005fee:	d005      	beq.n	8005ffc <HAL_RCC_OscConfig+0x21c>
 8005ff0:	69bb      	ldr	r3, [r7, #24]
 8005ff2:	2b0c      	cmp	r3, #12
 8005ff4:	d10e      	bne.n	8006014 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8005ff6:	697b      	ldr	r3, [r7, #20]
 8005ff8:	2b03      	cmp	r3, #3
 8005ffa:	d10b      	bne.n	8006014 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005ffc:	4b14      	ldr	r3, [pc, #80]	@ (8006050 <HAL_RCC_OscConfig+0x270>)
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006004:	2b00      	cmp	r3, #0
 8006006:	d063      	beq.n	80060d0 <HAL_RCC_OscConfig+0x2f0>
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	685b      	ldr	r3, [r3, #4]
 800600c:	2b00      	cmp	r3, #0
 800600e:	d15f      	bne.n	80060d0 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8006010:	2301      	movs	r3, #1
 8006012:	e2f1      	b.n	80065f8 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	685b      	ldr	r3, [r3, #4]
 8006018:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800601c:	d106      	bne.n	800602c <HAL_RCC_OscConfig+0x24c>
 800601e:	4b0c      	ldr	r3, [pc, #48]	@ (8006050 <HAL_RCC_OscConfig+0x270>)
 8006020:	681b      	ldr	r3, [r3, #0]
 8006022:	4a0b      	ldr	r2, [pc, #44]	@ (8006050 <HAL_RCC_OscConfig+0x270>)
 8006024:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006028:	6013      	str	r3, [r2, #0]
 800602a:	e025      	b.n	8006078 <HAL_RCC_OscConfig+0x298>
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	685b      	ldr	r3, [r3, #4]
 8006030:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8006034:	d114      	bne.n	8006060 <HAL_RCC_OscConfig+0x280>
 8006036:	4b06      	ldr	r3, [pc, #24]	@ (8006050 <HAL_RCC_OscConfig+0x270>)
 8006038:	681b      	ldr	r3, [r3, #0]
 800603a:	4a05      	ldr	r2, [pc, #20]	@ (8006050 <HAL_RCC_OscConfig+0x270>)
 800603c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8006040:	6013      	str	r3, [r2, #0]
 8006042:	4b03      	ldr	r3, [pc, #12]	@ (8006050 <HAL_RCC_OscConfig+0x270>)
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	4a02      	ldr	r2, [pc, #8]	@ (8006050 <HAL_RCC_OscConfig+0x270>)
 8006048:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800604c:	6013      	str	r3, [r2, #0]
 800604e:	e013      	b.n	8006078 <HAL_RCC_OscConfig+0x298>
 8006050:	40021000 	.word	0x40021000
 8006054:	0801bbd4 	.word	0x0801bbd4
 8006058:	20000040 	.word	0x20000040
 800605c:	20000044 	.word	0x20000044
 8006060:	4ba0      	ldr	r3, [pc, #640]	@ (80062e4 <HAL_RCC_OscConfig+0x504>)
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	4a9f      	ldr	r2, [pc, #636]	@ (80062e4 <HAL_RCC_OscConfig+0x504>)
 8006066:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800606a:	6013      	str	r3, [r2, #0]
 800606c:	4b9d      	ldr	r3, [pc, #628]	@ (80062e4 <HAL_RCC_OscConfig+0x504>)
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	4a9c      	ldr	r2, [pc, #624]	@ (80062e4 <HAL_RCC_OscConfig+0x504>)
 8006072:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8006076:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	685b      	ldr	r3, [r3, #4]
 800607c:	2b00      	cmp	r3, #0
 800607e:	d013      	beq.n	80060a8 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006080:	f7fd f812 	bl	80030a8 <HAL_GetTick>
 8006084:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006086:	e008      	b.n	800609a <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006088:	f7fd f80e 	bl	80030a8 <HAL_GetTick>
 800608c:	4602      	mov	r2, r0
 800608e:	693b      	ldr	r3, [r7, #16]
 8006090:	1ad3      	subs	r3, r2, r3
 8006092:	2b64      	cmp	r3, #100	@ 0x64
 8006094:	d901      	bls.n	800609a <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8006096:	2303      	movs	r3, #3
 8006098:	e2ae      	b.n	80065f8 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800609a:	4b92      	ldr	r3, [pc, #584]	@ (80062e4 <HAL_RCC_OscConfig+0x504>)
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80060a2:	2b00      	cmp	r3, #0
 80060a4:	d0f0      	beq.n	8006088 <HAL_RCC_OscConfig+0x2a8>
 80060a6:	e014      	b.n	80060d2 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80060a8:	f7fc fffe 	bl	80030a8 <HAL_GetTick>
 80060ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80060ae:	e008      	b.n	80060c2 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80060b0:	f7fc fffa 	bl	80030a8 <HAL_GetTick>
 80060b4:	4602      	mov	r2, r0
 80060b6:	693b      	ldr	r3, [r7, #16]
 80060b8:	1ad3      	subs	r3, r2, r3
 80060ba:	2b64      	cmp	r3, #100	@ 0x64
 80060bc:	d901      	bls.n	80060c2 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80060be:	2303      	movs	r3, #3
 80060c0:	e29a      	b.n	80065f8 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80060c2:	4b88      	ldr	r3, [pc, #544]	@ (80062e4 <HAL_RCC_OscConfig+0x504>)
 80060c4:	681b      	ldr	r3, [r3, #0]
 80060c6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80060ca:	2b00      	cmp	r3, #0
 80060cc:	d1f0      	bne.n	80060b0 <HAL_RCC_OscConfig+0x2d0>
 80060ce:	e000      	b.n	80060d2 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80060d0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	f003 0302 	and.w	r3, r3, #2
 80060da:	2b00      	cmp	r3, #0
 80060dc:	d060      	beq.n	80061a0 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80060de:	69bb      	ldr	r3, [r7, #24]
 80060e0:	2b04      	cmp	r3, #4
 80060e2:	d005      	beq.n	80060f0 <HAL_RCC_OscConfig+0x310>
 80060e4:	69bb      	ldr	r3, [r7, #24]
 80060e6:	2b0c      	cmp	r3, #12
 80060e8:	d119      	bne.n	800611e <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80060ea:	697b      	ldr	r3, [r7, #20]
 80060ec:	2b02      	cmp	r3, #2
 80060ee:	d116      	bne.n	800611e <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80060f0:	4b7c      	ldr	r3, [pc, #496]	@ (80062e4 <HAL_RCC_OscConfig+0x504>)
 80060f2:	681b      	ldr	r3, [r3, #0]
 80060f4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80060f8:	2b00      	cmp	r3, #0
 80060fa:	d005      	beq.n	8006108 <HAL_RCC_OscConfig+0x328>
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	68db      	ldr	r3, [r3, #12]
 8006100:	2b00      	cmp	r3, #0
 8006102:	d101      	bne.n	8006108 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8006104:	2301      	movs	r3, #1
 8006106:	e277      	b.n	80065f8 <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006108:	4b76      	ldr	r3, [pc, #472]	@ (80062e4 <HAL_RCC_OscConfig+0x504>)
 800610a:	685b      	ldr	r3, [r3, #4]
 800610c:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	691b      	ldr	r3, [r3, #16]
 8006114:	061b      	lsls	r3, r3, #24
 8006116:	4973      	ldr	r1, [pc, #460]	@ (80062e4 <HAL_RCC_OscConfig+0x504>)
 8006118:	4313      	orrs	r3, r2
 800611a:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800611c:	e040      	b.n	80061a0 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	68db      	ldr	r3, [r3, #12]
 8006122:	2b00      	cmp	r3, #0
 8006124:	d023      	beq.n	800616e <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006126:	4b6f      	ldr	r3, [pc, #444]	@ (80062e4 <HAL_RCC_OscConfig+0x504>)
 8006128:	681b      	ldr	r3, [r3, #0]
 800612a:	4a6e      	ldr	r2, [pc, #440]	@ (80062e4 <HAL_RCC_OscConfig+0x504>)
 800612c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006130:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006132:	f7fc ffb9 	bl	80030a8 <HAL_GetTick>
 8006136:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006138:	e008      	b.n	800614c <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800613a:	f7fc ffb5 	bl	80030a8 <HAL_GetTick>
 800613e:	4602      	mov	r2, r0
 8006140:	693b      	ldr	r3, [r7, #16]
 8006142:	1ad3      	subs	r3, r2, r3
 8006144:	2b02      	cmp	r3, #2
 8006146:	d901      	bls.n	800614c <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8006148:	2303      	movs	r3, #3
 800614a:	e255      	b.n	80065f8 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800614c:	4b65      	ldr	r3, [pc, #404]	@ (80062e4 <HAL_RCC_OscConfig+0x504>)
 800614e:	681b      	ldr	r3, [r3, #0]
 8006150:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006154:	2b00      	cmp	r3, #0
 8006156:	d0f0      	beq.n	800613a <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006158:	4b62      	ldr	r3, [pc, #392]	@ (80062e4 <HAL_RCC_OscConfig+0x504>)
 800615a:	685b      	ldr	r3, [r3, #4]
 800615c:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	691b      	ldr	r3, [r3, #16]
 8006164:	061b      	lsls	r3, r3, #24
 8006166:	495f      	ldr	r1, [pc, #380]	@ (80062e4 <HAL_RCC_OscConfig+0x504>)
 8006168:	4313      	orrs	r3, r2
 800616a:	604b      	str	r3, [r1, #4]
 800616c:	e018      	b.n	80061a0 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800616e:	4b5d      	ldr	r3, [pc, #372]	@ (80062e4 <HAL_RCC_OscConfig+0x504>)
 8006170:	681b      	ldr	r3, [r3, #0]
 8006172:	4a5c      	ldr	r2, [pc, #368]	@ (80062e4 <HAL_RCC_OscConfig+0x504>)
 8006174:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006178:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800617a:	f7fc ff95 	bl	80030a8 <HAL_GetTick>
 800617e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8006180:	e008      	b.n	8006194 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006182:	f7fc ff91 	bl	80030a8 <HAL_GetTick>
 8006186:	4602      	mov	r2, r0
 8006188:	693b      	ldr	r3, [r7, #16]
 800618a:	1ad3      	subs	r3, r2, r3
 800618c:	2b02      	cmp	r3, #2
 800618e:	d901      	bls.n	8006194 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8006190:	2303      	movs	r3, #3
 8006192:	e231      	b.n	80065f8 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8006194:	4b53      	ldr	r3, [pc, #332]	@ (80062e4 <HAL_RCC_OscConfig+0x504>)
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800619c:	2b00      	cmp	r3, #0
 800619e:	d1f0      	bne.n	8006182 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	f003 0308 	and.w	r3, r3, #8
 80061a8:	2b00      	cmp	r3, #0
 80061aa:	d03c      	beq.n	8006226 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	695b      	ldr	r3, [r3, #20]
 80061b0:	2b00      	cmp	r3, #0
 80061b2:	d01c      	beq.n	80061ee <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80061b4:	4b4b      	ldr	r3, [pc, #300]	@ (80062e4 <HAL_RCC_OscConfig+0x504>)
 80061b6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80061ba:	4a4a      	ldr	r2, [pc, #296]	@ (80062e4 <HAL_RCC_OscConfig+0x504>)
 80061bc:	f043 0301 	orr.w	r3, r3, #1
 80061c0:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80061c4:	f7fc ff70 	bl	80030a8 <HAL_GetTick>
 80061c8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80061ca:	e008      	b.n	80061de <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80061cc:	f7fc ff6c 	bl	80030a8 <HAL_GetTick>
 80061d0:	4602      	mov	r2, r0
 80061d2:	693b      	ldr	r3, [r7, #16]
 80061d4:	1ad3      	subs	r3, r2, r3
 80061d6:	2b02      	cmp	r3, #2
 80061d8:	d901      	bls.n	80061de <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80061da:	2303      	movs	r3, #3
 80061dc:	e20c      	b.n	80065f8 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80061de:	4b41      	ldr	r3, [pc, #260]	@ (80062e4 <HAL_RCC_OscConfig+0x504>)
 80061e0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80061e4:	f003 0302 	and.w	r3, r3, #2
 80061e8:	2b00      	cmp	r3, #0
 80061ea:	d0ef      	beq.n	80061cc <HAL_RCC_OscConfig+0x3ec>
 80061ec:	e01b      	b.n	8006226 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80061ee:	4b3d      	ldr	r3, [pc, #244]	@ (80062e4 <HAL_RCC_OscConfig+0x504>)
 80061f0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80061f4:	4a3b      	ldr	r2, [pc, #236]	@ (80062e4 <HAL_RCC_OscConfig+0x504>)
 80061f6:	f023 0301 	bic.w	r3, r3, #1
 80061fa:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80061fe:	f7fc ff53 	bl	80030a8 <HAL_GetTick>
 8006202:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8006204:	e008      	b.n	8006218 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006206:	f7fc ff4f 	bl	80030a8 <HAL_GetTick>
 800620a:	4602      	mov	r2, r0
 800620c:	693b      	ldr	r3, [r7, #16]
 800620e:	1ad3      	subs	r3, r2, r3
 8006210:	2b02      	cmp	r3, #2
 8006212:	d901      	bls.n	8006218 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8006214:	2303      	movs	r3, #3
 8006216:	e1ef      	b.n	80065f8 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8006218:	4b32      	ldr	r3, [pc, #200]	@ (80062e4 <HAL_RCC_OscConfig+0x504>)
 800621a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800621e:	f003 0302 	and.w	r3, r3, #2
 8006222:	2b00      	cmp	r3, #0
 8006224:	d1ef      	bne.n	8006206 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	681b      	ldr	r3, [r3, #0]
 800622a:	f003 0304 	and.w	r3, r3, #4
 800622e:	2b00      	cmp	r3, #0
 8006230:	f000 80a6 	beq.w	8006380 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006234:	2300      	movs	r3, #0
 8006236:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8006238:	4b2a      	ldr	r3, [pc, #168]	@ (80062e4 <HAL_RCC_OscConfig+0x504>)
 800623a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800623c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006240:	2b00      	cmp	r3, #0
 8006242:	d10d      	bne.n	8006260 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006244:	4b27      	ldr	r3, [pc, #156]	@ (80062e4 <HAL_RCC_OscConfig+0x504>)
 8006246:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006248:	4a26      	ldr	r2, [pc, #152]	@ (80062e4 <HAL_RCC_OscConfig+0x504>)
 800624a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800624e:	6593      	str	r3, [r2, #88]	@ 0x58
 8006250:	4b24      	ldr	r3, [pc, #144]	@ (80062e4 <HAL_RCC_OscConfig+0x504>)
 8006252:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006254:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006258:	60bb      	str	r3, [r7, #8]
 800625a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800625c:	2301      	movs	r3, #1
 800625e:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006260:	4b21      	ldr	r3, [pc, #132]	@ (80062e8 <HAL_RCC_OscConfig+0x508>)
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006268:	2b00      	cmp	r3, #0
 800626a:	d118      	bne.n	800629e <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800626c:	4b1e      	ldr	r3, [pc, #120]	@ (80062e8 <HAL_RCC_OscConfig+0x508>)
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	4a1d      	ldr	r2, [pc, #116]	@ (80062e8 <HAL_RCC_OscConfig+0x508>)
 8006272:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006276:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006278:	f7fc ff16 	bl	80030a8 <HAL_GetTick>
 800627c:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800627e:	e008      	b.n	8006292 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006280:	f7fc ff12 	bl	80030a8 <HAL_GetTick>
 8006284:	4602      	mov	r2, r0
 8006286:	693b      	ldr	r3, [r7, #16]
 8006288:	1ad3      	subs	r3, r2, r3
 800628a:	2b02      	cmp	r3, #2
 800628c:	d901      	bls.n	8006292 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800628e:	2303      	movs	r3, #3
 8006290:	e1b2      	b.n	80065f8 <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006292:	4b15      	ldr	r3, [pc, #84]	@ (80062e8 <HAL_RCC_OscConfig+0x508>)
 8006294:	681b      	ldr	r3, [r3, #0]
 8006296:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800629a:	2b00      	cmp	r3, #0
 800629c:	d0f0      	beq.n	8006280 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	689b      	ldr	r3, [r3, #8]
 80062a2:	2b01      	cmp	r3, #1
 80062a4:	d108      	bne.n	80062b8 <HAL_RCC_OscConfig+0x4d8>
 80062a6:	4b0f      	ldr	r3, [pc, #60]	@ (80062e4 <HAL_RCC_OscConfig+0x504>)
 80062a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80062ac:	4a0d      	ldr	r2, [pc, #52]	@ (80062e4 <HAL_RCC_OscConfig+0x504>)
 80062ae:	f043 0301 	orr.w	r3, r3, #1
 80062b2:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80062b6:	e029      	b.n	800630c <HAL_RCC_OscConfig+0x52c>
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	689b      	ldr	r3, [r3, #8]
 80062bc:	2b05      	cmp	r3, #5
 80062be:	d115      	bne.n	80062ec <HAL_RCC_OscConfig+0x50c>
 80062c0:	4b08      	ldr	r3, [pc, #32]	@ (80062e4 <HAL_RCC_OscConfig+0x504>)
 80062c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80062c6:	4a07      	ldr	r2, [pc, #28]	@ (80062e4 <HAL_RCC_OscConfig+0x504>)
 80062c8:	f043 0304 	orr.w	r3, r3, #4
 80062cc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80062d0:	4b04      	ldr	r3, [pc, #16]	@ (80062e4 <HAL_RCC_OscConfig+0x504>)
 80062d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80062d6:	4a03      	ldr	r2, [pc, #12]	@ (80062e4 <HAL_RCC_OscConfig+0x504>)
 80062d8:	f043 0301 	orr.w	r3, r3, #1
 80062dc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80062e0:	e014      	b.n	800630c <HAL_RCC_OscConfig+0x52c>
 80062e2:	bf00      	nop
 80062e4:	40021000 	.word	0x40021000
 80062e8:	40007000 	.word	0x40007000
 80062ec:	4b9a      	ldr	r3, [pc, #616]	@ (8006558 <HAL_RCC_OscConfig+0x778>)
 80062ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80062f2:	4a99      	ldr	r2, [pc, #612]	@ (8006558 <HAL_RCC_OscConfig+0x778>)
 80062f4:	f023 0301 	bic.w	r3, r3, #1
 80062f8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80062fc:	4b96      	ldr	r3, [pc, #600]	@ (8006558 <HAL_RCC_OscConfig+0x778>)
 80062fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006302:	4a95      	ldr	r2, [pc, #596]	@ (8006558 <HAL_RCC_OscConfig+0x778>)
 8006304:	f023 0304 	bic.w	r3, r3, #4
 8006308:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	689b      	ldr	r3, [r3, #8]
 8006310:	2b00      	cmp	r3, #0
 8006312:	d016      	beq.n	8006342 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006314:	f7fc fec8 	bl	80030a8 <HAL_GetTick>
 8006318:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800631a:	e00a      	b.n	8006332 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800631c:	f7fc fec4 	bl	80030a8 <HAL_GetTick>
 8006320:	4602      	mov	r2, r0
 8006322:	693b      	ldr	r3, [r7, #16]
 8006324:	1ad3      	subs	r3, r2, r3
 8006326:	f241 3288 	movw	r2, #5000	@ 0x1388
 800632a:	4293      	cmp	r3, r2
 800632c:	d901      	bls.n	8006332 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 800632e:	2303      	movs	r3, #3
 8006330:	e162      	b.n	80065f8 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006332:	4b89      	ldr	r3, [pc, #548]	@ (8006558 <HAL_RCC_OscConfig+0x778>)
 8006334:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006338:	f003 0302 	and.w	r3, r3, #2
 800633c:	2b00      	cmp	r3, #0
 800633e:	d0ed      	beq.n	800631c <HAL_RCC_OscConfig+0x53c>
 8006340:	e015      	b.n	800636e <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006342:	f7fc feb1 	bl	80030a8 <HAL_GetTick>
 8006346:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8006348:	e00a      	b.n	8006360 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800634a:	f7fc fead 	bl	80030a8 <HAL_GetTick>
 800634e:	4602      	mov	r2, r0
 8006350:	693b      	ldr	r3, [r7, #16]
 8006352:	1ad3      	subs	r3, r2, r3
 8006354:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006358:	4293      	cmp	r3, r2
 800635a:	d901      	bls.n	8006360 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 800635c:	2303      	movs	r3, #3
 800635e:	e14b      	b.n	80065f8 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8006360:	4b7d      	ldr	r3, [pc, #500]	@ (8006558 <HAL_RCC_OscConfig+0x778>)
 8006362:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006366:	f003 0302 	and.w	r3, r3, #2
 800636a:	2b00      	cmp	r3, #0
 800636c:	d1ed      	bne.n	800634a <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800636e:	7ffb      	ldrb	r3, [r7, #31]
 8006370:	2b01      	cmp	r3, #1
 8006372:	d105      	bne.n	8006380 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006374:	4b78      	ldr	r3, [pc, #480]	@ (8006558 <HAL_RCC_OscConfig+0x778>)
 8006376:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006378:	4a77      	ldr	r2, [pc, #476]	@ (8006558 <HAL_RCC_OscConfig+0x778>)
 800637a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800637e:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	f003 0320 	and.w	r3, r3, #32
 8006388:	2b00      	cmp	r3, #0
 800638a:	d03c      	beq.n	8006406 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006390:	2b00      	cmp	r3, #0
 8006392:	d01c      	beq.n	80063ce <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8006394:	4b70      	ldr	r3, [pc, #448]	@ (8006558 <HAL_RCC_OscConfig+0x778>)
 8006396:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800639a:	4a6f      	ldr	r2, [pc, #444]	@ (8006558 <HAL_RCC_OscConfig+0x778>)
 800639c:	f043 0301 	orr.w	r3, r3, #1
 80063a0:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80063a4:	f7fc fe80 	bl	80030a8 <HAL_GetTick>
 80063a8:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80063aa:	e008      	b.n	80063be <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80063ac:	f7fc fe7c 	bl	80030a8 <HAL_GetTick>
 80063b0:	4602      	mov	r2, r0
 80063b2:	693b      	ldr	r3, [r7, #16]
 80063b4:	1ad3      	subs	r3, r2, r3
 80063b6:	2b02      	cmp	r3, #2
 80063b8:	d901      	bls.n	80063be <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 80063ba:	2303      	movs	r3, #3
 80063bc:	e11c      	b.n	80065f8 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80063be:	4b66      	ldr	r3, [pc, #408]	@ (8006558 <HAL_RCC_OscConfig+0x778>)
 80063c0:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80063c4:	f003 0302 	and.w	r3, r3, #2
 80063c8:	2b00      	cmp	r3, #0
 80063ca:	d0ef      	beq.n	80063ac <HAL_RCC_OscConfig+0x5cc>
 80063cc:	e01b      	b.n	8006406 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80063ce:	4b62      	ldr	r3, [pc, #392]	@ (8006558 <HAL_RCC_OscConfig+0x778>)
 80063d0:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80063d4:	4a60      	ldr	r2, [pc, #384]	@ (8006558 <HAL_RCC_OscConfig+0x778>)
 80063d6:	f023 0301 	bic.w	r3, r3, #1
 80063da:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80063de:	f7fc fe63 	bl	80030a8 <HAL_GetTick>
 80063e2:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80063e4:	e008      	b.n	80063f8 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80063e6:	f7fc fe5f 	bl	80030a8 <HAL_GetTick>
 80063ea:	4602      	mov	r2, r0
 80063ec:	693b      	ldr	r3, [r7, #16]
 80063ee:	1ad3      	subs	r3, r2, r3
 80063f0:	2b02      	cmp	r3, #2
 80063f2:	d901      	bls.n	80063f8 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 80063f4:	2303      	movs	r3, #3
 80063f6:	e0ff      	b.n	80065f8 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80063f8:	4b57      	ldr	r3, [pc, #348]	@ (8006558 <HAL_RCC_OscConfig+0x778>)
 80063fa:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80063fe:	f003 0302 	and.w	r3, r3, #2
 8006402:	2b00      	cmp	r3, #0
 8006404:	d1ef      	bne.n	80063e6 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800640a:	2b00      	cmp	r3, #0
 800640c:	f000 80f3 	beq.w	80065f6 <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006414:	2b02      	cmp	r3, #2
 8006416:	f040 80c9 	bne.w	80065ac <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 800641a:	4b4f      	ldr	r3, [pc, #316]	@ (8006558 <HAL_RCC_OscConfig+0x778>)
 800641c:	68db      	ldr	r3, [r3, #12]
 800641e:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8006420:	697b      	ldr	r3, [r7, #20]
 8006422:	f003 0203 	and.w	r2, r3, #3
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800642a:	429a      	cmp	r2, r3
 800642c:	d12c      	bne.n	8006488 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800642e:	697b      	ldr	r3, [r7, #20]
 8006430:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006438:	3b01      	subs	r3, #1
 800643a:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800643c:	429a      	cmp	r2, r3
 800643e:	d123      	bne.n	8006488 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8006440:	697b      	ldr	r3, [r7, #20]
 8006442:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800644a:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800644c:	429a      	cmp	r2, r3
 800644e:	d11b      	bne.n	8006488 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8006450:	697b      	ldr	r3, [r7, #20]
 8006452:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800645a:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800645c:	429a      	cmp	r2, r3
 800645e:	d113      	bne.n	8006488 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8006460:	697b      	ldr	r3, [r7, #20]
 8006462:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800646a:	085b      	lsrs	r3, r3, #1
 800646c:	3b01      	subs	r3, #1
 800646e:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8006470:	429a      	cmp	r2, r3
 8006472:	d109      	bne.n	8006488 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8006474:	697b      	ldr	r3, [r7, #20]
 8006476:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800647e:	085b      	lsrs	r3, r3, #1
 8006480:	3b01      	subs	r3, #1
 8006482:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8006484:	429a      	cmp	r2, r3
 8006486:	d06b      	beq.n	8006560 <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8006488:	69bb      	ldr	r3, [r7, #24]
 800648a:	2b0c      	cmp	r3, #12
 800648c:	d062      	beq.n	8006554 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800648e:	4b32      	ldr	r3, [pc, #200]	@ (8006558 <HAL_RCC_OscConfig+0x778>)
 8006490:	681b      	ldr	r3, [r3, #0]
 8006492:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8006496:	2b00      	cmp	r3, #0
 8006498:	d001      	beq.n	800649e <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 800649a:	2301      	movs	r3, #1
 800649c:	e0ac      	b.n	80065f8 <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800649e:	4b2e      	ldr	r3, [pc, #184]	@ (8006558 <HAL_RCC_OscConfig+0x778>)
 80064a0:	681b      	ldr	r3, [r3, #0]
 80064a2:	4a2d      	ldr	r2, [pc, #180]	@ (8006558 <HAL_RCC_OscConfig+0x778>)
 80064a4:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80064a8:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80064aa:	f7fc fdfd 	bl	80030a8 <HAL_GetTick>
 80064ae:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80064b0:	e008      	b.n	80064c4 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80064b2:	f7fc fdf9 	bl	80030a8 <HAL_GetTick>
 80064b6:	4602      	mov	r2, r0
 80064b8:	693b      	ldr	r3, [r7, #16]
 80064ba:	1ad3      	subs	r3, r2, r3
 80064bc:	2b02      	cmp	r3, #2
 80064be:	d901      	bls.n	80064c4 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 80064c0:	2303      	movs	r3, #3
 80064c2:	e099      	b.n	80065f8 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80064c4:	4b24      	ldr	r3, [pc, #144]	@ (8006558 <HAL_RCC_OscConfig+0x778>)
 80064c6:	681b      	ldr	r3, [r3, #0]
 80064c8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80064cc:	2b00      	cmp	r3, #0
 80064ce:	d1f0      	bne.n	80064b2 <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80064d0:	4b21      	ldr	r3, [pc, #132]	@ (8006558 <HAL_RCC_OscConfig+0x778>)
 80064d2:	68da      	ldr	r2, [r3, #12]
 80064d4:	4b21      	ldr	r3, [pc, #132]	@ (800655c <HAL_RCC_OscConfig+0x77c>)
 80064d6:	4013      	ands	r3, r2
 80064d8:	687a      	ldr	r2, [r7, #4]
 80064da:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 80064dc:	687a      	ldr	r2, [r7, #4]
 80064de:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80064e0:	3a01      	subs	r2, #1
 80064e2:	0112      	lsls	r2, r2, #4
 80064e4:	4311      	orrs	r1, r2
 80064e6:	687a      	ldr	r2, [r7, #4]
 80064e8:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80064ea:	0212      	lsls	r2, r2, #8
 80064ec:	4311      	orrs	r1, r2
 80064ee:	687a      	ldr	r2, [r7, #4]
 80064f0:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80064f2:	0852      	lsrs	r2, r2, #1
 80064f4:	3a01      	subs	r2, #1
 80064f6:	0552      	lsls	r2, r2, #21
 80064f8:	4311      	orrs	r1, r2
 80064fa:	687a      	ldr	r2, [r7, #4]
 80064fc:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 80064fe:	0852      	lsrs	r2, r2, #1
 8006500:	3a01      	subs	r2, #1
 8006502:	0652      	lsls	r2, r2, #25
 8006504:	4311      	orrs	r1, r2
 8006506:	687a      	ldr	r2, [r7, #4]
 8006508:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 800650a:	06d2      	lsls	r2, r2, #27
 800650c:	430a      	orrs	r2, r1
 800650e:	4912      	ldr	r1, [pc, #72]	@ (8006558 <HAL_RCC_OscConfig+0x778>)
 8006510:	4313      	orrs	r3, r2
 8006512:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8006514:	4b10      	ldr	r3, [pc, #64]	@ (8006558 <HAL_RCC_OscConfig+0x778>)
 8006516:	681b      	ldr	r3, [r3, #0]
 8006518:	4a0f      	ldr	r2, [pc, #60]	@ (8006558 <HAL_RCC_OscConfig+0x778>)
 800651a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800651e:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8006520:	4b0d      	ldr	r3, [pc, #52]	@ (8006558 <HAL_RCC_OscConfig+0x778>)
 8006522:	68db      	ldr	r3, [r3, #12]
 8006524:	4a0c      	ldr	r2, [pc, #48]	@ (8006558 <HAL_RCC_OscConfig+0x778>)
 8006526:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800652a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800652c:	f7fc fdbc 	bl	80030a8 <HAL_GetTick>
 8006530:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006532:	e008      	b.n	8006546 <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006534:	f7fc fdb8 	bl	80030a8 <HAL_GetTick>
 8006538:	4602      	mov	r2, r0
 800653a:	693b      	ldr	r3, [r7, #16]
 800653c:	1ad3      	subs	r3, r2, r3
 800653e:	2b02      	cmp	r3, #2
 8006540:	d901      	bls.n	8006546 <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 8006542:	2303      	movs	r3, #3
 8006544:	e058      	b.n	80065f8 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006546:	4b04      	ldr	r3, [pc, #16]	@ (8006558 <HAL_RCC_OscConfig+0x778>)
 8006548:	681b      	ldr	r3, [r3, #0]
 800654a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800654e:	2b00      	cmp	r3, #0
 8006550:	d0f0      	beq.n	8006534 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8006552:	e050      	b.n	80065f6 <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8006554:	2301      	movs	r3, #1
 8006556:	e04f      	b.n	80065f8 <HAL_RCC_OscConfig+0x818>
 8006558:	40021000 	.word	0x40021000
 800655c:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006560:	4b27      	ldr	r3, [pc, #156]	@ (8006600 <HAL_RCC_OscConfig+0x820>)
 8006562:	681b      	ldr	r3, [r3, #0]
 8006564:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006568:	2b00      	cmp	r3, #0
 800656a:	d144      	bne.n	80065f6 <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 800656c:	4b24      	ldr	r3, [pc, #144]	@ (8006600 <HAL_RCC_OscConfig+0x820>)
 800656e:	681b      	ldr	r3, [r3, #0]
 8006570:	4a23      	ldr	r2, [pc, #140]	@ (8006600 <HAL_RCC_OscConfig+0x820>)
 8006572:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8006576:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8006578:	4b21      	ldr	r3, [pc, #132]	@ (8006600 <HAL_RCC_OscConfig+0x820>)
 800657a:	68db      	ldr	r3, [r3, #12]
 800657c:	4a20      	ldr	r2, [pc, #128]	@ (8006600 <HAL_RCC_OscConfig+0x820>)
 800657e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8006582:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8006584:	f7fc fd90 	bl	80030a8 <HAL_GetTick>
 8006588:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800658a:	e008      	b.n	800659e <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800658c:	f7fc fd8c 	bl	80030a8 <HAL_GetTick>
 8006590:	4602      	mov	r2, r0
 8006592:	693b      	ldr	r3, [r7, #16]
 8006594:	1ad3      	subs	r3, r2, r3
 8006596:	2b02      	cmp	r3, #2
 8006598:	d901      	bls.n	800659e <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 800659a:	2303      	movs	r3, #3
 800659c:	e02c      	b.n	80065f8 <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800659e:	4b18      	ldr	r3, [pc, #96]	@ (8006600 <HAL_RCC_OscConfig+0x820>)
 80065a0:	681b      	ldr	r3, [r3, #0]
 80065a2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80065a6:	2b00      	cmp	r3, #0
 80065a8:	d0f0      	beq.n	800658c <HAL_RCC_OscConfig+0x7ac>
 80065aa:	e024      	b.n	80065f6 <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80065ac:	69bb      	ldr	r3, [r7, #24]
 80065ae:	2b0c      	cmp	r3, #12
 80065b0:	d01f      	beq.n	80065f2 <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80065b2:	4b13      	ldr	r3, [pc, #76]	@ (8006600 <HAL_RCC_OscConfig+0x820>)
 80065b4:	681b      	ldr	r3, [r3, #0]
 80065b6:	4a12      	ldr	r2, [pc, #72]	@ (8006600 <HAL_RCC_OscConfig+0x820>)
 80065b8:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80065bc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80065be:	f7fc fd73 	bl	80030a8 <HAL_GetTick>
 80065c2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80065c4:	e008      	b.n	80065d8 <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80065c6:	f7fc fd6f 	bl	80030a8 <HAL_GetTick>
 80065ca:	4602      	mov	r2, r0
 80065cc:	693b      	ldr	r3, [r7, #16]
 80065ce:	1ad3      	subs	r3, r2, r3
 80065d0:	2b02      	cmp	r3, #2
 80065d2:	d901      	bls.n	80065d8 <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 80065d4:	2303      	movs	r3, #3
 80065d6:	e00f      	b.n	80065f8 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80065d8:	4b09      	ldr	r3, [pc, #36]	@ (8006600 <HAL_RCC_OscConfig+0x820>)
 80065da:	681b      	ldr	r3, [r3, #0]
 80065dc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80065e0:	2b00      	cmp	r3, #0
 80065e2:	d1f0      	bne.n	80065c6 <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 80065e4:	4b06      	ldr	r3, [pc, #24]	@ (8006600 <HAL_RCC_OscConfig+0x820>)
 80065e6:	68da      	ldr	r2, [r3, #12]
 80065e8:	4905      	ldr	r1, [pc, #20]	@ (8006600 <HAL_RCC_OscConfig+0x820>)
 80065ea:	4b06      	ldr	r3, [pc, #24]	@ (8006604 <HAL_RCC_OscConfig+0x824>)
 80065ec:	4013      	ands	r3, r2
 80065ee:	60cb      	str	r3, [r1, #12]
 80065f0:	e001      	b.n	80065f6 <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80065f2:	2301      	movs	r3, #1
 80065f4:	e000      	b.n	80065f8 <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 80065f6:	2300      	movs	r3, #0
}
 80065f8:	4618      	mov	r0, r3
 80065fa:	3720      	adds	r7, #32
 80065fc:	46bd      	mov	sp, r7
 80065fe:	bd80      	pop	{r7, pc}
 8006600:	40021000 	.word	0x40021000
 8006604:	feeefffc 	.word	0xfeeefffc

08006608 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006608:	b580      	push	{r7, lr}
 800660a:	b084      	sub	sp, #16
 800660c:	af00      	add	r7, sp, #0
 800660e:	6078      	str	r0, [r7, #4]
 8006610:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	2b00      	cmp	r3, #0
 8006616:	d101      	bne.n	800661c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006618:	2301      	movs	r3, #1
 800661a:	e0e7      	b.n	80067ec <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800661c:	4b75      	ldr	r3, [pc, #468]	@ (80067f4 <HAL_RCC_ClockConfig+0x1ec>)
 800661e:	681b      	ldr	r3, [r3, #0]
 8006620:	f003 0307 	and.w	r3, r3, #7
 8006624:	683a      	ldr	r2, [r7, #0]
 8006626:	429a      	cmp	r2, r3
 8006628:	d910      	bls.n	800664c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800662a:	4b72      	ldr	r3, [pc, #456]	@ (80067f4 <HAL_RCC_ClockConfig+0x1ec>)
 800662c:	681b      	ldr	r3, [r3, #0]
 800662e:	f023 0207 	bic.w	r2, r3, #7
 8006632:	4970      	ldr	r1, [pc, #448]	@ (80067f4 <HAL_RCC_ClockConfig+0x1ec>)
 8006634:	683b      	ldr	r3, [r7, #0]
 8006636:	4313      	orrs	r3, r2
 8006638:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800663a:	4b6e      	ldr	r3, [pc, #440]	@ (80067f4 <HAL_RCC_ClockConfig+0x1ec>)
 800663c:	681b      	ldr	r3, [r3, #0]
 800663e:	f003 0307 	and.w	r3, r3, #7
 8006642:	683a      	ldr	r2, [r7, #0]
 8006644:	429a      	cmp	r2, r3
 8006646:	d001      	beq.n	800664c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8006648:	2301      	movs	r3, #1
 800664a:	e0cf      	b.n	80067ec <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	681b      	ldr	r3, [r3, #0]
 8006650:	f003 0302 	and.w	r3, r3, #2
 8006654:	2b00      	cmp	r3, #0
 8006656:	d010      	beq.n	800667a <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	689a      	ldr	r2, [r3, #8]
 800665c:	4b66      	ldr	r3, [pc, #408]	@ (80067f8 <HAL_RCC_ClockConfig+0x1f0>)
 800665e:	689b      	ldr	r3, [r3, #8]
 8006660:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8006664:	429a      	cmp	r2, r3
 8006666:	d908      	bls.n	800667a <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006668:	4b63      	ldr	r3, [pc, #396]	@ (80067f8 <HAL_RCC_ClockConfig+0x1f0>)
 800666a:	689b      	ldr	r3, [r3, #8]
 800666c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	689b      	ldr	r3, [r3, #8]
 8006674:	4960      	ldr	r1, [pc, #384]	@ (80067f8 <HAL_RCC_ClockConfig+0x1f0>)
 8006676:	4313      	orrs	r3, r2
 8006678:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	681b      	ldr	r3, [r3, #0]
 800667e:	f003 0301 	and.w	r3, r3, #1
 8006682:	2b00      	cmp	r3, #0
 8006684:	d04c      	beq.n	8006720 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	685b      	ldr	r3, [r3, #4]
 800668a:	2b03      	cmp	r3, #3
 800668c:	d107      	bne.n	800669e <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800668e:	4b5a      	ldr	r3, [pc, #360]	@ (80067f8 <HAL_RCC_ClockConfig+0x1f0>)
 8006690:	681b      	ldr	r3, [r3, #0]
 8006692:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006696:	2b00      	cmp	r3, #0
 8006698:	d121      	bne.n	80066de <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 800669a:	2301      	movs	r3, #1
 800669c:	e0a6      	b.n	80067ec <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	685b      	ldr	r3, [r3, #4]
 80066a2:	2b02      	cmp	r3, #2
 80066a4:	d107      	bne.n	80066b6 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80066a6:	4b54      	ldr	r3, [pc, #336]	@ (80067f8 <HAL_RCC_ClockConfig+0x1f0>)
 80066a8:	681b      	ldr	r3, [r3, #0]
 80066aa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80066ae:	2b00      	cmp	r3, #0
 80066b0:	d115      	bne.n	80066de <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80066b2:	2301      	movs	r3, #1
 80066b4:	e09a      	b.n	80067ec <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	685b      	ldr	r3, [r3, #4]
 80066ba:	2b00      	cmp	r3, #0
 80066bc:	d107      	bne.n	80066ce <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80066be:	4b4e      	ldr	r3, [pc, #312]	@ (80067f8 <HAL_RCC_ClockConfig+0x1f0>)
 80066c0:	681b      	ldr	r3, [r3, #0]
 80066c2:	f003 0302 	and.w	r3, r3, #2
 80066c6:	2b00      	cmp	r3, #0
 80066c8:	d109      	bne.n	80066de <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80066ca:	2301      	movs	r3, #1
 80066cc:	e08e      	b.n	80067ec <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80066ce:	4b4a      	ldr	r3, [pc, #296]	@ (80067f8 <HAL_RCC_ClockConfig+0x1f0>)
 80066d0:	681b      	ldr	r3, [r3, #0]
 80066d2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80066d6:	2b00      	cmp	r3, #0
 80066d8:	d101      	bne.n	80066de <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80066da:	2301      	movs	r3, #1
 80066dc:	e086      	b.n	80067ec <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80066de:	4b46      	ldr	r3, [pc, #280]	@ (80067f8 <HAL_RCC_ClockConfig+0x1f0>)
 80066e0:	689b      	ldr	r3, [r3, #8]
 80066e2:	f023 0203 	bic.w	r2, r3, #3
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	685b      	ldr	r3, [r3, #4]
 80066ea:	4943      	ldr	r1, [pc, #268]	@ (80067f8 <HAL_RCC_ClockConfig+0x1f0>)
 80066ec:	4313      	orrs	r3, r2
 80066ee:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80066f0:	f7fc fcda 	bl	80030a8 <HAL_GetTick>
 80066f4:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80066f6:	e00a      	b.n	800670e <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80066f8:	f7fc fcd6 	bl	80030a8 <HAL_GetTick>
 80066fc:	4602      	mov	r2, r0
 80066fe:	68fb      	ldr	r3, [r7, #12]
 8006700:	1ad3      	subs	r3, r2, r3
 8006702:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006706:	4293      	cmp	r3, r2
 8006708:	d901      	bls.n	800670e <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 800670a:	2303      	movs	r3, #3
 800670c:	e06e      	b.n	80067ec <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800670e:	4b3a      	ldr	r3, [pc, #232]	@ (80067f8 <HAL_RCC_ClockConfig+0x1f0>)
 8006710:	689b      	ldr	r3, [r3, #8]
 8006712:	f003 020c 	and.w	r2, r3, #12
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	685b      	ldr	r3, [r3, #4]
 800671a:	009b      	lsls	r3, r3, #2
 800671c:	429a      	cmp	r2, r3
 800671e:	d1eb      	bne.n	80066f8 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	681b      	ldr	r3, [r3, #0]
 8006724:	f003 0302 	and.w	r3, r3, #2
 8006728:	2b00      	cmp	r3, #0
 800672a:	d010      	beq.n	800674e <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	689a      	ldr	r2, [r3, #8]
 8006730:	4b31      	ldr	r3, [pc, #196]	@ (80067f8 <HAL_RCC_ClockConfig+0x1f0>)
 8006732:	689b      	ldr	r3, [r3, #8]
 8006734:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8006738:	429a      	cmp	r2, r3
 800673a:	d208      	bcs.n	800674e <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800673c:	4b2e      	ldr	r3, [pc, #184]	@ (80067f8 <HAL_RCC_ClockConfig+0x1f0>)
 800673e:	689b      	ldr	r3, [r3, #8]
 8006740:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	689b      	ldr	r3, [r3, #8]
 8006748:	492b      	ldr	r1, [pc, #172]	@ (80067f8 <HAL_RCC_ClockConfig+0x1f0>)
 800674a:	4313      	orrs	r3, r2
 800674c:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800674e:	4b29      	ldr	r3, [pc, #164]	@ (80067f4 <HAL_RCC_ClockConfig+0x1ec>)
 8006750:	681b      	ldr	r3, [r3, #0]
 8006752:	f003 0307 	and.w	r3, r3, #7
 8006756:	683a      	ldr	r2, [r7, #0]
 8006758:	429a      	cmp	r2, r3
 800675a:	d210      	bcs.n	800677e <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800675c:	4b25      	ldr	r3, [pc, #148]	@ (80067f4 <HAL_RCC_ClockConfig+0x1ec>)
 800675e:	681b      	ldr	r3, [r3, #0]
 8006760:	f023 0207 	bic.w	r2, r3, #7
 8006764:	4923      	ldr	r1, [pc, #140]	@ (80067f4 <HAL_RCC_ClockConfig+0x1ec>)
 8006766:	683b      	ldr	r3, [r7, #0]
 8006768:	4313      	orrs	r3, r2
 800676a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800676c:	4b21      	ldr	r3, [pc, #132]	@ (80067f4 <HAL_RCC_ClockConfig+0x1ec>)
 800676e:	681b      	ldr	r3, [r3, #0]
 8006770:	f003 0307 	and.w	r3, r3, #7
 8006774:	683a      	ldr	r2, [r7, #0]
 8006776:	429a      	cmp	r2, r3
 8006778:	d001      	beq.n	800677e <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 800677a:	2301      	movs	r3, #1
 800677c:	e036      	b.n	80067ec <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	681b      	ldr	r3, [r3, #0]
 8006782:	f003 0304 	and.w	r3, r3, #4
 8006786:	2b00      	cmp	r3, #0
 8006788:	d008      	beq.n	800679c <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800678a:	4b1b      	ldr	r3, [pc, #108]	@ (80067f8 <HAL_RCC_ClockConfig+0x1f0>)
 800678c:	689b      	ldr	r3, [r3, #8]
 800678e:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	68db      	ldr	r3, [r3, #12]
 8006796:	4918      	ldr	r1, [pc, #96]	@ (80067f8 <HAL_RCC_ClockConfig+0x1f0>)
 8006798:	4313      	orrs	r3, r2
 800679a:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	681b      	ldr	r3, [r3, #0]
 80067a0:	f003 0308 	and.w	r3, r3, #8
 80067a4:	2b00      	cmp	r3, #0
 80067a6:	d009      	beq.n	80067bc <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80067a8:	4b13      	ldr	r3, [pc, #76]	@ (80067f8 <HAL_RCC_ClockConfig+0x1f0>)
 80067aa:	689b      	ldr	r3, [r3, #8]
 80067ac:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	691b      	ldr	r3, [r3, #16]
 80067b4:	00db      	lsls	r3, r3, #3
 80067b6:	4910      	ldr	r1, [pc, #64]	@ (80067f8 <HAL_RCC_ClockConfig+0x1f0>)
 80067b8:	4313      	orrs	r3, r2
 80067ba:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80067bc:	f000 f824 	bl	8006808 <HAL_RCC_GetSysClockFreq>
 80067c0:	4602      	mov	r2, r0
 80067c2:	4b0d      	ldr	r3, [pc, #52]	@ (80067f8 <HAL_RCC_ClockConfig+0x1f0>)
 80067c4:	689b      	ldr	r3, [r3, #8]
 80067c6:	091b      	lsrs	r3, r3, #4
 80067c8:	f003 030f 	and.w	r3, r3, #15
 80067cc:	490b      	ldr	r1, [pc, #44]	@ (80067fc <HAL_RCC_ClockConfig+0x1f4>)
 80067ce:	5ccb      	ldrb	r3, [r1, r3]
 80067d0:	f003 031f 	and.w	r3, r3, #31
 80067d4:	fa22 f303 	lsr.w	r3, r2, r3
 80067d8:	4a09      	ldr	r2, [pc, #36]	@ (8006800 <HAL_RCC_ClockConfig+0x1f8>)
 80067da:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80067dc:	4b09      	ldr	r3, [pc, #36]	@ (8006804 <HAL_RCC_ClockConfig+0x1fc>)
 80067de:	681b      	ldr	r3, [r3, #0]
 80067e0:	4618      	mov	r0, r3
 80067e2:	f7fb ff35 	bl	8002650 <HAL_InitTick>
 80067e6:	4603      	mov	r3, r0
 80067e8:	72fb      	strb	r3, [r7, #11]

  return status;
 80067ea:	7afb      	ldrb	r3, [r7, #11]
}
 80067ec:	4618      	mov	r0, r3
 80067ee:	3710      	adds	r7, #16
 80067f0:	46bd      	mov	sp, r7
 80067f2:	bd80      	pop	{r7, pc}
 80067f4:	40022000 	.word	0x40022000
 80067f8:	40021000 	.word	0x40021000
 80067fc:	0801bbd4 	.word	0x0801bbd4
 8006800:	20000040 	.word	0x20000040
 8006804:	20000044 	.word	0x20000044

08006808 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006808:	b480      	push	{r7}
 800680a:	b089      	sub	sp, #36	@ 0x24
 800680c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800680e:	2300      	movs	r3, #0
 8006810:	61fb      	str	r3, [r7, #28]
 8006812:	2300      	movs	r3, #0
 8006814:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006816:	4b3e      	ldr	r3, [pc, #248]	@ (8006910 <HAL_RCC_GetSysClockFreq+0x108>)
 8006818:	689b      	ldr	r3, [r3, #8]
 800681a:	f003 030c 	and.w	r3, r3, #12
 800681e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8006820:	4b3b      	ldr	r3, [pc, #236]	@ (8006910 <HAL_RCC_GetSysClockFreq+0x108>)
 8006822:	68db      	ldr	r3, [r3, #12]
 8006824:	f003 0303 	and.w	r3, r3, #3
 8006828:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800682a:	693b      	ldr	r3, [r7, #16]
 800682c:	2b00      	cmp	r3, #0
 800682e:	d005      	beq.n	800683c <HAL_RCC_GetSysClockFreq+0x34>
 8006830:	693b      	ldr	r3, [r7, #16]
 8006832:	2b0c      	cmp	r3, #12
 8006834:	d121      	bne.n	800687a <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8006836:	68fb      	ldr	r3, [r7, #12]
 8006838:	2b01      	cmp	r3, #1
 800683a:	d11e      	bne.n	800687a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 800683c:	4b34      	ldr	r3, [pc, #208]	@ (8006910 <HAL_RCC_GetSysClockFreq+0x108>)
 800683e:	681b      	ldr	r3, [r3, #0]
 8006840:	f003 0308 	and.w	r3, r3, #8
 8006844:	2b00      	cmp	r3, #0
 8006846:	d107      	bne.n	8006858 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8006848:	4b31      	ldr	r3, [pc, #196]	@ (8006910 <HAL_RCC_GetSysClockFreq+0x108>)
 800684a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800684e:	0a1b      	lsrs	r3, r3, #8
 8006850:	f003 030f 	and.w	r3, r3, #15
 8006854:	61fb      	str	r3, [r7, #28]
 8006856:	e005      	b.n	8006864 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8006858:	4b2d      	ldr	r3, [pc, #180]	@ (8006910 <HAL_RCC_GetSysClockFreq+0x108>)
 800685a:	681b      	ldr	r3, [r3, #0]
 800685c:	091b      	lsrs	r3, r3, #4
 800685e:	f003 030f 	and.w	r3, r3, #15
 8006862:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8006864:	4a2b      	ldr	r2, [pc, #172]	@ (8006914 <HAL_RCC_GetSysClockFreq+0x10c>)
 8006866:	69fb      	ldr	r3, [r7, #28]
 8006868:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800686c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800686e:	693b      	ldr	r3, [r7, #16]
 8006870:	2b00      	cmp	r3, #0
 8006872:	d10d      	bne.n	8006890 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8006874:	69fb      	ldr	r3, [r7, #28]
 8006876:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8006878:	e00a      	b.n	8006890 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800687a:	693b      	ldr	r3, [r7, #16]
 800687c:	2b04      	cmp	r3, #4
 800687e:	d102      	bne.n	8006886 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8006880:	4b25      	ldr	r3, [pc, #148]	@ (8006918 <HAL_RCC_GetSysClockFreq+0x110>)
 8006882:	61bb      	str	r3, [r7, #24]
 8006884:	e004      	b.n	8006890 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8006886:	693b      	ldr	r3, [r7, #16]
 8006888:	2b08      	cmp	r3, #8
 800688a:	d101      	bne.n	8006890 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800688c:	4b23      	ldr	r3, [pc, #140]	@ (800691c <HAL_RCC_GetSysClockFreq+0x114>)
 800688e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8006890:	693b      	ldr	r3, [r7, #16]
 8006892:	2b0c      	cmp	r3, #12
 8006894:	d134      	bne.n	8006900 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8006896:	4b1e      	ldr	r3, [pc, #120]	@ (8006910 <HAL_RCC_GetSysClockFreq+0x108>)
 8006898:	68db      	ldr	r3, [r3, #12]
 800689a:	f003 0303 	and.w	r3, r3, #3
 800689e:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80068a0:	68bb      	ldr	r3, [r7, #8]
 80068a2:	2b02      	cmp	r3, #2
 80068a4:	d003      	beq.n	80068ae <HAL_RCC_GetSysClockFreq+0xa6>
 80068a6:	68bb      	ldr	r3, [r7, #8]
 80068a8:	2b03      	cmp	r3, #3
 80068aa:	d003      	beq.n	80068b4 <HAL_RCC_GetSysClockFreq+0xac>
 80068ac:	e005      	b.n	80068ba <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80068ae:	4b1a      	ldr	r3, [pc, #104]	@ (8006918 <HAL_RCC_GetSysClockFreq+0x110>)
 80068b0:	617b      	str	r3, [r7, #20]
      break;
 80068b2:	e005      	b.n	80068c0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80068b4:	4b19      	ldr	r3, [pc, #100]	@ (800691c <HAL_RCC_GetSysClockFreq+0x114>)
 80068b6:	617b      	str	r3, [r7, #20]
      break;
 80068b8:	e002      	b.n	80068c0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80068ba:	69fb      	ldr	r3, [r7, #28]
 80068bc:	617b      	str	r3, [r7, #20]
      break;
 80068be:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80068c0:	4b13      	ldr	r3, [pc, #76]	@ (8006910 <HAL_RCC_GetSysClockFreq+0x108>)
 80068c2:	68db      	ldr	r3, [r3, #12]
 80068c4:	091b      	lsrs	r3, r3, #4
 80068c6:	f003 0307 	and.w	r3, r3, #7
 80068ca:	3301      	adds	r3, #1
 80068cc:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80068ce:	4b10      	ldr	r3, [pc, #64]	@ (8006910 <HAL_RCC_GetSysClockFreq+0x108>)
 80068d0:	68db      	ldr	r3, [r3, #12]
 80068d2:	0a1b      	lsrs	r3, r3, #8
 80068d4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80068d8:	697a      	ldr	r2, [r7, #20]
 80068da:	fb03 f202 	mul.w	r2, r3, r2
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80068e4:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80068e6:	4b0a      	ldr	r3, [pc, #40]	@ (8006910 <HAL_RCC_GetSysClockFreq+0x108>)
 80068e8:	68db      	ldr	r3, [r3, #12]
 80068ea:	0e5b      	lsrs	r3, r3, #25
 80068ec:	f003 0303 	and.w	r3, r3, #3
 80068f0:	3301      	adds	r3, #1
 80068f2:	005b      	lsls	r3, r3, #1
 80068f4:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80068f6:	697a      	ldr	r2, [r7, #20]
 80068f8:	683b      	ldr	r3, [r7, #0]
 80068fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80068fe:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8006900:	69bb      	ldr	r3, [r7, #24]
}
 8006902:	4618      	mov	r0, r3
 8006904:	3724      	adds	r7, #36	@ 0x24
 8006906:	46bd      	mov	sp, r7
 8006908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800690c:	4770      	bx	lr
 800690e:	bf00      	nop
 8006910:	40021000 	.word	0x40021000
 8006914:	0801bbec 	.word	0x0801bbec
 8006918:	00f42400 	.word	0x00f42400
 800691c:	007a1200 	.word	0x007a1200

08006920 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006920:	b480      	push	{r7}
 8006922:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006924:	4b03      	ldr	r3, [pc, #12]	@ (8006934 <HAL_RCC_GetHCLKFreq+0x14>)
 8006926:	681b      	ldr	r3, [r3, #0]
}
 8006928:	4618      	mov	r0, r3
 800692a:	46bd      	mov	sp, r7
 800692c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006930:	4770      	bx	lr
 8006932:	bf00      	nop
 8006934:	20000040 	.word	0x20000040

08006938 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006938:	b580      	push	{r7, lr}
 800693a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 800693c:	f7ff fff0 	bl	8006920 <HAL_RCC_GetHCLKFreq>
 8006940:	4602      	mov	r2, r0
 8006942:	4b06      	ldr	r3, [pc, #24]	@ (800695c <HAL_RCC_GetPCLK1Freq+0x24>)
 8006944:	689b      	ldr	r3, [r3, #8]
 8006946:	0a1b      	lsrs	r3, r3, #8
 8006948:	f003 0307 	and.w	r3, r3, #7
 800694c:	4904      	ldr	r1, [pc, #16]	@ (8006960 <HAL_RCC_GetPCLK1Freq+0x28>)
 800694e:	5ccb      	ldrb	r3, [r1, r3]
 8006950:	f003 031f 	and.w	r3, r3, #31
 8006954:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006958:	4618      	mov	r0, r3
 800695a:	bd80      	pop	{r7, pc}
 800695c:	40021000 	.word	0x40021000
 8006960:	0801bbe4 	.word	0x0801bbe4

08006964 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006964:	b580      	push	{r7, lr}
 8006966:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8006968:	f7ff ffda 	bl	8006920 <HAL_RCC_GetHCLKFreq>
 800696c:	4602      	mov	r2, r0
 800696e:	4b06      	ldr	r3, [pc, #24]	@ (8006988 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006970:	689b      	ldr	r3, [r3, #8]
 8006972:	0adb      	lsrs	r3, r3, #11
 8006974:	f003 0307 	and.w	r3, r3, #7
 8006978:	4904      	ldr	r1, [pc, #16]	@ (800698c <HAL_RCC_GetPCLK2Freq+0x28>)
 800697a:	5ccb      	ldrb	r3, [r1, r3]
 800697c:	f003 031f 	and.w	r3, r3, #31
 8006980:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006984:	4618      	mov	r0, r3
 8006986:	bd80      	pop	{r7, pc}
 8006988:	40021000 	.word	0x40021000
 800698c:	0801bbe4 	.word	0x0801bbe4

08006990 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8006990:	b480      	push	{r7}
 8006992:	b083      	sub	sp, #12
 8006994:	af00      	add	r7, sp, #0
 8006996:	6078      	str	r0, [r7, #4]
 8006998:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	220f      	movs	r2, #15
 800699e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 80069a0:	4b12      	ldr	r3, [pc, #72]	@ (80069ec <HAL_RCC_GetClockConfig+0x5c>)
 80069a2:	689b      	ldr	r3, [r3, #8]
 80069a4:	f003 0203 	and.w	r2, r3, #3
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 80069ac:	4b0f      	ldr	r3, [pc, #60]	@ (80069ec <HAL_RCC_GetClockConfig+0x5c>)
 80069ae:	689b      	ldr	r3, [r3, #8]
 80069b0:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 80069b8:	4b0c      	ldr	r3, [pc, #48]	@ (80069ec <HAL_RCC_GetClockConfig+0x5c>)
 80069ba:	689b      	ldr	r3, [r3, #8]
 80069bc:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 80069c4:	4b09      	ldr	r3, [pc, #36]	@ (80069ec <HAL_RCC_GetClockConfig+0x5c>)
 80069c6:	689b      	ldr	r3, [r3, #8]
 80069c8:	08db      	lsrs	r3, r3, #3
 80069ca:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 80069d2:	4b07      	ldr	r3, [pc, #28]	@ (80069f0 <HAL_RCC_GetClockConfig+0x60>)
 80069d4:	681b      	ldr	r3, [r3, #0]
 80069d6:	f003 0207 	and.w	r2, r3, #7
 80069da:	683b      	ldr	r3, [r7, #0]
 80069dc:	601a      	str	r2, [r3, #0]
}
 80069de:	bf00      	nop
 80069e0:	370c      	adds	r7, #12
 80069e2:	46bd      	mov	sp, r7
 80069e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069e8:	4770      	bx	lr
 80069ea:	bf00      	nop
 80069ec:	40021000 	.word	0x40021000
 80069f0:	40022000 	.word	0x40022000

080069f4 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80069f4:	b580      	push	{r7, lr}
 80069f6:	b086      	sub	sp, #24
 80069f8:	af00      	add	r7, sp, #0
 80069fa:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80069fc:	2300      	movs	r3, #0
 80069fe:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8006a00:	4b2a      	ldr	r3, [pc, #168]	@ (8006aac <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8006a02:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006a04:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006a08:	2b00      	cmp	r3, #0
 8006a0a:	d003      	beq.n	8006a14 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8006a0c:	f7ff f984 	bl	8005d18 <HAL_PWREx_GetVoltageRange>
 8006a10:	6178      	str	r0, [r7, #20]
 8006a12:	e014      	b.n	8006a3e <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8006a14:	4b25      	ldr	r3, [pc, #148]	@ (8006aac <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8006a16:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006a18:	4a24      	ldr	r2, [pc, #144]	@ (8006aac <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8006a1a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006a1e:	6593      	str	r3, [r2, #88]	@ 0x58
 8006a20:	4b22      	ldr	r3, [pc, #136]	@ (8006aac <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8006a22:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006a24:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006a28:	60fb      	str	r3, [r7, #12]
 8006a2a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8006a2c:	f7ff f974 	bl	8005d18 <HAL_PWREx_GetVoltageRange>
 8006a30:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8006a32:	4b1e      	ldr	r3, [pc, #120]	@ (8006aac <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8006a34:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006a36:	4a1d      	ldr	r2, [pc, #116]	@ (8006aac <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8006a38:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006a3c:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8006a3e:	697b      	ldr	r3, [r7, #20]
 8006a40:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006a44:	d10b      	bne.n	8006a5e <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	2b80      	cmp	r3, #128	@ 0x80
 8006a4a:	d919      	bls.n	8006a80 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	2ba0      	cmp	r3, #160	@ 0xa0
 8006a50:	d902      	bls.n	8006a58 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8006a52:	2302      	movs	r3, #2
 8006a54:	613b      	str	r3, [r7, #16]
 8006a56:	e013      	b.n	8006a80 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8006a58:	2301      	movs	r3, #1
 8006a5a:	613b      	str	r3, [r7, #16]
 8006a5c:	e010      	b.n	8006a80 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	2b80      	cmp	r3, #128	@ 0x80
 8006a62:	d902      	bls.n	8006a6a <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8006a64:	2303      	movs	r3, #3
 8006a66:	613b      	str	r3, [r7, #16]
 8006a68:	e00a      	b.n	8006a80 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	2b80      	cmp	r3, #128	@ 0x80
 8006a6e:	d102      	bne.n	8006a76 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8006a70:	2302      	movs	r3, #2
 8006a72:	613b      	str	r3, [r7, #16]
 8006a74:	e004      	b.n	8006a80 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	2b70      	cmp	r3, #112	@ 0x70
 8006a7a:	d101      	bne.n	8006a80 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8006a7c:	2301      	movs	r3, #1
 8006a7e:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8006a80:	4b0b      	ldr	r3, [pc, #44]	@ (8006ab0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8006a82:	681b      	ldr	r3, [r3, #0]
 8006a84:	f023 0207 	bic.w	r2, r3, #7
 8006a88:	4909      	ldr	r1, [pc, #36]	@ (8006ab0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8006a8a:	693b      	ldr	r3, [r7, #16]
 8006a8c:	4313      	orrs	r3, r2
 8006a8e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8006a90:	4b07      	ldr	r3, [pc, #28]	@ (8006ab0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8006a92:	681b      	ldr	r3, [r3, #0]
 8006a94:	f003 0307 	and.w	r3, r3, #7
 8006a98:	693a      	ldr	r2, [r7, #16]
 8006a9a:	429a      	cmp	r2, r3
 8006a9c:	d001      	beq.n	8006aa2 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8006a9e:	2301      	movs	r3, #1
 8006aa0:	e000      	b.n	8006aa4 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8006aa2:	2300      	movs	r3, #0
}
 8006aa4:	4618      	mov	r0, r3
 8006aa6:	3718      	adds	r7, #24
 8006aa8:	46bd      	mov	sp, r7
 8006aaa:	bd80      	pop	{r7, pc}
 8006aac:	40021000 	.word	0x40021000
 8006ab0:	40022000 	.word	0x40022000

08006ab4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006ab4:	b580      	push	{r7, lr}
 8006ab6:	b086      	sub	sp, #24
 8006ab8:	af00      	add	r7, sp, #0
 8006aba:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8006abc:	2300      	movs	r3, #0
 8006abe:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8006ac0:	2300      	movs	r3, #0
 8006ac2:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	681b      	ldr	r3, [r3, #0]
 8006ac8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006acc:	2b00      	cmp	r3, #0
 8006ace:	d031      	beq.n	8006b34 <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006ad4:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8006ad8:	d01a      	beq.n	8006b10 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 8006ada:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8006ade:	d814      	bhi.n	8006b0a <HAL_RCCEx_PeriphCLKConfig+0x56>
 8006ae0:	2b00      	cmp	r3, #0
 8006ae2:	d009      	beq.n	8006af8 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8006ae4:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8006ae8:	d10f      	bne.n	8006b0a <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 8006aea:	4b5d      	ldr	r3, [pc, #372]	@ (8006c60 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8006aec:	68db      	ldr	r3, [r3, #12]
 8006aee:	4a5c      	ldr	r2, [pc, #368]	@ (8006c60 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8006af0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006af4:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8006af6:	e00c      	b.n	8006b12 <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	3304      	adds	r3, #4
 8006afc:	2100      	movs	r1, #0
 8006afe:	4618      	mov	r0, r3
 8006b00:	f000 f9de 	bl	8006ec0 <RCCEx_PLLSAI1_Config>
 8006b04:	4603      	mov	r3, r0
 8006b06:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8006b08:	e003      	b.n	8006b12 <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006b0a:	2301      	movs	r3, #1
 8006b0c:	74fb      	strb	r3, [r7, #19]
      break;
 8006b0e:	e000      	b.n	8006b12 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 8006b10:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006b12:	7cfb      	ldrb	r3, [r7, #19]
 8006b14:	2b00      	cmp	r3, #0
 8006b16:	d10b      	bne.n	8006b30 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8006b18:	4b51      	ldr	r3, [pc, #324]	@ (8006c60 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8006b1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006b1e:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006b26:	494e      	ldr	r1, [pc, #312]	@ (8006c60 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8006b28:	4313      	orrs	r3, r2
 8006b2a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8006b2e:	e001      	b.n	8006b34 <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006b30:	7cfb      	ldrb	r3, [r7, #19]
 8006b32:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	681b      	ldr	r3, [r3, #0]
 8006b38:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006b3c:	2b00      	cmp	r3, #0
 8006b3e:	f000 809e 	beq.w	8006c7e <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006b42:	2300      	movs	r3, #0
 8006b44:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8006b46:	4b46      	ldr	r3, [pc, #280]	@ (8006c60 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8006b48:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006b4a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006b4e:	2b00      	cmp	r3, #0
 8006b50:	d101      	bne.n	8006b56 <HAL_RCCEx_PeriphCLKConfig+0xa2>
 8006b52:	2301      	movs	r3, #1
 8006b54:	e000      	b.n	8006b58 <HAL_RCCEx_PeriphCLKConfig+0xa4>
 8006b56:	2300      	movs	r3, #0
 8006b58:	2b00      	cmp	r3, #0
 8006b5a:	d00d      	beq.n	8006b78 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006b5c:	4b40      	ldr	r3, [pc, #256]	@ (8006c60 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8006b5e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006b60:	4a3f      	ldr	r2, [pc, #252]	@ (8006c60 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8006b62:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006b66:	6593      	str	r3, [r2, #88]	@ 0x58
 8006b68:	4b3d      	ldr	r3, [pc, #244]	@ (8006c60 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8006b6a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006b6c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006b70:	60bb      	str	r3, [r7, #8]
 8006b72:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006b74:	2301      	movs	r3, #1
 8006b76:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006b78:	4b3a      	ldr	r3, [pc, #232]	@ (8006c64 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8006b7a:	681b      	ldr	r3, [r3, #0]
 8006b7c:	4a39      	ldr	r2, [pc, #228]	@ (8006c64 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8006b7e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006b82:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8006b84:	f7fc fa90 	bl	80030a8 <HAL_GetTick>
 8006b88:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8006b8a:	e009      	b.n	8006ba0 <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006b8c:	f7fc fa8c 	bl	80030a8 <HAL_GetTick>
 8006b90:	4602      	mov	r2, r0
 8006b92:	68fb      	ldr	r3, [r7, #12]
 8006b94:	1ad3      	subs	r3, r2, r3
 8006b96:	2b02      	cmp	r3, #2
 8006b98:	d902      	bls.n	8006ba0 <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 8006b9a:	2303      	movs	r3, #3
 8006b9c:	74fb      	strb	r3, [r7, #19]
        break;
 8006b9e:	e005      	b.n	8006bac <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8006ba0:	4b30      	ldr	r3, [pc, #192]	@ (8006c64 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8006ba2:	681b      	ldr	r3, [r3, #0]
 8006ba4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006ba8:	2b00      	cmp	r3, #0
 8006baa:	d0ef      	beq.n	8006b8c <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 8006bac:	7cfb      	ldrb	r3, [r7, #19]
 8006bae:	2b00      	cmp	r3, #0
 8006bb0:	d15a      	bne.n	8006c68 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8006bb2:	4b2b      	ldr	r3, [pc, #172]	@ (8006c60 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8006bb4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006bb8:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006bbc:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8006bbe:	697b      	ldr	r3, [r7, #20]
 8006bc0:	2b00      	cmp	r3, #0
 8006bc2:	d01e      	beq.n	8006c02 <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006bc8:	697a      	ldr	r2, [r7, #20]
 8006bca:	429a      	cmp	r2, r3
 8006bcc:	d019      	beq.n	8006c02 <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8006bce:	4b24      	ldr	r3, [pc, #144]	@ (8006c60 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8006bd0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006bd4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006bd8:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8006bda:	4b21      	ldr	r3, [pc, #132]	@ (8006c60 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8006bdc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006be0:	4a1f      	ldr	r2, [pc, #124]	@ (8006c60 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8006be2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006be6:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8006bea:	4b1d      	ldr	r3, [pc, #116]	@ (8006c60 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8006bec:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006bf0:	4a1b      	ldr	r2, [pc, #108]	@ (8006c60 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8006bf2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006bf6:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8006bfa:	4a19      	ldr	r2, [pc, #100]	@ (8006c60 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8006bfc:	697b      	ldr	r3, [r7, #20]
 8006bfe:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8006c02:	697b      	ldr	r3, [r7, #20]
 8006c04:	f003 0301 	and.w	r3, r3, #1
 8006c08:	2b00      	cmp	r3, #0
 8006c0a:	d016      	beq.n	8006c3a <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006c0c:	f7fc fa4c 	bl	80030a8 <HAL_GetTick>
 8006c10:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006c12:	e00b      	b.n	8006c2c <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006c14:	f7fc fa48 	bl	80030a8 <HAL_GetTick>
 8006c18:	4602      	mov	r2, r0
 8006c1a:	68fb      	ldr	r3, [r7, #12]
 8006c1c:	1ad3      	subs	r3, r2, r3
 8006c1e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006c22:	4293      	cmp	r3, r2
 8006c24:	d902      	bls.n	8006c2c <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 8006c26:	2303      	movs	r3, #3
 8006c28:	74fb      	strb	r3, [r7, #19]
            break;
 8006c2a:	e006      	b.n	8006c3a <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006c2c:	4b0c      	ldr	r3, [pc, #48]	@ (8006c60 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8006c2e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006c32:	f003 0302 	and.w	r3, r3, #2
 8006c36:	2b00      	cmp	r3, #0
 8006c38:	d0ec      	beq.n	8006c14 <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 8006c3a:	7cfb      	ldrb	r3, [r7, #19]
 8006c3c:	2b00      	cmp	r3, #0
 8006c3e:	d10b      	bne.n	8006c58 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006c40:	4b07      	ldr	r3, [pc, #28]	@ (8006c60 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8006c42:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006c46:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006c4e:	4904      	ldr	r1, [pc, #16]	@ (8006c60 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8006c50:	4313      	orrs	r3, r2
 8006c52:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8006c56:	e009      	b.n	8006c6c <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8006c58:	7cfb      	ldrb	r3, [r7, #19]
 8006c5a:	74bb      	strb	r3, [r7, #18]
 8006c5c:	e006      	b.n	8006c6c <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 8006c5e:	bf00      	nop
 8006c60:	40021000 	.word	0x40021000
 8006c64:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006c68:	7cfb      	ldrb	r3, [r7, #19]
 8006c6a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006c6c:	7c7b      	ldrb	r3, [r7, #17]
 8006c6e:	2b01      	cmp	r3, #1
 8006c70:	d105      	bne.n	8006c7e <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006c72:	4b8a      	ldr	r3, [pc, #552]	@ (8006e9c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8006c74:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006c76:	4a89      	ldr	r2, [pc, #548]	@ (8006e9c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8006c78:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006c7c:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	681b      	ldr	r3, [r3, #0]
 8006c82:	f003 0301 	and.w	r3, r3, #1
 8006c86:	2b00      	cmp	r3, #0
 8006c88:	d00a      	beq.n	8006ca0 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8006c8a:	4b84      	ldr	r3, [pc, #528]	@ (8006e9c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8006c8c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006c90:	f023 0203 	bic.w	r2, r3, #3
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	6a1b      	ldr	r3, [r3, #32]
 8006c98:	4980      	ldr	r1, [pc, #512]	@ (8006e9c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8006c9a:	4313      	orrs	r3, r2
 8006c9c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	681b      	ldr	r3, [r3, #0]
 8006ca4:	f003 0302 	and.w	r3, r3, #2
 8006ca8:	2b00      	cmp	r3, #0
 8006caa:	d00a      	beq.n	8006cc2 <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8006cac:	4b7b      	ldr	r3, [pc, #492]	@ (8006e9c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8006cae:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006cb2:	f023 020c 	bic.w	r2, r3, #12
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006cba:	4978      	ldr	r1, [pc, #480]	@ (8006e9c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8006cbc:	4313      	orrs	r3, r2
 8006cbe:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	681b      	ldr	r3, [r3, #0]
 8006cc6:	f003 0320 	and.w	r3, r3, #32
 8006cca:	2b00      	cmp	r3, #0
 8006ccc:	d00a      	beq.n	8006ce4 <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8006cce:	4b73      	ldr	r3, [pc, #460]	@ (8006e9c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8006cd0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006cd4:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006cdc:	496f      	ldr	r1, [pc, #444]	@ (8006e9c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8006cde:	4313      	orrs	r3, r2
 8006ce0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	681b      	ldr	r3, [r3, #0]
 8006ce8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006cec:	2b00      	cmp	r3, #0
 8006cee:	d00a      	beq.n	8006d06 <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8006cf0:	4b6a      	ldr	r3, [pc, #424]	@ (8006e9c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8006cf2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006cf6:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006cfe:	4967      	ldr	r1, [pc, #412]	@ (8006e9c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8006d00:	4313      	orrs	r3, r2
 8006d02:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	681b      	ldr	r3, [r3, #0]
 8006d0a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006d0e:	2b00      	cmp	r3, #0
 8006d10:	d00a      	beq.n	8006d28 <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8006d12:	4b62      	ldr	r3, [pc, #392]	@ (8006e9c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8006d14:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006d18:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006d20:	495e      	ldr	r1, [pc, #376]	@ (8006e9c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8006d22:	4313      	orrs	r3, r2
 8006d24:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	681b      	ldr	r3, [r3, #0]
 8006d2c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006d30:	2b00      	cmp	r3, #0
 8006d32:	d00a      	beq.n	8006d4a <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8006d34:	4b59      	ldr	r3, [pc, #356]	@ (8006e9c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8006d36:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006d3a:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006d42:	4956      	ldr	r1, [pc, #344]	@ (8006e9c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8006d44:	4313      	orrs	r3, r2
 8006d46:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	681b      	ldr	r3, [r3, #0]
 8006d4e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006d52:	2b00      	cmp	r3, #0
 8006d54:	d00a      	beq.n	8006d6c <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8006d56:	4b51      	ldr	r3, [pc, #324]	@ (8006e9c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8006d58:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006d5c:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006d64:	494d      	ldr	r1, [pc, #308]	@ (8006e9c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8006d66:	4313      	orrs	r3, r2
 8006d68:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	681b      	ldr	r3, [r3, #0]
 8006d70:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8006d74:	2b00      	cmp	r3, #0
 8006d76:	d028      	beq.n	8006dca <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8006d78:	4b48      	ldr	r3, [pc, #288]	@ (8006e9c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8006d7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006d7e:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006d86:	4945      	ldr	r1, [pc, #276]	@ (8006e9c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8006d88:	4313      	orrs	r3, r2
 8006d8a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006d92:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006d96:	d106      	bne.n	8006da6 <HAL_RCCEx_PeriphCLKConfig+0x2f2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006d98:	4b40      	ldr	r3, [pc, #256]	@ (8006e9c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8006d9a:	68db      	ldr	r3, [r3, #12]
 8006d9c:	4a3f      	ldr	r2, [pc, #252]	@ (8006e9c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8006d9e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006da2:	60d3      	str	r3, [r2, #12]
 8006da4:	e011      	b.n	8006dca <HAL_RCCEx_PeriphCLKConfig+0x316>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006daa:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8006dae:	d10c      	bne.n	8006dca <HAL_RCCEx_PeriphCLKConfig+0x316>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	3304      	adds	r3, #4
 8006db4:	2101      	movs	r1, #1
 8006db6:	4618      	mov	r0, r3
 8006db8:	f000 f882 	bl	8006ec0 <RCCEx_PLLSAI1_Config>
 8006dbc:	4603      	mov	r3, r0
 8006dbe:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8006dc0:	7cfb      	ldrb	r3, [r7, #19]
 8006dc2:	2b00      	cmp	r3, #0
 8006dc4:	d001      	beq.n	8006dca <HAL_RCCEx_PeriphCLKConfig+0x316>
        {
          /* set overall return value */
          status = ret;
 8006dc6:	7cfb      	ldrb	r3, [r7, #19]
 8006dc8:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	681b      	ldr	r3, [r3, #0]
 8006dce:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8006dd2:	2b00      	cmp	r3, #0
 8006dd4:	d028      	beq.n	8006e28 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8006dd6:	4b31      	ldr	r3, [pc, #196]	@ (8006e9c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8006dd8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006ddc:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006de4:	492d      	ldr	r1, [pc, #180]	@ (8006e9c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8006de6:	4313      	orrs	r3, r2
 8006de8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006df0:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006df4:	d106      	bne.n	8006e04 <HAL_RCCEx_PeriphCLKConfig+0x350>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006df6:	4b29      	ldr	r3, [pc, #164]	@ (8006e9c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8006df8:	68db      	ldr	r3, [r3, #12]
 8006dfa:	4a28      	ldr	r2, [pc, #160]	@ (8006e9c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8006dfc:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006e00:	60d3      	str	r3, [r2, #12]
 8006e02:	e011      	b.n	8006e28 <HAL_RCCEx_PeriphCLKConfig+0x374>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006e08:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8006e0c:	d10c      	bne.n	8006e28 <HAL_RCCEx_PeriphCLKConfig+0x374>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	3304      	adds	r3, #4
 8006e12:	2101      	movs	r1, #1
 8006e14:	4618      	mov	r0, r3
 8006e16:	f000 f853 	bl	8006ec0 <RCCEx_PLLSAI1_Config>
 8006e1a:	4603      	mov	r3, r0
 8006e1c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8006e1e:	7cfb      	ldrb	r3, [r7, #19]
 8006e20:	2b00      	cmp	r3, #0
 8006e22:	d001      	beq.n	8006e28 <HAL_RCCEx_PeriphCLKConfig+0x374>
      {
        /* set overall return value */
        status = ret;
 8006e24:	7cfb      	ldrb	r3, [r7, #19]
 8006e26:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	681b      	ldr	r3, [r3, #0]
 8006e2c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006e30:	2b00      	cmp	r3, #0
 8006e32:	d01c      	beq.n	8006e6e <HAL_RCCEx_PeriphCLKConfig+0x3ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8006e34:	4b19      	ldr	r3, [pc, #100]	@ (8006e9c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8006e36:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006e3a:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006e42:	4916      	ldr	r1, [pc, #88]	@ (8006e9c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8006e44:	4313      	orrs	r3, r2
 8006e46:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006e4e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006e52:	d10c      	bne.n	8006e6e <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	3304      	adds	r3, #4
 8006e58:	2102      	movs	r1, #2
 8006e5a:	4618      	mov	r0, r3
 8006e5c:	f000 f830 	bl	8006ec0 <RCCEx_PLLSAI1_Config>
 8006e60:	4603      	mov	r3, r0
 8006e62:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8006e64:	7cfb      	ldrb	r3, [r7, #19]
 8006e66:	2b00      	cmp	r3, #0
 8006e68:	d001      	beq.n	8006e6e <HAL_RCCEx_PeriphCLKConfig+0x3ba>
      {
        /* set overall return value */
        status = ret;
 8006e6a:	7cfb      	ldrb	r3, [r7, #19]
 8006e6c:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	681b      	ldr	r3, [r3, #0]
 8006e72:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8006e76:	2b00      	cmp	r3, #0
 8006e78:	d00a      	beq.n	8006e90 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8006e7a:	4b08      	ldr	r3, [pc, #32]	@ (8006e9c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8006e7c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006e80:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006e88:	4904      	ldr	r1, [pc, #16]	@ (8006e9c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8006e8a:	4313      	orrs	r3, r2
 8006e8c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8006e90:	7cbb      	ldrb	r3, [r7, #18]
}
 8006e92:	4618      	mov	r0, r3
 8006e94:	3718      	adds	r7, #24
 8006e96:	46bd      	mov	sp, r7
 8006e98:	bd80      	pop	{r7, pc}
 8006e9a:	bf00      	nop
 8006e9c:	40021000 	.word	0x40021000

08006ea0 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 8006ea0:	b480      	push	{r7}
 8006ea2:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 8006ea4:	4b05      	ldr	r3, [pc, #20]	@ (8006ebc <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8006ea6:	681b      	ldr	r3, [r3, #0]
 8006ea8:	4a04      	ldr	r2, [pc, #16]	@ (8006ebc <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8006eaa:	f043 0304 	orr.w	r3, r3, #4
 8006eae:	6013      	str	r3, [r2, #0]
}
 8006eb0:	bf00      	nop
 8006eb2:	46bd      	mov	sp, r7
 8006eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eb8:	4770      	bx	lr
 8006eba:	bf00      	nop
 8006ebc:	40021000 	.word	0x40021000

08006ec0 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8006ec0:	b580      	push	{r7, lr}
 8006ec2:	b084      	sub	sp, #16
 8006ec4:	af00      	add	r7, sp, #0
 8006ec6:	6078      	str	r0, [r7, #4]
 8006ec8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006eca:	2300      	movs	r3, #0
 8006ecc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8006ece:	4b74      	ldr	r3, [pc, #464]	@ (80070a0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006ed0:	68db      	ldr	r3, [r3, #12]
 8006ed2:	f003 0303 	and.w	r3, r3, #3
 8006ed6:	2b00      	cmp	r3, #0
 8006ed8:	d018      	beq.n	8006f0c <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8006eda:	4b71      	ldr	r3, [pc, #452]	@ (80070a0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006edc:	68db      	ldr	r3, [r3, #12]
 8006ede:	f003 0203 	and.w	r2, r3, #3
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	681b      	ldr	r3, [r3, #0]
 8006ee6:	429a      	cmp	r2, r3
 8006ee8:	d10d      	bne.n	8006f06 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	681b      	ldr	r3, [r3, #0]
       ||
 8006eee:	2b00      	cmp	r3, #0
 8006ef0:	d009      	beq.n	8006f06 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8006ef2:	4b6b      	ldr	r3, [pc, #428]	@ (80070a0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006ef4:	68db      	ldr	r3, [r3, #12]
 8006ef6:	091b      	lsrs	r3, r3, #4
 8006ef8:	f003 0307 	and.w	r3, r3, #7
 8006efc:	1c5a      	adds	r2, r3, #1
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	685b      	ldr	r3, [r3, #4]
       ||
 8006f02:	429a      	cmp	r2, r3
 8006f04:	d047      	beq.n	8006f96 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8006f06:	2301      	movs	r3, #1
 8006f08:	73fb      	strb	r3, [r7, #15]
 8006f0a:	e044      	b.n	8006f96 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	681b      	ldr	r3, [r3, #0]
 8006f10:	2b03      	cmp	r3, #3
 8006f12:	d018      	beq.n	8006f46 <RCCEx_PLLSAI1_Config+0x86>
 8006f14:	2b03      	cmp	r3, #3
 8006f16:	d825      	bhi.n	8006f64 <RCCEx_PLLSAI1_Config+0xa4>
 8006f18:	2b01      	cmp	r3, #1
 8006f1a:	d002      	beq.n	8006f22 <RCCEx_PLLSAI1_Config+0x62>
 8006f1c:	2b02      	cmp	r3, #2
 8006f1e:	d009      	beq.n	8006f34 <RCCEx_PLLSAI1_Config+0x74>
 8006f20:	e020      	b.n	8006f64 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8006f22:	4b5f      	ldr	r3, [pc, #380]	@ (80070a0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006f24:	681b      	ldr	r3, [r3, #0]
 8006f26:	f003 0302 	and.w	r3, r3, #2
 8006f2a:	2b00      	cmp	r3, #0
 8006f2c:	d11d      	bne.n	8006f6a <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8006f2e:	2301      	movs	r3, #1
 8006f30:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006f32:	e01a      	b.n	8006f6a <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8006f34:	4b5a      	ldr	r3, [pc, #360]	@ (80070a0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006f36:	681b      	ldr	r3, [r3, #0]
 8006f38:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006f3c:	2b00      	cmp	r3, #0
 8006f3e:	d116      	bne.n	8006f6e <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8006f40:	2301      	movs	r3, #1
 8006f42:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006f44:	e013      	b.n	8006f6e <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8006f46:	4b56      	ldr	r3, [pc, #344]	@ (80070a0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006f48:	681b      	ldr	r3, [r3, #0]
 8006f4a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006f4e:	2b00      	cmp	r3, #0
 8006f50:	d10f      	bne.n	8006f72 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8006f52:	4b53      	ldr	r3, [pc, #332]	@ (80070a0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006f54:	681b      	ldr	r3, [r3, #0]
 8006f56:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8006f5a:	2b00      	cmp	r3, #0
 8006f5c:	d109      	bne.n	8006f72 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8006f5e:	2301      	movs	r3, #1
 8006f60:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8006f62:	e006      	b.n	8006f72 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8006f64:	2301      	movs	r3, #1
 8006f66:	73fb      	strb	r3, [r7, #15]
      break;
 8006f68:	e004      	b.n	8006f74 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8006f6a:	bf00      	nop
 8006f6c:	e002      	b.n	8006f74 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8006f6e:	bf00      	nop
 8006f70:	e000      	b.n	8006f74 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8006f72:	bf00      	nop
    }

    if(status == HAL_OK)
 8006f74:	7bfb      	ldrb	r3, [r7, #15]
 8006f76:	2b00      	cmp	r3, #0
 8006f78:	d10d      	bne.n	8006f96 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8006f7a:	4b49      	ldr	r3, [pc, #292]	@ (80070a0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006f7c:	68db      	ldr	r3, [r3, #12]
 8006f7e:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	6819      	ldr	r1, [r3, #0]
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	685b      	ldr	r3, [r3, #4]
 8006f8a:	3b01      	subs	r3, #1
 8006f8c:	011b      	lsls	r3, r3, #4
 8006f8e:	430b      	orrs	r3, r1
 8006f90:	4943      	ldr	r1, [pc, #268]	@ (80070a0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006f92:	4313      	orrs	r3, r2
 8006f94:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8006f96:	7bfb      	ldrb	r3, [r7, #15]
 8006f98:	2b00      	cmp	r3, #0
 8006f9a:	d17c      	bne.n	8007096 <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8006f9c:	4b40      	ldr	r3, [pc, #256]	@ (80070a0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006f9e:	681b      	ldr	r3, [r3, #0]
 8006fa0:	4a3f      	ldr	r2, [pc, #252]	@ (80070a0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006fa2:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8006fa6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006fa8:	f7fc f87e 	bl	80030a8 <HAL_GetTick>
 8006fac:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8006fae:	e009      	b.n	8006fc4 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8006fb0:	f7fc f87a 	bl	80030a8 <HAL_GetTick>
 8006fb4:	4602      	mov	r2, r0
 8006fb6:	68bb      	ldr	r3, [r7, #8]
 8006fb8:	1ad3      	subs	r3, r2, r3
 8006fba:	2b02      	cmp	r3, #2
 8006fbc:	d902      	bls.n	8006fc4 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8006fbe:	2303      	movs	r3, #3
 8006fc0:	73fb      	strb	r3, [r7, #15]
        break;
 8006fc2:	e005      	b.n	8006fd0 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8006fc4:	4b36      	ldr	r3, [pc, #216]	@ (80070a0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006fc6:	681b      	ldr	r3, [r3, #0]
 8006fc8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006fcc:	2b00      	cmp	r3, #0
 8006fce:	d1ef      	bne.n	8006fb0 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8006fd0:	7bfb      	ldrb	r3, [r7, #15]
 8006fd2:	2b00      	cmp	r3, #0
 8006fd4:	d15f      	bne.n	8007096 <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8006fd6:	683b      	ldr	r3, [r7, #0]
 8006fd8:	2b00      	cmp	r3, #0
 8006fda:	d110      	bne.n	8006ffe <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8006fdc:	4b30      	ldr	r3, [pc, #192]	@ (80070a0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006fde:	691b      	ldr	r3, [r3, #16]
 8006fe0:	f023 4378 	bic.w	r3, r3, #4160749568	@ 0xf8000000
 8006fe4:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8006fe8:	687a      	ldr	r2, [r7, #4]
 8006fea:	6892      	ldr	r2, [r2, #8]
 8006fec:	0211      	lsls	r1, r2, #8
 8006fee:	687a      	ldr	r2, [r7, #4]
 8006ff0:	68d2      	ldr	r2, [r2, #12]
 8006ff2:	06d2      	lsls	r2, r2, #27
 8006ff4:	430a      	orrs	r2, r1
 8006ff6:	492a      	ldr	r1, [pc, #168]	@ (80070a0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006ff8:	4313      	orrs	r3, r2
 8006ffa:	610b      	str	r3, [r1, #16]
 8006ffc:	e027      	b.n	800704e <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8006ffe:	683b      	ldr	r3, [r7, #0]
 8007000:	2b01      	cmp	r3, #1
 8007002:	d112      	bne.n	800702a <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8007004:	4b26      	ldr	r3, [pc, #152]	@ (80070a0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8007006:	691b      	ldr	r3, [r3, #16]
 8007008:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 800700c:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8007010:	687a      	ldr	r2, [r7, #4]
 8007012:	6892      	ldr	r2, [r2, #8]
 8007014:	0211      	lsls	r1, r2, #8
 8007016:	687a      	ldr	r2, [r7, #4]
 8007018:	6912      	ldr	r2, [r2, #16]
 800701a:	0852      	lsrs	r2, r2, #1
 800701c:	3a01      	subs	r2, #1
 800701e:	0552      	lsls	r2, r2, #21
 8007020:	430a      	orrs	r2, r1
 8007022:	491f      	ldr	r1, [pc, #124]	@ (80070a0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8007024:	4313      	orrs	r3, r2
 8007026:	610b      	str	r3, [r1, #16]
 8007028:	e011      	b.n	800704e <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800702a:	4b1d      	ldr	r3, [pc, #116]	@ (80070a0 <RCCEx_PLLSAI1_Config+0x1e0>)
 800702c:	691b      	ldr	r3, [r3, #16]
 800702e:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8007032:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8007036:	687a      	ldr	r2, [r7, #4]
 8007038:	6892      	ldr	r2, [r2, #8]
 800703a:	0211      	lsls	r1, r2, #8
 800703c:	687a      	ldr	r2, [r7, #4]
 800703e:	6952      	ldr	r2, [r2, #20]
 8007040:	0852      	lsrs	r2, r2, #1
 8007042:	3a01      	subs	r2, #1
 8007044:	0652      	lsls	r2, r2, #25
 8007046:	430a      	orrs	r2, r1
 8007048:	4915      	ldr	r1, [pc, #84]	@ (80070a0 <RCCEx_PLLSAI1_Config+0x1e0>)
 800704a:	4313      	orrs	r3, r2
 800704c:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 800704e:	4b14      	ldr	r3, [pc, #80]	@ (80070a0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8007050:	681b      	ldr	r3, [r3, #0]
 8007052:	4a13      	ldr	r2, [pc, #76]	@ (80070a0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8007054:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8007058:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800705a:	f7fc f825 	bl	80030a8 <HAL_GetTick>
 800705e:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8007060:	e009      	b.n	8007076 <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8007062:	f7fc f821 	bl	80030a8 <HAL_GetTick>
 8007066:	4602      	mov	r2, r0
 8007068:	68bb      	ldr	r3, [r7, #8]
 800706a:	1ad3      	subs	r3, r2, r3
 800706c:	2b02      	cmp	r3, #2
 800706e:	d902      	bls.n	8007076 <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 8007070:	2303      	movs	r3, #3
 8007072:	73fb      	strb	r3, [r7, #15]
          break;
 8007074:	e005      	b.n	8007082 <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8007076:	4b0a      	ldr	r3, [pc, #40]	@ (80070a0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8007078:	681b      	ldr	r3, [r3, #0]
 800707a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800707e:	2b00      	cmp	r3, #0
 8007080:	d0ef      	beq.n	8007062 <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 8007082:	7bfb      	ldrb	r3, [r7, #15]
 8007084:	2b00      	cmp	r3, #0
 8007086:	d106      	bne.n	8007096 <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8007088:	4b05      	ldr	r3, [pc, #20]	@ (80070a0 <RCCEx_PLLSAI1_Config+0x1e0>)
 800708a:	691a      	ldr	r2, [r3, #16]
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	699b      	ldr	r3, [r3, #24]
 8007090:	4903      	ldr	r1, [pc, #12]	@ (80070a0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8007092:	4313      	orrs	r3, r2
 8007094:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8007096:	7bfb      	ldrb	r3, [r7, #15]
}
 8007098:	4618      	mov	r0, r3
 800709a:	3710      	adds	r7, #16
 800709c:	46bd      	mov	sp, r7
 800709e:	bd80      	pop	{r7, pc}
 80070a0:	40021000 	.word	0x40021000

080070a4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80070a4:	b580      	push	{r7, lr}
 80070a6:	b082      	sub	sp, #8
 80070a8:	af00      	add	r7, sp, #0
 80070aa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	2b00      	cmp	r3, #0
 80070b0:	d101      	bne.n	80070b6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80070b2:	2301      	movs	r3, #1
 80070b4:	e049      	b.n	800714a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80070bc:	b2db      	uxtb	r3, r3
 80070be:	2b00      	cmp	r3, #0
 80070c0:	d106      	bne.n	80070d0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	2200      	movs	r2, #0
 80070c6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80070ca:	6878      	ldr	r0, [r7, #4]
 80070cc:	f000 f841 	bl	8007152 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	2202      	movs	r2, #2
 80070d4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	681a      	ldr	r2, [r3, #0]
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	3304      	adds	r3, #4
 80070e0:	4619      	mov	r1, r3
 80070e2:	4610      	mov	r0, r2
 80070e4:	f000 fd88 	bl	8007bf8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	2201      	movs	r2, #1
 80070ec:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	2201      	movs	r2, #1
 80070f4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	2201      	movs	r2, #1
 80070fc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	2201      	movs	r2, #1
 8007104:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	2201      	movs	r2, #1
 800710c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	2201      	movs	r2, #1
 8007114:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	2201      	movs	r2, #1
 800711c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	2201      	movs	r2, #1
 8007124:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	2201      	movs	r2, #1
 800712c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	2201      	movs	r2, #1
 8007134:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	2201      	movs	r2, #1
 800713c:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	2201      	movs	r2, #1
 8007144:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8007148:	2300      	movs	r3, #0
}
 800714a:	4618      	mov	r0, r3
 800714c:	3708      	adds	r7, #8
 800714e:	46bd      	mov	sp, r7
 8007150:	bd80      	pop	{r7, pc}

08007152 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8007152:	b480      	push	{r7}
 8007154:	b083      	sub	sp, #12
 8007156:	af00      	add	r7, sp, #0
 8007158:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800715a:	bf00      	nop
 800715c:	370c      	adds	r7, #12
 800715e:	46bd      	mov	sp, r7
 8007160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007164:	4770      	bx	lr
	...

08007168 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8007168:	b480      	push	{r7}
 800716a:	b085      	sub	sp, #20
 800716c:	af00      	add	r7, sp, #0
 800716e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007176:	b2db      	uxtb	r3, r3
 8007178:	2b01      	cmp	r3, #1
 800717a:	d001      	beq.n	8007180 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 800717c:	2301      	movs	r3, #1
 800717e:	e033      	b.n	80071e8 <HAL_TIM_Base_Start+0x80>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	2202      	movs	r2, #2
 8007184:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	681b      	ldr	r3, [r3, #0]
 800718c:	4a19      	ldr	r2, [pc, #100]	@ (80071f4 <HAL_TIM_Base_Start+0x8c>)
 800718e:	4293      	cmp	r3, r2
 8007190:	d009      	beq.n	80071a6 <HAL_TIM_Base_Start+0x3e>
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	681b      	ldr	r3, [r3, #0]
 8007196:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800719a:	d004      	beq.n	80071a6 <HAL_TIM_Base_Start+0x3e>
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	681b      	ldr	r3, [r3, #0]
 80071a0:	4a15      	ldr	r2, [pc, #84]	@ (80071f8 <HAL_TIM_Base_Start+0x90>)
 80071a2:	4293      	cmp	r3, r2
 80071a4:	d115      	bne.n	80071d2 <HAL_TIM_Base_Start+0x6a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	681b      	ldr	r3, [r3, #0]
 80071aa:	689a      	ldr	r2, [r3, #8]
 80071ac:	4b13      	ldr	r3, [pc, #76]	@ (80071fc <HAL_TIM_Base_Start+0x94>)
 80071ae:	4013      	ands	r3, r2
 80071b0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80071b2:	68fb      	ldr	r3, [r7, #12]
 80071b4:	2b06      	cmp	r3, #6
 80071b6:	d015      	beq.n	80071e4 <HAL_TIM_Base_Start+0x7c>
 80071b8:	68fb      	ldr	r3, [r7, #12]
 80071ba:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80071be:	d011      	beq.n	80071e4 <HAL_TIM_Base_Start+0x7c>
    {
      __HAL_TIM_ENABLE(htim);
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	681b      	ldr	r3, [r3, #0]
 80071c4:	681a      	ldr	r2, [r3, #0]
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	681b      	ldr	r3, [r3, #0]
 80071ca:	f042 0201 	orr.w	r2, r2, #1
 80071ce:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80071d0:	e008      	b.n	80071e4 <HAL_TIM_Base_Start+0x7c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	681b      	ldr	r3, [r3, #0]
 80071d6:	681a      	ldr	r2, [r3, #0]
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	681b      	ldr	r3, [r3, #0]
 80071dc:	f042 0201 	orr.w	r2, r2, #1
 80071e0:	601a      	str	r2, [r3, #0]
 80071e2:	e000      	b.n	80071e6 <HAL_TIM_Base_Start+0x7e>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80071e4:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80071e6:	2300      	movs	r3, #0
}
 80071e8:	4618      	mov	r0, r3
 80071ea:	3714      	adds	r7, #20
 80071ec:	46bd      	mov	sp, r7
 80071ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071f2:	4770      	bx	lr
 80071f4:	40012c00 	.word	0x40012c00
 80071f8:	40014000 	.word	0x40014000
 80071fc:	00010007 	.word	0x00010007

08007200 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8007200:	b480      	push	{r7}
 8007202:	b085      	sub	sp, #20
 8007204:	af00      	add	r7, sp, #0
 8007206:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800720e:	b2db      	uxtb	r3, r3
 8007210:	2b01      	cmp	r3, #1
 8007212:	d001      	beq.n	8007218 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8007214:	2301      	movs	r3, #1
 8007216:	e03b      	b.n	8007290 <HAL_TIM_Base_Start_IT+0x90>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	2202      	movs	r2, #2
 800721c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	681b      	ldr	r3, [r3, #0]
 8007224:	68da      	ldr	r2, [r3, #12]
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	681b      	ldr	r3, [r3, #0]
 800722a:	f042 0201 	orr.w	r2, r2, #1
 800722e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	681b      	ldr	r3, [r3, #0]
 8007234:	4a19      	ldr	r2, [pc, #100]	@ (800729c <HAL_TIM_Base_Start_IT+0x9c>)
 8007236:	4293      	cmp	r3, r2
 8007238:	d009      	beq.n	800724e <HAL_TIM_Base_Start_IT+0x4e>
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	681b      	ldr	r3, [r3, #0]
 800723e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007242:	d004      	beq.n	800724e <HAL_TIM_Base_Start_IT+0x4e>
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	681b      	ldr	r3, [r3, #0]
 8007248:	4a15      	ldr	r2, [pc, #84]	@ (80072a0 <HAL_TIM_Base_Start_IT+0xa0>)
 800724a:	4293      	cmp	r3, r2
 800724c:	d115      	bne.n	800727a <HAL_TIM_Base_Start_IT+0x7a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	681b      	ldr	r3, [r3, #0]
 8007252:	689a      	ldr	r2, [r3, #8]
 8007254:	4b13      	ldr	r3, [pc, #76]	@ (80072a4 <HAL_TIM_Base_Start_IT+0xa4>)
 8007256:	4013      	ands	r3, r2
 8007258:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800725a:	68fb      	ldr	r3, [r7, #12]
 800725c:	2b06      	cmp	r3, #6
 800725e:	d015      	beq.n	800728c <HAL_TIM_Base_Start_IT+0x8c>
 8007260:	68fb      	ldr	r3, [r7, #12]
 8007262:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007266:	d011      	beq.n	800728c <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	681b      	ldr	r3, [r3, #0]
 800726c:	681a      	ldr	r2, [r3, #0]
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	681b      	ldr	r3, [r3, #0]
 8007272:	f042 0201 	orr.w	r2, r2, #1
 8007276:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007278:	e008      	b.n	800728c <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	681b      	ldr	r3, [r3, #0]
 800727e:	681a      	ldr	r2, [r3, #0]
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	681b      	ldr	r3, [r3, #0]
 8007284:	f042 0201 	orr.w	r2, r2, #1
 8007288:	601a      	str	r2, [r3, #0]
 800728a:	e000      	b.n	800728e <HAL_TIM_Base_Start_IT+0x8e>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800728c:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800728e:	2300      	movs	r3, #0
}
 8007290:	4618      	mov	r0, r3
 8007292:	3714      	adds	r7, #20
 8007294:	46bd      	mov	sp, r7
 8007296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800729a:	4770      	bx	lr
 800729c:	40012c00 	.word	0x40012c00
 80072a0:	40014000 	.word	0x40014000
 80072a4:	00010007 	.word	0x00010007

080072a8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80072a8:	b580      	push	{r7, lr}
 80072aa:	b082      	sub	sp, #8
 80072ac:	af00      	add	r7, sp, #0
 80072ae:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	2b00      	cmp	r3, #0
 80072b4:	d101      	bne.n	80072ba <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80072b6:	2301      	movs	r3, #1
 80072b8:	e049      	b.n	800734e <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80072c0:	b2db      	uxtb	r3, r3
 80072c2:	2b00      	cmp	r3, #0
 80072c4:	d106      	bne.n	80072d4 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	2200      	movs	r2, #0
 80072ca:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80072ce:	6878      	ldr	r0, [r7, #4]
 80072d0:	f7fb fd40 	bl	8002d54 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	2202      	movs	r2, #2
 80072d8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	681a      	ldr	r2, [r3, #0]
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	3304      	adds	r3, #4
 80072e4:	4619      	mov	r1, r3
 80072e6:	4610      	mov	r0, r2
 80072e8:	f000 fc86 	bl	8007bf8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	2201      	movs	r2, #1
 80072f0:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	2201      	movs	r2, #1
 80072f8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	2201      	movs	r2, #1
 8007300:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	2201      	movs	r2, #1
 8007308:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	2201      	movs	r2, #1
 8007310:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	2201      	movs	r2, #1
 8007318:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	2201      	movs	r2, #1
 8007320:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	2201      	movs	r2, #1
 8007328:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	2201      	movs	r2, #1
 8007330:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	2201      	movs	r2, #1
 8007338:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	2201      	movs	r2, #1
 8007340:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	2201      	movs	r2, #1
 8007348:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800734c:	2300      	movs	r3, #0
}
 800734e:	4618      	mov	r0, r3
 8007350:	3708      	adds	r7, #8
 8007352:	46bd      	mov	sp, r7
 8007354:	bd80      	pop	{r7, pc}
	...

08007358 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007358:	b580      	push	{r7, lr}
 800735a:	b084      	sub	sp, #16
 800735c:	af00      	add	r7, sp, #0
 800735e:	6078      	str	r0, [r7, #4]
 8007360:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8007362:	683b      	ldr	r3, [r7, #0]
 8007364:	2b00      	cmp	r3, #0
 8007366:	d109      	bne.n	800737c <HAL_TIM_PWM_Start+0x24>
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800736e:	b2db      	uxtb	r3, r3
 8007370:	2b01      	cmp	r3, #1
 8007372:	bf14      	ite	ne
 8007374:	2301      	movne	r3, #1
 8007376:	2300      	moveq	r3, #0
 8007378:	b2db      	uxtb	r3, r3
 800737a:	e03c      	b.n	80073f6 <HAL_TIM_PWM_Start+0x9e>
 800737c:	683b      	ldr	r3, [r7, #0]
 800737e:	2b04      	cmp	r3, #4
 8007380:	d109      	bne.n	8007396 <HAL_TIM_PWM_Start+0x3e>
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8007388:	b2db      	uxtb	r3, r3
 800738a:	2b01      	cmp	r3, #1
 800738c:	bf14      	ite	ne
 800738e:	2301      	movne	r3, #1
 8007390:	2300      	moveq	r3, #0
 8007392:	b2db      	uxtb	r3, r3
 8007394:	e02f      	b.n	80073f6 <HAL_TIM_PWM_Start+0x9e>
 8007396:	683b      	ldr	r3, [r7, #0]
 8007398:	2b08      	cmp	r3, #8
 800739a:	d109      	bne.n	80073b0 <HAL_TIM_PWM_Start+0x58>
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80073a2:	b2db      	uxtb	r3, r3
 80073a4:	2b01      	cmp	r3, #1
 80073a6:	bf14      	ite	ne
 80073a8:	2301      	movne	r3, #1
 80073aa:	2300      	moveq	r3, #0
 80073ac:	b2db      	uxtb	r3, r3
 80073ae:	e022      	b.n	80073f6 <HAL_TIM_PWM_Start+0x9e>
 80073b0:	683b      	ldr	r3, [r7, #0]
 80073b2:	2b0c      	cmp	r3, #12
 80073b4:	d109      	bne.n	80073ca <HAL_TIM_PWM_Start+0x72>
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80073bc:	b2db      	uxtb	r3, r3
 80073be:	2b01      	cmp	r3, #1
 80073c0:	bf14      	ite	ne
 80073c2:	2301      	movne	r3, #1
 80073c4:	2300      	moveq	r3, #0
 80073c6:	b2db      	uxtb	r3, r3
 80073c8:	e015      	b.n	80073f6 <HAL_TIM_PWM_Start+0x9e>
 80073ca:	683b      	ldr	r3, [r7, #0]
 80073cc:	2b10      	cmp	r3, #16
 80073ce:	d109      	bne.n	80073e4 <HAL_TIM_PWM_Start+0x8c>
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80073d6:	b2db      	uxtb	r3, r3
 80073d8:	2b01      	cmp	r3, #1
 80073da:	bf14      	ite	ne
 80073dc:	2301      	movne	r3, #1
 80073de:	2300      	moveq	r3, #0
 80073e0:	b2db      	uxtb	r3, r3
 80073e2:	e008      	b.n	80073f6 <HAL_TIM_PWM_Start+0x9e>
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 80073ea:	b2db      	uxtb	r3, r3
 80073ec:	2b01      	cmp	r3, #1
 80073ee:	bf14      	ite	ne
 80073f0:	2301      	movne	r3, #1
 80073f2:	2300      	moveq	r3, #0
 80073f4:	b2db      	uxtb	r3, r3
 80073f6:	2b00      	cmp	r3, #0
 80073f8:	d001      	beq.n	80073fe <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 80073fa:	2301      	movs	r3, #1
 80073fc:	e07e      	b.n	80074fc <HAL_TIM_PWM_Start+0x1a4>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80073fe:	683b      	ldr	r3, [r7, #0]
 8007400:	2b00      	cmp	r3, #0
 8007402:	d104      	bne.n	800740e <HAL_TIM_PWM_Start+0xb6>
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	2202      	movs	r2, #2
 8007408:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800740c:	e023      	b.n	8007456 <HAL_TIM_PWM_Start+0xfe>
 800740e:	683b      	ldr	r3, [r7, #0]
 8007410:	2b04      	cmp	r3, #4
 8007412:	d104      	bne.n	800741e <HAL_TIM_PWM_Start+0xc6>
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	2202      	movs	r2, #2
 8007418:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800741c:	e01b      	b.n	8007456 <HAL_TIM_PWM_Start+0xfe>
 800741e:	683b      	ldr	r3, [r7, #0]
 8007420:	2b08      	cmp	r3, #8
 8007422:	d104      	bne.n	800742e <HAL_TIM_PWM_Start+0xd6>
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	2202      	movs	r2, #2
 8007428:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800742c:	e013      	b.n	8007456 <HAL_TIM_PWM_Start+0xfe>
 800742e:	683b      	ldr	r3, [r7, #0]
 8007430:	2b0c      	cmp	r3, #12
 8007432:	d104      	bne.n	800743e <HAL_TIM_PWM_Start+0xe6>
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	2202      	movs	r2, #2
 8007438:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800743c:	e00b      	b.n	8007456 <HAL_TIM_PWM_Start+0xfe>
 800743e:	683b      	ldr	r3, [r7, #0]
 8007440:	2b10      	cmp	r3, #16
 8007442:	d104      	bne.n	800744e <HAL_TIM_PWM_Start+0xf6>
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	2202      	movs	r2, #2
 8007448:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800744c:	e003      	b.n	8007456 <HAL_TIM_PWM_Start+0xfe>
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	2202      	movs	r2, #2
 8007452:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	681b      	ldr	r3, [r3, #0]
 800745a:	2201      	movs	r2, #1
 800745c:	6839      	ldr	r1, [r7, #0]
 800745e:	4618      	mov	r0, r3
 8007460:	f000 feac 	bl	80081bc <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	681b      	ldr	r3, [r3, #0]
 8007468:	4a26      	ldr	r2, [pc, #152]	@ (8007504 <HAL_TIM_PWM_Start+0x1ac>)
 800746a:	4293      	cmp	r3, r2
 800746c:	d009      	beq.n	8007482 <HAL_TIM_PWM_Start+0x12a>
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	681b      	ldr	r3, [r3, #0]
 8007472:	4a25      	ldr	r2, [pc, #148]	@ (8007508 <HAL_TIM_PWM_Start+0x1b0>)
 8007474:	4293      	cmp	r3, r2
 8007476:	d004      	beq.n	8007482 <HAL_TIM_PWM_Start+0x12a>
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	681b      	ldr	r3, [r3, #0]
 800747c:	4a23      	ldr	r2, [pc, #140]	@ (800750c <HAL_TIM_PWM_Start+0x1b4>)
 800747e:	4293      	cmp	r3, r2
 8007480:	d101      	bne.n	8007486 <HAL_TIM_PWM_Start+0x12e>
 8007482:	2301      	movs	r3, #1
 8007484:	e000      	b.n	8007488 <HAL_TIM_PWM_Start+0x130>
 8007486:	2300      	movs	r3, #0
 8007488:	2b00      	cmp	r3, #0
 800748a:	d007      	beq.n	800749c <HAL_TIM_PWM_Start+0x144>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	681b      	ldr	r3, [r3, #0]
 8007490:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	681b      	ldr	r3, [r3, #0]
 8007496:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800749a:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	681b      	ldr	r3, [r3, #0]
 80074a0:	4a18      	ldr	r2, [pc, #96]	@ (8007504 <HAL_TIM_PWM_Start+0x1ac>)
 80074a2:	4293      	cmp	r3, r2
 80074a4:	d009      	beq.n	80074ba <HAL_TIM_PWM_Start+0x162>
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	681b      	ldr	r3, [r3, #0]
 80074aa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80074ae:	d004      	beq.n	80074ba <HAL_TIM_PWM_Start+0x162>
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	681b      	ldr	r3, [r3, #0]
 80074b4:	4a14      	ldr	r2, [pc, #80]	@ (8007508 <HAL_TIM_PWM_Start+0x1b0>)
 80074b6:	4293      	cmp	r3, r2
 80074b8:	d115      	bne.n	80074e6 <HAL_TIM_PWM_Start+0x18e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	681b      	ldr	r3, [r3, #0]
 80074be:	689a      	ldr	r2, [r3, #8]
 80074c0:	4b13      	ldr	r3, [pc, #76]	@ (8007510 <HAL_TIM_PWM_Start+0x1b8>)
 80074c2:	4013      	ands	r3, r2
 80074c4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80074c6:	68fb      	ldr	r3, [r7, #12]
 80074c8:	2b06      	cmp	r3, #6
 80074ca:	d015      	beq.n	80074f8 <HAL_TIM_PWM_Start+0x1a0>
 80074cc:	68fb      	ldr	r3, [r7, #12]
 80074ce:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80074d2:	d011      	beq.n	80074f8 <HAL_TIM_PWM_Start+0x1a0>
    {
      __HAL_TIM_ENABLE(htim);
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	681b      	ldr	r3, [r3, #0]
 80074d8:	681a      	ldr	r2, [r3, #0]
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	681b      	ldr	r3, [r3, #0]
 80074de:	f042 0201 	orr.w	r2, r2, #1
 80074e2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80074e4:	e008      	b.n	80074f8 <HAL_TIM_PWM_Start+0x1a0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	681b      	ldr	r3, [r3, #0]
 80074ea:	681a      	ldr	r2, [r3, #0]
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	681b      	ldr	r3, [r3, #0]
 80074f0:	f042 0201 	orr.w	r2, r2, #1
 80074f4:	601a      	str	r2, [r3, #0]
 80074f6:	e000      	b.n	80074fa <HAL_TIM_PWM_Start+0x1a2>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80074f8:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80074fa:	2300      	movs	r3, #0
}
 80074fc:	4618      	mov	r0, r3
 80074fe:	3710      	adds	r7, #16
 8007500:	46bd      	mov	sp, r7
 8007502:	bd80      	pop	{r7, pc}
 8007504:	40012c00 	.word	0x40012c00
 8007508:	40014000 	.word	0x40014000
 800750c:	40014400 	.word	0x40014400
 8007510:	00010007 	.word	0x00010007

08007514 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 8007514:	b580      	push	{r7, lr}
 8007516:	b086      	sub	sp, #24
 8007518:	af00      	add	r7, sp, #0
 800751a:	6078      	str	r0, [r7, #4]
 800751c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	2b00      	cmp	r3, #0
 8007522:	d101      	bne.n	8007528 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8007524:	2301      	movs	r3, #1
 8007526:	e097      	b.n	8007658 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800752e:	b2db      	uxtb	r3, r3
 8007530:	2b00      	cmp	r3, #0
 8007532:	d106      	bne.n	8007542 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	2200      	movs	r2, #0
 8007538:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 800753c:	6878      	ldr	r0, [r7, #4]
 800753e:	f7fb fb79 	bl	8002c34 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	2202      	movs	r2, #2
 8007546:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	681b      	ldr	r3, [r3, #0]
 800754e:	689b      	ldr	r3, [r3, #8]
 8007550:	687a      	ldr	r2, [r7, #4]
 8007552:	6812      	ldr	r2, [r2, #0]
 8007554:	f423 33a0 	bic.w	r3, r3, #81920	@ 0x14000
 8007558:	f023 0307 	bic.w	r3, r3, #7
 800755c:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	681a      	ldr	r2, [r3, #0]
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	3304      	adds	r3, #4
 8007566:	4619      	mov	r1, r3
 8007568:	4610      	mov	r0, r2
 800756a:	f000 fb45 	bl	8007bf8 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	681b      	ldr	r3, [r3, #0]
 8007572:	689b      	ldr	r3, [r3, #8]
 8007574:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	681b      	ldr	r3, [r3, #0]
 800757a:	699b      	ldr	r3, [r3, #24]
 800757c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	681b      	ldr	r3, [r3, #0]
 8007582:	6a1b      	ldr	r3, [r3, #32]
 8007584:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8007586:	683b      	ldr	r3, [r7, #0]
 8007588:	681b      	ldr	r3, [r3, #0]
 800758a:	697a      	ldr	r2, [r7, #20]
 800758c:	4313      	orrs	r3, r2
 800758e:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8007590:	693b      	ldr	r3, [r7, #16]
 8007592:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007596:	f023 0303 	bic.w	r3, r3, #3
 800759a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800759c:	683b      	ldr	r3, [r7, #0]
 800759e:	689a      	ldr	r2, [r3, #8]
 80075a0:	683b      	ldr	r3, [r7, #0]
 80075a2:	699b      	ldr	r3, [r3, #24]
 80075a4:	021b      	lsls	r3, r3, #8
 80075a6:	4313      	orrs	r3, r2
 80075a8:	693a      	ldr	r2, [r7, #16]
 80075aa:	4313      	orrs	r3, r2
 80075ac:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 80075ae:	693b      	ldr	r3, [r7, #16]
 80075b0:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 80075b4:	f023 030c 	bic.w	r3, r3, #12
 80075b8:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 80075ba:	693b      	ldr	r3, [r7, #16]
 80075bc:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80075c0:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80075c4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 80075c6:	683b      	ldr	r3, [r7, #0]
 80075c8:	68da      	ldr	r2, [r3, #12]
 80075ca:	683b      	ldr	r3, [r7, #0]
 80075cc:	69db      	ldr	r3, [r3, #28]
 80075ce:	021b      	lsls	r3, r3, #8
 80075d0:	4313      	orrs	r3, r2
 80075d2:	693a      	ldr	r2, [r7, #16]
 80075d4:	4313      	orrs	r3, r2
 80075d6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 80075d8:	683b      	ldr	r3, [r7, #0]
 80075da:	691b      	ldr	r3, [r3, #16]
 80075dc:	011a      	lsls	r2, r3, #4
 80075de:	683b      	ldr	r3, [r7, #0]
 80075e0:	6a1b      	ldr	r3, [r3, #32]
 80075e2:	031b      	lsls	r3, r3, #12
 80075e4:	4313      	orrs	r3, r2
 80075e6:	693a      	ldr	r2, [r7, #16]
 80075e8:	4313      	orrs	r3, r2
 80075ea:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 80075ec:	68fb      	ldr	r3, [r7, #12]
 80075ee:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 80075f2:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 80075f4:	68fb      	ldr	r3, [r7, #12]
 80075f6:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 80075fa:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 80075fc:	683b      	ldr	r3, [r7, #0]
 80075fe:	685a      	ldr	r2, [r3, #4]
 8007600:	683b      	ldr	r3, [r7, #0]
 8007602:	695b      	ldr	r3, [r3, #20]
 8007604:	011b      	lsls	r3, r3, #4
 8007606:	4313      	orrs	r3, r2
 8007608:	68fa      	ldr	r2, [r7, #12]
 800760a:	4313      	orrs	r3, r2
 800760c:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	681b      	ldr	r3, [r3, #0]
 8007612:	697a      	ldr	r2, [r7, #20]
 8007614:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	681b      	ldr	r3, [r3, #0]
 800761a:	693a      	ldr	r2, [r7, #16]
 800761c:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	681b      	ldr	r3, [r3, #0]
 8007622:	68fa      	ldr	r2, [r7, #12]
 8007624:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	2201      	movs	r2, #1
 800762a:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	2201      	movs	r2, #1
 8007632:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	2201      	movs	r2, #1
 800763a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	2201      	movs	r2, #1
 8007642:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	2201      	movs	r2, #1
 800764a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	2201      	movs	r2, #1
 8007652:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8007656:	2300      	movs	r3, #0
}
 8007658:	4618      	mov	r0, r3
 800765a:	3718      	adds	r7, #24
 800765c:	46bd      	mov	sp, r7
 800765e:	bd80      	pop	{r7, pc}

08007660 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007660:	b580      	push	{r7, lr}
 8007662:	b084      	sub	sp, #16
 8007664:	af00      	add	r7, sp, #0
 8007666:	6078      	str	r0, [r7, #4]
 8007668:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8007670:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8007678:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8007680:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8007688:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 800768a:	683b      	ldr	r3, [r7, #0]
 800768c:	2b00      	cmp	r3, #0
 800768e:	d110      	bne.n	80076b2 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8007690:	7bfb      	ldrb	r3, [r7, #15]
 8007692:	2b01      	cmp	r3, #1
 8007694:	d102      	bne.n	800769c <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8007696:	7b7b      	ldrb	r3, [r7, #13]
 8007698:	2b01      	cmp	r3, #1
 800769a:	d001      	beq.n	80076a0 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 800769c:	2301      	movs	r3, #1
 800769e:	e069      	b.n	8007774 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	2202      	movs	r2, #2
 80076a4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	2202      	movs	r2, #2
 80076ac:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80076b0:	e031      	b.n	8007716 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 80076b2:	683b      	ldr	r3, [r7, #0]
 80076b4:	2b04      	cmp	r3, #4
 80076b6:	d110      	bne.n	80076da <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80076b8:	7bbb      	ldrb	r3, [r7, #14]
 80076ba:	2b01      	cmp	r3, #1
 80076bc:	d102      	bne.n	80076c4 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80076be:	7b3b      	ldrb	r3, [r7, #12]
 80076c0:	2b01      	cmp	r3, #1
 80076c2:	d001      	beq.n	80076c8 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 80076c4:	2301      	movs	r3, #1
 80076c6:	e055      	b.n	8007774 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	2202      	movs	r2, #2
 80076cc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	2202      	movs	r2, #2
 80076d4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80076d8:	e01d      	b.n	8007716 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80076da:	7bfb      	ldrb	r3, [r7, #15]
 80076dc:	2b01      	cmp	r3, #1
 80076de:	d108      	bne.n	80076f2 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80076e0:	7bbb      	ldrb	r3, [r7, #14]
 80076e2:	2b01      	cmp	r3, #1
 80076e4:	d105      	bne.n	80076f2 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80076e6:	7b7b      	ldrb	r3, [r7, #13]
 80076e8:	2b01      	cmp	r3, #1
 80076ea:	d102      	bne.n	80076f2 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80076ec:	7b3b      	ldrb	r3, [r7, #12]
 80076ee:	2b01      	cmp	r3, #1
 80076f0:	d001      	beq.n	80076f6 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 80076f2:	2301      	movs	r3, #1
 80076f4:	e03e      	b.n	8007774 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	2202      	movs	r2, #2
 80076fa:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	2202      	movs	r2, #2
 8007702:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	2202      	movs	r2, #2
 800770a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	2202      	movs	r2, #2
 8007712:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8007716:	683b      	ldr	r3, [r7, #0]
 8007718:	2b00      	cmp	r3, #0
 800771a:	d003      	beq.n	8007724 <HAL_TIM_Encoder_Start+0xc4>
 800771c:	683b      	ldr	r3, [r7, #0]
 800771e:	2b04      	cmp	r3, #4
 8007720:	d008      	beq.n	8007734 <HAL_TIM_Encoder_Start+0xd4>
 8007722:	e00f      	b.n	8007744 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	681b      	ldr	r3, [r3, #0]
 8007728:	2201      	movs	r2, #1
 800772a:	2100      	movs	r1, #0
 800772c:	4618      	mov	r0, r3
 800772e:	f000 fd45 	bl	80081bc <TIM_CCxChannelCmd>
      break;
 8007732:	e016      	b.n	8007762 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	681b      	ldr	r3, [r3, #0]
 8007738:	2201      	movs	r2, #1
 800773a:	2104      	movs	r1, #4
 800773c:	4618      	mov	r0, r3
 800773e:	f000 fd3d 	bl	80081bc <TIM_CCxChannelCmd>
      break;
 8007742:	e00e      	b.n	8007762 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	681b      	ldr	r3, [r3, #0]
 8007748:	2201      	movs	r2, #1
 800774a:	2100      	movs	r1, #0
 800774c:	4618      	mov	r0, r3
 800774e:	f000 fd35 	bl	80081bc <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	681b      	ldr	r3, [r3, #0]
 8007756:	2201      	movs	r2, #1
 8007758:	2104      	movs	r1, #4
 800775a:	4618      	mov	r0, r3
 800775c:	f000 fd2e 	bl	80081bc <TIM_CCxChannelCmd>
      break;
 8007760:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	681b      	ldr	r3, [r3, #0]
 8007766:	681a      	ldr	r2, [r3, #0]
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	681b      	ldr	r3, [r3, #0]
 800776c:	f042 0201 	orr.w	r2, r2, #1
 8007770:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8007772:	2300      	movs	r3, #0
}
 8007774:	4618      	mov	r0, r3
 8007776:	3710      	adds	r7, #16
 8007778:	46bd      	mov	sp, r7
 800777a:	bd80      	pop	{r7, pc}

0800777c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800777c:	b580      	push	{r7, lr}
 800777e:	b084      	sub	sp, #16
 8007780:	af00      	add	r7, sp, #0
 8007782:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	681b      	ldr	r3, [r3, #0]
 8007788:	68db      	ldr	r3, [r3, #12]
 800778a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	681b      	ldr	r3, [r3, #0]
 8007790:	691b      	ldr	r3, [r3, #16]
 8007792:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8007794:	68bb      	ldr	r3, [r7, #8]
 8007796:	f003 0302 	and.w	r3, r3, #2
 800779a:	2b00      	cmp	r3, #0
 800779c:	d020      	beq.n	80077e0 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800779e:	68fb      	ldr	r3, [r7, #12]
 80077a0:	f003 0302 	and.w	r3, r3, #2
 80077a4:	2b00      	cmp	r3, #0
 80077a6:	d01b      	beq.n	80077e0 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	681b      	ldr	r3, [r3, #0]
 80077ac:	f06f 0202 	mvn.w	r2, #2
 80077b0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	2201      	movs	r2, #1
 80077b6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	681b      	ldr	r3, [r3, #0]
 80077bc:	699b      	ldr	r3, [r3, #24]
 80077be:	f003 0303 	and.w	r3, r3, #3
 80077c2:	2b00      	cmp	r3, #0
 80077c4:	d003      	beq.n	80077ce <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80077c6:	6878      	ldr	r0, [r7, #4]
 80077c8:	f000 f9f8 	bl	8007bbc <HAL_TIM_IC_CaptureCallback>
 80077cc:	e005      	b.n	80077da <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80077ce:	6878      	ldr	r0, [r7, #4]
 80077d0:	f000 f9ea 	bl	8007ba8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80077d4:	6878      	ldr	r0, [r7, #4]
 80077d6:	f000 f9fb 	bl	8007bd0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	2200      	movs	r2, #0
 80077de:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80077e0:	68bb      	ldr	r3, [r7, #8]
 80077e2:	f003 0304 	and.w	r3, r3, #4
 80077e6:	2b00      	cmp	r3, #0
 80077e8:	d020      	beq.n	800782c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80077ea:	68fb      	ldr	r3, [r7, #12]
 80077ec:	f003 0304 	and.w	r3, r3, #4
 80077f0:	2b00      	cmp	r3, #0
 80077f2:	d01b      	beq.n	800782c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	681b      	ldr	r3, [r3, #0]
 80077f8:	f06f 0204 	mvn.w	r2, #4
 80077fc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	2202      	movs	r2, #2
 8007802:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	681b      	ldr	r3, [r3, #0]
 8007808:	699b      	ldr	r3, [r3, #24]
 800780a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800780e:	2b00      	cmp	r3, #0
 8007810:	d003      	beq.n	800781a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007812:	6878      	ldr	r0, [r7, #4]
 8007814:	f000 f9d2 	bl	8007bbc <HAL_TIM_IC_CaptureCallback>
 8007818:	e005      	b.n	8007826 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800781a:	6878      	ldr	r0, [r7, #4]
 800781c:	f000 f9c4 	bl	8007ba8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007820:	6878      	ldr	r0, [r7, #4]
 8007822:	f000 f9d5 	bl	8007bd0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	2200      	movs	r2, #0
 800782a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800782c:	68bb      	ldr	r3, [r7, #8]
 800782e:	f003 0308 	and.w	r3, r3, #8
 8007832:	2b00      	cmp	r3, #0
 8007834:	d020      	beq.n	8007878 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8007836:	68fb      	ldr	r3, [r7, #12]
 8007838:	f003 0308 	and.w	r3, r3, #8
 800783c:	2b00      	cmp	r3, #0
 800783e:	d01b      	beq.n	8007878 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	681b      	ldr	r3, [r3, #0]
 8007844:	f06f 0208 	mvn.w	r2, #8
 8007848:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	2204      	movs	r2, #4
 800784e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	681b      	ldr	r3, [r3, #0]
 8007854:	69db      	ldr	r3, [r3, #28]
 8007856:	f003 0303 	and.w	r3, r3, #3
 800785a:	2b00      	cmp	r3, #0
 800785c:	d003      	beq.n	8007866 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800785e:	6878      	ldr	r0, [r7, #4]
 8007860:	f000 f9ac 	bl	8007bbc <HAL_TIM_IC_CaptureCallback>
 8007864:	e005      	b.n	8007872 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007866:	6878      	ldr	r0, [r7, #4]
 8007868:	f000 f99e 	bl	8007ba8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800786c:	6878      	ldr	r0, [r7, #4]
 800786e:	f000 f9af 	bl	8007bd0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	2200      	movs	r2, #0
 8007876:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8007878:	68bb      	ldr	r3, [r7, #8]
 800787a:	f003 0310 	and.w	r3, r3, #16
 800787e:	2b00      	cmp	r3, #0
 8007880:	d020      	beq.n	80078c4 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8007882:	68fb      	ldr	r3, [r7, #12]
 8007884:	f003 0310 	and.w	r3, r3, #16
 8007888:	2b00      	cmp	r3, #0
 800788a:	d01b      	beq.n	80078c4 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	681b      	ldr	r3, [r3, #0]
 8007890:	f06f 0210 	mvn.w	r2, #16
 8007894:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	2208      	movs	r2, #8
 800789a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	681b      	ldr	r3, [r3, #0]
 80078a0:	69db      	ldr	r3, [r3, #28]
 80078a2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80078a6:	2b00      	cmp	r3, #0
 80078a8:	d003      	beq.n	80078b2 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80078aa:	6878      	ldr	r0, [r7, #4]
 80078ac:	f000 f986 	bl	8007bbc <HAL_TIM_IC_CaptureCallback>
 80078b0:	e005      	b.n	80078be <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80078b2:	6878      	ldr	r0, [r7, #4]
 80078b4:	f000 f978 	bl	8007ba8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80078b8:	6878      	ldr	r0, [r7, #4]
 80078ba:	f000 f989 	bl	8007bd0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	2200      	movs	r2, #0
 80078c2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80078c4:	68bb      	ldr	r3, [r7, #8]
 80078c6:	f003 0301 	and.w	r3, r3, #1
 80078ca:	2b00      	cmp	r3, #0
 80078cc:	d00c      	beq.n	80078e8 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80078ce:	68fb      	ldr	r3, [r7, #12]
 80078d0:	f003 0301 	and.w	r3, r3, #1
 80078d4:	2b00      	cmp	r3, #0
 80078d6:	d007      	beq.n	80078e8 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	681b      	ldr	r3, [r3, #0]
 80078dc:	f06f 0201 	mvn.w	r2, #1
 80078e0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80078e2:	6878      	ldr	r0, [r7, #4]
 80078e4:	f7fa fd0e 	bl	8002304 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80078e8:	68bb      	ldr	r3, [r7, #8]
 80078ea:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80078ee:	2b00      	cmp	r3, #0
 80078f0:	d00c      	beq.n	800790c <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80078f2:	68fb      	ldr	r3, [r7, #12]
 80078f4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80078f8:	2b00      	cmp	r3, #0
 80078fa:	d007      	beq.n	800790c <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	681b      	ldr	r3, [r3, #0]
 8007900:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8007904:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8007906:	6878      	ldr	r0, [r7, #4]
 8007908:	f000 fe04 	bl	8008514 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800790c:	68bb      	ldr	r3, [r7, #8]
 800790e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007912:	2b00      	cmp	r3, #0
 8007914:	d00c      	beq.n	8007930 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8007916:	68fb      	ldr	r3, [r7, #12]
 8007918:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800791c:	2b00      	cmp	r3, #0
 800791e:	d007      	beq.n	8007930 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	681b      	ldr	r3, [r3, #0]
 8007924:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8007928:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800792a:	6878      	ldr	r0, [r7, #4]
 800792c:	f000 fdfc 	bl	8008528 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8007930:	68bb      	ldr	r3, [r7, #8]
 8007932:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007936:	2b00      	cmp	r3, #0
 8007938:	d00c      	beq.n	8007954 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800793a:	68fb      	ldr	r3, [r7, #12]
 800793c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007940:	2b00      	cmp	r3, #0
 8007942:	d007      	beq.n	8007954 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	681b      	ldr	r3, [r3, #0]
 8007948:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800794c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800794e:	6878      	ldr	r0, [r7, #4]
 8007950:	f000 f948 	bl	8007be4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8007954:	68bb      	ldr	r3, [r7, #8]
 8007956:	f003 0320 	and.w	r3, r3, #32
 800795a:	2b00      	cmp	r3, #0
 800795c:	d00c      	beq.n	8007978 <HAL_TIM_IRQHandler+0x1fc>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800795e:	68fb      	ldr	r3, [r7, #12]
 8007960:	f003 0320 	and.w	r3, r3, #32
 8007964:	2b00      	cmp	r3, #0
 8007966:	d007      	beq.n	8007978 <HAL_TIM_IRQHandler+0x1fc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	681b      	ldr	r3, [r3, #0]
 800796c:	f06f 0220 	mvn.w	r2, #32
 8007970:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8007972:	6878      	ldr	r0, [r7, #4]
 8007974:	f000 fdc4 	bl	8008500 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007978:	bf00      	nop
 800797a:	3710      	adds	r7, #16
 800797c:	46bd      	mov	sp, r7
 800797e:	bd80      	pop	{r7, pc}

08007980 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8007980:	b580      	push	{r7, lr}
 8007982:	b086      	sub	sp, #24
 8007984:	af00      	add	r7, sp, #0
 8007986:	60f8      	str	r0, [r7, #12]
 8007988:	60b9      	str	r1, [r7, #8]
 800798a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800798c:	2300      	movs	r3, #0
 800798e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8007990:	68fb      	ldr	r3, [r7, #12]
 8007992:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007996:	2b01      	cmp	r3, #1
 8007998:	d101      	bne.n	800799e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800799a:	2302      	movs	r3, #2
 800799c:	e0ff      	b.n	8007b9e <HAL_TIM_PWM_ConfigChannel+0x21e>
 800799e:	68fb      	ldr	r3, [r7, #12]
 80079a0:	2201      	movs	r2, #1
 80079a2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	2b14      	cmp	r3, #20
 80079aa:	f200 80f0 	bhi.w	8007b8e <HAL_TIM_PWM_ConfigChannel+0x20e>
 80079ae:	a201      	add	r2, pc, #4	@ (adr r2, 80079b4 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80079b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80079b4:	08007a09 	.word	0x08007a09
 80079b8:	08007b8f 	.word	0x08007b8f
 80079bc:	08007b8f 	.word	0x08007b8f
 80079c0:	08007b8f 	.word	0x08007b8f
 80079c4:	08007a49 	.word	0x08007a49
 80079c8:	08007b8f 	.word	0x08007b8f
 80079cc:	08007b8f 	.word	0x08007b8f
 80079d0:	08007b8f 	.word	0x08007b8f
 80079d4:	08007a8b 	.word	0x08007a8b
 80079d8:	08007b8f 	.word	0x08007b8f
 80079dc:	08007b8f 	.word	0x08007b8f
 80079e0:	08007b8f 	.word	0x08007b8f
 80079e4:	08007acb 	.word	0x08007acb
 80079e8:	08007b8f 	.word	0x08007b8f
 80079ec:	08007b8f 	.word	0x08007b8f
 80079f0:	08007b8f 	.word	0x08007b8f
 80079f4:	08007b0d 	.word	0x08007b0d
 80079f8:	08007b8f 	.word	0x08007b8f
 80079fc:	08007b8f 	.word	0x08007b8f
 8007a00:	08007b8f 	.word	0x08007b8f
 8007a04:	08007b4d 	.word	0x08007b4d
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8007a08:	68fb      	ldr	r3, [r7, #12]
 8007a0a:	681b      	ldr	r3, [r3, #0]
 8007a0c:	68b9      	ldr	r1, [r7, #8]
 8007a0e:	4618      	mov	r0, r3
 8007a10:	f000 f956 	bl	8007cc0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8007a14:	68fb      	ldr	r3, [r7, #12]
 8007a16:	681b      	ldr	r3, [r3, #0]
 8007a18:	699a      	ldr	r2, [r3, #24]
 8007a1a:	68fb      	ldr	r3, [r7, #12]
 8007a1c:	681b      	ldr	r3, [r3, #0]
 8007a1e:	f042 0208 	orr.w	r2, r2, #8
 8007a22:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8007a24:	68fb      	ldr	r3, [r7, #12]
 8007a26:	681b      	ldr	r3, [r3, #0]
 8007a28:	699a      	ldr	r2, [r3, #24]
 8007a2a:	68fb      	ldr	r3, [r7, #12]
 8007a2c:	681b      	ldr	r3, [r3, #0]
 8007a2e:	f022 0204 	bic.w	r2, r2, #4
 8007a32:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8007a34:	68fb      	ldr	r3, [r7, #12]
 8007a36:	681b      	ldr	r3, [r3, #0]
 8007a38:	6999      	ldr	r1, [r3, #24]
 8007a3a:	68bb      	ldr	r3, [r7, #8]
 8007a3c:	691a      	ldr	r2, [r3, #16]
 8007a3e:	68fb      	ldr	r3, [r7, #12]
 8007a40:	681b      	ldr	r3, [r3, #0]
 8007a42:	430a      	orrs	r2, r1
 8007a44:	619a      	str	r2, [r3, #24]
      break;
 8007a46:	e0a5      	b.n	8007b94 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8007a48:	68fb      	ldr	r3, [r7, #12]
 8007a4a:	681b      	ldr	r3, [r3, #0]
 8007a4c:	68b9      	ldr	r1, [r7, #8]
 8007a4e:	4618      	mov	r0, r3
 8007a50:	f000 f9b2 	bl	8007db8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8007a54:	68fb      	ldr	r3, [r7, #12]
 8007a56:	681b      	ldr	r3, [r3, #0]
 8007a58:	699a      	ldr	r2, [r3, #24]
 8007a5a:	68fb      	ldr	r3, [r7, #12]
 8007a5c:	681b      	ldr	r3, [r3, #0]
 8007a5e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8007a62:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8007a64:	68fb      	ldr	r3, [r7, #12]
 8007a66:	681b      	ldr	r3, [r3, #0]
 8007a68:	699a      	ldr	r2, [r3, #24]
 8007a6a:	68fb      	ldr	r3, [r7, #12]
 8007a6c:	681b      	ldr	r3, [r3, #0]
 8007a6e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007a72:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8007a74:	68fb      	ldr	r3, [r7, #12]
 8007a76:	681b      	ldr	r3, [r3, #0]
 8007a78:	6999      	ldr	r1, [r3, #24]
 8007a7a:	68bb      	ldr	r3, [r7, #8]
 8007a7c:	691b      	ldr	r3, [r3, #16]
 8007a7e:	021a      	lsls	r2, r3, #8
 8007a80:	68fb      	ldr	r3, [r7, #12]
 8007a82:	681b      	ldr	r3, [r3, #0]
 8007a84:	430a      	orrs	r2, r1
 8007a86:	619a      	str	r2, [r3, #24]
      break;
 8007a88:	e084      	b.n	8007b94 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8007a8a:	68fb      	ldr	r3, [r7, #12]
 8007a8c:	681b      	ldr	r3, [r3, #0]
 8007a8e:	68b9      	ldr	r1, [r7, #8]
 8007a90:	4618      	mov	r0, r3
 8007a92:	f000 fa0b 	bl	8007eac <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8007a96:	68fb      	ldr	r3, [r7, #12]
 8007a98:	681b      	ldr	r3, [r3, #0]
 8007a9a:	69da      	ldr	r2, [r3, #28]
 8007a9c:	68fb      	ldr	r3, [r7, #12]
 8007a9e:	681b      	ldr	r3, [r3, #0]
 8007aa0:	f042 0208 	orr.w	r2, r2, #8
 8007aa4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8007aa6:	68fb      	ldr	r3, [r7, #12]
 8007aa8:	681b      	ldr	r3, [r3, #0]
 8007aaa:	69da      	ldr	r2, [r3, #28]
 8007aac:	68fb      	ldr	r3, [r7, #12]
 8007aae:	681b      	ldr	r3, [r3, #0]
 8007ab0:	f022 0204 	bic.w	r2, r2, #4
 8007ab4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8007ab6:	68fb      	ldr	r3, [r7, #12]
 8007ab8:	681b      	ldr	r3, [r3, #0]
 8007aba:	69d9      	ldr	r1, [r3, #28]
 8007abc:	68bb      	ldr	r3, [r7, #8]
 8007abe:	691a      	ldr	r2, [r3, #16]
 8007ac0:	68fb      	ldr	r3, [r7, #12]
 8007ac2:	681b      	ldr	r3, [r3, #0]
 8007ac4:	430a      	orrs	r2, r1
 8007ac6:	61da      	str	r2, [r3, #28]
      break;
 8007ac8:	e064      	b.n	8007b94 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8007aca:	68fb      	ldr	r3, [r7, #12]
 8007acc:	681b      	ldr	r3, [r3, #0]
 8007ace:	68b9      	ldr	r1, [r7, #8]
 8007ad0:	4618      	mov	r0, r3
 8007ad2:	f000 fa63 	bl	8007f9c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8007ad6:	68fb      	ldr	r3, [r7, #12]
 8007ad8:	681b      	ldr	r3, [r3, #0]
 8007ada:	69da      	ldr	r2, [r3, #28]
 8007adc:	68fb      	ldr	r3, [r7, #12]
 8007ade:	681b      	ldr	r3, [r3, #0]
 8007ae0:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8007ae4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8007ae6:	68fb      	ldr	r3, [r7, #12]
 8007ae8:	681b      	ldr	r3, [r3, #0]
 8007aea:	69da      	ldr	r2, [r3, #28]
 8007aec:	68fb      	ldr	r3, [r7, #12]
 8007aee:	681b      	ldr	r3, [r3, #0]
 8007af0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007af4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8007af6:	68fb      	ldr	r3, [r7, #12]
 8007af8:	681b      	ldr	r3, [r3, #0]
 8007afa:	69d9      	ldr	r1, [r3, #28]
 8007afc:	68bb      	ldr	r3, [r7, #8]
 8007afe:	691b      	ldr	r3, [r3, #16]
 8007b00:	021a      	lsls	r2, r3, #8
 8007b02:	68fb      	ldr	r3, [r7, #12]
 8007b04:	681b      	ldr	r3, [r3, #0]
 8007b06:	430a      	orrs	r2, r1
 8007b08:	61da      	str	r2, [r3, #28]
      break;
 8007b0a:	e043      	b.n	8007b94 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8007b0c:	68fb      	ldr	r3, [r7, #12]
 8007b0e:	681b      	ldr	r3, [r3, #0]
 8007b10:	68b9      	ldr	r1, [r7, #8]
 8007b12:	4618      	mov	r0, r3
 8007b14:	f000 faa0 	bl	8008058 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8007b18:	68fb      	ldr	r3, [r7, #12]
 8007b1a:	681b      	ldr	r3, [r3, #0]
 8007b1c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8007b1e:	68fb      	ldr	r3, [r7, #12]
 8007b20:	681b      	ldr	r3, [r3, #0]
 8007b22:	f042 0208 	orr.w	r2, r2, #8
 8007b26:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8007b28:	68fb      	ldr	r3, [r7, #12]
 8007b2a:	681b      	ldr	r3, [r3, #0]
 8007b2c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8007b2e:	68fb      	ldr	r3, [r7, #12]
 8007b30:	681b      	ldr	r3, [r3, #0]
 8007b32:	f022 0204 	bic.w	r2, r2, #4
 8007b36:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8007b38:	68fb      	ldr	r3, [r7, #12]
 8007b3a:	681b      	ldr	r3, [r3, #0]
 8007b3c:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8007b3e:	68bb      	ldr	r3, [r7, #8]
 8007b40:	691a      	ldr	r2, [r3, #16]
 8007b42:	68fb      	ldr	r3, [r7, #12]
 8007b44:	681b      	ldr	r3, [r3, #0]
 8007b46:	430a      	orrs	r2, r1
 8007b48:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8007b4a:	e023      	b.n	8007b94 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8007b4c:	68fb      	ldr	r3, [r7, #12]
 8007b4e:	681b      	ldr	r3, [r3, #0]
 8007b50:	68b9      	ldr	r1, [r7, #8]
 8007b52:	4618      	mov	r0, r3
 8007b54:	f000 fad8 	bl	8008108 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8007b58:	68fb      	ldr	r3, [r7, #12]
 8007b5a:	681b      	ldr	r3, [r3, #0]
 8007b5c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8007b5e:	68fb      	ldr	r3, [r7, #12]
 8007b60:	681b      	ldr	r3, [r3, #0]
 8007b62:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8007b66:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8007b68:	68fb      	ldr	r3, [r7, #12]
 8007b6a:	681b      	ldr	r3, [r3, #0]
 8007b6c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8007b6e:	68fb      	ldr	r3, [r7, #12]
 8007b70:	681b      	ldr	r3, [r3, #0]
 8007b72:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007b76:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8007b78:	68fb      	ldr	r3, [r7, #12]
 8007b7a:	681b      	ldr	r3, [r3, #0]
 8007b7c:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8007b7e:	68bb      	ldr	r3, [r7, #8]
 8007b80:	691b      	ldr	r3, [r3, #16]
 8007b82:	021a      	lsls	r2, r3, #8
 8007b84:	68fb      	ldr	r3, [r7, #12]
 8007b86:	681b      	ldr	r3, [r3, #0]
 8007b88:	430a      	orrs	r2, r1
 8007b8a:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8007b8c:	e002      	b.n	8007b94 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8007b8e:	2301      	movs	r3, #1
 8007b90:	75fb      	strb	r3, [r7, #23]
      break;
 8007b92:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8007b94:	68fb      	ldr	r3, [r7, #12]
 8007b96:	2200      	movs	r2, #0
 8007b98:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8007b9c:	7dfb      	ldrb	r3, [r7, #23]
}
 8007b9e:	4618      	mov	r0, r3
 8007ba0:	3718      	adds	r7, #24
 8007ba2:	46bd      	mov	sp, r7
 8007ba4:	bd80      	pop	{r7, pc}
 8007ba6:	bf00      	nop

08007ba8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007ba8:	b480      	push	{r7}
 8007baa:	b083      	sub	sp, #12
 8007bac:	af00      	add	r7, sp, #0
 8007bae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007bb0:	bf00      	nop
 8007bb2:	370c      	adds	r7, #12
 8007bb4:	46bd      	mov	sp, r7
 8007bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bba:	4770      	bx	lr

08007bbc <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8007bbc:	b480      	push	{r7}
 8007bbe:	b083      	sub	sp, #12
 8007bc0:	af00      	add	r7, sp, #0
 8007bc2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8007bc4:	bf00      	nop
 8007bc6:	370c      	adds	r7, #12
 8007bc8:	46bd      	mov	sp, r7
 8007bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bce:	4770      	bx	lr

08007bd0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007bd0:	b480      	push	{r7}
 8007bd2:	b083      	sub	sp, #12
 8007bd4:	af00      	add	r7, sp, #0
 8007bd6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007bd8:	bf00      	nop
 8007bda:	370c      	adds	r7, #12
 8007bdc:	46bd      	mov	sp, r7
 8007bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007be2:	4770      	bx	lr

08007be4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007be4:	b480      	push	{r7}
 8007be6:	b083      	sub	sp, #12
 8007be8:	af00      	add	r7, sp, #0
 8007bea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007bec:	bf00      	nop
 8007bee:	370c      	adds	r7, #12
 8007bf0:	46bd      	mov	sp, r7
 8007bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bf6:	4770      	bx	lr

08007bf8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8007bf8:	b480      	push	{r7}
 8007bfa:	b085      	sub	sp, #20
 8007bfc:	af00      	add	r7, sp, #0
 8007bfe:	6078      	str	r0, [r7, #4]
 8007c00:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	681b      	ldr	r3, [r3, #0]
 8007c06:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	4a2a      	ldr	r2, [pc, #168]	@ (8007cb4 <TIM_Base_SetConfig+0xbc>)
 8007c0c:	4293      	cmp	r3, r2
 8007c0e:	d003      	beq.n	8007c18 <TIM_Base_SetConfig+0x20>
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007c16:	d108      	bne.n	8007c2a <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007c18:	68fb      	ldr	r3, [r7, #12]
 8007c1a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007c1e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007c20:	683b      	ldr	r3, [r7, #0]
 8007c22:	685b      	ldr	r3, [r3, #4]
 8007c24:	68fa      	ldr	r2, [r7, #12]
 8007c26:	4313      	orrs	r3, r2
 8007c28:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	4a21      	ldr	r2, [pc, #132]	@ (8007cb4 <TIM_Base_SetConfig+0xbc>)
 8007c2e:	4293      	cmp	r3, r2
 8007c30:	d00b      	beq.n	8007c4a <TIM_Base_SetConfig+0x52>
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007c38:	d007      	beq.n	8007c4a <TIM_Base_SetConfig+0x52>
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	4a1e      	ldr	r2, [pc, #120]	@ (8007cb8 <TIM_Base_SetConfig+0xc0>)
 8007c3e:	4293      	cmp	r3, r2
 8007c40:	d003      	beq.n	8007c4a <TIM_Base_SetConfig+0x52>
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	4a1d      	ldr	r2, [pc, #116]	@ (8007cbc <TIM_Base_SetConfig+0xc4>)
 8007c46:	4293      	cmp	r3, r2
 8007c48:	d108      	bne.n	8007c5c <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007c4a:	68fb      	ldr	r3, [r7, #12]
 8007c4c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007c50:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007c52:	683b      	ldr	r3, [r7, #0]
 8007c54:	68db      	ldr	r3, [r3, #12]
 8007c56:	68fa      	ldr	r2, [r7, #12]
 8007c58:	4313      	orrs	r3, r2
 8007c5a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007c5c:	68fb      	ldr	r3, [r7, #12]
 8007c5e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8007c62:	683b      	ldr	r3, [r7, #0]
 8007c64:	695b      	ldr	r3, [r3, #20]
 8007c66:	4313      	orrs	r3, r2
 8007c68:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	68fa      	ldr	r2, [r7, #12]
 8007c6e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007c70:	683b      	ldr	r3, [r7, #0]
 8007c72:	689a      	ldr	r2, [r3, #8]
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007c78:	683b      	ldr	r3, [r7, #0]
 8007c7a:	681a      	ldr	r2, [r3, #0]
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	4a0c      	ldr	r2, [pc, #48]	@ (8007cb4 <TIM_Base_SetConfig+0xbc>)
 8007c84:	4293      	cmp	r3, r2
 8007c86:	d007      	beq.n	8007c98 <TIM_Base_SetConfig+0xa0>
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	4a0b      	ldr	r2, [pc, #44]	@ (8007cb8 <TIM_Base_SetConfig+0xc0>)
 8007c8c:	4293      	cmp	r3, r2
 8007c8e:	d003      	beq.n	8007c98 <TIM_Base_SetConfig+0xa0>
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	4a0a      	ldr	r2, [pc, #40]	@ (8007cbc <TIM_Base_SetConfig+0xc4>)
 8007c94:	4293      	cmp	r3, r2
 8007c96:	d103      	bne.n	8007ca0 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007c98:	683b      	ldr	r3, [r7, #0]
 8007c9a:	691a      	ldr	r2, [r3, #16]
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	2201      	movs	r2, #1
 8007ca4:	615a      	str	r2, [r3, #20]
}
 8007ca6:	bf00      	nop
 8007ca8:	3714      	adds	r7, #20
 8007caa:	46bd      	mov	sp, r7
 8007cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cb0:	4770      	bx	lr
 8007cb2:	bf00      	nop
 8007cb4:	40012c00 	.word	0x40012c00
 8007cb8:	40014000 	.word	0x40014000
 8007cbc:	40014400 	.word	0x40014400

08007cc0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007cc0:	b480      	push	{r7}
 8007cc2:	b087      	sub	sp, #28
 8007cc4:	af00      	add	r7, sp, #0
 8007cc6:	6078      	str	r0, [r7, #4]
 8007cc8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007cca:	687b      	ldr	r3, [r7, #4]
 8007ccc:	6a1b      	ldr	r3, [r3, #32]
 8007cce:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	6a1b      	ldr	r3, [r3, #32]
 8007cd4:	f023 0201 	bic.w	r2, r3, #1
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	685b      	ldr	r3, [r3, #4]
 8007ce0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	699b      	ldr	r3, [r3, #24]
 8007ce6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8007ce8:	68fb      	ldr	r3, [r7, #12]
 8007cea:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007cee:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007cf2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8007cf4:	68fb      	ldr	r3, [r7, #12]
 8007cf6:	f023 0303 	bic.w	r3, r3, #3
 8007cfa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007cfc:	683b      	ldr	r3, [r7, #0]
 8007cfe:	681b      	ldr	r3, [r3, #0]
 8007d00:	68fa      	ldr	r2, [r7, #12]
 8007d02:	4313      	orrs	r3, r2
 8007d04:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8007d06:	697b      	ldr	r3, [r7, #20]
 8007d08:	f023 0302 	bic.w	r3, r3, #2
 8007d0c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8007d0e:	683b      	ldr	r3, [r7, #0]
 8007d10:	689b      	ldr	r3, [r3, #8]
 8007d12:	697a      	ldr	r2, [r7, #20]
 8007d14:	4313      	orrs	r3, r2
 8007d16:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	4a24      	ldr	r2, [pc, #144]	@ (8007dac <TIM_OC1_SetConfig+0xec>)
 8007d1c:	4293      	cmp	r3, r2
 8007d1e:	d007      	beq.n	8007d30 <TIM_OC1_SetConfig+0x70>
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	4a23      	ldr	r2, [pc, #140]	@ (8007db0 <TIM_OC1_SetConfig+0xf0>)
 8007d24:	4293      	cmp	r3, r2
 8007d26:	d003      	beq.n	8007d30 <TIM_OC1_SetConfig+0x70>
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	4a22      	ldr	r2, [pc, #136]	@ (8007db4 <TIM_OC1_SetConfig+0xf4>)
 8007d2c:	4293      	cmp	r3, r2
 8007d2e:	d10c      	bne.n	8007d4a <TIM_OC1_SetConfig+0x8a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8007d30:	697b      	ldr	r3, [r7, #20]
 8007d32:	f023 0308 	bic.w	r3, r3, #8
 8007d36:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8007d38:	683b      	ldr	r3, [r7, #0]
 8007d3a:	68db      	ldr	r3, [r3, #12]
 8007d3c:	697a      	ldr	r2, [r7, #20]
 8007d3e:	4313      	orrs	r3, r2
 8007d40:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8007d42:	697b      	ldr	r3, [r7, #20]
 8007d44:	f023 0304 	bic.w	r3, r3, #4
 8007d48:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	4a17      	ldr	r2, [pc, #92]	@ (8007dac <TIM_OC1_SetConfig+0xec>)
 8007d4e:	4293      	cmp	r3, r2
 8007d50:	d007      	beq.n	8007d62 <TIM_OC1_SetConfig+0xa2>
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	4a16      	ldr	r2, [pc, #88]	@ (8007db0 <TIM_OC1_SetConfig+0xf0>)
 8007d56:	4293      	cmp	r3, r2
 8007d58:	d003      	beq.n	8007d62 <TIM_OC1_SetConfig+0xa2>
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	4a15      	ldr	r2, [pc, #84]	@ (8007db4 <TIM_OC1_SetConfig+0xf4>)
 8007d5e:	4293      	cmp	r3, r2
 8007d60:	d111      	bne.n	8007d86 <TIM_OC1_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8007d62:	693b      	ldr	r3, [r7, #16]
 8007d64:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007d68:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8007d6a:	693b      	ldr	r3, [r7, #16]
 8007d6c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8007d70:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8007d72:	683b      	ldr	r3, [r7, #0]
 8007d74:	695b      	ldr	r3, [r3, #20]
 8007d76:	693a      	ldr	r2, [r7, #16]
 8007d78:	4313      	orrs	r3, r2
 8007d7a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8007d7c:	683b      	ldr	r3, [r7, #0]
 8007d7e:	699b      	ldr	r3, [r3, #24]
 8007d80:	693a      	ldr	r2, [r7, #16]
 8007d82:	4313      	orrs	r3, r2
 8007d84:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	693a      	ldr	r2, [r7, #16]
 8007d8a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	68fa      	ldr	r2, [r7, #12]
 8007d90:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8007d92:	683b      	ldr	r3, [r7, #0]
 8007d94:	685a      	ldr	r2, [r3, #4]
 8007d96:	687b      	ldr	r3, [r7, #4]
 8007d98:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	697a      	ldr	r2, [r7, #20]
 8007d9e:	621a      	str	r2, [r3, #32]
}
 8007da0:	bf00      	nop
 8007da2:	371c      	adds	r7, #28
 8007da4:	46bd      	mov	sp, r7
 8007da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007daa:	4770      	bx	lr
 8007dac:	40012c00 	.word	0x40012c00
 8007db0:	40014000 	.word	0x40014000
 8007db4:	40014400 	.word	0x40014400

08007db8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007db8:	b480      	push	{r7}
 8007dba:	b087      	sub	sp, #28
 8007dbc:	af00      	add	r7, sp, #0
 8007dbe:	6078      	str	r0, [r7, #4]
 8007dc0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007dc2:	687b      	ldr	r3, [r7, #4]
 8007dc4:	6a1b      	ldr	r3, [r3, #32]
 8007dc6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	6a1b      	ldr	r3, [r3, #32]
 8007dcc:	f023 0210 	bic.w	r2, r3, #16
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	685b      	ldr	r3, [r3, #4]
 8007dd8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	699b      	ldr	r3, [r3, #24]
 8007dde:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8007de0:	68fb      	ldr	r3, [r7, #12]
 8007de2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8007de6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007dea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8007dec:	68fb      	ldr	r3, [r7, #12]
 8007dee:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007df2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007df4:	683b      	ldr	r3, [r7, #0]
 8007df6:	681b      	ldr	r3, [r3, #0]
 8007df8:	021b      	lsls	r3, r3, #8
 8007dfa:	68fa      	ldr	r2, [r7, #12]
 8007dfc:	4313      	orrs	r3, r2
 8007dfe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8007e00:	697b      	ldr	r3, [r7, #20]
 8007e02:	f023 0320 	bic.w	r3, r3, #32
 8007e06:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8007e08:	683b      	ldr	r3, [r7, #0]
 8007e0a:	689b      	ldr	r3, [r3, #8]
 8007e0c:	011b      	lsls	r3, r3, #4
 8007e0e:	697a      	ldr	r2, [r7, #20]
 8007e10:	4313      	orrs	r3, r2
 8007e12:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	4a22      	ldr	r2, [pc, #136]	@ (8007ea0 <TIM_OC2_SetConfig+0xe8>)
 8007e18:	4293      	cmp	r3, r2
 8007e1a:	d10d      	bne.n	8007e38 <TIM_OC2_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8007e1c:	697b      	ldr	r3, [r7, #20]
 8007e1e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007e22:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8007e24:	683b      	ldr	r3, [r7, #0]
 8007e26:	68db      	ldr	r3, [r3, #12]
 8007e28:	011b      	lsls	r3, r3, #4
 8007e2a:	697a      	ldr	r2, [r7, #20]
 8007e2c:	4313      	orrs	r3, r2
 8007e2e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8007e30:	697b      	ldr	r3, [r7, #20]
 8007e32:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007e36:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	4a19      	ldr	r2, [pc, #100]	@ (8007ea0 <TIM_OC2_SetConfig+0xe8>)
 8007e3c:	4293      	cmp	r3, r2
 8007e3e:	d007      	beq.n	8007e50 <TIM_OC2_SetConfig+0x98>
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	4a18      	ldr	r2, [pc, #96]	@ (8007ea4 <TIM_OC2_SetConfig+0xec>)
 8007e44:	4293      	cmp	r3, r2
 8007e46:	d003      	beq.n	8007e50 <TIM_OC2_SetConfig+0x98>
 8007e48:	687b      	ldr	r3, [r7, #4]
 8007e4a:	4a17      	ldr	r2, [pc, #92]	@ (8007ea8 <TIM_OC2_SetConfig+0xf0>)
 8007e4c:	4293      	cmp	r3, r2
 8007e4e:	d113      	bne.n	8007e78 <TIM_OC2_SetConfig+0xc0>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8007e50:	693b      	ldr	r3, [r7, #16]
 8007e52:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8007e56:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8007e58:	693b      	ldr	r3, [r7, #16]
 8007e5a:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8007e5e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8007e60:	683b      	ldr	r3, [r7, #0]
 8007e62:	695b      	ldr	r3, [r3, #20]
 8007e64:	009b      	lsls	r3, r3, #2
 8007e66:	693a      	ldr	r2, [r7, #16]
 8007e68:	4313      	orrs	r3, r2
 8007e6a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8007e6c:	683b      	ldr	r3, [r7, #0]
 8007e6e:	699b      	ldr	r3, [r3, #24]
 8007e70:	009b      	lsls	r3, r3, #2
 8007e72:	693a      	ldr	r2, [r7, #16]
 8007e74:	4313      	orrs	r3, r2
 8007e76:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	693a      	ldr	r2, [r7, #16]
 8007e7c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	68fa      	ldr	r2, [r7, #12]
 8007e82:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8007e84:	683b      	ldr	r3, [r7, #0]
 8007e86:	685a      	ldr	r2, [r3, #4]
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	697a      	ldr	r2, [r7, #20]
 8007e90:	621a      	str	r2, [r3, #32]
}
 8007e92:	bf00      	nop
 8007e94:	371c      	adds	r7, #28
 8007e96:	46bd      	mov	sp, r7
 8007e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e9c:	4770      	bx	lr
 8007e9e:	bf00      	nop
 8007ea0:	40012c00 	.word	0x40012c00
 8007ea4:	40014000 	.word	0x40014000
 8007ea8:	40014400 	.word	0x40014400

08007eac <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007eac:	b480      	push	{r7}
 8007eae:	b087      	sub	sp, #28
 8007eb0:	af00      	add	r7, sp, #0
 8007eb2:	6078      	str	r0, [r7, #4]
 8007eb4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007eb6:	687b      	ldr	r3, [r7, #4]
 8007eb8:	6a1b      	ldr	r3, [r3, #32]
 8007eba:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	6a1b      	ldr	r3, [r3, #32]
 8007ec0:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007ec8:	687b      	ldr	r3, [r7, #4]
 8007eca:	685b      	ldr	r3, [r3, #4]
 8007ecc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007ece:	687b      	ldr	r3, [r7, #4]
 8007ed0:	69db      	ldr	r3, [r3, #28]
 8007ed2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8007ed4:	68fb      	ldr	r3, [r7, #12]
 8007ed6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007eda:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007ede:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8007ee0:	68fb      	ldr	r3, [r7, #12]
 8007ee2:	f023 0303 	bic.w	r3, r3, #3
 8007ee6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007ee8:	683b      	ldr	r3, [r7, #0]
 8007eea:	681b      	ldr	r3, [r3, #0]
 8007eec:	68fa      	ldr	r2, [r7, #12]
 8007eee:	4313      	orrs	r3, r2
 8007ef0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8007ef2:	697b      	ldr	r3, [r7, #20]
 8007ef4:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8007ef8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8007efa:	683b      	ldr	r3, [r7, #0]
 8007efc:	689b      	ldr	r3, [r3, #8]
 8007efe:	021b      	lsls	r3, r3, #8
 8007f00:	697a      	ldr	r2, [r7, #20]
 8007f02:	4313      	orrs	r3, r2
 8007f04:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8007f06:	687b      	ldr	r3, [r7, #4]
 8007f08:	4a21      	ldr	r2, [pc, #132]	@ (8007f90 <TIM_OC3_SetConfig+0xe4>)
 8007f0a:	4293      	cmp	r3, r2
 8007f0c:	d10d      	bne.n	8007f2a <TIM_OC3_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8007f0e:	697b      	ldr	r3, [r7, #20]
 8007f10:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8007f14:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8007f16:	683b      	ldr	r3, [r7, #0]
 8007f18:	68db      	ldr	r3, [r3, #12]
 8007f1a:	021b      	lsls	r3, r3, #8
 8007f1c:	697a      	ldr	r2, [r7, #20]
 8007f1e:	4313      	orrs	r3, r2
 8007f20:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8007f22:	697b      	ldr	r3, [r7, #20]
 8007f24:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8007f28:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007f2a:	687b      	ldr	r3, [r7, #4]
 8007f2c:	4a18      	ldr	r2, [pc, #96]	@ (8007f90 <TIM_OC3_SetConfig+0xe4>)
 8007f2e:	4293      	cmp	r3, r2
 8007f30:	d007      	beq.n	8007f42 <TIM_OC3_SetConfig+0x96>
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	4a17      	ldr	r2, [pc, #92]	@ (8007f94 <TIM_OC3_SetConfig+0xe8>)
 8007f36:	4293      	cmp	r3, r2
 8007f38:	d003      	beq.n	8007f42 <TIM_OC3_SetConfig+0x96>
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	4a16      	ldr	r2, [pc, #88]	@ (8007f98 <TIM_OC3_SetConfig+0xec>)
 8007f3e:	4293      	cmp	r3, r2
 8007f40:	d113      	bne.n	8007f6a <TIM_OC3_SetConfig+0xbe>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8007f42:	693b      	ldr	r3, [r7, #16]
 8007f44:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8007f48:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8007f4a:	693b      	ldr	r3, [r7, #16]
 8007f4c:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8007f50:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8007f52:	683b      	ldr	r3, [r7, #0]
 8007f54:	695b      	ldr	r3, [r3, #20]
 8007f56:	011b      	lsls	r3, r3, #4
 8007f58:	693a      	ldr	r2, [r7, #16]
 8007f5a:	4313      	orrs	r3, r2
 8007f5c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8007f5e:	683b      	ldr	r3, [r7, #0]
 8007f60:	699b      	ldr	r3, [r3, #24]
 8007f62:	011b      	lsls	r3, r3, #4
 8007f64:	693a      	ldr	r2, [r7, #16]
 8007f66:	4313      	orrs	r3, r2
 8007f68:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	693a      	ldr	r2, [r7, #16]
 8007f6e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007f70:	687b      	ldr	r3, [r7, #4]
 8007f72:	68fa      	ldr	r2, [r7, #12]
 8007f74:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8007f76:	683b      	ldr	r3, [r7, #0]
 8007f78:	685a      	ldr	r2, [r3, #4]
 8007f7a:	687b      	ldr	r3, [r7, #4]
 8007f7c:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007f7e:	687b      	ldr	r3, [r7, #4]
 8007f80:	697a      	ldr	r2, [r7, #20]
 8007f82:	621a      	str	r2, [r3, #32]
}
 8007f84:	bf00      	nop
 8007f86:	371c      	adds	r7, #28
 8007f88:	46bd      	mov	sp, r7
 8007f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f8e:	4770      	bx	lr
 8007f90:	40012c00 	.word	0x40012c00
 8007f94:	40014000 	.word	0x40014000
 8007f98:	40014400 	.word	0x40014400

08007f9c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007f9c:	b480      	push	{r7}
 8007f9e:	b087      	sub	sp, #28
 8007fa0:	af00      	add	r7, sp, #0
 8007fa2:	6078      	str	r0, [r7, #4]
 8007fa4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007fa6:	687b      	ldr	r3, [r7, #4]
 8007fa8:	6a1b      	ldr	r3, [r3, #32]
 8007faa:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	6a1b      	ldr	r3, [r3, #32]
 8007fb0:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007fb8:	687b      	ldr	r3, [r7, #4]
 8007fba:	685b      	ldr	r3, [r3, #4]
 8007fbc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007fbe:	687b      	ldr	r3, [r7, #4]
 8007fc0:	69db      	ldr	r3, [r3, #28]
 8007fc2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8007fc4:	68fb      	ldr	r3, [r7, #12]
 8007fc6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8007fca:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007fce:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8007fd0:	68fb      	ldr	r3, [r7, #12]
 8007fd2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007fd6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007fd8:	683b      	ldr	r3, [r7, #0]
 8007fda:	681b      	ldr	r3, [r3, #0]
 8007fdc:	021b      	lsls	r3, r3, #8
 8007fde:	68fa      	ldr	r2, [r7, #12]
 8007fe0:	4313      	orrs	r3, r2
 8007fe2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8007fe4:	693b      	ldr	r3, [r7, #16]
 8007fe6:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8007fea:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007fec:	683b      	ldr	r3, [r7, #0]
 8007fee:	689b      	ldr	r3, [r3, #8]
 8007ff0:	031b      	lsls	r3, r3, #12
 8007ff2:	693a      	ldr	r2, [r7, #16]
 8007ff4:	4313      	orrs	r3, r2
 8007ff6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007ff8:	687b      	ldr	r3, [r7, #4]
 8007ffa:	4a14      	ldr	r2, [pc, #80]	@ (800804c <TIM_OC4_SetConfig+0xb0>)
 8007ffc:	4293      	cmp	r3, r2
 8007ffe:	d007      	beq.n	8008010 <TIM_OC4_SetConfig+0x74>
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	4a13      	ldr	r2, [pc, #76]	@ (8008050 <TIM_OC4_SetConfig+0xb4>)
 8008004:	4293      	cmp	r3, r2
 8008006:	d003      	beq.n	8008010 <TIM_OC4_SetConfig+0x74>
 8008008:	687b      	ldr	r3, [r7, #4]
 800800a:	4a12      	ldr	r2, [pc, #72]	@ (8008054 <TIM_OC4_SetConfig+0xb8>)
 800800c:	4293      	cmp	r3, r2
 800800e:	d109      	bne.n	8008024 <TIM_OC4_SetConfig+0x88>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8008010:	697b      	ldr	r3, [r7, #20]
 8008012:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8008016:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8008018:	683b      	ldr	r3, [r7, #0]
 800801a:	695b      	ldr	r3, [r3, #20]
 800801c:	019b      	lsls	r3, r3, #6
 800801e:	697a      	ldr	r2, [r7, #20]
 8008020:	4313      	orrs	r3, r2
 8008022:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	697a      	ldr	r2, [r7, #20]
 8008028:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	68fa      	ldr	r2, [r7, #12]
 800802e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8008030:	683b      	ldr	r3, [r7, #0]
 8008032:	685a      	ldr	r2, [r3, #4]
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	693a      	ldr	r2, [r7, #16]
 800803c:	621a      	str	r2, [r3, #32]
}
 800803e:	bf00      	nop
 8008040:	371c      	adds	r7, #28
 8008042:	46bd      	mov	sp, r7
 8008044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008048:	4770      	bx	lr
 800804a:	bf00      	nop
 800804c:	40012c00 	.word	0x40012c00
 8008050:	40014000 	.word	0x40014000
 8008054:	40014400 	.word	0x40014400

08008058 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8008058:	b480      	push	{r7}
 800805a:	b087      	sub	sp, #28
 800805c:	af00      	add	r7, sp, #0
 800805e:	6078      	str	r0, [r7, #4]
 8008060:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	6a1b      	ldr	r3, [r3, #32]
 8008066:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	6a1b      	ldr	r3, [r3, #32]
 800806c:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008074:	687b      	ldr	r3, [r7, #4]
 8008076:	685b      	ldr	r3, [r3, #4]
 8008078:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800807a:	687b      	ldr	r3, [r7, #4]
 800807c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800807e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8008080:	68fb      	ldr	r3, [r7, #12]
 8008082:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8008086:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800808a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800808c:	683b      	ldr	r3, [r7, #0]
 800808e:	681b      	ldr	r3, [r3, #0]
 8008090:	68fa      	ldr	r2, [r7, #12]
 8008092:	4313      	orrs	r3, r2
 8008094:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8008096:	693b      	ldr	r3, [r7, #16]
 8008098:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 800809c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800809e:	683b      	ldr	r3, [r7, #0]
 80080a0:	689b      	ldr	r3, [r3, #8]
 80080a2:	041b      	lsls	r3, r3, #16
 80080a4:	693a      	ldr	r2, [r7, #16]
 80080a6:	4313      	orrs	r3, r2
 80080a8:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80080aa:	687b      	ldr	r3, [r7, #4]
 80080ac:	4a13      	ldr	r2, [pc, #76]	@ (80080fc <TIM_OC5_SetConfig+0xa4>)
 80080ae:	4293      	cmp	r3, r2
 80080b0:	d007      	beq.n	80080c2 <TIM_OC5_SetConfig+0x6a>
 80080b2:	687b      	ldr	r3, [r7, #4]
 80080b4:	4a12      	ldr	r2, [pc, #72]	@ (8008100 <TIM_OC5_SetConfig+0xa8>)
 80080b6:	4293      	cmp	r3, r2
 80080b8:	d003      	beq.n	80080c2 <TIM_OC5_SetConfig+0x6a>
 80080ba:	687b      	ldr	r3, [r7, #4]
 80080bc:	4a11      	ldr	r2, [pc, #68]	@ (8008104 <TIM_OC5_SetConfig+0xac>)
 80080be:	4293      	cmp	r3, r2
 80080c0:	d109      	bne.n	80080d6 <TIM_OC5_SetConfig+0x7e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80080c2:	697b      	ldr	r3, [r7, #20]
 80080c4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80080c8:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80080ca:	683b      	ldr	r3, [r7, #0]
 80080cc:	695b      	ldr	r3, [r3, #20]
 80080ce:	021b      	lsls	r3, r3, #8
 80080d0:	697a      	ldr	r2, [r7, #20]
 80080d2:	4313      	orrs	r3, r2
 80080d4:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80080d6:	687b      	ldr	r3, [r7, #4]
 80080d8:	697a      	ldr	r2, [r7, #20]
 80080da:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	68fa      	ldr	r2, [r7, #12]
 80080e0:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80080e2:	683b      	ldr	r3, [r7, #0]
 80080e4:	685a      	ldr	r2, [r3, #4]
 80080e6:	687b      	ldr	r3, [r7, #4]
 80080e8:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	693a      	ldr	r2, [r7, #16]
 80080ee:	621a      	str	r2, [r3, #32]
}
 80080f0:	bf00      	nop
 80080f2:	371c      	adds	r7, #28
 80080f4:	46bd      	mov	sp, r7
 80080f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080fa:	4770      	bx	lr
 80080fc:	40012c00 	.word	0x40012c00
 8008100:	40014000 	.word	0x40014000
 8008104:	40014400 	.word	0x40014400

08008108 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8008108:	b480      	push	{r7}
 800810a:	b087      	sub	sp, #28
 800810c:	af00      	add	r7, sp, #0
 800810e:	6078      	str	r0, [r7, #4]
 8008110:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008112:	687b      	ldr	r3, [r7, #4]
 8008114:	6a1b      	ldr	r3, [r3, #32]
 8008116:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	6a1b      	ldr	r3, [r3, #32]
 800811c:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	685b      	ldr	r3, [r3, #4]
 8008128:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800812a:	687b      	ldr	r3, [r7, #4]
 800812c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800812e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8008130:	68fb      	ldr	r3, [r7, #12]
 8008132:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8008136:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800813a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800813c:	683b      	ldr	r3, [r7, #0]
 800813e:	681b      	ldr	r3, [r3, #0]
 8008140:	021b      	lsls	r3, r3, #8
 8008142:	68fa      	ldr	r2, [r7, #12]
 8008144:	4313      	orrs	r3, r2
 8008146:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8008148:	693b      	ldr	r3, [r7, #16]
 800814a:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800814e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8008150:	683b      	ldr	r3, [r7, #0]
 8008152:	689b      	ldr	r3, [r3, #8]
 8008154:	051b      	lsls	r3, r3, #20
 8008156:	693a      	ldr	r2, [r7, #16]
 8008158:	4313      	orrs	r3, r2
 800815a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800815c:	687b      	ldr	r3, [r7, #4]
 800815e:	4a14      	ldr	r2, [pc, #80]	@ (80081b0 <TIM_OC6_SetConfig+0xa8>)
 8008160:	4293      	cmp	r3, r2
 8008162:	d007      	beq.n	8008174 <TIM_OC6_SetConfig+0x6c>
 8008164:	687b      	ldr	r3, [r7, #4]
 8008166:	4a13      	ldr	r2, [pc, #76]	@ (80081b4 <TIM_OC6_SetConfig+0xac>)
 8008168:	4293      	cmp	r3, r2
 800816a:	d003      	beq.n	8008174 <TIM_OC6_SetConfig+0x6c>
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	4a12      	ldr	r2, [pc, #72]	@ (80081b8 <TIM_OC6_SetConfig+0xb0>)
 8008170:	4293      	cmp	r3, r2
 8008172:	d109      	bne.n	8008188 <TIM_OC6_SetConfig+0x80>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8008174:	697b      	ldr	r3, [r7, #20]
 8008176:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800817a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800817c:	683b      	ldr	r3, [r7, #0]
 800817e:	695b      	ldr	r3, [r3, #20]
 8008180:	029b      	lsls	r3, r3, #10
 8008182:	697a      	ldr	r2, [r7, #20]
 8008184:	4313      	orrs	r3, r2
 8008186:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008188:	687b      	ldr	r3, [r7, #4]
 800818a:	697a      	ldr	r2, [r7, #20]
 800818c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800818e:	687b      	ldr	r3, [r7, #4]
 8008190:	68fa      	ldr	r2, [r7, #12]
 8008192:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8008194:	683b      	ldr	r3, [r7, #0]
 8008196:	685a      	ldr	r2, [r3, #4]
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800819c:	687b      	ldr	r3, [r7, #4]
 800819e:	693a      	ldr	r2, [r7, #16]
 80081a0:	621a      	str	r2, [r3, #32]
}
 80081a2:	bf00      	nop
 80081a4:	371c      	adds	r7, #28
 80081a6:	46bd      	mov	sp, r7
 80081a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081ac:	4770      	bx	lr
 80081ae:	bf00      	nop
 80081b0:	40012c00 	.word	0x40012c00
 80081b4:	40014000 	.word	0x40014000
 80081b8:	40014400 	.word	0x40014400

080081bc <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80081bc:	b480      	push	{r7}
 80081be:	b087      	sub	sp, #28
 80081c0:	af00      	add	r7, sp, #0
 80081c2:	60f8      	str	r0, [r7, #12]
 80081c4:	60b9      	str	r1, [r7, #8]
 80081c6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80081c8:	68bb      	ldr	r3, [r7, #8]
 80081ca:	f003 031f 	and.w	r3, r3, #31
 80081ce:	2201      	movs	r2, #1
 80081d0:	fa02 f303 	lsl.w	r3, r2, r3
 80081d4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80081d6:	68fb      	ldr	r3, [r7, #12]
 80081d8:	6a1a      	ldr	r2, [r3, #32]
 80081da:	697b      	ldr	r3, [r7, #20]
 80081dc:	43db      	mvns	r3, r3
 80081de:	401a      	ands	r2, r3
 80081e0:	68fb      	ldr	r3, [r7, #12]
 80081e2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80081e4:	68fb      	ldr	r3, [r7, #12]
 80081e6:	6a1a      	ldr	r2, [r3, #32]
 80081e8:	68bb      	ldr	r3, [r7, #8]
 80081ea:	f003 031f 	and.w	r3, r3, #31
 80081ee:	6879      	ldr	r1, [r7, #4]
 80081f0:	fa01 f303 	lsl.w	r3, r1, r3
 80081f4:	431a      	orrs	r2, r3
 80081f6:	68fb      	ldr	r3, [r7, #12]
 80081f8:	621a      	str	r2, [r3, #32]
}
 80081fa:	bf00      	nop
 80081fc:	371c      	adds	r7, #28
 80081fe:	46bd      	mov	sp, r7
 8008200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008204:	4770      	bx	lr
	...

08008208 <HAL_TIMEx_PWMN_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8008208:	b580      	push	{r7, lr}
 800820a:	b084      	sub	sp, #16
 800820c:	af00      	add	r7, sp, #0
 800820e:	6078      	str	r0, [r7, #4]
 8008210:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Check the TIM complementary channel state */
  if (TIM_CHANNEL_N_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8008212:	683b      	ldr	r3, [r7, #0]
 8008214:	2b00      	cmp	r3, #0
 8008216:	d109      	bne.n	800822c <HAL_TIMEx_PWMN_Start+0x24>
 8008218:	687b      	ldr	r3, [r7, #4]
 800821a:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800821e:	b2db      	uxtb	r3, r3
 8008220:	2b01      	cmp	r3, #1
 8008222:	bf14      	ite	ne
 8008224:	2301      	movne	r3, #1
 8008226:	2300      	moveq	r3, #0
 8008228:	b2db      	uxtb	r3, r3
 800822a:	e022      	b.n	8008272 <HAL_TIMEx_PWMN_Start+0x6a>
 800822c:	683b      	ldr	r3, [r7, #0]
 800822e:	2b04      	cmp	r3, #4
 8008230:	d109      	bne.n	8008246 <HAL_TIMEx_PWMN_Start+0x3e>
 8008232:	687b      	ldr	r3, [r7, #4]
 8008234:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8008238:	b2db      	uxtb	r3, r3
 800823a:	2b01      	cmp	r3, #1
 800823c:	bf14      	ite	ne
 800823e:	2301      	movne	r3, #1
 8008240:	2300      	moveq	r3, #0
 8008242:	b2db      	uxtb	r3, r3
 8008244:	e015      	b.n	8008272 <HAL_TIMEx_PWMN_Start+0x6a>
 8008246:	683b      	ldr	r3, [r7, #0]
 8008248:	2b08      	cmp	r3, #8
 800824a:	d109      	bne.n	8008260 <HAL_TIMEx_PWMN_Start+0x58>
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 8008252:	b2db      	uxtb	r3, r3
 8008254:	2b01      	cmp	r3, #1
 8008256:	bf14      	ite	ne
 8008258:	2301      	movne	r3, #1
 800825a:	2300      	moveq	r3, #0
 800825c:	b2db      	uxtb	r3, r3
 800825e:	e008      	b.n	8008272 <HAL_TIMEx_PWMN_Start+0x6a>
 8008260:	687b      	ldr	r3, [r7, #4]
 8008262:	f893 3047 	ldrb.w	r3, [r3, #71]	@ 0x47
 8008266:	b2db      	uxtb	r3, r3
 8008268:	2b01      	cmp	r3, #1
 800826a:	bf14      	ite	ne
 800826c:	2301      	movne	r3, #1
 800826e:	2300      	moveq	r3, #0
 8008270:	b2db      	uxtb	r3, r3
 8008272:	2b00      	cmp	r3, #0
 8008274:	d001      	beq.n	800827a <HAL_TIMEx_PWMN_Start+0x72>
  {
    return HAL_ERROR;
 8008276:	2301      	movs	r3, #1
 8008278:	e05a      	b.n	8008330 <HAL_TIMEx_PWMN_Start+0x128>
  }

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800827a:	683b      	ldr	r3, [r7, #0]
 800827c:	2b00      	cmp	r3, #0
 800827e:	d104      	bne.n	800828a <HAL_TIMEx_PWMN_Start+0x82>
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	2202      	movs	r2, #2
 8008284:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8008288:	e013      	b.n	80082b2 <HAL_TIMEx_PWMN_Start+0xaa>
 800828a:	683b      	ldr	r3, [r7, #0]
 800828c:	2b04      	cmp	r3, #4
 800828e:	d104      	bne.n	800829a <HAL_TIMEx_PWMN_Start+0x92>
 8008290:	687b      	ldr	r3, [r7, #4]
 8008292:	2202      	movs	r2, #2
 8008294:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8008298:	e00b      	b.n	80082b2 <HAL_TIMEx_PWMN_Start+0xaa>
 800829a:	683b      	ldr	r3, [r7, #0]
 800829c:	2b08      	cmp	r3, #8
 800829e:	d104      	bne.n	80082aa <HAL_TIMEx_PWMN_Start+0xa2>
 80082a0:	687b      	ldr	r3, [r7, #4]
 80082a2:	2202      	movs	r2, #2
 80082a4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80082a8:	e003      	b.n	80082b2 <HAL_TIMEx_PWMN_Start+0xaa>
 80082aa:	687b      	ldr	r3, [r7, #4]
 80082ac:	2202      	movs	r2, #2
 80082ae:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Enable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 80082b2:	687b      	ldr	r3, [r7, #4]
 80082b4:	681b      	ldr	r3, [r3, #0]
 80082b6:	2204      	movs	r2, #4
 80082b8:	6839      	ldr	r1, [r7, #0]
 80082ba:	4618      	mov	r0, r3
 80082bc:	f000 f93e 	bl	800853c <TIM_CCxNChannelCmd>

  /* Enable the Main Output */
  __HAL_TIM_MOE_ENABLE(htim);
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	681b      	ldr	r3, [r3, #0]
 80082c4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80082c6:	687b      	ldr	r3, [r7, #4]
 80082c8:	681b      	ldr	r3, [r3, #0]
 80082ca:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80082ce:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	681b      	ldr	r3, [r3, #0]
 80082d4:	4a18      	ldr	r2, [pc, #96]	@ (8008338 <HAL_TIMEx_PWMN_Start+0x130>)
 80082d6:	4293      	cmp	r3, r2
 80082d8:	d009      	beq.n	80082ee <HAL_TIMEx_PWMN_Start+0xe6>
 80082da:	687b      	ldr	r3, [r7, #4]
 80082dc:	681b      	ldr	r3, [r3, #0]
 80082de:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80082e2:	d004      	beq.n	80082ee <HAL_TIMEx_PWMN_Start+0xe6>
 80082e4:	687b      	ldr	r3, [r7, #4]
 80082e6:	681b      	ldr	r3, [r3, #0]
 80082e8:	4a14      	ldr	r2, [pc, #80]	@ (800833c <HAL_TIMEx_PWMN_Start+0x134>)
 80082ea:	4293      	cmp	r3, r2
 80082ec:	d115      	bne.n	800831a <HAL_TIMEx_PWMN_Start+0x112>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80082ee:	687b      	ldr	r3, [r7, #4]
 80082f0:	681b      	ldr	r3, [r3, #0]
 80082f2:	689a      	ldr	r2, [r3, #8]
 80082f4:	4b12      	ldr	r3, [pc, #72]	@ (8008340 <HAL_TIMEx_PWMN_Start+0x138>)
 80082f6:	4013      	ands	r3, r2
 80082f8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80082fa:	68fb      	ldr	r3, [r7, #12]
 80082fc:	2b06      	cmp	r3, #6
 80082fe:	d015      	beq.n	800832c <HAL_TIMEx_PWMN_Start+0x124>
 8008300:	68fb      	ldr	r3, [r7, #12]
 8008302:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008306:	d011      	beq.n	800832c <HAL_TIMEx_PWMN_Start+0x124>
    {
      __HAL_TIM_ENABLE(htim);
 8008308:	687b      	ldr	r3, [r7, #4]
 800830a:	681b      	ldr	r3, [r3, #0]
 800830c:	681a      	ldr	r2, [r3, #0]
 800830e:	687b      	ldr	r3, [r7, #4]
 8008310:	681b      	ldr	r3, [r3, #0]
 8008312:	f042 0201 	orr.w	r2, r2, #1
 8008316:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008318:	e008      	b.n	800832c <HAL_TIMEx_PWMN_Start+0x124>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800831a:	687b      	ldr	r3, [r7, #4]
 800831c:	681b      	ldr	r3, [r3, #0]
 800831e:	681a      	ldr	r2, [r3, #0]
 8008320:	687b      	ldr	r3, [r7, #4]
 8008322:	681b      	ldr	r3, [r3, #0]
 8008324:	f042 0201 	orr.w	r2, r2, #1
 8008328:	601a      	str	r2, [r3, #0]
 800832a:	e000      	b.n	800832e <HAL_TIMEx_PWMN_Start+0x126>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800832c:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800832e:	2300      	movs	r3, #0
}
 8008330:	4618      	mov	r0, r3
 8008332:	3710      	adds	r7, #16
 8008334:	46bd      	mov	sp, r7
 8008336:	bd80      	pop	{r7, pc}
 8008338:	40012c00 	.word	0x40012c00
 800833c:	40014000 	.word	0x40014000
 8008340:	00010007 	.word	0x00010007

08008344 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008344:	b480      	push	{r7}
 8008346:	b085      	sub	sp, #20
 8008348:	af00      	add	r7, sp, #0
 800834a:	6078      	str	r0, [r7, #4]
 800834c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800834e:	687b      	ldr	r3, [r7, #4]
 8008350:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008354:	2b01      	cmp	r3, #1
 8008356:	d101      	bne.n	800835c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008358:	2302      	movs	r3, #2
 800835a:	e04f      	b.n	80083fc <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800835c:	687b      	ldr	r3, [r7, #4]
 800835e:	2201      	movs	r2, #1
 8008360:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008364:	687b      	ldr	r3, [r7, #4]
 8008366:	2202      	movs	r2, #2
 8008368:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800836c:	687b      	ldr	r3, [r7, #4]
 800836e:	681b      	ldr	r3, [r3, #0]
 8008370:	685b      	ldr	r3, [r3, #4]
 8008372:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008374:	687b      	ldr	r3, [r7, #4]
 8008376:	681b      	ldr	r3, [r3, #0]
 8008378:	689b      	ldr	r3, [r3, #8]
 800837a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800837c:	687b      	ldr	r3, [r7, #4]
 800837e:	681b      	ldr	r3, [r3, #0]
 8008380:	4a21      	ldr	r2, [pc, #132]	@ (8008408 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8008382:	4293      	cmp	r3, r2
 8008384:	d108      	bne.n	8008398 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8008386:	68fb      	ldr	r3, [r7, #12]
 8008388:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800838c:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800838e:	683b      	ldr	r3, [r7, #0]
 8008390:	685b      	ldr	r3, [r3, #4]
 8008392:	68fa      	ldr	r2, [r7, #12]
 8008394:	4313      	orrs	r3, r2
 8008396:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008398:	68fb      	ldr	r3, [r7, #12]
 800839a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800839e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80083a0:	683b      	ldr	r3, [r7, #0]
 80083a2:	681b      	ldr	r3, [r3, #0]
 80083a4:	68fa      	ldr	r2, [r7, #12]
 80083a6:	4313      	orrs	r3, r2
 80083a8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80083aa:	687b      	ldr	r3, [r7, #4]
 80083ac:	681b      	ldr	r3, [r3, #0]
 80083ae:	68fa      	ldr	r2, [r7, #12]
 80083b0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80083b2:	687b      	ldr	r3, [r7, #4]
 80083b4:	681b      	ldr	r3, [r3, #0]
 80083b6:	4a14      	ldr	r2, [pc, #80]	@ (8008408 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 80083b8:	4293      	cmp	r3, r2
 80083ba:	d009      	beq.n	80083d0 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 80083bc:	687b      	ldr	r3, [r7, #4]
 80083be:	681b      	ldr	r3, [r3, #0]
 80083c0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80083c4:	d004      	beq.n	80083d0 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 80083c6:	687b      	ldr	r3, [r7, #4]
 80083c8:	681b      	ldr	r3, [r3, #0]
 80083ca:	4a10      	ldr	r2, [pc, #64]	@ (800840c <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80083cc:	4293      	cmp	r3, r2
 80083ce:	d10c      	bne.n	80083ea <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80083d0:	68bb      	ldr	r3, [r7, #8]
 80083d2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80083d6:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80083d8:	683b      	ldr	r3, [r7, #0]
 80083da:	689b      	ldr	r3, [r3, #8]
 80083dc:	68ba      	ldr	r2, [r7, #8]
 80083de:	4313      	orrs	r3, r2
 80083e0:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80083e2:	687b      	ldr	r3, [r7, #4]
 80083e4:	681b      	ldr	r3, [r3, #0]
 80083e6:	68ba      	ldr	r2, [r7, #8]
 80083e8:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80083ea:	687b      	ldr	r3, [r7, #4]
 80083ec:	2201      	movs	r2, #1
 80083ee:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80083f2:	687b      	ldr	r3, [r7, #4]
 80083f4:	2200      	movs	r2, #0
 80083f6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80083fa:	2300      	movs	r3, #0
}
 80083fc:	4618      	mov	r0, r3
 80083fe:	3714      	adds	r7, #20
 8008400:	46bd      	mov	sp, r7
 8008402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008406:	4770      	bx	lr
 8008408:	40012c00 	.word	0x40012c00
 800840c:	40014000 	.word	0x40014000

08008410 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8008410:	b480      	push	{r7}
 8008412:	b085      	sub	sp, #20
 8008414:	af00      	add	r7, sp, #0
 8008416:	6078      	str	r0, [r7, #4]
 8008418:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800841a:	2300      	movs	r3, #0
 800841c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800841e:	687b      	ldr	r3, [r7, #4]
 8008420:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008424:	2b01      	cmp	r3, #1
 8008426:	d101      	bne.n	800842c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8008428:	2302      	movs	r3, #2
 800842a:	e060      	b.n	80084ee <HAL_TIMEx_ConfigBreakDeadTime+0xde>
 800842c:	687b      	ldr	r3, [r7, #4]
 800842e:	2201      	movs	r2, #1
 8008430:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8008434:	68fb      	ldr	r3, [r7, #12]
 8008436:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 800843a:	683b      	ldr	r3, [r7, #0]
 800843c:	68db      	ldr	r3, [r3, #12]
 800843e:	4313      	orrs	r3, r2
 8008440:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8008442:	68fb      	ldr	r3, [r7, #12]
 8008444:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8008448:	683b      	ldr	r3, [r7, #0]
 800844a:	689b      	ldr	r3, [r3, #8]
 800844c:	4313      	orrs	r3, r2
 800844e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8008450:	68fb      	ldr	r3, [r7, #12]
 8008452:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8008456:	683b      	ldr	r3, [r7, #0]
 8008458:	685b      	ldr	r3, [r3, #4]
 800845a:	4313      	orrs	r3, r2
 800845c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800845e:	68fb      	ldr	r3, [r7, #12]
 8008460:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8008464:	683b      	ldr	r3, [r7, #0]
 8008466:	681b      	ldr	r3, [r3, #0]
 8008468:	4313      	orrs	r3, r2
 800846a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800846c:	68fb      	ldr	r3, [r7, #12]
 800846e:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8008472:	683b      	ldr	r3, [r7, #0]
 8008474:	691b      	ldr	r3, [r3, #16]
 8008476:	4313      	orrs	r3, r2
 8008478:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800847a:	68fb      	ldr	r3, [r7, #12]
 800847c:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8008480:	683b      	ldr	r3, [r7, #0]
 8008482:	695b      	ldr	r3, [r3, #20]
 8008484:	4313      	orrs	r3, r2
 8008486:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8008488:	68fb      	ldr	r3, [r7, #12]
 800848a:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 800848e:	683b      	ldr	r3, [r7, #0]
 8008490:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008492:	4313      	orrs	r3, r2
 8008494:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8008496:	68fb      	ldr	r3, [r7, #12]
 8008498:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 800849c:	683b      	ldr	r3, [r7, #0]
 800849e:	699b      	ldr	r3, [r3, #24]
 80084a0:	041b      	lsls	r3, r3, #16
 80084a2:	4313      	orrs	r3, r2
 80084a4:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 80084a6:	687b      	ldr	r3, [r7, #4]
 80084a8:	681b      	ldr	r3, [r3, #0]
 80084aa:	4a14      	ldr	r2, [pc, #80]	@ (80084fc <HAL_TIMEx_ConfigBreakDeadTime+0xec>)
 80084ac:	4293      	cmp	r3, r2
 80084ae:	d115      	bne.n	80084dc <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 80084b0:	68fb      	ldr	r3, [r7, #12]
 80084b2:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 80084b6:	683b      	ldr	r3, [r7, #0]
 80084b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80084ba:	051b      	lsls	r3, r3, #20
 80084bc:	4313      	orrs	r3, r2
 80084be:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 80084c0:	68fb      	ldr	r3, [r7, #12]
 80084c2:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 80084c6:	683b      	ldr	r3, [r7, #0]
 80084c8:	69db      	ldr	r3, [r3, #28]
 80084ca:	4313      	orrs	r3, r2
 80084cc:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 80084ce:	68fb      	ldr	r3, [r7, #12]
 80084d0:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 80084d4:	683b      	ldr	r3, [r7, #0]
 80084d6:	6a1b      	ldr	r3, [r3, #32]
 80084d8:	4313      	orrs	r3, r2
 80084da:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80084dc:	687b      	ldr	r3, [r7, #4]
 80084de:	681b      	ldr	r3, [r3, #0]
 80084e0:	68fa      	ldr	r2, [r7, #12]
 80084e2:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 80084e4:	687b      	ldr	r3, [r7, #4]
 80084e6:	2200      	movs	r2, #0
 80084e8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80084ec:	2300      	movs	r3, #0
}
 80084ee:	4618      	mov	r0, r3
 80084f0:	3714      	adds	r7, #20
 80084f2:	46bd      	mov	sp, r7
 80084f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084f8:	4770      	bx	lr
 80084fa:	bf00      	nop
 80084fc:	40012c00 	.word	0x40012c00

08008500 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8008500:	b480      	push	{r7}
 8008502:	b083      	sub	sp, #12
 8008504:	af00      	add	r7, sp, #0
 8008506:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8008508:	bf00      	nop
 800850a:	370c      	adds	r7, #12
 800850c:	46bd      	mov	sp, r7
 800850e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008512:	4770      	bx	lr

08008514 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8008514:	b480      	push	{r7}
 8008516:	b083      	sub	sp, #12
 8008518:	af00      	add	r7, sp, #0
 800851a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800851c:	bf00      	nop
 800851e:	370c      	adds	r7, #12
 8008520:	46bd      	mov	sp, r7
 8008522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008526:	4770      	bx	lr

08008528 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8008528:	b480      	push	{r7}
 800852a:	b083      	sub	sp, #12
 800852c:	af00      	add	r7, sp, #0
 800852e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8008530:	bf00      	nop
 8008532:	370c      	adds	r7, #12
 8008534:	46bd      	mov	sp, r7
 8008536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800853a:	4770      	bx	lr

0800853c <TIM_CCxNChannelCmd>:
  * @param  ChannelNState specifies the TIM Channel CCxNE bit new state.
  *          This parameter can be: TIM_CCxN_ENABLE or TIM_CCxN_Disable.
  * @retval None
  */
static void TIM_CCxNChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelNState)
{
 800853c:	b480      	push	{r7}
 800853e:	b087      	sub	sp, #28
 8008540:	af00      	add	r7, sp, #0
 8008542:	60f8      	str	r0, [r7, #12]
 8008544:	60b9      	str	r1, [r7, #8]
 8008546:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  tmp = TIM_CCER_CC1NE << (Channel & 0xFU); /* 0xFU = 15 bits max shift */
 8008548:	68bb      	ldr	r3, [r7, #8]
 800854a:	f003 030f 	and.w	r3, r3, #15
 800854e:	2204      	movs	r2, #4
 8008550:	fa02 f303 	lsl.w	r3, r2, r3
 8008554:	617b      	str	r3, [r7, #20]

  /* Reset the CCxNE Bit */
  TIMx->CCER &=  ~tmp;
 8008556:	68fb      	ldr	r3, [r7, #12]
 8008558:	6a1a      	ldr	r2, [r3, #32]
 800855a:	697b      	ldr	r3, [r7, #20]
 800855c:	43db      	mvns	r3, r3
 800855e:	401a      	ands	r2, r3
 8008560:	68fb      	ldr	r3, [r7, #12]
 8008562:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxNE Bit */
  TIMx->CCER |= (uint32_t)(ChannelNState << (Channel & 0xFU)); /* 0xFU = 15 bits max shift */
 8008564:	68fb      	ldr	r3, [r7, #12]
 8008566:	6a1a      	ldr	r2, [r3, #32]
 8008568:	68bb      	ldr	r3, [r7, #8]
 800856a:	f003 030f 	and.w	r3, r3, #15
 800856e:	6879      	ldr	r1, [r7, #4]
 8008570:	fa01 f303 	lsl.w	r3, r1, r3
 8008574:	431a      	orrs	r2, r3
 8008576:	68fb      	ldr	r3, [r7, #12]
 8008578:	621a      	str	r2, [r3, #32]
}
 800857a:	bf00      	nop
 800857c:	371c      	adds	r7, #28
 800857e:	46bd      	mov	sp, r7
 8008580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008584:	4770      	bx	lr

08008586 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008586:	b580      	push	{r7, lr}
 8008588:	b082      	sub	sp, #8
 800858a:	af00      	add	r7, sp, #0
 800858c:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800858e:	687b      	ldr	r3, [r7, #4]
 8008590:	2b00      	cmp	r3, #0
 8008592:	d101      	bne.n	8008598 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008594:	2301      	movs	r3, #1
 8008596:	e040      	b.n	800861a <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8008598:	687b      	ldr	r3, [r7, #4]
 800859a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800859c:	2b00      	cmp	r3, #0
 800859e:	d106      	bne.n	80085ae <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80085a0:	687b      	ldr	r3, [r7, #4]
 80085a2:	2200      	movs	r2, #0
 80085a4:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80085a8:	6878      	ldr	r0, [r7, #4]
 80085aa:	f7fa fc59 	bl	8002e60 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80085ae:	687b      	ldr	r3, [r7, #4]
 80085b0:	2224      	movs	r2, #36	@ 0x24
 80085b2:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 80085b4:	687b      	ldr	r3, [r7, #4]
 80085b6:	681b      	ldr	r3, [r3, #0]
 80085b8:	681a      	ldr	r2, [r3, #0]
 80085ba:	687b      	ldr	r3, [r7, #4]
 80085bc:	681b      	ldr	r3, [r3, #0]
 80085be:	f022 0201 	bic.w	r2, r2, #1
 80085c2:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80085c4:	687b      	ldr	r3, [r7, #4]
 80085c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80085c8:	2b00      	cmp	r3, #0
 80085ca:	d002      	beq.n	80085d2 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 80085cc:	6878      	ldr	r0, [r7, #4]
 80085ce:	f000 fed7 	bl	8009380 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80085d2:	6878      	ldr	r0, [r7, #4]
 80085d4:	f000 fca8 	bl	8008f28 <UART_SetConfig>
 80085d8:	4603      	mov	r3, r0
 80085da:	2b01      	cmp	r3, #1
 80085dc:	d101      	bne.n	80085e2 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 80085de:	2301      	movs	r3, #1
 80085e0:	e01b      	b.n	800861a <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80085e2:	687b      	ldr	r3, [r7, #4]
 80085e4:	681b      	ldr	r3, [r3, #0]
 80085e6:	685a      	ldr	r2, [r3, #4]
 80085e8:	687b      	ldr	r3, [r7, #4]
 80085ea:	681b      	ldr	r3, [r3, #0]
 80085ec:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80085f0:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80085f2:	687b      	ldr	r3, [r7, #4]
 80085f4:	681b      	ldr	r3, [r3, #0]
 80085f6:	689a      	ldr	r2, [r3, #8]
 80085f8:	687b      	ldr	r3, [r7, #4]
 80085fa:	681b      	ldr	r3, [r3, #0]
 80085fc:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8008600:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8008602:	687b      	ldr	r3, [r7, #4]
 8008604:	681b      	ldr	r3, [r3, #0]
 8008606:	681a      	ldr	r2, [r3, #0]
 8008608:	687b      	ldr	r3, [r7, #4]
 800860a:	681b      	ldr	r3, [r3, #0]
 800860c:	f042 0201 	orr.w	r2, r2, #1
 8008610:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8008612:	6878      	ldr	r0, [r7, #4]
 8008614:	f000 ff56 	bl	80094c4 <UART_CheckIdleState>
 8008618:	4603      	mov	r3, r0
}
 800861a:	4618      	mov	r0, r3
 800861c:	3708      	adds	r7, #8
 800861e:	46bd      	mov	sp, r7
 8008620:	bd80      	pop	{r7, pc}
	...

08008624 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8008624:	b580      	push	{r7, lr}
 8008626:	b08a      	sub	sp, #40	@ 0x28
 8008628:	af00      	add	r7, sp, #0
 800862a:	60f8      	str	r0, [r7, #12]
 800862c:	60b9      	str	r1, [r7, #8]
 800862e:	4613      	mov	r3, r2
 8008630:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8008632:	68fb      	ldr	r3, [r7, #12]
 8008634:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8008636:	2b20      	cmp	r3, #32
 8008638:	d165      	bne.n	8008706 <HAL_UART_Transmit_DMA+0xe2>
  {
    if ((pData == NULL) || (Size == 0U))
 800863a:	68bb      	ldr	r3, [r7, #8]
 800863c:	2b00      	cmp	r3, #0
 800863e:	d002      	beq.n	8008646 <HAL_UART_Transmit_DMA+0x22>
 8008640:	88fb      	ldrh	r3, [r7, #6]
 8008642:	2b00      	cmp	r3, #0
 8008644:	d101      	bne.n	800864a <HAL_UART_Transmit_DMA+0x26>
    {
      return HAL_ERROR;
 8008646:	2301      	movs	r3, #1
 8008648:	e05e      	b.n	8008708 <HAL_UART_Transmit_DMA+0xe4>
    }

    huart->pTxBuffPtr  = pData;
 800864a:	68fb      	ldr	r3, [r7, #12]
 800864c:	68ba      	ldr	r2, [r7, #8]
 800864e:	64da      	str	r2, [r3, #76]	@ 0x4c
    huart->TxXferSize  = Size;
 8008650:	68fb      	ldr	r3, [r7, #12]
 8008652:	88fa      	ldrh	r2, [r7, #6]
 8008654:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8008658:	68fb      	ldr	r3, [r7, #12]
 800865a:	88fa      	ldrh	r2, [r7, #6]
 800865c:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008660:	68fb      	ldr	r3, [r7, #12]
 8008662:	2200      	movs	r2, #0
 8008664:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8008668:	68fb      	ldr	r3, [r7, #12]
 800866a:	2221      	movs	r2, #33	@ 0x21
 800866c:	67da      	str	r2, [r3, #124]	@ 0x7c

    if (huart->hdmatx != NULL)
 800866e:	68fb      	ldr	r3, [r7, #12]
 8008670:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008672:	2b00      	cmp	r3, #0
 8008674:	d027      	beq.n	80086c6 <HAL_UART_Transmit_DMA+0xa2>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8008676:	68fb      	ldr	r3, [r7, #12]
 8008678:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800867a:	4a25      	ldr	r2, [pc, #148]	@ (8008710 <HAL_UART_Transmit_DMA+0xec>)
 800867c:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800867e:	68fb      	ldr	r3, [r7, #12]
 8008680:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008682:	4a24      	ldr	r2, [pc, #144]	@ (8008714 <HAL_UART_Transmit_DMA+0xf0>)
 8008684:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 8008686:	68fb      	ldr	r3, [r7, #12]
 8008688:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800868a:	4a23      	ldr	r2, [pc, #140]	@ (8008718 <HAL_UART_Transmit_DMA+0xf4>)
 800868c:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 800868e:	68fb      	ldr	r3, [r7, #12]
 8008690:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008692:	2200      	movs	r2, #0
 8008694:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 8008696:	68fb      	ldr	r3, [r7, #12]
 8008698:	6f18      	ldr	r0, [r3, #112]	@ 0x70
 800869a:	68fb      	ldr	r3, [r7, #12]
 800869c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800869e:	4619      	mov	r1, r3
 80086a0:	68fb      	ldr	r3, [r7, #12]
 80086a2:	681b      	ldr	r3, [r3, #0]
 80086a4:	3328      	adds	r3, #40	@ 0x28
 80086a6:	461a      	mov	r2, r3
 80086a8:	88fb      	ldrh	r3, [r7, #6]
 80086aa:	f7fa fec7 	bl	800343c <HAL_DMA_Start_IT>
 80086ae:	4603      	mov	r3, r0
 80086b0:	2b00      	cmp	r3, #0
 80086b2:	d008      	beq.n	80086c6 <HAL_UART_Transmit_DMA+0xa2>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 80086b4:	68fb      	ldr	r3, [r7, #12]
 80086b6:	2210      	movs	r2, #16
 80086b8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 80086bc:	68fb      	ldr	r3, [r7, #12]
 80086be:	2220      	movs	r2, #32
 80086c0:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_ERROR;
 80086c2:	2301      	movs	r3, #1
 80086c4:	e020      	b.n	8008708 <HAL_UART_Transmit_DMA+0xe4>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 80086c6:	68fb      	ldr	r3, [r7, #12]
 80086c8:	681b      	ldr	r3, [r3, #0]
 80086ca:	2240      	movs	r2, #64	@ 0x40
 80086cc:	621a      	str	r2, [r3, #32]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80086ce:	68fb      	ldr	r3, [r7, #12]
 80086d0:	681b      	ldr	r3, [r3, #0]
 80086d2:	3308      	adds	r3, #8
 80086d4:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80086d6:	697b      	ldr	r3, [r7, #20]
 80086d8:	e853 3f00 	ldrex	r3, [r3]
 80086dc:	613b      	str	r3, [r7, #16]
   return(result);
 80086de:	693b      	ldr	r3, [r7, #16]
 80086e0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80086e4:	627b      	str	r3, [r7, #36]	@ 0x24
 80086e6:	68fb      	ldr	r3, [r7, #12]
 80086e8:	681b      	ldr	r3, [r3, #0]
 80086ea:	3308      	adds	r3, #8
 80086ec:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80086ee:	623a      	str	r2, [r7, #32]
 80086f0:	61fb      	str	r3, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80086f2:	69f9      	ldr	r1, [r7, #28]
 80086f4:	6a3a      	ldr	r2, [r7, #32]
 80086f6:	e841 2300 	strex	r3, r2, [r1]
 80086fa:	61bb      	str	r3, [r7, #24]
   return(result);
 80086fc:	69bb      	ldr	r3, [r7, #24]
 80086fe:	2b00      	cmp	r3, #0
 8008700:	d1e5      	bne.n	80086ce <HAL_UART_Transmit_DMA+0xaa>

    return HAL_OK;
 8008702:	2300      	movs	r3, #0
 8008704:	e000      	b.n	8008708 <HAL_UART_Transmit_DMA+0xe4>
  }
  else
  {
    return HAL_BUSY;
 8008706:	2302      	movs	r3, #2
  }
}
 8008708:	4618      	mov	r0, r3
 800870a:	3728      	adds	r7, #40	@ 0x28
 800870c:	46bd      	mov	sp, r7
 800870e:	bd80      	pop	{r7, pc}
 8008710:	08009939 	.word	0x08009939
 8008714:	080099d3 	.word	0x080099d3
 8008718:	08009b59 	.word	0x08009b59

0800871c <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800871c:	b580      	push	{r7, lr}
 800871e:	b08a      	sub	sp, #40	@ 0x28
 8008720:	af00      	add	r7, sp, #0
 8008722:	60f8      	str	r0, [r7, #12]
 8008724:	60b9      	str	r1, [r7, #8]
 8008726:	4613      	mov	r3, r2
 8008728:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800872a:	68fb      	ldr	r3, [r7, #12]
 800872c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008730:	2b20      	cmp	r3, #32
 8008732:	d137      	bne.n	80087a4 <HAL_UART_Receive_DMA+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 8008734:	68bb      	ldr	r3, [r7, #8]
 8008736:	2b00      	cmp	r3, #0
 8008738:	d002      	beq.n	8008740 <HAL_UART_Receive_DMA+0x24>
 800873a:	88fb      	ldrh	r3, [r7, #6]
 800873c:	2b00      	cmp	r3, #0
 800873e:	d101      	bne.n	8008744 <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 8008740:	2301      	movs	r3, #1
 8008742:	e030      	b.n	80087a6 <HAL_UART_Receive_DMA+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008744:	68fb      	ldr	r3, [r7, #12]
 8008746:	2200      	movs	r2, #0
 8008748:	661a      	str	r2, [r3, #96]	@ 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800874a:	68fb      	ldr	r3, [r7, #12]
 800874c:	681b      	ldr	r3, [r3, #0]
 800874e:	4a18      	ldr	r2, [pc, #96]	@ (80087b0 <HAL_UART_Receive_DMA+0x94>)
 8008750:	4293      	cmp	r3, r2
 8008752:	d01f      	beq.n	8008794 <HAL_UART_Receive_DMA+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8008754:	68fb      	ldr	r3, [r7, #12]
 8008756:	681b      	ldr	r3, [r3, #0]
 8008758:	685b      	ldr	r3, [r3, #4]
 800875a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800875e:	2b00      	cmp	r3, #0
 8008760:	d018      	beq.n	8008794 <HAL_UART_Receive_DMA+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8008762:	68fb      	ldr	r3, [r7, #12]
 8008764:	681b      	ldr	r3, [r3, #0]
 8008766:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008768:	697b      	ldr	r3, [r7, #20]
 800876a:	e853 3f00 	ldrex	r3, [r3]
 800876e:	613b      	str	r3, [r7, #16]
   return(result);
 8008770:	693b      	ldr	r3, [r7, #16]
 8008772:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8008776:	627b      	str	r3, [r7, #36]	@ 0x24
 8008778:	68fb      	ldr	r3, [r7, #12]
 800877a:	681b      	ldr	r3, [r3, #0]
 800877c:	461a      	mov	r2, r3
 800877e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008780:	623b      	str	r3, [r7, #32]
 8008782:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008784:	69f9      	ldr	r1, [r7, #28]
 8008786:	6a3a      	ldr	r2, [r7, #32]
 8008788:	e841 2300 	strex	r3, r2, [r1]
 800878c:	61bb      	str	r3, [r7, #24]
   return(result);
 800878e:	69bb      	ldr	r3, [r7, #24]
 8008790:	2b00      	cmp	r3, #0
 8008792:	d1e6      	bne.n	8008762 <HAL_UART_Receive_DMA+0x46>
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8008794:	88fb      	ldrh	r3, [r7, #6]
 8008796:	461a      	mov	r2, r3
 8008798:	68b9      	ldr	r1, [r7, #8]
 800879a:	68f8      	ldr	r0, [r7, #12]
 800879c:	f000 ffa2 	bl	80096e4 <UART_Start_Receive_DMA>
 80087a0:	4603      	mov	r3, r0
 80087a2:	e000      	b.n	80087a6 <HAL_UART_Receive_DMA+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80087a4:	2302      	movs	r3, #2
  }
}
 80087a6:	4618      	mov	r0, r3
 80087a8:	3728      	adds	r7, #40	@ 0x28
 80087aa:	46bd      	mov	sp, r7
 80087ac:	bd80      	pop	{r7, pc}
 80087ae:	bf00      	nop
 80087b0:	40008000 	.word	0x40008000

080087b4 <HAL_UART_DMAStop>:
  * @brief Stop the DMA Transfer.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DMAStop(UART_HandleTypeDef *huart)
{
 80087b4:	b580      	push	{r7, lr}
 80087b6:	b090      	sub	sp, #64	@ 0x40
 80087b8:	af00      	add	r7, sp, #0
 80087ba:	6078      	str	r0, [r7, #4]
     HAL_UART_TxHalfCpltCallback / HAL_UART_RxHalfCpltCallback:
     indeed, when HAL_DMA_Abort() API is called, the DMA TX/RX Transfer or Half Transfer complete
     interrupt is generated if the DMA transfer interruption occurs at the middle or at the end of
     the stream and the corresponding call back is executed. */

  const HAL_UART_StateTypeDef gstate = huart->gState;
 80087bc:	687b      	ldr	r3, [r7, #4]
 80087be:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80087c0:	63fb      	str	r3, [r7, #60]	@ 0x3c
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 80087c2:	687b      	ldr	r3, [r7, #4]
 80087c4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80087c8:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 80087ca:	687b      	ldr	r3, [r7, #4]
 80087cc:	681b      	ldr	r3, [r3, #0]
 80087ce:	689b      	ldr	r3, [r3, #8]
 80087d0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80087d4:	2b80      	cmp	r3, #128	@ 0x80
 80087d6:	d139      	bne.n	800884c <HAL_UART_DMAStop+0x98>
 80087d8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80087da:	2b21      	cmp	r3, #33	@ 0x21
 80087dc:	d136      	bne.n	800884c <HAL_UART_DMAStop+0x98>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80087de:	687b      	ldr	r3, [r7, #4]
 80087e0:	681b      	ldr	r3, [r3, #0]
 80087e2:	3308      	adds	r3, #8
 80087e4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80087e6:	6a3b      	ldr	r3, [r7, #32]
 80087e8:	e853 3f00 	ldrex	r3, [r3]
 80087ec:	61fb      	str	r3, [r7, #28]
   return(result);
 80087ee:	69fb      	ldr	r3, [r7, #28]
 80087f0:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80087f4:	637b      	str	r3, [r7, #52]	@ 0x34
 80087f6:	687b      	ldr	r3, [r7, #4]
 80087f8:	681b      	ldr	r3, [r3, #0]
 80087fa:	3308      	adds	r3, #8
 80087fc:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80087fe:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8008800:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008802:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8008804:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008806:	e841 2300 	strex	r3, r2, [r1]
 800880a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800880c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800880e:	2b00      	cmp	r3, #0
 8008810:	d1e5      	bne.n	80087de <HAL_UART_DMAStop+0x2a>

    /* Abort the UART DMA Tx channel */
    if (huart->hdmatx != NULL)
 8008812:	687b      	ldr	r3, [r7, #4]
 8008814:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008816:	2b00      	cmp	r3, #0
 8008818:	d015      	beq.n	8008846 <HAL_UART_DMAStop+0x92>
    {
      if (HAL_DMA_Abort(huart->hdmatx) != HAL_OK)
 800881a:	687b      	ldr	r3, [r7, #4]
 800881c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800881e:	4618      	mov	r0, r3
 8008820:	f7fa fe6c 	bl	80034fc <HAL_DMA_Abort>
 8008824:	4603      	mov	r3, r0
 8008826:	2b00      	cmp	r3, #0
 8008828:	d00d      	beq.n	8008846 <HAL_UART_DMAStop+0x92>
      {
        if (HAL_DMA_GetError(huart->hdmatx) == HAL_DMA_ERROR_TIMEOUT)
 800882a:	687b      	ldr	r3, [r7, #4]
 800882c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800882e:	4618      	mov	r0, r3
 8008830:	f7fa ffa0 	bl	8003774 <HAL_DMA_GetError>
 8008834:	4603      	mov	r3, r0
 8008836:	2b20      	cmp	r3, #32
 8008838:	d105      	bne.n	8008846 <HAL_UART_DMAStop+0x92>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 800883a:	687b      	ldr	r3, [r7, #4]
 800883c:	2210      	movs	r2, #16
 800883e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8008842:	2303      	movs	r3, #3
 8008844:	e044      	b.n	80088d0 <HAL_UART_DMAStop+0x11c>
        }
      }
    }

    UART_EndTxTransfer(huart);
 8008846:	6878      	ldr	r0, [r7, #4]
 8008848:	f000 ffec 	bl	8009824 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800884c:	687b      	ldr	r3, [r7, #4]
 800884e:	681b      	ldr	r3, [r3, #0]
 8008850:	689b      	ldr	r3, [r3, #8]
 8008852:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008856:	2b40      	cmp	r3, #64	@ 0x40
 8008858:	d139      	bne.n	80088ce <HAL_UART_DMAStop+0x11a>
 800885a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800885c:	2b22      	cmp	r3, #34	@ 0x22
 800885e:	d136      	bne.n	80088ce <HAL_UART_DMAStop+0x11a>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008860:	687b      	ldr	r3, [r7, #4]
 8008862:	681b      	ldr	r3, [r3, #0]
 8008864:	3308      	adds	r3, #8
 8008866:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008868:	68fb      	ldr	r3, [r7, #12]
 800886a:	e853 3f00 	ldrex	r3, [r3]
 800886e:	60bb      	str	r3, [r7, #8]
   return(result);
 8008870:	68bb      	ldr	r3, [r7, #8]
 8008872:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008876:	633b      	str	r3, [r7, #48]	@ 0x30
 8008878:	687b      	ldr	r3, [r7, #4]
 800887a:	681b      	ldr	r3, [r3, #0]
 800887c:	3308      	adds	r3, #8
 800887e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008880:	61ba      	str	r2, [r7, #24]
 8008882:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008884:	6979      	ldr	r1, [r7, #20]
 8008886:	69ba      	ldr	r2, [r7, #24]
 8008888:	e841 2300 	strex	r3, r2, [r1]
 800888c:	613b      	str	r3, [r7, #16]
   return(result);
 800888e:	693b      	ldr	r3, [r7, #16]
 8008890:	2b00      	cmp	r3, #0
 8008892:	d1e5      	bne.n	8008860 <HAL_UART_DMAStop+0xac>

    /* Abort the UART DMA Rx channel */
    if (huart->hdmarx != NULL)
 8008894:	687b      	ldr	r3, [r7, #4]
 8008896:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008898:	2b00      	cmp	r3, #0
 800889a:	d015      	beq.n	80088c8 <HAL_UART_DMAStop+0x114>
    {
      if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 800889c:	687b      	ldr	r3, [r7, #4]
 800889e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80088a0:	4618      	mov	r0, r3
 80088a2:	f7fa fe2b 	bl	80034fc <HAL_DMA_Abort>
 80088a6:	4603      	mov	r3, r0
 80088a8:	2b00      	cmp	r3, #0
 80088aa:	d00d      	beq.n	80088c8 <HAL_UART_DMAStop+0x114>
      {
        if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 80088ac:	687b      	ldr	r3, [r7, #4]
 80088ae:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80088b0:	4618      	mov	r0, r3
 80088b2:	f7fa ff5f 	bl	8003774 <HAL_DMA_GetError>
 80088b6:	4603      	mov	r3, r0
 80088b8:	2b20      	cmp	r3, #32
 80088ba:	d105      	bne.n	80088c8 <HAL_UART_DMAStop+0x114>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 80088bc:	687b      	ldr	r3, [r7, #4]
 80088be:	2210      	movs	r2, #16
 80088c0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 80088c4:	2303      	movs	r3, #3
 80088c6:	e003      	b.n	80088d0 <HAL_UART_DMAStop+0x11c>
        }
      }
    }

    UART_EndRxTransfer(huart);
 80088c8:	6878      	ldr	r0, [r7, #4]
 80088ca:	f000 ffd1 	bl	8009870 <UART_EndRxTransfer>
  }

  return HAL_OK;
 80088ce:	2300      	movs	r3, #0
}
 80088d0:	4618      	mov	r0, r3
 80088d2:	3740      	adds	r7, #64	@ 0x40
 80088d4:	46bd      	mov	sp, r7
 80088d6:	bd80      	pop	{r7, pc}

080088d8 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80088d8:	b580      	push	{r7, lr}
 80088da:	b0ba      	sub	sp, #232	@ 0xe8
 80088dc:	af00      	add	r7, sp, #0
 80088de:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80088e0:	687b      	ldr	r3, [r7, #4]
 80088e2:	681b      	ldr	r3, [r3, #0]
 80088e4:	69db      	ldr	r3, [r3, #28]
 80088e6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80088ea:	687b      	ldr	r3, [r7, #4]
 80088ec:	681b      	ldr	r3, [r3, #0]
 80088ee:	681b      	ldr	r3, [r3, #0]
 80088f0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80088f4:	687b      	ldr	r3, [r7, #4]
 80088f6:	681b      	ldr	r3, [r3, #0]
 80088f8:	689b      	ldr	r3, [r3, #8]
 80088fa:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80088fe:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8008902:	f640 030f 	movw	r3, #2063	@ 0x80f
 8008906:	4013      	ands	r3, r2
 8008908:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 800890c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8008910:	2b00      	cmp	r3, #0
 8008912:	d115      	bne.n	8008940 <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8008914:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008918:	f003 0320 	and.w	r3, r3, #32
 800891c:	2b00      	cmp	r3, #0
 800891e:	d00f      	beq.n	8008940 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8008920:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008924:	f003 0320 	and.w	r3, r3, #32
 8008928:	2b00      	cmp	r3, #0
 800892a:	d009      	beq.n	8008940 <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 800892c:	687b      	ldr	r3, [r7, #4]
 800892e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8008930:	2b00      	cmp	r3, #0
 8008932:	f000 82ae 	beq.w	8008e92 <HAL_UART_IRQHandler+0x5ba>
      {
        huart->RxISR(huart);
 8008936:	687b      	ldr	r3, [r7, #4]
 8008938:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800893a:	6878      	ldr	r0, [r7, #4]
 800893c:	4798      	blx	r3
      }
      return;
 800893e:	e2a8      	b.n	8008e92 <HAL_UART_IRQHandler+0x5ba>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 8008940:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8008944:	2b00      	cmp	r3, #0
 8008946:	f000 8117 	beq.w	8008b78 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800894a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800894e:	f003 0301 	and.w	r3, r3, #1
 8008952:	2b00      	cmp	r3, #0
 8008954:	d106      	bne.n	8008964 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8008956:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 800895a:	4b85      	ldr	r3, [pc, #532]	@ (8008b70 <HAL_UART_IRQHandler+0x298>)
 800895c:	4013      	ands	r3, r2
 800895e:	2b00      	cmp	r3, #0
 8008960:	f000 810a 	beq.w	8008b78 <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8008964:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008968:	f003 0301 	and.w	r3, r3, #1
 800896c:	2b00      	cmp	r3, #0
 800896e:	d011      	beq.n	8008994 <HAL_UART_IRQHandler+0xbc>
 8008970:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008974:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008978:	2b00      	cmp	r3, #0
 800897a:	d00b      	beq.n	8008994 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800897c:	687b      	ldr	r3, [r7, #4]
 800897e:	681b      	ldr	r3, [r3, #0]
 8008980:	2201      	movs	r2, #1
 8008982:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8008984:	687b      	ldr	r3, [r7, #4]
 8008986:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800898a:	f043 0201 	orr.w	r2, r3, #1
 800898e:	687b      	ldr	r3, [r7, #4]
 8008990:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008994:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008998:	f003 0302 	and.w	r3, r3, #2
 800899c:	2b00      	cmp	r3, #0
 800899e:	d011      	beq.n	80089c4 <HAL_UART_IRQHandler+0xec>
 80089a0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80089a4:	f003 0301 	and.w	r3, r3, #1
 80089a8:	2b00      	cmp	r3, #0
 80089aa:	d00b      	beq.n	80089c4 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80089ac:	687b      	ldr	r3, [r7, #4]
 80089ae:	681b      	ldr	r3, [r3, #0]
 80089b0:	2202      	movs	r2, #2
 80089b2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80089b4:	687b      	ldr	r3, [r7, #4]
 80089b6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80089ba:	f043 0204 	orr.w	r2, r3, #4
 80089be:	687b      	ldr	r3, [r7, #4]
 80089c0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80089c4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80089c8:	f003 0304 	and.w	r3, r3, #4
 80089cc:	2b00      	cmp	r3, #0
 80089ce:	d011      	beq.n	80089f4 <HAL_UART_IRQHandler+0x11c>
 80089d0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80089d4:	f003 0301 	and.w	r3, r3, #1
 80089d8:	2b00      	cmp	r3, #0
 80089da:	d00b      	beq.n	80089f4 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80089dc:	687b      	ldr	r3, [r7, #4]
 80089de:	681b      	ldr	r3, [r3, #0]
 80089e0:	2204      	movs	r2, #4
 80089e2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80089e4:	687b      	ldr	r3, [r7, #4]
 80089e6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80089ea:	f043 0202 	orr.w	r2, r3, #2
 80089ee:	687b      	ldr	r3, [r7, #4]
 80089f0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 80089f4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80089f8:	f003 0308 	and.w	r3, r3, #8
 80089fc:	2b00      	cmp	r3, #0
 80089fe:	d017      	beq.n	8008a30 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8008a00:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008a04:	f003 0320 	and.w	r3, r3, #32
 8008a08:	2b00      	cmp	r3, #0
 8008a0a:	d105      	bne.n	8008a18 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8008a0c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008a10:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8008a14:	2b00      	cmp	r3, #0
 8008a16:	d00b      	beq.n	8008a30 <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8008a18:	687b      	ldr	r3, [r7, #4]
 8008a1a:	681b      	ldr	r3, [r3, #0]
 8008a1c:	2208      	movs	r2, #8
 8008a1e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8008a20:	687b      	ldr	r3, [r7, #4]
 8008a22:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008a26:	f043 0208 	orr.w	r2, r3, #8
 8008a2a:	687b      	ldr	r3, [r7, #4]
 8008a2c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8008a30:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008a34:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8008a38:	2b00      	cmp	r3, #0
 8008a3a:	d012      	beq.n	8008a62 <HAL_UART_IRQHandler+0x18a>
 8008a3c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008a40:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8008a44:	2b00      	cmp	r3, #0
 8008a46:	d00c      	beq.n	8008a62 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008a48:	687b      	ldr	r3, [r7, #4]
 8008a4a:	681b      	ldr	r3, [r3, #0]
 8008a4c:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8008a50:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8008a52:	687b      	ldr	r3, [r7, #4]
 8008a54:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008a58:	f043 0220 	orr.w	r2, r3, #32
 8008a5c:	687b      	ldr	r3, [r7, #4]
 8008a5e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8008a62:	687b      	ldr	r3, [r7, #4]
 8008a64:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008a68:	2b00      	cmp	r3, #0
 8008a6a:	f000 8214 	beq.w	8008e96 <HAL_UART_IRQHandler+0x5be>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8008a6e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008a72:	f003 0320 	and.w	r3, r3, #32
 8008a76:	2b00      	cmp	r3, #0
 8008a78:	d00d      	beq.n	8008a96 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8008a7a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008a7e:	f003 0320 	and.w	r3, r3, #32
 8008a82:	2b00      	cmp	r3, #0
 8008a84:	d007      	beq.n	8008a96 <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 8008a86:	687b      	ldr	r3, [r7, #4]
 8008a88:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8008a8a:	2b00      	cmp	r3, #0
 8008a8c:	d003      	beq.n	8008a96 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8008a8e:	687b      	ldr	r3, [r7, #4]
 8008a90:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8008a92:	6878      	ldr	r0, [r7, #4]
 8008a94:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8008a96:	687b      	ldr	r3, [r7, #4]
 8008a98:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008a9c:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8008aa0:	687b      	ldr	r3, [r7, #4]
 8008aa2:	681b      	ldr	r3, [r3, #0]
 8008aa4:	689b      	ldr	r3, [r3, #8]
 8008aa6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008aaa:	2b40      	cmp	r3, #64	@ 0x40
 8008aac:	d005      	beq.n	8008aba <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8008aae:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8008ab2:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8008ab6:	2b00      	cmp	r3, #0
 8008ab8:	d04f      	beq.n	8008b5a <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8008aba:	6878      	ldr	r0, [r7, #4]
 8008abc:	f000 fed8 	bl	8009870 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008ac0:	687b      	ldr	r3, [r7, #4]
 8008ac2:	681b      	ldr	r3, [r3, #0]
 8008ac4:	689b      	ldr	r3, [r3, #8]
 8008ac6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008aca:	2b40      	cmp	r3, #64	@ 0x40
 8008acc:	d141      	bne.n	8008b52 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008ace:	687b      	ldr	r3, [r7, #4]
 8008ad0:	681b      	ldr	r3, [r3, #0]
 8008ad2:	3308      	adds	r3, #8
 8008ad4:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ad8:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8008adc:	e853 3f00 	ldrex	r3, [r3]
 8008ae0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8008ae4:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8008ae8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008aec:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8008af0:	687b      	ldr	r3, [r7, #4]
 8008af2:	681b      	ldr	r3, [r3, #0]
 8008af4:	3308      	adds	r3, #8
 8008af6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8008afa:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8008afe:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b02:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8008b06:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8008b0a:	e841 2300 	strex	r3, r2, [r1]
 8008b0e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8008b12:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8008b16:	2b00      	cmp	r3, #0
 8008b18:	d1d9      	bne.n	8008ace <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8008b1a:	687b      	ldr	r3, [r7, #4]
 8008b1c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008b1e:	2b00      	cmp	r3, #0
 8008b20:	d013      	beq.n	8008b4a <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8008b22:	687b      	ldr	r3, [r7, #4]
 8008b24:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008b26:	4a13      	ldr	r2, [pc, #76]	@ (8008b74 <HAL_UART_IRQHandler+0x29c>)
 8008b28:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8008b2a:	687b      	ldr	r3, [r7, #4]
 8008b2c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008b2e:	4618      	mov	r0, r3
 8008b30:	f7fa fd22 	bl	8003578 <HAL_DMA_Abort_IT>
 8008b34:	4603      	mov	r3, r0
 8008b36:	2b00      	cmp	r3, #0
 8008b38:	d017      	beq.n	8008b6a <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8008b3a:	687b      	ldr	r3, [r7, #4]
 8008b3c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008b3e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008b40:	687a      	ldr	r2, [r7, #4]
 8008b42:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8008b44:	4610      	mov	r0, r2
 8008b46:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008b48:	e00f      	b.n	8008b6a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8008b4a:	6878      	ldr	r0, [r7, #4]
 8008b4c:	f000 f9d6 	bl	8008efc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008b50:	e00b      	b.n	8008b6a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8008b52:	6878      	ldr	r0, [r7, #4]
 8008b54:	f000 f9d2 	bl	8008efc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008b58:	e007      	b.n	8008b6a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8008b5a:	6878      	ldr	r0, [r7, #4]
 8008b5c:	f000 f9ce 	bl	8008efc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008b60:	687b      	ldr	r3, [r7, #4]
 8008b62:	2200      	movs	r2, #0
 8008b64:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      }
    }
    return;
 8008b68:	e195      	b.n	8008e96 <HAL_UART_IRQHandler+0x5be>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008b6a:	bf00      	nop
    return;
 8008b6c:	e193      	b.n	8008e96 <HAL_UART_IRQHandler+0x5be>
 8008b6e:	bf00      	nop
 8008b70:	04000120 	.word	0x04000120
 8008b74:	08009bd7 	.word	0x08009bd7

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008b78:	687b      	ldr	r3, [r7, #4]
 8008b7a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008b7c:	2b01      	cmp	r3, #1
 8008b7e:	f040 814e 	bne.w	8008e1e <HAL_UART_IRQHandler+0x546>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8008b82:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008b86:	f003 0310 	and.w	r3, r3, #16
 8008b8a:	2b00      	cmp	r3, #0
 8008b8c:	f000 8147 	beq.w	8008e1e <HAL_UART_IRQHandler+0x546>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8008b90:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008b94:	f003 0310 	and.w	r3, r3, #16
 8008b98:	2b00      	cmp	r3, #0
 8008b9a:	f000 8140 	beq.w	8008e1e <HAL_UART_IRQHandler+0x546>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8008b9e:	687b      	ldr	r3, [r7, #4]
 8008ba0:	681b      	ldr	r3, [r3, #0]
 8008ba2:	2210      	movs	r2, #16
 8008ba4:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008ba6:	687b      	ldr	r3, [r7, #4]
 8008ba8:	681b      	ldr	r3, [r3, #0]
 8008baa:	689b      	ldr	r3, [r3, #8]
 8008bac:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008bb0:	2b40      	cmp	r3, #64	@ 0x40
 8008bb2:	f040 80b8 	bne.w	8008d26 <HAL_UART_IRQHandler+0x44e>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8008bb6:	687b      	ldr	r3, [r7, #4]
 8008bb8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008bba:	681b      	ldr	r3, [r3, #0]
 8008bbc:	685b      	ldr	r3, [r3, #4]
 8008bbe:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8008bc2:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8008bc6:	2b00      	cmp	r3, #0
 8008bc8:	f000 8167 	beq.w	8008e9a <HAL_UART_IRQHandler+0x5c2>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8008bcc:	687b      	ldr	r3, [r7, #4]
 8008bce:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8008bd2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8008bd6:	429a      	cmp	r2, r3
 8008bd8:	f080 815f 	bcs.w	8008e9a <HAL_UART_IRQHandler+0x5c2>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8008bdc:	687b      	ldr	r3, [r7, #4]
 8008bde:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8008be2:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8008be6:	687b      	ldr	r3, [r7, #4]
 8008be8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008bea:	681b      	ldr	r3, [r3, #0]
 8008bec:	681b      	ldr	r3, [r3, #0]
 8008bee:	f003 0320 	and.w	r3, r3, #32
 8008bf2:	2b00      	cmp	r3, #0
 8008bf4:	f040 8086 	bne.w	8008d04 <HAL_UART_IRQHandler+0x42c>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008bf8:	687b      	ldr	r3, [r7, #4]
 8008bfa:	681b      	ldr	r3, [r3, #0]
 8008bfc:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008c00:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8008c04:	e853 3f00 	ldrex	r3, [r3]
 8008c08:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8008c0c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8008c10:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008c14:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8008c18:	687b      	ldr	r3, [r7, #4]
 8008c1a:	681b      	ldr	r3, [r3, #0]
 8008c1c:	461a      	mov	r2, r3
 8008c1e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8008c22:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8008c26:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008c2a:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8008c2e:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8008c32:	e841 2300 	strex	r3, r2, [r1]
 8008c36:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8008c3a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8008c3e:	2b00      	cmp	r3, #0
 8008c40:	d1da      	bne.n	8008bf8 <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008c42:	687b      	ldr	r3, [r7, #4]
 8008c44:	681b      	ldr	r3, [r3, #0]
 8008c46:	3308      	adds	r3, #8
 8008c48:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008c4a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8008c4c:	e853 3f00 	ldrex	r3, [r3]
 8008c50:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8008c52:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8008c54:	f023 0301 	bic.w	r3, r3, #1
 8008c58:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8008c5c:	687b      	ldr	r3, [r7, #4]
 8008c5e:	681b      	ldr	r3, [r3, #0]
 8008c60:	3308      	adds	r3, #8
 8008c62:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8008c66:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8008c6a:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008c6c:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8008c6e:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8008c72:	e841 2300 	strex	r3, r2, [r1]
 8008c76:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8008c78:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8008c7a:	2b00      	cmp	r3, #0
 8008c7c:	d1e1      	bne.n	8008c42 <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008c7e:	687b      	ldr	r3, [r7, #4]
 8008c80:	681b      	ldr	r3, [r3, #0]
 8008c82:	3308      	adds	r3, #8
 8008c84:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008c86:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8008c88:	e853 3f00 	ldrex	r3, [r3]
 8008c8c:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8008c8e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8008c90:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008c94:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8008c98:	687b      	ldr	r3, [r7, #4]
 8008c9a:	681b      	ldr	r3, [r3, #0]
 8008c9c:	3308      	adds	r3, #8
 8008c9e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8008ca2:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8008ca4:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008ca6:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8008ca8:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8008caa:	e841 2300 	strex	r3, r2, [r1]
 8008cae:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8008cb0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8008cb2:	2b00      	cmp	r3, #0
 8008cb4:	d1e3      	bne.n	8008c7e <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8008cb6:	687b      	ldr	r3, [r7, #4]
 8008cb8:	2220      	movs	r2, #32
 8008cba:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008cbe:	687b      	ldr	r3, [r7, #4]
 8008cc0:	2200      	movs	r2, #0
 8008cc2:	661a      	str	r2, [r3, #96]	@ 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008cc4:	687b      	ldr	r3, [r7, #4]
 8008cc6:	681b      	ldr	r3, [r3, #0]
 8008cc8:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008cca:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008ccc:	e853 3f00 	ldrex	r3, [r3]
 8008cd0:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8008cd2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008cd4:	f023 0310 	bic.w	r3, r3, #16
 8008cd8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8008cdc:	687b      	ldr	r3, [r7, #4]
 8008cde:	681b      	ldr	r3, [r3, #0]
 8008ce0:	461a      	mov	r2, r3
 8008ce2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008ce6:	65bb      	str	r3, [r7, #88]	@ 0x58
 8008ce8:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008cea:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8008cec:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8008cee:	e841 2300 	strex	r3, r2, [r1]
 8008cf2:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8008cf4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008cf6:	2b00      	cmp	r3, #0
 8008cf8:	d1e4      	bne.n	8008cc4 <HAL_UART_IRQHandler+0x3ec>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8008cfa:	687b      	ldr	r3, [r7, #4]
 8008cfc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008cfe:	4618      	mov	r0, r3
 8008d00:	f7fa fbfc 	bl	80034fc <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8008d04:	687b      	ldr	r3, [r7, #4]
 8008d06:	2202      	movs	r2, #2
 8008d08:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8008d0a:	687b      	ldr	r3, [r7, #4]
 8008d0c:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8008d10:	687b      	ldr	r3, [r7, #4]
 8008d12:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8008d16:	b29b      	uxth	r3, r3
 8008d18:	1ad3      	subs	r3, r2, r3
 8008d1a:	b29b      	uxth	r3, r3
 8008d1c:	4619      	mov	r1, r3
 8008d1e:	6878      	ldr	r0, [r7, #4]
 8008d20:	f000 f8f6 	bl	8008f10 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8008d24:	e0b9      	b.n	8008e9a <HAL_UART_IRQHandler+0x5c2>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8008d26:	687b      	ldr	r3, [r7, #4]
 8008d28:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8008d2c:	687b      	ldr	r3, [r7, #4]
 8008d2e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8008d32:	b29b      	uxth	r3, r3
 8008d34:	1ad3      	subs	r3, r2, r3
 8008d36:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8008d3a:	687b      	ldr	r3, [r7, #4]
 8008d3c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8008d40:	b29b      	uxth	r3, r3
 8008d42:	2b00      	cmp	r3, #0
 8008d44:	f000 80ab 	beq.w	8008e9e <HAL_UART_IRQHandler+0x5c6>
          && (nb_rx_data > 0U))
 8008d48:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8008d4c:	2b00      	cmp	r3, #0
 8008d4e:	f000 80a6 	beq.w	8008e9e <HAL_UART_IRQHandler+0x5c6>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008d52:	687b      	ldr	r3, [r7, #4]
 8008d54:	681b      	ldr	r3, [r3, #0]
 8008d56:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d58:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008d5a:	e853 3f00 	ldrex	r3, [r3]
 8008d5e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8008d60:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008d62:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008d66:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8008d6a:	687b      	ldr	r3, [r7, #4]
 8008d6c:	681b      	ldr	r3, [r3, #0]
 8008d6e:	461a      	mov	r2, r3
 8008d70:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8008d74:	647b      	str	r3, [r7, #68]	@ 0x44
 8008d76:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d78:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8008d7a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008d7c:	e841 2300 	strex	r3, r2, [r1]
 8008d80:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8008d82:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008d84:	2b00      	cmp	r3, #0
 8008d86:	d1e4      	bne.n	8008d52 <HAL_UART_IRQHandler+0x47a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008d88:	687b      	ldr	r3, [r7, #4]
 8008d8a:	681b      	ldr	r3, [r3, #0]
 8008d8c:	3308      	adds	r3, #8
 8008d8e:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008d92:	e853 3f00 	ldrex	r3, [r3]
 8008d96:	623b      	str	r3, [r7, #32]
   return(result);
 8008d98:	6a3b      	ldr	r3, [r7, #32]
 8008d9a:	f023 0301 	bic.w	r3, r3, #1
 8008d9e:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8008da2:	687b      	ldr	r3, [r7, #4]
 8008da4:	681b      	ldr	r3, [r3, #0]
 8008da6:	3308      	adds	r3, #8
 8008da8:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8008dac:	633a      	str	r2, [r7, #48]	@ 0x30
 8008dae:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008db0:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008db2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008db4:	e841 2300 	strex	r3, r2, [r1]
 8008db8:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8008dba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008dbc:	2b00      	cmp	r3, #0
 8008dbe:	d1e3      	bne.n	8008d88 <HAL_UART_IRQHandler+0x4b0>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8008dc0:	687b      	ldr	r3, [r7, #4]
 8008dc2:	2220      	movs	r2, #32
 8008dc4:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008dc8:	687b      	ldr	r3, [r7, #4]
 8008dca:	2200      	movs	r2, #0
 8008dcc:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8008dce:	687b      	ldr	r3, [r7, #4]
 8008dd0:	2200      	movs	r2, #0
 8008dd2:	669a      	str	r2, [r3, #104]	@ 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008dd4:	687b      	ldr	r3, [r7, #4]
 8008dd6:	681b      	ldr	r3, [r3, #0]
 8008dd8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008dda:	693b      	ldr	r3, [r7, #16]
 8008ddc:	e853 3f00 	ldrex	r3, [r3]
 8008de0:	60fb      	str	r3, [r7, #12]
   return(result);
 8008de2:	68fb      	ldr	r3, [r7, #12]
 8008de4:	f023 0310 	bic.w	r3, r3, #16
 8008de8:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8008dec:	687b      	ldr	r3, [r7, #4]
 8008dee:	681b      	ldr	r3, [r3, #0]
 8008df0:	461a      	mov	r2, r3
 8008df2:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8008df6:	61fb      	str	r3, [r7, #28]
 8008df8:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008dfa:	69b9      	ldr	r1, [r7, #24]
 8008dfc:	69fa      	ldr	r2, [r7, #28]
 8008dfe:	e841 2300 	strex	r3, r2, [r1]
 8008e02:	617b      	str	r3, [r7, #20]
   return(result);
 8008e04:	697b      	ldr	r3, [r7, #20]
 8008e06:	2b00      	cmp	r3, #0
 8008e08:	d1e4      	bne.n	8008dd4 <HAL_UART_IRQHandler+0x4fc>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8008e0a:	687b      	ldr	r3, [r7, #4]
 8008e0c:	2202      	movs	r2, #2
 8008e0e:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8008e10:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8008e14:	4619      	mov	r1, r3
 8008e16:	6878      	ldr	r0, [r7, #4]
 8008e18:	f000 f87a 	bl	8008f10 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8008e1c:	e03f      	b.n	8008e9e <HAL_UART_IRQHandler+0x5c6>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8008e1e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008e22:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8008e26:	2b00      	cmp	r3, #0
 8008e28:	d00e      	beq.n	8008e48 <HAL_UART_IRQHandler+0x570>
 8008e2a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008e2e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8008e32:	2b00      	cmp	r3, #0
 8008e34:	d008      	beq.n	8008e48 <HAL_UART_IRQHandler+0x570>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8008e36:	687b      	ldr	r3, [r7, #4]
 8008e38:	681b      	ldr	r3, [r3, #0]
 8008e3a:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8008e3e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8008e40:	6878      	ldr	r0, [r7, #4]
 8008e42:	f000 ff08 	bl	8009c56 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8008e46:	e02d      	b.n	8008ea4 <HAL_UART_IRQHandler+0x5cc>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 8008e48:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008e4c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008e50:	2b00      	cmp	r3, #0
 8008e52:	d00e      	beq.n	8008e72 <HAL_UART_IRQHandler+0x59a>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8008e54:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008e58:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008e5c:	2b00      	cmp	r3, #0
 8008e5e:	d008      	beq.n	8008e72 <HAL_UART_IRQHandler+0x59a>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 8008e60:	687b      	ldr	r3, [r7, #4]
 8008e62:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008e64:	2b00      	cmp	r3, #0
 8008e66:	d01c      	beq.n	8008ea2 <HAL_UART_IRQHandler+0x5ca>
    {
      huart->TxISR(huart);
 8008e68:	687b      	ldr	r3, [r7, #4]
 8008e6a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008e6c:	6878      	ldr	r0, [r7, #4]
 8008e6e:	4798      	blx	r3
    }
    return;
 8008e70:	e017      	b.n	8008ea2 <HAL_UART_IRQHandler+0x5ca>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8008e72:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008e76:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008e7a:	2b00      	cmp	r3, #0
 8008e7c:	d012      	beq.n	8008ea4 <HAL_UART_IRQHandler+0x5cc>
 8008e7e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008e82:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008e86:	2b00      	cmp	r3, #0
 8008e88:	d00c      	beq.n	8008ea4 <HAL_UART_IRQHandler+0x5cc>
  {
    UART_EndTransmit_IT(huart);
 8008e8a:	6878      	ldr	r0, [r7, #4]
 8008e8c:	f000 feb9 	bl	8009c02 <UART_EndTransmit_IT>
    return;
 8008e90:	e008      	b.n	8008ea4 <HAL_UART_IRQHandler+0x5cc>
      return;
 8008e92:	bf00      	nop
 8008e94:	e006      	b.n	8008ea4 <HAL_UART_IRQHandler+0x5cc>
    return;
 8008e96:	bf00      	nop
 8008e98:	e004      	b.n	8008ea4 <HAL_UART_IRQHandler+0x5cc>
      return;
 8008e9a:	bf00      	nop
 8008e9c:	e002      	b.n	8008ea4 <HAL_UART_IRQHandler+0x5cc>
      return;
 8008e9e:	bf00      	nop
 8008ea0:	e000      	b.n	8008ea4 <HAL_UART_IRQHandler+0x5cc>
    return;
 8008ea2:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 8008ea4:	37e8      	adds	r7, #232	@ 0xe8
 8008ea6:	46bd      	mov	sp, r7
 8008ea8:	bd80      	pop	{r7, pc}
 8008eaa:	bf00      	nop

08008eac <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8008eac:	b480      	push	{r7}
 8008eae:	b083      	sub	sp, #12
 8008eb0:	af00      	add	r7, sp, #0
 8008eb2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8008eb4:	bf00      	nop
 8008eb6:	370c      	adds	r7, #12
 8008eb8:	46bd      	mov	sp, r7
 8008eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ebe:	4770      	bx	lr

08008ec0 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8008ec0:	b480      	push	{r7}
 8008ec2:	b083      	sub	sp, #12
 8008ec4:	af00      	add	r7, sp, #0
 8008ec6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 8008ec8:	bf00      	nop
 8008eca:	370c      	adds	r7, #12
 8008ecc:	46bd      	mov	sp, r7
 8008ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ed2:	4770      	bx	lr

08008ed4 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8008ed4:	b480      	push	{r7}
 8008ed6:	b083      	sub	sp, #12
 8008ed8:	af00      	add	r7, sp, #0
 8008eda:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 8008edc:	bf00      	nop
 8008ede:	370c      	adds	r7, #12
 8008ee0:	46bd      	mov	sp, r7
 8008ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ee6:	4770      	bx	lr

08008ee8 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8008ee8:	b480      	push	{r7}
 8008eea:	b083      	sub	sp, #12
 8008eec:	af00      	add	r7, sp, #0
 8008eee:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8008ef0:	bf00      	nop
 8008ef2:	370c      	adds	r7, #12
 8008ef4:	46bd      	mov	sp, r7
 8008ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008efa:	4770      	bx	lr

08008efc <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8008efc:	b480      	push	{r7}
 8008efe:	b083      	sub	sp, #12
 8008f00:	af00      	add	r7, sp, #0
 8008f02:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8008f04:	bf00      	nop
 8008f06:	370c      	adds	r7, #12
 8008f08:	46bd      	mov	sp, r7
 8008f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f0e:	4770      	bx	lr

08008f10 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8008f10:	b480      	push	{r7}
 8008f12:	b083      	sub	sp, #12
 8008f14:	af00      	add	r7, sp, #0
 8008f16:	6078      	str	r0, [r7, #4]
 8008f18:	460b      	mov	r3, r1
 8008f1a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8008f1c:	bf00      	nop
 8008f1e:	370c      	adds	r7, #12
 8008f20:	46bd      	mov	sp, r7
 8008f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f26:	4770      	bx	lr

08008f28 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008f28:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008f2c:	b08a      	sub	sp, #40	@ 0x28
 8008f2e:	af00      	add	r7, sp, #0
 8008f30:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8008f32:	2300      	movs	r3, #0
 8008f34:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8008f38:	68fb      	ldr	r3, [r7, #12]
 8008f3a:	689a      	ldr	r2, [r3, #8]
 8008f3c:	68fb      	ldr	r3, [r7, #12]
 8008f3e:	691b      	ldr	r3, [r3, #16]
 8008f40:	431a      	orrs	r2, r3
 8008f42:	68fb      	ldr	r3, [r7, #12]
 8008f44:	695b      	ldr	r3, [r3, #20]
 8008f46:	431a      	orrs	r2, r3
 8008f48:	68fb      	ldr	r3, [r7, #12]
 8008f4a:	69db      	ldr	r3, [r3, #28]
 8008f4c:	4313      	orrs	r3, r2
 8008f4e:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8008f50:	68fb      	ldr	r3, [r7, #12]
 8008f52:	681b      	ldr	r3, [r3, #0]
 8008f54:	681a      	ldr	r2, [r3, #0]
 8008f56:	4bb4      	ldr	r3, [pc, #720]	@ (8009228 <UART_SetConfig+0x300>)
 8008f58:	4013      	ands	r3, r2
 8008f5a:	68fa      	ldr	r2, [r7, #12]
 8008f5c:	6812      	ldr	r2, [r2, #0]
 8008f5e:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8008f60:	430b      	orrs	r3, r1
 8008f62:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008f64:	68fb      	ldr	r3, [r7, #12]
 8008f66:	681b      	ldr	r3, [r3, #0]
 8008f68:	685b      	ldr	r3, [r3, #4]
 8008f6a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8008f6e:	68fb      	ldr	r3, [r7, #12]
 8008f70:	68da      	ldr	r2, [r3, #12]
 8008f72:	68fb      	ldr	r3, [r7, #12]
 8008f74:	681b      	ldr	r3, [r3, #0]
 8008f76:	430a      	orrs	r2, r1
 8008f78:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8008f7a:	68fb      	ldr	r3, [r7, #12]
 8008f7c:	699b      	ldr	r3, [r3, #24]
 8008f7e:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8008f80:	68fb      	ldr	r3, [r7, #12]
 8008f82:	681b      	ldr	r3, [r3, #0]
 8008f84:	4aa9      	ldr	r2, [pc, #676]	@ (800922c <UART_SetConfig+0x304>)
 8008f86:	4293      	cmp	r3, r2
 8008f88:	d004      	beq.n	8008f94 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8008f8a:	68fb      	ldr	r3, [r7, #12]
 8008f8c:	6a1b      	ldr	r3, [r3, #32]
 8008f8e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008f90:	4313      	orrs	r3, r2
 8008f92:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8008f94:	68fb      	ldr	r3, [r7, #12]
 8008f96:	681b      	ldr	r3, [r3, #0]
 8008f98:	689b      	ldr	r3, [r3, #8]
 8008f9a:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8008f9e:	68fb      	ldr	r3, [r7, #12]
 8008fa0:	681b      	ldr	r3, [r3, #0]
 8008fa2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008fa4:	430a      	orrs	r2, r1
 8008fa6:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8008fa8:	68fb      	ldr	r3, [r7, #12]
 8008faa:	681b      	ldr	r3, [r3, #0]
 8008fac:	4aa0      	ldr	r2, [pc, #640]	@ (8009230 <UART_SetConfig+0x308>)
 8008fae:	4293      	cmp	r3, r2
 8008fb0:	d126      	bne.n	8009000 <UART_SetConfig+0xd8>
 8008fb2:	4ba0      	ldr	r3, [pc, #640]	@ (8009234 <UART_SetConfig+0x30c>)
 8008fb4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008fb8:	f003 0303 	and.w	r3, r3, #3
 8008fbc:	2b03      	cmp	r3, #3
 8008fbe:	d81b      	bhi.n	8008ff8 <UART_SetConfig+0xd0>
 8008fc0:	a201      	add	r2, pc, #4	@ (adr r2, 8008fc8 <UART_SetConfig+0xa0>)
 8008fc2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008fc6:	bf00      	nop
 8008fc8:	08008fd9 	.word	0x08008fd9
 8008fcc:	08008fe9 	.word	0x08008fe9
 8008fd0:	08008fe1 	.word	0x08008fe1
 8008fd4:	08008ff1 	.word	0x08008ff1
 8008fd8:	2301      	movs	r3, #1
 8008fda:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8008fde:	e080      	b.n	80090e2 <UART_SetConfig+0x1ba>
 8008fe0:	2302      	movs	r3, #2
 8008fe2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8008fe6:	e07c      	b.n	80090e2 <UART_SetConfig+0x1ba>
 8008fe8:	2304      	movs	r3, #4
 8008fea:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8008fee:	e078      	b.n	80090e2 <UART_SetConfig+0x1ba>
 8008ff0:	2308      	movs	r3, #8
 8008ff2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8008ff6:	e074      	b.n	80090e2 <UART_SetConfig+0x1ba>
 8008ff8:	2310      	movs	r3, #16
 8008ffa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8008ffe:	e070      	b.n	80090e2 <UART_SetConfig+0x1ba>
 8009000:	68fb      	ldr	r3, [r7, #12]
 8009002:	681b      	ldr	r3, [r3, #0]
 8009004:	4a8c      	ldr	r2, [pc, #560]	@ (8009238 <UART_SetConfig+0x310>)
 8009006:	4293      	cmp	r3, r2
 8009008:	d138      	bne.n	800907c <UART_SetConfig+0x154>
 800900a:	4b8a      	ldr	r3, [pc, #552]	@ (8009234 <UART_SetConfig+0x30c>)
 800900c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009010:	f003 030c 	and.w	r3, r3, #12
 8009014:	2b0c      	cmp	r3, #12
 8009016:	d82d      	bhi.n	8009074 <UART_SetConfig+0x14c>
 8009018:	a201      	add	r2, pc, #4	@ (adr r2, 8009020 <UART_SetConfig+0xf8>)
 800901a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800901e:	bf00      	nop
 8009020:	08009055 	.word	0x08009055
 8009024:	08009075 	.word	0x08009075
 8009028:	08009075 	.word	0x08009075
 800902c:	08009075 	.word	0x08009075
 8009030:	08009065 	.word	0x08009065
 8009034:	08009075 	.word	0x08009075
 8009038:	08009075 	.word	0x08009075
 800903c:	08009075 	.word	0x08009075
 8009040:	0800905d 	.word	0x0800905d
 8009044:	08009075 	.word	0x08009075
 8009048:	08009075 	.word	0x08009075
 800904c:	08009075 	.word	0x08009075
 8009050:	0800906d 	.word	0x0800906d
 8009054:	2300      	movs	r3, #0
 8009056:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800905a:	e042      	b.n	80090e2 <UART_SetConfig+0x1ba>
 800905c:	2302      	movs	r3, #2
 800905e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8009062:	e03e      	b.n	80090e2 <UART_SetConfig+0x1ba>
 8009064:	2304      	movs	r3, #4
 8009066:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800906a:	e03a      	b.n	80090e2 <UART_SetConfig+0x1ba>
 800906c:	2308      	movs	r3, #8
 800906e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8009072:	e036      	b.n	80090e2 <UART_SetConfig+0x1ba>
 8009074:	2310      	movs	r3, #16
 8009076:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800907a:	e032      	b.n	80090e2 <UART_SetConfig+0x1ba>
 800907c:	68fb      	ldr	r3, [r7, #12]
 800907e:	681b      	ldr	r3, [r3, #0]
 8009080:	4a6a      	ldr	r2, [pc, #424]	@ (800922c <UART_SetConfig+0x304>)
 8009082:	4293      	cmp	r3, r2
 8009084:	d12a      	bne.n	80090dc <UART_SetConfig+0x1b4>
 8009086:	4b6b      	ldr	r3, [pc, #428]	@ (8009234 <UART_SetConfig+0x30c>)
 8009088:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800908c:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8009090:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8009094:	d01a      	beq.n	80090cc <UART_SetConfig+0x1a4>
 8009096:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800909a:	d81b      	bhi.n	80090d4 <UART_SetConfig+0x1ac>
 800909c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80090a0:	d00c      	beq.n	80090bc <UART_SetConfig+0x194>
 80090a2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80090a6:	d815      	bhi.n	80090d4 <UART_SetConfig+0x1ac>
 80090a8:	2b00      	cmp	r3, #0
 80090aa:	d003      	beq.n	80090b4 <UART_SetConfig+0x18c>
 80090ac:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80090b0:	d008      	beq.n	80090c4 <UART_SetConfig+0x19c>
 80090b2:	e00f      	b.n	80090d4 <UART_SetConfig+0x1ac>
 80090b4:	2300      	movs	r3, #0
 80090b6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80090ba:	e012      	b.n	80090e2 <UART_SetConfig+0x1ba>
 80090bc:	2302      	movs	r3, #2
 80090be:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80090c2:	e00e      	b.n	80090e2 <UART_SetConfig+0x1ba>
 80090c4:	2304      	movs	r3, #4
 80090c6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80090ca:	e00a      	b.n	80090e2 <UART_SetConfig+0x1ba>
 80090cc:	2308      	movs	r3, #8
 80090ce:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80090d2:	e006      	b.n	80090e2 <UART_SetConfig+0x1ba>
 80090d4:	2310      	movs	r3, #16
 80090d6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80090da:	e002      	b.n	80090e2 <UART_SetConfig+0x1ba>
 80090dc:	2310      	movs	r3, #16
 80090de:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80090e2:	68fb      	ldr	r3, [r7, #12]
 80090e4:	681b      	ldr	r3, [r3, #0]
 80090e6:	4a51      	ldr	r2, [pc, #324]	@ (800922c <UART_SetConfig+0x304>)
 80090e8:	4293      	cmp	r3, r2
 80090ea:	d17a      	bne.n	80091e2 <UART_SetConfig+0x2ba>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80090ec:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80090f0:	2b08      	cmp	r3, #8
 80090f2:	d824      	bhi.n	800913e <UART_SetConfig+0x216>
 80090f4:	a201      	add	r2, pc, #4	@ (adr r2, 80090fc <UART_SetConfig+0x1d4>)
 80090f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80090fa:	bf00      	nop
 80090fc:	08009121 	.word	0x08009121
 8009100:	0800913f 	.word	0x0800913f
 8009104:	08009129 	.word	0x08009129
 8009108:	0800913f 	.word	0x0800913f
 800910c:	0800912f 	.word	0x0800912f
 8009110:	0800913f 	.word	0x0800913f
 8009114:	0800913f 	.word	0x0800913f
 8009118:	0800913f 	.word	0x0800913f
 800911c:	08009137 	.word	0x08009137
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009120:	f7fd fc0a 	bl	8006938 <HAL_RCC_GetPCLK1Freq>
 8009124:	61f8      	str	r0, [r7, #28]
        break;
 8009126:	e010      	b.n	800914a <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8009128:	4b44      	ldr	r3, [pc, #272]	@ (800923c <UART_SetConfig+0x314>)
 800912a:	61fb      	str	r3, [r7, #28]
        break;
 800912c:	e00d      	b.n	800914a <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800912e:	f7fd fb6b 	bl	8006808 <HAL_RCC_GetSysClockFreq>
 8009132:	61f8      	str	r0, [r7, #28]
        break;
 8009134:	e009      	b.n	800914a <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009136:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800913a:	61fb      	str	r3, [r7, #28]
        break;
 800913c:	e005      	b.n	800914a <UART_SetConfig+0x222>
      default:
        pclk = 0U;
 800913e:	2300      	movs	r3, #0
 8009140:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8009142:	2301      	movs	r3, #1
 8009144:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8009148:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800914a:	69fb      	ldr	r3, [r7, #28]
 800914c:	2b00      	cmp	r3, #0
 800914e:	f000 8107 	beq.w	8009360 <UART_SetConfig+0x438>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8009152:	68fb      	ldr	r3, [r7, #12]
 8009154:	685a      	ldr	r2, [r3, #4]
 8009156:	4613      	mov	r3, r2
 8009158:	005b      	lsls	r3, r3, #1
 800915a:	4413      	add	r3, r2
 800915c:	69fa      	ldr	r2, [r7, #28]
 800915e:	429a      	cmp	r2, r3
 8009160:	d305      	bcc.n	800916e <UART_SetConfig+0x246>
          (pclk > (4096U * huart->Init.BaudRate)))
 8009162:	68fb      	ldr	r3, [r7, #12]
 8009164:	685b      	ldr	r3, [r3, #4]
 8009166:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8009168:	69fa      	ldr	r2, [r7, #28]
 800916a:	429a      	cmp	r2, r3
 800916c:	d903      	bls.n	8009176 <UART_SetConfig+0x24e>
      {
        ret = HAL_ERROR;
 800916e:	2301      	movs	r3, #1
 8009170:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8009174:	e0f4      	b.n	8009360 <UART_SetConfig+0x438>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8009176:	69fb      	ldr	r3, [r7, #28]
 8009178:	2200      	movs	r2, #0
 800917a:	461c      	mov	r4, r3
 800917c:	4615      	mov	r5, r2
 800917e:	f04f 0200 	mov.w	r2, #0
 8009182:	f04f 0300 	mov.w	r3, #0
 8009186:	022b      	lsls	r3, r5, #8
 8009188:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 800918c:	0222      	lsls	r2, r4, #8
 800918e:	68f9      	ldr	r1, [r7, #12]
 8009190:	6849      	ldr	r1, [r1, #4]
 8009192:	0849      	lsrs	r1, r1, #1
 8009194:	2000      	movs	r0, #0
 8009196:	4688      	mov	r8, r1
 8009198:	4681      	mov	r9, r0
 800919a:	eb12 0a08 	adds.w	sl, r2, r8
 800919e:	eb43 0b09 	adc.w	fp, r3, r9
 80091a2:	68fb      	ldr	r3, [r7, #12]
 80091a4:	685b      	ldr	r3, [r3, #4]
 80091a6:	2200      	movs	r2, #0
 80091a8:	603b      	str	r3, [r7, #0]
 80091aa:	607a      	str	r2, [r7, #4]
 80091ac:	e9d7 2300 	ldrd	r2, r3, [r7]
 80091b0:	4650      	mov	r0, sl
 80091b2:	4659      	mov	r1, fp
 80091b4:	f7f7 fda0 	bl	8000cf8 <__aeabi_uldivmod>
 80091b8:	4602      	mov	r2, r0
 80091ba:	460b      	mov	r3, r1
 80091bc:	4613      	mov	r3, r2
 80091be:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80091c0:	69bb      	ldr	r3, [r7, #24]
 80091c2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80091c6:	d308      	bcc.n	80091da <UART_SetConfig+0x2b2>
 80091c8:	69bb      	ldr	r3, [r7, #24]
 80091ca:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80091ce:	d204      	bcs.n	80091da <UART_SetConfig+0x2b2>
        {
          huart->Instance->BRR = usartdiv;
 80091d0:	68fb      	ldr	r3, [r7, #12]
 80091d2:	681b      	ldr	r3, [r3, #0]
 80091d4:	69ba      	ldr	r2, [r7, #24]
 80091d6:	60da      	str	r2, [r3, #12]
 80091d8:	e0c2      	b.n	8009360 <UART_SetConfig+0x438>
        }
        else
        {
          ret = HAL_ERROR;
 80091da:	2301      	movs	r3, #1
 80091dc:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 80091e0:	e0be      	b.n	8009360 <UART_SetConfig+0x438>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80091e2:	68fb      	ldr	r3, [r7, #12]
 80091e4:	69db      	ldr	r3, [r3, #28]
 80091e6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80091ea:	d16a      	bne.n	80092c2 <UART_SetConfig+0x39a>
  {
    switch (clocksource)
 80091ec:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80091f0:	2b08      	cmp	r3, #8
 80091f2:	d834      	bhi.n	800925e <UART_SetConfig+0x336>
 80091f4:	a201      	add	r2, pc, #4	@ (adr r2, 80091fc <UART_SetConfig+0x2d4>)
 80091f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80091fa:	bf00      	nop
 80091fc:	08009221 	.word	0x08009221
 8009200:	08009241 	.word	0x08009241
 8009204:	08009249 	.word	0x08009249
 8009208:	0800925f 	.word	0x0800925f
 800920c:	0800924f 	.word	0x0800924f
 8009210:	0800925f 	.word	0x0800925f
 8009214:	0800925f 	.word	0x0800925f
 8009218:	0800925f 	.word	0x0800925f
 800921c:	08009257 	.word	0x08009257
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009220:	f7fd fb8a 	bl	8006938 <HAL_RCC_GetPCLK1Freq>
 8009224:	61f8      	str	r0, [r7, #28]
        break;
 8009226:	e020      	b.n	800926a <UART_SetConfig+0x342>
 8009228:	efff69f3 	.word	0xefff69f3
 800922c:	40008000 	.word	0x40008000
 8009230:	40013800 	.word	0x40013800
 8009234:	40021000 	.word	0x40021000
 8009238:	40004400 	.word	0x40004400
 800923c:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009240:	f7fd fb90 	bl	8006964 <HAL_RCC_GetPCLK2Freq>
 8009244:	61f8      	str	r0, [r7, #28]
        break;
 8009246:	e010      	b.n	800926a <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8009248:	4b4c      	ldr	r3, [pc, #304]	@ (800937c <UART_SetConfig+0x454>)
 800924a:	61fb      	str	r3, [r7, #28]
        break;
 800924c:	e00d      	b.n	800926a <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800924e:	f7fd fadb 	bl	8006808 <HAL_RCC_GetSysClockFreq>
 8009252:	61f8      	str	r0, [r7, #28]
        break;
 8009254:	e009      	b.n	800926a <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009256:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800925a:	61fb      	str	r3, [r7, #28]
        break;
 800925c:	e005      	b.n	800926a <UART_SetConfig+0x342>
      default:
        pclk = 0U;
 800925e:	2300      	movs	r3, #0
 8009260:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8009262:	2301      	movs	r3, #1
 8009264:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8009268:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800926a:	69fb      	ldr	r3, [r7, #28]
 800926c:	2b00      	cmp	r3, #0
 800926e:	d077      	beq.n	8009360 <UART_SetConfig+0x438>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8009270:	69fb      	ldr	r3, [r7, #28]
 8009272:	005a      	lsls	r2, r3, #1
 8009274:	68fb      	ldr	r3, [r7, #12]
 8009276:	685b      	ldr	r3, [r3, #4]
 8009278:	085b      	lsrs	r3, r3, #1
 800927a:	441a      	add	r2, r3
 800927c:	68fb      	ldr	r3, [r7, #12]
 800927e:	685b      	ldr	r3, [r3, #4]
 8009280:	fbb2 f3f3 	udiv	r3, r2, r3
 8009284:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009286:	69bb      	ldr	r3, [r7, #24]
 8009288:	2b0f      	cmp	r3, #15
 800928a:	d916      	bls.n	80092ba <UART_SetConfig+0x392>
 800928c:	69bb      	ldr	r3, [r7, #24]
 800928e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009292:	d212      	bcs.n	80092ba <UART_SetConfig+0x392>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8009294:	69bb      	ldr	r3, [r7, #24]
 8009296:	b29b      	uxth	r3, r3
 8009298:	f023 030f 	bic.w	r3, r3, #15
 800929c:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800929e:	69bb      	ldr	r3, [r7, #24]
 80092a0:	085b      	lsrs	r3, r3, #1
 80092a2:	b29b      	uxth	r3, r3
 80092a4:	f003 0307 	and.w	r3, r3, #7
 80092a8:	b29a      	uxth	r2, r3
 80092aa:	8afb      	ldrh	r3, [r7, #22]
 80092ac:	4313      	orrs	r3, r2
 80092ae:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 80092b0:	68fb      	ldr	r3, [r7, #12]
 80092b2:	681b      	ldr	r3, [r3, #0]
 80092b4:	8afa      	ldrh	r2, [r7, #22]
 80092b6:	60da      	str	r2, [r3, #12]
 80092b8:	e052      	b.n	8009360 <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 80092ba:	2301      	movs	r3, #1
 80092bc:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 80092c0:	e04e      	b.n	8009360 <UART_SetConfig+0x438>
      }
    }
  }
  else
  {
    switch (clocksource)
 80092c2:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80092c6:	2b08      	cmp	r3, #8
 80092c8:	d827      	bhi.n	800931a <UART_SetConfig+0x3f2>
 80092ca:	a201      	add	r2, pc, #4	@ (adr r2, 80092d0 <UART_SetConfig+0x3a8>)
 80092cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80092d0:	080092f5 	.word	0x080092f5
 80092d4:	080092fd 	.word	0x080092fd
 80092d8:	08009305 	.word	0x08009305
 80092dc:	0800931b 	.word	0x0800931b
 80092e0:	0800930b 	.word	0x0800930b
 80092e4:	0800931b 	.word	0x0800931b
 80092e8:	0800931b 	.word	0x0800931b
 80092ec:	0800931b 	.word	0x0800931b
 80092f0:	08009313 	.word	0x08009313
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80092f4:	f7fd fb20 	bl	8006938 <HAL_RCC_GetPCLK1Freq>
 80092f8:	61f8      	str	r0, [r7, #28]
        break;
 80092fa:	e014      	b.n	8009326 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80092fc:	f7fd fb32 	bl	8006964 <HAL_RCC_GetPCLK2Freq>
 8009300:	61f8      	str	r0, [r7, #28]
        break;
 8009302:	e010      	b.n	8009326 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8009304:	4b1d      	ldr	r3, [pc, #116]	@ (800937c <UART_SetConfig+0x454>)
 8009306:	61fb      	str	r3, [r7, #28]
        break;
 8009308:	e00d      	b.n	8009326 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800930a:	f7fd fa7d 	bl	8006808 <HAL_RCC_GetSysClockFreq>
 800930e:	61f8      	str	r0, [r7, #28]
        break;
 8009310:	e009      	b.n	8009326 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009312:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009316:	61fb      	str	r3, [r7, #28]
        break;
 8009318:	e005      	b.n	8009326 <UART_SetConfig+0x3fe>
      default:
        pclk = 0U;
 800931a:	2300      	movs	r3, #0
 800931c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800931e:	2301      	movs	r3, #1
 8009320:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8009324:	bf00      	nop
    }

    if (pclk != 0U)
 8009326:	69fb      	ldr	r3, [r7, #28]
 8009328:	2b00      	cmp	r3, #0
 800932a:	d019      	beq.n	8009360 <UART_SetConfig+0x438>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800932c:	68fb      	ldr	r3, [r7, #12]
 800932e:	685b      	ldr	r3, [r3, #4]
 8009330:	085a      	lsrs	r2, r3, #1
 8009332:	69fb      	ldr	r3, [r7, #28]
 8009334:	441a      	add	r2, r3
 8009336:	68fb      	ldr	r3, [r7, #12]
 8009338:	685b      	ldr	r3, [r3, #4]
 800933a:	fbb2 f3f3 	udiv	r3, r2, r3
 800933e:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009340:	69bb      	ldr	r3, [r7, #24]
 8009342:	2b0f      	cmp	r3, #15
 8009344:	d909      	bls.n	800935a <UART_SetConfig+0x432>
 8009346:	69bb      	ldr	r3, [r7, #24]
 8009348:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800934c:	d205      	bcs.n	800935a <UART_SetConfig+0x432>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800934e:	69bb      	ldr	r3, [r7, #24]
 8009350:	b29a      	uxth	r2, r3
 8009352:	68fb      	ldr	r3, [r7, #12]
 8009354:	681b      	ldr	r3, [r3, #0]
 8009356:	60da      	str	r2, [r3, #12]
 8009358:	e002      	b.n	8009360 <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 800935a:	2301      	movs	r3, #1
 800935c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8009360:	68fb      	ldr	r3, [r7, #12]
 8009362:	2200      	movs	r2, #0
 8009364:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8009366:	68fb      	ldr	r3, [r7, #12]
 8009368:	2200      	movs	r2, #0
 800936a:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 800936c:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 8009370:	4618      	mov	r0, r3
 8009372:	3728      	adds	r7, #40	@ 0x28
 8009374:	46bd      	mov	sp, r7
 8009376:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800937a:	bf00      	nop
 800937c:	00f42400 	.word	0x00f42400

08009380 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8009380:	b480      	push	{r7}
 8009382:	b083      	sub	sp, #12
 8009384:	af00      	add	r7, sp, #0
 8009386:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8009388:	687b      	ldr	r3, [r7, #4]
 800938a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800938c:	f003 0308 	and.w	r3, r3, #8
 8009390:	2b00      	cmp	r3, #0
 8009392:	d00a      	beq.n	80093aa <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8009394:	687b      	ldr	r3, [r7, #4]
 8009396:	681b      	ldr	r3, [r3, #0]
 8009398:	685b      	ldr	r3, [r3, #4]
 800939a:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800939e:	687b      	ldr	r3, [r7, #4]
 80093a0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80093a2:	687b      	ldr	r3, [r7, #4]
 80093a4:	681b      	ldr	r3, [r3, #0]
 80093a6:	430a      	orrs	r2, r1
 80093a8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80093aa:	687b      	ldr	r3, [r7, #4]
 80093ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80093ae:	f003 0301 	and.w	r3, r3, #1
 80093b2:	2b00      	cmp	r3, #0
 80093b4:	d00a      	beq.n	80093cc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80093b6:	687b      	ldr	r3, [r7, #4]
 80093b8:	681b      	ldr	r3, [r3, #0]
 80093ba:	685b      	ldr	r3, [r3, #4]
 80093bc:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80093c0:	687b      	ldr	r3, [r7, #4]
 80093c2:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80093c4:	687b      	ldr	r3, [r7, #4]
 80093c6:	681b      	ldr	r3, [r3, #0]
 80093c8:	430a      	orrs	r2, r1
 80093ca:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80093cc:	687b      	ldr	r3, [r7, #4]
 80093ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80093d0:	f003 0302 	and.w	r3, r3, #2
 80093d4:	2b00      	cmp	r3, #0
 80093d6:	d00a      	beq.n	80093ee <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80093d8:	687b      	ldr	r3, [r7, #4]
 80093da:	681b      	ldr	r3, [r3, #0]
 80093dc:	685b      	ldr	r3, [r3, #4]
 80093de:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80093e2:	687b      	ldr	r3, [r7, #4]
 80093e4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80093e6:	687b      	ldr	r3, [r7, #4]
 80093e8:	681b      	ldr	r3, [r3, #0]
 80093ea:	430a      	orrs	r2, r1
 80093ec:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80093ee:	687b      	ldr	r3, [r7, #4]
 80093f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80093f2:	f003 0304 	and.w	r3, r3, #4
 80093f6:	2b00      	cmp	r3, #0
 80093f8:	d00a      	beq.n	8009410 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80093fa:	687b      	ldr	r3, [r7, #4]
 80093fc:	681b      	ldr	r3, [r3, #0]
 80093fe:	685b      	ldr	r3, [r3, #4]
 8009400:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8009404:	687b      	ldr	r3, [r7, #4]
 8009406:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8009408:	687b      	ldr	r3, [r7, #4]
 800940a:	681b      	ldr	r3, [r3, #0]
 800940c:	430a      	orrs	r2, r1
 800940e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8009410:	687b      	ldr	r3, [r7, #4]
 8009412:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009414:	f003 0310 	and.w	r3, r3, #16
 8009418:	2b00      	cmp	r3, #0
 800941a:	d00a      	beq.n	8009432 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800941c:	687b      	ldr	r3, [r7, #4]
 800941e:	681b      	ldr	r3, [r3, #0]
 8009420:	689b      	ldr	r3, [r3, #8]
 8009422:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8009426:	687b      	ldr	r3, [r7, #4]
 8009428:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800942a:	687b      	ldr	r3, [r7, #4]
 800942c:	681b      	ldr	r3, [r3, #0]
 800942e:	430a      	orrs	r2, r1
 8009430:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8009432:	687b      	ldr	r3, [r7, #4]
 8009434:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009436:	f003 0320 	and.w	r3, r3, #32
 800943a:	2b00      	cmp	r3, #0
 800943c:	d00a      	beq.n	8009454 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800943e:	687b      	ldr	r3, [r7, #4]
 8009440:	681b      	ldr	r3, [r3, #0]
 8009442:	689b      	ldr	r3, [r3, #8]
 8009444:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8009448:	687b      	ldr	r3, [r7, #4]
 800944a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800944c:	687b      	ldr	r3, [r7, #4]
 800944e:	681b      	ldr	r3, [r3, #0]
 8009450:	430a      	orrs	r2, r1
 8009452:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8009454:	687b      	ldr	r3, [r7, #4]
 8009456:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009458:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800945c:	2b00      	cmp	r3, #0
 800945e:	d01a      	beq.n	8009496 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8009460:	687b      	ldr	r3, [r7, #4]
 8009462:	681b      	ldr	r3, [r3, #0]
 8009464:	685b      	ldr	r3, [r3, #4]
 8009466:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800946a:	687b      	ldr	r3, [r7, #4]
 800946c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800946e:	687b      	ldr	r3, [r7, #4]
 8009470:	681b      	ldr	r3, [r3, #0]
 8009472:	430a      	orrs	r2, r1
 8009474:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8009476:	687b      	ldr	r3, [r7, #4]
 8009478:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800947a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800947e:	d10a      	bne.n	8009496 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8009480:	687b      	ldr	r3, [r7, #4]
 8009482:	681b      	ldr	r3, [r3, #0]
 8009484:	685b      	ldr	r3, [r3, #4]
 8009486:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800948a:	687b      	ldr	r3, [r7, #4]
 800948c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800948e:	687b      	ldr	r3, [r7, #4]
 8009490:	681b      	ldr	r3, [r3, #0]
 8009492:	430a      	orrs	r2, r1
 8009494:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8009496:	687b      	ldr	r3, [r7, #4]
 8009498:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800949a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800949e:	2b00      	cmp	r3, #0
 80094a0:	d00a      	beq.n	80094b8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80094a2:	687b      	ldr	r3, [r7, #4]
 80094a4:	681b      	ldr	r3, [r3, #0]
 80094a6:	685b      	ldr	r3, [r3, #4]
 80094a8:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80094ac:	687b      	ldr	r3, [r7, #4]
 80094ae:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80094b0:	687b      	ldr	r3, [r7, #4]
 80094b2:	681b      	ldr	r3, [r3, #0]
 80094b4:	430a      	orrs	r2, r1
 80094b6:	605a      	str	r2, [r3, #4]
  }
}
 80094b8:	bf00      	nop
 80094ba:	370c      	adds	r7, #12
 80094bc:	46bd      	mov	sp, r7
 80094be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094c2:	4770      	bx	lr

080094c4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80094c4:	b580      	push	{r7, lr}
 80094c6:	b098      	sub	sp, #96	@ 0x60
 80094c8:	af02      	add	r7, sp, #8
 80094ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80094cc:	687b      	ldr	r3, [r7, #4]
 80094ce:	2200      	movs	r2, #0
 80094d0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80094d4:	f7f9 fde8 	bl	80030a8 <HAL_GetTick>
 80094d8:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80094da:	687b      	ldr	r3, [r7, #4]
 80094dc:	681b      	ldr	r3, [r3, #0]
 80094de:	681b      	ldr	r3, [r3, #0]
 80094e0:	f003 0308 	and.w	r3, r3, #8
 80094e4:	2b08      	cmp	r3, #8
 80094e6:	d12e      	bne.n	8009546 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80094e8:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80094ec:	9300      	str	r3, [sp, #0]
 80094ee:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80094f0:	2200      	movs	r2, #0
 80094f2:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80094f6:	6878      	ldr	r0, [r7, #4]
 80094f8:	f000 f88c 	bl	8009614 <UART_WaitOnFlagUntilTimeout>
 80094fc:	4603      	mov	r3, r0
 80094fe:	2b00      	cmp	r3, #0
 8009500:	d021      	beq.n	8009546 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8009502:	687b      	ldr	r3, [r7, #4]
 8009504:	681b      	ldr	r3, [r3, #0]
 8009506:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009508:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800950a:	e853 3f00 	ldrex	r3, [r3]
 800950e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8009510:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009512:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8009516:	653b      	str	r3, [r7, #80]	@ 0x50
 8009518:	687b      	ldr	r3, [r7, #4]
 800951a:	681b      	ldr	r3, [r3, #0]
 800951c:	461a      	mov	r2, r3
 800951e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009520:	647b      	str	r3, [r7, #68]	@ 0x44
 8009522:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009524:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8009526:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8009528:	e841 2300 	strex	r3, r2, [r1]
 800952c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800952e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009530:	2b00      	cmp	r3, #0
 8009532:	d1e6      	bne.n	8009502 <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8009534:	687b      	ldr	r3, [r7, #4]
 8009536:	2220      	movs	r2, #32
 8009538:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 800953a:	687b      	ldr	r3, [r7, #4]
 800953c:	2200      	movs	r2, #0
 800953e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009542:	2303      	movs	r3, #3
 8009544:	e062      	b.n	800960c <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8009546:	687b      	ldr	r3, [r7, #4]
 8009548:	681b      	ldr	r3, [r3, #0]
 800954a:	681b      	ldr	r3, [r3, #0]
 800954c:	f003 0304 	and.w	r3, r3, #4
 8009550:	2b04      	cmp	r3, #4
 8009552:	d149      	bne.n	80095e8 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009554:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8009558:	9300      	str	r3, [sp, #0]
 800955a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800955c:	2200      	movs	r2, #0
 800955e:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8009562:	6878      	ldr	r0, [r7, #4]
 8009564:	f000 f856 	bl	8009614 <UART_WaitOnFlagUntilTimeout>
 8009568:	4603      	mov	r3, r0
 800956a:	2b00      	cmp	r3, #0
 800956c:	d03c      	beq.n	80095e8 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800956e:	687b      	ldr	r3, [r7, #4]
 8009570:	681b      	ldr	r3, [r3, #0]
 8009572:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009574:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009576:	e853 3f00 	ldrex	r3, [r3]
 800957a:	623b      	str	r3, [r7, #32]
   return(result);
 800957c:	6a3b      	ldr	r3, [r7, #32]
 800957e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8009582:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8009584:	687b      	ldr	r3, [r7, #4]
 8009586:	681b      	ldr	r3, [r3, #0]
 8009588:	461a      	mov	r2, r3
 800958a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800958c:	633b      	str	r3, [r7, #48]	@ 0x30
 800958e:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009590:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8009592:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009594:	e841 2300 	strex	r3, r2, [r1]
 8009598:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800959a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800959c:	2b00      	cmp	r3, #0
 800959e:	d1e6      	bne.n	800956e <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80095a0:	687b      	ldr	r3, [r7, #4]
 80095a2:	681b      	ldr	r3, [r3, #0]
 80095a4:	3308      	adds	r3, #8
 80095a6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80095a8:	693b      	ldr	r3, [r7, #16]
 80095aa:	e853 3f00 	ldrex	r3, [r3]
 80095ae:	60fb      	str	r3, [r7, #12]
   return(result);
 80095b0:	68fb      	ldr	r3, [r7, #12]
 80095b2:	f023 0301 	bic.w	r3, r3, #1
 80095b6:	64bb      	str	r3, [r7, #72]	@ 0x48
 80095b8:	687b      	ldr	r3, [r7, #4]
 80095ba:	681b      	ldr	r3, [r3, #0]
 80095bc:	3308      	adds	r3, #8
 80095be:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80095c0:	61fa      	str	r2, [r7, #28]
 80095c2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80095c4:	69b9      	ldr	r1, [r7, #24]
 80095c6:	69fa      	ldr	r2, [r7, #28]
 80095c8:	e841 2300 	strex	r3, r2, [r1]
 80095cc:	617b      	str	r3, [r7, #20]
   return(result);
 80095ce:	697b      	ldr	r3, [r7, #20]
 80095d0:	2b00      	cmp	r3, #0
 80095d2:	d1e5      	bne.n	80095a0 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 80095d4:	687b      	ldr	r3, [r7, #4]
 80095d6:	2220      	movs	r2, #32
 80095d8:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 80095dc:	687b      	ldr	r3, [r7, #4]
 80095de:	2200      	movs	r2, #0
 80095e0:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80095e4:	2303      	movs	r3, #3
 80095e6:	e011      	b.n	800960c <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80095e8:	687b      	ldr	r3, [r7, #4]
 80095ea:	2220      	movs	r2, #32
 80095ec:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80095ee:	687b      	ldr	r3, [r7, #4]
 80095f0:	2220      	movs	r2, #32
 80095f2:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80095f6:	687b      	ldr	r3, [r7, #4]
 80095f8:	2200      	movs	r2, #0
 80095fa:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80095fc:	687b      	ldr	r3, [r7, #4]
 80095fe:	2200      	movs	r2, #0
 8009600:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8009602:	687b      	ldr	r3, [r7, #4]
 8009604:	2200      	movs	r2, #0
 8009606:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 800960a:	2300      	movs	r3, #0
}
 800960c:	4618      	mov	r0, r3
 800960e:	3758      	adds	r7, #88	@ 0x58
 8009610:	46bd      	mov	sp, r7
 8009612:	bd80      	pop	{r7, pc}

08009614 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8009614:	b580      	push	{r7, lr}
 8009616:	b084      	sub	sp, #16
 8009618:	af00      	add	r7, sp, #0
 800961a:	60f8      	str	r0, [r7, #12]
 800961c:	60b9      	str	r1, [r7, #8]
 800961e:	603b      	str	r3, [r7, #0]
 8009620:	4613      	mov	r3, r2
 8009622:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009624:	e049      	b.n	80096ba <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009626:	69bb      	ldr	r3, [r7, #24]
 8009628:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800962c:	d045      	beq.n	80096ba <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800962e:	f7f9 fd3b 	bl	80030a8 <HAL_GetTick>
 8009632:	4602      	mov	r2, r0
 8009634:	683b      	ldr	r3, [r7, #0]
 8009636:	1ad3      	subs	r3, r2, r3
 8009638:	69ba      	ldr	r2, [r7, #24]
 800963a:	429a      	cmp	r2, r3
 800963c:	d302      	bcc.n	8009644 <UART_WaitOnFlagUntilTimeout+0x30>
 800963e:	69bb      	ldr	r3, [r7, #24]
 8009640:	2b00      	cmp	r3, #0
 8009642:	d101      	bne.n	8009648 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8009644:	2303      	movs	r3, #3
 8009646:	e048      	b.n	80096da <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8009648:	68fb      	ldr	r3, [r7, #12]
 800964a:	681b      	ldr	r3, [r3, #0]
 800964c:	681b      	ldr	r3, [r3, #0]
 800964e:	f003 0304 	and.w	r3, r3, #4
 8009652:	2b00      	cmp	r3, #0
 8009654:	d031      	beq.n	80096ba <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8009656:	68fb      	ldr	r3, [r7, #12]
 8009658:	681b      	ldr	r3, [r3, #0]
 800965a:	69db      	ldr	r3, [r3, #28]
 800965c:	f003 0308 	and.w	r3, r3, #8
 8009660:	2b08      	cmp	r3, #8
 8009662:	d110      	bne.n	8009686 <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8009664:	68fb      	ldr	r3, [r7, #12]
 8009666:	681b      	ldr	r3, [r3, #0]
 8009668:	2208      	movs	r2, #8
 800966a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800966c:	68f8      	ldr	r0, [r7, #12]
 800966e:	f000 f8ff 	bl	8009870 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8009672:	68fb      	ldr	r3, [r7, #12]
 8009674:	2208      	movs	r2, #8
 8009676:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800967a:	68fb      	ldr	r3, [r7, #12]
 800967c:	2200      	movs	r2, #0
 800967e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8009682:	2301      	movs	r3, #1
 8009684:	e029      	b.n	80096da <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8009686:	68fb      	ldr	r3, [r7, #12]
 8009688:	681b      	ldr	r3, [r3, #0]
 800968a:	69db      	ldr	r3, [r3, #28]
 800968c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8009690:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8009694:	d111      	bne.n	80096ba <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8009696:	68fb      	ldr	r3, [r7, #12]
 8009698:	681b      	ldr	r3, [r3, #0]
 800969a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800969e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80096a0:	68f8      	ldr	r0, [r7, #12]
 80096a2:	f000 f8e5 	bl	8009870 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80096a6:	68fb      	ldr	r3, [r7, #12]
 80096a8:	2220      	movs	r2, #32
 80096aa:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80096ae:	68fb      	ldr	r3, [r7, #12]
 80096b0:	2200      	movs	r2, #0
 80096b2:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 80096b6:	2303      	movs	r3, #3
 80096b8:	e00f      	b.n	80096da <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80096ba:	68fb      	ldr	r3, [r7, #12]
 80096bc:	681b      	ldr	r3, [r3, #0]
 80096be:	69da      	ldr	r2, [r3, #28]
 80096c0:	68bb      	ldr	r3, [r7, #8]
 80096c2:	4013      	ands	r3, r2
 80096c4:	68ba      	ldr	r2, [r7, #8]
 80096c6:	429a      	cmp	r2, r3
 80096c8:	bf0c      	ite	eq
 80096ca:	2301      	moveq	r3, #1
 80096cc:	2300      	movne	r3, #0
 80096ce:	b2db      	uxtb	r3, r3
 80096d0:	461a      	mov	r2, r3
 80096d2:	79fb      	ldrb	r3, [r7, #7]
 80096d4:	429a      	cmp	r2, r3
 80096d6:	d0a6      	beq.n	8009626 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80096d8:	2300      	movs	r3, #0
}
 80096da:	4618      	mov	r0, r3
 80096dc:	3710      	adds	r7, #16
 80096de:	46bd      	mov	sp, r7
 80096e0:	bd80      	pop	{r7, pc}
	...

080096e4 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80096e4:	b580      	push	{r7, lr}
 80096e6:	b096      	sub	sp, #88	@ 0x58
 80096e8:	af00      	add	r7, sp, #0
 80096ea:	60f8      	str	r0, [r7, #12]
 80096ec:	60b9      	str	r1, [r7, #8]
 80096ee:	4613      	mov	r3, r2
 80096f0:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80096f2:	68fb      	ldr	r3, [r7, #12]
 80096f4:	68ba      	ldr	r2, [r7, #8]
 80096f6:	655a      	str	r2, [r3, #84]	@ 0x54
  huart->RxXferSize = Size;
 80096f8:	68fb      	ldr	r3, [r7, #12]
 80096fa:	88fa      	ldrh	r2, [r7, #6]
 80096fc:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009700:	68fb      	ldr	r3, [r7, #12]
 8009702:	2200      	movs	r2, #0
 8009704:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8009708:	68fb      	ldr	r3, [r7, #12]
 800970a:	2222      	movs	r2, #34	@ 0x22
 800970c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  if (huart->hdmarx != NULL)
 8009710:	68fb      	ldr	r3, [r7, #12]
 8009712:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009714:	2b00      	cmp	r3, #0
 8009716:	d028      	beq.n	800976a <UART_Start_Receive_DMA+0x86>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8009718:	68fb      	ldr	r3, [r7, #12]
 800971a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800971c:	4a3e      	ldr	r2, [pc, #248]	@ (8009818 <UART_Start_Receive_DMA+0x134>)
 800971e:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8009720:	68fb      	ldr	r3, [r7, #12]
 8009722:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009724:	4a3d      	ldr	r2, [pc, #244]	@ (800981c <UART_Start_Receive_DMA+0x138>)
 8009726:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8009728:	68fb      	ldr	r3, [r7, #12]
 800972a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800972c:	4a3c      	ldr	r2, [pc, #240]	@ (8009820 <UART_Start_Receive_DMA+0x13c>)
 800972e:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8009730:	68fb      	ldr	r3, [r7, #12]
 8009732:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009734:	2200      	movs	r2, #0
 8009736:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8009738:	68fb      	ldr	r3, [r7, #12]
 800973a:	6f58      	ldr	r0, [r3, #116]	@ 0x74
 800973c:	68fb      	ldr	r3, [r7, #12]
 800973e:	681b      	ldr	r3, [r3, #0]
 8009740:	3324      	adds	r3, #36	@ 0x24
 8009742:	4619      	mov	r1, r3
 8009744:	68fb      	ldr	r3, [r7, #12]
 8009746:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009748:	461a      	mov	r2, r3
 800974a:	88fb      	ldrh	r3, [r7, #6]
 800974c:	f7f9 fe76 	bl	800343c <HAL_DMA_Start_IT>
 8009750:	4603      	mov	r3, r0
 8009752:	2b00      	cmp	r3, #0
 8009754:	d009      	beq.n	800976a <UART_Start_Receive_DMA+0x86>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 8009756:	68fb      	ldr	r3, [r7, #12]
 8009758:	2210      	movs	r2, #16
 800975a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 800975e:	68fb      	ldr	r3, [r7, #12]
 8009760:	2220      	movs	r2, #32
 8009762:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      return HAL_ERROR;
 8009766:	2301      	movs	r3, #1
 8009768:	e051      	b.n	800980e <UART_Start_Receive_DMA+0x12a>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800976a:	68fb      	ldr	r3, [r7, #12]
 800976c:	691b      	ldr	r3, [r3, #16]
 800976e:	2b00      	cmp	r3, #0
 8009770:	d018      	beq.n	80097a4 <UART_Start_Receive_DMA+0xc0>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009772:	68fb      	ldr	r3, [r7, #12]
 8009774:	681b      	ldr	r3, [r3, #0]
 8009776:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009778:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800977a:	e853 3f00 	ldrex	r3, [r3]
 800977e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8009780:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009782:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8009786:	657b      	str	r3, [r7, #84]	@ 0x54
 8009788:	68fb      	ldr	r3, [r7, #12]
 800978a:	681b      	ldr	r3, [r3, #0]
 800978c:	461a      	mov	r2, r3
 800978e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009790:	64bb      	str	r3, [r7, #72]	@ 0x48
 8009792:	647a      	str	r2, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009794:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8009796:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8009798:	e841 2300 	strex	r3, r2, [r1]
 800979c:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 800979e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80097a0:	2b00      	cmp	r3, #0
 80097a2:	d1e6      	bne.n	8009772 <UART_Start_Receive_DMA+0x8e>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80097a4:	68fb      	ldr	r3, [r7, #12]
 80097a6:	681b      	ldr	r3, [r3, #0]
 80097a8:	3308      	adds	r3, #8
 80097aa:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80097ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80097ae:	e853 3f00 	ldrex	r3, [r3]
 80097b2:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80097b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80097b6:	f043 0301 	orr.w	r3, r3, #1
 80097ba:	653b      	str	r3, [r7, #80]	@ 0x50
 80097bc:	68fb      	ldr	r3, [r7, #12]
 80097be:	681b      	ldr	r3, [r3, #0]
 80097c0:	3308      	adds	r3, #8
 80097c2:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 80097c4:	637a      	str	r2, [r7, #52]	@ 0x34
 80097c6:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80097c8:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80097ca:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80097cc:	e841 2300 	strex	r3, r2, [r1]
 80097d0:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 80097d2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80097d4:	2b00      	cmp	r3, #0
 80097d6:	d1e5      	bne.n	80097a4 <UART_Start_Receive_DMA+0xc0>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80097d8:	68fb      	ldr	r3, [r7, #12]
 80097da:	681b      	ldr	r3, [r3, #0]
 80097dc:	3308      	adds	r3, #8
 80097de:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80097e0:	697b      	ldr	r3, [r7, #20]
 80097e2:	e853 3f00 	ldrex	r3, [r3]
 80097e6:	613b      	str	r3, [r7, #16]
   return(result);
 80097e8:	693b      	ldr	r3, [r7, #16]
 80097ea:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80097ee:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80097f0:	68fb      	ldr	r3, [r7, #12]
 80097f2:	681b      	ldr	r3, [r3, #0]
 80097f4:	3308      	adds	r3, #8
 80097f6:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80097f8:	623a      	str	r2, [r7, #32]
 80097fa:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80097fc:	69f9      	ldr	r1, [r7, #28]
 80097fe:	6a3a      	ldr	r2, [r7, #32]
 8009800:	e841 2300 	strex	r3, r2, [r1]
 8009804:	61bb      	str	r3, [r7, #24]
   return(result);
 8009806:	69bb      	ldr	r3, [r7, #24]
 8009808:	2b00      	cmp	r3, #0
 800980a:	d1e5      	bne.n	80097d8 <UART_Start_Receive_DMA+0xf4>

  return HAL_OK;
 800980c:	2300      	movs	r3, #0
}
 800980e:	4618      	mov	r0, r3
 8009810:	3758      	adds	r7, #88	@ 0x58
 8009812:	46bd      	mov	sp, r7
 8009814:	bd80      	pop	{r7, pc}
 8009816:	bf00      	nop
 8009818:	080099ef 	.word	0x080099ef
 800981c:	08009b1b 	.word	0x08009b1b
 8009820:	08009b59 	.word	0x08009b59

08009824 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8009824:	b480      	push	{r7}
 8009826:	b089      	sub	sp, #36	@ 0x24
 8009828:	af00      	add	r7, sp, #0
 800982a:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
#else
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800982c:	687b      	ldr	r3, [r7, #4]
 800982e:	681b      	ldr	r3, [r3, #0]
 8009830:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009832:	68fb      	ldr	r3, [r7, #12]
 8009834:	e853 3f00 	ldrex	r3, [r3]
 8009838:	60bb      	str	r3, [r7, #8]
   return(result);
 800983a:	68bb      	ldr	r3, [r7, #8]
 800983c:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8009840:	61fb      	str	r3, [r7, #28]
 8009842:	687b      	ldr	r3, [r7, #4]
 8009844:	681b      	ldr	r3, [r3, #0]
 8009846:	461a      	mov	r2, r3
 8009848:	69fb      	ldr	r3, [r7, #28]
 800984a:	61bb      	str	r3, [r7, #24]
 800984c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800984e:	6979      	ldr	r1, [r7, #20]
 8009850:	69ba      	ldr	r2, [r7, #24]
 8009852:	e841 2300 	strex	r3, r2, [r1]
 8009856:	613b      	str	r3, [r7, #16]
   return(result);
 8009858:	693b      	ldr	r3, [r7, #16]
 800985a:	2b00      	cmp	r3, #0
 800985c:	d1e6      	bne.n	800982c <UART_EndTxTransfer+0x8>
#endif /* USART_CR1_FIFOEN */

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800985e:	687b      	ldr	r3, [r7, #4]
 8009860:	2220      	movs	r2, #32
 8009862:	67da      	str	r2, [r3, #124]	@ 0x7c
}
 8009864:	bf00      	nop
 8009866:	3724      	adds	r7, #36	@ 0x24
 8009868:	46bd      	mov	sp, r7
 800986a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800986e:	4770      	bx	lr

08009870 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8009870:	b480      	push	{r7}
 8009872:	b095      	sub	sp, #84	@ 0x54
 8009874:	af00      	add	r7, sp, #0
 8009876:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8009878:	687b      	ldr	r3, [r7, #4]
 800987a:	681b      	ldr	r3, [r3, #0]
 800987c:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800987e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009880:	e853 3f00 	ldrex	r3, [r3]
 8009884:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8009886:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009888:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800988c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800988e:	687b      	ldr	r3, [r7, #4]
 8009890:	681b      	ldr	r3, [r3, #0]
 8009892:	461a      	mov	r2, r3
 8009894:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009896:	643b      	str	r3, [r7, #64]	@ 0x40
 8009898:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800989a:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800989c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800989e:	e841 2300 	strex	r3, r2, [r1]
 80098a2:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80098a4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80098a6:	2b00      	cmp	r3, #0
 80098a8:	d1e6      	bne.n	8009878 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80098aa:	687b      	ldr	r3, [r7, #4]
 80098ac:	681b      	ldr	r3, [r3, #0]
 80098ae:	3308      	adds	r3, #8
 80098b0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80098b2:	6a3b      	ldr	r3, [r7, #32]
 80098b4:	e853 3f00 	ldrex	r3, [r3]
 80098b8:	61fb      	str	r3, [r7, #28]
   return(result);
 80098ba:	69fb      	ldr	r3, [r7, #28]
 80098bc:	f023 0301 	bic.w	r3, r3, #1
 80098c0:	64bb      	str	r3, [r7, #72]	@ 0x48
 80098c2:	687b      	ldr	r3, [r7, #4]
 80098c4:	681b      	ldr	r3, [r3, #0]
 80098c6:	3308      	adds	r3, #8
 80098c8:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80098ca:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80098cc:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80098ce:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80098d0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80098d2:	e841 2300 	strex	r3, r2, [r1]
 80098d6:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80098d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80098da:	2b00      	cmp	r3, #0
 80098dc:	d1e5      	bne.n	80098aa <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80098de:	687b      	ldr	r3, [r7, #4]
 80098e0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80098e2:	2b01      	cmp	r3, #1
 80098e4:	d118      	bne.n	8009918 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80098e6:	687b      	ldr	r3, [r7, #4]
 80098e8:	681b      	ldr	r3, [r3, #0]
 80098ea:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80098ec:	68fb      	ldr	r3, [r7, #12]
 80098ee:	e853 3f00 	ldrex	r3, [r3]
 80098f2:	60bb      	str	r3, [r7, #8]
   return(result);
 80098f4:	68bb      	ldr	r3, [r7, #8]
 80098f6:	f023 0310 	bic.w	r3, r3, #16
 80098fa:	647b      	str	r3, [r7, #68]	@ 0x44
 80098fc:	687b      	ldr	r3, [r7, #4]
 80098fe:	681b      	ldr	r3, [r3, #0]
 8009900:	461a      	mov	r2, r3
 8009902:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009904:	61bb      	str	r3, [r7, #24]
 8009906:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009908:	6979      	ldr	r1, [r7, #20]
 800990a:	69ba      	ldr	r2, [r7, #24]
 800990c:	e841 2300 	strex	r3, r2, [r1]
 8009910:	613b      	str	r3, [r7, #16]
   return(result);
 8009912:	693b      	ldr	r3, [r7, #16]
 8009914:	2b00      	cmp	r3, #0
 8009916:	d1e6      	bne.n	80098e6 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8009918:	687b      	ldr	r3, [r7, #4]
 800991a:	2220      	movs	r2, #32
 800991c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009920:	687b      	ldr	r3, [r7, #4]
 8009922:	2200      	movs	r2, #0
 8009924:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8009926:	687b      	ldr	r3, [r7, #4]
 8009928:	2200      	movs	r2, #0
 800992a:	669a      	str	r2, [r3, #104]	@ 0x68
}
 800992c:	bf00      	nop
 800992e:	3754      	adds	r7, #84	@ 0x54
 8009930:	46bd      	mov	sp, r7
 8009932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009936:	4770      	bx	lr

08009938 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8009938:	b580      	push	{r7, lr}
 800993a:	b090      	sub	sp, #64	@ 0x40
 800993c:	af00      	add	r7, sp, #0
 800993e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8009940:	687b      	ldr	r3, [r7, #4]
 8009942:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009944:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8009946:	687b      	ldr	r3, [r7, #4]
 8009948:	681b      	ldr	r3, [r3, #0]
 800994a:	681b      	ldr	r3, [r3, #0]
 800994c:	f003 0320 	and.w	r3, r3, #32
 8009950:	2b00      	cmp	r3, #0
 8009952:	d137      	bne.n	80099c4 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0U;
 8009954:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009956:	2200      	movs	r2, #0
 8009958:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800995c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800995e:	681b      	ldr	r3, [r3, #0]
 8009960:	3308      	adds	r3, #8
 8009962:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009964:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009966:	e853 3f00 	ldrex	r3, [r3]
 800996a:	623b      	str	r3, [r7, #32]
   return(result);
 800996c:	6a3b      	ldr	r3, [r7, #32]
 800996e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8009972:	63bb      	str	r3, [r7, #56]	@ 0x38
 8009974:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009976:	681b      	ldr	r3, [r3, #0]
 8009978:	3308      	adds	r3, #8
 800997a:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800997c:	633a      	str	r2, [r7, #48]	@ 0x30
 800997e:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009980:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8009982:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009984:	e841 2300 	strex	r3, r2, [r1]
 8009988:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800998a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800998c:	2b00      	cmp	r3, #0
 800998e:	d1e5      	bne.n	800995c <UART_DMATransmitCplt+0x24>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8009990:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009992:	681b      	ldr	r3, [r3, #0]
 8009994:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009996:	693b      	ldr	r3, [r7, #16]
 8009998:	e853 3f00 	ldrex	r3, [r3]
 800999c:	60fb      	str	r3, [r7, #12]
   return(result);
 800999e:	68fb      	ldr	r3, [r7, #12]
 80099a0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80099a4:	637b      	str	r3, [r7, #52]	@ 0x34
 80099a6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80099a8:	681b      	ldr	r3, [r3, #0]
 80099aa:	461a      	mov	r2, r3
 80099ac:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80099ae:	61fb      	str	r3, [r7, #28]
 80099b0:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80099b2:	69b9      	ldr	r1, [r7, #24]
 80099b4:	69fa      	ldr	r2, [r7, #28]
 80099b6:	e841 2300 	strex	r3, r2, [r1]
 80099ba:	617b      	str	r3, [r7, #20]
   return(result);
 80099bc:	697b      	ldr	r3, [r7, #20]
 80099be:	2b00      	cmp	r3, #0
 80099c0:	d1e6      	bne.n	8009990 <UART_DMATransmitCplt+0x58>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80099c2:	e002      	b.n	80099ca <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 80099c4:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 80099c6:	f7ff fa71 	bl	8008eac <HAL_UART_TxCpltCallback>
}
 80099ca:	bf00      	nop
 80099cc:	3740      	adds	r7, #64	@ 0x40
 80099ce:	46bd      	mov	sp, r7
 80099d0:	bd80      	pop	{r7, pc}

080099d2 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80099d2:	b580      	push	{r7, lr}
 80099d4:	b084      	sub	sp, #16
 80099d6:	af00      	add	r7, sp, #0
 80099d8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80099da:	687b      	ldr	r3, [r7, #4]
 80099dc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80099de:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 80099e0:	68f8      	ldr	r0, [r7, #12]
 80099e2:	f7ff fa6d 	bl	8008ec0 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80099e6:	bf00      	nop
 80099e8:	3710      	adds	r7, #16
 80099ea:	46bd      	mov	sp, r7
 80099ec:	bd80      	pop	{r7, pc}

080099ee <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80099ee:	b580      	push	{r7, lr}
 80099f0:	b09c      	sub	sp, #112	@ 0x70
 80099f2:	af00      	add	r7, sp, #0
 80099f4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80099f6:	687b      	ldr	r3, [r7, #4]
 80099f8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80099fa:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 80099fc:	687b      	ldr	r3, [r7, #4]
 80099fe:	681b      	ldr	r3, [r3, #0]
 8009a00:	681b      	ldr	r3, [r3, #0]
 8009a02:	f003 0320 	and.w	r3, r3, #32
 8009a06:	2b00      	cmp	r3, #0
 8009a08:	d171      	bne.n	8009aee <UART_DMAReceiveCplt+0x100>
  {
    huart->RxXferCount = 0U;
 8009a0a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009a0c:	2200      	movs	r2, #0
 8009a0e:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009a12:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009a14:	681b      	ldr	r3, [r3, #0]
 8009a16:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009a18:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009a1a:	e853 3f00 	ldrex	r3, [r3]
 8009a1e:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8009a20:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009a22:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8009a26:	66bb      	str	r3, [r7, #104]	@ 0x68
 8009a28:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009a2a:	681b      	ldr	r3, [r3, #0]
 8009a2c:	461a      	mov	r2, r3
 8009a2e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8009a30:	65bb      	str	r3, [r7, #88]	@ 0x58
 8009a32:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009a34:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8009a36:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8009a38:	e841 2300 	strex	r3, r2, [r1]
 8009a3c:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8009a3e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009a40:	2b00      	cmp	r3, #0
 8009a42:	d1e6      	bne.n	8009a12 <UART_DMAReceiveCplt+0x24>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009a44:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009a46:	681b      	ldr	r3, [r3, #0]
 8009a48:	3308      	adds	r3, #8
 8009a4a:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009a4c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009a4e:	e853 3f00 	ldrex	r3, [r3]
 8009a52:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8009a54:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009a56:	f023 0301 	bic.w	r3, r3, #1
 8009a5a:	667b      	str	r3, [r7, #100]	@ 0x64
 8009a5c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009a5e:	681b      	ldr	r3, [r3, #0]
 8009a60:	3308      	adds	r3, #8
 8009a62:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8009a64:	647a      	str	r2, [r7, #68]	@ 0x44
 8009a66:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009a68:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8009a6a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8009a6c:	e841 2300 	strex	r3, r2, [r1]
 8009a70:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8009a72:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009a74:	2b00      	cmp	r3, #0
 8009a76:	d1e5      	bne.n	8009a44 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009a78:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009a7a:	681b      	ldr	r3, [r3, #0]
 8009a7c:	3308      	adds	r3, #8
 8009a7e:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009a80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009a82:	e853 3f00 	ldrex	r3, [r3]
 8009a86:	623b      	str	r3, [r7, #32]
   return(result);
 8009a88:	6a3b      	ldr	r3, [r7, #32]
 8009a8a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009a8e:	663b      	str	r3, [r7, #96]	@ 0x60
 8009a90:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009a92:	681b      	ldr	r3, [r3, #0]
 8009a94:	3308      	adds	r3, #8
 8009a96:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8009a98:	633a      	str	r2, [r7, #48]	@ 0x30
 8009a9a:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009a9c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8009a9e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009aa0:	e841 2300 	strex	r3, r2, [r1]
 8009aa4:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8009aa6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009aa8:	2b00      	cmp	r3, #0
 8009aaa:	d1e5      	bne.n	8009a78 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8009aac:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009aae:	2220      	movs	r2, #32
 8009ab0:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009ab4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009ab6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009ab8:	2b01      	cmp	r3, #1
 8009aba:	d118      	bne.n	8009aee <UART_DMAReceiveCplt+0x100>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009abc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009abe:	681b      	ldr	r3, [r3, #0]
 8009ac0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009ac2:	693b      	ldr	r3, [r7, #16]
 8009ac4:	e853 3f00 	ldrex	r3, [r3]
 8009ac8:	60fb      	str	r3, [r7, #12]
   return(result);
 8009aca:	68fb      	ldr	r3, [r7, #12]
 8009acc:	f023 0310 	bic.w	r3, r3, #16
 8009ad0:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8009ad2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009ad4:	681b      	ldr	r3, [r3, #0]
 8009ad6:	461a      	mov	r2, r3
 8009ad8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8009ada:	61fb      	str	r3, [r7, #28]
 8009adc:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009ade:	69b9      	ldr	r1, [r7, #24]
 8009ae0:	69fa      	ldr	r2, [r7, #28]
 8009ae2:	e841 2300 	strex	r3, r2, [r1]
 8009ae6:	617b      	str	r3, [r7, #20]
   return(result);
 8009ae8:	697b      	ldr	r3, [r7, #20]
 8009aea:	2b00      	cmp	r3, #0
 8009aec:	d1e6      	bne.n	8009abc <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009aee:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009af0:	2200      	movs	r2, #0
 8009af2:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009af4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009af6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009af8:	2b01      	cmp	r3, #1
 8009afa:	d107      	bne.n	8009b0c <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009afc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009afe:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8009b02:	4619      	mov	r1, r3
 8009b04:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8009b06:	f7ff fa03 	bl	8008f10 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8009b0a:	e002      	b.n	8009b12 <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 8009b0c:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8009b0e:	f7ff f9e1 	bl	8008ed4 <HAL_UART_RxCpltCallback>
}
 8009b12:	bf00      	nop
 8009b14:	3770      	adds	r7, #112	@ 0x70
 8009b16:	46bd      	mov	sp, r7
 8009b18:	bd80      	pop	{r7, pc}

08009b1a <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8009b1a:	b580      	push	{r7, lr}
 8009b1c:	b084      	sub	sp, #16
 8009b1e:	af00      	add	r7, sp, #0
 8009b20:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8009b22:	687b      	ldr	r3, [r7, #4]
 8009b24:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009b26:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8009b28:	68fb      	ldr	r3, [r7, #12]
 8009b2a:	2201      	movs	r2, #1
 8009b2c:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009b2e:	68fb      	ldr	r3, [r7, #12]
 8009b30:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009b32:	2b01      	cmp	r3, #1
 8009b34:	d109      	bne.n	8009b4a <UART_DMARxHalfCplt+0x30>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8009b36:	68fb      	ldr	r3, [r7, #12]
 8009b38:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8009b3c:	085b      	lsrs	r3, r3, #1
 8009b3e:	b29b      	uxth	r3, r3
 8009b40:	4619      	mov	r1, r3
 8009b42:	68f8      	ldr	r0, [r7, #12]
 8009b44:	f7ff f9e4 	bl	8008f10 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8009b48:	e002      	b.n	8009b50 <UART_DMARxHalfCplt+0x36>
    HAL_UART_RxHalfCpltCallback(huart);
 8009b4a:	68f8      	ldr	r0, [r7, #12]
 8009b4c:	f7ff f9cc 	bl	8008ee8 <HAL_UART_RxHalfCpltCallback>
}
 8009b50:	bf00      	nop
 8009b52:	3710      	adds	r7, #16
 8009b54:	46bd      	mov	sp, r7
 8009b56:	bd80      	pop	{r7, pc}

08009b58 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8009b58:	b580      	push	{r7, lr}
 8009b5a:	b086      	sub	sp, #24
 8009b5c:	af00      	add	r7, sp, #0
 8009b5e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8009b60:	687b      	ldr	r3, [r7, #4]
 8009b62:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009b64:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8009b66:	697b      	ldr	r3, [r7, #20]
 8009b68:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8009b6a:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8009b6c:	697b      	ldr	r3, [r7, #20]
 8009b6e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009b72:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8009b74:	697b      	ldr	r3, [r7, #20]
 8009b76:	681b      	ldr	r3, [r3, #0]
 8009b78:	689b      	ldr	r3, [r3, #8]
 8009b7a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009b7e:	2b80      	cmp	r3, #128	@ 0x80
 8009b80:	d109      	bne.n	8009b96 <UART_DMAError+0x3e>
 8009b82:	693b      	ldr	r3, [r7, #16]
 8009b84:	2b21      	cmp	r3, #33	@ 0x21
 8009b86:	d106      	bne.n	8009b96 <UART_DMAError+0x3e>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8009b88:	697b      	ldr	r3, [r7, #20]
 8009b8a:	2200      	movs	r2, #0
 8009b8c:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    UART_EndTxTransfer(huart);
 8009b90:	6978      	ldr	r0, [r7, #20]
 8009b92:	f7ff fe47 	bl	8009824 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8009b96:	697b      	ldr	r3, [r7, #20]
 8009b98:	681b      	ldr	r3, [r3, #0]
 8009b9a:	689b      	ldr	r3, [r3, #8]
 8009b9c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009ba0:	2b40      	cmp	r3, #64	@ 0x40
 8009ba2:	d109      	bne.n	8009bb8 <UART_DMAError+0x60>
 8009ba4:	68fb      	ldr	r3, [r7, #12]
 8009ba6:	2b22      	cmp	r3, #34	@ 0x22
 8009ba8:	d106      	bne.n	8009bb8 <UART_DMAError+0x60>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8009baa:	697b      	ldr	r3, [r7, #20]
 8009bac:	2200      	movs	r2, #0
 8009bae:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
    UART_EndRxTransfer(huart);
 8009bb2:	6978      	ldr	r0, [r7, #20]
 8009bb4:	f7ff fe5c 	bl	8009870 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8009bb8:	697b      	ldr	r3, [r7, #20]
 8009bba:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8009bbe:	f043 0210 	orr.w	r2, r3, #16
 8009bc2:	697b      	ldr	r3, [r7, #20]
 8009bc4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8009bc8:	6978      	ldr	r0, [r7, #20]
 8009bca:	f7ff f997 	bl	8008efc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009bce:	bf00      	nop
 8009bd0:	3718      	adds	r7, #24
 8009bd2:	46bd      	mov	sp, r7
 8009bd4:	bd80      	pop	{r7, pc}

08009bd6 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8009bd6:	b580      	push	{r7, lr}
 8009bd8:	b084      	sub	sp, #16
 8009bda:	af00      	add	r7, sp, #0
 8009bdc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8009bde:	687b      	ldr	r3, [r7, #4]
 8009be0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009be2:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8009be4:	68fb      	ldr	r3, [r7, #12]
 8009be6:	2200      	movs	r2, #0
 8009be8:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->TxXferCount = 0U;
 8009bec:	68fb      	ldr	r3, [r7, #12]
 8009bee:	2200      	movs	r2, #0
 8009bf0:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8009bf4:	68f8      	ldr	r0, [r7, #12]
 8009bf6:	f7ff f981 	bl	8008efc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009bfa:	bf00      	nop
 8009bfc:	3710      	adds	r7, #16
 8009bfe:	46bd      	mov	sp, r7
 8009c00:	bd80      	pop	{r7, pc}

08009c02 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8009c02:	b580      	push	{r7, lr}
 8009c04:	b088      	sub	sp, #32
 8009c06:	af00      	add	r7, sp, #0
 8009c08:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8009c0a:	687b      	ldr	r3, [r7, #4]
 8009c0c:	681b      	ldr	r3, [r3, #0]
 8009c0e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009c10:	68fb      	ldr	r3, [r7, #12]
 8009c12:	e853 3f00 	ldrex	r3, [r3]
 8009c16:	60bb      	str	r3, [r7, #8]
   return(result);
 8009c18:	68bb      	ldr	r3, [r7, #8]
 8009c1a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009c1e:	61fb      	str	r3, [r7, #28]
 8009c20:	687b      	ldr	r3, [r7, #4]
 8009c22:	681b      	ldr	r3, [r3, #0]
 8009c24:	461a      	mov	r2, r3
 8009c26:	69fb      	ldr	r3, [r7, #28]
 8009c28:	61bb      	str	r3, [r7, #24]
 8009c2a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009c2c:	6979      	ldr	r1, [r7, #20]
 8009c2e:	69ba      	ldr	r2, [r7, #24]
 8009c30:	e841 2300 	strex	r3, r2, [r1]
 8009c34:	613b      	str	r3, [r7, #16]
   return(result);
 8009c36:	693b      	ldr	r3, [r7, #16]
 8009c38:	2b00      	cmp	r3, #0
 8009c3a:	d1e6      	bne.n	8009c0a <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8009c3c:	687b      	ldr	r3, [r7, #4]
 8009c3e:	2220      	movs	r2, #32
 8009c40:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8009c42:	687b      	ldr	r3, [r7, #4]
 8009c44:	2200      	movs	r2, #0
 8009c46:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8009c48:	6878      	ldr	r0, [r7, #4]
 8009c4a:	f7ff f92f 	bl	8008eac <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009c4e:	bf00      	nop
 8009c50:	3720      	adds	r7, #32
 8009c52:	46bd      	mov	sp, r7
 8009c54:	bd80      	pop	{r7, pc}

08009c56 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8009c56:	b480      	push	{r7}
 8009c58:	b083      	sub	sp, #12
 8009c5a:	af00      	add	r7, sp, #0
 8009c5c:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8009c5e:	bf00      	nop
 8009c60:	370c      	adds	r7, #12
 8009c62:	46bd      	mov	sp, r7
 8009c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c68:	4770      	bx	lr

08009c6a <BNO055_Init>:
 */

#include "BNO055.h"

HAL_StatusTypeDef BNO055_Init(BNO055_Structure *bno, I2C_HandleTypeDef *hi2cx, uint8_t addr, OPRMode mode)
{
 8009c6a:	b580      	push	{r7, lr}
 8009c6c:	b08a      	sub	sp, #40	@ 0x28
 8009c6e:	af04      	add	r7, sp, #16
 8009c70:	60f8      	str	r0, [r7, #12]
 8009c72:	60b9      	str	r1, [r7, #8]
 8009c74:	4611      	mov	r1, r2
 8009c76:	461a      	mov	r2, r3
 8009c78:	460b      	mov	r3, r1
 8009c7a:	71fb      	strb	r3, [r7, #7]
 8009c7c:	4613      	mov	r3, r2
 8009c7e:	71bb      	strb	r3, [r7, #6]
	uint8_t txbuffer;
	uint8_t rxbuffer;

	bno->hi2cx = hi2cx;
 8009c80:	68fb      	ldr	r3, [r7, #12]
 8009c82:	68ba      	ldr	r2, [r7, #8]
 8009c84:	601a      	str	r2, [r3, #0]
	bno->address = BNO055_ADD_H;
 8009c86:	68fb      	ldr	r3, [r7, #12]
 8009c88:	2252      	movs	r2, #82	@ 0x52
 8009c8a:	711a      	strb	r2, [r3, #4]
	if (addr == 0) bno->address = BNO055_ADD_L;
 8009c8c:	79fb      	ldrb	r3, [r7, #7]
 8009c8e:	2b00      	cmp	r3, #0
 8009c90:	d102      	bne.n	8009c98 <BNO055_Init+0x2e>
 8009c92:	68fb      	ldr	r3, [r7, #12]
 8009c94:	2250      	movs	r2, #80	@ 0x50
 8009c96:	711a      	strb	r2, [r3, #4]

	HAL_I2C_Mem_Read(bno->hi2cx, bno->address, CHIP_ID, 1, &rxbuffer, 1, 10);
 8009c98:	68fb      	ldr	r3, [r7, #12]
 8009c9a:	6818      	ldr	r0, [r3, #0]
 8009c9c:	68fb      	ldr	r3, [r7, #12]
 8009c9e:	791b      	ldrb	r3, [r3, #4]
 8009ca0:	4619      	mov	r1, r3
 8009ca2:	230a      	movs	r3, #10
 8009ca4:	9302      	str	r3, [sp, #8]
 8009ca6:	2301      	movs	r3, #1
 8009ca8:	9301      	str	r3, [sp, #4]
 8009caa:	f107 0316 	add.w	r3, r7, #22
 8009cae:	9300      	str	r3, [sp, #0]
 8009cb0:	2301      	movs	r3, #1
 8009cb2:	2200      	movs	r2, #0
 8009cb4:	f7fa f8b4 	bl	8003e20 <HAL_I2C_Mem_Read>
	if (rxbuffer != 0xA0) {
 8009cb8:	7dbb      	ldrb	r3, [r7, #22]
 8009cba:	2ba0      	cmp	r3, #160	@ 0xa0
 8009cbc:	d018      	beq.n	8009cf0 <BNO055_Init+0x86>
		HAL_Delay(1000);
 8009cbe:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8009cc2:	f7f9 f9fd 	bl	80030c0 <HAL_Delay>
		HAL_I2C_Mem_Read(bno->hi2cx, bno->address, CHIP_ID, 1, &rxbuffer, 1, 10);
 8009cc6:	68fb      	ldr	r3, [r7, #12]
 8009cc8:	6818      	ldr	r0, [r3, #0]
 8009cca:	68fb      	ldr	r3, [r7, #12]
 8009ccc:	791b      	ldrb	r3, [r3, #4]
 8009cce:	4619      	mov	r1, r3
 8009cd0:	230a      	movs	r3, #10
 8009cd2:	9302      	str	r3, [sp, #8]
 8009cd4:	2301      	movs	r3, #1
 8009cd6:	9301      	str	r3, [sp, #4]
 8009cd8:	f107 0316 	add.w	r3, r7, #22
 8009cdc:	9300      	str	r3, [sp, #0]
 8009cde:	2301      	movs	r3, #1
 8009ce0:	2200      	movs	r2, #0
 8009ce2:	f7fa f89d 	bl	8003e20 <HAL_I2C_Mem_Read>
		if (rxbuffer != 0xA0) return HAL_ERROR;
 8009ce6:	7dbb      	ldrb	r3, [r7, #22]
 8009ce8:	2ba0      	cmp	r3, #160	@ 0xa0
 8009cea:	d001      	beq.n	8009cf0 <BNO055_Init+0x86>
 8009cec:	2301      	movs	r3, #1
 8009cee:	e099      	b.n	8009e24 <BNO055_Init+0x1ba>
	}

	txbuffer = CONFIGMODE;
 8009cf0:	2300      	movs	r3, #0
 8009cf2:	75fb      	strb	r3, [r7, #23]
	HAL_I2C_Mem_Write(bno->hi2cx, bno->address, OPR_MODE, 1, &txbuffer, 1, 10);
 8009cf4:	68fb      	ldr	r3, [r7, #12]
 8009cf6:	6818      	ldr	r0, [r3, #0]
 8009cf8:	68fb      	ldr	r3, [r7, #12]
 8009cfa:	791b      	ldrb	r3, [r3, #4]
 8009cfc:	4619      	mov	r1, r3
 8009cfe:	230a      	movs	r3, #10
 8009d00:	9302      	str	r3, [sp, #8]
 8009d02:	2301      	movs	r3, #1
 8009d04:	9301      	str	r3, [sp, #4]
 8009d06:	f107 0317 	add.w	r3, r7, #23
 8009d0a:	9300      	str	r3, [sp, #0]
 8009d0c:	2301      	movs	r3, #1
 8009d0e:	223d      	movs	r2, #61	@ 0x3d
 8009d10:	f7f9 ff72 	bl	8003bf8 <HAL_I2C_Mem_Write>
	HAL_Delay(10);
 8009d14:	200a      	movs	r0, #10
 8009d16:	f7f9 f9d3 	bl	80030c0 <HAL_Delay>

	txbuffer = 0x20;
 8009d1a:	2320      	movs	r3, #32
 8009d1c:	75fb      	strb	r3, [r7, #23]
	HAL_I2C_Mem_Write(bno->hi2cx, bno->address, SYS_TRIGGER, 1, &txbuffer, 1, 10);
 8009d1e:	68fb      	ldr	r3, [r7, #12]
 8009d20:	6818      	ldr	r0, [r3, #0]
 8009d22:	68fb      	ldr	r3, [r7, #12]
 8009d24:	791b      	ldrb	r3, [r3, #4]
 8009d26:	4619      	mov	r1, r3
 8009d28:	230a      	movs	r3, #10
 8009d2a:	9302      	str	r3, [sp, #8]
 8009d2c:	2301      	movs	r3, #1
 8009d2e:	9301      	str	r3, [sp, #4]
 8009d30:	f107 0317 	add.w	r3, r7, #23
 8009d34:	9300      	str	r3, [sp, #0]
 8009d36:	2301      	movs	r3, #1
 8009d38:	223f      	movs	r2, #63	@ 0x3f
 8009d3a:	f7f9 ff5d 	bl	8003bf8 <HAL_I2C_Mem_Write>
	HAL_Delay(30);
 8009d3e:	201e      	movs	r0, #30
 8009d40:	f7f9 f9be 	bl	80030c0 <HAL_Delay>

	do {
		HAL_I2C_Mem_Read(bno->hi2cx, bno->address, CHIP_ID, 1, &rxbuffer, 1, 10);
 8009d44:	68fb      	ldr	r3, [r7, #12]
 8009d46:	6818      	ldr	r0, [r3, #0]
 8009d48:	68fb      	ldr	r3, [r7, #12]
 8009d4a:	791b      	ldrb	r3, [r3, #4]
 8009d4c:	4619      	mov	r1, r3
 8009d4e:	230a      	movs	r3, #10
 8009d50:	9302      	str	r3, [sp, #8]
 8009d52:	2301      	movs	r3, #1
 8009d54:	9301      	str	r3, [sp, #4]
 8009d56:	f107 0316 	add.w	r3, r7, #22
 8009d5a:	9300      	str	r3, [sp, #0]
 8009d5c:	2301      	movs	r3, #1
 8009d5e:	2200      	movs	r2, #0
 8009d60:	f7fa f85e 	bl	8003e20 <HAL_I2C_Mem_Read>
	} while (rxbuffer != 0xA0);
 8009d64:	7dbb      	ldrb	r3, [r7, #22]
 8009d66:	2ba0      	cmp	r3, #160	@ 0xa0
 8009d68:	d1ec      	bne.n	8009d44 <BNO055_Init+0xda>
	HAL_Delay(50);
 8009d6a:	2032      	movs	r0, #50	@ 0x32
 8009d6c:	f7f9 f9a8 	bl	80030c0 <HAL_Delay>

	txbuffer = Normal_Mode;
 8009d70:	2300      	movs	r3, #0
 8009d72:	75fb      	strb	r3, [r7, #23]
	HAL_I2C_Mem_Write(bno->hi2cx, bno->address, PWR_MODE, 1, &txbuffer, 1, 10);
 8009d74:	68fb      	ldr	r3, [r7, #12]
 8009d76:	6818      	ldr	r0, [r3, #0]
 8009d78:	68fb      	ldr	r3, [r7, #12]
 8009d7a:	791b      	ldrb	r3, [r3, #4]
 8009d7c:	4619      	mov	r1, r3
 8009d7e:	230a      	movs	r3, #10
 8009d80:	9302      	str	r3, [sp, #8]
 8009d82:	2301      	movs	r3, #1
 8009d84:	9301      	str	r3, [sp, #4]
 8009d86:	f107 0317 	add.w	r3, r7, #23
 8009d8a:	9300      	str	r3, [sp, #0]
 8009d8c:	2301      	movs	r3, #1
 8009d8e:	223e      	movs	r2, #62	@ 0x3e
 8009d90:	f7f9 ff32 	bl	8003bf8 <HAL_I2C_Mem_Write>
	HAL_Delay(10);
 8009d94:	200a      	movs	r0, #10
 8009d96:	f7f9 f993 	bl	80030c0 <HAL_Delay>

	txbuffer = Page_ID_00;
 8009d9a:	2300      	movs	r3, #0
 8009d9c:	75fb      	strb	r3, [r7, #23]
	HAL_I2C_Mem_Write(bno->hi2cx, bno->address, PAGE_ID, 1, &txbuffer, 1, 10);
 8009d9e:	68fb      	ldr	r3, [r7, #12]
 8009da0:	6818      	ldr	r0, [r3, #0]
 8009da2:	68fb      	ldr	r3, [r7, #12]
 8009da4:	791b      	ldrb	r3, [r3, #4]
 8009da6:	4619      	mov	r1, r3
 8009da8:	230a      	movs	r3, #10
 8009daa:	9302      	str	r3, [sp, #8]
 8009dac:	2301      	movs	r3, #1
 8009dae:	9301      	str	r3, [sp, #4]
 8009db0:	f107 0317 	add.w	r3, r7, #23
 8009db4:	9300      	str	r3, [sp, #0]
 8009db6:	2301      	movs	r3, #1
 8009db8:	2207      	movs	r2, #7
 8009dba:	f7f9 ff1d 	bl	8003bf8 <HAL_I2C_Mem_Write>
	HAL_Delay(10);
 8009dbe:	200a      	movs	r0, #10
 8009dc0:	f7f9 f97e 	bl	80030c0 <HAL_Delay>

	txbuffer = 0x00;
 8009dc4:	2300      	movs	r3, #0
 8009dc6:	75fb      	strb	r3, [r7, #23]
	HAL_I2C_Mem_Write(bno->hi2cx, bno->address, SYS_TRIGGER, 1, &txbuffer, 1, 10);
 8009dc8:	68fb      	ldr	r3, [r7, #12]
 8009dca:	6818      	ldr	r0, [r3, #0]
 8009dcc:	68fb      	ldr	r3, [r7, #12]
 8009dce:	791b      	ldrb	r3, [r3, #4]
 8009dd0:	4619      	mov	r1, r3
 8009dd2:	230a      	movs	r3, #10
 8009dd4:	9302      	str	r3, [sp, #8]
 8009dd6:	2301      	movs	r3, #1
 8009dd8:	9301      	str	r3, [sp, #4]
 8009dda:	f107 0317 	add.w	r3, r7, #23
 8009dde:	9300      	str	r3, [sp, #0]
 8009de0:	2301      	movs	r3, #1
 8009de2:	223f      	movs	r2, #63	@ 0x3f
 8009de4:	f7f9 ff08 	bl	8003bf8 <HAL_I2C_Mem_Write>
	HAL_Delay(10);
 8009de8:	200a      	movs	r0, #10
 8009dea:	f7f9 f969 	bl	80030c0 <HAL_Delay>

	bno->mode = mode;
 8009dee:	68fb      	ldr	r3, [r7, #12]
 8009df0:	79ba      	ldrb	r2, [r7, #6]
 8009df2:	715a      	strb	r2, [r3, #5]
	HAL_I2C_Mem_Write(bno->hi2cx, bno->address, OPR_MODE, 1, &bno->mode, 1, 10);
 8009df4:	68fb      	ldr	r3, [r7, #12]
 8009df6:	6818      	ldr	r0, [r3, #0]
 8009df8:	68fb      	ldr	r3, [r7, #12]
 8009dfa:	791b      	ldrb	r3, [r3, #4]
 8009dfc:	4619      	mov	r1, r3
 8009dfe:	68fb      	ldr	r3, [r7, #12]
 8009e00:	3305      	adds	r3, #5
 8009e02:	220a      	movs	r2, #10
 8009e04:	9202      	str	r2, [sp, #8]
 8009e06:	2201      	movs	r2, #1
 8009e08:	9201      	str	r2, [sp, #4]
 8009e0a:	9300      	str	r3, [sp, #0]
 8009e0c:	2301      	movs	r3, #1
 8009e0e:	223d      	movs	r2, #61	@ 0x3d
 8009e10:	f7f9 fef2 	bl	8003bf8 <HAL_I2C_Mem_Write>
	HAL_Delay(1000);
 8009e14:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8009e18:	f7f9 f952 	bl	80030c0 <HAL_Delay>

	bno->flag = HAL_OK;
 8009e1c:	68fb      	ldr	r3, [r7, #12]
 8009e1e:	2200      	movs	r2, #0
 8009e20:	719a      	strb	r2, [r3, #6]

	return HAL_OK;
 8009e22:	2300      	movs	r3, #0
}
 8009e24:	4618      	mov	r0, r3
 8009e26:	3718      	adds	r7, #24
 8009e28:	46bd      	mov	sp, r7
 8009e2a:	bd80      	pop	{r7, pc}
 8009e2c:	0000      	movs	r0, r0
	...

08009e30 <BNO055_Read_DMA>:
	}

}

void BNO055_Read_DMA(BNO055_Structure *bno, uint8_t fast_mode)
{
 8009e30:	b580      	push	{r7, lr}
 8009e32:	b08a      	sub	sp, #40	@ 0x28
 8009e34:	af04      	add	r7, sp, #16
 8009e36:	6078      	str	r0, [r7, #4]
 8009e38:	460b      	mov	r3, r1
 8009e3a:	70fb      	strb	r3, [r7, #3]
	uint8_t read_mode;
	HAL_I2C_Mem_Read(bno->hi2cx, bno->address, OPR_MODE, 1, &read_mode, 1, 10);
 8009e3c:	687b      	ldr	r3, [r7, #4]
 8009e3e:	6818      	ldr	r0, [r3, #0]
 8009e40:	687b      	ldr	r3, [r7, #4]
 8009e42:	791b      	ldrb	r3, [r3, #4]
 8009e44:	4619      	mov	r1, r3
 8009e46:	230a      	movs	r3, #10
 8009e48:	9302      	str	r3, [sp, #8]
 8009e4a:	2301      	movs	r3, #1
 8009e4c:	9301      	str	r3, [sp, #4]
 8009e4e:	f107 030f 	add.w	r3, r7, #15
 8009e52:	9300      	str	r3, [sp, #0]
 8009e54:	2301      	movs	r3, #1
 8009e56:	223d      	movs	r2, #61	@ 0x3d
 8009e58:	f7f9 ffe2 	bl	8003e20 <HAL_I2C_Mem_Read>
	if (read_mode != bno->mode) {
 8009e5c:	687b      	ldr	r3, [r7, #4]
 8009e5e:	795a      	ldrb	r2, [r3, #5]
 8009e60:	7bfb      	ldrb	r3, [r7, #15]
 8009e62:	429a      	cmp	r2, r3
 8009e64:	d00f      	beq.n	8009e86 <BNO055_Read_DMA+0x56>
		HAL_I2C_Mem_Write(bno->hi2cx, bno->address, OPR_MODE, 1, &bno->mode, 1, 10);
 8009e66:	687b      	ldr	r3, [r7, #4]
 8009e68:	6818      	ldr	r0, [r3, #0]
 8009e6a:	687b      	ldr	r3, [r7, #4]
 8009e6c:	791b      	ldrb	r3, [r3, #4]
 8009e6e:	4619      	mov	r1, r3
 8009e70:	687b      	ldr	r3, [r7, #4]
 8009e72:	3305      	adds	r3, #5
 8009e74:	220a      	movs	r2, #10
 8009e76:	9202      	str	r2, [sp, #8]
 8009e78:	2201      	movs	r2, #1
 8009e7a:	9201      	str	r2, [sp, #4]
 8009e7c:	9300      	str	r3, [sp, #0]
 8009e7e:	2301      	movs	r3, #1
 8009e80:	223d      	movs	r2, #61	@ 0x3d
 8009e82:	f7f9 feb9 	bl	8003bf8 <HAL_I2C_Mem_Write>
	}

	const double scale = (1.0 / (1 << 14));
 8009e86:	f04f 0200 	mov.w	r2, #0
 8009e8a:	4bc3      	ldr	r3, [pc, #780]	@ (800a198 <BNO055_Read_DMA+0x368>)
 8009e8c:	e9c7 2304 	strd	r2, r3, [r7, #16]

	bno->accel.x = ((double) bno->DataBuffer[0].i16) / 100.0;
 8009e90:	687b      	ldr	r3, [r7, #4]
 8009e92:	f9b3 30b8 	ldrsh.w	r3, [r3, #184]	@ 0xb8
 8009e96:	4618      	mov	r0, r3
 8009e98:	f7f6 fb54 	bl	8000544 <__aeabi_i2d>
 8009e9c:	f04f 0200 	mov.w	r2, #0
 8009ea0:	4bbe      	ldr	r3, [pc, #760]	@ (800a19c <BNO055_Read_DMA+0x36c>)
 8009ea2:	f7f6 fce3 	bl	800086c <__aeabi_ddiv>
 8009ea6:	4602      	mov	r2, r0
 8009ea8:	460b      	mov	r3, r1
 8009eaa:	6879      	ldr	r1, [r7, #4]
 8009eac:	e9c1 2302 	strd	r2, r3, [r1, #8]
	bno->accel.y = ((double) bno->DataBuffer[1].i16) / 100.0;
 8009eb0:	687b      	ldr	r3, [r7, #4]
 8009eb2:	f9b3 30ba 	ldrsh.w	r3, [r3, #186]	@ 0xba
 8009eb6:	4618      	mov	r0, r3
 8009eb8:	f7f6 fb44 	bl	8000544 <__aeabi_i2d>
 8009ebc:	f04f 0200 	mov.w	r2, #0
 8009ec0:	4bb6      	ldr	r3, [pc, #728]	@ (800a19c <BNO055_Read_DMA+0x36c>)
 8009ec2:	f7f6 fcd3 	bl	800086c <__aeabi_ddiv>
 8009ec6:	4602      	mov	r2, r0
 8009ec8:	460b      	mov	r3, r1
 8009eca:	6879      	ldr	r1, [r7, #4]
 8009ecc:	e9c1 2304 	strd	r2, r3, [r1, #16]
	bno->accel.z = ((double) bno->DataBuffer[2].i16) / 100.0;
 8009ed0:	687b      	ldr	r3, [r7, #4]
 8009ed2:	f9b3 30bc 	ldrsh.w	r3, [r3, #188]	@ 0xbc
 8009ed6:	4618      	mov	r0, r3
 8009ed8:	f7f6 fb34 	bl	8000544 <__aeabi_i2d>
 8009edc:	f04f 0200 	mov.w	r2, #0
 8009ee0:	4bae      	ldr	r3, [pc, #696]	@ (800a19c <BNO055_Read_DMA+0x36c>)
 8009ee2:	f7f6 fcc3 	bl	800086c <__aeabi_ddiv>
 8009ee6:	4602      	mov	r2, r0
 8009ee8:	460b      	mov	r3, r1
 8009eea:	6879      	ldr	r1, [r7, #4]
 8009eec:	e9c1 2306 	strd	r2, r3, [r1, #24]

	bno->mag.x = ((double) bno->DataBuffer[3].i16) / 16.0;
 8009ef0:	687b      	ldr	r3, [r7, #4]
 8009ef2:	f9b3 30be 	ldrsh.w	r3, [r3, #190]	@ 0xbe
 8009ef6:	4618      	mov	r0, r3
 8009ef8:	f7f6 fb24 	bl	8000544 <__aeabi_i2d>
 8009efc:	f04f 0200 	mov.w	r2, #0
 8009f00:	4ba7      	ldr	r3, [pc, #668]	@ (800a1a0 <BNO055_Read_DMA+0x370>)
 8009f02:	f7f6 fcb3 	bl	800086c <__aeabi_ddiv>
 8009f06:	4602      	mov	r2, r0
 8009f08:	460b      	mov	r3, r1
 8009f0a:	6879      	ldr	r1, [r7, #4]
 8009f0c:	e9c1 2308 	strd	r2, r3, [r1, #32]
	bno->mag.y = ((double) bno->DataBuffer[4].i16) / 16.0;
 8009f10:	687b      	ldr	r3, [r7, #4]
 8009f12:	f9b3 30c0 	ldrsh.w	r3, [r3, #192]	@ 0xc0
 8009f16:	4618      	mov	r0, r3
 8009f18:	f7f6 fb14 	bl	8000544 <__aeabi_i2d>
 8009f1c:	f04f 0200 	mov.w	r2, #0
 8009f20:	4b9f      	ldr	r3, [pc, #636]	@ (800a1a0 <BNO055_Read_DMA+0x370>)
 8009f22:	f7f6 fca3 	bl	800086c <__aeabi_ddiv>
 8009f26:	4602      	mov	r2, r0
 8009f28:	460b      	mov	r3, r1
 8009f2a:	6879      	ldr	r1, [r7, #4]
 8009f2c:	e9c1 230a 	strd	r2, r3, [r1, #40]	@ 0x28
	bno->mag.z = ((double) bno->DataBuffer[5].i16) / 16.0;
 8009f30:	687b      	ldr	r3, [r7, #4]
 8009f32:	f9b3 30c2 	ldrsh.w	r3, [r3, #194]	@ 0xc2
 8009f36:	4618      	mov	r0, r3
 8009f38:	f7f6 fb04 	bl	8000544 <__aeabi_i2d>
 8009f3c:	f04f 0200 	mov.w	r2, #0
 8009f40:	4b97      	ldr	r3, [pc, #604]	@ (800a1a0 <BNO055_Read_DMA+0x370>)
 8009f42:	f7f6 fc93 	bl	800086c <__aeabi_ddiv>
 8009f46:	4602      	mov	r2, r0
 8009f48:	460b      	mov	r3, r1
 8009f4a:	6879      	ldr	r1, [r7, #4]
 8009f4c:	e9c1 230c 	strd	r2, r3, [r1, #48]	@ 0x30

	bno->gyro.x = ((double) bno->DataBuffer[6].i16) * M_PI / (16.0 * 180.0);
 8009f50:	687b      	ldr	r3, [r7, #4]
 8009f52:	f9b3 30c4 	ldrsh.w	r3, [r3, #196]	@ 0xc4
 8009f56:	4618      	mov	r0, r3
 8009f58:	f7f6 faf4 	bl	8000544 <__aeabi_i2d>
 8009f5c:	a38c      	add	r3, pc, #560	@ (adr r3, 800a190 <BNO055_Read_DMA+0x360>)
 8009f5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f62:	f7f6 fb59 	bl	8000618 <__aeabi_dmul>
 8009f66:	4602      	mov	r2, r0
 8009f68:	460b      	mov	r3, r1
 8009f6a:	4610      	mov	r0, r2
 8009f6c:	4619      	mov	r1, r3
 8009f6e:	f04f 0200 	mov.w	r2, #0
 8009f72:	4b8c      	ldr	r3, [pc, #560]	@ (800a1a4 <BNO055_Read_DMA+0x374>)
 8009f74:	f7f6 fc7a 	bl	800086c <__aeabi_ddiv>
 8009f78:	4602      	mov	r2, r0
 8009f7a:	460b      	mov	r3, r1
 8009f7c:	6879      	ldr	r1, [r7, #4]
 8009f7e:	e9c1 230e 	strd	r2, r3, [r1, #56]	@ 0x38
	bno->gyro.y = ((double) bno->DataBuffer[7].i16) * M_PI / (16.0 * 180.0);
 8009f82:	687b      	ldr	r3, [r7, #4]
 8009f84:	f9b3 30c6 	ldrsh.w	r3, [r3, #198]	@ 0xc6
 8009f88:	4618      	mov	r0, r3
 8009f8a:	f7f6 fadb 	bl	8000544 <__aeabi_i2d>
 8009f8e:	a380      	add	r3, pc, #512	@ (adr r3, 800a190 <BNO055_Read_DMA+0x360>)
 8009f90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f94:	f7f6 fb40 	bl	8000618 <__aeabi_dmul>
 8009f98:	4602      	mov	r2, r0
 8009f9a:	460b      	mov	r3, r1
 8009f9c:	4610      	mov	r0, r2
 8009f9e:	4619      	mov	r1, r3
 8009fa0:	f04f 0200 	mov.w	r2, #0
 8009fa4:	4b7f      	ldr	r3, [pc, #508]	@ (800a1a4 <BNO055_Read_DMA+0x374>)
 8009fa6:	f7f6 fc61 	bl	800086c <__aeabi_ddiv>
 8009faa:	4602      	mov	r2, r0
 8009fac:	460b      	mov	r3, r1
 8009fae:	6879      	ldr	r1, [r7, #4]
 8009fb0:	e9c1 2310 	strd	r2, r3, [r1, #64]	@ 0x40
	bno->gyro.z = ((double) bno->DataBuffer[8].i16) * M_PI / (16.0 * 180.0);
 8009fb4:	687b      	ldr	r3, [r7, #4]
 8009fb6:	f9b3 30c8 	ldrsh.w	r3, [r3, #200]	@ 0xc8
 8009fba:	4618      	mov	r0, r3
 8009fbc:	f7f6 fac2 	bl	8000544 <__aeabi_i2d>
 8009fc0:	a373      	add	r3, pc, #460	@ (adr r3, 800a190 <BNO055_Read_DMA+0x360>)
 8009fc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009fc6:	f7f6 fb27 	bl	8000618 <__aeabi_dmul>
 8009fca:	4602      	mov	r2, r0
 8009fcc:	460b      	mov	r3, r1
 8009fce:	4610      	mov	r0, r2
 8009fd0:	4619      	mov	r1, r3
 8009fd2:	f04f 0200 	mov.w	r2, #0
 8009fd6:	4b73      	ldr	r3, [pc, #460]	@ (800a1a4 <BNO055_Read_DMA+0x374>)
 8009fd8:	f7f6 fc48 	bl	800086c <__aeabi_ddiv>
 8009fdc:	4602      	mov	r2, r0
 8009fde:	460b      	mov	r3, r1
 8009fe0:	6879      	ldr	r1, [r7, #4]
 8009fe2:	e9c1 2312 	strd	r2, r3, [r1, #72]	@ 0x48

	bno->euler.yaw = ((double) bno->DataBuffer[9].i16) * M_PI / (16.0 * 180.0);
 8009fe6:	687b      	ldr	r3, [r7, #4]
 8009fe8:	f9b3 30ca 	ldrsh.w	r3, [r3, #202]	@ 0xca
 8009fec:	4618      	mov	r0, r3
 8009fee:	f7f6 faa9 	bl	8000544 <__aeabi_i2d>
 8009ff2:	a367      	add	r3, pc, #412	@ (adr r3, 800a190 <BNO055_Read_DMA+0x360>)
 8009ff4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ff8:	f7f6 fb0e 	bl	8000618 <__aeabi_dmul>
 8009ffc:	4602      	mov	r2, r0
 8009ffe:	460b      	mov	r3, r1
 800a000:	4610      	mov	r0, r2
 800a002:	4619      	mov	r1, r3
 800a004:	f04f 0200 	mov.w	r2, #0
 800a008:	4b66      	ldr	r3, [pc, #408]	@ (800a1a4 <BNO055_Read_DMA+0x374>)
 800a00a:	f7f6 fc2f 	bl	800086c <__aeabi_ddiv>
 800a00e:	4602      	mov	r2, r0
 800a010:	460b      	mov	r3, r1
 800a012:	6879      	ldr	r1, [r7, #4]
 800a014:	e9c1 2318 	strd	r2, r3, [r1, #96]	@ 0x60
	bno->euler.roll = ((double) bno->DataBuffer[10].i16) * M_PI / (16.0 * 180.0);
 800a018:	687b      	ldr	r3, [r7, #4]
 800a01a:	f9b3 30cc 	ldrsh.w	r3, [r3, #204]	@ 0xcc
 800a01e:	4618      	mov	r0, r3
 800a020:	f7f6 fa90 	bl	8000544 <__aeabi_i2d>
 800a024:	a35a      	add	r3, pc, #360	@ (adr r3, 800a190 <BNO055_Read_DMA+0x360>)
 800a026:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a02a:	f7f6 faf5 	bl	8000618 <__aeabi_dmul>
 800a02e:	4602      	mov	r2, r0
 800a030:	460b      	mov	r3, r1
 800a032:	4610      	mov	r0, r2
 800a034:	4619      	mov	r1, r3
 800a036:	f04f 0200 	mov.w	r2, #0
 800a03a:	4b5a      	ldr	r3, [pc, #360]	@ (800a1a4 <BNO055_Read_DMA+0x374>)
 800a03c:	f7f6 fc16 	bl	800086c <__aeabi_ddiv>
 800a040:	4602      	mov	r2, r0
 800a042:	460b      	mov	r3, r1
 800a044:	6879      	ldr	r1, [r7, #4]
 800a046:	e9c1 2314 	strd	r2, r3, [r1, #80]	@ 0x50
	bno->euler.pitch = ((double) bno->DataBuffer[11].i16) * M_PI / (16.0 * 180.0);
 800a04a:	687b      	ldr	r3, [r7, #4]
 800a04c:	f9b3 30ce 	ldrsh.w	r3, [r3, #206]	@ 0xce
 800a050:	4618      	mov	r0, r3
 800a052:	f7f6 fa77 	bl	8000544 <__aeabi_i2d>
 800a056:	a34e      	add	r3, pc, #312	@ (adr r3, 800a190 <BNO055_Read_DMA+0x360>)
 800a058:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a05c:	f7f6 fadc 	bl	8000618 <__aeabi_dmul>
 800a060:	4602      	mov	r2, r0
 800a062:	460b      	mov	r3, r1
 800a064:	4610      	mov	r0, r2
 800a066:	4619      	mov	r1, r3
 800a068:	f04f 0200 	mov.w	r2, #0
 800a06c:	4b4d      	ldr	r3, [pc, #308]	@ (800a1a4 <BNO055_Read_DMA+0x374>)
 800a06e:	f7f6 fbfd 	bl	800086c <__aeabi_ddiv>
 800a072:	4602      	mov	r2, r0
 800a074:	460b      	mov	r3, r1
 800a076:	6879      	ldr	r1, [r7, #4]
 800a078:	e9c1 2316 	strd	r2, r3, [r1, #88]	@ 0x58

	bno->quat.w = bno->DataBuffer[12].i16 * scale;
 800a07c:	687b      	ldr	r3, [r7, #4]
 800a07e:	f9b3 30d0 	ldrsh.w	r3, [r3, #208]	@ 0xd0
 800a082:	4618      	mov	r0, r3
 800a084:	f7f6 fa5e 	bl	8000544 <__aeabi_i2d>
 800a088:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800a08c:	f7f6 fac4 	bl	8000618 <__aeabi_dmul>
 800a090:	4602      	mov	r2, r0
 800a092:	460b      	mov	r3, r1
 800a094:	6879      	ldr	r1, [r7, #4]
 800a096:	e9c1 2320 	strd	r2, r3, [r1, #128]	@ 0x80
	bno->quat.x = bno->DataBuffer[13].i16 * scale;
 800a09a:	687b      	ldr	r3, [r7, #4]
 800a09c:	f9b3 30d2 	ldrsh.w	r3, [r3, #210]	@ 0xd2
 800a0a0:	4618      	mov	r0, r3
 800a0a2:	f7f6 fa4f 	bl	8000544 <__aeabi_i2d>
 800a0a6:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800a0aa:	f7f6 fab5 	bl	8000618 <__aeabi_dmul>
 800a0ae:	4602      	mov	r2, r0
 800a0b0:	460b      	mov	r3, r1
 800a0b2:	6879      	ldr	r1, [r7, #4]
 800a0b4:	e9c1 231a 	strd	r2, r3, [r1, #104]	@ 0x68
	bno->quat.y = bno->DataBuffer[14].i16 * scale;
 800a0b8:	687b      	ldr	r3, [r7, #4]
 800a0ba:	f9b3 30d4 	ldrsh.w	r3, [r3, #212]	@ 0xd4
 800a0be:	4618      	mov	r0, r3
 800a0c0:	f7f6 fa40 	bl	8000544 <__aeabi_i2d>
 800a0c4:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800a0c8:	f7f6 faa6 	bl	8000618 <__aeabi_dmul>
 800a0cc:	4602      	mov	r2, r0
 800a0ce:	460b      	mov	r3, r1
 800a0d0:	6879      	ldr	r1, [r7, #4]
 800a0d2:	e9c1 231c 	strd	r2, r3, [r1, #112]	@ 0x70
	bno->quat.z = bno->DataBuffer[15].i16 * scale;
 800a0d6:	687b      	ldr	r3, [r7, #4]
 800a0d8:	f9b3 30d6 	ldrsh.w	r3, [r3, #214]	@ 0xd6
 800a0dc:	4618      	mov	r0, r3
 800a0de:	f7f6 fa31 	bl	8000544 <__aeabi_i2d>
 800a0e2:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800a0e6:	f7f6 fa97 	bl	8000618 <__aeabi_dmul>
 800a0ea:	4602      	mov	r2, r0
 800a0ec:	460b      	mov	r3, r1
 800a0ee:	6879      	ldr	r1, [r7, #4]
 800a0f0:	e9c1 231e 	strd	r2, r3, [r1, #120]	@ 0x78

	if (!fast_mode) {
 800a0f4:	78fb      	ldrb	r3, [r7, #3]
 800a0f6:	2b00      	cmp	r3, #0
 800a0f8:	d17d      	bne.n	800a1f6 <BNO055_Read_DMA+0x3c6>

		bno->lin_acc.x = ((double) bno->DataBuffer[16].i16) / 100.0;
 800a0fa:	687b      	ldr	r3, [r7, #4]
 800a0fc:	f9b3 30d8 	ldrsh.w	r3, [r3, #216]	@ 0xd8
 800a100:	4618      	mov	r0, r3
 800a102:	f7f6 fa1f 	bl	8000544 <__aeabi_i2d>
 800a106:	f04f 0200 	mov.w	r2, #0
 800a10a:	4b24      	ldr	r3, [pc, #144]	@ (800a19c <BNO055_Read_DMA+0x36c>)
 800a10c:	f7f6 fbae 	bl	800086c <__aeabi_ddiv>
 800a110:	4602      	mov	r2, r0
 800a112:	460b      	mov	r3, r1
 800a114:	6879      	ldr	r1, [r7, #4]
 800a116:	e9c1 2322 	strd	r2, r3, [r1, #136]	@ 0x88
		bno->lin_acc.y = ((double) bno->DataBuffer[17].i16) / 100.0;
 800a11a:	687b      	ldr	r3, [r7, #4]
 800a11c:	f9b3 30da 	ldrsh.w	r3, [r3, #218]	@ 0xda
 800a120:	4618      	mov	r0, r3
 800a122:	f7f6 fa0f 	bl	8000544 <__aeabi_i2d>
 800a126:	f04f 0200 	mov.w	r2, #0
 800a12a:	4b1c      	ldr	r3, [pc, #112]	@ (800a19c <BNO055_Read_DMA+0x36c>)
 800a12c:	f7f6 fb9e 	bl	800086c <__aeabi_ddiv>
 800a130:	4602      	mov	r2, r0
 800a132:	460b      	mov	r3, r1
 800a134:	6879      	ldr	r1, [r7, #4]
 800a136:	e9c1 2324 	strd	r2, r3, [r1, #144]	@ 0x90
		bno->lin_acc.z = ((double) bno->DataBuffer[18].i16) / 100.0;
 800a13a:	687b      	ldr	r3, [r7, #4]
 800a13c:	f9b3 30dc 	ldrsh.w	r3, [r3, #220]	@ 0xdc
 800a140:	4618      	mov	r0, r3
 800a142:	f7f6 f9ff 	bl	8000544 <__aeabi_i2d>
 800a146:	f04f 0200 	mov.w	r2, #0
 800a14a:	4b14      	ldr	r3, [pc, #80]	@ (800a19c <BNO055_Read_DMA+0x36c>)
 800a14c:	f7f6 fb8e 	bl	800086c <__aeabi_ddiv>
 800a150:	4602      	mov	r2, r0
 800a152:	460b      	mov	r3, r1
 800a154:	6879      	ldr	r1, [r7, #4]
 800a156:	e9c1 2326 	strd	r2, r3, [r1, #152]	@ 0x98

		bno->grav.x = ((double) bno->DataBuffer[19].i16) / 100.0;
 800a15a:	687b      	ldr	r3, [r7, #4]
 800a15c:	f9b3 30de 	ldrsh.w	r3, [r3, #222]	@ 0xde
 800a160:	4618      	mov	r0, r3
 800a162:	f7f6 f9ef 	bl	8000544 <__aeabi_i2d>
 800a166:	f04f 0200 	mov.w	r2, #0
 800a16a:	4b0c      	ldr	r3, [pc, #48]	@ (800a19c <BNO055_Read_DMA+0x36c>)
 800a16c:	f7f6 fb7e 	bl	800086c <__aeabi_ddiv>
 800a170:	4602      	mov	r2, r0
 800a172:	460b      	mov	r3, r1
 800a174:	6879      	ldr	r1, [r7, #4]
 800a176:	e9c1 2328 	strd	r2, r3, [r1, #160]	@ 0xa0
		bno->grav.y = ((double) bno->DataBuffer[20].i16) / 100.0;
 800a17a:	687b      	ldr	r3, [r7, #4]
 800a17c:	f9b3 30e0 	ldrsh.w	r3, [r3, #224]	@ 0xe0
 800a180:	4618      	mov	r0, r3
 800a182:	f7f6 f9df 	bl	8000544 <__aeabi_i2d>
 800a186:	f04f 0200 	mov.w	r2, #0
 800a18a:	e00d      	b.n	800a1a8 <BNO055_Read_DMA+0x378>
 800a18c:	f3af 8000 	nop.w
 800a190:	54442d18 	.word	0x54442d18
 800a194:	400921fb 	.word	0x400921fb
 800a198:	3f100000 	.word	0x3f100000
 800a19c:	40590000 	.word	0x40590000
 800a1a0:	40300000 	.word	0x40300000
 800a1a4:	40a68000 	.word	0x40a68000
 800a1a8:	4b1c      	ldr	r3, [pc, #112]	@ (800a21c <BNO055_Read_DMA+0x3ec>)
 800a1aa:	f7f6 fb5f 	bl	800086c <__aeabi_ddiv>
 800a1ae:	4602      	mov	r2, r0
 800a1b0:	460b      	mov	r3, r1
 800a1b2:	6879      	ldr	r1, [r7, #4]
 800a1b4:	e9c1 232a 	strd	r2, r3, [r1, #168]	@ 0xa8
		bno->grav.z = ((double) bno->DataBuffer[21].i16) / 100.0;
 800a1b8:	687b      	ldr	r3, [r7, #4]
 800a1ba:	f9b3 30e2 	ldrsh.w	r3, [r3, #226]	@ 0xe2
 800a1be:	4618      	mov	r0, r3
 800a1c0:	f7f6 f9c0 	bl	8000544 <__aeabi_i2d>
 800a1c4:	f04f 0200 	mov.w	r2, #0
 800a1c8:	4b14      	ldr	r3, [pc, #80]	@ (800a21c <BNO055_Read_DMA+0x3ec>)
 800a1ca:	f7f6 fb4f 	bl	800086c <__aeabi_ddiv>
 800a1ce:	4602      	mov	r2, r0
 800a1d0:	460b      	mov	r3, r1
 800a1d2:	6879      	ldr	r1, [r7, #4]
 800a1d4:	e9c1 232c 	strd	r2, r3, [r1, #176]	@ 0xb0

		HAL_I2C_Mem_Read_DMA(bno->hi2cx, bno->address, ACC_DATA_X_LSB, 1, bno->DataBuffer->u8, 44);
 800a1d8:	687b      	ldr	r3, [r7, #4]
 800a1da:	6818      	ldr	r0, [r3, #0]
 800a1dc:	687b      	ldr	r3, [r7, #4]
 800a1de:	791b      	ldrb	r3, [r3, #4]
 800a1e0:	4619      	mov	r1, r3
 800a1e2:	687b      	ldr	r3, [r7, #4]
 800a1e4:	33b8      	adds	r3, #184	@ 0xb8
 800a1e6:	222c      	movs	r2, #44	@ 0x2c
 800a1e8:	9201      	str	r2, [sp, #4]
 800a1ea:	9300      	str	r3, [sp, #0]
 800a1ec:	2301      	movs	r3, #1
 800a1ee:	2208      	movs	r2, #8
 800a1f0:	f7f9 ff30 	bl	8004054 <HAL_I2C_Mem_Read_DMA>
	} else {
		HAL_I2C_Mem_Read_DMA(bno->hi2cx, bno->address, ACC_DATA_X_LSB, 1, bno->DataBuffer->u8, 32);
	}
}
 800a1f4:	e00d      	b.n	800a212 <BNO055_Read_DMA+0x3e2>
		HAL_I2C_Mem_Read_DMA(bno->hi2cx, bno->address, ACC_DATA_X_LSB, 1, bno->DataBuffer->u8, 32);
 800a1f6:	687b      	ldr	r3, [r7, #4]
 800a1f8:	6818      	ldr	r0, [r3, #0]
 800a1fa:	687b      	ldr	r3, [r7, #4]
 800a1fc:	791b      	ldrb	r3, [r3, #4]
 800a1fe:	4619      	mov	r1, r3
 800a200:	687b      	ldr	r3, [r7, #4]
 800a202:	33b8      	adds	r3, #184	@ 0xb8
 800a204:	2220      	movs	r2, #32
 800a206:	9201      	str	r2, [sp, #4]
 800a208:	9300      	str	r3, [sp, #0]
 800a20a:	2301      	movs	r3, #1
 800a20c:	2208      	movs	r2, #8
 800a20e:	f7f9 ff21 	bl	8004054 <HAL_I2C_Mem_Read_DMA>
}
 800a212:	bf00      	nop
 800a214:	3718      	adds	r7, #24
 800a216:	46bd      	mov	sp, r7
 800a218:	bd80      	pop	{r7, pc}
 800a21a:	bf00      	nop
 800a21c:	40590000 	.word	0x40590000

0800a220 <BNO055_SetOffsets>:
		HAL_Delay(20);
	}
}

void BNO055_SetOffsets(BNO055_Structure *bno, BNO055_Offsets *bno_offset)
{
 800a220:	b580      	push	{r7, lr}
 800a222:	b08e      	sub	sp, #56	@ 0x38
 800a224:	af04      	add	r7, sp, #16
 800a226:	6078      	str	r0, [r7, #4]
 800a228:	6039      	str	r1, [r7, #0]
	uint8_t read_mode;
	HAL_I2C_Mem_Read(bno->hi2cx, bno->address, OPR_MODE, 1, &read_mode, 1, 10);
 800a22a:	687b      	ldr	r3, [r7, #4]
 800a22c:	6818      	ldr	r0, [r3, #0]
 800a22e:	687b      	ldr	r3, [r7, #4]
 800a230:	791b      	ldrb	r3, [r3, #4]
 800a232:	4619      	mov	r1, r3
 800a234:	230a      	movs	r3, #10
 800a236:	9302      	str	r3, [sp, #8]
 800a238:	2301      	movs	r3, #1
 800a23a:	9301      	str	r3, [sp, #4]
 800a23c:	f107 0327 	add.w	r3, r7, #39	@ 0x27
 800a240:	9300      	str	r3, [sp, #0]
 800a242:	2301      	movs	r3, #1
 800a244:	223d      	movs	r2, #61	@ 0x3d
 800a246:	f7f9 fdeb 	bl	8003e20 <HAL_I2C_Mem_Read>
	if (read_mode != CONFIGMODE) {
 800a24a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800a24e:	2b00      	cmp	r3, #0
 800a250:	d014      	beq.n	800a27c <BNO055_SetOffsets+0x5c>
		uint8_t txbuffer = CONFIGMODE;
 800a252:	2300      	movs	r3, #0
 800a254:	73fb      	strb	r3, [r7, #15]
		HAL_I2C_Mem_Write(bno->hi2cx, bno->address, OPR_MODE, 1, &txbuffer, 1, 10);
 800a256:	687b      	ldr	r3, [r7, #4]
 800a258:	6818      	ldr	r0, [r3, #0]
 800a25a:	687b      	ldr	r3, [r7, #4]
 800a25c:	791b      	ldrb	r3, [r3, #4]
 800a25e:	4619      	mov	r1, r3
 800a260:	230a      	movs	r3, #10
 800a262:	9302      	str	r3, [sp, #8]
 800a264:	2301      	movs	r3, #1
 800a266:	9301      	str	r3, [sp, #4]
 800a268:	f107 030f 	add.w	r3, r7, #15
 800a26c:	9300      	str	r3, [sp, #0]
 800a26e:	2301      	movs	r3, #1
 800a270:	223d      	movs	r2, #61	@ 0x3d
 800a272:	f7f9 fcc1 	bl	8003bf8 <HAL_I2C_Mem_Write>
		HAL_Delay(20);
 800a276:	2014      	movs	r0, #20
 800a278:	f7f8 ff22 	bl	80030c0 <HAL_Delay>
	}

	uint8_t txbuffer[22];
	txbuffer[0] = bno_offset->accel_offset_x.u8[0];
 800a27c:	683b      	ldr	r3, [r7, #0]
 800a27e:	781b      	ldrb	r3, [r3, #0]
 800a280:	743b      	strb	r3, [r7, #16]
	txbuffer[1] = bno_offset->accel_offset_x.u8[1];
 800a282:	683b      	ldr	r3, [r7, #0]
 800a284:	785b      	ldrb	r3, [r3, #1]
 800a286:	747b      	strb	r3, [r7, #17]
	txbuffer[2] = bno_offset->accel_offset_y.u8[0];
 800a288:	683b      	ldr	r3, [r7, #0]
 800a28a:	789b      	ldrb	r3, [r3, #2]
 800a28c:	74bb      	strb	r3, [r7, #18]
	txbuffer[3] = bno_offset->accel_offset_y.u8[1];
 800a28e:	683b      	ldr	r3, [r7, #0]
 800a290:	78db      	ldrb	r3, [r3, #3]
 800a292:	74fb      	strb	r3, [r7, #19]
	txbuffer[4] = bno_offset->accel_offset_z.u8[0];
 800a294:	683b      	ldr	r3, [r7, #0]
 800a296:	791b      	ldrb	r3, [r3, #4]
 800a298:	753b      	strb	r3, [r7, #20]
	txbuffer[5] = bno_offset->accel_offset_z.u8[1];
 800a29a:	683b      	ldr	r3, [r7, #0]
 800a29c:	795b      	ldrb	r3, [r3, #5]
 800a29e:	757b      	strb	r3, [r7, #21]
	txbuffer[6] = bno_offset->mag_offset_x.u8[0];
 800a2a0:	683b      	ldr	r3, [r7, #0]
 800a2a2:	799b      	ldrb	r3, [r3, #6]
 800a2a4:	75bb      	strb	r3, [r7, #22]
	txbuffer[7] = bno_offset->mag_offset_x.u8[1];
 800a2a6:	683b      	ldr	r3, [r7, #0]
 800a2a8:	79db      	ldrb	r3, [r3, #7]
 800a2aa:	75fb      	strb	r3, [r7, #23]
	txbuffer[8] = bno_offset->mag_offset_y.u8[0];
 800a2ac:	683b      	ldr	r3, [r7, #0]
 800a2ae:	7a1b      	ldrb	r3, [r3, #8]
 800a2b0:	763b      	strb	r3, [r7, #24]
	txbuffer[9] = bno_offset->mag_offset_y.u8[1];
 800a2b2:	683b      	ldr	r3, [r7, #0]
 800a2b4:	7a5b      	ldrb	r3, [r3, #9]
 800a2b6:	767b      	strb	r3, [r7, #25]
	txbuffer[10] = bno_offset->mag_offset_z.u8[0];
 800a2b8:	683b      	ldr	r3, [r7, #0]
 800a2ba:	7a9b      	ldrb	r3, [r3, #10]
 800a2bc:	76bb      	strb	r3, [r7, #26]
	txbuffer[11] = bno_offset->mag_offset_z.u8[1];
 800a2be:	683b      	ldr	r3, [r7, #0]
 800a2c0:	7adb      	ldrb	r3, [r3, #11]
 800a2c2:	76fb      	strb	r3, [r7, #27]
	txbuffer[12] = bno_offset->gyro_offset_x.u8[0];
 800a2c4:	683b      	ldr	r3, [r7, #0]
 800a2c6:	7b1b      	ldrb	r3, [r3, #12]
 800a2c8:	773b      	strb	r3, [r7, #28]
	txbuffer[13] = bno_offset->gyro_offset_x.u8[1];
 800a2ca:	683b      	ldr	r3, [r7, #0]
 800a2cc:	7b5b      	ldrb	r3, [r3, #13]
 800a2ce:	777b      	strb	r3, [r7, #29]
	txbuffer[14] = bno_offset->gyro_offset_y.u8[0];
 800a2d0:	683b      	ldr	r3, [r7, #0]
 800a2d2:	7b9b      	ldrb	r3, [r3, #14]
 800a2d4:	77bb      	strb	r3, [r7, #30]
	txbuffer[15] = bno_offset->gyro_offset_y.u8[1];
 800a2d6:	683b      	ldr	r3, [r7, #0]
 800a2d8:	7bdb      	ldrb	r3, [r3, #15]
 800a2da:	77fb      	strb	r3, [r7, #31]
	txbuffer[16] = bno_offset->gyro_offset_z.u8[0];
 800a2dc:	683b      	ldr	r3, [r7, #0]
 800a2de:	7c1b      	ldrb	r3, [r3, #16]
 800a2e0:	f887 3020 	strb.w	r3, [r7, #32]
	txbuffer[17] = bno_offset->gyro_offset_z.u8[1];
 800a2e4:	683b      	ldr	r3, [r7, #0]
 800a2e6:	7c5b      	ldrb	r3, [r3, #17]
 800a2e8:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
	txbuffer[18] = bno_offset->accel_radius.u8[0];
 800a2ec:	683b      	ldr	r3, [r7, #0]
 800a2ee:	7c9b      	ldrb	r3, [r3, #18]
 800a2f0:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
	txbuffer[19] = bno_offset->accel_radius.u8[1];
 800a2f4:	683b      	ldr	r3, [r7, #0]
 800a2f6:	7cdb      	ldrb	r3, [r3, #19]
 800a2f8:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
	txbuffer[20] = bno_offset->mag_radius.u8[0];
 800a2fc:	683b      	ldr	r3, [r7, #0]
 800a2fe:	7d1b      	ldrb	r3, [r3, #20]
 800a300:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
	txbuffer[21] = bno_offset->mag_radius.u8[1];
 800a304:	683b      	ldr	r3, [r7, #0]
 800a306:	7d5b      	ldrb	r3, [r3, #21]
 800a308:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25

	HAL_I2C_Mem_Write(bno->hi2cx, bno->address, ACC_OFFSET_X_LSB, 1, txbuffer, 22, 10);
 800a30c:	687b      	ldr	r3, [r7, #4]
 800a30e:	6818      	ldr	r0, [r3, #0]
 800a310:	687b      	ldr	r3, [r7, #4]
 800a312:	791b      	ldrb	r3, [r3, #4]
 800a314:	4619      	mov	r1, r3
 800a316:	230a      	movs	r3, #10
 800a318:	9302      	str	r3, [sp, #8]
 800a31a:	2316      	movs	r3, #22
 800a31c:	9301      	str	r3, [sp, #4]
 800a31e:	f107 0310 	add.w	r3, r7, #16
 800a322:	9300      	str	r3, [sp, #0]
 800a324:	2301      	movs	r3, #1
 800a326:	2255      	movs	r2, #85	@ 0x55
 800a328:	f7f9 fc66 	bl	8003bf8 <HAL_I2C_Mem_Write>

	HAL_I2C_Mem_Read(bno->hi2cx, bno->address, OPR_MODE, 1, &read_mode, 1, 10);
 800a32c:	687b      	ldr	r3, [r7, #4]
 800a32e:	6818      	ldr	r0, [r3, #0]
 800a330:	687b      	ldr	r3, [r7, #4]
 800a332:	791b      	ldrb	r3, [r3, #4]
 800a334:	4619      	mov	r1, r3
 800a336:	230a      	movs	r3, #10
 800a338:	9302      	str	r3, [sp, #8]
 800a33a:	2301      	movs	r3, #1
 800a33c:	9301      	str	r3, [sp, #4]
 800a33e:	f107 0327 	add.w	r3, r7, #39	@ 0x27
 800a342:	9300      	str	r3, [sp, #0]
 800a344:	2301      	movs	r3, #1
 800a346:	223d      	movs	r2, #61	@ 0x3d
 800a348:	f7f9 fd6a 	bl	8003e20 <HAL_I2C_Mem_Read>
	if (read_mode != bno->mode) {
 800a34c:	687b      	ldr	r3, [r7, #4]
 800a34e:	795a      	ldrb	r2, [r3, #5]
 800a350:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800a354:	429a      	cmp	r2, r3
 800a356:	d012      	beq.n	800a37e <BNO055_SetOffsets+0x15e>
		HAL_I2C_Mem_Write(bno->hi2cx, bno->address, OPR_MODE, 1, &bno->mode, 1, 10);
 800a358:	687b      	ldr	r3, [r7, #4]
 800a35a:	6818      	ldr	r0, [r3, #0]
 800a35c:	687b      	ldr	r3, [r7, #4]
 800a35e:	791b      	ldrb	r3, [r3, #4]
 800a360:	4619      	mov	r1, r3
 800a362:	687b      	ldr	r3, [r7, #4]
 800a364:	3305      	adds	r3, #5
 800a366:	220a      	movs	r2, #10
 800a368:	9202      	str	r2, [sp, #8]
 800a36a:	2201      	movs	r2, #1
 800a36c:	9201      	str	r2, [sp, #4]
 800a36e:	9300      	str	r3, [sp, #0]
 800a370:	2301      	movs	r3, #1
 800a372:	223d      	movs	r2, #61	@ 0x3d
 800a374:	f7f9 fc40 	bl	8003bf8 <HAL_I2C_Mem_Write>
		HAL_Delay(20);
 800a378:	2014      	movs	r0, #20
 800a37a:	f7f8 fea1 	bl	80030c0 <HAL_Delay>
	}
}
 800a37e:	bf00      	nop
 800a380:	3728      	adds	r7, #40	@ 0x28
 800a382:	46bd      	mov	sp, r7
 800a384:	bd80      	pop	{r7, pc}

0800a386 <BNO055_SetAxis>:

void BNO055_SetAxis(BNO055_Structure *bno, Remap_Config config, Remap_Sign sign)
{
 800a386:	b580      	push	{r7, lr}
 800a388:	b088      	sub	sp, #32
 800a38a:	af04      	add	r7, sp, #16
 800a38c:	6078      	str	r0, [r7, #4]
 800a38e:	460b      	mov	r3, r1
 800a390:	70fb      	strb	r3, [r7, #3]
 800a392:	4613      	mov	r3, r2
 800a394:	70bb      	strb	r3, [r7, #2]
	uint8_t read_mode;
	HAL_I2C_Mem_Read(bno->hi2cx, bno->address, OPR_MODE, 1, &read_mode, 1, 10);
 800a396:	687b      	ldr	r3, [r7, #4]
 800a398:	6818      	ldr	r0, [r3, #0]
 800a39a:	687b      	ldr	r3, [r7, #4]
 800a39c:	791b      	ldrb	r3, [r3, #4]
 800a39e:	4619      	mov	r1, r3
 800a3a0:	230a      	movs	r3, #10
 800a3a2:	9302      	str	r3, [sp, #8]
 800a3a4:	2301      	movs	r3, #1
 800a3a6:	9301      	str	r3, [sp, #4]
 800a3a8:	f107 030f 	add.w	r3, r7, #15
 800a3ac:	9300      	str	r3, [sp, #0]
 800a3ae:	2301      	movs	r3, #1
 800a3b0:	223d      	movs	r2, #61	@ 0x3d
 800a3b2:	f7f9 fd35 	bl	8003e20 <HAL_I2C_Mem_Read>
	if (read_mode != CONFIGMODE) {
 800a3b6:	7bfb      	ldrb	r3, [r7, #15]
 800a3b8:	2b00      	cmp	r3, #0
 800a3ba:	d014      	beq.n	800a3e6 <BNO055_SetAxis+0x60>
		uint8_t txbuffer = CONFIGMODE;
 800a3bc:	2300      	movs	r3, #0
 800a3be:	737b      	strb	r3, [r7, #13]
		HAL_I2C_Mem_Write(bno->hi2cx, bno->address, OPR_MODE, 1, &txbuffer, 1, 10);
 800a3c0:	687b      	ldr	r3, [r7, #4]
 800a3c2:	6818      	ldr	r0, [r3, #0]
 800a3c4:	687b      	ldr	r3, [r7, #4]
 800a3c6:	791b      	ldrb	r3, [r3, #4]
 800a3c8:	4619      	mov	r1, r3
 800a3ca:	230a      	movs	r3, #10
 800a3cc:	9302      	str	r3, [sp, #8]
 800a3ce:	2301      	movs	r3, #1
 800a3d0:	9301      	str	r3, [sp, #4]
 800a3d2:	f107 030d 	add.w	r3, r7, #13
 800a3d6:	9300      	str	r3, [sp, #0]
 800a3d8:	2301      	movs	r3, #1
 800a3da:	223d      	movs	r2, #61	@ 0x3d
 800a3dc:	f7f9 fc0c 	bl	8003bf8 <HAL_I2C_Mem_Write>
		HAL_Delay(20);
 800a3e0:	2014      	movs	r0, #20
 800a3e2:	f7f8 fe6d 	bl	80030c0 <HAL_Delay>
	}

	uint8_t txbuffer;

	txbuffer = config;
 800a3e6:	78fb      	ldrb	r3, [r7, #3]
 800a3e8:	73bb      	strb	r3, [r7, #14]
	HAL_I2C_Mem_Write(bno->hi2cx, bno->address, AXIS_MAP_CONFIG, 1, &txbuffer, 1, 10);
 800a3ea:	687b      	ldr	r3, [r7, #4]
 800a3ec:	6818      	ldr	r0, [r3, #0]
 800a3ee:	687b      	ldr	r3, [r7, #4]
 800a3f0:	791b      	ldrb	r3, [r3, #4]
 800a3f2:	4619      	mov	r1, r3
 800a3f4:	230a      	movs	r3, #10
 800a3f6:	9302      	str	r3, [sp, #8]
 800a3f8:	2301      	movs	r3, #1
 800a3fa:	9301      	str	r3, [sp, #4]
 800a3fc:	f107 030e 	add.w	r3, r7, #14
 800a400:	9300      	str	r3, [sp, #0]
 800a402:	2301      	movs	r3, #1
 800a404:	2241      	movs	r2, #65	@ 0x41
 800a406:	f7f9 fbf7 	bl	8003bf8 <HAL_I2C_Mem_Write>
	HAL_Delay(20);
 800a40a:	2014      	movs	r0, #20
 800a40c:	f7f8 fe58 	bl	80030c0 <HAL_Delay>

	txbuffer = sign;
 800a410:	78bb      	ldrb	r3, [r7, #2]
 800a412:	73bb      	strb	r3, [r7, #14]
	HAL_I2C_Mem_Write(bno->hi2cx, bno->address, AXIS_MAP_SIGN, 1, &txbuffer, 1, 10);
 800a414:	687b      	ldr	r3, [r7, #4]
 800a416:	6818      	ldr	r0, [r3, #0]
 800a418:	687b      	ldr	r3, [r7, #4]
 800a41a:	791b      	ldrb	r3, [r3, #4]
 800a41c:	4619      	mov	r1, r3
 800a41e:	230a      	movs	r3, #10
 800a420:	9302      	str	r3, [sp, #8]
 800a422:	2301      	movs	r3, #1
 800a424:	9301      	str	r3, [sp, #4]
 800a426:	f107 030e 	add.w	r3, r7, #14
 800a42a:	9300      	str	r3, [sp, #0]
 800a42c:	2301      	movs	r3, #1
 800a42e:	2242      	movs	r2, #66	@ 0x42
 800a430:	f7f9 fbe2 	bl	8003bf8 <HAL_I2C_Mem_Write>
	HAL_Delay(20);
 800a434:	2014      	movs	r0, #20
 800a436:	f7f8 fe43 	bl	80030c0 <HAL_Delay>

	HAL_I2C_Mem_Read(bno->hi2cx, bno->address, OPR_MODE, 1, &read_mode, 1, 10);
 800a43a:	687b      	ldr	r3, [r7, #4]
 800a43c:	6818      	ldr	r0, [r3, #0]
 800a43e:	687b      	ldr	r3, [r7, #4]
 800a440:	791b      	ldrb	r3, [r3, #4]
 800a442:	4619      	mov	r1, r3
 800a444:	230a      	movs	r3, #10
 800a446:	9302      	str	r3, [sp, #8]
 800a448:	2301      	movs	r3, #1
 800a44a:	9301      	str	r3, [sp, #4]
 800a44c:	f107 030f 	add.w	r3, r7, #15
 800a450:	9300      	str	r3, [sp, #0]
 800a452:	2301      	movs	r3, #1
 800a454:	223d      	movs	r2, #61	@ 0x3d
 800a456:	f7f9 fce3 	bl	8003e20 <HAL_I2C_Mem_Read>
	if (read_mode != bno->mode) {
 800a45a:	687b      	ldr	r3, [r7, #4]
 800a45c:	795a      	ldrb	r2, [r3, #5]
 800a45e:	7bfb      	ldrb	r3, [r7, #15]
 800a460:	429a      	cmp	r2, r3
 800a462:	d012      	beq.n	800a48a <BNO055_SetAxis+0x104>
		HAL_I2C_Mem_Write(bno->hi2cx, bno->address, OPR_MODE, 1, &bno->mode, 1, 10);
 800a464:	687b      	ldr	r3, [r7, #4]
 800a466:	6818      	ldr	r0, [r3, #0]
 800a468:	687b      	ldr	r3, [r7, #4]
 800a46a:	791b      	ldrb	r3, [r3, #4]
 800a46c:	4619      	mov	r1, r3
 800a46e:	687b      	ldr	r3, [r7, #4]
 800a470:	3305      	adds	r3, #5
 800a472:	220a      	movs	r2, #10
 800a474:	9202      	str	r2, [sp, #8]
 800a476:	2201      	movs	r2, #1
 800a478:	9201      	str	r2, [sp, #4]
 800a47a:	9300      	str	r3, [sp, #0]
 800a47c:	2301      	movs	r3, #1
 800a47e:	223d      	movs	r2, #61	@ 0x3d
 800a480:	f7f9 fbba 	bl	8003bf8 <HAL_I2C_Mem_Write>
		HAL_Delay(20);
 800a484:	2014      	movs	r0, #20
 800a486:	f7f8 fe1b 	bl	80030c0 <HAL_Delay>
	}
}
 800a48a:	bf00      	nop
 800a48c:	3710      	adds	r7, #16
 800a48e:	46bd      	mov	sp, r7
 800a490:	bd80      	pop	{r7, pc}
	...

0800a494 <RC_Init>:
 */

#include "RC.h"

uint8_t RC_Init(RC_Structure *RCx, TIM_HandleTypeDef *htimx, uint32_t channelx, float cpu_freq, bool isCHN)
{
 800a494:	b580      	push	{r7, lr}
 800a496:	b088      	sub	sp, #32
 800a498:	af00      	add	r7, sp, #0
 800a49a:	6178      	str	r0, [r7, #20]
 800a49c:	6139      	str	r1, [r7, #16]
 800a49e:	60fa      	str	r2, [r7, #12]
 800a4a0:	ed87 0a02 	vstr	s0, [r7, #8]
 800a4a4:	71fb      	strb	r3, [r7, #7]
	RCx->htimx = htimx;
 800a4a6:	697b      	ldr	r3, [r7, #20]
 800a4a8:	693a      	ldr	r2, [r7, #16]
 800a4aa:	601a      	str	r2, [r3, #0]
	RCx->channelx =channelx;
 800a4ac:	697b      	ldr	r3, [r7, #20]
 800a4ae:	68fa      	ldr	r2, [r7, #12]
 800a4b0:	605a      	str	r2, [r3, #4]
	HAL_TIM_Base_Start(RCx->htimx);
 800a4b2:	697b      	ldr	r3, [r7, #20]
 800a4b4:	681b      	ldr	r3, [r3, #0]
 800a4b6:	4618      	mov	r0, r3
 800a4b8:	f7fc fe56 	bl	8007168 <HAL_TIM_Base_Start>
	if (isCHN) HAL_TIMEx_PWMN_Start(RCx->htimx, RCx->channelx);
 800a4bc:	79fb      	ldrb	r3, [r7, #7]
 800a4be:	2b00      	cmp	r3, #0
 800a4c0:	d008      	beq.n	800a4d4 <RC_Init+0x40>
 800a4c2:	697b      	ldr	r3, [r7, #20]
 800a4c4:	681a      	ldr	r2, [r3, #0]
 800a4c6:	697b      	ldr	r3, [r7, #20]
 800a4c8:	685b      	ldr	r3, [r3, #4]
 800a4ca:	4619      	mov	r1, r3
 800a4cc:	4610      	mov	r0, r2
 800a4ce:	f7fd fe9b 	bl	8008208 <HAL_TIMEx_PWMN_Start>
 800a4d2:	e007      	b.n	800a4e4 <RC_Init+0x50>
	else HAL_TIM_PWM_Start(RCx->htimx, RCx->channelx);
 800a4d4:	697b      	ldr	r3, [r7, #20]
 800a4d6:	681a      	ldr	r2, [r3, #0]
 800a4d8:	697b      	ldr	r3, [r7, #20]
 800a4da:	685b      	ldr	r3, [r3, #4]
 800a4dc:	4619      	mov	r1, r3
 800a4de:	4610      	mov	r0, r2
 800a4e0:	f7fc ff3a 	bl	8007358 <HAL_TIM_PWM_Start>

	if (50.0 >= cpu_freq / 2.0) return -1;
 800a4e4:	68b8      	ldr	r0, [r7, #8]
 800a4e6:	f7f6 f83f 	bl	8000568 <__aeabi_f2d>
 800a4ea:	f04f 0200 	mov.w	r2, #0
 800a4ee:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800a4f2:	f7f6 f9bb 	bl	800086c <__aeabi_ddiv>
 800a4f6:	4602      	mov	r2, r0
 800a4f8:	460b      	mov	r3, r1
 800a4fa:	4610      	mov	r0, r2
 800a4fc:	4619      	mov	r1, r3
 800a4fe:	f04f 0200 	mov.w	r2, #0
 800a502:	4b27      	ldr	r3, [pc, #156]	@ (800a5a0 <RC_Init+0x10c>)
 800a504:	f7f6 fb04 	bl	8000b10 <__aeabi_dcmple>
 800a508:	4603      	mov	r3, r0
 800a50a:	2b00      	cmp	r3, #0
 800a50c:	d001      	beq.n	800a512 <RC_Init+0x7e>
 800a50e:	23ff      	movs	r3, #255	@ 0xff
 800a510:	e042      	b.n	800a598 <RC_Init+0x104>
	uint32_t period_cyc = (uint32_t) (cpu_freq / 50.0);
 800a512:	68b8      	ldr	r0, [r7, #8]
 800a514:	f7f6 f828 	bl	8000568 <__aeabi_f2d>
 800a518:	f04f 0200 	mov.w	r2, #0
 800a51c:	4b20      	ldr	r3, [pc, #128]	@ (800a5a0 <RC_Init+0x10c>)
 800a51e:	f7f6 f9a5 	bl	800086c <__aeabi_ddiv>
 800a522:	4602      	mov	r2, r0
 800a524:	460b      	mov	r3, r1
 800a526:	4610      	mov	r0, r2
 800a528:	4619      	mov	r1, r3
 800a52a:	f7f6 fb25 	bl	8000b78 <__aeabi_d2uiz>
 800a52e:	4603      	mov	r3, r0
 800a530:	61fb      	str	r3, [r7, #28]
	uint16_t prescaler = (uint16_t) (period_cyc / 65535 + 1);
 800a532:	69fb      	ldr	r3, [r7, #28]
 800a534:	4a1b      	ldr	r2, [pc, #108]	@ (800a5a4 <RC_Init+0x110>)
 800a536:	fba2 2303 	umull	r2, r3, r2, r3
 800a53a:	0bdb      	lsrs	r3, r3, #15
 800a53c:	b29b      	uxth	r3, r3
 800a53e:	3301      	adds	r3, #1
 800a540:	837b      	strh	r3, [r7, #26]
	uint16_t overflow = (uint16_t) ((period_cyc + (prescaler / 2)) / prescaler);
 800a542:	8b7b      	ldrh	r3, [r7, #26]
 800a544:	085b      	lsrs	r3, r3, #1
 800a546:	b29b      	uxth	r3, r3
 800a548:	461a      	mov	r2, r3
 800a54a:	69fb      	ldr	r3, [r7, #28]
 800a54c:	441a      	add	r2, r3
 800a54e:	8b7b      	ldrh	r3, [r7, #26]
 800a550:	fbb2 f3f3 	udiv	r3, r2, r3
 800a554:	833b      	strh	r3, [r7, #24]
	__HAL_TIM_SET_PRESCALER(RCx->htimx, prescaler);
 800a556:	697b      	ldr	r3, [r7, #20]
 800a558:	681b      	ldr	r3, [r3, #0]
 800a55a:	681b      	ldr	r3, [r3, #0]
 800a55c:	8b7a      	ldrh	r2, [r7, #26]
 800a55e:	629a      	str	r2, [r3, #40]	@ 0x28
	__HAL_TIM_SET_AUTORELOAD(RCx->htimx, overflow);
 800a560:	697b      	ldr	r3, [r7, #20]
 800a562:	681b      	ldr	r3, [r3, #0]
 800a564:	681b      	ldr	r3, [r3, #0]
 800a566:	8b3a      	ldrh	r2, [r7, #24]
 800a568:	62da      	str	r2, [r3, #44]	@ 0x2c
 800a56a:	697b      	ldr	r3, [r7, #20]
 800a56c:	681b      	ldr	r3, [r3, #0]
 800a56e:	8b3a      	ldrh	r2, [r7, #24]
 800a570:	60da      	str	r2, [r3, #12]
	RCx->gain = overflow / 20.0;
 800a572:	8b3b      	ldrh	r3, [r7, #24]
 800a574:	4618      	mov	r0, r3
 800a576:	f7f5 ffe5 	bl	8000544 <__aeabi_i2d>
 800a57a:	f04f 0200 	mov.w	r2, #0
 800a57e:	4b0a      	ldr	r3, [pc, #40]	@ (800a5a8 <RC_Init+0x114>)
 800a580:	f7f6 f974 	bl	800086c <__aeabi_ddiv>
 800a584:	4602      	mov	r2, r0
 800a586:	460b      	mov	r3, r1
 800a588:	4610      	mov	r0, r2
 800a58a:	4619      	mov	r1, r3
 800a58c:	f7f6 fb14 	bl	8000bb8 <__aeabi_d2f>
 800a590:	4602      	mov	r2, r0
 800a592:	697b      	ldr	r3, [r7, #20]
 800a594:	609a      	str	r2, [r3, #8]
	return 0;
 800a596:	2300      	movs	r3, #0
}
 800a598:	4618      	mov	r0, r3
 800a59a:	3720      	adds	r7, #32
 800a59c:	46bd      	mov	sp, r7
 800a59e:	bd80      	pop	{r7, pc}
 800a5a0:	40490000 	.word	0x40490000
 800a5a4:	80008001 	.word	0x80008001
 800a5a8:	40340000 	.word	0x40340000

0800a5ac <RC_Set_Input_Range>:

void RC_Set_Input_Range(RC_Structure *RCx, float _min, float _max)
{
 800a5ac:	b480      	push	{r7}
 800a5ae:	b087      	sub	sp, #28
 800a5b0:	af00      	add	r7, sp, #0
 800a5b2:	60f8      	str	r0, [r7, #12]
 800a5b4:	ed87 0a02 	vstr	s0, [r7, #8]
 800a5b8:	edc7 0a01 	vstr	s1, [r7, #4]
	float m = (2.5 - 0.5) / (_max - _min);
 800a5bc:	ed97 7a01 	vldr	s14, [r7, #4]
 800a5c0:	edd7 7a02 	vldr	s15, [r7, #8]
 800a5c4:	ee37 7a67 	vsub.f32	s14, s14, s15
 800a5c8:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 800a5cc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a5d0:	edc7 7a05 	vstr	s15, [r7, #20]
	float c = 0.5 - (m * _min);
 800a5d4:	ed97 7a05 	vldr	s14, [r7, #20]
 800a5d8:	edd7 7a02 	vldr	s15, [r7, #8]
 800a5dc:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a5e0:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 800a5e4:	ee77 7a67 	vsub.f32	s15, s14, s15
 800a5e8:	edc7 7a04 	vstr	s15, [r7, #16]

	RCx->offset = RCx->gain * c;
 800a5ec:	68fb      	ldr	r3, [r7, #12]
 800a5ee:	ed93 7a02 	vldr	s14, [r3, #8]
 800a5f2:	edd7 7a04 	vldr	s15, [r7, #16]
 800a5f6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a5fa:	68fb      	ldr	r3, [r7, #12]
 800a5fc:	edc3 7a03 	vstr	s15, [r3, #12]
	RCx->gain *= m;
 800a600:	68fb      	ldr	r3, [r7, #12]
 800a602:	ed93 7a02 	vldr	s14, [r3, #8]
 800a606:	edd7 7a05 	vldr	s15, [r7, #20]
 800a60a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a60e:	68fb      	ldr	r3, [r7, #12]
 800a610:	edc3 7a02 	vstr	s15, [r3, #8]
}
 800a614:	bf00      	nop
 800a616:	371c      	adds	r7, #28
 800a618:	46bd      	mov	sp, r7
 800a61a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a61e:	4770      	bx	lr

0800a620 <RC_Write>:

void RC_Write(RC_Structure *RCx, float cmd)
{
 800a620:	b480      	push	{r7}
 800a622:	b085      	sub	sp, #20
 800a624:	af00      	add	r7, sp, #0
 800a626:	6078      	str	r0, [r7, #4]
 800a628:	ed87 0a00 	vstr	s0, [r7]
	float pwm = (RCx->gain * cmd) + RCx->offset;
 800a62c:	687b      	ldr	r3, [r7, #4]
 800a62e:	ed93 7a02 	vldr	s14, [r3, #8]
 800a632:	edd7 7a00 	vldr	s15, [r7]
 800a636:	ee27 7a27 	vmul.f32	s14, s14, s15
 800a63a:	687b      	ldr	r3, [r7, #4]
 800a63c:	edd3 7a03 	vldr	s15, [r3, #12]
 800a640:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a644:	edc7 7a03 	vstr	s15, [r7, #12]
	__HAL_TIM_SET_COMPARE(RCx->htimx, RCx->channelx, (uint16_t) pwm);
 800a648:	687b      	ldr	r3, [r7, #4]
 800a64a:	685b      	ldr	r3, [r3, #4]
 800a64c:	2b00      	cmp	r3, #0
 800a64e:	d10b      	bne.n	800a668 <RC_Write+0x48>
 800a650:	edd7 7a03 	vldr	s15, [r7, #12]
 800a654:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a658:	ee17 3a90 	vmov	r3, s15
 800a65c:	b29a      	uxth	r2, r3
 800a65e:	687b      	ldr	r3, [r7, #4]
 800a660:	681b      	ldr	r3, [r3, #0]
 800a662:	681b      	ldr	r3, [r3, #0]
 800a664:	635a      	str	r2, [r3, #52]	@ 0x34
}
 800a666:	e04f      	b.n	800a708 <RC_Write+0xe8>
	__HAL_TIM_SET_COMPARE(RCx->htimx, RCx->channelx, (uint16_t) pwm);
 800a668:	687b      	ldr	r3, [r7, #4]
 800a66a:	685b      	ldr	r3, [r3, #4]
 800a66c:	2b04      	cmp	r3, #4
 800a66e:	d10c      	bne.n	800a68a <RC_Write+0x6a>
 800a670:	edd7 7a03 	vldr	s15, [r7, #12]
 800a674:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a678:	ee17 3a90 	vmov	r3, s15
 800a67c:	b299      	uxth	r1, r3
 800a67e:	687b      	ldr	r3, [r7, #4]
 800a680:	681b      	ldr	r3, [r3, #0]
 800a682:	681a      	ldr	r2, [r3, #0]
 800a684:	460b      	mov	r3, r1
 800a686:	6393      	str	r3, [r2, #56]	@ 0x38
}
 800a688:	e03e      	b.n	800a708 <RC_Write+0xe8>
	__HAL_TIM_SET_COMPARE(RCx->htimx, RCx->channelx, (uint16_t) pwm);
 800a68a:	687b      	ldr	r3, [r7, #4]
 800a68c:	685b      	ldr	r3, [r3, #4]
 800a68e:	2b08      	cmp	r3, #8
 800a690:	d10c      	bne.n	800a6ac <RC_Write+0x8c>
 800a692:	edd7 7a03 	vldr	s15, [r7, #12]
 800a696:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a69a:	ee17 3a90 	vmov	r3, s15
 800a69e:	b299      	uxth	r1, r3
 800a6a0:	687b      	ldr	r3, [r7, #4]
 800a6a2:	681b      	ldr	r3, [r3, #0]
 800a6a4:	681a      	ldr	r2, [r3, #0]
 800a6a6:	460b      	mov	r3, r1
 800a6a8:	63d3      	str	r3, [r2, #60]	@ 0x3c
}
 800a6aa:	e02d      	b.n	800a708 <RC_Write+0xe8>
	__HAL_TIM_SET_COMPARE(RCx->htimx, RCx->channelx, (uint16_t) pwm);
 800a6ac:	687b      	ldr	r3, [r7, #4]
 800a6ae:	685b      	ldr	r3, [r3, #4]
 800a6b0:	2b0c      	cmp	r3, #12
 800a6b2:	d10c      	bne.n	800a6ce <RC_Write+0xae>
 800a6b4:	edd7 7a03 	vldr	s15, [r7, #12]
 800a6b8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a6bc:	ee17 3a90 	vmov	r3, s15
 800a6c0:	b299      	uxth	r1, r3
 800a6c2:	687b      	ldr	r3, [r7, #4]
 800a6c4:	681b      	ldr	r3, [r3, #0]
 800a6c6:	681a      	ldr	r2, [r3, #0]
 800a6c8:	460b      	mov	r3, r1
 800a6ca:	6413      	str	r3, [r2, #64]	@ 0x40
}
 800a6cc:	e01c      	b.n	800a708 <RC_Write+0xe8>
	__HAL_TIM_SET_COMPARE(RCx->htimx, RCx->channelx, (uint16_t) pwm);
 800a6ce:	687b      	ldr	r3, [r7, #4]
 800a6d0:	685b      	ldr	r3, [r3, #4]
 800a6d2:	2b10      	cmp	r3, #16
 800a6d4:	d10c      	bne.n	800a6f0 <RC_Write+0xd0>
 800a6d6:	edd7 7a03 	vldr	s15, [r7, #12]
 800a6da:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a6de:	ee17 3a90 	vmov	r3, s15
 800a6e2:	b299      	uxth	r1, r3
 800a6e4:	687b      	ldr	r3, [r7, #4]
 800a6e6:	681b      	ldr	r3, [r3, #0]
 800a6e8:	681a      	ldr	r2, [r3, #0]
 800a6ea:	460b      	mov	r3, r1
 800a6ec:	6593      	str	r3, [r2, #88]	@ 0x58
}
 800a6ee:	e00b      	b.n	800a708 <RC_Write+0xe8>
	__HAL_TIM_SET_COMPARE(RCx->htimx, RCx->channelx, (uint16_t) pwm);
 800a6f0:	edd7 7a03 	vldr	s15, [r7, #12]
 800a6f4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a6f8:	ee17 3a90 	vmov	r3, s15
 800a6fc:	b299      	uxth	r1, r3
 800a6fe:	687b      	ldr	r3, [r7, #4]
 800a700:	681b      	ldr	r3, [r3, #0]
 800a702:	681a      	ldr	r2, [r3, #0]
 800a704:	460b      	mov	r3, r1
 800a706:	65d3      	str	r3, [r2, #92]	@ 0x5c
}
 800a708:	bf00      	nop
 800a70a:	3714      	adds	r7, #20
 800a70c:	46bd      	mov	sp, r7
 800a70e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a712:	4770      	bx	lr

0800a714 <__NVIC_SetPriority>:
{
 800a714:	b480      	push	{r7}
 800a716:	b083      	sub	sp, #12
 800a718:	af00      	add	r7, sp, #0
 800a71a:	4603      	mov	r3, r0
 800a71c:	6039      	str	r1, [r7, #0]
 800a71e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800a720:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a724:	2b00      	cmp	r3, #0
 800a726:	db0a      	blt.n	800a73e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800a728:	683b      	ldr	r3, [r7, #0]
 800a72a:	b2da      	uxtb	r2, r3
 800a72c:	490c      	ldr	r1, [pc, #48]	@ (800a760 <__NVIC_SetPriority+0x4c>)
 800a72e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a732:	0112      	lsls	r2, r2, #4
 800a734:	b2d2      	uxtb	r2, r2
 800a736:	440b      	add	r3, r1
 800a738:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 800a73c:	e00a      	b.n	800a754 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800a73e:	683b      	ldr	r3, [r7, #0]
 800a740:	b2da      	uxtb	r2, r3
 800a742:	4908      	ldr	r1, [pc, #32]	@ (800a764 <__NVIC_SetPriority+0x50>)
 800a744:	79fb      	ldrb	r3, [r7, #7]
 800a746:	f003 030f 	and.w	r3, r3, #15
 800a74a:	3b04      	subs	r3, #4
 800a74c:	0112      	lsls	r2, r2, #4
 800a74e:	b2d2      	uxtb	r2, r2
 800a750:	440b      	add	r3, r1
 800a752:	761a      	strb	r2, [r3, #24]
}
 800a754:	bf00      	nop
 800a756:	370c      	adds	r7, #12
 800a758:	46bd      	mov	sp, r7
 800a75a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a75e:	4770      	bx	lr
 800a760:	e000e100 	.word	0xe000e100
 800a764:	e000ed00 	.word	0xe000ed00

0800a768 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 800a768:	b580      	push	{r7, lr}
 800a76a:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 800a76c:	4b05      	ldr	r3, [pc, #20]	@ (800a784 <SysTick_Handler+0x1c>)
 800a76e:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 800a770:	f001 fd6e 	bl	800c250 <xTaskGetSchedulerState>
 800a774:	4603      	mov	r3, r0
 800a776:	2b01      	cmp	r3, #1
 800a778:	d001      	beq.n	800a77e <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800a77a:	f002 fb65 	bl	800ce48 <xPortSysTickHandler>
  }
}
 800a77e:	bf00      	nop
 800a780:	bd80      	pop	{r7, pc}
 800a782:	bf00      	nop
 800a784:	e000e010 	.word	0xe000e010

0800a788 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800a788:	b580      	push	{r7, lr}
 800a78a:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800a78c:	2100      	movs	r1, #0
 800a78e:	f06f 0004 	mvn.w	r0, #4
 800a792:	f7ff ffbf 	bl	800a714 <__NVIC_SetPriority>
#endif
}
 800a796:	bf00      	nop
 800a798:	bd80      	pop	{r7, pc}
	...

0800a79c <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800a79c:	b480      	push	{r7}
 800a79e:	b083      	sub	sp, #12
 800a7a0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a7a2:	f3ef 8305 	mrs	r3, IPSR
 800a7a6:	603b      	str	r3, [r7, #0]
  return(result);
 800a7a8:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800a7aa:	2b00      	cmp	r3, #0
 800a7ac:	d003      	beq.n	800a7b6 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800a7ae:	f06f 0305 	mvn.w	r3, #5
 800a7b2:	607b      	str	r3, [r7, #4]
 800a7b4:	e00c      	b.n	800a7d0 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800a7b6:	4b0a      	ldr	r3, [pc, #40]	@ (800a7e0 <osKernelInitialize+0x44>)
 800a7b8:	681b      	ldr	r3, [r3, #0]
 800a7ba:	2b00      	cmp	r3, #0
 800a7bc:	d105      	bne.n	800a7ca <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800a7be:	4b08      	ldr	r3, [pc, #32]	@ (800a7e0 <osKernelInitialize+0x44>)
 800a7c0:	2201      	movs	r2, #1
 800a7c2:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800a7c4:	2300      	movs	r3, #0
 800a7c6:	607b      	str	r3, [r7, #4]
 800a7c8:	e002      	b.n	800a7d0 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800a7ca:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800a7ce:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800a7d0:	687b      	ldr	r3, [r7, #4]
}
 800a7d2:	4618      	mov	r0, r3
 800a7d4:	370c      	adds	r7, #12
 800a7d6:	46bd      	mov	sp, r7
 800a7d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7dc:	4770      	bx	lr
 800a7de:	bf00      	nop
 800a7e0:	20005b9c 	.word	0x20005b9c

0800a7e4 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800a7e4:	b580      	push	{r7, lr}
 800a7e6:	b082      	sub	sp, #8
 800a7e8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a7ea:	f3ef 8305 	mrs	r3, IPSR
 800a7ee:	603b      	str	r3, [r7, #0]
  return(result);
 800a7f0:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800a7f2:	2b00      	cmp	r3, #0
 800a7f4:	d003      	beq.n	800a7fe <osKernelStart+0x1a>
    stat = osErrorISR;
 800a7f6:	f06f 0305 	mvn.w	r3, #5
 800a7fa:	607b      	str	r3, [r7, #4]
 800a7fc:	e010      	b.n	800a820 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800a7fe:	4b0b      	ldr	r3, [pc, #44]	@ (800a82c <osKernelStart+0x48>)
 800a800:	681b      	ldr	r3, [r3, #0]
 800a802:	2b01      	cmp	r3, #1
 800a804:	d109      	bne.n	800a81a <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800a806:	f7ff ffbf 	bl	800a788 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800a80a:	4b08      	ldr	r3, [pc, #32]	@ (800a82c <osKernelStart+0x48>)
 800a80c:	2202      	movs	r2, #2
 800a80e:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800a810:	f001 f892 	bl	800b938 <vTaskStartScheduler>
      stat = osOK;
 800a814:	2300      	movs	r3, #0
 800a816:	607b      	str	r3, [r7, #4]
 800a818:	e002      	b.n	800a820 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800a81a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800a81e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800a820:	687b      	ldr	r3, [r7, #4]
}
 800a822:	4618      	mov	r0, r3
 800a824:	3708      	adds	r7, #8
 800a826:	46bd      	mov	sp, r7
 800a828:	bd80      	pop	{r7, pc}
 800a82a:	bf00      	nop
 800a82c:	20005b9c 	.word	0x20005b9c

0800a830 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800a830:	b580      	push	{r7, lr}
 800a832:	b08e      	sub	sp, #56	@ 0x38
 800a834:	af04      	add	r7, sp, #16
 800a836:	60f8      	str	r0, [r7, #12]
 800a838:	60b9      	str	r1, [r7, #8]
 800a83a:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800a83c:	2300      	movs	r3, #0
 800a83e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a840:	f3ef 8305 	mrs	r3, IPSR
 800a844:	617b      	str	r3, [r7, #20]
  return(result);
 800a846:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800a848:	2b00      	cmp	r3, #0
 800a84a:	d17e      	bne.n	800a94a <osThreadNew+0x11a>
 800a84c:	68fb      	ldr	r3, [r7, #12]
 800a84e:	2b00      	cmp	r3, #0
 800a850:	d07b      	beq.n	800a94a <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800a852:	2380      	movs	r3, #128	@ 0x80
 800a854:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800a856:	2318      	movs	r3, #24
 800a858:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800a85a:	2300      	movs	r3, #0
 800a85c:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 800a85e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800a862:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800a864:	687b      	ldr	r3, [r7, #4]
 800a866:	2b00      	cmp	r3, #0
 800a868:	d045      	beq.n	800a8f6 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800a86a:	687b      	ldr	r3, [r7, #4]
 800a86c:	681b      	ldr	r3, [r3, #0]
 800a86e:	2b00      	cmp	r3, #0
 800a870:	d002      	beq.n	800a878 <osThreadNew+0x48>
        name = attr->name;
 800a872:	687b      	ldr	r3, [r7, #4]
 800a874:	681b      	ldr	r3, [r3, #0]
 800a876:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 800a878:	687b      	ldr	r3, [r7, #4]
 800a87a:	699b      	ldr	r3, [r3, #24]
 800a87c:	2b00      	cmp	r3, #0
 800a87e:	d002      	beq.n	800a886 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 800a880:	687b      	ldr	r3, [r7, #4]
 800a882:	699b      	ldr	r3, [r3, #24]
 800a884:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800a886:	69fb      	ldr	r3, [r7, #28]
 800a888:	2b00      	cmp	r3, #0
 800a88a:	d008      	beq.n	800a89e <osThreadNew+0x6e>
 800a88c:	69fb      	ldr	r3, [r7, #28]
 800a88e:	2b38      	cmp	r3, #56	@ 0x38
 800a890:	d805      	bhi.n	800a89e <osThreadNew+0x6e>
 800a892:	687b      	ldr	r3, [r7, #4]
 800a894:	685b      	ldr	r3, [r3, #4]
 800a896:	f003 0301 	and.w	r3, r3, #1
 800a89a:	2b00      	cmp	r3, #0
 800a89c:	d001      	beq.n	800a8a2 <osThreadNew+0x72>
        return (NULL);
 800a89e:	2300      	movs	r3, #0
 800a8a0:	e054      	b.n	800a94c <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800a8a2:	687b      	ldr	r3, [r7, #4]
 800a8a4:	695b      	ldr	r3, [r3, #20]
 800a8a6:	2b00      	cmp	r3, #0
 800a8a8:	d003      	beq.n	800a8b2 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800a8aa:	687b      	ldr	r3, [r7, #4]
 800a8ac:	695b      	ldr	r3, [r3, #20]
 800a8ae:	089b      	lsrs	r3, r3, #2
 800a8b0:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800a8b2:	687b      	ldr	r3, [r7, #4]
 800a8b4:	689b      	ldr	r3, [r3, #8]
 800a8b6:	2b00      	cmp	r3, #0
 800a8b8:	d00e      	beq.n	800a8d8 <osThreadNew+0xa8>
 800a8ba:	687b      	ldr	r3, [r7, #4]
 800a8bc:	68db      	ldr	r3, [r3, #12]
 800a8be:	2ba7      	cmp	r3, #167	@ 0xa7
 800a8c0:	d90a      	bls.n	800a8d8 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800a8c2:	687b      	ldr	r3, [r7, #4]
 800a8c4:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800a8c6:	2b00      	cmp	r3, #0
 800a8c8:	d006      	beq.n	800a8d8 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800a8ca:	687b      	ldr	r3, [r7, #4]
 800a8cc:	695b      	ldr	r3, [r3, #20]
 800a8ce:	2b00      	cmp	r3, #0
 800a8d0:	d002      	beq.n	800a8d8 <osThreadNew+0xa8>
        mem = 1;
 800a8d2:	2301      	movs	r3, #1
 800a8d4:	61bb      	str	r3, [r7, #24]
 800a8d6:	e010      	b.n	800a8fa <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800a8d8:	687b      	ldr	r3, [r7, #4]
 800a8da:	689b      	ldr	r3, [r3, #8]
 800a8dc:	2b00      	cmp	r3, #0
 800a8de:	d10c      	bne.n	800a8fa <osThreadNew+0xca>
 800a8e0:	687b      	ldr	r3, [r7, #4]
 800a8e2:	68db      	ldr	r3, [r3, #12]
 800a8e4:	2b00      	cmp	r3, #0
 800a8e6:	d108      	bne.n	800a8fa <osThreadNew+0xca>
 800a8e8:	687b      	ldr	r3, [r7, #4]
 800a8ea:	691b      	ldr	r3, [r3, #16]
 800a8ec:	2b00      	cmp	r3, #0
 800a8ee:	d104      	bne.n	800a8fa <osThreadNew+0xca>
          mem = 0;
 800a8f0:	2300      	movs	r3, #0
 800a8f2:	61bb      	str	r3, [r7, #24]
 800a8f4:	e001      	b.n	800a8fa <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800a8f6:	2300      	movs	r3, #0
 800a8f8:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800a8fa:	69bb      	ldr	r3, [r7, #24]
 800a8fc:	2b01      	cmp	r3, #1
 800a8fe:	d110      	bne.n	800a922 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800a900:	687b      	ldr	r3, [r7, #4]
 800a902:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800a904:	687a      	ldr	r2, [r7, #4]
 800a906:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800a908:	9202      	str	r2, [sp, #8]
 800a90a:	9301      	str	r3, [sp, #4]
 800a90c:	69fb      	ldr	r3, [r7, #28]
 800a90e:	9300      	str	r3, [sp, #0]
 800a910:	68bb      	ldr	r3, [r7, #8]
 800a912:	6a3a      	ldr	r2, [r7, #32]
 800a914:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800a916:	68f8      	ldr	r0, [r7, #12]
 800a918:	f000 fe1a 	bl	800b550 <xTaskCreateStatic>
 800a91c:	4603      	mov	r3, r0
 800a91e:	613b      	str	r3, [r7, #16]
 800a920:	e013      	b.n	800a94a <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800a922:	69bb      	ldr	r3, [r7, #24]
 800a924:	2b00      	cmp	r3, #0
 800a926:	d110      	bne.n	800a94a <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800a928:	6a3b      	ldr	r3, [r7, #32]
 800a92a:	b29a      	uxth	r2, r3
 800a92c:	f107 0310 	add.w	r3, r7, #16
 800a930:	9301      	str	r3, [sp, #4]
 800a932:	69fb      	ldr	r3, [r7, #28]
 800a934:	9300      	str	r3, [sp, #0]
 800a936:	68bb      	ldr	r3, [r7, #8]
 800a938:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800a93a:	68f8      	ldr	r0, [r7, #12]
 800a93c:	f000 fe68 	bl	800b610 <xTaskCreate>
 800a940:	4603      	mov	r3, r0
 800a942:	2b01      	cmp	r3, #1
 800a944:	d001      	beq.n	800a94a <osThreadNew+0x11a>
            hTask = NULL;
 800a946:	2300      	movs	r3, #0
 800a948:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800a94a:	693b      	ldr	r3, [r7, #16]
}
 800a94c:	4618      	mov	r0, r3
 800a94e:	3728      	adds	r7, #40	@ 0x28
 800a950:	46bd      	mov	sp, r7
 800a952:	bd80      	pop	{r7, pc}

0800a954 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 800a954:	b580      	push	{r7, lr}
 800a956:	b084      	sub	sp, #16
 800a958:	af00      	add	r7, sp, #0
 800a95a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a95c:	f3ef 8305 	mrs	r3, IPSR
 800a960:	60bb      	str	r3, [r7, #8]
  return(result);
 800a962:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800a964:	2b00      	cmp	r3, #0
 800a966:	d003      	beq.n	800a970 <osDelay+0x1c>
    stat = osErrorISR;
 800a968:	f06f 0305 	mvn.w	r3, #5
 800a96c:	60fb      	str	r3, [r7, #12]
 800a96e:	e007      	b.n	800a980 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 800a970:	2300      	movs	r3, #0
 800a972:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 800a974:	687b      	ldr	r3, [r7, #4]
 800a976:	2b00      	cmp	r3, #0
 800a978:	d002      	beq.n	800a980 <osDelay+0x2c>
      vTaskDelay(ticks);
 800a97a:	6878      	ldr	r0, [r7, #4]
 800a97c:	f000 ffa6 	bl	800b8cc <vTaskDelay>
    }
  }

  return (stat);
 800a980:	68fb      	ldr	r3, [r7, #12]
}
 800a982:	4618      	mov	r0, r3
 800a984:	3710      	adds	r7, #16
 800a986:	46bd      	mov	sp, r7
 800a988:	bd80      	pop	{r7, pc}
	...

0800a98c <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800a98c:	b480      	push	{r7}
 800a98e:	b085      	sub	sp, #20
 800a990:	af00      	add	r7, sp, #0
 800a992:	60f8      	str	r0, [r7, #12]
 800a994:	60b9      	str	r1, [r7, #8]
 800a996:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800a998:	68fb      	ldr	r3, [r7, #12]
 800a99a:	4a07      	ldr	r2, [pc, #28]	@ (800a9b8 <vApplicationGetIdleTaskMemory+0x2c>)
 800a99c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800a99e:	68bb      	ldr	r3, [r7, #8]
 800a9a0:	4a06      	ldr	r2, [pc, #24]	@ (800a9bc <vApplicationGetIdleTaskMemory+0x30>)
 800a9a2:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800a9a4:	687b      	ldr	r3, [r7, #4]
 800a9a6:	2280      	movs	r2, #128	@ 0x80
 800a9a8:	601a      	str	r2, [r3, #0]
}
 800a9aa:	bf00      	nop
 800a9ac:	3714      	adds	r7, #20
 800a9ae:	46bd      	mov	sp, r7
 800a9b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9b4:	4770      	bx	lr
 800a9b6:	bf00      	nop
 800a9b8:	20005ba0 	.word	0x20005ba0
 800a9bc:	20005c48 	.word	0x20005c48

0800a9c0 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800a9c0:	b480      	push	{r7}
 800a9c2:	b085      	sub	sp, #20
 800a9c4:	af00      	add	r7, sp, #0
 800a9c6:	60f8      	str	r0, [r7, #12]
 800a9c8:	60b9      	str	r1, [r7, #8]
 800a9ca:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800a9cc:	68fb      	ldr	r3, [r7, #12]
 800a9ce:	4a07      	ldr	r2, [pc, #28]	@ (800a9ec <vApplicationGetTimerTaskMemory+0x2c>)
 800a9d0:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800a9d2:	68bb      	ldr	r3, [r7, #8]
 800a9d4:	4a06      	ldr	r2, [pc, #24]	@ (800a9f0 <vApplicationGetTimerTaskMemory+0x30>)
 800a9d6:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800a9d8:	687b      	ldr	r3, [r7, #4]
 800a9da:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800a9de:	601a      	str	r2, [r3, #0]
}
 800a9e0:	bf00      	nop
 800a9e2:	3714      	adds	r7, #20
 800a9e4:	46bd      	mov	sp, r7
 800a9e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9ea:	4770      	bx	lr
 800a9ec:	20005e48 	.word	0x20005e48
 800a9f0:	20005ef0 	.word	0x20005ef0

0800a9f4 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800a9f4:	b480      	push	{r7}
 800a9f6:	b083      	sub	sp, #12
 800a9f8:	af00      	add	r7, sp, #0
 800a9fa:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a9fc:	687b      	ldr	r3, [r7, #4]
 800a9fe:	f103 0208 	add.w	r2, r3, #8
 800aa02:	687b      	ldr	r3, [r7, #4]
 800aa04:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800aa06:	687b      	ldr	r3, [r7, #4]
 800aa08:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800aa0c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800aa0e:	687b      	ldr	r3, [r7, #4]
 800aa10:	f103 0208 	add.w	r2, r3, #8
 800aa14:	687b      	ldr	r3, [r7, #4]
 800aa16:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800aa18:	687b      	ldr	r3, [r7, #4]
 800aa1a:	f103 0208 	add.w	r2, r3, #8
 800aa1e:	687b      	ldr	r3, [r7, #4]
 800aa20:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800aa22:	687b      	ldr	r3, [r7, #4]
 800aa24:	2200      	movs	r2, #0
 800aa26:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800aa28:	bf00      	nop
 800aa2a:	370c      	adds	r7, #12
 800aa2c:	46bd      	mov	sp, r7
 800aa2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa32:	4770      	bx	lr

0800aa34 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800aa34:	b480      	push	{r7}
 800aa36:	b083      	sub	sp, #12
 800aa38:	af00      	add	r7, sp, #0
 800aa3a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800aa3c:	687b      	ldr	r3, [r7, #4]
 800aa3e:	2200      	movs	r2, #0
 800aa40:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800aa42:	bf00      	nop
 800aa44:	370c      	adds	r7, #12
 800aa46:	46bd      	mov	sp, r7
 800aa48:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa4c:	4770      	bx	lr

0800aa4e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800aa4e:	b480      	push	{r7}
 800aa50:	b085      	sub	sp, #20
 800aa52:	af00      	add	r7, sp, #0
 800aa54:	6078      	str	r0, [r7, #4]
 800aa56:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800aa58:	687b      	ldr	r3, [r7, #4]
 800aa5a:	685b      	ldr	r3, [r3, #4]
 800aa5c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800aa5e:	683b      	ldr	r3, [r7, #0]
 800aa60:	68fa      	ldr	r2, [r7, #12]
 800aa62:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800aa64:	68fb      	ldr	r3, [r7, #12]
 800aa66:	689a      	ldr	r2, [r3, #8]
 800aa68:	683b      	ldr	r3, [r7, #0]
 800aa6a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800aa6c:	68fb      	ldr	r3, [r7, #12]
 800aa6e:	689b      	ldr	r3, [r3, #8]
 800aa70:	683a      	ldr	r2, [r7, #0]
 800aa72:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800aa74:	68fb      	ldr	r3, [r7, #12]
 800aa76:	683a      	ldr	r2, [r7, #0]
 800aa78:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800aa7a:	683b      	ldr	r3, [r7, #0]
 800aa7c:	687a      	ldr	r2, [r7, #4]
 800aa7e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800aa80:	687b      	ldr	r3, [r7, #4]
 800aa82:	681b      	ldr	r3, [r3, #0]
 800aa84:	1c5a      	adds	r2, r3, #1
 800aa86:	687b      	ldr	r3, [r7, #4]
 800aa88:	601a      	str	r2, [r3, #0]
}
 800aa8a:	bf00      	nop
 800aa8c:	3714      	adds	r7, #20
 800aa8e:	46bd      	mov	sp, r7
 800aa90:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa94:	4770      	bx	lr

0800aa96 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800aa96:	b480      	push	{r7}
 800aa98:	b085      	sub	sp, #20
 800aa9a:	af00      	add	r7, sp, #0
 800aa9c:	6078      	str	r0, [r7, #4]
 800aa9e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800aaa0:	683b      	ldr	r3, [r7, #0]
 800aaa2:	681b      	ldr	r3, [r3, #0]
 800aaa4:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800aaa6:	68bb      	ldr	r3, [r7, #8]
 800aaa8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800aaac:	d103      	bne.n	800aab6 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800aaae:	687b      	ldr	r3, [r7, #4]
 800aab0:	691b      	ldr	r3, [r3, #16]
 800aab2:	60fb      	str	r3, [r7, #12]
 800aab4:	e00c      	b.n	800aad0 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800aab6:	687b      	ldr	r3, [r7, #4]
 800aab8:	3308      	adds	r3, #8
 800aaba:	60fb      	str	r3, [r7, #12]
 800aabc:	e002      	b.n	800aac4 <vListInsert+0x2e>
 800aabe:	68fb      	ldr	r3, [r7, #12]
 800aac0:	685b      	ldr	r3, [r3, #4]
 800aac2:	60fb      	str	r3, [r7, #12]
 800aac4:	68fb      	ldr	r3, [r7, #12]
 800aac6:	685b      	ldr	r3, [r3, #4]
 800aac8:	681b      	ldr	r3, [r3, #0]
 800aaca:	68ba      	ldr	r2, [r7, #8]
 800aacc:	429a      	cmp	r2, r3
 800aace:	d2f6      	bcs.n	800aabe <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800aad0:	68fb      	ldr	r3, [r7, #12]
 800aad2:	685a      	ldr	r2, [r3, #4]
 800aad4:	683b      	ldr	r3, [r7, #0]
 800aad6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800aad8:	683b      	ldr	r3, [r7, #0]
 800aada:	685b      	ldr	r3, [r3, #4]
 800aadc:	683a      	ldr	r2, [r7, #0]
 800aade:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800aae0:	683b      	ldr	r3, [r7, #0]
 800aae2:	68fa      	ldr	r2, [r7, #12]
 800aae4:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800aae6:	68fb      	ldr	r3, [r7, #12]
 800aae8:	683a      	ldr	r2, [r7, #0]
 800aaea:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800aaec:	683b      	ldr	r3, [r7, #0]
 800aaee:	687a      	ldr	r2, [r7, #4]
 800aaf0:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800aaf2:	687b      	ldr	r3, [r7, #4]
 800aaf4:	681b      	ldr	r3, [r3, #0]
 800aaf6:	1c5a      	adds	r2, r3, #1
 800aaf8:	687b      	ldr	r3, [r7, #4]
 800aafa:	601a      	str	r2, [r3, #0]
}
 800aafc:	bf00      	nop
 800aafe:	3714      	adds	r7, #20
 800ab00:	46bd      	mov	sp, r7
 800ab02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab06:	4770      	bx	lr

0800ab08 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800ab08:	b480      	push	{r7}
 800ab0a:	b085      	sub	sp, #20
 800ab0c:	af00      	add	r7, sp, #0
 800ab0e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800ab10:	687b      	ldr	r3, [r7, #4]
 800ab12:	691b      	ldr	r3, [r3, #16]
 800ab14:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800ab16:	687b      	ldr	r3, [r7, #4]
 800ab18:	685b      	ldr	r3, [r3, #4]
 800ab1a:	687a      	ldr	r2, [r7, #4]
 800ab1c:	6892      	ldr	r2, [r2, #8]
 800ab1e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800ab20:	687b      	ldr	r3, [r7, #4]
 800ab22:	689b      	ldr	r3, [r3, #8]
 800ab24:	687a      	ldr	r2, [r7, #4]
 800ab26:	6852      	ldr	r2, [r2, #4]
 800ab28:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800ab2a:	68fb      	ldr	r3, [r7, #12]
 800ab2c:	685b      	ldr	r3, [r3, #4]
 800ab2e:	687a      	ldr	r2, [r7, #4]
 800ab30:	429a      	cmp	r2, r3
 800ab32:	d103      	bne.n	800ab3c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800ab34:	687b      	ldr	r3, [r7, #4]
 800ab36:	689a      	ldr	r2, [r3, #8]
 800ab38:	68fb      	ldr	r3, [r7, #12]
 800ab3a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800ab3c:	687b      	ldr	r3, [r7, #4]
 800ab3e:	2200      	movs	r2, #0
 800ab40:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800ab42:	68fb      	ldr	r3, [r7, #12]
 800ab44:	681b      	ldr	r3, [r3, #0]
 800ab46:	1e5a      	subs	r2, r3, #1
 800ab48:	68fb      	ldr	r3, [r7, #12]
 800ab4a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800ab4c:	68fb      	ldr	r3, [r7, #12]
 800ab4e:	681b      	ldr	r3, [r3, #0]
}
 800ab50:	4618      	mov	r0, r3
 800ab52:	3714      	adds	r7, #20
 800ab54:	46bd      	mov	sp, r7
 800ab56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab5a:	4770      	bx	lr

0800ab5c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800ab5c:	b580      	push	{r7, lr}
 800ab5e:	b084      	sub	sp, #16
 800ab60:	af00      	add	r7, sp, #0
 800ab62:	6078      	str	r0, [r7, #4]
 800ab64:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800ab66:	687b      	ldr	r3, [r7, #4]
 800ab68:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800ab6a:	68fb      	ldr	r3, [r7, #12]
 800ab6c:	2b00      	cmp	r3, #0
 800ab6e:	d10b      	bne.n	800ab88 <xQueueGenericReset+0x2c>
	__asm volatile
 800ab70:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ab74:	f383 8811 	msr	BASEPRI, r3
 800ab78:	f3bf 8f6f 	isb	sy
 800ab7c:	f3bf 8f4f 	dsb	sy
 800ab80:	60bb      	str	r3, [r7, #8]
}
 800ab82:	bf00      	nop
 800ab84:	bf00      	nop
 800ab86:	e7fd      	b.n	800ab84 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800ab88:	f002 f8ce 	bl	800cd28 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800ab8c:	68fb      	ldr	r3, [r7, #12]
 800ab8e:	681a      	ldr	r2, [r3, #0]
 800ab90:	68fb      	ldr	r3, [r7, #12]
 800ab92:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ab94:	68f9      	ldr	r1, [r7, #12]
 800ab96:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800ab98:	fb01 f303 	mul.w	r3, r1, r3
 800ab9c:	441a      	add	r2, r3
 800ab9e:	68fb      	ldr	r3, [r7, #12]
 800aba0:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800aba2:	68fb      	ldr	r3, [r7, #12]
 800aba4:	2200      	movs	r2, #0
 800aba6:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800aba8:	68fb      	ldr	r3, [r7, #12]
 800abaa:	681a      	ldr	r2, [r3, #0]
 800abac:	68fb      	ldr	r3, [r7, #12]
 800abae:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800abb0:	68fb      	ldr	r3, [r7, #12]
 800abb2:	681a      	ldr	r2, [r3, #0]
 800abb4:	68fb      	ldr	r3, [r7, #12]
 800abb6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800abb8:	3b01      	subs	r3, #1
 800abba:	68f9      	ldr	r1, [r7, #12]
 800abbc:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800abbe:	fb01 f303 	mul.w	r3, r1, r3
 800abc2:	441a      	add	r2, r3
 800abc4:	68fb      	ldr	r3, [r7, #12]
 800abc6:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800abc8:	68fb      	ldr	r3, [r7, #12]
 800abca:	22ff      	movs	r2, #255	@ 0xff
 800abcc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800abd0:	68fb      	ldr	r3, [r7, #12]
 800abd2:	22ff      	movs	r2, #255	@ 0xff
 800abd4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 800abd8:	683b      	ldr	r3, [r7, #0]
 800abda:	2b00      	cmp	r3, #0
 800abdc:	d114      	bne.n	800ac08 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800abde:	68fb      	ldr	r3, [r7, #12]
 800abe0:	691b      	ldr	r3, [r3, #16]
 800abe2:	2b00      	cmp	r3, #0
 800abe4:	d01a      	beq.n	800ac1c <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800abe6:	68fb      	ldr	r3, [r7, #12]
 800abe8:	3310      	adds	r3, #16
 800abea:	4618      	mov	r0, r3
 800abec:	f001 f942 	bl	800be74 <xTaskRemoveFromEventList>
 800abf0:	4603      	mov	r3, r0
 800abf2:	2b00      	cmp	r3, #0
 800abf4:	d012      	beq.n	800ac1c <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800abf6:	4b0d      	ldr	r3, [pc, #52]	@ (800ac2c <xQueueGenericReset+0xd0>)
 800abf8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800abfc:	601a      	str	r2, [r3, #0]
 800abfe:	f3bf 8f4f 	dsb	sy
 800ac02:	f3bf 8f6f 	isb	sy
 800ac06:	e009      	b.n	800ac1c <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800ac08:	68fb      	ldr	r3, [r7, #12]
 800ac0a:	3310      	adds	r3, #16
 800ac0c:	4618      	mov	r0, r3
 800ac0e:	f7ff fef1 	bl	800a9f4 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800ac12:	68fb      	ldr	r3, [r7, #12]
 800ac14:	3324      	adds	r3, #36	@ 0x24
 800ac16:	4618      	mov	r0, r3
 800ac18:	f7ff feec 	bl	800a9f4 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800ac1c:	f002 f8b6 	bl	800cd8c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800ac20:	2301      	movs	r3, #1
}
 800ac22:	4618      	mov	r0, r3
 800ac24:	3710      	adds	r7, #16
 800ac26:	46bd      	mov	sp, r7
 800ac28:	bd80      	pop	{r7, pc}
 800ac2a:	bf00      	nop
 800ac2c:	e000ed04 	.word	0xe000ed04

0800ac30 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800ac30:	b580      	push	{r7, lr}
 800ac32:	b08e      	sub	sp, #56	@ 0x38
 800ac34:	af02      	add	r7, sp, #8
 800ac36:	60f8      	str	r0, [r7, #12]
 800ac38:	60b9      	str	r1, [r7, #8]
 800ac3a:	607a      	str	r2, [r7, #4]
 800ac3c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800ac3e:	68fb      	ldr	r3, [r7, #12]
 800ac40:	2b00      	cmp	r3, #0
 800ac42:	d10b      	bne.n	800ac5c <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 800ac44:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ac48:	f383 8811 	msr	BASEPRI, r3
 800ac4c:	f3bf 8f6f 	isb	sy
 800ac50:	f3bf 8f4f 	dsb	sy
 800ac54:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800ac56:	bf00      	nop
 800ac58:	bf00      	nop
 800ac5a:	e7fd      	b.n	800ac58 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800ac5c:	683b      	ldr	r3, [r7, #0]
 800ac5e:	2b00      	cmp	r3, #0
 800ac60:	d10b      	bne.n	800ac7a <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 800ac62:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ac66:	f383 8811 	msr	BASEPRI, r3
 800ac6a:	f3bf 8f6f 	isb	sy
 800ac6e:	f3bf 8f4f 	dsb	sy
 800ac72:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800ac74:	bf00      	nop
 800ac76:	bf00      	nop
 800ac78:	e7fd      	b.n	800ac76 <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800ac7a:	687b      	ldr	r3, [r7, #4]
 800ac7c:	2b00      	cmp	r3, #0
 800ac7e:	d002      	beq.n	800ac86 <xQueueGenericCreateStatic+0x56>
 800ac80:	68bb      	ldr	r3, [r7, #8]
 800ac82:	2b00      	cmp	r3, #0
 800ac84:	d001      	beq.n	800ac8a <xQueueGenericCreateStatic+0x5a>
 800ac86:	2301      	movs	r3, #1
 800ac88:	e000      	b.n	800ac8c <xQueueGenericCreateStatic+0x5c>
 800ac8a:	2300      	movs	r3, #0
 800ac8c:	2b00      	cmp	r3, #0
 800ac8e:	d10b      	bne.n	800aca8 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 800ac90:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ac94:	f383 8811 	msr	BASEPRI, r3
 800ac98:	f3bf 8f6f 	isb	sy
 800ac9c:	f3bf 8f4f 	dsb	sy
 800aca0:	623b      	str	r3, [r7, #32]
}
 800aca2:	bf00      	nop
 800aca4:	bf00      	nop
 800aca6:	e7fd      	b.n	800aca4 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800aca8:	687b      	ldr	r3, [r7, #4]
 800acaa:	2b00      	cmp	r3, #0
 800acac:	d102      	bne.n	800acb4 <xQueueGenericCreateStatic+0x84>
 800acae:	68bb      	ldr	r3, [r7, #8]
 800acb0:	2b00      	cmp	r3, #0
 800acb2:	d101      	bne.n	800acb8 <xQueueGenericCreateStatic+0x88>
 800acb4:	2301      	movs	r3, #1
 800acb6:	e000      	b.n	800acba <xQueueGenericCreateStatic+0x8a>
 800acb8:	2300      	movs	r3, #0
 800acba:	2b00      	cmp	r3, #0
 800acbc:	d10b      	bne.n	800acd6 <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 800acbe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800acc2:	f383 8811 	msr	BASEPRI, r3
 800acc6:	f3bf 8f6f 	isb	sy
 800acca:	f3bf 8f4f 	dsb	sy
 800acce:	61fb      	str	r3, [r7, #28]
}
 800acd0:	bf00      	nop
 800acd2:	bf00      	nop
 800acd4:	e7fd      	b.n	800acd2 <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800acd6:	2350      	movs	r3, #80	@ 0x50
 800acd8:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800acda:	697b      	ldr	r3, [r7, #20]
 800acdc:	2b50      	cmp	r3, #80	@ 0x50
 800acde:	d00b      	beq.n	800acf8 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 800ace0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ace4:	f383 8811 	msr	BASEPRI, r3
 800ace8:	f3bf 8f6f 	isb	sy
 800acec:	f3bf 8f4f 	dsb	sy
 800acf0:	61bb      	str	r3, [r7, #24]
}
 800acf2:	bf00      	nop
 800acf4:	bf00      	nop
 800acf6:	e7fd      	b.n	800acf4 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800acf8:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800acfa:	683b      	ldr	r3, [r7, #0]
 800acfc:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 800acfe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ad00:	2b00      	cmp	r3, #0
 800ad02:	d00d      	beq.n	800ad20 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800ad04:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ad06:	2201      	movs	r2, #1
 800ad08:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800ad0c:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 800ad10:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ad12:	9300      	str	r3, [sp, #0]
 800ad14:	4613      	mov	r3, r2
 800ad16:	687a      	ldr	r2, [r7, #4]
 800ad18:	68b9      	ldr	r1, [r7, #8]
 800ad1a:	68f8      	ldr	r0, [r7, #12]
 800ad1c:	f000 f805 	bl	800ad2a <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800ad20:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 800ad22:	4618      	mov	r0, r3
 800ad24:	3730      	adds	r7, #48	@ 0x30
 800ad26:	46bd      	mov	sp, r7
 800ad28:	bd80      	pop	{r7, pc}

0800ad2a <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800ad2a:	b580      	push	{r7, lr}
 800ad2c:	b084      	sub	sp, #16
 800ad2e:	af00      	add	r7, sp, #0
 800ad30:	60f8      	str	r0, [r7, #12]
 800ad32:	60b9      	str	r1, [r7, #8]
 800ad34:	607a      	str	r2, [r7, #4]
 800ad36:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800ad38:	68bb      	ldr	r3, [r7, #8]
 800ad3a:	2b00      	cmp	r3, #0
 800ad3c:	d103      	bne.n	800ad46 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800ad3e:	69bb      	ldr	r3, [r7, #24]
 800ad40:	69ba      	ldr	r2, [r7, #24]
 800ad42:	601a      	str	r2, [r3, #0]
 800ad44:	e002      	b.n	800ad4c <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800ad46:	69bb      	ldr	r3, [r7, #24]
 800ad48:	687a      	ldr	r2, [r7, #4]
 800ad4a:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800ad4c:	69bb      	ldr	r3, [r7, #24]
 800ad4e:	68fa      	ldr	r2, [r7, #12]
 800ad50:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800ad52:	69bb      	ldr	r3, [r7, #24]
 800ad54:	68ba      	ldr	r2, [r7, #8]
 800ad56:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800ad58:	2101      	movs	r1, #1
 800ad5a:	69b8      	ldr	r0, [r7, #24]
 800ad5c:	f7ff fefe 	bl	800ab5c <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800ad60:	69bb      	ldr	r3, [r7, #24]
 800ad62:	78fa      	ldrb	r2, [r7, #3]
 800ad64:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800ad68:	bf00      	nop
 800ad6a:	3710      	adds	r7, #16
 800ad6c:	46bd      	mov	sp, r7
 800ad6e:	bd80      	pop	{r7, pc}

0800ad70 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800ad70:	b580      	push	{r7, lr}
 800ad72:	b08e      	sub	sp, #56	@ 0x38
 800ad74:	af00      	add	r7, sp, #0
 800ad76:	60f8      	str	r0, [r7, #12]
 800ad78:	60b9      	str	r1, [r7, #8]
 800ad7a:	607a      	str	r2, [r7, #4]
 800ad7c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800ad7e:	2300      	movs	r3, #0
 800ad80:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800ad82:	68fb      	ldr	r3, [r7, #12]
 800ad84:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800ad86:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ad88:	2b00      	cmp	r3, #0
 800ad8a:	d10b      	bne.n	800ada4 <xQueueGenericSend+0x34>
	__asm volatile
 800ad8c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ad90:	f383 8811 	msr	BASEPRI, r3
 800ad94:	f3bf 8f6f 	isb	sy
 800ad98:	f3bf 8f4f 	dsb	sy
 800ad9c:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800ad9e:	bf00      	nop
 800ada0:	bf00      	nop
 800ada2:	e7fd      	b.n	800ada0 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800ada4:	68bb      	ldr	r3, [r7, #8]
 800ada6:	2b00      	cmp	r3, #0
 800ada8:	d103      	bne.n	800adb2 <xQueueGenericSend+0x42>
 800adaa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800adac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800adae:	2b00      	cmp	r3, #0
 800adb0:	d101      	bne.n	800adb6 <xQueueGenericSend+0x46>
 800adb2:	2301      	movs	r3, #1
 800adb4:	e000      	b.n	800adb8 <xQueueGenericSend+0x48>
 800adb6:	2300      	movs	r3, #0
 800adb8:	2b00      	cmp	r3, #0
 800adba:	d10b      	bne.n	800add4 <xQueueGenericSend+0x64>
	__asm volatile
 800adbc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800adc0:	f383 8811 	msr	BASEPRI, r3
 800adc4:	f3bf 8f6f 	isb	sy
 800adc8:	f3bf 8f4f 	dsb	sy
 800adcc:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800adce:	bf00      	nop
 800add0:	bf00      	nop
 800add2:	e7fd      	b.n	800add0 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800add4:	683b      	ldr	r3, [r7, #0]
 800add6:	2b02      	cmp	r3, #2
 800add8:	d103      	bne.n	800ade2 <xQueueGenericSend+0x72>
 800adda:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800addc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800adde:	2b01      	cmp	r3, #1
 800ade0:	d101      	bne.n	800ade6 <xQueueGenericSend+0x76>
 800ade2:	2301      	movs	r3, #1
 800ade4:	e000      	b.n	800ade8 <xQueueGenericSend+0x78>
 800ade6:	2300      	movs	r3, #0
 800ade8:	2b00      	cmp	r3, #0
 800adea:	d10b      	bne.n	800ae04 <xQueueGenericSend+0x94>
	__asm volatile
 800adec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800adf0:	f383 8811 	msr	BASEPRI, r3
 800adf4:	f3bf 8f6f 	isb	sy
 800adf8:	f3bf 8f4f 	dsb	sy
 800adfc:	623b      	str	r3, [r7, #32]
}
 800adfe:	bf00      	nop
 800ae00:	bf00      	nop
 800ae02:	e7fd      	b.n	800ae00 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800ae04:	f001 fa24 	bl	800c250 <xTaskGetSchedulerState>
 800ae08:	4603      	mov	r3, r0
 800ae0a:	2b00      	cmp	r3, #0
 800ae0c:	d102      	bne.n	800ae14 <xQueueGenericSend+0xa4>
 800ae0e:	687b      	ldr	r3, [r7, #4]
 800ae10:	2b00      	cmp	r3, #0
 800ae12:	d101      	bne.n	800ae18 <xQueueGenericSend+0xa8>
 800ae14:	2301      	movs	r3, #1
 800ae16:	e000      	b.n	800ae1a <xQueueGenericSend+0xaa>
 800ae18:	2300      	movs	r3, #0
 800ae1a:	2b00      	cmp	r3, #0
 800ae1c:	d10b      	bne.n	800ae36 <xQueueGenericSend+0xc6>
	__asm volatile
 800ae1e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ae22:	f383 8811 	msr	BASEPRI, r3
 800ae26:	f3bf 8f6f 	isb	sy
 800ae2a:	f3bf 8f4f 	dsb	sy
 800ae2e:	61fb      	str	r3, [r7, #28]
}
 800ae30:	bf00      	nop
 800ae32:	bf00      	nop
 800ae34:	e7fd      	b.n	800ae32 <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800ae36:	f001 ff77 	bl	800cd28 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800ae3a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ae3c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800ae3e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ae40:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ae42:	429a      	cmp	r2, r3
 800ae44:	d302      	bcc.n	800ae4c <xQueueGenericSend+0xdc>
 800ae46:	683b      	ldr	r3, [r7, #0]
 800ae48:	2b02      	cmp	r3, #2
 800ae4a:	d129      	bne.n	800aea0 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800ae4c:	683a      	ldr	r2, [r7, #0]
 800ae4e:	68b9      	ldr	r1, [r7, #8]
 800ae50:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800ae52:	f000 fa0f 	bl	800b274 <prvCopyDataToQueue>
 800ae56:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800ae58:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ae5a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ae5c:	2b00      	cmp	r3, #0
 800ae5e:	d010      	beq.n	800ae82 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800ae60:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ae62:	3324      	adds	r3, #36	@ 0x24
 800ae64:	4618      	mov	r0, r3
 800ae66:	f001 f805 	bl	800be74 <xTaskRemoveFromEventList>
 800ae6a:	4603      	mov	r3, r0
 800ae6c:	2b00      	cmp	r3, #0
 800ae6e:	d013      	beq.n	800ae98 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800ae70:	4b3f      	ldr	r3, [pc, #252]	@ (800af70 <xQueueGenericSend+0x200>)
 800ae72:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800ae76:	601a      	str	r2, [r3, #0]
 800ae78:	f3bf 8f4f 	dsb	sy
 800ae7c:	f3bf 8f6f 	isb	sy
 800ae80:	e00a      	b.n	800ae98 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800ae82:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ae84:	2b00      	cmp	r3, #0
 800ae86:	d007      	beq.n	800ae98 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800ae88:	4b39      	ldr	r3, [pc, #228]	@ (800af70 <xQueueGenericSend+0x200>)
 800ae8a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800ae8e:	601a      	str	r2, [r3, #0]
 800ae90:	f3bf 8f4f 	dsb	sy
 800ae94:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800ae98:	f001 ff78 	bl	800cd8c <vPortExitCritical>
				return pdPASS;
 800ae9c:	2301      	movs	r3, #1
 800ae9e:	e063      	b.n	800af68 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800aea0:	687b      	ldr	r3, [r7, #4]
 800aea2:	2b00      	cmp	r3, #0
 800aea4:	d103      	bne.n	800aeae <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800aea6:	f001 ff71 	bl	800cd8c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800aeaa:	2300      	movs	r3, #0
 800aeac:	e05c      	b.n	800af68 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800aeae:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800aeb0:	2b00      	cmp	r3, #0
 800aeb2:	d106      	bne.n	800aec2 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800aeb4:	f107 0314 	add.w	r3, r7, #20
 800aeb8:	4618      	mov	r0, r3
 800aeba:	f001 f867 	bl	800bf8c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800aebe:	2301      	movs	r3, #1
 800aec0:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800aec2:	f001 ff63 	bl	800cd8c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800aec6:	f000 fda7 	bl	800ba18 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800aeca:	f001 ff2d 	bl	800cd28 <vPortEnterCritical>
 800aece:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aed0:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800aed4:	b25b      	sxtb	r3, r3
 800aed6:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800aeda:	d103      	bne.n	800aee4 <xQueueGenericSend+0x174>
 800aedc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aede:	2200      	movs	r2, #0
 800aee0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800aee4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aee6:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800aeea:	b25b      	sxtb	r3, r3
 800aeec:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800aef0:	d103      	bne.n	800aefa <xQueueGenericSend+0x18a>
 800aef2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aef4:	2200      	movs	r2, #0
 800aef6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800aefa:	f001 ff47 	bl	800cd8c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800aefe:	1d3a      	adds	r2, r7, #4
 800af00:	f107 0314 	add.w	r3, r7, #20
 800af04:	4611      	mov	r1, r2
 800af06:	4618      	mov	r0, r3
 800af08:	f001 f856 	bl	800bfb8 <xTaskCheckForTimeOut>
 800af0c:	4603      	mov	r3, r0
 800af0e:	2b00      	cmp	r3, #0
 800af10:	d124      	bne.n	800af5c <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800af12:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800af14:	f000 faa6 	bl	800b464 <prvIsQueueFull>
 800af18:	4603      	mov	r3, r0
 800af1a:	2b00      	cmp	r3, #0
 800af1c:	d018      	beq.n	800af50 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800af1e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800af20:	3310      	adds	r3, #16
 800af22:	687a      	ldr	r2, [r7, #4]
 800af24:	4611      	mov	r1, r2
 800af26:	4618      	mov	r0, r3
 800af28:	f000 ff52 	bl	800bdd0 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800af2c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800af2e:	f000 fa31 	bl	800b394 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800af32:	f000 fd7f 	bl	800ba34 <xTaskResumeAll>
 800af36:	4603      	mov	r3, r0
 800af38:	2b00      	cmp	r3, #0
 800af3a:	f47f af7c 	bne.w	800ae36 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 800af3e:	4b0c      	ldr	r3, [pc, #48]	@ (800af70 <xQueueGenericSend+0x200>)
 800af40:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800af44:	601a      	str	r2, [r3, #0]
 800af46:	f3bf 8f4f 	dsb	sy
 800af4a:	f3bf 8f6f 	isb	sy
 800af4e:	e772      	b.n	800ae36 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800af50:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800af52:	f000 fa1f 	bl	800b394 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800af56:	f000 fd6d 	bl	800ba34 <xTaskResumeAll>
 800af5a:	e76c      	b.n	800ae36 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800af5c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800af5e:	f000 fa19 	bl	800b394 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800af62:	f000 fd67 	bl	800ba34 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800af66:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800af68:	4618      	mov	r0, r3
 800af6a:	3738      	adds	r7, #56	@ 0x38
 800af6c:	46bd      	mov	sp, r7
 800af6e:	bd80      	pop	{r7, pc}
 800af70:	e000ed04 	.word	0xe000ed04

0800af74 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800af74:	b580      	push	{r7, lr}
 800af76:	b090      	sub	sp, #64	@ 0x40
 800af78:	af00      	add	r7, sp, #0
 800af7a:	60f8      	str	r0, [r7, #12]
 800af7c:	60b9      	str	r1, [r7, #8]
 800af7e:	607a      	str	r2, [r7, #4]
 800af80:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800af82:	68fb      	ldr	r3, [r7, #12]
 800af84:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 800af86:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800af88:	2b00      	cmp	r3, #0
 800af8a:	d10b      	bne.n	800afa4 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 800af8c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800af90:	f383 8811 	msr	BASEPRI, r3
 800af94:	f3bf 8f6f 	isb	sy
 800af98:	f3bf 8f4f 	dsb	sy
 800af9c:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800af9e:	bf00      	nop
 800afa0:	bf00      	nop
 800afa2:	e7fd      	b.n	800afa0 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800afa4:	68bb      	ldr	r3, [r7, #8]
 800afa6:	2b00      	cmp	r3, #0
 800afa8:	d103      	bne.n	800afb2 <xQueueGenericSendFromISR+0x3e>
 800afaa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800afac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800afae:	2b00      	cmp	r3, #0
 800afb0:	d101      	bne.n	800afb6 <xQueueGenericSendFromISR+0x42>
 800afb2:	2301      	movs	r3, #1
 800afb4:	e000      	b.n	800afb8 <xQueueGenericSendFromISR+0x44>
 800afb6:	2300      	movs	r3, #0
 800afb8:	2b00      	cmp	r3, #0
 800afba:	d10b      	bne.n	800afd4 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 800afbc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800afc0:	f383 8811 	msr	BASEPRI, r3
 800afc4:	f3bf 8f6f 	isb	sy
 800afc8:	f3bf 8f4f 	dsb	sy
 800afcc:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800afce:	bf00      	nop
 800afd0:	bf00      	nop
 800afd2:	e7fd      	b.n	800afd0 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800afd4:	683b      	ldr	r3, [r7, #0]
 800afd6:	2b02      	cmp	r3, #2
 800afd8:	d103      	bne.n	800afe2 <xQueueGenericSendFromISR+0x6e>
 800afda:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800afdc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800afde:	2b01      	cmp	r3, #1
 800afe0:	d101      	bne.n	800afe6 <xQueueGenericSendFromISR+0x72>
 800afe2:	2301      	movs	r3, #1
 800afe4:	e000      	b.n	800afe8 <xQueueGenericSendFromISR+0x74>
 800afe6:	2300      	movs	r3, #0
 800afe8:	2b00      	cmp	r3, #0
 800afea:	d10b      	bne.n	800b004 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 800afec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800aff0:	f383 8811 	msr	BASEPRI, r3
 800aff4:	f3bf 8f6f 	isb	sy
 800aff8:	f3bf 8f4f 	dsb	sy
 800affc:	623b      	str	r3, [r7, #32]
}
 800affe:	bf00      	nop
 800b000:	bf00      	nop
 800b002:	e7fd      	b.n	800b000 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800b004:	f001 ff70 	bl	800cee8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800b008:	f3ef 8211 	mrs	r2, BASEPRI
 800b00c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b010:	f383 8811 	msr	BASEPRI, r3
 800b014:	f3bf 8f6f 	isb	sy
 800b018:	f3bf 8f4f 	dsb	sy
 800b01c:	61fa      	str	r2, [r7, #28]
 800b01e:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800b020:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800b022:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800b024:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b026:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800b028:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b02a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b02c:	429a      	cmp	r2, r3
 800b02e:	d302      	bcc.n	800b036 <xQueueGenericSendFromISR+0xc2>
 800b030:	683b      	ldr	r3, [r7, #0]
 800b032:	2b02      	cmp	r3, #2
 800b034:	d12f      	bne.n	800b096 <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800b036:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b038:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800b03c:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800b040:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b042:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b044:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800b046:	683a      	ldr	r2, [r7, #0]
 800b048:	68b9      	ldr	r1, [r7, #8]
 800b04a:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800b04c:	f000 f912 	bl	800b274 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800b050:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 800b054:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800b058:	d112      	bne.n	800b080 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800b05a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b05c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b05e:	2b00      	cmp	r3, #0
 800b060:	d016      	beq.n	800b090 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800b062:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b064:	3324      	adds	r3, #36	@ 0x24
 800b066:	4618      	mov	r0, r3
 800b068:	f000 ff04 	bl	800be74 <xTaskRemoveFromEventList>
 800b06c:	4603      	mov	r3, r0
 800b06e:	2b00      	cmp	r3, #0
 800b070:	d00e      	beq.n	800b090 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800b072:	687b      	ldr	r3, [r7, #4]
 800b074:	2b00      	cmp	r3, #0
 800b076:	d00b      	beq.n	800b090 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800b078:	687b      	ldr	r3, [r7, #4]
 800b07a:	2201      	movs	r2, #1
 800b07c:	601a      	str	r2, [r3, #0]
 800b07e:	e007      	b.n	800b090 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800b080:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800b084:	3301      	adds	r3, #1
 800b086:	b2db      	uxtb	r3, r3
 800b088:	b25a      	sxtb	r2, r3
 800b08a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b08c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 800b090:	2301      	movs	r3, #1
 800b092:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 800b094:	e001      	b.n	800b09a <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800b096:	2300      	movs	r3, #0
 800b098:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800b09a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b09c:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800b09e:	697b      	ldr	r3, [r7, #20]
 800b0a0:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800b0a4:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800b0a6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 800b0a8:	4618      	mov	r0, r3
 800b0aa:	3740      	adds	r7, #64	@ 0x40
 800b0ac:	46bd      	mov	sp, r7
 800b0ae:	bd80      	pop	{r7, pc}

0800b0b0 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800b0b0:	b580      	push	{r7, lr}
 800b0b2:	b08c      	sub	sp, #48	@ 0x30
 800b0b4:	af00      	add	r7, sp, #0
 800b0b6:	60f8      	str	r0, [r7, #12]
 800b0b8:	60b9      	str	r1, [r7, #8]
 800b0ba:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800b0bc:	2300      	movs	r3, #0
 800b0be:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800b0c0:	68fb      	ldr	r3, [r7, #12]
 800b0c2:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800b0c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b0c6:	2b00      	cmp	r3, #0
 800b0c8:	d10b      	bne.n	800b0e2 <xQueueReceive+0x32>
	__asm volatile
 800b0ca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b0ce:	f383 8811 	msr	BASEPRI, r3
 800b0d2:	f3bf 8f6f 	isb	sy
 800b0d6:	f3bf 8f4f 	dsb	sy
 800b0da:	623b      	str	r3, [r7, #32]
}
 800b0dc:	bf00      	nop
 800b0de:	bf00      	nop
 800b0e0:	e7fd      	b.n	800b0de <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800b0e2:	68bb      	ldr	r3, [r7, #8]
 800b0e4:	2b00      	cmp	r3, #0
 800b0e6:	d103      	bne.n	800b0f0 <xQueueReceive+0x40>
 800b0e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b0ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b0ec:	2b00      	cmp	r3, #0
 800b0ee:	d101      	bne.n	800b0f4 <xQueueReceive+0x44>
 800b0f0:	2301      	movs	r3, #1
 800b0f2:	e000      	b.n	800b0f6 <xQueueReceive+0x46>
 800b0f4:	2300      	movs	r3, #0
 800b0f6:	2b00      	cmp	r3, #0
 800b0f8:	d10b      	bne.n	800b112 <xQueueReceive+0x62>
	__asm volatile
 800b0fa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b0fe:	f383 8811 	msr	BASEPRI, r3
 800b102:	f3bf 8f6f 	isb	sy
 800b106:	f3bf 8f4f 	dsb	sy
 800b10a:	61fb      	str	r3, [r7, #28]
}
 800b10c:	bf00      	nop
 800b10e:	bf00      	nop
 800b110:	e7fd      	b.n	800b10e <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800b112:	f001 f89d 	bl	800c250 <xTaskGetSchedulerState>
 800b116:	4603      	mov	r3, r0
 800b118:	2b00      	cmp	r3, #0
 800b11a:	d102      	bne.n	800b122 <xQueueReceive+0x72>
 800b11c:	687b      	ldr	r3, [r7, #4]
 800b11e:	2b00      	cmp	r3, #0
 800b120:	d101      	bne.n	800b126 <xQueueReceive+0x76>
 800b122:	2301      	movs	r3, #1
 800b124:	e000      	b.n	800b128 <xQueueReceive+0x78>
 800b126:	2300      	movs	r3, #0
 800b128:	2b00      	cmp	r3, #0
 800b12a:	d10b      	bne.n	800b144 <xQueueReceive+0x94>
	__asm volatile
 800b12c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b130:	f383 8811 	msr	BASEPRI, r3
 800b134:	f3bf 8f6f 	isb	sy
 800b138:	f3bf 8f4f 	dsb	sy
 800b13c:	61bb      	str	r3, [r7, #24]
}
 800b13e:	bf00      	nop
 800b140:	bf00      	nop
 800b142:	e7fd      	b.n	800b140 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800b144:	f001 fdf0 	bl	800cd28 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800b148:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b14a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b14c:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800b14e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b150:	2b00      	cmp	r3, #0
 800b152:	d01f      	beq.n	800b194 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800b154:	68b9      	ldr	r1, [r7, #8]
 800b156:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800b158:	f000 f8f6 	bl	800b348 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800b15c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b15e:	1e5a      	subs	r2, r3, #1
 800b160:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b162:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800b164:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b166:	691b      	ldr	r3, [r3, #16]
 800b168:	2b00      	cmp	r3, #0
 800b16a:	d00f      	beq.n	800b18c <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800b16c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b16e:	3310      	adds	r3, #16
 800b170:	4618      	mov	r0, r3
 800b172:	f000 fe7f 	bl	800be74 <xTaskRemoveFromEventList>
 800b176:	4603      	mov	r3, r0
 800b178:	2b00      	cmp	r3, #0
 800b17a:	d007      	beq.n	800b18c <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800b17c:	4b3c      	ldr	r3, [pc, #240]	@ (800b270 <xQueueReceive+0x1c0>)
 800b17e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b182:	601a      	str	r2, [r3, #0]
 800b184:	f3bf 8f4f 	dsb	sy
 800b188:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800b18c:	f001 fdfe 	bl	800cd8c <vPortExitCritical>
				return pdPASS;
 800b190:	2301      	movs	r3, #1
 800b192:	e069      	b.n	800b268 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800b194:	687b      	ldr	r3, [r7, #4]
 800b196:	2b00      	cmp	r3, #0
 800b198:	d103      	bne.n	800b1a2 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800b19a:	f001 fdf7 	bl	800cd8c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800b19e:	2300      	movs	r3, #0
 800b1a0:	e062      	b.n	800b268 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800b1a2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b1a4:	2b00      	cmp	r3, #0
 800b1a6:	d106      	bne.n	800b1b6 <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800b1a8:	f107 0310 	add.w	r3, r7, #16
 800b1ac:	4618      	mov	r0, r3
 800b1ae:	f000 feed 	bl	800bf8c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800b1b2:	2301      	movs	r3, #1
 800b1b4:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800b1b6:	f001 fde9 	bl	800cd8c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800b1ba:	f000 fc2d 	bl	800ba18 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800b1be:	f001 fdb3 	bl	800cd28 <vPortEnterCritical>
 800b1c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b1c4:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800b1c8:	b25b      	sxtb	r3, r3
 800b1ca:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800b1ce:	d103      	bne.n	800b1d8 <xQueueReceive+0x128>
 800b1d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b1d2:	2200      	movs	r2, #0
 800b1d4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800b1d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b1da:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800b1de:	b25b      	sxtb	r3, r3
 800b1e0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800b1e4:	d103      	bne.n	800b1ee <xQueueReceive+0x13e>
 800b1e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b1e8:	2200      	movs	r2, #0
 800b1ea:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800b1ee:	f001 fdcd 	bl	800cd8c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800b1f2:	1d3a      	adds	r2, r7, #4
 800b1f4:	f107 0310 	add.w	r3, r7, #16
 800b1f8:	4611      	mov	r1, r2
 800b1fa:	4618      	mov	r0, r3
 800b1fc:	f000 fedc 	bl	800bfb8 <xTaskCheckForTimeOut>
 800b200:	4603      	mov	r3, r0
 800b202:	2b00      	cmp	r3, #0
 800b204:	d123      	bne.n	800b24e <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800b206:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800b208:	f000 f916 	bl	800b438 <prvIsQueueEmpty>
 800b20c:	4603      	mov	r3, r0
 800b20e:	2b00      	cmp	r3, #0
 800b210:	d017      	beq.n	800b242 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800b212:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b214:	3324      	adds	r3, #36	@ 0x24
 800b216:	687a      	ldr	r2, [r7, #4]
 800b218:	4611      	mov	r1, r2
 800b21a:	4618      	mov	r0, r3
 800b21c:	f000 fdd8 	bl	800bdd0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800b220:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800b222:	f000 f8b7 	bl	800b394 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800b226:	f000 fc05 	bl	800ba34 <xTaskResumeAll>
 800b22a:	4603      	mov	r3, r0
 800b22c:	2b00      	cmp	r3, #0
 800b22e:	d189      	bne.n	800b144 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 800b230:	4b0f      	ldr	r3, [pc, #60]	@ (800b270 <xQueueReceive+0x1c0>)
 800b232:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b236:	601a      	str	r2, [r3, #0]
 800b238:	f3bf 8f4f 	dsb	sy
 800b23c:	f3bf 8f6f 	isb	sy
 800b240:	e780      	b.n	800b144 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800b242:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800b244:	f000 f8a6 	bl	800b394 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800b248:	f000 fbf4 	bl	800ba34 <xTaskResumeAll>
 800b24c:	e77a      	b.n	800b144 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800b24e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800b250:	f000 f8a0 	bl	800b394 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800b254:	f000 fbee 	bl	800ba34 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800b258:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800b25a:	f000 f8ed 	bl	800b438 <prvIsQueueEmpty>
 800b25e:	4603      	mov	r3, r0
 800b260:	2b00      	cmp	r3, #0
 800b262:	f43f af6f 	beq.w	800b144 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800b266:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800b268:	4618      	mov	r0, r3
 800b26a:	3730      	adds	r7, #48	@ 0x30
 800b26c:	46bd      	mov	sp, r7
 800b26e:	bd80      	pop	{r7, pc}
 800b270:	e000ed04 	.word	0xe000ed04

0800b274 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800b274:	b580      	push	{r7, lr}
 800b276:	b086      	sub	sp, #24
 800b278:	af00      	add	r7, sp, #0
 800b27a:	60f8      	str	r0, [r7, #12]
 800b27c:	60b9      	str	r1, [r7, #8]
 800b27e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800b280:	2300      	movs	r3, #0
 800b282:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800b284:	68fb      	ldr	r3, [r7, #12]
 800b286:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b288:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800b28a:	68fb      	ldr	r3, [r7, #12]
 800b28c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b28e:	2b00      	cmp	r3, #0
 800b290:	d10d      	bne.n	800b2ae <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800b292:	68fb      	ldr	r3, [r7, #12]
 800b294:	681b      	ldr	r3, [r3, #0]
 800b296:	2b00      	cmp	r3, #0
 800b298:	d14d      	bne.n	800b336 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800b29a:	68fb      	ldr	r3, [r7, #12]
 800b29c:	689b      	ldr	r3, [r3, #8]
 800b29e:	4618      	mov	r0, r3
 800b2a0:	f000 fff4 	bl	800c28c <xTaskPriorityDisinherit>
 800b2a4:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800b2a6:	68fb      	ldr	r3, [r7, #12]
 800b2a8:	2200      	movs	r2, #0
 800b2aa:	609a      	str	r2, [r3, #8]
 800b2ac:	e043      	b.n	800b336 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800b2ae:	687b      	ldr	r3, [r7, #4]
 800b2b0:	2b00      	cmp	r3, #0
 800b2b2:	d119      	bne.n	800b2e8 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800b2b4:	68fb      	ldr	r3, [r7, #12]
 800b2b6:	6858      	ldr	r0, [r3, #4]
 800b2b8:	68fb      	ldr	r3, [r7, #12]
 800b2ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b2bc:	461a      	mov	r2, r3
 800b2be:	68b9      	ldr	r1, [r7, #8]
 800b2c0:	f00e fd87 	bl	8019dd2 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800b2c4:	68fb      	ldr	r3, [r7, #12]
 800b2c6:	685a      	ldr	r2, [r3, #4]
 800b2c8:	68fb      	ldr	r3, [r7, #12]
 800b2ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b2cc:	441a      	add	r2, r3
 800b2ce:	68fb      	ldr	r3, [r7, #12]
 800b2d0:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800b2d2:	68fb      	ldr	r3, [r7, #12]
 800b2d4:	685a      	ldr	r2, [r3, #4]
 800b2d6:	68fb      	ldr	r3, [r7, #12]
 800b2d8:	689b      	ldr	r3, [r3, #8]
 800b2da:	429a      	cmp	r2, r3
 800b2dc:	d32b      	bcc.n	800b336 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800b2de:	68fb      	ldr	r3, [r7, #12]
 800b2e0:	681a      	ldr	r2, [r3, #0]
 800b2e2:	68fb      	ldr	r3, [r7, #12]
 800b2e4:	605a      	str	r2, [r3, #4]
 800b2e6:	e026      	b.n	800b336 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800b2e8:	68fb      	ldr	r3, [r7, #12]
 800b2ea:	68d8      	ldr	r0, [r3, #12]
 800b2ec:	68fb      	ldr	r3, [r7, #12]
 800b2ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b2f0:	461a      	mov	r2, r3
 800b2f2:	68b9      	ldr	r1, [r7, #8]
 800b2f4:	f00e fd6d 	bl	8019dd2 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800b2f8:	68fb      	ldr	r3, [r7, #12]
 800b2fa:	68da      	ldr	r2, [r3, #12]
 800b2fc:	68fb      	ldr	r3, [r7, #12]
 800b2fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b300:	425b      	negs	r3, r3
 800b302:	441a      	add	r2, r3
 800b304:	68fb      	ldr	r3, [r7, #12]
 800b306:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800b308:	68fb      	ldr	r3, [r7, #12]
 800b30a:	68da      	ldr	r2, [r3, #12]
 800b30c:	68fb      	ldr	r3, [r7, #12]
 800b30e:	681b      	ldr	r3, [r3, #0]
 800b310:	429a      	cmp	r2, r3
 800b312:	d207      	bcs.n	800b324 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800b314:	68fb      	ldr	r3, [r7, #12]
 800b316:	689a      	ldr	r2, [r3, #8]
 800b318:	68fb      	ldr	r3, [r7, #12]
 800b31a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b31c:	425b      	negs	r3, r3
 800b31e:	441a      	add	r2, r3
 800b320:	68fb      	ldr	r3, [r7, #12]
 800b322:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800b324:	687b      	ldr	r3, [r7, #4]
 800b326:	2b02      	cmp	r3, #2
 800b328:	d105      	bne.n	800b336 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800b32a:	693b      	ldr	r3, [r7, #16]
 800b32c:	2b00      	cmp	r3, #0
 800b32e:	d002      	beq.n	800b336 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800b330:	693b      	ldr	r3, [r7, #16]
 800b332:	3b01      	subs	r3, #1
 800b334:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800b336:	693b      	ldr	r3, [r7, #16]
 800b338:	1c5a      	adds	r2, r3, #1
 800b33a:	68fb      	ldr	r3, [r7, #12]
 800b33c:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 800b33e:	697b      	ldr	r3, [r7, #20]
}
 800b340:	4618      	mov	r0, r3
 800b342:	3718      	adds	r7, #24
 800b344:	46bd      	mov	sp, r7
 800b346:	bd80      	pop	{r7, pc}

0800b348 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800b348:	b580      	push	{r7, lr}
 800b34a:	b082      	sub	sp, #8
 800b34c:	af00      	add	r7, sp, #0
 800b34e:	6078      	str	r0, [r7, #4]
 800b350:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800b352:	687b      	ldr	r3, [r7, #4]
 800b354:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b356:	2b00      	cmp	r3, #0
 800b358:	d018      	beq.n	800b38c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800b35a:	687b      	ldr	r3, [r7, #4]
 800b35c:	68da      	ldr	r2, [r3, #12]
 800b35e:	687b      	ldr	r3, [r7, #4]
 800b360:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b362:	441a      	add	r2, r3
 800b364:	687b      	ldr	r3, [r7, #4]
 800b366:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800b368:	687b      	ldr	r3, [r7, #4]
 800b36a:	68da      	ldr	r2, [r3, #12]
 800b36c:	687b      	ldr	r3, [r7, #4]
 800b36e:	689b      	ldr	r3, [r3, #8]
 800b370:	429a      	cmp	r2, r3
 800b372:	d303      	bcc.n	800b37c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800b374:	687b      	ldr	r3, [r7, #4]
 800b376:	681a      	ldr	r2, [r3, #0]
 800b378:	687b      	ldr	r3, [r7, #4]
 800b37a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800b37c:	687b      	ldr	r3, [r7, #4]
 800b37e:	68d9      	ldr	r1, [r3, #12]
 800b380:	687b      	ldr	r3, [r7, #4]
 800b382:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b384:	461a      	mov	r2, r3
 800b386:	6838      	ldr	r0, [r7, #0]
 800b388:	f00e fd23 	bl	8019dd2 <memcpy>
	}
}
 800b38c:	bf00      	nop
 800b38e:	3708      	adds	r7, #8
 800b390:	46bd      	mov	sp, r7
 800b392:	bd80      	pop	{r7, pc}

0800b394 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800b394:	b580      	push	{r7, lr}
 800b396:	b084      	sub	sp, #16
 800b398:	af00      	add	r7, sp, #0
 800b39a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800b39c:	f001 fcc4 	bl	800cd28 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800b3a0:	687b      	ldr	r3, [r7, #4]
 800b3a2:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800b3a6:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800b3a8:	e011      	b.n	800b3ce <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800b3aa:	687b      	ldr	r3, [r7, #4]
 800b3ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b3ae:	2b00      	cmp	r3, #0
 800b3b0:	d012      	beq.n	800b3d8 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800b3b2:	687b      	ldr	r3, [r7, #4]
 800b3b4:	3324      	adds	r3, #36	@ 0x24
 800b3b6:	4618      	mov	r0, r3
 800b3b8:	f000 fd5c 	bl	800be74 <xTaskRemoveFromEventList>
 800b3bc:	4603      	mov	r3, r0
 800b3be:	2b00      	cmp	r3, #0
 800b3c0:	d001      	beq.n	800b3c6 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800b3c2:	f000 fe5d 	bl	800c080 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800b3c6:	7bfb      	ldrb	r3, [r7, #15]
 800b3c8:	3b01      	subs	r3, #1
 800b3ca:	b2db      	uxtb	r3, r3
 800b3cc:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800b3ce:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b3d2:	2b00      	cmp	r3, #0
 800b3d4:	dce9      	bgt.n	800b3aa <prvUnlockQueue+0x16>
 800b3d6:	e000      	b.n	800b3da <prvUnlockQueue+0x46>
					break;
 800b3d8:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800b3da:	687b      	ldr	r3, [r7, #4]
 800b3dc:	22ff      	movs	r2, #255	@ 0xff
 800b3de:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 800b3e2:	f001 fcd3 	bl	800cd8c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800b3e6:	f001 fc9f 	bl	800cd28 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800b3ea:	687b      	ldr	r3, [r7, #4]
 800b3ec:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800b3f0:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800b3f2:	e011      	b.n	800b418 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800b3f4:	687b      	ldr	r3, [r7, #4]
 800b3f6:	691b      	ldr	r3, [r3, #16]
 800b3f8:	2b00      	cmp	r3, #0
 800b3fa:	d012      	beq.n	800b422 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800b3fc:	687b      	ldr	r3, [r7, #4]
 800b3fe:	3310      	adds	r3, #16
 800b400:	4618      	mov	r0, r3
 800b402:	f000 fd37 	bl	800be74 <xTaskRemoveFromEventList>
 800b406:	4603      	mov	r3, r0
 800b408:	2b00      	cmp	r3, #0
 800b40a:	d001      	beq.n	800b410 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800b40c:	f000 fe38 	bl	800c080 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800b410:	7bbb      	ldrb	r3, [r7, #14]
 800b412:	3b01      	subs	r3, #1
 800b414:	b2db      	uxtb	r3, r3
 800b416:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800b418:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b41c:	2b00      	cmp	r3, #0
 800b41e:	dce9      	bgt.n	800b3f4 <prvUnlockQueue+0x60>
 800b420:	e000      	b.n	800b424 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800b422:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800b424:	687b      	ldr	r3, [r7, #4]
 800b426:	22ff      	movs	r2, #255	@ 0xff
 800b428:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 800b42c:	f001 fcae 	bl	800cd8c <vPortExitCritical>
}
 800b430:	bf00      	nop
 800b432:	3710      	adds	r7, #16
 800b434:	46bd      	mov	sp, r7
 800b436:	bd80      	pop	{r7, pc}

0800b438 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800b438:	b580      	push	{r7, lr}
 800b43a:	b084      	sub	sp, #16
 800b43c:	af00      	add	r7, sp, #0
 800b43e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800b440:	f001 fc72 	bl	800cd28 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800b444:	687b      	ldr	r3, [r7, #4]
 800b446:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b448:	2b00      	cmp	r3, #0
 800b44a:	d102      	bne.n	800b452 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800b44c:	2301      	movs	r3, #1
 800b44e:	60fb      	str	r3, [r7, #12]
 800b450:	e001      	b.n	800b456 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800b452:	2300      	movs	r3, #0
 800b454:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800b456:	f001 fc99 	bl	800cd8c <vPortExitCritical>

	return xReturn;
 800b45a:	68fb      	ldr	r3, [r7, #12]
}
 800b45c:	4618      	mov	r0, r3
 800b45e:	3710      	adds	r7, #16
 800b460:	46bd      	mov	sp, r7
 800b462:	bd80      	pop	{r7, pc}

0800b464 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800b464:	b580      	push	{r7, lr}
 800b466:	b084      	sub	sp, #16
 800b468:	af00      	add	r7, sp, #0
 800b46a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800b46c:	f001 fc5c 	bl	800cd28 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800b470:	687b      	ldr	r3, [r7, #4]
 800b472:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800b474:	687b      	ldr	r3, [r7, #4]
 800b476:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b478:	429a      	cmp	r2, r3
 800b47a:	d102      	bne.n	800b482 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800b47c:	2301      	movs	r3, #1
 800b47e:	60fb      	str	r3, [r7, #12]
 800b480:	e001      	b.n	800b486 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800b482:	2300      	movs	r3, #0
 800b484:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800b486:	f001 fc81 	bl	800cd8c <vPortExitCritical>

	return xReturn;
 800b48a:	68fb      	ldr	r3, [r7, #12]
}
 800b48c:	4618      	mov	r0, r3
 800b48e:	3710      	adds	r7, #16
 800b490:	46bd      	mov	sp, r7
 800b492:	bd80      	pop	{r7, pc}

0800b494 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800b494:	b480      	push	{r7}
 800b496:	b085      	sub	sp, #20
 800b498:	af00      	add	r7, sp, #0
 800b49a:	6078      	str	r0, [r7, #4]
 800b49c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800b49e:	2300      	movs	r3, #0
 800b4a0:	60fb      	str	r3, [r7, #12]
 800b4a2:	e014      	b.n	800b4ce <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800b4a4:	4a0f      	ldr	r2, [pc, #60]	@ (800b4e4 <vQueueAddToRegistry+0x50>)
 800b4a6:	68fb      	ldr	r3, [r7, #12]
 800b4a8:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800b4ac:	2b00      	cmp	r3, #0
 800b4ae:	d10b      	bne.n	800b4c8 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800b4b0:	490c      	ldr	r1, [pc, #48]	@ (800b4e4 <vQueueAddToRegistry+0x50>)
 800b4b2:	68fb      	ldr	r3, [r7, #12]
 800b4b4:	683a      	ldr	r2, [r7, #0]
 800b4b6:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800b4ba:	4a0a      	ldr	r2, [pc, #40]	@ (800b4e4 <vQueueAddToRegistry+0x50>)
 800b4bc:	68fb      	ldr	r3, [r7, #12]
 800b4be:	00db      	lsls	r3, r3, #3
 800b4c0:	4413      	add	r3, r2
 800b4c2:	687a      	ldr	r2, [r7, #4]
 800b4c4:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800b4c6:	e006      	b.n	800b4d6 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800b4c8:	68fb      	ldr	r3, [r7, #12]
 800b4ca:	3301      	adds	r3, #1
 800b4cc:	60fb      	str	r3, [r7, #12]
 800b4ce:	68fb      	ldr	r3, [r7, #12]
 800b4d0:	2b07      	cmp	r3, #7
 800b4d2:	d9e7      	bls.n	800b4a4 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800b4d4:	bf00      	nop
 800b4d6:	bf00      	nop
 800b4d8:	3714      	adds	r7, #20
 800b4da:	46bd      	mov	sp, r7
 800b4dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4e0:	4770      	bx	lr
 800b4e2:	bf00      	nop
 800b4e4:	200062f0 	.word	0x200062f0

0800b4e8 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800b4e8:	b580      	push	{r7, lr}
 800b4ea:	b086      	sub	sp, #24
 800b4ec:	af00      	add	r7, sp, #0
 800b4ee:	60f8      	str	r0, [r7, #12]
 800b4f0:	60b9      	str	r1, [r7, #8]
 800b4f2:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800b4f4:	68fb      	ldr	r3, [r7, #12]
 800b4f6:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800b4f8:	f001 fc16 	bl	800cd28 <vPortEnterCritical>
 800b4fc:	697b      	ldr	r3, [r7, #20]
 800b4fe:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800b502:	b25b      	sxtb	r3, r3
 800b504:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800b508:	d103      	bne.n	800b512 <vQueueWaitForMessageRestricted+0x2a>
 800b50a:	697b      	ldr	r3, [r7, #20]
 800b50c:	2200      	movs	r2, #0
 800b50e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800b512:	697b      	ldr	r3, [r7, #20]
 800b514:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800b518:	b25b      	sxtb	r3, r3
 800b51a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800b51e:	d103      	bne.n	800b528 <vQueueWaitForMessageRestricted+0x40>
 800b520:	697b      	ldr	r3, [r7, #20]
 800b522:	2200      	movs	r2, #0
 800b524:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800b528:	f001 fc30 	bl	800cd8c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800b52c:	697b      	ldr	r3, [r7, #20]
 800b52e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b530:	2b00      	cmp	r3, #0
 800b532:	d106      	bne.n	800b542 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800b534:	697b      	ldr	r3, [r7, #20]
 800b536:	3324      	adds	r3, #36	@ 0x24
 800b538:	687a      	ldr	r2, [r7, #4]
 800b53a:	68b9      	ldr	r1, [r7, #8]
 800b53c:	4618      	mov	r0, r3
 800b53e:	f000 fc6d 	bl	800be1c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800b542:	6978      	ldr	r0, [r7, #20]
 800b544:	f7ff ff26 	bl	800b394 <prvUnlockQueue>
	}
 800b548:	bf00      	nop
 800b54a:	3718      	adds	r7, #24
 800b54c:	46bd      	mov	sp, r7
 800b54e:	bd80      	pop	{r7, pc}

0800b550 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800b550:	b580      	push	{r7, lr}
 800b552:	b08e      	sub	sp, #56	@ 0x38
 800b554:	af04      	add	r7, sp, #16
 800b556:	60f8      	str	r0, [r7, #12]
 800b558:	60b9      	str	r1, [r7, #8]
 800b55a:	607a      	str	r2, [r7, #4]
 800b55c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800b55e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b560:	2b00      	cmp	r3, #0
 800b562:	d10b      	bne.n	800b57c <xTaskCreateStatic+0x2c>
	__asm volatile
 800b564:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b568:	f383 8811 	msr	BASEPRI, r3
 800b56c:	f3bf 8f6f 	isb	sy
 800b570:	f3bf 8f4f 	dsb	sy
 800b574:	623b      	str	r3, [r7, #32]
}
 800b576:	bf00      	nop
 800b578:	bf00      	nop
 800b57a:	e7fd      	b.n	800b578 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800b57c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b57e:	2b00      	cmp	r3, #0
 800b580:	d10b      	bne.n	800b59a <xTaskCreateStatic+0x4a>
	__asm volatile
 800b582:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b586:	f383 8811 	msr	BASEPRI, r3
 800b58a:	f3bf 8f6f 	isb	sy
 800b58e:	f3bf 8f4f 	dsb	sy
 800b592:	61fb      	str	r3, [r7, #28]
}
 800b594:	bf00      	nop
 800b596:	bf00      	nop
 800b598:	e7fd      	b.n	800b596 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800b59a:	23a8      	movs	r3, #168	@ 0xa8
 800b59c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800b59e:	693b      	ldr	r3, [r7, #16]
 800b5a0:	2ba8      	cmp	r3, #168	@ 0xa8
 800b5a2:	d00b      	beq.n	800b5bc <xTaskCreateStatic+0x6c>
	__asm volatile
 800b5a4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b5a8:	f383 8811 	msr	BASEPRI, r3
 800b5ac:	f3bf 8f6f 	isb	sy
 800b5b0:	f3bf 8f4f 	dsb	sy
 800b5b4:	61bb      	str	r3, [r7, #24]
}
 800b5b6:	bf00      	nop
 800b5b8:	bf00      	nop
 800b5ba:	e7fd      	b.n	800b5b8 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800b5bc:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800b5be:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b5c0:	2b00      	cmp	r3, #0
 800b5c2:	d01e      	beq.n	800b602 <xTaskCreateStatic+0xb2>
 800b5c4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b5c6:	2b00      	cmp	r3, #0
 800b5c8:	d01b      	beq.n	800b602 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800b5ca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b5cc:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800b5ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b5d0:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800b5d2:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800b5d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b5d6:	2202      	movs	r2, #2
 800b5d8:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800b5dc:	2300      	movs	r3, #0
 800b5de:	9303      	str	r3, [sp, #12]
 800b5e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b5e2:	9302      	str	r3, [sp, #8]
 800b5e4:	f107 0314 	add.w	r3, r7, #20
 800b5e8:	9301      	str	r3, [sp, #4]
 800b5ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b5ec:	9300      	str	r3, [sp, #0]
 800b5ee:	683b      	ldr	r3, [r7, #0]
 800b5f0:	687a      	ldr	r2, [r7, #4]
 800b5f2:	68b9      	ldr	r1, [r7, #8]
 800b5f4:	68f8      	ldr	r0, [r7, #12]
 800b5f6:	f000 f851 	bl	800b69c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800b5fa:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800b5fc:	f000 f8f6 	bl	800b7ec <prvAddNewTaskToReadyList>
 800b600:	e001      	b.n	800b606 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 800b602:	2300      	movs	r3, #0
 800b604:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800b606:	697b      	ldr	r3, [r7, #20]
	}
 800b608:	4618      	mov	r0, r3
 800b60a:	3728      	adds	r7, #40	@ 0x28
 800b60c:	46bd      	mov	sp, r7
 800b60e:	bd80      	pop	{r7, pc}

0800b610 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800b610:	b580      	push	{r7, lr}
 800b612:	b08c      	sub	sp, #48	@ 0x30
 800b614:	af04      	add	r7, sp, #16
 800b616:	60f8      	str	r0, [r7, #12]
 800b618:	60b9      	str	r1, [r7, #8]
 800b61a:	603b      	str	r3, [r7, #0]
 800b61c:	4613      	mov	r3, r2
 800b61e:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800b620:	88fb      	ldrh	r3, [r7, #6]
 800b622:	009b      	lsls	r3, r3, #2
 800b624:	4618      	mov	r0, r3
 800b626:	f001 fca1 	bl	800cf6c <pvPortMalloc>
 800b62a:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800b62c:	697b      	ldr	r3, [r7, #20]
 800b62e:	2b00      	cmp	r3, #0
 800b630:	d00e      	beq.n	800b650 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800b632:	20a8      	movs	r0, #168	@ 0xa8
 800b634:	f001 fc9a 	bl	800cf6c <pvPortMalloc>
 800b638:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800b63a:	69fb      	ldr	r3, [r7, #28]
 800b63c:	2b00      	cmp	r3, #0
 800b63e:	d003      	beq.n	800b648 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800b640:	69fb      	ldr	r3, [r7, #28]
 800b642:	697a      	ldr	r2, [r7, #20]
 800b644:	631a      	str	r2, [r3, #48]	@ 0x30
 800b646:	e005      	b.n	800b654 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800b648:	6978      	ldr	r0, [r7, #20]
 800b64a:	f001 fd5d 	bl	800d108 <vPortFree>
 800b64e:	e001      	b.n	800b654 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800b650:	2300      	movs	r3, #0
 800b652:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800b654:	69fb      	ldr	r3, [r7, #28]
 800b656:	2b00      	cmp	r3, #0
 800b658:	d017      	beq.n	800b68a <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800b65a:	69fb      	ldr	r3, [r7, #28]
 800b65c:	2200      	movs	r2, #0
 800b65e:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800b662:	88fa      	ldrh	r2, [r7, #6]
 800b664:	2300      	movs	r3, #0
 800b666:	9303      	str	r3, [sp, #12]
 800b668:	69fb      	ldr	r3, [r7, #28]
 800b66a:	9302      	str	r3, [sp, #8]
 800b66c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b66e:	9301      	str	r3, [sp, #4]
 800b670:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b672:	9300      	str	r3, [sp, #0]
 800b674:	683b      	ldr	r3, [r7, #0]
 800b676:	68b9      	ldr	r1, [r7, #8]
 800b678:	68f8      	ldr	r0, [r7, #12]
 800b67a:	f000 f80f 	bl	800b69c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800b67e:	69f8      	ldr	r0, [r7, #28]
 800b680:	f000 f8b4 	bl	800b7ec <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800b684:	2301      	movs	r3, #1
 800b686:	61bb      	str	r3, [r7, #24]
 800b688:	e002      	b.n	800b690 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800b68a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800b68e:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800b690:	69bb      	ldr	r3, [r7, #24]
	}
 800b692:	4618      	mov	r0, r3
 800b694:	3720      	adds	r7, #32
 800b696:	46bd      	mov	sp, r7
 800b698:	bd80      	pop	{r7, pc}
	...

0800b69c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800b69c:	b580      	push	{r7, lr}
 800b69e:	b088      	sub	sp, #32
 800b6a0:	af00      	add	r7, sp, #0
 800b6a2:	60f8      	str	r0, [r7, #12]
 800b6a4:	60b9      	str	r1, [r7, #8]
 800b6a6:	607a      	str	r2, [r7, #4]
 800b6a8:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800b6aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b6ac:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 800b6ae:	687b      	ldr	r3, [r7, #4]
 800b6b0:	009b      	lsls	r3, r3, #2
 800b6b2:	461a      	mov	r2, r3
 800b6b4:	21a5      	movs	r1, #165	@ 0xa5
 800b6b6:	f00e fa6d 	bl	8019b94 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800b6ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b6bc:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800b6be:	687b      	ldr	r3, [r7, #4]
 800b6c0:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800b6c4:	3b01      	subs	r3, #1
 800b6c6:	009b      	lsls	r3, r3, #2
 800b6c8:	4413      	add	r3, r2
 800b6ca:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800b6cc:	69bb      	ldr	r3, [r7, #24]
 800b6ce:	f023 0307 	bic.w	r3, r3, #7
 800b6d2:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800b6d4:	69bb      	ldr	r3, [r7, #24]
 800b6d6:	f003 0307 	and.w	r3, r3, #7
 800b6da:	2b00      	cmp	r3, #0
 800b6dc:	d00b      	beq.n	800b6f6 <prvInitialiseNewTask+0x5a>
	__asm volatile
 800b6de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b6e2:	f383 8811 	msr	BASEPRI, r3
 800b6e6:	f3bf 8f6f 	isb	sy
 800b6ea:	f3bf 8f4f 	dsb	sy
 800b6ee:	617b      	str	r3, [r7, #20]
}
 800b6f0:	bf00      	nop
 800b6f2:	bf00      	nop
 800b6f4:	e7fd      	b.n	800b6f2 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800b6f6:	68bb      	ldr	r3, [r7, #8]
 800b6f8:	2b00      	cmp	r3, #0
 800b6fa:	d01f      	beq.n	800b73c <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800b6fc:	2300      	movs	r3, #0
 800b6fe:	61fb      	str	r3, [r7, #28]
 800b700:	e012      	b.n	800b728 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800b702:	68ba      	ldr	r2, [r7, #8]
 800b704:	69fb      	ldr	r3, [r7, #28]
 800b706:	4413      	add	r3, r2
 800b708:	7819      	ldrb	r1, [r3, #0]
 800b70a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b70c:	69fb      	ldr	r3, [r7, #28]
 800b70e:	4413      	add	r3, r2
 800b710:	3334      	adds	r3, #52	@ 0x34
 800b712:	460a      	mov	r2, r1
 800b714:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800b716:	68ba      	ldr	r2, [r7, #8]
 800b718:	69fb      	ldr	r3, [r7, #28]
 800b71a:	4413      	add	r3, r2
 800b71c:	781b      	ldrb	r3, [r3, #0]
 800b71e:	2b00      	cmp	r3, #0
 800b720:	d006      	beq.n	800b730 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800b722:	69fb      	ldr	r3, [r7, #28]
 800b724:	3301      	adds	r3, #1
 800b726:	61fb      	str	r3, [r7, #28]
 800b728:	69fb      	ldr	r3, [r7, #28]
 800b72a:	2b0f      	cmp	r3, #15
 800b72c:	d9e9      	bls.n	800b702 <prvInitialiseNewTask+0x66>
 800b72e:	e000      	b.n	800b732 <prvInitialiseNewTask+0x96>
			{
				break;
 800b730:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800b732:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b734:	2200      	movs	r2, #0
 800b736:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800b73a:	e003      	b.n	800b744 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800b73c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b73e:	2200      	movs	r2, #0
 800b740:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800b744:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b746:	2b37      	cmp	r3, #55	@ 0x37
 800b748:	d901      	bls.n	800b74e <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800b74a:	2337      	movs	r3, #55	@ 0x37
 800b74c:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800b74e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b750:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800b752:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800b754:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b756:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800b758:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800b75a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b75c:	2200      	movs	r2, #0
 800b75e:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800b760:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b762:	3304      	adds	r3, #4
 800b764:	4618      	mov	r0, r3
 800b766:	f7ff f965 	bl	800aa34 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800b76a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b76c:	3318      	adds	r3, #24
 800b76e:	4618      	mov	r0, r3
 800b770:	f7ff f960 	bl	800aa34 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800b774:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b776:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b778:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b77a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b77c:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800b780:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b782:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800b784:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b786:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b788:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800b78a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b78c:	2200      	movs	r2, #0
 800b78e:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800b792:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b794:	2200      	movs	r2, #0
 800b796:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800b79a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b79c:	3354      	adds	r3, #84	@ 0x54
 800b79e:	224c      	movs	r2, #76	@ 0x4c
 800b7a0:	2100      	movs	r1, #0
 800b7a2:	4618      	mov	r0, r3
 800b7a4:	f00e f9f6 	bl	8019b94 <memset>
 800b7a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b7aa:	4a0d      	ldr	r2, [pc, #52]	@ (800b7e0 <prvInitialiseNewTask+0x144>)
 800b7ac:	659a      	str	r2, [r3, #88]	@ 0x58
 800b7ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b7b0:	4a0c      	ldr	r2, [pc, #48]	@ (800b7e4 <prvInitialiseNewTask+0x148>)
 800b7b2:	65da      	str	r2, [r3, #92]	@ 0x5c
 800b7b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b7b6:	4a0c      	ldr	r2, [pc, #48]	@ (800b7e8 <prvInitialiseNewTask+0x14c>)
 800b7b8:	661a      	str	r2, [r3, #96]	@ 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800b7ba:	683a      	ldr	r2, [r7, #0]
 800b7bc:	68f9      	ldr	r1, [r7, #12]
 800b7be:	69b8      	ldr	r0, [r7, #24]
 800b7c0:	f001 f982 	bl	800cac8 <pxPortInitialiseStack>
 800b7c4:	4602      	mov	r2, r0
 800b7c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b7c8:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800b7ca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b7cc:	2b00      	cmp	r3, #0
 800b7ce:	d002      	beq.n	800b7d6 <prvInitialiseNewTask+0x13a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800b7d0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b7d2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b7d4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800b7d6:	bf00      	nop
 800b7d8:	3720      	adds	r7, #32
 800b7da:	46bd      	mov	sp, r7
 800b7dc:	bd80      	pop	{r7, pc}
 800b7de:	bf00      	nop
 800b7e0:	2000773c 	.word	0x2000773c
 800b7e4:	200077a4 	.word	0x200077a4
 800b7e8:	2000780c 	.word	0x2000780c

0800b7ec <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800b7ec:	b580      	push	{r7, lr}
 800b7ee:	b082      	sub	sp, #8
 800b7f0:	af00      	add	r7, sp, #0
 800b7f2:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800b7f4:	f001 fa98 	bl	800cd28 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800b7f8:	4b2d      	ldr	r3, [pc, #180]	@ (800b8b0 <prvAddNewTaskToReadyList+0xc4>)
 800b7fa:	681b      	ldr	r3, [r3, #0]
 800b7fc:	3301      	adds	r3, #1
 800b7fe:	4a2c      	ldr	r2, [pc, #176]	@ (800b8b0 <prvAddNewTaskToReadyList+0xc4>)
 800b800:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800b802:	4b2c      	ldr	r3, [pc, #176]	@ (800b8b4 <prvAddNewTaskToReadyList+0xc8>)
 800b804:	681b      	ldr	r3, [r3, #0]
 800b806:	2b00      	cmp	r3, #0
 800b808:	d109      	bne.n	800b81e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800b80a:	4a2a      	ldr	r2, [pc, #168]	@ (800b8b4 <prvAddNewTaskToReadyList+0xc8>)
 800b80c:	687b      	ldr	r3, [r7, #4]
 800b80e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800b810:	4b27      	ldr	r3, [pc, #156]	@ (800b8b0 <prvAddNewTaskToReadyList+0xc4>)
 800b812:	681b      	ldr	r3, [r3, #0]
 800b814:	2b01      	cmp	r3, #1
 800b816:	d110      	bne.n	800b83a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800b818:	f000 fc56 	bl	800c0c8 <prvInitialiseTaskLists>
 800b81c:	e00d      	b.n	800b83a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800b81e:	4b26      	ldr	r3, [pc, #152]	@ (800b8b8 <prvAddNewTaskToReadyList+0xcc>)
 800b820:	681b      	ldr	r3, [r3, #0]
 800b822:	2b00      	cmp	r3, #0
 800b824:	d109      	bne.n	800b83a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800b826:	4b23      	ldr	r3, [pc, #140]	@ (800b8b4 <prvAddNewTaskToReadyList+0xc8>)
 800b828:	681b      	ldr	r3, [r3, #0]
 800b82a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b82c:	687b      	ldr	r3, [r7, #4]
 800b82e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b830:	429a      	cmp	r2, r3
 800b832:	d802      	bhi.n	800b83a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800b834:	4a1f      	ldr	r2, [pc, #124]	@ (800b8b4 <prvAddNewTaskToReadyList+0xc8>)
 800b836:	687b      	ldr	r3, [r7, #4]
 800b838:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800b83a:	4b20      	ldr	r3, [pc, #128]	@ (800b8bc <prvAddNewTaskToReadyList+0xd0>)
 800b83c:	681b      	ldr	r3, [r3, #0]
 800b83e:	3301      	adds	r3, #1
 800b840:	4a1e      	ldr	r2, [pc, #120]	@ (800b8bc <prvAddNewTaskToReadyList+0xd0>)
 800b842:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800b844:	4b1d      	ldr	r3, [pc, #116]	@ (800b8bc <prvAddNewTaskToReadyList+0xd0>)
 800b846:	681a      	ldr	r2, [r3, #0]
 800b848:	687b      	ldr	r3, [r7, #4]
 800b84a:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800b84c:	687b      	ldr	r3, [r7, #4]
 800b84e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b850:	4b1b      	ldr	r3, [pc, #108]	@ (800b8c0 <prvAddNewTaskToReadyList+0xd4>)
 800b852:	681b      	ldr	r3, [r3, #0]
 800b854:	429a      	cmp	r2, r3
 800b856:	d903      	bls.n	800b860 <prvAddNewTaskToReadyList+0x74>
 800b858:	687b      	ldr	r3, [r7, #4]
 800b85a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b85c:	4a18      	ldr	r2, [pc, #96]	@ (800b8c0 <prvAddNewTaskToReadyList+0xd4>)
 800b85e:	6013      	str	r3, [r2, #0]
 800b860:	687b      	ldr	r3, [r7, #4]
 800b862:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b864:	4613      	mov	r3, r2
 800b866:	009b      	lsls	r3, r3, #2
 800b868:	4413      	add	r3, r2
 800b86a:	009b      	lsls	r3, r3, #2
 800b86c:	4a15      	ldr	r2, [pc, #84]	@ (800b8c4 <prvAddNewTaskToReadyList+0xd8>)
 800b86e:	441a      	add	r2, r3
 800b870:	687b      	ldr	r3, [r7, #4]
 800b872:	3304      	adds	r3, #4
 800b874:	4619      	mov	r1, r3
 800b876:	4610      	mov	r0, r2
 800b878:	f7ff f8e9 	bl	800aa4e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800b87c:	f001 fa86 	bl	800cd8c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800b880:	4b0d      	ldr	r3, [pc, #52]	@ (800b8b8 <prvAddNewTaskToReadyList+0xcc>)
 800b882:	681b      	ldr	r3, [r3, #0]
 800b884:	2b00      	cmp	r3, #0
 800b886:	d00e      	beq.n	800b8a6 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800b888:	4b0a      	ldr	r3, [pc, #40]	@ (800b8b4 <prvAddNewTaskToReadyList+0xc8>)
 800b88a:	681b      	ldr	r3, [r3, #0]
 800b88c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b88e:	687b      	ldr	r3, [r7, #4]
 800b890:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b892:	429a      	cmp	r2, r3
 800b894:	d207      	bcs.n	800b8a6 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800b896:	4b0c      	ldr	r3, [pc, #48]	@ (800b8c8 <prvAddNewTaskToReadyList+0xdc>)
 800b898:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b89c:	601a      	str	r2, [r3, #0]
 800b89e:	f3bf 8f4f 	dsb	sy
 800b8a2:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800b8a6:	bf00      	nop
 800b8a8:	3708      	adds	r7, #8
 800b8aa:	46bd      	mov	sp, r7
 800b8ac:	bd80      	pop	{r7, pc}
 800b8ae:	bf00      	nop
 800b8b0:	20006804 	.word	0x20006804
 800b8b4:	20006330 	.word	0x20006330
 800b8b8:	20006810 	.word	0x20006810
 800b8bc:	20006820 	.word	0x20006820
 800b8c0:	2000680c 	.word	0x2000680c
 800b8c4:	20006334 	.word	0x20006334
 800b8c8:	e000ed04 	.word	0xe000ed04

0800b8cc <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800b8cc:	b580      	push	{r7, lr}
 800b8ce:	b084      	sub	sp, #16
 800b8d0:	af00      	add	r7, sp, #0
 800b8d2:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800b8d4:	2300      	movs	r3, #0
 800b8d6:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800b8d8:	687b      	ldr	r3, [r7, #4]
 800b8da:	2b00      	cmp	r3, #0
 800b8dc:	d018      	beq.n	800b910 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800b8de:	4b14      	ldr	r3, [pc, #80]	@ (800b930 <vTaskDelay+0x64>)
 800b8e0:	681b      	ldr	r3, [r3, #0]
 800b8e2:	2b00      	cmp	r3, #0
 800b8e4:	d00b      	beq.n	800b8fe <vTaskDelay+0x32>
	__asm volatile
 800b8e6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b8ea:	f383 8811 	msr	BASEPRI, r3
 800b8ee:	f3bf 8f6f 	isb	sy
 800b8f2:	f3bf 8f4f 	dsb	sy
 800b8f6:	60bb      	str	r3, [r7, #8]
}
 800b8f8:	bf00      	nop
 800b8fa:	bf00      	nop
 800b8fc:	e7fd      	b.n	800b8fa <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800b8fe:	f000 f88b 	bl	800ba18 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800b902:	2100      	movs	r1, #0
 800b904:	6878      	ldr	r0, [r7, #4]
 800b906:	f000 fd31 	bl	800c36c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800b90a:	f000 f893 	bl	800ba34 <xTaskResumeAll>
 800b90e:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800b910:	68fb      	ldr	r3, [r7, #12]
 800b912:	2b00      	cmp	r3, #0
 800b914:	d107      	bne.n	800b926 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 800b916:	4b07      	ldr	r3, [pc, #28]	@ (800b934 <vTaskDelay+0x68>)
 800b918:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b91c:	601a      	str	r2, [r3, #0]
 800b91e:	f3bf 8f4f 	dsb	sy
 800b922:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800b926:	bf00      	nop
 800b928:	3710      	adds	r7, #16
 800b92a:	46bd      	mov	sp, r7
 800b92c:	bd80      	pop	{r7, pc}
 800b92e:	bf00      	nop
 800b930:	2000682c 	.word	0x2000682c
 800b934:	e000ed04 	.word	0xe000ed04

0800b938 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800b938:	b580      	push	{r7, lr}
 800b93a:	b08a      	sub	sp, #40	@ 0x28
 800b93c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800b93e:	2300      	movs	r3, #0
 800b940:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800b942:	2300      	movs	r3, #0
 800b944:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800b946:	463a      	mov	r2, r7
 800b948:	1d39      	adds	r1, r7, #4
 800b94a:	f107 0308 	add.w	r3, r7, #8
 800b94e:	4618      	mov	r0, r3
 800b950:	f7ff f81c 	bl	800a98c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800b954:	6839      	ldr	r1, [r7, #0]
 800b956:	687b      	ldr	r3, [r7, #4]
 800b958:	68ba      	ldr	r2, [r7, #8]
 800b95a:	9202      	str	r2, [sp, #8]
 800b95c:	9301      	str	r3, [sp, #4]
 800b95e:	2300      	movs	r3, #0
 800b960:	9300      	str	r3, [sp, #0]
 800b962:	2300      	movs	r3, #0
 800b964:	460a      	mov	r2, r1
 800b966:	4924      	ldr	r1, [pc, #144]	@ (800b9f8 <vTaskStartScheduler+0xc0>)
 800b968:	4824      	ldr	r0, [pc, #144]	@ (800b9fc <vTaskStartScheduler+0xc4>)
 800b96a:	f7ff fdf1 	bl	800b550 <xTaskCreateStatic>
 800b96e:	4603      	mov	r3, r0
 800b970:	4a23      	ldr	r2, [pc, #140]	@ (800ba00 <vTaskStartScheduler+0xc8>)
 800b972:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800b974:	4b22      	ldr	r3, [pc, #136]	@ (800ba00 <vTaskStartScheduler+0xc8>)
 800b976:	681b      	ldr	r3, [r3, #0]
 800b978:	2b00      	cmp	r3, #0
 800b97a:	d002      	beq.n	800b982 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800b97c:	2301      	movs	r3, #1
 800b97e:	617b      	str	r3, [r7, #20]
 800b980:	e001      	b.n	800b986 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800b982:	2300      	movs	r3, #0
 800b984:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800b986:	697b      	ldr	r3, [r7, #20]
 800b988:	2b01      	cmp	r3, #1
 800b98a:	d102      	bne.n	800b992 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800b98c:	f000 fd42 	bl	800c414 <xTimerCreateTimerTask>
 800b990:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800b992:	697b      	ldr	r3, [r7, #20]
 800b994:	2b01      	cmp	r3, #1
 800b996:	d11b      	bne.n	800b9d0 <vTaskStartScheduler+0x98>
	__asm volatile
 800b998:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b99c:	f383 8811 	msr	BASEPRI, r3
 800b9a0:	f3bf 8f6f 	isb	sy
 800b9a4:	f3bf 8f4f 	dsb	sy
 800b9a8:	613b      	str	r3, [r7, #16]
}
 800b9aa:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800b9ac:	4b15      	ldr	r3, [pc, #84]	@ (800ba04 <vTaskStartScheduler+0xcc>)
 800b9ae:	681b      	ldr	r3, [r3, #0]
 800b9b0:	3354      	adds	r3, #84	@ 0x54
 800b9b2:	4a15      	ldr	r2, [pc, #84]	@ (800ba08 <vTaskStartScheduler+0xd0>)
 800b9b4:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800b9b6:	4b15      	ldr	r3, [pc, #84]	@ (800ba0c <vTaskStartScheduler+0xd4>)
 800b9b8:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800b9bc:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800b9be:	4b14      	ldr	r3, [pc, #80]	@ (800ba10 <vTaskStartScheduler+0xd8>)
 800b9c0:	2201      	movs	r2, #1
 800b9c2:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800b9c4:	4b13      	ldr	r3, [pc, #76]	@ (800ba14 <vTaskStartScheduler+0xdc>)
 800b9c6:	2200      	movs	r2, #0
 800b9c8:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800b9ca:	f001 f909 	bl	800cbe0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800b9ce:	e00f      	b.n	800b9f0 <vTaskStartScheduler+0xb8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800b9d0:	697b      	ldr	r3, [r7, #20]
 800b9d2:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800b9d6:	d10b      	bne.n	800b9f0 <vTaskStartScheduler+0xb8>
	__asm volatile
 800b9d8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b9dc:	f383 8811 	msr	BASEPRI, r3
 800b9e0:	f3bf 8f6f 	isb	sy
 800b9e4:	f3bf 8f4f 	dsb	sy
 800b9e8:	60fb      	str	r3, [r7, #12]
}
 800b9ea:	bf00      	nop
 800b9ec:	bf00      	nop
 800b9ee:	e7fd      	b.n	800b9ec <vTaskStartScheduler+0xb4>
}
 800b9f0:	bf00      	nop
 800b9f2:	3718      	adds	r7, #24
 800b9f4:	46bd      	mov	sp, r7
 800b9f6:	bd80      	pop	{r7, pc}
 800b9f8:	0801bb5c 	.word	0x0801bb5c
 800b9fc:	0800c099 	.word	0x0800c099
 800ba00:	20006828 	.word	0x20006828
 800ba04:	20006330 	.word	0x20006330
 800ba08:	20000104 	.word	0x20000104
 800ba0c:	20006824 	.word	0x20006824
 800ba10:	20006810 	.word	0x20006810
 800ba14:	20006808 	.word	0x20006808

0800ba18 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800ba18:	b480      	push	{r7}
 800ba1a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800ba1c:	4b04      	ldr	r3, [pc, #16]	@ (800ba30 <vTaskSuspendAll+0x18>)
 800ba1e:	681b      	ldr	r3, [r3, #0]
 800ba20:	3301      	adds	r3, #1
 800ba22:	4a03      	ldr	r2, [pc, #12]	@ (800ba30 <vTaskSuspendAll+0x18>)
 800ba24:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800ba26:	bf00      	nop
 800ba28:	46bd      	mov	sp, r7
 800ba2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba2e:	4770      	bx	lr
 800ba30:	2000682c 	.word	0x2000682c

0800ba34 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800ba34:	b580      	push	{r7, lr}
 800ba36:	b084      	sub	sp, #16
 800ba38:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800ba3a:	2300      	movs	r3, #0
 800ba3c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800ba3e:	2300      	movs	r3, #0
 800ba40:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800ba42:	4b42      	ldr	r3, [pc, #264]	@ (800bb4c <xTaskResumeAll+0x118>)
 800ba44:	681b      	ldr	r3, [r3, #0]
 800ba46:	2b00      	cmp	r3, #0
 800ba48:	d10b      	bne.n	800ba62 <xTaskResumeAll+0x2e>
	__asm volatile
 800ba4a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ba4e:	f383 8811 	msr	BASEPRI, r3
 800ba52:	f3bf 8f6f 	isb	sy
 800ba56:	f3bf 8f4f 	dsb	sy
 800ba5a:	603b      	str	r3, [r7, #0]
}
 800ba5c:	bf00      	nop
 800ba5e:	bf00      	nop
 800ba60:	e7fd      	b.n	800ba5e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800ba62:	f001 f961 	bl	800cd28 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800ba66:	4b39      	ldr	r3, [pc, #228]	@ (800bb4c <xTaskResumeAll+0x118>)
 800ba68:	681b      	ldr	r3, [r3, #0]
 800ba6a:	3b01      	subs	r3, #1
 800ba6c:	4a37      	ldr	r2, [pc, #220]	@ (800bb4c <xTaskResumeAll+0x118>)
 800ba6e:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800ba70:	4b36      	ldr	r3, [pc, #216]	@ (800bb4c <xTaskResumeAll+0x118>)
 800ba72:	681b      	ldr	r3, [r3, #0]
 800ba74:	2b00      	cmp	r3, #0
 800ba76:	d162      	bne.n	800bb3e <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800ba78:	4b35      	ldr	r3, [pc, #212]	@ (800bb50 <xTaskResumeAll+0x11c>)
 800ba7a:	681b      	ldr	r3, [r3, #0]
 800ba7c:	2b00      	cmp	r3, #0
 800ba7e:	d05e      	beq.n	800bb3e <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800ba80:	e02f      	b.n	800bae2 <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ba82:	4b34      	ldr	r3, [pc, #208]	@ (800bb54 <xTaskResumeAll+0x120>)
 800ba84:	68db      	ldr	r3, [r3, #12]
 800ba86:	68db      	ldr	r3, [r3, #12]
 800ba88:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800ba8a:	68fb      	ldr	r3, [r7, #12]
 800ba8c:	3318      	adds	r3, #24
 800ba8e:	4618      	mov	r0, r3
 800ba90:	f7ff f83a 	bl	800ab08 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800ba94:	68fb      	ldr	r3, [r7, #12]
 800ba96:	3304      	adds	r3, #4
 800ba98:	4618      	mov	r0, r3
 800ba9a:	f7ff f835 	bl	800ab08 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800ba9e:	68fb      	ldr	r3, [r7, #12]
 800baa0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800baa2:	4b2d      	ldr	r3, [pc, #180]	@ (800bb58 <xTaskResumeAll+0x124>)
 800baa4:	681b      	ldr	r3, [r3, #0]
 800baa6:	429a      	cmp	r2, r3
 800baa8:	d903      	bls.n	800bab2 <xTaskResumeAll+0x7e>
 800baaa:	68fb      	ldr	r3, [r7, #12]
 800baac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800baae:	4a2a      	ldr	r2, [pc, #168]	@ (800bb58 <xTaskResumeAll+0x124>)
 800bab0:	6013      	str	r3, [r2, #0]
 800bab2:	68fb      	ldr	r3, [r7, #12]
 800bab4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800bab6:	4613      	mov	r3, r2
 800bab8:	009b      	lsls	r3, r3, #2
 800baba:	4413      	add	r3, r2
 800babc:	009b      	lsls	r3, r3, #2
 800babe:	4a27      	ldr	r2, [pc, #156]	@ (800bb5c <xTaskResumeAll+0x128>)
 800bac0:	441a      	add	r2, r3
 800bac2:	68fb      	ldr	r3, [r7, #12]
 800bac4:	3304      	adds	r3, #4
 800bac6:	4619      	mov	r1, r3
 800bac8:	4610      	mov	r0, r2
 800baca:	f7fe ffc0 	bl	800aa4e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800bace:	68fb      	ldr	r3, [r7, #12]
 800bad0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800bad2:	4b23      	ldr	r3, [pc, #140]	@ (800bb60 <xTaskResumeAll+0x12c>)
 800bad4:	681b      	ldr	r3, [r3, #0]
 800bad6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bad8:	429a      	cmp	r2, r3
 800bada:	d302      	bcc.n	800bae2 <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 800badc:	4b21      	ldr	r3, [pc, #132]	@ (800bb64 <xTaskResumeAll+0x130>)
 800bade:	2201      	movs	r2, #1
 800bae0:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800bae2:	4b1c      	ldr	r3, [pc, #112]	@ (800bb54 <xTaskResumeAll+0x120>)
 800bae4:	681b      	ldr	r3, [r3, #0]
 800bae6:	2b00      	cmp	r3, #0
 800bae8:	d1cb      	bne.n	800ba82 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800baea:	68fb      	ldr	r3, [r7, #12]
 800baec:	2b00      	cmp	r3, #0
 800baee:	d001      	beq.n	800baf4 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800baf0:	f000 fb8e 	bl	800c210 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800baf4:	4b1c      	ldr	r3, [pc, #112]	@ (800bb68 <xTaskResumeAll+0x134>)
 800baf6:	681b      	ldr	r3, [r3, #0]
 800baf8:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800bafa:	687b      	ldr	r3, [r7, #4]
 800bafc:	2b00      	cmp	r3, #0
 800bafe:	d010      	beq.n	800bb22 <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800bb00:	f000 f846 	bl	800bb90 <xTaskIncrementTick>
 800bb04:	4603      	mov	r3, r0
 800bb06:	2b00      	cmp	r3, #0
 800bb08:	d002      	beq.n	800bb10 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 800bb0a:	4b16      	ldr	r3, [pc, #88]	@ (800bb64 <xTaskResumeAll+0x130>)
 800bb0c:	2201      	movs	r2, #1
 800bb0e:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800bb10:	687b      	ldr	r3, [r7, #4]
 800bb12:	3b01      	subs	r3, #1
 800bb14:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800bb16:	687b      	ldr	r3, [r7, #4]
 800bb18:	2b00      	cmp	r3, #0
 800bb1a:	d1f1      	bne.n	800bb00 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 800bb1c:	4b12      	ldr	r3, [pc, #72]	@ (800bb68 <xTaskResumeAll+0x134>)
 800bb1e:	2200      	movs	r2, #0
 800bb20:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800bb22:	4b10      	ldr	r3, [pc, #64]	@ (800bb64 <xTaskResumeAll+0x130>)
 800bb24:	681b      	ldr	r3, [r3, #0]
 800bb26:	2b00      	cmp	r3, #0
 800bb28:	d009      	beq.n	800bb3e <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800bb2a:	2301      	movs	r3, #1
 800bb2c:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800bb2e:	4b0f      	ldr	r3, [pc, #60]	@ (800bb6c <xTaskResumeAll+0x138>)
 800bb30:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800bb34:	601a      	str	r2, [r3, #0]
 800bb36:	f3bf 8f4f 	dsb	sy
 800bb3a:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800bb3e:	f001 f925 	bl	800cd8c <vPortExitCritical>

	return xAlreadyYielded;
 800bb42:	68bb      	ldr	r3, [r7, #8]
}
 800bb44:	4618      	mov	r0, r3
 800bb46:	3710      	adds	r7, #16
 800bb48:	46bd      	mov	sp, r7
 800bb4a:	bd80      	pop	{r7, pc}
 800bb4c:	2000682c 	.word	0x2000682c
 800bb50:	20006804 	.word	0x20006804
 800bb54:	200067c4 	.word	0x200067c4
 800bb58:	2000680c 	.word	0x2000680c
 800bb5c:	20006334 	.word	0x20006334
 800bb60:	20006330 	.word	0x20006330
 800bb64:	20006818 	.word	0x20006818
 800bb68:	20006814 	.word	0x20006814
 800bb6c:	e000ed04 	.word	0xe000ed04

0800bb70 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800bb70:	b480      	push	{r7}
 800bb72:	b083      	sub	sp, #12
 800bb74:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800bb76:	4b05      	ldr	r3, [pc, #20]	@ (800bb8c <xTaskGetTickCount+0x1c>)
 800bb78:	681b      	ldr	r3, [r3, #0]
 800bb7a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800bb7c:	687b      	ldr	r3, [r7, #4]
}
 800bb7e:	4618      	mov	r0, r3
 800bb80:	370c      	adds	r7, #12
 800bb82:	46bd      	mov	sp, r7
 800bb84:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb88:	4770      	bx	lr
 800bb8a:	bf00      	nop
 800bb8c:	20006808 	.word	0x20006808

0800bb90 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800bb90:	b580      	push	{r7, lr}
 800bb92:	b086      	sub	sp, #24
 800bb94:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800bb96:	2300      	movs	r3, #0
 800bb98:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800bb9a:	4b4f      	ldr	r3, [pc, #316]	@ (800bcd8 <xTaskIncrementTick+0x148>)
 800bb9c:	681b      	ldr	r3, [r3, #0]
 800bb9e:	2b00      	cmp	r3, #0
 800bba0:	f040 8090 	bne.w	800bcc4 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800bba4:	4b4d      	ldr	r3, [pc, #308]	@ (800bcdc <xTaskIncrementTick+0x14c>)
 800bba6:	681b      	ldr	r3, [r3, #0]
 800bba8:	3301      	adds	r3, #1
 800bbaa:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800bbac:	4a4b      	ldr	r2, [pc, #300]	@ (800bcdc <xTaskIncrementTick+0x14c>)
 800bbae:	693b      	ldr	r3, [r7, #16]
 800bbb0:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800bbb2:	693b      	ldr	r3, [r7, #16]
 800bbb4:	2b00      	cmp	r3, #0
 800bbb6:	d121      	bne.n	800bbfc <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 800bbb8:	4b49      	ldr	r3, [pc, #292]	@ (800bce0 <xTaskIncrementTick+0x150>)
 800bbba:	681b      	ldr	r3, [r3, #0]
 800bbbc:	681b      	ldr	r3, [r3, #0]
 800bbbe:	2b00      	cmp	r3, #0
 800bbc0:	d00b      	beq.n	800bbda <xTaskIncrementTick+0x4a>
	__asm volatile
 800bbc2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bbc6:	f383 8811 	msr	BASEPRI, r3
 800bbca:	f3bf 8f6f 	isb	sy
 800bbce:	f3bf 8f4f 	dsb	sy
 800bbd2:	603b      	str	r3, [r7, #0]
}
 800bbd4:	bf00      	nop
 800bbd6:	bf00      	nop
 800bbd8:	e7fd      	b.n	800bbd6 <xTaskIncrementTick+0x46>
 800bbda:	4b41      	ldr	r3, [pc, #260]	@ (800bce0 <xTaskIncrementTick+0x150>)
 800bbdc:	681b      	ldr	r3, [r3, #0]
 800bbde:	60fb      	str	r3, [r7, #12]
 800bbe0:	4b40      	ldr	r3, [pc, #256]	@ (800bce4 <xTaskIncrementTick+0x154>)
 800bbe2:	681b      	ldr	r3, [r3, #0]
 800bbe4:	4a3e      	ldr	r2, [pc, #248]	@ (800bce0 <xTaskIncrementTick+0x150>)
 800bbe6:	6013      	str	r3, [r2, #0]
 800bbe8:	4a3e      	ldr	r2, [pc, #248]	@ (800bce4 <xTaskIncrementTick+0x154>)
 800bbea:	68fb      	ldr	r3, [r7, #12]
 800bbec:	6013      	str	r3, [r2, #0]
 800bbee:	4b3e      	ldr	r3, [pc, #248]	@ (800bce8 <xTaskIncrementTick+0x158>)
 800bbf0:	681b      	ldr	r3, [r3, #0]
 800bbf2:	3301      	adds	r3, #1
 800bbf4:	4a3c      	ldr	r2, [pc, #240]	@ (800bce8 <xTaskIncrementTick+0x158>)
 800bbf6:	6013      	str	r3, [r2, #0]
 800bbf8:	f000 fb0a 	bl	800c210 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800bbfc:	4b3b      	ldr	r3, [pc, #236]	@ (800bcec <xTaskIncrementTick+0x15c>)
 800bbfe:	681b      	ldr	r3, [r3, #0]
 800bc00:	693a      	ldr	r2, [r7, #16]
 800bc02:	429a      	cmp	r2, r3
 800bc04:	d349      	bcc.n	800bc9a <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800bc06:	4b36      	ldr	r3, [pc, #216]	@ (800bce0 <xTaskIncrementTick+0x150>)
 800bc08:	681b      	ldr	r3, [r3, #0]
 800bc0a:	681b      	ldr	r3, [r3, #0]
 800bc0c:	2b00      	cmp	r3, #0
 800bc0e:	d104      	bne.n	800bc1a <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800bc10:	4b36      	ldr	r3, [pc, #216]	@ (800bcec <xTaskIncrementTick+0x15c>)
 800bc12:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800bc16:	601a      	str	r2, [r3, #0]
					break;
 800bc18:	e03f      	b.n	800bc9a <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bc1a:	4b31      	ldr	r3, [pc, #196]	@ (800bce0 <xTaskIncrementTick+0x150>)
 800bc1c:	681b      	ldr	r3, [r3, #0]
 800bc1e:	68db      	ldr	r3, [r3, #12]
 800bc20:	68db      	ldr	r3, [r3, #12]
 800bc22:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800bc24:	68bb      	ldr	r3, [r7, #8]
 800bc26:	685b      	ldr	r3, [r3, #4]
 800bc28:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800bc2a:	693a      	ldr	r2, [r7, #16]
 800bc2c:	687b      	ldr	r3, [r7, #4]
 800bc2e:	429a      	cmp	r2, r3
 800bc30:	d203      	bcs.n	800bc3a <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800bc32:	4a2e      	ldr	r2, [pc, #184]	@ (800bcec <xTaskIncrementTick+0x15c>)
 800bc34:	687b      	ldr	r3, [r7, #4]
 800bc36:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800bc38:	e02f      	b.n	800bc9a <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800bc3a:	68bb      	ldr	r3, [r7, #8]
 800bc3c:	3304      	adds	r3, #4
 800bc3e:	4618      	mov	r0, r3
 800bc40:	f7fe ff62 	bl	800ab08 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800bc44:	68bb      	ldr	r3, [r7, #8]
 800bc46:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bc48:	2b00      	cmp	r3, #0
 800bc4a:	d004      	beq.n	800bc56 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800bc4c:	68bb      	ldr	r3, [r7, #8]
 800bc4e:	3318      	adds	r3, #24
 800bc50:	4618      	mov	r0, r3
 800bc52:	f7fe ff59 	bl	800ab08 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800bc56:	68bb      	ldr	r3, [r7, #8]
 800bc58:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800bc5a:	4b25      	ldr	r3, [pc, #148]	@ (800bcf0 <xTaskIncrementTick+0x160>)
 800bc5c:	681b      	ldr	r3, [r3, #0]
 800bc5e:	429a      	cmp	r2, r3
 800bc60:	d903      	bls.n	800bc6a <xTaskIncrementTick+0xda>
 800bc62:	68bb      	ldr	r3, [r7, #8]
 800bc64:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bc66:	4a22      	ldr	r2, [pc, #136]	@ (800bcf0 <xTaskIncrementTick+0x160>)
 800bc68:	6013      	str	r3, [r2, #0]
 800bc6a:	68bb      	ldr	r3, [r7, #8]
 800bc6c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800bc6e:	4613      	mov	r3, r2
 800bc70:	009b      	lsls	r3, r3, #2
 800bc72:	4413      	add	r3, r2
 800bc74:	009b      	lsls	r3, r3, #2
 800bc76:	4a1f      	ldr	r2, [pc, #124]	@ (800bcf4 <xTaskIncrementTick+0x164>)
 800bc78:	441a      	add	r2, r3
 800bc7a:	68bb      	ldr	r3, [r7, #8]
 800bc7c:	3304      	adds	r3, #4
 800bc7e:	4619      	mov	r1, r3
 800bc80:	4610      	mov	r0, r2
 800bc82:	f7fe fee4 	bl	800aa4e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800bc86:	68bb      	ldr	r3, [r7, #8]
 800bc88:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800bc8a:	4b1b      	ldr	r3, [pc, #108]	@ (800bcf8 <xTaskIncrementTick+0x168>)
 800bc8c:	681b      	ldr	r3, [r3, #0]
 800bc8e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bc90:	429a      	cmp	r2, r3
 800bc92:	d3b8      	bcc.n	800bc06 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 800bc94:	2301      	movs	r3, #1
 800bc96:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800bc98:	e7b5      	b.n	800bc06 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800bc9a:	4b17      	ldr	r3, [pc, #92]	@ (800bcf8 <xTaskIncrementTick+0x168>)
 800bc9c:	681b      	ldr	r3, [r3, #0]
 800bc9e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800bca0:	4914      	ldr	r1, [pc, #80]	@ (800bcf4 <xTaskIncrementTick+0x164>)
 800bca2:	4613      	mov	r3, r2
 800bca4:	009b      	lsls	r3, r3, #2
 800bca6:	4413      	add	r3, r2
 800bca8:	009b      	lsls	r3, r3, #2
 800bcaa:	440b      	add	r3, r1
 800bcac:	681b      	ldr	r3, [r3, #0]
 800bcae:	2b01      	cmp	r3, #1
 800bcb0:	d901      	bls.n	800bcb6 <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 800bcb2:	2301      	movs	r3, #1
 800bcb4:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800bcb6:	4b11      	ldr	r3, [pc, #68]	@ (800bcfc <xTaskIncrementTick+0x16c>)
 800bcb8:	681b      	ldr	r3, [r3, #0]
 800bcba:	2b00      	cmp	r3, #0
 800bcbc:	d007      	beq.n	800bcce <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 800bcbe:	2301      	movs	r3, #1
 800bcc0:	617b      	str	r3, [r7, #20]
 800bcc2:	e004      	b.n	800bcce <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800bcc4:	4b0e      	ldr	r3, [pc, #56]	@ (800bd00 <xTaskIncrementTick+0x170>)
 800bcc6:	681b      	ldr	r3, [r3, #0]
 800bcc8:	3301      	adds	r3, #1
 800bcca:	4a0d      	ldr	r2, [pc, #52]	@ (800bd00 <xTaskIncrementTick+0x170>)
 800bccc:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800bcce:	697b      	ldr	r3, [r7, #20]
}
 800bcd0:	4618      	mov	r0, r3
 800bcd2:	3718      	adds	r7, #24
 800bcd4:	46bd      	mov	sp, r7
 800bcd6:	bd80      	pop	{r7, pc}
 800bcd8:	2000682c 	.word	0x2000682c
 800bcdc:	20006808 	.word	0x20006808
 800bce0:	200067bc 	.word	0x200067bc
 800bce4:	200067c0 	.word	0x200067c0
 800bce8:	2000681c 	.word	0x2000681c
 800bcec:	20006824 	.word	0x20006824
 800bcf0:	2000680c 	.word	0x2000680c
 800bcf4:	20006334 	.word	0x20006334
 800bcf8:	20006330 	.word	0x20006330
 800bcfc:	20006818 	.word	0x20006818
 800bd00:	20006814 	.word	0x20006814

0800bd04 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800bd04:	b480      	push	{r7}
 800bd06:	b085      	sub	sp, #20
 800bd08:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800bd0a:	4b2b      	ldr	r3, [pc, #172]	@ (800bdb8 <vTaskSwitchContext+0xb4>)
 800bd0c:	681b      	ldr	r3, [r3, #0]
 800bd0e:	2b00      	cmp	r3, #0
 800bd10:	d003      	beq.n	800bd1a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800bd12:	4b2a      	ldr	r3, [pc, #168]	@ (800bdbc <vTaskSwitchContext+0xb8>)
 800bd14:	2201      	movs	r2, #1
 800bd16:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800bd18:	e047      	b.n	800bdaa <vTaskSwitchContext+0xa6>
		xYieldPending = pdFALSE;
 800bd1a:	4b28      	ldr	r3, [pc, #160]	@ (800bdbc <vTaskSwitchContext+0xb8>)
 800bd1c:	2200      	movs	r2, #0
 800bd1e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bd20:	4b27      	ldr	r3, [pc, #156]	@ (800bdc0 <vTaskSwitchContext+0xbc>)
 800bd22:	681b      	ldr	r3, [r3, #0]
 800bd24:	60fb      	str	r3, [r7, #12]
 800bd26:	e011      	b.n	800bd4c <vTaskSwitchContext+0x48>
 800bd28:	68fb      	ldr	r3, [r7, #12]
 800bd2a:	2b00      	cmp	r3, #0
 800bd2c:	d10b      	bne.n	800bd46 <vTaskSwitchContext+0x42>
	__asm volatile
 800bd2e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bd32:	f383 8811 	msr	BASEPRI, r3
 800bd36:	f3bf 8f6f 	isb	sy
 800bd3a:	f3bf 8f4f 	dsb	sy
 800bd3e:	607b      	str	r3, [r7, #4]
}
 800bd40:	bf00      	nop
 800bd42:	bf00      	nop
 800bd44:	e7fd      	b.n	800bd42 <vTaskSwitchContext+0x3e>
 800bd46:	68fb      	ldr	r3, [r7, #12]
 800bd48:	3b01      	subs	r3, #1
 800bd4a:	60fb      	str	r3, [r7, #12]
 800bd4c:	491d      	ldr	r1, [pc, #116]	@ (800bdc4 <vTaskSwitchContext+0xc0>)
 800bd4e:	68fa      	ldr	r2, [r7, #12]
 800bd50:	4613      	mov	r3, r2
 800bd52:	009b      	lsls	r3, r3, #2
 800bd54:	4413      	add	r3, r2
 800bd56:	009b      	lsls	r3, r3, #2
 800bd58:	440b      	add	r3, r1
 800bd5a:	681b      	ldr	r3, [r3, #0]
 800bd5c:	2b00      	cmp	r3, #0
 800bd5e:	d0e3      	beq.n	800bd28 <vTaskSwitchContext+0x24>
 800bd60:	68fa      	ldr	r2, [r7, #12]
 800bd62:	4613      	mov	r3, r2
 800bd64:	009b      	lsls	r3, r3, #2
 800bd66:	4413      	add	r3, r2
 800bd68:	009b      	lsls	r3, r3, #2
 800bd6a:	4a16      	ldr	r2, [pc, #88]	@ (800bdc4 <vTaskSwitchContext+0xc0>)
 800bd6c:	4413      	add	r3, r2
 800bd6e:	60bb      	str	r3, [r7, #8]
 800bd70:	68bb      	ldr	r3, [r7, #8]
 800bd72:	685b      	ldr	r3, [r3, #4]
 800bd74:	685a      	ldr	r2, [r3, #4]
 800bd76:	68bb      	ldr	r3, [r7, #8]
 800bd78:	605a      	str	r2, [r3, #4]
 800bd7a:	68bb      	ldr	r3, [r7, #8]
 800bd7c:	685a      	ldr	r2, [r3, #4]
 800bd7e:	68bb      	ldr	r3, [r7, #8]
 800bd80:	3308      	adds	r3, #8
 800bd82:	429a      	cmp	r2, r3
 800bd84:	d104      	bne.n	800bd90 <vTaskSwitchContext+0x8c>
 800bd86:	68bb      	ldr	r3, [r7, #8]
 800bd88:	685b      	ldr	r3, [r3, #4]
 800bd8a:	685a      	ldr	r2, [r3, #4]
 800bd8c:	68bb      	ldr	r3, [r7, #8]
 800bd8e:	605a      	str	r2, [r3, #4]
 800bd90:	68bb      	ldr	r3, [r7, #8]
 800bd92:	685b      	ldr	r3, [r3, #4]
 800bd94:	68db      	ldr	r3, [r3, #12]
 800bd96:	4a0c      	ldr	r2, [pc, #48]	@ (800bdc8 <vTaskSwitchContext+0xc4>)
 800bd98:	6013      	str	r3, [r2, #0]
 800bd9a:	4a09      	ldr	r2, [pc, #36]	@ (800bdc0 <vTaskSwitchContext+0xbc>)
 800bd9c:	68fb      	ldr	r3, [r7, #12]
 800bd9e:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800bda0:	4b09      	ldr	r3, [pc, #36]	@ (800bdc8 <vTaskSwitchContext+0xc4>)
 800bda2:	681b      	ldr	r3, [r3, #0]
 800bda4:	3354      	adds	r3, #84	@ 0x54
 800bda6:	4a09      	ldr	r2, [pc, #36]	@ (800bdcc <vTaskSwitchContext+0xc8>)
 800bda8:	6013      	str	r3, [r2, #0]
}
 800bdaa:	bf00      	nop
 800bdac:	3714      	adds	r7, #20
 800bdae:	46bd      	mov	sp, r7
 800bdb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdb4:	4770      	bx	lr
 800bdb6:	bf00      	nop
 800bdb8:	2000682c 	.word	0x2000682c
 800bdbc:	20006818 	.word	0x20006818
 800bdc0:	2000680c 	.word	0x2000680c
 800bdc4:	20006334 	.word	0x20006334
 800bdc8:	20006330 	.word	0x20006330
 800bdcc:	20000104 	.word	0x20000104

0800bdd0 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800bdd0:	b580      	push	{r7, lr}
 800bdd2:	b084      	sub	sp, #16
 800bdd4:	af00      	add	r7, sp, #0
 800bdd6:	6078      	str	r0, [r7, #4]
 800bdd8:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800bdda:	687b      	ldr	r3, [r7, #4]
 800bddc:	2b00      	cmp	r3, #0
 800bdde:	d10b      	bne.n	800bdf8 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 800bde0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bde4:	f383 8811 	msr	BASEPRI, r3
 800bde8:	f3bf 8f6f 	isb	sy
 800bdec:	f3bf 8f4f 	dsb	sy
 800bdf0:	60fb      	str	r3, [r7, #12]
}
 800bdf2:	bf00      	nop
 800bdf4:	bf00      	nop
 800bdf6:	e7fd      	b.n	800bdf4 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800bdf8:	4b07      	ldr	r3, [pc, #28]	@ (800be18 <vTaskPlaceOnEventList+0x48>)
 800bdfa:	681b      	ldr	r3, [r3, #0]
 800bdfc:	3318      	adds	r3, #24
 800bdfe:	4619      	mov	r1, r3
 800be00:	6878      	ldr	r0, [r7, #4]
 800be02:	f7fe fe48 	bl	800aa96 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800be06:	2101      	movs	r1, #1
 800be08:	6838      	ldr	r0, [r7, #0]
 800be0a:	f000 faaf 	bl	800c36c <prvAddCurrentTaskToDelayedList>
}
 800be0e:	bf00      	nop
 800be10:	3710      	adds	r7, #16
 800be12:	46bd      	mov	sp, r7
 800be14:	bd80      	pop	{r7, pc}
 800be16:	bf00      	nop
 800be18:	20006330 	.word	0x20006330

0800be1c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800be1c:	b580      	push	{r7, lr}
 800be1e:	b086      	sub	sp, #24
 800be20:	af00      	add	r7, sp, #0
 800be22:	60f8      	str	r0, [r7, #12]
 800be24:	60b9      	str	r1, [r7, #8]
 800be26:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800be28:	68fb      	ldr	r3, [r7, #12]
 800be2a:	2b00      	cmp	r3, #0
 800be2c:	d10b      	bne.n	800be46 <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 800be2e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800be32:	f383 8811 	msr	BASEPRI, r3
 800be36:	f3bf 8f6f 	isb	sy
 800be3a:	f3bf 8f4f 	dsb	sy
 800be3e:	617b      	str	r3, [r7, #20]
}
 800be40:	bf00      	nop
 800be42:	bf00      	nop
 800be44:	e7fd      	b.n	800be42 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800be46:	4b0a      	ldr	r3, [pc, #40]	@ (800be70 <vTaskPlaceOnEventListRestricted+0x54>)
 800be48:	681b      	ldr	r3, [r3, #0]
 800be4a:	3318      	adds	r3, #24
 800be4c:	4619      	mov	r1, r3
 800be4e:	68f8      	ldr	r0, [r7, #12]
 800be50:	f7fe fdfd 	bl	800aa4e <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800be54:	687b      	ldr	r3, [r7, #4]
 800be56:	2b00      	cmp	r3, #0
 800be58:	d002      	beq.n	800be60 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 800be5a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800be5e:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800be60:	6879      	ldr	r1, [r7, #4]
 800be62:	68b8      	ldr	r0, [r7, #8]
 800be64:	f000 fa82 	bl	800c36c <prvAddCurrentTaskToDelayedList>
	}
 800be68:	bf00      	nop
 800be6a:	3718      	adds	r7, #24
 800be6c:	46bd      	mov	sp, r7
 800be6e:	bd80      	pop	{r7, pc}
 800be70:	20006330 	.word	0x20006330

0800be74 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800be74:	b580      	push	{r7, lr}
 800be76:	b086      	sub	sp, #24
 800be78:	af00      	add	r7, sp, #0
 800be7a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800be7c:	687b      	ldr	r3, [r7, #4]
 800be7e:	68db      	ldr	r3, [r3, #12]
 800be80:	68db      	ldr	r3, [r3, #12]
 800be82:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800be84:	693b      	ldr	r3, [r7, #16]
 800be86:	2b00      	cmp	r3, #0
 800be88:	d10b      	bne.n	800bea2 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 800be8a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800be8e:	f383 8811 	msr	BASEPRI, r3
 800be92:	f3bf 8f6f 	isb	sy
 800be96:	f3bf 8f4f 	dsb	sy
 800be9a:	60fb      	str	r3, [r7, #12]
}
 800be9c:	bf00      	nop
 800be9e:	bf00      	nop
 800bea0:	e7fd      	b.n	800be9e <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800bea2:	693b      	ldr	r3, [r7, #16]
 800bea4:	3318      	adds	r3, #24
 800bea6:	4618      	mov	r0, r3
 800bea8:	f7fe fe2e 	bl	800ab08 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800beac:	4b1d      	ldr	r3, [pc, #116]	@ (800bf24 <xTaskRemoveFromEventList+0xb0>)
 800beae:	681b      	ldr	r3, [r3, #0]
 800beb0:	2b00      	cmp	r3, #0
 800beb2:	d11d      	bne.n	800bef0 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800beb4:	693b      	ldr	r3, [r7, #16]
 800beb6:	3304      	adds	r3, #4
 800beb8:	4618      	mov	r0, r3
 800beba:	f7fe fe25 	bl	800ab08 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800bebe:	693b      	ldr	r3, [r7, #16]
 800bec0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800bec2:	4b19      	ldr	r3, [pc, #100]	@ (800bf28 <xTaskRemoveFromEventList+0xb4>)
 800bec4:	681b      	ldr	r3, [r3, #0]
 800bec6:	429a      	cmp	r2, r3
 800bec8:	d903      	bls.n	800bed2 <xTaskRemoveFromEventList+0x5e>
 800beca:	693b      	ldr	r3, [r7, #16]
 800becc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bece:	4a16      	ldr	r2, [pc, #88]	@ (800bf28 <xTaskRemoveFromEventList+0xb4>)
 800bed0:	6013      	str	r3, [r2, #0]
 800bed2:	693b      	ldr	r3, [r7, #16]
 800bed4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800bed6:	4613      	mov	r3, r2
 800bed8:	009b      	lsls	r3, r3, #2
 800beda:	4413      	add	r3, r2
 800bedc:	009b      	lsls	r3, r3, #2
 800bede:	4a13      	ldr	r2, [pc, #76]	@ (800bf2c <xTaskRemoveFromEventList+0xb8>)
 800bee0:	441a      	add	r2, r3
 800bee2:	693b      	ldr	r3, [r7, #16]
 800bee4:	3304      	adds	r3, #4
 800bee6:	4619      	mov	r1, r3
 800bee8:	4610      	mov	r0, r2
 800beea:	f7fe fdb0 	bl	800aa4e <vListInsertEnd>
 800beee:	e005      	b.n	800befc <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800bef0:	693b      	ldr	r3, [r7, #16]
 800bef2:	3318      	adds	r3, #24
 800bef4:	4619      	mov	r1, r3
 800bef6:	480e      	ldr	r0, [pc, #56]	@ (800bf30 <xTaskRemoveFromEventList+0xbc>)
 800bef8:	f7fe fda9 	bl	800aa4e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800befc:	693b      	ldr	r3, [r7, #16]
 800befe:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800bf00:	4b0c      	ldr	r3, [pc, #48]	@ (800bf34 <xTaskRemoveFromEventList+0xc0>)
 800bf02:	681b      	ldr	r3, [r3, #0]
 800bf04:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bf06:	429a      	cmp	r2, r3
 800bf08:	d905      	bls.n	800bf16 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800bf0a:	2301      	movs	r3, #1
 800bf0c:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800bf0e:	4b0a      	ldr	r3, [pc, #40]	@ (800bf38 <xTaskRemoveFromEventList+0xc4>)
 800bf10:	2201      	movs	r2, #1
 800bf12:	601a      	str	r2, [r3, #0]
 800bf14:	e001      	b.n	800bf1a <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 800bf16:	2300      	movs	r3, #0
 800bf18:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800bf1a:	697b      	ldr	r3, [r7, #20]
}
 800bf1c:	4618      	mov	r0, r3
 800bf1e:	3718      	adds	r7, #24
 800bf20:	46bd      	mov	sp, r7
 800bf22:	bd80      	pop	{r7, pc}
 800bf24:	2000682c 	.word	0x2000682c
 800bf28:	2000680c 	.word	0x2000680c
 800bf2c:	20006334 	.word	0x20006334
 800bf30:	200067c4 	.word	0x200067c4
 800bf34:	20006330 	.word	0x20006330
 800bf38:	20006818 	.word	0x20006818

0800bf3c <vTaskSetTimeOutState>:
	}
}
/*-----------------------------------------------------------*/

void vTaskSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800bf3c:	b580      	push	{r7, lr}
 800bf3e:	b084      	sub	sp, #16
 800bf40:	af00      	add	r7, sp, #0
 800bf42:	6078      	str	r0, [r7, #4]
	configASSERT( pxTimeOut );
 800bf44:	687b      	ldr	r3, [r7, #4]
 800bf46:	2b00      	cmp	r3, #0
 800bf48:	d10b      	bne.n	800bf62 <vTaskSetTimeOutState+0x26>
	__asm volatile
 800bf4a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bf4e:	f383 8811 	msr	BASEPRI, r3
 800bf52:	f3bf 8f6f 	isb	sy
 800bf56:	f3bf 8f4f 	dsb	sy
 800bf5a:	60fb      	str	r3, [r7, #12]
}
 800bf5c:	bf00      	nop
 800bf5e:	bf00      	nop
 800bf60:	e7fd      	b.n	800bf5e <vTaskSetTimeOutState+0x22>
	taskENTER_CRITICAL();
 800bf62:	f000 fee1 	bl	800cd28 <vPortEnterCritical>
	{
		pxTimeOut->xOverflowCount = xNumOfOverflows;
 800bf66:	4b07      	ldr	r3, [pc, #28]	@ (800bf84 <vTaskSetTimeOutState+0x48>)
 800bf68:	681a      	ldr	r2, [r3, #0]
 800bf6a:	687b      	ldr	r3, [r7, #4]
 800bf6c:	601a      	str	r2, [r3, #0]
		pxTimeOut->xTimeOnEntering = xTickCount;
 800bf6e:	4b06      	ldr	r3, [pc, #24]	@ (800bf88 <vTaskSetTimeOutState+0x4c>)
 800bf70:	681a      	ldr	r2, [r3, #0]
 800bf72:	687b      	ldr	r3, [r7, #4]
 800bf74:	605a      	str	r2, [r3, #4]
	}
	taskEXIT_CRITICAL();
 800bf76:	f000 ff09 	bl	800cd8c <vPortExitCritical>
}
 800bf7a:	bf00      	nop
 800bf7c:	3710      	adds	r7, #16
 800bf7e:	46bd      	mov	sp, r7
 800bf80:	bd80      	pop	{r7, pc}
 800bf82:	bf00      	nop
 800bf84:	2000681c 	.word	0x2000681c
 800bf88:	20006808 	.word	0x20006808

0800bf8c <vTaskInternalSetTimeOutState>:
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800bf8c:	b480      	push	{r7}
 800bf8e:	b083      	sub	sp, #12
 800bf90:	af00      	add	r7, sp, #0
 800bf92:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800bf94:	4b06      	ldr	r3, [pc, #24]	@ (800bfb0 <vTaskInternalSetTimeOutState+0x24>)
 800bf96:	681a      	ldr	r2, [r3, #0]
 800bf98:	687b      	ldr	r3, [r7, #4]
 800bf9a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800bf9c:	4b05      	ldr	r3, [pc, #20]	@ (800bfb4 <vTaskInternalSetTimeOutState+0x28>)
 800bf9e:	681a      	ldr	r2, [r3, #0]
 800bfa0:	687b      	ldr	r3, [r7, #4]
 800bfa2:	605a      	str	r2, [r3, #4]
}
 800bfa4:	bf00      	nop
 800bfa6:	370c      	adds	r7, #12
 800bfa8:	46bd      	mov	sp, r7
 800bfaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfae:	4770      	bx	lr
 800bfb0:	2000681c 	.word	0x2000681c
 800bfb4:	20006808 	.word	0x20006808

0800bfb8 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800bfb8:	b580      	push	{r7, lr}
 800bfba:	b088      	sub	sp, #32
 800bfbc:	af00      	add	r7, sp, #0
 800bfbe:	6078      	str	r0, [r7, #4]
 800bfc0:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800bfc2:	687b      	ldr	r3, [r7, #4]
 800bfc4:	2b00      	cmp	r3, #0
 800bfc6:	d10b      	bne.n	800bfe0 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 800bfc8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bfcc:	f383 8811 	msr	BASEPRI, r3
 800bfd0:	f3bf 8f6f 	isb	sy
 800bfd4:	f3bf 8f4f 	dsb	sy
 800bfd8:	613b      	str	r3, [r7, #16]
}
 800bfda:	bf00      	nop
 800bfdc:	bf00      	nop
 800bfde:	e7fd      	b.n	800bfdc <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800bfe0:	683b      	ldr	r3, [r7, #0]
 800bfe2:	2b00      	cmp	r3, #0
 800bfe4:	d10b      	bne.n	800bffe <xTaskCheckForTimeOut+0x46>
	__asm volatile
 800bfe6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bfea:	f383 8811 	msr	BASEPRI, r3
 800bfee:	f3bf 8f6f 	isb	sy
 800bff2:	f3bf 8f4f 	dsb	sy
 800bff6:	60fb      	str	r3, [r7, #12]
}
 800bff8:	bf00      	nop
 800bffa:	bf00      	nop
 800bffc:	e7fd      	b.n	800bffa <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 800bffe:	f000 fe93 	bl	800cd28 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800c002:	4b1d      	ldr	r3, [pc, #116]	@ (800c078 <xTaskCheckForTimeOut+0xc0>)
 800c004:	681b      	ldr	r3, [r3, #0]
 800c006:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800c008:	687b      	ldr	r3, [r7, #4]
 800c00a:	685b      	ldr	r3, [r3, #4]
 800c00c:	69ba      	ldr	r2, [r7, #24]
 800c00e:	1ad3      	subs	r3, r2, r3
 800c010:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800c012:	683b      	ldr	r3, [r7, #0]
 800c014:	681b      	ldr	r3, [r3, #0]
 800c016:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800c01a:	d102      	bne.n	800c022 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800c01c:	2300      	movs	r3, #0
 800c01e:	61fb      	str	r3, [r7, #28]
 800c020:	e023      	b.n	800c06a <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800c022:	687b      	ldr	r3, [r7, #4]
 800c024:	681a      	ldr	r2, [r3, #0]
 800c026:	4b15      	ldr	r3, [pc, #84]	@ (800c07c <xTaskCheckForTimeOut+0xc4>)
 800c028:	681b      	ldr	r3, [r3, #0]
 800c02a:	429a      	cmp	r2, r3
 800c02c:	d007      	beq.n	800c03e <xTaskCheckForTimeOut+0x86>
 800c02e:	687b      	ldr	r3, [r7, #4]
 800c030:	685b      	ldr	r3, [r3, #4]
 800c032:	69ba      	ldr	r2, [r7, #24]
 800c034:	429a      	cmp	r2, r3
 800c036:	d302      	bcc.n	800c03e <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800c038:	2301      	movs	r3, #1
 800c03a:	61fb      	str	r3, [r7, #28]
 800c03c:	e015      	b.n	800c06a <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800c03e:	683b      	ldr	r3, [r7, #0]
 800c040:	681b      	ldr	r3, [r3, #0]
 800c042:	697a      	ldr	r2, [r7, #20]
 800c044:	429a      	cmp	r2, r3
 800c046:	d20b      	bcs.n	800c060 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800c048:	683b      	ldr	r3, [r7, #0]
 800c04a:	681a      	ldr	r2, [r3, #0]
 800c04c:	697b      	ldr	r3, [r7, #20]
 800c04e:	1ad2      	subs	r2, r2, r3
 800c050:	683b      	ldr	r3, [r7, #0]
 800c052:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800c054:	6878      	ldr	r0, [r7, #4]
 800c056:	f7ff ff99 	bl	800bf8c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800c05a:	2300      	movs	r3, #0
 800c05c:	61fb      	str	r3, [r7, #28]
 800c05e:	e004      	b.n	800c06a <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 800c060:	683b      	ldr	r3, [r7, #0]
 800c062:	2200      	movs	r2, #0
 800c064:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800c066:	2301      	movs	r3, #1
 800c068:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800c06a:	f000 fe8f 	bl	800cd8c <vPortExitCritical>

	return xReturn;
 800c06e:	69fb      	ldr	r3, [r7, #28]
}
 800c070:	4618      	mov	r0, r3
 800c072:	3720      	adds	r7, #32
 800c074:	46bd      	mov	sp, r7
 800c076:	bd80      	pop	{r7, pc}
 800c078:	20006808 	.word	0x20006808
 800c07c:	2000681c 	.word	0x2000681c

0800c080 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800c080:	b480      	push	{r7}
 800c082:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800c084:	4b03      	ldr	r3, [pc, #12]	@ (800c094 <vTaskMissedYield+0x14>)
 800c086:	2201      	movs	r2, #1
 800c088:	601a      	str	r2, [r3, #0]
}
 800c08a:	bf00      	nop
 800c08c:	46bd      	mov	sp, r7
 800c08e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c092:	4770      	bx	lr
 800c094:	20006818 	.word	0x20006818

0800c098 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800c098:	b580      	push	{r7, lr}
 800c09a:	b082      	sub	sp, #8
 800c09c:	af00      	add	r7, sp, #0
 800c09e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800c0a0:	f000 f852 	bl	800c148 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800c0a4:	4b06      	ldr	r3, [pc, #24]	@ (800c0c0 <prvIdleTask+0x28>)
 800c0a6:	681b      	ldr	r3, [r3, #0]
 800c0a8:	2b01      	cmp	r3, #1
 800c0aa:	d9f9      	bls.n	800c0a0 <prvIdleTask+0x8>
			{
				taskYIELD();
 800c0ac:	4b05      	ldr	r3, [pc, #20]	@ (800c0c4 <prvIdleTask+0x2c>)
 800c0ae:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c0b2:	601a      	str	r2, [r3, #0]
 800c0b4:	f3bf 8f4f 	dsb	sy
 800c0b8:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800c0bc:	e7f0      	b.n	800c0a0 <prvIdleTask+0x8>
 800c0be:	bf00      	nop
 800c0c0:	20006334 	.word	0x20006334
 800c0c4:	e000ed04 	.word	0xe000ed04

0800c0c8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800c0c8:	b580      	push	{r7, lr}
 800c0ca:	b082      	sub	sp, #8
 800c0cc:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800c0ce:	2300      	movs	r3, #0
 800c0d0:	607b      	str	r3, [r7, #4]
 800c0d2:	e00c      	b.n	800c0ee <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800c0d4:	687a      	ldr	r2, [r7, #4]
 800c0d6:	4613      	mov	r3, r2
 800c0d8:	009b      	lsls	r3, r3, #2
 800c0da:	4413      	add	r3, r2
 800c0dc:	009b      	lsls	r3, r3, #2
 800c0de:	4a12      	ldr	r2, [pc, #72]	@ (800c128 <prvInitialiseTaskLists+0x60>)
 800c0e0:	4413      	add	r3, r2
 800c0e2:	4618      	mov	r0, r3
 800c0e4:	f7fe fc86 	bl	800a9f4 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800c0e8:	687b      	ldr	r3, [r7, #4]
 800c0ea:	3301      	adds	r3, #1
 800c0ec:	607b      	str	r3, [r7, #4]
 800c0ee:	687b      	ldr	r3, [r7, #4]
 800c0f0:	2b37      	cmp	r3, #55	@ 0x37
 800c0f2:	d9ef      	bls.n	800c0d4 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800c0f4:	480d      	ldr	r0, [pc, #52]	@ (800c12c <prvInitialiseTaskLists+0x64>)
 800c0f6:	f7fe fc7d 	bl	800a9f4 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800c0fa:	480d      	ldr	r0, [pc, #52]	@ (800c130 <prvInitialiseTaskLists+0x68>)
 800c0fc:	f7fe fc7a 	bl	800a9f4 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800c100:	480c      	ldr	r0, [pc, #48]	@ (800c134 <prvInitialiseTaskLists+0x6c>)
 800c102:	f7fe fc77 	bl	800a9f4 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800c106:	480c      	ldr	r0, [pc, #48]	@ (800c138 <prvInitialiseTaskLists+0x70>)
 800c108:	f7fe fc74 	bl	800a9f4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800c10c:	480b      	ldr	r0, [pc, #44]	@ (800c13c <prvInitialiseTaskLists+0x74>)
 800c10e:	f7fe fc71 	bl	800a9f4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800c112:	4b0b      	ldr	r3, [pc, #44]	@ (800c140 <prvInitialiseTaskLists+0x78>)
 800c114:	4a05      	ldr	r2, [pc, #20]	@ (800c12c <prvInitialiseTaskLists+0x64>)
 800c116:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800c118:	4b0a      	ldr	r3, [pc, #40]	@ (800c144 <prvInitialiseTaskLists+0x7c>)
 800c11a:	4a05      	ldr	r2, [pc, #20]	@ (800c130 <prvInitialiseTaskLists+0x68>)
 800c11c:	601a      	str	r2, [r3, #0]
}
 800c11e:	bf00      	nop
 800c120:	3708      	adds	r7, #8
 800c122:	46bd      	mov	sp, r7
 800c124:	bd80      	pop	{r7, pc}
 800c126:	bf00      	nop
 800c128:	20006334 	.word	0x20006334
 800c12c:	20006794 	.word	0x20006794
 800c130:	200067a8 	.word	0x200067a8
 800c134:	200067c4 	.word	0x200067c4
 800c138:	200067d8 	.word	0x200067d8
 800c13c:	200067f0 	.word	0x200067f0
 800c140:	200067bc 	.word	0x200067bc
 800c144:	200067c0 	.word	0x200067c0

0800c148 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800c148:	b580      	push	{r7, lr}
 800c14a:	b082      	sub	sp, #8
 800c14c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800c14e:	e019      	b.n	800c184 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800c150:	f000 fdea 	bl	800cd28 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c154:	4b10      	ldr	r3, [pc, #64]	@ (800c198 <prvCheckTasksWaitingTermination+0x50>)
 800c156:	68db      	ldr	r3, [r3, #12]
 800c158:	68db      	ldr	r3, [r3, #12]
 800c15a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800c15c:	687b      	ldr	r3, [r7, #4]
 800c15e:	3304      	adds	r3, #4
 800c160:	4618      	mov	r0, r3
 800c162:	f7fe fcd1 	bl	800ab08 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800c166:	4b0d      	ldr	r3, [pc, #52]	@ (800c19c <prvCheckTasksWaitingTermination+0x54>)
 800c168:	681b      	ldr	r3, [r3, #0]
 800c16a:	3b01      	subs	r3, #1
 800c16c:	4a0b      	ldr	r2, [pc, #44]	@ (800c19c <prvCheckTasksWaitingTermination+0x54>)
 800c16e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800c170:	4b0b      	ldr	r3, [pc, #44]	@ (800c1a0 <prvCheckTasksWaitingTermination+0x58>)
 800c172:	681b      	ldr	r3, [r3, #0]
 800c174:	3b01      	subs	r3, #1
 800c176:	4a0a      	ldr	r2, [pc, #40]	@ (800c1a0 <prvCheckTasksWaitingTermination+0x58>)
 800c178:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800c17a:	f000 fe07 	bl	800cd8c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800c17e:	6878      	ldr	r0, [r7, #4]
 800c180:	f000 f810 	bl	800c1a4 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800c184:	4b06      	ldr	r3, [pc, #24]	@ (800c1a0 <prvCheckTasksWaitingTermination+0x58>)
 800c186:	681b      	ldr	r3, [r3, #0]
 800c188:	2b00      	cmp	r3, #0
 800c18a:	d1e1      	bne.n	800c150 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800c18c:	bf00      	nop
 800c18e:	bf00      	nop
 800c190:	3708      	adds	r7, #8
 800c192:	46bd      	mov	sp, r7
 800c194:	bd80      	pop	{r7, pc}
 800c196:	bf00      	nop
 800c198:	200067d8 	.word	0x200067d8
 800c19c:	20006804 	.word	0x20006804
 800c1a0:	200067ec 	.word	0x200067ec

0800c1a4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800c1a4:	b580      	push	{r7, lr}
 800c1a6:	b084      	sub	sp, #16
 800c1a8:	af00      	add	r7, sp, #0
 800c1aa:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800c1ac:	687b      	ldr	r3, [r7, #4]
 800c1ae:	3354      	adds	r3, #84	@ 0x54
 800c1b0:	4618      	mov	r0, r3
 800c1b2:	f00d fd3d 	bl	8019c30 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800c1b6:	687b      	ldr	r3, [r7, #4]
 800c1b8:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800c1bc:	2b00      	cmp	r3, #0
 800c1be:	d108      	bne.n	800c1d2 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800c1c0:	687b      	ldr	r3, [r7, #4]
 800c1c2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c1c4:	4618      	mov	r0, r3
 800c1c6:	f000 ff9f 	bl	800d108 <vPortFree>
				vPortFree( pxTCB );
 800c1ca:	6878      	ldr	r0, [r7, #4]
 800c1cc:	f000 ff9c 	bl	800d108 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800c1d0:	e019      	b.n	800c206 <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800c1d2:	687b      	ldr	r3, [r7, #4]
 800c1d4:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800c1d8:	2b01      	cmp	r3, #1
 800c1da:	d103      	bne.n	800c1e4 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800c1dc:	6878      	ldr	r0, [r7, #4]
 800c1de:	f000 ff93 	bl	800d108 <vPortFree>
	}
 800c1e2:	e010      	b.n	800c206 <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800c1e4:	687b      	ldr	r3, [r7, #4]
 800c1e6:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800c1ea:	2b02      	cmp	r3, #2
 800c1ec:	d00b      	beq.n	800c206 <prvDeleteTCB+0x62>
	__asm volatile
 800c1ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c1f2:	f383 8811 	msr	BASEPRI, r3
 800c1f6:	f3bf 8f6f 	isb	sy
 800c1fa:	f3bf 8f4f 	dsb	sy
 800c1fe:	60fb      	str	r3, [r7, #12]
}
 800c200:	bf00      	nop
 800c202:	bf00      	nop
 800c204:	e7fd      	b.n	800c202 <prvDeleteTCB+0x5e>
	}
 800c206:	bf00      	nop
 800c208:	3710      	adds	r7, #16
 800c20a:	46bd      	mov	sp, r7
 800c20c:	bd80      	pop	{r7, pc}
	...

0800c210 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800c210:	b480      	push	{r7}
 800c212:	b083      	sub	sp, #12
 800c214:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800c216:	4b0c      	ldr	r3, [pc, #48]	@ (800c248 <prvResetNextTaskUnblockTime+0x38>)
 800c218:	681b      	ldr	r3, [r3, #0]
 800c21a:	681b      	ldr	r3, [r3, #0]
 800c21c:	2b00      	cmp	r3, #0
 800c21e:	d104      	bne.n	800c22a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800c220:	4b0a      	ldr	r3, [pc, #40]	@ (800c24c <prvResetNextTaskUnblockTime+0x3c>)
 800c222:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800c226:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800c228:	e008      	b.n	800c23c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c22a:	4b07      	ldr	r3, [pc, #28]	@ (800c248 <prvResetNextTaskUnblockTime+0x38>)
 800c22c:	681b      	ldr	r3, [r3, #0]
 800c22e:	68db      	ldr	r3, [r3, #12]
 800c230:	68db      	ldr	r3, [r3, #12]
 800c232:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800c234:	687b      	ldr	r3, [r7, #4]
 800c236:	685b      	ldr	r3, [r3, #4]
 800c238:	4a04      	ldr	r2, [pc, #16]	@ (800c24c <prvResetNextTaskUnblockTime+0x3c>)
 800c23a:	6013      	str	r3, [r2, #0]
}
 800c23c:	bf00      	nop
 800c23e:	370c      	adds	r7, #12
 800c240:	46bd      	mov	sp, r7
 800c242:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c246:	4770      	bx	lr
 800c248:	200067bc 	.word	0x200067bc
 800c24c:	20006824 	.word	0x20006824

0800c250 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800c250:	b480      	push	{r7}
 800c252:	b083      	sub	sp, #12
 800c254:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800c256:	4b0b      	ldr	r3, [pc, #44]	@ (800c284 <xTaskGetSchedulerState+0x34>)
 800c258:	681b      	ldr	r3, [r3, #0]
 800c25a:	2b00      	cmp	r3, #0
 800c25c:	d102      	bne.n	800c264 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800c25e:	2301      	movs	r3, #1
 800c260:	607b      	str	r3, [r7, #4]
 800c262:	e008      	b.n	800c276 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c264:	4b08      	ldr	r3, [pc, #32]	@ (800c288 <xTaskGetSchedulerState+0x38>)
 800c266:	681b      	ldr	r3, [r3, #0]
 800c268:	2b00      	cmp	r3, #0
 800c26a:	d102      	bne.n	800c272 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800c26c:	2302      	movs	r3, #2
 800c26e:	607b      	str	r3, [r7, #4]
 800c270:	e001      	b.n	800c276 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800c272:	2300      	movs	r3, #0
 800c274:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800c276:	687b      	ldr	r3, [r7, #4]
	}
 800c278:	4618      	mov	r0, r3
 800c27a:	370c      	adds	r7, #12
 800c27c:	46bd      	mov	sp, r7
 800c27e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c282:	4770      	bx	lr
 800c284:	20006810 	.word	0x20006810
 800c288:	2000682c 	.word	0x2000682c

0800c28c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800c28c:	b580      	push	{r7, lr}
 800c28e:	b086      	sub	sp, #24
 800c290:	af00      	add	r7, sp, #0
 800c292:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800c294:	687b      	ldr	r3, [r7, #4]
 800c296:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800c298:	2300      	movs	r3, #0
 800c29a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800c29c:	687b      	ldr	r3, [r7, #4]
 800c29e:	2b00      	cmp	r3, #0
 800c2a0:	d058      	beq.n	800c354 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800c2a2:	4b2f      	ldr	r3, [pc, #188]	@ (800c360 <xTaskPriorityDisinherit+0xd4>)
 800c2a4:	681b      	ldr	r3, [r3, #0]
 800c2a6:	693a      	ldr	r2, [r7, #16]
 800c2a8:	429a      	cmp	r2, r3
 800c2aa:	d00b      	beq.n	800c2c4 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 800c2ac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c2b0:	f383 8811 	msr	BASEPRI, r3
 800c2b4:	f3bf 8f6f 	isb	sy
 800c2b8:	f3bf 8f4f 	dsb	sy
 800c2bc:	60fb      	str	r3, [r7, #12]
}
 800c2be:	bf00      	nop
 800c2c0:	bf00      	nop
 800c2c2:	e7fd      	b.n	800c2c0 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800c2c4:	693b      	ldr	r3, [r7, #16]
 800c2c6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800c2c8:	2b00      	cmp	r3, #0
 800c2ca:	d10b      	bne.n	800c2e4 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 800c2cc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c2d0:	f383 8811 	msr	BASEPRI, r3
 800c2d4:	f3bf 8f6f 	isb	sy
 800c2d8:	f3bf 8f4f 	dsb	sy
 800c2dc:	60bb      	str	r3, [r7, #8]
}
 800c2de:	bf00      	nop
 800c2e0:	bf00      	nop
 800c2e2:	e7fd      	b.n	800c2e0 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 800c2e4:	693b      	ldr	r3, [r7, #16]
 800c2e6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800c2e8:	1e5a      	subs	r2, r3, #1
 800c2ea:	693b      	ldr	r3, [r7, #16]
 800c2ec:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800c2ee:	693b      	ldr	r3, [r7, #16]
 800c2f0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c2f2:	693b      	ldr	r3, [r7, #16]
 800c2f4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800c2f6:	429a      	cmp	r2, r3
 800c2f8:	d02c      	beq.n	800c354 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800c2fa:	693b      	ldr	r3, [r7, #16]
 800c2fc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800c2fe:	2b00      	cmp	r3, #0
 800c300:	d128      	bne.n	800c354 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800c302:	693b      	ldr	r3, [r7, #16]
 800c304:	3304      	adds	r3, #4
 800c306:	4618      	mov	r0, r3
 800c308:	f7fe fbfe 	bl	800ab08 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800c30c:	693b      	ldr	r3, [r7, #16]
 800c30e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800c310:	693b      	ldr	r3, [r7, #16]
 800c312:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c314:	693b      	ldr	r3, [r7, #16]
 800c316:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c318:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800c31c:	693b      	ldr	r3, [r7, #16]
 800c31e:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800c320:	693b      	ldr	r3, [r7, #16]
 800c322:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c324:	4b0f      	ldr	r3, [pc, #60]	@ (800c364 <xTaskPriorityDisinherit+0xd8>)
 800c326:	681b      	ldr	r3, [r3, #0]
 800c328:	429a      	cmp	r2, r3
 800c32a:	d903      	bls.n	800c334 <xTaskPriorityDisinherit+0xa8>
 800c32c:	693b      	ldr	r3, [r7, #16]
 800c32e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c330:	4a0c      	ldr	r2, [pc, #48]	@ (800c364 <xTaskPriorityDisinherit+0xd8>)
 800c332:	6013      	str	r3, [r2, #0]
 800c334:	693b      	ldr	r3, [r7, #16]
 800c336:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c338:	4613      	mov	r3, r2
 800c33a:	009b      	lsls	r3, r3, #2
 800c33c:	4413      	add	r3, r2
 800c33e:	009b      	lsls	r3, r3, #2
 800c340:	4a09      	ldr	r2, [pc, #36]	@ (800c368 <xTaskPriorityDisinherit+0xdc>)
 800c342:	441a      	add	r2, r3
 800c344:	693b      	ldr	r3, [r7, #16]
 800c346:	3304      	adds	r3, #4
 800c348:	4619      	mov	r1, r3
 800c34a:	4610      	mov	r0, r2
 800c34c:	f7fe fb7f 	bl	800aa4e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800c350:	2301      	movs	r3, #1
 800c352:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800c354:	697b      	ldr	r3, [r7, #20]
	}
 800c356:	4618      	mov	r0, r3
 800c358:	3718      	adds	r7, #24
 800c35a:	46bd      	mov	sp, r7
 800c35c:	bd80      	pop	{r7, pc}
 800c35e:	bf00      	nop
 800c360:	20006330 	.word	0x20006330
 800c364:	2000680c 	.word	0x2000680c
 800c368:	20006334 	.word	0x20006334

0800c36c <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800c36c:	b580      	push	{r7, lr}
 800c36e:	b084      	sub	sp, #16
 800c370:	af00      	add	r7, sp, #0
 800c372:	6078      	str	r0, [r7, #4]
 800c374:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800c376:	4b21      	ldr	r3, [pc, #132]	@ (800c3fc <prvAddCurrentTaskToDelayedList+0x90>)
 800c378:	681b      	ldr	r3, [r3, #0]
 800c37a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800c37c:	4b20      	ldr	r3, [pc, #128]	@ (800c400 <prvAddCurrentTaskToDelayedList+0x94>)
 800c37e:	681b      	ldr	r3, [r3, #0]
 800c380:	3304      	adds	r3, #4
 800c382:	4618      	mov	r0, r3
 800c384:	f7fe fbc0 	bl	800ab08 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800c388:	687b      	ldr	r3, [r7, #4]
 800c38a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800c38e:	d10a      	bne.n	800c3a6 <prvAddCurrentTaskToDelayedList+0x3a>
 800c390:	683b      	ldr	r3, [r7, #0]
 800c392:	2b00      	cmp	r3, #0
 800c394:	d007      	beq.n	800c3a6 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800c396:	4b1a      	ldr	r3, [pc, #104]	@ (800c400 <prvAddCurrentTaskToDelayedList+0x94>)
 800c398:	681b      	ldr	r3, [r3, #0]
 800c39a:	3304      	adds	r3, #4
 800c39c:	4619      	mov	r1, r3
 800c39e:	4819      	ldr	r0, [pc, #100]	@ (800c404 <prvAddCurrentTaskToDelayedList+0x98>)
 800c3a0:	f7fe fb55 	bl	800aa4e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800c3a4:	e026      	b.n	800c3f4 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800c3a6:	68fa      	ldr	r2, [r7, #12]
 800c3a8:	687b      	ldr	r3, [r7, #4]
 800c3aa:	4413      	add	r3, r2
 800c3ac:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800c3ae:	4b14      	ldr	r3, [pc, #80]	@ (800c400 <prvAddCurrentTaskToDelayedList+0x94>)
 800c3b0:	681b      	ldr	r3, [r3, #0]
 800c3b2:	68ba      	ldr	r2, [r7, #8]
 800c3b4:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800c3b6:	68ba      	ldr	r2, [r7, #8]
 800c3b8:	68fb      	ldr	r3, [r7, #12]
 800c3ba:	429a      	cmp	r2, r3
 800c3bc:	d209      	bcs.n	800c3d2 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800c3be:	4b12      	ldr	r3, [pc, #72]	@ (800c408 <prvAddCurrentTaskToDelayedList+0x9c>)
 800c3c0:	681a      	ldr	r2, [r3, #0]
 800c3c2:	4b0f      	ldr	r3, [pc, #60]	@ (800c400 <prvAddCurrentTaskToDelayedList+0x94>)
 800c3c4:	681b      	ldr	r3, [r3, #0]
 800c3c6:	3304      	adds	r3, #4
 800c3c8:	4619      	mov	r1, r3
 800c3ca:	4610      	mov	r0, r2
 800c3cc:	f7fe fb63 	bl	800aa96 <vListInsert>
}
 800c3d0:	e010      	b.n	800c3f4 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800c3d2:	4b0e      	ldr	r3, [pc, #56]	@ (800c40c <prvAddCurrentTaskToDelayedList+0xa0>)
 800c3d4:	681a      	ldr	r2, [r3, #0]
 800c3d6:	4b0a      	ldr	r3, [pc, #40]	@ (800c400 <prvAddCurrentTaskToDelayedList+0x94>)
 800c3d8:	681b      	ldr	r3, [r3, #0]
 800c3da:	3304      	adds	r3, #4
 800c3dc:	4619      	mov	r1, r3
 800c3de:	4610      	mov	r0, r2
 800c3e0:	f7fe fb59 	bl	800aa96 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800c3e4:	4b0a      	ldr	r3, [pc, #40]	@ (800c410 <prvAddCurrentTaskToDelayedList+0xa4>)
 800c3e6:	681b      	ldr	r3, [r3, #0]
 800c3e8:	68ba      	ldr	r2, [r7, #8]
 800c3ea:	429a      	cmp	r2, r3
 800c3ec:	d202      	bcs.n	800c3f4 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800c3ee:	4a08      	ldr	r2, [pc, #32]	@ (800c410 <prvAddCurrentTaskToDelayedList+0xa4>)
 800c3f0:	68bb      	ldr	r3, [r7, #8]
 800c3f2:	6013      	str	r3, [r2, #0]
}
 800c3f4:	bf00      	nop
 800c3f6:	3710      	adds	r7, #16
 800c3f8:	46bd      	mov	sp, r7
 800c3fa:	bd80      	pop	{r7, pc}
 800c3fc:	20006808 	.word	0x20006808
 800c400:	20006330 	.word	0x20006330
 800c404:	200067f0 	.word	0x200067f0
 800c408:	200067c0 	.word	0x200067c0
 800c40c:	200067bc 	.word	0x200067bc
 800c410:	20006824 	.word	0x20006824

0800c414 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800c414:	b580      	push	{r7, lr}
 800c416:	b08a      	sub	sp, #40	@ 0x28
 800c418:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800c41a:	2300      	movs	r3, #0
 800c41c:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800c41e:	f000 fb13 	bl	800ca48 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800c422:	4b1d      	ldr	r3, [pc, #116]	@ (800c498 <xTimerCreateTimerTask+0x84>)
 800c424:	681b      	ldr	r3, [r3, #0]
 800c426:	2b00      	cmp	r3, #0
 800c428:	d021      	beq.n	800c46e <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800c42a:	2300      	movs	r3, #0
 800c42c:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800c42e:	2300      	movs	r3, #0
 800c430:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800c432:	1d3a      	adds	r2, r7, #4
 800c434:	f107 0108 	add.w	r1, r7, #8
 800c438:	f107 030c 	add.w	r3, r7, #12
 800c43c:	4618      	mov	r0, r3
 800c43e:	f7fe fabf 	bl	800a9c0 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800c442:	6879      	ldr	r1, [r7, #4]
 800c444:	68bb      	ldr	r3, [r7, #8]
 800c446:	68fa      	ldr	r2, [r7, #12]
 800c448:	9202      	str	r2, [sp, #8]
 800c44a:	9301      	str	r3, [sp, #4]
 800c44c:	2302      	movs	r3, #2
 800c44e:	9300      	str	r3, [sp, #0]
 800c450:	2300      	movs	r3, #0
 800c452:	460a      	mov	r2, r1
 800c454:	4911      	ldr	r1, [pc, #68]	@ (800c49c <xTimerCreateTimerTask+0x88>)
 800c456:	4812      	ldr	r0, [pc, #72]	@ (800c4a0 <xTimerCreateTimerTask+0x8c>)
 800c458:	f7ff f87a 	bl	800b550 <xTaskCreateStatic>
 800c45c:	4603      	mov	r3, r0
 800c45e:	4a11      	ldr	r2, [pc, #68]	@ (800c4a4 <xTimerCreateTimerTask+0x90>)
 800c460:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800c462:	4b10      	ldr	r3, [pc, #64]	@ (800c4a4 <xTimerCreateTimerTask+0x90>)
 800c464:	681b      	ldr	r3, [r3, #0]
 800c466:	2b00      	cmp	r3, #0
 800c468:	d001      	beq.n	800c46e <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800c46a:	2301      	movs	r3, #1
 800c46c:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800c46e:	697b      	ldr	r3, [r7, #20]
 800c470:	2b00      	cmp	r3, #0
 800c472:	d10b      	bne.n	800c48c <xTimerCreateTimerTask+0x78>
	__asm volatile
 800c474:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c478:	f383 8811 	msr	BASEPRI, r3
 800c47c:	f3bf 8f6f 	isb	sy
 800c480:	f3bf 8f4f 	dsb	sy
 800c484:	613b      	str	r3, [r7, #16]
}
 800c486:	bf00      	nop
 800c488:	bf00      	nop
 800c48a:	e7fd      	b.n	800c488 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800c48c:	697b      	ldr	r3, [r7, #20]
}
 800c48e:	4618      	mov	r0, r3
 800c490:	3718      	adds	r7, #24
 800c492:	46bd      	mov	sp, r7
 800c494:	bd80      	pop	{r7, pc}
 800c496:	bf00      	nop
 800c498:	20006860 	.word	0x20006860
 800c49c:	0801bb64 	.word	0x0801bb64
 800c4a0:	0800c5e1 	.word	0x0800c5e1
 800c4a4:	20006864 	.word	0x20006864

0800c4a8 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800c4a8:	b580      	push	{r7, lr}
 800c4aa:	b08a      	sub	sp, #40	@ 0x28
 800c4ac:	af00      	add	r7, sp, #0
 800c4ae:	60f8      	str	r0, [r7, #12]
 800c4b0:	60b9      	str	r1, [r7, #8]
 800c4b2:	607a      	str	r2, [r7, #4]
 800c4b4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800c4b6:	2300      	movs	r3, #0
 800c4b8:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800c4ba:	68fb      	ldr	r3, [r7, #12]
 800c4bc:	2b00      	cmp	r3, #0
 800c4be:	d10b      	bne.n	800c4d8 <xTimerGenericCommand+0x30>
	__asm volatile
 800c4c0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c4c4:	f383 8811 	msr	BASEPRI, r3
 800c4c8:	f3bf 8f6f 	isb	sy
 800c4cc:	f3bf 8f4f 	dsb	sy
 800c4d0:	623b      	str	r3, [r7, #32]
}
 800c4d2:	bf00      	nop
 800c4d4:	bf00      	nop
 800c4d6:	e7fd      	b.n	800c4d4 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800c4d8:	4b19      	ldr	r3, [pc, #100]	@ (800c540 <xTimerGenericCommand+0x98>)
 800c4da:	681b      	ldr	r3, [r3, #0]
 800c4dc:	2b00      	cmp	r3, #0
 800c4de:	d02a      	beq.n	800c536 <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800c4e0:	68bb      	ldr	r3, [r7, #8]
 800c4e2:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800c4e4:	687b      	ldr	r3, [r7, #4]
 800c4e6:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800c4e8:	68fb      	ldr	r3, [r7, #12]
 800c4ea:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800c4ec:	68bb      	ldr	r3, [r7, #8]
 800c4ee:	2b05      	cmp	r3, #5
 800c4f0:	dc18      	bgt.n	800c524 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800c4f2:	f7ff fead 	bl	800c250 <xTaskGetSchedulerState>
 800c4f6:	4603      	mov	r3, r0
 800c4f8:	2b02      	cmp	r3, #2
 800c4fa:	d109      	bne.n	800c510 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800c4fc:	4b10      	ldr	r3, [pc, #64]	@ (800c540 <xTimerGenericCommand+0x98>)
 800c4fe:	6818      	ldr	r0, [r3, #0]
 800c500:	f107 0110 	add.w	r1, r7, #16
 800c504:	2300      	movs	r3, #0
 800c506:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800c508:	f7fe fc32 	bl	800ad70 <xQueueGenericSend>
 800c50c:	6278      	str	r0, [r7, #36]	@ 0x24
 800c50e:	e012      	b.n	800c536 <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800c510:	4b0b      	ldr	r3, [pc, #44]	@ (800c540 <xTimerGenericCommand+0x98>)
 800c512:	6818      	ldr	r0, [r3, #0]
 800c514:	f107 0110 	add.w	r1, r7, #16
 800c518:	2300      	movs	r3, #0
 800c51a:	2200      	movs	r2, #0
 800c51c:	f7fe fc28 	bl	800ad70 <xQueueGenericSend>
 800c520:	6278      	str	r0, [r7, #36]	@ 0x24
 800c522:	e008      	b.n	800c536 <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800c524:	4b06      	ldr	r3, [pc, #24]	@ (800c540 <xTimerGenericCommand+0x98>)
 800c526:	6818      	ldr	r0, [r3, #0]
 800c528:	f107 0110 	add.w	r1, r7, #16
 800c52c:	2300      	movs	r3, #0
 800c52e:	683a      	ldr	r2, [r7, #0]
 800c530:	f7fe fd20 	bl	800af74 <xQueueGenericSendFromISR>
 800c534:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800c536:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800c538:	4618      	mov	r0, r3
 800c53a:	3728      	adds	r7, #40	@ 0x28
 800c53c:	46bd      	mov	sp, r7
 800c53e:	bd80      	pop	{r7, pc}
 800c540:	20006860 	.word	0x20006860

0800c544 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800c544:	b580      	push	{r7, lr}
 800c546:	b088      	sub	sp, #32
 800c548:	af02      	add	r7, sp, #8
 800c54a:	6078      	str	r0, [r7, #4]
 800c54c:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c54e:	4b23      	ldr	r3, [pc, #140]	@ (800c5dc <prvProcessExpiredTimer+0x98>)
 800c550:	681b      	ldr	r3, [r3, #0]
 800c552:	68db      	ldr	r3, [r3, #12]
 800c554:	68db      	ldr	r3, [r3, #12]
 800c556:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800c558:	697b      	ldr	r3, [r7, #20]
 800c55a:	3304      	adds	r3, #4
 800c55c:	4618      	mov	r0, r3
 800c55e:	f7fe fad3 	bl	800ab08 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800c562:	697b      	ldr	r3, [r7, #20]
 800c564:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800c568:	f003 0304 	and.w	r3, r3, #4
 800c56c:	2b00      	cmp	r3, #0
 800c56e:	d023      	beq.n	800c5b8 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800c570:	697b      	ldr	r3, [r7, #20]
 800c572:	699a      	ldr	r2, [r3, #24]
 800c574:	687b      	ldr	r3, [r7, #4]
 800c576:	18d1      	adds	r1, r2, r3
 800c578:	687b      	ldr	r3, [r7, #4]
 800c57a:	683a      	ldr	r2, [r7, #0]
 800c57c:	6978      	ldr	r0, [r7, #20]
 800c57e:	f000 f8d5 	bl	800c72c <prvInsertTimerInActiveList>
 800c582:	4603      	mov	r3, r0
 800c584:	2b00      	cmp	r3, #0
 800c586:	d020      	beq.n	800c5ca <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800c588:	2300      	movs	r3, #0
 800c58a:	9300      	str	r3, [sp, #0]
 800c58c:	2300      	movs	r3, #0
 800c58e:	687a      	ldr	r2, [r7, #4]
 800c590:	2100      	movs	r1, #0
 800c592:	6978      	ldr	r0, [r7, #20]
 800c594:	f7ff ff88 	bl	800c4a8 <xTimerGenericCommand>
 800c598:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800c59a:	693b      	ldr	r3, [r7, #16]
 800c59c:	2b00      	cmp	r3, #0
 800c59e:	d114      	bne.n	800c5ca <prvProcessExpiredTimer+0x86>
	__asm volatile
 800c5a0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c5a4:	f383 8811 	msr	BASEPRI, r3
 800c5a8:	f3bf 8f6f 	isb	sy
 800c5ac:	f3bf 8f4f 	dsb	sy
 800c5b0:	60fb      	str	r3, [r7, #12]
}
 800c5b2:	bf00      	nop
 800c5b4:	bf00      	nop
 800c5b6:	e7fd      	b.n	800c5b4 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800c5b8:	697b      	ldr	r3, [r7, #20]
 800c5ba:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800c5be:	f023 0301 	bic.w	r3, r3, #1
 800c5c2:	b2da      	uxtb	r2, r3
 800c5c4:	697b      	ldr	r3, [r7, #20]
 800c5c6:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800c5ca:	697b      	ldr	r3, [r7, #20]
 800c5cc:	6a1b      	ldr	r3, [r3, #32]
 800c5ce:	6978      	ldr	r0, [r7, #20]
 800c5d0:	4798      	blx	r3
}
 800c5d2:	bf00      	nop
 800c5d4:	3718      	adds	r7, #24
 800c5d6:	46bd      	mov	sp, r7
 800c5d8:	bd80      	pop	{r7, pc}
 800c5da:	bf00      	nop
 800c5dc:	20006858 	.word	0x20006858

0800c5e0 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800c5e0:	b580      	push	{r7, lr}
 800c5e2:	b084      	sub	sp, #16
 800c5e4:	af00      	add	r7, sp, #0
 800c5e6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800c5e8:	f107 0308 	add.w	r3, r7, #8
 800c5ec:	4618      	mov	r0, r3
 800c5ee:	f000 f859 	bl	800c6a4 <prvGetNextExpireTime>
 800c5f2:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800c5f4:	68bb      	ldr	r3, [r7, #8]
 800c5f6:	4619      	mov	r1, r3
 800c5f8:	68f8      	ldr	r0, [r7, #12]
 800c5fa:	f000 f805 	bl	800c608 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800c5fe:	f000 f8d7 	bl	800c7b0 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800c602:	bf00      	nop
 800c604:	e7f0      	b.n	800c5e8 <prvTimerTask+0x8>
	...

0800c608 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800c608:	b580      	push	{r7, lr}
 800c60a:	b084      	sub	sp, #16
 800c60c:	af00      	add	r7, sp, #0
 800c60e:	6078      	str	r0, [r7, #4]
 800c610:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800c612:	f7ff fa01 	bl	800ba18 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800c616:	f107 0308 	add.w	r3, r7, #8
 800c61a:	4618      	mov	r0, r3
 800c61c:	f000 f866 	bl	800c6ec <prvSampleTimeNow>
 800c620:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800c622:	68bb      	ldr	r3, [r7, #8]
 800c624:	2b00      	cmp	r3, #0
 800c626:	d130      	bne.n	800c68a <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800c628:	683b      	ldr	r3, [r7, #0]
 800c62a:	2b00      	cmp	r3, #0
 800c62c:	d10a      	bne.n	800c644 <prvProcessTimerOrBlockTask+0x3c>
 800c62e:	687a      	ldr	r2, [r7, #4]
 800c630:	68fb      	ldr	r3, [r7, #12]
 800c632:	429a      	cmp	r2, r3
 800c634:	d806      	bhi.n	800c644 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800c636:	f7ff f9fd 	bl	800ba34 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800c63a:	68f9      	ldr	r1, [r7, #12]
 800c63c:	6878      	ldr	r0, [r7, #4]
 800c63e:	f7ff ff81 	bl	800c544 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800c642:	e024      	b.n	800c68e <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800c644:	683b      	ldr	r3, [r7, #0]
 800c646:	2b00      	cmp	r3, #0
 800c648:	d008      	beq.n	800c65c <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800c64a:	4b13      	ldr	r3, [pc, #76]	@ (800c698 <prvProcessTimerOrBlockTask+0x90>)
 800c64c:	681b      	ldr	r3, [r3, #0]
 800c64e:	681b      	ldr	r3, [r3, #0]
 800c650:	2b00      	cmp	r3, #0
 800c652:	d101      	bne.n	800c658 <prvProcessTimerOrBlockTask+0x50>
 800c654:	2301      	movs	r3, #1
 800c656:	e000      	b.n	800c65a <prvProcessTimerOrBlockTask+0x52>
 800c658:	2300      	movs	r3, #0
 800c65a:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800c65c:	4b0f      	ldr	r3, [pc, #60]	@ (800c69c <prvProcessTimerOrBlockTask+0x94>)
 800c65e:	6818      	ldr	r0, [r3, #0]
 800c660:	687a      	ldr	r2, [r7, #4]
 800c662:	68fb      	ldr	r3, [r7, #12]
 800c664:	1ad3      	subs	r3, r2, r3
 800c666:	683a      	ldr	r2, [r7, #0]
 800c668:	4619      	mov	r1, r3
 800c66a:	f7fe ff3d 	bl	800b4e8 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800c66e:	f7ff f9e1 	bl	800ba34 <xTaskResumeAll>
 800c672:	4603      	mov	r3, r0
 800c674:	2b00      	cmp	r3, #0
 800c676:	d10a      	bne.n	800c68e <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800c678:	4b09      	ldr	r3, [pc, #36]	@ (800c6a0 <prvProcessTimerOrBlockTask+0x98>)
 800c67a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c67e:	601a      	str	r2, [r3, #0]
 800c680:	f3bf 8f4f 	dsb	sy
 800c684:	f3bf 8f6f 	isb	sy
}
 800c688:	e001      	b.n	800c68e <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800c68a:	f7ff f9d3 	bl	800ba34 <xTaskResumeAll>
}
 800c68e:	bf00      	nop
 800c690:	3710      	adds	r7, #16
 800c692:	46bd      	mov	sp, r7
 800c694:	bd80      	pop	{r7, pc}
 800c696:	bf00      	nop
 800c698:	2000685c 	.word	0x2000685c
 800c69c:	20006860 	.word	0x20006860
 800c6a0:	e000ed04 	.word	0xe000ed04

0800c6a4 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800c6a4:	b480      	push	{r7}
 800c6a6:	b085      	sub	sp, #20
 800c6a8:	af00      	add	r7, sp, #0
 800c6aa:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800c6ac:	4b0e      	ldr	r3, [pc, #56]	@ (800c6e8 <prvGetNextExpireTime+0x44>)
 800c6ae:	681b      	ldr	r3, [r3, #0]
 800c6b0:	681b      	ldr	r3, [r3, #0]
 800c6b2:	2b00      	cmp	r3, #0
 800c6b4:	d101      	bne.n	800c6ba <prvGetNextExpireTime+0x16>
 800c6b6:	2201      	movs	r2, #1
 800c6b8:	e000      	b.n	800c6bc <prvGetNextExpireTime+0x18>
 800c6ba:	2200      	movs	r2, #0
 800c6bc:	687b      	ldr	r3, [r7, #4]
 800c6be:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800c6c0:	687b      	ldr	r3, [r7, #4]
 800c6c2:	681b      	ldr	r3, [r3, #0]
 800c6c4:	2b00      	cmp	r3, #0
 800c6c6:	d105      	bne.n	800c6d4 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800c6c8:	4b07      	ldr	r3, [pc, #28]	@ (800c6e8 <prvGetNextExpireTime+0x44>)
 800c6ca:	681b      	ldr	r3, [r3, #0]
 800c6cc:	68db      	ldr	r3, [r3, #12]
 800c6ce:	681b      	ldr	r3, [r3, #0]
 800c6d0:	60fb      	str	r3, [r7, #12]
 800c6d2:	e001      	b.n	800c6d8 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800c6d4:	2300      	movs	r3, #0
 800c6d6:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800c6d8:	68fb      	ldr	r3, [r7, #12]
}
 800c6da:	4618      	mov	r0, r3
 800c6dc:	3714      	adds	r7, #20
 800c6de:	46bd      	mov	sp, r7
 800c6e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6e4:	4770      	bx	lr
 800c6e6:	bf00      	nop
 800c6e8:	20006858 	.word	0x20006858

0800c6ec <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800c6ec:	b580      	push	{r7, lr}
 800c6ee:	b084      	sub	sp, #16
 800c6f0:	af00      	add	r7, sp, #0
 800c6f2:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800c6f4:	f7ff fa3c 	bl	800bb70 <xTaskGetTickCount>
 800c6f8:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800c6fa:	4b0b      	ldr	r3, [pc, #44]	@ (800c728 <prvSampleTimeNow+0x3c>)
 800c6fc:	681b      	ldr	r3, [r3, #0]
 800c6fe:	68fa      	ldr	r2, [r7, #12]
 800c700:	429a      	cmp	r2, r3
 800c702:	d205      	bcs.n	800c710 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800c704:	f000 f93a 	bl	800c97c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800c708:	687b      	ldr	r3, [r7, #4]
 800c70a:	2201      	movs	r2, #1
 800c70c:	601a      	str	r2, [r3, #0]
 800c70e:	e002      	b.n	800c716 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800c710:	687b      	ldr	r3, [r7, #4]
 800c712:	2200      	movs	r2, #0
 800c714:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800c716:	4a04      	ldr	r2, [pc, #16]	@ (800c728 <prvSampleTimeNow+0x3c>)
 800c718:	68fb      	ldr	r3, [r7, #12]
 800c71a:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800c71c:	68fb      	ldr	r3, [r7, #12]
}
 800c71e:	4618      	mov	r0, r3
 800c720:	3710      	adds	r7, #16
 800c722:	46bd      	mov	sp, r7
 800c724:	bd80      	pop	{r7, pc}
 800c726:	bf00      	nop
 800c728:	20006868 	.word	0x20006868

0800c72c <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800c72c:	b580      	push	{r7, lr}
 800c72e:	b086      	sub	sp, #24
 800c730:	af00      	add	r7, sp, #0
 800c732:	60f8      	str	r0, [r7, #12]
 800c734:	60b9      	str	r1, [r7, #8]
 800c736:	607a      	str	r2, [r7, #4]
 800c738:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800c73a:	2300      	movs	r3, #0
 800c73c:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800c73e:	68fb      	ldr	r3, [r7, #12]
 800c740:	68ba      	ldr	r2, [r7, #8]
 800c742:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800c744:	68fb      	ldr	r3, [r7, #12]
 800c746:	68fa      	ldr	r2, [r7, #12]
 800c748:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800c74a:	68ba      	ldr	r2, [r7, #8]
 800c74c:	687b      	ldr	r3, [r7, #4]
 800c74e:	429a      	cmp	r2, r3
 800c750:	d812      	bhi.n	800c778 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c752:	687a      	ldr	r2, [r7, #4]
 800c754:	683b      	ldr	r3, [r7, #0]
 800c756:	1ad2      	subs	r2, r2, r3
 800c758:	68fb      	ldr	r3, [r7, #12]
 800c75a:	699b      	ldr	r3, [r3, #24]
 800c75c:	429a      	cmp	r2, r3
 800c75e:	d302      	bcc.n	800c766 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800c760:	2301      	movs	r3, #1
 800c762:	617b      	str	r3, [r7, #20]
 800c764:	e01b      	b.n	800c79e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800c766:	4b10      	ldr	r3, [pc, #64]	@ (800c7a8 <prvInsertTimerInActiveList+0x7c>)
 800c768:	681a      	ldr	r2, [r3, #0]
 800c76a:	68fb      	ldr	r3, [r7, #12]
 800c76c:	3304      	adds	r3, #4
 800c76e:	4619      	mov	r1, r3
 800c770:	4610      	mov	r0, r2
 800c772:	f7fe f990 	bl	800aa96 <vListInsert>
 800c776:	e012      	b.n	800c79e <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800c778:	687a      	ldr	r2, [r7, #4]
 800c77a:	683b      	ldr	r3, [r7, #0]
 800c77c:	429a      	cmp	r2, r3
 800c77e:	d206      	bcs.n	800c78e <prvInsertTimerInActiveList+0x62>
 800c780:	68ba      	ldr	r2, [r7, #8]
 800c782:	683b      	ldr	r3, [r7, #0]
 800c784:	429a      	cmp	r2, r3
 800c786:	d302      	bcc.n	800c78e <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800c788:	2301      	movs	r3, #1
 800c78a:	617b      	str	r3, [r7, #20]
 800c78c:	e007      	b.n	800c79e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800c78e:	4b07      	ldr	r3, [pc, #28]	@ (800c7ac <prvInsertTimerInActiveList+0x80>)
 800c790:	681a      	ldr	r2, [r3, #0]
 800c792:	68fb      	ldr	r3, [r7, #12]
 800c794:	3304      	adds	r3, #4
 800c796:	4619      	mov	r1, r3
 800c798:	4610      	mov	r0, r2
 800c79a:	f7fe f97c 	bl	800aa96 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800c79e:	697b      	ldr	r3, [r7, #20]
}
 800c7a0:	4618      	mov	r0, r3
 800c7a2:	3718      	adds	r7, #24
 800c7a4:	46bd      	mov	sp, r7
 800c7a6:	bd80      	pop	{r7, pc}
 800c7a8:	2000685c 	.word	0x2000685c
 800c7ac:	20006858 	.word	0x20006858

0800c7b0 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800c7b0:	b580      	push	{r7, lr}
 800c7b2:	b08e      	sub	sp, #56	@ 0x38
 800c7b4:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800c7b6:	e0ce      	b.n	800c956 <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800c7b8:	687b      	ldr	r3, [r7, #4]
 800c7ba:	2b00      	cmp	r3, #0
 800c7bc:	da19      	bge.n	800c7f2 <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800c7be:	1d3b      	adds	r3, r7, #4
 800c7c0:	3304      	adds	r3, #4
 800c7c2:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800c7c4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c7c6:	2b00      	cmp	r3, #0
 800c7c8:	d10b      	bne.n	800c7e2 <prvProcessReceivedCommands+0x32>
	__asm volatile
 800c7ca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c7ce:	f383 8811 	msr	BASEPRI, r3
 800c7d2:	f3bf 8f6f 	isb	sy
 800c7d6:	f3bf 8f4f 	dsb	sy
 800c7da:	61fb      	str	r3, [r7, #28]
}
 800c7dc:	bf00      	nop
 800c7de:	bf00      	nop
 800c7e0:	e7fd      	b.n	800c7de <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800c7e2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c7e4:	681b      	ldr	r3, [r3, #0]
 800c7e6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800c7e8:	6850      	ldr	r0, [r2, #4]
 800c7ea:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800c7ec:	6892      	ldr	r2, [r2, #8]
 800c7ee:	4611      	mov	r1, r2
 800c7f0:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800c7f2:	687b      	ldr	r3, [r7, #4]
 800c7f4:	2b00      	cmp	r3, #0
 800c7f6:	f2c0 80ae 	blt.w	800c956 <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800c7fa:	68fb      	ldr	r3, [r7, #12]
 800c7fc:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800c7fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c800:	695b      	ldr	r3, [r3, #20]
 800c802:	2b00      	cmp	r3, #0
 800c804:	d004      	beq.n	800c810 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800c806:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c808:	3304      	adds	r3, #4
 800c80a:	4618      	mov	r0, r3
 800c80c:	f7fe f97c 	bl	800ab08 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800c810:	463b      	mov	r3, r7
 800c812:	4618      	mov	r0, r3
 800c814:	f7ff ff6a 	bl	800c6ec <prvSampleTimeNow>
 800c818:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 800c81a:	687b      	ldr	r3, [r7, #4]
 800c81c:	2b09      	cmp	r3, #9
 800c81e:	f200 8097 	bhi.w	800c950 <prvProcessReceivedCommands+0x1a0>
 800c822:	a201      	add	r2, pc, #4	@ (adr r2, 800c828 <prvProcessReceivedCommands+0x78>)
 800c824:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c828:	0800c851 	.word	0x0800c851
 800c82c:	0800c851 	.word	0x0800c851
 800c830:	0800c851 	.word	0x0800c851
 800c834:	0800c8c7 	.word	0x0800c8c7
 800c838:	0800c8db 	.word	0x0800c8db
 800c83c:	0800c927 	.word	0x0800c927
 800c840:	0800c851 	.word	0x0800c851
 800c844:	0800c851 	.word	0x0800c851
 800c848:	0800c8c7 	.word	0x0800c8c7
 800c84c:	0800c8db 	.word	0x0800c8db
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800c850:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c852:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800c856:	f043 0301 	orr.w	r3, r3, #1
 800c85a:	b2da      	uxtb	r2, r3
 800c85c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c85e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800c862:	68ba      	ldr	r2, [r7, #8]
 800c864:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c866:	699b      	ldr	r3, [r3, #24]
 800c868:	18d1      	adds	r1, r2, r3
 800c86a:	68bb      	ldr	r3, [r7, #8]
 800c86c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c86e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800c870:	f7ff ff5c 	bl	800c72c <prvInsertTimerInActiveList>
 800c874:	4603      	mov	r3, r0
 800c876:	2b00      	cmp	r3, #0
 800c878:	d06c      	beq.n	800c954 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800c87a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c87c:	6a1b      	ldr	r3, [r3, #32]
 800c87e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800c880:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800c882:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c884:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800c888:	f003 0304 	and.w	r3, r3, #4
 800c88c:	2b00      	cmp	r3, #0
 800c88e:	d061      	beq.n	800c954 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800c890:	68ba      	ldr	r2, [r7, #8]
 800c892:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c894:	699b      	ldr	r3, [r3, #24]
 800c896:	441a      	add	r2, r3
 800c898:	2300      	movs	r3, #0
 800c89a:	9300      	str	r3, [sp, #0]
 800c89c:	2300      	movs	r3, #0
 800c89e:	2100      	movs	r1, #0
 800c8a0:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800c8a2:	f7ff fe01 	bl	800c4a8 <xTimerGenericCommand>
 800c8a6:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800c8a8:	6a3b      	ldr	r3, [r7, #32]
 800c8aa:	2b00      	cmp	r3, #0
 800c8ac:	d152      	bne.n	800c954 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 800c8ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c8b2:	f383 8811 	msr	BASEPRI, r3
 800c8b6:	f3bf 8f6f 	isb	sy
 800c8ba:	f3bf 8f4f 	dsb	sy
 800c8be:	61bb      	str	r3, [r7, #24]
}
 800c8c0:	bf00      	nop
 800c8c2:	bf00      	nop
 800c8c4:	e7fd      	b.n	800c8c2 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800c8c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c8c8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800c8cc:	f023 0301 	bic.w	r3, r3, #1
 800c8d0:	b2da      	uxtb	r2, r3
 800c8d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c8d4:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800c8d8:	e03d      	b.n	800c956 <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800c8da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c8dc:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800c8e0:	f043 0301 	orr.w	r3, r3, #1
 800c8e4:	b2da      	uxtb	r2, r3
 800c8e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c8e8:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800c8ec:	68ba      	ldr	r2, [r7, #8]
 800c8ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c8f0:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800c8f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c8f4:	699b      	ldr	r3, [r3, #24]
 800c8f6:	2b00      	cmp	r3, #0
 800c8f8:	d10b      	bne.n	800c912 <prvProcessReceivedCommands+0x162>
	__asm volatile
 800c8fa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c8fe:	f383 8811 	msr	BASEPRI, r3
 800c902:	f3bf 8f6f 	isb	sy
 800c906:	f3bf 8f4f 	dsb	sy
 800c90a:	617b      	str	r3, [r7, #20]
}
 800c90c:	bf00      	nop
 800c90e:	bf00      	nop
 800c910:	e7fd      	b.n	800c90e <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800c912:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c914:	699a      	ldr	r2, [r3, #24]
 800c916:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c918:	18d1      	adds	r1, r2, r3
 800c91a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c91c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c91e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800c920:	f7ff ff04 	bl	800c72c <prvInsertTimerInActiveList>
					break;
 800c924:	e017      	b.n	800c956 <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800c926:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c928:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800c92c:	f003 0302 	and.w	r3, r3, #2
 800c930:	2b00      	cmp	r3, #0
 800c932:	d103      	bne.n	800c93c <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 800c934:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800c936:	f000 fbe7 	bl	800d108 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800c93a:	e00c      	b.n	800c956 <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800c93c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c93e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800c942:	f023 0301 	bic.w	r3, r3, #1
 800c946:	b2da      	uxtb	r2, r3
 800c948:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c94a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800c94e:	e002      	b.n	800c956 <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 800c950:	bf00      	nop
 800c952:	e000      	b.n	800c956 <prvProcessReceivedCommands+0x1a6>
					break;
 800c954:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800c956:	4b08      	ldr	r3, [pc, #32]	@ (800c978 <prvProcessReceivedCommands+0x1c8>)
 800c958:	681b      	ldr	r3, [r3, #0]
 800c95a:	1d39      	adds	r1, r7, #4
 800c95c:	2200      	movs	r2, #0
 800c95e:	4618      	mov	r0, r3
 800c960:	f7fe fba6 	bl	800b0b0 <xQueueReceive>
 800c964:	4603      	mov	r3, r0
 800c966:	2b00      	cmp	r3, #0
 800c968:	f47f af26 	bne.w	800c7b8 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800c96c:	bf00      	nop
 800c96e:	bf00      	nop
 800c970:	3730      	adds	r7, #48	@ 0x30
 800c972:	46bd      	mov	sp, r7
 800c974:	bd80      	pop	{r7, pc}
 800c976:	bf00      	nop
 800c978:	20006860 	.word	0x20006860

0800c97c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800c97c:	b580      	push	{r7, lr}
 800c97e:	b088      	sub	sp, #32
 800c980:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800c982:	e049      	b.n	800ca18 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800c984:	4b2e      	ldr	r3, [pc, #184]	@ (800ca40 <prvSwitchTimerLists+0xc4>)
 800c986:	681b      	ldr	r3, [r3, #0]
 800c988:	68db      	ldr	r3, [r3, #12]
 800c98a:	681b      	ldr	r3, [r3, #0]
 800c98c:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c98e:	4b2c      	ldr	r3, [pc, #176]	@ (800ca40 <prvSwitchTimerLists+0xc4>)
 800c990:	681b      	ldr	r3, [r3, #0]
 800c992:	68db      	ldr	r3, [r3, #12]
 800c994:	68db      	ldr	r3, [r3, #12]
 800c996:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800c998:	68fb      	ldr	r3, [r7, #12]
 800c99a:	3304      	adds	r3, #4
 800c99c:	4618      	mov	r0, r3
 800c99e:	f7fe f8b3 	bl	800ab08 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800c9a2:	68fb      	ldr	r3, [r7, #12]
 800c9a4:	6a1b      	ldr	r3, [r3, #32]
 800c9a6:	68f8      	ldr	r0, [r7, #12]
 800c9a8:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800c9aa:	68fb      	ldr	r3, [r7, #12]
 800c9ac:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800c9b0:	f003 0304 	and.w	r3, r3, #4
 800c9b4:	2b00      	cmp	r3, #0
 800c9b6:	d02f      	beq.n	800ca18 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800c9b8:	68fb      	ldr	r3, [r7, #12]
 800c9ba:	699b      	ldr	r3, [r3, #24]
 800c9bc:	693a      	ldr	r2, [r7, #16]
 800c9be:	4413      	add	r3, r2
 800c9c0:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800c9c2:	68ba      	ldr	r2, [r7, #8]
 800c9c4:	693b      	ldr	r3, [r7, #16]
 800c9c6:	429a      	cmp	r2, r3
 800c9c8:	d90e      	bls.n	800c9e8 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800c9ca:	68fb      	ldr	r3, [r7, #12]
 800c9cc:	68ba      	ldr	r2, [r7, #8]
 800c9ce:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800c9d0:	68fb      	ldr	r3, [r7, #12]
 800c9d2:	68fa      	ldr	r2, [r7, #12]
 800c9d4:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800c9d6:	4b1a      	ldr	r3, [pc, #104]	@ (800ca40 <prvSwitchTimerLists+0xc4>)
 800c9d8:	681a      	ldr	r2, [r3, #0]
 800c9da:	68fb      	ldr	r3, [r7, #12]
 800c9dc:	3304      	adds	r3, #4
 800c9de:	4619      	mov	r1, r3
 800c9e0:	4610      	mov	r0, r2
 800c9e2:	f7fe f858 	bl	800aa96 <vListInsert>
 800c9e6:	e017      	b.n	800ca18 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800c9e8:	2300      	movs	r3, #0
 800c9ea:	9300      	str	r3, [sp, #0]
 800c9ec:	2300      	movs	r3, #0
 800c9ee:	693a      	ldr	r2, [r7, #16]
 800c9f0:	2100      	movs	r1, #0
 800c9f2:	68f8      	ldr	r0, [r7, #12]
 800c9f4:	f7ff fd58 	bl	800c4a8 <xTimerGenericCommand>
 800c9f8:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800c9fa:	687b      	ldr	r3, [r7, #4]
 800c9fc:	2b00      	cmp	r3, #0
 800c9fe:	d10b      	bne.n	800ca18 <prvSwitchTimerLists+0x9c>
	__asm volatile
 800ca00:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ca04:	f383 8811 	msr	BASEPRI, r3
 800ca08:	f3bf 8f6f 	isb	sy
 800ca0c:	f3bf 8f4f 	dsb	sy
 800ca10:	603b      	str	r3, [r7, #0]
}
 800ca12:	bf00      	nop
 800ca14:	bf00      	nop
 800ca16:	e7fd      	b.n	800ca14 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800ca18:	4b09      	ldr	r3, [pc, #36]	@ (800ca40 <prvSwitchTimerLists+0xc4>)
 800ca1a:	681b      	ldr	r3, [r3, #0]
 800ca1c:	681b      	ldr	r3, [r3, #0]
 800ca1e:	2b00      	cmp	r3, #0
 800ca20:	d1b0      	bne.n	800c984 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800ca22:	4b07      	ldr	r3, [pc, #28]	@ (800ca40 <prvSwitchTimerLists+0xc4>)
 800ca24:	681b      	ldr	r3, [r3, #0]
 800ca26:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800ca28:	4b06      	ldr	r3, [pc, #24]	@ (800ca44 <prvSwitchTimerLists+0xc8>)
 800ca2a:	681b      	ldr	r3, [r3, #0]
 800ca2c:	4a04      	ldr	r2, [pc, #16]	@ (800ca40 <prvSwitchTimerLists+0xc4>)
 800ca2e:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800ca30:	4a04      	ldr	r2, [pc, #16]	@ (800ca44 <prvSwitchTimerLists+0xc8>)
 800ca32:	697b      	ldr	r3, [r7, #20]
 800ca34:	6013      	str	r3, [r2, #0]
}
 800ca36:	bf00      	nop
 800ca38:	3718      	adds	r7, #24
 800ca3a:	46bd      	mov	sp, r7
 800ca3c:	bd80      	pop	{r7, pc}
 800ca3e:	bf00      	nop
 800ca40:	20006858 	.word	0x20006858
 800ca44:	2000685c 	.word	0x2000685c

0800ca48 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800ca48:	b580      	push	{r7, lr}
 800ca4a:	b082      	sub	sp, #8
 800ca4c:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800ca4e:	f000 f96b 	bl	800cd28 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800ca52:	4b15      	ldr	r3, [pc, #84]	@ (800caa8 <prvCheckForValidListAndQueue+0x60>)
 800ca54:	681b      	ldr	r3, [r3, #0]
 800ca56:	2b00      	cmp	r3, #0
 800ca58:	d120      	bne.n	800ca9c <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800ca5a:	4814      	ldr	r0, [pc, #80]	@ (800caac <prvCheckForValidListAndQueue+0x64>)
 800ca5c:	f7fd ffca 	bl	800a9f4 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800ca60:	4813      	ldr	r0, [pc, #76]	@ (800cab0 <prvCheckForValidListAndQueue+0x68>)
 800ca62:	f7fd ffc7 	bl	800a9f4 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800ca66:	4b13      	ldr	r3, [pc, #76]	@ (800cab4 <prvCheckForValidListAndQueue+0x6c>)
 800ca68:	4a10      	ldr	r2, [pc, #64]	@ (800caac <prvCheckForValidListAndQueue+0x64>)
 800ca6a:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800ca6c:	4b12      	ldr	r3, [pc, #72]	@ (800cab8 <prvCheckForValidListAndQueue+0x70>)
 800ca6e:	4a10      	ldr	r2, [pc, #64]	@ (800cab0 <prvCheckForValidListAndQueue+0x68>)
 800ca70:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800ca72:	2300      	movs	r3, #0
 800ca74:	9300      	str	r3, [sp, #0]
 800ca76:	4b11      	ldr	r3, [pc, #68]	@ (800cabc <prvCheckForValidListAndQueue+0x74>)
 800ca78:	4a11      	ldr	r2, [pc, #68]	@ (800cac0 <prvCheckForValidListAndQueue+0x78>)
 800ca7a:	2110      	movs	r1, #16
 800ca7c:	200a      	movs	r0, #10
 800ca7e:	f7fe f8d7 	bl	800ac30 <xQueueGenericCreateStatic>
 800ca82:	4603      	mov	r3, r0
 800ca84:	4a08      	ldr	r2, [pc, #32]	@ (800caa8 <prvCheckForValidListAndQueue+0x60>)
 800ca86:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800ca88:	4b07      	ldr	r3, [pc, #28]	@ (800caa8 <prvCheckForValidListAndQueue+0x60>)
 800ca8a:	681b      	ldr	r3, [r3, #0]
 800ca8c:	2b00      	cmp	r3, #0
 800ca8e:	d005      	beq.n	800ca9c <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800ca90:	4b05      	ldr	r3, [pc, #20]	@ (800caa8 <prvCheckForValidListAndQueue+0x60>)
 800ca92:	681b      	ldr	r3, [r3, #0]
 800ca94:	490b      	ldr	r1, [pc, #44]	@ (800cac4 <prvCheckForValidListAndQueue+0x7c>)
 800ca96:	4618      	mov	r0, r3
 800ca98:	f7fe fcfc 	bl	800b494 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800ca9c:	f000 f976 	bl	800cd8c <vPortExitCritical>
}
 800caa0:	bf00      	nop
 800caa2:	46bd      	mov	sp, r7
 800caa4:	bd80      	pop	{r7, pc}
 800caa6:	bf00      	nop
 800caa8:	20006860 	.word	0x20006860
 800caac:	20006830 	.word	0x20006830
 800cab0:	20006844 	.word	0x20006844
 800cab4:	20006858 	.word	0x20006858
 800cab8:	2000685c 	.word	0x2000685c
 800cabc:	2000690c 	.word	0x2000690c
 800cac0:	2000686c 	.word	0x2000686c
 800cac4:	0801bb6c 	.word	0x0801bb6c

0800cac8 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800cac8:	b480      	push	{r7}
 800caca:	b085      	sub	sp, #20
 800cacc:	af00      	add	r7, sp, #0
 800cace:	60f8      	str	r0, [r7, #12]
 800cad0:	60b9      	str	r1, [r7, #8]
 800cad2:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800cad4:	68fb      	ldr	r3, [r7, #12]
 800cad6:	3b04      	subs	r3, #4
 800cad8:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800cada:	68fb      	ldr	r3, [r7, #12]
 800cadc:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800cae0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800cae2:	68fb      	ldr	r3, [r7, #12]
 800cae4:	3b04      	subs	r3, #4
 800cae6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800cae8:	68bb      	ldr	r3, [r7, #8]
 800caea:	f023 0201 	bic.w	r2, r3, #1
 800caee:	68fb      	ldr	r3, [r7, #12]
 800caf0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800caf2:	68fb      	ldr	r3, [r7, #12]
 800caf4:	3b04      	subs	r3, #4
 800caf6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800caf8:	4a0c      	ldr	r2, [pc, #48]	@ (800cb2c <pxPortInitialiseStack+0x64>)
 800cafa:	68fb      	ldr	r3, [r7, #12]
 800cafc:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800cafe:	68fb      	ldr	r3, [r7, #12]
 800cb00:	3b14      	subs	r3, #20
 800cb02:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800cb04:	687a      	ldr	r2, [r7, #4]
 800cb06:	68fb      	ldr	r3, [r7, #12]
 800cb08:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800cb0a:	68fb      	ldr	r3, [r7, #12]
 800cb0c:	3b04      	subs	r3, #4
 800cb0e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800cb10:	68fb      	ldr	r3, [r7, #12]
 800cb12:	f06f 0202 	mvn.w	r2, #2
 800cb16:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800cb18:	68fb      	ldr	r3, [r7, #12]
 800cb1a:	3b20      	subs	r3, #32
 800cb1c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800cb1e:	68fb      	ldr	r3, [r7, #12]
}
 800cb20:	4618      	mov	r0, r3
 800cb22:	3714      	adds	r7, #20
 800cb24:	46bd      	mov	sp, r7
 800cb26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb2a:	4770      	bx	lr
 800cb2c:	0800cb31 	.word	0x0800cb31

0800cb30 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800cb30:	b480      	push	{r7}
 800cb32:	b085      	sub	sp, #20
 800cb34:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800cb36:	2300      	movs	r3, #0
 800cb38:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800cb3a:	4b13      	ldr	r3, [pc, #76]	@ (800cb88 <prvTaskExitError+0x58>)
 800cb3c:	681b      	ldr	r3, [r3, #0]
 800cb3e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800cb42:	d00b      	beq.n	800cb5c <prvTaskExitError+0x2c>
	__asm volatile
 800cb44:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cb48:	f383 8811 	msr	BASEPRI, r3
 800cb4c:	f3bf 8f6f 	isb	sy
 800cb50:	f3bf 8f4f 	dsb	sy
 800cb54:	60fb      	str	r3, [r7, #12]
}
 800cb56:	bf00      	nop
 800cb58:	bf00      	nop
 800cb5a:	e7fd      	b.n	800cb58 <prvTaskExitError+0x28>
	__asm volatile
 800cb5c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cb60:	f383 8811 	msr	BASEPRI, r3
 800cb64:	f3bf 8f6f 	isb	sy
 800cb68:	f3bf 8f4f 	dsb	sy
 800cb6c:	60bb      	str	r3, [r7, #8]
}
 800cb6e:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800cb70:	bf00      	nop
 800cb72:	687b      	ldr	r3, [r7, #4]
 800cb74:	2b00      	cmp	r3, #0
 800cb76:	d0fc      	beq.n	800cb72 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800cb78:	bf00      	nop
 800cb7a:	bf00      	nop
 800cb7c:	3714      	adds	r7, #20
 800cb7e:	46bd      	mov	sp, r7
 800cb80:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb84:	4770      	bx	lr
 800cb86:	bf00      	nop
 800cb88:	2000004c 	.word	0x2000004c
 800cb8c:	00000000 	.word	0x00000000

0800cb90 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800cb90:	4b07      	ldr	r3, [pc, #28]	@ (800cbb0 <pxCurrentTCBConst2>)
 800cb92:	6819      	ldr	r1, [r3, #0]
 800cb94:	6808      	ldr	r0, [r1, #0]
 800cb96:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cb9a:	f380 8809 	msr	PSP, r0
 800cb9e:	f3bf 8f6f 	isb	sy
 800cba2:	f04f 0000 	mov.w	r0, #0
 800cba6:	f380 8811 	msr	BASEPRI, r0
 800cbaa:	4770      	bx	lr
 800cbac:	f3af 8000 	nop.w

0800cbb0 <pxCurrentTCBConst2>:
 800cbb0:	20006330 	.word	0x20006330
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800cbb4:	bf00      	nop
 800cbb6:	bf00      	nop

0800cbb8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800cbb8:	4808      	ldr	r0, [pc, #32]	@ (800cbdc <prvPortStartFirstTask+0x24>)
 800cbba:	6800      	ldr	r0, [r0, #0]
 800cbbc:	6800      	ldr	r0, [r0, #0]
 800cbbe:	f380 8808 	msr	MSP, r0
 800cbc2:	f04f 0000 	mov.w	r0, #0
 800cbc6:	f380 8814 	msr	CONTROL, r0
 800cbca:	b662      	cpsie	i
 800cbcc:	b661      	cpsie	f
 800cbce:	f3bf 8f4f 	dsb	sy
 800cbd2:	f3bf 8f6f 	isb	sy
 800cbd6:	df00      	svc	0
 800cbd8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800cbda:	bf00      	nop
 800cbdc:	e000ed08 	.word	0xe000ed08

0800cbe0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800cbe0:	b580      	push	{r7, lr}
 800cbe2:	b086      	sub	sp, #24
 800cbe4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800cbe6:	4b47      	ldr	r3, [pc, #284]	@ (800cd04 <xPortStartScheduler+0x124>)
 800cbe8:	681b      	ldr	r3, [r3, #0]
 800cbea:	4a47      	ldr	r2, [pc, #284]	@ (800cd08 <xPortStartScheduler+0x128>)
 800cbec:	4293      	cmp	r3, r2
 800cbee:	d10b      	bne.n	800cc08 <xPortStartScheduler+0x28>
	__asm volatile
 800cbf0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cbf4:	f383 8811 	msr	BASEPRI, r3
 800cbf8:	f3bf 8f6f 	isb	sy
 800cbfc:	f3bf 8f4f 	dsb	sy
 800cc00:	613b      	str	r3, [r7, #16]
}
 800cc02:	bf00      	nop
 800cc04:	bf00      	nop
 800cc06:	e7fd      	b.n	800cc04 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800cc08:	4b3e      	ldr	r3, [pc, #248]	@ (800cd04 <xPortStartScheduler+0x124>)
 800cc0a:	681b      	ldr	r3, [r3, #0]
 800cc0c:	4a3f      	ldr	r2, [pc, #252]	@ (800cd0c <xPortStartScheduler+0x12c>)
 800cc0e:	4293      	cmp	r3, r2
 800cc10:	d10b      	bne.n	800cc2a <xPortStartScheduler+0x4a>
	__asm volatile
 800cc12:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cc16:	f383 8811 	msr	BASEPRI, r3
 800cc1a:	f3bf 8f6f 	isb	sy
 800cc1e:	f3bf 8f4f 	dsb	sy
 800cc22:	60fb      	str	r3, [r7, #12]
}
 800cc24:	bf00      	nop
 800cc26:	bf00      	nop
 800cc28:	e7fd      	b.n	800cc26 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800cc2a:	4b39      	ldr	r3, [pc, #228]	@ (800cd10 <xPortStartScheduler+0x130>)
 800cc2c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800cc2e:	697b      	ldr	r3, [r7, #20]
 800cc30:	781b      	ldrb	r3, [r3, #0]
 800cc32:	b2db      	uxtb	r3, r3
 800cc34:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800cc36:	697b      	ldr	r3, [r7, #20]
 800cc38:	22ff      	movs	r2, #255	@ 0xff
 800cc3a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800cc3c:	697b      	ldr	r3, [r7, #20]
 800cc3e:	781b      	ldrb	r3, [r3, #0]
 800cc40:	b2db      	uxtb	r3, r3
 800cc42:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800cc44:	78fb      	ldrb	r3, [r7, #3]
 800cc46:	b2db      	uxtb	r3, r3
 800cc48:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800cc4c:	b2da      	uxtb	r2, r3
 800cc4e:	4b31      	ldr	r3, [pc, #196]	@ (800cd14 <xPortStartScheduler+0x134>)
 800cc50:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800cc52:	4b31      	ldr	r3, [pc, #196]	@ (800cd18 <xPortStartScheduler+0x138>)
 800cc54:	2207      	movs	r2, #7
 800cc56:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800cc58:	e009      	b.n	800cc6e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800cc5a:	4b2f      	ldr	r3, [pc, #188]	@ (800cd18 <xPortStartScheduler+0x138>)
 800cc5c:	681b      	ldr	r3, [r3, #0]
 800cc5e:	3b01      	subs	r3, #1
 800cc60:	4a2d      	ldr	r2, [pc, #180]	@ (800cd18 <xPortStartScheduler+0x138>)
 800cc62:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800cc64:	78fb      	ldrb	r3, [r7, #3]
 800cc66:	b2db      	uxtb	r3, r3
 800cc68:	005b      	lsls	r3, r3, #1
 800cc6a:	b2db      	uxtb	r3, r3
 800cc6c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800cc6e:	78fb      	ldrb	r3, [r7, #3]
 800cc70:	b2db      	uxtb	r3, r3
 800cc72:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800cc76:	2b80      	cmp	r3, #128	@ 0x80
 800cc78:	d0ef      	beq.n	800cc5a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800cc7a:	4b27      	ldr	r3, [pc, #156]	@ (800cd18 <xPortStartScheduler+0x138>)
 800cc7c:	681b      	ldr	r3, [r3, #0]
 800cc7e:	f1c3 0307 	rsb	r3, r3, #7
 800cc82:	2b04      	cmp	r3, #4
 800cc84:	d00b      	beq.n	800cc9e <xPortStartScheduler+0xbe>
	__asm volatile
 800cc86:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cc8a:	f383 8811 	msr	BASEPRI, r3
 800cc8e:	f3bf 8f6f 	isb	sy
 800cc92:	f3bf 8f4f 	dsb	sy
 800cc96:	60bb      	str	r3, [r7, #8]
}
 800cc98:	bf00      	nop
 800cc9a:	bf00      	nop
 800cc9c:	e7fd      	b.n	800cc9a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800cc9e:	4b1e      	ldr	r3, [pc, #120]	@ (800cd18 <xPortStartScheduler+0x138>)
 800cca0:	681b      	ldr	r3, [r3, #0]
 800cca2:	021b      	lsls	r3, r3, #8
 800cca4:	4a1c      	ldr	r2, [pc, #112]	@ (800cd18 <xPortStartScheduler+0x138>)
 800cca6:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800cca8:	4b1b      	ldr	r3, [pc, #108]	@ (800cd18 <xPortStartScheduler+0x138>)
 800ccaa:	681b      	ldr	r3, [r3, #0]
 800ccac:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800ccb0:	4a19      	ldr	r2, [pc, #100]	@ (800cd18 <xPortStartScheduler+0x138>)
 800ccb2:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800ccb4:	687b      	ldr	r3, [r7, #4]
 800ccb6:	b2da      	uxtb	r2, r3
 800ccb8:	697b      	ldr	r3, [r7, #20]
 800ccba:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800ccbc:	4b17      	ldr	r3, [pc, #92]	@ (800cd1c <xPortStartScheduler+0x13c>)
 800ccbe:	681b      	ldr	r3, [r3, #0]
 800ccc0:	4a16      	ldr	r2, [pc, #88]	@ (800cd1c <xPortStartScheduler+0x13c>)
 800ccc2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800ccc6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800ccc8:	4b14      	ldr	r3, [pc, #80]	@ (800cd1c <xPortStartScheduler+0x13c>)
 800ccca:	681b      	ldr	r3, [r3, #0]
 800cccc:	4a13      	ldr	r2, [pc, #76]	@ (800cd1c <xPortStartScheduler+0x13c>)
 800ccce:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 800ccd2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800ccd4:	f000 f8da 	bl	800ce8c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800ccd8:	4b11      	ldr	r3, [pc, #68]	@ (800cd20 <xPortStartScheduler+0x140>)
 800ccda:	2200      	movs	r2, #0
 800ccdc:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800ccde:	f000 f8f9 	bl	800ced4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800cce2:	4b10      	ldr	r3, [pc, #64]	@ (800cd24 <xPortStartScheduler+0x144>)
 800cce4:	681b      	ldr	r3, [r3, #0]
 800cce6:	4a0f      	ldr	r2, [pc, #60]	@ (800cd24 <xPortStartScheduler+0x144>)
 800cce8:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800ccec:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800ccee:	f7ff ff63 	bl	800cbb8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800ccf2:	f7ff f807 	bl	800bd04 <vTaskSwitchContext>
	prvTaskExitError();
 800ccf6:	f7ff ff1b 	bl	800cb30 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800ccfa:	2300      	movs	r3, #0
}
 800ccfc:	4618      	mov	r0, r3
 800ccfe:	3718      	adds	r7, #24
 800cd00:	46bd      	mov	sp, r7
 800cd02:	bd80      	pop	{r7, pc}
 800cd04:	e000ed00 	.word	0xe000ed00
 800cd08:	410fc271 	.word	0x410fc271
 800cd0c:	410fc270 	.word	0x410fc270
 800cd10:	e000e400 	.word	0xe000e400
 800cd14:	2000695c 	.word	0x2000695c
 800cd18:	20006960 	.word	0x20006960
 800cd1c:	e000ed20 	.word	0xe000ed20
 800cd20:	2000004c 	.word	0x2000004c
 800cd24:	e000ef34 	.word	0xe000ef34

0800cd28 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800cd28:	b480      	push	{r7}
 800cd2a:	b083      	sub	sp, #12
 800cd2c:	af00      	add	r7, sp, #0
	__asm volatile
 800cd2e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cd32:	f383 8811 	msr	BASEPRI, r3
 800cd36:	f3bf 8f6f 	isb	sy
 800cd3a:	f3bf 8f4f 	dsb	sy
 800cd3e:	607b      	str	r3, [r7, #4]
}
 800cd40:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800cd42:	4b10      	ldr	r3, [pc, #64]	@ (800cd84 <vPortEnterCritical+0x5c>)
 800cd44:	681b      	ldr	r3, [r3, #0]
 800cd46:	3301      	adds	r3, #1
 800cd48:	4a0e      	ldr	r2, [pc, #56]	@ (800cd84 <vPortEnterCritical+0x5c>)
 800cd4a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800cd4c:	4b0d      	ldr	r3, [pc, #52]	@ (800cd84 <vPortEnterCritical+0x5c>)
 800cd4e:	681b      	ldr	r3, [r3, #0]
 800cd50:	2b01      	cmp	r3, #1
 800cd52:	d110      	bne.n	800cd76 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800cd54:	4b0c      	ldr	r3, [pc, #48]	@ (800cd88 <vPortEnterCritical+0x60>)
 800cd56:	681b      	ldr	r3, [r3, #0]
 800cd58:	b2db      	uxtb	r3, r3
 800cd5a:	2b00      	cmp	r3, #0
 800cd5c:	d00b      	beq.n	800cd76 <vPortEnterCritical+0x4e>
	__asm volatile
 800cd5e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cd62:	f383 8811 	msr	BASEPRI, r3
 800cd66:	f3bf 8f6f 	isb	sy
 800cd6a:	f3bf 8f4f 	dsb	sy
 800cd6e:	603b      	str	r3, [r7, #0]
}
 800cd70:	bf00      	nop
 800cd72:	bf00      	nop
 800cd74:	e7fd      	b.n	800cd72 <vPortEnterCritical+0x4a>
	}
}
 800cd76:	bf00      	nop
 800cd78:	370c      	adds	r7, #12
 800cd7a:	46bd      	mov	sp, r7
 800cd7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd80:	4770      	bx	lr
 800cd82:	bf00      	nop
 800cd84:	2000004c 	.word	0x2000004c
 800cd88:	e000ed04 	.word	0xe000ed04

0800cd8c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800cd8c:	b480      	push	{r7}
 800cd8e:	b083      	sub	sp, #12
 800cd90:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800cd92:	4b12      	ldr	r3, [pc, #72]	@ (800cddc <vPortExitCritical+0x50>)
 800cd94:	681b      	ldr	r3, [r3, #0]
 800cd96:	2b00      	cmp	r3, #0
 800cd98:	d10b      	bne.n	800cdb2 <vPortExitCritical+0x26>
	__asm volatile
 800cd9a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cd9e:	f383 8811 	msr	BASEPRI, r3
 800cda2:	f3bf 8f6f 	isb	sy
 800cda6:	f3bf 8f4f 	dsb	sy
 800cdaa:	607b      	str	r3, [r7, #4]
}
 800cdac:	bf00      	nop
 800cdae:	bf00      	nop
 800cdb0:	e7fd      	b.n	800cdae <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800cdb2:	4b0a      	ldr	r3, [pc, #40]	@ (800cddc <vPortExitCritical+0x50>)
 800cdb4:	681b      	ldr	r3, [r3, #0]
 800cdb6:	3b01      	subs	r3, #1
 800cdb8:	4a08      	ldr	r2, [pc, #32]	@ (800cddc <vPortExitCritical+0x50>)
 800cdba:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800cdbc:	4b07      	ldr	r3, [pc, #28]	@ (800cddc <vPortExitCritical+0x50>)
 800cdbe:	681b      	ldr	r3, [r3, #0]
 800cdc0:	2b00      	cmp	r3, #0
 800cdc2:	d105      	bne.n	800cdd0 <vPortExitCritical+0x44>
 800cdc4:	2300      	movs	r3, #0
 800cdc6:	603b      	str	r3, [r7, #0]
	__asm volatile
 800cdc8:	683b      	ldr	r3, [r7, #0]
 800cdca:	f383 8811 	msr	BASEPRI, r3
}
 800cdce:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800cdd0:	bf00      	nop
 800cdd2:	370c      	adds	r7, #12
 800cdd4:	46bd      	mov	sp, r7
 800cdd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdda:	4770      	bx	lr
 800cddc:	2000004c 	.word	0x2000004c

0800cde0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800cde0:	f3ef 8009 	mrs	r0, PSP
 800cde4:	f3bf 8f6f 	isb	sy
 800cde8:	4b15      	ldr	r3, [pc, #84]	@ (800ce40 <pxCurrentTCBConst>)
 800cdea:	681a      	ldr	r2, [r3, #0]
 800cdec:	f01e 0f10 	tst.w	lr, #16
 800cdf0:	bf08      	it	eq
 800cdf2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800cdf6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cdfa:	6010      	str	r0, [r2, #0]
 800cdfc:	e92d 0009 	stmdb	sp!, {r0, r3}
 800ce00:	f04f 0050 	mov.w	r0, #80	@ 0x50
 800ce04:	f380 8811 	msr	BASEPRI, r0
 800ce08:	f3bf 8f4f 	dsb	sy
 800ce0c:	f3bf 8f6f 	isb	sy
 800ce10:	f7fe ff78 	bl	800bd04 <vTaskSwitchContext>
 800ce14:	f04f 0000 	mov.w	r0, #0
 800ce18:	f380 8811 	msr	BASEPRI, r0
 800ce1c:	bc09      	pop	{r0, r3}
 800ce1e:	6819      	ldr	r1, [r3, #0]
 800ce20:	6808      	ldr	r0, [r1, #0]
 800ce22:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ce26:	f01e 0f10 	tst.w	lr, #16
 800ce2a:	bf08      	it	eq
 800ce2c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800ce30:	f380 8809 	msr	PSP, r0
 800ce34:	f3bf 8f6f 	isb	sy
 800ce38:	4770      	bx	lr
 800ce3a:	bf00      	nop
 800ce3c:	f3af 8000 	nop.w

0800ce40 <pxCurrentTCBConst>:
 800ce40:	20006330 	.word	0x20006330
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800ce44:	bf00      	nop
 800ce46:	bf00      	nop

0800ce48 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800ce48:	b580      	push	{r7, lr}
 800ce4a:	b082      	sub	sp, #8
 800ce4c:	af00      	add	r7, sp, #0
	__asm volatile
 800ce4e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ce52:	f383 8811 	msr	BASEPRI, r3
 800ce56:	f3bf 8f6f 	isb	sy
 800ce5a:	f3bf 8f4f 	dsb	sy
 800ce5e:	607b      	str	r3, [r7, #4]
}
 800ce60:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800ce62:	f7fe fe95 	bl	800bb90 <xTaskIncrementTick>
 800ce66:	4603      	mov	r3, r0
 800ce68:	2b00      	cmp	r3, #0
 800ce6a:	d003      	beq.n	800ce74 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800ce6c:	4b06      	ldr	r3, [pc, #24]	@ (800ce88 <xPortSysTickHandler+0x40>)
 800ce6e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800ce72:	601a      	str	r2, [r3, #0]
 800ce74:	2300      	movs	r3, #0
 800ce76:	603b      	str	r3, [r7, #0]
	__asm volatile
 800ce78:	683b      	ldr	r3, [r7, #0]
 800ce7a:	f383 8811 	msr	BASEPRI, r3
}
 800ce7e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800ce80:	bf00      	nop
 800ce82:	3708      	adds	r7, #8
 800ce84:	46bd      	mov	sp, r7
 800ce86:	bd80      	pop	{r7, pc}
 800ce88:	e000ed04 	.word	0xe000ed04

0800ce8c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800ce8c:	b480      	push	{r7}
 800ce8e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800ce90:	4b0b      	ldr	r3, [pc, #44]	@ (800cec0 <vPortSetupTimerInterrupt+0x34>)
 800ce92:	2200      	movs	r2, #0
 800ce94:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800ce96:	4b0b      	ldr	r3, [pc, #44]	@ (800cec4 <vPortSetupTimerInterrupt+0x38>)
 800ce98:	2200      	movs	r2, #0
 800ce9a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800ce9c:	4b0a      	ldr	r3, [pc, #40]	@ (800cec8 <vPortSetupTimerInterrupt+0x3c>)
 800ce9e:	681b      	ldr	r3, [r3, #0]
 800cea0:	4a0a      	ldr	r2, [pc, #40]	@ (800cecc <vPortSetupTimerInterrupt+0x40>)
 800cea2:	fba2 2303 	umull	r2, r3, r2, r3
 800cea6:	099b      	lsrs	r3, r3, #6
 800cea8:	4a09      	ldr	r2, [pc, #36]	@ (800ced0 <vPortSetupTimerInterrupt+0x44>)
 800ceaa:	3b01      	subs	r3, #1
 800ceac:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800ceae:	4b04      	ldr	r3, [pc, #16]	@ (800cec0 <vPortSetupTimerInterrupt+0x34>)
 800ceb0:	2207      	movs	r2, #7
 800ceb2:	601a      	str	r2, [r3, #0]
}
 800ceb4:	bf00      	nop
 800ceb6:	46bd      	mov	sp, r7
 800ceb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cebc:	4770      	bx	lr
 800cebe:	bf00      	nop
 800cec0:	e000e010 	.word	0xe000e010
 800cec4:	e000e018 	.word	0xe000e018
 800cec8:	20000040 	.word	0x20000040
 800cecc:	10624dd3 	.word	0x10624dd3
 800ced0:	e000e014 	.word	0xe000e014

0800ced4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800ced4:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 800cee4 <vPortEnableVFP+0x10>
 800ced8:	6801      	ldr	r1, [r0, #0]
 800ceda:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800cede:	6001      	str	r1, [r0, #0]
 800cee0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800cee2:	bf00      	nop
 800cee4:	e000ed88 	.word	0xe000ed88

0800cee8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800cee8:	b480      	push	{r7}
 800ceea:	b085      	sub	sp, #20
 800ceec:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800ceee:	f3ef 8305 	mrs	r3, IPSR
 800cef2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800cef4:	68fb      	ldr	r3, [r7, #12]
 800cef6:	2b0f      	cmp	r3, #15
 800cef8:	d915      	bls.n	800cf26 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800cefa:	4a18      	ldr	r2, [pc, #96]	@ (800cf5c <vPortValidateInterruptPriority+0x74>)
 800cefc:	68fb      	ldr	r3, [r7, #12]
 800cefe:	4413      	add	r3, r2
 800cf00:	781b      	ldrb	r3, [r3, #0]
 800cf02:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800cf04:	4b16      	ldr	r3, [pc, #88]	@ (800cf60 <vPortValidateInterruptPriority+0x78>)
 800cf06:	781b      	ldrb	r3, [r3, #0]
 800cf08:	7afa      	ldrb	r2, [r7, #11]
 800cf0a:	429a      	cmp	r2, r3
 800cf0c:	d20b      	bcs.n	800cf26 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800cf0e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cf12:	f383 8811 	msr	BASEPRI, r3
 800cf16:	f3bf 8f6f 	isb	sy
 800cf1a:	f3bf 8f4f 	dsb	sy
 800cf1e:	607b      	str	r3, [r7, #4]
}
 800cf20:	bf00      	nop
 800cf22:	bf00      	nop
 800cf24:	e7fd      	b.n	800cf22 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800cf26:	4b0f      	ldr	r3, [pc, #60]	@ (800cf64 <vPortValidateInterruptPriority+0x7c>)
 800cf28:	681b      	ldr	r3, [r3, #0]
 800cf2a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800cf2e:	4b0e      	ldr	r3, [pc, #56]	@ (800cf68 <vPortValidateInterruptPriority+0x80>)
 800cf30:	681b      	ldr	r3, [r3, #0]
 800cf32:	429a      	cmp	r2, r3
 800cf34:	d90b      	bls.n	800cf4e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 800cf36:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cf3a:	f383 8811 	msr	BASEPRI, r3
 800cf3e:	f3bf 8f6f 	isb	sy
 800cf42:	f3bf 8f4f 	dsb	sy
 800cf46:	603b      	str	r3, [r7, #0]
}
 800cf48:	bf00      	nop
 800cf4a:	bf00      	nop
 800cf4c:	e7fd      	b.n	800cf4a <vPortValidateInterruptPriority+0x62>
	}
 800cf4e:	bf00      	nop
 800cf50:	3714      	adds	r7, #20
 800cf52:	46bd      	mov	sp, r7
 800cf54:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf58:	4770      	bx	lr
 800cf5a:	bf00      	nop
 800cf5c:	e000e3f0 	.word	0xe000e3f0
 800cf60:	2000695c 	.word	0x2000695c
 800cf64:	e000ed0c 	.word	0xe000ed0c
 800cf68:	20006960 	.word	0x20006960

0800cf6c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800cf6c:	b580      	push	{r7, lr}
 800cf6e:	b08a      	sub	sp, #40	@ 0x28
 800cf70:	af00      	add	r7, sp, #0
 800cf72:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800cf74:	2300      	movs	r3, #0
 800cf76:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800cf78:	f7fe fd4e 	bl	800ba18 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800cf7c:	4b5c      	ldr	r3, [pc, #368]	@ (800d0f0 <pvPortMalloc+0x184>)
 800cf7e:	681b      	ldr	r3, [r3, #0]
 800cf80:	2b00      	cmp	r3, #0
 800cf82:	d101      	bne.n	800cf88 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800cf84:	f000 f924 	bl	800d1d0 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800cf88:	4b5a      	ldr	r3, [pc, #360]	@ (800d0f4 <pvPortMalloc+0x188>)
 800cf8a:	681a      	ldr	r2, [r3, #0]
 800cf8c:	687b      	ldr	r3, [r7, #4]
 800cf8e:	4013      	ands	r3, r2
 800cf90:	2b00      	cmp	r3, #0
 800cf92:	f040 8095 	bne.w	800d0c0 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800cf96:	687b      	ldr	r3, [r7, #4]
 800cf98:	2b00      	cmp	r3, #0
 800cf9a:	d01e      	beq.n	800cfda <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800cf9c:	2208      	movs	r2, #8
 800cf9e:	687b      	ldr	r3, [r7, #4]
 800cfa0:	4413      	add	r3, r2
 800cfa2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800cfa4:	687b      	ldr	r3, [r7, #4]
 800cfa6:	f003 0307 	and.w	r3, r3, #7
 800cfaa:	2b00      	cmp	r3, #0
 800cfac:	d015      	beq.n	800cfda <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800cfae:	687b      	ldr	r3, [r7, #4]
 800cfb0:	f023 0307 	bic.w	r3, r3, #7
 800cfb4:	3308      	adds	r3, #8
 800cfb6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800cfb8:	687b      	ldr	r3, [r7, #4]
 800cfba:	f003 0307 	and.w	r3, r3, #7
 800cfbe:	2b00      	cmp	r3, #0
 800cfc0:	d00b      	beq.n	800cfda <pvPortMalloc+0x6e>
	__asm volatile
 800cfc2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cfc6:	f383 8811 	msr	BASEPRI, r3
 800cfca:	f3bf 8f6f 	isb	sy
 800cfce:	f3bf 8f4f 	dsb	sy
 800cfd2:	617b      	str	r3, [r7, #20]
}
 800cfd4:	bf00      	nop
 800cfd6:	bf00      	nop
 800cfd8:	e7fd      	b.n	800cfd6 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800cfda:	687b      	ldr	r3, [r7, #4]
 800cfdc:	2b00      	cmp	r3, #0
 800cfde:	d06f      	beq.n	800d0c0 <pvPortMalloc+0x154>
 800cfe0:	4b45      	ldr	r3, [pc, #276]	@ (800d0f8 <pvPortMalloc+0x18c>)
 800cfe2:	681b      	ldr	r3, [r3, #0]
 800cfe4:	687a      	ldr	r2, [r7, #4]
 800cfe6:	429a      	cmp	r2, r3
 800cfe8:	d86a      	bhi.n	800d0c0 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800cfea:	4b44      	ldr	r3, [pc, #272]	@ (800d0fc <pvPortMalloc+0x190>)
 800cfec:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800cfee:	4b43      	ldr	r3, [pc, #268]	@ (800d0fc <pvPortMalloc+0x190>)
 800cff0:	681b      	ldr	r3, [r3, #0]
 800cff2:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800cff4:	e004      	b.n	800d000 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 800cff6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cff8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800cffa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cffc:	681b      	ldr	r3, [r3, #0]
 800cffe:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800d000:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d002:	685b      	ldr	r3, [r3, #4]
 800d004:	687a      	ldr	r2, [r7, #4]
 800d006:	429a      	cmp	r2, r3
 800d008:	d903      	bls.n	800d012 <pvPortMalloc+0xa6>
 800d00a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d00c:	681b      	ldr	r3, [r3, #0]
 800d00e:	2b00      	cmp	r3, #0
 800d010:	d1f1      	bne.n	800cff6 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800d012:	4b37      	ldr	r3, [pc, #220]	@ (800d0f0 <pvPortMalloc+0x184>)
 800d014:	681b      	ldr	r3, [r3, #0]
 800d016:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800d018:	429a      	cmp	r2, r3
 800d01a:	d051      	beq.n	800d0c0 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800d01c:	6a3b      	ldr	r3, [r7, #32]
 800d01e:	681b      	ldr	r3, [r3, #0]
 800d020:	2208      	movs	r2, #8
 800d022:	4413      	add	r3, r2
 800d024:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800d026:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d028:	681a      	ldr	r2, [r3, #0]
 800d02a:	6a3b      	ldr	r3, [r7, #32]
 800d02c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800d02e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d030:	685a      	ldr	r2, [r3, #4]
 800d032:	687b      	ldr	r3, [r7, #4]
 800d034:	1ad2      	subs	r2, r2, r3
 800d036:	2308      	movs	r3, #8
 800d038:	005b      	lsls	r3, r3, #1
 800d03a:	429a      	cmp	r2, r3
 800d03c:	d920      	bls.n	800d080 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800d03e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800d040:	687b      	ldr	r3, [r7, #4]
 800d042:	4413      	add	r3, r2
 800d044:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800d046:	69bb      	ldr	r3, [r7, #24]
 800d048:	f003 0307 	and.w	r3, r3, #7
 800d04c:	2b00      	cmp	r3, #0
 800d04e:	d00b      	beq.n	800d068 <pvPortMalloc+0xfc>
	__asm volatile
 800d050:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d054:	f383 8811 	msr	BASEPRI, r3
 800d058:	f3bf 8f6f 	isb	sy
 800d05c:	f3bf 8f4f 	dsb	sy
 800d060:	613b      	str	r3, [r7, #16]
}
 800d062:	bf00      	nop
 800d064:	bf00      	nop
 800d066:	e7fd      	b.n	800d064 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800d068:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d06a:	685a      	ldr	r2, [r3, #4]
 800d06c:	687b      	ldr	r3, [r7, #4]
 800d06e:	1ad2      	subs	r2, r2, r3
 800d070:	69bb      	ldr	r3, [r7, #24]
 800d072:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800d074:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d076:	687a      	ldr	r2, [r7, #4]
 800d078:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800d07a:	69b8      	ldr	r0, [r7, #24]
 800d07c:	f000 f90a 	bl	800d294 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800d080:	4b1d      	ldr	r3, [pc, #116]	@ (800d0f8 <pvPortMalloc+0x18c>)
 800d082:	681a      	ldr	r2, [r3, #0]
 800d084:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d086:	685b      	ldr	r3, [r3, #4]
 800d088:	1ad3      	subs	r3, r2, r3
 800d08a:	4a1b      	ldr	r2, [pc, #108]	@ (800d0f8 <pvPortMalloc+0x18c>)
 800d08c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800d08e:	4b1a      	ldr	r3, [pc, #104]	@ (800d0f8 <pvPortMalloc+0x18c>)
 800d090:	681a      	ldr	r2, [r3, #0]
 800d092:	4b1b      	ldr	r3, [pc, #108]	@ (800d100 <pvPortMalloc+0x194>)
 800d094:	681b      	ldr	r3, [r3, #0]
 800d096:	429a      	cmp	r2, r3
 800d098:	d203      	bcs.n	800d0a2 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800d09a:	4b17      	ldr	r3, [pc, #92]	@ (800d0f8 <pvPortMalloc+0x18c>)
 800d09c:	681b      	ldr	r3, [r3, #0]
 800d09e:	4a18      	ldr	r2, [pc, #96]	@ (800d100 <pvPortMalloc+0x194>)
 800d0a0:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800d0a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d0a4:	685a      	ldr	r2, [r3, #4]
 800d0a6:	4b13      	ldr	r3, [pc, #76]	@ (800d0f4 <pvPortMalloc+0x188>)
 800d0a8:	681b      	ldr	r3, [r3, #0]
 800d0aa:	431a      	orrs	r2, r3
 800d0ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d0ae:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800d0b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d0b2:	2200      	movs	r2, #0
 800d0b4:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800d0b6:	4b13      	ldr	r3, [pc, #76]	@ (800d104 <pvPortMalloc+0x198>)
 800d0b8:	681b      	ldr	r3, [r3, #0]
 800d0ba:	3301      	adds	r3, #1
 800d0bc:	4a11      	ldr	r2, [pc, #68]	@ (800d104 <pvPortMalloc+0x198>)
 800d0be:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800d0c0:	f7fe fcb8 	bl	800ba34 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800d0c4:	69fb      	ldr	r3, [r7, #28]
 800d0c6:	f003 0307 	and.w	r3, r3, #7
 800d0ca:	2b00      	cmp	r3, #0
 800d0cc:	d00b      	beq.n	800d0e6 <pvPortMalloc+0x17a>
	__asm volatile
 800d0ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d0d2:	f383 8811 	msr	BASEPRI, r3
 800d0d6:	f3bf 8f6f 	isb	sy
 800d0da:	f3bf 8f4f 	dsb	sy
 800d0de:	60fb      	str	r3, [r7, #12]
}
 800d0e0:	bf00      	nop
 800d0e2:	bf00      	nop
 800d0e4:	e7fd      	b.n	800d0e2 <pvPortMalloc+0x176>
	return pvReturn;
 800d0e6:	69fb      	ldr	r3, [r7, #28]
}
 800d0e8:	4618      	mov	r0, r3
 800d0ea:	3728      	adds	r7, #40	@ 0x28
 800d0ec:	46bd      	mov	sp, r7
 800d0ee:	bd80      	pop	{r7, pc}
 800d0f0:	20007524 	.word	0x20007524
 800d0f4:	20007538 	.word	0x20007538
 800d0f8:	20007528 	.word	0x20007528
 800d0fc:	2000751c 	.word	0x2000751c
 800d100:	2000752c 	.word	0x2000752c
 800d104:	20007530 	.word	0x20007530

0800d108 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800d108:	b580      	push	{r7, lr}
 800d10a:	b086      	sub	sp, #24
 800d10c:	af00      	add	r7, sp, #0
 800d10e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800d110:	687b      	ldr	r3, [r7, #4]
 800d112:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800d114:	687b      	ldr	r3, [r7, #4]
 800d116:	2b00      	cmp	r3, #0
 800d118:	d04f      	beq.n	800d1ba <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800d11a:	2308      	movs	r3, #8
 800d11c:	425b      	negs	r3, r3
 800d11e:	697a      	ldr	r2, [r7, #20]
 800d120:	4413      	add	r3, r2
 800d122:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800d124:	697b      	ldr	r3, [r7, #20]
 800d126:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800d128:	693b      	ldr	r3, [r7, #16]
 800d12a:	685a      	ldr	r2, [r3, #4]
 800d12c:	4b25      	ldr	r3, [pc, #148]	@ (800d1c4 <vPortFree+0xbc>)
 800d12e:	681b      	ldr	r3, [r3, #0]
 800d130:	4013      	ands	r3, r2
 800d132:	2b00      	cmp	r3, #0
 800d134:	d10b      	bne.n	800d14e <vPortFree+0x46>
	__asm volatile
 800d136:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d13a:	f383 8811 	msr	BASEPRI, r3
 800d13e:	f3bf 8f6f 	isb	sy
 800d142:	f3bf 8f4f 	dsb	sy
 800d146:	60fb      	str	r3, [r7, #12]
}
 800d148:	bf00      	nop
 800d14a:	bf00      	nop
 800d14c:	e7fd      	b.n	800d14a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800d14e:	693b      	ldr	r3, [r7, #16]
 800d150:	681b      	ldr	r3, [r3, #0]
 800d152:	2b00      	cmp	r3, #0
 800d154:	d00b      	beq.n	800d16e <vPortFree+0x66>
	__asm volatile
 800d156:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d15a:	f383 8811 	msr	BASEPRI, r3
 800d15e:	f3bf 8f6f 	isb	sy
 800d162:	f3bf 8f4f 	dsb	sy
 800d166:	60bb      	str	r3, [r7, #8]
}
 800d168:	bf00      	nop
 800d16a:	bf00      	nop
 800d16c:	e7fd      	b.n	800d16a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800d16e:	693b      	ldr	r3, [r7, #16]
 800d170:	685a      	ldr	r2, [r3, #4]
 800d172:	4b14      	ldr	r3, [pc, #80]	@ (800d1c4 <vPortFree+0xbc>)
 800d174:	681b      	ldr	r3, [r3, #0]
 800d176:	4013      	ands	r3, r2
 800d178:	2b00      	cmp	r3, #0
 800d17a:	d01e      	beq.n	800d1ba <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800d17c:	693b      	ldr	r3, [r7, #16]
 800d17e:	681b      	ldr	r3, [r3, #0]
 800d180:	2b00      	cmp	r3, #0
 800d182:	d11a      	bne.n	800d1ba <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800d184:	693b      	ldr	r3, [r7, #16]
 800d186:	685a      	ldr	r2, [r3, #4]
 800d188:	4b0e      	ldr	r3, [pc, #56]	@ (800d1c4 <vPortFree+0xbc>)
 800d18a:	681b      	ldr	r3, [r3, #0]
 800d18c:	43db      	mvns	r3, r3
 800d18e:	401a      	ands	r2, r3
 800d190:	693b      	ldr	r3, [r7, #16]
 800d192:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800d194:	f7fe fc40 	bl	800ba18 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800d198:	693b      	ldr	r3, [r7, #16]
 800d19a:	685a      	ldr	r2, [r3, #4]
 800d19c:	4b0a      	ldr	r3, [pc, #40]	@ (800d1c8 <vPortFree+0xc0>)
 800d19e:	681b      	ldr	r3, [r3, #0]
 800d1a0:	4413      	add	r3, r2
 800d1a2:	4a09      	ldr	r2, [pc, #36]	@ (800d1c8 <vPortFree+0xc0>)
 800d1a4:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800d1a6:	6938      	ldr	r0, [r7, #16]
 800d1a8:	f000 f874 	bl	800d294 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800d1ac:	4b07      	ldr	r3, [pc, #28]	@ (800d1cc <vPortFree+0xc4>)
 800d1ae:	681b      	ldr	r3, [r3, #0]
 800d1b0:	3301      	adds	r3, #1
 800d1b2:	4a06      	ldr	r2, [pc, #24]	@ (800d1cc <vPortFree+0xc4>)
 800d1b4:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800d1b6:	f7fe fc3d 	bl	800ba34 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800d1ba:	bf00      	nop
 800d1bc:	3718      	adds	r7, #24
 800d1be:	46bd      	mov	sp, r7
 800d1c0:	bd80      	pop	{r7, pc}
 800d1c2:	bf00      	nop
 800d1c4:	20007538 	.word	0x20007538
 800d1c8:	20007528 	.word	0x20007528
 800d1cc:	20007534 	.word	0x20007534

0800d1d0 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800d1d0:	b480      	push	{r7}
 800d1d2:	b085      	sub	sp, #20
 800d1d4:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800d1d6:	f640 33b8 	movw	r3, #3000	@ 0xbb8
 800d1da:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800d1dc:	4b27      	ldr	r3, [pc, #156]	@ (800d27c <prvHeapInit+0xac>)
 800d1de:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800d1e0:	68fb      	ldr	r3, [r7, #12]
 800d1e2:	f003 0307 	and.w	r3, r3, #7
 800d1e6:	2b00      	cmp	r3, #0
 800d1e8:	d00c      	beq.n	800d204 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800d1ea:	68fb      	ldr	r3, [r7, #12]
 800d1ec:	3307      	adds	r3, #7
 800d1ee:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800d1f0:	68fb      	ldr	r3, [r7, #12]
 800d1f2:	f023 0307 	bic.w	r3, r3, #7
 800d1f6:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800d1f8:	68ba      	ldr	r2, [r7, #8]
 800d1fa:	68fb      	ldr	r3, [r7, #12]
 800d1fc:	1ad3      	subs	r3, r2, r3
 800d1fe:	4a1f      	ldr	r2, [pc, #124]	@ (800d27c <prvHeapInit+0xac>)
 800d200:	4413      	add	r3, r2
 800d202:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800d204:	68fb      	ldr	r3, [r7, #12]
 800d206:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800d208:	4a1d      	ldr	r2, [pc, #116]	@ (800d280 <prvHeapInit+0xb0>)
 800d20a:	687b      	ldr	r3, [r7, #4]
 800d20c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800d20e:	4b1c      	ldr	r3, [pc, #112]	@ (800d280 <prvHeapInit+0xb0>)
 800d210:	2200      	movs	r2, #0
 800d212:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800d214:	687b      	ldr	r3, [r7, #4]
 800d216:	68ba      	ldr	r2, [r7, #8]
 800d218:	4413      	add	r3, r2
 800d21a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800d21c:	2208      	movs	r2, #8
 800d21e:	68fb      	ldr	r3, [r7, #12]
 800d220:	1a9b      	subs	r3, r3, r2
 800d222:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800d224:	68fb      	ldr	r3, [r7, #12]
 800d226:	f023 0307 	bic.w	r3, r3, #7
 800d22a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800d22c:	68fb      	ldr	r3, [r7, #12]
 800d22e:	4a15      	ldr	r2, [pc, #84]	@ (800d284 <prvHeapInit+0xb4>)
 800d230:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800d232:	4b14      	ldr	r3, [pc, #80]	@ (800d284 <prvHeapInit+0xb4>)
 800d234:	681b      	ldr	r3, [r3, #0]
 800d236:	2200      	movs	r2, #0
 800d238:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800d23a:	4b12      	ldr	r3, [pc, #72]	@ (800d284 <prvHeapInit+0xb4>)
 800d23c:	681b      	ldr	r3, [r3, #0]
 800d23e:	2200      	movs	r2, #0
 800d240:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800d242:	687b      	ldr	r3, [r7, #4]
 800d244:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800d246:	683b      	ldr	r3, [r7, #0]
 800d248:	68fa      	ldr	r2, [r7, #12]
 800d24a:	1ad2      	subs	r2, r2, r3
 800d24c:	683b      	ldr	r3, [r7, #0]
 800d24e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800d250:	4b0c      	ldr	r3, [pc, #48]	@ (800d284 <prvHeapInit+0xb4>)
 800d252:	681a      	ldr	r2, [r3, #0]
 800d254:	683b      	ldr	r3, [r7, #0]
 800d256:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800d258:	683b      	ldr	r3, [r7, #0]
 800d25a:	685b      	ldr	r3, [r3, #4]
 800d25c:	4a0a      	ldr	r2, [pc, #40]	@ (800d288 <prvHeapInit+0xb8>)
 800d25e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800d260:	683b      	ldr	r3, [r7, #0]
 800d262:	685b      	ldr	r3, [r3, #4]
 800d264:	4a09      	ldr	r2, [pc, #36]	@ (800d28c <prvHeapInit+0xbc>)
 800d266:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800d268:	4b09      	ldr	r3, [pc, #36]	@ (800d290 <prvHeapInit+0xc0>)
 800d26a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800d26e:	601a      	str	r2, [r3, #0]
}
 800d270:	bf00      	nop
 800d272:	3714      	adds	r7, #20
 800d274:	46bd      	mov	sp, r7
 800d276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d27a:	4770      	bx	lr
 800d27c:	20006964 	.word	0x20006964
 800d280:	2000751c 	.word	0x2000751c
 800d284:	20007524 	.word	0x20007524
 800d288:	2000752c 	.word	0x2000752c
 800d28c:	20007528 	.word	0x20007528
 800d290:	20007538 	.word	0x20007538

0800d294 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800d294:	b480      	push	{r7}
 800d296:	b085      	sub	sp, #20
 800d298:	af00      	add	r7, sp, #0
 800d29a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800d29c:	4b28      	ldr	r3, [pc, #160]	@ (800d340 <prvInsertBlockIntoFreeList+0xac>)
 800d29e:	60fb      	str	r3, [r7, #12]
 800d2a0:	e002      	b.n	800d2a8 <prvInsertBlockIntoFreeList+0x14>
 800d2a2:	68fb      	ldr	r3, [r7, #12]
 800d2a4:	681b      	ldr	r3, [r3, #0]
 800d2a6:	60fb      	str	r3, [r7, #12]
 800d2a8:	68fb      	ldr	r3, [r7, #12]
 800d2aa:	681b      	ldr	r3, [r3, #0]
 800d2ac:	687a      	ldr	r2, [r7, #4]
 800d2ae:	429a      	cmp	r2, r3
 800d2b0:	d8f7      	bhi.n	800d2a2 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800d2b2:	68fb      	ldr	r3, [r7, #12]
 800d2b4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800d2b6:	68fb      	ldr	r3, [r7, #12]
 800d2b8:	685b      	ldr	r3, [r3, #4]
 800d2ba:	68ba      	ldr	r2, [r7, #8]
 800d2bc:	4413      	add	r3, r2
 800d2be:	687a      	ldr	r2, [r7, #4]
 800d2c0:	429a      	cmp	r2, r3
 800d2c2:	d108      	bne.n	800d2d6 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800d2c4:	68fb      	ldr	r3, [r7, #12]
 800d2c6:	685a      	ldr	r2, [r3, #4]
 800d2c8:	687b      	ldr	r3, [r7, #4]
 800d2ca:	685b      	ldr	r3, [r3, #4]
 800d2cc:	441a      	add	r2, r3
 800d2ce:	68fb      	ldr	r3, [r7, #12]
 800d2d0:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800d2d2:	68fb      	ldr	r3, [r7, #12]
 800d2d4:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800d2d6:	687b      	ldr	r3, [r7, #4]
 800d2d8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800d2da:	687b      	ldr	r3, [r7, #4]
 800d2dc:	685b      	ldr	r3, [r3, #4]
 800d2de:	68ba      	ldr	r2, [r7, #8]
 800d2e0:	441a      	add	r2, r3
 800d2e2:	68fb      	ldr	r3, [r7, #12]
 800d2e4:	681b      	ldr	r3, [r3, #0]
 800d2e6:	429a      	cmp	r2, r3
 800d2e8:	d118      	bne.n	800d31c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800d2ea:	68fb      	ldr	r3, [r7, #12]
 800d2ec:	681a      	ldr	r2, [r3, #0]
 800d2ee:	4b15      	ldr	r3, [pc, #84]	@ (800d344 <prvInsertBlockIntoFreeList+0xb0>)
 800d2f0:	681b      	ldr	r3, [r3, #0]
 800d2f2:	429a      	cmp	r2, r3
 800d2f4:	d00d      	beq.n	800d312 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800d2f6:	687b      	ldr	r3, [r7, #4]
 800d2f8:	685a      	ldr	r2, [r3, #4]
 800d2fa:	68fb      	ldr	r3, [r7, #12]
 800d2fc:	681b      	ldr	r3, [r3, #0]
 800d2fe:	685b      	ldr	r3, [r3, #4]
 800d300:	441a      	add	r2, r3
 800d302:	687b      	ldr	r3, [r7, #4]
 800d304:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800d306:	68fb      	ldr	r3, [r7, #12]
 800d308:	681b      	ldr	r3, [r3, #0]
 800d30a:	681a      	ldr	r2, [r3, #0]
 800d30c:	687b      	ldr	r3, [r7, #4]
 800d30e:	601a      	str	r2, [r3, #0]
 800d310:	e008      	b.n	800d324 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800d312:	4b0c      	ldr	r3, [pc, #48]	@ (800d344 <prvInsertBlockIntoFreeList+0xb0>)
 800d314:	681a      	ldr	r2, [r3, #0]
 800d316:	687b      	ldr	r3, [r7, #4]
 800d318:	601a      	str	r2, [r3, #0]
 800d31a:	e003      	b.n	800d324 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800d31c:	68fb      	ldr	r3, [r7, #12]
 800d31e:	681a      	ldr	r2, [r3, #0]
 800d320:	687b      	ldr	r3, [r7, #4]
 800d322:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800d324:	68fa      	ldr	r2, [r7, #12]
 800d326:	687b      	ldr	r3, [r7, #4]
 800d328:	429a      	cmp	r2, r3
 800d32a:	d002      	beq.n	800d332 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800d32c:	68fb      	ldr	r3, [r7, #12]
 800d32e:	687a      	ldr	r2, [r7, #4]
 800d330:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800d332:	bf00      	nop
 800d334:	3714      	adds	r7, #20
 800d336:	46bd      	mov	sp, r7
 800d338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d33c:	4770      	bx	lr
 800d33e:	bf00      	nop
 800d340:	2000751c 	.word	0x2000751c
 800d344:	20007524 	.word	0x20007524

0800d348 <rcl_get_zero_initialized_publisher>:
 800d348:	4b01      	ldr	r3, [pc, #4]	@ (800d350 <rcl_get_zero_initialized_publisher+0x8>)
 800d34a:	6818      	ldr	r0, [r3, #0]
 800d34c:	4770      	bx	lr
 800d34e:	bf00      	nop
 800d350:	0801bc1c 	.word	0x0801bc1c

0800d354 <rcl_publisher_init>:
 800d354:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d358:	b091      	sub	sp, #68	@ 0x44
 800d35a:	9f1a      	ldr	r7, [sp, #104]	@ 0x68
 800d35c:	b3d7      	cbz	r7, 800d3d4 <rcl_publisher_init+0x80>
 800d35e:	f107 0950 	add.w	r9, r7, #80	@ 0x50
 800d362:	4604      	mov	r4, r0
 800d364:	4648      	mov	r0, r9
 800d366:	4688      	mov	r8, r1
 800d368:	4616      	mov	r6, r2
 800d36a:	461d      	mov	r5, r3
 800d36c:	f000 fe2c 	bl	800dfc8 <rcutils_allocator_is_valid>
 800d370:	b380      	cbz	r0, 800d3d4 <rcl_publisher_init+0x80>
 800d372:	b37c      	cbz	r4, 800d3d4 <rcl_publisher_init+0x80>
 800d374:	f8d4 a000 	ldr.w	sl, [r4]
 800d378:	f1ba 0f00 	cmp.w	sl, #0
 800d37c:	d004      	beq.n	800d388 <rcl_publisher_init+0x34>
 800d37e:	2564      	movs	r5, #100	@ 0x64
 800d380:	4628      	mov	r0, r5
 800d382:	b011      	add	sp, #68	@ 0x44
 800d384:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d388:	4640      	mov	r0, r8
 800d38a:	f006 fd65 	bl	8013e58 <rcl_node_is_valid>
 800d38e:	b330      	cbz	r0, 800d3de <rcl_publisher_init+0x8a>
 800d390:	b306      	cbz	r6, 800d3d4 <rcl_publisher_init+0x80>
 800d392:	b1fd      	cbz	r5, 800d3d4 <rcl_publisher_init+0x80>
 800d394:	46ce      	mov	lr, r9
 800d396:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800d39a:	f10d 0c2c 	add.w	ip, sp, #44	@ 0x2c
 800d39e:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800d3a2:	f8de 3000 	ldr.w	r3, [lr]
 800d3a6:	f8cc 3000 	str.w	r3, [ip]
 800d3aa:	f000 fe49 	bl	800e040 <rcutils_get_zero_initialized_string_map>
 800d3ae:	ab10      	add	r3, sp, #64	@ 0x40
 800d3b0:	4684      	mov	ip, r0
 800d3b2:	e913 0007 	ldmdb	r3, {r0, r1, r2}
 800d3b6:	f8cd c020 	str.w	ip, [sp, #32]
 800d3ba:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 800d3be:	e9dd 230b 	ldrd	r2, r3, [sp, #44]	@ 0x2c
 800d3c2:	4651      	mov	r1, sl
 800d3c4:	a808      	add	r0, sp, #32
 800d3c6:	f000 feb5 	bl	800e134 <rcutils_string_map_init>
 800d3ca:	b150      	cbz	r0, 800d3e2 <rcl_publisher_init+0x8e>
 800d3cc:	280a      	cmp	r0, #10
 800d3ce:	d013      	beq.n	800d3f8 <rcl_publisher_init+0xa4>
 800d3d0:	2501      	movs	r5, #1
 800d3d2:	e7d5      	b.n	800d380 <rcl_publisher_init+0x2c>
 800d3d4:	250b      	movs	r5, #11
 800d3d6:	4628      	mov	r0, r5
 800d3d8:	b011      	add	sp, #68	@ 0x44
 800d3da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d3de:	25c8      	movs	r5, #200	@ 0xc8
 800d3e0:	e7ce      	b.n	800d380 <rcl_publisher_init+0x2c>
 800d3e2:	a808      	add	r0, sp, #32
 800d3e4:	f006 f96e 	bl	80136c4 <rcl_get_default_topic_name_substitutions>
 800d3e8:	4682      	mov	sl, r0
 800d3ea:	b138      	cbz	r0, 800d3fc <rcl_publisher_init+0xa8>
 800d3ec:	a808      	add	r0, sp, #32
 800d3ee:	f000 fee1 	bl	800e1b4 <rcutils_string_map_fini>
 800d3f2:	f1ba 0f0a 	cmp.w	sl, #10
 800d3f6:	d1eb      	bne.n	800d3d0 <rcl_publisher_init+0x7c>
 800d3f8:	250a      	movs	r5, #10
 800d3fa:	e7c1      	b.n	800d380 <rcl_publisher_init+0x2c>
 800d3fc:	4640      	mov	r0, r8
 800d3fe:	f8cd a024 	str.w	sl, [sp, #36]	@ 0x24
 800d402:	f006 fd33 	bl	8013e6c <rcl_node_get_name>
 800d406:	4682      	mov	sl, r0
 800d408:	4640      	mov	r0, r8
 800d40a:	f006 fd37 	bl	8013e7c <rcl_node_get_namespace>
 800d40e:	4686      	mov	lr, r0
 800d410:	e8b9 000f 	ldmia.w	r9!, {r0, r1, r2, r3}
 800d414:	f10d 0b24 	add.w	fp, sp, #36	@ 0x24
 800d418:	46ec      	mov	ip, sp
 800d41a:	f8cd b014 	str.w	fp, [sp, #20]
 800d41e:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800d422:	f8d9 3000 	ldr.w	r3, [r9]
 800d426:	f8cc 3000 	str.w	r3, [ip]
 800d42a:	4628      	mov	r0, r5
 800d42c:	4651      	mov	r1, sl
 800d42e:	4672      	mov	r2, lr
 800d430:	ab08      	add	r3, sp, #32
 800d432:	f005 ffe1 	bl	80133f8 <rcl_expand_topic_name>
 800d436:	4605      	mov	r5, r0
 800d438:	a808      	add	r0, sp, #32
 800d43a:	f000 febb 	bl	800e1b4 <rcutils_string_map_fini>
 800d43e:	b920      	cbnz	r0, 800d44a <rcl_publisher_init+0xf6>
 800d440:	b15d      	cbz	r5, 800d45a <rcl_publisher_init+0x106>
 800d442:	2d67      	cmp	r5, #103	@ 0x67
 800d444:	d002      	beq.n	800d44c <rcl_publisher_init+0xf8>
 800d446:	2d69      	cmp	r5, #105	@ 0x69
 800d448:	d05f      	beq.n	800d50a <rcl_publisher_init+0x1b6>
 800d44a:	2501      	movs	r5, #1
 800d44c:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800d44e:	2800      	cmp	r0, #0
 800d450:	d096      	beq.n	800d380 <rcl_publisher_init+0x2c>
 800d452:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d454:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 800d456:	4798      	blx	r3
 800d458:	e792      	b.n	800d380 <rcl_publisher_init+0x2c>
 800d45a:	4640      	mov	r0, r8
 800d45c:	f006 fd16 	bl	8013e8c <rcl_node_get_options>
 800d460:	2800      	cmp	r0, #0
 800d462:	d0f2      	beq.n	800d44a <rcl_publisher_init+0xf6>
 800d464:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800d466:	f7f2 febd 	bl	80001e4 <strlen>
 800d46a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d46c:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 800d46e:	3001      	adds	r0, #1
 800d470:	4798      	blx	r3
 800d472:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800d474:	9107      	str	r1, [sp, #28]
 800d476:	4681      	mov	r9, r0
 800d478:	4608      	mov	r0, r1
 800d47a:	f7f2 feb3 	bl	80001e4 <strlen>
 800d47e:	9907      	ldr	r1, [sp, #28]
 800d480:	1c42      	adds	r2, r0, #1
 800d482:	4648      	mov	r0, r9
 800d484:	f00c fca5 	bl	8019dd2 <memcpy>
 800d488:	462a      	mov	r2, r5
 800d48a:	4648      	mov	r0, r9
 800d48c:	a90a      	add	r1, sp, #40	@ 0x28
 800d48e:	f000 ff59 	bl	800e344 <rmw_validate_full_topic_name>
 800d492:	2800      	cmp	r0, #0
 800d494:	d137      	bne.n	800d506 <rcl_publisher_init+0x1b2>
 800d496:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800d498:	2b00      	cmp	r3, #0
 800d49a:	d138      	bne.n	800d50e <rcl_publisher_init+0x1ba>
 800d49c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d49e:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 800d4a0:	20c0      	movs	r0, #192	@ 0xc0
 800d4a2:	4798      	blx	r3
 800d4a4:	6020      	str	r0, [r4, #0]
 800d4a6:	b3a0      	cbz	r0, 800d512 <rcl_publisher_init+0x1be>
 800d4a8:	4640      	mov	r0, r8
 800d4aa:	f006 fcf7 	bl	8013e9c <rcl_node_get_rmw_handle>
 800d4ae:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 800d4b2:	9300      	str	r3, [sp, #0]
 800d4b4:	4631      	mov	r1, r6
 800d4b6:	463b      	mov	r3, r7
 800d4b8:	464a      	mov	r2, r9
 800d4ba:	6825      	ldr	r5, [r4, #0]
 800d4bc:	f001 f842 	bl	800e544 <rmw_create_publisher>
 800d4c0:	6821      	ldr	r1, [r4, #0]
 800d4c2:	f8c5 00bc 	str.w	r0, [r5, #188]	@ 0xbc
 800d4c6:	f8d1 00bc 	ldr.w	r0, [r1, #188]	@ 0xbc
 800d4ca:	b388      	cbz	r0, 800d530 <rcl_publisher_init+0x1dc>
 800d4cc:	3168      	adds	r1, #104	@ 0x68
 800d4ce:	f001 f913 	bl	800e6f8 <rmw_publisher_get_actual_qos>
 800d4d2:	6823      	ldr	r3, [r4, #0]
 800d4d4:	4605      	mov	r5, r0
 800d4d6:	b9f0      	cbnz	r0, 800d516 <rcl_publisher_init+0x1c2>
 800d4d8:	f897 2048 	ldrb.w	r2, [r7, #72]	@ 0x48
 800d4dc:	f883 20b0 	strb.w	r2, [r3, #176]	@ 0xb0
 800d4e0:	4618      	mov	r0, r3
 800d4e2:	2268      	movs	r2, #104	@ 0x68
 800d4e4:	4639      	mov	r1, r7
 800d4e6:	f00c fc74 	bl	8019dd2 <memcpy>
 800d4ea:	f8d8 2000 	ldr.w	r2, [r8]
 800d4ee:	f8c0 20b8 	str.w	r2, [r0, #184]	@ 0xb8
 800d4f2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800d4f4:	b110      	cbz	r0, 800d4fc <rcl_publisher_init+0x1a8>
 800d4f6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d4f8:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 800d4fa:	4798      	blx	r3
 800d4fc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d4fe:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 800d500:	4648      	mov	r0, r9
 800d502:	4798      	blx	r3
 800d504:	e73c      	b.n	800d380 <rcl_publisher_init+0x2c>
 800d506:	2501      	movs	r5, #1
 800d508:	e7f3      	b.n	800d4f2 <rcl_publisher_init+0x19e>
 800d50a:	2567      	movs	r5, #103	@ 0x67
 800d50c:	e79e      	b.n	800d44c <rcl_publisher_init+0xf8>
 800d50e:	2567      	movs	r5, #103	@ 0x67
 800d510:	e7ef      	b.n	800d4f2 <rcl_publisher_init+0x19e>
 800d512:	250a      	movs	r5, #10
 800d514:	e7ed      	b.n	800d4f2 <rcl_publisher_init+0x19e>
 800d516:	2b00      	cmp	r3, #0
 800d518:	d0f5      	beq.n	800d506 <rcl_publisher_init+0x1b2>
 800d51a:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 800d51e:	b13b      	cbz	r3, 800d530 <rcl_publisher_init+0x1dc>
 800d520:	4640      	mov	r0, r8
 800d522:	f006 fcbb 	bl	8013e9c <rcl_node_get_rmw_handle>
 800d526:	6823      	ldr	r3, [r4, #0]
 800d528:	f8d3 10bc 	ldr.w	r1, [r3, #188]	@ 0xbc
 800d52c:	f001 f8f2 	bl	800e714 <rmw_destroy_publisher>
 800d530:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d532:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 800d534:	6820      	ldr	r0, [r4, #0]
 800d536:	4798      	blx	r3
 800d538:	2300      	movs	r3, #0
 800d53a:	6023      	str	r3, [r4, #0]
 800d53c:	2501      	movs	r5, #1
 800d53e:	e7d8      	b.n	800d4f2 <rcl_publisher_init+0x19e>

0800d540 <rcl_publisher_get_default_options>:
 800d540:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d542:	4f0e      	ldr	r7, [pc, #56]	@ (800d57c <rcl_publisher_get_default_options+0x3c>)
 800d544:	490e      	ldr	r1, [pc, #56]	@ (800d580 <rcl_publisher_get_default_options+0x40>)
 800d546:	b087      	sub	sp, #28
 800d548:	4606      	mov	r6, r0
 800d54a:	2250      	movs	r2, #80	@ 0x50
 800d54c:	4638      	mov	r0, r7
 800d54e:	f00c fc40 	bl	8019dd2 <memcpy>
 800d552:	466c      	mov	r4, sp
 800d554:	4668      	mov	r0, sp
 800d556:	f000 fd29 	bl	800dfac <rcutils_get_default_allocator>
 800d55a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800d55c:	f107 0550 	add.w	r5, r7, #80	@ 0x50
 800d560:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800d562:	6823      	ldr	r3, [r4, #0]
 800d564:	602b      	str	r3, [r5, #0]
 800d566:	f000 feeb 	bl	800e340 <rmw_get_default_publisher_options>
 800d56a:	4639      	mov	r1, r7
 800d56c:	6678      	str	r0, [r7, #100]	@ 0x64
 800d56e:	2268      	movs	r2, #104	@ 0x68
 800d570:	4630      	mov	r0, r6
 800d572:	f00c fc2e 	bl	8019dd2 <memcpy>
 800d576:	4630      	mov	r0, r6
 800d578:	b007      	add	sp, #28
 800d57a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d57c:	20007540 	.word	0x20007540
 800d580:	0801bc20 	.word	0x0801bc20

0800d584 <rcl_publish>:
 800d584:	b1f8      	cbz	r0, 800d5c6 <rcl_publish+0x42>
 800d586:	6803      	ldr	r3, [r0, #0]
 800d588:	b570      	push	{r4, r5, r6, lr}
 800d58a:	4604      	mov	r4, r0
 800d58c:	b1b3      	cbz	r3, 800d5bc <rcl_publish+0x38>
 800d58e:	4616      	mov	r6, r2
 800d590:	f8d3 20bc 	ldr.w	r2, [r3, #188]	@ 0xbc
 800d594:	b192      	cbz	r2, 800d5bc <rcl_publish+0x38>
 800d596:	f8d3 00b8 	ldr.w	r0, [r3, #184]	@ 0xb8
 800d59a:	460d      	mov	r5, r1
 800d59c:	f005 fec2 	bl	8013324 <rcl_context_is_valid>
 800d5a0:	b160      	cbz	r0, 800d5bc <rcl_publish+0x38>
 800d5a2:	6823      	ldr	r3, [r4, #0]
 800d5a4:	f8d3 00bc 	ldr.w	r0, [r3, #188]	@ 0xbc
 800d5a8:	b140      	cbz	r0, 800d5bc <rcl_publish+0x38>
 800d5aa:	b155      	cbz	r5, 800d5c2 <rcl_publish+0x3e>
 800d5ac:	4632      	mov	r2, r6
 800d5ae:	4629      	mov	r1, r5
 800d5b0:	f000 ff68 	bl	800e484 <rmw_publish>
 800d5b4:	3800      	subs	r0, #0
 800d5b6:	bf18      	it	ne
 800d5b8:	2001      	movne	r0, #1
 800d5ba:	bd70      	pop	{r4, r5, r6, pc}
 800d5bc:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 800d5c0:	bd70      	pop	{r4, r5, r6, pc}
 800d5c2:	200b      	movs	r0, #11
 800d5c4:	bd70      	pop	{r4, r5, r6, pc}
 800d5c6:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 800d5ca:	4770      	bx	lr

0800d5cc <_rclc_check_for_new_data>:
 800d5cc:	b1e0      	cbz	r0, 800d608 <_rclc_check_for_new_data+0x3c>
 800d5ce:	7803      	ldrb	r3, [r0, #0]
 800d5d0:	2b08      	cmp	r3, #8
 800d5d2:	d81b      	bhi.n	800d60c <_rclc_check_for_new_data+0x40>
 800d5d4:	e8df f003 	tbb	[pc, r3]
 800d5d8:	12161010 	.word	0x12161010
 800d5dc:	05050512 	.word	0x05050512
 800d5e0:	14          	.byte	0x14
 800d5e1:	00          	.byte	0x00
 800d5e2:	6a0b      	ldr	r3, [r1, #32]
 800d5e4:	6b42      	ldr	r2, [r0, #52]	@ 0x34
 800d5e6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d5ea:	3b00      	subs	r3, #0
 800d5ec:	bf18      	it	ne
 800d5ee:	2301      	movne	r3, #1
 800d5f0:	f880 3039 	strb.w	r3, [r0, #57]	@ 0x39
 800d5f4:	2000      	movs	r0, #0
 800d5f6:	4770      	bx	lr
 800d5f8:	680b      	ldr	r3, [r1, #0]
 800d5fa:	e7f3      	b.n	800d5e4 <_rclc_check_for_new_data+0x18>
 800d5fc:	698b      	ldr	r3, [r1, #24]
 800d5fe:	e7f1      	b.n	800d5e4 <_rclc_check_for_new_data+0x18>
 800d600:	688b      	ldr	r3, [r1, #8]
 800d602:	e7ef      	b.n	800d5e4 <_rclc_check_for_new_data+0x18>
 800d604:	690b      	ldr	r3, [r1, #16]
 800d606:	e7ed      	b.n	800d5e4 <_rclc_check_for_new_data+0x18>
 800d608:	200b      	movs	r0, #11
 800d60a:	4770      	bx	lr
 800d60c:	2300      	movs	r3, #0
 800d60e:	f880 3039 	strb.w	r3, [r0, #57]	@ 0x39
 800d612:	2001      	movs	r0, #1
 800d614:	4770      	bx	lr
 800d616:	bf00      	nop

0800d618 <_rclc_take_new_data>:
 800d618:	2800      	cmp	r0, #0
 800d61a:	d049      	beq.n	800d6b0 <_rclc_take_new_data+0x98>
 800d61c:	b510      	push	{r4, lr}
 800d61e:	7803      	ldrb	r3, [r0, #0]
 800d620:	b08e      	sub	sp, #56	@ 0x38
 800d622:	4604      	mov	r4, r0
 800d624:	2b08      	cmp	r3, #8
 800d626:	d84a      	bhi.n	800d6be <_rclc_take_new_data+0xa6>
 800d628:	e8df f003 	tbb	[pc, r3]
 800d62c:	2b121515 	.word	0x2b121515
 800d630:	0505052b 	.word	0x0505052b
 800d634:	12          	.byte	0x12
 800d635:	00          	.byte	0x00
 800d636:	6a0b      	ldr	r3, [r1, #32]
 800d638:	6b42      	ldr	r2, [r0, #52]	@ 0x34
 800d63a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d63e:	b13b      	cbz	r3, 800d650 <_rclc_take_new_data+0x38>
 800d640:	e9d0 0201 	ldrd	r0, r2, [r0, #4]
 800d644:	f104 0110 	add.w	r1, r4, #16
 800d648:	f006 fd62 	bl	8014110 <rcl_take_request>
 800d64c:	2800      	cmp	r0, #0
 800d64e:	d131      	bne.n	800d6b4 <_rclc_take_new_data+0x9c>
 800d650:	2000      	movs	r0, #0
 800d652:	b00e      	add	sp, #56	@ 0x38
 800d654:	bd10      	pop	{r4, pc}
 800d656:	680b      	ldr	r3, [r1, #0]
 800d658:	6b42      	ldr	r2, [r0, #52]	@ 0x34
 800d65a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d65e:	2b00      	cmp	r3, #0
 800d660:	d0f6      	beq.n	800d650 <_rclc_take_new_data+0x38>
 800d662:	e9d0 0101 	ldrd	r0, r1, [r0, #4]
 800d666:	2300      	movs	r3, #0
 800d668:	aa02      	add	r2, sp, #8
 800d66a:	f006 fec7 	bl	80143fc <rcl_take>
 800d66e:	2800      	cmp	r0, #0
 800d670:	d0ef      	beq.n	800d652 <_rclc_take_new_data+0x3a>
 800d672:	f240 1391 	movw	r3, #401	@ 0x191
 800d676:	4298      	cmp	r0, r3
 800d678:	d115      	bne.n	800d6a6 <_rclc_take_new_data+0x8e>
 800d67a:	2300      	movs	r3, #0
 800d67c:	f884 3039 	strb.w	r3, [r4, #57]	@ 0x39
 800d680:	e7e7      	b.n	800d652 <_rclc_take_new_data+0x3a>
 800d682:	698b      	ldr	r3, [r1, #24]
 800d684:	6b42      	ldr	r2, [r0, #52]	@ 0x34
 800d686:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d68a:	2b00      	cmp	r3, #0
 800d68c:	d0e0      	beq.n	800d650 <_rclc_take_new_data+0x38>
 800d68e:	e9d0 0201 	ldrd	r0, r2, [r0, #4]
 800d692:	f104 0110 	add.w	r1, r4, #16
 800d696:	f005 fdeb 	bl	8013270 <rcl_take_response>
 800d69a:	2800      	cmp	r0, #0
 800d69c:	d0d8      	beq.n	800d650 <_rclc_take_new_data+0x38>
 800d69e:	f240 13f5 	movw	r3, #501	@ 0x1f5
 800d6a2:	4298      	cmp	r0, r3
 800d6a4:	d0d5      	beq.n	800d652 <_rclc_take_new_data+0x3a>
 800d6a6:	9001      	str	r0, [sp, #4]
 800d6a8:	f000 fcb2 	bl	800e010 <rcutils_reset_error>
 800d6ac:	9801      	ldr	r0, [sp, #4]
 800d6ae:	e7d0      	b.n	800d652 <_rclc_take_new_data+0x3a>
 800d6b0:	200b      	movs	r0, #11
 800d6b2:	4770      	bx	lr
 800d6b4:	f240 2359 	movw	r3, #601	@ 0x259
 800d6b8:	4298      	cmp	r0, r3
 800d6ba:	d0de      	beq.n	800d67a <_rclc_take_new_data+0x62>
 800d6bc:	e7f3      	b.n	800d6a6 <_rclc_take_new_data+0x8e>
 800d6be:	2001      	movs	r0, #1
 800d6c0:	e7c7      	b.n	800d652 <_rclc_take_new_data+0x3a>
 800d6c2:	bf00      	nop

0800d6c4 <rclc_executor_trigger_any>:
 800d6c4:	b170      	cbz	r0, 800d6e4 <rclc_executor_trigger_any+0x20>
 800d6c6:	b179      	cbz	r1, 800d6e8 <rclc_executor_trigger_any+0x24>
 800d6c8:	4603      	mov	r3, r0
 800d6ca:	2200      	movs	r2, #0
 800d6cc:	e005      	b.n	800d6da <rclc_executor_trigger_any+0x16>
 800d6ce:	f893 0039 	ldrb.w	r0, [r3, #57]	@ 0x39
 800d6d2:	3340      	adds	r3, #64	@ 0x40
 800d6d4:	b930      	cbnz	r0, 800d6e4 <rclc_executor_trigger_any+0x20>
 800d6d6:	4291      	cmp	r1, r2
 800d6d8:	d005      	beq.n	800d6e6 <rclc_executor_trigger_any+0x22>
 800d6da:	f893 0038 	ldrb.w	r0, [r3, #56]	@ 0x38
 800d6de:	3201      	adds	r2, #1
 800d6e0:	2800      	cmp	r0, #0
 800d6e2:	d1f4      	bne.n	800d6ce <rclc_executor_trigger_any+0xa>
 800d6e4:	4770      	bx	lr
 800d6e6:	4770      	bx	lr
 800d6e8:	4608      	mov	r0, r1
 800d6ea:	e7fb      	b.n	800d6e4 <rclc_executor_trigger_any+0x20>

0800d6ec <_rclc_execute.part.0>:
 800d6ec:	b530      	push	{r4, r5, lr}
 800d6ee:	7803      	ldrb	r3, [r0, #0]
 800d6f0:	b083      	sub	sp, #12
 800d6f2:	4604      	mov	r4, r0
 800d6f4:	2b08      	cmp	r3, #8
 800d6f6:	d85b      	bhi.n	800d7b0 <_rclc_execute.part.0+0xc4>
 800d6f8:	e8df f003 	tbb	[pc, r3]
 800d6fc:	3036271f 	.word	0x3036271f
 800d700:	0505053f 	.word	0x0505053f
 800d704:	1a          	.byte	0x1a
 800d705:	00          	.byte	0x00
 800d706:	2b06      	cmp	r3, #6
 800d708:	d049      	beq.n	800d79e <_rclc_execute.part.0+0xb2>
 800d70a:	2b07      	cmp	r3, #7
 800d70c:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 800d70e:	d140      	bne.n	800d792 <_rclc_execute.part.0+0xa6>
 800d710:	e9d0 120a 	ldrd	r1, r2, [r0, #40]	@ 0x28
 800d714:	6880      	ldr	r0, [r0, #8]
 800d716:	4798      	blx	r3
 800d718:	f104 0110 	add.w	r1, r4, #16
 800d71c:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 800d71e:	6860      	ldr	r0, [r4, #4]
 800d720:	f006 fd2e 	bl	8014180 <rcl_send_response>
 800d724:	b138      	cbz	r0, 800d736 <_rclc_execute.part.0+0x4a>
 800d726:	9001      	str	r0, [sp, #4]
 800d728:	f000 fc72 	bl	800e010 <rcutils_reset_error>
 800d72c:	9801      	ldr	r0, [sp, #4]
 800d72e:	e002      	b.n	800d736 <_rclc_execute.part.0+0x4a>
 800d730:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 800d732:	4798      	blx	r3
 800d734:	2000      	movs	r0, #0
 800d736:	b003      	add	sp, #12
 800d738:	bd30      	pop	{r4, r5, pc}
 800d73a:	f890 5039 	ldrb.w	r5, [r0, #57]	@ 0x39
 800d73e:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 800d740:	b96d      	cbnz	r5, 800d75e <_rclc_execute.part.0+0x72>
 800d742:	4628      	mov	r0, r5
 800d744:	4798      	blx	r3
 800d746:	4628      	mov	r0, r5
 800d748:	e7f5      	b.n	800d736 <_rclc_execute.part.0+0x4a>
 800d74a:	f890 5039 	ldrb.w	r5, [r0, #57]	@ 0x39
 800d74e:	e9d0 130b 	ldrd	r1, r3, [r0, #44]	@ 0x2c
 800d752:	b1d5      	cbz	r5, 800d78a <_rclc_execute.part.0+0x9e>
 800d754:	6880      	ldr	r0, [r0, #8]
 800d756:	4798      	blx	r3
 800d758:	2000      	movs	r0, #0
 800d75a:	e7ec      	b.n	800d736 <_rclc_execute.part.0+0x4a>
 800d75c:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 800d75e:	68a0      	ldr	r0, [r4, #8]
 800d760:	4798      	blx	r3
 800d762:	2000      	movs	r0, #0
 800d764:	b003      	add	sp, #12
 800d766:	bd30      	pop	{r4, r5, pc}
 800d768:	6840      	ldr	r0, [r0, #4]
 800d76a:	f007 f957 	bl	8014a1c <rcl_timer_call>
 800d76e:	f240 3321 	movw	r3, #801	@ 0x321
 800d772:	4298      	cmp	r0, r3
 800d774:	d1d6      	bne.n	800d724 <_rclc_execute.part.0+0x38>
 800d776:	2000      	movs	r0, #0
 800d778:	e7dd      	b.n	800d736 <_rclc_execute.part.0+0x4a>
 800d77a:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 800d77c:	6880      	ldr	r0, [r0, #8]
 800d77e:	f104 0110 	add.w	r1, r4, #16
 800d782:	4798      	blx	r3
 800d784:	2000      	movs	r0, #0
 800d786:	b003      	add	sp, #12
 800d788:	bd30      	pop	{r4, r5, pc}
 800d78a:	4628      	mov	r0, r5
 800d78c:	4798      	blx	r3
 800d78e:	4628      	mov	r0, r5
 800d790:	e7d1      	b.n	800d736 <_rclc_execute.part.0+0x4a>
 800d792:	6a81      	ldr	r1, [r0, #40]	@ 0x28
 800d794:	6880      	ldr	r0, [r0, #8]
 800d796:	4798      	blx	r3
 800d798:	f104 0110 	add.w	r1, r4, #16
 800d79c:	e7be      	b.n	800d71c <_rclc_execute.part.0+0x30>
 800d79e:	f100 0110 	add.w	r1, r0, #16
 800d7a2:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 800d7a4:	6a82      	ldr	r2, [r0, #40]	@ 0x28
 800d7a6:	6880      	ldr	r0, [r0, #8]
 800d7a8:	9101      	str	r1, [sp, #4]
 800d7aa:	4798      	blx	r3
 800d7ac:	9901      	ldr	r1, [sp, #4]
 800d7ae:	e7b5      	b.n	800d71c <_rclc_execute.part.0+0x30>
 800d7b0:	2001      	movs	r0, #1
 800d7b2:	e7c0      	b.n	800d736 <_rclc_execute.part.0+0x4a>
 800d7b4:	0000      	movs	r0, r0
	...

0800d7b8 <rclc_executor_init>:
 800d7b8:	2800      	cmp	r0, #0
 800d7ba:	d063      	beq.n	800d884 <rclc_executor_init+0xcc>
 800d7bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d7c0:	460f      	mov	r7, r1
 800d7c2:	b0ae      	sub	sp, #184	@ 0xb8
 800d7c4:	2900      	cmp	r1, #0
 800d7c6:	d055      	beq.n	800d874 <rclc_executor_init+0xbc>
 800d7c8:	4605      	mov	r5, r0
 800d7ca:	4618      	mov	r0, r3
 800d7cc:	4616      	mov	r6, r2
 800d7ce:	4698      	mov	r8, r3
 800d7d0:	f000 fbfa 	bl	800dfc8 <rcutils_allocator_is_valid>
 800d7d4:	2800      	cmp	r0, #0
 800d7d6:	d04d      	beq.n	800d874 <rclc_executor_init+0xbc>
 800d7d8:	2e00      	cmp	r6, #0
 800d7da:	d04b      	beq.n	800d874 <rclc_executor_init+0xbc>
 800d7dc:	492e      	ldr	r1, [pc, #184]	@ (800d898 <rclc_executor_init+0xe0>)
 800d7de:	2280      	movs	r2, #128	@ 0x80
 800d7e0:	a80e      	add	r0, sp, #56	@ 0x38
 800d7e2:	f00c faf6 	bl	8019dd2 <memcpy>
 800d7e6:	2400      	movs	r4, #0
 800d7e8:	a90e      	add	r1, sp, #56	@ 0x38
 800d7ea:	2280      	movs	r2, #128	@ 0x80
 800d7ec:	4628      	mov	r0, r5
 800d7ee:	f00c faf0 	bl	8019dd2 <memcpy>
 800d7f2:	602f      	str	r7, [r5, #0]
 800d7f4:	4668      	mov	r0, sp
 800d7f6:	e9c5 6402 	strd	r6, r4, [r5, #8]
 800d7fa:	466f      	mov	r7, sp
 800d7fc:	f007 fb68 	bl	8014ed0 <rcl_get_zero_initialized_wait_set>
 800d800:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 800d802:	f105 0c14 	add.w	ip, r5, #20
 800d806:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800d80a:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 800d80c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800d810:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 800d812:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800d816:	a31e      	add	r3, pc, #120	@ (adr r3, 800d890 <rclc_executor_init+0xd8>)
 800d818:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d81c:	6839      	ldr	r1, [r7, #0]
 800d81e:	f8cc 1000 	str.w	r1, [ip]
 800d822:	f8d8 7000 	ldr.w	r7, [r8]
 800d826:	f8d8 1010 	ldr.w	r1, [r8, #16]
 800d82a:	f8c5 8010 	str.w	r8, [r5, #16]
 800d82e:	e9c5 2318 	strd	r2, r3, [r5, #96]	@ 0x60
 800d832:	01b0      	lsls	r0, r6, #6
 800d834:	47b8      	blx	r7
 800d836:	6068      	str	r0, [r5, #4]
 800d838:	b908      	cbnz	r0, 800d83e <rclc_executor_init+0x86>
 800d83a:	e025      	b.n	800d888 <rclc_executor_init+0xd0>
 800d83c:	6868      	ldr	r0, [r5, #4]
 800d83e:	eb00 1084 	add.w	r0, r0, r4, lsl #6
 800d842:	4631      	mov	r1, r6
 800d844:	3401      	adds	r4, #1
 800d846:	f000 fa47 	bl	800dcd8 <rclc_executor_handle_init>
 800d84a:	42a6      	cmp	r6, r4
 800d84c:	d1f6      	bne.n	800d83c <rclc_executor_init+0x84>
 800d84e:	f105 0048 	add.w	r0, r5, #72	@ 0x48
 800d852:	f000 fa35 	bl	800dcc0 <rclc_executor_handle_counters_zero_init>
 800d856:	686b      	ldr	r3, [r5, #4]
 800d858:	4a10      	ldr	r2, [pc, #64]	@ (800d89c <rclc_executor_init+0xe4>)
 800d85a:	672a      	str	r2, [r5, #112]	@ 0x70
 800d85c:	2000      	movs	r0, #0
 800d85e:	6768      	str	r0, [r5, #116]	@ 0x74
 800d860:	b163      	cbz	r3, 800d87c <rclc_executor_init+0xc4>
 800d862:	692b      	ldr	r3, [r5, #16]
 800d864:	b153      	cbz	r3, 800d87c <rclc_executor_init+0xc4>
 800d866:	68ab      	ldr	r3, [r5, #8]
 800d868:	b143      	cbz	r3, 800d87c <rclc_executor_init+0xc4>
 800d86a:	f885 0078 	strb.w	r0, [r5, #120]	@ 0x78
 800d86e:	b02e      	add	sp, #184	@ 0xb8
 800d870:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d874:	200b      	movs	r0, #11
 800d876:	b02e      	add	sp, #184	@ 0xb8
 800d878:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d87c:	4618      	mov	r0, r3
 800d87e:	b02e      	add	sp, #184	@ 0xb8
 800d880:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d884:	200b      	movs	r0, #11
 800d886:	4770      	bx	lr
 800d888:	200a      	movs	r0, #10
 800d88a:	e7f4      	b.n	800d876 <rclc_executor_init+0xbe>
 800d88c:	f3af 8000 	nop.w
 800d890:	3b9aca00 	.word	0x3b9aca00
 800d894:	00000000 	.word	0x00000000
 800d898:	0801bc70 	.word	0x0801bc70
 800d89c:	0800d6c5 	.word	0x0800d6c5

0800d8a0 <rclc_executor_add_subscription>:
 800d8a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d8a4:	f89d 7018 	ldrb.w	r7, [sp, #24]
 800d8a8:	b358      	cbz	r0, 800d902 <rclc_executor_add_subscription+0x62>
 800d8aa:	b351      	cbz	r1, 800d902 <rclc_executor_add_subscription+0x62>
 800d8ac:	b34a      	cbz	r2, 800d902 <rclc_executor_add_subscription+0x62>
 800d8ae:	b343      	cbz	r3, 800d902 <rclc_executor_add_subscription+0x62>
 800d8b0:	4604      	mov	r4, r0
 800d8b2:	e9d0 0502 	ldrd	r0, r5, [r0, #8]
 800d8b6:	4285      	cmp	r5, r0
 800d8b8:	d302      	bcc.n	800d8c0 <rclc_executor_add_subscription+0x20>
 800d8ba:	2001      	movs	r0, #1
 800d8bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d8c0:	f8d4 e004 	ldr.w	lr, [r4, #4]
 800d8c4:	ea4f 1885 	mov.w	r8, r5, lsl #6
 800d8c8:	eb0e 1685 	add.w	r6, lr, r5, lsl #6
 800d8cc:	f04f 0c00 	mov.w	ip, #0
 800d8d0:	f80e c008 	strb.w	ip, [lr, r8]
 800d8d4:	2001      	movs	r0, #1
 800d8d6:	3501      	adds	r5, #1
 800d8d8:	f104 0814 	add.w	r8, r4, #20
 800d8dc:	f886 0038 	strb.w	r0, [r6, #56]	@ 0x38
 800d8e0:	e9c6 1201 	strd	r1, r2, [r6, #4]
 800d8e4:	6333      	str	r3, [r6, #48]	@ 0x30
 800d8e6:	7077      	strb	r7, [r6, #1]
 800d8e8:	f8c6 c02c 	str.w	ip, [r6, #44]	@ 0x2c
 800d8ec:	4640      	mov	r0, r8
 800d8ee:	60e5      	str	r5, [r4, #12]
 800d8f0:	f007 fb00 	bl	8014ef4 <rcl_wait_set_is_valid>
 800d8f4:	b940      	cbnz	r0, 800d908 <rclc_executor_add_subscription+0x68>
 800d8f6:	6ca3      	ldr	r3, [r4, #72]	@ 0x48
 800d8f8:	3301      	adds	r3, #1
 800d8fa:	64a3      	str	r3, [r4, #72]	@ 0x48
 800d8fc:	2000      	movs	r0, #0
 800d8fe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d902:	200b      	movs	r0, #11
 800d904:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d908:	4640      	mov	r0, r8
 800d90a:	f007 faf9 	bl	8014f00 <rcl_wait_set_fini>
 800d90e:	2800      	cmp	r0, #0
 800d910:	d0f1      	beq.n	800d8f6 <rclc_executor_add_subscription+0x56>
 800d912:	e7d3      	b.n	800d8bc <rclc_executor_add_subscription+0x1c>

0800d914 <rclc_executor_add_timer>:
 800d914:	b308      	cbz	r0, 800d95a <rclc_executor_add_timer+0x46>
 800d916:	b301      	cbz	r1, 800d95a <rclc_executor_add_timer+0x46>
 800d918:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d91a:	e9d0 2302 	ldrd	r2, r3, [r0, #8]
 800d91e:	4293      	cmp	r3, r2
 800d920:	4604      	mov	r4, r0
 800d922:	d301      	bcc.n	800d928 <rclc_executor_add_timer+0x14>
 800d924:	2001      	movs	r0, #1
 800d926:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d928:	6840      	ldr	r0, [r0, #4]
 800d92a:	019d      	lsls	r5, r3, #6
 800d92c:	eb00 1283 	add.w	r2, r0, r3, lsl #6
 800d930:	2702      	movs	r7, #2
 800d932:	6051      	str	r1, [r2, #4]
 800d934:	3301      	adds	r3, #1
 800d936:	5347      	strh	r7, [r0, r5]
 800d938:	2601      	movs	r6, #1
 800d93a:	2100      	movs	r1, #0
 800d93c:	f104 0514 	add.w	r5, r4, #20
 800d940:	f882 6038 	strb.w	r6, [r2, #56]	@ 0x38
 800d944:	62d1      	str	r1, [r2, #44]	@ 0x2c
 800d946:	4628      	mov	r0, r5
 800d948:	60e3      	str	r3, [r4, #12]
 800d94a:	f007 fad3 	bl	8014ef4 <rcl_wait_set_is_valid>
 800d94e:	b930      	cbnz	r0, 800d95e <rclc_executor_add_timer+0x4a>
 800d950:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 800d952:	3301      	adds	r3, #1
 800d954:	64e3      	str	r3, [r4, #76]	@ 0x4c
 800d956:	2000      	movs	r0, #0
 800d958:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d95a:	200b      	movs	r0, #11
 800d95c:	4770      	bx	lr
 800d95e:	4628      	mov	r0, r5
 800d960:	f007 face 	bl	8014f00 <rcl_wait_set_fini>
 800d964:	2800      	cmp	r0, #0
 800d966:	d0f3      	beq.n	800d950 <rclc_executor_add_timer+0x3c>
 800d968:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d96a:	bf00      	nop

0800d96c <rclc_executor_prepare>:
 800d96c:	2800      	cmp	r0, #0
 800d96e:	d03d      	beq.n	800d9ec <rclc_executor_prepare+0x80>
 800d970:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d974:	f100 0814 	add.w	r8, r0, #20
 800d978:	b09a      	sub	sp, #104	@ 0x68
 800d97a:	4604      	mov	r4, r0
 800d97c:	4640      	mov	r0, r8
 800d97e:	f007 fab9 	bl	8014ef4 <rcl_wait_set_is_valid>
 800d982:	b118      	cbz	r0, 800d98c <rclc_executor_prepare+0x20>
 800d984:	2000      	movs	r0, #0
 800d986:	b01a      	add	sp, #104	@ 0x68
 800d988:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d98c:	4640      	mov	r0, r8
 800d98e:	f007 fab7 	bl	8014f00 <rcl_wait_set_fini>
 800d992:	2800      	cmp	r0, #0
 800d994:	d127      	bne.n	800d9e6 <rclc_executor_prepare+0x7a>
 800d996:	a80c      	add	r0, sp, #48	@ 0x30
 800d998:	ad0c      	add	r5, sp, #48	@ 0x30
 800d99a:	f007 fa99 	bl	8014ed0 <rcl_get_zero_initialized_wait_set>
 800d99e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800d9a0:	4646      	mov	r6, r8
 800d9a2:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 800d9a4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800d9a6:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 800d9a8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800d9aa:	6927      	ldr	r7, [r4, #16]
 800d9ac:	682d      	ldr	r5, [r5, #0]
 800d9ae:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 800d9b0:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 800d9b2:	6035      	str	r5, [r6, #0]
 800d9b4:	ad04      	add	r5, sp, #16
 800d9b6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800d9b8:	e9d4 3214 	ldrd	r3, r2, [r4, #80]	@ 0x50
 800d9bc:	6de1      	ldr	r1, [r4, #92]	@ 0x5c
 800d9be:	6826      	ldr	r6, [r4, #0]
 800d9c0:	6838      	ldr	r0, [r7, #0]
 800d9c2:	6028      	str	r0, [r5, #0]
 800d9c4:	e9cd 1602 	strd	r1, r6, [sp, #8]
 800d9c8:	e9cd 3200 	strd	r3, r2, [sp]
 800d9cc:	4640      	mov	r0, r8
 800d9ce:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 800d9d0:	6da2      	ldr	r2, [r4, #88]	@ 0x58
 800d9d2:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 800d9d4:	f007 fdb2 	bl	801553c <rcl_wait_set_init>
 800d9d8:	2800      	cmp	r0, #0
 800d9da:	d0d4      	beq.n	800d986 <rclc_executor_prepare+0x1a>
 800d9dc:	900b      	str	r0, [sp, #44]	@ 0x2c
 800d9de:	f000 fb17 	bl	800e010 <rcutils_reset_error>
 800d9e2:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 800d9e4:	e7cf      	b.n	800d986 <rclc_executor_prepare+0x1a>
 800d9e6:	f000 fb13 	bl	800e010 <rcutils_reset_error>
 800d9ea:	e7d4      	b.n	800d996 <rclc_executor_prepare+0x2a>
 800d9ec:	200b      	movs	r0, #11
 800d9ee:	4770      	bx	lr

0800d9f0 <rclc_executor_spin_some.part.0>:
 800d9f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d9f4:	f100 0814 	add.w	r8, r0, #20
 800d9f8:	b083      	sub	sp, #12
 800d9fa:	4692      	mov	sl, r2
 800d9fc:	4699      	mov	r9, r3
 800d9fe:	4605      	mov	r5, r0
 800da00:	f7ff ffb4 	bl	800d96c <rclc_executor_prepare>
 800da04:	4640      	mov	r0, r8
 800da06:	f007 fb47 	bl	8015098 <rcl_wait_set_clear>
 800da0a:	4607      	mov	r7, r0
 800da0c:	2800      	cmp	r0, #0
 800da0e:	f040 80be 	bne.w	800db8e <rclc_executor_spin_some.part.0+0x19e>
 800da12:	68ab      	ldr	r3, [r5, #8]
 800da14:	4604      	mov	r4, r0
 800da16:	b1eb      	cbz	r3, 800da54 <rclc_executor_spin_some.part.0+0x64>
 800da18:	686e      	ldr	r6, [r5, #4]
 800da1a:	eb06 1184 	add.w	r1, r6, r4, lsl #6
 800da1e:	01a2      	lsls	r2, r4, #6
 800da20:	f891 3038 	ldrb.w	r3, [r1, #56]	@ 0x38
 800da24:	b1b3      	cbz	r3, 800da54 <rclc_executor_spin_some.part.0+0x64>
 800da26:	5cb3      	ldrb	r3, [r6, r2]
 800da28:	2b08      	cmp	r3, #8
 800da2a:	f200 80a9 	bhi.w	800db80 <rclc_executor_spin_some.part.0+0x190>
 800da2e:	e8df f003 	tbb	[pc, r3]
 800da32:	8989      	.short	0x8989
 800da34:	057b7b93 	.word	0x057b7b93
 800da38:	0505      	.short	0x0505
 800da3a:	9d          	.byte	0x9d
 800da3b:	00          	.byte	0x00
 800da3c:	f101 0234 	add.w	r2, r1, #52	@ 0x34
 800da40:	4640      	mov	r0, r8
 800da42:	6849      	ldr	r1, [r1, #4]
 800da44:	f007 fe90 	bl	8015768 <rcl_wait_set_add_service>
 800da48:	2800      	cmp	r0, #0
 800da4a:	d175      	bne.n	800db38 <rclc_executor_spin_some.part.0+0x148>
 800da4c:	68ab      	ldr	r3, [r5, #8]
 800da4e:	3401      	adds	r4, #1
 800da50:	429c      	cmp	r4, r3
 800da52:	d3e1      	bcc.n	800da18 <rclc_executor_spin_some.part.0+0x28>
 800da54:	464b      	mov	r3, r9
 800da56:	4652      	mov	r2, sl
 800da58:	4640      	mov	r0, r8
 800da5a:	f007 feb1 	bl	80157c0 <rcl_wait>
 800da5e:	f895 3078 	ldrb.w	r3, [r5, #120]	@ 0x78
 800da62:	2b00      	cmp	r3, #0
 800da64:	f000 809b 	beq.w	800db9e <rclc_executor_spin_some.part.0+0x1ae>
 800da68:	2b01      	cmp	r3, #1
 800da6a:	f040 8089 	bne.w	800db80 <rclc_executor_spin_some.part.0+0x190>
 800da6e:	68ab      	ldr	r3, [r5, #8]
 800da70:	2b00      	cmp	r3, #0
 800da72:	f000 80ef 	beq.w	800dc54 <rclc_executor_spin_some.part.0+0x264>
 800da76:	2400      	movs	r4, #0
 800da78:	4626      	mov	r6, r4
 800da7a:	f240 1991 	movw	r9, #401	@ 0x191
 800da7e:	e00a      	b.n	800da96 <rclc_executor_spin_some.part.0+0xa6>
 800da80:	f7ff fda4 	bl	800d5cc <_rclc_check_for_new_data>
 800da84:	4604      	mov	r4, r0
 800da86:	b110      	cbz	r0, 800da8e <rclc_executor_spin_some.part.0+0x9e>
 800da88:	4548      	cmp	r0, r9
 800da8a:	f040 8086 	bne.w	800db9a <rclc_executor_spin_some.part.0+0x1aa>
 800da8e:	68ab      	ldr	r3, [r5, #8]
 800da90:	429e      	cmp	r6, r3
 800da92:	f080 80db 	bcs.w	800dc4c <rclc_executor_spin_some.part.0+0x25c>
 800da96:	686a      	ldr	r2, [r5, #4]
 800da98:	eb02 1086 	add.w	r0, r2, r6, lsl #6
 800da9c:	4641      	mov	r1, r8
 800da9e:	f890 c038 	ldrb.w	ip, [r0, #56]	@ 0x38
 800daa2:	3601      	adds	r6, #1
 800daa4:	f1bc 0f00 	cmp.w	ip, #0
 800daa8:	d1ea      	bne.n	800da80 <rclc_executor_spin_some.part.0+0x90>
 800daaa:	4619      	mov	r1, r3
 800daac:	4610      	mov	r0, r2
 800daae:	e9d5 321c 	ldrd	r3, r2, [r5, #112]	@ 0x70
 800dab2:	4798      	blx	r3
 800dab4:	2800      	cmp	r0, #0
 800dab6:	d070      	beq.n	800db9a <rclc_executor_spin_some.part.0+0x1aa>
 800dab8:	68aa      	ldr	r2, [r5, #8]
 800daba:	2a00      	cmp	r2, #0
 800dabc:	d06d      	beq.n	800db9a <rclc_executor_spin_some.part.0+0x1aa>
 800dabe:	2600      	movs	r6, #0
 800dac0:	f240 1991 	movw	r9, #401	@ 0x191
 800dac4:	e008      	b.n	800dad8 <rclc_executor_spin_some.part.0+0xe8>
 800dac6:	f7ff fda7 	bl	800d618 <_rclc_take_new_data>
 800daca:	4604      	mov	r4, r0
 800dacc:	b108      	cbz	r0, 800dad2 <rclc_executor_spin_some.part.0+0xe2>
 800dace:	4548      	cmp	r0, r9
 800dad0:	d163      	bne.n	800db9a <rclc_executor_spin_some.part.0+0x1aa>
 800dad2:	68aa      	ldr	r2, [r5, #8]
 800dad4:	4296      	cmp	r6, r2
 800dad6:	d208      	bcs.n	800daea <rclc_executor_spin_some.part.0+0xfa>
 800dad8:	6868      	ldr	r0, [r5, #4]
 800dada:	eb00 1086 	add.w	r0, r0, r6, lsl #6
 800dade:	4641      	mov	r1, r8
 800dae0:	f890 3038 	ldrb.w	r3, [r0, #56]	@ 0x38
 800dae4:	3601      	adds	r6, #1
 800dae6:	2b00      	cmp	r3, #0
 800dae8:	d1ed      	bne.n	800dac6 <rclc_executor_spin_some.part.0+0xd6>
 800daea:	2600      	movs	r6, #0
 800daec:	b932      	cbnz	r2, 800dafc <rclc_executor_spin_some.part.0+0x10c>
 800daee:	e054      	b.n	800db9a <rclc_executor_spin_some.part.0+0x1aa>
 800daf0:	2901      	cmp	r1, #1
 800daf2:	d012      	beq.n	800db1a <rclc_executor_spin_some.part.0+0x12a>
 800daf4:	3601      	adds	r6, #1
 800daf6:	4296      	cmp	r6, r2
 800daf8:	d245      	bcs.n	800db86 <rclc_executor_spin_some.part.0+0x196>
 800dafa:	2400      	movs	r4, #0
 800dafc:	686b      	ldr	r3, [r5, #4]
 800dafe:	eb03 1386 	add.w	r3, r3, r6, lsl #6
 800db02:	4618      	mov	r0, r3
 800db04:	f893 1038 	ldrb.w	r1, [r3, #56]	@ 0x38
 800db08:	2900      	cmp	r1, #0
 800db0a:	d046      	beq.n	800db9a <rclc_executor_spin_some.part.0+0x1aa>
 800db0c:	7859      	ldrb	r1, [r3, #1]
 800db0e:	2900      	cmp	r1, #0
 800db10:	d1ee      	bne.n	800daf0 <rclc_executor_spin_some.part.0+0x100>
 800db12:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 800db16:	2b00      	cmp	r3, #0
 800db18:	d0ec      	beq.n	800daf4 <rclc_executor_spin_some.part.0+0x104>
 800db1a:	f7ff fde7 	bl	800d6ec <_rclc_execute.part.0>
 800db1e:	2800      	cmp	r0, #0
 800db20:	f040 8096 	bne.w	800dc50 <rclc_executor_spin_some.part.0+0x260>
 800db24:	68aa      	ldr	r2, [r5, #8]
 800db26:	e7e5      	b.n	800daf4 <rclc_executor_spin_some.part.0+0x104>
 800db28:	f101 0234 	add.w	r2, r1, #52	@ 0x34
 800db2c:	4640      	mov	r0, r8
 800db2e:	6849      	ldr	r1, [r1, #4]
 800db30:	f007 fdee 	bl	8015710 <rcl_wait_set_add_client>
 800db34:	2800      	cmp	r0, #0
 800db36:	d089      	beq.n	800da4c <rclc_executor_spin_some.part.0+0x5c>
 800db38:	9001      	str	r0, [sp, #4]
 800db3a:	f000 fa69 	bl	800e010 <rcutils_reset_error>
 800db3e:	9801      	ldr	r0, [sp, #4]
 800db40:	4607      	mov	r7, r0
 800db42:	e020      	b.n	800db86 <rclc_executor_spin_some.part.0+0x196>
 800db44:	f101 0234 	add.w	r2, r1, #52	@ 0x34
 800db48:	4640      	mov	r0, r8
 800db4a:	6849      	ldr	r1, [r1, #4]
 800db4c:	f007 fa78 	bl	8015040 <rcl_wait_set_add_subscription>
 800db50:	2800      	cmp	r0, #0
 800db52:	f43f af7b 	beq.w	800da4c <rclc_executor_spin_some.part.0+0x5c>
 800db56:	e7ef      	b.n	800db38 <rclc_executor_spin_some.part.0+0x148>
 800db58:	f101 0234 	add.w	r2, r1, #52	@ 0x34
 800db5c:	4640      	mov	r0, r8
 800db5e:	6849      	ldr	r1, [r1, #4]
 800db60:	f007 fda6 	bl	80156b0 <rcl_wait_set_add_timer>
 800db64:	2800      	cmp	r0, #0
 800db66:	f43f af71 	beq.w	800da4c <rclc_executor_spin_some.part.0+0x5c>
 800db6a:	e7e5      	b.n	800db38 <rclc_executor_spin_some.part.0+0x148>
 800db6c:	f101 0234 	add.w	r2, r1, #52	@ 0x34
 800db70:	4640      	mov	r0, r8
 800db72:	6849      	ldr	r1, [r1, #4]
 800db74:	f007 fd70 	bl	8015658 <rcl_wait_set_add_guard_condition>
 800db78:	2800      	cmp	r0, #0
 800db7a:	f43f af67 	beq.w	800da4c <rclc_executor_spin_some.part.0+0x5c>
 800db7e:	e7db      	b.n	800db38 <rclc_executor_spin_some.part.0+0x148>
 800db80:	f000 fa46 	bl	800e010 <rcutils_reset_error>
 800db84:	2701      	movs	r7, #1
 800db86:	4638      	mov	r0, r7
 800db88:	b003      	add	sp, #12
 800db8a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800db8e:	f000 fa3f 	bl	800e010 <rcutils_reset_error>
 800db92:	4638      	mov	r0, r7
 800db94:	b003      	add	sp, #12
 800db96:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800db9a:	4627      	mov	r7, r4
 800db9c:	e7f3      	b.n	800db86 <rclc_executor_spin_some.part.0+0x196>
 800db9e:	68ab      	ldr	r3, [r5, #8]
 800dba0:	2b00      	cmp	r3, #0
 800dba2:	d05a      	beq.n	800dc5a <rclc_executor_spin_some.part.0+0x26a>
 800dba4:	2400      	movs	r4, #0
 800dba6:	4626      	mov	r6, r4
 800dba8:	f240 1991 	movw	r9, #401	@ 0x191
 800dbac:	e008      	b.n	800dbc0 <rclc_executor_spin_some.part.0+0x1d0>
 800dbae:	f7ff fd0d 	bl	800d5cc <_rclc_check_for_new_data>
 800dbb2:	4604      	mov	r4, r0
 800dbb4:	b108      	cbz	r0, 800dbba <rclc_executor_spin_some.part.0+0x1ca>
 800dbb6:	4548      	cmp	r0, r9
 800dbb8:	d1ef      	bne.n	800db9a <rclc_executor_spin_some.part.0+0x1aa>
 800dbba:	68ab      	ldr	r3, [r5, #8]
 800dbbc:	429e      	cmp	r6, r3
 800dbbe:	d243      	bcs.n	800dc48 <rclc_executor_spin_some.part.0+0x258>
 800dbc0:	686a      	ldr	r2, [r5, #4]
 800dbc2:	eb02 1086 	add.w	r0, r2, r6, lsl #6
 800dbc6:	4641      	mov	r1, r8
 800dbc8:	f890 c038 	ldrb.w	ip, [r0, #56]	@ 0x38
 800dbcc:	3601      	adds	r6, #1
 800dbce:	f1bc 0f00 	cmp.w	ip, #0
 800dbd2:	d1ec      	bne.n	800dbae <rclc_executor_spin_some.part.0+0x1be>
 800dbd4:	4619      	mov	r1, r3
 800dbd6:	4610      	mov	r0, r2
 800dbd8:	e9d5 321c 	ldrd	r3, r2, [r5, #112]	@ 0x70
 800dbdc:	4798      	blx	r3
 800dbde:	2800      	cmp	r0, #0
 800dbe0:	d0db      	beq.n	800db9a <rclc_executor_spin_some.part.0+0x1aa>
 800dbe2:	68ab      	ldr	r3, [r5, #8]
 800dbe4:	2b00      	cmp	r3, #0
 800dbe6:	d0d8      	beq.n	800db9a <rclc_executor_spin_some.part.0+0x1aa>
 800dbe8:	f04f 0a00 	mov.w	sl, #0
 800dbec:	f240 1691 	movw	r6, #401	@ 0x191
 800dbf0:	f240 2959 	movw	r9, #601	@ 0x259
 800dbf4:	e00b      	b.n	800dc0e <rclc_executor_spin_some.part.0+0x21e>
 800dbf6:	f890 3039 	ldrb.w	r3, [r0, #57]	@ 0x39
 800dbfa:	b113      	cbz	r3, 800dc02 <rclc_executor_spin_some.part.0+0x212>
 800dbfc:	f7ff fd76 	bl	800d6ec <_rclc_execute.part.0>
 800dc00:	bb30      	cbnz	r0, 800dc50 <rclc_executor_spin_some.part.0+0x260>
 800dc02:	68ab      	ldr	r3, [r5, #8]
 800dc04:	f10a 0a01 	add.w	sl, sl, #1
 800dc08:	459a      	cmp	sl, r3
 800dc0a:	d2bc      	bcs.n	800db86 <rclc_executor_spin_some.part.0+0x196>
 800dc0c:	2400      	movs	r4, #0
 800dc0e:	6868      	ldr	r0, [r5, #4]
 800dc10:	eb00 108a 	add.w	r0, r0, sl, lsl #6
 800dc14:	ea4f 1b8a 	mov.w	fp, sl, lsl #6
 800dc18:	f890 3038 	ldrb.w	r3, [r0, #56]	@ 0x38
 800dc1c:	2b00      	cmp	r3, #0
 800dc1e:	d0bc      	beq.n	800db9a <rclc_executor_spin_some.part.0+0x1aa>
 800dc20:	4641      	mov	r1, r8
 800dc22:	f7ff fcf9 	bl	800d618 <_rclc_take_new_data>
 800dc26:	b118      	cbz	r0, 800dc30 <rclc_executor_spin_some.part.0+0x240>
 800dc28:	42b0      	cmp	r0, r6
 800dc2a:	d001      	beq.n	800dc30 <rclc_executor_spin_some.part.0+0x240>
 800dc2c:	4548      	cmp	r0, r9
 800dc2e:	d10f      	bne.n	800dc50 <rclc_executor_spin_some.part.0+0x260>
 800dc30:	6868      	ldr	r0, [r5, #4]
 800dc32:	eb10 000b 	adds.w	r0, r0, fp
 800dc36:	d005      	beq.n	800dc44 <rclc_executor_spin_some.part.0+0x254>
 800dc38:	7843      	ldrb	r3, [r0, #1]
 800dc3a:	2b00      	cmp	r3, #0
 800dc3c:	d0db      	beq.n	800dbf6 <rclc_executor_spin_some.part.0+0x206>
 800dc3e:	2b01      	cmp	r3, #1
 800dc40:	d1df      	bne.n	800dc02 <rclc_executor_spin_some.part.0+0x212>
 800dc42:	e7db      	b.n	800dbfc <rclc_executor_spin_some.part.0+0x20c>
 800dc44:	270b      	movs	r7, #11
 800dc46:	e79e      	b.n	800db86 <rclc_executor_spin_some.part.0+0x196>
 800dc48:	686a      	ldr	r2, [r5, #4]
 800dc4a:	e7c3      	b.n	800dbd4 <rclc_executor_spin_some.part.0+0x1e4>
 800dc4c:	686a      	ldr	r2, [r5, #4]
 800dc4e:	e72c      	b.n	800daaa <rclc_executor_spin_some.part.0+0xba>
 800dc50:	4607      	mov	r7, r0
 800dc52:	e798      	b.n	800db86 <rclc_executor_spin_some.part.0+0x196>
 800dc54:	686a      	ldr	r2, [r5, #4]
 800dc56:	461c      	mov	r4, r3
 800dc58:	e727      	b.n	800daaa <rclc_executor_spin_some.part.0+0xba>
 800dc5a:	686a      	ldr	r2, [r5, #4]
 800dc5c:	461c      	mov	r4, r3
 800dc5e:	e7b9      	b.n	800dbd4 <rclc_executor_spin_some.part.0+0x1e4>

0800dc60 <rclc_executor_spin_some>:
 800dc60:	b190      	cbz	r0, 800dc88 <rclc_executor_spin_some+0x28>
 800dc62:	b570      	push	{r4, r5, r6, lr}
 800dc64:	4604      	mov	r4, r0
 800dc66:	6800      	ldr	r0, [r0, #0]
 800dc68:	4616      	mov	r6, r2
 800dc6a:	461d      	mov	r5, r3
 800dc6c:	f005 fb5a 	bl	8013324 <rcl_context_is_valid>
 800dc70:	b130      	cbz	r0, 800dc80 <rclc_executor_spin_some+0x20>
 800dc72:	4632      	mov	r2, r6
 800dc74:	462b      	mov	r3, r5
 800dc76:	4620      	mov	r0, r4
 800dc78:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800dc7c:	f7ff beb8 	b.w	800d9f0 <rclc_executor_spin_some.part.0>
 800dc80:	f000 f9c6 	bl	800e010 <rcutils_reset_error>
 800dc84:	2001      	movs	r0, #1
 800dc86:	bd70      	pop	{r4, r5, r6, pc}
 800dc88:	200b      	movs	r0, #11
 800dc8a:	4770      	bx	lr

0800dc8c <rclc_executor_spin>:
 800dc8c:	b1a8      	cbz	r0, 800dcba <rclc_executor_spin+0x2e>
 800dc8e:	b5d0      	push	{r4, r6, r7, lr}
 800dc90:	4604      	mov	r4, r0
 800dc92:	6820      	ldr	r0, [r4, #0]
 800dc94:	e9d4 6718 	ldrd	r6, r7, [r4, #96]	@ 0x60
 800dc98:	f005 fb44 	bl	8013324 <rcl_context_is_valid>
 800dc9c:	4601      	mov	r1, r0
 800dc9e:	4632      	mov	r2, r6
 800dca0:	463b      	mov	r3, r7
 800dca2:	4620      	mov	r0, r4
 800dca4:	b129      	cbz	r1, 800dcb2 <rclc_executor_spin+0x26>
 800dca6:	f7ff fea3 	bl	800d9f0 <rclc_executor_spin_some.part.0>
 800dcaa:	f030 0302 	bics.w	r3, r0, #2
 800dcae:	d0f0      	beq.n	800dc92 <rclc_executor_spin+0x6>
 800dcb0:	bdd0      	pop	{r4, r6, r7, pc}
 800dcb2:	f000 f9ad 	bl	800e010 <rcutils_reset_error>
 800dcb6:	2001      	movs	r0, #1
 800dcb8:	bdd0      	pop	{r4, r6, r7, pc}
 800dcba:	200b      	movs	r0, #11
 800dcbc:	4770      	bx	lr
 800dcbe:	bf00      	nop

0800dcc0 <rclc_executor_handle_counters_zero_init>:
 800dcc0:	b140      	cbz	r0, 800dcd4 <rclc_executor_handle_counters_zero_init+0x14>
 800dcc2:	2300      	movs	r3, #0
 800dcc4:	6003      	str	r3, [r0, #0]
 800dcc6:	6043      	str	r3, [r0, #4]
 800dcc8:	6083      	str	r3, [r0, #8]
 800dcca:	60c3      	str	r3, [r0, #12]
 800dccc:	6103      	str	r3, [r0, #16]
 800dcce:	6143      	str	r3, [r0, #20]
 800dcd0:	4618      	mov	r0, r3
 800dcd2:	4770      	bx	lr
 800dcd4:	200b      	movs	r0, #11
 800dcd6:	4770      	bx	lr

0800dcd8 <rclc_executor_handle_init>:
 800dcd8:	b178      	cbz	r0, 800dcfa <rclc_executor_handle_init+0x22>
 800dcda:	b430      	push	{r4, r5}
 800dcdc:	4603      	mov	r3, r0
 800dcde:	2209      	movs	r2, #9
 800dce0:	2000      	movs	r0, #0
 800dce2:	2400      	movs	r4, #0
 800dce4:	2500      	movs	r5, #0
 800dce6:	801a      	strh	r2, [r3, #0]
 800dce8:	e9c3 450a 	strd	r4, r5, [r3, #40]	@ 0x28
 800dcec:	bc30      	pop	{r4, r5}
 800dcee:	e9c3 0001 	strd	r0, r0, [r3, #4]
 800dcf2:	6359      	str	r1, [r3, #52]	@ 0x34
 800dcf4:	6318      	str	r0, [r3, #48]	@ 0x30
 800dcf6:	8718      	strh	r0, [r3, #56]	@ 0x38
 800dcf8:	4770      	bx	lr
 800dcfa:	200b      	movs	r0, #11
 800dcfc:	4770      	bx	lr
 800dcfe:	bf00      	nop

0800dd00 <rclc_support_init>:
 800dd00:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800dd04:	b086      	sub	sp, #24
 800dd06:	2800      	cmp	r0, #0
 800dd08:	d042      	beq.n	800dd90 <rclc_support_init+0x90>
 800dd0a:	461c      	mov	r4, r3
 800dd0c:	2b00      	cmp	r3, #0
 800dd0e:	d03f      	beq.n	800dd90 <rclc_support_init+0x90>
 800dd10:	460f      	mov	r7, r1
 800dd12:	4690      	mov	r8, r2
 800dd14:	4606      	mov	r6, r0
 800dd16:	f005 fde5 	bl	80138e4 <rcl_get_zero_initialized_init_options>
 800dd1a:	4603      	mov	r3, r0
 800dd1c:	e9d4 0103 	ldrd	r0, r1, [r4, #12]
 800dd20:	e88d 0003 	stmia.w	sp, {r0, r1}
 800dd24:	9305      	str	r3, [sp, #20]
 800dd26:	a805      	add	r0, sp, #20
 800dd28:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 800dd2c:	f005 fddc 	bl	80138e8 <rcl_init_options_init>
 800dd30:	4605      	mov	r5, r0
 800dd32:	bb38      	cbnz	r0, 800dd84 <rclc_support_init+0x84>
 800dd34:	f005 fdd6 	bl	80138e4 <rcl_get_zero_initialized_init_options>
 800dd38:	4631      	mov	r1, r6
 800dd3a:	6030      	str	r0, [r6, #0]
 800dd3c:	a805      	add	r0, sp, #20
 800dd3e:	f005 fe49 	bl	80139d4 <rcl_init_options_copy>
 800dd42:	4605      	mov	r5, r0
 800dd44:	b9c0      	cbnz	r0, 800dd78 <rclc_support_init+0x78>
 800dd46:	ad02      	add	r5, sp, #8
 800dd48:	4628      	mov	r0, r5
 800dd4a:	f005 fae1 	bl	8013310 <rcl_get_zero_initialized_context>
 800dd4e:	e895 0003 	ldmia.w	r5, {r0, r1}
 800dd52:	1d33      	adds	r3, r6, #4
 800dd54:	e883 0003 	stmia.w	r3, {r0, r1}
 800dd58:	4632      	mov	r2, r6
 800dd5a:	4641      	mov	r1, r8
 800dd5c:	4638      	mov	r0, r7
 800dd5e:	f005 fcb7 	bl	80136d0 <rcl_init>
 800dd62:	4605      	mov	r5, r0
 800dd64:	b940      	cbnz	r0, 800dd78 <rclc_support_init+0x78>
 800dd66:	60f4      	str	r4, [r6, #12]
 800dd68:	4622      	mov	r2, r4
 800dd6a:	f106 0110 	add.w	r1, r6, #16
 800dd6e:	2003      	movs	r0, #3
 800dd70:	f006 fbae 	bl	80144d0 <rcl_clock_init>
 800dd74:	4605      	mov	r5, r0
 800dd76:	b108      	cbz	r0, 800dd7c <rclc_support_init+0x7c>
 800dd78:	f000 f94a 	bl	800e010 <rcutils_reset_error>
 800dd7c:	a805      	add	r0, sp, #20
 800dd7e:	f005 fe05 	bl	801398c <rcl_init_options_fini>
 800dd82:	b108      	cbz	r0, 800dd88 <rclc_support_init+0x88>
 800dd84:	f000 f944 	bl	800e010 <rcutils_reset_error>
 800dd88:	4628      	mov	r0, r5
 800dd8a:	b006      	add	sp, #24
 800dd8c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800dd90:	250b      	movs	r5, #11
 800dd92:	4628      	mov	r0, r5
 800dd94:	b006      	add	sp, #24
 800dd96:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800dd9a:	bf00      	nop

0800dd9c <rclc_node_init_default>:
 800dd9c:	b3b8      	cbz	r0, 800de0e <rclc_node_init_default+0x72>
 800dd9e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800dda2:	460d      	mov	r5, r1
 800dda4:	b08f      	sub	sp, #60	@ 0x3c
 800dda6:	b329      	cbz	r1, 800ddf4 <rclc_node_init_default+0x58>
 800dda8:	4616      	mov	r6, r2
 800ddaa:	b31a      	cbz	r2, 800ddf4 <rclc_node_init_default+0x58>
 800ddac:	461f      	mov	r7, r3
 800ddae:	b30b      	cbz	r3, 800ddf4 <rclc_node_init_default+0x58>
 800ddb0:	f10d 0810 	add.w	r8, sp, #16
 800ddb4:	4604      	mov	r4, r0
 800ddb6:	4640      	mov	r0, r8
 800ddb8:	f005 fed4 	bl	8013b64 <rcl_get_zero_initialized_node>
 800ddbc:	e898 0003 	ldmia.w	r8, {r0, r1}
 800ddc0:	f10d 091c 	add.w	r9, sp, #28
 800ddc4:	e884 0003 	stmia.w	r4, {r0, r1}
 800ddc8:	4648      	mov	r0, r9
 800ddca:	f006 f86d 	bl	8013ea8 <rcl_node_get_default_options>
 800ddce:	4640      	mov	r0, r8
 800ddd0:	f005 fec8 	bl	8013b64 <rcl_get_zero_initialized_node>
 800ddd4:	e898 0003 	ldmia.w	r8, {r0, r1}
 800ddd8:	1d3b      	adds	r3, r7, #4
 800ddda:	f8cd 9000 	str.w	r9, [sp]
 800ddde:	4632      	mov	r2, r6
 800dde0:	e884 0003 	stmia.w	r4, {r0, r1}
 800dde4:	4629      	mov	r1, r5
 800dde6:	4620      	mov	r0, r4
 800dde8:	f005 fec6 	bl	8013b78 <rcl_node_init>
 800ddec:	b930      	cbnz	r0, 800ddfc <rclc_node_init_default+0x60>
 800ddee:	b00f      	add	sp, #60	@ 0x3c
 800ddf0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ddf4:	200b      	movs	r0, #11
 800ddf6:	b00f      	add	sp, #60	@ 0x3c
 800ddf8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ddfc:	9003      	str	r0, [sp, #12]
 800ddfe:	f000 f907 	bl	800e010 <rcutils_reset_error>
 800de02:	f000 f905 	bl	800e010 <rcutils_reset_error>
 800de06:	9803      	ldr	r0, [sp, #12]
 800de08:	b00f      	add	sp, #60	@ 0x3c
 800de0a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800de0e:	200b      	movs	r0, #11
 800de10:	4770      	bx	lr
 800de12:	bf00      	nop

0800de14 <rclc_publisher_init_default>:
 800de14:	b368      	cbz	r0, 800de72 <rclc_publisher_init_default+0x5e>
 800de16:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800de1a:	460d      	mov	r5, r1
 800de1c:	b09e      	sub	sp, #120	@ 0x78
 800de1e:	b321      	cbz	r1, 800de6a <rclc_publisher_init_default+0x56>
 800de20:	4616      	mov	r6, r2
 800de22:	b312      	cbz	r2, 800de6a <rclc_publisher_init_default+0x56>
 800de24:	461f      	mov	r7, r3
 800de26:	b303      	cbz	r3, 800de6a <rclc_publisher_init_default+0x56>
 800de28:	4604      	mov	r4, r0
 800de2a:	f7ff fa8d 	bl	800d348 <rcl_get_zero_initialized_publisher>
 800de2e:	f10d 0810 	add.w	r8, sp, #16
 800de32:	6020      	str	r0, [r4, #0]
 800de34:	4640      	mov	r0, r8
 800de36:	f7ff fb83 	bl	800d540 <rcl_publisher_get_default_options>
 800de3a:	490f      	ldr	r1, [pc, #60]	@ (800de78 <rclc_publisher_init_default+0x64>)
 800de3c:	2250      	movs	r2, #80	@ 0x50
 800de3e:	4640      	mov	r0, r8
 800de40:	f00b ffc7 	bl	8019dd2 <memcpy>
 800de44:	f8cd 8000 	str.w	r8, [sp]
 800de48:	463b      	mov	r3, r7
 800de4a:	4632      	mov	r2, r6
 800de4c:	4629      	mov	r1, r5
 800de4e:	4620      	mov	r0, r4
 800de50:	f7ff fa80 	bl	800d354 <rcl_publisher_init>
 800de54:	b910      	cbnz	r0, 800de5c <rclc_publisher_init_default+0x48>
 800de56:	b01e      	add	sp, #120	@ 0x78
 800de58:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800de5c:	9003      	str	r0, [sp, #12]
 800de5e:	f000 f8d7 	bl	800e010 <rcutils_reset_error>
 800de62:	9803      	ldr	r0, [sp, #12]
 800de64:	b01e      	add	sp, #120	@ 0x78
 800de66:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800de6a:	200b      	movs	r0, #11
 800de6c:	b01e      	add	sp, #120	@ 0x78
 800de6e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800de72:	200b      	movs	r0, #11
 800de74:	4770      	bx	lr
 800de76:	bf00      	nop
 800de78:	0801bcf0 	.word	0x0801bcf0

0800de7c <rclc_subscription_init_default>:
 800de7c:	b368      	cbz	r0, 800deda <rclc_subscription_init_default+0x5e>
 800de7e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800de82:	460d      	mov	r5, r1
 800de84:	b0a0      	sub	sp, #128	@ 0x80
 800de86:	b321      	cbz	r1, 800ded2 <rclc_subscription_init_default+0x56>
 800de88:	4616      	mov	r6, r2
 800de8a:	b312      	cbz	r2, 800ded2 <rclc_subscription_init_default+0x56>
 800de8c:	461f      	mov	r7, r3
 800de8e:	b303      	cbz	r3, 800ded2 <rclc_subscription_init_default+0x56>
 800de90:	4604      	mov	r4, r0
 800de92:	f006 f98b 	bl	80141ac <rcl_get_zero_initialized_subscription>
 800de96:	f10d 0810 	add.w	r8, sp, #16
 800de9a:	6020      	str	r0, [r4, #0]
 800de9c:	4640      	mov	r0, r8
 800de9e:	f006 fa81 	bl	80143a4 <rcl_subscription_get_default_options>
 800dea2:	490f      	ldr	r1, [pc, #60]	@ (800dee0 <rclc_subscription_init_default+0x64>)
 800dea4:	2250      	movs	r2, #80	@ 0x50
 800dea6:	4640      	mov	r0, r8
 800dea8:	f00b ff93 	bl	8019dd2 <memcpy>
 800deac:	f8cd 8000 	str.w	r8, [sp]
 800deb0:	463b      	mov	r3, r7
 800deb2:	4632      	mov	r2, r6
 800deb4:	4629      	mov	r1, r5
 800deb6:	4620      	mov	r0, r4
 800deb8:	f006 f97e 	bl	80141b8 <rcl_subscription_init>
 800debc:	b910      	cbnz	r0, 800dec4 <rclc_subscription_init_default+0x48>
 800debe:	b020      	add	sp, #128	@ 0x80
 800dec0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800dec4:	9003      	str	r0, [sp, #12]
 800dec6:	f000 f8a3 	bl	800e010 <rcutils_reset_error>
 800deca:	9803      	ldr	r0, [sp, #12]
 800decc:	b020      	add	sp, #128	@ 0x80
 800dece:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ded2:	200b      	movs	r0, #11
 800ded4:	b020      	add	sp, #128	@ 0x80
 800ded6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800deda:	200b      	movs	r0, #11
 800dedc:	4770      	bx	lr
 800dede:	bf00      	nop
 800dee0:	0801bd40 	.word	0x0801bd40

0800dee4 <rclc_timer_init_default>:
 800dee4:	b348      	cbz	r0, 800df3a <rclc_timer_init_default+0x56>
 800dee6:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800deea:	460c      	mov	r4, r1
 800deec:	b08b      	sub	sp, #44	@ 0x2c
 800deee:	b301      	cbz	r1, 800df32 <rclc_timer_init_default+0x4e>
 800def0:	4691      	mov	r9, r2
 800def2:	4698      	mov	r8, r3
 800def4:	4607      	mov	r7, r0
 800def6:	f006 fcd7 	bl	80148a8 <rcl_get_zero_initialized_timer>
 800defa:	68e6      	ldr	r6, [r4, #12]
 800defc:	6038      	str	r0, [r7, #0]
 800defe:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800df00:	ad03      	add	r5, sp, #12
 800df02:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800df04:	6833      	ldr	r3, [r6, #0]
 800df06:	602b      	str	r3, [r5, #0]
 800df08:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800df0a:	9302      	str	r3, [sp, #8]
 800df0c:	e9cd 9800 	strd	r9, r8, [sp]
 800df10:	4638      	mov	r0, r7
 800df12:	1d22      	adds	r2, r4, #4
 800df14:	f104 0110 	add.w	r1, r4, #16
 800df18:	f006 fccc 	bl	80148b4 <rcl_timer_init>
 800df1c:	b910      	cbnz	r0, 800df24 <rclc_timer_init_default+0x40>
 800df1e:	b00b      	add	sp, #44	@ 0x2c
 800df20:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800df24:	9009      	str	r0, [sp, #36]	@ 0x24
 800df26:	f000 f873 	bl	800e010 <rcutils_reset_error>
 800df2a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800df2c:	b00b      	add	sp, #44	@ 0x2c
 800df2e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800df32:	200b      	movs	r0, #11
 800df34:	b00b      	add	sp, #44	@ 0x2c
 800df36:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800df3a:	200b      	movs	r0, #11
 800df3c:	4770      	bx	lr
 800df3e:	bf00      	nop

0800df40 <__default_zero_allocate>:
 800df40:	f00b ba4e 	b.w	80193e0 <calloc>

0800df44 <__default_reallocate>:
 800df44:	f00b bbda 	b.w	80196fc <realloc>

0800df48 <__default_deallocate>:
 800df48:	f00b bab6 	b.w	80194b8 <free>

0800df4c <__default_allocate>:
 800df4c:	f00b baac 	b.w	80194a8 <malloc>

0800df50 <rcutils_get_zero_initialized_allocator>:
 800df50:	b470      	push	{r4, r5, r6}
 800df52:	4d05      	ldr	r5, [pc, #20]	@ (800df68 <rcutils_get_zero_initialized_allocator+0x18>)
 800df54:	4606      	mov	r6, r0
 800df56:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800df58:	4634      	mov	r4, r6
 800df5a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800df5c:	682b      	ldr	r3, [r5, #0]
 800df5e:	6023      	str	r3, [r4, #0]
 800df60:	4630      	mov	r0, r6
 800df62:	bc70      	pop	{r4, r5, r6}
 800df64:	4770      	bx	lr
 800df66:	bf00      	nop
 800df68:	0801bd90 	.word	0x0801bd90

0800df6c <rcutils_set_default_allocator>:
 800df6c:	b1a0      	cbz	r0, 800df98 <rcutils_set_default_allocator+0x2c>
 800df6e:	6801      	ldr	r1, [r0, #0]
 800df70:	b199      	cbz	r1, 800df9a <rcutils_set_default_allocator+0x2e>
 800df72:	b430      	push	{r4, r5}
 800df74:	6844      	ldr	r4, [r0, #4]
 800df76:	b194      	cbz	r4, 800df9e <rcutils_set_default_allocator+0x32>
 800df78:	68c5      	ldr	r5, [r0, #12]
 800df7a:	b15d      	cbz	r5, 800df94 <rcutils_set_default_allocator+0x28>
 800df7c:	6883      	ldr	r3, [r0, #8]
 800df7e:	b18b      	cbz	r3, 800dfa4 <rcutils_set_default_allocator+0x38>
 800df80:	4a09      	ldr	r2, [pc, #36]	@ (800dfa8 <rcutils_set_default_allocator+0x3c>)
 800df82:	e9c2 1400 	strd	r1, r4, [r2]
 800df86:	e9c2 3502 	strd	r3, r5, [r2, #8]
 800df8a:	2000      	movs	r0, #0
 800df8c:	6110      	str	r0, [r2, #16]
 800df8e:	2001      	movs	r0, #1
 800df90:	bc30      	pop	{r4, r5}
 800df92:	4770      	bx	lr
 800df94:	4628      	mov	r0, r5
 800df96:	e7fb      	b.n	800df90 <rcutils_set_default_allocator+0x24>
 800df98:	4770      	bx	lr
 800df9a:	4608      	mov	r0, r1
 800df9c:	4770      	bx	lr
 800df9e:	4620      	mov	r0, r4
 800dfa0:	bc30      	pop	{r4, r5}
 800dfa2:	4770      	bx	lr
 800dfa4:	4618      	mov	r0, r3
 800dfa6:	e7f3      	b.n	800df90 <rcutils_set_default_allocator+0x24>
 800dfa8:	20000050 	.word	0x20000050

0800dfac <rcutils_get_default_allocator>:
 800dfac:	b470      	push	{r4, r5, r6}
 800dfae:	4d05      	ldr	r5, [pc, #20]	@ (800dfc4 <rcutils_get_default_allocator+0x18>)
 800dfb0:	4606      	mov	r6, r0
 800dfb2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800dfb4:	4634      	mov	r4, r6
 800dfb6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800dfb8:	682b      	ldr	r3, [r5, #0]
 800dfba:	6023      	str	r3, [r4, #0]
 800dfbc:	4630      	mov	r0, r6
 800dfbe:	bc70      	pop	{r4, r5, r6}
 800dfc0:	4770      	bx	lr
 800dfc2:	bf00      	nop
 800dfc4:	20000050 	.word	0x20000050

0800dfc8 <rcutils_allocator_is_valid>:
 800dfc8:	b158      	cbz	r0, 800dfe2 <rcutils_allocator_is_valid+0x1a>
 800dfca:	6803      	ldr	r3, [r0, #0]
 800dfcc:	b143      	cbz	r3, 800dfe0 <rcutils_allocator_is_valid+0x18>
 800dfce:	6843      	ldr	r3, [r0, #4]
 800dfd0:	b133      	cbz	r3, 800dfe0 <rcutils_allocator_is_valid+0x18>
 800dfd2:	68c3      	ldr	r3, [r0, #12]
 800dfd4:	b123      	cbz	r3, 800dfe0 <rcutils_allocator_is_valid+0x18>
 800dfd6:	6880      	ldr	r0, [r0, #8]
 800dfd8:	3800      	subs	r0, #0
 800dfda:	bf18      	it	ne
 800dfdc:	2001      	movne	r0, #1
 800dfde:	4770      	bx	lr
 800dfe0:	4618      	mov	r0, r3
 800dfe2:	4770      	bx	lr

0800dfe4 <rcutils_get_error_string>:
 800dfe4:	4b06      	ldr	r3, [pc, #24]	@ (800e000 <rcutils_get_error_string+0x1c>)
 800dfe6:	781b      	ldrb	r3, [r3, #0]
 800dfe8:	b13b      	cbz	r3, 800dffa <rcutils_get_error_string+0x16>
 800dfea:	4b06      	ldr	r3, [pc, #24]	@ (800e004 <rcutils_get_error_string+0x20>)
 800dfec:	781a      	ldrb	r2, [r3, #0]
 800dfee:	b90a      	cbnz	r2, 800dff4 <rcutils_get_error_string+0x10>
 800dff0:	2201      	movs	r2, #1
 800dff2:	701a      	strb	r2, [r3, #0]
 800dff4:	4b04      	ldr	r3, [pc, #16]	@ (800e008 <rcutils_get_error_string+0x24>)
 800dff6:	7818      	ldrb	r0, [r3, #0]
 800dff8:	4770      	bx	lr
 800dffa:	4b04      	ldr	r3, [pc, #16]	@ (800e00c <rcutils_get_error_string+0x28>)
 800dffc:	7818      	ldrb	r0, [r3, #0]
 800dffe:	4770      	bx	lr
 800e000:	200075a8 	.word	0x200075a8
 800e004:	200075a9 	.word	0x200075a9
 800e008:	20007880 	.word	0x20007880
 800e00c:	0801bda4 	.word	0x0801bda4

0800e010 <rcutils_reset_error>:
 800e010:	b4d0      	push	{r4, r6, r7}
 800e012:	4a07      	ldr	r2, [pc, #28]	@ (800e030 <rcutils_reset_error+0x20>)
 800e014:	4807      	ldr	r0, [pc, #28]	@ (800e034 <rcutils_reset_error+0x24>)
 800e016:	4c08      	ldr	r4, [pc, #32]	@ (800e038 <rcutils_reset_error+0x28>)
 800e018:	4908      	ldr	r1, [pc, #32]	@ (800e03c <rcutils_reset_error+0x2c>)
 800e01a:	2300      	movs	r3, #0
 800e01c:	2600      	movs	r6, #0
 800e01e:	2700      	movs	r7, #0
 800e020:	8013      	strh	r3, [r2, #0]
 800e022:	7003      	strb	r3, [r0, #0]
 800e024:	e9c2 6702 	strd	r6, r7, [r2, #8]
 800e028:	7023      	strb	r3, [r4, #0]
 800e02a:	700b      	strb	r3, [r1, #0]
 800e02c:	bcd0      	pop	{r4, r6, r7}
 800e02e:	4770      	bx	lr
 800e030:	20007888 	.word	0x20007888
 800e034:	20007880 	.word	0x20007880
 800e038:	200075a9 	.word	0x200075a9
 800e03c:	200075a8 	.word	0x200075a8

0800e040 <rcutils_get_zero_initialized_string_map>:
 800e040:	4b01      	ldr	r3, [pc, #4]	@ (800e048 <rcutils_get_zero_initialized_string_map+0x8>)
 800e042:	2000      	movs	r0, #0
 800e044:	6018      	str	r0, [r3, #0]
 800e046:	4770      	bx	lr
 800e048:	200075ac 	.word	0x200075ac

0800e04c <rcutils_string_map_reserve>:
 800e04c:	2800      	cmp	r0, #0
 800e04e:	d061      	beq.n	800e114 <rcutils_string_map_reserve+0xc8>
 800e050:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800e054:	6805      	ldr	r5, [r0, #0]
 800e056:	b083      	sub	sp, #12
 800e058:	460c      	mov	r4, r1
 800e05a:	4606      	mov	r6, r0
 800e05c:	b12d      	cbz	r5, 800e06a <rcutils_string_map_reserve+0x1e>
 800e05e:	68eb      	ldr	r3, [r5, #12]
 800e060:	42a3      	cmp	r3, r4
 800e062:	d906      	bls.n	800e072 <rcutils_string_map_reserve+0x26>
 800e064:	461c      	mov	r4, r3
 800e066:	2d00      	cmp	r5, #0
 800e068:	d1f9      	bne.n	800e05e <rcutils_string_map_reserve+0x12>
 800e06a:	201f      	movs	r0, #31
 800e06c:	b003      	add	sp, #12
 800e06e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e072:	68ab      	ldr	r3, [r5, #8]
 800e074:	42a3      	cmp	r3, r4
 800e076:	d049      	beq.n	800e10c <rcutils_string_map_reserve+0xc0>
 800e078:	6a2f      	ldr	r7, [r5, #32]
 800e07a:	2c00      	cmp	r4, #0
 800e07c:	d035      	beq.n	800e0ea <rcutils_string_map_reserve+0x9e>
 800e07e:	f1b4 4f80 	cmp.w	r4, #1073741824	@ 0x40000000
 800e082:	d245      	bcs.n	800e110 <rcutils_string_map_reserve+0xc4>
 800e084:	ea4f 0884 	mov.w	r8, r4, lsl #2
 800e088:	f8d5 9018 	ldr.w	r9, [r5, #24]
 800e08c:	6828      	ldr	r0, [r5, #0]
 800e08e:	4641      	mov	r1, r8
 800e090:	463a      	mov	r2, r7
 800e092:	47c8      	blx	r9
 800e094:	2800      	cmp	r0, #0
 800e096:	d03b      	beq.n	800e110 <rcutils_string_map_reserve+0xc4>
 800e098:	6833      	ldr	r3, [r6, #0]
 800e09a:	463a      	mov	r2, r7
 800e09c:	6018      	str	r0, [r3, #0]
 800e09e:	4641      	mov	r1, r8
 800e0a0:	6858      	ldr	r0, [r3, #4]
 800e0a2:	47c8      	blx	r9
 800e0a4:	2800      	cmp	r0, #0
 800e0a6:	d033      	beq.n	800e110 <rcutils_string_map_reserve+0xc4>
 800e0a8:	6835      	ldr	r5, [r6, #0]
 800e0aa:	68ab      	ldr	r3, [r5, #8]
 800e0ac:	6068      	str	r0, [r5, #4]
 800e0ae:	42a3      	cmp	r3, r4
 800e0b0:	d227      	bcs.n	800e102 <rcutils_string_map_reserve+0xb6>
 800e0b2:	682a      	ldr	r2, [r5, #0]
 800e0b4:	eb00 0108 	add.w	r1, r0, r8
 800e0b8:	eb02 0783 	add.w	r7, r2, r3, lsl #2
 800e0bc:	428f      	cmp	r7, r1
 800e0be:	ea4f 0c83 	mov.w	ip, r3, lsl #2
 800e0c2:	eb00 0683 	add.w	r6, r0, r3, lsl #2
 800e0c6:	d203      	bcs.n	800e0d0 <rcutils_string_map_reserve+0x84>
 800e0c8:	eb02 0108 	add.w	r1, r2, r8
 800e0cc:	428e      	cmp	r6, r1
 800e0ce:	d323      	bcc.n	800e118 <rcutils_string_map_reserve+0xcc>
 800e0d0:	1ae3      	subs	r3, r4, r3
 800e0d2:	009a      	lsls	r2, r3, #2
 800e0d4:	4638      	mov	r0, r7
 800e0d6:	2100      	movs	r1, #0
 800e0d8:	9201      	str	r2, [sp, #4]
 800e0da:	f00b fd5b 	bl	8019b94 <memset>
 800e0de:	9a01      	ldr	r2, [sp, #4]
 800e0e0:	4630      	mov	r0, r6
 800e0e2:	2100      	movs	r1, #0
 800e0e4:	f00b fd56 	bl	8019b94 <memset>
 800e0e8:	e00b      	b.n	800e102 <rcutils_string_map_reserve+0xb6>
 800e0ea:	f8d5 8014 	ldr.w	r8, [r5, #20]
 800e0ee:	6828      	ldr	r0, [r5, #0]
 800e0f0:	4639      	mov	r1, r7
 800e0f2:	47c0      	blx	r8
 800e0f4:	6833      	ldr	r3, [r6, #0]
 800e0f6:	4639      	mov	r1, r7
 800e0f8:	6858      	ldr	r0, [r3, #4]
 800e0fa:	601c      	str	r4, [r3, #0]
 800e0fc:	47c0      	blx	r8
 800e0fe:	6835      	ldr	r5, [r6, #0]
 800e100:	606c      	str	r4, [r5, #4]
 800e102:	2000      	movs	r0, #0
 800e104:	60ac      	str	r4, [r5, #8]
 800e106:	b003      	add	sp, #12
 800e108:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e10c:	2000      	movs	r0, #0
 800e10e:	e7ad      	b.n	800e06c <rcutils_string_map_reserve+0x20>
 800e110:	200a      	movs	r0, #10
 800e112:	e7ab      	b.n	800e06c <rcutils_string_map_reserve+0x20>
 800e114:	200b      	movs	r0, #11
 800e116:	4770      	bx	lr
 800e118:	1f13      	subs	r3, r2, #4
 800e11a:	f1ac 0c04 	sub.w	ip, ip, #4
 800e11e:	4498      	add	r8, r3
 800e120:	4460      	add	r0, ip
 800e122:	4462      	add	r2, ip
 800e124:	2300      	movs	r3, #0
 800e126:	f842 3f04 	str.w	r3, [r2, #4]!
 800e12a:	4542      	cmp	r2, r8
 800e12c:	f840 3f04 	str.w	r3, [r0, #4]!
 800e130:	d1f9      	bne.n	800e126 <rcutils_string_map_reserve+0xda>
 800e132:	e7e6      	b.n	800e102 <rcutils_string_map_reserve+0xb6>

0800e134 <rcutils_string_map_init>:
 800e134:	b082      	sub	sp, #8
 800e136:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e138:	460e      	mov	r6, r1
 800e13a:	a906      	add	r1, sp, #24
 800e13c:	e881 000c 	stmia.w	r1, {r2, r3}
 800e140:	b380      	cbz	r0, 800e1a4 <rcutils_string_map_init+0x70>
 800e142:	6807      	ldr	r7, [r0, #0]
 800e144:	4604      	mov	r4, r0
 800e146:	b12f      	cbz	r7, 800e154 <rcutils_string_map_init+0x20>
 800e148:	251e      	movs	r5, #30
 800e14a:	4628      	mov	r0, r5
 800e14c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800e150:	b002      	add	sp, #8
 800e152:	4770      	bx	lr
 800e154:	a806      	add	r0, sp, #24
 800e156:	f7ff ff37 	bl	800dfc8 <rcutils_allocator_is_valid>
 800e15a:	b318      	cbz	r0, 800e1a4 <rcutils_string_map_init+0x70>
 800e15c:	9b06      	ldr	r3, [sp, #24]
 800e15e:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800e160:	2024      	movs	r0, #36	@ 0x24
 800e162:	4798      	blx	r3
 800e164:	4605      	mov	r5, r0
 800e166:	6020      	str	r0, [r4, #0]
 800e168:	b310      	cbz	r0, 800e1b0 <rcutils_string_map_init+0x7c>
 800e16a:	f10d 0e18 	add.w	lr, sp, #24
 800e16e:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800e172:	f105 0c10 	add.w	ip, r5, #16
 800e176:	e9c5 7700 	strd	r7, r7, [r5]
 800e17a:	e9c5 7702 	strd	r7, r7, [r5, #8]
 800e17e:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800e182:	f8de 3000 	ldr.w	r3, [lr]
 800e186:	f8cc 3000 	str.w	r3, [ip]
 800e18a:	4631      	mov	r1, r6
 800e18c:	4620      	mov	r0, r4
 800e18e:	f7ff ff5d 	bl	800e04c <rcutils_string_map_reserve>
 800e192:	4605      	mov	r5, r0
 800e194:	2800      	cmp	r0, #0
 800e196:	d0d8      	beq.n	800e14a <rcutils_string_map_init+0x16>
 800e198:	9b07      	ldr	r3, [sp, #28]
 800e19a:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800e19c:	6820      	ldr	r0, [r4, #0]
 800e19e:	4798      	blx	r3
 800e1a0:	6027      	str	r7, [r4, #0]
 800e1a2:	e7d2      	b.n	800e14a <rcutils_string_map_init+0x16>
 800e1a4:	250b      	movs	r5, #11
 800e1a6:	4628      	mov	r0, r5
 800e1a8:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800e1ac:	b002      	add	sp, #8
 800e1ae:	4770      	bx	lr
 800e1b0:	250a      	movs	r5, #10
 800e1b2:	e7ca      	b.n	800e14a <rcutils_string_map_init+0x16>

0800e1b4 <rcutils_string_map_fini>:
 800e1b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e1b8:	b082      	sub	sp, #8
 800e1ba:	2800      	cmp	r0, #0
 800e1bc:	d039      	beq.n	800e232 <rcutils_string_map_fini+0x7e>
 800e1be:	6804      	ldr	r4, [r0, #0]
 800e1c0:	4606      	mov	r6, r0
 800e1c2:	2c00      	cmp	r4, #0
 800e1c4:	d031      	beq.n	800e22a <rcutils_string_map_fini+0x76>
 800e1c6:	68a3      	ldr	r3, [r4, #8]
 800e1c8:	b323      	cbz	r3, 800e214 <rcutils_string_map_fini+0x60>
 800e1ca:	2500      	movs	r5, #0
 800e1cc:	6822      	ldr	r2, [r4, #0]
 800e1ce:	46a8      	mov	r8, r5
 800e1d0:	f852 0025 	ldr.w	r0, [r2, r5, lsl #2]
 800e1d4:	b1d8      	cbz	r0, 800e20e <rcutils_string_map_fini+0x5a>
 800e1d6:	6a21      	ldr	r1, [r4, #32]
 800e1d8:	6967      	ldr	r7, [r4, #20]
 800e1da:	9101      	str	r1, [sp, #4]
 800e1dc:	47b8      	blx	r7
 800e1de:	e9d4 2300 	ldrd	r2, r3, [r4]
 800e1e2:	f842 8025 	str.w	r8, [r2, r5, lsl #2]
 800e1e6:	9901      	ldr	r1, [sp, #4]
 800e1e8:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800e1ec:	47b8      	blx	r7
 800e1ee:	68e3      	ldr	r3, [r4, #12]
 800e1f0:	6862      	ldr	r2, [r4, #4]
 800e1f2:	3b01      	subs	r3, #1
 800e1f4:	f842 8025 	str.w	r8, [r2, r5, lsl #2]
 800e1f8:	60e3      	str	r3, [r4, #12]
 800e1fa:	6834      	ldr	r4, [r6, #0]
 800e1fc:	68a3      	ldr	r3, [r4, #8]
 800e1fe:	3501      	adds	r5, #1
 800e200:	429d      	cmp	r5, r3
 800e202:	d207      	bcs.n	800e214 <rcutils_string_map_fini+0x60>
 800e204:	6822      	ldr	r2, [r4, #0]
 800e206:	f852 0025 	ldr.w	r0, [r2, r5, lsl #2]
 800e20a:	2800      	cmp	r0, #0
 800e20c:	d1e3      	bne.n	800e1d6 <rcutils_string_map_fini+0x22>
 800e20e:	3501      	adds	r5, #1
 800e210:	429d      	cmp	r5, r3
 800e212:	d3dd      	bcc.n	800e1d0 <rcutils_string_map_fini+0x1c>
 800e214:	2100      	movs	r1, #0
 800e216:	4630      	mov	r0, r6
 800e218:	f7ff ff18 	bl	800e04c <rcutils_string_map_reserve>
 800e21c:	4604      	mov	r4, r0
 800e21e:	b920      	cbnz	r0, 800e22a <rcutils_string_map_fini+0x76>
 800e220:	6830      	ldr	r0, [r6, #0]
 800e222:	6943      	ldr	r3, [r0, #20]
 800e224:	6a01      	ldr	r1, [r0, #32]
 800e226:	4798      	blx	r3
 800e228:	6034      	str	r4, [r6, #0]
 800e22a:	4620      	mov	r0, r4
 800e22c:	b002      	add	sp, #8
 800e22e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e232:	240b      	movs	r4, #11
 800e234:	4620      	mov	r0, r4
 800e236:	b002      	add	sp, #8
 800e238:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800e23c <rcutils_string_map_getn>:
 800e23c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e240:	b082      	sub	sp, #8
 800e242:	b308      	cbz	r0, 800e288 <rcutils_string_map_getn+0x4c>
 800e244:	6804      	ldr	r4, [r0, #0]
 800e246:	b304      	cbz	r4, 800e28a <rcutils_string_map_getn+0x4e>
 800e248:	460d      	mov	r5, r1
 800e24a:	b1e9      	cbz	r1, 800e288 <rcutils_string_map_getn+0x4c>
 800e24c:	f8d4 9008 	ldr.w	r9, [r4, #8]
 800e250:	6827      	ldr	r7, [r4, #0]
 800e252:	f1b9 0f00 	cmp.w	r9, #0
 800e256:	d017      	beq.n	800e288 <rcutils_string_map_getn+0x4c>
 800e258:	4690      	mov	r8, r2
 800e25a:	3f04      	subs	r7, #4
 800e25c:	2600      	movs	r6, #0
 800e25e:	f857 1f04 	ldr.w	r1, [r7, #4]!
 800e262:	9101      	str	r1, [sp, #4]
 800e264:	ea4f 0a86 	mov.w	sl, r6, lsl #2
 800e268:	4608      	mov	r0, r1
 800e26a:	3601      	adds	r6, #1
 800e26c:	b151      	cbz	r1, 800e284 <rcutils_string_map_getn+0x48>
 800e26e:	f7f1 ffb9 	bl	80001e4 <strlen>
 800e272:	4540      	cmp	r0, r8
 800e274:	4602      	mov	r2, r0
 800e276:	9901      	ldr	r1, [sp, #4]
 800e278:	bf38      	it	cc
 800e27a:	4642      	movcc	r2, r8
 800e27c:	4628      	mov	r0, r5
 800e27e:	f00b fc9e 	bl	8019bbe <strncmp>
 800e282:	b130      	cbz	r0, 800e292 <rcutils_string_map_getn+0x56>
 800e284:	45b1      	cmp	r9, r6
 800e286:	d1ea      	bne.n	800e25e <rcutils_string_map_getn+0x22>
 800e288:	2400      	movs	r4, #0
 800e28a:	4620      	mov	r0, r4
 800e28c:	b002      	add	sp, #8
 800e28e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e292:	6863      	ldr	r3, [r4, #4]
 800e294:	f853 400a 	ldr.w	r4, [r3, sl]
 800e298:	4620      	mov	r0, r4
 800e29a:	b002      	add	sp, #8
 800e29c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0800e2a0 <rcutils_system_time_now>:
 800e2a0:	b310      	cbz	r0, 800e2e8 <rcutils_system_time_now+0x48>
 800e2a2:	b570      	push	{r4, r5, r6, lr}
 800e2a4:	b084      	sub	sp, #16
 800e2a6:	4669      	mov	r1, sp
 800e2a8:	4604      	mov	r4, r0
 800e2aa:	2001      	movs	r0, #1
 800e2ac:	f7f4 f930 	bl	8002510 <clock_gettime>
 800e2b0:	e9dd 0100 	ldrd	r0, r1, [sp]
 800e2b4:	2800      	cmp	r0, #0
 800e2b6:	f171 0300 	sbcs.w	r3, r1, #0
 800e2ba:	db12      	blt.n	800e2e2 <rcutils_system_time_now+0x42>
 800e2bc:	9d02      	ldr	r5, [sp, #8]
 800e2be:	2d00      	cmp	r5, #0
 800e2c0:	db0c      	blt.n	800e2dc <rcutils_system_time_now+0x3c>
 800e2c2:	4e0a      	ldr	r6, [pc, #40]	@ (800e2ec <rcutils_system_time_now+0x4c>)
 800e2c4:	fba0 2306 	umull	r2, r3, r0, r6
 800e2c8:	1952      	adds	r2, r2, r5
 800e2ca:	fb06 3301 	mla	r3, r6, r1, r3
 800e2ce:	eb43 73e5 	adc.w	r3, r3, r5, asr #31
 800e2d2:	2000      	movs	r0, #0
 800e2d4:	e9c4 2300 	strd	r2, r3, [r4]
 800e2d8:	b004      	add	sp, #16
 800e2da:	bd70      	pop	{r4, r5, r6, pc}
 800e2dc:	ea50 0301 	orrs.w	r3, r0, r1
 800e2e0:	d1ef      	bne.n	800e2c2 <rcutils_system_time_now+0x22>
 800e2e2:	2002      	movs	r0, #2
 800e2e4:	b004      	add	sp, #16
 800e2e6:	bd70      	pop	{r4, r5, r6, pc}
 800e2e8:	200b      	movs	r0, #11
 800e2ea:	4770      	bx	lr
 800e2ec:	3b9aca00 	.word	0x3b9aca00

0800e2f0 <rcutils_steady_time_now>:
 800e2f0:	b310      	cbz	r0, 800e338 <rcutils_steady_time_now+0x48>
 800e2f2:	b570      	push	{r4, r5, r6, lr}
 800e2f4:	b084      	sub	sp, #16
 800e2f6:	4669      	mov	r1, sp
 800e2f8:	4604      	mov	r4, r0
 800e2fa:	2000      	movs	r0, #0
 800e2fc:	f7f4 f908 	bl	8002510 <clock_gettime>
 800e300:	e9dd 0100 	ldrd	r0, r1, [sp]
 800e304:	2800      	cmp	r0, #0
 800e306:	f171 0300 	sbcs.w	r3, r1, #0
 800e30a:	db12      	blt.n	800e332 <rcutils_steady_time_now+0x42>
 800e30c:	9d02      	ldr	r5, [sp, #8]
 800e30e:	2d00      	cmp	r5, #0
 800e310:	db0c      	blt.n	800e32c <rcutils_steady_time_now+0x3c>
 800e312:	4e0a      	ldr	r6, [pc, #40]	@ (800e33c <rcutils_steady_time_now+0x4c>)
 800e314:	fba0 2306 	umull	r2, r3, r0, r6
 800e318:	1952      	adds	r2, r2, r5
 800e31a:	fb06 3301 	mla	r3, r6, r1, r3
 800e31e:	eb43 73e5 	adc.w	r3, r3, r5, asr #31
 800e322:	2000      	movs	r0, #0
 800e324:	e9c4 2300 	strd	r2, r3, [r4]
 800e328:	b004      	add	sp, #16
 800e32a:	bd70      	pop	{r4, r5, r6, pc}
 800e32c:	ea50 0301 	orrs.w	r3, r0, r1
 800e330:	d1ef      	bne.n	800e312 <rcutils_steady_time_now+0x22>
 800e332:	2002      	movs	r0, #2
 800e334:	b004      	add	sp, #16
 800e336:	bd70      	pop	{r4, r5, r6, pc}
 800e338:	200b      	movs	r0, #11
 800e33a:	4770      	bx	lr
 800e33c:	3b9aca00 	.word	0x3b9aca00

0800e340 <rmw_get_default_publisher_options>:
 800e340:	2000      	movs	r0, #0
 800e342:	4770      	bx	lr

0800e344 <rmw_validate_full_topic_name>:
 800e344:	2800      	cmp	r0, #0
 800e346:	d062      	beq.n	800e40e <rmw_validate_full_topic_name+0xca>
 800e348:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e34c:	460d      	mov	r5, r1
 800e34e:	2900      	cmp	r1, #0
 800e350:	d05f      	beq.n	800e412 <rmw_validate_full_topic_name+0xce>
 800e352:	4616      	mov	r6, r2
 800e354:	4604      	mov	r4, r0
 800e356:	f7f1 ff45 	bl	80001e4 <strlen>
 800e35a:	b148      	cbz	r0, 800e370 <rmw_validate_full_topic_name+0x2c>
 800e35c:	7823      	ldrb	r3, [r4, #0]
 800e35e:	2b2f      	cmp	r3, #47	@ 0x2f
 800e360:	d00d      	beq.n	800e37e <rmw_validate_full_topic_name+0x3a>
 800e362:	2302      	movs	r3, #2
 800e364:	602b      	str	r3, [r5, #0]
 800e366:	b13e      	cbz	r6, 800e378 <rmw_validate_full_topic_name+0x34>
 800e368:	2000      	movs	r0, #0
 800e36a:	6030      	str	r0, [r6, #0]
 800e36c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e370:	2301      	movs	r3, #1
 800e372:	602b      	str	r3, [r5, #0]
 800e374:	2e00      	cmp	r6, #0
 800e376:	d1f7      	bne.n	800e368 <rmw_validate_full_topic_name+0x24>
 800e378:	2000      	movs	r0, #0
 800e37a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e37e:	1e47      	subs	r7, r0, #1
 800e380:	5de3      	ldrb	r3, [r4, r7]
 800e382:	2b2f      	cmp	r3, #47	@ 0x2f
 800e384:	d047      	beq.n	800e416 <rmw_validate_full_topic_name+0xd2>
 800e386:	1e63      	subs	r3, r4, #1
 800e388:	eb03 0900 	add.w	r9, r3, r0
 800e38c:	f1c4 0e01 	rsb	lr, r4, #1
 800e390:	eb0e 0803 	add.w	r8, lr, r3
 800e394:	f813 1f01 	ldrb.w	r1, [r3, #1]!
 800e398:	f021 0220 	bic.w	r2, r1, #32
 800e39c:	3a41      	subs	r2, #65	@ 0x41
 800e39e:	2a19      	cmp	r2, #25
 800e3a0:	f1a1 0c2f 	sub.w	ip, r1, #47	@ 0x2f
 800e3a4:	d90c      	bls.n	800e3c0 <rmw_validate_full_topic_name+0x7c>
 800e3a6:	295f      	cmp	r1, #95	@ 0x5f
 800e3a8:	d00a      	beq.n	800e3c0 <rmw_validate_full_topic_name+0x7c>
 800e3aa:	f1bc 0f0a 	cmp.w	ip, #10
 800e3ae:	d907      	bls.n	800e3c0 <rmw_validate_full_topic_name+0x7c>
 800e3b0:	2304      	movs	r3, #4
 800e3b2:	602b      	str	r3, [r5, #0]
 800e3b4:	2e00      	cmp	r6, #0
 800e3b6:	d0df      	beq.n	800e378 <rmw_validate_full_topic_name+0x34>
 800e3b8:	f8c6 8000 	str.w	r8, [r6]
 800e3bc:	2000      	movs	r0, #0
 800e3be:	e7d5      	b.n	800e36c <rmw_validate_full_topic_name+0x28>
 800e3c0:	454b      	cmp	r3, r9
 800e3c2:	d1e5      	bne.n	800e390 <rmw_validate_full_topic_name+0x4c>
 800e3c4:	f8df e084 	ldr.w	lr, [pc, #132]	@ 800e44c <rmw_validate_full_topic_name+0x108>
 800e3c8:	2300      	movs	r3, #0
 800e3ca:	f107 0801 	add.w	r8, r7, #1
 800e3ce:	e005      	b.n	800e3dc <rmw_validate_full_topic_name+0x98>
 800e3d0:	4611      	mov	r1, r2
 800e3d2:	4288      	cmp	r0, r1
 800e3d4:	4613      	mov	r3, r2
 800e3d6:	f104 0401 	add.w	r4, r4, #1
 800e3da:	d925      	bls.n	800e428 <rmw_validate_full_topic_name+0xe4>
 800e3dc:	429f      	cmp	r7, r3
 800e3de:	f103 0201 	add.w	r2, r3, #1
 800e3e2:	d01e      	beq.n	800e422 <rmw_validate_full_topic_name+0xde>
 800e3e4:	7821      	ldrb	r1, [r4, #0]
 800e3e6:	292f      	cmp	r1, #47	@ 0x2f
 800e3e8:	d1f2      	bne.n	800e3d0 <rmw_validate_full_topic_name+0x8c>
 800e3ea:	f894 c001 	ldrb.w	ip, [r4, #1]
 800e3ee:	1c5a      	adds	r2, r3, #1
 800e3f0:	f1bc 0f2f 	cmp.w	ip, #47	@ 0x2f
 800e3f4:	4611      	mov	r1, r2
 800e3f6:	d024      	beq.n	800e442 <rmw_validate_full_topic_name+0xfe>
 800e3f8:	f81c 300e 	ldrb.w	r3, [ip, lr]
 800e3fc:	075b      	lsls	r3, r3, #29
 800e3fe:	d5e8      	bpl.n	800e3d2 <rmw_validate_full_topic_name+0x8e>
 800e400:	2306      	movs	r3, #6
 800e402:	602b      	str	r3, [r5, #0]
 800e404:	2e00      	cmp	r6, #0
 800e406:	d0b7      	beq.n	800e378 <rmw_validate_full_topic_name+0x34>
 800e408:	6032      	str	r2, [r6, #0]
 800e40a:	2000      	movs	r0, #0
 800e40c:	e7ae      	b.n	800e36c <rmw_validate_full_topic_name+0x28>
 800e40e:	200b      	movs	r0, #11
 800e410:	4770      	bx	lr
 800e412:	200b      	movs	r0, #11
 800e414:	e7aa      	b.n	800e36c <rmw_validate_full_topic_name+0x28>
 800e416:	2303      	movs	r3, #3
 800e418:	602b      	str	r3, [r5, #0]
 800e41a:	2e00      	cmp	r6, #0
 800e41c:	d0ac      	beq.n	800e378 <rmw_validate_full_topic_name+0x34>
 800e41e:	6037      	str	r7, [r6, #0]
 800e420:	e7aa      	b.n	800e378 <rmw_validate_full_topic_name+0x34>
 800e422:	4641      	mov	r1, r8
 800e424:	1c7a      	adds	r2, r7, #1
 800e426:	e7d4      	b.n	800e3d2 <rmw_validate_full_topic_name+0x8e>
 800e428:	28f7      	cmp	r0, #247	@ 0xf7
 800e42a:	d802      	bhi.n	800e432 <rmw_validate_full_topic_name+0xee>
 800e42c:	2000      	movs	r0, #0
 800e42e:	6028      	str	r0, [r5, #0]
 800e430:	e79c      	b.n	800e36c <rmw_validate_full_topic_name+0x28>
 800e432:	2307      	movs	r3, #7
 800e434:	602b      	str	r3, [r5, #0]
 800e436:	2e00      	cmp	r6, #0
 800e438:	d09e      	beq.n	800e378 <rmw_validate_full_topic_name+0x34>
 800e43a:	23f6      	movs	r3, #246	@ 0xf6
 800e43c:	6033      	str	r3, [r6, #0]
 800e43e:	2000      	movs	r0, #0
 800e440:	e794      	b.n	800e36c <rmw_validate_full_topic_name+0x28>
 800e442:	2305      	movs	r3, #5
 800e444:	602b      	str	r3, [r5, #0]
 800e446:	2e00      	cmp	r6, #0
 800e448:	d1de      	bne.n	800e408 <rmw_validate_full_topic_name+0xc4>
 800e44a:	e795      	b.n	800e378 <rmw_validate_full_topic_name+0x34>
 800e44c:	0801c600 	.word	0x0801c600

0800e450 <rmw_uros_set_custom_transport>:
 800e450:	b470      	push	{r4, r5, r6}
 800e452:	e9dd 5603 	ldrd	r5, r6, [sp, #12]
 800e456:	b162      	cbz	r2, 800e472 <rmw_uros_set_custom_transport+0x22>
 800e458:	b15b      	cbz	r3, 800e472 <rmw_uros_set_custom_transport+0x22>
 800e45a:	b155      	cbz	r5, 800e472 <rmw_uros_set_custom_transport+0x22>
 800e45c:	b14e      	cbz	r6, 800e472 <rmw_uros_set_custom_transport+0x22>
 800e45e:	4c06      	ldr	r4, [pc, #24]	@ (800e478 <rmw_uros_set_custom_transport+0x28>)
 800e460:	7020      	strb	r0, [r4, #0]
 800e462:	e9c4 1201 	strd	r1, r2, [r4, #4]
 800e466:	e9c4 3503 	strd	r3, r5, [r4, #12]
 800e46a:	6166      	str	r6, [r4, #20]
 800e46c:	2000      	movs	r0, #0
 800e46e:	bc70      	pop	{r4, r5, r6}
 800e470:	4770      	bx	lr
 800e472:	200b      	movs	r0, #11
 800e474:	bc70      	pop	{r4, r5, r6}
 800e476:	4770      	bx	lr
 800e478:	20007898 	.word	0x20007898

0800e47c <flush_session>:
 800e47c:	6fc9      	ldr	r1, [r1, #124]	@ 0x7c
 800e47e:	f002 bf7b 	b.w	8011378 <uxr_run_session_until_confirm_delivery>
 800e482:	bf00      	nop

0800e484 <rmw_publish>:
 800e484:	2800      	cmp	r0, #0
 800e486:	d053      	beq.n	800e530 <rmw_publish+0xac>
 800e488:	b570      	push	{r4, r5, r6, lr}
 800e48a:	460d      	mov	r5, r1
 800e48c:	b08e      	sub	sp, #56	@ 0x38
 800e48e:	2900      	cmp	r1, #0
 800e490:	d04b      	beq.n	800e52a <rmw_publish+0xa6>
 800e492:	4604      	mov	r4, r0
 800e494:	6800      	ldr	r0, [r0, #0]
 800e496:	f000 fca7 	bl	800ede8 <is_uxrce_rmw_identifier_valid>
 800e49a:	2800      	cmp	r0, #0
 800e49c:	d045      	beq.n	800e52a <rmw_publish+0xa6>
 800e49e:	6866      	ldr	r6, [r4, #4]
 800e4a0:	2e00      	cmp	r6, #0
 800e4a2:	d042      	beq.n	800e52a <rmw_publish+0xa6>
 800e4a4:	69b4      	ldr	r4, [r6, #24]
 800e4a6:	4628      	mov	r0, r5
 800e4a8:	6923      	ldr	r3, [r4, #16]
 800e4aa:	4798      	blx	r3
 800e4ac:	69f3      	ldr	r3, [r6, #28]
 800e4ae:	9005      	str	r0, [sp, #20]
 800e4b0:	b113      	cbz	r3, 800e4b8 <rmw_publish+0x34>
 800e4b2:	a805      	add	r0, sp, #20
 800e4b4:	4798      	blx	r3
 800e4b6:	9805      	ldr	r0, [sp, #20]
 800e4b8:	f8d6 3080 	ldr.w	r3, [r6, #128]	@ 0x80
 800e4bc:	691b      	ldr	r3, [r3, #16]
 800e4be:	9000      	str	r0, [sp, #0]
 800e4c0:	6972      	ldr	r2, [r6, #20]
 800e4c2:	6fb1      	ldr	r1, [r6, #120]	@ 0x78
 800e4c4:	f503 7028 	add.w	r0, r3, #672	@ 0x2a0
 800e4c8:	ab06      	add	r3, sp, #24
 800e4ca:	f003 fd5d 	bl	8011f88 <uxr_prepare_output_stream>
 800e4ce:	b1d8      	cbz	r0, 800e508 <rmw_publish+0x84>
 800e4d0:	68a3      	ldr	r3, [r4, #8]
 800e4d2:	4628      	mov	r0, r5
 800e4d4:	a906      	add	r1, sp, #24
 800e4d6:	4798      	blx	r3
 800e4d8:	6a33      	ldr	r3, [r6, #32]
 800e4da:	4604      	mov	r4, r0
 800e4dc:	b10b      	cbz	r3, 800e4e2 <rmw_publish+0x5e>
 800e4de:	a806      	add	r0, sp, #24
 800e4e0:	4798      	blx	r3
 800e4e2:	f896 307a 	ldrb.w	r3, [r6, #122]	@ 0x7a
 800e4e6:	2b01      	cmp	r3, #1
 800e4e8:	f8d6 3080 	ldr.w	r3, [r6, #128]	@ 0x80
 800e4ec:	d022      	beq.n	800e534 <rmw_publish+0xb0>
 800e4ee:	6918      	ldr	r0, [r3, #16]
 800e4f0:	6ff1      	ldr	r1, [r6, #124]	@ 0x7c
 800e4f2:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800e4f6:	f002 ff3f 	bl	8011378 <uxr_run_session_until_confirm_delivery>
 800e4fa:	4020      	ands	r0, r4
 800e4fc:	b2c4      	uxtb	r4, r0
 800e4fe:	f084 0001 	eor.w	r0, r4, #1
 800e502:	b2c0      	uxtb	r0, r0
 800e504:	b00e      	add	sp, #56	@ 0x38
 800e506:	bd70      	pop	{r4, r5, r6, pc}
 800e508:	f8d6 3080 	ldr.w	r3, [r6, #128]	@ 0x80
 800e50c:	4a0c      	ldr	r2, [pc, #48]	@ (800e540 <rmw_publish+0xbc>)
 800e50e:	6918      	ldr	r0, [r3, #16]
 800e510:	9b05      	ldr	r3, [sp, #20]
 800e512:	9300      	str	r3, [sp, #0]
 800e514:	e9cd 2601 	strd	r2, r6, [sp, #4]
 800e518:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800e51c:	6972      	ldr	r2, [r6, #20]
 800e51e:	6fb1      	ldr	r1, [r6, #120]	@ 0x78
 800e520:	ab06      	add	r3, sp, #24
 800e522:	f003 fd61 	bl	8011fe8 <uxr_prepare_output_stream_fragmented>
 800e526:	2800      	cmp	r0, #0
 800e528:	d1d2      	bne.n	800e4d0 <rmw_publish+0x4c>
 800e52a:	2001      	movs	r0, #1
 800e52c:	b00e      	add	sp, #56	@ 0x38
 800e52e:	bd70      	pop	{r4, r5, r6, pc}
 800e530:	2001      	movs	r0, #1
 800e532:	4770      	bx	lr
 800e534:	6918      	ldr	r0, [r3, #16]
 800e536:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800e53a:	f002 fb61 	bl	8010c00 <uxr_flash_output_streams>
 800e53e:	e7de      	b.n	800e4fe <rmw_publish+0x7a>
 800e540:	0800e47d 	.word	0x0800e47d

0800e544 <rmw_create_publisher>:
 800e544:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e548:	b087      	sub	sp, #28
 800e54a:	2800      	cmp	r0, #0
 800e54c:	f000 80c9 	beq.w	800e6e2 <rmw_create_publisher+0x19e>
 800e550:	460e      	mov	r6, r1
 800e552:	2900      	cmp	r1, #0
 800e554:	f000 80c5 	beq.w	800e6e2 <rmw_create_publisher+0x19e>
 800e558:	4604      	mov	r4, r0
 800e55a:	6800      	ldr	r0, [r0, #0]
 800e55c:	4615      	mov	r5, r2
 800e55e:	4698      	mov	r8, r3
 800e560:	f000 fc42 	bl	800ede8 <is_uxrce_rmw_identifier_valid>
 800e564:	2800      	cmp	r0, #0
 800e566:	f000 80bc 	beq.w	800e6e2 <rmw_create_publisher+0x19e>
 800e56a:	2d00      	cmp	r5, #0
 800e56c:	f000 80b9 	beq.w	800e6e2 <rmw_create_publisher+0x19e>
 800e570:	782b      	ldrb	r3, [r5, #0]
 800e572:	2b00      	cmp	r3, #0
 800e574:	f000 80b5 	beq.w	800e6e2 <rmw_create_publisher+0x19e>
 800e578:	f1b8 0f00 	cmp.w	r8, #0
 800e57c:	f000 80b1 	beq.w	800e6e2 <rmw_create_publisher+0x19e>
 800e580:	485a      	ldr	r0, [pc, #360]	@ (800e6ec <rmw_create_publisher+0x1a8>)
 800e582:	f8d4 9004 	ldr.w	r9, [r4, #4]
 800e586:	f007 fdad 	bl	80160e4 <get_memory>
 800e58a:	2800      	cmp	r0, #0
 800e58c:	f000 80a9 	beq.w	800e6e2 <rmw_create_publisher+0x19e>
 800e590:	68c4      	ldr	r4, [r0, #12]
 800e592:	f8c4 4088 	str.w	r4, [r4, #136]	@ 0x88
 800e596:	f007 fe0d 	bl	80161b4 <rmw_get_implementation_identifier>
 800e59a:	f104 0a98 	add.w	sl, r4, #152	@ 0x98
 800e59e:	f8c4 0084 	str.w	r0, [r4, #132]	@ 0x84
 800e5a2:	f8c4 a08c 	str.w	sl, [r4, #140]	@ 0x8c
 800e5a6:	4628      	mov	r0, r5
 800e5a8:	f7f1 fe1c 	bl	80001e4 <strlen>
 800e5ac:	3001      	adds	r0, #1
 800e5ae:	283c      	cmp	r0, #60	@ 0x3c
 800e5b0:	f104 0784 	add.w	r7, r4, #132	@ 0x84
 800e5b4:	f200 808e 	bhi.w	800e6d4 <rmw_create_publisher+0x190>
 800e5b8:	4a4d      	ldr	r2, [pc, #308]	@ (800e6f0 <rmw_create_publisher+0x1ac>)
 800e5ba:	462b      	mov	r3, r5
 800e5bc:	213c      	movs	r1, #60	@ 0x3c
 800e5be:	4650      	mov	r0, sl
 800e5c0:	f00b fa1e 	bl	8019a00 <sniprintf>
 800e5c4:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800e5c8:	e9c4 391f 	strd	r3, r9, [r4, #124]	@ 0x7c
 800e5cc:	4641      	mov	r1, r8
 800e5ce:	2250      	movs	r2, #80	@ 0x50
 800e5d0:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 800e5d4:	f00b fbfd 	bl	8019dd2 <memcpy>
 800e5d8:	f898 3008 	ldrb.w	r3, [r8, #8]
 800e5dc:	4945      	ldr	r1, [pc, #276]	@ (800e6f4 <rmw_create_publisher+0x1b0>)
 800e5de:	2b02      	cmp	r3, #2
 800e5e0:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800e5e4:	bf0c      	ite	eq
 800e5e6:	f8d3 337c 	ldreq.w	r3, [r3, #892]	@ 0x37c
 800e5ea:	f8d3 3378 	ldrne.w	r3, [r3, #888]	@ 0x378
 800e5ee:	67a3      	str	r3, [r4, #120]	@ 0x78
 800e5f0:	2300      	movs	r3, #0
 800e5f2:	e9c4 3307 	strd	r3, r3, [r4, #28]
 800e5f6:	4630      	mov	r0, r6
 800e5f8:	f000 fc04 	bl	800ee04 <get_message_typesupport_handle>
 800e5fc:	2800      	cmp	r0, #0
 800e5fe:	d069      	beq.n	800e6d4 <rmw_create_publisher+0x190>
 800e600:	6842      	ldr	r2, [r0, #4]
 800e602:	61a2      	str	r2, [r4, #24]
 800e604:	2a00      	cmp	r2, #0
 800e606:	d065      	beq.n	800e6d4 <rmw_create_publisher+0x190>
 800e608:	4629      	mov	r1, r5
 800e60a:	4643      	mov	r3, r8
 800e60c:	4648      	mov	r0, r9
 800e60e:	f008 f81b 	bl	8016648 <create_topic>
 800e612:	6260      	str	r0, [r4, #36]	@ 0x24
 800e614:	2800      	cmp	r0, #0
 800e616:	d061      	beq.n	800e6dc <rmw_create_publisher+0x198>
 800e618:	f8d9 2010 	ldr.w	r2, [r9, #16]
 800e61c:	f241 5398 	movw	r3, #5528	@ 0x1598
 800e620:	2103      	movs	r1, #3
 800e622:	5ad0      	ldrh	r0, [r2, r3]
 800e624:	1c45      	adds	r5, r0, #1
 800e626:	52d5      	strh	r5, [r2, r3]
 800e628:	f002 f99e 	bl	8010968 <uxr_object_id>
 800e62c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800e630:	f8d4 2080 	ldr.w	r2, [r4, #128]	@ 0x80
 800e634:	f8d3 3384 	ldr.w	r3, [r3, #900]	@ 0x384
 800e638:	6912      	ldr	r2, [r2, #16]
 800e63a:	6120      	str	r0, [r4, #16]
 800e63c:	f04f 0a06 	mov.w	sl, #6
 800e640:	f8cd a000 	str.w	sl, [sp]
 800e644:	6819      	ldr	r1, [r3, #0]
 800e646:	f8d9 3014 	ldr.w	r3, [r9, #20]
 800e64a:	f502 7028 	add.w	r0, r2, #672	@ 0x2a0
 800e64e:	6922      	ldr	r2, [r4, #16]
 800e650:	f002 f83a 	bl	80106c8 <uxr_buffer_create_publisher_bin>
 800e654:	4602      	mov	r2, r0
 800e656:	f8d9 0010 	ldr.w	r0, [r9, #16]
 800e65a:	f8d0 338c 	ldr.w	r3, [r0, #908]	@ 0x38c
 800e65e:	f8d0 1384 	ldr.w	r1, [r0, #900]	@ 0x384
 800e662:	f000 fb41 	bl	800ece8 <run_xrce_session>
 800e666:	b3a8      	cbz	r0, 800e6d4 <rmw_create_publisher+0x190>
 800e668:	f8d9 2010 	ldr.w	r2, [r9, #16]
 800e66c:	f241 539a 	movw	r3, #5530	@ 0x159a
 800e670:	2105      	movs	r1, #5
 800e672:	5ad0      	ldrh	r0, [r2, r3]
 800e674:	1c45      	adds	r5, r0, #1
 800e676:	52d5      	strh	r5, [r2, r3]
 800e678:	f002 f976 	bl	8010968 <uxr_object_id>
 800e67c:	f8d4 2080 	ldr.w	r2, [r4, #128]	@ 0x80
 800e680:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800e684:	6915      	ldr	r5, [r2, #16]
 800e686:	6160      	str	r0, [r4, #20]
 800e688:	ae04      	add	r6, sp, #16
 800e68a:	4641      	mov	r1, r8
 800e68c:	4630      	mov	r0, r6
 800e68e:	f8d3 8384 	ldr.w	r8, [r3, #900]	@ 0x384
 800e692:	f8d4 b024 	ldr.w	fp, [r4, #36]	@ 0x24
 800e696:	f000 fb43 	bl	800ed20 <convert_qos_profile>
 800e69a:	e896 0003 	ldmia.w	r6, {r0, r1}
 800e69e:	f8cd a00c 	str.w	sl, [sp, #12]
 800e6a2:	9001      	str	r0, [sp, #4]
 800e6a4:	f8ad 1008 	strh.w	r1, [sp, #8]
 800e6a8:	f8db 3010 	ldr.w	r3, [fp, #16]
 800e6ac:	9300      	str	r3, [sp, #0]
 800e6ae:	f505 7528 	add.w	r5, r5, #672	@ 0x2a0
 800e6b2:	e9d4 3204 	ldrd	r3, r2, [r4, #16]
 800e6b6:	f8d8 1000 	ldr.w	r1, [r8]
 800e6ba:	4628      	mov	r0, r5
 800e6bc:	f002 f862 	bl	8010784 <uxr_buffer_create_datawriter_bin>
 800e6c0:	4602      	mov	r2, r0
 800e6c2:	f8d9 0010 	ldr.w	r0, [r9, #16]
 800e6c6:	f8d0 338c 	ldr.w	r3, [r0, #908]	@ 0x38c
 800e6ca:	f8d0 1384 	ldr.w	r1, [r0, #900]	@ 0x384
 800e6ce:	f000 fb0b 	bl	800ece8 <run_xrce_session>
 800e6d2:	b938      	cbnz	r0, 800e6e4 <rmw_create_publisher+0x1a0>
 800e6d4:	6a60      	ldr	r0, [r4, #36]	@ 0x24
 800e6d6:	b108      	cbz	r0, 800e6dc <rmw_create_publisher+0x198>
 800e6d8:	f000 fa0c 	bl	800eaf4 <rmw_uxrce_fini_topic_memory>
 800e6dc:	4638      	mov	r0, r7
 800e6de:	f000 f9b1 	bl	800ea44 <rmw_uxrce_fini_publisher_memory>
 800e6e2:	2700      	movs	r7, #0
 800e6e4:	4638      	mov	r0, r7
 800e6e6:	b007      	add	sp, #28
 800e6e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e6ec:	200078c8 	.word	0x200078c8
 800e6f0:	0801bddc 	.word	0x0801bddc
 800e6f4:	0801bda8 	.word	0x0801bda8

0800e6f8 <rmw_publisher_get_actual_qos>:
 800e6f8:	b150      	cbz	r0, 800e710 <rmw_publisher_get_actual_qos+0x18>
 800e6fa:	b149      	cbz	r1, 800e710 <rmw_publisher_get_actual_qos+0x18>
 800e6fc:	b508      	push	{r3, lr}
 800e6fe:	6843      	ldr	r3, [r0, #4]
 800e700:	2250      	movs	r2, #80	@ 0x50
 800e702:	4608      	mov	r0, r1
 800e704:	f103 0128 	add.w	r1, r3, #40	@ 0x28
 800e708:	f00b fb63 	bl	8019dd2 <memcpy>
 800e70c:	2000      	movs	r0, #0
 800e70e:	bd08      	pop	{r3, pc}
 800e710:	200b      	movs	r0, #11
 800e712:	4770      	bx	lr

0800e714 <rmw_destroy_publisher>:
 800e714:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e716:	b128      	cbz	r0, 800e724 <rmw_destroy_publisher+0x10>
 800e718:	4604      	mov	r4, r0
 800e71a:	6800      	ldr	r0, [r0, #0]
 800e71c:	460d      	mov	r5, r1
 800e71e:	f000 fb63 	bl	800ede8 <is_uxrce_rmw_identifier_valid>
 800e722:	b910      	cbnz	r0, 800e72a <rmw_destroy_publisher+0x16>
 800e724:	2401      	movs	r4, #1
 800e726:	4620      	mov	r0, r4
 800e728:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e72a:	6863      	ldr	r3, [r4, #4]
 800e72c:	2b00      	cmp	r3, #0
 800e72e:	d0f9      	beq.n	800e724 <rmw_destroy_publisher+0x10>
 800e730:	2d00      	cmp	r5, #0
 800e732:	d0f7      	beq.n	800e724 <rmw_destroy_publisher+0x10>
 800e734:	6828      	ldr	r0, [r5, #0]
 800e736:	f000 fb57 	bl	800ede8 <is_uxrce_rmw_identifier_valid>
 800e73a:	2800      	cmp	r0, #0
 800e73c:	d0f2      	beq.n	800e724 <rmw_destroy_publisher+0x10>
 800e73e:	686c      	ldr	r4, [r5, #4]
 800e740:	2c00      	cmp	r4, #0
 800e742:	d0ef      	beq.n	800e724 <rmw_destroy_publisher+0x10>
 800e744:	6a60      	ldr	r0, [r4, #36]	@ 0x24
 800e746:	f8d4 7080 	ldr.w	r7, [r4, #128]	@ 0x80
 800e74a:	f007 ffcd 	bl	80166e8 <destroy_topic>
 800e74e:	f8d4 3080 	ldr.w	r3, [r4, #128]	@ 0x80
 800e752:	6962      	ldr	r2, [r4, #20]
 800e754:	6918      	ldr	r0, [r3, #16]
 800e756:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 800e75a:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800e75e:	6819      	ldr	r1, [r3, #0]
 800e760:	f001 ff00 	bl	8010564 <uxr_buffer_delete_entity>
 800e764:	f8d4 1080 	ldr.w	r1, [r4, #128]	@ 0x80
 800e768:	6922      	ldr	r2, [r4, #16]
 800e76a:	4603      	mov	r3, r0
 800e76c:	6908      	ldr	r0, [r1, #16]
 800e76e:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 800e772:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800e776:	6809      	ldr	r1, [r1, #0]
 800e778:	461c      	mov	r4, r3
 800e77a:	f001 fef3 	bl	8010564 <uxr_buffer_delete_entity>
 800e77e:	4606      	mov	r6, r0
 800e780:	6938      	ldr	r0, [r7, #16]
 800e782:	4622      	mov	r2, r4
 800e784:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 800e788:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 800e78c:	f000 faac 	bl	800ece8 <run_xrce_session>
 800e790:	4604      	mov	r4, r0
 800e792:	6938      	ldr	r0, [r7, #16]
 800e794:	4632      	mov	r2, r6
 800e796:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 800e79a:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 800e79e:	f000 faa3 	bl	800ece8 <run_xrce_session>
 800e7a2:	b12c      	cbz	r4, 800e7b0 <rmw_destroy_publisher+0x9c>
 800e7a4:	b120      	cbz	r0, 800e7b0 <rmw_destroy_publisher+0x9c>
 800e7a6:	2400      	movs	r4, #0
 800e7a8:	4628      	mov	r0, r5
 800e7aa:	f000 f94b 	bl	800ea44 <rmw_uxrce_fini_publisher_memory>
 800e7ae:	e7ba      	b.n	800e726 <rmw_destroy_publisher+0x12>
 800e7b0:	2402      	movs	r4, #2
 800e7b2:	e7f9      	b.n	800e7a8 <rmw_destroy_publisher+0x94>

0800e7b4 <rmw_uxrce_init_service_memory>:
 800e7b4:	b1b2      	cbz	r2, 800e7e4 <rmw_uxrce_init_service_memory+0x30>
 800e7b6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e7b8:	7a07      	ldrb	r7, [r0, #8]
 800e7ba:	4605      	mov	r5, r0
 800e7bc:	b98f      	cbnz	r7, 800e7e2 <rmw_uxrce_init_service_memory+0x2e>
 800e7be:	e9c0 7700 	strd	r7, r7, [r0]
 800e7c2:	460c      	mov	r4, r1
 800e7c4:	23c8      	movs	r3, #200	@ 0xc8
 800e7c6:	2101      	movs	r1, #1
 800e7c8:	fb03 4602 	mla	r6, r3, r2, r4
 800e7cc:	60c3      	str	r3, [r0, #12]
 800e7ce:	7201      	strb	r1, [r0, #8]
 800e7d0:	4621      	mov	r1, r4
 800e7d2:	4628      	mov	r0, r5
 800e7d4:	f007 fc96 	bl	8016104 <put_memory>
 800e7d8:	60e4      	str	r4, [r4, #12]
 800e7da:	f804 7bc8 	strb.w	r7, [r4], #200
 800e7de:	42a6      	cmp	r6, r4
 800e7e0:	d1f6      	bne.n	800e7d0 <rmw_uxrce_init_service_memory+0x1c>
 800e7e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e7e4:	4770      	bx	lr
 800e7e6:	bf00      	nop

0800e7e8 <rmw_uxrce_init_client_memory>:
 800e7e8:	b1b2      	cbz	r2, 800e818 <rmw_uxrce_init_client_memory+0x30>
 800e7ea:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e7ec:	7a07      	ldrb	r7, [r0, #8]
 800e7ee:	4605      	mov	r5, r0
 800e7f0:	b98f      	cbnz	r7, 800e816 <rmw_uxrce_init_client_memory+0x2e>
 800e7f2:	e9c0 7700 	strd	r7, r7, [r0]
 800e7f6:	460c      	mov	r4, r1
 800e7f8:	23c8      	movs	r3, #200	@ 0xc8
 800e7fa:	2101      	movs	r1, #1
 800e7fc:	fb03 4602 	mla	r6, r3, r2, r4
 800e800:	60c3      	str	r3, [r0, #12]
 800e802:	7201      	strb	r1, [r0, #8]
 800e804:	4621      	mov	r1, r4
 800e806:	4628      	mov	r0, r5
 800e808:	f007 fc7c 	bl	8016104 <put_memory>
 800e80c:	60e4      	str	r4, [r4, #12]
 800e80e:	f804 7bc8 	strb.w	r7, [r4], #200
 800e812:	42a6      	cmp	r6, r4
 800e814:	d1f6      	bne.n	800e804 <rmw_uxrce_init_client_memory+0x1c>
 800e816:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e818:	4770      	bx	lr
 800e81a:	bf00      	nop

0800e81c <rmw_uxrce_init_publisher_memory>:
 800e81c:	b1b2      	cbz	r2, 800e84c <rmw_uxrce_init_publisher_memory+0x30>
 800e81e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e820:	7a07      	ldrb	r7, [r0, #8]
 800e822:	4605      	mov	r5, r0
 800e824:	b98f      	cbnz	r7, 800e84a <rmw_uxrce_init_publisher_memory+0x2e>
 800e826:	e9c0 7700 	strd	r7, r7, [r0]
 800e82a:	460c      	mov	r4, r1
 800e82c:	23d8      	movs	r3, #216	@ 0xd8
 800e82e:	2101      	movs	r1, #1
 800e830:	fb03 4602 	mla	r6, r3, r2, r4
 800e834:	60c3      	str	r3, [r0, #12]
 800e836:	7201      	strb	r1, [r0, #8]
 800e838:	4621      	mov	r1, r4
 800e83a:	4628      	mov	r0, r5
 800e83c:	f007 fc62 	bl	8016104 <put_memory>
 800e840:	60e4      	str	r4, [r4, #12]
 800e842:	f804 7bd8 	strb.w	r7, [r4], #216
 800e846:	42a6      	cmp	r6, r4
 800e848:	d1f6      	bne.n	800e838 <rmw_uxrce_init_publisher_memory+0x1c>
 800e84a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e84c:	4770      	bx	lr
 800e84e:	bf00      	nop

0800e850 <rmw_uxrce_init_subscription_memory>:
 800e850:	b1b2      	cbz	r2, 800e880 <rmw_uxrce_init_subscription_memory+0x30>
 800e852:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e854:	7a07      	ldrb	r7, [r0, #8]
 800e856:	4605      	mov	r5, r0
 800e858:	b98f      	cbnz	r7, 800e87e <rmw_uxrce_init_subscription_memory+0x2e>
 800e85a:	e9c0 7700 	strd	r7, r7, [r0]
 800e85e:	460c      	mov	r4, r1
 800e860:	23d0      	movs	r3, #208	@ 0xd0
 800e862:	2101      	movs	r1, #1
 800e864:	fb03 4602 	mla	r6, r3, r2, r4
 800e868:	60c3      	str	r3, [r0, #12]
 800e86a:	7201      	strb	r1, [r0, #8]
 800e86c:	4621      	mov	r1, r4
 800e86e:	4628      	mov	r0, r5
 800e870:	f007 fc48 	bl	8016104 <put_memory>
 800e874:	60e4      	str	r4, [r4, #12]
 800e876:	f804 7bd0 	strb.w	r7, [r4], #208
 800e87a:	42a6      	cmp	r6, r4
 800e87c:	d1f6      	bne.n	800e86c <rmw_uxrce_init_subscription_memory+0x1c>
 800e87e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e880:	4770      	bx	lr
 800e882:	bf00      	nop

0800e884 <rmw_uxrce_init_node_memory>:
 800e884:	b1b2      	cbz	r2, 800e8b4 <rmw_uxrce_init_node_memory+0x30>
 800e886:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e888:	7a07      	ldrb	r7, [r0, #8]
 800e88a:	4605      	mov	r5, r0
 800e88c:	b98f      	cbnz	r7, 800e8b2 <rmw_uxrce_init_node_memory+0x2e>
 800e88e:	e9c0 7700 	strd	r7, r7, [r0]
 800e892:	460c      	mov	r4, r1
 800e894:	23a4      	movs	r3, #164	@ 0xa4
 800e896:	2101      	movs	r1, #1
 800e898:	fb03 4602 	mla	r6, r3, r2, r4
 800e89c:	60c3      	str	r3, [r0, #12]
 800e89e:	7201      	strb	r1, [r0, #8]
 800e8a0:	4621      	mov	r1, r4
 800e8a2:	4628      	mov	r0, r5
 800e8a4:	f007 fc2e 	bl	8016104 <put_memory>
 800e8a8:	60e4      	str	r4, [r4, #12]
 800e8aa:	f804 7ba4 	strb.w	r7, [r4], #164
 800e8ae:	42a6      	cmp	r6, r4
 800e8b0:	d1f6      	bne.n	800e8a0 <rmw_uxrce_init_node_memory+0x1c>
 800e8b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e8b4:	4770      	bx	lr
 800e8b6:	bf00      	nop

0800e8b8 <rmw_uxrce_init_session_memory>:
 800e8b8:	b1d2      	cbz	r2, 800e8f0 <rmw_uxrce_init_session_memory+0x38>
 800e8ba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e8be:	7a07      	ldrb	r7, [r0, #8]
 800e8c0:	4605      	mov	r5, r0
 800e8c2:	b99f      	cbnz	r7, 800e8ec <rmw_uxrce_init_session_memory+0x34>
 800e8c4:	e9c0 7700 	strd	r7, r7, [r0]
 800e8c8:	f241 53a8 	movw	r3, #5544	@ 0x15a8
 800e8cc:	460c      	mov	r4, r1
 800e8ce:	2101      	movs	r1, #1
 800e8d0:	fb03 4602 	mla	r6, r3, r2, r4
 800e8d4:	60c3      	str	r3, [r0, #12]
 800e8d6:	4698      	mov	r8, r3
 800e8d8:	7201      	strb	r1, [r0, #8]
 800e8da:	4621      	mov	r1, r4
 800e8dc:	4628      	mov	r0, r5
 800e8de:	f007 fc11 	bl	8016104 <put_memory>
 800e8e2:	60e4      	str	r4, [r4, #12]
 800e8e4:	7027      	strb	r7, [r4, #0]
 800e8e6:	4444      	add	r4, r8
 800e8e8:	42a6      	cmp	r6, r4
 800e8ea:	d1f6      	bne.n	800e8da <rmw_uxrce_init_session_memory+0x22>
 800e8ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e8f0:	4770      	bx	lr
 800e8f2:	bf00      	nop

0800e8f4 <rmw_uxrce_init_topic_memory>:
 800e8f4:	b1c2      	cbz	r2, 800e928 <rmw_uxrce_init_topic_memory+0x34>
 800e8f6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e8f8:	7a07      	ldrb	r7, [r0, #8]
 800e8fa:	4606      	mov	r6, r0
 800e8fc:	b99f      	cbnz	r7, 800e926 <rmw_uxrce_init_topic_memory+0x32>
 800e8fe:	e9c0 7700 	strd	r7, r7, [r0]
 800e902:	460c      	mov	r4, r1
 800e904:	ebc2 02c2 	rsb	r2, r2, r2, lsl #3
 800e908:	2101      	movs	r1, #1
 800e90a:	231c      	movs	r3, #28
 800e90c:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800e910:	7201      	strb	r1, [r0, #8]
 800e912:	60c3      	str	r3, [r0, #12]
 800e914:	4621      	mov	r1, r4
 800e916:	4630      	mov	r0, r6
 800e918:	f007 fbf4 	bl	8016104 <put_memory>
 800e91c:	60e4      	str	r4, [r4, #12]
 800e91e:	f804 7b1c 	strb.w	r7, [r4], #28
 800e922:	42a5      	cmp	r5, r4
 800e924:	d1f6      	bne.n	800e914 <rmw_uxrce_init_topic_memory+0x20>
 800e926:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e928:	4770      	bx	lr
 800e92a:	bf00      	nop

0800e92c <rmw_uxrce_init_static_input_buffer_memory>:
 800e92c:	b1d2      	cbz	r2, 800e964 <rmw_uxrce_init_static_input_buffer_memory+0x38>
 800e92e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e930:	7a07      	ldrb	r7, [r0, #8]
 800e932:	4606      	mov	r6, r0
 800e934:	b9af      	cbnz	r7, 800e962 <rmw_uxrce_init_static_input_buffer_memory+0x36>
 800e936:	e9c0 7700 	strd	r7, r7, [r0]
 800e93a:	460c      	mov	r4, r1
 800e93c:	eb02 1242 	add.w	r2, r2, r2, lsl #5
 800e940:	2101      	movs	r1, #1
 800e942:	f44f 6304 	mov.w	r3, #2112	@ 0x840
 800e946:	eb04 1582 	add.w	r5, r4, r2, lsl #6
 800e94a:	7201      	strb	r1, [r0, #8]
 800e94c:	60c3      	str	r3, [r0, #12]
 800e94e:	4621      	mov	r1, r4
 800e950:	4630      	mov	r0, r6
 800e952:	f007 fbd7 	bl	8016104 <put_memory>
 800e956:	60e4      	str	r4, [r4, #12]
 800e958:	7027      	strb	r7, [r4, #0]
 800e95a:	f504 6404 	add.w	r4, r4, #2112	@ 0x840
 800e95e:	42a5      	cmp	r5, r4
 800e960:	d1f5      	bne.n	800e94e <rmw_uxrce_init_static_input_buffer_memory+0x22>
 800e962:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e964:	4770      	bx	lr
 800e966:	bf00      	nop

0800e968 <rmw_uxrce_init_init_options_impl_memory>:
 800e968:	b1b2      	cbz	r2, 800e998 <rmw_uxrce_init_init_options_impl_memory+0x30>
 800e96a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e96c:	7a07      	ldrb	r7, [r0, #8]
 800e96e:	4605      	mov	r5, r0
 800e970:	b98f      	cbnz	r7, 800e996 <rmw_uxrce_init_init_options_impl_memory+0x2e>
 800e972:	e9c0 7700 	strd	r7, r7, [r0]
 800e976:	460c      	mov	r4, r1
 800e978:	232c      	movs	r3, #44	@ 0x2c
 800e97a:	2101      	movs	r1, #1
 800e97c:	fb03 4602 	mla	r6, r3, r2, r4
 800e980:	60c3      	str	r3, [r0, #12]
 800e982:	7201      	strb	r1, [r0, #8]
 800e984:	4621      	mov	r1, r4
 800e986:	4628      	mov	r0, r5
 800e988:	f007 fbbc 	bl	8016104 <put_memory>
 800e98c:	60e4      	str	r4, [r4, #12]
 800e98e:	f804 7b2c 	strb.w	r7, [r4], #44
 800e992:	42a6      	cmp	r6, r4
 800e994:	d1f6      	bne.n	800e984 <rmw_uxrce_init_init_options_impl_memory+0x1c>
 800e996:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e998:	4770      	bx	lr
 800e99a:	bf00      	nop

0800e99c <rmw_uxrce_init_wait_set_memory>:
 800e99c:	b1c2      	cbz	r2, 800e9d0 <rmw_uxrce_init_wait_set_memory+0x34>
 800e99e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e9a0:	7a07      	ldrb	r7, [r0, #8]
 800e9a2:	4606      	mov	r6, r0
 800e9a4:	b99f      	cbnz	r7, 800e9ce <rmw_uxrce_init_wait_set_memory+0x32>
 800e9a6:	e9c0 7700 	strd	r7, r7, [r0]
 800e9aa:	460c      	mov	r4, r1
 800e9ac:	ebc2 02c2 	rsb	r2, r2, r2, lsl #3
 800e9b0:	2101      	movs	r1, #1
 800e9b2:	231c      	movs	r3, #28
 800e9b4:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800e9b8:	7201      	strb	r1, [r0, #8]
 800e9ba:	60c3      	str	r3, [r0, #12]
 800e9bc:	4621      	mov	r1, r4
 800e9be:	4630      	mov	r0, r6
 800e9c0:	f007 fba0 	bl	8016104 <put_memory>
 800e9c4:	60e4      	str	r4, [r4, #12]
 800e9c6:	f804 7b1c 	strb.w	r7, [r4], #28
 800e9ca:	42a5      	cmp	r5, r4
 800e9cc:	d1f6      	bne.n	800e9bc <rmw_uxrce_init_wait_set_memory+0x20>
 800e9ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e9d0:	4770      	bx	lr
 800e9d2:	bf00      	nop

0800e9d4 <rmw_uxrce_init_guard_condition_memory>:
 800e9d4:	b1b2      	cbz	r2, 800ea04 <rmw_uxrce_init_guard_condition_memory+0x30>
 800e9d6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e9d8:	7a07      	ldrb	r7, [r0, #8]
 800e9da:	4605      	mov	r5, r0
 800e9dc:	b98f      	cbnz	r7, 800ea02 <rmw_uxrce_init_guard_condition_memory+0x2e>
 800e9de:	e9c0 7700 	strd	r7, r7, [r0]
 800e9e2:	460c      	mov	r4, r1
 800e9e4:	2320      	movs	r3, #32
 800e9e6:	2101      	movs	r1, #1
 800e9e8:	eb04 1642 	add.w	r6, r4, r2, lsl #5
 800e9ec:	7201      	strb	r1, [r0, #8]
 800e9ee:	60c3      	str	r3, [r0, #12]
 800e9f0:	4621      	mov	r1, r4
 800e9f2:	4628      	mov	r0, r5
 800e9f4:	f007 fb86 	bl	8016104 <put_memory>
 800e9f8:	60e4      	str	r4, [r4, #12]
 800e9fa:	f804 7b20 	strb.w	r7, [r4], #32
 800e9fe:	42a6      	cmp	r6, r4
 800ea00:	d1f6      	bne.n	800e9f0 <rmw_uxrce_init_guard_condition_memory+0x1c>
 800ea02:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ea04:	4770      	bx	lr
 800ea06:	bf00      	nop

0800ea08 <rmw_uxrce_fini_session_memory>:
 800ea08:	4601      	mov	r1, r0
 800ea0a:	4801      	ldr	r0, [pc, #4]	@ (800ea10 <rmw_uxrce_fini_session_memory+0x8>)
 800ea0c:	f007 bb7a 	b.w	8016104 <put_memory>
 800ea10:	2000aa60 	.word	0x2000aa60

0800ea14 <rmw_uxrce_fini_node_memory>:
 800ea14:	b538      	push	{r3, r4, r5, lr}
 800ea16:	4604      	mov	r4, r0
 800ea18:	6800      	ldr	r0, [r0, #0]
 800ea1a:	b128      	cbz	r0, 800ea28 <rmw_uxrce_fini_node_memory+0x14>
 800ea1c:	4b07      	ldr	r3, [pc, #28]	@ (800ea3c <rmw_uxrce_fini_node_memory+0x28>)
 800ea1e:	6819      	ldr	r1, [r3, #0]
 800ea20:	f7f1 fbd6 	bl	80001d0 <strcmp>
 800ea24:	b940      	cbnz	r0, 800ea38 <rmw_uxrce_fini_node_memory+0x24>
 800ea26:	6020      	str	r0, [r4, #0]
 800ea28:	6861      	ldr	r1, [r4, #4]
 800ea2a:	b129      	cbz	r1, 800ea38 <rmw_uxrce_fini_node_memory+0x24>
 800ea2c:	2500      	movs	r5, #0
 800ea2e:	4804      	ldr	r0, [pc, #16]	@ (800ea40 <rmw_uxrce_fini_node_memory+0x2c>)
 800ea30:	610d      	str	r5, [r1, #16]
 800ea32:	f007 fb67 	bl	8016104 <put_memory>
 800ea36:	6065      	str	r5, [r4, #4]
 800ea38:	bd38      	pop	{r3, r4, r5, pc}
 800ea3a:	bf00      	nop
 800ea3c:	0801c360 	.word	0x0801c360
 800ea40:	2000a88c 	.word	0x2000a88c

0800ea44 <rmw_uxrce_fini_publisher_memory>:
 800ea44:	b510      	push	{r4, lr}
 800ea46:	4604      	mov	r4, r0
 800ea48:	6800      	ldr	r0, [r0, #0]
 800ea4a:	b128      	cbz	r0, 800ea58 <rmw_uxrce_fini_publisher_memory+0x14>
 800ea4c:	4b06      	ldr	r3, [pc, #24]	@ (800ea68 <rmw_uxrce_fini_publisher_memory+0x24>)
 800ea4e:	6819      	ldr	r1, [r3, #0]
 800ea50:	f7f1 fbbe 	bl	80001d0 <strcmp>
 800ea54:	b938      	cbnz	r0, 800ea66 <rmw_uxrce_fini_publisher_memory+0x22>
 800ea56:	6020      	str	r0, [r4, #0]
 800ea58:	6861      	ldr	r1, [r4, #4]
 800ea5a:	b121      	cbz	r1, 800ea66 <rmw_uxrce_fini_publisher_memory+0x22>
 800ea5c:	4803      	ldr	r0, [pc, #12]	@ (800ea6c <rmw_uxrce_fini_publisher_memory+0x28>)
 800ea5e:	f007 fb51 	bl	8016104 <put_memory>
 800ea62:	2300      	movs	r3, #0
 800ea64:	6063      	str	r3, [r4, #4]
 800ea66:	bd10      	pop	{r4, pc}
 800ea68:	0801c360 	.word	0x0801c360
 800ea6c:	200078c8 	.word	0x200078c8

0800ea70 <rmw_uxrce_fini_subscription_memory>:
 800ea70:	b510      	push	{r4, lr}
 800ea72:	4604      	mov	r4, r0
 800ea74:	6800      	ldr	r0, [r0, #0]
 800ea76:	b128      	cbz	r0, 800ea84 <rmw_uxrce_fini_subscription_memory+0x14>
 800ea78:	4b06      	ldr	r3, [pc, #24]	@ (800ea94 <rmw_uxrce_fini_subscription_memory+0x24>)
 800ea7a:	6819      	ldr	r1, [r3, #0]
 800ea7c:	f7f1 fba8 	bl	80001d0 <strcmp>
 800ea80:	b938      	cbnz	r0, 800ea92 <rmw_uxrce_fini_subscription_memory+0x22>
 800ea82:	6020      	str	r0, [r4, #0]
 800ea84:	6861      	ldr	r1, [r4, #4]
 800ea86:	b121      	cbz	r1, 800ea92 <rmw_uxrce_fini_subscription_memory+0x22>
 800ea88:	4803      	ldr	r0, [pc, #12]	@ (800ea98 <rmw_uxrce_fini_subscription_memory+0x28>)
 800ea8a:	f007 fb3b 	bl	8016104 <put_memory>
 800ea8e:	2300      	movs	r3, #0
 800ea90:	6063      	str	r3, [r4, #4]
 800ea92:	bd10      	pop	{r4, pc}
 800ea94:	0801c360 	.word	0x0801c360
 800ea98:	2000ab24 	.word	0x2000ab24

0800ea9c <rmw_uxrce_fini_service_memory>:
 800ea9c:	b510      	push	{r4, lr}
 800ea9e:	4604      	mov	r4, r0
 800eaa0:	6800      	ldr	r0, [r0, #0]
 800eaa2:	b128      	cbz	r0, 800eab0 <rmw_uxrce_fini_service_memory+0x14>
 800eaa4:	4b06      	ldr	r3, [pc, #24]	@ (800eac0 <rmw_uxrce_fini_service_memory+0x24>)
 800eaa6:	6819      	ldr	r1, [r3, #0]
 800eaa8:	f7f1 fb92 	bl	80001d0 <strcmp>
 800eaac:	b938      	cbnz	r0, 800eabe <rmw_uxrce_fini_service_memory+0x22>
 800eaae:	6020      	str	r0, [r4, #0]
 800eab0:	6861      	ldr	r1, [r4, #4]
 800eab2:	b121      	cbz	r1, 800eabe <rmw_uxrce_fini_service_memory+0x22>
 800eab4:	4803      	ldr	r0, [pc, #12]	@ (800eac4 <rmw_uxrce_fini_service_memory+0x28>)
 800eab6:	f007 fb25 	bl	8016104 <put_memory>
 800eaba:	2300      	movs	r3, #0
 800eabc:	6063      	str	r3, [r4, #4]
 800eabe:	bd10      	pop	{r4, pc}
 800eac0:	0801c360 	.word	0x0801c360
 800eac4:	2000ab14 	.word	0x2000ab14

0800eac8 <rmw_uxrce_fini_client_memory>:
 800eac8:	b510      	push	{r4, lr}
 800eaca:	4604      	mov	r4, r0
 800eacc:	6800      	ldr	r0, [r0, #0]
 800eace:	b128      	cbz	r0, 800eadc <rmw_uxrce_fini_client_memory+0x14>
 800ead0:	4b06      	ldr	r3, [pc, #24]	@ (800eaec <rmw_uxrce_fini_client_memory+0x24>)
 800ead2:	6819      	ldr	r1, [r3, #0]
 800ead4:	f7f1 fb7c 	bl	80001d0 <strcmp>
 800ead8:	b938      	cbnz	r0, 800eaea <rmw_uxrce_fini_client_memory+0x22>
 800eada:	6020      	str	r0, [r4, #0]
 800eadc:	6861      	ldr	r1, [r4, #4]
 800eade:	b121      	cbz	r1, 800eaea <rmw_uxrce_fini_client_memory+0x22>
 800eae0:	4803      	ldr	r0, [pc, #12]	@ (800eaf0 <rmw_uxrce_fini_client_memory+0x28>)
 800eae2:	f007 fb0f 	bl	8016104 <put_memory>
 800eae6:	2300      	movs	r3, #0
 800eae8:	6063      	str	r3, [r4, #4]
 800eaea:	bd10      	pop	{r4, pc}
 800eaec:	0801c360 	.word	0x0801c360
 800eaf0:	20008148 	.word	0x20008148

0800eaf4 <rmw_uxrce_fini_topic_memory>:
 800eaf4:	b510      	push	{r4, lr}
 800eaf6:	4601      	mov	r1, r0
 800eaf8:	4604      	mov	r4, r0
 800eafa:	4803      	ldr	r0, [pc, #12]	@ (800eb08 <rmw_uxrce_fini_topic_memory+0x14>)
 800eafc:	f007 fb02 	bl	8016104 <put_memory>
 800eb00:	2300      	movs	r3, #0
 800eb02:	61a3      	str	r3, [r4, #24]
 800eb04:	bd10      	pop	{r4, pc}
 800eb06:	bf00      	nop
 800eb08:	2000aa50 	.word	0x2000aa50

0800eb0c <rmw_uxrce_get_static_input_buffer_for_entity>:
 800eb0c:	b082      	sub	sp, #8
 800eb0e:	b4f0      	push	{r4, r5, r6, r7}
 800eb10:	4923      	ldr	r1, [pc, #140]	@ (800eba0 <rmw_uxrce_get_static_input_buffer_for_entity+0x94>)
 800eb12:	ac04      	add	r4, sp, #16
 800eb14:	e884 000c 	stmia.w	r4, {r2, r3}
 800eb18:	680d      	ldr	r5, [r1, #0]
 800eb1a:	9c05      	ldr	r4, [sp, #20]
 800eb1c:	2d00      	cmp	r5, #0
 800eb1e:	d03d      	beq.n	800eb9c <rmw_uxrce_get_static_input_buffer_for_entity+0x90>
 800eb20:	462b      	mov	r3, r5
 800eb22:	2100      	movs	r1, #0
 800eb24:	68da      	ldr	r2, [r3, #12]
 800eb26:	689b      	ldr	r3, [r3, #8]
 800eb28:	f8d2 2814 	ldr.w	r2, [r2, #2068]	@ 0x814
 800eb2c:	4290      	cmp	r0, r2
 800eb2e:	bf08      	it	eq
 800eb30:	3101      	addeq	r1, #1
 800eb32:	2b00      	cmp	r3, #0
 800eb34:	d1f6      	bne.n	800eb24 <rmw_uxrce_get_static_input_buffer_for_entity+0x18>
 800eb36:	f89d 3010 	ldrb.w	r3, [sp, #16]
 800eb3a:	2b02      	cmp	r3, #2
 800eb3c:	d026      	beq.n	800eb8c <rmw_uxrce_get_static_input_buffer_for_entity+0x80>
 800eb3e:	d906      	bls.n	800eb4e <rmw_uxrce_get_static_input_buffer_for_entity+0x42>
 800eb40:	2b03      	cmp	r3, #3
 800eb42:	d004      	beq.n	800eb4e <rmw_uxrce_get_static_input_buffer_for_entity+0x42>
 800eb44:	2100      	movs	r1, #0
 800eb46:	bcf0      	pop	{r4, r5, r6, r7}
 800eb48:	4608      	mov	r0, r1
 800eb4a:	b002      	add	sp, #8
 800eb4c:	4770      	bx	lr
 800eb4e:	b304      	cbz	r4, 800eb92 <rmw_uxrce_get_static_input_buffer_for_entity+0x86>
 800eb50:	428c      	cmp	r4, r1
 800eb52:	d81e      	bhi.n	800eb92 <rmw_uxrce_get_static_input_buffer_for_entity+0x86>
 800eb54:	2d00      	cmp	r5, #0
 800eb56:	d0f5      	beq.n	800eb44 <rmw_uxrce_get_static_input_buffer_for_entity+0x38>
 800eb58:	2100      	movs	r1, #0
 800eb5a:	f04f 36ff 	mov.w	r6, #4294967295	@ 0xffffffff
 800eb5e:	f06f 4700 	mvn.w	r7, #2147483648	@ 0x80000000
 800eb62:	e002      	b.n	800eb6a <rmw_uxrce_get_static_input_buffer_for_entity+0x5e>
 800eb64:	68ad      	ldr	r5, [r5, #8]
 800eb66:	2d00      	cmp	r5, #0
 800eb68:	d0ed      	beq.n	800eb46 <rmw_uxrce_get_static_input_buffer_for_entity+0x3a>
 800eb6a:	68eb      	ldr	r3, [r5, #12]
 800eb6c:	f8d3 2814 	ldr.w	r2, [r3, #2068]	@ 0x814
 800eb70:	4290      	cmp	r0, r2
 800eb72:	d1f7      	bne.n	800eb64 <rmw_uxrce_get_static_input_buffer_for_entity+0x58>
 800eb74:	f603 0318 	addw	r3, r3, #2072	@ 0x818
 800eb78:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eb7c:	42b2      	cmp	r2, r6
 800eb7e:	eb73 0407 	sbcs.w	r4, r3, r7
 800eb82:	daef      	bge.n	800eb64 <rmw_uxrce_get_static_input_buffer_for_entity+0x58>
 800eb84:	4616      	mov	r6, r2
 800eb86:	461f      	mov	r7, r3
 800eb88:	4629      	mov	r1, r5
 800eb8a:	e7eb      	b.n	800eb64 <rmw_uxrce_get_static_input_buffer_for_entity+0x58>
 800eb8c:	b10c      	cbz	r4, 800eb92 <rmw_uxrce_get_static_input_buffer_for_entity+0x86>
 800eb8e:	428c      	cmp	r4, r1
 800eb90:	d9d8      	bls.n	800eb44 <rmw_uxrce_get_static_input_buffer_for_entity+0x38>
 800eb92:	bcf0      	pop	{r4, r5, r6, r7}
 800eb94:	4802      	ldr	r0, [pc, #8]	@ (800eba0 <rmw_uxrce_get_static_input_buffer_for_entity+0x94>)
 800eb96:	b002      	add	sp, #8
 800eb98:	f007 baa4 	b.w	80160e4 <get_memory>
 800eb9c:	4629      	mov	r1, r5
 800eb9e:	e7ca      	b.n	800eb36 <rmw_uxrce_get_static_input_buffer_for_entity+0x2a>
 800eba0:	200078b8 	.word	0x200078b8

0800eba4 <rmw_uxrce_find_static_input_buffer_by_owner>:
 800eba4:	4b12      	ldr	r3, [pc, #72]	@ (800ebf0 <rmw_uxrce_find_static_input_buffer_by_owner+0x4c>)
 800eba6:	681b      	ldr	r3, [r3, #0]
 800eba8:	b1fb      	cbz	r3, 800ebea <rmw_uxrce_find_static_input_buffer_by_owner+0x46>
 800ebaa:	b4f0      	push	{r4, r5, r6, r7}
 800ebac:	f04f 0c00 	mov.w	ip, #0
 800ebb0:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 800ebb4:	f06f 4500 	mvn.w	r5, #2147483648	@ 0x80000000
 800ebb8:	e001      	b.n	800ebbe <rmw_uxrce_find_static_input_buffer_by_owner+0x1a>
 800ebba:	689b      	ldr	r3, [r3, #8]
 800ebbc:	b193      	cbz	r3, 800ebe4 <rmw_uxrce_find_static_input_buffer_by_owner+0x40>
 800ebbe:	68da      	ldr	r2, [r3, #12]
 800ebc0:	f8d2 1814 	ldr.w	r1, [r2, #2068]	@ 0x814
 800ebc4:	4288      	cmp	r0, r1
 800ebc6:	d1f8      	bne.n	800ebba <rmw_uxrce_find_static_input_buffer_by_owner+0x16>
 800ebc8:	f602 0218 	addw	r2, r2, #2072	@ 0x818
 800ebcc:	e9d2 6700 	ldrd	r6, r7, [r2]
 800ebd0:	42a6      	cmp	r6, r4
 800ebd2:	eb77 0205 	sbcs.w	r2, r7, r5
 800ebd6:	daf0      	bge.n	800ebba <rmw_uxrce_find_static_input_buffer_by_owner+0x16>
 800ebd8:	469c      	mov	ip, r3
 800ebda:	689b      	ldr	r3, [r3, #8]
 800ebdc:	4634      	mov	r4, r6
 800ebde:	463d      	mov	r5, r7
 800ebe0:	2b00      	cmp	r3, #0
 800ebe2:	d1ec      	bne.n	800ebbe <rmw_uxrce_find_static_input_buffer_by_owner+0x1a>
 800ebe4:	4660      	mov	r0, ip
 800ebe6:	bcf0      	pop	{r4, r5, r6, r7}
 800ebe8:	4770      	bx	lr
 800ebea:	4618      	mov	r0, r3
 800ebec:	4770      	bx	lr
 800ebee:	bf00      	nop
 800ebf0:	200078b8 	.word	0x200078b8
 800ebf4:	00000000 	.word	0x00000000

0800ebf8 <rmw_uxrce_clean_expired_static_input_buffer>:
 800ebf8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ebfc:	4e38      	ldr	r6, [pc, #224]	@ (800ece0 <rmw_uxrce_clean_expired_static_input_buffer+0xe8>)
 800ebfe:	f8d6 8000 	ldr.w	r8, [r6]
 800ec02:	b083      	sub	sp, #12
 800ec04:	f008 fb44 	bl	8017290 <rmw_uros_epoch_nanos>
 800ec08:	f1b8 0f00 	cmp.w	r8, #0
 800ec0c:	d05f      	beq.n	800ecce <rmw_uxrce_clean_expired_static_input_buffer+0xd6>
 800ec0e:	46b1      	mov	r9, r6
 800ec10:	f8d8 600c 	ldr.w	r6, [r8, #12]
 800ec14:	f896 3820 	ldrb.w	r3, [r6, #2080]	@ 0x820
 800ec18:	2b04      	cmp	r3, #4
 800ec1a:	4682      	mov	sl, r0
 800ec1c:	468b      	mov	fp, r1
 800ec1e:	d02d      	beq.n	800ec7c <rmw_uxrce_clean_expired_static_input_buffer+0x84>
 800ec20:	2b05      	cmp	r3, #5
 800ec22:	d041      	beq.n	800eca8 <rmw_uxrce_clean_expired_static_input_buffer+0xb0>
 800ec24:	2b03      	cmp	r3, #3
 800ec26:	d029      	beq.n	800ec7c <rmw_uxrce_clean_expired_static_input_buffer+0x84>
 800ec28:	2200      	movs	r2, #0
 800ec2a:	2300      	movs	r3, #0
 800ec2c:	e9cd 2300 	strd	r2, r3, [sp]
 800ec30:	2001      	movs	r0, #1
 800ec32:	2100      	movs	r1, #0
 800ec34:	9b00      	ldr	r3, [sp, #0]
 800ec36:	f606 0618 	addw	r6, r6, #2072	@ 0x818
 800ec3a:	e9d6 6700 	ldrd	r6, r7, [r6]
 800ec3e:	18c2      	adds	r2, r0, r3
 800ec40:	9b01      	ldr	r3, [sp, #4]
 800ec42:	eb41 0303 	adc.w	r3, r1, r3
 800ec46:	1994      	adds	r4, r2, r6
 800ec48:	eb43 0507 	adc.w	r5, r3, r7
 800ec4c:	4554      	cmp	r4, sl
 800ec4e:	eb75 020b 	sbcs.w	r2, r5, fp
 800ec52:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800ec56:	db03      	blt.n	800ec60 <rmw_uxrce_clean_expired_static_input_buffer+0x68>
 800ec58:	45b2      	cmp	sl, r6
 800ec5a:	eb7b 0207 	sbcs.w	r2, fp, r7
 800ec5e:	da05      	bge.n	800ec6c <rmw_uxrce_clean_expired_static_input_buffer+0x74>
 800ec60:	4641      	mov	r1, r8
 800ec62:	4648      	mov	r0, r9
 800ec64:	9300      	str	r3, [sp, #0]
 800ec66:	f007 fa4d 	bl	8016104 <put_memory>
 800ec6a:	9b00      	ldr	r3, [sp, #0]
 800ec6c:	b37b      	cbz	r3, 800ecce <rmw_uxrce_clean_expired_static_input_buffer+0xd6>
 800ec6e:	4698      	mov	r8, r3
 800ec70:	f8d8 600c 	ldr.w	r6, [r8, #12]
 800ec74:	f896 3820 	ldrb.w	r3, [r6, #2080]	@ 0x820
 800ec78:	2b04      	cmp	r3, #4
 800ec7a:	d1d1      	bne.n	800ec20 <rmw_uxrce_clean_expired_static_input_buffer+0x28>
 800ec7c:	f8d6 1814 	ldr.w	r1, [r6, #2068]	@ 0x814
 800ec80:	e9d1 2310 	ldrd	r2, r3, [r1, #64]	@ 0x40
 800ec84:	e9cd 2300 	strd	r2, r3, [sp]
 800ec88:	4313      	orrs	r3, r2
 800ec8a:	e9d1 0112 	ldrd	r0, r1, [r1, #72]	@ 0x48
 800ec8e:	d015      	beq.n	800ecbc <rmw_uxrce_clean_expired_static_input_buffer+0xc4>
 800ec90:	9a01      	ldr	r2, [sp, #4]
 800ec92:	4b14      	ldr	r3, [pc, #80]	@ (800ece4 <rmw_uxrce_clean_expired_static_input_buffer+0xec>)
 800ec94:	fb03 f702 	mul.w	r7, r3, r2
 800ec98:	9a00      	ldr	r2, [sp, #0]
 800ec9a:	fba2 2303 	umull	r2, r3, r2, r3
 800ec9e:	e9cd 2300 	strd	r2, r3, [sp]
 800eca2:	443b      	add	r3, r7
 800eca4:	9301      	str	r3, [sp, #4]
 800eca6:	e7c5      	b.n	800ec34 <rmw_uxrce_clean_expired_static_input_buffer+0x3c>
 800eca8:	f8d6 1814 	ldr.w	r1, [r6, #2068]	@ 0x814
 800ecac:	e9d1 2312 	ldrd	r2, r3, [r1, #72]	@ 0x48
 800ecb0:	e9cd 2300 	strd	r2, r3, [sp]
 800ecb4:	4313      	orrs	r3, r2
 800ecb6:	e9d1 0114 	ldrd	r0, r1, [r1, #80]	@ 0x50
 800ecba:	d1e9      	bne.n	800ec90 <rmw_uxrce_clean_expired_static_input_buffer+0x98>
 800ecbc:	ea50 0301 	orrs.w	r3, r0, r1
 800ecc0:	bf02      	ittt	eq
 800ecc2:	a305      	addeq	r3, pc, #20	@ (adr r3, 800ecd8 <rmw_uxrce_clean_expired_static_input_buffer+0xe0>)
 800ecc4:	e9d3 2300 	ldrdeq	r2, r3, [r3]
 800ecc8:	e9cd 2300 	strdeq	r2, r3, [sp]
 800eccc:	e7b2      	b.n	800ec34 <rmw_uxrce_clean_expired_static_input_buffer+0x3c>
 800ecce:	b003      	add	sp, #12
 800ecd0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ecd4:	f3af 8000 	nop.w
 800ecd8:	fc23ac00 	.word	0xfc23ac00
 800ecdc:	00000006 	.word	0x00000006
 800ece0:	200078b8 	.word	0x200078b8
 800ece4:	3b9aca00 	.word	0x3b9aca00

0800ece8 <run_xrce_session>:
 800ece8:	b510      	push	{r4, lr}
 800ecea:	788c      	ldrb	r4, [r1, #2]
 800ecec:	b086      	sub	sp, #24
 800ecee:	2c01      	cmp	r4, #1
 800ecf0:	f8ad 200e 	strh.w	r2, [sp, #14]
 800ecf4:	d00c      	beq.n	800ed10 <run_xrce_session+0x28>
 800ecf6:	4619      	mov	r1, r3
 800ecf8:	2301      	movs	r3, #1
 800ecfa:	9300      	str	r3, [sp, #0]
 800ecfc:	f10d 020e 	add.w	r2, sp, #14
 800ed00:	f10d 0317 	add.w	r3, sp, #23
 800ed04:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800ed08:	f002 fb5c 	bl	80113c4 <uxr_run_session_until_all_status>
 800ed0c:	b006      	add	sp, #24
 800ed0e:	bd10      	pop	{r4, pc}
 800ed10:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800ed14:	f001 ff74 	bl	8010c00 <uxr_flash_output_streams>
 800ed18:	4620      	mov	r0, r4
 800ed1a:	b006      	add	sp, #24
 800ed1c:	bd10      	pop	{r4, pc}
 800ed1e:	bf00      	nop

0800ed20 <convert_qos_profile>:
 800ed20:	b430      	push	{r4, r5}
 800ed22:	7a0d      	ldrb	r5, [r1, #8]
 800ed24:	780c      	ldrb	r4, [r1, #0]
 800ed26:	7a4a      	ldrb	r2, [r1, #9]
 800ed28:	8889      	ldrh	r1, [r1, #4]
 800ed2a:	8081      	strh	r1, [r0, #4]
 800ed2c:	f1a5 0502 	sub.w	r5, r5, #2
 800ed30:	f1a4 0402 	sub.w	r4, r4, #2
 800ed34:	2a02      	cmp	r2, #2
 800ed36:	fab5 f585 	clz	r5, r5
 800ed3a:	fab4 f484 	clz	r4, r4
 800ed3e:	ea4f 1555 	mov.w	r5, r5, lsr #5
 800ed42:	ea4f 1454 	mov.w	r4, r4, lsr #5
 800ed46:	bf18      	it	ne
 800ed48:	2200      	movne	r2, #0
 800ed4a:	7045      	strb	r5, [r0, #1]
 800ed4c:	7084      	strb	r4, [r0, #2]
 800ed4e:	7002      	strb	r2, [r0, #0]
 800ed50:	bc30      	pop	{r4, r5}
 800ed52:	4770      	bx	lr

0800ed54 <generate_type_name>:
 800ed54:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ed56:	2300      	movs	r3, #0
 800ed58:	700b      	strb	r3, [r1, #0]
 800ed5a:	6803      	ldr	r3, [r0, #0]
 800ed5c:	b087      	sub	sp, #28
 800ed5e:	4614      	mov	r4, r2
 800ed60:	b1d3      	cbz	r3, 800ed98 <generate_type_name+0x44>
 800ed62:	4d0f      	ldr	r5, [pc, #60]	@ (800eda0 <generate_type_name+0x4c>)
 800ed64:	462f      	mov	r7, r5
 800ed66:	4a0f      	ldr	r2, [pc, #60]	@ (800eda4 <generate_type_name+0x50>)
 800ed68:	4e0f      	ldr	r6, [pc, #60]	@ (800eda8 <generate_type_name+0x54>)
 800ed6a:	6840      	ldr	r0, [r0, #4]
 800ed6c:	9004      	str	r0, [sp, #16]
 800ed6e:	e9cd 6201 	strd	r6, r2, [sp, #4]
 800ed72:	4608      	mov	r0, r1
 800ed74:	9205      	str	r2, [sp, #20]
 800ed76:	9503      	str	r5, [sp, #12]
 800ed78:	4a0c      	ldr	r2, [pc, #48]	@ (800edac <generate_type_name+0x58>)
 800ed7a:	9700      	str	r7, [sp, #0]
 800ed7c:	4621      	mov	r1, r4
 800ed7e:	f00a fe3f 	bl	8019a00 <sniprintf>
 800ed82:	2800      	cmp	r0, #0
 800ed84:	db05      	blt.n	800ed92 <generate_type_name+0x3e>
 800ed86:	4284      	cmp	r4, r0
 800ed88:	bfd4      	ite	le
 800ed8a:	2000      	movle	r0, #0
 800ed8c:	2001      	movgt	r0, #1
 800ed8e:	b007      	add	sp, #28
 800ed90:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ed92:	2000      	movs	r0, #0
 800ed94:	b007      	add	sp, #28
 800ed96:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ed98:	4b05      	ldr	r3, [pc, #20]	@ (800edb0 <generate_type_name+0x5c>)
 800ed9a:	4d01      	ldr	r5, [pc, #4]	@ (800eda0 <generate_type_name+0x4c>)
 800ed9c:	461f      	mov	r7, r3
 800ed9e:	e7e2      	b.n	800ed66 <generate_type_name+0x12>
 800eda0:	0801bdcc 	.word	0x0801bdcc
 800eda4:	0801bde0 	.word	0x0801bde0
 800eda8:	0801bde4 	.word	0x0801bde4
 800edac:	0801bdd0 	.word	0x0801bdd0
 800edb0:	0801c138 	.word	0x0801c138

0800edb4 <generate_topic_name>:
 800edb4:	b510      	push	{r4, lr}
 800edb6:	b082      	sub	sp, #8
 800edb8:	4b09      	ldr	r3, [pc, #36]	@ (800ede0 <generate_topic_name+0x2c>)
 800edba:	9000      	str	r0, [sp, #0]
 800edbc:	4614      	mov	r4, r2
 800edbe:	4608      	mov	r0, r1
 800edc0:	4611      	mov	r1, r2
 800edc2:	4a08      	ldr	r2, [pc, #32]	@ (800ede4 <generate_topic_name+0x30>)
 800edc4:	f00a fe1c 	bl	8019a00 <sniprintf>
 800edc8:	2800      	cmp	r0, #0
 800edca:	db05      	blt.n	800edd8 <generate_topic_name+0x24>
 800edcc:	4284      	cmp	r4, r0
 800edce:	bfd4      	ite	le
 800edd0:	2000      	movle	r0, #0
 800edd2:	2001      	movgt	r0, #1
 800edd4:	b002      	add	sp, #8
 800edd6:	bd10      	pop	{r4, pc}
 800edd8:	2000      	movs	r0, #0
 800edda:	b002      	add	sp, #8
 800eddc:	bd10      	pop	{r4, pc}
 800edde:	bf00      	nop
 800ede0:	0801bdf0 	.word	0x0801bdf0
 800ede4:	0801bde8 	.word	0x0801bde8

0800ede8 <is_uxrce_rmw_identifier_valid>:
 800ede8:	b510      	push	{r4, lr}
 800edea:	4604      	mov	r4, r0
 800edec:	b140      	cbz	r0, 800ee00 <is_uxrce_rmw_identifier_valid+0x18>
 800edee:	f007 f9e1 	bl	80161b4 <rmw_get_implementation_identifier>
 800edf2:	4601      	mov	r1, r0
 800edf4:	4620      	mov	r0, r4
 800edf6:	f7f1 f9eb 	bl	80001d0 <strcmp>
 800edfa:	fab0 f080 	clz	r0, r0
 800edfe:	0940      	lsrs	r0, r0, #5
 800ee00:	bd10      	pop	{r4, pc}
 800ee02:	bf00      	nop

0800ee04 <get_message_typesupport_handle>:
 800ee04:	6883      	ldr	r3, [r0, #8]
 800ee06:	4718      	bx	r3

0800ee08 <get_message_typesupport_handle_function>:
 800ee08:	b510      	push	{r4, lr}
 800ee0a:	4604      	mov	r4, r0
 800ee0c:	6800      	ldr	r0, [r0, #0]
 800ee0e:	f7f1 f9df 	bl	80001d0 <strcmp>
 800ee12:	2800      	cmp	r0, #0
 800ee14:	bf0c      	ite	eq
 800ee16:	4620      	moveq	r0, r4
 800ee18:	2000      	movne	r0, #0
 800ee1a:	bd10      	pop	{r4, pc}

0800ee1c <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Float64MultiArray>:
 800ee1c:	f000 b88a 	b.w	800ef34 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__Float64MultiArray>

0800ee20 <_Float64MultiArray__max_serialized_size>:
 800ee20:	b500      	push	{lr}
 800ee22:	b083      	sub	sp, #12
 800ee24:	2301      	movs	r3, #1
 800ee26:	2100      	movs	r1, #0
 800ee28:	f10d 0007 	add.w	r0, sp, #7
 800ee2c:	f88d 3007 	strb.w	r3, [sp, #7]
 800ee30:	f000 f91c 	bl	800f06c <max_serialized_size_std_msgs__msg__MultiArrayLayout>
 800ee34:	b003      	add	sp, #12
 800ee36:	f85d fb04 	ldr.w	pc, [sp], #4
 800ee3a:	bf00      	nop

0800ee3c <get_serialized_size_std_msgs__msg__Float64MultiArray>:
 800ee3c:	b570      	push	{r4, r5, r6, lr}
 800ee3e:	4604      	mov	r4, r0
 800ee40:	b160      	cbz	r0, 800ee5c <get_serialized_size_std_msgs__msg__Float64MultiArray+0x20>
 800ee42:	460e      	mov	r6, r1
 800ee44:	f000 f8b6 	bl	800efb4 <get_serialized_size_std_msgs__msg__MultiArrayLayout>
 800ee48:	1835      	adds	r5, r6, r0
 800ee4a:	4628      	mov	r0, r5
 800ee4c:	2104      	movs	r1, #4
 800ee4e:	6964      	ldr	r4, [r4, #20]
 800ee50:	f001 fa98 	bl	8010384 <ucdr_alignment>
 800ee54:	1d03      	adds	r3, r0, #4
 800ee56:	441d      	add	r5, r3
 800ee58:	b90c      	cbnz	r4, 800ee5e <get_serialized_size_std_msgs__msg__Float64MultiArray+0x22>
 800ee5a:	1ba8      	subs	r0, r5, r6
 800ee5c:	bd70      	pop	{r4, r5, r6, pc}
 800ee5e:	4628      	mov	r0, r5
 800ee60:	2108      	movs	r1, #8
 800ee62:	f001 fa8f 	bl	8010384 <ucdr_alignment>
 800ee66:	eb05 03c4 	add.w	r3, r5, r4, lsl #3
 800ee6a:	181d      	adds	r5, r3, r0
 800ee6c:	1ba8      	subs	r0, r5, r6
 800ee6e:	e7f5      	b.n	800ee5c <get_serialized_size_std_msgs__msg__Float64MultiArray+0x20>

0800ee70 <_Float64MultiArray__cdr_deserialize>:
 800ee70:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ee72:	460c      	mov	r4, r1
 800ee74:	b083      	sub	sp, #12
 800ee76:	b1d1      	cbz	r1, 800eeae <_Float64MultiArray__cdr_deserialize+0x3e>
 800ee78:	4606      	mov	r6, r0
 800ee7a:	f000 f901 	bl	800f080 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__MultiArrayLayout>
 800ee7e:	6843      	ldr	r3, [r0, #4]
 800ee80:	4621      	mov	r1, r4
 800ee82:	68db      	ldr	r3, [r3, #12]
 800ee84:	4630      	mov	r0, r6
 800ee86:	4798      	blx	r3
 800ee88:	69a7      	ldr	r7, [r4, #24]
 800ee8a:	6921      	ldr	r1, [r4, #16]
 800ee8c:	ab01      	add	r3, sp, #4
 800ee8e:	463a      	mov	r2, r7
 800ee90:	4630      	mov	r0, r6
 800ee92:	f001 fb4d 	bl	8010530 <ucdr_deserialize_sequence_double>
 800ee96:	9b01      	ldr	r3, [sp, #4]
 800ee98:	4605      	mov	r5, r0
 800ee9a:	b920      	cbnz	r0, 800eea6 <_Float64MultiArray__cdr_deserialize+0x36>
 800ee9c:	429f      	cmp	r7, r3
 800ee9e:	d30a      	bcc.n	800eeb6 <_Float64MultiArray__cdr_deserialize+0x46>
 800eea0:	4628      	mov	r0, r5
 800eea2:	b003      	add	sp, #12
 800eea4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800eea6:	4628      	mov	r0, r5
 800eea8:	6163      	str	r3, [r4, #20]
 800eeaa:	b003      	add	sp, #12
 800eeac:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800eeae:	460d      	mov	r5, r1
 800eeb0:	4628      	mov	r0, r5
 800eeb2:	b003      	add	sp, #12
 800eeb4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800eeb6:	2301      	movs	r3, #1
 800eeb8:	75b0      	strb	r0, [r6, #22]
 800eeba:	7573      	strb	r3, [r6, #21]
 800eebc:	2108      	movs	r1, #8
 800eebe:	6160      	str	r0, [r4, #20]
 800eec0:	4630      	mov	r0, r6
 800eec2:	f001 fa75 	bl	80103b0 <ucdr_align_to>
 800eec6:	9901      	ldr	r1, [sp, #4]
 800eec8:	4630      	mov	r0, r6
 800eeca:	00c9      	lsls	r1, r1, #3
 800eecc:	f001 faa6 	bl	801041c <ucdr_advance_buffer>
 800eed0:	4628      	mov	r0, r5
 800eed2:	b003      	add	sp, #12
 800eed4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800eed6:	bf00      	nop

0800eed8 <_Float64MultiArray__cdr_serialize>:
 800eed8:	b180      	cbz	r0, 800eefc <_Float64MultiArray__cdr_serialize+0x24>
 800eeda:	b538      	push	{r3, r4, r5, lr}
 800eedc:	460d      	mov	r5, r1
 800eede:	4604      	mov	r4, r0
 800eee0:	f000 f8ce 	bl	800f080 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__MultiArrayLayout>
 800eee4:	6843      	ldr	r3, [r0, #4]
 800eee6:	4629      	mov	r1, r5
 800eee8:	689b      	ldr	r3, [r3, #8]
 800eeea:	4620      	mov	r0, r4
 800eeec:	4798      	blx	r3
 800eeee:	e9d4 1204 	ldrd	r1, r2, [r4, #16]
 800eef2:	4628      	mov	r0, r5
 800eef4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800eef8:	f001 bb08 	b.w	801050c <ucdr_serialize_sequence_double>
 800eefc:	4770      	bx	lr
 800eefe:	bf00      	nop

0800ef00 <_Float64MultiArray__get_serialized_size>:
 800ef00:	b538      	push	{r3, r4, r5, lr}
 800ef02:	4604      	mov	r4, r0
 800ef04:	b150      	cbz	r0, 800ef1c <_Float64MultiArray__get_serialized_size+0x1c>
 800ef06:	2100      	movs	r1, #0
 800ef08:	f000 f854 	bl	800efb4 <get_serialized_size_std_msgs__msg__MultiArrayLayout>
 800ef0c:	2104      	movs	r1, #4
 800ef0e:	6965      	ldr	r5, [r4, #20]
 800ef10:	4604      	mov	r4, r0
 800ef12:	f001 fa37 	bl	8010384 <ucdr_alignment>
 800ef16:	4404      	add	r4, r0
 800ef18:	3404      	adds	r4, #4
 800ef1a:	b90d      	cbnz	r5, 800ef20 <_Float64MultiArray__get_serialized_size+0x20>
 800ef1c:	4620      	mov	r0, r4
 800ef1e:	bd38      	pop	{r3, r4, r5, pc}
 800ef20:	2108      	movs	r1, #8
 800ef22:	4620      	mov	r0, r4
 800ef24:	f001 fa2e 	bl	8010384 <ucdr_alignment>
 800ef28:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800ef2c:	4404      	add	r4, r0
 800ef2e:	4620      	mov	r0, r4
 800ef30:	bd38      	pop	{r3, r4, r5, pc}
 800ef32:	bf00      	nop

0800ef34 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__Float64MultiArray>:
 800ef34:	4800      	ldr	r0, [pc, #0]	@ (800ef38 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__Float64MultiArray+0x4>)
 800ef36:	4770      	bx	lr
 800ef38:	20000064 	.word	0x20000064

0800ef3c <_MultiArrayLayout__max_serialized_size>:
 800ef3c:	b508      	push	{r3, lr}
 800ef3e:	2104      	movs	r1, #4
 800ef40:	2000      	movs	r0, #0
 800ef42:	f001 fa1f 	bl	8010384 <ucdr_alignment>
 800ef46:	3004      	adds	r0, #4
 800ef48:	bd08      	pop	{r3, pc}
 800ef4a:	bf00      	nop

0800ef4c <get_serialized_size_std_msgs__msg__MultiArrayLayout.part.0>:
 800ef4c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ef50:	f8d0 8004 	ldr.w	r8, [r0, #4]
 800ef54:	4689      	mov	r9, r1
 800ef56:	4607      	mov	r7, r0
 800ef58:	4608      	mov	r0, r1
 800ef5a:	2104      	movs	r1, #4
 800ef5c:	f001 fa12 	bl	8010384 <ucdr_alignment>
 800ef60:	f109 0304 	add.w	r3, r9, #4
 800ef64:	18c6      	adds	r6, r0, r3
 800ef66:	f1b8 0f00 	cmp.w	r8, #0
 800ef6a:	d018      	beq.n	800ef9e <get_serialized_size_std_msgs__msg__MultiArrayLayout.part.0+0x52>
 800ef6c:	2500      	movs	r5, #0
 800ef6e:	f008 fa2b 	bl	80173c8 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__MultiArrayDimension>
 800ef72:	683a      	ldr	r2, [r7, #0]
 800ef74:	6843      	ldr	r3, [r0, #4]
 800ef76:	eb05 0085 	add.w	r0, r5, r5, lsl #2
 800ef7a:	4631      	mov	r1, r6
 800ef7c:	695b      	ldr	r3, [r3, #20]
 800ef7e:	eb02 0080 	add.w	r0, r2, r0, lsl #2
 800ef82:	4798      	blx	r3
 800ef84:	2804      	cmp	r0, #4
 800ef86:	4601      	mov	r1, r0
 800ef88:	4604      	mov	r4, r0
 800ef8a:	bf28      	it	cs
 800ef8c:	2104      	movcs	r1, #4
 800ef8e:	4630      	mov	r0, r6
 800ef90:	f001 f9f8 	bl	8010384 <ucdr_alignment>
 800ef94:	3501      	adds	r5, #1
 800ef96:	4404      	add	r4, r0
 800ef98:	45a8      	cmp	r8, r5
 800ef9a:	4426      	add	r6, r4
 800ef9c:	d1e7      	bne.n	800ef6e <get_serialized_size_std_msgs__msg__MultiArrayLayout.part.0+0x22>
 800ef9e:	2104      	movs	r1, #4
 800efa0:	4630      	mov	r0, r6
 800efa2:	f001 f9ef 	bl	8010384 <ucdr_alignment>
 800efa6:	f1c9 0904 	rsb	r9, r9, #4
 800efaa:	444e      	add	r6, r9
 800efac:	4430      	add	r0, r6
 800efae:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800efb2:	bf00      	nop

0800efb4 <get_serialized_size_std_msgs__msg__MultiArrayLayout>:
 800efb4:	b108      	cbz	r0, 800efba <get_serialized_size_std_msgs__msg__MultiArrayLayout+0x6>
 800efb6:	f7ff bfc9 	b.w	800ef4c <get_serialized_size_std_msgs__msg__MultiArrayLayout.part.0>
 800efba:	4770      	bx	lr

0800efbc <_MultiArrayLayout__get_serialized_size>:
 800efbc:	b110      	cbz	r0, 800efc4 <_MultiArrayLayout__get_serialized_size+0x8>
 800efbe:	2100      	movs	r1, #0
 800efc0:	f7ff bfc4 	b.w	800ef4c <get_serialized_size_std_msgs__msg__MultiArrayLayout.part.0>
 800efc4:	4770      	bx	lr
 800efc6:	bf00      	nop

0800efc8 <_MultiArrayLayout__cdr_deserialize>:
 800efc8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800efca:	460d      	mov	r5, r1
 800efcc:	b083      	sub	sp, #12
 800efce:	b329      	cbz	r1, 800f01c <_MultiArrayLayout__cdr_deserialize+0x54>
 800efd0:	a901      	add	r1, sp, #4
 800efd2:	4607      	mov	r7, r0
 800efd4:	f000 fbce 	bl	800f774 <ucdr_deserialize_uint32_t>
 800efd8:	9b01      	ldr	r3, [sp, #4]
 800efda:	68aa      	ldr	r2, [r5, #8]
 800efdc:	429a      	cmp	r2, r3
 800efde:	d31a      	bcc.n	800f016 <_MultiArrayLayout__cdr_deserialize+0x4e>
 800efe0:	606b      	str	r3, [r5, #4]
 800efe2:	b18b      	cbz	r3, 800f008 <_MultiArrayLayout__cdr_deserialize+0x40>
 800efe4:	2400      	movs	r4, #0
 800efe6:	4626      	mov	r6, r4
 800efe8:	e002      	b.n	800eff0 <_MultiArrayLayout__cdr_deserialize+0x28>
 800efea:	9b01      	ldr	r3, [sp, #4]
 800efec:	429e      	cmp	r6, r3
 800efee:	d20b      	bcs.n	800f008 <_MultiArrayLayout__cdr_deserialize+0x40>
 800eff0:	f008 f9ea 	bl	80173c8 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__MultiArrayDimension>
 800eff4:	6829      	ldr	r1, [r5, #0]
 800eff6:	6843      	ldr	r3, [r0, #4]
 800eff8:	4421      	add	r1, r4
 800effa:	68db      	ldr	r3, [r3, #12]
 800effc:	4638      	mov	r0, r7
 800effe:	4798      	blx	r3
 800f000:	3601      	adds	r6, #1
 800f002:	3414      	adds	r4, #20
 800f004:	2800      	cmp	r0, #0
 800f006:	d1f0      	bne.n	800efea <_MultiArrayLayout__cdr_deserialize+0x22>
 800f008:	f105 010c 	add.w	r1, r5, #12
 800f00c:	4638      	mov	r0, r7
 800f00e:	f000 fbb1 	bl	800f774 <ucdr_deserialize_uint32_t>
 800f012:	b003      	add	sp, #12
 800f014:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f016:	2000      	movs	r0, #0
 800f018:	b003      	add	sp, #12
 800f01a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f01c:	4608      	mov	r0, r1
 800f01e:	b003      	add	sp, #12
 800f020:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f022:	bf00      	nop

0800f024 <_MultiArrayLayout__cdr_serialize>:
 800f024:	b308      	cbz	r0, 800f06a <_MultiArrayLayout__cdr_serialize+0x46>
 800f026:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f028:	6847      	ldr	r7, [r0, #4]
 800f02a:	460e      	mov	r6, r1
 800f02c:	4605      	mov	r5, r0
 800f02e:	4608      	mov	r0, r1
 800f030:	4639      	mov	r1, r7
 800f032:	f000 fa6f 	bl	800f514 <ucdr_serialize_uint32_t>
 800f036:	b190      	cbz	r0, 800f05e <_MultiArrayLayout__cdr_serialize+0x3a>
 800f038:	b18f      	cbz	r7, 800f05e <_MultiArrayLayout__cdr_serialize+0x3a>
 800f03a:	2400      	movs	r4, #0
 800f03c:	e001      	b.n	800f042 <_MultiArrayLayout__cdr_serialize+0x1e>
 800f03e:	42a7      	cmp	r7, r4
 800f040:	d00d      	beq.n	800f05e <_MultiArrayLayout__cdr_serialize+0x3a>
 800f042:	f008 f9c1 	bl	80173c8 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__MultiArrayDimension>
 800f046:	682a      	ldr	r2, [r5, #0]
 800f048:	6843      	ldr	r3, [r0, #4]
 800f04a:	eb04 0084 	add.w	r0, r4, r4, lsl #2
 800f04e:	689b      	ldr	r3, [r3, #8]
 800f050:	eb02 0080 	add.w	r0, r2, r0, lsl #2
 800f054:	4631      	mov	r1, r6
 800f056:	3401      	adds	r4, #1
 800f058:	4798      	blx	r3
 800f05a:	2800      	cmp	r0, #0
 800f05c:	d1ef      	bne.n	800f03e <_MultiArrayLayout__cdr_serialize+0x1a>
 800f05e:	68e9      	ldr	r1, [r5, #12]
 800f060:	4630      	mov	r0, r6
 800f062:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800f066:	f000 ba55 	b.w	800f514 <ucdr_serialize_uint32_t>
 800f06a:	4770      	bx	lr

0800f06c <max_serialized_size_std_msgs__msg__MultiArrayLayout>:
 800f06c:	b508      	push	{r3, lr}
 800f06e:	4603      	mov	r3, r0
 800f070:	2200      	movs	r2, #0
 800f072:	4608      	mov	r0, r1
 800f074:	701a      	strb	r2, [r3, #0]
 800f076:	2104      	movs	r1, #4
 800f078:	f001 f984 	bl	8010384 <ucdr_alignment>
 800f07c:	3004      	adds	r0, #4
 800f07e:	bd08      	pop	{r3, pc}

0800f080 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__MultiArrayLayout>:
 800f080:	4800      	ldr	r0, [pc, #0]	@ (800f084 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__MultiArrayLayout+0x4>)
 800f082:	4770      	bx	lr
 800f084:	2000008c 	.word	0x2000008c

0800f088 <ucdr_serialize_bool>:
 800f088:	b538      	push	{r3, r4, r5, lr}
 800f08a:	460d      	mov	r5, r1
 800f08c:	2101      	movs	r1, #1
 800f08e:	4604      	mov	r4, r0
 800f090:	f001 f92e 	bl	80102f0 <ucdr_check_final_buffer_behavior>
 800f094:	b148      	cbz	r0, 800f0aa <ucdr_serialize_bool+0x22>
 800f096:	68a3      	ldr	r3, [r4, #8]
 800f098:	701d      	strb	r5, [r3, #0]
 800f09a:	68a2      	ldr	r2, [r4, #8]
 800f09c:	6923      	ldr	r3, [r4, #16]
 800f09e:	3201      	adds	r2, #1
 800f0a0:	3301      	adds	r3, #1
 800f0a2:	2101      	movs	r1, #1
 800f0a4:	60a2      	str	r2, [r4, #8]
 800f0a6:	6123      	str	r3, [r4, #16]
 800f0a8:	7561      	strb	r1, [r4, #21]
 800f0aa:	7da0      	ldrb	r0, [r4, #22]
 800f0ac:	f080 0001 	eor.w	r0, r0, #1
 800f0b0:	bd38      	pop	{r3, r4, r5, pc}
 800f0b2:	bf00      	nop

0800f0b4 <ucdr_deserialize_bool>:
 800f0b4:	b538      	push	{r3, r4, r5, lr}
 800f0b6:	460d      	mov	r5, r1
 800f0b8:	2101      	movs	r1, #1
 800f0ba:	4604      	mov	r4, r0
 800f0bc:	f001 f918 	bl	80102f0 <ucdr_check_final_buffer_behavior>
 800f0c0:	b168      	cbz	r0, 800f0de <ucdr_deserialize_bool+0x2a>
 800f0c2:	68a2      	ldr	r2, [r4, #8]
 800f0c4:	6923      	ldr	r3, [r4, #16]
 800f0c6:	f812 1b01 	ldrb.w	r1, [r2], #1
 800f0ca:	3900      	subs	r1, #0
 800f0cc:	f103 0301 	add.w	r3, r3, #1
 800f0d0:	bf18      	it	ne
 800f0d2:	2101      	movne	r1, #1
 800f0d4:	2001      	movs	r0, #1
 800f0d6:	7029      	strb	r1, [r5, #0]
 800f0d8:	60a2      	str	r2, [r4, #8]
 800f0da:	6123      	str	r3, [r4, #16]
 800f0dc:	7560      	strb	r0, [r4, #21]
 800f0de:	7da0      	ldrb	r0, [r4, #22]
 800f0e0:	f080 0001 	eor.w	r0, r0, #1
 800f0e4:	bd38      	pop	{r3, r4, r5, pc}
 800f0e6:	bf00      	nop

0800f0e8 <ucdr_serialize_uint8_t>:
 800f0e8:	b538      	push	{r3, r4, r5, lr}
 800f0ea:	460d      	mov	r5, r1
 800f0ec:	2101      	movs	r1, #1
 800f0ee:	4604      	mov	r4, r0
 800f0f0:	f001 f8fe 	bl	80102f0 <ucdr_check_final_buffer_behavior>
 800f0f4:	b148      	cbz	r0, 800f10a <ucdr_serialize_uint8_t+0x22>
 800f0f6:	68a3      	ldr	r3, [r4, #8]
 800f0f8:	701d      	strb	r5, [r3, #0]
 800f0fa:	68a2      	ldr	r2, [r4, #8]
 800f0fc:	6923      	ldr	r3, [r4, #16]
 800f0fe:	3201      	adds	r2, #1
 800f100:	3301      	adds	r3, #1
 800f102:	2101      	movs	r1, #1
 800f104:	60a2      	str	r2, [r4, #8]
 800f106:	6123      	str	r3, [r4, #16]
 800f108:	7561      	strb	r1, [r4, #21]
 800f10a:	7da0      	ldrb	r0, [r4, #22]
 800f10c:	f080 0001 	eor.w	r0, r0, #1
 800f110:	bd38      	pop	{r3, r4, r5, pc}
 800f112:	bf00      	nop

0800f114 <ucdr_deserialize_uint8_t>:
 800f114:	b538      	push	{r3, r4, r5, lr}
 800f116:	460d      	mov	r5, r1
 800f118:	2101      	movs	r1, #1
 800f11a:	4604      	mov	r4, r0
 800f11c:	f001 f8e8 	bl	80102f0 <ucdr_check_final_buffer_behavior>
 800f120:	b150      	cbz	r0, 800f138 <ucdr_deserialize_uint8_t+0x24>
 800f122:	68a3      	ldr	r3, [r4, #8]
 800f124:	781b      	ldrb	r3, [r3, #0]
 800f126:	702b      	strb	r3, [r5, #0]
 800f128:	68a2      	ldr	r2, [r4, #8]
 800f12a:	6923      	ldr	r3, [r4, #16]
 800f12c:	3201      	adds	r2, #1
 800f12e:	3301      	adds	r3, #1
 800f130:	2101      	movs	r1, #1
 800f132:	60a2      	str	r2, [r4, #8]
 800f134:	6123      	str	r3, [r4, #16]
 800f136:	7561      	strb	r1, [r4, #21]
 800f138:	7da0      	ldrb	r0, [r4, #22]
 800f13a:	f080 0001 	eor.w	r0, r0, #1
 800f13e:	bd38      	pop	{r3, r4, r5, pc}

0800f140 <ucdr_serialize_uint16_t>:
 800f140:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f144:	b082      	sub	sp, #8
 800f146:	460b      	mov	r3, r1
 800f148:	2102      	movs	r1, #2
 800f14a:	4604      	mov	r4, r0
 800f14c:	f8ad 3006 	strh.w	r3, [sp, #6]
 800f150:	f001 f920 	bl	8010394 <ucdr_buffer_alignment>
 800f154:	4601      	mov	r1, r0
 800f156:	4620      	mov	r0, r4
 800f158:	7d67      	ldrb	r7, [r4, #21]
 800f15a:	f001 f95f 	bl	801041c <ucdr_advance_buffer>
 800f15e:	4620      	mov	r0, r4
 800f160:	2102      	movs	r1, #2
 800f162:	f001 f8b9 	bl	80102d8 <ucdr_check_buffer_available_for>
 800f166:	bb78      	cbnz	r0, 800f1c8 <ucdr_serialize_uint16_t+0x88>
 800f168:	e9d4 5601 	ldrd	r5, r6, [r4, #4]
 800f16c:	42b5      	cmp	r5, r6
 800f16e:	d926      	bls.n	800f1be <ucdr_serialize_uint16_t+0x7e>
 800f170:	6922      	ldr	r2, [r4, #16]
 800f172:	60a5      	str	r5, [r4, #8]
 800f174:	1bad      	subs	r5, r5, r6
 800f176:	442a      	add	r2, r5
 800f178:	f1c5 0802 	rsb	r8, r5, #2
 800f17c:	6122      	str	r2, [r4, #16]
 800f17e:	4641      	mov	r1, r8
 800f180:	4620      	mov	r0, r4
 800f182:	f001 f8b5 	bl	80102f0 <ucdr_check_final_buffer_behavior>
 800f186:	2800      	cmp	r0, #0
 800f188:	d03b      	beq.n	800f202 <ucdr_serialize_uint16_t+0xc2>
 800f18a:	7d23      	ldrb	r3, [r4, #20]
 800f18c:	2b01      	cmp	r3, #1
 800f18e:	d04a      	beq.n	800f226 <ucdr_serialize_uint16_t+0xe6>
 800f190:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800f194:	7033      	strb	r3, [r6, #0]
 800f196:	2d00      	cmp	r5, #0
 800f198:	d040      	beq.n	800f21c <ucdr_serialize_uint16_t+0xdc>
 800f19a:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800f19e:	7073      	strb	r3, [r6, #1]
 800f1a0:	6923      	ldr	r3, [r4, #16]
 800f1a2:	68a2      	ldr	r2, [r4, #8]
 800f1a4:	7da0      	ldrb	r0, [r4, #22]
 800f1a6:	3302      	adds	r3, #2
 800f1a8:	1b5b      	subs	r3, r3, r5
 800f1aa:	4442      	add	r2, r8
 800f1ac:	2102      	movs	r1, #2
 800f1ae:	f080 0001 	eor.w	r0, r0, #1
 800f1b2:	6123      	str	r3, [r4, #16]
 800f1b4:	60a2      	str	r2, [r4, #8]
 800f1b6:	7561      	strb	r1, [r4, #21]
 800f1b8:	b002      	add	sp, #8
 800f1ba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f1be:	2102      	movs	r1, #2
 800f1c0:	4620      	mov	r0, r4
 800f1c2:	f001 f895 	bl	80102f0 <ucdr_check_final_buffer_behavior>
 800f1c6:	b190      	cbz	r0, 800f1ee <ucdr_serialize_uint16_t+0xae>
 800f1c8:	7d23      	ldrb	r3, [r4, #20]
 800f1ca:	2b01      	cmp	r3, #1
 800f1cc:	68a3      	ldr	r3, [r4, #8]
 800f1ce:	d014      	beq.n	800f1fa <ucdr_serialize_uint16_t+0xba>
 800f1d0:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800f1d4:	701a      	strb	r2, [r3, #0]
 800f1d6:	68a3      	ldr	r3, [r4, #8]
 800f1d8:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800f1dc:	705a      	strb	r2, [r3, #1]
 800f1de:	68a2      	ldr	r2, [r4, #8]
 800f1e0:	6923      	ldr	r3, [r4, #16]
 800f1e2:	3202      	adds	r2, #2
 800f1e4:	3302      	adds	r3, #2
 800f1e6:	2102      	movs	r1, #2
 800f1e8:	60a2      	str	r2, [r4, #8]
 800f1ea:	6123      	str	r3, [r4, #16]
 800f1ec:	7561      	strb	r1, [r4, #21]
 800f1ee:	7da0      	ldrb	r0, [r4, #22]
 800f1f0:	f080 0001 	eor.w	r0, r0, #1
 800f1f4:	b002      	add	sp, #8
 800f1f6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f1fa:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 800f1fe:	801a      	strh	r2, [r3, #0]
 800f200:	e7ed      	b.n	800f1de <ucdr_serialize_uint16_t+0x9e>
 800f202:	68a2      	ldr	r2, [r4, #8]
 800f204:	6923      	ldr	r3, [r4, #16]
 800f206:	7da0      	ldrb	r0, [r4, #22]
 800f208:	7567      	strb	r7, [r4, #21]
 800f20a:	1b52      	subs	r2, r2, r5
 800f20c:	1b5b      	subs	r3, r3, r5
 800f20e:	f080 0001 	eor.w	r0, r0, #1
 800f212:	60a2      	str	r2, [r4, #8]
 800f214:	6123      	str	r3, [r4, #16]
 800f216:	b002      	add	sp, #8
 800f218:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f21c:	68a3      	ldr	r3, [r4, #8]
 800f21e:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800f222:	701a      	strb	r2, [r3, #0]
 800f224:	e7bc      	b.n	800f1a0 <ucdr_serialize_uint16_t+0x60>
 800f226:	4630      	mov	r0, r6
 800f228:	f10d 0606 	add.w	r6, sp, #6
 800f22c:	4631      	mov	r1, r6
 800f22e:	462a      	mov	r2, r5
 800f230:	f00a fdcf 	bl	8019dd2 <memcpy>
 800f234:	68a0      	ldr	r0, [r4, #8]
 800f236:	4642      	mov	r2, r8
 800f238:	1971      	adds	r1, r6, r5
 800f23a:	f00a fdca 	bl	8019dd2 <memcpy>
 800f23e:	e7af      	b.n	800f1a0 <ucdr_serialize_uint16_t+0x60>

0800f240 <ucdr_serialize_endian_uint16_t>:
 800f240:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800f244:	b083      	sub	sp, #12
 800f246:	460d      	mov	r5, r1
 800f248:	2102      	movs	r1, #2
 800f24a:	4604      	mov	r4, r0
 800f24c:	f8ad 2006 	strh.w	r2, [sp, #6]
 800f250:	f001 f8a0 	bl	8010394 <ucdr_buffer_alignment>
 800f254:	4601      	mov	r1, r0
 800f256:	4620      	mov	r0, r4
 800f258:	f894 8015 	ldrb.w	r8, [r4, #21]
 800f25c:	f001 f8de 	bl	801041c <ucdr_advance_buffer>
 800f260:	4620      	mov	r0, r4
 800f262:	2102      	movs	r1, #2
 800f264:	f001 f838 	bl	80102d8 <ucdr_check_buffer_available_for>
 800f268:	bb70      	cbnz	r0, 800f2c8 <ucdr_serialize_endian_uint16_t+0x88>
 800f26a:	e9d4 6701 	ldrd	r6, r7, [r4, #4]
 800f26e:	42be      	cmp	r6, r7
 800f270:	d925      	bls.n	800f2be <ucdr_serialize_endian_uint16_t+0x7e>
 800f272:	6922      	ldr	r2, [r4, #16]
 800f274:	60a6      	str	r6, [r4, #8]
 800f276:	1bf6      	subs	r6, r6, r7
 800f278:	4432      	add	r2, r6
 800f27a:	f1c6 0902 	rsb	r9, r6, #2
 800f27e:	6122      	str	r2, [r4, #16]
 800f280:	4649      	mov	r1, r9
 800f282:	4620      	mov	r0, r4
 800f284:	f001 f834 	bl	80102f0 <ucdr_check_final_buffer_behavior>
 800f288:	2800      	cmp	r0, #0
 800f28a:	d039      	beq.n	800f300 <ucdr_serialize_endian_uint16_t+0xc0>
 800f28c:	2d01      	cmp	r5, #1
 800f28e:	d04a      	beq.n	800f326 <ucdr_serialize_endian_uint16_t+0xe6>
 800f290:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800f294:	703b      	strb	r3, [r7, #0]
 800f296:	2e00      	cmp	r6, #0
 800f298:	d040      	beq.n	800f31c <ucdr_serialize_endian_uint16_t+0xdc>
 800f29a:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800f29e:	707b      	strb	r3, [r7, #1]
 800f2a0:	6923      	ldr	r3, [r4, #16]
 800f2a2:	68a2      	ldr	r2, [r4, #8]
 800f2a4:	7da0      	ldrb	r0, [r4, #22]
 800f2a6:	3302      	adds	r3, #2
 800f2a8:	1b9b      	subs	r3, r3, r6
 800f2aa:	444a      	add	r2, r9
 800f2ac:	2102      	movs	r1, #2
 800f2ae:	f080 0001 	eor.w	r0, r0, #1
 800f2b2:	6123      	str	r3, [r4, #16]
 800f2b4:	60a2      	str	r2, [r4, #8]
 800f2b6:	7561      	strb	r1, [r4, #21]
 800f2b8:	b003      	add	sp, #12
 800f2ba:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800f2be:	2102      	movs	r1, #2
 800f2c0:	4620      	mov	r0, r4
 800f2c2:	f001 f815 	bl	80102f0 <ucdr_check_final_buffer_behavior>
 800f2c6:	b188      	cbz	r0, 800f2ec <ucdr_serialize_endian_uint16_t+0xac>
 800f2c8:	2d01      	cmp	r5, #1
 800f2ca:	68a3      	ldr	r3, [r4, #8]
 800f2cc:	d014      	beq.n	800f2f8 <ucdr_serialize_endian_uint16_t+0xb8>
 800f2ce:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800f2d2:	701a      	strb	r2, [r3, #0]
 800f2d4:	68a3      	ldr	r3, [r4, #8]
 800f2d6:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800f2da:	705a      	strb	r2, [r3, #1]
 800f2dc:	68a2      	ldr	r2, [r4, #8]
 800f2de:	6923      	ldr	r3, [r4, #16]
 800f2e0:	3202      	adds	r2, #2
 800f2e2:	3302      	adds	r3, #2
 800f2e4:	2102      	movs	r1, #2
 800f2e6:	60a2      	str	r2, [r4, #8]
 800f2e8:	6123      	str	r3, [r4, #16]
 800f2ea:	7561      	strb	r1, [r4, #21]
 800f2ec:	7da0      	ldrb	r0, [r4, #22]
 800f2ee:	f080 0001 	eor.w	r0, r0, #1
 800f2f2:	b003      	add	sp, #12
 800f2f4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800f2f8:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 800f2fc:	801a      	strh	r2, [r3, #0]
 800f2fe:	e7ed      	b.n	800f2dc <ucdr_serialize_endian_uint16_t+0x9c>
 800f300:	68a2      	ldr	r2, [r4, #8]
 800f302:	6923      	ldr	r3, [r4, #16]
 800f304:	7da0      	ldrb	r0, [r4, #22]
 800f306:	f884 8015 	strb.w	r8, [r4, #21]
 800f30a:	1b92      	subs	r2, r2, r6
 800f30c:	1b9b      	subs	r3, r3, r6
 800f30e:	f080 0001 	eor.w	r0, r0, #1
 800f312:	60a2      	str	r2, [r4, #8]
 800f314:	6123      	str	r3, [r4, #16]
 800f316:	b003      	add	sp, #12
 800f318:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800f31c:	68a3      	ldr	r3, [r4, #8]
 800f31e:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800f322:	701a      	strb	r2, [r3, #0]
 800f324:	e7bc      	b.n	800f2a0 <ucdr_serialize_endian_uint16_t+0x60>
 800f326:	f10d 0506 	add.w	r5, sp, #6
 800f32a:	4629      	mov	r1, r5
 800f32c:	4632      	mov	r2, r6
 800f32e:	4638      	mov	r0, r7
 800f330:	f00a fd4f 	bl	8019dd2 <memcpy>
 800f334:	68a0      	ldr	r0, [r4, #8]
 800f336:	464a      	mov	r2, r9
 800f338:	19a9      	adds	r1, r5, r6
 800f33a:	f00a fd4a 	bl	8019dd2 <memcpy>
 800f33e:	e7af      	b.n	800f2a0 <ucdr_serialize_endian_uint16_t+0x60>

0800f340 <ucdr_deserialize_uint16_t>:
 800f340:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f344:	460d      	mov	r5, r1
 800f346:	2102      	movs	r1, #2
 800f348:	4604      	mov	r4, r0
 800f34a:	f001 f823 	bl	8010394 <ucdr_buffer_alignment>
 800f34e:	4601      	mov	r1, r0
 800f350:	4620      	mov	r0, r4
 800f352:	f894 8015 	ldrb.w	r8, [r4, #21]
 800f356:	f001 f861 	bl	801041c <ucdr_advance_buffer>
 800f35a:	4620      	mov	r0, r4
 800f35c:	2102      	movs	r1, #2
 800f35e:	f000 ffbb 	bl	80102d8 <ucdr_check_buffer_available_for>
 800f362:	bb60      	cbnz	r0, 800f3be <ucdr_deserialize_uint16_t+0x7e>
 800f364:	e9d4 6701 	ldrd	r6, r7, [r4, #4]
 800f368:	42be      	cmp	r6, r7
 800f36a:	d923      	bls.n	800f3b4 <ucdr_deserialize_uint16_t+0x74>
 800f36c:	6922      	ldr	r2, [r4, #16]
 800f36e:	60a6      	str	r6, [r4, #8]
 800f370:	1bf6      	subs	r6, r6, r7
 800f372:	4432      	add	r2, r6
 800f374:	f1c6 0902 	rsb	r9, r6, #2
 800f378:	6122      	str	r2, [r4, #16]
 800f37a:	4649      	mov	r1, r9
 800f37c:	4620      	mov	r0, r4
 800f37e:	f000 ffb7 	bl	80102f0 <ucdr_check_final_buffer_behavior>
 800f382:	2800      	cmp	r0, #0
 800f384:	d034      	beq.n	800f3f0 <ucdr_deserialize_uint16_t+0xb0>
 800f386:	7d23      	ldrb	r3, [r4, #20]
 800f388:	2b01      	cmp	r3, #1
 800f38a:	d042      	beq.n	800f412 <ucdr_deserialize_uint16_t+0xd2>
 800f38c:	787b      	ldrb	r3, [r7, #1]
 800f38e:	702b      	strb	r3, [r5, #0]
 800f390:	2e00      	cmp	r6, #0
 800f392:	d03a      	beq.n	800f40a <ucdr_deserialize_uint16_t+0xca>
 800f394:	783b      	ldrb	r3, [r7, #0]
 800f396:	706b      	strb	r3, [r5, #1]
 800f398:	6923      	ldr	r3, [r4, #16]
 800f39a:	68a2      	ldr	r2, [r4, #8]
 800f39c:	7da0      	ldrb	r0, [r4, #22]
 800f39e:	2102      	movs	r1, #2
 800f3a0:	3302      	adds	r3, #2
 800f3a2:	1b9b      	subs	r3, r3, r6
 800f3a4:	444a      	add	r2, r9
 800f3a6:	7561      	strb	r1, [r4, #21]
 800f3a8:	6123      	str	r3, [r4, #16]
 800f3aa:	60a2      	str	r2, [r4, #8]
 800f3ac:	f080 0001 	eor.w	r0, r0, #1
 800f3b0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f3b4:	2102      	movs	r1, #2
 800f3b6:	4620      	mov	r0, r4
 800f3b8:	f000 ff9a 	bl	80102f0 <ucdr_check_final_buffer_behavior>
 800f3bc:	b180      	cbz	r0, 800f3e0 <ucdr_deserialize_uint16_t+0xa0>
 800f3be:	7d23      	ldrb	r3, [r4, #20]
 800f3c0:	2b01      	cmp	r3, #1
 800f3c2:	68a3      	ldr	r3, [r4, #8]
 800f3c4:	d011      	beq.n	800f3ea <ucdr_deserialize_uint16_t+0xaa>
 800f3c6:	785b      	ldrb	r3, [r3, #1]
 800f3c8:	702b      	strb	r3, [r5, #0]
 800f3ca:	68a3      	ldr	r3, [r4, #8]
 800f3cc:	781b      	ldrb	r3, [r3, #0]
 800f3ce:	706b      	strb	r3, [r5, #1]
 800f3d0:	68a2      	ldr	r2, [r4, #8]
 800f3d2:	6923      	ldr	r3, [r4, #16]
 800f3d4:	3202      	adds	r2, #2
 800f3d6:	3302      	adds	r3, #2
 800f3d8:	2102      	movs	r1, #2
 800f3da:	60a2      	str	r2, [r4, #8]
 800f3dc:	6123      	str	r3, [r4, #16]
 800f3de:	7561      	strb	r1, [r4, #21]
 800f3e0:	7da0      	ldrb	r0, [r4, #22]
 800f3e2:	f080 0001 	eor.w	r0, r0, #1
 800f3e6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f3ea:	881b      	ldrh	r3, [r3, #0]
 800f3ec:	802b      	strh	r3, [r5, #0]
 800f3ee:	e7ef      	b.n	800f3d0 <ucdr_deserialize_uint16_t+0x90>
 800f3f0:	68a2      	ldr	r2, [r4, #8]
 800f3f2:	6923      	ldr	r3, [r4, #16]
 800f3f4:	7da0      	ldrb	r0, [r4, #22]
 800f3f6:	f884 8015 	strb.w	r8, [r4, #21]
 800f3fa:	1b92      	subs	r2, r2, r6
 800f3fc:	1b9b      	subs	r3, r3, r6
 800f3fe:	60a2      	str	r2, [r4, #8]
 800f400:	6123      	str	r3, [r4, #16]
 800f402:	f080 0001 	eor.w	r0, r0, #1
 800f406:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f40a:	68a3      	ldr	r3, [r4, #8]
 800f40c:	781b      	ldrb	r3, [r3, #0]
 800f40e:	706b      	strb	r3, [r5, #1]
 800f410:	e7c2      	b.n	800f398 <ucdr_deserialize_uint16_t+0x58>
 800f412:	4639      	mov	r1, r7
 800f414:	4632      	mov	r2, r6
 800f416:	4628      	mov	r0, r5
 800f418:	f00a fcdb 	bl	8019dd2 <memcpy>
 800f41c:	68a1      	ldr	r1, [r4, #8]
 800f41e:	464a      	mov	r2, r9
 800f420:	19a8      	adds	r0, r5, r6
 800f422:	f00a fcd6 	bl	8019dd2 <memcpy>
 800f426:	e7b7      	b.n	800f398 <ucdr_deserialize_uint16_t+0x58>

0800f428 <ucdr_deserialize_endian_uint16_t>:
 800f428:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f42c:	460e      	mov	r6, r1
 800f42e:	2102      	movs	r1, #2
 800f430:	4604      	mov	r4, r0
 800f432:	4615      	mov	r5, r2
 800f434:	f000 ffae 	bl	8010394 <ucdr_buffer_alignment>
 800f438:	4601      	mov	r1, r0
 800f43a:	4620      	mov	r0, r4
 800f43c:	f894 9015 	ldrb.w	r9, [r4, #21]
 800f440:	f000 ffec 	bl	801041c <ucdr_advance_buffer>
 800f444:	4620      	mov	r0, r4
 800f446:	2102      	movs	r1, #2
 800f448:	f000 ff46 	bl	80102d8 <ucdr_check_buffer_available_for>
 800f44c:	bb70      	cbnz	r0, 800f4ac <ucdr_deserialize_endian_uint16_t+0x84>
 800f44e:	e9d4 7801 	ldrd	r7, r8, [r4, #4]
 800f452:	4547      	cmp	r7, r8
 800f454:	d925      	bls.n	800f4a2 <ucdr_deserialize_endian_uint16_t+0x7a>
 800f456:	6922      	ldr	r2, [r4, #16]
 800f458:	60a7      	str	r7, [r4, #8]
 800f45a:	eba7 0708 	sub.w	r7, r7, r8
 800f45e:	443a      	add	r2, r7
 800f460:	f1c7 0a02 	rsb	sl, r7, #2
 800f464:	6122      	str	r2, [r4, #16]
 800f466:	4651      	mov	r1, sl
 800f468:	4620      	mov	r0, r4
 800f46a:	f000 ff41 	bl	80102f0 <ucdr_check_final_buffer_behavior>
 800f46e:	2800      	cmp	r0, #0
 800f470:	d034      	beq.n	800f4dc <ucdr_deserialize_endian_uint16_t+0xb4>
 800f472:	2e01      	cmp	r6, #1
 800f474:	d043      	beq.n	800f4fe <ucdr_deserialize_endian_uint16_t+0xd6>
 800f476:	f898 3001 	ldrb.w	r3, [r8, #1]
 800f47a:	702b      	strb	r3, [r5, #0]
 800f47c:	2f00      	cmp	r7, #0
 800f47e:	d03a      	beq.n	800f4f6 <ucdr_deserialize_endian_uint16_t+0xce>
 800f480:	f898 3000 	ldrb.w	r3, [r8]
 800f484:	706b      	strb	r3, [r5, #1]
 800f486:	6923      	ldr	r3, [r4, #16]
 800f488:	68a2      	ldr	r2, [r4, #8]
 800f48a:	7da0      	ldrb	r0, [r4, #22]
 800f48c:	2102      	movs	r1, #2
 800f48e:	3302      	adds	r3, #2
 800f490:	1bdb      	subs	r3, r3, r7
 800f492:	4452      	add	r2, sl
 800f494:	7561      	strb	r1, [r4, #21]
 800f496:	6123      	str	r3, [r4, #16]
 800f498:	60a2      	str	r2, [r4, #8]
 800f49a:	f080 0001 	eor.w	r0, r0, #1
 800f49e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f4a2:	2102      	movs	r1, #2
 800f4a4:	4620      	mov	r0, r4
 800f4a6:	f000 ff23 	bl	80102f0 <ucdr_check_final_buffer_behavior>
 800f4aa:	b178      	cbz	r0, 800f4cc <ucdr_deserialize_endian_uint16_t+0xa4>
 800f4ac:	2e01      	cmp	r6, #1
 800f4ae:	68a3      	ldr	r3, [r4, #8]
 800f4b0:	d011      	beq.n	800f4d6 <ucdr_deserialize_endian_uint16_t+0xae>
 800f4b2:	785b      	ldrb	r3, [r3, #1]
 800f4b4:	702b      	strb	r3, [r5, #0]
 800f4b6:	68a3      	ldr	r3, [r4, #8]
 800f4b8:	781b      	ldrb	r3, [r3, #0]
 800f4ba:	706b      	strb	r3, [r5, #1]
 800f4bc:	68a2      	ldr	r2, [r4, #8]
 800f4be:	6923      	ldr	r3, [r4, #16]
 800f4c0:	3202      	adds	r2, #2
 800f4c2:	3302      	adds	r3, #2
 800f4c4:	2102      	movs	r1, #2
 800f4c6:	60a2      	str	r2, [r4, #8]
 800f4c8:	6123      	str	r3, [r4, #16]
 800f4ca:	7561      	strb	r1, [r4, #21]
 800f4cc:	7da0      	ldrb	r0, [r4, #22]
 800f4ce:	f080 0001 	eor.w	r0, r0, #1
 800f4d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f4d6:	881b      	ldrh	r3, [r3, #0]
 800f4d8:	802b      	strh	r3, [r5, #0]
 800f4da:	e7ef      	b.n	800f4bc <ucdr_deserialize_endian_uint16_t+0x94>
 800f4dc:	68a2      	ldr	r2, [r4, #8]
 800f4de:	6923      	ldr	r3, [r4, #16]
 800f4e0:	7da0      	ldrb	r0, [r4, #22]
 800f4e2:	f884 9015 	strb.w	r9, [r4, #21]
 800f4e6:	1bd2      	subs	r2, r2, r7
 800f4e8:	1bdb      	subs	r3, r3, r7
 800f4ea:	60a2      	str	r2, [r4, #8]
 800f4ec:	6123      	str	r3, [r4, #16]
 800f4ee:	f080 0001 	eor.w	r0, r0, #1
 800f4f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f4f6:	68a3      	ldr	r3, [r4, #8]
 800f4f8:	781b      	ldrb	r3, [r3, #0]
 800f4fa:	706b      	strb	r3, [r5, #1]
 800f4fc:	e7c3      	b.n	800f486 <ucdr_deserialize_endian_uint16_t+0x5e>
 800f4fe:	4641      	mov	r1, r8
 800f500:	463a      	mov	r2, r7
 800f502:	4628      	mov	r0, r5
 800f504:	f00a fc65 	bl	8019dd2 <memcpy>
 800f508:	68a1      	ldr	r1, [r4, #8]
 800f50a:	4652      	mov	r2, sl
 800f50c:	19e8      	adds	r0, r5, r7
 800f50e:	f00a fc60 	bl	8019dd2 <memcpy>
 800f512:	e7b8      	b.n	800f486 <ucdr_deserialize_endian_uint16_t+0x5e>

0800f514 <ucdr_serialize_uint32_t>:
 800f514:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f518:	b082      	sub	sp, #8
 800f51a:	4604      	mov	r4, r0
 800f51c:	9101      	str	r1, [sp, #4]
 800f51e:	2104      	movs	r1, #4
 800f520:	f000 ff38 	bl	8010394 <ucdr_buffer_alignment>
 800f524:	4601      	mov	r1, r0
 800f526:	4620      	mov	r0, r4
 800f528:	7d67      	ldrb	r7, [r4, #21]
 800f52a:	f000 ff77 	bl	801041c <ucdr_advance_buffer>
 800f52e:	4620      	mov	r0, r4
 800f530:	2104      	movs	r1, #4
 800f532:	f000 fed1 	bl	80102d8 <ucdr_check_buffer_available_for>
 800f536:	2800      	cmp	r0, #0
 800f538:	d139      	bne.n	800f5ae <ucdr_serialize_uint32_t+0x9a>
 800f53a:	e9d4 6501 	ldrd	r6, r5, [r4, #4]
 800f53e:	42ae      	cmp	r6, r5
 800f540:	d930      	bls.n	800f5a4 <ucdr_serialize_uint32_t+0x90>
 800f542:	6922      	ldr	r2, [r4, #16]
 800f544:	60a6      	str	r6, [r4, #8]
 800f546:	1b76      	subs	r6, r6, r5
 800f548:	4432      	add	r2, r6
 800f54a:	f1c6 0804 	rsb	r8, r6, #4
 800f54e:	6122      	str	r2, [r4, #16]
 800f550:	4641      	mov	r1, r8
 800f552:	4620      	mov	r0, r4
 800f554:	f000 fecc 	bl	80102f0 <ucdr_check_final_buffer_behavior>
 800f558:	2800      	cmp	r0, #0
 800f55a:	d04c      	beq.n	800f5f6 <ucdr_serialize_uint32_t+0xe2>
 800f55c:	7d23      	ldrb	r3, [r4, #20]
 800f55e:	2b01      	cmp	r3, #1
 800f560:	d063      	beq.n	800f62a <ucdr_serialize_uint32_t+0x116>
 800f562:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800f566:	702b      	strb	r3, [r5, #0]
 800f568:	2e00      	cmp	r6, #0
 800f56a:	d051      	beq.n	800f610 <ucdr_serialize_uint32_t+0xfc>
 800f56c:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800f570:	706b      	strb	r3, [r5, #1]
 800f572:	2e01      	cmp	r6, #1
 800f574:	d050      	beq.n	800f618 <ucdr_serialize_uint32_t+0x104>
 800f576:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800f57a:	70ab      	strb	r3, [r5, #2]
 800f57c:	2e02      	cmp	r6, #2
 800f57e:	d04f      	beq.n	800f620 <ucdr_serialize_uint32_t+0x10c>
 800f580:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800f584:	70eb      	strb	r3, [r5, #3]
 800f586:	6923      	ldr	r3, [r4, #16]
 800f588:	68a2      	ldr	r2, [r4, #8]
 800f58a:	7da0      	ldrb	r0, [r4, #22]
 800f58c:	3304      	adds	r3, #4
 800f58e:	1b9b      	subs	r3, r3, r6
 800f590:	4442      	add	r2, r8
 800f592:	2104      	movs	r1, #4
 800f594:	f080 0001 	eor.w	r0, r0, #1
 800f598:	6123      	str	r3, [r4, #16]
 800f59a:	60a2      	str	r2, [r4, #8]
 800f59c:	7561      	strb	r1, [r4, #21]
 800f59e:	b002      	add	sp, #8
 800f5a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f5a4:	2104      	movs	r1, #4
 800f5a6:	4620      	mov	r0, r4
 800f5a8:	f000 fea2 	bl	80102f0 <ucdr_check_final_buffer_behavior>
 800f5ac:	b1d0      	cbz	r0, 800f5e4 <ucdr_serialize_uint32_t+0xd0>
 800f5ae:	7d23      	ldrb	r3, [r4, #20]
 800f5b0:	2b01      	cmp	r3, #1
 800f5b2:	68a3      	ldr	r3, [r4, #8]
 800f5b4:	d01c      	beq.n	800f5f0 <ucdr_serialize_uint32_t+0xdc>
 800f5b6:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800f5ba:	701a      	strb	r2, [r3, #0]
 800f5bc:	68a3      	ldr	r3, [r4, #8]
 800f5be:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800f5c2:	705a      	strb	r2, [r3, #1]
 800f5c4:	68a3      	ldr	r3, [r4, #8]
 800f5c6:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800f5ca:	709a      	strb	r2, [r3, #2]
 800f5cc:	68a3      	ldr	r3, [r4, #8]
 800f5ce:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800f5d2:	70da      	strb	r2, [r3, #3]
 800f5d4:	68a2      	ldr	r2, [r4, #8]
 800f5d6:	6923      	ldr	r3, [r4, #16]
 800f5d8:	3204      	adds	r2, #4
 800f5da:	3304      	adds	r3, #4
 800f5dc:	2104      	movs	r1, #4
 800f5de:	60a2      	str	r2, [r4, #8]
 800f5e0:	6123      	str	r3, [r4, #16]
 800f5e2:	7561      	strb	r1, [r4, #21]
 800f5e4:	7da0      	ldrb	r0, [r4, #22]
 800f5e6:	f080 0001 	eor.w	r0, r0, #1
 800f5ea:	b002      	add	sp, #8
 800f5ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f5f0:	9a01      	ldr	r2, [sp, #4]
 800f5f2:	601a      	str	r2, [r3, #0]
 800f5f4:	e7ee      	b.n	800f5d4 <ucdr_serialize_uint32_t+0xc0>
 800f5f6:	68a2      	ldr	r2, [r4, #8]
 800f5f8:	6923      	ldr	r3, [r4, #16]
 800f5fa:	7da0      	ldrb	r0, [r4, #22]
 800f5fc:	7567      	strb	r7, [r4, #21]
 800f5fe:	1b92      	subs	r2, r2, r6
 800f600:	1b9b      	subs	r3, r3, r6
 800f602:	f080 0001 	eor.w	r0, r0, #1
 800f606:	60a2      	str	r2, [r4, #8]
 800f608:	6123      	str	r3, [r4, #16]
 800f60a:	b002      	add	sp, #8
 800f60c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f610:	68a3      	ldr	r3, [r4, #8]
 800f612:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800f616:	701a      	strb	r2, [r3, #0]
 800f618:	68a3      	ldr	r3, [r4, #8]
 800f61a:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800f61e:	701a      	strb	r2, [r3, #0]
 800f620:	68a3      	ldr	r3, [r4, #8]
 800f622:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800f626:	701a      	strb	r2, [r3, #0]
 800f628:	e7ad      	b.n	800f586 <ucdr_serialize_uint32_t+0x72>
 800f62a:	4628      	mov	r0, r5
 800f62c:	ad01      	add	r5, sp, #4
 800f62e:	4629      	mov	r1, r5
 800f630:	4632      	mov	r2, r6
 800f632:	f00a fbce 	bl	8019dd2 <memcpy>
 800f636:	68a0      	ldr	r0, [r4, #8]
 800f638:	4642      	mov	r2, r8
 800f63a:	19a9      	adds	r1, r5, r6
 800f63c:	f00a fbc9 	bl	8019dd2 <memcpy>
 800f640:	e7a1      	b.n	800f586 <ucdr_serialize_uint32_t+0x72>
 800f642:	bf00      	nop

0800f644 <ucdr_serialize_endian_uint32_t>:
 800f644:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800f648:	b083      	sub	sp, #12
 800f64a:	460d      	mov	r5, r1
 800f64c:	2104      	movs	r1, #4
 800f64e:	4604      	mov	r4, r0
 800f650:	9201      	str	r2, [sp, #4]
 800f652:	f000 fe9f 	bl	8010394 <ucdr_buffer_alignment>
 800f656:	4601      	mov	r1, r0
 800f658:	4620      	mov	r0, r4
 800f65a:	f894 8015 	ldrb.w	r8, [r4, #21]
 800f65e:	f000 fedd 	bl	801041c <ucdr_advance_buffer>
 800f662:	4620      	mov	r0, r4
 800f664:	2104      	movs	r1, #4
 800f666:	f000 fe37 	bl	80102d8 <ucdr_check_buffer_available_for>
 800f66a:	2800      	cmp	r0, #0
 800f66c:	d138      	bne.n	800f6e0 <ucdr_serialize_endian_uint32_t+0x9c>
 800f66e:	e9d4 7601 	ldrd	r7, r6, [r4, #4]
 800f672:	42b7      	cmp	r7, r6
 800f674:	d92f      	bls.n	800f6d6 <ucdr_serialize_endian_uint32_t+0x92>
 800f676:	6922      	ldr	r2, [r4, #16]
 800f678:	60a7      	str	r7, [r4, #8]
 800f67a:	1bbf      	subs	r7, r7, r6
 800f67c:	443a      	add	r2, r7
 800f67e:	f1c7 0904 	rsb	r9, r7, #4
 800f682:	6122      	str	r2, [r4, #16]
 800f684:	4649      	mov	r1, r9
 800f686:	4620      	mov	r0, r4
 800f688:	f000 fe32 	bl	80102f0 <ucdr_check_final_buffer_behavior>
 800f68c:	2800      	cmp	r0, #0
 800f68e:	d04a      	beq.n	800f726 <ucdr_serialize_endian_uint32_t+0xe2>
 800f690:	2d01      	cmp	r5, #1
 800f692:	d063      	beq.n	800f75c <ucdr_serialize_endian_uint32_t+0x118>
 800f694:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800f698:	7033      	strb	r3, [r6, #0]
 800f69a:	2f00      	cmp	r7, #0
 800f69c:	d051      	beq.n	800f742 <ucdr_serialize_endian_uint32_t+0xfe>
 800f69e:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800f6a2:	7073      	strb	r3, [r6, #1]
 800f6a4:	2f01      	cmp	r7, #1
 800f6a6:	d050      	beq.n	800f74a <ucdr_serialize_endian_uint32_t+0x106>
 800f6a8:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800f6ac:	70b3      	strb	r3, [r6, #2]
 800f6ae:	2f02      	cmp	r7, #2
 800f6b0:	d04f      	beq.n	800f752 <ucdr_serialize_endian_uint32_t+0x10e>
 800f6b2:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800f6b6:	70f3      	strb	r3, [r6, #3]
 800f6b8:	6923      	ldr	r3, [r4, #16]
 800f6ba:	68a2      	ldr	r2, [r4, #8]
 800f6bc:	7da0      	ldrb	r0, [r4, #22]
 800f6be:	3304      	adds	r3, #4
 800f6c0:	1bdb      	subs	r3, r3, r7
 800f6c2:	444a      	add	r2, r9
 800f6c4:	2104      	movs	r1, #4
 800f6c6:	f080 0001 	eor.w	r0, r0, #1
 800f6ca:	6123      	str	r3, [r4, #16]
 800f6cc:	60a2      	str	r2, [r4, #8]
 800f6ce:	7561      	strb	r1, [r4, #21]
 800f6d0:	b003      	add	sp, #12
 800f6d2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800f6d6:	2104      	movs	r1, #4
 800f6d8:	4620      	mov	r0, r4
 800f6da:	f000 fe09 	bl	80102f0 <ucdr_check_final_buffer_behavior>
 800f6de:	b1c8      	cbz	r0, 800f714 <ucdr_serialize_endian_uint32_t+0xd0>
 800f6e0:	2d01      	cmp	r5, #1
 800f6e2:	68a3      	ldr	r3, [r4, #8]
 800f6e4:	d01c      	beq.n	800f720 <ucdr_serialize_endian_uint32_t+0xdc>
 800f6e6:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800f6ea:	701a      	strb	r2, [r3, #0]
 800f6ec:	68a3      	ldr	r3, [r4, #8]
 800f6ee:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800f6f2:	705a      	strb	r2, [r3, #1]
 800f6f4:	68a3      	ldr	r3, [r4, #8]
 800f6f6:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800f6fa:	709a      	strb	r2, [r3, #2]
 800f6fc:	68a3      	ldr	r3, [r4, #8]
 800f6fe:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800f702:	70da      	strb	r2, [r3, #3]
 800f704:	68a2      	ldr	r2, [r4, #8]
 800f706:	6923      	ldr	r3, [r4, #16]
 800f708:	3204      	adds	r2, #4
 800f70a:	3304      	adds	r3, #4
 800f70c:	2104      	movs	r1, #4
 800f70e:	60a2      	str	r2, [r4, #8]
 800f710:	6123      	str	r3, [r4, #16]
 800f712:	7561      	strb	r1, [r4, #21]
 800f714:	7da0      	ldrb	r0, [r4, #22]
 800f716:	f080 0001 	eor.w	r0, r0, #1
 800f71a:	b003      	add	sp, #12
 800f71c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800f720:	9a01      	ldr	r2, [sp, #4]
 800f722:	601a      	str	r2, [r3, #0]
 800f724:	e7ee      	b.n	800f704 <ucdr_serialize_endian_uint32_t+0xc0>
 800f726:	68a2      	ldr	r2, [r4, #8]
 800f728:	6923      	ldr	r3, [r4, #16]
 800f72a:	7da0      	ldrb	r0, [r4, #22]
 800f72c:	f884 8015 	strb.w	r8, [r4, #21]
 800f730:	1bd2      	subs	r2, r2, r7
 800f732:	1bdb      	subs	r3, r3, r7
 800f734:	f080 0001 	eor.w	r0, r0, #1
 800f738:	60a2      	str	r2, [r4, #8]
 800f73a:	6123      	str	r3, [r4, #16]
 800f73c:	b003      	add	sp, #12
 800f73e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800f742:	68a3      	ldr	r3, [r4, #8]
 800f744:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800f748:	701a      	strb	r2, [r3, #0]
 800f74a:	68a3      	ldr	r3, [r4, #8]
 800f74c:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800f750:	701a      	strb	r2, [r3, #0]
 800f752:	68a3      	ldr	r3, [r4, #8]
 800f754:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800f758:	701a      	strb	r2, [r3, #0]
 800f75a:	e7ad      	b.n	800f6b8 <ucdr_serialize_endian_uint32_t+0x74>
 800f75c:	ad01      	add	r5, sp, #4
 800f75e:	4629      	mov	r1, r5
 800f760:	463a      	mov	r2, r7
 800f762:	4630      	mov	r0, r6
 800f764:	f00a fb35 	bl	8019dd2 <memcpy>
 800f768:	68a0      	ldr	r0, [r4, #8]
 800f76a:	464a      	mov	r2, r9
 800f76c:	19e9      	adds	r1, r5, r7
 800f76e:	f00a fb30 	bl	8019dd2 <memcpy>
 800f772:	e7a1      	b.n	800f6b8 <ucdr_serialize_endian_uint32_t+0x74>

0800f774 <ucdr_deserialize_uint32_t>:
 800f774:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f778:	460d      	mov	r5, r1
 800f77a:	2104      	movs	r1, #4
 800f77c:	4604      	mov	r4, r0
 800f77e:	f000 fe09 	bl	8010394 <ucdr_buffer_alignment>
 800f782:	4601      	mov	r1, r0
 800f784:	4620      	mov	r0, r4
 800f786:	f894 8015 	ldrb.w	r8, [r4, #21]
 800f78a:	f000 fe47 	bl	801041c <ucdr_advance_buffer>
 800f78e:	4620      	mov	r0, r4
 800f790:	2104      	movs	r1, #4
 800f792:	f000 fda1 	bl	80102d8 <ucdr_check_buffer_available_for>
 800f796:	2800      	cmp	r0, #0
 800f798:	d138      	bne.n	800f80c <ucdr_deserialize_uint32_t+0x98>
 800f79a:	e9d4 7601 	ldrd	r7, r6, [r4, #4]
 800f79e:	42b7      	cmp	r7, r6
 800f7a0:	d92f      	bls.n	800f802 <ucdr_deserialize_uint32_t+0x8e>
 800f7a2:	6922      	ldr	r2, [r4, #16]
 800f7a4:	60a7      	str	r7, [r4, #8]
 800f7a6:	1bbf      	subs	r7, r7, r6
 800f7a8:	443a      	add	r2, r7
 800f7aa:	f1c7 0904 	rsb	r9, r7, #4
 800f7ae:	6122      	str	r2, [r4, #16]
 800f7b0:	4649      	mov	r1, r9
 800f7b2:	4620      	mov	r0, r4
 800f7b4:	f000 fd9c 	bl	80102f0 <ucdr_check_final_buffer_behavior>
 800f7b8:	2800      	cmp	r0, #0
 800f7ba:	d046      	beq.n	800f84a <ucdr_deserialize_uint32_t+0xd6>
 800f7bc:	7d23      	ldrb	r3, [r4, #20]
 800f7be:	2b01      	cmp	r3, #1
 800f7c0:	d05c      	beq.n	800f87c <ucdr_deserialize_uint32_t+0x108>
 800f7c2:	78f3      	ldrb	r3, [r6, #3]
 800f7c4:	702b      	strb	r3, [r5, #0]
 800f7c6:	2f00      	cmp	r7, #0
 800f7c8:	d04c      	beq.n	800f864 <ucdr_deserialize_uint32_t+0xf0>
 800f7ca:	78b3      	ldrb	r3, [r6, #2]
 800f7cc:	706b      	strb	r3, [r5, #1]
 800f7ce:	2f01      	cmp	r7, #1
 800f7d0:	f105 0302 	add.w	r3, r5, #2
 800f7d4:	d04a      	beq.n	800f86c <ucdr_deserialize_uint32_t+0xf8>
 800f7d6:	7873      	ldrb	r3, [r6, #1]
 800f7d8:	70ab      	strb	r3, [r5, #2]
 800f7da:	2f02      	cmp	r7, #2
 800f7dc:	f105 0303 	add.w	r3, r5, #3
 800f7e0:	d048      	beq.n	800f874 <ucdr_deserialize_uint32_t+0x100>
 800f7e2:	7833      	ldrb	r3, [r6, #0]
 800f7e4:	70eb      	strb	r3, [r5, #3]
 800f7e6:	6923      	ldr	r3, [r4, #16]
 800f7e8:	68a2      	ldr	r2, [r4, #8]
 800f7ea:	7da0      	ldrb	r0, [r4, #22]
 800f7ec:	2104      	movs	r1, #4
 800f7ee:	3304      	adds	r3, #4
 800f7f0:	1bdb      	subs	r3, r3, r7
 800f7f2:	444a      	add	r2, r9
 800f7f4:	7561      	strb	r1, [r4, #21]
 800f7f6:	6123      	str	r3, [r4, #16]
 800f7f8:	60a2      	str	r2, [r4, #8]
 800f7fa:	f080 0001 	eor.w	r0, r0, #1
 800f7fe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f802:	2104      	movs	r1, #4
 800f804:	4620      	mov	r0, r4
 800f806:	f000 fd73 	bl	80102f0 <ucdr_check_final_buffer_behavior>
 800f80a:	b1b0      	cbz	r0, 800f83a <ucdr_deserialize_uint32_t+0xc6>
 800f80c:	7d23      	ldrb	r3, [r4, #20]
 800f80e:	2b01      	cmp	r3, #1
 800f810:	68a3      	ldr	r3, [r4, #8]
 800f812:	d017      	beq.n	800f844 <ucdr_deserialize_uint32_t+0xd0>
 800f814:	78db      	ldrb	r3, [r3, #3]
 800f816:	702b      	strb	r3, [r5, #0]
 800f818:	68a3      	ldr	r3, [r4, #8]
 800f81a:	789b      	ldrb	r3, [r3, #2]
 800f81c:	706b      	strb	r3, [r5, #1]
 800f81e:	68a3      	ldr	r3, [r4, #8]
 800f820:	785b      	ldrb	r3, [r3, #1]
 800f822:	70ab      	strb	r3, [r5, #2]
 800f824:	68a3      	ldr	r3, [r4, #8]
 800f826:	781b      	ldrb	r3, [r3, #0]
 800f828:	70eb      	strb	r3, [r5, #3]
 800f82a:	68a2      	ldr	r2, [r4, #8]
 800f82c:	6923      	ldr	r3, [r4, #16]
 800f82e:	3204      	adds	r2, #4
 800f830:	3304      	adds	r3, #4
 800f832:	2104      	movs	r1, #4
 800f834:	60a2      	str	r2, [r4, #8]
 800f836:	6123      	str	r3, [r4, #16]
 800f838:	7561      	strb	r1, [r4, #21]
 800f83a:	7da0      	ldrb	r0, [r4, #22]
 800f83c:	f080 0001 	eor.w	r0, r0, #1
 800f840:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f844:	681b      	ldr	r3, [r3, #0]
 800f846:	602b      	str	r3, [r5, #0]
 800f848:	e7ef      	b.n	800f82a <ucdr_deserialize_uint32_t+0xb6>
 800f84a:	68a2      	ldr	r2, [r4, #8]
 800f84c:	6923      	ldr	r3, [r4, #16]
 800f84e:	7da0      	ldrb	r0, [r4, #22]
 800f850:	f884 8015 	strb.w	r8, [r4, #21]
 800f854:	1bd2      	subs	r2, r2, r7
 800f856:	1bdb      	subs	r3, r3, r7
 800f858:	60a2      	str	r2, [r4, #8]
 800f85a:	6123      	str	r3, [r4, #16]
 800f85c:	f080 0001 	eor.w	r0, r0, #1
 800f860:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f864:	68a3      	ldr	r3, [r4, #8]
 800f866:	789b      	ldrb	r3, [r3, #2]
 800f868:	706b      	strb	r3, [r5, #1]
 800f86a:	1cab      	adds	r3, r5, #2
 800f86c:	68a2      	ldr	r2, [r4, #8]
 800f86e:	7852      	ldrb	r2, [r2, #1]
 800f870:	f803 2b01 	strb.w	r2, [r3], #1
 800f874:	68a2      	ldr	r2, [r4, #8]
 800f876:	7812      	ldrb	r2, [r2, #0]
 800f878:	701a      	strb	r2, [r3, #0]
 800f87a:	e7b4      	b.n	800f7e6 <ucdr_deserialize_uint32_t+0x72>
 800f87c:	4631      	mov	r1, r6
 800f87e:	463a      	mov	r2, r7
 800f880:	4628      	mov	r0, r5
 800f882:	f00a faa6 	bl	8019dd2 <memcpy>
 800f886:	68a1      	ldr	r1, [r4, #8]
 800f888:	464a      	mov	r2, r9
 800f88a:	19e8      	adds	r0, r5, r7
 800f88c:	f00a faa1 	bl	8019dd2 <memcpy>
 800f890:	e7a9      	b.n	800f7e6 <ucdr_deserialize_uint32_t+0x72>
 800f892:	bf00      	nop

0800f894 <ucdr_deserialize_endian_uint32_t>:
 800f894:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f898:	460e      	mov	r6, r1
 800f89a:	2104      	movs	r1, #4
 800f89c:	4604      	mov	r4, r0
 800f89e:	4615      	mov	r5, r2
 800f8a0:	f000 fd78 	bl	8010394 <ucdr_buffer_alignment>
 800f8a4:	4601      	mov	r1, r0
 800f8a6:	4620      	mov	r0, r4
 800f8a8:	f894 9015 	ldrb.w	r9, [r4, #21]
 800f8ac:	f000 fdb6 	bl	801041c <ucdr_advance_buffer>
 800f8b0:	4620      	mov	r0, r4
 800f8b2:	2104      	movs	r1, #4
 800f8b4:	f000 fd10 	bl	80102d8 <ucdr_check_buffer_available_for>
 800f8b8:	2800      	cmp	r0, #0
 800f8ba:	d13c      	bne.n	800f936 <ucdr_deserialize_endian_uint32_t+0xa2>
 800f8bc:	e9d4 3701 	ldrd	r3, r7, [r4, #4]
 800f8c0:	42bb      	cmp	r3, r7
 800f8c2:	d933      	bls.n	800f92c <ucdr_deserialize_endian_uint32_t+0x98>
 800f8c4:	6922      	ldr	r2, [r4, #16]
 800f8c6:	60a3      	str	r3, [r4, #8]
 800f8c8:	eba3 0807 	sub.w	r8, r3, r7
 800f8cc:	4442      	add	r2, r8
 800f8ce:	f1c8 0a04 	rsb	sl, r8, #4
 800f8d2:	6122      	str	r2, [r4, #16]
 800f8d4:	4651      	mov	r1, sl
 800f8d6:	4620      	mov	r0, r4
 800f8d8:	f000 fd0a 	bl	80102f0 <ucdr_check_final_buffer_behavior>
 800f8dc:	2800      	cmp	r0, #0
 800f8de:	d048      	beq.n	800f972 <ucdr_deserialize_endian_uint32_t+0xde>
 800f8e0:	2e01      	cmp	r6, #1
 800f8e2:	d061      	beq.n	800f9a8 <ucdr_deserialize_endian_uint32_t+0x114>
 800f8e4:	78fb      	ldrb	r3, [r7, #3]
 800f8e6:	702b      	strb	r3, [r5, #0]
 800f8e8:	f1b8 0f00 	cmp.w	r8, #0
 800f8ec:	d050      	beq.n	800f990 <ucdr_deserialize_endian_uint32_t+0xfc>
 800f8ee:	78bb      	ldrb	r3, [r7, #2]
 800f8f0:	706b      	strb	r3, [r5, #1]
 800f8f2:	f1b8 0f01 	cmp.w	r8, #1
 800f8f6:	f105 0302 	add.w	r3, r5, #2
 800f8fa:	d04d      	beq.n	800f998 <ucdr_deserialize_endian_uint32_t+0x104>
 800f8fc:	787b      	ldrb	r3, [r7, #1]
 800f8fe:	70ab      	strb	r3, [r5, #2]
 800f900:	f1b8 0f02 	cmp.w	r8, #2
 800f904:	f105 0303 	add.w	r3, r5, #3
 800f908:	d04a      	beq.n	800f9a0 <ucdr_deserialize_endian_uint32_t+0x10c>
 800f90a:	783b      	ldrb	r3, [r7, #0]
 800f90c:	70eb      	strb	r3, [r5, #3]
 800f90e:	6923      	ldr	r3, [r4, #16]
 800f910:	68a2      	ldr	r2, [r4, #8]
 800f912:	7da0      	ldrb	r0, [r4, #22]
 800f914:	2104      	movs	r1, #4
 800f916:	3304      	adds	r3, #4
 800f918:	eba3 0308 	sub.w	r3, r3, r8
 800f91c:	4452      	add	r2, sl
 800f91e:	7561      	strb	r1, [r4, #21]
 800f920:	6123      	str	r3, [r4, #16]
 800f922:	60a2      	str	r2, [r4, #8]
 800f924:	f080 0001 	eor.w	r0, r0, #1
 800f928:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f92c:	2104      	movs	r1, #4
 800f92e:	4620      	mov	r0, r4
 800f930:	f000 fcde 	bl	80102f0 <ucdr_check_final_buffer_behavior>
 800f934:	b1a8      	cbz	r0, 800f962 <ucdr_deserialize_endian_uint32_t+0xce>
 800f936:	2e01      	cmp	r6, #1
 800f938:	68a3      	ldr	r3, [r4, #8]
 800f93a:	d017      	beq.n	800f96c <ucdr_deserialize_endian_uint32_t+0xd8>
 800f93c:	78db      	ldrb	r3, [r3, #3]
 800f93e:	702b      	strb	r3, [r5, #0]
 800f940:	68a3      	ldr	r3, [r4, #8]
 800f942:	789b      	ldrb	r3, [r3, #2]
 800f944:	706b      	strb	r3, [r5, #1]
 800f946:	68a3      	ldr	r3, [r4, #8]
 800f948:	785b      	ldrb	r3, [r3, #1]
 800f94a:	70ab      	strb	r3, [r5, #2]
 800f94c:	68a3      	ldr	r3, [r4, #8]
 800f94e:	781b      	ldrb	r3, [r3, #0]
 800f950:	70eb      	strb	r3, [r5, #3]
 800f952:	68a2      	ldr	r2, [r4, #8]
 800f954:	6923      	ldr	r3, [r4, #16]
 800f956:	3204      	adds	r2, #4
 800f958:	3304      	adds	r3, #4
 800f95a:	2104      	movs	r1, #4
 800f95c:	60a2      	str	r2, [r4, #8]
 800f95e:	6123      	str	r3, [r4, #16]
 800f960:	7561      	strb	r1, [r4, #21]
 800f962:	7da0      	ldrb	r0, [r4, #22]
 800f964:	f080 0001 	eor.w	r0, r0, #1
 800f968:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f96c:	681b      	ldr	r3, [r3, #0]
 800f96e:	602b      	str	r3, [r5, #0]
 800f970:	e7ef      	b.n	800f952 <ucdr_deserialize_endian_uint32_t+0xbe>
 800f972:	68a2      	ldr	r2, [r4, #8]
 800f974:	6923      	ldr	r3, [r4, #16]
 800f976:	7da0      	ldrb	r0, [r4, #22]
 800f978:	f884 9015 	strb.w	r9, [r4, #21]
 800f97c:	eba2 0208 	sub.w	r2, r2, r8
 800f980:	eba3 0308 	sub.w	r3, r3, r8
 800f984:	60a2      	str	r2, [r4, #8]
 800f986:	6123      	str	r3, [r4, #16]
 800f988:	f080 0001 	eor.w	r0, r0, #1
 800f98c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f990:	68a3      	ldr	r3, [r4, #8]
 800f992:	789b      	ldrb	r3, [r3, #2]
 800f994:	706b      	strb	r3, [r5, #1]
 800f996:	1cab      	adds	r3, r5, #2
 800f998:	68a2      	ldr	r2, [r4, #8]
 800f99a:	7852      	ldrb	r2, [r2, #1]
 800f99c:	f803 2b01 	strb.w	r2, [r3], #1
 800f9a0:	68a2      	ldr	r2, [r4, #8]
 800f9a2:	7812      	ldrb	r2, [r2, #0]
 800f9a4:	701a      	strb	r2, [r3, #0]
 800f9a6:	e7b2      	b.n	800f90e <ucdr_deserialize_endian_uint32_t+0x7a>
 800f9a8:	4639      	mov	r1, r7
 800f9aa:	4642      	mov	r2, r8
 800f9ac:	4628      	mov	r0, r5
 800f9ae:	f00a fa10 	bl	8019dd2 <memcpy>
 800f9b2:	68a1      	ldr	r1, [r4, #8]
 800f9b4:	4652      	mov	r2, sl
 800f9b6:	eb05 0008 	add.w	r0, r5, r8
 800f9ba:	f00a fa0a 	bl	8019dd2 <memcpy>
 800f9be:	e7a6      	b.n	800f90e <ucdr_deserialize_endian_uint32_t+0x7a>

0800f9c0 <ucdr_serialize_uint64_t>:
 800f9c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f9c4:	2108      	movs	r1, #8
 800f9c6:	b082      	sub	sp, #8
 800f9c8:	4604      	mov	r4, r0
 800f9ca:	e9cd 2300 	strd	r2, r3, [sp]
 800f9ce:	f000 fce1 	bl	8010394 <ucdr_buffer_alignment>
 800f9d2:	4601      	mov	r1, r0
 800f9d4:	4620      	mov	r0, r4
 800f9d6:	7d67      	ldrb	r7, [r4, #21]
 800f9d8:	f000 fd20 	bl	801041c <ucdr_advance_buffer>
 800f9dc:	4620      	mov	r0, r4
 800f9de:	2108      	movs	r1, #8
 800f9e0:	f000 fc7a 	bl	80102d8 <ucdr_check_buffer_available_for>
 800f9e4:	2800      	cmp	r0, #0
 800f9e6:	d14e      	bne.n	800fa86 <ucdr_serialize_uint64_t+0xc6>
 800f9e8:	e9d4 5601 	ldrd	r5, r6, [r4, #4]
 800f9ec:	42b5      	cmp	r5, r6
 800f9ee:	d945      	bls.n	800fa7c <ucdr_serialize_uint64_t+0xbc>
 800f9f0:	6923      	ldr	r3, [r4, #16]
 800f9f2:	60a5      	str	r5, [r4, #8]
 800f9f4:	1bad      	subs	r5, r5, r6
 800f9f6:	442b      	add	r3, r5
 800f9f8:	f1c5 0808 	rsb	r8, r5, #8
 800f9fc:	6123      	str	r3, [r4, #16]
 800f9fe:	4641      	mov	r1, r8
 800fa00:	4620      	mov	r0, r4
 800fa02:	f000 fc75 	bl	80102f0 <ucdr_check_final_buffer_behavior>
 800fa06:	2800      	cmp	r0, #0
 800fa08:	d074      	beq.n	800faf4 <ucdr_serialize_uint64_t+0x134>
 800fa0a:	7d23      	ldrb	r3, [r4, #20]
 800fa0c:	2b01      	cmp	r3, #1
 800fa0e:	f000 809b 	beq.w	800fb48 <ucdr_serialize_uint64_t+0x188>
 800fa12:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800fa16:	7033      	strb	r3, [r6, #0]
 800fa18:	2d00      	cmp	r5, #0
 800fa1a:	d078      	beq.n	800fb0e <ucdr_serialize_uint64_t+0x14e>
 800fa1c:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800fa20:	7073      	strb	r3, [r6, #1]
 800fa22:	2d01      	cmp	r5, #1
 800fa24:	d077      	beq.n	800fb16 <ucdr_serialize_uint64_t+0x156>
 800fa26:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800fa2a:	70b3      	strb	r3, [r6, #2]
 800fa2c:	2d02      	cmp	r5, #2
 800fa2e:	d076      	beq.n	800fb1e <ucdr_serialize_uint64_t+0x15e>
 800fa30:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800fa34:	70f3      	strb	r3, [r6, #3]
 800fa36:	2d03      	cmp	r5, #3
 800fa38:	d075      	beq.n	800fb26 <ucdr_serialize_uint64_t+0x166>
 800fa3a:	f89d 3003 	ldrb.w	r3, [sp, #3]
 800fa3e:	7133      	strb	r3, [r6, #4]
 800fa40:	2d04      	cmp	r5, #4
 800fa42:	d074      	beq.n	800fb2e <ucdr_serialize_uint64_t+0x16e>
 800fa44:	f89d 3002 	ldrb.w	r3, [sp, #2]
 800fa48:	7173      	strb	r3, [r6, #5]
 800fa4a:	2d05      	cmp	r5, #5
 800fa4c:	d073      	beq.n	800fb36 <ucdr_serialize_uint64_t+0x176>
 800fa4e:	f89d 3001 	ldrb.w	r3, [sp, #1]
 800fa52:	71b3      	strb	r3, [r6, #6]
 800fa54:	2d06      	cmp	r5, #6
 800fa56:	d072      	beq.n	800fb3e <ucdr_serialize_uint64_t+0x17e>
 800fa58:	f89d 3000 	ldrb.w	r3, [sp]
 800fa5c:	71f3      	strb	r3, [r6, #7]
 800fa5e:	6923      	ldr	r3, [r4, #16]
 800fa60:	68a2      	ldr	r2, [r4, #8]
 800fa62:	7da0      	ldrb	r0, [r4, #22]
 800fa64:	3308      	adds	r3, #8
 800fa66:	1b5d      	subs	r5, r3, r5
 800fa68:	4442      	add	r2, r8
 800fa6a:	2308      	movs	r3, #8
 800fa6c:	f080 0001 	eor.w	r0, r0, #1
 800fa70:	6125      	str	r5, [r4, #16]
 800fa72:	60a2      	str	r2, [r4, #8]
 800fa74:	7563      	strb	r3, [r4, #21]
 800fa76:	b002      	add	sp, #8
 800fa78:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fa7c:	2108      	movs	r1, #8
 800fa7e:	4620      	mov	r0, r4
 800fa80:	f000 fc36 	bl	80102f0 <ucdr_check_final_buffer_behavior>
 800fa84:	b350      	cbz	r0, 800fadc <ucdr_serialize_uint64_t+0x11c>
 800fa86:	7d23      	ldrb	r3, [r4, #20]
 800fa88:	2b01      	cmp	r3, #1
 800fa8a:	d02d      	beq.n	800fae8 <ucdr_serialize_uint64_t+0x128>
 800fa8c:	68a3      	ldr	r3, [r4, #8]
 800fa8e:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800fa92:	701a      	strb	r2, [r3, #0]
 800fa94:	68a3      	ldr	r3, [r4, #8]
 800fa96:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800fa9a:	705a      	strb	r2, [r3, #1]
 800fa9c:	68a3      	ldr	r3, [r4, #8]
 800fa9e:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800faa2:	709a      	strb	r2, [r3, #2]
 800faa4:	68a3      	ldr	r3, [r4, #8]
 800faa6:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800faaa:	70da      	strb	r2, [r3, #3]
 800faac:	68a3      	ldr	r3, [r4, #8]
 800faae:	f89d 2003 	ldrb.w	r2, [sp, #3]
 800fab2:	711a      	strb	r2, [r3, #4]
 800fab4:	68a3      	ldr	r3, [r4, #8]
 800fab6:	f89d 2002 	ldrb.w	r2, [sp, #2]
 800faba:	715a      	strb	r2, [r3, #5]
 800fabc:	68a3      	ldr	r3, [r4, #8]
 800fabe:	f89d 2001 	ldrb.w	r2, [sp, #1]
 800fac2:	719a      	strb	r2, [r3, #6]
 800fac4:	68a3      	ldr	r3, [r4, #8]
 800fac6:	f89d 2000 	ldrb.w	r2, [sp]
 800faca:	71da      	strb	r2, [r3, #7]
 800facc:	68a2      	ldr	r2, [r4, #8]
 800face:	6923      	ldr	r3, [r4, #16]
 800fad0:	3208      	adds	r2, #8
 800fad2:	3308      	adds	r3, #8
 800fad4:	2108      	movs	r1, #8
 800fad6:	60a2      	str	r2, [r4, #8]
 800fad8:	6123      	str	r3, [r4, #16]
 800fada:	7561      	strb	r1, [r4, #21]
 800fadc:	7da0      	ldrb	r0, [r4, #22]
 800fade:	f080 0001 	eor.w	r0, r0, #1
 800fae2:	b002      	add	sp, #8
 800fae4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fae8:	466b      	mov	r3, sp
 800faea:	cb03      	ldmia	r3!, {r0, r1}
 800faec:	68a3      	ldr	r3, [r4, #8]
 800faee:	6018      	str	r0, [r3, #0]
 800faf0:	6059      	str	r1, [r3, #4]
 800faf2:	e7eb      	b.n	800facc <ucdr_serialize_uint64_t+0x10c>
 800faf4:	68a2      	ldr	r2, [r4, #8]
 800faf6:	6923      	ldr	r3, [r4, #16]
 800faf8:	7da0      	ldrb	r0, [r4, #22]
 800fafa:	7567      	strb	r7, [r4, #21]
 800fafc:	1b52      	subs	r2, r2, r5
 800fafe:	f080 0001 	eor.w	r0, r0, #1
 800fb02:	1b5d      	subs	r5, r3, r5
 800fb04:	60a2      	str	r2, [r4, #8]
 800fb06:	6125      	str	r5, [r4, #16]
 800fb08:	b002      	add	sp, #8
 800fb0a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fb0e:	68a3      	ldr	r3, [r4, #8]
 800fb10:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800fb14:	701a      	strb	r2, [r3, #0]
 800fb16:	68a3      	ldr	r3, [r4, #8]
 800fb18:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800fb1c:	701a      	strb	r2, [r3, #0]
 800fb1e:	68a3      	ldr	r3, [r4, #8]
 800fb20:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800fb24:	701a      	strb	r2, [r3, #0]
 800fb26:	68a3      	ldr	r3, [r4, #8]
 800fb28:	f89d 2003 	ldrb.w	r2, [sp, #3]
 800fb2c:	701a      	strb	r2, [r3, #0]
 800fb2e:	68a3      	ldr	r3, [r4, #8]
 800fb30:	f89d 2002 	ldrb.w	r2, [sp, #2]
 800fb34:	701a      	strb	r2, [r3, #0]
 800fb36:	68a3      	ldr	r3, [r4, #8]
 800fb38:	f89d 2001 	ldrb.w	r2, [sp, #1]
 800fb3c:	701a      	strb	r2, [r3, #0]
 800fb3e:	68a3      	ldr	r3, [r4, #8]
 800fb40:	f89d 2000 	ldrb.w	r2, [sp]
 800fb44:	701a      	strb	r2, [r3, #0]
 800fb46:	e78a      	b.n	800fa5e <ucdr_serialize_uint64_t+0x9e>
 800fb48:	4630      	mov	r0, r6
 800fb4a:	466e      	mov	r6, sp
 800fb4c:	4631      	mov	r1, r6
 800fb4e:	462a      	mov	r2, r5
 800fb50:	f00a f93f 	bl	8019dd2 <memcpy>
 800fb54:	68a0      	ldr	r0, [r4, #8]
 800fb56:	4642      	mov	r2, r8
 800fb58:	1971      	adds	r1, r6, r5
 800fb5a:	f00a f93a 	bl	8019dd2 <memcpy>
 800fb5e:	e77e      	b.n	800fa5e <ucdr_serialize_uint64_t+0x9e>

0800fb60 <ucdr_serialize_int16_t>:
 800fb60:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fb64:	b082      	sub	sp, #8
 800fb66:	460b      	mov	r3, r1
 800fb68:	2102      	movs	r1, #2
 800fb6a:	4604      	mov	r4, r0
 800fb6c:	f8ad 3006 	strh.w	r3, [sp, #6]
 800fb70:	f000 fc10 	bl	8010394 <ucdr_buffer_alignment>
 800fb74:	4601      	mov	r1, r0
 800fb76:	4620      	mov	r0, r4
 800fb78:	7d67      	ldrb	r7, [r4, #21]
 800fb7a:	f000 fc4f 	bl	801041c <ucdr_advance_buffer>
 800fb7e:	4620      	mov	r0, r4
 800fb80:	2102      	movs	r1, #2
 800fb82:	f000 fba9 	bl	80102d8 <ucdr_check_buffer_available_for>
 800fb86:	bb78      	cbnz	r0, 800fbe8 <ucdr_serialize_int16_t+0x88>
 800fb88:	e9d4 5601 	ldrd	r5, r6, [r4, #4]
 800fb8c:	42b5      	cmp	r5, r6
 800fb8e:	d926      	bls.n	800fbde <ucdr_serialize_int16_t+0x7e>
 800fb90:	6922      	ldr	r2, [r4, #16]
 800fb92:	60a5      	str	r5, [r4, #8]
 800fb94:	1bad      	subs	r5, r5, r6
 800fb96:	442a      	add	r2, r5
 800fb98:	f1c5 0802 	rsb	r8, r5, #2
 800fb9c:	6122      	str	r2, [r4, #16]
 800fb9e:	4641      	mov	r1, r8
 800fba0:	4620      	mov	r0, r4
 800fba2:	f000 fba5 	bl	80102f0 <ucdr_check_final_buffer_behavior>
 800fba6:	2800      	cmp	r0, #0
 800fba8:	d03b      	beq.n	800fc22 <ucdr_serialize_int16_t+0xc2>
 800fbaa:	7d23      	ldrb	r3, [r4, #20]
 800fbac:	2b01      	cmp	r3, #1
 800fbae:	d04a      	beq.n	800fc46 <ucdr_serialize_int16_t+0xe6>
 800fbb0:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800fbb4:	7033      	strb	r3, [r6, #0]
 800fbb6:	2d00      	cmp	r5, #0
 800fbb8:	d040      	beq.n	800fc3c <ucdr_serialize_int16_t+0xdc>
 800fbba:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800fbbe:	7073      	strb	r3, [r6, #1]
 800fbc0:	6923      	ldr	r3, [r4, #16]
 800fbc2:	68a2      	ldr	r2, [r4, #8]
 800fbc4:	7da0      	ldrb	r0, [r4, #22]
 800fbc6:	3302      	adds	r3, #2
 800fbc8:	1b5b      	subs	r3, r3, r5
 800fbca:	4442      	add	r2, r8
 800fbcc:	2102      	movs	r1, #2
 800fbce:	f080 0001 	eor.w	r0, r0, #1
 800fbd2:	6123      	str	r3, [r4, #16]
 800fbd4:	60a2      	str	r2, [r4, #8]
 800fbd6:	7561      	strb	r1, [r4, #21]
 800fbd8:	b002      	add	sp, #8
 800fbda:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fbde:	2102      	movs	r1, #2
 800fbe0:	4620      	mov	r0, r4
 800fbe2:	f000 fb85 	bl	80102f0 <ucdr_check_final_buffer_behavior>
 800fbe6:	b190      	cbz	r0, 800fc0e <ucdr_serialize_int16_t+0xae>
 800fbe8:	7d23      	ldrb	r3, [r4, #20]
 800fbea:	2b01      	cmp	r3, #1
 800fbec:	68a3      	ldr	r3, [r4, #8]
 800fbee:	d014      	beq.n	800fc1a <ucdr_serialize_int16_t+0xba>
 800fbf0:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800fbf4:	701a      	strb	r2, [r3, #0]
 800fbf6:	68a3      	ldr	r3, [r4, #8]
 800fbf8:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800fbfc:	705a      	strb	r2, [r3, #1]
 800fbfe:	68a2      	ldr	r2, [r4, #8]
 800fc00:	6923      	ldr	r3, [r4, #16]
 800fc02:	3202      	adds	r2, #2
 800fc04:	3302      	adds	r3, #2
 800fc06:	2102      	movs	r1, #2
 800fc08:	60a2      	str	r2, [r4, #8]
 800fc0a:	6123      	str	r3, [r4, #16]
 800fc0c:	7561      	strb	r1, [r4, #21]
 800fc0e:	7da0      	ldrb	r0, [r4, #22]
 800fc10:	f080 0001 	eor.w	r0, r0, #1
 800fc14:	b002      	add	sp, #8
 800fc16:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fc1a:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 800fc1e:	801a      	strh	r2, [r3, #0]
 800fc20:	e7ed      	b.n	800fbfe <ucdr_serialize_int16_t+0x9e>
 800fc22:	68a2      	ldr	r2, [r4, #8]
 800fc24:	6923      	ldr	r3, [r4, #16]
 800fc26:	7da0      	ldrb	r0, [r4, #22]
 800fc28:	7567      	strb	r7, [r4, #21]
 800fc2a:	1b52      	subs	r2, r2, r5
 800fc2c:	1b5b      	subs	r3, r3, r5
 800fc2e:	f080 0001 	eor.w	r0, r0, #1
 800fc32:	60a2      	str	r2, [r4, #8]
 800fc34:	6123      	str	r3, [r4, #16]
 800fc36:	b002      	add	sp, #8
 800fc38:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fc3c:	68a3      	ldr	r3, [r4, #8]
 800fc3e:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800fc42:	701a      	strb	r2, [r3, #0]
 800fc44:	e7bc      	b.n	800fbc0 <ucdr_serialize_int16_t+0x60>
 800fc46:	4630      	mov	r0, r6
 800fc48:	f10d 0606 	add.w	r6, sp, #6
 800fc4c:	4631      	mov	r1, r6
 800fc4e:	462a      	mov	r2, r5
 800fc50:	f00a f8bf 	bl	8019dd2 <memcpy>
 800fc54:	68a0      	ldr	r0, [r4, #8]
 800fc56:	4642      	mov	r2, r8
 800fc58:	1971      	adds	r1, r6, r5
 800fc5a:	f00a f8ba 	bl	8019dd2 <memcpy>
 800fc5e:	e7af      	b.n	800fbc0 <ucdr_serialize_int16_t+0x60>

0800fc60 <ucdr_deserialize_int16_t>:
 800fc60:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800fc64:	460d      	mov	r5, r1
 800fc66:	2102      	movs	r1, #2
 800fc68:	4604      	mov	r4, r0
 800fc6a:	f000 fb93 	bl	8010394 <ucdr_buffer_alignment>
 800fc6e:	4601      	mov	r1, r0
 800fc70:	4620      	mov	r0, r4
 800fc72:	f894 8015 	ldrb.w	r8, [r4, #21]
 800fc76:	f000 fbd1 	bl	801041c <ucdr_advance_buffer>
 800fc7a:	4620      	mov	r0, r4
 800fc7c:	2102      	movs	r1, #2
 800fc7e:	f000 fb2b 	bl	80102d8 <ucdr_check_buffer_available_for>
 800fc82:	bb60      	cbnz	r0, 800fcde <ucdr_deserialize_int16_t+0x7e>
 800fc84:	e9d4 6701 	ldrd	r6, r7, [r4, #4]
 800fc88:	42be      	cmp	r6, r7
 800fc8a:	d923      	bls.n	800fcd4 <ucdr_deserialize_int16_t+0x74>
 800fc8c:	6922      	ldr	r2, [r4, #16]
 800fc8e:	60a6      	str	r6, [r4, #8]
 800fc90:	1bf6      	subs	r6, r6, r7
 800fc92:	4432      	add	r2, r6
 800fc94:	f1c6 0902 	rsb	r9, r6, #2
 800fc98:	6122      	str	r2, [r4, #16]
 800fc9a:	4649      	mov	r1, r9
 800fc9c:	4620      	mov	r0, r4
 800fc9e:	f000 fb27 	bl	80102f0 <ucdr_check_final_buffer_behavior>
 800fca2:	2800      	cmp	r0, #0
 800fca4:	d034      	beq.n	800fd10 <ucdr_deserialize_int16_t+0xb0>
 800fca6:	7d23      	ldrb	r3, [r4, #20]
 800fca8:	2b01      	cmp	r3, #1
 800fcaa:	d042      	beq.n	800fd32 <ucdr_deserialize_int16_t+0xd2>
 800fcac:	787b      	ldrb	r3, [r7, #1]
 800fcae:	702b      	strb	r3, [r5, #0]
 800fcb0:	2e00      	cmp	r6, #0
 800fcb2:	d03a      	beq.n	800fd2a <ucdr_deserialize_int16_t+0xca>
 800fcb4:	783b      	ldrb	r3, [r7, #0]
 800fcb6:	706b      	strb	r3, [r5, #1]
 800fcb8:	6923      	ldr	r3, [r4, #16]
 800fcba:	68a2      	ldr	r2, [r4, #8]
 800fcbc:	7da0      	ldrb	r0, [r4, #22]
 800fcbe:	2102      	movs	r1, #2
 800fcc0:	3302      	adds	r3, #2
 800fcc2:	1b9b      	subs	r3, r3, r6
 800fcc4:	444a      	add	r2, r9
 800fcc6:	7561      	strb	r1, [r4, #21]
 800fcc8:	6123      	str	r3, [r4, #16]
 800fcca:	60a2      	str	r2, [r4, #8]
 800fccc:	f080 0001 	eor.w	r0, r0, #1
 800fcd0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800fcd4:	2102      	movs	r1, #2
 800fcd6:	4620      	mov	r0, r4
 800fcd8:	f000 fb0a 	bl	80102f0 <ucdr_check_final_buffer_behavior>
 800fcdc:	b180      	cbz	r0, 800fd00 <ucdr_deserialize_int16_t+0xa0>
 800fcde:	7d23      	ldrb	r3, [r4, #20]
 800fce0:	2b01      	cmp	r3, #1
 800fce2:	68a3      	ldr	r3, [r4, #8]
 800fce4:	d011      	beq.n	800fd0a <ucdr_deserialize_int16_t+0xaa>
 800fce6:	785b      	ldrb	r3, [r3, #1]
 800fce8:	702b      	strb	r3, [r5, #0]
 800fcea:	68a3      	ldr	r3, [r4, #8]
 800fcec:	781b      	ldrb	r3, [r3, #0]
 800fcee:	706b      	strb	r3, [r5, #1]
 800fcf0:	68a2      	ldr	r2, [r4, #8]
 800fcf2:	6923      	ldr	r3, [r4, #16]
 800fcf4:	3202      	adds	r2, #2
 800fcf6:	3302      	adds	r3, #2
 800fcf8:	2102      	movs	r1, #2
 800fcfa:	60a2      	str	r2, [r4, #8]
 800fcfc:	6123      	str	r3, [r4, #16]
 800fcfe:	7561      	strb	r1, [r4, #21]
 800fd00:	7da0      	ldrb	r0, [r4, #22]
 800fd02:	f080 0001 	eor.w	r0, r0, #1
 800fd06:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800fd0a:	881b      	ldrh	r3, [r3, #0]
 800fd0c:	802b      	strh	r3, [r5, #0]
 800fd0e:	e7ef      	b.n	800fcf0 <ucdr_deserialize_int16_t+0x90>
 800fd10:	68a2      	ldr	r2, [r4, #8]
 800fd12:	6923      	ldr	r3, [r4, #16]
 800fd14:	7da0      	ldrb	r0, [r4, #22]
 800fd16:	f884 8015 	strb.w	r8, [r4, #21]
 800fd1a:	1b92      	subs	r2, r2, r6
 800fd1c:	1b9b      	subs	r3, r3, r6
 800fd1e:	60a2      	str	r2, [r4, #8]
 800fd20:	6123      	str	r3, [r4, #16]
 800fd22:	f080 0001 	eor.w	r0, r0, #1
 800fd26:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800fd2a:	68a3      	ldr	r3, [r4, #8]
 800fd2c:	781b      	ldrb	r3, [r3, #0]
 800fd2e:	706b      	strb	r3, [r5, #1]
 800fd30:	e7c2      	b.n	800fcb8 <ucdr_deserialize_int16_t+0x58>
 800fd32:	4639      	mov	r1, r7
 800fd34:	4632      	mov	r2, r6
 800fd36:	4628      	mov	r0, r5
 800fd38:	f00a f84b 	bl	8019dd2 <memcpy>
 800fd3c:	68a1      	ldr	r1, [r4, #8]
 800fd3e:	464a      	mov	r2, r9
 800fd40:	19a8      	adds	r0, r5, r6
 800fd42:	f00a f846 	bl	8019dd2 <memcpy>
 800fd46:	e7b7      	b.n	800fcb8 <ucdr_deserialize_int16_t+0x58>

0800fd48 <ucdr_serialize_int32_t>:
 800fd48:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fd4c:	b082      	sub	sp, #8
 800fd4e:	4604      	mov	r4, r0
 800fd50:	9101      	str	r1, [sp, #4]
 800fd52:	2104      	movs	r1, #4
 800fd54:	f000 fb1e 	bl	8010394 <ucdr_buffer_alignment>
 800fd58:	4601      	mov	r1, r0
 800fd5a:	4620      	mov	r0, r4
 800fd5c:	7d67      	ldrb	r7, [r4, #21]
 800fd5e:	f000 fb5d 	bl	801041c <ucdr_advance_buffer>
 800fd62:	4620      	mov	r0, r4
 800fd64:	2104      	movs	r1, #4
 800fd66:	f000 fab7 	bl	80102d8 <ucdr_check_buffer_available_for>
 800fd6a:	2800      	cmp	r0, #0
 800fd6c:	d139      	bne.n	800fde2 <ucdr_serialize_int32_t+0x9a>
 800fd6e:	e9d4 6501 	ldrd	r6, r5, [r4, #4]
 800fd72:	42ae      	cmp	r6, r5
 800fd74:	d930      	bls.n	800fdd8 <ucdr_serialize_int32_t+0x90>
 800fd76:	6922      	ldr	r2, [r4, #16]
 800fd78:	60a6      	str	r6, [r4, #8]
 800fd7a:	1b76      	subs	r6, r6, r5
 800fd7c:	4432      	add	r2, r6
 800fd7e:	f1c6 0804 	rsb	r8, r6, #4
 800fd82:	6122      	str	r2, [r4, #16]
 800fd84:	4641      	mov	r1, r8
 800fd86:	4620      	mov	r0, r4
 800fd88:	f000 fab2 	bl	80102f0 <ucdr_check_final_buffer_behavior>
 800fd8c:	2800      	cmp	r0, #0
 800fd8e:	d04c      	beq.n	800fe2a <ucdr_serialize_int32_t+0xe2>
 800fd90:	7d23      	ldrb	r3, [r4, #20]
 800fd92:	2b01      	cmp	r3, #1
 800fd94:	d063      	beq.n	800fe5e <ucdr_serialize_int32_t+0x116>
 800fd96:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800fd9a:	702b      	strb	r3, [r5, #0]
 800fd9c:	2e00      	cmp	r6, #0
 800fd9e:	d051      	beq.n	800fe44 <ucdr_serialize_int32_t+0xfc>
 800fda0:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800fda4:	706b      	strb	r3, [r5, #1]
 800fda6:	2e01      	cmp	r6, #1
 800fda8:	d050      	beq.n	800fe4c <ucdr_serialize_int32_t+0x104>
 800fdaa:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800fdae:	70ab      	strb	r3, [r5, #2]
 800fdb0:	2e02      	cmp	r6, #2
 800fdb2:	d04f      	beq.n	800fe54 <ucdr_serialize_int32_t+0x10c>
 800fdb4:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800fdb8:	70eb      	strb	r3, [r5, #3]
 800fdba:	6923      	ldr	r3, [r4, #16]
 800fdbc:	68a2      	ldr	r2, [r4, #8]
 800fdbe:	7da0      	ldrb	r0, [r4, #22]
 800fdc0:	3304      	adds	r3, #4
 800fdc2:	1b9b      	subs	r3, r3, r6
 800fdc4:	4442      	add	r2, r8
 800fdc6:	2104      	movs	r1, #4
 800fdc8:	f080 0001 	eor.w	r0, r0, #1
 800fdcc:	6123      	str	r3, [r4, #16]
 800fdce:	60a2      	str	r2, [r4, #8]
 800fdd0:	7561      	strb	r1, [r4, #21]
 800fdd2:	b002      	add	sp, #8
 800fdd4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fdd8:	2104      	movs	r1, #4
 800fdda:	4620      	mov	r0, r4
 800fddc:	f000 fa88 	bl	80102f0 <ucdr_check_final_buffer_behavior>
 800fde0:	b1d0      	cbz	r0, 800fe18 <ucdr_serialize_int32_t+0xd0>
 800fde2:	7d23      	ldrb	r3, [r4, #20]
 800fde4:	2b01      	cmp	r3, #1
 800fde6:	68a3      	ldr	r3, [r4, #8]
 800fde8:	d01c      	beq.n	800fe24 <ucdr_serialize_int32_t+0xdc>
 800fdea:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800fdee:	701a      	strb	r2, [r3, #0]
 800fdf0:	68a3      	ldr	r3, [r4, #8]
 800fdf2:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800fdf6:	705a      	strb	r2, [r3, #1]
 800fdf8:	68a3      	ldr	r3, [r4, #8]
 800fdfa:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800fdfe:	709a      	strb	r2, [r3, #2]
 800fe00:	68a3      	ldr	r3, [r4, #8]
 800fe02:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800fe06:	70da      	strb	r2, [r3, #3]
 800fe08:	68a2      	ldr	r2, [r4, #8]
 800fe0a:	6923      	ldr	r3, [r4, #16]
 800fe0c:	3204      	adds	r2, #4
 800fe0e:	3304      	adds	r3, #4
 800fe10:	2104      	movs	r1, #4
 800fe12:	60a2      	str	r2, [r4, #8]
 800fe14:	6123      	str	r3, [r4, #16]
 800fe16:	7561      	strb	r1, [r4, #21]
 800fe18:	7da0      	ldrb	r0, [r4, #22]
 800fe1a:	f080 0001 	eor.w	r0, r0, #1
 800fe1e:	b002      	add	sp, #8
 800fe20:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fe24:	9a01      	ldr	r2, [sp, #4]
 800fe26:	601a      	str	r2, [r3, #0]
 800fe28:	e7ee      	b.n	800fe08 <ucdr_serialize_int32_t+0xc0>
 800fe2a:	68a2      	ldr	r2, [r4, #8]
 800fe2c:	6923      	ldr	r3, [r4, #16]
 800fe2e:	7da0      	ldrb	r0, [r4, #22]
 800fe30:	7567      	strb	r7, [r4, #21]
 800fe32:	1b92      	subs	r2, r2, r6
 800fe34:	1b9b      	subs	r3, r3, r6
 800fe36:	f080 0001 	eor.w	r0, r0, #1
 800fe3a:	60a2      	str	r2, [r4, #8]
 800fe3c:	6123      	str	r3, [r4, #16]
 800fe3e:	b002      	add	sp, #8
 800fe40:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fe44:	68a3      	ldr	r3, [r4, #8]
 800fe46:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800fe4a:	701a      	strb	r2, [r3, #0]
 800fe4c:	68a3      	ldr	r3, [r4, #8]
 800fe4e:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800fe52:	701a      	strb	r2, [r3, #0]
 800fe54:	68a3      	ldr	r3, [r4, #8]
 800fe56:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800fe5a:	701a      	strb	r2, [r3, #0]
 800fe5c:	e7ad      	b.n	800fdba <ucdr_serialize_int32_t+0x72>
 800fe5e:	4628      	mov	r0, r5
 800fe60:	ad01      	add	r5, sp, #4
 800fe62:	4629      	mov	r1, r5
 800fe64:	4632      	mov	r2, r6
 800fe66:	f009 ffb4 	bl	8019dd2 <memcpy>
 800fe6a:	68a0      	ldr	r0, [r4, #8]
 800fe6c:	4642      	mov	r2, r8
 800fe6e:	19a9      	adds	r1, r5, r6
 800fe70:	f009 ffaf 	bl	8019dd2 <memcpy>
 800fe74:	e7a1      	b.n	800fdba <ucdr_serialize_int32_t+0x72>
 800fe76:	bf00      	nop

0800fe78 <ucdr_deserialize_int32_t>:
 800fe78:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800fe7c:	460d      	mov	r5, r1
 800fe7e:	2104      	movs	r1, #4
 800fe80:	4604      	mov	r4, r0
 800fe82:	f000 fa87 	bl	8010394 <ucdr_buffer_alignment>
 800fe86:	4601      	mov	r1, r0
 800fe88:	4620      	mov	r0, r4
 800fe8a:	f894 8015 	ldrb.w	r8, [r4, #21]
 800fe8e:	f000 fac5 	bl	801041c <ucdr_advance_buffer>
 800fe92:	4620      	mov	r0, r4
 800fe94:	2104      	movs	r1, #4
 800fe96:	f000 fa1f 	bl	80102d8 <ucdr_check_buffer_available_for>
 800fe9a:	2800      	cmp	r0, #0
 800fe9c:	d138      	bne.n	800ff10 <ucdr_deserialize_int32_t+0x98>
 800fe9e:	e9d4 7601 	ldrd	r7, r6, [r4, #4]
 800fea2:	42b7      	cmp	r7, r6
 800fea4:	d92f      	bls.n	800ff06 <ucdr_deserialize_int32_t+0x8e>
 800fea6:	6922      	ldr	r2, [r4, #16]
 800fea8:	60a7      	str	r7, [r4, #8]
 800feaa:	1bbf      	subs	r7, r7, r6
 800feac:	443a      	add	r2, r7
 800feae:	f1c7 0904 	rsb	r9, r7, #4
 800feb2:	6122      	str	r2, [r4, #16]
 800feb4:	4649      	mov	r1, r9
 800feb6:	4620      	mov	r0, r4
 800feb8:	f000 fa1a 	bl	80102f0 <ucdr_check_final_buffer_behavior>
 800febc:	2800      	cmp	r0, #0
 800febe:	d046      	beq.n	800ff4e <ucdr_deserialize_int32_t+0xd6>
 800fec0:	7d23      	ldrb	r3, [r4, #20]
 800fec2:	2b01      	cmp	r3, #1
 800fec4:	d05c      	beq.n	800ff80 <ucdr_deserialize_int32_t+0x108>
 800fec6:	78f3      	ldrb	r3, [r6, #3]
 800fec8:	702b      	strb	r3, [r5, #0]
 800feca:	2f00      	cmp	r7, #0
 800fecc:	d04c      	beq.n	800ff68 <ucdr_deserialize_int32_t+0xf0>
 800fece:	78b3      	ldrb	r3, [r6, #2]
 800fed0:	706b      	strb	r3, [r5, #1]
 800fed2:	2f01      	cmp	r7, #1
 800fed4:	f105 0302 	add.w	r3, r5, #2
 800fed8:	d04a      	beq.n	800ff70 <ucdr_deserialize_int32_t+0xf8>
 800feda:	7873      	ldrb	r3, [r6, #1]
 800fedc:	70ab      	strb	r3, [r5, #2]
 800fede:	2f02      	cmp	r7, #2
 800fee0:	f105 0303 	add.w	r3, r5, #3
 800fee4:	d048      	beq.n	800ff78 <ucdr_deserialize_int32_t+0x100>
 800fee6:	7833      	ldrb	r3, [r6, #0]
 800fee8:	70eb      	strb	r3, [r5, #3]
 800feea:	6923      	ldr	r3, [r4, #16]
 800feec:	68a2      	ldr	r2, [r4, #8]
 800feee:	7da0      	ldrb	r0, [r4, #22]
 800fef0:	2104      	movs	r1, #4
 800fef2:	3304      	adds	r3, #4
 800fef4:	1bdb      	subs	r3, r3, r7
 800fef6:	444a      	add	r2, r9
 800fef8:	7561      	strb	r1, [r4, #21]
 800fefa:	6123      	str	r3, [r4, #16]
 800fefc:	60a2      	str	r2, [r4, #8]
 800fefe:	f080 0001 	eor.w	r0, r0, #1
 800ff02:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ff06:	2104      	movs	r1, #4
 800ff08:	4620      	mov	r0, r4
 800ff0a:	f000 f9f1 	bl	80102f0 <ucdr_check_final_buffer_behavior>
 800ff0e:	b1b0      	cbz	r0, 800ff3e <ucdr_deserialize_int32_t+0xc6>
 800ff10:	7d23      	ldrb	r3, [r4, #20]
 800ff12:	2b01      	cmp	r3, #1
 800ff14:	68a3      	ldr	r3, [r4, #8]
 800ff16:	d017      	beq.n	800ff48 <ucdr_deserialize_int32_t+0xd0>
 800ff18:	78db      	ldrb	r3, [r3, #3]
 800ff1a:	702b      	strb	r3, [r5, #0]
 800ff1c:	68a3      	ldr	r3, [r4, #8]
 800ff1e:	789b      	ldrb	r3, [r3, #2]
 800ff20:	706b      	strb	r3, [r5, #1]
 800ff22:	68a3      	ldr	r3, [r4, #8]
 800ff24:	785b      	ldrb	r3, [r3, #1]
 800ff26:	70ab      	strb	r3, [r5, #2]
 800ff28:	68a3      	ldr	r3, [r4, #8]
 800ff2a:	781b      	ldrb	r3, [r3, #0]
 800ff2c:	70eb      	strb	r3, [r5, #3]
 800ff2e:	68a2      	ldr	r2, [r4, #8]
 800ff30:	6923      	ldr	r3, [r4, #16]
 800ff32:	3204      	adds	r2, #4
 800ff34:	3304      	adds	r3, #4
 800ff36:	2104      	movs	r1, #4
 800ff38:	60a2      	str	r2, [r4, #8]
 800ff3a:	6123      	str	r3, [r4, #16]
 800ff3c:	7561      	strb	r1, [r4, #21]
 800ff3e:	7da0      	ldrb	r0, [r4, #22]
 800ff40:	f080 0001 	eor.w	r0, r0, #1
 800ff44:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ff48:	681b      	ldr	r3, [r3, #0]
 800ff4a:	602b      	str	r3, [r5, #0]
 800ff4c:	e7ef      	b.n	800ff2e <ucdr_deserialize_int32_t+0xb6>
 800ff4e:	68a2      	ldr	r2, [r4, #8]
 800ff50:	6923      	ldr	r3, [r4, #16]
 800ff52:	7da0      	ldrb	r0, [r4, #22]
 800ff54:	f884 8015 	strb.w	r8, [r4, #21]
 800ff58:	1bd2      	subs	r2, r2, r7
 800ff5a:	1bdb      	subs	r3, r3, r7
 800ff5c:	60a2      	str	r2, [r4, #8]
 800ff5e:	6123      	str	r3, [r4, #16]
 800ff60:	f080 0001 	eor.w	r0, r0, #1
 800ff64:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ff68:	68a3      	ldr	r3, [r4, #8]
 800ff6a:	789b      	ldrb	r3, [r3, #2]
 800ff6c:	706b      	strb	r3, [r5, #1]
 800ff6e:	1cab      	adds	r3, r5, #2
 800ff70:	68a2      	ldr	r2, [r4, #8]
 800ff72:	7852      	ldrb	r2, [r2, #1]
 800ff74:	f803 2b01 	strb.w	r2, [r3], #1
 800ff78:	68a2      	ldr	r2, [r4, #8]
 800ff7a:	7812      	ldrb	r2, [r2, #0]
 800ff7c:	701a      	strb	r2, [r3, #0]
 800ff7e:	e7b4      	b.n	800feea <ucdr_deserialize_int32_t+0x72>
 800ff80:	4631      	mov	r1, r6
 800ff82:	463a      	mov	r2, r7
 800ff84:	4628      	mov	r0, r5
 800ff86:	f009 ff24 	bl	8019dd2 <memcpy>
 800ff8a:	68a1      	ldr	r1, [r4, #8]
 800ff8c:	464a      	mov	r2, r9
 800ff8e:	19e8      	adds	r0, r5, r7
 800ff90:	f009 ff1f 	bl	8019dd2 <memcpy>
 800ff94:	e7a9      	b.n	800feea <ucdr_deserialize_int32_t+0x72>
 800ff96:	bf00      	nop

0800ff98 <ucdr_serialize_endian_double>:
 800ff98:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800ff9c:	460e      	mov	r6, r1
 800ff9e:	b083      	sub	sp, #12
 800ffa0:	2108      	movs	r1, #8
 800ffa2:	4604      	mov	r4, r0
 800ffa4:	ed8d 0b00 	vstr	d0, [sp]
 800ffa8:	f000 f9f4 	bl	8010394 <ucdr_buffer_alignment>
 800ffac:	4601      	mov	r1, r0
 800ffae:	4620      	mov	r0, r4
 800ffb0:	f894 8015 	ldrb.w	r8, [r4, #21]
 800ffb4:	f000 fa32 	bl	801041c <ucdr_advance_buffer>
 800ffb8:	4620      	mov	r0, r4
 800ffba:	2108      	movs	r1, #8
 800ffbc:	f000 f98c 	bl	80102d8 <ucdr_check_buffer_available_for>
 800ffc0:	2800      	cmp	r0, #0
 800ffc2:	d14d      	bne.n	8010060 <ucdr_serialize_endian_double+0xc8>
 800ffc4:	e9d4 5701 	ldrd	r5, r7, [r4, #4]
 800ffc8:	42bd      	cmp	r5, r7
 800ffca:	d944      	bls.n	8010056 <ucdr_serialize_endian_double+0xbe>
 800ffcc:	6923      	ldr	r3, [r4, #16]
 800ffce:	60a5      	str	r5, [r4, #8]
 800ffd0:	1bed      	subs	r5, r5, r7
 800ffd2:	442b      	add	r3, r5
 800ffd4:	f1c5 0908 	rsb	r9, r5, #8
 800ffd8:	6123      	str	r3, [r4, #16]
 800ffda:	4649      	mov	r1, r9
 800ffdc:	4620      	mov	r0, r4
 800ffde:	f000 f987 	bl	80102f0 <ucdr_check_final_buffer_behavior>
 800ffe2:	2800      	cmp	r0, #0
 800ffe4:	d072      	beq.n	80100cc <ucdr_serialize_endian_double+0x134>
 800ffe6:	2e01      	cmp	r6, #1
 800ffe8:	f000 809b 	beq.w	8010122 <ucdr_serialize_endian_double+0x18a>
 800ffec:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800fff0:	703b      	strb	r3, [r7, #0]
 800fff2:	2d00      	cmp	r5, #0
 800fff4:	d078      	beq.n	80100e8 <ucdr_serialize_endian_double+0x150>
 800fff6:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800fffa:	707b      	strb	r3, [r7, #1]
 800fffc:	2d01      	cmp	r5, #1
 800fffe:	d077      	beq.n	80100f0 <ucdr_serialize_endian_double+0x158>
 8010000:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8010004:	70bb      	strb	r3, [r7, #2]
 8010006:	2d02      	cmp	r5, #2
 8010008:	d076      	beq.n	80100f8 <ucdr_serialize_endian_double+0x160>
 801000a:	f89d 3004 	ldrb.w	r3, [sp, #4]
 801000e:	70fb      	strb	r3, [r7, #3]
 8010010:	2d03      	cmp	r5, #3
 8010012:	d075      	beq.n	8010100 <ucdr_serialize_endian_double+0x168>
 8010014:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8010018:	713b      	strb	r3, [r7, #4]
 801001a:	2d04      	cmp	r5, #4
 801001c:	d074      	beq.n	8010108 <ucdr_serialize_endian_double+0x170>
 801001e:	f89d 3002 	ldrb.w	r3, [sp, #2]
 8010022:	717b      	strb	r3, [r7, #5]
 8010024:	2d05      	cmp	r5, #5
 8010026:	d073      	beq.n	8010110 <ucdr_serialize_endian_double+0x178>
 8010028:	f89d 3001 	ldrb.w	r3, [sp, #1]
 801002c:	71bb      	strb	r3, [r7, #6]
 801002e:	2d06      	cmp	r5, #6
 8010030:	d072      	beq.n	8010118 <ucdr_serialize_endian_double+0x180>
 8010032:	f89d 3000 	ldrb.w	r3, [sp]
 8010036:	71fb      	strb	r3, [r7, #7]
 8010038:	6923      	ldr	r3, [r4, #16]
 801003a:	68a2      	ldr	r2, [r4, #8]
 801003c:	7da0      	ldrb	r0, [r4, #22]
 801003e:	3308      	adds	r3, #8
 8010040:	1b5d      	subs	r5, r3, r5
 8010042:	444a      	add	r2, r9
 8010044:	2308      	movs	r3, #8
 8010046:	f080 0001 	eor.w	r0, r0, #1
 801004a:	6125      	str	r5, [r4, #16]
 801004c:	60a2      	str	r2, [r4, #8]
 801004e:	7563      	strb	r3, [r4, #21]
 8010050:	b003      	add	sp, #12
 8010052:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8010056:	2108      	movs	r1, #8
 8010058:	4620      	mov	r0, r4
 801005a:	f000 f949 	bl	80102f0 <ucdr_check_final_buffer_behavior>
 801005e:	b348      	cbz	r0, 80100b4 <ucdr_serialize_endian_double+0x11c>
 8010060:	2e01      	cmp	r6, #1
 8010062:	d02d      	beq.n	80100c0 <ucdr_serialize_endian_double+0x128>
 8010064:	68a3      	ldr	r3, [r4, #8]
 8010066:	f89d 2007 	ldrb.w	r2, [sp, #7]
 801006a:	701a      	strb	r2, [r3, #0]
 801006c:	68a3      	ldr	r3, [r4, #8]
 801006e:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8010072:	705a      	strb	r2, [r3, #1]
 8010074:	68a3      	ldr	r3, [r4, #8]
 8010076:	f89d 2005 	ldrb.w	r2, [sp, #5]
 801007a:	709a      	strb	r2, [r3, #2]
 801007c:	68a3      	ldr	r3, [r4, #8]
 801007e:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8010082:	70da      	strb	r2, [r3, #3]
 8010084:	68a3      	ldr	r3, [r4, #8]
 8010086:	f89d 2003 	ldrb.w	r2, [sp, #3]
 801008a:	711a      	strb	r2, [r3, #4]
 801008c:	68a3      	ldr	r3, [r4, #8]
 801008e:	f89d 2002 	ldrb.w	r2, [sp, #2]
 8010092:	715a      	strb	r2, [r3, #5]
 8010094:	68a3      	ldr	r3, [r4, #8]
 8010096:	f89d 2001 	ldrb.w	r2, [sp, #1]
 801009a:	719a      	strb	r2, [r3, #6]
 801009c:	68a3      	ldr	r3, [r4, #8]
 801009e:	f89d 2000 	ldrb.w	r2, [sp]
 80100a2:	71da      	strb	r2, [r3, #7]
 80100a4:	68a2      	ldr	r2, [r4, #8]
 80100a6:	6923      	ldr	r3, [r4, #16]
 80100a8:	3208      	adds	r2, #8
 80100aa:	3308      	adds	r3, #8
 80100ac:	2108      	movs	r1, #8
 80100ae:	60a2      	str	r2, [r4, #8]
 80100b0:	6123      	str	r3, [r4, #16]
 80100b2:	7561      	strb	r1, [r4, #21]
 80100b4:	7da0      	ldrb	r0, [r4, #22]
 80100b6:	f080 0001 	eor.w	r0, r0, #1
 80100ba:	b003      	add	sp, #12
 80100bc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80100c0:	466b      	mov	r3, sp
 80100c2:	cb03      	ldmia	r3!, {r0, r1}
 80100c4:	68a3      	ldr	r3, [r4, #8]
 80100c6:	6018      	str	r0, [r3, #0]
 80100c8:	6059      	str	r1, [r3, #4]
 80100ca:	e7eb      	b.n	80100a4 <ucdr_serialize_endian_double+0x10c>
 80100cc:	68a2      	ldr	r2, [r4, #8]
 80100ce:	6923      	ldr	r3, [r4, #16]
 80100d0:	7da0      	ldrb	r0, [r4, #22]
 80100d2:	f884 8015 	strb.w	r8, [r4, #21]
 80100d6:	1b52      	subs	r2, r2, r5
 80100d8:	f080 0001 	eor.w	r0, r0, #1
 80100dc:	1b5d      	subs	r5, r3, r5
 80100de:	60a2      	str	r2, [r4, #8]
 80100e0:	6125      	str	r5, [r4, #16]
 80100e2:	b003      	add	sp, #12
 80100e4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80100e8:	68a3      	ldr	r3, [r4, #8]
 80100ea:	f89d 2006 	ldrb.w	r2, [sp, #6]
 80100ee:	701a      	strb	r2, [r3, #0]
 80100f0:	68a3      	ldr	r3, [r4, #8]
 80100f2:	f89d 2005 	ldrb.w	r2, [sp, #5]
 80100f6:	701a      	strb	r2, [r3, #0]
 80100f8:	68a3      	ldr	r3, [r4, #8]
 80100fa:	f89d 2004 	ldrb.w	r2, [sp, #4]
 80100fe:	701a      	strb	r2, [r3, #0]
 8010100:	68a3      	ldr	r3, [r4, #8]
 8010102:	f89d 2003 	ldrb.w	r2, [sp, #3]
 8010106:	701a      	strb	r2, [r3, #0]
 8010108:	68a3      	ldr	r3, [r4, #8]
 801010a:	f89d 2002 	ldrb.w	r2, [sp, #2]
 801010e:	701a      	strb	r2, [r3, #0]
 8010110:	68a3      	ldr	r3, [r4, #8]
 8010112:	f89d 2001 	ldrb.w	r2, [sp, #1]
 8010116:	701a      	strb	r2, [r3, #0]
 8010118:	68a3      	ldr	r3, [r4, #8]
 801011a:	f89d 2000 	ldrb.w	r2, [sp]
 801011e:	701a      	strb	r2, [r3, #0]
 8010120:	e78a      	b.n	8010038 <ucdr_serialize_endian_double+0xa0>
 8010122:	466e      	mov	r6, sp
 8010124:	4631      	mov	r1, r6
 8010126:	462a      	mov	r2, r5
 8010128:	4638      	mov	r0, r7
 801012a:	f009 fe52 	bl	8019dd2 <memcpy>
 801012e:	68a0      	ldr	r0, [r4, #8]
 8010130:	464a      	mov	r2, r9
 8010132:	1971      	adds	r1, r6, r5
 8010134:	f009 fe4d 	bl	8019dd2 <memcpy>
 8010138:	e77e      	b.n	8010038 <ucdr_serialize_endian_double+0xa0>
 801013a:	bf00      	nop

0801013c <ucdr_deserialize_endian_double>:
 801013c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010140:	460f      	mov	r7, r1
 8010142:	2108      	movs	r1, #8
 8010144:	4604      	mov	r4, r0
 8010146:	4615      	mov	r5, r2
 8010148:	f000 f924 	bl	8010394 <ucdr_buffer_alignment>
 801014c:	4601      	mov	r1, r0
 801014e:	4620      	mov	r0, r4
 8010150:	f894 9015 	ldrb.w	r9, [r4, #21]
 8010154:	f000 f962 	bl	801041c <ucdr_advance_buffer>
 8010158:	4620      	mov	r0, r4
 801015a:	2108      	movs	r1, #8
 801015c:	f000 f8bc 	bl	80102d8 <ucdr_check_buffer_available_for>
 8010160:	2800      	cmp	r0, #0
 8010162:	d159      	bne.n	8010218 <ucdr_deserialize_endian_double+0xdc>
 8010164:	e9d4 6801 	ldrd	r6, r8, [r4, #4]
 8010168:	4546      	cmp	r6, r8
 801016a:	d950      	bls.n	801020e <ucdr_deserialize_endian_double+0xd2>
 801016c:	6923      	ldr	r3, [r4, #16]
 801016e:	60a6      	str	r6, [r4, #8]
 8010170:	eba6 0608 	sub.w	r6, r6, r8
 8010174:	4433      	add	r3, r6
 8010176:	f1c6 0a08 	rsb	sl, r6, #8
 801017a:	6123      	str	r3, [r4, #16]
 801017c:	4651      	mov	r1, sl
 801017e:	4620      	mov	r0, r4
 8010180:	f000 f8b6 	bl	80102f0 <ucdr_check_final_buffer_behavior>
 8010184:	2800      	cmp	r0, #0
 8010186:	d073      	beq.n	8010270 <ucdr_deserialize_endian_double+0x134>
 8010188:	2f01      	cmp	r7, #1
 801018a:	f000 809a 	beq.w	80102c2 <ucdr_deserialize_endian_double+0x186>
 801018e:	f898 3007 	ldrb.w	r3, [r8, #7]
 8010192:	702b      	strb	r3, [r5, #0]
 8010194:	2e00      	cmp	r6, #0
 8010196:	d078      	beq.n	801028a <ucdr_deserialize_endian_double+0x14e>
 8010198:	f898 3006 	ldrb.w	r3, [r8, #6]
 801019c:	706b      	strb	r3, [r5, #1]
 801019e:	2e01      	cmp	r6, #1
 80101a0:	f105 0302 	add.w	r3, r5, #2
 80101a4:	d075      	beq.n	8010292 <ucdr_deserialize_endian_double+0x156>
 80101a6:	f898 3005 	ldrb.w	r3, [r8, #5]
 80101aa:	70ab      	strb	r3, [r5, #2]
 80101ac:	2e02      	cmp	r6, #2
 80101ae:	f105 0303 	add.w	r3, r5, #3
 80101b2:	d072      	beq.n	801029a <ucdr_deserialize_endian_double+0x15e>
 80101b4:	f898 3004 	ldrb.w	r3, [r8, #4]
 80101b8:	70eb      	strb	r3, [r5, #3]
 80101ba:	2e03      	cmp	r6, #3
 80101bc:	f105 0304 	add.w	r3, r5, #4
 80101c0:	d06f      	beq.n	80102a2 <ucdr_deserialize_endian_double+0x166>
 80101c2:	f898 3003 	ldrb.w	r3, [r8, #3]
 80101c6:	712b      	strb	r3, [r5, #4]
 80101c8:	2e04      	cmp	r6, #4
 80101ca:	f105 0305 	add.w	r3, r5, #5
 80101ce:	d06c      	beq.n	80102aa <ucdr_deserialize_endian_double+0x16e>
 80101d0:	f898 3002 	ldrb.w	r3, [r8, #2]
 80101d4:	716b      	strb	r3, [r5, #5]
 80101d6:	2e05      	cmp	r6, #5
 80101d8:	f105 0306 	add.w	r3, r5, #6
 80101dc:	d069      	beq.n	80102b2 <ucdr_deserialize_endian_double+0x176>
 80101de:	f898 3001 	ldrb.w	r3, [r8, #1]
 80101e2:	71ab      	strb	r3, [r5, #6]
 80101e4:	2e06      	cmp	r6, #6
 80101e6:	f105 0307 	add.w	r3, r5, #7
 80101ea:	d066      	beq.n	80102ba <ucdr_deserialize_endian_double+0x17e>
 80101ec:	f898 3000 	ldrb.w	r3, [r8]
 80101f0:	71eb      	strb	r3, [r5, #7]
 80101f2:	6923      	ldr	r3, [r4, #16]
 80101f4:	68a2      	ldr	r2, [r4, #8]
 80101f6:	7da0      	ldrb	r0, [r4, #22]
 80101f8:	3308      	adds	r3, #8
 80101fa:	1b9e      	subs	r6, r3, r6
 80101fc:	2308      	movs	r3, #8
 80101fe:	4452      	add	r2, sl
 8010200:	7563      	strb	r3, [r4, #21]
 8010202:	6126      	str	r6, [r4, #16]
 8010204:	60a2      	str	r2, [r4, #8]
 8010206:	f080 0001 	eor.w	r0, r0, #1
 801020a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801020e:	2108      	movs	r1, #8
 8010210:	4620      	mov	r0, r4
 8010212:	f000 f86d 	bl	80102f0 <ucdr_check_final_buffer_behavior>
 8010216:	b308      	cbz	r0, 801025c <ucdr_deserialize_endian_double+0x120>
 8010218:	2f01      	cmp	r7, #1
 801021a:	68a3      	ldr	r3, [r4, #8]
 801021c:	d023      	beq.n	8010266 <ucdr_deserialize_endian_double+0x12a>
 801021e:	79db      	ldrb	r3, [r3, #7]
 8010220:	702b      	strb	r3, [r5, #0]
 8010222:	68a3      	ldr	r3, [r4, #8]
 8010224:	799b      	ldrb	r3, [r3, #6]
 8010226:	706b      	strb	r3, [r5, #1]
 8010228:	68a3      	ldr	r3, [r4, #8]
 801022a:	795b      	ldrb	r3, [r3, #5]
 801022c:	70ab      	strb	r3, [r5, #2]
 801022e:	68a3      	ldr	r3, [r4, #8]
 8010230:	791b      	ldrb	r3, [r3, #4]
 8010232:	70eb      	strb	r3, [r5, #3]
 8010234:	68a3      	ldr	r3, [r4, #8]
 8010236:	78db      	ldrb	r3, [r3, #3]
 8010238:	712b      	strb	r3, [r5, #4]
 801023a:	68a3      	ldr	r3, [r4, #8]
 801023c:	789b      	ldrb	r3, [r3, #2]
 801023e:	716b      	strb	r3, [r5, #5]
 8010240:	68a3      	ldr	r3, [r4, #8]
 8010242:	785b      	ldrb	r3, [r3, #1]
 8010244:	71ab      	strb	r3, [r5, #6]
 8010246:	68a3      	ldr	r3, [r4, #8]
 8010248:	781b      	ldrb	r3, [r3, #0]
 801024a:	71eb      	strb	r3, [r5, #7]
 801024c:	68a2      	ldr	r2, [r4, #8]
 801024e:	6923      	ldr	r3, [r4, #16]
 8010250:	3208      	adds	r2, #8
 8010252:	3308      	adds	r3, #8
 8010254:	2108      	movs	r1, #8
 8010256:	60a2      	str	r2, [r4, #8]
 8010258:	6123      	str	r3, [r4, #16]
 801025a:	7561      	strb	r1, [r4, #21]
 801025c:	7da0      	ldrb	r0, [r4, #22]
 801025e:	f080 0001 	eor.w	r0, r0, #1
 8010262:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010266:	681a      	ldr	r2, [r3, #0]
 8010268:	685b      	ldr	r3, [r3, #4]
 801026a:	606b      	str	r3, [r5, #4]
 801026c:	602a      	str	r2, [r5, #0]
 801026e:	e7ed      	b.n	801024c <ucdr_deserialize_endian_double+0x110>
 8010270:	68a2      	ldr	r2, [r4, #8]
 8010272:	6923      	ldr	r3, [r4, #16]
 8010274:	7da0      	ldrb	r0, [r4, #22]
 8010276:	f884 9015 	strb.w	r9, [r4, #21]
 801027a:	1b92      	subs	r2, r2, r6
 801027c:	1b9e      	subs	r6, r3, r6
 801027e:	60a2      	str	r2, [r4, #8]
 8010280:	6126      	str	r6, [r4, #16]
 8010282:	f080 0001 	eor.w	r0, r0, #1
 8010286:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801028a:	68a3      	ldr	r3, [r4, #8]
 801028c:	799b      	ldrb	r3, [r3, #6]
 801028e:	706b      	strb	r3, [r5, #1]
 8010290:	1cab      	adds	r3, r5, #2
 8010292:	68a2      	ldr	r2, [r4, #8]
 8010294:	7952      	ldrb	r2, [r2, #5]
 8010296:	f803 2b01 	strb.w	r2, [r3], #1
 801029a:	68a2      	ldr	r2, [r4, #8]
 801029c:	7912      	ldrb	r2, [r2, #4]
 801029e:	f803 2b01 	strb.w	r2, [r3], #1
 80102a2:	68a2      	ldr	r2, [r4, #8]
 80102a4:	78d2      	ldrb	r2, [r2, #3]
 80102a6:	f803 2b01 	strb.w	r2, [r3], #1
 80102aa:	68a2      	ldr	r2, [r4, #8]
 80102ac:	7892      	ldrb	r2, [r2, #2]
 80102ae:	f803 2b01 	strb.w	r2, [r3], #1
 80102b2:	68a2      	ldr	r2, [r4, #8]
 80102b4:	7852      	ldrb	r2, [r2, #1]
 80102b6:	f803 2b01 	strb.w	r2, [r3], #1
 80102ba:	68a2      	ldr	r2, [r4, #8]
 80102bc:	7812      	ldrb	r2, [r2, #0]
 80102be:	701a      	strb	r2, [r3, #0]
 80102c0:	e797      	b.n	80101f2 <ucdr_deserialize_endian_double+0xb6>
 80102c2:	4641      	mov	r1, r8
 80102c4:	4632      	mov	r2, r6
 80102c6:	4628      	mov	r0, r5
 80102c8:	f009 fd83 	bl	8019dd2 <memcpy>
 80102cc:	68a1      	ldr	r1, [r4, #8]
 80102ce:	4652      	mov	r2, sl
 80102d0:	19a8      	adds	r0, r5, r6
 80102d2:	f009 fd7e 	bl	8019dd2 <memcpy>
 80102d6:	e78c      	b.n	80101f2 <ucdr_deserialize_endian_double+0xb6>

080102d8 <ucdr_check_buffer_available_for>:
 80102d8:	7d83      	ldrb	r3, [r0, #22]
 80102da:	b93b      	cbnz	r3, 80102ec <ucdr_check_buffer_available_for+0x14>
 80102dc:	e9d0 0301 	ldrd	r0, r3, [r0, #4]
 80102e0:	4419      	add	r1, r3
 80102e2:	4288      	cmp	r0, r1
 80102e4:	bf34      	ite	cc
 80102e6:	2000      	movcc	r0, #0
 80102e8:	2001      	movcs	r0, #1
 80102ea:	4770      	bx	lr
 80102ec:	2000      	movs	r0, #0
 80102ee:	4770      	bx	lr

080102f0 <ucdr_check_final_buffer_behavior>:
 80102f0:	7d83      	ldrb	r3, [r0, #22]
 80102f2:	b943      	cbnz	r3, 8010306 <ucdr_check_final_buffer_behavior+0x16>
 80102f4:	e9d0 2101 	ldrd	r2, r1, [r0, #4]
 80102f8:	4291      	cmp	r1, r2
 80102fa:	b510      	push	{r4, lr}
 80102fc:	4604      	mov	r4, r0
 80102fe:	d205      	bcs.n	801030c <ucdr_check_final_buffer_behavior+0x1c>
 8010300:	2301      	movs	r3, #1
 8010302:	4618      	mov	r0, r3
 8010304:	bd10      	pop	{r4, pc}
 8010306:	2300      	movs	r3, #0
 8010308:	4618      	mov	r0, r3
 801030a:	4770      	bx	lr
 801030c:	6982      	ldr	r2, [r0, #24]
 801030e:	b13a      	cbz	r2, 8010320 <ucdr_check_final_buffer_behavior+0x30>
 8010310:	69c1      	ldr	r1, [r0, #28]
 8010312:	4790      	blx	r2
 8010314:	f080 0301 	eor.w	r3, r0, #1
 8010318:	b2db      	uxtb	r3, r3
 801031a:	75a0      	strb	r0, [r4, #22]
 801031c:	4618      	mov	r0, r3
 801031e:	bd10      	pop	{r4, pc}
 8010320:	2001      	movs	r0, #1
 8010322:	75a0      	strb	r0, [r4, #22]
 8010324:	e7fa      	b.n	801031c <ucdr_check_final_buffer_behavior+0x2c>
 8010326:	bf00      	nop

08010328 <ucdr_set_on_full_buffer_callback>:
 8010328:	e9c0 1206 	strd	r1, r2, [r0, #24]
 801032c:	4770      	bx	lr
 801032e:	bf00      	nop

08010330 <ucdr_init_buffer_origin_offset_endian>:
 8010330:	b430      	push	{r4, r5}
 8010332:	9c02      	ldr	r4, [sp, #8]
 8010334:	f89d 500c 	ldrb.w	r5, [sp, #12]
 8010338:	6001      	str	r1, [r0, #0]
 801033a:	440a      	add	r2, r1
 801033c:	60c3      	str	r3, [r0, #12]
 801033e:	4421      	add	r1, r4
 8010340:	441c      	add	r4, r3
 8010342:	2300      	movs	r3, #0
 8010344:	6104      	str	r4, [r0, #16]
 8010346:	7505      	strb	r5, [r0, #20]
 8010348:	e9c0 2101 	strd	r2, r1, [r0, #4]
 801034c:	bc30      	pop	{r4, r5}
 801034e:	e9c0 3306 	strd	r3, r3, [r0, #24]
 8010352:	7543      	strb	r3, [r0, #21]
 8010354:	7583      	strb	r3, [r0, #22]
 8010356:	4770      	bx	lr

08010358 <ucdr_init_buffer_origin_offset>:
 8010358:	b510      	push	{r4, lr}
 801035a:	b082      	sub	sp, #8
 801035c:	9c04      	ldr	r4, [sp, #16]
 801035e:	9400      	str	r4, [sp, #0]
 8010360:	2401      	movs	r4, #1
 8010362:	9401      	str	r4, [sp, #4]
 8010364:	f7ff ffe4 	bl	8010330 <ucdr_init_buffer_origin_offset_endian>
 8010368:	b002      	add	sp, #8
 801036a:	bd10      	pop	{r4, pc}

0801036c <ucdr_init_buffer_origin>:
 801036c:	b510      	push	{r4, lr}
 801036e:	b082      	sub	sp, #8
 8010370:	2400      	movs	r4, #0
 8010372:	9400      	str	r4, [sp, #0]
 8010374:	f7ff fff0 	bl	8010358 <ucdr_init_buffer_origin_offset>
 8010378:	b002      	add	sp, #8
 801037a:	bd10      	pop	{r4, pc}

0801037c <ucdr_init_buffer>:
 801037c:	2300      	movs	r3, #0
 801037e:	f7ff bff5 	b.w	801036c <ucdr_init_buffer_origin>
 8010382:	bf00      	nop

08010384 <ucdr_alignment>:
 8010384:	fbb0 f3f1 	udiv	r3, r0, r1
 8010388:	fb03 0011 	mls	r0, r3, r1, r0
 801038c:	1a08      	subs	r0, r1, r0
 801038e:	3901      	subs	r1, #1
 8010390:	4008      	ands	r0, r1
 8010392:	4770      	bx	lr

08010394 <ucdr_buffer_alignment>:
 8010394:	7d43      	ldrb	r3, [r0, #21]
 8010396:	428b      	cmp	r3, r1
 8010398:	d208      	bcs.n	80103ac <ucdr_buffer_alignment+0x18>
 801039a:	6903      	ldr	r3, [r0, #16]
 801039c:	fbb3 f0f1 	udiv	r0, r3, r1
 80103a0:	fb01 3010 	mls	r0, r1, r0, r3
 80103a4:	1a08      	subs	r0, r1, r0
 80103a6:	3901      	subs	r1, #1
 80103a8:	4008      	ands	r0, r1
 80103aa:	4770      	bx	lr
 80103ac:	2000      	movs	r0, #0
 80103ae:	4770      	bx	lr

080103b0 <ucdr_align_to>:
 80103b0:	b570      	push	{r4, r5, r6, lr}
 80103b2:	4604      	mov	r4, r0
 80103b4:	460e      	mov	r6, r1
 80103b6:	f7ff ffed 	bl	8010394 <ucdr_buffer_alignment>
 80103ba:	68a5      	ldr	r5, [r4, #8]
 80103bc:	6863      	ldr	r3, [r4, #4]
 80103be:	6922      	ldr	r2, [r4, #16]
 80103c0:	7566      	strb	r6, [r4, #21]
 80103c2:	4405      	add	r5, r0
 80103c4:	42ab      	cmp	r3, r5
 80103c6:	4410      	add	r0, r2
 80103c8:	bf28      	it	cs
 80103ca:	462b      	movcs	r3, r5
 80103cc:	6120      	str	r0, [r4, #16]
 80103ce:	60a3      	str	r3, [r4, #8]
 80103d0:	bd70      	pop	{r4, r5, r6, pc}
 80103d2:	bf00      	nop

080103d4 <ucdr_buffer_length>:
 80103d4:	6882      	ldr	r2, [r0, #8]
 80103d6:	6800      	ldr	r0, [r0, #0]
 80103d8:	1a10      	subs	r0, r2, r0
 80103da:	4770      	bx	lr

080103dc <ucdr_buffer_remaining>:
 80103dc:	e9d0 2001 	ldrd	r2, r0, [r0, #4]
 80103e0:	1a10      	subs	r0, r2, r0
 80103e2:	4770      	bx	lr

080103e4 <ucdr_check_final_buffer_behavior_array>:
 80103e4:	b538      	push	{r3, r4, r5, lr}
 80103e6:	7d83      	ldrb	r3, [r0, #22]
 80103e8:	b963      	cbnz	r3, 8010404 <ucdr_check_final_buffer_behavior_array+0x20>
 80103ea:	e9d0 3201 	ldrd	r3, r2, [r0, #4]
 80103ee:	429a      	cmp	r2, r3
 80103f0:	4604      	mov	r4, r0
 80103f2:	460d      	mov	r5, r1
 80103f4:	d308      	bcc.n	8010408 <ucdr_check_final_buffer_behavior_array+0x24>
 80103f6:	b139      	cbz	r1, 8010408 <ucdr_check_final_buffer_behavior_array+0x24>
 80103f8:	6983      	ldr	r3, [r0, #24]
 80103fa:	b163      	cbz	r3, 8010416 <ucdr_check_final_buffer_behavior_array+0x32>
 80103fc:	69c1      	ldr	r1, [r0, #28]
 80103fe:	4798      	blx	r3
 8010400:	75a0      	strb	r0, [r4, #22]
 8010402:	b108      	cbz	r0, 8010408 <ucdr_check_final_buffer_behavior_array+0x24>
 8010404:	2000      	movs	r0, #0
 8010406:	bd38      	pop	{r3, r4, r5, pc}
 8010408:	4620      	mov	r0, r4
 801040a:	f7ff ffe7 	bl	80103dc <ucdr_buffer_remaining>
 801040e:	42a8      	cmp	r0, r5
 8010410:	bf28      	it	cs
 8010412:	4628      	movcs	r0, r5
 8010414:	bd38      	pop	{r3, r4, r5, pc}
 8010416:	2301      	movs	r3, #1
 8010418:	7583      	strb	r3, [r0, #22]
 801041a:	e7f3      	b.n	8010404 <ucdr_check_final_buffer_behavior_array+0x20>

0801041c <ucdr_advance_buffer>:
 801041c:	b538      	push	{r3, r4, r5, lr}
 801041e:	4604      	mov	r4, r0
 8010420:	460d      	mov	r5, r1
 8010422:	f7ff ff59 	bl	80102d8 <ucdr_check_buffer_available_for>
 8010426:	b178      	cbz	r0, 8010448 <ucdr_advance_buffer+0x2c>
 8010428:	68a3      	ldr	r3, [r4, #8]
 801042a:	6921      	ldr	r1, [r4, #16]
 801042c:	442b      	add	r3, r5
 801042e:	60a3      	str	r3, [r4, #8]
 8010430:	2301      	movs	r3, #1
 8010432:	4429      	add	r1, r5
 8010434:	7563      	strb	r3, [r4, #21]
 8010436:	6121      	str	r1, [r4, #16]
 8010438:	bd38      	pop	{r3, r4, r5, pc}
 801043a:	68a2      	ldr	r2, [r4, #8]
 801043c:	6923      	ldr	r3, [r4, #16]
 801043e:	4402      	add	r2, r0
 8010440:	4403      	add	r3, r0
 8010442:	1a2d      	subs	r5, r5, r0
 8010444:	60a2      	str	r2, [r4, #8]
 8010446:	6123      	str	r3, [r4, #16]
 8010448:	2201      	movs	r2, #1
 801044a:	4629      	mov	r1, r5
 801044c:	4620      	mov	r0, r4
 801044e:	f7ff ffc9 	bl	80103e4 <ucdr_check_final_buffer_behavior_array>
 8010452:	2800      	cmp	r0, #0
 8010454:	d1f1      	bne.n	801043a <ucdr_advance_buffer+0x1e>
 8010456:	2301      	movs	r3, #1
 8010458:	7563      	strb	r3, [r4, #21]
 801045a:	bd38      	pop	{r3, r4, r5, pc}

0801045c <ucdr_serialize_sequence_char>:
 801045c:	b570      	push	{r4, r5, r6, lr}
 801045e:	460e      	mov	r6, r1
 8010460:	4615      	mov	r5, r2
 8010462:	7d01      	ldrb	r1, [r0, #20]
 8010464:	4604      	mov	r4, r0
 8010466:	f7ff f8ed 	bl	800f644 <ucdr_serialize_endian_uint32_t>
 801046a:	b90d      	cbnz	r5, 8010470 <ucdr_serialize_sequence_char+0x14>
 801046c:	2001      	movs	r0, #1
 801046e:	bd70      	pop	{r4, r5, r6, pc}
 8010470:	7d21      	ldrb	r1, [r4, #20]
 8010472:	462b      	mov	r3, r5
 8010474:	4632      	mov	r2, r6
 8010476:	4620      	mov	r0, r4
 8010478:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801047c:	f006 bfa8 	b.w	80173d0 <ucdr_serialize_endian_array_char>

08010480 <ucdr_deserialize_sequence_char>:
 8010480:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010484:	461d      	mov	r5, r3
 8010486:	4616      	mov	r6, r2
 8010488:	460f      	mov	r7, r1
 801048a:	461a      	mov	r2, r3
 801048c:	7d01      	ldrb	r1, [r0, #20]
 801048e:	4604      	mov	r4, r0
 8010490:	f7ff fa00 	bl	800f894 <ucdr_deserialize_endian_uint32_t>
 8010494:	682b      	ldr	r3, [r5, #0]
 8010496:	429e      	cmp	r6, r3
 8010498:	bf3c      	itt	cc
 801049a:	2201      	movcc	r2, #1
 801049c:	75a2      	strbcc	r2, [r4, #22]
 801049e:	b913      	cbnz	r3, 80104a6 <ucdr_deserialize_sequence_char+0x26>
 80104a0:	2001      	movs	r0, #1
 80104a2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80104a6:	7d21      	ldrb	r1, [r4, #20]
 80104a8:	463a      	mov	r2, r7
 80104aa:	4620      	mov	r0, r4
 80104ac:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80104b0:	f006 bfc0 	b.w	8017434 <ucdr_deserialize_endian_array_char>

080104b4 <ucdr_serialize_sequence_uint8_t>:
 80104b4:	b570      	push	{r4, r5, r6, lr}
 80104b6:	460e      	mov	r6, r1
 80104b8:	4615      	mov	r5, r2
 80104ba:	7d01      	ldrb	r1, [r0, #20]
 80104bc:	4604      	mov	r4, r0
 80104be:	f7ff f8c1 	bl	800f644 <ucdr_serialize_endian_uint32_t>
 80104c2:	b90d      	cbnz	r5, 80104c8 <ucdr_serialize_sequence_uint8_t+0x14>
 80104c4:	2001      	movs	r0, #1
 80104c6:	bd70      	pop	{r4, r5, r6, pc}
 80104c8:	7d21      	ldrb	r1, [r4, #20]
 80104ca:	462b      	mov	r3, r5
 80104cc:	4632      	mov	r2, r6
 80104ce:	4620      	mov	r0, r4
 80104d0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80104d4:	f007 b812 	b.w	80174fc <ucdr_serialize_endian_array_uint8_t>

080104d8 <ucdr_deserialize_sequence_uint8_t>:
 80104d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80104dc:	461d      	mov	r5, r3
 80104de:	4616      	mov	r6, r2
 80104e0:	460f      	mov	r7, r1
 80104e2:	461a      	mov	r2, r3
 80104e4:	7d01      	ldrb	r1, [r0, #20]
 80104e6:	4604      	mov	r4, r0
 80104e8:	f7ff f9d4 	bl	800f894 <ucdr_deserialize_endian_uint32_t>
 80104ec:	682b      	ldr	r3, [r5, #0]
 80104ee:	429e      	cmp	r6, r3
 80104f0:	bf3c      	itt	cc
 80104f2:	2201      	movcc	r2, #1
 80104f4:	75a2      	strbcc	r2, [r4, #22]
 80104f6:	b913      	cbnz	r3, 80104fe <ucdr_deserialize_sequence_uint8_t+0x26>
 80104f8:	2001      	movs	r0, #1
 80104fa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80104fe:	7d21      	ldrb	r1, [r4, #20]
 8010500:	463a      	mov	r2, r7
 8010502:	4620      	mov	r0, r4
 8010504:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8010508:	f007 b85c 	b.w	80175c4 <ucdr_deserialize_endian_array_uint8_t>

0801050c <ucdr_serialize_sequence_double>:
 801050c:	b570      	push	{r4, r5, r6, lr}
 801050e:	460e      	mov	r6, r1
 8010510:	4615      	mov	r5, r2
 8010512:	7d01      	ldrb	r1, [r0, #20]
 8010514:	4604      	mov	r4, r0
 8010516:	f7ff f895 	bl	800f644 <ucdr_serialize_endian_uint32_t>
 801051a:	b90d      	cbnz	r5, 8010520 <ucdr_serialize_sequence_double+0x14>
 801051c:	2001      	movs	r0, #1
 801051e:	bd70      	pop	{r4, r5, r6, pc}
 8010520:	7d21      	ldrb	r1, [r4, #20]
 8010522:	462b      	mov	r3, r5
 8010524:	4632      	mov	r2, r6
 8010526:	4620      	mov	r0, r4
 8010528:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801052c:	f007 b87c 	b.w	8017628 <ucdr_serialize_endian_array_double>

08010530 <ucdr_deserialize_sequence_double>:
 8010530:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010534:	461d      	mov	r5, r3
 8010536:	4616      	mov	r6, r2
 8010538:	460f      	mov	r7, r1
 801053a:	461a      	mov	r2, r3
 801053c:	7d01      	ldrb	r1, [r0, #20]
 801053e:	4604      	mov	r4, r0
 8010540:	f7ff f9a8 	bl	800f894 <ucdr_deserialize_endian_uint32_t>
 8010544:	682b      	ldr	r3, [r5, #0]
 8010546:	429e      	cmp	r6, r3
 8010548:	bf3c      	itt	cc
 801054a:	2201      	movcc	r2, #1
 801054c:	75a2      	strbcc	r2, [r4, #22]
 801054e:	b913      	cbnz	r3, 8010556 <ucdr_deserialize_sequence_double+0x26>
 8010550:	2001      	movs	r0, #1
 8010552:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010556:	7d21      	ldrb	r1, [r4, #20]
 8010558:	463a      	mov	r2, r7
 801055a:	4620      	mov	r0, r4
 801055c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8010560:	f007 b8b8 	b.w	80176d4 <ucdr_deserialize_endian_array_double>

08010564 <uxr_buffer_delete_entity>:
 8010564:	b530      	push	{r4, r5, lr}
 8010566:	b08f      	sub	sp, #60	@ 0x3c
 8010568:	2403      	movs	r4, #3
 801056a:	2500      	movs	r5, #0
 801056c:	e9cd 4500 	strd	r4, r5, [sp]
 8010570:	9202      	str	r2, [sp, #8]
 8010572:	ab06      	add	r3, sp, #24
 8010574:	2204      	movs	r2, #4
 8010576:	9103      	str	r1, [sp, #12]
 8010578:	4604      	mov	r4, r0
 801057a:	f001 f95f 	bl	801183c <uxr_prepare_stream_to_write_submessage>
 801057e:	b918      	cbnz	r0, 8010588 <uxr_buffer_delete_entity+0x24>
 8010580:	4604      	mov	r4, r0
 8010582:	4620      	mov	r0, r4
 8010584:	b00f      	add	sp, #60	@ 0x3c
 8010586:	bd30      	pop	{r4, r5, pc}
 8010588:	9902      	ldr	r1, [sp, #8]
 801058a:	aa05      	add	r2, sp, #20
 801058c:	4620      	mov	r0, r4
 801058e:	f001 fa8f 	bl	8011ab0 <uxr_init_base_object_request>
 8010592:	a905      	add	r1, sp, #20
 8010594:	4604      	mov	r4, r0
 8010596:	a806      	add	r0, sp, #24
 8010598:	f002 fcca 	bl	8012f30 <uxr_serialize_DELETE_Payload>
 801059c:	4620      	mov	r0, r4
 801059e:	b00f      	add	sp, #60	@ 0x3c
 80105a0:	bd30      	pop	{r4, r5, pc}
 80105a2:	bf00      	nop

080105a4 <uxr_common_create_entity>:
 80105a4:	b530      	push	{r4, r5, lr}
 80105a6:	f3c2 4507 	ubfx	r5, r2, #16, #8
 80105aa:	b08d      	sub	sp, #52	@ 0x34
 80105ac:	e9cd 2102 	strd	r2, r1, [sp, #8]
 80105b0:	2d01      	cmp	r5, #1
 80105b2:	bf0c      	ite	eq
 80105b4:	f003 0201 	andeq.w	r2, r3, #1
 80105b8:	2200      	movne	r2, #0
 80105ba:	330e      	adds	r3, #14
 80105bc:	4604      	mov	r4, r0
 80105be:	441a      	add	r2, r3
 80105c0:	f89d 0040 	ldrb.w	r0, [sp, #64]	@ 0x40
 80105c4:	9001      	str	r0, [sp, #4]
 80105c6:	2101      	movs	r1, #1
 80105c8:	9100      	str	r1, [sp, #0]
 80105ca:	b292      	uxth	r2, r2
 80105cc:	9903      	ldr	r1, [sp, #12]
 80105ce:	ab04      	add	r3, sp, #16
 80105d0:	4620      	mov	r0, r4
 80105d2:	f001 f933 	bl	801183c <uxr_prepare_stream_to_write_submessage>
 80105d6:	b918      	cbnz	r0, 80105e0 <uxr_common_create_entity+0x3c>
 80105d8:	4604      	mov	r4, r0
 80105da:	4620      	mov	r0, r4
 80105dc:	b00d      	add	sp, #52	@ 0x34
 80105de:	bd30      	pop	{r4, r5, pc}
 80105e0:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 80105e2:	9902      	ldr	r1, [sp, #8]
 80105e4:	4620      	mov	r0, r4
 80105e6:	f001 fa63 	bl	8011ab0 <uxr_init_base_object_request>
 80105ea:	9911      	ldr	r1, [sp, #68]	@ 0x44
 80105ec:	4604      	mov	r4, r0
 80105ee:	a804      	add	r0, sp, #16
 80105f0:	f002 fbf2 	bl	8012dd8 <uxr_serialize_CREATE_Payload>
 80105f4:	4620      	mov	r0, r4
 80105f6:	b00d      	add	sp, #52	@ 0x34
 80105f8:	bd30      	pop	{r4, r5, pc}
 80105fa:	bf00      	nop

080105fc <uxr_buffer_create_participant_bin>:
 80105fc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80105fe:	f5ad 7d17 	sub.w	sp, sp, #604	@ 0x25c
 8010602:	ac11      	add	r4, sp, #68	@ 0x44
 8010604:	9103      	str	r1, [sp, #12]
 8010606:	9e9c      	ldr	r6, [sp, #624]	@ 0x270
 8010608:	f8a4 3210 	strh.w	r3, [r4, #528]	@ 0x210
 801060c:	2103      	movs	r1, #3
 801060e:	7221      	strb	r1, [r4, #8]
 8010610:	2301      	movs	r3, #1
 8010612:	2100      	movs	r1, #0
 8010614:	7123      	strb	r3, [r4, #4]
 8010616:	f89d 7274 	ldrb.w	r7, [sp, #628]	@ 0x274
 801061a:	9202      	str	r2, [sp, #8]
 801061c:	4605      	mov	r5, r0
 801061e:	f88d 1014 	strb.w	r1, [sp, #20]
 8010622:	b1ce      	cbz	r6, 8010658 <uxr_buffer_create_participant_bin+0x5c>
 8010624:	f88d 301c 	strb.w	r3, [sp, #28]
 8010628:	9608      	str	r6, [sp, #32]
 801062a:	a809      	add	r0, sp, #36	@ 0x24
 801062c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8010630:	a915      	add	r1, sp, #84	@ 0x54
 8010632:	f7ff fea3 	bl	801037c <ucdr_init_buffer>
 8010636:	a905      	add	r1, sp, #20
 8010638:	a809      	add	r0, sp, #36	@ 0x24
 801063a:	f001 ff95 	bl	8012568 <uxr_serialize_OBJK_DomainParticipant_Binary>
 801063e:	980d      	ldr	r0, [sp, #52]	@ 0x34
 8010640:	9401      	str	r4, [sp, #4]
 8010642:	b283      	uxth	r3, r0
 8010644:	9700      	str	r7, [sp, #0]
 8010646:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 801064a:	60e0      	str	r0, [r4, #12]
 801064c:	4628      	mov	r0, r5
 801064e:	f7ff ffa9 	bl	80105a4 <uxr_common_create_entity>
 8010652:	f50d 7d17 	add.w	sp, sp, #604	@ 0x25c
 8010656:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010658:	f88d 601c 	strb.w	r6, [sp, #28]
 801065c:	e7e5      	b.n	801062a <uxr_buffer_create_participant_bin+0x2e>
 801065e:	bf00      	nop

08010660 <uxr_buffer_create_topic_bin>:
 8010660:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010662:	f5ad 7d19 	sub.w	sp, sp, #612	@ 0x264
 8010666:	ac13      	add	r4, sp, #76	@ 0x4c
 8010668:	4605      	mov	r5, r0
 801066a:	9105      	str	r1, [sp, #20]
 801066c:	4618      	mov	r0, r3
 801066e:	a997      	add	r1, sp, #604	@ 0x25c
 8010670:	2602      	movs	r6, #2
 8010672:	e9cd 3203 	strd	r3, r2, [sp, #12]
 8010676:	f89d 7280 	ldrb.w	r7, [sp, #640]	@ 0x280
 801067a:	f88d 6050 	strb.w	r6, [sp, #80]	@ 0x50
 801067e:	9e9f      	ldr	r6, [sp, #636]	@ 0x27c
 8010680:	f000 f994 	bl	80109ac <uxr_object_id_to_raw>
 8010684:	9a9e      	ldr	r2, [sp, #632]	@ 0x278
 8010686:	9206      	str	r2, [sp, #24]
 8010688:	2303      	movs	r3, #3
 801068a:	2101      	movs	r1, #1
 801068c:	7223      	strb	r3, [r4, #8]
 801068e:	a80b      	add	r0, sp, #44	@ 0x2c
 8010690:	2300      	movs	r3, #0
 8010692:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8010696:	f88d 1024 	strb.w	r1, [sp, #36]	@ 0x24
 801069a:	a917      	add	r1, sp, #92	@ 0x5c
 801069c:	f88d 301c 	strb.w	r3, [sp, #28]
 80106a0:	960a      	str	r6, [sp, #40]	@ 0x28
 80106a2:	f7ff fe6b 	bl	801037c <ucdr_init_buffer>
 80106a6:	a906      	add	r1, sp, #24
 80106a8:	a80b      	add	r0, sp, #44	@ 0x2c
 80106aa:	f001 ff7f 	bl	80125ac <uxr_serialize_OBJK_Topic_Binary>
 80106ae:	9e0f      	ldr	r6, [sp, #60]	@ 0x3c
 80106b0:	9401      	str	r4, [sp, #4]
 80106b2:	9700      	str	r7, [sp, #0]
 80106b4:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 80106b8:	4628      	mov	r0, r5
 80106ba:	b2b3      	uxth	r3, r6
 80106bc:	60e6      	str	r6, [r4, #12]
 80106be:	f7ff ff71 	bl	80105a4 <uxr_common_create_entity>
 80106c2:	f50d 7d19 	add.w	sp, sp, #612	@ 0x264
 80106c6:	bdf0      	pop	{r4, r5, r6, r7, pc}

080106c8 <uxr_buffer_create_publisher_bin>:
 80106c8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80106ca:	f2ad 4d8c 	subw	sp, sp, #1164	@ 0x48c
 80106ce:	ac0e      	add	r4, sp, #56	@ 0x38
 80106d0:	4605      	mov	r5, r0
 80106d2:	9105      	str	r1, [sp, #20]
 80106d4:	4618      	mov	r0, r3
 80106d6:	2603      	movs	r6, #3
 80106d8:	a992      	add	r1, sp, #584	@ 0x248
 80106da:	e9cd 3203 	strd	r3, r2, [sp, #12]
 80106de:	f89d 74a0 	ldrb.w	r7, [sp, #1184]	@ 0x4a0
 80106e2:	f88d 603c 	strb.w	r6, [sp, #60]	@ 0x3c
 80106e6:	f000 f961 	bl	80109ac <uxr_object_id_to_raw>
 80106ea:	2300      	movs	r3, #0
 80106ec:	a806      	add	r0, sp, #24
 80106ee:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80106f2:	a912      	add	r1, sp, #72	@ 0x48
 80106f4:	f88d 324c 	strb.w	r3, [sp, #588]	@ 0x24c
 80106f8:	f88d 3254 	strb.w	r3, [sp, #596]	@ 0x254
 80106fc:	7226      	strb	r6, [r4, #8]
 80106fe:	f7ff fe3d 	bl	801037c <ucdr_init_buffer>
 8010702:	a993      	add	r1, sp, #588	@ 0x24c
 8010704:	a806      	add	r0, sp, #24
 8010706:	f002 f805 	bl	8012714 <uxr_serialize_OBJK_Publisher_Binary>
 801070a:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 801070c:	9700      	str	r7, [sp, #0]
 801070e:	9401      	str	r4, [sp, #4]
 8010710:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 8010714:	4628      	mov	r0, r5
 8010716:	b2b3      	uxth	r3, r6
 8010718:	60e6      	str	r6, [r4, #12]
 801071a:	f7ff ff43 	bl	80105a4 <uxr_common_create_entity>
 801071e:	f20d 4d8c 	addw	sp, sp, #1164	@ 0x48c
 8010722:	bdf0      	pop	{r4, r5, r6, r7, pc}

08010724 <uxr_buffer_create_subscriber_bin>:
 8010724:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010726:	f2ad 4d8c 	subw	sp, sp, #1164	@ 0x48c
 801072a:	ac0e      	add	r4, sp, #56	@ 0x38
 801072c:	4605      	mov	r5, r0
 801072e:	9105      	str	r1, [sp, #20]
 8010730:	4618      	mov	r0, r3
 8010732:	a992      	add	r1, sp, #584	@ 0x248
 8010734:	2604      	movs	r6, #4
 8010736:	e9cd 3203 	strd	r3, r2, [sp, #12]
 801073a:	f89d 74a0 	ldrb.w	r7, [sp, #1184]	@ 0x4a0
 801073e:	f88d 603c 	strb.w	r6, [sp, #60]	@ 0x3c
 8010742:	f000 f933 	bl	80109ac <uxr_object_id_to_raw>
 8010746:	2103      	movs	r1, #3
 8010748:	2300      	movs	r3, #0
 801074a:	a806      	add	r0, sp, #24
 801074c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8010750:	7221      	strb	r1, [r4, #8]
 8010752:	a912      	add	r1, sp, #72	@ 0x48
 8010754:	f88d 324c 	strb.w	r3, [sp, #588]	@ 0x24c
 8010758:	f88d 3254 	strb.w	r3, [sp, #596]	@ 0x254
 801075c:	f7ff fe0e 	bl	801037c <ucdr_init_buffer>
 8010760:	a993      	add	r1, sp, #588	@ 0x24c
 8010762:	a806      	add	r0, sp, #24
 8010764:	f002 f886 	bl	8012874 <uxr_serialize_OBJK_Subscriber_Binary>
 8010768:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 801076a:	9700      	str	r7, [sp, #0]
 801076c:	9401      	str	r4, [sp, #4]
 801076e:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 8010772:	4628      	mov	r0, r5
 8010774:	b2b3      	uxth	r3, r6
 8010776:	60e6      	str	r6, [r4, #12]
 8010778:	f7ff ff14 	bl	80105a4 <uxr_common_create_entity>
 801077c:	f20d 4d8c 	addw	sp, sp, #1164	@ 0x48c
 8010780:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010782:	bf00      	nop

08010784 <uxr_buffer_create_datawriter_bin>:
 8010784:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010788:	f5ad 7d22 	sub.w	sp, sp, #648	@ 0x288
 801078c:	ac1d      	add	r4, sp, #116	@ 0x74
 801078e:	2505      	movs	r5, #5
 8010790:	e9cd 3203 	strd	r3, r2, [sp, #12]
 8010794:	9105      	str	r1, [sp, #20]
 8010796:	4606      	mov	r6, r0
 8010798:	a9a1      	add	r1, sp, #644	@ 0x284
 801079a:	4618      	mov	r0, r3
 801079c:	7125      	strb	r5, [r4, #4]
 801079e:	f8bd 52a8 	ldrh.w	r5, [sp, #680]	@ 0x2a8
 80107a2:	f89d 82ac 	ldrb.w	r8, [sp, #684]	@ 0x2ac
 80107a6:	2703      	movs	r7, #3
 80107a8:	f000 f900 	bl	80109ac <uxr_object_id_to_raw>
 80107ac:	a90e      	add	r1, sp, #56	@ 0x38
 80107ae:	98a8      	ldr	r0, [sp, #672]	@ 0x2a0
 80107b0:	7227      	strb	r7, [r4, #8]
 80107b2:	f000 f8fb 	bl	80109ac <uxr_object_id_to_raw>
 80107b6:	f8ad 5044 	strh.w	r5, [sp, #68]	@ 0x44
 80107ba:	f89d 12a5 	ldrb.w	r1, [sp, #677]	@ 0x2a5
 80107be:	3d00      	subs	r5, #0
 80107c0:	f04f 0300 	mov.w	r3, #0
 80107c4:	bf18      	it	ne
 80107c6:	2501      	movne	r5, #1
 80107c8:	2201      	movs	r2, #1
 80107ca:	f88d 5042 	strb.w	r5, [sp, #66]	@ 0x42
 80107ce:	f88d 203a 	strb.w	r2, [sp, #58]	@ 0x3a
 80107d2:	f88d 3064 	strb.w	r3, [sp, #100]	@ 0x64
 80107d6:	f88d 3046 	strb.w	r3, [sp, #70]	@ 0x46
 80107da:	f88d 304c 	strb.w	r3, [sp, #76]	@ 0x4c
 80107de:	f88d 3054 	strb.w	r3, [sp, #84]	@ 0x54
 80107e2:	f8ad 3040 	strh.w	r3, [sp, #64]	@ 0x40
 80107e6:	bb89      	cbnz	r1, 801084c <uxr_buffer_create_datawriter_bin+0xc8>
 80107e8:	f8ad 2040 	strh.w	r2, [sp, #64]	@ 0x40
 80107ec:	f04f 0e23 	mov.w	lr, #35	@ 0x23
 80107f0:	f04f 0c13 	mov.w	ip, #19
 80107f4:	250b      	movs	r5, #11
 80107f6:	2221      	movs	r2, #33	@ 0x21
 80107f8:	2111      	movs	r1, #17
 80107fa:	2009      	movs	r0, #9
 80107fc:	f89d 32a6 	ldrb.w	r3, [sp, #678]	@ 0x2a6
 8010800:	b923      	cbnz	r3, 801080c <uxr_buffer_create_datawriter_bin+0x88>
 8010802:	f8ad 7040 	strh.w	r7, [sp, #64]	@ 0x40
 8010806:	4672      	mov	r2, lr
 8010808:	4661      	mov	r1, ip
 801080a:	4628      	mov	r0, r5
 801080c:	f89d 32a4 	ldrb.w	r3, [sp, #676]	@ 0x2a4
 8010810:	2b01      	cmp	r3, #1
 8010812:	d025      	beq.n	8010860 <uxr_buffer_create_datawriter_bin+0xdc>
 8010814:	2b03      	cmp	r3, #3
 8010816:	d029      	beq.n	801086c <uxr_buffer_create_datawriter_bin+0xe8>
 8010818:	b32b      	cbz	r3, 8010866 <uxr_buffer_create_datawriter_bin+0xe2>
 801081a:	a806      	add	r0, sp, #24
 801081c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8010820:	a921      	add	r1, sp, #132	@ 0x84
 8010822:	f7ff fdab 	bl	801037c <ucdr_init_buffer>
 8010826:	a90e      	add	r1, sp, #56	@ 0x38
 8010828:	a806      	add	r0, sp, #24
 801082a:	f002 f8d5 	bl	80129d8 <uxr_serialize_OBJK_DataWriter_Binary>
 801082e:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8010830:	9401      	str	r4, [sp, #4]
 8010832:	b283      	uxth	r3, r0
 8010834:	f8cd 8000 	str.w	r8, [sp]
 8010838:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 801083c:	60e0      	str	r0, [r4, #12]
 801083e:	4630      	mov	r0, r6
 8010840:	f7ff feb0 	bl	80105a4 <uxr_common_create_entity>
 8010844:	f50d 7d22 	add.w	sp, sp, #648	@ 0x288
 8010848:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801084c:	f04f 0e22 	mov.w	lr, #34	@ 0x22
 8010850:	f04f 0c12 	mov.w	ip, #18
 8010854:	250a      	movs	r5, #10
 8010856:	2220      	movs	r2, #32
 8010858:	2110      	movs	r1, #16
 801085a:	2008      	movs	r0, #8
 801085c:	2702      	movs	r7, #2
 801085e:	e7cd      	b.n	80107fc <uxr_buffer_create_datawriter_bin+0x78>
 8010860:	f8ad 1040 	strh.w	r1, [sp, #64]	@ 0x40
 8010864:	e7d9      	b.n	801081a <uxr_buffer_create_datawriter_bin+0x96>
 8010866:	f8ad 0040 	strh.w	r0, [sp, #64]	@ 0x40
 801086a:	e7d6      	b.n	801081a <uxr_buffer_create_datawriter_bin+0x96>
 801086c:	f8ad 2040 	strh.w	r2, [sp, #64]	@ 0x40
 8010870:	e7d3      	b.n	801081a <uxr_buffer_create_datawriter_bin+0x96>
 8010872:	bf00      	nop

08010874 <uxr_buffer_create_datareader_bin>:
 8010874:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010878:	f5ad 7d24 	sub.w	sp, sp, #656	@ 0x290
 801087c:	ac1f      	add	r4, sp, #124	@ 0x7c
 801087e:	2506      	movs	r5, #6
 8010880:	e9cd 3203 	strd	r3, r2, [sp, #12]
 8010884:	9105      	str	r1, [sp, #20]
 8010886:	4606      	mov	r6, r0
 8010888:	a9a3      	add	r1, sp, #652	@ 0x28c
 801088a:	4618      	mov	r0, r3
 801088c:	7125      	strb	r5, [r4, #4]
 801088e:	f8bd 52b0 	ldrh.w	r5, [sp, #688]	@ 0x2b0
 8010892:	f89d 82b4 	ldrb.w	r8, [sp, #692]	@ 0x2b4
 8010896:	2703      	movs	r7, #3
 8010898:	f000 f888 	bl	80109ac <uxr_object_id_to_raw>
 801089c:	a90e      	add	r1, sp, #56	@ 0x38
 801089e:	98aa      	ldr	r0, [sp, #680]	@ 0x2a8
 80108a0:	7227      	strb	r7, [r4, #8]
 80108a2:	f000 f883 	bl	80109ac <uxr_object_id_to_raw>
 80108a6:	f8ad 5044 	strh.w	r5, [sp, #68]	@ 0x44
 80108aa:	f89d 12ad 	ldrb.w	r1, [sp, #685]	@ 0x2ad
 80108ae:	3d00      	subs	r5, #0
 80108b0:	f04f 0300 	mov.w	r3, #0
 80108b4:	bf18      	it	ne
 80108b6:	2501      	movne	r5, #1
 80108b8:	2201      	movs	r2, #1
 80108ba:	f88d 5042 	strb.w	r5, [sp, #66]	@ 0x42
 80108be:	f88d 203a 	strb.w	r2, [sp, #58]	@ 0x3a
 80108c2:	f88d 3070 	strb.w	r3, [sp, #112]	@ 0x70
 80108c6:	f88d 3064 	strb.w	r3, [sp, #100]	@ 0x64
 80108ca:	f88d 3046 	strb.w	r3, [sp, #70]	@ 0x46
 80108ce:	f88d 304c 	strb.w	r3, [sp, #76]	@ 0x4c
 80108d2:	f88d 3054 	strb.w	r3, [sp, #84]	@ 0x54
 80108d6:	f8ad 3040 	strh.w	r3, [sp, #64]	@ 0x40
 80108da:	bb89      	cbnz	r1, 8010940 <uxr_buffer_create_datareader_bin+0xcc>
 80108dc:	f8ad 2040 	strh.w	r2, [sp, #64]	@ 0x40
 80108e0:	f04f 0e23 	mov.w	lr, #35	@ 0x23
 80108e4:	f04f 0c13 	mov.w	ip, #19
 80108e8:	250b      	movs	r5, #11
 80108ea:	2221      	movs	r2, #33	@ 0x21
 80108ec:	2111      	movs	r1, #17
 80108ee:	2009      	movs	r0, #9
 80108f0:	f89d 32ae 	ldrb.w	r3, [sp, #686]	@ 0x2ae
 80108f4:	b923      	cbnz	r3, 8010900 <uxr_buffer_create_datareader_bin+0x8c>
 80108f6:	f8ad 7040 	strh.w	r7, [sp, #64]	@ 0x40
 80108fa:	4672      	mov	r2, lr
 80108fc:	4661      	mov	r1, ip
 80108fe:	4628      	mov	r0, r5
 8010900:	f89d 32ac 	ldrb.w	r3, [sp, #684]	@ 0x2ac
 8010904:	2b01      	cmp	r3, #1
 8010906:	d025      	beq.n	8010954 <uxr_buffer_create_datareader_bin+0xe0>
 8010908:	2b03      	cmp	r3, #3
 801090a:	d029      	beq.n	8010960 <uxr_buffer_create_datareader_bin+0xec>
 801090c:	b32b      	cbz	r3, 801095a <uxr_buffer_create_datareader_bin+0xe6>
 801090e:	a806      	add	r0, sp, #24
 8010910:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8010914:	a923      	add	r1, sp, #140	@ 0x8c
 8010916:	f7ff fd31 	bl	801037c <ucdr_init_buffer>
 801091a:	a90e      	add	r1, sp, #56	@ 0x38
 801091c:	a806      	add	r0, sp, #24
 801091e:	f002 f81f 	bl	8012960 <uxr_serialize_OBJK_DataReader_Binary>
 8010922:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8010924:	9401      	str	r4, [sp, #4]
 8010926:	b283      	uxth	r3, r0
 8010928:	f8cd 8000 	str.w	r8, [sp]
 801092c:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 8010930:	60e0      	str	r0, [r4, #12]
 8010932:	4630      	mov	r0, r6
 8010934:	f7ff fe36 	bl	80105a4 <uxr_common_create_entity>
 8010938:	f50d 7d24 	add.w	sp, sp, #656	@ 0x290
 801093c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010940:	f04f 0e22 	mov.w	lr, #34	@ 0x22
 8010944:	f04f 0c12 	mov.w	ip, #18
 8010948:	250a      	movs	r5, #10
 801094a:	2220      	movs	r2, #32
 801094c:	2110      	movs	r1, #16
 801094e:	2008      	movs	r0, #8
 8010950:	2702      	movs	r7, #2
 8010952:	e7cd      	b.n	80108f0 <uxr_buffer_create_datareader_bin+0x7c>
 8010954:	f8ad 1040 	strh.w	r1, [sp, #64]	@ 0x40
 8010958:	e7d9      	b.n	801090e <uxr_buffer_create_datareader_bin+0x9a>
 801095a:	f8ad 0040 	strh.w	r0, [sp, #64]	@ 0x40
 801095e:	e7d6      	b.n	801090e <uxr_buffer_create_datareader_bin+0x9a>
 8010960:	f8ad 2040 	strh.w	r2, [sp, #64]	@ 0x40
 8010964:	e7d3      	b.n	801090e <uxr_buffer_create_datareader_bin+0x9a>
 8010966:	bf00      	nop

08010968 <uxr_object_id>:
 8010968:	b082      	sub	sp, #8
 801096a:	2300      	movs	r3, #0
 801096c:	f88d 1006 	strb.w	r1, [sp, #6]
 8010970:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 8010974:	f360 030f 	bfi	r3, r0, #0, #16
 8010978:	f362 431f 	bfi	r3, r2, #16, #16
 801097c:	4618      	mov	r0, r3
 801097e:	b002      	add	sp, #8
 8010980:	4770      	bx	lr
 8010982:	bf00      	nop

08010984 <uxr_object_id_from_raw>:
 8010984:	7843      	ldrb	r3, [r0, #1]
 8010986:	7801      	ldrb	r1, [r0, #0]
 8010988:	b082      	sub	sp, #8
 801098a:	f003 000f 	and.w	r0, r3, #15
 801098e:	f88d 0006 	strb.w	r0, [sp, #6]
 8010992:	091b      	lsrs	r3, r3, #4
 8010994:	eb03 1301 	add.w	r3, r3, r1, lsl #4
 8010998:	2200      	movs	r2, #0
 801099a:	f8bd 1006 	ldrh.w	r1, [sp, #6]
 801099e:	f363 020f 	bfi	r2, r3, #0, #16
 80109a2:	f361 421f 	bfi	r2, r1, #16, #16
 80109a6:	4610      	mov	r0, r2
 80109a8:	b002      	add	sp, #8
 80109aa:	4770      	bx	lr

080109ac <uxr_object_id_to_raw>:
 80109ac:	4602      	mov	r2, r0
 80109ae:	f3c0 4303 	ubfx	r3, r0, #16, #4
 80109b2:	b082      	sub	sp, #8
 80109b4:	eb03 1302 	add.w	r3, r3, r2, lsl #4
 80109b8:	f3c2 120b 	ubfx	r2, r2, #4, #12
 80109bc:	700a      	strb	r2, [r1, #0]
 80109be:	704b      	strb	r3, [r1, #1]
 80109c0:	b002      	add	sp, #8
 80109c2:	4770      	bx	lr

080109c4 <on_get_fragmentation_info>:
 80109c4:	b500      	push	{lr}
 80109c6:	b08b      	sub	sp, #44	@ 0x2c
 80109c8:	4601      	mov	r1, r0
 80109ca:	2204      	movs	r2, #4
 80109cc:	a802      	add	r0, sp, #8
 80109ce:	f7ff fcd5 	bl	801037c <ucdr_init_buffer>
 80109d2:	f10d 0305 	add.w	r3, sp, #5
 80109d6:	a802      	add	r0, sp, #8
 80109d8:	f10d 0206 	add.w	r2, sp, #6
 80109dc:	a901      	add	r1, sp, #4
 80109de:	f001 f9eb 	bl	8011db8 <uxr_read_submessage_header>
 80109e2:	f89d 3004 	ldrb.w	r3, [sp, #4]
 80109e6:	2b0d      	cmp	r3, #13
 80109e8:	d003      	beq.n	80109f2 <on_get_fragmentation_info+0x2e>
 80109ea:	2000      	movs	r0, #0
 80109ec:	b00b      	add	sp, #44	@ 0x2c
 80109ee:	f85d fb04 	ldr.w	pc, [sp], #4
 80109f2:	f89d 3005 	ldrb.w	r3, [sp, #5]
 80109f6:	f013 0f02 	tst.w	r3, #2
 80109fa:	bf14      	ite	ne
 80109fc:	2002      	movne	r0, #2
 80109fe:	2001      	moveq	r0, #1
 8010a00:	b00b      	add	sp, #44	@ 0x2c
 8010a02:	f85d fb04 	ldr.w	pc, [sp], #4
 8010a06:	bf00      	nop

08010a08 <read_submessage_get_info>:
 8010a08:	b570      	push	{r4, r5, r6, lr}
 8010a0a:	2500      	movs	r5, #0
 8010a0c:	f5ad 7d34 	sub.w	sp, sp, #720	@ 0x2d0
 8010a10:	4604      	mov	r4, r0
 8010a12:	f44f 7224 	mov.w	r2, #656	@ 0x290
 8010a16:	460e      	mov	r6, r1
 8010a18:	a810      	add	r0, sp, #64	@ 0x40
 8010a1a:	4629      	mov	r1, r5
 8010a1c:	e9cd 5503 	strd	r5, r5, [sp, #12]
 8010a20:	f009 f8b8 	bl	8019b94 <memset>
 8010a24:	a903      	add	r1, sp, #12
 8010a26:	4630      	mov	r0, r6
 8010a28:	f002 fa6e 	bl	8012f08 <uxr_deserialize_GET_INFO_Payload>
 8010a2c:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 8010a30:	f8ad 3040 	strh.w	r3, [sp, #64]	@ 0x40
 8010a34:	4620      	mov	r0, r4
 8010a36:	f001 f833 	bl	8011aa0 <uxr_session_header_offset>
 8010a3a:	462b      	mov	r3, r5
 8010a3c:	9000      	str	r0, [sp, #0]
 8010a3e:	a905      	add	r1, sp, #20
 8010a40:	a808      	add	r0, sp, #32
 8010a42:	220c      	movs	r2, #12
 8010a44:	f7ff fc88 	bl	8010358 <ucdr_init_buffer_origin_offset>
 8010a48:	a910      	add	r1, sp, #64	@ 0x40
 8010a4a:	a808      	add	r0, sp, #32
 8010a4c:	f002 face 	bl	8012fec <uxr_serialize_INFO_Payload>
 8010a50:	9b08      	ldr	r3, [sp, #32]
 8010a52:	462a      	mov	r2, r5
 8010a54:	4629      	mov	r1, r5
 8010a56:	4620      	mov	r0, r4
 8010a58:	f000 ffca 	bl	80119f0 <uxr_stamp_session_header>
 8010a5c:	a808      	add	r0, sp, #32
 8010a5e:	f7ff fcb9 	bl	80103d4 <ucdr_buffer_length>
 8010a62:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 8010a64:	4602      	mov	r2, r0
 8010a66:	a905      	add	r1, sp, #20
 8010a68:	e9d3 0400 	ldrd	r0, r4, [r3]
 8010a6c:	47a0      	blx	r4
 8010a6e:	f50d 7d34 	add.w	sp, sp, #720	@ 0x2d0
 8010a72:	bd70      	pop	{r4, r5, r6, pc}

08010a74 <write_submessage_acknack.isra.0>:
 8010a74:	b570      	push	{r4, r5, r6, lr}
 8010a76:	b092      	sub	sp, #72	@ 0x48
 8010a78:	4605      	mov	r5, r0
 8010a7a:	460e      	mov	r6, r1
 8010a7c:	4614      	mov	r4, r2
 8010a7e:	f001 f80f 	bl	8011aa0 <uxr_session_header_offset>
 8010a82:	a905      	add	r1, sp, #20
 8010a84:	9000      	str	r0, [sp, #0]
 8010a86:	2300      	movs	r3, #0
 8010a88:	a80a      	add	r0, sp, #40	@ 0x28
 8010a8a:	2211      	movs	r2, #17
 8010a8c:	f7ff fc64 	bl	8010358 <ucdr_init_buffer_origin_offset>
 8010a90:	2218      	movs	r2, #24
 8010a92:	fb02 5404 	mla	r4, r2, r4, r5
 8010a96:	2300      	movs	r3, #0
 8010a98:	2205      	movs	r2, #5
 8010a9a:	3450      	adds	r4, #80	@ 0x50
 8010a9c:	a80a      	add	r0, sp, #40	@ 0x28
 8010a9e:	210a      	movs	r1, #10
 8010aa0:	f001 f970 	bl	8011d84 <uxr_buffer_submessage_header>
 8010aa4:	a903      	add	r1, sp, #12
 8010aa6:	4620      	mov	r0, r4
 8010aa8:	f007 f8d8 	bl	8017c5c <uxr_compute_acknack>
 8010aac:	a903      	add	r1, sp, #12
 8010aae:	ba43      	rev16	r3, r0
 8010ab0:	a80a      	add	r0, sp, #40	@ 0x28
 8010ab2:	f8ad 300e 	strh.w	r3, [sp, #14]
 8010ab6:	f88d 6010 	strb.w	r6, [sp, #16]
 8010aba:	f002 fb07 	bl	80130cc <uxr_serialize_ACKNACK_Payload>
 8010abe:	2200      	movs	r2, #0
 8010ac0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8010ac2:	4611      	mov	r1, r2
 8010ac4:	4628      	mov	r0, r5
 8010ac6:	f000 ff93 	bl	80119f0 <uxr_stamp_session_header>
 8010aca:	a80a      	add	r0, sp, #40	@ 0x28
 8010acc:	f7ff fc82 	bl	80103d4 <ucdr_buffer_length>
 8010ad0:	6f2b      	ldr	r3, [r5, #112]	@ 0x70
 8010ad2:	4602      	mov	r2, r0
 8010ad4:	a905      	add	r1, sp, #20
 8010ad6:	e9d3 0400 	ldrd	r0, r4, [r3]
 8010ada:	47a0      	blx	r4
 8010adc:	b012      	add	sp, #72	@ 0x48
 8010ade:	bd70      	pop	{r4, r5, r6, pc}

08010ae0 <uxr_init_session>:
 8010ae0:	b5d0      	push	{r4, r6, r7, lr}
 8010ae2:	2300      	movs	r3, #0
 8010ae4:	2600      	movs	r6, #0
 8010ae6:	2700      	movs	r7, #0
 8010ae8:	e9c0 6726 	strd	r6, r7, [r0, #152]	@ 0x98
 8010aec:	4604      	mov	r4, r0
 8010aee:	6701      	str	r1, [r0, #112]	@ 0x70
 8010af0:	e9c0 331d 	strd	r3, r3, [r0, #116]	@ 0x74
 8010af4:	e9c0 331f 	strd	r3, r3, [r0, #124]	@ 0x7c
 8010af8:	e9c0 3321 	strd	r3, r3, [r0, #132]	@ 0x84
 8010afc:	e9c0 3323 	strd	r3, r3, [r0, #140]	@ 0x8c
 8010b00:	f8c0 3094 	str.w	r3, [r0, #148]	@ 0x94
 8010b04:	f880 30a0 	strb.w	r3, [r0, #160]	@ 0xa0
 8010b08:	2181      	movs	r1, #129	@ 0x81
 8010b0a:	f000 fedb 	bl	80118c4 <uxr_init_session_info>
 8010b0e:	f104 0008 	add.w	r0, r4, #8
 8010b12:	e8bd 40d0 	ldmia.w	sp!, {r4, r6, r7, lr}
 8010b16:	f001 b851 	b.w	8011bbc <uxr_init_stream_storage>
 8010b1a:	bf00      	nop

08010b1c <uxr_set_status_callback>:
 8010b1c:	e9c0 1220 	strd	r1, r2, [r0, #128]	@ 0x80
 8010b20:	4770      	bx	lr
 8010b22:	bf00      	nop

08010b24 <uxr_set_topic_callback>:
 8010b24:	e9c0 1222 	strd	r1, r2, [r0, #136]	@ 0x88
 8010b28:	4770      	bx	lr
 8010b2a:	bf00      	nop

08010b2c <uxr_set_request_callback>:
 8010b2c:	e9c0 1229 	strd	r1, r2, [r0, #164]	@ 0xa4
 8010b30:	4770      	bx	lr
 8010b32:	bf00      	nop

08010b34 <uxr_set_reply_callback>:
 8010b34:	e9c0 122b 	strd	r1, r2, [r0, #172]	@ 0xac
 8010b38:	4770      	bx	lr
 8010b3a:	bf00      	nop

08010b3c <uxr_create_output_best_effort_stream>:
 8010b3c:	b510      	push	{r4, lr}
 8010b3e:	b084      	sub	sp, #16
 8010b40:	e9cd 2100 	strd	r2, r1, [sp]
 8010b44:	4604      	mov	r4, r0
 8010b46:	f000 ffab 	bl	8011aa0 <uxr_session_header_offset>
 8010b4a:	e9dd 2100 	ldrd	r2, r1, [sp]
 8010b4e:	4603      	mov	r3, r0
 8010b50:	f104 0008 	add.w	r0, r4, #8
 8010b54:	b004      	add	sp, #16
 8010b56:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010b5a:	f001 b879 	b.w	8011c50 <uxr_add_output_best_effort_buffer>
 8010b5e:	bf00      	nop

08010b60 <uxr_create_output_reliable_stream>:
 8010b60:	b530      	push	{r4, r5, lr}
 8010b62:	b089      	sub	sp, #36	@ 0x24
 8010b64:	e9cd 2104 	strd	r2, r1, [sp, #16]
 8010b68:	9303      	str	r3, [sp, #12]
 8010b6a:	4604      	mov	r4, r0
 8010b6c:	f000 ff98 	bl	8011aa0 <uxr_session_header_offset>
 8010b70:	4605      	mov	r5, r0
 8010b72:	e9dd 3203 	ldrd	r3, r2, [sp, #12]
 8010b76:	9905      	ldr	r1, [sp, #20]
 8010b78:	9500      	str	r5, [sp, #0]
 8010b7a:	f104 0008 	add.w	r0, r4, #8
 8010b7e:	f001 f879 	bl	8011c74 <uxr_add_output_reliable_buffer>
 8010b82:	2200      	movs	r2, #0
 8010b84:	b2c3      	uxtb	r3, r0
 8010b86:	f363 0207 	bfi	r2, r3, #0, #8
 8010b8a:	f3c0 2307 	ubfx	r3, r0, #8, #8
 8010b8e:	f363 220f 	bfi	r2, r3, #8, #8
 8010b92:	f3c0 4307 	ubfx	r3, r0, #16, #8
 8010b96:	f363 4217 	bfi	r2, r3, #16, #8
 8010b9a:	0e03      	lsrs	r3, r0, #24
 8010b9c:	f363 621f 	bfi	r2, r3, #24, #8
 8010ba0:	4610      	mov	r0, r2
 8010ba2:	b009      	add	sp, #36	@ 0x24
 8010ba4:	bd30      	pop	{r4, r5, pc}
 8010ba6:	bf00      	nop

08010ba8 <uxr_create_input_best_effort_stream>:
 8010ba8:	b082      	sub	sp, #8
 8010baa:	3008      	adds	r0, #8
 8010bac:	b002      	add	sp, #8
 8010bae:	f001 b87b 	b.w	8011ca8 <uxr_add_input_best_effort_buffer>
 8010bb2:	bf00      	nop

08010bb4 <uxr_create_input_reliable_stream>:
 8010bb4:	b510      	push	{r4, lr}
 8010bb6:	b084      	sub	sp, #16
 8010bb8:	4c0b      	ldr	r4, [pc, #44]	@ (8010be8 <uxr_create_input_reliable_stream+0x34>)
 8010bba:	9400      	str	r4, [sp, #0]
 8010bbc:	3008      	adds	r0, #8
 8010bbe:	f001 f889 	bl	8011cd4 <uxr_add_input_reliable_buffer>
 8010bc2:	2200      	movs	r2, #0
 8010bc4:	b2c3      	uxtb	r3, r0
 8010bc6:	f363 0207 	bfi	r2, r3, #0, #8
 8010bca:	f3c0 2307 	ubfx	r3, r0, #8, #8
 8010bce:	f363 220f 	bfi	r2, r3, #8, #8
 8010bd2:	f3c0 4307 	ubfx	r3, r0, #16, #8
 8010bd6:	f363 4217 	bfi	r2, r3, #16, #8
 8010bda:	0e03      	lsrs	r3, r0, #24
 8010bdc:	f363 621f 	bfi	r2, r3, #24, #8
 8010be0:	4610      	mov	r0, r2
 8010be2:	b004      	add	sp, #16
 8010be4:	bd10      	pop	{r4, pc}
 8010be6:	bf00      	nop
 8010be8:	080109c5 	.word	0x080109c5

08010bec <uxr_epoch_nanos>:
 8010bec:	b510      	push	{r4, lr}
 8010bee:	4604      	mov	r4, r0
 8010bf0:	f001 f92a 	bl	8011e48 <uxr_nanos>
 8010bf4:	e9d4 3226 	ldrd	r3, r2, [r4, #152]	@ 0x98
 8010bf8:	1ac0      	subs	r0, r0, r3
 8010bfa:	eb61 0102 	sbc.w	r1, r1, r2
 8010bfe:	bd10      	pop	{r4, pc}

08010c00 <uxr_flash_output_streams>:
 8010c00:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010c04:	7e03      	ldrb	r3, [r0, #24]
 8010c06:	b084      	sub	sp, #16
 8010c08:	4604      	mov	r4, r0
 8010c0a:	b1fb      	cbz	r3, 8010c4c <uxr_flash_output_streams+0x4c>
 8010c0c:	f04f 0900 	mov.w	r9, #0
 8010c10:	4648      	mov	r0, r9
 8010c12:	f10d 0802 	add.w	r8, sp, #2
 8010c16:	af03      	add	r7, sp, #12
 8010c18:	ae02      	add	r6, sp, #8
 8010c1a:	2201      	movs	r2, #1
 8010c1c:	4611      	mov	r1, r2
 8010c1e:	eb04 1500 	add.w	r5, r4, r0, lsl #4
 8010c22:	f000 ff75 	bl	8011b10 <uxr_stream_id>
 8010c26:	3508      	adds	r5, #8
 8010c28:	4684      	mov	ip, r0
 8010c2a:	4643      	mov	r3, r8
 8010c2c:	4628      	mov	r0, r5
 8010c2e:	463a      	mov	r2, r7
 8010c30:	4631      	mov	r1, r6
 8010c32:	f8cd c004 	str.w	ip, [sp, #4]
 8010c36:	f007 f899 	bl	8017d6c <uxr_prepare_best_effort_buffer_to_send>
 8010c3a:	2800      	cmp	r0, #0
 8010c3c:	d13d      	bne.n	8010cba <uxr_flash_output_streams+0xba>
 8010c3e:	7e23      	ldrb	r3, [r4, #24]
 8010c40:	f109 0901 	add.w	r9, r9, #1
 8010c44:	fa5f f089 	uxtb.w	r0, r9
 8010c48:	4283      	cmp	r3, r0
 8010c4a:	d8e6      	bhi.n	8010c1a <uxr_flash_output_streams+0x1a>
 8010c4c:	f894 3048 	ldrb.w	r3, [r4, #72]	@ 0x48
 8010c50:	b383      	cbz	r3, 8010cb4 <uxr_flash_output_streams+0xb4>
 8010c52:	f04f 0900 	mov.w	r9, #0
 8010c56:	4648      	mov	r0, r9
 8010c58:	f10d 0802 	add.w	r8, sp, #2
 8010c5c:	af03      	add	r7, sp, #12
 8010c5e:	ae02      	add	r6, sp, #8
 8010c60:	2201      	movs	r2, #1
 8010c62:	2102      	movs	r1, #2
 8010c64:	eb00 0580 	add.w	r5, r0, r0, lsl #2
 8010c68:	f000 ff52 	bl	8011b10 <uxr_stream_id>
 8010c6c:	eb04 05c5 	add.w	r5, r4, r5, lsl #3
 8010c70:	3520      	adds	r5, #32
 8010c72:	9001      	str	r0, [sp, #4]
 8010c74:	e00c      	b.n	8010c90 <uxr_flash_output_streams+0x90>
 8010c76:	9b02      	ldr	r3, [sp, #8]
 8010c78:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 8010c7c:	f89d 1004 	ldrb.w	r1, [sp, #4]
 8010c80:	f000 feb6 	bl	80119f0 <uxr_stamp_session_header>
 8010c84:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 8010c86:	9a03      	ldr	r2, [sp, #12]
 8010c88:	9902      	ldr	r1, [sp, #8]
 8010c8a:	e9d3 0a00 	ldrd	r0, sl, [r3]
 8010c8e:	47d0      	blx	sl
 8010c90:	4643      	mov	r3, r8
 8010c92:	463a      	mov	r2, r7
 8010c94:	4631      	mov	r1, r6
 8010c96:	4628      	mov	r0, r5
 8010c98:	f007 fa7c 	bl	8018194 <uxr_prepare_next_reliable_buffer_to_send>
 8010c9c:	4603      	mov	r3, r0
 8010c9e:	4620      	mov	r0, r4
 8010ca0:	2b00      	cmp	r3, #0
 8010ca2:	d1e8      	bne.n	8010c76 <uxr_flash_output_streams+0x76>
 8010ca4:	f894 3048 	ldrb.w	r3, [r4, #72]	@ 0x48
 8010ca8:	f109 0901 	add.w	r9, r9, #1
 8010cac:	fa5f f089 	uxtb.w	r0, r9
 8010cb0:	4283      	cmp	r3, r0
 8010cb2:	d8d5      	bhi.n	8010c60 <uxr_flash_output_streams+0x60>
 8010cb4:	b004      	add	sp, #16
 8010cb6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010cba:	9b02      	ldr	r3, [sp, #8]
 8010cbc:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 8010cc0:	f89d 1004 	ldrb.w	r1, [sp, #4]
 8010cc4:	4620      	mov	r0, r4
 8010cc6:	f000 fe93 	bl	80119f0 <uxr_stamp_session_header>
 8010cca:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 8010ccc:	9a03      	ldr	r2, [sp, #12]
 8010cce:	9902      	ldr	r1, [sp, #8]
 8010cd0:	e9d3 0500 	ldrd	r0, r5, [r3]
 8010cd4:	47a8      	blx	r5
 8010cd6:	f109 0901 	add.w	r9, r9, #1
 8010cda:	7e23      	ldrb	r3, [r4, #24]
 8010cdc:	fa5f f089 	uxtb.w	r0, r9
 8010ce0:	4283      	cmp	r3, r0
 8010ce2:	d89a      	bhi.n	8010c1a <uxr_flash_output_streams+0x1a>
 8010ce4:	e7b2      	b.n	8010c4c <uxr_flash_output_streams+0x4c>
 8010ce6:	bf00      	nop

08010ce8 <read_submessage_info>:
 8010ce8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010cec:	460d      	mov	r5, r1
 8010cee:	f5ad 7d24 	sub.w	sp, sp, #656	@ 0x290
 8010cf2:	4669      	mov	r1, sp
 8010cf4:	4607      	mov	r7, r0
 8010cf6:	4628      	mov	r0, r5
 8010cf8:	f002 f80c 	bl	8012d14 <uxr_deserialize_BaseObjectReply>
 8010cfc:	a902      	add	r1, sp, #8
 8010cfe:	4604      	mov	r4, r0
 8010d00:	4628      	mov	r0, r5
 8010d02:	f89d 8005 	ldrb.w	r8, [sp, #5]
 8010d06:	f7fe f9d5 	bl	800f0b4 <ucdr_deserialize_bool>
 8010d0a:	f89d 3008 	ldrb.w	r3, [sp, #8]
 8010d0e:	4004      	ands	r4, r0
 8010d10:	b2e4      	uxtb	r4, r4
 8010d12:	b95b      	cbnz	r3, 8010d2c <read_submessage_info+0x44>
 8010d14:	a987      	add	r1, sp, #540	@ 0x21c
 8010d16:	4628      	mov	r0, r5
 8010d18:	f7fe f9cc 	bl	800f0b4 <ucdr_deserialize_bool>
 8010d1c:	f89d 321c 	ldrb.w	r3, [sp, #540]	@ 0x21c
 8010d20:	4606      	mov	r6, r0
 8010d22:	b94b      	cbnz	r3, 8010d38 <read_submessage_info+0x50>
 8010d24:	f50d 7d24 	add.w	sp, sp, #656	@ 0x290
 8010d28:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010d2c:	a903      	add	r1, sp, #12
 8010d2e:	4628      	mov	r0, r5
 8010d30:	f001 fe7e 	bl	8012a30 <uxr_deserialize_ObjectVariant>
 8010d34:	4004      	ands	r4, r0
 8010d36:	e7ed      	b.n	8010d14 <read_submessage_info+0x2c>
 8010d38:	a988      	add	r1, sp, #544	@ 0x220
 8010d3a:	4628      	mov	r0, r5
 8010d3c:	f7fe f9ea 	bl	800f114 <ucdr_deserialize_uint8_t>
 8010d40:	4234      	tst	r4, r6
 8010d42:	d0ef      	beq.n	8010d24 <read_submessage_info+0x3c>
 8010d44:	2800      	cmp	r0, #0
 8010d46:	d0ed      	beq.n	8010d24 <read_submessage_info+0x3c>
 8010d48:	f89d 3220 	ldrb.w	r3, [sp, #544]	@ 0x220
 8010d4c:	2b0d      	cmp	r3, #13
 8010d4e:	d1e9      	bne.n	8010d24 <read_submessage_info+0x3c>
 8010d50:	4628      	mov	r0, r5
 8010d52:	a98a      	add	r1, sp, #552	@ 0x228
 8010d54:	f7fe ff84 	bl	800fc60 <ucdr_deserialize_int16_t>
 8010d58:	b140      	cbz	r0, 8010d6c <read_submessage_info+0x84>
 8010d5a:	f9bd 3228 	ldrsh.w	r3, [sp, #552]	@ 0x228
 8010d5e:	2b00      	cmp	r3, #0
 8010d60:	dd07      	ble.n	8010d72 <read_submessage_info+0x8a>
 8010d62:	f1b8 0f00 	cmp.w	r8, #0
 8010d66:	bf14      	ite	ne
 8010d68:	2001      	movne	r0, #1
 8010d6a:	2002      	moveq	r0, #2
 8010d6c:	f887 00b5 	strb.w	r0, [r7, #181]	@ 0xb5
 8010d70:	e7d8      	b.n	8010d24 <read_submessage_info+0x3c>
 8010d72:	2000      	movs	r0, #0
 8010d74:	e7fa      	b.n	8010d6c <read_submessage_info+0x84>
 8010d76:	bf00      	nop

08010d78 <read_submessage_list>:
 8010d78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010d7c:	b098      	sub	sp, #96	@ 0x60
 8010d7e:	f8df 9304 	ldr.w	r9, [pc, #772]	@ 8011084 <read_submessage_list+0x30c>
 8010d82:	920b      	str	r2, [sp, #44]	@ 0x2c
 8010d84:	4604      	mov	r4, r0
 8010d86:	4688      	mov	r8, r1
 8010d88:	f10d 0337 	add.w	r3, sp, #55	@ 0x37
 8010d8c:	aa0e      	add	r2, sp, #56	@ 0x38
 8010d8e:	f10d 0136 	add.w	r1, sp, #54	@ 0x36
 8010d92:	4640      	mov	r0, r8
 8010d94:	f001 f810 	bl	8011db8 <uxr_read_submessage_header>
 8010d98:	2800      	cmp	r0, #0
 8010d9a:	f000 813d 	beq.w	8011018 <read_submessage_list+0x2a0>
 8010d9e:	f89d 3036 	ldrb.w	r3, [sp, #54]	@ 0x36
 8010da2:	f89d 202e 	ldrb.w	r2, [sp, #46]	@ 0x2e
 8010da6:	3b02      	subs	r3, #2
 8010da8:	2b0d      	cmp	r3, #13
 8010daa:	d8ed      	bhi.n	8010d88 <read_submessage_list+0x10>
 8010dac:	a101      	add	r1, pc, #4	@ (adr r1, 8010db4 <read_submessage_list+0x3c>)
 8010dae:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8010db2:	bf00      	nop
 8010db4:	0801100f 	.word	0x0801100f
 8010db8:	08010d89 	.word	0x08010d89
 8010dbc:	08010fff 	.word	0x08010fff
 8010dc0:	08010fa3 	.word	0x08010fa3
 8010dc4:	08010f99 	.word	0x08010f99
 8010dc8:	08010d89 	.word	0x08010d89
 8010dcc:	08010d89 	.word	0x08010d89
 8010dd0:	08010efb 	.word	0x08010efb
 8010dd4:	08010e8d 	.word	0x08010e8d
 8010dd8:	08010e4b 	.word	0x08010e4b
 8010ddc:	08010d89 	.word	0x08010d89
 8010de0:	08010d89 	.word	0x08010d89
 8010de4:	08010d89 	.word	0x08010d89
 8010de8:	08010ded 	.word	0x08010ded
 8010dec:	a912      	add	r1, sp, #72	@ 0x48
 8010dee:	4640      	mov	r0, r8
 8010df0:	f002 f9bc 	bl	801316c <uxr_deserialize_TIMESTAMP_REPLY_Payload>
 8010df4:	f8d4 5090 	ldr.w	r5, [r4, #144]	@ 0x90
 8010df8:	2d00      	cmp	r5, #0
 8010dfa:	f000 8115 	beq.w	8011028 <read_submessage_list+0x2b0>
 8010dfe:	f001 f823 	bl	8011e48 <uxr_nanos>
 8010e02:	9e17      	ldr	r6, [sp, #92]	@ 0x5c
 8010e04:	460b      	mov	r3, r1
 8010e06:	9916      	ldr	r1, [sp, #88]	@ 0x58
 8010e08:	2700      	movs	r7, #0
 8010e0a:	fbc9 6701 	smlal	r6, r7, r9, r1
 8010e0e:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8010e12:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 8010e14:	4602      	mov	r2, r0
 8010e16:	9812      	ldr	r0, [sp, #72]	@ 0x48
 8010e18:	460e      	mov	r6, r1
 8010e1a:	2700      	movs	r7, #0
 8010e1c:	f8d4 1094 	ldr.w	r1, [r4, #148]	@ 0x94
 8010e20:	9106      	str	r1, [sp, #24]
 8010e22:	fbc9 6700 	smlal	r6, r7, r9, r0
 8010e26:	9915      	ldr	r1, [sp, #84]	@ 0x54
 8010e28:	e9cd 6702 	strd	r6, r7, [sp, #8]
 8010e2c:	9e14      	ldr	r6, [sp, #80]	@ 0x50
 8010e2e:	2700      	movs	r7, #0
 8010e30:	4608      	mov	r0, r1
 8010e32:	4639      	mov	r1, r7
 8010e34:	fbc9 0106 	smlal	r0, r1, r9, r6
 8010e38:	e9cd 0100 	strd	r0, r1, [sp]
 8010e3c:	4620      	mov	r0, r4
 8010e3e:	47a8      	blx	r5
 8010e40:	f04f 0301 	mov.w	r3, #1
 8010e44:	f884 30a0 	strb.w	r3, [r4, #160]	@ 0xa0
 8010e48:	e79e      	b.n	8010d88 <read_submessage_list+0x10>
 8010e4a:	a912      	add	r1, sp, #72	@ 0x48
 8010e4c:	4640      	mov	r0, r8
 8010e4e:	f002 f97b 	bl	8013148 <uxr_deserialize_HEARTBEAT_Payload>
 8010e52:	2100      	movs	r1, #0
 8010e54:	f89d 004c 	ldrb.w	r0, [sp, #76]	@ 0x4c
 8010e58:	f000 fe84 	bl	8011b64 <uxr_stream_id_from_raw>
 8010e5c:	f3c0 2507 	ubfx	r5, r0, #8, #8
 8010e60:	4603      	mov	r3, r0
 8010e62:	4629      	mov	r1, r5
 8010e64:	f104 0008 	add.w	r0, r4, #8
 8010e68:	9311      	str	r3, [sp, #68]	@ 0x44
 8010e6a:	f000 ff69 	bl	8011d40 <uxr_get_input_reliable_stream>
 8010e6e:	2800      	cmp	r0, #0
 8010e70:	d08a      	beq.n	8010d88 <read_submessage_list+0x10>
 8010e72:	f8bd 204a 	ldrh.w	r2, [sp, #74]	@ 0x4a
 8010e76:	f8bd 1048 	ldrh.w	r1, [sp, #72]	@ 0x48
 8010e7a:	f006 fee3 	bl	8017c44 <uxr_process_heartbeat>
 8010e7e:	f89d 1044 	ldrb.w	r1, [sp, #68]	@ 0x44
 8010e82:	462a      	mov	r2, r5
 8010e84:	4620      	mov	r0, r4
 8010e86:	f7ff fdf5 	bl	8010a74 <write_submessage_acknack.isra.0>
 8010e8a:	e77d      	b.n	8010d88 <read_submessage_list+0x10>
 8010e8c:	a912      	add	r1, sp, #72	@ 0x48
 8010e8e:	4640      	mov	r0, r8
 8010e90:	f002 f932 	bl	80130f8 <uxr_deserialize_ACKNACK_Payload>
 8010e94:	2100      	movs	r1, #0
 8010e96:	f89d 004c 	ldrb.w	r0, [sp, #76]	@ 0x4c
 8010e9a:	f000 fe63 	bl	8011b64 <uxr_stream_id_from_raw>
 8010e9e:	4603      	mov	r3, r0
 8010ea0:	f3c0 2107 	ubfx	r1, r0, #8, #8
 8010ea4:	f104 0008 	add.w	r0, r4, #8
 8010ea8:	930f      	str	r3, [sp, #60]	@ 0x3c
 8010eaa:	f000 ff33 	bl	8011d14 <uxr_get_output_reliable_stream>
 8010eae:	4605      	mov	r5, r0
 8010eb0:	2800      	cmp	r0, #0
 8010eb2:	f43f af69 	beq.w	8010d88 <read_submessage_list+0x10>
 8010eb6:	f89d 304a 	ldrb.w	r3, [sp, #74]	@ 0x4a
 8010eba:	f89d 104b 	ldrb.w	r1, [sp, #75]	@ 0x4b
 8010ebe:	f8bd 2048 	ldrh.w	r2, [sp, #72]	@ 0x48
 8010ec2:	eb01 2103 	add.w	r1, r1, r3, lsl #8
 8010ec6:	b289      	uxth	r1, r1
 8010ec8:	f007 fa0c 	bl	80182e4 <uxr_process_acknack>
 8010ecc:	4628      	mov	r0, r5
 8010ece:	f007 f9cf 	bl	8018270 <uxr_begin_output_nack_buffer_it>
 8010ed2:	af10      	add	r7, sp, #64	@ 0x40
 8010ed4:	f8ad 003a 	strh.w	r0, [sp, #58]	@ 0x3a
 8010ed8:	e005      	b.n	8010ee6 <read_submessage_list+0x16e>
 8010eda:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 8010edc:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8010ede:	9910      	ldr	r1, [sp, #64]	@ 0x40
 8010ee0:	e9d3 0600 	ldrd	r0, r6, [r3]
 8010ee4:	47b0      	blx	r6
 8010ee6:	f10d 033a 	add.w	r3, sp, #58	@ 0x3a
 8010eea:	aa11      	add	r2, sp, #68	@ 0x44
 8010eec:	4639      	mov	r1, r7
 8010eee:	4628      	mov	r0, r5
 8010ef0:	f007 f9c0 	bl	8018274 <uxr_next_reliable_nack_buffer_to_send>
 8010ef4:	2800      	cmp	r0, #0
 8010ef6:	d1f0      	bne.n	8010eda <read_submessage_list+0x162>
 8010ef8:	e746      	b.n	8010d88 <read_submessage_list+0x10>
 8010efa:	f89d 302d 	ldrb.w	r3, [sp, #45]	@ 0x2d
 8010efe:	f88d 203e 	strb.w	r2, [sp, #62]	@ 0x3e
 8010f02:	af10      	add	r7, sp, #64	@ 0x40
 8010f04:	f89d 202f 	ldrb.w	r2, [sp, #47]	@ 0x2f
 8010f08:	f88d 303d 	strb.w	r3, [sp, #61]	@ 0x3d
 8010f0c:	4639      	mov	r1, r7
 8010f0e:	f89d 302c 	ldrb.w	r3, [sp, #44]	@ 0x2c
 8010f12:	f89d 6037 	ldrb.w	r6, [sp, #55]	@ 0x37
 8010f16:	f8bd 5038 	ldrh.w	r5, [sp, #56]	@ 0x38
 8010f1a:	f88d 203f 	strb.w	r2, [sp, #63]	@ 0x3f
 8010f1e:	4640      	mov	r0, r8
 8010f20:	f88d 303c 	strb.w	r3, [sp, #60]	@ 0x3c
 8010f24:	f001 fe32 	bl	8012b8c <uxr_deserialize_BaseObjectRequest>
 8010f28:	4638      	mov	r0, r7
 8010f2a:	a911      	add	r1, sp, #68	@ 0x44
 8010f2c:	f10d 023a 	add.w	r2, sp, #58	@ 0x3a
 8010f30:	f000 fddc 	bl	8011aec <uxr_parse_base_object_request>
 8010f34:	f8d4 a080 	ldr.w	sl, [r4, #128]	@ 0x80
 8010f38:	9911      	ldr	r1, [sp, #68]	@ 0x44
 8010f3a:	f8bd 703a 	ldrh.w	r7, [sp, #58]	@ 0x3a
 8010f3e:	9112      	str	r1, [sp, #72]	@ 0x48
 8010f40:	3d04      	subs	r5, #4
 8010f42:	f006 060e 	and.w	r6, r6, #14
 8010f46:	b2ad      	uxth	r5, r5
 8010f48:	f1ba 0f00 	cmp.w	sl, #0
 8010f4c:	d006      	beq.n	8010f5c <read_submessage_list+0x1e4>
 8010f4e:	f8d4 3084 	ldr.w	r3, [r4, #132]	@ 0x84
 8010f52:	9300      	str	r3, [sp, #0]
 8010f54:	463a      	mov	r2, r7
 8010f56:	2300      	movs	r3, #0
 8010f58:	4620      	mov	r0, r4
 8010f5a:	47d0      	blx	sl
 8010f5c:	6fe0      	ldr	r0, [r4, #124]	@ 0x7c
 8010f5e:	b168      	cbz	r0, 8010f7c <read_submessage_list+0x204>
 8010f60:	6f61      	ldr	r1, [r4, #116]	@ 0x74
 8010f62:	2300      	movs	r3, #0
 8010f64:	3902      	subs	r1, #2
 8010f66:	e002      	b.n	8010f6e <read_submessage_list+0x1f6>
 8010f68:	3301      	adds	r3, #1
 8010f6a:	4283      	cmp	r3, r0
 8010f6c:	d006      	beq.n	8010f7c <read_submessage_list+0x204>
 8010f6e:	f831 2f02 	ldrh.w	r2, [r1, #2]!
 8010f72:	42ba      	cmp	r2, r7
 8010f74:	d1f8      	bne.n	8010f68 <read_submessage_list+0x1f0>
 8010f76:	6fa2      	ldr	r2, [r4, #120]	@ 0x78
 8010f78:	2100      	movs	r1, #0
 8010f7a:	54d1      	strb	r1, [r2, r3]
 8010f7c:	9811      	ldr	r0, [sp, #68]	@ 0x44
 8010f7e:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8010f80:	f8bd 303a 	ldrh.w	r3, [sp, #58]	@ 0x3a
 8010f84:	9302      	str	r3, [sp, #8]
 8010f86:	e9cd 1000 	strd	r1, r0, [sp]
 8010f8a:	4633      	mov	r3, r6
 8010f8c:	462a      	mov	r2, r5
 8010f8e:	4641      	mov	r1, r8
 8010f90:	4620      	mov	r0, r4
 8010f92:	f007 fa65 	bl	8018460 <read_submessage_format>
 8010f96:	e6f7      	b.n	8010d88 <read_submessage_list+0x10>
 8010f98:	4641      	mov	r1, r8
 8010f9a:	4620      	mov	r0, r4
 8010f9c:	f7ff fea4 	bl	8010ce8 <read_submessage_info>
 8010fa0:	e6f2      	b.n	8010d88 <read_submessage_list+0x10>
 8010fa2:	2a00      	cmp	r2, #0
 8010fa4:	d03b      	beq.n	801101e <read_submessage_list+0x2a6>
 8010fa6:	a912      	add	r1, sp, #72	@ 0x48
 8010fa8:	4640      	mov	r0, r8
 8010faa:	f002 f801 	bl	8012fb0 <uxr_deserialize_STATUS_Payload>
 8010fae:	a910      	add	r1, sp, #64	@ 0x40
 8010fb0:	aa0f      	add	r2, sp, #60	@ 0x3c
 8010fb2:	a812      	add	r0, sp, #72	@ 0x48
 8010fb4:	f000 fd9a 	bl	8011aec <uxr_parse_base_object_request>
 8010fb8:	f8d4 5080 	ldr.w	r5, [r4, #128]	@ 0x80
 8010fbc:	9910      	ldr	r1, [sp, #64]	@ 0x40
 8010fbe:	f89d 704c 	ldrb.w	r7, [sp, #76]	@ 0x4c
 8010fc2:	f8bd 603c 	ldrh.w	r6, [sp, #60]	@ 0x3c
 8010fc6:	9111      	str	r1, [sp, #68]	@ 0x44
 8010fc8:	b135      	cbz	r5, 8010fd8 <read_submessage_list+0x260>
 8010fca:	f8d4 3084 	ldr.w	r3, [r4, #132]	@ 0x84
 8010fce:	9300      	str	r3, [sp, #0]
 8010fd0:	4632      	mov	r2, r6
 8010fd2:	463b      	mov	r3, r7
 8010fd4:	4620      	mov	r0, r4
 8010fd6:	47a8      	blx	r5
 8010fd8:	6fe3      	ldr	r3, [r4, #124]	@ 0x7c
 8010fda:	2b00      	cmp	r3, #0
 8010fdc:	f43f aed4 	beq.w	8010d88 <read_submessage_list+0x10>
 8010fe0:	6f60      	ldr	r0, [r4, #116]	@ 0x74
 8010fe2:	2100      	movs	r1, #0
 8010fe4:	3802      	subs	r0, #2
 8010fe6:	e003      	b.n	8010ff0 <read_submessage_list+0x278>
 8010fe8:	3101      	adds	r1, #1
 8010fea:	4299      	cmp	r1, r3
 8010fec:	f43f aecc 	beq.w	8010d88 <read_submessage_list+0x10>
 8010ff0:	f830 2f02 	ldrh.w	r2, [r0, #2]!
 8010ff4:	42b2      	cmp	r2, r6
 8010ff6:	d1f7      	bne.n	8010fe8 <read_submessage_list+0x270>
 8010ff8:	6fa3      	ldr	r3, [r4, #120]	@ 0x78
 8010ffa:	545f      	strb	r7, [r3, r1]
 8010ffc:	e6c4      	b.n	8010d88 <read_submessage_list+0x10>
 8010ffe:	2a00      	cmp	r2, #0
 8011000:	f47f aec2 	bne.w	8010d88 <read_submessage_list+0x10>
 8011004:	4641      	mov	r1, r8
 8011006:	4620      	mov	r0, r4
 8011008:	f000 fcb4 	bl	8011974 <uxr_read_create_session_status>
 801100c:	e6bc      	b.n	8010d88 <read_submessage_list+0x10>
 801100e:	4641      	mov	r1, r8
 8011010:	4620      	mov	r0, r4
 8011012:	f7ff fcf9 	bl	8010a08 <read_submessage_get_info>
 8011016:	e6b7      	b.n	8010d88 <read_submessage_list+0x10>
 8011018:	b018      	add	sp, #96	@ 0x60
 801101a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801101e:	4641      	mov	r1, r8
 8011020:	4620      	mov	r0, r4
 8011022:	f000 fcb3 	bl	801198c <uxr_read_delete_session_status>
 8011026:	e6af      	b.n	8010d88 <read_submessage_list+0x10>
 8011028:	f000 ff0e 	bl	8011e48 <uxr_nanos>
 801102c:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 801102e:	9e17      	ldr	r6, [sp, #92]	@ 0x5c
 8011030:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8011032:	9d14      	ldr	r5, [sp, #80]	@ 0x50
 8011034:	2700      	movs	r7, #0
 8011036:	fbc9 6703 	smlal	r6, r7, r9, r3
 801103a:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 801103c:	eb16 0c00 	adds.w	ip, r6, r0
 8011040:	4618      	mov	r0, r3
 8011042:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8011044:	eb47 0e01 	adc.w	lr, r7, r1
 8011048:	461e      	mov	r6, r3
 801104a:	2100      	movs	r1, #0
 801104c:	2700      	movs	r7, #0
 801104e:	fbc9 0105 	smlal	r0, r1, r9, r5
 8011052:	fbc9 6702 	smlal	r6, r7, r9, r2
 8011056:	1983      	adds	r3, r0, r6
 8011058:	eb41 0207 	adc.w	r2, r1, r7
 801105c:	ebbc 0303 	subs.w	r3, ip, r3
 8011060:	9308      	str	r3, [sp, #32]
 8011062:	eb6e 0302 	sbc.w	r3, lr, r2
 8011066:	9309      	str	r3, [sp, #36]	@ 0x24
 8011068:	e9dd 1208 	ldrd	r1, r2, [sp, #32]
 801106c:	0fd3      	lsrs	r3, r2, #31
 801106e:	18c9      	adds	r1, r1, r3
 8011070:	f142 0200 	adc.w	r2, r2, #0
 8011074:	084b      	lsrs	r3, r1, #1
 8011076:	ea43 73c2 	orr.w	r3, r3, r2, lsl #31
 801107a:	1052      	asrs	r2, r2, #1
 801107c:	e9c4 3226 	strd	r3, r2, [r4, #152]	@ 0x98
 8011080:	e6de      	b.n	8010e40 <read_submessage_list+0xc8>
 8011082:	bf00      	nop
 8011084:	3b9aca00 	.word	0x3b9aca00

08011088 <listen_message_reliably>:
 8011088:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801108c:	1e0b      	subs	r3, r1, #0
 801108e:	b09d      	sub	sp, #116	@ 0x74
 8011090:	bfb8      	it	lt
 8011092:	f06f 4300 	mvnlt.w	r3, #2147483648	@ 0x80000000
 8011096:	9305      	str	r3, [sp, #20]
 8011098:	4607      	mov	r7, r0
 801109a:	f000 feb9 	bl	8011e10 <uxr_millis>
 801109e:	f897 2048 	ldrb.w	r2, [r7, #72]	@ 0x48
 80110a2:	4681      	mov	r9, r0
 80110a4:	2a00      	cmp	r2, #0
 80110a6:	f000 8095 	beq.w	80111d4 <listen_message_reliably+0x14c>
 80110aa:	2600      	movs	r6, #0
 80110ac:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80110b0:	f06f 4400 	mvn.w	r4, #2147483648	@ 0x80000000
 80110b4:	e9cd 3402 	strd	r3, r4, [sp, #8]
 80110b8:	4630      	mov	r0, r6
 80110ba:	4688      	mov	r8, r1
 80110bc:	46ca      	mov	sl, r9
 80110be:	e00f      	b.n	80110e0 <listen_message_reliably+0x58>
 80110c0:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 80110c4:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 80110c8:	42a2      	cmp	r2, r4
 80110ca:	eb73 0105 	sbcs.w	r1, r3, r5
 80110ce:	bfb8      	it	lt
 80110d0:	e9cd 2302 	strdlt	r2, r3, [sp, #8]
 80110d4:	3601      	adds	r6, #1
 80110d6:	f897 3048 	ldrb.w	r3, [r7, #72]	@ 0x48
 80110da:	b2f0      	uxtb	r0, r6
 80110dc:	4283      	cmp	r3, r0
 80110de:	d951      	bls.n	8011184 <listen_message_reliably+0xfc>
 80110e0:	eb00 0480 	add.w	r4, r0, r0, lsl #2
 80110e4:	2201      	movs	r2, #1
 80110e6:	2102      	movs	r1, #2
 80110e8:	f000 fd12 	bl	8011b10 <uxr_stream_id>
 80110ec:	00e4      	lsls	r4, r4, #3
 80110ee:	f104 0520 	add.w	r5, r4, #32
 80110f2:	443d      	add	r5, r7
 80110f4:	4601      	mov	r1, r0
 80110f6:	4643      	mov	r3, r8
 80110f8:	4652      	mov	r2, sl
 80110fa:	4628      	mov	r0, r5
 80110fc:	9109      	str	r1, [sp, #36]	@ 0x24
 80110fe:	f007 f88b 	bl	8018218 <uxr_update_output_stream_heartbeat_timestamp>
 8011102:	193b      	adds	r3, r7, r4
 8011104:	2800      	cmp	r0, #0
 8011106:	d0db      	beq.n	80110c0 <listen_message_reliably+0x38>
 8011108:	f89d 5025 	ldrb.w	r5, [sp, #37]	@ 0x25
 801110c:	f89d 9024 	ldrb.w	r9, [sp, #36]	@ 0x24
 8011110:	4638      	mov	r0, r7
 8011112:	f000 fcc5 	bl	8011aa0 <uxr_session_header_offset>
 8011116:	3501      	adds	r5, #1
 8011118:	f10d 0b50 	add.w	fp, sp, #80	@ 0x50
 801111c:	eb05 0585 	add.w	r5, r5, r5, lsl #2
 8011120:	eb07 05c5 	add.w	r5, r7, r5, lsl #3
 8011124:	9000      	str	r0, [sp, #0]
 8011126:	2300      	movs	r3, #0
 8011128:	4658      	mov	r0, fp
 801112a:	2211      	movs	r2, #17
 801112c:	a90c      	add	r1, sp, #48	@ 0x30
 801112e:	f7ff f913 	bl	8010358 <ucdr_init_buffer_origin_offset>
 8011132:	2300      	movs	r3, #0
 8011134:	2205      	movs	r2, #5
 8011136:	210b      	movs	r1, #11
 8011138:	4658      	mov	r0, fp
 801113a:	f000 fe23 	bl	8011d84 <uxr_buffer_submessage_header>
 801113e:	8968      	ldrh	r0, [r5, #10]
 8011140:	2101      	movs	r1, #1
 8011142:	f007 fa4d 	bl	80185e0 <uxr_seq_num_add>
 8011146:	892a      	ldrh	r2, [r5, #8]
 8011148:	f8ad 202a 	strh.w	r2, [sp, #42]	@ 0x2a
 801114c:	4603      	mov	r3, r0
 801114e:	a90a      	add	r1, sp, #40	@ 0x28
 8011150:	4658      	mov	r0, fp
 8011152:	f8ad 3028 	strh.w	r3, [sp, #40]	@ 0x28
 8011156:	f88d 902c 	strb.w	r9, [sp, #44]	@ 0x2c
 801115a:	f001 ffe1 	bl	8013120 <uxr_serialize_HEARTBEAT_Payload>
 801115e:	2200      	movs	r2, #0
 8011160:	4611      	mov	r1, r2
 8011162:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8011164:	4638      	mov	r0, r7
 8011166:	f000 fc43 	bl	80119f0 <uxr_stamp_session_header>
 801116a:	4658      	mov	r0, fp
 801116c:	f7ff f932 	bl	80103d4 <ucdr_buffer_length>
 8011170:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8011172:	4602      	mov	r2, r0
 8011174:	a90c      	add	r1, sp, #48	@ 0x30
 8011176:	e9d3 0500 	ldrd	r0, r5, [r3]
 801117a:	443c      	add	r4, r7
 801117c:	47a8      	blx	r5
 801117e:	e9d4 230e 	ldrd	r2, r3, [r4, #56]	@ 0x38
 8011182:	e79f      	b.n	80110c4 <listen_message_reliably+0x3c>
 8011184:	e9dd 3402 	ldrd	r3, r4, [sp, #8]
 8011188:	f06f 4200 	mvn.w	r2, #2147483648	@ 0x80000000
 801118c:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8011190:	4294      	cmp	r4, r2
 8011192:	bf08      	it	eq
 8011194:	428b      	cmpeq	r3, r1
 8011196:	d01d      	beq.n	80111d4 <listen_message_reliably+0x14c>
 8011198:	eba3 030a 	sub.w	r3, r3, sl
 801119c:	9905      	ldr	r1, [sp, #20]
 801119e:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 80111a0:	2b00      	cmp	r3, #0
 80111a2:	bf08      	it	eq
 80111a4:	2301      	moveq	r3, #1
 80111a6:	4299      	cmp	r1, r3
 80111a8:	bfa8      	it	ge
 80111aa:	4619      	movge	r1, r3
 80111ac:	6894      	ldr	r4, [r2, #8]
 80111ae:	6810      	ldr	r0, [r2, #0]
 80111b0:	4689      	mov	r9, r1
 80111b2:	460b      	mov	r3, r1
 80111b4:	aa08      	add	r2, sp, #32
 80111b6:	a907      	add	r1, sp, #28
 80111b8:	47a0      	blx	r4
 80111ba:	b968      	cbnz	r0, 80111d8 <listen_message_reliably+0x150>
 80111bc:	9b05      	ldr	r3, [sp, #20]
 80111be:	eba3 0309 	sub.w	r3, r3, r9
 80111c2:	2b00      	cmp	r3, #0
 80111c4:	9305      	str	r3, [sp, #20]
 80111c6:	f73f af68 	bgt.w	801109a <listen_message_reliably+0x12>
 80111ca:	4604      	mov	r4, r0
 80111cc:	4620      	mov	r0, r4
 80111ce:	b01d      	add	sp, #116	@ 0x74
 80111d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80111d4:	9b05      	ldr	r3, [sp, #20]
 80111d6:	e7e1      	b.n	801119c <listen_message_reliably+0x114>
 80111d8:	e9dd 1207 	ldrd	r1, r2, [sp, #28]
 80111dc:	4604      	mov	r4, r0
 80111de:	a80c      	add	r0, sp, #48	@ 0x30
 80111e0:	f7ff f8cc 	bl	801037c <ucdr_init_buffer>
 80111e4:	2500      	movs	r5, #0
 80111e6:	a90c      	add	r1, sp, #48	@ 0x30
 80111e8:	f10d 031a 	add.w	r3, sp, #26
 80111ec:	aa06      	add	r2, sp, #24
 80111ee:	4638      	mov	r0, r7
 80111f0:	f88d 5018 	strb.w	r5, [sp, #24]
 80111f4:	f000 fc12 	bl	8011a1c <uxr_read_session_header>
 80111f8:	b918      	cbnz	r0, 8011202 <listen_message_reliably+0x17a>
 80111fa:	4620      	mov	r0, r4
 80111fc:	b01d      	add	sp, #116	@ 0x74
 80111fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011202:	4629      	mov	r1, r5
 8011204:	f89d 0018 	ldrb.w	r0, [sp, #24]
 8011208:	f000 fcac 	bl	8011b64 <uxr_stream_id_from_raw>
 801120c:	f3c0 4607 	ubfx	r6, r0, #16, #8
 8011210:	2e01      	cmp	r6, #1
 8011212:	f8bd 901a 	ldrh.w	r9, [sp, #26]
 8011216:	900a      	str	r0, [sp, #40]	@ 0x28
 8011218:	fa5f fa80 	uxtb.w	sl, r0
 801121c:	f3c0 2507 	ubfx	r5, r0, #8, #8
 8011220:	d04b      	beq.n	80112ba <listen_message_reliably+0x232>
 8011222:	2e02      	cmp	r6, #2
 8011224:	d00f      	beq.n	8011246 <listen_message_reliably+0x1be>
 8011226:	2e00      	cmp	r6, #0
 8011228:	d1e7      	bne.n	80111fa <listen_message_reliably+0x172>
 801122a:	4631      	mov	r1, r6
 801122c:	4630      	mov	r0, r6
 801122e:	f000 fc99 	bl	8011b64 <uxr_stream_id_from_raw>
 8011232:	a90c      	add	r1, sp, #48	@ 0x30
 8011234:	4602      	mov	r2, r0
 8011236:	4638      	mov	r0, r7
 8011238:	920a      	str	r2, [sp, #40]	@ 0x28
 801123a:	f7ff fd9d 	bl	8010d78 <read_submessage_list>
 801123e:	4620      	mov	r0, r4
 8011240:	b01d      	add	sp, #116	@ 0x74
 8011242:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011246:	4629      	mov	r1, r5
 8011248:	f107 0008 	add.w	r0, r7, #8
 801124c:	f000 fd78 	bl	8011d40 <uxr_get_input_reliable_stream>
 8011250:	4680      	mov	r8, r0
 8011252:	b348      	cbz	r0, 80112a8 <listen_message_reliably+0x220>
 8011254:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8011256:	9202      	str	r2, [sp, #8]
 8011258:	a80c      	add	r0, sp, #48	@ 0x30
 801125a:	f7ff f8bf 	bl	80103dc <ucdr_buffer_remaining>
 801125e:	4603      	mov	r3, r0
 8011260:	f10d 0019 	add.w	r0, sp, #25
 8011264:	9000      	str	r0, [sp, #0]
 8011266:	9a02      	ldr	r2, [sp, #8]
 8011268:	4649      	mov	r1, r9
 801126a:	4640      	mov	r0, r8
 801126c:	f006 fbec 	bl	8017a48 <uxr_receive_reliable_message>
 8011270:	b1d0      	cbz	r0, 80112a8 <listen_message_reliably+0x220>
 8011272:	f89d 3019 	ldrb.w	r3, [sp, #25]
 8011276:	2b00      	cmp	r3, #0
 8011278:	d037      	beq.n	80112ea <listen_message_reliably+0x262>
 801127a:	ae14      	add	r6, sp, #80	@ 0x50
 801127c:	f04f 0902 	mov.w	r9, #2
 8011280:	e008      	b.n	8011294 <listen_message_reliably+0x20c>
 8011282:	f88d a028 	strb.w	sl, [sp, #40]	@ 0x28
 8011286:	f88d 5029 	strb.w	r5, [sp, #41]	@ 0x29
 801128a:	f88d 902a 	strb.w	r9, [sp, #42]	@ 0x2a
 801128e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8011290:	f7ff fd72 	bl	8010d78 <read_submessage_list>
 8011294:	4631      	mov	r1, r6
 8011296:	2204      	movs	r2, #4
 8011298:	4640      	mov	r0, r8
 801129a:	f006 fc55 	bl	8017b48 <uxr_next_input_reliable_buffer_available>
 801129e:	4603      	mov	r3, r0
 80112a0:	4631      	mov	r1, r6
 80112a2:	4638      	mov	r0, r7
 80112a4:	2b00      	cmp	r3, #0
 80112a6:	d1ec      	bne.n	8011282 <listen_message_reliably+0x1fa>
 80112a8:	4638      	mov	r0, r7
 80112aa:	462a      	mov	r2, r5
 80112ac:	4651      	mov	r1, sl
 80112ae:	f7ff fbe1 	bl	8010a74 <write_submessage_acknack.isra.0>
 80112b2:	4620      	mov	r0, r4
 80112b4:	b01d      	add	sp, #116	@ 0x74
 80112b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80112ba:	4629      	mov	r1, r5
 80112bc:	f107 0008 	add.w	r0, r7, #8
 80112c0:	f000 fd34 	bl	8011d2c <uxr_get_input_best_effort_stream>
 80112c4:	2800      	cmp	r0, #0
 80112c6:	d098      	beq.n	80111fa <listen_message_reliably+0x172>
 80112c8:	4649      	mov	r1, r9
 80112ca:	f006 fb39 	bl	8017940 <uxr_receive_best_effort_message>
 80112ce:	2800      	cmp	r0, #0
 80112d0:	d093      	beq.n	80111fa <listen_message_reliably+0x172>
 80112d2:	f88d a028 	strb.w	sl, [sp, #40]	@ 0x28
 80112d6:	f88d 5029 	strb.w	r5, [sp, #41]	@ 0x29
 80112da:	f88d 602a 	strb.w	r6, [sp, #42]	@ 0x2a
 80112de:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80112e0:	a90c      	add	r1, sp, #48	@ 0x30
 80112e2:	4638      	mov	r0, r7
 80112e4:	f7ff fd48 	bl	8010d78 <read_submessage_list>
 80112e8:	e787      	b.n	80111fa <listen_message_reliably+0x172>
 80112ea:	f88d a028 	strb.w	sl, [sp, #40]	@ 0x28
 80112ee:	f88d 5029 	strb.w	r5, [sp, #41]	@ 0x29
 80112f2:	f88d 602a 	strb.w	r6, [sp, #42]	@ 0x2a
 80112f6:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80112f8:	a90c      	add	r1, sp, #48	@ 0x30
 80112fa:	4638      	mov	r0, r7
 80112fc:	f7ff fd3c 	bl	8010d78 <read_submessage_list>
 8011300:	e7bb      	b.n	801127a <listen_message_reliably+0x1f2>
 8011302:	bf00      	nop

08011304 <uxr_run_session_timeout>:
 8011304:	b570      	push	{r4, r5, r6, lr}
 8011306:	4604      	mov	r4, r0
 8011308:	460d      	mov	r5, r1
 801130a:	f000 fd81 	bl	8011e10 <uxr_millis>
 801130e:	4606      	mov	r6, r0
 8011310:	4620      	mov	r0, r4
 8011312:	f7ff fc75 	bl	8010c00 <uxr_flash_output_streams>
 8011316:	4629      	mov	r1, r5
 8011318:	4620      	mov	r0, r4
 801131a:	f7ff feb5 	bl	8011088 <listen_message_reliably>
 801131e:	f000 fd77 	bl	8011e10 <uxr_millis>
 8011322:	1b83      	subs	r3, r0, r6
 8011324:	1ae9      	subs	r1, r5, r3
 8011326:	2900      	cmp	r1, #0
 8011328:	dcf6      	bgt.n	8011318 <uxr_run_session_timeout+0x14>
 801132a:	f104 0008 	add.w	r0, r4, #8
 801132e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8011332:	f000 bd11 	b.w	8011d58 <uxr_output_streams_confirmed>
 8011336:	bf00      	nop

08011338 <uxr_run_session_until_data>:
 8011338:	b570      	push	{r4, r5, r6, lr}
 801133a:	4604      	mov	r4, r0
 801133c:	460d      	mov	r5, r1
 801133e:	f000 fd67 	bl	8011e10 <uxr_millis>
 8011342:	4606      	mov	r6, r0
 8011344:	4620      	mov	r0, r4
 8011346:	f7ff fc5b 	bl	8010c00 <uxr_flash_output_streams>
 801134a:	2300      	movs	r3, #0
 801134c:	f884 30b4 	strb.w	r3, [r4, #180]	@ 0xb4
 8011350:	4629      	mov	r1, r5
 8011352:	e005      	b.n	8011360 <uxr_run_session_until_data+0x28>
 8011354:	f000 fd5c 	bl	8011e10 <uxr_millis>
 8011358:	1b83      	subs	r3, r0, r6
 801135a:	1ae9      	subs	r1, r5, r3
 801135c:	2900      	cmp	r1, #0
 801135e:	dd07      	ble.n	8011370 <uxr_run_session_until_data+0x38>
 8011360:	4620      	mov	r0, r4
 8011362:	f7ff fe91 	bl	8011088 <listen_message_reliably>
 8011366:	f894 00b4 	ldrb.w	r0, [r4, #180]	@ 0xb4
 801136a:	2800      	cmp	r0, #0
 801136c:	d0f2      	beq.n	8011354 <uxr_run_session_until_data+0x1c>
 801136e:	bd70      	pop	{r4, r5, r6, pc}
 8011370:	f894 00b4 	ldrb.w	r0, [r4, #180]	@ 0xb4
 8011374:	bd70      	pop	{r4, r5, r6, pc}
 8011376:	bf00      	nop

08011378 <uxr_run_session_until_confirm_delivery>:
 8011378:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801137c:	4606      	mov	r6, r0
 801137e:	460d      	mov	r5, r1
 8011380:	f000 fd46 	bl	8011e10 <uxr_millis>
 8011384:	4607      	mov	r7, r0
 8011386:	4630      	mov	r0, r6
 8011388:	f7ff fc3a 	bl	8010c00 <uxr_flash_output_streams>
 801138c:	2d00      	cmp	r5, #0
 801138e:	f106 0808 	add.w	r8, r6, #8
 8011392:	bfa8      	it	ge
 8011394:	462c      	movge	r4, r5
 8011396:	da07      	bge.n	80113a8 <uxr_run_session_until_confirm_delivery+0x30>
 8011398:	e00e      	b.n	80113b8 <uxr_run_session_until_confirm_delivery+0x40>
 801139a:	f7ff fe75 	bl	8011088 <listen_message_reliably>
 801139e:	f000 fd37 	bl	8011e10 <uxr_millis>
 80113a2:	1bc3      	subs	r3, r0, r7
 80113a4:	1aec      	subs	r4, r5, r3
 80113a6:	d407      	bmi.n	80113b8 <uxr_run_session_until_confirm_delivery+0x40>
 80113a8:	4640      	mov	r0, r8
 80113aa:	f000 fcd5 	bl	8011d58 <uxr_output_streams_confirmed>
 80113ae:	4603      	mov	r3, r0
 80113b0:	4621      	mov	r1, r4
 80113b2:	4630      	mov	r0, r6
 80113b4:	2b00      	cmp	r3, #0
 80113b6:	d0f0      	beq.n	801139a <uxr_run_session_until_confirm_delivery+0x22>
 80113b8:	4640      	mov	r0, r8
 80113ba:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80113be:	f000 bccb 	b.w	8011d58 <uxr_output_streams_confirmed>
 80113c2:	bf00      	nop

080113c4 <uxr_run_session_until_all_status>:
 80113c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80113c8:	9d08      	ldr	r5, [sp, #32]
 80113ca:	460f      	mov	r7, r1
 80113cc:	4692      	mov	sl, r2
 80113ce:	461c      	mov	r4, r3
 80113d0:	4606      	mov	r6, r0
 80113d2:	f7ff fc15 	bl	8010c00 <uxr_flash_output_streams>
 80113d6:	b125      	cbz	r5, 80113e2 <uxr_run_session_until_all_status+0x1e>
 80113d8:	462a      	mov	r2, r5
 80113da:	21ff      	movs	r1, #255	@ 0xff
 80113dc:	4620      	mov	r0, r4
 80113de:	f008 fbd9 	bl	8019b94 <memset>
 80113e2:	e9c6 a41d 	strd	sl, r4, [r6, #116]	@ 0x74
 80113e6:	67f5      	str	r5, [r6, #124]	@ 0x7c
 80113e8:	f000 fd12 	bl	8011e10 <uxr_millis>
 80113ec:	f104 39ff 	add.w	r9, r4, #4294967295	@ 0xffffffff
 80113f0:	f1aa 0a02 	sub.w	sl, sl, #2
 80113f4:	4680      	mov	r8, r0
 80113f6:	4639      	mov	r1, r7
 80113f8:	4630      	mov	r0, r6
 80113fa:	f7ff fe45 	bl	8011088 <listen_message_reliably>
 80113fe:	f000 fd07 	bl	8011e10 <uxr_millis>
 8011402:	eba0 0008 	sub.w	r0, r0, r8
 8011406:	1a39      	subs	r1, r7, r0
 8011408:	b33d      	cbz	r5, 801145a <uxr_run_session_until_all_status+0x96>
 801140a:	46cc      	mov	ip, r9
 801140c:	464a      	mov	r2, r9
 801140e:	2301      	movs	r3, #1
 8011410:	e002      	b.n	8011418 <uxr_run_session_until_all_status+0x54>
 8011412:	42ab      	cmp	r3, r5
 8011414:	d20c      	bcs.n	8011430 <uxr_run_session_until_all_status+0x6c>
 8011416:	3301      	adds	r3, #1
 8011418:	f812 4f01 	ldrb.w	r4, [r2, #1]!
 801141c:	2cff      	cmp	r4, #255	@ 0xff
 801141e:	d1f8      	bne.n	8011412 <uxr_run_session_until_all_status+0x4e>
 8011420:	42ab      	cmp	r3, r5
 8011422:	f83a 0013 	ldrh.w	r0, [sl, r3, lsl #1]
 8011426:	d213      	bcs.n	8011450 <uxr_run_session_until_all_status+0x8c>
 8011428:	2800      	cmp	r0, #0
 801142a:	d0f4      	beq.n	8011416 <uxr_run_session_until_all_status+0x52>
 801142c:	2900      	cmp	r1, #0
 801142e:	dce3      	bgt.n	80113f8 <uxr_run_session_until_all_status+0x34>
 8011430:	2300      	movs	r3, #0
 8011432:	444d      	add	r5, r9
 8011434:	67f3      	str	r3, [r6, #124]	@ 0x7c
 8011436:	e001      	b.n	801143c <uxr_run_session_until_all_status+0x78>
 8011438:	2b01      	cmp	r3, #1
 801143a:	d812      	bhi.n	8011462 <uxr_run_session_until_all_status+0x9e>
 801143c:	f81c 3f01 	ldrb.w	r3, [ip, #1]!
 8011440:	4565      	cmp	r5, ip
 8011442:	d1f9      	bne.n	8011438 <uxr_run_session_until_all_status+0x74>
 8011444:	2b01      	cmp	r3, #1
 8011446:	bf8c      	ite	hi
 8011448:	2000      	movhi	r0, #0
 801144a:	2001      	movls	r0, #1
 801144c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011450:	2900      	cmp	r1, #0
 8011452:	dded      	ble.n	8011430 <uxr_run_session_until_all_status+0x6c>
 8011454:	2800      	cmp	r0, #0
 8011456:	d1cf      	bne.n	80113f8 <uxr_run_session_until_all_status+0x34>
 8011458:	e7ea      	b.n	8011430 <uxr_run_session_until_all_status+0x6c>
 801145a:	67f5      	str	r5, [r6, #124]	@ 0x7c
 801145c:	2001      	movs	r0, #1
 801145e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011462:	2000      	movs	r0, #0
 8011464:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08011468 <uxr_create_session>:
 8011468:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801146c:	ed2d 8b02 	vpush	{d8}
 8011470:	f100 0808 	add.w	r8, r0, #8
 8011474:	b0a9      	sub	sp, #164	@ 0xa4
 8011476:	4604      	mov	r4, r0
 8011478:	4640      	mov	r0, r8
 801147a:	f000 fba9 	bl	8011bd0 <uxr_reset_stream_storage>
 801147e:	4620      	mov	r0, r4
 8011480:	f000 fb0e 	bl	8011aa0 <uxr_session_header_offset>
 8011484:	a909      	add	r1, sp, #36	@ 0x24
 8011486:	9000      	str	r0, [sp, #0]
 8011488:	2300      	movs	r3, #0
 801148a:	a810      	add	r0, sp, #64	@ 0x40
 801148c:	221c      	movs	r2, #28
 801148e:	f7fe ff63 	bl	8010358 <ucdr_init_buffer_origin_offset>
 8011492:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 8011494:	8a1a      	ldrh	r2, [r3, #16]
 8011496:	3a04      	subs	r2, #4
 8011498:	b292      	uxth	r2, r2
 801149a:	4620      	mov	r0, r4
 801149c:	a910      	add	r1, sp, #64	@ 0x40
 801149e:	f000 fa23 	bl	80118e8 <uxr_buffer_create_session>
 80114a2:	9910      	ldr	r1, [sp, #64]	@ 0x40
 80114a4:	4620      	mov	r0, r4
 80114a6:	f000 fa8f 	bl	80119c8 <uxr_stamp_create_session_header>
 80114aa:	a810      	add	r0, sp, #64	@ 0x40
 80114ac:	f7fe ff92 	bl	80103d4 <ucdr_buffer_length>
 80114b0:	23ff      	movs	r3, #255	@ 0xff
 80114b2:	ee08 0a10 	vmov	s16, r0
 80114b6:	7163      	strb	r3, [r4, #5]
 80114b8:	f04f 090a 	mov.w	r9, #10
 80114bc:	46c2      	mov	sl, r8
 80114be:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 80114c0:	ee18 2a10 	vmov	r2, s16
 80114c4:	e9d3 0500 	ldrd	r0, r5, [r3]
 80114c8:	a909      	add	r1, sp, #36	@ 0x24
 80114ca:	47a8      	blx	r5
 80114cc:	f000 fca0 	bl	8011e10 <uxr_millis>
 80114d0:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80114d4:	9002      	str	r0, [sp, #8]
 80114d6:	e00c      	b.n	80114f2 <uxr_create_session+0x8a>
 80114d8:	f000 fc9a 	bl	8011e10 <uxr_millis>
 80114dc:	9b02      	ldr	r3, [sp, #8]
 80114de:	7962      	ldrb	r2, [r4, #5]
 80114e0:	1ac0      	subs	r0, r0, r3
 80114e2:	f5c0 737a 	rsb	r3, r0, #1000	@ 0x3e8
 80114e6:	2b00      	cmp	r3, #0
 80114e8:	f340 8094 	ble.w	8011614 <uxr_create_session+0x1ac>
 80114ec:	2aff      	cmp	r2, #255	@ 0xff
 80114ee:	f040 8097 	bne.w	8011620 <uxr_create_session+0x1b8>
 80114f2:	6f22      	ldr	r2, [r4, #112]	@ 0x70
 80114f4:	a905      	add	r1, sp, #20
 80114f6:	6895      	ldr	r5, [r2, #8]
 80114f8:	6810      	ldr	r0, [r2, #0]
 80114fa:	aa06      	add	r2, sp, #24
 80114fc:	47a8      	blx	r5
 80114fe:	2800      	cmp	r0, #0
 8011500:	d0ea      	beq.n	80114d8 <uxr_create_session+0x70>
 8011502:	e9dd 1205 	ldrd	r1, r2, [sp, #20]
 8011506:	a818      	add	r0, sp, #96	@ 0x60
 8011508:	f7fe ff38 	bl	801037c <ucdr_init_buffer>
 801150c:	2500      	movs	r5, #0
 801150e:	f10d 0312 	add.w	r3, sp, #18
 8011512:	aa04      	add	r2, sp, #16
 8011514:	a918      	add	r1, sp, #96	@ 0x60
 8011516:	4620      	mov	r0, r4
 8011518:	f88d 5010 	strb.w	r5, [sp, #16]
 801151c:	f000 fa7e 	bl	8011a1c <uxr_read_session_header>
 8011520:	2800      	cmp	r0, #0
 8011522:	d0d9      	beq.n	80114d8 <uxr_create_session+0x70>
 8011524:	4629      	mov	r1, r5
 8011526:	f89d 0010 	ldrb.w	r0, [sp, #16]
 801152a:	f000 fb1b 	bl	8011b64 <uxr_stream_id_from_raw>
 801152e:	f3c0 4707 	ubfx	r7, r0, #16, #8
 8011532:	2f01      	cmp	r7, #1
 8011534:	e9cd 0007 	strd	r0, r0, [sp, #28]
 8011538:	f8bd b012 	ldrh.w	fp, [sp, #18]
 801153c:	fa5f f880 	uxtb.w	r8, r0
 8011540:	f3c0 2507 	ubfx	r5, r0, #8, #8
 8011544:	d04d      	beq.n	80115e2 <uxr_create_session+0x17a>
 8011546:	2f02      	cmp	r7, #2
 8011548:	d00c      	beq.n	8011564 <uxr_create_session+0xfc>
 801154a:	2f00      	cmp	r7, #0
 801154c:	d1c4      	bne.n	80114d8 <uxr_create_session+0x70>
 801154e:	4639      	mov	r1, r7
 8011550:	4638      	mov	r0, r7
 8011552:	f000 fb07 	bl	8011b64 <uxr_stream_id_from_raw>
 8011556:	a918      	add	r1, sp, #96	@ 0x60
 8011558:	4602      	mov	r2, r0
 801155a:	4620      	mov	r0, r4
 801155c:	9208      	str	r2, [sp, #32]
 801155e:	f7ff fc0b 	bl	8010d78 <read_submessage_list>
 8011562:	e7b9      	b.n	80114d8 <uxr_create_session+0x70>
 8011564:	4629      	mov	r1, r5
 8011566:	4650      	mov	r0, sl
 8011568:	f000 fbea 	bl	8011d40 <uxr_get_input_reliable_stream>
 801156c:	4606      	mov	r6, r0
 801156e:	b390      	cbz	r0, 80115d6 <uxr_create_session+0x16e>
 8011570:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8011572:	9203      	str	r2, [sp, #12]
 8011574:	a818      	add	r0, sp, #96	@ 0x60
 8011576:	f7fe ff31 	bl	80103dc <ucdr_buffer_remaining>
 801157a:	4603      	mov	r3, r0
 801157c:	f10d 0011 	add.w	r0, sp, #17
 8011580:	9000      	str	r0, [sp, #0]
 8011582:	9a03      	ldr	r2, [sp, #12]
 8011584:	4659      	mov	r1, fp
 8011586:	4630      	mov	r0, r6
 8011588:	f006 fa5e 	bl	8017a48 <uxr_receive_reliable_message>
 801158c:	b318      	cbz	r0, 80115d6 <uxr_create_session+0x16e>
 801158e:	f89d 3011 	ldrb.w	r3, [sp, #17]
 8011592:	b9b3      	cbnz	r3, 80115c2 <uxr_create_session+0x15a>
 8011594:	f88d 8020 	strb.w	r8, [sp, #32]
 8011598:	f88d 5021 	strb.w	r5, [sp, #33]	@ 0x21
 801159c:	f88d 7022 	strb.w	r7, [sp, #34]	@ 0x22
 80115a0:	9a08      	ldr	r2, [sp, #32]
 80115a2:	a918      	add	r1, sp, #96	@ 0x60
 80115a4:	4620      	mov	r0, r4
 80115a6:	f7ff fbe7 	bl	8010d78 <read_submessage_list>
 80115aa:	e00a      	b.n	80115c2 <uxr_create_session+0x15a>
 80115ac:	f04f 0302 	mov.w	r3, #2
 80115b0:	f88d 8020 	strb.w	r8, [sp, #32]
 80115b4:	f88d 5021 	strb.w	r5, [sp, #33]	@ 0x21
 80115b8:	f88d 3022 	strb.w	r3, [sp, #34]	@ 0x22
 80115bc:	9a08      	ldr	r2, [sp, #32]
 80115be:	f7ff fbdb 	bl	8010d78 <read_submessage_list>
 80115c2:	a920      	add	r1, sp, #128	@ 0x80
 80115c4:	2204      	movs	r2, #4
 80115c6:	4630      	mov	r0, r6
 80115c8:	f006 fabe 	bl	8017b48 <uxr_next_input_reliable_buffer_available>
 80115cc:	4603      	mov	r3, r0
 80115ce:	a920      	add	r1, sp, #128	@ 0x80
 80115d0:	4620      	mov	r0, r4
 80115d2:	2b00      	cmp	r3, #0
 80115d4:	d1ea      	bne.n	80115ac <uxr_create_session+0x144>
 80115d6:	462a      	mov	r2, r5
 80115d8:	4641      	mov	r1, r8
 80115da:	4620      	mov	r0, r4
 80115dc:	f7ff fa4a 	bl	8010a74 <write_submessage_acknack.isra.0>
 80115e0:	e77a      	b.n	80114d8 <uxr_create_session+0x70>
 80115e2:	4629      	mov	r1, r5
 80115e4:	4650      	mov	r0, sl
 80115e6:	f000 fba1 	bl	8011d2c <uxr_get_input_best_effort_stream>
 80115ea:	2800      	cmp	r0, #0
 80115ec:	f43f af74 	beq.w	80114d8 <uxr_create_session+0x70>
 80115f0:	4659      	mov	r1, fp
 80115f2:	f006 f9a5 	bl	8017940 <uxr_receive_best_effort_message>
 80115f6:	2800      	cmp	r0, #0
 80115f8:	f43f af6e 	beq.w	80114d8 <uxr_create_session+0x70>
 80115fc:	f88d 8020 	strb.w	r8, [sp, #32]
 8011600:	f88d 5021 	strb.w	r5, [sp, #33]	@ 0x21
 8011604:	f88d 7022 	strb.w	r7, [sp, #34]	@ 0x22
 8011608:	9a08      	ldr	r2, [sp, #32]
 801160a:	a918      	add	r1, sp, #96	@ 0x60
 801160c:	4620      	mov	r0, r4
 801160e:	f7ff fbb3 	bl	8010d78 <read_submessage_list>
 8011612:	e761      	b.n	80114d8 <uxr_create_session+0x70>
 8011614:	f1b9 0901 	subs.w	r9, r9, #1
 8011618:	d002      	beq.n	8011620 <uxr_create_session+0x1b8>
 801161a:	2aff      	cmp	r2, #255	@ 0xff
 801161c:	f43f af4f 	beq.w	80114be <uxr_create_session+0x56>
 8011620:	b12a      	cbz	r2, 801162e <uxr_create_session+0x1c6>
 8011622:	2000      	movs	r0, #0
 8011624:	b029      	add	sp, #164	@ 0xa4
 8011626:	ecbd 8b02 	vpop	{d8}
 801162a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801162e:	4650      	mov	r0, sl
 8011630:	f000 face 	bl	8011bd0 <uxr_reset_stream_storage>
 8011634:	2001      	movs	r0, #1
 8011636:	b029      	add	sp, #164	@ 0xa4
 8011638:	ecbd 8b02 	vpop	{d8}
 801163c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08011640 <wait_session_status>:
 8011640:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011644:	4604      	mov	r4, r0
 8011646:	b09d      	sub	sp, #116	@ 0x74
 8011648:	20ff      	movs	r0, #255	@ 0xff
 801164a:	7160      	strb	r0, [r4, #5]
 801164c:	9304      	str	r3, [sp, #16]
 801164e:	2b00      	cmp	r3, #0
 8011650:	f000 80b8 	beq.w	80117c4 <wait_session_status+0x184>
 8011654:	2300      	movs	r3, #0
 8011656:	468b      	mov	fp, r1
 8011658:	4692      	mov	sl, r2
 801165a:	9303      	str	r3, [sp, #12]
 801165c:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 801165e:	4652      	mov	r2, sl
 8011660:	e9d3 0500 	ldrd	r0, r5, [r3]
 8011664:	4659      	mov	r1, fp
 8011666:	47a8      	blx	r5
 8011668:	f000 fbd2 	bl	8011e10 <uxr_millis>
 801166c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8011670:	4605      	mov	r5, r0
 8011672:	e009      	b.n	8011688 <wait_session_status+0x48>
 8011674:	f000 fbcc 	bl	8011e10 <uxr_millis>
 8011678:	1b40      	subs	r0, r0, r5
 801167a:	f5c0 737a 	rsb	r3, r0, #1000	@ 0x3e8
 801167e:	2b00      	cmp	r3, #0
 8011680:	dd42      	ble.n	8011708 <wait_session_status+0xc8>
 8011682:	7960      	ldrb	r0, [r4, #5]
 8011684:	28ff      	cmp	r0, #255	@ 0xff
 8011686:	d148      	bne.n	801171a <wait_session_status+0xda>
 8011688:	6f22      	ldr	r2, [r4, #112]	@ 0x70
 801168a:	a908      	add	r1, sp, #32
 801168c:	6896      	ldr	r6, [r2, #8]
 801168e:	6810      	ldr	r0, [r2, #0]
 8011690:	aa09      	add	r2, sp, #36	@ 0x24
 8011692:	47b0      	blx	r6
 8011694:	2800      	cmp	r0, #0
 8011696:	d0ed      	beq.n	8011674 <wait_session_status+0x34>
 8011698:	e9dd 1208 	ldrd	r1, r2, [sp, #32]
 801169c:	a80c      	add	r0, sp, #48	@ 0x30
 801169e:	f7fe fe6d 	bl	801037c <ucdr_init_buffer>
 80116a2:	2600      	movs	r6, #0
 80116a4:	f10d 031e 	add.w	r3, sp, #30
 80116a8:	aa07      	add	r2, sp, #28
 80116aa:	a90c      	add	r1, sp, #48	@ 0x30
 80116ac:	4620      	mov	r0, r4
 80116ae:	f88d 601c 	strb.w	r6, [sp, #28]
 80116b2:	f000 f9b3 	bl	8011a1c <uxr_read_session_header>
 80116b6:	2800      	cmp	r0, #0
 80116b8:	d0dc      	beq.n	8011674 <wait_session_status+0x34>
 80116ba:	4631      	mov	r1, r6
 80116bc:	f89d 001c 	ldrb.w	r0, [sp, #28]
 80116c0:	f000 fa50 	bl	8011b64 <uxr_stream_id_from_raw>
 80116c4:	f3c0 4707 	ubfx	r7, r0, #16, #8
 80116c8:	f8bd 301e 	ldrh.w	r3, [sp, #30]
 80116cc:	9302      	str	r3, [sp, #8]
 80116ce:	2f01      	cmp	r7, #1
 80116d0:	e9cd 000a 	strd	r0, r0, [sp, #40]	@ 0x28
 80116d4:	fa5f f880 	uxtb.w	r8, r0
 80116d8:	f3c0 2607 	ubfx	r6, r0, #8, #8
 80116dc:	d058      	beq.n	8011790 <wait_session_status+0x150>
 80116de:	2f02      	cmp	r7, #2
 80116e0:	d021      	beq.n	8011726 <wait_session_status+0xe6>
 80116e2:	2f00      	cmp	r7, #0
 80116e4:	d1c6      	bne.n	8011674 <wait_session_status+0x34>
 80116e6:	4639      	mov	r1, r7
 80116e8:	4638      	mov	r0, r7
 80116ea:	f000 fa3b 	bl	8011b64 <uxr_stream_id_from_raw>
 80116ee:	a90c      	add	r1, sp, #48	@ 0x30
 80116f0:	4602      	mov	r2, r0
 80116f2:	4620      	mov	r0, r4
 80116f4:	920b      	str	r2, [sp, #44]	@ 0x2c
 80116f6:	f7ff fb3f 	bl	8010d78 <read_submessage_list>
 80116fa:	f000 fb89 	bl	8011e10 <uxr_millis>
 80116fe:	1b40      	subs	r0, r0, r5
 8011700:	f5c0 737a 	rsb	r3, r0, #1000	@ 0x3e8
 8011704:	2b00      	cmp	r3, #0
 8011706:	dcbc      	bgt.n	8011682 <wait_session_status+0x42>
 8011708:	9b03      	ldr	r3, [sp, #12]
 801170a:	9a04      	ldr	r2, [sp, #16]
 801170c:	7960      	ldrb	r0, [r4, #5]
 801170e:	3301      	adds	r3, #1
 8011710:	429a      	cmp	r2, r3
 8011712:	9303      	str	r3, [sp, #12]
 8011714:	d001      	beq.n	801171a <wait_session_status+0xda>
 8011716:	28ff      	cmp	r0, #255	@ 0xff
 8011718:	d0a0      	beq.n	801165c <wait_session_status+0x1c>
 801171a:	38ff      	subs	r0, #255	@ 0xff
 801171c:	bf18      	it	ne
 801171e:	2001      	movne	r0, #1
 8011720:	b01d      	add	sp, #116	@ 0x74
 8011722:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011726:	4631      	mov	r1, r6
 8011728:	f104 0008 	add.w	r0, r4, #8
 801172c:	f000 fb08 	bl	8011d40 <uxr_get_input_reliable_stream>
 8011730:	4681      	mov	r9, r0
 8011732:	b338      	cbz	r0, 8011784 <wait_session_status+0x144>
 8011734:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8011736:	9205      	str	r2, [sp, #20]
 8011738:	a80c      	add	r0, sp, #48	@ 0x30
 801173a:	f7fe fe4f 	bl	80103dc <ucdr_buffer_remaining>
 801173e:	4603      	mov	r3, r0
 8011740:	f10d 001d 	add.w	r0, sp, #29
 8011744:	9000      	str	r0, [sp, #0]
 8011746:	9a05      	ldr	r2, [sp, #20]
 8011748:	9902      	ldr	r1, [sp, #8]
 801174a:	4648      	mov	r0, r9
 801174c:	f006 f97c 	bl	8017a48 <uxr_receive_reliable_message>
 8011750:	b1c0      	cbz	r0, 8011784 <wait_session_status+0x144>
 8011752:	f89d 301d 	ldrb.w	r3, [sp, #29]
 8011756:	b95b      	cbnz	r3, 8011770 <wait_session_status+0x130>
 8011758:	e03c      	b.n	80117d4 <wait_session_status+0x194>
 801175a:	f04f 0302 	mov.w	r3, #2
 801175e:	f88d 802c 	strb.w	r8, [sp, #44]	@ 0x2c
 8011762:	f88d 602d 	strb.w	r6, [sp, #45]	@ 0x2d
 8011766:	f88d 302e 	strb.w	r3, [sp, #46]	@ 0x2e
 801176a:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 801176c:	f7ff fb04 	bl	8010d78 <read_submessage_list>
 8011770:	a914      	add	r1, sp, #80	@ 0x50
 8011772:	2204      	movs	r2, #4
 8011774:	4648      	mov	r0, r9
 8011776:	f006 f9e7 	bl	8017b48 <uxr_next_input_reliable_buffer_available>
 801177a:	4603      	mov	r3, r0
 801177c:	a914      	add	r1, sp, #80	@ 0x50
 801177e:	4620      	mov	r0, r4
 8011780:	2b00      	cmp	r3, #0
 8011782:	d1ea      	bne.n	801175a <wait_session_status+0x11a>
 8011784:	4632      	mov	r2, r6
 8011786:	4641      	mov	r1, r8
 8011788:	4620      	mov	r0, r4
 801178a:	f7ff f973 	bl	8010a74 <write_submessage_acknack.isra.0>
 801178e:	e771      	b.n	8011674 <wait_session_status+0x34>
 8011790:	4631      	mov	r1, r6
 8011792:	f104 0008 	add.w	r0, r4, #8
 8011796:	f000 fac9 	bl	8011d2c <uxr_get_input_best_effort_stream>
 801179a:	2800      	cmp	r0, #0
 801179c:	f43f af6a 	beq.w	8011674 <wait_session_status+0x34>
 80117a0:	9902      	ldr	r1, [sp, #8]
 80117a2:	f006 f8cd 	bl	8017940 <uxr_receive_best_effort_message>
 80117a6:	2800      	cmp	r0, #0
 80117a8:	f43f af64 	beq.w	8011674 <wait_session_status+0x34>
 80117ac:	f88d 802c 	strb.w	r8, [sp, #44]	@ 0x2c
 80117b0:	f88d 602d 	strb.w	r6, [sp, #45]	@ 0x2d
 80117b4:	f88d 702e 	strb.w	r7, [sp, #46]	@ 0x2e
 80117b8:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 80117ba:	a90c      	add	r1, sp, #48	@ 0x30
 80117bc:	4620      	mov	r0, r4
 80117be:	f7ff fadb 	bl	8010d78 <read_submessage_list>
 80117c2:	e757      	b.n	8011674 <wait_session_status+0x34>
 80117c4:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 80117c6:	e9d3 0400 	ldrd	r0, r4, [r3]
 80117ca:	47a0      	blx	r4
 80117cc:	2001      	movs	r0, #1
 80117ce:	b01d      	add	sp, #116	@ 0x74
 80117d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80117d4:	f88d 802c 	strb.w	r8, [sp, #44]	@ 0x2c
 80117d8:	f88d 602d 	strb.w	r6, [sp, #45]	@ 0x2d
 80117dc:	f88d 702e 	strb.w	r7, [sp, #46]	@ 0x2e
 80117e0:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 80117e2:	a90c      	add	r1, sp, #48	@ 0x30
 80117e4:	4620      	mov	r0, r4
 80117e6:	f7ff fac7 	bl	8010d78 <read_submessage_list>
 80117ea:	e7c1      	b.n	8011770 <wait_session_status+0x130>

080117ec <uxr_delete_session_retries>:
 80117ec:	b530      	push	{r4, r5, lr}
 80117ee:	b08f      	sub	sp, #60	@ 0x3c
 80117f0:	4604      	mov	r4, r0
 80117f2:	460d      	mov	r5, r1
 80117f4:	f000 f954 	bl	8011aa0 <uxr_session_header_offset>
 80117f8:	2300      	movs	r3, #0
 80117fa:	2210      	movs	r2, #16
 80117fc:	9000      	str	r0, [sp, #0]
 80117fe:	a902      	add	r1, sp, #8
 8011800:	a806      	add	r0, sp, #24
 8011802:	f7fe fda9 	bl	8010358 <ucdr_init_buffer_origin_offset>
 8011806:	a906      	add	r1, sp, #24
 8011808:	4620      	mov	r0, r4
 801180a:	f000 f897 	bl	801193c <uxr_buffer_delete_session>
 801180e:	2200      	movs	r2, #0
 8011810:	4611      	mov	r1, r2
 8011812:	9b06      	ldr	r3, [sp, #24]
 8011814:	4620      	mov	r0, r4
 8011816:	f000 f8eb 	bl	80119f0 <uxr_stamp_session_header>
 801181a:	a806      	add	r0, sp, #24
 801181c:	f7fe fdda 	bl	80103d4 <ucdr_buffer_length>
 8011820:	462b      	mov	r3, r5
 8011822:	4602      	mov	r2, r0
 8011824:	a902      	add	r1, sp, #8
 8011826:	4620      	mov	r0, r4
 8011828:	f7ff ff0a 	bl	8011640 <wait_session_status>
 801182c:	b118      	cbz	r0, 8011836 <uxr_delete_session_retries+0x4a>
 801182e:	7960      	ldrb	r0, [r4, #5]
 8011830:	fab0 f080 	clz	r0, r0
 8011834:	0940      	lsrs	r0, r0, #5
 8011836:	b00f      	add	sp, #60	@ 0x3c
 8011838:	bd30      	pop	{r4, r5, pc}
 801183a:	bf00      	nop

0801183c <uxr_prepare_stream_to_write_submessage>:
 801183c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011840:	b082      	sub	sp, #8
 8011842:	4682      	mov	sl, r0
 8011844:	4610      	mov	r0, r2
 8011846:	4615      	mov	r5, r2
 8011848:	461e      	mov	r6, r3
 801184a:	f89d 7028 	ldrb.w	r7, [sp, #40]	@ 0x28
 801184e:	f89d 802c 	ldrb.w	r8, [sp, #44]	@ 0x2c
 8011852:	9101      	str	r1, [sp, #4]
 8011854:	f3c1 2407 	ubfx	r4, r1, #8, #8
 8011858:	f000 fad4 	bl	8011e04 <uxr_submessage_padding>
 801185c:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8011860:	f105 0904 	add.w	r9, r5, #4
 8011864:	2b01      	cmp	r3, #1
 8011866:	4481      	add	r9, r0
 8011868:	d01d      	beq.n	80118a6 <uxr_prepare_stream_to_write_submessage+0x6a>
 801186a:	2b02      	cmp	r3, #2
 801186c:	d116      	bne.n	801189c <uxr_prepare_stream_to_write_submessage+0x60>
 801186e:	4621      	mov	r1, r4
 8011870:	f10a 0008 	add.w	r0, sl, #8
 8011874:	f000 fa4e 	bl	8011d14 <uxr_get_output_reliable_stream>
 8011878:	4604      	mov	r4, r0
 801187a:	b158      	cbz	r0, 8011894 <uxr_prepare_stream_to_write_submessage+0x58>
 801187c:	4649      	mov	r1, r9
 801187e:	4632      	mov	r2, r6
 8011880:	f006 fb18 	bl	8017eb4 <uxr_prepare_reliable_buffer_to_write>
 8011884:	4604      	mov	r4, r0
 8011886:	b12c      	cbz	r4, 8011894 <uxr_prepare_stream_to_write_submessage+0x58>
 8011888:	4643      	mov	r3, r8
 801188a:	b2aa      	uxth	r2, r5
 801188c:	4639      	mov	r1, r7
 801188e:	4630      	mov	r0, r6
 8011890:	f000 fa78 	bl	8011d84 <uxr_buffer_submessage_header>
 8011894:	4620      	mov	r0, r4
 8011896:	b002      	add	sp, #8
 8011898:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801189c:	2400      	movs	r4, #0
 801189e:	4620      	mov	r0, r4
 80118a0:	b002      	add	sp, #8
 80118a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80118a6:	4621      	mov	r1, r4
 80118a8:	f10a 0008 	add.w	r0, sl, #8
 80118ac:	f000 fa2a 	bl	8011d04 <uxr_get_output_best_effort_stream>
 80118b0:	4604      	mov	r4, r0
 80118b2:	2800      	cmp	r0, #0
 80118b4:	d0ee      	beq.n	8011894 <uxr_prepare_stream_to_write_submessage+0x58>
 80118b6:	4649      	mov	r1, r9
 80118b8:	4632      	mov	r2, r6
 80118ba:	f006 fa37 	bl	8017d2c <uxr_prepare_best_effort_buffer_to_write>
 80118be:	4604      	mov	r4, r0
 80118c0:	e7e1      	b.n	8011886 <uxr_prepare_stream_to_write_submessage+0x4a>
 80118c2:	bf00      	nop

080118c4 <uxr_init_session_info>:
 80118c4:	b470      	push	{r4, r5, r6}
 80118c6:	7102      	strb	r2, [r0, #4]
 80118c8:	0e16      	lsrs	r6, r2, #24
 80118ca:	f3c2 4507 	ubfx	r5, r2, #16, #8
 80118ce:	f3c2 2407 	ubfx	r4, r2, #8, #8
 80118d2:	23ff      	movs	r3, #255	@ 0xff
 80118d4:	2209      	movs	r2, #9
 80118d6:	7046      	strb	r6, [r0, #1]
 80118d8:	7085      	strb	r5, [r0, #2]
 80118da:	70c4      	strb	r4, [r0, #3]
 80118dc:	7001      	strb	r1, [r0, #0]
 80118de:	bc70      	pop	{r4, r5, r6}
 80118e0:	80c2      	strh	r2, [r0, #6]
 80118e2:	7143      	strb	r3, [r0, #5]
 80118e4:	4770      	bx	lr
 80118e6:	bf00      	nop

080118e8 <uxr_buffer_create_session>:
 80118e8:	b570      	push	{r4, r5, r6, lr}
 80118ea:	b088      	sub	sp, #32
 80118ec:	2300      	movs	r3, #0
 80118ee:	4d12      	ldr	r5, [pc, #72]	@ (8011938 <uxr_buffer_create_session+0x50>)
 80118f0:	9307      	str	r3, [sp, #28]
 80118f2:	f8ad 201c 	strh.w	r2, [sp, #28]
 80118f6:	7802      	ldrb	r2, [r0, #0]
 80118f8:	9303      	str	r3, [sp, #12]
 80118fa:	460c      	mov	r4, r1
 80118fc:	f88d 200c 	strb.w	r2, [sp, #12]
 8011900:	2101      	movs	r1, #1
 8011902:	682a      	ldr	r2, [r5, #0]
 8011904:	f8d0 6001 	ldr.w	r6, [r0, #1]
 8011908:	88ad      	ldrh	r5, [r5, #4]
 801190a:	80c1      	strh	r1, [r0, #6]
 801190c:	f8ad 1004 	strh.w	r1, [sp, #4]
 8011910:	9200      	str	r2, [sp, #0]
 8011912:	4619      	mov	r1, r3
 8011914:	2210      	movs	r2, #16
 8011916:	4620      	mov	r0, r4
 8011918:	e9cd 3304 	strd	r3, r3, [sp, #16]
 801191c:	9306      	str	r3, [sp, #24]
 801191e:	f88d 300d 	strb.w	r3, [sp, #13]
 8011922:	9602      	str	r6, [sp, #8]
 8011924:	f8ad 5006 	strh.w	r5, [sp, #6]
 8011928:	f000 fa2c 	bl	8011d84 <uxr_buffer_submessage_header>
 801192c:	4620      	mov	r0, r4
 801192e:	4669      	mov	r1, sp
 8011930:	f001 fa50 	bl	8012dd4 <uxr_serialize_CREATE_CLIENT_Payload>
 8011934:	b008      	add	sp, #32
 8011936:	bd70      	pop	{r4, r5, r6, pc}
 8011938:	0801bb74 	.word	0x0801bb74

0801193c <uxr_buffer_delete_session>:
 801193c:	b530      	push	{r4, r5, lr}
 801193e:	4b0c      	ldr	r3, [pc, #48]	@ (8011970 <uxr_buffer_delete_session+0x34>)
 8011940:	b083      	sub	sp, #12
 8011942:	891b      	ldrh	r3, [r3, #8]
 8011944:	f8ad 3006 	strh.w	r3, [sp, #6]
 8011948:	2202      	movs	r2, #2
 801194a:	460c      	mov	r4, r1
 801194c:	80c2      	strh	r2, [r0, #6]
 801194e:	2300      	movs	r3, #0
 8011950:	2204      	movs	r2, #4
 8011952:	4608      	mov	r0, r1
 8011954:	f44f 7500 	mov.w	r5, #512	@ 0x200
 8011958:	2103      	movs	r1, #3
 801195a:	f8ad 5004 	strh.w	r5, [sp, #4]
 801195e:	f000 fa11 	bl	8011d84 <uxr_buffer_submessage_header>
 8011962:	4620      	mov	r0, r4
 8011964:	a901      	add	r1, sp, #4
 8011966:	f001 fae3 	bl	8012f30 <uxr_serialize_DELETE_Payload>
 801196a:	b003      	add	sp, #12
 801196c:	bd30      	pop	{r4, r5, pc}
 801196e:	bf00      	nop
 8011970:	0801bb74 	.word	0x0801bb74

08011974 <uxr_read_create_session_status>:
 8011974:	b510      	push	{r4, lr}
 8011976:	b088      	sub	sp, #32
 8011978:	4604      	mov	r4, r0
 801197a:	4608      	mov	r0, r1
 801197c:	a901      	add	r1, sp, #4
 801197e:	f001 fae7 	bl	8012f50 <uxr_deserialize_STATUS_AGENT_Payload>
 8011982:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8011986:	7163      	strb	r3, [r4, #5]
 8011988:	b008      	add	sp, #32
 801198a:	bd10      	pop	{r4, pc}

0801198c <uxr_read_delete_session_status>:
 801198c:	b510      	push	{r4, lr}
 801198e:	4604      	mov	r4, r0
 8011990:	b084      	sub	sp, #16
 8011992:	4608      	mov	r0, r1
 8011994:	a902      	add	r1, sp, #8
 8011996:	f001 fb0b 	bl	8012fb0 <uxr_deserialize_STATUS_Payload>
 801199a:	88e3      	ldrh	r3, [r4, #6]
 801199c:	2b02      	cmp	r3, #2
 801199e:	d001      	beq.n	80119a4 <uxr_read_delete_session_status+0x18>
 80119a0:	b004      	add	sp, #16
 80119a2:	bd10      	pop	{r4, pc}
 80119a4:	f10d 000a 	add.w	r0, sp, #10
 80119a8:	f7fe ffec 	bl	8010984 <uxr_object_id_from_raw>
 80119ac:	f89d 2008 	ldrb.w	r2, [sp, #8]
 80119b0:	f89d 3009 	ldrb.w	r3, [sp, #9]
 80119b4:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 80119b8:	b29b      	uxth	r3, r3
 80119ba:	2b02      	cmp	r3, #2
 80119bc:	bf04      	itt	eq
 80119be:	f89d 300c 	ldrbeq.w	r3, [sp, #12]
 80119c2:	7163      	strbeq	r3, [r4, #5]
 80119c4:	b004      	add	sp, #16
 80119c6:	bd10      	pop	{r4, pc}

080119c8 <uxr_stamp_create_session_header>:
 80119c8:	b510      	push	{r4, lr}
 80119ca:	4604      	mov	r4, r0
 80119cc:	b08a      	sub	sp, #40	@ 0x28
 80119ce:	a802      	add	r0, sp, #8
 80119d0:	2208      	movs	r2, #8
 80119d2:	f7fe fcd3 	bl	801037c <ucdr_init_buffer>
 80119d6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80119da:	9400      	str	r4, [sp, #0]
 80119dc:	2300      	movs	r3, #0
 80119de:	a802      	add	r0, sp, #8
 80119e0:	f001 0180 	and.w	r1, r1, #128	@ 0x80
 80119e4:	461a      	mov	r2, r3
 80119e6:	f000 fbcb 	bl	8012180 <uxr_serialize_message_header>
 80119ea:	b00a      	add	sp, #40	@ 0x28
 80119ec:	bd10      	pop	{r4, pc}
 80119ee:	bf00      	nop

080119f0 <uxr_stamp_session_header>:
 80119f0:	b570      	push	{r4, r5, r6, lr}
 80119f2:	4604      	mov	r4, r0
 80119f4:	b08c      	sub	sp, #48	@ 0x30
 80119f6:	460d      	mov	r5, r1
 80119f8:	4616      	mov	r6, r2
 80119fa:	4619      	mov	r1, r3
 80119fc:	a804      	add	r0, sp, #16
 80119fe:	2208      	movs	r2, #8
 8011a00:	9603      	str	r6, [sp, #12]
 8011a02:	f7fe fcbb 	bl	801037c <ucdr_init_buffer>
 8011a06:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011a0a:	9b03      	ldr	r3, [sp, #12]
 8011a0c:	9400      	str	r4, [sp, #0]
 8011a0e:	462a      	mov	r2, r5
 8011a10:	a804      	add	r0, sp, #16
 8011a12:	f000 fbb5 	bl	8012180 <uxr_serialize_message_header>
 8011a16:	b00c      	add	sp, #48	@ 0x30
 8011a18:	bd70      	pop	{r4, r5, r6, pc}
 8011a1a:	bf00      	nop

08011a1c <uxr_read_session_header>:
 8011a1c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011a20:	4607      	mov	r7, r0
 8011a22:	b084      	sub	sp, #16
 8011a24:	4608      	mov	r0, r1
 8011a26:	460c      	mov	r4, r1
 8011a28:	4615      	mov	r5, r2
 8011a2a:	461e      	mov	r6, r3
 8011a2c:	f7fe fcd6 	bl	80103dc <ucdr_buffer_remaining>
 8011a30:	2808      	cmp	r0, #8
 8011a32:	d803      	bhi.n	8011a3c <uxr_read_session_header+0x20>
 8011a34:	2000      	movs	r0, #0
 8011a36:	b004      	add	sp, #16
 8011a38:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011a3c:	f10d 080c 	add.w	r8, sp, #12
 8011a40:	4633      	mov	r3, r6
 8011a42:	462a      	mov	r2, r5
 8011a44:	4620      	mov	r0, r4
 8011a46:	f8cd 8000 	str.w	r8, [sp]
 8011a4a:	f10d 010b 	add.w	r1, sp, #11
 8011a4e:	f000 fbb5 	bl	80121bc <uxr_deserialize_message_header>
 8011a52:	783a      	ldrb	r2, [r7, #0]
 8011a54:	f89d 300b 	ldrb.w	r3, [sp, #11]
 8011a58:	4293      	cmp	r3, r2
 8011a5a:	d1eb      	bne.n	8011a34 <uxr_read_session_header+0x18>
 8011a5c:	061b      	lsls	r3, r3, #24
 8011a5e:	d41c      	bmi.n	8011a9a <uxr_read_session_header+0x7e>
 8011a60:	f898 2000 	ldrb.w	r2, [r8]
 8011a64:	787b      	ldrb	r3, [r7, #1]
 8011a66:	429a      	cmp	r2, r3
 8011a68:	d003      	beq.n	8011a72 <uxr_read_session_header+0x56>
 8011a6a:	2001      	movs	r0, #1
 8011a6c:	f080 0001 	eor.w	r0, r0, #1
 8011a70:	e7e1      	b.n	8011a36 <uxr_read_session_header+0x1a>
 8011a72:	f89d 200d 	ldrb.w	r2, [sp, #13]
 8011a76:	78bb      	ldrb	r3, [r7, #2]
 8011a78:	429a      	cmp	r2, r3
 8011a7a:	f107 0102 	add.w	r1, r7, #2
 8011a7e:	d1f4      	bne.n	8011a6a <uxr_read_session_header+0x4e>
 8011a80:	f89d 200e 	ldrb.w	r2, [sp, #14]
 8011a84:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8011a88:	429a      	cmp	r2, r3
 8011a8a:	d1ee      	bne.n	8011a6a <uxr_read_session_header+0x4e>
 8011a8c:	784b      	ldrb	r3, [r1, #1]
 8011a8e:	f89d 200f 	ldrb.w	r2, [sp, #15]
 8011a92:	429a      	cmp	r2, r3
 8011a94:	d1e9      	bne.n	8011a6a <uxr_read_session_header+0x4e>
 8011a96:	2000      	movs	r0, #0
 8011a98:	e7e8      	b.n	8011a6c <uxr_read_session_header+0x50>
 8011a9a:	2001      	movs	r0, #1
 8011a9c:	e7cb      	b.n	8011a36 <uxr_read_session_header+0x1a>
 8011a9e:	bf00      	nop

08011aa0 <uxr_session_header_offset>:
 8011aa0:	f990 3000 	ldrsb.w	r3, [r0]
 8011aa4:	2b00      	cmp	r3, #0
 8011aa6:	bfac      	ite	ge
 8011aa8:	2008      	movge	r0, #8
 8011aaa:	2004      	movlt	r0, #4
 8011aac:	4770      	bx	lr
 8011aae:	bf00      	nop

08011ab0 <uxr_init_base_object_request>:
 8011ab0:	b530      	push	{r4, r5, lr}
 8011ab2:	88c3      	ldrh	r3, [r0, #6]
 8011ab4:	b083      	sub	sp, #12
 8011ab6:	f64f 74f4 	movw	r4, #65524	@ 0xfff4
 8011aba:	9101      	str	r1, [sp, #4]
 8011abc:	f1a3 010a 	sub.w	r1, r3, #10
 8011ac0:	b289      	uxth	r1, r1
 8011ac2:	42a1      	cmp	r1, r4
 8011ac4:	d80e      	bhi.n	8011ae4 <uxr_init_base_object_request+0x34>
 8011ac6:	3301      	adds	r3, #1
 8011ac8:	b29c      	uxth	r4, r3
 8011aca:	f3c3 2507 	ubfx	r5, r3, #8, #8
 8011ace:	b2db      	uxtb	r3, r3
 8011ad0:	80c4      	strh	r4, [r0, #6]
 8011ad2:	1c91      	adds	r1, r2, #2
 8011ad4:	9801      	ldr	r0, [sp, #4]
 8011ad6:	7015      	strb	r5, [r2, #0]
 8011ad8:	7053      	strb	r3, [r2, #1]
 8011ada:	f7fe ff67 	bl	80109ac <uxr_object_id_to_raw>
 8011ade:	4620      	mov	r0, r4
 8011ae0:	b003      	add	sp, #12
 8011ae2:	bd30      	pop	{r4, r5, pc}
 8011ae4:	230a      	movs	r3, #10
 8011ae6:	461c      	mov	r4, r3
 8011ae8:	2500      	movs	r5, #0
 8011aea:	e7f1      	b.n	8011ad0 <uxr_init_base_object_request+0x20>

08011aec <uxr_parse_base_object_request>:
 8011aec:	b570      	push	{r4, r5, r6, lr}
 8011aee:	4604      	mov	r4, r0
 8011af0:	3002      	adds	r0, #2
 8011af2:	460d      	mov	r5, r1
 8011af4:	4616      	mov	r6, r2
 8011af6:	f7fe ff45 	bl	8010984 <uxr_object_id_from_raw>
 8011afa:	f3c0 430f 	ubfx	r3, r0, #16, #16
 8011afe:	8028      	strh	r0, [r5, #0]
 8011b00:	806b      	strh	r3, [r5, #2]
 8011b02:	7822      	ldrb	r2, [r4, #0]
 8011b04:	7863      	ldrb	r3, [r4, #1]
 8011b06:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8011b0a:	8033      	strh	r3, [r6, #0]
 8011b0c:	bd70      	pop	{r4, r5, r6, pc}
 8011b0e:	bf00      	nop

08011b10 <uxr_stream_id>:
 8011b10:	b410      	push	{r4}
 8011b12:	2901      	cmp	r1, #1
 8011b14:	b083      	sub	sp, #12
 8011b16:	d01f      	beq.n	8011b58 <uxr_stream_id+0x48>
 8011b18:	2902      	cmp	r1, #2
 8011b1a:	f04f 0400 	mov.w	r4, #0
 8011b1e:	d01e      	beq.n	8011b5e <uxr_stream_id+0x4e>
 8011b20:	2300      	movs	r3, #0
 8011b22:	f364 0307 	bfi	r3, r4, #0, #8
 8011b26:	f360 230f 	bfi	r3, r0, #8, #8
 8011b2a:	f361 4317 	bfi	r3, r1, #16, #8
 8011b2e:	f362 631f 	bfi	r3, r2, #24, #8
 8011b32:	b2da      	uxtb	r2, r3
 8011b34:	2000      	movs	r0, #0
 8011b36:	f362 0007 	bfi	r0, r2, #0, #8
 8011b3a:	f3c3 2207 	ubfx	r2, r3, #8, #8
 8011b3e:	f362 200f 	bfi	r0, r2, #8, #8
 8011b42:	f3c3 4207 	ubfx	r2, r3, #16, #8
 8011b46:	f362 4017 	bfi	r0, r2, #16, #8
 8011b4a:	0e1b      	lsrs	r3, r3, #24
 8011b4c:	f363 601f 	bfi	r0, r3, #24, #8
 8011b50:	b003      	add	sp, #12
 8011b52:	f85d 4b04 	ldr.w	r4, [sp], #4
 8011b56:	4770      	bx	lr
 8011b58:	1c44      	adds	r4, r0, #1
 8011b5a:	b2e4      	uxtb	r4, r4
 8011b5c:	e7e0      	b.n	8011b20 <uxr_stream_id+0x10>
 8011b5e:	f080 0480 	eor.w	r4, r0, #128	@ 0x80
 8011b62:	e7dd      	b.n	8011b20 <uxr_stream_id+0x10>

08011b64 <uxr_stream_id_from_raw>:
 8011b64:	b410      	push	{r4}
 8011b66:	b083      	sub	sp, #12
 8011b68:	b128      	cbz	r0, 8011b76 <uxr_stream_id_from_raw+0x12>
 8011b6a:	0603      	lsls	r3, r0, #24
 8011b6c:	d421      	bmi.n	8011bb2 <uxr_stream_id_from_raw+0x4e>
 8011b6e:	1e42      	subs	r2, r0, #1
 8011b70:	b2d2      	uxtb	r2, r2
 8011b72:	2401      	movs	r4, #1
 8011b74:	e001      	b.n	8011b7a <uxr_stream_id_from_raw+0x16>
 8011b76:	4604      	mov	r4, r0
 8011b78:	4602      	mov	r2, r0
 8011b7a:	2300      	movs	r3, #0
 8011b7c:	f360 0307 	bfi	r3, r0, #0, #8
 8011b80:	f362 230f 	bfi	r3, r2, #8, #8
 8011b84:	f364 4317 	bfi	r3, r4, #16, #8
 8011b88:	f361 631f 	bfi	r3, r1, #24, #8
 8011b8c:	b2da      	uxtb	r2, r3
 8011b8e:	2000      	movs	r0, #0
 8011b90:	f362 0007 	bfi	r0, r2, #0, #8
 8011b94:	f3c3 2207 	ubfx	r2, r3, #8, #8
 8011b98:	f362 200f 	bfi	r0, r2, #8, #8
 8011b9c:	f3c3 4207 	ubfx	r2, r3, #16, #8
 8011ba0:	f362 4017 	bfi	r0, r2, #16, #8
 8011ba4:	0e1b      	lsrs	r3, r3, #24
 8011ba6:	f363 601f 	bfi	r0, r3, #24, #8
 8011baa:	b003      	add	sp, #12
 8011bac:	f85d 4b04 	ldr.w	r4, [sp], #4
 8011bb0:	4770      	bx	lr
 8011bb2:	f080 0280 	eor.w	r2, r0, #128	@ 0x80
 8011bb6:	2402      	movs	r4, #2
 8011bb8:	e7df      	b.n	8011b7a <uxr_stream_id_from_raw+0x16>
 8011bba:	bf00      	nop

08011bbc <uxr_init_stream_storage>:
 8011bbc:	2300      	movs	r3, #0
 8011bbe:	7403      	strb	r3, [r0, #16]
 8011bc0:	f880 3040 	strb.w	r3, [r0, #64]	@ 0x40
 8011bc4:	f880 3044 	strb.w	r3, [r0, #68]	@ 0x44
 8011bc8:	f880 3060 	strb.w	r3, [r0, #96]	@ 0x60
 8011bcc:	4770      	bx	lr
 8011bce:	bf00      	nop

08011bd0 <uxr_reset_stream_storage>:
 8011bd0:	b570      	push	{r4, r5, r6, lr}
 8011bd2:	7c03      	ldrb	r3, [r0, #16]
 8011bd4:	4604      	mov	r4, r0
 8011bd6:	b153      	cbz	r3, 8011bee <uxr_reset_stream_storage+0x1e>
 8011bd8:	4606      	mov	r6, r0
 8011bda:	2500      	movs	r5, #0
 8011bdc:	4630      	mov	r0, r6
 8011bde:	f006 f89f 	bl	8017d20 <uxr_reset_output_best_effort_stream>
 8011be2:	7c23      	ldrb	r3, [r4, #16]
 8011be4:	3501      	adds	r5, #1
 8011be6:	42ab      	cmp	r3, r5
 8011be8:	f106 0610 	add.w	r6, r6, #16
 8011bec:	d8f6      	bhi.n	8011bdc <uxr_reset_stream_storage+0xc>
 8011bee:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 8011bf2:	b163      	cbz	r3, 8011c0e <uxr_reset_stream_storage+0x3e>
 8011bf4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8011bf8:	2500      	movs	r5, #0
 8011bfa:	4630      	mov	r0, r6
 8011bfc:	f005 fe9c 	bl	8017938 <uxr_reset_input_best_effort_stream>
 8011c00:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 8011c04:	3501      	adds	r5, #1
 8011c06:	42ab      	cmp	r3, r5
 8011c08:	f106 0602 	add.w	r6, r6, #2
 8011c0c:	d8f5      	bhi.n	8011bfa <uxr_reset_stream_storage+0x2a>
 8011c0e:	f894 3040 	ldrb.w	r3, [r4, #64]	@ 0x40
 8011c12:	b163      	cbz	r3, 8011c2e <uxr_reset_stream_storage+0x5e>
 8011c14:	f104 0618 	add.w	r6, r4, #24
 8011c18:	2500      	movs	r5, #0
 8011c1a:	4630      	mov	r0, r6
 8011c1c:	f006 f920 	bl	8017e60 <uxr_reset_output_reliable_stream>
 8011c20:	f894 3040 	ldrb.w	r3, [r4, #64]	@ 0x40
 8011c24:	3501      	adds	r5, #1
 8011c26:	42ab      	cmp	r3, r5
 8011c28:	f106 0628 	add.w	r6, r6, #40	@ 0x28
 8011c2c:	d8f5      	bhi.n	8011c1a <uxr_reset_stream_storage+0x4a>
 8011c2e:	f894 3060 	ldrb.w	r3, [r4, #96]	@ 0x60
 8011c32:	b163      	cbz	r3, 8011c4e <uxr_reset_stream_storage+0x7e>
 8011c34:	f104 0648 	add.w	r6, r4, #72	@ 0x48
 8011c38:	2500      	movs	r5, #0
 8011c3a:	4630      	mov	r0, r6
 8011c3c:	f005 fee4 	bl	8017a08 <uxr_reset_input_reliable_stream>
 8011c40:	f894 3060 	ldrb.w	r3, [r4, #96]	@ 0x60
 8011c44:	3501      	adds	r5, #1
 8011c46:	42ab      	cmp	r3, r5
 8011c48:	f106 0618 	add.w	r6, r6, #24
 8011c4c:	d8f5      	bhi.n	8011c3a <uxr_reset_stream_storage+0x6a>
 8011c4e:	bd70      	pop	{r4, r5, r6, pc}

08011c50 <uxr_add_output_best_effort_buffer>:
 8011c50:	b530      	push	{r4, r5, lr}
 8011c52:	7c04      	ldrb	r4, [r0, #16]
 8011c54:	1c65      	adds	r5, r4, #1
 8011c56:	b083      	sub	sp, #12
 8011c58:	7405      	strb	r5, [r0, #16]
 8011c5a:	eb00 1004 	add.w	r0, r0, r4, lsl #4
 8011c5e:	f006 f853 	bl	8017d08 <uxr_init_output_best_effort_stream>
 8011c62:	2201      	movs	r2, #1
 8011c64:	4620      	mov	r0, r4
 8011c66:	4611      	mov	r1, r2
 8011c68:	b003      	add	sp, #12
 8011c6a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8011c6e:	f7ff bf4f 	b.w	8011b10 <uxr_stream_id>
 8011c72:	bf00      	nop

08011c74 <uxr_add_output_reliable_buffer>:
 8011c74:	b570      	push	{r4, r5, r6, lr}
 8011c76:	b084      	sub	sp, #16
 8011c78:	f890 4040 	ldrb.w	r4, [r0, #64]	@ 0x40
 8011c7c:	f89d 6020 	ldrb.w	r6, [sp, #32]
 8011c80:	9600      	str	r6, [sp, #0]
 8011c82:	2528      	movs	r5, #40	@ 0x28
 8011c84:	1c66      	adds	r6, r4, #1
 8011c86:	fb05 0504 	mla	r5, r5, r4, r0
 8011c8a:	f880 6040 	strb.w	r6, [r0, #64]	@ 0x40
 8011c8e:	f105 0018 	add.w	r0, r5, #24
 8011c92:	f006 f8b3 	bl	8017dfc <uxr_init_output_reliable_stream>
 8011c96:	4620      	mov	r0, r4
 8011c98:	2201      	movs	r2, #1
 8011c9a:	2102      	movs	r1, #2
 8011c9c:	b004      	add	sp, #16
 8011c9e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8011ca2:	f7ff bf35 	b.w	8011b10 <uxr_stream_id>
 8011ca6:	bf00      	nop

08011ca8 <uxr_add_input_best_effort_buffer>:
 8011ca8:	b510      	push	{r4, lr}
 8011caa:	f890 4044 	ldrb.w	r4, [r0, #68]	@ 0x44
 8011cae:	1c62      	adds	r2, r4, #1
 8011cb0:	f104 0321 	add.w	r3, r4, #33	@ 0x21
 8011cb4:	b082      	sub	sp, #8
 8011cb6:	f880 2044 	strb.w	r2, [r0, #68]	@ 0x44
 8011cba:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 8011cbe:	f005 fe37 	bl	8017930 <uxr_init_input_best_effort_stream>
 8011cc2:	4620      	mov	r0, r4
 8011cc4:	2200      	movs	r2, #0
 8011cc6:	2101      	movs	r1, #1
 8011cc8:	b002      	add	sp, #8
 8011cca:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011cce:	f7ff bf1f 	b.w	8011b10 <uxr_stream_id>
 8011cd2:	bf00      	nop

08011cd4 <uxr_add_input_reliable_buffer>:
 8011cd4:	b570      	push	{r4, r5, r6, lr}
 8011cd6:	b084      	sub	sp, #16
 8011cd8:	f890 4060 	ldrb.w	r4, [r0, #96]	@ 0x60
 8011cdc:	9e08      	ldr	r6, [sp, #32]
 8011cde:	9600      	str	r6, [sp, #0]
 8011ce0:	2518      	movs	r5, #24
 8011ce2:	1c66      	adds	r6, r4, #1
 8011ce4:	fb05 0504 	mla	r5, r5, r4, r0
 8011ce8:	f880 6060 	strb.w	r6, [r0, #96]	@ 0x60
 8011cec:	f105 0048 	add.w	r0, r5, #72	@ 0x48
 8011cf0:	f005 fe66 	bl	80179c0 <uxr_init_input_reliable_stream>
 8011cf4:	4620      	mov	r0, r4
 8011cf6:	2200      	movs	r2, #0
 8011cf8:	2102      	movs	r1, #2
 8011cfa:	b004      	add	sp, #16
 8011cfc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8011d00:	f7ff bf06 	b.w	8011b10 <uxr_stream_id>

08011d04 <uxr_get_output_best_effort_stream>:
 8011d04:	7c03      	ldrb	r3, [r0, #16]
 8011d06:	428b      	cmp	r3, r1
 8011d08:	bf8c      	ite	hi
 8011d0a:	eb00 1001 	addhi.w	r0, r0, r1, lsl #4
 8011d0e:	2000      	movls	r0, #0
 8011d10:	4770      	bx	lr
 8011d12:	bf00      	nop

08011d14 <uxr_get_output_reliable_stream>:
 8011d14:	f890 3040 	ldrb.w	r3, [r0, #64]	@ 0x40
 8011d18:	428b      	cmp	r3, r1
 8011d1a:	bf83      	ittte	hi
 8011d1c:	2328      	movhi	r3, #40	@ 0x28
 8011d1e:	fb03 0101 	mlahi	r1, r3, r1, r0
 8011d22:	f101 0018 	addhi.w	r0, r1, #24
 8011d26:	2000      	movls	r0, #0
 8011d28:	4770      	bx	lr
 8011d2a:	bf00      	nop

08011d2c <uxr_get_input_best_effort_stream>:
 8011d2c:	f890 3044 	ldrb.w	r3, [r0, #68]	@ 0x44
 8011d30:	428b      	cmp	r3, r1
 8011d32:	bf86      	itte	hi
 8011d34:	3121      	addhi	r1, #33	@ 0x21
 8011d36:	eb00 0041 	addhi.w	r0, r0, r1, lsl #1
 8011d3a:	2000      	movls	r0, #0
 8011d3c:	4770      	bx	lr
 8011d3e:	bf00      	nop

08011d40 <uxr_get_input_reliable_stream>:
 8011d40:	f890 3060 	ldrb.w	r3, [r0, #96]	@ 0x60
 8011d44:	428b      	cmp	r3, r1
 8011d46:	bf83      	ittte	hi
 8011d48:	2318      	movhi	r3, #24
 8011d4a:	fb03 0101 	mlahi	r1, r3, r1, r0
 8011d4e:	f101 0048 	addhi.w	r0, r1, #72	@ 0x48
 8011d52:	2000      	movls	r0, #0
 8011d54:	4770      	bx	lr
 8011d56:	bf00      	nop

08011d58 <uxr_output_streams_confirmed>:
 8011d58:	f890 3040 	ldrb.w	r3, [r0, #64]	@ 0x40
 8011d5c:	b183      	cbz	r3, 8011d80 <uxr_output_streams_confirmed+0x28>
 8011d5e:	b570      	push	{r4, r5, r6, lr}
 8011d60:	4606      	mov	r6, r0
 8011d62:	f100 0518 	add.w	r5, r0, #24
 8011d66:	2400      	movs	r4, #0
 8011d68:	e001      	b.n	8011d6e <uxr_output_streams_confirmed+0x16>
 8011d6a:	3528      	adds	r5, #40	@ 0x28
 8011d6c:	b138      	cbz	r0, 8011d7e <uxr_output_streams_confirmed+0x26>
 8011d6e:	4628      	mov	r0, r5
 8011d70:	f006 fae6 	bl	8018340 <uxr_is_output_up_to_date>
 8011d74:	f896 3040 	ldrb.w	r3, [r6, #64]	@ 0x40
 8011d78:	3401      	adds	r4, #1
 8011d7a:	42a3      	cmp	r3, r4
 8011d7c:	d8f5      	bhi.n	8011d6a <uxr_output_streams_confirmed+0x12>
 8011d7e:	bd70      	pop	{r4, r5, r6, pc}
 8011d80:	2001      	movs	r0, #1
 8011d82:	4770      	bx	lr

08011d84 <uxr_buffer_submessage_header>:
 8011d84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011d86:	4604      	mov	r4, r0
 8011d88:	460e      	mov	r6, r1
 8011d8a:	2104      	movs	r1, #4
 8011d8c:	4615      	mov	r5, r2
 8011d8e:	461f      	mov	r7, r3
 8011d90:	f7fe fb0e 	bl	80103b0 <ucdr_align_to>
 8011d94:	2301      	movs	r3, #1
 8011d96:	ea47 0203 	orr.w	r2, r7, r3
 8011d9a:	4631      	mov	r1, r6
 8011d9c:	7523      	strb	r3, [r4, #20]
 8011d9e:	4620      	mov	r0, r4
 8011da0:	462b      	mov	r3, r5
 8011da2:	f000 fa2b 	bl	80121fc <uxr_serialize_submessage_header>
 8011da6:	4620      	mov	r0, r4
 8011da8:	f7fe fb18 	bl	80103dc <ucdr_buffer_remaining>
 8011dac:	42a8      	cmp	r0, r5
 8011dae:	bf34      	ite	cc
 8011db0:	2000      	movcc	r0, #0
 8011db2:	2001      	movcs	r0, #1
 8011db4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011db6:	bf00      	nop

08011db8 <uxr_read_submessage_header>:
 8011db8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011dbc:	4604      	mov	r4, r0
 8011dbe:	460d      	mov	r5, r1
 8011dc0:	2104      	movs	r1, #4
 8011dc2:	4616      	mov	r6, r2
 8011dc4:	4698      	mov	r8, r3
 8011dc6:	f7fe faf3 	bl	80103b0 <ucdr_align_to>
 8011dca:	4620      	mov	r0, r4
 8011dcc:	f7fe fb06 	bl	80103dc <ucdr_buffer_remaining>
 8011dd0:	2803      	cmp	r0, #3
 8011dd2:	bf8c      	ite	hi
 8011dd4:	2701      	movhi	r7, #1
 8011dd6:	2700      	movls	r7, #0
 8011dd8:	d802      	bhi.n	8011de0 <uxr_read_submessage_header+0x28>
 8011dda:	4638      	mov	r0, r7
 8011ddc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011de0:	4633      	mov	r3, r6
 8011de2:	4642      	mov	r2, r8
 8011de4:	4620      	mov	r0, r4
 8011de6:	4629      	mov	r1, r5
 8011de8:	f000 fa1c 	bl	8012224 <uxr_deserialize_submessage_header>
 8011dec:	f898 3000 	ldrb.w	r3, [r8]
 8011df0:	f003 02fe 	and.w	r2, r3, #254	@ 0xfe
 8011df4:	f003 0301 	and.w	r3, r3, #1
 8011df8:	f888 2000 	strb.w	r2, [r8]
 8011dfc:	7523      	strb	r3, [r4, #20]
 8011dfe:	4638      	mov	r0, r7
 8011e00:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08011e04 <uxr_submessage_padding>:
 8011e04:	f010 0003 	ands.w	r0, r0, #3
 8011e08:	bf18      	it	ne
 8011e0a:	f1c0 0004 	rsbne	r0, r0, #4
 8011e0e:	4770      	bx	lr

08011e10 <uxr_millis>:
 8011e10:	b510      	push	{r4, lr}
 8011e12:	b084      	sub	sp, #16
 8011e14:	4669      	mov	r1, sp
 8011e16:	2001      	movs	r0, #1
 8011e18:	f7f0 fb7a 	bl	8002510 <clock_gettime>
 8011e1c:	e9dd 2400 	ldrd	r2, r4, [sp]
 8011e20:	4907      	ldr	r1, [pc, #28]	@ (8011e40 <uxr_millis+0x30>)
 8011e22:	9802      	ldr	r0, [sp, #8]
 8011e24:	fba2 2301 	umull	r2, r3, r2, r1
 8011e28:	fb01 3304 	mla	r3, r1, r4, r3
 8011e2c:	4604      	mov	r4, r0
 8011e2e:	1810      	adds	r0, r2, r0
 8011e30:	eb43 71e4 	adc.w	r1, r3, r4, asr #31
 8011e34:	4a03      	ldr	r2, [pc, #12]	@ (8011e44 <uxr_millis+0x34>)
 8011e36:	2300      	movs	r3, #0
 8011e38:	f7ee ff0e 	bl	8000c58 <__aeabi_ldivmod>
 8011e3c:	b004      	add	sp, #16
 8011e3e:	bd10      	pop	{r4, pc}
 8011e40:	3b9aca00 	.word	0x3b9aca00
 8011e44:	000f4240 	.word	0x000f4240

08011e48 <uxr_nanos>:
 8011e48:	b510      	push	{r4, lr}
 8011e4a:	b084      	sub	sp, #16
 8011e4c:	4669      	mov	r1, sp
 8011e4e:	2001      	movs	r0, #1
 8011e50:	f7f0 fb5e 	bl	8002510 <clock_gettime>
 8011e54:	e9dd 2400 	ldrd	r2, r4, [sp]
 8011e58:	4905      	ldr	r1, [pc, #20]	@ (8011e70 <uxr_nanos+0x28>)
 8011e5a:	9802      	ldr	r0, [sp, #8]
 8011e5c:	fba2 2301 	umull	r2, r3, r2, r1
 8011e60:	fb01 3304 	mla	r3, r1, r4, r3
 8011e64:	4604      	mov	r4, r0
 8011e66:	1810      	adds	r0, r2, r0
 8011e68:	eb43 71e4 	adc.w	r1, r3, r4, asr #31
 8011e6c:	b004      	add	sp, #16
 8011e6e:	bd10      	pop	{r4, pc}
 8011e70:	3b9aca00 	.word	0x3b9aca00

08011e74 <on_full_output_buffer_fragmented>:
 8011e74:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011e78:	460c      	mov	r4, r1
 8011e7a:	b08a      	sub	sp, #40	@ 0x28
 8011e7c:	f891 10c1 	ldrb.w	r1, [r1, #193]	@ 0xc1
 8011e80:	4606      	mov	r6, r0
 8011e82:	f104 0008 	add.w	r0, r4, #8
 8011e86:	f7ff ff45 	bl	8011d14 <uxr_get_output_reliable_stream>
 8011e8a:	4605      	mov	r5, r0
 8011e8c:	f006 fa62 	bl	8018354 <get_available_free_slots>
 8011e90:	b968      	cbnz	r0, 8011eae <on_full_output_buffer_fragmented+0x3a>
 8011e92:	e9d4 312e 	ldrd	r3, r1, [r4, #184]	@ 0xb8
 8011e96:	4620      	mov	r0, r4
 8011e98:	4798      	blx	r3
 8011e9a:	b918      	cbnz	r0, 8011ea4 <on_full_output_buffer_fragmented+0x30>
 8011e9c:	2001      	movs	r0, #1
 8011e9e:	b00a      	add	sp, #40	@ 0x28
 8011ea0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011ea4:	4628      	mov	r0, r5
 8011ea6:	f006 fa55 	bl	8018354 <get_available_free_slots>
 8011eaa:	2800      	cmp	r0, #0
 8011eac:	d0f6      	beq.n	8011e9c <on_full_output_buffer_fragmented+0x28>
 8011eae:	8928      	ldrh	r0, [r5, #8]
 8011eb0:	89eb      	ldrh	r3, [r5, #14]
 8011eb2:	7b2a      	ldrb	r2, [r5, #12]
 8011eb4:	fbb3 f1f0 	udiv	r1, r3, r0
 8011eb8:	f5c2 427f 	rsb	r2, r2, #65280	@ 0xff00
 8011ebc:	fb00 3111 	mls	r1, r0, r1, r3
 8011ec0:	b28b      	uxth	r3, r1
 8011ec2:	32fc      	adds	r2, #252	@ 0xfc
 8011ec4:	6869      	ldr	r1, [r5, #4]
 8011ec6:	fbb1 f1f0 	udiv	r1, r1, r0
 8011eca:	1f0f      	subs	r7, r1, #4
 8011ecc:	f8d4 00c4 	ldr.w	r0, [r4, #196]	@ 0xc4
 8011ed0:	fb01 f103 	mul.w	r1, r1, r3
 8011ed4:	443a      	add	r2, r7
 8011ed6:	682b      	ldr	r3, [r5, #0]
 8011ed8:	fa1f f882 	uxth.w	r8, r2
 8011edc:	3104      	adds	r1, #4
 8011ede:	4419      	add	r1, r3
 8011ee0:	eba0 0008 	sub.w	r0, r0, r8
 8011ee4:	f8c4 00c4 	str.w	r0, [r4, #196]	@ 0xc4
 8011ee8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8011eec:	9300      	str	r3, [sp, #0]
 8011eee:	463a      	mov	r2, r7
 8011ef0:	2300      	movs	r3, #0
 8011ef2:	a802      	add	r0, sp, #8
 8011ef4:	f7fe fa30 	bl	8010358 <ucdr_init_buffer_origin_offset>
 8011ef8:	f8d4 20c4 	ldr.w	r2, [r4, #196]	@ 0xc4
 8011efc:	f102 0308 	add.w	r3, r2, #8
 8011f00:	42bb      	cmp	r3, r7
 8011f02:	d927      	bls.n	8011f54 <on_full_output_buffer_fragmented+0xe0>
 8011f04:	4642      	mov	r2, r8
 8011f06:	2300      	movs	r3, #0
 8011f08:	210d      	movs	r1, #13
 8011f0a:	a802      	add	r0, sp, #8
 8011f0c:	f7ff ff3a 	bl	8011d84 <uxr_buffer_submessage_header>
 8011f10:	8928      	ldrh	r0, [r5, #8]
 8011f12:	89eb      	ldrh	r3, [r5, #14]
 8011f14:	fbb3 f1f0 	udiv	r1, r3, r0
 8011f18:	fb00 3111 	mls	r1, r0, r1, r3
 8011f1c:	e9d5 2300 	ldrd	r2, r3, [r5]
 8011f20:	b289      	uxth	r1, r1
 8011f22:	fbb3 f3f0 	udiv	r3, r3, r0
 8011f26:	fb03 f301 	mul.w	r3, r3, r1
 8011f2a:	50d7      	str	r7, [r2, r3]
 8011f2c:	89e8      	ldrh	r0, [r5, #14]
 8011f2e:	2101      	movs	r1, #1
 8011f30:	f006 fb56 	bl	80185e0 <uxr_seq_num_add>
 8011f34:	e9dd 2103 	ldrd	r2, r1, [sp, #12]
 8011f38:	81e8      	strh	r0, [r5, #14]
 8011f3a:	1a52      	subs	r2, r2, r1
 8011f3c:	4630      	mov	r0, r6
 8011f3e:	f7fe fa1d 	bl	801037c <ucdr_init_buffer>
 8011f42:	4630      	mov	r0, r6
 8011f44:	490f      	ldr	r1, [pc, #60]	@ (8011f84 <on_full_output_buffer_fragmented+0x110>)
 8011f46:	4622      	mov	r2, r4
 8011f48:	f7fe f9ee 	bl	8010328 <ucdr_set_on_full_buffer_callback>
 8011f4c:	2000      	movs	r0, #0
 8011f4e:	b00a      	add	sp, #40	@ 0x28
 8011f50:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011f54:	b292      	uxth	r2, r2
 8011f56:	2302      	movs	r3, #2
 8011f58:	210d      	movs	r1, #13
 8011f5a:	a802      	add	r0, sp, #8
 8011f5c:	f7ff ff12 	bl	8011d84 <uxr_buffer_submessage_header>
 8011f60:	8928      	ldrh	r0, [r5, #8]
 8011f62:	89eb      	ldrh	r3, [r5, #14]
 8011f64:	fbb3 f2f0 	udiv	r2, r3, r0
 8011f68:	fb00 3212 	mls	r2, r0, r2, r3
 8011f6c:	f8d4 10c4 	ldr.w	r1, [r4, #196]	@ 0xc4
 8011f70:	686b      	ldr	r3, [r5, #4]
 8011f72:	fbb3 f3f0 	udiv	r3, r3, r0
 8011f76:	b292      	uxth	r2, r2
 8011f78:	6828      	ldr	r0, [r5, #0]
 8011f7a:	fb03 f302 	mul.w	r3, r3, r2
 8011f7e:	3108      	adds	r1, #8
 8011f80:	50c1      	str	r1, [r0, r3]
 8011f82:	e7d3      	b.n	8011f2c <on_full_output_buffer_fragmented+0xb8>
 8011f84:	08011e75 	.word	0x08011e75

08011f88 <uxr_prepare_output_stream>:
 8011f88:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011f8a:	b087      	sub	sp, #28
 8011f8c:	2407      	movs	r4, #7
 8011f8e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8011f90:	9202      	str	r2, [sp, #8]
 8011f92:	2500      	movs	r5, #0
 8011f94:	1d32      	adds	r2, r6, #4
 8011f96:	e9cd 4500 	strd	r4, r5, [sp]
 8011f9a:	9103      	str	r1, [sp, #12]
 8011f9c:	461c      	mov	r4, r3
 8011f9e:	4606      	mov	r6, r0
 8011fa0:	f7ff fc4c 	bl	801183c <uxr_prepare_stream_to_write_submessage>
 8011fa4:	f080 0201 	eor.w	r2, r0, #1
 8011fa8:	b2d2      	uxtb	r2, r2
 8011faa:	75a2      	strb	r2, [r4, #22]
 8011fac:	b112      	cbz	r2, 8011fb4 <uxr_prepare_output_stream+0x2c>
 8011fae:	4628      	mov	r0, r5
 8011fb0:	b007      	add	sp, #28
 8011fb2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011fb4:	aa05      	add	r2, sp, #20
 8011fb6:	9902      	ldr	r1, [sp, #8]
 8011fb8:	4630      	mov	r0, r6
 8011fba:	f7ff fd79 	bl	8011ab0 <uxr_init_base_object_request>
 8011fbe:	a905      	add	r1, sp, #20
 8011fc0:	4605      	mov	r5, r0
 8011fc2:	4620      	mov	r0, r4
 8011fc4:	f001 f872 	bl	80130ac <uxr_serialize_WRITE_DATA_Payload_Data>
 8011fc8:	e9d4 2101 	ldrd	r2, r1, [r4, #4]
 8011fcc:	e9d4 6706 	ldrd	r6, r7, [r4, #24]
 8011fd0:	1a52      	subs	r2, r2, r1
 8011fd2:	4620      	mov	r0, r4
 8011fd4:	f7fe f9d2 	bl	801037c <ucdr_init_buffer>
 8011fd8:	4620      	mov	r0, r4
 8011fda:	463a      	mov	r2, r7
 8011fdc:	4631      	mov	r1, r6
 8011fde:	f7fe f9a3 	bl	8010328 <ucdr_set_on_full_buffer_callback>
 8011fe2:	4628      	mov	r0, r5
 8011fe4:	b007      	add	sp, #28
 8011fe6:	bdf0      	pop	{r4, r5, r6, r7, pc}

08011fe8 <uxr_prepare_output_stream_fragmented>:
 8011fe8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011fec:	b093      	sub	sp, #76	@ 0x4c
 8011fee:	4605      	mov	r5, r0
 8011ff0:	9107      	str	r1, [sp, #28]
 8011ff2:	3008      	adds	r0, #8
 8011ff4:	f3c1 2107 	ubfx	r1, r1, #8, #8
 8011ff8:	9303      	str	r3, [sp, #12]
 8011ffa:	9206      	str	r2, [sp, #24]
 8011ffc:	f7ff fe8a 	bl	8011d14 <uxr_get_output_reliable_stream>
 8012000:	f89d 301e 	ldrb.w	r3, [sp, #30]
 8012004:	2b01      	cmp	r3, #1
 8012006:	f000 8094 	beq.w	8012132 <uxr_prepare_output_stream_fragmented+0x14a>
 801200a:	4604      	mov	r4, r0
 801200c:	2800      	cmp	r0, #0
 801200e:	f000 8090 	beq.w	8012132 <uxr_prepare_output_stream_fragmented+0x14a>
 8012012:	f006 f99f 	bl	8018354 <get_available_free_slots>
 8012016:	2800      	cmp	r0, #0
 8012018:	f000 8086 	beq.w	8012128 <uxr_prepare_output_stream_fragmented+0x140>
 801201c:	8922      	ldrh	r2, [r4, #8]
 801201e:	89e7      	ldrh	r7, [r4, #14]
 8012020:	fbb7 f8f2 	udiv	r8, r7, r2
 8012024:	e9d4 3100 	ldrd	r3, r1, [r4]
 8012028:	fb02 7818 	mls	r8, r2, r8, r7
 801202c:	fa1f f888 	uxth.w	r8, r8
 8012030:	fbb1 f2f2 	udiv	r2, r1, r2
 8012034:	fb02 f808 	mul.w	r8, r2, r8
 8012038:	f108 0804 	add.w	r8, r8, #4
 801203c:	4498      	add	r8, r3
 801203e:	7b23      	ldrb	r3, [r4, #12]
 8012040:	f858 ac04 	ldr.w	sl, [r8, #-4]
 8012044:	9204      	str	r2, [sp, #16]
 8012046:	4553      	cmp	r3, sl
 8012048:	f1a2 0b04 	sub.w	fp, r2, #4
 801204c:	d37d      	bcc.n	801214a <uxr_prepare_output_stream_fragmented+0x162>
 801204e:	9e1c      	ldr	r6, [sp, #112]	@ 0x70
 8012050:	f8cd a000 	str.w	sl, [sp]
 8012054:	f1ab 0904 	sub.w	r9, fp, #4
 8012058:	eba9 0903 	sub.w	r9, r9, r3
 801205c:	3608      	adds	r6, #8
 801205e:	a80a      	add	r0, sp, #40	@ 0x28
 8012060:	2300      	movs	r3, #0
 8012062:	465a      	mov	r2, fp
 8012064:	4641      	mov	r1, r8
 8012066:	fa1f f989 	uxth.w	r9, r9
 801206a:	9605      	str	r6, [sp, #20]
 801206c:	f7fe f974 	bl	8010358 <ucdr_init_buffer_origin_offset>
 8012070:	455e      	cmp	r6, fp
 8012072:	bf34      	ite	cc
 8012074:	2302      	movcc	r3, #2
 8012076:	2300      	movcs	r3, #0
 8012078:	464a      	mov	r2, r9
 801207a:	210d      	movs	r1, #13
 801207c:	a80a      	add	r0, sp, #40	@ 0x28
 801207e:	f7ff fe81 	bl	8011d84 <uxr_buffer_submessage_header>
 8012082:	8920      	ldrh	r0, [r4, #8]
 8012084:	fbb7 f3f0 	udiv	r3, r7, r0
 8012088:	e9d4 2100 	ldrd	r2, r1, [r4]
 801208c:	fb00 7313 	mls	r3, r0, r3, r7
 8012090:	b29b      	uxth	r3, r3
 8012092:	fbb1 f1f0 	udiv	r1, r1, r0
 8012096:	fb03 f301 	mul.w	r3, r3, r1
 801209a:	4638      	mov	r0, r7
 801209c:	f842 b003 	str.w	fp, [r2, r3]
 80120a0:	2101      	movs	r1, #1
 80120a2:	f006 fa9d 	bl	80185e0 <uxr_seq_num_add>
 80120a6:	9b04      	ldr	r3, [sp, #16]
 80120a8:	9e03      	ldr	r6, [sp, #12]
 80120aa:	f1a3 0208 	sub.w	r2, r3, #8
 80120ae:	f10a 0104 	add.w	r1, sl, #4
 80120b2:	4607      	mov	r7, r0
 80120b4:	eba2 020a 	sub.w	r2, r2, sl
 80120b8:	4441      	add	r1, r8
 80120ba:	4630      	mov	r0, r6
 80120bc:	f7fe f95e 	bl	801037c <ucdr_init_buffer>
 80120c0:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 80120c2:	81e7      	strh	r7, [r4, #14]
 80120c4:	1d1a      	adds	r2, r3, #4
 80120c6:	f5b2 3f80 	cmp.w	r2, #65536	@ 0x10000
 80120ca:	bf28      	it	cs
 80120cc:	2200      	movcs	r2, #0
 80120ce:	b292      	uxth	r2, r2
 80120d0:	2300      	movs	r3, #0
 80120d2:	2107      	movs	r1, #7
 80120d4:	4630      	mov	r0, r6
 80120d6:	f7ff fe55 	bl	8011d84 <uxr_buffer_submessage_header>
 80120da:	9906      	ldr	r1, [sp, #24]
 80120dc:	aa09      	add	r2, sp, #36	@ 0x24
 80120de:	4628      	mov	r0, r5
 80120e0:	f7ff fce6 	bl	8011ab0 <uxr_init_base_object_request>
 80120e4:	4604      	mov	r4, r0
 80120e6:	b328      	cbz	r0, 8012134 <uxr_prepare_output_stream_fragmented+0x14c>
 80120e8:	9e03      	ldr	r6, [sp, #12]
 80120ea:	a909      	add	r1, sp, #36	@ 0x24
 80120ec:	4630      	mov	r0, r6
 80120ee:	f000 ffdd 	bl	80130ac <uxr_serialize_WRITE_DATA_Payload_Data>
 80120f2:	e9d6 2101 	ldrd	r2, r1, [r6, #4]
 80120f6:	4630      	mov	r0, r6
 80120f8:	1a52      	subs	r2, r2, r1
 80120fa:	f7fe f93f 	bl	801037c <ucdr_init_buffer>
 80120fe:	9a05      	ldr	r2, [sp, #20]
 8012100:	f8c5 20c4 	str.w	r2, [r5, #196]	@ 0xc4
 8012104:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 8012106:	9b07      	ldr	r3, [sp, #28]
 8012108:	f8c5 20b8 	str.w	r2, [r5, #184]	@ 0xb8
 801210c:	9a1e      	ldr	r2, [sp, #120]	@ 0x78
 801210e:	f8c5 20bc 	str.w	r2, [r5, #188]	@ 0xbc
 8012112:	4630      	mov	r0, r6
 8012114:	4919      	ldr	r1, [pc, #100]	@ (801217c <uxr_prepare_output_stream_fragmented+0x194>)
 8012116:	f8c5 30c0 	str.w	r3, [r5, #192]	@ 0xc0
 801211a:	462a      	mov	r2, r5
 801211c:	f7fe f904 	bl	8010328 <ucdr_set_on_full_buffer_callback>
 8012120:	4620      	mov	r0, r4
 8012122:	b013      	add	sp, #76	@ 0x4c
 8012124:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012128:	991e      	ldr	r1, [sp, #120]	@ 0x78
 801212a:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 801212c:	4628      	mov	r0, r5
 801212e:	4798      	blx	r3
 8012130:	b920      	cbnz	r0, 801213c <uxr_prepare_output_stream_fragmented+0x154>
 8012132:	2400      	movs	r4, #0
 8012134:	4620      	mov	r0, r4
 8012136:	b013      	add	sp, #76	@ 0x4c
 8012138:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801213c:	4620      	mov	r0, r4
 801213e:	f006 f909 	bl	8018354 <get_available_free_slots>
 8012142:	2800      	cmp	r0, #0
 8012144:	f47f af6a 	bne.w	801201c <uxr_prepare_output_stream_fragmented+0x34>
 8012148:	e7f3      	b.n	8012132 <uxr_prepare_output_stream_fragmented+0x14a>
 801214a:	4638      	mov	r0, r7
 801214c:	2101      	movs	r1, #1
 801214e:	f006 fa47 	bl	80185e0 <uxr_seq_num_add>
 8012152:	8922      	ldrh	r2, [r4, #8]
 8012154:	fbb0 f8f2 	udiv	r8, r0, r2
 8012158:	fb02 0818 	mls	r8, r2, r8, r0
 801215c:	fa1f f888 	uxth.w	r8, r8
 8012160:	6863      	ldr	r3, [r4, #4]
 8012162:	fbb3 f3f2 	udiv	r3, r3, r2
 8012166:	6822      	ldr	r2, [r4, #0]
 8012168:	fb08 f803 	mul.w	r8, r8, r3
 801216c:	f108 0804 	add.w	r8, r8, #4
 8012170:	4490      	add	r8, r2
 8012172:	7b23      	ldrb	r3, [r4, #12]
 8012174:	f858 ac04 	ldr.w	sl, [r8, #-4]
 8012178:	4607      	mov	r7, r0
 801217a:	e768      	b.n	801204e <uxr_prepare_output_stream_fragmented+0x66>
 801217c:	08011e75 	.word	0x08011e75

08012180 <uxr_serialize_message_header>:
 8012180:	b5f0      	push	{r4, r5, r6, r7, lr}
 8012182:	b083      	sub	sp, #12
 8012184:	4616      	mov	r6, r2
 8012186:	4604      	mov	r4, r0
 8012188:	9301      	str	r3, [sp, #4]
 801218a:	460d      	mov	r5, r1
 801218c:	9f08      	ldr	r7, [sp, #32]
 801218e:	f7fc ffab 	bl	800f0e8 <ucdr_serialize_uint8_t>
 8012192:	4631      	mov	r1, r6
 8012194:	4620      	mov	r0, r4
 8012196:	f7fc ffa7 	bl	800f0e8 <ucdr_serialize_uint8_t>
 801219a:	9a01      	ldr	r2, [sp, #4]
 801219c:	4620      	mov	r0, r4
 801219e:	2101      	movs	r1, #1
 80121a0:	f7fd f84e 	bl	800f240 <ucdr_serialize_endian_uint16_t>
 80121a4:	062b      	lsls	r3, r5, #24
 80121a6:	d501      	bpl.n	80121ac <uxr_serialize_message_header+0x2c>
 80121a8:	b003      	add	sp, #12
 80121aa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80121ac:	4639      	mov	r1, r7
 80121ae:	4620      	mov	r0, r4
 80121b0:	2204      	movs	r2, #4
 80121b2:	b003      	add	sp, #12
 80121b4:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 80121b8:	f005 b96e 	b.w	8017498 <ucdr_serialize_array_uint8_t>

080121bc <uxr_deserialize_message_header>:
 80121bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80121be:	b083      	sub	sp, #12
 80121c0:	4616      	mov	r6, r2
 80121c2:	4604      	mov	r4, r0
 80121c4:	9301      	str	r3, [sp, #4]
 80121c6:	460d      	mov	r5, r1
 80121c8:	9f08      	ldr	r7, [sp, #32]
 80121ca:	f7fc ffa3 	bl	800f114 <ucdr_deserialize_uint8_t>
 80121ce:	4631      	mov	r1, r6
 80121d0:	4620      	mov	r0, r4
 80121d2:	f7fc ff9f 	bl	800f114 <ucdr_deserialize_uint8_t>
 80121d6:	9a01      	ldr	r2, [sp, #4]
 80121d8:	4620      	mov	r0, r4
 80121da:	2101      	movs	r1, #1
 80121dc:	f7fd f924 	bl	800f428 <ucdr_deserialize_endian_uint16_t>
 80121e0:	f995 3000 	ldrsb.w	r3, [r5]
 80121e4:	2b00      	cmp	r3, #0
 80121e6:	da01      	bge.n	80121ec <uxr_deserialize_message_header+0x30>
 80121e8:	b003      	add	sp, #12
 80121ea:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80121ec:	4639      	mov	r1, r7
 80121ee:	4620      	mov	r0, r4
 80121f0:	2204      	movs	r2, #4
 80121f2:	b003      	add	sp, #12
 80121f4:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 80121f8:	f005 b9b2 	b.w	8017560 <ucdr_deserialize_array_uint8_t>

080121fc <uxr_serialize_submessage_header>:
 80121fc:	b530      	push	{r4, r5, lr}
 80121fe:	b083      	sub	sp, #12
 8012200:	4615      	mov	r5, r2
 8012202:	4604      	mov	r4, r0
 8012204:	9301      	str	r3, [sp, #4]
 8012206:	f7fc ff6f 	bl	800f0e8 <ucdr_serialize_uint8_t>
 801220a:	4629      	mov	r1, r5
 801220c:	4620      	mov	r0, r4
 801220e:	f7fc ff6b 	bl	800f0e8 <ucdr_serialize_uint8_t>
 8012212:	9a01      	ldr	r2, [sp, #4]
 8012214:	4620      	mov	r0, r4
 8012216:	2101      	movs	r1, #1
 8012218:	b003      	add	sp, #12
 801221a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801221e:	f7fd b80f 	b.w	800f240 <ucdr_serialize_endian_uint16_t>
 8012222:	bf00      	nop

08012224 <uxr_deserialize_submessage_header>:
 8012224:	b530      	push	{r4, r5, lr}
 8012226:	b083      	sub	sp, #12
 8012228:	4615      	mov	r5, r2
 801222a:	4604      	mov	r4, r0
 801222c:	9301      	str	r3, [sp, #4]
 801222e:	f7fc ff71 	bl	800f114 <ucdr_deserialize_uint8_t>
 8012232:	4629      	mov	r1, r5
 8012234:	4620      	mov	r0, r4
 8012236:	f7fc ff6d 	bl	800f114 <ucdr_deserialize_uint8_t>
 801223a:	9a01      	ldr	r2, [sp, #4]
 801223c:	4620      	mov	r0, r4
 801223e:	2101      	movs	r1, #1
 8012240:	b003      	add	sp, #12
 8012242:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8012246:	f7fd b8ef 	b.w	800f428 <ucdr_deserialize_endian_uint16_t>
 801224a:	bf00      	nop

0801224c <uxr_serialize_CLIENT_Representation>:
 801224c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012250:	2204      	movs	r2, #4
 8012252:	460c      	mov	r4, r1
 8012254:	4605      	mov	r5, r0
 8012256:	f005 f91f 	bl	8017498 <ucdr_serialize_array_uint8_t>
 801225a:	1d21      	adds	r1, r4, #4
 801225c:	4607      	mov	r7, r0
 801225e:	2202      	movs	r2, #2
 8012260:	4628      	mov	r0, r5
 8012262:	f005 f919 	bl	8017498 <ucdr_serialize_array_uint8_t>
 8012266:	1da1      	adds	r1, r4, #6
 8012268:	4007      	ands	r7, r0
 801226a:	2202      	movs	r2, #2
 801226c:	4628      	mov	r0, r5
 801226e:	f005 f913 	bl	8017498 <ucdr_serialize_array_uint8_t>
 8012272:	fa5f f887 	uxtb.w	r8, r7
 8012276:	2204      	movs	r2, #4
 8012278:	4607      	mov	r7, r0
 801227a:	f104 0108 	add.w	r1, r4, #8
 801227e:	4628      	mov	r0, r5
 8012280:	f005 f90a 	bl	8017498 <ucdr_serialize_array_uint8_t>
 8012284:	ea08 0707 	and.w	r7, r8, r7
 8012288:	7b21      	ldrb	r1, [r4, #12]
 801228a:	4680      	mov	r8, r0
 801228c:	4628      	mov	r0, r5
 801228e:	f7fc ff2b 	bl	800f0e8 <ucdr_serialize_uint8_t>
 8012292:	ea08 0807 	and.w	r8, r8, r7
 8012296:	7b61      	ldrb	r1, [r4, #13]
 8012298:	4607      	mov	r7, r0
 801229a:	4628      	mov	r0, r5
 801229c:	f7fc fef4 	bl	800f088 <ucdr_serialize_bool>
 80122a0:	7b63      	ldrb	r3, [r4, #13]
 80122a2:	ea08 0707 	and.w	r7, r8, r7
 80122a6:	ea07 0600 	and.w	r6, r7, r0
 80122aa:	b933      	cbnz	r3, 80122ba <uxr_serialize_CLIENT_Representation+0x6e>
 80122ac:	8ba1      	ldrh	r1, [r4, #28]
 80122ae:	4628      	mov	r0, r5
 80122b0:	f7fc ff46 	bl	800f140 <ucdr_serialize_uint16_t>
 80122b4:	4030      	ands	r0, r6
 80122b6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80122ba:	6921      	ldr	r1, [r4, #16]
 80122bc:	4628      	mov	r0, r5
 80122be:	f7fd f929 	bl	800f514 <ucdr_serialize_uint32_t>
 80122c2:	6923      	ldr	r3, [r4, #16]
 80122c4:	b1cb      	cbz	r3, 80122fa <uxr_serialize_CLIENT_Representation+0xae>
 80122c6:	b1d0      	cbz	r0, 80122fe <uxr_serialize_CLIENT_Representation+0xb2>
 80122c8:	46a0      	mov	r8, r4
 80122ca:	f04f 0900 	mov.w	r9, #0
 80122ce:	e002      	b.n	80122d6 <uxr_serialize_CLIENT_Representation+0x8a>
 80122d0:	f108 0808 	add.w	r8, r8, #8
 80122d4:	b198      	cbz	r0, 80122fe <uxr_serialize_CLIENT_Representation+0xb2>
 80122d6:	f8d8 1014 	ldr.w	r1, [r8, #20]
 80122da:	4628      	mov	r0, r5
 80122dc:	f005 fa50 	bl	8017780 <ucdr_serialize_string>
 80122e0:	f8d8 1018 	ldr.w	r1, [r8, #24]
 80122e4:	4607      	mov	r7, r0
 80122e6:	4628      	mov	r0, r5
 80122e8:	f005 fa4a 	bl	8017780 <ucdr_serialize_string>
 80122ec:	6923      	ldr	r3, [r4, #16]
 80122ee:	f109 0901 	add.w	r9, r9, #1
 80122f2:	4038      	ands	r0, r7
 80122f4:	4599      	cmp	r9, r3
 80122f6:	b2c0      	uxtb	r0, r0
 80122f8:	d3ea      	bcc.n	80122d0 <uxr_serialize_CLIENT_Representation+0x84>
 80122fa:	4006      	ands	r6, r0
 80122fc:	e7d6      	b.n	80122ac <uxr_serialize_CLIENT_Representation+0x60>
 80122fe:	2600      	movs	r6, #0
 8012300:	e7d4      	b.n	80122ac <uxr_serialize_CLIENT_Representation+0x60>
 8012302:	bf00      	nop

08012304 <uxr_deserialize_CLIENT_Representation>:
 8012304:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012308:	2204      	movs	r2, #4
 801230a:	460c      	mov	r4, r1
 801230c:	4605      	mov	r5, r0
 801230e:	f005 f927 	bl	8017560 <ucdr_deserialize_array_uint8_t>
 8012312:	1d21      	adds	r1, r4, #4
 8012314:	4607      	mov	r7, r0
 8012316:	2202      	movs	r2, #2
 8012318:	4628      	mov	r0, r5
 801231a:	f005 f921 	bl	8017560 <ucdr_deserialize_array_uint8_t>
 801231e:	1da1      	adds	r1, r4, #6
 8012320:	4007      	ands	r7, r0
 8012322:	2202      	movs	r2, #2
 8012324:	4628      	mov	r0, r5
 8012326:	f005 f91b 	bl	8017560 <ucdr_deserialize_array_uint8_t>
 801232a:	fa5f f887 	uxtb.w	r8, r7
 801232e:	2204      	movs	r2, #4
 8012330:	4607      	mov	r7, r0
 8012332:	f104 0108 	add.w	r1, r4, #8
 8012336:	4628      	mov	r0, r5
 8012338:	f005 f912 	bl	8017560 <ucdr_deserialize_array_uint8_t>
 801233c:	ea08 0707 	and.w	r7, r8, r7
 8012340:	f104 010c 	add.w	r1, r4, #12
 8012344:	4680      	mov	r8, r0
 8012346:	4628      	mov	r0, r5
 8012348:	f7fc fee4 	bl	800f114 <ucdr_deserialize_uint8_t>
 801234c:	ea08 0807 	and.w	r8, r8, r7
 8012350:	f104 010d 	add.w	r1, r4, #13
 8012354:	4607      	mov	r7, r0
 8012356:	4628      	mov	r0, r5
 8012358:	f7fc feac 	bl	800f0b4 <ucdr_deserialize_bool>
 801235c:	7b63      	ldrb	r3, [r4, #13]
 801235e:	ea08 0707 	and.w	r7, r8, r7
 8012362:	ea07 0600 	and.w	r6, r7, r0
 8012366:	b93b      	cbnz	r3, 8012378 <uxr_deserialize_CLIENT_Representation+0x74>
 8012368:	f104 011c 	add.w	r1, r4, #28
 801236c:	4628      	mov	r0, r5
 801236e:	f7fc ffe7 	bl	800f340 <ucdr_deserialize_uint16_t>
 8012372:	4030      	ands	r0, r6
 8012374:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012378:	f104 0110 	add.w	r1, r4, #16
 801237c:	4628      	mov	r0, r5
 801237e:	f7fd f9f9 	bl	800f774 <ucdr_deserialize_uint32_t>
 8012382:	6923      	ldr	r3, [r4, #16]
 8012384:	2b01      	cmp	r3, #1
 8012386:	d903      	bls.n	8012390 <uxr_deserialize_CLIENT_Representation+0x8c>
 8012388:	2301      	movs	r3, #1
 801238a:	75ab      	strb	r3, [r5, #22]
 801238c:	2600      	movs	r6, #0
 801238e:	e7eb      	b.n	8012368 <uxr_deserialize_CLIENT_Representation+0x64>
 8012390:	b1fb      	cbz	r3, 80123d2 <uxr_deserialize_CLIENT_Representation+0xce>
 8012392:	2800      	cmp	r0, #0
 8012394:	d0fa      	beq.n	801238c <uxr_deserialize_CLIENT_Representation+0x88>
 8012396:	46a0      	mov	r8, r4
 8012398:	f04f 0900 	mov.w	r9, #0
 801239c:	e003      	b.n	80123a6 <uxr_deserialize_CLIENT_Representation+0xa2>
 801239e:	f108 0808 	add.w	r8, r8, #8
 80123a2:	2800      	cmp	r0, #0
 80123a4:	d0f2      	beq.n	801238c <uxr_deserialize_CLIENT_Representation+0x88>
 80123a6:	f8d8 1014 	ldr.w	r1, [r8, #20]
 80123aa:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80123ae:	4628      	mov	r0, r5
 80123b0:	f005 f9f6 	bl	80177a0 <ucdr_deserialize_string>
 80123b4:	f8d8 1018 	ldr.w	r1, [r8, #24]
 80123b8:	4607      	mov	r7, r0
 80123ba:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80123be:	4628      	mov	r0, r5
 80123c0:	f005 f9ee 	bl	80177a0 <ucdr_deserialize_string>
 80123c4:	6923      	ldr	r3, [r4, #16]
 80123c6:	f109 0901 	add.w	r9, r9, #1
 80123ca:	4038      	ands	r0, r7
 80123cc:	4599      	cmp	r9, r3
 80123ce:	b2c0      	uxtb	r0, r0
 80123d0:	d3e5      	bcc.n	801239e <uxr_deserialize_CLIENT_Representation+0x9a>
 80123d2:	4006      	ands	r6, r0
 80123d4:	e7c8      	b.n	8012368 <uxr_deserialize_CLIENT_Representation+0x64>
 80123d6:	bf00      	nop

080123d8 <uxr_serialize_AGENT_Representation>:
 80123d8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80123dc:	2204      	movs	r2, #4
 80123de:	460c      	mov	r4, r1
 80123e0:	4605      	mov	r5, r0
 80123e2:	f005 f859 	bl	8017498 <ucdr_serialize_array_uint8_t>
 80123e6:	1d21      	adds	r1, r4, #4
 80123e8:	4606      	mov	r6, r0
 80123ea:	2202      	movs	r2, #2
 80123ec:	4628      	mov	r0, r5
 80123ee:	f005 f853 	bl	8017498 <ucdr_serialize_array_uint8_t>
 80123f2:	1da1      	adds	r1, r4, #6
 80123f4:	4006      	ands	r6, r0
 80123f6:	2202      	movs	r2, #2
 80123f8:	4628      	mov	r0, r5
 80123fa:	f005 f84d 	bl	8017498 <ucdr_serialize_array_uint8_t>
 80123fe:	b2f6      	uxtb	r6, r6
 8012400:	4603      	mov	r3, r0
 8012402:	7a21      	ldrb	r1, [r4, #8]
 8012404:	4628      	mov	r0, r5
 8012406:	401e      	ands	r6, r3
 8012408:	f7fc fe3e 	bl	800f088 <ucdr_serialize_bool>
 801240c:	7a23      	ldrb	r3, [r4, #8]
 801240e:	ea00 0706 	and.w	r7, r0, r6
 8012412:	b913      	cbnz	r3, 801241a <uxr_serialize_AGENT_Representation+0x42>
 8012414:	4638      	mov	r0, r7
 8012416:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801241a:	68e1      	ldr	r1, [r4, #12]
 801241c:	4628      	mov	r0, r5
 801241e:	f7fd f879 	bl	800f514 <ucdr_serialize_uint32_t>
 8012422:	68e3      	ldr	r3, [r4, #12]
 8012424:	b313      	cbz	r3, 801246c <uxr_serialize_AGENT_Representation+0x94>
 8012426:	b1e8      	cbz	r0, 8012464 <uxr_serialize_AGENT_Representation+0x8c>
 8012428:	46a0      	mov	r8, r4
 801242a:	f04f 0900 	mov.w	r9, #0
 801242e:	e002      	b.n	8012436 <uxr_serialize_AGENT_Representation+0x5e>
 8012430:	f108 0808 	add.w	r8, r8, #8
 8012434:	b1b3      	cbz	r3, 8012464 <uxr_serialize_AGENT_Representation+0x8c>
 8012436:	f8d8 1010 	ldr.w	r1, [r8, #16]
 801243a:	4628      	mov	r0, r5
 801243c:	f005 f9a0 	bl	8017780 <ucdr_serialize_string>
 8012440:	f8d8 1014 	ldr.w	r1, [r8, #20]
 8012444:	4606      	mov	r6, r0
 8012446:	4628      	mov	r0, r5
 8012448:	f005 f99a 	bl	8017780 <ucdr_serialize_string>
 801244c:	68e2      	ldr	r2, [r4, #12]
 801244e:	f109 0901 	add.w	r9, r9, #1
 8012452:	ea06 0300 	and.w	r3, r6, r0
 8012456:	4591      	cmp	r9, r2
 8012458:	b2db      	uxtb	r3, r3
 801245a:	d3e9      	bcc.n	8012430 <uxr_serialize_AGENT_Representation+0x58>
 801245c:	401f      	ands	r7, r3
 801245e:	4638      	mov	r0, r7
 8012460:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012464:	2700      	movs	r7, #0
 8012466:	4638      	mov	r0, r7
 8012468:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801246c:	4007      	ands	r7, r0
 801246e:	e7d1      	b.n	8012414 <uxr_serialize_AGENT_Representation+0x3c>

08012470 <uxr_serialize_ObjectVariant.part.0>:
 8012470:	b570      	push	{r4, r5, r6, lr}
 8012472:	780b      	ldrb	r3, [r1, #0]
 8012474:	3b01      	subs	r3, #1
 8012476:	460c      	mov	r4, r1
 8012478:	4605      	mov	r5, r0
 801247a:	2b0d      	cmp	r3, #13
 801247c:	d869      	bhi.n	8012552 <uxr_serialize_ObjectVariant.part.0+0xe2>
 801247e:	e8df f003 	tbb	[pc, r3]
 8012482:	074a      	.short	0x074a
 8012484:	07073030 	.word	0x07073030
 8012488:	21680707 	.word	0x21680707
 801248c:	45632121 	.word	0x45632121
 8012490:	7909      	ldrb	r1, [r1, #4]
 8012492:	f7fc fe29 	bl	800f0e8 <ucdr_serialize_uint8_t>
 8012496:	4606      	mov	r6, r0
 8012498:	b158      	cbz	r0, 80124b2 <uxr_serialize_ObjectVariant.part.0+0x42>
 801249a:	7923      	ldrb	r3, [r4, #4]
 801249c:	2b02      	cmp	r3, #2
 801249e:	d003      	beq.n	80124a8 <uxr_serialize_ObjectVariant.part.0+0x38>
 80124a0:	2b03      	cmp	r3, #3
 80124a2:	d029      	beq.n	80124f8 <uxr_serialize_ObjectVariant.part.0+0x88>
 80124a4:	2b01      	cmp	r3, #1
 80124a6:	d104      	bne.n	80124b2 <uxr_serialize_ObjectVariant.part.0+0x42>
 80124a8:	68a1      	ldr	r1, [r4, #8]
 80124aa:	4628      	mov	r0, r5
 80124ac:	f005 f968 	bl	8017780 <ucdr_serialize_string>
 80124b0:	4606      	mov	r6, r0
 80124b2:	f504 7103 	add.w	r1, r4, #524	@ 0x20c
 80124b6:	4628      	mov	r0, r5
 80124b8:	2202      	movs	r2, #2
 80124ba:	f004 ffed 	bl	8017498 <ucdr_serialize_array_uint8_t>
 80124be:	4030      	ands	r0, r6
 80124c0:	b2c0      	uxtb	r0, r0
 80124c2:	bd70      	pop	{r4, r5, r6, pc}
 80124c4:	7909      	ldrb	r1, [r1, #4]
 80124c6:	f7fc fe0f 	bl	800f0e8 <ucdr_serialize_uint8_t>
 80124ca:	b1e8      	cbz	r0, 8012508 <uxr_serialize_ObjectVariant.part.0+0x98>
 80124cc:	7923      	ldrb	r3, [r4, #4]
 80124ce:	2b01      	cmp	r3, #1
 80124d0:	d001      	beq.n	80124d6 <uxr_serialize_ObjectVariant.part.0+0x66>
 80124d2:	2b02      	cmp	r3, #2
 80124d4:	d13d      	bne.n	8012552 <uxr_serialize_ObjectVariant.part.0+0xe2>
 80124d6:	68a1      	ldr	r1, [r4, #8]
 80124d8:	4628      	mov	r0, r5
 80124da:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80124de:	f005 b94f 	b.w	8017780 <ucdr_serialize_string>
 80124e2:	7909      	ldrb	r1, [r1, #4]
 80124e4:	f7fc fe00 	bl	800f0e8 <ucdr_serialize_uint8_t>
 80124e8:	4606      	mov	r6, r0
 80124ea:	2800      	cmp	r0, #0
 80124ec:	d0e1      	beq.n	80124b2 <uxr_serialize_ObjectVariant.part.0+0x42>
 80124ee:	7923      	ldrb	r3, [r4, #4]
 80124f0:	2b02      	cmp	r3, #2
 80124f2:	d0d9      	beq.n	80124a8 <uxr_serialize_ObjectVariant.part.0+0x38>
 80124f4:	2b03      	cmp	r3, #3
 80124f6:	d1dc      	bne.n	80124b2 <uxr_serialize_ObjectVariant.part.0+0x42>
 80124f8:	68a2      	ldr	r2, [r4, #8]
 80124fa:	f104 010c 	add.w	r1, r4, #12
 80124fe:	4628      	mov	r0, r5
 8012500:	f7fd ffd8 	bl	80104b4 <ucdr_serialize_sequence_uint8_t>
 8012504:	4606      	mov	r6, r0
 8012506:	e7d4      	b.n	80124b2 <uxr_serialize_ObjectVariant.part.0+0x42>
 8012508:	2000      	movs	r0, #0
 801250a:	bd70      	pop	{r4, r5, r6, pc}
 801250c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8012510:	3104      	adds	r1, #4
 8012512:	f7ff be9b 	b.w	801224c <uxr_serialize_CLIENT_Representation>
 8012516:	7909      	ldrb	r1, [r1, #4]
 8012518:	f7fc fde6 	bl	800f0e8 <ucdr_serialize_uint8_t>
 801251c:	4606      	mov	r6, r0
 801251e:	b158      	cbz	r0, 8012538 <uxr_serialize_ObjectVariant.part.0+0xc8>
 8012520:	7923      	ldrb	r3, [r4, #4]
 8012522:	2b02      	cmp	r3, #2
 8012524:	d003      	beq.n	801252e <uxr_serialize_ObjectVariant.part.0+0xbe>
 8012526:	2b03      	cmp	r3, #3
 8012528:	d015      	beq.n	8012556 <uxr_serialize_ObjectVariant.part.0+0xe6>
 801252a:	2b01      	cmp	r3, #1
 801252c:	d104      	bne.n	8012538 <uxr_serialize_ObjectVariant.part.0+0xc8>
 801252e:	68a1      	ldr	r1, [r4, #8]
 8012530:	4628      	mov	r0, r5
 8012532:	f005 f925 	bl	8017780 <ucdr_serialize_string>
 8012536:	4606      	mov	r6, r0
 8012538:	f9b4 120c 	ldrsh.w	r1, [r4, #524]	@ 0x20c
 801253c:	4628      	mov	r0, r5
 801253e:	f7fd fb0f 	bl	800fb60 <ucdr_serialize_int16_t>
 8012542:	4030      	ands	r0, r6
 8012544:	b2c0      	uxtb	r0, r0
 8012546:	bd70      	pop	{r4, r5, r6, pc}
 8012548:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801254c:	3104      	adds	r1, #4
 801254e:	f7ff bf43 	b.w	80123d8 <uxr_serialize_AGENT_Representation>
 8012552:	2001      	movs	r0, #1
 8012554:	bd70      	pop	{r4, r5, r6, pc}
 8012556:	68a2      	ldr	r2, [r4, #8]
 8012558:	f104 010c 	add.w	r1, r4, #12
 801255c:	4628      	mov	r0, r5
 801255e:	f7fd ffa9 	bl	80104b4 <ucdr_serialize_sequence_uint8_t>
 8012562:	4606      	mov	r6, r0
 8012564:	e7e8      	b.n	8012538 <uxr_serialize_ObjectVariant.part.0+0xc8>
 8012566:	bf00      	nop

08012568 <uxr_serialize_OBJK_DomainParticipant_Binary>:
 8012568:	b570      	push	{r4, r5, r6, lr}
 801256a:	460d      	mov	r5, r1
 801256c:	7809      	ldrb	r1, [r1, #0]
 801256e:	4606      	mov	r6, r0
 8012570:	f7fc fd8a 	bl	800f088 <ucdr_serialize_bool>
 8012574:	782b      	ldrb	r3, [r5, #0]
 8012576:	4604      	mov	r4, r0
 8012578:	b94b      	cbnz	r3, 801258e <uxr_serialize_OBJK_DomainParticipant_Binary+0x26>
 801257a:	7a29      	ldrb	r1, [r5, #8]
 801257c:	4630      	mov	r0, r6
 801257e:	f7fc fd83 	bl	800f088 <ucdr_serialize_bool>
 8012582:	7a2b      	ldrb	r3, [r5, #8]
 8012584:	4004      	ands	r4, r0
 8012586:	b2e4      	uxtb	r4, r4
 8012588:	b943      	cbnz	r3, 801259c <uxr_serialize_OBJK_DomainParticipant_Binary+0x34>
 801258a:	4620      	mov	r0, r4
 801258c:	bd70      	pop	{r4, r5, r6, pc}
 801258e:	6869      	ldr	r1, [r5, #4]
 8012590:	4630      	mov	r0, r6
 8012592:	f005 f8f5 	bl	8017780 <ucdr_serialize_string>
 8012596:	4004      	ands	r4, r0
 8012598:	b2e4      	uxtb	r4, r4
 801259a:	e7ee      	b.n	801257a <uxr_serialize_OBJK_DomainParticipant_Binary+0x12>
 801259c:	68e9      	ldr	r1, [r5, #12]
 801259e:	4630      	mov	r0, r6
 80125a0:	f005 f8ee 	bl	8017780 <ucdr_serialize_string>
 80125a4:	4004      	ands	r4, r0
 80125a6:	4620      	mov	r0, r4
 80125a8:	bd70      	pop	{r4, r5, r6, pc}
 80125aa:	bf00      	nop

080125ac <uxr_serialize_OBJK_Topic_Binary>:
 80125ac:	b570      	push	{r4, r5, r6, lr}
 80125ae:	460d      	mov	r5, r1
 80125b0:	6809      	ldr	r1, [r1, #0]
 80125b2:	4606      	mov	r6, r0
 80125b4:	f005 f8e4 	bl	8017780 <ucdr_serialize_string>
 80125b8:	7929      	ldrb	r1, [r5, #4]
 80125ba:	4604      	mov	r4, r0
 80125bc:	4630      	mov	r0, r6
 80125be:	f7fc fd63 	bl	800f088 <ucdr_serialize_bool>
 80125c2:	792b      	ldrb	r3, [r5, #4]
 80125c4:	4004      	ands	r4, r0
 80125c6:	b2e4      	uxtb	r4, r4
 80125c8:	b943      	cbnz	r3, 80125dc <uxr_serialize_OBJK_Topic_Binary+0x30>
 80125ca:	7b29      	ldrb	r1, [r5, #12]
 80125cc:	4630      	mov	r0, r6
 80125ce:	f7fc fd5b 	bl	800f088 <ucdr_serialize_bool>
 80125d2:	7b2b      	ldrb	r3, [r5, #12]
 80125d4:	4004      	ands	r4, r0
 80125d6:	b93b      	cbnz	r3, 80125e8 <uxr_serialize_OBJK_Topic_Binary+0x3c>
 80125d8:	4620      	mov	r0, r4
 80125da:	bd70      	pop	{r4, r5, r6, pc}
 80125dc:	68a9      	ldr	r1, [r5, #8]
 80125de:	4630      	mov	r0, r6
 80125e0:	f005 f8ce 	bl	8017780 <ucdr_serialize_string>
 80125e4:	4004      	ands	r4, r0
 80125e6:	e7f0      	b.n	80125ca <uxr_serialize_OBJK_Topic_Binary+0x1e>
 80125e8:	6929      	ldr	r1, [r5, #16]
 80125ea:	4630      	mov	r0, r6
 80125ec:	f005 f8c8 	bl	8017780 <ucdr_serialize_string>
 80125f0:	4004      	ands	r4, r0
 80125f2:	b2e4      	uxtb	r4, r4
 80125f4:	4620      	mov	r0, r4
 80125f6:	bd70      	pop	{r4, r5, r6, pc}

080125f8 <uxr_serialize_OBJK_Publisher_Binary_Qos>:
 80125f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80125fc:	460c      	mov	r4, r1
 80125fe:	7809      	ldrb	r1, [r1, #0]
 8012600:	4606      	mov	r6, r0
 8012602:	f7fc fd41 	bl	800f088 <ucdr_serialize_bool>
 8012606:	7823      	ldrb	r3, [r4, #0]
 8012608:	4605      	mov	r5, r0
 801260a:	b96b      	cbnz	r3, 8012628 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x30>
 801260c:	f894 1028 	ldrb.w	r1, [r4, #40]	@ 0x28
 8012610:	4630      	mov	r0, r6
 8012612:	f7fc fd39 	bl	800f088 <ucdr_serialize_bool>
 8012616:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
 801261a:	4005      	ands	r5, r0
 801261c:	b2ed      	uxtb	r5, r5
 801261e:	2b00      	cmp	r3, #0
 8012620:	d169      	bne.n	80126f6 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xfe>
 8012622:	4628      	mov	r0, r5
 8012624:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012628:	6861      	ldr	r1, [r4, #4]
 801262a:	4630      	mov	r0, r6
 801262c:	f7fc ff72 	bl	800f514 <ucdr_serialize_uint32_t>
 8012630:	6863      	ldr	r3, [r4, #4]
 8012632:	2b00      	cmp	r3, #0
 8012634:	d06b      	beq.n	801270e <uxr_serialize_OBJK_Publisher_Binary_Qos+0x116>
 8012636:	2800      	cmp	r0, #0
 8012638:	d067      	beq.n	801270a <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 801263a:	68a1      	ldr	r1, [r4, #8]
 801263c:	4630      	mov	r0, r6
 801263e:	f005 f89f 	bl	8017780 <ucdr_serialize_string>
 8012642:	6863      	ldr	r3, [r4, #4]
 8012644:	2b01      	cmp	r3, #1
 8012646:	d953      	bls.n	80126f0 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 8012648:	2800      	cmp	r0, #0
 801264a:	d05e      	beq.n	801270a <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 801264c:	68e1      	ldr	r1, [r4, #12]
 801264e:	4630      	mov	r0, r6
 8012650:	f005 f896 	bl	8017780 <ucdr_serialize_string>
 8012654:	6863      	ldr	r3, [r4, #4]
 8012656:	2b02      	cmp	r3, #2
 8012658:	d94a      	bls.n	80126f0 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 801265a:	2800      	cmp	r0, #0
 801265c:	d055      	beq.n	801270a <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 801265e:	6921      	ldr	r1, [r4, #16]
 8012660:	4630      	mov	r0, r6
 8012662:	f005 f88d 	bl	8017780 <ucdr_serialize_string>
 8012666:	6863      	ldr	r3, [r4, #4]
 8012668:	2b03      	cmp	r3, #3
 801266a:	d941      	bls.n	80126f0 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 801266c:	2800      	cmp	r0, #0
 801266e:	d04c      	beq.n	801270a <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8012670:	6961      	ldr	r1, [r4, #20]
 8012672:	4630      	mov	r0, r6
 8012674:	f005 f884 	bl	8017780 <ucdr_serialize_string>
 8012678:	6863      	ldr	r3, [r4, #4]
 801267a:	2b04      	cmp	r3, #4
 801267c:	d938      	bls.n	80126f0 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 801267e:	2800      	cmp	r0, #0
 8012680:	d043      	beq.n	801270a <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8012682:	69a1      	ldr	r1, [r4, #24]
 8012684:	4630      	mov	r0, r6
 8012686:	f005 f87b 	bl	8017780 <ucdr_serialize_string>
 801268a:	6863      	ldr	r3, [r4, #4]
 801268c:	2b05      	cmp	r3, #5
 801268e:	d92f      	bls.n	80126f0 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 8012690:	2800      	cmp	r0, #0
 8012692:	d03a      	beq.n	801270a <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8012694:	69e1      	ldr	r1, [r4, #28]
 8012696:	4630      	mov	r0, r6
 8012698:	f005 f872 	bl	8017780 <ucdr_serialize_string>
 801269c:	6863      	ldr	r3, [r4, #4]
 801269e:	2b06      	cmp	r3, #6
 80126a0:	d926      	bls.n	80126f0 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 80126a2:	b390      	cbz	r0, 801270a <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 80126a4:	6a21      	ldr	r1, [r4, #32]
 80126a6:	4630      	mov	r0, r6
 80126a8:	f005 f86a 	bl	8017780 <ucdr_serialize_string>
 80126ac:	6863      	ldr	r3, [r4, #4]
 80126ae:	2b07      	cmp	r3, #7
 80126b0:	d91e      	bls.n	80126f0 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 80126b2:	b350      	cbz	r0, 801270a <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 80126b4:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 80126b6:	4630      	mov	r0, r6
 80126b8:	f005 f862 	bl	8017780 <ucdr_serialize_string>
 80126bc:	6863      	ldr	r3, [r4, #4]
 80126be:	2b08      	cmp	r3, #8
 80126c0:	d916      	bls.n	80126f0 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 80126c2:	b310      	cbz	r0, 801270a <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 80126c4:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
 80126c6:	4630      	mov	r0, r6
 80126c8:	f005 f85a 	bl	8017780 <ucdr_serialize_string>
 80126cc:	6863      	ldr	r3, [r4, #4]
 80126ce:	2b09      	cmp	r3, #9
 80126d0:	d90e      	bls.n	80126f0 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 80126d2:	b1d0      	cbz	r0, 801270a <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 80126d4:	f104 082c 	add.w	r8, r4, #44	@ 0x2c
 80126d8:	2709      	movs	r7, #9
 80126da:	e000      	b.n	80126de <uxr_serialize_OBJK_Publisher_Binary_Qos+0xe6>
 80126dc:	b1a8      	cbz	r0, 801270a <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 80126de:	f858 1b04 	ldr.w	r1, [r8], #4
 80126e2:	4630      	mov	r0, r6
 80126e4:	f005 f84c 	bl	8017780 <ucdr_serialize_string>
 80126e8:	6862      	ldr	r2, [r4, #4]
 80126ea:	3701      	adds	r7, #1
 80126ec:	4297      	cmp	r7, r2
 80126ee:	d3f5      	bcc.n	80126dc <uxr_serialize_OBJK_Publisher_Binary_Qos+0xe4>
 80126f0:	4005      	ands	r5, r0
 80126f2:	b2ed      	uxtb	r5, r5
 80126f4:	e78a      	b.n	801260c <uxr_serialize_OBJK_Publisher_Binary_Qos+0x14>
 80126f6:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 80126f8:	4630      	mov	r0, r6
 80126fa:	f104 0130 	add.w	r1, r4, #48	@ 0x30
 80126fe:	f7fd fed9 	bl	80104b4 <ucdr_serialize_sequence_uint8_t>
 8012702:	4005      	ands	r5, r0
 8012704:	4628      	mov	r0, r5
 8012706:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801270a:	2500      	movs	r5, #0
 801270c:	e77e      	b.n	801260c <uxr_serialize_OBJK_Publisher_Binary_Qos+0x14>
 801270e:	4028      	ands	r0, r5
 8012710:	b2c5      	uxtb	r5, r0
 8012712:	e77b      	b.n	801260c <uxr_serialize_OBJK_Publisher_Binary_Qos+0x14>

08012714 <uxr_serialize_OBJK_Publisher_Binary>:
 8012714:	b570      	push	{r4, r5, r6, lr}
 8012716:	460d      	mov	r5, r1
 8012718:	7809      	ldrb	r1, [r1, #0]
 801271a:	4606      	mov	r6, r0
 801271c:	f7fc fcb4 	bl	800f088 <ucdr_serialize_bool>
 8012720:	782b      	ldrb	r3, [r5, #0]
 8012722:	4604      	mov	r4, r0
 8012724:	b94b      	cbnz	r3, 801273a <uxr_serialize_OBJK_Publisher_Binary+0x26>
 8012726:	7a29      	ldrb	r1, [r5, #8]
 8012728:	4630      	mov	r0, r6
 801272a:	f7fc fcad 	bl	800f088 <ucdr_serialize_bool>
 801272e:	7a2b      	ldrb	r3, [r5, #8]
 8012730:	4004      	ands	r4, r0
 8012732:	b2e4      	uxtb	r4, r4
 8012734:	b943      	cbnz	r3, 8012748 <uxr_serialize_OBJK_Publisher_Binary+0x34>
 8012736:	4620      	mov	r0, r4
 8012738:	bd70      	pop	{r4, r5, r6, pc}
 801273a:	6869      	ldr	r1, [r5, #4]
 801273c:	4630      	mov	r0, r6
 801273e:	f005 f81f 	bl	8017780 <ucdr_serialize_string>
 8012742:	4004      	ands	r4, r0
 8012744:	b2e4      	uxtb	r4, r4
 8012746:	e7ee      	b.n	8012726 <uxr_serialize_OBJK_Publisher_Binary+0x12>
 8012748:	f105 010c 	add.w	r1, r5, #12
 801274c:	4630      	mov	r0, r6
 801274e:	f7ff ff53 	bl	80125f8 <uxr_serialize_OBJK_Publisher_Binary_Qos>
 8012752:	4004      	ands	r4, r0
 8012754:	4620      	mov	r0, r4
 8012756:	bd70      	pop	{r4, r5, r6, pc}

08012758 <uxr_serialize_OBJK_Subscriber_Binary_Qos>:
 8012758:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801275c:	460c      	mov	r4, r1
 801275e:	7809      	ldrb	r1, [r1, #0]
 8012760:	4606      	mov	r6, r0
 8012762:	f7fc fc91 	bl	800f088 <ucdr_serialize_bool>
 8012766:	7823      	ldrb	r3, [r4, #0]
 8012768:	4605      	mov	r5, r0
 801276a:	b96b      	cbnz	r3, 8012788 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x30>
 801276c:	f894 1028 	ldrb.w	r1, [r4, #40]	@ 0x28
 8012770:	4630      	mov	r0, r6
 8012772:	f7fc fc89 	bl	800f088 <ucdr_serialize_bool>
 8012776:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
 801277a:	4005      	ands	r5, r0
 801277c:	b2ed      	uxtb	r5, r5
 801277e:	2b00      	cmp	r3, #0
 8012780:	d169      	bne.n	8012856 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xfe>
 8012782:	4628      	mov	r0, r5
 8012784:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012788:	6861      	ldr	r1, [r4, #4]
 801278a:	4630      	mov	r0, r6
 801278c:	f7fc fec2 	bl	800f514 <ucdr_serialize_uint32_t>
 8012790:	6863      	ldr	r3, [r4, #4]
 8012792:	2b00      	cmp	r3, #0
 8012794:	d06b      	beq.n	801286e <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x116>
 8012796:	2800      	cmp	r0, #0
 8012798:	d067      	beq.n	801286a <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 801279a:	68a1      	ldr	r1, [r4, #8]
 801279c:	4630      	mov	r0, r6
 801279e:	f004 ffef 	bl	8017780 <ucdr_serialize_string>
 80127a2:	6863      	ldr	r3, [r4, #4]
 80127a4:	2b01      	cmp	r3, #1
 80127a6:	d953      	bls.n	8012850 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 80127a8:	2800      	cmp	r0, #0
 80127aa:	d05e      	beq.n	801286a <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 80127ac:	68e1      	ldr	r1, [r4, #12]
 80127ae:	4630      	mov	r0, r6
 80127b0:	f004 ffe6 	bl	8017780 <ucdr_serialize_string>
 80127b4:	6863      	ldr	r3, [r4, #4]
 80127b6:	2b02      	cmp	r3, #2
 80127b8:	d94a      	bls.n	8012850 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 80127ba:	2800      	cmp	r0, #0
 80127bc:	d055      	beq.n	801286a <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 80127be:	6921      	ldr	r1, [r4, #16]
 80127c0:	4630      	mov	r0, r6
 80127c2:	f004 ffdd 	bl	8017780 <ucdr_serialize_string>
 80127c6:	6863      	ldr	r3, [r4, #4]
 80127c8:	2b03      	cmp	r3, #3
 80127ca:	d941      	bls.n	8012850 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 80127cc:	2800      	cmp	r0, #0
 80127ce:	d04c      	beq.n	801286a <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 80127d0:	6961      	ldr	r1, [r4, #20]
 80127d2:	4630      	mov	r0, r6
 80127d4:	f004 ffd4 	bl	8017780 <ucdr_serialize_string>
 80127d8:	6863      	ldr	r3, [r4, #4]
 80127da:	2b04      	cmp	r3, #4
 80127dc:	d938      	bls.n	8012850 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 80127de:	2800      	cmp	r0, #0
 80127e0:	d043      	beq.n	801286a <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 80127e2:	69a1      	ldr	r1, [r4, #24]
 80127e4:	4630      	mov	r0, r6
 80127e6:	f004 ffcb 	bl	8017780 <ucdr_serialize_string>
 80127ea:	6863      	ldr	r3, [r4, #4]
 80127ec:	2b05      	cmp	r3, #5
 80127ee:	d92f      	bls.n	8012850 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 80127f0:	2800      	cmp	r0, #0
 80127f2:	d03a      	beq.n	801286a <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 80127f4:	69e1      	ldr	r1, [r4, #28]
 80127f6:	4630      	mov	r0, r6
 80127f8:	f004 ffc2 	bl	8017780 <ucdr_serialize_string>
 80127fc:	6863      	ldr	r3, [r4, #4]
 80127fe:	2b06      	cmp	r3, #6
 8012800:	d926      	bls.n	8012850 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 8012802:	b390      	cbz	r0, 801286a <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 8012804:	6a21      	ldr	r1, [r4, #32]
 8012806:	4630      	mov	r0, r6
 8012808:	f004 ffba 	bl	8017780 <ucdr_serialize_string>
 801280c:	6863      	ldr	r3, [r4, #4]
 801280e:	2b07      	cmp	r3, #7
 8012810:	d91e      	bls.n	8012850 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 8012812:	b350      	cbz	r0, 801286a <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 8012814:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 8012816:	4630      	mov	r0, r6
 8012818:	f004 ffb2 	bl	8017780 <ucdr_serialize_string>
 801281c:	6863      	ldr	r3, [r4, #4]
 801281e:	2b08      	cmp	r3, #8
 8012820:	d916      	bls.n	8012850 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 8012822:	b310      	cbz	r0, 801286a <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 8012824:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
 8012826:	4630      	mov	r0, r6
 8012828:	f004 ffaa 	bl	8017780 <ucdr_serialize_string>
 801282c:	6863      	ldr	r3, [r4, #4]
 801282e:	2b09      	cmp	r3, #9
 8012830:	d90e      	bls.n	8012850 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 8012832:	b1d0      	cbz	r0, 801286a <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 8012834:	f104 082c 	add.w	r8, r4, #44	@ 0x2c
 8012838:	2709      	movs	r7, #9
 801283a:	e000      	b.n	801283e <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xe6>
 801283c:	b1a8      	cbz	r0, 801286a <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 801283e:	f858 1b04 	ldr.w	r1, [r8], #4
 8012842:	4630      	mov	r0, r6
 8012844:	f004 ff9c 	bl	8017780 <ucdr_serialize_string>
 8012848:	6862      	ldr	r2, [r4, #4]
 801284a:	3701      	adds	r7, #1
 801284c:	4297      	cmp	r7, r2
 801284e:	d3f5      	bcc.n	801283c <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xe4>
 8012850:	4005      	ands	r5, r0
 8012852:	b2ed      	uxtb	r5, r5
 8012854:	e78a      	b.n	801276c <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x14>
 8012856:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 8012858:	4630      	mov	r0, r6
 801285a:	f104 0130 	add.w	r1, r4, #48	@ 0x30
 801285e:	f7fd fe29 	bl	80104b4 <ucdr_serialize_sequence_uint8_t>
 8012862:	4005      	ands	r5, r0
 8012864:	4628      	mov	r0, r5
 8012866:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801286a:	2500      	movs	r5, #0
 801286c:	e77e      	b.n	801276c <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x14>
 801286e:	4028      	ands	r0, r5
 8012870:	b2c5      	uxtb	r5, r0
 8012872:	e77b      	b.n	801276c <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x14>

08012874 <uxr_serialize_OBJK_Subscriber_Binary>:
 8012874:	b570      	push	{r4, r5, r6, lr}
 8012876:	460d      	mov	r5, r1
 8012878:	7809      	ldrb	r1, [r1, #0]
 801287a:	4606      	mov	r6, r0
 801287c:	f7fc fc04 	bl	800f088 <ucdr_serialize_bool>
 8012880:	782b      	ldrb	r3, [r5, #0]
 8012882:	4604      	mov	r4, r0
 8012884:	b94b      	cbnz	r3, 801289a <uxr_serialize_OBJK_Subscriber_Binary+0x26>
 8012886:	7a29      	ldrb	r1, [r5, #8]
 8012888:	4630      	mov	r0, r6
 801288a:	f7fc fbfd 	bl	800f088 <ucdr_serialize_bool>
 801288e:	7a2b      	ldrb	r3, [r5, #8]
 8012890:	4004      	ands	r4, r0
 8012892:	b2e4      	uxtb	r4, r4
 8012894:	b943      	cbnz	r3, 80128a8 <uxr_serialize_OBJK_Subscriber_Binary+0x34>
 8012896:	4620      	mov	r0, r4
 8012898:	bd70      	pop	{r4, r5, r6, pc}
 801289a:	6869      	ldr	r1, [r5, #4]
 801289c:	4630      	mov	r0, r6
 801289e:	f004 ff6f 	bl	8017780 <ucdr_serialize_string>
 80128a2:	4004      	ands	r4, r0
 80128a4:	b2e4      	uxtb	r4, r4
 80128a6:	e7ee      	b.n	8012886 <uxr_serialize_OBJK_Subscriber_Binary+0x12>
 80128a8:	f105 010c 	add.w	r1, r5, #12
 80128ac:	4630      	mov	r0, r6
 80128ae:	f7ff ff53 	bl	8012758 <uxr_serialize_OBJK_Subscriber_Binary_Qos>
 80128b2:	4004      	ands	r4, r0
 80128b4:	4620      	mov	r0, r4
 80128b6:	bd70      	pop	{r4, r5, r6, pc}

080128b8 <uxr_serialize_OBJK_Endpoint_QosBinary>:
 80128b8:	e92d 4368 	stmdb	sp!, {r3, r5, r6, r8, r9, lr}
 80128bc:	4688      	mov	r8, r1
 80128be:	8809      	ldrh	r1, [r1, #0]
 80128c0:	4681      	mov	r9, r0
 80128c2:	f7fc fc3d 	bl	800f140 <ucdr_serialize_uint16_t>
 80128c6:	f898 1002 	ldrb.w	r1, [r8, #2]
 80128ca:	4606      	mov	r6, r0
 80128cc:	4648      	mov	r0, r9
 80128ce:	f7fc fbdb 	bl	800f088 <ucdr_serialize_bool>
 80128d2:	f898 3002 	ldrb.w	r3, [r8, #2]
 80128d6:	4030      	ands	r0, r6
 80128d8:	b2c5      	uxtb	r5, r0
 80128da:	b9eb      	cbnz	r3, 8012918 <uxr_serialize_OBJK_Endpoint_QosBinary+0x60>
 80128dc:	f898 1006 	ldrb.w	r1, [r8, #6]
 80128e0:	4648      	mov	r0, r9
 80128e2:	f7fc fbd1 	bl	800f088 <ucdr_serialize_bool>
 80128e6:	f898 3006 	ldrb.w	r3, [r8, #6]
 80128ea:	4005      	ands	r5, r0
 80128ec:	bb7b      	cbnz	r3, 801294e <uxr_serialize_OBJK_Endpoint_QosBinary+0x96>
 80128ee:	f898 100c 	ldrb.w	r1, [r8, #12]
 80128f2:	4648      	mov	r0, r9
 80128f4:	f7fc fbc8 	bl	800f088 <ucdr_serialize_bool>
 80128f8:	f898 300c 	ldrb.w	r3, [r8, #12]
 80128fc:	4005      	ands	r5, r0
 80128fe:	b9f3      	cbnz	r3, 801293e <uxr_serialize_OBJK_Endpoint_QosBinary+0x86>
 8012900:	f898 1014 	ldrb.w	r1, [r8, #20]
 8012904:	4648      	mov	r0, r9
 8012906:	f7fc fbbf 	bl	800f088 <ucdr_serialize_bool>
 801290a:	f898 3014 	ldrb.w	r3, [r8, #20]
 801290e:	4005      	ands	r5, r0
 8012910:	b94b      	cbnz	r3, 8012926 <uxr_serialize_OBJK_Endpoint_QosBinary+0x6e>
 8012912:	4628      	mov	r0, r5
 8012914:	e8bd 8368 	ldmia.w	sp!, {r3, r5, r6, r8, r9, pc}
 8012918:	f8b8 1004 	ldrh.w	r1, [r8, #4]
 801291c:	4648      	mov	r0, r9
 801291e:	f7fc fc0f 	bl	800f140 <ucdr_serialize_uint16_t>
 8012922:	4005      	ands	r5, r0
 8012924:	e7da      	b.n	80128dc <uxr_serialize_OBJK_Endpoint_QosBinary+0x24>
 8012926:	f8d8 2018 	ldr.w	r2, [r8, #24]
 801292a:	4648      	mov	r0, r9
 801292c:	f108 011c 	add.w	r1, r8, #28
 8012930:	f7fd fdc0 	bl	80104b4 <ucdr_serialize_sequence_uint8_t>
 8012934:	4028      	ands	r0, r5
 8012936:	b2c5      	uxtb	r5, r0
 8012938:	4628      	mov	r0, r5
 801293a:	e8bd 8368 	ldmia.w	sp!, {r3, r5, r6, r8, r9, pc}
 801293e:	f8d8 1010 	ldr.w	r1, [r8, #16]
 8012942:	4648      	mov	r0, r9
 8012944:	f7fc fde6 	bl	800f514 <ucdr_serialize_uint32_t>
 8012948:	4028      	ands	r0, r5
 801294a:	b2c5      	uxtb	r5, r0
 801294c:	e7d8      	b.n	8012900 <uxr_serialize_OBJK_Endpoint_QosBinary+0x48>
 801294e:	f8d8 1008 	ldr.w	r1, [r8, #8]
 8012952:	4648      	mov	r0, r9
 8012954:	f7fc fdde 	bl	800f514 <ucdr_serialize_uint32_t>
 8012958:	4028      	ands	r0, r5
 801295a:	b2c5      	uxtb	r5, r0
 801295c:	e7c7      	b.n	80128ee <uxr_serialize_OBJK_Endpoint_QosBinary+0x36>
 801295e:	bf00      	nop

08012960 <uxr_serialize_OBJK_DataReader_Binary>:
 8012960:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012962:	2202      	movs	r2, #2
 8012964:	460c      	mov	r4, r1
 8012966:	4606      	mov	r6, r0
 8012968:	f004 fd96 	bl	8017498 <ucdr_serialize_array_uint8_t>
 801296c:	78a1      	ldrb	r1, [r4, #2]
 801296e:	4605      	mov	r5, r0
 8012970:	4630      	mov	r0, r6
 8012972:	f7fc fb89 	bl	800f088 <ucdr_serialize_bool>
 8012976:	78a3      	ldrb	r3, [r4, #2]
 8012978:	4005      	ands	r5, r0
 801297a:	b2ed      	uxtb	r5, r5
 801297c:	b90b      	cbnz	r3, 8012982 <uxr_serialize_OBJK_DataReader_Binary+0x22>
 801297e:	4628      	mov	r0, r5
 8012980:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012982:	f104 0108 	add.w	r1, r4, #8
 8012986:	4630      	mov	r0, r6
 8012988:	f7ff ff96 	bl	80128b8 <uxr_serialize_OBJK_Endpoint_QosBinary>
 801298c:	f894 102c 	ldrb.w	r1, [r4, #44]	@ 0x2c
 8012990:	4607      	mov	r7, r0
 8012992:	4630      	mov	r0, r6
 8012994:	f7fc fb78 	bl	800f088 <ucdr_serialize_bool>
 8012998:	f894 302c 	ldrb.w	r3, [r4, #44]	@ 0x2c
 801299c:	4038      	ands	r0, r7
 801299e:	b2c7      	uxtb	r7, r0
 80129a0:	b95b      	cbnz	r3, 80129ba <uxr_serialize_OBJK_DataReader_Binary+0x5a>
 80129a2:	f894 1038 	ldrb.w	r1, [r4, #56]	@ 0x38
 80129a6:	4630      	mov	r0, r6
 80129a8:	f7fc fb6e 	bl	800f088 <ucdr_serialize_bool>
 80129ac:	f894 3038 	ldrb.w	r3, [r4, #56]	@ 0x38
 80129b0:	4007      	ands	r7, r0
 80129b2:	b94b      	cbnz	r3, 80129c8 <uxr_serialize_OBJK_DataReader_Binary+0x68>
 80129b4:	403d      	ands	r5, r7
 80129b6:	4628      	mov	r0, r5
 80129b8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80129ba:	e9d4 230c 	ldrd	r2, r3, [r4, #48]	@ 0x30
 80129be:	4630      	mov	r0, r6
 80129c0:	f7fc fffe 	bl	800f9c0 <ucdr_serialize_uint64_t>
 80129c4:	4007      	ands	r7, r0
 80129c6:	e7ec      	b.n	80129a2 <uxr_serialize_OBJK_DataReader_Binary+0x42>
 80129c8:	6be1      	ldr	r1, [r4, #60]	@ 0x3c
 80129ca:	4630      	mov	r0, r6
 80129cc:	f004 fed8 	bl	8017780 <ucdr_serialize_string>
 80129d0:	4007      	ands	r7, r0
 80129d2:	b2ff      	uxtb	r7, r7
 80129d4:	e7ee      	b.n	80129b4 <uxr_serialize_OBJK_DataReader_Binary+0x54>
 80129d6:	bf00      	nop

080129d8 <uxr_serialize_OBJK_DataWriter_Binary>:
 80129d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80129da:	2202      	movs	r2, #2
 80129dc:	460d      	mov	r5, r1
 80129de:	4606      	mov	r6, r0
 80129e0:	f004 fd5a 	bl	8017498 <ucdr_serialize_array_uint8_t>
 80129e4:	78a9      	ldrb	r1, [r5, #2]
 80129e6:	4604      	mov	r4, r0
 80129e8:	4630      	mov	r0, r6
 80129ea:	f7fc fb4d 	bl	800f088 <ucdr_serialize_bool>
 80129ee:	78ab      	ldrb	r3, [r5, #2]
 80129f0:	4004      	ands	r4, r0
 80129f2:	b2e4      	uxtb	r4, r4
 80129f4:	b90b      	cbnz	r3, 80129fa <uxr_serialize_OBJK_DataWriter_Binary+0x22>
 80129f6:	4620      	mov	r0, r4
 80129f8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80129fa:	f105 0108 	add.w	r1, r5, #8
 80129fe:	4630      	mov	r0, r6
 8012a00:	f7ff ff5a 	bl	80128b8 <uxr_serialize_OBJK_Endpoint_QosBinary>
 8012a04:	f895 102c 	ldrb.w	r1, [r5, #44]	@ 0x2c
 8012a08:	4607      	mov	r7, r0
 8012a0a:	4630      	mov	r0, r6
 8012a0c:	f7fc fb3c 	bl	800f088 <ucdr_serialize_bool>
 8012a10:	f895 302c 	ldrb.w	r3, [r5, #44]	@ 0x2c
 8012a14:	4007      	ands	r7, r0
 8012a16:	b2ff      	uxtb	r7, r7
 8012a18:	b913      	cbnz	r3, 8012a20 <uxr_serialize_OBJK_DataWriter_Binary+0x48>
 8012a1a:	403c      	ands	r4, r7
 8012a1c:	4620      	mov	r0, r4
 8012a1e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012a20:	e9d5 230c 	ldrd	r2, r3, [r5, #48]	@ 0x30
 8012a24:	4630      	mov	r0, r6
 8012a26:	f7fc ffcb 	bl	800f9c0 <ucdr_serialize_uint64_t>
 8012a2a:	4007      	ands	r7, r0
 8012a2c:	e7f5      	b.n	8012a1a <uxr_serialize_OBJK_DataWriter_Binary+0x42>
 8012a2e:	bf00      	nop

08012a30 <uxr_deserialize_ObjectVariant>:
 8012a30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012a32:	4605      	mov	r5, r0
 8012a34:	460e      	mov	r6, r1
 8012a36:	f7fc fb6d 	bl	800f114 <ucdr_deserialize_uint8_t>
 8012a3a:	b320      	cbz	r0, 8012a86 <uxr_deserialize_ObjectVariant+0x56>
 8012a3c:	7833      	ldrb	r3, [r6, #0]
 8012a3e:	3b01      	subs	r3, #1
 8012a40:	4604      	mov	r4, r0
 8012a42:	2b0d      	cmp	r3, #13
 8012a44:	d81d      	bhi.n	8012a82 <uxr_deserialize_ObjectVariant+0x52>
 8012a46:	e8df f003 	tbb	[pc, r3]
 8012a4a:	2107      	.short	0x2107
 8012a4c:	21214b4b 	.word	0x21214b4b
 8012a50:	381c2121 	.word	0x381c2121
 8012a54:	876a3838 	.word	0x876a3838
 8012a58:	1d31      	adds	r1, r6, #4
 8012a5a:	4628      	mov	r0, r5
 8012a5c:	f7fc fb5a 	bl	800f114 <ucdr_deserialize_uint8_t>
 8012a60:	4607      	mov	r7, r0
 8012a62:	b138      	cbz	r0, 8012a74 <uxr_deserialize_ObjectVariant+0x44>
 8012a64:	7933      	ldrb	r3, [r6, #4]
 8012a66:	2b02      	cmp	r3, #2
 8012a68:	d07c      	beq.n	8012b64 <uxr_deserialize_ObjectVariant+0x134>
 8012a6a:	2b03      	cmp	r3, #3
 8012a6c:	f000 8082 	beq.w	8012b74 <uxr_deserialize_ObjectVariant+0x144>
 8012a70:	2b01      	cmp	r3, #1
 8012a72:	d077      	beq.n	8012b64 <uxr_deserialize_ObjectVariant+0x134>
 8012a74:	f506 7103 	add.w	r1, r6, #524	@ 0x20c
 8012a78:	4628      	mov	r0, r5
 8012a7a:	f7fd f8f1 	bl	800fc60 <ucdr_deserialize_int16_t>
 8012a7e:	4038      	ands	r0, r7
 8012a80:	b2c4      	uxtb	r4, r0
 8012a82:	4620      	mov	r0, r4
 8012a84:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012a86:	2400      	movs	r4, #0
 8012a88:	4620      	mov	r0, r4
 8012a8a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012a8c:	1d31      	adds	r1, r6, #4
 8012a8e:	4628      	mov	r0, r5
 8012a90:	f7fc fb40 	bl	800f114 <ucdr_deserialize_uint8_t>
 8012a94:	4607      	mov	r7, r0
 8012a96:	b130      	cbz	r0, 8012aa6 <uxr_deserialize_ObjectVariant+0x76>
 8012a98:	7933      	ldrb	r3, [r6, #4]
 8012a9a:	2b02      	cmp	r3, #2
 8012a9c:	d037      	beq.n	8012b0e <uxr_deserialize_ObjectVariant+0xde>
 8012a9e:	2b03      	cmp	r3, #3
 8012aa0:	d02a      	beq.n	8012af8 <uxr_deserialize_ObjectVariant+0xc8>
 8012aa2:	2b01      	cmp	r3, #1
 8012aa4:	d033      	beq.n	8012b0e <uxr_deserialize_ObjectVariant+0xde>
 8012aa6:	f506 7103 	add.w	r1, r6, #524	@ 0x20c
 8012aaa:	4628      	mov	r0, r5
 8012aac:	2202      	movs	r2, #2
 8012aae:	f004 fd57 	bl	8017560 <ucdr_deserialize_array_uint8_t>
 8012ab2:	4038      	ands	r0, r7
 8012ab4:	b2c4      	uxtb	r4, r0
 8012ab6:	4620      	mov	r0, r4
 8012ab8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012aba:	1d31      	adds	r1, r6, #4
 8012abc:	4628      	mov	r0, r5
 8012abe:	f7fc fb29 	bl	800f114 <ucdr_deserialize_uint8_t>
 8012ac2:	2800      	cmp	r0, #0
 8012ac4:	d0df      	beq.n	8012a86 <uxr_deserialize_ObjectVariant+0x56>
 8012ac6:	7933      	ldrb	r3, [r6, #4]
 8012ac8:	2b01      	cmp	r3, #1
 8012aca:	d001      	beq.n	8012ad0 <uxr_deserialize_ObjectVariant+0xa0>
 8012acc:	2b02      	cmp	r3, #2
 8012ace:	d1d8      	bne.n	8012a82 <uxr_deserialize_ObjectVariant+0x52>
 8012ad0:	68b1      	ldr	r1, [r6, #8]
 8012ad2:	4628      	mov	r0, r5
 8012ad4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8012ad8:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8012adc:	f004 be60 	b.w	80177a0 <ucdr_deserialize_string>
 8012ae0:	1d31      	adds	r1, r6, #4
 8012ae2:	4628      	mov	r0, r5
 8012ae4:	f7fc fb16 	bl	800f114 <ucdr_deserialize_uint8_t>
 8012ae8:	4607      	mov	r7, r0
 8012aea:	2800      	cmp	r0, #0
 8012aec:	d0db      	beq.n	8012aa6 <uxr_deserialize_ObjectVariant+0x76>
 8012aee:	7933      	ldrb	r3, [r6, #4]
 8012af0:	2b02      	cmp	r3, #2
 8012af2:	d00c      	beq.n	8012b0e <uxr_deserialize_ObjectVariant+0xde>
 8012af4:	2b03      	cmp	r3, #3
 8012af6:	d1d6      	bne.n	8012aa6 <uxr_deserialize_ObjectVariant+0x76>
 8012af8:	f106 0308 	add.w	r3, r6, #8
 8012afc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8012b00:	f106 010c 	add.w	r1, r6, #12
 8012b04:	4628      	mov	r0, r5
 8012b06:	f7fd fce7 	bl	80104d8 <ucdr_deserialize_sequence_uint8_t>
 8012b0a:	4607      	mov	r7, r0
 8012b0c:	e7cb      	b.n	8012aa6 <uxr_deserialize_ObjectVariant+0x76>
 8012b0e:	68b1      	ldr	r1, [r6, #8]
 8012b10:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8012b14:	4628      	mov	r0, r5
 8012b16:	f004 fe43 	bl	80177a0 <ucdr_deserialize_string>
 8012b1a:	4607      	mov	r7, r0
 8012b1c:	e7c3      	b.n	8012aa6 <uxr_deserialize_ObjectVariant+0x76>
 8012b1e:	2204      	movs	r2, #4
 8012b20:	18b1      	adds	r1, r6, r2
 8012b22:	4628      	mov	r0, r5
 8012b24:	f004 fd1c 	bl	8017560 <ucdr_deserialize_array_uint8_t>
 8012b28:	2202      	movs	r2, #2
 8012b2a:	4604      	mov	r4, r0
 8012b2c:	f106 0108 	add.w	r1, r6, #8
 8012b30:	4628      	mov	r0, r5
 8012b32:	f004 fd15 	bl	8017560 <ucdr_deserialize_array_uint8_t>
 8012b36:	2202      	movs	r2, #2
 8012b38:	4004      	ands	r4, r0
 8012b3a:	f106 010a 	add.w	r1, r6, #10
 8012b3e:	4628      	mov	r0, r5
 8012b40:	f004 fd0e 	bl	8017560 <ucdr_deserialize_array_uint8_t>
 8012b44:	b2e4      	uxtb	r4, r4
 8012b46:	4603      	mov	r3, r0
 8012b48:	f106 010c 	add.w	r1, r6, #12
 8012b4c:	4628      	mov	r0, r5
 8012b4e:	401c      	ands	r4, r3
 8012b50:	f7fc fab0 	bl	800f0b4 <ucdr_deserialize_bool>
 8012b54:	4004      	ands	r4, r0
 8012b56:	e794      	b.n	8012a82 <uxr_deserialize_ObjectVariant+0x52>
 8012b58:	1d31      	adds	r1, r6, #4
 8012b5a:	4628      	mov	r0, r5
 8012b5c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8012b60:	f7ff bbd0 	b.w	8012304 <uxr_deserialize_CLIENT_Representation>
 8012b64:	68b1      	ldr	r1, [r6, #8]
 8012b66:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8012b6a:	4628      	mov	r0, r5
 8012b6c:	f004 fe18 	bl	80177a0 <ucdr_deserialize_string>
 8012b70:	4607      	mov	r7, r0
 8012b72:	e77f      	b.n	8012a74 <uxr_deserialize_ObjectVariant+0x44>
 8012b74:	f106 0308 	add.w	r3, r6, #8
 8012b78:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8012b7c:	f106 010c 	add.w	r1, r6, #12
 8012b80:	4628      	mov	r0, r5
 8012b82:	f7fd fca9 	bl	80104d8 <ucdr_deserialize_sequence_uint8_t>
 8012b86:	4607      	mov	r7, r0
 8012b88:	e774      	b.n	8012a74 <uxr_deserialize_ObjectVariant+0x44>
 8012b8a:	bf00      	nop

08012b8c <uxr_deserialize_BaseObjectRequest>:
 8012b8c:	b570      	push	{r4, r5, r6, lr}
 8012b8e:	2202      	movs	r2, #2
 8012b90:	4605      	mov	r5, r0
 8012b92:	460e      	mov	r6, r1
 8012b94:	f004 fce4 	bl	8017560 <ucdr_deserialize_array_uint8_t>
 8012b98:	1cb1      	adds	r1, r6, #2
 8012b9a:	4604      	mov	r4, r0
 8012b9c:	2202      	movs	r2, #2
 8012b9e:	4628      	mov	r0, r5
 8012ba0:	f004 fcde 	bl	8017560 <ucdr_deserialize_array_uint8_t>
 8012ba4:	4020      	ands	r0, r4
 8012ba6:	b2c0      	uxtb	r0, r0
 8012ba8:	bd70      	pop	{r4, r5, r6, pc}
 8012baa:	bf00      	nop

08012bac <uxr_serialize_AGENT_ActivityInfo>:
 8012bac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012bb0:	460e      	mov	r6, r1
 8012bb2:	f9b1 1000 	ldrsh.w	r1, [r1]
 8012bb6:	4607      	mov	r7, r0
 8012bb8:	f7fc ffd2 	bl	800fb60 <ucdr_serialize_int16_t>
 8012bbc:	6871      	ldr	r1, [r6, #4]
 8012bbe:	4680      	mov	r8, r0
 8012bc0:	4638      	mov	r0, r7
 8012bc2:	f7fc fca7 	bl	800f514 <ucdr_serialize_uint32_t>
 8012bc6:	6873      	ldr	r3, [r6, #4]
 8012bc8:	2b00      	cmp	r3, #0
 8012bca:	d06a      	beq.n	8012ca2 <uxr_serialize_AGENT_ActivityInfo+0xf6>
 8012bcc:	b318      	cbz	r0, 8012c16 <uxr_serialize_AGENT_ActivityInfo+0x6a>
 8012bce:	f106 0904 	add.w	r9, r6, #4
 8012bd2:	2500      	movs	r5, #0
 8012bd4:	eb05 0445 	add.w	r4, r5, r5, lsl #1
 8012bd8:	eb06 04c4 	add.w	r4, r6, r4, lsl #3
 8012bdc:	7a21      	ldrb	r1, [r4, #8]
 8012bde:	4638      	mov	r0, r7
 8012be0:	f7fc fa82 	bl	800f0e8 <ucdr_serialize_uint8_t>
 8012be4:	2800      	cmp	r0, #0
 8012be6:	d051      	beq.n	8012c8c <uxr_serialize_AGENT_ActivityInfo+0xe0>
 8012be8:	7a23      	ldrb	r3, [r4, #8]
 8012bea:	eb05 0145 	add.w	r1, r5, r5, lsl #1
 8012bee:	00c9      	lsls	r1, r1, #3
 8012bf0:	ea4f 0a45 	mov.w	sl, r5, lsl #1
 8012bf4:	2b03      	cmp	r3, #3
 8012bf6:	d859      	bhi.n	8012cac <uxr_serialize_AGENT_ActivityInfo+0x100>
 8012bf8:	e8df f003 	tbb	[pc, r3]
 8012bfc:	02122436 	.word	0x02122436
 8012c00:	4449      	add	r1, r9
 8012c02:	4638      	mov	r0, r7
 8012c04:	6889      	ldr	r1, [r1, #8]
 8012c06:	f004 fdbb 	bl	8017780 <ucdr_serialize_string>
 8012c0a:	6873      	ldr	r3, [r6, #4]
 8012c0c:	3501      	adds	r5, #1
 8012c0e:	429d      	cmp	r5, r3
 8012c10:	d240      	bcs.n	8012c94 <uxr_serialize_AGENT_ActivityInfo+0xe8>
 8012c12:	2800      	cmp	r0, #0
 8012c14:	d1de      	bne.n	8012bd4 <uxr_serialize_AGENT_ActivityInfo+0x28>
 8012c16:	f04f 0800 	mov.w	r8, #0
 8012c1a:	4640      	mov	r0, r8
 8012c1c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012c20:	3108      	adds	r1, #8
 8012c22:	4449      	add	r1, r9
 8012c24:	2210      	movs	r2, #16
 8012c26:	4638      	mov	r0, r7
 8012c28:	f004 fc36 	bl	8017498 <ucdr_serialize_array_uint8_t>
 8012c2c:	44aa      	add	sl, r5
 8012c2e:	eb06 0aca 	add.w	sl, r6, sl, lsl #3
 8012c32:	4604      	mov	r4, r0
 8012c34:	f8da 101c 	ldr.w	r1, [sl, #28]
 8012c38:	4638      	mov	r0, r7
 8012c3a:	f7fc fc6b 	bl	800f514 <ucdr_serialize_uint32_t>
 8012c3e:	4020      	ands	r0, r4
 8012c40:	b2c0      	uxtb	r0, r0
 8012c42:	e7e2      	b.n	8012c0a <uxr_serialize_AGENT_ActivityInfo+0x5e>
 8012c44:	3108      	adds	r1, #8
 8012c46:	4449      	add	r1, r9
 8012c48:	2204      	movs	r2, #4
 8012c4a:	4638      	mov	r0, r7
 8012c4c:	f004 fc24 	bl	8017498 <ucdr_serialize_array_uint8_t>
 8012c50:	44aa      	add	sl, r5
 8012c52:	eb06 0aca 	add.w	sl, r6, sl, lsl #3
 8012c56:	4604      	mov	r4, r0
 8012c58:	f8ba 1010 	ldrh.w	r1, [sl, #16]
 8012c5c:	4638      	mov	r0, r7
 8012c5e:	f7fc fa6f 	bl	800f140 <ucdr_serialize_uint16_t>
 8012c62:	4020      	ands	r0, r4
 8012c64:	b2c0      	uxtb	r0, r0
 8012c66:	e7d0      	b.n	8012c0a <uxr_serialize_AGENT_ActivityInfo+0x5e>
 8012c68:	3108      	adds	r1, #8
 8012c6a:	4449      	add	r1, r9
 8012c6c:	2202      	movs	r2, #2
 8012c6e:	4638      	mov	r0, r7
 8012c70:	f004 fc12 	bl	8017498 <ucdr_serialize_array_uint8_t>
 8012c74:	44aa      	add	sl, r5
 8012c76:	eb06 0aca 	add.w	sl, r6, sl, lsl #3
 8012c7a:	4604      	mov	r4, r0
 8012c7c:	f89a 100e 	ldrb.w	r1, [sl, #14]
 8012c80:	4638      	mov	r0, r7
 8012c82:	f7fc fa31 	bl	800f0e8 <ucdr_serialize_uint8_t>
 8012c86:	4020      	ands	r0, r4
 8012c88:	b2c0      	uxtb	r0, r0
 8012c8a:	e7be      	b.n	8012c0a <uxr_serialize_AGENT_ActivityInfo+0x5e>
 8012c8c:	6873      	ldr	r3, [r6, #4]
 8012c8e:	3501      	adds	r5, #1
 8012c90:	429d      	cmp	r5, r3
 8012c92:	d3c0      	bcc.n	8012c16 <uxr_serialize_AGENT_ActivityInfo+0x6a>
 8012c94:	ea08 0000 	and.w	r0, r8, r0
 8012c98:	fa5f f880 	uxtb.w	r8, r0
 8012c9c:	4640      	mov	r0, r8
 8012c9e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012ca2:	ea08 0800 	and.w	r8, r8, r0
 8012ca6:	fa5f f888 	uxtb.w	r8, r8
 8012caa:	e7b6      	b.n	8012c1a <uxr_serialize_AGENT_ActivityInfo+0x6e>
 8012cac:	6873      	ldr	r3, [r6, #4]
 8012cae:	3501      	adds	r5, #1
 8012cb0:	42ab      	cmp	r3, r5
 8012cb2:	f104 0418 	add.w	r4, r4, #24
 8012cb6:	d891      	bhi.n	8012bdc <uxr_serialize_AGENT_ActivityInfo+0x30>
 8012cb8:	e7af      	b.n	8012c1a <uxr_serialize_AGENT_ActivityInfo+0x6e>
 8012cba:	bf00      	nop

08012cbc <uxr_serialize_ActivityInfoVariant>:
 8012cbc:	b570      	push	{r4, r5, r6, lr}
 8012cbe:	460d      	mov	r5, r1
 8012cc0:	7809      	ldrb	r1, [r1, #0]
 8012cc2:	4606      	mov	r6, r0
 8012cc4:	f7fc fa10 	bl	800f0e8 <ucdr_serialize_uint8_t>
 8012cc8:	b130      	cbz	r0, 8012cd8 <uxr_serialize_ActivityInfoVariant+0x1c>
 8012cca:	782b      	ldrb	r3, [r5, #0]
 8012ccc:	2b06      	cmp	r3, #6
 8012cce:	d019      	beq.n	8012d04 <uxr_serialize_ActivityInfoVariant+0x48>
 8012cd0:	2b0d      	cmp	r3, #13
 8012cd2:	d010      	beq.n	8012cf6 <uxr_serialize_ActivityInfoVariant+0x3a>
 8012cd4:	2b05      	cmp	r3, #5
 8012cd6:	d000      	beq.n	8012cda <uxr_serialize_ActivityInfoVariant+0x1e>
 8012cd8:	bd70      	pop	{r4, r5, r6, pc}
 8012cda:	f9b5 1008 	ldrsh.w	r1, [r5, #8]
 8012cde:	4630      	mov	r0, r6
 8012ce0:	f7fc ff3e 	bl	800fb60 <ucdr_serialize_int16_t>
 8012ce4:	e9d5 2304 	ldrd	r2, r3, [r5, #16]
 8012ce8:	4604      	mov	r4, r0
 8012cea:	4630      	mov	r0, r6
 8012cec:	f7fc fe68 	bl	800f9c0 <ucdr_serialize_uint64_t>
 8012cf0:	4020      	ands	r0, r4
 8012cf2:	b2c0      	uxtb	r0, r0
 8012cf4:	bd70      	pop	{r4, r5, r6, pc}
 8012cf6:	f105 0108 	add.w	r1, r5, #8
 8012cfa:	4630      	mov	r0, r6
 8012cfc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8012d00:	f7ff bf54 	b.w	8012bac <uxr_serialize_AGENT_ActivityInfo>
 8012d04:	f9b5 1008 	ldrsh.w	r1, [r5, #8]
 8012d08:	4630      	mov	r0, r6
 8012d0a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8012d0e:	f7fc bf27 	b.w	800fb60 <ucdr_serialize_int16_t>
 8012d12:	bf00      	nop

08012d14 <uxr_deserialize_BaseObjectReply>:
 8012d14:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012d18:	2202      	movs	r2, #2
 8012d1a:	4606      	mov	r6, r0
 8012d1c:	460f      	mov	r7, r1
 8012d1e:	f004 fc1f 	bl	8017560 <ucdr_deserialize_array_uint8_t>
 8012d22:	2202      	movs	r2, #2
 8012d24:	1cb9      	adds	r1, r7, #2
 8012d26:	4605      	mov	r5, r0
 8012d28:	4630      	mov	r0, r6
 8012d2a:	f004 fc19 	bl	8017560 <ucdr_deserialize_array_uint8_t>
 8012d2e:	1d39      	adds	r1, r7, #4
 8012d30:	4680      	mov	r8, r0
 8012d32:	4630      	mov	r0, r6
 8012d34:	f7fc f9ee 	bl	800f114 <ucdr_deserialize_uint8_t>
 8012d38:	1d79      	adds	r1, r7, #5
 8012d3a:	4604      	mov	r4, r0
 8012d3c:	4630      	mov	r0, r6
 8012d3e:	f7fc f9e9 	bl	800f114 <ucdr_deserialize_uint8_t>
 8012d42:	ea05 0508 	and.w	r5, r5, r8
 8012d46:	402c      	ands	r4, r5
 8012d48:	4020      	ands	r0, r4
 8012d4a:	b2c0      	uxtb	r0, r0
 8012d4c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08012d50 <uxr_serialize_ReadSpecification>:
 8012d50:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012d54:	460e      	mov	r6, r1
 8012d56:	7809      	ldrb	r1, [r1, #0]
 8012d58:	4607      	mov	r7, r0
 8012d5a:	f7fc f9c5 	bl	800f0e8 <ucdr_serialize_uint8_t>
 8012d5e:	7871      	ldrb	r1, [r6, #1]
 8012d60:	4604      	mov	r4, r0
 8012d62:	4638      	mov	r0, r7
 8012d64:	f7fc f9c0 	bl	800f0e8 <ucdr_serialize_uint8_t>
 8012d68:	78b1      	ldrb	r1, [r6, #2]
 8012d6a:	4004      	ands	r4, r0
 8012d6c:	4638      	mov	r0, r7
 8012d6e:	f7fc f98b 	bl	800f088 <ucdr_serialize_bool>
 8012d72:	78b3      	ldrb	r3, [r6, #2]
 8012d74:	b2e4      	uxtb	r4, r4
 8012d76:	4004      	ands	r4, r0
 8012d78:	b94b      	cbnz	r3, 8012d8e <uxr_serialize_ReadSpecification+0x3e>
 8012d7a:	7a31      	ldrb	r1, [r6, #8]
 8012d7c:	4638      	mov	r0, r7
 8012d7e:	f7fc f983 	bl	800f088 <ucdr_serialize_bool>
 8012d82:	7a33      	ldrb	r3, [r6, #8]
 8012d84:	4004      	ands	r4, r0
 8012d86:	b943      	cbnz	r3, 8012d9a <uxr_serialize_ReadSpecification+0x4a>
 8012d88:	4620      	mov	r0, r4
 8012d8a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012d8e:	6871      	ldr	r1, [r6, #4]
 8012d90:	4638      	mov	r0, r7
 8012d92:	f004 fcf5 	bl	8017780 <ucdr_serialize_string>
 8012d96:	4004      	ands	r4, r0
 8012d98:	e7ef      	b.n	8012d7a <uxr_serialize_ReadSpecification+0x2a>
 8012d9a:	8971      	ldrh	r1, [r6, #10]
 8012d9c:	4638      	mov	r0, r7
 8012d9e:	f7fc f9cf 	bl	800f140 <ucdr_serialize_uint16_t>
 8012da2:	89b1      	ldrh	r1, [r6, #12]
 8012da4:	4605      	mov	r5, r0
 8012da6:	4638      	mov	r0, r7
 8012da8:	f7fc f9ca 	bl	800f140 <ucdr_serialize_uint16_t>
 8012dac:	89f1      	ldrh	r1, [r6, #14]
 8012dae:	4005      	ands	r5, r0
 8012db0:	4638      	mov	r0, r7
 8012db2:	f7fc f9c5 	bl	800f140 <ucdr_serialize_uint16_t>
 8012db6:	8a31      	ldrh	r1, [r6, #16]
 8012db8:	4680      	mov	r8, r0
 8012dba:	4638      	mov	r0, r7
 8012dbc:	f7fc f9c0 	bl	800f140 <ucdr_serialize_uint16_t>
 8012dc0:	b2ed      	uxtb	r5, r5
 8012dc2:	4025      	ands	r5, r4
 8012dc4:	ea08 0505 	and.w	r5, r8, r5
 8012dc8:	ea00 0405 	and.w	r4, r0, r5
 8012dcc:	4620      	mov	r0, r4
 8012dce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012dd2:	bf00      	nop

08012dd4 <uxr_serialize_CREATE_CLIENT_Payload>:
 8012dd4:	f7ff ba3a 	b.w	801224c <uxr_serialize_CLIENT_Representation>

08012dd8 <uxr_serialize_CREATE_Payload>:
 8012dd8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012dda:	2202      	movs	r2, #2
 8012ddc:	4606      	mov	r6, r0
 8012dde:	460d      	mov	r5, r1
 8012de0:	f004 fb5a 	bl	8017498 <ucdr_serialize_array_uint8_t>
 8012de4:	1ca9      	adds	r1, r5, #2
 8012de6:	4604      	mov	r4, r0
 8012de8:	2202      	movs	r2, #2
 8012dea:	4630      	mov	r0, r6
 8012dec:	f004 fb54 	bl	8017498 <ucdr_serialize_array_uint8_t>
 8012df0:	7929      	ldrb	r1, [r5, #4]
 8012df2:	4607      	mov	r7, r0
 8012df4:	4630      	mov	r0, r6
 8012df6:	f7fc f977 	bl	800f0e8 <ucdr_serialize_uint8_t>
 8012dfa:	b328      	cbz	r0, 8012e48 <uxr_serialize_CREATE_Payload+0x70>
 8012dfc:	792b      	ldrb	r3, [r5, #4]
 8012dfe:	403c      	ands	r4, r7
 8012e00:	3b01      	subs	r3, #1
 8012e02:	b2e4      	uxtb	r4, r4
 8012e04:	2b0d      	cmp	r3, #13
 8012e06:	d81d      	bhi.n	8012e44 <uxr_serialize_CREATE_Payload+0x6c>
 8012e08:	e8df f003 	tbb	[pc, r3]
 8012e0c:	32320753 	.word	0x32320753
 8012e10:	07070707 	.word	0x07070707
 8012e14:	2121211c 	.word	0x2121211c
 8012e18:	684c      	.short	0x684c
 8012e1a:	7a29      	ldrb	r1, [r5, #8]
 8012e1c:	4630      	mov	r0, r6
 8012e1e:	f7fc f963 	bl	800f0e8 <ucdr_serialize_uint8_t>
 8012e22:	4607      	mov	r7, r0
 8012e24:	b130      	cbz	r0, 8012e34 <uxr_serialize_CREATE_Payload+0x5c>
 8012e26:	7a2b      	ldrb	r3, [r5, #8]
 8012e28:	2b02      	cmp	r3, #2
 8012e2a:	d035      	beq.n	8012e98 <uxr_serialize_CREATE_Payload+0xc0>
 8012e2c:	2b03      	cmp	r3, #3
 8012e2e:	d02b      	beq.n	8012e88 <uxr_serialize_CREATE_Payload+0xb0>
 8012e30:	2b01      	cmp	r3, #1
 8012e32:	d031      	beq.n	8012e98 <uxr_serialize_CREATE_Payload+0xc0>
 8012e34:	f505 7104 	add.w	r1, r5, #528	@ 0x210
 8012e38:	4630      	mov	r0, r6
 8012e3a:	2202      	movs	r2, #2
 8012e3c:	f004 fb2c 	bl	8017498 <ucdr_serialize_array_uint8_t>
 8012e40:	4038      	ands	r0, r7
 8012e42:	4004      	ands	r4, r0
 8012e44:	4620      	mov	r0, r4
 8012e46:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012e48:	2400      	movs	r4, #0
 8012e4a:	4620      	mov	r0, r4
 8012e4c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012e4e:	7a29      	ldrb	r1, [r5, #8]
 8012e50:	4630      	mov	r0, r6
 8012e52:	f7fc f949 	bl	800f0e8 <ucdr_serialize_uint8_t>
 8012e56:	2800      	cmp	r0, #0
 8012e58:	d0f6      	beq.n	8012e48 <uxr_serialize_CREATE_Payload+0x70>
 8012e5a:	7a2b      	ldrb	r3, [r5, #8]
 8012e5c:	2b01      	cmp	r3, #1
 8012e5e:	d001      	beq.n	8012e64 <uxr_serialize_CREATE_Payload+0x8c>
 8012e60:	2b02      	cmp	r3, #2
 8012e62:	d1ef      	bne.n	8012e44 <uxr_serialize_CREATE_Payload+0x6c>
 8012e64:	68e9      	ldr	r1, [r5, #12]
 8012e66:	4630      	mov	r0, r6
 8012e68:	f004 fc8a 	bl	8017780 <ucdr_serialize_string>
 8012e6c:	4004      	ands	r4, r0
 8012e6e:	e7e9      	b.n	8012e44 <uxr_serialize_CREATE_Payload+0x6c>
 8012e70:	7a29      	ldrb	r1, [r5, #8]
 8012e72:	4630      	mov	r0, r6
 8012e74:	f7fc f938 	bl	800f0e8 <ucdr_serialize_uint8_t>
 8012e78:	4607      	mov	r7, r0
 8012e7a:	2800      	cmp	r0, #0
 8012e7c:	d0da      	beq.n	8012e34 <uxr_serialize_CREATE_Payload+0x5c>
 8012e7e:	7a2b      	ldrb	r3, [r5, #8]
 8012e80:	2b02      	cmp	r3, #2
 8012e82:	d009      	beq.n	8012e98 <uxr_serialize_CREATE_Payload+0xc0>
 8012e84:	2b03      	cmp	r3, #3
 8012e86:	d1d5      	bne.n	8012e34 <uxr_serialize_CREATE_Payload+0x5c>
 8012e88:	68ea      	ldr	r2, [r5, #12]
 8012e8a:	f105 0110 	add.w	r1, r5, #16
 8012e8e:	4630      	mov	r0, r6
 8012e90:	f7fd fb10 	bl	80104b4 <ucdr_serialize_sequence_uint8_t>
 8012e94:	4607      	mov	r7, r0
 8012e96:	e7cd      	b.n	8012e34 <uxr_serialize_CREATE_Payload+0x5c>
 8012e98:	68e9      	ldr	r1, [r5, #12]
 8012e9a:	4630      	mov	r0, r6
 8012e9c:	f004 fc70 	bl	8017780 <ucdr_serialize_string>
 8012ea0:	4607      	mov	r7, r0
 8012ea2:	e7c7      	b.n	8012e34 <uxr_serialize_CREATE_Payload+0x5c>
 8012ea4:	f105 0108 	add.w	r1, r5, #8
 8012ea8:	4630      	mov	r0, r6
 8012eaa:	f7ff fa95 	bl	80123d8 <uxr_serialize_AGENT_Representation>
 8012eae:	4004      	ands	r4, r0
 8012eb0:	e7c8      	b.n	8012e44 <uxr_serialize_CREATE_Payload+0x6c>
 8012eb2:	7a29      	ldrb	r1, [r5, #8]
 8012eb4:	4630      	mov	r0, r6
 8012eb6:	f7fc f917 	bl	800f0e8 <ucdr_serialize_uint8_t>
 8012eba:	4607      	mov	r7, r0
 8012ebc:	b130      	cbz	r0, 8012ecc <uxr_serialize_CREATE_Payload+0xf4>
 8012ebe:	7a2b      	ldrb	r3, [r5, #8]
 8012ec0:	2b02      	cmp	r3, #2
 8012ec2:	d012      	beq.n	8012eea <uxr_serialize_CREATE_Payload+0x112>
 8012ec4:	2b03      	cmp	r3, #3
 8012ec6:	d016      	beq.n	8012ef6 <uxr_serialize_CREATE_Payload+0x11e>
 8012ec8:	2b01      	cmp	r3, #1
 8012eca:	d00e      	beq.n	8012eea <uxr_serialize_CREATE_Payload+0x112>
 8012ecc:	f9b5 1210 	ldrsh.w	r1, [r5, #528]	@ 0x210
 8012ed0:	4630      	mov	r0, r6
 8012ed2:	f7fc fe45 	bl	800fb60 <ucdr_serialize_int16_t>
 8012ed6:	4038      	ands	r0, r7
 8012ed8:	4004      	ands	r4, r0
 8012eda:	e7b3      	b.n	8012e44 <uxr_serialize_CREATE_Payload+0x6c>
 8012edc:	f105 0108 	add.w	r1, r5, #8
 8012ee0:	4630      	mov	r0, r6
 8012ee2:	f7ff f9b3 	bl	801224c <uxr_serialize_CLIENT_Representation>
 8012ee6:	4004      	ands	r4, r0
 8012ee8:	e7ac      	b.n	8012e44 <uxr_serialize_CREATE_Payload+0x6c>
 8012eea:	68e9      	ldr	r1, [r5, #12]
 8012eec:	4630      	mov	r0, r6
 8012eee:	f004 fc47 	bl	8017780 <ucdr_serialize_string>
 8012ef2:	4607      	mov	r7, r0
 8012ef4:	e7ea      	b.n	8012ecc <uxr_serialize_CREATE_Payload+0xf4>
 8012ef6:	68ea      	ldr	r2, [r5, #12]
 8012ef8:	f105 0110 	add.w	r1, r5, #16
 8012efc:	4630      	mov	r0, r6
 8012efe:	f7fd fad9 	bl	80104b4 <ucdr_serialize_sequence_uint8_t>
 8012f02:	4607      	mov	r7, r0
 8012f04:	e7e2      	b.n	8012ecc <uxr_serialize_CREATE_Payload+0xf4>
 8012f06:	bf00      	nop

08012f08 <uxr_deserialize_GET_INFO_Payload>:
 8012f08:	b570      	push	{r4, r5, r6, lr}
 8012f0a:	2202      	movs	r2, #2
 8012f0c:	4605      	mov	r5, r0
 8012f0e:	460e      	mov	r6, r1
 8012f10:	f004 fb26 	bl	8017560 <ucdr_deserialize_array_uint8_t>
 8012f14:	1cb1      	adds	r1, r6, #2
 8012f16:	2202      	movs	r2, #2
 8012f18:	4604      	mov	r4, r0
 8012f1a:	4628      	mov	r0, r5
 8012f1c:	f004 fb20 	bl	8017560 <ucdr_deserialize_array_uint8_t>
 8012f20:	1d31      	adds	r1, r6, #4
 8012f22:	4004      	ands	r4, r0
 8012f24:	4628      	mov	r0, r5
 8012f26:	f7fc fc25 	bl	800f774 <ucdr_deserialize_uint32_t>
 8012f2a:	b2e4      	uxtb	r4, r4
 8012f2c:	4020      	ands	r0, r4
 8012f2e:	bd70      	pop	{r4, r5, r6, pc}

08012f30 <uxr_serialize_DELETE_Payload>:
 8012f30:	b570      	push	{r4, r5, r6, lr}
 8012f32:	2202      	movs	r2, #2
 8012f34:	4605      	mov	r5, r0
 8012f36:	460e      	mov	r6, r1
 8012f38:	f004 faae 	bl	8017498 <ucdr_serialize_array_uint8_t>
 8012f3c:	1cb1      	adds	r1, r6, #2
 8012f3e:	4604      	mov	r4, r0
 8012f40:	2202      	movs	r2, #2
 8012f42:	4628      	mov	r0, r5
 8012f44:	f004 faa8 	bl	8017498 <ucdr_serialize_array_uint8_t>
 8012f48:	4020      	ands	r0, r4
 8012f4a:	b2c0      	uxtb	r0, r0
 8012f4c:	bd70      	pop	{r4, r5, r6, pc}
 8012f4e:	bf00      	nop

08012f50 <uxr_deserialize_STATUS_AGENT_Payload>:
 8012f50:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012f54:	4606      	mov	r6, r0
 8012f56:	460f      	mov	r7, r1
 8012f58:	f7fc f8dc 	bl	800f114 <ucdr_deserialize_uint8_t>
 8012f5c:	1c79      	adds	r1, r7, #1
 8012f5e:	4605      	mov	r5, r0
 8012f60:	4630      	mov	r0, r6
 8012f62:	f7fc f8d7 	bl	800f114 <ucdr_deserialize_uint8_t>
 8012f66:	1d39      	adds	r1, r7, #4
 8012f68:	4681      	mov	r9, r0
 8012f6a:	2204      	movs	r2, #4
 8012f6c:	4630      	mov	r0, r6
 8012f6e:	f004 faf7 	bl	8017560 <ucdr_deserialize_array_uint8_t>
 8012f72:	f107 0108 	add.w	r1, r7, #8
 8012f76:	4604      	mov	r4, r0
 8012f78:	2202      	movs	r2, #2
 8012f7a:	4630      	mov	r0, r6
 8012f7c:	f004 faf0 	bl	8017560 <ucdr_deserialize_array_uint8_t>
 8012f80:	f107 010a 	add.w	r1, r7, #10
 8012f84:	4680      	mov	r8, r0
 8012f86:	2202      	movs	r2, #2
 8012f88:	4630      	mov	r0, r6
 8012f8a:	f004 fae9 	bl	8017560 <ucdr_deserialize_array_uint8_t>
 8012f8e:	ea05 0509 	and.w	r5, r5, r9
 8012f92:	b2ed      	uxtb	r5, r5
 8012f94:	402c      	ands	r4, r5
 8012f96:	f107 010c 	add.w	r1, r7, #12
 8012f9a:	4605      	mov	r5, r0
 8012f9c:	4630      	mov	r0, r6
 8012f9e:	f7fc f889 	bl	800f0b4 <ucdr_deserialize_bool>
 8012fa2:	ea08 0404 	and.w	r4, r8, r4
 8012fa6:	4025      	ands	r5, r4
 8012fa8:	4028      	ands	r0, r5
 8012faa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012fae:	bf00      	nop

08012fb0 <uxr_deserialize_STATUS_Payload>:
 8012fb0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012fb4:	2202      	movs	r2, #2
 8012fb6:	4606      	mov	r6, r0
 8012fb8:	460f      	mov	r7, r1
 8012fba:	f004 fad1 	bl	8017560 <ucdr_deserialize_array_uint8_t>
 8012fbe:	2202      	movs	r2, #2
 8012fc0:	1cb9      	adds	r1, r7, #2
 8012fc2:	4605      	mov	r5, r0
 8012fc4:	4630      	mov	r0, r6
 8012fc6:	f004 facb 	bl	8017560 <ucdr_deserialize_array_uint8_t>
 8012fca:	1d39      	adds	r1, r7, #4
 8012fcc:	4680      	mov	r8, r0
 8012fce:	4630      	mov	r0, r6
 8012fd0:	f7fc f8a0 	bl	800f114 <ucdr_deserialize_uint8_t>
 8012fd4:	1d79      	adds	r1, r7, #5
 8012fd6:	4604      	mov	r4, r0
 8012fd8:	4630      	mov	r0, r6
 8012fda:	f7fc f89b 	bl	800f114 <ucdr_deserialize_uint8_t>
 8012fde:	ea05 0508 	and.w	r5, r5, r8
 8012fe2:	402c      	ands	r4, r5
 8012fe4:	4020      	ands	r0, r4
 8012fe6:	b2c0      	uxtb	r0, r0
 8012fe8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08012fec <uxr_serialize_INFO_Payload>:
 8012fec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012ff0:	2202      	movs	r2, #2
 8012ff2:	460c      	mov	r4, r1
 8012ff4:	4605      	mov	r5, r0
 8012ff6:	f004 fa4f 	bl	8017498 <ucdr_serialize_array_uint8_t>
 8012ffa:	2202      	movs	r2, #2
 8012ffc:	4680      	mov	r8, r0
 8012ffe:	1ca1      	adds	r1, r4, #2
 8013000:	4628      	mov	r0, r5
 8013002:	f004 fa49 	bl	8017498 <ucdr_serialize_array_uint8_t>
 8013006:	7921      	ldrb	r1, [r4, #4]
 8013008:	4607      	mov	r7, r0
 801300a:	4628      	mov	r0, r5
 801300c:	f7fc f86c 	bl	800f0e8 <ucdr_serialize_uint8_t>
 8013010:	7961      	ldrb	r1, [r4, #5]
 8013012:	4606      	mov	r6, r0
 8013014:	4628      	mov	r0, r5
 8013016:	f7fc f867 	bl	800f0e8 <ucdr_serialize_uint8_t>
 801301a:	ea08 0807 	and.w	r8, r8, r7
 801301e:	ea06 0608 	and.w	r6, r6, r8
 8013022:	4006      	ands	r6, r0
 8013024:	7a21      	ldrb	r1, [r4, #8]
 8013026:	4628      	mov	r0, r5
 8013028:	f7fc f82e 	bl	800f088 <ucdr_serialize_bool>
 801302c:	7a23      	ldrb	r3, [r4, #8]
 801302e:	b2f7      	uxtb	r7, r6
 8013030:	4606      	mov	r6, r0
 8013032:	b96b      	cbnz	r3, 8013050 <uxr_serialize_INFO_Payload+0x64>
 8013034:	f894 121c 	ldrb.w	r1, [r4, #540]	@ 0x21c
 8013038:	4628      	mov	r0, r5
 801303a:	f7fc f825 	bl	800f088 <ucdr_serialize_bool>
 801303e:	f894 321c 	ldrb.w	r3, [r4, #540]	@ 0x21c
 8013042:	4030      	ands	r0, r6
 8013044:	b2c6      	uxtb	r6, r0
 8013046:	b983      	cbnz	r3, 801306a <uxr_serialize_INFO_Payload+0x7e>
 8013048:	ea06 0007 	and.w	r0, r6, r7
 801304c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013050:	7b21      	ldrb	r1, [r4, #12]
 8013052:	4628      	mov	r0, r5
 8013054:	f7fc f848 	bl	800f0e8 <ucdr_serialize_uint8_t>
 8013058:	b188      	cbz	r0, 801307e <uxr_serialize_INFO_Payload+0x92>
 801305a:	f104 010c 	add.w	r1, r4, #12
 801305e:	4628      	mov	r0, r5
 8013060:	f7ff fa06 	bl	8012470 <uxr_serialize_ObjectVariant.part.0>
 8013064:	4030      	ands	r0, r6
 8013066:	b2c6      	uxtb	r6, r0
 8013068:	e7e4      	b.n	8013034 <uxr_serialize_INFO_Payload+0x48>
 801306a:	f504 7108 	add.w	r1, r4, #544	@ 0x220
 801306e:	4628      	mov	r0, r5
 8013070:	f7ff fe24 	bl	8012cbc <uxr_serialize_ActivityInfoVariant>
 8013074:	4006      	ands	r6, r0
 8013076:	ea06 0007 	and.w	r0, r6, r7
 801307a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801307e:	4606      	mov	r6, r0
 8013080:	e7d8      	b.n	8013034 <uxr_serialize_INFO_Payload+0x48>
 8013082:	bf00      	nop

08013084 <uxr_serialize_READ_DATA_Payload>:
 8013084:	b570      	push	{r4, r5, r6, lr}
 8013086:	2202      	movs	r2, #2
 8013088:	4605      	mov	r5, r0
 801308a:	460e      	mov	r6, r1
 801308c:	f004 fa04 	bl	8017498 <ucdr_serialize_array_uint8_t>
 8013090:	1cb1      	adds	r1, r6, #2
 8013092:	2202      	movs	r2, #2
 8013094:	4604      	mov	r4, r0
 8013096:	4628      	mov	r0, r5
 8013098:	f004 f9fe 	bl	8017498 <ucdr_serialize_array_uint8_t>
 801309c:	1d31      	adds	r1, r6, #4
 801309e:	4004      	ands	r4, r0
 80130a0:	4628      	mov	r0, r5
 80130a2:	f7ff fe55 	bl	8012d50 <uxr_serialize_ReadSpecification>
 80130a6:	b2e4      	uxtb	r4, r4
 80130a8:	4020      	ands	r0, r4
 80130aa:	bd70      	pop	{r4, r5, r6, pc}

080130ac <uxr_serialize_WRITE_DATA_Payload_Data>:
 80130ac:	b570      	push	{r4, r5, r6, lr}
 80130ae:	2202      	movs	r2, #2
 80130b0:	4605      	mov	r5, r0
 80130b2:	460e      	mov	r6, r1
 80130b4:	f004 f9f0 	bl	8017498 <ucdr_serialize_array_uint8_t>
 80130b8:	1cb1      	adds	r1, r6, #2
 80130ba:	4604      	mov	r4, r0
 80130bc:	2202      	movs	r2, #2
 80130be:	4628      	mov	r0, r5
 80130c0:	f004 f9ea 	bl	8017498 <ucdr_serialize_array_uint8_t>
 80130c4:	4020      	ands	r0, r4
 80130c6:	b2c0      	uxtb	r0, r0
 80130c8:	bd70      	pop	{r4, r5, r6, pc}
 80130ca:	bf00      	nop

080130cc <uxr_serialize_ACKNACK_Payload>:
 80130cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80130ce:	460f      	mov	r7, r1
 80130d0:	460e      	mov	r6, r1
 80130d2:	f837 1b02 	ldrh.w	r1, [r7], #2
 80130d6:	4605      	mov	r5, r0
 80130d8:	f7fc f832 	bl	800f140 <ucdr_serialize_uint16_t>
 80130dc:	4639      	mov	r1, r7
 80130de:	2202      	movs	r2, #2
 80130e0:	4604      	mov	r4, r0
 80130e2:	4628      	mov	r0, r5
 80130e4:	f004 f9d8 	bl	8017498 <ucdr_serialize_array_uint8_t>
 80130e8:	7931      	ldrb	r1, [r6, #4]
 80130ea:	4004      	ands	r4, r0
 80130ec:	4628      	mov	r0, r5
 80130ee:	f7fb fffb 	bl	800f0e8 <ucdr_serialize_uint8_t>
 80130f2:	b2e4      	uxtb	r4, r4
 80130f4:	4020      	ands	r0, r4
 80130f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080130f8 <uxr_deserialize_ACKNACK_Payload>:
 80130f8:	b570      	push	{r4, r5, r6, lr}
 80130fa:	4605      	mov	r5, r0
 80130fc:	460e      	mov	r6, r1
 80130fe:	f7fc f91f 	bl	800f340 <ucdr_deserialize_uint16_t>
 8013102:	1cb1      	adds	r1, r6, #2
 8013104:	2202      	movs	r2, #2
 8013106:	4604      	mov	r4, r0
 8013108:	4628      	mov	r0, r5
 801310a:	f004 fa29 	bl	8017560 <ucdr_deserialize_array_uint8_t>
 801310e:	1d31      	adds	r1, r6, #4
 8013110:	4004      	ands	r4, r0
 8013112:	4628      	mov	r0, r5
 8013114:	f7fb fffe 	bl	800f114 <ucdr_deserialize_uint8_t>
 8013118:	b2e4      	uxtb	r4, r4
 801311a:	4020      	ands	r0, r4
 801311c:	bd70      	pop	{r4, r5, r6, pc}
 801311e:	bf00      	nop

08013120 <uxr_serialize_HEARTBEAT_Payload>:
 8013120:	b570      	push	{r4, r5, r6, lr}
 8013122:	460d      	mov	r5, r1
 8013124:	8809      	ldrh	r1, [r1, #0]
 8013126:	4606      	mov	r6, r0
 8013128:	f7fc f80a 	bl	800f140 <ucdr_serialize_uint16_t>
 801312c:	8869      	ldrh	r1, [r5, #2]
 801312e:	4604      	mov	r4, r0
 8013130:	4630      	mov	r0, r6
 8013132:	f7fc f805 	bl	800f140 <ucdr_serialize_uint16_t>
 8013136:	7929      	ldrb	r1, [r5, #4]
 8013138:	4004      	ands	r4, r0
 801313a:	4630      	mov	r0, r6
 801313c:	f7fb ffd4 	bl	800f0e8 <ucdr_serialize_uint8_t>
 8013140:	b2e4      	uxtb	r4, r4
 8013142:	4020      	ands	r0, r4
 8013144:	bd70      	pop	{r4, r5, r6, pc}
 8013146:	bf00      	nop

08013148 <uxr_deserialize_HEARTBEAT_Payload>:
 8013148:	b570      	push	{r4, r5, r6, lr}
 801314a:	4605      	mov	r5, r0
 801314c:	460e      	mov	r6, r1
 801314e:	f7fc f8f7 	bl	800f340 <ucdr_deserialize_uint16_t>
 8013152:	1cb1      	adds	r1, r6, #2
 8013154:	4604      	mov	r4, r0
 8013156:	4628      	mov	r0, r5
 8013158:	f7fc f8f2 	bl	800f340 <ucdr_deserialize_uint16_t>
 801315c:	1d31      	adds	r1, r6, #4
 801315e:	4004      	ands	r4, r0
 8013160:	4628      	mov	r0, r5
 8013162:	f7fb ffd7 	bl	800f114 <ucdr_deserialize_uint8_t>
 8013166:	b2e4      	uxtb	r4, r4
 8013168:	4020      	ands	r0, r4
 801316a:	bd70      	pop	{r4, r5, r6, pc}

0801316c <uxr_deserialize_TIMESTAMP_REPLY_Payload>:
 801316c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013170:	4605      	mov	r5, r0
 8013172:	460e      	mov	r6, r1
 8013174:	f7fc fe80 	bl	800fe78 <ucdr_deserialize_int32_t>
 8013178:	1d31      	adds	r1, r6, #4
 801317a:	4607      	mov	r7, r0
 801317c:	4628      	mov	r0, r5
 801317e:	f7fc faf9 	bl	800f774 <ucdr_deserialize_uint32_t>
 8013182:	f106 0108 	add.w	r1, r6, #8
 8013186:	4680      	mov	r8, r0
 8013188:	4628      	mov	r0, r5
 801318a:	f7fc fe75 	bl	800fe78 <ucdr_deserialize_int32_t>
 801318e:	f106 010c 	add.w	r1, r6, #12
 8013192:	4604      	mov	r4, r0
 8013194:	4628      	mov	r0, r5
 8013196:	f7fc faed 	bl	800f774 <ucdr_deserialize_uint32_t>
 801319a:	ea07 0708 	and.w	r7, r7, r8
 801319e:	403c      	ands	r4, r7
 80131a0:	f106 0110 	add.w	r1, r6, #16
 80131a4:	4004      	ands	r4, r0
 80131a6:	4628      	mov	r0, r5
 80131a8:	f7fc fe66 	bl	800fe78 <ucdr_deserialize_int32_t>
 80131ac:	f106 0114 	add.w	r1, r6, #20
 80131b0:	4603      	mov	r3, r0
 80131b2:	4628      	mov	r0, r5
 80131b4:	461d      	mov	r5, r3
 80131b6:	f7fc fadd 	bl	800f774 <ucdr_deserialize_uint32_t>
 80131ba:	b2e4      	uxtb	r4, r4
 80131bc:	402c      	ands	r4, r5
 80131be:	4020      	ands	r0, r4
 80131c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080131c4 <uxr_serialize_SampleIdentity>:
 80131c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80131c8:	220c      	movs	r2, #12
 80131ca:	4604      	mov	r4, r0
 80131cc:	460d      	mov	r5, r1
 80131ce:	f004 f963 	bl	8017498 <ucdr_serialize_array_uint8_t>
 80131d2:	2203      	movs	r2, #3
 80131d4:	f105 010c 	add.w	r1, r5, #12
 80131d8:	4607      	mov	r7, r0
 80131da:	4620      	mov	r0, r4
 80131dc:	f004 f95c 	bl	8017498 <ucdr_serialize_array_uint8_t>
 80131e0:	7be9      	ldrb	r1, [r5, #15]
 80131e2:	4680      	mov	r8, r0
 80131e4:	4620      	mov	r0, r4
 80131e6:	f7fb ff7f 	bl	800f0e8 <ucdr_serialize_uint8_t>
 80131ea:	6929      	ldr	r1, [r5, #16]
 80131ec:	4606      	mov	r6, r0
 80131ee:	4620      	mov	r0, r4
 80131f0:	f7fc fdaa 	bl	800fd48 <ucdr_serialize_int32_t>
 80131f4:	6969      	ldr	r1, [r5, #20]
 80131f6:	4603      	mov	r3, r0
 80131f8:	4620      	mov	r0, r4
 80131fa:	ea07 0708 	and.w	r7, r7, r8
 80131fe:	461c      	mov	r4, r3
 8013200:	f7fc f988 	bl	800f514 <ucdr_serialize_uint32_t>
 8013204:	403e      	ands	r6, r7
 8013206:	4034      	ands	r4, r6
 8013208:	4020      	ands	r0, r4
 801320a:	b2c0      	uxtb	r0, r0
 801320c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08013210 <uxr_deserialize_SampleIdentity>:
 8013210:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013214:	220c      	movs	r2, #12
 8013216:	4604      	mov	r4, r0
 8013218:	460d      	mov	r5, r1
 801321a:	f004 f9a1 	bl	8017560 <ucdr_deserialize_array_uint8_t>
 801321e:	2203      	movs	r2, #3
 8013220:	f105 010c 	add.w	r1, r5, #12
 8013224:	4607      	mov	r7, r0
 8013226:	4620      	mov	r0, r4
 8013228:	f004 f99a 	bl	8017560 <ucdr_deserialize_array_uint8_t>
 801322c:	f105 010f 	add.w	r1, r5, #15
 8013230:	4680      	mov	r8, r0
 8013232:	4620      	mov	r0, r4
 8013234:	f7fb ff6e 	bl	800f114 <ucdr_deserialize_uint8_t>
 8013238:	f105 0110 	add.w	r1, r5, #16
 801323c:	4606      	mov	r6, r0
 801323e:	4620      	mov	r0, r4
 8013240:	f7fc fe1a 	bl	800fe78 <ucdr_deserialize_int32_t>
 8013244:	f105 0114 	add.w	r1, r5, #20
 8013248:	4603      	mov	r3, r0
 801324a:	4620      	mov	r0, r4
 801324c:	ea07 0708 	and.w	r7, r7, r8
 8013250:	461c      	mov	r4, r3
 8013252:	f7fc fa8f 	bl	800f774 <ucdr_deserialize_uint32_t>
 8013256:	403e      	ands	r6, r7
 8013258:	4034      	ands	r4, r6
 801325a:	4020      	ands	r0, r4
 801325c:	b2c0      	uxtb	r0, r0
 801325e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013262:	bf00      	nop

08013264 <rcl_client_get_rmw_handle>:
 8013264:	b110      	cbz	r0, 801326c <rcl_client_get_rmw_handle+0x8>
 8013266:	6800      	ldr	r0, [r0, #0]
 8013268:	b100      	cbz	r0, 801326c <rcl_client_get_rmw_handle+0x8>
 801326a:	6e80      	ldr	r0, [r0, #104]	@ 0x68
 801326c:	4770      	bx	lr
 801326e:	bf00      	nop

08013270 <rcl_take_response>:
 8013270:	b5f0      	push	{r4, r5, r6, r7, lr}
 8013272:	460e      	mov	r6, r1
 8013274:	460c      	mov	r4, r1
 8013276:	4607      	mov	r7, r0
 8013278:	4694      	mov	ip, r2
 801327a:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 801327c:	b08d      	sub	sp, #52	@ 0x34
 801327e:	ad06      	add	r5, sp, #24
 8013280:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8013282:	e896 0003 	ldmia.w	r6, {r0, r1}
 8013286:	e885 0003 	stmia.w	r5, {r0, r1}
 801328a:	b337      	cbz	r7, 80132da <rcl_take_response+0x6a>
 801328c:	683b      	ldr	r3, [r7, #0]
 801328e:	b323      	cbz	r3, 80132da <rcl_take_response+0x6a>
 8013290:	6e98      	ldr	r0, [r3, #104]	@ 0x68
 8013292:	b310      	cbz	r0, 80132da <rcl_take_response+0x6a>
 8013294:	4662      	mov	r2, ip
 8013296:	b31a      	cbz	r2, 80132e0 <rcl_take_response+0x70>
 8013298:	2300      	movs	r3, #0
 801329a:	2600      	movs	r6, #0
 801329c:	2700      	movs	r7, #0
 801329e:	f88d 3007 	strb.w	r3, [sp, #7]
 80132a2:	a902      	add	r1, sp, #8
 80132a4:	f10d 0307 	add.w	r3, sp, #7
 80132a8:	e9cd 6702 	strd	r6, r7, [sp, #8]
 80132ac:	e9cd 6704 	strd	r6, r7, [sp, #16]
 80132b0:	f003 fc0c 	bl	8016acc <rmw_take_response>
 80132b4:	4606      	mov	r6, r0
 80132b6:	b9a8      	cbnz	r0, 80132e4 <rcl_take_response+0x74>
 80132b8:	f89d 2007 	ldrb.w	r2, [sp, #7]
 80132bc:	f240 13f5 	movw	r3, #501	@ 0x1f5
 80132c0:	2a00      	cmp	r2, #0
 80132c2:	bf08      	it	eq
 80132c4:	461e      	moveq	r6, r3
 80132c6:	ad06      	add	r5, sp, #24
 80132c8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80132ca:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80132cc:	e895 0003 	ldmia.w	r5, {r0, r1}
 80132d0:	e884 0003 	stmia.w	r4, {r0, r1}
 80132d4:	4630      	mov	r0, r6
 80132d6:	b00d      	add	sp, #52	@ 0x34
 80132d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80132da:	f44f 76fa 	mov.w	r6, #500	@ 0x1f4
 80132de:	e7f2      	b.n	80132c6 <rcl_take_response+0x56>
 80132e0:	260b      	movs	r6, #11
 80132e2:	e7f0      	b.n	80132c6 <rcl_take_response+0x56>
 80132e4:	2601      	movs	r6, #1
 80132e6:	e7ee      	b.n	80132c6 <rcl_take_response+0x56>

080132e8 <rcl_convert_rmw_ret_to_rcl_ret>:
 80132e8:	280b      	cmp	r0, #11
 80132ea:	dc0d      	bgt.n	8013308 <rcl_convert_rmw_ret_to_rcl_ret+0x20>
 80132ec:	2800      	cmp	r0, #0
 80132ee:	db09      	blt.n	8013304 <rcl_convert_rmw_ret_to_rcl_ret+0x1c>
 80132f0:	280b      	cmp	r0, #11
 80132f2:	d807      	bhi.n	8013304 <rcl_convert_rmw_ret_to_rcl_ret+0x1c>
 80132f4:	e8df f000 	tbb	[pc, r0]
 80132f8:	07060607 	.word	0x07060607
 80132fc:	06060606 	.word	0x06060606
 8013300:	07070606 	.word	0x07070606
 8013304:	2001      	movs	r0, #1
 8013306:	4770      	bx	lr
 8013308:	28cb      	cmp	r0, #203	@ 0xcb
 801330a:	bf18      	it	ne
 801330c:	2001      	movne	r0, #1
 801330e:	4770      	bx	lr

08013310 <rcl_get_zero_initialized_context>:
 8013310:	4a03      	ldr	r2, [pc, #12]	@ (8013320 <rcl_get_zero_initialized_context+0x10>)
 8013312:	4603      	mov	r3, r0
 8013314:	e892 0003 	ldmia.w	r2, {r0, r1}
 8013318:	e883 0003 	stmia.w	r3, {r0, r1}
 801331c:	4618      	mov	r0, r3
 801331e:	4770      	bx	lr
 8013320:	0801be2c 	.word	0x0801be2c

08013324 <rcl_context_is_valid>:
 8013324:	b118      	cbz	r0, 801332e <rcl_context_is_valid+0xa>
 8013326:	6840      	ldr	r0, [r0, #4]
 8013328:	3800      	subs	r0, #0
 801332a:	bf18      	it	ne
 801332c:	2001      	movne	r0, #1
 801332e:	4770      	bx	lr

08013330 <__cleanup_context>:
 8013330:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8013334:	4606      	mov	r6, r0
 8013336:	6800      	ldr	r0, [r0, #0]
 8013338:	2300      	movs	r3, #0
 801333a:	6073      	str	r3, [r6, #4]
 801333c:	2800      	cmp	r0, #0
 801333e:	d04d      	beq.n	80133dc <__cleanup_context+0xac>
 8013340:	6947      	ldr	r7, [r0, #20]
 8013342:	f8d0 8004 	ldr.w	r8, [r0, #4]
 8013346:	f8d0 9010 	ldr.w	r9, [r0, #16]
 801334a:	b137      	cbz	r7, 801335a <__cleanup_context+0x2a>
 801334c:	3014      	adds	r0, #20
 801334e:	f000 fb1d 	bl	801398c <rcl_init_options_fini>
 8013352:	4607      	mov	r7, r0
 8013354:	2800      	cmp	r0, #0
 8013356:	d148      	bne.n	80133ea <__cleanup_context+0xba>
 8013358:	6830      	ldr	r0, [r6, #0]
 801335a:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 801335c:	b143      	cbz	r3, 8013370 <__cleanup_context+0x40>
 801335e:	3028      	adds	r0, #40	@ 0x28
 8013360:	f003 f940 	bl	80165e4 <rmw_context_fini>
 8013364:	b118      	cbz	r0, 801336e <__cleanup_context+0x3e>
 8013366:	2f00      	cmp	r7, #0
 8013368:	d042      	beq.n	80133f0 <__cleanup_context+0xc0>
 801336a:	f7fa fe51 	bl	800e010 <rcutils_reset_error>
 801336e:	6830      	ldr	r0, [r6, #0]
 8013370:	f8d0 c020 	ldr.w	ip, [r0, #32]
 8013374:	f1bc 0f00 	cmp.w	ip, #0
 8013378:	d01c      	beq.n	80133b4 <__cleanup_context+0x84>
 801337a:	e9d0 2306 	ldrd	r2, r3, [r0, #24]
 801337e:	2a01      	cmp	r2, #1
 8013380:	f173 0100 	sbcs.w	r1, r3, #0
 8013384:	db12      	blt.n	80133ac <__cleanup_context+0x7c>
 8013386:	2400      	movs	r4, #0
 8013388:	2500      	movs	r5, #0
 801338a:	f85c 0024 	ldr.w	r0, [ip, r4, lsl #2]
 801338e:	4649      	mov	r1, r9
 8013390:	b1c0      	cbz	r0, 80133c4 <__cleanup_context+0x94>
 8013392:	47c0      	blx	r8
 8013394:	6831      	ldr	r1, [r6, #0]
 8013396:	e9d1 2306 	ldrd	r2, r3, [r1, #24]
 801339a:	3401      	adds	r4, #1
 801339c:	f145 0500 	adc.w	r5, r5, #0
 80133a0:	4294      	cmp	r4, r2
 80133a2:	f8d1 c020 	ldr.w	ip, [r1, #32]
 80133a6:	eb75 0103 	sbcs.w	r1, r5, r3
 80133aa:	dbee      	blt.n	801338a <__cleanup_context+0x5a>
 80133ac:	4660      	mov	r0, ip
 80133ae:	4649      	mov	r1, r9
 80133b0:	47c0      	blx	r8
 80133b2:	6830      	ldr	r0, [r6, #0]
 80133b4:	4649      	mov	r1, r9
 80133b6:	47c0      	blx	r8
 80133b8:	2300      	movs	r3, #0
 80133ba:	e9c6 3300 	strd	r3, r3, [r6]
 80133be:	4638      	mov	r0, r7
 80133c0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80133c4:	3401      	adds	r4, #1
 80133c6:	f145 0500 	adc.w	r5, r5, #0
 80133ca:	4294      	cmp	r4, r2
 80133cc:	eb75 0103 	sbcs.w	r1, r5, r3
 80133d0:	dbdb      	blt.n	801338a <__cleanup_context+0x5a>
 80133d2:	4660      	mov	r0, ip
 80133d4:	4649      	mov	r1, r9
 80133d6:	47c0      	blx	r8
 80133d8:	6830      	ldr	r0, [r6, #0]
 80133da:	e7eb      	b.n	80133b4 <__cleanup_context+0x84>
 80133dc:	4607      	mov	r7, r0
 80133de:	2300      	movs	r3, #0
 80133e0:	e9c6 3300 	strd	r3, r3, [r6]
 80133e4:	4638      	mov	r0, r7
 80133e6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80133ea:	f7fa fe11 	bl	800e010 <rcutils_reset_error>
 80133ee:	e7b3      	b.n	8013358 <__cleanup_context+0x28>
 80133f0:	f7ff ff7a 	bl	80132e8 <rcl_convert_rmw_ret_to_rcl_ret>
 80133f4:	4607      	mov	r7, r0
 80133f6:	e7b8      	b.n	801336a <__cleanup_context+0x3a>

080133f8 <rcl_expand_topic_name>:
 80133f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80133fc:	b08b      	sub	sp, #44	@ 0x2c
 80133fe:	9306      	str	r3, [sp, #24]
 8013400:	2800      	cmp	r0, #0
 8013402:	f000 80d2 	beq.w	80135aa <rcl_expand_topic_name+0x1b2>
 8013406:	460e      	mov	r6, r1
 8013408:	2900      	cmp	r1, #0
 801340a:	f000 80ce 	beq.w	80135aa <rcl_expand_topic_name+0x1b2>
 801340e:	4617      	mov	r7, r2
 8013410:	2a00      	cmp	r2, #0
 8013412:	f000 80ca 	beq.w	80135aa <rcl_expand_topic_name+0x1b2>
 8013416:	2b00      	cmp	r3, #0
 8013418:	f000 80c7 	beq.w	80135aa <rcl_expand_topic_name+0x1b2>
 801341c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 801341e:	2b00      	cmp	r3, #0
 8013420:	f000 80c3 	beq.w	80135aa <rcl_expand_topic_name+0x1b2>
 8013424:	a909      	add	r1, sp, #36	@ 0x24
 8013426:	2200      	movs	r2, #0
 8013428:	4680      	mov	r8, r0
 801342a:	f001 fc67 	bl	8014cfc <rcl_validate_topic_name>
 801342e:	4604      	mov	r4, r0
 8013430:	2800      	cmp	r0, #0
 8013432:	f040 80b6 	bne.w	80135a2 <rcl_expand_topic_name+0x1aa>
 8013436:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8013438:	2b00      	cmp	r3, #0
 801343a:	f040 80bf 	bne.w	80135bc <rcl_expand_topic_name+0x1c4>
 801343e:	4602      	mov	r2, r0
 8013440:	a909      	add	r1, sp, #36	@ 0x24
 8013442:	4630      	mov	r0, r6
 8013444:	f002 fdf0 	bl	8016028 <rmw_validate_node_name>
 8013448:	2800      	cmp	r0, #0
 801344a:	f040 80b3 	bne.w	80135b4 <rcl_expand_topic_name+0x1bc>
 801344e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8013450:	2a00      	cmp	r2, #0
 8013452:	f040 80b8 	bne.w	80135c6 <rcl_expand_topic_name+0x1ce>
 8013456:	a909      	add	r1, sp, #36	@ 0x24
 8013458:	4638      	mov	r0, r7
 801345a:	f002 fdc7 	bl	8015fec <rmw_validate_namespace>
 801345e:	2800      	cmp	r0, #0
 8013460:	f040 80a8 	bne.w	80135b4 <rcl_expand_topic_name+0x1bc>
 8013464:	9c09      	ldr	r4, [sp, #36]	@ 0x24
 8013466:	2c00      	cmp	r4, #0
 8013468:	f040 80f6 	bne.w	8013658 <rcl_expand_topic_name+0x260>
 801346c:	217b      	movs	r1, #123	@ 0x7b
 801346e:	4640      	mov	r0, r8
 8013470:	f006 fb98 	bl	8019ba4 <strchr>
 8013474:	f898 3000 	ldrb.w	r3, [r8]
 8013478:	2b2f      	cmp	r3, #47	@ 0x2f
 801347a:	4605      	mov	r5, r0
 801347c:	f000 80c4 	beq.w	8013608 <rcl_expand_topic_name+0x210>
 8013480:	2b7e      	cmp	r3, #126	@ 0x7e
 8013482:	d16f      	bne.n	8013564 <rcl_expand_topic_name+0x16c>
 8013484:	4638      	mov	r0, r7
 8013486:	f7ec fead 	bl	80001e4 <strlen>
 801348a:	4b87      	ldr	r3, [pc, #540]	@ (80136a8 <rcl_expand_topic_name+0x2b0>)
 801348c:	4987      	ldr	r1, [pc, #540]	@ (80136ac <rcl_expand_topic_name+0x2b4>)
 801348e:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 8013490:	9604      	str	r6, [sp, #16]
 8013492:	2801      	cmp	r0, #1
 8013494:	bf0c      	ite	eq
 8013496:	4618      	moveq	r0, r3
 8013498:	4608      	movne	r0, r1
 801349a:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 801349e:	e9cd 2300 	strd	r2, r3, [sp]
 80134a2:	e9cd 0702 	strd	r0, r7, [sp, #8]
 80134a6:	f108 0101 	add.w	r1, r8, #1
 80134aa:	9105      	str	r1, [sp, #20]
 80134ac:	ab14      	add	r3, sp, #80	@ 0x50
 80134ae:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80134b0:	f002 fbb4 	bl	8015c1c <rcutils_format_string_limit>
 80134b4:	4682      	mov	sl, r0
 80134b6:	2800      	cmp	r0, #0
 80134b8:	f000 80d0 	beq.w	801365c <rcl_expand_topic_name+0x264>
 80134bc:	2d00      	cmp	r5, #0
 80134be:	f000 80aa 	beq.w	8013616 <rcl_expand_topic_name+0x21e>
 80134c2:	217b      	movs	r1, #123	@ 0x7b
 80134c4:	f006 fb6e 	bl	8019ba4 <strchr>
 80134c8:	46d1      	mov	r9, sl
 80134ca:	4605      	mov	r5, r0
 80134cc:	9407      	str	r4, [sp, #28]
 80134ce:	46d3      	mov	fp, sl
 80134d0:	464c      	mov	r4, r9
 80134d2:	2d00      	cmp	r5, #0
 80134d4:	f000 80c7 	beq.w	8013666 <rcl_expand_topic_name+0x26e>
 80134d8:	217d      	movs	r1, #125	@ 0x7d
 80134da:	4620      	mov	r0, r4
 80134dc:	f006 fb62 	bl	8019ba4 <strchr>
 80134e0:	eba0 0905 	sub.w	r9, r0, r5
 80134e4:	f109 0a01 	add.w	sl, r9, #1
 80134e8:	4871      	ldr	r0, [pc, #452]	@ (80136b0 <rcl_expand_topic_name+0x2b8>)
 80134ea:	4652      	mov	r2, sl
 80134ec:	4629      	mov	r1, r5
 80134ee:	f006 fb66 	bl	8019bbe <strncmp>
 80134f2:	2800      	cmp	r0, #0
 80134f4:	f000 808d 	beq.w	8013612 <rcl_expand_topic_name+0x21a>
 80134f8:	486e      	ldr	r0, [pc, #440]	@ (80136b4 <rcl_expand_topic_name+0x2bc>)
 80134fa:	4652      	mov	r2, sl
 80134fc:	4629      	mov	r1, r5
 80134fe:	f006 fb5e 	bl	8019bbe <strncmp>
 8013502:	b130      	cbz	r0, 8013512 <rcl_expand_topic_name+0x11a>
 8013504:	486c      	ldr	r0, [pc, #432]	@ (80136b8 <rcl_expand_topic_name+0x2c0>)
 8013506:	4652      	mov	r2, sl
 8013508:	4629      	mov	r1, r5
 801350a:	f006 fb58 	bl	8019bbe <strncmp>
 801350e:	2800      	cmp	r0, #0
 8013510:	d15b      	bne.n	80135ca <rcl_expand_topic_name+0x1d2>
 8013512:	46b9      	mov	r9, r7
 8013514:	ab16      	add	r3, sp, #88	@ 0x58
 8013516:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 801351a:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 801351e:	ab14      	add	r3, sp, #80	@ 0x50
 8013520:	4628      	mov	r0, r5
 8013522:	cb0c      	ldmia	r3, {r2, r3}
 8013524:	4651      	mov	r1, sl
 8013526:	f002 fcc5 	bl	8015eb4 <rcutils_strndup>
 801352a:	4605      	mov	r5, r0
 801352c:	2800      	cmp	r0, #0
 801352e:	f000 80a4 	beq.w	801367a <rcl_expand_topic_name+0x282>
 8013532:	464a      	mov	r2, r9
 8013534:	4620      	mov	r0, r4
 8013536:	ab14      	add	r3, sp, #80	@ 0x50
 8013538:	4629      	mov	r1, r5
 801353a:	f002 fbc1 	bl	8015cc0 <rcutils_repl_str>
 801353e:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8013540:	9918      	ldr	r1, [sp, #96]	@ 0x60
 8013542:	4604      	mov	r4, r0
 8013544:	4628      	mov	r0, r5
 8013546:	4798      	blx	r3
 8013548:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 801354a:	9918      	ldr	r1, [sp, #96]	@ 0x60
 801354c:	4658      	mov	r0, fp
 801354e:	4798      	blx	r3
 8013550:	2c00      	cmp	r4, #0
 8013552:	f000 8083 	beq.w	801365c <rcl_expand_topic_name+0x264>
 8013556:	217b      	movs	r1, #123	@ 0x7b
 8013558:	4620      	mov	r0, r4
 801355a:	f006 fb23 	bl	8019ba4 <strchr>
 801355e:	46a3      	mov	fp, r4
 8013560:	4605      	mov	r5, r0
 8013562:	e7b6      	b.n	80134d2 <rcl_expand_topic_name+0xda>
 8013564:	2800      	cmp	r0, #0
 8013566:	d151      	bne.n	801360c <rcl_expand_topic_name+0x214>
 8013568:	4638      	mov	r0, r7
 801356a:	f7ec fe3b 	bl	80001e4 <strlen>
 801356e:	4b53      	ldr	r3, [pc, #332]	@ (80136bc <rcl_expand_topic_name+0x2c4>)
 8013570:	4a53      	ldr	r2, [pc, #332]	@ (80136c0 <rcl_expand_topic_name+0x2c8>)
 8013572:	f8cd 8010 	str.w	r8, [sp, #16]
 8013576:	2801      	cmp	r0, #1
 8013578:	bf0c      	ite	eq
 801357a:	4618      	moveq	r0, r3
 801357c:	4610      	movne	r0, r2
 801357e:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 8013580:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8013584:	e9cd 3200 	strd	r3, r2, [sp]
 8013588:	e9cd 0702 	strd	r0, r7, [sp, #8]
 801358c:	ab14      	add	r3, sp, #80	@ 0x50
 801358e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8013590:	f002 fb44 	bl	8015c1c <rcutils_format_string_limit>
 8013594:	4682      	mov	sl, r0
 8013596:	4653      	mov	r3, sl
 8013598:	2b00      	cmp	r3, #0
 801359a:	d05f      	beq.n	801365c <rcl_expand_topic_name+0x264>
 801359c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 801359e:	f8c3 a000 	str.w	sl, [r3]
 80135a2:	4620      	mov	r0, r4
 80135a4:	b00b      	add	sp, #44	@ 0x2c
 80135a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80135aa:	240b      	movs	r4, #11
 80135ac:	4620      	mov	r0, r4
 80135ae:	b00b      	add	sp, #44	@ 0x2c
 80135b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80135b4:	f7ff fe98 	bl	80132e8 <rcl_convert_rmw_ret_to_rcl_ret>
 80135b8:	4604      	mov	r4, r0
 80135ba:	e7f2      	b.n	80135a2 <rcl_expand_topic_name+0x1aa>
 80135bc:	2467      	movs	r4, #103	@ 0x67
 80135be:	4620      	mov	r0, r4
 80135c0:	b00b      	add	sp, #44	@ 0x2c
 80135c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80135c6:	24c9      	movs	r4, #201	@ 0xc9
 80135c8:	e7eb      	b.n	80135a2 <rcl_expand_topic_name+0x1aa>
 80135ca:	f109 32ff 	add.w	r2, r9, #4294967295	@ 0xffffffff
 80135ce:	9806      	ldr	r0, [sp, #24]
 80135d0:	1c69      	adds	r1, r5, #1
 80135d2:	f7fa fe33 	bl	800e23c <rcutils_string_map_getn>
 80135d6:	4681      	mov	r9, r0
 80135d8:	2800      	cmp	r0, #0
 80135da:	d19b      	bne.n	8013514 <rcl_expand_topic_name+0x11c>
 80135dc:	aa16      	add	r2, sp, #88	@ 0x58
 80135de:	ca07      	ldmia	r2, {r0, r1, r2}
 80135e0:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80135e2:	f8c3 9000 	str.w	r9, [r3]
 80135e6:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 80135ea:	ab14      	add	r3, sp, #80	@ 0x50
 80135ec:	cb0c      	ldmia	r3, {r2, r3}
 80135ee:	4651      	mov	r1, sl
 80135f0:	4628      	mov	r0, r5
 80135f2:	f002 fc5f 	bl	8015eb4 <rcutils_strndup>
 80135f6:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 80135f8:	9918      	ldr	r1, [sp, #96]	@ 0x60
 80135fa:	4798      	blx	r3
 80135fc:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 80135fe:	9918      	ldr	r1, [sp, #96]	@ 0x60
 8013600:	4658      	mov	r0, fp
 8013602:	4798      	blx	r3
 8013604:	2469      	movs	r4, #105	@ 0x69
 8013606:	e7cc      	b.n	80135a2 <rcl_expand_topic_name+0x1aa>
 8013608:	2800      	cmp	r0, #0
 801360a:	d03e      	beq.n	801368a <rcl_expand_topic_name+0x292>
 801360c:	46c1      	mov	r9, r8
 801360e:	46a2      	mov	sl, r4
 8013610:	e75c      	b.n	80134cc <rcl_expand_topic_name+0xd4>
 8013612:	46b1      	mov	r9, r6
 8013614:	e77e      	b.n	8013514 <rcl_expand_topic_name+0x11c>
 8013616:	f89a 3000 	ldrb.w	r3, [sl]
 801361a:	2b2f      	cmp	r3, #47	@ 0x2f
 801361c:	d0be      	beq.n	801359c <rcl_expand_topic_name+0x1a4>
 801361e:	4638      	mov	r0, r7
 8013620:	f7ec fde0 	bl	80001e4 <strlen>
 8013624:	4b25      	ldr	r3, [pc, #148]	@ (80136bc <rcl_expand_topic_name+0x2c4>)
 8013626:	4926      	ldr	r1, [pc, #152]	@ (80136c0 <rcl_expand_topic_name+0x2c8>)
 8013628:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 801362a:	f8cd a010 	str.w	sl, [sp, #16]
 801362e:	2801      	cmp	r0, #1
 8013630:	bf0c      	ite	eq
 8013632:	4618      	moveq	r0, r3
 8013634:	4608      	movne	r0, r1
 8013636:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 801363a:	e9cd 2300 	strd	r2, r3, [sp]
 801363e:	e9cd 0702 	strd	r0, r7, [sp, #8]
 8013642:	ab14      	add	r3, sp, #80	@ 0x50
 8013644:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8013646:	f002 fae9 	bl	8015c1c <rcutils_format_string_limit>
 801364a:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 801364c:	9918      	ldr	r1, [sp, #96]	@ 0x60
 801364e:	4603      	mov	r3, r0
 8013650:	4650      	mov	r0, sl
 8013652:	469a      	mov	sl, r3
 8013654:	4790      	blx	r2
 8013656:	e79e      	b.n	8013596 <rcl_expand_topic_name+0x19e>
 8013658:	24ca      	movs	r4, #202	@ 0xca
 801365a:	e7a2      	b.n	80135a2 <rcl_expand_topic_name+0x1aa>
 801365c:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 801365e:	2300      	movs	r3, #0
 8013660:	6013      	str	r3, [r2, #0]
 8013662:	240a      	movs	r4, #10
 8013664:	e79d      	b.n	80135a2 <rcl_expand_topic_name+0x1aa>
 8013666:	465b      	mov	r3, fp
 8013668:	9c07      	ldr	r4, [sp, #28]
 801366a:	46da      	mov	sl, fp
 801366c:	2b00      	cmp	r3, #0
 801366e:	d1d2      	bne.n	8013616 <rcl_expand_topic_name+0x21e>
 8013670:	f898 3000 	ldrb.w	r3, [r8]
 8013674:	2b2f      	cmp	r3, #47	@ 0x2f
 8013676:	d091      	beq.n	801359c <rcl_expand_topic_name+0x1a4>
 8013678:	e776      	b.n	8013568 <rcl_expand_topic_name+0x170>
 801367a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 801367c:	9918      	ldr	r1, [sp, #96]	@ 0x60
 801367e:	601d      	str	r5, [r3, #0]
 8013680:	4658      	mov	r0, fp
 8013682:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8013684:	4798      	blx	r3
 8013686:	240a      	movs	r4, #10
 8013688:	e78b      	b.n	80135a2 <rcl_expand_topic_name+0x1aa>
 801368a:	e9dd 0117 	ldrd	r0, r1, [sp, #92]	@ 0x5c
 801368e:	e88d 0003 	stmia.w	sp, {r0, r1}
 8013692:	ab14      	add	r3, sp, #80	@ 0x50
 8013694:	cb0e      	ldmia	r3, {r1, r2, r3}
 8013696:	4640      	mov	r0, r8
 8013698:	f002 fbea 	bl	8015e70 <rcutils_strdup>
 801369c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 801369e:	2800      	cmp	r0, #0
 80136a0:	bf08      	it	eq
 80136a2:	240a      	moveq	r4, #10
 80136a4:	6018      	str	r0, [r3, #0]
 80136a6:	e77c      	b.n	80135a2 <rcl_expand_topic_name+0x1aa>
 80136a8:	0801bdd8 	.word	0x0801bdd8
 80136ac:	0801be34 	.word	0x0801be34
 80136b0:	0801be44 	.word	0x0801be44
 80136b4:	0801be4c 	.word	0x0801be4c
 80136b8:	0801be54 	.word	0x0801be54
 80136bc:	0801bde8 	.word	0x0801bde8
 80136c0:	0801be3c 	.word	0x0801be3c

080136c4 <rcl_get_default_topic_name_substitutions>:
 80136c4:	2800      	cmp	r0, #0
 80136c6:	bf0c      	ite	eq
 80136c8:	200b      	moveq	r0, #11
 80136ca:	2000      	movne	r0, #0
 80136cc:	4770      	bx	lr
 80136ce:	bf00      	nop

080136d0 <rcl_init>:
 80136d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80136d4:	1e07      	subs	r7, r0, #0
 80136d6:	b09f      	sub	sp, #124	@ 0x7c
 80136d8:	4688      	mov	r8, r1
 80136da:	4692      	mov	sl, r2
 80136dc:	4699      	mov	r9, r3
 80136de:	f340 8097 	ble.w	8013810 <rcl_init+0x140>
 80136e2:	2900      	cmp	r1, #0
 80136e4:	f000 8097 	beq.w	8013816 <rcl_init+0x146>
 80136e8:	1f0d      	subs	r5, r1, #4
 80136ea:	2400      	movs	r4, #0
 80136ec:	f855 6f04 	ldr.w	r6, [r5, #4]!
 80136f0:	3401      	adds	r4, #1
 80136f2:	2e00      	cmp	r6, #0
 80136f4:	f000 808f 	beq.w	8013816 <rcl_init+0x146>
 80136f8:	42a7      	cmp	r7, r4
 80136fa:	d1f7      	bne.n	80136ec <rcl_init+0x1c>
 80136fc:	f1ba 0f00 	cmp.w	sl, #0
 8013700:	f000 8089 	beq.w	8013816 <rcl_init+0x146>
 8013704:	f8da 4000 	ldr.w	r4, [sl]
 8013708:	2c00      	cmp	r4, #0
 801370a:	f000 8084 	beq.w	8013816 <rcl_init+0x146>
 801370e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8013710:	ad19      	add	r5, sp, #100	@ 0x64
 8013712:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8013714:	6823      	ldr	r3, [r4, #0]
 8013716:	602b      	str	r3, [r5, #0]
 8013718:	a819      	add	r0, sp, #100	@ 0x64
 801371a:	f7fa fc55 	bl	800dfc8 <rcutils_allocator_is_valid>
 801371e:	2800      	cmp	r0, #0
 8013720:	d079      	beq.n	8013816 <rcl_init+0x146>
 8013722:	f1b9 0f00 	cmp.w	r9, #0
 8013726:	d076      	beq.n	8013816 <rcl_init+0x146>
 8013728:	f8d9 3000 	ldr.w	r3, [r9]
 801372c:	2b00      	cmp	r3, #0
 801372e:	d177      	bne.n	8013820 <rcl_init+0x150>
 8013730:	e9dd 321c 	ldrd	r3, r2, [sp, #112]	@ 0x70
 8013734:	2178      	movs	r1, #120	@ 0x78
 8013736:	2001      	movs	r0, #1
 8013738:	4798      	blx	r3
 801373a:	4604      	mov	r4, r0
 801373c:	f8c9 0000 	str.w	r0, [r9]
 8013740:	2800      	cmp	r0, #0
 8013742:	f000 80ba 	beq.w	80138ba <rcl_init+0x1ea>
 8013746:	a802      	add	r0, sp, #8
 8013748:	f002 fbd0 	bl	8015eec <rmw_get_zero_initialized_context>
 801374c:	a902      	add	r1, sp, #8
 801374e:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 8013752:	2250      	movs	r2, #80	@ 0x50
 8013754:	ac19      	add	r4, sp, #100	@ 0x64
 8013756:	f006 fb3c 	bl	8019dd2 <memcpy>
 801375a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801375c:	f8d9 5000 	ldr.w	r5, [r9]
 8013760:	6826      	ldr	r6, [r4, #0]
 8013762:	462c      	mov	r4, r5
 8013764:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8013766:	f105 0114 	add.w	r1, r5, #20
 801376a:	6026      	str	r6, [r4, #0]
 801376c:	4650      	mov	r0, sl
 801376e:	f000 f931 	bl	80139d4 <rcl_init_options_copy>
 8013772:	4606      	mov	r6, r0
 8013774:	2800      	cmp	r0, #0
 8013776:	d144      	bne.n	8013802 <rcl_init+0x132>
 8013778:	f8d9 a000 	ldr.w	sl, [r9]
 801377c:	463c      	mov	r4, r7
 801377e:	17fd      	asrs	r5, r7, #31
 8013780:	e9ca 4506 	strd	r4, r5, [sl, #24]
 8013784:	f8ca 0020 	str.w	r0, [sl, #32]
 8013788:	2f00      	cmp	r7, #0
 801378a:	d050      	beq.n	801382e <rcl_init+0x15e>
 801378c:	f1b8 0f00 	cmp.w	r8, #0
 8013790:	d04d      	beq.n	801382e <rcl_init+0x15e>
 8013792:	e9dd 321c 	ldrd	r3, r2, [sp, #112]	@ 0x70
 8013796:	4638      	mov	r0, r7
 8013798:	2104      	movs	r1, #4
 801379a:	4798      	blx	r3
 801379c:	f8ca 0020 	str.w	r0, [sl, #32]
 80137a0:	f8d9 a000 	ldr.w	sl, [r9]
 80137a4:	f8da 3020 	ldr.w	r3, [sl, #32]
 80137a8:	46d3      	mov	fp, sl
 80137aa:	b34b      	cbz	r3, 8013800 <rcl_init+0x130>
 80137ac:	2f01      	cmp	r7, #1
 80137ae:	f175 0300 	sbcs.w	r3, r5, #0
 80137b2:	db3c      	blt.n	801382e <rcl_init+0x15e>
 80137b4:	f1a8 0804 	sub.w	r8, r8, #4
 80137b8:	2600      	movs	r6, #0
 80137ba:	2700      	movs	r7, #0
 80137bc:	e00c      	b.n	80137d8 <rcl_init+0x108>
 80137be:	f8d8 1000 	ldr.w	r1, [r8]
 80137c2:	f006 fb06 	bl	8019dd2 <memcpy>
 80137c6:	3601      	adds	r6, #1
 80137c8:	f147 0700 	adc.w	r7, r7, #0
 80137cc:	42bd      	cmp	r5, r7
 80137ce:	bf08      	it	eq
 80137d0:	42b4      	cmpeq	r4, r6
 80137d2:	d02a      	beq.n	801382a <rcl_init+0x15a>
 80137d4:	f8d9 b000 	ldr.w	fp, [r9]
 80137d8:	f858 0f04 	ldr.w	r0, [r8, #4]!
 80137dc:	f7ec fd02 	bl	80001e4 <strlen>
 80137e0:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80137e2:	991d      	ldr	r1, [sp, #116]	@ 0x74
 80137e4:	f8db a020 	ldr.w	sl, [fp, #32]
 80137e8:	9001      	str	r0, [sp, #4]
 80137ea:	4798      	blx	r3
 80137ec:	f8d9 1000 	ldr.w	r1, [r9]
 80137f0:	9a01      	ldr	r2, [sp, #4]
 80137f2:	6a09      	ldr	r1, [r1, #32]
 80137f4:	00b3      	lsls	r3, r6, #2
 80137f6:	f84a 0003 	str.w	r0, [sl, r3]
 80137fa:	58c8      	ldr	r0, [r1, r3]
 80137fc:	2800      	cmp	r0, #0
 80137fe:	d1de      	bne.n	80137be <rcl_init+0xee>
 8013800:	260a      	movs	r6, #10
 8013802:	4648      	mov	r0, r9
 8013804:	f7ff fd94 	bl	8013330 <__cleanup_context>
 8013808:	4630      	mov	r0, r6
 801380a:	b01f      	add	sp, #124	@ 0x7c
 801380c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013810:	2900      	cmp	r1, #0
 8013812:	f43f af73 	beq.w	80136fc <rcl_init+0x2c>
 8013816:	260b      	movs	r6, #11
 8013818:	4630      	mov	r0, r6
 801381a:	b01f      	add	sp, #124	@ 0x7c
 801381c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013820:	2664      	movs	r6, #100	@ 0x64
 8013822:	4630      	mov	r0, r6
 8013824:	b01f      	add	sp, #124	@ 0x7c
 8013826:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801382a:	f8d9 a000 	ldr.w	sl, [r9]
 801382e:	4a2c      	ldr	r2, [pc, #176]	@ (80138e0 <rcl_init+0x210>)
 8013830:	6813      	ldr	r3, [r2, #0]
 8013832:	3301      	adds	r3, #1
 8013834:	d03b      	beq.n	80138ae <rcl_init+0x1de>
 8013836:	6013      	str	r3, [r2, #0]
 8013838:	4619      	mov	r1, r3
 801383a:	2000      	movs	r0, #0
 801383c:	f8da 4014 	ldr.w	r4, [sl, #20]
 8013840:	f8c9 3004 	str.w	r3, [r9, #4]
 8013844:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8013846:	3301      	adds	r3, #1
 8013848:	e9c4 1006 	strd	r1, r0, [r4, #24]
 801384c:	d039      	beq.n	80138c2 <rcl_init+0x1f2>
 801384e:	f894 3030 	ldrb.w	r3, [r4, #48]	@ 0x30
 8013852:	b94b      	cbnz	r3, 8013868 <rcl_init+0x198>
 8013854:	f104 0030 	add.w	r0, r4, #48	@ 0x30
 8013858:	f000 f962 	bl	8013b20 <rcl_get_localhost_only>
 801385c:	4606      	mov	r6, r0
 801385e:	2800      	cmp	r0, #0
 8013860:	d1cf      	bne.n	8013802 <rcl_init+0x132>
 8013862:	f8d9 3000 	ldr.w	r3, [r9]
 8013866:	695c      	ldr	r4, [r3, #20]
 8013868:	6b60      	ldr	r0, [r4, #52]	@ 0x34
 801386a:	aa18      	add	r2, sp, #96	@ 0x60
 801386c:	a917      	add	r1, sp, #92	@ 0x5c
 801386e:	f001 fa33 	bl	8014cd8 <rcl_validate_enclave_name>
 8013872:	4606      	mov	r6, r0
 8013874:	2800      	cmp	r0, #0
 8013876:	d1c4      	bne.n	8013802 <rcl_init+0x132>
 8013878:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 801387a:	bb03      	cbnz	r3, 80138be <rcl_init+0x1ee>
 801387c:	f8d9 1000 	ldr.w	r1, [r9]
 8013880:	694b      	ldr	r3, [r1, #20]
 8013882:	6b58      	ldr	r0, [r3, #52]	@ 0x34
 8013884:	f103 0228 	add.w	r2, r3, #40	@ 0x28
 8013888:	f000 fbf2 	bl	8014070 <rcl_get_security_options_from_environment>
 801388c:	4606      	mov	r6, r0
 801388e:	2800      	cmp	r0, #0
 8013890:	d1b7      	bne.n	8013802 <rcl_init+0x132>
 8013892:	f8d9 1000 	ldr.w	r1, [r9]
 8013896:	6948      	ldr	r0, [r1, #20]
 8013898:	3128      	adds	r1, #40	@ 0x28
 801389a:	3018      	adds	r0, #24
 801389c:	f002 fd6a 	bl	8016374 <rmw_init>
 80138a0:	4606      	mov	r6, r0
 80138a2:	2800      	cmp	r0, #0
 80138a4:	d0b8      	beq.n	8013818 <rcl_init+0x148>
 80138a6:	f7ff fd1f 	bl	80132e8 <rcl_convert_rmw_ret_to_rcl_ret>
 80138aa:	4606      	mov	r6, r0
 80138ac:	e7a9      	b.n	8013802 <rcl_init+0x132>
 80138ae:	2401      	movs	r4, #1
 80138b0:	4618      	mov	r0, r3
 80138b2:	4621      	mov	r1, r4
 80138b4:	6014      	str	r4, [r2, #0]
 80138b6:	4623      	mov	r3, r4
 80138b8:	e7c0      	b.n	801383c <rcl_init+0x16c>
 80138ba:	260a      	movs	r6, #10
 80138bc:	e7ac      	b.n	8013818 <rcl_init+0x148>
 80138be:	2601      	movs	r6, #1
 80138c0:	e79f      	b.n	8013802 <rcl_init+0x132>
 80138c2:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 80138c6:	f005 fb29 	bl	8018f1c <rcl_get_default_domain_id>
 80138ca:	4606      	mov	r6, r0
 80138cc:	2800      	cmp	r0, #0
 80138ce:	d198      	bne.n	8013802 <rcl_init+0x132>
 80138d0:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 80138d2:	3301      	adds	r3, #1
 80138d4:	f8d9 3000 	ldr.w	r3, [r9]
 80138d8:	bf08      	it	eq
 80138da:	6260      	streq	r0, [r4, #36]	@ 0x24
 80138dc:	695c      	ldr	r4, [r3, #20]
 80138de:	e7b6      	b.n	801384e <rcl_init+0x17e>
 80138e0:	200075b0 	.word	0x200075b0

080138e4 <rcl_get_zero_initialized_init_options>:
 80138e4:	2000      	movs	r0, #0
 80138e6:	4770      	bx	lr

080138e8 <rcl_init_options_init>:
 80138e8:	b084      	sub	sp, #16
 80138ea:	b5f0      	push	{r4, r5, r6, r7, lr}
 80138ec:	b091      	sub	sp, #68	@ 0x44
 80138ee:	af17      	add	r7, sp, #92	@ 0x5c
 80138f0:	e887 000e 	stmia.w	r7, {r1, r2, r3}
 80138f4:	2800      	cmp	r0, #0
 80138f6:	d044      	beq.n	8013982 <rcl_init_options_init+0x9a>
 80138f8:	6803      	ldr	r3, [r0, #0]
 80138fa:	4606      	mov	r6, r0
 80138fc:	b133      	cbz	r3, 801390c <rcl_init_options_init+0x24>
 80138fe:	2464      	movs	r4, #100	@ 0x64
 8013900:	4620      	mov	r0, r4
 8013902:	b011      	add	sp, #68	@ 0x44
 8013904:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8013908:	b004      	add	sp, #16
 801390a:	4770      	bx	lr
 801390c:	4638      	mov	r0, r7
 801390e:	f7fa fb5b 	bl	800dfc8 <rcutils_allocator_is_valid>
 8013912:	2800      	cmp	r0, #0
 8013914:	d035      	beq.n	8013982 <rcl_init_options_init+0x9a>
 8013916:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8013918:	991b      	ldr	r1, [sp, #108]	@ 0x6c
 801391a:	2050      	movs	r0, #80	@ 0x50
 801391c:	4798      	blx	r3
 801391e:	4604      	mov	r4, r0
 8013920:	6030      	str	r0, [r6, #0]
 8013922:	2800      	cmp	r0, #0
 8013924:	d02f      	beq.n	8013986 <rcl_init_options_init+0x9e>
 8013926:	46bc      	mov	ip, r7
 8013928:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 801392c:	4625      	mov	r5, r4
 801392e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8013930:	f8dc 3000 	ldr.w	r3, [ip]
 8013934:	602b      	str	r3, [r5, #0]
 8013936:	a802      	add	r0, sp, #8
 8013938:	ad02      	add	r5, sp, #8
 801393a:	f002 fadf 	bl	8015efc <rmw_get_zero_initialized_init_options>
 801393e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8013940:	3418      	adds	r4, #24
 8013942:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8013944:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8013946:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8013948:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801394a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801394c:	e895 0003 	ldmia.w	r5, {r0, r1}
 8013950:	6833      	ldr	r3, [r6, #0]
 8013952:	e884 0003 	stmia.w	r4, {r0, r1}
 8013956:	e9dd 011a 	ldrd	r0, r1, [sp, #104]	@ 0x68
 801395a:	e88d 0003 	stmia.w	sp, {r0, r1}
 801395e:	f103 0018 	add.w	r0, r3, #24
 8013962:	e897 000e 	ldmia.w	r7, {r1, r2, r3}
 8013966:	f002 fc2b 	bl	80161c0 <rmw_init_options_init>
 801396a:	4604      	mov	r4, r0
 801396c:	2800      	cmp	r0, #0
 801396e:	d0c7      	beq.n	8013900 <rcl_init_options_init+0x18>
 8013970:	6830      	ldr	r0, [r6, #0]
 8013972:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 8013974:	991b      	ldr	r1, [sp, #108]	@ 0x6c
 8013976:	4798      	blx	r3
 8013978:	4620      	mov	r0, r4
 801397a:	f7ff fcb5 	bl	80132e8 <rcl_convert_rmw_ret_to_rcl_ret>
 801397e:	4604      	mov	r4, r0
 8013980:	e7be      	b.n	8013900 <rcl_init_options_init+0x18>
 8013982:	240b      	movs	r4, #11
 8013984:	e7bc      	b.n	8013900 <rcl_init_options_init+0x18>
 8013986:	240a      	movs	r4, #10
 8013988:	e7ba      	b.n	8013900 <rcl_init_options_init+0x18>
 801398a:	bf00      	nop

0801398c <rcl_init_options_fini>:
 801398c:	b570      	push	{r4, r5, r6, lr}
 801398e:	b086      	sub	sp, #24
 8013990:	b1c0      	cbz	r0, 80139c4 <rcl_init_options_fini+0x38>
 8013992:	6804      	ldr	r4, [r0, #0]
 8013994:	4606      	mov	r6, r0
 8013996:	b1ac      	cbz	r4, 80139c4 <rcl_init_options_fini+0x38>
 8013998:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801399a:	ad01      	add	r5, sp, #4
 801399c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 801399e:	6823      	ldr	r3, [r4, #0]
 80139a0:	602b      	str	r3, [r5, #0]
 80139a2:	a801      	add	r0, sp, #4
 80139a4:	f7fa fb10 	bl	800dfc8 <rcutils_allocator_is_valid>
 80139a8:	b160      	cbz	r0, 80139c4 <rcl_init_options_fini+0x38>
 80139aa:	6830      	ldr	r0, [r6, #0]
 80139ac:	3018      	adds	r0, #24
 80139ae:	f002 fca1 	bl	80162f4 <rmw_init_options_fini>
 80139b2:	4604      	mov	r4, r0
 80139b4:	b950      	cbnz	r0, 80139cc <rcl_init_options_fini+0x40>
 80139b6:	6830      	ldr	r0, [r6, #0]
 80139b8:	9b02      	ldr	r3, [sp, #8]
 80139ba:	9905      	ldr	r1, [sp, #20]
 80139bc:	4798      	blx	r3
 80139be:	4620      	mov	r0, r4
 80139c0:	b006      	add	sp, #24
 80139c2:	bd70      	pop	{r4, r5, r6, pc}
 80139c4:	240b      	movs	r4, #11
 80139c6:	4620      	mov	r0, r4
 80139c8:	b006      	add	sp, #24
 80139ca:	bd70      	pop	{r4, r5, r6, pc}
 80139cc:	f7ff fc8c 	bl	80132e8 <rcl_convert_rmw_ret_to_rcl_ret>
 80139d0:	4604      	mov	r4, r0
 80139d2:	e7f8      	b.n	80139c6 <rcl_init_options_fini+0x3a>

080139d4 <rcl_init_options_copy>:
 80139d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80139d8:	b096      	sub	sp, #88	@ 0x58
 80139da:	2800      	cmp	r0, #0
 80139dc:	d063      	beq.n	8013aa6 <rcl_init_options_copy+0xd2>
 80139de:	6806      	ldr	r6, [r0, #0]
 80139e0:	4605      	mov	r5, r0
 80139e2:	2e00      	cmp	r6, #0
 80139e4:	d05f      	beq.n	8013aa6 <rcl_init_options_copy+0xd2>
 80139e6:	460c      	mov	r4, r1
 80139e8:	2900      	cmp	r1, #0
 80139ea:	d05c      	beq.n	8013aa6 <rcl_init_options_copy+0xd2>
 80139ec:	680b      	ldr	r3, [r1, #0]
 80139ee:	b123      	cbz	r3, 80139fa <rcl_init_options_copy+0x26>
 80139f0:	2664      	movs	r6, #100	@ 0x64
 80139f2:	4630      	mov	r0, r6
 80139f4:	b016      	add	sp, #88	@ 0x58
 80139f6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80139fa:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 80139fc:	af11      	add	r7, sp, #68	@ 0x44
 80139fe:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 8013a00:	f10d 0844 	add.w	r8, sp, #68	@ 0x44
 8013a04:	6833      	ldr	r3, [r6, #0]
 8013a06:	603b      	str	r3, [r7, #0]
 8013a08:	4640      	mov	r0, r8
 8013a0a:	f7fa fadd 	bl	800dfc8 <rcutils_allocator_is_valid>
 8013a0e:	2800      	cmp	r0, #0
 8013a10:	d049      	beq.n	8013aa6 <rcl_init_options_copy+0xd2>
 8013a12:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8013a14:	9915      	ldr	r1, [sp, #84]	@ 0x54
 8013a16:	2050      	movs	r0, #80	@ 0x50
 8013a18:	4798      	blx	r3
 8013a1a:	4606      	mov	r6, r0
 8013a1c:	6020      	str	r0, [r4, #0]
 8013a1e:	2800      	cmp	r0, #0
 8013a20:	d077      	beq.n	8013b12 <rcl_init_options_copy+0x13e>
 8013a22:	46c4      	mov	ip, r8
 8013a24:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8013a28:	4637      	mov	r7, r6
 8013a2a:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 8013a2c:	f8dc 3000 	ldr.w	r3, [ip]
 8013a30:	603b      	str	r3, [r7, #0]
 8013a32:	a802      	add	r0, sp, #8
 8013a34:	af02      	add	r7, sp, #8
 8013a36:	f002 fa61 	bl	8015efc <rmw_get_zero_initialized_init_options>
 8013a3a:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 8013a3c:	3618      	adds	r6, #24
 8013a3e:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8013a40:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 8013a42:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8013a44:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 8013a46:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8013a48:	e897 0003 	ldmia.w	r7, {r0, r1}
 8013a4c:	ab16      	add	r3, sp, #88	@ 0x58
 8013a4e:	e886 0003 	stmia.w	r6, {r0, r1}
 8013a52:	e913 0003 	ldmdb	r3, {r0, r1}
 8013a56:	6823      	ldr	r3, [r4, #0]
 8013a58:	e88d 0003 	stmia.w	sp, {r0, r1}
 8013a5c:	f103 0018 	add.w	r0, r3, #24
 8013a60:	e898 000e 	ldmia.w	r8, {r1, r2, r3}
 8013a64:	f002 fbac 	bl	80161c0 <rmw_init_options_init>
 8013a68:	4606      	mov	r6, r0
 8013a6a:	bb08      	cbnz	r0, 8013ab0 <rcl_init_options_copy+0xdc>
 8013a6c:	682f      	ldr	r7, [r5, #0]
 8013a6e:	f8d4 c000 	ldr.w	ip, [r4]
 8013a72:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 8013a74:	4666      	mov	r6, ip
 8013a76:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8013a78:	683b      	ldr	r3, [r7, #0]
 8013a7a:	6033      	str	r3, [r6, #0]
 8013a7c:	f10c 0018 	add.w	r0, ip, #24
 8013a80:	f002 fc38 	bl	80162f4 <rmw_init_options_fini>
 8013a84:	4607      	mov	r7, r0
 8013a86:	b1f0      	cbz	r0, 8013ac6 <rcl_init_options_copy+0xf2>
 8013a88:	f7fa faac 	bl	800dfe4 <rcutils_get_error_string>
 8013a8c:	f7fa fac0 	bl	800e010 <rcutils_reset_error>
 8013a90:	4620      	mov	r0, r4
 8013a92:	f7ff ff7b 	bl	801398c <rcl_init_options_fini>
 8013a96:	4606      	mov	r6, r0
 8013a98:	2800      	cmp	r0, #0
 8013a9a:	d1aa      	bne.n	80139f2 <rcl_init_options_copy+0x1e>
 8013a9c:	4638      	mov	r0, r7
 8013a9e:	f7ff fc23 	bl	80132e8 <rcl_convert_rmw_ret_to_rcl_ret>
 8013aa2:	4606      	mov	r6, r0
 8013aa4:	e7a5      	b.n	80139f2 <rcl_init_options_copy+0x1e>
 8013aa6:	260b      	movs	r6, #11
 8013aa8:	4630      	mov	r0, r6
 8013aaa:	b016      	add	sp, #88	@ 0x58
 8013aac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013ab0:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8013ab2:	9915      	ldr	r1, [sp, #84]	@ 0x54
 8013ab4:	6820      	ldr	r0, [r4, #0]
 8013ab6:	4798      	blx	r3
 8013ab8:	4630      	mov	r0, r6
 8013aba:	f7ff fc15 	bl	80132e8 <rcl_convert_rmw_ret_to_rcl_ret>
 8013abe:	4606      	mov	r6, r0
 8013ac0:	2800      	cmp	r0, #0
 8013ac2:	d0d3      	beq.n	8013a6c <rcl_init_options_copy+0x98>
 8013ac4:	e795      	b.n	80139f2 <rcl_init_options_copy+0x1e>
 8013ac6:	a802      	add	r0, sp, #8
 8013ac8:	ae02      	add	r6, sp, #8
 8013aca:	6827      	ldr	r7, [r4, #0]
 8013acc:	f002 fa16 	bl	8015efc <rmw_get_zero_initialized_init_options>
 8013ad0:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8013ad2:	3718      	adds	r7, #24
 8013ad4:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 8013ad6:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8013ad8:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 8013ada:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8013adc:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 8013ade:	e896 0003 	ldmia.w	r6, {r0, r1}
 8013ae2:	682a      	ldr	r2, [r5, #0]
 8013ae4:	6823      	ldr	r3, [r4, #0]
 8013ae6:	e887 0003 	stmia.w	r7, {r0, r1}
 8013aea:	f102 0018 	add.w	r0, r2, #24
 8013aee:	f103 0118 	add.w	r1, r3, #24
 8013af2:	f002 fbbd 	bl	8016270 <rmw_init_options_copy>
 8013af6:	4606      	mov	r6, r0
 8013af8:	2800      	cmp	r0, #0
 8013afa:	f43f af7a 	beq.w	80139f2 <rcl_init_options_copy+0x1e>
 8013afe:	f7fa fa71 	bl	800dfe4 <rcutils_get_error_string>
 8013b02:	f7fa fa85 	bl	800e010 <rcutils_reset_error>
 8013b06:	4620      	mov	r0, r4
 8013b08:	f7ff ff40 	bl	801398c <rcl_init_options_fini>
 8013b0c:	b118      	cbz	r0, 8013b16 <rcl_init_options_copy+0x142>
 8013b0e:	4606      	mov	r6, r0
 8013b10:	e76f      	b.n	80139f2 <rcl_init_options_copy+0x1e>
 8013b12:	260a      	movs	r6, #10
 8013b14:	e76d      	b.n	80139f2 <rcl_init_options_copy+0x1e>
 8013b16:	4630      	mov	r0, r6
 8013b18:	f7ff fbe6 	bl	80132e8 <rcl_convert_rmw_ret_to_rcl_ret>
 8013b1c:	4606      	mov	r6, r0
 8013b1e:	e768      	b.n	80139f2 <rcl_init_options_copy+0x1e>

08013b20 <rcl_get_localhost_only>:
 8013b20:	b510      	push	{r4, lr}
 8013b22:	b082      	sub	sp, #8
 8013b24:	2300      	movs	r3, #0
 8013b26:	9301      	str	r3, [sp, #4]
 8013b28:	b1b8      	cbz	r0, 8013b5a <rcl_get_localhost_only+0x3a>
 8013b2a:	4604      	mov	r4, r0
 8013b2c:	a901      	add	r1, sp, #4
 8013b2e:	480c      	ldr	r0, [pc, #48]	@ (8013b60 <rcl_get_localhost_only+0x40>)
 8013b30:	f002 f8ae 	bl	8015c90 <rcutils_get_env>
 8013b34:	b110      	cbz	r0, 8013b3c <rcl_get_localhost_only+0x1c>
 8013b36:	2001      	movs	r0, #1
 8013b38:	b002      	add	sp, #8
 8013b3a:	bd10      	pop	{r4, pc}
 8013b3c:	9b01      	ldr	r3, [sp, #4]
 8013b3e:	b113      	cbz	r3, 8013b46 <rcl_get_localhost_only+0x26>
 8013b40:	781a      	ldrb	r2, [r3, #0]
 8013b42:	2a31      	cmp	r2, #49	@ 0x31
 8013b44:	d004      	beq.n	8013b50 <rcl_get_localhost_only+0x30>
 8013b46:	2302      	movs	r3, #2
 8013b48:	2000      	movs	r0, #0
 8013b4a:	7023      	strb	r3, [r4, #0]
 8013b4c:	b002      	add	sp, #8
 8013b4e:	bd10      	pop	{r4, pc}
 8013b50:	785b      	ldrb	r3, [r3, #1]
 8013b52:	2b00      	cmp	r3, #0
 8013b54:	d1f7      	bne.n	8013b46 <rcl_get_localhost_only+0x26>
 8013b56:	2301      	movs	r3, #1
 8013b58:	e7f6      	b.n	8013b48 <rcl_get_localhost_only+0x28>
 8013b5a:	200b      	movs	r0, #11
 8013b5c:	b002      	add	sp, #8
 8013b5e:	bd10      	pop	{r4, pc}
 8013b60:	0801be60 	.word	0x0801be60

08013b64 <rcl_get_zero_initialized_node>:
 8013b64:	4a03      	ldr	r2, [pc, #12]	@ (8013b74 <rcl_get_zero_initialized_node+0x10>)
 8013b66:	4603      	mov	r3, r0
 8013b68:	e892 0003 	ldmia.w	r2, {r0, r1}
 8013b6c:	e883 0003 	stmia.w	r3, {r0, r1}
 8013b70:	4618      	mov	r0, r3
 8013b72:	4770      	bx	lr
 8013b74:	0801be80 	.word	0x0801be80

08013b78 <rcl_node_init>:
 8013b78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013b7c:	b09b      	sub	sp, #108	@ 0x6c
 8013b7e:	4604      	mov	r4, r0
 8013b80:	f8dd 8090 	ldr.w	r8, [sp, #144]	@ 0x90
 8013b84:	f04f 0c00 	mov.w	ip, #0
 8013b88:	a815      	add	r0, sp, #84	@ 0x54
 8013b8a:	460e      	mov	r6, r1
 8013b8c:	4615      	mov	r5, r2
 8013b8e:	461f      	mov	r7, r3
 8013b90:	f8cd c04c 	str.w	ip, [sp, #76]	@ 0x4c
 8013b94:	f005 fad8 	bl	8019148 <rcl_guard_condition_get_default_options>
 8013b98:	f1b8 0f00 	cmp.w	r8, #0
 8013b9c:	f000 80fd 	beq.w	8013d9a <rcl_node_init+0x222>
 8013ba0:	f108 0b04 	add.w	fp, r8, #4
 8013ba4:	4658      	mov	r0, fp
 8013ba6:	f7fa fa0f 	bl	800dfc8 <rcutils_allocator_is_valid>
 8013baa:	2800      	cmp	r0, #0
 8013bac:	f000 80f5 	beq.w	8013d9a <rcl_node_init+0x222>
 8013bb0:	2e00      	cmp	r6, #0
 8013bb2:	f000 80f2 	beq.w	8013d9a <rcl_node_init+0x222>
 8013bb6:	2d00      	cmp	r5, #0
 8013bb8:	f000 80ef 	beq.w	8013d9a <rcl_node_init+0x222>
 8013bbc:	2c00      	cmp	r4, #0
 8013bbe:	f000 80ec 	beq.w	8013d9a <rcl_node_init+0x222>
 8013bc2:	f8d4 9004 	ldr.w	r9, [r4, #4]
 8013bc6:	f1b9 0f00 	cmp.w	r9, #0
 8013bca:	f040 8112 	bne.w	8013df2 <rcl_node_init+0x27a>
 8013bce:	2f00      	cmp	r7, #0
 8013bd0:	f000 80e3 	beq.w	8013d9a <rcl_node_init+0x222>
 8013bd4:	4638      	mov	r0, r7
 8013bd6:	f7ff fba5 	bl	8013324 <rcl_context_is_valid>
 8013bda:	4682      	mov	sl, r0
 8013bdc:	2800      	cmp	r0, #0
 8013bde:	f000 80e2 	beq.w	8013da6 <rcl_node_init+0x22e>
 8013be2:	464a      	mov	r2, r9
 8013be4:	a914      	add	r1, sp, #80	@ 0x50
 8013be6:	4630      	mov	r0, r6
 8013be8:	f8cd 9050 	str.w	r9, [sp, #80]	@ 0x50
 8013bec:	f002 fa1c 	bl	8016028 <rmw_validate_node_name>
 8013bf0:	4681      	mov	r9, r0
 8013bf2:	2800      	cmp	r0, #0
 8013bf4:	f040 80d3 	bne.w	8013d9e <rcl_node_init+0x226>
 8013bf8:	9814      	ldr	r0, [sp, #80]	@ 0x50
 8013bfa:	2800      	cmp	r0, #0
 8013bfc:	f040 8105 	bne.w	8013e0a <rcl_node_init+0x292>
 8013c00:	4628      	mov	r0, r5
 8013c02:	f7ec faef 	bl	80001e4 <strlen>
 8013c06:	2800      	cmp	r0, #0
 8013c08:	f040 80d0 	bne.w	8013dac <rcl_node_init+0x234>
 8013c0c:	4d8e      	ldr	r5, [pc, #568]	@ (8013e48 <rcl_node_init+0x2d0>)
 8013c0e:	a914      	add	r1, sp, #80	@ 0x50
 8013c10:	2200      	movs	r2, #0
 8013c12:	4628      	mov	r0, r5
 8013c14:	f002 f9ea 	bl	8015fec <rmw_validate_namespace>
 8013c18:	4681      	mov	r9, r0
 8013c1a:	2800      	cmp	r0, #0
 8013c1c:	f040 80bf 	bne.w	8013d9e <rcl_node_init+0x226>
 8013c20:	4682      	mov	sl, r0
 8013c22:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8013c24:	2b00      	cmp	r3, #0
 8013c26:	f040 80f5 	bne.w	8013e14 <rcl_node_init+0x29c>
 8013c2a:	f8d8 2004 	ldr.w	r2, [r8, #4]
 8013c2e:	f8d8 1014 	ldr.w	r1, [r8, #20]
 8013c32:	9307      	str	r3, [sp, #28]
 8013c34:	2030      	movs	r0, #48	@ 0x30
 8013c36:	4790      	blx	r2
 8013c38:	4681      	mov	r9, r0
 8013c3a:	6060      	str	r0, [r4, #4]
 8013c3c:	2800      	cmp	r0, #0
 8013c3e:	f000 80de 	beq.w	8013dfe <rcl_node_init+0x286>
 8013c42:	9b07      	ldr	r3, [sp, #28]
 8013c44:	e9c0 3308 	strd	r3, r3, [r0, #32]
 8013c48:	e9c0 330a 	strd	r3, r3, [r0, #40]	@ 0x28
 8013c4c:	a80a      	add	r0, sp, #40	@ 0x28
 8013c4e:	f000 f92b 	bl	8013ea8 <rcl_node_get_default_options>
 8013c52:	f10d 0e28 	add.w	lr, sp, #40	@ 0x28
 8013c56:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8013c5a:	46cc      	mov	ip, r9
 8013c5c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8013c60:	e89e 0007 	ldmia.w	lr, {r0, r1, r2}
 8013c64:	e88c 0007 	stmia.w	ip, {r0, r1, r2}
 8013c68:	6861      	ldr	r1, [r4, #4]
 8013c6a:	6027      	str	r7, [r4, #0]
 8013c6c:	4640      	mov	r0, r8
 8013c6e:	f000 f937 	bl	8013ee0 <rcl_node_options_copy>
 8013c72:	2800      	cmp	r0, #0
 8013c74:	d167      	bne.n	8013d46 <rcl_node_init+0x1ce>
 8013c76:	4628      	mov	r0, r5
 8013c78:	f7ec fab4 	bl	80001e4 <strlen>
 8013c7c:	4428      	add	r0, r5
 8013c7e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8013c82:	f810 3c01 	ldrb.w	r3, [r0, #-1]
 8013c86:	2b2f      	cmp	r3, #47	@ 0x2f
 8013c88:	bf08      	it	eq
 8013c8a:	4970      	ldreq	r1, [pc, #448]	@ (8013e4c <rcl_node_init+0x2d4>)
 8013c8c:	f8db 3010 	ldr.w	r3, [fp, #16]
 8013c90:	bf18      	it	ne
 8013c92:	496f      	ldrne	r1, [pc, #444]	@ (8013e50 <rcl_node_init+0x2d8>)
 8013c94:	9604      	str	r6, [sp, #16]
 8013c96:	e9cd 1502 	strd	r1, r5, [sp, #8]
 8013c9a:	e9cd 3200 	strd	r3, r2, [sp]
 8013c9e:	e89b 000f 	ldmia.w	fp, {r0, r1, r2, r3}
 8013ca2:	f8d4 9004 	ldr.w	r9, [r4, #4]
 8013ca6:	f001 ffb9 	bl	8015c1c <rcutils_format_string_limit>
 8013caa:	f8c9 002c 	str.w	r0, [r9, #44]	@ 0x2c
 8013cae:	f8d4 9004 	ldr.w	r9, [r4, #4]
 8013cb2:	f8d9 3000 	ldr.w	r3, [r9]
 8013cb6:	9313      	str	r3, [sp, #76]	@ 0x4c
 8013cb8:	1c59      	adds	r1, r3, #1
 8013cba:	f000 80b7 	beq.w	8013e2c <rcl_node_init+0x2b4>
 8013cbe:	683a      	ldr	r2, [r7, #0]
 8013cc0:	f8c9 301c 	str.w	r3, [r9, #28]
 8013cc4:	6952      	ldr	r2, [r2, #20]
 8013cc6:	6821      	ldr	r1, [r4, #0]
 8013cc8:	f892 2030 	ldrb.w	r2, [r2, #48]	@ 0x30
 8013ccc:	6808      	ldr	r0, [r1, #0]
 8013cce:	f1a2 0201 	sub.w	r2, r2, #1
 8013cd2:	fab2 f282 	clz	r2, r2
 8013cd6:	0952      	lsrs	r2, r2, #5
 8013cd8:	9200      	str	r2, [sp, #0]
 8013cda:	4631      	mov	r1, r6
 8013cdc:	3028      	adds	r0, #40	@ 0x28
 8013cde:	462a      	mov	r2, r5
 8013ce0:	f002 fd9e 	bl	8016820 <rmw_create_node>
 8013ce4:	6863      	ldr	r3, [r4, #4]
 8013ce6:	f8c9 0020 	str.w	r0, [r9, #32]
 8013cea:	6a18      	ldr	r0, [r3, #32]
 8013cec:	b368      	cbz	r0, 8013d4a <rcl_node_init+0x1d2>
 8013cee:	f002 fe2b 	bl	8016948 <rmw_node_get_graph_guard_condition>
 8013cf2:	4681      	mov	r9, r0
 8013cf4:	b338      	cbz	r0, 8013d46 <rcl_node_init+0x1ce>
 8013cf6:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8013cfa:	f8d8 1014 	ldr.w	r1, [r8, #20]
 8013cfe:	6866      	ldr	r6, [r4, #4]
 8013d00:	2008      	movs	r0, #8
 8013d02:	4798      	blx	r3
 8013d04:	6863      	ldr	r3, [r4, #4]
 8013d06:	6270      	str	r0, [r6, #36]	@ 0x24
 8013d08:	6a5e      	ldr	r6, [r3, #36]	@ 0x24
 8013d0a:	b1f6      	cbz	r6, 8013d4a <rcl_node_init+0x1d2>
 8013d0c:	a808      	add	r0, sp, #32
 8013d0e:	f005 f939 	bl	8018f84 <rcl_get_zero_initialized_guard_condition>
 8013d12:	a808      	add	r0, sp, #32
 8013d14:	c803      	ldmia	r0, {r0, r1}
 8013d16:	e886 0003 	stmia.w	r6, {r0, r1}
 8013d1a:	e8bb 000f 	ldmia.w	fp!, {r0, r1, r2, r3}
 8013d1e:	ae15      	add	r6, sp, #84	@ 0x54
 8013d20:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8013d22:	f8db 3000 	ldr.w	r3, [fp]
 8013d26:	6033      	str	r3, [r6, #0]
 8013d28:	ab1a      	add	r3, sp, #104	@ 0x68
 8013d2a:	e913 000f 	ldmdb	r3, {r0, r1, r2, r3}
 8013d2e:	6866      	ldr	r6, [r4, #4]
 8013d30:	6a76      	ldr	r6, [r6, #36]	@ 0x24
 8013d32:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 8013d36:	4649      	mov	r1, r9
 8013d38:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8013d3a:	4630      	mov	r0, r6
 8013d3c:	463a      	mov	r2, r7
 8013d3e:	f005 f985 	bl	801904c <rcl_guard_condition_init_from_rmw>
 8013d42:	4681      	mov	r9, r0
 8013d44:	b328      	cbz	r0, 8013d92 <rcl_node_init+0x21a>
 8013d46:	6863      	ldr	r3, [r4, #4]
 8013d48:	b1f3      	cbz	r3, 8013d88 <rcl_node_init+0x210>
 8013d4a:	6ad8      	ldr	r0, [r3, #44]	@ 0x2c
 8013d4c:	b128      	cbz	r0, 8013d5a <rcl_node_init+0x1e2>
 8013d4e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8013d52:	f8d8 1014 	ldr.w	r1, [r8, #20]
 8013d56:	4798      	blx	r3
 8013d58:	6863      	ldr	r3, [r4, #4]
 8013d5a:	6a18      	ldr	r0, [r3, #32]
 8013d5c:	b110      	cbz	r0, 8013d64 <rcl_node_init+0x1ec>
 8013d5e:	f002 fd77 	bl	8016850 <rmw_destroy_node>
 8013d62:	6863      	ldr	r3, [r4, #4]
 8013d64:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 8013d66:	b148      	cbz	r0, 8013d7c <rcl_node_init+0x204>
 8013d68:	f005 f9c8 	bl	80190fc <rcl_guard_condition_fini>
 8013d6c:	6862      	ldr	r2, [r4, #4]
 8013d6e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8013d72:	6a50      	ldr	r0, [r2, #36]	@ 0x24
 8013d74:	f8d8 1014 	ldr.w	r1, [r8, #20]
 8013d78:	4798      	blx	r3
 8013d7a:	6863      	ldr	r3, [r4, #4]
 8013d7c:	f8d8 2008 	ldr.w	r2, [r8, #8]
 8013d80:	f8d8 1014 	ldr.w	r1, [r8, #20]
 8013d84:	4618      	mov	r0, r3
 8013d86:	4790      	blx	r2
 8013d88:	2300      	movs	r3, #0
 8013d8a:	e9c4 3300 	strd	r3, r3, [r4]
 8013d8e:	f04f 0901 	mov.w	r9, #1
 8013d92:	f1ba 0f00 	cmp.w	sl, #0
 8013d96:	d125      	bne.n	8013de4 <rcl_node_init+0x26c>
 8013d98:	e001      	b.n	8013d9e <rcl_node_init+0x226>
 8013d9a:	f04f 090b 	mov.w	r9, #11
 8013d9e:	4648      	mov	r0, r9
 8013da0:	b01b      	add	sp, #108	@ 0x6c
 8013da2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013da6:	f04f 0965 	mov.w	r9, #101	@ 0x65
 8013daa:	e7f8      	b.n	8013d9e <rcl_node_init+0x226>
 8013dac:	782b      	ldrb	r3, [r5, #0]
 8013dae:	2b2f      	cmp	r3, #47	@ 0x2f
 8013db0:	f43f af2d 	beq.w	8013c0e <rcl_node_init+0x96>
 8013db4:	4927      	ldr	r1, [pc, #156]	@ (8013e54 <rcl_node_init+0x2dc>)
 8013db6:	f8db 3010 	ldr.w	r3, [fp, #16]
 8013dba:	9300      	str	r3, [sp, #0]
 8013dbc:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8013dc0:	e9cd 2101 	strd	r2, r1, [sp, #4]
 8013dc4:	9503      	str	r5, [sp, #12]
 8013dc6:	e89b 000f 	ldmia.w	fp, {r0, r1, r2, r3}
 8013dca:	f001 ff27 	bl	8015c1c <rcutils_format_string_limit>
 8013dce:	4605      	mov	r5, r0
 8013dd0:	b348      	cbz	r0, 8013e26 <rcl_node_init+0x2ae>
 8013dd2:	2200      	movs	r2, #0
 8013dd4:	a914      	add	r1, sp, #80	@ 0x50
 8013dd6:	9214      	str	r2, [sp, #80]	@ 0x50
 8013dd8:	f002 f908 	bl	8015fec <rmw_validate_namespace>
 8013ddc:	4681      	mov	r9, r0
 8013dde:	2800      	cmp	r0, #0
 8013de0:	f43f af1f 	beq.w	8013c22 <rcl_node_init+0xaa>
 8013de4:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8013de8:	f8d8 1014 	ldr.w	r1, [r8, #20]
 8013dec:	4628      	mov	r0, r5
 8013dee:	4798      	blx	r3
 8013df0:	e7d5      	b.n	8013d9e <rcl_node_init+0x226>
 8013df2:	f04f 0964 	mov.w	r9, #100	@ 0x64
 8013df6:	4648      	mov	r0, r9
 8013df8:	b01b      	add	sp, #108	@ 0x6c
 8013dfa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013dfe:	f04f 090a 	mov.w	r9, #10
 8013e02:	f1ba 0f00 	cmp.w	sl, #0
 8013e06:	d1ed      	bne.n	8013de4 <rcl_node_init+0x26c>
 8013e08:	e7c9      	b.n	8013d9e <rcl_node_init+0x226>
 8013e0a:	f002 f95f 	bl	80160cc <rmw_node_name_validation_result_string>
 8013e0e:	f04f 09c9 	mov.w	r9, #201	@ 0xc9
 8013e12:	e7c4      	b.n	8013d9e <rcl_node_init+0x226>
 8013e14:	4618      	mov	r0, r3
 8013e16:	f002 f8fb 	bl	8016010 <rmw_namespace_validation_result_string>
 8013e1a:	f04f 09ca 	mov.w	r9, #202	@ 0xca
 8013e1e:	f1ba 0f00 	cmp.w	sl, #0
 8013e22:	d1df      	bne.n	8013de4 <rcl_node_init+0x26c>
 8013e24:	e7bb      	b.n	8013d9e <rcl_node_init+0x226>
 8013e26:	f04f 090a 	mov.w	r9, #10
 8013e2a:	e7b8      	b.n	8013d9e <rcl_node_init+0x226>
 8013e2c:	a813      	add	r0, sp, #76	@ 0x4c
 8013e2e:	f005 f875 	bl	8018f1c <rcl_get_default_domain_id>
 8013e32:	2800      	cmp	r0, #0
 8013e34:	d187      	bne.n	8013d46 <rcl_node_init+0x1ce>
 8013e36:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8013e38:	f8d4 9004 	ldr.w	r9, [r4, #4]
 8013e3c:	1c5a      	adds	r2, r3, #1
 8013e3e:	bf04      	itt	eq
 8013e40:	9013      	streq	r0, [sp, #76]	@ 0x4c
 8013e42:	4603      	moveq	r3, r0
 8013e44:	e73b      	b.n	8013cbe <rcl_node_init+0x146>
 8013e46:	bf00      	nop
 8013e48:	0801be78 	.word	0x0801be78
 8013e4c:	0801bde8 	.word	0x0801bde8
 8013e50:	0801be3c 	.word	0x0801be3c
 8013e54:	0801be7c 	.word	0x0801be7c

08013e58 <rcl_node_is_valid>:
 8013e58:	b130      	cbz	r0, 8013e68 <rcl_node_is_valid+0x10>
 8013e5a:	6843      	ldr	r3, [r0, #4]
 8013e5c:	b123      	cbz	r3, 8013e68 <rcl_node_is_valid+0x10>
 8013e5e:	6a1b      	ldr	r3, [r3, #32]
 8013e60:	b113      	cbz	r3, 8013e68 <rcl_node_is_valid+0x10>
 8013e62:	6800      	ldr	r0, [r0, #0]
 8013e64:	f7ff ba5e 	b.w	8013324 <rcl_context_is_valid>
 8013e68:	2000      	movs	r0, #0
 8013e6a:	4770      	bx	lr

08013e6c <rcl_node_get_name>:
 8013e6c:	b120      	cbz	r0, 8013e78 <rcl_node_get_name+0xc>
 8013e6e:	6840      	ldr	r0, [r0, #4]
 8013e70:	b110      	cbz	r0, 8013e78 <rcl_node_get_name+0xc>
 8013e72:	6a00      	ldr	r0, [r0, #32]
 8013e74:	b100      	cbz	r0, 8013e78 <rcl_node_get_name+0xc>
 8013e76:	6880      	ldr	r0, [r0, #8]
 8013e78:	4770      	bx	lr
 8013e7a:	bf00      	nop

08013e7c <rcl_node_get_namespace>:
 8013e7c:	b120      	cbz	r0, 8013e88 <rcl_node_get_namespace+0xc>
 8013e7e:	6840      	ldr	r0, [r0, #4]
 8013e80:	b110      	cbz	r0, 8013e88 <rcl_node_get_namespace+0xc>
 8013e82:	6a00      	ldr	r0, [r0, #32]
 8013e84:	b100      	cbz	r0, 8013e88 <rcl_node_get_namespace+0xc>
 8013e86:	68c0      	ldr	r0, [r0, #12]
 8013e88:	4770      	bx	lr
 8013e8a:	bf00      	nop

08013e8c <rcl_node_get_options>:
 8013e8c:	b128      	cbz	r0, 8013e9a <rcl_node_get_options+0xe>
 8013e8e:	6840      	ldr	r0, [r0, #4]
 8013e90:	b118      	cbz	r0, 8013e9a <rcl_node_get_options+0xe>
 8013e92:	6a03      	ldr	r3, [r0, #32]
 8013e94:	2b00      	cmp	r3, #0
 8013e96:	bf08      	it	eq
 8013e98:	2000      	moveq	r0, #0
 8013e9a:	4770      	bx	lr

08013e9c <rcl_node_get_rmw_handle>:
 8013e9c:	b110      	cbz	r0, 8013ea4 <rcl_node_get_rmw_handle+0x8>
 8013e9e:	6840      	ldr	r0, [r0, #4]
 8013ea0:	b100      	cbz	r0, 8013ea4 <rcl_node_get_rmw_handle+0x8>
 8013ea2:	6a00      	ldr	r0, [r0, #32]
 8013ea4:	4770      	bx	lr
 8013ea6:	bf00      	nop

08013ea8 <rcl_node_get_default_options>:
 8013ea8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8013eaa:	b087      	sub	sp, #28
 8013eac:	4607      	mov	r7, r0
 8013eae:	466d      	mov	r5, sp
 8013eb0:	4668      	mov	r0, sp
 8013eb2:	f7fa f87b 	bl	800dfac <rcutils_get_default_allocator>
 8013eb6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8013eb8:	4c08      	ldr	r4, [pc, #32]	@ (8013edc <rcl_node_get_default_options+0x34>)
 8013eba:	f8d5 c000 	ldr.w	ip, [r5]
 8013ebe:	1d26      	adds	r6, r4, #4
 8013ec0:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8013ec2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8013ec4:	463d      	mov	r5, r7
 8013ec6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8013ec8:	f8c6 c000 	str.w	ip, [r6]
 8013ecc:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8013ed0:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 8013ed4:	4638      	mov	r0, r7
 8013ed6:	b007      	add	sp, #28
 8013ed8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013eda:	bf00      	nop
 8013edc:	200000b4 	.word	0x200000b4

08013ee0 <rcl_node_options_copy>:
 8013ee0:	b1c8      	cbz	r0, 8013f16 <rcl_node_options_copy+0x36>
 8013ee2:	b4f0      	push	{r4, r5, r6, r7}
 8013ee4:	460f      	mov	r7, r1
 8013ee6:	b199      	cbz	r1, 8013f10 <rcl_node_options_copy+0x30>
 8013ee8:	4288      	cmp	r0, r1
 8013eea:	4606      	mov	r6, r0
 8013eec:	d010      	beq.n	8013f10 <rcl_node_options_copy+0x30>
 8013eee:	4605      	mov	r5, r0
 8013ef0:	460c      	mov	r4, r1
 8013ef2:	f855 3b04 	ldr.w	r3, [r5], #4
 8013ef6:	f844 3b04 	str.w	r3, [r4], #4
 8013efa:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8013efc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8013efe:	7e32      	ldrb	r2, [r6, #24]
 8013f00:	6829      	ldr	r1, [r5, #0]
 8013f02:	7e73      	ldrb	r3, [r6, #25]
 8013f04:	6021      	str	r1, [r4, #0]
 8013f06:	2000      	movs	r0, #0
 8013f08:	763a      	strb	r2, [r7, #24]
 8013f0a:	767b      	strb	r3, [r7, #25]
 8013f0c:	bcf0      	pop	{r4, r5, r6, r7}
 8013f0e:	4770      	bx	lr
 8013f10:	200b      	movs	r0, #11
 8013f12:	bcf0      	pop	{r4, r5, r6, r7}
 8013f14:	4770      	bx	lr
 8013f16:	200b      	movs	r0, #11
 8013f18:	4770      	bx	lr
 8013f1a:	bf00      	nop

08013f1c <exact_match_lookup>:
 8013f1c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8013f1e:	f102 0708 	add.w	r7, r2, #8
 8013f22:	460b      	mov	r3, r1
 8013f24:	4614      	mov	r4, r2
 8013f26:	4606      	mov	r6, r0
 8013f28:	e897 0007 	ldmia.w	r7, {r0, r1, r2}
 8013f2c:	b085      	sub	sp, #20
 8013f2e:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 8013f32:	4618      	mov	r0, r3
 8013f34:	4918      	ldr	r1, [pc, #96]	@ (8013f98 <exact_match_lookup+0x7c>)
 8013f36:	e894 000c 	ldmia.w	r4, {r2, r3}
 8013f3a:	f001 fe61 	bl	8015c00 <rcutils_join_path>
 8013f3e:	7833      	ldrb	r3, [r6, #0]
 8013f40:	2b2f      	cmp	r3, #47	@ 0x2f
 8013f42:	4605      	mov	r5, r0
 8013f44:	d021      	beq.n	8013f8a <exact_match_lookup+0x6e>
 8013f46:	e9d4 0103 	ldrd	r0, r1, [r4, #12]
 8013f4a:	e88d 0003 	stmia.w	sp, {r0, r1}
 8013f4e:	1c70      	adds	r0, r6, #1
 8013f50:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 8013f54:	f001 fe5a 	bl	8015c0c <rcutils_to_native_path>
 8013f58:	4606      	mov	r6, r0
 8013f5a:	e897 0007 	ldmia.w	r7, {r0, r1, r2}
 8013f5e:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 8013f62:	4631      	mov	r1, r6
 8013f64:	e894 000c 	ldmia.w	r4, {r2, r3}
 8013f68:	4628      	mov	r0, r5
 8013f6a:	f001 fe49 	bl	8015c00 <rcutils_join_path>
 8013f6e:	6862      	ldr	r2, [r4, #4]
 8013f70:	6921      	ldr	r1, [r4, #16]
 8013f72:	4603      	mov	r3, r0
 8013f74:	4630      	mov	r0, r6
 8013f76:	461e      	mov	r6, r3
 8013f78:	4790      	blx	r2
 8013f7a:	4628      	mov	r0, r5
 8013f7c:	6863      	ldr	r3, [r4, #4]
 8013f7e:	6921      	ldr	r1, [r4, #16]
 8013f80:	4798      	blx	r3
 8013f82:	4635      	mov	r5, r6
 8013f84:	4628      	mov	r0, r5
 8013f86:	b005      	add	sp, #20
 8013f88:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013f8a:	7873      	ldrb	r3, [r6, #1]
 8013f8c:	2b00      	cmp	r3, #0
 8013f8e:	d1da      	bne.n	8013f46 <exact_match_lookup+0x2a>
 8013f90:	4628      	mov	r0, r5
 8013f92:	b005      	add	sp, #20
 8013f94:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013f96:	bf00      	nop
 8013f98:	0801bec4 	.word	0x0801bec4

08013f9c <rcl_get_secure_root>:
 8013f9c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8013fa0:	b085      	sub	sp, #20
 8013fa2:	b168      	cbz	r0, 8013fc0 <rcl_get_secure_root+0x24>
 8013fa4:	4607      	mov	r7, r0
 8013fa6:	4608      	mov	r0, r1
 8013fa8:	460c      	mov	r4, r1
 8013faa:	f7fa f80d 	bl	800dfc8 <rcutils_allocator_is_valid>
 8013fae:	b138      	cbz	r0, 8013fc0 <rcl_get_secure_root+0x24>
 8013fb0:	2300      	movs	r3, #0
 8013fb2:	482d      	ldr	r0, [pc, #180]	@ (8014068 <rcl_get_secure_root+0xcc>)
 8013fb4:	9303      	str	r3, [sp, #12]
 8013fb6:	a903      	add	r1, sp, #12
 8013fb8:	f001 fe6a 	bl	8015c90 <rcutils_get_env>
 8013fbc:	4605      	mov	r5, r0
 8013fbe:	b120      	cbz	r0, 8013fca <rcl_get_secure_root+0x2e>
 8013fc0:	2500      	movs	r5, #0
 8013fc2:	4628      	mov	r0, r5
 8013fc4:	b005      	add	sp, #20
 8013fc6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8013fca:	9b03      	ldr	r3, [sp, #12]
 8013fcc:	781a      	ldrb	r2, [r3, #0]
 8013fce:	2a00      	cmp	r2, #0
 8013fd0:	d0f6      	beq.n	8013fc0 <rcl_get_secure_root+0x24>
 8013fd2:	f104 090c 	add.w	r9, r4, #12
 8013fd6:	e899 0003 	ldmia.w	r9, {r0, r1}
 8013fda:	e88d 0003 	stmia.w	sp, {r0, r1}
 8013fde:	4618      	mov	r0, r3
 8013fe0:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 8013fe4:	f001 ff44 	bl	8015e70 <rcutils_strdup>
 8013fe8:	4680      	mov	r8, r0
 8013fea:	2800      	cmp	r0, #0
 8013fec:	d0e8      	beq.n	8013fc0 <rcl_get_secure_root+0x24>
 8013fee:	481f      	ldr	r0, [pc, #124]	@ (801406c <rcl_get_secure_root+0xd0>)
 8013ff0:	9503      	str	r5, [sp, #12]
 8013ff2:	a903      	add	r1, sp, #12
 8013ff4:	f001 fe4c 	bl	8015c90 <rcutils_get_env>
 8013ff8:	b160      	cbz	r0, 8014014 <rcl_get_secure_root+0x78>
 8013ffa:	2600      	movs	r6, #0
 8013ffc:	6863      	ldr	r3, [r4, #4]
 8013ffe:	6921      	ldr	r1, [r4, #16]
 8014000:	4630      	mov	r0, r6
 8014002:	4798      	blx	r3
 8014004:	4640      	mov	r0, r8
 8014006:	6863      	ldr	r3, [r4, #4]
 8014008:	6921      	ldr	r1, [r4, #16]
 801400a:	4798      	blx	r3
 801400c:	4628      	mov	r0, r5
 801400e:	b005      	add	sp, #20
 8014010:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8014014:	9b03      	ldr	r3, [sp, #12]
 8014016:	781e      	ldrb	r6, [r3, #0]
 8014018:	b1f6      	cbz	r6, 8014058 <rcl_get_secure_root+0xbc>
 801401a:	e899 0003 	ldmia.w	r9, {r0, r1}
 801401e:	e88d 0003 	stmia.w	sp, {r0, r1}
 8014022:	4618      	mov	r0, r3
 8014024:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 8014028:	f001 ff22 	bl	8015e70 <rcutils_strdup>
 801402c:	4606      	mov	r6, r0
 801402e:	2800      	cmp	r0, #0
 8014030:	d0e3      	beq.n	8013ffa <rcl_get_secure_root+0x5e>
 8014032:	4622      	mov	r2, r4
 8014034:	4641      	mov	r1, r8
 8014036:	f7ff ff71 	bl	8013f1c <exact_match_lookup>
 801403a:	4605      	mov	r5, r0
 801403c:	2d00      	cmp	r5, #0
 801403e:	d0dd      	beq.n	8013ffc <rcl_get_secure_root+0x60>
 8014040:	4628      	mov	r0, r5
 8014042:	f001 fddb 	bl	8015bfc <rcutils_is_directory>
 8014046:	4607      	mov	r7, r0
 8014048:	2800      	cmp	r0, #0
 801404a:	d1d7      	bne.n	8013ffc <rcl_get_secure_root+0x60>
 801404c:	4628      	mov	r0, r5
 801404e:	6863      	ldr	r3, [r4, #4]
 8014050:	6921      	ldr	r1, [r4, #16]
 8014052:	4798      	blx	r3
 8014054:	463d      	mov	r5, r7
 8014056:	e7d1      	b.n	8013ffc <rcl_get_secure_root+0x60>
 8014058:	4638      	mov	r0, r7
 801405a:	4622      	mov	r2, r4
 801405c:	4641      	mov	r1, r8
 801405e:	f7ff ff5d 	bl	8013f1c <exact_match_lookup>
 8014062:	4605      	mov	r5, r0
 8014064:	e7ea      	b.n	801403c <rcl_get_secure_root+0xa0>
 8014066:	bf00      	nop
 8014068:	0801bed0 	.word	0x0801bed0
 801406c:	0801bee8 	.word	0x0801bee8

08014070 <rcl_get_security_options_from_environment>:
 8014070:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014074:	b082      	sub	sp, #8
 8014076:	4607      	mov	r7, r0
 8014078:	4688      	mov	r8, r1
 801407a:	2400      	movs	r4, #0
 801407c:	481d      	ldr	r0, [pc, #116]	@ (80140f4 <rcl_get_security_options_from_environment+0x84>)
 801407e:	9401      	str	r4, [sp, #4]
 8014080:	a901      	add	r1, sp, #4
 8014082:	4616      	mov	r6, r2
 8014084:	f001 fe04 	bl	8015c90 <rcutils_get_env>
 8014088:	b120      	cbz	r0, 8014094 <rcl_get_security_options_from_environment+0x24>
 801408a:	2501      	movs	r5, #1
 801408c:	4628      	mov	r0, r5
 801408e:	b002      	add	sp, #8
 8014090:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014094:	4918      	ldr	r1, [pc, #96]	@ (80140f8 <rcl_get_security_options_from_environment+0x88>)
 8014096:	4604      	mov	r4, r0
 8014098:	9801      	ldr	r0, [sp, #4]
 801409a:	f7ec f899 	bl	80001d0 <strcmp>
 801409e:	4605      	mov	r5, r0
 80140a0:	b9c8      	cbnz	r0, 80140d6 <rcl_get_security_options_from_environment+0x66>
 80140a2:	9001      	str	r0, [sp, #4]
 80140a4:	b1ee      	cbz	r6, 80140e2 <rcl_get_security_options_from_environment+0x72>
 80140a6:	4815      	ldr	r0, [pc, #84]	@ (80140fc <rcl_get_security_options_from_environment+0x8c>)
 80140a8:	a901      	add	r1, sp, #4
 80140aa:	f001 fdf1 	bl	8015c90 <rcutils_get_env>
 80140ae:	2800      	cmp	r0, #0
 80140b0:	d1eb      	bne.n	801408a <rcl_get_security_options_from_environment+0x1a>
 80140b2:	4913      	ldr	r1, [pc, #76]	@ (8014100 <rcl_get_security_options_from_environment+0x90>)
 80140b4:	9801      	ldr	r0, [sp, #4]
 80140b6:	f7ec f88b 	bl	80001d0 <strcmp>
 80140ba:	fab0 f080 	clz	r0, r0
 80140be:	0940      	lsrs	r0, r0, #5
 80140c0:	7030      	strb	r0, [r6, #0]
 80140c2:	4641      	mov	r1, r8
 80140c4:	4638      	mov	r0, r7
 80140c6:	f7ff ff69 	bl	8013f9c <rcl_get_secure_root>
 80140ca:	b160      	cbz	r0, 80140e6 <rcl_get_security_options_from_environment+0x76>
 80140cc:	6070      	str	r0, [r6, #4]
 80140ce:	4628      	mov	r0, r5
 80140d0:	b002      	add	sp, #8
 80140d2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80140d6:	4625      	mov	r5, r4
 80140d8:	4628      	mov	r0, r5
 80140da:	7034      	strb	r4, [r6, #0]
 80140dc:	b002      	add	sp, #8
 80140de:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80140e2:	250b      	movs	r5, #11
 80140e4:	e7d2      	b.n	801408c <rcl_get_security_options_from_environment+0x1c>
 80140e6:	7835      	ldrb	r5, [r6, #0]
 80140e8:	f1a5 0501 	sub.w	r5, r5, #1
 80140ec:	fab5 f585 	clz	r5, r5
 80140f0:	096d      	lsrs	r5, r5, #5
 80140f2:	e7cb      	b.n	801408c <rcl_get_security_options_from_environment+0x1c>
 80140f4:	0801be88 	.word	0x0801be88
 80140f8:	0801be9c 	.word	0x0801be9c
 80140fc:	0801bea4 	.word	0x0801bea4
 8014100:	0801bebc 	.word	0x0801bebc

08014104 <rcl_service_get_rmw_handle>:
 8014104:	b110      	cbz	r0, 801410c <rcl_service_get_rmw_handle+0x8>
 8014106:	6800      	ldr	r0, [r0, #0]
 8014108:	b100      	cbz	r0, 801410c <rcl_service_get_rmw_handle+0x8>
 801410a:	6e80      	ldr	r0, [r0, #104]	@ 0x68
 801410c:	4770      	bx	lr
 801410e:	bf00      	nop

08014110 <rcl_take_request>:
 8014110:	b5f0      	push	{r4, r5, r6, r7, lr}
 8014112:	460e      	mov	r6, r1
 8014114:	460c      	mov	r4, r1
 8014116:	4607      	mov	r7, r0
 8014118:	4694      	mov	ip, r2
 801411a:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 801411c:	b08d      	sub	sp, #52	@ 0x34
 801411e:	ad06      	add	r5, sp, #24
 8014120:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8014122:	e896 0003 	ldmia.w	r6, {r0, r1}
 8014126:	e885 0003 	stmia.w	r5, {r0, r1}
 801412a:	b1e7      	cbz	r7, 8014166 <rcl_take_request+0x56>
 801412c:	683b      	ldr	r3, [r7, #0]
 801412e:	b1d3      	cbz	r3, 8014166 <rcl_take_request+0x56>
 8014130:	6e98      	ldr	r0, [r3, #104]	@ 0x68
 8014132:	b1c0      	cbz	r0, 8014166 <rcl_take_request+0x56>
 8014134:	4662      	mov	r2, ip
 8014136:	b30a      	cbz	r2, 801417c <rcl_take_request+0x6c>
 8014138:	2500      	movs	r5, #0
 801413a:	f10d 0307 	add.w	r3, sp, #7
 801413e:	a902      	add	r1, sp, #8
 8014140:	f88d 5007 	strb.w	r5, [sp, #7]
 8014144:	f002 fc06 	bl	8016954 <rmw_take_request>
 8014148:	4606      	mov	r6, r0
 801414a:	b178      	cbz	r0, 801416c <rcl_take_request+0x5c>
 801414c:	280a      	cmp	r0, #10
 801414e:	bf18      	it	ne
 8014150:	2601      	movne	r6, #1
 8014152:	ad06      	add	r5, sp, #24
 8014154:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8014156:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8014158:	e895 0003 	ldmia.w	r5, {r0, r1}
 801415c:	e884 0003 	stmia.w	r4, {r0, r1}
 8014160:	4630      	mov	r0, r6
 8014162:	b00d      	add	sp, #52	@ 0x34
 8014164:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014166:	f44f 7616 	mov.w	r6, #600	@ 0x258
 801416a:	e7f2      	b.n	8014152 <rcl_take_request+0x42>
 801416c:	f89d 2007 	ldrb.w	r2, [sp, #7]
 8014170:	f240 2359 	movw	r3, #601	@ 0x259
 8014174:	2a00      	cmp	r2, #0
 8014176:	bf08      	it	eq
 8014178:	461e      	moveq	r6, r3
 801417a:	e7ea      	b.n	8014152 <rcl_take_request+0x42>
 801417c:	260b      	movs	r6, #11
 801417e:	e7e8      	b.n	8014152 <rcl_take_request+0x42>

08014180 <rcl_send_response>:
 8014180:	b160      	cbz	r0, 801419c <rcl_send_response+0x1c>
 8014182:	6800      	ldr	r0, [r0, #0]
 8014184:	b150      	cbz	r0, 801419c <rcl_send_response+0x1c>
 8014186:	6e80      	ldr	r0, [r0, #104]	@ 0x68
 8014188:	b140      	cbz	r0, 801419c <rcl_send_response+0x1c>
 801418a:	b151      	cbz	r1, 80141a2 <rcl_send_response+0x22>
 801418c:	b510      	push	{r4, lr}
 801418e:	b152      	cbz	r2, 80141a6 <rcl_send_response+0x26>
 8014190:	f002 fc3e 	bl	8016a10 <rmw_send_response>
 8014194:	3800      	subs	r0, #0
 8014196:	bf18      	it	ne
 8014198:	2001      	movne	r0, #1
 801419a:	bd10      	pop	{r4, pc}
 801419c:	f44f 7016 	mov.w	r0, #600	@ 0x258
 80141a0:	4770      	bx	lr
 80141a2:	200b      	movs	r0, #11
 80141a4:	4770      	bx	lr
 80141a6:	200b      	movs	r0, #11
 80141a8:	bd10      	pop	{r4, pc}
 80141aa:	bf00      	nop

080141ac <rcl_get_zero_initialized_subscription>:
 80141ac:	4b01      	ldr	r3, [pc, #4]	@ (80141b4 <rcl_get_zero_initialized_subscription+0x8>)
 80141ae:	6818      	ldr	r0, [r3, #0]
 80141b0:	4770      	bx	lr
 80141b2:	bf00      	nop
 80141b4:	0801bf08 	.word	0x0801bf08

080141b8 <rcl_subscription_init>:
 80141b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80141bc:	b091      	sub	sp, #68	@ 0x44
 80141be:	9f1a      	ldr	r7, [sp, #104]	@ 0x68
 80141c0:	b1d7      	cbz	r7, 80141f8 <rcl_subscription_init+0x40>
 80141c2:	f107 0950 	add.w	r9, r7, #80	@ 0x50
 80141c6:	4604      	mov	r4, r0
 80141c8:	4648      	mov	r0, r9
 80141ca:	4688      	mov	r8, r1
 80141cc:	4616      	mov	r6, r2
 80141ce:	461d      	mov	r5, r3
 80141d0:	f7f9 fefa 	bl	800dfc8 <rcutils_allocator_is_valid>
 80141d4:	b180      	cbz	r0, 80141f8 <rcl_subscription_init+0x40>
 80141d6:	b17c      	cbz	r4, 80141f8 <rcl_subscription_init+0x40>
 80141d8:	4640      	mov	r0, r8
 80141da:	f7ff fe3d 	bl	8013e58 <rcl_node_is_valid>
 80141de:	b380      	cbz	r0, 8014242 <rcl_subscription_init+0x8a>
 80141e0:	b156      	cbz	r6, 80141f8 <rcl_subscription_init+0x40>
 80141e2:	b14d      	cbz	r5, 80141f8 <rcl_subscription_init+0x40>
 80141e4:	f8d4 a000 	ldr.w	sl, [r4]
 80141e8:	f1ba 0f00 	cmp.w	sl, #0
 80141ec:	d009      	beq.n	8014202 <rcl_subscription_init+0x4a>
 80141ee:	2564      	movs	r5, #100	@ 0x64
 80141f0:	4628      	mov	r0, r5
 80141f2:	b011      	add	sp, #68	@ 0x44
 80141f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80141f8:	250b      	movs	r5, #11
 80141fa:	4628      	mov	r0, r5
 80141fc:	b011      	add	sp, #68	@ 0x44
 80141fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014202:	46ce      	mov	lr, r9
 8014204:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8014208:	f10d 0c2c 	add.w	ip, sp, #44	@ 0x2c
 801420c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8014210:	f8de 3000 	ldr.w	r3, [lr]
 8014214:	f8cc 3000 	str.w	r3, [ip]
 8014218:	f7f9 ff12 	bl	800e040 <rcutils_get_zero_initialized_string_map>
 801421c:	ab10      	add	r3, sp, #64	@ 0x40
 801421e:	4684      	mov	ip, r0
 8014220:	e913 0007 	ldmdb	r3, {r0, r1, r2}
 8014224:	f8cd c020 	str.w	ip, [sp, #32]
 8014228:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 801422c:	e9dd 230b 	ldrd	r2, r3, [sp, #44]	@ 0x2c
 8014230:	4651      	mov	r1, sl
 8014232:	a808      	add	r0, sp, #32
 8014234:	f7f9 ff7e 	bl	800e134 <rcutils_string_map_init>
 8014238:	b140      	cbz	r0, 801424c <rcl_subscription_init+0x94>
 801423a:	280a      	cmp	r0, #10
 801423c:	d011      	beq.n	8014262 <rcl_subscription_init+0xaa>
 801423e:	2501      	movs	r5, #1
 8014240:	e7db      	b.n	80141fa <rcl_subscription_init+0x42>
 8014242:	25c8      	movs	r5, #200	@ 0xc8
 8014244:	4628      	mov	r0, r5
 8014246:	b011      	add	sp, #68	@ 0x44
 8014248:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801424c:	a808      	add	r0, sp, #32
 801424e:	f7ff fa39 	bl	80136c4 <rcl_get_default_topic_name_substitutions>
 8014252:	4682      	mov	sl, r0
 8014254:	b138      	cbz	r0, 8014266 <rcl_subscription_init+0xae>
 8014256:	a808      	add	r0, sp, #32
 8014258:	f7f9 ffac 	bl	800e1b4 <rcutils_string_map_fini>
 801425c:	f1ba 0f0a 	cmp.w	sl, #10
 8014260:	d1ed      	bne.n	801423e <rcl_subscription_init+0x86>
 8014262:	250a      	movs	r5, #10
 8014264:	e7c9      	b.n	80141fa <rcl_subscription_init+0x42>
 8014266:	4640      	mov	r0, r8
 8014268:	f8cd a024 	str.w	sl, [sp, #36]	@ 0x24
 801426c:	f7ff fdfe 	bl	8013e6c <rcl_node_get_name>
 8014270:	4682      	mov	sl, r0
 8014272:	4640      	mov	r0, r8
 8014274:	f7ff fe02 	bl	8013e7c <rcl_node_get_namespace>
 8014278:	4686      	mov	lr, r0
 801427a:	e8b9 000f 	ldmia.w	r9!, {r0, r1, r2, r3}
 801427e:	f10d 0b24 	add.w	fp, sp, #36	@ 0x24
 8014282:	46ec      	mov	ip, sp
 8014284:	f8cd b014 	str.w	fp, [sp, #20]
 8014288:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801428c:	f8d9 3000 	ldr.w	r3, [r9]
 8014290:	f8cc 3000 	str.w	r3, [ip]
 8014294:	4628      	mov	r0, r5
 8014296:	4651      	mov	r1, sl
 8014298:	4672      	mov	r2, lr
 801429a:	ab08      	add	r3, sp, #32
 801429c:	f7ff f8ac 	bl	80133f8 <rcl_expand_topic_name>
 80142a0:	4605      	mov	r5, r0
 80142a2:	a808      	add	r0, sp, #32
 80142a4:	f7f9 ff86 	bl	800e1b4 <rcutils_string_map_fini>
 80142a8:	b920      	cbnz	r0, 80142b4 <rcl_subscription_init+0xfc>
 80142aa:	b15d      	cbz	r5, 80142c4 <rcl_subscription_init+0x10c>
 80142ac:	2d67      	cmp	r5, #103	@ 0x67
 80142ae:	d002      	beq.n	80142b6 <rcl_subscription_init+0xfe>
 80142b0:	2d69      	cmp	r5, #105	@ 0x69
 80142b2:	d05a      	beq.n	801436a <rcl_subscription_init+0x1b2>
 80142b4:	2501      	movs	r5, #1
 80142b6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80142b8:	2800      	cmp	r0, #0
 80142ba:	d09e      	beq.n	80141fa <rcl_subscription_init+0x42>
 80142bc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80142be:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 80142c0:	4798      	blx	r3
 80142c2:	e79a      	b.n	80141fa <rcl_subscription_init+0x42>
 80142c4:	4640      	mov	r0, r8
 80142c6:	f7ff fde1 	bl	8013e8c <rcl_node_get_options>
 80142ca:	2800      	cmp	r0, #0
 80142cc:	d0f2      	beq.n	80142b4 <rcl_subscription_init+0xfc>
 80142ce:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80142d0:	f7eb ff88 	bl	80001e4 <strlen>
 80142d4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80142d6:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 80142d8:	3001      	adds	r0, #1
 80142da:	4798      	blx	r3
 80142dc:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80142de:	9107      	str	r1, [sp, #28]
 80142e0:	4681      	mov	r9, r0
 80142e2:	4608      	mov	r0, r1
 80142e4:	f7eb ff7e 	bl	80001e4 <strlen>
 80142e8:	9907      	ldr	r1, [sp, #28]
 80142ea:	1c42      	adds	r2, r0, #1
 80142ec:	4648      	mov	r0, r9
 80142ee:	f005 fd70 	bl	8019dd2 <memcpy>
 80142f2:	462a      	mov	r2, r5
 80142f4:	4648      	mov	r0, r9
 80142f6:	a90a      	add	r1, sp, #40	@ 0x28
 80142f8:	f7fa f824 	bl	800e344 <rmw_validate_full_topic_name>
 80142fc:	2800      	cmp	r0, #0
 80142fe:	d132      	bne.n	8014366 <rcl_subscription_init+0x1ae>
 8014300:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8014302:	2b00      	cmp	r3, #0
 8014304:	d133      	bne.n	801436e <rcl_subscription_init+0x1b6>
 8014306:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8014308:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 801430a:	20c8      	movs	r0, #200	@ 0xc8
 801430c:	4798      	blx	r3
 801430e:	6020      	str	r0, [r4, #0]
 8014310:	b378      	cbz	r0, 8014372 <rcl_subscription_init+0x1ba>
 8014312:	4640      	mov	r0, r8
 8014314:	f7ff fdc2 	bl	8013e9c <rcl_node_get_rmw_handle>
 8014318:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 801431c:	9300      	str	r3, [sp, #0]
 801431e:	4631      	mov	r1, r6
 8014320:	463b      	mov	r3, r7
 8014322:	464a      	mov	r2, r9
 8014324:	6825      	ldr	r5, [r4, #0]
 8014326:	f002 fc61 	bl	8016bec <rmw_create_subscription>
 801432a:	6821      	ldr	r1, [r4, #0]
 801432c:	f8c5 00c0 	str.w	r0, [r5, #192]	@ 0xc0
 8014330:	f8d1 00c0 	ldr.w	r0, [r1, #192]	@ 0xc0
 8014334:	b368      	cbz	r0, 8014392 <rcl_subscription_init+0x1da>
 8014336:	3170      	adds	r1, #112	@ 0x70
 8014338:	f002 fd34 	bl	8016da4 <rmw_subscription_get_actual_qos>
 801433c:	4605      	mov	r5, r0
 801433e:	b9d0      	cbnz	r0, 8014376 <rcl_subscription_init+0x1be>
 8014340:	6820      	ldr	r0, [r4, #0]
 8014342:	f897 3048 	ldrb.w	r3, [r7, #72]	@ 0x48
 8014346:	f880 30b8 	strb.w	r3, [r0, #184]	@ 0xb8
 801434a:	2270      	movs	r2, #112	@ 0x70
 801434c:	4639      	mov	r1, r7
 801434e:	f005 fd40 	bl	8019dd2 <memcpy>
 8014352:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8014354:	b110      	cbz	r0, 801435c <rcl_subscription_init+0x1a4>
 8014356:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8014358:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 801435a:	4798      	blx	r3
 801435c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801435e:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 8014360:	4648      	mov	r0, r9
 8014362:	4798      	blx	r3
 8014364:	e749      	b.n	80141fa <rcl_subscription_init+0x42>
 8014366:	2501      	movs	r5, #1
 8014368:	e7f3      	b.n	8014352 <rcl_subscription_init+0x19a>
 801436a:	2567      	movs	r5, #103	@ 0x67
 801436c:	e7a3      	b.n	80142b6 <rcl_subscription_init+0xfe>
 801436e:	2567      	movs	r5, #103	@ 0x67
 8014370:	e7ef      	b.n	8014352 <rcl_subscription_init+0x19a>
 8014372:	250a      	movs	r5, #10
 8014374:	e7ed      	b.n	8014352 <rcl_subscription_init+0x19a>
 8014376:	6823      	ldr	r3, [r4, #0]
 8014378:	2b00      	cmp	r3, #0
 801437a:	d0f4      	beq.n	8014366 <rcl_subscription_init+0x1ae>
 801437c:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8014380:	b13b      	cbz	r3, 8014392 <rcl_subscription_init+0x1da>
 8014382:	4640      	mov	r0, r8
 8014384:	f7ff fd8a 	bl	8013e9c <rcl_node_get_rmw_handle>
 8014388:	6823      	ldr	r3, [r4, #0]
 801438a:	f8d3 10c0 	ldr.w	r1, [r3, #192]	@ 0xc0
 801438e:	f002 fd17 	bl	8016dc0 <rmw_destroy_subscription>
 8014392:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8014394:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 8014396:	6820      	ldr	r0, [r4, #0]
 8014398:	4798      	blx	r3
 801439a:	2300      	movs	r3, #0
 801439c:	6023      	str	r3, [r4, #0]
 801439e:	2501      	movs	r5, #1
 80143a0:	e7d7      	b.n	8014352 <rcl_subscription_init+0x19a>
 80143a2:	bf00      	nop

080143a4 <rcl_subscription_get_default_options>:
 80143a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80143a8:	4f12      	ldr	r7, [pc, #72]	@ (80143f4 <rcl_subscription_get_default_options+0x50>)
 80143aa:	4913      	ldr	r1, [pc, #76]	@ (80143f8 <rcl_subscription_get_default_options+0x54>)
 80143ac:	b088      	sub	sp, #32
 80143ae:	4606      	mov	r6, r0
 80143b0:	2250      	movs	r2, #80	@ 0x50
 80143b2:	4638      	mov	r0, r7
 80143b4:	f005 fd0d 	bl	8019dd2 <memcpy>
 80143b8:	ac02      	add	r4, sp, #8
 80143ba:	a802      	add	r0, sp, #8
 80143bc:	f7f9 fdf6 	bl	800dfac <rcutils_get_default_allocator>
 80143c0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80143c2:	f107 0550 	add.w	r5, r7, #80	@ 0x50
 80143c6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80143c8:	46e8      	mov	r8, sp
 80143ca:	6823      	ldr	r3, [r4, #0]
 80143cc:	602b      	str	r3, [r5, #0]
 80143ce:	4640      	mov	r0, r8
 80143d0:	f001 fda8 	bl	8015f24 <rmw_get_default_subscription_options>
 80143d4:	e898 0003 	ldmia.w	r8, {r0, r1}
 80143d8:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 80143dc:	e883 0003 	stmia.w	r3, {r0, r1}
 80143e0:	2270      	movs	r2, #112	@ 0x70
 80143e2:	4639      	mov	r1, r7
 80143e4:	4630      	mov	r0, r6
 80143e6:	f005 fcf4 	bl	8019dd2 <memcpy>
 80143ea:	4630      	mov	r0, r6
 80143ec:	b008      	add	sp, #32
 80143ee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80143f2:	bf00      	nop
 80143f4:	200075b8 	.word	0x200075b8
 80143f8:	0801bf10 	.word	0x0801bf10

080143fc <rcl_take>:
 80143fc:	2800      	cmp	r0, #0
 80143fe:	d03f      	beq.n	8014480 <rcl_take+0x84>
 8014400:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8014404:	4617      	mov	r7, r2
 8014406:	6802      	ldr	r2, [r0, #0]
 8014408:	b09d      	sub	sp, #116	@ 0x74
 801440a:	4606      	mov	r6, r0
 801440c:	b382      	cbz	r2, 8014470 <rcl_take+0x74>
 801440e:	4699      	mov	r9, r3
 8014410:	f8d2 30c0 	ldr.w	r3, [r2, #192]	@ 0xc0
 8014414:	b363      	cbz	r3, 8014470 <rcl_take+0x74>
 8014416:	4688      	mov	r8, r1
 8014418:	b381      	cbz	r1, 801447c <rcl_take+0x80>
 801441a:	2f00      	cmp	r7, #0
 801441c:	d034      	beq.n	8014488 <rcl_take+0x8c>
 801441e:	a802      	add	r0, sp, #8
 8014420:	ac02      	add	r4, sp, #8
 8014422:	f001 fd83 	bl	8015f2c <rmw_get_zero_initialized_message_info>
 8014426:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8014428:	463d      	mov	r5, r7
 801442a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 801442c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801442e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8014430:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8014434:	6834      	ldr	r4, [r6, #0]
 8014436:	f8d4 60c0 	ldr.w	r6, [r4, #192]	@ 0xc0
 801443a:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 801443e:	2400      	movs	r4, #0
 8014440:	463b      	mov	r3, r7
 8014442:	4630      	mov	r0, r6
 8014444:	f8cd 9000 	str.w	r9, [sp]
 8014448:	4641      	mov	r1, r8
 801444a:	f10d 023f 	add.w	r2, sp, #63	@ 0x3f
 801444e:	f88d 403f 	strb.w	r4, [sp, #63]	@ 0x3f
 8014452:	f002 fd13 	bl	8016e7c <rmw_take_with_info>
 8014456:	4603      	mov	r3, r0
 8014458:	b9c0      	cbnz	r0, 801448c <rcl_take+0x90>
 801445a:	f89d 103f 	ldrb.w	r1, [sp, #63]	@ 0x3f
 801445e:	f240 1291 	movw	r2, #401	@ 0x191
 8014462:	2900      	cmp	r1, #0
 8014464:	bf08      	it	eq
 8014466:	4613      	moveq	r3, r2
 8014468:	4618      	mov	r0, r3
 801446a:	b01d      	add	sp, #116	@ 0x74
 801446c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8014470:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 8014474:	4618      	mov	r0, r3
 8014476:	b01d      	add	sp, #116	@ 0x74
 8014478:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801447c:	230b      	movs	r3, #11
 801447e:	e7f3      	b.n	8014468 <rcl_take+0x6c>
 8014480:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 8014484:	4618      	mov	r0, r3
 8014486:	4770      	bx	lr
 8014488:	af10      	add	r7, sp, #64	@ 0x40
 801448a:	e7c8      	b.n	801441e <rcl_take+0x22>
 801448c:	f7fe ff2c 	bl	80132e8 <rcl_convert_rmw_ret_to_rcl_ret>
 8014490:	4603      	mov	r3, r0
 8014492:	e7e9      	b.n	8014468 <rcl_take+0x6c>

08014494 <rcl_subscription_get_rmw_handle>:
 8014494:	b118      	cbz	r0, 801449e <rcl_subscription_get_rmw_handle+0xa>
 8014496:	6800      	ldr	r0, [r0, #0]
 8014498:	b108      	cbz	r0, 801449e <rcl_subscription_get_rmw_handle+0xa>
 801449a:	f8d0 00c0 	ldr.w	r0, [r0, #192]	@ 0xc0
 801449e:	4770      	bx	lr

080144a0 <rcl_get_system_time>:
 80144a0:	4608      	mov	r0, r1
 80144a2:	f7f9 befd 	b.w	800e2a0 <rcutils_system_time_now>
 80144a6:	bf00      	nop

080144a8 <rcl_get_steady_time>:
 80144a8:	4608      	mov	r0, r1
 80144aa:	f7f9 bf21 	b.w	800e2f0 <rcutils_steady_time_now>
 80144ae:	bf00      	nop

080144b0 <rcl_get_ros_time>:
 80144b0:	7a03      	ldrb	r3, [r0, #8]
 80144b2:	b510      	push	{r4, lr}
 80144b4:	460c      	mov	r4, r1
 80144b6:	b133      	cbz	r3, 80144c6 <rcl_get_ros_time+0x16>
 80144b8:	2105      	movs	r1, #5
 80144ba:	f001 fafd 	bl	8015ab8 <__atomic_load_8>
 80144be:	e9c4 0100 	strd	r0, r1, [r4]
 80144c2:	2000      	movs	r0, #0
 80144c4:	bd10      	pop	{r4, pc}
 80144c6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80144ca:	4608      	mov	r0, r1
 80144cc:	f7f9 bee8 	b.w	800e2a0 <rcutils_system_time_now>

080144d0 <rcl_clock_init>:
 80144d0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80144d4:	4606      	mov	r6, r0
 80144d6:	4610      	mov	r0, r2
 80144d8:	4614      	mov	r4, r2
 80144da:	460d      	mov	r5, r1
 80144dc:	f7f9 fd74 	bl	800dfc8 <rcutils_allocator_is_valid>
 80144e0:	b128      	cbz	r0, 80144ee <rcl_clock_init+0x1e>
 80144e2:	2e03      	cmp	r6, #3
 80144e4:	d803      	bhi.n	80144ee <rcl_clock_init+0x1e>
 80144e6:	e8df f006 	tbb	[pc, r6]
 80144ea:	2c1b      	.short	0x2c1b
 80144ec:	0554      	.short	0x0554
 80144ee:	200b      	movs	r0, #11
 80144f0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80144f4:	2d00      	cmp	r5, #0
 80144f6:	d0fa      	beq.n	80144ee <rcl_clock_init+0x1e>
 80144f8:	2c00      	cmp	r4, #0
 80144fa:	d0f8      	beq.n	80144ee <rcl_clock_init+0x1e>
 80144fc:	2600      	movs	r6, #0
 80144fe:	702e      	strb	r6, [r5, #0]
 8014500:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8014502:	f105 0714 	add.w	r7, r5, #20
 8014506:	e9c5 6601 	strd	r6, r6, [r5, #4]
 801450a:	612e      	str	r6, [r5, #16]
 801450c:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 801450e:	6823      	ldr	r3, [r4, #0]
 8014510:	603b      	str	r3, [r7, #0]
 8014512:	2303      	movs	r3, #3
 8014514:	4a2b      	ldr	r2, [pc, #172]	@ (80145c4 <rcl_clock_init+0xf4>)
 8014516:	702b      	strb	r3, [r5, #0]
 8014518:	4630      	mov	r0, r6
 801451a:	60ea      	str	r2, [r5, #12]
 801451c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8014520:	2d00      	cmp	r5, #0
 8014522:	d0e4      	beq.n	80144ee <rcl_clock_init+0x1e>
 8014524:	2600      	movs	r6, #0
 8014526:	702e      	strb	r6, [r5, #0]
 8014528:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801452a:	f105 0714 	add.w	r7, r5, #20
 801452e:	e9c5 6601 	strd	r6, r6, [r5, #4]
 8014532:	e9c5 6603 	strd	r6, r6, [r5, #12]
 8014536:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 8014538:	6823      	ldr	r3, [r4, #0]
 801453a:	603b      	str	r3, [r7, #0]
 801453c:	4630      	mov	r0, r6
 801453e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8014542:	2d00      	cmp	r5, #0
 8014544:	d0d3      	beq.n	80144ee <rcl_clock_init+0x1e>
 8014546:	2c00      	cmp	r4, #0
 8014548:	d0d1      	beq.n	80144ee <rcl_clock_init+0x1e>
 801454a:	2600      	movs	r6, #0
 801454c:	702e      	strb	r6, [r5, #0]
 801454e:	46a4      	mov	ip, r4
 8014550:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8014554:	f105 0714 	add.w	r7, r5, #20
 8014558:	e9c5 6601 	strd	r6, r6, [r5, #4]
 801455c:	e9c5 6603 	strd	r6, r6, [r5, #12]
 8014560:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 8014562:	f8dc 3000 	ldr.w	r3, [ip]
 8014566:	603b      	str	r3, [r7, #0]
 8014568:	6921      	ldr	r1, [r4, #16]
 801456a:	6823      	ldr	r3, [r4, #0]
 801456c:	2010      	movs	r0, #16
 801456e:	4798      	blx	r3
 8014570:	4603      	mov	r3, r0
 8014572:	6128      	str	r0, [r5, #16]
 8014574:	b318      	cbz	r0, 80145be <rcl_clock_init+0xee>
 8014576:	f04f 0800 	mov.w	r8, #0
 801457a:	f04f 0900 	mov.w	r9, #0
 801457e:	7206      	strb	r6, [r0, #8]
 8014580:	e9c3 8900 	strd	r8, r9, [r3]
 8014584:	2301      	movs	r3, #1
 8014586:	4a10      	ldr	r2, [pc, #64]	@ (80145c8 <rcl_clock_init+0xf8>)
 8014588:	702b      	strb	r3, [r5, #0]
 801458a:	4630      	mov	r0, r6
 801458c:	60ea      	str	r2, [r5, #12]
 801458e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8014592:	2d00      	cmp	r5, #0
 8014594:	d0ab      	beq.n	80144ee <rcl_clock_init+0x1e>
 8014596:	2c00      	cmp	r4, #0
 8014598:	d0a9      	beq.n	80144ee <rcl_clock_init+0x1e>
 801459a:	2600      	movs	r6, #0
 801459c:	702e      	strb	r6, [r5, #0]
 801459e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80145a0:	f105 0714 	add.w	r7, r5, #20
 80145a4:	e9c5 6601 	strd	r6, r6, [r5, #4]
 80145a8:	612e      	str	r6, [r5, #16]
 80145aa:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 80145ac:	6823      	ldr	r3, [r4, #0]
 80145ae:	603b      	str	r3, [r7, #0]
 80145b0:	2302      	movs	r3, #2
 80145b2:	4a06      	ldr	r2, [pc, #24]	@ (80145cc <rcl_clock_init+0xfc>)
 80145b4:	702b      	strb	r3, [r5, #0]
 80145b6:	4630      	mov	r0, r6
 80145b8:	60ea      	str	r2, [r5, #12]
 80145ba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80145be:	200a      	movs	r0, #10
 80145c0:	e796      	b.n	80144f0 <rcl_clock_init+0x20>
 80145c2:	bf00      	nop
 80145c4:	080144a9 	.word	0x080144a9
 80145c8:	080144b1 	.word	0x080144b1
 80145cc:	080144a1 	.word	0x080144a1

080145d0 <rcl_clock_get_now>:
 80145d0:	b140      	cbz	r0, 80145e4 <rcl_clock_get_now+0x14>
 80145d2:	b139      	cbz	r1, 80145e4 <rcl_clock_get_now+0x14>
 80145d4:	7803      	ldrb	r3, [r0, #0]
 80145d6:	b11b      	cbz	r3, 80145e0 <rcl_clock_get_now+0x10>
 80145d8:	68c3      	ldr	r3, [r0, #12]
 80145da:	b10b      	cbz	r3, 80145e0 <rcl_clock_get_now+0x10>
 80145dc:	6900      	ldr	r0, [r0, #16]
 80145de:	4718      	bx	r3
 80145e0:	2001      	movs	r0, #1
 80145e2:	4770      	bx	lr
 80145e4:	200b      	movs	r0, #11
 80145e6:	4770      	bx	lr

080145e8 <rcl_clock_add_jump_callback>:
 80145e8:	b082      	sub	sp, #8
 80145ea:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80145ee:	a908      	add	r1, sp, #32
 80145f0:	e881 000c 	stmia.w	r1, {r2, r3}
 80145f4:	e9dd 560e 	ldrd	r5, r6, [sp, #56]	@ 0x38
 80145f8:	b340      	cbz	r0, 801464c <rcl_clock_add_jump_callback+0x64>
 80145fa:	4604      	mov	r4, r0
 80145fc:	3014      	adds	r0, #20
 80145fe:	f7f9 fce3 	bl	800dfc8 <rcutils_allocator_is_valid>
 8014602:	b318      	cbz	r0, 801464c <rcl_clock_add_jump_callback+0x64>
 8014604:	b315      	cbz	r5, 801464c <rcl_clock_add_jump_callback+0x64>
 8014606:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	@ 0x28
 801460a:	2a00      	cmp	r2, #0
 801460c:	f173 0300 	sbcs.w	r3, r3, #0
 8014610:	db1c      	blt.n	801464c <rcl_clock_add_jump_callback+0x64>
 8014612:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 8014616:	2a01      	cmp	r2, #1
 8014618:	f173 0300 	sbcs.w	r3, r3, #0
 801461c:	da16      	bge.n	801464c <rcl_clock_add_jump_callback+0x64>
 801461e:	e9d4 0701 	ldrd	r0, r7, [r4, #4]
 8014622:	2f00      	cmp	r7, #0
 8014624:	d03e      	beq.n	80146a4 <rcl_clock_add_jump_callback+0xbc>
 8014626:	2300      	movs	r3, #0
 8014628:	f100 0220 	add.w	r2, r0, #32
 801462c:	e003      	b.n	8014636 <rcl_clock_add_jump_callback+0x4e>
 801462e:	42bb      	cmp	r3, r7
 8014630:	f102 0228 	add.w	r2, r2, #40	@ 0x28
 8014634:	d00f      	beq.n	8014656 <rcl_clock_add_jump_callback+0x6e>
 8014636:	f852 1c20 	ldr.w	r1, [r2, #-32]
 801463a:	42a9      	cmp	r1, r5
 801463c:	f103 0301 	add.w	r3, r3, #1
 8014640:	d1f5      	bne.n	801462e <rcl_clock_add_jump_callback+0x46>
 8014642:	6811      	ldr	r1, [r2, #0]
 8014644:	42b1      	cmp	r1, r6
 8014646:	d1f2      	bne.n	801462e <rcl_clock_add_jump_callback+0x46>
 8014648:	2001      	movs	r0, #1
 801464a:	e000      	b.n	801464e <rcl_clock_add_jump_callback+0x66>
 801464c:	200b      	movs	r0, #11
 801464e:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8014652:	b002      	add	sp, #8
 8014654:	4770      	bx	lr
 8014656:	3301      	adds	r3, #1
 8014658:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 801465c:	00d9      	lsls	r1, r3, #3
 801465e:	69e3      	ldr	r3, [r4, #28]
 8014660:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 8014662:	4798      	blx	r3
 8014664:	4684      	mov	ip, r0
 8014666:	b1d8      	cbz	r0, 80146a0 <rcl_clock_add_jump_callback+0xb8>
 8014668:	af08      	add	r7, sp, #32
 801466a:	f8d4 e008 	ldr.w	lr, [r4, #8]
 801466e:	6060      	str	r0, [r4, #4]
 8014670:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 8014672:	eb0e 098e 	add.w	r9, lr, lr, lsl #2
 8014676:	eb0c 08c9 	add.w	r8, ip, r9, lsl #3
 801467a:	f84c 5039 	str.w	r5, [ip, r9, lsl #3]
 801467e:	f108 0508 	add.w	r5, r8, #8
 8014682:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8014684:	e897 0003 	ldmia.w	r7, {r0, r1}
 8014688:	f10e 0301 	add.w	r3, lr, #1
 801468c:	e885 0003 	stmia.w	r5, {r0, r1}
 8014690:	f8c8 6020 	str.w	r6, [r8, #32]
 8014694:	60a3      	str	r3, [r4, #8]
 8014696:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801469a:	2000      	movs	r0, #0
 801469c:	b002      	add	sp, #8
 801469e:	4770      	bx	lr
 80146a0:	200a      	movs	r0, #10
 80146a2:	e7d4      	b.n	801464e <rcl_clock_add_jump_callback+0x66>
 80146a4:	2128      	movs	r1, #40	@ 0x28
 80146a6:	e7da      	b.n	801465e <rcl_clock_add_jump_callback+0x76>

080146a8 <rcl_clock_remove_jump_callback>:
 80146a8:	2800      	cmp	r0, #0
 80146aa:	d057      	beq.n	801475c <rcl_clock_remove_jump_callback+0xb4>
 80146ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80146b0:	4607      	mov	r7, r0
 80146b2:	3014      	adds	r0, #20
 80146b4:	460c      	mov	r4, r1
 80146b6:	4615      	mov	r5, r2
 80146b8:	f7f9 fc86 	bl	800dfc8 <rcutils_allocator_is_valid>
 80146bc:	2800      	cmp	r0, #0
 80146be:	d03a      	beq.n	8014736 <rcl_clock_remove_jump_callback+0x8e>
 80146c0:	2c00      	cmp	r4, #0
 80146c2:	d038      	beq.n	8014736 <rcl_clock_remove_jump_callback+0x8e>
 80146c4:	f8d7 8008 	ldr.w	r8, [r7, #8]
 80146c8:	f1b8 0f00 	cmp.w	r8, #0
 80146cc:	d00c      	beq.n	80146e8 <rcl_clock_remove_jump_callback+0x40>
 80146ce:	f8d7 e004 	ldr.w	lr, [r7, #4]
 80146d2:	eb08 0c88 	add.w	ip, r8, r8, lsl #2
 80146d6:	4676      	mov	r6, lr
 80146d8:	eb0e 0ccc 	add.w	ip, lr, ip, lsl #3
 80146dc:	6833      	ldr	r3, [r6, #0]
 80146de:	42a3      	cmp	r3, r4
 80146e0:	d005      	beq.n	80146ee <rcl_clock_remove_jump_callback+0x46>
 80146e2:	3628      	adds	r6, #40	@ 0x28
 80146e4:	45b4      	cmp	ip, r6
 80146e6:	d1f9      	bne.n	80146dc <rcl_clock_remove_jump_callback+0x34>
 80146e8:	2001      	movs	r0, #1
 80146ea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80146ee:	6a33      	ldr	r3, [r6, #32]
 80146f0:	3628      	adds	r6, #40	@ 0x28
 80146f2:	4566      	cmp	r6, ip
 80146f4:	d02a      	beq.n	801474c <rcl_clock_remove_jump_callback+0xa4>
 80146f6:	42ab      	cmp	r3, r5
 80146f8:	d1f0      	bne.n	80146dc <rcl_clock_remove_jump_callback+0x34>
 80146fa:	4635      	mov	r5, r6
 80146fc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80146fe:	f1a6 0428 	sub.w	r4, r6, #40	@ 0x28
 8014702:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8014704:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8014706:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8014708:	e895 0003 	ldmia.w	r5, {r0, r1}
 801470c:	3628      	adds	r6, #40	@ 0x28
 801470e:	4566      	cmp	r6, ip
 8014710:	e884 0003 	stmia.w	r4, {r0, r1}
 8014714:	d1f1      	bne.n	80146fa <rcl_clock_remove_jump_callback+0x52>
 8014716:	f108 34ff 	add.w	r4, r8, #4294967295	@ 0xffffffff
 801471a:	60bc      	str	r4, [r7, #8]
 801471c:	b174      	cbz	r4, 801473c <rcl_clock_remove_jump_callback+0x94>
 801471e:	eb04 0484 	add.w	r4, r4, r4, lsl #2
 8014722:	69fb      	ldr	r3, [r7, #28]
 8014724:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8014726:	00e1      	lsls	r1, r4, #3
 8014728:	4670      	mov	r0, lr
 801472a:	4798      	blx	r3
 801472c:	b1c0      	cbz	r0, 8014760 <rcl_clock_remove_jump_callback+0xb8>
 801472e:	6078      	str	r0, [r7, #4]
 8014730:	2000      	movs	r0, #0
 8014732:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014736:	200b      	movs	r0, #11
 8014738:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801473c:	4670      	mov	r0, lr
 801473e:	69bb      	ldr	r3, [r7, #24]
 8014740:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8014742:	4798      	blx	r3
 8014744:	607c      	str	r4, [r7, #4]
 8014746:	4620      	mov	r0, r4
 8014748:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801474c:	42ab      	cmp	r3, r5
 801474e:	d1cb      	bne.n	80146e8 <rcl_clock_remove_jump_callback+0x40>
 8014750:	f108 34ff 	add.w	r4, r8, #4294967295	@ 0xffffffff
 8014754:	60bc      	str	r4, [r7, #8]
 8014756:	2c00      	cmp	r4, #0
 8014758:	d1e1      	bne.n	801471e <rcl_clock_remove_jump_callback+0x76>
 801475a:	e7ef      	b.n	801473c <rcl_clock_remove_jump_callback+0x94>
 801475c:	200b      	movs	r0, #11
 801475e:	4770      	bx	lr
 8014760:	200a      	movs	r0, #10
 8014762:	e7e9      	b.n	8014738 <rcl_clock_remove_jump_callback+0x90>

08014764 <_rcl_timer_time_jump>:
 8014764:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014768:	4682      	mov	sl, r0
 801476a:	b087      	sub	sp, #28
 801476c:	4614      	mov	r4, r2
 801476e:	b131      	cbz	r1, 801477e <_rcl_timer_time_jump+0x1a>
 8014770:	7803      	ldrb	r3, [r0, #0]
 8014772:	3b02      	subs	r3, #2
 8014774:	2b01      	cmp	r3, #1
 8014776:	d944      	bls.n	8014802 <_rcl_timer_time_jump+0x9e>
 8014778:	b007      	add	sp, #28
 801477a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801477e:	6813      	ldr	r3, [r2, #0]
 8014780:	a904      	add	r1, sp, #16
 8014782:	6818      	ldr	r0, [r3, #0]
 8014784:	f7ff ff24 	bl	80145d0 <rcl_clock_get_now>
 8014788:	2800      	cmp	r0, #0
 801478a:	d1f5      	bne.n	8014778 <_rcl_timer_time_jump+0x14>
 801478c:	6820      	ldr	r0, [r4, #0]
 801478e:	2105      	movs	r1, #5
 8014790:	3020      	adds	r0, #32
 8014792:	f001 f991 	bl	8015ab8 <__atomic_load_8>
 8014796:	4602      	mov	r2, r0
 8014798:	6820      	ldr	r0, [r4, #0]
 801479a:	460b      	mov	r3, r1
 801479c:	3028      	adds	r0, #40	@ 0x28
 801479e:	2105      	movs	r1, #5
 80147a0:	4690      	mov	r8, r2
 80147a2:	4699      	mov	r9, r3
 80147a4:	f001 f988 	bl	8015ab8 <__atomic_load_8>
 80147a8:	4602      	mov	r2, r0
 80147aa:	6820      	ldr	r0, [r4, #0]
 80147ac:	460b      	mov	r3, r1
 80147ae:	3018      	adds	r0, #24
 80147b0:	2105      	movs	r1, #5
 80147b2:	461f      	mov	r7, r3
 80147b4:	4616      	mov	r6, r2
 80147b6:	f001 f97f 	bl	8015ab8 <__atomic_load_8>
 80147ba:	f89a 3000 	ldrb.w	r3, [sl]
 80147be:	9103      	str	r1, [sp, #12]
 80147c0:	3b02      	subs	r3, #2
 80147c2:	2b01      	cmp	r3, #1
 80147c4:	4605      	mov	r5, r0
 80147c6:	d93a      	bls.n	801483e <_rcl_timer_time_jump+0xda>
 80147c8:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 80147cc:	45b2      	cmp	sl, r6
 80147ce:	eb7b 0307 	sbcs.w	r3, fp, r7
 80147d2:	da64      	bge.n	801489e <_rcl_timer_time_jump+0x13a>
 80147d4:	45c2      	cmp	sl, r8
 80147d6:	eb7b 0309 	sbcs.w	r3, fp, r9
 80147da:	dacd      	bge.n	8014778 <_rcl_timer_time_jump+0x14>
 80147dc:	6820      	ldr	r0, [r4, #0]
 80147de:	eb15 020a 	adds.w	r2, r5, sl
 80147e2:	f04f 0505 	mov.w	r5, #5
 80147e6:	eb41 030b 	adc.w	r3, r1, fp
 80147ea:	3028      	adds	r0, #40	@ 0x28
 80147ec:	9500      	str	r5, [sp, #0]
 80147ee:	f001 f997 	bl	8015b20 <__atomic_store_8>
 80147f2:	6820      	ldr	r0, [r4, #0]
 80147f4:	9500      	str	r5, [sp, #0]
 80147f6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80147fa:	3020      	adds	r0, #32
 80147fc:	f001 f990 	bl	8015b20 <__atomic_store_8>
 8014800:	e7ba      	b.n	8014778 <_rcl_timer_time_jump+0x14>
 8014802:	6813      	ldr	r3, [r2, #0]
 8014804:	a904      	add	r1, sp, #16
 8014806:	6818      	ldr	r0, [r3, #0]
 8014808:	f7ff fee2 	bl	80145d0 <rcl_clock_get_now>
 801480c:	2800      	cmp	r0, #0
 801480e:	d1b3      	bne.n	8014778 <_rcl_timer_time_jump+0x14>
 8014810:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8014814:	4313      	orrs	r3, r2
 8014816:	d0af      	beq.n	8014778 <_rcl_timer_time_jump+0x14>
 8014818:	6820      	ldr	r0, [r4, #0]
 801481a:	2105      	movs	r1, #5
 801481c:	3028      	adds	r0, #40	@ 0x28
 801481e:	f001 f94b 	bl	8015ab8 <__atomic_load_8>
 8014822:	9a04      	ldr	r2, [sp, #16]
 8014824:	6823      	ldr	r3, [r4, #0]
 8014826:	9e05      	ldr	r6, [sp, #20]
 8014828:	1a82      	subs	r2, r0, r2
 801482a:	f04f 0405 	mov.w	r4, #5
 801482e:	f103 0030 	add.w	r0, r3, #48	@ 0x30
 8014832:	9400      	str	r4, [sp, #0]
 8014834:	eb61 0306 	sbc.w	r3, r1, r6
 8014838:	f001 f972 	bl	8015b20 <__atomic_store_8>
 801483c:	e79c      	b.n	8014778 <_rcl_timer_time_jump+0x14>
 801483e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8014842:	4313      	orrs	r3, r2
 8014844:	d098      	beq.n	8014778 <_rcl_timer_time_jump+0x14>
 8014846:	6820      	ldr	r0, [r4, #0]
 8014848:	f04f 0805 	mov.w	r8, #5
 801484c:	2300      	movs	r3, #0
 801484e:	3030      	adds	r0, #48	@ 0x30
 8014850:	f8cd 8000 	str.w	r8, [sp]
 8014854:	2200      	movs	r2, #0
 8014856:	f001 f997 	bl	8015b88 <__atomic_exchange_8>
 801485a:	4606      	mov	r6, r0
 801485c:	460f      	mov	r7, r1
 801485e:	ea56 0307 	orrs.w	r3, r6, r7
 8014862:	d089      	beq.n	8014778 <_rcl_timer_time_jump+0x14>
 8014864:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8014868:	1b92      	subs	r2, r2, r6
 801486a:	eb63 0301 	sbc.w	r3, r3, r1
 801486e:	9903      	ldr	r1, [sp, #12]
 8014870:	6820      	ldr	r0, [r4, #0]
 8014872:	f8cd 8000 	str.w	r8, [sp]
 8014876:	1952      	adds	r2, r2, r5
 8014878:	eb43 0101 	adc.w	r1, r3, r1
 801487c:	460b      	mov	r3, r1
 801487e:	3028      	adds	r0, #40	@ 0x28
 8014880:	f001 f94e 	bl	8015b20 <__atomic_store_8>
 8014884:	9a04      	ldr	r2, [sp, #16]
 8014886:	6820      	ldr	r0, [r4, #0]
 8014888:	9b05      	ldr	r3, [sp, #20]
 801488a:	f8cd 8000 	str.w	r8, [sp]
 801488e:	1b92      	subs	r2, r2, r6
 8014890:	f100 0020 	add.w	r0, r0, #32
 8014894:	eb63 0307 	sbc.w	r3, r3, r7
 8014898:	f001 f942 	bl	8015b20 <__atomic_store_8>
 801489c:	e76c      	b.n	8014778 <_rcl_timer_time_jump+0x14>
 801489e:	6820      	ldr	r0, [r4, #0]
 80148a0:	3008      	adds	r0, #8
 80148a2:	f004 fc6b 	bl	801917c <rcl_trigger_guard_condition>
 80148a6:	e767      	b.n	8014778 <_rcl_timer_time_jump+0x14>

080148a8 <rcl_get_zero_initialized_timer>:
 80148a8:	4b01      	ldr	r3, [pc, #4]	@ (80148b0 <rcl_get_zero_initialized_timer+0x8>)
 80148aa:	6818      	ldr	r0, [r3, #0]
 80148ac:	4770      	bx	lr
 80148ae:	bf00      	nop
 80148b0:	0801bf60 	.word	0x0801bf60

080148b4 <rcl_timer_init>:
 80148b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80148b8:	b0ad      	sub	sp, #180	@ 0xb4
 80148ba:	4604      	mov	r4, r0
 80148bc:	a839      	add	r0, sp, #228	@ 0xe4
 80148be:	460d      	mov	r5, r1
 80148c0:	4690      	mov	r8, r2
 80148c2:	f7f9 fb81 	bl	800dfc8 <rcutils_allocator_is_valid>
 80148c6:	2800      	cmp	r0, #0
 80148c8:	d072      	beq.n	80149b0 <rcl_timer_init+0xfc>
 80148ca:	2c00      	cmp	r4, #0
 80148cc:	d070      	beq.n	80149b0 <rcl_timer_init+0xfc>
 80148ce:	2d00      	cmp	r5, #0
 80148d0:	d06e      	beq.n	80149b0 <rcl_timer_init+0xfc>
 80148d2:	e9dd 2336 	ldrd	r2, r3, [sp, #216]	@ 0xd8
 80148d6:	2a00      	cmp	r2, #0
 80148d8:	f173 0300 	sbcs.w	r3, r3, #0
 80148dc:	db68      	blt.n	80149b0 <rcl_timer_init+0xfc>
 80148de:	6823      	ldr	r3, [r4, #0]
 80148e0:	b12b      	cbz	r3, 80148ee <rcl_timer_init+0x3a>
 80148e2:	f04f 0a64 	mov.w	sl, #100	@ 0x64
 80148e6:	4650      	mov	r0, sl
 80148e8:	b02d      	add	sp, #180	@ 0xb4
 80148ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80148ee:	a90a      	add	r1, sp, #40	@ 0x28
 80148f0:	4628      	mov	r0, r5
 80148f2:	f7ff fe6d 	bl	80145d0 <rcl_clock_get_now>
 80148f6:	4682      	mov	sl, r0
 80148f8:	2800      	cmp	r0, #0
 80148fa:	d1f4      	bne.n	80148e6 <rcl_timer_init+0x32>
 80148fc:	f10d 0920 	add.w	r9, sp, #32
 8014900:	4648      	mov	r0, r9
 8014902:	e9cd 5818 	strd	r5, r8, [sp, #96]	@ 0x60
 8014906:	f004 fb3d 	bl	8018f84 <rcl_get_zero_initialized_guard_condition>
 801490a:	e899 0003 	ldmia.w	r9, {r0, r1}
 801490e:	f10d 0b68 	add.w	fp, sp, #104	@ 0x68
 8014912:	f10d 0934 	add.w	r9, sp, #52	@ 0x34
 8014916:	e88b 0003 	stmia.w	fp, {r0, r1}
 801491a:	4648      	mov	r0, r9
 801491c:	f004 fc14 	bl	8019148 <rcl_guard_condition_get_default_options>
 8014920:	ab0f      	add	r3, sp, #60	@ 0x3c
 8014922:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8014926:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 801492a:	4641      	mov	r1, r8
 801492c:	e899 000c 	ldmia.w	r9, {r2, r3}
 8014930:	4658      	mov	r0, fp
 8014932:	f004 fb31 	bl	8018f98 <rcl_guard_condition_init>
 8014936:	4682      	mov	sl, r0
 8014938:	2800      	cmp	r0, #0
 801493a:	d1d4      	bne.n	80148e6 <rcl_timer_init+0x32>
 801493c:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 801493e:	f893 c000 	ldrb.w	ip, [r3]
 8014942:	f1bc 0f01 	cmp.w	ip, #1
 8014946:	d039      	beq.n	80149bc <rcl_timer_init+0x108>
 8014948:	f10d 0ce4 	add.w	ip, sp, #228	@ 0xe4
 801494c:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8014950:	e9dd 890a 	ldrd	r8, r9, [sp, #40]	@ 0x28
 8014954:	9e36      	ldr	r6, [sp, #216]	@ 0xd8
 8014956:	f10d 0e9c 	add.w	lr, sp, #156	@ 0x9c
 801495a:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 801495e:	eb18 0606 	adds.w	r6, r8, r6
 8014962:	9b37      	ldr	r3, [sp, #220]	@ 0xdc
 8014964:	9606      	str	r6, [sp, #24]
 8014966:	e9dd 6736 	ldrd	r6, r7, [sp, #216]	@ 0xd8
 801496a:	eb49 0303 	adc.w	r3, r9, r3
 801496e:	9a38      	ldr	r2, [sp, #224]	@ 0xe0
 8014970:	9307      	str	r3, [sp, #28]
 8014972:	921c      	str	r2, [sp, #112]	@ 0x70
 8014974:	e9cd 671e 	strd	r6, r7, [sp, #120]	@ 0x78
 8014978:	e9dd 6706 	ldrd	r6, r7, [sp, #24]
 801497c:	f8dc 3000 	ldr.w	r3, [ip]
 8014980:	f8ce 3000 	str.w	r3, [lr]
 8014984:	2000      	movs	r0, #0
 8014986:	2100      	movs	r1, #0
 8014988:	2200      	movs	r2, #0
 801498a:	e9cd 0124 	strd	r0, r1, [sp, #144]	@ 0x90
 801498e:	9b39      	ldr	r3, [sp, #228]	@ 0xe4
 8014990:	993d      	ldr	r1, [sp, #244]	@ 0xf4
 8014992:	e9cd 8920 	strd	r8, r9, [sp, #128]	@ 0x80
 8014996:	2050      	movs	r0, #80	@ 0x50
 8014998:	e9cd 6722 	strd	r6, r7, [sp, #136]	@ 0x88
 801499c:	f88d 2098 	strb.w	r2, [sp, #152]	@ 0x98
 80149a0:	4798      	blx	r3
 80149a2:	6020      	str	r0, [r4, #0]
 80149a4:	b360      	cbz	r0, 8014a00 <rcl_timer_init+0x14c>
 80149a6:	2250      	movs	r2, #80	@ 0x50
 80149a8:	a918      	add	r1, sp, #96	@ 0x60
 80149aa:	f005 fa12 	bl	8019dd2 <memcpy>
 80149ae:	e79a      	b.n	80148e6 <rcl_timer_init+0x32>
 80149b0:	f04f 0a0b 	mov.w	sl, #11
 80149b4:	4650      	mov	r0, sl
 80149b6:	b02d      	add	sp, #180	@ 0xb4
 80149b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80149bc:	2201      	movs	r2, #1
 80149be:	2300      	movs	r3, #0
 80149c0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80149c4:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80149c8:	e9cd 2314 	strd	r2, r3, [sp, #80]	@ 0x50
 80149cc:	e9cd 0116 	strd	r0, r1, [sp, #88]	@ 0x58
 80149d0:	ab14      	add	r3, sp, #80	@ 0x50
 80149d2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80149d4:	f88d c048 	strb.w	ip, [sp, #72]	@ 0x48
 80149d8:	f8df c03c 	ldr.w	ip, [pc, #60]	@ 8014a18 <rcl_timer_init+0x164>
 80149dc:	9405      	str	r4, [sp, #20]
 80149de:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 80149e2:	f8cd c010 	str.w	ip, [sp, #16]
 80149e6:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	@ 0x48
 80149ea:	4628      	mov	r0, r5
 80149ec:	f7ff fdfc 	bl	80145e8 <rcl_clock_add_jump_callback>
 80149f0:	4680      	mov	r8, r0
 80149f2:	2800      	cmp	r0, #0
 80149f4:	d0a8      	beq.n	8014948 <rcl_timer_init+0x94>
 80149f6:	4658      	mov	r0, fp
 80149f8:	f004 fb80 	bl	80190fc <rcl_guard_condition_fini>
 80149fc:	46c2      	mov	sl, r8
 80149fe:	e772      	b.n	80148e6 <rcl_timer_init+0x32>
 8014a00:	4658      	mov	r0, fp
 8014a02:	f004 fb7b 	bl	80190fc <rcl_guard_condition_fini>
 8014a06:	4904      	ldr	r1, [pc, #16]	@ (8014a18 <rcl_timer_init+0x164>)
 8014a08:	4622      	mov	r2, r4
 8014a0a:	4628      	mov	r0, r5
 8014a0c:	f7ff fe4c 	bl	80146a8 <rcl_clock_remove_jump_callback>
 8014a10:	f04f 0a0a 	mov.w	sl, #10
 8014a14:	e767      	b.n	80148e6 <rcl_timer_init+0x32>
 8014a16:	bf00      	nop
 8014a18:	08014765 	.word	0x08014765

08014a1c <rcl_timer_call>:
 8014a1c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014a20:	b08b      	sub	sp, #44	@ 0x2c
 8014a22:	2800      	cmp	r0, #0
 8014a24:	d06e      	beq.n	8014b04 <rcl_timer_call+0xe8>
 8014a26:	6803      	ldr	r3, [r0, #0]
 8014a28:	f3bf 8f5b 	dmb	ish
 8014a2c:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8014a30:	f3bf 8f5b 	dmb	ish
 8014a34:	4604      	mov	r4, r0
 8014a36:	2b00      	cmp	r3, #0
 8014a38:	d159      	bne.n	8014aee <rcl_timer_call+0xd2>
 8014a3a:	6803      	ldr	r3, [r0, #0]
 8014a3c:	a908      	add	r1, sp, #32
 8014a3e:	6818      	ldr	r0, [r3, #0]
 8014a40:	f7ff fdc6 	bl	80145d0 <rcl_clock_get_now>
 8014a44:	4605      	mov	r5, r0
 8014a46:	2800      	cmp	r0, #0
 8014a48:	d14d      	bne.n	8014ae6 <rcl_timer_call+0xca>
 8014a4a:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8014a4e:	2a00      	cmp	r2, #0
 8014a50:	f173 0100 	sbcs.w	r1, r3, #0
 8014a54:	db51      	blt.n	8014afa <rcl_timer_call+0xde>
 8014a56:	6820      	ldr	r0, [r4, #0]
 8014a58:	2605      	movs	r6, #5
 8014a5a:	9600      	str	r6, [sp, #0]
 8014a5c:	3020      	adds	r0, #32
 8014a5e:	f001 f893 	bl	8015b88 <__atomic_exchange_8>
 8014a62:	6822      	ldr	r2, [r4, #0]
 8014a64:	f3bf 8f5b 	dmb	ish
 8014a68:	4682      	mov	sl, r0
 8014a6a:	f8d2 b010 	ldr.w	fp, [r2, #16]
 8014a6e:	f3bf 8f5b 	dmb	ish
 8014a72:	6820      	ldr	r0, [r4, #0]
 8014a74:	460b      	mov	r3, r1
 8014a76:	3028      	adds	r0, #40	@ 0x28
 8014a78:	4631      	mov	r1, r6
 8014a7a:	9305      	str	r3, [sp, #20]
 8014a7c:	f001 f81c 	bl	8015ab8 <__atomic_load_8>
 8014a80:	4603      	mov	r3, r0
 8014a82:	6820      	ldr	r0, [r4, #0]
 8014a84:	460a      	mov	r2, r1
 8014a86:	3018      	adds	r0, #24
 8014a88:	4631      	mov	r1, r6
 8014a8a:	e9cd 2303 	strd	r2, r3, [sp, #12]
 8014a8e:	f001 f813 	bl	8015ab8 <__atomic_load_8>
 8014a92:	9b04      	ldr	r3, [sp, #16]
 8014a94:	9a03      	ldr	r2, [sp, #12]
 8014a96:	4606      	mov	r6, r0
 8014a98:	460f      	mov	r7, r1
 8014a9a:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8014a9e:	eb13 0806 	adds.w	r8, r3, r6
 8014aa2:	eb42 0907 	adc.w	r9, r2, r7
 8014aa6:	4580      	cmp	r8, r0
 8014aa8:	eb79 0301 	sbcs.w	r3, r9, r1
 8014aac:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8014ab0:	460a      	mov	r2, r1
 8014ab2:	da04      	bge.n	8014abe <rcl_timer_call+0xa2>
 8014ab4:	ea56 0307 	orrs.w	r3, r6, r7
 8014ab8:	d129      	bne.n	8014b0e <rcl_timer_call+0xf2>
 8014aba:	e9dd 8906 	ldrd	r8, r9, [sp, #24]
 8014abe:	6820      	ldr	r0, [r4, #0]
 8014ac0:	2105      	movs	r1, #5
 8014ac2:	4642      	mov	r2, r8
 8014ac4:	464b      	mov	r3, r9
 8014ac6:	3028      	adds	r0, #40	@ 0x28
 8014ac8:	9100      	str	r1, [sp, #0]
 8014aca:	f001 f829 	bl	8015b20 <__atomic_store_8>
 8014ace:	f1bb 0f00 	cmp.w	fp, #0
 8014ad2:	d008      	beq.n	8014ae6 <rcl_timer_call+0xca>
 8014ad4:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8014ad8:	9905      	ldr	r1, [sp, #20]
 8014ada:	ebb2 020a 	subs.w	r2, r2, sl
 8014ade:	4620      	mov	r0, r4
 8014ae0:	eb63 0301 	sbc.w	r3, r3, r1
 8014ae4:	47d8      	blx	fp
 8014ae6:	4628      	mov	r0, r5
 8014ae8:	b00b      	add	sp, #44	@ 0x2c
 8014aea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014aee:	f240 3521 	movw	r5, #801	@ 0x321
 8014af2:	4628      	mov	r0, r5
 8014af4:	b00b      	add	sp, #44	@ 0x2c
 8014af6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014afa:	2501      	movs	r5, #1
 8014afc:	4628      	mov	r0, r5
 8014afe:	b00b      	add	sp, #44	@ 0x2c
 8014b00:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014b04:	250b      	movs	r5, #11
 8014b06:	4628      	mov	r0, r5
 8014b08:	b00b      	add	sp, #44	@ 0x2c
 8014b0a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014b0e:	ebb0 0008 	subs.w	r0, r0, r8
 8014b12:	eb62 0109 	sbc.w	r1, r2, r9
 8014b16:	f110 30ff 	adds.w	r0, r0, #4294967295	@ 0xffffffff
 8014b1a:	463b      	mov	r3, r7
 8014b1c:	f141 31ff 	adc.w	r1, r1, #4294967295	@ 0xffffffff
 8014b20:	4632      	mov	r2, r6
 8014b22:	f7ec f899 	bl	8000c58 <__aeabi_ldivmod>
 8014b26:	1c43      	adds	r3, r0, #1
 8014b28:	f141 0100 	adc.w	r1, r1, #0
 8014b2c:	fb00 7007 	mla	r0, r0, r7, r7
 8014b30:	fb06 0001 	mla	r0, r6, r1, r0
 8014b34:	fba3 6706 	umull	r6, r7, r3, r6
 8014b38:	4407      	add	r7, r0
 8014b3a:	eb18 0806 	adds.w	r8, r8, r6
 8014b3e:	eb49 0907 	adc.w	r9, r9, r7
 8014b42:	e7bc      	b.n	8014abe <rcl_timer_call+0xa2>

08014b44 <rcl_timer_is_ready>:
 8014b44:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014b48:	b082      	sub	sp, #8
 8014b4a:	b310      	cbz	r0, 8014b92 <rcl_timer_is_ready+0x4e>
 8014b4c:	4688      	mov	r8, r1
 8014b4e:	b301      	cbz	r1, 8014b92 <rcl_timer_is_ready+0x4e>
 8014b50:	6803      	ldr	r3, [r0, #0]
 8014b52:	4604      	mov	r4, r0
 8014b54:	4669      	mov	r1, sp
 8014b56:	6818      	ldr	r0, [r3, #0]
 8014b58:	f7ff fd3a 	bl	80145d0 <rcl_clock_get_now>
 8014b5c:	4605      	mov	r5, r0
 8014b5e:	b118      	cbz	r0, 8014b68 <rcl_timer_is_ready+0x24>
 8014b60:	4628      	mov	r0, r5
 8014b62:	b002      	add	sp, #8
 8014b64:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014b68:	6820      	ldr	r0, [r4, #0]
 8014b6a:	2105      	movs	r1, #5
 8014b6c:	3028      	adds	r0, #40	@ 0x28
 8014b6e:	f000 ffa3 	bl	8015ab8 <__atomic_load_8>
 8014b72:	e9dd 3200 	ldrd	r3, r2, [sp]
 8014b76:	1ac6      	subs	r6, r0, r3
 8014b78:	eb61 0702 	sbc.w	r7, r1, r2
 8014b7c:	2e01      	cmp	r6, #1
 8014b7e:	f177 0300 	sbcs.w	r3, r7, #0
 8014b82:	db0b      	blt.n	8014b9c <rcl_timer_is_ready+0x58>
 8014b84:	462b      	mov	r3, r5
 8014b86:	4628      	mov	r0, r5
 8014b88:	f888 3000 	strb.w	r3, [r8]
 8014b8c:	b002      	add	sp, #8
 8014b8e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014b92:	250b      	movs	r5, #11
 8014b94:	4628      	mov	r0, r5
 8014b96:	b002      	add	sp, #8
 8014b98:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014b9c:	6823      	ldr	r3, [r4, #0]
 8014b9e:	f3bf 8f5b 	dmb	ish
 8014ba2:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8014ba6:	f3bf 8f5b 	dmb	ish
 8014baa:	fab3 f383 	clz	r3, r3
 8014bae:	095b      	lsrs	r3, r3, #5
 8014bb0:	e7e9      	b.n	8014b86 <rcl_timer_is_ready+0x42>
 8014bb2:	bf00      	nop

08014bb4 <rcl_timer_get_time_until_next_call>:
 8014bb4:	b570      	push	{r4, r5, r6, lr}
 8014bb6:	b082      	sub	sp, #8
 8014bb8:	b1d8      	cbz	r0, 8014bf2 <rcl_timer_get_time_until_next_call+0x3e>
 8014bba:	460d      	mov	r5, r1
 8014bbc:	b1c9      	cbz	r1, 8014bf2 <rcl_timer_get_time_until_next_call+0x3e>
 8014bbe:	6803      	ldr	r3, [r0, #0]
 8014bc0:	4604      	mov	r4, r0
 8014bc2:	4669      	mov	r1, sp
 8014bc4:	6818      	ldr	r0, [r3, #0]
 8014bc6:	f7ff fd03 	bl	80145d0 <rcl_clock_get_now>
 8014bca:	4606      	mov	r6, r0
 8014bcc:	b110      	cbz	r0, 8014bd4 <rcl_timer_get_time_until_next_call+0x20>
 8014bce:	4630      	mov	r0, r6
 8014bd0:	b002      	add	sp, #8
 8014bd2:	bd70      	pop	{r4, r5, r6, pc}
 8014bd4:	6820      	ldr	r0, [r4, #0]
 8014bd6:	2105      	movs	r1, #5
 8014bd8:	3028      	adds	r0, #40	@ 0x28
 8014bda:	f000 ff6d 	bl	8015ab8 <__atomic_load_8>
 8014bde:	e9dd 3200 	ldrd	r3, r2, [sp]
 8014be2:	1ac0      	subs	r0, r0, r3
 8014be4:	eb61 0102 	sbc.w	r1, r1, r2
 8014be8:	e9c5 0100 	strd	r0, r1, [r5]
 8014bec:	4630      	mov	r0, r6
 8014bee:	b002      	add	sp, #8
 8014bf0:	bd70      	pop	{r4, r5, r6, pc}
 8014bf2:	260b      	movs	r6, #11
 8014bf4:	4630      	mov	r0, r6
 8014bf6:	b002      	add	sp, #8
 8014bf8:	bd70      	pop	{r4, r5, r6, pc}
 8014bfa:	bf00      	nop

08014bfc <rcl_timer_is_canceled>:
 8014bfc:	b168      	cbz	r0, 8014c1a <rcl_timer_is_canceled+0x1e>
 8014bfe:	b161      	cbz	r1, 8014c1a <rcl_timer_is_canceled+0x1e>
 8014c00:	6803      	ldr	r3, [r0, #0]
 8014c02:	f3bf 8f5b 	dmb	ish
 8014c06:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8014c0a:	f3bf 8f5b 	dmb	ish
 8014c0e:	3b00      	subs	r3, #0
 8014c10:	bf18      	it	ne
 8014c12:	2301      	movne	r3, #1
 8014c14:	700b      	strb	r3, [r1, #0]
 8014c16:	2000      	movs	r0, #0
 8014c18:	4770      	bx	lr
 8014c1a:	200b      	movs	r0, #11
 8014c1c:	4770      	bx	lr
 8014c1e:	bf00      	nop

08014c20 <rcl_timer_get_guard_condition>:
 8014c20:	b130      	cbz	r0, 8014c30 <rcl_timer_get_guard_condition+0x10>
 8014c22:	6800      	ldr	r0, [r0, #0]
 8014c24:	b120      	cbz	r0, 8014c30 <rcl_timer_get_guard_condition+0x10>
 8014c26:	68c3      	ldr	r3, [r0, #12]
 8014c28:	b10b      	cbz	r3, 8014c2e <rcl_timer_get_guard_condition+0xe>
 8014c2a:	3008      	adds	r0, #8
 8014c2c:	4770      	bx	lr
 8014c2e:	4618      	mov	r0, r3
 8014c30:	4770      	bx	lr
 8014c32:	bf00      	nop

08014c34 <rcl_validate_enclave_name_with_size>:
 8014c34:	b5f0      	push	{r4, r5, r6, r7, lr}
 8014c36:	b0c3      	sub	sp, #268	@ 0x10c
 8014c38:	b1d0      	cbz	r0, 8014c70 <rcl_validate_enclave_name_with_size+0x3c>
 8014c3a:	4615      	mov	r5, r2
 8014c3c:	b1c2      	cbz	r2, 8014c70 <rcl_validate_enclave_name_with_size+0x3c>
 8014c3e:	461f      	mov	r7, r3
 8014c40:	466a      	mov	r2, sp
 8014c42:	ab01      	add	r3, sp, #4
 8014c44:	460e      	mov	r6, r1
 8014c46:	f001 f983 	bl	8015f50 <rmw_validate_namespace_with_size>
 8014c4a:	4604      	mov	r4, r0
 8014c4c:	b9e0      	cbnz	r0, 8014c88 <rcl_validate_enclave_name_with_size+0x54>
 8014c4e:	9b00      	ldr	r3, [sp, #0]
 8014c50:	b923      	cbnz	r3, 8014c5c <rcl_validate_enclave_name_with_size+0x28>
 8014c52:	2300      	movs	r3, #0
 8014c54:	602b      	str	r3, [r5, #0]
 8014c56:	4620      	mov	r0, r4
 8014c58:	b043      	add	sp, #268	@ 0x10c
 8014c5a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014c5c:	2b07      	cmp	r3, #7
 8014c5e:	d00b      	beq.n	8014c78 <rcl_validate_enclave_name_with_size+0x44>
 8014c60:	1e5a      	subs	r2, r3, #1
 8014c62:	2a05      	cmp	r2, #5
 8014c64:	d82e      	bhi.n	8014cc4 <rcl_validate_enclave_name_with_size+0x90>
 8014c66:	e8df f002 	tbb	[pc, r2]
 8014c6a:	211e      	.short	0x211e
 8014c6c:	152a2724 	.word	0x152a2724
 8014c70:	240b      	movs	r4, #11
 8014c72:	4620      	mov	r0, r4
 8014c74:	b043      	add	sp, #268	@ 0x10c
 8014c76:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014c78:	2eff      	cmp	r6, #255	@ 0xff
 8014c7a:	d9ea      	bls.n	8014c52 <rcl_validate_enclave_name_with_size+0x1e>
 8014c7c:	602b      	str	r3, [r5, #0]
 8014c7e:	2f00      	cmp	r7, #0
 8014c80:	d0e9      	beq.n	8014c56 <rcl_validate_enclave_name_with_size+0x22>
 8014c82:	23fe      	movs	r3, #254	@ 0xfe
 8014c84:	603b      	str	r3, [r7, #0]
 8014c86:	e7e6      	b.n	8014c56 <rcl_validate_enclave_name_with_size+0x22>
 8014c88:	f7fe fb2e 	bl	80132e8 <rcl_convert_rmw_ret_to_rcl_ret>
 8014c8c:	4604      	mov	r4, r0
 8014c8e:	4620      	mov	r0, r4
 8014c90:	b043      	add	sp, #268	@ 0x10c
 8014c92:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014c94:	2306      	movs	r3, #6
 8014c96:	602b      	str	r3, [r5, #0]
 8014c98:	2f00      	cmp	r7, #0
 8014c9a:	d0dc      	beq.n	8014c56 <rcl_validate_enclave_name_with_size+0x22>
 8014c9c:	9b01      	ldr	r3, [sp, #4]
 8014c9e:	603b      	str	r3, [r7, #0]
 8014ca0:	4620      	mov	r0, r4
 8014ca2:	b043      	add	sp, #268	@ 0x10c
 8014ca4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014ca6:	2301      	movs	r3, #1
 8014ca8:	602b      	str	r3, [r5, #0]
 8014caa:	e7f5      	b.n	8014c98 <rcl_validate_enclave_name_with_size+0x64>
 8014cac:	2302      	movs	r3, #2
 8014cae:	602b      	str	r3, [r5, #0]
 8014cb0:	e7f2      	b.n	8014c98 <rcl_validate_enclave_name_with_size+0x64>
 8014cb2:	2303      	movs	r3, #3
 8014cb4:	602b      	str	r3, [r5, #0]
 8014cb6:	e7ef      	b.n	8014c98 <rcl_validate_enclave_name_with_size+0x64>
 8014cb8:	2304      	movs	r3, #4
 8014cba:	602b      	str	r3, [r5, #0]
 8014cbc:	e7ec      	b.n	8014c98 <rcl_validate_enclave_name_with_size+0x64>
 8014cbe:	2305      	movs	r3, #5
 8014cc0:	602b      	str	r3, [r5, #0]
 8014cc2:	e7e9      	b.n	8014c98 <rcl_validate_enclave_name_with_size+0x64>
 8014cc4:	4a03      	ldr	r2, [pc, #12]	@ (8014cd4 <rcl_validate_enclave_name_with_size+0xa0>)
 8014cc6:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8014cca:	a802      	add	r0, sp, #8
 8014ccc:	f001 f8a4 	bl	8015e18 <rcutils_snprintf>
 8014cd0:	2401      	movs	r4, #1
 8014cd2:	e7c0      	b.n	8014c56 <rcl_validate_enclave_name_with_size+0x22>
 8014cd4:	0801bf64 	.word	0x0801bf64

08014cd8 <rcl_validate_enclave_name>:
 8014cd8:	b168      	cbz	r0, 8014cf6 <rcl_validate_enclave_name+0x1e>
 8014cda:	b570      	push	{r4, r5, r6, lr}
 8014cdc:	460d      	mov	r5, r1
 8014cde:	4616      	mov	r6, r2
 8014ce0:	4604      	mov	r4, r0
 8014ce2:	f7eb fa7f 	bl	80001e4 <strlen>
 8014ce6:	4633      	mov	r3, r6
 8014ce8:	4601      	mov	r1, r0
 8014cea:	462a      	mov	r2, r5
 8014cec:	4620      	mov	r0, r4
 8014cee:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8014cf2:	f7ff bf9f 	b.w	8014c34 <rcl_validate_enclave_name_with_size>
 8014cf6:	200b      	movs	r0, #11
 8014cf8:	4770      	bx	lr
 8014cfa:	bf00      	nop

08014cfc <rcl_validate_topic_name>:
 8014cfc:	2800      	cmp	r0, #0
 8014cfe:	f000 808b 	beq.w	8014e18 <rcl_validate_topic_name+0x11c>
 8014d02:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8014d06:	460e      	mov	r6, r1
 8014d08:	2900      	cmp	r1, #0
 8014d0a:	f000 808c 	beq.w	8014e26 <rcl_validate_topic_name+0x12a>
 8014d0e:	4617      	mov	r7, r2
 8014d10:	4605      	mov	r5, r0
 8014d12:	f7eb fa67 	bl	80001e4 <strlen>
 8014d16:	b1b0      	cbz	r0, 8014d46 <rcl_validate_topic_name+0x4a>
 8014d18:	f895 9000 	ldrb.w	r9, [r5]
 8014d1c:	f8df c1ac 	ldr.w	ip, [pc, #428]	@ 8014ecc <rcl_validate_topic_name+0x1d0>
 8014d20:	f81c 3009 	ldrb.w	r3, [ip, r9]
 8014d24:	f013 0304 	ands.w	r3, r3, #4
 8014d28:	d178      	bne.n	8014e1c <rcl_validate_topic_name+0x120>
 8014d2a:	f100 38ff 	add.w	r8, r0, #4294967295	@ 0xffffffff
 8014d2e:	f815 2008 	ldrb.w	r2, [r5, r8]
 8014d32:	2a2f      	cmp	r2, #47	@ 0x2f
 8014d34:	d10e      	bne.n	8014d54 <rcl_validate_topic_name+0x58>
 8014d36:	2202      	movs	r2, #2
 8014d38:	6032      	str	r2, [r6, #0]
 8014d3a:	b36f      	cbz	r7, 8014d98 <rcl_validate_topic_name+0x9c>
 8014d3c:	f8c7 8000 	str.w	r8, [r7]
 8014d40:	4618      	mov	r0, r3
 8014d42:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014d46:	2301      	movs	r3, #1
 8014d48:	6033      	str	r3, [r6, #0]
 8014d4a:	b32f      	cbz	r7, 8014d98 <rcl_validate_topic_name+0x9c>
 8014d4c:	2000      	movs	r0, #0
 8014d4e:	6038      	str	r0, [r7, #0]
 8014d50:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014d54:	461c      	mov	r4, r3
 8014d56:	4619      	mov	r1, r3
 8014d58:	f105 3aff 	add.w	sl, r5, #4294967295	@ 0xffffffff
 8014d5c:	f81a 2f01 	ldrb.w	r2, [sl, #1]!
 8014d60:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 8014d64:	f1be 0f09 	cmp.w	lr, #9
 8014d68:	d946      	bls.n	8014df8 <rcl_validate_topic_name+0xfc>
 8014d6a:	f022 0e20 	bic.w	lr, r2, #32
 8014d6e:	f1ae 0e41 	sub.w	lr, lr, #65	@ 0x41
 8014d72:	f1be 0f19 	cmp.w	lr, #25
 8014d76:	d93f      	bls.n	8014df8 <rcl_validate_topic_name+0xfc>
 8014d78:	2a5f      	cmp	r2, #95	@ 0x5f
 8014d7a:	d014      	beq.n	8014da6 <rcl_validate_topic_name+0xaa>
 8014d7c:	2a2f      	cmp	r2, #47	@ 0x2f
 8014d7e:	d05b      	beq.n	8014e38 <rcl_validate_topic_name+0x13c>
 8014d80:	2a7e      	cmp	r2, #126	@ 0x7e
 8014d82:	d052      	beq.n	8014e2a <rcl_validate_topic_name+0x12e>
 8014d84:	2a7b      	cmp	r2, #123	@ 0x7b
 8014d86:	d00a      	beq.n	8014d9e <rcl_validate_topic_name+0xa2>
 8014d88:	2a7d      	cmp	r2, #125	@ 0x7d
 8014d8a:	d16f      	bne.n	8014e6c <rcl_validate_topic_name+0x170>
 8014d8c:	2c00      	cmp	r4, #0
 8014d8e:	d15e      	bne.n	8014e4e <rcl_validate_topic_name+0x152>
 8014d90:	2305      	movs	r3, #5
 8014d92:	6033      	str	r3, [r6, #0]
 8014d94:	b107      	cbz	r7, 8014d98 <rcl_validate_topic_name+0x9c>
 8014d96:	6039      	str	r1, [r7, #0]
 8014d98:	2000      	movs	r0, #0
 8014d9a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014d9e:	2c00      	cmp	r4, #0
 8014da0:	d14c      	bne.n	8014e3c <rcl_validate_topic_name+0x140>
 8014da2:	460b      	mov	r3, r1
 8014da4:	2401      	movs	r4, #1
 8014da6:	3101      	adds	r1, #1
 8014da8:	4288      	cmp	r0, r1
 8014daa:	d1d7      	bne.n	8014d5c <rcl_validate_topic_name+0x60>
 8014dac:	2c00      	cmp	r4, #0
 8014dae:	d156      	bne.n	8014e5e <rcl_validate_topic_name+0x162>
 8014db0:	f1b9 0f7e 	cmp.w	r9, #126	@ 0x7e
 8014db4:	4620      	mov	r0, r4
 8014db6:	d061      	beq.n	8014e7c <rcl_validate_topic_name+0x180>
 8014db8:	f108 0e01 	add.w	lr, r8, #1
 8014dbc:	e007      	b.n	8014dce <rcl_validate_topic_name+0xd2>
 8014dbe:	2801      	cmp	r0, #1
 8014dc0:	d047      	beq.n	8014e52 <rcl_validate_topic_name+0x156>
 8014dc2:	461a      	mov	r2, r3
 8014dc4:	4291      	cmp	r1, r2
 8014dc6:	4618      	mov	r0, r3
 8014dc8:	f105 0501 	add.w	r5, r5, #1
 8014dcc:	d944      	bls.n	8014e58 <rcl_validate_topic_name+0x15c>
 8014dce:	4580      	cmp	r8, r0
 8014dd0:	f100 0301 	add.w	r3, r0, #1
 8014dd4:	d037      	beq.n	8014e46 <rcl_validate_topic_name+0x14a>
 8014dd6:	782a      	ldrb	r2, [r5, #0]
 8014dd8:	2a2f      	cmp	r2, #47	@ 0x2f
 8014dda:	d1f0      	bne.n	8014dbe <rcl_validate_topic_name+0xc2>
 8014ddc:	786b      	ldrb	r3, [r5, #1]
 8014dde:	f81c 4003 	ldrb.w	r4, [ip, r3]
 8014de2:	1c43      	adds	r3, r0, #1
 8014de4:	0760      	lsls	r0, r4, #29
 8014de6:	461a      	mov	r2, r3
 8014de8:	d5ec      	bpl.n	8014dc4 <rcl_validate_topic_name+0xc8>
 8014dea:	2304      	movs	r3, #4
 8014dec:	6033      	str	r3, [r6, #0]
 8014dee:	2f00      	cmp	r7, #0
 8014df0:	d0d2      	beq.n	8014d98 <rcl_validate_topic_name+0x9c>
 8014df2:	603a      	str	r2, [r7, #0]
 8014df4:	2000      	movs	r0, #0
 8014df6:	e7ab      	b.n	8014d50 <rcl_validate_topic_name+0x54>
 8014df8:	f81c 2002 	ldrb.w	r2, [ip, r2]
 8014dfc:	0752      	lsls	r2, r2, #29
 8014dfe:	d5d2      	bpl.n	8014da6 <rcl_validate_topic_name+0xaa>
 8014e00:	2c00      	cmp	r4, #0
 8014e02:	d0d0      	beq.n	8014da6 <rcl_validate_topic_name+0xaa>
 8014e04:	2900      	cmp	r1, #0
 8014e06:	d0ce      	beq.n	8014da6 <rcl_validate_topic_name+0xaa>
 8014e08:	1e4a      	subs	r2, r1, #1
 8014e0a:	429a      	cmp	r2, r3
 8014e0c:	d1cb      	bne.n	8014da6 <rcl_validate_topic_name+0xaa>
 8014e0e:	2309      	movs	r3, #9
 8014e10:	6033      	str	r3, [r6, #0]
 8014e12:	2f00      	cmp	r7, #0
 8014e14:	d1bf      	bne.n	8014d96 <rcl_validate_topic_name+0x9a>
 8014e16:	e7bf      	b.n	8014d98 <rcl_validate_topic_name+0x9c>
 8014e18:	200b      	movs	r0, #11
 8014e1a:	4770      	bx	lr
 8014e1c:	2304      	movs	r3, #4
 8014e1e:	6033      	str	r3, [r6, #0]
 8014e20:	2f00      	cmp	r7, #0
 8014e22:	d193      	bne.n	8014d4c <rcl_validate_topic_name+0x50>
 8014e24:	e7b8      	b.n	8014d98 <rcl_validate_topic_name+0x9c>
 8014e26:	200b      	movs	r0, #11
 8014e28:	e792      	b.n	8014d50 <rcl_validate_topic_name+0x54>
 8014e2a:	2900      	cmp	r1, #0
 8014e2c:	d0bb      	beq.n	8014da6 <rcl_validate_topic_name+0xaa>
 8014e2e:	2306      	movs	r3, #6
 8014e30:	6033      	str	r3, [r6, #0]
 8014e32:	2f00      	cmp	r7, #0
 8014e34:	d1af      	bne.n	8014d96 <rcl_validate_topic_name+0x9a>
 8014e36:	e7af      	b.n	8014d98 <rcl_validate_topic_name+0x9c>
 8014e38:	2c00      	cmp	r4, #0
 8014e3a:	d0b4      	beq.n	8014da6 <rcl_validate_topic_name+0xaa>
 8014e3c:	2308      	movs	r3, #8
 8014e3e:	6033      	str	r3, [r6, #0]
 8014e40:	2f00      	cmp	r7, #0
 8014e42:	d1a8      	bne.n	8014d96 <rcl_validate_topic_name+0x9a>
 8014e44:	e7a8      	b.n	8014d98 <rcl_validate_topic_name+0x9c>
 8014e46:	4672      	mov	r2, lr
 8014e48:	f108 0301 	add.w	r3, r8, #1
 8014e4c:	e7ba      	b.n	8014dc4 <rcl_validate_topic_name+0xc8>
 8014e4e:	2400      	movs	r4, #0
 8014e50:	e7a9      	b.n	8014da6 <rcl_validate_topic_name+0xaa>
 8014e52:	2202      	movs	r2, #2
 8014e54:	4613      	mov	r3, r2
 8014e56:	e7b5      	b.n	8014dc4 <rcl_validate_topic_name+0xc8>
 8014e58:	2000      	movs	r0, #0
 8014e5a:	6030      	str	r0, [r6, #0]
 8014e5c:	e778      	b.n	8014d50 <rcl_validate_topic_name+0x54>
 8014e5e:	2205      	movs	r2, #5
 8014e60:	6032      	str	r2, [r6, #0]
 8014e62:	2f00      	cmp	r7, #0
 8014e64:	d098      	beq.n	8014d98 <rcl_validate_topic_name+0x9c>
 8014e66:	603b      	str	r3, [r7, #0]
 8014e68:	2000      	movs	r0, #0
 8014e6a:	e771      	b.n	8014d50 <rcl_validate_topic_name+0x54>
 8014e6c:	2c00      	cmp	r4, #0
 8014e6e:	bf14      	ite	ne
 8014e70:	2308      	movne	r3, #8
 8014e72:	2303      	moveq	r3, #3
 8014e74:	6033      	str	r3, [r6, #0]
 8014e76:	2f00      	cmp	r7, #0
 8014e78:	d18d      	bne.n	8014d96 <rcl_validate_topic_name+0x9a>
 8014e7a:	e78d      	b.n	8014d98 <rcl_validate_topic_name+0x9c>
 8014e7c:	f108 0401 	add.w	r4, r8, #1
 8014e80:	e007      	b.n	8014e92 <rcl_validate_topic_name+0x196>
 8014e82:	2801      	cmp	r0, #1
 8014e84:	d019      	beq.n	8014eba <rcl_validate_topic_name+0x1be>
 8014e86:	461a      	mov	r2, r3
 8014e88:	4291      	cmp	r1, r2
 8014e8a:	4618      	mov	r0, r3
 8014e8c:	f105 0501 	add.w	r5, r5, #1
 8014e90:	d9e2      	bls.n	8014e58 <rcl_validate_topic_name+0x15c>
 8014e92:	4580      	cmp	r8, r0
 8014e94:	f100 0301 	add.w	r3, r0, #1
 8014e98:	d00b      	beq.n	8014eb2 <rcl_validate_topic_name+0x1b6>
 8014e9a:	782a      	ldrb	r2, [r5, #0]
 8014e9c:	2a2f      	cmp	r2, #47	@ 0x2f
 8014e9e:	d1f0      	bne.n	8014e82 <rcl_validate_topic_name+0x186>
 8014ea0:	786b      	ldrb	r3, [r5, #1]
 8014ea2:	f81c e003 	ldrb.w	lr, [ip, r3]
 8014ea6:	1c43      	adds	r3, r0, #1
 8014ea8:	f01e 0f04 	tst.w	lr, #4
 8014eac:	461a      	mov	r2, r3
 8014eae:	d0eb      	beq.n	8014e88 <rcl_validate_topic_name+0x18c>
 8014eb0:	e79b      	b.n	8014dea <rcl_validate_topic_name+0xee>
 8014eb2:	4622      	mov	r2, r4
 8014eb4:	f108 0301 	add.w	r3, r8, #1
 8014eb8:	e7e6      	b.n	8014e88 <rcl_validate_topic_name+0x18c>
 8014eba:	2307      	movs	r3, #7
 8014ebc:	6033      	str	r3, [r6, #0]
 8014ebe:	2f00      	cmp	r7, #0
 8014ec0:	f43f af6a 	beq.w	8014d98 <rcl_validate_topic_name+0x9c>
 8014ec4:	6038      	str	r0, [r7, #0]
 8014ec6:	2000      	movs	r0, #0
 8014ec8:	e742      	b.n	8014d50 <rcl_validate_topic_name+0x54>
 8014eca:	bf00      	nop
 8014ecc:	0801c600 	.word	0x0801c600

08014ed0 <rcl_get_zero_initialized_wait_set>:
 8014ed0:	b470      	push	{r4, r5, r6}
 8014ed2:	4d07      	ldr	r5, [pc, #28]	@ (8014ef0 <rcl_get_zero_initialized_wait_set+0x20>)
 8014ed4:	4606      	mov	r6, r0
 8014ed6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8014ed8:	4634      	mov	r4, r6
 8014eda:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8014edc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8014ede:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8014ee0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8014ee2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8014ee4:	682b      	ldr	r3, [r5, #0]
 8014ee6:	6023      	str	r3, [r4, #0]
 8014ee8:	4630      	mov	r0, r6
 8014eea:	bc70      	pop	{r4, r5, r6}
 8014eec:	4770      	bx	lr
 8014eee:	bf00      	nop
 8014ef0:	0801bfc4 	.word	0x0801bfc4

08014ef4 <rcl_wait_set_is_valid>:
 8014ef4:	b118      	cbz	r0, 8014efe <rcl_wait_set_is_valid+0xa>
 8014ef6:	6b00      	ldr	r0, [r0, #48]	@ 0x30
 8014ef8:	3800      	subs	r0, #0
 8014efa:	bf18      	it	ne
 8014efc:	2001      	movne	r0, #1
 8014efe:	4770      	bx	lr

08014f00 <rcl_wait_set_fini>:
 8014f00:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014f04:	b082      	sub	sp, #8
 8014f06:	2800      	cmp	r0, #0
 8014f08:	f000 8095 	beq.w	8015036 <rcl_wait_set_fini+0x136>
 8014f0c:	6b06      	ldr	r6, [r0, #48]	@ 0x30
 8014f0e:	4604      	mov	r4, r0
 8014f10:	2e00      	cmp	r6, #0
 8014f12:	f000 808c 	beq.w	801502e <rcl_wait_set_fini+0x12e>
 8014f16:	6bf0      	ldr	r0, [r6, #60]	@ 0x3c
 8014f18:	f002 f9a6 	bl	8017268 <rmw_destroy_wait_set>
 8014f1c:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 8014f1e:	1e06      	subs	r6, r0, #0
 8014f20:	bf18      	it	ne
 8014f22:	f44f 7661 	movne.w	r6, #900	@ 0x384
 8014f26:	2d00      	cmp	r5, #0
 8014f28:	f000 8081 	beq.w	801502e <rcl_wait_set_fini+0x12e>
 8014f2c:	6820      	ldr	r0, [r4, #0]
 8014f2e:	f8d5 804c 	ldr.w	r8, [r5, #76]	@ 0x4c
 8014f32:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 8014f34:	2700      	movs	r7, #0
 8014f36:	6067      	str	r7, [r4, #4]
 8014f38:	602f      	str	r7, [r5, #0]
 8014f3a:	b120      	cbz	r0, 8014f46 <rcl_wait_set_fini+0x46>
 8014f3c:	9101      	str	r1, [sp, #4]
 8014f3e:	47c0      	blx	r8
 8014f40:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 8014f42:	9901      	ldr	r1, [sp, #4]
 8014f44:	6027      	str	r7, [r4, #0]
 8014f46:	68a8      	ldr	r0, [r5, #8]
 8014f48:	b120      	cbz	r0, 8014f54 <rcl_wait_set_fini+0x54>
 8014f4a:	47c0      	blx	r8
 8014f4c:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 8014f4e:	2300      	movs	r3, #0
 8014f50:	e9c5 3301 	strd	r3, r3, [r5, #4]
 8014f54:	68a0      	ldr	r0, [r4, #8]
 8014f56:	6cef      	ldr	r7, [r5, #76]	@ 0x4c
 8014f58:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 8014f5a:	f04f 0800 	mov.w	r8, #0
 8014f5e:	f8c4 800c 	str.w	r8, [r4, #12]
 8014f62:	f8c5 800c 	str.w	r8, [r5, #12]
 8014f66:	b128      	cbz	r0, 8014f74 <rcl_wait_set_fini+0x74>
 8014f68:	47b8      	blx	r7
 8014f6a:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 8014f6c:	f8c4 8008 	str.w	r8, [r4, #8]
 8014f70:	6cef      	ldr	r7, [r5, #76]	@ 0x4c
 8014f72:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 8014f74:	6968      	ldr	r0, [r5, #20]
 8014f76:	f04f 0800 	mov.w	r8, #0
 8014f7a:	f8c5 8010 	str.w	r8, [r5, #16]
 8014f7e:	b128      	cbz	r0, 8014f8c <rcl_wait_set_fini+0x8c>
 8014f80:	47b8      	blx	r7
 8014f82:	f8c5 8014 	str.w	r8, [r5, #20]
 8014f86:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 8014f88:	6cef      	ldr	r7, [r5, #76]	@ 0x4c
 8014f8a:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 8014f8c:	6920      	ldr	r0, [r4, #16]
 8014f8e:	f04f 0800 	mov.w	r8, #0
 8014f92:	f8c4 8014 	str.w	r8, [r4, #20]
 8014f96:	f8c5 8040 	str.w	r8, [r5, #64]	@ 0x40
 8014f9a:	b128      	cbz	r0, 8014fa8 <rcl_wait_set_fini+0xa8>
 8014f9c:	47b8      	blx	r7
 8014f9e:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 8014fa0:	f8c4 8010 	str.w	r8, [r4, #16]
 8014fa4:	6cef      	ldr	r7, [r5, #76]	@ 0x4c
 8014fa6:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 8014fa8:	69a0      	ldr	r0, [r4, #24]
 8014faa:	f04f 0800 	mov.w	r8, #0
 8014fae:	f8c4 801c 	str.w	r8, [r4, #28]
 8014fb2:	f8c5 8018 	str.w	r8, [r5, #24]
 8014fb6:	b128      	cbz	r0, 8014fc4 <rcl_wait_set_fini+0xc4>
 8014fb8:	9101      	str	r1, [sp, #4]
 8014fba:	47b8      	blx	r7
 8014fbc:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 8014fbe:	9901      	ldr	r1, [sp, #4]
 8014fc0:	f8c4 8018 	str.w	r8, [r4, #24]
 8014fc4:	6a28      	ldr	r0, [r5, #32]
 8014fc6:	b120      	cbz	r0, 8014fd2 <rcl_wait_set_fini+0xd2>
 8014fc8:	47b8      	blx	r7
 8014fca:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 8014fcc:	2300      	movs	r3, #0
 8014fce:	e9c5 3307 	strd	r3, r3, [r5, #28]
 8014fd2:	6a20      	ldr	r0, [r4, #32]
 8014fd4:	f8d5 804c 	ldr.w	r8, [r5, #76]	@ 0x4c
 8014fd8:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 8014fda:	2700      	movs	r7, #0
 8014fdc:	6267      	str	r7, [r4, #36]	@ 0x24
 8014fde:	626f      	str	r7, [r5, #36]	@ 0x24
 8014fe0:	b120      	cbz	r0, 8014fec <rcl_wait_set_fini+0xec>
 8014fe2:	9101      	str	r1, [sp, #4]
 8014fe4:	47c0      	blx	r8
 8014fe6:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 8014fe8:	9901      	ldr	r1, [sp, #4]
 8014fea:	6227      	str	r7, [r4, #32]
 8014fec:	6ae8      	ldr	r0, [r5, #44]	@ 0x2c
 8014fee:	b120      	cbz	r0, 8014ffa <rcl_wait_set_fini+0xfa>
 8014ff0:	47c0      	blx	r8
 8014ff2:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 8014ff4:	2300      	movs	r3, #0
 8014ff6:	e9c5 330a 	strd	r3, r3, [r5, #40]	@ 0x28
 8014ffa:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 8014ffc:	f8d5 804c 	ldr.w	r8, [r5, #76]	@ 0x4c
 8015000:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 8015002:	2700      	movs	r7, #0
 8015004:	62e7      	str	r7, [r4, #44]	@ 0x2c
 8015006:	632f      	str	r7, [r5, #48]	@ 0x30
 8015008:	b120      	cbz	r0, 8015014 <rcl_wait_set_fini+0x114>
 801500a:	9101      	str	r1, [sp, #4]
 801500c:	47c0      	blx	r8
 801500e:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 8015010:	9901      	ldr	r1, [sp, #4]
 8015012:	62a7      	str	r7, [r4, #40]	@ 0x28
 8015014:	6ba8      	ldr	r0, [r5, #56]	@ 0x38
 8015016:	b120      	cbz	r0, 8015022 <rcl_wait_set_fini+0x122>
 8015018:	47c0      	blx	r8
 801501a:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 801501c:	2300      	movs	r3, #0
 801501e:	e9c5 330d 	strd	r3, r3, [r5, #52]	@ 0x34
 8015022:	6ceb      	ldr	r3, [r5, #76]	@ 0x4c
 8015024:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 8015026:	4628      	mov	r0, r5
 8015028:	4798      	blx	r3
 801502a:	2300      	movs	r3, #0
 801502c:	6323      	str	r3, [r4, #48]	@ 0x30
 801502e:	4630      	mov	r0, r6
 8015030:	b002      	add	sp, #8
 8015032:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015036:	260b      	movs	r6, #11
 8015038:	4630      	mov	r0, r6
 801503a:	b002      	add	sp, #8
 801503c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08015040 <rcl_wait_set_add_subscription>:
 8015040:	b320      	cbz	r0, 801508c <rcl_wait_set_add_subscription+0x4c>
 8015042:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8015044:	b570      	push	{r4, r5, r6, lr}
 8015046:	4604      	mov	r4, r0
 8015048:	b1d3      	cbz	r3, 8015080 <rcl_wait_set_add_subscription+0x40>
 801504a:	b319      	cbz	r1, 8015094 <rcl_wait_set_add_subscription+0x54>
 801504c:	681d      	ldr	r5, [r3, #0]
 801504e:	6860      	ldr	r0, [r4, #4]
 8015050:	4285      	cmp	r5, r0
 8015052:	d218      	bcs.n	8015086 <rcl_wait_set_add_subscription+0x46>
 8015054:	6820      	ldr	r0, [r4, #0]
 8015056:	1c6e      	adds	r6, r5, #1
 8015058:	601e      	str	r6, [r3, #0]
 801505a:	f840 1025 	str.w	r1, [r0, r5, lsl #2]
 801505e:	b102      	cbz	r2, 8015062 <rcl_wait_set_add_subscription+0x22>
 8015060:	6015      	str	r5, [r2, #0]
 8015062:	4608      	mov	r0, r1
 8015064:	f7ff fa16 	bl	8014494 <rcl_subscription_get_rmw_handle>
 8015068:	b190      	cbz	r0, 8015090 <rcl_wait_set_add_subscription+0x50>
 801506a:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801506c:	6842      	ldr	r2, [r0, #4]
 801506e:	689b      	ldr	r3, [r3, #8]
 8015070:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8015074:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 8015076:	6853      	ldr	r3, [r2, #4]
 8015078:	3301      	adds	r3, #1
 801507a:	6053      	str	r3, [r2, #4]
 801507c:	2000      	movs	r0, #0
 801507e:	bd70      	pop	{r4, r5, r6, pc}
 8015080:	f44f 7061 	mov.w	r0, #900	@ 0x384
 8015084:	bd70      	pop	{r4, r5, r6, pc}
 8015086:	f240 3086 	movw	r0, #902	@ 0x386
 801508a:	bd70      	pop	{r4, r5, r6, pc}
 801508c:	200b      	movs	r0, #11
 801508e:	4770      	bx	lr
 8015090:	2001      	movs	r0, #1
 8015092:	bd70      	pop	{r4, r5, r6, pc}
 8015094:	200b      	movs	r0, #11
 8015096:	bd70      	pop	{r4, r5, r6, pc}

08015098 <rcl_wait_set_clear>:
 8015098:	2800      	cmp	r0, #0
 801509a:	d073      	beq.n	8015184 <rcl_wait_set_clear+0xec>
 801509c:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 801509e:	b510      	push	{r4, lr}
 80150a0:	4604      	mov	r4, r0
 80150a2:	2b00      	cmp	r3, #0
 80150a4:	d070      	beq.n	8015188 <rcl_wait_set_clear+0xf0>
 80150a6:	6800      	ldr	r0, [r0, #0]
 80150a8:	b138      	cbz	r0, 80150ba <rcl_wait_set_clear+0x22>
 80150aa:	6862      	ldr	r2, [r4, #4]
 80150ac:	2100      	movs	r1, #0
 80150ae:	0092      	lsls	r2, r2, #2
 80150b0:	f004 fd70 	bl	8019b94 <memset>
 80150b4:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80150b6:	2200      	movs	r2, #0
 80150b8:	601a      	str	r2, [r3, #0]
 80150ba:	68a0      	ldr	r0, [r4, #8]
 80150bc:	b138      	cbz	r0, 80150ce <rcl_wait_set_clear+0x36>
 80150be:	68e2      	ldr	r2, [r4, #12]
 80150c0:	2100      	movs	r1, #0
 80150c2:	0092      	lsls	r2, r2, #2
 80150c4:	f004 fd66 	bl	8019b94 <memset>
 80150c8:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80150ca:	2200      	movs	r2, #0
 80150cc:	60da      	str	r2, [r3, #12]
 80150ce:	69a0      	ldr	r0, [r4, #24]
 80150d0:	b138      	cbz	r0, 80150e2 <rcl_wait_set_clear+0x4a>
 80150d2:	69e2      	ldr	r2, [r4, #28]
 80150d4:	2100      	movs	r1, #0
 80150d6:	0092      	lsls	r2, r2, #2
 80150d8:	f004 fd5c 	bl	8019b94 <memset>
 80150dc:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80150de:	2200      	movs	r2, #0
 80150e0:	619a      	str	r2, [r3, #24]
 80150e2:	6a20      	ldr	r0, [r4, #32]
 80150e4:	b138      	cbz	r0, 80150f6 <rcl_wait_set_clear+0x5e>
 80150e6:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 80150e8:	2100      	movs	r1, #0
 80150ea:	0092      	lsls	r2, r2, #2
 80150ec:	f004 fd52 	bl	8019b94 <memset>
 80150f0:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80150f2:	2200      	movs	r2, #0
 80150f4:	625a      	str	r2, [r3, #36]	@ 0x24
 80150f6:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 80150f8:	b138      	cbz	r0, 801510a <rcl_wait_set_clear+0x72>
 80150fa:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 80150fc:	2100      	movs	r1, #0
 80150fe:	0092      	lsls	r2, r2, #2
 8015100:	f004 fd48 	bl	8019b94 <memset>
 8015104:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8015106:	2200      	movs	r2, #0
 8015108:	631a      	str	r2, [r3, #48]	@ 0x30
 801510a:	6920      	ldr	r0, [r4, #16]
 801510c:	b138      	cbz	r0, 801511e <rcl_wait_set_clear+0x86>
 801510e:	6962      	ldr	r2, [r4, #20]
 8015110:	2100      	movs	r1, #0
 8015112:	0092      	lsls	r2, r2, #2
 8015114:	f004 fd3e 	bl	8019b94 <memset>
 8015118:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801511a:	2200      	movs	r2, #0
 801511c:	641a      	str	r2, [r3, #64]	@ 0x40
 801511e:	6898      	ldr	r0, [r3, #8]
 8015120:	b138      	cbz	r0, 8015132 <rcl_wait_set_clear+0x9a>
 8015122:	685a      	ldr	r2, [r3, #4]
 8015124:	2100      	movs	r1, #0
 8015126:	0092      	lsls	r2, r2, #2
 8015128:	f004 fd34 	bl	8019b94 <memset>
 801512c:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801512e:	2200      	movs	r2, #0
 8015130:	605a      	str	r2, [r3, #4]
 8015132:	6958      	ldr	r0, [r3, #20]
 8015134:	b138      	cbz	r0, 8015146 <rcl_wait_set_clear+0xae>
 8015136:	691a      	ldr	r2, [r3, #16]
 8015138:	2100      	movs	r1, #0
 801513a:	0092      	lsls	r2, r2, #2
 801513c:	f004 fd2a 	bl	8019b94 <memset>
 8015140:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8015142:	2200      	movs	r2, #0
 8015144:	611a      	str	r2, [r3, #16]
 8015146:	6a18      	ldr	r0, [r3, #32]
 8015148:	b138      	cbz	r0, 801515a <rcl_wait_set_clear+0xc2>
 801514a:	69da      	ldr	r2, [r3, #28]
 801514c:	2100      	movs	r1, #0
 801514e:	0092      	lsls	r2, r2, #2
 8015150:	f004 fd20 	bl	8019b94 <memset>
 8015154:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8015156:	2200      	movs	r2, #0
 8015158:	61da      	str	r2, [r3, #28]
 801515a:	6ad8      	ldr	r0, [r3, #44]	@ 0x2c
 801515c:	b138      	cbz	r0, 801516e <rcl_wait_set_clear+0xd6>
 801515e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8015160:	2100      	movs	r1, #0
 8015162:	0092      	lsls	r2, r2, #2
 8015164:	f004 fd16 	bl	8019b94 <memset>
 8015168:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801516a:	2200      	movs	r2, #0
 801516c:	629a      	str	r2, [r3, #40]	@ 0x28
 801516e:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8015170:	b138      	cbz	r0, 8015182 <rcl_wait_set_clear+0xea>
 8015172:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8015174:	2100      	movs	r1, #0
 8015176:	0092      	lsls	r2, r2, #2
 8015178:	f004 fd0c 	bl	8019b94 <memset>
 801517c:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801517e:	2000      	movs	r0, #0
 8015180:	6358      	str	r0, [r3, #52]	@ 0x34
 8015182:	bd10      	pop	{r4, pc}
 8015184:	200b      	movs	r0, #11
 8015186:	4770      	bx	lr
 8015188:	f44f 7061 	mov.w	r0, #900	@ 0x384
 801518c:	bd10      	pop	{r4, pc}
 801518e:	bf00      	nop

08015190 <rcl_wait_set_resize>:
 8015190:	2800      	cmp	r0, #0
 8015192:	f000 81a6 	beq.w	80154e2 <rcl_wait_set_resize+0x352>
 8015196:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801519a:	f8d0 a030 	ldr.w	sl, [r0, #48]	@ 0x30
 801519e:	b083      	sub	sp, #12
 80151a0:	4604      	mov	r4, r0
 80151a2:	f1ba 0f00 	cmp.w	sl, #0
 80151a6:	f000 819e 	beq.w	80154e6 <rcl_wait_set_resize+0x356>
 80151aa:	461e      	mov	r6, r3
 80151ac:	e9da b313 	ldrd	fp, r3, [sl, #76]	@ 0x4c
 80151b0:	f04f 0800 	mov.w	r8, #0
 80151b4:	f8da 9058 	ldr.w	r9, [sl, #88]	@ 0x58
 80151b8:	9300      	str	r3, [sp, #0]
 80151ba:	f8c0 8004 	str.w	r8, [r0, #4]
 80151be:	460f      	mov	r7, r1
 80151c0:	4615      	mov	r5, r2
 80151c2:	f8ca 8000 	str.w	r8, [sl]
 80151c6:	2900      	cmp	r1, #0
 80151c8:	f000 80c9 	beq.w	801535e <rcl_wait_set_resize+0x1ce>
 80151cc:	ea4f 0a81 	mov.w	sl, r1, lsl #2
 80151d0:	6800      	ldr	r0, [r0, #0]
 80151d2:	4651      	mov	r1, sl
 80151d4:	464a      	mov	r2, r9
 80151d6:	4798      	blx	r3
 80151d8:	6020      	str	r0, [r4, #0]
 80151da:	2800      	cmp	r0, #0
 80151dc:	f000 80d8 	beq.w	8015390 <rcl_wait_set_resize+0x200>
 80151e0:	4652      	mov	r2, sl
 80151e2:	4641      	mov	r1, r8
 80151e4:	f004 fcd6 	bl	8019b94 <memset>
 80151e8:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80151ea:	6067      	str	r7, [r4, #4]
 80151ec:	6898      	ldr	r0, [r3, #8]
 80151ee:	f8c3 8004 	str.w	r8, [r3, #4]
 80151f2:	9301      	str	r3, [sp, #4]
 80151f4:	464a      	mov	r2, r9
 80151f6:	9b00      	ldr	r3, [sp, #0]
 80151f8:	4651      	mov	r1, sl
 80151fa:	4798      	blx	r3
 80151fc:	9b01      	ldr	r3, [sp, #4]
 80151fe:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 8015200:	6098      	str	r0, [r3, #8]
 8015202:	6897      	ldr	r7, [r2, #8]
 8015204:	2f00      	cmp	r7, #0
 8015206:	f000 80be 	beq.w	8015386 <rcl_wait_set_resize+0x1f6>
 801520a:	4652      	mov	r2, sl
 801520c:	4641      	mov	r1, r8
 801520e:	4638      	mov	r0, r7
 8015210:	f004 fcc0 	bl	8019b94 <memset>
 8015214:	f8d4 a030 	ldr.w	sl, [r4, #48]	@ 0x30
 8015218:	f8da 8058 	ldr.w	r8, [sl, #88]	@ 0x58
 801521c:	2700      	movs	r7, #0
 801521e:	e9da 2313 	ldrd	r2, r3, [sl, #76]	@ 0x4c
 8015222:	60e7      	str	r7, [r4, #12]
 8015224:	f8ca 700c 	str.w	r7, [sl, #12]
 8015228:	2d00      	cmp	r5, #0
 801522a:	f040 80b5 	bne.w	8015398 <rcl_wait_set_resize+0x208>
 801522e:	68a0      	ldr	r0, [r4, #8]
 8015230:	b130      	cbz	r0, 8015240 <rcl_wait_set_resize+0xb0>
 8015232:	4641      	mov	r1, r8
 8015234:	4790      	blx	r2
 8015236:	f8d4 a030 	ldr.w	sl, [r4, #48]	@ 0x30
 801523a:	60a5      	str	r5, [r4, #8]
 801523c:	f8da 8058 	ldr.w	r8, [sl, #88]	@ 0x58
 8015240:	2700      	movs	r7, #0
 8015242:	19ad      	adds	r5, r5, r6
 8015244:	f8ca 7010 	str.w	r7, [sl, #16]
 8015248:	f040 80be 	bne.w	80153c8 <rcl_wait_set_resize+0x238>
 801524c:	f8da 0014 	ldr.w	r0, [sl, #20]
 8015250:	b148      	cbz	r0, 8015266 <rcl_wait_set_resize+0xd6>
 8015252:	f8da 304c 	ldr.w	r3, [sl, #76]	@ 0x4c
 8015256:	4641      	mov	r1, r8
 8015258:	4798      	blx	r3
 801525a:	f8ca 5014 	str.w	r5, [sl, #20]
 801525e:	f8d4 a030 	ldr.w	sl, [r4, #48]	@ 0x30
 8015262:	f8da 8058 	ldr.w	r8, [sl, #88]	@ 0x58
 8015266:	2500      	movs	r5, #0
 8015268:	e9da 9713 	ldrd	r9, r7, [sl, #76]	@ 0x4c
 801526c:	6165      	str	r5, [r4, #20]
 801526e:	f8ca 5040 	str.w	r5, [sl, #64]	@ 0x40
 8015272:	2e00      	cmp	r6, #0
 8015274:	f040 80bf 	bne.w	80153f6 <rcl_wait_set_resize+0x266>
 8015278:	6920      	ldr	r0, [r4, #16]
 801527a:	b140      	cbz	r0, 801528e <rcl_wait_set_resize+0xfe>
 801527c:	4641      	mov	r1, r8
 801527e:	47c8      	blx	r9
 8015280:	f8d4 a030 	ldr.w	sl, [r4, #48]	@ 0x30
 8015284:	6126      	str	r6, [r4, #16]
 8015286:	e9da 9713 	ldrd	r9, r7, [sl, #76]	@ 0x4c
 801528a:	f8da 8058 	ldr.w	r8, [sl, #88]	@ 0x58
 801528e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8015290:	2500      	movs	r5, #0
 8015292:	61e5      	str	r5, [r4, #28]
 8015294:	f8ca 5018 	str.w	r5, [sl, #24]
 8015298:	2b00      	cmp	r3, #0
 801529a:	f040 80c1 	bne.w	8015420 <rcl_wait_set_resize+0x290>
 801529e:	69a0      	ldr	r0, [r4, #24]
 80152a0:	b128      	cbz	r0, 80152ae <rcl_wait_set_resize+0x11e>
 80152a2:	4641      	mov	r1, r8
 80152a4:	47c8      	blx	r9
 80152a6:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80152a8:	f8d4 a030 	ldr.w	sl, [r4, #48]	@ 0x30
 80152ac:	61a3      	str	r3, [r4, #24]
 80152ae:	f8da 0020 	ldr.w	r0, [sl, #32]
 80152b2:	b130      	cbz	r0, 80152c2 <rcl_wait_set_resize+0x132>
 80152b4:	4641      	mov	r1, r8
 80152b6:	47c8      	blx	r9
 80152b8:	f8d4 a030 	ldr.w	sl, [r4, #48]	@ 0x30
 80152bc:	2300      	movs	r3, #0
 80152be:	e9ca 3307 	strd	r3, r3, [sl, #28]
 80152c2:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80152c4:	f8da 7058 	ldr.w	r7, [sl, #88]	@ 0x58
 80152c8:	2600      	movs	r6, #0
 80152ca:	e9da 8913 	ldrd	r8, r9, [sl, #76]	@ 0x4c
 80152ce:	6266      	str	r6, [r4, #36]	@ 0x24
 80152d0:	f8ca 6024 	str.w	r6, [sl, #36]	@ 0x24
 80152d4:	2b00      	cmp	r3, #0
 80152d6:	f000 80c8 	beq.w	801546a <rcl_wait_set_resize+0x2da>
 80152da:	ea4f 0a83 	mov.w	sl, r3, lsl #2
 80152de:	6a20      	ldr	r0, [r4, #32]
 80152e0:	4651      	mov	r1, sl
 80152e2:	463a      	mov	r2, r7
 80152e4:	47c8      	blx	r9
 80152e6:	6220      	str	r0, [r4, #32]
 80152e8:	2800      	cmp	r0, #0
 80152ea:	d051      	beq.n	8015390 <rcl_wait_set_resize+0x200>
 80152ec:	4652      	mov	r2, sl
 80152ee:	4631      	mov	r1, r6
 80152f0:	f004 fc50 	bl	8019b94 <memset>
 80152f4:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 80152f6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80152f8:	6263      	str	r3, [r4, #36]	@ 0x24
 80152fa:	6ae8      	ldr	r0, [r5, #44]	@ 0x2c
 80152fc:	62ae      	str	r6, [r5, #40]	@ 0x28
 80152fe:	463a      	mov	r2, r7
 8015300:	4651      	mov	r1, sl
 8015302:	47c8      	blx	r9
 8015304:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8015306:	62e8      	str	r0, [r5, #44]	@ 0x2c
 8015308:	6add      	ldr	r5, [r3, #44]	@ 0x2c
 801530a:	2d00      	cmp	r5, #0
 801530c:	f000 8105 	beq.w	801551a <rcl_wait_set_resize+0x38a>
 8015310:	4652      	mov	r2, sl
 8015312:	4631      	mov	r1, r6
 8015314:	4628      	mov	r0, r5
 8015316:	f004 fc3d 	bl	8019b94 <memset>
 801531a:	f8d4 a030 	ldr.w	sl, [r4, #48]	@ 0x30
 801531e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8015320:	f8da 6058 	ldr.w	r6, [sl, #88]	@ 0x58
 8015324:	2500      	movs	r5, #0
 8015326:	e9da 7913 	ldrd	r7, r9, [sl, #76]	@ 0x4c
 801532a:	62e5      	str	r5, [r4, #44]	@ 0x2c
 801532c:	f8ca 5030 	str.w	r5, [sl, #48]	@ 0x30
 8015330:	2b00      	cmp	r3, #0
 8015332:	f040 80af 	bne.w	8015494 <rcl_wait_set_resize+0x304>
 8015336:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 8015338:	b128      	cbz	r0, 8015346 <rcl_wait_set_resize+0x1b6>
 801533a:	4631      	mov	r1, r6
 801533c:	47b8      	blx	r7
 801533e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8015340:	f8d4 a030 	ldr.w	sl, [r4, #48]	@ 0x30
 8015344:	62a3      	str	r3, [r4, #40]	@ 0x28
 8015346:	f8da 0038 	ldr.w	r0, [sl, #56]	@ 0x38
 801534a:	b310      	cbz	r0, 8015392 <rcl_wait_set_resize+0x202>
 801534c:	4631      	mov	r1, r6
 801534e:	47b8      	blx	r7
 8015350:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8015352:	2000      	movs	r0, #0
 8015354:	e9c3 000d 	strd	r0, r0, [r3, #52]	@ 0x34
 8015358:	b003      	add	sp, #12
 801535a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801535e:	6800      	ldr	r0, [r0, #0]
 8015360:	b120      	cbz	r0, 801536c <rcl_wait_set_resize+0x1dc>
 8015362:	4649      	mov	r1, r9
 8015364:	47d8      	blx	fp
 8015366:	f8d4 a030 	ldr.w	sl, [r4, #48]	@ 0x30
 801536a:	6027      	str	r7, [r4, #0]
 801536c:	f8da 0008 	ldr.w	r0, [sl, #8]
 8015370:	2800      	cmp	r0, #0
 8015372:	f43f af51 	beq.w	8015218 <rcl_wait_set_resize+0x88>
 8015376:	4649      	mov	r1, r9
 8015378:	47d8      	blx	fp
 801537a:	f8d4 a030 	ldr.w	sl, [r4, #48]	@ 0x30
 801537e:	2300      	movs	r3, #0
 8015380:	e9ca 3301 	strd	r3, r3, [sl, #4]
 8015384:	e748      	b.n	8015218 <rcl_wait_set_resize+0x88>
 8015386:	6820      	ldr	r0, [r4, #0]
 8015388:	4649      	mov	r1, r9
 801538a:	47d8      	blx	fp
 801538c:	e9c4 7700 	strd	r7, r7, [r4]
 8015390:	200a      	movs	r0, #10
 8015392:	b003      	add	sp, #12
 8015394:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015398:	ea4f 0985 	mov.w	r9, r5, lsl #2
 801539c:	68a0      	ldr	r0, [r4, #8]
 801539e:	4642      	mov	r2, r8
 80153a0:	4649      	mov	r1, r9
 80153a2:	4798      	blx	r3
 80153a4:	60a0      	str	r0, [r4, #8]
 80153a6:	2800      	cmp	r0, #0
 80153a8:	d0f2      	beq.n	8015390 <rcl_wait_set_resize+0x200>
 80153aa:	4639      	mov	r1, r7
 80153ac:	464a      	mov	r2, r9
 80153ae:	f004 fbf1 	bl	8019b94 <memset>
 80153b2:	f8d4 a030 	ldr.w	sl, [r4, #48]	@ 0x30
 80153b6:	60e5      	str	r5, [r4, #12]
 80153b8:	2700      	movs	r7, #0
 80153ba:	19ad      	adds	r5, r5, r6
 80153bc:	f8da 8058 	ldr.w	r8, [sl, #88]	@ 0x58
 80153c0:	f8ca 7010 	str.w	r7, [sl, #16]
 80153c4:	f43f af42 	beq.w	801524c <rcl_wait_set_resize+0xbc>
 80153c8:	00ad      	lsls	r5, r5, #2
 80153ca:	4642      	mov	r2, r8
 80153cc:	f8da 3050 	ldr.w	r3, [sl, #80]	@ 0x50
 80153d0:	f8da 0014 	ldr.w	r0, [sl, #20]
 80153d4:	4629      	mov	r1, r5
 80153d6:	4798      	blx	r3
 80153d8:	4680      	mov	r8, r0
 80153da:	f8ca 0014 	str.w	r0, [sl, #20]
 80153de:	2800      	cmp	r0, #0
 80153e0:	f000 8084 	beq.w	80154ec <rcl_wait_set_resize+0x35c>
 80153e4:	462a      	mov	r2, r5
 80153e6:	4639      	mov	r1, r7
 80153e8:	f004 fbd4 	bl	8019b94 <memset>
 80153ec:	f8d4 a030 	ldr.w	sl, [r4, #48]	@ 0x30
 80153f0:	f8da 8058 	ldr.w	r8, [sl, #88]	@ 0x58
 80153f4:	e737      	b.n	8015266 <rcl_wait_set_resize+0xd6>
 80153f6:	ea4f 0986 	mov.w	r9, r6, lsl #2
 80153fa:	6920      	ldr	r0, [r4, #16]
 80153fc:	4642      	mov	r2, r8
 80153fe:	4649      	mov	r1, r9
 8015400:	47b8      	blx	r7
 8015402:	6120      	str	r0, [r4, #16]
 8015404:	2800      	cmp	r0, #0
 8015406:	d0c3      	beq.n	8015390 <rcl_wait_set_resize+0x200>
 8015408:	464a      	mov	r2, r9
 801540a:	4629      	mov	r1, r5
 801540c:	f004 fbc2 	bl	8019b94 <memset>
 8015410:	f8d4 a030 	ldr.w	sl, [r4, #48]	@ 0x30
 8015414:	6166      	str	r6, [r4, #20]
 8015416:	e9da 9713 	ldrd	r9, r7, [sl, #76]	@ 0x4c
 801541a:	f8da 8058 	ldr.w	r8, [sl, #88]	@ 0x58
 801541e:	e736      	b.n	801528e <rcl_wait_set_resize+0xfe>
 8015420:	009e      	lsls	r6, r3, #2
 8015422:	69a0      	ldr	r0, [r4, #24]
 8015424:	4631      	mov	r1, r6
 8015426:	4642      	mov	r2, r8
 8015428:	47b8      	blx	r7
 801542a:	61a0      	str	r0, [r4, #24]
 801542c:	2800      	cmp	r0, #0
 801542e:	d0af      	beq.n	8015390 <rcl_wait_set_resize+0x200>
 8015430:	4632      	mov	r2, r6
 8015432:	4629      	mov	r1, r5
 8015434:	f004 fbae 	bl	8019b94 <memset>
 8015438:	f8d4 a030 	ldr.w	sl, [r4, #48]	@ 0x30
 801543c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801543e:	61e3      	str	r3, [r4, #28]
 8015440:	f8da 0020 	ldr.w	r0, [sl, #32]
 8015444:	f8ca 501c 	str.w	r5, [sl, #28]
 8015448:	4642      	mov	r2, r8
 801544a:	4631      	mov	r1, r6
 801544c:	47b8      	blx	r7
 801544e:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8015450:	f8ca 0020 	str.w	r0, [sl, #32]
 8015454:	6a1f      	ldr	r7, [r3, #32]
 8015456:	2f00      	cmp	r7, #0
 8015458:	d058      	beq.n	801550c <rcl_wait_set_resize+0x37c>
 801545a:	4632      	mov	r2, r6
 801545c:	4629      	mov	r1, r5
 801545e:	4638      	mov	r0, r7
 8015460:	f004 fb98 	bl	8019b94 <memset>
 8015464:	f8d4 a030 	ldr.w	sl, [r4, #48]	@ 0x30
 8015468:	e72b      	b.n	80152c2 <rcl_wait_set_resize+0x132>
 801546a:	6a20      	ldr	r0, [r4, #32]
 801546c:	b128      	cbz	r0, 801547a <rcl_wait_set_resize+0x2ea>
 801546e:	4639      	mov	r1, r7
 8015470:	47c0      	blx	r8
 8015472:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8015474:	f8d4 a030 	ldr.w	sl, [r4, #48]	@ 0x30
 8015478:	6223      	str	r3, [r4, #32]
 801547a:	f8da 002c 	ldr.w	r0, [sl, #44]	@ 0x2c
 801547e:	2800      	cmp	r0, #0
 8015480:	f43f af4d 	beq.w	801531e <rcl_wait_set_resize+0x18e>
 8015484:	4639      	mov	r1, r7
 8015486:	47c0      	blx	r8
 8015488:	f8d4 a030 	ldr.w	sl, [r4, #48]	@ 0x30
 801548c:	2300      	movs	r3, #0
 801548e:	e9ca 330a 	strd	r3, r3, [sl, #40]	@ 0x28
 8015492:	e744      	b.n	801531e <rcl_wait_set_resize+0x18e>
 8015494:	ea4f 0883 	mov.w	r8, r3, lsl #2
 8015498:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 801549a:	4641      	mov	r1, r8
 801549c:	4632      	mov	r2, r6
 801549e:	47c8      	blx	r9
 80154a0:	62a0      	str	r0, [r4, #40]	@ 0x28
 80154a2:	2800      	cmp	r0, #0
 80154a4:	f43f af74 	beq.w	8015390 <rcl_wait_set_resize+0x200>
 80154a8:	4642      	mov	r2, r8
 80154aa:	4629      	mov	r1, r5
 80154ac:	f004 fb72 	bl	8019b94 <memset>
 80154b0:	f8d4 a030 	ldr.w	sl, [r4, #48]	@ 0x30
 80154b4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80154b6:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80154b8:	f8da 0038 	ldr.w	r0, [sl, #56]	@ 0x38
 80154bc:	f8ca 5034 	str.w	r5, [sl, #52]	@ 0x34
 80154c0:	4632      	mov	r2, r6
 80154c2:	4641      	mov	r1, r8
 80154c4:	47c8      	blx	r9
 80154c6:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80154c8:	f8ca 0038 	str.w	r0, [sl, #56]	@ 0x38
 80154cc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80154ce:	b35b      	cbz	r3, 8015528 <rcl_wait_set_resize+0x398>
 80154d0:	4642      	mov	r2, r8
 80154d2:	4618      	mov	r0, r3
 80154d4:	4629      	mov	r1, r5
 80154d6:	f004 fb5d 	bl	8019b94 <memset>
 80154da:	4628      	mov	r0, r5
 80154dc:	b003      	add	sp, #12
 80154de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80154e2:	200b      	movs	r0, #11
 80154e4:	4770      	bx	lr
 80154e6:	f44f 7061 	mov.w	r0, #900	@ 0x384
 80154ea:	e752      	b.n	8015392 <rcl_wait_set_resize+0x202>
 80154ec:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80154ee:	68a0      	ldr	r0, [r4, #8]
 80154f0:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80154f2:	6d99      	ldr	r1, [r3, #88]	@ 0x58
 80154f4:	4790      	blx	r2
 80154f6:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80154f8:	6920      	ldr	r0, [r4, #16]
 80154fa:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80154fc:	6d99      	ldr	r1, [r3, #88]	@ 0x58
 80154fe:	e9c4 8802 	strd	r8, r8, [r4, #8]
 8015502:	4790      	blx	r2
 8015504:	e9c4 8804 	strd	r8, r8, [r4, #16]
 8015508:	200a      	movs	r0, #10
 801550a:	e742      	b.n	8015392 <rcl_wait_set_resize+0x202>
 801550c:	69a0      	ldr	r0, [r4, #24]
 801550e:	4641      	mov	r1, r8
 8015510:	47c8      	blx	r9
 8015512:	e9c4 7706 	strd	r7, r7, [r4, #24]
 8015516:	200a      	movs	r0, #10
 8015518:	e73b      	b.n	8015392 <rcl_wait_set_resize+0x202>
 801551a:	6a20      	ldr	r0, [r4, #32]
 801551c:	4639      	mov	r1, r7
 801551e:	47c0      	blx	r8
 8015520:	e9c4 5508 	strd	r5, r5, [r4, #32]
 8015524:	200a      	movs	r0, #10
 8015526:	e734      	b.n	8015392 <rcl_wait_set_resize+0x202>
 8015528:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 801552a:	9300      	str	r3, [sp, #0]
 801552c:	4631      	mov	r1, r6
 801552e:	47b8      	blx	r7
 8015530:	9b00      	ldr	r3, [sp, #0]
 8015532:	200a      	movs	r0, #10
 8015534:	e9c4 330a 	strd	r3, r3, [r4, #40]	@ 0x28
 8015538:	e72b      	b.n	8015392 <rcl_wait_set_resize+0x202>
 801553a:	bf00      	nop

0801553c <rcl_wait_set_init>:
 801553c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8015540:	b084      	sub	sp, #16
 8015542:	4604      	mov	r4, r0
 8015544:	a810      	add	r0, sp, #64	@ 0x40
 8015546:	f8dd a03c 	ldr.w	sl, [sp, #60]	@ 0x3c
 801554a:	460f      	mov	r7, r1
 801554c:	4690      	mov	r8, r2
 801554e:	4699      	mov	r9, r3
 8015550:	f7f8 fd3a 	bl	800dfc8 <rcutils_allocator_is_valid>
 8015554:	2800      	cmp	r0, #0
 8015556:	d06b      	beq.n	8015630 <rcl_wait_set_init+0xf4>
 8015558:	2c00      	cmp	r4, #0
 801555a:	d069      	beq.n	8015630 <rcl_wait_set_init+0xf4>
 801555c:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 801555e:	b125      	cbz	r5, 801556a <rcl_wait_set_init+0x2e>
 8015560:	2564      	movs	r5, #100	@ 0x64
 8015562:	4628      	mov	r0, r5
 8015564:	b004      	add	sp, #16
 8015566:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801556a:	f1ba 0f00 	cmp.w	sl, #0
 801556e:	d05f      	beq.n	8015630 <rcl_wait_set_init+0xf4>
 8015570:	4650      	mov	r0, sl
 8015572:	f7fd fed7 	bl	8013324 <rcl_context_is_valid>
 8015576:	2800      	cmp	r0, #0
 8015578:	d067      	beq.n	801564a <rcl_wait_set_init+0x10e>
 801557a:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801557c:	9914      	ldr	r1, [sp, #80]	@ 0x50
 801557e:	205c      	movs	r0, #92	@ 0x5c
 8015580:	4798      	blx	r3
 8015582:	6320      	str	r0, [r4, #48]	@ 0x30
 8015584:	2800      	cmp	r0, #0
 8015586:	d062      	beq.n	801564e <rcl_wait_set_init+0x112>
 8015588:	225c      	movs	r2, #92	@ 0x5c
 801558a:	4629      	mov	r1, r5
 801558c:	f004 fb02 	bl	8019b94 <memset>
 8015590:	f10d 0c40 	add.w	ip, sp, #64	@ 0x40
 8015594:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8015598:	6b26      	ldr	r6, [r4, #48]	@ 0x30
 801559a:	f8dc e000 	ldr.w	lr, [ip]
 801559e:	f8c6 a044 	str.w	sl, [r6, #68]	@ 0x44
 80155a2:	f106 0c48 	add.w	ip, r6, #72	@ 0x48
 80155a6:	e9c6 5504 	strd	r5, r5, [r6, #16]
 80155aa:	e9c6 5507 	strd	r5, r5, [r6, #28]
 80155ae:	e9c6 550a 	strd	r5, r5, [r6, #40]	@ 0x28
 80155b2:	e9c6 550d 	strd	r5, r5, [r6, #52]	@ 0x34
 80155b6:	60b5      	str	r5, [r6, #8]
 80155b8:	6075      	str	r5, [r6, #4]
 80155ba:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80155be:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	@ 0x34
 80155c2:	1899      	adds	r1, r3, r2
 80155c4:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80155c6:	f8da 0000 	ldr.w	r0, [sl]
 80155ca:	f8cc e000 	str.w	lr, [ip]
 80155ce:	4419      	add	r1, r3
 80155d0:	4441      	add	r1, r8
 80155d2:	3028      	adds	r0, #40	@ 0x28
 80155d4:	eb01 0147 	add.w	r1, r1, r7, lsl #1
 80155d8:	f001 fe3c 	bl	8017254 <rmw_create_wait_set>
 80155dc:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80155de:	63f0      	str	r0, [r6, #60]	@ 0x3c
 80155e0:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 80155e2:	b350      	cbz	r0, 801563a <rcl_wait_set_init+0xfe>
 80155e4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80155e6:	9302      	str	r3, [sp, #8]
 80155e8:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80155ea:	9301      	str	r3, [sp, #4]
 80155ec:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80155ee:	9300      	str	r3, [sp, #0]
 80155f0:	4642      	mov	r2, r8
 80155f2:	464b      	mov	r3, r9
 80155f4:	4639      	mov	r1, r7
 80155f6:	4620      	mov	r0, r4
 80155f8:	f7ff fdca 	bl	8015190 <rcl_wait_set_resize>
 80155fc:	4605      	mov	r5, r0
 80155fe:	2800      	cmp	r0, #0
 8015600:	d0af      	beq.n	8015562 <rcl_wait_set_init+0x26>
 8015602:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8015604:	bb2b      	cbnz	r3, 8015652 <rcl_wait_set_init+0x116>
 8015606:	2600      	movs	r6, #0
 8015608:	e9cd 6601 	strd	r6, r6, [sp, #4]
 801560c:	9600      	str	r6, [sp, #0]
 801560e:	4633      	mov	r3, r6
 8015610:	4632      	mov	r2, r6
 8015612:	4631      	mov	r1, r6
 8015614:	4620      	mov	r0, r4
 8015616:	f7ff fdbb 	bl	8015190 <rcl_wait_set_resize>
 801561a:	6b20      	ldr	r0, [r4, #48]	@ 0x30
 801561c:	2800      	cmp	r0, #0
 801561e:	d0a0      	beq.n	8015562 <rcl_wait_set_init+0x26>
 8015620:	6cc3      	ldr	r3, [r0, #76]	@ 0x4c
 8015622:	6d81      	ldr	r1, [r0, #88]	@ 0x58
 8015624:	4798      	blx	r3
 8015626:	4628      	mov	r0, r5
 8015628:	6326      	str	r6, [r4, #48]	@ 0x30
 801562a:	b004      	add	sp, #16
 801562c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015630:	250b      	movs	r5, #11
 8015632:	4628      	mov	r0, r5
 8015634:	b004      	add	sp, #16
 8015636:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801563a:	2501      	movs	r5, #1
 801563c:	f001 fe14 	bl	8017268 <rmw_destroy_wait_set>
 8015640:	2800      	cmp	r0, #0
 8015642:	bf18      	it	ne
 8015644:	f44f 7561 	movne.w	r5, #900	@ 0x384
 8015648:	e7dd      	b.n	8015606 <rcl_wait_set_init+0xca>
 801564a:	2565      	movs	r5, #101	@ 0x65
 801564c:	e789      	b.n	8015562 <rcl_wait_set_init+0x26>
 801564e:	250a      	movs	r5, #10
 8015650:	e787      	b.n	8015562 <rcl_wait_set_init+0x26>
 8015652:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 8015654:	e7f2      	b.n	801563c <rcl_wait_set_init+0x100>
 8015656:	bf00      	nop

08015658 <rcl_wait_set_add_guard_condition>:
 8015658:	b320      	cbz	r0, 80156a4 <rcl_wait_set_add_guard_condition+0x4c>
 801565a:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 801565c:	b570      	push	{r4, r5, r6, lr}
 801565e:	4604      	mov	r4, r0
 8015660:	b1d3      	cbz	r3, 8015698 <rcl_wait_set_add_guard_condition+0x40>
 8015662:	b319      	cbz	r1, 80156ac <rcl_wait_set_add_guard_condition+0x54>
 8015664:	68dd      	ldr	r5, [r3, #12]
 8015666:	68e0      	ldr	r0, [r4, #12]
 8015668:	4285      	cmp	r5, r0
 801566a:	d218      	bcs.n	801569e <rcl_wait_set_add_guard_condition+0x46>
 801566c:	68a0      	ldr	r0, [r4, #8]
 801566e:	1c6e      	adds	r6, r5, #1
 8015670:	60de      	str	r6, [r3, #12]
 8015672:	f840 1025 	str.w	r1, [r0, r5, lsl #2]
 8015676:	b102      	cbz	r2, 801567a <rcl_wait_set_add_guard_condition+0x22>
 8015678:	6015      	str	r5, [r2, #0]
 801567a:	4608      	mov	r0, r1
 801567c:	f003 fd8e 	bl	801919c <rcl_guard_condition_get_rmw_handle>
 8015680:	b190      	cbz	r0, 80156a8 <rcl_wait_set_add_guard_condition+0x50>
 8015682:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8015684:	6842      	ldr	r2, [r0, #4]
 8015686:	695b      	ldr	r3, [r3, #20]
 8015688:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 801568c:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 801568e:	6913      	ldr	r3, [r2, #16]
 8015690:	3301      	adds	r3, #1
 8015692:	6113      	str	r3, [r2, #16]
 8015694:	2000      	movs	r0, #0
 8015696:	bd70      	pop	{r4, r5, r6, pc}
 8015698:	f44f 7061 	mov.w	r0, #900	@ 0x384
 801569c:	bd70      	pop	{r4, r5, r6, pc}
 801569e:	f240 3086 	movw	r0, #902	@ 0x386
 80156a2:	bd70      	pop	{r4, r5, r6, pc}
 80156a4:	200b      	movs	r0, #11
 80156a6:	4770      	bx	lr
 80156a8:	2001      	movs	r0, #1
 80156aa:	bd70      	pop	{r4, r5, r6, pc}
 80156ac:	200b      	movs	r0, #11
 80156ae:	bd70      	pop	{r4, r5, r6, pc}

080156b0 <rcl_wait_set_add_timer>:
 80156b0:	b340      	cbz	r0, 8015704 <rcl_wait_set_add_timer+0x54>
 80156b2:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 80156b4:	b570      	push	{r4, r5, r6, lr}
 80156b6:	4604      	mov	r4, r0
 80156b8:	b1f3      	cbz	r3, 80156f8 <rcl_wait_set_add_timer+0x48>
 80156ba:	b329      	cbz	r1, 8015708 <rcl_wait_set_add_timer+0x58>
 80156bc:	6c18      	ldr	r0, [r3, #64]	@ 0x40
 80156be:	6965      	ldr	r5, [r4, #20]
 80156c0:	42a8      	cmp	r0, r5
 80156c2:	d21c      	bcs.n	80156fe <rcl_wait_set_add_timer+0x4e>
 80156c4:	6925      	ldr	r5, [r4, #16]
 80156c6:	1c46      	adds	r6, r0, #1
 80156c8:	641e      	str	r6, [r3, #64]	@ 0x40
 80156ca:	f845 1020 	str.w	r1, [r5, r0, lsl #2]
 80156ce:	b102      	cbz	r2, 80156d2 <rcl_wait_set_add_timer+0x22>
 80156d0:	6010      	str	r0, [r2, #0]
 80156d2:	4608      	mov	r0, r1
 80156d4:	f7ff faa4 	bl	8014c20 <rcl_timer_get_guard_condition>
 80156d8:	b168      	cbz	r0, 80156f6 <rcl_wait_set_add_timer+0x46>
 80156da:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 80156dc:	68e3      	ldr	r3, [r4, #12]
 80156de:	6c15      	ldr	r5, [r2, #64]	@ 0x40
 80156e0:	3b01      	subs	r3, #1
 80156e2:	441d      	add	r5, r3
 80156e4:	f003 fd5a 	bl	801919c <rcl_guard_condition_get_rmw_handle>
 80156e8:	b180      	cbz	r0, 801570c <rcl_wait_set_add_timer+0x5c>
 80156ea:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80156ec:	6842      	ldr	r2, [r0, #4]
 80156ee:	695b      	ldr	r3, [r3, #20]
 80156f0:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80156f4:	2000      	movs	r0, #0
 80156f6:	bd70      	pop	{r4, r5, r6, pc}
 80156f8:	f44f 7061 	mov.w	r0, #900	@ 0x384
 80156fc:	bd70      	pop	{r4, r5, r6, pc}
 80156fe:	f240 3086 	movw	r0, #902	@ 0x386
 8015702:	bd70      	pop	{r4, r5, r6, pc}
 8015704:	200b      	movs	r0, #11
 8015706:	4770      	bx	lr
 8015708:	200b      	movs	r0, #11
 801570a:	bd70      	pop	{r4, r5, r6, pc}
 801570c:	2001      	movs	r0, #1
 801570e:	bd70      	pop	{r4, r5, r6, pc}

08015710 <rcl_wait_set_add_client>:
 8015710:	b320      	cbz	r0, 801575c <rcl_wait_set_add_client+0x4c>
 8015712:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8015714:	b570      	push	{r4, r5, r6, lr}
 8015716:	4604      	mov	r4, r0
 8015718:	b1d3      	cbz	r3, 8015750 <rcl_wait_set_add_client+0x40>
 801571a:	b319      	cbz	r1, 8015764 <rcl_wait_set_add_client+0x54>
 801571c:	699d      	ldr	r5, [r3, #24]
 801571e:	69e0      	ldr	r0, [r4, #28]
 8015720:	4285      	cmp	r5, r0
 8015722:	d218      	bcs.n	8015756 <rcl_wait_set_add_client+0x46>
 8015724:	69a0      	ldr	r0, [r4, #24]
 8015726:	1c6e      	adds	r6, r5, #1
 8015728:	619e      	str	r6, [r3, #24]
 801572a:	f840 1025 	str.w	r1, [r0, r5, lsl #2]
 801572e:	b102      	cbz	r2, 8015732 <rcl_wait_set_add_client+0x22>
 8015730:	6015      	str	r5, [r2, #0]
 8015732:	4608      	mov	r0, r1
 8015734:	f7fd fd96 	bl	8013264 <rcl_client_get_rmw_handle>
 8015738:	b190      	cbz	r0, 8015760 <rcl_wait_set_add_client+0x50>
 801573a:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801573c:	6842      	ldr	r2, [r0, #4]
 801573e:	6a1b      	ldr	r3, [r3, #32]
 8015740:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8015744:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 8015746:	69d3      	ldr	r3, [r2, #28]
 8015748:	3301      	adds	r3, #1
 801574a:	61d3      	str	r3, [r2, #28]
 801574c:	2000      	movs	r0, #0
 801574e:	bd70      	pop	{r4, r5, r6, pc}
 8015750:	f44f 7061 	mov.w	r0, #900	@ 0x384
 8015754:	bd70      	pop	{r4, r5, r6, pc}
 8015756:	f240 3086 	movw	r0, #902	@ 0x386
 801575a:	bd70      	pop	{r4, r5, r6, pc}
 801575c:	200b      	movs	r0, #11
 801575e:	4770      	bx	lr
 8015760:	2001      	movs	r0, #1
 8015762:	bd70      	pop	{r4, r5, r6, pc}
 8015764:	200b      	movs	r0, #11
 8015766:	bd70      	pop	{r4, r5, r6, pc}

08015768 <rcl_wait_set_add_service>:
 8015768:	b320      	cbz	r0, 80157b4 <rcl_wait_set_add_service+0x4c>
 801576a:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 801576c:	b570      	push	{r4, r5, r6, lr}
 801576e:	4604      	mov	r4, r0
 8015770:	b1d3      	cbz	r3, 80157a8 <rcl_wait_set_add_service+0x40>
 8015772:	b319      	cbz	r1, 80157bc <rcl_wait_set_add_service+0x54>
 8015774:	6a5d      	ldr	r5, [r3, #36]	@ 0x24
 8015776:	6a60      	ldr	r0, [r4, #36]	@ 0x24
 8015778:	4285      	cmp	r5, r0
 801577a:	d218      	bcs.n	80157ae <rcl_wait_set_add_service+0x46>
 801577c:	6a20      	ldr	r0, [r4, #32]
 801577e:	1c6e      	adds	r6, r5, #1
 8015780:	625e      	str	r6, [r3, #36]	@ 0x24
 8015782:	f840 1025 	str.w	r1, [r0, r5, lsl #2]
 8015786:	b102      	cbz	r2, 801578a <rcl_wait_set_add_service+0x22>
 8015788:	6015      	str	r5, [r2, #0]
 801578a:	4608      	mov	r0, r1
 801578c:	f7fe fcba 	bl	8014104 <rcl_service_get_rmw_handle>
 8015790:	b190      	cbz	r0, 80157b8 <rcl_wait_set_add_service+0x50>
 8015792:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8015794:	6842      	ldr	r2, [r0, #4]
 8015796:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8015798:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 801579c:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 801579e:	6a93      	ldr	r3, [r2, #40]	@ 0x28
 80157a0:	3301      	adds	r3, #1
 80157a2:	6293      	str	r3, [r2, #40]	@ 0x28
 80157a4:	2000      	movs	r0, #0
 80157a6:	bd70      	pop	{r4, r5, r6, pc}
 80157a8:	f44f 7061 	mov.w	r0, #900	@ 0x384
 80157ac:	bd70      	pop	{r4, r5, r6, pc}
 80157ae:	f240 3086 	movw	r0, #902	@ 0x386
 80157b2:	bd70      	pop	{r4, r5, r6, pc}
 80157b4:	200b      	movs	r0, #11
 80157b6:	4770      	bx	lr
 80157b8:	2001      	movs	r0, #1
 80157ba:	bd70      	pop	{r4, r5, r6, pc}
 80157bc:	200b      	movs	r0, #11
 80157be:	bd70      	pop	{r4, r5, r6, pc}

080157c0 <rcl_wait>:
 80157c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80157c4:	b08f      	sub	sp, #60	@ 0x3c
 80157c6:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80157ca:	2800      	cmp	r0, #0
 80157cc:	f000 814c 	beq.w	8015a68 <rcl_wait+0x2a8>
 80157d0:	6b05      	ldr	r5, [r0, #48]	@ 0x30
 80157d2:	4604      	mov	r4, r0
 80157d4:	2d00      	cmp	r5, #0
 80157d6:	f000 80bc 	beq.w	8015952 <rcl_wait+0x192>
 80157da:	6843      	ldr	r3, [r0, #4]
 80157dc:	b973      	cbnz	r3, 80157fc <rcl_wait+0x3c>
 80157de:	68e3      	ldr	r3, [r4, #12]
 80157e0:	b963      	cbnz	r3, 80157fc <rcl_wait+0x3c>
 80157e2:	6963      	ldr	r3, [r4, #20]
 80157e4:	b953      	cbnz	r3, 80157fc <rcl_wait+0x3c>
 80157e6:	69e3      	ldr	r3, [r4, #28]
 80157e8:	b943      	cbnz	r3, 80157fc <rcl_wait+0x3c>
 80157ea:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 80157ec:	b933      	cbnz	r3, 80157fc <rcl_wait+0x3c>
 80157ee:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 80157f0:	b923      	cbnz	r3, 80157fc <rcl_wait+0x3c>
 80157f2:	f240 3085 	movw	r0, #901	@ 0x385
 80157f6:	b00f      	add	sp, #60	@ 0x3c
 80157f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80157fc:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8015800:	2a01      	cmp	r2, #1
 8015802:	f173 0300 	sbcs.w	r3, r3, #0
 8015806:	6c29      	ldr	r1, [r5, #64]	@ 0x40
 8015808:	db56      	blt.n	80158b8 <rcl_wait+0xf8>
 801580a:	e9dd 6704 	ldrd	r6, r7, [sp, #16]
 801580e:	2900      	cmp	r1, #0
 8015810:	f000 8149 	beq.w	8015aa6 <rcl_wait+0x2e6>
 8015814:	2300      	movs	r3, #0
 8015816:	9307      	str	r3, [sp, #28]
 8015818:	469b      	mov	fp, r3
 801581a:	f04f 0800 	mov.w	r8, #0
 801581e:	f04f 0900 	mov.w	r9, #0
 8015822:	e00d      	b.n	8015840 <rcl_wait+0x80>
 8015824:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 8015826:	6922      	ldr	r2, [r4, #16]
 8015828:	6c29      	ldr	r1, [r5, #64]	@ 0x40
 801582a:	f842 000a 	str.w	r0, [r2, sl]
 801582e:	f118 0801 	adds.w	r8, r8, #1
 8015832:	f149 0900 	adc.w	r9, r9, #0
 8015836:	2300      	movs	r3, #0
 8015838:	4599      	cmp	r9, r3
 801583a:	bf08      	it	eq
 801583c:	4588      	cmpeq	r8, r1
 801583e:	d243      	bcs.n	80158c8 <rcl_wait+0x108>
 8015840:	6922      	ldr	r2, [r4, #16]
 8015842:	ea4f 0a88 	mov.w	sl, r8, lsl #2
 8015846:	f852 000a 	ldr.w	r0, [r2, sl]
 801584a:	2800      	cmp	r0, #0
 801584c:	d0ef      	beq.n	801582e <rcl_wait+0x6e>
 801584e:	68e2      	ldr	r2, [r4, #12]
 8015850:	6969      	ldr	r1, [r5, #20]
 8015852:	4442      	add	r2, r8
 8015854:	f851 3022 	ldr.w	r3, [r1, r2, lsl #2]
 8015858:	b13b      	cbz	r3, 801586a <rcl_wait+0xaa>
 801585a:	692a      	ldr	r2, [r5, #16]
 801585c:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8015860:	6921      	ldr	r1, [r4, #16]
 8015862:	3201      	adds	r2, #1
 8015864:	f851 000a 	ldr.w	r0, [r1, sl]
 8015868:	612a      	str	r2, [r5, #16]
 801586a:	f10d 0127 	add.w	r1, sp, #39	@ 0x27
 801586e:	f88d b027 	strb.w	fp, [sp, #39]	@ 0x27
 8015872:	f7ff f9c3 	bl	8014bfc <rcl_timer_is_canceled>
 8015876:	2800      	cmp	r0, #0
 8015878:	d1bd      	bne.n	80157f6 <rcl_wait+0x36>
 801587a:	f89d 2027 	ldrb.w	r2, [sp, #39]	@ 0x27
 801587e:	2a00      	cmp	r2, #0
 8015880:	d1d0      	bne.n	8015824 <rcl_wait+0x64>
 8015882:	6922      	ldr	r2, [r4, #16]
 8015884:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 8015888:	f852 000a 	ldr.w	r0, [r2, sl]
 801588c:	a90a      	add	r1, sp, #40	@ 0x28
 801588e:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8015892:	e9cd 230a 	strd	r2, r3, [sp, #40]	@ 0x28
 8015896:	f7ff f98d 	bl	8014bb4 <rcl_timer_get_time_until_next_call>
 801589a:	2800      	cmp	r0, #0
 801589c:	d1ab      	bne.n	80157f6 <rcl_wait+0x36>
 801589e:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	@ 0x28
 80158a2:	42b2      	cmp	r2, r6
 80158a4:	eb73 0107 	sbcs.w	r1, r3, r7
 80158a8:	da03      	bge.n	80158b2 <rcl_wait+0xf2>
 80158aa:	461f      	mov	r7, r3
 80158ac:	2301      	movs	r3, #1
 80158ae:	4616      	mov	r6, r2
 80158b0:	9307      	str	r3, [sp, #28]
 80158b2:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 80158b4:	6c29      	ldr	r1, [r5, #64]	@ 0x40
 80158b6:	e7ba      	b.n	801582e <rcl_wait+0x6e>
 80158b8:	2900      	cmp	r1, #0
 80158ba:	f000 80de 	beq.w	8015a7a <rcl_wait+0x2ba>
 80158be:	f04f 36ff 	mov.w	r6, #4294967295	@ 0xffffffff
 80158c2:	f06f 4700 	mvn.w	r7, #2147483648	@ 0x80000000
 80158c6:	e7a5      	b.n	8015814 <rcl_wait+0x54>
 80158c8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80158cc:	4313      	orrs	r3, r2
 80158ce:	d145      	bne.n	801595c <rcl_wait+0x19c>
 80158d0:	2300      	movs	r3, #0
 80158d2:	2200      	movs	r2, #0
 80158d4:	e9cd 230a 	strd	r2, r3, [sp, #40]	@ 0x28
 80158d8:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 80158dc:	ab0a      	add	r3, sp, #40	@ 0x28
 80158de:	9302      	str	r3, [sp, #8]
 80158e0:	6beb      	ldr	r3, [r5, #60]	@ 0x3c
 80158e2:	9301      	str	r3, [sp, #4]
 80158e4:	f105 0334 	add.w	r3, r5, #52	@ 0x34
 80158e8:	9300      	str	r3, [sp, #0]
 80158ea:	f105 0228 	add.w	r2, r5, #40	@ 0x28
 80158ee:	f105 031c 	add.w	r3, r5, #28
 80158f2:	f105 0110 	add.w	r1, r5, #16
 80158f6:	1d28      	adds	r0, r5, #4
 80158f8:	f001 fb2c 	bl	8016f54 <rmw_wait>
 80158fc:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80158fe:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8015900:	4680      	mov	r8, r0
 8015902:	b30a      	cbz	r2, 8015948 <rcl_wait+0x188>
 8015904:	2500      	movs	r5, #0
 8015906:	462f      	mov	r7, r5
 8015908:	e004      	b.n	8015914 <rcl_wait+0x154>
 801590a:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801590c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 801590e:	3501      	adds	r5, #1
 8015910:	42aa      	cmp	r2, r5
 8015912:	d919      	bls.n	8015948 <rcl_wait+0x188>
 8015914:	6922      	ldr	r2, [r4, #16]
 8015916:	f852 0025 	ldr.w	r0, [r2, r5, lsl #2]
 801591a:	f10d 0127 	add.w	r1, sp, #39	@ 0x27
 801591e:	00ae      	lsls	r6, r5, #2
 8015920:	2800      	cmp	r0, #0
 8015922:	d0f3      	beq.n	801590c <rcl_wait+0x14c>
 8015924:	f88d 7027 	strb.w	r7, [sp, #39]	@ 0x27
 8015928:	f7ff f90c 	bl	8014b44 <rcl_timer_is_ready>
 801592c:	2800      	cmp	r0, #0
 801592e:	f47f af62 	bne.w	80157f6 <rcl_wait+0x36>
 8015932:	f89d 2027 	ldrb.w	r2, [sp, #39]	@ 0x27
 8015936:	2a00      	cmp	r2, #0
 8015938:	d1e7      	bne.n	801590a <rcl_wait+0x14a>
 801593a:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801593c:	6921      	ldr	r1, [r4, #16]
 801593e:	518a      	str	r2, [r1, r6]
 8015940:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8015942:	3501      	adds	r5, #1
 8015944:	42aa      	cmp	r2, r5
 8015946:	d8e5      	bhi.n	8015914 <rcl_wait+0x154>
 8015948:	f038 0002 	bics.w	r0, r8, #2
 801594c:	d029      	beq.n	80159a2 <rcl_wait+0x1e2>
 801594e:	2001      	movs	r0, #1
 8015950:	e751      	b.n	80157f6 <rcl_wait+0x36>
 8015952:	f44f 7061 	mov.w	r0, #900	@ 0x384
 8015956:	b00f      	add	sp, #60	@ 0x3c
 8015958:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801595c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8015960:	2a01      	cmp	r2, #1
 8015962:	f173 0300 	sbcs.w	r3, r3, #0
 8015966:	f2c0 8083 	blt.w	8015a70 <rcl_wait+0x2b0>
 801596a:	2e00      	cmp	r6, #0
 801596c:	f177 0300 	sbcs.w	r3, r7, #0
 8015970:	bfbc      	itt	lt
 8015972:	2600      	movlt	r6, #0
 8015974:	2700      	movlt	r7, #0
 8015976:	a34e      	add	r3, pc, #312	@ (adr r3, 8015ab0 <rcl_wait+0x2f0>)
 8015978:	e9d3 2300 	ldrd	r2, r3, [r3]
 801597c:	4630      	mov	r0, r6
 801597e:	4639      	mov	r1, r7
 8015980:	f7eb f96a 	bl	8000c58 <__aeabi_ldivmod>
 8015984:	a34a      	add	r3, pc, #296	@ (adr r3, 8015ab0 <rcl_wait+0x2f0>)
 8015986:	e9d3 2300 	ldrd	r2, r3, [r3]
 801598a:	4680      	mov	r8, r0
 801598c:	4689      	mov	r9, r1
 801598e:	4630      	mov	r0, r6
 8015990:	4639      	mov	r1, r7
 8015992:	e9cd 890a 	strd	r8, r9, [sp, #40]	@ 0x28
 8015996:	f7eb f95f 	bl	8000c58 <__aeabi_ldivmod>
 801599a:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 801599e:	ab0a      	add	r3, sp, #40	@ 0x28
 80159a0:	e79d      	b.n	80158de <rcl_wait+0x11e>
 80159a2:	6866      	ldr	r6, [r4, #4]
 80159a4:	4602      	mov	r2, r0
 80159a6:	b91e      	cbnz	r6, 80159b0 <rcl_wait+0x1f0>
 80159a8:	e00d      	b.n	80159c6 <rcl_wait+0x206>
 80159aa:	3201      	adds	r2, #1
 80159ac:	42b2      	cmp	r2, r6
 80159ae:	d00a      	beq.n	80159c6 <rcl_wait+0x206>
 80159b0:	6899      	ldr	r1, [r3, #8]
 80159b2:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 80159b6:	2900      	cmp	r1, #0
 80159b8:	d1f7      	bne.n	80159aa <rcl_wait+0x1ea>
 80159ba:	6825      	ldr	r5, [r4, #0]
 80159bc:	f845 1022 	str.w	r1, [r5, r2, lsl #2]
 80159c0:	3201      	adds	r2, #1
 80159c2:	42b2      	cmp	r2, r6
 80159c4:	d1f4      	bne.n	80159b0 <rcl_wait+0x1f0>
 80159c6:	68e6      	ldr	r6, [r4, #12]
 80159c8:	2200      	movs	r2, #0
 80159ca:	b91e      	cbnz	r6, 80159d4 <rcl_wait+0x214>
 80159cc:	e00d      	b.n	80159ea <rcl_wait+0x22a>
 80159ce:	3201      	adds	r2, #1
 80159d0:	42b2      	cmp	r2, r6
 80159d2:	d00a      	beq.n	80159ea <rcl_wait+0x22a>
 80159d4:	6959      	ldr	r1, [r3, #20]
 80159d6:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 80159da:	2900      	cmp	r1, #0
 80159dc:	d1f7      	bne.n	80159ce <rcl_wait+0x20e>
 80159de:	68a5      	ldr	r5, [r4, #8]
 80159e0:	f845 1022 	str.w	r1, [r5, r2, lsl #2]
 80159e4:	3201      	adds	r2, #1
 80159e6:	42b2      	cmp	r2, r6
 80159e8:	d1f4      	bne.n	80159d4 <rcl_wait+0x214>
 80159ea:	69e6      	ldr	r6, [r4, #28]
 80159ec:	2200      	movs	r2, #0
 80159ee:	b91e      	cbnz	r6, 80159f8 <rcl_wait+0x238>
 80159f0:	e00d      	b.n	8015a0e <rcl_wait+0x24e>
 80159f2:	3201      	adds	r2, #1
 80159f4:	42b2      	cmp	r2, r6
 80159f6:	d00a      	beq.n	8015a0e <rcl_wait+0x24e>
 80159f8:	6a19      	ldr	r1, [r3, #32]
 80159fa:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 80159fe:	2900      	cmp	r1, #0
 8015a00:	d1f7      	bne.n	80159f2 <rcl_wait+0x232>
 8015a02:	69a5      	ldr	r5, [r4, #24]
 8015a04:	f845 1022 	str.w	r1, [r5, r2, lsl #2]
 8015a08:	3201      	adds	r2, #1
 8015a0a:	42b2      	cmp	r2, r6
 8015a0c:	d1f4      	bne.n	80159f8 <rcl_wait+0x238>
 8015a0e:	6a66      	ldr	r6, [r4, #36]	@ 0x24
 8015a10:	2200      	movs	r2, #0
 8015a12:	b91e      	cbnz	r6, 8015a1c <rcl_wait+0x25c>
 8015a14:	e00d      	b.n	8015a32 <rcl_wait+0x272>
 8015a16:	3201      	adds	r2, #1
 8015a18:	4296      	cmp	r6, r2
 8015a1a:	d00a      	beq.n	8015a32 <rcl_wait+0x272>
 8015a1c:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8015a1e:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 8015a22:	2900      	cmp	r1, #0
 8015a24:	d1f7      	bne.n	8015a16 <rcl_wait+0x256>
 8015a26:	6a25      	ldr	r5, [r4, #32]
 8015a28:	f845 1022 	str.w	r1, [r5, r2, lsl #2]
 8015a2c:	3201      	adds	r2, #1
 8015a2e:	4296      	cmp	r6, r2
 8015a30:	d1f4      	bne.n	8015a1c <rcl_wait+0x25c>
 8015a32:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8015a34:	2200      	movs	r2, #0
 8015a36:	b91e      	cbnz	r6, 8015a40 <rcl_wait+0x280>
 8015a38:	e00d      	b.n	8015a56 <rcl_wait+0x296>
 8015a3a:	3201      	adds	r2, #1
 8015a3c:	42b2      	cmp	r2, r6
 8015a3e:	d00a      	beq.n	8015a56 <rcl_wait+0x296>
 8015a40:	6b99      	ldr	r1, [r3, #56]	@ 0x38
 8015a42:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 8015a46:	2900      	cmp	r1, #0
 8015a48:	d1f7      	bne.n	8015a3a <rcl_wait+0x27a>
 8015a4a:	6aa5      	ldr	r5, [r4, #40]	@ 0x28
 8015a4c:	f845 1022 	str.w	r1, [r5, r2, lsl #2]
 8015a50:	3201      	adds	r2, #1
 8015a52:	42b2      	cmp	r2, r6
 8015a54:	d1f4      	bne.n	8015a40 <rcl_wait+0x280>
 8015a56:	f1b8 0f02 	cmp.w	r8, #2
 8015a5a:	f47f aecc 	bne.w	80157f6 <rcl_wait+0x36>
 8015a5e:	9b07      	ldr	r3, [sp, #28]
 8015a60:	2b00      	cmp	r3, #0
 8015a62:	bf08      	it	eq
 8015a64:	2002      	moveq	r0, #2
 8015a66:	e6c6      	b.n	80157f6 <rcl_wait+0x36>
 8015a68:	200b      	movs	r0, #11
 8015a6a:	b00f      	add	sp, #60	@ 0x3c
 8015a6c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015a70:	9b07      	ldr	r3, [sp, #28]
 8015a72:	2b00      	cmp	r3, #0
 8015a74:	f47f af79 	bne.w	801596a <rcl_wait+0x1aa>
 8015a78:	e731      	b.n	80158de <rcl_wait+0x11e>
 8015a7a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8015a7e:	4313      	orrs	r3, r2
 8015a80:	bf08      	it	eq
 8015a82:	9107      	streq	r1, [sp, #28]
 8015a84:	f43f af24 	beq.w	80158d0 <rcl_wait+0x110>
 8015a88:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8015a8c:	f04f 36ff 	mov.w	r6, #4294967295	@ 0xffffffff
 8015a90:	f06f 4700 	mvn.w	r7, #2147483648	@ 0x80000000
 8015a94:	2a01      	cmp	r2, #1
 8015a96:	f173 0300 	sbcs.w	r3, r3, #0
 8015a9a:	f04f 0300 	mov.w	r3, #0
 8015a9e:	9307      	str	r3, [sp, #28]
 8015aa0:	f6bf af63 	bge.w	801596a <rcl_wait+0x1aa>
 8015aa4:	e71b      	b.n	80158de <rcl_wait+0x11e>
 8015aa6:	4632      	mov	r2, r6
 8015aa8:	463b      	mov	r3, r7
 8015aaa:	e7f3      	b.n	8015a94 <rcl_wait+0x2d4>
 8015aac:	f3af 8000 	nop.w
 8015ab0:	3b9aca00 	.word	0x3b9aca00
 8015ab4:	00000000 	.word	0x00000000

08015ab8 <__atomic_load_8>:
 8015ab8:	ea80 4110 	eor.w	r1, r0, r0, lsr #16
 8015abc:	f081 013d 	eor.w	r1, r1, #61	@ 0x3d
 8015ac0:	4b14      	ldr	r3, [pc, #80]	@ (8015b14 <__atomic_load_8+0x5c>)
 8015ac2:	4a15      	ldr	r2, [pc, #84]	@ (8015b18 <__atomic_load_8+0x60>)
 8015ac4:	eb01 01c1 	add.w	r1, r1, r1, lsl #3
 8015ac8:	ea81 1111 	eor.w	r1, r1, r1, lsr #4
 8015acc:	fb03 f301 	mul.w	r3, r3, r1
 8015ad0:	ea83 33d3 	eor.w	r3, r3, r3, lsr #15
 8015ad4:	fba2 1203 	umull	r1, r2, r2, r3
 8015ad8:	0912      	lsrs	r2, r2, #4
 8015ada:	eb02 0142 	add.w	r1, r2, r2, lsl #1
 8015ade:	b430      	push	{r4, r5}
 8015ae0:	ebc2 02c1 	rsb	r2, r2, r1, lsl #3
 8015ae4:	4c0d      	ldr	r4, [pc, #52]	@ (8015b1c <__atomic_load_8+0x64>)
 8015ae6:	1a9b      	subs	r3, r3, r2
 8015ae8:	18e1      	adds	r1, r4, r3
 8015aea:	f04f 0501 	mov.w	r5, #1
 8015aee:	e8d1 2f4f 	ldrexb	r2, [r1]
 8015af2:	e8c1 5f4c 	strexb	ip, r5, [r1]
 8015af6:	f1bc 0f00 	cmp.w	ip, #0
 8015afa:	d1f8      	bne.n	8015aee <__atomic_load_8+0x36>
 8015afc:	f3bf 8f5b 	dmb	ish
 8015b00:	b2d2      	uxtb	r2, r2
 8015b02:	2a00      	cmp	r2, #0
 8015b04:	d1f3      	bne.n	8015aee <__atomic_load_8+0x36>
 8015b06:	e9d0 0100 	ldrd	r0, r1, [r0]
 8015b0a:	f3bf 8f5b 	dmb	ish
 8015b0e:	54e2      	strb	r2, [r4, r3]
 8015b10:	bc30      	pop	{r4, r5}
 8015b12:	4770      	bx	lr
 8015b14:	27d4eb2d 	.word	0x27d4eb2d
 8015b18:	b21642c9 	.word	0xb21642c9
 8015b1c:	20007628 	.word	0x20007628

08015b20 <__atomic_store_8>:
 8015b20:	b4f0      	push	{r4, r5, r6, r7}
 8015b22:	ea80 4510 	eor.w	r5, r0, r0, lsr #16
 8015b26:	f085 053d 	eor.w	r5, r5, #61	@ 0x3d
 8015b2a:	4914      	ldr	r1, [pc, #80]	@ (8015b7c <__atomic_store_8+0x5c>)
 8015b2c:	4c14      	ldr	r4, [pc, #80]	@ (8015b80 <__atomic_store_8+0x60>)
 8015b2e:	4e15      	ldr	r6, [pc, #84]	@ (8015b84 <__atomic_store_8+0x64>)
 8015b30:	eb05 05c5 	add.w	r5, r5, r5, lsl #3
 8015b34:	ea85 1515 	eor.w	r5, r5, r5, lsr #4
 8015b38:	fb01 f105 	mul.w	r1, r1, r5
 8015b3c:	ea81 31d1 	eor.w	r1, r1, r1, lsr #15
 8015b40:	fba4 5401 	umull	r5, r4, r4, r1
 8015b44:	0924      	lsrs	r4, r4, #4
 8015b46:	eb04 0544 	add.w	r5, r4, r4, lsl #1
 8015b4a:	ebc4 04c5 	rsb	r4, r4, r5, lsl #3
 8015b4e:	1b09      	subs	r1, r1, r4
 8015b50:	1875      	adds	r5, r6, r1
 8015b52:	f04f 0701 	mov.w	r7, #1
 8015b56:	e8d5 4f4f 	ldrexb	r4, [r5]
 8015b5a:	e8c5 7f4c 	strexb	ip, r7, [r5]
 8015b5e:	f1bc 0f00 	cmp.w	ip, #0
 8015b62:	d1f8      	bne.n	8015b56 <__atomic_store_8+0x36>
 8015b64:	f3bf 8f5b 	dmb	ish
 8015b68:	b2e4      	uxtb	r4, r4
 8015b6a:	2c00      	cmp	r4, #0
 8015b6c:	d1f3      	bne.n	8015b56 <__atomic_store_8+0x36>
 8015b6e:	e9c0 2300 	strd	r2, r3, [r0]
 8015b72:	f3bf 8f5b 	dmb	ish
 8015b76:	5474      	strb	r4, [r6, r1]
 8015b78:	bcf0      	pop	{r4, r5, r6, r7}
 8015b7a:	4770      	bx	lr
 8015b7c:	27d4eb2d 	.word	0x27d4eb2d
 8015b80:	b21642c9 	.word	0xb21642c9
 8015b84:	20007628 	.word	0x20007628

08015b88 <__atomic_exchange_8>:
 8015b88:	e92d 03f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9}
 8015b8c:	ea80 4510 	eor.w	r5, r0, r0, lsr #16
 8015b90:	f085 053d 	eor.w	r5, r5, #61	@ 0x3d
 8015b94:	4c16      	ldr	r4, [pc, #88]	@ (8015bf0 <__atomic_exchange_8+0x68>)
 8015b96:	4917      	ldr	r1, [pc, #92]	@ (8015bf4 <__atomic_exchange_8+0x6c>)
 8015b98:	4e17      	ldr	r6, [pc, #92]	@ (8015bf8 <__atomic_exchange_8+0x70>)
 8015b9a:	eb05 05c5 	add.w	r5, r5, r5, lsl #3
 8015b9e:	ea85 1515 	eor.w	r5, r5, r5, lsr #4
 8015ba2:	fb04 f505 	mul.w	r5, r4, r5
 8015ba6:	ea85 35d5 	eor.w	r5, r5, r5, lsr #15
 8015baa:	fba1 4105 	umull	r4, r1, r1, r5
 8015bae:	0909      	lsrs	r1, r1, #4
 8015bb0:	eb01 0441 	add.w	r4, r1, r1, lsl #1
 8015bb4:	ebc1 01c4 	rsb	r1, r1, r4, lsl #3
 8015bb8:	1a6c      	subs	r4, r5, r1
 8015bba:	1931      	adds	r1, r6, r4
 8015bbc:	f04f 0701 	mov.w	r7, #1
 8015bc0:	e8d1 5f4f 	ldrexb	r5, [r1]
 8015bc4:	e8c1 7f4c 	strexb	ip, r7, [r1]
 8015bc8:	f1bc 0f00 	cmp.w	ip, #0
 8015bcc:	d1f8      	bne.n	8015bc0 <__atomic_exchange_8+0x38>
 8015bce:	f3bf 8f5b 	dmb	ish
 8015bd2:	b2ed      	uxtb	r5, r5
 8015bd4:	2d00      	cmp	r5, #0
 8015bd6:	d1f3      	bne.n	8015bc0 <__atomic_exchange_8+0x38>
 8015bd8:	e9d0 8900 	ldrd	r8, r9, [r0]
 8015bdc:	e9c0 2300 	strd	r2, r3, [r0]
 8015be0:	f3bf 8f5b 	dmb	ish
 8015be4:	5535      	strb	r5, [r6, r4]
 8015be6:	4640      	mov	r0, r8
 8015be8:	4649      	mov	r1, r9
 8015bea:	e8bd 03f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9}
 8015bee:	4770      	bx	lr
 8015bf0:	27d4eb2d 	.word	0x27d4eb2d
 8015bf4:	b21642c9 	.word	0xb21642c9
 8015bf8:	20007628 	.word	0x20007628

08015bfc <rcutils_is_directory>:
 8015bfc:	2000      	movs	r0, #0
 8015bfe:	4770      	bx	lr

08015c00 <rcutils_join_path>:
 8015c00:	b082      	sub	sp, #8
 8015c02:	e88d 000c 	stmia.w	sp, {r2, r3}
 8015c06:	2000      	movs	r0, #0
 8015c08:	b002      	add	sp, #8
 8015c0a:	4770      	bx	lr

08015c0c <rcutils_to_native_path>:
 8015c0c:	b084      	sub	sp, #16
 8015c0e:	a801      	add	r0, sp, #4
 8015c10:	e880 000e 	stmia.w	r0, {r1, r2, r3}
 8015c14:	b004      	add	sp, #16
 8015c16:	2000      	movs	r0, #0
 8015c18:	4770      	bx	lr
 8015c1a:	bf00      	nop

08015c1c <rcutils_format_string_limit>:
 8015c1c:	b40f      	push	{r0, r1, r2, r3}
 8015c1e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8015c20:	b083      	sub	sp, #12
 8015c22:	ac08      	add	r4, sp, #32
 8015c24:	9e0e      	ldr	r6, [sp, #56]	@ 0x38
 8015c26:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8015c2a:	b34e      	cbz	r6, 8015c80 <rcutils_format_string_limit+0x64>
 8015c2c:	a808      	add	r0, sp, #32
 8015c2e:	f7f8 f9cb 	bl	800dfc8 <rcutils_allocator_is_valid>
 8015c32:	b328      	cbz	r0, 8015c80 <rcutils_format_string_limit+0x64>
 8015c34:	2100      	movs	r1, #0
 8015c36:	ab0f      	add	r3, sp, #60	@ 0x3c
 8015c38:	4608      	mov	r0, r1
 8015c3a:	4632      	mov	r2, r6
 8015c3c:	e9cd 3300 	strd	r3, r3, [sp]
 8015c40:	f000 f904 	bl	8015e4c <rcutils_vsnprintf>
 8015c44:	1c43      	adds	r3, r0, #1
 8015c46:	4605      	mov	r5, r0
 8015c48:	d01a      	beq.n	8015c80 <rcutils_format_string_limit+0x64>
 8015c4a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8015c4c:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8015c4e:	1c47      	adds	r7, r0, #1
 8015c50:	429f      	cmp	r7, r3
 8015c52:	bf84      	itt	hi
 8015c54:	461f      	movhi	r7, r3
 8015c56:	f103 35ff 	addhi.w	r5, r3, #4294967295	@ 0xffffffff
 8015c5a:	4638      	mov	r0, r7
 8015c5c:	9b08      	ldr	r3, [sp, #32]
 8015c5e:	4798      	blx	r3
 8015c60:	4604      	mov	r4, r0
 8015c62:	b168      	cbz	r0, 8015c80 <rcutils_format_string_limit+0x64>
 8015c64:	9b01      	ldr	r3, [sp, #4]
 8015c66:	4632      	mov	r2, r6
 8015c68:	4639      	mov	r1, r7
 8015c6a:	f000 f8ef 	bl	8015e4c <rcutils_vsnprintf>
 8015c6e:	2800      	cmp	r0, #0
 8015c70:	db02      	blt.n	8015c78 <rcutils_format_string_limit+0x5c>
 8015c72:	2300      	movs	r3, #0
 8015c74:	5563      	strb	r3, [r4, r5]
 8015c76:	e004      	b.n	8015c82 <rcutils_format_string_limit+0x66>
 8015c78:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8015c7a:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8015c7c:	4620      	mov	r0, r4
 8015c7e:	4798      	blx	r3
 8015c80:	2400      	movs	r4, #0
 8015c82:	4620      	mov	r0, r4
 8015c84:	b003      	add	sp, #12
 8015c86:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8015c8a:	b004      	add	sp, #16
 8015c8c:	4770      	bx	lr
 8015c8e:	bf00      	nop

08015c90 <rcutils_get_env>:
 8015c90:	b168      	cbz	r0, 8015cae <rcutils_get_env+0x1e>
 8015c92:	b510      	push	{r4, lr}
 8015c94:	460c      	mov	r4, r1
 8015c96:	b129      	cbz	r1, 8015ca4 <rcutils_get_env+0x14>
 8015c98:	f003 fbbe 	bl	8019418 <getenv>
 8015c9c:	b120      	cbz	r0, 8015ca8 <rcutils_get_env+0x18>
 8015c9e:	6020      	str	r0, [r4, #0]
 8015ca0:	2000      	movs	r0, #0
 8015ca2:	bd10      	pop	{r4, pc}
 8015ca4:	4803      	ldr	r0, [pc, #12]	@ (8015cb4 <rcutils_get_env+0x24>)
 8015ca6:	bd10      	pop	{r4, pc}
 8015ca8:	4b03      	ldr	r3, [pc, #12]	@ (8015cb8 <rcutils_get_env+0x28>)
 8015caa:	6023      	str	r3, [r4, #0]
 8015cac:	bd10      	pop	{r4, pc}
 8015cae:	4803      	ldr	r0, [pc, #12]	@ (8015cbc <rcutils_get_env+0x2c>)
 8015cb0:	4770      	bx	lr
 8015cb2:	bf00      	nop
 8015cb4:	0801c014 	.word	0x0801c014
 8015cb8:	0801c138 	.word	0x0801c138
 8015cbc:	0801bff8 	.word	0x0801bff8

08015cc0 <rcutils_repl_str>:
 8015cc0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015cc4:	ed2d 8b02 	vpush	{d8}
 8015cc8:	b087      	sub	sp, #28
 8015cca:	4680      	mov	r8, r0
 8015ccc:	4608      	mov	r0, r1
 8015cce:	f8cd 8000 	str.w	r8, [sp]
 8015cd2:	ee08 2a10 	vmov	s16, r2
 8015cd6:	468a      	mov	sl, r1
 8015cd8:	4699      	mov	r9, r3
 8015cda:	f7ea fa83 	bl	80001e4 <strlen>
 8015cde:	2600      	movs	r6, #0
 8015ce0:	4647      	mov	r7, r8
 8015ce2:	9001      	str	r0, [sp, #4]
 8015ce4:	46b3      	mov	fp, r6
 8015ce6:	2510      	movs	r5, #16
 8015ce8:	46b0      	mov	r8, r6
 8015cea:	e01d      	b.n	8015d28 <rcutils_repl_str+0x68>
 8015cec:	f10b 0b01 	add.w	fp, fp, #1
 8015cf0:	455e      	cmp	r6, fp
 8015cf2:	d211      	bcs.n	8015d18 <rcutils_repl_str+0x58>
 8015cf4:	442e      	add	r6, r5
 8015cf6:	f8d9 3008 	ldr.w	r3, [r9, #8]
 8015cfa:	f8d9 2010 	ldr.w	r2, [r9, #16]
 8015cfe:	00b1      	lsls	r1, r6, #2
 8015d00:	4798      	blx	r3
 8015d02:	2800      	cmp	r0, #0
 8015d04:	f000 8084 	beq.w	8015e10 <rcutils_repl_str+0x150>
 8015d08:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8015d0c:	f5b5 1f80 	cmp.w	r5, #1048576	@ 0x100000
 8015d10:	bf28      	it	cs
 8015d12:	f44f 1580 	movcs.w	r5, #1048576	@ 0x100000
 8015d16:	4680      	mov	r8, r0
 8015d18:	9a00      	ldr	r2, [sp, #0]
 8015d1a:	eb08 038b 	add.w	r3, r8, fp, lsl #2
 8015d1e:	1aa2      	subs	r2, r4, r2
 8015d20:	f843 2c04 	str.w	r2, [r3, #-4]
 8015d24:	9b01      	ldr	r3, [sp, #4]
 8015d26:	18e7      	adds	r7, r4, r3
 8015d28:	4651      	mov	r1, sl
 8015d2a:	4638      	mov	r0, r7
 8015d2c:	f003 ff59 	bl	8019be2 <strstr>
 8015d30:	4604      	mov	r4, r0
 8015d32:	4640      	mov	r0, r8
 8015d34:	2c00      	cmp	r4, #0
 8015d36:	d1d9      	bne.n	8015cec <rcutils_repl_str+0x2c>
 8015d38:	46b8      	mov	r8, r7
 8015d3a:	4607      	mov	r7, r0
 8015d3c:	4640      	mov	r0, r8
 8015d3e:	f7ea fa51 	bl	80001e4 <strlen>
 8015d42:	9b00      	ldr	r3, [sp, #0]
 8015d44:	eba8 0303 	sub.w	r3, r8, r3
 8015d48:	181d      	adds	r5, r3, r0
 8015d4a:	9504      	str	r5, [sp, #16]
 8015d4c:	f1bb 0f00 	cmp.w	fp, #0
 8015d50:	d03d      	beq.n	8015dce <rcutils_repl_str+0x10e>
 8015d52:	ee18 0a10 	vmov	r0, s16
 8015d56:	f7ea fa45 	bl	80001e4 <strlen>
 8015d5a:	9b01      	ldr	r3, [sp, #4]
 8015d5c:	f8d9 1010 	ldr.w	r1, [r9, #16]
 8015d60:	1ac3      	subs	r3, r0, r3
 8015d62:	fb0b 5303 	mla	r3, fp, r3, r5
 8015d66:	9305      	str	r3, [sp, #20]
 8015d68:	4606      	mov	r6, r0
 8015d6a:	1c58      	adds	r0, r3, #1
 8015d6c:	f8d9 3000 	ldr.w	r3, [r9]
 8015d70:	4798      	blx	r3
 8015d72:	9003      	str	r0, [sp, #12]
 8015d74:	2800      	cmp	r0, #0
 8015d76:	d04c      	beq.n	8015e12 <rcutils_repl_str+0x152>
 8015d78:	683a      	ldr	r2, [r7, #0]
 8015d7a:	9900      	ldr	r1, [sp, #0]
 8015d7c:	f004 f829 	bl	8019dd2 <memcpy>
 8015d80:	9b03      	ldr	r3, [sp, #12]
 8015d82:	683d      	ldr	r5, [r7, #0]
 8015d84:	ee18 8a10 	vmov	r8, s16
 8015d88:	441d      	add	r5, r3
 8015d8a:	f10b 33ff 	add.w	r3, fp, #4294967295	@ 0xffffffff
 8015d8e:	9302      	str	r3, [sp, #8]
 8015d90:	46ba      	mov	sl, r7
 8015d92:	4632      	mov	r2, r6
 8015d94:	4641      	mov	r1, r8
 8015d96:	4628      	mov	r0, r5
 8015d98:	f004 f81b 	bl	8019dd2 <memcpy>
 8015d9c:	9b01      	ldr	r3, [sp, #4]
 8015d9e:	f85a 2b04 	ldr.w	r2, [sl], #4
 8015da2:	441a      	add	r2, r3
 8015da4:	9b00      	ldr	r3, [sp, #0]
 8015da6:	1899      	adds	r1, r3, r2
 8015da8:	9b02      	ldr	r3, [sp, #8]
 8015daa:	4435      	add	r5, r6
 8015dac:	429c      	cmp	r4, r3
 8015dae:	4628      	mov	r0, r5
 8015db0:	d025      	beq.n	8015dfe <rcutils_repl_str+0x13e>
 8015db2:	f8da 3000 	ldr.w	r3, [sl]
 8015db6:	3401      	adds	r4, #1
 8015db8:	1a9a      	subs	r2, r3, r2
 8015dba:	4415      	add	r5, r2
 8015dbc:	f004 f809 	bl	8019dd2 <memcpy>
 8015dc0:	455c      	cmp	r4, fp
 8015dc2:	d3e6      	bcc.n	8015d92 <rcutils_repl_str+0xd2>
 8015dc4:	9a03      	ldr	r2, [sp, #12]
 8015dc6:	9905      	ldr	r1, [sp, #20]
 8015dc8:	2300      	movs	r3, #0
 8015dca:	5453      	strb	r3, [r2, r1]
 8015dcc:	e00b      	b.n	8015de6 <rcutils_repl_str+0x126>
 8015dce:	4628      	mov	r0, r5
 8015dd0:	f8d9 3000 	ldr.w	r3, [r9]
 8015dd4:	f8d9 1010 	ldr.w	r1, [r9, #16]
 8015dd8:	3001      	adds	r0, #1
 8015dda:	4798      	blx	r3
 8015ddc:	9003      	str	r0, [sp, #12]
 8015dde:	b110      	cbz	r0, 8015de6 <rcutils_repl_str+0x126>
 8015de0:	9900      	ldr	r1, [sp, #0]
 8015de2:	f003 ffee 	bl	8019dc2 <strcpy>
 8015de6:	4638      	mov	r0, r7
 8015de8:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8015dec:	f8d9 1010 	ldr.w	r1, [r9, #16]
 8015df0:	4798      	blx	r3
 8015df2:	9803      	ldr	r0, [sp, #12]
 8015df4:	b007      	add	sp, #28
 8015df6:	ecbd 8b02 	vpop	{d8}
 8015dfa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015dfe:	9b04      	ldr	r3, [sp, #16]
 8015e00:	3401      	adds	r4, #1
 8015e02:	1a9a      	subs	r2, r3, r2
 8015e04:	4415      	add	r5, r2
 8015e06:	f003 ffe4 	bl	8019dd2 <memcpy>
 8015e0a:	455c      	cmp	r4, fp
 8015e0c:	d3c1      	bcc.n	8015d92 <rcutils_repl_str+0xd2>
 8015e0e:	e7d9      	b.n	8015dc4 <rcutils_repl_str+0x104>
 8015e10:	4647      	mov	r7, r8
 8015e12:	2300      	movs	r3, #0
 8015e14:	9303      	str	r3, [sp, #12]
 8015e16:	e7e6      	b.n	8015de6 <rcutils_repl_str+0x126>

08015e18 <rcutils_snprintf>:
 8015e18:	b40c      	push	{r2, r3}
 8015e1a:	b530      	push	{r4, r5, lr}
 8015e1c:	b083      	sub	sp, #12
 8015e1e:	ab06      	add	r3, sp, #24
 8015e20:	f853 2b04 	ldr.w	r2, [r3], #4
 8015e24:	9301      	str	r3, [sp, #4]
 8015e26:	b152      	cbz	r2, 8015e3e <rcutils_snprintf+0x26>
 8015e28:	b138      	cbz	r0, 8015e3a <rcutils_snprintf+0x22>
 8015e2a:	b141      	cbz	r1, 8015e3e <rcutils_snprintf+0x26>
 8015e2c:	f003 fe8a 	bl	8019b44 <vsniprintf>
 8015e30:	b003      	add	sp, #12
 8015e32:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8015e36:	b002      	add	sp, #8
 8015e38:	4770      	bx	lr
 8015e3a:	2900      	cmp	r1, #0
 8015e3c:	d0f6      	beq.n	8015e2c <rcutils_snprintf+0x14>
 8015e3e:	f003 ff93 	bl	8019d68 <__errno>
 8015e42:	2316      	movs	r3, #22
 8015e44:	6003      	str	r3, [r0, #0]
 8015e46:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8015e4a:	e7f1      	b.n	8015e30 <rcutils_snprintf+0x18>

08015e4c <rcutils_vsnprintf>:
 8015e4c:	b570      	push	{r4, r5, r6, lr}
 8015e4e:	b13a      	cbz	r2, 8015e60 <rcutils_vsnprintf+0x14>
 8015e50:	b120      	cbz	r0, 8015e5c <rcutils_vsnprintf+0x10>
 8015e52:	b129      	cbz	r1, 8015e60 <rcutils_vsnprintf+0x14>
 8015e54:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8015e58:	f003 be74 	b.w	8019b44 <vsniprintf>
 8015e5c:	2900      	cmp	r1, #0
 8015e5e:	d0f9      	beq.n	8015e54 <rcutils_vsnprintf+0x8>
 8015e60:	f003 ff82 	bl	8019d68 <__errno>
 8015e64:	2316      	movs	r3, #22
 8015e66:	6003      	str	r3, [r0, #0]
 8015e68:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8015e6c:	bd70      	pop	{r4, r5, r6, pc}
 8015e6e:	bf00      	nop

08015e70 <rcutils_strdup>:
 8015e70:	b084      	sub	sp, #16
 8015e72:	b570      	push	{r4, r5, r6, lr}
 8015e74:	b082      	sub	sp, #8
 8015e76:	ac07      	add	r4, sp, #28
 8015e78:	e884 000e 	stmia.w	r4, {r1, r2, r3}
 8015e7c:	4605      	mov	r5, r0
 8015e7e:	b1b0      	cbz	r0, 8015eae <rcutils_strdup+0x3e>
 8015e80:	f7ea f9b0 	bl	80001e4 <strlen>
 8015e84:	1c42      	adds	r2, r0, #1
 8015e86:	9b07      	ldr	r3, [sp, #28]
 8015e88:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8015e8a:	9201      	str	r2, [sp, #4]
 8015e8c:	4606      	mov	r6, r0
 8015e8e:	4610      	mov	r0, r2
 8015e90:	4798      	blx	r3
 8015e92:	4604      	mov	r4, r0
 8015e94:	b128      	cbz	r0, 8015ea2 <rcutils_strdup+0x32>
 8015e96:	9a01      	ldr	r2, [sp, #4]
 8015e98:	4629      	mov	r1, r5
 8015e9a:	f003 ff9a 	bl	8019dd2 <memcpy>
 8015e9e:	2300      	movs	r3, #0
 8015ea0:	55a3      	strb	r3, [r4, r6]
 8015ea2:	4620      	mov	r0, r4
 8015ea4:	b002      	add	sp, #8
 8015ea6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8015eaa:	b004      	add	sp, #16
 8015eac:	4770      	bx	lr
 8015eae:	4604      	mov	r4, r0
 8015eb0:	e7f7      	b.n	8015ea2 <rcutils_strdup+0x32>
 8015eb2:	bf00      	nop

08015eb4 <rcutils_strndup>:
 8015eb4:	b082      	sub	sp, #8
 8015eb6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015eb8:	460e      	mov	r6, r1
 8015eba:	a906      	add	r1, sp, #24
 8015ebc:	e881 000c 	stmia.w	r1, {r2, r3}
 8015ec0:	4605      	mov	r5, r0
 8015ec2:	b180      	cbz	r0, 8015ee6 <rcutils_strndup+0x32>
 8015ec4:	1c77      	adds	r7, r6, #1
 8015ec6:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8015ec8:	4638      	mov	r0, r7
 8015eca:	4790      	blx	r2
 8015ecc:	4604      	mov	r4, r0
 8015ece:	b128      	cbz	r0, 8015edc <rcutils_strndup+0x28>
 8015ed0:	463a      	mov	r2, r7
 8015ed2:	4629      	mov	r1, r5
 8015ed4:	f003 ff7d 	bl	8019dd2 <memcpy>
 8015ed8:	2300      	movs	r3, #0
 8015eda:	55a3      	strb	r3, [r4, r6]
 8015edc:	4620      	mov	r0, r4
 8015ede:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8015ee2:	b002      	add	sp, #8
 8015ee4:	4770      	bx	lr
 8015ee6:	4604      	mov	r4, r0
 8015ee8:	e7f8      	b.n	8015edc <rcutils_strndup+0x28>
 8015eea:	bf00      	nop

08015eec <rmw_get_zero_initialized_context>:
 8015eec:	b510      	push	{r4, lr}
 8015eee:	2250      	movs	r2, #80	@ 0x50
 8015ef0:	4604      	mov	r4, r0
 8015ef2:	2100      	movs	r1, #0
 8015ef4:	f003 fe4e 	bl	8019b94 <memset>
 8015ef8:	4620      	mov	r0, r4
 8015efa:	bd10      	pop	{r4, pc}

08015efc <rmw_get_zero_initialized_init_options>:
 8015efc:	b510      	push	{r4, lr}
 8015efe:	2238      	movs	r2, #56	@ 0x38
 8015f00:	4604      	mov	r4, r0
 8015f02:	2100      	movs	r1, #0
 8015f04:	f003 fe46 	bl	8019b94 <memset>
 8015f08:	f104 0010 	add.w	r0, r4, #16
 8015f0c:	f000 f806 	bl	8015f1c <rmw_get_default_security_options>
 8015f10:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8015f14:	60e3      	str	r3, [r4, #12]
 8015f16:	4620      	mov	r0, r4
 8015f18:	bd10      	pop	{r4, pc}
 8015f1a:	bf00      	nop

08015f1c <rmw_get_default_security_options>:
 8015f1c:	2200      	movs	r2, #0
 8015f1e:	7002      	strb	r2, [r0, #0]
 8015f20:	6042      	str	r2, [r0, #4]
 8015f22:	4770      	bx	lr

08015f24 <rmw_get_default_subscription_options>:
 8015f24:	2200      	movs	r2, #0
 8015f26:	6002      	str	r2, [r0, #0]
 8015f28:	7102      	strb	r2, [r0, #4]
 8015f2a:	4770      	bx	lr

08015f2c <rmw_get_zero_initialized_message_info>:
 8015f2c:	b470      	push	{r4, r5, r6}
 8015f2e:	4d07      	ldr	r5, [pc, #28]	@ (8015f4c <rmw_get_zero_initialized_message_info+0x20>)
 8015f30:	4606      	mov	r6, r0
 8015f32:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8015f34:	4634      	mov	r4, r6
 8015f36:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8015f38:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8015f3a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8015f3c:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8015f40:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8015f44:	4630      	mov	r0, r6
 8015f46:	bc70      	pop	{r4, r5, r6}
 8015f48:	4770      	bx	lr
 8015f4a:	bf00      	nop
 8015f4c:	0801bb80 	.word	0x0801bb80

08015f50 <rmw_validate_namespace_with_size>:
 8015f50:	b340      	cbz	r0, 8015fa4 <rmw_validate_namespace_with_size+0x54>
 8015f52:	b5d0      	push	{r4, r6, r7, lr}
 8015f54:	4614      	mov	r4, r2
 8015f56:	b0c2      	sub	sp, #264	@ 0x108
 8015f58:	b332      	cbz	r2, 8015fa8 <rmw_validate_namespace_with_size+0x58>
 8015f5a:	2901      	cmp	r1, #1
 8015f5c:	460f      	mov	r7, r1
 8015f5e:	461e      	mov	r6, r3
 8015f60:	d102      	bne.n	8015f68 <rmw_validate_namespace_with_size+0x18>
 8015f62:	7803      	ldrb	r3, [r0, #0]
 8015f64:	2b2f      	cmp	r3, #47	@ 0x2f
 8015f66:	d019      	beq.n	8015f9c <rmw_validate_namespace_with_size+0x4c>
 8015f68:	aa01      	add	r2, sp, #4
 8015f6a:	4669      	mov	r1, sp
 8015f6c:	f7f8 f9ea 	bl	800e344 <rmw_validate_full_topic_name>
 8015f70:	b990      	cbnz	r0, 8015f98 <rmw_validate_namespace_with_size+0x48>
 8015f72:	9b00      	ldr	r3, [sp, #0]
 8015f74:	b14b      	cbz	r3, 8015f8a <rmw_validate_namespace_with_size+0x3a>
 8015f76:	2b07      	cmp	r3, #7
 8015f78:	d007      	beq.n	8015f8a <rmw_validate_namespace_with_size+0x3a>
 8015f7a:	1e5a      	subs	r2, r3, #1
 8015f7c:	2a05      	cmp	r2, #5
 8015f7e:	d82b      	bhi.n	8015fd8 <rmw_validate_namespace_with_size+0x88>
 8015f80:	e8df f002 	tbb	[pc, r2]
 8015f84:	24211e1b 	.word	0x24211e1b
 8015f88:	1427      	.short	0x1427
 8015f8a:	2ff5      	cmp	r7, #245	@ 0xf5
 8015f8c:	d906      	bls.n	8015f9c <rmw_validate_namespace_with_size+0x4c>
 8015f8e:	2307      	movs	r3, #7
 8015f90:	6023      	str	r3, [r4, #0]
 8015f92:	b10e      	cbz	r6, 8015f98 <rmw_validate_namespace_with_size+0x48>
 8015f94:	23f4      	movs	r3, #244	@ 0xf4
 8015f96:	6033      	str	r3, [r6, #0]
 8015f98:	b042      	add	sp, #264	@ 0x108
 8015f9a:	bdd0      	pop	{r4, r6, r7, pc}
 8015f9c:	2000      	movs	r0, #0
 8015f9e:	6020      	str	r0, [r4, #0]
 8015fa0:	b042      	add	sp, #264	@ 0x108
 8015fa2:	bdd0      	pop	{r4, r6, r7, pc}
 8015fa4:	200b      	movs	r0, #11
 8015fa6:	4770      	bx	lr
 8015fa8:	200b      	movs	r0, #11
 8015faa:	e7f5      	b.n	8015f98 <rmw_validate_namespace_with_size+0x48>
 8015fac:	2306      	movs	r3, #6
 8015fae:	6023      	str	r3, [r4, #0]
 8015fb0:	2e00      	cmp	r6, #0
 8015fb2:	d0f1      	beq.n	8015f98 <rmw_validate_namespace_with_size+0x48>
 8015fb4:	9b01      	ldr	r3, [sp, #4]
 8015fb6:	6033      	str	r3, [r6, #0]
 8015fb8:	e7ee      	b.n	8015f98 <rmw_validate_namespace_with_size+0x48>
 8015fba:	2301      	movs	r3, #1
 8015fbc:	6023      	str	r3, [r4, #0]
 8015fbe:	e7f7      	b.n	8015fb0 <rmw_validate_namespace_with_size+0x60>
 8015fc0:	2302      	movs	r3, #2
 8015fc2:	6023      	str	r3, [r4, #0]
 8015fc4:	e7f4      	b.n	8015fb0 <rmw_validate_namespace_with_size+0x60>
 8015fc6:	2303      	movs	r3, #3
 8015fc8:	6023      	str	r3, [r4, #0]
 8015fca:	e7f1      	b.n	8015fb0 <rmw_validate_namespace_with_size+0x60>
 8015fcc:	2304      	movs	r3, #4
 8015fce:	6023      	str	r3, [r4, #0]
 8015fd0:	e7ee      	b.n	8015fb0 <rmw_validate_namespace_with_size+0x60>
 8015fd2:	2305      	movs	r3, #5
 8015fd4:	6023      	str	r3, [r4, #0]
 8015fd6:	e7eb      	b.n	8015fb0 <rmw_validate_namespace_with_size+0x60>
 8015fd8:	4a03      	ldr	r2, [pc, #12]	@ (8015fe8 <rmw_validate_namespace_with_size+0x98>)
 8015fda:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8015fde:	a802      	add	r0, sp, #8
 8015fe0:	f7ff ff1a 	bl	8015e18 <rcutils_snprintf>
 8015fe4:	2001      	movs	r0, #1
 8015fe6:	e7d7      	b.n	8015f98 <rmw_validate_namespace_with_size+0x48>
 8015fe8:	0801c030 	.word	0x0801c030

08015fec <rmw_validate_namespace>:
 8015fec:	b168      	cbz	r0, 801600a <rmw_validate_namespace+0x1e>
 8015fee:	b570      	push	{r4, r5, r6, lr}
 8015ff0:	460d      	mov	r5, r1
 8015ff2:	4616      	mov	r6, r2
 8015ff4:	4604      	mov	r4, r0
 8015ff6:	f7ea f8f5 	bl	80001e4 <strlen>
 8015ffa:	4633      	mov	r3, r6
 8015ffc:	4601      	mov	r1, r0
 8015ffe:	462a      	mov	r2, r5
 8016000:	4620      	mov	r0, r4
 8016002:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8016006:	f7ff bfa3 	b.w	8015f50 <rmw_validate_namespace_with_size>
 801600a:	200b      	movs	r0, #11
 801600c:	4770      	bx	lr
 801600e:	bf00      	nop

08016010 <rmw_namespace_validation_result_string>:
 8016010:	2807      	cmp	r0, #7
 8016012:	bf9a      	itte	ls
 8016014:	4b02      	ldrls	r3, [pc, #8]	@ (8016020 <rmw_namespace_validation_result_string+0x10>)
 8016016:	f853 0020 	ldrls.w	r0, [r3, r0, lsl #2]
 801601a:	4802      	ldrhi	r0, [pc, #8]	@ (8016024 <rmw_namespace_validation_result_string+0x14>)
 801601c:	4770      	bx	lr
 801601e:	bf00      	nop
 8016020:	0801c228 	.word	0x0801c228
 8016024:	0801c080 	.word	0x0801c080

08016028 <rmw_validate_node_name>:
 8016028:	2800      	cmp	r0, #0
 801602a:	d03b      	beq.n	80160a4 <rmw_validate_node_name+0x7c>
 801602c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016030:	460f      	mov	r7, r1
 8016032:	2900      	cmp	r1, #0
 8016034:	d038      	beq.n	80160a8 <rmw_validate_node_name+0x80>
 8016036:	4615      	mov	r5, r2
 8016038:	4604      	mov	r4, r0
 801603a:	f7ea f8d3 	bl	80001e4 <strlen>
 801603e:	b1e0      	cbz	r0, 801607a <rmw_validate_node_name+0x52>
 8016040:	1e63      	subs	r3, r4, #1
 8016042:	eb03 0e00 	add.w	lr, r3, r0
 8016046:	f1c4 0c01 	rsb	ip, r4, #1
 801604a:	eb0c 0803 	add.w	r8, ip, r3
 801604e:	f813 6f01 	ldrb.w	r6, [r3, #1]!
 8016052:	f1a6 0130 	sub.w	r1, r6, #48	@ 0x30
 8016056:	f026 0220 	bic.w	r2, r6, #32
 801605a:	2909      	cmp	r1, #9
 801605c:	f1a2 0241 	sub.w	r2, r2, #65	@ 0x41
 8016060:	d913      	bls.n	801608a <rmw_validate_node_name+0x62>
 8016062:	2a19      	cmp	r2, #25
 8016064:	d911      	bls.n	801608a <rmw_validate_node_name+0x62>
 8016066:	2e5f      	cmp	r6, #95	@ 0x5f
 8016068:	d00f      	beq.n	801608a <rmw_validate_node_name+0x62>
 801606a:	2302      	movs	r3, #2
 801606c:	603b      	str	r3, [r7, #0]
 801606e:	b10d      	cbz	r5, 8016074 <rmw_validate_node_name+0x4c>
 8016070:	f8c5 8000 	str.w	r8, [r5]
 8016074:	2000      	movs	r0, #0
 8016076:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801607a:	2301      	movs	r3, #1
 801607c:	603b      	str	r3, [r7, #0]
 801607e:	2d00      	cmp	r5, #0
 8016080:	d0f8      	beq.n	8016074 <rmw_validate_node_name+0x4c>
 8016082:	2000      	movs	r0, #0
 8016084:	6028      	str	r0, [r5, #0]
 8016086:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801608a:	4573      	cmp	r3, lr
 801608c:	d1dd      	bne.n	801604a <rmw_validate_node_name+0x22>
 801608e:	7822      	ldrb	r2, [r4, #0]
 8016090:	4b0d      	ldr	r3, [pc, #52]	@ (80160c8 <rmw_validate_node_name+0xa0>)
 8016092:	5cd3      	ldrb	r3, [r2, r3]
 8016094:	f013 0304 	ands.w	r3, r3, #4
 8016098:	d110      	bne.n	80160bc <rmw_validate_node_name+0x94>
 801609a:	28ff      	cmp	r0, #255	@ 0xff
 801609c:	d806      	bhi.n	80160ac <rmw_validate_node_name+0x84>
 801609e:	603b      	str	r3, [r7, #0]
 80160a0:	4618      	mov	r0, r3
 80160a2:	e7e8      	b.n	8016076 <rmw_validate_node_name+0x4e>
 80160a4:	200b      	movs	r0, #11
 80160a6:	4770      	bx	lr
 80160a8:	200b      	movs	r0, #11
 80160aa:	e7e4      	b.n	8016076 <rmw_validate_node_name+0x4e>
 80160ac:	2204      	movs	r2, #4
 80160ae:	603a      	str	r2, [r7, #0]
 80160b0:	2d00      	cmp	r5, #0
 80160b2:	d0df      	beq.n	8016074 <rmw_validate_node_name+0x4c>
 80160b4:	22fe      	movs	r2, #254	@ 0xfe
 80160b6:	4618      	mov	r0, r3
 80160b8:	602a      	str	r2, [r5, #0]
 80160ba:	e7dc      	b.n	8016076 <rmw_validate_node_name+0x4e>
 80160bc:	2303      	movs	r3, #3
 80160be:	603b      	str	r3, [r7, #0]
 80160c0:	2d00      	cmp	r5, #0
 80160c2:	d1de      	bne.n	8016082 <rmw_validate_node_name+0x5a>
 80160c4:	e7d6      	b.n	8016074 <rmw_validate_node_name+0x4c>
 80160c6:	bf00      	nop
 80160c8:	0801c600 	.word	0x0801c600

080160cc <rmw_node_name_validation_result_string>:
 80160cc:	2804      	cmp	r0, #4
 80160ce:	bf9a      	itte	ls
 80160d0:	4b02      	ldrls	r3, [pc, #8]	@ (80160dc <rmw_node_name_validation_result_string+0x10>)
 80160d2:	f853 0020 	ldrls.w	r0, [r3, r0, lsl #2]
 80160d6:	4802      	ldrhi	r0, [pc, #8]	@ (80160e0 <rmw_node_name_validation_result_string+0x14>)
 80160d8:	4770      	bx	lr
 80160da:	bf00      	nop
 80160dc:	0801c334 	.word	0x0801c334
 80160e0:	0801c248 	.word	0x0801c248

080160e4 <get_memory>:
 80160e4:	4603      	mov	r3, r0
 80160e6:	6840      	ldr	r0, [r0, #4]
 80160e8:	b158      	cbz	r0, 8016102 <get_memory+0x1e>
 80160ea:	6882      	ldr	r2, [r0, #8]
 80160ec:	605a      	str	r2, [r3, #4]
 80160ee:	b10a      	cbz	r2, 80160f4 <get_memory+0x10>
 80160f0:	2100      	movs	r1, #0
 80160f2:	6051      	str	r1, [r2, #4]
 80160f4:	681a      	ldr	r2, [r3, #0]
 80160f6:	6082      	str	r2, [r0, #8]
 80160f8:	b102      	cbz	r2, 80160fc <get_memory+0x18>
 80160fa:	6050      	str	r0, [r2, #4]
 80160fc:	2200      	movs	r2, #0
 80160fe:	6042      	str	r2, [r0, #4]
 8016100:	6018      	str	r0, [r3, #0]
 8016102:	4770      	bx	lr

08016104 <put_memory>:
 8016104:	684b      	ldr	r3, [r1, #4]
 8016106:	b10b      	cbz	r3, 801610c <put_memory+0x8>
 8016108:	688a      	ldr	r2, [r1, #8]
 801610a:	609a      	str	r2, [r3, #8]
 801610c:	688a      	ldr	r2, [r1, #8]
 801610e:	b102      	cbz	r2, 8016112 <put_memory+0xe>
 8016110:	6053      	str	r3, [r2, #4]
 8016112:	6803      	ldr	r3, [r0, #0]
 8016114:	428b      	cmp	r3, r1
 8016116:	6843      	ldr	r3, [r0, #4]
 8016118:	bf08      	it	eq
 801611a:	6002      	streq	r2, [r0, #0]
 801611c:	608b      	str	r3, [r1, #8]
 801611e:	b103      	cbz	r3, 8016122 <put_memory+0x1e>
 8016120:	6059      	str	r1, [r3, #4]
 8016122:	2300      	movs	r3, #0
 8016124:	604b      	str	r3, [r1, #4]
 8016126:	6041      	str	r1, [r0, #4]
 8016128:	4770      	bx	lr
 801612a:	bf00      	nop

0801612c <rmw_destroy_client>:
 801612c:	b570      	push	{r4, r5, r6, lr}
 801612e:	b128      	cbz	r0, 801613c <rmw_destroy_client+0x10>
 8016130:	4604      	mov	r4, r0
 8016132:	6800      	ldr	r0, [r0, #0]
 8016134:	460d      	mov	r5, r1
 8016136:	f7f8 fe57 	bl	800ede8 <is_uxrce_rmw_identifier_valid>
 801613a:	b910      	cbnz	r0, 8016142 <rmw_destroy_client+0x16>
 801613c:	2401      	movs	r4, #1
 801613e:	4620      	mov	r0, r4
 8016140:	bd70      	pop	{r4, r5, r6, pc}
 8016142:	6863      	ldr	r3, [r4, #4]
 8016144:	2b00      	cmp	r3, #0
 8016146:	d0f9      	beq.n	801613c <rmw_destroy_client+0x10>
 8016148:	2d00      	cmp	r5, #0
 801614a:	d0f7      	beq.n	801613c <rmw_destroy_client+0x10>
 801614c:	6828      	ldr	r0, [r5, #0]
 801614e:	f7f8 fe4b 	bl	800ede8 <is_uxrce_rmw_identifier_valid>
 8016152:	2800      	cmp	r0, #0
 8016154:	d0f2      	beq.n	801613c <rmw_destroy_client+0x10>
 8016156:	686e      	ldr	r6, [r5, #4]
 8016158:	2e00      	cmp	r6, #0
 801615a:	d0ef      	beq.n	801613c <rmw_destroy_client+0x10>
 801615c:	6864      	ldr	r4, [r4, #4]
 801615e:	6932      	ldr	r2, [r6, #16]
 8016160:	6920      	ldr	r0, [r4, #16]
 8016162:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 8016166:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 801616a:	6819      	ldr	r1, [r3, #0]
 801616c:	f002 f94c 	bl	8018408 <uxr_buffer_cancel_data>
 8016170:	4602      	mov	r2, r0
 8016172:	6920      	ldr	r0, [r4, #16]
 8016174:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 8016178:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 801617c:	f7f8 fdb4 	bl	800ece8 <run_xrce_session>
 8016180:	6920      	ldr	r0, [r4, #16]
 8016182:	6932      	ldr	r2, [r6, #16]
 8016184:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 8016188:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 801618c:	6819      	ldr	r1, [r3, #0]
 801618e:	f7fa f9e9 	bl	8010564 <uxr_buffer_delete_entity>
 8016192:	4602      	mov	r2, r0
 8016194:	6920      	ldr	r0, [r4, #16]
 8016196:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 801619a:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 801619e:	f7f8 fda3 	bl	800ece8 <run_xrce_session>
 80161a2:	2800      	cmp	r0, #0
 80161a4:	4628      	mov	r0, r5
 80161a6:	bf14      	ite	ne
 80161a8:	2400      	movne	r4, #0
 80161aa:	2402      	moveq	r4, #2
 80161ac:	f7f8 fc8c 	bl	800eac8 <rmw_uxrce_fini_client_memory>
 80161b0:	e7c5      	b.n	801613e <rmw_destroy_client+0x12>
 80161b2:	bf00      	nop

080161b4 <rmw_get_implementation_identifier>:
 80161b4:	4b01      	ldr	r3, [pc, #4]	@ (80161bc <rmw_get_implementation_identifier+0x8>)
 80161b6:	6818      	ldr	r0, [r3, #0]
 80161b8:	4770      	bx	lr
 80161ba:	bf00      	nop
 80161bc:	0801c360 	.word	0x0801c360

080161c0 <rmw_init_options_init>:
 80161c0:	b084      	sub	sp, #16
 80161c2:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80161c6:	ad09      	add	r5, sp, #36	@ 0x24
 80161c8:	e885 000e 	stmia.w	r5, {r1, r2, r3}
 80161cc:	b130      	cbz	r0, 80161dc <rmw_init_options_init+0x1c>
 80161ce:	4604      	mov	r4, r0
 80161d0:	4628      	mov	r0, r5
 80161d2:	f7f7 fef9 	bl	800dfc8 <rcutils_allocator_is_valid>
 80161d6:	b108      	cbz	r0, 80161dc <rmw_init_options_init+0x1c>
 80161d8:	68a3      	ldr	r3, [r4, #8]
 80161da:	b123      	cbz	r3, 80161e6 <rmw_init_options_init+0x26>
 80161dc:	200b      	movs	r0, #11
 80161de:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80161e2:	b004      	add	sp, #16
 80161e4:	4770      	bx	lr
 80161e6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80161e8:	4f1c      	ldr	r7, [pc, #112]	@ (801625c <rmw_init_options_init+0x9c>)
 80161ea:	682e      	ldr	r6, [r5, #0]
 80161ec:	683d      	ldr	r5, [r7, #0]
 80161ee:	60a5      	str	r5, [r4, #8]
 80161f0:	f04f 0800 	mov.w	r8, #0
 80161f4:	f04f 0900 	mov.w	r9, #0
 80161f8:	f104 0520 	add.w	r5, r4, #32
 80161fc:	e9c4 8900 	strd	r8, r9, [r4]
 8016200:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8016202:	4b17      	ldr	r3, [pc, #92]	@ (8016260 <rmw_init_options_init+0xa0>)
 8016204:	4817      	ldr	r0, [pc, #92]	@ (8016264 <rmw_init_options_init+0xa4>)
 8016206:	602e      	str	r6, [r5, #0]
 8016208:	4917      	ldr	r1, [pc, #92]	@ (8016268 <rmw_init_options_init+0xa8>)
 801620a:	61e3      	str	r3, [r4, #28]
 801620c:	2203      	movs	r2, #3
 801620e:	f7f8 fbab 	bl	800e968 <rmw_uxrce_init_init_options_impl_memory>
 8016212:	4814      	ldr	r0, [pc, #80]	@ (8016264 <rmw_init_options_init+0xa4>)
 8016214:	f7ff ff66 	bl	80160e4 <get_memory>
 8016218:	b1e8      	cbz	r0, 8016256 <rmw_init_options_init+0x96>
 801621a:	4a14      	ldr	r2, [pc, #80]	@ (801626c <rmw_init_options_init+0xac>)
 801621c:	68c3      	ldr	r3, [r0, #12]
 801621e:	6851      	ldr	r1, [r2, #4]
 8016220:	7810      	ldrb	r0, [r2, #0]
 8016222:	6363      	str	r3, [r4, #52]	@ 0x34
 8016224:	7418      	strb	r0, [r3, #16]
 8016226:	6159      	str	r1, [r3, #20]
 8016228:	e9d2 5002 	ldrd	r5, r0, [r2, #8]
 801622c:	e9d2 1204 	ldrd	r1, r2, [r2, #16]
 8016230:	e9c3 5006 	strd	r5, r0, [r3, #24]
 8016234:	e9c3 1208 	strd	r1, r2, [r3, #32]
 8016238:	f7fb fe06 	bl	8011e48 <uxr_nanos>
 801623c:	f003 f9f2 	bl	8019624 <srand>
 8016240:	f003 fa1e 	bl	8019680 <rand>
 8016244:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8016246:	6298      	str	r0, [r3, #40]	@ 0x28
 8016248:	2800      	cmp	r0, #0
 801624a:	d0f9      	beq.n	8016240 <rmw_init_options_init+0x80>
 801624c:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8016250:	2000      	movs	r0, #0
 8016252:	b004      	add	sp, #16
 8016254:	4770      	bx	lr
 8016256:	2001      	movs	r0, #1
 8016258:	e7c1      	b.n	80161de <rmw_init_options_init+0x1e>
 801625a:	bf00      	nop
 801625c:	0801c360 	.word	0x0801c360
 8016260:	0801be78 	.word	0x0801be78
 8016264:	2000abb4 	.word	0x2000abb4
 8016268:	2000a808 	.word	0x2000a808
 801626c:	20007898 	.word	0x20007898

08016270 <rmw_init_options_copy>:
 8016270:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016272:	b158      	cbz	r0, 801628c <rmw_init_options_copy+0x1c>
 8016274:	460e      	mov	r6, r1
 8016276:	b149      	cbz	r1, 801628c <rmw_init_options_copy+0x1c>
 8016278:	4604      	mov	r4, r0
 801627a:	6880      	ldr	r0, [r0, #8]
 801627c:	b120      	cbz	r0, 8016288 <rmw_init_options_copy+0x18>
 801627e:	4b1b      	ldr	r3, [pc, #108]	@ (80162ec <rmw_init_options_copy+0x7c>)
 8016280:	6819      	ldr	r1, [r3, #0]
 8016282:	f7e9 ffa5 	bl	80001d0 <strcmp>
 8016286:	bb60      	cbnz	r0, 80162e2 <rmw_init_options_copy+0x72>
 8016288:	68b3      	ldr	r3, [r6, #8]
 801628a:	b113      	cbz	r3, 8016292 <rmw_init_options_copy+0x22>
 801628c:	230b      	movs	r3, #11
 801628e:	4618      	mov	r0, r3
 8016290:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8016292:	4623      	mov	r3, r4
 8016294:	4632      	mov	r2, r6
 8016296:	f104 0c30 	add.w	ip, r4, #48	@ 0x30
 801629a:	681d      	ldr	r5, [r3, #0]
 801629c:	6858      	ldr	r0, [r3, #4]
 801629e:	6899      	ldr	r1, [r3, #8]
 80162a0:	68df      	ldr	r7, [r3, #12]
 80162a2:	60d7      	str	r7, [r2, #12]
 80162a4:	3310      	adds	r3, #16
 80162a6:	4563      	cmp	r3, ip
 80162a8:	6015      	str	r5, [r2, #0]
 80162aa:	6050      	str	r0, [r2, #4]
 80162ac:	6091      	str	r1, [r2, #8]
 80162ae:	f102 0210 	add.w	r2, r2, #16
 80162b2:	d1f2      	bne.n	801629a <rmw_init_options_copy+0x2a>
 80162b4:	6819      	ldr	r1, [r3, #0]
 80162b6:	685b      	ldr	r3, [r3, #4]
 80162b8:	480d      	ldr	r0, [pc, #52]	@ (80162f0 <rmw_init_options_copy+0x80>)
 80162ba:	6053      	str	r3, [r2, #4]
 80162bc:	6011      	str	r1, [r2, #0]
 80162be:	f7ff ff11 	bl	80160e4 <get_memory>
 80162c2:	b188      	cbz	r0, 80162e8 <rmw_init_options_copy+0x78>
 80162c4:	68c5      	ldr	r5, [r0, #12]
 80162c6:	6375      	str	r5, [r6, #52]	@ 0x34
 80162c8:	6b66      	ldr	r6, [r4, #52]	@ 0x34
 80162ca:	3610      	adds	r6, #16
 80162cc:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 80162ce:	f105 0410 	add.w	r4, r5, #16
 80162d2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80162d4:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
 80162d8:	2300      	movs	r3, #0
 80162da:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80162de:	4618      	mov	r0, r3
 80162e0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80162e2:	230c      	movs	r3, #12
 80162e4:	4618      	mov	r0, r3
 80162e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80162e8:	2301      	movs	r3, #1
 80162ea:	e7d0      	b.n	801628e <rmw_init_options_copy+0x1e>
 80162ec:	0801c360 	.word	0x0801c360
 80162f0:	2000abb4 	.word	0x2000abb4

080162f4 <rmw_init_options_fini>:
 80162f4:	2800      	cmp	r0, #0
 80162f6:	d036      	beq.n	8016366 <rmw_init_options_fini+0x72>
 80162f8:	b530      	push	{r4, r5, lr}
 80162fa:	4604      	mov	r4, r0
 80162fc:	b08f      	sub	sp, #60	@ 0x3c
 80162fe:	3020      	adds	r0, #32
 8016300:	f7f7 fe62 	bl	800dfc8 <rcutils_allocator_is_valid>
 8016304:	b328      	cbz	r0, 8016352 <rmw_init_options_fini+0x5e>
 8016306:	68a0      	ldr	r0, [r4, #8]
 8016308:	b120      	cbz	r0, 8016314 <rmw_init_options_fini+0x20>
 801630a:	4b18      	ldr	r3, [pc, #96]	@ (801636c <rmw_init_options_fini+0x78>)
 801630c:	6819      	ldr	r1, [r3, #0]
 801630e:	f7e9 ff5f 	bl	80001d0 <strcmp>
 8016312:	bb30      	cbnz	r0, 8016362 <rmw_init_options_fini+0x6e>
 8016314:	4b16      	ldr	r3, [pc, #88]	@ (8016370 <rmw_init_options_fini+0x7c>)
 8016316:	6819      	ldr	r1, [r3, #0]
 8016318:	b1f9      	cbz	r1, 801635a <rmw_init_options_fini+0x66>
 801631a:	6b62      	ldr	r2, [r4, #52]	@ 0x34
 801631c:	e001      	b.n	8016322 <rmw_init_options_fini+0x2e>
 801631e:	6889      	ldr	r1, [r1, #8]
 8016320:	b1d9      	cbz	r1, 801635a <rmw_init_options_fini+0x66>
 8016322:	68cb      	ldr	r3, [r1, #12]
 8016324:	429a      	cmp	r2, r3
 8016326:	d1fa      	bne.n	801631e <rmw_init_options_fini+0x2a>
 8016328:	4811      	ldr	r0, [pc, #68]	@ (8016370 <rmw_init_options_fini+0x7c>)
 801632a:	f7ff feeb 	bl	8016104 <put_memory>
 801632e:	466d      	mov	r5, sp
 8016330:	4668      	mov	r0, sp
 8016332:	f7ff fde3 	bl	8015efc <rmw_get_zero_initialized_init_options>
 8016336:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8016338:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801633a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801633c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801633e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8016340:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8016342:	e895 0003 	ldmia.w	r5, {r0, r1}
 8016346:	e884 0003 	stmia.w	r4, {r0, r1}
 801634a:	2300      	movs	r3, #0
 801634c:	4618      	mov	r0, r3
 801634e:	b00f      	add	sp, #60	@ 0x3c
 8016350:	bd30      	pop	{r4, r5, pc}
 8016352:	230b      	movs	r3, #11
 8016354:	4618      	mov	r0, r3
 8016356:	b00f      	add	sp, #60	@ 0x3c
 8016358:	bd30      	pop	{r4, r5, pc}
 801635a:	2301      	movs	r3, #1
 801635c:	4618      	mov	r0, r3
 801635e:	b00f      	add	sp, #60	@ 0x3c
 8016360:	bd30      	pop	{r4, r5, pc}
 8016362:	230c      	movs	r3, #12
 8016364:	e7f2      	b.n	801634c <rmw_init_options_fini+0x58>
 8016366:	230b      	movs	r3, #11
 8016368:	4618      	mov	r0, r3
 801636a:	4770      	bx	lr
 801636c:	0801c360 	.word	0x0801c360
 8016370:	2000abb4 	.word	0x2000abb4

08016374 <rmw_init>:
 8016374:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8016378:	b082      	sub	sp, #8
 801637a:	2800      	cmp	r0, #0
 801637c:	f000 80d6 	beq.w	801652c <rmw_init+0x1b8>
 8016380:	460e      	mov	r6, r1
 8016382:	2900      	cmp	r1, #0
 8016384:	f000 80d2 	beq.w	801652c <rmw_init+0x1b8>
 8016388:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 801638a:	4605      	mov	r5, r0
 801638c:	2b00      	cmp	r3, #0
 801638e:	f000 80cd 	beq.w	801652c <rmw_init+0x1b8>
 8016392:	4b79      	ldr	r3, [pc, #484]	@ (8016578 <rmw_init+0x204>)
 8016394:	6880      	ldr	r0, [r0, #8]
 8016396:	f8d3 9000 	ldr.w	r9, [r3]
 801639a:	b128      	cbz	r0, 80163a8 <rmw_init+0x34>
 801639c:	4649      	mov	r1, r9
 801639e:	f7e9 ff17 	bl	80001d0 <strcmp>
 80163a2:	2800      	cmp	r0, #0
 80163a4:	f040 80cc 	bne.w	8016540 <rmw_init+0x1cc>
 80163a8:	e9d5 0100 	ldrd	r0, r1, [r5]
 80163ac:	68eb      	ldr	r3, [r5, #12]
 80163ae:	61f3      	str	r3, [r6, #28]
 80163b0:	e9c6 0100 	strd	r0, r1, [r6]
 80163b4:	2201      	movs	r2, #1
 80163b6:	4971      	ldr	r1, [pc, #452]	@ (801657c <rmw_init+0x208>)
 80163b8:	4871      	ldr	r0, [pc, #452]	@ (8016580 <rmw_init+0x20c>)
 80163ba:	f8c6 9008 	str.w	r9, [r6, #8]
 80163be:	f7f8 fa7b 	bl	800e8b8 <rmw_uxrce_init_session_memory>
 80163c2:	4870      	ldr	r0, [pc, #448]	@ (8016584 <rmw_init+0x210>)
 80163c4:	4970      	ldr	r1, [pc, #448]	@ (8016588 <rmw_init+0x214>)
 80163c6:	2204      	movs	r2, #4
 80163c8:	f7f8 fab0 	bl	800e92c <rmw_uxrce_init_static_input_buffer_memory>
 80163cc:	486c      	ldr	r0, [pc, #432]	@ (8016580 <rmw_init+0x20c>)
 80163ce:	f7ff fe89 	bl	80160e4 <get_memory>
 80163d2:	2800      	cmp	r0, #0
 80163d4:	f000 80af 	beq.w	8016536 <rmw_init+0x1c2>
 80163d8:	6b6f      	ldr	r7, [r5, #52]	@ 0x34
 80163da:	68c4      	ldr	r4, [r0, #12]
 80163dc:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80163de:	7c39      	ldrb	r1, [r7, #16]
 80163e0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80163e4:	9001      	str	r0, [sp, #4]
 80163e6:	6a38      	ldr	r0, [r7, #32]
 80163e8:	9000      	str	r0, [sp, #0]
 80163ea:	f104 0a10 	add.w	sl, r4, #16
 80163ee:	4650      	mov	r0, sl
 80163f0:	f001 fa5a 	bl	80178a8 <uxr_set_custom_transport_callbacks>
 80163f4:	f241 5294 	movw	r2, #5524	@ 0x1594
 80163f8:	f241 5398 	movw	r3, #5528	@ 0x1598
 80163fc:	f04f 0800 	mov.w	r8, #0
 8016400:	f241 509c 	movw	r0, #5532	@ 0x159c
 8016404:	f504 51ad 	add.w	r1, r4, #5536	@ 0x15a0
 8016408:	f844 8002 	str.w	r8, [r4, r2]
 801640c:	f844 8003 	str.w	r8, [r4, r3]
 8016410:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8016414:	f504 735e 	add.w	r3, r4, #888	@ 0x378
 8016418:	f844 8000 	str.w	r8, [r4, r0]
 801641c:	e9c4 33e1 	strd	r3, r3, [r4, #900]	@ 0x384
 8016420:	e9c4 22e3 	strd	r2, r2, [r4, #908]	@ 0x38c
 8016424:	4859      	ldr	r0, [pc, #356]	@ (801658c <rmw_init+0x218>)
 8016426:	f8c1 8000 	str.w	r8, [r1]
 801642a:	2201      	movs	r2, #1
 801642c:	e9c4 98da 	strd	r9, r8, [r4, #872]	@ 0x368
 8016430:	4957      	ldr	r1, [pc, #348]	@ (8016590 <rmw_init+0x21c>)
 8016432:	64b4      	str	r4, [r6, #72]	@ 0x48
 8016434:	f7f8 fa26 	bl	800e884 <rmw_uxrce_init_node_memory>
 8016438:	4956      	ldr	r1, [pc, #344]	@ (8016594 <rmw_init+0x220>)
 801643a:	4857      	ldr	r0, [pc, #348]	@ (8016598 <rmw_init+0x224>)
 801643c:	2205      	movs	r2, #5
 801643e:	f7f8 fa07 	bl	800e850 <rmw_uxrce_init_subscription_memory>
 8016442:	4956      	ldr	r1, [pc, #344]	@ (801659c <rmw_init+0x228>)
 8016444:	4856      	ldr	r0, [pc, #344]	@ (80165a0 <rmw_init+0x22c>)
 8016446:	220a      	movs	r2, #10
 8016448:	f7f8 f9e8 	bl	800e81c <rmw_uxrce_init_publisher_memory>
 801644c:	4955      	ldr	r1, [pc, #340]	@ (80165a4 <rmw_init+0x230>)
 801644e:	4856      	ldr	r0, [pc, #344]	@ (80165a8 <rmw_init+0x234>)
 8016450:	2201      	movs	r2, #1
 8016452:	f7f8 f9af 	bl	800e7b4 <rmw_uxrce_init_service_memory>
 8016456:	4955      	ldr	r1, [pc, #340]	@ (80165ac <rmw_init+0x238>)
 8016458:	4855      	ldr	r0, [pc, #340]	@ (80165b0 <rmw_init+0x23c>)
 801645a:	2201      	movs	r2, #1
 801645c:	f7f8 f9c4 	bl	800e7e8 <rmw_uxrce_init_client_memory>
 8016460:	4954      	ldr	r1, [pc, #336]	@ (80165b4 <rmw_init+0x240>)
 8016462:	4855      	ldr	r0, [pc, #340]	@ (80165b8 <rmw_init+0x244>)
 8016464:	220f      	movs	r2, #15
 8016466:	f7f8 fa45 	bl	800e8f4 <rmw_uxrce_init_topic_memory>
 801646a:	4954      	ldr	r1, [pc, #336]	@ (80165bc <rmw_init+0x248>)
 801646c:	4854      	ldr	r0, [pc, #336]	@ (80165c0 <rmw_init+0x24c>)
 801646e:	2203      	movs	r2, #3
 8016470:	f7f8 fa7a 	bl	800e968 <rmw_uxrce_init_init_options_impl_memory>
 8016474:	4953      	ldr	r1, [pc, #332]	@ (80165c4 <rmw_init+0x250>)
 8016476:	4854      	ldr	r0, [pc, #336]	@ (80165c8 <rmw_init+0x254>)
 8016478:	2204      	movs	r2, #4
 801647a:	f7f8 fa8f 	bl	800e99c <rmw_uxrce_init_wait_set_memory>
 801647e:	4953      	ldr	r1, [pc, #332]	@ (80165cc <rmw_init+0x258>)
 8016480:	4853      	ldr	r0, [pc, #332]	@ (80165d0 <rmw_init+0x25c>)
 8016482:	2204      	movs	r2, #4
 8016484:	f7f8 faa6 	bl	800e9d4 <rmw_uxrce_init_guard_condition_memory>
 8016488:	6b69      	ldr	r1, [r5, #52]	@ 0x34
 801648a:	6cb0      	ldr	r0, [r6, #72]	@ 0x48
 801648c:	4642      	mov	r2, r8
 801648e:	f000 fd49 	bl	8016f24 <rmw_uxrce_transport_init>
 8016492:	4607      	mov	r7, r0
 8016494:	2800      	cmp	r0, #0
 8016496:	d158      	bne.n	801654a <rmw_init+0x1d6>
 8016498:	6b6b      	ldr	r3, [r5, #52]	@ 0x34
 801649a:	f504 7528 	add.w	r5, r4, #672	@ 0x2a0
 801649e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80164a0:	4628      	mov	r0, r5
 80164a2:	f504 7122 	add.w	r1, r4, #648	@ 0x288
 80164a6:	f7fa fb1b 	bl	8010ae0 <uxr_init_session>
 80164aa:	494a      	ldr	r1, [pc, #296]	@ (80165d4 <rmw_init+0x260>)
 80164ac:	4622      	mov	r2, r4
 80164ae:	4628      	mov	r0, r5
 80164b0:	f7fa fb38 	bl	8010b24 <uxr_set_topic_callback>
 80164b4:	4948      	ldr	r1, [pc, #288]	@ (80165d8 <rmw_init+0x264>)
 80164b6:	463a      	mov	r2, r7
 80164b8:	4628      	mov	r0, r5
 80164ba:	f7fa fb2f 	bl	8010b1c <uxr_set_status_callback>
 80164be:	4947      	ldr	r1, [pc, #284]	@ (80165dc <rmw_init+0x268>)
 80164c0:	463a      	mov	r2, r7
 80164c2:	4628      	mov	r0, r5
 80164c4:	f7fa fb32 	bl	8010b2c <uxr_set_request_callback>
 80164c8:	4945      	ldr	r1, [pc, #276]	@ (80165e0 <rmw_init+0x26c>)
 80164ca:	463a      	mov	r2, r7
 80164cc:	4628      	mov	r0, r5
 80164ce:	f7fa fb31 	bl	8010b34 <uxr_set_reply_callback>
 80164d2:	f8b4 2298 	ldrh.w	r2, [r4, #664]	@ 0x298
 80164d6:	2304      	movs	r3, #4
 80164d8:	0092      	lsls	r2, r2, #2
 80164da:	f504 7165 	add.w	r1, r4, #916	@ 0x394
 80164de:	4628      	mov	r0, r5
 80164e0:	f7fa fb68 	bl	8010bb4 <uxr_create_input_reliable_stream>
 80164e4:	f8b4 2298 	ldrh.w	r2, [r4, #664]	@ 0x298
 80164e8:	f8c4 0374 	str.w	r0, [r4, #884]	@ 0x374
 80164ec:	0092      	lsls	r2, r2, #2
 80164ee:	2304      	movs	r3, #4
 80164f0:	f604 3194 	addw	r1, r4, #2964	@ 0xb94
 80164f4:	4628      	mov	r0, r5
 80164f6:	f7fa fb33 	bl	8010b60 <uxr_create_output_reliable_stream>
 80164fa:	f8c4 0378 	str.w	r0, [r4, #888]	@ 0x378
 80164fe:	4628      	mov	r0, r5
 8016500:	f7fa fb52 	bl	8010ba8 <uxr_create_input_best_effort_stream>
 8016504:	f504 519c 	add.w	r1, r4, #4992	@ 0x1380
 8016508:	f8c4 0380 	str.w	r0, [r4, #896]	@ 0x380
 801650c:	f8b4 2298 	ldrh.w	r2, [r4, #664]	@ 0x298
 8016510:	4628      	mov	r0, r5
 8016512:	3114      	adds	r1, #20
 8016514:	f7fa fb12 	bl	8010b3c <uxr_create_output_best_effort_stream>
 8016518:	f8c4 037c 	str.w	r0, [r4, #892]	@ 0x37c
 801651c:	4628      	mov	r0, r5
 801651e:	f7fa ffa3 	bl	8011468 <uxr_create_session>
 8016522:	b1f8      	cbz	r0, 8016564 <rmw_init+0x1f0>
 8016524:	4638      	mov	r0, r7
 8016526:	b002      	add	sp, #8
 8016528:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801652c:	270b      	movs	r7, #11
 801652e:	4638      	mov	r0, r7
 8016530:	b002      	add	sp, #8
 8016532:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8016536:	2701      	movs	r7, #1
 8016538:	4638      	mov	r0, r7
 801653a:	b002      	add	sp, #8
 801653c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8016540:	270c      	movs	r7, #12
 8016542:	4638      	mov	r0, r7
 8016544:	b002      	add	sp, #8
 8016546:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801654a:	4650      	mov	r0, sl
 801654c:	f001 f9ec 	bl	8017928 <uxr_close_custom_transport>
 8016550:	480b      	ldr	r0, [pc, #44]	@ (8016580 <rmw_init+0x20c>)
 8016552:	4621      	mov	r1, r4
 8016554:	f7ff fdd6 	bl	8016104 <put_memory>
 8016558:	4638      	mov	r0, r7
 801655a:	f8c6 8048 	str.w	r8, [r6, #72]	@ 0x48
 801655e:	b002      	add	sp, #8
 8016560:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8016564:	4650      	mov	r0, sl
 8016566:	f001 f9df 	bl	8017928 <uxr_close_custom_transport>
 801656a:	4805      	ldr	r0, [pc, #20]	@ (8016580 <rmw_init+0x20c>)
 801656c:	4621      	mov	r1, r4
 801656e:	f7ff fdc9 	bl	8016104 <put_memory>
 8016572:	64b7      	str	r7, [r6, #72]	@ 0x48
 8016574:	2701      	movs	r7, #1
 8016576:	e7d5      	b.n	8016524 <rmw_init+0x1b0>
 8016578:	0801c360 	.word	0x0801c360
 801657c:	2000ac90 	.word	0x2000ac90
 8016580:	2000aa60 	.word	0x2000aa60
 8016584:	200078b8 	.word	0x200078b8
 8016588:	20008698 	.word	0x20008698
 801658c:	2000a88c 	.word	0x2000a88c
 8016590:	2000aa70 	.word	0x2000aa70
 8016594:	200081c0 	.word	0x200081c0
 8016598:	2000ab24 	.word	0x2000ab24
 801659c:	200078d8 	.word	0x200078d8
 80165a0:	200078c8 	.word	0x200078c8
 80165a4:	2000abc8 	.word	0x2000abc8
 80165a8:	2000ab14 	.word	0x2000ab14
 80165ac:	200085d0 	.word	0x200085d0
 80165b0:	20008148 	.word	0x20008148
 80165b4:	2000a89c 	.word	0x2000a89c
 80165b8:	2000aa50 	.word	0x2000aa50
 80165bc:	2000a808 	.word	0x2000a808
 80165c0:	2000abb4 	.word	0x2000abb4
 80165c4:	2000a798 	.word	0x2000a798
 80165c8:	2000c238 	.word	0x2000c238
 80165cc:	2000ab34 	.word	0x2000ab34
 80165d0:	2000aa40 	.word	0x2000aa40
 80165d4:	080191b1 	.word	0x080191b1
 80165d8:	080191a9 	.word	0x080191a9
 80165dc:	08019245 	.word	0x08019245
 80165e0:	080192dd 	.word	0x080192dd

080165e4 <rmw_context_fini>:
 80165e4:	4b17      	ldr	r3, [pc, #92]	@ (8016644 <rmw_context_fini+0x60>)
 80165e6:	b570      	push	{r4, r5, r6, lr}
 80165e8:	681c      	ldr	r4, [r3, #0]
 80165ea:	4605      	mov	r5, r0
 80165ec:	6c80      	ldr	r0, [r0, #72]	@ 0x48
 80165ee:	b33c      	cbz	r4, 8016640 <rmw_context_fini+0x5c>
 80165f0:	2600      	movs	r6, #0
 80165f2:	e9d4 4302 	ldrd	r4, r3, [r4, #8]
 80165f6:	691a      	ldr	r2, [r3, #16]
 80165f8:	4282      	cmp	r2, r0
 80165fa:	d018      	beq.n	801662e <rmw_context_fini+0x4a>
 80165fc:	2c00      	cmp	r4, #0
 80165fe:	d1f8      	bne.n	80165f2 <rmw_context_fini+0xe>
 8016600:	b188      	cbz	r0, 8016626 <rmw_context_fini+0x42>
 8016602:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 8016606:	789b      	ldrb	r3, [r3, #2]
 8016608:	2b01      	cmp	r3, #1
 801660a:	bf14      	ite	ne
 801660c:	210a      	movne	r1, #10
 801660e:	2100      	moveq	r1, #0
 8016610:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8016614:	f7fb f8ea 	bl	80117ec <uxr_delete_session_retries>
 8016618:	6ca8      	ldr	r0, [r5, #72]	@ 0x48
 801661a:	f7f8 f9f5 	bl	800ea08 <rmw_uxrce_fini_session_memory>
 801661e:	6ca8      	ldr	r0, [r5, #72]	@ 0x48
 8016620:	3010      	adds	r0, #16
 8016622:	f001 f981 	bl	8017928 <uxr_close_custom_transport>
 8016626:	2300      	movs	r3, #0
 8016628:	4630      	mov	r0, r6
 801662a:	64ab      	str	r3, [r5, #72]	@ 0x48
 801662c:	bd70      	pop	{r4, r5, r6, pc}
 801662e:	f103 0018 	add.w	r0, r3, #24
 8016632:	f000 f90d 	bl	8016850 <rmw_destroy_node>
 8016636:	4606      	mov	r6, r0
 8016638:	6ca8      	ldr	r0, [r5, #72]	@ 0x48
 801663a:	2c00      	cmp	r4, #0
 801663c:	d1d9      	bne.n	80165f2 <rmw_context_fini+0xe>
 801663e:	e7df      	b.n	8016600 <rmw_context_fini+0x1c>
 8016640:	4626      	mov	r6, r4
 8016642:	e7dd      	b.n	8016600 <rmw_context_fini+0x1c>
 8016644:	2000a88c 	.word	0x2000a88c

08016648 <create_topic>:
 8016648:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801664c:	4607      	mov	r7, r0
 801664e:	b084      	sub	sp, #16
 8016650:	4822      	ldr	r0, [pc, #136]	@ (80166dc <create_topic+0x94>)
 8016652:	4689      	mov	r9, r1
 8016654:	4690      	mov	r8, r2
 8016656:	f7ff fd45 	bl	80160e4 <get_memory>
 801665a:	4604      	mov	r4, r0
 801665c:	2800      	cmp	r0, #0
 801665e:	d038      	beq.n	80166d2 <create_topic+0x8a>
 8016660:	693e      	ldr	r6, [r7, #16]
 8016662:	68c4      	ldr	r4, [r0, #12]
 8016664:	f8df a07c 	ldr.w	sl, [pc, #124]	@ 80166e4 <create_topic+0x9c>
 8016668:	61a7      	str	r7, [r4, #24]
 801666a:	f241 5596 	movw	r5, #5526	@ 0x1596
 801666e:	f8c4 8014 	str.w	r8, [r4, #20]
 8016672:	5b70      	ldrh	r0, [r6, r5]
 8016674:	1c42      	adds	r2, r0, #1
 8016676:	5372      	strh	r2, [r6, r5]
 8016678:	2102      	movs	r1, #2
 801667a:	f7fa f975 	bl	8010968 <uxr_object_id>
 801667e:	4651      	mov	r1, sl
 8016680:	6120      	str	r0, [r4, #16]
 8016682:	223c      	movs	r2, #60	@ 0x3c
 8016684:	4648      	mov	r0, r9
 8016686:	f7f8 fb95 	bl	800edb4 <generate_topic_name>
 801668a:	b1f0      	cbz	r0, 80166ca <create_topic+0x82>
 801668c:	4d14      	ldr	r5, [pc, #80]	@ (80166e0 <create_topic+0x98>)
 801668e:	4640      	mov	r0, r8
 8016690:	4629      	mov	r1, r5
 8016692:	2264      	movs	r2, #100	@ 0x64
 8016694:	f7f8 fb5e 	bl	800ed54 <generate_type_name>
 8016698:	b1b8      	cbz	r0, 80166ca <create_topic+0x82>
 801669a:	e9d7 0304 	ldrd	r0, r3, [r7, #16]
 801669e:	2106      	movs	r1, #6
 80166a0:	f8d0 2384 	ldr.w	r2, [r0, #900]	@ 0x384
 80166a4:	9501      	str	r5, [sp, #4]
 80166a6:	f8cd a000 	str.w	sl, [sp]
 80166aa:	9102      	str	r1, [sp, #8]
 80166ac:	6811      	ldr	r1, [r2, #0]
 80166ae:	6922      	ldr	r2, [r4, #16]
 80166b0:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 80166b4:	f7f9 ffd4 	bl	8010660 <uxr_buffer_create_topic_bin>
 80166b8:	4602      	mov	r2, r0
 80166ba:	6938      	ldr	r0, [r7, #16]
 80166bc:	f8d0 338c 	ldr.w	r3, [r0, #908]	@ 0x38c
 80166c0:	f8d0 1384 	ldr.w	r1, [r0, #900]	@ 0x384
 80166c4:	f7f8 fb10 	bl	800ece8 <run_xrce_session>
 80166c8:	b918      	cbnz	r0, 80166d2 <create_topic+0x8a>
 80166ca:	4620      	mov	r0, r4
 80166cc:	f7f8 fa12 	bl	800eaf4 <rmw_uxrce_fini_topic_memory>
 80166d0:	2400      	movs	r4, #0
 80166d2:	4620      	mov	r0, r4
 80166d4:	b004      	add	sp, #16
 80166d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80166da:	bf00      	nop
 80166dc:	2000aa50 	.word	0x2000aa50
 80166e0:	2000767c 	.word	0x2000767c
 80166e4:	20007640 	.word	0x20007640

080166e8 <destroy_topic>:
 80166e8:	b538      	push	{r3, r4, r5, lr}
 80166ea:	6985      	ldr	r5, [r0, #24]
 80166ec:	b1d5      	cbz	r5, 8016724 <destroy_topic+0x3c>
 80166ee:	4604      	mov	r4, r0
 80166f0:	6928      	ldr	r0, [r5, #16]
 80166f2:	6922      	ldr	r2, [r4, #16]
 80166f4:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 80166f8:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 80166fc:	6819      	ldr	r1, [r3, #0]
 80166fe:	f7f9 ff31 	bl	8010564 <uxr_buffer_delete_entity>
 8016702:	4602      	mov	r2, r0
 8016704:	6928      	ldr	r0, [r5, #16]
 8016706:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 801670a:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 801670e:	f7f8 faeb 	bl	800ece8 <run_xrce_session>
 8016712:	2800      	cmp	r0, #0
 8016714:	4620      	mov	r0, r4
 8016716:	bf14      	ite	ne
 8016718:	2400      	movne	r4, #0
 801671a:	2402      	moveq	r4, #2
 801671c:	f7f8 f9ea 	bl	800eaf4 <rmw_uxrce_fini_topic_memory>
 8016720:	4620      	mov	r0, r4
 8016722:	bd38      	pop	{r3, r4, r5, pc}
 8016724:	2401      	movs	r4, #1
 8016726:	4620      	mov	r0, r4
 8016728:	bd38      	pop	{r3, r4, r5, pc}
 801672a:	bf00      	nop

0801672c <create_node>:
 801672c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8016730:	b083      	sub	sp, #12
 8016732:	2b00      	cmp	r3, #0
 8016734:	d05f      	beq.n	80167f6 <create_node+0xca>
 8016736:	4606      	mov	r6, r0
 8016738:	4835      	ldr	r0, [pc, #212]	@ (8016810 <create_node+0xe4>)
 801673a:	460f      	mov	r7, r1
 801673c:	4690      	mov	r8, r2
 801673e:	461d      	mov	r5, r3
 8016740:	f7ff fcd0 	bl	80160e4 <get_memory>
 8016744:	2800      	cmp	r0, #0
 8016746:	d056      	beq.n	80167f6 <create_node+0xca>
 8016748:	68c4      	ldr	r4, [r0, #12]
 801674a:	6cab      	ldr	r3, [r5, #72]	@ 0x48
 801674c:	6123      	str	r3, [r4, #16]
 801674e:	f7ff fd31 	bl	80161b4 <rmw_get_implementation_identifier>
 8016752:	f104 092c 	add.w	r9, r4, #44	@ 0x2c
 8016756:	e9c4 0406 	strd	r0, r4, [r4, #24]
 801675a:	f8c4 9020 	str.w	r9, [r4, #32]
 801675e:	4630      	mov	r0, r6
 8016760:	f7e9 fd40 	bl	80001e4 <strlen>
 8016764:	1c42      	adds	r2, r0, #1
 8016766:	2a3c      	cmp	r2, #60	@ 0x3c
 8016768:	f104 0518 	add.w	r5, r4, #24
 801676c:	d840      	bhi.n	80167f0 <create_node+0xc4>
 801676e:	4648      	mov	r0, r9
 8016770:	4631      	mov	r1, r6
 8016772:	f104 0968 	add.w	r9, r4, #104	@ 0x68
 8016776:	f003 fb2c 	bl	8019dd2 <memcpy>
 801677a:	f8c4 9024 	str.w	r9, [r4, #36]	@ 0x24
 801677e:	4638      	mov	r0, r7
 8016780:	f7e9 fd30 	bl	80001e4 <strlen>
 8016784:	1c42      	adds	r2, r0, #1
 8016786:	2a3c      	cmp	r2, #60	@ 0x3c
 8016788:	d832      	bhi.n	80167f0 <create_node+0xc4>
 801678a:	4639      	mov	r1, r7
 801678c:	4648      	mov	r0, r9
 801678e:	f003 fb20 	bl	8019dd2 <memcpy>
 8016792:	f241 5394 	movw	r3, #5524	@ 0x1594
 8016796:	6922      	ldr	r2, [r4, #16]
 8016798:	5ad0      	ldrh	r0, [r2, r3]
 801679a:	2101      	movs	r1, #1
 801679c:	eb00 0c01 	add.w	ip, r0, r1
 80167a0:	f822 c003 	strh.w	ip, [r2, r3]
 80167a4:	f7fa f8e0 	bl	8010968 <uxr_object_id>
 80167a8:	6160      	str	r0, [r4, #20]
 80167aa:	783b      	ldrb	r3, [r7, #0]
 80167ac:	2b2f      	cmp	r3, #47	@ 0x2f
 80167ae:	d127      	bne.n	8016800 <create_node+0xd4>
 80167b0:	787b      	ldrb	r3, [r7, #1]
 80167b2:	bb2b      	cbnz	r3, 8016800 <create_node+0xd4>
 80167b4:	4a17      	ldr	r2, [pc, #92]	@ (8016814 <create_node+0xe8>)
 80167b6:	4818      	ldr	r0, [pc, #96]	@ (8016818 <create_node+0xec>)
 80167b8:	4633      	mov	r3, r6
 80167ba:	213c      	movs	r1, #60	@ 0x3c
 80167bc:	f003 f920 	bl	8019a00 <sniprintf>
 80167c0:	6920      	ldr	r0, [r4, #16]
 80167c2:	4b15      	ldr	r3, [pc, #84]	@ (8016818 <create_node+0xec>)
 80167c4:	f8d0 2384 	ldr.w	r2, [r0, #900]	@ 0x384
 80167c8:	9300      	str	r3, [sp, #0]
 80167ca:	2306      	movs	r3, #6
 80167cc:	9301      	str	r3, [sp, #4]
 80167ce:	6811      	ldr	r1, [r2, #0]
 80167d0:	6962      	ldr	r2, [r4, #20]
 80167d2:	fa1f f388 	uxth.w	r3, r8
 80167d6:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 80167da:	f7f9 ff0f 	bl	80105fc <uxr_buffer_create_participant_bin>
 80167de:	4602      	mov	r2, r0
 80167e0:	6920      	ldr	r0, [r4, #16]
 80167e2:	f8d0 338c 	ldr.w	r3, [r0, #908]	@ 0x38c
 80167e6:	f8d0 1384 	ldr.w	r1, [r0, #900]	@ 0x384
 80167ea:	f7f8 fa7d 	bl	800ece8 <run_xrce_session>
 80167ee:	b918      	cbnz	r0, 80167f8 <create_node+0xcc>
 80167f0:	4628      	mov	r0, r5
 80167f2:	f7f8 f90f 	bl	800ea14 <rmw_uxrce_fini_node_memory>
 80167f6:	2500      	movs	r5, #0
 80167f8:	4628      	mov	r0, r5
 80167fa:	b003      	add	sp, #12
 80167fc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8016800:	4a06      	ldr	r2, [pc, #24]	@ (801681c <create_node+0xf0>)
 8016802:	9600      	str	r6, [sp, #0]
 8016804:	463b      	mov	r3, r7
 8016806:	213c      	movs	r1, #60	@ 0x3c
 8016808:	4803      	ldr	r0, [pc, #12]	@ (8016818 <create_node+0xec>)
 801680a:	f003 f8f9 	bl	8019a00 <sniprintf>
 801680e:	e7d7      	b.n	80167c0 <create_node+0x94>
 8016810:	2000a88c 	.word	0x2000a88c
 8016814:	0801bddc 	.word	0x0801bddc
 8016818:	200076e0 	.word	0x200076e0
 801681c:	0801be3c 	.word	0x0801be3c

08016820 <rmw_create_node>:
 8016820:	b199      	cbz	r1, 801684a <rmw_create_node+0x2a>
 8016822:	b430      	push	{r4, r5}
 8016824:	4615      	mov	r5, r2
 8016826:	461a      	mov	r2, r3
 8016828:	780b      	ldrb	r3, [r1, #0]
 801682a:	460c      	mov	r4, r1
 801682c:	b153      	cbz	r3, 8016844 <rmw_create_node+0x24>
 801682e:	b14d      	cbz	r5, 8016844 <rmw_create_node+0x24>
 8016830:	782b      	ldrb	r3, [r5, #0]
 8016832:	b13b      	cbz	r3, 8016844 <rmw_create_node+0x24>
 8016834:	b902      	cbnz	r2, 8016838 <rmw_create_node+0x18>
 8016836:	69c2      	ldr	r2, [r0, #28]
 8016838:	4603      	mov	r3, r0
 801683a:	4629      	mov	r1, r5
 801683c:	4620      	mov	r0, r4
 801683e:	bc30      	pop	{r4, r5}
 8016840:	f7ff bf74 	b.w	801672c <create_node>
 8016844:	2000      	movs	r0, #0
 8016846:	bc30      	pop	{r4, r5}
 8016848:	4770      	bx	lr
 801684a:	2000      	movs	r0, #0
 801684c:	4770      	bx	lr
 801684e:	bf00      	nop

08016850 <rmw_destroy_node>:
 8016850:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016852:	b328      	cbz	r0, 80168a0 <rmw_destroy_node+0x50>
 8016854:	4607      	mov	r7, r0
 8016856:	6800      	ldr	r0, [r0, #0]
 8016858:	b120      	cbz	r0, 8016864 <rmw_destroy_node+0x14>
 801685a:	4b36      	ldr	r3, [pc, #216]	@ (8016934 <rmw_destroy_node+0xe4>)
 801685c:	6819      	ldr	r1, [r3, #0]
 801685e:	f7e9 fcb7 	bl	80001d0 <strcmp>
 8016862:	b9e8      	cbnz	r0, 80168a0 <rmw_destroy_node+0x50>
 8016864:	687d      	ldr	r5, [r7, #4]
 8016866:	b1dd      	cbz	r5, 80168a0 <rmw_destroy_node+0x50>
 8016868:	4b33      	ldr	r3, [pc, #204]	@ (8016938 <rmw_destroy_node+0xe8>)
 801686a:	681c      	ldr	r4, [r3, #0]
 801686c:	2c00      	cmp	r4, #0
 801686e:	d05f      	beq.n	8016930 <rmw_destroy_node+0xe0>
 8016870:	2600      	movs	r6, #0
 8016872:	e9d4 4102 	ldrd	r4, r1, [r4, #8]
 8016876:	f8d1 3080 	ldr.w	r3, [r1, #128]	@ 0x80
 801687a:	429d      	cmp	r5, r3
 801687c:	d013      	beq.n	80168a6 <rmw_destroy_node+0x56>
 801687e:	2c00      	cmp	r4, #0
 8016880:	d1f7      	bne.n	8016872 <rmw_destroy_node+0x22>
 8016882:	4b2e      	ldr	r3, [pc, #184]	@ (801693c <rmw_destroy_node+0xec>)
 8016884:	681c      	ldr	r4, [r3, #0]
 8016886:	b1c4      	cbz	r4, 80168ba <rmw_destroy_node+0x6a>
 8016888:	e9d4 4102 	ldrd	r4, r1, [r4, #8]
 801688c:	6a0b      	ldr	r3, [r1, #32]
 801688e:	429d      	cmp	r5, r3
 8016890:	d1f9      	bne.n	8016886 <rmw_destroy_node+0x36>
 8016892:	317c      	adds	r1, #124	@ 0x7c
 8016894:	4638      	mov	r0, r7
 8016896:	f000 fa93 	bl	8016dc0 <rmw_destroy_subscription>
 801689a:	2801      	cmp	r0, #1
 801689c:	4606      	mov	r6, r0
 801689e:	d1f2      	bne.n	8016886 <rmw_destroy_node+0x36>
 80168a0:	2601      	movs	r6, #1
 80168a2:	4630      	mov	r0, r6
 80168a4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80168a6:	3184      	adds	r1, #132	@ 0x84
 80168a8:	4638      	mov	r0, r7
 80168aa:	f7f7 ff33 	bl	800e714 <rmw_destroy_publisher>
 80168ae:	2801      	cmp	r0, #1
 80168b0:	4606      	mov	r6, r0
 80168b2:	d0f5      	beq.n	80168a0 <rmw_destroy_node+0x50>
 80168b4:	2c00      	cmp	r4, #0
 80168b6:	d1dc      	bne.n	8016872 <rmw_destroy_node+0x22>
 80168b8:	e7e3      	b.n	8016882 <rmw_destroy_node+0x32>
 80168ba:	4b21      	ldr	r3, [pc, #132]	@ (8016940 <rmw_destroy_node+0xf0>)
 80168bc:	681c      	ldr	r4, [r3, #0]
 80168be:	b16c      	cbz	r4, 80168dc <rmw_destroy_node+0x8c>
 80168c0:	e9d4 4102 	ldrd	r4, r1, [r4, #8]
 80168c4:	6f8b      	ldr	r3, [r1, #120]	@ 0x78
 80168c6:	429d      	cmp	r5, r3
 80168c8:	d1f9      	bne.n	80168be <rmw_destroy_node+0x6e>
 80168ca:	317c      	adds	r1, #124	@ 0x7c
 80168cc:	4638      	mov	r0, r7
 80168ce:	f000 f949 	bl	8016b64 <rmw_destroy_service>
 80168d2:	2801      	cmp	r0, #1
 80168d4:	4606      	mov	r6, r0
 80168d6:	d0e3      	beq.n	80168a0 <rmw_destroy_node+0x50>
 80168d8:	2c00      	cmp	r4, #0
 80168da:	d1f1      	bne.n	80168c0 <rmw_destroy_node+0x70>
 80168dc:	4b19      	ldr	r3, [pc, #100]	@ (8016944 <rmw_destroy_node+0xf4>)
 80168de:	681c      	ldr	r4, [r3, #0]
 80168e0:	b16c      	cbz	r4, 80168fe <rmw_destroy_node+0xae>
 80168e2:	e9d4 4102 	ldrd	r4, r1, [r4, #8]
 80168e6:	6f8b      	ldr	r3, [r1, #120]	@ 0x78
 80168e8:	429d      	cmp	r5, r3
 80168ea:	d1f9      	bne.n	80168e0 <rmw_destroy_node+0x90>
 80168ec:	317c      	adds	r1, #124	@ 0x7c
 80168ee:	4638      	mov	r0, r7
 80168f0:	f7ff fc1c 	bl	801612c <rmw_destroy_client>
 80168f4:	2801      	cmp	r0, #1
 80168f6:	4606      	mov	r6, r0
 80168f8:	d0d2      	beq.n	80168a0 <rmw_destroy_node+0x50>
 80168fa:	2c00      	cmp	r4, #0
 80168fc:	d1f1      	bne.n	80168e2 <rmw_destroy_node+0x92>
 80168fe:	e9d5 0204 	ldrd	r0, r2, [r5, #16]
 8016902:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 8016906:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 801690a:	6819      	ldr	r1, [r3, #0]
 801690c:	f7f9 fe2a 	bl	8010564 <uxr_buffer_delete_entity>
 8016910:	4602      	mov	r2, r0
 8016912:	6928      	ldr	r0, [r5, #16]
 8016914:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 8016918:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 801691c:	f7f8 f9e4 	bl	800ece8 <run_xrce_session>
 8016920:	2800      	cmp	r0, #0
 8016922:	bf08      	it	eq
 8016924:	2602      	moveq	r6, #2
 8016926:	4638      	mov	r0, r7
 8016928:	f7f8 f874 	bl	800ea14 <rmw_uxrce_fini_node_memory>
 801692c:	4630      	mov	r0, r6
 801692e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8016930:	4626      	mov	r6, r4
 8016932:	e7a6      	b.n	8016882 <rmw_destroy_node+0x32>
 8016934:	0801c360 	.word	0x0801c360
 8016938:	200078c8 	.word	0x200078c8
 801693c:	2000ab24 	.word	0x2000ab24
 8016940:	2000ab14 	.word	0x2000ab14
 8016944:	20008148 	.word	0x20008148

08016948 <rmw_node_get_graph_guard_condition>:
 8016948:	6843      	ldr	r3, [r0, #4]
 801694a:	6918      	ldr	r0, [r3, #16]
 801694c:	f500 705a 	add.w	r0, r0, #872	@ 0x368
 8016950:	4770      	bx	lr
 8016952:	bf00      	nop

08016954 <rmw_take_request>:
 8016954:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8016958:	4605      	mov	r5, r0
 801695a:	6800      	ldr	r0, [r0, #0]
 801695c:	b089      	sub	sp, #36	@ 0x24
 801695e:	460c      	mov	r4, r1
 8016960:	4690      	mov	r8, r2
 8016962:	461e      	mov	r6, r3
 8016964:	b128      	cbz	r0, 8016972 <rmw_take_request+0x1e>
 8016966:	4b28      	ldr	r3, [pc, #160]	@ (8016a08 <rmw_take_request+0xb4>)
 8016968:	6819      	ldr	r1, [r3, #0]
 801696a:	f7e9 fc31 	bl	80001d0 <strcmp>
 801696e:	2800      	cmp	r0, #0
 8016970:	d146      	bne.n	8016a00 <rmw_take_request+0xac>
 8016972:	b10e      	cbz	r6, 8016978 <rmw_take_request+0x24>
 8016974:	2300      	movs	r3, #0
 8016976:	7033      	strb	r3, [r6, #0]
 8016978:	f8d5 9004 	ldr.w	r9, [r5, #4]
 801697c:	f7f8 f93c 	bl	800ebf8 <rmw_uxrce_clean_expired_static_input_buffer>
 8016980:	4648      	mov	r0, r9
 8016982:	f7f8 f90f 	bl	800eba4 <rmw_uxrce_find_static_input_buffer_by_owner>
 8016986:	4607      	mov	r7, r0
 8016988:	b3b0      	cbz	r0, 80169f8 <rmw_take_request+0xa4>
 801698a:	68c5      	ldr	r5, [r0, #12]
 801698c:	f8d5 2838 	ldr.w	r2, [r5, #2104]	@ 0x838
 8016990:	f8d5 183c 	ldr.w	r1, [r5, #2108]	@ 0x83c
 8016994:	f895 3837 	ldrb.w	r3, [r5, #2103]	@ 0x837
 8016998:	7423      	strb	r3, [r4, #16]
 801699a:	e9c4 1208 	strd	r1, r2, [r4, #32]
 801699e:	f8b5 3834 	ldrh.w	r3, [r5, #2100]	@ 0x834
 80169a2:	f895 2836 	ldrb.w	r2, [r5, #2102]	@ 0x836
 80169a6:	74e2      	strb	r2, [r4, #19]
 80169a8:	f8a4 3011 	strh.w	r3, [r4, #17]
 80169ac:	f8d5 2828 	ldr.w	r2, [r5, #2088]	@ 0x828
 80169b0:	f8d5 382c 	ldr.w	r3, [r5, #2092]	@ 0x82c
 80169b4:	f8d5 1830 	ldr.w	r1, [r5, #2096]	@ 0x830
 80169b8:	61e1      	str	r1, [r4, #28]
 80169ba:	6162      	str	r2, [r4, #20]
 80169bc:	61a3      	str	r3, [r4, #24]
 80169be:	f8d9 3014 	ldr.w	r3, [r9, #20]
 80169c2:	689b      	ldr	r3, [r3, #8]
 80169c4:	4798      	blx	r3
 80169c6:	6844      	ldr	r4, [r0, #4]
 80169c8:	f8d5 2810 	ldr.w	r2, [r5, #2064]	@ 0x810
 80169cc:	f105 0110 	add.w	r1, r5, #16
 80169d0:	4668      	mov	r0, sp
 80169d2:	f7f9 fcd3 	bl	801037c <ucdr_init_buffer>
 80169d6:	68e3      	ldr	r3, [r4, #12]
 80169d8:	4641      	mov	r1, r8
 80169da:	4668      	mov	r0, sp
 80169dc:	4798      	blx	r3
 80169de:	4639      	mov	r1, r7
 80169e0:	4604      	mov	r4, r0
 80169e2:	480a      	ldr	r0, [pc, #40]	@ (8016a0c <rmw_take_request+0xb8>)
 80169e4:	f7ff fb8e 	bl	8016104 <put_memory>
 80169e8:	b106      	cbz	r6, 80169ec <rmw_take_request+0x98>
 80169ea:	7034      	strb	r4, [r6, #0]
 80169ec:	f084 0001 	eor.w	r0, r4, #1
 80169f0:	b2c0      	uxtb	r0, r0
 80169f2:	b009      	add	sp, #36	@ 0x24
 80169f4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80169f8:	2001      	movs	r0, #1
 80169fa:	b009      	add	sp, #36	@ 0x24
 80169fc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8016a00:	200c      	movs	r0, #12
 8016a02:	b009      	add	sp, #36	@ 0x24
 8016a04:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8016a08:	0801c360 	.word	0x0801c360
 8016a0c:	200078b8 	.word	0x200078b8

08016a10 <rmw_send_response>:
 8016a10:	b5f0      	push	{r4, r5, r6, r7, lr}
 8016a12:	4605      	mov	r5, r0
 8016a14:	6800      	ldr	r0, [r0, #0]
 8016a16:	b091      	sub	sp, #68	@ 0x44
 8016a18:	460c      	mov	r4, r1
 8016a1a:	4617      	mov	r7, r2
 8016a1c:	b128      	cbz	r0, 8016a2a <rmw_send_response+0x1a>
 8016a1e:	4b2a      	ldr	r3, [pc, #168]	@ (8016ac8 <rmw_send_response+0xb8>)
 8016a20:	6819      	ldr	r1, [r3, #0]
 8016a22:	f7e9 fbd5 	bl	80001d0 <strcmp>
 8016a26:	2800      	cmp	r0, #0
 8016a28:	d143      	bne.n	8016ab2 <rmw_send_response+0xa2>
 8016a2a:	4623      	mov	r3, r4
 8016a2c:	4626      	mov	r6, r4
 8016a2e:	f853 0f04 	ldr.w	r0, [r3, #4]!
 8016a32:	f836 ef01 	ldrh.w	lr, [r6, #1]!
 8016a36:	6859      	ldr	r1, [r3, #4]
 8016a38:	686d      	ldr	r5, [r5, #4]
 8016a3a:	689a      	ldr	r2, [r3, #8]
 8016a3c:	78b3      	ldrb	r3, [r6, #2]
 8016a3e:	f894 c000 	ldrb.w	ip, [r4]
 8016a42:	6966      	ldr	r6, [r4, #20]
 8016a44:	f88d 3016 	strb.w	r3, [sp, #22]
 8016a48:	ab02      	add	r3, sp, #8
 8016a4a:	f8ad e014 	strh.w	lr, [sp, #20]
 8016a4e:	f88d c017 	strb.w	ip, [sp, #23]
 8016a52:	9606      	str	r6, [sp, #24]
 8016a54:	c307      	stmia	r3!, {r0, r1, r2}
 8016a56:	696b      	ldr	r3, [r5, #20]
 8016a58:	6922      	ldr	r2, [r4, #16]
 8016a5a:	9207      	str	r2, [sp, #28]
 8016a5c:	68db      	ldr	r3, [r3, #12]
 8016a5e:	6fae      	ldr	r6, [r5, #120]	@ 0x78
 8016a60:	4798      	blx	r3
 8016a62:	4603      	mov	r3, r0
 8016a64:	4638      	mov	r0, r7
 8016a66:	685c      	ldr	r4, [r3, #4]
 8016a68:	6923      	ldr	r3, [r4, #16]
 8016a6a:	4798      	blx	r3
 8016a6c:	6933      	ldr	r3, [r6, #16]
 8016a6e:	3018      	adds	r0, #24
 8016a70:	9000      	str	r0, [sp, #0]
 8016a72:	692a      	ldr	r2, [r5, #16]
 8016a74:	6f29      	ldr	r1, [r5, #112]	@ 0x70
 8016a76:	f503 7028 	add.w	r0, r3, #672	@ 0x2a0
 8016a7a:	ab08      	add	r3, sp, #32
 8016a7c:	f7fb fa84 	bl	8011f88 <uxr_prepare_output_stream>
 8016a80:	b910      	cbnz	r0, 8016a88 <rmw_send_response+0x78>
 8016a82:	2001      	movs	r0, #1
 8016a84:	b011      	add	sp, #68	@ 0x44
 8016a86:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8016a88:	a902      	add	r1, sp, #8
 8016a8a:	a808      	add	r0, sp, #32
 8016a8c:	f7fc fb9a 	bl	80131c4 <uxr_serialize_SampleIdentity>
 8016a90:	68a3      	ldr	r3, [r4, #8]
 8016a92:	a908      	add	r1, sp, #32
 8016a94:	4638      	mov	r0, r7
 8016a96:	4798      	blx	r3
 8016a98:	f895 3072 	ldrb.w	r3, [r5, #114]	@ 0x72
 8016a9c:	6930      	ldr	r0, [r6, #16]
 8016a9e:	2b01      	cmp	r3, #1
 8016aa0:	d00a      	beq.n	8016ab8 <rmw_send_response+0xa8>
 8016aa2:	6f69      	ldr	r1, [r5, #116]	@ 0x74
 8016aa4:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8016aa8:	f7fa fc66 	bl	8011378 <uxr_run_session_until_confirm_delivery>
 8016aac:	2000      	movs	r0, #0
 8016aae:	b011      	add	sp, #68	@ 0x44
 8016ab0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8016ab2:	200c      	movs	r0, #12
 8016ab4:	b011      	add	sp, #68	@ 0x44
 8016ab6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8016ab8:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8016abc:	f7fa f8a0 	bl	8010c00 <uxr_flash_output_streams>
 8016ac0:	2000      	movs	r0, #0
 8016ac2:	b011      	add	sp, #68	@ 0x44
 8016ac4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8016ac6:	bf00      	nop
 8016ac8:	0801c360 	.word	0x0801c360

08016acc <rmw_take_response>:
 8016acc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8016ad0:	4604      	mov	r4, r0
 8016ad2:	6800      	ldr	r0, [r0, #0]
 8016ad4:	b089      	sub	sp, #36	@ 0x24
 8016ad6:	4688      	mov	r8, r1
 8016ad8:	4617      	mov	r7, r2
 8016ada:	461d      	mov	r5, r3
 8016adc:	b120      	cbz	r0, 8016ae8 <rmw_take_response+0x1c>
 8016ade:	4b1f      	ldr	r3, [pc, #124]	@ (8016b5c <rmw_take_response+0x90>)
 8016ae0:	6819      	ldr	r1, [r3, #0]
 8016ae2:	f7e9 fb75 	bl	80001d0 <strcmp>
 8016ae6:	bb88      	cbnz	r0, 8016b4c <rmw_take_response+0x80>
 8016ae8:	b10d      	cbz	r5, 8016aee <rmw_take_response+0x22>
 8016aea:	2300      	movs	r3, #0
 8016aec:	702b      	strb	r3, [r5, #0]
 8016aee:	f8d4 9004 	ldr.w	r9, [r4, #4]
 8016af2:	f7f8 f881 	bl	800ebf8 <rmw_uxrce_clean_expired_static_input_buffer>
 8016af6:	4648      	mov	r0, r9
 8016af8:	f7f8 f854 	bl	800eba4 <rmw_uxrce_find_static_input_buffer_by_owner>
 8016afc:	4606      	mov	r6, r0
 8016afe:	b348      	cbz	r0, 8016b54 <rmw_take_response+0x88>
 8016b00:	68c4      	ldr	r4, [r0, #12]
 8016b02:	f8d9 1014 	ldr.w	r1, [r9, #20]
 8016b06:	f604 0328 	addw	r3, r4, #2088	@ 0x828
 8016b0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016b0e:	68c9      	ldr	r1, [r1, #12]
 8016b10:	e9c8 2308 	strd	r2, r3, [r8, #32]
 8016b14:	4788      	blx	r1
 8016b16:	f8d0 8004 	ldr.w	r8, [r0, #4]
 8016b1a:	f8d4 2810 	ldr.w	r2, [r4, #2064]	@ 0x810
 8016b1e:	f104 0110 	add.w	r1, r4, #16
 8016b22:	4668      	mov	r0, sp
 8016b24:	f7f9 fc2a 	bl	801037c <ucdr_init_buffer>
 8016b28:	4639      	mov	r1, r7
 8016b2a:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8016b2e:	4668      	mov	r0, sp
 8016b30:	4798      	blx	r3
 8016b32:	4631      	mov	r1, r6
 8016b34:	4604      	mov	r4, r0
 8016b36:	480a      	ldr	r0, [pc, #40]	@ (8016b60 <rmw_take_response+0x94>)
 8016b38:	f7ff fae4 	bl	8016104 <put_memory>
 8016b3c:	b105      	cbz	r5, 8016b40 <rmw_take_response+0x74>
 8016b3e:	702c      	strb	r4, [r5, #0]
 8016b40:	f084 0001 	eor.w	r0, r4, #1
 8016b44:	b2c0      	uxtb	r0, r0
 8016b46:	b009      	add	sp, #36	@ 0x24
 8016b48:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8016b4c:	200c      	movs	r0, #12
 8016b4e:	b009      	add	sp, #36	@ 0x24
 8016b50:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8016b54:	2001      	movs	r0, #1
 8016b56:	b009      	add	sp, #36	@ 0x24
 8016b58:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8016b5c:	0801c360 	.word	0x0801c360
 8016b60:	200078b8 	.word	0x200078b8

08016b64 <rmw_destroy_service>:
 8016b64:	b570      	push	{r4, r5, r6, lr}
 8016b66:	b128      	cbz	r0, 8016b74 <rmw_destroy_service+0x10>
 8016b68:	4604      	mov	r4, r0
 8016b6a:	6800      	ldr	r0, [r0, #0]
 8016b6c:	460d      	mov	r5, r1
 8016b6e:	f7f8 f93b 	bl	800ede8 <is_uxrce_rmw_identifier_valid>
 8016b72:	b910      	cbnz	r0, 8016b7a <rmw_destroy_service+0x16>
 8016b74:	2401      	movs	r4, #1
 8016b76:	4620      	mov	r0, r4
 8016b78:	bd70      	pop	{r4, r5, r6, pc}
 8016b7a:	6863      	ldr	r3, [r4, #4]
 8016b7c:	2b00      	cmp	r3, #0
 8016b7e:	d0f9      	beq.n	8016b74 <rmw_destroy_service+0x10>
 8016b80:	2d00      	cmp	r5, #0
 8016b82:	d0f7      	beq.n	8016b74 <rmw_destroy_service+0x10>
 8016b84:	6828      	ldr	r0, [r5, #0]
 8016b86:	f7f8 f92f 	bl	800ede8 <is_uxrce_rmw_identifier_valid>
 8016b8a:	2800      	cmp	r0, #0
 8016b8c:	d0f2      	beq.n	8016b74 <rmw_destroy_service+0x10>
 8016b8e:	686e      	ldr	r6, [r5, #4]
 8016b90:	2e00      	cmp	r6, #0
 8016b92:	d0ef      	beq.n	8016b74 <rmw_destroy_service+0x10>
 8016b94:	6864      	ldr	r4, [r4, #4]
 8016b96:	6932      	ldr	r2, [r6, #16]
 8016b98:	6920      	ldr	r0, [r4, #16]
 8016b9a:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 8016b9e:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8016ba2:	6819      	ldr	r1, [r3, #0]
 8016ba4:	f001 fc30 	bl	8018408 <uxr_buffer_cancel_data>
 8016ba8:	4602      	mov	r2, r0
 8016baa:	6920      	ldr	r0, [r4, #16]
 8016bac:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 8016bb0:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 8016bb4:	f7f8 f898 	bl	800ece8 <run_xrce_session>
 8016bb8:	6920      	ldr	r0, [r4, #16]
 8016bba:	6932      	ldr	r2, [r6, #16]
 8016bbc:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 8016bc0:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8016bc4:	6819      	ldr	r1, [r3, #0]
 8016bc6:	f7f9 fccd 	bl	8010564 <uxr_buffer_delete_entity>
 8016bca:	4602      	mov	r2, r0
 8016bcc:	6920      	ldr	r0, [r4, #16]
 8016bce:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 8016bd2:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 8016bd6:	f7f8 f887 	bl	800ece8 <run_xrce_session>
 8016bda:	2800      	cmp	r0, #0
 8016bdc:	4628      	mov	r0, r5
 8016bde:	bf14      	ite	ne
 8016be0:	2400      	movne	r4, #0
 8016be2:	2402      	moveq	r4, #2
 8016be4:	f7f7 ff5a 	bl	800ea9c <rmw_uxrce_fini_service_memory>
 8016be8:	e7c5      	b.n	8016b76 <rmw_destroy_service+0x12>
 8016bea:	bf00      	nop

08016bec <rmw_create_subscription>:
 8016bec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016bf0:	b08d      	sub	sp, #52	@ 0x34
 8016bf2:	2800      	cmp	r0, #0
 8016bf4:	f000 80cb 	beq.w	8016d8e <rmw_create_subscription+0x1a2>
 8016bf8:	460e      	mov	r6, r1
 8016bfa:	2900      	cmp	r1, #0
 8016bfc:	f000 80c7 	beq.w	8016d8e <rmw_create_subscription+0x1a2>
 8016c00:	4604      	mov	r4, r0
 8016c02:	6800      	ldr	r0, [r0, #0]
 8016c04:	4615      	mov	r5, r2
 8016c06:	4698      	mov	r8, r3
 8016c08:	f7f8 f8ee 	bl	800ede8 <is_uxrce_rmw_identifier_valid>
 8016c0c:	2800      	cmp	r0, #0
 8016c0e:	f000 80be 	beq.w	8016d8e <rmw_create_subscription+0x1a2>
 8016c12:	2d00      	cmp	r5, #0
 8016c14:	f000 80bb 	beq.w	8016d8e <rmw_create_subscription+0x1a2>
 8016c18:	782b      	ldrb	r3, [r5, #0]
 8016c1a:	2b00      	cmp	r3, #0
 8016c1c:	f000 80b7 	beq.w	8016d8e <rmw_create_subscription+0x1a2>
 8016c20:	f1b8 0f00 	cmp.w	r8, #0
 8016c24:	f000 80b3 	beq.w	8016d8e <rmw_create_subscription+0x1a2>
 8016c28:	485b      	ldr	r0, [pc, #364]	@ (8016d98 <rmw_create_subscription+0x1ac>)
 8016c2a:	f8d4 9004 	ldr.w	r9, [r4, #4]
 8016c2e:	f7ff fa59 	bl	80160e4 <get_memory>
 8016c32:	4604      	mov	r4, r0
 8016c34:	2800      	cmp	r0, #0
 8016c36:	f000 80ab 	beq.w	8016d90 <rmw_create_subscription+0x1a4>
 8016c3a:	68c7      	ldr	r7, [r0, #12]
 8016c3c:	f8c7 7080 	str.w	r7, [r7, #128]	@ 0x80
 8016c40:	f7ff fab8 	bl	80161b4 <rmw_get_implementation_identifier>
 8016c44:	f107 0a94 	add.w	sl, r7, #148	@ 0x94
 8016c48:	67f8      	str	r0, [r7, #124]	@ 0x7c
 8016c4a:	f8c7 a084 	str.w	sl, [r7, #132]	@ 0x84
 8016c4e:	4628      	mov	r0, r5
 8016c50:	f7e9 fac8 	bl	80001e4 <strlen>
 8016c54:	3001      	adds	r0, #1
 8016c56:	283c      	cmp	r0, #60	@ 0x3c
 8016c58:	f107 047c 	add.w	r4, r7, #124	@ 0x7c
 8016c5c:	f200 8090 	bhi.w	8016d80 <rmw_create_subscription+0x194>
 8016c60:	4a4e      	ldr	r2, [pc, #312]	@ (8016d9c <rmw_create_subscription+0x1b0>)
 8016c62:	462b      	mov	r3, r5
 8016c64:	213c      	movs	r1, #60	@ 0x3c
 8016c66:	4650      	mov	r0, sl
 8016c68:	f002 feca 	bl	8019a00 <sniprintf>
 8016c6c:	4641      	mov	r1, r8
 8016c6e:	f8c7 9020 	str.w	r9, [r7, #32]
 8016c72:	2250      	movs	r2, #80	@ 0x50
 8016c74:	f107 0028 	add.w	r0, r7, #40	@ 0x28
 8016c78:	f003 f8ab 	bl	8019dd2 <memcpy>
 8016c7c:	4948      	ldr	r1, [pc, #288]	@ (8016da0 <rmw_create_subscription+0x1b4>)
 8016c7e:	4630      	mov	r0, r6
 8016c80:	f7f8 f8c0 	bl	800ee04 <get_message_typesupport_handle>
 8016c84:	2800      	cmp	r0, #0
 8016c86:	d07b      	beq.n	8016d80 <rmw_create_subscription+0x194>
 8016c88:	6842      	ldr	r2, [r0, #4]
 8016c8a:	61ba      	str	r2, [r7, #24]
 8016c8c:	2a00      	cmp	r2, #0
 8016c8e:	d077      	beq.n	8016d80 <rmw_create_subscription+0x194>
 8016c90:	4629      	mov	r1, r5
 8016c92:	4643      	mov	r3, r8
 8016c94:	4648      	mov	r0, r9
 8016c96:	f7ff fcd7 	bl	8016648 <create_topic>
 8016c9a:	61f8      	str	r0, [r7, #28]
 8016c9c:	2800      	cmp	r0, #0
 8016c9e:	d073      	beq.n	8016d88 <rmw_create_subscription+0x19c>
 8016ca0:	f8d9 2010 	ldr.w	r2, [r9, #16]
 8016ca4:	f241 539c 	movw	r3, #5532	@ 0x159c
 8016ca8:	2104      	movs	r1, #4
 8016caa:	5ad0      	ldrh	r0, [r2, r3]
 8016cac:	1c45      	adds	r5, r0, #1
 8016cae:	52d5      	strh	r5, [r2, r3]
 8016cb0:	f7f9 fe5a 	bl	8010968 <uxr_object_id>
 8016cb4:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8016cb8:	6138      	str	r0, [r7, #16]
 8016cba:	f8d3 2384 	ldr.w	r2, [r3, #900]	@ 0x384
 8016cbe:	2606      	movs	r6, #6
 8016cc0:	9600      	str	r6, [sp, #0]
 8016cc2:	6811      	ldr	r1, [r2, #0]
 8016cc4:	693a      	ldr	r2, [r7, #16]
 8016cc6:	f503 7028 	add.w	r0, r3, #672	@ 0x2a0
 8016cca:	f8d9 3014 	ldr.w	r3, [r9, #20]
 8016cce:	f7f9 fd29 	bl	8010724 <uxr_buffer_create_subscriber_bin>
 8016cd2:	4602      	mov	r2, r0
 8016cd4:	f8d9 0010 	ldr.w	r0, [r9, #16]
 8016cd8:	f8d0 338c 	ldr.w	r3, [r0, #908]	@ 0x38c
 8016cdc:	f8d0 1384 	ldr.w	r1, [r0, #900]	@ 0x384
 8016ce0:	f7f8 f802 	bl	800ece8 <run_xrce_session>
 8016ce4:	2800      	cmp	r0, #0
 8016ce6:	d04b      	beq.n	8016d80 <rmw_create_subscription+0x194>
 8016ce8:	f8d9 2010 	ldr.w	r2, [r9, #16]
 8016cec:	f241 539e 	movw	r3, #5534	@ 0x159e
 8016cf0:	4631      	mov	r1, r6
 8016cf2:	5ad0      	ldrh	r0, [r2, r3]
 8016cf4:	1c45      	adds	r5, r0, #1
 8016cf6:	52d5      	strh	r5, [r2, r3]
 8016cf8:	f7f9 fe36 	bl	8010968 <uxr_object_id>
 8016cfc:	ad08      	add	r5, sp, #32
 8016cfe:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8016d02:	69fb      	ldr	r3, [r7, #28]
 8016d04:	6178      	str	r0, [r7, #20]
 8016d06:	4641      	mov	r1, r8
 8016d08:	4628      	mov	r0, r5
 8016d0a:	f8da b384 	ldr.w	fp, [sl, #900]	@ 0x384
 8016d0e:	9305      	str	r3, [sp, #20]
 8016d10:	f7f8 f806 	bl	800ed20 <convert_qos_profile>
 8016d14:	e895 0003 	ldmia.w	r5, {r0, r1}
 8016d18:	9b05      	ldr	r3, [sp, #20]
 8016d1a:	9001      	str	r0, [sp, #4]
 8016d1c:	9603      	str	r6, [sp, #12]
 8016d1e:	f8ad 1008 	strh.w	r1, [sp, #8]
 8016d22:	691b      	ldr	r3, [r3, #16]
 8016d24:	9300      	str	r3, [sp, #0]
 8016d26:	e9d7 3204 	ldrd	r3, r2, [r7, #16]
 8016d2a:	f8db 1000 	ldr.w	r1, [fp]
 8016d2e:	f50a 7028 	add.w	r0, sl, #672	@ 0x2a0
 8016d32:	f7f9 fd9f 	bl	8010874 <uxr_buffer_create_datareader_bin>
 8016d36:	4602      	mov	r2, r0
 8016d38:	f8d9 0010 	ldr.w	r0, [r9, #16]
 8016d3c:	f8d0 338c 	ldr.w	r3, [r0, #908]	@ 0x38c
 8016d40:	f8d0 1384 	ldr.w	r1, [r0, #900]	@ 0x384
 8016d44:	f7f7 ffd0 	bl	800ece8 <run_xrce_session>
 8016d48:	b1d0      	cbz	r0, 8016d80 <rmw_create_subscription+0x194>
 8016d4a:	f898 3008 	ldrb.w	r3, [r8, #8]
 8016d4e:	f8d9 0010 	ldr.w	r0, [r9, #16]
 8016d52:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8016d56:	2200      	movs	r2, #0
 8016d58:	e9cd 120a 	strd	r1, r2, [sp, #40]	@ 0x28
 8016d5c:	2b02      	cmp	r3, #2
 8016d5e:	f8d0 1384 	ldr.w	r1, [r0, #900]	@ 0x384
 8016d62:	bf0c      	ite	eq
 8016d64:	f8d0 3380 	ldreq.w	r3, [r0, #896]	@ 0x380
 8016d68:	f8d0 3374 	ldrne.w	r3, [r0, #884]	@ 0x374
 8016d6c:	9307      	str	r3, [sp, #28]
 8016d6e:	aa0a      	add	r2, sp, #40	@ 0x28
 8016d70:	9200      	str	r2, [sp, #0]
 8016d72:	697a      	ldr	r2, [r7, #20]
 8016d74:	6809      	ldr	r1, [r1, #0]
 8016d76:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8016d7a:	f001 fb0b 	bl	8018394 <uxr_buffer_request_data>
 8016d7e:	e007      	b.n	8016d90 <rmw_create_subscription+0x1a4>
 8016d80:	69f8      	ldr	r0, [r7, #28]
 8016d82:	b108      	cbz	r0, 8016d88 <rmw_create_subscription+0x19c>
 8016d84:	f7f7 feb6 	bl	800eaf4 <rmw_uxrce_fini_topic_memory>
 8016d88:	4620      	mov	r0, r4
 8016d8a:	f7f7 fe71 	bl	800ea70 <rmw_uxrce_fini_subscription_memory>
 8016d8e:	2400      	movs	r4, #0
 8016d90:	4620      	mov	r0, r4
 8016d92:	b00d      	add	sp, #52	@ 0x34
 8016d94:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016d98:	2000ab24 	.word	0x2000ab24
 8016d9c:	0801bddc 	.word	0x0801bddc
 8016da0:	0801bda8 	.word	0x0801bda8

08016da4 <rmw_subscription_get_actual_qos>:
 8016da4:	b150      	cbz	r0, 8016dbc <rmw_subscription_get_actual_qos+0x18>
 8016da6:	b149      	cbz	r1, 8016dbc <rmw_subscription_get_actual_qos+0x18>
 8016da8:	b508      	push	{r3, lr}
 8016daa:	6843      	ldr	r3, [r0, #4]
 8016dac:	2250      	movs	r2, #80	@ 0x50
 8016dae:	4608      	mov	r0, r1
 8016db0:	f103 0128 	add.w	r1, r3, #40	@ 0x28
 8016db4:	f003 f80d 	bl	8019dd2 <memcpy>
 8016db8:	2000      	movs	r0, #0
 8016dba:	bd08      	pop	{r3, pc}
 8016dbc:	200b      	movs	r0, #11
 8016dbe:	4770      	bx	lr

08016dc0 <rmw_destroy_subscription>:
 8016dc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016dc2:	b128      	cbz	r0, 8016dd0 <rmw_destroy_subscription+0x10>
 8016dc4:	4604      	mov	r4, r0
 8016dc6:	6800      	ldr	r0, [r0, #0]
 8016dc8:	460d      	mov	r5, r1
 8016dca:	f7f8 f80d 	bl	800ede8 <is_uxrce_rmw_identifier_valid>
 8016dce:	b910      	cbnz	r0, 8016dd6 <rmw_destroy_subscription+0x16>
 8016dd0:	2401      	movs	r4, #1
 8016dd2:	4620      	mov	r0, r4
 8016dd4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8016dd6:	6863      	ldr	r3, [r4, #4]
 8016dd8:	2b00      	cmp	r3, #0
 8016dda:	d0f9      	beq.n	8016dd0 <rmw_destroy_subscription+0x10>
 8016ddc:	2d00      	cmp	r5, #0
 8016dde:	d0f7      	beq.n	8016dd0 <rmw_destroy_subscription+0x10>
 8016de0:	6828      	ldr	r0, [r5, #0]
 8016de2:	f7f8 f801 	bl	800ede8 <is_uxrce_rmw_identifier_valid>
 8016de6:	2800      	cmp	r0, #0
 8016de8:	d0f2      	beq.n	8016dd0 <rmw_destroy_subscription+0x10>
 8016dea:	686c      	ldr	r4, [r5, #4]
 8016dec:	2c00      	cmp	r4, #0
 8016dee:	d0ef      	beq.n	8016dd0 <rmw_destroy_subscription+0x10>
 8016df0:	6a26      	ldr	r6, [r4, #32]
 8016df2:	6962      	ldr	r2, [r4, #20]
 8016df4:	6930      	ldr	r0, [r6, #16]
 8016df6:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 8016dfa:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8016dfe:	6819      	ldr	r1, [r3, #0]
 8016e00:	f001 fb02 	bl	8018408 <uxr_buffer_cancel_data>
 8016e04:	4602      	mov	r2, r0
 8016e06:	6930      	ldr	r0, [r6, #16]
 8016e08:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 8016e0c:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 8016e10:	f7f7 ff6a 	bl	800ece8 <run_xrce_session>
 8016e14:	69e0      	ldr	r0, [r4, #28]
 8016e16:	f7ff fc67 	bl	80166e8 <destroy_topic>
 8016e1a:	6a23      	ldr	r3, [r4, #32]
 8016e1c:	6962      	ldr	r2, [r4, #20]
 8016e1e:	6918      	ldr	r0, [r3, #16]
 8016e20:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 8016e24:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8016e28:	6819      	ldr	r1, [r3, #0]
 8016e2a:	f7f9 fb9b 	bl	8010564 <uxr_buffer_delete_entity>
 8016e2e:	6a21      	ldr	r1, [r4, #32]
 8016e30:	6922      	ldr	r2, [r4, #16]
 8016e32:	4603      	mov	r3, r0
 8016e34:	6908      	ldr	r0, [r1, #16]
 8016e36:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 8016e3a:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8016e3e:	6809      	ldr	r1, [r1, #0]
 8016e40:	461c      	mov	r4, r3
 8016e42:	f7f9 fb8f 	bl	8010564 <uxr_buffer_delete_entity>
 8016e46:	4607      	mov	r7, r0
 8016e48:	6930      	ldr	r0, [r6, #16]
 8016e4a:	4622      	mov	r2, r4
 8016e4c:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 8016e50:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 8016e54:	f7f7 ff48 	bl	800ece8 <run_xrce_session>
 8016e58:	4604      	mov	r4, r0
 8016e5a:	6930      	ldr	r0, [r6, #16]
 8016e5c:	463a      	mov	r2, r7
 8016e5e:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 8016e62:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 8016e66:	f7f7 ff3f 	bl	800ece8 <run_xrce_session>
 8016e6a:	b12c      	cbz	r4, 8016e78 <rmw_destroy_subscription+0xb8>
 8016e6c:	b120      	cbz	r0, 8016e78 <rmw_destroy_subscription+0xb8>
 8016e6e:	2400      	movs	r4, #0
 8016e70:	4628      	mov	r0, r5
 8016e72:	f7f7 fdfd 	bl	800ea70 <rmw_uxrce_fini_subscription_memory>
 8016e76:	e7ac      	b.n	8016dd2 <rmw_destroy_subscription+0x12>
 8016e78:	2402      	movs	r4, #2
 8016e7a:	e7f9      	b.n	8016e70 <rmw_destroy_subscription+0xb0>

08016e7c <rmw_take_with_info>:
 8016e7c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8016e7e:	4604      	mov	r4, r0
 8016e80:	6800      	ldr	r0, [r0, #0]
 8016e82:	b089      	sub	sp, #36	@ 0x24
 8016e84:	460f      	mov	r7, r1
 8016e86:	4615      	mov	r5, r2
 8016e88:	b128      	cbz	r0, 8016e96 <rmw_take_with_info+0x1a>
 8016e8a:	4b24      	ldr	r3, [pc, #144]	@ (8016f1c <rmw_take_with_info+0xa0>)
 8016e8c:	6819      	ldr	r1, [r3, #0]
 8016e8e:	f7e9 f99f 	bl	80001d0 <strcmp>
 8016e92:	2800      	cmp	r0, #0
 8016e94:	d13e      	bne.n	8016f14 <rmw_take_with_info+0x98>
 8016e96:	b305      	cbz	r5, 8016eda <rmw_take_with_info+0x5e>
 8016e98:	6864      	ldr	r4, [r4, #4]
 8016e9a:	2300      	movs	r3, #0
 8016e9c:	702b      	strb	r3, [r5, #0]
 8016e9e:	f7f7 feab 	bl	800ebf8 <rmw_uxrce_clean_expired_static_input_buffer>
 8016ea2:	4620      	mov	r0, r4
 8016ea4:	f7f7 fe7e 	bl	800eba4 <rmw_uxrce_find_static_input_buffer_by_owner>
 8016ea8:	4606      	mov	r6, r0
 8016eaa:	b1f0      	cbz	r0, 8016eea <rmw_take_with_info+0x6e>
 8016eac:	68c1      	ldr	r1, [r0, #12]
 8016eae:	4668      	mov	r0, sp
 8016eb0:	f8d1 2810 	ldr.w	r2, [r1, #2064]	@ 0x810
 8016eb4:	3110      	adds	r1, #16
 8016eb6:	f7f9 fa61 	bl	801037c <ucdr_init_buffer>
 8016eba:	69a3      	ldr	r3, [r4, #24]
 8016ebc:	4639      	mov	r1, r7
 8016ebe:	68db      	ldr	r3, [r3, #12]
 8016ec0:	4668      	mov	r0, sp
 8016ec2:	4798      	blx	r3
 8016ec4:	4631      	mov	r1, r6
 8016ec6:	4604      	mov	r4, r0
 8016ec8:	4815      	ldr	r0, [pc, #84]	@ (8016f20 <rmw_take_with_info+0xa4>)
 8016eca:	f7ff f91b 	bl	8016104 <put_memory>
 8016ece:	702c      	strb	r4, [r5, #0]
 8016ed0:	f084 0001 	eor.w	r0, r4, #1
 8016ed4:	b2c0      	uxtb	r0, r0
 8016ed6:	b009      	add	sp, #36	@ 0x24
 8016ed8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8016eda:	6864      	ldr	r4, [r4, #4]
 8016edc:	f7f7 fe8c 	bl	800ebf8 <rmw_uxrce_clean_expired_static_input_buffer>
 8016ee0:	4620      	mov	r0, r4
 8016ee2:	f7f7 fe5f 	bl	800eba4 <rmw_uxrce_find_static_input_buffer_by_owner>
 8016ee6:	4605      	mov	r5, r0
 8016ee8:	b910      	cbnz	r0, 8016ef0 <rmw_take_with_info+0x74>
 8016eea:	2001      	movs	r0, #1
 8016eec:	b009      	add	sp, #36	@ 0x24
 8016eee:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8016ef0:	68e9      	ldr	r1, [r5, #12]
 8016ef2:	4668      	mov	r0, sp
 8016ef4:	f8d1 2810 	ldr.w	r2, [r1, #2064]	@ 0x810
 8016ef8:	3110      	adds	r1, #16
 8016efa:	f7f9 fa3f 	bl	801037c <ucdr_init_buffer>
 8016efe:	69a3      	ldr	r3, [r4, #24]
 8016f00:	4639      	mov	r1, r7
 8016f02:	68db      	ldr	r3, [r3, #12]
 8016f04:	4668      	mov	r0, sp
 8016f06:	4798      	blx	r3
 8016f08:	4629      	mov	r1, r5
 8016f0a:	4604      	mov	r4, r0
 8016f0c:	4804      	ldr	r0, [pc, #16]	@ (8016f20 <rmw_take_with_info+0xa4>)
 8016f0e:	f7ff f8f9 	bl	8016104 <put_memory>
 8016f12:	e7dd      	b.n	8016ed0 <rmw_take_with_info+0x54>
 8016f14:	200c      	movs	r0, #12
 8016f16:	b009      	add	sp, #36	@ 0x24
 8016f18:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8016f1a:	bf00      	nop
 8016f1c:	0801c360 	.word	0x0801c360
 8016f20:	200078b8 	.word	0x200078b8

08016f24 <rmw_uxrce_transport_init>:
 8016f24:	b508      	push	{r3, lr}
 8016f26:	b108      	cbz	r0, 8016f2c <rmw_uxrce_transport_init+0x8>
 8016f28:	f100 0210 	add.w	r2, r0, #16
 8016f2c:	b139      	cbz	r1, 8016f3e <rmw_uxrce_transport_init+0x1a>
 8016f2e:	6949      	ldr	r1, [r1, #20]
 8016f30:	4610      	mov	r0, r2
 8016f32:	f000 fcc5 	bl	80178c0 <uxr_init_custom_transport>
 8016f36:	f080 0001 	eor.w	r0, r0, #1
 8016f3a:	b2c0      	uxtb	r0, r0
 8016f3c:	bd08      	pop	{r3, pc}
 8016f3e:	4b04      	ldr	r3, [pc, #16]	@ (8016f50 <rmw_uxrce_transport_init+0x2c>)
 8016f40:	4610      	mov	r0, r2
 8016f42:	6859      	ldr	r1, [r3, #4]
 8016f44:	f000 fcbc 	bl	80178c0 <uxr_init_custom_transport>
 8016f48:	f080 0001 	eor.w	r0, r0, #1
 8016f4c:	b2c0      	uxtb	r0, r0
 8016f4e:	bd08      	pop	{r3, pc}
 8016f50:	20007898 	.word	0x20007898

08016f54 <rmw_wait>:
 8016f54:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016f58:	460f      	mov	r7, r1
 8016f5a:	4606      	mov	r6, r0
 8016f5c:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8016f5e:	469a      	mov	sl, r3
 8016f60:	4615      	mov	r5, r2
 8016f62:	2a00      	cmp	r2, #0
 8016f64:	f000 8122 	beq.w	80171ac <rmw_wait+0x258>
 8016f68:	2900      	cmp	r1, #0
 8016f6a:	f000 812a 	beq.w	80171c2 <rmw_wait+0x26e>
 8016f6e:	e9d1 2300 	ldrd	r2, r3, [r1]
 8016f72:	ea4f 1b42 	mov.w	fp, r2, lsl #5
 8016f76:	015c      	lsls	r4, r3, #5
 8016f78:	ebbb 0b02 	subs.w	fp, fp, r2
 8016f7c:	ea44 64d2 	orr.w	r4, r4, r2, lsr #27
 8016f80:	eb64 0403 	sbc.w	r4, r4, r3
 8016f84:	ea4f 008b 	mov.w	r0, fp, lsl #2
 8016f88:	00a4      	lsls	r4, r4, #2
 8016f8a:	ea44 749b 	orr.w	r4, r4, fp, lsr #30
 8016f8e:	eb10 0b02 	adds.w	fp, r0, r2
 8016f92:	eb43 0404 	adc.w	r4, r3, r4
 8016f96:	4aad      	ldr	r2, [pc, #692]	@ (801724c <rmw_wait+0x2f8>)
 8016f98:	2300      	movs	r3, #0
 8016f9a:	e9d1 0102 	ldrd	r0, r1, [r1, #8]
 8016f9e:	f7e9 feab 	bl	8000cf8 <__aeabi_uldivmod>
 8016fa2:	00e4      	lsls	r4, r4, #3
 8016fa4:	ea44 745b 	orr.w	r4, r4, fp, lsr #29
 8016fa8:	ea4f 0bcb 	mov.w	fp, fp, lsl #3
 8016fac:	eb1b 0800 	adds.w	r8, fp, r0
 8016fb0:	f06f 4200 	mvn.w	r2, #2147483648	@ 0x80000000
 8016fb4:	eb44 0901 	adc.w	r9, r4, r1
 8016fb8:	2300      	movs	r3, #0
 8016fba:	4542      	cmp	r2, r8
 8016fbc:	eb73 0109 	sbcs.w	r1, r3, r9
 8016fc0:	f2c0 80f2 	blt.w	80171a8 <rmw_wait+0x254>
 8016fc4:	f7f7 fe18 	bl	800ebf8 <rmw_uxrce_clean_expired_static_input_buffer>
 8016fc8:	4ba1      	ldr	r3, [pc, #644]	@ (8017250 <rmw_wait+0x2fc>)
 8016fca:	681c      	ldr	r4, [r3, #0]
 8016fcc:	b144      	cbz	r4, 8016fe0 <rmw_wait+0x8c>
 8016fce:	4623      	mov	r3, r4
 8016fd0:	f241 50a4 	movw	r0, #5540	@ 0x15a4
 8016fd4:	2100      	movs	r1, #0
 8016fd6:	e9d3 3202 	ldrd	r3, r2, [r3, #8]
 8016fda:	5411      	strb	r1, [r2, r0]
 8016fdc:	2b00      	cmp	r3, #0
 8016fde:	d1fa      	bne.n	8016fd6 <rmw_wait+0x82>
 8016fe0:	b185      	cbz	r5, 8017004 <rmw_wait+0xb0>
 8016fe2:	6829      	ldr	r1, [r5, #0]
 8016fe4:	b171      	cbz	r1, 8017004 <rmw_wait+0xb0>
 8016fe6:	f8d5 e004 	ldr.w	lr, [r5, #4]
 8016fea:	2300      	movs	r3, #0
 8016fec:	f241 5ca4 	movw	ip, #5540	@ 0x15a4
 8016ff0:	2001      	movs	r0, #1
 8016ff2:	f85e 2023 	ldr.w	r2, [lr, r3, lsl #2]
 8016ff6:	6f92      	ldr	r2, [r2, #120]	@ 0x78
 8016ff8:	3301      	adds	r3, #1
 8016ffa:	6912      	ldr	r2, [r2, #16]
 8016ffc:	4299      	cmp	r1, r3
 8016ffe:	f802 000c 	strb.w	r0, [r2, ip]
 8017002:	d1f6      	bne.n	8016ff2 <rmw_wait+0x9e>
 8017004:	f1ba 0f00 	cmp.w	sl, #0
 8017008:	d011      	beq.n	801702e <rmw_wait+0xda>
 801700a:	f8da 1000 	ldr.w	r1, [sl]
 801700e:	b171      	cbz	r1, 801702e <rmw_wait+0xda>
 8017010:	f8da e004 	ldr.w	lr, [sl, #4]
 8017014:	2300      	movs	r3, #0
 8017016:	f241 5ca4 	movw	ip, #5540	@ 0x15a4
 801701a:	2001      	movs	r0, #1
 801701c:	f85e 2023 	ldr.w	r2, [lr, r3, lsl #2]
 8017020:	6f92      	ldr	r2, [r2, #120]	@ 0x78
 8017022:	3301      	adds	r3, #1
 8017024:	6912      	ldr	r2, [r2, #16]
 8017026:	4299      	cmp	r1, r3
 8017028:	f802 000c 	strb.w	r0, [r2, ip]
 801702c:	d1f6      	bne.n	801701c <rmw_wait+0xc8>
 801702e:	b186      	cbz	r6, 8017052 <rmw_wait+0xfe>
 8017030:	6831      	ldr	r1, [r6, #0]
 8017032:	b171      	cbz	r1, 8017052 <rmw_wait+0xfe>
 8017034:	f8d6 e004 	ldr.w	lr, [r6, #4]
 8017038:	2300      	movs	r3, #0
 801703a:	f241 5ca4 	movw	ip, #5540	@ 0x15a4
 801703e:	2001      	movs	r0, #1
 8017040:	f85e 2023 	ldr.w	r2, [lr, r3, lsl #2]
 8017044:	6a12      	ldr	r2, [r2, #32]
 8017046:	3301      	adds	r3, #1
 8017048:	6912      	ldr	r2, [r2, #16]
 801704a:	4299      	cmp	r1, r3
 801704c:	f802 000c 	strb.w	r0, [r2, ip]
 8017050:	d1f6      	bne.n	8017040 <rmw_wait+0xec>
 8017052:	b34c      	cbz	r4, 80170a8 <rmw_wait+0x154>
 8017054:	4622      	mov	r2, r4
 8017056:	2300      	movs	r3, #0
 8017058:	f241 50a4 	movw	r0, #5540	@ 0x15a4
 801705c:	e9d2 2102 	ldrd	r2, r1, [r2, #8]
 8017060:	5c09      	ldrb	r1, [r1, r0]
 8017062:	440b      	add	r3, r1
 8017064:	b2db      	uxtb	r3, r3
 8017066:	2a00      	cmp	r2, #0
 8017068:	d1f8      	bne.n	801705c <rmw_wait+0x108>
 801706a:	2b00      	cmp	r3, #0
 801706c:	f000 8082 	beq.w	8017174 <rmw_wait+0x220>
 8017070:	f1b8 3fff 	cmp.w	r8, #4294967295	@ 0xffffffff
 8017074:	d00d      	beq.n	8017092 <rmw_wait+0x13e>
 8017076:	ee07 8a90 	vmov	s15, r8
 801707a:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 801707e:	ee07 3a90 	vmov	s15, r3
 8017082:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8017086:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801708a:	eefd 7ac7 	vcvt.s32.f32	s15, s14
 801708e:	ee17 8a90 	vmov	r8, s15
 8017092:	f241 59a4 	movw	r9, #5540	@ 0x15a4
 8017096:	68e0      	ldr	r0, [r4, #12]
 8017098:	f810 3009 	ldrb.w	r3, [r0, r9]
 801709c:	2b00      	cmp	r3, #0
 801709e:	f040 8093 	bne.w	80171c8 <rmw_wait+0x274>
 80170a2:	68a4      	ldr	r4, [r4, #8]
 80170a4:	2c00      	cmp	r4, #0
 80170a6:	d1f6      	bne.n	8017096 <rmw_wait+0x142>
 80170a8:	2d00      	cmp	r5, #0
 80170aa:	f000 80ac 	beq.w	8017206 <rmw_wait+0x2b2>
 80170ae:	682b      	ldr	r3, [r5, #0]
 80170b0:	2b00      	cmp	r3, #0
 80170b2:	f000 8093 	beq.w	80171dc <rmw_wait+0x288>
 80170b6:	2400      	movs	r4, #0
 80170b8:	46a0      	mov	r8, r4
 80170ba:	686b      	ldr	r3, [r5, #4]
 80170bc:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 80170c0:	f7f7 fd70 	bl	800eba4 <rmw_uxrce_find_static_input_buffer_by_owner>
 80170c4:	2800      	cmp	r0, #0
 80170c6:	d05f      	beq.n	8017188 <rmw_wait+0x234>
 80170c8:	682b      	ldr	r3, [r5, #0]
 80170ca:	3401      	adds	r4, #1
 80170cc:	42a3      	cmp	r3, r4
 80170ce:	f04f 0801 	mov.w	r8, #1
 80170d2:	d8f2      	bhi.n	80170ba <rmw_wait+0x166>
 80170d4:	f1ba 0f00 	cmp.w	sl, #0
 80170d8:	d012      	beq.n	8017100 <rmw_wait+0x1ac>
 80170da:	f8da 3000 	ldr.w	r3, [sl]
 80170de:	b17b      	cbz	r3, 8017100 <rmw_wait+0x1ac>
 80170e0:	2400      	movs	r4, #0
 80170e2:	f8da 3004 	ldr.w	r3, [sl, #4]
 80170e6:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 80170ea:	f7f7 fd5b 	bl	800eba4 <rmw_uxrce_find_static_input_buffer_by_owner>
 80170ee:	2800      	cmp	r0, #0
 80170f0:	d052      	beq.n	8017198 <rmw_wait+0x244>
 80170f2:	f8da 3000 	ldr.w	r3, [sl]
 80170f6:	3401      	adds	r4, #1
 80170f8:	42a3      	cmp	r3, r4
 80170fa:	f04f 0801 	mov.w	r8, #1
 80170fe:	d8f0      	bhi.n	80170e2 <rmw_wait+0x18e>
 8017100:	b1e6      	cbz	r6, 801713c <rmw_wait+0x1e8>
 8017102:	6833      	ldr	r3, [r6, #0]
 8017104:	b1d3      	cbz	r3, 801713c <rmw_wait+0x1e8>
 8017106:	2400      	movs	r4, #0
 8017108:	6873      	ldr	r3, [r6, #4]
 801710a:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 801710e:	f7f7 fd49 	bl	800eba4 <rmw_uxrce_find_static_input_buffer_by_owner>
 8017112:	b160      	cbz	r0, 801712e <rmw_wait+0x1da>
 8017114:	6833      	ldr	r3, [r6, #0]
 8017116:	3401      	adds	r4, #1
 8017118:	42a3      	cmp	r3, r4
 801711a:	d96c      	bls.n	80171f6 <rmw_wait+0x2a2>
 801711c:	6873      	ldr	r3, [r6, #4]
 801711e:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8017122:	f04f 0801 	mov.w	r8, #1
 8017126:	f7f7 fd3d 	bl	800eba4 <rmw_uxrce_find_static_input_buffer_by_owner>
 801712a:	2800      	cmp	r0, #0
 801712c:	d1f2      	bne.n	8017114 <rmw_wait+0x1c0>
 801712e:	e9d6 3200 	ldrd	r3, r2, [r6]
 8017132:	f842 0024 	str.w	r0, [r2, r4, lsl #2]
 8017136:	3401      	adds	r4, #1
 8017138:	42a3      	cmp	r3, r4
 801713a:	d8e5      	bhi.n	8017108 <rmw_wait+0x1b4>
 801713c:	b1a7      	cbz	r7, 8017168 <rmw_wait+0x214>
 801713e:	683c      	ldr	r4, [r7, #0]
 8017140:	b194      	cbz	r4, 8017168 <rmw_wait+0x214>
 8017142:	2300      	movs	r3, #0
 8017144:	461d      	mov	r5, r3
 8017146:	e004      	b.n	8017152 <rmw_wait+0x1fe>
 8017148:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
 801714c:	3301      	adds	r3, #1
 801714e:	42a3      	cmp	r3, r4
 8017150:	d00a      	beq.n	8017168 <rmw_wait+0x214>
 8017152:	6878      	ldr	r0, [r7, #4]
 8017154:	f850 1023 	ldr.w	r1, [r0, r3, lsl #2]
 8017158:	7c0a      	ldrb	r2, [r1, #16]
 801715a:	2a00      	cmp	r2, #0
 801715c:	d0f4      	beq.n	8017148 <rmw_wait+0x1f4>
 801715e:	3301      	adds	r3, #1
 8017160:	42a3      	cmp	r3, r4
 8017162:	740d      	strb	r5, [r1, #16]
 8017164:	4690      	mov	r8, r2
 8017166:	d1f4      	bne.n	8017152 <rmw_wait+0x1fe>
 8017168:	f1b8 0f00 	cmp.w	r8, #0
 801716c:	d040      	beq.n	80171f0 <rmw_wait+0x29c>
 801716e:	2000      	movs	r0, #0
 8017170:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017174:	68e0      	ldr	r0, [r4, #12]
 8017176:	2100      	movs	r1, #0
 8017178:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 801717c:	f7fa f8c2 	bl	8011304 <uxr_run_session_timeout>
 8017180:	68a4      	ldr	r4, [r4, #8]
 8017182:	2c00      	cmp	r4, #0
 8017184:	d1f6      	bne.n	8017174 <rmw_wait+0x220>
 8017186:	e78f      	b.n	80170a8 <rmw_wait+0x154>
 8017188:	e9d5 3200 	ldrd	r3, r2, [r5]
 801718c:	f842 0024 	str.w	r0, [r2, r4, lsl #2]
 8017190:	3401      	adds	r4, #1
 8017192:	42a3      	cmp	r3, r4
 8017194:	d891      	bhi.n	80170ba <rmw_wait+0x166>
 8017196:	e79d      	b.n	80170d4 <rmw_wait+0x180>
 8017198:	e9da 3200 	ldrd	r3, r2, [sl]
 801719c:	f842 0024 	str.w	r0, [r2, r4, lsl #2]
 80171a0:	3401      	adds	r4, #1
 80171a2:	429c      	cmp	r4, r3
 80171a4:	d39d      	bcc.n	80170e2 <rmw_wait+0x18e>
 80171a6:	e7ab      	b.n	8017100 <rmw_wait+0x1ac>
 80171a8:	4690      	mov	r8, r2
 80171aa:	e70b      	b.n	8016fc4 <rmw_wait+0x70>
 80171ac:	2b00      	cmp	r3, #0
 80171ae:	f47f aedb 	bne.w	8016f68 <rmw_wait+0x14>
 80171b2:	2800      	cmp	r0, #0
 80171b4:	f47f aed8 	bne.w	8016f68 <rmw_wait+0x14>
 80171b8:	2f00      	cmp	r7, #0
 80171ba:	d0d8      	beq.n	801716e <rmw_wait+0x21a>
 80171bc:	2900      	cmp	r1, #0
 80171be:	f47f aed6 	bne.w	8016f6e <rmw_wait+0x1a>
 80171c2:	f04f 38ff 	mov.w	r8, #4294967295	@ 0xffffffff
 80171c6:	e6fd      	b.n	8016fc4 <rmw_wait+0x70>
 80171c8:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 80171cc:	4641      	mov	r1, r8
 80171ce:	f7fa f8b3 	bl	8011338 <uxr_run_session_until_data>
 80171d2:	68a4      	ldr	r4, [r4, #8]
 80171d4:	2c00      	cmp	r4, #0
 80171d6:	f47f af5e 	bne.w	8017096 <rmw_wait+0x142>
 80171da:	e765      	b.n	80170a8 <rmw_wait+0x154>
 80171dc:	f1ba 0f00 	cmp.w	sl, #0
 80171e0:	d11e      	bne.n	8017220 <rmw_wait+0x2cc>
 80171e2:	b35e      	cbz	r6, 801723c <rmw_wait+0x2e8>
 80171e4:	6833      	ldr	r3, [r6, #0]
 80171e6:	46d0      	mov	r8, sl
 80171e8:	2b00      	cmp	r3, #0
 80171ea:	d18c      	bne.n	8017106 <rmw_wait+0x1b2>
 80171ec:	2f00      	cmp	r7, #0
 80171ee:	d1a6      	bne.n	801713e <rmw_wait+0x1ea>
 80171f0:	2002      	movs	r0, #2
 80171f2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80171f6:	2f00      	cmp	r7, #0
 80171f8:	d0b9      	beq.n	801716e <rmw_wait+0x21a>
 80171fa:	683c      	ldr	r4, [r7, #0]
 80171fc:	f04f 0801 	mov.w	r8, #1
 8017200:	2c00      	cmp	r4, #0
 8017202:	d19e      	bne.n	8017142 <rmw_wait+0x1ee>
 8017204:	e7b3      	b.n	801716e <rmw_wait+0x21a>
 8017206:	f1ba 0f00 	cmp.w	sl, #0
 801720a:	d0ea      	beq.n	80171e2 <rmw_wait+0x28e>
 801720c:	f8da 3000 	ldr.w	r3, [sl]
 8017210:	46a8      	mov	r8, r5
 8017212:	2b00      	cmp	r3, #0
 8017214:	f47f af64 	bne.w	80170e0 <rmw_wait+0x18c>
 8017218:	2e00      	cmp	r6, #0
 801721a:	f47f af72 	bne.w	8017102 <rmw_wait+0x1ae>
 801721e:	e009      	b.n	8017234 <rmw_wait+0x2e0>
 8017220:	f8da 2000 	ldr.w	r2, [sl]
 8017224:	4698      	mov	r8, r3
 8017226:	2a00      	cmp	r2, #0
 8017228:	f47f af5a 	bne.w	80170e0 <rmw_wait+0x18c>
 801722c:	4690      	mov	r8, r2
 801722e:	2e00      	cmp	r6, #0
 8017230:	f47f af67 	bne.w	8017102 <rmw_wait+0x1ae>
 8017234:	46b0      	mov	r8, r6
 8017236:	2f00      	cmp	r7, #0
 8017238:	d181      	bne.n	801713e <rmw_wait+0x1ea>
 801723a:	e7d9      	b.n	80171f0 <rmw_wait+0x29c>
 801723c:	2f00      	cmp	r7, #0
 801723e:	d0d7      	beq.n	80171f0 <rmw_wait+0x29c>
 8017240:	683c      	ldr	r4, [r7, #0]
 8017242:	46b0      	mov	r8, r6
 8017244:	2c00      	cmp	r4, #0
 8017246:	f47f af7c 	bne.w	8017142 <rmw_wait+0x1ee>
 801724a:	e7d1      	b.n	80171f0 <rmw_wait+0x29c>
 801724c:	000f4240 	.word	0x000f4240
 8017250:	2000aa60 	.word	0x2000aa60

08017254 <rmw_create_wait_set>:
 8017254:	b508      	push	{r3, lr}
 8017256:	4803      	ldr	r0, [pc, #12]	@ (8017264 <rmw_create_wait_set+0x10>)
 8017258:	f7fe ff44 	bl	80160e4 <get_memory>
 801725c:	b108      	cbz	r0, 8017262 <rmw_create_wait_set+0xe>
 801725e:	68c0      	ldr	r0, [r0, #12]
 8017260:	3010      	adds	r0, #16
 8017262:	bd08      	pop	{r3, pc}
 8017264:	2000c238 	.word	0x2000c238

08017268 <rmw_destroy_wait_set>:
 8017268:	b508      	push	{r3, lr}
 801726a:	4b08      	ldr	r3, [pc, #32]	@ (801728c <rmw_destroy_wait_set+0x24>)
 801726c:	6819      	ldr	r1, [r3, #0]
 801726e:	b911      	cbnz	r1, 8017276 <rmw_destroy_wait_set+0xe>
 8017270:	e00a      	b.n	8017288 <rmw_destroy_wait_set+0x20>
 8017272:	6889      	ldr	r1, [r1, #8]
 8017274:	b141      	cbz	r1, 8017288 <rmw_destroy_wait_set+0x20>
 8017276:	68cb      	ldr	r3, [r1, #12]
 8017278:	3310      	adds	r3, #16
 801727a:	4298      	cmp	r0, r3
 801727c:	d1f9      	bne.n	8017272 <rmw_destroy_wait_set+0xa>
 801727e:	4803      	ldr	r0, [pc, #12]	@ (801728c <rmw_destroy_wait_set+0x24>)
 8017280:	f7fe ff40 	bl	8016104 <put_memory>
 8017284:	2000      	movs	r0, #0
 8017286:	bd08      	pop	{r3, pc}
 8017288:	2001      	movs	r0, #1
 801728a:	bd08      	pop	{r3, pc}
 801728c:	2000c238 	.word	0x2000c238

08017290 <rmw_uros_epoch_nanos>:
 8017290:	4b05      	ldr	r3, [pc, #20]	@ (80172a8 <rmw_uros_epoch_nanos+0x18>)
 8017292:	681b      	ldr	r3, [r3, #0]
 8017294:	b123      	cbz	r3, 80172a0 <rmw_uros_epoch_nanos+0x10>
 8017296:	68d8      	ldr	r0, [r3, #12]
 8017298:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 801729c:	f7f9 bca6 	b.w	8010bec <uxr_epoch_nanos>
 80172a0:	2000      	movs	r0, #0
 80172a2:	2100      	movs	r1, #0
 80172a4:	4770      	bx	lr
 80172a6:	bf00      	nop
 80172a8:	2000aa60 	.word	0x2000aa60

080172ac <_MultiArrayDimension__cdr_serialize>:
 80172ac:	b1d0      	cbz	r0, 80172e4 <_MultiArrayDimension__cdr_serialize+0x38>
 80172ae:	b570      	push	{r4, r5, r6, lr}
 80172b0:	6806      	ldr	r6, [r0, #0]
 80172b2:	460d      	mov	r5, r1
 80172b4:	4604      	mov	r4, r0
 80172b6:	b196      	cbz	r6, 80172de <_MultiArrayDimension__cdr_serialize+0x32>
 80172b8:	4630      	mov	r0, r6
 80172ba:	f7e8 ff93 	bl	80001e4 <strlen>
 80172be:	1c42      	adds	r2, r0, #1
 80172c0:	6060      	str	r0, [r4, #4]
 80172c2:	4631      	mov	r1, r6
 80172c4:	4628      	mov	r0, r5
 80172c6:	f7f9 f8c9 	bl	801045c <ucdr_serialize_sequence_char>
 80172ca:	68e1      	ldr	r1, [r4, #12]
 80172cc:	4628      	mov	r0, r5
 80172ce:	f7f8 f921 	bl	800f514 <ucdr_serialize_uint32_t>
 80172d2:	6921      	ldr	r1, [r4, #16]
 80172d4:	4628      	mov	r0, r5
 80172d6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80172da:	f7f8 b91b 	b.w	800f514 <ucdr_serialize_uint32_t>
 80172de:	4632      	mov	r2, r6
 80172e0:	4630      	mov	r0, r6
 80172e2:	e7ed      	b.n	80172c0 <_MultiArrayDimension__cdr_serialize+0x14>
 80172e4:	4770      	bx	lr
 80172e6:	bf00      	nop

080172e8 <get_serialized_size_std_msgs__msg__MultiArrayDimension>:
 80172e8:	b570      	push	{r4, r5, r6, lr}
 80172ea:	4604      	mov	r4, r0
 80172ec:	b1b0      	cbz	r0, 801731c <get_serialized_size_std_msgs__msg__MultiArrayDimension+0x34>
 80172ee:	460e      	mov	r6, r1
 80172f0:	4630      	mov	r0, r6
 80172f2:	2104      	movs	r1, #4
 80172f4:	f7f9 f846 	bl	8010384 <ucdr_alignment>
 80172f8:	6865      	ldr	r5, [r4, #4]
 80172fa:	1d73      	adds	r3, r6, #5
 80172fc:	442b      	add	r3, r5
 80172fe:	181d      	adds	r5, r3, r0
 8017300:	4628      	mov	r0, r5
 8017302:	2104      	movs	r1, #4
 8017304:	f7f9 f83e 	bl	8010384 <ucdr_alignment>
 8017308:	3004      	adds	r0, #4
 801730a:	4405      	add	r5, r0
 801730c:	4628      	mov	r0, r5
 801730e:	2104      	movs	r1, #4
 8017310:	f7f9 f838 	bl	8010384 <ucdr_alignment>
 8017314:	f1c6 0604 	rsb	r6, r6, #4
 8017318:	4430      	add	r0, r6
 801731a:	4428      	add	r0, r5
 801731c:	bd70      	pop	{r4, r5, r6, pc}
 801731e:	bf00      	nop

08017320 <_MultiArrayDimension__cdr_deserialize>:
 8017320:	b570      	push	{r4, r5, r6, lr}
 8017322:	460c      	mov	r4, r1
 8017324:	b082      	sub	sp, #8
 8017326:	b1d1      	cbz	r1, 801735e <_MultiArrayDimension__cdr_deserialize+0x3e>
 8017328:	688e      	ldr	r6, [r1, #8]
 801732a:	6809      	ldr	r1, [r1, #0]
 801732c:	ab01      	add	r3, sp, #4
 801732e:	4632      	mov	r2, r6
 8017330:	4605      	mov	r5, r0
 8017332:	f7f9 f8a5 	bl	8010480 <ucdr_deserialize_sequence_char>
 8017336:	9b01      	ldr	r3, [sp, #4]
 8017338:	b968      	cbnz	r0, 8017356 <_MultiArrayDimension__cdr_deserialize+0x36>
 801733a:	429e      	cmp	r6, r3
 801733c:	d312      	bcc.n	8017364 <_MultiArrayDimension__cdr_deserialize+0x44>
 801733e:	f104 010c 	add.w	r1, r4, #12
 8017342:	4628      	mov	r0, r5
 8017344:	f7f8 fa16 	bl	800f774 <ucdr_deserialize_uint32_t>
 8017348:	f104 0110 	add.w	r1, r4, #16
 801734c:	4628      	mov	r0, r5
 801734e:	f7f8 fa11 	bl	800f774 <ucdr_deserialize_uint32_t>
 8017352:	b002      	add	sp, #8
 8017354:	bd70      	pop	{r4, r5, r6, pc}
 8017356:	b103      	cbz	r3, 801735a <_MultiArrayDimension__cdr_deserialize+0x3a>
 8017358:	3b01      	subs	r3, #1
 801735a:	6063      	str	r3, [r4, #4]
 801735c:	e7ef      	b.n	801733e <_MultiArrayDimension__cdr_deserialize+0x1e>
 801735e:	4608      	mov	r0, r1
 8017360:	b002      	add	sp, #8
 8017362:	bd70      	pop	{r4, r5, r6, pc}
 8017364:	2101      	movs	r1, #1
 8017366:	75a8      	strb	r0, [r5, #22]
 8017368:	7569      	strb	r1, [r5, #21]
 801736a:	6060      	str	r0, [r4, #4]
 801736c:	4628      	mov	r0, r5
 801736e:	f7f9 f81f 	bl	80103b0 <ucdr_align_to>
 8017372:	9901      	ldr	r1, [sp, #4]
 8017374:	4628      	mov	r0, r5
 8017376:	f7f9 f851 	bl	801041c <ucdr_advance_buffer>
 801737a:	e7e0      	b.n	801733e <_MultiArrayDimension__cdr_deserialize+0x1e>

0801737c <_MultiArrayDimension__max_serialized_size>:
 801737c:	b510      	push	{r4, lr}
 801737e:	2104      	movs	r1, #4
 8017380:	2000      	movs	r0, #0
 8017382:	f7f8 ffff 	bl	8010384 <ucdr_alignment>
 8017386:	1d04      	adds	r4, r0, #4
 8017388:	4620      	mov	r0, r4
 801738a:	2104      	movs	r1, #4
 801738c:	f7f8 fffa 	bl	8010384 <ucdr_alignment>
 8017390:	3004      	adds	r0, #4
 8017392:	4420      	add	r0, r4
 8017394:	bd10      	pop	{r4, pc}
 8017396:	bf00      	nop

08017398 <_MultiArrayDimension__get_serialized_size>:
 8017398:	b510      	push	{r4, lr}
 801739a:	4604      	mov	r4, r0
 801739c:	b190      	cbz	r0, 80173c4 <_MultiArrayDimension__get_serialized_size+0x2c>
 801739e:	2104      	movs	r1, #4
 80173a0:	2000      	movs	r0, #0
 80173a2:	f7f8 ffef 	bl	8010384 <ucdr_alignment>
 80173a6:	6863      	ldr	r3, [r4, #4]
 80173a8:	3305      	adds	r3, #5
 80173aa:	181c      	adds	r4, r3, r0
 80173ac:	4620      	mov	r0, r4
 80173ae:	2104      	movs	r1, #4
 80173b0:	f7f8 ffe8 	bl	8010384 <ucdr_alignment>
 80173b4:	3004      	adds	r0, #4
 80173b6:	4404      	add	r4, r0
 80173b8:	4620      	mov	r0, r4
 80173ba:	2104      	movs	r1, #4
 80173bc:	f7f8 ffe2 	bl	8010384 <ucdr_alignment>
 80173c0:	3004      	adds	r0, #4
 80173c2:	4420      	add	r0, r4
 80173c4:	bd10      	pop	{r4, pc}
 80173c6:	bf00      	nop

080173c8 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__MultiArrayDimension>:
 80173c8:	4800      	ldr	r0, [pc, #0]	@ (80173cc <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__MultiArrayDimension+0x4>)
 80173ca:	4770      	bx	lr
 80173cc:	200000d0 	.word	0x200000d0

080173d0 <ucdr_serialize_endian_array_char>:
 80173d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80173d4:	4619      	mov	r1, r3
 80173d6:	461e      	mov	r6, r3
 80173d8:	4690      	mov	r8, r2
 80173da:	4604      	mov	r4, r0
 80173dc:	f7f8 ff7c 	bl	80102d8 <ucdr_check_buffer_available_for>
 80173e0:	b9e0      	cbnz	r0, 801741c <ucdr_serialize_endian_array_char+0x4c>
 80173e2:	4637      	mov	r7, r6
 80173e4:	e009      	b.n	80173fa <ucdr_serialize_endian_array_char+0x2a>
 80173e6:	68a0      	ldr	r0, [r4, #8]
 80173e8:	f002 fcf3 	bl	8019dd2 <memcpy>
 80173ec:	68a2      	ldr	r2, [r4, #8]
 80173ee:	6923      	ldr	r3, [r4, #16]
 80173f0:	442a      	add	r2, r5
 80173f2:	442b      	add	r3, r5
 80173f4:	1b7f      	subs	r7, r7, r5
 80173f6:	60a2      	str	r2, [r4, #8]
 80173f8:	6123      	str	r3, [r4, #16]
 80173fa:	2201      	movs	r2, #1
 80173fc:	4639      	mov	r1, r7
 80173fe:	4620      	mov	r0, r4
 8017400:	f7f8 fff0 	bl	80103e4 <ucdr_check_final_buffer_behavior_array>
 8017404:	1bf1      	subs	r1, r6, r7
 8017406:	4441      	add	r1, r8
 8017408:	4605      	mov	r5, r0
 801740a:	4602      	mov	r2, r0
 801740c:	2800      	cmp	r0, #0
 801740e:	d1ea      	bne.n	80173e6 <ucdr_serialize_endian_array_char+0x16>
 8017410:	2301      	movs	r3, #1
 8017412:	7da0      	ldrb	r0, [r4, #22]
 8017414:	7563      	strb	r3, [r4, #21]
 8017416:	4058      	eors	r0, r3
 8017418:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801741c:	4632      	mov	r2, r6
 801741e:	68a0      	ldr	r0, [r4, #8]
 8017420:	4641      	mov	r1, r8
 8017422:	f002 fcd6 	bl	8019dd2 <memcpy>
 8017426:	68a2      	ldr	r2, [r4, #8]
 8017428:	6923      	ldr	r3, [r4, #16]
 801742a:	4432      	add	r2, r6
 801742c:	4433      	add	r3, r6
 801742e:	60a2      	str	r2, [r4, #8]
 8017430:	6123      	str	r3, [r4, #16]
 8017432:	e7ed      	b.n	8017410 <ucdr_serialize_endian_array_char+0x40>

08017434 <ucdr_deserialize_endian_array_char>:
 8017434:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017438:	4619      	mov	r1, r3
 801743a:	461e      	mov	r6, r3
 801743c:	4690      	mov	r8, r2
 801743e:	4604      	mov	r4, r0
 8017440:	f7f8 ff4a 	bl	80102d8 <ucdr_check_buffer_available_for>
 8017444:	b9e0      	cbnz	r0, 8017480 <ucdr_deserialize_endian_array_char+0x4c>
 8017446:	4637      	mov	r7, r6
 8017448:	e009      	b.n	801745e <ucdr_deserialize_endian_array_char+0x2a>
 801744a:	68a1      	ldr	r1, [r4, #8]
 801744c:	f002 fcc1 	bl	8019dd2 <memcpy>
 8017450:	68a2      	ldr	r2, [r4, #8]
 8017452:	6923      	ldr	r3, [r4, #16]
 8017454:	442a      	add	r2, r5
 8017456:	442b      	add	r3, r5
 8017458:	1b7f      	subs	r7, r7, r5
 801745a:	60a2      	str	r2, [r4, #8]
 801745c:	6123      	str	r3, [r4, #16]
 801745e:	2201      	movs	r2, #1
 8017460:	4639      	mov	r1, r7
 8017462:	4620      	mov	r0, r4
 8017464:	f7f8 ffbe 	bl	80103e4 <ucdr_check_final_buffer_behavior_array>
 8017468:	4605      	mov	r5, r0
 801746a:	1bf0      	subs	r0, r6, r7
 801746c:	4440      	add	r0, r8
 801746e:	462a      	mov	r2, r5
 8017470:	2d00      	cmp	r5, #0
 8017472:	d1ea      	bne.n	801744a <ucdr_deserialize_endian_array_char+0x16>
 8017474:	2301      	movs	r3, #1
 8017476:	7da0      	ldrb	r0, [r4, #22]
 8017478:	7563      	strb	r3, [r4, #21]
 801747a:	4058      	eors	r0, r3
 801747c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017480:	4632      	mov	r2, r6
 8017482:	68a1      	ldr	r1, [r4, #8]
 8017484:	4640      	mov	r0, r8
 8017486:	f002 fca4 	bl	8019dd2 <memcpy>
 801748a:	68a2      	ldr	r2, [r4, #8]
 801748c:	6923      	ldr	r3, [r4, #16]
 801748e:	4432      	add	r2, r6
 8017490:	4433      	add	r3, r6
 8017492:	60a2      	str	r2, [r4, #8]
 8017494:	6123      	str	r3, [r4, #16]
 8017496:	e7ed      	b.n	8017474 <ucdr_deserialize_endian_array_char+0x40>

08017498 <ucdr_serialize_array_uint8_t>:
 8017498:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801749c:	4688      	mov	r8, r1
 801749e:	4611      	mov	r1, r2
 80174a0:	4616      	mov	r6, r2
 80174a2:	4604      	mov	r4, r0
 80174a4:	f7f8 ff18 	bl	80102d8 <ucdr_check_buffer_available_for>
 80174a8:	b9e0      	cbnz	r0, 80174e4 <ucdr_serialize_array_uint8_t+0x4c>
 80174aa:	4637      	mov	r7, r6
 80174ac:	e009      	b.n	80174c2 <ucdr_serialize_array_uint8_t+0x2a>
 80174ae:	68a0      	ldr	r0, [r4, #8]
 80174b0:	f002 fc8f 	bl	8019dd2 <memcpy>
 80174b4:	68a2      	ldr	r2, [r4, #8]
 80174b6:	6923      	ldr	r3, [r4, #16]
 80174b8:	442a      	add	r2, r5
 80174ba:	442b      	add	r3, r5
 80174bc:	1b7f      	subs	r7, r7, r5
 80174be:	60a2      	str	r2, [r4, #8]
 80174c0:	6123      	str	r3, [r4, #16]
 80174c2:	2201      	movs	r2, #1
 80174c4:	4639      	mov	r1, r7
 80174c6:	4620      	mov	r0, r4
 80174c8:	f7f8 ff8c 	bl	80103e4 <ucdr_check_final_buffer_behavior_array>
 80174cc:	1bf1      	subs	r1, r6, r7
 80174ce:	4441      	add	r1, r8
 80174d0:	4605      	mov	r5, r0
 80174d2:	4602      	mov	r2, r0
 80174d4:	2800      	cmp	r0, #0
 80174d6:	d1ea      	bne.n	80174ae <ucdr_serialize_array_uint8_t+0x16>
 80174d8:	2301      	movs	r3, #1
 80174da:	7da0      	ldrb	r0, [r4, #22]
 80174dc:	7563      	strb	r3, [r4, #21]
 80174de:	4058      	eors	r0, r3
 80174e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80174e4:	4632      	mov	r2, r6
 80174e6:	68a0      	ldr	r0, [r4, #8]
 80174e8:	4641      	mov	r1, r8
 80174ea:	f002 fc72 	bl	8019dd2 <memcpy>
 80174ee:	68a3      	ldr	r3, [r4, #8]
 80174f0:	6922      	ldr	r2, [r4, #16]
 80174f2:	4433      	add	r3, r6
 80174f4:	4432      	add	r2, r6
 80174f6:	60a3      	str	r3, [r4, #8]
 80174f8:	6122      	str	r2, [r4, #16]
 80174fa:	e7ed      	b.n	80174d8 <ucdr_serialize_array_uint8_t+0x40>

080174fc <ucdr_serialize_endian_array_uint8_t>:
 80174fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017500:	4619      	mov	r1, r3
 8017502:	461e      	mov	r6, r3
 8017504:	4690      	mov	r8, r2
 8017506:	4604      	mov	r4, r0
 8017508:	f7f8 fee6 	bl	80102d8 <ucdr_check_buffer_available_for>
 801750c:	b9e0      	cbnz	r0, 8017548 <ucdr_serialize_endian_array_uint8_t+0x4c>
 801750e:	4637      	mov	r7, r6
 8017510:	e009      	b.n	8017526 <ucdr_serialize_endian_array_uint8_t+0x2a>
 8017512:	68a0      	ldr	r0, [r4, #8]
 8017514:	f002 fc5d 	bl	8019dd2 <memcpy>
 8017518:	68a2      	ldr	r2, [r4, #8]
 801751a:	6923      	ldr	r3, [r4, #16]
 801751c:	442a      	add	r2, r5
 801751e:	442b      	add	r3, r5
 8017520:	1b7f      	subs	r7, r7, r5
 8017522:	60a2      	str	r2, [r4, #8]
 8017524:	6123      	str	r3, [r4, #16]
 8017526:	2201      	movs	r2, #1
 8017528:	4639      	mov	r1, r7
 801752a:	4620      	mov	r0, r4
 801752c:	f7f8 ff5a 	bl	80103e4 <ucdr_check_final_buffer_behavior_array>
 8017530:	1bf1      	subs	r1, r6, r7
 8017532:	4441      	add	r1, r8
 8017534:	4605      	mov	r5, r0
 8017536:	4602      	mov	r2, r0
 8017538:	2800      	cmp	r0, #0
 801753a:	d1ea      	bne.n	8017512 <ucdr_serialize_endian_array_uint8_t+0x16>
 801753c:	2301      	movs	r3, #1
 801753e:	7da0      	ldrb	r0, [r4, #22]
 8017540:	7563      	strb	r3, [r4, #21]
 8017542:	4058      	eors	r0, r3
 8017544:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017548:	4632      	mov	r2, r6
 801754a:	68a0      	ldr	r0, [r4, #8]
 801754c:	4641      	mov	r1, r8
 801754e:	f002 fc40 	bl	8019dd2 <memcpy>
 8017552:	68a2      	ldr	r2, [r4, #8]
 8017554:	6923      	ldr	r3, [r4, #16]
 8017556:	4432      	add	r2, r6
 8017558:	4433      	add	r3, r6
 801755a:	60a2      	str	r2, [r4, #8]
 801755c:	6123      	str	r3, [r4, #16]
 801755e:	e7ed      	b.n	801753c <ucdr_serialize_endian_array_uint8_t+0x40>

08017560 <ucdr_deserialize_array_uint8_t>:
 8017560:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017564:	4688      	mov	r8, r1
 8017566:	4611      	mov	r1, r2
 8017568:	4616      	mov	r6, r2
 801756a:	4604      	mov	r4, r0
 801756c:	f7f8 feb4 	bl	80102d8 <ucdr_check_buffer_available_for>
 8017570:	b9e0      	cbnz	r0, 80175ac <ucdr_deserialize_array_uint8_t+0x4c>
 8017572:	4637      	mov	r7, r6
 8017574:	e009      	b.n	801758a <ucdr_deserialize_array_uint8_t+0x2a>
 8017576:	68a1      	ldr	r1, [r4, #8]
 8017578:	f002 fc2b 	bl	8019dd2 <memcpy>
 801757c:	68a2      	ldr	r2, [r4, #8]
 801757e:	6923      	ldr	r3, [r4, #16]
 8017580:	442a      	add	r2, r5
 8017582:	442b      	add	r3, r5
 8017584:	1b7f      	subs	r7, r7, r5
 8017586:	60a2      	str	r2, [r4, #8]
 8017588:	6123      	str	r3, [r4, #16]
 801758a:	2201      	movs	r2, #1
 801758c:	4639      	mov	r1, r7
 801758e:	4620      	mov	r0, r4
 8017590:	f7f8 ff28 	bl	80103e4 <ucdr_check_final_buffer_behavior_array>
 8017594:	4605      	mov	r5, r0
 8017596:	1bf0      	subs	r0, r6, r7
 8017598:	4440      	add	r0, r8
 801759a:	462a      	mov	r2, r5
 801759c:	2d00      	cmp	r5, #0
 801759e:	d1ea      	bne.n	8017576 <ucdr_deserialize_array_uint8_t+0x16>
 80175a0:	2301      	movs	r3, #1
 80175a2:	7da0      	ldrb	r0, [r4, #22]
 80175a4:	7563      	strb	r3, [r4, #21]
 80175a6:	4058      	eors	r0, r3
 80175a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80175ac:	4632      	mov	r2, r6
 80175ae:	68a1      	ldr	r1, [r4, #8]
 80175b0:	4640      	mov	r0, r8
 80175b2:	f002 fc0e 	bl	8019dd2 <memcpy>
 80175b6:	68a3      	ldr	r3, [r4, #8]
 80175b8:	6922      	ldr	r2, [r4, #16]
 80175ba:	4433      	add	r3, r6
 80175bc:	4432      	add	r2, r6
 80175be:	60a3      	str	r3, [r4, #8]
 80175c0:	6122      	str	r2, [r4, #16]
 80175c2:	e7ed      	b.n	80175a0 <ucdr_deserialize_array_uint8_t+0x40>

080175c4 <ucdr_deserialize_endian_array_uint8_t>:
 80175c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80175c8:	4619      	mov	r1, r3
 80175ca:	461e      	mov	r6, r3
 80175cc:	4690      	mov	r8, r2
 80175ce:	4604      	mov	r4, r0
 80175d0:	f7f8 fe82 	bl	80102d8 <ucdr_check_buffer_available_for>
 80175d4:	b9e0      	cbnz	r0, 8017610 <ucdr_deserialize_endian_array_uint8_t+0x4c>
 80175d6:	4637      	mov	r7, r6
 80175d8:	e009      	b.n	80175ee <ucdr_deserialize_endian_array_uint8_t+0x2a>
 80175da:	68a1      	ldr	r1, [r4, #8]
 80175dc:	f002 fbf9 	bl	8019dd2 <memcpy>
 80175e0:	68a2      	ldr	r2, [r4, #8]
 80175e2:	6923      	ldr	r3, [r4, #16]
 80175e4:	442a      	add	r2, r5
 80175e6:	442b      	add	r3, r5
 80175e8:	1b7f      	subs	r7, r7, r5
 80175ea:	60a2      	str	r2, [r4, #8]
 80175ec:	6123      	str	r3, [r4, #16]
 80175ee:	2201      	movs	r2, #1
 80175f0:	4639      	mov	r1, r7
 80175f2:	4620      	mov	r0, r4
 80175f4:	f7f8 fef6 	bl	80103e4 <ucdr_check_final_buffer_behavior_array>
 80175f8:	4605      	mov	r5, r0
 80175fa:	1bf0      	subs	r0, r6, r7
 80175fc:	4440      	add	r0, r8
 80175fe:	462a      	mov	r2, r5
 8017600:	2d00      	cmp	r5, #0
 8017602:	d1ea      	bne.n	80175da <ucdr_deserialize_endian_array_uint8_t+0x16>
 8017604:	2301      	movs	r3, #1
 8017606:	7da0      	ldrb	r0, [r4, #22]
 8017608:	7563      	strb	r3, [r4, #21]
 801760a:	4058      	eors	r0, r3
 801760c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017610:	4632      	mov	r2, r6
 8017612:	68a1      	ldr	r1, [r4, #8]
 8017614:	4640      	mov	r0, r8
 8017616:	f002 fbdc 	bl	8019dd2 <memcpy>
 801761a:	68a2      	ldr	r2, [r4, #8]
 801761c:	6923      	ldr	r3, [r4, #16]
 801761e:	4432      	add	r2, r6
 8017620:	4433      	add	r3, r6
 8017622:	60a2      	str	r2, [r4, #8]
 8017624:	6123      	str	r3, [r4, #16]
 8017626:	e7ed      	b.n	8017604 <ucdr_deserialize_endian_array_uint8_t+0x40>

08017628 <ucdr_serialize_endian_array_double>:
 8017628:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801762c:	460f      	mov	r7, r1
 801762e:	2108      	movs	r1, #8
 8017630:	4605      	mov	r5, r0
 8017632:	4614      	mov	r4, r2
 8017634:	461e      	mov	r6, r3
 8017636:	f7f8 fead 	bl	8010394 <ucdr_buffer_alignment>
 801763a:	4601      	mov	r1, r0
 801763c:	4628      	mov	r0, r5
 801763e:	f895 8015 	ldrb.w	r8, [r5, #21]
 8017642:	f7f8 feeb 	bl	801041c <ucdr_advance_buffer>
 8017646:	2f01      	cmp	r7, #1
 8017648:	f885 8015 	strb.w	r8, [r5, #21]
 801764c:	d00f      	beq.n	801766e <ucdr_serialize_endian_array_double+0x46>
 801764e:	b14e      	cbz	r6, 8017664 <ucdr_serialize_endian_array_double+0x3c>
 8017650:	eb04 06c6 	add.w	r6, r4, r6, lsl #3
 8017654:	ecb4 0b02 	vldmia	r4!, {d0}
 8017658:	4639      	mov	r1, r7
 801765a:	4628      	mov	r0, r5
 801765c:	f7f8 fc9c 	bl	800ff98 <ucdr_serialize_endian_double>
 8017660:	42a6      	cmp	r6, r4
 8017662:	d1f7      	bne.n	8017654 <ucdr_serialize_endian_array_double+0x2c>
 8017664:	7da8      	ldrb	r0, [r5, #22]
 8017666:	f080 0001 	eor.w	r0, r0, #1
 801766a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801766e:	00f6      	lsls	r6, r6, #3
 8017670:	4631      	mov	r1, r6
 8017672:	4628      	mov	r0, r5
 8017674:	f7f8 fe30 	bl	80102d8 <ucdr_check_buffer_available_for>
 8017678:	b9f8      	cbnz	r0, 80176ba <ucdr_serialize_endian_array_double+0x92>
 801767a:	46b0      	mov	r8, r6
 801767c:	e00a      	b.n	8017694 <ucdr_serialize_endian_array_double+0x6c>
 801767e:	68a8      	ldr	r0, [r5, #8]
 8017680:	f002 fba7 	bl	8019dd2 <memcpy>
 8017684:	68aa      	ldr	r2, [r5, #8]
 8017686:	692b      	ldr	r3, [r5, #16]
 8017688:	443a      	add	r2, r7
 801768a:	443b      	add	r3, r7
 801768c:	eba8 0807 	sub.w	r8, r8, r7
 8017690:	60aa      	str	r2, [r5, #8]
 8017692:	612b      	str	r3, [r5, #16]
 8017694:	2208      	movs	r2, #8
 8017696:	4641      	mov	r1, r8
 8017698:	4628      	mov	r0, r5
 801769a:	f7f8 fea3 	bl	80103e4 <ucdr_check_final_buffer_behavior_array>
 801769e:	eba6 0108 	sub.w	r1, r6, r8
 80176a2:	4421      	add	r1, r4
 80176a4:	4607      	mov	r7, r0
 80176a6:	4602      	mov	r2, r0
 80176a8:	2800      	cmp	r0, #0
 80176aa:	d1e8      	bne.n	801767e <ucdr_serialize_endian_array_double+0x56>
 80176ac:	7da8      	ldrb	r0, [r5, #22]
 80176ae:	2308      	movs	r3, #8
 80176b0:	756b      	strb	r3, [r5, #21]
 80176b2:	f080 0001 	eor.w	r0, r0, #1
 80176b6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80176ba:	4632      	mov	r2, r6
 80176bc:	68a8      	ldr	r0, [r5, #8]
 80176be:	4621      	mov	r1, r4
 80176c0:	f002 fb87 	bl	8019dd2 <memcpy>
 80176c4:	68aa      	ldr	r2, [r5, #8]
 80176c6:	692b      	ldr	r3, [r5, #16]
 80176c8:	4432      	add	r2, r6
 80176ca:	441e      	add	r6, r3
 80176cc:	60aa      	str	r2, [r5, #8]
 80176ce:	612e      	str	r6, [r5, #16]
 80176d0:	e7ec      	b.n	80176ac <ucdr_serialize_endian_array_double+0x84>
 80176d2:	bf00      	nop

080176d4 <ucdr_deserialize_endian_array_double>:
 80176d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80176d8:	460f      	mov	r7, r1
 80176da:	2108      	movs	r1, #8
 80176dc:	4605      	mov	r5, r0
 80176de:	4614      	mov	r4, r2
 80176e0:	461e      	mov	r6, r3
 80176e2:	f7f8 fe57 	bl	8010394 <ucdr_buffer_alignment>
 80176e6:	4601      	mov	r1, r0
 80176e8:	4628      	mov	r0, r5
 80176ea:	f895 8015 	ldrb.w	r8, [r5, #21]
 80176ee:	f7f8 fe95 	bl	801041c <ucdr_advance_buffer>
 80176f2:	2f01      	cmp	r7, #1
 80176f4:	f885 8015 	strb.w	r8, [r5, #21]
 80176f8:	d00f      	beq.n	801771a <ucdr_deserialize_endian_array_double+0x46>
 80176fa:	b14e      	cbz	r6, 8017710 <ucdr_deserialize_endian_array_double+0x3c>
 80176fc:	eb04 06c6 	add.w	r6, r4, r6, lsl #3
 8017700:	4622      	mov	r2, r4
 8017702:	4639      	mov	r1, r7
 8017704:	3408      	adds	r4, #8
 8017706:	4628      	mov	r0, r5
 8017708:	f7f8 fd18 	bl	801013c <ucdr_deserialize_endian_double>
 801770c:	42a6      	cmp	r6, r4
 801770e:	d1f7      	bne.n	8017700 <ucdr_deserialize_endian_array_double+0x2c>
 8017710:	7da8      	ldrb	r0, [r5, #22]
 8017712:	f080 0001 	eor.w	r0, r0, #1
 8017716:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801771a:	00f6      	lsls	r6, r6, #3
 801771c:	4631      	mov	r1, r6
 801771e:	4628      	mov	r0, r5
 8017720:	f7f8 fdda 	bl	80102d8 <ucdr_check_buffer_available_for>
 8017724:	b9f8      	cbnz	r0, 8017766 <ucdr_deserialize_endian_array_double+0x92>
 8017726:	46b0      	mov	r8, r6
 8017728:	e00a      	b.n	8017740 <ucdr_deserialize_endian_array_double+0x6c>
 801772a:	68a9      	ldr	r1, [r5, #8]
 801772c:	f002 fb51 	bl	8019dd2 <memcpy>
 8017730:	68aa      	ldr	r2, [r5, #8]
 8017732:	692b      	ldr	r3, [r5, #16]
 8017734:	443a      	add	r2, r7
 8017736:	443b      	add	r3, r7
 8017738:	eba8 0807 	sub.w	r8, r8, r7
 801773c:	60aa      	str	r2, [r5, #8]
 801773e:	612b      	str	r3, [r5, #16]
 8017740:	2208      	movs	r2, #8
 8017742:	4641      	mov	r1, r8
 8017744:	4628      	mov	r0, r5
 8017746:	f7f8 fe4d 	bl	80103e4 <ucdr_check_final_buffer_behavior_array>
 801774a:	4607      	mov	r7, r0
 801774c:	eba6 0008 	sub.w	r0, r6, r8
 8017750:	4420      	add	r0, r4
 8017752:	463a      	mov	r2, r7
 8017754:	2f00      	cmp	r7, #0
 8017756:	d1e8      	bne.n	801772a <ucdr_deserialize_endian_array_double+0x56>
 8017758:	7da8      	ldrb	r0, [r5, #22]
 801775a:	2308      	movs	r3, #8
 801775c:	756b      	strb	r3, [r5, #21]
 801775e:	f080 0001 	eor.w	r0, r0, #1
 8017762:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017766:	4632      	mov	r2, r6
 8017768:	68a9      	ldr	r1, [r5, #8]
 801776a:	4620      	mov	r0, r4
 801776c:	f002 fb31 	bl	8019dd2 <memcpy>
 8017770:	68aa      	ldr	r2, [r5, #8]
 8017772:	692b      	ldr	r3, [r5, #16]
 8017774:	4432      	add	r2, r6
 8017776:	441e      	add	r6, r3
 8017778:	60aa      	str	r2, [r5, #8]
 801777a:	612e      	str	r6, [r5, #16]
 801777c:	e7ec      	b.n	8017758 <ucdr_deserialize_endian_array_double+0x84>
 801777e:	bf00      	nop

08017780 <ucdr_serialize_string>:
 8017780:	b510      	push	{r4, lr}
 8017782:	b082      	sub	sp, #8
 8017784:	4604      	mov	r4, r0
 8017786:	4608      	mov	r0, r1
 8017788:	9101      	str	r1, [sp, #4]
 801778a:	f7e8 fd2b 	bl	80001e4 <strlen>
 801778e:	9901      	ldr	r1, [sp, #4]
 8017790:	4602      	mov	r2, r0
 8017792:	3201      	adds	r2, #1
 8017794:	4620      	mov	r0, r4
 8017796:	b002      	add	sp, #8
 8017798:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801779c:	f7f8 be5e 	b.w	801045c <ucdr_serialize_sequence_char>

080177a0 <ucdr_deserialize_string>:
 80177a0:	b500      	push	{lr}
 80177a2:	b083      	sub	sp, #12
 80177a4:	ab01      	add	r3, sp, #4
 80177a6:	f7f8 fe6b 	bl	8010480 <ucdr_deserialize_sequence_char>
 80177aa:	b003      	add	sp, #12
 80177ac:	f85d fb04 	ldr.w	pc, [sp], #4

080177b0 <get_custom_error>:
 80177b0:	4b01      	ldr	r3, [pc, #4]	@ (80177b8 <get_custom_error+0x8>)
 80177b2:	7818      	ldrb	r0, [r3, #0]
 80177b4:	4770      	bx	lr
 80177b6:	bf00      	nop
 80177b8:	2000771c 	.word	0x2000771c

080177bc <recv_custom_msg>:
 80177bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80177c0:	f890 5200 	ldrb.w	r5, [r0, #512]	@ 0x200
 80177c4:	b089      	sub	sp, #36	@ 0x24
 80177c6:	2600      	movs	r6, #0
 80177c8:	4604      	mov	r4, r0
 80177ca:	9305      	str	r3, [sp, #20]
 80177cc:	468a      	mov	sl, r1
 80177ce:	4693      	mov	fp, r2
 80177d0:	f88d 601e 	strb.w	r6, [sp, #30]
 80177d4:	b325      	cbz	r5, 8017820 <recv_custom_msg+0x64>
 80177d6:	f200 2902 	addw	r9, r0, #514	@ 0x202
 80177da:	f10d 081f 	add.w	r8, sp, #31
 80177de:	af05      	add	r7, sp, #20
 80177e0:	f10d 061e 	add.w	r6, sp, #30
 80177e4:	f44f 7500 	mov.w	r5, #512	@ 0x200
 80177e8:	e002      	b.n	80177f0 <recv_custom_msg+0x34>
 80177ea:	9b05      	ldr	r3, [sp, #20]
 80177ec:	2b00      	cmp	r3, #0
 80177ee:	dd0f      	ble.n	8017810 <recv_custom_msg+0x54>
 80177f0:	e9cd 7802 	strd	r7, r8, [sp, #8]
 80177f4:	e9cd 5600 	strd	r5, r6, [sp]
 80177f8:	4623      	mov	r3, r4
 80177fa:	f8d4 1274 	ldr.w	r1, [r4, #628]	@ 0x274
 80177fe:	4622      	mov	r2, r4
 8017800:	4648      	mov	r0, r9
 8017802:	f001 f8fb 	bl	80189fc <uxr_read_framed_msg>
 8017806:	2800      	cmp	r0, #0
 8017808:	d0ef      	beq.n	80177ea <recv_custom_msg+0x2e>
 801780a:	f89d 301e 	ldrb.w	r3, [sp, #30]
 801780e:	b1b3      	cbz	r3, 801783e <recv_custom_msg+0x82>
 8017810:	4b0f      	ldr	r3, [pc, #60]	@ (8017850 <recv_custom_msg+0x94>)
 8017812:	f89d 201f 	ldrb.w	r2, [sp, #31]
 8017816:	701a      	strb	r2, [r3, #0]
 8017818:	2000      	movs	r0, #0
 801781a:	b009      	add	sp, #36	@ 0x24
 801781c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017820:	f10d 021f 	add.w	r2, sp, #31
 8017824:	9200      	str	r2, [sp, #0]
 8017826:	f8d0 5274 	ldr.w	r5, [r0, #628]	@ 0x274
 801782a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 801782e:	4601      	mov	r1, r0
 8017830:	47a8      	blx	r5
 8017832:	2800      	cmp	r0, #0
 8017834:	d0ec      	beq.n	8017810 <recv_custom_msg+0x54>
 8017836:	f89d 301e 	ldrb.w	r3, [sp, #30]
 801783a:	2b00      	cmp	r3, #0
 801783c:	d1e8      	bne.n	8017810 <recv_custom_msg+0x54>
 801783e:	f8cb 0000 	str.w	r0, [fp]
 8017842:	2001      	movs	r0, #1
 8017844:	f8ca 4000 	str.w	r4, [sl]
 8017848:	b009      	add	sp, #36	@ 0x24
 801784a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801784e:	bf00      	nop
 8017850:	2000771c 	.word	0x2000771c

08017854 <send_custom_msg>:
 8017854:	b570      	push	{r4, r5, r6, lr}
 8017856:	f890 5200 	ldrb.w	r5, [r0, #512]	@ 0x200
 801785a:	b086      	sub	sp, #24
 801785c:	4616      	mov	r6, r2
 801785e:	b975      	cbnz	r5, 801787e <send_custom_msg+0x2a>
 8017860:	f8d0 4270 	ldr.w	r4, [r0, #624]	@ 0x270
 8017864:	f10d 0317 	add.w	r3, sp, #23
 8017868:	47a0      	blx	r4
 801786a:	b108      	cbz	r0, 8017870 <send_custom_msg+0x1c>
 801786c:	42b0      	cmp	r0, r6
 801786e:	d015      	beq.n	801789c <send_custom_msg+0x48>
 8017870:	4b0c      	ldr	r3, [pc, #48]	@ (80178a4 <send_custom_msg+0x50>)
 8017872:	f89d 2017 	ldrb.w	r2, [sp, #23]
 8017876:	701a      	strb	r2, [r3, #0]
 8017878:	2000      	movs	r0, #0
 801787a:	b006      	add	sp, #24
 801787c:	bd70      	pop	{r4, r5, r6, pc}
 801787e:	460b      	mov	r3, r1
 8017880:	2200      	movs	r2, #0
 8017882:	f10d 0117 	add.w	r1, sp, #23
 8017886:	e9cd 2101 	strd	r2, r1, [sp, #4]
 801788a:	9600      	str	r6, [sp, #0]
 801788c:	f8d0 1270 	ldr.w	r1, [r0, #624]	@ 0x270
 8017890:	4602      	mov	r2, r0
 8017892:	f200 2002 	addw	r0, r0, #514	@ 0x202
 8017896:	f000 fec9 	bl	801862c <uxr_write_framed_msg>
 801789a:	e7e6      	b.n	801786a <send_custom_msg+0x16>
 801789c:	2001      	movs	r0, #1
 801789e:	b006      	add	sp, #24
 80178a0:	bd70      	pop	{r4, r5, r6, pc}
 80178a2:	bf00      	nop
 80178a4:	2000771c 	.word	0x2000771c

080178a8 <uxr_set_custom_transport_callbacks>:
 80178a8:	b430      	push	{r4, r5}
 80178aa:	e9dd 5402 	ldrd	r5, r4, [sp, #8]
 80178ae:	e9c0 239a 	strd	r2, r3, [r0, #616]	@ 0x268
 80178b2:	e9c0 549c 	strd	r5, r4, [r0, #624]	@ 0x270
 80178b6:	f880 1200 	strb.w	r1, [r0, #512]	@ 0x200
 80178ba:	bc30      	pop	{r4, r5}
 80178bc:	4770      	bx	lr
 80178be:	bf00      	nop

080178c0 <uxr_init_custom_transport>:
 80178c0:	b538      	push	{r3, r4, r5, lr}
 80178c2:	f8d0 3268 	ldr.w	r3, [r0, #616]	@ 0x268
 80178c6:	b303      	cbz	r3, 801790a <uxr_init_custom_transport+0x4a>
 80178c8:	f8d0 226c 	ldr.w	r2, [r0, #620]	@ 0x26c
 80178cc:	4604      	mov	r4, r0
 80178ce:	b1e2      	cbz	r2, 801790a <uxr_init_custom_transport+0x4a>
 80178d0:	f8d0 2270 	ldr.w	r2, [r0, #624]	@ 0x270
 80178d4:	b1ca      	cbz	r2, 801790a <uxr_init_custom_transport+0x4a>
 80178d6:	f8d0 2274 	ldr.w	r2, [r0, #628]	@ 0x274
 80178da:	b1b2      	cbz	r2, 801790a <uxr_init_custom_transport+0x4a>
 80178dc:	f8c0 128c 	str.w	r1, [r0, #652]	@ 0x28c
 80178e0:	4798      	blx	r3
 80178e2:	4605      	mov	r5, r0
 80178e4:	b188      	cbz	r0, 801790a <uxr_init_custom_transport+0x4a>
 80178e6:	f894 3200 	ldrb.w	r3, [r4, #512]	@ 0x200
 80178ea:	b98b      	cbnz	r3, 8017910 <uxr_init_custom_transport+0x50>
 80178ec:	480b      	ldr	r0, [pc, #44]	@ (801791c <uxr_init_custom_transport+0x5c>)
 80178ee:	490c      	ldr	r1, [pc, #48]	@ (8017920 <uxr_init_custom_transport+0x60>)
 80178f0:	4a0c      	ldr	r2, [pc, #48]	@ (8017924 <uxr_init_custom_transport+0x64>)
 80178f2:	f8c4 4278 	str.w	r4, [r4, #632]	@ 0x278
 80178f6:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80178fa:	e9c4 019f 	strd	r0, r1, [r4, #636]	@ 0x27c
 80178fe:	f8c4 2284 	str.w	r2, [r4, #644]	@ 0x284
 8017902:	f8a4 3288 	strh.w	r3, [r4, #648]	@ 0x288
 8017906:	4628      	mov	r0, r5
 8017908:	bd38      	pop	{r3, r4, r5, pc}
 801790a:	2500      	movs	r5, #0
 801790c:	4628      	mov	r0, r5
 801790e:	bd38      	pop	{r3, r4, r5, pc}
 8017910:	2100      	movs	r1, #0
 8017912:	f204 2002 	addw	r0, r4, #514	@ 0x202
 8017916:	f000 fe83 	bl	8018620 <uxr_init_framing_io>
 801791a:	e7e7      	b.n	80178ec <uxr_init_custom_transport+0x2c>
 801791c:	08017855 	.word	0x08017855
 8017920:	080177bd 	.word	0x080177bd
 8017924:	080177b1 	.word	0x080177b1

08017928 <uxr_close_custom_transport>:
 8017928:	f8d0 326c 	ldr.w	r3, [r0, #620]	@ 0x26c
 801792c:	4718      	bx	r3
 801792e:	bf00      	nop

08017930 <uxr_init_input_best_effort_stream>:
 8017930:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8017934:	8003      	strh	r3, [r0, #0]
 8017936:	4770      	bx	lr

08017938 <uxr_reset_input_best_effort_stream>:
 8017938:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 801793c:	8003      	strh	r3, [r0, #0]
 801793e:	4770      	bx	lr

08017940 <uxr_receive_best_effort_message>:
 8017940:	b538      	push	{r3, r4, r5, lr}
 8017942:	4604      	mov	r4, r0
 8017944:	8800      	ldrh	r0, [r0, #0]
 8017946:	460d      	mov	r5, r1
 8017948:	f000 fe52 	bl	80185f0 <uxr_seq_num_cmp>
 801794c:	4603      	mov	r3, r0
 801794e:	2b00      	cmp	r3, #0
 8017950:	ea4f 70d0 	mov.w	r0, r0, lsr #31
 8017954:	bfb8      	it	lt
 8017956:	8025      	strhlt	r5, [r4, #0]
 8017958:	bd38      	pop	{r3, r4, r5, pc}
 801795a:	bf00      	nop

0801795c <on_full_input_buffer>:
 801795c:	b570      	push	{r4, r5, r6, lr}
 801795e:	6802      	ldr	r2, [r0, #0]
 8017960:	460d      	mov	r5, r1
 8017962:	6809      	ldr	r1, [r1, #0]
 8017964:	686c      	ldr	r4, [r5, #4]
 8017966:	1a53      	subs	r3, r2, r1
 8017968:	4606      	mov	r6, r0
 801796a:	8928      	ldrh	r0, [r5, #8]
 801796c:	fbb4 f4f0 	udiv	r4, r4, r0
 8017970:	fbb3 f3f4 	udiv	r3, r3, r4
 8017974:	3301      	adds	r3, #1
 8017976:	b29b      	uxth	r3, r3
 8017978:	fbb3 f2f0 	udiv	r2, r3, r0
 801797c:	fb00 3312 	mls	r3, r0, r2, r3
 8017980:	b29b      	uxth	r3, r3
 8017982:	fb04 f403 	mul.w	r4, r4, r3
 8017986:	1d23      	adds	r3, r4, #4
 8017988:	440b      	add	r3, r1
 801798a:	7d28      	ldrb	r0, [r5, #20]
 801798c:	f853 2c04 	ldr.w	r2, [r3, #-4]
 8017990:	b110      	cbz	r0, 8017998 <on_full_input_buffer+0x3c>
 8017992:	2000      	movs	r0, #0
 8017994:	f843 0c04 	str.w	r0, [r3, #-4]
 8017998:	2a03      	cmp	r2, #3
 801799a:	d801      	bhi.n	80179a0 <on_full_input_buffer+0x44>
 801799c:	2001      	movs	r0, #1
 801799e:	bd70      	pop	{r4, r5, r6, pc}
 80179a0:	3408      	adds	r4, #8
 80179a2:	6933      	ldr	r3, [r6, #16]
 80179a4:	4421      	add	r1, r4
 80179a6:	4630      	mov	r0, r6
 80179a8:	3a04      	subs	r2, #4
 80179aa:	f7f8 fcdf 	bl	801036c <ucdr_init_buffer_origin>
 80179ae:	4630      	mov	r0, r6
 80179b0:	4902      	ldr	r1, [pc, #8]	@ (80179bc <on_full_input_buffer+0x60>)
 80179b2:	462a      	mov	r2, r5
 80179b4:	f7f8 fcb8 	bl	8010328 <ucdr_set_on_full_buffer_callback>
 80179b8:	2000      	movs	r0, #0
 80179ba:	bd70      	pop	{r4, r5, r6, pc}
 80179bc:	0801795d 	.word	0x0801795d

080179c0 <uxr_init_input_reliable_stream>:
 80179c0:	b470      	push	{r4, r5, r6}
 80179c2:	9c03      	ldr	r4, [sp, #12]
 80179c4:	6001      	str	r1, [r0, #0]
 80179c6:	2600      	movs	r6, #0
 80179c8:	8103      	strh	r3, [r0, #8]
 80179ca:	6042      	str	r2, [r0, #4]
 80179cc:	6104      	str	r4, [r0, #16]
 80179ce:	7506      	strb	r6, [r0, #20]
 80179d0:	b1ab      	cbz	r3, 80179fe <uxr_init_input_reliable_stream+0x3e>
 80179d2:	600e      	str	r6, [r1, #0]
 80179d4:	8901      	ldrh	r1, [r0, #8]
 80179d6:	2901      	cmp	r1, #1
 80179d8:	d911      	bls.n	80179fe <uxr_init_input_reliable_stream+0x3e>
 80179da:	2201      	movs	r2, #1
 80179dc:	e9d0 5400 	ldrd	r5, r4, [r0]
 80179e0:	fbb2 f3f1 	udiv	r3, r2, r1
 80179e4:	fb01 2313 	mls	r3, r1, r3, r2
 80179e8:	b29b      	uxth	r3, r3
 80179ea:	fbb4 f1f1 	udiv	r1, r4, r1
 80179ee:	fb03 f301 	mul.w	r3, r3, r1
 80179f2:	3201      	adds	r2, #1
 80179f4:	50ee      	str	r6, [r5, r3]
 80179f6:	8901      	ldrh	r1, [r0, #8]
 80179f8:	b292      	uxth	r2, r2
 80179fa:	4291      	cmp	r1, r2
 80179fc:	d8ee      	bhi.n	80179dc <uxr_init_input_reliable_stream+0x1c>
 80179fe:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8017a02:	bc70      	pop	{r4, r5, r6}
 8017a04:	60c3      	str	r3, [r0, #12]
 8017a06:	4770      	bx	lr

08017a08 <uxr_reset_input_reliable_stream>:
 8017a08:	8902      	ldrh	r2, [r0, #8]
 8017a0a:	b1ca      	cbz	r2, 8017a40 <uxr_reset_input_reliable_stream+0x38>
 8017a0c:	b470      	push	{r4, r5, r6}
 8017a0e:	2400      	movs	r4, #0
 8017a10:	4621      	mov	r1, r4
 8017a12:	4626      	mov	r6, r4
 8017a14:	fbb1 f3f2 	udiv	r3, r1, r2
 8017a18:	fb02 1313 	mls	r3, r2, r3, r1
 8017a1c:	e9d0 5100 	ldrd	r5, r1, [r0]
 8017a20:	b29b      	uxth	r3, r3
 8017a22:	fbb1 f2f2 	udiv	r2, r1, r2
 8017a26:	fb03 f302 	mul.w	r3, r3, r2
 8017a2a:	3401      	adds	r4, #1
 8017a2c:	50ee      	str	r6, [r5, r3]
 8017a2e:	8902      	ldrh	r2, [r0, #8]
 8017a30:	b2a1      	uxth	r1, r4
 8017a32:	428a      	cmp	r2, r1
 8017a34:	d8ee      	bhi.n	8017a14 <uxr_reset_input_reliable_stream+0xc>
 8017a36:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8017a3a:	bc70      	pop	{r4, r5, r6}
 8017a3c:	60c3      	str	r3, [r0, #12]
 8017a3e:	4770      	bx	lr
 8017a40:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8017a44:	60c3      	str	r3, [r0, #12]
 8017a46:	4770      	bx	lr

08017a48 <uxr_receive_reliable_message>:
 8017a48:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8017a4c:	4604      	mov	r4, r0
 8017a4e:	460d      	mov	r5, r1
 8017a50:	8901      	ldrh	r1, [r0, #8]
 8017a52:	8980      	ldrh	r0, [r0, #12]
 8017a54:	4690      	mov	r8, r2
 8017a56:	461f      	mov	r7, r3
 8017a58:	f000 fdc2 	bl	80185e0 <uxr_seq_num_add>
 8017a5c:	4629      	mov	r1, r5
 8017a5e:	4606      	mov	r6, r0
 8017a60:	89a0      	ldrh	r0, [r4, #12]
 8017a62:	f000 fdc5 	bl	80185f0 <uxr_seq_num_cmp>
 8017a66:	2800      	cmp	r0, #0
 8017a68:	db0a      	blt.n	8017a80 <uxr_receive_reliable_message+0x38>
 8017a6a:	2600      	movs	r6, #0
 8017a6c:	89e0      	ldrh	r0, [r4, #14]
 8017a6e:	4629      	mov	r1, r5
 8017a70:	f000 fdbe 	bl	80185f0 <uxr_seq_num_cmp>
 8017a74:	2800      	cmp	r0, #0
 8017a76:	bfb8      	it	lt
 8017a78:	81e5      	strhlt	r5, [r4, #14]
 8017a7a:	4630      	mov	r0, r6
 8017a7c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8017a80:	4630      	mov	r0, r6
 8017a82:	4629      	mov	r1, r5
 8017a84:	f000 fdb4 	bl	80185f0 <uxr_seq_num_cmp>
 8017a88:	2800      	cmp	r0, #0
 8017a8a:	dbee      	blt.n	8017a6a <uxr_receive_reliable_message+0x22>
 8017a8c:	6923      	ldr	r3, [r4, #16]
 8017a8e:	4640      	mov	r0, r8
 8017a90:	4798      	blx	r3
 8017a92:	2101      	movs	r1, #1
 8017a94:	4681      	mov	r9, r0
 8017a96:	89a0      	ldrh	r0, [r4, #12]
 8017a98:	f000 fda2 	bl	80185e0 <uxr_seq_num_add>
 8017a9c:	f1b9 0f00 	cmp.w	r9, #0
 8017aa0:	d101      	bne.n	8017aa6 <uxr_receive_reliable_message+0x5e>
 8017aa2:	4285      	cmp	r5, r0
 8017aa4:	d049      	beq.n	8017b3a <uxr_receive_reliable_message+0xf2>
 8017aa6:	8921      	ldrh	r1, [r4, #8]
 8017aa8:	fbb5 f3f1 	udiv	r3, r5, r1
 8017aac:	fb01 5313 	mls	r3, r1, r3, r5
 8017ab0:	b29b      	uxth	r3, r3
 8017ab2:	6862      	ldr	r2, [r4, #4]
 8017ab4:	6820      	ldr	r0, [r4, #0]
 8017ab6:	fbb2 f2f1 	udiv	r2, r2, r1
 8017aba:	fb03 f302 	mul.w	r3, r3, r2
 8017abe:	3304      	adds	r3, #4
 8017ac0:	4418      	add	r0, r3
 8017ac2:	f850 3c04 	ldr.w	r3, [r0, #-4]
 8017ac6:	2b00      	cmp	r3, #0
 8017ac8:	d1cf      	bne.n	8017a6a <uxr_receive_reliable_message+0x22>
 8017aca:	4641      	mov	r1, r8
 8017acc:	463a      	mov	r2, r7
 8017ace:	f002 f980 	bl	8019dd2 <memcpy>
 8017ad2:	8921      	ldrh	r1, [r4, #8]
 8017ad4:	fbb5 f3f1 	udiv	r3, r5, r1
 8017ad8:	fb01 5313 	mls	r3, r1, r3, r5
 8017adc:	b29b      	uxth	r3, r3
 8017ade:	6862      	ldr	r2, [r4, #4]
 8017ae0:	fbb2 f2f1 	udiv	r2, r2, r1
 8017ae4:	6821      	ldr	r1, [r4, #0]
 8017ae6:	fb03 f302 	mul.w	r3, r3, r2
 8017aea:	2201      	movs	r2, #1
 8017aec:	50cf      	str	r7, [r1, r3]
 8017aee:	9b08      	ldr	r3, [sp, #32]
 8017af0:	701a      	strb	r2, [r3, #0]
 8017af2:	f1b9 0f00 	cmp.w	r9, #0
 8017af6:	d0b8      	beq.n	8017a6a <uxr_receive_reliable_message+0x22>
 8017af8:	89a6      	ldrh	r6, [r4, #12]
 8017afa:	e001      	b.n	8017b00 <uxr_receive_reliable_message+0xb8>
 8017afc:	2801      	cmp	r0, #1
 8017afe:	d1b4      	bne.n	8017a6a <uxr_receive_reliable_message+0x22>
 8017b00:	4630      	mov	r0, r6
 8017b02:	2101      	movs	r1, #1
 8017b04:	f000 fd6c 	bl	80185e0 <uxr_seq_num_add>
 8017b08:	8921      	ldrh	r1, [r4, #8]
 8017b0a:	fbb0 f3f1 	udiv	r3, r0, r1
 8017b0e:	fb01 0313 	mls	r3, r1, r3, r0
 8017b12:	b29b      	uxth	r3, r3
 8017b14:	6862      	ldr	r2, [r4, #4]
 8017b16:	fbb2 f2f1 	udiv	r2, r2, r1
 8017b1a:	4606      	mov	r6, r0
 8017b1c:	fb03 f302 	mul.w	r3, r3, r2
 8017b20:	6820      	ldr	r0, [r4, #0]
 8017b22:	3304      	adds	r3, #4
 8017b24:	4418      	add	r0, r3
 8017b26:	f850 3c04 	ldr.w	r3, [r0, #-4]
 8017b2a:	2b00      	cmp	r3, #0
 8017b2c:	d09d      	beq.n	8017a6a <uxr_receive_reliable_message+0x22>
 8017b2e:	6923      	ldr	r3, [r4, #16]
 8017b30:	4798      	blx	r3
 8017b32:	2802      	cmp	r0, #2
 8017b34:	d1e2      	bne.n	8017afc <uxr_receive_reliable_message+0xb4>
 8017b36:	2601      	movs	r6, #1
 8017b38:	e798      	b.n	8017a6c <uxr_receive_reliable_message+0x24>
 8017b3a:	9b08      	ldr	r3, [sp, #32]
 8017b3c:	81a5      	strh	r5, [r4, #12]
 8017b3e:	2601      	movs	r6, #1
 8017b40:	f883 9000 	strb.w	r9, [r3]
 8017b44:	e792      	b.n	8017a6c <uxr_receive_reliable_message+0x24>
 8017b46:	bf00      	nop

08017b48 <uxr_next_input_reliable_buffer_available>:
 8017b48:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8017b4c:	4604      	mov	r4, r0
 8017b4e:	460e      	mov	r6, r1
 8017b50:	8980      	ldrh	r0, [r0, #12]
 8017b52:	2101      	movs	r1, #1
 8017b54:	4617      	mov	r7, r2
 8017b56:	f000 fd43 	bl	80185e0 <uxr_seq_num_add>
 8017b5a:	8921      	ldrh	r1, [r4, #8]
 8017b5c:	fbb0 f3f1 	udiv	r3, r0, r1
 8017b60:	fb01 0313 	mls	r3, r1, r3, r0
 8017b64:	b29b      	uxth	r3, r3
 8017b66:	6862      	ldr	r2, [r4, #4]
 8017b68:	fbb2 f2f1 	udiv	r2, r2, r1
 8017b6c:	fb03 f302 	mul.w	r3, r3, r2
 8017b70:	6822      	ldr	r2, [r4, #0]
 8017b72:	3304      	adds	r3, #4
 8017b74:	eb02 0803 	add.w	r8, r2, r3
 8017b78:	f858 9c04 	ldr.w	r9, [r8, #-4]
 8017b7c:	f1b9 0f00 	cmp.w	r9, #0
 8017b80:	d025      	beq.n	8017bce <uxr_next_input_reliable_buffer_available+0x86>
 8017b82:	6923      	ldr	r3, [r4, #16]
 8017b84:	4605      	mov	r5, r0
 8017b86:	4640      	mov	r0, r8
 8017b88:	4798      	blx	r3
 8017b8a:	4682      	mov	sl, r0
 8017b8c:	b310      	cbz	r0, 8017bd4 <uxr_next_input_reliable_buffer_available+0x8c>
 8017b8e:	f8b4 a00c 	ldrh.w	sl, [r4, #12]
 8017b92:	e005      	b.n	8017ba0 <uxr_next_input_reliable_buffer_available+0x58>
 8017b94:	6923      	ldr	r3, [r4, #16]
 8017b96:	4798      	blx	r3
 8017b98:	2802      	cmp	r0, #2
 8017b9a:	d032      	beq.n	8017c02 <uxr_next_input_reliable_buffer_available+0xba>
 8017b9c:	2801      	cmp	r0, #1
 8017b9e:	d116      	bne.n	8017bce <uxr_next_input_reliable_buffer_available+0x86>
 8017ba0:	4650      	mov	r0, sl
 8017ba2:	2101      	movs	r1, #1
 8017ba4:	f000 fd1c 	bl	80185e0 <uxr_seq_num_add>
 8017ba8:	8921      	ldrh	r1, [r4, #8]
 8017baa:	fbb0 f3f1 	udiv	r3, r0, r1
 8017bae:	fb01 0313 	mls	r3, r1, r3, r0
 8017bb2:	b29b      	uxth	r3, r3
 8017bb4:	6862      	ldr	r2, [r4, #4]
 8017bb6:	fbb2 f2f1 	udiv	r2, r2, r1
 8017bba:	4682      	mov	sl, r0
 8017bbc:	fb03 f302 	mul.w	r3, r3, r2
 8017bc0:	6820      	ldr	r0, [r4, #0]
 8017bc2:	3304      	adds	r3, #4
 8017bc4:	4418      	add	r0, r3
 8017bc6:	f850 3c04 	ldr.w	r3, [r0, #-4]
 8017bca:	2b00      	cmp	r3, #0
 8017bcc:	d1e2      	bne.n	8017b94 <uxr_next_input_reliable_buffer_available+0x4c>
 8017bce:	2000      	movs	r0, #0
 8017bd0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017bd4:	464a      	mov	r2, r9
 8017bd6:	4641      	mov	r1, r8
 8017bd8:	4630      	mov	r0, r6
 8017bda:	f7f8 fbcf 	bl	801037c <ucdr_init_buffer>
 8017bde:	8921      	ldrh	r1, [r4, #8]
 8017be0:	fbb5 f3f1 	udiv	r3, r5, r1
 8017be4:	fb01 5313 	mls	r3, r1, r3, r5
 8017be8:	b29b      	uxth	r3, r3
 8017bea:	6862      	ldr	r2, [r4, #4]
 8017bec:	fbb2 f2f1 	udiv	r2, r2, r1
 8017bf0:	6821      	ldr	r1, [r4, #0]
 8017bf2:	fb03 f302 	mul.w	r3, r3, r2
 8017bf6:	2001      	movs	r0, #1
 8017bf8:	f841 a003 	str.w	sl, [r1, r3]
 8017bfc:	81a5      	strh	r5, [r4, #12]
 8017bfe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017c02:	8922      	ldrh	r2, [r4, #8]
 8017c04:	fbb5 f0f2 	udiv	r0, r5, r2
 8017c08:	fb02 5510 	mls	r5, r2, r0, r5
 8017c0c:	b2ad      	uxth	r5, r5
 8017c0e:	6863      	ldr	r3, [r4, #4]
 8017c10:	fbb3 f3f2 	udiv	r3, r3, r2
 8017c14:	fb05 f503 	mul.w	r5, r5, r3
 8017c18:	6823      	ldr	r3, [r4, #0]
 8017c1a:	2000      	movs	r0, #0
 8017c1c:	5158      	str	r0, [r3, r5]
 8017c1e:	eba9 0207 	sub.w	r2, r9, r7
 8017c22:	eb08 0107 	add.w	r1, r8, r7
 8017c26:	4630      	mov	r0, r6
 8017c28:	f7f8 fba8 	bl	801037c <ucdr_init_buffer>
 8017c2c:	4630      	mov	r0, r6
 8017c2e:	4904      	ldr	r1, [pc, #16]	@ (8017c40 <uxr_next_input_reliable_buffer_available+0xf8>)
 8017c30:	4622      	mov	r2, r4
 8017c32:	f7f8 fb79 	bl	8010328 <ucdr_set_on_full_buffer_callback>
 8017c36:	f8a4 a00c 	strh.w	sl, [r4, #12]
 8017c3a:	2001      	movs	r0, #1
 8017c3c:	e7c8      	b.n	8017bd0 <uxr_next_input_reliable_buffer_available+0x88>
 8017c3e:	bf00      	nop
 8017c40:	0801795d 	.word	0x0801795d

08017c44 <uxr_process_heartbeat>:
 8017c44:	b538      	push	{r3, r4, r5, lr}
 8017c46:	4611      	mov	r1, r2
 8017c48:	4604      	mov	r4, r0
 8017c4a:	89c0      	ldrh	r0, [r0, #14]
 8017c4c:	4615      	mov	r5, r2
 8017c4e:	f000 fccf 	bl	80185f0 <uxr_seq_num_cmp>
 8017c52:	2800      	cmp	r0, #0
 8017c54:	bfb8      	it	lt
 8017c56:	81e5      	strhlt	r5, [r4, #14]
 8017c58:	bd38      	pop	{r3, r4, r5, pc}
 8017c5a:	bf00      	nop

08017c5c <uxr_compute_acknack>:
 8017c5c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8017c60:	8903      	ldrh	r3, [r0, #8]
 8017c62:	8986      	ldrh	r6, [r0, #12]
 8017c64:	4604      	mov	r4, r0
 8017c66:	460d      	mov	r5, r1
 8017c68:	b1d3      	cbz	r3, 8017ca0 <uxr_compute_acknack+0x44>
 8017c6a:	4630      	mov	r0, r6
 8017c6c:	2701      	movs	r7, #1
 8017c6e:	e003      	b.n	8017c78 <uxr_compute_acknack+0x1c>
 8017c70:	4567      	cmp	r7, ip
 8017c72:	d215      	bcs.n	8017ca0 <uxr_compute_acknack+0x44>
 8017c74:	89a0      	ldrh	r0, [r4, #12]
 8017c76:	3701      	adds	r7, #1
 8017c78:	b2b9      	uxth	r1, r7
 8017c7a:	f000 fcb1 	bl	80185e0 <uxr_seq_num_add>
 8017c7e:	f8b4 c008 	ldrh.w	ip, [r4, #8]
 8017c82:	fbb0 f2fc 	udiv	r2, r0, ip
 8017c86:	e9d4 1300 	ldrd	r1, r3, [r4]
 8017c8a:	fb0c 0212 	mls	r2, ip, r2, r0
 8017c8e:	b292      	uxth	r2, r2
 8017c90:	fbb3 f3fc 	udiv	r3, r3, ip
 8017c94:	fb02 1303 	mla	r3, r2, r3, r1
 8017c98:	681b      	ldr	r3, [r3, #0]
 8017c9a:	2b00      	cmp	r3, #0
 8017c9c:	d1e8      	bne.n	8017c70 <uxr_compute_acknack+0x14>
 8017c9e:	4606      	mov	r6, r0
 8017ca0:	802e      	strh	r6, [r5, #0]
 8017ca2:	4630      	mov	r0, r6
 8017ca4:	2101      	movs	r1, #1
 8017ca6:	89e6      	ldrh	r6, [r4, #14]
 8017ca8:	f000 fc9e 	bl	80185e8 <uxr_seq_num_sub>
 8017cac:	4601      	mov	r1, r0
 8017cae:	4630      	mov	r0, r6
 8017cb0:	f000 fc9a 	bl	80185e8 <uxr_seq_num_sub>
 8017cb4:	4606      	mov	r6, r0
 8017cb6:	b318      	cbz	r0, 8017d00 <uxr_compute_acknack+0xa4>
 8017cb8:	f04f 0900 	mov.w	r9, #0
 8017cbc:	464f      	mov	r7, r9
 8017cbe:	f04f 0801 	mov.w	r8, #1
 8017cc2:	fa1f f189 	uxth.w	r1, r9
 8017cc6:	8828      	ldrh	r0, [r5, #0]
 8017cc8:	f000 fc8a 	bl	80185e0 <uxr_seq_num_add>
 8017ccc:	f8b4 c008 	ldrh.w	ip, [r4, #8]
 8017cd0:	6822      	ldr	r2, [r4, #0]
 8017cd2:	fbb0 f1fc 	udiv	r1, r0, ip
 8017cd6:	fb01 011c 	mls	r1, r1, ip, r0
 8017cda:	b289      	uxth	r1, r1
 8017cdc:	6863      	ldr	r3, [r4, #4]
 8017cde:	fbb3 f3fc 	udiv	r3, r3, ip
 8017ce2:	fb01 2303 	mla	r3, r1, r3, r2
 8017ce6:	fa08 f209 	lsl.w	r2, r8, r9
 8017cea:	681b      	ldr	r3, [r3, #0]
 8017cec:	f109 0901 	add.w	r9, r9, #1
 8017cf0:	b90b      	cbnz	r3, 8017cf6 <uxr_compute_acknack+0x9a>
 8017cf2:	4317      	orrs	r7, r2
 8017cf4:	b2bf      	uxth	r7, r7
 8017cf6:	454e      	cmp	r6, r9
 8017cf8:	d1e3      	bne.n	8017cc2 <uxr_compute_acknack+0x66>
 8017cfa:	4638      	mov	r0, r7
 8017cfc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8017d00:	4607      	mov	r7, r0
 8017d02:	4638      	mov	r0, r7
 8017d04:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

08017d08 <uxr_init_output_best_effort_stream>:
 8017d08:	b410      	push	{r4}
 8017d0a:	f64f 74ff 	movw	r4, #65535	@ 0xffff
 8017d0e:	81c4      	strh	r4, [r0, #14]
 8017d10:	e9c0 1300 	strd	r1, r3, [r0]
 8017d14:	f85d 4b04 	ldr.w	r4, [sp], #4
 8017d18:	7303      	strb	r3, [r0, #12]
 8017d1a:	6082      	str	r2, [r0, #8]
 8017d1c:	4770      	bx	lr
 8017d1e:	bf00      	nop

08017d20 <uxr_reset_output_best_effort_stream>:
 8017d20:	7b02      	ldrb	r2, [r0, #12]
 8017d22:	6042      	str	r2, [r0, #4]
 8017d24:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8017d28:	81c3      	strh	r3, [r0, #14]
 8017d2a:	4770      	bx	lr

08017d2c <uxr_prepare_best_effort_buffer_to_write>:
 8017d2c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8017d2e:	4604      	mov	r4, r0
 8017d30:	b083      	sub	sp, #12
 8017d32:	6840      	ldr	r0, [r0, #4]
 8017d34:	460d      	mov	r5, r1
 8017d36:	4616      	mov	r6, r2
 8017d38:	f7fa f864 	bl	8011e04 <uxr_submessage_padding>
 8017d3c:	e9d4 2301 	ldrd	r2, r3, [r4, #4]
 8017d40:	4410      	add	r0, r2
 8017d42:	1942      	adds	r2, r0, r5
 8017d44:	4293      	cmp	r3, r2
 8017d46:	bf2c      	ite	cs
 8017d48:	2701      	movcs	r7, #1
 8017d4a:	2700      	movcc	r7, #0
 8017d4c:	d202      	bcs.n	8017d54 <uxr_prepare_best_effort_buffer_to_write+0x28>
 8017d4e:	4638      	mov	r0, r7
 8017d50:	b003      	add	sp, #12
 8017d52:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8017d54:	9000      	str	r0, [sp, #0]
 8017d56:	6821      	ldr	r1, [r4, #0]
 8017d58:	4630      	mov	r0, r6
 8017d5a:	2300      	movs	r3, #0
 8017d5c:	f7f8 fafc 	bl	8010358 <ucdr_init_buffer_origin_offset>
 8017d60:	6861      	ldr	r1, [r4, #4]
 8017d62:	4638      	mov	r0, r7
 8017d64:	4429      	add	r1, r5
 8017d66:	6061      	str	r1, [r4, #4]
 8017d68:	b003      	add	sp, #12
 8017d6a:	bdf0      	pop	{r4, r5, r6, r7, pc}

08017d6c <uxr_prepare_best_effort_buffer_to_send>:
 8017d6c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017d70:	6845      	ldr	r5, [r0, #4]
 8017d72:	4604      	mov	r4, r0
 8017d74:	7b00      	ldrb	r0, [r0, #12]
 8017d76:	4285      	cmp	r5, r0
 8017d78:	bf8c      	ite	hi
 8017d7a:	2701      	movhi	r7, #1
 8017d7c:	2700      	movls	r7, #0
 8017d7e:	d802      	bhi.n	8017d86 <uxr_prepare_best_effort_buffer_to_send+0x1a>
 8017d80:	4638      	mov	r0, r7
 8017d82:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017d86:	4688      	mov	r8, r1
 8017d88:	89e0      	ldrh	r0, [r4, #14]
 8017d8a:	2101      	movs	r1, #1
 8017d8c:	4615      	mov	r5, r2
 8017d8e:	461e      	mov	r6, r3
 8017d90:	f000 fc26 	bl	80185e0 <uxr_seq_num_add>
 8017d94:	e9d4 2300 	ldrd	r2, r3, [r4]
 8017d98:	81e0      	strh	r0, [r4, #14]
 8017d9a:	8030      	strh	r0, [r6, #0]
 8017d9c:	f8c8 2000 	str.w	r2, [r8]
 8017da0:	602b      	str	r3, [r5, #0]
 8017da2:	7b23      	ldrb	r3, [r4, #12]
 8017da4:	6063      	str	r3, [r4, #4]
 8017da6:	4638      	mov	r0, r7
 8017da8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08017dac <on_full_output_buffer>:
 8017dac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017dae:	6802      	ldr	r2, [r0, #0]
 8017db0:	460d      	mov	r5, r1
 8017db2:	6809      	ldr	r1, [r1, #0]
 8017db4:	892f      	ldrh	r7, [r5, #8]
 8017db6:	686c      	ldr	r4, [r5, #4]
 8017db8:	fbb4 f4f7 	udiv	r4, r4, r7
 8017dbc:	1a53      	subs	r3, r2, r1
 8017dbe:	fbb3 f3f4 	udiv	r3, r3, r4
 8017dc2:	3301      	adds	r3, #1
 8017dc4:	b29b      	uxth	r3, r3
 8017dc6:	fbb3 f2f7 	udiv	r2, r3, r7
 8017dca:	fb07 3312 	mls	r3, r7, r2, r3
 8017dce:	b29b      	uxth	r3, r3
 8017dd0:	fb04 f403 	mul.w	r4, r4, r3
 8017dd4:	7b2f      	ldrb	r7, [r5, #12]
 8017dd6:	590a      	ldr	r2, [r1, r4]
 8017dd8:	6903      	ldr	r3, [r0, #16]
 8017dda:	443c      	add	r4, r7
 8017ddc:	3408      	adds	r4, #8
 8017dde:	1bd2      	subs	r2, r2, r7
 8017de0:	4606      	mov	r6, r0
 8017de2:	4421      	add	r1, r4
 8017de4:	3a04      	subs	r2, #4
 8017de6:	f7f8 fac1 	bl	801036c <ucdr_init_buffer_origin>
 8017dea:	4630      	mov	r0, r6
 8017dec:	4902      	ldr	r1, [pc, #8]	@ (8017df8 <on_full_output_buffer+0x4c>)
 8017dee:	462a      	mov	r2, r5
 8017df0:	f7f8 fa9a 	bl	8010328 <ucdr_set_on_full_buffer_callback>
 8017df4:	2000      	movs	r0, #0
 8017df6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8017df8:	08017dad 	.word	0x08017dad

08017dfc <uxr_init_output_reliable_stream>:
 8017dfc:	b430      	push	{r4, r5}
 8017dfe:	f89d 4008 	ldrb.w	r4, [sp, #8]
 8017e02:	6001      	str	r1, [r0, #0]
 8017e04:	8103      	strh	r3, [r0, #8]
 8017e06:	6042      	str	r2, [r0, #4]
 8017e08:	7304      	strb	r4, [r0, #12]
 8017e0a:	b1b3      	cbz	r3, 8017e3a <uxr_init_output_reliable_stream+0x3e>
 8017e0c:	600c      	str	r4, [r1, #0]
 8017e0e:	8901      	ldrh	r1, [r0, #8]
 8017e10:	2901      	cmp	r1, #1
 8017e12:	d912      	bls.n	8017e3a <uxr_init_output_reliable_stream+0x3e>
 8017e14:	2201      	movs	r2, #1
 8017e16:	e9d0 5400 	ldrd	r5, r4, [r0]
 8017e1a:	fbb2 f3f1 	udiv	r3, r2, r1
 8017e1e:	fb01 2313 	mls	r3, r1, r3, r2
 8017e22:	b29b      	uxth	r3, r3
 8017e24:	fbb4 f1f1 	udiv	r1, r4, r1
 8017e28:	fb03 f301 	mul.w	r3, r3, r1
 8017e2c:	7b01      	ldrb	r1, [r0, #12]
 8017e2e:	50e9      	str	r1, [r5, r3]
 8017e30:	3201      	adds	r2, #1
 8017e32:	8901      	ldrh	r1, [r0, #8]
 8017e34:	b292      	uxth	r2, r2
 8017e36:	4291      	cmp	r1, r2
 8017e38:	d8ed      	bhi.n	8017e16 <uxr_init_output_reliable_stream+0x1a>
 8017e3a:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8017e3e:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 8017e42:	e9c0 2306 	strd	r2, r3, [r0, #24]
 8017e46:	4b05      	ldr	r3, [pc, #20]	@ (8017e5c <uxr_init_output_reliable_stream+0x60>)
 8017e48:	f8c0 300e 	str.w	r3, [r0, #14]
 8017e4c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8017e50:	2300      	movs	r3, #0
 8017e52:	bc30      	pop	{r4, r5}
 8017e54:	8242      	strh	r2, [r0, #18]
 8017e56:	8403      	strh	r3, [r0, #32]
 8017e58:	4770      	bx	lr
 8017e5a:	bf00      	nop
 8017e5c:	ffff0000 	.word	0xffff0000

08017e60 <uxr_reset_output_reliable_stream>:
 8017e60:	8902      	ldrh	r2, [r0, #8]
 8017e62:	b430      	push	{r4, r5}
 8017e64:	b19a      	cbz	r2, 8017e8e <uxr_reset_output_reliable_stream+0x2e>
 8017e66:	2400      	movs	r4, #0
 8017e68:	4621      	mov	r1, r4
 8017e6a:	fbb1 f3f2 	udiv	r3, r1, r2
 8017e6e:	fb02 1313 	mls	r3, r2, r3, r1
 8017e72:	e9d0 5100 	ldrd	r5, r1, [r0]
 8017e76:	b29b      	uxth	r3, r3
 8017e78:	fbb1 f2f2 	udiv	r2, r1, r2
 8017e7c:	fb03 f302 	mul.w	r3, r3, r2
 8017e80:	7b02      	ldrb	r2, [r0, #12]
 8017e82:	50ea      	str	r2, [r5, r3]
 8017e84:	3401      	adds	r4, #1
 8017e86:	8902      	ldrh	r2, [r0, #8]
 8017e88:	b2a1      	uxth	r1, r4
 8017e8a:	428a      	cmp	r2, r1
 8017e8c:	d8ed      	bhi.n	8017e6a <uxr_reset_output_reliable_stream+0xa>
 8017e8e:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8017e92:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 8017e96:	e9c0 2306 	strd	r2, r3, [r0, #24]
 8017e9a:	4b05      	ldr	r3, [pc, #20]	@ (8017eb0 <uxr_reset_output_reliable_stream+0x50>)
 8017e9c:	f8c0 300e 	str.w	r3, [r0, #14]
 8017ea0:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8017ea4:	2300      	movs	r3, #0
 8017ea6:	bc30      	pop	{r4, r5}
 8017ea8:	8242      	strh	r2, [r0, #18]
 8017eaa:	8403      	strh	r3, [r0, #32]
 8017eac:	4770      	bx	lr
 8017eae:	bf00      	nop
 8017eb0:	ffff0000 	.word	0xffff0000

08017eb4 <uxr_prepare_reliable_buffer_to_write>:
 8017eb4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017eb8:	4604      	mov	r4, r0
 8017eba:	89c6      	ldrh	r6, [r0, #14]
 8017ebc:	8900      	ldrh	r0, [r0, #8]
 8017ebe:	f8d4 c000 	ldr.w	ip, [r4]
 8017ec2:	fbb6 f3f0 	udiv	r3, r6, r0
 8017ec6:	fb00 6313 	mls	r3, r0, r3, r6
 8017eca:	b091      	sub	sp, #68	@ 0x44
 8017ecc:	b29b      	uxth	r3, r3
 8017ece:	6865      	ldr	r5, [r4, #4]
 8017ed0:	fbb5 f5f0 	udiv	r5, r5, r0
 8017ed4:	fb05 c303 	mla	r3, r5, r3, ip
 8017ed8:	9204      	str	r2, [sp, #16]
 8017eda:	1d1a      	adds	r2, r3, #4
 8017edc:	f8d3 8000 	ldr.w	r8, [r3]
 8017ee0:	f894 900c 	ldrb.w	r9, [r4, #12]
 8017ee4:	9203      	str	r2, [sp, #12]
 8017ee6:	468b      	mov	fp, r1
 8017ee8:	1f2f      	subs	r7, r5, #4
 8017eea:	2800      	cmp	r0, #0
 8017eec:	f000 814e 	beq.w	801818c <uxr_prepare_reliable_buffer_to_write+0x2d8>
 8017ef0:	f04f 0e00 	mov.w	lr, #0
 8017ef4:	46f2      	mov	sl, lr
 8017ef6:	4672      	mov	r2, lr
 8017ef8:	fbb2 f3f0 	udiv	r3, r2, r0
 8017efc:	fb00 2313 	mls	r3, r0, r3, r2
 8017f00:	b29b      	uxth	r3, r3
 8017f02:	fb05 c303 	mla	r3, r5, r3, ip
 8017f06:	f10e 0e01 	add.w	lr, lr, #1
 8017f0a:	681b      	ldr	r3, [r3, #0]
 8017f0c:	454b      	cmp	r3, r9
 8017f0e:	bf08      	it	eq
 8017f10:	f10a 0a01 	addeq.w	sl, sl, #1
 8017f14:	fa1f f28e 	uxth.w	r2, lr
 8017f18:	bf08      	it	eq
 8017f1a:	fa1f fa8a 	uxtheq.w	sl, sl
 8017f1e:	4282      	cmp	r2, r0
 8017f20:	d3ea      	bcc.n	8017ef8 <uxr_prepare_reliable_buffer_to_write+0x44>
 8017f22:	4640      	mov	r0, r8
 8017f24:	2104      	movs	r1, #4
 8017f26:	f8cd a014 	str.w	sl, [sp, #20]
 8017f2a:	f7f8 fa2b 	bl	8010384 <ucdr_alignment>
 8017f2e:	4480      	add	r8, r0
 8017f30:	eb08 020b 	add.w	r2, r8, fp
 8017f34:	42ba      	cmp	r2, r7
 8017f36:	f240 80cf 	bls.w	80180d8 <uxr_prepare_reliable_buffer_to_write+0x224>
 8017f3a:	7b22      	ldrb	r2, [r4, #12]
 8017f3c:	445a      	add	r2, fp
 8017f3e:	42ba      	cmp	r2, r7
 8017f40:	f240 80b7 	bls.w	80180b2 <uxr_prepare_reliable_buffer_to_write+0x1fe>
 8017f44:	f5c9 437f 	rsb	r3, r9, #65280	@ 0xff00
 8017f48:	33fc      	adds	r3, #252	@ 0xfc
 8017f4a:	b2ba      	uxth	r2, r7
 8017f4c:	4413      	add	r3, r2
 8017f4e:	b29b      	uxth	r3, r3
 8017f50:	fb0a f903 	mul.w	r9, sl, r3
 8017f54:	45d9      	cmp	r9, fp
 8017f56:	9305      	str	r3, [sp, #20]
 8017f58:	9306      	str	r3, [sp, #24]
 8017f5a:	f0c0 80b9 	bcc.w	80180d0 <uxr_prepare_reliable_buffer_to_write+0x21c>
 8017f5e:	f108 0304 	add.w	r3, r8, #4
 8017f62:	42bb      	cmp	r3, r7
 8017f64:	f080 80dd 	bcs.w	8018122 <uxr_prepare_reliable_buffer_to_write+0x26e>
 8017f68:	f1a2 0904 	sub.w	r9, r2, #4
 8017f6c:	eba9 0908 	sub.w	r9, r9, r8
 8017f70:	9b05      	ldr	r3, [sp, #20]
 8017f72:	fa1f f989 	uxth.w	r9, r9
 8017f76:	ebab 0b09 	sub.w	fp, fp, r9
 8017f7a:	fbbb f2f3 	udiv	r2, fp, r3
 8017f7e:	fb03 b312 	mls	r3, r3, r2, fp
 8017f82:	2b00      	cmp	r3, #0
 8017f84:	f000 80ca 	beq.w	801811c <uxr_prepare_reliable_buffer_to_write+0x268>
 8017f88:	3201      	adds	r2, #1
 8017f8a:	b292      	uxth	r2, r2
 8017f8c:	4611      	mov	r1, r2
 8017f8e:	9306      	str	r3, [sp, #24]
 8017f90:	4551      	cmp	r1, sl
 8017f92:	f200 809d 	bhi.w	80180d0 <uxr_prepare_reliable_buffer_to_write+0x21c>
 8017f96:	f10d 0b20 	add.w	fp, sp, #32
 8017f9a:	2900      	cmp	r1, #0
 8017f9c:	d042      	beq.n	8018024 <uxr_prepare_reliable_buffer_to_write+0x170>
 8017f9e:	f8cd 801c 	str.w	r8, [sp, #28]
 8017fa2:	f04f 0a00 	mov.w	sl, #0
 8017fa6:	f8dd 8014 	ldr.w	r8, [sp, #20]
 8017faa:	9505      	str	r5, [sp, #20]
 8017fac:	f10d 0b20 	add.w	fp, sp, #32
 8017fb0:	460d      	mov	r5, r1
 8017fb2:	e000      	b.n	8017fb6 <uxr_prepare_reliable_buffer_to_write+0x102>
 8017fb4:	46c1      	mov	r9, r8
 8017fb6:	8920      	ldrh	r0, [r4, #8]
 8017fb8:	fbb6 f1f0 	udiv	r1, r6, r0
 8017fbc:	e9d4 3200 	ldrd	r3, r2, [r4]
 8017fc0:	fb00 6111 	mls	r1, r0, r1, r6
 8017fc4:	b289      	uxth	r1, r1
 8017fc6:	fbb2 f2f0 	udiv	r2, r2, r0
 8017fca:	fb01 f102 	mul.w	r1, r1, r2
 8017fce:	3104      	adds	r1, #4
 8017fd0:	4419      	add	r1, r3
 8017fd2:	463a      	mov	r2, r7
 8017fd4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8017fd8:	9300      	str	r3, [sp, #0]
 8017fda:	4658      	mov	r0, fp
 8017fdc:	2300      	movs	r3, #0
 8017fde:	f7f8 f9bb 	bl	8010358 <ucdr_init_buffer_origin_offset>
 8017fe2:	464a      	mov	r2, r9
 8017fe4:	2300      	movs	r3, #0
 8017fe6:	210d      	movs	r1, #13
 8017fe8:	4658      	mov	r0, fp
 8017fea:	f7f9 fecb 	bl	8011d84 <uxr_buffer_submessage_header>
 8017fee:	8920      	ldrh	r0, [r4, #8]
 8017ff0:	fbb6 f3f0 	udiv	r3, r6, r0
 8017ff4:	e9d4 2100 	ldrd	r2, r1, [r4]
 8017ff8:	fb00 6313 	mls	r3, r0, r3, r6
 8017ffc:	b29b      	uxth	r3, r3
 8017ffe:	fbb1 f1f0 	udiv	r1, r1, r0
 8018002:	fb03 f301 	mul.w	r3, r3, r1
 8018006:	4630      	mov	r0, r6
 8018008:	50d7      	str	r7, [r2, r3]
 801800a:	2101      	movs	r1, #1
 801800c:	f000 fae8 	bl	80185e0 <uxr_seq_num_add>
 8018010:	f10a 0a01 	add.w	sl, sl, #1
 8018014:	fa1f f38a 	uxth.w	r3, sl
 8018018:	429d      	cmp	r5, r3
 801801a:	4606      	mov	r6, r0
 801801c:	d8ca      	bhi.n	8017fb4 <uxr_prepare_reliable_buffer_to_write+0x100>
 801801e:	f8dd 801c 	ldr.w	r8, [sp, #28]
 8018022:	9d05      	ldr	r5, [sp, #20]
 8018024:	8921      	ldrh	r1, [r4, #8]
 8018026:	fbb6 f3f1 	udiv	r3, r6, r1
 801802a:	fb01 6313 	mls	r3, r1, r3, r6
 801802e:	b29b      	uxth	r3, r3
 8018030:	6862      	ldr	r2, [r4, #4]
 8018032:	fbb2 f2f1 	udiv	r2, r2, r1
 8018036:	6821      	ldr	r1, [r4, #0]
 8018038:	fb03 f302 	mul.w	r3, r3, r2
 801803c:	3304      	adds	r3, #4
 801803e:	4419      	add	r1, r3
 8018040:	463a      	mov	r2, r7
 8018042:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8018046:	9300      	str	r3, [sp, #0]
 8018048:	4658      	mov	r0, fp
 801804a:	2300      	movs	r3, #0
 801804c:	f7f8 f984 	bl	8010358 <ucdr_init_buffer_origin_offset>
 8018050:	f8dd 9018 	ldr.w	r9, [sp, #24]
 8018054:	4658      	mov	r0, fp
 8018056:	fa1f f289 	uxth.w	r2, r9
 801805a:	2302      	movs	r3, #2
 801805c:	210d      	movs	r1, #13
 801805e:	f7f9 fe91 	bl	8011d84 <uxr_buffer_submessage_header>
 8018062:	8921      	ldrh	r1, [r4, #8]
 8018064:	7b27      	ldrb	r7, [r4, #12]
 8018066:	fbb6 f0f1 	udiv	r0, r6, r1
 801806a:	e9d4 3200 	ldrd	r3, r2, [r4]
 801806e:	fb01 6010 	mls	r0, r1, r0, r6
 8018072:	b280      	uxth	r0, r0
 8018074:	fbb2 f2f1 	udiv	r2, r2, r1
 8018078:	3704      	adds	r7, #4
 801807a:	fb00 f002 	mul.w	r0, r0, r2
 801807e:	f1a5 0208 	sub.w	r2, r5, #8
 8018082:	464d      	mov	r5, r9
 8018084:	443d      	add	r5, r7
 8018086:	9f03      	ldr	r7, [sp, #12]
 8018088:	501d      	str	r5, [r3, r0]
 801808a:	f108 0104 	add.w	r1, r8, #4
 801808e:	9d04      	ldr	r5, [sp, #16]
 8018090:	440f      	add	r7, r1
 8018092:	eba2 0208 	sub.w	r2, r2, r8
 8018096:	4639      	mov	r1, r7
 8018098:	4628      	mov	r0, r5
 801809a:	f7f8 f96f 	bl	801037c <ucdr_init_buffer>
 801809e:	4628      	mov	r0, r5
 80180a0:	493b      	ldr	r1, [pc, #236]	@ (8018190 <uxr_prepare_reliable_buffer_to_write+0x2dc>)
 80180a2:	4622      	mov	r2, r4
 80180a4:	f7f8 f940 	bl	8010328 <ucdr_set_on_full_buffer_callback>
 80180a8:	2001      	movs	r0, #1
 80180aa:	81e6      	strh	r6, [r4, #14]
 80180ac:	b011      	add	sp, #68	@ 0x44
 80180ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80180b2:	2101      	movs	r1, #1
 80180b4:	89e0      	ldrh	r0, [r4, #14]
 80180b6:	f000 fa93 	bl	80185e0 <uxr_seq_num_add>
 80180ba:	8921      	ldrh	r1, [r4, #8]
 80180bc:	4605      	mov	r5, r0
 80180be:	8a60      	ldrh	r0, [r4, #18]
 80180c0:	f000 fa8e 	bl	80185e0 <uxr_seq_num_add>
 80180c4:	4601      	mov	r1, r0
 80180c6:	4628      	mov	r0, r5
 80180c8:	f000 fa92 	bl	80185f0 <uxr_seq_num_cmp>
 80180cc:	2800      	cmp	r0, #0
 80180ce:	dd42      	ble.n	8018156 <uxr_prepare_reliable_buffer_to_write+0x2a2>
 80180d0:	2000      	movs	r0, #0
 80180d2:	b011      	add	sp, #68	@ 0x44
 80180d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80180d8:	8921      	ldrh	r1, [r4, #8]
 80180da:	8a60      	ldrh	r0, [r4, #18]
 80180dc:	9205      	str	r2, [sp, #20]
 80180de:	f000 fa7f 	bl	80185e0 <uxr_seq_num_add>
 80180e2:	4601      	mov	r1, r0
 80180e4:	4630      	mov	r0, r6
 80180e6:	f000 fa83 	bl	80185f0 <uxr_seq_num_cmp>
 80180ea:	2800      	cmp	r0, #0
 80180ec:	9a05      	ldr	r2, [sp, #20]
 80180ee:	dcef      	bgt.n	80180d0 <uxr_prepare_reliable_buffer_to_write+0x21c>
 80180f0:	8920      	ldrh	r0, [r4, #8]
 80180f2:	fbb6 f3f0 	udiv	r3, r6, r0
 80180f6:	e9d4 4100 	ldrd	r4, r1, [r4]
 80180fa:	fb00 6313 	mls	r3, r0, r3, r6
 80180fe:	b29b      	uxth	r3, r3
 8018100:	fbb1 f1f0 	udiv	r1, r1, r0
 8018104:	fb03 f301 	mul.w	r3, r3, r1
 8018108:	e9dd 1003 	ldrd	r1, r0, [sp, #12]
 801810c:	50e2      	str	r2, [r4, r3]
 801810e:	f8cd 8000 	str.w	r8, [sp]
 8018112:	2300      	movs	r3, #0
 8018114:	f7f8 f920 	bl	8010358 <ucdr_init_buffer_origin_offset>
 8018118:	2001      	movs	r0, #1
 801811a:	e7da      	b.n	80180d2 <uxr_prepare_reliable_buffer_to_write+0x21e>
 801811c:	b293      	uxth	r3, r2
 801811e:	4619      	mov	r1, r3
 8018120:	e736      	b.n	8017f90 <uxr_prepare_reliable_buffer_to_write+0xdc>
 8018122:	4630      	mov	r0, r6
 8018124:	2101      	movs	r1, #1
 8018126:	9207      	str	r2, [sp, #28]
 8018128:	f000 fa5a 	bl	80185e0 <uxr_seq_num_add>
 801812c:	f8b4 c008 	ldrh.w	ip, [r4, #8]
 8018130:	fbb0 f1fc 	udiv	r1, r0, ip
 8018134:	fb0c 0111 	mls	r1, ip, r1, r0
 8018138:	b289      	uxth	r1, r1
 801813a:	6863      	ldr	r3, [r4, #4]
 801813c:	fbb3 f3fc 	udiv	r3, r3, ip
 8018140:	fb01 f103 	mul.w	r1, r1, r3
 8018144:	6823      	ldr	r3, [r4, #0]
 8018146:	9a07      	ldr	r2, [sp, #28]
 8018148:	3104      	adds	r1, #4
 801814a:	440b      	add	r3, r1
 801814c:	4606      	mov	r6, r0
 801814e:	f853 8c04 	ldr.w	r8, [r3, #-4]
 8018152:	9303      	str	r3, [sp, #12]
 8018154:	e708      	b.n	8017f68 <uxr_prepare_reliable_buffer_to_write+0xb4>
 8018156:	8920      	ldrh	r0, [r4, #8]
 8018158:	fbb5 f3f0 	udiv	r3, r5, r0
 801815c:	fb00 5313 	mls	r3, r0, r3, r5
 8018160:	b29b      	uxth	r3, r3
 8018162:	6862      	ldr	r2, [r4, #4]
 8018164:	6821      	ldr	r1, [r4, #0]
 8018166:	fbb2 f0f0 	udiv	r0, r2, r0
 801816a:	fb03 f300 	mul.w	r3, r3, r0
 801816e:	7b22      	ldrb	r2, [r4, #12]
 8018170:	9804      	ldr	r0, [sp, #16]
 8018172:	3304      	adds	r3, #4
 8018174:	4419      	add	r1, r3
 8018176:	445a      	add	r2, fp
 8018178:	f841 2c04 	str.w	r2, [r1, #-4]
 801817c:	7b23      	ldrb	r3, [r4, #12]
 801817e:	9300      	str	r3, [sp, #0]
 8018180:	2300      	movs	r3, #0
 8018182:	f7f8 f8e9 	bl	8010358 <ucdr_init_buffer_origin_offset>
 8018186:	81e5      	strh	r5, [r4, #14]
 8018188:	2001      	movs	r0, #1
 801818a:	e7a2      	b.n	80180d2 <uxr_prepare_reliable_buffer_to_write+0x21e>
 801818c:	4682      	mov	sl, r0
 801818e:	e6c8      	b.n	8017f22 <uxr_prepare_reliable_buffer_to_write+0x6e>
 8018190:	08017dad 	.word	0x08017dad

08018194 <uxr_prepare_next_reliable_buffer_to_send>:
 8018194:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018198:	4605      	mov	r5, r0
 801819a:	4688      	mov	r8, r1
 801819c:	8a00      	ldrh	r0, [r0, #16]
 801819e:	2101      	movs	r1, #1
 80181a0:	4617      	mov	r7, r2
 80181a2:	461e      	mov	r6, r3
 80181a4:	f000 fa1c 	bl	80185e0 <uxr_seq_num_add>
 80181a8:	8030      	strh	r0, [r6, #0]
 80181aa:	892a      	ldrh	r2, [r5, #8]
 80181ac:	fbb0 f3f2 	udiv	r3, r0, r2
 80181b0:	fb02 0413 	mls	r4, r2, r3, r0
 80181b4:	b2a4      	uxth	r4, r4
 80181b6:	686b      	ldr	r3, [r5, #4]
 80181b8:	fbb3 f2f2 	udiv	r2, r3, r2
 80181bc:	682b      	ldr	r3, [r5, #0]
 80181be:	89e9      	ldrh	r1, [r5, #14]
 80181c0:	fb04 f402 	mul.w	r4, r4, r2
 80181c4:	3404      	adds	r4, #4
 80181c6:	4423      	add	r3, r4
 80181c8:	f8c8 3000 	str.w	r3, [r8]
 80181cc:	682b      	ldr	r3, [r5, #0]
 80181ce:	441c      	add	r4, r3
 80181d0:	f854 3c04 	ldr.w	r3, [r4, #-4]
 80181d4:	603b      	str	r3, [r7, #0]
 80181d6:	f000 fa0b 	bl	80185f0 <uxr_seq_num_cmp>
 80181da:	2800      	cmp	r0, #0
 80181dc:	dd02      	ble.n	80181e4 <uxr_prepare_next_reliable_buffer_to_send+0x50>
 80181de:	2000      	movs	r0, #0
 80181e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80181e4:	683a      	ldr	r2, [r7, #0]
 80181e6:	7b2b      	ldrb	r3, [r5, #12]
 80181e8:	429a      	cmp	r2, r3
 80181ea:	d9f8      	bls.n	80181de <uxr_prepare_next_reliable_buffer_to_send+0x4a>
 80181ec:	8a69      	ldrh	r1, [r5, #18]
 80181ee:	8a28      	ldrh	r0, [r5, #16]
 80181f0:	f000 f9fa 	bl	80185e8 <uxr_seq_num_sub>
 80181f4:	892b      	ldrh	r3, [r5, #8]
 80181f6:	4283      	cmp	r3, r0
 80181f8:	d0f1      	beq.n	80181de <uxr_prepare_next_reliable_buffer_to_send+0x4a>
 80181fa:	8830      	ldrh	r0, [r6, #0]
 80181fc:	89eb      	ldrh	r3, [r5, #14]
 80181fe:	8228      	strh	r0, [r5, #16]
 8018200:	4298      	cmp	r0, r3
 8018202:	d002      	beq.n	801820a <uxr_prepare_next_reliable_buffer_to_send+0x76>
 8018204:	2001      	movs	r0, #1
 8018206:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801820a:	2101      	movs	r1, #1
 801820c:	f000 f9e8 	bl	80185e0 <uxr_seq_num_add>
 8018210:	81e8      	strh	r0, [r5, #14]
 8018212:	2001      	movs	r0, #1
 8018214:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08018218 <uxr_update_output_stream_heartbeat_timestamp>:
 8018218:	b5d0      	push	{r4, r6, r7, lr}
 801821a:	8a01      	ldrh	r1, [r0, #16]
 801821c:	4604      	mov	r4, r0
 801821e:	8a40      	ldrh	r0, [r0, #18]
 8018220:	4616      	mov	r6, r2
 8018222:	461f      	mov	r7, r3
 8018224:	f000 f9e4 	bl	80185f0 <uxr_seq_num_cmp>
 8018228:	2800      	cmp	r0, #0
 801822a:	db07      	blt.n	801823c <uxr_update_output_stream_heartbeat_timestamp+0x24>
 801822c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8018230:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 8018234:	e9c4 2306 	strd	r2, r3, [r4, #24]
 8018238:	2000      	movs	r0, #0
 801823a:	bdd0      	pop	{r4, r6, r7, pc}
 801823c:	f894 0020 	ldrb.w	r0, [r4, #32]
 8018240:	b948      	cbnz	r0, 8018256 <uxr_update_output_stream_heartbeat_timestamp+0x3e>
 8018242:	2301      	movs	r3, #1
 8018244:	f884 3020 	strb.w	r3, [r4, #32]
 8018248:	f116 0364 	adds.w	r3, r6, #100	@ 0x64
 801824c:	f147 0200 	adc.w	r2, r7, #0
 8018250:	e9c4 3206 	strd	r3, r2, [r4, #24]
 8018254:	bdd0      	pop	{r4, r6, r7, pc}
 8018256:	e9d4 2306 	ldrd	r2, r3, [r4, #24]
 801825a:	4296      	cmp	r6, r2
 801825c:	eb77 0303 	sbcs.w	r3, r7, r3
 8018260:	bfa5      	ittet	ge
 8018262:	3001      	addge	r0, #1
 8018264:	f884 0020 	strbge.w	r0, [r4, #32]
 8018268:	2000      	movlt	r0, #0
 801826a:	2001      	movge	r0, #1
 801826c:	e7ec      	b.n	8018248 <uxr_update_output_stream_heartbeat_timestamp+0x30>
 801826e:	bf00      	nop

08018270 <uxr_begin_output_nack_buffer_it>:
 8018270:	8a40      	ldrh	r0, [r0, #18]
 8018272:	4770      	bx	lr

08018274 <uxr_next_reliable_nack_buffer_to_send>:
 8018274:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8018278:	f890 9021 	ldrb.w	r9, [r0, #33]	@ 0x21
 801827c:	f1b9 0f00 	cmp.w	r9, #0
 8018280:	d011      	beq.n	80182a6 <uxr_next_reliable_nack_buffer_to_send+0x32>
 8018282:	4605      	mov	r5, r0
 8018284:	8818      	ldrh	r0, [r3, #0]
 8018286:	460f      	mov	r7, r1
 8018288:	4690      	mov	r8, r2
 801828a:	461e      	mov	r6, r3
 801828c:	2101      	movs	r1, #1
 801828e:	f000 f9a7 	bl	80185e0 <uxr_seq_num_add>
 8018292:	8030      	strh	r0, [r6, #0]
 8018294:	8a29      	ldrh	r1, [r5, #16]
 8018296:	f000 f9ab 	bl	80185f0 <uxr_seq_num_cmp>
 801829a:	2800      	cmp	r0, #0
 801829c:	dd06      	ble.n	80182ac <uxr_next_reliable_nack_buffer_to_send+0x38>
 801829e:	f04f 0900 	mov.w	r9, #0
 80182a2:	f885 9021 	strb.w	r9, [r5, #33]	@ 0x21
 80182a6:	4648      	mov	r0, r9
 80182a8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80182ac:	892a      	ldrh	r2, [r5, #8]
 80182ae:	8830      	ldrh	r0, [r6, #0]
 80182b0:	fbb0 f4f2 	udiv	r4, r0, r2
 80182b4:	fb02 0414 	mls	r4, r2, r4, r0
 80182b8:	b2a4      	uxth	r4, r4
 80182ba:	686b      	ldr	r3, [r5, #4]
 80182bc:	fbb3 f2f2 	udiv	r2, r3, r2
 80182c0:	682b      	ldr	r3, [r5, #0]
 80182c2:	fb04 f402 	mul.w	r4, r4, r2
 80182c6:	3404      	adds	r4, #4
 80182c8:	4423      	add	r3, r4
 80182ca:	603b      	str	r3, [r7, #0]
 80182cc:	682b      	ldr	r3, [r5, #0]
 80182ce:	441c      	add	r4, r3
 80182d0:	f854 3c04 	ldr.w	r3, [r4, #-4]
 80182d4:	f8c8 3000 	str.w	r3, [r8]
 80182d8:	7b2a      	ldrb	r2, [r5, #12]
 80182da:	429a      	cmp	r2, r3
 80182dc:	d0d6      	beq.n	801828c <uxr_next_reliable_nack_buffer_to_send+0x18>
 80182de:	4648      	mov	r0, r9
 80182e0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

080182e4 <uxr_process_acknack>:
 80182e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80182e6:	4604      	mov	r4, r0
 80182e8:	460e      	mov	r6, r1
 80182ea:	4610      	mov	r0, r2
 80182ec:	2101      	movs	r1, #1
 80182ee:	f000 f97b 	bl	80185e8 <uxr_seq_num_sub>
 80182f2:	8a61      	ldrh	r1, [r4, #18]
 80182f4:	f000 f978 	bl	80185e8 <uxr_seq_num_sub>
 80182f8:	b1c0      	cbz	r0, 801832c <uxr_process_acknack+0x48>
 80182fa:	4605      	mov	r5, r0
 80182fc:	2700      	movs	r7, #0
 80182fe:	2101      	movs	r1, #1
 8018300:	8a60      	ldrh	r0, [r4, #18]
 8018302:	f000 f96d 	bl	80185e0 <uxr_seq_num_add>
 8018306:	f8b4 c008 	ldrh.w	ip, [r4, #8]
 801830a:	fbb0 f3fc 	udiv	r3, r0, ip
 801830e:	e9d4 2100 	ldrd	r2, r1, [r4]
 8018312:	fb0c 0313 	mls	r3, ip, r3, r0
 8018316:	b29b      	uxth	r3, r3
 8018318:	fbb1 f1fc 	udiv	r1, r1, ip
 801831c:	3701      	adds	r7, #1
 801831e:	fb03 f301 	mul.w	r3, r3, r1
 8018322:	42bd      	cmp	r5, r7
 8018324:	7b21      	ldrb	r1, [r4, #12]
 8018326:	8260      	strh	r0, [r4, #18]
 8018328:	50d1      	str	r1, [r2, r3]
 801832a:	d1e8      	bne.n	80182fe <uxr_process_acknack+0x1a>
 801832c:	3e00      	subs	r6, #0
 801832e:	f04f 0300 	mov.w	r3, #0
 8018332:	bf18      	it	ne
 8018334:	2601      	movne	r6, #1
 8018336:	f884 3020 	strb.w	r3, [r4, #32]
 801833a:	f884 6021 	strb.w	r6, [r4, #33]	@ 0x21
 801833e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08018340 <uxr_is_output_up_to_date>:
 8018340:	8a01      	ldrh	r1, [r0, #16]
 8018342:	8a40      	ldrh	r0, [r0, #18]
 8018344:	b508      	push	{r3, lr}
 8018346:	f000 f953 	bl	80185f0 <uxr_seq_num_cmp>
 801834a:	fab0 f080 	clz	r0, r0
 801834e:	0940      	lsrs	r0, r0, #5
 8018350:	bd08      	pop	{r3, pc}
 8018352:	bf00      	nop

08018354 <get_available_free_slots>:
 8018354:	8901      	ldrh	r1, [r0, #8]
 8018356:	b1d9      	cbz	r1, 8018390 <get_available_free_slots+0x3c>
 8018358:	b4f0      	push	{r4, r5, r6, r7}
 801835a:	2400      	movs	r4, #0
 801835c:	6845      	ldr	r5, [r0, #4]
 801835e:	6807      	ldr	r7, [r0, #0]
 8018360:	7b06      	ldrb	r6, [r0, #12]
 8018362:	fbb5 f5f1 	udiv	r5, r5, r1
 8018366:	4620      	mov	r0, r4
 8018368:	4622      	mov	r2, r4
 801836a:	fbb2 f3f1 	udiv	r3, r2, r1
 801836e:	fb01 2313 	mls	r3, r1, r3, r2
 8018372:	b29b      	uxth	r3, r3
 8018374:	fb05 7303 	mla	r3, r5, r3, r7
 8018378:	3401      	adds	r4, #1
 801837a:	681b      	ldr	r3, [r3, #0]
 801837c:	429e      	cmp	r6, r3
 801837e:	bf08      	it	eq
 8018380:	3001      	addeq	r0, #1
 8018382:	b2a2      	uxth	r2, r4
 8018384:	bf08      	it	eq
 8018386:	b280      	uxtheq	r0, r0
 8018388:	428a      	cmp	r2, r1
 801838a:	d3ee      	bcc.n	801836a <get_available_free_slots+0x16>
 801838c:	bcf0      	pop	{r4, r5, r6, r7}
 801838e:	4770      	bx	lr
 8018390:	4608      	mov	r0, r1
 8018392:	4770      	bx	lr

08018394 <uxr_buffer_request_data>:
 8018394:	b530      	push	{r4, r5, lr}
 8018396:	b095      	sub	sp, #84	@ 0x54
 8018398:	4604      	mov	r4, r0
 801839a:	9d18      	ldr	r5, [sp, #96]	@ 0x60
 801839c:	9105      	str	r1, [sp, #20]
 801839e:	2d00      	cmp	r5, #0
 80183a0:	bf14      	ite	ne
 80183a2:	2101      	movne	r1, #1
 80183a4:	2100      	moveq	r1, #0
 80183a6:	9204      	str	r2, [sp, #16]
 80183a8:	f04f 0200 	mov.w	r2, #0
 80183ac:	9303      	str	r3, [sp, #12]
 80183ae:	f88d 301c 	strb.w	r3, [sp, #28]
 80183b2:	f88d 1024 	strb.w	r1, [sp, #36]	@ 0x24
 80183b6:	f88d 201d 	strb.w	r2, [sp, #29]
 80183ba:	f88d 201e 	strb.w	r2, [sp, #30]
 80183be:	d021      	beq.n	8018404 <uxr_buffer_request_data+0x70>
 80183c0:	686a      	ldr	r2, [r5, #4]
 80183c2:	682b      	ldr	r3, [r5, #0]
 80183c4:	f8cd 202a 	str.w	r2, [sp, #42]	@ 0x2a
 80183c8:	f8cd 3026 	str.w	r3, [sp, #38]	@ 0x26
 80183cc:	2210      	movs	r2, #16
 80183ce:	2000      	movs	r0, #0
 80183d0:	2108      	movs	r1, #8
 80183d2:	e9cd 1000 	strd	r1, r0, [sp]
 80183d6:	ab0c      	add	r3, sp, #48	@ 0x30
 80183d8:	9905      	ldr	r1, [sp, #20]
 80183da:	4620      	mov	r0, r4
 80183dc:	f7f9 fa2e 	bl	801183c <uxr_prepare_stream_to_write_submessage>
 80183e0:	b918      	cbnz	r0, 80183ea <uxr_buffer_request_data+0x56>
 80183e2:	4604      	mov	r4, r0
 80183e4:	4620      	mov	r0, r4
 80183e6:	b015      	add	sp, #84	@ 0x54
 80183e8:	bd30      	pop	{r4, r5, pc}
 80183ea:	9904      	ldr	r1, [sp, #16]
 80183ec:	aa06      	add	r2, sp, #24
 80183ee:	4620      	mov	r0, r4
 80183f0:	f7f9 fb5e 	bl	8011ab0 <uxr_init_base_object_request>
 80183f4:	a906      	add	r1, sp, #24
 80183f6:	4604      	mov	r4, r0
 80183f8:	a80c      	add	r0, sp, #48	@ 0x30
 80183fa:	f7fa fe43 	bl	8013084 <uxr_serialize_READ_DATA_Payload>
 80183fe:	4620      	mov	r0, r4
 8018400:	b015      	add	sp, #84	@ 0x54
 8018402:	bd30      	pop	{r4, r5, pc}
 8018404:	2208      	movs	r2, #8
 8018406:	e7e2      	b.n	80183ce <uxr_buffer_request_data+0x3a>

08018408 <uxr_buffer_cancel_data>:
 8018408:	b530      	push	{r4, r5, lr}
 801840a:	b095      	sub	sp, #84	@ 0x54
 801840c:	2400      	movs	r4, #0
 801840e:	2308      	movs	r3, #8
 8018410:	e9cd 4201 	strd	r4, r2, [sp, #4]
 8018414:	9300      	str	r3, [sp, #0]
 8018416:	9205      	str	r2, [sp, #20]
 8018418:	2501      	movs	r5, #1
 801841a:	ab0c      	add	r3, sp, #48	@ 0x30
 801841c:	2210      	movs	r2, #16
 801841e:	f8ad 401c 	strh.w	r4, [sp, #28]
 8018422:	f88d 401e 	strb.w	r4, [sp, #30]
 8018426:	f8cd 4026 	str.w	r4, [sp, #38]	@ 0x26
 801842a:	f8cd 402a 	str.w	r4, [sp, #42]	@ 0x2a
 801842e:	9103      	str	r1, [sp, #12]
 8018430:	4604      	mov	r4, r0
 8018432:	f88d 5024 	strb.w	r5, [sp, #36]	@ 0x24
 8018436:	f7f9 fa01 	bl	801183c <uxr_prepare_stream_to_write_submessage>
 801843a:	b918      	cbnz	r0, 8018444 <uxr_buffer_cancel_data+0x3c>
 801843c:	4604      	mov	r4, r0
 801843e:	4620      	mov	r0, r4
 8018440:	b015      	add	sp, #84	@ 0x54
 8018442:	bd30      	pop	{r4, r5, pc}
 8018444:	9905      	ldr	r1, [sp, #20]
 8018446:	aa06      	add	r2, sp, #24
 8018448:	4620      	mov	r0, r4
 801844a:	f7f9 fb31 	bl	8011ab0 <uxr_init_base_object_request>
 801844e:	a906      	add	r1, sp, #24
 8018450:	4604      	mov	r4, r0
 8018452:	a80c      	add	r0, sp, #48	@ 0x30
 8018454:	f7fa fe16 	bl	8013084 <uxr_serialize_READ_DATA_Payload>
 8018458:	4620      	mov	r0, r4
 801845a:	b015      	add	sp, #84	@ 0x54
 801845c:	bd30      	pop	{r4, r5, pc}
 801845e:	bf00      	nop

08018460 <read_submessage_format>:
 8018460:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8018464:	b095      	sub	sp, #84	@ 0x54
 8018466:	f8bd 9078 	ldrh.w	r9, [sp, #120]	@ 0x78
 801846a:	b113      	cbz	r3, 8018472 <read_submessage_format+0x12>
 801846c:	b015      	add	sp, #84	@ 0x54
 801846e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8018472:	460c      	mov	r4, r1
 8018474:	4616      	mov	r6, r2
 8018476:	e9d1 2101 	ldrd	r2, r1, [r1, #4]
 801847a:	461d      	mov	r5, r3
 801847c:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 801847e:	9304      	str	r3, [sp, #16]
 8018480:	1a52      	subs	r2, r2, r1
 8018482:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8018484:	9305      	str	r3, [sp, #20]
 8018486:	4607      	mov	r7, r0
 8018488:	a80c      	add	r0, sp, #48	@ 0x30
 801848a:	f89d 8076 	ldrb.w	r8, [sp, #118]	@ 0x76
 801848e:	f7f7 ff75 	bl	801037c <ucdr_init_buffer>
 8018492:	e9d4 1206 	ldrd	r1, r2, [r4, #24]
 8018496:	a80c      	add	r0, sp, #48	@ 0x30
 8018498:	f7f7 ff46 	bl	8010328 <ucdr_set_on_full_buffer_callback>
 801849c:	69e3      	ldr	r3, [r4, #28]
 801849e:	b193      	cbz	r3, 80184c6 <read_submessage_format+0x66>
 80184a0:	f1b8 0f07 	cmp.w	r8, #7
 80184a4:	751d      	strb	r5, [r3, #20]
 80184a6:	d03e      	beq.n	8018526 <read_submessage_format+0xc6>
 80184a8:	f1b8 0f08 	cmp.w	r8, #8
 80184ac:	d02c      	beq.n	8018508 <read_submessage_format+0xa8>
 80184ae:	f1b8 0f06 	cmp.w	r8, #6
 80184b2:	d011      	beq.n	80184d8 <read_submessage_format+0x78>
 80184b4:	2201      	movs	r2, #1
 80184b6:	751a      	strb	r2, [r3, #20]
 80184b8:	4631      	mov	r1, r6
 80184ba:	4620      	mov	r0, r4
 80184bc:	f7f7 ffae 	bl	801041c <ucdr_advance_buffer>
 80184c0:	b015      	add	sp, #84	@ 0x54
 80184c2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80184c6:	f1b8 0f07 	cmp.w	r8, #7
 80184ca:	d02c      	beq.n	8018526 <read_submessage_format+0xc6>
 80184cc:	f1b8 0f08 	cmp.w	r8, #8
 80184d0:	d01a      	beq.n	8018508 <read_submessage_format+0xa8>
 80184d2:	f1b8 0f06 	cmp.w	r8, #6
 80184d6:	d1ef      	bne.n	80184b8 <read_submessage_format+0x58>
 80184d8:	f8d7 5088 	ldr.w	r5, [r7, #136]	@ 0x88
 80184dc:	b18d      	cbz	r5, 8018502 <read_submessage_format+0xa2>
 80184de:	2306      	movs	r3, #6
 80184e0:	f88d 3016 	strb.w	r3, [sp, #22]
 80184e4:	aa0c      	add	r2, sp, #48	@ 0x30
 80184e6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80184ea:	9302      	str	r3, [sp, #8]
 80184ec:	9200      	str	r2, [sp, #0]
 80184ee:	9b04      	ldr	r3, [sp, #16]
 80184f0:	9905      	ldr	r1, [sp, #20]
 80184f2:	9601      	str	r6, [sp, #4]
 80184f4:	464a      	mov	r2, r9
 80184f6:	4638      	mov	r0, r7
 80184f8:	47a8      	blx	r5
 80184fa:	2301      	movs	r3, #1
 80184fc:	f887 30b4 	strb.w	r3, [r7, #180]	@ 0xb4
 8018500:	69e3      	ldr	r3, [r4, #28]
 8018502:	2b00      	cmp	r3, #0
 8018504:	d1d6      	bne.n	80184b4 <read_submessage_format+0x54>
 8018506:	e7d7      	b.n	80184b8 <read_submessage_format+0x58>
 8018508:	f8d7 20a4 	ldr.w	r2, [r7, #164]	@ 0xa4
 801850c:	2a00      	cmp	r2, #0
 801850e:	d0f8      	beq.n	8018502 <read_submessage_format+0xa2>
 8018510:	a906      	add	r1, sp, #24
 8018512:	a80c      	add	r0, sp, #48	@ 0x30
 8018514:	9d10      	ldr	r5, [sp, #64]	@ 0x40
 8018516:	f7fa fe7b 	bl	8013210 <uxr_deserialize_SampleIdentity>
 801851a:	2800      	cmp	r0, #0
 801851c:	d13c      	bne.n	8018598 <read_submessage_format+0x138>
 801851e:	69e3      	ldr	r3, [r4, #28]
 8018520:	2b00      	cmp	r3, #0
 8018522:	d1c7      	bne.n	80184b4 <read_submessage_format+0x54>
 8018524:	e7c8      	b.n	80184b8 <read_submessage_format+0x58>
 8018526:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 801852a:	b132      	cbz	r2, 801853a <read_submessage_format+0xda>
 801852c:	a906      	add	r1, sp, #24
 801852e:	a80c      	add	r0, sp, #48	@ 0x30
 8018530:	9d10      	ldr	r5, [sp, #64]	@ 0x40
 8018532:	f7fa fb2b 	bl	8012b8c <uxr_deserialize_BaseObjectRequest>
 8018536:	b930      	cbnz	r0, 8018546 <read_submessage_format+0xe6>
 8018538:	69e3      	ldr	r3, [r4, #28]
 801853a:	68a2      	ldr	r2, [r4, #8]
 801853c:	4432      	add	r2, r6
 801853e:	60a2      	str	r2, [r4, #8]
 8018540:	2b00      	cmp	r3, #0
 8018542:	d1b7      	bne.n	80184b4 <read_submessage_format+0x54>
 8018544:	e7b8      	b.n	80184b8 <read_submessage_format+0x58>
 8018546:	e9dd 210d 	ldrd	r2, r1, [sp, #52]	@ 0x34
 801854a:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801854c:	1a52      	subs	r2, r2, r1
 801854e:	a80c      	add	r0, sp, #48	@ 0x30
 8018550:	1aed      	subs	r5, r5, r3
 8018552:	f7f7 ff13 	bl	801037c <ucdr_init_buffer>
 8018556:	e9d4 1206 	ldrd	r1, r2, [r4, #24]
 801855a:	a80c      	add	r0, sp, #48	@ 0x30
 801855c:	f7f7 fee4 	bl	8010328 <ucdr_set_on_full_buffer_callback>
 8018560:	4435      	add	r5, r6
 8018562:	f89d 1018 	ldrb.w	r1, [sp, #24]
 8018566:	f89d 3019 	ldrb.w	r3, [sp, #25]
 801856a:	f8d7 00b0 	ldr.w	r0, [r7, #176]	@ 0xb0
 801856e:	9002      	str	r0, [sp, #8]
 8018570:	2207      	movs	r2, #7
 8018572:	f88d 2016 	strb.w	r2, [sp, #22]
 8018576:	b2ad      	uxth	r5, r5
 8018578:	aa0c      	add	r2, sp, #48	@ 0x30
 801857a:	9200      	str	r2, [sp, #0]
 801857c:	9501      	str	r5, [sp, #4]
 801857e:	eb03 2301 	add.w	r3, r3, r1, lsl #8
 8018582:	b29b      	uxth	r3, r3
 8018584:	9905      	ldr	r1, [sp, #20]
 8018586:	f8d7 50ac 	ldr.w	r5, [r7, #172]	@ 0xac
 801858a:	464a      	mov	r2, r9
 801858c:	4638      	mov	r0, r7
 801858e:	47a8      	blx	r5
 8018590:	2301      	movs	r3, #1
 8018592:	f887 30b4 	strb.w	r3, [r7, #180]	@ 0xb4
 8018596:	e7cf      	b.n	8018538 <read_submessage_format+0xd8>
 8018598:	e9dd 210d 	ldrd	r2, r1, [sp, #52]	@ 0x34
 801859c:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801859e:	1a52      	subs	r2, r2, r1
 80185a0:	a80c      	add	r0, sp, #48	@ 0x30
 80185a2:	1aed      	subs	r5, r5, r3
 80185a4:	f7f7 feea 	bl	801037c <ucdr_init_buffer>
 80185a8:	e9d4 1206 	ldrd	r1, r2, [r4, #24]
 80185ac:	a80c      	add	r0, sp, #48	@ 0x30
 80185ae:	f7f7 febb 	bl	8010328 <ucdr_set_on_full_buffer_callback>
 80185b2:	4435      	add	r5, r6
 80185b4:	2308      	movs	r3, #8
 80185b6:	f8d7 00a8 	ldr.w	r0, [r7, #168]	@ 0xa8
 80185ba:	f88d 3016 	strb.w	r3, [sp, #22]
 80185be:	b2ad      	uxth	r5, r5
 80185c0:	ab0c      	add	r3, sp, #48	@ 0x30
 80185c2:	9300      	str	r3, [sp, #0]
 80185c4:	9002      	str	r0, [sp, #8]
 80185c6:	9501      	str	r5, [sp, #4]
 80185c8:	ab06      	add	r3, sp, #24
 80185ca:	9905      	ldr	r1, [sp, #20]
 80185cc:	f8d7 50a4 	ldr.w	r5, [r7, #164]	@ 0xa4
 80185d0:	464a      	mov	r2, r9
 80185d2:	4638      	mov	r0, r7
 80185d4:	47a8      	blx	r5
 80185d6:	2301      	movs	r3, #1
 80185d8:	f887 30b4 	strb.w	r3, [r7, #180]	@ 0xb4
 80185dc:	e79f      	b.n	801851e <read_submessage_format+0xbe>
 80185de:	bf00      	nop

080185e0 <uxr_seq_num_add>:
 80185e0:	4408      	add	r0, r1
 80185e2:	b280      	uxth	r0, r0
 80185e4:	4770      	bx	lr
 80185e6:	bf00      	nop

080185e8 <uxr_seq_num_sub>:
 80185e8:	1a40      	subs	r0, r0, r1
 80185ea:	b280      	uxth	r0, r0
 80185ec:	4770      	bx	lr
 80185ee:	bf00      	nop

080185f0 <uxr_seq_num_cmp>:
 80185f0:	4288      	cmp	r0, r1
 80185f2:	d011      	beq.n	8018618 <uxr_seq_num_cmp+0x28>
 80185f4:	d309      	bcc.n	801860a <uxr_seq_num_cmp+0x1a>
 80185f6:	4288      	cmp	r0, r1
 80185f8:	d910      	bls.n	801861c <uxr_seq_num_cmp+0x2c>
 80185fa:	1a40      	subs	r0, r0, r1
 80185fc:	f5b0 4f00 	cmp.w	r0, #32768	@ 0x8000
 8018600:	bfd4      	ite	le
 8018602:	2001      	movle	r0, #1
 8018604:	f04f 30ff 	movgt.w	r0, #4294967295	@ 0xffffffff
 8018608:	4770      	bx	lr
 801860a:	1a0b      	subs	r3, r1, r0
 801860c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8018610:	daf1      	bge.n	80185f6 <uxr_seq_num_cmp+0x6>
 8018612:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8018616:	4770      	bx	lr
 8018618:	2000      	movs	r0, #0
 801861a:	4770      	bx	lr
 801861c:	2001      	movs	r0, #1
 801861e:	4770      	bx	lr

08018620 <uxr_init_framing_io>:
 8018620:	2300      	movs	r3, #0
 8018622:	7041      	strb	r1, [r0, #1]
 8018624:	7003      	strb	r3, [r0, #0]
 8018626:	8583      	strh	r3, [r0, #44]	@ 0x2c
 8018628:	4770      	bx	lr
 801862a:	bf00      	nop

0801862c <uxr_write_framed_msg>:
 801862c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018630:	7845      	ldrb	r5, [r0, #1]
 8018632:	b085      	sub	sp, #20
 8018634:	4604      	mov	r4, r0
 8018636:	f1a5 0c7d 	sub.w	ip, r5, #125	@ 0x7d
 801863a:	f04f 0e7e 	mov.w	lr, #126	@ 0x7e
 801863e:	f1bc 0f01 	cmp.w	ip, #1
 8018642:	f89d 003c 	ldrb.w	r0, [sp, #60]	@ 0x3c
 8018646:	f8dd 8040 	ldr.w	r8, [sp, #64]	@ 0x40
 801864a:	f884 e038 	strb.w	lr, [r4, #56]	@ 0x38
 801864e:	460e      	mov	r6, r1
 8018650:	4617      	mov	r7, r2
 8018652:	469b      	mov	fp, r3
 8018654:	f240 8116 	bls.w	8018884 <uxr_write_framed_msg+0x258>
 8018658:	f1a0 027d 	sub.w	r2, r0, #125	@ 0x7d
 801865c:	2302      	movs	r3, #2
 801865e:	2a01      	cmp	r2, #1
 8018660:	f884 5039 	strb.w	r5, [r4, #57]	@ 0x39
 8018664:	f884 3062 	strb.w	r3, [r4, #98]	@ 0x62
 8018668:	f240 8091 	bls.w	801878e <uxr_write_framed_msg+0x162>
 801866c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801866e:	f884 003a 	strb.w	r0, [r4, #58]	@ 0x3a
 8018672:	b2d9      	uxtb	r1, r3
 8018674:	f1a1 037d 	sub.w	r3, r1, #125	@ 0x7d
 8018678:	2203      	movs	r2, #3
 801867a:	2b01      	cmp	r3, #1
 801867c:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 8018680:	f240 809a 	bls.w	80187b8 <uxr_write_framed_msg+0x18c>
 8018684:	18a3      	adds	r3, r4, r2
 8018686:	3201      	adds	r2, #1
 8018688:	f883 1038 	strb.w	r1, [r3, #56]	@ 0x38
 801868c:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 8018690:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8018692:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8018696:	f1a3 017d 	sub.w	r1, r3, #125	@ 0x7d
 801869a:	2901      	cmp	r1, #1
 801869c:	eb04 0102 	add.w	r1, r4, r2
 80186a0:	f240 8101 	bls.w	80188a6 <uxr_write_framed_msg+0x27a>
 80186a4:	f881 3038 	strb.w	r3, [r1, #56]	@ 0x38
 80186a8:	3201      	adds	r2, #1
 80186aa:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80186ac:	b2d2      	uxtb	r2, r2
 80186ae:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 80186b2:	2b00      	cmp	r3, #0
 80186b4:	f000 8106 	beq.w	80188c4 <uxr_write_framed_msg+0x298>
 80186b8:	f04f 0a00 	mov.w	sl, #0
 80186bc:	46d1      	mov	r9, sl
 80186be:	f81b 3009 	ldrb.w	r3, [fp, r9]
 80186c2:	f1a3 017d 	sub.w	r1, r3, #125	@ 0x7d
 80186c6:	2901      	cmp	r1, #1
 80186c8:	f240 80a3 	bls.w	8018812 <uxr_write_framed_msg+0x1e6>
 80186cc:	2a29      	cmp	r2, #41	@ 0x29
 80186ce:	d87f      	bhi.n	80187d0 <uxr_write_framed_msg+0x1a4>
 80186d0:	18a1      	adds	r1, r4, r2
 80186d2:	3201      	adds	r2, #1
 80186d4:	b2d2      	uxtb	r2, r2
 80186d6:	f881 3038 	strb.w	r3, [r1, #56]	@ 0x38
 80186da:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 80186de:	ea8a 0303 	eor.w	r3, sl, r3
 80186e2:	4984      	ldr	r1, [pc, #528]	@ (80188f4 <uxr_write_framed_msg+0x2c8>)
 80186e4:	b2db      	uxtb	r3, r3
 80186e6:	f109 0901 	add.w	r9, r9, #1
 80186ea:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80186ee:	ea83 2a1a 	eor.w	sl, r3, sl, lsr #8
 80186f2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80186f4:	454b      	cmp	r3, r9
 80186f6:	d8e2      	bhi.n	80186be <uxr_write_framed_msg+0x92>
 80186f8:	ea4f 231a 	mov.w	r3, sl, lsr #8
 80186fc:	fa5f f98a 	uxtb.w	r9, sl
 8018700:	9301      	str	r3, [sp, #4]
 8018702:	f04f 0b00 	mov.w	fp, #0
 8018706:	f88d 900c 	strb.w	r9, [sp, #12]
 801870a:	f88d 300d 	strb.w	r3, [sp, #13]
 801870e:	f1a9 0a7d 	sub.w	sl, r9, #125	@ 0x7d
 8018712:	fa5f f18a 	uxtb.w	r1, sl
 8018716:	2901      	cmp	r1, #1
 8018718:	d920      	bls.n	801875c <uxr_write_framed_msg+0x130>
 801871a:	2a29      	cmp	r2, #41	@ 0x29
 801871c:	f240 808b 	bls.w	8018836 <uxr_write_framed_msg+0x20a>
 8018720:	2500      	movs	r5, #0
 8018722:	e000      	b.n	8018726 <uxr_write_framed_msg+0xfa>
 8018724:	b160      	cbz	r0, 8018740 <uxr_write_framed_msg+0x114>
 8018726:	f105 0138 	add.w	r1, r5, #56	@ 0x38
 801872a:	1b52      	subs	r2, r2, r5
 801872c:	4421      	add	r1, r4
 801872e:	4643      	mov	r3, r8
 8018730:	4638      	mov	r0, r7
 8018732:	47b0      	blx	r6
 8018734:	f894 2062 	ldrb.w	r2, [r4, #98]	@ 0x62
 8018738:	4405      	add	r5, r0
 801873a:	4295      	cmp	r5, r2
 801873c:	d3f2      	bcc.n	8018724 <uxr_write_framed_msg+0xf8>
 801873e:	d003      	beq.n	8018748 <uxr_write_framed_msg+0x11c>
 8018740:	2000      	movs	r0, #0
 8018742:	b005      	add	sp, #20
 8018744:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018748:	fa5f f18a 	uxtb.w	r1, sl
 801874c:	f04f 0300 	mov.w	r3, #0
 8018750:	2901      	cmp	r1, #1
 8018752:	f884 3062 	strb.w	r3, [r4, #98]	@ 0x62
 8018756:	f04f 0200 	mov.w	r2, #0
 801875a:	d86c      	bhi.n	8018836 <uxr_write_framed_msg+0x20a>
 801875c:	1c51      	adds	r1, r2, #1
 801875e:	b2c9      	uxtb	r1, r1
 8018760:	2929      	cmp	r1, #41	@ 0x29
 8018762:	d8dd      	bhi.n	8018720 <uxr_write_framed_msg+0xf4>
 8018764:	18a0      	adds	r0, r4, r2
 8018766:	3202      	adds	r2, #2
 8018768:	f089 0920 	eor.w	r9, r9, #32
 801876c:	b2d2      	uxtb	r2, r2
 801876e:	4659      	mov	r1, fp
 8018770:	f04f 037d 	mov.w	r3, #125	@ 0x7d
 8018774:	f880 9039 	strb.w	r9, [r0, #57]	@ 0x39
 8018778:	f880 3038 	strb.w	r3, [r0, #56]	@ 0x38
 801877c:	f04f 0b01 	mov.w	fp, #1
 8018780:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 8018784:	2900      	cmp	r1, #0
 8018786:	d162      	bne.n	801884e <uxr_write_framed_msg+0x222>
 8018788:	f8dd 9004 	ldr.w	r9, [sp, #4]
 801878c:	e7bf      	b.n	801870e <uxr_write_framed_msg+0xe2>
 801878e:	2204      	movs	r2, #4
 8018790:	2503      	movs	r5, #3
 8018792:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8018794:	4423      	add	r3, r4
 8018796:	b2c9      	uxtb	r1, r1
 8018798:	f04f 0c7d 	mov.w	ip, #125	@ 0x7d
 801879c:	f883 c038 	strb.w	ip, [r3, #56]	@ 0x38
 80187a0:	4425      	add	r5, r4
 80187a2:	f1a1 037d 	sub.w	r3, r1, #125	@ 0x7d
 80187a6:	f080 0020 	eor.w	r0, r0, #32
 80187aa:	2b01      	cmp	r3, #1
 80187ac:	f885 0038 	strb.w	r0, [r5, #56]	@ 0x38
 80187b0:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 80187b4:	f63f af66 	bhi.w	8018684 <uxr_write_framed_msg+0x58>
 80187b8:	18a3      	adds	r3, r4, r2
 80187ba:	f081 0120 	eor.w	r1, r1, #32
 80187be:	3202      	adds	r2, #2
 80187c0:	207d      	movs	r0, #125	@ 0x7d
 80187c2:	f883 1039 	strb.w	r1, [r3, #57]	@ 0x39
 80187c6:	f883 0038 	strb.w	r0, [r3, #56]	@ 0x38
 80187ca:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 80187ce:	e75f      	b.n	8018690 <uxr_write_framed_msg+0x64>
 80187d0:	2500      	movs	r5, #0
 80187d2:	e001      	b.n	80187d8 <uxr_write_framed_msg+0x1ac>
 80187d4:	2800      	cmp	r0, #0
 80187d6:	d0b3      	beq.n	8018740 <uxr_write_framed_msg+0x114>
 80187d8:	f105 0138 	add.w	r1, r5, #56	@ 0x38
 80187dc:	1b52      	subs	r2, r2, r5
 80187de:	4421      	add	r1, r4
 80187e0:	4643      	mov	r3, r8
 80187e2:	4638      	mov	r0, r7
 80187e4:	47b0      	blx	r6
 80187e6:	f894 2062 	ldrb.w	r2, [r4, #98]	@ 0x62
 80187ea:	4405      	add	r5, r0
 80187ec:	4295      	cmp	r5, r2
 80187ee:	d3f1      	bcc.n	80187d4 <uxr_write_framed_msg+0x1a8>
 80187f0:	d1a6      	bne.n	8018740 <uxr_write_framed_msg+0x114>
 80187f2:	f04f 0300 	mov.w	r3, #0
 80187f6:	f884 3062 	strb.w	r3, [r4, #98]	@ 0x62
 80187fa:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80187fc:	454b      	cmp	r3, r9
 80187fe:	d971      	bls.n	80188e4 <uxr_write_framed_msg+0x2b8>
 8018800:	f81b 3009 	ldrb.w	r3, [fp, r9]
 8018804:	f1a3 017d 	sub.w	r1, r3, #125	@ 0x7d
 8018808:	2901      	cmp	r1, #1
 801880a:	f04f 0200 	mov.w	r2, #0
 801880e:	f63f af5d 	bhi.w	80186cc <uxr_write_framed_msg+0xa0>
 8018812:	1c51      	adds	r1, r2, #1
 8018814:	b2c9      	uxtb	r1, r1
 8018816:	2929      	cmp	r1, #41	@ 0x29
 8018818:	d8da      	bhi.n	80187d0 <uxr_write_framed_msg+0x1a4>
 801881a:	18a0      	adds	r0, r4, r2
 801881c:	3202      	adds	r2, #2
 801881e:	b2d2      	uxtb	r2, r2
 8018820:	f083 0120 	eor.w	r1, r3, #32
 8018824:	f04f 057d 	mov.w	r5, #125	@ 0x7d
 8018828:	f880 5038 	strb.w	r5, [r0, #56]	@ 0x38
 801882c:	f880 1039 	strb.w	r1, [r0, #57]	@ 0x39
 8018830:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 8018834:	e753      	b.n	80186de <uxr_write_framed_msg+0xb2>
 8018836:	18a0      	adds	r0, r4, r2
 8018838:	3201      	adds	r2, #1
 801883a:	b2d2      	uxtb	r2, r2
 801883c:	4659      	mov	r1, fp
 801883e:	f880 9038 	strb.w	r9, [r0, #56]	@ 0x38
 8018842:	f04f 0b01 	mov.w	fp, #1
 8018846:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 801884a:	2900      	cmp	r1, #0
 801884c:	d09c      	beq.n	8018788 <uxr_write_framed_msg+0x15c>
 801884e:	2500      	movs	r5, #0
 8018850:	e002      	b.n	8018858 <uxr_write_framed_msg+0x22c>
 8018852:	2800      	cmp	r0, #0
 8018854:	f43f af74 	beq.w	8018740 <uxr_write_framed_msg+0x114>
 8018858:	f105 0138 	add.w	r1, r5, #56	@ 0x38
 801885c:	1b52      	subs	r2, r2, r5
 801885e:	4421      	add	r1, r4
 8018860:	4643      	mov	r3, r8
 8018862:	4638      	mov	r0, r7
 8018864:	47b0      	blx	r6
 8018866:	f894 2062 	ldrb.w	r2, [r4, #98]	@ 0x62
 801886a:	4405      	add	r5, r0
 801886c:	4295      	cmp	r5, r2
 801886e:	d3f0      	bcc.n	8018852 <uxr_write_framed_msg+0x226>
 8018870:	f47f af66 	bne.w	8018740 <uxr_write_framed_msg+0x114>
 8018874:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8018876:	2300      	movs	r3, #0
 8018878:	b290      	uxth	r0, r2
 801887a:	f884 3062 	strb.w	r3, [r4, #98]	@ 0x62
 801887e:	b005      	add	sp, #20
 8018880:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018884:	f1a0 027d 	sub.w	r2, r0, #125	@ 0x7d
 8018888:	f085 0520 	eor.w	r5, r5, #32
 801888c:	2303      	movs	r3, #3
 801888e:	217d      	movs	r1, #125	@ 0x7d
 8018890:	2a01      	cmp	r2, #1
 8018892:	f884 503a 	strb.w	r5, [r4, #58]	@ 0x3a
 8018896:	f884 3062 	strb.w	r3, [r4, #98]	@ 0x62
 801889a:	f884 1039 	strb.w	r1, [r4, #57]	@ 0x39
 801889e:	d814      	bhi.n	80188ca <uxr_write_framed_msg+0x29e>
 80188a0:	2205      	movs	r2, #5
 80188a2:	2504      	movs	r5, #4
 80188a4:	e775      	b.n	8018792 <uxr_write_framed_msg+0x166>
 80188a6:	f083 0320 	eor.w	r3, r3, #32
 80188aa:	f881 3039 	strb.w	r3, [r1, #57]	@ 0x39
 80188ae:	3202      	adds	r2, #2
 80188b0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80188b2:	b2d2      	uxtb	r2, r2
 80188b4:	207d      	movs	r0, #125	@ 0x7d
 80188b6:	f881 0038 	strb.w	r0, [r1, #56]	@ 0x38
 80188ba:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 80188be:	2b00      	cmp	r3, #0
 80188c0:	f47f aefa 	bne.w	80186b8 <uxr_write_framed_msg+0x8c>
 80188c4:	9301      	str	r3, [sp, #4]
 80188c6:	4699      	mov	r9, r3
 80188c8:	e71b      	b.n	8018702 <uxr_write_framed_msg+0xd6>
 80188ca:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80188cc:	f884 003b 	strb.w	r0, [r4, #59]	@ 0x3b
 80188d0:	b2d9      	uxtb	r1, r3
 80188d2:	f1a1 037d 	sub.w	r3, r1, #125	@ 0x7d
 80188d6:	2204      	movs	r2, #4
 80188d8:	2b01      	cmp	r3, #1
 80188da:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 80188de:	f63f aed1 	bhi.w	8018684 <uxr_write_framed_msg+0x58>
 80188e2:	e769      	b.n	80187b8 <uxr_write_framed_msg+0x18c>
 80188e4:	ea4f 231a 	mov.w	r3, sl, lsr #8
 80188e8:	fa5f f98a 	uxtb.w	r9, sl
 80188ec:	9301      	str	r3, [sp, #4]
 80188ee:	2200      	movs	r2, #0
 80188f0:	e707      	b.n	8018702 <uxr_write_framed_msg+0xd6>
 80188f2:	bf00      	nop
 80188f4:	0801c378 	.word	0x0801c378

080188f8 <uxr_framing_read_transport>:
 80188f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80188fc:	4604      	mov	r4, r0
 80188fe:	b083      	sub	sp, #12
 8018900:	461f      	mov	r7, r3
 8018902:	f8dd b034 	ldr.w	fp, [sp, #52]	@ 0x34
 8018906:	4689      	mov	r9, r1
 8018908:	4692      	mov	sl, r2
 801890a:	f7f9 fa81 	bl	8011e10 <uxr_millis>
 801890e:	f894 302c 	ldrb.w	r3, [r4, #44]	@ 0x2c
 8018912:	f894 602d 	ldrb.w	r6, [r4, #45]	@ 0x2d
 8018916:	42b3      	cmp	r3, r6
 8018918:	4680      	mov	r8, r0
 801891a:	d05f      	beq.n	80189dc <uxr_framing_read_transport+0xe4>
 801891c:	d81b      	bhi.n	8018956 <uxr_framing_read_transport+0x5e>
 801891e:	1e75      	subs	r5, r6, #1
 8018920:	1aed      	subs	r5, r5, r3
 8018922:	b2ed      	uxtb	r5, r5
 8018924:	2600      	movs	r6, #0
 8018926:	455d      	cmp	r5, fp
 8018928:	d81e      	bhi.n	8018968 <uxr_framing_read_transport+0x70>
 801892a:	19ab      	adds	r3, r5, r6
 801892c:	455b      	cmp	r3, fp
 801892e:	bf84      	itt	hi
 8018930:	ebab 0605 	subhi.w	r6, fp, r5
 8018934:	b2f6      	uxtbhi	r6, r6
 8018936:	b9e5      	cbnz	r5, 8018972 <uxr_framing_read_transport+0x7a>
 8018938:	f04f 0b00 	mov.w	fp, #0
 801893c:	f7f9 fa68 	bl	8011e10 <uxr_millis>
 8018940:	683b      	ldr	r3, [r7, #0]
 8018942:	eba0 0008 	sub.w	r0, r0, r8
 8018946:	1a1b      	subs	r3, r3, r0
 8018948:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801894c:	4658      	mov	r0, fp
 801894e:	603b      	str	r3, [r7, #0]
 8018950:	b003      	add	sp, #12
 8018952:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018956:	2e00      	cmp	r6, #0
 8018958:	d048      	beq.n	80189ec <uxr_framing_read_transport+0xf4>
 801895a:	f1c3 052a 	rsb	r5, r3, #42	@ 0x2a
 801895e:	b2ed      	uxtb	r5, r5
 8018960:	3e01      	subs	r6, #1
 8018962:	455d      	cmp	r5, fp
 8018964:	b2f6      	uxtb	r6, r6
 8018966:	d9e0      	bls.n	801892a <uxr_framing_read_transport+0x32>
 8018968:	fa5f f58b 	uxtb.w	r5, fp
 801896c:	2600      	movs	r6, #0
 801896e:	2d00      	cmp	r5, #0
 8018970:	d0e2      	beq.n	8018938 <uxr_framing_read_transport+0x40>
 8018972:	f894 102c 	ldrb.w	r1, [r4, #44]	@ 0x2c
 8018976:	3102      	adds	r1, #2
 8018978:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801897a:	9300      	str	r3, [sp, #0]
 801897c:	683b      	ldr	r3, [r7, #0]
 801897e:	4421      	add	r1, r4
 8018980:	462a      	mov	r2, r5
 8018982:	4650      	mov	r0, sl
 8018984:	47c8      	blx	r9
 8018986:	f894 302c 	ldrb.w	r3, [r4, #44]	@ 0x2c
 801898a:	4a1b      	ldr	r2, [pc, #108]	@ (80189f8 <uxr_framing_read_transport+0x100>)
 801898c:	4403      	add	r3, r0
 801898e:	0859      	lsrs	r1, r3, #1
 8018990:	fba2 2101 	umull	r2, r1, r2, r1
 8018994:	0889      	lsrs	r1, r1, #2
 8018996:	222a      	movs	r2, #42	@ 0x2a
 8018998:	fb02 3111 	mls	r1, r2, r1, r3
 801899c:	4683      	mov	fp, r0
 801899e:	f884 102c 	strb.w	r1, [r4, #44]	@ 0x2c
 80189a2:	2800      	cmp	r0, #0
 80189a4:	d0c8      	beq.n	8018938 <uxr_framing_read_transport+0x40>
 80189a6:	42a8      	cmp	r0, r5
 80189a8:	d1c8      	bne.n	801893c <uxr_framing_read_transport+0x44>
 80189aa:	b31e      	cbz	r6, 80189f4 <uxr_framing_read_transport+0xfc>
 80189ac:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80189ae:	9300      	str	r3, [sp, #0]
 80189b0:	3102      	adds	r1, #2
 80189b2:	4421      	add	r1, r4
 80189b4:	4632      	mov	r2, r6
 80189b6:	2300      	movs	r3, #0
 80189b8:	4650      	mov	r0, sl
 80189ba:	47c8      	blx	r9
 80189bc:	f894 302c 	ldrb.w	r3, [r4, #44]	@ 0x2c
 80189c0:	490d      	ldr	r1, [pc, #52]	@ (80189f8 <uxr_framing_read_transport+0x100>)
 80189c2:	181a      	adds	r2, r3, r0
 80189c4:	0853      	lsrs	r3, r2, #1
 80189c6:	fba1 1303 	umull	r1, r3, r1, r3
 80189ca:	089b      	lsrs	r3, r3, #2
 80189cc:	212a      	movs	r1, #42	@ 0x2a
 80189ce:	fb01 2313 	mls	r3, r1, r3, r2
 80189d2:	eb00 0b05 	add.w	fp, r0, r5
 80189d6:	f884 302c 	strb.w	r3, [r4, #44]	@ 0x2c
 80189da:	e7af      	b.n	801893c <uxr_framing_read_transport+0x44>
 80189dc:	2600      	movs	r6, #0
 80189de:	f1bb 0f28 	cmp.w	fp, #40	@ 0x28
 80189e2:	85a6      	strh	r6, [r4, #44]	@ 0x2c
 80189e4:	d9c0      	bls.n	8018968 <uxr_framing_read_transport+0x70>
 80189e6:	2102      	movs	r1, #2
 80189e8:	2529      	movs	r5, #41	@ 0x29
 80189ea:	e7c5      	b.n	8018978 <uxr_framing_read_transport+0x80>
 80189ec:	f1c3 0529 	rsb	r5, r3, #41	@ 0x29
 80189f0:	b2ed      	uxtb	r5, r5
 80189f2:	e798      	b.n	8018926 <uxr_framing_read_transport+0x2e>
 80189f4:	46ab      	mov	fp, r5
 80189f6:	e7a1      	b.n	801893c <uxr_framing_read_transport+0x44>
 80189f8:	30c30c31 	.word	0x30c30c31

080189fc <uxr_read_framed_msg>:
 80189fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018a00:	f890 602c 	ldrb.w	r6, [r0, #44]	@ 0x2c
 8018a04:	f890 502d 	ldrb.w	r5, [r0, #45]	@ 0x2d
 8018a08:	42ae      	cmp	r6, r5
 8018a0a:	b083      	sub	sp, #12
 8018a0c:	4604      	mov	r4, r0
 8018a0e:	461f      	mov	r7, r3
 8018a10:	4689      	mov	r9, r1
 8018a12:	4692      	mov	sl, r2
 8018a14:	f000 817d 	beq.w	8018d12 <uxr_read_framed_msg+0x316>
 8018a18:	7823      	ldrb	r3, [r4, #0]
 8018a1a:	4ecc      	ldr	r6, [pc, #816]	@ (8018d4c <uxr_read_framed_msg+0x350>)
 8018a1c:	f8df 8330 	ldr.w	r8, [pc, #816]	@ 8018d50 <uxr_read_framed_msg+0x354>
 8018a20:	2b07      	cmp	r3, #7
 8018a22:	d8fd      	bhi.n	8018a20 <uxr_read_framed_msg+0x24>
 8018a24:	e8df f013 	tbh	[pc, r3, lsl #1]
 8018a28:	00f40113 	.word	0x00f40113
 8018a2c:	00b700d4 	.word	0x00b700d4
 8018a30:	004d008e 	.word	0x004d008e
 8018a34:	00080030 	.word	0x00080030
 8018a38:	f894 002c 	ldrb.w	r0, [r4, #44]	@ 0x2c
 8018a3c:	f894 302d 	ldrb.w	r3, [r4, #45]	@ 0x2d
 8018a40:	4298      	cmp	r0, r3
 8018a42:	f000 8141 	beq.w	8018cc8 <uxr_read_framed_msg+0x2cc>
 8018a46:	18e2      	adds	r2, r4, r3
 8018a48:	7891      	ldrb	r1, [r2, #2]
 8018a4a:	297d      	cmp	r1, #125	@ 0x7d
 8018a4c:	f000 81a2 	beq.w	8018d94 <uxr_read_framed_msg+0x398>
 8018a50:	3301      	adds	r3, #1
 8018a52:	085a      	lsrs	r2, r3, #1
 8018a54:	fba6 0202 	umull	r0, r2, r6, r2
 8018a58:	0892      	lsrs	r2, r2, #2
 8018a5a:	202a      	movs	r0, #42	@ 0x2a
 8018a5c:	fb00 3312 	mls	r3, r0, r2, r3
 8018a60:	297e      	cmp	r1, #126	@ 0x7e
 8018a62:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 8018a66:	f000 8251 	beq.w	8018f0c <uxr_read_framed_msg+0x510>
 8018a6a:	8ea3      	ldrh	r3, [r4, #52]	@ 0x34
 8018a6c:	8ee2      	ldrh	r2, [r4, #54]	@ 0x36
 8018a6e:	eb03 2301 	add.w	r3, r3, r1, lsl #8
 8018a72:	b29b      	uxth	r3, r3
 8018a74:	2100      	movs	r1, #0
 8018a76:	429a      	cmp	r2, r3
 8018a78:	86a3      	strh	r3, [r4, #52]	@ 0x34
 8018a7a:	7021      	strb	r1, [r4, #0]
 8018a7c:	f000 8182 	beq.w	8018d84 <uxr_read_framed_msg+0x388>
 8018a80:	2000      	movs	r0, #0
 8018a82:	b003      	add	sp, #12
 8018a84:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018a88:	f894 002c 	ldrb.w	r0, [r4, #44]	@ 0x2c
 8018a8c:	f894 302d 	ldrb.w	r3, [r4, #45]	@ 0x2d
 8018a90:	4298      	cmp	r0, r3
 8018a92:	f000 8128 	beq.w	8018ce6 <uxr_read_framed_msg+0x2ea>
 8018a96:	18e2      	adds	r2, r4, r3
 8018a98:	7891      	ldrb	r1, [r2, #2]
 8018a9a:	297d      	cmp	r1, #125	@ 0x7d
 8018a9c:	f000 8196 	beq.w	8018dcc <uxr_read_framed_msg+0x3d0>
 8018aa0:	3301      	adds	r3, #1
 8018aa2:	085a      	lsrs	r2, r3, #1
 8018aa4:	fba6 0202 	umull	r0, r2, r6, r2
 8018aa8:	0892      	lsrs	r2, r2, #2
 8018aaa:	202a      	movs	r0, #42	@ 0x2a
 8018aac:	fb00 3312 	mls	r3, r0, r2, r3
 8018ab0:	297e      	cmp	r1, #126	@ 0x7e
 8018ab2:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 8018ab6:	f000 8219 	beq.w	8018eec <uxr_read_framed_msg+0x4f0>
 8018aba:	2307      	movs	r3, #7
 8018abc:	86a1      	strh	r1, [r4, #52]	@ 0x34
 8018abe:	7023      	strb	r3, [r4, #0]
 8018ac0:	e7ae      	b.n	8018a20 <uxr_read_framed_msg+0x24>
 8018ac2:	8e63      	ldrh	r3, [r4, #50]	@ 0x32
 8018ac4:	8e25      	ldrh	r5, [r4, #48]	@ 0x30
 8018ac6:	429d      	cmp	r5, r3
 8018ac8:	d937      	bls.n	8018b3a <uxr_read_framed_msg+0x13e>
 8018aca:	ee07 9a90 	vmov	s15, r9
 8018ace:	f04f 0c2a 	mov.w	ip, #42	@ 0x2a
 8018ad2:	e01e      	b.n	8018b12 <uxr_read_framed_msg+0x116>
 8018ad4:	f89e e002 	ldrb.w	lr, [lr, #2]
 8018ad8:	f1be 0f7d 	cmp.w	lr, #125	@ 0x7d
 8018adc:	f000 80d2 	beq.w	8018c84 <uxr_read_framed_msg+0x288>
 8018ae0:	f1be 0f7e 	cmp.w	lr, #126	@ 0x7e
 8018ae4:	f884 202d 	strb.w	r2, [r4, #45]	@ 0x2d
 8018ae8:	f000 8214 	beq.w	8018f14 <uxr_read_framed_msg+0x518>
 8018aec:	f807 e003 	strb.w	lr, [r7, r3]
 8018af0:	8ee0      	ldrh	r0, [r4, #54]	@ 0x36
 8018af2:	8e63      	ldrh	r3, [r4, #50]	@ 0x32
 8018af4:	8e25      	ldrh	r5, [r4, #48]	@ 0x30
 8018af6:	ea80 010e 	eor.w	r1, r0, lr
 8018afa:	b2c9      	uxtb	r1, r1
 8018afc:	3301      	adds	r3, #1
 8018afe:	f838 2011 	ldrh.w	r2, [r8, r1, lsl #1]
 8018b02:	b29b      	uxth	r3, r3
 8018b04:	ea82 2210 	eor.w	r2, r2, r0, lsr #8
 8018b08:	42ab      	cmp	r3, r5
 8018b0a:	86e2      	strh	r2, [r4, #54]	@ 0x36
 8018b0c:	8663      	strh	r3, [r4, #50]	@ 0x32
 8018b0e:	f080 8121 	bcs.w	8018d54 <uxr_read_framed_msg+0x358>
 8018b12:	f894 102d 	ldrb.w	r1, [r4, #45]	@ 0x2d
 8018b16:	f894 002c 	ldrb.w	r0, [r4, #44]	@ 0x2c
 8018b1a:	f101 0b01 	add.w	fp, r1, #1
 8018b1e:	ea4f 025b 	mov.w	r2, fp, lsr #1
 8018b22:	fba6 9202 	umull	r9, r2, r6, r2
 8018b26:	0892      	lsrs	r2, r2, #2
 8018b28:	4288      	cmp	r0, r1
 8018b2a:	eb04 0e01 	add.w	lr, r4, r1
 8018b2e:	fb0c b212 	mls	r2, ip, r2, fp
 8018b32:	d1cf      	bne.n	8018ad4 <uxr_read_framed_msg+0xd8>
 8018b34:	ee17 9a90 	vmov	r9, s15
 8018b38:	429d      	cmp	r5, r3
 8018b3a:	f040 8112 	bne.w	8018d62 <uxr_read_framed_msg+0x366>
 8018b3e:	2306      	movs	r3, #6
 8018b40:	7023      	strb	r3, [r4, #0]
 8018b42:	e76d      	b.n	8018a20 <uxr_read_framed_msg+0x24>
 8018b44:	f894 002c 	ldrb.w	r0, [r4, #44]	@ 0x2c
 8018b48:	f894 302d 	ldrb.w	r3, [r4, #45]	@ 0x2d
 8018b4c:	4298      	cmp	r0, r3
 8018b4e:	f000 80bb 	beq.w	8018cc8 <uxr_read_framed_msg+0x2cc>
 8018b52:	18e2      	adds	r2, r4, r3
 8018b54:	7891      	ldrb	r1, [r2, #2]
 8018b56:	297d      	cmp	r1, #125	@ 0x7d
 8018b58:	f000 8153 	beq.w	8018e02 <uxr_read_framed_msg+0x406>
 8018b5c:	3301      	adds	r3, #1
 8018b5e:	085a      	lsrs	r2, r3, #1
 8018b60:	fba6 0202 	umull	r0, r2, r6, r2
 8018b64:	0892      	lsrs	r2, r2, #2
 8018b66:	202a      	movs	r0, #42	@ 0x2a
 8018b68:	fb00 3212 	mls	r2, r0, r2, r3
 8018b6c:	297e      	cmp	r1, #126	@ 0x7e
 8018b6e:	f884 202d 	strb.w	r2, [r4, #45]	@ 0x2d
 8018b72:	f000 81cb 	beq.w	8018f0c <uxr_read_framed_msg+0x510>
 8018b76:	8e23      	ldrh	r3, [r4, #48]	@ 0x30
 8018b78:	eb03 2301 	add.w	r3, r3, r1, lsl #8
 8018b7c:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8018b7e:	b29b      	uxth	r3, r3
 8018b80:	2000      	movs	r0, #0
 8018b82:	428b      	cmp	r3, r1
 8018b84:	8623      	strh	r3, [r4, #48]	@ 0x30
 8018b86:	8660      	strh	r0, [r4, #50]	@ 0x32
 8018b88:	86e0      	strh	r0, [r4, #54]	@ 0x36
 8018b8a:	f240 80db 	bls.w	8018d44 <uxr_read_framed_msg+0x348>
 8018b8e:	7020      	strb	r0, [r4, #0]
 8018b90:	b003      	add	sp, #12
 8018b92:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018b96:	f894 002c 	ldrb.w	r0, [r4, #44]	@ 0x2c
 8018b9a:	f894 302d 	ldrb.w	r3, [r4, #45]	@ 0x2d
 8018b9e:	4298      	cmp	r0, r3
 8018ba0:	f000 80a1 	beq.w	8018ce6 <uxr_read_framed_msg+0x2ea>
 8018ba4:	18e2      	adds	r2, r4, r3
 8018ba6:	7891      	ldrb	r1, [r2, #2]
 8018ba8:	297d      	cmp	r1, #125	@ 0x7d
 8018baa:	f000 8167 	beq.w	8018e7c <uxr_read_framed_msg+0x480>
 8018bae:	3301      	adds	r3, #1
 8018bb0:	085a      	lsrs	r2, r3, #1
 8018bb2:	fba6 0202 	umull	r0, r2, r6, r2
 8018bb6:	0892      	lsrs	r2, r2, #2
 8018bb8:	202a      	movs	r0, #42	@ 0x2a
 8018bba:	fb00 3312 	mls	r3, r0, r2, r3
 8018bbe:	297e      	cmp	r1, #126	@ 0x7e
 8018bc0:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 8018bc4:	f000 8192 	beq.w	8018eec <uxr_read_framed_msg+0x4f0>
 8018bc8:	2304      	movs	r3, #4
 8018bca:	8621      	strh	r1, [r4, #48]	@ 0x30
 8018bcc:	7023      	strb	r3, [r4, #0]
 8018bce:	e727      	b.n	8018a20 <uxr_read_framed_msg+0x24>
 8018bd0:	f894 002c 	ldrb.w	r0, [r4, #44]	@ 0x2c
 8018bd4:	f894 202d 	ldrb.w	r2, [r4, #45]	@ 0x2d
 8018bd8:	4290      	cmp	r0, r2
 8018bda:	f000 80b1 	beq.w	8018d40 <uxr_read_framed_msg+0x344>
 8018bde:	18a3      	adds	r3, r4, r2
 8018be0:	7899      	ldrb	r1, [r3, #2]
 8018be2:	297d      	cmp	r1, #125	@ 0x7d
 8018be4:	f000 8166 	beq.w	8018eb4 <uxr_read_framed_msg+0x4b8>
 8018be8:	3201      	adds	r2, #1
 8018bea:	0850      	lsrs	r0, r2, #1
 8018bec:	fba6 3000 	umull	r3, r0, r6, r0
 8018bf0:	0880      	lsrs	r0, r0, #2
 8018bf2:	232a      	movs	r3, #42	@ 0x2a
 8018bf4:	fb03 2210 	mls	r2, r3, r0, r2
 8018bf8:	297e      	cmp	r1, #126	@ 0x7e
 8018bfa:	f884 202d 	strb.w	r2, [r4, #45]	@ 0x2d
 8018bfe:	f000 8187 	beq.w	8018f10 <uxr_read_framed_msg+0x514>
 8018c02:	7863      	ldrb	r3, [r4, #1]
 8018c04:	428b      	cmp	r3, r1
 8018c06:	bf0c      	ite	eq
 8018c08:	2303      	moveq	r3, #3
 8018c0a:	2300      	movne	r3, #0
 8018c0c:	7023      	strb	r3, [r4, #0]
 8018c0e:	e707      	b.n	8018a20 <uxr_read_framed_msg+0x24>
 8018c10:	f894 102c 	ldrb.w	r1, [r4, #44]	@ 0x2c
 8018c14:	f894 302d 	ldrb.w	r3, [r4, #45]	@ 0x2d
 8018c18:	2200      	movs	r2, #0
 8018c1a:	4299      	cmp	r1, r3
 8018c1c:	f884 202e 	strb.w	r2, [r4, #46]	@ 0x2e
 8018c20:	d063      	beq.n	8018cea <uxr_read_framed_msg+0x2ee>
 8018c22:	18e2      	adds	r2, r4, r3
 8018c24:	7892      	ldrb	r2, [r2, #2]
 8018c26:	2a7d      	cmp	r2, #125	@ 0x7d
 8018c28:	f000 8107 	beq.w	8018e3a <uxr_read_framed_msg+0x43e>
 8018c2c:	1c59      	adds	r1, r3, #1
 8018c2e:	084b      	lsrs	r3, r1, #1
 8018c30:	fba6 0303 	umull	r0, r3, r6, r3
 8018c34:	089b      	lsrs	r3, r3, #2
 8018c36:	202a      	movs	r0, #42	@ 0x2a
 8018c38:	fb00 1313 	mls	r3, r0, r3, r1
 8018c3c:	2a7e      	cmp	r2, #126	@ 0x7e
 8018c3e:	f884 202e 	strb.w	r2, [r4, #46]	@ 0x2e
 8018c42:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 8018c46:	d050      	beq.n	8018cea <uxr_read_framed_msg+0x2ee>
 8018c48:	2302      	movs	r3, #2
 8018c4a:	7023      	strb	r3, [r4, #0]
 8018c4c:	e6e8      	b.n	8018a20 <uxr_read_framed_msg+0x24>
 8018c4e:	f894 e02c 	ldrb.w	lr, [r4, #44]	@ 0x2c
 8018c52:	f894 202d 	ldrb.w	r2, [r4, #45]	@ 0x2d
 8018c56:	f04f 0c2a 	mov.w	ip, #42	@ 0x2a
 8018c5a:	1c51      	adds	r1, r2, #1
 8018c5c:	084b      	lsrs	r3, r1, #1
 8018c5e:	fba6 5303 	umull	r5, r3, r6, r3
 8018c62:	089b      	lsrs	r3, r3, #2
 8018c64:	fb0c 1313 	mls	r3, ip, r3, r1
 8018c68:	4596      	cmp	lr, r2
 8018c6a:	eb04 0002 	add.w	r0, r4, r2
 8018c6e:	b2da      	uxtb	r2, r3
 8018c70:	f43f af06 	beq.w	8018a80 <uxr_read_framed_msg+0x84>
 8018c74:	7883      	ldrb	r3, [r0, #2]
 8018c76:	f884 202d 	strb.w	r2, [r4, #45]	@ 0x2d
 8018c7a:	2b7e      	cmp	r3, #126	@ 0x7e
 8018c7c:	d1ed      	bne.n	8018c5a <uxr_read_framed_msg+0x25e>
 8018c7e:	2301      	movs	r3, #1
 8018c80:	7023      	strb	r3, [r4, #0]
 8018c82:	e6cd      	b.n	8018a20 <uxr_read_framed_msg+0x24>
 8018c84:	f101 0b01 	add.w	fp, r1, #1
 8018c88:	ea4f 025b 	mov.w	r2, fp, lsr #1
 8018c8c:	fba6 e202 	umull	lr, r2, r6, r2
 8018c90:	3102      	adds	r1, #2
 8018c92:	0892      	lsrs	r2, r2, #2
 8018c94:	ea4f 0e51 	mov.w	lr, r1, lsr #1
 8018c98:	fb0c b212 	mls	r2, ip, r2, fp
 8018c9c:	fba6 9e0e 	umull	r9, lr, r6, lr
 8018ca0:	eb04 0b02 	add.w	fp, r4, r2
 8018ca4:	b2d2      	uxtb	r2, r2
 8018ca6:	ea4f 0e9e 	mov.w	lr, lr, lsr #2
 8018caa:	4290      	cmp	r0, r2
 8018cac:	fb0c 111e 	mls	r1, ip, lr, r1
 8018cb0:	f43f af40 	beq.w	8018b34 <uxr_read_framed_msg+0x138>
 8018cb4:	f89b e002 	ldrb.w	lr, [fp, #2]
 8018cb8:	f884 102d 	strb.w	r1, [r4, #45]	@ 0x2d
 8018cbc:	f1be 0f7e 	cmp.w	lr, #126	@ 0x7e
 8018cc0:	d036      	beq.n	8018d30 <uxr_read_framed_msg+0x334>
 8018cc2:	f08e 0e20 	eor.w	lr, lr, #32
 8018cc6:	e711      	b.n	8018aec <uxr_read_framed_msg+0xf0>
 8018cc8:	2301      	movs	r3, #1
 8018cca:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8018ccc:	4649      	mov	r1, r9
 8018cce:	e9cd 2300 	strd	r2, r3, [sp]
 8018cd2:	4620      	mov	r0, r4
 8018cd4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8018cd6:	4652      	mov	r2, sl
 8018cd8:	f7ff fe0e 	bl	80188f8 <uxr_framing_read_transport>
 8018cdc:	2800      	cmp	r0, #0
 8018cde:	f43f aecf 	beq.w	8018a80 <uxr_read_framed_msg+0x84>
 8018ce2:	7823      	ldrb	r3, [r4, #0]
 8018ce4:	e69c      	b.n	8018a20 <uxr_read_framed_msg+0x24>
 8018ce6:	2302      	movs	r3, #2
 8018ce8:	e7ef      	b.n	8018cca <uxr_read_framed_msg+0x2ce>
 8018cea:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8018cec:	2304      	movs	r3, #4
 8018cee:	e9cd 2300 	strd	r2, r3, [sp]
 8018cf2:	4649      	mov	r1, r9
 8018cf4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8018cf6:	4652      	mov	r2, sl
 8018cf8:	4620      	mov	r0, r4
 8018cfa:	f7ff fdfd 	bl	80188f8 <uxr_framing_read_transport>
 8018cfe:	2800      	cmp	r0, #0
 8018d00:	d1ef      	bne.n	8018ce2 <uxr_read_framed_msg+0x2e6>
 8018d02:	f894 002e 	ldrb.w	r0, [r4, #46]	@ 0x2e
 8018d06:	387e      	subs	r0, #126	@ 0x7e
 8018d08:	bf18      	it	ne
 8018d0a:	2001      	movne	r0, #1
 8018d0c:	2800      	cmp	r0, #0
 8018d0e:	d0e8      	beq.n	8018ce2 <uxr_read_framed_msg+0x2e6>
 8018d10:	e6b6      	b.n	8018a80 <uxr_read_framed_msg+0x84>
 8018d12:	9d0f      	ldr	r5, [sp, #60]	@ 0x3c
 8018d14:	2305      	movs	r3, #5
 8018d16:	e9cd 5300 	strd	r5, r3, [sp]
 8018d1a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8018d1c:	f7ff fdec 	bl	80188f8 <uxr_framing_read_transport>
 8018d20:	f894 202d 	ldrb.w	r2, [r4, #45]	@ 0x2d
 8018d24:	f894 302c 	ldrb.w	r3, [r4, #44]	@ 0x2c
 8018d28:	429a      	cmp	r2, r3
 8018d2a:	f43f aea9 	beq.w	8018a80 <uxr_read_framed_msg+0x84>
 8018d2e:	e673      	b.n	8018a18 <uxr_read_framed_msg+0x1c>
 8018d30:	429d      	cmp	r5, r3
 8018d32:	ee17 9a90 	vmov	r9, s15
 8018d36:	f43f af02 	beq.w	8018b3e <uxr_read_framed_msg+0x142>
 8018d3a:	2301      	movs	r3, #1
 8018d3c:	7023      	strb	r3, [r4, #0]
 8018d3e:	e66f      	b.n	8018a20 <uxr_read_framed_msg+0x24>
 8018d40:	2303      	movs	r3, #3
 8018d42:	e7c2      	b.n	8018cca <uxr_read_framed_msg+0x2ce>
 8018d44:	2305      	movs	r3, #5
 8018d46:	7023      	strb	r3, [r4, #0]
 8018d48:	e66a      	b.n	8018a20 <uxr_read_framed_msg+0x24>
 8018d4a:	bf00      	nop
 8018d4c:	30c30c31 	.word	0x30c30c31
 8018d50:	0801c378 	.word	0x0801c378
 8018d54:	ee17 9a90 	vmov	r9, s15
 8018d58:	f43f aef1 	beq.w	8018b3e <uxr_read_framed_msg+0x142>
 8018d5c:	f1be 0f7e 	cmp.w	lr, #126	@ 0x7e
 8018d60:	d08d      	beq.n	8018c7e <uxr_read_framed_msg+0x282>
 8018d62:	1aeb      	subs	r3, r5, r3
 8018d64:	3302      	adds	r3, #2
 8018d66:	9301      	str	r3, [sp, #4]
 8018d68:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8018d6a:	9300      	str	r3, [sp, #0]
 8018d6c:	4652      	mov	r2, sl
 8018d6e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8018d70:	4649      	mov	r1, r9
 8018d72:	4620      	mov	r0, r4
 8018d74:	f7ff fdc0 	bl	80188f8 <uxr_framing_read_transport>
 8018d78:	fab0 f080 	clz	r0, r0
 8018d7c:	0940      	lsrs	r0, r0, #5
 8018d7e:	2800      	cmp	r0, #0
 8018d80:	d0af      	beq.n	8018ce2 <uxr_read_framed_msg+0x2e6>
 8018d82:	e67d      	b.n	8018a80 <uxr_read_framed_msg+0x84>
 8018d84:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8018d86:	f894 302e 	ldrb.w	r3, [r4, #46]	@ 0x2e
 8018d8a:	7013      	strb	r3, [r2, #0]
 8018d8c:	8e20      	ldrh	r0, [r4, #48]	@ 0x30
 8018d8e:	b003      	add	sp, #12
 8018d90:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018d94:	1c59      	adds	r1, r3, #1
 8018d96:	084a      	lsrs	r2, r1, #1
 8018d98:	fba6 5202 	umull	r5, r2, r6, r2
 8018d9c:	0892      	lsrs	r2, r2, #2
 8018d9e:	252a      	movs	r5, #42	@ 0x2a
 8018da0:	fb05 1212 	mls	r2, r5, r2, r1
 8018da4:	b2d1      	uxtb	r1, r2
 8018da6:	4288      	cmp	r0, r1
 8018da8:	d08e      	beq.n	8018cc8 <uxr_read_framed_msg+0x2cc>
 8018daa:	3302      	adds	r3, #2
 8018dac:	4422      	add	r2, r4
 8018dae:	0858      	lsrs	r0, r3, #1
 8018db0:	fba6 1000 	umull	r1, r0, r6, r0
 8018db4:	7891      	ldrb	r1, [r2, #2]
 8018db6:	0882      	lsrs	r2, r0, #2
 8018db8:	fb05 3312 	mls	r3, r5, r2, r3
 8018dbc:	297e      	cmp	r1, #126	@ 0x7e
 8018dbe:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 8018dc2:	f000 80a3 	beq.w	8018f0c <uxr_read_framed_msg+0x510>
 8018dc6:	f081 0120 	eor.w	r1, r1, #32
 8018dca:	e64e      	b.n	8018a6a <uxr_read_framed_msg+0x6e>
 8018dcc:	1c59      	adds	r1, r3, #1
 8018dce:	084a      	lsrs	r2, r1, #1
 8018dd0:	fba6 5202 	umull	r5, r2, r6, r2
 8018dd4:	0892      	lsrs	r2, r2, #2
 8018dd6:	252a      	movs	r5, #42	@ 0x2a
 8018dd8:	fb05 1212 	mls	r2, r5, r2, r1
 8018ddc:	b2d1      	uxtb	r1, r2
 8018dde:	4288      	cmp	r0, r1
 8018de0:	d081      	beq.n	8018ce6 <uxr_read_framed_msg+0x2ea>
 8018de2:	3302      	adds	r3, #2
 8018de4:	4422      	add	r2, r4
 8018de6:	0858      	lsrs	r0, r3, #1
 8018de8:	fba6 1000 	umull	r1, r0, r6, r0
 8018dec:	7891      	ldrb	r1, [r2, #2]
 8018dee:	0882      	lsrs	r2, r0, #2
 8018df0:	fb05 3312 	mls	r3, r5, r2, r3
 8018df4:	297e      	cmp	r1, #126	@ 0x7e
 8018df6:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 8018dfa:	d077      	beq.n	8018eec <uxr_read_framed_msg+0x4f0>
 8018dfc:	f081 0120 	eor.w	r1, r1, #32
 8018e00:	e65b      	b.n	8018aba <uxr_read_framed_msg+0xbe>
 8018e02:	1c59      	adds	r1, r3, #1
 8018e04:	084a      	lsrs	r2, r1, #1
 8018e06:	fba6 5202 	umull	r5, r2, r6, r2
 8018e0a:	0892      	lsrs	r2, r2, #2
 8018e0c:	252a      	movs	r5, #42	@ 0x2a
 8018e0e:	fb05 1212 	mls	r2, r5, r2, r1
 8018e12:	b2d1      	uxtb	r1, r2
 8018e14:	4288      	cmp	r0, r1
 8018e16:	f43f af57 	beq.w	8018cc8 <uxr_read_framed_msg+0x2cc>
 8018e1a:	3302      	adds	r3, #2
 8018e1c:	4422      	add	r2, r4
 8018e1e:	0858      	lsrs	r0, r3, #1
 8018e20:	fba6 1000 	umull	r1, r0, r6, r0
 8018e24:	7891      	ldrb	r1, [r2, #2]
 8018e26:	0882      	lsrs	r2, r0, #2
 8018e28:	fb05 3312 	mls	r3, r5, r2, r3
 8018e2c:	297e      	cmp	r1, #126	@ 0x7e
 8018e2e:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 8018e32:	d06b      	beq.n	8018f0c <uxr_read_framed_msg+0x510>
 8018e34:	f081 0120 	eor.w	r1, r1, #32
 8018e38:	e69d      	b.n	8018b76 <uxr_read_framed_msg+0x17a>
 8018e3a:	1c5d      	adds	r5, r3, #1
 8018e3c:	086a      	lsrs	r2, r5, #1
 8018e3e:	fba6 0202 	umull	r0, r2, r6, r2
 8018e42:	0892      	lsrs	r2, r2, #2
 8018e44:	202a      	movs	r0, #42	@ 0x2a
 8018e46:	fb00 5212 	mls	r2, r0, r2, r5
 8018e4a:	b2d5      	uxtb	r5, r2
 8018e4c:	42a9      	cmp	r1, r5
 8018e4e:	f43f af4c 	beq.w	8018cea <uxr_read_framed_msg+0x2ee>
 8018e52:	3302      	adds	r3, #2
 8018e54:	4422      	add	r2, r4
 8018e56:	0859      	lsrs	r1, r3, #1
 8018e58:	fba6 5101 	umull	r5, r1, r6, r1
 8018e5c:	7895      	ldrb	r5, [r2, #2]
 8018e5e:	f884 502e 	strb.w	r5, [r4, #46]	@ 0x2e
 8018e62:	088a      	lsrs	r2, r1, #2
 8018e64:	fb00 3312 	mls	r3, r0, r2, r3
 8018e68:	2d7e      	cmp	r5, #126	@ 0x7e
 8018e6a:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 8018e6e:	f43f af3c 	beq.w	8018cea <uxr_read_framed_msg+0x2ee>
 8018e72:	f085 0520 	eor.w	r5, r5, #32
 8018e76:	f884 502e 	strb.w	r5, [r4, #46]	@ 0x2e
 8018e7a:	e6e5      	b.n	8018c48 <uxr_read_framed_msg+0x24c>
 8018e7c:	1c59      	adds	r1, r3, #1
 8018e7e:	084a      	lsrs	r2, r1, #1
 8018e80:	fba6 5202 	umull	r5, r2, r6, r2
 8018e84:	0892      	lsrs	r2, r2, #2
 8018e86:	252a      	movs	r5, #42	@ 0x2a
 8018e88:	fb05 1212 	mls	r2, r5, r2, r1
 8018e8c:	b2d1      	uxtb	r1, r2
 8018e8e:	4288      	cmp	r0, r1
 8018e90:	f43f af29 	beq.w	8018ce6 <uxr_read_framed_msg+0x2ea>
 8018e94:	3302      	adds	r3, #2
 8018e96:	4422      	add	r2, r4
 8018e98:	0858      	lsrs	r0, r3, #1
 8018e9a:	fba6 1000 	umull	r1, r0, r6, r0
 8018e9e:	7891      	ldrb	r1, [r2, #2]
 8018ea0:	0882      	lsrs	r2, r0, #2
 8018ea2:	fb05 3312 	mls	r3, r5, r2, r3
 8018ea6:	297e      	cmp	r1, #126	@ 0x7e
 8018ea8:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 8018eac:	d01e      	beq.n	8018eec <uxr_read_framed_msg+0x4f0>
 8018eae:	f081 0120 	eor.w	r1, r1, #32
 8018eb2:	e689      	b.n	8018bc8 <uxr_read_framed_msg+0x1cc>
 8018eb4:	1c51      	adds	r1, r2, #1
 8018eb6:	084b      	lsrs	r3, r1, #1
 8018eb8:	fba6 5303 	umull	r5, r3, r6, r3
 8018ebc:	089b      	lsrs	r3, r3, #2
 8018ebe:	252a      	movs	r5, #42	@ 0x2a
 8018ec0:	fb05 1313 	mls	r3, r5, r3, r1
 8018ec4:	b2d9      	uxtb	r1, r3
 8018ec6:	4288      	cmp	r0, r1
 8018ec8:	f43f af3a 	beq.w	8018d40 <uxr_read_framed_msg+0x344>
 8018ecc:	3202      	adds	r2, #2
 8018ece:	4423      	add	r3, r4
 8018ed0:	0850      	lsrs	r0, r2, #1
 8018ed2:	789b      	ldrb	r3, [r3, #2]
 8018ed4:	fba6 1000 	umull	r1, r0, r6, r0
 8018ed8:	0880      	lsrs	r0, r0, #2
 8018eda:	fb05 2210 	mls	r2, r5, r0, r2
 8018ede:	2b7e      	cmp	r3, #126	@ 0x7e
 8018ee0:	f884 202d 	strb.w	r2, [r4, #45]	@ 0x2d
 8018ee4:	d014      	beq.n	8018f10 <uxr_read_framed_msg+0x514>
 8018ee6:	f083 0120 	eor.w	r1, r3, #32
 8018eea:	e68a      	b.n	8018c02 <uxr_read_framed_msg+0x206>
 8018eec:	2302      	movs	r3, #2
 8018eee:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8018ef0:	4649      	mov	r1, r9
 8018ef2:	e9cd 2300 	strd	r2, r3, [sp]
 8018ef6:	4620      	mov	r0, r4
 8018ef8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8018efa:	4652      	mov	r2, sl
 8018efc:	f7ff fcfc 	bl	80188f8 <uxr_framing_read_transport>
 8018f00:	2800      	cmp	r0, #0
 8018f02:	f47f aeee 	bne.w	8018ce2 <uxr_read_framed_msg+0x2e6>
 8018f06:	2301      	movs	r3, #1
 8018f08:	7023      	strb	r3, [r4, #0]
 8018f0a:	e589      	b.n	8018a20 <uxr_read_framed_msg+0x24>
 8018f0c:	2301      	movs	r3, #1
 8018f0e:	e7ee      	b.n	8018eee <uxr_read_framed_msg+0x4f2>
 8018f10:	2303      	movs	r3, #3
 8018f12:	e7ec      	b.n	8018eee <uxr_read_framed_msg+0x4f2>
 8018f14:	ee17 9a90 	vmov	r9, s15
 8018f18:	e6b1      	b.n	8018c7e <uxr_read_framed_msg+0x282>
 8018f1a:	bf00      	nop

08018f1c <rcl_get_default_domain_id>:
 8018f1c:	b530      	push	{r4, r5, lr}
 8018f1e:	b083      	sub	sp, #12
 8018f20:	2300      	movs	r3, #0
 8018f22:	9300      	str	r3, [sp, #0]
 8018f24:	b1d0      	cbz	r0, 8018f5c <rcl_get_default_domain_id+0x40>
 8018f26:	4604      	mov	r4, r0
 8018f28:	4669      	mov	r1, sp
 8018f2a:	4815      	ldr	r0, [pc, #84]	@ (8018f80 <rcl_get_default_domain_id+0x64>)
 8018f2c:	f7fc feb0 	bl	8015c90 <rcutils_get_env>
 8018f30:	4602      	mov	r2, r0
 8018f32:	b110      	cbz	r0, 8018f3a <rcl_get_default_domain_id+0x1e>
 8018f34:	2001      	movs	r0, #1
 8018f36:	b003      	add	sp, #12
 8018f38:	bd30      	pop	{r4, r5, pc}
 8018f3a:	9b00      	ldr	r3, [sp, #0]
 8018f3c:	b18b      	cbz	r3, 8018f62 <rcl_get_default_domain_id+0x46>
 8018f3e:	7818      	ldrb	r0, [r3, #0]
 8018f40:	2800      	cmp	r0, #0
 8018f42:	d0f8      	beq.n	8018f36 <rcl_get_default_domain_id+0x1a>
 8018f44:	4618      	mov	r0, r3
 8018f46:	a901      	add	r1, sp, #4
 8018f48:	9201      	str	r2, [sp, #4]
 8018f4a:	f000 fc7b 	bl	8019844 <strtoul>
 8018f4e:	4605      	mov	r5, r0
 8018f50:	b150      	cbz	r0, 8018f68 <rcl_get_default_domain_id+0x4c>
 8018f52:	1c43      	adds	r3, r0, #1
 8018f54:	d00d      	beq.n	8018f72 <rcl_get_default_domain_id+0x56>
 8018f56:	6025      	str	r5, [r4, #0]
 8018f58:	2000      	movs	r0, #0
 8018f5a:	e7ec      	b.n	8018f36 <rcl_get_default_domain_id+0x1a>
 8018f5c:	200b      	movs	r0, #11
 8018f5e:	b003      	add	sp, #12
 8018f60:	bd30      	pop	{r4, r5, pc}
 8018f62:	4618      	mov	r0, r3
 8018f64:	b003      	add	sp, #12
 8018f66:	bd30      	pop	{r4, r5, pc}
 8018f68:	9b01      	ldr	r3, [sp, #4]
 8018f6a:	781b      	ldrb	r3, [r3, #0]
 8018f6c:	2b00      	cmp	r3, #0
 8018f6e:	d0f2      	beq.n	8018f56 <rcl_get_default_domain_id+0x3a>
 8018f70:	e7e0      	b.n	8018f34 <rcl_get_default_domain_id+0x18>
 8018f72:	f000 fef9 	bl	8019d68 <__errno>
 8018f76:	6803      	ldr	r3, [r0, #0]
 8018f78:	2b22      	cmp	r3, #34	@ 0x22
 8018f7a:	d1ec      	bne.n	8018f56 <rcl_get_default_domain_id+0x3a>
 8018f7c:	e7da      	b.n	8018f34 <rcl_get_default_domain_id+0x18>
 8018f7e:	bf00      	nop
 8018f80:	0801c578 	.word	0x0801c578

08018f84 <rcl_get_zero_initialized_guard_condition>:
 8018f84:	4a03      	ldr	r2, [pc, #12]	@ (8018f94 <rcl_get_zero_initialized_guard_condition+0x10>)
 8018f86:	4603      	mov	r3, r0
 8018f88:	e892 0003 	ldmia.w	r2, {r0, r1}
 8018f8c:	e883 0003 	stmia.w	r3, {r0, r1}
 8018f90:	4618      	mov	r0, r3
 8018f92:	4770      	bx	lr
 8018f94:	0801c588 	.word	0x0801c588

08018f98 <rcl_guard_condition_init>:
 8018f98:	b082      	sub	sp, #8
 8018f9a:	b5f0      	push	{r4, r5, r6, r7, lr}
 8018f9c:	b087      	sub	sp, #28
 8018f9e:	ac0c      	add	r4, sp, #48	@ 0x30
 8018fa0:	e884 000c 	stmia.w	r4, {r2, r3}
 8018fa4:	4625      	mov	r5, r4
 8018fa6:	4607      	mov	r7, r0
 8018fa8:	460e      	mov	r6, r1
 8018faa:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8018fac:	ac01      	add	r4, sp, #4
 8018fae:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8018fb0:	682b      	ldr	r3, [r5, #0]
 8018fb2:	6023      	str	r3, [r4, #0]
 8018fb4:	a801      	add	r0, sp, #4
 8018fb6:	f7f5 f807 	bl	800dfc8 <rcutils_allocator_is_valid>
 8018fba:	2800      	cmp	r0, #0
 8018fbc:	d034      	beq.n	8019028 <rcl_guard_condition_init+0x90>
 8018fbe:	463c      	mov	r4, r7
 8018fc0:	2f00      	cmp	r7, #0
 8018fc2:	d031      	beq.n	8019028 <rcl_guard_condition_init+0x90>
 8018fc4:	4635      	mov	r5, r6
 8018fc6:	687e      	ldr	r6, [r7, #4]
 8018fc8:	bb46      	cbnz	r6, 801901c <rcl_guard_condition_init+0x84>
 8018fca:	2d00      	cmp	r5, #0
 8018fcc:	d02c      	beq.n	8019028 <rcl_guard_condition_init+0x90>
 8018fce:	4628      	mov	r0, r5
 8018fd0:	f7fa f9a8 	bl	8013324 <rcl_context_is_valid>
 8018fd4:	2800      	cmp	r0, #0
 8018fd6:	d02d      	beq.n	8019034 <rcl_guard_condition_init+0x9c>
 8018fd8:	9b01      	ldr	r3, [sp, #4]
 8018fda:	9905      	ldr	r1, [sp, #20]
 8018fdc:	201c      	movs	r0, #28
 8018fde:	4798      	blx	r3
 8018fe0:	4607      	mov	r7, r0
 8018fe2:	6060      	str	r0, [r4, #4]
 8018fe4:	2800      	cmp	r0, #0
 8018fe6:	d02e      	beq.n	8019046 <rcl_guard_condition_init+0xae>
 8018fe8:	6828      	ldr	r0, [r5, #0]
 8018fea:	3028      	adds	r0, #40	@ 0x28
 8018fec:	f000 f9c0 	bl	8019370 <rmw_create_guard_condition>
 8018ff0:	f8d4 c004 	ldr.w	ip, [r4, #4]
 8018ff4:	6038      	str	r0, [r7, #0]
 8018ff6:	f8dc 5000 	ldr.w	r5, [ip]
 8018ffa:	b1ed      	cbz	r5, 8019038 <rcl_guard_condition_init+0xa0>
 8018ffc:	ac01      	add	r4, sp, #4
 8018ffe:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8019000:	2701      	movs	r7, #1
 8019002:	f10c 0508 	add.w	r5, ip, #8
 8019006:	f88c 7004 	strb.w	r7, [ip, #4]
 801900a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 801900c:	6823      	ldr	r3, [r4, #0]
 801900e:	602b      	str	r3, [r5, #0]
 8019010:	4630      	mov	r0, r6
 8019012:	b007      	add	sp, #28
 8019014:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8019018:	b002      	add	sp, #8
 801901a:	4770      	bx	lr
 801901c:	2064      	movs	r0, #100	@ 0x64
 801901e:	b007      	add	sp, #28
 8019020:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8019024:	b002      	add	sp, #8
 8019026:	4770      	bx	lr
 8019028:	200b      	movs	r0, #11
 801902a:	b007      	add	sp, #28
 801902c:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8019030:	b002      	add	sp, #8
 8019032:	4770      	bx	lr
 8019034:	2065      	movs	r0, #101	@ 0x65
 8019036:	e7f2      	b.n	801901e <rcl_guard_condition_init+0x86>
 8019038:	4660      	mov	r0, ip
 801903a:	9b02      	ldr	r3, [sp, #8]
 801903c:	9905      	ldr	r1, [sp, #20]
 801903e:	4798      	blx	r3
 8019040:	6065      	str	r5, [r4, #4]
 8019042:	2001      	movs	r0, #1
 8019044:	e7eb      	b.n	801901e <rcl_guard_condition_init+0x86>
 8019046:	200a      	movs	r0, #10
 8019048:	e7e9      	b.n	801901e <rcl_guard_condition_init+0x86>
 801904a:	bf00      	nop

0801904c <rcl_guard_condition_init_from_rmw>:
 801904c:	b082      	sub	sp, #8
 801904e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019052:	b086      	sub	sp, #24
 8019054:	ac0c      	add	r4, sp, #48	@ 0x30
 8019056:	4684      	mov	ip, r0
 8019058:	f844 3f04 	str.w	r3, [r4, #4]!
 801905c:	460f      	mov	r7, r1
 801905e:	4690      	mov	r8, r2
 8019060:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8019062:	ad01      	add	r5, sp, #4
 8019064:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8019066:	6823      	ldr	r3, [r4, #0]
 8019068:	602b      	str	r3, [r5, #0]
 801906a:	a801      	add	r0, sp, #4
 801906c:	4664      	mov	r4, ip
 801906e:	f7f4 ffab 	bl	800dfc8 <rcutils_allocator_is_valid>
 8019072:	b328      	cbz	r0, 80190c0 <rcl_guard_condition_init_from_rmw+0x74>
 8019074:	b324      	cbz	r4, 80190c0 <rcl_guard_condition_init_from_rmw+0x74>
 8019076:	6866      	ldr	r6, [r4, #4]
 8019078:	b9e6      	cbnz	r6, 80190b4 <rcl_guard_condition_init_from_rmw+0x68>
 801907a:	f1b8 0f00 	cmp.w	r8, #0
 801907e:	d01f      	beq.n	80190c0 <rcl_guard_condition_init_from_rmw+0x74>
 8019080:	4640      	mov	r0, r8
 8019082:	f7fa f94f 	bl	8013324 <rcl_context_is_valid>
 8019086:	b308      	cbz	r0, 80190cc <rcl_guard_condition_init_from_rmw+0x80>
 8019088:	9b01      	ldr	r3, [sp, #4]
 801908a:	9905      	ldr	r1, [sp, #20]
 801908c:	201c      	movs	r0, #28
 801908e:	4798      	blx	r3
 8019090:	4605      	mov	r5, r0
 8019092:	6060      	str	r0, [r4, #4]
 8019094:	b340      	cbz	r0, 80190e8 <rcl_guard_condition_init_from_rmw+0x9c>
 8019096:	b1df      	cbz	r7, 80190d0 <rcl_guard_condition_init_from_rmw+0x84>
 8019098:	6007      	str	r7, [r0, #0]
 801909a:	7106      	strb	r6, [r0, #4]
 801909c:	ac01      	add	r4, sp, #4
 801909e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80190a0:	3508      	adds	r5, #8
 80190a2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80190a4:	6823      	ldr	r3, [r4, #0]
 80190a6:	602b      	str	r3, [r5, #0]
 80190a8:	2000      	movs	r0, #0
 80190aa:	b006      	add	sp, #24
 80190ac:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80190b0:	b002      	add	sp, #8
 80190b2:	4770      	bx	lr
 80190b4:	2064      	movs	r0, #100	@ 0x64
 80190b6:	b006      	add	sp, #24
 80190b8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80190bc:	b002      	add	sp, #8
 80190be:	4770      	bx	lr
 80190c0:	200b      	movs	r0, #11
 80190c2:	b006      	add	sp, #24
 80190c4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80190c8:	b002      	add	sp, #8
 80190ca:	4770      	bx	lr
 80190cc:	2065      	movs	r0, #101	@ 0x65
 80190ce:	e7f2      	b.n	80190b6 <rcl_guard_condition_init_from_rmw+0x6a>
 80190d0:	f8d8 0000 	ldr.w	r0, [r8]
 80190d4:	3028      	adds	r0, #40	@ 0x28
 80190d6:	f000 f94b 	bl	8019370 <rmw_create_guard_condition>
 80190da:	6028      	str	r0, [r5, #0]
 80190dc:	6865      	ldr	r5, [r4, #4]
 80190de:	682e      	ldr	r6, [r5, #0]
 80190e0:	b126      	cbz	r6, 80190ec <rcl_guard_condition_init_from_rmw+0xa0>
 80190e2:	2301      	movs	r3, #1
 80190e4:	712b      	strb	r3, [r5, #4]
 80190e6:	e7d9      	b.n	801909c <rcl_guard_condition_init_from_rmw+0x50>
 80190e8:	200a      	movs	r0, #10
 80190ea:	e7e4      	b.n	80190b6 <rcl_guard_condition_init_from_rmw+0x6a>
 80190ec:	4628      	mov	r0, r5
 80190ee:	9b02      	ldr	r3, [sp, #8]
 80190f0:	9905      	ldr	r1, [sp, #20]
 80190f2:	4798      	blx	r3
 80190f4:	6066      	str	r6, [r4, #4]
 80190f6:	2001      	movs	r0, #1
 80190f8:	e7dd      	b.n	80190b6 <rcl_guard_condition_init_from_rmw+0x6a>
 80190fa:	bf00      	nop

080190fc <rcl_guard_condition_fini>:
 80190fc:	b570      	push	{r4, r5, r6, lr}
 80190fe:	b082      	sub	sp, #8
 8019100:	b1f0      	cbz	r0, 8019140 <rcl_guard_condition_fini+0x44>
 8019102:	4604      	mov	r4, r0
 8019104:	6840      	ldr	r0, [r0, #4]
 8019106:	b158      	cbz	r0, 8019120 <rcl_guard_condition_fini+0x24>
 8019108:	6803      	ldr	r3, [r0, #0]
 801910a:	68c6      	ldr	r6, [r0, #12]
 801910c:	6981      	ldr	r1, [r0, #24]
 801910e:	b15b      	cbz	r3, 8019128 <rcl_guard_condition_fini+0x2c>
 8019110:	7905      	ldrb	r5, [r0, #4]
 8019112:	b95d      	cbnz	r5, 801912c <rcl_guard_condition_fini+0x30>
 8019114:	47b0      	blx	r6
 8019116:	2300      	movs	r3, #0
 8019118:	4628      	mov	r0, r5
 801911a:	6063      	str	r3, [r4, #4]
 801911c:	b002      	add	sp, #8
 801911e:	bd70      	pop	{r4, r5, r6, pc}
 8019120:	4605      	mov	r5, r0
 8019122:	4628      	mov	r0, r5
 8019124:	b002      	add	sp, #8
 8019126:	bd70      	pop	{r4, r5, r6, pc}
 8019128:	461d      	mov	r5, r3
 801912a:	e7f3      	b.n	8019114 <rcl_guard_condition_fini+0x18>
 801912c:	4618      	mov	r0, r3
 801912e:	9101      	str	r1, [sp, #4]
 8019130:	f000 f932 	bl	8019398 <rmw_destroy_guard_condition>
 8019134:	1e05      	subs	r5, r0, #0
 8019136:	9901      	ldr	r1, [sp, #4]
 8019138:	6860      	ldr	r0, [r4, #4]
 801913a:	bf18      	it	ne
 801913c:	2501      	movne	r5, #1
 801913e:	e7e9      	b.n	8019114 <rcl_guard_condition_fini+0x18>
 8019140:	250b      	movs	r5, #11
 8019142:	4628      	mov	r0, r5
 8019144:	b002      	add	sp, #8
 8019146:	bd70      	pop	{r4, r5, r6, pc}

08019148 <rcl_guard_condition_get_default_options>:
 8019148:	b5f0      	push	{r4, r5, r6, r7, lr}
 801914a:	b087      	sub	sp, #28
 801914c:	4607      	mov	r7, r0
 801914e:	466c      	mov	r4, sp
 8019150:	4668      	mov	r0, sp
 8019152:	f7f4 ff2b 	bl	800dfac <rcutils_get_default_allocator>
 8019156:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8019158:	4d07      	ldr	r5, [pc, #28]	@ (8019178 <rcl_guard_condition_get_default_options+0x30>)
 801915a:	f8d4 c000 	ldr.w	ip, [r4]
 801915e:	462e      	mov	r6, r5
 8019160:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8019162:	462c      	mov	r4, r5
 8019164:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8019166:	463c      	mov	r4, r7
 8019168:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801916a:	4638      	mov	r0, r7
 801916c:	f8c6 c000 	str.w	ip, [r6]
 8019170:	f8c4 c000 	str.w	ip, [r4]
 8019174:	b007      	add	sp, #28
 8019176:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8019178:	20007720 	.word	0x20007720

0801917c <rcl_trigger_guard_condition>:
 801917c:	b148      	cbz	r0, 8019192 <rcl_trigger_guard_condition+0x16>
 801917e:	b508      	push	{r3, lr}
 8019180:	6843      	ldr	r3, [r0, #4]
 8019182:	b143      	cbz	r3, 8019196 <rcl_trigger_guard_condition+0x1a>
 8019184:	6818      	ldr	r0, [r3, #0]
 8019186:	f000 f91b 	bl	80193c0 <rmw_trigger_guard_condition>
 801918a:	3800      	subs	r0, #0
 801918c:	bf18      	it	ne
 801918e:	2001      	movne	r0, #1
 8019190:	bd08      	pop	{r3, pc}
 8019192:	200b      	movs	r0, #11
 8019194:	4770      	bx	lr
 8019196:	200b      	movs	r0, #11
 8019198:	bd08      	pop	{r3, pc}
 801919a:	bf00      	nop

0801919c <rcl_guard_condition_get_rmw_handle>:
 801919c:	b110      	cbz	r0, 80191a4 <rcl_guard_condition_get_rmw_handle+0x8>
 801919e:	6840      	ldr	r0, [r0, #4]
 80191a0:	b100      	cbz	r0, 80191a4 <rcl_guard_condition_get_rmw_handle+0x8>
 80191a2:	6800      	ldr	r0, [r0, #0]
 80191a4:	4770      	bx	lr
 80191a6:	bf00      	nop

080191a8 <on_status>:
 80191a8:	b082      	sub	sp, #8
 80191aa:	b002      	add	sp, #8
 80191ac:	4770      	bx	lr
 80191ae:	bf00      	nop

080191b0 <on_topic>:
 80191b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80191b4:	4a21      	ldr	r2, [pc, #132]	@ (801923c <on_topic+0x8c>)
 80191b6:	b094      	sub	sp, #80	@ 0x50
 80191b8:	6812      	ldr	r2, [r2, #0]
 80191ba:	9e1a      	ldr	r6, [sp, #104]	@ 0x68
 80191bc:	f8bd 506c 	ldrh.w	r5, [sp, #108]	@ 0x6c
 80191c0:	9113      	str	r1, [sp, #76]	@ 0x4c
 80191c2:	9312      	str	r3, [sp, #72]	@ 0x48
 80191c4:	b3ba      	cbz	r2, 8019236 <on_topic+0x86>
 80191c6:	f8bd 104c 	ldrh.w	r1, [sp, #76]	@ 0x4c
 80191ca:	f89d 004e 	ldrb.w	r0, [sp, #78]	@ 0x4e
 80191ce:	e001      	b.n	80191d4 <on_topic+0x24>
 80191d0:	6892      	ldr	r2, [r2, #8]
 80191d2:	b382      	cbz	r2, 8019236 <on_topic+0x86>
 80191d4:	68d4      	ldr	r4, [r2, #12]
 80191d6:	8aa3      	ldrh	r3, [r4, #20]
 80191d8:	428b      	cmp	r3, r1
 80191da:	d1f9      	bne.n	80191d0 <on_topic+0x20>
 80191dc:	7da3      	ldrb	r3, [r4, #22]
 80191de:	4283      	cmp	r3, r0
 80191e0:	d1f6      	bne.n	80191d0 <on_topic+0x20>
 80191e2:	2248      	movs	r2, #72	@ 0x48
 80191e4:	f104 0130 	add.w	r1, r4, #48	@ 0x30
 80191e8:	4668      	mov	r0, sp
 80191ea:	f000 fdf2 	bl	8019dd2 <memcpy>
 80191ee:	e9d4 230a 	ldrd	r2, r3, [r4, #40]	@ 0x28
 80191f2:	4620      	mov	r0, r4
 80191f4:	f7f5 fc8a 	bl	800eb0c <rmw_uxrce_get_static_input_buffer_for_entity>
 80191f8:	4607      	mov	r7, r0
 80191fa:	b1e0      	cbz	r0, 8019236 <on_topic+0x86>
 80191fc:	f8d0 800c 	ldr.w	r8, [r0, #12]
 8019200:	462a      	mov	r2, r5
 8019202:	4630      	mov	r0, r6
 8019204:	f108 0110 	add.w	r1, r8, #16
 8019208:	f7fe f9aa 	bl	8017560 <ucdr_deserialize_array_uint8_t>
 801920c:	b930      	cbnz	r0, 801921c <on_topic+0x6c>
 801920e:	480c      	ldr	r0, [pc, #48]	@ (8019240 <on_topic+0x90>)
 8019210:	4639      	mov	r1, r7
 8019212:	b014      	add	sp, #80	@ 0x50
 8019214:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8019218:	f7fc bf74 	b.w	8016104 <put_memory>
 801921c:	f8c8 4814 	str.w	r4, [r8, #2068]	@ 0x814
 8019220:	f8c8 5810 	str.w	r5, [r8, #2064]	@ 0x810
 8019224:	f7fe f834 	bl	8017290 <rmw_uros_epoch_nanos>
 8019228:	f608 0218 	addw	r2, r8, #2072	@ 0x818
 801922c:	2305      	movs	r3, #5
 801922e:	e9c2 0100 	strd	r0, r1, [r2]
 8019232:	f888 3820 	strb.w	r3, [r8, #2080]	@ 0x820
 8019236:	b014      	add	sp, #80	@ 0x50
 8019238:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801923c:	2000ab24 	.word	0x2000ab24
 8019240:	200078b8 	.word	0x200078b8

08019244 <on_request>:
 8019244:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8019248:	4822      	ldr	r0, [pc, #136]	@ (80192d4 <on_request+0x90>)
 801924a:	b095      	sub	sp, #84	@ 0x54
 801924c:	9113      	str	r1, [sp, #76]	@ 0x4c
 801924e:	6801      	ldr	r1, [r0, #0]
 8019250:	9f1c      	ldr	r7, [sp, #112]	@ 0x70
 8019252:	f8bd 6074 	ldrh.w	r6, [sp, #116]	@ 0x74
 8019256:	2900      	cmp	r1, #0
 8019258:	d039      	beq.n	80192ce <on_request+0x8a>
 801925a:	461d      	mov	r5, r3
 801925c:	e001      	b.n	8019262 <on_request+0x1e>
 801925e:	6889      	ldr	r1, [r1, #8]
 8019260:	b3a9      	cbz	r1, 80192ce <on_request+0x8a>
 8019262:	68cc      	ldr	r4, [r1, #12]
 8019264:	8b20      	ldrh	r0, [r4, #24]
 8019266:	4290      	cmp	r0, r2
 8019268:	d1f9      	bne.n	801925e <on_request+0x1a>
 801926a:	2248      	movs	r2, #72	@ 0x48
 801926c:	f104 0128 	add.w	r1, r4, #40	@ 0x28
 8019270:	4668      	mov	r0, sp
 8019272:	f000 fdae 	bl	8019dd2 <memcpy>
 8019276:	e9d4 2308 	ldrd	r2, r3, [r4, #32]
 801927a:	4620      	mov	r0, r4
 801927c:	f7f5 fc46 	bl	800eb0c <rmw_uxrce_get_static_input_buffer_for_entity>
 8019280:	4680      	mov	r8, r0
 8019282:	b320      	cbz	r0, 80192ce <on_request+0x8a>
 8019284:	f8d0 900c 	ldr.w	r9, [r0, #12]
 8019288:	4632      	mov	r2, r6
 801928a:	4638      	mov	r0, r7
 801928c:	f109 0110 	add.w	r1, r9, #16
 8019290:	f7fe f966 	bl	8017560 <ucdr_deserialize_array_uint8_t>
 8019294:	b930      	cbnz	r0, 80192a4 <on_request+0x60>
 8019296:	4810      	ldr	r0, [pc, #64]	@ (80192d8 <on_request+0x94>)
 8019298:	4641      	mov	r1, r8
 801929a:	b015      	add	sp, #84	@ 0x54
 801929c:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80192a0:	f7fc bf30 	b.w	8016104 <put_memory>
 80192a4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80192a6:	f8c9 4814 	str.w	r4, [r9, #2068]	@ 0x814
 80192aa:	f609 0428 	addw	r4, r9, #2088	@ 0x828
 80192ae:	f8c9 6810 	str.w	r6, [r9, #2064]	@ 0x810
 80192b2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80192b4:	e895 0003 	ldmia.w	r5, {r0, r1}
 80192b8:	e884 0003 	stmia.w	r4, {r0, r1}
 80192bc:	f7fd ffe8 	bl	8017290 <rmw_uros_epoch_nanos>
 80192c0:	f609 0218 	addw	r2, r9, #2072	@ 0x818
 80192c4:	2303      	movs	r3, #3
 80192c6:	e9c2 0100 	strd	r0, r1, [r2]
 80192ca:	f889 3820 	strb.w	r3, [r9, #2080]	@ 0x820
 80192ce:	b015      	add	sp, #84	@ 0x54
 80192d0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80192d4:	2000ab14 	.word	0x2000ab14
 80192d8:	200078b8 	.word	0x200078b8

080192dc <on_reply>:
 80192dc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80192e0:	4821      	ldr	r0, [pc, #132]	@ (8019368 <on_reply+0x8c>)
 80192e2:	b095      	sub	sp, #84	@ 0x54
 80192e4:	9113      	str	r1, [sp, #76]	@ 0x4c
 80192e6:	6801      	ldr	r1, [r0, #0]
 80192e8:	9f1c      	ldr	r7, [sp, #112]	@ 0x70
 80192ea:	f8bd 6074 	ldrh.w	r6, [sp, #116]	@ 0x74
 80192ee:	b3b9      	cbz	r1, 8019360 <on_reply+0x84>
 80192f0:	461d      	mov	r5, r3
 80192f2:	e001      	b.n	80192f8 <on_reply+0x1c>
 80192f4:	6889      	ldr	r1, [r1, #8]
 80192f6:	b399      	cbz	r1, 8019360 <on_reply+0x84>
 80192f8:	68cc      	ldr	r4, [r1, #12]
 80192fa:	8b20      	ldrh	r0, [r4, #24]
 80192fc:	4290      	cmp	r0, r2
 80192fe:	d1f9      	bne.n	80192f4 <on_reply+0x18>
 8019300:	2248      	movs	r2, #72	@ 0x48
 8019302:	f104 0128 	add.w	r1, r4, #40	@ 0x28
 8019306:	4668      	mov	r0, sp
 8019308:	f000 fd63 	bl	8019dd2 <memcpy>
 801930c:	e9d4 2308 	ldrd	r2, r3, [r4, #32]
 8019310:	4620      	mov	r0, r4
 8019312:	f7f5 fbfb 	bl	800eb0c <rmw_uxrce_get_static_input_buffer_for_entity>
 8019316:	4680      	mov	r8, r0
 8019318:	b310      	cbz	r0, 8019360 <on_reply+0x84>
 801931a:	f8d0 900c 	ldr.w	r9, [r0, #12]
 801931e:	4632      	mov	r2, r6
 8019320:	4638      	mov	r0, r7
 8019322:	f109 0110 	add.w	r1, r9, #16
 8019326:	f7fe f91b 	bl	8017560 <ucdr_deserialize_array_uint8_t>
 801932a:	b930      	cbnz	r0, 801933a <on_reply+0x5e>
 801932c:	480f      	ldr	r0, [pc, #60]	@ (801936c <on_reply+0x90>)
 801932e:	4641      	mov	r1, r8
 8019330:	b015      	add	sp, #84	@ 0x54
 8019332:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8019336:	f7fc bee5 	b.w	8016104 <put_memory>
 801933a:	b2aa      	uxth	r2, r5
 801933c:	2300      	movs	r3, #0
 801933e:	f609 0128 	addw	r1, r9, #2088	@ 0x828
 8019342:	f8c9 4814 	str.w	r4, [r9, #2068]	@ 0x814
 8019346:	f8c9 6810 	str.w	r6, [r9, #2064]	@ 0x810
 801934a:	e9c1 2300 	strd	r2, r3, [r1]
 801934e:	f7fd ff9f 	bl	8017290 <rmw_uros_epoch_nanos>
 8019352:	f609 0218 	addw	r2, r9, #2072	@ 0x818
 8019356:	2304      	movs	r3, #4
 8019358:	e9c2 0100 	strd	r0, r1, [r2]
 801935c:	f889 3820 	strb.w	r3, [r9, #2080]	@ 0x820
 8019360:	b015      	add	sp, #84	@ 0x54
 8019362:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8019366:	bf00      	nop
 8019368:	20008148 	.word	0x20008148
 801936c:	200078b8 	.word	0x200078b8

08019370 <rmw_create_guard_condition>:
 8019370:	b538      	push	{r3, r4, r5, lr}
 8019372:	4605      	mov	r5, r0
 8019374:	4807      	ldr	r0, [pc, #28]	@ (8019394 <rmw_create_guard_condition+0x24>)
 8019376:	f7fc feb5 	bl	80160e4 <get_memory>
 801937a:	b148      	cbz	r0, 8019390 <rmw_create_guard_condition+0x20>
 801937c:	68c4      	ldr	r4, [r0, #12]
 801937e:	2300      	movs	r3, #0
 8019380:	61e5      	str	r5, [r4, #28]
 8019382:	7423      	strb	r3, [r4, #16]
 8019384:	f7fc ff16 	bl	80161b4 <rmw_get_implementation_identifier>
 8019388:	e9c4 0405 	strd	r0, r4, [r4, #20]
 801938c:	f104 0014 	add.w	r0, r4, #20
 8019390:	bd38      	pop	{r3, r4, r5, pc}
 8019392:	bf00      	nop
 8019394:	2000aa40 	.word	0x2000aa40

08019398 <rmw_destroy_guard_condition>:
 8019398:	b508      	push	{r3, lr}
 801939a:	4b08      	ldr	r3, [pc, #32]	@ (80193bc <rmw_destroy_guard_condition+0x24>)
 801939c:	6819      	ldr	r1, [r3, #0]
 801939e:	b911      	cbnz	r1, 80193a6 <rmw_destroy_guard_condition+0xe>
 80193a0:	e00a      	b.n	80193b8 <rmw_destroy_guard_condition+0x20>
 80193a2:	6889      	ldr	r1, [r1, #8]
 80193a4:	b141      	cbz	r1, 80193b8 <rmw_destroy_guard_condition+0x20>
 80193a6:	68cb      	ldr	r3, [r1, #12]
 80193a8:	3314      	adds	r3, #20
 80193aa:	4298      	cmp	r0, r3
 80193ac:	d1f9      	bne.n	80193a2 <rmw_destroy_guard_condition+0xa>
 80193ae:	4803      	ldr	r0, [pc, #12]	@ (80193bc <rmw_destroy_guard_condition+0x24>)
 80193b0:	f7fc fea8 	bl	8016104 <put_memory>
 80193b4:	2000      	movs	r0, #0
 80193b6:	bd08      	pop	{r3, pc}
 80193b8:	2001      	movs	r0, #1
 80193ba:	bd08      	pop	{r3, pc}
 80193bc:	2000aa40 	.word	0x2000aa40

080193c0 <rmw_trigger_guard_condition>:
 80193c0:	b160      	cbz	r0, 80193dc <rmw_trigger_guard_condition+0x1c>
 80193c2:	b510      	push	{r4, lr}
 80193c4:	4604      	mov	r4, r0
 80193c6:	6800      	ldr	r0, [r0, #0]
 80193c8:	f7f5 fd0e 	bl	800ede8 <is_uxrce_rmw_identifier_valid>
 80193cc:	b908      	cbnz	r0, 80193d2 <rmw_trigger_guard_condition+0x12>
 80193ce:	2001      	movs	r0, #1
 80193d0:	bd10      	pop	{r4, pc}
 80193d2:	6863      	ldr	r3, [r4, #4]
 80193d4:	2201      	movs	r2, #1
 80193d6:	741a      	strb	r2, [r3, #16]
 80193d8:	2000      	movs	r0, #0
 80193da:	bd10      	pop	{r4, pc}
 80193dc:	2001      	movs	r0, #1
 80193de:	4770      	bx	lr

080193e0 <calloc>:
 80193e0:	4b02      	ldr	r3, [pc, #8]	@ (80193ec <calloc+0xc>)
 80193e2:	460a      	mov	r2, r1
 80193e4:	4601      	mov	r1, r0
 80193e6:	6818      	ldr	r0, [r3, #0]
 80193e8:	f000 b802 	b.w	80193f0 <_calloc_r>
 80193ec:	20000104 	.word	0x20000104

080193f0 <_calloc_r>:
 80193f0:	b570      	push	{r4, r5, r6, lr}
 80193f2:	fba1 5402 	umull	r5, r4, r1, r2
 80193f6:	b93c      	cbnz	r4, 8019408 <_calloc_r+0x18>
 80193f8:	4629      	mov	r1, r5
 80193fa:	f000 f887 	bl	801950c <_malloc_r>
 80193fe:	4606      	mov	r6, r0
 8019400:	b928      	cbnz	r0, 801940e <_calloc_r+0x1e>
 8019402:	2600      	movs	r6, #0
 8019404:	4630      	mov	r0, r6
 8019406:	bd70      	pop	{r4, r5, r6, pc}
 8019408:	220c      	movs	r2, #12
 801940a:	6002      	str	r2, [r0, #0]
 801940c:	e7f9      	b.n	8019402 <_calloc_r+0x12>
 801940e:	462a      	mov	r2, r5
 8019410:	4621      	mov	r1, r4
 8019412:	f000 fbbf 	bl	8019b94 <memset>
 8019416:	e7f5      	b.n	8019404 <_calloc_r+0x14>

08019418 <getenv>:
 8019418:	b507      	push	{r0, r1, r2, lr}
 801941a:	4b04      	ldr	r3, [pc, #16]	@ (801942c <getenv+0x14>)
 801941c:	4601      	mov	r1, r0
 801941e:	aa01      	add	r2, sp, #4
 8019420:	6818      	ldr	r0, [r3, #0]
 8019422:	f000 f805 	bl	8019430 <_findenv_r>
 8019426:	b003      	add	sp, #12
 8019428:	f85d fb04 	ldr.w	pc, [sp], #4
 801942c:	20000104 	.word	0x20000104

08019430 <_findenv_r>:
 8019430:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019434:	f8df a06c 	ldr.w	sl, [pc, #108]	@ 80194a4 <_findenv_r+0x74>
 8019438:	4606      	mov	r6, r0
 801943a:	4689      	mov	r9, r1
 801943c:	4617      	mov	r7, r2
 801943e:	f000 fcf5 	bl	8019e2c <__env_lock>
 8019442:	f8da 4000 	ldr.w	r4, [sl]
 8019446:	b134      	cbz	r4, 8019456 <_findenv_r+0x26>
 8019448:	464b      	mov	r3, r9
 801944a:	4698      	mov	r8, r3
 801944c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8019450:	b13a      	cbz	r2, 8019462 <_findenv_r+0x32>
 8019452:	2a3d      	cmp	r2, #61	@ 0x3d
 8019454:	d1f9      	bne.n	801944a <_findenv_r+0x1a>
 8019456:	4630      	mov	r0, r6
 8019458:	f000 fcee 	bl	8019e38 <__env_unlock>
 801945c:	2000      	movs	r0, #0
 801945e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019462:	eba8 0809 	sub.w	r8, r8, r9
 8019466:	46a3      	mov	fp, r4
 8019468:	f854 0b04 	ldr.w	r0, [r4], #4
 801946c:	2800      	cmp	r0, #0
 801946e:	d0f2      	beq.n	8019456 <_findenv_r+0x26>
 8019470:	4642      	mov	r2, r8
 8019472:	4649      	mov	r1, r9
 8019474:	f000 fba3 	bl	8019bbe <strncmp>
 8019478:	2800      	cmp	r0, #0
 801947a:	d1f4      	bne.n	8019466 <_findenv_r+0x36>
 801947c:	f854 3c04 	ldr.w	r3, [r4, #-4]
 8019480:	eb03 0508 	add.w	r5, r3, r8
 8019484:	f813 3008 	ldrb.w	r3, [r3, r8]
 8019488:	2b3d      	cmp	r3, #61	@ 0x3d
 801948a:	d1ec      	bne.n	8019466 <_findenv_r+0x36>
 801948c:	f8da 3000 	ldr.w	r3, [sl]
 8019490:	ebab 0303 	sub.w	r3, fp, r3
 8019494:	109b      	asrs	r3, r3, #2
 8019496:	4630      	mov	r0, r6
 8019498:	603b      	str	r3, [r7, #0]
 801949a:	f000 fccd 	bl	8019e38 <__env_unlock>
 801949e:	1c68      	adds	r0, r5, #1
 80194a0:	e7dd      	b.n	801945e <_findenv_r+0x2e>
 80194a2:	bf00      	nop
 80194a4:	2000003c 	.word	0x2000003c

080194a8 <malloc>:
 80194a8:	4b02      	ldr	r3, [pc, #8]	@ (80194b4 <malloc+0xc>)
 80194aa:	4601      	mov	r1, r0
 80194ac:	6818      	ldr	r0, [r3, #0]
 80194ae:	f000 b82d 	b.w	801950c <_malloc_r>
 80194b2:	bf00      	nop
 80194b4:	20000104 	.word	0x20000104

080194b8 <free>:
 80194b8:	4b02      	ldr	r3, [pc, #8]	@ (80194c4 <free+0xc>)
 80194ba:	4601      	mov	r1, r0
 80194bc:	6818      	ldr	r0, [r3, #0]
 80194be:	f000 bcc1 	b.w	8019e44 <_free_r>
 80194c2:	bf00      	nop
 80194c4:	20000104 	.word	0x20000104

080194c8 <sbrk_aligned>:
 80194c8:	b570      	push	{r4, r5, r6, lr}
 80194ca:	4e0f      	ldr	r6, [pc, #60]	@ (8019508 <sbrk_aligned+0x40>)
 80194cc:	460c      	mov	r4, r1
 80194ce:	6831      	ldr	r1, [r6, #0]
 80194d0:	4605      	mov	r5, r0
 80194d2:	b911      	cbnz	r1, 80194da <sbrk_aligned+0x12>
 80194d4:	f000 fc26 	bl	8019d24 <_sbrk_r>
 80194d8:	6030      	str	r0, [r6, #0]
 80194da:	4621      	mov	r1, r4
 80194dc:	4628      	mov	r0, r5
 80194de:	f000 fc21 	bl	8019d24 <_sbrk_r>
 80194e2:	1c43      	adds	r3, r0, #1
 80194e4:	d103      	bne.n	80194ee <sbrk_aligned+0x26>
 80194e6:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 80194ea:	4620      	mov	r0, r4
 80194ec:	bd70      	pop	{r4, r5, r6, pc}
 80194ee:	1cc4      	adds	r4, r0, #3
 80194f0:	f024 0403 	bic.w	r4, r4, #3
 80194f4:	42a0      	cmp	r0, r4
 80194f6:	d0f8      	beq.n	80194ea <sbrk_aligned+0x22>
 80194f8:	1a21      	subs	r1, r4, r0
 80194fa:	4628      	mov	r0, r5
 80194fc:	f000 fc12 	bl	8019d24 <_sbrk_r>
 8019500:	3001      	adds	r0, #1
 8019502:	d1f2      	bne.n	80194ea <sbrk_aligned+0x22>
 8019504:	e7ef      	b.n	80194e6 <sbrk_aligned+0x1e>
 8019506:	bf00      	nop
 8019508:	20007734 	.word	0x20007734

0801950c <_malloc_r>:
 801950c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8019510:	1ccd      	adds	r5, r1, #3
 8019512:	f025 0503 	bic.w	r5, r5, #3
 8019516:	3508      	adds	r5, #8
 8019518:	2d0c      	cmp	r5, #12
 801951a:	bf38      	it	cc
 801951c:	250c      	movcc	r5, #12
 801951e:	2d00      	cmp	r5, #0
 8019520:	4606      	mov	r6, r0
 8019522:	db01      	blt.n	8019528 <_malloc_r+0x1c>
 8019524:	42a9      	cmp	r1, r5
 8019526:	d904      	bls.n	8019532 <_malloc_r+0x26>
 8019528:	230c      	movs	r3, #12
 801952a:	6033      	str	r3, [r6, #0]
 801952c:	2000      	movs	r0, #0
 801952e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8019532:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8019608 <_malloc_r+0xfc>
 8019536:	f000 f869 	bl	801960c <__malloc_lock>
 801953a:	f8d8 3000 	ldr.w	r3, [r8]
 801953e:	461c      	mov	r4, r3
 8019540:	bb44      	cbnz	r4, 8019594 <_malloc_r+0x88>
 8019542:	4629      	mov	r1, r5
 8019544:	4630      	mov	r0, r6
 8019546:	f7ff ffbf 	bl	80194c8 <sbrk_aligned>
 801954a:	1c43      	adds	r3, r0, #1
 801954c:	4604      	mov	r4, r0
 801954e:	d158      	bne.n	8019602 <_malloc_r+0xf6>
 8019550:	f8d8 4000 	ldr.w	r4, [r8]
 8019554:	4627      	mov	r7, r4
 8019556:	2f00      	cmp	r7, #0
 8019558:	d143      	bne.n	80195e2 <_malloc_r+0xd6>
 801955a:	2c00      	cmp	r4, #0
 801955c:	d04b      	beq.n	80195f6 <_malloc_r+0xea>
 801955e:	6823      	ldr	r3, [r4, #0]
 8019560:	4639      	mov	r1, r7
 8019562:	4630      	mov	r0, r6
 8019564:	eb04 0903 	add.w	r9, r4, r3
 8019568:	f000 fbdc 	bl	8019d24 <_sbrk_r>
 801956c:	4581      	cmp	r9, r0
 801956e:	d142      	bne.n	80195f6 <_malloc_r+0xea>
 8019570:	6821      	ldr	r1, [r4, #0]
 8019572:	1a6d      	subs	r5, r5, r1
 8019574:	4629      	mov	r1, r5
 8019576:	4630      	mov	r0, r6
 8019578:	f7ff ffa6 	bl	80194c8 <sbrk_aligned>
 801957c:	3001      	adds	r0, #1
 801957e:	d03a      	beq.n	80195f6 <_malloc_r+0xea>
 8019580:	6823      	ldr	r3, [r4, #0]
 8019582:	442b      	add	r3, r5
 8019584:	6023      	str	r3, [r4, #0]
 8019586:	f8d8 3000 	ldr.w	r3, [r8]
 801958a:	685a      	ldr	r2, [r3, #4]
 801958c:	bb62      	cbnz	r2, 80195e8 <_malloc_r+0xdc>
 801958e:	f8c8 7000 	str.w	r7, [r8]
 8019592:	e00f      	b.n	80195b4 <_malloc_r+0xa8>
 8019594:	6822      	ldr	r2, [r4, #0]
 8019596:	1b52      	subs	r2, r2, r5
 8019598:	d420      	bmi.n	80195dc <_malloc_r+0xd0>
 801959a:	2a0b      	cmp	r2, #11
 801959c:	d917      	bls.n	80195ce <_malloc_r+0xc2>
 801959e:	1961      	adds	r1, r4, r5
 80195a0:	42a3      	cmp	r3, r4
 80195a2:	6025      	str	r5, [r4, #0]
 80195a4:	bf18      	it	ne
 80195a6:	6059      	strne	r1, [r3, #4]
 80195a8:	6863      	ldr	r3, [r4, #4]
 80195aa:	bf08      	it	eq
 80195ac:	f8c8 1000 	streq.w	r1, [r8]
 80195b0:	5162      	str	r2, [r4, r5]
 80195b2:	604b      	str	r3, [r1, #4]
 80195b4:	4630      	mov	r0, r6
 80195b6:	f000 f82f 	bl	8019618 <__malloc_unlock>
 80195ba:	f104 000b 	add.w	r0, r4, #11
 80195be:	1d23      	adds	r3, r4, #4
 80195c0:	f020 0007 	bic.w	r0, r0, #7
 80195c4:	1ac2      	subs	r2, r0, r3
 80195c6:	bf1c      	itt	ne
 80195c8:	1a1b      	subne	r3, r3, r0
 80195ca:	50a3      	strne	r3, [r4, r2]
 80195cc:	e7af      	b.n	801952e <_malloc_r+0x22>
 80195ce:	6862      	ldr	r2, [r4, #4]
 80195d0:	42a3      	cmp	r3, r4
 80195d2:	bf0c      	ite	eq
 80195d4:	f8c8 2000 	streq.w	r2, [r8]
 80195d8:	605a      	strne	r2, [r3, #4]
 80195da:	e7eb      	b.n	80195b4 <_malloc_r+0xa8>
 80195dc:	4623      	mov	r3, r4
 80195de:	6864      	ldr	r4, [r4, #4]
 80195e0:	e7ae      	b.n	8019540 <_malloc_r+0x34>
 80195e2:	463c      	mov	r4, r7
 80195e4:	687f      	ldr	r7, [r7, #4]
 80195e6:	e7b6      	b.n	8019556 <_malloc_r+0x4a>
 80195e8:	461a      	mov	r2, r3
 80195ea:	685b      	ldr	r3, [r3, #4]
 80195ec:	42a3      	cmp	r3, r4
 80195ee:	d1fb      	bne.n	80195e8 <_malloc_r+0xdc>
 80195f0:	2300      	movs	r3, #0
 80195f2:	6053      	str	r3, [r2, #4]
 80195f4:	e7de      	b.n	80195b4 <_malloc_r+0xa8>
 80195f6:	230c      	movs	r3, #12
 80195f8:	6033      	str	r3, [r6, #0]
 80195fa:	4630      	mov	r0, r6
 80195fc:	f000 f80c 	bl	8019618 <__malloc_unlock>
 8019600:	e794      	b.n	801952c <_malloc_r+0x20>
 8019602:	6005      	str	r5, [r0, #0]
 8019604:	e7d6      	b.n	80195b4 <_malloc_r+0xa8>
 8019606:	bf00      	nop
 8019608:	20007738 	.word	0x20007738

0801960c <__malloc_lock>:
 801960c:	4801      	ldr	r0, [pc, #4]	@ (8019614 <__malloc_lock+0x8>)
 801960e:	f000 bbd6 	b.w	8019dbe <__retarget_lock_acquire_recursive>
 8019612:	bf00      	nop
 8019614:	2000787d 	.word	0x2000787d

08019618 <__malloc_unlock>:
 8019618:	4801      	ldr	r0, [pc, #4]	@ (8019620 <__malloc_unlock+0x8>)
 801961a:	f000 bbd1 	b.w	8019dc0 <__retarget_lock_release_recursive>
 801961e:	bf00      	nop
 8019620:	2000787d 	.word	0x2000787d

08019624 <srand>:
 8019624:	b538      	push	{r3, r4, r5, lr}
 8019626:	4b10      	ldr	r3, [pc, #64]	@ (8019668 <srand+0x44>)
 8019628:	681d      	ldr	r5, [r3, #0]
 801962a:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 801962c:	4604      	mov	r4, r0
 801962e:	b9b3      	cbnz	r3, 801965e <srand+0x3a>
 8019630:	2018      	movs	r0, #24
 8019632:	f7ff ff39 	bl	80194a8 <malloc>
 8019636:	4602      	mov	r2, r0
 8019638:	6328      	str	r0, [r5, #48]	@ 0x30
 801963a:	b920      	cbnz	r0, 8019646 <srand+0x22>
 801963c:	4b0b      	ldr	r3, [pc, #44]	@ (801966c <srand+0x48>)
 801963e:	480c      	ldr	r0, [pc, #48]	@ (8019670 <srand+0x4c>)
 8019640:	2146      	movs	r1, #70	@ 0x46
 8019642:	f000 fbd5 	bl	8019df0 <__assert_func>
 8019646:	490b      	ldr	r1, [pc, #44]	@ (8019674 <srand+0x50>)
 8019648:	4b0b      	ldr	r3, [pc, #44]	@ (8019678 <srand+0x54>)
 801964a:	e9c0 1300 	strd	r1, r3, [r0]
 801964e:	4b0b      	ldr	r3, [pc, #44]	@ (801967c <srand+0x58>)
 8019650:	6083      	str	r3, [r0, #8]
 8019652:	230b      	movs	r3, #11
 8019654:	8183      	strh	r3, [r0, #12]
 8019656:	2100      	movs	r1, #0
 8019658:	2001      	movs	r0, #1
 801965a:	e9c2 0104 	strd	r0, r1, [r2, #16]
 801965e:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8019660:	2200      	movs	r2, #0
 8019662:	611c      	str	r4, [r3, #16]
 8019664:	615a      	str	r2, [r3, #20]
 8019666:	bd38      	pop	{r3, r4, r5, pc}
 8019668:	20000104 	.word	0x20000104
 801966c:	0801c590 	.word	0x0801c590
 8019670:	0801c5a7 	.word	0x0801c5a7
 8019674:	abcd330e 	.word	0xabcd330e
 8019678:	e66d1234 	.word	0xe66d1234
 801967c:	0005deec 	.word	0x0005deec

08019680 <rand>:
 8019680:	4b16      	ldr	r3, [pc, #88]	@ (80196dc <rand+0x5c>)
 8019682:	b510      	push	{r4, lr}
 8019684:	681c      	ldr	r4, [r3, #0]
 8019686:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8019688:	b9b3      	cbnz	r3, 80196b8 <rand+0x38>
 801968a:	2018      	movs	r0, #24
 801968c:	f7ff ff0c 	bl	80194a8 <malloc>
 8019690:	4602      	mov	r2, r0
 8019692:	6320      	str	r0, [r4, #48]	@ 0x30
 8019694:	b920      	cbnz	r0, 80196a0 <rand+0x20>
 8019696:	4b12      	ldr	r3, [pc, #72]	@ (80196e0 <rand+0x60>)
 8019698:	4812      	ldr	r0, [pc, #72]	@ (80196e4 <rand+0x64>)
 801969a:	2152      	movs	r1, #82	@ 0x52
 801969c:	f000 fba8 	bl	8019df0 <__assert_func>
 80196a0:	4911      	ldr	r1, [pc, #68]	@ (80196e8 <rand+0x68>)
 80196a2:	4b12      	ldr	r3, [pc, #72]	@ (80196ec <rand+0x6c>)
 80196a4:	e9c0 1300 	strd	r1, r3, [r0]
 80196a8:	4b11      	ldr	r3, [pc, #68]	@ (80196f0 <rand+0x70>)
 80196aa:	6083      	str	r3, [r0, #8]
 80196ac:	230b      	movs	r3, #11
 80196ae:	8183      	strh	r3, [r0, #12]
 80196b0:	2100      	movs	r1, #0
 80196b2:	2001      	movs	r0, #1
 80196b4:	e9c2 0104 	strd	r0, r1, [r2, #16]
 80196b8:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 80196ba:	480e      	ldr	r0, [pc, #56]	@ (80196f4 <rand+0x74>)
 80196bc:	690b      	ldr	r3, [r1, #16]
 80196be:	694c      	ldr	r4, [r1, #20]
 80196c0:	4a0d      	ldr	r2, [pc, #52]	@ (80196f8 <rand+0x78>)
 80196c2:	4358      	muls	r0, r3
 80196c4:	fb02 0004 	mla	r0, r2, r4, r0
 80196c8:	fba3 3202 	umull	r3, r2, r3, r2
 80196cc:	3301      	adds	r3, #1
 80196ce:	eb40 0002 	adc.w	r0, r0, r2
 80196d2:	e9c1 3004 	strd	r3, r0, [r1, #16]
 80196d6:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 80196da:	bd10      	pop	{r4, pc}
 80196dc:	20000104 	.word	0x20000104
 80196e0:	0801c590 	.word	0x0801c590
 80196e4:	0801c5a7 	.word	0x0801c5a7
 80196e8:	abcd330e 	.word	0xabcd330e
 80196ec:	e66d1234 	.word	0xe66d1234
 80196f0:	0005deec 	.word	0x0005deec
 80196f4:	5851f42d 	.word	0x5851f42d
 80196f8:	4c957f2d 	.word	0x4c957f2d

080196fc <realloc>:
 80196fc:	4b02      	ldr	r3, [pc, #8]	@ (8019708 <realloc+0xc>)
 80196fe:	460a      	mov	r2, r1
 8019700:	4601      	mov	r1, r0
 8019702:	6818      	ldr	r0, [r3, #0]
 8019704:	f000 b802 	b.w	801970c <_realloc_r>
 8019708:	20000104 	.word	0x20000104

0801970c <_realloc_r>:
 801970c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019710:	4680      	mov	r8, r0
 8019712:	4615      	mov	r5, r2
 8019714:	460c      	mov	r4, r1
 8019716:	b921      	cbnz	r1, 8019722 <_realloc_r+0x16>
 8019718:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801971c:	4611      	mov	r1, r2
 801971e:	f7ff bef5 	b.w	801950c <_malloc_r>
 8019722:	b92a      	cbnz	r2, 8019730 <_realloc_r+0x24>
 8019724:	f000 fb8e 	bl	8019e44 <_free_r>
 8019728:	2400      	movs	r4, #0
 801972a:	4620      	mov	r0, r4
 801972c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8019730:	f000 fbd2 	bl	8019ed8 <_malloc_usable_size_r>
 8019734:	4285      	cmp	r5, r0
 8019736:	4606      	mov	r6, r0
 8019738:	d802      	bhi.n	8019740 <_realloc_r+0x34>
 801973a:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 801973e:	d8f4      	bhi.n	801972a <_realloc_r+0x1e>
 8019740:	4629      	mov	r1, r5
 8019742:	4640      	mov	r0, r8
 8019744:	f7ff fee2 	bl	801950c <_malloc_r>
 8019748:	4607      	mov	r7, r0
 801974a:	2800      	cmp	r0, #0
 801974c:	d0ec      	beq.n	8019728 <_realloc_r+0x1c>
 801974e:	42b5      	cmp	r5, r6
 8019750:	462a      	mov	r2, r5
 8019752:	4621      	mov	r1, r4
 8019754:	bf28      	it	cs
 8019756:	4632      	movcs	r2, r6
 8019758:	f000 fb3b 	bl	8019dd2 <memcpy>
 801975c:	4621      	mov	r1, r4
 801975e:	4640      	mov	r0, r8
 8019760:	f000 fb70 	bl	8019e44 <_free_r>
 8019764:	463c      	mov	r4, r7
 8019766:	e7e0      	b.n	801972a <_realloc_r+0x1e>

08019768 <_strtoul_l.constprop.0>:
 8019768:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801976c:	4e34      	ldr	r6, [pc, #208]	@ (8019840 <_strtoul_l.constprop.0+0xd8>)
 801976e:	4686      	mov	lr, r0
 8019770:	460d      	mov	r5, r1
 8019772:	4628      	mov	r0, r5
 8019774:	f815 4b01 	ldrb.w	r4, [r5], #1
 8019778:	5d37      	ldrb	r7, [r6, r4]
 801977a:	f017 0708 	ands.w	r7, r7, #8
 801977e:	d1f8      	bne.n	8019772 <_strtoul_l.constprop.0+0xa>
 8019780:	2c2d      	cmp	r4, #45	@ 0x2d
 8019782:	d12f      	bne.n	80197e4 <_strtoul_l.constprop.0+0x7c>
 8019784:	782c      	ldrb	r4, [r5, #0]
 8019786:	2701      	movs	r7, #1
 8019788:	1c85      	adds	r5, r0, #2
 801978a:	f033 0010 	bics.w	r0, r3, #16
 801978e:	d109      	bne.n	80197a4 <_strtoul_l.constprop.0+0x3c>
 8019790:	2c30      	cmp	r4, #48	@ 0x30
 8019792:	d12c      	bne.n	80197ee <_strtoul_l.constprop.0+0x86>
 8019794:	7828      	ldrb	r0, [r5, #0]
 8019796:	f000 00df 	and.w	r0, r0, #223	@ 0xdf
 801979a:	2858      	cmp	r0, #88	@ 0x58
 801979c:	d127      	bne.n	80197ee <_strtoul_l.constprop.0+0x86>
 801979e:	786c      	ldrb	r4, [r5, #1]
 80197a0:	2310      	movs	r3, #16
 80197a2:	3502      	adds	r5, #2
 80197a4:	f04f 38ff 	mov.w	r8, #4294967295	@ 0xffffffff
 80197a8:	2600      	movs	r6, #0
 80197aa:	fbb8 f8f3 	udiv	r8, r8, r3
 80197ae:	fb03 f908 	mul.w	r9, r3, r8
 80197b2:	ea6f 0909 	mvn.w	r9, r9
 80197b6:	4630      	mov	r0, r6
 80197b8:	f1a4 0c30 	sub.w	ip, r4, #48	@ 0x30
 80197bc:	f1bc 0f09 	cmp.w	ip, #9
 80197c0:	d81c      	bhi.n	80197fc <_strtoul_l.constprop.0+0x94>
 80197c2:	4664      	mov	r4, ip
 80197c4:	42a3      	cmp	r3, r4
 80197c6:	dd2a      	ble.n	801981e <_strtoul_l.constprop.0+0xb6>
 80197c8:	f1b6 3fff 	cmp.w	r6, #4294967295	@ 0xffffffff
 80197cc:	d007      	beq.n	80197de <_strtoul_l.constprop.0+0x76>
 80197ce:	4580      	cmp	r8, r0
 80197d0:	d322      	bcc.n	8019818 <_strtoul_l.constprop.0+0xb0>
 80197d2:	d101      	bne.n	80197d8 <_strtoul_l.constprop.0+0x70>
 80197d4:	45a1      	cmp	r9, r4
 80197d6:	db1f      	blt.n	8019818 <_strtoul_l.constprop.0+0xb0>
 80197d8:	fb00 4003 	mla	r0, r0, r3, r4
 80197dc:	2601      	movs	r6, #1
 80197de:	f815 4b01 	ldrb.w	r4, [r5], #1
 80197e2:	e7e9      	b.n	80197b8 <_strtoul_l.constprop.0+0x50>
 80197e4:	2c2b      	cmp	r4, #43	@ 0x2b
 80197e6:	bf04      	itt	eq
 80197e8:	782c      	ldrbeq	r4, [r5, #0]
 80197ea:	1c85      	addeq	r5, r0, #2
 80197ec:	e7cd      	b.n	801978a <_strtoul_l.constprop.0+0x22>
 80197ee:	2b00      	cmp	r3, #0
 80197f0:	d1d8      	bne.n	80197a4 <_strtoul_l.constprop.0+0x3c>
 80197f2:	2c30      	cmp	r4, #48	@ 0x30
 80197f4:	bf0c      	ite	eq
 80197f6:	2308      	moveq	r3, #8
 80197f8:	230a      	movne	r3, #10
 80197fa:	e7d3      	b.n	80197a4 <_strtoul_l.constprop.0+0x3c>
 80197fc:	f1a4 0c41 	sub.w	ip, r4, #65	@ 0x41
 8019800:	f1bc 0f19 	cmp.w	ip, #25
 8019804:	d801      	bhi.n	801980a <_strtoul_l.constprop.0+0xa2>
 8019806:	3c37      	subs	r4, #55	@ 0x37
 8019808:	e7dc      	b.n	80197c4 <_strtoul_l.constprop.0+0x5c>
 801980a:	f1a4 0c61 	sub.w	ip, r4, #97	@ 0x61
 801980e:	f1bc 0f19 	cmp.w	ip, #25
 8019812:	d804      	bhi.n	801981e <_strtoul_l.constprop.0+0xb6>
 8019814:	3c57      	subs	r4, #87	@ 0x57
 8019816:	e7d5      	b.n	80197c4 <_strtoul_l.constprop.0+0x5c>
 8019818:	f04f 36ff 	mov.w	r6, #4294967295	@ 0xffffffff
 801981c:	e7df      	b.n	80197de <_strtoul_l.constprop.0+0x76>
 801981e:	1c73      	adds	r3, r6, #1
 8019820:	d106      	bne.n	8019830 <_strtoul_l.constprop.0+0xc8>
 8019822:	2322      	movs	r3, #34	@ 0x22
 8019824:	f8ce 3000 	str.w	r3, [lr]
 8019828:	4630      	mov	r0, r6
 801982a:	b932      	cbnz	r2, 801983a <_strtoul_l.constprop.0+0xd2>
 801982c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8019830:	b107      	cbz	r7, 8019834 <_strtoul_l.constprop.0+0xcc>
 8019832:	4240      	negs	r0, r0
 8019834:	2a00      	cmp	r2, #0
 8019836:	d0f9      	beq.n	801982c <_strtoul_l.constprop.0+0xc4>
 8019838:	b106      	cbz	r6, 801983c <_strtoul_l.constprop.0+0xd4>
 801983a:	1e69      	subs	r1, r5, #1
 801983c:	6011      	str	r1, [r2, #0]
 801983e:	e7f5      	b.n	801982c <_strtoul_l.constprop.0+0xc4>
 8019840:	0801c600 	.word	0x0801c600

08019844 <strtoul>:
 8019844:	4613      	mov	r3, r2
 8019846:	460a      	mov	r2, r1
 8019848:	4601      	mov	r1, r0
 801984a:	4802      	ldr	r0, [pc, #8]	@ (8019854 <strtoul+0x10>)
 801984c:	6800      	ldr	r0, [r0, #0]
 801984e:	f7ff bf8b 	b.w	8019768 <_strtoul_l.constprop.0>
 8019852:	bf00      	nop
 8019854:	20000104 	.word	0x20000104

08019858 <std>:
 8019858:	2300      	movs	r3, #0
 801985a:	b510      	push	{r4, lr}
 801985c:	4604      	mov	r4, r0
 801985e:	e9c0 3300 	strd	r3, r3, [r0]
 8019862:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8019866:	6083      	str	r3, [r0, #8]
 8019868:	8181      	strh	r1, [r0, #12]
 801986a:	6643      	str	r3, [r0, #100]	@ 0x64
 801986c:	81c2      	strh	r2, [r0, #14]
 801986e:	6183      	str	r3, [r0, #24]
 8019870:	4619      	mov	r1, r3
 8019872:	2208      	movs	r2, #8
 8019874:	305c      	adds	r0, #92	@ 0x5c
 8019876:	f000 f98d 	bl	8019b94 <memset>
 801987a:	4b0d      	ldr	r3, [pc, #52]	@ (80198b0 <std+0x58>)
 801987c:	6263      	str	r3, [r4, #36]	@ 0x24
 801987e:	4b0d      	ldr	r3, [pc, #52]	@ (80198b4 <std+0x5c>)
 8019880:	62a3      	str	r3, [r4, #40]	@ 0x28
 8019882:	4b0d      	ldr	r3, [pc, #52]	@ (80198b8 <std+0x60>)
 8019884:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8019886:	4b0d      	ldr	r3, [pc, #52]	@ (80198bc <std+0x64>)
 8019888:	6323      	str	r3, [r4, #48]	@ 0x30
 801988a:	4b0d      	ldr	r3, [pc, #52]	@ (80198c0 <std+0x68>)
 801988c:	6224      	str	r4, [r4, #32]
 801988e:	429c      	cmp	r4, r3
 8019890:	d006      	beq.n	80198a0 <std+0x48>
 8019892:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8019896:	4294      	cmp	r4, r2
 8019898:	d002      	beq.n	80198a0 <std+0x48>
 801989a:	33d0      	adds	r3, #208	@ 0xd0
 801989c:	429c      	cmp	r4, r3
 801989e:	d105      	bne.n	80198ac <std+0x54>
 80198a0:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80198a4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80198a8:	f000 ba88 	b.w	8019dbc <__retarget_lock_init_recursive>
 80198ac:	bd10      	pop	{r4, pc}
 80198ae:	bf00      	nop
 80198b0:	08019a69 	.word	0x08019a69
 80198b4:	08019a8b 	.word	0x08019a8b
 80198b8:	08019ac3 	.word	0x08019ac3
 80198bc:	08019ae7 	.word	0x08019ae7
 80198c0:	2000773c 	.word	0x2000773c

080198c4 <stdio_exit_handler>:
 80198c4:	4a02      	ldr	r2, [pc, #8]	@ (80198d0 <stdio_exit_handler+0xc>)
 80198c6:	4903      	ldr	r1, [pc, #12]	@ (80198d4 <stdio_exit_handler+0x10>)
 80198c8:	4803      	ldr	r0, [pc, #12]	@ (80198d8 <stdio_exit_handler+0x14>)
 80198ca:	f000 b869 	b.w	80199a0 <_fwalk_sglue>
 80198ce:	bf00      	nop
 80198d0:	200000f8 	.word	0x200000f8
 80198d4:	0801a841 	.word	0x0801a841
 80198d8:	20000108 	.word	0x20000108

080198dc <cleanup_stdio>:
 80198dc:	6841      	ldr	r1, [r0, #4]
 80198de:	4b0c      	ldr	r3, [pc, #48]	@ (8019910 <cleanup_stdio+0x34>)
 80198e0:	4299      	cmp	r1, r3
 80198e2:	b510      	push	{r4, lr}
 80198e4:	4604      	mov	r4, r0
 80198e6:	d001      	beq.n	80198ec <cleanup_stdio+0x10>
 80198e8:	f000 ffaa 	bl	801a840 <_fflush_r>
 80198ec:	68a1      	ldr	r1, [r4, #8]
 80198ee:	4b09      	ldr	r3, [pc, #36]	@ (8019914 <cleanup_stdio+0x38>)
 80198f0:	4299      	cmp	r1, r3
 80198f2:	d002      	beq.n	80198fa <cleanup_stdio+0x1e>
 80198f4:	4620      	mov	r0, r4
 80198f6:	f000 ffa3 	bl	801a840 <_fflush_r>
 80198fa:	68e1      	ldr	r1, [r4, #12]
 80198fc:	4b06      	ldr	r3, [pc, #24]	@ (8019918 <cleanup_stdio+0x3c>)
 80198fe:	4299      	cmp	r1, r3
 8019900:	d004      	beq.n	801990c <cleanup_stdio+0x30>
 8019902:	4620      	mov	r0, r4
 8019904:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8019908:	f000 bf9a 	b.w	801a840 <_fflush_r>
 801990c:	bd10      	pop	{r4, pc}
 801990e:	bf00      	nop
 8019910:	2000773c 	.word	0x2000773c
 8019914:	200077a4 	.word	0x200077a4
 8019918:	2000780c 	.word	0x2000780c

0801991c <global_stdio_init.part.0>:
 801991c:	b510      	push	{r4, lr}
 801991e:	4b0b      	ldr	r3, [pc, #44]	@ (801994c <global_stdio_init.part.0+0x30>)
 8019920:	4c0b      	ldr	r4, [pc, #44]	@ (8019950 <global_stdio_init.part.0+0x34>)
 8019922:	4a0c      	ldr	r2, [pc, #48]	@ (8019954 <global_stdio_init.part.0+0x38>)
 8019924:	601a      	str	r2, [r3, #0]
 8019926:	4620      	mov	r0, r4
 8019928:	2200      	movs	r2, #0
 801992a:	2104      	movs	r1, #4
 801992c:	f7ff ff94 	bl	8019858 <std>
 8019930:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8019934:	2201      	movs	r2, #1
 8019936:	2109      	movs	r1, #9
 8019938:	f7ff ff8e 	bl	8019858 <std>
 801993c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8019940:	2202      	movs	r2, #2
 8019942:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8019946:	2112      	movs	r1, #18
 8019948:	f7ff bf86 	b.w	8019858 <std>
 801994c:	20007874 	.word	0x20007874
 8019950:	2000773c 	.word	0x2000773c
 8019954:	080198c5 	.word	0x080198c5

08019958 <__sfp_lock_acquire>:
 8019958:	4801      	ldr	r0, [pc, #4]	@ (8019960 <__sfp_lock_acquire+0x8>)
 801995a:	f000 ba30 	b.w	8019dbe <__retarget_lock_acquire_recursive>
 801995e:	bf00      	nop
 8019960:	2000787e 	.word	0x2000787e

08019964 <__sfp_lock_release>:
 8019964:	4801      	ldr	r0, [pc, #4]	@ (801996c <__sfp_lock_release+0x8>)
 8019966:	f000 ba2b 	b.w	8019dc0 <__retarget_lock_release_recursive>
 801996a:	bf00      	nop
 801996c:	2000787e 	.word	0x2000787e

08019970 <__sinit>:
 8019970:	b510      	push	{r4, lr}
 8019972:	4604      	mov	r4, r0
 8019974:	f7ff fff0 	bl	8019958 <__sfp_lock_acquire>
 8019978:	6a23      	ldr	r3, [r4, #32]
 801997a:	b11b      	cbz	r3, 8019984 <__sinit+0x14>
 801997c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8019980:	f7ff bff0 	b.w	8019964 <__sfp_lock_release>
 8019984:	4b04      	ldr	r3, [pc, #16]	@ (8019998 <__sinit+0x28>)
 8019986:	6223      	str	r3, [r4, #32]
 8019988:	4b04      	ldr	r3, [pc, #16]	@ (801999c <__sinit+0x2c>)
 801998a:	681b      	ldr	r3, [r3, #0]
 801998c:	2b00      	cmp	r3, #0
 801998e:	d1f5      	bne.n	801997c <__sinit+0xc>
 8019990:	f7ff ffc4 	bl	801991c <global_stdio_init.part.0>
 8019994:	e7f2      	b.n	801997c <__sinit+0xc>
 8019996:	bf00      	nop
 8019998:	080198dd 	.word	0x080198dd
 801999c:	20007874 	.word	0x20007874

080199a0 <_fwalk_sglue>:
 80199a0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80199a4:	4607      	mov	r7, r0
 80199a6:	4688      	mov	r8, r1
 80199a8:	4614      	mov	r4, r2
 80199aa:	2600      	movs	r6, #0
 80199ac:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80199b0:	f1b9 0901 	subs.w	r9, r9, #1
 80199b4:	d505      	bpl.n	80199c2 <_fwalk_sglue+0x22>
 80199b6:	6824      	ldr	r4, [r4, #0]
 80199b8:	2c00      	cmp	r4, #0
 80199ba:	d1f7      	bne.n	80199ac <_fwalk_sglue+0xc>
 80199bc:	4630      	mov	r0, r6
 80199be:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80199c2:	89ab      	ldrh	r3, [r5, #12]
 80199c4:	2b01      	cmp	r3, #1
 80199c6:	d907      	bls.n	80199d8 <_fwalk_sglue+0x38>
 80199c8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80199cc:	3301      	adds	r3, #1
 80199ce:	d003      	beq.n	80199d8 <_fwalk_sglue+0x38>
 80199d0:	4629      	mov	r1, r5
 80199d2:	4638      	mov	r0, r7
 80199d4:	47c0      	blx	r8
 80199d6:	4306      	orrs	r6, r0
 80199d8:	3568      	adds	r5, #104	@ 0x68
 80199da:	e7e9      	b.n	80199b0 <_fwalk_sglue+0x10>

080199dc <iprintf>:
 80199dc:	b40f      	push	{r0, r1, r2, r3}
 80199de:	b507      	push	{r0, r1, r2, lr}
 80199e0:	4906      	ldr	r1, [pc, #24]	@ (80199fc <iprintf+0x20>)
 80199e2:	ab04      	add	r3, sp, #16
 80199e4:	6808      	ldr	r0, [r1, #0]
 80199e6:	f853 2b04 	ldr.w	r2, [r3], #4
 80199ea:	6881      	ldr	r1, [r0, #8]
 80199ec:	9301      	str	r3, [sp, #4]
 80199ee:	f000 fbfd 	bl	801a1ec <_vfiprintf_r>
 80199f2:	b003      	add	sp, #12
 80199f4:	f85d eb04 	ldr.w	lr, [sp], #4
 80199f8:	b004      	add	sp, #16
 80199fa:	4770      	bx	lr
 80199fc:	20000104 	.word	0x20000104

08019a00 <sniprintf>:
 8019a00:	b40c      	push	{r2, r3}
 8019a02:	b530      	push	{r4, r5, lr}
 8019a04:	4b17      	ldr	r3, [pc, #92]	@ (8019a64 <sniprintf+0x64>)
 8019a06:	1e0c      	subs	r4, r1, #0
 8019a08:	681d      	ldr	r5, [r3, #0]
 8019a0a:	b09d      	sub	sp, #116	@ 0x74
 8019a0c:	da08      	bge.n	8019a20 <sniprintf+0x20>
 8019a0e:	238b      	movs	r3, #139	@ 0x8b
 8019a10:	602b      	str	r3, [r5, #0]
 8019a12:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8019a16:	b01d      	add	sp, #116	@ 0x74
 8019a18:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8019a1c:	b002      	add	sp, #8
 8019a1e:	4770      	bx	lr
 8019a20:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8019a24:	f8ad 3014 	strh.w	r3, [sp, #20]
 8019a28:	bf14      	ite	ne
 8019a2a:	f104 33ff 	addne.w	r3, r4, #4294967295	@ 0xffffffff
 8019a2e:	4623      	moveq	r3, r4
 8019a30:	9304      	str	r3, [sp, #16]
 8019a32:	9307      	str	r3, [sp, #28]
 8019a34:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8019a38:	9002      	str	r0, [sp, #8]
 8019a3a:	9006      	str	r0, [sp, #24]
 8019a3c:	f8ad 3016 	strh.w	r3, [sp, #22]
 8019a40:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8019a42:	ab21      	add	r3, sp, #132	@ 0x84
 8019a44:	a902      	add	r1, sp, #8
 8019a46:	4628      	mov	r0, r5
 8019a48:	9301      	str	r3, [sp, #4]
 8019a4a:	f000 faa9 	bl	8019fa0 <_svfiprintf_r>
 8019a4e:	1c43      	adds	r3, r0, #1
 8019a50:	bfbc      	itt	lt
 8019a52:	238b      	movlt	r3, #139	@ 0x8b
 8019a54:	602b      	strlt	r3, [r5, #0]
 8019a56:	2c00      	cmp	r4, #0
 8019a58:	d0dd      	beq.n	8019a16 <sniprintf+0x16>
 8019a5a:	9b02      	ldr	r3, [sp, #8]
 8019a5c:	2200      	movs	r2, #0
 8019a5e:	701a      	strb	r2, [r3, #0]
 8019a60:	e7d9      	b.n	8019a16 <sniprintf+0x16>
 8019a62:	bf00      	nop
 8019a64:	20000104 	.word	0x20000104

08019a68 <__sread>:
 8019a68:	b510      	push	{r4, lr}
 8019a6a:	460c      	mov	r4, r1
 8019a6c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8019a70:	f000 f946 	bl	8019d00 <_read_r>
 8019a74:	2800      	cmp	r0, #0
 8019a76:	bfab      	itete	ge
 8019a78:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8019a7a:	89a3      	ldrhlt	r3, [r4, #12]
 8019a7c:	181b      	addge	r3, r3, r0
 8019a7e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8019a82:	bfac      	ite	ge
 8019a84:	6563      	strge	r3, [r4, #84]	@ 0x54
 8019a86:	81a3      	strhlt	r3, [r4, #12]
 8019a88:	bd10      	pop	{r4, pc}

08019a8a <__swrite>:
 8019a8a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019a8e:	461f      	mov	r7, r3
 8019a90:	898b      	ldrh	r3, [r1, #12]
 8019a92:	05db      	lsls	r3, r3, #23
 8019a94:	4605      	mov	r5, r0
 8019a96:	460c      	mov	r4, r1
 8019a98:	4616      	mov	r6, r2
 8019a9a:	d505      	bpl.n	8019aa8 <__swrite+0x1e>
 8019a9c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8019aa0:	2302      	movs	r3, #2
 8019aa2:	2200      	movs	r2, #0
 8019aa4:	f000 f91a 	bl	8019cdc <_lseek_r>
 8019aa8:	89a3      	ldrh	r3, [r4, #12]
 8019aaa:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8019aae:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8019ab2:	81a3      	strh	r3, [r4, #12]
 8019ab4:	4632      	mov	r2, r6
 8019ab6:	463b      	mov	r3, r7
 8019ab8:	4628      	mov	r0, r5
 8019aba:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8019abe:	f000 b941 	b.w	8019d44 <_write_r>

08019ac2 <__sseek>:
 8019ac2:	b510      	push	{r4, lr}
 8019ac4:	460c      	mov	r4, r1
 8019ac6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8019aca:	f000 f907 	bl	8019cdc <_lseek_r>
 8019ace:	1c43      	adds	r3, r0, #1
 8019ad0:	89a3      	ldrh	r3, [r4, #12]
 8019ad2:	bf15      	itete	ne
 8019ad4:	6560      	strne	r0, [r4, #84]	@ 0x54
 8019ad6:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8019ada:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8019ade:	81a3      	strheq	r3, [r4, #12]
 8019ae0:	bf18      	it	ne
 8019ae2:	81a3      	strhne	r3, [r4, #12]
 8019ae4:	bd10      	pop	{r4, pc}

08019ae6 <__sclose>:
 8019ae6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8019aea:	f000 b891 	b.w	8019c10 <_close_r>

08019aee <_vsniprintf_r>:
 8019aee:	b530      	push	{r4, r5, lr}
 8019af0:	4614      	mov	r4, r2
 8019af2:	2c00      	cmp	r4, #0
 8019af4:	b09b      	sub	sp, #108	@ 0x6c
 8019af6:	4605      	mov	r5, r0
 8019af8:	461a      	mov	r2, r3
 8019afa:	da05      	bge.n	8019b08 <_vsniprintf_r+0x1a>
 8019afc:	238b      	movs	r3, #139	@ 0x8b
 8019afe:	6003      	str	r3, [r0, #0]
 8019b00:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8019b04:	b01b      	add	sp, #108	@ 0x6c
 8019b06:	bd30      	pop	{r4, r5, pc}
 8019b08:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8019b0c:	f8ad 300c 	strh.w	r3, [sp, #12]
 8019b10:	bf14      	ite	ne
 8019b12:	f104 33ff 	addne.w	r3, r4, #4294967295	@ 0xffffffff
 8019b16:	4623      	moveq	r3, r4
 8019b18:	9302      	str	r3, [sp, #8]
 8019b1a:	9305      	str	r3, [sp, #20]
 8019b1c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8019b20:	9100      	str	r1, [sp, #0]
 8019b22:	9104      	str	r1, [sp, #16]
 8019b24:	f8ad 300e 	strh.w	r3, [sp, #14]
 8019b28:	4669      	mov	r1, sp
 8019b2a:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 8019b2c:	f000 fa38 	bl	8019fa0 <_svfiprintf_r>
 8019b30:	1c43      	adds	r3, r0, #1
 8019b32:	bfbc      	itt	lt
 8019b34:	238b      	movlt	r3, #139	@ 0x8b
 8019b36:	602b      	strlt	r3, [r5, #0]
 8019b38:	2c00      	cmp	r4, #0
 8019b3a:	d0e3      	beq.n	8019b04 <_vsniprintf_r+0x16>
 8019b3c:	9b00      	ldr	r3, [sp, #0]
 8019b3e:	2200      	movs	r2, #0
 8019b40:	701a      	strb	r2, [r3, #0]
 8019b42:	e7df      	b.n	8019b04 <_vsniprintf_r+0x16>

08019b44 <vsniprintf>:
 8019b44:	b507      	push	{r0, r1, r2, lr}
 8019b46:	9300      	str	r3, [sp, #0]
 8019b48:	4613      	mov	r3, r2
 8019b4a:	460a      	mov	r2, r1
 8019b4c:	4601      	mov	r1, r0
 8019b4e:	4803      	ldr	r0, [pc, #12]	@ (8019b5c <vsniprintf+0x18>)
 8019b50:	6800      	ldr	r0, [r0, #0]
 8019b52:	f7ff ffcc 	bl	8019aee <_vsniprintf_r>
 8019b56:	b003      	add	sp, #12
 8019b58:	f85d fb04 	ldr.w	pc, [sp], #4
 8019b5c:	20000104 	.word	0x20000104

08019b60 <memmove>:
 8019b60:	4288      	cmp	r0, r1
 8019b62:	b510      	push	{r4, lr}
 8019b64:	eb01 0402 	add.w	r4, r1, r2
 8019b68:	d902      	bls.n	8019b70 <memmove+0x10>
 8019b6a:	4284      	cmp	r4, r0
 8019b6c:	4623      	mov	r3, r4
 8019b6e:	d807      	bhi.n	8019b80 <memmove+0x20>
 8019b70:	1e43      	subs	r3, r0, #1
 8019b72:	42a1      	cmp	r1, r4
 8019b74:	d008      	beq.n	8019b88 <memmove+0x28>
 8019b76:	f811 2b01 	ldrb.w	r2, [r1], #1
 8019b7a:	f803 2f01 	strb.w	r2, [r3, #1]!
 8019b7e:	e7f8      	b.n	8019b72 <memmove+0x12>
 8019b80:	4402      	add	r2, r0
 8019b82:	4601      	mov	r1, r0
 8019b84:	428a      	cmp	r2, r1
 8019b86:	d100      	bne.n	8019b8a <memmove+0x2a>
 8019b88:	bd10      	pop	{r4, pc}
 8019b8a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8019b8e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8019b92:	e7f7      	b.n	8019b84 <memmove+0x24>

08019b94 <memset>:
 8019b94:	4402      	add	r2, r0
 8019b96:	4603      	mov	r3, r0
 8019b98:	4293      	cmp	r3, r2
 8019b9a:	d100      	bne.n	8019b9e <memset+0xa>
 8019b9c:	4770      	bx	lr
 8019b9e:	f803 1b01 	strb.w	r1, [r3], #1
 8019ba2:	e7f9      	b.n	8019b98 <memset+0x4>

08019ba4 <strchr>:
 8019ba4:	b2c9      	uxtb	r1, r1
 8019ba6:	4603      	mov	r3, r0
 8019ba8:	4618      	mov	r0, r3
 8019baa:	f813 2b01 	ldrb.w	r2, [r3], #1
 8019bae:	b112      	cbz	r2, 8019bb6 <strchr+0x12>
 8019bb0:	428a      	cmp	r2, r1
 8019bb2:	d1f9      	bne.n	8019ba8 <strchr+0x4>
 8019bb4:	4770      	bx	lr
 8019bb6:	2900      	cmp	r1, #0
 8019bb8:	bf18      	it	ne
 8019bba:	2000      	movne	r0, #0
 8019bbc:	4770      	bx	lr

08019bbe <strncmp>:
 8019bbe:	b510      	push	{r4, lr}
 8019bc0:	b16a      	cbz	r2, 8019bde <strncmp+0x20>
 8019bc2:	3901      	subs	r1, #1
 8019bc4:	1884      	adds	r4, r0, r2
 8019bc6:	f810 2b01 	ldrb.w	r2, [r0], #1
 8019bca:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8019bce:	429a      	cmp	r2, r3
 8019bd0:	d103      	bne.n	8019bda <strncmp+0x1c>
 8019bd2:	42a0      	cmp	r0, r4
 8019bd4:	d001      	beq.n	8019bda <strncmp+0x1c>
 8019bd6:	2a00      	cmp	r2, #0
 8019bd8:	d1f5      	bne.n	8019bc6 <strncmp+0x8>
 8019bda:	1ad0      	subs	r0, r2, r3
 8019bdc:	bd10      	pop	{r4, pc}
 8019bde:	4610      	mov	r0, r2
 8019be0:	e7fc      	b.n	8019bdc <strncmp+0x1e>

08019be2 <strstr>:
 8019be2:	780a      	ldrb	r2, [r1, #0]
 8019be4:	b570      	push	{r4, r5, r6, lr}
 8019be6:	b96a      	cbnz	r2, 8019c04 <strstr+0x22>
 8019be8:	bd70      	pop	{r4, r5, r6, pc}
 8019bea:	429a      	cmp	r2, r3
 8019bec:	d109      	bne.n	8019c02 <strstr+0x20>
 8019bee:	460c      	mov	r4, r1
 8019bf0:	4605      	mov	r5, r0
 8019bf2:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 8019bf6:	2b00      	cmp	r3, #0
 8019bf8:	d0f6      	beq.n	8019be8 <strstr+0x6>
 8019bfa:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 8019bfe:	429e      	cmp	r6, r3
 8019c00:	d0f7      	beq.n	8019bf2 <strstr+0x10>
 8019c02:	3001      	adds	r0, #1
 8019c04:	7803      	ldrb	r3, [r0, #0]
 8019c06:	2b00      	cmp	r3, #0
 8019c08:	d1ef      	bne.n	8019bea <strstr+0x8>
 8019c0a:	4618      	mov	r0, r3
 8019c0c:	e7ec      	b.n	8019be8 <strstr+0x6>
	...

08019c10 <_close_r>:
 8019c10:	b538      	push	{r3, r4, r5, lr}
 8019c12:	4d06      	ldr	r5, [pc, #24]	@ (8019c2c <_close_r+0x1c>)
 8019c14:	2300      	movs	r3, #0
 8019c16:	4604      	mov	r4, r0
 8019c18:	4608      	mov	r0, r1
 8019c1a:	602b      	str	r3, [r5, #0]
 8019c1c:	f7e8 fe50 	bl	80028c0 <_close>
 8019c20:	1c43      	adds	r3, r0, #1
 8019c22:	d102      	bne.n	8019c2a <_close_r+0x1a>
 8019c24:	682b      	ldr	r3, [r5, #0]
 8019c26:	b103      	cbz	r3, 8019c2a <_close_r+0x1a>
 8019c28:	6023      	str	r3, [r4, #0]
 8019c2a:	bd38      	pop	{r3, r4, r5, pc}
 8019c2c:	20007878 	.word	0x20007878

08019c30 <_reclaim_reent>:
 8019c30:	4b29      	ldr	r3, [pc, #164]	@ (8019cd8 <_reclaim_reent+0xa8>)
 8019c32:	681b      	ldr	r3, [r3, #0]
 8019c34:	4283      	cmp	r3, r0
 8019c36:	b570      	push	{r4, r5, r6, lr}
 8019c38:	4604      	mov	r4, r0
 8019c3a:	d04b      	beq.n	8019cd4 <_reclaim_reent+0xa4>
 8019c3c:	69c3      	ldr	r3, [r0, #28]
 8019c3e:	b1ab      	cbz	r3, 8019c6c <_reclaim_reent+0x3c>
 8019c40:	68db      	ldr	r3, [r3, #12]
 8019c42:	b16b      	cbz	r3, 8019c60 <_reclaim_reent+0x30>
 8019c44:	2500      	movs	r5, #0
 8019c46:	69e3      	ldr	r3, [r4, #28]
 8019c48:	68db      	ldr	r3, [r3, #12]
 8019c4a:	5959      	ldr	r1, [r3, r5]
 8019c4c:	2900      	cmp	r1, #0
 8019c4e:	d13b      	bne.n	8019cc8 <_reclaim_reent+0x98>
 8019c50:	3504      	adds	r5, #4
 8019c52:	2d80      	cmp	r5, #128	@ 0x80
 8019c54:	d1f7      	bne.n	8019c46 <_reclaim_reent+0x16>
 8019c56:	69e3      	ldr	r3, [r4, #28]
 8019c58:	4620      	mov	r0, r4
 8019c5a:	68d9      	ldr	r1, [r3, #12]
 8019c5c:	f000 f8f2 	bl	8019e44 <_free_r>
 8019c60:	69e3      	ldr	r3, [r4, #28]
 8019c62:	6819      	ldr	r1, [r3, #0]
 8019c64:	b111      	cbz	r1, 8019c6c <_reclaim_reent+0x3c>
 8019c66:	4620      	mov	r0, r4
 8019c68:	f000 f8ec 	bl	8019e44 <_free_r>
 8019c6c:	6961      	ldr	r1, [r4, #20]
 8019c6e:	b111      	cbz	r1, 8019c76 <_reclaim_reent+0x46>
 8019c70:	4620      	mov	r0, r4
 8019c72:	f000 f8e7 	bl	8019e44 <_free_r>
 8019c76:	69e1      	ldr	r1, [r4, #28]
 8019c78:	b111      	cbz	r1, 8019c80 <_reclaim_reent+0x50>
 8019c7a:	4620      	mov	r0, r4
 8019c7c:	f000 f8e2 	bl	8019e44 <_free_r>
 8019c80:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8019c82:	b111      	cbz	r1, 8019c8a <_reclaim_reent+0x5a>
 8019c84:	4620      	mov	r0, r4
 8019c86:	f000 f8dd 	bl	8019e44 <_free_r>
 8019c8a:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8019c8c:	b111      	cbz	r1, 8019c94 <_reclaim_reent+0x64>
 8019c8e:	4620      	mov	r0, r4
 8019c90:	f000 f8d8 	bl	8019e44 <_free_r>
 8019c94:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 8019c96:	b111      	cbz	r1, 8019c9e <_reclaim_reent+0x6e>
 8019c98:	4620      	mov	r0, r4
 8019c9a:	f000 f8d3 	bl	8019e44 <_free_r>
 8019c9e:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 8019ca0:	b111      	cbz	r1, 8019ca8 <_reclaim_reent+0x78>
 8019ca2:	4620      	mov	r0, r4
 8019ca4:	f000 f8ce 	bl	8019e44 <_free_r>
 8019ca8:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 8019caa:	b111      	cbz	r1, 8019cb2 <_reclaim_reent+0x82>
 8019cac:	4620      	mov	r0, r4
 8019cae:	f000 f8c9 	bl	8019e44 <_free_r>
 8019cb2:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8019cb4:	b111      	cbz	r1, 8019cbc <_reclaim_reent+0x8c>
 8019cb6:	4620      	mov	r0, r4
 8019cb8:	f000 f8c4 	bl	8019e44 <_free_r>
 8019cbc:	6a23      	ldr	r3, [r4, #32]
 8019cbe:	b14b      	cbz	r3, 8019cd4 <_reclaim_reent+0xa4>
 8019cc0:	4620      	mov	r0, r4
 8019cc2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8019cc6:	4718      	bx	r3
 8019cc8:	680e      	ldr	r6, [r1, #0]
 8019cca:	4620      	mov	r0, r4
 8019ccc:	f000 f8ba 	bl	8019e44 <_free_r>
 8019cd0:	4631      	mov	r1, r6
 8019cd2:	e7bb      	b.n	8019c4c <_reclaim_reent+0x1c>
 8019cd4:	bd70      	pop	{r4, r5, r6, pc}
 8019cd6:	bf00      	nop
 8019cd8:	20000104 	.word	0x20000104

08019cdc <_lseek_r>:
 8019cdc:	b538      	push	{r3, r4, r5, lr}
 8019cde:	4d07      	ldr	r5, [pc, #28]	@ (8019cfc <_lseek_r+0x20>)
 8019ce0:	4604      	mov	r4, r0
 8019ce2:	4608      	mov	r0, r1
 8019ce4:	4611      	mov	r1, r2
 8019ce6:	2200      	movs	r2, #0
 8019ce8:	602a      	str	r2, [r5, #0]
 8019cea:	461a      	mov	r2, r3
 8019cec:	f7e8 fe0f 	bl	800290e <_lseek>
 8019cf0:	1c43      	adds	r3, r0, #1
 8019cf2:	d102      	bne.n	8019cfa <_lseek_r+0x1e>
 8019cf4:	682b      	ldr	r3, [r5, #0]
 8019cf6:	b103      	cbz	r3, 8019cfa <_lseek_r+0x1e>
 8019cf8:	6023      	str	r3, [r4, #0]
 8019cfa:	bd38      	pop	{r3, r4, r5, pc}
 8019cfc:	20007878 	.word	0x20007878

08019d00 <_read_r>:
 8019d00:	b538      	push	{r3, r4, r5, lr}
 8019d02:	4d07      	ldr	r5, [pc, #28]	@ (8019d20 <_read_r+0x20>)
 8019d04:	4604      	mov	r4, r0
 8019d06:	4608      	mov	r0, r1
 8019d08:	4611      	mov	r1, r2
 8019d0a:	2200      	movs	r2, #0
 8019d0c:	602a      	str	r2, [r5, #0]
 8019d0e:	461a      	mov	r2, r3
 8019d10:	f7e8 fd9d 	bl	800284e <_read>
 8019d14:	1c43      	adds	r3, r0, #1
 8019d16:	d102      	bne.n	8019d1e <_read_r+0x1e>
 8019d18:	682b      	ldr	r3, [r5, #0]
 8019d1a:	b103      	cbz	r3, 8019d1e <_read_r+0x1e>
 8019d1c:	6023      	str	r3, [r4, #0]
 8019d1e:	bd38      	pop	{r3, r4, r5, pc}
 8019d20:	20007878 	.word	0x20007878

08019d24 <_sbrk_r>:
 8019d24:	b538      	push	{r3, r4, r5, lr}
 8019d26:	4d06      	ldr	r5, [pc, #24]	@ (8019d40 <_sbrk_r+0x1c>)
 8019d28:	2300      	movs	r3, #0
 8019d2a:	4604      	mov	r4, r0
 8019d2c:	4608      	mov	r0, r1
 8019d2e:	602b      	str	r3, [r5, #0]
 8019d30:	f7e8 fdfa 	bl	8002928 <_sbrk>
 8019d34:	1c43      	adds	r3, r0, #1
 8019d36:	d102      	bne.n	8019d3e <_sbrk_r+0x1a>
 8019d38:	682b      	ldr	r3, [r5, #0]
 8019d3a:	b103      	cbz	r3, 8019d3e <_sbrk_r+0x1a>
 8019d3c:	6023      	str	r3, [r4, #0]
 8019d3e:	bd38      	pop	{r3, r4, r5, pc}
 8019d40:	20007878 	.word	0x20007878

08019d44 <_write_r>:
 8019d44:	b538      	push	{r3, r4, r5, lr}
 8019d46:	4d07      	ldr	r5, [pc, #28]	@ (8019d64 <_write_r+0x20>)
 8019d48:	4604      	mov	r4, r0
 8019d4a:	4608      	mov	r0, r1
 8019d4c:	4611      	mov	r1, r2
 8019d4e:	2200      	movs	r2, #0
 8019d50:	602a      	str	r2, [r5, #0]
 8019d52:	461a      	mov	r2, r3
 8019d54:	f7e8 fd98 	bl	8002888 <_write>
 8019d58:	1c43      	adds	r3, r0, #1
 8019d5a:	d102      	bne.n	8019d62 <_write_r+0x1e>
 8019d5c:	682b      	ldr	r3, [r5, #0]
 8019d5e:	b103      	cbz	r3, 8019d62 <_write_r+0x1e>
 8019d60:	6023      	str	r3, [r4, #0]
 8019d62:	bd38      	pop	{r3, r4, r5, pc}
 8019d64:	20007878 	.word	0x20007878

08019d68 <__errno>:
 8019d68:	4b01      	ldr	r3, [pc, #4]	@ (8019d70 <__errno+0x8>)
 8019d6a:	6818      	ldr	r0, [r3, #0]
 8019d6c:	4770      	bx	lr
 8019d6e:	bf00      	nop
 8019d70:	20000104 	.word	0x20000104

08019d74 <__libc_init_array>:
 8019d74:	b570      	push	{r4, r5, r6, lr}
 8019d76:	4d0d      	ldr	r5, [pc, #52]	@ (8019dac <__libc_init_array+0x38>)
 8019d78:	4c0d      	ldr	r4, [pc, #52]	@ (8019db0 <__libc_init_array+0x3c>)
 8019d7a:	1b64      	subs	r4, r4, r5
 8019d7c:	10a4      	asrs	r4, r4, #2
 8019d7e:	2600      	movs	r6, #0
 8019d80:	42a6      	cmp	r6, r4
 8019d82:	d109      	bne.n	8019d98 <__libc_init_array+0x24>
 8019d84:	4d0b      	ldr	r5, [pc, #44]	@ (8019db4 <__libc_init_array+0x40>)
 8019d86:	4c0c      	ldr	r4, [pc, #48]	@ (8019db8 <__libc_init_array+0x44>)
 8019d88:	f001 feac 	bl	801bae4 <_init>
 8019d8c:	1b64      	subs	r4, r4, r5
 8019d8e:	10a4      	asrs	r4, r4, #2
 8019d90:	2600      	movs	r6, #0
 8019d92:	42a6      	cmp	r6, r4
 8019d94:	d105      	bne.n	8019da2 <__libc_init_array+0x2e>
 8019d96:	bd70      	pop	{r4, r5, r6, pc}
 8019d98:	f855 3b04 	ldr.w	r3, [r5], #4
 8019d9c:	4798      	blx	r3
 8019d9e:	3601      	adds	r6, #1
 8019da0:	e7ee      	b.n	8019d80 <__libc_init_array+0xc>
 8019da2:	f855 3b04 	ldr.w	r3, [r5], #4
 8019da6:	4798      	blx	r3
 8019da8:	3601      	adds	r6, #1
 8019daa:	e7f2      	b.n	8019d92 <__libc_init_array+0x1e>
 8019dac:	0801c7a8 	.word	0x0801c7a8
 8019db0:	0801c7a8 	.word	0x0801c7a8
 8019db4:	0801c7a8 	.word	0x0801c7a8
 8019db8:	0801c7ac 	.word	0x0801c7ac

08019dbc <__retarget_lock_init_recursive>:
 8019dbc:	4770      	bx	lr

08019dbe <__retarget_lock_acquire_recursive>:
 8019dbe:	4770      	bx	lr

08019dc0 <__retarget_lock_release_recursive>:
 8019dc0:	4770      	bx	lr

08019dc2 <strcpy>:
 8019dc2:	4603      	mov	r3, r0
 8019dc4:	f811 2b01 	ldrb.w	r2, [r1], #1
 8019dc8:	f803 2b01 	strb.w	r2, [r3], #1
 8019dcc:	2a00      	cmp	r2, #0
 8019dce:	d1f9      	bne.n	8019dc4 <strcpy+0x2>
 8019dd0:	4770      	bx	lr

08019dd2 <memcpy>:
 8019dd2:	440a      	add	r2, r1
 8019dd4:	4291      	cmp	r1, r2
 8019dd6:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 8019dda:	d100      	bne.n	8019dde <memcpy+0xc>
 8019ddc:	4770      	bx	lr
 8019dde:	b510      	push	{r4, lr}
 8019de0:	f811 4b01 	ldrb.w	r4, [r1], #1
 8019de4:	f803 4f01 	strb.w	r4, [r3, #1]!
 8019de8:	4291      	cmp	r1, r2
 8019dea:	d1f9      	bne.n	8019de0 <memcpy+0xe>
 8019dec:	bd10      	pop	{r4, pc}
	...

08019df0 <__assert_func>:
 8019df0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8019df2:	4614      	mov	r4, r2
 8019df4:	461a      	mov	r2, r3
 8019df6:	4b09      	ldr	r3, [pc, #36]	@ (8019e1c <__assert_func+0x2c>)
 8019df8:	681b      	ldr	r3, [r3, #0]
 8019dfa:	4605      	mov	r5, r0
 8019dfc:	68d8      	ldr	r0, [r3, #12]
 8019dfe:	b954      	cbnz	r4, 8019e16 <__assert_func+0x26>
 8019e00:	4b07      	ldr	r3, [pc, #28]	@ (8019e20 <__assert_func+0x30>)
 8019e02:	461c      	mov	r4, r3
 8019e04:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8019e08:	9100      	str	r1, [sp, #0]
 8019e0a:	462b      	mov	r3, r5
 8019e0c:	4905      	ldr	r1, [pc, #20]	@ (8019e24 <__assert_func+0x34>)
 8019e0e:	f000 fd3f 	bl	801a890 <fiprintf>
 8019e12:	f000 fde3 	bl	801a9dc <abort>
 8019e16:	4b04      	ldr	r3, [pc, #16]	@ (8019e28 <__assert_func+0x38>)
 8019e18:	e7f4      	b.n	8019e04 <__assert_func+0x14>
 8019e1a:	bf00      	nop
 8019e1c:	20000104 	.word	0x20000104
 8019e20:	0801c73b 	.word	0x0801c73b
 8019e24:	0801c70d 	.word	0x0801c70d
 8019e28:	0801c700 	.word	0x0801c700

08019e2c <__env_lock>:
 8019e2c:	4801      	ldr	r0, [pc, #4]	@ (8019e34 <__env_lock+0x8>)
 8019e2e:	f7ff bfc6 	b.w	8019dbe <__retarget_lock_acquire_recursive>
 8019e32:	bf00      	nop
 8019e34:	2000787c 	.word	0x2000787c

08019e38 <__env_unlock>:
 8019e38:	4801      	ldr	r0, [pc, #4]	@ (8019e40 <__env_unlock+0x8>)
 8019e3a:	f7ff bfc1 	b.w	8019dc0 <__retarget_lock_release_recursive>
 8019e3e:	bf00      	nop
 8019e40:	2000787c 	.word	0x2000787c

08019e44 <_free_r>:
 8019e44:	b538      	push	{r3, r4, r5, lr}
 8019e46:	4605      	mov	r5, r0
 8019e48:	2900      	cmp	r1, #0
 8019e4a:	d041      	beq.n	8019ed0 <_free_r+0x8c>
 8019e4c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8019e50:	1f0c      	subs	r4, r1, #4
 8019e52:	2b00      	cmp	r3, #0
 8019e54:	bfb8      	it	lt
 8019e56:	18e4      	addlt	r4, r4, r3
 8019e58:	f7ff fbd8 	bl	801960c <__malloc_lock>
 8019e5c:	4a1d      	ldr	r2, [pc, #116]	@ (8019ed4 <_free_r+0x90>)
 8019e5e:	6813      	ldr	r3, [r2, #0]
 8019e60:	b933      	cbnz	r3, 8019e70 <_free_r+0x2c>
 8019e62:	6063      	str	r3, [r4, #4]
 8019e64:	6014      	str	r4, [r2, #0]
 8019e66:	4628      	mov	r0, r5
 8019e68:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8019e6c:	f7ff bbd4 	b.w	8019618 <__malloc_unlock>
 8019e70:	42a3      	cmp	r3, r4
 8019e72:	d908      	bls.n	8019e86 <_free_r+0x42>
 8019e74:	6820      	ldr	r0, [r4, #0]
 8019e76:	1821      	adds	r1, r4, r0
 8019e78:	428b      	cmp	r3, r1
 8019e7a:	bf01      	itttt	eq
 8019e7c:	6819      	ldreq	r1, [r3, #0]
 8019e7e:	685b      	ldreq	r3, [r3, #4]
 8019e80:	1809      	addeq	r1, r1, r0
 8019e82:	6021      	streq	r1, [r4, #0]
 8019e84:	e7ed      	b.n	8019e62 <_free_r+0x1e>
 8019e86:	461a      	mov	r2, r3
 8019e88:	685b      	ldr	r3, [r3, #4]
 8019e8a:	b10b      	cbz	r3, 8019e90 <_free_r+0x4c>
 8019e8c:	42a3      	cmp	r3, r4
 8019e8e:	d9fa      	bls.n	8019e86 <_free_r+0x42>
 8019e90:	6811      	ldr	r1, [r2, #0]
 8019e92:	1850      	adds	r0, r2, r1
 8019e94:	42a0      	cmp	r0, r4
 8019e96:	d10b      	bne.n	8019eb0 <_free_r+0x6c>
 8019e98:	6820      	ldr	r0, [r4, #0]
 8019e9a:	4401      	add	r1, r0
 8019e9c:	1850      	adds	r0, r2, r1
 8019e9e:	4283      	cmp	r3, r0
 8019ea0:	6011      	str	r1, [r2, #0]
 8019ea2:	d1e0      	bne.n	8019e66 <_free_r+0x22>
 8019ea4:	6818      	ldr	r0, [r3, #0]
 8019ea6:	685b      	ldr	r3, [r3, #4]
 8019ea8:	6053      	str	r3, [r2, #4]
 8019eaa:	4408      	add	r0, r1
 8019eac:	6010      	str	r0, [r2, #0]
 8019eae:	e7da      	b.n	8019e66 <_free_r+0x22>
 8019eb0:	d902      	bls.n	8019eb8 <_free_r+0x74>
 8019eb2:	230c      	movs	r3, #12
 8019eb4:	602b      	str	r3, [r5, #0]
 8019eb6:	e7d6      	b.n	8019e66 <_free_r+0x22>
 8019eb8:	6820      	ldr	r0, [r4, #0]
 8019eba:	1821      	adds	r1, r4, r0
 8019ebc:	428b      	cmp	r3, r1
 8019ebe:	bf04      	itt	eq
 8019ec0:	6819      	ldreq	r1, [r3, #0]
 8019ec2:	685b      	ldreq	r3, [r3, #4]
 8019ec4:	6063      	str	r3, [r4, #4]
 8019ec6:	bf04      	itt	eq
 8019ec8:	1809      	addeq	r1, r1, r0
 8019eca:	6021      	streq	r1, [r4, #0]
 8019ecc:	6054      	str	r4, [r2, #4]
 8019ece:	e7ca      	b.n	8019e66 <_free_r+0x22>
 8019ed0:	bd38      	pop	{r3, r4, r5, pc}
 8019ed2:	bf00      	nop
 8019ed4:	20007738 	.word	0x20007738

08019ed8 <_malloc_usable_size_r>:
 8019ed8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8019edc:	1f18      	subs	r0, r3, #4
 8019ede:	2b00      	cmp	r3, #0
 8019ee0:	bfbc      	itt	lt
 8019ee2:	580b      	ldrlt	r3, [r1, r0]
 8019ee4:	18c0      	addlt	r0, r0, r3
 8019ee6:	4770      	bx	lr

08019ee8 <__ssputs_r>:
 8019ee8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8019eec:	688e      	ldr	r6, [r1, #8]
 8019eee:	461f      	mov	r7, r3
 8019ef0:	42be      	cmp	r6, r7
 8019ef2:	680b      	ldr	r3, [r1, #0]
 8019ef4:	4682      	mov	sl, r0
 8019ef6:	460c      	mov	r4, r1
 8019ef8:	4690      	mov	r8, r2
 8019efa:	d82d      	bhi.n	8019f58 <__ssputs_r+0x70>
 8019efc:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8019f00:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8019f04:	d026      	beq.n	8019f54 <__ssputs_r+0x6c>
 8019f06:	6965      	ldr	r5, [r4, #20]
 8019f08:	6909      	ldr	r1, [r1, #16]
 8019f0a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8019f0e:	eba3 0901 	sub.w	r9, r3, r1
 8019f12:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8019f16:	1c7b      	adds	r3, r7, #1
 8019f18:	444b      	add	r3, r9
 8019f1a:	106d      	asrs	r5, r5, #1
 8019f1c:	429d      	cmp	r5, r3
 8019f1e:	bf38      	it	cc
 8019f20:	461d      	movcc	r5, r3
 8019f22:	0553      	lsls	r3, r2, #21
 8019f24:	d527      	bpl.n	8019f76 <__ssputs_r+0x8e>
 8019f26:	4629      	mov	r1, r5
 8019f28:	f7ff faf0 	bl	801950c <_malloc_r>
 8019f2c:	4606      	mov	r6, r0
 8019f2e:	b360      	cbz	r0, 8019f8a <__ssputs_r+0xa2>
 8019f30:	6921      	ldr	r1, [r4, #16]
 8019f32:	464a      	mov	r2, r9
 8019f34:	f7ff ff4d 	bl	8019dd2 <memcpy>
 8019f38:	89a3      	ldrh	r3, [r4, #12]
 8019f3a:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8019f3e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8019f42:	81a3      	strh	r3, [r4, #12]
 8019f44:	6126      	str	r6, [r4, #16]
 8019f46:	6165      	str	r5, [r4, #20]
 8019f48:	444e      	add	r6, r9
 8019f4a:	eba5 0509 	sub.w	r5, r5, r9
 8019f4e:	6026      	str	r6, [r4, #0]
 8019f50:	60a5      	str	r5, [r4, #8]
 8019f52:	463e      	mov	r6, r7
 8019f54:	42be      	cmp	r6, r7
 8019f56:	d900      	bls.n	8019f5a <__ssputs_r+0x72>
 8019f58:	463e      	mov	r6, r7
 8019f5a:	6820      	ldr	r0, [r4, #0]
 8019f5c:	4632      	mov	r2, r6
 8019f5e:	4641      	mov	r1, r8
 8019f60:	f7ff fdfe 	bl	8019b60 <memmove>
 8019f64:	68a3      	ldr	r3, [r4, #8]
 8019f66:	1b9b      	subs	r3, r3, r6
 8019f68:	60a3      	str	r3, [r4, #8]
 8019f6a:	6823      	ldr	r3, [r4, #0]
 8019f6c:	4433      	add	r3, r6
 8019f6e:	6023      	str	r3, [r4, #0]
 8019f70:	2000      	movs	r0, #0
 8019f72:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8019f76:	462a      	mov	r2, r5
 8019f78:	f7ff fbc8 	bl	801970c <_realloc_r>
 8019f7c:	4606      	mov	r6, r0
 8019f7e:	2800      	cmp	r0, #0
 8019f80:	d1e0      	bne.n	8019f44 <__ssputs_r+0x5c>
 8019f82:	6921      	ldr	r1, [r4, #16]
 8019f84:	4650      	mov	r0, sl
 8019f86:	f7ff ff5d 	bl	8019e44 <_free_r>
 8019f8a:	230c      	movs	r3, #12
 8019f8c:	f8ca 3000 	str.w	r3, [sl]
 8019f90:	89a3      	ldrh	r3, [r4, #12]
 8019f92:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8019f96:	81a3      	strh	r3, [r4, #12]
 8019f98:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8019f9c:	e7e9      	b.n	8019f72 <__ssputs_r+0x8a>
	...

08019fa0 <_svfiprintf_r>:
 8019fa0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019fa4:	4698      	mov	r8, r3
 8019fa6:	898b      	ldrh	r3, [r1, #12]
 8019fa8:	061b      	lsls	r3, r3, #24
 8019faa:	b09d      	sub	sp, #116	@ 0x74
 8019fac:	4607      	mov	r7, r0
 8019fae:	460d      	mov	r5, r1
 8019fb0:	4614      	mov	r4, r2
 8019fb2:	d510      	bpl.n	8019fd6 <_svfiprintf_r+0x36>
 8019fb4:	690b      	ldr	r3, [r1, #16]
 8019fb6:	b973      	cbnz	r3, 8019fd6 <_svfiprintf_r+0x36>
 8019fb8:	2140      	movs	r1, #64	@ 0x40
 8019fba:	f7ff faa7 	bl	801950c <_malloc_r>
 8019fbe:	6028      	str	r0, [r5, #0]
 8019fc0:	6128      	str	r0, [r5, #16]
 8019fc2:	b930      	cbnz	r0, 8019fd2 <_svfiprintf_r+0x32>
 8019fc4:	230c      	movs	r3, #12
 8019fc6:	603b      	str	r3, [r7, #0]
 8019fc8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8019fcc:	b01d      	add	sp, #116	@ 0x74
 8019fce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019fd2:	2340      	movs	r3, #64	@ 0x40
 8019fd4:	616b      	str	r3, [r5, #20]
 8019fd6:	2300      	movs	r3, #0
 8019fd8:	9309      	str	r3, [sp, #36]	@ 0x24
 8019fda:	2320      	movs	r3, #32
 8019fdc:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8019fe0:	f8cd 800c 	str.w	r8, [sp, #12]
 8019fe4:	2330      	movs	r3, #48	@ 0x30
 8019fe6:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 801a184 <_svfiprintf_r+0x1e4>
 8019fea:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8019fee:	f04f 0901 	mov.w	r9, #1
 8019ff2:	4623      	mov	r3, r4
 8019ff4:	469a      	mov	sl, r3
 8019ff6:	f813 2b01 	ldrb.w	r2, [r3], #1
 8019ffa:	b10a      	cbz	r2, 801a000 <_svfiprintf_r+0x60>
 8019ffc:	2a25      	cmp	r2, #37	@ 0x25
 8019ffe:	d1f9      	bne.n	8019ff4 <_svfiprintf_r+0x54>
 801a000:	ebba 0b04 	subs.w	fp, sl, r4
 801a004:	d00b      	beq.n	801a01e <_svfiprintf_r+0x7e>
 801a006:	465b      	mov	r3, fp
 801a008:	4622      	mov	r2, r4
 801a00a:	4629      	mov	r1, r5
 801a00c:	4638      	mov	r0, r7
 801a00e:	f7ff ff6b 	bl	8019ee8 <__ssputs_r>
 801a012:	3001      	adds	r0, #1
 801a014:	f000 80a7 	beq.w	801a166 <_svfiprintf_r+0x1c6>
 801a018:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801a01a:	445a      	add	r2, fp
 801a01c:	9209      	str	r2, [sp, #36]	@ 0x24
 801a01e:	f89a 3000 	ldrb.w	r3, [sl]
 801a022:	2b00      	cmp	r3, #0
 801a024:	f000 809f 	beq.w	801a166 <_svfiprintf_r+0x1c6>
 801a028:	2300      	movs	r3, #0
 801a02a:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 801a02e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801a032:	f10a 0a01 	add.w	sl, sl, #1
 801a036:	9304      	str	r3, [sp, #16]
 801a038:	9307      	str	r3, [sp, #28]
 801a03a:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 801a03e:	931a      	str	r3, [sp, #104]	@ 0x68
 801a040:	4654      	mov	r4, sl
 801a042:	2205      	movs	r2, #5
 801a044:	f814 1b01 	ldrb.w	r1, [r4], #1
 801a048:	484e      	ldr	r0, [pc, #312]	@ (801a184 <_svfiprintf_r+0x1e4>)
 801a04a:	f7e6 f8d9 	bl	8000200 <memchr>
 801a04e:	9a04      	ldr	r2, [sp, #16]
 801a050:	b9d8      	cbnz	r0, 801a08a <_svfiprintf_r+0xea>
 801a052:	06d0      	lsls	r0, r2, #27
 801a054:	bf44      	itt	mi
 801a056:	2320      	movmi	r3, #32
 801a058:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801a05c:	0711      	lsls	r1, r2, #28
 801a05e:	bf44      	itt	mi
 801a060:	232b      	movmi	r3, #43	@ 0x2b
 801a062:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801a066:	f89a 3000 	ldrb.w	r3, [sl]
 801a06a:	2b2a      	cmp	r3, #42	@ 0x2a
 801a06c:	d015      	beq.n	801a09a <_svfiprintf_r+0xfa>
 801a06e:	9a07      	ldr	r2, [sp, #28]
 801a070:	4654      	mov	r4, sl
 801a072:	2000      	movs	r0, #0
 801a074:	f04f 0c0a 	mov.w	ip, #10
 801a078:	4621      	mov	r1, r4
 801a07a:	f811 3b01 	ldrb.w	r3, [r1], #1
 801a07e:	3b30      	subs	r3, #48	@ 0x30
 801a080:	2b09      	cmp	r3, #9
 801a082:	d94b      	bls.n	801a11c <_svfiprintf_r+0x17c>
 801a084:	b1b0      	cbz	r0, 801a0b4 <_svfiprintf_r+0x114>
 801a086:	9207      	str	r2, [sp, #28]
 801a088:	e014      	b.n	801a0b4 <_svfiprintf_r+0x114>
 801a08a:	eba0 0308 	sub.w	r3, r0, r8
 801a08e:	fa09 f303 	lsl.w	r3, r9, r3
 801a092:	4313      	orrs	r3, r2
 801a094:	9304      	str	r3, [sp, #16]
 801a096:	46a2      	mov	sl, r4
 801a098:	e7d2      	b.n	801a040 <_svfiprintf_r+0xa0>
 801a09a:	9b03      	ldr	r3, [sp, #12]
 801a09c:	1d19      	adds	r1, r3, #4
 801a09e:	681b      	ldr	r3, [r3, #0]
 801a0a0:	9103      	str	r1, [sp, #12]
 801a0a2:	2b00      	cmp	r3, #0
 801a0a4:	bfbb      	ittet	lt
 801a0a6:	425b      	neglt	r3, r3
 801a0a8:	f042 0202 	orrlt.w	r2, r2, #2
 801a0ac:	9307      	strge	r3, [sp, #28]
 801a0ae:	9307      	strlt	r3, [sp, #28]
 801a0b0:	bfb8      	it	lt
 801a0b2:	9204      	strlt	r2, [sp, #16]
 801a0b4:	7823      	ldrb	r3, [r4, #0]
 801a0b6:	2b2e      	cmp	r3, #46	@ 0x2e
 801a0b8:	d10a      	bne.n	801a0d0 <_svfiprintf_r+0x130>
 801a0ba:	7863      	ldrb	r3, [r4, #1]
 801a0bc:	2b2a      	cmp	r3, #42	@ 0x2a
 801a0be:	d132      	bne.n	801a126 <_svfiprintf_r+0x186>
 801a0c0:	9b03      	ldr	r3, [sp, #12]
 801a0c2:	1d1a      	adds	r2, r3, #4
 801a0c4:	681b      	ldr	r3, [r3, #0]
 801a0c6:	9203      	str	r2, [sp, #12]
 801a0c8:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 801a0cc:	3402      	adds	r4, #2
 801a0ce:	9305      	str	r3, [sp, #20]
 801a0d0:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 801a194 <_svfiprintf_r+0x1f4>
 801a0d4:	7821      	ldrb	r1, [r4, #0]
 801a0d6:	2203      	movs	r2, #3
 801a0d8:	4650      	mov	r0, sl
 801a0da:	f7e6 f891 	bl	8000200 <memchr>
 801a0de:	b138      	cbz	r0, 801a0f0 <_svfiprintf_r+0x150>
 801a0e0:	9b04      	ldr	r3, [sp, #16]
 801a0e2:	eba0 000a 	sub.w	r0, r0, sl
 801a0e6:	2240      	movs	r2, #64	@ 0x40
 801a0e8:	4082      	lsls	r2, r0
 801a0ea:	4313      	orrs	r3, r2
 801a0ec:	3401      	adds	r4, #1
 801a0ee:	9304      	str	r3, [sp, #16]
 801a0f0:	f814 1b01 	ldrb.w	r1, [r4], #1
 801a0f4:	4824      	ldr	r0, [pc, #144]	@ (801a188 <_svfiprintf_r+0x1e8>)
 801a0f6:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 801a0fa:	2206      	movs	r2, #6
 801a0fc:	f7e6 f880 	bl	8000200 <memchr>
 801a100:	2800      	cmp	r0, #0
 801a102:	d036      	beq.n	801a172 <_svfiprintf_r+0x1d2>
 801a104:	4b21      	ldr	r3, [pc, #132]	@ (801a18c <_svfiprintf_r+0x1ec>)
 801a106:	bb1b      	cbnz	r3, 801a150 <_svfiprintf_r+0x1b0>
 801a108:	9b03      	ldr	r3, [sp, #12]
 801a10a:	3307      	adds	r3, #7
 801a10c:	f023 0307 	bic.w	r3, r3, #7
 801a110:	3308      	adds	r3, #8
 801a112:	9303      	str	r3, [sp, #12]
 801a114:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801a116:	4433      	add	r3, r6
 801a118:	9309      	str	r3, [sp, #36]	@ 0x24
 801a11a:	e76a      	b.n	8019ff2 <_svfiprintf_r+0x52>
 801a11c:	fb0c 3202 	mla	r2, ip, r2, r3
 801a120:	460c      	mov	r4, r1
 801a122:	2001      	movs	r0, #1
 801a124:	e7a8      	b.n	801a078 <_svfiprintf_r+0xd8>
 801a126:	2300      	movs	r3, #0
 801a128:	3401      	adds	r4, #1
 801a12a:	9305      	str	r3, [sp, #20]
 801a12c:	4619      	mov	r1, r3
 801a12e:	f04f 0c0a 	mov.w	ip, #10
 801a132:	4620      	mov	r0, r4
 801a134:	f810 2b01 	ldrb.w	r2, [r0], #1
 801a138:	3a30      	subs	r2, #48	@ 0x30
 801a13a:	2a09      	cmp	r2, #9
 801a13c:	d903      	bls.n	801a146 <_svfiprintf_r+0x1a6>
 801a13e:	2b00      	cmp	r3, #0
 801a140:	d0c6      	beq.n	801a0d0 <_svfiprintf_r+0x130>
 801a142:	9105      	str	r1, [sp, #20]
 801a144:	e7c4      	b.n	801a0d0 <_svfiprintf_r+0x130>
 801a146:	fb0c 2101 	mla	r1, ip, r1, r2
 801a14a:	4604      	mov	r4, r0
 801a14c:	2301      	movs	r3, #1
 801a14e:	e7f0      	b.n	801a132 <_svfiprintf_r+0x192>
 801a150:	ab03      	add	r3, sp, #12
 801a152:	9300      	str	r3, [sp, #0]
 801a154:	462a      	mov	r2, r5
 801a156:	4b0e      	ldr	r3, [pc, #56]	@ (801a190 <_svfiprintf_r+0x1f0>)
 801a158:	a904      	add	r1, sp, #16
 801a15a:	4638      	mov	r0, r7
 801a15c:	f3af 8000 	nop.w
 801a160:	1c42      	adds	r2, r0, #1
 801a162:	4606      	mov	r6, r0
 801a164:	d1d6      	bne.n	801a114 <_svfiprintf_r+0x174>
 801a166:	89ab      	ldrh	r3, [r5, #12]
 801a168:	065b      	lsls	r3, r3, #25
 801a16a:	f53f af2d 	bmi.w	8019fc8 <_svfiprintf_r+0x28>
 801a16e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801a170:	e72c      	b.n	8019fcc <_svfiprintf_r+0x2c>
 801a172:	ab03      	add	r3, sp, #12
 801a174:	9300      	str	r3, [sp, #0]
 801a176:	462a      	mov	r2, r5
 801a178:	4b05      	ldr	r3, [pc, #20]	@ (801a190 <_svfiprintf_r+0x1f0>)
 801a17a:	a904      	add	r1, sp, #16
 801a17c:	4638      	mov	r0, r7
 801a17e:	f000 f9bb 	bl	801a4f8 <_printf_i>
 801a182:	e7ed      	b.n	801a160 <_svfiprintf_r+0x1c0>
 801a184:	0801c73c 	.word	0x0801c73c
 801a188:	0801c746 	.word	0x0801c746
 801a18c:	00000000 	.word	0x00000000
 801a190:	08019ee9 	.word	0x08019ee9
 801a194:	0801c742 	.word	0x0801c742

0801a198 <__sfputc_r>:
 801a198:	6893      	ldr	r3, [r2, #8]
 801a19a:	3b01      	subs	r3, #1
 801a19c:	2b00      	cmp	r3, #0
 801a19e:	b410      	push	{r4}
 801a1a0:	6093      	str	r3, [r2, #8]
 801a1a2:	da08      	bge.n	801a1b6 <__sfputc_r+0x1e>
 801a1a4:	6994      	ldr	r4, [r2, #24]
 801a1a6:	42a3      	cmp	r3, r4
 801a1a8:	db01      	blt.n	801a1ae <__sfputc_r+0x16>
 801a1aa:	290a      	cmp	r1, #10
 801a1ac:	d103      	bne.n	801a1b6 <__sfputc_r+0x1e>
 801a1ae:	f85d 4b04 	ldr.w	r4, [sp], #4
 801a1b2:	f000 bb7f 	b.w	801a8b4 <__swbuf_r>
 801a1b6:	6813      	ldr	r3, [r2, #0]
 801a1b8:	1c58      	adds	r0, r3, #1
 801a1ba:	6010      	str	r0, [r2, #0]
 801a1bc:	7019      	strb	r1, [r3, #0]
 801a1be:	4608      	mov	r0, r1
 801a1c0:	f85d 4b04 	ldr.w	r4, [sp], #4
 801a1c4:	4770      	bx	lr

0801a1c6 <__sfputs_r>:
 801a1c6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a1c8:	4606      	mov	r6, r0
 801a1ca:	460f      	mov	r7, r1
 801a1cc:	4614      	mov	r4, r2
 801a1ce:	18d5      	adds	r5, r2, r3
 801a1d0:	42ac      	cmp	r4, r5
 801a1d2:	d101      	bne.n	801a1d8 <__sfputs_r+0x12>
 801a1d4:	2000      	movs	r0, #0
 801a1d6:	e007      	b.n	801a1e8 <__sfputs_r+0x22>
 801a1d8:	f814 1b01 	ldrb.w	r1, [r4], #1
 801a1dc:	463a      	mov	r2, r7
 801a1de:	4630      	mov	r0, r6
 801a1e0:	f7ff ffda 	bl	801a198 <__sfputc_r>
 801a1e4:	1c43      	adds	r3, r0, #1
 801a1e6:	d1f3      	bne.n	801a1d0 <__sfputs_r+0xa>
 801a1e8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0801a1ec <_vfiprintf_r>:
 801a1ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a1f0:	460d      	mov	r5, r1
 801a1f2:	b09d      	sub	sp, #116	@ 0x74
 801a1f4:	4614      	mov	r4, r2
 801a1f6:	4698      	mov	r8, r3
 801a1f8:	4606      	mov	r6, r0
 801a1fa:	b118      	cbz	r0, 801a204 <_vfiprintf_r+0x18>
 801a1fc:	6a03      	ldr	r3, [r0, #32]
 801a1fe:	b90b      	cbnz	r3, 801a204 <_vfiprintf_r+0x18>
 801a200:	f7ff fbb6 	bl	8019970 <__sinit>
 801a204:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801a206:	07d9      	lsls	r1, r3, #31
 801a208:	d405      	bmi.n	801a216 <_vfiprintf_r+0x2a>
 801a20a:	89ab      	ldrh	r3, [r5, #12]
 801a20c:	059a      	lsls	r2, r3, #22
 801a20e:	d402      	bmi.n	801a216 <_vfiprintf_r+0x2a>
 801a210:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801a212:	f7ff fdd4 	bl	8019dbe <__retarget_lock_acquire_recursive>
 801a216:	89ab      	ldrh	r3, [r5, #12]
 801a218:	071b      	lsls	r3, r3, #28
 801a21a:	d501      	bpl.n	801a220 <_vfiprintf_r+0x34>
 801a21c:	692b      	ldr	r3, [r5, #16]
 801a21e:	b99b      	cbnz	r3, 801a248 <_vfiprintf_r+0x5c>
 801a220:	4629      	mov	r1, r5
 801a222:	4630      	mov	r0, r6
 801a224:	f000 fb84 	bl	801a930 <__swsetup_r>
 801a228:	b170      	cbz	r0, 801a248 <_vfiprintf_r+0x5c>
 801a22a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801a22c:	07dc      	lsls	r4, r3, #31
 801a22e:	d504      	bpl.n	801a23a <_vfiprintf_r+0x4e>
 801a230:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801a234:	b01d      	add	sp, #116	@ 0x74
 801a236:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a23a:	89ab      	ldrh	r3, [r5, #12]
 801a23c:	0598      	lsls	r0, r3, #22
 801a23e:	d4f7      	bmi.n	801a230 <_vfiprintf_r+0x44>
 801a240:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801a242:	f7ff fdbd 	bl	8019dc0 <__retarget_lock_release_recursive>
 801a246:	e7f3      	b.n	801a230 <_vfiprintf_r+0x44>
 801a248:	2300      	movs	r3, #0
 801a24a:	9309      	str	r3, [sp, #36]	@ 0x24
 801a24c:	2320      	movs	r3, #32
 801a24e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 801a252:	f8cd 800c 	str.w	r8, [sp, #12]
 801a256:	2330      	movs	r3, #48	@ 0x30
 801a258:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 801a408 <_vfiprintf_r+0x21c>
 801a25c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 801a260:	f04f 0901 	mov.w	r9, #1
 801a264:	4623      	mov	r3, r4
 801a266:	469a      	mov	sl, r3
 801a268:	f813 2b01 	ldrb.w	r2, [r3], #1
 801a26c:	b10a      	cbz	r2, 801a272 <_vfiprintf_r+0x86>
 801a26e:	2a25      	cmp	r2, #37	@ 0x25
 801a270:	d1f9      	bne.n	801a266 <_vfiprintf_r+0x7a>
 801a272:	ebba 0b04 	subs.w	fp, sl, r4
 801a276:	d00b      	beq.n	801a290 <_vfiprintf_r+0xa4>
 801a278:	465b      	mov	r3, fp
 801a27a:	4622      	mov	r2, r4
 801a27c:	4629      	mov	r1, r5
 801a27e:	4630      	mov	r0, r6
 801a280:	f7ff ffa1 	bl	801a1c6 <__sfputs_r>
 801a284:	3001      	adds	r0, #1
 801a286:	f000 80a7 	beq.w	801a3d8 <_vfiprintf_r+0x1ec>
 801a28a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801a28c:	445a      	add	r2, fp
 801a28e:	9209      	str	r2, [sp, #36]	@ 0x24
 801a290:	f89a 3000 	ldrb.w	r3, [sl]
 801a294:	2b00      	cmp	r3, #0
 801a296:	f000 809f 	beq.w	801a3d8 <_vfiprintf_r+0x1ec>
 801a29a:	2300      	movs	r3, #0
 801a29c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 801a2a0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801a2a4:	f10a 0a01 	add.w	sl, sl, #1
 801a2a8:	9304      	str	r3, [sp, #16]
 801a2aa:	9307      	str	r3, [sp, #28]
 801a2ac:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 801a2b0:	931a      	str	r3, [sp, #104]	@ 0x68
 801a2b2:	4654      	mov	r4, sl
 801a2b4:	2205      	movs	r2, #5
 801a2b6:	f814 1b01 	ldrb.w	r1, [r4], #1
 801a2ba:	4853      	ldr	r0, [pc, #332]	@ (801a408 <_vfiprintf_r+0x21c>)
 801a2bc:	f7e5 ffa0 	bl	8000200 <memchr>
 801a2c0:	9a04      	ldr	r2, [sp, #16]
 801a2c2:	b9d8      	cbnz	r0, 801a2fc <_vfiprintf_r+0x110>
 801a2c4:	06d1      	lsls	r1, r2, #27
 801a2c6:	bf44      	itt	mi
 801a2c8:	2320      	movmi	r3, #32
 801a2ca:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801a2ce:	0713      	lsls	r3, r2, #28
 801a2d0:	bf44      	itt	mi
 801a2d2:	232b      	movmi	r3, #43	@ 0x2b
 801a2d4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801a2d8:	f89a 3000 	ldrb.w	r3, [sl]
 801a2dc:	2b2a      	cmp	r3, #42	@ 0x2a
 801a2de:	d015      	beq.n	801a30c <_vfiprintf_r+0x120>
 801a2e0:	9a07      	ldr	r2, [sp, #28]
 801a2e2:	4654      	mov	r4, sl
 801a2e4:	2000      	movs	r0, #0
 801a2e6:	f04f 0c0a 	mov.w	ip, #10
 801a2ea:	4621      	mov	r1, r4
 801a2ec:	f811 3b01 	ldrb.w	r3, [r1], #1
 801a2f0:	3b30      	subs	r3, #48	@ 0x30
 801a2f2:	2b09      	cmp	r3, #9
 801a2f4:	d94b      	bls.n	801a38e <_vfiprintf_r+0x1a2>
 801a2f6:	b1b0      	cbz	r0, 801a326 <_vfiprintf_r+0x13a>
 801a2f8:	9207      	str	r2, [sp, #28]
 801a2fa:	e014      	b.n	801a326 <_vfiprintf_r+0x13a>
 801a2fc:	eba0 0308 	sub.w	r3, r0, r8
 801a300:	fa09 f303 	lsl.w	r3, r9, r3
 801a304:	4313      	orrs	r3, r2
 801a306:	9304      	str	r3, [sp, #16]
 801a308:	46a2      	mov	sl, r4
 801a30a:	e7d2      	b.n	801a2b2 <_vfiprintf_r+0xc6>
 801a30c:	9b03      	ldr	r3, [sp, #12]
 801a30e:	1d19      	adds	r1, r3, #4
 801a310:	681b      	ldr	r3, [r3, #0]
 801a312:	9103      	str	r1, [sp, #12]
 801a314:	2b00      	cmp	r3, #0
 801a316:	bfbb      	ittet	lt
 801a318:	425b      	neglt	r3, r3
 801a31a:	f042 0202 	orrlt.w	r2, r2, #2
 801a31e:	9307      	strge	r3, [sp, #28]
 801a320:	9307      	strlt	r3, [sp, #28]
 801a322:	bfb8      	it	lt
 801a324:	9204      	strlt	r2, [sp, #16]
 801a326:	7823      	ldrb	r3, [r4, #0]
 801a328:	2b2e      	cmp	r3, #46	@ 0x2e
 801a32a:	d10a      	bne.n	801a342 <_vfiprintf_r+0x156>
 801a32c:	7863      	ldrb	r3, [r4, #1]
 801a32e:	2b2a      	cmp	r3, #42	@ 0x2a
 801a330:	d132      	bne.n	801a398 <_vfiprintf_r+0x1ac>
 801a332:	9b03      	ldr	r3, [sp, #12]
 801a334:	1d1a      	adds	r2, r3, #4
 801a336:	681b      	ldr	r3, [r3, #0]
 801a338:	9203      	str	r2, [sp, #12]
 801a33a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 801a33e:	3402      	adds	r4, #2
 801a340:	9305      	str	r3, [sp, #20]
 801a342:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 801a418 <_vfiprintf_r+0x22c>
 801a346:	7821      	ldrb	r1, [r4, #0]
 801a348:	2203      	movs	r2, #3
 801a34a:	4650      	mov	r0, sl
 801a34c:	f7e5 ff58 	bl	8000200 <memchr>
 801a350:	b138      	cbz	r0, 801a362 <_vfiprintf_r+0x176>
 801a352:	9b04      	ldr	r3, [sp, #16]
 801a354:	eba0 000a 	sub.w	r0, r0, sl
 801a358:	2240      	movs	r2, #64	@ 0x40
 801a35a:	4082      	lsls	r2, r0
 801a35c:	4313      	orrs	r3, r2
 801a35e:	3401      	adds	r4, #1
 801a360:	9304      	str	r3, [sp, #16]
 801a362:	f814 1b01 	ldrb.w	r1, [r4], #1
 801a366:	4829      	ldr	r0, [pc, #164]	@ (801a40c <_vfiprintf_r+0x220>)
 801a368:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 801a36c:	2206      	movs	r2, #6
 801a36e:	f7e5 ff47 	bl	8000200 <memchr>
 801a372:	2800      	cmp	r0, #0
 801a374:	d03f      	beq.n	801a3f6 <_vfiprintf_r+0x20a>
 801a376:	4b26      	ldr	r3, [pc, #152]	@ (801a410 <_vfiprintf_r+0x224>)
 801a378:	bb1b      	cbnz	r3, 801a3c2 <_vfiprintf_r+0x1d6>
 801a37a:	9b03      	ldr	r3, [sp, #12]
 801a37c:	3307      	adds	r3, #7
 801a37e:	f023 0307 	bic.w	r3, r3, #7
 801a382:	3308      	adds	r3, #8
 801a384:	9303      	str	r3, [sp, #12]
 801a386:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801a388:	443b      	add	r3, r7
 801a38a:	9309      	str	r3, [sp, #36]	@ 0x24
 801a38c:	e76a      	b.n	801a264 <_vfiprintf_r+0x78>
 801a38e:	fb0c 3202 	mla	r2, ip, r2, r3
 801a392:	460c      	mov	r4, r1
 801a394:	2001      	movs	r0, #1
 801a396:	e7a8      	b.n	801a2ea <_vfiprintf_r+0xfe>
 801a398:	2300      	movs	r3, #0
 801a39a:	3401      	adds	r4, #1
 801a39c:	9305      	str	r3, [sp, #20]
 801a39e:	4619      	mov	r1, r3
 801a3a0:	f04f 0c0a 	mov.w	ip, #10
 801a3a4:	4620      	mov	r0, r4
 801a3a6:	f810 2b01 	ldrb.w	r2, [r0], #1
 801a3aa:	3a30      	subs	r2, #48	@ 0x30
 801a3ac:	2a09      	cmp	r2, #9
 801a3ae:	d903      	bls.n	801a3b8 <_vfiprintf_r+0x1cc>
 801a3b0:	2b00      	cmp	r3, #0
 801a3b2:	d0c6      	beq.n	801a342 <_vfiprintf_r+0x156>
 801a3b4:	9105      	str	r1, [sp, #20]
 801a3b6:	e7c4      	b.n	801a342 <_vfiprintf_r+0x156>
 801a3b8:	fb0c 2101 	mla	r1, ip, r1, r2
 801a3bc:	4604      	mov	r4, r0
 801a3be:	2301      	movs	r3, #1
 801a3c0:	e7f0      	b.n	801a3a4 <_vfiprintf_r+0x1b8>
 801a3c2:	ab03      	add	r3, sp, #12
 801a3c4:	9300      	str	r3, [sp, #0]
 801a3c6:	462a      	mov	r2, r5
 801a3c8:	4b12      	ldr	r3, [pc, #72]	@ (801a414 <_vfiprintf_r+0x228>)
 801a3ca:	a904      	add	r1, sp, #16
 801a3cc:	4630      	mov	r0, r6
 801a3ce:	f3af 8000 	nop.w
 801a3d2:	4607      	mov	r7, r0
 801a3d4:	1c78      	adds	r0, r7, #1
 801a3d6:	d1d6      	bne.n	801a386 <_vfiprintf_r+0x19a>
 801a3d8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801a3da:	07d9      	lsls	r1, r3, #31
 801a3dc:	d405      	bmi.n	801a3ea <_vfiprintf_r+0x1fe>
 801a3de:	89ab      	ldrh	r3, [r5, #12]
 801a3e0:	059a      	lsls	r2, r3, #22
 801a3e2:	d402      	bmi.n	801a3ea <_vfiprintf_r+0x1fe>
 801a3e4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801a3e6:	f7ff fceb 	bl	8019dc0 <__retarget_lock_release_recursive>
 801a3ea:	89ab      	ldrh	r3, [r5, #12]
 801a3ec:	065b      	lsls	r3, r3, #25
 801a3ee:	f53f af1f 	bmi.w	801a230 <_vfiprintf_r+0x44>
 801a3f2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801a3f4:	e71e      	b.n	801a234 <_vfiprintf_r+0x48>
 801a3f6:	ab03      	add	r3, sp, #12
 801a3f8:	9300      	str	r3, [sp, #0]
 801a3fa:	462a      	mov	r2, r5
 801a3fc:	4b05      	ldr	r3, [pc, #20]	@ (801a414 <_vfiprintf_r+0x228>)
 801a3fe:	a904      	add	r1, sp, #16
 801a400:	4630      	mov	r0, r6
 801a402:	f000 f879 	bl	801a4f8 <_printf_i>
 801a406:	e7e4      	b.n	801a3d2 <_vfiprintf_r+0x1e6>
 801a408:	0801c73c 	.word	0x0801c73c
 801a40c:	0801c746 	.word	0x0801c746
 801a410:	00000000 	.word	0x00000000
 801a414:	0801a1c7 	.word	0x0801a1c7
 801a418:	0801c742 	.word	0x0801c742

0801a41c <_printf_common>:
 801a41c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801a420:	4616      	mov	r6, r2
 801a422:	4698      	mov	r8, r3
 801a424:	688a      	ldr	r2, [r1, #8]
 801a426:	690b      	ldr	r3, [r1, #16]
 801a428:	f8dd 9020 	ldr.w	r9, [sp, #32]
 801a42c:	4293      	cmp	r3, r2
 801a42e:	bfb8      	it	lt
 801a430:	4613      	movlt	r3, r2
 801a432:	6033      	str	r3, [r6, #0]
 801a434:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 801a438:	4607      	mov	r7, r0
 801a43a:	460c      	mov	r4, r1
 801a43c:	b10a      	cbz	r2, 801a442 <_printf_common+0x26>
 801a43e:	3301      	adds	r3, #1
 801a440:	6033      	str	r3, [r6, #0]
 801a442:	6823      	ldr	r3, [r4, #0]
 801a444:	0699      	lsls	r1, r3, #26
 801a446:	bf42      	ittt	mi
 801a448:	6833      	ldrmi	r3, [r6, #0]
 801a44a:	3302      	addmi	r3, #2
 801a44c:	6033      	strmi	r3, [r6, #0]
 801a44e:	6825      	ldr	r5, [r4, #0]
 801a450:	f015 0506 	ands.w	r5, r5, #6
 801a454:	d106      	bne.n	801a464 <_printf_common+0x48>
 801a456:	f104 0a19 	add.w	sl, r4, #25
 801a45a:	68e3      	ldr	r3, [r4, #12]
 801a45c:	6832      	ldr	r2, [r6, #0]
 801a45e:	1a9b      	subs	r3, r3, r2
 801a460:	42ab      	cmp	r3, r5
 801a462:	dc26      	bgt.n	801a4b2 <_printf_common+0x96>
 801a464:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 801a468:	6822      	ldr	r2, [r4, #0]
 801a46a:	3b00      	subs	r3, #0
 801a46c:	bf18      	it	ne
 801a46e:	2301      	movne	r3, #1
 801a470:	0692      	lsls	r2, r2, #26
 801a472:	d42b      	bmi.n	801a4cc <_printf_common+0xb0>
 801a474:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 801a478:	4641      	mov	r1, r8
 801a47a:	4638      	mov	r0, r7
 801a47c:	47c8      	blx	r9
 801a47e:	3001      	adds	r0, #1
 801a480:	d01e      	beq.n	801a4c0 <_printf_common+0xa4>
 801a482:	6823      	ldr	r3, [r4, #0]
 801a484:	6922      	ldr	r2, [r4, #16]
 801a486:	f003 0306 	and.w	r3, r3, #6
 801a48a:	2b04      	cmp	r3, #4
 801a48c:	bf02      	ittt	eq
 801a48e:	68e5      	ldreq	r5, [r4, #12]
 801a490:	6833      	ldreq	r3, [r6, #0]
 801a492:	1aed      	subeq	r5, r5, r3
 801a494:	68a3      	ldr	r3, [r4, #8]
 801a496:	bf0c      	ite	eq
 801a498:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801a49c:	2500      	movne	r5, #0
 801a49e:	4293      	cmp	r3, r2
 801a4a0:	bfc4      	itt	gt
 801a4a2:	1a9b      	subgt	r3, r3, r2
 801a4a4:	18ed      	addgt	r5, r5, r3
 801a4a6:	2600      	movs	r6, #0
 801a4a8:	341a      	adds	r4, #26
 801a4aa:	42b5      	cmp	r5, r6
 801a4ac:	d11a      	bne.n	801a4e4 <_printf_common+0xc8>
 801a4ae:	2000      	movs	r0, #0
 801a4b0:	e008      	b.n	801a4c4 <_printf_common+0xa8>
 801a4b2:	2301      	movs	r3, #1
 801a4b4:	4652      	mov	r2, sl
 801a4b6:	4641      	mov	r1, r8
 801a4b8:	4638      	mov	r0, r7
 801a4ba:	47c8      	blx	r9
 801a4bc:	3001      	adds	r0, #1
 801a4be:	d103      	bne.n	801a4c8 <_printf_common+0xac>
 801a4c0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801a4c4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801a4c8:	3501      	adds	r5, #1
 801a4ca:	e7c6      	b.n	801a45a <_printf_common+0x3e>
 801a4cc:	18e1      	adds	r1, r4, r3
 801a4ce:	1c5a      	adds	r2, r3, #1
 801a4d0:	2030      	movs	r0, #48	@ 0x30
 801a4d2:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 801a4d6:	4422      	add	r2, r4
 801a4d8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 801a4dc:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 801a4e0:	3302      	adds	r3, #2
 801a4e2:	e7c7      	b.n	801a474 <_printf_common+0x58>
 801a4e4:	2301      	movs	r3, #1
 801a4e6:	4622      	mov	r2, r4
 801a4e8:	4641      	mov	r1, r8
 801a4ea:	4638      	mov	r0, r7
 801a4ec:	47c8      	blx	r9
 801a4ee:	3001      	adds	r0, #1
 801a4f0:	d0e6      	beq.n	801a4c0 <_printf_common+0xa4>
 801a4f2:	3601      	adds	r6, #1
 801a4f4:	e7d9      	b.n	801a4aa <_printf_common+0x8e>
	...

0801a4f8 <_printf_i>:
 801a4f8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801a4fc:	7e0f      	ldrb	r7, [r1, #24]
 801a4fe:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 801a500:	2f78      	cmp	r7, #120	@ 0x78
 801a502:	4691      	mov	r9, r2
 801a504:	4680      	mov	r8, r0
 801a506:	460c      	mov	r4, r1
 801a508:	469a      	mov	sl, r3
 801a50a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 801a50e:	d807      	bhi.n	801a520 <_printf_i+0x28>
 801a510:	2f62      	cmp	r7, #98	@ 0x62
 801a512:	d80a      	bhi.n	801a52a <_printf_i+0x32>
 801a514:	2f00      	cmp	r7, #0
 801a516:	f000 80d2 	beq.w	801a6be <_printf_i+0x1c6>
 801a51a:	2f58      	cmp	r7, #88	@ 0x58
 801a51c:	f000 80b9 	beq.w	801a692 <_printf_i+0x19a>
 801a520:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 801a524:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 801a528:	e03a      	b.n	801a5a0 <_printf_i+0xa8>
 801a52a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 801a52e:	2b15      	cmp	r3, #21
 801a530:	d8f6      	bhi.n	801a520 <_printf_i+0x28>
 801a532:	a101      	add	r1, pc, #4	@ (adr r1, 801a538 <_printf_i+0x40>)
 801a534:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 801a538:	0801a591 	.word	0x0801a591
 801a53c:	0801a5a5 	.word	0x0801a5a5
 801a540:	0801a521 	.word	0x0801a521
 801a544:	0801a521 	.word	0x0801a521
 801a548:	0801a521 	.word	0x0801a521
 801a54c:	0801a521 	.word	0x0801a521
 801a550:	0801a5a5 	.word	0x0801a5a5
 801a554:	0801a521 	.word	0x0801a521
 801a558:	0801a521 	.word	0x0801a521
 801a55c:	0801a521 	.word	0x0801a521
 801a560:	0801a521 	.word	0x0801a521
 801a564:	0801a6a5 	.word	0x0801a6a5
 801a568:	0801a5cf 	.word	0x0801a5cf
 801a56c:	0801a65f 	.word	0x0801a65f
 801a570:	0801a521 	.word	0x0801a521
 801a574:	0801a521 	.word	0x0801a521
 801a578:	0801a6c7 	.word	0x0801a6c7
 801a57c:	0801a521 	.word	0x0801a521
 801a580:	0801a5cf 	.word	0x0801a5cf
 801a584:	0801a521 	.word	0x0801a521
 801a588:	0801a521 	.word	0x0801a521
 801a58c:	0801a667 	.word	0x0801a667
 801a590:	6833      	ldr	r3, [r6, #0]
 801a592:	1d1a      	adds	r2, r3, #4
 801a594:	681b      	ldr	r3, [r3, #0]
 801a596:	6032      	str	r2, [r6, #0]
 801a598:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 801a59c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 801a5a0:	2301      	movs	r3, #1
 801a5a2:	e09d      	b.n	801a6e0 <_printf_i+0x1e8>
 801a5a4:	6833      	ldr	r3, [r6, #0]
 801a5a6:	6820      	ldr	r0, [r4, #0]
 801a5a8:	1d19      	adds	r1, r3, #4
 801a5aa:	6031      	str	r1, [r6, #0]
 801a5ac:	0606      	lsls	r6, r0, #24
 801a5ae:	d501      	bpl.n	801a5b4 <_printf_i+0xbc>
 801a5b0:	681d      	ldr	r5, [r3, #0]
 801a5b2:	e003      	b.n	801a5bc <_printf_i+0xc4>
 801a5b4:	0645      	lsls	r5, r0, #25
 801a5b6:	d5fb      	bpl.n	801a5b0 <_printf_i+0xb8>
 801a5b8:	f9b3 5000 	ldrsh.w	r5, [r3]
 801a5bc:	2d00      	cmp	r5, #0
 801a5be:	da03      	bge.n	801a5c8 <_printf_i+0xd0>
 801a5c0:	232d      	movs	r3, #45	@ 0x2d
 801a5c2:	426d      	negs	r5, r5
 801a5c4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 801a5c8:	4859      	ldr	r0, [pc, #356]	@ (801a730 <_printf_i+0x238>)
 801a5ca:	230a      	movs	r3, #10
 801a5cc:	e011      	b.n	801a5f2 <_printf_i+0xfa>
 801a5ce:	6821      	ldr	r1, [r4, #0]
 801a5d0:	6833      	ldr	r3, [r6, #0]
 801a5d2:	0608      	lsls	r0, r1, #24
 801a5d4:	f853 5b04 	ldr.w	r5, [r3], #4
 801a5d8:	d402      	bmi.n	801a5e0 <_printf_i+0xe8>
 801a5da:	0649      	lsls	r1, r1, #25
 801a5dc:	bf48      	it	mi
 801a5de:	b2ad      	uxthmi	r5, r5
 801a5e0:	2f6f      	cmp	r7, #111	@ 0x6f
 801a5e2:	4853      	ldr	r0, [pc, #332]	@ (801a730 <_printf_i+0x238>)
 801a5e4:	6033      	str	r3, [r6, #0]
 801a5e6:	bf14      	ite	ne
 801a5e8:	230a      	movne	r3, #10
 801a5ea:	2308      	moveq	r3, #8
 801a5ec:	2100      	movs	r1, #0
 801a5ee:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 801a5f2:	6866      	ldr	r6, [r4, #4]
 801a5f4:	60a6      	str	r6, [r4, #8]
 801a5f6:	2e00      	cmp	r6, #0
 801a5f8:	bfa2      	ittt	ge
 801a5fa:	6821      	ldrge	r1, [r4, #0]
 801a5fc:	f021 0104 	bicge.w	r1, r1, #4
 801a600:	6021      	strge	r1, [r4, #0]
 801a602:	b90d      	cbnz	r5, 801a608 <_printf_i+0x110>
 801a604:	2e00      	cmp	r6, #0
 801a606:	d04b      	beq.n	801a6a0 <_printf_i+0x1a8>
 801a608:	4616      	mov	r6, r2
 801a60a:	fbb5 f1f3 	udiv	r1, r5, r3
 801a60e:	fb03 5711 	mls	r7, r3, r1, r5
 801a612:	5dc7      	ldrb	r7, [r0, r7]
 801a614:	f806 7d01 	strb.w	r7, [r6, #-1]!
 801a618:	462f      	mov	r7, r5
 801a61a:	42bb      	cmp	r3, r7
 801a61c:	460d      	mov	r5, r1
 801a61e:	d9f4      	bls.n	801a60a <_printf_i+0x112>
 801a620:	2b08      	cmp	r3, #8
 801a622:	d10b      	bne.n	801a63c <_printf_i+0x144>
 801a624:	6823      	ldr	r3, [r4, #0]
 801a626:	07df      	lsls	r7, r3, #31
 801a628:	d508      	bpl.n	801a63c <_printf_i+0x144>
 801a62a:	6923      	ldr	r3, [r4, #16]
 801a62c:	6861      	ldr	r1, [r4, #4]
 801a62e:	4299      	cmp	r1, r3
 801a630:	bfde      	ittt	le
 801a632:	2330      	movle	r3, #48	@ 0x30
 801a634:	f806 3c01 	strble.w	r3, [r6, #-1]
 801a638:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 801a63c:	1b92      	subs	r2, r2, r6
 801a63e:	6122      	str	r2, [r4, #16]
 801a640:	f8cd a000 	str.w	sl, [sp]
 801a644:	464b      	mov	r3, r9
 801a646:	aa03      	add	r2, sp, #12
 801a648:	4621      	mov	r1, r4
 801a64a:	4640      	mov	r0, r8
 801a64c:	f7ff fee6 	bl	801a41c <_printf_common>
 801a650:	3001      	adds	r0, #1
 801a652:	d14a      	bne.n	801a6ea <_printf_i+0x1f2>
 801a654:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801a658:	b004      	add	sp, #16
 801a65a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801a65e:	6823      	ldr	r3, [r4, #0]
 801a660:	f043 0320 	orr.w	r3, r3, #32
 801a664:	6023      	str	r3, [r4, #0]
 801a666:	4833      	ldr	r0, [pc, #204]	@ (801a734 <_printf_i+0x23c>)
 801a668:	2778      	movs	r7, #120	@ 0x78
 801a66a:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 801a66e:	6823      	ldr	r3, [r4, #0]
 801a670:	6831      	ldr	r1, [r6, #0]
 801a672:	061f      	lsls	r7, r3, #24
 801a674:	f851 5b04 	ldr.w	r5, [r1], #4
 801a678:	d402      	bmi.n	801a680 <_printf_i+0x188>
 801a67a:	065f      	lsls	r7, r3, #25
 801a67c:	bf48      	it	mi
 801a67e:	b2ad      	uxthmi	r5, r5
 801a680:	6031      	str	r1, [r6, #0]
 801a682:	07d9      	lsls	r1, r3, #31
 801a684:	bf44      	itt	mi
 801a686:	f043 0320 	orrmi.w	r3, r3, #32
 801a68a:	6023      	strmi	r3, [r4, #0]
 801a68c:	b11d      	cbz	r5, 801a696 <_printf_i+0x19e>
 801a68e:	2310      	movs	r3, #16
 801a690:	e7ac      	b.n	801a5ec <_printf_i+0xf4>
 801a692:	4827      	ldr	r0, [pc, #156]	@ (801a730 <_printf_i+0x238>)
 801a694:	e7e9      	b.n	801a66a <_printf_i+0x172>
 801a696:	6823      	ldr	r3, [r4, #0]
 801a698:	f023 0320 	bic.w	r3, r3, #32
 801a69c:	6023      	str	r3, [r4, #0]
 801a69e:	e7f6      	b.n	801a68e <_printf_i+0x196>
 801a6a0:	4616      	mov	r6, r2
 801a6a2:	e7bd      	b.n	801a620 <_printf_i+0x128>
 801a6a4:	6833      	ldr	r3, [r6, #0]
 801a6a6:	6825      	ldr	r5, [r4, #0]
 801a6a8:	6961      	ldr	r1, [r4, #20]
 801a6aa:	1d18      	adds	r0, r3, #4
 801a6ac:	6030      	str	r0, [r6, #0]
 801a6ae:	062e      	lsls	r6, r5, #24
 801a6b0:	681b      	ldr	r3, [r3, #0]
 801a6b2:	d501      	bpl.n	801a6b8 <_printf_i+0x1c0>
 801a6b4:	6019      	str	r1, [r3, #0]
 801a6b6:	e002      	b.n	801a6be <_printf_i+0x1c6>
 801a6b8:	0668      	lsls	r0, r5, #25
 801a6ba:	d5fb      	bpl.n	801a6b4 <_printf_i+0x1bc>
 801a6bc:	8019      	strh	r1, [r3, #0]
 801a6be:	2300      	movs	r3, #0
 801a6c0:	6123      	str	r3, [r4, #16]
 801a6c2:	4616      	mov	r6, r2
 801a6c4:	e7bc      	b.n	801a640 <_printf_i+0x148>
 801a6c6:	6833      	ldr	r3, [r6, #0]
 801a6c8:	1d1a      	adds	r2, r3, #4
 801a6ca:	6032      	str	r2, [r6, #0]
 801a6cc:	681e      	ldr	r6, [r3, #0]
 801a6ce:	6862      	ldr	r2, [r4, #4]
 801a6d0:	2100      	movs	r1, #0
 801a6d2:	4630      	mov	r0, r6
 801a6d4:	f7e5 fd94 	bl	8000200 <memchr>
 801a6d8:	b108      	cbz	r0, 801a6de <_printf_i+0x1e6>
 801a6da:	1b80      	subs	r0, r0, r6
 801a6dc:	6060      	str	r0, [r4, #4]
 801a6de:	6863      	ldr	r3, [r4, #4]
 801a6e0:	6123      	str	r3, [r4, #16]
 801a6e2:	2300      	movs	r3, #0
 801a6e4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 801a6e8:	e7aa      	b.n	801a640 <_printf_i+0x148>
 801a6ea:	6923      	ldr	r3, [r4, #16]
 801a6ec:	4632      	mov	r2, r6
 801a6ee:	4649      	mov	r1, r9
 801a6f0:	4640      	mov	r0, r8
 801a6f2:	47d0      	blx	sl
 801a6f4:	3001      	adds	r0, #1
 801a6f6:	d0ad      	beq.n	801a654 <_printf_i+0x15c>
 801a6f8:	6823      	ldr	r3, [r4, #0]
 801a6fa:	079b      	lsls	r3, r3, #30
 801a6fc:	d413      	bmi.n	801a726 <_printf_i+0x22e>
 801a6fe:	68e0      	ldr	r0, [r4, #12]
 801a700:	9b03      	ldr	r3, [sp, #12]
 801a702:	4298      	cmp	r0, r3
 801a704:	bfb8      	it	lt
 801a706:	4618      	movlt	r0, r3
 801a708:	e7a6      	b.n	801a658 <_printf_i+0x160>
 801a70a:	2301      	movs	r3, #1
 801a70c:	4632      	mov	r2, r6
 801a70e:	4649      	mov	r1, r9
 801a710:	4640      	mov	r0, r8
 801a712:	47d0      	blx	sl
 801a714:	3001      	adds	r0, #1
 801a716:	d09d      	beq.n	801a654 <_printf_i+0x15c>
 801a718:	3501      	adds	r5, #1
 801a71a:	68e3      	ldr	r3, [r4, #12]
 801a71c:	9903      	ldr	r1, [sp, #12]
 801a71e:	1a5b      	subs	r3, r3, r1
 801a720:	42ab      	cmp	r3, r5
 801a722:	dcf2      	bgt.n	801a70a <_printf_i+0x212>
 801a724:	e7eb      	b.n	801a6fe <_printf_i+0x206>
 801a726:	2500      	movs	r5, #0
 801a728:	f104 0619 	add.w	r6, r4, #25
 801a72c:	e7f5      	b.n	801a71a <_printf_i+0x222>
 801a72e:	bf00      	nop
 801a730:	0801c74d 	.word	0x0801c74d
 801a734:	0801c75e 	.word	0x0801c75e

0801a738 <__sflush_r>:
 801a738:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 801a73c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801a740:	0716      	lsls	r6, r2, #28
 801a742:	4605      	mov	r5, r0
 801a744:	460c      	mov	r4, r1
 801a746:	d454      	bmi.n	801a7f2 <__sflush_r+0xba>
 801a748:	684b      	ldr	r3, [r1, #4]
 801a74a:	2b00      	cmp	r3, #0
 801a74c:	dc02      	bgt.n	801a754 <__sflush_r+0x1c>
 801a74e:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 801a750:	2b00      	cmp	r3, #0
 801a752:	dd48      	ble.n	801a7e6 <__sflush_r+0xae>
 801a754:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 801a756:	2e00      	cmp	r6, #0
 801a758:	d045      	beq.n	801a7e6 <__sflush_r+0xae>
 801a75a:	2300      	movs	r3, #0
 801a75c:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 801a760:	682f      	ldr	r7, [r5, #0]
 801a762:	6a21      	ldr	r1, [r4, #32]
 801a764:	602b      	str	r3, [r5, #0]
 801a766:	d030      	beq.n	801a7ca <__sflush_r+0x92>
 801a768:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 801a76a:	89a3      	ldrh	r3, [r4, #12]
 801a76c:	0759      	lsls	r1, r3, #29
 801a76e:	d505      	bpl.n	801a77c <__sflush_r+0x44>
 801a770:	6863      	ldr	r3, [r4, #4]
 801a772:	1ad2      	subs	r2, r2, r3
 801a774:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 801a776:	b10b      	cbz	r3, 801a77c <__sflush_r+0x44>
 801a778:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 801a77a:	1ad2      	subs	r2, r2, r3
 801a77c:	2300      	movs	r3, #0
 801a77e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 801a780:	6a21      	ldr	r1, [r4, #32]
 801a782:	4628      	mov	r0, r5
 801a784:	47b0      	blx	r6
 801a786:	1c43      	adds	r3, r0, #1
 801a788:	89a3      	ldrh	r3, [r4, #12]
 801a78a:	d106      	bne.n	801a79a <__sflush_r+0x62>
 801a78c:	6829      	ldr	r1, [r5, #0]
 801a78e:	291d      	cmp	r1, #29
 801a790:	d82b      	bhi.n	801a7ea <__sflush_r+0xb2>
 801a792:	4a2a      	ldr	r2, [pc, #168]	@ (801a83c <__sflush_r+0x104>)
 801a794:	410a      	asrs	r2, r1
 801a796:	07d6      	lsls	r6, r2, #31
 801a798:	d427      	bmi.n	801a7ea <__sflush_r+0xb2>
 801a79a:	2200      	movs	r2, #0
 801a79c:	6062      	str	r2, [r4, #4]
 801a79e:	04d9      	lsls	r1, r3, #19
 801a7a0:	6922      	ldr	r2, [r4, #16]
 801a7a2:	6022      	str	r2, [r4, #0]
 801a7a4:	d504      	bpl.n	801a7b0 <__sflush_r+0x78>
 801a7a6:	1c42      	adds	r2, r0, #1
 801a7a8:	d101      	bne.n	801a7ae <__sflush_r+0x76>
 801a7aa:	682b      	ldr	r3, [r5, #0]
 801a7ac:	b903      	cbnz	r3, 801a7b0 <__sflush_r+0x78>
 801a7ae:	6560      	str	r0, [r4, #84]	@ 0x54
 801a7b0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801a7b2:	602f      	str	r7, [r5, #0]
 801a7b4:	b1b9      	cbz	r1, 801a7e6 <__sflush_r+0xae>
 801a7b6:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 801a7ba:	4299      	cmp	r1, r3
 801a7bc:	d002      	beq.n	801a7c4 <__sflush_r+0x8c>
 801a7be:	4628      	mov	r0, r5
 801a7c0:	f7ff fb40 	bl	8019e44 <_free_r>
 801a7c4:	2300      	movs	r3, #0
 801a7c6:	6363      	str	r3, [r4, #52]	@ 0x34
 801a7c8:	e00d      	b.n	801a7e6 <__sflush_r+0xae>
 801a7ca:	2301      	movs	r3, #1
 801a7cc:	4628      	mov	r0, r5
 801a7ce:	47b0      	blx	r6
 801a7d0:	4602      	mov	r2, r0
 801a7d2:	1c50      	adds	r0, r2, #1
 801a7d4:	d1c9      	bne.n	801a76a <__sflush_r+0x32>
 801a7d6:	682b      	ldr	r3, [r5, #0]
 801a7d8:	2b00      	cmp	r3, #0
 801a7da:	d0c6      	beq.n	801a76a <__sflush_r+0x32>
 801a7dc:	2b1d      	cmp	r3, #29
 801a7de:	d001      	beq.n	801a7e4 <__sflush_r+0xac>
 801a7e0:	2b16      	cmp	r3, #22
 801a7e2:	d11e      	bne.n	801a822 <__sflush_r+0xea>
 801a7e4:	602f      	str	r7, [r5, #0]
 801a7e6:	2000      	movs	r0, #0
 801a7e8:	e022      	b.n	801a830 <__sflush_r+0xf8>
 801a7ea:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801a7ee:	b21b      	sxth	r3, r3
 801a7f0:	e01b      	b.n	801a82a <__sflush_r+0xf2>
 801a7f2:	690f      	ldr	r7, [r1, #16]
 801a7f4:	2f00      	cmp	r7, #0
 801a7f6:	d0f6      	beq.n	801a7e6 <__sflush_r+0xae>
 801a7f8:	0793      	lsls	r3, r2, #30
 801a7fa:	680e      	ldr	r6, [r1, #0]
 801a7fc:	bf08      	it	eq
 801a7fe:	694b      	ldreq	r3, [r1, #20]
 801a800:	600f      	str	r7, [r1, #0]
 801a802:	bf18      	it	ne
 801a804:	2300      	movne	r3, #0
 801a806:	eba6 0807 	sub.w	r8, r6, r7
 801a80a:	608b      	str	r3, [r1, #8]
 801a80c:	f1b8 0f00 	cmp.w	r8, #0
 801a810:	dde9      	ble.n	801a7e6 <__sflush_r+0xae>
 801a812:	6a21      	ldr	r1, [r4, #32]
 801a814:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 801a816:	4643      	mov	r3, r8
 801a818:	463a      	mov	r2, r7
 801a81a:	4628      	mov	r0, r5
 801a81c:	47b0      	blx	r6
 801a81e:	2800      	cmp	r0, #0
 801a820:	dc08      	bgt.n	801a834 <__sflush_r+0xfc>
 801a822:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801a826:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801a82a:	81a3      	strh	r3, [r4, #12]
 801a82c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801a830:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801a834:	4407      	add	r7, r0
 801a836:	eba8 0800 	sub.w	r8, r8, r0
 801a83a:	e7e7      	b.n	801a80c <__sflush_r+0xd4>
 801a83c:	dfbffffe 	.word	0xdfbffffe

0801a840 <_fflush_r>:
 801a840:	b538      	push	{r3, r4, r5, lr}
 801a842:	690b      	ldr	r3, [r1, #16]
 801a844:	4605      	mov	r5, r0
 801a846:	460c      	mov	r4, r1
 801a848:	b913      	cbnz	r3, 801a850 <_fflush_r+0x10>
 801a84a:	2500      	movs	r5, #0
 801a84c:	4628      	mov	r0, r5
 801a84e:	bd38      	pop	{r3, r4, r5, pc}
 801a850:	b118      	cbz	r0, 801a85a <_fflush_r+0x1a>
 801a852:	6a03      	ldr	r3, [r0, #32]
 801a854:	b90b      	cbnz	r3, 801a85a <_fflush_r+0x1a>
 801a856:	f7ff f88b 	bl	8019970 <__sinit>
 801a85a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801a85e:	2b00      	cmp	r3, #0
 801a860:	d0f3      	beq.n	801a84a <_fflush_r+0xa>
 801a862:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 801a864:	07d0      	lsls	r0, r2, #31
 801a866:	d404      	bmi.n	801a872 <_fflush_r+0x32>
 801a868:	0599      	lsls	r1, r3, #22
 801a86a:	d402      	bmi.n	801a872 <_fflush_r+0x32>
 801a86c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801a86e:	f7ff faa6 	bl	8019dbe <__retarget_lock_acquire_recursive>
 801a872:	4628      	mov	r0, r5
 801a874:	4621      	mov	r1, r4
 801a876:	f7ff ff5f 	bl	801a738 <__sflush_r>
 801a87a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801a87c:	07da      	lsls	r2, r3, #31
 801a87e:	4605      	mov	r5, r0
 801a880:	d4e4      	bmi.n	801a84c <_fflush_r+0xc>
 801a882:	89a3      	ldrh	r3, [r4, #12]
 801a884:	059b      	lsls	r3, r3, #22
 801a886:	d4e1      	bmi.n	801a84c <_fflush_r+0xc>
 801a888:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801a88a:	f7ff fa99 	bl	8019dc0 <__retarget_lock_release_recursive>
 801a88e:	e7dd      	b.n	801a84c <_fflush_r+0xc>

0801a890 <fiprintf>:
 801a890:	b40e      	push	{r1, r2, r3}
 801a892:	b503      	push	{r0, r1, lr}
 801a894:	4601      	mov	r1, r0
 801a896:	ab03      	add	r3, sp, #12
 801a898:	4805      	ldr	r0, [pc, #20]	@ (801a8b0 <fiprintf+0x20>)
 801a89a:	f853 2b04 	ldr.w	r2, [r3], #4
 801a89e:	6800      	ldr	r0, [r0, #0]
 801a8a0:	9301      	str	r3, [sp, #4]
 801a8a2:	f7ff fca3 	bl	801a1ec <_vfiprintf_r>
 801a8a6:	b002      	add	sp, #8
 801a8a8:	f85d eb04 	ldr.w	lr, [sp], #4
 801a8ac:	b003      	add	sp, #12
 801a8ae:	4770      	bx	lr
 801a8b0:	20000104 	.word	0x20000104

0801a8b4 <__swbuf_r>:
 801a8b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a8b6:	460e      	mov	r6, r1
 801a8b8:	4614      	mov	r4, r2
 801a8ba:	4605      	mov	r5, r0
 801a8bc:	b118      	cbz	r0, 801a8c6 <__swbuf_r+0x12>
 801a8be:	6a03      	ldr	r3, [r0, #32]
 801a8c0:	b90b      	cbnz	r3, 801a8c6 <__swbuf_r+0x12>
 801a8c2:	f7ff f855 	bl	8019970 <__sinit>
 801a8c6:	69a3      	ldr	r3, [r4, #24]
 801a8c8:	60a3      	str	r3, [r4, #8]
 801a8ca:	89a3      	ldrh	r3, [r4, #12]
 801a8cc:	071a      	lsls	r2, r3, #28
 801a8ce:	d501      	bpl.n	801a8d4 <__swbuf_r+0x20>
 801a8d0:	6923      	ldr	r3, [r4, #16]
 801a8d2:	b943      	cbnz	r3, 801a8e6 <__swbuf_r+0x32>
 801a8d4:	4621      	mov	r1, r4
 801a8d6:	4628      	mov	r0, r5
 801a8d8:	f000 f82a 	bl	801a930 <__swsetup_r>
 801a8dc:	b118      	cbz	r0, 801a8e6 <__swbuf_r+0x32>
 801a8de:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 801a8e2:	4638      	mov	r0, r7
 801a8e4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801a8e6:	6823      	ldr	r3, [r4, #0]
 801a8e8:	6922      	ldr	r2, [r4, #16]
 801a8ea:	1a98      	subs	r0, r3, r2
 801a8ec:	6963      	ldr	r3, [r4, #20]
 801a8ee:	b2f6      	uxtb	r6, r6
 801a8f0:	4283      	cmp	r3, r0
 801a8f2:	4637      	mov	r7, r6
 801a8f4:	dc05      	bgt.n	801a902 <__swbuf_r+0x4e>
 801a8f6:	4621      	mov	r1, r4
 801a8f8:	4628      	mov	r0, r5
 801a8fa:	f7ff ffa1 	bl	801a840 <_fflush_r>
 801a8fe:	2800      	cmp	r0, #0
 801a900:	d1ed      	bne.n	801a8de <__swbuf_r+0x2a>
 801a902:	68a3      	ldr	r3, [r4, #8]
 801a904:	3b01      	subs	r3, #1
 801a906:	60a3      	str	r3, [r4, #8]
 801a908:	6823      	ldr	r3, [r4, #0]
 801a90a:	1c5a      	adds	r2, r3, #1
 801a90c:	6022      	str	r2, [r4, #0]
 801a90e:	701e      	strb	r6, [r3, #0]
 801a910:	6962      	ldr	r2, [r4, #20]
 801a912:	1c43      	adds	r3, r0, #1
 801a914:	429a      	cmp	r2, r3
 801a916:	d004      	beq.n	801a922 <__swbuf_r+0x6e>
 801a918:	89a3      	ldrh	r3, [r4, #12]
 801a91a:	07db      	lsls	r3, r3, #31
 801a91c:	d5e1      	bpl.n	801a8e2 <__swbuf_r+0x2e>
 801a91e:	2e0a      	cmp	r6, #10
 801a920:	d1df      	bne.n	801a8e2 <__swbuf_r+0x2e>
 801a922:	4621      	mov	r1, r4
 801a924:	4628      	mov	r0, r5
 801a926:	f7ff ff8b 	bl	801a840 <_fflush_r>
 801a92a:	2800      	cmp	r0, #0
 801a92c:	d0d9      	beq.n	801a8e2 <__swbuf_r+0x2e>
 801a92e:	e7d6      	b.n	801a8de <__swbuf_r+0x2a>

0801a930 <__swsetup_r>:
 801a930:	b538      	push	{r3, r4, r5, lr}
 801a932:	4b29      	ldr	r3, [pc, #164]	@ (801a9d8 <__swsetup_r+0xa8>)
 801a934:	4605      	mov	r5, r0
 801a936:	6818      	ldr	r0, [r3, #0]
 801a938:	460c      	mov	r4, r1
 801a93a:	b118      	cbz	r0, 801a944 <__swsetup_r+0x14>
 801a93c:	6a03      	ldr	r3, [r0, #32]
 801a93e:	b90b      	cbnz	r3, 801a944 <__swsetup_r+0x14>
 801a940:	f7ff f816 	bl	8019970 <__sinit>
 801a944:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801a948:	0719      	lsls	r1, r3, #28
 801a94a:	d422      	bmi.n	801a992 <__swsetup_r+0x62>
 801a94c:	06da      	lsls	r2, r3, #27
 801a94e:	d407      	bmi.n	801a960 <__swsetup_r+0x30>
 801a950:	2209      	movs	r2, #9
 801a952:	602a      	str	r2, [r5, #0]
 801a954:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801a958:	81a3      	strh	r3, [r4, #12]
 801a95a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801a95e:	e033      	b.n	801a9c8 <__swsetup_r+0x98>
 801a960:	0758      	lsls	r0, r3, #29
 801a962:	d512      	bpl.n	801a98a <__swsetup_r+0x5a>
 801a964:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801a966:	b141      	cbz	r1, 801a97a <__swsetup_r+0x4a>
 801a968:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 801a96c:	4299      	cmp	r1, r3
 801a96e:	d002      	beq.n	801a976 <__swsetup_r+0x46>
 801a970:	4628      	mov	r0, r5
 801a972:	f7ff fa67 	bl	8019e44 <_free_r>
 801a976:	2300      	movs	r3, #0
 801a978:	6363      	str	r3, [r4, #52]	@ 0x34
 801a97a:	89a3      	ldrh	r3, [r4, #12]
 801a97c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 801a980:	81a3      	strh	r3, [r4, #12]
 801a982:	2300      	movs	r3, #0
 801a984:	6063      	str	r3, [r4, #4]
 801a986:	6923      	ldr	r3, [r4, #16]
 801a988:	6023      	str	r3, [r4, #0]
 801a98a:	89a3      	ldrh	r3, [r4, #12]
 801a98c:	f043 0308 	orr.w	r3, r3, #8
 801a990:	81a3      	strh	r3, [r4, #12]
 801a992:	6923      	ldr	r3, [r4, #16]
 801a994:	b94b      	cbnz	r3, 801a9aa <__swsetup_r+0x7a>
 801a996:	89a3      	ldrh	r3, [r4, #12]
 801a998:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 801a99c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 801a9a0:	d003      	beq.n	801a9aa <__swsetup_r+0x7a>
 801a9a2:	4621      	mov	r1, r4
 801a9a4:	4628      	mov	r0, r5
 801a9a6:	f000 f846 	bl	801aa36 <__smakebuf_r>
 801a9aa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801a9ae:	f013 0201 	ands.w	r2, r3, #1
 801a9b2:	d00a      	beq.n	801a9ca <__swsetup_r+0x9a>
 801a9b4:	2200      	movs	r2, #0
 801a9b6:	60a2      	str	r2, [r4, #8]
 801a9b8:	6962      	ldr	r2, [r4, #20]
 801a9ba:	4252      	negs	r2, r2
 801a9bc:	61a2      	str	r2, [r4, #24]
 801a9be:	6922      	ldr	r2, [r4, #16]
 801a9c0:	b942      	cbnz	r2, 801a9d4 <__swsetup_r+0xa4>
 801a9c2:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 801a9c6:	d1c5      	bne.n	801a954 <__swsetup_r+0x24>
 801a9c8:	bd38      	pop	{r3, r4, r5, pc}
 801a9ca:	0799      	lsls	r1, r3, #30
 801a9cc:	bf58      	it	pl
 801a9ce:	6962      	ldrpl	r2, [r4, #20]
 801a9d0:	60a2      	str	r2, [r4, #8]
 801a9d2:	e7f4      	b.n	801a9be <__swsetup_r+0x8e>
 801a9d4:	2000      	movs	r0, #0
 801a9d6:	e7f7      	b.n	801a9c8 <__swsetup_r+0x98>
 801a9d8:	20000104 	.word	0x20000104

0801a9dc <abort>:
 801a9dc:	b508      	push	{r3, lr}
 801a9de:	2006      	movs	r0, #6
 801a9e0:	f000 f88e 	bl	801ab00 <raise>
 801a9e4:	2001      	movs	r0, #1
 801a9e6:	f7e7 ff27 	bl	8002838 <_exit>

0801a9ea <__swhatbuf_r>:
 801a9ea:	b570      	push	{r4, r5, r6, lr}
 801a9ec:	460c      	mov	r4, r1
 801a9ee:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801a9f2:	2900      	cmp	r1, #0
 801a9f4:	b096      	sub	sp, #88	@ 0x58
 801a9f6:	4615      	mov	r5, r2
 801a9f8:	461e      	mov	r6, r3
 801a9fa:	da0d      	bge.n	801aa18 <__swhatbuf_r+0x2e>
 801a9fc:	89a3      	ldrh	r3, [r4, #12]
 801a9fe:	f013 0f80 	tst.w	r3, #128	@ 0x80
 801aa02:	f04f 0100 	mov.w	r1, #0
 801aa06:	bf14      	ite	ne
 801aa08:	2340      	movne	r3, #64	@ 0x40
 801aa0a:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 801aa0e:	2000      	movs	r0, #0
 801aa10:	6031      	str	r1, [r6, #0]
 801aa12:	602b      	str	r3, [r5, #0]
 801aa14:	b016      	add	sp, #88	@ 0x58
 801aa16:	bd70      	pop	{r4, r5, r6, pc}
 801aa18:	466a      	mov	r2, sp
 801aa1a:	f000 f879 	bl	801ab10 <_fstat_r>
 801aa1e:	2800      	cmp	r0, #0
 801aa20:	dbec      	blt.n	801a9fc <__swhatbuf_r+0x12>
 801aa22:	9901      	ldr	r1, [sp, #4]
 801aa24:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 801aa28:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 801aa2c:	4259      	negs	r1, r3
 801aa2e:	4159      	adcs	r1, r3
 801aa30:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 801aa34:	e7eb      	b.n	801aa0e <__swhatbuf_r+0x24>

0801aa36 <__smakebuf_r>:
 801aa36:	898b      	ldrh	r3, [r1, #12]
 801aa38:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801aa3a:	079d      	lsls	r5, r3, #30
 801aa3c:	4606      	mov	r6, r0
 801aa3e:	460c      	mov	r4, r1
 801aa40:	d507      	bpl.n	801aa52 <__smakebuf_r+0x1c>
 801aa42:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 801aa46:	6023      	str	r3, [r4, #0]
 801aa48:	6123      	str	r3, [r4, #16]
 801aa4a:	2301      	movs	r3, #1
 801aa4c:	6163      	str	r3, [r4, #20]
 801aa4e:	b003      	add	sp, #12
 801aa50:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801aa52:	ab01      	add	r3, sp, #4
 801aa54:	466a      	mov	r2, sp
 801aa56:	f7ff ffc8 	bl	801a9ea <__swhatbuf_r>
 801aa5a:	9f00      	ldr	r7, [sp, #0]
 801aa5c:	4605      	mov	r5, r0
 801aa5e:	4639      	mov	r1, r7
 801aa60:	4630      	mov	r0, r6
 801aa62:	f7fe fd53 	bl	801950c <_malloc_r>
 801aa66:	b948      	cbnz	r0, 801aa7c <__smakebuf_r+0x46>
 801aa68:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801aa6c:	059a      	lsls	r2, r3, #22
 801aa6e:	d4ee      	bmi.n	801aa4e <__smakebuf_r+0x18>
 801aa70:	f023 0303 	bic.w	r3, r3, #3
 801aa74:	f043 0302 	orr.w	r3, r3, #2
 801aa78:	81a3      	strh	r3, [r4, #12]
 801aa7a:	e7e2      	b.n	801aa42 <__smakebuf_r+0xc>
 801aa7c:	89a3      	ldrh	r3, [r4, #12]
 801aa7e:	6020      	str	r0, [r4, #0]
 801aa80:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801aa84:	81a3      	strh	r3, [r4, #12]
 801aa86:	9b01      	ldr	r3, [sp, #4]
 801aa88:	e9c4 0704 	strd	r0, r7, [r4, #16]
 801aa8c:	b15b      	cbz	r3, 801aaa6 <__smakebuf_r+0x70>
 801aa8e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801aa92:	4630      	mov	r0, r6
 801aa94:	f000 f84e 	bl	801ab34 <_isatty_r>
 801aa98:	b128      	cbz	r0, 801aaa6 <__smakebuf_r+0x70>
 801aa9a:	89a3      	ldrh	r3, [r4, #12]
 801aa9c:	f023 0303 	bic.w	r3, r3, #3
 801aaa0:	f043 0301 	orr.w	r3, r3, #1
 801aaa4:	81a3      	strh	r3, [r4, #12]
 801aaa6:	89a3      	ldrh	r3, [r4, #12]
 801aaa8:	431d      	orrs	r5, r3
 801aaaa:	81a5      	strh	r5, [r4, #12]
 801aaac:	e7cf      	b.n	801aa4e <__smakebuf_r+0x18>

0801aaae <_raise_r>:
 801aaae:	291f      	cmp	r1, #31
 801aab0:	b538      	push	{r3, r4, r5, lr}
 801aab2:	4605      	mov	r5, r0
 801aab4:	460c      	mov	r4, r1
 801aab6:	d904      	bls.n	801aac2 <_raise_r+0x14>
 801aab8:	2316      	movs	r3, #22
 801aaba:	6003      	str	r3, [r0, #0]
 801aabc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801aac0:	bd38      	pop	{r3, r4, r5, pc}
 801aac2:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 801aac4:	b112      	cbz	r2, 801aacc <_raise_r+0x1e>
 801aac6:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801aaca:	b94b      	cbnz	r3, 801aae0 <_raise_r+0x32>
 801aacc:	4628      	mov	r0, r5
 801aace:	f000 f853 	bl	801ab78 <_getpid_r>
 801aad2:	4622      	mov	r2, r4
 801aad4:	4601      	mov	r1, r0
 801aad6:	4628      	mov	r0, r5
 801aad8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801aadc:	f000 b83a 	b.w	801ab54 <_kill_r>
 801aae0:	2b01      	cmp	r3, #1
 801aae2:	d00a      	beq.n	801aafa <_raise_r+0x4c>
 801aae4:	1c59      	adds	r1, r3, #1
 801aae6:	d103      	bne.n	801aaf0 <_raise_r+0x42>
 801aae8:	2316      	movs	r3, #22
 801aaea:	6003      	str	r3, [r0, #0]
 801aaec:	2001      	movs	r0, #1
 801aaee:	e7e7      	b.n	801aac0 <_raise_r+0x12>
 801aaf0:	2100      	movs	r1, #0
 801aaf2:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 801aaf6:	4620      	mov	r0, r4
 801aaf8:	4798      	blx	r3
 801aafa:	2000      	movs	r0, #0
 801aafc:	e7e0      	b.n	801aac0 <_raise_r+0x12>
	...

0801ab00 <raise>:
 801ab00:	4b02      	ldr	r3, [pc, #8]	@ (801ab0c <raise+0xc>)
 801ab02:	4601      	mov	r1, r0
 801ab04:	6818      	ldr	r0, [r3, #0]
 801ab06:	f7ff bfd2 	b.w	801aaae <_raise_r>
 801ab0a:	bf00      	nop
 801ab0c:	20000104 	.word	0x20000104

0801ab10 <_fstat_r>:
 801ab10:	b538      	push	{r3, r4, r5, lr}
 801ab12:	4d07      	ldr	r5, [pc, #28]	@ (801ab30 <_fstat_r+0x20>)
 801ab14:	2300      	movs	r3, #0
 801ab16:	4604      	mov	r4, r0
 801ab18:	4608      	mov	r0, r1
 801ab1a:	4611      	mov	r1, r2
 801ab1c:	602b      	str	r3, [r5, #0]
 801ab1e:	f7e7 fedb 	bl	80028d8 <_fstat>
 801ab22:	1c43      	adds	r3, r0, #1
 801ab24:	d102      	bne.n	801ab2c <_fstat_r+0x1c>
 801ab26:	682b      	ldr	r3, [r5, #0]
 801ab28:	b103      	cbz	r3, 801ab2c <_fstat_r+0x1c>
 801ab2a:	6023      	str	r3, [r4, #0]
 801ab2c:	bd38      	pop	{r3, r4, r5, pc}
 801ab2e:	bf00      	nop
 801ab30:	20007878 	.word	0x20007878

0801ab34 <_isatty_r>:
 801ab34:	b538      	push	{r3, r4, r5, lr}
 801ab36:	4d06      	ldr	r5, [pc, #24]	@ (801ab50 <_isatty_r+0x1c>)
 801ab38:	2300      	movs	r3, #0
 801ab3a:	4604      	mov	r4, r0
 801ab3c:	4608      	mov	r0, r1
 801ab3e:	602b      	str	r3, [r5, #0]
 801ab40:	f7e7 feda 	bl	80028f8 <_isatty>
 801ab44:	1c43      	adds	r3, r0, #1
 801ab46:	d102      	bne.n	801ab4e <_isatty_r+0x1a>
 801ab48:	682b      	ldr	r3, [r5, #0]
 801ab4a:	b103      	cbz	r3, 801ab4e <_isatty_r+0x1a>
 801ab4c:	6023      	str	r3, [r4, #0]
 801ab4e:	bd38      	pop	{r3, r4, r5, pc}
 801ab50:	20007878 	.word	0x20007878

0801ab54 <_kill_r>:
 801ab54:	b538      	push	{r3, r4, r5, lr}
 801ab56:	4d07      	ldr	r5, [pc, #28]	@ (801ab74 <_kill_r+0x20>)
 801ab58:	2300      	movs	r3, #0
 801ab5a:	4604      	mov	r4, r0
 801ab5c:	4608      	mov	r0, r1
 801ab5e:	4611      	mov	r1, r2
 801ab60:	602b      	str	r3, [r5, #0]
 801ab62:	f7e7 fe59 	bl	8002818 <_kill>
 801ab66:	1c43      	adds	r3, r0, #1
 801ab68:	d102      	bne.n	801ab70 <_kill_r+0x1c>
 801ab6a:	682b      	ldr	r3, [r5, #0]
 801ab6c:	b103      	cbz	r3, 801ab70 <_kill_r+0x1c>
 801ab6e:	6023      	str	r3, [r4, #0]
 801ab70:	bd38      	pop	{r3, r4, r5, pc}
 801ab72:	bf00      	nop
 801ab74:	20007878 	.word	0x20007878

0801ab78 <_getpid_r>:
 801ab78:	f7e7 be46 	b.w	8002808 <_getpid>

0801ab7c <pow>:
 801ab7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801ab7e:	ed2d 8b02 	vpush	{d8}
 801ab82:	eeb0 8a40 	vmov.f32	s16, s0
 801ab86:	eef0 8a60 	vmov.f32	s17, s1
 801ab8a:	ec55 4b11 	vmov	r4, r5, d1
 801ab8e:	f000 f8c7 	bl	801ad20 <__ieee754_pow>
 801ab92:	4622      	mov	r2, r4
 801ab94:	462b      	mov	r3, r5
 801ab96:	4620      	mov	r0, r4
 801ab98:	4629      	mov	r1, r5
 801ab9a:	ec57 6b10 	vmov	r6, r7, d0
 801ab9e:	f7e5 ffd5 	bl	8000b4c <__aeabi_dcmpun>
 801aba2:	2800      	cmp	r0, #0
 801aba4:	d13b      	bne.n	801ac1e <pow+0xa2>
 801aba6:	ec51 0b18 	vmov	r0, r1, d8
 801abaa:	2200      	movs	r2, #0
 801abac:	2300      	movs	r3, #0
 801abae:	f7e5 ff9b 	bl	8000ae8 <__aeabi_dcmpeq>
 801abb2:	b1b8      	cbz	r0, 801abe4 <pow+0x68>
 801abb4:	2200      	movs	r2, #0
 801abb6:	2300      	movs	r3, #0
 801abb8:	4620      	mov	r0, r4
 801abba:	4629      	mov	r1, r5
 801abbc:	f7e5 ff94 	bl	8000ae8 <__aeabi_dcmpeq>
 801abc0:	2800      	cmp	r0, #0
 801abc2:	d146      	bne.n	801ac52 <pow+0xd6>
 801abc4:	ec45 4b10 	vmov	d0, r4, r5
 801abc8:	f000 f848 	bl	801ac5c <finite>
 801abcc:	b338      	cbz	r0, 801ac1e <pow+0xa2>
 801abce:	2200      	movs	r2, #0
 801abd0:	2300      	movs	r3, #0
 801abd2:	4620      	mov	r0, r4
 801abd4:	4629      	mov	r1, r5
 801abd6:	f7e5 ff91 	bl	8000afc <__aeabi_dcmplt>
 801abda:	b300      	cbz	r0, 801ac1e <pow+0xa2>
 801abdc:	f7ff f8c4 	bl	8019d68 <__errno>
 801abe0:	2322      	movs	r3, #34	@ 0x22
 801abe2:	e01b      	b.n	801ac1c <pow+0xa0>
 801abe4:	ec47 6b10 	vmov	d0, r6, r7
 801abe8:	f000 f838 	bl	801ac5c <finite>
 801abec:	b9e0      	cbnz	r0, 801ac28 <pow+0xac>
 801abee:	eeb0 0a48 	vmov.f32	s0, s16
 801abf2:	eef0 0a68 	vmov.f32	s1, s17
 801abf6:	f000 f831 	bl	801ac5c <finite>
 801abfa:	b1a8      	cbz	r0, 801ac28 <pow+0xac>
 801abfc:	ec45 4b10 	vmov	d0, r4, r5
 801ac00:	f000 f82c 	bl	801ac5c <finite>
 801ac04:	b180      	cbz	r0, 801ac28 <pow+0xac>
 801ac06:	4632      	mov	r2, r6
 801ac08:	463b      	mov	r3, r7
 801ac0a:	4630      	mov	r0, r6
 801ac0c:	4639      	mov	r1, r7
 801ac0e:	f7e5 ff9d 	bl	8000b4c <__aeabi_dcmpun>
 801ac12:	2800      	cmp	r0, #0
 801ac14:	d0e2      	beq.n	801abdc <pow+0x60>
 801ac16:	f7ff f8a7 	bl	8019d68 <__errno>
 801ac1a:	2321      	movs	r3, #33	@ 0x21
 801ac1c:	6003      	str	r3, [r0, #0]
 801ac1e:	ecbd 8b02 	vpop	{d8}
 801ac22:	ec47 6b10 	vmov	d0, r6, r7
 801ac26:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801ac28:	2200      	movs	r2, #0
 801ac2a:	2300      	movs	r3, #0
 801ac2c:	4630      	mov	r0, r6
 801ac2e:	4639      	mov	r1, r7
 801ac30:	f7e5 ff5a 	bl	8000ae8 <__aeabi_dcmpeq>
 801ac34:	2800      	cmp	r0, #0
 801ac36:	d0f2      	beq.n	801ac1e <pow+0xa2>
 801ac38:	eeb0 0a48 	vmov.f32	s0, s16
 801ac3c:	eef0 0a68 	vmov.f32	s1, s17
 801ac40:	f000 f80c 	bl	801ac5c <finite>
 801ac44:	2800      	cmp	r0, #0
 801ac46:	d0ea      	beq.n	801ac1e <pow+0xa2>
 801ac48:	ec45 4b10 	vmov	d0, r4, r5
 801ac4c:	f000 f806 	bl	801ac5c <finite>
 801ac50:	e7c3      	b.n	801abda <pow+0x5e>
 801ac52:	4f01      	ldr	r7, [pc, #4]	@ (801ac58 <pow+0xdc>)
 801ac54:	2600      	movs	r6, #0
 801ac56:	e7e2      	b.n	801ac1e <pow+0xa2>
 801ac58:	3ff00000 	.word	0x3ff00000

0801ac5c <finite>:
 801ac5c:	b082      	sub	sp, #8
 801ac5e:	ed8d 0b00 	vstr	d0, [sp]
 801ac62:	9801      	ldr	r0, [sp, #4]
 801ac64:	f040 4000 	orr.w	r0, r0, #2147483648	@ 0x80000000
 801ac68:	f500 1080 	add.w	r0, r0, #1048576	@ 0x100000
 801ac6c:	0fc0      	lsrs	r0, r0, #31
 801ac6e:	b002      	add	sp, #8
 801ac70:	4770      	bx	lr

0801ac72 <fmaxf>:
 801ac72:	b508      	push	{r3, lr}
 801ac74:	ed2d 8b02 	vpush	{d8}
 801ac78:	eeb0 8a40 	vmov.f32	s16, s0
 801ac7c:	eef0 8a60 	vmov.f32	s17, s1
 801ac80:	f000 f832 	bl	801ace8 <__fpclassifyf>
 801ac84:	b930      	cbnz	r0, 801ac94 <fmaxf+0x22>
 801ac86:	eeb0 8a68 	vmov.f32	s16, s17
 801ac8a:	eeb0 0a48 	vmov.f32	s0, s16
 801ac8e:	ecbd 8b02 	vpop	{d8}
 801ac92:	bd08      	pop	{r3, pc}
 801ac94:	eeb0 0a68 	vmov.f32	s0, s17
 801ac98:	f000 f826 	bl	801ace8 <__fpclassifyf>
 801ac9c:	2800      	cmp	r0, #0
 801ac9e:	d0f4      	beq.n	801ac8a <fmaxf+0x18>
 801aca0:	eeb4 8ae8 	vcmpe.f32	s16, s17
 801aca4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801aca8:	dded      	ble.n	801ac86 <fmaxf+0x14>
 801acaa:	e7ee      	b.n	801ac8a <fmaxf+0x18>

0801acac <fminf>:
 801acac:	b508      	push	{r3, lr}
 801acae:	ed2d 8b02 	vpush	{d8}
 801acb2:	eeb0 8a40 	vmov.f32	s16, s0
 801acb6:	eef0 8a60 	vmov.f32	s17, s1
 801acba:	f000 f815 	bl	801ace8 <__fpclassifyf>
 801acbe:	b930      	cbnz	r0, 801acce <fminf+0x22>
 801acc0:	eeb0 8a68 	vmov.f32	s16, s17
 801acc4:	eeb0 0a48 	vmov.f32	s0, s16
 801acc8:	ecbd 8b02 	vpop	{d8}
 801accc:	bd08      	pop	{r3, pc}
 801acce:	eeb0 0a68 	vmov.f32	s0, s17
 801acd2:	f000 f809 	bl	801ace8 <__fpclassifyf>
 801acd6:	2800      	cmp	r0, #0
 801acd8:	d0f4      	beq.n	801acc4 <fminf+0x18>
 801acda:	eeb4 8ae8 	vcmpe.f32	s16, s17
 801acde:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801ace2:	d5ed      	bpl.n	801acc0 <fminf+0x14>
 801ace4:	e7ee      	b.n	801acc4 <fminf+0x18>
	...

0801ace8 <__fpclassifyf>:
 801ace8:	ee10 3a10 	vmov	r3, s0
 801acec:	f033 4000 	bics.w	r0, r3, #2147483648	@ 0x80000000
 801acf0:	d00d      	beq.n	801ad0e <__fpclassifyf+0x26>
 801acf2:	f5a0 0300 	sub.w	r3, r0, #8388608	@ 0x800000
 801acf6:	f1b3 4ffe 	cmp.w	r3, #2130706432	@ 0x7f000000
 801acfa:	d30a      	bcc.n	801ad12 <__fpclassifyf+0x2a>
 801acfc:	4b07      	ldr	r3, [pc, #28]	@ (801ad1c <__fpclassifyf+0x34>)
 801acfe:	1e42      	subs	r2, r0, #1
 801ad00:	429a      	cmp	r2, r3
 801ad02:	d908      	bls.n	801ad16 <__fpclassifyf+0x2e>
 801ad04:	f1a0 43ff 	sub.w	r3, r0, #2139095040	@ 0x7f800000
 801ad08:	4258      	negs	r0, r3
 801ad0a:	4158      	adcs	r0, r3
 801ad0c:	4770      	bx	lr
 801ad0e:	2002      	movs	r0, #2
 801ad10:	4770      	bx	lr
 801ad12:	2004      	movs	r0, #4
 801ad14:	4770      	bx	lr
 801ad16:	2003      	movs	r0, #3
 801ad18:	4770      	bx	lr
 801ad1a:	bf00      	nop
 801ad1c:	007ffffe 	.word	0x007ffffe

0801ad20 <__ieee754_pow>:
 801ad20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ad24:	b091      	sub	sp, #68	@ 0x44
 801ad26:	ed8d 1b00 	vstr	d1, [sp]
 801ad2a:	e9dd 1900 	ldrd	r1, r9, [sp]
 801ad2e:	f029 4a00 	bic.w	sl, r9, #2147483648	@ 0x80000000
 801ad32:	ea5a 0001 	orrs.w	r0, sl, r1
 801ad36:	ec57 6b10 	vmov	r6, r7, d0
 801ad3a:	d113      	bne.n	801ad64 <__ieee754_pow+0x44>
 801ad3c:	19b3      	adds	r3, r6, r6
 801ad3e:	f487 2200 	eor.w	r2, r7, #524288	@ 0x80000
 801ad42:	4152      	adcs	r2, r2
 801ad44:	4298      	cmp	r0, r3
 801ad46:	4b98      	ldr	r3, [pc, #608]	@ (801afa8 <__ieee754_pow+0x288>)
 801ad48:	4193      	sbcs	r3, r2
 801ad4a:	f080 84ea 	bcs.w	801b722 <__ieee754_pow+0xa02>
 801ad4e:	e9dd 2300 	ldrd	r2, r3, [sp]
 801ad52:	4630      	mov	r0, r6
 801ad54:	4639      	mov	r1, r7
 801ad56:	f7e5 faa9 	bl	80002ac <__adddf3>
 801ad5a:	ec41 0b10 	vmov	d0, r0, r1
 801ad5e:	b011      	add	sp, #68	@ 0x44
 801ad60:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ad64:	4a91      	ldr	r2, [pc, #580]	@ (801afac <__ieee754_pow+0x28c>)
 801ad66:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 801ad6a:	4590      	cmp	r8, r2
 801ad6c:	463d      	mov	r5, r7
 801ad6e:	4633      	mov	r3, r6
 801ad70:	d806      	bhi.n	801ad80 <__ieee754_pow+0x60>
 801ad72:	d101      	bne.n	801ad78 <__ieee754_pow+0x58>
 801ad74:	2e00      	cmp	r6, #0
 801ad76:	d1ea      	bne.n	801ad4e <__ieee754_pow+0x2e>
 801ad78:	4592      	cmp	sl, r2
 801ad7a:	d801      	bhi.n	801ad80 <__ieee754_pow+0x60>
 801ad7c:	d10e      	bne.n	801ad9c <__ieee754_pow+0x7c>
 801ad7e:	b169      	cbz	r1, 801ad9c <__ieee754_pow+0x7c>
 801ad80:	f105 4540 	add.w	r5, r5, #3221225472	@ 0xc0000000
 801ad84:	f505 1580 	add.w	r5, r5, #1048576	@ 0x100000
 801ad88:	431d      	orrs	r5, r3
 801ad8a:	d1e0      	bne.n	801ad4e <__ieee754_pow+0x2e>
 801ad8c:	e9dd 3200 	ldrd	r3, r2, [sp]
 801ad90:	18db      	adds	r3, r3, r3
 801ad92:	f482 2200 	eor.w	r2, r2, #524288	@ 0x80000
 801ad96:	4152      	adcs	r2, r2
 801ad98:	429d      	cmp	r5, r3
 801ad9a:	e7d4      	b.n	801ad46 <__ieee754_pow+0x26>
 801ad9c:	2d00      	cmp	r5, #0
 801ad9e:	46c3      	mov	fp, r8
 801ada0:	da3a      	bge.n	801ae18 <__ieee754_pow+0xf8>
 801ada2:	4a83      	ldr	r2, [pc, #524]	@ (801afb0 <__ieee754_pow+0x290>)
 801ada4:	4592      	cmp	sl, r2
 801ada6:	d84d      	bhi.n	801ae44 <__ieee754_pow+0x124>
 801ada8:	f1a2 7254 	sub.w	r2, r2, #55574528	@ 0x3500000
 801adac:	4592      	cmp	sl, r2
 801adae:	f240 84c7 	bls.w	801b740 <__ieee754_pow+0xa20>
 801adb2:	ea4f 522a 	mov.w	r2, sl, asr #20
 801adb6:	f2a2 32ff 	subw	r2, r2, #1023	@ 0x3ff
 801adba:	2a14      	cmp	r2, #20
 801adbc:	dd0f      	ble.n	801adde <__ieee754_pow+0xbe>
 801adbe:	f1c2 0234 	rsb	r2, r2, #52	@ 0x34
 801adc2:	fa21 f402 	lsr.w	r4, r1, r2
 801adc6:	fa04 f202 	lsl.w	r2, r4, r2
 801adca:	428a      	cmp	r2, r1
 801adcc:	f040 84b8 	bne.w	801b740 <__ieee754_pow+0xa20>
 801add0:	f004 0401 	and.w	r4, r4, #1
 801add4:	f1c4 0402 	rsb	r4, r4, #2
 801add8:	2900      	cmp	r1, #0
 801adda:	d158      	bne.n	801ae8e <__ieee754_pow+0x16e>
 801addc:	e00e      	b.n	801adfc <__ieee754_pow+0xdc>
 801adde:	2900      	cmp	r1, #0
 801ade0:	d154      	bne.n	801ae8c <__ieee754_pow+0x16c>
 801ade2:	f1c2 0214 	rsb	r2, r2, #20
 801ade6:	fa4a f402 	asr.w	r4, sl, r2
 801adea:	fa04 f202 	lsl.w	r2, r4, r2
 801adee:	4552      	cmp	r2, sl
 801adf0:	f040 84a3 	bne.w	801b73a <__ieee754_pow+0xa1a>
 801adf4:	f004 0401 	and.w	r4, r4, #1
 801adf8:	f1c4 0402 	rsb	r4, r4, #2
 801adfc:	4a6d      	ldr	r2, [pc, #436]	@ (801afb4 <__ieee754_pow+0x294>)
 801adfe:	4592      	cmp	sl, r2
 801ae00:	d12e      	bne.n	801ae60 <__ieee754_pow+0x140>
 801ae02:	f1b9 0f00 	cmp.w	r9, #0
 801ae06:	f280 8494 	bge.w	801b732 <__ieee754_pow+0xa12>
 801ae0a:	496a      	ldr	r1, [pc, #424]	@ (801afb4 <__ieee754_pow+0x294>)
 801ae0c:	4632      	mov	r2, r6
 801ae0e:	463b      	mov	r3, r7
 801ae10:	2000      	movs	r0, #0
 801ae12:	f7e5 fd2b 	bl	800086c <__aeabi_ddiv>
 801ae16:	e7a0      	b.n	801ad5a <__ieee754_pow+0x3a>
 801ae18:	2400      	movs	r4, #0
 801ae1a:	bbc1      	cbnz	r1, 801ae8e <__ieee754_pow+0x16e>
 801ae1c:	4a63      	ldr	r2, [pc, #396]	@ (801afac <__ieee754_pow+0x28c>)
 801ae1e:	4592      	cmp	sl, r2
 801ae20:	d1ec      	bne.n	801adfc <__ieee754_pow+0xdc>
 801ae22:	f108 4240 	add.w	r2, r8, #3221225472	@ 0xc0000000
 801ae26:	f502 1280 	add.w	r2, r2, #1048576	@ 0x100000
 801ae2a:	431a      	orrs	r2, r3
 801ae2c:	f000 8479 	beq.w	801b722 <__ieee754_pow+0xa02>
 801ae30:	4b61      	ldr	r3, [pc, #388]	@ (801afb8 <__ieee754_pow+0x298>)
 801ae32:	4598      	cmp	r8, r3
 801ae34:	d908      	bls.n	801ae48 <__ieee754_pow+0x128>
 801ae36:	f1b9 0f00 	cmp.w	r9, #0
 801ae3a:	f2c0 8476 	blt.w	801b72a <__ieee754_pow+0xa0a>
 801ae3e:	e9dd 0100 	ldrd	r0, r1, [sp]
 801ae42:	e78a      	b.n	801ad5a <__ieee754_pow+0x3a>
 801ae44:	2402      	movs	r4, #2
 801ae46:	e7e8      	b.n	801ae1a <__ieee754_pow+0xfa>
 801ae48:	f1b9 0f00 	cmp.w	r9, #0
 801ae4c:	f04f 0000 	mov.w	r0, #0
 801ae50:	f04f 0100 	mov.w	r1, #0
 801ae54:	da81      	bge.n	801ad5a <__ieee754_pow+0x3a>
 801ae56:	e9dd 0300 	ldrd	r0, r3, [sp]
 801ae5a:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 801ae5e:	e77c      	b.n	801ad5a <__ieee754_pow+0x3a>
 801ae60:	f1b9 4f80 	cmp.w	r9, #1073741824	@ 0x40000000
 801ae64:	d106      	bne.n	801ae74 <__ieee754_pow+0x154>
 801ae66:	4632      	mov	r2, r6
 801ae68:	463b      	mov	r3, r7
 801ae6a:	4630      	mov	r0, r6
 801ae6c:	4639      	mov	r1, r7
 801ae6e:	f7e5 fbd3 	bl	8000618 <__aeabi_dmul>
 801ae72:	e772      	b.n	801ad5a <__ieee754_pow+0x3a>
 801ae74:	4a51      	ldr	r2, [pc, #324]	@ (801afbc <__ieee754_pow+0x29c>)
 801ae76:	4591      	cmp	r9, r2
 801ae78:	d109      	bne.n	801ae8e <__ieee754_pow+0x16e>
 801ae7a:	2d00      	cmp	r5, #0
 801ae7c:	db07      	blt.n	801ae8e <__ieee754_pow+0x16e>
 801ae7e:	ec47 6b10 	vmov	d0, r6, r7
 801ae82:	b011      	add	sp, #68	@ 0x44
 801ae84:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ae88:	f000 bd52 	b.w	801b930 <__ieee754_sqrt>
 801ae8c:	2400      	movs	r4, #0
 801ae8e:	ec47 6b10 	vmov	d0, r6, r7
 801ae92:	9302      	str	r3, [sp, #8]
 801ae94:	f000 fc88 	bl	801b7a8 <fabs>
 801ae98:	9b02      	ldr	r3, [sp, #8]
 801ae9a:	ec51 0b10 	vmov	r0, r1, d0
 801ae9e:	bb53      	cbnz	r3, 801aef6 <__ieee754_pow+0x1d6>
 801aea0:	4b44      	ldr	r3, [pc, #272]	@ (801afb4 <__ieee754_pow+0x294>)
 801aea2:	f025 4240 	bic.w	r2, r5, #3221225472	@ 0xc0000000
 801aea6:	429a      	cmp	r2, r3
 801aea8:	d002      	beq.n	801aeb0 <__ieee754_pow+0x190>
 801aeaa:	f1b8 0f00 	cmp.w	r8, #0
 801aeae:	d122      	bne.n	801aef6 <__ieee754_pow+0x1d6>
 801aeb0:	f1b9 0f00 	cmp.w	r9, #0
 801aeb4:	da05      	bge.n	801aec2 <__ieee754_pow+0x1a2>
 801aeb6:	4602      	mov	r2, r0
 801aeb8:	460b      	mov	r3, r1
 801aeba:	2000      	movs	r0, #0
 801aebc:	493d      	ldr	r1, [pc, #244]	@ (801afb4 <__ieee754_pow+0x294>)
 801aebe:	f7e5 fcd5 	bl	800086c <__aeabi_ddiv>
 801aec2:	2d00      	cmp	r5, #0
 801aec4:	f6bf af49 	bge.w	801ad5a <__ieee754_pow+0x3a>
 801aec8:	f108 4840 	add.w	r8, r8, #3221225472	@ 0xc0000000
 801aecc:	f508 1880 	add.w	r8, r8, #1048576	@ 0x100000
 801aed0:	ea58 0804 	orrs.w	r8, r8, r4
 801aed4:	d108      	bne.n	801aee8 <__ieee754_pow+0x1c8>
 801aed6:	4602      	mov	r2, r0
 801aed8:	460b      	mov	r3, r1
 801aeda:	4610      	mov	r0, r2
 801aedc:	4619      	mov	r1, r3
 801aede:	f7e5 f9e3 	bl	80002a8 <__aeabi_dsub>
 801aee2:	4602      	mov	r2, r0
 801aee4:	460b      	mov	r3, r1
 801aee6:	e794      	b.n	801ae12 <__ieee754_pow+0xf2>
 801aee8:	2c01      	cmp	r4, #1
 801aeea:	f47f af36 	bne.w	801ad5a <__ieee754_pow+0x3a>
 801aeee:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 801aef2:	4619      	mov	r1, r3
 801aef4:	e731      	b.n	801ad5a <__ieee754_pow+0x3a>
 801aef6:	0feb      	lsrs	r3, r5, #31
 801aef8:	3b01      	subs	r3, #1
 801aefa:	ea53 0204 	orrs.w	r2, r3, r4
 801aefe:	d102      	bne.n	801af06 <__ieee754_pow+0x1e6>
 801af00:	4632      	mov	r2, r6
 801af02:	463b      	mov	r3, r7
 801af04:	e7e9      	b.n	801aeda <__ieee754_pow+0x1ba>
 801af06:	3c01      	subs	r4, #1
 801af08:	431c      	orrs	r4, r3
 801af0a:	d016      	beq.n	801af3a <__ieee754_pow+0x21a>
 801af0c:	ed9f 7b22 	vldr	d7, [pc, #136]	@ 801af98 <__ieee754_pow+0x278>
 801af10:	f1ba 4f84 	cmp.w	sl, #1107296256	@ 0x42000000
 801af14:	ed8d 7b02 	vstr	d7, [sp, #8]
 801af18:	f240 8112 	bls.w	801b140 <__ieee754_pow+0x420>
 801af1c:	4b28      	ldr	r3, [pc, #160]	@ (801afc0 <__ieee754_pow+0x2a0>)
 801af1e:	459a      	cmp	sl, r3
 801af20:	4b25      	ldr	r3, [pc, #148]	@ (801afb8 <__ieee754_pow+0x298>)
 801af22:	d916      	bls.n	801af52 <__ieee754_pow+0x232>
 801af24:	4598      	cmp	r8, r3
 801af26:	d80b      	bhi.n	801af40 <__ieee754_pow+0x220>
 801af28:	f1b9 0f00 	cmp.w	r9, #0
 801af2c:	da0b      	bge.n	801af46 <__ieee754_pow+0x226>
 801af2e:	2000      	movs	r0, #0
 801af30:	b011      	add	sp, #68	@ 0x44
 801af32:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801af36:	f000 bcf3 	b.w	801b920 <__math_oflow>
 801af3a:	ed9f 7b19 	vldr	d7, [pc, #100]	@ 801afa0 <__ieee754_pow+0x280>
 801af3e:	e7e7      	b.n	801af10 <__ieee754_pow+0x1f0>
 801af40:	f1b9 0f00 	cmp.w	r9, #0
 801af44:	dcf3      	bgt.n	801af2e <__ieee754_pow+0x20e>
 801af46:	2000      	movs	r0, #0
 801af48:	b011      	add	sp, #68	@ 0x44
 801af4a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801af4e:	f000 bcdf 	b.w	801b910 <__math_uflow>
 801af52:	4598      	cmp	r8, r3
 801af54:	d20c      	bcs.n	801af70 <__ieee754_pow+0x250>
 801af56:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801af5a:	2200      	movs	r2, #0
 801af5c:	2300      	movs	r3, #0
 801af5e:	f7e5 fdcd 	bl	8000afc <__aeabi_dcmplt>
 801af62:	3800      	subs	r0, #0
 801af64:	bf18      	it	ne
 801af66:	2001      	movne	r0, #1
 801af68:	f1b9 0f00 	cmp.w	r9, #0
 801af6c:	daec      	bge.n	801af48 <__ieee754_pow+0x228>
 801af6e:	e7df      	b.n	801af30 <__ieee754_pow+0x210>
 801af70:	4b10      	ldr	r3, [pc, #64]	@ (801afb4 <__ieee754_pow+0x294>)
 801af72:	4598      	cmp	r8, r3
 801af74:	f04f 0200 	mov.w	r2, #0
 801af78:	d924      	bls.n	801afc4 <__ieee754_pow+0x2a4>
 801af7a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801af7e:	2300      	movs	r3, #0
 801af80:	f7e5 fdbc 	bl	8000afc <__aeabi_dcmplt>
 801af84:	3800      	subs	r0, #0
 801af86:	bf18      	it	ne
 801af88:	2001      	movne	r0, #1
 801af8a:	f1b9 0f00 	cmp.w	r9, #0
 801af8e:	dccf      	bgt.n	801af30 <__ieee754_pow+0x210>
 801af90:	e7da      	b.n	801af48 <__ieee754_pow+0x228>
 801af92:	bf00      	nop
 801af94:	f3af 8000 	nop.w
 801af98:	00000000 	.word	0x00000000
 801af9c:	3ff00000 	.word	0x3ff00000
 801afa0:	00000000 	.word	0x00000000
 801afa4:	bff00000 	.word	0xbff00000
 801afa8:	fff00000 	.word	0xfff00000
 801afac:	7ff00000 	.word	0x7ff00000
 801afb0:	433fffff 	.word	0x433fffff
 801afb4:	3ff00000 	.word	0x3ff00000
 801afb8:	3fefffff 	.word	0x3fefffff
 801afbc:	3fe00000 	.word	0x3fe00000
 801afc0:	43f00000 	.word	0x43f00000
 801afc4:	4b5a      	ldr	r3, [pc, #360]	@ (801b130 <__ieee754_pow+0x410>)
 801afc6:	f7e5 f96f 	bl	80002a8 <__aeabi_dsub>
 801afca:	a351      	add	r3, pc, #324	@ (adr r3, 801b110 <__ieee754_pow+0x3f0>)
 801afcc:	e9d3 2300 	ldrd	r2, r3, [r3]
 801afd0:	4604      	mov	r4, r0
 801afd2:	460d      	mov	r5, r1
 801afd4:	f7e5 fb20 	bl	8000618 <__aeabi_dmul>
 801afd8:	a34f      	add	r3, pc, #316	@ (adr r3, 801b118 <__ieee754_pow+0x3f8>)
 801afda:	e9d3 2300 	ldrd	r2, r3, [r3]
 801afde:	4606      	mov	r6, r0
 801afe0:	460f      	mov	r7, r1
 801afe2:	4620      	mov	r0, r4
 801afe4:	4629      	mov	r1, r5
 801afe6:	f7e5 fb17 	bl	8000618 <__aeabi_dmul>
 801afea:	4b52      	ldr	r3, [pc, #328]	@ (801b134 <__ieee754_pow+0x414>)
 801afec:	4682      	mov	sl, r0
 801afee:	468b      	mov	fp, r1
 801aff0:	2200      	movs	r2, #0
 801aff2:	4620      	mov	r0, r4
 801aff4:	4629      	mov	r1, r5
 801aff6:	f7e5 fb0f 	bl	8000618 <__aeabi_dmul>
 801affa:	4602      	mov	r2, r0
 801affc:	460b      	mov	r3, r1
 801affe:	a148      	add	r1, pc, #288	@ (adr r1, 801b120 <__ieee754_pow+0x400>)
 801b000:	e9d1 0100 	ldrd	r0, r1, [r1]
 801b004:	f7e5 f950 	bl	80002a8 <__aeabi_dsub>
 801b008:	4622      	mov	r2, r4
 801b00a:	462b      	mov	r3, r5
 801b00c:	f7e5 fb04 	bl	8000618 <__aeabi_dmul>
 801b010:	4602      	mov	r2, r0
 801b012:	460b      	mov	r3, r1
 801b014:	2000      	movs	r0, #0
 801b016:	4948      	ldr	r1, [pc, #288]	@ (801b138 <__ieee754_pow+0x418>)
 801b018:	f7e5 f946 	bl	80002a8 <__aeabi_dsub>
 801b01c:	4622      	mov	r2, r4
 801b01e:	4680      	mov	r8, r0
 801b020:	4689      	mov	r9, r1
 801b022:	462b      	mov	r3, r5
 801b024:	4620      	mov	r0, r4
 801b026:	4629      	mov	r1, r5
 801b028:	f7e5 faf6 	bl	8000618 <__aeabi_dmul>
 801b02c:	4602      	mov	r2, r0
 801b02e:	460b      	mov	r3, r1
 801b030:	4640      	mov	r0, r8
 801b032:	4649      	mov	r1, r9
 801b034:	f7e5 faf0 	bl	8000618 <__aeabi_dmul>
 801b038:	a33b      	add	r3, pc, #236	@ (adr r3, 801b128 <__ieee754_pow+0x408>)
 801b03a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b03e:	f7e5 faeb 	bl	8000618 <__aeabi_dmul>
 801b042:	4602      	mov	r2, r0
 801b044:	460b      	mov	r3, r1
 801b046:	4650      	mov	r0, sl
 801b048:	4659      	mov	r1, fp
 801b04a:	f7e5 f92d 	bl	80002a8 <__aeabi_dsub>
 801b04e:	4602      	mov	r2, r0
 801b050:	460b      	mov	r3, r1
 801b052:	4680      	mov	r8, r0
 801b054:	4689      	mov	r9, r1
 801b056:	4630      	mov	r0, r6
 801b058:	4639      	mov	r1, r7
 801b05a:	f7e5 f927 	bl	80002ac <__adddf3>
 801b05e:	2400      	movs	r4, #0
 801b060:	4632      	mov	r2, r6
 801b062:	463b      	mov	r3, r7
 801b064:	4620      	mov	r0, r4
 801b066:	460d      	mov	r5, r1
 801b068:	f7e5 f91e 	bl	80002a8 <__aeabi_dsub>
 801b06c:	4602      	mov	r2, r0
 801b06e:	460b      	mov	r3, r1
 801b070:	4640      	mov	r0, r8
 801b072:	4649      	mov	r1, r9
 801b074:	f7e5 f918 	bl	80002a8 <__aeabi_dsub>
 801b078:	e9dd 2300 	ldrd	r2, r3, [sp]
 801b07c:	e9cd 2304 	strd	r2, r3, [sp, #16]
 801b080:	2300      	movs	r3, #0
 801b082:	9304      	str	r3, [sp, #16]
 801b084:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 801b088:	4606      	mov	r6, r0
 801b08a:	460f      	mov	r7, r1
 801b08c:	4652      	mov	r2, sl
 801b08e:	465b      	mov	r3, fp
 801b090:	e9dd 0100 	ldrd	r0, r1, [sp]
 801b094:	f7e5 f908 	bl	80002a8 <__aeabi_dsub>
 801b098:	4622      	mov	r2, r4
 801b09a:	462b      	mov	r3, r5
 801b09c:	f7e5 fabc 	bl	8000618 <__aeabi_dmul>
 801b0a0:	e9dd 2300 	ldrd	r2, r3, [sp]
 801b0a4:	4680      	mov	r8, r0
 801b0a6:	4689      	mov	r9, r1
 801b0a8:	4630      	mov	r0, r6
 801b0aa:	4639      	mov	r1, r7
 801b0ac:	f7e5 fab4 	bl	8000618 <__aeabi_dmul>
 801b0b0:	4602      	mov	r2, r0
 801b0b2:	460b      	mov	r3, r1
 801b0b4:	4640      	mov	r0, r8
 801b0b6:	4649      	mov	r1, r9
 801b0b8:	f7e5 f8f8 	bl	80002ac <__adddf3>
 801b0bc:	4652      	mov	r2, sl
 801b0be:	465b      	mov	r3, fp
 801b0c0:	4606      	mov	r6, r0
 801b0c2:	460f      	mov	r7, r1
 801b0c4:	4620      	mov	r0, r4
 801b0c6:	4629      	mov	r1, r5
 801b0c8:	f7e5 faa6 	bl	8000618 <__aeabi_dmul>
 801b0cc:	460b      	mov	r3, r1
 801b0ce:	4602      	mov	r2, r0
 801b0d0:	4680      	mov	r8, r0
 801b0d2:	4689      	mov	r9, r1
 801b0d4:	4630      	mov	r0, r6
 801b0d6:	4639      	mov	r1, r7
 801b0d8:	f7e5 f8e8 	bl	80002ac <__adddf3>
 801b0dc:	4b17      	ldr	r3, [pc, #92]	@ (801b13c <__ieee754_pow+0x41c>)
 801b0de:	4299      	cmp	r1, r3
 801b0e0:	4604      	mov	r4, r0
 801b0e2:	460d      	mov	r5, r1
 801b0e4:	468a      	mov	sl, r1
 801b0e6:	468b      	mov	fp, r1
 801b0e8:	f340 82ef 	ble.w	801b6ca <__ieee754_pow+0x9aa>
 801b0ec:	f101 433f 	add.w	r3, r1, #3204448256	@ 0xbf000000
 801b0f0:	f503 03e0 	add.w	r3, r3, #7340032	@ 0x700000
 801b0f4:	4303      	orrs	r3, r0
 801b0f6:	f000 81e8 	beq.w	801b4ca <__ieee754_pow+0x7aa>
 801b0fa:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801b0fe:	2200      	movs	r2, #0
 801b100:	2300      	movs	r3, #0
 801b102:	f7e5 fcfb 	bl	8000afc <__aeabi_dcmplt>
 801b106:	3800      	subs	r0, #0
 801b108:	bf18      	it	ne
 801b10a:	2001      	movne	r0, #1
 801b10c:	e710      	b.n	801af30 <__ieee754_pow+0x210>
 801b10e:	bf00      	nop
 801b110:	60000000 	.word	0x60000000
 801b114:	3ff71547 	.word	0x3ff71547
 801b118:	f85ddf44 	.word	0xf85ddf44
 801b11c:	3e54ae0b 	.word	0x3e54ae0b
 801b120:	55555555 	.word	0x55555555
 801b124:	3fd55555 	.word	0x3fd55555
 801b128:	652b82fe 	.word	0x652b82fe
 801b12c:	3ff71547 	.word	0x3ff71547
 801b130:	3ff00000 	.word	0x3ff00000
 801b134:	3fd00000 	.word	0x3fd00000
 801b138:	3fe00000 	.word	0x3fe00000
 801b13c:	408fffff 	.word	0x408fffff
 801b140:	4bd5      	ldr	r3, [pc, #852]	@ (801b498 <__ieee754_pow+0x778>)
 801b142:	402b      	ands	r3, r5
 801b144:	2200      	movs	r2, #0
 801b146:	b92b      	cbnz	r3, 801b154 <__ieee754_pow+0x434>
 801b148:	4bd4      	ldr	r3, [pc, #848]	@ (801b49c <__ieee754_pow+0x77c>)
 801b14a:	f7e5 fa65 	bl	8000618 <__aeabi_dmul>
 801b14e:	f06f 0234 	mvn.w	r2, #52	@ 0x34
 801b152:	468b      	mov	fp, r1
 801b154:	ea4f 532b 	mov.w	r3, fp, asr #20
 801b158:	f2a3 33ff 	subw	r3, r3, #1023	@ 0x3ff
 801b15c:	4413      	add	r3, r2
 801b15e:	930a      	str	r3, [sp, #40]	@ 0x28
 801b160:	4bcf      	ldr	r3, [pc, #828]	@ (801b4a0 <__ieee754_pow+0x780>)
 801b162:	f3cb 0b13 	ubfx	fp, fp, #0, #20
 801b166:	f04b 557f 	orr.w	r5, fp, #1069547520	@ 0x3fc00000
 801b16a:	459b      	cmp	fp, r3
 801b16c:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 801b170:	dd08      	ble.n	801b184 <__ieee754_pow+0x464>
 801b172:	4bcc      	ldr	r3, [pc, #816]	@ (801b4a4 <__ieee754_pow+0x784>)
 801b174:	459b      	cmp	fp, r3
 801b176:	f340 81a5 	ble.w	801b4c4 <__ieee754_pow+0x7a4>
 801b17a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801b17c:	3301      	adds	r3, #1
 801b17e:	930a      	str	r3, [sp, #40]	@ 0x28
 801b180:	f5a5 1580 	sub.w	r5, r5, #1048576	@ 0x100000
 801b184:	f04f 0a00 	mov.w	sl, #0
 801b188:	ea4f 03ca 	mov.w	r3, sl, lsl #3
 801b18c:	930b      	str	r3, [sp, #44]	@ 0x2c
 801b18e:	4bc6      	ldr	r3, [pc, #792]	@ (801b4a8 <__ieee754_pow+0x788>)
 801b190:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 801b194:	ed93 7b00 	vldr	d7, [r3]
 801b198:	4629      	mov	r1, r5
 801b19a:	ec53 2b17 	vmov	r2, r3, d7
 801b19e:	ed8d 7b06 	vstr	d7, [sp, #24]
 801b1a2:	e9cd 0108 	strd	r0, r1, [sp, #32]
 801b1a6:	f7e5 f87f 	bl	80002a8 <__aeabi_dsub>
 801b1aa:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 801b1ae:	4606      	mov	r6, r0
 801b1b0:	460f      	mov	r7, r1
 801b1b2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801b1b6:	f7e5 f879 	bl	80002ac <__adddf3>
 801b1ba:	4602      	mov	r2, r0
 801b1bc:	460b      	mov	r3, r1
 801b1be:	2000      	movs	r0, #0
 801b1c0:	49ba      	ldr	r1, [pc, #744]	@ (801b4ac <__ieee754_pow+0x78c>)
 801b1c2:	f7e5 fb53 	bl	800086c <__aeabi_ddiv>
 801b1c6:	e9cd 010c 	strd	r0, r1, [sp, #48]	@ 0x30
 801b1ca:	4602      	mov	r2, r0
 801b1cc:	460b      	mov	r3, r1
 801b1ce:	4630      	mov	r0, r6
 801b1d0:	4639      	mov	r1, r7
 801b1d2:	f7e5 fa21 	bl	8000618 <__aeabi_dmul>
 801b1d6:	e9cd 0104 	strd	r0, r1, [sp, #16]
 801b1da:	e9dd bc04 	ldrd	fp, ip, [sp, #16]
 801b1de:	106d      	asrs	r5, r5, #1
 801b1e0:	f045 5500 	orr.w	r5, r5, #536870912	@ 0x20000000
 801b1e4:	f04f 0b00 	mov.w	fp, #0
 801b1e8:	f505 2500 	add.w	r5, r5, #524288	@ 0x80000
 801b1ec:	4661      	mov	r1, ip
 801b1ee:	2200      	movs	r2, #0
 801b1f0:	eb05 438a 	add.w	r3, r5, sl, lsl #18
 801b1f4:	4658      	mov	r0, fp
 801b1f6:	46e1      	mov	r9, ip
 801b1f8:	e9cd bc0e 	strd	fp, ip, [sp, #56]	@ 0x38
 801b1fc:	4614      	mov	r4, r2
 801b1fe:	461d      	mov	r5, r3
 801b200:	f7e5 fa0a 	bl	8000618 <__aeabi_dmul>
 801b204:	4602      	mov	r2, r0
 801b206:	460b      	mov	r3, r1
 801b208:	4630      	mov	r0, r6
 801b20a:	4639      	mov	r1, r7
 801b20c:	f7e5 f84c 	bl	80002a8 <__aeabi_dsub>
 801b210:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 801b214:	4606      	mov	r6, r0
 801b216:	460f      	mov	r7, r1
 801b218:	4620      	mov	r0, r4
 801b21a:	4629      	mov	r1, r5
 801b21c:	f7e5 f844 	bl	80002a8 <__aeabi_dsub>
 801b220:	4602      	mov	r2, r0
 801b222:	460b      	mov	r3, r1
 801b224:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 801b228:	f7e5 f83e 	bl	80002a8 <__aeabi_dsub>
 801b22c:	465a      	mov	r2, fp
 801b22e:	464b      	mov	r3, r9
 801b230:	f7e5 f9f2 	bl	8000618 <__aeabi_dmul>
 801b234:	4602      	mov	r2, r0
 801b236:	460b      	mov	r3, r1
 801b238:	4630      	mov	r0, r6
 801b23a:	4639      	mov	r1, r7
 801b23c:	f7e5 f834 	bl	80002a8 <__aeabi_dsub>
 801b240:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 801b244:	f7e5 f9e8 	bl	8000618 <__aeabi_dmul>
 801b248:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801b24c:	e9cd 0106 	strd	r0, r1, [sp, #24]
 801b250:	4610      	mov	r0, r2
 801b252:	4619      	mov	r1, r3
 801b254:	f7e5 f9e0 	bl	8000618 <__aeabi_dmul>
 801b258:	a37d      	add	r3, pc, #500	@ (adr r3, 801b450 <__ieee754_pow+0x730>)
 801b25a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b25e:	4604      	mov	r4, r0
 801b260:	460d      	mov	r5, r1
 801b262:	f7e5 f9d9 	bl	8000618 <__aeabi_dmul>
 801b266:	a37c      	add	r3, pc, #496	@ (adr r3, 801b458 <__ieee754_pow+0x738>)
 801b268:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b26c:	f7e5 f81e 	bl	80002ac <__adddf3>
 801b270:	4622      	mov	r2, r4
 801b272:	462b      	mov	r3, r5
 801b274:	f7e5 f9d0 	bl	8000618 <__aeabi_dmul>
 801b278:	a379      	add	r3, pc, #484	@ (adr r3, 801b460 <__ieee754_pow+0x740>)
 801b27a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b27e:	f7e5 f815 	bl	80002ac <__adddf3>
 801b282:	4622      	mov	r2, r4
 801b284:	462b      	mov	r3, r5
 801b286:	f7e5 f9c7 	bl	8000618 <__aeabi_dmul>
 801b28a:	a377      	add	r3, pc, #476	@ (adr r3, 801b468 <__ieee754_pow+0x748>)
 801b28c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b290:	f7e5 f80c 	bl	80002ac <__adddf3>
 801b294:	4622      	mov	r2, r4
 801b296:	462b      	mov	r3, r5
 801b298:	f7e5 f9be 	bl	8000618 <__aeabi_dmul>
 801b29c:	a374      	add	r3, pc, #464	@ (adr r3, 801b470 <__ieee754_pow+0x750>)
 801b29e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b2a2:	f7e5 f803 	bl	80002ac <__adddf3>
 801b2a6:	4622      	mov	r2, r4
 801b2a8:	462b      	mov	r3, r5
 801b2aa:	f7e5 f9b5 	bl	8000618 <__aeabi_dmul>
 801b2ae:	a372      	add	r3, pc, #456	@ (adr r3, 801b478 <__ieee754_pow+0x758>)
 801b2b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b2b4:	f7e4 fffa 	bl	80002ac <__adddf3>
 801b2b8:	4622      	mov	r2, r4
 801b2ba:	4606      	mov	r6, r0
 801b2bc:	460f      	mov	r7, r1
 801b2be:	462b      	mov	r3, r5
 801b2c0:	4620      	mov	r0, r4
 801b2c2:	4629      	mov	r1, r5
 801b2c4:	f7e5 f9a8 	bl	8000618 <__aeabi_dmul>
 801b2c8:	4602      	mov	r2, r0
 801b2ca:	460b      	mov	r3, r1
 801b2cc:	4630      	mov	r0, r6
 801b2ce:	4639      	mov	r1, r7
 801b2d0:	f7e5 f9a2 	bl	8000618 <__aeabi_dmul>
 801b2d4:	465a      	mov	r2, fp
 801b2d6:	4604      	mov	r4, r0
 801b2d8:	460d      	mov	r5, r1
 801b2da:	464b      	mov	r3, r9
 801b2dc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 801b2e0:	f7e4 ffe4 	bl	80002ac <__adddf3>
 801b2e4:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 801b2e8:	f7e5 f996 	bl	8000618 <__aeabi_dmul>
 801b2ec:	4622      	mov	r2, r4
 801b2ee:	462b      	mov	r3, r5
 801b2f0:	f7e4 ffdc 	bl	80002ac <__adddf3>
 801b2f4:	465a      	mov	r2, fp
 801b2f6:	e9cd 0108 	strd	r0, r1, [sp, #32]
 801b2fa:	464b      	mov	r3, r9
 801b2fc:	4658      	mov	r0, fp
 801b2fe:	4649      	mov	r1, r9
 801b300:	f7e5 f98a 	bl	8000618 <__aeabi_dmul>
 801b304:	4b6a      	ldr	r3, [pc, #424]	@ (801b4b0 <__ieee754_pow+0x790>)
 801b306:	2200      	movs	r2, #0
 801b308:	4606      	mov	r6, r0
 801b30a:	460f      	mov	r7, r1
 801b30c:	f7e4 ffce 	bl	80002ac <__adddf3>
 801b310:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 801b314:	f7e4 ffca 	bl	80002ac <__adddf3>
 801b318:	46d8      	mov	r8, fp
 801b31a:	e9dd bc0e 	ldrd	fp, ip, [sp, #56]	@ 0x38
 801b31e:	460d      	mov	r5, r1
 801b320:	465a      	mov	r2, fp
 801b322:	460b      	mov	r3, r1
 801b324:	4640      	mov	r0, r8
 801b326:	4649      	mov	r1, r9
 801b328:	e9cd bc0c 	strd	fp, ip, [sp, #48]	@ 0x30
 801b32c:	f7e5 f974 	bl	8000618 <__aeabi_dmul>
 801b330:	465c      	mov	r4, fp
 801b332:	4680      	mov	r8, r0
 801b334:	4689      	mov	r9, r1
 801b336:	4b5e      	ldr	r3, [pc, #376]	@ (801b4b0 <__ieee754_pow+0x790>)
 801b338:	2200      	movs	r2, #0
 801b33a:	4620      	mov	r0, r4
 801b33c:	4629      	mov	r1, r5
 801b33e:	f7e4 ffb3 	bl	80002a8 <__aeabi_dsub>
 801b342:	4632      	mov	r2, r6
 801b344:	463b      	mov	r3, r7
 801b346:	f7e4 ffaf 	bl	80002a8 <__aeabi_dsub>
 801b34a:	4602      	mov	r2, r0
 801b34c:	460b      	mov	r3, r1
 801b34e:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 801b352:	f7e4 ffa9 	bl	80002a8 <__aeabi_dsub>
 801b356:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801b35a:	f7e5 f95d 	bl	8000618 <__aeabi_dmul>
 801b35e:	4622      	mov	r2, r4
 801b360:	4606      	mov	r6, r0
 801b362:	460f      	mov	r7, r1
 801b364:	462b      	mov	r3, r5
 801b366:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801b36a:	f7e5 f955 	bl	8000618 <__aeabi_dmul>
 801b36e:	4602      	mov	r2, r0
 801b370:	460b      	mov	r3, r1
 801b372:	4630      	mov	r0, r6
 801b374:	4639      	mov	r1, r7
 801b376:	f7e4 ff99 	bl	80002ac <__adddf3>
 801b37a:	4606      	mov	r6, r0
 801b37c:	460f      	mov	r7, r1
 801b37e:	4602      	mov	r2, r0
 801b380:	460b      	mov	r3, r1
 801b382:	4640      	mov	r0, r8
 801b384:	4649      	mov	r1, r9
 801b386:	f7e4 ff91 	bl	80002ac <__adddf3>
 801b38a:	e9dd bc0c 	ldrd	fp, ip, [sp, #48]	@ 0x30
 801b38e:	a33c      	add	r3, pc, #240	@ (adr r3, 801b480 <__ieee754_pow+0x760>)
 801b390:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b394:	4658      	mov	r0, fp
 801b396:	e9cd bc08 	strd	fp, ip, [sp, #32]
 801b39a:	460d      	mov	r5, r1
 801b39c:	f7e5 f93c 	bl	8000618 <__aeabi_dmul>
 801b3a0:	465c      	mov	r4, fp
 801b3a2:	e9cd 0104 	strd	r0, r1, [sp, #16]
 801b3a6:	4642      	mov	r2, r8
 801b3a8:	464b      	mov	r3, r9
 801b3aa:	4620      	mov	r0, r4
 801b3ac:	4629      	mov	r1, r5
 801b3ae:	f7e4 ff7b 	bl	80002a8 <__aeabi_dsub>
 801b3b2:	4602      	mov	r2, r0
 801b3b4:	460b      	mov	r3, r1
 801b3b6:	4630      	mov	r0, r6
 801b3b8:	4639      	mov	r1, r7
 801b3ba:	f7e4 ff75 	bl	80002a8 <__aeabi_dsub>
 801b3be:	a332      	add	r3, pc, #200	@ (adr r3, 801b488 <__ieee754_pow+0x768>)
 801b3c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b3c4:	f7e5 f928 	bl	8000618 <__aeabi_dmul>
 801b3c8:	a331      	add	r3, pc, #196	@ (adr r3, 801b490 <__ieee754_pow+0x770>)
 801b3ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b3ce:	4606      	mov	r6, r0
 801b3d0:	460f      	mov	r7, r1
 801b3d2:	4620      	mov	r0, r4
 801b3d4:	4629      	mov	r1, r5
 801b3d6:	f7e5 f91f 	bl	8000618 <__aeabi_dmul>
 801b3da:	4602      	mov	r2, r0
 801b3dc:	460b      	mov	r3, r1
 801b3de:	4630      	mov	r0, r6
 801b3e0:	4639      	mov	r1, r7
 801b3e2:	f7e4 ff63 	bl	80002ac <__adddf3>
 801b3e6:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 801b3e8:	4b32      	ldr	r3, [pc, #200]	@ (801b4b4 <__ieee754_pow+0x794>)
 801b3ea:	4413      	add	r3, r2
 801b3ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b3f0:	f7e4 ff5c 	bl	80002ac <__adddf3>
 801b3f4:	e9cd 0106 	strd	r0, r1, [sp, #24]
 801b3f8:	980a      	ldr	r0, [sp, #40]	@ 0x28
 801b3fa:	f7e5 f8a3 	bl	8000544 <__aeabi_i2d>
 801b3fe:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 801b400:	4b2d      	ldr	r3, [pc, #180]	@ (801b4b8 <__ieee754_pow+0x798>)
 801b402:	4413      	add	r3, r2
 801b404:	e9d3 8900 	ldrd	r8, r9, [r3]
 801b408:	4606      	mov	r6, r0
 801b40a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 801b40e:	460f      	mov	r7, r1
 801b410:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 801b414:	f7e4 ff4a 	bl	80002ac <__adddf3>
 801b418:	4642      	mov	r2, r8
 801b41a:	464b      	mov	r3, r9
 801b41c:	f7e4 ff46 	bl	80002ac <__adddf3>
 801b420:	4632      	mov	r2, r6
 801b422:	463b      	mov	r3, r7
 801b424:	f7e4 ff42 	bl	80002ac <__adddf3>
 801b428:	e9dd bc08 	ldrd	fp, ip, [sp, #32]
 801b42c:	4632      	mov	r2, r6
 801b42e:	463b      	mov	r3, r7
 801b430:	4658      	mov	r0, fp
 801b432:	460d      	mov	r5, r1
 801b434:	f7e4 ff38 	bl	80002a8 <__aeabi_dsub>
 801b438:	4642      	mov	r2, r8
 801b43a:	464b      	mov	r3, r9
 801b43c:	f7e4 ff34 	bl	80002a8 <__aeabi_dsub>
 801b440:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801b444:	f7e4 ff30 	bl	80002a8 <__aeabi_dsub>
 801b448:	465c      	mov	r4, fp
 801b44a:	4602      	mov	r2, r0
 801b44c:	e036      	b.n	801b4bc <__ieee754_pow+0x79c>
 801b44e:	bf00      	nop
 801b450:	4a454eef 	.word	0x4a454eef
 801b454:	3fca7e28 	.word	0x3fca7e28
 801b458:	93c9db65 	.word	0x93c9db65
 801b45c:	3fcd864a 	.word	0x3fcd864a
 801b460:	a91d4101 	.word	0xa91d4101
 801b464:	3fd17460 	.word	0x3fd17460
 801b468:	518f264d 	.word	0x518f264d
 801b46c:	3fd55555 	.word	0x3fd55555
 801b470:	db6fabff 	.word	0xdb6fabff
 801b474:	3fdb6db6 	.word	0x3fdb6db6
 801b478:	33333303 	.word	0x33333303
 801b47c:	3fe33333 	.word	0x3fe33333
 801b480:	e0000000 	.word	0xe0000000
 801b484:	3feec709 	.word	0x3feec709
 801b488:	dc3a03fd 	.word	0xdc3a03fd
 801b48c:	3feec709 	.word	0x3feec709
 801b490:	145b01f5 	.word	0x145b01f5
 801b494:	be3e2fe0 	.word	0xbe3e2fe0
 801b498:	7ff00000 	.word	0x7ff00000
 801b49c:	43400000 	.word	0x43400000
 801b4a0:	0003988e 	.word	0x0003988e
 801b4a4:	000bb679 	.word	0x000bb679
 801b4a8:	0801c790 	.word	0x0801c790
 801b4ac:	3ff00000 	.word	0x3ff00000
 801b4b0:	40080000 	.word	0x40080000
 801b4b4:	0801c770 	.word	0x0801c770
 801b4b8:	0801c780 	.word	0x0801c780
 801b4bc:	460b      	mov	r3, r1
 801b4be:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801b4c2:	e5d7      	b.n	801b074 <__ieee754_pow+0x354>
 801b4c4:	f04f 0a01 	mov.w	sl, #1
 801b4c8:	e65e      	b.n	801b188 <__ieee754_pow+0x468>
 801b4ca:	a3b4      	add	r3, pc, #720	@ (adr r3, 801b79c <__ieee754_pow+0xa7c>)
 801b4cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b4d0:	4630      	mov	r0, r6
 801b4d2:	4639      	mov	r1, r7
 801b4d4:	f7e4 feea 	bl	80002ac <__adddf3>
 801b4d8:	4642      	mov	r2, r8
 801b4da:	e9cd 0100 	strd	r0, r1, [sp]
 801b4de:	464b      	mov	r3, r9
 801b4e0:	4620      	mov	r0, r4
 801b4e2:	4629      	mov	r1, r5
 801b4e4:	f7e4 fee0 	bl	80002a8 <__aeabi_dsub>
 801b4e8:	4602      	mov	r2, r0
 801b4ea:	460b      	mov	r3, r1
 801b4ec:	e9dd 0100 	ldrd	r0, r1, [sp]
 801b4f0:	f7e5 fb22 	bl	8000b38 <__aeabi_dcmpgt>
 801b4f4:	2800      	cmp	r0, #0
 801b4f6:	f47f ae00 	bne.w	801b0fa <__ieee754_pow+0x3da>
 801b4fa:	ea4f 5a2a 	mov.w	sl, sl, asr #20
 801b4fe:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 801b502:	f2aa 3afe 	subw	sl, sl, #1022	@ 0x3fe
 801b506:	fa43 fa0a 	asr.w	sl, r3, sl
 801b50a:	44da      	add	sl, fp
 801b50c:	f3ca 510a 	ubfx	r1, sl, #20, #11
 801b510:	489d      	ldr	r0, [pc, #628]	@ (801b788 <__ieee754_pow+0xa68>)
 801b512:	f2a1 31ff 	subw	r1, r1, #1023	@ 0x3ff
 801b516:	4108      	asrs	r0, r1
 801b518:	ea00 030a 	and.w	r3, r0, sl
 801b51c:	f3ca 0a13 	ubfx	sl, sl, #0, #20
 801b520:	f1c1 0114 	rsb	r1, r1, #20
 801b524:	f44a 1a80 	orr.w	sl, sl, #1048576	@ 0x100000
 801b528:	fa4a fa01 	asr.w	sl, sl, r1
 801b52c:	f1bb 0f00 	cmp.w	fp, #0
 801b530:	4640      	mov	r0, r8
 801b532:	4649      	mov	r1, r9
 801b534:	f04f 0200 	mov.w	r2, #0
 801b538:	bfb8      	it	lt
 801b53a:	f1ca 0a00 	rsblt	sl, sl, #0
 801b53e:	f7e4 feb3 	bl	80002a8 <__aeabi_dsub>
 801b542:	4680      	mov	r8, r0
 801b544:	4689      	mov	r9, r1
 801b546:	4632      	mov	r2, r6
 801b548:	463b      	mov	r3, r7
 801b54a:	4640      	mov	r0, r8
 801b54c:	4649      	mov	r1, r9
 801b54e:	f7e4 fead 	bl	80002ac <__adddf3>
 801b552:	2400      	movs	r4, #0
 801b554:	a37c      	add	r3, pc, #496	@ (adr r3, 801b748 <__ieee754_pow+0xa28>)
 801b556:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b55a:	4620      	mov	r0, r4
 801b55c:	460d      	mov	r5, r1
 801b55e:	f7e5 f85b 	bl	8000618 <__aeabi_dmul>
 801b562:	4642      	mov	r2, r8
 801b564:	e9cd 0100 	strd	r0, r1, [sp]
 801b568:	464b      	mov	r3, r9
 801b56a:	4620      	mov	r0, r4
 801b56c:	4629      	mov	r1, r5
 801b56e:	f7e4 fe9b 	bl	80002a8 <__aeabi_dsub>
 801b572:	4602      	mov	r2, r0
 801b574:	460b      	mov	r3, r1
 801b576:	4630      	mov	r0, r6
 801b578:	4639      	mov	r1, r7
 801b57a:	f7e4 fe95 	bl	80002a8 <__aeabi_dsub>
 801b57e:	a374      	add	r3, pc, #464	@ (adr r3, 801b750 <__ieee754_pow+0xa30>)
 801b580:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b584:	f7e5 f848 	bl	8000618 <__aeabi_dmul>
 801b588:	a373      	add	r3, pc, #460	@ (adr r3, 801b758 <__ieee754_pow+0xa38>)
 801b58a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b58e:	4680      	mov	r8, r0
 801b590:	4689      	mov	r9, r1
 801b592:	4620      	mov	r0, r4
 801b594:	4629      	mov	r1, r5
 801b596:	f7e5 f83f 	bl	8000618 <__aeabi_dmul>
 801b59a:	4602      	mov	r2, r0
 801b59c:	460b      	mov	r3, r1
 801b59e:	4640      	mov	r0, r8
 801b5a0:	4649      	mov	r1, r9
 801b5a2:	f7e4 fe83 	bl	80002ac <__adddf3>
 801b5a6:	4604      	mov	r4, r0
 801b5a8:	460d      	mov	r5, r1
 801b5aa:	4602      	mov	r2, r0
 801b5ac:	460b      	mov	r3, r1
 801b5ae:	e9dd 0100 	ldrd	r0, r1, [sp]
 801b5b2:	f7e4 fe7b 	bl	80002ac <__adddf3>
 801b5b6:	e9dd 2300 	ldrd	r2, r3, [sp]
 801b5ba:	4680      	mov	r8, r0
 801b5bc:	4689      	mov	r9, r1
 801b5be:	f7e4 fe73 	bl	80002a8 <__aeabi_dsub>
 801b5c2:	4602      	mov	r2, r0
 801b5c4:	460b      	mov	r3, r1
 801b5c6:	4620      	mov	r0, r4
 801b5c8:	4629      	mov	r1, r5
 801b5ca:	f7e4 fe6d 	bl	80002a8 <__aeabi_dsub>
 801b5ce:	4642      	mov	r2, r8
 801b5d0:	4606      	mov	r6, r0
 801b5d2:	460f      	mov	r7, r1
 801b5d4:	464b      	mov	r3, r9
 801b5d6:	4640      	mov	r0, r8
 801b5d8:	4649      	mov	r1, r9
 801b5da:	f7e5 f81d 	bl	8000618 <__aeabi_dmul>
 801b5de:	a360      	add	r3, pc, #384	@ (adr r3, 801b760 <__ieee754_pow+0xa40>)
 801b5e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b5e4:	4604      	mov	r4, r0
 801b5e6:	460d      	mov	r5, r1
 801b5e8:	f7e5 f816 	bl	8000618 <__aeabi_dmul>
 801b5ec:	a35e      	add	r3, pc, #376	@ (adr r3, 801b768 <__ieee754_pow+0xa48>)
 801b5ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b5f2:	f7e4 fe59 	bl	80002a8 <__aeabi_dsub>
 801b5f6:	4622      	mov	r2, r4
 801b5f8:	462b      	mov	r3, r5
 801b5fa:	f7e5 f80d 	bl	8000618 <__aeabi_dmul>
 801b5fe:	a35c      	add	r3, pc, #368	@ (adr r3, 801b770 <__ieee754_pow+0xa50>)
 801b600:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b604:	f7e4 fe52 	bl	80002ac <__adddf3>
 801b608:	4622      	mov	r2, r4
 801b60a:	462b      	mov	r3, r5
 801b60c:	f7e5 f804 	bl	8000618 <__aeabi_dmul>
 801b610:	a359      	add	r3, pc, #356	@ (adr r3, 801b778 <__ieee754_pow+0xa58>)
 801b612:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b616:	f7e4 fe47 	bl	80002a8 <__aeabi_dsub>
 801b61a:	4622      	mov	r2, r4
 801b61c:	462b      	mov	r3, r5
 801b61e:	f7e4 fffb 	bl	8000618 <__aeabi_dmul>
 801b622:	a357      	add	r3, pc, #348	@ (adr r3, 801b780 <__ieee754_pow+0xa60>)
 801b624:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b628:	f7e4 fe40 	bl	80002ac <__adddf3>
 801b62c:	4622      	mov	r2, r4
 801b62e:	462b      	mov	r3, r5
 801b630:	f7e4 fff2 	bl	8000618 <__aeabi_dmul>
 801b634:	4602      	mov	r2, r0
 801b636:	460b      	mov	r3, r1
 801b638:	4640      	mov	r0, r8
 801b63a:	4649      	mov	r1, r9
 801b63c:	f7e4 fe34 	bl	80002a8 <__aeabi_dsub>
 801b640:	4604      	mov	r4, r0
 801b642:	460d      	mov	r5, r1
 801b644:	4602      	mov	r2, r0
 801b646:	460b      	mov	r3, r1
 801b648:	4640      	mov	r0, r8
 801b64a:	4649      	mov	r1, r9
 801b64c:	f7e4 ffe4 	bl	8000618 <__aeabi_dmul>
 801b650:	2200      	movs	r2, #0
 801b652:	e9cd 0100 	strd	r0, r1, [sp]
 801b656:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 801b65a:	4620      	mov	r0, r4
 801b65c:	4629      	mov	r1, r5
 801b65e:	f7e4 fe23 	bl	80002a8 <__aeabi_dsub>
 801b662:	4602      	mov	r2, r0
 801b664:	460b      	mov	r3, r1
 801b666:	e9dd 0100 	ldrd	r0, r1, [sp]
 801b66a:	f7e5 f8ff 	bl	800086c <__aeabi_ddiv>
 801b66e:	4632      	mov	r2, r6
 801b670:	4604      	mov	r4, r0
 801b672:	460d      	mov	r5, r1
 801b674:	463b      	mov	r3, r7
 801b676:	4640      	mov	r0, r8
 801b678:	4649      	mov	r1, r9
 801b67a:	f7e4 ffcd 	bl	8000618 <__aeabi_dmul>
 801b67e:	4632      	mov	r2, r6
 801b680:	463b      	mov	r3, r7
 801b682:	f7e4 fe13 	bl	80002ac <__adddf3>
 801b686:	4602      	mov	r2, r0
 801b688:	460b      	mov	r3, r1
 801b68a:	4620      	mov	r0, r4
 801b68c:	4629      	mov	r1, r5
 801b68e:	f7e4 fe0b 	bl	80002a8 <__aeabi_dsub>
 801b692:	4642      	mov	r2, r8
 801b694:	464b      	mov	r3, r9
 801b696:	f7e4 fe07 	bl	80002a8 <__aeabi_dsub>
 801b69a:	460b      	mov	r3, r1
 801b69c:	4602      	mov	r2, r0
 801b69e:	493b      	ldr	r1, [pc, #236]	@ (801b78c <__ieee754_pow+0xa6c>)
 801b6a0:	2000      	movs	r0, #0
 801b6a2:	f7e4 fe01 	bl	80002a8 <__aeabi_dsub>
 801b6a6:	ec41 0b10 	vmov	d0, r0, r1
 801b6aa:	ee10 3a90 	vmov	r3, s1
 801b6ae:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 801b6b2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 801b6b6:	da30      	bge.n	801b71a <__ieee754_pow+0x9fa>
 801b6b8:	4650      	mov	r0, sl
 801b6ba:	f000 f87d 	bl	801b7b8 <scalbn>
 801b6be:	ec51 0b10 	vmov	r0, r1, d0
 801b6c2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801b6c6:	f7ff bbd2 	b.w	801ae6e <__ieee754_pow+0x14e>
 801b6ca:	4c31      	ldr	r4, [pc, #196]	@ (801b790 <__ieee754_pow+0xa70>)
 801b6cc:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 801b6d0:	42a3      	cmp	r3, r4
 801b6d2:	d91a      	bls.n	801b70a <__ieee754_pow+0x9ea>
 801b6d4:	4b2f      	ldr	r3, [pc, #188]	@ (801b794 <__ieee754_pow+0xa74>)
 801b6d6:	440b      	add	r3, r1
 801b6d8:	4303      	orrs	r3, r0
 801b6da:	d009      	beq.n	801b6f0 <__ieee754_pow+0x9d0>
 801b6dc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801b6e0:	2200      	movs	r2, #0
 801b6e2:	2300      	movs	r3, #0
 801b6e4:	f7e5 fa0a 	bl	8000afc <__aeabi_dcmplt>
 801b6e8:	3800      	subs	r0, #0
 801b6ea:	bf18      	it	ne
 801b6ec:	2001      	movne	r0, #1
 801b6ee:	e42b      	b.n	801af48 <__ieee754_pow+0x228>
 801b6f0:	4642      	mov	r2, r8
 801b6f2:	464b      	mov	r3, r9
 801b6f4:	f7e4 fdd8 	bl	80002a8 <__aeabi_dsub>
 801b6f8:	4632      	mov	r2, r6
 801b6fa:	463b      	mov	r3, r7
 801b6fc:	f7e5 fa12 	bl	8000b24 <__aeabi_dcmpge>
 801b700:	2800      	cmp	r0, #0
 801b702:	d1eb      	bne.n	801b6dc <__ieee754_pow+0x9bc>
 801b704:	f8df a09c 	ldr.w	sl, [pc, #156]	@ 801b7a4 <__ieee754_pow+0xa84>
 801b708:	e6f7      	b.n	801b4fa <__ieee754_pow+0x7da>
 801b70a:	469a      	mov	sl, r3
 801b70c:	4b22      	ldr	r3, [pc, #136]	@ (801b798 <__ieee754_pow+0xa78>)
 801b70e:	459a      	cmp	sl, r3
 801b710:	f63f aef3 	bhi.w	801b4fa <__ieee754_pow+0x7da>
 801b714:	f8dd a010 	ldr.w	sl, [sp, #16]
 801b718:	e715      	b.n	801b546 <__ieee754_pow+0x826>
 801b71a:	ec51 0b10 	vmov	r0, r1, d0
 801b71e:	4619      	mov	r1, r3
 801b720:	e7cf      	b.n	801b6c2 <__ieee754_pow+0x9a2>
 801b722:	491a      	ldr	r1, [pc, #104]	@ (801b78c <__ieee754_pow+0xa6c>)
 801b724:	2000      	movs	r0, #0
 801b726:	f7ff bb18 	b.w	801ad5a <__ieee754_pow+0x3a>
 801b72a:	2000      	movs	r0, #0
 801b72c:	2100      	movs	r1, #0
 801b72e:	f7ff bb14 	b.w	801ad5a <__ieee754_pow+0x3a>
 801b732:	4630      	mov	r0, r6
 801b734:	4639      	mov	r1, r7
 801b736:	f7ff bb10 	b.w	801ad5a <__ieee754_pow+0x3a>
 801b73a:	460c      	mov	r4, r1
 801b73c:	f7ff bb5e 	b.w	801adfc <__ieee754_pow+0xdc>
 801b740:	2400      	movs	r4, #0
 801b742:	f7ff bb49 	b.w	801add8 <__ieee754_pow+0xb8>
 801b746:	bf00      	nop
 801b748:	00000000 	.word	0x00000000
 801b74c:	3fe62e43 	.word	0x3fe62e43
 801b750:	fefa39ef 	.word	0xfefa39ef
 801b754:	3fe62e42 	.word	0x3fe62e42
 801b758:	0ca86c39 	.word	0x0ca86c39
 801b75c:	be205c61 	.word	0xbe205c61
 801b760:	72bea4d0 	.word	0x72bea4d0
 801b764:	3e663769 	.word	0x3e663769
 801b768:	c5d26bf1 	.word	0xc5d26bf1
 801b76c:	3ebbbd41 	.word	0x3ebbbd41
 801b770:	af25de2c 	.word	0xaf25de2c
 801b774:	3f11566a 	.word	0x3f11566a
 801b778:	16bebd93 	.word	0x16bebd93
 801b77c:	3f66c16c 	.word	0x3f66c16c
 801b780:	5555553e 	.word	0x5555553e
 801b784:	3fc55555 	.word	0x3fc55555
 801b788:	fff00000 	.word	0xfff00000
 801b78c:	3ff00000 	.word	0x3ff00000
 801b790:	4090cbff 	.word	0x4090cbff
 801b794:	3f6f3400 	.word	0x3f6f3400
 801b798:	3fe00000 	.word	0x3fe00000
 801b79c:	652b82fe 	.word	0x652b82fe
 801b7a0:	3c971547 	.word	0x3c971547
 801b7a4:	4090cc00 	.word	0x4090cc00

0801b7a8 <fabs>:
 801b7a8:	ec51 0b10 	vmov	r0, r1, d0
 801b7ac:	4602      	mov	r2, r0
 801b7ae:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 801b7b2:	ec43 2b10 	vmov	d0, r2, r3
 801b7b6:	4770      	bx	lr

0801b7b8 <scalbn>:
 801b7b8:	b570      	push	{r4, r5, r6, lr}
 801b7ba:	ec55 4b10 	vmov	r4, r5, d0
 801b7be:	f3c5 510a 	ubfx	r1, r5, #20, #11
 801b7c2:	4606      	mov	r6, r0
 801b7c4:	462b      	mov	r3, r5
 801b7c6:	b991      	cbnz	r1, 801b7ee <scalbn+0x36>
 801b7c8:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 801b7cc:	4323      	orrs	r3, r4
 801b7ce:	d03d      	beq.n	801b84c <scalbn+0x94>
 801b7d0:	4b35      	ldr	r3, [pc, #212]	@ (801b8a8 <scalbn+0xf0>)
 801b7d2:	4620      	mov	r0, r4
 801b7d4:	4629      	mov	r1, r5
 801b7d6:	2200      	movs	r2, #0
 801b7d8:	f7e4 ff1e 	bl	8000618 <__aeabi_dmul>
 801b7dc:	4b33      	ldr	r3, [pc, #204]	@ (801b8ac <scalbn+0xf4>)
 801b7de:	429e      	cmp	r6, r3
 801b7e0:	4604      	mov	r4, r0
 801b7e2:	460d      	mov	r5, r1
 801b7e4:	da0f      	bge.n	801b806 <scalbn+0x4e>
 801b7e6:	a328      	add	r3, pc, #160	@ (adr r3, 801b888 <scalbn+0xd0>)
 801b7e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b7ec:	e01e      	b.n	801b82c <scalbn+0x74>
 801b7ee:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 801b7f2:	4291      	cmp	r1, r2
 801b7f4:	d10b      	bne.n	801b80e <scalbn+0x56>
 801b7f6:	4622      	mov	r2, r4
 801b7f8:	4620      	mov	r0, r4
 801b7fa:	4629      	mov	r1, r5
 801b7fc:	f7e4 fd56 	bl	80002ac <__adddf3>
 801b800:	4604      	mov	r4, r0
 801b802:	460d      	mov	r5, r1
 801b804:	e022      	b.n	801b84c <scalbn+0x94>
 801b806:	460b      	mov	r3, r1
 801b808:	f3c1 510a 	ubfx	r1, r1, #20, #11
 801b80c:	3936      	subs	r1, #54	@ 0x36
 801b80e:	f24c 3250 	movw	r2, #50000	@ 0xc350
 801b812:	4296      	cmp	r6, r2
 801b814:	dd0d      	ble.n	801b832 <scalbn+0x7a>
 801b816:	2d00      	cmp	r5, #0
 801b818:	a11d      	add	r1, pc, #116	@ (adr r1, 801b890 <scalbn+0xd8>)
 801b81a:	e9d1 0100 	ldrd	r0, r1, [r1]
 801b81e:	da02      	bge.n	801b826 <scalbn+0x6e>
 801b820:	a11d      	add	r1, pc, #116	@ (adr r1, 801b898 <scalbn+0xe0>)
 801b822:	e9d1 0100 	ldrd	r0, r1, [r1]
 801b826:	a31a      	add	r3, pc, #104	@ (adr r3, 801b890 <scalbn+0xd8>)
 801b828:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b82c:	f7e4 fef4 	bl	8000618 <__aeabi_dmul>
 801b830:	e7e6      	b.n	801b800 <scalbn+0x48>
 801b832:	1872      	adds	r2, r6, r1
 801b834:	f240 71fe 	movw	r1, #2046	@ 0x7fe
 801b838:	428a      	cmp	r2, r1
 801b83a:	dcec      	bgt.n	801b816 <scalbn+0x5e>
 801b83c:	2a00      	cmp	r2, #0
 801b83e:	dd08      	ble.n	801b852 <scalbn+0x9a>
 801b840:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 801b844:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 801b848:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 801b84c:	ec45 4b10 	vmov	d0, r4, r5
 801b850:	bd70      	pop	{r4, r5, r6, pc}
 801b852:	f112 0f35 	cmn.w	r2, #53	@ 0x35
 801b856:	da08      	bge.n	801b86a <scalbn+0xb2>
 801b858:	2d00      	cmp	r5, #0
 801b85a:	a10b      	add	r1, pc, #44	@ (adr r1, 801b888 <scalbn+0xd0>)
 801b85c:	e9d1 0100 	ldrd	r0, r1, [r1]
 801b860:	dac1      	bge.n	801b7e6 <scalbn+0x2e>
 801b862:	a10f      	add	r1, pc, #60	@ (adr r1, 801b8a0 <scalbn+0xe8>)
 801b864:	e9d1 0100 	ldrd	r0, r1, [r1]
 801b868:	e7bd      	b.n	801b7e6 <scalbn+0x2e>
 801b86a:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 801b86e:	3236      	adds	r2, #54	@ 0x36
 801b870:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 801b874:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 801b878:	4620      	mov	r0, r4
 801b87a:	4b0d      	ldr	r3, [pc, #52]	@ (801b8b0 <scalbn+0xf8>)
 801b87c:	4629      	mov	r1, r5
 801b87e:	2200      	movs	r2, #0
 801b880:	e7d4      	b.n	801b82c <scalbn+0x74>
 801b882:	bf00      	nop
 801b884:	f3af 8000 	nop.w
 801b888:	c2f8f359 	.word	0xc2f8f359
 801b88c:	01a56e1f 	.word	0x01a56e1f
 801b890:	8800759c 	.word	0x8800759c
 801b894:	7e37e43c 	.word	0x7e37e43c
 801b898:	8800759c 	.word	0x8800759c
 801b89c:	fe37e43c 	.word	0xfe37e43c
 801b8a0:	c2f8f359 	.word	0xc2f8f359
 801b8a4:	81a56e1f 	.word	0x81a56e1f
 801b8a8:	43500000 	.word	0x43500000
 801b8ac:	ffff3cb0 	.word	0xffff3cb0
 801b8b0:	3c900000 	.word	0x3c900000

0801b8b4 <with_errno>:
 801b8b4:	b510      	push	{r4, lr}
 801b8b6:	ed2d 8b02 	vpush	{d8}
 801b8ba:	eeb0 8a40 	vmov.f32	s16, s0
 801b8be:	eef0 8a60 	vmov.f32	s17, s1
 801b8c2:	4604      	mov	r4, r0
 801b8c4:	f7fe fa50 	bl	8019d68 <__errno>
 801b8c8:	eeb0 0a48 	vmov.f32	s0, s16
 801b8cc:	eef0 0a68 	vmov.f32	s1, s17
 801b8d0:	ecbd 8b02 	vpop	{d8}
 801b8d4:	6004      	str	r4, [r0, #0]
 801b8d6:	bd10      	pop	{r4, pc}

0801b8d8 <xflow>:
 801b8d8:	4603      	mov	r3, r0
 801b8da:	b507      	push	{r0, r1, r2, lr}
 801b8dc:	ec51 0b10 	vmov	r0, r1, d0
 801b8e0:	b183      	cbz	r3, 801b904 <xflow+0x2c>
 801b8e2:	4602      	mov	r2, r0
 801b8e4:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 801b8e8:	e9cd 2300 	strd	r2, r3, [sp]
 801b8ec:	e9dd 2300 	ldrd	r2, r3, [sp]
 801b8f0:	f7e4 fe92 	bl	8000618 <__aeabi_dmul>
 801b8f4:	ec41 0b10 	vmov	d0, r0, r1
 801b8f8:	2022      	movs	r0, #34	@ 0x22
 801b8fa:	b003      	add	sp, #12
 801b8fc:	f85d eb04 	ldr.w	lr, [sp], #4
 801b900:	f7ff bfd8 	b.w	801b8b4 <with_errno>
 801b904:	4602      	mov	r2, r0
 801b906:	460b      	mov	r3, r1
 801b908:	e7ee      	b.n	801b8e8 <xflow+0x10>
 801b90a:	0000      	movs	r0, r0
 801b90c:	0000      	movs	r0, r0
	...

0801b910 <__math_uflow>:
 801b910:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 801b918 <__math_uflow+0x8>
 801b914:	f7ff bfe0 	b.w	801b8d8 <xflow>
 801b918:	00000000 	.word	0x00000000
 801b91c:	10000000 	.word	0x10000000

0801b920 <__math_oflow>:
 801b920:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 801b928 <__math_oflow+0x8>
 801b924:	f7ff bfd8 	b.w	801b8d8 <xflow>
 801b928:	00000000 	.word	0x00000000
 801b92c:	70000000 	.word	0x70000000

0801b930 <__ieee754_sqrt>:
 801b930:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b934:	4a68      	ldr	r2, [pc, #416]	@ (801bad8 <__ieee754_sqrt+0x1a8>)
 801b936:	ec55 4b10 	vmov	r4, r5, d0
 801b93a:	43aa      	bics	r2, r5
 801b93c:	462b      	mov	r3, r5
 801b93e:	4621      	mov	r1, r4
 801b940:	d110      	bne.n	801b964 <__ieee754_sqrt+0x34>
 801b942:	4622      	mov	r2, r4
 801b944:	4620      	mov	r0, r4
 801b946:	4629      	mov	r1, r5
 801b948:	f7e4 fe66 	bl	8000618 <__aeabi_dmul>
 801b94c:	4602      	mov	r2, r0
 801b94e:	460b      	mov	r3, r1
 801b950:	4620      	mov	r0, r4
 801b952:	4629      	mov	r1, r5
 801b954:	f7e4 fcaa 	bl	80002ac <__adddf3>
 801b958:	4604      	mov	r4, r0
 801b95a:	460d      	mov	r5, r1
 801b95c:	ec45 4b10 	vmov	d0, r4, r5
 801b960:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b964:	2d00      	cmp	r5, #0
 801b966:	dc0e      	bgt.n	801b986 <__ieee754_sqrt+0x56>
 801b968:	f025 4200 	bic.w	r2, r5, #2147483648	@ 0x80000000
 801b96c:	4322      	orrs	r2, r4
 801b96e:	d0f5      	beq.n	801b95c <__ieee754_sqrt+0x2c>
 801b970:	b19d      	cbz	r5, 801b99a <__ieee754_sqrt+0x6a>
 801b972:	4622      	mov	r2, r4
 801b974:	4620      	mov	r0, r4
 801b976:	4629      	mov	r1, r5
 801b978:	f7e4 fc96 	bl	80002a8 <__aeabi_dsub>
 801b97c:	4602      	mov	r2, r0
 801b97e:	460b      	mov	r3, r1
 801b980:	f7e4 ff74 	bl	800086c <__aeabi_ddiv>
 801b984:	e7e8      	b.n	801b958 <__ieee754_sqrt+0x28>
 801b986:	152a      	asrs	r2, r5, #20
 801b988:	d115      	bne.n	801b9b6 <__ieee754_sqrt+0x86>
 801b98a:	2000      	movs	r0, #0
 801b98c:	e009      	b.n	801b9a2 <__ieee754_sqrt+0x72>
 801b98e:	0acb      	lsrs	r3, r1, #11
 801b990:	3a15      	subs	r2, #21
 801b992:	0549      	lsls	r1, r1, #21
 801b994:	2b00      	cmp	r3, #0
 801b996:	d0fa      	beq.n	801b98e <__ieee754_sqrt+0x5e>
 801b998:	e7f7      	b.n	801b98a <__ieee754_sqrt+0x5a>
 801b99a:	462a      	mov	r2, r5
 801b99c:	e7fa      	b.n	801b994 <__ieee754_sqrt+0x64>
 801b99e:	005b      	lsls	r3, r3, #1
 801b9a0:	3001      	adds	r0, #1
 801b9a2:	02dc      	lsls	r4, r3, #11
 801b9a4:	d5fb      	bpl.n	801b99e <__ieee754_sqrt+0x6e>
 801b9a6:	1e44      	subs	r4, r0, #1
 801b9a8:	1b12      	subs	r2, r2, r4
 801b9aa:	f1c0 0420 	rsb	r4, r0, #32
 801b9ae:	fa21 f404 	lsr.w	r4, r1, r4
 801b9b2:	4323      	orrs	r3, r4
 801b9b4:	4081      	lsls	r1, r0
 801b9b6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 801b9ba:	f2a2 35ff 	subw	r5, r2, #1023	@ 0x3ff
 801b9be:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 801b9c2:	07d2      	lsls	r2, r2, #31
 801b9c4:	bf5c      	itt	pl
 801b9c6:	005b      	lslpl	r3, r3, #1
 801b9c8:	eb03 73d1 	addpl.w	r3, r3, r1, lsr #31
 801b9cc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 801b9d0:	bf58      	it	pl
 801b9d2:	0049      	lslpl	r1, r1, #1
 801b9d4:	2600      	movs	r6, #0
 801b9d6:	eb03 73d1 	add.w	r3, r3, r1, lsr #31
 801b9da:	106d      	asrs	r5, r5, #1
 801b9dc:	0049      	lsls	r1, r1, #1
 801b9de:	2016      	movs	r0, #22
 801b9e0:	4632      	mov	r2, r6
 801b9e2:	f44f 1400 	mov.w	r4, #2097152	@ 0x200000
 801b9e6:	1917      	adds	r7, r2, r4
 801b9e8:	429f      	cmp	r7, r3
 801b9ea:	bfde      	ittt	le
 801b9ec:	193a      	addle	r2, r7, r4
 801b9ee:	1bdb      	suble	r3, r3, r7
 801b9f0:	1936      	addle	r6, r6, r4
 801b9f2:	0fcf      	lsrs	r7, r1, #31
 801b9f4:	3801      	subs	r0, #1
 801b9f6:	eb07 0343 	add.w	r3, r7, r3, lsl #1
 801b9fa:	ea4f 0141 	mov.w	r1, r1, lsl #1
 801b9fe:	ea4f 0454 	mov.w	r4, r4, lsr #1
 801ba02:	d1f0      	bne.n	801b9e6 <__ieee754_sqrt+0xb6>
 801ba04:	4604      	mov	r4, r0
 801ba06:	2720      	movs	r7, #32
 801ba08:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 801ba0c:	429a      	cmp	r2, r3
 801ba0e:	eb00 0e0c 	add.w	lr, r0, ip
 801ba12:	db02      	blt.n	801ba1a <__ieee754_sqrt+0xea>
 801ba14:	d113      	bne.n	801ba3e <__ieee754_sqrt+0x10e>
 801ba16:	458e      	cmp	lr, r1
 801ba18:	d811      	bhi.n	801ba3e <__ieee754_sqrt+0x10e>
 801ba1a:	f1be 0f00 	cmp.w	lr, #0
 801ba1e:	eb0e 000c 	add.w	r0, lr, ip
 801ba22:	da42      	bge.n	801baaa <__ieee754_sqrt+0x17a>
 801ba24:	2800      	cmp	r0, #0
 801ba26:	db40      	blt.n	801baaa <__ieee754_sqrt+0x17a>
 801ba28:	f102 0801 	add.w	r8, r2, #1
 801ba2c:	1a9b      	subs	r3, r3, r2
 801ba2e:	458e      	cmp	lr, r1
 801ba30:	bf88      	it	hi
 801ba32:	f103 33ff 	addhi.w	r3, r3, #4294967295	@ 0xffffffff
 801ba36:	eba1 010e 	sub.w	r1, r1, lr
 801ba3a:	4464      	add	r4, ip
 801ba3c:	4642      	mov	r2, r8
 801ba3e:	ea4f 7ed1 	mov.w	lr, r1, lsr #31
 801ba42:	3f01      	subs	r7, #1
 801ba44:	eb0e 0343 	add.w	r3, lr, r3, lsl #1
 801ba48:	ea4f 0141 	mov.w	r1, r1, lsl #1
 801ba4c:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 801ba50:	d1dc      	bne.n	801ba0c <__ieee754_sqrt+0xdc>
 801ba52:	4319      	orrs	r1, r3
 801ba54:	d01b      	beq.n	801ba8e <__ieee754_sqrt+0x15e>
 801ba56:	f8df a084 	ldr.w	sl, [pc, #132]	@ 801badc <__ieee754_sqrt+0x1ac>
 801ba5a:	f8df b084 	ldr.w	fp, [pc, #132]	@ 801bae0 <__ieee754_sqrt+0x1b0>
 801ba5e:	e9da 0100 	ldrd	r0, r1, [sl]
 801ba62:	e9db 2300 	ldrd	r2, r3, [fp]
 801ba66:	f7e4 fc1f 	bl	80002a8 <__aeabi_dsub>
 801ba6a:	e9da 8900 	ldrd	r8, r9, [sl]
 801ba6e:	4602      	mov	r2, r0
 801ba70:	460b      	mov	r3, r1
 801ba72:	4640      	mov	r0, r8
 801ba74:	4649      	mov	r1, r9
 801ba76:	f7e5 f84b 	bl	8000b10 <__aeabi_dcmple>
 801ba7a:	b140      	cbz	r0, 801ba8e <__ieee754_sqrt+0x15e>
 801ba7c:	f1b4 3fff 	cmp.w	r4, #4294967295	@ 0xffffffff
 801ba80:	e9da 0100 	ldrd	r0, r1, [sl]
 801ba84:	e9db 2300 	ldrd	r2, r3, [fp]
 801ba88:	d111      	bne.n	801baae <__ieee754_sqrt+0x17e>
 801ba8a:	3601      	adds	r6, #1
 801ba8c:	463c      	mov	r4, r7
 801ba8e:	1072      	asrs	r2, r6, #1
 801ba90:	0863      	lsrs	r3, r4, #1
 801ba92:	07f1      	lsls	r1, r6, #31
 801ba94:	f102 527f 	add.w	r2, r2, #1069547520	@ 0x3fc00000
 801ba98:	f502 1200 	add.w	r2, r2, #2097152	@ 0x200000
 801ba9c:	bf48      	it	mi
 801ba9e:	f043 4300 	orrmi.w	r3, r3, #2147483648	@ 0x80000000
 801baa2:	eb02 5105 	add.w	r1, r2, r5, lsl #20
 801baa6:	4618      	mov	r0, r3
 801baa8:	e756      	b.n	801b958 <__ieee754_sqrt+0x28>
 801baaa:	4690      	mov	r8, r2
 801baac:	e7be      	b.n	801ba2c <__ieee754_sqrt+0xfc>
 801baae:	f7e4 fbfd 	bl	80002ac <__adddf3>
 801bab2:	e9da 8900 	ldrd	r8, r9, [sl]
 801bab6:	4602      	mov	r2, r0
 801bab8:	460b      	mov	r3, r1
 801baba:	4640      	mov	r0, r8
 801babc:	4649      	mov	r1, r9
 801babe:	f7e5 f81d 	bl	8000afc <__aeabi_dcmplt>
 801bac2:	b120      	cbz	r0, 801bace <__ieee754_sqrt+0x19e>
 801bac4:	1ca0      	adds	r0, r4, #2
 801bac6:	bf08      	it	eq
 801bac8:	3601      	addeq	r6, #1
 801baca:	3402      	adds	r4, #2
 801bacc:	e7df      	b.n	801ba8e <__ieee754_sqrt+0x15e>
 801bace:	1c63      	adds	r3, r4, #1
 801bad0:	f023 0401 	bic.w	r4, r3, #1
 801bad4:	e7db      	b.n	801ba8e <__ieee754_sqrt+0x15e>
 801bad6:	bf00      	nop
 801bad8:	7ff00000 	.word	0x7ff00000
 801badc:	20000160 	.word	0x20000160
 801bae0:	20000158 	.word	0x20000158

0801bae4 <_init>:
 801bae4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801bae6:	bf00      	nop
 801bae8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801baea:	bc08      	pop	{r3}
 801baec:	469e      	mov	lr, r3
 801baee:	4770      	bx	lr

0801baf0 <_fini>:
 801baf0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801baf2:	bf00      	nop
 801baf4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801baf6:	bc08      	pop	{r3}
 801baf8:	469e      	mov	lr, r3
 801bafa:	4770      	bx	lr
