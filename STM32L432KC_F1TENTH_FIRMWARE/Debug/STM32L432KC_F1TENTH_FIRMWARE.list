
STM32L432KC_F1TENTH_FIRMWARE.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001d19c  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000ff0  0801d330  0801d330  0001e330  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801e320  0801e320  00020310  2**0
                  CONTENTS
  4 .ARM          00000008  0801e320  0801e320  0001f320  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801e328  0801e328  00020310  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  0801e328  0801e328  0001f328  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0801e330  0801e330  0001f330  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000310  20000000  0801e334  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000c09c  20000310  0801e644  00020310  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  2000c3ac  0801e644  000203ac  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020310  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002a7b3  00000000  00000000  00020340  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00005a84  00000000  00000000  0004aaf3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001e48  00000000  00000000  00050578  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  00029500  00000000  00000000  000523c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   000290cf  00000000  00000000  0007b8c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    000e4786  00000000  00000000  000a498f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .comment      00000076  00000000  00000000  00189115  2**0
                  CONTENTS, READONLY
 19 .debug_rnglists 0000174b  00000000  00000000  0018918b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00009070  00000000  00000000  0018a8d8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000071  00000000  00000000  00193948  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000310 	.word	0x20000310
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0801d314 	.word	0x0801d314

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000314 	.word	0x20000314
 80001cc:	0801d314 	.word	0x0801d314

080001d0 <strcmp>:
 80001d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d8:	2a01      	cmp	r2, #1
 80001da:	bf28      	it	cs
 80001dc:	429a      	cmpcs	r2, r3
 80001de:	d0f7      	beq.n	80001d0 <strcmp>
 80001e0:	1ad0      	subs	r0, r2, r3
 80001e2:	4770      	bx	lr

080001e4 <strlen>:
 80001e4:	4603      	mov	r3, r0
 80001e6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ea:	2a00      	cmp	r2, #0
 80001ec:	d1fb      	bne.n	80001e6 <strlen+0x2>
 80001ee:	1a18      	subs	r0, r3, r0
 80001f0:	3801      	subs	r0, #1
 80001f2:	4770      	bx	lr
	...

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	@ 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	3c01      	subs	r4, #1
 80003dc:	bf28      	it	cs
 80003de:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003e2:	d2e9      	bcs.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_dmul>:
 8000618:	b570      	push	{r4, r5, r6, lr}
 800061a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800061e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000622:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000626:	bf1d      	ittte	ne
 8000628:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800062c:	ea94 0f0c 	teqne	r4, ip
 8000630:	ea95 0f0c 	teqne	r5, ip
 8000634:	f000 f8de 	bleq	80007f4 <__aeabi_dmul+0x1dc>
 8000638:	442c      	add	r4, r5
 800063a:	ea81 0603 	eor.w	r6, r1, r3
 800063e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000642:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000646:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800064a:	bf18      	it	ne
 800064c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000654:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000658:	d038      	beq.n	80006cc <__aeabi_dmul+0xb4>
 800065a:	fba0 ce02 	umull	ip, lr, r0, r2
 800065e:	f04f 0500 	mov.w	r5, #0
 8000662:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000666:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800066a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800066e:	f04f 0600 	mov.w	r6, #0
 8000672:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000676:	f09c 0f00 	teq	ip, #0
 800067a:	bf18      	it	ne
 800067c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000680:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000684:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000688:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800068c:	d204      	bcs.n	8000698 <__aeabi_dmul+0x80>
 800068e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000692:	416d      	adcs	r5, r5
 8000694:	eb46 0606 	adc.w	r6, r6, r6
 8000698:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800069c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ac:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006b0:	bf88      	it	hi
 80006b2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006b6:	d81e      	bhi.n	80006f6 <__aeabi_dmul+0xde>
 80006b8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006bc:	bf08      	it	eq
 80006be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006c2:	f150 0000 	adcs.w	r0, r0, #0
 80006c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006d0:	ea46 0101 	orr.w	r1, r6, r1
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	ea81 0103 	eor.w	r1, r1, r3
 80006dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e0:	bfc2      	ittt	gt
 80006e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	popgt	{r4, r5, r6, pc}
 80006ec:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006f0:	f04f 0e00 	mov.w	lr, #0
 80006f4:	3c01      	subs	r4, #1
 80006f6:	f300 80ab 	bgt.w	8000850 <__aeabi_dmul+0x238>
 80006fa:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006fe:	bfde      	ittt	le
 8000700:	2000      	movle	r0, #0
 8000702:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000706:	bd70      	pople	{r4, r5, r6, pc}
 8000708:	f1c4 0400 	rsb	r4, r4, #0
 800070c:	3c20      	subs	r4, #32
 800070e:	da35      	bge.n	800077c <__aeabi_dmul+0x164>
 8000710:	340c      	adds	r4, #12
 8000712:	dc1b      	bgt.n	800074c <__aeabi_dmul+0x134>
 8000714:	f104 0414 	add.w	r4, r4, #20
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f305 	lsl.w	r3, r0, r5
 8000720:	fa20 f004 	lsr.w	r0, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000734:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000738:	fa21 f604 	lsr.w	r6, r1, r4
 800073c:	eb42 0106 	adc.w	r1, r2, r6
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 040c 	rsb	r4, r4, #12
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f304 	lsl.w	r3, r0, r4
 8000758:	fa20 f005 	lsr.w	r0, r0, r5
 800075c:	fa01 f204 	lsl.w	r2, r1, r4
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800076c:	f141 0100 	adc.w	r1, r1, #0
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 0520 	rsb	r5, r4, #32
 8000780:	fa00 f205 	lsl.w	r2, r0, r5
 8000784:	ea4e 0e02 	orr.w	lr, lr, r2
 8000788:	fa20 f304 	lsr.w	r3, r0, r4
 800078c:	fa01 f205 	lsl.w	r2, r1, r5
 8000790:	ea43 0302 	orr.w	r3, r3, r2
 8000794:	fa21 f004 	lsr.w	r0, r1, r4
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800079c:	fa21 f204 	lsr.w	r2, r1, r4
 80007a0:	ea20 0002 	bic.w	r0, r0, r2
 80007a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f094 0f00 	teq	r4, #0
 80007b8:	d10f      	bne.n	80007da <__aeabi_dmul+0x1c2>
 80007ba:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007be:	0040      	lsls	r0, r0, #1
 80007c0:	eb41 0101 	adc.w	r1, r1, r1
 80007c4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3c01      	subeq	r4, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1a6>
 80007ce:	ea41 0106 	orr.w	r1, r1, r6
 80007d2:	f095 0f00 	teq	r5, #0
 80007d6:	bf18      	it	ne
 80007d8:	4770      	bxne	lr
 80007da:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007de:	0052      	lsls	r2, r2, #1
 80007e0:	eb43 0303 	adc.w	r3, r3, r3
 80007e4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3d01      	subeq	r5, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1c6>
 80007ee:	ea43 0306 	orr.w	r3, r3, r6
 80007f2:	4770      	bx	lr
 80007f4:	ea94 0f0c 	teq	r4, ip
 80007f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007fc:	bf18      	it	ne
 80007fe:	ea95 0f0c 	teqne	r5, ip
 8000802:	d00c      	beq.n	800081e <__aeabi_dmul+0x206>
 8000804:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080e:	d1d1      	bne.n	80007b4 <__aeabi_dmul+0x19c>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000818:	f04f 0000 	mov.w	r0, #0
 800081c:	bd70      	pop	{r4, r5, r6, pc}
 800081e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000822:	bf06      	itte	eq
 8000824:	4610      	moveq	r0, r2
 8000826:	4619      	moveq	r1, r3
 8000828:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082c:	d019      	beq.n	8000862 <__aeabi_dmul+0x24a>
 800082e:	ea94 0f0c 	teq	r4, ip
 8000832:	d102      	bne.n	800083a <__aeabi_dmul+0x222>
 8000834:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000838:	d113      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800083a:	ea95 0f0c 	teq	r5, ip
 800083e:	d105      	bne.n	800084c <__aeabi_dmul+0x234>
 8000840:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000844:	bf1c      	itt	ne
 8000846:	4610      	movne	r0, r2
 8000848:	4619      	movne	r1, r3
 800084a:	d10a      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800084c:	ea81 0103 	eor.w	r1, r1, r3
 8000850:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000854:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000858:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	bd70      	pop	{r4, r5, r6, pc}
 8000862:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000866:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800086a:	bd70      	pop	{r4, r5, r6, pc}

0800086c <__aeabi_ddiv>:
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000872:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000876:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800087a:	bf1d      	ittte	ne
 800087c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000880:	ea94 0f0c 	teqne	r4, ip
 8000884:	ea95 0f0c 	teqne	r5, ip
 8000888:	f000 f8a7 	bleq	80009da <__aeabi_ddiv+0x16e>
 800088c:	eba4 0405 	sub.w	r4, r4, r5
 8000890:	ea81 0e03 	eor.w	lr, r1, r3
 8000894:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000898:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800089c:	f000 8088 	beq.w	80009b0 <__aeabi_ddiv+0x144>
 80008a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008c4:	429d      	cmp	r5, r3
 80008c6:	bf08      	it	eq
 80008c8:	4296      	cmpeq	r6, r2
 80008ca:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ce:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008d2:	d202      	bcs.n	80008da <__aeabi_ddiv+0x6e>
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	1ab6      	subs	r6, r6, r2
 80008dc:	eb65 0503 	sbc.w	r5, r5, r3
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ea:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000948:	ea55 0e06 	orrs.w	lr, r5, r6
 800094c:	d018      	beq.n	8000980 <__aeabi_ddiv+0x114>
 800094e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000952:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000956:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800095a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800095e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000962:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000966:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800096a:	d1c0      	bne.n	80008ee <__aeabi_ddiv+0x82>
 800096c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000970:	d10b      	bne.n	800098a <__aeabi_ddiv+0x11e>
 8000972:	ea41 0100 	orr.w	r1, r1, r0
 8000976:	f04f 0000 	mov.w	r0, #0
 800097a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800097e:	e7b6      	b.n	80008ee <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000984:	bf04      	itt	eq
 8000986:	4301      	orreq	r1, r0
 8000988:	2000      	moveq	r0, #0
 800098a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800098e:	bf88      	it	hi
 8000990:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000994:	f63f aeaf 	bhi.w	80006f6 <__aeabi_dmul+0xde>
 8000998:	ebb5 0c03 	subs.w	ip, r5, r3
 800099c:	bf04      	itt	eq
 800099e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009a6:	f150 0000 	adcs.w	r0, r0, #0
 80009aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	pop	{r4, r5, r6, pc}
 80009b0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009bc:	bfc2      	ittt	gt
 80009be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	popgt	{r4, r5, r6, pc}
 80009c8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009cc:	f04f 0e00 	mov.w	lr, #0
 80009d0:	3c01      	subs	r4, #1
 80009d2:	e690      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009d4:	ea45 0e06 	orr.w	lr, r5, r6
 80009d8:	e68d      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009de:	ea94 0f0c 	teq	r4, ip
 80009e2:	bf08      	it	eq
 80009e4:	ea95 0f0c 	teqeq	r5, ip
 80009e8:	f43f af3b 	beq.w	8000862 <__aeabi_dmul+0x24a>
 80009ec:	ea94 0f0c 	teq	r4, ip
 80009f0:	d10a      	bne.n	8000a08 <__aeabi_ddiv+0x19c>
 80009f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009f6:	f47f af34 	bne.w	8000862 <__aeabi_dmul+0x24a>
 80009fa:	ea95 0f0c 	teq	r5, ip
 80009fe:	f47f af25 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a02:	4610      	mov	r0, r2
 8000a04:	4619      	mov	r1, r3
 8000a06:	e72c      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a08:	ea95 0f0c 	teq	r5, ip
 8000a0c:	d106      	bne.n	8000a1c <__aeabi_ddiv+0x1b0>
 8000a0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a12:	f43f aefd 	beq.w	8000810 <__aeabi_dmul+0x1f8>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e722      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a20:	bf18      	it	ne
 8000a22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a26:	f47f aec5 	bne.w	80007b4 <__aeabi_dmul+0x19c>
 8000a2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a2e:	f47f af0d 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a36:	f47f aeeb 	bne.w	8000810 <__aeabi_dmul+0x1f8>
 8000a3a:	e712      	b.n	8000862 <__aeabi_dmul+0x24a>

08000a3c <__gedf2>:
 8000a3c:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 8000a40:	e006      	b.n	8000a50 <__cmpdf2+0x4>
 8000a42:	bf00      	nop

08000a44 <__ledf2>:
 8000a44:	f04f 0c01 	mov.w	ip, #1
 8000a48:	e002      	b.n	8000a50 <__cmpdf2+0x4>
 8000a4a:	bf00      	nop

08000a4c <__cmpdf2>:
 8000a4c:	f04f 0c01 	mov.w	ip, #1
 8000a50:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a66:	d01b      	beq.n	8000aa0 <__cmpdf2+0x54>
 8000a68:	b001      	add	sp, #4
 8000a6a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a6e:	bf0c      	ite	eq
 8000a70:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a74:	ea91 0f03 	teqne	r1, r3
 8000a78:	bf02      	ittt	eq
 8000a7a:	ea90 0f02 	teqeq	r0, r2
 8000a7e:	2000      	moveq	r0, #0
 8000a80:	4770      	bxeq	lr
 8000a82:	f110 0f00 	cmn.w	r0, #0
 8000a86:	ea91 0f03 	teq	r1, r3
 8000a8a:	bf58      	it	pl
 8000a8c:	4299      	cmppl	r1, r3
 8000a8e:	bf08      	it	eq
 8000a90:	4290      	cmpeq	r0, r2
 8000a92:	bf2c      	ite	cs
 8000a94:	17d8      	asrcs	r0, r3, #31
 8000a96:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a9a:	f040 0001 	orr.w	r0, r0, #1
 8000a9e:	4770      	bx	lr
 8000aa0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d102      	bne.n	8000ab0 <__cmpdf2+0x64>
 8000aaa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aae:	d107      	bne.n	8000ac0 <__cmpdf2+0x74>
 8000ab0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d1d6      	bne.n	8000a68 <__cmpdf2+0x1c>
 8000aba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000abe:	d0d3      	beq.n	8000a68 <__cmpdf2+0x1c>
 8000ac0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdrcmple>:
 8000ac8:	4684      	mov	ip, r0
 8000aca:	4610      	mov	r0, r2
 8000acc:	4662      	mov	r2, ip
 8000ace:	468c      	mov	ip, r1
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4663      	mov	r3, ip
 8000ad4:	e000      	b.n	8000ad8 <__aeabi_cdcmpeq>
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdcmpeq>:
 8000ad8:	b501      	push	{r0, lr}
 8000ada:	f7ff ffb7 	bl	8000a4c <__cmpdf2>
 8000ade:	2800      	cmp	r0, #0
 8000ae0:	bf48      	it	mi
 8000ae2:	f110 0f00 	cmnmi.w	r0, #0
 8000ae6:	bd01      	pop	{r0, pc}

08000ae8 <__aeabi_dcmpeq>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff fff4 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000af0:	bf0c      	ite	eq
 8000af2:	2001      	moveq	r0, #1
 8000af4:	2000      	movne	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmplt>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffea 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b04:	bf34      	ite	cc
 8000b06:	2001      	movcc	r0, #1
 8000b08:	2000      	movcs	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmple>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffe0 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b18:	bf94      	ite	ls
 8000b1a:	2001      	movls	r0, #1
 8000b1c:	2000      	movhi	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmpge>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffce 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b2c:	bf94      	ite	ls
 8000b2e:	2001      	movls	r0, #1
 8000b30:	2000      	movhi	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmpgt>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffc4 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b40:	bf34      	ite	cc
 8000b42:	2001      	movcc	r0, #1
 8000b44:	2000      	movcs	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmpun>:
 8000b4c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x10>
 8000b56:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b5a:	d10a      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x20>
 8000b66:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b6a:	d102      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b6c:	f04f 0000 	mov.w	r0, #0
 8000b70:	4770      	bx	lr
 8000b72:	f04f 0001 	mov.w	r0, #1
 8000b76:	4770      	bx	lr

08000b78 <__aeabi_d2uiz>:
 8000b78:	004a      	lsls	r2, r1, #1
 8000b7a:	d211      	bcs.n	8000ba0 <__aeabi_d2uiz+0x28>
 8000b7c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b80:	d211      	bcs.n	8000ba6 <__aeabi_d2uiz+0x2e>
 8000b82:	d50d      	bpl.n	8000ba0 <__aeabi_d2uiz+0x28>
 8000b84:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b88:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b8c:	d40e      	bmi.n	8000bac <__aeabi_d2uiz+0x34>
 8000b8e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b92:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b96:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b9a:	fa23 f002 	lsr.w	r0, r3, r2
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000baa:	d102      	bne.n	8000bb2 <__aeabi_d2uiz+0x3a>
 8000bac:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000bb0:	4770      	bx	lr
 8000bb2:	f04f 0000 	mov.w	r0, #0
 8000bb6:	4770      	bx	lr

08000bb8 <__aeabi_d2f>:
 8000bb8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bbc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000bc0:	bf24      	itt	cs
 8000bc2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000bc6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000bca:	d90d      	bls.n	8000be8 <__aeabi_d2f+0x30>
 8000bcc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000bd0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bd4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bd8:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000bdc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000be0:	bf08      	it	eq
 8000be2:	f020 0001 	biceq.w	r0, r0, #1
 8000be6:	4770      	bx	lr
 8000be8:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000bec:	d121      	bne.n	8000c32 <__aeabi_d2f+0x7a>
 8000bee:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000bf2:	bfbc      	itt	lt
 8000bf4:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000bf8:	4770      	bxlt	lr
 8000bfa:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000bfe:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c02:	f1c2 0218 	rsb	r2, r2, #24
 8000c06:	f1c2 0c20 	rsb	ip, r2, #32
 8000c0a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c0e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c12:	bf18      	it	ne
 8000c14:	f040 0001 	orrne.w	r0, r0, #1
 8000c18:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c1c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c20:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c24:	ea40 000c 	orr.w	r0, r0, ip
 8000c28:	fa23 f302 	lsr.w	r3, r3, r2
 8000c2c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c30:	e7cc      	b.n	8000bcc <__aeabi_d2f+0x14>
 8000c32:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c36:	d107      	bne.n	8000c48 <__aeabi_d2f+0x90>
 8000c38:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c3c:	bf1e      	ittt	ne
 8000c3e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c42:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c46:	4770      	bxne	lr
 8000c48:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c4c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c50:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c54:	4770      	bx	lr
 8000c56:	bf00      	nop

08000c58 <__aeabi_ldivmod>:
 8000c58:	b97b      	cbnz	r3, 8000c7a <__aeabi_ldivmod+0x22>
 8000c5a:	b972      	cbnz	r2, 8000c7a <__aeabi_ldivmod+0x22>
 8000c5c:	2900      	cmp	r1, #0
 8000c5e:	bfbe      	ittt	lt
 8000c60:	2000      	movlt	r0, #0
 8000c62:	f04f 4100 	movlt.w	r1, #2147483648	@ 0x80000000
 8000c66:	e006      	blt.n	8000c76 <__aeabi_ldivmod+0x1e>
 8000c68:	bf08      	it	eq
 8000c6a:	2800      	cmpeq	r0, #0
 8000c6c:	bf1c      	itt	ne
 8000c6e:	f06f 4100 	mvnne.w	r1, #2147483648	@ 0x80000000
 8000c72:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000c76:	f000 b9b5 	b.w	8000fe4 <__aeabi_idiv0>
 8000c7a:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c7e:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c82:	2900      	cmp	r1, #0
 8000c84:	db09      	blt.n	8000c9a <__aeabi_ldivmod+0x42>
 8000c86:	2b00      	cmp	r3, #0
 8000c88:	db1a      	blt.n	8000cc0 <__aeabi_ldivmod+0x68>
 8000c8a:	f000 f84d 	bl	8000d28 <__udivmoddi4>
 8000c8e:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c92:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c96:	b004      	add	sp, #16
 8000c98:	4770      	bx	lr
 8000c9a:	4240      	negs	r0, r0
 8000c9c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ca0:	2b00      	cmp	r3, #0
 8000ca2:	db1b      	blt.n	8000cdc <__aeabi_ldivmod+0x84>
 8000ca4:	f000 f840 	bl	8000d28 <__udivmoddi4>
 8000ca8:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cac:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb0:	b004      	add	sp, #16
 8000cb2:	4240      	negs	r0, r0
 8000cb4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cb8:	4252      	negs	r2, r2
 8000cba:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000cbe:	4770      	bx	lr
 8000cc0:	4252      	negs	r2, r2
 8000cc2:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000cc6:	f000 f82f 	bl	8000d28 <__udivmoddi4>
 8000cca:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cce:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cd2:	b004      	add	sp, #16
 8000cd4:	4240      	negs	r0, r0
 8000cd6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cda:	4770      	bx	lr
 8000cdc:	4252      	negs	r2, r2
 8000cde:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000ce2:	f000 f821 	bl	8000d28 <__udivmoddi4>
 8000ce6:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cea:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cee:	b004      	add	sp, #16
 8000cf0:	4252      	negs	r2, r2
 8000cf2:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000cf6:	4770      	bx	lr

08000cf8 <__aeabi_uldivmod>:
 8000cf8:	b953      	cbnz	r3, 8000d10 <__aeabi_uldivmod+0x18>
 8000cfa:	b94a      	cbnz	r2, 8000d10 <__aeabi_uldivmod+0x18>
 8000cfc:	2900      	cmp	r1, #0
 8000cfe:	bf08      	it	eq
 8000d00:	2800      	cmpeq	r0, #0
 8000d02:	bf1c      	itt	ne
 8000d04:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000d08:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000d0c:	f000 b96a 	b.w	8000fe4 <__aeabi_idiv0>
 8000d10:	f1ad 0c08 	sub.w	ip, sp, #8
 8000d14:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000d18:	f000 f806 	bl	8000d28 <__udivmoddi4>
 8000d1c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d20:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d24:	b004      	add	sp, #16
 8000d26:	4770      	bx	lr

08000d28 <__udivmoddi4>:
 8000d28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d2c:	9d08      	ldr	r5, [sp, #32]
 8000d2e:	460c      	mov	r4, r1
 8000d30:	2b00      	cmp	r3, #0
 8000d32:	d14e      	bne.n	8000dd2 <__udivmoddi4+0xaa>
 8000d34:	4694      	mov	ip, r2
 8000d36:	458c      	cmp	ip, r1
 8000d38:	4686      	mov	lr, r0
 8000d3a:	fab2 f282 	clz	r2, r2
 8000d3e:	d962      	bls.n	8000e06 <__udivmoddi4+0xde>
 8000d40:	b14a      	cbz	r2, 8000d56 <__udivmoddi4+0x2e>
 8000d42:	f1c2 0320 	rsb	r3, r2, #32
 8000d46:	4091      	lsls	r1, r2
 8000d48:	fa20 f303 	lsr.w	r3, r0, r3
 8000d4c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d50:	4319      	orrs	r1, r3
 8000d52:	fa00 fe02 	lsl.w	lr, r0, r2
 8000d56:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d5a:	fa1f f68c 	uxth.w	r6, ip
 8000d5e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000d62:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d66:	fb07 1114 	mls	r1, r7, r4, r1
 8000d6a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d6e:	fb04 f106 	mul.w	r1, r4, r6
 8000d72:	4299      	cmp	r1, r3
 8000d74:	d90a      	bls.n	8000d8c <__udivmoddi4+0x64>
 8000d76:	eb1c 0303 	adds.w	r3, ip, r3
 8000d7a:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000d7e:	f080 8112 	bcs.w	8000fa6 <__udivmoddi4+0x27e>
 8000d82:	4299      	cmp	r1, r3
 8000d84:	f240 810f 	bls.w	8000fa6 <__udivmoddi4+0x27e>
 8000d88:	3c02      	subs	r4, #2
 8000d8a:	4463      	add	r3, ip
 8000d8c:	1a59      	subs	r1, r3, r1
 8000d8e:	fa1f f38e 	uxth.w	r3, lr
 8000d92:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d96:	fb07 1110 	mls	r1, r7, r0, r1
 8000d9a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d9e:	fb00 f606 	mul.w	r6, r0, r6
 8000da2:	429e      	cmp	r6, r3
 8000da4:	d90a      	bls.n	8000dbc <__udivmoddi4+0x94>
 8000da6:	eb1c 0303 	adds.w	r3, ip, r3
 8000daa:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8000dae:	f080 80fc 	bcs.w	8000faa <__udivmoddi4+0x282>
 8000db2:	429e      	cmp	r6, r3
 8000db4:	f240 80f9 	bls.w	8000faa <__udivmoddi4+0x282>
 8000db8:	4463      	add	r3, ip
 8000dba:	3802      	subs	r0, #2
 8000dbc:	1b9b      	subs	r3, r3, r6
 8000dbe:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000dc2:	2100      	movs	r1, #0
 8000dc4:	b11d      	cbz	r5, 8000dce <__udivmoddi4+0xa6>
 8000dc6:	40d3      	lsrs	r3, r2
 8000dc8:	2200      	movs	r2, #0
 8000dca:	e9c5 3200 	strd	r3, r2, [r5]
 8000dce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dd2:	428b      	cmp	r3, r1
 8000dd4:	d905      	bls.n	8000de2 <__udivmoddi4+0xba>
 8000dd6:	b10d      	cbz	r5, 8000ddc <__udivmoddi4+0xb4>
 8000dd8:	e9c5 0100 	strd	r0, r1, [r5]
 8000ddc:	2100      	movs	r1, #0
 8000dde:	4608      	mov	r0, r1
 8000de0:	e7f5      	b.n	8000dce <__udivmoddi4+0xa6>
 8000de2:	fab3 f183 	clz	r1, r3
 8000de6:	2900      	cmp	r1, #0
 8000de8:	d146      	bne.n	8000e78 <__udivmoddi4+0x150>
 8000dea:	42a3      	cmp	r3, r4
 8000dec:	d302      	bcc.n	8000df4 <__udivmoddi4+0xcc>
 8000dee:	4290      	cmp	r0, r2
 8000df0:	f0c0 80f0 	bcc.w	8000fd4 <__udivmoddi4+0x2ac>
 8000df4:	1a86      	subs	r6, r0, r2
 8000df6:	eb64 0303 	sbc.w	r3, r4, r3
 8000dfa:	2001      	movs	r0, #1
 8000dfc:	2d00      	cmp	r5, #0
 8000dfe:	d0e6      	beq.n	8000dce <__udivmoddi4+0xa6>
 8000e00:	e9c5 6300 	strd	r6, r3, [r5]
 8000e04:	e7e3      	b.n	8000dce <__udivmoddi4+0xa6>
 8000e06:	2a00      	cmp	r2, #0
 8000e08:	f040 8090 	bne.w	8000f2c <__udivmoddi4+0x204>
 8000e0c:	eba1 040c 	sub.w	r4, r1, ip
 8000e10:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e14:	fa1f f78c 	uxth.w	r7, ip
 8000e18:	2101      	movs	r1, #1
 8000e1a:	fbb4 f6f8 	udiv	r6, r4, r8
 8000e1e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000e22:	fb08 4416 	mls	r4, r8, r6, r4
 8000e26:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e2a:	fb07 f006 	mul.w	r0, r7, r6
 8000e2e:	4298      	cmp	r0, r3
 8000e30:	d908      	bls.n	8000e44 <__udivmoddi4+0x11c>
 8000e32:	eb1c 0303 	adds.w	r3, ip, r3
 8000e36:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 8000e3a:	d202      	bcs.n	8000e42 <__udivmoddi4+0x11a>
 8000e3c:	4298      	cmp	r0, r3
 8000e3e:	f200 80cd 	bhi.w	8000fdc <__udivmoddi4+0x2b4>
 8000e42:	4626      	mov	r6, r4
 8000e44:	1a1c      	subs	r4, r3, r0
 8000e46:	fa1f f38e 	uxth.w	r3, lr
 8000e4a:	fbb4 f0f8 	udiv	r0, r4, r8
 8000e4e:	fb08 4410 	mls	r4, r8, r0, r4
 8000e52:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e56:	fb00 f707 	mul.w	r7, r0, r7
 8000e5a:	429f      	cmp	r7, r3
 8000e5c:	d908      	bls.n	8000e70 <__udivmoddi4+0x148>
 8000e5e:	eb1c 0303 	adds.w	r3, ip, r3
 8000e62:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 8000e66:	d202      	bcs.n	8000e6e <__udivmoddi4+0x146>
 8000e68:	429f      	cmp	r7, r3
 8000e6a:	f200 80b0 	bhi.w	8000fce <__udivmoddi4+0x2a6>
 8000e6e:	4620      	mov	r0, r4
 8000e70:	1bdb      	subs	r3, r3, r7
 8000e72:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000e76:	e7a5      	b.n	8000dc4 <__udivmoddi4+0x9c>
 8000e78:	f1c1 0620 	rsb	r6, r1, #32
 8000e7c:	408b      	lsls	r3, r1
 8000e7e:	fa22 f706 	lsr.w	r7, r2, r6
 8000e82:	431f      	orrs	r7, r3
 8000e84:	fa20 fc06 	lsr.w	ip, r0, r6
 8000e88:	fa04 f301 	lsl.w	r3, r4, r1
 8000e8c:	ea43 030c 	orr.w	r3, r3, ip
 8000e90:	40f4      	lsrs	r4, r6
 8000e92:	fa00 f801 	lsl.w	r8, r0, r1
 8000e96:	0c38      	lsrs	r0, r7, #16
 8000e98:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000e9c:	fbb4 fef0 	udiv	lr, r4, r0
 8000ea0:	fa1f fc87 	uxth.w	ip, r7
 8000ea4:	fb00 441e 	mls	r4, r0, lr, r4
 8000ea8:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000eac:	fb0e f90c 	mul.w	r9, lr, ip
 8000eb0:	45a1      	cmp	r9, r4
 8000eb2:	fa02 f201 	lsl.w	r2, r2, r1
 8000eb6:	d90a      	bls.n	8000ece <__udivmoddi4+0x1a6>
 8000eb8:	193c      	adds	r4, r7, r4
 8000eba:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8000ebe:	f080 8084 	bcs.w	8000fca <__udivmoddi4+0x2a2>
 8000ec2:	45a1      	cmp	r9, r4
 8000ec4:	f240 8081 	bls.w	8000fca <__udivmoddi4+0x2a2>
 8000ec8:	f1ae 0e02 	sub.w	lr, lr, #2
 8000ecc:	443c      	add	r4, r7
 8000ece:	eba4 0409 	sub.w	r4, r4, r9
 8000ed2:	fa1f f983 	uxth.w	r9, r3
 8000ed6:	fbb4 f3f0 	udiv	r3, r4, r0
 8000eda:	fb00 4413 	mls	r4, r0, r3, r4
 8000ede:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000ee2:	fb03 fc0c 	mul.w	ip, r3, ip
 8000ee6:	45a4      	cmp	ip, r4
 8000ee8:	d907      	bls.n	8000efa <__udivmoddi4+0x1d2>
 8000eea:	193c      	adds	r4, r7, r4
 8000eec:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 8000ef0:	d267      	bcs.n	8000fc2 <__udivmoddi4+0x29a>
 8000ef2:	45a4      	cmp	ip, r4
 8000ef4:	d965      	bls.n	8000fc2 <__udivmoddi4+0x29a>
 8000ef6:	3b02      	subs	r3, #2
 8000ef8:	443c      	add	r4, r7
 8000efa:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000efe:	fba0 9302 	umull	r9, r3, r0, r2
 8000f02:	eba4 040c 	sub.w	r4, r4, ip
 8000f06:	429c      	cmp	r4, r3
 8000f08:	46ce      	mov	lr, r9
 8000f0a:	469c      	mov	ip, r3
 8000f0c:	d351      	bcc.n	8000fb2 <__udivmoddi4+0x28a>
 8000f0e:	d04e      	beq.n	8000fae <__udivmoddi4+0x286>
 8000f10:	b155      	cbz	r5, 8000f28 <__udivmoddi4+0x200>
 8000f12:	ebb8 030e 	subs.w	r3, r8, lr
 8000f16:	eb64 040c 	sbc.w	r4, r4, ip
 8000f1a:	fa04 f606 	lsl.w	r6, r4, r6
 8000f1e:	40cb      	lsrs	r3, r1
 8000f20:	431e      	orrs	r6, r3
 8000f22:	40cc      	lsrs	r4, r1
 8000f24:	e9c5 6400 	strd	r6, r4, [r5]
 8000f28:	2100      	movs	r1, #0
 8000f2a:	e750      	b.n	8000dce <__udivmoddi4+0xa6>
 8000f2c:	f1c2 0320 	rsb	r3, r2, #32
 8000f30:	fa20 f103 	lsr.w	r1, r0, r3
 8000f34:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f38:	fa24 f303 	lsr.w	r3, r4, r3
 8000f3c:	4094      	lsls	r4, r2
 8000f3e:	430c      	orrs	r4, r1
 8000f40:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000f44:	fa00 fe02 	lsl.w	lr, r0, r2
 8000f48:	fa1f f78c 	uxth.w	r7, ip
 8000f4c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000f50:	fb08 3110 	mls	r1, r8, r0, r3
 8000f54:	0c23      	lsrs	r3, r4, #16
 8000f56:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000f5a:	fb00 f107 	mul.w	r1, r0, r7
 8000f5e:	4299      	cmp	r1, r3
 8000f60:	d908      	bls.n	8000f74 <__udivmoddi4+0x24c>
 8000f62:	eb1c 0303 	adds.w	r3, ip, r3
 8000f66:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 8000f6a:	d22c      	bcs.n	8000fc6 <__udivmoddi4+0x29e>
 8000f6c:	4299      	cmp	r1, r3
 8000f6e:	d92a      	bls.n	8000fc6 <__udivmoddi4+0x29e>
 8000f70:	3802      	subs	r0, #2
 8000f72:	4463      	add	r3, ip
 8000f74:	1a5b      	subs	r3, r3, r1
 8000f76:	b2a4      	uxth	r4, r4
 8000f78:	fbb3 f1f8 	udiv	r1, r3, r8
 8000f7c:	fb08 3311 	mls	r3, r8, r1, r3
 8000f80:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000f84:	fb01 f307 	mul.w	r3, r1, r7
 8000f88:	42a3      	cmp	r3, r4
 8000f8a:	d908      	bls.n	8000f9e <__udivmoddi4+0x276>
 8000f8c:	eb1c 0404 	adds.w	r4, ip, r4
 8000f90:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 8000f94:	d213      	bcs.n	8000fbe <__udivmoddi4+0x296>
 8000f96:	42a3      	cmp	r3, r4
 8000f98:	d911      	bls.n	8000fbe <__udivmoddi4+0x296>
 8000f9a:	3902      	subs	r1, #2
 8000f9c:	4464      	add	r4, ip
 8000f9e:	1ae4      	subs	r4, r4, r3
 8000fa0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000fa4:	e739      	b.n	8000e1a <__udivmoddi4+0xf2>
 8000fa6:	4604      	mov	r4, r0
 8000fa8:	e6f0      	b.n	8000d8c <__udivmoddi4+0x64>
 8000faa:	4608      	mov	r0, r1
 8000fac:	e706      	b.n	8000dbc <__udivmoddi4+0x94>
 8000fae:	45c8      	cmp	r8, r9
 8000fb0:	d2ae      	bcs.n	8000f10 <__udivmoddi4+0x1e8>
 8000fb2:	ebb9 0e02 	subs.w	lr, r9, r2
 8000fb6:	eb63 0c07 	sbc.w	ip, r3, r7
 8000fba:	3801      	subs	r0, #1
 8000fbc:	e7a8      	b.n	8000f10 <__udivmoddi4+0x1e8>
 8000fbe:	4631      	mov	r1, r6
 8000fc0:	e7ed      	b.n	8000f9e <__udivmoddi4+0x276>
 8000fc2:	4603      	mov	r3, r0
 8000fc4:	e799      	b.n	8000efa <__udivmoddi4+0x1d2>
 8000fc6:	4630      	mov	r0, r6
 8000fc8:	e7d4      	b.n	8000f74 <__udivmoddi4+0x24c>
 8000fca:	46d6      	mov	lr, sl
 8000fcc:	e77f      	b.n	8000ece <__udivmoddi4+0x1a6>
 8000fce:	4463      	add	r3, ip
 8000fd0:	3802      	subs	r0, #2
 8000fd2:	e74d      	b.n	8000e70 <__udivmoddi4+0x148>
 8000fd4:	4606      	mov	r6, r0
 8000fd6:	4623      	mov	r3, r4
 8000fd8:	4608      	mov	r0, r1
 8000fda:	e70f      	b.n	8000dfc <__udivmoddi4+0xd4>
 8000fdc:	3e02      	subs	r6, #2
 8000fde:	4463      	add	r3, ip
 8000fe0:	e730      	b.n	8000e44 <__udivmoddi4+0x11c>
 8000fe2:	bf00      	nop

08000fe4 <__aeabi_idiv0>:
 8000fe4:	4770      	bx	lr
 8000fe6:	bf00      	nop

08000fe8 <pvPortMallocMicroROS>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMallocMicroROS( size_t xWantedSize )
{
 8000fe8:	b580      	push	{r7, lr}
 8000fea:	b08a      	sub	sp, #40	@ 0x28
 8000fec:	af00      	add	r7, sp, #0
 8000fee:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8000ff0:	2300      	movs	r3, #0
 8000ff2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8000ff4:	f00a fc88 	bl	800b908 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8000ff8:	4b5a      	ldr	r3, [pc, #360]	@ (8001164 <pvPortMallocMicroROS+0x17c>)
 8000ffa:	681b      	ldr	r3, [r3, #0]
 8000ffc:	2b00      	cmp	r3, #0
 8000ffe:	d101      	bne.n	8001004 <pvPortMallocMicroROS+0x1c>
		{
			prvHeapInit();
 8001000:	f000 f986 	bl	8001310 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8001004:	4b58      	ldr	r3, [pc, #352]	@ (8001168 <pvPortMallocMicroROS+0x180>)
 8001006:	681a      	ldr	r2, [r3, #0]
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	4013      	ands	r3, r2
 800100c:	2b00      	cmp	r3, #0
 800100e:	f040 8090 	bne.w	8001132 <pvPortMallocMicroROS+0x14a>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	2b00      	cmp	r3, #0
 8001016:	d01e      	beq.n	8001056 <pvPortMallocMicroROS+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8001018:	2208      	movs	r2, #8
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	4413      	add	r3, r2
 800101e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	f003 0307 	and.w	r3, r3, #7
 8001026:	2b00      	cmp	r3, #0
 8001028:	d015      	beq.n	8001056 <pvPortMallocMicroROS+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	f023 0307 	bic.w	r3, r3, #7
 8001030:	3308      	adds	r3, #8
 8001032:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	f003 0307 	and.w	r3, r3, #7
 800103a:	2b00      	cmp	r3, #0
 800103c:	d00b      	beq.n	8001056 <pvPortMallocMicroROS+0x6e>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800103e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001042:	f383 8811 	msr	BASEPRI, r3
 8001046:	f3bf 8f6f 	isb	sy
 800104a:	f3bf 8f4f 	dsb	sy
 800104e:	617b      	str	r3, [r7, #20]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8001050:	bf00      	nop
 8001052:	bf00      	nop
 8001054:	e7fd      	b.n	8001052 <pvPortMallocMicroROS+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	2b00      	cmp	r3, #0
 800105a:	d06a      	beq.n	8001132 <pvPortMallocMicroROS+0x14a>
 800105c:	4b43      	ldr	r3, [pc, #268]	@ (800116c <pvPortMallocMicroROS+0x184>)
 800105e:	681b      	ldr	r3, [r3, #0]
 8001060:	687a      	ldr	r2, [r7, #4]
 8001062:	429a      	cmp	r2, r3
 8001064:	d865      	bhi.n	8001132 <pvPortMallocMicroROS+0x14a>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8001066:	4b42      	ldr	r3, [pc, #264]	@ (8001170 <pvPortMallocMicroROS+0x188>)
 8001068:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800106a:	4b41      	ldr	r3, [pc, #260]	@ (8001170 <pvPortMallocMicroROS+0x188>)
 800106c:	681b      	ldr	r3, [r3, #0]
 800106e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8001070:	e004      	b.n	800107c <pvPortMallocMicroROS+0x94>
				{
					pxPreviousBlock = pxBlock;
 8001072:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001074:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8001076:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001078:	681b      	ldr	r3, [r3, #0]
 800107a:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800107c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800107e:	685b      	ldr	r3, [r3, #4]
 8001080:	687a      	ldr	r2, [r7, #4]
 8001082:	429a      	cmp	r2, r3
 8001084:	d903      	bls.n	800108e <pvPortMallocMicroROS+0xa6>
 8001086:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001088:	681b      	ldr	r3, [r3, #0]
 800108a:	2b00      	cmp	r3, #0
 800108c:	d1f1      	bne.n	8001072 <pvPortMallocMicroROS+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800108e:	4b35      	ldr	r3, [pc, #212]	@ (8001164 <pvPortMallocMicroROS+0x17c>)
 8001090:	681b      	ldr	r3, [r3, #0]
 8001092:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001094:	429a      	cmp	r2, r3
 8001096:	d04c      	beq.n	8001132 <pvPortMallocMicroROS+0x14a>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8001098:	6a3b      	ldr	r3, [r7, #32]
 800109a:	681b      	ldr	r3, [r3, #0]
 800109c:	2208      	movs	r2, #8
 800109e:	4413      	add	r3, r2
 80010a0:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80010a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80010a4:	681a      	ldr	r2, [r3, #0]
 80010a6:	6a3b      	ldr	r3, [r7, #32]
 80010a8:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80010aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80010ac:	685a      	ldr	r2, [r3, #4]
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	1ad2      	subs	r2, r2, r3
 80010b2:	2308      	movs	r3, #8
 80010b4:	005b      	lsls	r3, r3, #1
 80010b6:	429a      	cmp	r2, r3
 80010b8:	d920      	bls.n	80010fc <pvPortMallocMicroROS+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80010ba:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	4413      	add	r3, r2
 80010c0:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80010c2:	69bb      	ldr	r3, [r7, #24]
 80010c4:	f003 0307 	and.w	r3, r3, #7
 80010c8:	2b00      	cmp	r3, #0
 80010ca:	d00b      	beq.n	80010e4 <pvPortMallocMicroROS+0xfc>
	__asm volatile
 80010cc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80010d0:	f383 8811 	msr	BASEPRI, r3
 80010d4:	f3bf 8f6f 	isb	sy
 80010d8:	f3bf 8f4f 	dsb	sy
 80010dc:	613b      	str	r3, [r7, #16]
}
 80010de:	bf00      	nop
 80010e0:	bf00      	nop
 80010e2:	e7fd      	b.n	80010e0 <pvPortMallocMicroROS+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80010e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80010e6:	685a      	ldr	r2, [r3, #4]
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	1ad2      	subs	r2, r2, r3
 80010ec:	69bb      	ldr	r3, [r7, #24]
 80010ee:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80010f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80010f2:	687a      	ldr	r2, [r7, #4]
 80010f4:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80010f6:	69b8      	ldr	r0, [r7, #24]
 80010f8:	f000 f96c 	bl	80013d4 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80010fc:	4b1b      	ldr	r3, [pc, #108]	@ (800116c <pvPortMallocMicroROS+0x184>)
 80010fe:	681a      	ldr	r2, [r3, #0]
 8001100:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001102:	685b      	ldr	r3, [r3, #4]
 8001104:	1ad3      	subs	r3, r2, r3
 8001106:	4a19      	ldr	r2, [pc, #100]	@ (800116c <pvPortMallocMicroROS+0x184>)
 8001108:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800110a:	4b18      	ldr	r3, [pc, #96]	@ (800116c <pvPortMallocMicroROS+0x184>)
 800110c:	681a      	ldr	r2, [r3, #0]
 800110e:	4b19      	ldr	r3, [pc, #100]	@ (8001174 <pvPortMallocMicroROS+0x18c>)
 8001110:	681b      	ldr	r3, [r3, #0]
 8001112:	429a      	cmp	r2, r3
 8001114:	d203      	bcs.n	800111e <pvPortMallocMicroROS+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8001116:	4b15      	ldr	r3, [pc, #84]	@ (800116c <pvPortMallocMicroROS+0x184>)
 8001118:	681b      	ldr	r3, [r3, #0]
 800111a:	4a16      	ldr	r2, [pc, #88]	@ (8001174 <pvPortMallocMicroROS+0x18c>)
 800111c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800111e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001120:	685a      	ldr	r2, [r3, #4]
 8001122:	4b11      	ldr	r3, [pc, #68]	@ (8001168 <pvPortMallocMicroROS+0x180>)
 8001124:	681b      	ldr	r3, [r3, #0]
 8001126:	431a      	orrs	r2, r3
 8001128:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800112a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800112c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800112e:	2200      	movs	r2, #0
 8001130:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8001132:	f00a fbf7 	bl	800b924 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8001136:	69fb      	ldr	r3, [r7, #28]
 8001138:	f003 0307 	and.w	r3, r3, #7
 800113c:	2b00      	cmp	r3, #0
 800113e:	d00b      	beq.n	8001158 <pvPortMallocMicroROS+0x170>
	__asm volatile
 8001140:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001144:	f383 8811 	msr	BASEPRI, r3
 8001148:	f3bf 8f6f 	isb	sy
 800114c:	f3bf 8f4f 	dsb	sy
 8001150:	60fb      	str	r3, [r7, #12]
}
 8001152:	bf00      	nop
 8001154:	bf00      	nop
 8001156:	e7fd      	b.n	8001154 <pvPortMallocMicroROS+0x16c>
	return pvReturn;
 8001158:	69fb      	ldr	r3, [r7, #28]
}
 800115a:	4618      	mov	r0, r3
 800115c:	3728      	adds	r7, #40	@ 0x28
 800115e:	46bd      	mov	sp, r7
 8001160:	bd80      	pop	{r7, pc}
 8001162:	bf00      	nop
 8001164:	20001138 	.word	0x20001138
 8001168:	20001144 	.word	0x20001144
 800116c:	2000113c 	.word	0x2000113c
 8001170:	20001130 	.word	0x20001130
 8001174:	20001140 	.word	0x20001140

08001178 <vPortFreeMicroROS>:
/*-----------------------------------------------------------*/

void vPortFreeMicroROS( void *pv )
{
 8001178:	b580      	push	{r7, lr}
 800117a:	b086      	sub	sp, #24
 800117c:	af00      	add	r7, sp, #0
 800117e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	2b00      	cmp	r3, #0
 8001188:	d04a      	beq.n	8001220 <vPortFreeMicroROS+0xa8>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800118a:	2308      	movs	r3, #8
 800118c:	425b      	negs	r3, r3
 800118e:	697a      	ldr	r2, [r7, #20]
 8001190:	4413      	add	r3, r2
 8001192:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8001194:	697b      	ldr	r3, [r7, #20]
 8001196:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8001198:	693b      	ldr	r3, [r7, #16]
 800119a:	685a      	ldr	r2, [r3, #4]
 800119c:	4b22      	ldr	r3, [pc, #136]	@ (8001228 <vPortFreeMicroROS+0xb0>)
 800119e:	681b      	ldr	r3, [r3, #0]
 80011a0:	4013      	ands	r3, r2
 80011a2:	2b00      	cmp	r3, #0
 80011a4:	d10b      	bne.n	80011be <vPortFreeMicroROS+0x46>
	__asm volatile
 80011a6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80011aa:	f383 8811 	msr	BASEPRI, r3
 80011ae:	f3bf 8f6f 	isb	sy
 80011b2:	f3bf 8f4f 	dsb	sy
 80011b6:	60fb      	str	r3, [r7, #12]
}
 80011b8:	bf00      	nop
 80011ba:	bf00      	nop
 80011bc:	e7fd      	b.n	80011ba <vPortFreeMicroROS+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80011be:	693b      	ldr	r3, [r7, #16]
 80011c0:	681b      	ldr	r3, [r3, #0]
 80011c2:	2b00      	cmp	r3, #0
 80011c4:	d00b      	beq.n	80011de <vPortFreeMicroROS+0x66>
	__asm volatile
 80011c6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80011ca:	f383 8811 	msr	BASEPRI, r3
 80011ce:	f3bf 8f6f 	isb	sy
 80011d2:	f3bf 8f4f 	dsb	sy
 80011d6:	60bb      	str	r3, [r7, #8]
}
 80011d8:	bf00      	nop
 80011da:	bf00      	nop
 80011dc:	e7fd      	b.n	80011da <vPortFreeMicroROS+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80011de:	693b      	ldr	r3, [r7, #16]
 80011e0:	685a      	ldr	r2, [r3, #4]
 80011e2:	4b11      	ldr	r3, [pc, #68]	@ (8001228 <vPortFreeMicroROS+0xb0>)
 80011e4:	681b      	ldr	r3, [r3, #0]
 80011e6:	4013      	ands	r3, r2
 80011e8:	2b00      	cmp	r3, #0
 80011ea:	d019      	beq.n	8001220 <vPortFreeMicroROS+0xa8>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80011ec:	693b      	ldr	r3, [r7, #16]
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	2b00      	cmp	r3, #0
 80011f2:	d115      	bne.n	8001220 <vPortFreeMicroROS+0xa8>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80011f4:	693b      	ldr	r3, [r7, #16]
 80011f6:	685a      	ldr	r2, [r3, #4]
 80011f8:	4b0b      	ldr	r3, [pc, #44]	@ (8001228 <vPortFreeMicroROS+0xb0>)
 80011fa:	681b      	ldr	r3, [r3, #0]
 80011fc:	43db      	mvns	r3, r3
 80011fe:	401a      	ands	r2, r3
 8001200:	693b      	ldr	r3, [r7, #16]
 8001202:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8001204:	f00a fb80 	bl	800b908 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8001208:	693b      	ldr	r3, [r7, #16]
 800120a:	685a      	ldr	r2, [r3, #4]
 800120c:	4b07      	ldr	r3, [pc, #28]	@ (800122c <vPortFreeMicroROS+0xb4>)
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	4413      	add	r3, r2
 8001212:	4a06      	ldr	r2, [pc, #24]	@ (800122c <vPortFreeMicroROS+0xb4>)
 8001214:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8001216:	6938      	ldr	r0, [r7, #16]
 8001218:	f000 f8dc 	bl	80013d4 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 800121c:	f00a fb82 	bl	800b924 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8001220:	bf00      	nop
 8001222:	3718      	adds	r7, #24
 8001224:	46bd      	mov	sp, r7
 8001226:	bd80      	pop	{r7, pc}
 8001228:	20001144 	.word	0x20001144
 800122c:	2000113c 	.word	0x2000113c

08001230 <getBlockSize>:
/*-----------------------------------------------------------*/

/*-----------------------------------------------------------*/
size_t getBlockSize( void *pv )
{
 8001230:	b480      	push	{r7}
 8001232:	b087      	sub	sp, #28
 8001234:	af00      	add	r7, sp, #0
 8001236:	6078      	str	r0, [r7, #4]

	uint8_t *puc = ( uint8_t * ) pv;
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	617b      	str	r3, [r7, #20]
	BlockLink_t *pxLink;

	puc -= xHeapStructSize;
 800123c:	2308      	movs	r3, #8
 800123e:	425b      	negs	r3, r3
 8001240:	697a      	ldr	r2, [r7, #20]
 8001242:	4413      	add	r3, r2
 8001244:	617b      	str	r3, [r7, #20]
	pxLink = ( void * ) puc;
 8001246:	697b      	ldr	r3, [r7, #20]
 8001248:	613b      	str	r3, [r7, #16]

	size_t count = pxLink->xBlockSize & ~xBlockAllocatedBit;
 800124a:	693b      	ldr	r3, [r7, #16]
 800124c:	685a      	ldr	r2, [r3, #4]
 800124e:	4b06      	ldr	r3, [pc, #24]	@ (8001268 <getBlockSize+0x38>)
 8001250:	681b      	ldr	r3, [r3, #0]
 8001252:	43db      	mvns	r3, r3
 8001254:	4013      	ands	r3, r2
 8001256:	60fb      	str	r3, [r7, #12]

	return count;
 8001258:	68fb      	ldr	r3, [r7, #12]
}
 800125a:	4618      	mov	r0, r3
 800125c:	371c      	adds	r7, #28
 800125e:	46bd      	mov	sp, r7
 8001260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001264:	4770      	bx	lr
 8001266:	bf00      	nop
 8001268:	20001144 	.word	0x20001144

0800126c <pvPortReallocMicroROS>:
/*-----------------------------------------------------------*/

void *pvPortReallocMicroROS( void *pv, size_t xWantedSize )
{
 800126c:	b580      	push	{r7, lr}
 800126e:	b084      	sub	sp, #16
 8001270:	af00      	add	r7, sp, #0
 8001272:	6078      	str	r0, [r7, #4]
 8001274:	6039      	str	r1, [r7, #0]
	vTaskSuspendAll();
 8001276:	f00a fb47 	bl	800b908 <vTaskSuspendAll>

	void * newmem = pvPortMallocMicroROS(xWantedSize);
 800127a:	6838      	ldr	r0, [r7, #0]
 800127c:	f7ff feb4 	bl	8000fe8 <pvPortMallocMicroROS>
 8001280:	60b8      	str	r0, [r7, #8]
	if (newmem != NULL && pv != NULL)
 8001282:	68bb      	ldr	r3, [r7, #8]
 8001284:	2b00      	cmp	r3, #0
 8001286:	d017      	beq.n	80012b8 <pvPortReallocMicroROS+0x4c>
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	2b00      	cmp	r3, #0
 800128c:	d014      	beq.n	80012b8 <pvPortReallocMicroROS+0x4c>
	{
		size_t count = getBlockSize(pv) - xHeapStructSize;
 800128e:	6878      	ldr	r0, [r7, #4]
 8001290:	f7ff ffce 	bl	8001230 <getBlockSize>
 8001294:	4603      	mov	r3, r0
 8001296:	2208      	movs	r2, #8
 8001298:	1a9b      	subs	r3, r3, r2
 800129a:	60fb      	str	r3, [r7, #12]
		if (xWantedSize < count)
 800129c:	683a      	ldr	r2, [r7, #0]
 800129e:	68fb      	ldr	r3, [r7, #12]
 80012a0:	429a      	cmp	r2, r3
 80012a2:	d201      	bcs.n	80012a8 <pvPortReallocMicroROS+0x3c>
		{
			count = xWantedSize;
 80012a4:	683b      	ldr	r3, [r7, #0]
 80012a6:	60fb      	str	r3, [r7, #12]
		}
		memcpy(newmem, pv, count);
 80012a8:	68fa      	ldr	r2, [r7, #12]
 80012aa:	6879      	ldr	r1, [r7, #4]
 80012ac:	68b8      	ldr	r0, [r7, #8]
 80012ae:	f01a fa3c 	bl	801b72a <memcpy>

		vPortFreeMicroROS(pv);
 80012b2:	6878      	ldr	r0, [r7, #4]
 80012b4:	f7ff ff60 	bl	8001178 <vPortFreeMicroROS>
	}

	( void ) xTaskResumeAll();
 80012b8:	f00a fb34 	bl	800b924 <xTaskResumeAll>

	return newmem;
 80012bc:	68bb      	ldr	r3, [r7, #8]
}
 80012be:	4618      	mov	r0, r3
 80012c0:	3710      	adds	r7, #16
 80012c2:	46bd      	mov	sp, r7
 80012c4:	bd80      	pop	{r7, pc}

080012c6 <pvPortCallocMicroROS>:
/*-----------------------------------------------------------*/

void *pvPortCallocMicroROS( size_t num, size_t xWantedSize )
{
 80012c6:	b580      	push	{r7, lr}
 80012c8:	b086      	sub	sp, #24
 80012ca:	af00      	add	r7, sp, #0
 80012cc:	6078      	str	r0, [r7, #4]
 80012ce:	6039      	str	r1, [r7, #0]
	vTaskSuspendAll();
 80012d0:	f00a fb1a 	bl	800b908 <vTaskSuspendAll>
	size_t count = xWantedSize*num;
 80012d4:	683b      	ldr	r3, [r7, #0]
 80012d6:	687a      	ldr	r2, [r7, #4]
 80012d8:	fb02 f303 	mul.w	r3, r2, r3
 80012dc:	617b      	str	r3, [r7, #20]

	void * mem = pvPortMallocMicroROS(count);
 80012de:	6978      	ldr	r0, [r7, #20]
 80012e0:	f7ff fe82 	bl	8000fe8 <pvPortMallocMicroROS>
 80012e4:	60f8      	str	r0, [r7, #12]
  	char *in_dest = (char*)mem;
 80012e6:	68fb      	ldr	r3, [r7, #12]
 80012e8:	613b      	str	r3, [r7, #16]

  	while(count--)
 80012ea:	e004      	b.n	80012f6 <pvPortCallocMicroROS+0x30>
    	*in_dest++ = 0;
 80012ec:	693b      	ldr	r3, [r7, #16]
 80012ee:	1c5a      	adds	r2, r3, #1
 80012f0:	613a      	str	r2, [r7, #16]
 80012f2:	2200      	movs	r2, #0
 80012f4:	701a      	strb	r2, [r3, #0]
  	while(count--)
 80012f6:	697b      	ldr	r3, [r7, #20]
 80012f8:	1e5a      	subs	r2, r3, #1
 80012fa:	617a      	str	r2, [r7, #20]
 80012fc:	2b00      	cmp	r3, #0
 80012fe:	d1f5      	bne.n	80012ec <pvPortCallocMicroROS+0x26>

	( void ) xTaskResumeAll();
 8001300:	f00a fb10 	bl	800b924 <xTaskResumeAll>
  	return mem;
 8001304:	68fb      	ldr	r3, [r7, #12]
}
 8001306:	4618      	mov	r0, r3
 8001308:	3718      	adds	r7, #24
 800130a:	46bd      	mov	sp, r7
 800130c:	bd80      	pop	{r7, pc}
	...

08001310 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8001310:	b480      	push	{r7}
 8001312:	b085      	sub	sp, #20
 8001314:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8001316:	f640 33b8 	movw	r3, #3000	@ 0xbb8
 800131a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800131c:	4b27      	ldr	r3, [pc, #156]	@ (80013bc <prvHeapInit+0xac>)
 800131e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8001320:	68fb      	ldr	r3, [r7, #12]
 8001322:	f003 0307 	and.w	r3, r3, #7
 8001326:	2b00      	cmp	r3, #0
 8001328:	d00c      	beq.n	8001344 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800132a:	68fb      	ldr	r3, [r7, #12]
 800132c:	3307      	adds	r3, #7
 800132e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8001330:	68fb      	ldr	r3, [r7, #12]
 8001332:	f023 0307 	bic.w	r3, r3, #7
 8001336:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8001338:	68ba      	ldr	r2, [r7, #8]
 800133a:	68fb      	ldr	r3, [r7, #12]
 800133c:	1ad3      	subs	r3, r2, r3
 800133e:	4a1f      	ldr	r2, [pc, #124]	@ (80013bc <prvHeapInit+0xac>)
 8001340:	4413      	add	r3, r2
 8001342:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8001344:	68fb      	ldr	r3, [r7, #12]
 8001346:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8001348:	4a1d      	ldr	r2, [pc, #116]	@ (80013c0 <prvHeapInit+0xb0>)
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800134e:	4b1c      	ldr	r3, [pc, #112]	@ (80013c0 <prvHeapInit+0xb0>)
 8001350:	2200      	movs	r2, #0
 8001352:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	68ba      	ldr	r2, [r7, #8]
 8001358:	4413      	add	r3, r2
 800135a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800135c:	2208      	movs	r2, #8
 800135e:	68fb      	ldr	r3, [r7, #12]
 8001360:	1a9b      	subs	r3, r3, r2
 8001362:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8001364:	68fb      	ldr	r3, [r7, #12]
 8001366:	f023 0307 	bic.w	r3, r3, #7
 800136a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800136c:	68fb      	ldr	r3, [r7, #12]
 800136e:	4a15      	ldr	r2, [pc, #84]	@ (80013c4 <prvHeapInit+0xb4>)
 8001370:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8001372:	4b14      	ldr	r3, [pc, #80]	@ (80013c4 <prvHeapInit+0xb4>)
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	2200      	movs	r2, #0
 8001378:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800137a:	4b12      	ldr	r3, [pc, #72]	@ (80013c4 <prvHeapInit+0xb4>)
 800137c:	681b      	ldr	r3, [r3, #0]
 800137e:	2200      	movs	r2, #0
 8001380:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8001386:	683b      	ldr	r3, [r7, #0]
 8001388:	68fa      	ldr	r2, [r7, #12]
 800138a:	1ad2      	subs	r2, r2, r3
 800138c:	683b      	ldr	r3, [r7, #0]
 800138e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8001390:	4b0c      	ldr	r3, [pc, #48]	@ (80013c4 <prvHeapInit+0xb4>)
 8001392:	681a      	ldr	r2, [r3, #0]
 8001394:	683b      	ldr	r3, [r7, #0]
 8001396:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8001398:	683b      	ldr	r3, [r7, #0]
 800139a:	685b      	ldr	r3, [r3, #4]
 800139c:	4a0a      	ldr	r2, [pc, #40]	@ (80013c8 <prvHeapInit+0xb8>)
 800139e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80013a0:	683b      	ldr	r3, [r7, #0]
 80013a2:	685b      	ldr	r3, [r3, #4]
 80013a4:	4a09      	ldr	r2, [pc, #36]	@ (80013cc <prvHeapInit+0xbc>)
 80013a6:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80013a8:	4b09      	ldr	r3, [pc, #36]	@ (80013d0 <prvHeapInit+0xc0>)
 80013aa:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 80013ae:	601a      	str	r2, [r3, #0]
}
 80013b0:	bf00      	nop
 80013b2:	3714      	adds	r7, #20
 80013b4:	46bd      	mov	sp, r7
 80013b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ba:	4770      	bx	lr
 80013bc:	20000578 	.word	0x20000578
 80013c0:	20001130 	.word	0x20001130
 80013c4:	20001138 	.word	0x20001138
 80013c8:	20001140 	.word	0x20001140
 80013cc:	2000113c 	.word	0x2000113c
 80013d0:	20001144 	.word	0x20001144

080013d4 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80013d4:	b480      	push	{r7}
 80013d6:	b085      	sub	sp, #20
 80013d8:	af00      	add	r7, sp, #0
 80013da:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80013dc:	4b28      	ldr	r3, [pc, #160]	@ (8001480 <prvInsertBlockIntoFreeList+0xac>)
 80013de:	60fb      	str	r3, [r7, #12]
 80013e0:	e002      	b.n	80013e8 <prvInsertBlockIntoFreeList+0x14>
 80013e2:	68fb      	ldr	r3, [r7, #12]
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	60fb      	str	r3, [r7, #12]
 80013e8:	68fb      	ldr	r3, [r7, #12]
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	687a      	ldr	r2, [r7, #4]
 80013ee:	429a      	cmp	r2, r3
 80013f0:	d8f7      	bhi.n	80013e2 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80013f2:	68fb      	ldr	r3, [r7, #12]
 80013f4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80013f6:	68fb      	ldr	r3, [r7, #12]
 80013f8:	685b      	ldr	r3, [r3, #4]
 80013fa:	68ba      	ldr	r2, [r7, #8]
 80013fc:	4413      	add	r3, r2
 80013fe:	687a      	ldr	r2, [r7, #4]
 8001400:	429a      	cmp	r2, r3
 8001402:	d108      	bne.n	8001416 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8001404:	68fb      	ldr	r3, [r7, #12]
 8001406:	685a      	ldr	r2, [r3, #4]
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	685b      	ldr	r3, [r3, #4]
 800140c:	441a      	add	r2, r3
 800140e:	68fb      	ldr	r3, [r7, #12]
 8001410:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8001412:	68fb      	ldr	r3, [r7, #12]
 8001414:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	685b      	ldr	r3, [r3, #4]
 800141e:	68ba      	ldr	r2, [r7, #8]
 8001420:	441a      	add	r2, r3
 8001422:	68fb      	ldr	r3, [r7, #12]
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	429a      	cmp	r2, r3
 8001428:	d118      	bne.n	800145c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800142a:	68fb      	ldr	r3, [r7, #12]
 800142c:	681a      	ldr	r2, [r3, #0]
 800142e:	4b15      	ldr	r3, [pc, #84]	@ (8001484 <prvInsertBlockIntoFreeList+0xb0>)
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	429a      	cmp	r2, r3
 8001434:	d00d      	beq.n	8001452 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	685a      	ldr	r2, [r3, #4]
 800143a:	68fb      	ldr	r3, [r7, #12]
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	685b      	ldr	r3, [r3, #4]
 8001440:	441a      	add	r2, r3
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8001446:	68fb      	ldr	r3, [r7, #12]
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	681a      	ldr	r2, [r3, #0]
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	601a      	str	r2, [r3, #0]
 8001450:	e008      	b.n	8001464 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8001452:	4b0c      	ldr	r3, [pc, #48]	@ (8001484 <prvInsertBlockIntoFreeList+0xb0>)
 8001454:	681a      	ldr	r2, [r3, #0]
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	601a      	str	r2, [r3, #0]
 800145a:	e003      	b.n	8001464 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800145c:	68fb      	ldr	r3, [r7, #12]
 800145e:	681a      	ldr	r2, [r3, #0]
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8001464:	68fa      	ldr	r2, [r7, #12]
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	429a      	cmp	r2, r3
 800146a:	d002      	beq.n	8001472 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800146c:	68fb      	ldr	r3, [r7, #12]
 800146e:	687a      	ldr	r2, [r7, #4]
 8001470:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8001472:	bf00      	nop
 8001474:	3714      	adds	r7, #20
 8001476:	46bd      	mov	sp, r7
 8001478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800147c:	4770      	bx	lr
 800147e:	bf00      	nop
 8001480:	20001130 	.word	0x20001130
 8001484:	20001138 	.word	0x20001138

08001488 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8001488:	b580      	push	{r7, lr}
 800148a:	b082      	sub	sp, #8
 800148c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800148e:	4b18      	ldr	r3, [pc, #96]	@ (80014f0 <MX_DMA_Init+0x68>)
 8001490:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001492:	4a17      	ldr	r2, [pc, #92]	@ (80014f0 <MX_DMA_Init+0x68>)
 8001494:	f043 0301 	orr.w	r3, r3, #1
 8001498:	6493      	str	r3, [r2, #72]	@ 0x48
 800149a:	4b15      	ldr	r3, [pc, #84]	@ (80014f0 <MX_DMA_Init+0x68>)
 800149c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800149e:	f003 0301 	and.w	r3, r3, #1
 80014a2:	607b      	str	r3, [r7, #4]
 80014a4:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 5, 0);
 80014a6:	2200      	movs	r2, #0
 80014a8:	2105      	movs	r1, #5
 80014aa:	200c      	movs	r0, #12
 80014ac:	f001 fea0 	bl	80031f0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 80014b0:	200c      	movs	r0, #12
 80014b2:	f001 feb9 	bl	8003228 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 5, 0);
 80014b6:	2200      	movs	r2, #0
 80014b8:	2105      	movs	r1, #5
 80014ba:	200d      	movs	r0, #13
 80014bc:	f001 fe98 	bl	80031f0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 80014c0:	200d      	movs	r0, #13
 80014c2:	f001 feb1 	bl	8003228 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 5, 0);
 80014c6:	2200      	movs	r2, #0
 80014c8:	2105      	movs	r1, #5
 80014ca:	2010      	movs	r0, #16
 80014cc:	f001 fe90 	bl	80031f0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 80014d0:	2010      	movs	r0, #16
 80014d2:	f001 fea9 	bl	8003228 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel7_IRQn, 5, 0);
 80014d6:	2200      	movs	r2, #0
 80014d8:	2105      	movs	r1, #5
 80014da:	2011      	movs	r0, #17
 80014dc:	f001 fe88 	bl	80031f0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel7_IRQn);
 80014e0:	2011      	movs	r0, #17
 80014e2:	f001 fea1 	bl	8003228 <HAL_NVIC_EnableIRQ>

}
 80014e6:	bf00      	nop
 80014e8:	3708      	adds	r7, #8
 80014ea:	46bd      	mov	sp, r7
 80014ec:	bd80      	pop	{r7, pc}
 80014ee:	bf00      	nop
 80014f0:	40021000 	.word	0x40021000

080014f4 <cubemx_transport_open>:
#define UART_DMA_BUFFER_SIZE 2048

static uint8_t dma_buffer[UART_DMA_BUFFER_SIZE];
static size_t dma_head = 0, dma_tail = 0;

bool cubemx_transport_open(struct uxrCustomTransport * transport){
 80014f4:	b580      	push	{r7, lr}
 80014f6:	b084      	sub	sp, #16
 80014f8:	af00      	add	r7, sp, #0
 80014fa:	6078      	str	r0, [r7, #4]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	f8d3 328c 	ldr.w	r3, [r3, #652]	@ 0x28c
 8001502:	60fb      	str	r3, [r7, #12]
    HAL_UART_Receive_DMA(uart, dma_buffer, UART_DMA_BUFFER_SIZE);
 8001504:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8001508:	4904      	ldr	r1, [pc, #16]	@ (800151c <cubemx_transport_open+0x28>)
 800150a:	68f8      	ldr	r0, [r7, #12]
 800150c:	f007 f8c2 	bl	8008694 <HAL_UART_Receive_DMA>
    return true;
 8001510:	2301      	movs	r3, #1
}
 8001512:	4618      	mov	r0, r3
 8001514:	3710      	adds	r7, #16
 8001516:	46bd      	mov	sp, r7
 8001518:	bd80      	pop	{r7, pc}
 800151a:	bf00      	nop
 800151c:	20001148 	.word	0x20001148

08001520 <cubemx_transport_close>:

bool cubemx_transport_close(struct uxrCustomTransport * transport){
 8001520:	b580      	push	{r7, lr}
 8001522:	b084      	sub	sp, #16
 8001524:	af00      	add	r7, sp, #0
 8001526:	6078      	str	r0, [r7, #4]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	f8d3 328c 	ldr.w	r3, [r3, #652]	@ 0x28c
 800152e:	60fb      	str	r3, [r7, #12]
    HAL_UART_DMAStop(uart);
 8001530:	68f8      	ldr	r0, [r7, #12]
 8001532:	f007 f8fb 	bl	800872c <HAL_UART_DMAStop>
    return true;
 8001536:	2301      	movs	r3, #1
}
 8001538:	4618      	mov	r0, r3
 800153a:	3710      	adds	r7, #16
 800153c:	46bd      	mov	sp, r7
 800153e:	bd80      	pop	{r7, pc}

08001540 <cubemx_transport_write>:

size_t cubemx_transport_write(struct uxrCustomTransport* transport, uint8_t * buf, size_t len, uint8_t * err){
 8001540:	b580      	push	{r7, lr}
 8001542:	b086      	sub	sp, #24
 8001544:	af00      	add	r7, sp, #0
 8001546:	60f8      	str	r0, [r7, #12]
 8001548:	60b9      	str	r1, [r7, #8]
 800154a:	607a      	str	r2, [r7, #4]
 800154c:	603b      	str	r3, [r7, #0]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 800154e:	68fb      	ldr	r3, [r7, #12]
 8001550:	f8d3 328c 	ldr.w	r3, [r3, #652]	@ 0x28c
 8001554:	617b      	str	r3, [r7, #20]

    HAL_StatusTypeDef ret;
    if (uart->gState == HAL_UART_STATE_READY){
 8001556:	697b      	ldr	r3, [r7, #20]
 8001558:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800155a:	2b20      	cmp	r3, #32
 800155c:	d11a      	bne.n	8001594 <cubemx_transport_write+0x54>
        ret = HAL_UART_Transmit_DMA(uart, buf, len);
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	b29b      	uxth	r3, r3
 8001562:	461a      	mov	r2, r3
 8001564:	68b9      	ldr	r1, [r7, #8]
 8001566:	6978      	ldr	r0, [r7, #20]
 8001568:	f007 f818 	bl	800859c <HAL_UART_Transmit_DMA>
 800156c:	4603      	mov	r3, r0
 800156e:	74fb      	strb	r3, [r7, #19]
        while (ret == HAL_OK && uart->gState != HAL_UART_STATE_READY){
 8001570:	e002      	b.n	8001578 <cubemx_transport_write+0x38>
            osDelay(1);
 8001572:	2001      	movs	r0, #1
 8001574:	f009 f966 	bl	800a844 <osDelay>
        while (ret == HAL_OK && uart->gState != HAL_UART_STATE_READY){
 8001578:	7cfb      	ldrb	r3, [r7, #19]
 800157a:	2b00      	cmp	r3, #0
 800157c:	d103      	bne.n	8001586 <cubemx_transport_write+0x46>
 800157e:	697b      	ldr	r3, [r7, #20]
 8001580:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8001582:	2b20      	cmp	r3, #32
 8001584:	d1f5      	bne.n	8001572 <cubemx_transport_write+0x32>
        }

        return (ret == HAL_OK) ? len : 0;
 8001586:	7cfb      	ldrb	r3, [r7, #19]
 8001588:	2b00      	cmp	r3, #0
 800158a:	d101      	bne.n	8001590 <cubemx_transport_write+0x50>
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	e002      	b.n	8001596 <cubemx_transport_write+0x56>
 8001590:	2300      	movs	r3, #0
 8001592:	e000      	b.n	8001596 <cubemx_transport_write+0x56>
    }else{
        return 0;
 8001594:	2300      	movs	r3, #0
    }
}
 8001596:	4618      	mov	r0, r3
 8001598:	3718      	adds	r7, #24
 800159a:	46bd      	mov	sp, r7
 800159c:	bd80      	pop	{r7, pc}
	...

080015a0 <cubemx_transport_read>:

size_t cubemx_transport_read(struct uxrCustomTransport* transport, uint8_t* buf, size_t len, int timeout, uint8_t* err){
 80015a0:	b580      	push	{r7, lr}
 80015a2:	b088      	sub	sp, #32
 80015a4:	af00      	add	r7, sp, #0
 80015a6:	60f8      	str	r0, [r7, #12]
 80015a8:	60b9      	str	r1, [r7, #8]
 80015aa:	607a      	str	r2, [r7, #4]
 80015ac:	603b      	str	r3, [r7, #0]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 80015ae:	68fb      	ldr	r3, [r7, #12]
 80015b0:	f8d3 328c 	ldr.w	r3, [r3, #652]	@ 0x28c
 80015b4:	617b      	str	r3, [r7, #20]

    int ms_used = 0;
 80015b6:	2300      	movs	r3, #0
 80015b8:	61fb      	str	r3, [r7, #28]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80015ba:	b672      	cpsid	i
}
 80015bc:	bf00      	nop
    do
    {
        __disable_irq();
        dma_tail = UART_DMA_BUFFER_SIZE - __HAL_DMA_GET_COUNTER(uart->hdmarx);
 80015be:	697b      	ldr	r3, [r7, #20]
 80015c0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	685b      	ldr	r3, [r3, #4]
 80015c6:	f5c3 6300 	rsb	r3, r3, #2048	@ 0x800
 80015ca:	4a1c      	ldr	r2, [pc, #112]	@ (800163c <cubemx_transport_read+0x9c>)
 80015cc:	6013      	str	r3, [r2, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80015ce:	b662      	cpsie	i
}
 80015d0:	bf00      	nop
        __enable_irq();
        ms_used++;
 80015d2:	69fb      	ldr	r3, [r7, #28]
 80015d4:	3301      	adds	r3, #1
 80015d6:	61fb      	str	r3, [r7, #28]
        osDelay(portTICK_RATE_MS);
 80015d8:	2001      	movs	r0, #1
 80015da:	f009 f933 	bl	800a844 <osDelay>
    } while (dma_head == dma_tail && ms_used < timeout);
 80015de:	4b18      	ldr	r3, [pc, #96]	@ (8001640 <cubemx_transport_read+0xa0>)
 80015e0:	681a      	ldr	r2, [r3, #0]
 80015e2:	4b16      	ldr	r3, [pc, #88]	@ (800163c <cubemx_transport_read+0x9c>)
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	429a      	cmp	r2, r3
 80015e8:	d103      	bne.n	80015f2 <cubemx_transport_read+0x52>
 80015ea:	69fa      	ldr	r2, [r7, #28]
 80015ec:	683b      	ldr	r3, [r7, #0]
 80015ee:	429a      	cmp	r2, r3
 80015f0:	dbe3      	blt.n	80015ba <cubemx_transport_read+0x1a>
    
    size_t wrote = 0;
 80015f2:	2300      	movs	r3, #0
 80015f4:	61bb      	str	r3, [r7, #24]
    while ((dma_head != dma_tail) && (wrote < len)){
 80015f6:	e011      	b.n	800161c <cubemx_transport_read+0x7c>
        buf[wrote] = dma_buffer[dma_head];
 80015f8:	4b11      	ldr	r3, [pc, #68]	@ (8001640 <cubemx_transport_read+0xa0>)
 80015fa:	681a      	ldr	r2, [r3, #0]
 80015fc:	68b9      	ldr	r1, [r7, #8]
 80015fe:	69bb      	ldr	r3, [r7, #24]
 8001600:	440b      	add	r3, r1
 8001602:	4910      	ldr	r1, [pc, #64]	@ (8001644 <cubemx_transport_read+0xa4>)
 8001604:	5c8a      	ldrb	r2, [r1, r2]
 8001606:	701a      	strb	r2, [r3, #0]
        dma_head = (dma_head + 1) % UART_DMA_BUFFER_SIZE;
 8001608:	4b0d      	ldr	r3, [pc, #52]	@ (8001640 <cubemx_transport_read+0xa0>)
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	3301      	adds	r3, #1
 800160e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001612:	4a0b      	ldr	r2, [pc, #44]	@ (8001640 <cubemx_transport_read+0xa0>)
 8001614:	6013      	str	r3, [r2, #0]
        wrote++;
 8001616:	69bb      	ldr	r3, [r7, #24]
 8001618:	3301      	adds	r3, #1
 800161a:	61bb      	str	r3, [r7, #24]
    while ((dma_head != dma_tail) && (wrote < len)){
 800161c:	4b08      	ldr	r3, [pc, #32]	@ (8001640 <cubemx_transport_read+0xa0>)
 800161e:	681a      	ldr	r2, [r3, #0]
 8001620:	4b06      	ldr	r3, [pc, #24]	@ (800163c <cubemx_transport_read+0x9c>)
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	429a      	cmp	r2, r3
 8001626:	d003      	beq.n	8001630 <cubemx_transport_read+0x90>
 8001628:	69ba      	ldr	r2, [r7, #24]
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	429a      	cmp	r2, r3
 800162e:	d3e3      	bcc.n	80015f8 <cubemx_transport_read+0x58>
    }
    
    return wrote;
 8001630:	69bb      	ldr	r3, [r7, #24]
}
 8001632:	4618      	mov	r0, r3
 8001634:	3720      	adds	r7, #32
 8001636:	46bd      	mov	sp, r7
 8001638:	bd80      	pop	{r7, pc}
 800163a:	bf00      	nop
 800163c:	2000194c 	.word	0x2000194c
 8001640:	20001948 	.word	0x20001948
 8001644:	20001148 	.word	0x20001148

08001648 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8001648:	b580      	push	{r7, lr}
 800164a:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 800164c:	4a04      	ldr	r2, [pc, #16]	@ (8001660 <MX_FREERTOS_Init+0x18>)
 800164e:	2100      	movs	r1, #0
 8001650:	4804      	ldr	r0, [pc, #16]	@ (8001664 <MX_FREERTOS_Init+0x1c>)
 8001652:	f009 f865 	bl	800a720 <osThreadNew>
 8001656:	4603      	mov	r3, r0
 8001658:	4a03      	ldr	r2, [pc, #12]	@ (8001668 <MX_FREERTOS_Init+0x20>)
 800165a:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 800165c:	bf00      	nop
 800165e:	bd80      	pop	{r7, pc}
 8001660:	0801d3c0 	.word	0x0801d3c0
 8001664:	08001c69 	.word	0x08001c69
 8001668:	20001950 	.word	0x20001950

0800166c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800166c:	b480      	push	{r7}
 800166e:	b085      	sub	sp, #20
 8001670:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001672:	4b15      	ldr	r3, [pc, #84]	@ (80016c8 <MX_GPIO_Init+0x5c>)
 8001674:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001676:	4a14      	ldr	r2, [pc, #80]	@ (80016c8 <MX_GPIO_Init+0x5c>)
 8001678:	f043 0304 	orr.w	r3, r3, #4
 800167c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800167e:	4b12      	ldr	r3, [pc, #72]	@ (80016c8 <MX_GPIO_Init+0x5c>)
 8001680:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001682:	f003 0304 	and.w	r3, r3, #4
 8001686:	60fb      	str	r3, [r7, #12]
 8001688:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800168a:	4b0f      	ldr	r3, [pc, #60]	@ (80016c8 <MX_GPIO_Init+0x5c>)
 800168c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800168e:	4a0e      	ldr	r2, [pc, #56]	@ (80016c8 <MX_GPIO_Init+0x5c>)
 8001690:	f043 0301 	orr.w	r3, r3, #1
 8001694:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001696:	4b0c      	ldr	r3, [pc, #48]	@ (80016c8 <MX_GPIO_Init+0x5c>)
 8001698:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800169a:	f003 0301 	and.w	r3, r3, #1
 800169e:	60bb      	str	r3, [r7, #8]
 80016a0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80016a2:	4b09      	ldr	r3, [pc, #36]	@ (80016c8 <MX_GPIO_Init+0x5c>)
 80016a4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80016a6:	4a08      	ldr	r2, [pc, #32]	@ (80016c8 <MX_GPIO_Init+0x5c>)
 80016a8:	f043 0302 	orr.w	r3, r3, #2
 80016ac:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80016ae:	4b06      	ldr	r3, [pc, #24]	@ (80016c8 <MX_GPIO_Init+0x5c>)
 80016b0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80016b2:	f003 0302 	and.w	r3, r3, #2
 80016b6:	607b      	str	r3, [r7, #4]
 80016b8:	687b      	ldr	r3, [r7, #4]

}
 80016ba:	bf00      	nop
 80016bc:	3714      	adds	r7, #20
 80016be:	46bd      	mov	sp, r7
 80016c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c4:	4770      	bx	lr
 80016c6:	bf00      	nop
 80016c8:	40021000 	.word	0x40021000

080016cc <MX_I2C3_Init>:
DMA_HandleTypeDef hdma_i2c3_rx;
DMA_HandleTypeDef hdma_i2c3_tx;

/* I2C3 init function */
void MX_I2C3_Init(void)
{
 80016cc:	b580      	push	{r7, lr}
 80016ce:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 80016d0:	4b1b      	ldr	r3, [pc, #108]	@ (8001740 <MX_I2C3_Init+0x74>)
 80016d2:	4a1c      	ldr	r2, [pc, #112]	@ (8001744 <MX_I2C3_Init+0x78>)
 80016d4:	601a      	str	r2, [r3, #0]
  hi2c3.Init.Timing = 0x00702991;
 80016d6:	4b1a      	ldr	r3, [pc, #104]	@ (8001740 <MX_I2C3_Init+0x74>)
 80016d8:	4a1b      	ldr	r2, [pc, #108]	@ (8001748 <MX_I2C3_Init+0x7c>)
 80016da:	605a      	str	r2, [r3, #4]
  hi2c3.Init.OwnAddress1 = 0;
 80016dc:	4b18      	ldr	r3, [pc, #96]	@ (8001740 <MX_I2C3_Init+0x74>)
 80016de:	2200      	movs	r2, #0
 80016e0:	609a      	str	r2, [r3, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80016e2:	4b17      	ldr	r3, [pc, #92]	@ (8001740 <MX_I2C3_Init+0x74>)
 80016e4:	2201      	movs	r2, #1
 80016e6:	60da      	str	r2, [r3, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80016e8:	4b15      	ldr	r3, [pc, #84]	@ (8001740 <MX_I2C3_Init+0x74>)
 80016ea:	2200      	movs	r2, #0
 80016ec:	611a      	str	r2, [r3, #16]
  hi2c3.Init.OwnAddress2 = 0;
 80016ee:	4b14      	ldr	r3, [pc, #80]	@ (8001740 <MX_I2C3_Init+0x74>)
 80016f0:	2200      	movs	r2, #0
 80016f2:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80016f4:	4b12      	ldr	r3, [pc, #72]	@ (8001740 <MX_I2C3_Init+0x74>)
 80016f6:	2200      	movs	r2, #0
 80016f8:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80016fa:	4b11      	ldr	r3, [pc, #68]	@ (8001740 <MX_I2C3_Init+0x74>)
 80016fc:	2200      	movs	r2, #0
 80016fe:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001700:	4b0f      	ldr	r3, [pc, #60]	@ (8001740 <MX_I2C3_Init+0x74>)
 8001702:	2200      	movs	r2, #0
 8001704:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8001706:	480e      	ldr	r0, [pc, #56]	@ (8001740 <MX_I2C3_Init+0x74>)
 8001708:	f002 f996 	bl	8003a38 <HAL_I2C_Init>
 800170c:	4603      	mov	r3, r0
 800170e:	2b00      	cmp	r3, #0
 8001710:	d001      	beq.n	8001716 <MX_I2C3_Init+0x4a>
  {
    Error_Handler();
 8001712:	f000 fdc5 	bl	80022a0 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001716:	2100      	movs	r1, #0
 8001718:	4809      	ldr	r0, [pc, #36]	@ (8001740 <MX_I2C3_Init+0x74>)
 800171a:	f004 fa11 	bl	8005b40 <HAL_I2CEx_ConfigAnalogFilter>
 800171e:	4603      	mov	r3, r0
 8001720:	2b00      	cmp	r3, #0
 8001722:	d001      	beq.n	8001728 <MX_I2C3_Init+0x5c>
  {
    Error_Handler();
 8001724:	f000 fdbc 	bl	80022a0 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 8001728:	2100      	movs	r1, #0
 800172a:	4805      	ldr	r0, [pc, #20]	@ (8001740 <MX_I2C3_Init+0x74>)
 800172c:	f004 fa53 	bl	8005bd6 <HAL_I2CEx_ConfigDigitalFilter>
 8001730:	4603      	mov	r3, r0
 8001732:	2b00      	cmp	r3, #0
 8001734:	d001      	beq.n	800173a <MX_I2C3_Init+0x6e>
  {
    Error_Handler();
 8001736:	f000 fdb3 	bl	80022a0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 800173a:	bf00      	nop
 800173c:	bd80      	pop	{r7, pc}
 800173e:	bf00      	nop
 8001740:	200059fc 	.word	0x200059fc
 8001744:	40005c00 	.word	0x40005c00
 8001748:	00702991 	.word	0x00702991

0800174c <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 800174c:	b580      	push	{r7, lr}
 800174e:	b0a0      	sub	sp, #128	@ 0x80
 8001750:	af00      	add	r7, sp, #0
 8001752:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001754:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8001758:	2200      	movs	r2, #0
 800175a:	601a      	str	r2, [r3, #0]
 800175c:	605a      	str	r2, [r3, #4]
 800175e:	609a      	str	r2, [r3, #8]
 8001760:	60da      	str	r2, [r3, #12]
 8001762:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001764:	f107 0318 	add.w	r3, r7, #24
 8001768:	2254      	movs	r2, #84	@ 0x54
 800176a:	2100      	movs	r1, #0
 800176c:	4618      	mov	r0, r3
 800176e:	f019 febd 	bl	801b4ec <memset>
  if(i2cHandle->Instance==I2C3)
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	4a5b      	ldr	r2, [pc, #364]	@ (80018e4 <HAL_I2C_MspInit+0x198>)
 8001778:	4293      	cmp	r3, r2
 800177a:	f040 80ae 	bne.w	80018da <HAL_I2C_MspInit+0x18e>

  /* USER CODE END I2C3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C3;
 800177e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001782:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK1;
 8001784:	2300      	movs	r3, #0
 8001786:	64bb      	str	r3, [r7, #72]	@ 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001788:	f107 0318 	add.w	r3, r7, #24
 800178c:	4618      	mov	r0, r3
 800178e:	f005 f94d 	bl	8006a2c <HAL_RCCEx_PeriphCLKConfig>
 8001792:	4603      	mov	r3, r0
 8001794:	2b00      	cmp	r3, #0
 8001796:	d001      	beq.n	800179c <HAL_I2C_MspInit+0x50>
    {
      Error_Handler();
 8001798:	f000 fd82 	bl	80022a0 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800179c:	4b52      	ldr	r3, [pc, #328]	@ (80018e8 <HAL_I2C_MspInit+0x19c>)
 800179e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80017a0:	4a51      	ldr	r2, [pc, #324]	@ (80018e8 <HAL_I2C_MspInit+0x19c>)
 80017a2:	f043 0301 	orr.w	r3, r3, #1
 80017a6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80017a8:	4b4f      	ldr	r3, [pc, #316]	@ (80018e8 <HAL_I2C_MspInit+0x19c>)
 80017aa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80017ac:	f003 0301 	and.w	r3, r3, #1
 80017b0:	617b      	str	r3, [r7, #20]
 80017b2:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80017b4:	4b4c      	ldr	r3, [pc, #304]	@ (80018e8 <HAL_I2C_MspInit+0x19c>)
 80017b6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80017b8:	4a4b      	ldr	r2, [pc, #300]	@ (80018e8 <HAL_I2C_MspInit+0x19c>)
 80017ba:	f043 0302 	orr.w	r3, r3, #2
 80017be:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80017c0:	4b49      	ldr	r3, [pc, #292]	@ (80018e8 <HAL_I2C_MspInit+0x19c>)
 80017c2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80017c4:	f003 0302 	and.w	r3, r3, #2
 80017c8:	613b      	str	r3, [r7, #16]
 80017ca:	693b      	ldr	r3, [r7, #16]
    /**I2C3 GPIO Configuration
    PA7     ------> I2C3_SCL
    PB4 (NJTRST)     ------> I2C3_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 80017cc:	2380      	movs	r3, #128	@ 0x80
 80017ce:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80017d0:	2312      	movs	r3, #18
 80017d2:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80017d4:	2301      	movs	r3, #1
 80017d6:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80017d8:	2303      	movs	r3, #3
 80017da:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 80017dc:	2304      	movs	r3, #4
 80017de:	67fb      	str	r3, [r7, #124]	@ 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017e0:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 80017e4:	4619      	mov	r1, r3
 80017e6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80017ea:	f001 ffbb 	bl	8003764 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4;
 80017ee:	2310      	movs	r3, #16
 80017f0:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80017f2:	2312      	movs	r3, #18
 80017f4:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80017f6:	2301      	movs	r3, #1
 80017f8:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80017fa:	2303      	movs	r3, #3
 80017fc:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 80017fe:	2304      	movs	r3, #4
 8001800:	67fb      	str	r3, [r7, #124]	@ 0x7c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001802:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8001806:	4619      	mov	r1, r3
 8001808:	4838      	ldr	r0, [pc, #224]	@ (80018ec <HAL_I2C_MspInit+0x1a0>)
 800180a:	f001 ffab 	bl	8003764 <HAL_GPIO_Init>

    /* I2C3 clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 800180e:	4b36      	ldr	r3, [pc, #216]	@ (80018e8 <HAL_I2C_MspInit+0x19c>)
 8001810:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001812:	4a35      	ldr	r2, [pc, #212]	@ (80018e8 <HAL_I2C_MspInit+0x19c>)
 8001814:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8001818:	6593      	str	r3, [r2, #88]	@ 0x58
 800181a:	4b33      	ldr	r3, [pc, #204]	@ (80018e8 <HAL_I2C_MspInit+0x19c>)
 800181c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800181e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8001822:	60fb      	str	r3, [r7, #12]
 8001824:	68fb      	ldr	r3, [r7, #12]

    /* I2C3 DMA Init */
    /* I2C3_RX Init */
    hdma_i2c3_rx.Instance = DMA1_Channel3;
 8001826:	4b32      	ldr	r3, [pc, #200]	@ (80018f0 <HAL_I2C_MspInit+0x1a4>)
 8001828:	4a32      	ldr	r2, [pc, #200]	@ (80018f4 <HAL_I2C_MspInit+0x1a8>)
 800182a:	601a      	str	r2, [r3, #0]
    hdma_i2c3_rx.Init.Request = DMA_REQUEST_3;
 800182c:	4b30      	ldr	r3, [pc, #192]	@ (80018f0 <HAL_I2C_MspInit+0x1a4>)
 800182e:	2203      	movs	r2, #3
 8001830:	605a      	str	r2, [r3, #4]
    hdma_i2c3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001832:	4b2f      	ldr	r3, [pc, #188]	@ (80018f0 <HAL_I2C_MspInit+0x1a4>)
 8001834:	2200      	movs	r2, #0
 8001836:	609a      	str	r2, [r3, #8]
    hdma_i2c3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001838:	4b2d      	ldr	r3, [pc, #180]	@ (80018f0 <HAL_I2C_MspInit+0x1a4>)
 800183a:	2200      	movs	r2, #0
 800183c:	60da      	str	r2, [r3, #12]
    hdma_i2c3_rx.Init.MemInc = DMA_MINC_ENABLE;
 800183e:	4b2c      	ldr	r3, [pc, #176]	@ (80018f0 <HAL_I2C_MspInit+0x1a4>)
 8001840:	2280      	movs	r2, #128	@ 0x80
 8001842:	611a      	str	r2, [r3, #16]
    hdma_i2c3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001844:	4b2a      	ldr	r3, [pc, #168]	@ (80018f0 <HAL_I2C_MspInit+0x1a4>)
 8001846:	2200      	movs	r2, #0
 8001848:	615a      	str	r2, [r3, #20]
    hdma_i2c3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800184a:	4b29      	ldr	r3, [pc, #164]	@ (80018f0 <HAL_I2C_MspInit+0x1a4>)
 800184c:	2200      	movs	r2, #0
 800184e:	619a      	str	r2, [r3, #24]
    hdma_i2c3_rx.Init.Mode = DMA_NORMAL;
 8001850:	4b27      	ldr	r3, [pc, #156]	@ (80018f0 <HAL_I2C_MspInit+0x1a4>)
 8001852:	2200      	movs	r2, #0
 8001854:	61da      	str	r2, [r3, #28]
    hdma_i2c3_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001856:	4b26      	ldr	r3, [pc, #152]	@ (80018f0 <HAL_I2C_MspInit+0x1a4>)
 8001858:	2200      	movs	r2, #0
 800185a:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_i2c3_rx) != HAL_OK)
 800185c:	4824      	ldr	r0, [pc, #144]	@ (80018f0 <HAL_I2C_MspInit+0x1a4>)
 800185e:	f001 fcf1 	bl	8003244 <HAL_DMA_Init>
 8001862:	4603      	mov	r3, r0
 8001864:	2b00      	cmp	r3, #0
 8001866:	d001      	beq.n	800186c <HAL_I2C_MspInit+0x120>
    {
      Error_Handler();
 8001868:	f000 fd1a 	bl	80022a0 <Error_Handler>
    }

    __HAL_LINKDMA(i2cHandle,hdmarx,hdma_i2c3_rx);
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	4a20      	ldr	r2, [pc, #128]	@ (80018f0 <HAL_I2C_MspInit+0x1a4>)
 8001870:	63da      	str	r2, [r3, #60]	@ 0x3c
 8001872:	4a1f      	ldr	r2, [pc, #124]	@ (80018f0 <HAL_I2C_MspInit+0x1a4>)
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	6293      	str	r3, [r2, #40]	@ 0x28

    /* I2C3_TX Init */
    hdma_i2c3_tx.Instance = DMA1_Channel2;
 8001878:	4b1f      	ldr	r3, [pc, #124]	@ (80018f8 <HAL_I2C_MspInit+0x1ac>)
 800187a:	4a20      	ldr	r2, [pc, #128]	@ (80018fc <HAL_I2C_MspInit+0x1b0>)
 800187c:	601a      	str	r2, [r3, #0]
    hdma_i2c3_tx.Init.Request = DMA_REQUEST_3;
 800187e:	4b1e      	ldr	r3, [pc, #120]	@ (80018f8 <HAL_I2C_MspInit+0x1ac>)
 8001880:	2203      	movs	r2, #3
 8001882:	605a      	str	r2, [r3, #4]
    hdma_i2c3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001884:	4b1c      	ldr	r3, [pc, #112]	@ (80018f8 <HAL_I2C_MspInit+0x1ac>)
 8001886:	2210      	movs	r2, #16
 8001888:	609a      	str	r2, [r3, #8]
    hdma_i2c3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800188a:	4b1b      	ldr	r3, [pc, #108]	@ (80018f8 <HAL_I2C_MspInit+0x1ac>)
 800188c:	2200      	movs	r2, #0
 800188e:	60da      	str	r2, [r3, #12]
    hdma_i2c3_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001890:	4b19      	ldr	r3, [pc, #100]	@ (80018f8 <HAL_I2C_MspInit+0x1ac>)
 8001892:	2280      	movs	r2, #128	@ 0x80
 8001894:	611a      	str	r2, [r3, #16]
    hdma_i2c3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001896:	4b18      	ldr	r3, [pc, #96]	@ (80018f8 <HAL_I2C_MspInit+0x1ac>)
 8001898:	2200      	movs	r2, #0
 800189a:	615a      	str	r2, [r3, #20]
    hdma_i2c3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800189c:	4b16      	ldr	r3, [pc, #88]	@ (80018f8 <HAL_I2C_MspInit+0x1ac>)
 800189e:	2200      	movs	r2, #0
 80018a0:	619a      	str	r2, [r3, #24]
    hdma_i2c3_tx.Init.Mode = DMA_NORMAL;
 80018a2:	4b15      	ldr	r3, [pc, #84]	@ (80018f8 <HAL_I2C_MspInit+0x1ac>)
 80018a4:	2200      	movs	r2, #0
 80018a6:	61da      	str	r2, [r3, #28]
    hdma_i2c3_tx.Init.Priority = DMA_PRIORITY_LOW;
 80018a8:	4b13      	ldr	r3, [pc, #76]	@ (80018f8 <HAL_I2C_MspInit+0x1ac>)
 80018aa:	2200      	movs	r2, #0
 80018ac:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_i2c3_tx) != HAL_OK)
 80018ae:	4812      	ldr	r0, [pc, #72]	@ (80018f8 <HAL_I2C_MspInit+0x1ac>)
 80018b0:	f001 fcc8 	bl	8003244 <HAL_DMA_Init>
 80018b4:	4603      	mov	r3, r0
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	d001      	beq.n	80018be <HAL_I2C_MspInit+0x172>
    {
      Error_Handler();
 80018ba:	f000 fcf1 	bl	80022a0 <Error_Handler>
    }

    __HAL_LINKDMA(i2cHandle,hdmatx,hdma_i2c3_tx);
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	4a0d      	ldr	r2, [pc, #52]	@ (80018f8 <HAL_I2C_MspInit+0x1ac>)
 80018c2:	639a      	str	r2, [r3, #56]	@ 0x38
 80018c4:	4a0c      	ldr	r2, [pc, #48]	@ (80018f8 <HAL_I2C_MspInit+0x1ac>)
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	6293      	str	r3, [r2, #40]	@ 0x28

    /* I2C3 interrupt Init */
    HAL_NVIC_SetPriority(I2C3_EV_IRQn, 5, 0);
 80018ca:	2200      	movs	r2, #0
 80018cc:	2105      	movs	r1, #5
 80018ce:	2048      	movs	r0, #72	@ 0x48
 80018d0:	f001 fc8e 	bl	80031f0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C3_EV_IRQn);
 80018d4:	2048      	movs	r0, #72	@ 0x48
 80018d6:	f001 fca7 	bl	8003228 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }
}
 80018da:	bf00      	nop
 80018dc:	3780      	adds	r7, #128	@ 0x80
 80018de:	46bd      	mov	sp, r7
 80018e0:	bd80      	pop	{r7, pc}
 80018e2:	bf00      	nop
 80018e4:	40005c00 	.word	0x40005c00
 80018e8:	40021000 	.word	0x40021000
 80018ec:	48000400 	.word	0x48000400
 80018f0:	20005a50 	.word	0x20005a50
 80018f4:	40020030 	.word	0x40020030
 80018f8:	20005a98 	.word	0x20005a98
 80018fc:	4002001c 	.word	0x4002001c

08001900 <enc_timer_callback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void enc_timer_callback(rcl_timer_t * timer, int64_t last_call_time)
{
 8001900:	b590      	push	{r4, r7, lr}
 8001902:	b087      	sub	sp, #28
 8001904:	af00      	add	r7, sp, #0
 8001906:	60f8      	str	r0, [r7, #12]
 8001908:	e9c7 2300 	strd	r2, r3, [r7]
	static bool isfirst_callback = true;
	RCLC_UNUSED(last_call_time);
	if (timer != NULL)
 800190c:	68fb      	ldr	r3, [r7, #12]
 800190e:	2b00      	cmp	r3, #0
 8001910:	f000 80d5 	beq.w	8001abe <enc_timer_callback+0x1be>
	{

#ifdef SENSOR_ON
		switch (state)
 8001914:	4b6c      	ldr	r3, [pc, #432]	@ (8001ac8 <enc_timer_callback+0x1c8>)
 8001916:	781b      	ldrb	r3, [r3, #0]
 8001918:	2b03      	cmp	r3, #3
 800191a:	f200 8099 	bhi.w	8001a50 <enc_timer_callback+0x150>
 800191e:	a201      	add	r2, pc, #4	@ (adr r2, 8001924 <enc_timer_callback+0x24>)
 8001920:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001924:	08001935 	.word	0x08001935
 8001928:	080019cf 	.word	0x080019cf
 800192c:	08001a05 	.word	0x08001a05
 8001930:	08001981 	.word	0x08001981
		{
		case forward:
			if (bldc_cmd > 0) RC_Write(&bldc, vel2rc(bldc_cmd));
 8001934:	4b65      	ldr	r3, [pc, #404]	@ (8001acc <enc_timer_callback+0x1cc>)
 8001936:	edd3 7a00 	vldr	s15, [r3]
 800193a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800193e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001942:	dd0e      	ble.n	8001962 <enc_timer_callback+0x62>
 8001944:	4b61      	ldr	r3, [pc, #388]	@ (8001acc <enc_timer_callback+0x1cc>)
 8001946:	edd3 7a00 	vldr	s15, [r3]
 800194a:	eeb0 0a67 	vmov.f32	s0, s15
 800194e:	f000 fb77 	bl	8002040 <vel2rc>
 8001952:	eef0 7a40 	vmov.f32	s15, s0
 8001956:	eeb0 0a67 	vmov.f32	s0, s15
 800195a:	485d      	ldr	r0, [pc, #372]	@ (8001ad0 <enc_timer_callback+0x1d0>)
 800195c:	f008 fdd8 	bl	800a510 <RC_Write>
			else {
				RC_Write(&bldc, vel2rc(0));
				state = brake;
			}
			break;
 8001960:	e076      	b.n	8001a50 <enc_timer_callback+0x150>
				RC_Write(&bldc, vel2rc(0));
 8001962:	ed9f 0a5c 	vldr	s0, [pc, #368]	@ 8001ad4 <enc_timer_callback+0x1d4>
 8001966:	f000 fb6b 	bl	8002040 <vel2rc>
 800196a:	eef0 7a40 	vmov.f32	s15, s0
 800196e:	eeb0 0a67 	vmov.f32	s0, s15
 8001972:	4857      	ldr	r0, [pc, #348]	@ (8001ad0 <enc_timer_callback+0x1d0>)
 8001974:	f008 fdcc 	bl	800a510 <RC_Write>
				state = brake;
 8001978:	4b53      	ldr	r3, [pc, #332]	@ (8001ac8 <enc_timer_callback+0x1c8>)
 800197a:	2203      	movs	r2, #3
 800197c:	701a      	strb	r2, [r3, #0]
			break;
 800197e:	e067      	b.n	8001a50 <enc_timer_callback+0x150>
		case brake:
			RC_Write(&bldc, vel2rc(bldc_cmd));
 8001980:	4b52      	ldr	r3, [pc, #328]	@ (8001acc <enc_timer_callback+0x1cc>)
 8001982:	edd3 7a00 	vldr	s15, [r3]
 8001986:	eeb0 0a67 	vmov.f32	s0, s15
 800198a:	f000 fb59 	bl	8002040 <vel2rc>
 800198e:	eef0 7a40 	vmov.f32	s15, s0
 8001992:	eeb0 0a67 	vmov.f32	s0, s15
 8001996:	484e      	ldr	r0, [pc, #312]	@ (8001ad0 <enc_timer_callback+0x1d0>)
 8001998:	f008 fdba 	bl	800a510 <RC_Write>
			if (bldc_cmd > 0) state = forward;
 800199c:	4b4b      	ldr	r3, [pc, #300]	@ (8001acc <enc_timer_callback+0x1cc>)
 800199e:	edd3 7a00 	vldr	s15, [r3]
 80019a2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80019a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80019aa:	dd03      	ble.n	80019b4 <enc_timer_callback+0xb4>
 80019ac:	4b46      	ldr	r3, [pc, #280]	@ (8001ac8 <enc_timer_callback+0x1c8>)
 80019ae:	2200      	movs	r2, #0
 80019b0:	701a      	strb	r2, [r3, #0]
			else if (bldc_cmd < 0) state = backward_1;
			break;
 80019b2:	e04d      	b.n	8001a50 <enc_timer_callback+0x150>
			else if (bldc_cmd < 0) state = backward_1;
 80019b4:	4b45      	ldr	r3, [pc, #276]	@ (8001acc <enc_timer_callback+0x1cc>)
 80019b6:	edd3 7a00 	vldr	s15, [r3]
 80019ba:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80019be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80019c2:	d400      	bmi.n	80019c6 <enc_timer_callback+0xc6>
			break;
 80019c4:	e044      	b.n	8001a50 <enc_timer_callback+0x150>
			else if (bldc_cmd < 0) state = backward_1;
 80019c6:	4b40      	ldr	r3, [pc, #256]	@ (8001ac8 <enc_timer_callback+0x1c8>)
 80019c8:	2201      	movs	r2, #1
 80019ca:	701a      	strb	r2, [r3, #0]
			break;
 80019cc:	e040      	b.n	8001a50 <enc_timer_callback+0x150>
		case backward_1:
			RC_Write(&bldc, vel2rc(0));
 80019ce:	ed9f 0a41 	vldr	s0, [pc, #260]	@ 8001ad4 <enc_timer_callback+0x1d4>
 80019d2:	f000 fb35 	bl	8002040 <vel2rc>
 80019d6:	eef0 7a40 	vmov.f32	s15, s0
 80019da:	eeb0 0a67 	vmov.f32	s0, s15
 80019de:	483c      	ldr	r0, [pc, #240]	@ (8001ad0 <enc_timer_callback+0x1d0>)
 80019e0:	f008 fd96 	bl	800a510 <RC_Write>
			if (bldc_cmd < 0) state = backward_2;
 80019e4:	4b39      	ldr	r3, [pc, #228]	@ (8001acc <enc_timer_callback+0x1cc>)
 80019e6:	edd3 7a00 	vldr	s15, [r3]
 80019ea:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80019ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80019f2:	d503      	bpl.n	80019fc <enc_timer_callback+0xfc>
 80019f4:	4b34      	ldr	r3, [pc, #208]	@ (8001ac8 <enc_timer_callback+0x1c8>)
 80019f6:	2202      	movs	r2, #2
 80019f8:	701a      	strb	r2, [r3, #0]
			else state = brake;
			break;
 80019fa:	e029      	b.n	8001a50 <enc_timer_callback+0x150>
			else state = brake;
 80019fc:	4b32      	ldr	r3, [pc, #200]	@ (8001ac8 <enc_timer_callback+0x1c8>)
 80019fe:	2203      	movs	r2, #3
 8001a00:	701a      	strb	r2, [r3, #0]
			break;
 8001a02:	e025      	b.n	8001a50 <enc_timer_callback+0x150>
		case backward_2:
			if (bldc_cmd < 0) RC_Write(&bldc, vel2rc(bldc_cmd));
 8001a04:	4b31      	ldr	r3, [pc, #196]	@ (8001acc <enc_timer_callback+0x1cc>)
 8001a06:	edd3 7a00 	vldr	s15, [r3]
 8001a0a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001a0e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a12:	d50e      	bpl.n	8001a32 <enc_timer_callback+0x132>
 8001a14:	4b2d      	ldr	r3, [pc, #180]	@ (8001acc <enc_timer_callback+0x1cc>)
 8001a16:	edd3 7a00 	vldr	s15, [r3]
 8001a1a:	eeb0 0a67 	vmov.f32	s0, s15
 8001a1e:	f000 fb0f 	bl	8002040 <vel2rc>
 8001a22:	eef0 7a40 	vmov.f32	s15, s0
 8001a26:	eeb0 0a67 	vmov.f32	s0, s15
 8001a2a:	4829      	ldr	r0, [pc, #164]	@ (8001ad0 <enc_timer_callback+0x1d0>)
 8001a2c:	f008 fd70 	bl	800a510 <RC_Write>
			else {
				RC_Write(&bldc, vel2rc(0));
				state = brake;
			}
			break;
 8001a30:	e00d      	b.n	8001a4e <enc_timer_callback+0x14e>
				RC_Write(&bldc, vel2rc(0));
 8001a32:	ed9f 0a28 	vldr	s0, [pc, #160]	@ 8001ad4 <enc_timer_callback+0x1d4>
 8001a36:	f000 fb03 	bl	8002040 <vel2rc>
 8001a3a:	eef0 7a40 	vmov.f32	s15, s0
 8001a3e:	eeb0 0a67 	vmov.f32	s0, s15
 8001a42:	4823      	ldr	r0, [pc, #140]	@ (8001ad0 <enc_timer_callback+0x1d0>)
 8001a44:	f008 fd64 	bl	800a510 <RC_Write>
				state = brake;
 8001a48:	4b1f      	ldr	r3, [pc, #124]	@ (8001ac8 <enc_timer_callback+0x1c8>)
 8001a4a:	2203      	movs	r2, #3
 8001a4c:	701a      	strb	r2, [r3, #0]
			break;
 8001a4e:	bf00      	nop
		}
		RC_Write(&servo, ang2rc(servo_cmd));
 8001a50:	4b21      	ldr	r3, [pc, #132]	@ (8001ad8 <enc_timer_callback+0x1d8>)
 8001a52:	edd3 7a00 	vldr	s15, [r3]
 8001a56:	eeb0 0a67 	vmov.f32	s0, s15
 8001a5a:	f000 fbc9 	bl	80021f0 <ang2rc>
 8001a5e:	eef0 7a40 	vmov.f32	s15, s0
 8001a62:	eeb0 0a67 	vmov.f32	s0, s15
 8001a66:	481d      	ldr	r0, [pc, #116]	@ (8001adc <enc_timer_callback+0x1dc>)
 8001a68:	f008 fd52 	bl	800a510 <RC_Write>

		enc_msg.data.data[0] = __HAL_TIM_GET_COUNTER(&htim1);
 8001a6c:	4b1c      	ldr	r3, [pc, #112]	@ (8001ae0 <enc_timer_callback+0x1e0>)
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a72:	4a1c      	ldr	r2, [pc, #112]	@ (8001ae4 <enc_timer_callback+0x1e4>)
 8001a74:	6914      	ldr	r4, [r2, #16]
 8001a76:	4618      	mov	r0, r3
 8001a78:	f7fe fd54 	bl	8000524 <__aeabi_ui2d>
 8001a7c:	4602      	mov	r2, r0
 8001a7e:	460b      	mov	r3, r1
 8001a80:	e9c4 2300 	strd	r2, r3, [r4]
#endif
		if (!isfirst_callback) RCSOFTCHECK(rcl_publish(&enc_publisher, &enc_msg, NULL))
 8001a84:	4b18      	ldr	r3, [pc, #96]	@ (8001ae8 <enc_timer_callback+0x1e8>)
 8001a86:	781b      	ldrb	r3, [r3, #0]
 8001a88:	f083 0301 	eor.w	r3, r3, #1
 8001a8c:	b2db      	uxtb	r3, r3
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	d006      	beq.n	8001aa0 <enc_timer_callback+0x1a0>
 8001a92:	2200      	movs	r2, #0
 8001a94:	4913      	ldr	r1, [pc, #76]	@ (8001ae4 <enc_timer_callback+0x1e4>)
 8001a96:	4815      	ldr	r0, [pc, #84]	@ (8001aec <enc_timer_callback+0x1ec>)
 8001a98:	f00b fc98 	bl	800d3cc <rcl_publish>
 8001a9c:	6178      	str	r0, [r7, #20]
		else isfirst_callback = !isfirst_callback;
	}
}
 8001a9e:	e00e      	b.n	8001abe <enc_timer_callback+0x1be>
		else isfirst_callback = !isfirst_callback;
 8001aa0:	4b11      	ldr	r3, [pc, #68]	@ (8001ae8 <enc_timer_callback+0x1e8>)
 8001aa2:	781b      	ldrb	r3, [r3, #0]
 8001aa4:	2b00      	cmp	r3, #0
 8001aa6:	bf14      	ite	ne
 8001aa8:	2301      	movne	r3, #1
 8001aaa:	2300      	moveq	r3, #0
 8001aac:	b2db      	uxtb	r3, r3
 8001aae:	f083 0301 	eor.w	r3, r3, #1
 8001ab2:	b2db      	uxtb	r3, r3
 8001ab4:	f003 0301 	and.w	r3, r3, #1
 8001ab8:	b2da      	uxtb	r2, r3
 8001aba:	4b0b      	ldr	r3, [pc, #44]	@ (8001ae8 <enc_timer_callback+0x1e8>)
 8001abc:	701a      	strb	r2, [r3, #0]
}
 8001abe:	bf00      	nop
 8001ac0:	371c      	adds	r7, #28
 8001ac2:	46bd      	mov	sp, r7
 8001ac4:	bd90      	pop	{r4, r7, pc}
 8001ac6:	bf00      	nop
 8001ac8:	20000016 	.word	0x20000016
 8001acc:	20005ae4 	.word	0x20005ae4
 8001ad0:	20000568 	.word	0x20000568
 8001ad4:	00000000 	.word	0x00000000
 8001ad8:	20005ae0 	.word	0x20005ae0
 8001adc:	20000558 	.word	0x20000558
 8001ae0:	20005b44 	.word	0x20005b44
 8001ae4:	20000418 	.word	0x20000418
 8001ae8:	20000017 	.word	0x20000017
 8001aec:	20000404 	.word	0x20000404

08001af0 <imu_timer_callback>:

void imu_timer_callback(rcl_timer_t * timer, int64_t last_call_time)
{
 8001af0:	b580      	push	{r7, lr}
 8001af2:	b086      	sub	sp, #24
 8001af4:	af00      	add	r7, sp, #0
 8001af6:	60f8      	str	r0, [r7, #12]
 8001af8:	e9c7 2300 	strd	r2, r3, [r7]
	static bool isfirst_callback = true;
	RCLC_UNUSED(last_call_time);
	if (timer != NULL)
 8001afc:	68fb      	ldr	r3, [r7, #12]
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	d07f      	beq.n	8001c02 <imu_timer_callback+0x112>
	{
#ifdef SENSOR_ON
		if (bno.flag == HAL_OK)
 8001b02:	4b42      	ldr	r3, [pc, #264]	@ (8001c0c <imu_timer_callback+0x11c>)
 8001b04:	799b      	ldrb	r3, [r3, #6]
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	d106      	bne.n	8001b18 <imu_timer_callback+0x28>
		{
			BNO055_Read_DMA(&bno, 0);
 8001b0a:	2100      	movs	r1, #0
 8001b0c:	483f      	ldr	r0, [pc, #252]	@ (8001c0c <imu_timer_callback+0x11c>)
 8001b0e:	f008 f949 	bl	8009da4 <BNO055_Read_DMA>
			bno.flag = HAL_BUSY;
 8001b12:	4b3e      	ldr	r3, [pc, #248]	@ (8001c0c <imu_timer_callback+0x11c>)
 8001b14:	2202      	movs	r2, #2
 8001b16:	719a      	strb	r2, [r3, #6]
		}
		imu_msg.data.data[0] = bno.gyro.x;
 8001b18:	4b3d      	ldr	r3, [pc, #244]	@ (8001c10 <imu_timer_callback+0x120>)
 8001b1a:	6919      	ldr	r1, [r3, #16]
 8001b1c:	4b3b      	ldr	r3, [pc, #236]	@ (8001c0c <imu_timer_callback+0x11c>)
 8001b1e:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 8001b22:	e9c1 2300 	strd	r2, r3, [r1]
		imu_msg.data.data[1] = bno.gyro.y;
 8001b26:	4b3a      	ldr	r3, [pc, #232]	@ (8001c10 <imu_timer_callback+0x120>)
 8001b28:	691b      	ldr	r3, [r3, #16]
 8001b2a:	f103 0108 	add.w	r1, r3, #8
 8001b2e:	4b37      	ldr	r3, [pc, #220]	@ (8001c0c <imu_timer_callback+0x11c>)
 8001b30:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	@ 0x40
 8001b34:	e9c1 2300 	strd	r2, r3, [r1]
		imu_msg.data.data[2] = bno.gyro.z;
 8001b38:	4b35      	ldr	r3, [pc, #212]	@ (8001c10 <imu_timer_callback+0x120>)
 8001b3a:	691b      	ldr	r3, [r3, #16]
 8001b3c:	f103 0110 	add.w	r1, r3, #16
 8001b40:	4b32      	ldr	r3, [pc, #200]	@ (8001c0c <imu_timer_callback+0x11c>)
 8001b42:	e9d3 2312 	ldrd	r2, r3, [r3, #72]	@ 0x48
 8001b46:	e9c1 2300 	strd	r2, r3, [r1]
		imu_msg.data.data[3] = bno.lin_acc.x;
 8001b4a:	4b31      	ldr	r3, [pc, #196]	@ (8001c10 <imu_timer_callback+0x120>)
 8001b4c:	691b      	ldr	r3, [r3, #16]
 8001b4e:	f103 0118 	add.w	r1, r3, #24
 8001b52:	4b2e      	ldr	r3, [pc, #184]	@ (8001c0c <imu_timer_callback+0x11c>)
 8001b54:	e9d3 2322 	ldrd	r2, r3, [r3, #136]	@ 0x88
 8001b58:	e9c1 2300 	strd	r2, r3, [r1]
		imu_msg.data.data[4] = bno.lin_acc.y;
 8001b5c:	4b2c      	ldr	r3, [pc, #176]	@ (8001c10 <imu_timer_callback+0x120>)
 8001b5e:	691b      	ldr	r3, [r3, #16]
 8001b60:	f103 0120 	add.w	r1, r3, #32
 8001b64:	4b29      	ldr	r3, [pc, #164]	@ (8001c0c <imu_timer_callback+0x11c>)
 8001b66:	e9d3 2324 	ldrd	r2, r3, [r3, #144]	@ 0x90
 8001b6a:	e9c1 2300 	strd	r2, r3, [r1]
		imu_msg.data.data[5] = bno.lin_acc.z;
 8001b6e:	4b28      	ldr	r3, [pc, #160]	@ (8001c10 <imu_timer_callback+0x120>)
 8001b70:	691b      	ldr	r3, [r3, #16]
 8001b72:	f103 0128 	add.w	r1, r3, #40	@ 0x28
 8001b76:	4b25      	ldr	r3, [pc, #148]	@ (8001c0c <imu_timer_callback+0x11c>)
 8001b78:	e9d3 2326 	ldrd	r2, r3, [r3, #152]	@ 0x98
 8001b7c:	e9c1 2300 	strd	r2, r3, [r1]
		imu_msg.data.data[6] = bno.quat.x;
 8001b80:	4b23      	ldr	r3, [pc, #140]	@ (8001c10 <imu_timer_callback+0x120>)
 8001b82:	691b      	ldr	r3, [r3, #16]
 8001b84:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8001b88:	4b20      	ldr	r3, [pc, #128]	@ (8001c0c <imu_timer_callback+0x11c>)
 8001b8a:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	@ 0x68
 8001b8e:	e9c1 2300 	strd	r2, r3, [r1]
		imu_msg.data.data[7] = bno.quat.y;
 8001b92:	4b1f      	ldr	r3, [pc, #124]	@ (8001c10 <imu_timer_callback+0x120>)
 8001b94:	691b      	ldr	r3, [r3, #16]
 8001b96:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 8001b9a:	4b1c      	ldr	r3, [pc, #112]	@ (8001c0c <imu_timer_callback+0x11c>)
 8001b9c:	e9d3 231c 	ldrd	r2, r3, [r3, #112]	@ 0x70
 8001ba0:	e9c1 2300 	strd	r2, r3, [r1]
		imu_msg.data.data[8] = bno.quat.z;
 8001ba4:	4b1a      	ldr	r3, [pc, #104]	@ (8001c10 <imu_timer_callback+0x120>)
 8001ba6:	691b      	ldr	r3, [r3, #16]
 8001ba8:	f103 0140 	add.w	r1, r3, #64	@ 0x40
 8001bac:	4b17      	ldr	r3, [pc, #92]	@ (8001c0c <imu_timer_callback+0x11c>)
 8001bae:	e9d3 231e 	ldrd	r2, r3, [r3, #120]	@ 0x78
 8001bb2:	e9c1 2300 	strd	r2, r3, [r1]
		imu_msg.data.data[9] = bno.quat.w;
 8001bb6:	4b16      	ldr	r3, [pc, #88]	@ (8001c10 <imu_timer_callback+0x120>)
 8001bb8:	691b      	ldr	r3, [r3, #16]
 8001bba:	f103 0148 	add.w	r1, r3, #72	@ 0x48
 8001bbe:	4b13      	ldr	r3, [pc, #76]	@ (8001c0c <imu_timer_callback+0x11c>)
 8001bc0:	e9d3 2320 	ldrd	r2, r3, [r3, #128]	@ 0x80
 8001bc4:	e9c1 2300 	strd	r2, r3, [r1]
#endif
		if (!isfirst_callback) RCSOFTCHECK(rcl_publish(&imu_publisher, &imu_msg, NULL))
 8001bc8:	4b12      	ldr	r3, [pc, #72]	@ (8001c14 <imu_timer_callback+0x124>)
 8001bca:	781b      	ldrb	r3, [r3, #0]
 8001bcc:	f083 0301 	eor.w	r3, r3, #1
 8001bd0:	b2db      	uxtb	r3, r3
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	d006      	beq.n	8001be4 <imu_timer_callback+0xf4>
 8001bd6:	2200      	movs	r2, #0
 8001bd8:	490d      	ldr	r1, [pc, #52]	@ (8001c10 <imu_timer_callback+0x120>)
 8001bda:	480f      	ldr	r0, [pc, #60]	@ (8001c18 <imu_timer_callback+0x128>)
 8001bdc:	f00b fbf6 	bl	800d3cc <rcl_publish>
 8001be0:	6178      	str	r0, [r7, #20]
		else isfirst_callback = !isfirst_callback;
	}
}
 8001be2:	e00e      	b.n	8001c02 <imu_timer_callback+0x112>
		else isfirst_callback = !isfirst_callback;
 8001be4:	4b0b      	ldr	r3, [pc, #44]	@ (8001c14 <imu_timer_callback+0x124>)
 8001be6:	781b      	ldrb	r3, [r3, #0]
 8001be8:	2b00      	cmp	r3, #0
 8001bea:	bf14      	ite	ne
 8001bec:	2301      	movne	r3, #1
 8001bee:	2300      	moveq	r3, #0
 8001bf0:	b2db      	uxtb	r3, r3
 8001bf2:	f083 0301 	eor.w	r3, r3, #1
 8001bf6:	b2db      	uxtb	r3, r3
 8001bf8:	f003 0301 	and.w	r3, r3, #1
 8001bfc:	b2da      	uxtb	r2, r3
 8001bfe:	4b05      	ldr	r3, [pc, #20]	@ (8001c14 <imu_timer_callback+0x124>)
 8001c00:	701a      	strb	r2, [r3, #0]
}
 8001c02:	bf00      	nop
 8001c04:	3718      	adds	r7, #24
 8001c06:	46bd      	mov	sp, r7
 8001c08:	bd80      	pop	{r7, pc}
 8001c0a:	bf00      	nop
 8001c0c:	20000470 	.word	0x20000470
 8001c10:	20000434 	.word	0x20000434
 8001c14:	20000018 	.word	0x20000018
 8001c18:	20000408 	.word	0x20000408

08001c1c <subscription_callback>:

void subscription_callback(const void * msgin)
{
 8001c1c:	b580      	push	{r7, lr}
 8001c1e:	b084      	sub	sp, #16
 8001c20:	af00      	add	r7, sp, #0
 8001c22:	6078      	str	r0, [r7, #4]
	const std_msgs__msg__Float64MultiArray *cmd_msg = (const std_msgs__msg__Float64MultiArray *)msgin;
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	60fb      	str	r3, [r7, #12]

	servo_cmd = cmd_msg->data.data[0];
 8001c28:	68fb      	ldr	r3, [r7, #12]
 8001c2a:	691b      	ldr	r3, [r3, #16]
 8001c2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c30:	4610      	mov	r0, r2
 8001c32:	4619      	mov	r1, r3
 8001c34:	f7fe ffc0 	bl	8000bb8 <__aeabi_d2f>
 8001c38:	4603      	mov	r3, r0
 8001c3a:	4a09      	ldr	r2, [pc, #36]	@ (8001c60 <subscription_callback+0x44>)
 8001c3c:	6013      	str	r3, [r2, #0]
	bldc_cmd = cmd_msg->data.data[1];
 8001c3e:	68fb      	ldr	r3, [r7, #12]
 8001c40:	691b      	ldr	r3, [r3, #16]
 8001c42:	3308      	adds	r3, #8
 8001c44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c48:	4610      	mov	r0, r2
 8001c4a:	4619      	mov	r1, r3
 8001c4c:	f7fe ffb4 	bl	8000bb8 <__aeabi_d2f>
 8001c50:	4603      	mov	r3, r0
 8001c52:	4a04      	ldr	r2, [pc, #16]	@ (8001c64 <subscription_callback+0x48>)
 8001c54:	6013      	str	r3, [r2, #0]
}
 8001c56:	bf00      	nop
 8001c58:	3710      	adds	r7, #16
 8001c5a:	46bd      	mov	sp, r7
 8001c5c:	bd80      	pop	{r7, pc}
 8001c5e:	bf00      	nop
 8001c60:	20005ae0 	.word	0x20005ae0
 8001c64:	20005ae4 	.word	0x20005ae4

08001c68 <StartDefaultTask>:

void StartDefaultTask(void *argument)
{
 8001c68:	b5b0      	push	{r4, r5, r7, lr}
 8001c6a:	b090      	sub	sp, #64	@ 0x40
 8001c6c:	af02      	add	r7, sp, #8
 8001c6e:	61f8      	str	r0, [r7, #28]
	rmw_uros_set_custom_transport(
 8001c70:	4b5d      	ldr	r3, [pc, #372]	@ (8001de8 <StartDefaultTask+0x180>)
 8001c72:	9301      	str	r3, [sp, #4]
 8001c74:	4b5d      	ldr	r3, [pc, #372]	@ (8001dec <StartDefaultTask+0x184>)
 8001c76:	9300      	str	r3, [sp, #0]
 8001c78:	4b5d      	ldr	r3, [pc, #372]	@ (8001df0 <StartDefaultTask+0x188>)
 8001c7a:	4a5e      	ldr	r2, [pc, #376]	@ (8001df4 <StartDefaultTask+0x18c>)
 8001c7c:	495e      	ldr	r1, [pc, #376]	@ (8001df8 <StartDefaultTask+0x190>)
 8001c7e:	2001      	movs	r0, #1
 8001c80:	f00c fc36 	bl	800e4f0 <rmw_uros_set_custom_transport>
			cubemx_transport_open,
			cubemx_transport_close,
			cubemx_transport_write,
			cubemx_transport_read);

	rcl_allocator_t freeRTOS_allocator = rcutils_get_zero_initialized_allocator();
 8001c84:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001c88:	4618      	mov	r0, r3
 8001c8a:	f00c fb63 	bl	800e354 <rcutils_get_zero_initialized_allocator>
	freeRTOS_allocator.allocate = microros_allocate;
 8001c8e:	4b5b      	ldr	r3, [pc, #364]	@ (8001dfc <StartDefaultTask+0x194>)
 8001c90:	627b      	str	r3, [r7, #36]	@ 0x24
	freeRTOS_allocator.deallocate = microros_deallocate;
 8001c92:	4b5b      	ldr	r3, [pc, #364]	@ (8001e00 <StartDefaultTask+0x198>)
 8001c94:	62bb      	str	r3, [r7, #40]	@ 0x28
	freeRTOS_allocator.reallocate = microros_reallocate;
 8001c96:	4b5b      	ldr	r3, [pc, #364]	@ (8001e04 <StartDefaultTask+0x19c>)
 8001c98:	62fb      	str	r3, [r7, #44]	@ 0x2c
	freeRTOS_allocator.zero_allocate =  microros_zero_allocate;
 8001c9a:	4b5b      	ldr	r3, [pc, #364]	@ (8001e08 <StartDefaultTask+0x1a0>)
 8001c9c:	633b      	str	r3, [r7, #48]	@ 0x30
	if (!rcutils_set_default_allocator(&freeRTOS_allocator)) printf("Error on default allocators (line %d)\n", __LINE__);
 8001c9e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001ca2:	4618      	mov	r0, r3
 8001ca4:	f00c fb64 	bl	800e370 <rcutils_set_default_allocator>
 8001ca8:	4603      	mov	r3, r0
 8001caa:	f083 0301 	eor.w	r3, r3, #1
 8001cae:	b2db      	uxtb	r3, r3
 8001cb0:	2b00      	cmp	r3, #0
 8001cb2:	d003      	beq.n	8001cbc <StartDefaultTask+0x54>
 8001cb4:	21bb      	movs	r1, #187	@ 0xbb
 8001cb6:	4855      	ldr	r0, [pc, #340]	@ (8001e0c <StartDefaultTask+0x1a4>)
 8001cb8:	f019 fa98 	bl	801b1ec <iprintf>

	allocator = rcl_get_default_allocator();
 8001cbc:	4c54      	ldr	r4, [pc, #336]	@ (8001e10 <StartDefaultTask+0x1a8>)
 8001cbe:	463b      	mov	r3, r7
 8001cc0:	4618      	mov	r0, r3
 8001cc2:	f00c fb73 	bl	800e3ac <rcutils_get_default_allocator>
 8001cc6:	4625      	mov	r5, r4
 8001cc8:	463c      	mov	r4, r7
 8001cca:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001ccc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001cce:	6823      	ldr	r3, [r4, #0]
 8001cd0:	602b      	str	r3, [r5, #0]
	rclc_support_init(&support, 0, NULL, &allocator);
 8001cd2:	4b4f      	ldr	r3, [pc, #316]	@ (8001e10 <StartDefaultTask+0x1a8>)
 8001cd4:	2200      	movs	r2, #0
 8001cd6:	2100      	movs	r1, #0
 8001cd8:	484e      	ldr	r0, [pc, #312]	@ (8001e14 <StartDefaultTask+0x1ac>)
 8001cda:	f00c fa15 	bl	800e108 <rclc_support_init>
	rclc_node_init_default(&node, "mcu_node", "", &support);
 8001cde:	4b4d      	ldr	r3, [pc, #308]	@ (8001e14 <StartDefaultTask+0x1ac>)
 8001ce0:	4a4d      	ldr	r2, [pc, #308]	@ (8001e18 <StartDefaultTask+0x1b0>)
 8001ce2:	494e      	ldr	r1, [pc, #312]	@ (8001e1c <StartDefaultTask+0x1b4>)
 8001ce4:	484e      	ldr	r0, [pc, #312]	@ (8001e20 <StartDefaultTask+0x1b8>)
 8001ce6:	f00c fa59 	bl	800e19c <rclc_node_init_default>

	rclc_publisher_init_default(
 8001cea:	f00d f92d 	bl	800ef48 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Float64MultiArray>
 8001cee:	4602      	mov	r2, r0
 8001cf0:	4b4c      	ldr	r3, [pc, #304]	@ (8001e24 <StartDefaultTask+0x1bc>)
 8001cf2:	494b      	ldr	r1, [pc, #300]	@ (8001e20 <StartDefaultTask+0x1b8>)
 8001cf4:	484c      	ldr	r0, [pc, #304]	@ (8001e28 <StartDefaultTask+0x1c0>)
 8001cf6:	f00c fa8d 	bl	800e214 <rclc_publisher_init_default>
			&enc_publisher,
			&node,
			ROSIDL_GET_MSG_TYPE_SUPPORT(std_msgs, msg, Float64MultiArray),
			"enc_raw");
	rclc_publisher_init_default(
 8001cfa:	f00d f925 	bl	800ef48 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Float64MultiArray>
 8001cfe:	4602      	mov	r2, r0
 8001d00:	4b4a      	ldr	r3, [pc, #296]	@ (8001e2c <StartDefaultTask+0x1c4>)
 8001d02:	4947      	ldr	r1, [pc, #284]	@ (8001e20 <StartDefaultTask+0x1b8>)
 8001d04:	484a      	ldr	r0, [pc, #296]	@ (8001e30 <StartDefaultTask+0x1c8>)
 8001d06:	f00c fa85 	bl	800e214 <rclc_publisher_init_default>
			&imu_publisher,
			&node,
			ROSIDL_GET_MSG_TYPE_SUPPORT(std_msgs, msg, Float64MultiArray),
			"imu_raw");

	rclc_subscription_init_default(
 8001d0a:	f00d f91d 	bl	800ef48 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Float64MultiArray>
 8001d0e:	4602      	mov	r2, r0
 8001d10:	4b48      	ldr	r3, [pc, #288]	@ (8001e34 <StartDefaultTask+0x1cc>)
 8001d12:	4943      	ldr	r1, [pc, #268]	@ (8001e20 <StartDefaultTask+0x1b8>)
 8001d14:	4848      	ldr	r0, [pc, #288]	@ (8001e38 <StartDefaultTask+0x1d0>)
 8001d16:	f00c fab1 	bl	800e27c <rclc_subscription_init_default>
			&cmd_subscription,
			&node,
			ROSIDL_GET_MSG_TYPE_SUPPORT(std_msgs, msg, Float64MultiArray),
			"mcu_cmd");

	rclc_timer_init_default(
 8001d1a:	4b48      	ldr	r3, [pc, #288]	@ (8001e3c <StartDefaultTask+0x1d4>)
 8001d1c:	9300      	str	r3, [sp, #0]
 8001d1e:	a330      	add	r3, pc, #192	@ (adr r3, 8001de0 <StartDefaultTask+0x178>)
 8001d20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d24:	493b      	ldr	r1, [pc, #236]	@ (8001e14 <StartDefaultTask+0x1ac>)
 8001d26:	4846      	ldr	r0, [pc, #280]	@ (8001e40 <StartDefaultTask+0x1d8>)
 8001d28:	f00c fadc 	bl	800e2e4 <rclc_timer_init_default>
			&enc_timer,
			&support,
			RCL_MS_TO_NS(20),
			enc_timer_callback);

	rclc_timer_init_default(&imu_timer,
 8001d2c:	4b45      	ldr	r3, [pc, #276]	@ (8001e44 <StartDefaultTask+0x1dc>)
 8001d2e:	9300      	str	r3, [sp, #0]
 8001d30:	4a45      	ldr	r2, [pc, #276]	@ (8001e48 <StartDefaultTask+0x1e0>)
 8001d32:	f04f 0300 	mov.w	r3, #0
 8001d36:	4937      	ldr	r1, [pc, #220]	@ (8001e14 <StartDefaultTask+0x1ac>)
 8001d38:	4844      	ldr	r0, [pc, #272]	@ (8001e4c <StartDefaultTask+0x1e4>)
 8001d3a:	f00c fad3 	bl	800e2e4 <rclc_timer_init_default>
			&support,
			RCL_MS_TO_NS(10),
			imu_timer_callback);

	enc_msg.data.capacity = 1;
 8001d3e:	4b44      	ldr	r3, [pc, #272]	@ (8001e50 <StartDefaultTask+0x1e8>)
 8001d40:	2201      	movs	r2, #1
 8001d42:	619a      	str	r2, [r3, #24]
	enc_msg.data.data = (double*) malloc(enc_msg.data.capacity * sizeof(double));
 8001d44:	4b42      	ldr	r3, [pc, #264]	@ (8001e50 <StartDefaultTask+0x1e8>)
 8001d46:	699b      	ldr	r3, [r3, #24]
 8001d48:	00db      	lsls	r3, r3, #3
 8001d4a:	4618      	mov	r0, r3
 8001d4c:	f018 ff5a 	bl	801ac04 <malloc>
 8001d50:	4603      	mov	r3, r0
 8001d52:	461a      	mov	r2, r3
 8001d54:	4b3e      	ldr	r3, [pc, #248]	@ (8001e50 <StartDefaultTask+0x1e8>)
 8001d56:	611a      	str	r2, [r3, #16]
	enc_msg.data.size = 1;
 8001d58:	4b3d      	ldr	r3, [pc, #244]	@ (8001e50 <StartDefaultTask+0x1e8>)
 8001d5a:	2201      	movs	r2, #1
 8001d5c:	615a      	str	r2, [r3, #20]

	imu_msg.data.capacity = 10;
 8001d5e:	4b3d      	ldr	r3, [pc, #244]	@ (8001e54 <StartDefaultTask+0x1ec>)
 8001d60:	220a      	movs	r2, #10
 8001d62:	619a      	str	r2, [r3, #24]
	imu_msg.data.data = (double*) malloc(imu_msg.data.capacity * sizeof(double));
 8001d64:	4b3b      	ldr	r3, [pc, #236]	@ (8001e54 <StartDefaultTask+0x1ec>)
 8001d66:	699b      	ldr	r3, [r3, #24]
 8001d68:	00db      	lsls	r3, r3, #3
 8001d6a:	4618      	mov	r0, r3
 8001d6c:	f018 ff4a 	bl	801ac04 <malloc>
 8001d70:	4603      	mov	r3, r0
 8001d72:	461a      	mov	r2, r3
 8001d74:	4b37      	ldr	r3, [pc, #220]	@ (8001e54 <StartDefaultTask+0x1ec>)
 8001d76:	611a      	str	r2, [r3, #16]
	imu_msg.data.size = 10;
 8001d78:	4b36      	ldr	r3, [pc, #216]	@ (8001e54 <StartDefaultTask+0x1ec>)
 8001d7a:	220a      	movs	r2, #10
 8001d7c:	615a      	str	r2, [r3, #20]

	cmd_msg.data.capacity = 2;
 8001d7e:	4b36      	ldr	r3, [pc, #216]	@ (8001e58 <StartDefaultTask+0x1f0>)
 8001d80:	2202      	movs	r2, #2
 8001d82:	619a      	str	r2, [r3, #24]
	cmd_msg.data.data = (double*) malloc(cmd_msg.data.capacity * sizeof(double));
 8001d84:	4b34      	ldr	r3, [pc, #208]	@ (8001e58 <StartDefaultTask+0x1f0>)
 8001d86:	699b      	ldr	r3, [r3, #24]
 8001d88:	00db      	lsls	r3, r3, #3
 8001d8a:	4618      	mov	r0, r3
 8001d8c:	f018 ff3a 	bl	801ac04 <malloc>
 8001d90:	4603      	mov	r3, r0
 8001d92:	461a      	mov	r2, r3
 8001d94:	4b30      	ldr	r3, [pc, #192]	@ (8001e58 <StartDefaultTask+0x1f0>)
 8001d96:	611a      	str	r2, [r3, #16]
	cmd_msg.data.size = 2;
 8001d98:	4b2f      	ldr	r3, [pc, #188]	@ (8001e58 <StartDefaultTask+0x1f0>)
 8001d9a:	2202      	movs	r2, #2
 8001d9c:	615a      	str	r2, [r3, #20]

	rclc_executor_init(&executor, &support.context, 3, &allocator);
 8001d9e:	4b1c      	ldr	r3, [pc, #112]	@ (8001e10 <StartDefaultTask+0x1a8>)
 8001da0:	2203      	movs	r2, #3
 8001da2:	491c      	ldr	r1, [pc, #112]	@ (8001e14 <StartDefaultTask+0x1ac>)
 8001da4:	482d      	ldr	r0, [pc, #180]	@ (8001e5c <StartDefaultTask+0x1f4>)
 8001da6:	f00b fe9f 	bl	800dae8 <rclc_executor_init>
	rclc_executor_add_subscription(&executor, &cmd_subscription, &cmd_msg, &subscription_callback, ON_NEW_DATA);
 8001daa:	2300      	movs	r3, #0
 8001dac:	9300      	str	r3, [sp, #0]
 8001dae:	4b2c      	ldr	r3, [pc, #176]	@ (8001e60 <StartDefaultTask+0x1f8>)
 8001db0:	4a29      	ldr	r2, [pc, #164]	@ (8001e58 <StartDefaultTask+0x1f0>)
 8001db2:	4921      	ldr	r1, [pc, #132]	@ (8001e38 <StartDefaultTask+0x1d0>)
 8001db4:	4829      	ldr	r0, [pc, #164]	@ (8001e5c <StartDefaultTask+0x1f4>)
 8001db6:	f00b ff07 	bl	800dbc8 <rclc_executor_add_subscription>
	rclc_executor_add_timer(&executor, &enc_timer);
 8001dba:	4921      	ldr	r1, [pc, #132]	@ (8001e40 <StartDefaultTask+0x1d8>)
 8001dbc:	4827      	ldr	r0, [pc, #156]	@ (8001e5c <StartDefaultTask+0x1f4>)
 8001dbe:	f00b ff37 	bl	800dc30 <rclc_executor_add_timer>
	rclc_executor_add_timer(&executor, &imu_timer);
 8001dc2:	4922      	ldr	r1, [pc, #136]	@ (8001e4c <StartDefaultTask+0x1e4>)
 8001dc4:	4825      	ldr	r0, [pc, #148]	@ (8001e5c <StartDefaultTask+0x1f4>)
 8001dc6:	f00b ff33 	bl	800dc30 <rclc_executor_add_timer>
	rclc_executor_spin(&executor);
 8001dca:	4824      	ldr	r0, [pc, #144]	@ (8001e5c <StartDefaultTask+0x1f4>)
 8001dcc:	f00c f95c 	bl	800e088 <rclc_executor_spin>

	while(1)
	{
		rclc_executor_spin_some(&executor, RCL_MS_TO_NS(1));
 8001dd0:	4a24      	ldr	r2, [pc, #144]	@ (8001e64 <StartDefaultTask+0x1fc>)
 8001dd2:	f04f 0300 	mov.w	r3, #0
 8001dd6:	4821      	ldr	r0, [pc, #132]	@ (8001e5c <StartDefaultTask+0x1f4>)
 8001dd8:	f00c f940 	bl	800e05c <rclc_executor_spin_some>
 8001ddc:	e7f8      	b.n	8001dd0 <StartDefaultTask+0x168>
 8001dde:	bf00      	nop
 8001de0:	01312d00 	.word	0x01312d00
 8001de4:	00000000 	.word	0x00000000
 8001de8:	080015a1 	.word	0x080015a1
 8001dec:	08001541 	.word	0x08001541
 8001df0:	08001521 	.word	0x08001521
 8001df4:	080014f5 	.word	0x080014f5
 8001df8:	20005c28 	.word	0x20005c28
 8001dfc:	080022ad 	.word	0x080022ad
 8001e00:	080022f1 	.word	0x080022f1
 8001e04:	08002329 	.word	0x08002329
 8001e08:	08002395 	.word	0x08002395
 8001e0c:	0801d33c 	.word	0x0801d33c
 8001e10:	200003e8 	.word	0x200003e8
 8001e14:	2000032c 	.word	0x2000032c
 8001e18:	0801d364 	.word	0x0801d364
 8001e1c:	0801d368 	.word	0x0801d368
 8001e20:	200003fc 	.word	0x200003fc
 8001e24:	0801d374 	.word	0x0801d374
 8001e28:	20000404 	.word	0x20000404
 8001e2c:	0801d37c 	.word	0x0801d37c
 8001e30:	20000408 	.word	0x20000408
 8001e34:	0801d384 	.word	0x0801d384
 8001e38:	2000040c 	.word	0x2000040c
 8001e3c:	08001901 	.word	0x08001901
 8001e40:	20000410 	.word	0x20000410
 8001e44:	08001af1 	.word	0x08001af1
 8001e48:	00989680 	.word	0x00989680
 8001e4c:	20000414 	.word	0x20000414
 8001e50:	20000418 	.word	0x20000418
 8001e54:	20000434 	.word	0x20000434
 8001e58:	20000450 	.word	0x20000450
 8001e5c:	20000360 	.word	0x20000360
 8001e60:	08001c1d 	.word	0x08001c1d
 8001e64:	000f4240 	.word	0x000f4240

08001e68 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001e68:	b580      	push	{r7, lr}
 8001e6a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001e6c:	f001 f8ab 	bl	8002fc6 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001e70:	f000 f86c 	bl	8001f4c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001e74:	f7ff fbfa 	bl	800166c <MX_GPIO_Init>
  MX_DMA_Init();
 8001e78:	f7ff fb06 	bl	8001488 <MX_DMA_Init>
  MX_USART2_UART_Init();
 8001e7c:	f000 ff7c 	bl	8002d78 <MX_USART2_UART_Init>
  MX_I2C3_Init();
 8001e80:	f7ff fc24 	bl	80016cc <MX_I2C3_Init>
  MX_TIM1_Init();
 8001e84:	f000 fd54 	bl	8002930 <MX_TIM1_Init>
  MX_TIM2_Init();
 8001e88:	f000 fdac 	bl	80029e4 <MX_TIM2_Init>
  MX_TIM15_Init();
 8001e8c:	f000 fdfe 	bl	8002a8c <MX_TIM15_Init>
  /* USER CODE BEGIN 2 */
#ifdef SENSOR_ON
  HALCHECK(BNO055_Init(&bno, &hi2c3, 0, NDOF))
 8001e90:	e002      	b.n	8001e98 <main+0x30>
 8001e92:	2064      	movs	r0, #100	@ 0x64
 8001e94:	f001 f8d0 	bl	8003038 <HAL_Delay>
 8001e98:	230c      	movs	r3, #12
 8001e9a:	2200      	movs	r2, #0
 8001e9c:	4923      	ldr	r1, [pc, #140]	@ (8001f2c <main+0xc4>)
 8001e9e:	4824      	ldr	r0, [pc, #144]	@ (8001f30 <main+0xc8>)
 8001ea0:	f007 fe9f 	bl	8009be2 <BNO055_Init>
 8001ea4:	4603      	mov	r3, r0
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	d1f3      	bne.n	8001e92 <main+0x2a>
#ifdef BNO_CALIB_ON
  BNO055_Calibrated(&bno, &bno_stat, &bno_off);
#endif
  BNO055_SetOffsets(&bno, &bno_off);
 8001eaa:	4922      	ldr	r1, [pc, #136]	@ (8001f34 <main+0xcc>)
 8001eac:	4820      	ldr	r0, [pc, #128]	@ (8001f30 <main+0xc8>)
 8001eae:	f008 f92f 	bl	800a110 <BNO055_SetOffsets>
  BNO055_SetAxis(&bno, P1_Config, P1_Sign);
 8001eb2:	2200      	movs	r2, #0
 8001eb4:	2124      	movs	r1, #36	@ 0x24
 8001eb6:	481e      	ldr	r0, [pc, #120]	@ (8001f30 <main+0xc8>)
 8001eb8:	f008 f9dd 	bl	800a276 <BNO055_SetAxis>
  HALCHECK(RC_Init(&servo, &htim15, TIM_CHANNEL_1, CPU_FREQ, true))
 8001ebc:	e002      	b.n	8001ec4 <main+0x5c>
 8001ebe:	2064      	movs	r0, #100	@ 0x64
 8001ec0:	f001 f8ba 	bl	8003038 <HAL_Delay>
 8001ec4:	2301      	movs	r3, #1
 8001ec6:	ed9f 0a1c 	vldr	s0, [pc, #112]	@ 8001f38 <main+0xd0>
 8001eca:	2200      	movs	r2, #0
 8001ecc:	491b      	ldr	r1, [pc, #108]	@ (8001f3c <main+0xd4>)
 8001ece:	481c      	ldr	r0, [pc, #112]	@ (8001f40 <main+0xd8>)
 8001ed0:	f008 fa58 	bl	800a384 <RC_Init>
 8001ed4:	4603      	mov	r3, r0
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d1f1      	bne.n	8001ebe <main+0x56>
  HALCHECK(RC_Init(&bldc, &htim15, TIM_CHANNEL_2, CPU_FREQ, false))
 8001eda:	e002      	b.n	8001ee2 <main+0x7a>
 8001edc:	2064      	movs	r0, #100	@ 0x64
 8001ede:	f001 f8ab 	bl	8003038 <HAL_Delay>
 8001ee2:	2300      	movs	r3, #0
 8001ee4:	ed9f 0a14 	vldr	s0, [pc, #80]	@ 8001f38 <main+0xd0>
 8001ee8:	2204      	movs	r2, #4
 8001eea:	4914      	ldr	r1, [pc, #80]	@ (8001f3c <main+0xd4>)
 8001eec:	4815      	ldr	r0, [pc, #84]	@ (8001f44 <main+0xdc>)
 8001eee:	f008 fa49 	bl	800a384 <RC_Init>
 8001ef2:	4603      	mov	r3, r0
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	d1f1      	bne.n	8001edc <main+0x74>
  RC_Set_Input_Range(&servo, 0.5, 2.5);
 8001ef8:	eef0 0a04 	vmov.f32	s1, #4	@ 0x40200000  2.5
 8001efc:	eeb6 0a00 	vmov.f32	s0, #96	@ 0x3f000000  0.5
 8001f00:	480f      	ldr	r0, [pc, #60]	@ (8001f40 <main+0xd8>)
 8001f02:	f008 facb 	bl	800a49c <RC_Set_Input_Range>
  RC_Set_Input_Range(&bldc, 0.5, 2.5);
 8001f06:	eef0 0a04 	vmov.f32	s1, #4	@ 0x40200000  2.5
 8001f0a:	eeb6 0a00 	vmov.f32	s0, #96	@ 0x3f000000  0.5
 8001f0e:	480d      	ldr	r0, [pc, #52]	@ (8001f44 <main+0xdc>)
 8001f10:	f008 fac4 	bl	800a49c <RC_Set_Input_Range>
  HAL_TIM_Encoder_Start(&htim1, TIM_CHANNEL_ALL);
 8001f14:	213c      	movs	r1, #60	@ 0x3c
 8001f16:	480c      	ldr	r0, [pc, #48]	@ (8001f48 <main+0xe0>)
 8001f18:	f005 fb5e 	bl	80075d8 <HAL_TIM_Encoder_Start>
#endif
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8001f1c:	f008 fbb6 	bl	800a68c <osKernelInitialize>

  /* Call init function for freertos objects (in cmsis_os2.c) */
  MX_FREERTOS_Init();
 8001f20:	f7ff fb92 	bl	8001648 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8001f24:	f008 fbd6 	bl	800a6d4 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001f28:	bf00      	nop
 8001f2a:	e7fd      	b.n	8001f28 <main+0xc0>
 8001f2c:	200059fc 	.word	0x200059fc
 8001f30:	20000470 	.word	0x20000470
 8001f34:	20000000 	.word	0x20000000
 8001f38:	4c989680 	.word	0x4c989680
 8001f3c:	20005bdc 	.word	0x20005bdc
 8001f40:	20000558 	.word	0x20000558
 8001f44:	20000568 	.word	0x20000568
 8001f48:	20005b44 	.word	0x20005b44

08001f4c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001f4c:	b580      	push	{r7, lr}
 8001f4e:	b096      	sub	sp, #88	@ 0x58
 8001f50:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001f52:	f107 0314 	add.w	r3, r7, #20
 8001f56:	2244      	movs	r2, #68	@ 0x44
 8001f58:	2100      	movs	r1, #0
 8001f5a:	4618      	mov	r0, r3
 8001f5c:	f019 fac6 	bl	801b4ec <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001f60:	463b      	mov	r3, r7
 8001f62:	2200      	movs	r2, #0
 8001f64:	601a      	str	r2, [r3, #0]
 8001f66:	605a      	str	r2, [r3, #4]
 8001f68:	609a      	str	r2, [r3, #8]
 8001f6a:	60da      	str	r2, [r3, #12]
 8001f6c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8001f6e:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8001f72:	f003 fe9b 	bl	8005cac <HAL_PWREx_ControlVoltageScaling>
 8001f76:	4603      	mov	r3, r0
 8001f78:	2b00      	cmp	r3, #0
 8001f7a:	d001      	beq.n	8001f80 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8001f7c:	f000 f990 	bl	80022a0 <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8001f80:	f003 fe76 	bl	8005c70 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8001f84:	4b21      	ldr	r3, [pc, #132]	@ (800200c <SystemClock_Config+0xc0>)
 8001f86:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001f8a:	4a20      	ldr	r2, [pc, #128]	@ (800200c <SystemClock_Config+0xc0>)
 8001f8c:	f023 0318 	bic.w	r3, r3, #24
 8001f90:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 8001f94:	2314      	movs	r3, #20
 8001f96:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8001f98:	2301      	movs	r3, #1
 8001f9a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8001f9c:	2301      	movs	r3, #1
 8001f9e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8001fa0:	2300      	movs	r3, #0
 8001fa2:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8001fa4:	2360      	movs	r3, #96	@ 0x60
 8001fa6:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001fa8:	2302      	movs	r3, #2
 8001faa:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8001fac:	2301      	movs	r3, #1
 8001fae:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8001fb0:	2301      	movs	r3, #1
 8001fb2:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 40;
 8001fb4:	2328      	movs	r3, #40	@ 0x28
 8001fb6:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8001fb8:	2307      	movs	r3, #7
 8001fba:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001fbc:	2302      	movs	r3, #2
 8001fbe:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001fc0:	2302      	movs	r3, #2
 8001fc2:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001fc4:	f107 0314 	add.w	r3, r7, #20
 8001fc8:	4618      	mov	r0, r3
 8001fca:	f003 fec5 	bl	8005d58 <HAL_RCC_OscConfig>
 8001fce:	4603      	mov	r3, r0
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	d001      	beq.n	8001fd8 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 8001fd4:	f000 f964 	bl	80022a0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001fd8:	230f      	movs	r3, #15
 8001fda:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001fdc:	2303      	movs	r3, #3
 8001fde:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001fe0:	2300      	movs	r3, #0
 8001fe2:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001fe4:	2300      	movs	r3, #0
 8001fe6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001fe8:	2300      	movs	r3, #0
 8001fea:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001fec:	463b      	mov	r3, r7
 8001fee:	2104      	movs	r1, #4
 8001ff0:	4618      	mov	r0, r3
 8001ff2:	f004 fac5 	bl	8006580 <HAL_RCC_ClockConfig>
 8001ff6:	4603      	mov	r3, r0
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	d001      	beq.n	8002000 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 8001ffc:	f000 f950 	bl	80022a0 <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 8002000:	f004 ff0a 	bl	8006e18 <HAL_RCCEx_EnableMSIPLLMode>
}
 8002004:	bf00      	nop
 8002006:	3758      	adds	r7, #88	@ 0x58
 8002008:	46bd      	mov	sp, r7
 800200a:	bd80      	pop	{r7, pc}
 800200c:	40021000 	.word	0x40021000

08002010 <HAL_I2C_MemRxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002010:	b480      	push	{r7}
 8002012:	b083      	sub	sp, #12
 8002014:	af00      	add	r7, sp, #0
 8002016:	6078      	str	r0, [r7, #4]
	if (hi2c->Instance == bno.hi2cx->Instance) bno.flag = HAL_OK;
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	681a      	ldr	r2, [r3, #0]
 800201c:	4b06      	ldr	r3, [pc, #24]	@ (8002038 <HAL_I2C_MemRxCpltCallback+0x28>)
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	429a      	cmp	r2, r3
 8002024:	d102      	bne.n	800202c <HAL_I2C_MemRxCpltCallback+0x1c>
 8002026:	4b04      	ldr	r3, [pc, #16]	@ (8002038 <HAL_I2C_MemRxCpltCallback+0x28>)
 8002028:	2200      	movs	r2, #0
 800202a:	719a      	strb	r2, [r3, #6]
}
 800202c:	bf00      	nop
 800202e:	370c      	adds	r7, #12
 8002030:	46bd      	mov	sp, r7
 8002032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002036:	4770      	bx	lr
 8002038:	20000470 	.word	0x20000470
 800203c:	00000000 	.word	0x00000000

08002040 <vel2rc>:

float vel2rc(float speed)
{
 8002040:	b5b0      	push	{r4, r5, r7, lr}
 8002042:	b084      	sub	sp, #16
 8002044:	af00      	add	r7, sp, #0
 8002046:	ed87 0a01 	vstr	s0, [r7, #4]
	float rc_signal = 1.5;
 800204a:	f04f 537f 	mov.w	r3, #1069547520	@ 0x3fc00000
 800204e:	60fb      	str	r3, [r7, #12]
	if (speed > 0) {
 8002050:	edd7 7a01 	vldr	s15, [r7, #4]
 8002054:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002058:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800205c:	dd4a      	ble.n	80020f4 <vel2rc+0xb4>
		rc_signal = fminf((2.0e-7 * pow(speed, 2)) - (2.0e-5 * speed) + 1.5074, 2.0);
 800205e:	6878      	ldr	r0, [r7, #4]
 8002060:	f7fe fa82 	bl	8000568 <__aeabi_f2d>
 8002064:	4602      	mov	r2, r0
 8002066:	460b      	mov	r3, r1
 8002068:	ed9f 1b4f 	vldr	d1, [pc, #316]	@ 80021a8 <vel2rc+0x168>
 800206c:	ec43 2b10 	vmov	d0, r2, r3
 8002070:	f01a f99c 	bl	801c3ac <pow>
 8002074:	ec51 0b10 	vmov	r0, r1, d0
 8002078:	a34d      	add	r3, pc, #308	@ (adr r3, 80021b0 <vel2rc+0x170>)
 800207a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800207e:	f7fe facb 	bl	8000618 <__aeabi_dmul>
 8002082:	4602      	mov	r2, r0
 8002084:	460b      	mov	r3, r1
 8002086:	4614      	mov	r4, r2
 8002088:	461d      	mov	r5, r3
 800208a:	6878      	ldr	r0, [r7, #4]
 800208c:	f7fe fa6c 	bl	8000568 <__aeabi_f2d>
 8002090:	a349      	add	r3, pc, #292	@ (adr r3, 80021b8 <vel2rc+0x178>)
 8002092:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002096:	f7fe fabf 	bl	8000618 <__aeabi_dmul>
 800209a:	4602      	mov	r2, r0
 800209c:	460b      	mov	r3, r1
 800209e:	4620      	mov	r0, r4
 80020a0:	4629      	mov	r1, r5
 80020a2:	f7fe f901 	bl	80002a8 <__aeabi_dsub>
 80020a6:	4602      	mov	r2, r0
 80020a8:	460b      	mov	r3, r1
 80020aa:	4610      	mov	r0, r2
 80020ac:	4619      	mov	r1, r3
 80020ae:	a344      	add	r3, pc, #272	@ (adr r3, 80021c0 <vel2rc+0x180>)
 80020b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80020b4:	f7fe f8fa 	bl	80002ac <__adddf3>
 80020b8:	4602      	mov	r2, r0
 80020ba:	460b      	mov	r3, r1
 80020bc:	4610      	mov	r0, r2
 80020be:	4619      	mov	r1, r3
 80020c0:	f7fe fd7a 	bl	8000bb8 <__aeabi_d2f>
 80020c4:	4603      	mov	r3, r0
 80020c6:	eef0 0a00 	vmov.f32	s1, #0	@ 0x40000000  2.0
 80020ca:	ee00 3a10 	vmov	s0, r3
 80020ce:	f01a fa05 	bl	801c4dc <fminf>
 80020d2:	ed87 0a03 	vstr	s0, [r7, #12]
		if (rc_signal < 1.55) rc_signal = 1.5;
 80020d6:	68f8      	ldr	r0, [r7, #12]
 80020d8:	f7fe fa46 	bl	8000568 <__aeabi_f2d>
 80020dc:	a33a      	add	r3, pc, #232	@ (adr r3, 80021c8 <vel2rc+0x188>)
 80020de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80020e2:	f7fe fd0b 	bl	8000afc <__aeabi_dcmplt>
 80020e6:	4603      	mov	r3, r0
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	d054      	beq.n	8002196 <vel2rc+0x156>
 80020ec:	f04f 537f 	mov.w	r3, #1069547520	@ 0x3fc00000
 80020f0:	60fb      	str	r3, [r7, #12]
 80020f2:	e050      	b.n	8002196 <vel2rc+0x156>
	} else if (speed < 0) {
 80020f4:	edd7 7a01 	vldr	s15, [r7, #4]
 80020f8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80020fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002100:	d549      	bpl.n	8002196 <vel2rc+0x156>
		rc_signal = fmaxf(-(3.0e-7 * pow(speed, 2)) + (6.0e-5 * speed) + 1.473, 1.0);
 8002102:	6878      	ldr	r0, [r7, #4]
 8002104:	f7fe fa30 	bl	8000568 <__aeabi_f2d>
 8002108:	a331      	add	r3, pc, #196	@ (adr r3, 80021d0 <vel2rc+0x190>)
 800210a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800210e:	f7fe fa83 	bl	8000618 <__aeabi_dmul>
 8002112:	4602      	mov	r2, r0
 8002114:	460b      	mov	r3, r1
 8002116:	4614      	mov	r4, r2
 8002118:	461d      	mov	r5, r3
 800211a:	6878      	ldr	r0, [r7, #4]
 800211c:	f7fe fa24 	bl	8000568 <__aeabi_f2d>
 8002120:	4602      	mov	r2, r0
 8002122:	460b      	mov	r3, r1
 8002124:	ed9f 1b20 	vldr	d1, [pc, #128]	@ 80021a8 <vel2rc+0x168>
 8002128:	ec43 2b10 	vmov	d0, r2, r3
 800212c:	f01a f93e 	bl	801c3ac <pow>
 8002130:	ec51 0b10 	vmov	r0, r1, d0
 8002134:	a328      	add	r3, pc, #160	@ (adr r3, 80021d8 <vel2rc+0x198>)
 8002136:	e9d3 2300 	ldrd	r2, r3, [r3]
 800213a:	f7fe fa6d 	bl	8000618 <__aeabi_dmul>
 800213e:	4602      	mov	r2, r0
 8002140:	460b      	mov	r3, r1
 8002142:	4620      	mov	r0, r4
 8002144:	4629      	mov	r1, r5
 8002146:	f7fe f8af 	bl	80002a8 <__aeabi_dsub>
 800214a:	4602      	mov	r2, r0
 800214c:	460b      	mov	r3, r1
 800214e:	4610      	mov	r0, r2
 8002150:	4619      	mov	r1, r3
 8002152:	a323      	add	r3, pc, #140	@ (adr r3, 80021e0 <vel2rc+0x1a0>)
 8002154:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002158:	f7fe f8a8 	bl	80002ac <__adddf3>
 800215c:	4602      	mov	r2, r0
 800215e:	460b      	mov	r3, r1
 8002160:	4610      	mov	r0, r2
 8002162:	4619      	mov	r1, r3
 8002164:	f7fe fd28 	bl	8000bb8 <__aeabi_d2f>
 8002168:	4603      	mov	r3, r0
 800216a:	eef7 0a00 	vmov.f32	s1, #112	@ 0x3f800000  1.0
 800216e:	ee00 3a10 	vmov	s0, r3
 8002172:	f01a f996 	bl	801c4a2 <fmaxf>
 8002176:	ed87 0a03 	vstr	s0, [r7, #12]
		if (rc_signal > 1.4) rc_signal = 1.5;
 800217a:	68f8      	ldr	r0, [r7, #12]
 800217c:	f7fe f9f4 	bl	8000568 <__aeabi_f2d>
 8002180:	a319      	add	r3, pc, #100	@ (adr r3, 80021e8 <vel2rc+0x1a8>)
 8002182:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002186:	f7fe fcd7 	bl	8000b38 <__aeabi_dcmpgt>
 800218a:	4603      	mov	r3, r0
 800218c:	2b00      	cmp	r3, #0
 800218e:	d002      	beq.n	8002196 <vel2rc+0x156>
 8002190:	f04f 537f 	mov.w	r3, #1069547520	@ 0x3fc00000
 8002194:	60fb      	str	r3, [r7, #12]
	}
	return rc_signal;
 8002196:	68fb      	ldr	r3, [r7, #12]
 8002198:	ee07 3a90 	vmov	s15, r3
}
 800219c:	eeb0 0a67 	vmov.f32	s0, s15
 80021a0:	3710      	adds	r7, #16
 80021a2:	46bd      	mov	sp, r7
 80021a4:	bdb0      	pop	{r4, r5, r7, pc}
 80021a6:	bf00      	nop
 80021a8:	00000000 	.word	0x00000000
 80021ac:	40000000 	.word	0x40000000
 80021b0:	9abcaf48 	.word	0x9abcaf48
 80021b4:	3e8ad7f2 	.word	0x3e8ad7f2
 80021b8:	88e368f1 	.word	0x88e368f1
 80021bc:	3ef4f8b5 	.word	0x3ef4f8b5
 80021c0:	765fd8ae 	.word	0x765fd8ae
 80021c4:	3ff81e4f 	.word	0x3ff81e4f
 80021c8:	cccccccd 	.word	0xcccccccd
 80021cc:	3ff8cccc 	.word	0x3ff8cccc
 80021d0:	4d551d69 	.word	0x4d551d69
 80021d4:	3f0f7510 	.word	0x3f0f7510
 80021d8:	f40d8376 	.word	0xf40d8376
 80021dc:	3e9421f5 	.word	0x3e9421f5
 80021e0:	72b020c5 	.word	0x72b020c5
 80021e4:	3ff79168 	.word	0x3ff79168
 80021e8:	66666666 	.word	0x66666666
 80021ec:	3ff66666 	.word	0x3ff66666

080021f0 <ang2rc>:

float ang2rc(float ang)
{
 80021f0:	b5b0      	push	{r4, r5, r7, lr}
 80021f2:	b084      	sub	sp, #16
 80021f4:	af00      	add	r7, sp, #0
 80021f6:	ed87 0a01 	vstr	s0, [r7, #4]
	float rc_signal = 1.35;
 80021fa:	4b1d      	ldr	r3, [pc, #116]	@ (8002270 <ang2rc+0x80>)
 80021fc:	60fb      	str	r3, [r7, #12]
	rc_signal += ang / M_PI_2;
 80021fe:	68f8      	ldr	r0, [r7, #12]
 8002200:	f7fe f9b2 	bl	8000568 <__aeabi_f2d>
 8002204:	4604      	mov	r4, r0
 8002206:	460d      	mov	r5, r1
 8002208:	6878      	ldr	r0, [r7, #4]
 800220a:	f7fe f9ad 	bl	8000568 <__aeabi_f2d>
 800220e:	a316      	add	r3, pc, #88	@ (adr r3, 8002268 <ang2rc+0x78>)
 8002210:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002214:	f7fe fb2a 	bl	800086c <__aeabi_ddiv>
 8002218:	4602      	mov	r2, r0
 800221a:	460b      	mov	r3, r1
 800221c:	4620      	mov	r0, r4
 800221e:	4629      	mov	r1, r5
 8002220:	f7fe f844 	bl	80002ac <__adddf3>
 8002224:	4602      	mov	r2, r0
 8002226:	460b      	mov	r3, r1
 8002228:	4610      	mov	r0, r2
 800222a:	4619      	mov	r1, r3
 800222c:	f7fe fcc4 	bl	8000bb8 <__aeabi_d2f>
 8002230:	4603      	mov	r3, r0
 8002232:	60fb      	str	r3, [r7, #12]
	rc_signal = fmaxf(fminf(rc_signal, 1.794), -0.905);
 8002234:	eddf 0a0f 	vldr	s1, [pc, #60]	@ 8002274 <ang2rc+0x84>
 8002238:	ed97 0a03 	vldr	s0, [r7, #12]
 800223c:	f01a f94e 	bl	801c4dc <fminf>
 8002240:	eef0 7a40 	vmov.f32	s15, s0
 8002244:	eddf 0a0c 	vldr	s1, [pc, #48]	@ 8002278 <ang2rc+0x88>
 8002248:	eeb0 0a67 	vmov.f32	s0, s15
 800224c:	f01a f929 	bl	801c4a2 <fmaxf>
 8002250:	ed87 0a03 	vstr	s0, [r7, #12]
	return rc_signal;
 8002254:	68fb      	ldr	r3, [r7, #12]
 8002256:	ee07 3a90 	vmov	s15, r3
}
 800225a:	eeb0 0a67 	vmov.f32	s0, s15
 800225e:	3710      	adds	r7, #16
 8002260:	46bd      	mov	sp, r7
 8002262:	bdb0      	pop	{r4, r5, r7, pc}
 8002264:	f3af 8000 	nop.w
 8002268:	54442d18 	.word	0x54442d18
 800226c:	3ff921fb 	.word	0x3ff921fb
 8002270:	3faccccd 	.word	0x3faccccd
 8002274:	3fe5a1cb 	.word	0x3fe5a1cb
 8002278:	bf67ae14 	.word	0xbf67ae14

0800227c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800227c:	b580      	push	{r7, lr}
 800227e:	b082      	sub	sp, #8
 8002280:	af00      	add	r7, sp, #0
 8002282:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	4a04      	ldr	r2, [pc, #16]	@ (800229c <HAL_TIM_PeriodElapsedCallback+0x20>)
 800228a:	4293      	cmp	r3, r2
 800228c:	d101      	bne.n	8002292 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800228e:	f000 feb3 	bl	8002ff8 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8002292:	bf00      	nop
 8002294:	3708      	adds	r7, #8
 8002296:	46bd      	mov	sp, r7
 8002298:	bd80      	pop	{r7, pc}
 800229a:	bf00      	nop
 800229c:	40001000 	.word	0x40001000

080022a0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80022a0:	b480      	push	{r7}
 80022a2:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 80022a4:	b672      	cpsid	i
}
 80022a6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80022a8:	bf00      	nop
 80022aa:	e7fd      	b.n	80022a8 <Error_Handler+0x8>

080022ac <microros_allocate>:
void vPortFreeMicroROS( void *pv );
void *pvPortReallocMicroROS( void *pv, size_t xWantedSize );
size_t getBlockSize( void *pv );
void *pvPortCallocMicroROS( size_t num, size_t xWantedSize );

void * microros_allocate(size_t size, void * state){
 80022ac:	b580      	push	{r7, lr}
 80022ae:	b082      	sub	sp, #8
 80022b0:	af00      	add	r7, sp, #0
 80022b2:	6078      	str	r0, [r7, #4]
 80022b4:	6039      	str	r1, [r7, #0]
  (void) state;
  // printf("-- Alloc %d (prev: %d B)\n",size, xPortGetFreeHeapSize());
  absoluteUsedMemory += size;
 80022b6:	4b0c      	ldr	r3, [pc, #48]	@ (80022e8 <microros_allocate+0x3c>)
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	461a      	mov	r2, r3
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	4413      	add	r3, r2
 80022c0:	461a      	mov	r2, r3
 80022c2:	4b09      	ldr	r3, [pc, #36]	@ (80022e8 <microros_allocate+0x3c>)
 80022c4:	601a      	str	r2, [r3, #0]
  usedMemory += size;
 80022c6:	4b09      	ldr	r3, [pc, #36]	@ (80022ec <microros_allocate+0x40>)
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	461a      	mov	r2, r3
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	4413      	add	r3, r2
 80022d0:	461a      	mov	r2, r3
 80022d2:	4b06      	ldr	r3, [pc, #24]	@ (80022ec <microros_allocate+0x40>)
 80022d4:	601a      	str	r2, [r3, #0]
  return pvPortMallocMicroROS(size);
 80022d6:	6878      	ldr	r0, [r7, #4]
 80022d8:	f7fe fe86 	bl	8000fe8 <pvPortMallocMicroROS>
 80022dc:	4603      	mov	r3, r0
}
 80022de:	4618      	mov	r0, r3
 80022e0:	3708      	adds	r7, #8
 80022e2:	46bd      	mov	sp, r7
 80022e4:	bd80      	pop	{r7, pc}
 80022e6:	bf00      	nop
 80022e8:	20005ae8 	.word	0x20005ae8
 80022ec:	20005aec 	.word	0x20005aec

080022f0 <microros_deallocate>:

void microros_deallocate(void * pointer, void * state){
 80022f0:	b580      	push	{r7, lr}
 80022f2:	b082      	sub	sp, #8
 80022f4:	af00      	add	r7, sp, #0
 80022f6:	6078      	str	r0, [r7, #4]
 80022f8:	6039      	str	r1, [r7, #0]
  (void) state;
  // printf("-- Free %d (prev: %d B)\n",getBlockSize(pointer), xPortGetFreeHeapSize());
  if (NULL != pointer){
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	d00c      	beq.n	800231a <microros_deallocate+0x2a>
    usedMemory -= getBlockSize(pointer);
 8002300:	6878      	ldr	r0, [r7, #4]
 8002302:	f7fe ff95 	bl	8001230 <getBlockSize>
 8002306:	4603      	mov	r3, r0
 8002308:	4a06      	ldr	r2, [pc, #24]	@ (8002324 <microros_deallocate+0x34>)
 800230a:	6812      	ldr	r2, [r2, #0]
 800230c:	1ad3      	subs	r3, r2, r3
 800230e:	461a      	mov	r2, r3
 8002310:	4b04      	ldr	r3, [pc, #16]	@ (8002324 <microros_deallocate+0x34>)
 8002312:	601a      	str	r2, [r3, #0]
    vPortFreeMicroROS(pointer);
 8002314:	6878      	ldr	r0, [r7, #4]
 8002316:	f7fe ff2f 	bl	8001178 <vPortFreeMicroROS>
  }
}
 800231a:	bf00      	nop
 800231c:	3708      	adds	r7, #8
 800231e:	46bd      	mov	sp, r7
 8002320:	bd80      	pop	{r7, pc}
 8002322:	bf00      	nop
 8002324:	20005aec 	.word	0x20005aec

08002328 <microros_reallocate>:

void * microros_reallocate(void * pointer, size_t size, void * state){
 8002328:	b580      	push	{r7, lr}
 800232a:	b084      	sub	sp, #16
 800232c:	af00      	add	r7, sp, #0
 800232e:	60f8      	str	r0, [r7, #12]
 8002330:	60b9      	str	r1, [r7, #8]
 8002332:	607a      	str	r2, [r7, #4]
  (void) state;
  // printf("-- Realloc %d -> %d (prev: %d B)\n",getBlockSize(pointer),size, xPortGetFreeHeapSize());
  absoluteUsedMemory += size;
 8002334:	4b15      	ldr	r3, [pc, #84]	@ (800238c <microros_reallocate+0x64>)
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	461a      	mov	r2, r3
 800233a:	68bb      	ldr	r3, [r7, #8]
 800233c:	4413      	add	r3, r2
 800233e:	461a      	mov	r2, r3
 8002340:	4b12      	ldr	r3, [pc, #72]	@ (800238c <microros_reallocate+0x64>)
 8002342:	601a      	str	r2, [r3, #0]
  usedMemory += size;
 8002344:	4b12      	ldr	r3, [pc, #72]	@ (8002390 <microros_reallocate+0x68>)
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	461a      	mov	r2, r3
 800234a:	68bb      	ldr	r3, [r7, #8]
 800234c:	4413      	add	r3, r2
 800234e:	461a      	mov	r2, r3
 8002350:	4b0f      	ldr	r3, [pc, #60]	@ (8002390 <microros_reallocate+0x68>)
 8002352:	601a      	str	r2, [r3, #0]
  if (NULL == pointer){
 8002354:	68fb      	ldr	r3, [r7, #12]
 8002356:	2b00      	cmp	r3, #0
 8002358:	d104      	bne.n	8002364 <microros_reallocate+0x3c>
    return pvPortMallocMicroROS(size);
 800235a:	68b8      	ldr	r0, [r7, #8]
 800235c:	f7fe fe44 	bl	8000fe8 <pvPortMallocMicroROS>
 8002360:	4603      	mov	r3, r0
 8002362:	e00e      	b.n	8002382 <microros_reallocate+0x5a>
  } else {
    usedMemory -= getBlockSize(pointer);
 8002364:	68f8      	ldr	r0, [r7, #12]
 8002366:	f7fe ff63 	bl	8001230 <getBlockSize>
 800236a:	4603      	mov	r3, r0
 800236c:	4a08      	ldr	r2, [pc, #32]	@ (8002390 <microros_reallocate+0x68>)
 800236e:	6812      	ldr	r2, [r2, #0]
 8002370:	1ad3      	subs	r3, r2, r3
 8002372:	461a      	mov	r2, r3
 8002374:	4b06      	ldr	r3, [pc, #24]	@ (8002390 <microros_reallocate+0x68>)
 8002376:	601a      	str	r2, [r3, #0]
    return pvPortReallocMicroROS(pointer,size);
 8002378:	68b9      	ldr	r1, [r7, #8]
 800237a:	68f8      	ldr	r0, [r7, #12]
 800237c:	f7fe ff76 	bl	800126c <pvPortReallocMicroROS>
 8002380:	4603      	mov	r3, r0
  }
}
 8002382:	4618      	mov	r0, r3
 8002384:	3710      	adds	r7, #16
 8002386:	46bd      	mov	sp, r7
 8002388:	bd80      	pop	{r7, pc}
 800238a:	bf00      	nop
 800238c:	20005ae8 	.word	0x20005ae8
 8002390:	20005aec 	.word	0x20005aec

08002394 <microros_zero_allocate>:

void * microros_zero_allocate(size_t number_of_elements, size_t size_of_element, void * state){
 8002394:	b580      	push	{r7, lr}
 8002396:	b084      	sub	sp, #16
 8002398:	af00      	add	r7, sp, #0
 800239a:	60f8      	str	r0, [r7, #12]
 800239c:	60b9      	str	r1, [r7, #8]
 800239e:	607a      	str	r2, [r7, #4]
  (void) state;
  // printf("-- Calloc %d x %d = %d -> (prev: %d B)\n",number_of_elements,size_of_element, number_of_elements*size_of_element, xPortGetFreeHeapSize());
  absoluteUsedMemory += number_of_elements*size_of_element;
 80023a0:	68fb      	ldr	r3, [r7, #12]
 80023a2:	68ba      	ldr	r2, [r7, #8]
 80023a4:	fb02 f303 	mul.w	r3, r2, r3
 80023a8:	4a0c      	ldr	r2, [pc, #48]	@ (80023dc <microros_zero_allocate+0x48>)
 80023aa:	6812      	ldr	r2, [r2, #0]
 80023ac:	4413      	add	r3, r2
 80023ae:	461a      	mov	r2, r3
 80023b0:	4b0a      	ldr	r3, [pc, #40]	@ (80023dc <microros_zero_allocate+0x48>)
 80023b2:	601a      	str	r2, [r3, #0]
  usedMemory += number_of_elements*size_of_element;
 80023b4:	68fb      	ldr	r3, [r7, #12]
 80023b6:	68ba      	ldr	r2, [r7, #8]
 80023b8:	fb02 f303 	mul.w	r3, r2, r3
 80023bc:	4a08      	ldr	r2, [pc, #32]	@ (80023e0 <microros_zero_allocate+0x4c>)
 80023be:	6812      	ldr	r2, [r2, #0]
 80023c0:	4413      	add	r3, r2
 80023c2:	461a      	mov	r2, r3
 80023c4:	4b06      	ldr	r3, [pc, #24]	@ (80023e0 <microros_zero_allocate+0x4c>)
 80023c6:	601a      	str	r2, [r3, #0]
  return pvPortCallocMicroROS(number_of_elements,size_of_element);
 80023c8:	68b9      	ldr	r1, [r7, #8]
 80023ca:	68f8      	ldr	r0, [r7, #12]
 80023cc:	f7fe ff7b 	bl	80012c6 <pvPortCallocMicroROS>
 80023d0:	4603      	mov	r3, r0
 80023d2:	4618      	mov	r0, r3
 80023d4:	3710      	adds	r7, #16
 80023d6:	46bd      	mov	sp, r7
 80023d8:	bd80      	pop	{r7, pc}
 80023da:	bf00      	nop
 80023dc:	20005ae8 	.word	0x20005ae8
 80023e0:	20005aec 	.word	0x20005aec
 80023e4:	00000000 	.word	0x00000000

080023e8 <UTILS_NanosecondsToTimespec>:
#define NANOSECONDS_PER_SECOND     ( 1000000000LL )                                /**< Nanoseconds per second. */
#define NANOSECONDS_PER_TICK       ( NANOSECONDS_PER_SECOND / configTICK_RATE_HZ ) /**< Nanoseconds per FreeRTOS tick. */

void UTILS_NanosecondsToTimespec( int64_t llSource,
                                  struct timespec * const pxDestination )
{
 80023e8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80023ec:	b086      	sub	sp, #24
 80023ee:	af00      	add	r7, sp, #0
 80023f0:	e9c7 0102 	strd	r0, r1, [r7, #8]
 80023f4:	607a      	str	r2, [r7, #4]
    long lCarrySec = 0;
 80023f6:	2300      	movs	r3, #0
 80023f8:	617b      	str	r3, [r7, #20]

    /* Convert to timespec. */
    pxDestination->tv_sec = ( time_t ) ( llSource / NANOSECONDS_PER_SECOND );
 80023fa:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80023fe:	a320      	add	r3, pc, #128	@ (adr r3, 8002480 <UTILS_NanosecondsToTimespec+0x98>)
 8002400:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002404:	f7fe fc28 	bl	8000c58 <__aeabi_ldivmod>
 8002408:	4602      	mov	r2, r0
 800240a:	460b      	mov	r3, r1
 800240c:	6879      	ldr	r1, [r7, #4]
 800240e:	e9c1 2300 	strd	r2, r3, [r1]
    pxDestination->tv_nsec = ( long ) ( llSource % NANOSECONDS_PER_SECOND );
 8002412:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002416:	a31a      	add	r3, pc, #104	@ (adr r3, 8002480 <UTILS_NanosecondsToTimespec+0x98>)
 8002418:	e9d3 2300 	ldrd	r2, r3, [r3]
 800241c:	f7fe fc1c 	bl	8000c58 <__aeabi_ldivmod>
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	609a      	str	r2, [r3, #8]

    /* Subtract from tv_sec if tv_nsec < 0. */
    if( pxDestination->tv_nsec < 0L )
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	689b      	ldr	r3, [r3, #8]
 8002428:	2b00      	cmp	r3, #0
 800242a:	da20      	bge.n	800246e <UTILS_NanosecondsToTimespec+0x86>
    {
        /* Compute the number of seconds to carry. */
        lCarrySec = ( pxDestination->tv_nsec / ( long ) NANOSECONDS_PER_SECOND ) + 1L;
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	689b      	ldr	r3, [r3, #8]
 8002430:	4a11      	ldr	r2, [pc, #68]	@ (8002478 <UTILS_NanosecondsToTimespec+0x90>)
 8002432:	fb82 1203 	smull	r1, r2, r2, r3
 8002436:	1712      	asrs	r2, r2, #28
 8002438:	17db      	asrs	r3, r3, #31
 800243a:	1ad3      	subs	r3, r2, r3
 800243c:	3301      	adds	r3, #1
 800243e:	617b      	str	r3, [r7, #20]

        pxDestination->tv_sec -= ( time_t ) ( lCarrySec );
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002446:	6979      	ldr	r1, [r7, #20]
 8002448:	17c8      	asrs	r0, r1, #31
 800244a:	460c      	mov	r4, r1
 800244c:	4605      	mov	r5, r0
 800244e:	ebb2 0804 	subs.w	r8, r2, r4
 8002452:	eb63 0905 	sbc.w	r9, r3, r5
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	e9c3 8900 	strd	r8, r9, [r3]
        pxDestination->tv_nsec += lCarrySec * ( long ) NANOSECONDS_PER_SECOND;
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	689a      	ldr	r2, [r3, #8]
 8002460:	697b      	ldr	r3, [r7, #20]
 8002462:	4906      	ldr	r1, [pc, #24]	@ (800247c <UTILS_NanosecondsToTimespec+0x94>)
 8002464:	fb01 f303 	mul.w	r3, r1, r3
 8002468:	441a      	add	r2, r3
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	609a      	str	r2, [r3, #8]
    }
}
 800246e:	bf00      	nop
 8002470:	3718      	adds	r7, #24
 8002472:	46bd      	mov	sp, r7
 8002474:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8002478:	44b82fa1 	.word	0x44b82fa1
 800247c:	3b9aca00 	.word	0x3b9aca00
 8002480:	3b9aca00 	.word	0x3b9aca00
 8002484:	00000000 	.word	0x00000000

08002488 <clock_gettime>:

int clock_gettime( int clock_id,
                   struct timespec * tp )
{
 8002488:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800248c:	b08e      	sub	sp, #56	@ 0x38
 800248e:	af00      	add	r7, sp, #0
 8002490:	6278      	str	r0, [r7, #36]	@ 0x24
 8002492:	6239      	str	r1, [r7, #32]
    TimeOut_t xCurrentTime = { 0 };
 8002494:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 8002498:	2300      	movs	r3, #0
 800249a:	6013      	str	r3, [r2, #0]
 800249c:	6053      	str	r3, [r2, #4]

    /* Intermediate variable used to convert TimeOut_t to struct timespec.
     * Also used to detect overflow issues. It must be unsigned because the
     * behavior of signed integer overflow is undefined. */
    uint64_t ullTickCount = 0ULL;
 800249e:	f04f 0200 	mov.w	r2, #0
 80024a2:	f04f 0300 	mov.w	r3, #0
 80024a6:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
    /* Silence warnings about unused parameters. */
    ( void ) clock_id;

    /* Get the current tick count and overflow count. vTaskSetTimeOutState()
     * is used to get these values because they are both static in tasks.c. */
    vTaskSetTimeOutState( &xCurrentTime );
 80024aa:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80024ae:	4618      	mov	r0, r3
 80024b0:	f009 fcbc 	bl	800be2c <vTaskSetTimeOutState>

    /* Adjust the tick count for the number of times a TickType_t has overflowed.
     * portMAX_DELAY should be the maximum value of a TickType_t. */
    ullTickCount = ( uint64_t ) ( xCurrentTime.xOverflowCount ) << ( sizeof( TickType_t ) * 8 );
 80024b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80024b6:	17da      	asrs	r2, r3, #31
 80024b8:	61bb      	str	r3, [r7, #24]
 80024ba:	61fa      	str	r2, [r7, #28]
 80024bc:	f04f 0200 	mov.w	r2, #0
 80024c0:	f04f 0300 	mov.w	r3, #0
 80024c4:	69b9      	ldr	r1, [r7, #24]
 80024c6:	000b      	movs	r3, r1
 80024c8:	2200      	movs	r2, #0
 80024ca:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30

    /* Add the current tick count. */
    ullTickCount += xCurrentTime.xTimeOnEntering;
 80024ce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80024d0:	2200      	movs	r2, #0
 80024d2:	461c      	mov	r4, r3
 80024d4:	4615      	mov	r5, r2
 80024d6:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 80024da:	1911      	adds	r1, r2, r4
 80024dc:	60b9      	str	r1, [r7, #8]
 80024de:	416b      	adcs	r3, r5
 80024e0:	60fb      	str	r3, [r7, #12]
 80024e2:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 80024e6:	e9c7 340c 	strd	r3, r4, [r7, #48]	@ 0x30

    /* Convert ullTickCount to timespec. */
    UTILS_NanosecondsToTimespec( ( int64_t ) ullTickCount * NANOSECONDS_PER_TICK, tp );
 80024ea:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 80024ee:	4602      	mov	r2, r0
 80024f0:	460b      	mov	r3, r1
 80024f2:	f04f 0400 	mov.w	r4, #0
 80024f6:	f04f 0500 	mov.w	r5, #0
 80024fa:	015d      	lsls	r5, r3, #5
 80024fc:	ea45 65d2 	orr.w	r5, r5, r2, lsr #27
 8002500:	0154      	lsls	r4, r2, #5
 8002502:	4622      	mov	r2, r4
 8002504:	462b      	mov	r3, r5
 8002506:	ebb2 0800 	subs.w	r8, r2, r0
 800250a:	eb63 0901 	sbc.w	r9, r3, r1
 800250e:	f04f 0200 	mov.w	r2, #0
 8002512:	f04f 0300 	mov.w	r3, #0
 8002516:	ea4f 2349 	mov.w	r3, r9, lsl #9
 800251a:	ea43 53d8 	orr.w	r3, r3, r8, lsr #23
 800251e:	ea4f 2248 	mov.w	r2, r8, lsl #9
 8002522:	4690      	mov	r8, r2
 8002524:	4699      	mov	r9, r3
 8002526:	eb18 0a00 	adds.w	sl, r8, r0
 800252a:	eb49 0b01 	adc.w	fp, r9, r1
 800252e:	f04f 0200 	mov.w	r2, #0
 8002532:	f04f 0300 	mov.w	r3, #0
 8002536:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800253a:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800253e:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002542:	ebb2 040a 	subs.w	r4, r2, sl
 8002546:	603c      	str	r4, [r7, #0]
 8002548:	eb63 030b 	sbc.w	r3, r3, fp
 800254c:	607b      	str	r3, [r7, #4]
 800254e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002552:	4623      	mov	r3, r4
 8002554:	181b      	adds	r3, r3, r0
 8002556:	613b      	str	r3, [r7, #16]
 8002558:	462b      	mov	r3, r5
 800255a:	eb41 0303 	adc.w	r3, r1, r3
 800255e:	617b      	str	r3, [r7, #20]
 8002560:	6a3a      	ldr	r2, [r7, #32]
 8002562:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002566:	f7ff ff3f 	bl	80023e8 <UTILS_NanosecondsToTimespec>

    return 0;
 800256a:	2300      	movs	r3, #0
 800256c:	4618      	mov	r0, r3
 800256e:	3738      	adds	r7, #56	@ 0x38
 8002570:	46bd      	mov	sp, r7
 8002572:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
	...

08002578 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002578:	b580      	push	{r7, lr}
 800257a:	b082      	sub	sp, #8
 800257c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800257e:	4b11      	ldr	r3, [pc, #68]	@ (80025c4 <HAL_MspInit+0x4c>)
 8002580:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002582:	4a10      	ldr	r2, [pc, #64]	@ (80025c4 <HAL_MspInit+0x4c>)
 8002584:	f043 0301 	orr.w	r3, r3, #1
 8002588:	6613      	str	r3, [r2, #96]	@ 0x60
 800258a:	4b0e      	ldr	r3, [pc, #56]	@ (80025c4 <HAL_MspInit+0x4c>)
 800258c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800258e:	f003 0301 	and.w	r3, r3, #1
 8002592:	607b      	str	r3, [r7, #4]
 8002594:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002596:	4b0b      	ldr	r3, [pc, #44]	@ (80025c4 <HAL_MspInit+0x4c>)
 8002598:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800259a:	4a0a      	ldr	r2, [pc, #40]	@ (80025c4 <HAL_MspInit+0x4c>)
 800259c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80025a0:	6593      	str	r3, [r2, #88]	@ 0x58
 80025a2:	4b08      	ldr	r3, [pc, #32]	@ (80025c4 <HAL_MspInit+0x4c>)
 80025a4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80025a6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80025aa:	603b      	str	r3, [r7, #0]
 80025ac:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80025ae:	2200      	movs	r2, #0
 80025b0:	210f      	movs	r1, #15
 80025b2:	f06f 0001 	mvn.w	r0, #1
 80025b6:	f000 fe1b 	bl	80031f0 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80025ba:	bf00      	nop
 80025bc:	3708      	adds	r7, #8
 80025be:	46bd      	mov	sp, r7
 80025c0:	bd80      	pop	{r7, pc}
 80025c2:	bf00      	nop
 80025c4:	40021000 	.word	0x40021000

080025c8 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80025c8:	b580      	push	{r7, lr}
 80025ca:	b08e      	sub	sp, #56	@ 0x38
 80025cc:	af00      	add	r7, sp, #0
 80025ce:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 80025d0:	2300      	movs	r3, #0
 80025d2:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 80025d6:	4b34      	ldr	r3, [pc, #208]	@ (80026a8 <HAL_InitTick+0xe0>)
 80025d8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80025da:	4a33      	ldr	r2, [pc, #204]	@ (80026a8 <HAL_InitTick+0xe0>)
 80025dc:	f043 0310 	orr.w	r3, r3, #16
 80025e0:	6593      	str	r3, [r2, #88]	@ 0x58
 80025e2:	4b31      	ldr	r3, [pc, #196]	@ (80026a8 <HAL_InitTick+0xe0>)
 80025e4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80025e6:	f003 0310 	and.w	r3, r3, #16
 80025ea:	60fb      	str	r3, [r7, #12]
 80025ec:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80025ee:	f107 0210 	add.w	r2, r7, #16
 80025f2:	f107 0314 	add.w	r3, r7, #20
 80025f6:	4611      	mov	r1, r2
 80025f8:	4618      	mov	r0, r3
 80025fa:	f004 f985 	bl	8006908 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 80025fe:	6a3b      	ldr	r3, [r7, #32]
 8002600:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8002602:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002604:	2b00      	cmp	r3, #0
 8002606:	d103      	bne.n	8002610 <HAL_InitTick+0x48>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8002608:	f004 f952 	bl	80068b0 <HAL_RCC_GetPCLK1Freq>
 800260c:	6378      	str	r0, [r7, #52]	@ 0x34
 800260e:	e004      	b.n	800261a <HAL_InitTick+0x52>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8002610:	f004 f94e 	bl	80068b0 <HAL_RCC_GetPCLK1Freq>
 8002614:	4603      	mov	r3, r0
 8002616:	005b      	lsls	r3, r3, #1
 8002618:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800261a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800261c:	4a23      	ldr	r2, [pc, #140]	@ (80026ac <HAL_InitTick+0xe4>)
 800261e:	fba2 2303 	umull	r2, r3, r2, r3
 8002622:	0c9b      	lsrs	r3, r3, #18
 8002624:	3b01      	subs	r3, #1
 8002626:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8002628:	4b21      	ldr	r3, [pc, #132]	@ (80026b0 <HAL_InitTick+0xe8>)
 800262a:	4a22      	ldr	r2, [pc, #136]	@ (80026b4 <HAL_InitTick+0xec>)
 800262c:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 800262e:	4b20      	ldr	r3, [pc, #128]	@ (80026b0 <HAL_InitTick+0xe8>)
 8002630:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8002634:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8002636:	4a1e      	ldr	r2, [pc, #120]	@ (80026b0 <HAL_InitTick+0xe8>)
 8002638:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800263a:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 800263c:	4b1c      	ldr	r3, [pc, #112]	@ (80026b0 <HAL_InitTick+0xe8>)
 800263e:	2200      	movs	r2, #0
 8002640:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002642:	4b1b      	ldr	r3, [pc, #108]	@ (80026b0 <HAL_InitTick+0xe8>)
 8002644:	2200      	movs	r2, #0
 8002646:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002648:	4b19      	ldr	r3, [pc, #100]	@ (80026b0 <HAL_InitTick+0xe8>)
 800264a:	2200      	movs	r2, #0
 800264c:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 800264e:	4818      	ldr	r0, [pc, #96]	@ (80026b0 <HAL_InitTick+0xe8>)
 8002650:	f004 fce4 	bl	800701c <HAL_TIM_Base_Init>
 8002654:	4603      	mov	r3, r0
 8002656:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 800265a:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800265e:	2b00      	cmp	r3, #0
 8002660:	d11b      	bne.n	800269a <HAL_InitTick+0xd2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8002662:	4813      	ldr	r0, [pc, #76]	@ (80026b0 <HAL_InitTick+0xe8>)
 8002664:	f004 fd88 	bl	8007178 <HAL_TIM_Base_Start_IT>
 8002668:	4603      	mov	r3, r0
 800266a:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 800266e:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8002672:	2b00      	cmp	r3, #0
 8002674:	d111      	bne.n	800269a <HAL_InitTick+0xd2>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8002676:	2036      	movs	r0, #54	@ 0x36
 8002678:	f000 fdd6 	bl	8003228 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	2b0f      	cmp	r3, #15
 8002680:	d808      	bhi.n	8002694 <HAL_InitTick+0xcc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8002682:	2200      	movs	r2, #0
 8002684:	6879      	ldr	r1, [r7, #4]
 8002686:	2036      	movs	r0, #54	@ 0x36
 8002688:	f000 fdb2 	bl	80031f0 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800268c:	4a0a      	ldr	r2, [pc, #40]	@ (80026b8 <HAL_InitTick+0xf0>)
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	6013      	str	r3, [r2, #0]
 8002692:	e002      	b.n	800269a <HAL_InitTick+0xd2>
      }
      else
      {
        status = HAL_ERROR;
 8002694:	2301      	movs	r3, #1
 8002696:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 800269a:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 800269e:	4618      	mov	r0, r3
 80026a0:	3738      	adds	r7, #56	@ 0x38
 80026a2:	46bd      	mov	sp, r7
 80026a4:	bd80      	pop	{r7, pc}
 80026a6:	bf00      	nop
 80026a8:	40021000 	.word	0x40021000
 80026ac:	431bde83 	.word	0x431bde83
 80026b0:	20005af0 	.word	0x20005af0
 80026b4:	40001000 	.word	0x40001000
 80026b8:	20000024 	.word	0x20000024

080026bc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80026bc:	b480      	push	{r7}
 80026be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80026c0:	bf00      	nop
 80026c2:	e7fd      	b.n	80026c0 <NMI_Handler+0x4>

080026c4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80026c4:	b480      	push	{r7}
 80026c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80026c8:	bf00      	nop
 80026ca:	e7fd      	b.n	80026c8 <HardFault_Handler+0x4>

080026cc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80026cc:	b480      	push	{r7}
 80026ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80026d0:	bf00      	nop
 80026d2:	e7fd      	b.n	80026d0 <MemManage_Handler+0x4>

080026d4 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80026d4:	b480      	push	{r7}
 80026d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80026d8:	bf00      	nop
 80026da:	e7fd      	b.n	80026d8 <BusFault_Handler+0x4>

080026dc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80026dc:	b480      	push	{r7}
 80026de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80026e0:	bf00      	nop
 80026e2:	e7fd      	b.n	80026e0 <UsageFault_Handler+0x4>

080026e4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80026e4:	b480      	push	{r7}
 80026e6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80026e8:	bf00      	nop
 80026ea:	46bd      	mov	sp, r7
 80026ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026f0:	4770      	bx	lr
	...

080026f4 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 80026f4:	b580      	push	{r7, lr}
 80026f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c3_tx);
 80026f8:	4802      	ldr	r0, [pc, #8]	@ (8002704 <DMA1_Channel2_IRQHandler+0x10>)
 80026fa:	f000 ff3a 	bl	8003572 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 80026fe:	bf00      	nop
 8002700:	bd80      	pop	{r7, pc}
 8002702:	bf00      	nop
 8002704:	20005a98 	.word	0x20005a98

08002708 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 8002708:	b580      	push	{r7, lr}
 800270a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c3_rx);
 800270c:	4802      	ldr	r0, [pc, #8]	@ (8002718 <DMA1_Channel3_IRQHandler+0x10>)
 800270e:	f000 ff30 	bl	8003572 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 8002712:	bf00      	nop
 8002714:	bd80      	pop	{r7, pc}
 8002716:	bf00      	nop
 8002718:	20005a50 	.word	0x20005a50

0800271c <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 800271c:	b580      	push	{r7, lr}
 800271e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8002720:	4802      	ldr	r0, [pc, #8]	@ (800272c <DMA1_Channel6_IRQHandler+0x10>)
 8002722:	f000 ff26 	bl	8003572 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 8002726:	bf00      	nop
 8002728:	bd80      	pop	{r7, pc}
 800272a:	bf00      	nop
 800272c:	20005cb0 	.word	0x20005cb0

08002730 <DMA1_Channel7_IRQHandler>:

/**
  * @brief This function handles DMA1 channel7 global interrupt.
  */
void DMA1_Channel7_IRQHandler(void)
{
 8002730:	b580      	push	{r7, lr}
 8002732:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel7_IRQn 0 */

  /* USER CODE END DMA1_Channel7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8002734:	4802      	ldr	r0, [pc, #8]	@ (8002740 <DMA1_Channel7_IRQHandler+0x10>)
 8002736:	f000 ff1c 	bl	8003572 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel7_IRQn 1 */

  /* USER CODE END DMA1_Channel7_IRQn 1 */
}
 800273a:	bf00      	nop
 800273c:	bd80      	pop	{r7, pc}
 800273e:	bf00      	nop
 8002740:	20005cf8 	.word	0x20005cf8

08002744 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8002744:	b580      	push	{r7, lr}
 8002746:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8002748:	4802      	ldr	r0, [pc, #8]	@ (8002754 <USART2_IRQHandler+0x10>)
 800274a:	f006 f881 	bl	8008850 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800274e:	bf00      	nop
 8002750:	bd80      	pop	{r7, pc}
 8002752:	bf00      	nop
 8002754:	20005c28 	.word	0x20005c28

08002758 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 and channel2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8002758:	b580      	push	{r7, lr}
 800275a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 800275c:	4802      	ldr	r0, [pc, #8]	@ (8002768 <TIM6_DAC_IRQHandler+0x10>)
 800275e:	f004 ffc9 	bl	80076f4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8002762:	bf00      	nop
 8002764:	bd80      	pop	{r7, pc}
 8002766:	bf00      	nop
 8002768:	20005af0 	.word	0x20005af0

0800276c <I2C3_EV_IRQHandler>:

/**
  * @brief This function handles I2C3 event interrupt.
  */
void I2C3_EV_IRQHandler(void)
{
 800276c:	b580      	push	{r7, lr}
 800276e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C3_EV_IRQn 0 */

  /* USER CODE END I2C3_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c3);
 8002770:	4802      	ldr	r0, [pc, #8]	@ (800277c <I2C3_EV_IRQHandler+0x10>)
 8002772:	f001 fd11 	bl	8004198 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C3_EV_IRQn 1 */

  /* USER CODE END I2C3_EV_IRQn 1 */
}
 8002776:	bf00      	nop
 8002778:	bd80      	pop	{r7, pc}
 800277a:	bf00      	nop
 800277c:	200059fc 	.word	0x200059fc

08002780 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002780:	b480      	push	{r7}
 8002782:	af00      	add	r7, sp, #0
  return 1;
 8002784:	2301      	movs	r3, #1
}
 8002786:	4618      	mov	r0, r3
 8002788:	46bd      	mov	sp, r7
 800278a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800278e:	4770      	bx	lr

08002790 <_kill>:

int _kill(int pid, int sig)
{
 8002790:	b580      	push	{r7, lr}
 8002792:	b082      	sub	sp, #8
 8002794:	af00      	add	r7, sp, #0
 8002796:	6078      	str	r0, [r7, #4]
 8002798:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800279a:	f018 ff91 	bl	801b6c0 <__errno>
 800279e:	4603      	mov	r3, r0
 80027a0:	2216      	movs	r2, #22
 80027a2:	601a      	str	r2, [r3, #0]
  return -1;
 80027a4:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 80027a8:	4618      	mov	r0, r3
 80027aa:	3708      	adds	r7, #8
 80027ac:	46bd      	mov	sp, r7
 80027ae:	bd80      	pop	{r7, pc}

080027b0 <_exit>:

void _exit (int status)
{
 80027b0:	b580      	push	{r7, lr}
 80027b2:	b082      	sub	sp, #8
 80027b4:	af00      	add	r7, sp, #0
 80027b6:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80027b8:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80027bc:	6878      	ldr	r0, [r7, #4]
 80027be:	f7ff ffe7 	bl	8002790 <_kill>
  while (1) {}    /* Make sure we hang here */
 80027c2:	bf00      	nop
 80027c4:	e7fd      	b.n	80027c2 <_exit+0x12>

080027c6 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80027c6:	b580      	push	{r7, lr}
 80027c8:	b086      	sub	sp, #24
 80027ca:	af00      	add	r7, sp, #0
 80027cc:	60f8      	str	r0, [r7, #12]
 80027ce:	60b9      	str	r1, [r7, #8]
 80027d0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80027d2:	2300      	movs	r3, #0
 80027d4:	617b      	str	r3, [r7, #20]
 80027d6:	e00a      	b.n	80027ee <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80027d8:	f3af 8000 	nop.w
 80027dc:	4601      	mov	r1, r0
 80027de:	68bb      	ldr	r3, [r7, #8]
 80027e0:	1c5a      	adds	r2, r3, #1
 80027e2:	60ba      	str	r2, [r7, #8]
 80027e4:	b2ca      	uxtb	r2, r1
 80027e6:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80027e8:	697b      	ldr	r3, [r7, #20]
 80027ea:	3301      	adds	r3, #1
 80027ec:	617b      	str	r3, [r7, #20]
 80027ee:	697a      	ldr	r2, [r7, #20]
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	429a      	cmp	r2, r3
 80027f4:	dbf0      	blt.n	80027d8 <_read+0x12>
  }

  return len;
 80027f6:	687b      	ldr	r3, [r7, #4]
}
 80027f8:	4618      	mov	r0, r3
 80027fa:	3718      	adds	r7, #24
 80027fc:	46bd      	mov	sp, r7
 80027fe:	bd80      	pop	{r7, pc}

08002800 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002800:	b580      	push	{r7, lr}
 8002802:	b086      	sub	sp, #24
 8002804:	af00      	add	r7, sp, #0
 8002806:	60f8      	str	r0, [r7, #12]
 8002808:	60b9      	str	r1, [r7, #8]
 800280a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800280c:	2300      	movs	r3, #0
 800280e:	617b      	str	r3, [r7, #20]
 8002810:	e009      	b.n	8002826 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002812:	68bb      	ldr	r3, [r7, #8]
 8002814:	1c5a      	adds	r2, r3, #1
 8002816:	60ba      	str	r2, [r7, #8]
 8002818:	781b      	ldrb	r3, [r3, #0]
 800281a:	4618      	mov	r0, r3
 800281c:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002820:	697b      	ldr	r3, [r7, #20]
 8002822:	3301      	adds	r3, #1
 8002824:	617b      	str	r3, [r7, #20]
 8002826:	697a      	ldr	r2, [r7, #20]
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	429a      	cmp	r2, r3
 800282c:	dbf1      	blt.n	8002812 <_write+0x12>
  }
  return len;
 800282e:	687b      	ldr	r3, [r7, #4]
}
 8002830:	4618      	mov	r0, r3
 8002832:	3718      	adds	r7, #24
 8002834:	46bd      	mov	sp, r7
 8002836:	bd80      	pop	{r7, pc}

08002838 <_close>:

int _close(int file)
{
 8002838:	b480      	push	{r7}
 800283a:	b083      	sub	sp, #12
 800283c:	af00      	add	r7, sp, #0
 800283e:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002840:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8002844:	4618      	mov	r0, r3
 8002846:	370c      	adds	r7, #12
 8002848:	46bd      	mov	sp, r7
 800284a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800284e:	4770      	bx	lr

08002850 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002850:	b480      	push	{r7}
 8002852:	b083      	sub	sp, #12
 8002854:	af00      	add	r7, sp, #0
 8002856:	6078      	str	r0, [r7, #4]
 8002858:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800285a:	683b      	ldr	r3, [r7, #0]
 800285c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002860:	605a      	str	r2, [r3, #4]
  return 0;
 8002862:	2300      	movs	r3, #0
}
 8002864:	4618      	mov	r0, r3
 8002866:	370c      	adds	r7, #12
 8002868:	46bd      	mov	sp, r7
 800286a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800286e:	4770      	bx	lr

08002870 <_isatty>:

int _isatty(int file)
{
 8002870:	b480      	push	{r7}
 8002872:	b083      	sub	sp, #12
 8002874:	af00      	add	r7, sp, #0
 8002876:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002878:	2301      	movs	r3, #1
}
 800287a:	4618      	mov	r0, r3
 800287c:	370c      	adds	r7, #12
 800287e:	46bd      	mov	sp, r7
 8002880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002884:	4770      	bx	lr

08002886 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002886:	b480      	push	{r7}
 8002888:	b085      	sub	sp, #20
 800288a:	af00      	add	r7, sp, #0
 800288c:	60f8      	str	r0, [r7, #12]
 800288e:	60b9      	str	r1, [r7, #8]
 8002890:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002892:	2300      	movs	r3, #0
}
 8002894:	4618      	mov	r0, r3
 8002896:	3714      	adds	r7, #20
 8002898:	46bd      	mov	sp, r7
 800289a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800289e:	4770      	bx	lr

080028a0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80028a0:	b580      	push	{r7, lr}
 80028a2:	b086      	sub	sp, #24
 80028a4:	af00      	add	r7, sp, #0
 80028a6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80028a8:	4a14      	ldr	r2, [pc, #80]	@ (80028fc <_sbrk+0x5c>)
 80028aa:	4b15      	ldr	r3, [pc, #84]	@ (8002900 <_sbrk+0x60>)
 80028ac:	1ad3      	subs	r3, r2, r3
 80028ae:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80028b0:	697b      	ldr	r3, [r7, #20]
 80028b2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80028b4:	4b13      	ldr	r3, [pc, #76]	@ (8002904 <_sbrk+0x64>)
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	d102      	bne.n	80028c2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80028bc:	4b11      	ldr	r3, [pc, #68]	@ (8002904 <_sbrk+0x64>)
 80028be:	4a12      	ldr	r2, [pc, #72]	@ (8002908 <_sbrk+0x68>)
 80028c0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80028c2:	4b10      	ldr	r3, [pc, #64]	@ (8002904 <_sbrk+0x64>)
 80028c4:	681a      	ldr	r2, [r3, #0]
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	4413      	add	r3, r2
 80028ca:	693a      	ldr	r2, [r7, #16]
 80028cc:	429a      	cmp	r2, r3
 80028ce:	d207      	bcs.n	80028e0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80028d0:	f018 fef6 	bl	801b6c0 <__errno>
 80028d4:	4603      	mov	r3, r0
 80028d6:	220c      	movs	r2, #12
 80028d8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80028da:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80028de:	e009      	b.n	80028f4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80028e0:	4b08      	ldr	r3, [pc, #32]	@ (8002904 <_sbrk+0x64>)
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80028e6:	4b07      	ldr	r3, [pc, #28]	@ (8002904 <_sbrk+0x64>)
 80028e8:	681a      	ldr	r2, [r3, #0]
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	4413      	add	r3, r2
 80028ee:	4a05      	ldr	r2, [pc, #20]	@ (8002904 <_sbrk+0x64>)
 80028f0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80028f2:	68fb      	ldr	r3, [r7, #12]
}
 80028f4:	4618      	mov	r0, r3
 80028f6:	3718      	adds	r7, #24
 80028f8:	46bd      	mov	sp, r7
 80028fa:	bd80      	pop	{r7, pc}
 80028fc:	20010000 	.word	0x20010000
 8002900:	00000400 	.word	0x00000400
 8002904:	20005b40 	.word	0x20005b40
 8002908:	2000c3b0 	.word	0x2000c3b0

0800290c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 800290c:	b480      	push	{r7}
 800290e:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8002910:	4b06      	ldr	r3, [pc, #24]	@ (800292c <SystemInit+0x20>)
 8002912:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002916:	4a05      	ldr	r2, [pc, #20]	@ (800292c <SystemInit+0x20>)
 8002918:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800291c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8002920:	bf00      	nop
 8002922:	46bd      	mov	sp, r7
 8002924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002928:	4770      	bx	lr
 800292a:	bf00      	nop
 800292c:	e000ed00 	.word	0xe000ed00

08002930 <MX_TIM1_Init>:
TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim15;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8002930:	b580      	push	{r7, lr}
 8002932:	b08c      	sub	sp, #48	@ 0x30
 8002934:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8002936:	f107 030c 	add.w	r3, r7, #12
 800293a:	2224      	movs	r2, #36	@ 0x24
 800293c:	2100      	movs	r1, #0
 800293e:	4618      	mov	r0, r3
 8002940:	f018 fdd4 	bl	801b4ec <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002944:	463b      	mov	r3, r7
 8002946:	2200      	movs	r2, #0
 8002948:	601a      	str	r2, [r3, #0]
 800294a:	605a      	str	r2, [r3, #4]
 800294c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800294e:	4b23      	ldr	r3, [pc, #140]	@ (80029dc <MX_TIM1_Init+0xac>)
 8002950:	4a23      	ldr	r2, [pc, #140]	@ (80029e0 <MX_TIM1_Init+0xb0>)
 8002952:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8002954:	4b21      	ldr	r3, [pc, #132]	@ (80029dc <MX_TIM1_Init+0xac>)
 8002956:	2200      	movs	r2, #0
 8002958:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800295a:	4b20      	ldr	r3, [pc, #128]	@ (80029dc <MX_TIM1_Init+0xac>)
 800295c:	2200      	movs	r2, #0
 800295e:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8002960:	4b1e      	ldr	r3, [pc, #120]	@ (80029dc <MX_TIM1_Init+0xac>)
 8002962:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002966:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002968:	4b1c      	ldr	r3, [pc, #112]	@ (80029dc <MX_TIM1_Init+0xac>)
 800296a:	2200      	movs	r2, #0
 800296c:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800296e:	4b1b      	ldr	r3, [pc, #108]	@ (80029dc <MX_TIM1_Init+0xac>)
 8002970:	2200      	movs	r2, #0
 8002972:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002974:	4b19      	ldr	r3, [pc, #100]	@ (80029dc <MX_TIM1_Init+0xac>)
 8002976:	2200      	movs	r2, #0
 8002978:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 800297a:	2301      	movs	r3, #1
 800297c:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800297e:	2300      	movs	r3, #0
 8002980:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8002982:	2301      	movs	r3, #1
 8002984:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8002986:	2300      	movs	r3, #0
 8002988:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 800298a:	2300      	movs	r3, #0
 800298c:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800298e:	2300      	movs	r3, #0
 8002990:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8002992:	2301      	movs	r3, #1
 8002994:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8002996:	2300      	movs	r3, #0
 8002998:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 800299a:	2300      	movs	r3, #0
 800299c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 800299e:	f107 030c 	add.w	r3, r7, #12
 80029a2:	4619      	mov	r1, r3
 80029a4:	480d      	ldr	r0, [pc, #52]	@ (80029dc <MX_TIM1_Init+0xac>)
 80029a6:	f004 fd71 	bl	800748c <HAL_TIM_Encoder_Init>
 80029aa:	4603      	mov	r3, r0
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	d001      	beq.n	80029b4 <MX_TIM1_Init+0x84>
  {
    Error_Handler();
 80029b0:	f7ff fc76 	bl	80022a0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80029b4:	2300      	movs	r3, #0
 80029b6:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80029b8:	2300      	movs	r3, #0
 80029ba:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80029bc:	2300      	movs	r3, #0
 80029be:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80029c0:	463b      	mov	r3, r7
 80029c2:	4619      	mov	r1, r3
 80029c4:	4805      	ldr	r0, [pc, #20]	@ (80029dc <MX_TIM1_Init+0xac>)
 80029c6:	f005 fc79 	bl	80082bc <HAL_TIMEx_MasterConfigSynchronization>
 80029ca:	4603      	mov	r3, r0
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	d001      	beq.n	80029d4 <MX_TIM1_Init+0xa4>
  {
    Error_Handler();
 80029d0:	f7ff fc66 	bl	80022a0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80029d4:	bf00      	nop
 80029d6:	3730      	adds	r7, #48	@ 0x30
 80029d8:	46bd      	mov	sp, r7
 80029da:	bd80      	pop	{r7, pc}
 80029dc:	20005b44 	.word	0x20005b44
 80029e0:	40012c00 	.word	0x40012c00

080029e4 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 80029e4:	b580      	push	{r7, lr}
 80029e6:	b08c      	sub	sp, #48	@ 0x30
 80029e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80029ea:	f107 030c 	add.w	r3, r7, #12
 80029ee:	2224      	movs	r2, #36	@ 0x24
 80029f0:	2100      	movs	r1, #0
 80029f2:	4618      	mov	r0, r3
 80029f4:	f018 fd7a 	bl	801b4ec <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80029f8:	463b      	mov	r3, r7
 80029fa:	2200      	movs	r2, #0
 80029fc:	601a      	str	r2, [r3, #0]
 80029fe:	605a      	str	r2, [r3, #4]
 8002a00:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002a02:	4b21      	ldr	r3, [pc, #132]	@ (8002a88 <MX_TIM2_Init+0xa4>)
 8002a04:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8002a08:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8002a0a:	4b1f      	ldr	r3, [pc, #124]	@ (8002a88 <MX_TIM2_Init+0xa4>)
 8002a0c:	2200      	movs	r2, #0
 8002a0e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002a10:	4b1d      	ldr	r3, [pc, #116]	@ (8002a88 <MX_TIM2_Init+0xa4>)
 8002a12:	2200      	movs	r2, #0
 8002a14:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 8002a16:	4b1c      	ldr	r3, [pc, #112]	@ (8002a88 <MX_TIM2_Init+0xa4>)
 8002a18:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002a1c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002a1e:	4b1a      	ldr	r3, [pc, #104]	@ (8002a88 <MX_TIM2_Init+0xa4>)
 8002a20:	2200      	movs	r2, #0
 8002a22:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002a24:	4b18      	ldr	r3, [pc, #96]	@ (8002a88 <MX_TIM2_Init+0xa4>)
 8002a26:	2200      	movs	r2, #0
 8002a28:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8002a2a:	2301      	movs	r3, #1
 8002a2c:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8002a2e:	2300      	movs	r3, #0
 8002a30:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8002a32:	2301      	movs	r3, #1
 8002a34:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8002a36:	2300      	movs	r3, #0
 8002a38:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8002a3a:	2300      	movs	r3, #0
 8002a3c:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8002a3e:	2300      	movs	r3, #0
 8002a40:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8002a42:	2301      	movs	r3, #1
 8002a44:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8002a46:	2300      	movs	r3, #0
 8002a48:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8002a4a:	2300      	movs	r3, #0
 8002a4c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8002a4e:	f107 030c 	add.w	r3, r7, #12
 8002a52:	4619      	mov	r1, r3
 8002a54:	480c      	ldr	r0, [pc, #48]	@ (8002a88 <MX_TIM2_Init+0xa4>)
 8002a56:	f004 fd19 	bl	800748c <HAL_TIM_Encoder_Init>
 8002a5a:	4603      	mov	r3, r0
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	d001      	beq.n	8002a64 <MX_TIM2_Init+0x80>
  {
    Error_Handler();
 8002a60:	f7ff fc1e 	bl	80022a0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002a64:	2300      	movs	r3, #0
 8002a66:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002a68:	2300      	movs	r3, #0
 8002a6a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002a6c:	463b      	mov	r3, r7
 8002a6e:	4619      	mov	r1, r3
 8002a70:	4805      	ldr	r0, [pc, #20]	@ (8002a88 <MX_TIM2_Init+0xa4>)
 8002a72:	f005 fc23 	bl	80082bc <HAL_TIMEx_MasterConfigSynchronization>
 8002a76:	4603      	mov	r3, r0
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	d001      	beq.n	8002a80 <MX_TIM2_Init+0x9c>
  {
    Error_Handler();
 8002a7c:	f7ff fc10 	bl	80022a0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8002a80:	bf00      	nop
 8002a82:	3730      	adds	r7, #48	@ 0x30
 8002a84:	46bd      	mov	sp, r7
 8002a86:	bd80      	pop	{r7, pc}
 8002a88:	20005b90 	.word	0x20005b90

08002a8c <MX_TIM15_Init>:
/* TIM15 init function */
void MX_TIM15_Init(void)
{
 8002a8c:	b580      	push	{r7, lr}
 8002a8e:	b096      	sub	sp, #88	@ 0x58
 8002a90:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM15_Init 0 */

  /* USER CODE END TIM15_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002a92:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8002a96:	2200      	movs	r2, #0
 8002a98:	601a      	str	r2, [r3, #0]
 8002a9a:	605a      	str	r2, [r3, #4]
 8002a9c:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002a9e:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8002aa2:	2200      	movs	r2, #0
 8002aa4:	601a      	str	r2, [r3, #0]
 8002aa6:	605a      	str	r2, [r3, #4]
 8002aa8:	609a      	str	r2, [r3, #8]
 8002aaa:	60da      	str	r2, [r3, #12]
 8002aac:	611a      	str	r2, [r3, #16]
 8002aae:	615a      	str	r2, [r3, #20]
 8002ab0:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8002ab2:	1d3b      	adds	r3, r7, #4
 8002ab4:	222c      	movs	r2, #44	@ 0x2c
 8002ab6:	2100      	movs	r1, #0
 8002ab8:	4618      	mov	r0, r3
 8002aba:	f018 fd17 	bl	801b4ec <memset>

  /* USER CODE BEGIN TIM15_Init 1 */

  /* USER CODE END TIM15_Init 1 */
  htim15.Instance = TIM15;
 8002abe:	4b39      	ldr	r3, [pc, #228]	@ (8002ba4 <MX_TIM15_Init+0x118>)
 8002ac0:	4a39      	ldr	r2, [pc, #228]	@ (8002ba8 <MX_TIM15_Init+0x11c>)
 8002ac2:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 0;
 8002ac4:	4b37      	ldr	r3, [pc, #220]	@ (8002ba4 <MX_TIM15_Init+0x118>)
 8002ac6:	2200      	movs	r2, #0
 8002ac8:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002aca:	4b36      	ldr	r3, [pc, #216]	@ (8002ba4 <MX_TIM15_Init+0x118>)
 8002acc:	2200      	movs	r2, #0
 8002ace:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 65535;
 8002ad0:	4b34      	ldr	r3, [pc, #208]	@ (8002ba4 <MX_TIM15_Init+0x118>)
 8002ad2:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002ad6:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002ad8:	4b32      	ldr	r3, [pc, #200]	@ (8002ba4 <MX_TIM15_Init+0x118>)
 8002ada:	2200      	movs	r2, #0
 8002adc:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 8002ade:	4b31      	ldr	r3, [pc, #196]	@ (8002ba4 <MX_TIM15_Init+0x118>)
 8002ae0:	2200      	movs	r2, #0
 8002ae2:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002ae4:	4b2f      	ldr	r3, [pc, #188]	@ (8002ba4 <MX_TIM15_Init+0x118>)
 8002ae6:	2200      	movs	r2, #0
 8002ae8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim15) != HAL_OK)
 8002aea:	482e      	ldr	r0, [pc, #184]	@ (8002ba4 <MX_TIM15_Init+0x118>)
 8002aec:	f004 fb98 	bl	8007220 <HAL_TIM_PWM_Init>
 8002af0:	4603      	mov	r3, r0
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d001      	beq.n	8002afa <MX_TIM15_Init+0x6e>
  {
    Error_Handler();
 8002af6:	f7ff fbd3 	bl	80022a0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002afa:	2300      	movs	r3, #0
 8002afc:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002afe:	2300      	movs	r3, #0
 8002b00:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 8002b02:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8002b06:	4619      	mov	r1, r3
 8002b08:	4826      	ldr	r0, [pc, #152]	@ (8002ba4 <MX_TIM15_Init+0x118>)
 8002b0a:	f005 fbd7 	bl	80082bc <HAL_TIMEx_MasterConfigSynchronization>
 8002b0e:	4603      	mov	r3, r0
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	d001      	beq.n	8002b18 <MX_TIM15_Init+0x8c>
  {
    Error_Handler();
 8002b14:	f7ff fbc4 	bl	80022a0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002b18:	2360      	movs	r3, #96	@ 0x60
 8002b1a:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.Pulse = 0;
 8002b1c:	2300      	movs	r3, #0
 8002b1e:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002b20:	2300      	movs	r3, #0
 8002b22:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8002b24:	2300      	movs	r3, #0
 8002b26:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002b28:	2300      	movs	r3, #0
 8002b2a:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8002b2c:	2300      	movs	r3, #0
 8002b2e:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8002b30:	2300      	movs	r3, #0
 8002b32:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim15, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002b34:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8002b38:	2200      	movs	r2, #0
 8002b3a:	4619      	mov	r1, r3
 8002b3c:	4819      	ldr	r0, [pc, #100]	@ (8002ba4 <MX_TIM15_Init+0x118>)
 8002b3e:	f004 fedb 	bl	80078f8 <HAL_TIM_PWM_ConfigChannel>
 8002b42:	4603      	mov	r3, r0
 8002b44:	2b00      	cmp	r3, #0
 8002b46:	d001      	beq.n	8002b4c <MX_TIM15_Init+0xc0>
  {
    Error_Handler();
 8002b48:	f7ff fbaa 	bl	80022a0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim15, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002b4c:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8002b50:	2204      	movs	r2, #4
 8002b52:	4619      	mov	r1, r3
 8002b54:	4813      	ldr	r0, [pc, #76]	@ (8002ba4 <MX_TIM15_Init+0x118>)
 8002b56:	f004 fecf 	bl	80078f8 <HAL_TIM_PWM_ConfigChannel>
 8002b5a:	4603      	mov	r3, r0
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	d001      	beq.n	8002b64 <MX_TIM15_Init+0xd8>
  {
    Error_Handler();
 8002b60:	f7ff fb9e 	bl	80022a0 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8002b64:	2300      	movs	r3, #0
 8002b66:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8002b68:	2300      	movs	r3, #0
 8002b6a:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8002b6c:	2300      	movs	r3, #0
 8002b6e:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8002b70:	2300      	movs	r3, #0
 8002b72:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8002b74:	2300      	movs	r3, #0
 8002b76:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8002b78:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002b7c:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8002b7e:	2300      	movs	r3, #0
 8002b80:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim15, &sBreakDeadTimeConfig) != HAL_OK)
 8002b82:	1d3b      	adds	r3, r7, #4
 8002b84:	4619      	mov	r1, r3
 8002b86:	4807      	ldr	r0, [pc, #28]	@ (8002ba4 <MX_TIM15_Init+0x118>)
 8002b88:	f005 fbfe 	bl	8008388 <HAL_TIMEx_ConfigBreakDeadTime>
 8002b8c:	4603      	mov	r3, r0
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d001      	beq.n	8002b96 <MX_TIM15_Init+0x10a>
  {
    Error_Handler();
 8002b92:	f7ff fb85 	bl	80022a0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM15_Init 2 */

  /* USER CODE END TIM15_Init 2 */
  HAL_TIM_MspPostInit(&htim15);
 8002b96:	4803      	ldr	r0, [pc, #12]	@ (8002ba4 <MX_TIM15_Init+0x118>)
 8002b98:	f000 f8b8 	bl	8002d0c <HAL_TIM_MspPostInit>

}
 8002b9c:	bf00      	nop
 8002b9e:	3758      	adds	r7, #88	@ 0x58
 8002ba0:	46bd      	mov	sp, r7
 8002ba2:	bd80      	pop	{r7, pc}
 8002ba4:	20005bdc 	.word	0x20005bdc
 8002ba8:	40014000 	.word	0x40014000

08002bac <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 8002bac:	b580      	push	{r7, lr}
 8002bae:	b08c      	sub	sp, #48	@ 0x30
 8002bb0:	af00      	add	r7, sp, #0
 8002bb2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002bb4:	f107 031c 	add.w	r3, r7, #28
 8002bb8:	2200      	movs	r2, #0
 8002bba:	601a      	str	r2, [r3, #0]
 8002bbc:	605a      	str	r2, [r3, #4]
 8002bbe:	609a      	str	r2, [r3, #8]
 8002bc0:	60da      	str	r2, [r3, #12]
 8002bc2:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM1)
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	4a3d      	ldr	r2, [pc, #244]	@ (8002cc0 <HAL_TIM_Encoder_MspInit+0x114>)
 8002bca:	4293      	cmp	r3, r2
 8002bcc:	d12a      	bne.n	8002c24 <HAL_TIM_Encoder_MspInit+0x78>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002bce:	4b3d      	ldr	r3, [pc, #244]	@ (8002cc4 <HAL_TIM_Encoder_MspInit+0x118>)
 8002bd0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002bd2:	4a3c      	ldr	r2, [pc, #240]	@ (8002cc4 <HAL_TIM_Encoder_MspInit+0x118>)
 8002bd4:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8002bd8:	6613      	str	r3, [r2, #96]	@ 0x60
 8002bda:	4b3a      	ldr	r3, [pc, #232]	@ (8002cc4 <HAL_TIM_Encoder_MspInit+0x118>)
 8002bdc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002bde:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002be2:	61bb      	str	r3, [r7, #24]
 8002be4:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002be6:	4b37      	ldr	r3, [pc, #220]	@ (8002cc4 <HAL_TIM_Encoder_MspInit+0x118>)
 8002be8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002bea:	4a36      	ldr	r2, [pc, #216]	@ (8002cc4 <HAL_TIM_Encoder_MspInit+0x118>)
 8002bec:	f043 0301 	orr.w	r3, r3, #1
 8002bf0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002bf2:	4b34      	ldr	r3, [pc, #208]	@ (8002cc4 <HAL_TIM_Encoder_MspInit+0x118>)
 8002bf4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002bf6:	f003 0301 	and.w	r3, r3, #1
 8002bfa:	617b      	str	r3, [r7, #20]
 8002bfc:	697b      	ldr	r3, [r7, #20]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8002bfe:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8002c02:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c04:	2302      	movs	r3, #2
 8002c06:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c08:	2300      	movs	r3, #0
 8002c0a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002c0c:	2302      	movs	r3, #2
 8002c0e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8002c10:	2301      	movs	r3, #1
 8002c12:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002c14:	f107 031c 	add.w	r3, r7, #28
 8002c18:	4619      	mov	r1, r3
 8002c1a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002c1e:	f000 fda1 	bl	8003764 <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8002c22:	e049      	b.n	8002cb8 <HAL_TIM_Encoder_MspInit+0x10c>
  else if(tim_encoderHandle->Instance==TIM2)
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002c2c:	d144      	bne.n	8002cb8 <HAL_TIM_Encoder_MspInit+0x10c>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002c2e:	4b25      	ldr	r3, [pc, #148]	@ (8002cc4 <HAL_TIM_Encoder_MspInit+0x118>)
 8002c30:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002c32:	4a24      	ldr	r2, [pc, #144]	@ (8002cc4 <HAL_TIM_Encoder_MspInit+0x118>)
 8002c34:	f043 0301 	orr.w	r3, r3, #1
 8002c38:	6593      	str	r3, [r2, #88]	@ 0x58
 8002c3a:	4b22      	ldr	r3, [pc, #136]	@ (8002cc4 <HAL_TIM_Encoder_MspInit+0x118>)
 8002c3c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002c3e:	f003 0301 	and.w	r3, r3, #1
 8002c42:	613b      	str	r3, [r7, #16]
 8002c44:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002c46:	4b1f      	ldr	r3, [pc, #124]	@ (8002cc4 <HAL_TIM_Encoder_MspInit+0x118>)
 8002c48:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002c4a:	4a1e      	ldr	r2, [pc, #120]	@ (8002cc4 <HAL_TIM_Encoder_MspInit+0x118>)
 8002c4c:	f043 0301 	orr.w	r3, r3, #1
 8002c50:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002c52:	4b1c      	ldr	r3, [pc, #112]	@ (8002cc4 <HAL_TIM_Encoder_MspInit+0x118>)
 8002c54:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002c56:	f003 0301 	and.w	r3, r3, #1
 8002c5a:	60fb      	str	r3, [r7, #12]
 8002c5c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002c5e:	4b19      	ldr	r3, [pc, #100]	@ (8002cc4 <HAL_TIM_Encoder_MspInit+0x118>)
 8002c60:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002c62:	4a18      	ldr	r2, [pc, #96]	@ (8002cc4 <HAL_TIM_Encoder_MspInit+0x118>)
 8002c64:	f043 0302 	orr.w	r3, r3, #2
 8002c68:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002c6a:	4b16      	ldr	r3, [pc, #88]	@ (8002cc4 <HAL_TIM_Encoder_MspInit+0x118>)
 8002c6c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002c6e:	f003 0302 	and.w	r3, r3, #2
 8002c72:	60bb      	str	r3, [r7, #8]
 8002c74:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8002c76:	2320      	movs	r3, #32
 8002c78:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c7a:	2302      	movs	r3, #2
 8002c7c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c7e:	2300      	movs	r3, #0
 8002c80:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c82:	2300      	movs	r3, #0
 8002c84:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002c86:	2301      	movs	r3, #1
 8002c88:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002c8a:	f107 031c 	add.w	r3, r7, #28
 8002c8e:	4619      	mov	r1, r3
 8002c90:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002c94:	f000 fd66 	bl	8003764 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8002c98:	2308      	movs	r3, #8
 8002c9a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c9c:	2302      	movs	r3, #2
 8002c9e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ca0:	2300      	movs	r3, #0
 8002ca2:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ca4:	2300      	movs	r3, #0
 8002ca6:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002ca8:	2301      	movs	r3, #1
 8002caa:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002cac:	f107 031c 	add.w	r3, r7, #28
 8002cb0:	4619      	mov	r1, r3
 8002cb2:	4805      	ldr	r0, [pc, #20]	@ (8002cc8 <HAL_TIM_Encoder_MspInit+0x11c>)
 8002cb4:	f000 fd56 	bl	8003764 <HAL_GPIO_Init>
}
 8002cb8:	bf00      	nop
 8002cba:	3730      	adds	r7, #48	@ 0x30
 8002cbc:	46bd      	mov	sp, r7
 8002cbe:	bd80      	pop	{r7, pc}
 8002cc0:	40012c00 	.word	0x40012c00
 8002cc4:	40021000 	.word	0x40021000
 8002cc8:	48000400 	.word	0x48000400

08002ccc <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8002ccc:	b480      	push	{r7}
 8002cce:	b085      	sub	sp, #20
 8002cd0:	af00      	add	r7, sp, #0
 8002cd2:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM15)
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	4a0a      	ldr	r2, [pc, #40]	@ (8002d04 <HAL_TIM_PWM_MspInit+0x38>)
 8002cda:	4293      	cmp	r3, r2
 8002cdc:	d10b      	bne.n	8002cf6 <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM15_MspInit 0 */

  /* USER CODE END TIM15_MspInit 0 */
    /* TIM15 clock enable */
    __HAL_RCC_TIM15_CLK_ENABLE();
 8002cde:	4b0a      	ldr	r3, [pc, #40]	@ (8002d08 <HAL_TIM_PWM_MspInit+0x3c>)
 8002ce0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002ce2:	4a09      	ldr	r2, [pc, #36]	@ (8002d08 <HAL_TIM_PWM_MspInit+0x3c>)
 8002ce4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002ce8:	6613      	str	r3, [r2, #96]	@ 0x60
 8002cea:	4b07      	ldr	r3, [pc, #28]	@ (8002d08 <HAL_TIM_PWM_MspInit+0x3c>)
 8002cec:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002cee:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002cf2:	60fb      	str	r3, [r7, #12]
 8002cf4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM15_MspInit 1 */

  /* USER CODE END TIM15_MspInit 1 */
  }
}
 8002cf6:	bf00      	nop
 8002cf8:	3714      	adds	r7, #20
 8002cfa:	46bd      	mov	sp, r7
 8002cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d00:	4770      	bx	lr
 8002d02:	bf00      	nop
 8002d04:	40014000 	.word	0x40014000
 8002d08:	40021000 	.word	0x40021000

08002d0c <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8002d0c:	b580      	push	{r7, lr}
 8002d0e:	b088      	sub	sp, #32
 8002d10:	af00      	add	r7, sp, #0
 8002d12:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002d14:	f107 030c 	add.w	r3, r7, #12
 8002d18:	2200      	movs	r2, #0
 8002d1a:	601a      	str	r2, [r3, #0]
 8002d1c:	605a      	str	r2, [r3, #4]
 8002d1e:	609a      	str	r2, [r3, #8]
 8002d20:	60da      	str	r2, [r3, #12]
 8002d22:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM15)
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	4a11      	ldr	r2, [pc, #68]	@ (8002d70 <HAL_TIM_MspPostInit+0x64>)
 8002d2a:	4293      	cmp	r3, r2
 8002d2c:	d11c      	bne.n	8002d68 <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM15_MspPostInit 0 */

  /* USER CODE END TIM15_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002d2e:	4b11      	ldr	r3, [pc, #68]	@ (8002d74 <HAL_TIM_MspPostInit+0x68>)
 8002d30:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002d32:	4a10      	ldr	r2, [pc, #64]	@ (8002d74 <HAL_TIM_MspPostInit+0x68>)
 8002d34:	f043 0301 	orr.w	r3, r3, #1
 8002d38:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002d3a:	4b0e      	ldr	r3, [pc, #56]	@ (8002d74 <HAL_TIM_MspPostInit+0x68>)
 8002d3c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002d3e:	f003 0301 	and.w	r3, r3, #1
 8002d42:	60bb      	str	r3, [r7, #8]
 8002d44:	68bb      	ldr	r3, [r7, #8]
    /**TIM15 GPIO Configuration
    PA1     ------> TIM15_CH1N
    PA3     ------> TIM15_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_3;
 8002d46:	230a      	movs	r3, #10
 8002d48:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d4a:	2302      	movs	r3, #2
 8002d4c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d4e:	2300      	movs	r3, #0
 8002d50:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d52:	2300      	movs	r3, #0
 8002d54:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF14_TIM15;
 8002d56:	230e      	movs	r3, #14
 8002d58:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002d5a:	f107 030c 	add.w	r3, r7, #12
 8002d5e:	4619      	mov	r1, r3
 8002d60:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002d64:	f000 fcfe 	bl	8003764 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM15_MspPostInit 1 */

  /* USER CODE END TIM15_MspPostInit 1 */
  }

}
 8002d68:	bf00      	nop
 8002d6a:	3720      	adds	r7, #32
 8002d6c:	46bd      	mov	sp, r7
 8002d6e:	bd80      	pop	{r7, pc}
 8002d70:	40014000 	.word	0x40014000
 8002d74:	40021000 	.word	0x40021000

08002d78 <MX_USART2_UART_Init>:
DMA_HandleTypeDef hdma_usart2_tx;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8002d78:	b580      	push	{r7, lr}
 8002d7a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002d7c:	4b14      	ldr	r3, [pc, #80]	@ (8002dd0 <MX_USART2_UART_Init+0x58>)
 8002d7e:	4a15      	ldr	r2, [pc, #84]	@ (8002dd4 <MX_USART2_UART_Init+0x5c>)
 8002d80:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 921600;
 8002d82:	4b13      	ldr	r3, [pc, #76]	@ (8002dd0 <MX_USART2_UART_Init+0x58>)
 8002d84:	f44f 2261 	mov.w	r2, #921600	@ 0xe1000
 8002d88:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002d8a:	4b11      	ldr	r3, [pc, #68]	@ (8002dd0 <MX_USART2_UART_Init+0x58>)
 8002d8c:	2200      	movs	r2, #0
 8002d8e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002d90:	4b0f      	ldr	r3, [pc, #60]	@ (8002dd0 <MX_USART2_UART_Init+0x58>)
 8002d92:	2200      	movs	r2, #0
 8002d94:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002d96:	4b0e      	ldr	r3, [pc, #56]	@ (8002dd0 <MX_USART2_UART_Init+0x58>)
 8002d98:	2200      	movs	r2, #0
 8002d9a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002d9c:	4b0c      	ldr	r3, [pc, #48]	@ (8002dd0 <MX_USART2_UART_Init+0x58>)
 8002d9e:	220c      	movs	r2, #12
 8002da0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002da2:	4b0b      	ldr	r3, [pc, #44]	@ (8002dd0 <MX_USART2_UART_Init+0x58>)
 8002da4:	2200      	movs	r2, #0
 8002da6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002da8:	4b09      	ldr	r3, [pc, #36]	@ (8002dd0 <MX_USART2_UART_Init+0x58>)
 8002daa:	2200      	movs	r2, #0
 8002dac:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002dae:	4b08      	ldr	r3, [pc, #32]	@ (8002dd0 <MX_USART2_UART_Init+0x58>)
 8002db0:	2200      	movs	r2, #0
 8002db2:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002db4:	4b06      	ldr	r3, [pc, #24]	@ (8002dd0 <MX_USART2_UART_Init+0x58>)
 8002db6:	2200      	movs	r2, #0
 8002db8:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002dba:	4805      	ldr	r0, [pc, #20]	@ (8002dd0 <MX_USART2_UART_Init+0x58>)
 8002dbc:	f005 fb9f 	bl	80084fe <HAL_UART_Init>
 8002dc0:	4603      	mov	r3, r0
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d001      	beq.n	8002dca <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8002dc6:	f7ff fa6b 	bl	80022a0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002dca:	bf00      	nop
 8002dcc:	bd80      	pop	{r7, pc}
 8002dce:	bf00      	nop
 8002dd0:	20005c28 	.word	0x20005c28
 8002dd4:	40004400 	.word	0x40004400

08002dd8 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002dd8:	b580      	push	{r7, lr}
 8002dda:	b09e      	sub	sp, #120	@ 0x78
 8002ddc:	af00      	add	r7, sp, #0
 8002dde:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002de0:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8002de4:	2200      	movs	r2, #0
 8002de6:	601a      	str	r2, [r3, #0]
 8002de8:	605a      	str	r2, [r3, #4]
 8002dea:	609a      	str	r2, [r3, #8]
 8002dec:	60da      	str	r2, [r3, #12]
 8002dee:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002df0:	f107 0310 	add.w	r3, r7, #16
 8002df4:	2254      	movs	r2, #84	@ 0x54
 8002df6:	2100      	movs	r1, #0
 8002df8:	4618      	mov	r0, r3
 8002dfa:	f018 fb77 	bl	801b4ec <memset>
  if(uartHandle->Instance==USART2)
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	4a56      	ldr	r2, [pc, #344]	@ (8002f5c <HAL_UART_MspInit+0x184>)
 8002e04:	4293      	cmp	r3, r2
 8002e06:	f040 80a5 	bne.w	8002f54 <HAL_UART_MspInit+0x17c>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8002e0a:	2302      	movs	r3, #2
 8002e0c:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8002e0e:	2300      	movs	r3, #0
 8002e10:	637b      	str	r3, [r7, #52]	@ 0x34
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002e12:	f107 0310 	add.w	r3, r7, #16
 8002e16:	4618      	mov	r0, r3
 8002e18:	f003 fe08 	bl	8006a2c <HAL_RCCEx_PeriphCLKConfig>
 8002e1c:	4603      	mov	r3, r0
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	d001      	beq.n	8002e26 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8002e22:	f7ff fa3d 	bl	80022a0 <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002e26:	4b4e      	ldr	r3, [pc, #312]	@ (8002f60 <HAL_UART_MspInit+0x188>)
 8002e28:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002e2a:	4a4d      	ldr	r2, [pc, #308]	@ (8002f60 <HAL_UART_MspInit+0x188>)
 8002e2c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002e30:	6593      	str	r3, [r2, #88]	@ 0x58
 8002e32:	4b4b      	ldr	r3, [pc, #300]	@ (8002f60 <HAL_UART_MspInit+0x188>)
 8002e34:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002e36:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002e3a:	60fb      	str	r3, [r7, #12]
 8002e3c:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002e3e:	4b48      	ldr	r3, [pc, #288]	@ (8002f60 <HAL_UART_MspInit+0x188>)
 8002e40:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002e42:	4a47      	ldr	r2, [pc, #284]	@ (8002f60 <HAL_UART_MspInit+0x188>)
 8002e44:	f043 0301 	orr.w	r3, r3, #1
 8002e48:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002e4a:	4b45      	ldr	r3, [pc, #276]	@ (8002f60 <HAL_UART_MspInit+0x188>)
 8002e4c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002e4e:	f003 0301 	and.w	r3, r3, #1
 8002e52:	60bb      	str	r3, [r7, #8]
 8002e54:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA15 (JTDI)     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = VCP_TX_Pin;
 8002e56:	2304      	movs	r3, #4
 8002e58:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e5a:	2302      	movs	r3, #2
 8002e5c:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e5e:	2300      	movs	r3, #0
 8002e60:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002e62:	2303      	movs	r3, #3
 8002e64:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002e66:	2307      	movs	r3, #7
 8002e68:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 8002e6a:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8002e6e:	4619      	mov	r1, r3
 8002e70:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002e74:	f000 fc76 	bl	8003764 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VCP_RX_Pin;
 8002e78:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002e7c:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e7e:	2302      	movs	r3, #2
 8002e80:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e82:	2300      	movs	r3, #0
 8002e84:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002e86:	2303      	movs	r3, #3
 8002e88:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF3_USART2;
 8002e8a:	2303      	movs	r3, #3
 8002e8c:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 8002e8e:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8002e92:	4619      	mov	r1, r3
 8002e94:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002e98:	f000 fc64 	bl	8003764 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Channel6;
 8002e9c:	4b31      	ldr	r3, [pc, #196]	@ (8002f64 <HAL_UART_MspInit+0x18c>)
 8002e9e:	4a32      	ldr	r2, [pc, #200]	@ (8002f68 <HAL_UART_MspInit+0x190>)
 8002ea0:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Request = DMA_REQUEST_2;
 8002ea2:	4b30      	ldr	r3, [pc, #192]	@ (8002f64 <HAL_UART_MspInit+0x18c>)
 8002ea4:	2202      	movs	r2, #2
 8002ea6:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002ea8:	4b2e      	ldr	r3, [pc, #184]	@ (8002f64 <HAL_UART_MspInit+0x18c>)
 8002eaa:	2200      	movs	r2, #0
 8002eac:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002eae:	4b2d      	ldr	r3, [pc, #180]	@ (8002f64 <HAL_UART_MspInit+0x18c>)
 8002eb0:	2200      	movs	r2, #0
 8002eb2:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002eb4:	4b2b      	ldr	r3, [pc, #172]	@ (8002f64 <HAL_UART_MspInit+0x18c>)
 8002eb6:	2280      	movs	r2, #128	@ 0x80
 8002eb8:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002eba:	4b2a      	ldr	r3, [pc, #168]	@ (8002f64 <HAL_UART_MspInit+0x18c>)
 8002ebc:	2200      	movs	r2, #0
 8002ebe:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002ec0:	4b28      	ldr	r3, [pc, #160]	@ (8002f64 <HAL_UART_MspInit+0x18c>)
 8002ec2:	2200      	movs	r2, #0
 8002ec4:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 8002ec6:	4b27      	ldr	r3, [pc, #156]	@ (8002f64 <HAL_UART_MspInit+0x18c>)
 8002ec8:	2220      	movs	r2, #32
 8002eca:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8002ecc:	4b25      	ldr	r3, [pc, #148]	@ (8002f64 <HAL_UART_MspInit+0x18c>)
 8002ece:	f44f 5240 	mov.w	r2, #12288	@ 0x3000
 8002ed2:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8002ed4:	4823      	ldr	r0, [pc, #140]	@ (8002f64 <HAL_UART_MspInit+0x18c>)
 8002ed6:	f000 f9b5 	bl	8003244 <HAL_DMA_Init>
 8002eda:	4603      	mov	r3, r0
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	d001      	beq.n	8002ee4 <HAL_UART_MspInit+0x10c>
    {
      Error_Handler();
 8002ee0:	f7ff f9de 	bl	80022a0 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart2_rx);
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	4a1f      	ldr	r2, [pc, #124]	@ (8002f64 <HAL_UART_MspInit+0x18c>)
 8002ee8:	675a      	str	r2, [r3, #116]	@ 0x74
 8002eea:	4a1e      	ldr	r2, [pc, #120]	@ (8002f64 <HAL_UART_MspInit+0x18c>)
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	6293      	str	r3, [r2, #40]	@ 0x28

    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Channel7;
 8002ef0:	4b1e      	ldr	r3, [pc, #120]	@ (8002f6c <HAL_UART_MspInit+0x194>)
 8002ef2:	4a1f      	ldr	r2, [pc, #124]	@ (8002f70 <HAL_UART_MspInit+0x198>)
 8002ef4:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Request = DMA_REQUEST_2;
 8002ef6:	4b1d      	ldr	r3, [pc, #116]	@ (8002f6c <HAL_UART_MspInit+0x194>)
 8002ef8:	2202      	movs	r2, #2
 8002efa:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002efc:	4b1b      	ldr	r3, [pc, #108]	@ (8002f6c <HAL_UART_MspInit+0x194>)
 8002efe:	2210      	movs	r2, #16
 8002f00:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002f02:	4b1a      	ldr	r3, [pc, #104]	@ (8002f6c <HAL_UART_MspInit+0x194>)
 8002f04:	2200      	movs	r2, #0
 8002f06:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002f08:	4b18      	ldr	r3, [pc, #96]	@ (8002f6c <HAL_UART_MspInit+0x194>)
 8002f0a:	2280      	movs	r2, #128	@ 0x80
 8002f0c:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002f0e:	4b17      	ldr	r3, [pc, #92]	@ (8002f6c <HAL_UART_MspInit+0x194>)
 8002f10:	2200      	movs	r2, #0
 8002f12:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002f14:	4b15      	ldr	r3, [pc, #84]	@ (8002f6c <HAL_UART_MspInit+0x194>)
 8002f16:	2200      	movs	r2, #0
 8002f18:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8002f1a:	4b14      	ldr	r3, [pc, #80]	@ (8002f6c <HAL_UART_MspInit+0x194>)
 8002f1c:	2200      	movs	r2, #0
 8002f1e:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8002f20:	4b12      	ldr	r3, [pc, #72]	@ (8002f6c <HAL_UART_MspInit+0x194>)
 8002f22:	f44f 5240 	mov.w	r2, #12288	@ 0x3000
 8002f26:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8002f28:	4810      	ldr	r0, [pc, #64]	@ (8002f6c <HAL_UART_MspInit+0x194>)
 8002f2a:	f000 f98b 	bl	8003244 <HAL_DMA_Init>
 8002f2e:	4603      	mov	r3, r0
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	d001      	beq.n	8002f38 <HAL_UART_MspInit+0x160>
    {
      Error_Handler();
 8002f34:	f7ff f9b4 	bl	80022a0 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart2_tx);
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	4a0c      	ldr	r2, [pc, #48]	@ (8002f6c <HAL_UART_MspInit+0x194>)
 8002f3c:	671a      	str	r2, [r3, #112]	@ 0x70
 8002f3e:	4a0b      	ldr	r2, [pc, #44]	@ (8002f6c <HAL_UART_MspInit+0x194>)
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	6293      	str	r3, [r2, #40]	@ 0x28

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 8002f44:	2200      	movs	r2, #0
 8002f46:	2105      	movs	r1, #5
 8002f48:	2026      	movs	r0, #38	@ 0x26
 8002f4a:	f000 f951 	bl	80031f0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8002f4e:	2026      	movs	r0, #38	@ 0x26
 8002f50:	f000 f96a 	bl	8003228 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8002f54:	bf00      	nop
 8002f56:	3778      	adds	r7, #120	@ 0x78
 8002f58:	46bd      	mov	sp, r7
 8002f5a:	bd80      	pop	{r7, pc}
 8002f5c:	40004400 	.word	0x40004400
 8002f60:	40021000 	.word	0x40021000
 8002f64:	20005cb0 	.word	0x20005cb0
 8002f68:	4002006c 	.word	0x4002006c
 8002f6c:	20005cf8 	.word	0x20005cf8
 8002f70:	40020080 	.word	0x40020080

08002f74 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8002f74:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002fac <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002f78:	f7ff fcc8 	bl	800290c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002f7c:	480c      	ldr	r0, [pc, #48]	@ (8002fb0 <LoopForever+0x6>)
  ldr r1, =_edata
 8002f7e:	490d      	ldr	r1, [pc, #52]	@ (8002fb4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002f80:	4a0d      	ldr	r2, [pc, #52]	@ (8002fb8 <LoopForever+0xe>)
  movs r3, #0
 8002f82:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002f84:	e002      	b.n	8002f8c <LoopCopyDataInit>

08002f86 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002f86:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002f88:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002f8a:	3304      	adds	r3, #4

08002f8c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002f8c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002f8e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002f90:	d3f9      	bcc.n	8002f86 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002f92:	4a0a      	ldr	r2, [pc, #40]	@ (8002fbc <LoopForever+0x12>)
  ldr r4, =_ebss
 8002f94:	4c0a      	ldr	r4, [pc, #40]	@ (8002fc0 <LoopForever+0x16>)
  movs r3, #0
 8002f96:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002f98:	e001      	b.n	8002f9e <LoopFillZerobss>

08002f9a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002f9a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002f9c:	3204      	adds	r2, #4

08002f9e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002f9e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002fa0:	d3fb      	bcc.n	8002f9a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002fa2:	f018 fb93 	bl	801b6cc <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002fa6:	f7fe ff5f 	bl	8001e68 <main>

08002faa <LoopForever>:

LoopForever:
    b LoopForever
 8002faa:	e7fe      	b.n	8002faa <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8002fac:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8002fb0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002fb4:	20000310 	.word	0x20000310
  ldr r2, =_sidata
 8002fb8:	0801e334 	.word	0x0801e334
  ldr r2, =_sbss
 8002fbc:	20000310 	.word	0x20000310
  ldr r4, =_ebss
 8002fc0:	2000c3ac 	.word	0x2000c3ac

08002fc4 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002fc4:	e7fe      	b.n	8002fc4 <ADC1_IRQHandler>

08002fc6 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002fc6:	b580      	push	{r7, lr}
 8002fc8:	b082      	sub	sp, #8
 8002fca:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002fcc:	2300      	movs	r3, #0
 8002fce:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002fd0:	2003      	movs	r0, #3
 8002fd2:	f000 f902 	bl	80031da <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002fd6:	200f      	movs	r0, #15
 8002fd8:	f7ff faf6 	bl	80025c8 <HAL_InitTick>
 8002fdc:	4603      	mov	r3, r0
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d002      	beq.n	8002fe8 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8002fe2:	2301      	movs	r3, #1
 8002fe4:	71fb      	strb	r3, [r7, #7]
 8002fe6:	e001      	b.n	8002fec <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002fe8:	f7ff fac6 	bl	8002578 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002fec:	79fb      	ldrb	r3, [r7, #7]
}
 8002fee:	4618      	mov	r0, r3
 8002ff0:	3708      	adds	r7, #8
 8002ff2:	46bd      	mov	sp, r7
 8002ff4:	bd80      	pop	{r7, pc}
	...

08002ff8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002ff8:	b480      	push	{r7}
 8002ffa:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002ffc:	4b06      	ldr	r3, [pc, #24]	@ (8003018 <HAL_IncTick+0x20>)
 8002ffe:	781b      	ldrb	r3, [r3, #0]
 8003000:	461a      	mov	r2, r3
 8003002:	4b06      	ldr	r3, [pc, #24]	@ (800301c <HAL_IncTick+0x24>)
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	4413      	add	r3, r2
 8003008:	4a04      	ldr	r2, [pc, #16]	@ (800301c <HAL_IncTick+0x24>)
 800300a:	6013      	str	r3, [r2, #0]
}
 800300c:	bf00      	nop
 800300e:	46bd      	mov	sp, r7
 8003010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003014:	4770      	bx	lr
 8003016:	bf00      	nop
 8003018:	20000028 	.word	0x20000028
 800301c:	20005d40 	.word	0x20005d40

08003020 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003020:	b480      	push	{r7}
 8003022:	af00      	add	r7, sp, #0
  return uwTick;
 8003024:	4b03      	ldr	r3, [pc, #12]	@ (8003034 <HAL_GetTick+0x14>)
 8003026:	681b      	ldr	r3, [r3, #0]
}
 8003028:	4618      	mov	r0, r3
 800302a:	46bd      	mov	sp, r7
 800302c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003030:	4770      	bx	lr
 8003032:	bf00      	nop
 8003034:	20005d40 	.word	0x20005d40

08003038 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003038:	b580      	push	{r7, lr}
 800303a:	b084      	sub	sp, #16
 800303c:	af00      	add	r7, sp, #0
 800303e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003040:	f7ff ffee 	bl	8003020 <HAL_GetTick>
 8003044:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003050:	d005      	beq.n	800305e <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8003052:	4b0a      	ldr	r3, [pc, #40]	@ (800307c <HAL_Delay+0x44>)
 8003054:	781b      	ldrb	r3, [r3, #0]
 8003056:	461a      	mov	r2, r3
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	4413      	add	r3, r2
 800305c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800305e:	bf00      	nop
 8003060:	f7ff ffde 	bl	8003020 <HAL_GetTick>
 8003064:	4602      	mov	r2, r0
 8003066:	68bb      	ldr	r3, [r7, #8]
 8003068:	1ad3      	subs	r3, r2, r3
 800306a:	68fa      	ldr	r2, [r7, #12]
 800306c:	429a      	cmp	r2, r3
 800306e:	d8f7      	bhi.n	8003060 <HAL_Delay+0x28>
  {
  }
}
 8003070:	bf00      	nop
 8003072:	bf00      	nop
 8003074:	3710      	adds	r7, #16
 8003076:	46bd      	mov	sp, r7
 8003078:	bd80      	pop	{r7, pc}
 800307a:	bf00      	nop
 800307c:	20000028 	.word	0x20000028

08003080 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003080:	b480      	push	{r7}
 8003082:	b085      	sub	sp, #20
 8003084:	af00      	add	r7, sp, #0
 8003086:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	f003 0307 	and.w	r3, r3, #7
 800308e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003090:	4b0c      	ldr	r3, [pc, #48]	@ (80030c4 <__NVIC_SetPriorityGrouping+0x44>)
 8003092:	68db      	ldr	r3, [r3, #12]
 8003094:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003096:	68ba      	ldr	r2, [r7, #8]
 8003098:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800309c:	4013      	ands	r3, r2
 800309e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80030a4:	68bb      	ldr	r3, [r7, #8]
 80030a6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80030a8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80030ac:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80030b0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80030b2:	4a04      	ldr	r2, [pc, #16]	@ (80030c4 <__NVIC_SetPriorityGrouping+0x44>)
 80030b4:	68bb      	ldr	r3, [r7, #8]
 80030b6:	60d3      	str	r3, [r2, #12]
}
 80030b8:	bf00      	nop
 80030ba:	3714      	adds	r7, #20
 80030bc:	46bd      	mov	sp, r7
 80030be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030c2:	4770      	bx	lr
 80030c4:	e000ed00 	.word	0xe000ed00

080030c8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80030c8:	b480      	push	{r7}
 80030ca:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80030cc:	4b04      	ldr	r3, [pc, #16]	@ (80030e0 <__NVIC_GetPriorityGrouping+0x18>)
 80030ce:	68db      	ldr	r3, [r3, #12]
 80030d0:	0a1b      	lsrs	r3, r3, #8
 80030d2:	f003 0307 	and.w	r3, r3, #7
}
 80030d6:	4618      	mov	r0, r3
 80030d8:	46bd      	mov	sp, r7
 80030da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030de:	4770      	bx	lr
 80030e0:	e000ed00 	.word	0xe000ed00

080030e4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80030e4:	b480      	push	{r7}
 80030e6:	b083      	sub	sp, #12
 80030e8:	af00      	add	r7, sp, #0
 80030ea:	4603      	mov	r3, r0
 80030ec:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80030ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	db0b      	blt.n	800310e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80030f6:	79fb      	ldrb	r3, [r7, #7]
 80030f8:	f003 021f 	and.w	r2, r3, #31
 80030fc:	4907      	ldr	r1, [pc, #28]	@ (800311c <__NVIC_EnableIRQ+0x38>)
 80030fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003102:	095b      	lsrs	r3, r3, #5
 8003104:	2001      	movs	r0, #1
 8003106:	fa00 f202 	lsl.w	r2, r0, r2
 800310a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800310e:	bf00      	nop
 8003110:	370c      	adds	r7, #12
 8003112:	46bd      	mov	sp, r7
 8003114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003118:	4770      	bx	lr
 800311a:	bf00      	nop
 800311c:	e000e100 	.word	0xe000e100

08003120 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003120:	b480      	push	{r7}
 8003122:	b083      	sub	sp, #12
 8003124:	af00      	add	r7, sp, #0
 8003126:	4603      	mov	r3, r0
 8003128:	6039      	str	r1, [r7, #0]
 800312a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800312c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003130:	2b00      	cmp	r3, #0
 8003132:	db0a      	blt.n	800314a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003134:	683b      	ldr	r3, [r7, #0]
 8003136:	b2da      	uxtb	r2, r3
 8003138:	490c      	ldr	r1, [pc, #48]	@ (800316c <__NVIC_SetPriority+0x4c>)
 800313a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800313e:	0112      	lsls	r2, r2, #4
 8003140:	b2d2      	uxtb	r2, r2
 8003142:	440b      	add	r3, r1
 8003144:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003148:	e00a      	b.n	8003160 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800314a:	683b      	ldr	r3, [r7, #0]
 800314c:	b2da      	uxtb	r2, r3
 800314e:	4908      	ldr	r1, [pc, #32]	@ (8003170 <__NVIC_SetPriority+0x50>)
 8003150:	79fb      	ldrb	r3, [r7, #7]
 8003152:	f003 030f 	and.w	r3, r3, #15
 8003156:	3b04      	subs	r3, #4
 8003158:	0112      	lsls	r2, r2, #4
 800315a:	b2d2      	uxtb	r2, r2
 800315c:	440b      	add	r3, r1
 800315e:	761a      	strb	r2, [r3, #24]
}
 8003160:	bf00      	nop
 8003162:	370c      	adds	r7, #12
 8003164:	46bd      	mov	sp, r7
 8003166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800316a:	4770      	bx	lr
 800316c:	e000e100 	.word	0xe000e100
 8003170:	e000ed00 	.word	0xe000ed00

08003174 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003174:	b480      	push	{r7}
 8003176:	b089      	sub	sp, #36	@ 0x24
 8003178:	af00      	add	r7, sp, #0
 800317a:	60f8      	str	r0, [r7, #12]
 800317c:	60b9      	str	r1, [r7, #8]
 800317e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	f003 0307 	and.w	r3, r3, #7
 8003186:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003188:	69fb      	ldr	r3, [r7, #28]
 800318a:	f1c3 0307 	rsb	r3, r3, #7
 800318e:	2b04      	cmp	r3, #4
 8003190:	bf28      	it	cs
 8003192:	2304      	movcs	r3, #4
 8003194:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003196:	69fb      	ldr	r3, [r7, #28]
 8003198:	3304      	adds	r3, #4
 800319a:	2b06      	cmp	r3, #6
 800319c:	d902      	bls.n	80031a4 <NVIC_EncodePriority+0x30>
 800319e:	69fb      	ldr	r3, [r7, #28]
 80031a0:	3b03      	subs	r3, #3
 80031a2:	e000      	b.n	80031a6 <NVIC_EncodePriority+0x32>
 80031a4:	2300      	movs	r3, #0
 80031a6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80031a8:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80031ac:	69bb      	ldr	r3, [r7, #24]
 80031ae:	fa02 f303 	lsl.w	r3, r2, r3
 80031b2:	43da      	mvns	r2, r3
 80031b4:	68bb      	ldr	r3, [r7, #8]
 80031b6:	401a      	ands	r2, r3
 80031b8:	697b      	ldr	r3, [r7, #20]
 80031ba:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80031bc:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80031c0:	697b      	ldr	r3, [r7, #20]
 80031c2:	fa01 f303 	lsl.w	r3, r1, r3
 80031c6:	43d9      	mvns	r1, r3
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80031cc:	4313      	orrs	r3, r2
         );
}
 80031ce:	4618      	mov	r0, r3
 80031d0:	3724      	adds	r7, #36	@ 0x24
 80031d2:	46bd      	mov	sp, r7
 80031d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031d8:	4770      	bx	lr

080031da <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80031da:	b580      	push	{r7, lr}
 80031dc:	b082      	sub	sp, #8
 80031de:	af00      	add	r7, sp, #0
 80031e0:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80031e2:	6878      	ldr	r0, [r7, #4]
 80031e4:	f7ff ff4c 	bl	8003080 <__NVIC_SetPriorityGrouping>
}
 80031e8:	bf00      	nop
 80031ea:	3708      	adds	r7, #8
 80031ec:	46bd      	mov	sp, r7
 80031ee:	bd80      	pop	{r7, pc}

080031f0 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80031f0:	b580      	push	{r7, lr}
 80031f2:	b086      	sub	sp, #24
 80031f4:	af00      	add	r7, sp, #0
 80031f6:	4603      	mov	r3, r0
 80031f8:	60b9      	str	r1, [r7, #8]
 80031fa:	607a      	str	r2, [r7, #4]
 80031fc:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80031fe:	2300      	movs	r3, #0
 8003200:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003202:	f7ff ff61 	bl	80030c8 <__NVIC_GetPriorityGrouping>
 8003206:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003208:	687a      	ldr	r2, [r7, #4]
 800320a:	68b9      	ldr	r1, [r7, #8]
 800320c:	6978      	ldr	r0, [r7, #20]
 800320e:	f7ff ffb1 	bl	8003174 <NVIC_EncodePriority>
 8003212:	4602      	mov	r2, r0
 8003214:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003218:	4611      	mov	r1, r2
 800321a:	4618      	mov	r0, r3
 800321c:	f7ff ff80 	bl	8003120 <__NVIC_SetPriority>
}
 8003220:	bf00      	nop
 8003222:	3718      	adds	r7, #24
 8003224:	46bd      	mov	sp, r7
 8003226:	bd80      	pop	{r7, pc}

08003228 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003228:	b580      	push	{r7, lr}
 800322a:	b082      	sub	sp, #8
 800322c:	af00      	add	r7, sp, #0
 800322e:	4603      	mov	r3, r0
 8003230:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003232:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003236:	4618      	mov	r0, r3
 8003238:	f7ff ff54 	bl	80030e4 <__NVIC_EnableIRQ>
}
 800323c:	bf00      	nop
 800323e:	3708      	adds	r7, #8
 8003240:	46bd      	mov	sp, r7
 8003242:	bd80      	pop	{r7, pc}

08003244 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003244:	b480      	push	{r7}
 8003246:	b085      	sub	sp, #20
 8003248:	af00      	add	r7, sp, #0
 800324a:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	2b00      	cmp	r3, #0
 8003250:	d101      	bne.n	8003256 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8003252:	2301      	movs	r3, #1
 8003254:	e098      	b.n	8003388 <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	461a      	mov	r2, r3
 800325c:	4b4d      	ldr	r3, [pc, #308]	@ (8003394 <HAL_DMA_Init+0x150>)
 800325e:	429a      	cmp	r2, r3
 8003260:	d80f      	bhi.n	8003282 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	461a      	mov	r2, r3
 8003268:	4b4b      	ldr	r3, [pc, #300]	@ (8003398 <HAL_DMA_Init+0x154>)
 800326a:	4413      	add	r3, r2
 800326c:	4a4b      	ldr	r2, [pc, #300]	@ (800339c <HAL_DMA_Init+0x158>)
 800326e:	fba2 2303 	umull	r2, r3, r2, r3
 8003272:	091b      	lsrs	r3, r3, #4
 8003274:	009a      	lsls	r2, r3, #2
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	4a48      	ldr	r2, [pc, #288]	@ (80033a0 <HAL_DMA_Init+0x15c>)
 800327e:	641a      	str	r2, [r3, #64]	@ 0x40
 8003280:	e00e      	b.n	80032a0 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	461a      	mov	r2, r3
 8003288:	4b46      	ldr	r3, [pc, #280]	@ (80033a4 <HAL_DMA_Init+0x160>)
 800328a:	4413      	add	r3, r2
 800328c:	4a43      	ldr	r2, [pc, #268]	@ (800339c <HAL_DMA_Init+0x158>)
 800328e:	fba2 2303 	umull	r2, r3, r2, r3
 8003292:	091b      	lsrs	r3, r3, #4
 8003294:	009a      	lsls	r2, r3, #2
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	4a42      	ldr	r2, [pc, #264]	@ (80033a8 <HAL_DMA_Init+0x164>)
 800329e:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	2202      	movs	r2, #2
 80032a4:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 80032b6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80032ba:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 80032c4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	691b      	ldr	r3, [r3, #16]
 80032ca:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80032d0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	699b      	ldr	r3, [r3, #24]
 80032d6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80032dc:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	6a1b      	ldr	r3, [r3, #32]
 80032e2:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80032e4:	68fa      	ldr	r2, [r7, #12]
 80032e6:	4313      	orrs	r3, r2
 80032e8:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	68fa      	ldr	r2, [r7, #12]
 80032f0:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if (hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	689b      	ldr	r3, [r3, #8]
 80032f6:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80032fa:	d039      	beq.n	8003370 <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003300:	4a27      	ldr	r2, [pc, #156]	@ (80033a0 <HAL_DMA_Init+0x15c>)
 8003302:	4293      	cmp	r3, r2
 8003304:	d11a      	bne.n	800333c <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8003306:	4b29      	ldr	r3, [pc, #164]	@ (80033ac <HAL_DMA_Init+0x168>)
 8003308:	681a      	ldr	r2, [r3, #0]
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800330e:	f003 031c 	and.w	r3, r3, #28
 8003312:	210f      	movs	r1, #15
 8003314:	fa01 f303 	lsl.w	r3, r1, r3
 8003318:	43db      	mvns	r3, r3
 800331a:	4924      	ldr	r1, [pc, #144]	@ (80033ac <HAL_DMA_Init+0x168>)
 800331c:	4013      	ands	r3, r2
 800331e:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8003320:	4b22      	ldr	r3, [pc, #136]	@ (80033ac <HAL_DMA_Init+0x168>)
 8003322:	681a      	ldr	r2, [r3, #0]
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	6859      	ldr	r1, [r3, #4]
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800332c:	f003 031c 	and.w	r3, r3, #28
 8003330:	fa01 f303 	lsl.w	r3, r1, r3
 8003334:	491d      	ldr	r1, [pc, #116]	@ (80033ac <HAL_DMA_Init+0x168>)
 8003336:	4313      	orrs	r3, r2
 8003338:	600b      	str	r3, [r1, #0]
 800333a:	e019      	b.n	8003370 <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 800333c:	4b1c      	ldr	r3, [pc, #112]	@ (80033b0 <HAL_DMA_Init+0x16c>)
 800333e:	681a      	ldr	r2, [r3, #0]
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003344:	f003 031c 	and.w	r3, r3, #28
 8003348:	210f      	movs	r1, #15
 800334a:	fa01 f303 	lsl.w	r3, r1, r3
 800334e:	43db      	mvns	r3, r3
 8003350:	4917      	ldr	r1, [pc, #92]	@ (80033b0 <HAL_DMA_Init+0x16c>)
 8003352:	4013      	ands	r3, r2
 8003354:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8003356:	4b16      	ldr	r3, [pc, #88]	@ (80033b0 <HAL_DMA_Init+0x16c>)
 8003358:	681a      	ldr	r2, [r3, #0]
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	6859      	ldr	r1, [r3, #4]
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003362:	f003 031c 	and.w	r3, r3, #28
 8003366:	fa01 f303 	lsl.w	r3, r1, r3
 800336a:	4911      	ldr	r1, [pc, #68]	@ (80033b0 <HAL_DMA_Init+0x16c>)
 800336c:	4313      	orrs	r3, r2
 800336e:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
  /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
  /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	2200      	movs	r2, #0
 8003374:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	2201      	movs	r2, #1
 800337a:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	2200      	movs	r2, #0
 8003382:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8003386:	2300      	movs	r3, #0
}
 8003388:	4618      	mov	r0, r3
 800338a:	3714      	adds	r7, #20
 800338c:	46bd      	mov	sp, r7
 800338e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003392:	4770      	bx	lr
 8003394:	40020407 	.word	0x40020407
 8003398:	bffdfff8 	.word	0xbffdfff8
 800339c:	cccccccd 	.word	0xcccccccd
 80033a0:	40020000 	.word	0x40020000
 80033a4:	bffdfbf8 	.word	0xbffdfbf8
 80033a8:	40020400 	.word	0x40020400
 80033ac:	400200a8 	.word	0x400200a8
 80033b0:	400204a8 	.word	0x400204a8

080033b4 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80033b4:	b580      	push	{r7, lr}
 80033b6:	b086      	sub	sp, #24
 80033b8:	af00      	add	r7, sp, #0
 80033ba:	60f8      	str	r0, [r7, #12]
 80033bc:	60b9      	str	r1, [r7, #8]
 80033be:	607a      	str	r2, [r7, #4]
 80033c0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80033c2:	2300      	movs	r3, #0
 80033c4:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80033cc:	2b01      	cmp	r3, #1
 80033ce:	d101      	bne.n	80033d4 <HAL_DMA_Start_IT+0x20>
 80033d0:	2302      	movs	r3, #2
 80033d2:	e04b      	b.n	800346c <HAL_DMA_Start_IT+0xb8>
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	2201      	movs	r2, #1
 80033d8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80033e2:	b2db      	uxtb	r3, r3
 80033e4:	2b01      	cmp	r3, #1
 80033e6:	d13a      	bne.n	800345e <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	2202      	movs	r2, #2
 80033ec:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	2200      	movs	r2, #0
 80033f4:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	681a      	ldr	r2, [r3, #0]
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	f022 0201 	bic.w	r2, r2, #1
 8003404:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003406:	683b      	ldr	r3, [r7, #0]
 8003408:	687a      	ldr	r2, [r7, #4]
 800340a:	68b9      	ldr	r1, [r7, #8]
 800340c:	68f8      	ldr	r0, [r7, #12]
 800340e:	f000 f979 	bl	8003704 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003416:	2b00      	cmp	r3, #0
 8003418:	d008      	beq.n	800342c <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	681a      	ldr	r2, [r3, #0]
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	f042 020e 	orr.w	r2, r2, #14
 8003428:	601a      	str	r2, [r3, #0]
 800342a:	e00f      	b.n	800344c <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	681a      	ldr	r2, [r3, #0]
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	f022 0204 	bic.w	r2, r2, #4
 800343a:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	681a      	ldr	r2, [r3, #0]
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	f042 020a 	orr.w	r2, r2, #10
 800344a:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	681a      	ldr	r2, [r3, #0]
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	f042 0201 	orr.w	r2, r2, #1
 800345a:	601a      	str	r2, [r3, #0]
 800345c:	e005      	b.n	800346a <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	2200      	movs	r2, #0
 8003462:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8003466:	2302      	movs	r3, #2
 8003468:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 800346a:	7dfb      	ldrb	r3, [r7, #23]
}
 800346c:	4618      	mov	r0, r3
 800346e:	3718      	adds	r7, #24
 8003470:	46bd      	mov	sp, r7
 8003472:	bd80      	pop	{r7, pc}

08003474 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003474:	b480      	push	{r7}
 8003476:	b085      	sub	sp, #20
 8003478:	af00      	add	r7, sp, #0
 800347a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800347c:	2300      	movs	r3, #0
 800347e:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8003486:	b2db      	uxtb	r3, r3
 8003488:	2b02      	cmp	r3, #2
 800348a:	d008      	beq.n	800349e <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	2204      	movs	r2, #4
 8003490:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	2200      	movs	r2, #0
 8003496:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 800349a:	2301      	movs	r3, #1
 800349c:	e022      	b.n	80034e4 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	681a      	ldr	r2, [r3, #0]
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	f022 020e 	bic.w	r2, r2, #14
 80034ac:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	681a      	ldr	r2, [r3, #0]
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	f022 0201 	bic.w	r2, r2, #1
 80034bc:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80034c2:	f003 021c 	and.w	r2, r3, #28
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034ca:	2101      	movs	r1, #1
 80034cc:	fa01 f202 	lsl.w	r2, r1, r2
 80034d0:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	2201      	movs	r2, #1
 80034d6:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	2200      	movs	r2, #0
 80034de:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return status;
 80034e2:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 80034e4:	4618      	mov	r0, r3
 80034e6:	3714      	adds	r7, #20
 80034e8:	46bd      	mov	sp, r7
 80034ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ee:	4770      	bx	lr

080034f0 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80034f0:	b580      	push	{r7, lr}
 80034f2:	b084      	sub	sp, #16
 80034f4:	af00      	add	r7, sp, #0
 80034f6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80034f8:	2300      	movs	r3, #0
 80034fa:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8003502:	b2db      	uxtb	r3, r3
 8003504:	2b02      	cmp	r3, #2
 8003506:	d005      	beq.n	8003514 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	2204      	movs	r2, #4
 800350c:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 800350e:	2301      	movs	r3, #1
 8003510:	73fb      	strb	r3, [r7, #15]
 8003512:	e029      	b.n	8003568 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	681a      	ldr	r2, [r3, #0]
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	f022 020e 	bic.w	r2, r2, #14
 8003522:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	681a      	ldr	r2, [r3, #0]
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	f022 0201 	bic.w	r2, r2, #1
 8003532:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003538:	f003 021c 	and.w	r2, r3, #28
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003540:	2101      	movs	r1, #1
 8003542:	fa01 f202 	lsl.w	r2, r1, r2
 8003546:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	2201      	movs	r2, #1
 800354c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	2200      	movs	r2, #0
 8003554:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800355c:	2b00      	cmp	r3, #0
 800355e:	d003      	beq.n	8003568 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003564:	6878      	ldr	r0, [r7, #4]
 8003566:	4798      	blx	r3
    }
  }
  return status;
 8003568:	7bfb      	ldrb	r3, [r7, #15]
}
 800356a:	4618      	mov	r0, r3
 800356c:	3710      	adds	r7, #16
 800356e:	46bd      	mov	sp, r7
 8003570:	bd80      	pop	{r7, pc}

08003572 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003572:	b580      	push	{r7, lr}
 8003574:	b084      	sub	sp, #16
 8003576:	af00      	add	r7, sp, #0
 8003578:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800358e:	f003 031c 	and.w	r3, r3, #28
 8003592:	2204      	movs	r2, #4
 8003594:	409a      	lsls	r2, r3
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	4013      	ands	r3, r2
 800359a:	2b00      	cmp	r3, #0
 800359c:	d026      	beq.n	80035ec <HAL_DMA_IRQHandler+0x7a>
 800359e:	68bb      	ldr	r3, [r7, #8]
 80035a0:	f003 0304 	and.w	r3, r3, #4
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	d021      	beq.n	80035ec <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	f003 0320 	and.w	r3, r3, #32
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	d107      	bne.n	80035c6 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	681a      	ldr	r2, [r3, #0]
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	f022 0204 	bic.w	r2, r2, #4
 80035c4:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80035ca:	f003 021c 	and.w	r2, r3, #28
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80035d2:	2104      	movs	r1, #4
 80035d4:	fa01 f202 	lsl.w	r2, r1, r2
 80035d8:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d071      	beq.n	80036c6 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80035e6:	6878      	ldr	r0, [r7, #4]
 80035e8:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 80035ea:	e06c      	b.n	80036c6 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80035f0:	f003 031c 	and.w	r3, r3, #28
 80035f4:	2202      	movs	r2, #2
 80035f6:	409a      	lsls	r2, r3
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	4013      	ands	r3, r2
 80035fc:	2b00      	cmp	r3, #0
 80035fe:	d02e      	beq.n	800365e <HAL_DMA_IRQHandler+0xec>
 8003600:	68bb      	ldr	r3, [r7, #8]
 8003602:	f003 0302 	and.w	r3, r3, #2
 8003606:	2b00      	cmp	r3, #0
 8003608:	d029      	beq.n	800365e <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	f003 0320 	and.w	r3, r3, #32
 8003614:	2b00      	cmp	r3, #0
 8003616:	d10b      	bne.n	8003630 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	681a      	ldr	r2, [r3, #0]
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	f022 020a 	bic.w	r2, r2, #10
 8003626:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	2201      	movs	r2, #1
 800362c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003634:	f003 021c 	and.w	r2, r3, #28
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800363c:	2102      	movs	r1, #2
 800363e:	fa01 f202 	lsl.w	r2, r1, r2
 8003642:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	2200      	movs	r2, #0
 8003648:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003650:	2b00      	cmp	r3, #0
 8003652:	d038      	beq.n	80036c6 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003658:	6878      	ldr	r0, [r7, #4]
 800365a:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 800365c:	e033      	b.n	80036c6 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003662:	f003 031c 	and.w	r3, r3, #28
 8003666:	2208      	movs	r2, #8
 8003668:	409a      	lsls	r2, r3
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	4013      	ands	r3, r2
 800366e:	2b00      	cmp	r3, #0
 8003670:	d02a      	beq.n	80036c8 <HAL_DMA_IRQHandler+0x156>
 8003672:	68bb      	ldr	r3, [r7, #8]
 8003674:	f003 0308 	and.w	r3, r3, #8
 8003678:	2b00      	cmp	r3, #0
 800367a:	d025      	beq.n	80036c8 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	681a      	ldr	r2, [r3, #0]
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	f022 020e 	bic.w	r2, r2, #14
 800368a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003690:	f003 021c 	and.w	r2, r3, #28
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003698:	2101      	movs	r1, #1
 800369a:	fa01 f202 	lsl.w	r2, r1, r2
 800369e:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	2201      	movs	r2, #1
 80036a4:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	2201      	movs	r2, #1
 80036aa:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	2200      	movs	r2, #0
 80036b2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	d004      	beq.n	80036c8 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80036c2:	6878      	ldr	r0, [r7, #4]
 80036c4:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 80036c6:	bf00      	nop
 80036c8:	bf00      	nop
}
 80036ca:	3710      	adds	r7, #16
 80036cc:	46bd      	mov	sp, r7
 80036ce:	bd80      	pop	{r7, pc}

080036d0 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 80036d0:	b480      	push	{r7}
 80036d2:	b083      	sub	sp, #12
 80036d4:	af00      	add	r7, sp, #0
 80036d6:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80036de:	b2db      	uxtb	r3, r3
}
 80036e0:	4618      	mov	r0, r3
 80036e2:	370c      	adds	r7, #12
 80036e4:	46bd      	mov	sp, r7
 80036e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ea:	4770      	bx	lr

080036ec <HAL_DMA_GetError>:
  * @param  hdma : pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 80036ec:	b480      	push	{r7}
 80036ee:	b083      	sub	sp, #12
 80036f0:	af00      	add	r7, sp, #0
 80036f2:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
}
 80036f8:	4618      	mov	r0, r3
 80036fa:	370c      	adds	r7, #12
 80036fc:	46bd      	mov	sp, r7
 80036fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003702:	4770      	bx	lr

08003704 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003704:	b480      	push	{r7}
 8003706:	b085      	sub	sp, #20
 8003708:	af00      	add	r7, sp, #0
 800370a:	60f8      	str	r0, [r7, #12]
 800370c:	60b9      	str	r1, [r7, #8]
 800370e:	607a      	str	r2, [r7, #4]
 8003710:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003716:	f003 021c 	and.w	r2, r3, #28
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800371e:	2101      	movs	r1, #1
 8003720:	fa01 f202 	lsl.w	r2, r1, r2
 8003724:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	683a      	ldr	r2, [r7, #0]
 800372c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	689b      	ldr	r3, [r3, #8]
 8003732:	2b10      	cmp	r3, #16
 8003734:	d108      	bne.n	8003748 <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	687a      	ldr	r2, [r7, #4]
 800373c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800373e:	68fb      	ldr	r3, [r7, #12]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	68ba      	ldr	r2, [r7, #8]
 8003744:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8003746:	e007      	b.n	8003758 <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	68ba      	ldr	r2, [r7, #8]
 800374e:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	687a      	ldr	r2, [r7, #4]
 8003756:	60da      	str	r2, [r3, #12]
}
 8003758:	bf00      	nop
 800375a:	3714      	adds	r7, #20
 800375c:	46bd      	mov	sp, r7
 800375e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003762:	4770      	bx	lr

08003764 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003764:	b480      	push	{r7}
 8003766:	b087      	sub	sp, #28
 8003768:	af00      	add	r7, sp, #0
 800376a:	6078      	str	r0, [r7, #4]
 800376c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800376e:	2300      	movs	r3, #0
 8003770:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003772:	e148      	b.n	8003a06 <HAL_GPIO_Init+0x2a2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003774:	683b      	ldr	r3, [r7, #0]
 8003776:	681a      	ldr	r2, [r3, #0]
 8003778:	2101      	movs	r1, #1
 800377a:	697b      	ldr	r3, [r7, #20]
 800377c:	fa01 f303 	lsl.w	r3, r1, r3
 8003780:	4013      	ands	r3, r2
 8003782:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	2b00      	cmp	r3, #0
 8003788:	f000 813a 	beq.w	8003a00 <HAL_GPIO_Init+0x29c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800378c:	683b      	ldr	r3, [r7, #0]
 800378e:	685b      	ldr	r3, [r3, #4]
 8003790:	f003 0303 	and.w	r3, r3, #3
 8003794:	2b01      	cmp	r3, #1
 8003796:	d005      	beq.n	80037a4 <HAL_GPIO_Init+0x40>
 8003798:	683b      	ldr	r3, [r7, #0]
 800379a:	685b      	ldr	r3, [r3, #4]
 800379c:	f003 0303 	and.w	r3, r3, #3
 80037a0:	2b02      	cmp	r3, #2
 80037a2:	d130      	bne.n	8003806 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	689b      	ldr	r3, [r3, #8]
 80037a8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80037aa:	697b      	ldr	r3, [r7, #20]
 80037ac:	005b      	lsls	r3, r3, #1
 80037ae:	2203      	movs	r2, #3
 80037b0:	fa02 f303 	lsl.w	r3, r2, r3
 80037b4:	43db      	mvns	r3, r3
 80037b6:	693a      	ldr	r2, [r7, #16]
 80037b8:	4013      	ands	r3, r2
 80037ba:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80037bc:	683b      	ldr	r3, [r7, #0]
 80037be:	68da      	ldr	r2, [r3, #12]
 80037c0:	697b      	ldr	r3, [r7, #20]
 80037c2:	005b      	lsls	r3, r3, #1
 80037c4:	fa02 f303 	lsl.w	r3, r2, r3
 80037c8:	693a      	ldr	r2, [r7, #16]
 80037ca:	4313      	orrs	r3, r2
 80037cc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	693a      	ldr	r2, [r7, #16]
 80037d2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	685b      	ldr	r3, [r3, #4]
 80037d8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80037da:	2201      	movs	r2, #1
 80037dc:	697b      	ldr	r3, [r7, #20]
 80037de:	fa02 f303 	lsl.w	r3, r2, r3
 80037e2:	43db      	mvns	r3, r3
 80037e4:	693a      	ldr	r2, [r7, #16]
 80037e6:	4013      	ands	r3, r2
 80037e8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80037ea:	683b      	ldr	r3, [r7, #0]
 80037ec:	685b      	ldr	r3, [r3, #4]
 80037ee:	091b      	lsrs	r3, r3, #4
 80037f0:	f003 0201 	and.w	r2, r3, #1
 80037f4:	697b      	ldr	r3, [r7, #20]
 80037f6:	fa02 f303 	lsl.w	r3, r2, r3
 80037fa:	693a      	ldr	r2, [r7, #16]
 80037fc:	4313      	orrs	r3, r2
 80037fe:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	693a      	ldr	r2, [r7, #16]
 8003804:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003806:	683b      	ldr	r3, [r7, #0]
 8003808:	685b      	ldr	r3, [r3, #4]
 800380a:	f003 0303 	and.w	r3, r3, #3
 800380e:	2b03      	cmp	r3, #3
 8003810:	d017      	beq.n	8003842 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	68db      	ldr	r3, [r3, #12]
 8003816:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003818:	697b      	ldr	r3, [r7, #20]
 800381a:	005b      	lsls	r3, r3, #1
 800381c:	2203      	movs	r2, #3
 800381e:	fa02 f303 	lsl.w	r3, r2, r3
 8003822:	43db      	mvns	r3, r3
 8003824:	693a      	ldr	r2, [r7, #16]
 8003826:	4013      	ands	r3, r2
 8003828:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800382a:	683b      	ldr	r3, [r7, #0]
 800382c:	689a      	ldr	r2, [r3, #8]
 800382e:	697b      	ldr	r3, [r7, #20]
 8003830:	005b      	lsls	r3, r3, #1
 8003832:	fa02 f303 	lsl.w	r3, r2, r3
 8003836:	693a      	ldr	r2, [r7, #16]
 8003838:	4313      	orrs	r3, r2
 800383a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	693a      	ldr	r2, [r7, #16]
 8003840:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003842:	683b      	ldr	r3, [r7, #0]
 8003844:	685b      	ldr	r3, [r3, #4]
 8003846:	f003 0303 	and.w	r3, r3, #3
 800384a:	2b02      	cmp	r3, #2
 800384c:	d123      	bne.n	8003896 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800384e:	697b      	ldr	r3, [r7, #20]
 8003850:	08da      	lsrs	r2, r3, #3
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	3208      	adds	r2, #8
 8003856:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800385a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800385c:	697b      	ldr	r3, [r7, #20]
 800385e:	f003 0307 	and.w	r3, r3, #7
 8003862:	009b      	lsls	r3, r3, #2
 8003864:	220f      	movs	r2, #15
 8003866:	fa02 f303 	lsl.w	r3, r2, r3
 800386a:	43db      	mvns	r3, r3
 800386c:	693a      	ldr	r2, [r7, #16]
 800386e:	4013      	ands	r3, r2
 8003870:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003872:	683b      	ldr	r3, [r7, #0]
 8003874:	691a      	ldr	r2, [r3, #16]
 8003876:	697b      	ldr	r3, [r7, #20]
 8003878:	f003 0307 	and.w	r3, r3, #7
 800387c:	009b      	lsls	r3, r3, #2
 800387e:	fa02 f303 	lsl.w	r3, r2, r3
 8003882:	693a      	ldr	r2, [r7, #16]
 8003884:	4313      	orrs	r3, r2
 8003886:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003888:	697b      	ldr	r3, [r7, #20]
 800388a:	08da      	lsrs	r2, r3, #3
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	3208      	adds	r2, #8
 8003890:	6939      	ldr	r1, [r7, #16]
 8003892:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800389c:	697b      	ldr	r3, [r7, #20]
 800389e:	005b      	lsls	r3, r3, #1
 80038a0:	2203      	movs	r2, #3
 80038a2:	fa02 f303 	lsl.w	r3, r2, r3
 80038a6:	43db      	mvns	r3, r3
 80038a8:	693a      	ldr	r2, [r7, #16]
 80038aa:	4013      	ands	r3, r2
 80038ac:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80038ae:	683b      	ldr	r3, [r7, #0]
 80038b0:	685b      	ldr	r3, [r3, #4]
 80038b2:	f003 0203 	and.w	r2, r3, #3
 80038b6:	697b      	ldr	r3, [r7, #20]
 80038b8:	005b      	lsls	r3, r3, #1
 80038ba:	fa02 f303 	lsl.w	r3, r2, r3
 80038be:	693a      	ldr	r2, [r7, #16]
 80038c0:	4313      	orrs	r3, r2
 80038c2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	693a      	ldr	r2, [r7, #16]
 80038c8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80038ca:	683b      	ldr	r3, [r7, #0]
 80038cc:	685b      	ldr	r3, [r3, #4]
 80038ce:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	f000 8094 	beq.w	8003a00 <HAL_GPIO_Init+0x29c>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80038d8:	4b52      	ldr	r3, [pc, #328]	@ (8003a24 <HAL_GPIO_Init+0x2c0>)
 80038da:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80038dc:	4a51      	ldr	r2, [pc, #324]	@ (8003a24 <HAL_GPIO_Init+0x2c0>)
 80038de:	f043 0301 	orr.w	r3, r3, #1
 80038e2:	6613      	str	r3, [r2, #96]	@ 0x60
 80038e4:	4b4f      	ldr	r3, [pc, #316]	@ (8003a24 <HAL_GPIO_Init+0x2c0>)
 80038e6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80038e8:	f003 0301 	and.w	r3, r3, #1
 80038ec:	60bb      	str	r3, [r7, #8]
 80038ee:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80038f0:	4a4d      	ldr	r2, [pc, #308]	@ (8003a28 <HAL_GPIO_Init+0x2c4>)
 80038f2:	697b      	ldr	r3, [r7, #20]
 80038f4:	089b      	lsrs	r3, r3, #2
 80038f6:	3302      	adds	r3, #2
 80038f8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80038fc:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80038fe:	697b      	ldr	r3, [r7, #20]
 8003900:	f003 0303 	and.w	r3, r3, #3
 8003904:	009b      	lsls	r3, r3, #2
 8003906:	220f      	movs	r2, #15
 8003908:	fa02 f303 	lsl.w	r3, r2, r3
 800390c:	43db      	mvns	r3, r3
 800390e:	693a      	ldr	r2, [r7, #16]
 8003910:	4013      	ands	r3, r2
 8003912:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 800391a:	d00d      	beq.n	8003938 <HAL_GPIO_Init+0x1d4>
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	4a43      	ldr	r2, [pc, #268]	@ (8003a2c <HAL_GPIO_Init+0x2c8>)
 8003920:	4293      	cmp	r3, r2
 8003922:	d007      	beq.n	8003934 <HAL_GPIO_Init+0x1d0>
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	4a42      	ldr	r2, [pc, #264]	@ (8003a30 <HAL_GPIO_Init+0x2cc>)
 8003928:	4293      	cmp	r3, r2
 800392a:	d101      	bne.n	8003930 <HAL_GPIO_Init+0x1cc>
 800392c:	2302      	movs	r3, #2
 800392e:	e004      	b.n	800393a <HAL_GPIO_Init+0x1d6>
 8003930:	2307      	movs	r3, #7
 8003932:	e002      	b.n	800393a <HAL_GPIO_Init+0x1d6>
 8003934:	2301      	movs	r3, #1
 8003936:	e000      	b.n	800393a <HAL_GPIO_Init+0x1d6>
 8003938:	2300      	movs	r3, #0
 800393a:	697a      	ldr	r2, [r7, #20]
 800393c:	f002 0203 	and.w	r2, r2, #3
 8003940:	0092      	lsls	r2, r2, #2
 8003942:	4093      	lsls	r3, r2
 8003944:	693a      	ldr	r2, [r7, #16]
 8003946:	4313      	orrs	r3, r2
 8003948:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800394a:	4937      	ldr	r1, [pc, #220]	@ (8003a28 <HAL_GPIO_Init+0x2c4>)
 800394c:	697b      	ldr	r3, [r7, #20]
 800394e:	089b      	lsrs	r3, r3, #2
 8003950:	3302      	adds	r3, #2
 8003952:	693a      	ldr	r2, [r7, #16]
 8003954:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003958:	4b36      	ldr	r3, [pc, #216]	@ (8003a34 <HAL_GPIO_Init+0x2d0>)
 800395a:	689b      	ldr	r3, [r3, #8]
 800395c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	43db      	mvns	r3, r3
 8003962:	693a      	ldr	r2, [r7, #16]
 8003964:	4013      	ands	r3, r2
 8003966:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003968:	683b      	ldr	r3, [r7, #0]
 800396a:	685b      	ldr	r3, [r3, #4]
 800396c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003970:	2b00      	cmp	r3, #0
 8003972:	d003      	beq.n	800397c <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 8003974:	693a      	ldr	r2, [r7, #16]
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	4313      	orrs	r3, r2
 800397a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800397c:	4a2d      	ldr	r2, [pc, #180]	@ (8003a34 <HAL_GPIO_Init+0x2d0>)
 800397e:	693b      	ldr	r3, [r7, #16]
 8003980:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8003982:	4b2c      	ldr	r3, [pc, #176]	@ (8003a34 <HAL_GPIO_Init+0x2d0>)
 8003984:	68db      	ldr	r3, [r3, #12]
 8003986:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	43db      	mvns	r3, r3
 800398c:	693a      	ldr	r2, [r7, #16]
 800398e:	4013      	ands	r3, r2
 8003990:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003992:	683b      	ldr	r3, [r7, #0]
 8003994:	685b      	ldr	r3, [r3, #4]
 8003996:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800399a:	2b00      	cmp	r3, #0
 800399c:	d003      	beq.n	80039a6 <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 800399e:	693a      	ldr	r2, [r7, #16]
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	4313      	orrs	r3, r2
 80039a4:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80039a6:	4a23      	ldr	r2, [pc, #140]	@ (8003a34 <HAL_GPIO_Init+0x2d0>)
 80039a8:	693b      	ldr	r3, [r7, #16]
 80039aa:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80039ac:	4b21      	ldr	r3, [pc, #132]	@ (8003a34 <HAL_GPIO_Init+0x2d0>)
 80039ae:	685b      	ldr	r3, [r3, #4]
 80039b0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	43db      	mvns	r3, r3
 80039b6:	693a      	ldr	r2, [r7, #16]
 80039b8:	4013      	ands	r3, r2
 80039ba:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80039bc:	683b      	ldr	r3, [r7, #0]
 80039be:	685b      	ldr	r3, [r3, #4]
 80039c0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80039c4:	2b00      	cmp	r3, #0
 80039c6:	d003      	beq.n	80039d0 <HAL_GPIO_Init+0x26c>
        {
          temp |= iocurrent;
 80039c8:	693a      	ldr	r2, [r7, #16]
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	4313      	orrs	r3, r2
 80039ce:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80039d0:	4a18      	ldr	r2, [pc, #96]	@ (8003a34 <HAL_GPIO_Init+0x2d0>)
 80039d2:	693b      	ldr	r3, [r7, #16]
 80039d4:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80039d6:	4b17      	ldr	r3, [pc, #92]	@ (8003a34 <HAL_GPIO_Init+0x2d0>)
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	43db      	mvns	r3, r3
 80039e0:	693a      	ldr	r2, [r7, #16]
 80039e2:	4013      	ands	r3, r2
 80039e4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80039e6:	683b      	ldr	r3, [r7, #0]
 80039e8:	685b      	ldr	r3, [r3, #4]
 80039ea:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	d003      	beq.n	80039fa <HAL_GPIO_Init+0x296>
        {
          temp |= iocurrent;
 80039f2:	693a      	ldr	r2, [r7, #16]
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	4313      	orrs	r3, r2
 80039f8:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80039fa:	4a0e      	ldr	r2, [pc, #56]	@ (8003a34 <HAL_GPIO_Init+0x2d0>)
 80039fc:	693b      	ldr	r3, [r7, #16]
 80039fe:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8003a00:	697b      	ldr	r3, [r7, #20]
 8003a02:	3301      	adds	r3, #1
 8003a04:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003a06:	683b      	ldr	r3, [r7, #0]
 8003a08:	681a      	ldr	r2, [r3, #0]
 8003a0a:	697b      	ldr	r3, [r7, #20]
 8003a0c:	fa22 f303 	lsr.w	r3, r2, r3
 8003a10:	2b00      	cmp	r3, #0
 8003a12:	f47f aeaf 	bne.w	8003774 <HAL_GPIO_Init+0x10>
  }
}
 8003a16:	bf00      	nop
 8003a18:	bf00      	nop
 8003a1a:	371c      	adds	r7, #28
 8003a1c:	46bd      	mov	sp, r7
 8003a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a22:	4770      	bx	lr
 8003a24:	40021000 	.word	0x40021000
 8003a28:	40010000 	.word	0x40010000
 8003a2c:	48000400 	.word	0x48000400
 8003a30:	48000800 	.word	0x48000800
 8003a34:	40010400 	.word	0x40010400

08003a38 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003a38:	b580      	push	{r7, lr}
 8003a3a:	b082      	sub	sp, #8
 8003a3c:	af00      	add	r7, sp, #0
 8003a3e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	d101      	bne.n	8003a4a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003a46:	2301      	movs	r3, #1
 8003a48:	e08d      	b.n	8003b66 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003a50:	b2db      	uxtb	r3, r3
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	d106      	bne.n	8003a64 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	2200      	movs	r2, #0
 8003a5a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8003a5e:	6878      	ldr	r0, [r7, #4]
 8003a60:	f7fd fe74 	bl	800174c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	2224      	movs	r2, #36	@ 0x24
 8003a68:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	681a      	ldr	r2, [r3, #0]
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	f022 0201 	bic.w	r2, r2, #1
 8003a7a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	685a      	ldr	r2, [r3, #4]
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8003a88:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	689a      	ldr	r2, [r3, #8]
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003a98:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	68db      	ldr	r3, [r3, #12]
 8003a9e:	2b01      	cmp	r3, #1
 8003aa0:	d107      	bne.n	8003ab2 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	689a      	ldr	r2, [r3, #8]
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003aae:	609a      	str	r2, [r3, #8]
 8003ab0:	e006      	b.n	8003ac0 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	689a      	ldr	r2, [r3, #8]
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8003abe:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	68db      	ldr	r3, [r3, #12]
 8003ac4:	2b02      	cmp	r3, #2
 8003ac6:	d108      	bne.n	8003ada <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	685a      	ldr	r2, [r3, #4]
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003ad6:	605a      	str	r2, [r3, #4]
 8003ad8:	e007      	b.n	8003aea <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	685a      	ldr	r2, [r3, #4]
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003ae8:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	685b      	ldr	r3, [r3, #4]
 8003af0:	687a      	ldr	r2, [r7, #4]
 8003af2:	6812      	ldr	r2, [r2, #0]
 8003af4:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8003af8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003afc:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	68da      	ldr	r2, [r3, #12]
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003b0c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	691a      	ldr	r2, [r3, #16]
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	695b      	ldr	r3, [r3, #20]
 8003b16:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	699b      	ldr	r3, [r3, #24]
 8003b1e:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	430a      	orrs	r2, r1
 8003b26:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	69d9      	ldr	r1, [r3, #28]
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	6a1a      	ldr	r2, [r3, #32]
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	430a      	orrs	r2, r1
 8003b36:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	681a      	ldr	r2, [r3, #0]
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	f042 0201 	orr.w	r2, r2, #1
 8003b46:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	2200      	movs	r2, #0
 8003b4c:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	2220      	movs	r2, #32
 8003b52:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	2200      	movs	r2, #0
 8003b5a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	2200      	movs	r2, #0
 8003b60:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8003b64:	2300      	movs	r3, #0
}
 8003b66:	4618      	mov	r0, r3
 8003b68:	3708      	adds	r7, #8
 8003b6a:	46bd      	mov	sp, r7
 8003b6c:	bd80      	pop	{r7, pc}
	...

08003b70 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003b70:	b580      	push	{r7, lr}
 8003b72:	b088      	sub	sp, #32
 8003b74:	af02      	add	r7, sp, #8
 8003b76:	60f8      	str	r0, [r7, #12]
 8003b78:	4608      	mov	r0, r1
 8003b7a:	4611      	mov	r1, r2
 8003b7c:	461a      	mov	r2, r3
 8003b7e:	4603      	mov	r3, r0
 8003b80:	817b      	strh	r3, [r7, #10]
 8003b82:	460b      	mov	r3, r1
 8003b84:	813b      	strh	r3, [r7, #8]
 8003b86:	4613      	mov	r3, r2
 8003b88:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003b90:	b2db      	uxtb	r3, r3
 8003b92:	2b20      	cmp	r3, #32
 8003b94:	f040 80f9 	bne.w	8003d8a <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003b98:	6a3b      	ldr	r3, [r7, #32]
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	d002      	beq.n	8003ba4 <HAL_I2C_Mem_Write+0x34>
 8003b9e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8003ba0:	2b00      	cmp	r3, #0
 8003ba2:	d105      	bne.n	8003bb0 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003baa:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8003bac:	2301      	movs	r3, #1
 8003bae:	e0ed      	b.n	8003d8c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003bb6:	2b01      	cmp	r3, #1
 8003bb8:	d101      	bne.n	8003bbe <HAL_I2C_Mem_Write+0x4e>
 8003bba:	2302      	movs	r3, #2
 8003bbc:	e0e6      	b.n	8003d8c <HAL_I2C_Mem_Write+0x21c>
 8003bbe:	68fb      	ldr	r3, [r7, #12]
 8003bc0:	2201      	movs	r2, #1
 8003bc2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003bc6:	f7ff fa2b 	bl	8003020 <HAL_GetTick>
 8003bca:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003bcc:	697b      	ldr	r3, [r7, #20]
 8003bce:	9300      	str	r3, [sp, #0]
 8003bd0:	2319      	movs	r3, #25
 8003bd2:	2201      	movs	r2, #1
 8003bd4:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8003bd8:	68f8      	ldr	r0, [r7, #12]
 8003bda:	f001 fce4 	bl	80055a6 <I2C_WaitOnFlagUntilTimeout>
 8003bde:	4603      	mov	r3, r0
 8003be0:	2b00      	cmp	r3, #0
 8003be2:	d001      	beq.n	8003be8 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8003be4:	2301      	movs	r3, #1
 8003be6:	e0d1      	b.n	8003d8c <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	2221      	movs	r2, #33	@ 0x21
 8003bec:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	2240      	movs	r2, #64	@ 0x40
 8003bf4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	2200      	movs	r2, #0
 8003bfc:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	6a3a      	ldr	r2, [r7, #32]
 8003c02:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8003c08:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	2200      	movs	r2, #0
 8003c0e:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003c10:	88f8      	ldrh	r0, [r7, #6]
 8003c12:	893a      	ldrh	r2, [r7, #8]
 8003c14:	8979      	ldrh	r1, [r7, #10]
 8003c16:	697b      	ldr	r3, [r7, #20]
 8003c18:	9301      	str	r3, [sp, #4]
 8003c1a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003c1c:	9300      	str	r3, [sp, #0]
 8003c1e:	4603      	mov	r3, r0
 8003c20:	68f8      	ldr	r0, [r7, #12]
 8003c22:	f000 ff11 	bl	8004a48 <I2C_RequestMemoryWrite>
 8003c26:	4603      	mov	r3, r0
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	d005      	beq.n	8003c38 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	2200      	movs	r2, #0
 8003c30:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8003c34:	2301      	movs	r3, #1
 8003c36:	e0a9      	b.n	8003d8c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003c3c:	b29b      	uxth	r3, r3
 8003c3e:	2bff      	cmp	r3, #255	@ 0xff
 8003c40:	d90e      	bls.n	8003c60 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	22ff      	movs	r2, #255	@ 0xff
 8003c46:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003c4c:	b2da      	uxtb	r2, r3
 8003c4e:	8979      	ldrh	r1, [r7, #10]
 8003c50:	2300      	movs	r3, #0
 8003c52:	9300      	str	r3, [sp, #0]
 8003c54:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8003c58:	68f8      	ldr	r0, [r7, #12]
 8003c5a:	f001 fe5d 	bl	8005918 <I2C_TransferConfig>
 8003c5e:	e00f      	b.n	8003c80 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003c64:	b29a      	uxth	r2, r3
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003c6e:	b2da      	uxtb	r2, r3
 8003c70:	8979      	ldrh	r1, [r7, #10]
 8003c72:	2300      	movs	r3, #0
 8003c74:	9300      	str	r3, [sp, #0]
 8003c76:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003c7a:	68f8      	ldr	r0, [r7, #12]
 8003c7c:	f001 fe4c 	bl	8005918 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003c80:	697a      	ldr	r2, [r7, #20]
 8003c82:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003c84:	68f8      	ldr	r0, [r7, #12]
 8003c86:	f001 fcdd 	bl	8005644 <I2C_WaitOnTXISFlagUntilTimeout>
 8003c8a:	4603      	mov	r3, r0
 8003c8c:	2b00      	cmp	r3, #0
 8003c8e:	d001      	beq.n	8003c94 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8003c90:	2301      	movs	r3, #1
 8003c92:	e07b      	b.n	8003d8c <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c98:	781a      	ldrb	r2, [r3, #0]
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ca4:	1c5a      	adds	r2, r3, #1
 8003ca6:	68fb      	ldr	r3, [r7, #12]
 8003ca8:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003cae:	b29b      	uxth	r3, r3
 8003cb0:	3b01      	subs	r3, #1
 8003cb2:	b29a      	uxth	r2, r3
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003cbc:	3b01      	subs	r3, #1
 8003cbe:	b29a      	uxth	r2, r3
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003cc8:	b29b      	uxth	r3, r3
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	d034      	beq.n	8003d38 <HAL_I2C_Mem_Write+0x1c8>
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d130      	bne.n	8003d38 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003cd6:	697b      	ldr	r3, [r7, #20]
 8003cd8:	9300      	str	r3, [sp, #0]
 8003cda:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003cdc:	2200      	movs	r2, #0
 8003cde:	2180      	movs	r1, #128	@ 0x80
 8003ce0:	68f8      	ldr	r0, [r7, #12]
 8003ce2:	f001 fc60 	bl	80055a6 <I2C_WaitOnFlagUntilTimeout>
 8003ce6:	4603      	mov	r3, r0
 8003ce8:	2b00      	cmp	r3, #0
 8003cea:	d001      	beq.n	8003cf0 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8003cec:	2301      	movs	r3, #1
 8003cee:	e04d      	b.n	8003d8c <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003cf4:	b29b      	uxth	r3, r3
 8003cf6:	2bff      	cmp	r3, #255	@ 0xff
 8003cf8:	d90e      	bls.n	8003d18 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	22ff      	movs	r2, #255	@ 0xff
 8003cfe:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003d04:	b2da      	uxtb	r2, r3
 8003d06:	8979      	ldrh	r1, [r7, #10]
 8003d08:	2300      	movs	r3, #0
 8003d0a:	9300      	str	r3, [sp, #0]
 8003d0c:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8003d10:	68f8      	ldr	r0, [r7, #12]
 8003d12:	f001 fe01 	bl	8005918 <I2C_TransferConfig>
 8003d16:	e00f      	b.n	8003d38 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003d1c:	b29a      	uxth	r2, r3
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003d26:	b2da      	uxtb	r2, r3
 8003d28:	8979      	ldrh	r1, [r7, #10]
 8003d2a:	2300      	movs	r3, #0
 8003d2c:	9300      	str	r3, [sp, #0]
 8003d2e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003d32:	68f8      	ldr	r0, [r7, #12]
 8003d34:	f001 fdf0 	bl	8005918 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003d3c:	b29b      	uxth	r3, r3
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	d19e      	bne.n	8003c80 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003d42:	697a      	ldr	r2, [r7, #20]
 8003d44:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003d46:	68f8      	ldr	r0, [r7, #12]
 8003d48:	f001 fcc3 	bl	80056d2 <I2C_WaitOnSTOPFlagUntilTimeout>
 8003d4c:	4603      	mov	r3, r0
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	d001      	beq.n	8003d56 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8003d52:	2301      	movs	r3, #1
 8003d54:	e01a      	b.n	8003d8c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	2220      	movs	r2, #32
 8003d5c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003d5e:	68fb      	ldr	r3, [r7, #12]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	6859      	ldr	r1, [r3, #4]
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	681a      	ldr	r2, [r3, #0]
 8003d68:	4b0a      	ldr	r3, [pc, #40]	@ (8003d94 <HAL_I2C_Mem_Write+0x224>)
 8003d6a:	400b      	ands	r3, r1
 8003d6c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003d6e:	68fb      	ldr	r3, [r7, #12]
 8003d70:	2220      	movs	r2, #32
 8003d72:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	2200      	movs	r2, #0
 8003d7a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	2200      	movs	r2, #0
 8003d82:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8003d86:	2300      	movs	r3, #0
 8003d88:	e000      	b.n	8003d8c <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8003d8a:	2302      	movs	r3, #2
  }
}
 8003d8c:	4618      	mov	r0, r3
 8003d8e:	3718      	adds	r7, #24
 8003d90:	46bd      	mov	sp, r7
 8003d92:	bd80      	pop	{r7, pc}
 8003d94:	fe00e800 	.word	0xfe00e800

08003d98 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003d98:	b580      	push	{r7, lr}
 8003d9a:	b088      	sub	sp, #32
 8003d9c:	af02      	add	r7, sp, #8
 8003d9e:	60f8      	str	r0, [r7, #12]
 8003da0:	4608      	mov	r0, r1
 8003da2:	4611      	mov	r1, r2
 8003da4:	461a      	mov	r2, r3
 8003da6:	4603      	mov	r3, r0
 8003da8:	817b      	strh	r3, [r7, #10]
 8003daa:	460b      	mov	r3, r1
 8003dac:	813b      	strh	r3, [r7, #8]
 8003dae:	4613      	mov	r3, r2
 8003db0:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003db8:	b2db      	uxtb	r3, r3
 8003dba:	2b20      	cmp	r3, #32
 8003dbc:	f040 80fd 	bne.w	8003fba <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8003dc0:	6a3b      	ldr	r3, [r7, #32]
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	d002      	beq.n	8003dcc <HAL_I2C_Mem_Read+0x34>
 8003dc6:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8003dc8:	2b00      	cmp	r3, #0
 8003dca:	d105      	bne.n	8003dd8 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003dd2:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8003dd4:	2301      	movs	r3, #1
 8003dd6:	e0f1      	b.n	8003fbc <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003dde:	2b01      	cmp	r3, #1
 8003de0:	d101      	bne.n	8003de6 <HAL_I2C_Mem_Read+0x4e>
 8003de2:	2302      	movs	r3, #2
 8003de4:	e0ea      	b.n	8003fbc <HAL_I2C_Mem_Read+0x224>
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	2201      	movs	r2, #1
 8003dea:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003dee:	f7ff f917 	bl	8003020 <HAL_GetTick>
 8003df2:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003df4:	697b      	ldr	r3, [r7, #20]
 8003df6:	9300      	str	r3, [sp, #0]
 8003df8:	2319      	movs	r3, #25
 8003dfa:	2201      	movs	r2, #1
 8003dfc:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8003e00:	68f8      	ldr	r0, [r7, #12]
 8003e02:	f001 fbd0 	bl	80055a6 <I2C_WaitOnFlagUntilTimeout>
 8003e06:	4603      	mov	r3, r0
 8003e08:	2b00      	cmp	r3, #0
 8003e0a:	d001      	beq.n	8003e10 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8003e0c:	2301      	movs	r3, #1
 8003e0e:	e0d5      	b.n	8003fbc <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	2222      	movs	r2, #34	@ 0x22
 8003e14:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	2240      	movs	r2, #64	@ 0x40
 8003e1c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	2200      	movs	r2, #0
 8003e24:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	6a3a      	ldr	r2, [r7, #32]
 8003e2a:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8003e30:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	2200      	movs	r2, #0
 8003e36:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003e38:	88f8      	ldrh	r0, [r7, #6]
 8003e3a:	893a      	ldrh	r2, [r7, #8]
 8003e3c:	8979      	ldrh	r1, [r7, #10]
 8003e3e:	697b      	ldr	r3, [r7, #20]
 8003e40:	9301      	str	r3, [sp, #4]
 8003e42:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003e44:	9300      	str	r3, [sp, #0]
 8003e46:	4603      	mov	r3, r0
 8003e48:	68f8      	ldr	r0, [r7, #12]
 8003e4a:	f000 fe51 	bl	8004af0 <I2C_RequestMemoryRead>
 8003e4e:	4603      	mov	r3, r0
 8003e50:	2b00      	cmp	r3, #0
 8003e52:	d005      	beq.n	8003e60 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	2200      	movs	r2, #0
 8003e58:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8003e5c:	2301      	movs	r3, #1
 8003e5e:	e0ad      	b.n	8003fbc <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003e64:	b29b      	uxth	r3, r3
 8003e66:	2bff      	cmp	r3, #255	@ 0xff
 8003e68:	d90e      	bls.n	8003e88 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	22ff      	movs	r2, #255	@ 0xff
 8003e6e:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003e74:	b2da      	uxtb	r2, r3
 8003e76:	8979      	ldrh	r1, [r7, #10]
 8003e78:	4b52      	ldr	r3, [pc, #328]	@ (8003fc4 <HAL_I2C_Mem_Read+0x22c>)
 8003e7a:	9300      	str	r3, [sp, #0]
 8003e7c:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8003e80:	68f8      	ldr	r0, [r7, #12]
 8003e82:	f001 fd49 	bl	8005918 <I2C_TransferConfig>
 8003e86:	e00f      	b.n	8003ea8 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003e8c:	b29a      	uxth	r2, r3
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003e96:	b2da      	uxtb	r2, r3
 8003e98:	8979      	ldrh	r1, [r7, #10]
 8003e9a:	4b4a      	ldr	r3, [pc, #296]	@ (8003fc4 <HAL_I2C_Mem_Read+0x22c>)
 8003e9c:	9300      	str	r3, [sp, #0]
 8003e9e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003ea2:	68f8      	ldr	r0, [r7, #12]
 8003ea4:	f001 fd38 	bl	8005918 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8003ea8:	697b      	ldr	r3, [r7, #20]
 8003eaa:	9300      	str	r3, [sp, #0]
 8003eac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003eae:	2200      	movs	r2, #0
 8003eb0:	2104      	movs	r1, #4
 8003eb2:	68f8      	ldr	r0, [r7, #12]
 8003eb4:	f001 fb77 	bl	80055a6 <I2C_WaitOnFlagUntilTimeout>
 8003eb8:	4603      	mov	r3, r0
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	d001      	beq.n	8003ec2 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8003ebe:	2301      	movs	r3, #1
 8003ec0:	e07c      	b.n	8003fbc <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ecc:	b2d2      	uxtb	r2, r2
 8003ece:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ed4:	1c5a      	adds	r2, r3, #1
 8003ed6:	68fb      	ldr	r3, [r7, #12]
 8003ed8:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8003eda:	68fb      	ldr	r3, [r7, #12]
 8003edc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003ede:	3b01      	subs	r3, #1
 8003ee0:	b29a      	uxth	r2, r3
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003eea:	b29b      	uxth	r3, r3
 8003eec:	3b01      	subs	r3, #1
 8003eee:	b29a      	uxth	r2, r3
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003ef8:	b29b      	uxth	r3, r3
 8003efa:	2b00      	cmp	r3, #0
 8003efc:	d034      	beq.n	8003f68 <HAL_I2C_Mem_Read+0x1d0>
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	d130      	bne.n	8003f68 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003f06:	697b      	ldr	r3, [r7, #20]
 8003f08:	9300      	str	r3, [sp, #0]
 8003f0a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003f0c:	2200      	movs	r2, #0
 8003f0e:	2180      	movs	r1, #128	@ 0x80
 8003f10:	68f8      	ldr	r0, [r7, #12]
 8003f12:	f001 fb48 	bl	80055a6 <I2C_WaitOnFlagUntilTimeout>
 8003f16:	4603      	mov	r3, r0
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	d001      	beq.n	8003f20 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8003f1c:	2301      	movs	r3, #1
 8003f1e:	e04d      	b.n	8003fbc <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003f24:	b29b      	uxth	r3, r3
 8003f26:	2bff      	cmp	r3, #255	@ 0xff
 8003f28:	d90e      	bls.n	8003f48 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	22ff      	movs	r2, #255	@ 0xff
 8003f2e:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003f34:	b2da      	uxtb	r2, r3
 8003f36:	8979      	ldrh	r1, [r7, #10]
 8003f38:	2300      	movs	r3, #0
 8003f3a:	9300      	str	r3, [sp, #0]
 8003f3c:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8003f40:	68f8      	ldr	r0, [r7, #12]
 8003f42:	f001 fce9 	bl	8005918 <I2C_TransferConfig>
 8003f46:	e00f      	b.n	8003f68 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003f4c:	b29a      	uxth	r2, r3
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003f56:	b2da      	uxtb	r2, r3
 8003f58:	8979      	ldrh	r1, [r7, #10]
 8003f5a:	2300      	movs	r3, #0
 8003f5c:	9300      	str	r3, [sp, #0]
 8003f5e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003f62:	68f8      	ldr	r0, [r7, #12]
 8003f64:	f001 fcd8 	bl	8005918 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003f6c:	b29b      	uxth	r3, r3
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	d19a      	bne.n	8003ea8 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003f72:	697a      	ldr	r2, [r7, #20]
 8003f74:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003f76:	68f8      	ldr	r0, [r7, #12]
 8003f78:	f001 fbab 	bl	80056d2 <I2C_WaitOnSTOPFlagUntilTimeout>
 8003f7c:	4603      	mov	r3, r0
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	d001      	beq.n	8003f86 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8003f82:	2301      	movs	r3, #1
 8003f84:	e01a      	b.n	8003fbc <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	2220      	movs	r2, #32
 8003f8c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	6859      	ldr	r1, [r3, #4]
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	681a      	ldr	r2, [r3, #0]
 8003f98:	4b0b      	ldr	r3, [pc, #44]	@ (8003fc8 <HAL_I2C_Mem_Read+0x230>)
 8003f9a:	400b      	ands	r3, r1
 8003f9c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003f9e:	68fb      	ldr	r3, [r7, #12]
 8003fa0:	2220      	movs	r2, #32
 8003fa2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	2200      	movs	r2, #0
 8003faa:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	2200      	movs	r2, #0
 8003fb2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8003fb6:	2300      	movs	r3, #0
 8003fb8:	e000      	b.n	8003fbc <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8003fba:	2302      	movs	r3, #2
  }
}
 8003fbc:	4618      	mov	r0, r3
 8003fbe:	3718      	adds	r7, #24
 8003fc0:	46bd      	mov	sp, r7
 8003fc2:	bd80      	pop	{r7, pc}
 8003fc4:	80002400 	.word	0x80002400
 8003fc8:	fe00e800 	.word	0xfe00e800

08003fcc <HAL_I2C_Mem_Read_DMA>:
  * @param  Size Amount of data to be read
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                       uint16_t MemAddSize, uint8_t *pData, uint16_t Size)
{
 8003fcc:	b580      	push	{r7, lr}
 8003fce:	b088      	sub	sp, #32
 8003fd0:	af02      	add	r7, sp, #8
 8003fd2:	60f8      	str	r0, [r7, #12]
 8003fd4:	4608      	mov	r0, r1
 8003fd6:	4611      	mov	r1, r2
 8003fd8:	461a      	mov	r2, r3
 8003fda:	4603      	mov	r3, r0
 8003fdc:	817b      	strh	r3, [r7, #10]
 8003fde:	460b      	mov	r3, r1
 8003fe0:	813b      	strh	r3, [r7, #8]
 8003fe2:	4613      	mov	r3, r2
 8003fe4:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef dmaxferstatus;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003fec:	b2db      	uxtb	r3, r3
 8003fee:	2b20      	cmp	r3, #32
 8003ff0:	f040 80c2 	bne.w	8004178 <HAL_I2C_Mem_Read_DMA+0x1ac>
  {
    if ((pData == NULL) || (Size == 0U))
 8003ff4:	6a3b      	ldr	r3, [r7, #32]
 8003ff6:	2b00      	cmp	r3, #0
 8003ff8:	d002      	beq.n	8004000 <HAL_I2C_Mem_Read_DMA+0x34>
 8003ffa:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8003ffc:	2b00      	cmp	r3, #0
 8003ffe:	d105      	bne.n	800400c <HAL_I2C_Mem_Read_DMA+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004006:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8004008:	2301      	movs	r3, #1
 800400a:	e0b6      	b.n	800417a <HAL_I2C_Mem_Read_DMA+0x1ae>
    }

    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	699b      	ldr	r3, [r3, #24]
 8004012:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004016:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800401a:	d101      	bne.n	8004020 <HAL_I2C_Mem_Read_DMA+0x54>
    {
      return HAL_BUSY;
 800401c:	2302      	movs	r3, #2
 800401e:	e0ac      	b.n	800417a <HAL_I2C_Mem_Read_DMA+0x1ae>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004026:	2b01      	cmp	r3, #1
 8004028:	d101      	bne.n	800402e <HAL_I2C_Mem_Read_DMA+0x62>
 800402a:	2302      	movs	r3, #2
 800402c:	e0a5      	b.n	800417a <HAL_I2C_Mem_Read_DMA+0x1ae>
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	2201      	movs	r2, #1
 8004032:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8004036:	68fb      	ldr	r3, [r7, #12]
 8004038:	2222      	movs	r2, #34	@ 0x22
 800403a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode        = HAL_I2C_MODE_MEM;
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	2240      	movs	r2, #64	@ 0x40
 8004042:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8004046:	68fb      	ldr	r3, [r7, #12]
 8004048:	2200      	movs	r2, #0
 800404a:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	6a3a      	ldr	r2, [r7, #32]
 8004050:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8004052:	68fb      	ldr	r3, [r7, #12]
 8004054:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8004056:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	4a4a      	ldr	r2, [pc, #296]	@ (8004184 <HAL_I2C_Mem_Read_DMA+0x1b8>)
 800405c:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->XferISR     = I2C_Mem_ISR_DMA;
 800405e:	68fb      	ldr	r3, [r7, #12]
 8004060:	4a49      	ldr	r2, [pc, #292]	@ (8004188 <HAL_I2C_Mem_Read_DMA+0x1bc>)
 8004062:	635a      	str	r2, [r3, #52]	@ 0x34
    hi2c->Devaddress  = DevAddress;
 8004064:	897a      	ldrh	r2, [r7, #10]
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	64da      	str	r2, [r3, #76]	@ 0x4c

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800406e:	b29b      	uxth	r3, r3
 8004070:	2bff      	cmp	r3, #255	@ 0xff
 8004072:	d903      	bls.n	800407c <HAL_I2C_Mem_Read_DMA+0xb0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	22ff      	movs	r2, #255	@ 0xff
 8004078:	851a      	strh	r2, [r3, #40]	@ 0x28
 800407a:	e004      	b.n	8004086 <HAL_I2C_Mem_Read_DMA+0xba>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004080:	b29a      	uxth	r2, r3
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	851a      	strh	r2, [r3, #40]	@ 0x28
    }

    /* If Memory address size is 8Bit */
    if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004086:	88fb      	ldrh	r3, [r7, #6]
 8004088:	2b01      	cmp	r3, #1
 800408a:	d109      	bne.n	80040a0 <HAL_I2C_Mem_Read_DMA+0xd4>
    {
      /* Prefetch Memory Address */
      hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800408c:	893b      	ldrh	r3, [r7, #8]
 800408e:	b2da      	uxtb	r2, r3
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Reset Memaddress content */
      hi2c->Memaddress = 0xFFFFFFFFU;
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800409c:	651a      	str	r2, [r3, #80]	@ 0x50
 800409e:	e00b      	b.n	80040b8 <HAL_I2C_Mem_Read_DMA+0xec>
    }
    /* If Memory address size is 16Bit */
    else
    {
      /* Prefetch Memory Address (MSB part, LSB will be manage through interrupt) */
      hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80040a0:	893b      	ldrh	r3, [r7, #8]
 80040a2:	0a1b      	lsrs	r3, r3, #8
 80040a4:	b29b      	uxth	r3, r3
 80040a6:	b2da      	uxtb	r2, r3
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Prepare Memaddress buffer for LSB part */
      hi2c->Memaddress = I2C_MEM_ADD_LSB(MemAddress);
 80040ae:	893b      	ldrh	r3, [r7, #8]
 80040b0:	b2db      	uxtb	r3, r3
 80040b2:	461a      	mov	r2, r3
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	651a      	str	r2, [r3, #80]	@ 0x50
    }

    if (hi2c->hdmarx != NULL)
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80040bc:	2b00      	cmp	r3, #0
 80040be:	d020      	beq.n	8004102 <HAL_I2C_Mem_Read_DMA+0x136>
    {
      /* Set the I2C DMA transfer complete callback */
      hi2c->hdmarx->XferCpltCallback = I2C_DMAMasterReceiveCplt;
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80040c4:	4a31      	ldr	r2, [pc, #196]	@ (800418c <HAL_I2C_Mem_Read_DMA+0x1c0>)
 80040c6:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Set the DMA error callback */
      hi2c->hdmarx->XferErrorCallback = I2C_DMAError;
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80040cc:	4a30      	ldr	r2, [pc, #192]	@ (8004190 <HAL_I2C_Mem_Read_DMA+0x1c4>)
 80040ce:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Set the unused DMA callbacks to NULL */
      hi2c->hdmarx->XferHalfCpltCallback = NULL;
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80040d4:	2200      	movs	r2, #0
 80040d6:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->hdmarx->XferAbortCallback = NULL;
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80040dc:	2200      	movs	r2, #0
 80040de:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Enable the DMA channel */
      dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)pData,
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	3324      	adds	r3, #36	@ 0x24
 80040ea:	4619      	mov	r1, r3
 80040ec:	6a3a      	ldr	r2, [r7, #32]
                                       hi2c->XferSize);
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
      dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)pData,
 80040f2:	f7ff f95f 	bl	80033b4 <HAL_DMA_Start_IT>
 80040f6:	4603      	mov	r3, r0
 80040f8:	75fb      	strb	r3, [r7, #23]
      __HAL_UNLOCK(hi2c);

      return HAL_ERROR;
    }

    if (dmaxferstatus == HAL_OK)
 80040fa:	7dfb      	ldrb	r3, [r7, #23]
 80040fc:	2b00      	cmp	r3, #0
 80040fe:	d127      	bne.n	8004150 <HAL_I2C_Mem_Read_DMA+0x184>
 8004100:	e013      	b.n	800412a <HAL_I2C_Mem_Read_DMA+0x15e>
      hi2c->State     = HAL_I2C_STATE_READY;
 8004102:	68fb      	ldr	r3, [r7, #12]
 8004104:	2220      	movs	r2, #32
 8004106:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      hi2c->Mode      = HAL_I2C_MODE_NONE;
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	2200      	movs	r2, #0
 800410e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 8004112:	68fb      	ldr	r3, [r7, #12]
 8004114:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004116:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	645a      	str	r2, [r3, #68]	@ 0x44
      __HAL_UNLOCK(hi2c);
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	2200      	movs	r2, #0
 8004122:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8004126:	2301      	movs	r3, #1
 8004128:	e027      	b.n	800417a <HAL_I2C_Mem_Read_DMA+0x1ae>
    {
      /* Send Slave Address and Memory Address */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 800412a:	88fb      	ldrh	r3, [r7, #6]
 800412c:	b2da      	uxtb	r2, r3
 800412e:	8979      	ldrh	r1, [r7, #10]
 8004130:	4b18      	ldr	r3, [pc, #96]	@ (8004194 <HAL_I2C_Mem_Read_DMA+0x1c8>)
 8004132:	9300      	str	r3, [sp, #0]
 8004134:	2300      	movs	r3, #0
 8004136:	68f8      	ldr	r0, [r7, #12]
 8004138:	f001 fbee 	bl	8005918 <I2C_TransferConfig>

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	2200      	movs	r2, #0
 8004140:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
                process unlock */
      /* Enable ERR, TC, STOP, NACK, TXI interrupt */
      /* possible to enable all of these */
      /* I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI |
        I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
      I2C_Enable_IRQ(hi2c, I2C_XFER_TX_IT);
 8004144:	2101      	movs	r1, #1
 8004146:	68f8      	ldr	r0, [r7, #12]
 8004148:	f001 fc18 	bl	800597c <I2C_Enable_IRQ>
      __HAL_UNLOCK(hi2c);

      return HAL_ERROR;
    }

    return HAL_OK;
 800414c:	2300      	movs	r3, #0
 800414e:	e014      	b.n	800417a <HAL_I2C_Mem_Read_DMA+0x1ae>
      hi2c->State     = HAL_I2C_STATE_READY;
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	2220      	movs	r2, #32
 8004154:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      hi2c->Mode      = HAL_I2C_MODE_NONE;
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	2200      	movs	r2, #0
 800415c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004164:	f043 0210 	orr.w	r2, r3, #16
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	645a      	str	r2, [r3, #68]	@ 0x44
      __HAL_UNLOCK(hi2c);
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	2200      	movs	r2, #0
 8004170:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8004174:	2301      	movs	r3, #1
 8004176:	e000      	b.n	800417a <HAL_I2C_Mem_Read_DMA+0x1ae>
  }
  else
  {
    return HAL_BUSY;
 8004178:	2302      	movs	r3, #2
  }
}
 800417a:	4618      	mov	r0, r3
 800417c:	3718      	adds	r7, #24
 800417e:	46bd      	mov	sp, r7
 8004180:	bd80      	pop	{r7, pc}
 8004182:	bf00      	nop
 8004184:	ffff0000 	.word	0xffff0000
 8004188:	08004651 	.word	0x08004651
 800418c:	080054a7 	.word	0x080054a7
 8004190:	0800553d 	.word	0x0800553d
 8004194:	80002000 	.word	0x80002000

08004198 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c) /* Derogation MISRAC2012-Rule-8.13 */
{
 8004198:	b580      	push	{r7, lr}
 800419a:	b084      	sub	sp, #16
 800419c:	af00      	add	r7, sp, #0
 800419e:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	699b      	ldr	r3, [r3, #24]
 80041a6:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80041b4:	2b00      	cmp	r3, #0
 80041b6:	d005      	beq.n	80041c4 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80041bc:	68ba      	ldr	r2, [r7, #8]
 80041be:	68f9      	ldr	r1, [r7, #12]
 80041c0:	6878      	ldr	r0, [r7, #4]
 80041c2:	4798      	blx	r3
  }
}
 80041c4:	bf00      	nop
 80041c6:	3710      	adds	r7, #16
 80041c8:	46bd      	mov	sp, r7
 80041ca:	bd80      	pop	{r7, pc}

080041cc <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80041cc:	b480      	push	{r7}
 80041ce:	b083      	sub	sp, #12
 80041d0:	af00      	add	r7, sp, #0
 80041d2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 80041d4:	bf00      	nop
 80041d6:	370c      	adds	r7, #12
 80041d8:	46bd      	mov	sp, r7
 80041da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041de:	4770      	bx	lr

080041e0 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80041e0:	b480      	push	{r7}
 80041e2:	b083      	sub	sp, #12
 80041e4:	af00      	add	r7, sp, #0
 80041e6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 80041e8:	bf00      	nop
 80041ea:	370c      	adds	r7, #12
 80041ec:	46bd      	mov	sp, r7
 80041ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041f2:	4770      	bx	lr

080041f4 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80041f4:	b480      	push	{r7}
 80041f6:	b083      	sub	sp, #12
 80041f8:	af00      	add	r7, sp, #0
 80041fa:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 80041fc:	bf00      	nop
 80041fe:	370c      	adds	r7, #12
 8004200:	46bd      	mov	sp, r7
 8004202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004206:	4770      	bx	lr

08004208 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004208:	b480      	push	{r7}
 800420a:	b083      	sub	sp, #12
 800420c:	af00      	add	r7, sp, #0
 800420e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8004210:	bf00      	nop
 8004212:	370c      	adds	r7, #12
 8004214:	46bd      	mov	sp, r7
 8004216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800421a:	4770      	bx	lr

0800421c <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 800421c:	b480      	push	{r7}
 800421e:	b083      	sub	sp, #12
 8004220:	af00      	add	r7, sp, #0
 8004222:	6078      	str	r0, [r7, #4]
 8004224:	460b      	mov	r3, r1
 8004226:	70fb      	strb	r3, [r7, #3]
 8004228:	4613      	mov	r3, r2
 800422a:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 800422c:	bf00      	nop
 800422e:	370c      	adds	r7, #12
 8004230:	46bd      	mov	sp, r7
 8004232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004236:	4770      	bx	lr

08004238 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004238:	b480      	push	{r7}
 800423a:	b083      	sub	sp, #12
 800423c:	af00      	add	r7, sp, #0
 800423e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 8004240:	bf00      	nop
 8004242:	370c      	adds	r7, #12
 8004244:	46bd      	mov	sp, r7
 8004246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800424a:	4770      	bx	lr

0800424c <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800424c:	b480      	push	{r7}
 800424e:	b083      	sub	sp, #12
 8004250:	af00      	add	r7, sp, #0
 8004252:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8004254:	bf00      	nop
 8004256:	370c      	adds	r7, #12
 8004258:	46bd      	mov	sp, r7
 800425a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800425e:	4770      	bx	lr

08004260 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8004260:	b480      	push	{r7}
 8004262:	b083      	sub	sp, #12
 8004264:	af00      	add	r7, sp, #0
 8004266:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8004268:	bf00      	nop
 800426a:	370c      	adds	r7, #12
 800426c:	46bd      	mov	sp, r7
 800426e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004272:	4770      	bx	lr

08004274 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004274:	b480      	push	{r7}
 8004276:	b083      	sub	sp, #12
 8004278:	af00      	add	r7, sp, #0
 800427a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 800427c:	bf00      	nop
 800427e:	370c      	adds	r7, #12
 8004280:	46bd      	mov	sp, r7
 8004282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004286:	4770      	bx	lr

08004288 <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 8004288:	b580      	push	{r7, lr}
 800428a:	b086      	sub	sp, #24
 800428c:	af00      	add	r7, sp, #0
 800428e:	60f8      	str	r0, [r7, #12]
 8004290:	60b9      	str	r1, [r7, #8]
 8004292:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004298:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 800429a:	68bb      	ldr	r3, [r7, #8]
 800429c:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 800429e:	68fb      	ldr	r3, [r7, #12]
 80042a0:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80042a4:	2b01      	cmp	r3, #1
 80042a6:	d101      	bne.n	80042ac <I2C_Slave_ISR_IT+0x24>
 80042a8:	2302      	movs	r3, #2
 80042aa:	e0e1      	b.n	8004470 <I2C_Slave_ISR_IT+0x1e8>
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	2201      	movs	r2, #1
 80042b0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 80042b4:	693b      	ldr	r3, [r7, #16]
 80042b6:	f003 0320 	and.w	r3, r3, #32
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	d008      	beq.n	80042d0 <I2C_Slave_ISR_IT+0x48>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	f003 0320 	and.w	r3, r3, #32
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 80042c4:	2b00      	cmp	r3, #0
 80042c6:	d003      	beq.n	80042d0 <I2C_Slave_ISR_IT+0x48>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 80042c8:	6939      	ldr	r1, [r7, #16]
 80042ca:	68f8      	ldr	r0, [r7, #12]
 80042cc:	f000 fe4a 	bl	8004f64 <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 80042d0:	693b      	ldr	r3, [r7, #16]
 80042d2:	f003 0310 	and.w	r3, r3, #16
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	d04b      	beq.n	8004372 <I2C_Slave_ISR_IT+0xea>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 80042e0:	2b00      	cmp	r3, #0
 80042e2:	d046      	beq.n	8004372 <I2C_Slave_ISR_IT+0xea>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80042e8:	b29b      	uxth	r3, r3
 80042ea:	2b00      	cmp	r3, #0
 80042ec:	d128      	bne.n	8004340 <I2C_Slave_ISR_IT+0xb8>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 80042ee:	68fb      	ldr	r3, [r7, #12]
 80042f0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80042f4:	b2db      	uxtb	r3, r3
 80042f6:	2b28      	cmp	r3, #40	@ 0x28
 80042f8:	d108      	bne.n	800430c <I2C_Slave_ISR_IT+0x84>
 80042fa:	697b      	ldr	r3, [r7, #20]
 80042fc:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8004300:	d104      	bne.n	800430c <I2C_Slave_ISR_IT+0x84>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8004302:	6939      	ldr	r1, [r7, #16]
 8004304:	68f8      	ldr	r0, [r7, #12]
 8004306:	f000 ff3f 	bl	8005188 <I2C_ITListenCplt>
 800430a:	e031      	b.n	8004370 <I2C_Slave_ISR_IT+0xe8>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004312:	b2db      	uxtb	r3, r3
 8004314:	2b29      	cmp	r3, #41	@ 0x29
 8004316:	d10e      	bne.n	8004336 <I2C_Slave_ISR_IT+0xae>
 8004318:	697b      	ldr	r3, [r7, #20]
 800431a:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800431e:	d00a      	beq.n	8004336 <I2C_Slave_ISR_IT+0xae>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	2210      	movs	r2, #16
 8004326:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8004328:	68f8      	ldr	r0, [r7, #12]
 800432a:	f001 f898 	bl	800545e <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 800432e:	68f8      	ldr	r0, [r7, #12]
 8004330:	f000 fcf3 	bl	8004d1a <I2C_ITSlaveSeqCplt>
 8004334:	e01c      	b.n	8004370 <I2C_Slave_ISR_IT+0xe8>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	2210      	movs	r2, #16
 800433c:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 800433e:	e08f      	b.n	8004460 <I2C_Slave_ISR_IT+0x1d8>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	2210      	movs	r2, #16
 8004346:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800434c:	f043 0204 	orr.w	r2, r3, #4
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8004354:	697b      	ldr	r3, [r7, #20]
 8004356:	2b00      	cmp	r3, #0
 8004358:	d003      	beq.n	8004362 <I2C_Slave_ISR_IT+0xda>
 800435a:	697b      	ldr	r3, [r7, #20]
 800435c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004360:	d17e      	bne.n	8004460 <I2C_Slave_ISR_IT+0x1d8>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8004362:	68fb      	ldr	r3, [r7, #12]
 8004364:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004366:	4619      	mov	r1, r3
 8004368:	68f8      	ldr	r0, [r7, #12]
 800436a:	f000 ff61 	bl	8005230 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 800436e:	e077      	b.n	8004460 <I2C_Slave_ISR_IT+0x1d8>
 8004370:	e076      	b.n	8004460 <I2C_Slave_ISR_IT+0x1d8>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8004372:	693b      	ldr	r3, [r7, #16]
 8004374:	f003 0304 	and.w	r3, r3, #4
 8004378:	2b00      	cmp	r3, #0
 800437a:	d02f      	beq.n	80043dc <I2C_Slave_ISR_IT+0x154>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	f003 0304 	and.w	r3, r3, #4
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8004382:	2b00      	cmp	r3, #0
 8004384:	d02a      	beq.n	80043dc <I2C_Slave_ISR_IT+0x154>
  {
    if (hi2c->XferCount > 0U)
 8004386:	68fb      	ldr	r3, [r7, #12]
 8004388:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800438a:	b29b      	uxth	r3, r3
 800438c:	2b00      	cmp	r3, #0
 800438e:	d018      	beq.n	80043c2 <I2C_Slave_ISR_IT+0x13a>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800439a:	b2d2      	uxtb	r2, r2
 800439c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800439e:	68fb      	ldr	r3, [r7, #12]
 80043a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80043a2:	1c5a      	adds	r2, r3, #1
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80043ac:	3b01      	subs	r3, #1
 80043ae:	b29a      	uxth	r2, r3
 80043b0:	68fb      	ldr	r3, [r7, #12]
 80043b2:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80043b8:	b29b      	uxth	r3, r3
 80043ba:	3b01      	subs	r3, #1
 80043bc:	b29a      	uxth	r2, r3
 80043be:	68fb      	ldr	r3, [r7, #12]
 80043c0:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 80043c2:	68fb      	ldr	r3, [r7, #12]
 80043c4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80043c6:	b29b      	uxth	r3, r3
 80043c8:	2b00      	cmp	r3, #0
 80043ca:	d14b      	bne.n	8004464 <I2C_Slave_ISR_IT+0x1dc>
 80043cc:	697b      	ldr	r3, [r7, #20]
 80043ce:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80043d2:	d047      	beq.n	8004464 <I2C_Slave_ISR_IT+0x1dc>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 80043d4:	68f8      	ldr	r0, [r7, #12]
 80043d6:	f000 fca0 	bl	8004d1a <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 80043da:	e043      	b.n	8004464 <I2C_Slave_ISR_IT+0x1dc>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 80043dc:	693b      	ldr	r3, [r7, #16]
 80043de:	f003 0308 	and.w	r3, r3, #8
 80043e2:	2b00      	cmp	r3, #0
 80043e4:	d009      	beq.n	80043fa <I2C_Slave_ISR_IT+0x172>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	f003 0308 	and.w	r3, r3, #8
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 80043ec:	2b00      	cmp	r3, #0
 80043ee:	d004      	beq.n	80043fa <I2C_Slave_ISR_IT+0x172>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 80043f0:	6939      	ldr	r1, [r7, #16]
 80043f2:	68f8      	ldr	r0, [r7, #12]
 80043f4:	f000 fbd0 	bl	8004b98 <I2C_ITAddrCplt>
 80043f8:	e035      	b.n	8004466 <I2C_Slave_ISR_IT+0x1de>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 80043fa:	693b      	ldr	r3, [r7, #16]
 80043fc:	f003 0302 	and.w	r3, r3, #2
 8004400:	2b00      	cmp	r3, #0
 8004402:	d030      	beq.n	8004466 <I2C_Slave_ISR_IT+0x1de>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	f003 0302 	and.w	r3, r3, #2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 800440a:	2b00      	cmp	r3, #0
 800440c:	d02b      	beq.n	8004466 <I2C_Slave_ISR_IT+0x1de>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 800440e:	68fb      	ldr	r3, [r7, #12]
 8004410:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004412:	b29b      	uxth	r3, r3
 8004414:	2b00      	cmp	r3, #0
 8004416:	d018      	beq.n	800444a <I2C_Slave_ISR_IT+0x1c2>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800441c:	781a      	ldrb	r2, [r3, #0]
 800441e:	68fb      	ldr	r3, [r7, #12]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004428:	1c5a      	adds	r2, r3, #1
 800442a:	68fb      	ldr	r3, [r7, #12]
 800442c:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 800442e:	68fb      	ldr	r3, [r7, #12]
 8004430:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004432:	b29b      	uxth	r3, r3
 8004434:	3b01      	subs	r3, #1
 8004436:	b29a      	uxth	r2, r3
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004440:	3b01      	subs	r3, #1
 8004442:	b29a      	uxth	r2, r3
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	851a      	strh	r2, [r3, #40]	@ 0x28
 8004448:	e00d      	b.n	8004466 <I2C_Slave_ISR_IT+0x1de>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 800444a:	697b      	ldr	r3, [r7, #20]
 800444c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004450:	d002      	beq.n	8004458 <I2C_Slave_ISR_IT+0x1d0>
 8004452:	697b      	ldr	r3, [r7, #20]
 8004454:	2b00      	cmp	r3, #0
 8004456:	d106      	bne.n	8004466 <I2C_Slave_ISR_IT+0x1de>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8004458:	68f8      	ldr	r0, [r7, #12]
 800445a:	f000 fc5e 	bl	8004d1a <I2C_ITSlaveSeqCplt>
 800445e:	e002      	b.n	8004466 <I2C_Slave_ISR_IT+0x1de>
    if (hi2c->XferCount == 0U)
 8004460:	bf00      	nop
 8004462:	e000      	b.n	8004466 <I2C_Slave_ISR_IT+0x1de>
    if ((hi2c->XferCount == 0U) && \
 8004464:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8004466:	68fb      	ldr	r3, [r7, #12]
 8004468:	2200      	movs	r2, #0
 800446a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 800446e:	2300      	movs	r3, #0
}
 8004470:	4618      	mov	r0, r3
 8004472:	3718      	adds	r7, #24
 8004474:	46bd      	mov	sp, r7
 8004476:	bd80      	pop	{r7, pc}

08004478 <I2C_Master_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                            uint32_t ITSources)
{
 8004478:	b580      	push	{r7, lr}
 800447a:	b088      	sub	sp, #32
 800447c:	af02      	add	r7, sp, #8
 800447e:	60f8      	str	r0, [r7, #12]
 8004480:	60b9      	str	r1, [r7, #8]
 8004482:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t xfermode;

  /* Process Locked */
  __HAL_LOCK(hi2c);
 8004484:	68fb      	ldr	r3, [r7, #12]
 8004486:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800448a:	2b01      	cmp	r3, #1
 800448c:	d101      	bne.n	8004492 <I2C_Master_ISR_DMA+0x1a>
 800448e:	2302      	movs	r3, #2
 8004490:	e0d9      	b.n	8004646 <I2C_Master_ISR_DMA+0x1ce>
 8004492:	68fb      	ldr	r3, [r7, #12]
 8004494:	2201      	movs	r2, #1
 8004496:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 800449a:	68bb      	ldr	r3, [r7, #8]
 800449c:	f003 0310 	and.w	r3, r3, #16
 80044a0:	2b00      	cmp	r3, #0
 80044a2:	d016      	beq.n	80044d2 <I2C_Master_ISR_DMA+0x5a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 80044aa:	2b00      	cmp	r3, #0
 80044ac:	d011      	beq.n	80044d2 <I2C_Master_ISR_DMA+0x5a>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80044ae:	68fb      	ldr	r3, [r7, #12]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	2210      	movs	r2, #16
 80044b4:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80044b6:	68fb      	ldr	r3, [r7, #12]
 80044b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80044ba:	f043 0204 	orr.w	r2, r3, #4
 80044be:	68fb      	ldr	r3, [r7, #12]
 80044c0:	645a      	str	r2, [r3, #68]	@ 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 80044c2:	2120      	movs	r1, #32
 80044c4:	68f8      	ldr	r0, [r7, #12]
 80044c6:	f001 fa59 	bl	800597c <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80044ca:	68f8      	ldr	r0, [r7, #12]
 80044cc:	f000 ffc7 	bl	800545e <I2C_Flush_TXDR>
 80044d0:	e0b4      	b.n	800463c <I2C_Master_ISR_DMA+0x1c4>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 80044d2:	68bb      	ldr	r3, [r7, #8]
 80044d4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80044d8:	2b00      	cmp	r3, #0
 80044da:	d071      	beq.n	80045c0 <I2C_Master_ISR_DMA+0x148>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 80044e2:	2b00      	cmp	r3, #0
 80044e4:	d06c      	beq.n	80045c0 <I2C_Master_ISR_DMA+0x148>
  {
    /* Disable TC interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_TCI);
 80044e6:	68fb      	ldr	r3, [r7, #12]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	681a      	ldr	r2, [r3, #0]
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80044f4:	601a      	str	r2, [r3, #0]

    if (hi2c->XferCount != 0U)
 80044f6:	68fb      	ldr	r3, [r7, #12]
 80044f8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80044fa:	b29b      	uxth	r3, r3
 80044fc:	2b00      	cmp	r3, #0
 80044fe:	d04e      	beq.n	800459e <I2C_Master_ISR_DMA+0x126>
    {
      /* Recover Slave address */
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	685b      	ldr	r3, [r3, #4]
 8004506:	b29b      	uxth	r3, r3
 8004508:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800450c:	827b      	strh	r3, [r7, #18]

      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800450e:	68fb      	ldr	r3, [r7, #12]
 8004510:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004512:	b29b      	uxth	r3, r3
 8004514:	2bff      	cmp	r3, #255	@ 0xff
 8004516:	d906      	bls.n	8004526 <I2C_Master_ISR_DMA+0xae>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	22ff      	movs	r2, #255	@ 0xff
 800451c:	851a      	strh	r2, [r3, #40]	@ 0x28
        xfermode = I2C_RELOAD_MODE;
 800451e:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8004522:	617b      	str	r3, [r7, #20]
 8004524:	e010      	b.n	8004548 <I2C_Master_ISR_DMA+0xd0>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800452a:	b29a      	uxth	r2, r3
 800452c:	68fb      	ldr	r3, [r7, #12]
 800452e:	851a      	strh	r2, [r3, #40]	@ 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004534:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8004538:	d003      	beq.n	8004542 <I2C_Master_ISR_DMA+0xca>
        {
          xfermode = hi2c->XferOptions;
 800453a:	68fb      	ldr	r3, [r7, #12]
 800453c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800453e:	617b      	str	r3, [r7, #20]
 8004540:	e002      	b.n	8004548 <I2C_Master_ISR_DMA+0xd0>
        }
        else
        {
          xfermode = I2C_AUTOEND_MODE;
 8004542:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8004546:	617b      	str	r3, [r7, #20]
        }
      }

      /* Set the new XferSize in Nbytes register */
      I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, xfermode, I2C_NO_STARTSTOP);
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800454c:	b2da      	uxtb	r2, r3
 800454e:	8a79      	ldrh	r1, [r7, #18]
 8004550:	2300      	movs	r3, #0
 8004552:	9300      	str	r3, [sp, #0]
 8004554:	697b      	ldr	r3, [r7, #20]
 8004556:	68f8      	ldr	r0, [r7, #12]
 8004558:	f001 f9de 	bl	8005918 <I2C_TransferConfig>

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004560:	b29a      	uxth	r2, r3
 8004562:	68fb      	ldr	r3, [r7, #12]
 8004564:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004566:	1ad3      	subs	r3, r2, r3
 8004568:	b29a      	uxth	r2, r3
 800456a:	68fb      	ldr	r3, [r7, #12]
 800456c:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800456e:	68fb      	ldr	r3, [r7, #12]
 8004570:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004574:	b2db      	uxtb	r3, r3
 8004576:	2b22      	cmp	r3, #34	@ 0x22
 8004578:	d108      	bne.n	800458c <I2C_Master_ISR_DMA+0x114>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	681a      	ldr	r2, [r3, #0]
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004588:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 800458a:	e057      	b.n	800463c <I2C_Master_ISR_DMA+0x1c4>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	681a      	ldr	r2, [r3, #0]
 8004592:	68fb      	ldr	r3, [r7, #12]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800459a:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 800459c:	e04e      	b.n	800463c <I2C_Master_ISR_DMA+0x1c4>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 800459e:	68fb      	ldr	r3, [r7, #12]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	685b      	ldr	r3, [r3, #4]
 80045a4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80045a8:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80045ac:	d003      	beq.n	80045b6 <I2C_Master_ISR_DMA+0x13e>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 80045ae:	68f8      	ldr	r0, [r7, #12]
 80045b0:	f000 fb76 	bl	8004ca0 <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount != 0U)
 80045b4:	e042      	b.n	800463c <I2C_Master_ISR_DMA+0x1c4>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 80045b6:	2140      	movs	r1, #64	@ 0x40
 80045b8:	68f8      	ldr	r0, [r7, #12]
 80045ba:	f000 fe39 	bl	8005230 <I2C_ITError>
    if (hi2c->XferCount != 0U)
 80045be:	e03d      	b.n	800463c <I2C_Master_ISR_DMA+0x1c4>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 80045c0:	68bb      	ldr	r3, [r7, #8]
 80045c2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	d028      	beq.n	800461c <I2C_Master_ISR_DMA+0x1a4>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 80045d0:	2b00      	cmp	r3, #0
 80045d2:	d023      	beq.n	800461c <I2C_Master_ISR_DMA+0x1a4>
  {
    if (hi2c->XferCount == 0U)
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80045d8:	b29b      	uxth	r3, r3
 80045da:	2b00      	cmp	r3, #0
 80045dc:	d119      	bne.n	8004612 <I2C_Master_ISR_DMA+0x19a>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 80045de:	68fb      	ldr	r3, [r7, #12]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	685b      	ldr	r3, [r3, #4]
 80045e4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80045e8:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80045ec:	d025      	beq.n	800463a <I2C_Master_ISR_DMA+0x1c2>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 80045ee:	68fb      	ldr	r3, [r7, #12]
 80045f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80045f2:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80045f6:	d108      	bne.n	800460a <I2C_Master_ISR_DMA+0x192>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	685a      	ldr	r2, [r3, #4]
 80045fe:	68fb      	ldr	r3, [r7, #12]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004606:	605a      	str	r2, [r3, #4]
    if (hi2c->XferCount == 0U)
 8004608:	e017      	b.n	800463a <I2C_Master_ISR_DMA+0x1c2>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 800460a:	68f8      	ldr	r0, [r7, #12]
 800460c:	f000 fb48 	bl	8004ca0 <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount == 0U)
 8004610:	e013      	b.n	800463a <I2C_Master_ISR_DMA+0x1c2>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8004612:	2140      	movs	r1, #64	@ 0x40
 8004614:	68f8      	ldr	r0, [r7, #12]
 8004616:	f000 fe0b 	bl	8005230 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 800461a:	e00e      	b.n	800463a <I2C_Master_ISR_DMA+0x1c2>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 800461c:	68bb      	ldr	r3, [r7, #8]
 800461e:	f003 0320 	and.w	r3, r3, #32
 8004622:	2b00      	cmp	r3, #0
 8004624:	d00a      	beq.n	800463c <I2C_Master_ISR_DMA+0x1c4>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	f003 0320 	and.w	r3, r3, #32
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 800462c:	2b00      	cmp	r3, #0
 800462e:	d005      	beq.n	800463c <I2C_Master_ISR_DMA+0x1c4>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 8004630:	68b9      	ldr	r1, [r7, #8]
 8004632:	68f8      	ldr	r0, [r7, #12]
 8004634:	f000 fbce 	bl	8004dd4 <I2C_ITMasterCplt>
 8004638:	e000      	b.n	800463c <I2C_Master_ISR_DMA+0x1c4>
    if (hi2c->XferCount == 0U)
 800463a:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	2200      	movs	r2, #0
 8004640:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8004644:	2300      	movs	r3, #0
}
 8004646:	4618      	mov	r0, r3
 8004648:	3718      	adds	r7, #24
 800464a:	46bd      	mov	sp, r7
 800464c:	bd80      	pop	{r7, pc}
	...

08004650 <I2C_Mem_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Mem_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                         uint32_t ITSources)
{
 8004650:	b580      	push	{r7, lr}
 8004652:	b088      	sub	sp, #32
 8004654:	af02      	add	r7, sp, #8
 8004656:	60f8      	str	r0, [r7, #12]
 8004658:	60b9      	str	r1, [r7, #8]
 800465a:	607a      	str	r2, [r7, #4]
  uint32_t direction = I2C_GENERATE_START_WRITE;
 800465c:	4b8d      	ldr	r3, [pc, #564]	@ (8004894 <I2C_Mem_ISR_DMA+0x244>)
 800465e:	617b      	str	r3, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hi2c);
 8004660:	68fb      	ldr	r3, [r7, #12]
 8004662:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004666:	2b01      	cmp	r3, #1
 8004668:	d101      	bne.n	800466e <I2C_Mem_ISR_DMA+0x1e>
 800466a:	2302      	movs	r3, #2
 800466c:	e10e      	b.n	800488c <I2C_Mem_ISR_DMA+0x23c>
 800466e:	68fb      	ldr	r3, [r7, #12]
 8004670:	2201      	movs	r2, #1
 8004672:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8004676:	68bb      	ldr	r3, [r7, #8]
 8004678:	f003 0310 	and.w	r3, r3, #16
 800467c:	2b00      	cmp	r3, #0
 800467e:	d016      	beq.n	80046ae <I2C_Mem_ISR_DMA+0x5e>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8004686:	2b00      	cmp	r3, #0
 8004688:	d011      	beq.n	80046ae <I2C_Mem_ISR_DMA+0x5e>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800468a:	68fb      	ldr	r3, [r7, #12]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	2210      	movs	r2, #16
 8004690:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004696:	f043 0204 	orr.w	r2, r3, #4
 800469a:	68fb      	ldr	r3, [r7, #12]
 800469c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 800469e:	2120      	movs	r1, #32
 80046a0:	68f8      	ldr	r0, [r7, #12]
 80046a2:	f001 f96b 	bl	800597c <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80046a6:	68f8      	ldr	r0, [r7, #12]
 80046a8:	f000 fed9 	bl	800545e <I2C_Flush_TXDR>
 80046ac:	e0e9      	b.n	8004882 <I2C_Mem_ISR_DMA+0x232>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TXIS) != RESET) && \
 80046ae:	68bb      	ldr	r3, [r7, #8]
 80046b0:	f003 0302 	and.w	r3, r3, #2
 80046b4:	2b00      	cmp	r3, #0
 80046b6:	d00e      	beq.n	80046d6 <I2C_Mem_ISR_DMA+0x86>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	f003 0302 	and.w	r3, r3, #2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TXIS) != RESET) && \
 80046be:	2b00      	cmp	r3, #0
 80046c0:	d009      	beq.n	80046d6 <I2C_Mem_ISR_DMA+0x86>
  {
    /* Write LSB part of Memory Address */
    hi2c->Instance->TXDR = hi2c->Memaddress;
 80046c2:	68fb      	ldr	r3, [r7, #12]
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	68fa      	ldr	r2, [r7, #12]
 80046c8:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80046ca:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Reset Memaddress content */
    hi2c->Memaddress = 0xFFFFFFFFU;
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80046d2:	651a      	str	r2, [r3, #80]	@ 0x50
 80046d4:	e0d5      	b.n	8004882 <I2C_Mem_ISR_DMA+0x232>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 80046d6:	68bb      	ldr	r3, [r7, #8]
 80046d8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80046dc:	2b00      	cmp	r3, #0
 80046de:	d05f      	beq.n	80047a0 <I2C_Mem_ISR_DMA+0x150>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	d05a      	beq.n	80047a0 <I2C_Mem_ISR_DMA+0x150>
  {
    /* Disable Interrupt related to address step */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 80046ea:	2101      	movs	r1, #1
 80046ec:	68f8      	ldr	r0, [r7, #12]
 80046ee:	f001 f9c9 	bl	8005a84 <I2C_Disable_IRQ>

    /* Enable only Error interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 80046f2:	2110      	movs	r1, #16
 80046f4:	68f8      	ldr	r0, [r7, #12]
 80046f6:	f001 f941 	bl	800597c <I2C_Enable_IRQ>

    if (hi2c->XferCount != 0U)
 80046fa:	68fb      	ldr	r3, [r7, #12]
 80046fc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80046fe:	b29b      	uxth	r3, r3
 8004700:	2b00      	cmp	r3, #0
 8004702:	d048      	beq.n	8004796 <I2C_Mem_ISR_DMA+0x146>
    {
      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004704:	68fb      	ldr	r3, [r7, #12]
 8004706:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004708:	b29b      	uxth	r3, r3
 800470a:	2bff      	cmp	r3, #255	@ 0xff
 800470c:	d910      	bls.n	8004730 <I2C_Mem_ISR_DMA+0xe0>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 800470e:	68fb      	ldr	r3, [r7, #12]
 8004710:	22ff      	movs	r2, #255	@ 0xff
 8004712:	851a      	strh	r2, [r3, #40]	@ 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8004714:	68fb      	ldr	r3, [r7, #12]
 8004716:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004718:	b299      	uxth	r1, r3
 800471a:	68fb      	ldr	r3, [r7, #12]
 800471c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800471e:	b2da      	uxtb	r2, r3
 8004720:	2300      	movs	r3, #0
 8004722:	9300      	str	r3, [sp, #0]
 8004724:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8004728:	68f8      	ldr	r0, [r7, #12]
 800472a:	f001 f8f5 	bl	8005918 <I2C_TransferConfig>
 800472e:	e011      	b.n	8004754 <I2C_Mem_ISR_DMA+0x104>
                           I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 8004730:	68fb      	ldr	r3, [r7, #12]
 8004732:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004734:	b29a      	uxth	r2, r3
 8004736:	68fb      	ldr	r3, [r7, #12]
 8004738:	851a      	strh	r2, [r3, #40]	@ 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 800473a:	68fb      	ldr	r3, [r7, #12]
 800473c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800473e:	b299      	uxth	r1, r3
 8004740:	68fb      	ldr	r3, [r7, #12]
 8004742:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004744:	b2da      	uxtb	r2, r3
 8004746:	2300      	movs	r3, #0
 8004748:	9300      	str	r3, [sp, #0]
 800474a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800474e:	68f8      	ldr	r0, [r7, #12]
 8004750:	f001 f8e2 	bl	8005918 <I2C_TransferConfig>
                           I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
      }

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 8004754:	68fb      	ldr	r3, [r7, #12]
 8004756:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004758:	b29a      	uxth	r2, r3
 800475a:	68fb      	ldr	r3, [r7, #12]
 800475c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800475e:	1ad3      	subs	r3, r2, r3
 8004760:	b29a      	uxth	r2, r3
 8004762:	68fb      	ldr	r3, [r7, #12]
 8004764:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800476c:	b2db      	uxtb	r3, r3
 800476e:	2b22      	cmp	r3, #34	@ 0x22
 8004770:	d108      	bne.n	8004784 <I2C_Mem_ISR_DMA+0x134>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8004772:	68fb      	ldr	r3, [r7, #12]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	681a      	ldr	r2, [r3, #0]
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004780:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8004782:	e07e      	b.n	8004882 <I2C_Mem_ISR_DMA+0x232>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8004784:	68fb      	ldr	r3, [r7, #12]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	681a      	ldr	r2, [r3, #0]
 800478a:	68fb      	ldr	r3, [r7, #12]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004792:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8004794:	e075      	b.n	8004882 <I2C_Mem_ISR_DMA+0x232>
    }
    else
    {
      /* Wrong size Status regarding TCR flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8004796:	2140      	movs	r1, #64	@ 0x40
 8004798:	68f8      	ldr	r0, [r7, #12]
 800479a:	f000 fd49 	bl	8005230 <I2C_ITError>
    if (hi2c->XferCount != 0U)
 800479e:	e070      	b.n	8004882 <I2C_Mem_ISR_DMA+0x232>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 80047a0:	68bb      	ldr	r3, [r7, #8]
 80047a2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80047a6:	2b00      	cmp	r3, #0
 80047a8:	d05d      	beq.n	8004866 <I2C_Mem_ISR_DMA+0x216>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 80047b0:	2b00      	cmp	r3, #0
 80047b2:	d058      	beq.n	8004866 <I2C_Mem_ISR_DMA+0x216>
  {
    /* Disable Interrupt related to address step */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 80047b4:	2101      	movs	r1, #1
 80047b6:	68f8      	ldr	r0, [r7, #12]
 80047b8:	f001 f964 	bl	8005a84 <I2C_Disable_IRQ>

    /* Enable only Error and NACK interrupt for data transfer */
    I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 80047bc:	2110      	movs	r1, #16
 80047be:	68f8      	ldr	r0, [r7, #12]
 80047c0:	f001 f8dc 	bl	800597c <I2C_Enable_IRQ>

    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80047ca:	b2db      	uxtb	r3, r3
 80047cc:	2b22      	cmp	r3, #34	@ 0x22
 80047ce:	d101      	bne.n	80047d4 <I2C_Mem_ISR_DMA+0x184>
    {
      direction = I2C_GENERATE_START_READ;
 80047d0:	4b31      	ldr	r3, [pc, #196]	@ (8004898 <I2C_Mem_ISR_DMA+0x248>)
 80047d2:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80047d8:	b29b      	uxth	r3, r3
 80047da:	2bff      	cmp	r3, #255	@ 0xff
 80047dc:	d910      	bls.n	8004800 <I2C_Mem_ISR_DMA+0x1b0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80047de:	68fb      	ldr	r3, [r7, #12]
 80047e0:	22ff      	movs	r2, #255	@ 0xff
 80047e2:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80047e8:	b299      	uxth	r1, r3
 80047ea:	68fb      	ldr	r3, [r7, #12]
 80047ec:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80047ee:	b2da      	uxtb	r2, r3
 80047f0:	697b      	ldr	r3, [r7, #20]
 80047f2:	9300      	str	r3, [sp, #0]
 80047f4:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80047f8:	68f8      	ldr	r0, [r7, #12]
 80047fa:	f001 f88d 	bl	8005918 <I2C_TransferConfig>
 80047fe:	e011      	b.n	8004824 <I2C_Mem_ISR_DMA+0x1d4>
                         I2C_RELOAD_MODE, direction);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8004800:	68fb      	ldr	r3, [r7, #12]
 8004802:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004804:	b29a      	uxth	r2, r3
 8004806:	68fb      	ldr	r3, [r7, #12]
 8004808:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Set NBYTES to write and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 800480a:	68fb      	ldr	r3, [r7, #12]
 800480c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800480e:	b299      	uxth	r1, r3
 8004810:	68fb      	ldr	r3, [r7, #12]
 8004812:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004814:	b2da      	uxtb	r2, r3
 8004816:	697b      	ldr	r3, [r7, #20]
 8004818:	9300      	str	r3, [sp, #0]
 800481a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800481e:	68f8      	ldr	r0, [r7, #12]
 8004820:	f001 f87a 	bl	8005918 <I2C_TransferConfig>
                         I2C_AUTOEND_MODE, direction);
    }

    /* Update XferCount value */
    hi2c->XferCount -= hi2c->XferSize;
 8004824:	68fb      	ldr	r3, [r7, #12]
 8004826:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004828:	b29a      	uxth	r2, r3
 800482a:	68fb      	ldr	r3, [r7, #12]
 800482c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800482e:	1ad3      	subs	r3, r2, r3
 8004830:	b29a      	uxth	r2, r3
 8004832:	68fb      	ldr	r3, [r7, #12]
 8004834:	855a      	strh	r2, [r3, #42]	@ 0x2a

    /* Enable DMA Request */
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8004836:	68fb      	ldr	r3, [r7, #12]
 8004838:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800483c:	b2db      	uxtb	r3, r3
 800483e:	2b22      	cmp	r3, #34	@ 0x22
 8004840:	d108      	bne.n	8004854 <I2C_Mem_ISR_DMA+0x204>
    {
      hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	681a      	ldr	r2, [r3, #0]
 8004848:	68fb      	ldr	r3, [r7, #12]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004850:	601a      	str	r2, [r3, #0]
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8004852:	e016      	b.n	8004882 <I2C_Mem_ISR_DMA+0x232>
    }
    else
    {
      hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8004854:	68fb      	ldr	r3, [r7, #12]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	681a      	ldr	r2, [r3, #0]
 800485a:	68fb      	ldr	r3, [r7, #12]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004862:	601a      	str	r2, [r3, #0]
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8004864:	e00d      	b.n	8004882 <I2C_Mem_ISR_DMA+0x232>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8004866:	68bb      	ldr	r3, [r7, #8]
 8004868:	f003 0320 	and.w	r3, r3, #32
 800486c:	2b00      	cmp	r3, #0
 800486e:	d008      	beq.n	8004882 <I2C_Mem_ISR_DMA+0x232>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	f003 0320 	and.w	r3, r3, #32
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8004876:	2b00      	cmp	r3, #0
 8004878:	d003      	beq.n	8004882 <I2C_Mem_ISR_DMA+0x232>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 800487a:	68b9      	ldr	r1, [r7, #8]
 800487c:	68f8      	ldr	r0, [r7, #12]
 800487e:	f000 faa9 	bl	8004dd4 <I2C_ITMasterCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8004882:	68fb      	ldr	r3, [r7, #12]
 8004884:	2200      	movs	r2, #0
 8004886:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 800488a:	2300      	movs	r3, #0
}
 800488c:	4618      	mov	r0, r3
 800488e:	3718      	adds	r7, #24
 8004890:	46bd      	mov	sp, r7
 8004892:	bd80      	pop	{r7, pc}
 8004894:	80002000 	.word	0x80002000
 8004898:	80002400 	.word	0x80002400

0800489c <I2C_Slave_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                           uint32_t ITSources)
{
 800489c:	b580      	push	{r7, lr}
 800489e:	b088      	sub	sp, #32
 80048a0:	af00      	add	r7, sp, #0
 80048a2:	60f8      	str	r0, [r7, #12]
 80048a4:	60b9      	str	r1, [r7, #8]
 80048a6:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 80048a8:	68fb      	ldr	r3, [r7, #12]
 80048aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80048ac:	61bb      	str	r3, [r7, #24]
  uint32_t treatdmanack = 0U;
 80048ae:	2300      	movs	r3, #0
 80048b0:	61fb      	str	r3, [r7, #28]
  HAL_I2C_StateTypeDef tmpstate;

  /* Process locked */
  __HAL_LOCK(hi2c);
 80048b2:	68fb      	ldr	r3, [r7, #12]
 80048b4:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80048b8:	2b01      	cmp	r3, #1
 80048ba:	d101      	bne.n	80048c0 <I2C_Slave_ISR_DMA+0x24>
 80048bc:	2302      	movs	r3, #2
 80048be:	e0bf      	b.n	8004a40 <I2C_Slave_ISR_DMA+0x1a4>
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	2201      	movs	r2, #1
 80048c4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 80048c8:	68bb      	ldr	r3, [r7, #8]
 80048ca:	f003 0320 	and.w	r3, r3, #32
 80048ce:	2b00      	cmp	r3, #0
 80048d0:	d008      	beq.n	80048e4 <I2C_Slave_ISR_DMA+0x48>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	f003 0320 	and.w	r3, r3, #32
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 80048d8:	2b00      	cmp	r3, #0
 80048da:	d003      	beq.n	80048e4 <I2C_Slave_ISR_DMA+0x48>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, ITFlags);
 80048dc:	68b9      	ldr	r1, [r7, #8]
 80048de:	68f8      	ldr	r0, [r7, #12]
 80048e0:	f000 fb40 	bl	8004f64 <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 80048e4:	68bb      	ldr	r3, [r7, #8]
 80048e6:	f003 0310 	and.w	r3, r3, #16
 80048ea:	2b00      	cmp	r3, #0
 80048ec:	f000 8095 	beq.w	8004a1a <I2C_Slave_ISR_DMA+0x17e>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 80048f6:	2b00      	cmp	r3, #0
 80048f8:	f000 808f 	beq.w	8004a1a <I2C_Slave_ISR_DMA+0x17e>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0 */
    /* So clear Flag NACKF only */
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004902:	2b00      	cmp	r3, #0
 8004904:	d104      	bne.n	8004910 <I2C_Slave_ISR_DMA+0x74>
        (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET))
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 800490c:	2b00      	cmp	r3, #0
 800490e:	d07d      	beq.n	8004a0c <I2C_Slave_ISR_DMA+0x170>
    {
      /* Split check of hdmarx, for MISRA compliance */
      if (hi2c->hdmarx != NULL)
 8004910:	68fb      	ldr	r3, [r7, #12]
 8004912:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004914:	2b00      	cmp	r3, #0
 8004916:	d00c      	beq.n	8004932 <I2C_Slave_ISR_DMA+0x96>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET)
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800491e:	2b00      	cmp	r3, #0
 8004920:	d007      	beq.n	8004932 <I2C_Slave_ISR_DMA+0x96>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx) == 0U)
 8004922:	68fb      	ldr	r3, [r7, #12]
 8004924:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	685b      	ldr	r3, [r3, #4]
 800492a:	2b00      	cmp	r3, #0
 800492c:	d101      	bne.n	8004932 <I2C_Slave_ISR_DMA+0x96>
          {
            treatdmanack = 1U;
 800492e:	2301      	movs	r3, #1
 8004930:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      /* Split check of hdmatx, for MISRA compliance  */
      if (hi2c->hdmatx != NULL)
 8004932:	68fb      	ldr	r3, [r7, #12]
 8004934:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004936:	2b00      	cmp	r3, #0
 8004938:	d00c      	beq.n	8004954 <I2C_Slave_ISR_DMA+0xb8>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET)
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004940:	2b00      	cmp	r3, #0
 8004942:	d007      	beq.n	8004954 <I2C_Slave_ISR_DMA+0xb8>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx) == 0U)
 8004944:	68fb      	ldr	r3, [r7, #12]
 8004946:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	685b      	ldr	r3, [r3, #4]
 800494c:	2b00      	cmp	r3, #0
 800494e:	d101      	bne.n	8004954 <I2C_Slave_ISR_DMA+0xb8>
          {
            treatdmanack = 1U;
 8004950:	2301      	movs	r3, #1
 8004952:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      if (treatdmanack == 1U)
 8004954:	69fb      	ldr	r3, [r7, #28]
 8004956:	2b01      	cmp	r3, #1
 8004958:	d128      	bne.n	80049ac <I2C_Slave_ISR_DMA+0x110>
      {
        if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 800495a:	68fb      	ldr	r3, [r7, #12]
 800495c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004960:	b2db      	uxtb	r3, r3
 8004962:	2b28      	cmp	r3, #40	@ 0x28
 8004964:	d108      	bne.n	8004978 <I2C_Slave_ISR_DMA+0xdc>
 8004966:	69bb      	ldr	r3, [r7, #24]
 8004968:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800496c:	d104      	bne.n	8004978 <I2C_Slave_ISR_DMA+0xdc>
          /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
             Warning[Pa134]: left and right operands are identical */
        {
          /* Call I2C Listen complete process */
          I2C_ITListenCplt(hi2c, ITFlags);
 800496e:	68b9      	ldr	r1, [r7, #8]
 8004970:	68f8      	ldr	r0, [r7, #12]
 8004972:	f000 fc09 	bl	8005188 <I2C_ITListenCplt>
 8004976:	e048      	b.n	8004a0a <I2C_Slave_ISR_DMA+0x16e>
        }
        else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8004978:	68fb      	ldr	r3, [r7, #12]
 800497a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800497e:	b2db      	uxtb	r3, r3
 8004980:	2b29      	cmp	r3, #41	@ 0x29
 8004982:	d10e      	bne.n	80049a2 <I2C_Slave_ISR_DMA+0x106>
 8004984:	69bb      	ldr	r3, [r7, #24]
 8004986:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800498a:	d00a      	beq.n	80049a2 <I2C_Slave_ISR_DMA+0x106>
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800498c:	68fb      	ldr	r3, [r7, #12]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	2210      	movs	r2, #16
 8004992:	61da      	str	r2, [r3, #28]

          /* Flush TX register */
          I2C_Flush_TXDR(hi2c);
 8004994:	68f8      	ldr	r0, [r7, #12]
 8004996:	f000 fd62 	bl	800545e <I2C_Flush_TXDR>

          /* Last Byte is Transmitted */
          /* Call I2C Slave Sequential complete process */
          I2C_ITSlaveSeqCplt(hi2c);
 800499a:	68f8      	ldr	r0, [r7, #12]
 800499c:	f000 f9bd 	bl	8004d1a <I2C_ITSlaveSeqCplt>
 80049a0:	e033      	b.n	8004a0a <I2C_Slave_ISR_DMA+0x16e>
        }
        else
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80049a2:	68fb      	ldr	r3, [r7, #12]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	2210      	movs	r2, #16
 80049a8:	61da      	str	r2, [r3, #28]
      if (treatdmanack == 1U)
 80049aa:	e034      	b.n	8004a16 <I2C_Slave_ISR_DMA+0x17a>
      }
      else
      {
        /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80049ac:	68fb      	ldr	r3, [r7, #12]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	2210      	movs	r2, #16
 80049b2:	61da      	str	r2, [r3, #28]

        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80049b4:	68fb      	ldr	r3, [r7, #12]
 80049b6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80049b8:	f043 0204 	orr.w	r2, r3, #4
 80049bc:	68fb      	ldr	r3, [r7, #12]
 80049be:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Store current hi2c->State, solve MISRA2012-Rule-13.5 */
        tmpstate = hi2c->State;
 80049c0:	68fb      	ldr	r3, [r7, #12]
 80049c2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80049c6:	75fb      	strb	r3, [r7, #23]

        if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 80049c8:	69bb      	ldr	r3, [r7, #24]
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	d003      	beq.n	80049d6 <I2C_Slave_ISR_DMA+0x13a>
 80049ce:	69bb      	ldr	r3, [r7, #24]
 80049d0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80049d4:	d11f      	bne.n	8004a16 <I2C_Slave_ISR_DMA+0x17a>
        {
          if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80049d6:	7dfb      	ldrb	r3, [r7, #23]
 80049d8:	2b21      	cmp	r3, #33	@ 0x21
 80049da:	d002      	beq.n	80049e2 <I2C_Slave_ISR_DMA+0x146>
 80049dc:	7dfb      	ldrb	r3, [r7, #23]
 80049de:	2b29      	cmp	r3, #41	@ 0x29
 80049e0:	d103      	bne.n	80049ea <I2C_Slave_ISR_DMA+0x14e>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80049e2:	68fb      	ldr	r3, [r7, #12]
 80049e4:	2221      	movs	r2, #33	@ 0x21
 80049e6:	631a      	str	r2, [r3, #48]	@ 0x30
 80049e8:	e008      	b.n	80049fc <I2C_Slave_ISR_DMA+0x160>
          }
          else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80049ea:	7dfb      	ldrb	r3, [r7, #23]
 80049ec:	2b22      	cmp	r3, #34	@ 0x22
 80049ee:	d002      	beq.n	80049f6 <I2C_Slave_ISR_DMA+0x15a>
 80049f0:	7dfb      	ldrb	r3, [r7, #23]
 80049f2:	2b2a      	cmp	r3, #42	@ 0x2a
 80049f4:	d102      	bne.n	80049fc <I2C_Slave_ISR_DMA+0x160>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80049f6:	68fb      	ldr	r3, [r7, #12]
 80049f8:	2222      	movs	r2, #34	@ 0x22
 80049fa:	631a      	str	r2, [r3, #48]	@ 0x30
          {
            /* Do nothing */
          }

          /* Call the corresponding callback to inform upper layer of End of Transfer */
          I2C_ITError(hi2c, hi2c->ErrorCode);
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004a00:	4619      	mov	r1, r3
 8004a02:	68f8      	ldr	r0, [r7, #12]
 8004a04:	f000 fc14 	bl	8005230 <I2C_ITError>
      if (treatdmanack == 1U)
 8004a08:	e005      	b.n	8004a16 <I2C_Slave_ISR_DMA+0x17a>
 8004a0a:	e004      	b.n	8004a16 <I2C_Slave_ISR_DMA+0x17a>
      }
    }
    else
    {
      /* Only Clear NACK Flag, no DMA treatment is pending */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004a0c:	68fb      	ldr	r3, [r7, #12]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	2210      	movs	r2, #16
 8004a12:	61da      	str	r2, [r3, #28]
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8004a14:	e00f      	b.n	8004a36 <I2C_Slave_ISR_DMA+0x19a>
      if (treatdmanack == 1U)
 8004a16:	bf00      	nop
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8004a18:	e00d      	b.n	8004a36 <I2C_Slave_ISR_DMA+0x19a>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 8004a1a:	68bb      	ldr	r3, [r7, #8]
 8004a1c:	f003 0308 	and.w	r3, r3, #8
 8004a20:	2b00      	cmp	r3, #0
 8004a22:	d008      	beq.n	8004a36 <I2C_Slave_ISR_DMA+0x19a>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	f003 0308 	and.w	r3, r3, #8
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 8004a2a:	2b00      	cmp	r3, #0
 8004a2c:	d003      	beq.n	8004a36 <I2C_Slave_ISR_DMA+0x19a>
  {
    I2C_ITAddrCplt(hi2c, ITFlags);
 8004a2e:	68b9      	ldr	r1, [r7, #8]
 8004a30:	68f8      	ldr	r0, [r7, #12]
 8004a32:	f000 f8b1 	bl	8004b98 <I2C_ITAddrCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8004a36:	68fb      	ldr	r3, [r7, #12]
 8004a38:	2200      	movs	r2, #0
 8004a3a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8004a3e:	2300      	movs	r3, #0
}
 8004a40:	4618      	mov	r0, r3
 8004a42:	3720      	adds	r7, #32
 8004a44:	46bd      	mov	sp, r7
 8004a46:	bd80      	pop	{r7, pc}

08004a48 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8004a48:	b580      	push	{r7, lr}
 8004a4a:	b086      	sub	sp, #24
 8004a4c:	af02      	add	r7, sp, #8
 8004a4e:	60f8      	str	r0, [r7, #12]
 8004a50:	4608      	mov	r0, r1
 8004a52:	4611      	mov	r1, r2
 8004a54:	461a      	mov	r2, r3
 8004a56:	4603      	mov	r3, r0
 8004a58:	817b      	strh	r3, [r7, #10]
 8004a5a:	460b      	mov	r3, r1
 8004a5c:	813b      	strh	r3, [r7, #8]
 8004a5e:	4613      	mov	r3, r2
 8004a60:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8004a62:	88fb      	ldrh	r3, [r7, #6]
 8004a64:	b2da      	uxtb	r2, r3
 8004a66:	8979      	ldrh	r1, [r7, #10]
 8004a68:	4b20      	ldr	r3, [pc, #128]	@ (8004aec <I2C_RequestMemoryWrite+0xa4>)
 8004a6a:	9300      	str	r3, [sp, #0]
 8004a6c:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8004a70:	68f8      	ldr	r0, [r7, #12]
 8004a72:	f000 ff51 	bl	8005918 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004a76:	69fa      	ldr	r2, [r7, #28]
 8004a78:	69b9      	ldr	r1, [r7, #24]
 8004a7a:	68f8      	ldr	r0, [r7, #12]
 8004a7c:	f000 fde2 	bl	8005644 <I2C_WaitOnTXISFlagUntilTimeout>
 8004a80:	4603      	mov	r3, r0
 8004a82:	2b00      	cmp	r3, #0
 8004a84:	d001      	beq.n	8004a8a <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8004a86:	2301      	movs	r3, #1
 8004a88:	e02c      	b.n	8004ae4 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004a8a:	88fb      	ldrh	r3, [r7, #6]
 8004a8c:	2b01      	cmp	r3, #1
 8004a8e:	d105      	bne.n	8004a9c <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004a90:	893b      	ldrh	r3, [r7, #8]
 8004a92:	b2da      	uxtb	r2, r3
 8004a94:	68fb      	ldr	r3, [r7, #12]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	629a      	str	r2, [r3, #40]	@ 0x28
 8004a9a:	e015      	b.n	8004ac8 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8004a9c:	893b      	ldrh	r3, [r7, #8]
 8004a9e:	0a1b      	lsrs	r3, r3, #8
 8004aa0:	b29b      	uxth	r3, r3
 8004aa2:	b2da      	uxtb	r2, r3
 8004aa4:	68fb      	ldr	r3, [r7, #12]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004aaa:	69fa      	ldr	r2, [r7, #28]
 8004aac:	69b9      	ldr	r1, [r7, #24]
 8004aae:	68f8      	ldr	r0, [r7, #12]
 8004ab0:	f000 fdc8 	bl	8005644 <I2C_WaitOnTXISFlagUntilTimeout>
 8004ab4:	4603      	mov	r3, r0
 8004ab6:	2b00      	cmp	r3, #0
 8004ab8:	d001      	beq.n	8004abe <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8004aba:	2301      	movs	r3, #1
 8004abc:	e012      	b.n	8004ae4 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004abe:	893b      	ldrh	r3, [r7, #8]
 8004ac0:	b2da      	uxtb	r2, r3
 8004ac2:	68fb      	ldr	r3, [r7, #12]
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8004ac8:	69fb      	ldr	r3, [r7, #28]
 8004aca:	9300      	str	r3, [sp, #0]
 8004acc:	69bb      	ldr	r3, [r7, #24]
 8004ace:	2200      	movs	r2, #0
 8004ad0:	2180      	movs	r1, #128	@ 0x80
 8004ad2:	68f8      	ldr	r0, [r7, #12]
 8004ad4:	f000 fd67 	bl	80055a6 <I2C_WaitOnFlagUntilTimeout>
 8004ad8:	4603      	mov	r3, r0
 8004ada:	2b00      	cmp	r3, #0
 8004adc:	d001      	beq.n	8004ae2 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8004ade:	2301      	movs	r3, #1
 8004ae0:	e000      	b.n	8004ae4 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8004ae2:	2300      	movs	r3, #0
}
 8004ae4:	4618      	mov	r0, r3
 8004ae6:	3710      	adds	r7, #16
 8004ae8:	46bd      	mov	sp, r7
 8004aea:	bd80      	pop	{r7, pc}
 8004aec:	80002000 	.word	0x80002000

08004af0 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8004af0:	b580      	push	{r7, lr}
 8004af2:	b086      	sub	sp, #24
 8004af4:	af02      	add	r7, sp, #8
 8004af6:	60f8      	str	r0, [r7, #12]
 8004af8:	4608      	mov	r0, r1
 8004afa:	4611      	mov	r1, r2
 8004afc:	461a      	mov	r2, r3
 8004afe:	4603      	mov	r3, r0
 8004b00:	817b      	strh	r3, [r7, #10]
 8004b02:	460b      	mov	r3, r1
 8004b04:	813b      	strh	r3, [r7, #8]
 8004b06:	4613      	mov	r3, r2
 8004b08:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8004b0a:	88fb      	ldrh	r3, [r7, #6]
 8004b0c:	b2da      	uxtb	r2, r3
 8004b0e:	8979      	ldrh	r1, [r7, #10]
 8004b10:	4b20      	ldr	r3, [pc, #128]	@ (8004b94 <I2C_RequestMemoryRead+0xa4>)
 8004b12:	9300      	str	r3, [sp, #0]
 8004b14:	2300      	movs	r3, #0
 8004b16:	68f8      	ldr	r0, [r7, #12]
 8004b18:	f000 fefe 	bl	8005918 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004b1c:	69fa      	ldr	r2, [r7, #28]
 8004b1e:	69b9      	ldr	r1, [r7, #24]
 8004b20:	68f8      	ldr	r0, [r7, #12]
 8004b22:	f000 fd8f 	bl	8005644 <I2C_WaitOnTXISFlagUntilTimeout>
 8004b26:	4603      	mov	r3, r0
 8004b28:	2b00      	cmp	r3, #0
 8004b2a:	d001      	beq.n	8004b30 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8004b2c:	2301      	movs	r3, #1
 8004b2e:	e02c      	b.n	8004b8a <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004b30:	88fb      	ldrh	r3, [r7, #6]
 8004b32:	2b01      	cmp	r3, #1
 8004b34:	d105      	bne.n	8004b42 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004b36:	893b      	ldrh	r3, [r7, #8]
 8004b38:	b2da      	uxtb	r2, r3
 8004b3a:	68fb      	ldr	r3, [r7, #12]
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	629a      	str	r2, [r3, #40]	@ 0x28
 8004b40:	e015      	b.n	8004b6e <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8004b42:	893b      	ldrh	r3, [r7, #8]
 8004b44:	0a1b      	lsrs	r3, r3, #8
 8004b46:	b29b      	uxth	r3, r3
 8004b48:	b2da      	uxtb	r2, r3
 8004b4a:	68fb      	ldr	r3, [r7, #12]
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004b50:	69fa      	ldr	r2, [r7, #28]
 8004b52:	69b9      	ldr	r1, [r7, #24]
 8004b54:	68f8      	ldr	r0, [r7, #12]
 8004b56:	f000 fd75 	bl	8005644 <I2C_WaitOnTXISFlagUntilTimeout>
 8004b5a:	4603      	mov	r3, r0
 8004b5c:	2b00      	cmp	r3, #0
 8004b5e:	d001      	beq.n	8004b64 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8004b60:	2301      	movs	r3, #1
 8004b62:	e012      	b.n	8004b8a <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004b64:	893b      	ldrh	r3, [r7, #8]
 8004b66:	b2da      	uxtb	r2, r3
 8004b68:	68fb      	ldr	r3, [r7, #12]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8004b6e:	69fb      	ldr	r3, [r7, #28]
 8004b70:	9300      	str	r3, [sp, #0]
 8004b72:	69bb      	ldr	r3, [r7, #24]
 8004b74:	2200      	movs	r2, #0
 8004b76:	2140      	movs	r1, #64	@ 0x40
 8004b78:	68f8      	ldr	r0, [r7, #12]
 8004b7a:	f000 fd14 	bl	80055a6 <I2C_WaitOnFlagUntilTimeout>
 8004b7e:	4603      	mov	r3, r0
 8004b80:	2b00      	cmp	r3, #0
 8004b82:	d001      	beq.n	8004b88 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8004b84:	2301      	movs	r3, #1
 8004b86:	e000      	b.n	8004b8a <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8004b88:	2300      	movs	r3, #0
}
 8004b8a:	4618      	mov	r0, r3
 8004b8c:	3710      	adds	r7, #16
 8004b8e:	46bd      	mov	sp, r7
 8004b90:	bd80      	pop	{r7, pc}
 8004b92:	bf00      	nop
 8004b94:	80002000 	.word	0x80002000

08004b98 <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8004b98:	b580      	push	{r7, lr}
 8004b9a:	b084      	sub	sp, #16
 8004b9c:	af00      	add	r7, sp, #0
 8004b9e:	6078      	str	r0, [r7, #4]
 8004ba0:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004ba8:	b2db      	uxtb	r3, r3
 8004baa:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8004bae:	2b28      	cmp	r3, #40	@ 0x28
 8004bb0:	d16a      	bne.n	8004c88 <I2C_ITAddrCplt+0xf0>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	699b      	ldr	r3, [r3, #24]
 8004bb8:	0c1b      	lsrs	r3, r3, #16
 8004bba:	b2db      	uxtb	r3, r3
 8004bbc:	f003 0301 	and.w	r3, r3, #1
 8004bc0:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	699b      	ldr	r3, [r3, #24]
 8004bc8:	0c1b      	lsrs	r3, r3, #16
 8004bca:	b29b      	uxth	r3, r3
 8004bcc:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 8004bd0:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	689b      	ldr	r3, [r3, #8]
 8004bd8:	b29b      	uxth	r3, r3
 8004bda:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004bde:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	68db      	ldr	r3, [r3, #12]
 8004be6:	b29b      	uxth	r3, r3
 8004be8:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 8004bec:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	68db      	ldr	r3, [r3, #12]
 8004bf2:	2b02      	cmp	r3, #2
 8004bf4:	d138      	bne.n	8004c68 <I2C_ITAddrCplt+0xd0>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 8004bf6:	897b      	ldrh	r3, [r7, #10]
 8004bf8:	09db      	lsrs	r3, r3, #7
 8004bfa:	b29a      	uxth	r2, r3
 8004bfc:	89bb      	ldrh	r3, [r7, #12]
 8004bfe:	4053      	eors	r3, r2
 8004c00:	b29b      	uxth	r3, r3
 8004c02:	f003 0306 	and.w	r3, r3, #6
 8004c06:	2b00      	cmp	r3, #0
 8004c08:	d11c      	bne.n	8004c44 <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 8004c0a:	897b      	ldrh	r3, [r7, #10]
 8004c0c:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004c12:	1c5a      	adds	r2, r3, #1
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	649a      	str	r2, [r3, #72]	@ 0x48
        if (hi2c->AddrEventCount == 2U)
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004c1c:	2b02      	cmp	r3, #2
 8004c1e:	d13b      	bne.n	8004c98 <I2C_ITAddrCplt+0x100>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	2200      	movs	r2, #0
 8004c24:	649a      	str	r2, [r3, #72]	@ 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	2208      	movs	r2, #8
 8004c2c:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	2200      	movs	r2, #0
 8004c32:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8004c36:	89ba      	ldrh	r2, [r7, #12]
 8004c38:	7bfb      	ldrb	r3, [r7, #15]
 8004c3a:	4619      	mov	r1, r3
 8004c3c:	6878      	ldr	r0, [r7, #4]
 8004c3e:	f7ff faed 	bl	800421c <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8004c42:	e029      	b.n	8004c98 <I2C_ITAddrCplt+0x100>
        slaveaddrcode = ownadd2code;
 8004c44:	893b      	ldrh	r3, [r7, #8]
 8004c46:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8004c48:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8004c4c:	6878      	ldr	r0, [r7, #4]
 8004c4e:	f000 ff19 	bl	8005a84 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	2200      	movs	r2, #0
 8004c56:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8004c5a:	89ba      	ldrh	r2, [r7, #12]
 8004c5c:	7bfb      	ldrb	r3, [r7, #15]
 8004c5e:	4619      	mov	r1, r3
 8004c60:	6878      	ldr	r0, [r7, #4]
 8004c62:	f7ff fadb 	bl	800421c <HAL_I2C_AddrCallback>
}
 8004c66:	e017      	b.n	8004c98 <I2C_ITAddrCplt+0x100>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8004c68:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8004c6c:	6878      	ldr	r0, [r7, #4]
 8004c6e:	f000 ff09 	bl	8005a84 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	2200      	movs	r2, #0
 8004c76:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8004c7a:	89ba      	ldrh	r2, [r7, #12]
 8004c7c:	7bfb      	ldrb	r3, [r7, #15]
 8004c7e:	4619      	mov	r1, r3
 8004c80:	6878      	ldr	r0, [r7, #4]
 8004c82:	f7ff facb 	bl	800421c <HAL_I2C_AddrCallback>
}
 8004c86:	e007      	b.n	8004c98 <I2C_ITAddrCplt+0x100>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	2208      	movs	r2, #8
 8004c8e:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	2200      	movs	r2, #0
 8004c94:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
}
 8004c98:	bf00      	nop
 8004c9a:	3710      	adds	r7, #16
 8004c9c:	46bd      	mov	sp, r7
 8004c9e:	bd80      	pop	{r7, pc}

08004ca0 <I2C_ITMasterSeqCplt>:
  * @brief  I2C Master sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITMasterSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8004ca0:	b580      	push	{r7, lr}
 8004ca2:	b082      	sub	sp, #8
 8004ca4:	af00      	add	r7, sp, #0
 8004ca6:	6078      	str	r0, [r7, #4]
  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	2200      	movs	r2, #0
 8004cac:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* No Generate Stop, to permit restart mode */
  /* The stop will be done at the end of transfer, when I2C_AUTOEND_MODE enable */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004cb6:	b2db      	uxtb	r3, r3
 8004cb8:	2b21      	cmp	r3, #33	@ 0x21
 8004cba:	d115      	bne.n	8004ce8 <I2C_ITMasterSeqCplt+0x48>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	2220      	movs	r2, #32
 8004cc0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	2211      	movs	r2, #17
 8004cc8:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->XferISR       = NULL;
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	2200      	movs	r2, #0
 8004cce:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8004cd0:	2101      	movs	r1, #1
 8004cd2:	6878      	ldr	r0, [r7, #4]
 8004cd4:	f000 fed6 	bl	8005a84 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	2200      	movs	r2, #0
 8004cdc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->MasterTxCpltCallback(hi2c);
#else
    HAL_I2C_MasterTxCpltCallback(hi2c);
 8004ce0:	6878      	ldr	r0, [r7, #4]
 8004ce2:	f7ff fa73 	bl	80041cc <HAL_I2C_MasterTxCpltCallback>
    hi2c->MasterRxCpltCallback(hi2c);
#else
    HAL_I2C_MasterRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8004ce6:	e014      	b.n	8004d12 <I2C_ITMasterSeqCplt+0x72>
    hi2c->State         = HAL_I2C_STATE_READY;
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	2220      	movs	r2, #32
 8004cec:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	2212      	movs	r2, #18
 8004cf4:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->XferISR       = NULL;
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	2200      	movs	r2, #0
 8004cfa:	635a      	str	r2, [r3, #52]	@ 0x34
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8004cfc:	2102      	movs	r1, #2
 8004cfe:	6878      	ldr	r0, [r7, #4]
 8004d00:	f000 fec0 	bl	8005a84 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	2200      	movs	r2, #0
 8004d08:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_MasterRxCpltCallback(hi2c);
 8004d0c:	6878      	ldr	r0, [r7, #4]
 8004d0e:	f7ff fa67 	bl	80041e0 <HAL_I2C_MasterRxCpltCallback>
}
 8004d12:	bf00      	nop
 8004d14:	3708      	adds	r7, #8
 8004d16:	46bd      	mov	sp, r7
 8004d18:	bd80      	pop	{r7, pc}

08004d1a <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8004d1a:	b580      	push	{r7, lr}
 8004d1c:	b084      	sub	sp, #16
 8004d1e:	af00      	add	r7, sp, #0
 8004d20:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	2200      	movs	r2, #0
 8004d2e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8004d32:	68fb      	ldr	r3, [r7, #12]
 8004d34:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004d38:	2b00      	cmp	r3, #0
 8004d3a:	d008      	beq.n	8004d4e <I2C_ITSlaveSeqCplt+0x34>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	681a      	ldr	r2, [r3, #0]
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8004d4a:	601a      	str	r2, [r3, #0]
 8004d4c:	e00c      	b.n	8004d68 <I2C_ITSlaveSeqCplt+0x4e>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8004d4e:	68fb      	ldr	r3, [r7, #12]
 8004d50:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004d54:	2b00      	cmp	r3, #0
 8004d56:	d007      	beq.n	8004d68 <I2C_ITSlaveSeqCplt+0x4e>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	681a      	ldr	r2, [r3, #0]
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8004d66:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004d6e:	b2db      	uxtb	r3, r3
 8004d70:	2b29      	cmp	r3, #41	@ 0x29
 8004d72:	d112      	bne.n	8004d9a <I2C_ITSlaveSeqCplt+0x80>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	2228      	movs	r2, #40	@ 0x28
 8004d78:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	2221      	movs	r2, #33	@ 0x21
 8004d80:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8004d82:	2101      	movs	r1, #1
 8004d84:	6878      	ldr	r0, [r7, #4]
 8004d86:	f000 fe7d 	bl	8005a84 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	2200      	movs	r2, #0
 8004d8e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8004d92:	6878      	ldr	r0, [r7, #4]
 8004d94:	f7ff fa2e 	bl	80041f4 <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8004d98:	e017      	b.n	8004dca <I2C_ITSlaveSeqCplt+0xb0>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004da0:	b2db      	uxtb	r3, r3
 8004da2:	2b2a      	cmp	r3, #42	@ 0x2a
 8004da4:	d111      	bne.n	8004dca <I2C_ITSlaveSeqCplt+0xb0>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	2228      	movs	r2, #40	@ 0x28
 8004daa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	2222      	movs	r2, #34	@ 0x22
 8004db2:	631a      	str	r2, [r3, #48]	@ 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8004db4:	2102      	movs	r1, #2
 8004db6:	6878      	ldr	r0, [r7, #4]
 8004db8:	f000 fe64 	bl	8005a84 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	2200      	movs	r2, #0
 8004dc0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8004dc4:	6878      	ldr	r0, [r7, #4]
 8004dc6:	f7ff fa1f 	bl	8004208 <HAL_I2C_SlaveRxCpltCallback>
}
 8004dca:	bf00      	nop
 8004dcc:	3710      	adds	r7, #16
 8004dce:	46bd      	mov	sp, r7
 8004dd0:	bd80      	pop	{r7, pc}
	...

08004dd4 <I2C_ITMasterCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITMasterCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8004dd4:	b580      	push	{r7, lr}
 8004dd6:	b086      	sub	sp, #24
 8004dd8:	af00      	add	r7, sp, #0
 8004dda:	6078      	str	r0, [r7, #4]
 8004ddc:	6039      	str	r1, [r7, #0]
  uint32_t tmperror;
  uint32_t tmpITFlags = ITFlags;
 8004dde:	683b      	ldr	r3, [r7, #0]
 8004de0:	617b      	str	r3, [r7, #20]
  __IO uint32_t tmpreg;

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	2220      	movs	r2, #32
 8004de8:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004df0:	b2db      	uxtb	r3, r3
 8004df2:	2b21      	cmp	r3, #33	@ 0x21
 8004df4:	d107      	bne.n	8004e06 <I2C_ITMasterCplt+0x32>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8004df6:	2101      	movs	r1, #1
 8004df8:	6878      	ldr	r0, [r7, #4]
 8004dfa:	f000 fe43 	bl	8005a84 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	2211      	movs	r2, #17
 8004e02:	631a      	str	r2, [r3, #48]	@ 0x30
 8004e04:	e00c      	b.n	8004e20 <I2C_ITMasterCplt+0x4c>
  }
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004e0c:	b2db      	uxtb	r3, r3
 8004e0e:	2b22      	cmp	r3, #34	@ 0x22
 8004e10:	d106      	bne.n	8004e20 <I2C_ITMasterCplt+0x4c>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8004e12:	2102      	movs	r1, #2
 8004e14:	6878      	ldr	r0, [r7, #4]
 8004e16:	f000 fe35 	bl	8005a84 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	2212      	movs	r2, #18
 8004e1e:	631a      	str	r2, [r3, #48]	@ 0x30
  {
    /* Do nothing */
  }

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	6859      	ldr	r1, [r3, #4]
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	681a      	ldr	r2, [r3, #0]
 8004e2a:	4b4c      	ldr	r3, [pc, #304]	@ (8004f5c <I2C_ITMasterCplt+0x188>)
 8004e2c:	400b      	ands	r3, r1
 8004e2e:	6053      	str	r3, [r2, #4]

  /* Reset handle parameters */
  hi2c->XferISR       = NULL;
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	2200      	movs	r2, #0
 8004e34:	635a      	str	r2, [r3, #52]	@ 0x34
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	4a49      	ldr	r2, [pc, #292]	@ (8004f60 <I2C_ITMasterCplt+0x18c>)
 8004e3a:	62da      	str	r2, [r3, #44]	@ 0x2c

  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET)
 8004e3c:	697b      	ldr	r3, [r7, #20]
 8004e3e:	f003 0310 	and.w	r3, r3, #16
 8004e42:	2b00      	cmp	r3, #0
 8004e44:	d009      	beq.n	8004e5a <I2C_ITMasterCplt+0x86>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	2210      	movs	r2, #16
 8004e4c:	61da      	str	r2, [r3, #28]

    /* Set acknowledge error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004e52:	f043 0204 	orr.w	r2, r3, #4
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Fetch Last receive data if any */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) && (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET))
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004e60:	b2db      	uxtb	r3, r3
 8004e62:	2b60      	cmp	r3, #96	@ 0x60
 8004e64:	d10a      	bne.n	8004e7c <I2C_ITMasterCplt+0xa8>
 8004e66:	697b      	ldr	r3, [r7, #20]
 8004e68:	f003 0304 	and.w	r3, r3, #4
 8004e6c:	2b00      	cmp	r3, #0
 8004e6e:	d005      	beq.n	8004e7c <I2C_ITMasterCplt+0xa8>
  {
    /* Read data from RXDR */
    tmpreg = (uint8_t)hi2c->Instance->RXDR;
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e76:	b2db      	uxtb	r3, r3
 8004e78:	60fb      	str	r3, [r7, #12]
    UNUSED(tmpreg);
 8004e7a:	68fb      	ldr	r3, [r7, #12]
  }

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8004e7c:	6878      	ldr	r0, [r7, #4]
 8004e7e:	f000 faee 	bl	800545e <I2C_Flush_TXDR>

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004e86:	613b      	str	r3, [r7, #16]

  /* Call the corresponding callback to inform upper layer of End of Transfer */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) || (tmperror != HAL_I2C_ERROR_NONE))
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004e8e:	b2db      	uxtb	r3, r3
 8004e90:	2b60      	cmp	r3, #96	@ 0x60
 8004e92:	d002      	beq.n	8004e9a <I2C_ITMasterCplt+0xc6>
 8004e94:	693b      	ldr	r3, [r7, #16]
 8004e96:	2b00      	cmp	r3, #0
 8004e98:	d006      	beq.n	8004ea8 <I2C_ITMasterCplt+0xd4>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004e9e:	4619      	mov	r1, r3
 8004ea0:	6878      	ldr	r0, [r7, #4]
 8004ea2:	f000 f9c5 	bl	8005230 <I2C_ITError>
  }
  else
  {
    /* Nothing to do */
  }
}
 8004ea6:	e054      	b.n	8004f52 <I2C_ITMasterCplt+0x17e>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004eae:	b2db      	uxtb	r3, r3
 8004eb0:	2b21      	cmp	r3, #33	@ 0x21
 8004eb2:	d124      	bne.n	8004efe <I2C_ITMasterCplt+0x12a>
    hi2c->State = HAL_I2C_STATE_READY;
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	2220      	movs	r2, #32
 8004eb8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	2200      	movs	r2, #0
 8004ec0:	631a      	str	r2, [r3, #48]	@ 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004ec8:	b2db      	uxtb	r3, r3
 8004eca:	2b40      	cmp	r3, #64	@ 0x40
 8004ecc:	d10b      	bne.n	8004ee6 <I2C_ITMasterCplt+0x112>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	2200      	movs	r2, #0
 8004ed2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      __HAL_UNLOCK(hi2c);
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	2200      	movs	r2, #0
 8004eda:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_MemTxCpltCallback(hi2c);
 8004ede:	6878      	ldr	r0, [r7, #4]
 8004ee0:	f7ff f9b4 	bl	800424c <HAL_I2C_MemTxCpltCallback>
}
 8004ee4:	e035      	b.n	8004f52 <I2C_ITMasterCplt+0x17e>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	2200      	movs	r2, #0
 8004eea:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      __HAL_UNLOCK(hi2c);
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	2200      	movs	r2, #0
 8004ef2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8004ef6:	6878      	ldr	r0, [r7, #4]
 8004ef8:	f7ff f968 	bl	80041cc <HAL_I2C_MasterTxCpltCallback>
}
 8004efc:	e029      	b.n	8004f52 <I2C_ITMasterCplt+0x17e>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004f04:	b2db      	uxtb	r3, r3
 8004f06:	2b22      	cmp	r3, #34	@ 0x22
 8004f08:	d123      	bne.n	8004f52 <I2C_ITMasterCplt+0x17e>
    hi2c->State = HAL_I2C_STATE_READY;
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	2220      	movs	r2, #32
 8004f0e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	2200      	movs	r2, #0
 8004f16:	631a      	str	r2, [r3, #48]	@ 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004f1e:	b2db      	uxtb	r3, r3
 8004f20:	2b40      	cmp	r3, #64	@ 0x40
 8004f22:	d10b      	bne.n	8004f3c <I2C_ITMasterCplt+0x168>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	2200      	movs	r2, #0
 8004f28:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      __HAL_UNLOCK(hi2c);
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	2200      	movs	r2, #0
 8004f30:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_MemRxCpltCallback(hi2c);
 8004f34:	6878      	ldr	r0, [r7, #4]
 8004f36:	f7fd f86b 	bl	8002010 <HAL_I2C_MemRxCpltCallback>
}
 8004f3a:	e00a      	b.n	8004f52 <I2C_ITMasterCplt+0x17e>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	2200      	movs	r2, #0
 8004f40:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      __HAL_UNLOCK(hi2c);
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	2200      	movs	r2, #0
 8004f48:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8004f4c:	6878      	ldr	r0, [r7, #4]
 8004f4e:	f7ff f947 	bl	80041e0 <HAL_I2C_MasterRxCpltCallback>
}
 8004f52:	bf00      	nop
 8004f54:	3718      	adds	r7, #24
 8004f56:	46bd      	mov	sp, r7
 8004f58:	bd80      	pop	{r7, pc}
 8004f5a:	bf00      	nop
 8004f5c:	fe00e800 	.word	0xfe00e800
 8004f60:	ffff0000 	.word	0xffff0000

08004f64 <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8004f64:	b580      	push	{r7, lr}
 8004f66:	b086      	sub	sp, #24
 8004f68:	af00      	add	r7, sp, #0
 8004f6a:	6078      	str	r0, [r7, #4]
 8004f6c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 8004f76:	683b      	ldr	r3, [r7, #0]
 8004f78:	617b      	str	r3, [r7, #20]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004f80:	73fb      	strb	r3, [r7, #15]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	2220      	movs	r2, #32
 8004f88:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8004f8a:	7bfb      	ldrb	r3, [r7, #15]
 8004f8c:	2b21      	cmp	r3, #33	@ 0x21
 8004f8e:	d002      	beq.n	8004f96 <I2C_ITSlaveCplt+0x32>
 8004f90:	7bfb      	ldrb	r3, [r7, #15]
 8004f92:	2b29      	cmp	r3, #41	@ 0x29
 8004f94:	d108      	bne.n	8004fa8 <I2C_ITSlaveCplt+0x44>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 8004f96:	f248 0101 	movw	r1, #32769	@ 0x8001
 8004f9a:	6878      	ldr	r0, [r7, #4]
 8004f9c:	f000 fd72 	bl	8005a84 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	2221      	movs	r2, #33	@ 0x21
 8004fa4:	631a      	str	r2, [r3, #48]	@ 0x30
 8004fa6:	e019      	b.n	8004fdc <I2C_ITSlaveCplt+0x78>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8004fa8:	7bfb      	ldrb	r3, [r7, #15]
 8004faa:	2b22      	cmp	r3, #34	@ 0x22
 8004fac:	d002      	beq.n	8004fb4 <I2C_ITSlaveCplt+0x50>
 8004fae:	7bfb      	ldrb	r3, [r7, #15]
 8004fb0:	2b2a      	cmp	r3, #42	@ 0x2a
 8004fb2:	d108      	bne.n	8004fc6 <I2C_ITSlaveCplt+0x62>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 8004fb4:	f248 0102 	movw	r1, #32770	@ 0x8002
 8004fb8:	6878      	ldr	r0, [r7, #4]
 8004fba:	f000 fd63 	bl	8005a84 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	2222      	movs	r2, #34	@ 0x22
 8004fc2:	631a      	str	r2, [r3, #48]	@ 0x30
 8004fc4:	e00a      	b.n	8004fdc <I2C_ITSlaveCplt+0x78>
  }
  else if (tmpstate == HAL_I2C_STATE_LISTEN)
 8004fc6:	7bfb      	ldrb	r3, [r7, #15]
 8004fc8:	2b28      	cmp	r3, #40	@ 0x28
 8004fca:	d107      	bne.n	8004fdc <I2C_ITSlaveCplt+0x78>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT | I2C_XFER_RX_IT);
 8004fcc:	f248 0103 	movw	r1, #32771	@ 0x8003
 8004fd0:	6878      	ldr	r0, [r7, #4]
 8004fd2:	f000 fd57 	bl	8005a84 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_NONE;
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	2200      	movs	r2, #0
 8004fda:	631a      	str	r2, [r3, #48]	@ 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	685a      	ldr	r2, [r3, #4]
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004fea:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	6859      	ldr	r1, [r3, #4]
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	681a      	ldr	r2, [r3, #0]
 8004ff6:	4b62      	ldr	r3, [pc, #392]	@ (8005180 <I2C_ITSlaveCplt+0x21c>)
 8004ff8:	400b      	ands	r3, r1
 8004ffa:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8004ffc:	6878      	ldr	r0, [r7, #4]
 8004ffe:	f000 fa2e 	bl	800545e <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8005002:	693b      	ldr	r3, [r7, #16]
 8005004:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005008:	2b00      	cmp	r3, #0
 800500a:	d013      	beq.n	8005034 <I2C_ITSlaveCplt+0xd0>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	681a      	ldr	r2, [r3, #0]
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800501a:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005020:	2b00      	cmp	r3, #0
 8005022:	d01f      	beq.n	8005064 <I2C_ITSlaveCplt+0x100>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	685b      	ldr	r3, [r3, #4]
 800502c:	b29a      	uxth	r2, r3
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8005032:	e017      	b.n	8005064 <I2C_ITSlaveCplt+0x100>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8005034:	693b      	ldr	r3, [r7, #16]
 8005036:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800503a:	2b00      	cmp	r3, #0
 800503c:	d012      	beq.n	8005064 <I2C_ITSlaveCplt+0x100>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	681a      	ldr	r2, [r3, #0]
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800504c:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005052:	2b00      	cmp	r3, #0
 8005054:	d006      	beq.n	8005064 <I2C_ITSlaveCplt+0x100>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	685b      	ldr	r3, [r3, #4]
 800505e:	b29a      	uxth	r2, r3
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	855a      	strh	r2, [r3, #42]	@ 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 8005064:	697b      	ldr	r3, [r7, #20]
 8005066:	f003 0304 	and.w	r3, r3, #4
 800506a:	2b00      	cmp	r3, #0
 800506c:	d020      	beq.n	80050b0 <I2C_ITSlaveCplt+0x14c>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 800506e:	697b      	ldr	r3, [r7, #20]
 8005070:	f023 0304 	bic.w	r3, r3, #4
 8005074:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005080:	b2d2      	uxtb	r2, r2
 8005082:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005088:	1c5a      	adds	r2, r3, #1
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005092:	2b00      	cmp	r3, #0
 8005094:	d00c      	beq.n	80050b0 <I2C_ITSlaveCplt+0x14c>
    {
      hi2c->XferSize--;
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800509a:	3b01      	subs	r3, #1
 800509c:	b29a      	uxth	r2, r3
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80050a6:	b29b      	uxth	r3, r3
 80050a8:	3b01      	subs	r3, #1
 80050aa:	b29a      	uxth	r2, r3
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80050b4:	b29b      	uxth	r3, r3
 80050b6:	2b00      	cmp	r3, #0
 80050b8:	d005      	beq.n	80050c6 <I2C_ITSlaveCplt+0x162>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80050be:	f043 0204 	orr.w	r2, r3, #4
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	2200      	movs	r2, #0
 80050ca:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferISR = NULL;
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	2200      	movs	r2, #0
 80050d2:	635a      	str	r2, [r3, #52]	@ 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80050d8:	2b00      	cmp	r3, #0
 80050da:	d010      	beq.n	80050fe <I2C_ITSlaveCplt+0x19a>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80050e0:	4619      	mov	r1, r3
 80050e2:	6878      	ldr	r0, [r7, #4]
 80050e4:	f000 f8a4 	bl	8005230 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80050ee:	b2db      	uxtb	r3, r3
 80050f0:	2b28      	cmp	r3, #40	@ 0x28
 80050f2:	d141      	bne.n	8005178 <I2C_ITSlaveCplt+0x214>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 80050f4:	6979      	ldr	r1, [r7, #20]
 80050f6:	6878      	ldr	r0, [r7, #4]
 80050f8:	f000 f846 	bl	8005188 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80050fc:	e03c      	b.n	8005178 <I2C_ITSlaveCplt+0x214>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005102:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8005106:	d014      	beq.n	8005132 <I2C_ITSlaveCplt+0x1ce>
    I2C_ITSlaveSeqCplt(hi2c);
 8005108:	6878      	ldr	r0, [r7, #4]
 800510a:	f7ff fe06 	bl	8004d1a <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	4a1c      	ldr	r2, [pc, #112]	@ (8005184 <I2C_ITSlaveCplt+0x220>)
 8005112:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	2220      	movs	r2, #32
 8005118:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	2200      	movs	r2, #0
 8005120:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	2200      	movs	r2, #0
 8005126:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 800512a:	6878      	ldr	r0, [r7, #4]
 800512c:	f7ff f884 	bl	8004238 <HAL_I2C_ListenCpltCallback>
}
 8005130:	e022      	b.n	8005178 <I2C_ITSlaveCplt+0x214>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005138:	b2db      	uxtb	r3, r3
 800513a:	2b22      	cmp	r3, #34	@ 0x22
 800513c:	d10e      	bne.n	800515c <I2C_ITSlaveCplt+0x1f8>
    hi2c->State = HAL_I2C_STATE_READY;
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	2220      	movs	r2, #32
 8005142:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	2200      	movs	r2, #0
 800514a:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	2200      	movs	r2, #0
 8005150:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8005154:	6878      	ldr	r0, [r7, #4]
 8005156:	f7ff f857 	bl	8004208 <HAL_I2C_SlaveRxCpltCallback>
}
 800515a:	e00d      	b.n	8005178 <I2C_ITSlaveCplt+0x214>
    hi2c->State = HAL_I2C_STATE_READY;
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	2220      	movs	r2, #32
 8005160:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	2200      	movs	r2, #0
 8005168:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	2200      	movs	r2, #0
 800516e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8005172:	6878      	ldr	r0, [r7, #4]
 8005174:	f7ff f83e 	bl	80041f4 <HAL_I2C_SlaveTxCpltCallback>
}
 8005178:	bf00      	nop
 800517a:	3718      	adds	r7, #24
 800517c:	46bd      	mov	sp, r7
 800517e:	bd80      	pop	{r7, pc}
 8005180:	fe00e800 	.word	0xfe00e800
 8005184:	ffff0000 	.word	0xffff0000

08005188 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8005188:	b580      	push	{r7, lr}
 800518a:	b082      	sub	sp, #8
 800518c:	af00      	add	r7, sp, #0
 800518e:	6078      	str	r0, [r7, #4]
 8005190:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	4a25      	ldr	r2, [pc, #148]	@ (800522c <I2C_ITListenCplt+0xa4>)
 8005196:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	2200      	movs	r2, #0
 800519c:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	2220      	movs	r2, #32
 80051a2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	2200      	movs	r2, #0
 80051aa:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferISR = NULL;
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	2200      	movs	r2, #0
 80051b2:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 80051b4:	683b      	ldr	r3, [r7, #0]
 80051b6:	f003 0304 	and.w	r3, r3, #4
 80051ba:	2b00      	cmp	r3, #0
 80051bc:	d022      	beq.n	8005204 <I2C_ITListenCplt+0x7c>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80051c8:	b2d2      	uxtb	r2, r2
 80051ca:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80051d0:	1c5a      	adds	r2, r3, #1
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80051da:	2b00      	cmp	r3, #0
 80051dc:	d012      	beq.n	8005204 <I2C_ITListenCplt+0x7c>
    {
      hi2c->XferSize--;
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80051e2:	3b01      	subs	r3, #1
 80051e4:	b29a      	uxth	r2, r3
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80051ee:	b29b      	uxth	r3, r3
 80051f0:	3b01      	subs	r3, #1
 80051f2:	b29a      	uxth	r2, r3
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80051fc:	f043 0204 	orr.w	r2, r3, #4
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	645a      	str	r2, [r3, #68]	@ 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8005204:	f248 0103 	movw	r1, #32771	@ 0x8003
 8005208:	6878      	ldr	r0, [r7, #4]
 800520a:	f000 fc3b 	bl	8005a84 <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	2210      	movs	r2, #16
 8005214:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	2200      	movs	r2, #0
 800521a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 800521e:	6878      	ldr	r0, [r7, #4]
 8005220:	f7ff f80a 	bl	8004238 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 8005224:	bf00      	nop
 8005226:	3708      	adds	r7, #8
 8005228:	46bd      	mov	sp, r7
 800522a:	bd80      	pop	{r7, pc}
 800522c:	ffff0000 	.word	0xffff0000

08005230 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 8005230:	b580      	push	{r7, lr}
 8005232:	b084      	sub	sp, #16
 8005234:	af00      	add	r7, sp, #0
 8005236:	6078      	str	r0, [r7, #4]
 8005238:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005240:	73fb      	strb	r3, [r7, #15]

  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	2200      	movs	r2, #0
 8005246:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	4a6d      	ldr	r2, [pc, #436]	@ (8005404 <I2C_ITError+0x1d4>)
 800524e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->XferCount     = 0U;
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	2200      	movs	r2, #0
 8005254:	855a      	strh	r2, [r3, #42]	@ 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800525a:	683b      	ldr	r3, [r7, #0]
 800525c:	431a      	orrs	r2, r3
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 8005262:	7bfb      	ldrb	r3, [r7, #15]
 8005264:	2b28      	cmp	r3, #40	@ 0x28
 8005266:	d005      	beq.n	8005274 <I2C_ITError+0x44>
 8005268:	7bfb      	ldrb	r3, [r7, #15]
 800526a:	2b29      	cmp	r3, #41	@ 0x29
 800526c:	d002      	beq.n	8005274 <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 800526e:	7bfb      	ldrb	r3, [r7, #15]
 8005270:	2b2a      	cmp	r3, #42	@ 0x2a
 8005272:	d10b      	bne.n	800528c <I2C_ITError+0x5c>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8005274:	2103      	movs	r1, #3
 8005276:	6878      	ldr	r0, [r7, #4]
 8005278:	f000 fc04 	bl	8005a84 <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	2228      	movs	r2, #40	@ 0x28
 8005280:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	4a60      	ldr	r2, [pc, #384]	@ (8005408 <I2C_ITError+0x1d8>)
 8005288:	635a      	str	r2, [r3, #52]	@ 0x34
 800528a:	e030      	b.n	80052ee <I2C_ITError+0xbe>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 800528c:	f248 0103 	movw	r1, #32771	@ 0x8003
 8005290:	6878      	ldr	r0, [r7, #4]
 8005292:	f000 fbf7 	bl	8005a84 <I2C_Disable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8005296:	6878      	ldr	r0, [r7, #4]
 8005298:	f000 f8e1 	bl	800545e <I2C_Flush_TXDR>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80052a2:	b2db      	uxtb	r3, r3
 80052a4:	2b60      	cmp	r3, #96	@ 0x60
 80052a6:	d01f      	beq.n	80052e8 <I2C_ITError+0xb8>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	2220      	movs	r2, #32
 80052ac:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Check if a STOPF is detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	699b      	ldr	r3, [r3, #24]
 80052b6:	f003 0320 	and.w	r3, r3, #32
 80052ba:	2b20      	cmp	r3, #32
 80052bc:	d114      	bne.n	80052e8 <I2C_ITError+0xb8>
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	699b      	ldr	r3, [r3, #24]
 80052c4:	f003 0310 	and.w	r3, r3, #16
 80052c8:	2b10      	cmp	r3, #16
 80052ca:	d109      	bne.n	80052e0 <I2C_ITError+0xb0>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	2210      	movs	r2, #16
 80052d2:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80052d8:	f043 0204 	orr.w	r2, r3, #4
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	645a      	str	r2, [r3, #68]	@ 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	2220      	movs	r2, #32
 80052e6:	61da      	str	r2, [r3, #28]
      }

    }
    hi2c->XferISR       = NULL;
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	2200      	movs	r2, #0
 80052ec:	635a      	str	r2, [r3, #52]	@ 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80052f2:	60bb      	str	r3, [r7, #8]

  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80052f8:	2b00      	cmp	r3, #0
 80052fa:	d039      	beq.n	8005370 <I2C_ITError+0x140>
 80052fc:	68bb      	ldr	r3, [r7, #8]
 80052fe:	2b11      	cmp	r3, #17
 8005300:	d002      	beq.n	8005308 <I2C_ITError+0xd8>
 8005302:	68bb      	ldr	r3, [r7, #8]
 8005304:	2b21      	cmp	r3, #33	@ 0x21
 8005306:	d133      	bne.n	8005370 <I2C_ITError+0x140>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005312:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005316:	d107      	bne.n	8005328 <I2C_ITError+0xf8>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	681a      	ldr	r2, [r3, #0]
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8005326:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800532c:	4618      	mov	r0, r3
 800532e:	f7fe f9cf 	bl	80036d0 <HAL_DMA_GetState>
 8005332:	4603      	mov	r3, r0
 8005334:	2b01      	cmp	r3, #1
 8005336:	d017      	beq.n	8005368 <I2C_ITError+0x138>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800533c:	4a33      	ldr	r2, [pc, #204]	@ (800540c <I2C_ITError+0x1dc>)
 800533e:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	2200      	movs	r2, #0
 8005344:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800534c:	4618      	mov	r0, r3
 800534e:	f7fe f8cf 	bl	80034f0 <HAL_DMA_Abort_IT>
 8005352:	4603      	mov	r3, r0
 8005354:	2b00      	cmp	r3, #0
 8005356:	d04d      	beq.n	80053f4 <I2C_ITError+0x1c4>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800535c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800535e:	687a      	ldr	r2, [r7, #4]
 8005360:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8005362:	4610      	mov	r0, r2
 8005364:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8005366:	e045      	b.n	80053f4 <I2C_ITError+0x1c4>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8005368:	6878      	ldr	r0, [r7, #4]
 800536a:	f000 f851 	bl	8005410 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800536e:	e041      	b.n	80053f4 <I2C_ITError+0x1c4>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005374:	2b00      	cmp	r3, #0
 8005376:	d039      	beq.n	80053ec <I2C_ITError+0x1bc>
 8005378:	68bb      	ldr	r3, [r7, #8]
 800537a:	2b12      	cmp	r3, #18
 800537c:	d002      	beq.n	8005384 <I2C_ITError+0x154>
 800537e:	68bb      	ldr	r3, [r7, #8]
 8005380:	2b22      	cmp	r3, #34	@ 0x22
 8005382:	d133      	bne.n	80053ec <I2C_ITError+0x1bc>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800538e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005392:	d107      	bne.n	80053a4 <I2C_ITError+0x174>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	681a      	ldr	r2, [r3, #0]
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80053a2:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80053a8:	4618      	mov	r0, r3
 80053aa:	f7fe f991 	bl	80036d0 <HAL_DMA_GetState>
 80053ae:	4603      	mov	r3, r0
 80053b0:	2b01      	cmp	r3, #1
 80053b2:	d017      	beq.n	80053e4 <I2C_ITError+0x1b4>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80053b8:	4a14      	ldr	r2, [pc, #80]	@ (800540c <I2C_ITError+0x1dc>)
 80053ba:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	2200      	movs	r2, #0
 80053c0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80053c8:	4618      	mov	r0, r3
 80053ca:	f7fe f891 	bl	80034f0 <HAL_DMA_Abort_IT>
 80053ce:	4603      	mov	r3, r0
 80053d0:	2b00      	cmp	r3, #0
 80053d2:	d011      	beq.n	80053f8 <I2C_ITError+0x1c8>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80053d8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80053da:	687a      	ldr	r2, [r7, #4]
 80053dc:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80053de:	4610      	mov	r0, r2
 80053e0:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80053e2:	e009      	b.n	80053f8 <I2C_ITError+0x1c8>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 80053e4:	6878      	ldr	r0, [r7, #4]
 80053e6:	f000 f813 	bl	8005410 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80053ea:	e005      	b.n	80053f8 <I2C_ITError+0x1c8>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 80053ec:	6878      	ldr	r0, [r7, #4]
 80053ee:	f000 f80f 	bl	8005410 <I2C_TreatErrorCallback>
  }
}
 80053f2:	e002      	b.n	80053fa <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80053f4:	bf00      	nop
 80053f6:	e000      	b.n	80053fa <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80053f8:	bf00      	nop
}
 80053fa:	bf00      	nop
 80053fc:	3710      	adds	r7, #16
 80053fe:	46bd      	mov	sp, r7
 8005400:	bd80      	pop	{r7, pc}
 8005402:	bf00      	nop
 8005404:	ffff0000 	.word	0xffff0000
 8005408:	08004289 	.word	0x08004289
 800540c:	0800556b 	.word	0x0800556b

08005410 <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8005410:	b580      	push	{r7, lr}
 8005412:	b082      	sub	sp, #8
 8005414:	af00      	add	r7, sp, #0
 8005416:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800541e:	b2db      	uxtb	r3, r3
 8005420:	2b60      	cmp	r3, #96	@ 0x60
 8005422:	d10e      	bne.n	8005442 <I2C_TreatErrorCallback+0x32>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	2220      	movs	r2, #32
 8005428:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	2200      	movs	r2, #0
 8005430:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	2200      	movs	r2, #0
 8005436:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800543a:	6878      	ldr	r0, [r7, #4]
 800543c:	f7fe ff1a 	bl	8004274 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8005440:	e009      	b.n	8005456 <I2C_TreatErrorCallback+0x46>
    hi2c->PreviousState = I2C_STATE_NONE;
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	2200      	movs	r2, #0
 8005446:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	2200      	movs	r2, #0
 800544c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_ErrorCallback(hi2c);
 8005450:	6878      	ldr	r0, [r7, #4]
 8005452:	f7fe ff05 	bl	8004260 <HAL_I2C_ErrorCallback>
}
 8005456:	bf00      	nop
 8005458:	3708      	adds	r7, #8
 800545a:	46bd      	mov	sp, r7
 800545c:	bd80      	pop	{r7, pc}

0800545e <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800545e:	b480      	push	{r7}
 8005460:	b083      	sub	sp, #12
 8005462:	af00      	add	r7, sp, #0
 8005464:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	699b      	ldr	r3, [r3, #24]
 800546c:	f003 0302 	and.w	r3, r3, #2
 8005470:	2b02      	cmp	r3, #2
 8005472:	d103      	bne.n	800547c <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	2200      	movs	r2, #0
 800547a:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	699b      	ldr	r3, [r3, #24]
 8005482:	f003 0301 	and.w	r3, r3, #1
 8005486:	2b01      	cmp	r3, #1
 8005488:	d007      	beq.n	800549a <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	699a      	ldr	r2, [r3, #24]
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	f042 0201 	orr.w	r2, r2, #1
 8005498:	619a      	str	r2, [r3, #24]
  }
}
 800549a:	bf00      	nop
 800549c:	370c      	adds	r7, #12
 800549e:	46bd      	mov	sp, r7
 80054a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054a4:	4770      	bx	lr

080054a6 <I2C_DMAMasterReceiveCplt>:
  * @brief DMA I2C master receive process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAMasterReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80054a6:	b580      	push	{r7, lr}
 80054a8:	b084      	sub	sp, #16
 80054aa:	af00      	add	r7, sp, #0
 80054ac:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80054b2:	60fb      	str	r3, [r7, #12]

  /* Disable DMA Request */
  hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 80054b4:	68fb      	ldr	r3, [r7, #12]
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	681a      	ldr	r2, [r3, #0]
 80054ba:	68fb      	ldr	r3, [r7, #12]
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80054c2:	601a      	str	r2, [r3, #0]

  /* If last transfer, enable STOP interrupt */
  if (hi2c->XferCount == 0U)
 80054c4:	68fb      	ldr	r3, [r7, #12]
 80054c6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80054c8:	b29b      	uxth	r3, r3
 80054ca:	2b00      	cmp	r3, #0
 80054cc:	d104      	bne.n	80054d8 <I2C_DMAMasterReceiveCplt+0x32>
  {
    /* Enable STOP interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 80054ce:	2120      	movs	r1, #32
 80054d0:	68f8      	ldr	r0, [r7, #12]
 80054d2:	f000 fa53 	bl	800597c <I2C_Enable_IRQ>
    {
      /* Enable TC interrupts */
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
    }
  }
}
 80054d6:	e02d      	b.n	8005534 <I2C_DMAMasterReceiveCplt+0x8e>
    hi2c->pBuffPtr += hi2c->XferSize;
 80054d8:	68fb      	ldr	r3, [r7, #12]
 80054da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80054dc:	68fa      	ldr	r2, [r7, #12]
 80054de:	8d12      	ldrh	r2, [r2, #40]	@ 0x28
 80054e0:	441a      	add	r2, r3
 80054e2:	68fb      	ldr	r3, [r7, #12]
 80054e4:	625a      	str	r2, [r3, #36]	@ 0x24
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80054e6:	68fb      	ldr	r3, [r7, #12]
 80054e8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80054ea:	b29b      	uxth	r3, r3
 80054ec:	2bff      	cmp	r3, #255	@ 0xff
 80054ee:	d903      	bls.n	80054f8 <I2C_DMAMasterReceiveCplt+0x52>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80054f0:	68fb      	ldr	r3, [r7, #12]
 80054f2:	22ff      	movs	r2, #255	@ 0xff
 80054f4:	851a      	strh	r2, [r3, #40]	@ 0x28
 80054f6:	e004      	b.n	8005502 <I2C_DMAMasterReceiveCplt+0x5c>
      hi2c->XferSize = hi2c->XferCount;
 80054f8:	68fb      	ldr	r3, [r7, #12]
 80054fa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80054fc:	b29a      	uxth	r2, r3
 80054fe:	68fb      	ldr	r3, [r7, #12]
 8005500:	851a      	strh	r2, [r3, #40]	@ 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)hi2c->pBuffPtr,
 8005502:	68fb      	ldr	r3, [r7, #12]
 8005504:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 8005506:	68fb      	ldr	r3, [r7, #12]
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	3324      	adds	r3, #36	@ 0x24
 800550c:	4619      	mov	r1, r3
 800550e:	68fb      	ldr	r3, [r7, #12]
 8005510:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005512:	461a      	mov	r2, r3
                         hi2c->XferSize) != HAL_OK)
 8005514:	68fb      	ldr	r3, [r7, #12]
 8005516:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)hi2c->pBuffPtr,
 8005518:	f7fd ff4c 	bl	80033b4 <HAL_DMA_Start_IT>
 800551c:	4603      	mov	r3, r0
 800551e:	2b00      	cmp	r3, #0
 8005520:	d004      	beq.n	800552c <I2C_DMAMasterReceiveCplt+0x86>
      I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 8005522:	2110      	movs	r1, #16
 8005524:	68f8      	ldr	r0, [r7, #12]
 8005526:	f7ff fe83 	bl	8005230 <I2C_ITError>
}
 800552a:	e003      	b.n	8005534 <I2C_DMAMasterReceiveCplt+0x8e>
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
 800552c:	2140      	movs	r1, #64	@ 0x40
 800552e:	68f8      	ldr	r0, [r7, #12]
 8005530:	f000 fa24 	bl	800597c <I2C_Enable_IRQ>
}
 8005534:	bf00      	nop
 8005536:	3710      	adds	r7, #16
 8005538:	46bd      	mov	sp, r7
 800553a:	bd80      	pop	{r7, pc}

0800553c <I2C_DMAError>:
  * @brief  DMA I2C communication error callback.
  * @param hdma DMA handle
  * @retval None
  */
static void I2C_DMAError(DMA_HandleTypeDef *hdma)
{
 800553c:	b580      	push	{r7, lr}
 800553e:	b084      	sub	sp, #16
 8005540:	af00      	add	r7, sp, #0
 8005542:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005548:	60fb      	str	r3, [r7, #12]

  /* Disable Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 800554a:	68fb      	ldr	r3, [r7, #12]
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	685a      	ldr	r2, [r3, #4]
 8005550:	68fb      	ldr	r3, [r7, #12]
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8005558:	605a      	str	r2, [r3, #4]

  /* Call the corresponding callback to inform upper layer of End of Transfer */
  I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 800555a:	2110      	movs	r1, #16
 800555c:	68f8      	ldr	r0, [r7, #12]
 800555e:	f7ff fe67 	bl	8005230 <I2C_ITError>
}
 8005562:	bf00      	nop
 8005564:	3710      	adds	r7, #16
 8005566:	46bd      	mov	sp, r7
 8005568:	bd80      	pop	{r7, pc}

0800556a <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 800556a:	b580      	push	{r7, lr}
 800556c:	b084      	sub	sp, #16
 800556e:	af00      	add	r7, sp, #0
 8005570:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005576:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 8005578:	68fb      	ldr	r3, [r7, #12]
 800557a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800557c:	2b00      	cmp	r3, #0
 800557e:	d003      	beq.n	8005588 <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8005580:	68fb      	ldr	r3, [r7, #12]
 8005582:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005584:	2200      	movs	r2, #0
 8005586:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  if (hi2c->hdmarx != NULL)
 8005588:	68fb      	ldr	r3, [r7, #12]
 800558a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800558c:	2b00      	cmp	r3, #0
 800558e:	d003      	beq.n	8005598 <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8005590:	68fb      	ldr	r3, [r7, #12]
 8005592:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005594:	2200      	movs	r2, #0
 8005596:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  I2C_TreatErrorCallback(hi2c);
 8005598:	68f8      	ldr	r0, [r7, #12]
 800559a:	f7ff ff39 	bl	8005410 <I2C_TreatErrorCallback>
}
 800559e:	bf00      	nop
 80055a0:	3710      	adds	r7, #16
 80055a2:	46bd      	mov	sp, r7
 80055a4:	bd80      	pop	{r7, pc}

080055a6 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80055a6:	b580      	push	{r7, lr}
 80055a8:	b084      	sub	sp, #16
 80055aa:	af00      	add	r7, sp, #0
 80055ac:	60f8      	str	r0, [r7, #12]
 80055ae:	60b9      	str	r1, [r7, #8]
 80055b0:	603b      	str	r3, [r7, #0]
 80055b2:	4613      	mov	r3, r2
 80055b4:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80055b6:	e031      	b.n	800561c <I2C_WaitOnFlagUntilTimeout+0x76>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80055b8:	683b      	ldr	r3, [r7, #0]
 80055ba:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80055be:	d02d      	beq.n	800561c <I2C_WaitOnFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80055c0:	f7fd fd2e 	bl	8003020 <HAL_GetTick>
 80055c4:	4602      	mov	r2, r0
 80055c6:	69bb      	ldr	r3, [r7, #24]
 80055c8:	1ad3      	subs	r3, r2, r3
 80055ca:	683a      	ldr	r2, [r7, #0]
 80055cc:	429a      	cmp	r2, r3
 80055ce:	d302      	bcc.n	80055d6 <I2C_WaitOnFlagUntilTimeout+0x30>
 80055d0:	683b      	ldr	r3, [r7, #0]
 80055d2:	2b00      	cmp	r3, #0
 80055d4:	d122      	bne.n	800561c <I2C_WaitOnFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80055d6:	68fb      	ldr	r3, [r7, #12]
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	699a      	ldr	r2, [r3, #24]
 80055dc:	68bb      	ldr	r3, [r7, #8]
 80055de:	4013      	ands	r3, r2
 80055e0:	68ba      	ldr	r2, [r7, #8]
 80055e2:	429a      	cmp	r2, r3
 80055e4:	bf0c      	ite	eq
 80055e6:	2301      	moveq	r3, #1
 80055e8:	2300      	movne	r3, #0
 80055ea:	b2db      	uxtb	r3, r3
 80055ec:	461a      	mov	r2, r3
 80055ee:	79fb      	ldrb	r3, [r7, #7]
 80055f0:	429a      	cmp	r2, r3
 80055f2:	d113      	bne.n	800561c <I2C_WaitOnFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80055f4:	68fb      	ldr	r3, [r7, #12]
 80055f6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80055f8:	f043 0220 	orr.w	r2, r3, #32
 80055fc:	68fb      	ldr	r3, [r7, #12]
 80055fe:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8005600:	68fb      	ldr	r3, [r7, #12]
 8005602:	2220      	movs	r2, #32
 8005604:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8005608:	68fb      	ldr	r3, [r7, #12]
 800560a:	2200      	movs	r2, #0
 800560c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005610:	68fb      	ldr	r3, [r7, #12]
 8005612:	2200      	movs	r2, #0
 8005614:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 8005618:	2301      	movs	r3, #1
 800561a:	e00f      	b.n	800563c <I2C_WaitOnFlagUntilTimeout+0x96>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800561c:	68fb      	ldr	r3, [r7, #12]
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	699a      	ldr	r2, [r3, #24]
 8005622:	68bb      	ldr	r3, [r7, #8]
 8005624:	4013      	ands	r3, r2
 8005626:	68ba      	ldr	r2, [r7, #8]
 8005628:	429a      	cmp	r2, r3
 800562a:	bf0c      	ite	eq
 800562c:	2301      	moveq	r3, #1
 800562e:	2300      	movne	r3, #0
 8005630:	b2db      	uxtb	r3, r3
 8005632:	461a      	mov	r2, r3
 8005634:	79fb      	ldrb	r3, [r7, #7]
 8005636:	429a      	cmp	r2, r3
 8005638:	d0be      	beq.n	80055b8 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800563a:	2300      	movs	r3, #0
}
 800563c:	4618      	mov	r0, r3
 800563e:	3710      	adds	r7, #16
 8005640:	46bd      	mov	sp, r7
 8005642:	bd80      	pop	{r7, pc}

08005644 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8005644:	b580      	push	{r7, lr}
 8005646:	b084      	sub	sp, #16
 8005648:	af00      	add	r7, sp, #0
 800564a:	60f8      	str	r0, [r7, #12]
 800564c:	60b9      	str	r1, [r7, #8]
 800564e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8005650:	e033      	b.n	80056ba <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8005652:	687a      	ldr	r2, [r7, #4]
 8005654:	68b9      	ldr	r1, [r7, #8]
 8005656:	68f8      	ldr	r0, [r7, #12]
 8005658:	f000 f87e 	bl	8005758 <I2C_IsErrorOccurred>
 800565c:	4603      	mov	r3, r0
 800565e:	2b00      	cmp	r3, #0
 8005660:	d001      	beq.n	8005666 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8005662:	2301      	movs	r3, #1
 8005664:	e031      	b.n	80056ca <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005666:	68bb      	ldr	r3, [r7, #8]
 8005668:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800566c:	d025      	beq.n	80056ba <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800566e:	f7fd fcd7 	bl	8003020 <HAL_GetTick>
 8005672:	4602      	mov	r2, r0
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	1ad3      	subs	r3, r2, r3
 8005678:	68ba      	ldr	r2, [r7, #8]
 800567a:	429a      	cmp	r2, r3
 800567c:	d302      	bcc.n	8005684 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 800567e:	68bb      	ldr	r3, [r7, #8]
 8005680:	2b00      	cmp	r3, #0
 8005682:	d11a      	bne.n	80056ba <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8005684:	68fb      	ldr	r3, [r7, #12]
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	699b      	ldr	r3, [r3, #24]
 800568a:	f003 0302 	and.w	r3, r3, #2
 800568e:	2b02      	cmp	r3, #2
 8005690:	d013      	beq.n	80056ba <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005692:	68fb      	ldr	r3, [r7, #12]
 8005694:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005696:	f043 0220 	orr.w	r2, r3, #32
 800569a:	68fb      	ldr	r3, [r7, #12]
 800569c:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800569e:	68fb      	ldr	r3, [r7, #12]
 80056a0:	2220      	movs	r2, #32
 80056a2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80056a6:	68fb      	ldr	r3, [r7, #12]
 80056a8:	2200      	movs	r2, #0
 80056aa:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80056ae:	68fb      	ldr	r3, [r7, #12]
 80056b0:	2200      	movs	r2, #0
 80056b2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 80056b6:	2301      	movs	r3, #1
 80056b8:	e007      	b.n	80056ca <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80056ba:	68fb      	ldr	r3, [r7, #12]
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	699b      	ldr	r3, [r3, #24]
 80056c0:	f003 0302 	and.w	r3, r3, #2
 80056c4:	2b02      	cmp	r3, #2
 80056c6:	d1c4      	bne.n	8005652 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80056c8:	2300      	movs	r3, #0
}
 80056ca:	4618      	mov	r0, r3
 80056cc:	3710      	adds	r7, #16
 80056ce:	46bd      	mov	sp, r7
 80056d0:	bd80      	pop	{r7, pc}

080056d2 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80056d2:	b580      	push	{r7, lr}
 80056d4:	b084      	sub	sp, #16
 80056d6:	af00      	add	r7, sp, #0
 80056d8:	60f8      	str	r0, [r7, #12]
 80056da:	60b9      	str	r1, [r7, #8]
 80056dc:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80056de:	e02f      	b.n	8005740 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80056e0:	687a      	ldr	r2, [r7, #4]
 80056e2:	68b9      	ldr	r1, [r7, #8]
 80056e4:	68f8      	ldr	r0, [r7, #12]
 80056e6:	f000 f837 	bl	8005758 <I2C_IsErrorOccurred>
 80056ea:	4603      	mov	r3, r0
 80056ec:	2b00      	cmp	r3, #0
 80056ee:	d001      	beq.n	80056f4 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80056f0:	2301      	movs	r3, #1
 80056f2:	e02d      	b.n	8005750 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80056f4:	f7fd fc94 	bl	8003020 <HAL_GetTick>
 80056f8:	4602      	mov	r2, r0
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	1ad3      	subs	r3, r2, r3
 80056fe:	68ba      	ldr	r2, [r7, #8]
 8005700:	429a      	cmp	r2, r3
 8005702:	d302      	bcc.n	800570a <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8005704:	68bb      	ldr	r3, [r7, #8]
 8005706:	2b00      	cmp	r3, #0
 8005708:	d11a      	bne.n	8005740 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 800570a:	68fb      	ldr	r3, [r7, #12]
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	699b      	ldr	r3, [r3, #24]
 8005710:	f003 0320 	and.w	r3, r3, #32
 8005714:	2b20      	cmp	r3, #32
 8005716:	d013      	beq.n	8005740 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005718:	68fb      	ldr	r3, [r7, #12]
 800571a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800571c:	f043 0220 	orr.w	r2, r3, #32
 8005720:	68fb      	ldr	r3, [r7, #12]
 8005722:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8005724:	68fb      	ldr	r3, [r7, #12]
 8005726:	2220      	movs	r2, #32
 8005728:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800572c:	68fb      	ldr	r3, [r7, #12]
 800572e:	2200      	movs	r2, #0
 8005730:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005734:	68fb      	ldr	r3, [r7, #12]
 8005736:	2200      	movs	r2, #0
 8005738:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 800573c:	2301      	movs	r3, #1
 800573e:	e007      	b.n	8005750 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005740:	68fb      	ldr	r3, [r7, #12]
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	699b      	ldr	r3, [r3, #24]
 8005746:	f003 0320 	and.w	r3, r3, #32
 800574a:	2b20      	cmp	r3, #32
 800574c:	d1c8      	bne.n	80056e0 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800574e:	2300      	movs	r3, #0
}
 8005750:	4618      	mov	r0, r3
 8005752:	3710      	adds	r7, #16
 8005754:	46bd      	mov	sp, r7
 8005756:	bd80      	pop	{r7, pc}

08005758 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005758:	b580      	push	{r7, lr}
 800575a:	b08a      	sub	sp, #40	@ 0x28
 800575c:	af00      	add	r7, sp, #0
 800575e:	60f8      	str	r0, [r7, #12]
 8005760:	60b9      	str	r1, [r7, #8]
 8005762:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005764:	2300      	movs	r3, #0
 8005766:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 800576a:	68fb      	ldr	r3, [r7, #12]
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	699b      	ldr	r3, [r3, #24]
 8005770:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8005772:	2300      	movs	r3, #0
 8005774:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800577a:	69bb      	ldr	r3, [r7, #24]
 800577c:	f003 0310 	and.w	r3, r3, #16
 8005780:	2b00      	cmp	r3, #0
 8005782:	d068      	beq.n	8005856 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005784:	68fb      	ldr	r3, [r7, #12]
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	2210      	movs	r2, #16
 800578a:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800578c:	e049      	b.n	8005822 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800578e:	68bb      	ldr	r3, [r7, #8]
 8005790:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005794:	d045      	beq.n	8005822 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8005796:	f7fd fc43 	bl	8003020 <HAL_GetTick>
 800579a:	4602      	mov	r2, r0
 800579c:	69fb      	ldr	r3, [r7, #28]
 800579e:	1ad3      	subs	r3, r2, r3
 80057a0:	68ba      	ldr	r2, [r7, #8]
 80057a2:	429a      	cmp	r2, r3
 80057a4:	d302      	bcc.n	80057ac <I2C_IsErrorOccurred+0x54>
 80057a6:	68bb      	ldr	r3, [r7, #8]
 80057a8:	2b00      	cmp	r3, #0
 80057aa:	d13a      	bne.n	8005822 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80057ac:	68fb      	ldr	r3, [r7, #12]
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	685b      	ldr	r3, [r3, #4]
 80057b2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80057b6:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 80057b8:	68fb      	ldr	r3, [r7, #12]
 80057ba:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80057be:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80057c0:	68fb      	ldr	r3, [r7, #12]
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	699b      	ldr	r3, [r3, #24]
 80057c6:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80057ca:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80057ce:	d121      	bne.n	8005814 <I2C_IsErrorOccurred+0xbc>
 80057d0:	697b      	ldr	r3, [r7, #20]
 80057d2:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80057d6:	d01d      	beq.n	8005814 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 80057d8:	7cfb      	ldrb	r3, [r7, #19]
 80057da:	2b20      	cmp	r3, #32
 80057dc:	d01a      	beq.n	8005814 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80057de:	68fb      	ldr	r3, [r7, #12]
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	685a      	ldr	r2, [r3, #4]
 80057e4:	68fb      	ldr	r3, [r7, #12]
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80057ec:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 80057ee:	f7fd fc17 	bl	8003020 <HAL_GetTick>
 80057f2:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80057f4:	e00e      	b.n	8005814 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80057f6:	f7fd fc13 	bl	8003020 <HAL_GetTick>
 80057fa:	4602      	mov	r2, r0
 80057fc:	69fb      	ldr	r3, [r7, #28]
 80057fe:	1ad3      	subs	r3, r2, r3
 8005800:	2b19      	cmp	r3, #25
 8005802:	d907      	bls.n	8005814 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8005804:	6a3b      	ldr	r3, [r7, #32]
 8005806:	f043 0320 	orr.w	r3, r3, #32
 800580a:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 800580c:	2301      	movs	r3, #1
 800580e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 8005812:	e006      	b.n	8005822 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005814:	68fb      	ldr	r3, [r7, #12]
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	699b      	ldr	r3, [r3, #24]
 800581a:	f003 0320 	and.w	r3, r3, #32
 800581e:	2b20      	cmp	r3, #32
 8005820:	d1e9      	bne.n	80057f6 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8005822:	68fb      	ldr	r3, [r7, #12]
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	699b      	ldr	r3, [r3, #24]
 8005828:	f003 0320 	and.w	r3, r3, #32
 800582c:	2b20      	cmp	r3, #32
 800582e:	d003      	beq.n	8005838 <I2C_IsErrorOccurred+0xe0>
 8005830:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005834:	2b00      	cmp	r3, #0
 8005836:	d0aa      	beq.n	800578e <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8005838:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800583c:	2b00      	cmp	r3, #0
 800583e:	d103      	bne.n	8005848 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005840:	68fb      	ldr	r3, [r7, #12]
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	2220      	movs	r2, #32
 8005846:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8005848:	6a3b      	ldr	r3, [r7, #32]
 800584a:	f043 0304 	orr.w	r3, r3, #4
 800584e:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8005850:	2301      	movs	r3, #1
 8005852:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8005856:	68fb      	ldr	r3, [r7, #12]
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	699b      	ldr	r3, [r3, #24]
 800585c:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 800585e:	69bb      	ldr	r3, [r7, #24]
 8005860:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005864:	2b00      	cmp	r3, #0
 8005866:	d00b      	beq.n	8005880 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8005868:	6a3b      	ldr	r3, [r7, #32]
 800586a:	f043 0301 	orr.w	r3, r3, #1
 800586e:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8005870:	68fb      	ldr	r3, [r7, #12]
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8005878:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800587a:	2301      	movs	r3, #1
 800587c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8005880:	69bb      	ldr	r3, [r7, #24]
 8005882:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005886:	2b00      	cmp	r3, #0
 8005888:	d00b      	beq.n	80058a2 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 800588a:	6a3b      	ldr	r3, [r7, #32]
 800588c:	f043 0308 	orr.w	r3, r3, #8
 8005890:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8005892:	68fb      	ldr	r3, [r7, #12]
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800589a:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800589c:	2301      	movs	r3, #1
 800589e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80058a2:	69bb      	ldr	r3, [r7, #24]
 80058a4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80058a8:	2b00      	cmp	r3, #0
 80058aa:	d00b      	beq.n	80058c4 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 80058ac:	6a3b      	ldr	r3, [r7, #32]
 80058ae:	f043 0302 	orr.w	r3, r3, #2
 80058b2:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80058b4:	68fb      	ldr	r3, [r7, #12]
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80058bc:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80058be:	2301      	movs	r3, #1
 80058c0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 80058c4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80058c8:	2b00      	cmp	r3, #0
 80058ca:	d01c      	beq.n	8005906 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80058cc:	68f8      	ldr	r0, [r7, #12]
 80058ce:	f7ff fdc6 	bl	800545e <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80058d2:	68fb      	ldr	r3, [r7, #12]
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	6859      	ldr	r1, [r3, #4]
 80058d8:	68fb      	ldr	r3, [r7, #12]
 80058da:	681a      	ldr	r2, [r3, #0]
 80058dc:	4b0d      	ldr	r3, [pc, #52]	@ (8005914 <I2C_IsErrorOccurred+0x1bc>)
 80058de:	400b      	ands	r3, r1
 80058e0:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 80058e2:	68fb      	ldr	r3, [r7, #12]
 80058e4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80058e6:	6a3b      	ldr	r3, [r7, #32]
 80058e8:	431a      	orrs	r2, r3
 80058ea:	68fb      	ldr	r3, [r7, #12]
 80058ec:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80058ee:	68fb      	ldr	r3, [r7, #12]
 80058f0:	2220      	movs	r2, #32
 80058f2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80058f6:	68fb      	ldr	r3, [r7, #12]
 80058f8:	2200      	movs	r2, #0
 80058fa:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80058fe:	68fb      	ldr	r3, [r7, #12]
 8005900:	2200      	movs	r2, #0
 8005902:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 8005906:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 800590a:	4618      	mov	r0, r3
 800590c:	3728      	adds	r7, #40	@ 0x28
 800590e:	46bd      	mov	sp, r7
 8005910:	bd80      	pop	{r7, pc}
 8005912:	bf00      	nop
 8005914:	fe00e800 	.word	0xfe00e800

08005918 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8005918:	b480      	push	{r7}
 800591a:	b087      	sub	sp, #28
 800591c:	af00      	add	r7, sp, #0
 800591e:	60f8      	str	r0, [r7, #12]
 8005920:	607b      	str	r3, [r7, #4]
 8005922:	460b      	mov	r3, r1
 8005924:	817b      	strh	r3, [r7, #10]
 8005926:	4613      	mov	r3, r2
 8005928:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800592a:	897b      	ldrh	r3, [r7, #10]
 800592c:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8005930:	7a7b      	ldrb	r3, [r7, #9]
 8005932:	041b      	lsls	r3, r3, #16
 8005934:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8005938:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800593e:	6a3b      	ldr	r3, [r7, #32]
 8005940:	4313      	orrs	r3, r2
 8005942:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8005946:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8005948:	68fb      	ldr	r3, [r7, #12]
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	685a      	ldr	r2, [r3, #4]
 800594e:	6a3b      	ldr	r3, [r7, #32]
 8005950:	0d5b      	lsrs	r3, r3, #21
 8005952:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 8005956:	4b08      	ldr	r3, [pc, #32]	@ (8005978 <I2C_TransferConfig+0x60>)
 8005958:	430b      	orrs	r3, r1
 800595a:	43db      	mvns	r3, r3
 800595c:	ea02 0103 	and.w	r1, r2, r3
 8005960:	68fb      	ldr	r3, [r7, #12]
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	697a      	ldr	r2, [r7, #20]
 8005966:	430a      	orrs	r2, r1
 8005968:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800596a:	bf00      	nop
 800596c:	371c      	adds	r7, #28
 800596e:	46bd      	mov	sp, r7
 8005970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005974:	4770      	bx	lr
 8005976:	bf00      	nop
 8005978:	03ff63ff 	.word	0x03ff63ff

0800597c <I2C_Enable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Enable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 800597c:	b480      	push	{r7}
 800597e:	b085      	sub	sp, #20
 8005980:	af00      	add	r7, sp, #0
 8005982:	6078      	str	r0, [r7, #4]
 8005984:	460b      	mov	r3, r1
 8005986:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 8005988:	2300      	movs	r3, #0
 800598a:	60fb      	str	r3, [r7, #12]

  if ((hi2c->XferISR != I2C_Master_ISR_DMA) && \
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005990:	4a39      	ldr	r2, [pc, #228]	@ (8005a78 <I2C_Enable_IRQ+0xfc>)
 8005992:	4293      	cmp	r3, r2
 8005994:	d032      	beq.n	80059fc <I2C_Enable_IRQ+0x80>
      (hi2c->XferISR != I2C_Slave_ISR_DMA) && \
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
  if ((hi2c->XferISR != I2C_Master_ISR_DMA) && \
 800599a:	4a38      	ldr	r2, [pc, #224]	@ (8005a7c <I2C_Enable_IRQ+0x100>)
 800599c:	4293      	cmp	r3, r2
 800599e:	d02d      	beq.n	80059fc <I2C_Enable_IRQ+0x80>
      (hi2c->XferISR != I2C_Mem_ISR_DMA))
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
      (hi2c->XferISR != I2C_Slave_ISR_DMA) && \
 80059a4:	4a36      	ldr	r2, [pc, #216]	@ (8005a80 <I2C_Enable_IRQ+0x104>)
 80059a6:	4293      	cmp	r3, r2
 80059a8:	d028      	beq.n	80059fc <I2C_Enable_IRQ+0x80>
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 80059aa:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80059ae:	2b00      	cmp	r3, #0
 80059b0:	da03      	bge.n	80059ba <I2C_Enable_IRQ+0x3e>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80059b2:	68fb      	ldr	r3, [r7, #12]
 80059b4:	f043 03b8 	orr.w	r3, r3, #184	@ 0xb8
 80059b8:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 80059ba:	887b      	ldrh	r3, [r7, #2]
 80059bc:	f003 0301 	and.w	r3, r3, #1
 80059c0:	2b00      	cmp	r3, #0
 80059c2:	d003      	beq.n	80059cc <I2C_Enable_IRQ+0x50>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 80059c4:	68fb      	ldr	r3, [r7, #12]
 80059c6:	f043 03f2 	orr.w	r3, r3, #242	@ 0xf2
 80059ca:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 80059cc:	887b      	ldrh	r3, [r7, #2]
 80059ce:	f003 0302 	and.w	r3, r3, #2
 80059d2:	2b00      	cmp	r3, #0
 80059d4:	d003      	beq.n	80059de <I2C_Enable_IRQ+0x62>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 80059d6:	68fb      	ldr	r3, [r7, #12]
 80059d8:	f043 03f4 	orr.w	r3, r3, #244	@ 0xf4
 80059dc:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 80059de:	887b      	ldrh	r3, [r7, #2]
 80059e0:	2b10      	cmp	r3, #16
 80059e2:	d103      	bne.n	80059ec <I2C_Enable_IRQ+0x70>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 80059e4:	68fb      	ldr	r3, [r7, #12]
 80059e6:	f043 0390 	orr.w	r3, r3, #144	@ 0x90
 80059ea:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 80059ec:	887b      	ldrh	r3, [r7, #2]
 80059ee:	2b20      	cmp	r3, #32
 80059f0:	d133      	bne.n	8005a5a <I2C_Enable_IRQ+0xde>
    {
      /* Enable STOP interrupts */
      tmpisr |= I2C_IT_STOPI;
 80059f2:	68fb      	ldr	r3, [r7, #12]
 80059f4:	f043 0320 	orr.w	r3, r3, #32
 80059f8:	60fb      	str	r3, [r7, #12]
    if (InterruptRequest == I2C_XFER_CPLT_IT)
 80059fa:	e02e      	b.n	8005a5a <I2C_Enable_IRQ+0xde>
    }
  }

  else
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 80059fc:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8005a00:	2b00      	cmp	r3, #0
 8005a02:	da03      	bge.n	8005a0c <I2C_Enable_IRQ+0x90>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8005a04:	68fb      	ldr	r3, [r7, #12]
 8005a06:	f043 03b8 	orr.w	r3, r3, #184	@ 0xb8
 8005a0a:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8005a0c:	887b      	ldrh	r3, [r7, #2]
 8005a0e:	f003 0301 	and.w	r3, r3, #1
 8005a12:	2b00      	cmp	r3, #0
 8005a14:	d003      	beq.n	8005a1e <I2C_Enable_IRQ+0xa2>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 8005a16:	68fb      	ldr	r3, [r7, #12]
 8005a18:	f043 03f2 	orr.w	r3, r3, #242	@ 0xf2
 8005a1c:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8005a1e:	887b      	ldrh	r3, [r7, #2]
 8005a20:	f003 0302 	and.w	r3, r3, #2
 8005a24:	2b00      	cmp	r3, #0
 8005a26:	d003      	beq.n	8005a30 <I2C_Enable_IRQ+0xb4>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 8005a28:	68fb      	ldr	r3, [r7, #12]
 8005a2a:	f043 03f4 	orr.w	r3, r3, #244	@ 0xf4
 8005a2e:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 8005a30:	887b      	ldrh	r3, [r7, #2]
 8005a32:	2b10      	cmp	r3, #16
 8005a34:	d103      	bne.n	8005a3e <I2C_Enable_IRQ+0xc2>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8005a36:	68fb      	ldr	r3, [r7, #12]
 8005a38:	f043 0390 	orr.w	r3, r3, #144	@ 0x90
 8005a3c:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 8005a3e:	887b      	ldrh	r3, [r7, #2]
 8005a40:	2b20      	cmp	r3, #32
 8005a42:	d103      	bne.n	8005a4c <I2C_Enable_IRQ+0xd0>
    {
      /* Enable STOP interrupts */
      tmpisr |= (I2C_IT_STOPI | I2C_IT_TCI);
 8005a44:	68fb      	ldr	r3, [r7, #12]
 8005a46:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8005a4a:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8005a4c:	887b      	ldrh	r3, [r7, #2]
 8005a4e:	2b40      	cmp	r3, #64	@ 0x40
 8005a50:	d103      	bne.n	8005a5a <I2C_Enable_IRQ+0xde>
    {
      /* Enable TC interrupts */
      tmpisr |= I2C_IT_TCI;
 8005a52:	68fb      	ldr	r3, [r7, #12]
 8005a54:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005a58:	60fb      	str	r3, [r7, #12]
  }

  /* Enable interrupts only at the end */
  /* to avoid the risk of I2C interrupt handle execution before */
  /* all interrupts requested done */
  __HAL_I2C_ENABLE_IT(hi2c, tmpisr);
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	6819      	ldr	r1, [r3, #0]
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	68fa      	ldr	r2, [r7, #12]
 8005a66:	430a      	orrs	r2, r1
 8005a68:	601a      	str	r2, [r3, #0]
}
 8005a6a:	bf00      	nop
 8005a6c:	3714      	adds	r7, #20
 8005a6e:	46bd      	mov	sp, r7
 8005a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a74:	4770      	bx	lr
 8005a76:	bf00      	nop
 8005a78:	08004479 	.word	0x08004479
 8005a7c:	0800489d 	.word	0x0800489d
 8005a80:	08004651 	.word	0x08004651

08005a84 <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8005a84:	b480      	push	{r7}
 8005a86:	b085      	sub	sp, #20
 8005a88:	af00      	add	r7, sp, #0
 8005a8a:	6078      	str	r0, [r7, #4]
 8005a8c:	460b      	mov	r3, r1
 8005a8e:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 8005a90:	2300      	movs	r3, #0
 8005a92:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8005a94:	887b      	ldrh	r3, [r7, #2]
 8005a96:	f003 0301 	and.w	r3, r3, #1
 8005a9a:	2b00      	cmp	r3, #0
 8005a9c:	d00f      	beq.n	8005abe <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 8005a9e:	68fb      	ldr	r3, [r7, #12]
 8005aa0:	f043 0342 	orr.w	r3, r3, #66	@ 0x42
 8005aa4:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005aac:	b2db      	uxtb	r3, r3
 8005aae:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8005ab2:	2b28      	cmp	r3, #40	@ 0x28
 8005ab4:	d003      	beq.n	8005abe <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8005ab6:	68fb      	ldr	r3, [r7, #12]
 8005ab8:	f043 03b0 	orr.w	r3, r3, #176	@ 0xb0
 8005abc:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8005abe:	887b      	ldrh	r3, [r7, #2]
 8005ac0:	f003 0302 	and.w	r3, r3, #2
 8005ac4:	2b00      	cmp	r3, #0
 8005ac6:	d00f      	beq.n	8005ae8 <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 8005ac8:	68fb      	ldr	r3, [r7, #12]
 8005aca:	f043 0344 	orr.w	r3, r3, #68	@ 0x44
 8005ace:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005ad6:	b2db      	uxtb	r3, r3
 8005ad8:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8005adc:	2b28      	cmp	r3, #40	@ 0x28
 8005ade:	d003      	beq.n	8005ae8 <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8005ae0:	68fb      	ldr	r3, [r7, #12]
 8005ae2:	f043 03b0 	orr.w	r3, r3, #176	@ 0xb0
 8005ae6:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8005ae8:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8005aec:	2b00      	cmp	r3, #0
 8005aee:	da03      	bge.n	8005af8 <I2C_Disable_IRQ+0x74>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8005af0:	68fb      	ldr	r3, [r7, #12]
 8005af2:	f043 03b8 	orr.w	r3, r3, #184	@ 0xb8
 8005af6:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 8005af8:	887b      	ldrh	r3, [r7, #2]
 8005afa:	2b10      	cmp	r3, #16
 8005afc:	d103      	bne.n	8005b06 <I2C_Disable_IRQ+0x82>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8005afe:	68fb      	ldr	r3, [r7, #12]
 8005b00:	f043 0390 	orr.w	r3, r3, #144	@ 0x90
 8005b04:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 8005b06:	887b      	ldrh	r3, [r7, #2]
 8005b08:	2b20      	cmp	r3, #32
 8005b0a:	d103      	bne.n	8005b14 <I2C_Disable_IRQ+0x90>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 8005b0c:	68fb      	ldr	r3, [r7, #12]
 8005b0e:	f043 0320 	orr.w	r3, r3, #32
 8005b12:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8005b14:	887b      	ldrh	r3, [r7, #2]
 8005b16:	2b40      	cmp	r3, #64	@ 0x40
 8005b18:	d103      	bne.n	8005b22 <I2C_Disable_IRQ+0x9e>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 8005b1a:	68fb      	ldr	r3, [r7, #12]
 8005b1c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005b20:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	6819      	ldr	r1, [r3, #0]
 8005b28:	68fb      	ldr	r3, [r7, #12]
 8005b2a:	43da      	mvns	r2, r3
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	400a      	ands	r2, r1
 8005b32:	601a      	str	r2, [r3, #0]
}
 8005b34:	bf00      	nop
 8005b36:	3714      	adds	r7, #20
 8005b38:	46bd      	mov	sp, r7
 8005b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b3e:	4770      	bx	lr

08005b40 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8005b40:	b480      	push	{r7}
 8005b42:	b083      	sub	sp, #12
 8005b44:	af00      	add	r7, sp, #0
 8005b46:	6078      	str	r0, [r7, #4]
 8005b48:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005b50:	b2db      	uxtb	r3, r3
 8005b52:	2b20      	cmp	r3, #32
 8005b54:	d138      	bne.n	8005bc8 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005b5c:	2b01      	cmp	r3, #1
 8005b5e:	d101      	bne.n	8005b64 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8005b60:	2302      	movs	r3, #2
 8005b62:	e032      	b.n	8005bca <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	2201      	movs	r2, #1
 8005b68:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	2224      	movs	r2, #36	@ 0x24
 8005b70:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	681a      	ldr	r2, [r3, #0]
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	f022 0201 	bic.w	r2, r2, #1
 8005b82:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	681a      	ldr	r2, [r3, #0]
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8005b92:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	6819      	ldr	r1, [r3, #0]
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	683a      	ldr	r2, [r7, #0]
 8005ba0:	430a      	orrs	r2, r1
 8005ba2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	681a      	ldr	r2, [r3, #0]
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	f042 0201 	orr.w	r2, r2, #1
 8005bb2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	2220      	movs	r2, #32
 8005bb8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	2200      	movs	r2, #0
 8005bc0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8005bc4:	2300      	movs	r3, #0
 8005bc6:	e000      	b.n	8005bca <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8005bc8:	2302      	movs	r3, #2
  }
}
 8005bca:	4618      	mov	r0, r3
 8005bcc:	370c      	adds	r7, #12
 8005bce:	46bd      	mov	sp, r7
 8005bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bd4:	4770      	bx	lr

08005bd6 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8005bd6:	b480      	push	{r7}
 8005bd8:	b085      	sub	sp, #20
 8005bda:	af00      	add	r7, sp, #0
 8005bdc:	6078      	str	r0, [r7, #4]
 8005bde:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005be6:	b2db      	uxtb	r3, r3
 8005be8:	2b20      	cmp	r3, #32
 8005bea:	d139      	bne.n	8005c60 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005bf2:	2b01      	cmp	r3, #1
 8005bf4:	d101      	bne.n	8005bfa <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8005bf6:	2302      	movs	r3, #2
 8005bf8:	e033      	b.n	8005c62 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	2201      	movs	r2, #1
 8005bfe:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	2224      	movs	r2, #36	@ 0x24
 8005c06:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	681a      	ldr	r2, [r3, #0]
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	f022 0201 	bic.w	r2, r2, #1
 8005c18:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8005c22:	68fb      	ldr	r3, [r7, #12]
 8005c24:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8005c28:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8005c2a:	683b      	ldr	r3, [r7, #0]
 8005c2c:	021b      	lsls	r3, r3, #8
 8005c2e:	68fa      	ldr	r2, [r7, #12]
 8005c30:	4313      	orrs	r3, r2
 8005c32:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	68fa      	ldr	r2, [r7, #12]
 8005c3a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	681a      	ldr	r2, [r3, #0]
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	f042 0201 	orr.w	r2, r2, #1
 8005c4a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	2220      	movs	r2, #32
 8005c50:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	2200      	movs	r2, #0
 8005c58:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8005c5c:	2300      	movs	r3, #0
 8005c5e:	e000      	b.n	8005c62 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8005c60:	2302      	movs	r3, #2
  }
}
 8005c62:	4618      	mov	r0, r3
 8005c64:	3714      	adds	r7, #20
 8005c66:	46bd      	mov	sp, r7
 8005c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c6c:	4770      	bx	lr
	...

08005c70 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8005c70:	b480      	push	{r7}
 8005c72:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005c74:	4b05      	ldr	r3, [pc, #20]	@ (8005c8c <HAL_PWR_EnableBkUpAccess+0x1c>)
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	4a04      	ldr	r2, [pc, #16]	@ (8005c8c <HAL_PWR_EnableBkUpAccess+0x1c>)
 8005c7a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005c7e:	6013      	str	r3, [r2, #0]
}
 8005c80:	bf00      	nop
 8005c82:	46bd      	mov	sp, r7
 8005c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c88:	4770      	bx	lr
 8005c8a:	bf00      	nop
 8005c8c:	40007000 	.word	0x40007000

08005c90 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8005c90:	b480      	push	{r7}
 8005c92:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8005c94:	4b04      	ldr	r3, [pc, #16]	@ (8005ca8 <HAL_PWREx_GetVoltageRange+0x18>)
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 8005c9c:	4618      	mov	r0, r3
 8005c9e:	46bd      	mov	sp, r7
 8005ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ca4:	4770      	bx	lr
 8005ca6:	bf00      	nop
 8005ca8:	40007000 	.word	0x40007000

08005cac <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8005cac:	b480      	push	{r7}
 8005cae:	b085      	sub	sp, #20
 8005cb0:	af00      	add	r7, sp, #0
 8005cb2:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005cba:	d130      	bne.n	8005d1e <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8005cbc:	4b23      	ldr	r3, [pc, #140]	@ (8005d4c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8005cc4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005cc8:	d038      	beq.n	8005d3c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8005cca:	4b20      	ldr	r3, [pc, #128]	@ (8005d4c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8005cd2:	4a1e      	ldr	r2, [pc, #120]	@ (8005d4c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005cd4:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8005cd8:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8005cda:	4b1d      	ldr	r3, [pc, #116]	@ (8005d50 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	2232      	movs	r2, #50	@ 0x32
 8005ce0:	fb02 f303 	mul.w	r3, r2, r3
 8005ce4:	4a1b      	ldr	r2, [pc, #108]	@ (8005d54 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8005ce6:	fba2 2303 	umull	r2, r3, r2, r3
 8005cea:	0c9b      	lsrs	r3, r3, #18
 8005cec:	3301      	adds	r3, #1
 8005cee:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005cf0:	e002      	b.n	8005cf8 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8005cf2:	68fb      	ldr	r3, [r7, #12]
 8005cf4:	3b01      	subs	r3, #1
 8005cf6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005cf8:	4b14      	ldr	r3, [pc, #80]	@ (8005d4c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005cfa:	695b      	ldr	r3, [r3, #20]
 8005cfc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005d00:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005d04:	d102      	bne.n	8005d0c <HAL_PWREx_ControlVoltageScaling+0x60>
 8005d06:	68fb      	ldr	r3, [r7, #12]
 8005d08:	2b00      	cmp	r3, #0
 8005d0a:	d1f2      	bne.n	8005cf2 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8005d0c:	4b0f      	ldr	r3, [pc, #60]	@ (8005d4c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005d0e:	695b      	ldr	r3, [r3, #20]
 8005d10:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005d14:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005d18:	d110      	bne.n	8005d3c <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8005d1a:	2303      	movs	r3, #3
 8005d1c:	e00f      	b.n	8005d3e <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8005d1e:	4b0b      	ldr	r3, [pc, #44]	@ (8005d4c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8005d26:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005d2a:	d007      	beq.n	8005d3c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8005d2c:	4b07      	ldr	r3, [pc, #28]	@ (8005d4c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8005d34:	4a05      	ldr	r2, [pc, #20]	@ (8005d4c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005d36:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8005d3a:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8005d3c:	2300      	movs	r3, #0
}
 8005d3e:	4618      	mov	r0, r3
 8005d40:	3714      	adds	r7, #20
 8005d42:	46bd      	mov	sp, r7
 8005d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d48:	4770      	bx	lr
 8005d4a:	bf00      	nop
 8005d4c:	40007000 	.word	0x40007000
 8005d50:	20000020 	.word	0x20000020
 8005d54:	431bde83 	.word	0x431bde83

08005d58 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005d58:	b580      	push	{r7, lr}
 8005d5a:	b088      	sub	sp, #32
 8005d5c:	af00      	add	r7, sp, #0
 8005d5e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	2b00      	cmp	r3, #0
 8005d64:	d102      	bne.n	8005d6c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8005d66:	2301      	movs	r3, #1
 8005d68:	f000 bc02 	b.w	8006570 <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005d6c:	4b96      	ldr	r3, [pc, #600]	@ (8005fc8 <HAL_RCC_OscConfig+0x270>)
 8005d6e:	689b      	ldr	r3, [r3, #8]
 8005d70:	f003 030c 	and.w	r3, r3, #12
 8005d74:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005d76:	4b94      	ldr	r3, [pc, #592]	@ (8005fc8 <HAL_RCC_OscConfig+0x270>)
 8005d78:	68db      	ldr	r3, [r3, #12]
 8005d7a:	f003 0303 	and.w	r3, r3, #3
 8005d7e:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	f003 0310 	and.w	r3, r3, #16
 8005d88:	2b00      	cmp	r3, #0
 8005d8a:	f000 80e4 	beq.w	8005f56 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8005d8e:	69bb      	ldr	r3, [r7, #24]
 8005d90:	2b00      	cmp	r3, #0
 8005d92:	d007      	beq.n	8005da4 <HAL_RCC_OscConfig+0x4c>
 8005d94:	69bb      	ldr	r3, [r7, #24]
 8005d96:	2b0c      	cmp	r3, #12
 8005d98:	f040 808b 	bne.w	8005eb2 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8005d9c:	697b      	ldr	r3, [r7, #20]
 8005d9e:	2b01      	cmp	r3, #1
 8005da0:	f040 8087 	bne.w	8005eb2 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8005da4:	4b88      	ldr	r3, [pc, #544]	@ (8005fc8 <HAL_RCC_OscConfig+0x270>)
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	f003 0302 	and.w	r3, r3, #2
 8005dac:	2b00      	cmp	r3, #0
 8005dae:	d005      	beq.n	8005dbc <HAL_RCC_OscConfig+0x64>
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	699b      	ldr	r3, [r3, #24]
 8005db4:	2b00      	cmp	r3, #0
 8005db6:	d101      	bne.n	8005dbc <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8005db8:	2301      	movs	r3, #1
 8005dba:	e3d9      	b.n	8006570 <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	6a1a      	ldr	r2, [r3, #32]
 8005dc0:	4b81      	ldr	r3, [pc, #516]	@ (8005fc8 <HAL_RCC_OscConfig+0x270>)
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	f003 0308 	and.w	r3, r3, #8
 8005dc8:	2b00      	cmp	r3, #0
 8005dca:	d004      	beq.n	8005dd6 <HAL_RCC_OscConfig+0x7e>
 8005dcc:	4b7e      	ldr	r3, [pc, #504]	@ (8005fc8 <HAL_RCC_OscConfig+0x270>)
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005dd4:	e005      	b.n	8005de2 <HAL_RCC_OscConfig+0x8a>
 8005dd6:	4b7c      	ldr	r3, [pc, #496]	@ (8005fc8 <HAL_RCC_OscConfig+0x270>)
 8005dd8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005ddc:	091b      	lsrs	r3, r3, #4
 8005dde:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005de2:	4293      	cmp	r3, r2
 8005de4:	d223      	bcs.n	8005e2e <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	6a1b      	ldr	r3, [r3, #32]
 8005dea:	4618      	mov	r0, r3
 8005dec:	f000 fdbe 	bl	800696c <RCC_SetFlashLatencyFromMSIRange>
 8005df0:	4603      	mov	r3, r0
 8005df2:	2b00      	cmp	r3, #0
 8005df4:	d001      	beq.n	8005dfa <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8005df6:	2301      	movs	r3, #1
 8005df8:	e3ba      	b.n	8006570 <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005dfa:	4b73      	ldr	r3, [pc, #460]	@ (8005fc8 <HAL_RCC_OscConfig+0x270>)
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	4a72      	ldr	r2, [pc, #456]	@ (8005fc8 <HAL_RCC_OscConfig+0x270>)
 8005e00:	f043 0308 	orr.w	r3, r3, #8
 8005e04:	6013      	str	r3, [r2, #0]
 8005e06:	4b70      	ldr	r3, [pc, #448]	@ (8005fc8 <HAL_RCC_OscConfig+0x270>)
 8005e08:	681b      	ldr	r3, [r3, #0]
 8005e0a:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	6a1b      	ldr	r3, [r3, #32]
 8005e12:	496d      	ldr	r1, [pc, #436]	@ (8005fc8 <HAL_RCC_OscConfig+0x270>)
 8005e14:	4313      	orrs	r3, r2
 8005e16:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005e18:	4b6b      	ldr	r3, [pc, #428]	@ (8005fc8 <HAL_RCC_OscConfig+0x270>)
 8005e1a:	685b      	ldr	r3, [r3, #4]
 8005e1c:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	69db      	ldr	r3, [r3, #28]
 8005e24:	021b      	lsls	r3, r3, #8
 8005e26:	4968      	ldr	r1, [pc, #416]	@ (8005fc8 <HAL_RCC_OscConfig+0x270>)
 8005e28:	4313      	orrs	r3, r2
 8005e2a:	604b      	str	r3, [r1, #4]
 8005e2c:	e025      	b.n	8005e7a <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005e2e:	4b66      	ldr	r3, [pc, #408]	@ (8005fc8 <HAL_RCC_OscConfig+0x270>)
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	4a65      	ldr	r2, [pc, #404]	@ (8005fc8 <HAL_RCC_OscConfig+0x270>)
 8005e34:	f043 0308 	orr.w	r3, r3, #8
 8005e38:	6013      	str	r3, [r2, #0]
 8005e3a:	4b63      	ldr	r3, [pc, #396]	@ (8005fc8 <HAL_RCC_OscConfig+0x270>)
 8005e3c:	681b      	ldr	r3, [r3, #0]
 8005e3e:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	6a1b      	ldr	r3, [r3, #32]
 8005e46:	4960      	ldr	r1, [pc, #384]	@ (8005fc8 <HAL_RCC_OscConfig+0x270>)
 8005e48:	4313      	orrs	r3, r2
 8005e4a:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005e4c:	4b5e      	ldr	r3, [pc, #376]	@ (8005fc8 <HAL_RCC_OscConfig+0x270>)
 8005e4e:	685b      	ldr	r3, [r3, #4]
 8005e50:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	69db      	ldr	r3, [r3, #28]
 8005e58:	021b      	lsls	r3, r3, #8
 8005e5a:	495b      	ldr	r1, [pc, #364]	@ (8005fc8 <HAL_RCC_OscConfig+0x270>)
 8005e5c:	4313      	orrs	r3, r2
 8005e5e:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8005e60:	69bb      	ldr	r3, [r7, #24]
 8005e62:	2b00      	cmp	r3, #0
 8005e64:	d109      	bne.n	8005e7a <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	6a1b      	ldr	r3, [r3, #32]
 8005e6a:	4618      	mov	r0, r3
 8005e6c:	f000 fd7e 	bl	800696c <RCC_SetFlashLatencyFromMSIRange>
 8005e70:	4603      	mov	r3, r0
 8005e72:	2b00      	cmp	r3, #0
 8005e74:	d001      	beq.n	8005e7a <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8005e76:	2301      	movs	r3, #1
 8005e78:	e37a      	b.n	8006570 <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8005e7a:	f000 fc81 	bl	8006780 <HAL_RCC_GetSysClockFreq>
 8005e7e:	4602      	mov	r2, r0
 8005e80:	4b51      	ldr	r3, [pc, #324]	@ (8005fc8 <HAL_RCC_OscConfig+0x270>)
 8005e82:	689b      	ldr	r3, [r3, #8]
 8005e84:	091b      	lsrs	r3, r3, #4
 8005e86:	f003 030f 	and.w	r3, r3, #15
 8005e8a:	4950      	ldr	r1, [pc, #320]	@ (8005fcc <HAL_RCC_OscConfig+0x274>)
 8005e8c:	5ccb      	ldrb	r3, [r1, r3]
 8005e8e:	f003 031f 	and.w	r3, r3, #31
 8005e92:	fa22 f303 	lsr.w	r3, r2, r3
 8005e96:	4a4e      	ldr	r2, [pc, #312]	@ (8005fd0 <HAL_RCC_OscConfig+0x278>)
 8005e98:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8005e9a:	4b4e      	ldr	r3, [pc, #312]	@ (8005fd4 <HAL_RCC_OscConfig+0x27c>)
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	4618      	mov	r0, r3
 8005ea0:	f7fc fb92 	bl	80025c8 <HAL_InitTick>
 8005ea4:	4603      	mov	r3, r0
 8005ea6:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8005ea8:	7bfb      	ldrb	r3, [r7, #15]
 8005eaa:	2b00      	cmp	r3, #0
 8005eac:	d052      	beq.n	8005f54 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8005eae:	7bfb      	ldrb	r3, [r7, #15]
 8005eb0:	e35e      	b.n	8006570 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	699b      	ldr	r3, [r3, #24]
 8005eb6:	2b00      	cmp	r3, #0
 8005eb8:	d032      	beq.n	8005f20 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8005eba:	4b43      	ldr	r3, [pc, #268]	@ (8005fc8 <HAL_RCC_OscConfig+0x270>)
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	4a42      	ldr	r2, [pc, #264]	@ (8005fc8 <HAL_RCC_OscConfig+0x270>)
 8005ec0:	f043 0301 	orr.w	r3, r3, #1
 8005ec4:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8005ec6:	f7fd f8ab 	bl	8003020 <HAL_GetTick>
 8005eca:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8005ecc:	e008      	b.n	8005ee0 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8005ece:	f7fd f8a7 	bl	8003020 <HAL_GetTick>
 8005ed2:	4602      	mov	r2, r0
 8005ed4:	693b      	ldr	r3, [r7, #16]
 8005ed6:	1ad3      	subs	r3, r2, r3
 8005ed8:	2b02      	cmp	r3, #2
 8005eda:	d901      	bls.n	8005ee0 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8005edc:	2303      	movs	r3, #3
 8005ede:	e347      	b.n	8006570 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8005ee0:	4b39      	ldr	r3, [pc, #228]	@ (8005fc8 <HAL_RCC_OscConfig+0x270>)
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	f003 0302 	and.w	r3, r3, #2
 8005ee8:	2b00      	cmp	r3, #0
 8005eea:	d0f0      	beq.n	8005ece <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005eec:	4b36      	ldr	r3, [pc, #216]	@ (8005fc8 <HAL_RCC_OscConfig+0x270>)
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	4a35      	ldr	r2, [pc, #212]	@ (8005fc8 <HAL_RCC_OscConfig+0x270>)
 8005ef2:	f043 0308 	orr.w	r3, r3, #8
 8005ef6:	6013      	str	r3, [r2, #0]
 8005ef8:	4b33      	ldr	r3, [pc, #204]	@ (8005fc8 <HAL_RCC_OscConfig+0x270>)
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	6a1b      	ldr	r3, [r3, #32]
 8005f04:	4930      	ldr	r1, [pc, #192]	@ (8005fc8 <HAL_RCC_OscConfig+0x270>)
 8005f06:	4313      	orrs	r3, r2
 8005f08:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005f0a:	4b2f      	ldr	r3, [pc, #188]	@ (8005fc8 <HAL_RCC_OscConfig+0x270>)
 8005f0c:	685b      	ldr	r3, [r3, #4]
 8005f0e:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	69db      	ldr	r3, [r3, #28]
 8005f16:	021b      	lsls	r3, r3, #8
 8005f18:	492b      	ldr	r1, [pc, #172]	@ (8005fc8 <HAL_RCC_OscConfig+0x270>)
 8005f1a:	4313      	orrs	r3, r2
 8005f1c:	604b      	str	r3, [r1, #4]
 8005f1e:	e01a      	b.n	8005f56 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8005f20:	4b29      	ldr	r3, [pc, #164]	@ (8005fc8 <HAL_RCC_OscConfig+0x270>)
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	4a28      	ldr	r2, [pc, #160]	@ (8005fc8 <HAL_RCC_OscConfig+0x270>)
 8005f26:	f023 0301 	bic.w	r3, r3, #1
 8005f2a:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8005f2c:	f7fd f878 	bl	8003020 <HAL_GetTick>
 8005f30:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8005f32:	e008      	b.n	8005f46 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8005f34:	f7fd f874 	bl	8003020 <HAL_GetTick>
 8005f38:	4602      	mov	r2, r0
 8005f3a:	693b      	ldr	r3, [r7, #16]
 8005f3c:	1ad3      	subs	r3, r2, r3
 8005f3e:	2b02      	cmp	r3, #2
 8005f40:	d901      	bls.n	8005f46 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8005f42:	2303      	movs	r3, #3
 8005f44:	e314      	b.n	8006570 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8005f46:	4b20      	ldr	r3, [pc, #128]	@ (8005fc8 <HAL_RCC_OscConfig+0x270>)
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	f003 0302 	and.w	r3, r3, #2
 8005f4e:	2b00      	cmp	r3, #0
 8005f50:	d1f0      	bne.n	8005f34 <HAL_RCC_OscConfig+0x1dc>
 8005f52:	e000      	b.n	8005f56 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8005f54:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	f003 0301 	and.w	r3, r3, #1
 8005f5e:	2b00      	cmp	r3, #0
 8005f60:	d073      	beq.n	800604a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8005f62:	69bb      	ldr	r3, [r7, #24]
 8005f64:	2b08      	cmp	r3, #8
 8005f66:	d005      	beq.n	8005f74 <HAL_RCC_OscConfig+0x21c>
 8005f68:	69bb      	ldr	r3, [r7, #24]
 8005f6a:	2b0c      	cmp	r3, #12
 8005f6c:	d10e      	bne.n	8005f8c <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8005f6e:	697b      	ldr	r3, [r7, #20]
 8005f70:	2b03      	cmp	r3, #3
 8005f72:	d10b      	bne.n	8005f8c <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005f74:	4b14      	ldr	r3, [pc, #80]	@ (8005fc8 <HAL_RCC_OscConfig+0x270>)
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005f7c:	2b00      	cmp	r3, #0
 8005f7e:	d063      	beq.n	8006048 <HAL_RCC_OscConfig+0x2f0>
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	685b      	ldr	r3, [r3, #4]
 8005f84:	2b00      	cmp	r3, #0
 8005f86:	d15f      	bne.n	8006048 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8005f88:	2301      	movs	r3, #1
 8005f8a:	e2f1      	b.n	8006570 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	685b      	ldr	r3, [r3, #4]
 8005f90:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005f94:	d106      	bne.n	8005fa4 <HAL_RCC_OscConfig+0x24c>
 8005f96:	4b0c      	ldr	r3, [pc, #48]	@ (8005fc8 <HAL_RCC_OscConfig+0x270>)
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	4a0b      	ldr	r2, [pc, #44]	@ (8005fc8 <HAL_RCC_OscConfig+0x270>)
 8005f9c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005fa0:	6013      	str	r3, [r2, #0]
 8005fa2:	e025      	b.n	8005ff0 <HAL_RCC_OscConfig+0x298>
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	685b      	ldr	r3, [r3, #4]
 8005fa8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005fac:	d114      	bne.n	8005fd8 <HAL_RCC_OscConfig+0x280>
 8005fae:	4b06      	ldr	r3, [pc, #24]	@ (8005fc8 <HAL_RCC_OscConfig+0x270>)
 8005fb0:	681b      	ldr	r3, [r3, #0]
 8005fb2:	4a05      	ldr	r2, [pc, #20]	@ (8005fc8 <HAL_RCC_OscConfig+0x270>)
 8005fb4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005fb8:	6013      	str	r3, [r2, #0]
 8005fba:	4b03      	ldr	r3, [pc, #12]	@ (8005fc8 <HAL_RCC_OscConfig+0x270>)
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	4a02      	ldr	r2, [pc, #8]	@ (8005fc8 <HAL_RCC_OscConfig+0x270>)
 8005fc0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005fc4:	6013      	str	r3, [r2, #0]
 8005fc6:	e013      	b.n	8005ff0 <HAL_RCC_OscConfig+0x298>
 8005fc8:	40021000 	.word	0x40021000
 8005fcc:	0801d3e4 	.word	0x0801d3e4
 8005fd0:	20000020 	.word	0x20000020
 8005fd4:	20000024 	.word	0x20000024
 8005fd8:	4ba0      	ldr	r3, [pc, #640]	@ (800625c <HAL_RCC_OscConfig+0x504>)
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	4a9f      	ldr	r2, [pc, #636]	@ (800625c <HAL_RCC_OscConfig+0x504>)
 8005fde:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005fe2:	6013      	str	r3, [r2, #0]
 8005fe4:	4b9d      	ldr	r3, [pc, #628]	@ (800625c <HAL_RCC_OscConfig+0x504>)
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	4a9c      	ldr	r2, [pc, #624]	@ (800625c <HAL_RCC_OscConfig+0x504>)
 8005fea:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005fee:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	685b      	ldr	r3, [r3, #4]
 8005ff4:	2b00      	cmp	r3, #0
 8005ff6:	d013      	beq.n	8006020 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005ff8:	f7fd f812 	bl	8003020 <HAL_GetTick>
 8005ffc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005ffe:	e008      	b.n	8006012 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006000:	f7fd f80e 	bl	8003020 <HAL_GetTick>
 8006004:	4602      	mov	r2, r0
 8006006:	693b      	ldr	r3, [r7, #16]
 8006008:	1ad3      	subs	r3, r2, r3
 800600a:	2b64      	cmp	r3, #100	@ 0x64
 800600c:	d901      	bls.n	8006012 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800600e:	2303      	movs	r3, #3
 8006010:	e2ae      	b.n	8006570 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006012:	4b92      	ldr	r3, [pc, #584]	@ (800625c <HAL_RCC_OscConfig+0x504>)
 8006014:	681b      	ldr	r3, [r3, #0]
 8006016:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800601a:	2b00      	cmp	r3, #0
 800601c:	d0f0      	beq.n	8006000 <HAL_RCC_OscConfig+0x2a8>
 800601e:	e014      	b.n	800604a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006020:	f7fc fffe 	bl	8003020 <HAL_GetTick>
 8006024:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8006026:	e008      	b.n	800603a <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006028:	f7fc fffa 	bl	8003020 <HAL_GetTick>
 800602c:	4602      	mov	r2, r0
 800602e:	693b      	ldr	r3, [r7, #16]
 8006030:	1ad3      	subs	r3, r2, r3
 8006032:	2b64      	cmp	r3, #100	@ 0x64
 8006034:	d901      	bls.n	800603a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8006036:	2303      	movs	r3, #3
 8006038:	e29a      	b.n	8006570 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800603a:	4b88      	ldr	r3, [pc, #544]	@ (800625c <HAL_RCC_OscConfig+0x504>)
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006042:	2b00      	cmp	r3, #0
 8006044:	d1f0      	bne.n	8006028 <HAL_RCC_OscConfig+0x2d0>
 8006046:	e000      	b.n	800604a <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006048:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	681b      	ldr	r3, [r3, #0]
 800604e:	f003 0302 	and.w	r3, r3, #2
 8006052:	2b00      	cmp	r3, #0
 8006054:	d060      	beq.n	8006118 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8006056:	69bb      	ldr	r3, [r7, #24]
 8006058:	2b04      	cmp	r3, #4
 800605a:	d005      	beq.n	8006068 <HAL_RCC_OscConfig+0x310>
 800605c:	69bb      	ldr	r3, [r7, #24]
 800605e:	2b0c      	cmp	r3, #12
 8006060:	d119      	bne.n	8006096 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8006062:	697b      	ldr	r3, [r7, #20]
 8006064:	2b02      	cmp	r3, #2
 8006066:	d116      	bne.n	8006096 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006068:	4b7c      	ldr	r3, [pc, #496]	@ (800625c <HAL_RCC_OscConfig+0x504>)
 800606a:	681b      	ldr	r3, [r3, #0]
 800606c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006070:	2b00      	cmp	r3, #0
 8006072:	d005      	beq.n	8006080 <HAL_RCC_OscConfig+0x328>
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	68db      	ldr	r3, [r3, #12]
 8006078:	2b00      	cmp	r3, #0
 800607a:	d101      	bne.n	8006080 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 800607c:	2301      	movs	r3, #1
 800607e:	e277      	b.n	8006570 <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006080:	4b76      	ldr	r3, [pc, #472]	@ (800625c <HAL_RCC_OscConfig+0x504>)
 8006082:	685b      	ldr	r3, [r3, #4]
 8006084:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	691b      	ldr	r3, [r3, #16]
 800608c:	061b      	lsls	r3, r3, #24
 800608e:	4973      	ldr	r1, [pc, #460]	@ (800625c <HAL_RCC_OscConfig+0x504>)
 8006090:	4313      	orrs	r3, r2
 8006092:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006094:	e040      	b.n	8006118 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	68db      	ldr	r3, [r3, #12]
 800609a:	2b00      	cmp	r3, #0
 800609c:	d023      	beq.n	80060e6 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800609e:	4b6f      	ldr	r3, [pc, #444]	@ (800625c <HAL_RCC_OscConfig+0x504>)
 80060a0:	681b      	ldr	r3, [r3, #0]
 80060a2:	4a6e      	ldr	r2, [pc, #440]	@ (800625c <HAL_RCC_OscConfig+0x504>)
 80060a4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80060a8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80060aa:	f7fc ffb9 	bl	8003020 <HAL_GetTick>
 80060ae:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80060b0:	e008      	b.n	80060c4 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80060b2:	f7fc ffb5 	bl	8003020 <HAL_GetTick>
 80060b6:	4602      	mov	r2, r0
 80060b8:	693b      	ldr	r3, [r7, #16]
 80060ba:	1ad3      	subs	r3, r2, r3
 80060bc:	2b02      	cmp	r3, #2
 80060be:	d901      	bls.n	80060c4 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80060c0:	2303      	movs	r3, #3
 80060c2:	e255      	b.n	8006570 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80060c4:	4b65      	ldr	r3, [pc, #404]	@ (800625c <HAL_RCC_OscConfig+0x504>)
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80060cc:	2b00      	cmp	r3, #0
 80060ce:	d0f0      	beq.n	80060b2 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80060d0:	4b62      	ldr	r3, [pc, #392]	@ (800625c <HAL_RCC_OscConfig+0x504>)
 80060d2:	685b      	ldr	r3, [r3, #4]
 80060d4:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	691b      	ldr	r3, [r3, #16]
 80060dc:	061b      	lsls	r3, r3, #24
 80060de:	495f      	ldr	r1, [pc, #380]	@ (800625c <HAL_RCC_OscConfig+0x504>)
 80060e0:	4313      	orrs	r3, r2
 80060e2:	604b      	str	r3, [r1, #4]
 80060e4:	e018      	b.n	8006118 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80060e6:	4b5d      	ldr	r3, [pc, #372]	@ (800625c <HAL_RCC_OscConfig+0x504>)
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	4a5c      	ldr	r2, [pc, #368]	@ (800625c <HAL_RCC_OscConfig+0x504>)
 80060ec:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80060f0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80060f2:	f7fc ff95 	bl	8003020 <HAL_GetTick>
 80060f6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80060f8:	e008      	b.n	800610c <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80060fa:	f7fc ff91 	bl	8003020 <HAL_GetTick>
 80060fe:	4602      	mov	r2, r0
 8006100:	693b      	ldr	r3, [r7, #16]
 8006102:	1ad3      	subs	r3, r2, r3
 8006104:	2b02      	cmp	r3, #2
 8006106:	d901      	bls.n	800610c <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8006108:	2303      	movs	r3, #3
 800610a:	e231      	b.n	8006570 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800610c:	4b53      	ldr	r3, [pc, #332]	@ (800625c <HAL_RCC_OscConfig+0x504>)
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006114:	2b00      	cmp	r3, #0
 8006116:	d1f0      	bne.n	80060fa <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	f003 0308 	and.w	r3, r3, #8
 8006120:	2b00      	cmp	r3, #0
 8006122:	d03c      	beq.n	800619e <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	695b      	ldr	r3, [r3, #20]
 8006128:	2b00      	cmp	r3, #0
 800612a:	d01c      	beq.n	8006166 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800612c:	4b4b      	ldr	r3, [pc, #300]	@ (800625c <HAL_RCC_OscConfig+0x504>)
 800612e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006132:	4a4a      	ldr	r2, [pc, #296]	@ (800625c <HAL_RCC_OscConfig+0x504>)
 8006134:	f043 0301 	orr.w	r3, r3, #1
 8006138:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800613c:	f7fc ff70 	bl	8003020 <HAL_GetTick>
 8006140:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8006142:	e008      	b.n	8006156 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006144:	f7fc ff6c 	bl	8003020 <HAL_GetTick>
 8006148:	4602      	mov	r2, r0
 800614a:	693b      	ldr	r3, [r7, #16]
 800614c:	1ad3      	subs	r3, r2, r3
 800614e:	2b02      	cmp	r3, #2
 8006150:	d901      	bls.n	8006156 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8006152:	2303      	movs	r3, #3
 8006154:	e20c      	b.n	8006570 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8006156:	4b41      	ldr	r3, [pc, #260]	@ (800625c <HAL_RCC_OscConfig+0x504>)
 8006158:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800615c:	f003 0302 	and.w	r3, r3, #2
 8006160:	2b00      	cmp	r3, #0
 8006162:	d0ef      	beq.n	8006144 <HAL_RCC_OscConfig+0x3ec>
 8006164:	e01b      	b.n	800619e <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006166:	4b3d      	ldr	r3, [pc, #244]	@ (800625c <HAL_RCC_OscConfig+0x504>)
 8006168:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800616c:	4a3b      	ldr	r2, [pc, #236]	@ (800625c <HAL_RCC_OscConfig+0x504>)
 800616e:	f023 0301 	bic.w	r3, r3, #1
 8006172:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006176:	f7fc ff53 	bl	8003020 <HAL_GetTick>
 800617a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800617c:	e008      	b.n	8006190 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800617e:	f7fc ff4f 	bl	8003020 <HAL_GetTick>
 8006182:	4602      	mov	r2, r0
 8006184:	693b      	ldr	r3, [r7, #16]
 8006186:	1ad3      	subs	r3, r2, r3
 8006188:	2b02      	cmp	r3, #2
 800618a:	d901      	bls.n	8006190 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 800618c:	2303      	movs	r3, #3
 800618e:	e1ef      	b.n	8006570 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8006190:	4b32      	ldr	r3, [pc, #200]	@ (800625c <HAL_RCC_OscConfig+0x504>)
 8006192:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006196:	f003 0302 	and.w	r3, r3, #2
 800619a:	2b00      	cmp	r3, #0
 800619c:	d1ef      	bne.n	800617e <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	681b      	ldr	r3, [r3, #0]
 80061a2:	f003 0304 	and.w	r3, r3, #4
 80061a6:	2b00      	cmp	r3, #0
 80061a8:	f000 80a6 	beq.w	80062f8 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80061ac:	2300      	movs	r3, #0
 80061ae:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80061b0:	4b2a      	ldr	r3, [pc, #168]	@ (800625c <HAL_RCC_OscConfig+0x504>)
 80061b2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80061b4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80061b8:	2b00      	cmp	r3, #0
 80061ba:	d10d      	bne.n	80061d8 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80061bc:	4b27      	ldr	r3, [pc, #156]	@ (800625c <HAL_RCC_OscConfig+0x504>)
 80061be:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80061c0:	4a26      	ldr	r2, [pc, #152]	@ (800625c <HAL_RCC_OscConfig+0x504>)
 80061c2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80061c6:	6593      	str	r3, [r2, #88]	@ 0x58
 80061c8:	4b24      	ldr	r3, [pc, #144]	@ (800625c <HAL_RCC_OscConfig+0x504>)
 80061ca:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80061cc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80061d0:	60bb      	str	r3, [r7, #8]
 80061d2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80061d4:	2301      	movs	r3, #1
 80061d6:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80061d8:	4b21      	ldr	r3, [pc, #132]	@ (8006260 <HAL_RCC_OscConfig+0x508>)
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80061e0:	2b00      	cmp	r3, #0
 80061e2:	d118      	bne.n	8006216 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80061e4:	4b1e      	ldr	r3, [pc, #120]	@ (8006260 <HAL_RCC_OscConfig+0x508>)
 80061e6:	681b      	ldr	r3, [r3, #0]
 80061e8:	4a1d      	ldr	r2, [pc, #116]	@ (8006260 <HAL_RCC_OscConfig+0x508>)
 80061ea:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80061ee:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80061f0:	f7fc ff16 	bl	8003020 <HAL_GetTick>
 80061f4:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80061f6:	e008      	b.n	800620a <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80061f8:	f7fc ff12 	bl	8003020 <HAL_GetTick>
 80061fc:	4602      	mov	r2, r0
 80061fe:	693b      	ldr	r3, [r7, #16]
 8006200:	1ad3      	subs	r3, r2, r3
 8006202:	2b02      	cmp	r3, #2
 8006204:	d901      	bls.n	800620a <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8006206:	2303      	movs	r3, #3
 8006208:	e1b2      	b.n	8006570 <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800620a:	4b15      	ldr	r3, [pc, #84]	@ (8006260 <HAL_RCC_OscConfig+0x508>)
 800620c:	681b      	ldr	r3, [r3, #0]
 800620e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006212:	2b00      	cmp	r3, #0
 8006214:	d0f0      	beq.n	80061f8 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	689b      	ldr	r3, [r3, #8]
 800621a:	2b01      	cmp	r3, #1
 800621c:	d108      	bne.n	8006230 <HAL_RCC_OscConfig+0x4d8>
 800621e:	4b0f      	ldr	r3, [pc, #60]	@ (800625c <HAL_RCC_OscConfig+0x504>)
 8006220:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006224:	4a0d      	ldr	r2, [pc, #52]	@ (800625c <HAL_RCC_OscConfig+0x504>)
 8006226:	f043 0301 	orr.w	r3, r3, #1
 800622a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800622e:	e029      	b.n	8006284 <HAL_RCC_OscConfig+0x52c>
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	689b      	ldr	r3, [r3, #8]
 8006234:	2b05      	cmp	r3, #5
 8006236:	d115      	bne.n	8006264 <HAL_RCC_OscConfig+0x50c>
 8006238:	4b08      	ldr	r3, [pc, #32]	@ (800625c <HAL_RCC_OscConfig+0x504>)
 800623a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800623e:	4a07      	ldr	r2, [pc, #28]	@ (800625c <HAL_RCC_OscConfig+0x504>)
 8006240:	f043 0304 	orr.w	r3, r3, #4
 8006244:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8006248:	4b04      	ldr	r3, [pc, #16]	@ (800625c <HAL_RCC_OscConfig+0x504>)
 800624a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800624e:	4a03      	ldr	r2, [pc, #12]	@ (800625c <HAL_RCC_OscConfig+0x504>)
 8006250:	f043 0301 	orr.w	r3, r3, #1
 8006254:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8006258:	e014      	b.n	8006284 <HAL_RCC_OscConfig+0x52c>
 800625a:	bf00      	nop
 800625c:	40021000 	.word	0x40021000
 8006260:	40007000 	.word	0x40007000
 8006264:	4b9a      	ldr	r3, [pc, #616]	@ (80064d0 <HAL_RCC_OscConfig+0x778>)
 8006266:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800626a:	4a99      	ldr	r2, [pc, #612]	@ (80064d0 <HAL_RCC_OscConfig+0x778>)
 800626c:	f023 0301 	bic.w	r3, r3, #1
 8006270:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8006274:	4b96      	ldr	r3, [pc, #600]	@ (80064d0 <HAL_RCC_OscConfig+0x778>)
 8006276:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800627a:	4a95      	ldr	r2, [pc, #596]	@ (80064d0 <HAL_RCC_OscConfig+0x778>)
 800627c:	f023 0304 	bic.w	r3, r3, #4
 8006280:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	689b      	ldr	r3, [r3, #8]
 8006288:	2b00      	cmp	r3, #0
 800628a:	d016      	beq.n	80062ba <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800628c:	f7fc fec8 	bl	8003020 <HAL_GetTick>
 8006290:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006292:	e00a      	b.n	80062aa <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006294:	f7fc fec4 	bl	8003020 <HAL_GetTick>
 8006298:	4602      	mov	r2, r0
 800629a:	693b      	ldr	r3, [r7, #16]
 800629c:	1ad3      	subs	r3, r2, r3
 800629e:	f241 3288 	movw	r2, #5000	@ 0x1388
 80062a2:	4293      	cmp	r3, r2
 80062a4:	d901      	bls.n	80062aa <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 80062a6:	2303      	movs	r3, #3
 80062a8:	e162      	b.n	8006570 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80062aa:	4b89      	ldr	r3, [pc, #548]	@ (80064d0 <HAL_RCC_OscConfig+0x778>)
 80062ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80062b0:	f003 0302 	and.w	r3, r3, #2
 80062b4:	2b00      	cmp	r3, #0
 80062b6:	d0ed      	beq.n	8006294 <HAL_RCC_OscConfig+0x53c>
 80062b8:	e015      	b.n	80062e6 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80062ba:	f7fc feb1 	bl	8003020 <HAL_GetTick>
 80062be:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80062c0:	e00a      	b.n	80062d8 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80062c2:	f7fc fead 	bl	8003020 <HAL_GetTick>
 80062c6:	4602      	mov	r2, r0
 80062c8:	693b      	ldr	r3, [r7, #16]
 80062ca:	1ad3      	subs	r3, r2, r3
 80062cc:	f241 3288 	movw	r2, #5000	@ 0x1388
 80062d0:	4293      	cmp	r3, r2
 80062d2:	d901      	bls.n	80062d8 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80062d4:	2303      	movs	r3, #3
 80062d6:	e14b      	b.n	8006570 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80062d8:	4b7d      	ldr	r3, [pc, #500]	@ (80064d0 <HAL_RCC_OscConfig+0x778>)
 80062da:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80062de:	f003 0302 	and.w	r3, r3, #2
 80062e2:	2b00      	cmp	r3, #0
 80062e4:	d1ed      	bne.n	80062c2 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80062e6:	7ffb      	ldrb	r3, [r7, #31]
 80062e8:	2b01      	cmp	r3, #1
 80062ea:	d105      	bne.n	80062f8 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80062ec:	4b78      	ldr	r3, [pc, #480]	@ (80064d0 <HAL_RCC_OscConfig+0x778>)
 80062ee:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80062f0:	4a77      	ldr	r2, [pc, #476]	@ (80064d0 <HAL_RCC_OscConfig+0x778>)
 80062f2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80062f6:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	681b      	ldr	r3, [r3, #0]
 80062fc:	f003 0320 	and.w	r3, r3, #32
 8006300:	2b00      	cmp	r3, #0
 8006302:	d03c      	beq.n	800637e <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006308:	2b00      	cmp	r3, #0
 800630a:	d01c      	beq.n	8006346 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800630c:	4b70      	ldr	r3, [pc, #448]	@ (80064d0 <HAL_RCC_OscConfig+0x778>)
 800630e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8006312:	4a6f      	ldr	r2, [pc, #444]	@ (80064d0 <HAL_RCC_OscConfig+0x778>)
 8006314:	f043 0301 	orr.w	r3, r3, #1
 8006318:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800631c:	f7fc fe80 	bl	8003020 <HAL_GetTick>
 8006320:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8006322:	e008      	b.n	8006336 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8006324:	f7fc fe7c 	bl	8003020 <HAL_GetTick>
 8006328:	4602      	mov	r2, r0
 800632a:	693b      	ldr	r3, [r7, #16]
 800632c:	1ad3      	subs	r3, r2, r3
 800632e:	2b02      	cmp	r3, #2
 8006330:	d901      	bls.n	8006336 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8006332:	2303      	movs	r3, #3
 8006334:	e11c      	b.n	8006570 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8006336:	4b66      	ldr	r3, [pc, #408]	@ (80064d0 <HAL_RCC_OscConfig+0x778>)
 8006338:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800633c:	f003 0302 	and.w	r3, r3, #2
 8006340:	2b00      	cmp	r3, #0
 8006342:	d0ef      	beq.n	8006324 <HAL_RCC_OscConfig+0x5cc>
 8006344:	e01b      	b.n	800637e <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8006346:	4b62      	ldr	r3, [pc, #392]	@ (80064d0 <HAL_RCC_OscConfig+0x778>)
 8006348:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800634c:	4a60      	ldr	r2, [pc, #384]	@ (80064d0 <HAL_RCC_OscConfig+0x778>)
 800634e:	f023 0301 	bic.w	r3, r3, #1
 8006352:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006356:	f7fc fe63 	bl	8003020 <HAL_GetTick>
 800635a:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800635c:	e008      	b.n	8006370 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800635e:	f7fc fe5f 	bl	8003020 <HAL_GetTick>
 8006362:	4602      	mov	r2, r0
 8006364:	693b      	ldr	r3, [r7, #16]
 8006366:	1ad3      	subs	r3, r2, r3
 8006368:	2b02      	cmp	r3, #2
 800636a:	d901      	bls.n	8006370 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 800636c:	2303      	movs	r3, #3
 800636e:	e0ff      	b.n	8006570 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8006370:	4b57      	ldr	r3, [pc, #348]	@ (80064d0 <HAL_RCC_OscConfig+0x778>)
 8006372:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8006376:	f003 0302 	and.w	r3, r3, #2
 800637a:	2b00      	cmp	r3, #0
 800637c:	d1ef      	bne.n	800635e <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006382:	2b00      	cmp	r3, #0
 8006384:	f000 80f3 	beq.w	800656e <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800638c:	2b02      	cmp	r3, #2
 800638e:	f040 80c9 	bne.w	8006524 <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8006392:	4b4f      	ldr	r3, [pc, #316]	@ (80064d0 <HAL_RCC_OscConfig+0x778>)
 8006394:	68db      	ldr	r3, [r3, #12]
 8006396:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8006398:	697b      	ldr	r3, [r7, #20]
 800639a:	f003 0203 	and.w	r2, r3, #3
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80063a2:	429a      	cmp	r2, r3
 80063a4:	d12c      	bne.n	8006400 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80063a6:	697b      	ldr	r3, [r7, #20]
 80063a8:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80063b0:	3b01      	subs	r3, #1
 80063b2:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80063b4:	429a      	cmp	r2, r3
 80063b6:	d123      	bne.n	8006400 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80063b8:	697b      	ldr	r3, [r7, #20]
 80063ba:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80063c2:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80063c4:	429a      	cmp	r2, r3
 80063c6:	d11b      	bne.n	8006400 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80063c8:	697b      	ldr	r3, [r7, #20]
 80063ca:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80063d2:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80063d4:	429a      	cmp	r2, r3
 80063d6:	d113      	bne.n	8006400 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80063d8:	697b      	ldr	r3, [r7, #20]
 80063da:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80063e2:	085b      	lsrs	r3, r3, #1
 80063e4:	3b01      	subs	r3, #1
 80063e6:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80063e8:	429a      	cmp	r2, r3
 80063ea:	d109      	bne.n	8006400 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80063ec:	697b      	ldr	r3, [r7, #20]
 80063ee:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80063f6:	085b      	lsrs	r3, r3, #1
 80063f8:	3b01      	subs	r3, #1
 80063fa:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80063fc:	429a      	cmp	r2, r3
 80063fe:	d06b      	beq.n	80064d8 <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8006400:	69bb      	ldr	r3, [r7, #24]
 8006402:	2b0c      	cmp	r3, #12
 8006404:	d062      	beq.n	80064cc <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8006406:	4b32      	ldr	r3, [pc, #200]	@ (80064d0 <HAL_RCC_OscConfig+0x778>)
 8006408:	681b      	ldr	r3, [r3, #0]
 800640a:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800640e:	2b00      	cmp	r3, #0
 8006410:	d001      	beq.n	8006416 <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 8006412:	2301      	movs	r3, #1
 8006414:	e0ac      	b.n	8006570 <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8006416:	4b2e      	ldr	r3, [pc, #184]	@ (80064d0 <HAL_RCC_OscConfig+0x778>)
 8006418:	681b      	ldr	r3, [r3, #0]
 800641a:	4a2d      	ldr	r2, [pc, #180]	@ (80064d0 <HAL_RCC_OscConfig+0x778>)
 800641c:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006420:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8006422:	f7fc fdfd 	bl	8003020 <HAL_GetTick>
 8006426:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006428:	e008      	b.n	800643c <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800642a:	f7fc fdf9 	bl	8003020 <HAL_GetTick>
 800642e:	4602      	mov	r2, r0
 8006430:	693b      	ldr	r3, [r7, #16]
 8006432:	1ad3      	subs	r3, r2, r3
 8006434:	2b02      	cmp	r3, #2
 8006436:	d901      	bls.n	800643c <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 8006438:	2303      	movs	r3, #3
 800643a:	e099      	b.n	8006570 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800643c:	4b24      	ldr	r3, [pc, #144]	@ (80064d0 <HAL_RCC_OscConfig+0x778>)
 800643e:	681b      	ldr	r3, [r3, #0]
 8006440:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006444:	2b00      	cmp	r3, #0
 8006446:	d1f0      	bne.n	800642a <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006448:	4b21      	ldr	r3, [pc, #132]	@ (80064d0 <HAL_RCC_OscConfig+0x778>)
 800644a:	68da      	ldr	r2, [r3, #12]
 800644c:	4b21      	ldr	r3, [pc, #132]	@ (80064d4 <HAL_RCC_OscConfig+0x77c>)
 800644e:	4013      	ands	r3, r2
 8006450:	687a      	ldr	r2, [r7, #4]
 8006452:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8006454:	687a      	ldr	r2, [r7, #4]
 8006456:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8006458:	3a01      	subs	r2, #1
 800645a:	0112      	lsls	r2, r2, #4
 800645c:	4311      	orrs	r1, r2
 800645e:	687a      	ldr	r2, [r7, #4]
 8006460:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8006462:	0212      	lsls	r2, r2, #8
 8006464:	4311      	orrs	r1, r2
 8006466:	687a      	ldr	r2, [r7, #4]
 8006468:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800646a:	0852      	lsrs	r2, r2, #1
 800646c:	3a01      	subs	r2, #1
 800646e:	0552      	lsls	r2, r2, #21
 8006470:	4311      	orrs	r1, r2
 8006472:	687a      	ldr	r2, [r7, #4]
 8006474:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8006476:	0852      	lsrs	r2, r2, #1
 8006478:	3a01      	subs	r2, #1
 800647a:	0652      	lsls	r2, r2, #25
 800647c:	4311      	orrs	r1, r2
 800647e:	687a      	ldr	r2, [r7, #4]
 8006480:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8006482:	06d2      	lsls	r2, r2, #27
 8006484:	430a      	orrs	r2, r1
 8006486:	4912      	ldr	r1, [pc, #72]	@ (80064d0 <HAL_RCC_OscConfig+0x778>)
 8006488:	4313      	orrs	r3, r2
 800648a:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 800648c:	4b10      	ldr	r3, [pc, #64]	@ (80064d0 <HAL_RCC_OscConfig+0x778>)
 800648e:	681b      	ldr	r3, [r3, #0]
 8006490:	4a0f      	ldr	r2, [pc, #60]	@ (80064d0 <HAL_RCC_OscConfig+0x778>)
 8006492:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8006496:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8006498:	4b0d      	ldr	r3, [pc, #52]	@ (80064d0 <HAL_RCC_OscConfig+0x778>)
 800649a:	68db      	ldr	r3, [r3, #12]
 800649c:	4a0c      	ldr	r2, [pc, #48]	@ (80064d0 <HAL_RCC_OscConfig+0x778>)
 800649e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80064a2:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80064a4:	f7fc fdbc 	bl	8003020 <HAL_GetTick>
 80064a8:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80064aa:	e008      	b.n	80064be <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80064ac:	f7fc fdb8 	bl	8003020 <HAL_GetTick>
 80064b0:	4602      	mov	r2, r0
 80064b2:	693b      	ldr	r3, [r7, #16]
 80064b4:	1ad3      	subs	r3, r2, r3
 80064b6:	2b02      	cmp	r3, #2
 80064b8:	d901      	bls.n	80064be <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 80064ba:	2303      	movs	r3, #3
 80064bc:	e058      	b.n	8006570 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80064be:	4b04      	ldr	r3, [pc, #16]	@ (80064d0 <HAL_RCC_OscConfig+0x778>)
 80064c0:	681b      	ldr	r3, [r3, #0]
 80064c2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80064c6:	2b00      	cmp	r3, #0
 80064c8:	d0f0      	beq.n	80064ac <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80064ca:	e050      	b.n	800656e <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80064cc:	2301      	movs	r3, #1
 80064ce:	e04f      	b.n	8006570 <HAL_RCC_OscConfig+0x818>
 80064d0:	40021000 	.word	0x40021000
 80064d4:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80064d8:	4b27      	ldr	r3, [pc, #156]	@ (8006578 <HAL_RCC_OscConfig+0x820>)
 80064da:	681b      	ldr	r3, [r3, #0]
 80064dc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80064e0:	2b00      	cmp	r3, #0
 80064e2:	d144      	bne.n	800656e <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80064e4:	4b24      	ldr	r3, [pc, #144]	@ (8006578 <HAL_RCC_OscConfig+0x820>)
 80064e6:	681b      	ldr	r3, [r3, #0]
 80064e8:	4a23      	ldr	r2, [pc, #140]	@ (8006578 <HAL_RCC_OscConfig+0x820>)
 80064ea:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80064ee:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80064f0:	4b21      	ldr	r3, [pc, #132]	@ (8006578 <HAL_RCC_OscConfig+0x820>)
 80064f2:	68db      	ldr	r3, [r3, #12]
 80064f4:	4a20      	ldr	r2, [pc, #128]	@ (8006578 <HAL_RCC_OscConfig+0x820>)
 80064f6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80064fa:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80064fc:	f7fc fd90 	bl	8003020 <HAL_GetTick>
 8006500:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006502:	e008      	b.n	8006516 <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006504:	f7fc fd8c 	bl	8003020 <HAL_GetTick>
 8006508:	4602      	mov	r2, r0
 800650a:	693b      	ldr	r3, [r7, #16]
 800650c:	1ad3      	subs	r3, r2, r3
 800650e:	2b02      	cmp	r3, #2
 8006510:	d901      	bls.n	8006516 <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 8006512:	2303      	movs	r3, #3
 8006514:	e02c      	b.n	8006570 <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006516:	4b18      	ldr	r3, [pc, #96]	@ (8006578 <HAL_RCC_OscConfig+0x820>)
 8006518:	681b      	ldr	r3, [r3, #0]
 800651a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800651e:	2b00      	cmp	r3, #0
 8006520:	d0f0      	beq.n	8006504 <HAL_RCC_OscConfig+0x7ac>
 8006522:	e024      	b.n	800656e <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8006524:	69bb      	ldr	r3, [r7, #24]
 8006526:	2b0c      	cmp	r3, #12
 8006528:	d01f      	beq.n	800656a <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800652a:	4b13      	ldr	r3, [pc, #76]	@ (8006578 <HAL_RCC_OscConfig+0x820>)
 800652c:	681b      	ldr	r3, [r3, #0]
 800652e:	4a12      	ldr	r2, [pc, #72]	@ (8006578 <HAL_RCC_OscConfig+0x820>)
 8006530:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006534:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006536:	f7fc fd73 	bl	8003020 <HAL_GetTick>
 800653a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800653c:	e008      	b.n	8006550 <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800653e:	f7fc fd6f 	bl	8003020 <HAL_GetTick>
 8006542:	4602      	mov	r2, r0
 8006544:	693b      	ldr	r3, [r7, #16]
 8006546:	1ad3      	subs	r3, r2, r3
 8006548:	2b02      	cmp	r3, #2
 800654a:	d901      	bls.n	8006550 <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 800654c:	2303      	movs	r3, #3
 800654e:	e00f      	b.n	8006570 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006550:	4b09      	ldr	r3, [pc, #36]	@ (8006578 <HAL_RCC_OscConfig+0x820>)
 8006552:	681b      	ldr	r3, [r3, #0]
 8006554:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006558:	2b00      	cmp	r3, #0
 800655a:	d1f0      	bne.n	800653e <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 800655c:	4b06      	ldr	r3, [pc, #24]	@ (8006578 <HAL_RCC_OscConfig+0x820>)
 800655e:	68da      	ldr	r2, [r3, #12]
 8006560:	4905      	ldr	r1, [pc, #20]	@ (8006578 <HAL_RCC_OscConfig+0x820>)
 8006562:	4b06      	ldr	r3, [pc, #24]	@ (800657c <HAL_RCC_OscConfig+0x824>)
 8006564:	4013      	ands	r3, r2
 8006566:	60cb      	str	r3, [r1, #12]
 8006568:	e001      	b.n	800656e <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800656a:	2301      	movs	r3, #1
 800656c:	e000      	b.n	8006570 <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 800656e:	2300      	movs	r3, #0
}
 8006570:	4618      	mov	r0, r3
 8006572:	3720      	adds	r7, #32
 8006574:	46bd      	mov	sp, r7
 8006576:	bd80      	pop	{r7, pc}
 8006578:	40021000 	.word	0x40021000
 800657c:	feeefffc 	.word	0xfeeefffc

08006580 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006580:	b580      	push	{r7, lr}
 8006582:	b084      	sub	sp, #16
 8006584:	af00      	add	r7, sp, #0
 8006586:	6078      	str	r0, [r7, #4]
 8006588:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	2b00      	cmp	r3, #0
 800658e:	d101      	bne.n	8006594 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006590:	2301      	movs	r3, #1
 8006592:	e0e7      	b.n	8006764 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006594:	4b75      	ldr	r3, [pc, #468]	@ (800676c <HAL_RCC_ClockConfig+0x1ec>)
 8006596:	681b      	ldr	r3, [r3, #0]
 8006598:	f003 0307 	and.w	r3, r3, #7
 800659c:	683a      	ldr	r2, [r7, #0]
 800659e:	429a      	cmp	r2, r3
 80065a0:	d910      	bls.n	80065c4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80065a2:	4b72      	ldr	r3, [pc, #456]	@ (800676c <HAL_RCC_ClockConfig+0x1ec>)
 80065a4:	681b      	ldr	r3, [r3, #0]
 80065a6:	f023 0207 	bic.w	r2, r3, #7
 80065aa:	4970      	ldr	r1, [pc, #448]	@ (800676c <HAL_RCC_ClockConfig+0x1ec>)
 80065ac:	683b      	ldr	r3, [r7, #0]
 80065ae:	4313      	orrs	r3, r2
 80065b0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80065b2:	4b6e      	ldr	r3, [pc, #440]	@ (800676c <HAL_RCC_ClockConfig+0x1ec>)
 80065b4:	681b      	ldr	r3, [r3, #0]
 80065b6:	f003 0307 	and.w	r3, r3, #7
 80065ba:	683a      	ldr	r2, [r7, #0]
 80065bc:	429a      	cmp	r2, r3
 80065be:	d001      	beq.n	80065c4 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80065c0:	2301      	movs	r3, #1
 80065c2:	e0cf      	b.n	8006764 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	681b      	ldr	r3, [r3, #0]
 80065c8:	f003 0302 	and.w	r3, r3, #2
 80065cc:	2b00      	cmp	r3, #0
 80065ce:	d010      	beq.n	80065f2 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	689a      	ldr	r2, [r3, #8]
 80065d4:	4b66      	ldr	r3, [pc, #408]	@ (8006770 <HAL_RCC_ClockConfig+0x1f0>)
 80065d6:	689b      	ldr	r3, [r3, #8]
 80065d8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80065dc:	429a      	cmp	r2, r3
 80065de:	d908      	bls.n	80065f2 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80065e0:	4b63      	ldr	r3, [pc, #396]	@ (8006770 <HAL_RCC_ClockConfig+0x1f0>)
 80065e2:	689b      	ldr	r3, [r3, #8]
 80065e4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	689b      	ldr	r3, [r3, #8]
 80065ec:	4960      	ldr	r1, [pc, #384]	@ (8006770 <HAL_RCC_ClockConfig+0x1f0>)
 80065ee:	4313      	orrs	r3, r2
 80065f0:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	681b      	ldr	r3, [r3, #0]
 80065f6:	f003 0301 	and.w	r3, r3, #1
 80065fa:	2b00      	cmp	r3, #0
 80065fc:	d04c      	beq.n	8006698 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	685b      	ldr	r3, [r3, #4]
 8006602:	2b03      	cmp	r3, #3
 8006604:	d107      	bne.n	8006616 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006606:	4b5a      	ldr	r3, [pc, #360]	@ (8006770 <HAL_RCC_ClockConfig+0x1f0>)
 8006608:	681b      	ldr	r3, [r3, #0]
 800660a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800660e:	2b00      	cmp	r3, #0
 8006610:	d121      	bne.n	8006656 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8006612:	2301      	movs	r3, #1
 8006614:	e0a6      	b.n	8006764 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	685b      	ldr	r3, [r3, #4]
 800661a:	2b02      	cmp	r3, #2
 800661c:	d107      	bne.n	800662e <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800661e:	4b54      	ldr	r3, [pc, #336]	@ (8006770 <HAL_RCC_ClockConfig+0x1f0>)
 8006620:	681b      	ldr	r3, [r3, #0]
 8006622:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006626:	2b00      	cmp	r3, #0
 8006628:	d115      	bne.n	8006656 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800662a:	2301      	movs	r3, #1
 800662c:	e09a      	b.n	8006764 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	685b      	ldr	r3, [r3, #4]
 8006632:	2b00      	cmp	r3, #0
 8006634:	d107      	bne.n	8006646 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8006636:	4b4e      	ldr	r3, [pc, #312]	@ (8006770 <HAL_RCC_ClockConfig+0x1f0>)
 8006638:	681b      	ldr	r3, [r3, #0]
 800663a:	f003 0302 	and.w	r3, r3, #2
 800663e:	2b00      	cmp	r3, #0
 8006640:	d109      	bne.n	8006656 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8006642:	2301      	movs	r3, #1
 8006644:	e08e      	b.n	8006764 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006646:	4b4a      	ldr	r3, [pc, #296]	@ (8006770 <HAL_RCC_ClockConfig+0x1f0>)
 8006648:	681b      	ldr	r3, [r3, #0]
 800664a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800664e:	2b00      	cmp	r3, #0
 8006650:	d101      	bne.n	8006656 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8006652:	2301      	movs	r3, #1
 8006654:	e086      	b.n	8006764 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8006656:	4b46      	ldr	r3, [pc, #280]	@ (8006770 <HAL_RCC_ClockConfig+0x1f0>)
 8006658:	689b      	ldr	r3, [r3, #8]
 800665a:	f023 0203 	bic.w	r2, r3, #3
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	685b      	ldr	r3, [r3, #4]
 8006662:	4943      	ldr	r1, [pc, #268]	@ (8006770 <HAL_RCC_ClockConfig+0x1f0>)
 8006664:	4313      	orrs	r3, r2
 8006666:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006668:	f7fc fcda 	bl	8003020 <HAL_GetTick>
 800666c:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800666e:	e00a      	b.n	8006686 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006670:	f7fc fcd6 	bl	8003020 <HAL_GetTick>
 8006674:	4602      	mov	r2, r0
 8006676:	68fb      	ldr	r3, [r7, #12]
 8006678:	1ad3      	subs	r3, r2, r3
 800667a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800667e:	4293      	cmp	r3, r2
 8006680:	d901      	bls.n	8006686 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8006682:	2303      	movs	r3, #3
 8006684:	e06e      	b.n	8006764 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006686:	4b3a      	ldr	r3, [pc, #232]	@ (8006770 <HAL_RCC_ClockConfig+0x1f0>)
 8006688:	689b      	ldr	r3, [r3, #8]
 800668a:	f003 020c 	and.w	r2, r3, #12
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	685b      	ldr	r3, [r3, #4]
 8006692:	009b      	lsls	r3, r3, #2
 8006694:	429a      	cmp	r2, r3
 8006696:	d1eb      	bne.n	8006670 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	681b      	ldr	r3, [r3, #0]
 800669c:	f003 0302 	and.w	r3, r3, #2
 80066a0:	2b00      	cmp	r3, #0
 80066a2:	d010      	beq.n	80066c6 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	689a      	ldr	r2, [r3, #8]
 80066a8:	4b31      	ldr	r3, [pc, #196]	@ (8006770 <HAL_RCC_ClockConfig+0x1f0>)
 80066aa:	689b      	ldr	r3, [r3, #8]
 80066ac:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80066b0:	429a      	cmp	r2, r3
 80066b2:	d208      	bcs.n	80066c6 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80066b4:	4b2e      	ldr	r3, [pc, #184]	@ (8006770 <HAL_RCC_ClockConfig+0x1f0>)
 80066b6:	689b      	ldr	r3, [r3, #8]
 80066b8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	689b      	ldr	r3, [r3, #8]
 80066c0:	492b      	ldr	r1, [pc, #172]	@ (8006770 <HAL_RCC_ClockConfig+0x1f0>)
 80066c2:	4313      	orrs	r3, r2
 80066c4:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80066c6:	4b29      	ldr	r3, [pc, #164]	@ (800676c <HAL_RCC_ClockConfig+0x1ec>)
 80066c8:	681b      	ldr	r3, [r3, #0]
 80066ca:	f003 0307 	and.w	r3, r3, #7
 80066ce:	683a      	ldr	r2, [r7, #0]
 80066d0:	429a      	cmp	r2, r3
 80066d2:	d210      	bcs.n	80066f6 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80066d4:	4b25      	ldr	r3, [pc, #148]	@ (800676c <HAL_RCC_ClockConfig+0x1ec>)
 80066d6:	681b      	ldr	r3, [r3, #0]
 80066d8:	f023 0207 	bic.w	r2, r3, #7
 80066dc:	4923      	ldr	r1, [pc, #140]	@ (800676c <HAL_RCC_ClockConfig+0x1ec>)
 80066de:	683b      	ldr	r3, [r7, #0]
 80066e0:	4313      	orrs	r3, r2
 80066e2:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80066e4:	4b21      	ldr	r3, [pc, #132]	@ (800676c <HAL_RCC_ClockConfig+0x1ec>)
 80066e6:	681b      	ldr	r3, [r3, #0]
 80066e8:	f003 0307 	and.w	r3, r3, #7
 80066ec:	683a      	ldr	r2, [r7, #0]
 80066ee:	429a      	cmp	r2, r3
 80066f0:	d001      	beq.n	80066f6 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 80066f2:	2301      	movs	r3, #1
 80066f4:	e036      	b.n	8006764 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	681b      	ldr	r3, [r3, #0]
 80066fa:	f003 0304 	and.w	r3, r3, #4
 80066fe:	2b00      	cmp	r3, #0
 8006700:	d008      	beq.n	8006714 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006702:	4b1b      	ldr	r3, [pc, #108]	@ (8006770 <HAL_RCC_ClockConfig+0x1f0>)
 8006704:	689b      	ldr	r3, [r3, #8]
 8006706:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	68db      	ldr	r3, [r3, #12]
 800670e:	4918      	ldr	r1, [pc, #96]	@ (8006770 <HAL_RCC_ClockConfig+0x1f0>)
 8006710:	4313      	orrs	r3, r2
 8006712:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	681b      	ldr	r3, [r3, #0]
 8006718:	f003 0308 	and.w	r3, r3, #8
 800671c:	2b00      	cmp	r3, #0
 800671e:	d009      	beq.n	8006734 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006720:	4b13      	ldr	r3, [pc, #76]	@ (8006770 <HAL_RCC_ClockConfig+0x1f0>)
 8006722:	689b      	ldr	r3, [r3, #8]
 8006724:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	691b      	ldr	r3, [r3, #16]
 800672c:	00db      	lsls	r3, r3, #3
 800672e:	4910      	ldr	r1, [pc, #64]	@ (8006770 <HAL_RCC_ClockConfig+0x1f0>)
 8006730:	4313      	orrs	r3, r2
 8006732:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8006734:	f000 f824 	bl	8006780 <HAL_RCC_GetSysClockFreq>
 8006738:	4602      	mov	r2, r0
 800673a:	4b0d      	ldr	r3, [pc, #52]	@ (8006770 <HAL_RCC_ClockConfig+0x1f0>)
 800673c:	689b      	ldr	r3, [r3, #8]
 800673e:	091b      	lsrs	r3, r3, #4
 8006740:	f003 030f 	and.w	r3, r3, #15
 8006744:	490b      	ldr	r1, [pc, #44]	@ (8006774 <HAL_RCC_ClockConfig+0x1f4>)
 8006746:	5ccb      	ldrb	r3, [r1, r3]
 8006748:	f003 031f 	and.w	r3, r3, #31
 800674c:	fa22 f303 	lsr.w	r3, r2, r3
 8006750:	4a09      	ldr	r2, [pc, #36]	@ (8006778 <HAL_RCC_ClockConfig+0x1f8>)
 8006752:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8006754:	4b09      	ldr	r3, [pc, #36]	@ (800677c <HAL_RCC_ClockConfig+0x1fc>)
 8006756:	681b      	ldr	r3, [r3, #0]
 8006758:	4618      	mov	r0, r3
 800675a:	f7fb ff35 	bl	80025c8 <HAL_InitTick>
 800675e:	4603      	mov	r3, r0
 8006760:	72fb      	strb	r3, [r7, #11]

  return status;
 8006762:	7afb      	ldrb	r3, [r7, #11]
}
 8006764:	4618      	mov	r0, r3
 8006766:	3710      	adds	r7, #16
 8006768:	46bd      	mov	sp, r7
 800676a:	bd80      	pop	{r7, pc}
 800676c:	40022000 	.word	0x40022000
 8006770:	40021000 	.word	0x40021000
 8006774:	0801d3e4 	.word	0x0801d3e4
 8006778:	20000020 	.word	0x20000020
 800677c:	20000024 	.word	0x20000024

08006780 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006780:	b480      	push	{r7}
 8006782:	b089      	sub	sp, #36	@ 0x24
 8006784:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8006786:	2300      	movs	r3, #0
 8006788:	61fb      	str	r3, [r7, #28]
 800678a:	2300      	movs	r3, #0
 800678c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800678e:	4b3e      	ldr	r3, [pc, #248]	@ (8006888 <HAL_RCC_GetSysClockFreq+0x108>)
 8006790:	689b      	ldr	r3, [r3, #8]
 8006792:	f003 030c 	and.w	r3, r3, #12
 8006796:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8006798:	4b3b      	ldr	r3, [pc, #236]	@ (8006888 <HAL_RCC_GetSysClockFreq+0x108>)
 800679a:	68db      	ldr	r3, [r3, #12]
 800679c:	f003 0303 	and.w	r3, r3, #3
 80067a0:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80067a2:	693b      	ldr	r3, [r7, #16]
 80067a4:	2b00      	cmp	r3, #0
 80067a6:	d005      	beq.n	80067b4 <HAL_RCC_GetSysClockFreq+0x34>
 80067a8:	693b      	ldr	r3, [r7, #16]
 80067aa:	2b0c      	cmp	r3, #12
 80067ac:	d121      	bne.n	80067f2 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80067ae:	68fb      	ldr	r3, [r7, #12]
 80067b0:	2b01      	cmp	r3, #1
 80067b2:	d11e      	bne.n	80067f2 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80067b4:	4b34      	ldr	r3, [pc, #208]	@ (8006888 <HAL_RCC_GetSysClockFreq+0x108>)
 80067b6:	681b      	ldr	r3, [r3, #0]
 80067b8:	f003 0308 	and.w	r3, r3, #8
 80067bc:	2b00      	cmp	r3, #0
 80067be:	d107      	bne.n	80067d0 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80067c0:	4b31      	ldr	r3, [pc, #196]	@ (8006888 <HAL_RCC_GetSysClockFreq+0x108>)
 80067c2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80067c6:	0a1b      	lsrs	r3, r3, #8
 80067c8:	f003 030f 	and.w	r3, r3, #15
 80067cc:	61fb      	str	r3, [r7, #28]
 80067ce:	e005      	b.n	80067dc <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80067d0:	4b2d      	ldr	r3, [pc, #180]	@ (8006888 <HAL_RCC_GetSysClockFreq+0x108>)
 80067d2:	681b      	ldr	r3, [r3, #0]
 80067d4:	091b      	lsrs	r3, r3, #4
 80067d6:	f003 030f 	and.w	r3, r3, #15
 80067da:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80067dc:	4a2b      	ldr	r2, [pc, #172]	@ (800688c <HAL_RCC_GetSysClockFreq+0x10c>)
 80067de:	69fb      	ldr	r3, [r7, #28]
 80067e0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80067e4:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80067e6:	693b      	ldr	r3, [r7, #16]
 80067e8:	2b00      	cmp	r3, #0
 80067ea:	d10d      	bne.n	8006808 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80067ec:	69fb      	ldr	r3, [r7, #28]
 80067ee:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80067f0:	e00a      	b.n	8006808 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80067f2:	693b      	ldr	r3, [r7, #16]
 80067f4:	2b04      	cmp	r3, #4
 80067f6:	d102      	bne.n	80067fe <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80067f8:	4b25      	ldr	r3, [pc, #148]	@ (8006890 <HAL_RCC_GetSysClockFreq+0x110>)
 80067fa:	61bb      	str	r3, [r7, #24]
 80067fc:	e004      	b.n	8006808 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80067fe:	693b      	ldr	r3, [r7, #16]
 8006800:	2b08      	cmp	r3, #8
 8006802:	d101      	bne.n	8006808 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8006804:	4b23      	ldr	r3, [pc, #140]	@ (8006894 <HAL_RCC_GetSysClockFreq+0x114>)
 8006806:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8006808:	693b      	ldr	r3, [r7, #16]
 800680a:	2b0c      	cmp	r3, #12
 800680c:	d134      	bne.n	8006878 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800680e:	4b1e      	ldr	r3, [pc, #120]	@ (8006888 <HAL_RCC_GetSysClockFreq+0x108>)
 8006810:	68db      	ldr	r3, [r3, #12]
 8006812:	f003 0303 	and.w	r3, r3, #3
 8006816:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8006818:	68bb      	ldr	r3, [r7, #8]
 800681a:	2b02      	cmp	r3, #2
 800681c:	d003      	beq.n	8006826 <HAL_RCC_GetSysClockFreq+0xa6>
 800681e:	68bb      	ldr	r3, [r7, #8]
 8006820:	2b03      	cmp	r3, #3
 8006822:	d003      	beq.n	800682c <HAL_RCC_GetSysClockFreq+0xac>
 8006824:	e005      	b.n	8006832 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8006826:	4b1a      	ldr	r3, [pc, #104]	@ (8006890 <HAL_RCC_GetSysClockFreq+0x110>)
 8006828:	617b      	str	r3, [r7, #20]
      break;
 800682a:	e005      	b.n	8006838 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 800682c:	4b19      	ldr	r3, [pc, #100]	@ (8006894 <HAL_RCC_GetSysClockFreq+0x114>)
 800682e:	617b      	str	r3, [r7, #20]
      break;
 8006830:	e002      	b.n	8006838 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8006832:	69fb      	ldr	r3, [r7, #28]
 8006834:	617b      	str	r3, [r7, #20]
      break;
 8006836:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8006838:	4b13      	ldr	r3, [pc, #76]	@ (8006888 <HAL_RCC_GetSysClockFreq+0x108>)
 800683a:	68db      	ldr	r3, [r3, #12]
 800683c:	091b      	lsrs	r3, r3, #4
 800683e:	f003 0307 	and.w	r3, r3, #7
 8006842:	3301      	adds	r3, #1
 8006844:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8006846:	4b10      	ldr	r3, [pc, #64]	@ (8006888 <HAL_RCC_GetSysClockFreq+0x108>)
 8006848:	68db      	ldr	r3, [r3, #12]
 800684a:	0a1b      	lsrs	r3, r3, #8
 800684c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006850:	697a      	ldr	r2, [r7, #20]
 8006852:	fb03 f202 	mul.w	r2, r3, r2
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	fbb2 f3f3 	udiv	r3, r2, r3
 800685c:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800685e:	4b0a      	ldr	r3, [pc, #40]	@ (8006888 <HAL_RCC_GetSysClockFreq+0x108>)
 8006860:	68db      	ldr	r3, [r3, #12]
 8006862:	0e5b      	lsrs	r3, r3, #25
 8006864:	f003 0303 	and.w	r3, r3, #3
 8006868:	3301      	adds	r3, #1
 800686a:	005b      	lsls	r3, r3, #1
 800686c:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800686e:	697a      	ldr	r2, [r7, #20]
 8006870:	683b      	ldr	r3, [r7, #0]
 8006872:	fbb2 f3f3 	udiv	r3, r2, r3
 8006876:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8006878:	69bb      	ldr	r3, [r7, #24]
}
 800687a:	4618      	mov	r0, r3
 800687c:	3724      	adds	r7, #36	@ 0x24
 800687e:	46bd      	mov	sp, r7
 8006880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006884:	4770      	bx	lr
 8006886:	bf00      	nop
 8006888:	40021000 	.word	0x40021000
 800688c:	0801d3fc 	.word	0x0801d3fc
 8006890:	00f42400 	.word	0x00f42400
 8006894:	007a1200 	.word	0x007a1200

08006898 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006898:	b480      	push	{r7}
 800689a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800689c:	4b03      	ldr	r3, [pc, #12]	@ (80068ac <HAL_RCC_GetHCLKFreq+0x14>)
 800689e:	681b      	ldr	r3, [r3, #0]
}
 80068a0:	4618      	mov	r0, r3
 80068a2:	46bd      	mov	sp, r7
 80068a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068a8:	4770      	bx	lr
 80068aa:	bf00      	nop
 80068ac:	20000020 	.word	0x20000020

080068b0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80068b0:	b580      	push	{r7, lr}
 80068b2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80068b4:	f7ff fff0 	bl	8006898 <HAL_RCC_GetHCLKFreq>
 80068b8:	4602      	mov	r2, r0
 80068ba:	4b06      	ldr	r3, [pc, #24]	@ (80068d4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80068bc:	689b      	ldr	r3, [r3, #8]
 80068be:	0a1b      	lsrs	r3, r3, #8
 80068c0:	f003 0307 	and.w	r3, r3, #7
 80068c4:	4904      	ldr	r1, [pc, #16]	@ (80068d8 <HAL_RCC_GetPCLK1Freq+0x28>)
 80068c6:	5ccb      	ldrb	r3, [r1, r3]
 80068c8:	f003 031f 	and.w	r3, r3, #31
 80068cc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80068d0:	4618      	mov	r0, r3
 80068d2:	bd80      	pop	{r7, pc}
 80068d4:	40021000 	.word	0x40021000
 80068d8:	0801d3f4 	.word	0x0801d3f4

080068dc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80068dc:	b580      	push	{r7, lr}
 80068de:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80068e0:	f7ff ffda 	bl	8006898 <HAL_RCC_GetHCLKFreq>
 80068e4:	4602      	mov	r2, r0
 80068e6:	4b06      	ldr	r3, [pc, #24]	@ (8006900 <HAL_RCC_GetPCLK2Freq+0x24>)
 80068e8:	689b      	ldr	r3, [r3, #8]
 80068ea:	0adb      	lsrs	r3, r3, #11
 80068ec:	f003 0307 	and.w	r3, r3, #7
 80068f0:	4904      	ldr	r1, [pc, #16]	@ (8006904 <HAL_RCC_GetPCLK2Freq+0x28>)
 80068f2:	5ccb      	ldrb	r3, [r1, r3]
 80068f4:	f003 031f 	and.w	r3, r3, #31
 80068f8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80068fc:	4618      	mov	r0, r3
 80068fe:	bd80      	pop	{r7, pc}
 8006900:	40021000 	.word	0x40021000
 8006904:	0801d3f4 	.word	0x0801d3f4

08006908 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8006908:	b480      	push	{r7}
 800690a:	b083      	sub	sp, #12
 800690c:	af00      	add	r7, sp, #0
 800690e:	6078      	str	r0, [r7, #4]
 8006910:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	220f      	movs	r2, #15
 8006916:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8006918:	4b12      	ldr	r3, [pc, #72]	@ (8006964 <HAL_RCC_GetClockConfig+0x5c>)
 800691a:	689b      	ldr	r3, [r3, #8]
 800691c:	f003 0203 	and.w	r2, r3, #3
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8006924:	4b0f      	ldr	r3, [pc, #60]	@ (8006964 <HAL_RCC_GetClockConfig+0x5c>)
 8006926:	689b      	ldr	r3, [r3, #8]
 8006928:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8006930:	4b0c      	ldr	r3, [pc, #48]	@ (8006964 <HAL_RCC_GetClockConfig+0x5c>)
 8006932:	689b      	ldr	r3, [r3, #8]
 8006934:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 800693c:	4b09      	ldr	r3, [pc, #36]	@ (8006964 <HAL_RCC_GetClockConfig+0x5c>)
 800693e:	689b      	ldr	r3, [r3, #8]
 8006940:	08db      	lsrs	r3, r3, #3
 8006942:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 800694a:	4b07      	ldr	r3, [pc, #28]	@ (8006968 <HAL_RCC_GetClockConfig+0x60>)
 800694c:	681b      	ldr	r3, [r3, #0]
 800694e:	f003 0207 	and.w	r2, r3, #7
 8006952:	683b      	ldr	r3, [r7, #0]
 8006954:	601a      	str	r2, [r3, #0]
}
 8006956:	bf00      	nop
 8006958:	370c      	adds	r7, #12
 800695a:	46bd      	mov	sp, r7
 800695c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006960:	4770      	bx	lr
 8006962:	bf00      	nop
 8006964:	40021000 	.word	0x40021000
 8006968:	40022000 	.word	0x40022000

0800696c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 800696c:	b580      	push	{r7, lr}
 800696e:	b086      	sub	sp, #24
 8006970:	af00      	add	r7, sp, #0
 8006972:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8006974:	2300      	movs	r3, #0
 8006976:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8006978:	4b2a      	ldr	r3, [pc, #168]	@ (8006a24 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800697a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800697c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006980:	2b00      	cmp	r3, #0
 8006982:	d003      	beq.n	800698c <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8006984:	f7ff f984 	bl	8005c90 <HAL_PWREx_GetVoltageRange>
 8006988:	6178      	str	r0, [r7, #20]
 800698a:	e014      	b.n	80069b6 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 800698c:	4b25      	ldr	r3, [pc, #148]	@ (8006a24 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800698e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006990:	4a24      	ldr	r2, [pc, #144]	@ (8006a24 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8006992:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006996:	6593      	str	r3, [r2, #88]	@ 0x58
 8006998:	4b22      	ldr	r3, [pc, #136]	@ (8006a24 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800699a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800699c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80069a0:	60fb      	str	r3, [r7, #12]
 80069a2:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80069a4:	f7ff f974 	bl	8005c90 <HAL_PWREx_GetVoltageRange>
 80069a8:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80069aa:	4b1e      	ldr	r3, [pc, #120]	@ (8006a24 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80069ac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80069ae:	4a1d      	ldr	r2, [pc, #116]	@ (8006a24 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80069b0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80069b4:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80069b6:	697b      	ldr	r3, [r7, #20]
 80069b8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80069bc:	d10b      	bne.n	80069d6 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	2b80      	cmp	r3, #128	@ 0x80
 80069c2:	d919      	bls.n	80069f8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	2ba0      	cmp	r3, #160	@ 0xa0
 80069c8:	d902      	bls.n	80069d0 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80069ca:	2302      	movs	r3, #2
 80069cc:	613b      	str	r3, [r7, #16]
 80069ce:	e013      	b.n	80069f8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80069d0:	2301      	movs	r3, #1
 80069d2:	613b      	str	r3, [r7, #16]
 80069d4:	e010      	b.n	80069f8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	2b80      	cmp	r3, #128	@ 0x80
 80069da:	d902      	bls.n	80069e2 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80069dc:	2303      	movs	r3, #3
 80069de:	613b      	str	r3, [r7, #16]
 80069e0:	e00a      	b.n	80069f8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	2b80      	cmp	r3, #128	@ 0x80
 80069e6:	d102      	bne.n	80069ee <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80069e8:	2302      	movs	r3, #2
 80069ea:	613b      	str	r3, [r7, #16]
 80069ec:	e004      	b.n	80069f8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	2b70      	cmp	r3, #112	@ 0x70
 80069f2:	d101      	bne.n	80069f8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80069f4:	2301      	movs	r3, #1
 80069f6:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80069f8:	4b0b      	ldr	r3, [pc, #44]	@ (8006a28 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80069fa:	681b      	ldr	r3, [r3, #0]
 80069fc:	f023 0207 	bic.w	r2, r3, #7
 8006a00:	4909      	ldr	r1, [pc, #36]	@ (8006a28 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8006a02:	693b      	ldr	r3, [r7, #16]
 8006a04:	4313      	orrs	r3, r2
 8006a06:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8006a08:	4b07      	ldr	r3, [pc, #28]	@ (8006a28 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8006a0a:	681b      	ldr	r3, [r3, #0]
 8006a0c:	f003 0307 	and.w	r3, r3, #7
 8006a10:	693a      	ldr	r2, [r7, #16]
 8006a12:	429a      	cmp	r2, r3
 8006a14:	d001      	beq.n	8006a1a <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8006a16:	2301      	movs	r3, #1
 8006a18:	e000      	b.n	8006a1c <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8006a1a:	2300      	movs	r3, #0
}
 8006a1c:	4618      	mov	r0, r3
 8006a1e:	3718      	adds	r7, #24
 8006a20:	46bd      	mov	sp, r7
 8006a22:	bd80      	pop	{r7, pc}
 8006a24:	40021000 	.word	0x40021000
 8006a28:	40022000 	.word	0x40022000

08006a2c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006a2c:	b580      	push	{r7, lr}
 8006a2e:	b086      	sub	sp, #24
 8006a30:	af00      	add	r7, sp, #0
 8006a32:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8006a34:	2300      	movs	r3, #0
 8006a36:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8006a38:	2300      	movs	r3, #0
 8006a3a:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	681b      	ldr	r3, [r3, #0]
 8006a40:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006a44:	2b00      	cmp	r3, #0
 8006a46:	d031      	beq.n	8006aac <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006a4c:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8006a50:	d01a      	beq.n	8006a88 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 8006a52:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8006a56:	d814      	bhi.n	8006a82 <HAL_RCCEx_PeriphCLKConfig+0x56>
 8006a58:	2b00      	cmp	r3, #0
 8006a5a:	d009      	beq.n	8006a70 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8006a5c:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8006a60:	d10f      	bne.n	8006a82 <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 8006a62:	4b5d      	ldr	r3, [pc, #372]	@ (8006bd8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8006a64:	68db      	ldr	r3, [r3, #12]
 8006a66:	4a5c      	ldr	r2, [pc, #368]	@ (8006bd8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8006a68:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006a6c:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8006a6e:	e00c      	b.n	8006a8a <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	3304      	adds	r3, #4
 8006a74:	2100      	movs	r1, #0
 8006a76:	4618      	mov	r0, r3
 8006a78:	f000 f9de 	bl	8006e38 <RCCEx_PLLSAI1_Config>
 8006a7c:	4603      	mov	r3, r0
 8006a7e:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8006a80:	e003      	b.n	8006a8a <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006a82:	2301      	movs	r3, #1
 8006a84:	74fb      	strb	r3, [r7, #19]
      break;
 8006a86:	e000      	b.n	8006a8a <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 8006a88:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006a8a:	7cfb      	ldrb	r3, [r7, #19]
 8006a8c:	2b00      	cmp	r3, #0
 8006a8e:	d10b      	bne.n	8006aa8 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8006a90:	4b51      	ldr	r3, [pc, #324]	@ (8006bd8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8006a92:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006a96:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006a9e:	494e      	ldr	r1, [pc, #312]	@ (8006bd8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8006aa0:	4313      	orrs	r3, r2
 8006aa2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8006aa6:	e001      	b.n	8006aac <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006aa8:	7cfb      	ldrb	r3, [r7, #19]
 8006aaa:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	681b      	ldr	r3, [r3, #0]
 8006ab0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006ab4:	2b00      	cmp	r3, #0
 8006ab6:	f000 809e 	beq.w	8006bf6 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006aba:	2300      	movs	r3, #0
 8006abc:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8006abe:	4b46      	ldr	r3, [pc, #280]	@ (8006bd8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8006ac0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006ac2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006ac6:	2b00      	cmp	r3, #0
 8006ac8:	d101      	bne.n	8006ace <HAL_RCCEx_PeriphCLKConfig+0xa2>
 8006aca:	2301      	movs	r3, #1
 8006acc:	e000      	b.n	8006ad0 <HAL_RCCEx_PeriphCLKConfig+0xa4>
 8006ace:	2300      	movs	r3, #0
 8006ad0:	2b00      	cmp	r3, #0
 8006ad2:	d00d      	beq.n	8006af0 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006ad4:	4b40      	ldr	r3, [pc, #256]	@ (8006bd8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8006ad6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006ad8:	4a3f      	ldr	r2, [pc, #252]	@ (8006bd8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8006ada:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006ade:	6593      	str	r3, [r2, #88]	@ 0x58
 8006ae0:	4b3d      	ldr	r3, [pc, #244]	@ (8006bd8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8006ae2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006ae4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006ae8:	60bb      	str	r3, [r7, #8]
 8006aea:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006aec:	2301      	movs	r3, #1
 8006aee:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006af0:	4b3a      	ldr	r3, [pc, #232]	@ (8006bdc <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8006af2:	681b      	ldr	r3, [r3, #0]
 8006af4:	4a39      	ldr	r2, [pc, #228]	@ (8006bdc <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8006af6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006afa:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8006afc:	f7fc fa90 	bl	8003020 <HAL_GetTick>
 8006b00:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8006b02:	e009      	b.n	8006b18 <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006b04:	f7fc fa8c 	bl	8003020 <HAL_GetTick>
 8006b08:	4602      	mov	r2, r0
 8006b0a:	68fb      	ldr	r3, [r7, #12]
 8006b0c:	1ad3      	subs	r3, r2, r3
 8006b0e:	2b02      	cmp	r3, #2
 8006b10:	d902      	bls.n	8006b18 <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 8006b12:	2303      	movs	r3, #3
 8006b14:	74fb      	strb	r3, [r7, #19]
        break;
 8006b16:	e005      	b.n	8006b24 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8006b18:	4b30      	ldr	r3, [pc, #192]	@ (8006bdc <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8006b1a:	681b      	ldr	r3, [r3, #0]
 8006b1c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006b20:	2b00      	cmp	r3, #0
 8006b22:	d0ef      	beq.n	8006b04 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 8006b24:	7cfb      	ldrb	r3, [r7, #19]
 8006b26:	2b00      	cmp	r3, #0
 8006b28:	d15a      	bne.n	8006be0 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8006b2a:	4b2b      	ldr	r3, [pc, #172]	@ (8006bd8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8006b2c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006b30:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006b34:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8006b36:	697b      	ldr	r3, [r7, #20]
 8006b38:	2b00      	cmp	r3, #0
 8006b3a:	d01e      	beq.n	8006b7a <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006b40:	697a      	ldr	r2, [r7, #20]
 8006b42:	429a      	cmp	r2, r3
 8006b44:	d019      	beq.n	8006b7a <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8006b46:	4b24      	ldr	r3, [pc, #144]	@ (8006bd8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8006b48:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006b4c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006b50:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8006b52:	4b21      	ldr	r3, [pc, #132]	@ (8006bd8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8006b54:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006b58:	4a1f      	ldr	r2, [pc, #124]	@ (8006bd8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8006b5a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006b5e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8006b62:	4b1d      	ldr	r3, [pc, #116]	@ (8006bd8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8006b64:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006b68:	4a1b      	ldr	r2, [pc, #108]	@ (8006bd8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8006b6a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006b6e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8006b72:	4a19      	ldr	r2, [pc, #100]	@ (8006bd8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8006b74:	697b      	ldr	r3, [r7, #20]
 8006b76:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8006b7a:	697b      	ldr	r3, [r7, #20]
 8006b7c:	f003 0301 	and.w	r3, r3, #1
 8006b80:	2b00      	cmp	r3, #0
 8006b82:	d016      	beq.n	8006bb2 <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006b84:	f7fc fa4c 	bl	8003020 <HAL_GetTick>
 8006b88:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006b8a:	e00b      	b.n	8006ba4 <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006b8c:	f7fc fa48 	bl	8003020 <HAL_GetTick>
 8006b90:	4602      	mov	r2, r0
 8006b92:	68fb      	ldr	r3, [r7, #12]
 8006b94:	1ad3      	subs	r3, r2, r3
 8006b96:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006b9a:	4293      	cmp	r3, r2
 8006b9c:	d902      	bls.n	8006ba4 <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 8006b9e:	2303      	movs	r3, #3
 8006ba0:	74fb      	strb	r3, [r7, #19]
            break;
 8006ba2:	e006      	b.n	8006bb2 <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006ba4:	4b0c      	ldr	r3, [pc, #48]	@ (8006bd8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8006ba6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006baa:	f003 0302 	and.w	r3, r3, #2
 8006bae:	2b00      	cmp	r3, #0
 8006bb0:	d0ec      	beq.n	8006b8c <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 8006bb2:	7cfb      	ldrb	r3, [r7, #19]
 8006bb4:	2b00      	cmp	r3, #0
 8006bb6:	d10b      	bne.n	8006bd0 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006bb8:	4b07      	ldr	r3, [pc, #28]	@ (8006bd8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8006bba:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006bbe:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006bc6:	4904      	ldr	r1, [pc, #16]	@ (8006bd8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8006bc8:	4313      	orrs	r3, r2
 8006bca:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8006bce:	e009      	b.n	8006be4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8006bd0:	7cfb      	ldrb	r3, [r7, #19]
 8006bd2:	74bb      	strb	r3, [r7, #18]
 8006bd4:	e006      	b.n	8006be4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 8006bd6:	bf00      	nop
 8006bd8:	40021000 	.word	0x40021000
 8006bdc:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006be0:	7cfb      	ldrb	r3, [r7, #19]
 8006be2:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006be4:	7c7b      	ldrb	r3, [r7, #17]
 8006be6:	2b01      	cmp	r3, #1
 8006be8:	d105      	bne.n	8006bf6 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006bea:	4b8a      	ldr	r3, [pc, #552]	@ (8006e14 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8006bec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006bee:	4a89      	ldr	r2, [pc, #548]	@ (8006e14 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8006bf0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006bf4:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	681b      	ldr	r3, [r3, #0]
 8006bfa:	f003 0301 	and.w	r3, r3, #1
 8006bfe:	2b00      	cmp	r3, #0
 8006c00:	d00a      	beq.n	8006c18 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8006c02:	4b84      	ldr	r3, [pc, #528]	@ (8006e14 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8006c04:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006c08:	f023 0203 	bic.w	r2, r3, #3
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	6a1b      	ldr	r3, [r3, #32]
 8006c10:	4980      	ldr	r1, [pc, #512]	@ (8006e14 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8006c12:	4313      	orrs	r3, r2
 8006c14:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	681b      	ldr	r3, [r3, #0]
 8006c1c:	f003 0302 	and.w	r3, r3, #2
 8006c20:	2b00      	cmp	r3, #0
 8006c22:	d00a      	beq.n	8006c3a <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8006c24:	4b7b      	ldr	r3, [pc, #492]	@ (8006e14 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8006c26:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006c2a:	f023 020c 	bic.w	r2, r3, #12
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006c32:	4978      	ldr	r1, [pc, #480]	@ (8006e14 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8006c34:	4313      	orrs	r3, r2
 8006c36:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	681b      	ldr	r3, [r3, #0]
 8006c3e:	f003 0320 	and.w	r3, r3, #32
 8006c42:	2b00      	cmp	r3, #0
 8006c44:	d00a      	beq.n	8006c5c <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8006c46:	4b73      	ldr	r3, [pc, #460]	@ (8006e14 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8006c48:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006c4c:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006c54:	496f      	ldr	r1, [pc, #444]	@ (8006e14 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8006c56:	4313      	orrs	r3, r2
 8006c58:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	681b      	ldr	r3, [r3, #0]
 8006c60:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006c64:	2b00      	cmp	r3, #0
 8006c66:	d00a      	beq.n	8006c7e <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8006c68:	4b6a      	ldr	r3, [pc, #424]	@ (8006e14 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8006c6a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006c6e:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006c76:	4967      	ldr	r1, [pc, #412]	@ (8006e14 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8006c78:	4313      	orrs	r3, r2
 8006c7a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	681b      	ldr	r3, [r3, #0]
 8006c82:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006c86:	2b00      	cmp	r3, #0
 8006c88:	d00a      	beq.n	8006ca0 <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8006c8a:	4b62      	ldr	r3, [pc, #392]	@ (8006e14 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8006c8c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006c90:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006c98:	495e      	ldr	r1, [pc, #376]	@ (8006e14 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8006c9a:	4313      	orrs	r3, r2
 8006c9c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	681b      	ldr	r3, [r3, #0]
 8006ca4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006ca8:	2b00      	cmp	r3, #0
 8006caa:	d00a      	beq.n	8006cc2 <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8006cac:	4b59      	ldr	r3, [pc, #356]	@ (8006e14 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8006cae:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006cb2:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006cba:	4956      	ldr	r1, [pc, #344]	@ (8006e14 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8006cbc:	4313      	orrs	r3, r2
 8006cbe:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	681b      	ldr	r3, [r3, #0]
 8006cc6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006cca:	2b00      	cmp	r3, #0
 8006ccc:	d00a      	beq.n	8006ce4 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8006cce:	4b51      	ldr	r3, [pc, #324]	@ (8006e14 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8006cd0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006cd4:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006cdc:	494d      	ldr	r1, [pc, #308]	@ (8006e14 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8006cde:	4313      	orrs	r3, r2
 8006ce0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	681b      	ldr	r3, [r3, #0]
 8006ce8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8006cec:	2b00      	cmp	r3, #0
 8006cee:	d028      	beq.n	8006d42 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8006cf0:	4b48      	ldr	r3, [pc, #288]	@ (8006e14 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8006cf2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006cf6:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006cfe:	4945      	ldr	r1, [pc, #276]	@ (8006e14 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8006d00:	4313      	orrs	r3, r2
 8006d02:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006d0a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006d0e:	d106      	bne.n	8006d1e <HAL_RCCEx_PeriphCLKConfig+0x2f2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006d10:	4b40      	ldr	r3, [pc, #256]	@ (8006e14 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8006d12:	68db      	ldr	r3, [r3, #12]
 8006d14:	4a3f      	ldr	r2, [pc, #252]	@ (8006e14 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8006d16:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006d1a:	60d3      	str	r3, [r2, #12]
 8006d1c:	e011      	b.n	8006d42 <HAL_RCCEx_PeriphCLKConfig+0x316>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006d22:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8006d26:	d10c      	bne.n	8006d42 <HAL_RCCEx_PeriphCLKConfig+0x316>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	3304      	adds	r3, #4
 8006d2c:	2101      	movs	r1, #1
 8006d2e:	4618      	mov	r0, r3
 8006d30:	f000 f882 	bl	8006e38 <RCCEx_PLLSAI1_Config>
 8006d34:	4603      	mov	r3, r0
 8006d36:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8006d38:	7cfb      	ldrb	r3, [r7, #19]
 8006d3a:	2b00      	cmp	r3, #0
 8006d3c:	d001      	beq.n	8006d42 <HAL_RCCEx_PeriphCLKConfig+0x316>
        {
          /* set overall return value */
          status = ret;
 8006d3e:	7cfb      	ldrb	r3, [r7, #19]
 8006d40:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	681b      	ldr	r3, [r3, #0]
 8006d46:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8006d4a:	2b00      	cmp	r3, #0
 8006d4c:	d028      	beq.n	8006da0 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8006d4e:	4b31      	ldr	r3, [pc, #196]	@ (8006e14 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8006d50:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006d54:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006d5c:	492d      	ldr	r1, [pc, #180]	@ (8006e14 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8006d5e:	4313      	orrs	r3, r2
 8006d60:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006d68:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006d6c:	d106      	bne.n	8006d7c <HAL_RCCEx_PeriphCLKConfig+0x350>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006d6e:	4b29      	ldr	r3, [pc, #164]	@ (8006e14 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8006d70:	68db      	ldr	r3, [r3, #12]
 8006d72:	4a28      	ldr	r2, [pc, #160]	@ (8006e14 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8006d74:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006d78:	60d3      	str	r3, [r2, #12]
 8006d7a:	e011      	b.n	8006da0 <HAL_RCCEx_PeriphCLKConfig+0x374>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006d80:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8006d84:	d10c      	bne.n	8006da0 <HAL_RCCEx_PeriphCLKConfig+0x374>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	3304      	adds	r3, #4
 8006d8a:	2101      	movs	r1, #1
 8006d8c:	4618      	mov	r0, r3
 8006d8e:	f000 f853 	bl	8006e38 <RCCEx_PLLSAI1_Config>
 8006d92:	4603      	mov	r3, r0
 8006d94:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8006d96:	7cfb      	ldrb	r3, [r7, #19]
 8006d98:	2b00      	cmp	r3, #0
 8006d9a:	d001      	beq.n	8006da0 <HAL_RCCEx_PeriphCLKConfig+0x374>
      {
        /* set overall return value */
        status = ret;
 8006d9c:	7cfb      	ldrb	r3, [r7, #19]
 8006d9e:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	681b      	ldr	r3, [r3, #0]
 8006da4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006da8:	2b00      	cmp	r3, #0
 8006daa:	d01c      	beq.n	8006de6 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8006dac:	4b19      	ldr	r3, [pc, #100]	@ (8006e14 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8006dae:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006db2:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006dba:	4916      	ldr	r1, [pc, #88]	@ (8006e14 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8006dbc:	4313      	orrs	r3, r2
 8006dbe:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006dc6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006dca:	d10c      	bne.n	8006de6 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	3304      	adds	r3, #4
 8006dd0:	2102      	movs	r1, #2
 8006dd2:	4618      	mov	r0, r3
 8006dd4:	f000 f830 	bl	8006e38 <RCCEx_PLLSAI1_Config>
 8006dd8:	4603      	mov	r3, r0
 8006dda:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8006ddc:	7cfb      	ldrb	r3, [r7, #19]
 8006dde:	2b00      	cmp	r3, #0
 8006de0:	d001      	beq.n	8006de6 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
      {
        /* set overall return value */
        status = ret;
 8006de2:	7cfb      	ldrb	r3, [r7, #19]
 8006de4:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	681b      	ldr	r3, [r3, #0]
 8006dea:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8006dee:	2b00      	cmp	r3, #0
 8006df0:	d00a      	beq.n	8006e08 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8006df2:	4b08      	ldr	r3, [pc, #32]	@ (8006e14 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8006df4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006df8:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006e00:	4904      	ldr	r1, [pc, #16]	@ (8006e14 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8006e02:	4313      	orrs	r3, r2
 8006e04:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8006e08:	7cbb      	ldrb	r3, [r7, #18]
}
 8006e0a:	4618      	mov	r0, r3
 8006e0c:	3718      	adds	r7, #24
 8006e0e:	46bd      	mov	sp, r7
 8006e10:	bd80      	pop	{r7, pc}
 8006e12:	bf00      	nop
 8006e14:	40021000 	.word	0x40021000

08006e18 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 8006e18:	b480      	push	{r7}
 8006e1a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 8006e1c:	4b05      	ldr	r3, [pc, #20]	@ (8006e34 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8006e1e:	681b      	ldr	r3, [r3, #0]
 8006e20:	4a04      	ldr	r2, [pc, #16]	@ (8006e34 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8006e22:	f043 0304 	orr.w	r3, r3, #4
 8006e26:	6013      	str	r3, [r2, #0]
}
 8006e28:	bf00      	nop
 8006e2a:	46bd      	mov	sp, r7
 8006e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e30:	4770      	bx	lr
 8006e32:	bf00      	nop
 8006e34:	40021000 	.word	0x40021000

08006e38 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8006e38:	b580      	push	{r7, lr}
 8006e3a:	b084      	sub	sp, #16
 8006e3c:	af00      	add	r7, sp, #0
 8006e3e:	6078      	str	r0, [r7, #4]
 8006e40:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006e42:	2300      	movs	r3, #0
 8006e44:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8006e46:	4b74      	ldr	r3, [pc, #464]	@ (8007018 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006e48:	68db      	ldr	r3, [r3, #12]
 8006e4a:	f003 0303 	and.w	r3, r3, #3
 8006e4e:	2b00      	cmp	r3, #0
 8006e50:	d018      	beq.n	8006e84 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8006e52:	4b71      	ldr	r3, [pc, #452]	@ (8007018 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006e54:	68db      	ldr	r3, [r3, #12]
 8006e56:	f003 0203 	and.w	r2, r3, #3
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	681b      	ldr	r3, [r3, #0]
 8006e5e:	429a      	cmp	r2, r3
 8006e60:	d10d      	bne.n	8006e7e <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	681b      	ldr	r3, [r3, #0]
       ||
 8006e66:	2b00      	cmp	r3, #0
 8006e68:	d009      	beq.n	8006e7e <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8006e6a:	4b6b      	ldr	r3, [pc, #428]	@ (8007018 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006e6c:	68db      	ldr	r3, [r3, #12]
 8006e6e:	091b      	lsrs	r3, r3, #4
 8006e70:	f003 0307 	and.w	r3, r3, #7
 8006e74:	1c5a      	adds	r2, r3, #1
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	685b      	ldr	r3, [r3, #4]
       ||
 8006e7a:	429a      	cmp	r2, r3
 8006e7c:	d047      	beq.n	8006f0e <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8006e7e:	2301      	movs	r3, #1
 8006e80:	73fb      	strb	r3, [r7, #15]
 8006e82:	e044      	b.n	8006f0e <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	681b      	ldr	r3, [r3, #0]
 8006e88:	2b03      	cmp	r3, #3
 8006e8a:	d018      	beq.n	8006ebe <RCCEx_PLLSAI1_Config+0x86>
 8006e8c:	2b03      	cmp	r3, #3
 8006e8e:	d825      	bhi.n	8006edc <RCCEx_PLLSAI1_Config+0xa4>
 8006e90:	2b01      	cmp	r3, #1
 8006e92:	d002      	beq.n	8006e9a <RCCEx_PLLSAI1_Config+0x62>
 8006e94:	2b02      	cmp	r3, #2
 8006e96:	d009      	beq.n	8006eac <RCCEx_PLLSAI1_Config+0x74>
 8006e98:	e020      	b.n	8006edc <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8006e9a:	4b5f      	ldr	r3, [pc, #380]	@ (8007018 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006e9c:	681b      	ldr	r3, [r3, #0]
 8006e9e:	f003 0302 	and.w	r3, r3, #2
 8006ea2:	2b00      	cmp	r3, #0
 8006ea4:	d11d      	bne.n	8006ee2 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8006ea6:	2301      	movs	r3, #1
 8006ea8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006eaa:	e01a      	b.n	8006ee2 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8006eac:	4b5a      	ldr	r3, [pc, #360]	@ (8007018 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006eae:	681b      	ldr	r3, [r3, #0]
 8006eb0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006eb4:	2b00      	cmp	r3, #0
 8006eb6:	d116      	bne.n	8006ee6 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8006eb8:	2301      	movs	r3, #1
 8006eba:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006ebc:	e013      	b.n	8006ee6 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8006ebe:	4b56      	ldr	r3, [pc, #344]	@ (8007018 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006ec0:	681b      	ldr	r3, [r3, #0]
 8006ec2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006ec6:	2b00      	cmp	r3, #0
 8006ec8:	d10f      	bne.n	8006eea <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8006eca:	4b53      	ldr	r3, [pc, #332]	@ (8007018 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006ecc:	681b      	ldr	r3, [r3, #0]
 8006ece:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8006ed2:	2b00      	cmp	r3, #0
 8006ed4:	d109      	bne.n	8006eea <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8006ed6:	2301      	movs	r3, #1
 8006ed8:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8006eda:	e006      	b.n	8006eea <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8006edc:	2301      	movs	r3, #1
 8006ede:	73fb      	strb	r3, [r7, #15]
      break;
 8006ee0:	e004      	b.n	8006eec <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8006ee2:	bf00      	nop
 8006ee4:	e002      	b.n	8006eec <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8006ee6:	bf00      	nop
 8006ee8:	e000      	b.n	8006eec <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8006eea:	bf00      	nop
    }

    if(status == HAL_OK)
 8006eec:	7bfb      	ldrb	r3, [r7, #15]
 8006eee:	2b00      	cmp	r3, #0
 8006ef0:	d10d      	bne.n	8006f0e <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8006ef2:	4b49      	ldr	r3, [pc, #292]	@ (8007018 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006ef4:	68db      	ldr	r3, [r3, #12]
 8006ef6:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	6819      	ldr	r1, [r3, #0]
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	685b      	ldr	r3, [r3, #4]
 8006f02:	3b01      	subs	r3, #1
 8006f04:	011b      	lsls	r3, r3, #4
 8006f06:	430b      	orrs	r3, r1
 8006f08:	4943      	ldr	r1, [pc, #268]	@ (8007018 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006f0a:	4313      	orrs	r3, r2
 8006f0c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8006f0e:	7bfb      	ldrb	r3, [r7, #15]
 8006f10:	2b00      	cmp	r3, #0
 8006f12:	d17c      	bne.n	800700e <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8006f14:	4b40      	ldr	r3, [pc, #256]	@ (8007018 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006f16:	681b      	ldr	r3, [r3, #0]
 8006f18:	4a3f      	ldr	r2, [pc, #252]	@ (8007018 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006f1a:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8006f1e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006f20:	f7fc f87e 	bl	8003020 <HAL_GetTick>
 8006f24:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8006f26:	e009      	b.n	8006f3c <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8006f28:	f7fc f87a 	bl	8003020 <HAL_GetTick>
 8006f2c:	4602      	mov	r2, r0
 8006f2e:	68bb      	ldr	r3, [r7, #8]
 8006f30:	1ad3      	subs	r3, r2, r3
 8006f32:	2b02      	cmp	r3, #2
 8006f34:	d902      	bls.n	8006f3c <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8006f36:	2303      	movs	r3, #3
 8006f38:	73fb      	strb	r3, [r7, #15]
        break;
 8006f3a:	e005      	b.n	8006f48 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8006f3c:	4b36      	ldr	r3, [pc, #216]	@ (8007018 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006f3e:	681b      	ldr	r3, [r3, #0]
 8006f40:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006f44:	2b00      	cmp	r3, #0
 8006f46:	d1ef      	bne.n	8006f28 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8006f48:	7bfb      	ldrb	r3, [r7, #15]
 8006f4a:	2b00      	cmp	r3, #0
 8006f4c:	d15f      	bne.n	800700e <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8006f4e:	683b      	ldr	r3, [r7, #0]
 8006f50:	2b00      	cmp	r3, #0
 8006f52:	d110      	bne.n	8006f76 <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8006f54:	4b30      	ldr	r3, [pc, #192]	@ (8007018 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006f56:	691b      	ldr	r3, [r3, #16]
 8006f58:	f023 4378 	bic.w	r3, r3, #4160749568	@ 0xf8000000
 8006f5c:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8006f60:	687a      	ldr	r2, [r7, #4]
 8006f62:	6892      	ldr	r2, [r2, #8]
 8006f64:	0211      	lsls	r1, r2, #8
 8006f66:	687a      	ldr	r2, [r7, #4]
 8006f68:	68d2      	ldr	r2, [r2, #12]
 8006f6a:	06d2      	lsls	r2, r2, #27
 8006f6c:	430a      	orrs	r2, r1
 8006f6e:	492a      	ldr	r1, [pc, #168]	@ (8007018 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006f70:	4313      	orrs	r3, r2
 8006f72:	610b      	str	r3, [r1, #16]
 8006f74:	e027      	b.n	8006fc6 <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8006f76:	683b      	ldr	r3, [r7, #0]
 8006f78:	2b01      	cmp	r3, #1
 8006f7a:	d112      	bne.n	8006fa2 <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8006f7c:	4b26      	ldr	r3, [pc, #152]	@ (8007018 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006f7e:	691b      	ldr	r3, [r3, #16]
 8006f80:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 8006f84:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8006f88:	687a      	ldr	r2, [r7, #4]
 8006f8a:	6892      	ldr	r2, [r2, #8]
 8006f8c:	0211      	lsls	r1, r2, #8
 8006f8e:	687a      	ldr	r2, [r7, #4]
 8006f90:	6912      	ldr	r2, [r2, #16]
 8006f92:	0852      	lsrs	r2, r2, #1
 8006f94:	3a01      	subs	r2, #1
 8006f96:	0552      	lsls	r2, r2, #21
 8006f98:	430a      	orrs	r2, r1
 8006f9a:	491f      	ldr	r1, [pc, #124]	@ (8007018 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006f9c:	4313      	orrs	r3, r2
 8006f9e:	610b      	str	r3, [r1, #16]
 8006fa0:	e011      	b.n	8006fc6 <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8006fa2:	4b1d      	ldr	r3, [pc, #116]	@ (8007018 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006fa4:	691b      	ldr	r3, [r3, #16]
 8006fa6:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8006faa:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8006fae:	687a      	ldr	r2, [r7, #4]
 8006fb0:	6892      	ldr	r2, [r2, #8]
 8006fb2:	0211      	lsls	r1, r2, #8
 8006fb4:	687a      	ldr	r2, [r7, #4]
 8006fb6:	6952      	ldr	r2, [r2, #20]
 8006fb8:	0852      	lsrs	r2, r2, #1
 8006fba:	3a01      	subs	r2, #1
 8006fbc:	0652      	lsls	r2, r2, #25
 8006fbe:	430a      	orrs	r2, r1
 8006fc0:	4915      	ldr	r1, [pc, #84]	@ (8007018 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006fc2:	4313      	orrs	r3, r2
 8006fc4:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8006fc6:	4b14      	ldr	r3, [pc, #80]	@ (8007018 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006fc8:	681b      	ldr	r3, [r3, #0]
 8006fca:	4a13      	ldr	r2, [pc, #76]	@ (8007018 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006fcc:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8006fd0:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006fd2:	f7fc f825 	bl	8003020 <HAL_GetTick>
 8006fd6:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8006fd8:	e009      	b.n	8006fee <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8006fda:	f7fc f821 	bl	8003020 <HAL_GetTick>
 8006fde:	4602      	mov	r2, r0
 8006fe0:	68bb      	ldr	r3, [r7, #8]
 8006fe2:	1ad3      	subs	r3, r2, r3
 8006fe4:	2b02      	cmp	r3, #2
 8006fe6:	d902      	bls.n	8006fee <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 8006fe8:	2303      	movs	r3, #3
 8006fea:	73fb      	strb	r3, [r7, #15]
          break;
 8006fec:	e005      	b.n	8006ffa <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8006fee:	4b0a      	ldr	r3, [pc, #40]	@ (8007018 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006ff0:	681b      	ldr	r3, [r3, #0]
 8006ff2:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006ff6:	2b00      	cmp	r3, #0
 8006ff8:	d0ef      	beq.n	8006fda <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 8006ffa:	7bfb      	ldrb	r3, [r7, #15]
 8006ffc:	2b00      	cmp	r3, #0
 8006ffe:	d106      	bne.n	800700e <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8007000:	4b05      	ldr	r3, [pc, #20]	@ (8007018 <RCCEx_PLLSAI1_Config+0x1e0>)
 8007002:	691a      	ldr	r2, [r3, #16]
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	699b      	ldr	r3, [r3, #24]
 8007008:	4903      	ldr	r1, [pc, #12]	@ (8007018 <RCCEx_PLLSAI1_Config+0x1e0>)
 800700a:	4313      	orrs	r3, r2
 800700c:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 800700e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007010:	4618      	mov	r0, r3
 8007012:	3710      	adds	r7, #16
 8007014:	46bd      	mov	sp, r7
 8007016:	bd80      	pop	{r7, pc}
 8007018:	40021000 	.word	0x40021000

0800701c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800701c:	b580      	push	{r7, lr}
 800701e:	b082      	sub	sp, #8
 8007020:	af00      	add	r7, sp, #0
 8007022:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	2b00      	cmp	r3, #0
 8007028:	d101      	bne.n	800702e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800702a:	2301      	movs	r3, #1
 800702c:	e049      	b.n	80070c2 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007034:	b2db      	uxtb	r3, r3
 8007036:	2b00      	cmp	r3, #0
 8007038:	d106      	bne.n	8007048 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	2200      	movs	r2, #0
 800703e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007042:	6878      	ldr	r0, [r7, #4]
 8007044:	f000 f841 	bl	80070ca <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	2202      	movs	r2, #2
 800704c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	681a      	ldr	r2, [r3, #0]
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	3304      	adds	r3, #4
 8007058:	4619      	mov	r1, r3
 800705a:	4610      	mov	r0, r2
 800705c:	f000 fd88 	bl	8007b70 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	2201      	movs	r2, #1
 8007064:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	2201      	movs	r2, #1
 800706c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	2201      	movs	r2, #1
 8007074:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	2201      	movs	r2, #1
 800707c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	2201      	movs	r2, #1
 8007084:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	2201      	movs	r2, #1
 800708c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	2201      	movs	r2, #1
 8007094:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	2201      	movs	r2, #1
 800709c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	2201      	movs	r2, #1
 80070a4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	2201      	movs	r2, #1
 80070ac:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	2201      	movs	r2, #1
 80070b4:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	2201      	movs	r2, #1
 80070bc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80070c0:	2300      	movs	r3, #0
}
 80070c2:	4618      	mov	r0, r3
 80070c4:	3708      	adds	r7, #8
 80070c6:	46bd      	mov	sp, r7
 80070c8:	bd80      	pop	{r7, pc}

080070ca <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80070ca:	b480      	push	{r7}
 80070cc:	b083      	sub	sp, #12
 80070ce:	af00      	add	r7, sp, #0
 80070d0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80070d2:	bf00      	nop
 80070d4:	370c      	adds	r7, #12
 80070d6:	46bd      	mov	sp, r7
 80070d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070dc:	4770      	bx	lr
	...

080070e0 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80070e0:	b480      	push	{r7}
 80070e2:	b085      	sub	sp, #20
 80070e4:	af00      	add	r7, sp, #0
 80070e6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80070ee:	b2db      	uxtb	r3, r3
 80070f0:	2b01      	cmp	r3, #1
 80070f2:	d001      	beq.n	80070f8 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80070f4:	2301      	movs	r3, #1
 80070f6:	e033      	b.n	8007160 <HAL_TIM_Base_Start+0x80>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	2202      	movs	r2, #2
 80070fc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	681b      	ldr	r3, [r3, #0]
 8007104:	4a19      	ldr	r2, [pc, #100]	@ (800716c <HAL_TIM_Base_Start+0x8c>)
 8007106:	4293      	cmp	r3, r2
 8007108:	d009      	beq.n	800711e <HAL_TIM_Base_Start+0x3e>
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	681b      	ldr	r3, [r3, #0]
 800710e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007112:	d004      	beq.n	800711e <HAL_TIM_Base_Start+0x3e>
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	681b      	ldr	r3, [r3, #0]
 8007118:	4a15      	ldr	r2, [pc, #84]	@ (8007170 <HAL_TIM_Base_Start+0x90>)
 800711a:	4293      	cmp	r3, r2
 800711c:	d115      	bne.n	800714a <HAL_TIM_Base_Start+0x6a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	681b      	ldr	r3, [r3, #0]
 8007122:	689a      	ldr	r2, [r3, #8]
 8007124:	4b13      	ldr	r3, [pc, #76]	@ (8007174 <HAL_TIM_Base_Start+0x94>)
 8007126:	4013      	ands	r3, r2
 8007128:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800712a:	68fb      	ldr	r3, [r7, #12]
 800712c:	2b06      	cmp	r3, #6
 800712e:	d015      	beq.n	800715c <HAL_TIM_Base_Start+0x7c>
 8007130:	68fb      	ldr	r3, [r7, #12]
 8007132:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007136:	d011      	beq.n	800715c <HAL_TIM_Base_Start+0x7c>
    {
      __HAL_TIM_ENABLE(htim);
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	681b      	ldr	r3, [r3, #0]
 800713c:	681a      	ldr	r2, [r3, #0]
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	681b      	ldr	r3, [r3, #0]
 8007142:	f042 0201 	orr.w	r2, r2, #1
 8007146:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007148:	e008      	b.n	800715c <HAL_TIM_Base_Start+0x7c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	681b      	ldr	r3, [r3, #0]
 800714e:	681a      	ldr	r2, [r3, #0]
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	681b      	ldr	r3, [r3, #0]
 8007154:	f042 0201 	orr.w	r2, r2, #1
 8007158:	601a      	str	r2, [r3, #0]
 800715a:	e000      	b.n	800715e <HAL_TIM_Base_Start+0x7e>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800715c:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800715e:	2300      	movs	r3, #0
}
 8007160:	4618      	mov	r0, r3
 8007162:	3714      	adds	r7, #20
 8007164:	46bd      	mov	sp, r7
 8007166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800716a:	4770      	bx	lr
 800716c:	40012c00 	.word	0x40012c00
 8007170:	40014000 	.word	0x40014000
 8007174:	00010007 	.word	0x00010007

08007178 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8007178:	b480      	push	{r7}
 800717a:	b085      	sub	sp, #20
 800717c:	af00      	add	r7, sp, #0
 800717e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007186:	b2db      	uxtb	r3, r3
 8007188:	2b01      	cmp	r3, #1
 800718a:	d001      	beq.n	8007190 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800718c:	2301      	movs	r3, #1
 800718e:	e03b      	b.n	8007208 <HAL_TIM_Base_Start_IT+0x90>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	2202      	movs	r2, #2
 8007194:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	681b      	ldr	r3, [r3, #0]
 800719c:	68da      	ldr	r2, [r3, #12]
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	681b      	ldr	r3, [r3, #0]
 80071a2:	f042 0201 	orr.w	r2, r2, #1
 80071a6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	681b      	ldr	r3, [r3, #0]
 80071ac:	4a19      	ldr	r2, [pc, #100]	@ (8007214 <HAL_TIM_Base_Start_IT+0x9c>)
 80071ae:	4293      	cmp	r3, r2
 80071b0:	d009      	beq.n	80071c6 <HAL_TIM_Base_Start_IT+0x4e>
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	681b      	ldr	r3, [r3, #0]
 80071b6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80071ba:	d004      	beq.n	80071c6 <HAL_TIM_Base_Start_IT+0x4e>
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	681b      	ldr	r3, [r3, #0]
 80071c0:	4a15      	ldr	r2, [pc, #84]	@ (8007218 <HAL_TIM_Base_Start_IT+0xa0>)
 80071c2:	4293      	cmp	r3, r2
 80071c4:	d115      	bne.n	80071f2 <HAL_TIM_Base_Start_IT+0x7a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	681b      	ldr	r3, [r3, #0]
 80071ca:	689a      	ldr	r2, [r3, #8]
 80071cc:	4b13      	ldr	r3, [pc, #76]	@ (800721c <HAL_TIM_Base_Start_IT+0xa4>)
 80071ce:	4013      	ands	r3, r2
 80071d0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80071d2:	68fb      	ldr	r3, [r7, #12]
 80071d4:	2b06      	cmp	r3, #6
 80071d6:	d015      	beq.n	8007204 <HAL_TIM_Base_Start_IT+0x8c>
 80071d8:	68fb      	ldr	r3, [r7, #12]
 80071da:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80071de:	d011      	beq.n	8007204 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	681b      	ldr	r3, [r3, #0]
 80071e4:	681a      	ldr	r2, [r3, #0]
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	681b      	ldr	r3, [r3, #0]
 80071ea:	f042 0201 	orr.w	r2, r2, #1
 80071ee:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80071f0:	e008      	b.n	8007204 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	681b      	ldr	r3, [r3, #0]
 80071f6:	681a      	ldr	r2, [r3, #0]
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	681b      	ldr	r3, [r3, #0]
 80071fc:	f042 0201 	orr.w	r2, r2, #1
 8007200:	601a      	str	r2, [r3, #0]
 8007202:	e000      	b.n	8007206 <HAL_TIM_Base_Start_IT+0x8e>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007204:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8007206:	2300      	movs	r3, #0
}
 8007208:	4618      	mov	r0, r3
 800720a:	3714      	adds	r7, #20
 800720c:	46bd      	mov	sp, r7
 800720e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007212:	4770      	bx	lr
 8007214:	40012c00 	.word	0x40012c00
 8007218:	40014000 	.word	0x40014000
 800721c:	00010007 	.word	0x00010007

08007220 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8007220:	b580      	push	{r7, lr}
 8007222:	b082      	sub	sp, #8
 8007224:	af00      	add	r7, sp, #0
 8007226:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	2b00      	cmp	r3, #0
 800722c:	d101      	bne.n	8007232 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800722e:	2301      	movs	r3, #1
 8007230:	e049      	b.n	80072c6 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007238:	b2db      	uxtb	r3, r3
 800723a:	2b00      	cmp	r3, #0
 800723c:	d106      	bne.n	800724c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	2200      	movs	r2, #0
 8007242:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8007246:	6878      	ldr	r0, [r7, #4]
 8007248:	f7fb fd40 	bl	8002ccc <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	2202      	movs	r2, #2
 8007250:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	681a      	ldr	r2, [r3, #0]
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	3304      	adds	r3, #4
 800725c:	4619      	mov	r1, r3
 800725e:	4610      	mov	r0, r2
 8007260:	f000 fc86 	bl	8007b70 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	2201      	movs	r2, #1
 8007268:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	2201      	movs	r2, #1
 8007270:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	2201      	movs	r2, #1
 8007278:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	2201      	movs	r2, #1
 8007280:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	2201      	movs	r2, #1
 8007288:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	2201      	movs	r2, #1
 8007290:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	2201      	movs	r2, #1
 8007298:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	2201      	movs	r2, #1
 80072a0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	2201      	movs	r2, #1
 80072a8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	2201      	movs	r2, #1
 80072b0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	2201      	movs	r2, #1
 80072b8:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	2201      	movs	r2, #1
 80072c0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80072c4:	2300      	movs	r3, #0
}
 80072c6:	4618      	mov	r0, r3
 80072c8:	3708      	adds	r7, #8
 80072ca:	46bd      	mov	sp, r7
 80072cc:	bd80      	pop	{r7, pc}
	...

080072d0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80072d0:	b580      	push	{r7, lr}
 80072d2:	b084      	sub	sp, #16
 80072d4:	af00      	add	r7, sp, #0
 80072d6:	6078      	str	r0, [r7, #4]
 80072d8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80072da:	683b      	ldr	r3, [r7, #0]
 80072dc:	2b00      	cmp	r3, #0
 80072de:	d109      	bne.n	80072f4 <HAL_TIM_PWM_Start+0x24>
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80072e6:	b2db      	uxtb	r3, r3
 80072e8:	2b01      	cmp	r3, #1
 80072ea:	bf14      	ite	ne
 80072ec:	2301      	movne	r3, #1
 80072ee:	2300      	moveq	r3, #0
 80072f0:	b2db      	uxtb	r3, r3
 80072f2:	e03c      	b.n	800736e <HAL_TIM_PWM_Start+0x9e>
 80072f4:	683b      	ldr	r3, [r7, #0]
 80072f6:	2b04      	cmp	r3, #4
 80072f8:	d109      	bne.n	800730e <HAL_TIM_PWM_Start+0x3e>
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8007300:	b2db      	uxtb	r3, r3
 8007302:	2b01      	cmp	r3, #1
 8007304:	bf14      	ite	ne
 8007306:	2301      	movne	r3, #1
 8007308:	2300      	moveq	r3, #0
 800730a:	b2db      	uxtb	r3, r3
 800730c:	e02f      	b.n	800736e <HAL_TIM_PWM_Start+0x9e>
 800730e:	683b      	ldr	r3, [r7, #0]
 8007310:	2b08      	cmp	r3, #8
 8007312:	d109      	bne.n	8007328 <HAL_TIM_PWM_Start+0x58>
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800731a:	b2db      	uxtb	r3, r3
 800731c:	2b01      	cmp	r3, #1
 800731e:	bf14      	ite	ne
 8007320:	2301      	movne	r3, #1
 8007322:	2300      	moveq	r3, #0
 8007324:	b2db      	uxtb	r3, r3
 8007326:	e022      	b.n	800736e <HAL_TIM_PWM_Start+0x9e>
 8007328:	683b      	ldr	r3, [r7, #0]
 800732a:	2b0c      	cmp	r3, #12
 800732c:	d109      	bne.n	8007342 <HAL_TIM_PWM_Start+0x72>
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007334:	b2db      	uxtb	r3, r3
 8007336:	2b01      	cmp	r3, #1
 8007338:	bf14      	ite	ne
 800733a:	2301      	movne	r3, #1
 800733c:	2300      	moveq	r3, #0
 800733e:	b2db      	uxtb	r3, r3
 8007340:	e015      	b.n	800736e <HAL_TIM_PWM_Start+0x9e>
 8007342:	683b      	ldr	r3, [r7, #0]
 8007344:	2b10      	cmp	r3, #16
 8007346:	d109      	bne.n	800735c <HAL_TIM_PWM_Start+0x8c>
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800734e:	b2db      	uxtb	r3, r3
 8007350:	2b01      	cmp	r3, #1
 8007352:	bf14      	ite	ne
 8007354:	2301      	movne	r3, #1
 8007356:	2300      	moveq	r3, #0
 8007358:	b2db      	uxtb	r3, r3
 800735a:	e008      	b.n	800736e <HAL_TIM_PWM_Start+0x9e>
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8007362:	b2db      	uxtb	r3, r3
 8007364:	2b01      	cmp	r3, #1
 8007366:	bf14      	ite	ne
 8007368:	2301      	movne	r3, #1
 800736a:	2300      	moveq	r3, #0
 800736c:	b2db      	uxtb	r3, r3
 800736e:	2b00      	cmp	r3, #0
 8007370:	d001      	beq.n	8007376 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8007372:	2301      	movs	r3, #1
 8007374:	e07e      	b.n	8007474 <HAL_TIM_PWM_Start+0x1a4>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8007376:	683b      	ldr	r3, [r7, #0]
 8007378:	2b00      	cmp	r3, #0
 800737a:	d104      	bne.n	8007386 <HAL_TIM_PWM_Start+0xb6>
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	2202      	movs	r2, #2
 8007380:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007384:	e023      	b.n	80073ce <HAL_TIM_PWM_Start+0xfe>
 8007386:	683b      	ldr	r3, [r7, #0]
 8007388:	2b04      	cmp	r3, #4
 800738a:	d104      	bne.n	8007396 <HAL_TIM_PWM_Start+0xc6>
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	2202      	movs	r2, #2
 8007390:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007394:	e01b      	b.n	80073ce <HAL_TIM_PWM_Start+0xfe>
 8007396:	683b      	ldr	r3, [r7, #0]
 8007398:	2b08      	cmp	r3, #8
 800739a:	d104      	bne.n	80073a6 <HAL_TIM_PWM_Start+0xd6>
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	2202      	movs	r2, #2
 80073a0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80073a4:	e013      	b.n	80073ce <HAL_TIM_PWM_Start+0xfe>
 80073a6:	683b      	ldr	r3, [r7, #0]
 80073a8:	2b0c      	cmp	r3, #12
 80073aa:	d104      	bne.n	80073b6 <HAL_TIM_PWM_Start+0xe6>
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	2202      	movs	r2, #2
 80073b0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80073b4:	e00b      	b.n	80073ce <HAL_TIM_PWM_Start+0xfe>
 80073b6:	683b      	ldr	r3, [r7, #0]
 80073b8:	2b10      	cmp	r3, #16
 80073ba:	d104      	bne.n	80073c6 <HAL_TIM_PWM_Start+0xf6>
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	2202      	movs	r2, #2
 80073c0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80073c4:	e003      	b.n	80073ce <HAL_TIM_PWM_Start+0xfe>
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	2202      	movs	r2, #2
 80073ca:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	681b      	ldr	r3, [r3, #0]
 80073d2:	2201      	movs	r2, #1
 80073d4:	6839      	ldr	r1, [r7, #0]
 80073d6:	4618      	mov	r0, r3
 80073d8:	f000 feac 	bl	8008134 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	681b      	ldr	r3, [r3, #0]
 80073e0:	4a26      	ldr	r2, [pc, #152]	@ (800747c <HAL_TIM_PWM_Start+0x1ac>)
 80073e2:	4293      	cmp	r3, r2
 80073e4:	d009      	beq.n	80073fa <HAL_TIM_PWM_Start+0x12a>
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	681b      	ldr	r3, [r3, #0]
 80073ea:	4a25      	ldr	r2, [pc, #148]	@ (8007480 <HAL_TIM_PWM_Start+0x1b0>)
 80073ec:	4293      	cmp	r3, r2
 80073ee:	d004      	beq.n	80073fa <HAL_TIM_PWM_Start+0x12a>
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	681b      	ldr	r3, [r3, #0]
 80073f4:	4a23      	ldr	r2, [pc, #140]	@ (8007484 <HAL_TIM_PWM_Start+0x1b4>)
 80073f6:	4293      	cmp	r3, r2
 80073f8:	d101      	bne.n	80073fe <HAL_TIM_PWM_Start+0x12e>
 80073fa:	2301      	movs	r3, #1
 80073fc:	e000      	b.n	8007400 <HAL_TIM_PWM_Start+0x130>
 80073fe:	2300      	movs	r3, #0
 8007400:	2b00      	cmp	r3, #0
 8007402:	d007      	beq.n	8007414 <HAL_TIM_PWM_Start+0x144>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	681b      	ldr	r3, [r3, #0]
 8007408:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	681b      	ldr	r3, [r3, #0]
 800740e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8007412:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	681b      	ldr	r3, [r3, #0]
 8007418:	4a18      	ldr	r2, [pc, #96]	@ (800747c <HAL_TIM_PWM_Start+0x1ac>)
 800741a:	4293      	cmp	r3, r2
 800741c:	d009      	beq.n	8007432 <HAL_TIM_PWM_Start+0x162>
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	681b      	ldr	r3, [r3, #0]
 8007422:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007426:	d004      	beq.n	8007432 <HAL_TIM_PWM_Start+0x162>
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	681b      	ldr	r3, [r3, #0]
 800742c:	4a14      	ldr	r2, [pc, #80]	@ (8007480 <HAL_TIM_PWM_Start+0x1b0>)
 800742e:	4293      	cmp	r3, r2
 8007430:	d115      	bne.n	800745e <HAL_TIM_PWM_Start+0x18e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	681b      	ldr	r3, [r3, #0]
 8007436:	689a      	ldr	r2, [r3, #8]
 8007438:	4b13      	ldr	r3, [pc, #76]	@ (8007488 <HAL_TIM_PWM_Start+0x1b8>)
 800743a:	4013      	ands	r3, r2
 800743c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800743e:	68fb      	ldr	r3, [r7, #12]
 8007440:	2b06      	cmp	r3, #6
 8007442:	d015      	beq.n	8007470 <HAL_TIM_PWM_Start+0x1a0>
 8007444:	68fb      	ldr	r3, [r7, #12]
 8007446:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800744a:	d011      	beq.n	8007470 <HAL_TIM_PWM_Start+0x1a0>
    {
      __HAL_TIM_ENABLE(htim);
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	681b      	ldr	r3, [r3, #0]
 8007450:	681a      	ldr	r2, [r3, #0]
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	681b      	ldr	r3, [r3, #0]
 8007456:	f042 0201 	orr.w	r2, r2, #1
 800745a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800745c:	e008      	b.n	8007470 <HAL_TIM_PWM_Start+0x1a0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	681b      	ldr	r3, [r3, #0]
 8007462:	681a      	ldr	r2, [r3, #0]
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	681b      	ldr	r3, [r3, #0]
 8007468:	f042 0201 	orr.w	r2, r2, #1
 800746c:	601a      	str	r2, [r3, #0]
 800746e:	e000      	b.n	8007472 <HAL_TIM_PWM_Start+0x1a2>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007470:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8007472:	2300      	movs	r3, #0
}
 8007474:	4618      	mov	r0, r3
 8007476:	3710      	adds	r7, #16
 8007478:	46bd      	mov	sp, r7
 800747a:	bd80      	pop	{r7, pc}
 800747c:	40012c00 	.word	0x40012c00
 8007480:	40014000 	.word	0x40014000
 8007484:	40014400 	.word	0x40014400
 8007488:	00010007 	.word	0x00010007

0800748c <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 800748c:	b580      	push	{r7, lr}
 800748e:	b086      	sub	sp, #24
 8007490:	af00      	add	r7, sp, #0
 8007492:	6078      	str	r0, [r7, #4]
 8007494:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	2b00      	cmp	r3, #0
 800749a:	d101      	bne.n	80074a0 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 800749c:	2301      	movs	r3, #1
 800749e:	e097      	b.n	80075d0 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80074a6:	b2db      	uxtb	r3, r3
 80074a8:	2b00      	cmp	r3, #0
 80074aa:	d106      	bne.n	80074ba <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	2200      	movs	r2, #0
 80074b0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 80074b4:	6878      	ldr	r0, [r7, #4]
 80074b6:	f7fb fb79 	bl	8002bac <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	2202      	movs	r2, #2
 80074be:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	681b      	ldr	r3, [r3, #0]
 80074c6:	689b      	ldr	r3, [r3, #8]
 80074c8:	687a      	ldr	r2, [r7, #4]
 80074ca:	6812      	ldr	r2, [r2, #0]
 80074cc:	f423 33a0 	bic.w	r3, r3, #81920	@ 0x14000
 80074d0:	f023 0307 	bic.w	r3, r3, #7
 80074d4:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	681a      	ldr	r2, [r3, #0]
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	3304      	adds	r3, #4
 80074de:	4619      	mov	r1, r3
 80074e0:	4610      	mov	r0, r2
 80074e2:	f000 fb45 	bl	8007b70 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	681b      	ldr	r3, [r3, #0]
 80074ea:	689b      	ldr	r3, [r3, #8]
 80074ec:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	681b      	ldr	r3, [r3, #0]
 80074f2:	699b      	ldr	r3, [r3, #24]
 80074f4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	681b      	ldr	r3, [r3, #0]
 80074fa:	6a1b      	ldr	r3, [r3, #32]
 80074fc:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 80074fe:	683b      	ldr	r3, [r7, #0]
 8007500:	681b      	ldr	r3, [r3, #0]
 8007502:	697a      	ldr	r2, [r7, #20]
 8007504:	4313      	orrs	r3, r2
 8007506:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8007508:	693b      	ldr	r3, [r7, #16]
 800750a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800750e:	f023 0303 	bic.w	r3, r3, #3
 8007512:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8007514:	683b      	ldr	r3, [r7, #0]
 8007516:	689a      	ldr	r2, [r3, #8]
 8007518:	683b      	ldr	r3, [r7, #0]
 800751a:	699b      	ldr	r3, [r3, #24]
 800751c:	021b      	lsls	r3, r3, #8
 800751e:	4313      	orrs	r3, r2
 8007520:	693a      	ldr	r2, [r7, #16]
 8007522:	4313      	orrs	r3, r2
 8007524:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8007526:	693b      	ldr	r3, [r7, #16]
 8007528:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 800752c:	f023 030c 	bic.w	r3, r3, #12
 8007530:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8007532:	693b      	ldr	r3, [r7, #16]
 8007534:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8007538:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800753c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800753e:	683b      	ldr	r3, [r7, #0]
 8007540:	68da      	ldr	r2, [r3, #12]
 8007542:	683b      	ldr	r3, [r7, #0]
 8007544:	69db      	ldr	r3, [r3, #28]
 8007546:	021b      	lsls	r3, r3, #8
 8007548:	4313      	orrs	r3, r2
 800754a:	693a      	ldr	r2, [r7, #16]
 800754c:	4313      	orrs	r3, r2
 800754e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8007550:	683b      	ldr	r3, [r7, #0]
 8007552:	691b      	ldr	r3, [r3, #16]
 8007554:	011a      	lsls	r2, r3, #4
 8007556:	683b      	ldr	r3, [r7, #0]
 8007558:	6a1b      	ldr	r3, [r3, #32]
 800755a:	031b      	lsls	r3, r3, #12
 800755c:	4313      	orrs	r3, r2
 800755e:	693a      	ldr	r2, [r7, #16]
 8007560:	4313      	orrs	r3, r2
 8007562:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8007564:	68fb      	ldr	r3, [r7, #12]
 8007566:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 800756a:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 800756c:	68fb      	ldr	r3, [r7, #12]
 800756e:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 8007572:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8007574:	683b      	ldr	r3, [r7, #0]
 8007576:	685a      	ldr	r2, [r3, #4]
 8007578:	683b      	ldr	r3, [r7, #0]
 800757a:	695b      	ldr	r3, [r3, #20]
 800757c:	011b      	lsls	r3, r3, #4
 800757e:	4313      	orrs	r3, r2
 8007580:	68fa      	ldr	r2, [r7, #12]
 8007582:	4313      	orrs	r3, r2
 8007584:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	681b      	ldr	r3, [r3, #0]
 800758a:	697a      	ldr	r2, [r7, #20]
 800758c:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	681b      	ldr	r3, [r3, #0]
 8007592:	693a      	ldr	r2, [r7, #16]
 8007594:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	681b      	ldr	r3, [r3, #0]
 800759a:	68fa      	ldr	r2, [r7, #12]
 800759c:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	2201      	movs	r2, #1
 80075a2:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	2201      	movs	r2, #1
 80075aa:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	2201      	movs	r2, #1
 80075b2:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	2201      	movs	r2, #1
 80075ba:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	2201      	movs	r2, #1
 80075c2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	2201      	movs	r2, #1
 80075ca:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80075ce:	2300      	movs	r3, #0
}
 80075d0:	4618      	mov	r0, r3
 80075d2:	3718      	adds	r7, #24
 80075d4:	46bd      	mov	sp, r7
 80075d6:	bd80      	pop	{r7, pc}

080075d8 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80075d8:	b580      	push	{r7, lr}
 80075da:	b084      	sub	sp, #16
 80075dc:	af00      	add	r7, sp, #0
 80075de:	6078      	str	r0, [r7, #4]
 80075e0:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80075e8:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80075f0:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80075f8:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8007600:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8007602:	683b      	ldr	r3, [r7, #0]
 8007604:	2b00      	cmp	r3, #0
 8007606:	d110      	bne.n	800762a <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8007608:	7bfb      	ldrb	r3, [r7, #15]
 800760a:	2b01      	cmp	r3, #1
 800760c:	d102      	bne.n	8007614 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 800760e:	7b7b      	ldrb	r3, [r7, #13]
 8007610:	2b01      	cmp	r3, #1
 8007612:	d001      	beq.n	8007618 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8007614:	2301      	movs	r3, #1
 8007616:	e069      	b.n	80076ec <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	2202      	movs	r2, #2
 800761c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	2202      	movs	r2, #2
 8007624:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007628:	e031      	b.n	800768e <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 800762a:	683b      	ldr	r3, [r7, #0]
 800762c:	2b04      	cmp	r3, #4
 800762e:	d110      	bne.n	8007652 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8007630:	7bbb      	ldrb	r3, [r7, #14]
 8007632:	2b01      	cmp	r3, #1
 8007634:	d102      	bne.n	800763c <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8007636:	7b3b      	ldrb	r3, [r7, #12]
 8007638:	2b01      	cmp	r3, #1
 800763a:	d001      	beq.n	8007640 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 800763c:	2301      	movs	r3, #1
 800763e:	e055      	b.n	80076ec <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	2202      	movs	r2, #2
 8007644:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	2202      	movs	r2, #2
 800764c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8007650:	e01d      	b.n	800768e <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8007652:	7bfb      	ldrb	r3, [r7, #15]
 8007654:	2b01      	cmp	r3, #1
 8007656:	d108      	bne.n	800766a <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8007658:	7bbb      	ldrb	r3, [r7, #14]
 800765a:	2b01      	cmp	r3, #1
 800765c:	d105      	bne.n	800766a <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800765e:	7b7b      	ldrb	r3, [r7, #13]
 8007660:	2b01      	cmp	r3, #1
 8007662:	d102      	bne.n	800766a <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8007664:	7b3b      	ldrb	r3, [r7, #12]
 8007666:	2b01      	cmp	r3, #1
 8007668:	d001      	beq.n	800766e <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 800766a:	2301      	movs	r3, #1
 800766c:	e03e      	b.n	80076ec <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	2202      	movs	r2, #2
 8007672:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	2202      	movs	r2, #2
 800767a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	2202      	movs	r2, #2
 8007682:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	2202      	movs	r2, #2
 800768a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 800768e:	683b      	ldr	r3, [r7, #0]
 8007690:	2b00      	cmp	r3, #0
 8007692:	d003      	beq.n	800769c <HAL_TIM_Encoder_Start+0xc4>
 8007694:	683b      	ldr	r3, [r7, #0]
 8007696:	2b04      	cmp	r3, #4
 8007698:	d008      	beq.n	80076ac <HAL_TIM_Encoder_Start+0xd4>
 800769a:	e00f      	b.n	80076bc <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	681b      	ldr	r3, [r3, #0]
 80076a0:	2201      	movs	r2, #1
 80076a2:	2100      	movs	r1, #0
 80076a4:	4618      	mov	r0, r3
 80076a6:	f000 fd45 	bl	8008134 <TIM_CCxChannelCmd>
      break;
 80076aa:	e016      	b.n	80076da <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	681b      	ldr	r3, [r3, #0]
 80076b0:	2201      	movs	r2, #1
 80076b2:	2104      	movs	r1, #4
 80076b4:	4618      	mov	r0, r3
 80076b6:	f000 fd3d 	bl	8008134 <TIM_CCxChannelCmd>
      break;
 80076ba:	e00e      	b.n	80076da <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	681b      	ldr	r3, [r3, #0]
 80076c0:	2201      	movs	r2, #1
 80076c2:	2100      	movs	r1, #0
 80076c4:	4618      	mov	r0, r3
 80076c6:	f000 fd35 	bl	8008134 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	681b      	ldr	r3, [r3, #0]
 80076ce:	2201      	movs	r2, #1
 80076d0:	2104      	movs	r1, #4
 80076d2:	4618      	mov	r0, r3
 80076d4:	f000 fd2e 	bl	8008134 <TIM_CCxChannelCmd>
      break;
 80076d8:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	681b      	ldr	r3, [r3, #0]
 80076de:	681a      	ldr	r2, [r3, #0]
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	681b      	ldr	r3, [r3, #0]
 80076e4:	f042 0201 	orr.w	r2, r2, #1
 80076e8:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80076ea:	2300      	movs	r3, #0
}
 80076ec:	4618      	mov	r0, r3
 80076ee:	3710      	adds	r7, #16
 80076f0:	46bd      	mov	sp, r7
 80076f2:	bd80      	pop	{r7, pc}

080076f4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80076f4:	b580      	push	{r7, lr}
 80076f6:	b084      	sub	sp, #16
 80076f8:	af00      	add	r7, sp, #0
 80076fa:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	681b      	ldr	r3, [r3, #0]
 8007700:	68db      	ldr	r3, [r3, #12]
 8007702:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	681b      	ldr	r3, [r3, #0]
 8007708:	691b      	ldr	r3, [r3, #16]
 800770a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800770c:	68bb      	ldr	r3, [r7, #8]
 800770e:	f003 0302 	and.w	r3, r3, #2
 8007712:	2b00      	cmp	r3, #0
 8007714:	d020      	beq.n	8007758 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8007716:	68fb      	ldr	r3, [r7, #12]
 8007718:	f003 0302 	and.w	r3, r3, #2
 800771c:	2b00      	cmp	r3, #0
 800771e:	d01b      	beq.n	8007758 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	681b      	ldr	r3, [r3, #0]
 8007724:	f06f 0202 	mvn.w	r2, #2
 8007728:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	2201      	movs	r2, #1
 800772e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	681b      	ldr	r3, [r3, #0]
 8007734:	699b      	ldr	r3, [r3, #24]
 8007736:	f003 0303 	and.w	r3, r3, #3
 800773a:	2b00      	cmp	r3, #0
 800773c:	d003      	beq.n	8007746 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800773e:	6878      	ldr	r0, [r7, #4]
 8007740:	f000 f9f8 	bl	8007b34 <HAL_TIM_IC_CaptureCallback>
 8007744:	e005      	b.n	8007752 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007746:	6878      	ldr	r0, [r7, #4]
 8007748:	f000 f9ea 	bl	8007b20 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800774c:	6878      	ldr	r0, [r7, #4]
 800774e:	f000 f9fb 	bl	8007b48 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	2200      	movs	r2, #0
 8007756:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8007758:	68bb      	ldr	r3, [r7, #8]
 800775a:	f003 0304 	and.w	r3, r3, #4
 800775e:	2b00      	cmp	r3, #0
 8007760:	d020      	beq.n	80077a4 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8007762:	68fb      	ldr	r3, [r7, #12]
 8007764:	f003 0304 	and.w	r3, r3, #4
 8007768:	2b00      	cmp	r3, #0
 800776a:	d01b      	beq.n	80077a4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	681b      	ldr	r3, [r3, #0]
 8007770:	f06f 0204 	mvn.w	r2, #4
 8007774:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	2202      	movs	r2, #2
 800777a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	681b      	ldr	r3, [r3, #0]
 8007780:	699b      	ldr	r3, [r3, #24]
 8007782:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007786:	2b00      	cmp	r3, #0
 8007788:	d003      	beq.n	8007792 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800778a:	6878      	ldr	r0, [r7, #4]
 800778c:	f000 f9d2 	bl	8007b34 <HAL_TIM_IC_CaptureCallback>
 8007790:	e005      	b.n	800779e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007792:	6878      	ldr	r0, [r7, #4]
 8007794:	f000 f9c4 	bl	8007b20 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007798:	6878      	ldr	r0, [r7, #4]
 800779a:	f000 f9d5 	bl	8007b48 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	2200      	movs	r2, #0
 80077a2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80077a4:	68bb      	ldr	r3, [r7, #8]
 80077a6:	f003 0308 	and.w	r3, r3, #8
 80077aa:	2b00      	cmp	r3, #0
 80077ac:	d020      	beq.n	80077f0 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80077ae:	68fb      	ldr	r3, [r7, #12]
 80077b0:	f003 0308 	and.w	r3, r3, #8
 80077b4:	2b00      	cmp	r3, #0
 80077b6:	d01b      	beq.n	80077f0 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	681b      	ldr	r3, [r3, #0]
 80077bc:	f06f 0208 	mvn.w	r2, #8
 80077c0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	2204      	movs	r2, #4
 80077c6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	681b      	ldr	r3, [r3, #0]
 80077cc:	69db      	ldr	r3, [r3, #28]
 80077ce:	f003 0303 	and.w	r3, r3, #3
 80077d2:	2b00      	cmp	r3, #0
 80077d4:	d003      	beq.n	80077de <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80077d6:	6878      	ldr	r0, [r7, #4]
 80077d8:	f000 f9ac 	bl	8007b34 <HAL_TIM_IC_CaptureCallback>
 80077dc:	e005      	b.n	80077ea <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80077de:	6878      	ldr	r0, [r7, #4]
 80077e0:	f000 f99e 	bl	8007b20 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80077e4:	6878      	ldr	r0, [r7, #4]
 80077e6:	f000 f9af 	bl	8007b48 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	2200      	movs	r2, #0
 80077ee:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80077f0:	68bb      	ldr	r3, [r7, #8]
 80077f2:	f003 0310 	and.w	r3, r3, #16
 80077f6:	2b00      	cmp	r3, #0
 80077f8:	d020      	beq.n	800783c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80077fa:	68fb      	ldr	r3, [r7, #12]
 80077fc:	f003 0310 	and.w	r3, r3, #16
 8007800:	2b00      	cmp	r3, #0
 8007802:	d01b      	beq.n	800783c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	681b      	ldr	r3, [r3, #0]
 8007808:	f06f 0210 	mvn.w	r2, #16
 800780c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	2208      	movs	r2, #8
 8007812:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	681b      	ldr	r3, [r3, #0]
 8007818:	69db      	ldr	r3, [r3, #28]
 800781a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800781e:	2b00      	cmp	r3, #0
 8007820:	d003      	beq.n	800782a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007822:	6878      	ldr	r0, [r7, #4]
 8007824:	f000 f986 	bl	8007b34 <HAL_TIM_IC_CaptureCallback>
 8007828:	e005      	b.n	8007836 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800782a:	6878      	ldr	r0, [r7, #4]
 800782c:	f000 f978 	bl	8007b20 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007830:	6878      	ldr	r0, [r7, #4]
 8007832:	f000 f989 	bl	8007b48 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	2200      	movs	r2, #0
 800783a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800783c:	68bb      	ldr	r3, [r7, #8]
 800783e:	f003 0301 	and.w	r3, r3, #1
 8007842:	2b00      	cmp	r3, #0
 8007844:	d00c      	beq.n	8007860 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8007846:	68fb      	ldr	r3, [r7, #12]
 8007848:	f003 0301 	and.w	r3, r3, #1
 800784c:	2b00      	cmp	r3, #0
 800784e:	d007      	beq.n	8007860 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	681b      	ldr	r3, [r3, #0]
 8007854:	f06f 0201 	mvn.w	r2, #1
 8007858:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800785a:	6878      	ldr	r0, [r7, #4]
 800785c:	f7fa fd0e 	bl	800227c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8007860:	68bb      	ldr	r3, [r7, #8]
 8007862:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007866:	2b00      	cmp	r3, #0
 8007868:	d00c      	beq.n	8007884 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800786a:	68fb      	ldr	r3, [r7, #12]
 800786c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007870:	2b00      	cmp	r3, #0
 8007872:	d007      	beq.n	8007884 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	681b      	ldr	r3, [r3, #0]
 8007878:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 800787c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800787e:	6878      	ldr	r0, [r7, #4]
 8007880:	f000 fe04 	bl	800848c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8007884:	68bb      	ldr	r3, [r7, #8]
 8007886:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800788a:	2b00      	cmp	r3, #0
 800788c:	d00c      	beq.n	80078a8 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800788e:	68fb      	ldr	r3, [r7, #12]
 8007890:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007894:	2b00      	cmp	r3, #0
 8007896:	d007      	beq.n	80078a8 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	681b      	ldr	r3, [r3, #0]
 800789c:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 80078a0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80078a2:	6878      	ldr	r0, [r7, #4]
 80078a4:	f000 fdfc 	bl	80084a0 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80078a8:	68bb      	ldr	r3, [r7, #8]
 80078aa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80078ae:	2b00      	cmp	r3, #0
 80078b0:	d00c      	beq.n	80078cc <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80078b2:	68fb      	ldr	r3, [r7, #12]
 80078b4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80078b8:	2b00      	cmp	r3, #0
 80078ba:	d007      	beq.n	80078cc <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	681b      	ldr	r3, [r3, #0]
 80078c0:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80078c4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80078c6:	6878      	ldr	r0, [r7, #4]
 80078c8:	f000 f948 	bl	8007b5c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80078cc:	68bb      	ldr	r3, [r7, #8]
 80078ce:	f003 0320 	and.w	r3, r3, #32
 80078d2:	2b00      	cmp	r3, #0
 80078d4:	d00c      	beq.n	80078f0 <HAL_TIM_IRQHandler+0x1fc>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80078d6:	68fb      	ldr	r3, [r7, #12]
 80078d8:	f003 0320 	and.w	r3, r3, #32
 80078dc:	2b00      	cmp	r3, #0
 80078de:	d007      	beq.n	80078f0 <HAL_TIM_IRQHandler+0x1fc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	681b      	ldr	r3, [r3, #0]
 80078e4:	f06f 0220 	mvn.w	r2, #32
 80078e8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80078ea:	6878      	ldr	r0, [r7, #4]
 80078ec:	f000 fdc4 	bl	8008478 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80078f0:	bf00      	nop
 80078f2:	3710      	adds	r7, #16
 80078f4:	46bd      	mov	sp, r7
 80078f6:	bd80      	pop	{r7, pc}

080078f8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80078f8:	b580      	push	{r7, lr}
 80078fa:	b086      	sub	sp, #24
 80078fc:	af00      	add	r7, sp, #0
 80078fe:	60f8      	str	r0, [r7, #12]
 8007900:	60b9      	str	r1, [r7, #8]
 8007902:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007904:	2300      	movs	r3, #0
 8007906:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8007908:	68fb      	ldr	r3, [r7, #12]
 800790a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800790e:	2b01      	cmp	r3, #1
 8007910:	d101      	bne.n	8007916 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8007912:	2302      	movs	r3, #2
 8007914:	e0ff      	b.n	8007b16 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8007916:	68fb      	ldr	r3, [r7, #12]
 8007918:	2201      	movs	r2, #1
 800791a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	2b14      	cmp	r3, #20
 8007922:	f200 80f0 	bhi.w	8007b06 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8007926:	a201      	add	r2, pc, #4	@ (adr r2, 800792c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8007928:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800792c:	08007981 	.word	0x08007981
 8007930:	08007b07 	.word	0x08007b07
 8007934:	08007b07 	.word	0x08007b07
 8007938:	08007b07 	.word	0x08007b07
 800793c:	080079c1 	.word	0x080079c1
 8007940:	08007b07 	.word	0x08007b07
 8007944:	08007b07 	.word	0x08007b07
 8007948:	08007b07 	.word	0x08007b07
 800794c:	08007a03 	.word	0x08007a03
 8007950:	08007b07 	.word	0x08007b07
 8007954:	08007b07 	.word	0x08007b07
 8007958:	08007b07 	.word	0x08007b07
 800795c:	08007a43 	.word	0x08007a43
 8007960:	08007b07 	.word	0x08007b07
 8007964:	08007b07 	.word	0x08007b07
 8007968:	08007b07 	.word	0x08007b07
 800796c:	08007a85 	.word	0x08007a85
 8007970:	08007b07 	.word	0x08007b07
 8007974:	08007b07 	.word	0x08007b07
 8007978:	08007b07 	.word	0x08007b07
 800797c:	08007ac5 	.word	0x08007ac5
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8007980:	68fb      	ldr	r3, [r7, #12]
 8007982:	681b      	ldr	r3, [r3, #0]
 8007984:	68b9      	ldr	r1, [r7, #8]
 8007986:	4618      	mov	r0, r3
 8007988:	f000 f956 	bl	8007c38 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800798c:	68fb      	ldr	r3, [r7, #12]
 800798e:	681b      	ldr	r3, [r3, #0]
 8007990:	699a      	ldr	r2, [r3, #24]
 8007992:	68fb      	ldr	r3, [r7, #12]
 8007994:	681b      	ldr	r3, [r3, #0]
 8007996:	f042 0208 	orr.w	r2, r2, #8
 800799a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800799c:	68fb      	ldr	r3, [r7, #12]
 800799e:	681b      	ldr	r3, [r3, #0]
 80079a0:	699a      	ldr	r2, [r3, #24]
 80079a2:	68fb      	ldr	r3, [r7, #12]
 80079a4:	681b      	ldr	r3, [r3, #0]
 80079a6:	f022 0204 	bic.w	r2, r2, #4
 80079aa:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80079ac:	68fb      	ldr	r3, [r7, #12]
 80079ae:	681b      	ldr	r3, [r3, #0]
 80079b0:	6999      	ldr	r1, [r3, #24]
 80079b2:	68bb      	ldr	r3, [r7, #8]
 80079b4:	691a      	ldr	r2, [r3, #16]
 80079b6:	68fb      	ldr	r3, [r7, #12]
 80079b8:	681b      	ldr	r3, [r3, #0]
 80079ba:	430a      	orrs	r2, r1
 80079bc:	619a      	str	r2, [r3, #24]
      break;
 80079be:	e0a5      	b.n	8007b0c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80079c0:	68fb      	ldr	r3, [r7, #12]
 80079c2:	681b      	ldr	r3, [r3, #0]
 80079c4:	68b9      	ldr	r1, [r7, #8]
 80079c6:	4618      	mov	r0, r3
 80079c8:	f000 f9b2 	bl	8007d30 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80079cc:	68fb      	ldr	r3, [r7, #12]
 80079ce:	681b      	ldr	r3, [r3, #0]
 80079d0:	699a      	ldr	r2, [r3, #24]
 80079d2:	68fb      	ldr	r3, [r7, #12]
 80079d4:	681b      	ldr	r3, [r3, #0]
 80079d6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80079da:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80079dc:	68fb      	ldr	r3, [r7, #12]
 80079de:	681b      	ldr	r3, [r3, #0]
 80079e0:	699a      	ldr	r2, [r3, #24]
 80079e2:	68fb      	ldr	r3, [r7, #12]
 80079e4:	681b      	ldr	r3, [r3, #0]
 80079e6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80079ea:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80079ec:	68fb      	ldr	r3, [r7, #12]
 80079ee:	681b      	ldr	r3, [r3, #0]
 80079f0:	6999      	ldr	r1, [r3, #24]
 80079f2:	68bb      	ldr	r3, [r7, #8]
 80079f4:	691b      	ldr	r3, [r3, #16]
 80079f6:	021a      	lsls	r2, r3, #8
 80079f8:	68fb      	ldr	r3, [r7, #12]
 80079fa:	681b      	ldr	r3, [r3, #0]
 80079fc:	430a      	orrs	r2, r1
 80079fe:	619a      	str	r2, [r3, #24]
      break;
 8007a00:	e084      	b.n	8007b0c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8007a02:	68fb      	ldr	r3, [r7, #12]
 8007a04:	681b      	ldr	r3, [r3, #0]
 8007a06:	68b9      	ldr	r1, [r7, #8]
 8007a08:	4618      	mov	r0, r3
 8007a0a:	f000 fa0b 	bl	8007e24 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8007a0e:	68fb      	ldr	r3, [r7, #12]
 8007a10:	681b      	ldr	r3, [r3, #0]
 8007a12:	69da      	ldr	r2, [r3, #28]
 8007a14:	68fb      	ldr	r3, [r7, #12]
 8007a16:	681b      	ldr	r3, [r3, #0]
 8007a18:	f042 0208 	orr.w	r2, r2, #8
 8007a1c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8007a1e:	68fb      	ldr	r3, [r7, #12]
 8007a20:	681b      	ldr	r3, [r3, #0]
 8007a22:	69da      	ldr	r2, [r3, #28]
 8007a24:	68fb      	ldr	r3, [r7, #12]
 8007a26:	681b      	ldr	r3, [r3, #0]
 8007a28:	f022 0204 	bic.w	r2, r2, #4
 8007a2c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8007a2e:	68fb      	ldr	r3, [r7, #12]
 8007a30:	681b      	ldr	r3, [r3, #0]
 8007a32:	69d9      	ldr	r1, [r3, #28]
 8007a34:	68bb      	ldr	r3, [r7, #8]
 8007a36:	691a      	ldr	r2, [r3, #16]
 8007a38:	68fb      	ldr	r3, [r7, #12]
 8007a3a:	681b      	ldr	r3, [r3, #0]
 8007a3c:	430a      	orrs	r2, r1
 8007a3e:	61da      	str	r2, [r3, #28]
      break;
 8007a40:	e064      	b.n	8007b0c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8007a42:	68fb      	ldr	r3, [r7, #12]
 8007a44:	681b      	ldr	r3, [r3, #0]
 8007a46:	68b9      	ldr	r1, [r7, #8]
 8007a48:	4618      	mov	r0, r3
 8007a4a:	f000 fa63 	bl	8007f14 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8007a4e:	68fb      	ldr	r3, [r7, #12]
 8007a50:	681b      	ldr	r3, [r3, #0]
 8007a52:	69da      	ldr	r2, [r3, #28]
 8007a54:	68fb      	ldr	r3, [r7, #12]
 8007a56:	681b      	ldr	r3, [r3, #0]
 8007a58:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8007a5c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8007a5e:	68fb      	ldr	r3, [r7, #12]
 8007a60:	681b      	ldr	r3, [r3, #0]
 8007a62:	69da      	ldr	r2, [r3, #28]
 8007a64:	68fb      	ldr	r3, [r7, #12]
 8007a66:	681b      	ldr	r3, [r3, #0]
 8007a68:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007a6c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8007a6e:	68fb      	ldr	r3, [r7, #12]
 8007a70:	681b      	ldr	r3, [r3, #0]
 8007a72:	69d9      	ldr	r1, [r3, #28]
 8007a74:	68bb      	ldr	r3, [r7, #8]
 8007a76:	691b      	ldr	r3, [r3, #16]
 8007a78:	021a      	lsls	r2, r3, #8
 8007a7a:	68fb      	ldr	r3, [r7, #12]
 8007a7c:	681b      	ldr	r3, [r3, #0]
 8007a7e:	430a      	orrs	r2, r1
 8007a80:	61da      	str	r2, [r3, #28]
      break;
 8007a82:	e043      	b.n	8007b0c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8007a84:	68fb      	ldr	r3, [r7, #12]
 8007a86:	681b      	ldr	r3, [r3, #0]
 8007a88:	68b9      	ldr	r1, [r7, #8]
 8007a8a:	4618      	mov	r0, r3
 8007a8c:	f000 faa0 	bl	8007fd0 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8007a90:	68fb      	ldr	r3, [r7, #12]
 8007a92:	681b      	ldr	r3, [r3, #0]
 8007a94:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8007a96:	68fb      	ldr	r3, [r7, #12]
 8007a98:	681b      	ldr	r3, [r3, #0]
 8007a9a:	f042 0208 	orr.w	r2, r2, #8
 8007a9e:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8007aa0:	68fb      	ldr	r3, [r7, #12]
 8007aa2:	681b      	ldr	r3, [r3, #0]
 8007aa4:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8007aa6:	68fb      	ldr	r3, [r7, #12]
 8007aa8:	681b      	ldr	r3, [r3, #0]
 8007aaa:	f022 0204 	bic.w	r2, r2, #4
 8007aae:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8007ab0:	68fb      	ldr	r3, [r7, #12]
 8007ab2:	681b      	ldr	r3, [r3, #0]
 8007ab4:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8007ab6:	68bb      	ldr	r3, [r7, #8]
 8007ab8:	691a      	ldr	r2, [r3, #16]
 8007aba:	68fb      	ldr	r3, [r7, #12]
 8007abc:	681b      	ldr	r3, [r3, #0]
 8007abe:	430a      	orrs	r2, r1
 8007ac0:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8007ac2:	e023      	b.n	8007b0c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8007ac4:	68fb      	ldr	r3, [r7, #12]
 8007ac6:	681b      	ldr	r3, [r3, #0]
 8007ac8:	68b9      	ldr	r1, [r7, #8]
 8007aca:	4618      	mov	r0, r3
 8007acc:	f000 fad8 	bl	8008080 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8007ad0:	68fb      	ldr	r3, [r7, #12]
 8007ad2:	681b      	ldr	r3, [r3, #0]
 8007ad4:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8007ad6:	68fb      	ldr	r3, [r7, #12]
 8007ad8:	681b      	ldr	r3, [r3, #0]
 8007ada:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8007ade:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8007ae0:	68fb      	ldr	r3, [r7, #12]
 8007ae2:	681b      	ldr	r3, [r3, #0]
 8007ae4:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8007ae6:	68fb      	ldr	r3, [r7, #12]
 8007ae8:	681b      	ldr	r3, [r3, #0]
 8007aea:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007aee:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8007af0:	68fb      	ldr	r3, [r7, #12]
 8007af2:	681b      	ldr	r3, [r3, #0]
 8007af4:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8007af6:	68bb      	ldr	r3, [r7, #8]
 8007af8:	691b      	ldr	r3, [r3, #16]
 8007afa:	021a      	lsls	r2, r3, #8
 8007afc:	68fb      	ldr	r3, [r7, #12]
 8007afe:	681b      	ldr	r3, [r3, #0]
 8007b00:	430a      	orrs	r2, r1
 8007b02:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8007b04:	e002      	b.n	8007b0c <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8007b06:	2301      	movs	r3, #1
 8007b08:	75fb      	strb	r3, [r7, #23]
      break;
 8007b0a:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8007b0c:	68fb      	ldr	r3, [r7, #12]
 8007b0e:	2200      	movs	r2, #0
 8007b10:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8007b14:	7dfb      	ldrb	r3, [r7, #23]
}
 8007b16:	4618      	mov	r0, r3
 8007b18:	3718      	adds	r7, #24
 8007b1a:	46bd      	mov	sp, r7
 8007b1c:	bd80      	pop	{r7, pc}
 8007b1e:	bf00      	nop

08007b20 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007b20:	b480      	push	{r7}
 8007b22:	b083      	sub	sp, #12
 8007b24:	af00      	add	r7, sp, #0
 8007b26:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007b28:	bf00      	nop
 8007b2a:	370c      	adds	r7, #12
 8007b2c:	46bd      	mov	sp, r7
 8007b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b32:	4770      	bx	lr

08007b34 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8007b34:	b480      	push	{r7}
 8007b36:	b083      	sub	sp, #12
 8007b38:	af00      	add	r7, sp, #0
 8007b3a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8007b3c:	bf00      	nop
 8007b3e:	370c      	adds	r7, #12
 8007b40:	46bd      	mov	sp, r7
 8007b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b46:	4770      	bx	lr

08007b48 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007b48:	b480      	push	{r7}
 8007b4a:	b083      	sub	sp, #12
 8007b4c:	af00      	add	r7, sp, #0
 8007b4e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007b50:	bf00      	nop
 8007b52:	370c      	adds	r7, #12
 8007b54:	46bd      	mov	sp, r7
 8007b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b5a:	4770      	bx	lr

08007b5c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007b5c:	b480      	push	{r7}
 8007b5e:	b083      	sub	sp, #12
 8007b60:	af00      	add	r7, sp, #0
 8007b62:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007b64:	bf00      	nop
 8007b66:	370c      	adds	r7, #12
 8007b68:	46bd      	mov	sp, r7
 8007b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b6e:	4770      	bx	lr

08007b70 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8007b70:	b480      	push	{r7}
 8007b72:	b085      	sub	sp, #20
 8007b74:	af00      	add	r7, sp, #0
 8007b76:	6078      	str	r0, [r7, #4]
 8007b78:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	681b      	ldr	r3, [r3, #0]
 8007b7e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	4a2a      	ldr	r2, [pc, #168]	@ (8007c2c <TIM_Base_SetConfig+0xbc>)
 8007b84:	4293      	cmp	r3, r2
 8007b86:	d003      	beq.n	8007b90 <TIM_Base_SetConfig+0x20>
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007b8e:	d108      	bne.n	8007ba2 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007b90:	68fb      	ldr	r3, [r7, #12]
 8007b92:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007b96:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007b98:	683b      	ldr	r3, [r7, #0]
 8007b9a:	685b      	ldr	r3, [r3, #4]
 8007b9c:	68fa      	ldr	r2, [r7, #12]
 8007b9e:	4313      	orrs	r3, r2
 8007ba0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	4a21      	ldr	r2, [pc, #132]	@ (8007c2c <TIM_Base_SetConfig+0xbc>)
 8007ba6:	4293      	cmp	r3, r2
 8007ba8:	d00b      	beq.n	8007bc2 <TIM_Base_SetConfig+0x52>
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007bb0:	d007      	beq.n	8007bc2 <TIM_Base_SetConfig+0x52>
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	4a1e      	ldr	r2, [pc, #120]	@ (8007c30 <TIM_Base_SetConfig+0xc0>)
 8007bb6:	4293      	cmp	r3, r2
 8007bb8:	d003      	beq.n	8007bc2 <TIM_Base_SetConfig+0x52>
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	4a1d      	ldr	r2, [pc, #116]	@ (8007c34 <TIM_Base_SetConfig+0xc4>)
 8007bbe:	4293      	cmp	r3, r2
 8007bc0:	d108      	bne.n	8007bd4 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007bc2:	68fb      	ldr	r3, [r7, #12]
 8007bc4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007bc8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007bca:	683b      	ldr	r3, [r7, #0]
 8007bcc:	68db      	ldr	r3, [r3, #12]
 8007bce:	68fa      	ldr	r2, [r7, #12]
 8007bd0:	4313      	orrs	r3, r2
 8007bd2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007bd4:	68fb      	ldr	r3, [r7, #12]
 8007bd6:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8007bda:	683b      	ldr	r3, [r7, #0]
 8007bdc:	695b      	ldr	r3, [r3, #20]
 8007bde:	4313      	orrs	r3, r2
 8007be0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	68fa      	ldr	r2, [r7, #12]
 8007be6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007be8:	683b      	ldr	r3, [r7, #0]
 8007bea:	689a      	ldr	r2, [r3, #8]
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007bf0:	683b      	ldr	r3, [r7, #0]
 8007bf2:	681a      	ldr	r2, [r3, #0]
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	4a0c      	ldr	r2, [pc, #48]	@ (8007c2c <TIM_Base_SetConfig+0xbc>)
 8007bfc:	4293      	cmp	r3, r2
 8007bfe:	d007      	beq.n	8007c10 <TIM_Base_SetConfig+0xa0>
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	4a0b      	ldr	r2, [pc, #44]	@ (8007c30 <TIM_Base_SetConfig+0xc0>)
 8007c04:	4293      	cmp	r3, r2
 8007c06:	d003      	beq.n	8007c10 <TIM_Base_SetConfig+0xa0>
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	4a0a      	ldr	r2, [pc, #40]	@ (8007c34 <TIM_Base_SetConfig+0xc4>)
 8007c0c:	4293      	cmp	r3, r2
 8007c0e:	d103      	bne.n	8007c18 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007c10:	683b      	ldr	r3, [r7, #0]
 8007c12:	691a      	ldr	r2, [r3, #16]
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	2201      	movs	r2, #1
 8007c1c:	615a      	str	r2, [r3, #20]
}
 8007c1e:	bf00      	nop
 8007c20:	3714      	adds	r7, #20
 8007c22:	46bd      	mov	sp, r7
 8007c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c28:	4770      	bx	lr
 8007c2a:	bf00      	nop
 8007c2c:	40012c00 	.word	0x40012c00
 8007c30:	40014000 	.word	0x40014000
 8007c34:	40014400 	.word	0x40014400

08007c38 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007c38:	b480      	push	{r7}
 8007c3a:	b087      	sub	sp, #28
 8007c3c:	af00      	add	r7, sp, #0
 8007c3e:	6078      	str	r0, [r7, #4]
 8007c40:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	6a1b      	ldr	r3, [r3, #32]
 8007c46:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	6a1b      	ldr	r3, [r3, #32]
 8007c4c:	f023 0201 	bic.w	r2, r3, #1
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	685b      	ldr	r3, [r3, #4]
 8007c58:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	699b      	ldr	r3, [r3, #24]
 8007c5e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8007c60:	68fb      	ldr	r3, [r7, #12]
 8007c62:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007c66:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007c6a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8007c6c:	68fb      	ldr	r3, [r7, #12]
 8007c6e:	f023 0303 	bic.w	r3, r3, #3
 8007c72:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007c74:	683b      	ldr	r3, [r7, #0]
 8007c76:	681b      	ldr	r3, [r3, #0]
 8007c78:	68fa      	ldr	r2, [r7, #12]
 8007c7a:	4313      	orrs	r3, r2
 8007c7c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8007c7e:	697b      	ldr	r3, [r7, #20]
 8007c80:	f023 0302 	bic.w	r3, r3, #2
 8007c84:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8007c86:	683b      	ldr	r3, [r7, #0]
 8007c88:	689b      	ldr	r3, [r3, #8]
 8007c8a:	697a      	ldr	r2, [r7, #20]
 8007c8c:	4313      	orrs	r3, r2
 8007c8e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	4a24      	ldr	r2, [pc, #144]	@ (8007d24 <TIM_OC1_SetConfig+0xec>)
 8007c94:	4293      	cmp	r3, r2
 8007c96:	d007      	beq.n	8007ca8 <TIM_OC1_SetConfig+0x70>
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	4a23      	ldr	r2, [pc, #140]	@ (8007d28 <TIM_OC1_SetConfig+0xf0>)
 8007c9c:	4293      	cmp	r3, r2
 8007c9e:	d003      	beq.n	8007ca8 <TIM_OC1_SetConfig+0x70>
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	4a22      	ldr	r2, [pc, #136]	@ (8007d2c <TIM_OC1_SetConfig+0xf4>)
 8007ca4:	4293      	cmp	r3, r2
 8007ca6:	d10c      	bne.n	8007cc2 <TIM_OC1_SetConfig+0x8a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8007ca8:	697b      	ldr	r3, [r7, #20]
 8007caa:	f023 0308 	bic.w	r3, r3, #8
 8007cae:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8007cb0:	683b      	ldr	r3, [r7, #0]
 8007cb2:	68db      	ldr	r3, [r3, #12]
 8007cb4:	697a      	ldr	r2, [r7, #20]
 8007cb6:	4313      	orrs	r3, r2
 8007cb8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8007cba:	697b      	ldr	r3, [r7, #20]
 8007cbc:	f023 0304 	bic.w	r3, r3, #4
 8007cc0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	4a17      	ldr	r2, [pc, #92]	@ (8007d24 <TIM_OC1_SetConfig+0xec>)
 8007cc6:	4293      	cmp	r3, r2
 8007cc8:	d007      	beq.n	8007cda <TIM_OC1_SetConfig+0xa2>
 8007cca:	687b      	ldr	r3, [r7, #4]
 8007ccc:	4a16      	ldr	r2, [pc, #88]	@ (8007d28 <TIM_OC1_SetConfig+0xf0>)
 8007cce:	4293      	cmp	r3, r2
 8007cd0:	d003      	beq.n	8007cda <TIM_OC1_SetConfig+0xa2>
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	4a15      	ldr	r2, [pc, #84]	@ (8007d2c <TIM_OC1_SetConfig+0xf4>)
 8007cd6:	4293      	cmp	r3, r2
 8007cd8:	d111      	bne.n	8007cfe <TIM_OC1_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8007cda:	693b      	ldr	r3, [r7, #16]
 8007cdc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007ce0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8007ce2:	693b      	ldr	r3, [r7, #16]
 8007ce4:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8007ce8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8007cea:	683b      	ldr	r3, [r7, #0]
 8007cec:	695b      	ldr	r3, [r3, #20]
 8007cee:	693a      	ldr	r2, [r7, #16]
 8007cf0:	4313      	orrs	r3, r2
 8007cf2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8007cf4:	683b      	ldr	r3, [r7, #0]
 8007cf6:	699b      	ldr	r3, [r3, #24]
 8007cf8:	693a      	ldr	r2, [r7, #16]
 8007cfa:	4313      	orrs	r3, r2
 8007cfc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	693a      	ldr	r2, [r7, #16]
 8007d02:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	68fa      	ldr	r2, [r7, #12]
 8007d08:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8007d0a:	683b      	ldr	r3, [r7, #0]
 8007d0c:	685a      	ldr	r2, [r3, #4]
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	697a      	ldr	r2, [r7, #20]
 8007d16:	621a      	str	r2, [r3, #32]
}
 8007d18:	bf00      	nop
 8007d1a:	371c      	adds	r7, #28
 8007d1c:	46bd      	mov	sp, r7
 8007d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d22:	4770      	bx	lr
 8007d24:	40012c00 	.word	0x40012c00
 8007d28:	40014000 	.word	0x40014000
 8007d2c:	40014400 	.word	0x40014400

08007d30 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007d30:	b480      	push	{r7}
 8007d32:	b087      	sub	sp, #28
 8007d34:	af00      	add	r7, sp, #0
 8007d36:	6078      	str	r0, [r7, #4]
 8007d38:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	6a1b      	ldr	r3, [r3, #32]
 8007d3e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	6a1b      	ldr	r3, [r3, #32]
 8007d44:	f023 0210 	bic.w	r2, r3, #16
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	685b      	ldr	r3, [r3, #4]
 8007d50:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	699b      	ldr	r3, [r3, #24]
 8007d56:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8007d58:	68fb      	ldr	r3, [r7, #12]
 8007d5a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8007d5e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007d62:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8007d64:	68fb      	ldr	r3, [r7, #12]
 8007d66:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007d6a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007d6c:	683b      	ldr	r3, [r7, #0]
 8007d6e:	681b      	ldr	r3, [r3, #0]
 8007d70:	021b      	lsls	r3, r3, #8
 8007d72:	68fa      	ldr	r2, [r7, #12]
 8007d74:	4313      	orrs	r3, r2
 8007d76:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8007d78:	697b      	ldr	r3, [r7, #20]
 8007d7a:	f023 0320 	bic.w	r3, r3, #32
 8007d7e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8007d80:	683b      	ldr	r3, [r7, #0]
 8007d82:	689b      	ldr	r3, [r3, #8]
 8007d84:	011b      	lsls	r3, r3, #4
 8007d86:	697a      	ldr	r2, [r7, #20]
 8007d88:	4313      	orrs	r3, r2
 8007d8a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	4a22      	ldr	r2, [pc, #136]	@ (8007e18 <TIM_OC2_SetConfig+0xe8>)
 8007d90:	4293      	cmp	r3, r2
 8007d92:	d10d      	bne.n	8007db0 <TIM_OC2_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8007d94:	697b      	ldr	r3, [r7, #20]
 8007d96:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007d9a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8007d9c:	683b      	ldr	r3, [r7, #0]
 8007d9e:	68db      	ldr	r3, [r3, #12]
 8007da0:	011b      	lsls	r3, r3, #4
 8007da2:	697a      	ldr	r2, [r7, #20]
 8007da4:	4313      	orrs	r3, r2
 8007da6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8007da8:	697b      	ldr	r3, [r7, #20]
 8007daa:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007dae:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	4a19      	ldr	r2, [pc, #100]	@ (8007e18 <TIM_OC2_SetConfig+0xe8>)
 8007db4:	4293      	cmp	r3, r2
 8007db6:	d007      	beq.n	8007dc8 <TIM_OC2_SetConfig+0x98>
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	4a18      	ldr	r2, [pc, #96]	@ (8007e1c <TIM_OC2_SetConfig+0xec>)
 8007dbc:	4293      	cmp	r3, r2
 8007dbe:	d003      	beq.n	8007dc8 <TIM_OC2_SetConfig+0x98>
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	4a17      	ldr	r2, [pc, #92]	@ (8007e20 <TIM_OC2_SetConfig+0xf0>)
 8007dc4:	4293      	cmp	r3, r2
 8007dc6:	d113      	bne.n	8007df0 <TIM_OC2_SetConfig+0xc0>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8007dc8:	693b      	ldr	r3, [r7, #16]
 8007dca:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8007dce:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8007dd0:	693b      	ldr	r3, [r7, #16]
 8007dd2:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8007dd6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8007dd8:	683b      	ldr	r3, [r7, #0]
 8007dda:	695b      	ldr	r3, [r3, #20]
 8007ddc:	009b      	lsls	r3, r3, #2
 8007dde:	693a      	ldr	r2, [r7, #16]
 8007de0:	4313      	orrs	r3, r2
 8007de2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8007de4:	683b      	ldr	r3, [r7, #0]
 8007de6:	699b      	ldr	r3, [r3, #24]
 8007de8:	009b      	lsls	r3, r3, #2
 8007dea:	693a      	ldr	r2, [r7, #16]
 8007dec:	4313      	orrs	r3, r2
 8007dee:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	693a      	ldr	r2, [r7, #16]
 8007df4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	68fa      	ldr	r2, [r7, #12]
 8007dfa:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8007dfc:	683b      	ldr	r3, [r7, #0]
 8007dfe:	685a      	ldr	r2, [r3, #4]
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	697a      	ldr	r2, [r7, #20]
 8007e08:	621a      	str	r2, [r3, #32]
}
 8007e0a:	bf00      	nop
 8007e0c:	371c      	adds	r7, #28
 8007e0e:	46bd      	mov	sp, r7
 8007e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e14:	4770      	bx	lr
 8007e16:	bf00      	nop
 8007e18:	40012c00 	.word	0x40012c00
 8007e1c:	40014000 	.word	0x40014000
 8007e20:	40014400 	.word	0x40014400

08007e24 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007e24:	b480      	push	{r7}
 8007e26:	b087      	sub	sp, #28
 8007e28:	af00      	add	r7, sp, #0
 8007e2a:	6078      	str	r0, [r7, #4]
 8007e2c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	6a1b      	ldr	r3, [r3, #32]
 8007e32:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	6a1b      	ldr	r3, [r3, #32]
 8007e38:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	685b      	ldr	r3, [r3, #4]
 8007e44:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007e46:	687b      	ldr	r3, [r7, #4]
 8007e48:	69db      	ldr	r3, [r3, #28]
 8007e4a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8007e4c:	68fb      	ldr	r3, [r7, #12]
 8007e4e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007e52:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007e56:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8007e58:	68fb      	ldr	r3, [r7, #12]
 8007e5a:	f023 0303 	bic.w	r3, r3, #3
 8007e5e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007e60:	683b      	ldr	r3, [r7, #0]
 8007e62:	681b      	ldr	r3, [r3, #0]
 8007e64:	68fa      	ldr	r2, [r7, #12]
 8007e66:	4313      	orrs	r3, r2
 8007e68:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8007e6a:	697b      	ldr	r3, [r7, #20]
 8007e6c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8007e70:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8007e72:	683b      	ldr	r3, [r7, #0]
 8007e74:	689b      	ldr	r3, [r3, #8]
 8007e76:	021b      	lsls	r3, r3, #8
 8007e78:	697a      	ldr	r2, [r7, #20]
 8007e7a:	4313      	orrs	r3, r2
 8007e7c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	4a21      	ldr	r2, [pc, #132]	@ (8007f08 <TIM_OC3_SetConfig+0xe4>)
 8007e82:	4293      	cmp	r3, r2
 8007e84:	d10d      	bne.n	8007ea2 <TIM_OC3_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8007e86:	697b      	ldr	r3, [r7, #20]
 8007e88:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8007e8c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8007e8e:	683b      	ldr	r3, [r7, #0]
 8007e90:	68db      	ldr	r3, [r3, #12]
 8007e92:	021b      	lsls	r3, r3, #8
 8007e94:	697a      	ldr	r2, [r7, #20]
 8007e96:	4313      	orrs	r3, r2
 8007e98:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8007e9a:	697b      	ldr	r3, [r7, #20]
 8007e9c:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8007ea0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007ea2:	687b      	ldr	r3, [r7, #4]
 8007ea4:	4a18      	ldr	r2, [pc, #96]	@ (8007f08 <TIM_OC3_SetConfig+0xe4>)
 8007ea6:	4293      	cmp	r3, r2
 8007ea8:	d007      	beq.n	8007eba <TIM_OC3_SetConfig+0x96>
 8007eaa:	687b      	ldr	r3, [r7, #4]
 8007eac:	4a17      	ldr	r2, [pc, #92]	@ (8007f0c <TIM_OC3_SetConfig+0xe8>)
 8007eae:	4293      	cmp	r3, r2
 8007eb0:	d003      	beq.n	8007eba <TIM_OC3_SetConfig+0x96>
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	4a16      	ldr	r2, [pc, #88]	@ (8007f10 <TIM_OC3_SetConfig+0xec>)
 8007eb6:	4293      	cmp	r3, r2
 8007eb8:	d113      	bne.n	8007ee2 <TIM_OC3_SetConfig+0xbe>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8007eba:	693b      	ldr	r3, [r7, #16]
 8007ebc:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8007ec0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8007ec2:	693b      	ldr	r3, [r7, #16]
 8007ec4:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8007ec8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8007eca:	683b      	ldr	r3, [r7, #0]
 8007ecc:	695b      	ldr	r3, [r3, #20]
 8007ece:	011b      	lsls	r3, r3, #4
 8007ed0:	693a      	ldr	r2, [r7, #16]
 8007ed2:	4313      	orrs	r3, r2
 8007ed4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8007ed6:	683b      	ldr	r3, [r7, #0]
 8007ed8:	699b      	ldr	r3, [r3, #24]
 8007eda:	011b      	lsls	r3, r3, #4
 8007edc:	693a      	ldr	r2, [r7, #16]
 8007ede:	4313      	orrs	r3, r2
 8007ee0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007ee2:	687b      	ldr	r3, [r7, #4]
 8007ee4:	693a      	ldr	r2, [r7, #16]
 8007ee6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007ee8:	687b      	ldr	r3, [r7, #4]
 8007eea:	68fa      	ldr	r2, [r7, #12]
 8007eec:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8007eee:	683b      	ldr	r3, [r7, #0]
 8007ef0:	685a      	ldr	r2, [r3, #4]
 8007ef2:	687b      	ldr	r3, [r7, #4]
 8007ef4:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	697a      	ldr	r2, [r7, #20]
 8007efa:	621a      	str	r2, [r3, #32]
}
 8007efc:	bf00      	nop
 8007efe:	371c      	adds	r7, #28
 8007f00:	46bd      	mov	sp, r7
 8007f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f06:	4770      	bx	lr
 8007f08:	40012c00 	.word	0x40012c00
 8007f0c:	40014000 	.word	0x40014000
 8007f10:	40014400 	.word	0x40014400

08007f14 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007f14:	b480      	push	{r7}
 8007f16:	b087      	sub	sp, #28
 8007f18:	af00      	add	r7, sp, #0
 8007f1a:	6078      	str	r0, [r7, #4]
 8007f1c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007f1e:	687b      	ldr	r3, [r7, #4]
 8007f20:	6a1b      	ldr	r3, [r3, #32]
 8007f22:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	6a1b      	ldr	r3, [r3, #32]
 8007f28:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007f30:	687b      	ldr	r3, [r7, #4]
 8007f32:	685b      	ldr	r3, [r3, #4]
 8007f34:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007f36:	687b      	ldr	r3, [r7, #4]
 8007f38:	69db      	ldr	r3, [r3, #28]
 8007f3a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8007f3c:	68fb      	ldr	r3, [r7, #12]
 8007f3e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8007f42:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007f46:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8007f48:	68fb      	ldr	r3, [r7, #12]
 8007f4a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007f4e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007f50:	683b      	ldr	r3, [r7, #0]
 8007f52:	681b      	ldr	r3, [r3, #0]
 8007f54:	021b      	lsls	r3, r3, #8
 8007f56:	68fa      	ldr	r2, [r7, #12]
 8007f58:	4313      	orrs	r3, r2
 8007f5a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8007f5c:	693b      	ldr	r3, [r7, #16]
 8007f5e:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8007f62:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007f64:	683b      	ldr	r3, [r7, #0]
 8007f66:	689b      	ldr	r3, [r3, #8]
 8007f68:	031b      	lsls	r3, r3, #12
 8007f6a:	693a      	ldr	r2, [r7, #16]
 8007f6c:	4313      	orrs	r3, r2
 8007f6e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007f70:	687b      	ldr	r3, [r7, #4]
 8007f72:	4a14      	ldr	r2, [pc, #80]	@ (8007fc4 <TIM_OC4_SetConfig+0xb0>)
 8007f74:	4293      	cmp	r3, r2
 8007f76:	d007      	beq.n	8007f88 <TIM_OC4_SetConfig+0x74>
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	4a13      	ldr	r2, [pc, #76]	@ (8007fc8 <TIM_OC4_SetConfig+0xb4>)
 8007f7c:	4293      	cmp	r3, r2
 8007f7e:	d003      	beq.n	8007f88 <TIM_OC4_SetConfig+0x74>
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	4a12      	ldr	r2, [pc, #72]	@ (8007fcc <TIM_OC4_SetConfig+0xb8>)
 8007f84:	4293      	cmp	r3, r2
 8007f86:	d109      	bne.n	8007f9c <TIM_OC4_SetConfig+0x88>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8007f88:	697b      	ldr	r3, [r7, #20]
 8007f8a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8007f8e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8007f90:	683b      	ldr	r3, [r7, #0]
 8007f92:	695b      	ldr	r3, [r3, #20]
 8007f94:	019b      	lsls	r3, r3, #6
 8007f96:	697a      	ldr	r2, [r7, #20]
 8007f98:	4313      	orrs	r3, r2
 8007f9a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	697a      	ldr	r2, [r7, #20]
 8007fa0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007fa2:	687b      	ldr	r3, [r7, #4]
 8007fa4:	68fa      	ldr	r2, [r7, #12]
 8007fa6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007fa8:	683b      	ldr	r3, [r7, #0]
 8007faa:	685a      	ldr	r2, [r3, #4]
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007fb0:	687b      	ldr	r3, [r7, #4]
 8007fb2:	693a      	ldr	r2, [r7, #16]
 8007fb4:	621a      	str	r2, [r3, #32]
}
 8007fb6:	bf00      	nop
 8007fb8:	371c      	adds	r7, #28
 8007fba:	46bd      	mov	sp, r7
 8007fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fc0:	4770      	bx	lr
 8007fc2:	bf00      	nop
 8007fc4:	40012c00 	.word	0x40012c00
 8007fc8:	40014000 	.word	0x40014000
 8007fcc:	40014400 	.word	0x40014400

08007fd0 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8007fd0:	b480      	push	{r7}
 8007fd2:	b087      	sub	sp, #28
 8007fd4:	af00      	add	r7, sp, #0
 8007fd6:	6078      	str	r0, [r7, #4]
 8007fd8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007fda:	687b      	ldr	r3, [r7, #4]
 8007fdc:	6a1b      	ldr	r3, [r3, #32]
 8007fde:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	6a1b      	ldr	r3, [r3, #32]
 8007fe4:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007fec:	687b      	ldr	r3, [r7, #4]
 8007fee:	685b      	ldr	r3, [r3, #4]
 8007ff0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8007ff2:	687b      	ldr	r3, [r7, #4]
 8007ff4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007ff6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8007ff8:	68fb      	ldr	r3, [r7, #12]
 8007ffa:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007ffe:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008002:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008004:	683b      	ldr	r3, [r7, #0]
 8008006:	681b      	ldr	r3, [r3, #0]
 8008008:	68fa      	ldr	r2, [r7, #12]
 800800a:	4313      	orrs	r3, r2
 800800c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800800e:	693b      	ldr	r3, [r7, #16]
 8008010:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8008014:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8008016:	683b      	ldr	r3, [r7, #0]
 8008018:	689b      	ldr	r3, [r3, #8]
 800801a:	041b      	lsls	r3, r3, #16
 800801c:	693a      	ldr	r2, [r7, #16]
 800801e:	4313      	orrs	r3, r2
 8008020:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008022:	687b      	ldr	r3, [r7, #4]
 8008024:	4a13      	ldr	r2, [pc, #76]	@ (8008074 <TIM_OC5_SetConfig+0xa4>)
 8008026:	4293      	cmp	r3, r2
 8008028:	d007      	beq.n	800803a <TIM_OC5_SetConfig+0x6a>
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	4a12      	ldr	r2, [pc, #72]	@ (8008078 <TIM_OC5_SetConfig+0xa8>)
 800802e:	4293      	cmp	r3, r2
 8008030:	d003      	beq.n	800803a <TIM_OC5_SetConfig+0x6a>
 8008032:	687b      	ldr	r3, [r7, #4]
 8008034:	4a11      	ldr	r2, [pc, #68]	@ (800807c <TIM_OC5_SetConfig+0xac>)
 8008036:	4293      	cmp	r3, r2
 8008038:	d109      	bne.n	800804e <TIM_OC5_SetConfig+0x7e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800803a:	697b      	ldr	r3, [r7, #20]
 800803c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8008040:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8008042:	683b      	ldr	r3, [r7, #0]
 8008044:	695b      	ldr	r3, [r3, #20]
 8008046:	021b      	lsls	r3, r3, #8
 8008048:	697a      	ldr	r2, [r7, #20]
 800804a:	4313      	orrs	r3, r2
 800804c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800804e:	687b      	ldr	r3, [r7, #4]
 8008050:	697a      	ldr	r2, [r7, #20]
 8008052:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8008054:	687b      	ldr	r3, [r7, #4]
 8008056:	68fa      	ldr	r2, [r7, #12]
 8008058:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800805a:	683b      	ldr	r3, [r7, #0]
 800805c:	685a      	ldr	r2, [r3, #4]
 800805e:	687b      	ldr	r3, [r7, #4]
 8008060:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	693a      	ldr	r2, [r7, #16]
 8008066:	621a      	str	r2, [r3, #32]
}
 8008068:	bf00      	nop
 800806a:	371c      	adds	r7, #28
 800806c:	46bd      	mov	sp, r7
 800806e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008072:	4770      	bx	lr
 8008074:	40012c00 	.word	0x40012c00
 8008078:	40014000 	.word	0x40014000
 800807c:	40014400 	.word	0x40014400

08008080 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8008080:	b480      	push	{r7}
 8008082:	b087      	sub	sp, #28
 8008084:	af00      	add	r7, sp, #0
 8008086:	6078      	str	r0, [r7, #4]
 8008088:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800808a:	687b      	ldr	r3, [r7, #4]
 800808c:	6a1b      	ldr	r3, [r3, #32]
 800808e:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8008090:	687b      	ldr	r3, [r7, #4]
 8008092:	6a1b      	ldr	r3, [r3, #32]
 8008094:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8008098:	687b      	ldr	r3, [r7, #4]
 800809a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	685b      	ldr	r3, [r3, #4]
 80080a0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80080a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80080a8:	68fb      	ldr	r3, [r7, #12]
 80080aa:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80080ae:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80080b2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80080b4:	683b      	ldr	r3, [r7, #0]
 80080b6:	681b      	ldr	r3, [r3, #0]
 80080b8:	021b      	lsls	r3, r3, #8
 80080ba:	68fa      	ldr	r2, [r7, #12]
 80080bc:	4313      	orrs	r3, r2
 80080be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80080c0:	693b      	ldr	r3, [r7, #16]
 80080c2:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80080c6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80080c8:	683b      	ldr	r3, [r7, #0]
 80080ca:	689b      	ldr	r3, [r3, #8]
 80080cc:	051b      	lsls	r3, r3, #20
 80080ce:	693a      	ldr	r2, [r7, #16]
 80080d0:	4313      	orrs	r3, r2
 80080d2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	4a14      	ldr	r2, [pc, #80]	@ (8008128 <TIM_OC6_SetConfig+0xa8>)
 80080d8:	4293      	cmp	r3, r2
 80080da:	d007      	beq.n	80080ec <TIM_OC6_SetConfig+0x6c>
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	4a13      	ldr	r2, [pc, #76]	@ (800812c <TIM_OC6_SetConfig+0xac>)
 80080e0:	4293      	cmp	r3, r2
 80080e2:	d003      	beq.n	80080ec <TIM_OC6_SetConfig+0x6c>
 80080e4:	687b      	ldr	r3, [r7, #4]
 80080e6:	4a12      	ldr	r2, [pc, #72]	@ (8008130 <TIM_OC6_SetConfig+0xb0>)
 80080e8:	4293      	cmp	r3, r2
 80080ea:	d109      	bne.n	8008100 <TIM_OC6_SetConfig+0x80>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80080ec:	697b      	ldr	r3, [r7, #20]
 80080ee:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80080f2:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80080f4:	683b      	ldr	r3, [r7, #0]
 80080f6:	695b      	ldr	r3, [r3, #20]
 80080f8:	029b      	lsls	r3, r3, #10
 80080fa:	697a      	ldr	r2, [r7, #20]
 80080fc:	4313      	orrs	r3, r2
 80080fe:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	697a      	ldr	r2, [r7, #20]
 8008104:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8008106:	687b      	ldr	r3, [r7, #4]
 8008108:	68fa      	ldr	r2, [r7, #12]
 800810a:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800810c:	683b      	ldr	r3, [r7, #0]
 800810e:	685a      	ldr	r2, [r3, #4]
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	693a      	ldr	r2, [r7, #16]
 8008118:	621a      	str	r2, [r3, #32]
}
 800811a:	bf00      	nop
 800811c:	371c      	adds	r7, #28
 800811e:	46bd      	mov	sp, r7
 8008120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008124:	4770      	bx	lr
 8008126:	bf00      	nop
 8008128:	40012c00 	.word	0x40012c00
 800812c:	40014000 	.word	0x40014000
 8008130:	40014400 	.word	0x40014400

08008134 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8008134:	b480      	push	{r7}
 8008136:	b087      	sub	sp, #28
 8008138:	af00      	add	r7, sp, #0
 800813a:	60f8      	str	r0, [r7, #12]
 800813c:	60b9      	str	r1, [r7, #8]
 800813e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8008140:	68bb      	ldr	r3, [r7, #8]
 8008142:	f003 031f 	and.w	r3, r3, #31
 8008146:	2201      	movs	r2, #1
 8008148:	fa02 f303 	lsl.w	r3, r2, r3
 800814c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800814e:	68fb      	ldr	r3, [r7, #12]
 8008150:	6a1a      	ldr	r2, [r3, #32]
 8008152:	697b      	ldr	r3, [r7, #20]
 8008154:	43db      	mvns	r3, r3
 8008156:	401a      	ands	r2, r3
 8008158:	68fb      	ldr	r3, [r7, #12]
 800815a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800815c:	68fb      	ldr	r3, [r7, #12]
 800815e:	6a1a      	ldr	r2, [r3, #32]
 8008160:	68bb      	ldr	r3, [r7, #8]
 8008162:	f003 031f 	and.w	r3, r3, #31
 8008166:	6879      	ldr	r1, [r7, #4]
 8008168:	fa01 f303 	lsl.w	r3, r1, r3
 800816c:	431a      	orrs	r2, r3
 800816e:	68fb      	ldr	r3, [r7, #12]
 8008170:	621a      	str	r2, [r3, #32]
}
 8008172:	bf00      	nop
 8008174:	371c      	adds	r7, #28
 8008176:	46bd      	mov	sp, r7
 8008178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800817c:	4770      	bx	lr
	...

08008180 <HAL_TIMEx_PWMN_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8008180:	b580      	push	{r7, lr}
 8008182:	b084      	sub	sp, #16
 8008184:	af00      	add	r7, sp, #0
 8008186:	6078      	str	r0, [r7, #4]
 8008188:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Check the TIM complementary channel state */
  if (TIM_CHANNEL_N_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800818a:	683b      	ldr	r3, [r7, #0]
 800818c:	2b00      	cmp	r3, #0
 800818e:	d109      	bne.n	80081a4 <HAL_TIMEx_PWMN_Start+0x24>
 8008190:	687b      	ldr	r3, [r7, #4]
 8008192:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8008196:	b2db      	uxtb	r3, r3
 8008198:	2b01      	cmp	r3, #1
 800819a:	bf14      	ite	ne
 800819c:	2301      	movne	r3, #1
 800819e:	2300      	moveq	r3, #0
 80081a0:	b2db      	uxtb	r3, r3
 80081a2:	e022      	b.n	80081ea <HAL_TIMEx_PWMN_Start+0x6a>
 80081a4:	683b      	ldr	r3, [r7, #0]
 80081a6:	2b04      	cmp	r3, #4
 80081a8:	d109      	bne.n	80081be <HAL_TIMEx_PWMN_Start+0x3e>
 80081aa:	687b      	ldr	r3, [r7, #4]
 80081ac:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80081b0:	b2db      	uxtb	r3, r3
 80081b2:	2b01      	cmp	r3, #1
 80081b4:	bf14      	ite	ne
 80081b6:	2301      	movne	r3, #1
 80081b8:	2300      	moveq	r3, #0
 80081ba:	b2db      	uxtb	r3, r3
 80081bc:	e015      	b.n	80081ea <HAL_TIMEx_PWMN_Start+0x6a>
 80081be:	683b      	ldr	r3, [r7, #0]
 80081c0:	2b08      	cmp	r3, #8
 80081c2:	d109      	bne.n	80081d8 <HAL_TIMEx_PWMN_Start+0x58>
 80081c4:	687b      	ldr	r3, [r7, #4]
 80081c6:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 80081ca:	b2db      	uxtb	r3, r3
 80081cc:	2b01      	cmp	r3, #1
 80081ce:	bf14      	ite	ne
 80081d0:	2301      	movne	r3, #1
 80081d2:	2300      	moveq	r3, #0
 80081d4:	b2db      	uxtb	r3, r3
 80081d6:	e008      	b.n	80081ea <HAL_TIMEx_PWMN_Start+0x6a>
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	f893 3047 	ldrb.w	r3, [r3, #71]	@ 0x47
 80081de:	b2db      	uxtb	r3, r3
 80081e0:	2b01      	cmp	r3, #1
 80081e2:	bf14      	ite	ne
 80081e4:	2301      	movne	r3, #1
 80081e6:	2300      	moveq	r3, #0
 80081e8:	b2db      	uxtb	r3, r3
 80081ea:	2b00      	cmp	r3, #0
 80081ec:	d001      	beq.n	80081f2 <HAL_TIMEx_PWMN_Start+0x72>
  {
    return HAL_ERROR;
 80081ee:	2301      	movs	r3, #1
 80081f0:	e05a      	b.n	80082a8 <HAL_TIMEx_PWMN_Start+0x128>
  }

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80081f2:	683b      	ldr	r3, [r7, #0]
 80081f4:	2b00      	cmp	r3, #0
 80081f6:	d104      	bne.n	8008202 <HAL_TIMEx_PWMN_Start+0x82>
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	2202      	movs	r2, #2
 80081fc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8008200:	e013      	b.n	800822a <HAL_TIMEx_PWMN_Start+0xaa>
 8008202:	683b      	ldr	r3, [r7, #0]
 8008204:	2b04      	cmp	r3, #4
 8008206:	d104      	bne.n	8008212 <HAL_TIMEx_PWMN_Start+0x92>
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	2202      	movs	r2, #2
 800820c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8008210:	e00b      	b.n	800822a <HAL_TIMEx_PWMN_Start+0xaa>
 8008212:	683b      	ldr	r3, [r7, #0]
 8008214:	2b08      	cmp	r3, #8
 8008216:	d104      	bne.n	8008222 <HAL_TIMEx_PWMN_Start+0xa2>
 8008218:	687b      	ldr	r3, [r7, #4]
 800821a:	2202      	movs	r2, #2
 800821c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8008220:	e003      	b.n	800822a <HAL_TIMEx_PWMN_Start+0xaa>
 8008222:	687b      	ldr	r3, [r7, #4]
 8008224:	2202      	movs	r2, #2
 8008226:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Enable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 800822a:	687b      	ldr	r3, [r7, #4]
 800822c:	681b      	ldr	r3, [r3, #0]
 800822e:	2204      	movs	r2, #4
 8008230:	6839      	ldr	r1, [r7, #0]
 8008232:	4618      	mov	r0, r3
 8008234:	f000 f93e 	bl	80084b4 <TIM_CCxNChannelCmd>

  /* Enable the Main Output */
  __HAL_TIM_MOE_ENABLE(htim);
 8008238:	687b      	ldr	r3, [r7, #4]
 800823a:	681b      	ldr	r3, [r3, #0]
 800823c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800823e:	687b      	ldr	r3, [r7, #4]
 8008240:	681b      	ldr	r3, [r3, #0]
 8008242:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8008246:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	681b      	ldr	r3, [r3, #0]
 800824c:	4a18      	ldr	r2, [pc, #96]	@ (80082b0 <HAL_TIMEx_PWMN_Start+0x130>)
 800824e:	4293      	cmp	r3, r2
 8008250:	d009      	beq.n	8008266 <HAL_TIMEx_PWMN_Start+0xe6>
 8008252:	687b      	ldr	r3, [r7, #4]
 8008254:	681b      	ldr	r3, [r3, #0]
 8008256:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800825a:	d004      	beq.n	8008266 <HAL_TIMEx_PWMN_Start+0xe6>
 800825c:	687b      	ldr	r3, [r7, #4]
 800825e:	681b      	ldr	r3, [r3, #0]
 8008260:	4a14      	ldr	r2, [pc, #80]	@ (80082b4 <HAL_TIMEx_PWMN_Start+0x134>)
 8008262:	4293      	cmp	r3, r2
 8008264:	d115      	bne.n	8008292 <HAL_TIMEx_PWMN_Start+0x112>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008266:	687b      	ldr	r3, [r7, #4]
 8008268:	681b      	ldr	r3, [r3, #0]
 800826a:	689a      	ldr	r2, [r3, #8]
 800826c:	4b12      	ldr	r3, [pc, #72]	@ (80082b8 <HAL_TIMEx_PWMN_Start+0x138>)
 800826e:	4013      	ands	r3, r2
 8008270:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008272:	68fb      	ldr	r3, [r7, #12]
 8008274:	2b06      	cmp	r3, #6
 8008276:	d015      	beq.n	80082a4 <HAL_TIMEx_PWMN_Start+0x124>
 8008278:	68fb      	ldr	r3, [r7, #12]
 800827a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800827e:	d011      	beq.n	80082a4 <HAL_TIMEx_PWMN_Start+0x124>
    {
      __HAL_TIM_ENABLE(htim);
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	681b      	ldr	r3, [r3, #0]
 8008284:	681a      	ldr	r2, [r3, #0]
 8008286:	687b      	ldr	r3, [r7, #4]
 8008288:	681b      	ldr	r3, [r3, #0]
 800828a:	f042 0201 	orr.w	r2, r2, #1
 800828e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008290:	e008      	b.n	80082a4 <HAL_TIMEx_PWMN_Start+0x124>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008292:	687b      	ldr	r3, [r7, #4]
 8008294:	681b      	ldr	r3, [r3, #0]
 8008296:	681a      	ldr	r2, [r3, #0]
 8008298:	687b      	ldr	r3, [r7, #4]
 800829a:	681b      	ldr	r3, [r3, #0]
 800829c:	f042 0201 	orr.w	r2, r2, #1
 80082a0:	601a      	str	r2, [r3, #0]
 80082a2:	e000      	b.n	80082a6 <HAL_TIMEx_PWMN_Start+0x126>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80082a4:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80082a6:	2300      	movs	r3, #0
}
 80082a8:	4618      	mov	r0, r3
 80082aa:	3710      	adds	r7, #16
 80082ac:	46bd      	mov	sp, r7
 80082ae:	bd80      	pop	{r7, pc}
 80082b0:	40012c00 	.word	0x40012c00
 80082b4:	40014000 	.word	0x40014000
 80082b8:	00010007 	.word	0x00010007

080082bc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80082bc:	b480      	push	{r7}
 80082be:	b085      	sub	sp, #20
 80082c0:	af00      	add	r7, sp, #0
 80082c2:	6078      	str	r0, [r7, #4]
 80082c4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80082c6:	687b      	ldr	r3, [r7, #4]
 80082c8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80082cc:	2b01      	cmp	r3, #1
 80082ce:	d101      	bne.n	80082d4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80082d0:	2302      	movs	r3, #2
 80082d2:	e04f      	b.n	8008374 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	2201      	movs	r2, #1
 80082d8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	2202      	movs	r2, #2
 80082e0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80082e4:	687b      	ldr	r3, [r7, #4]
 80082e6:	681b      	ldr	r3, [r3, #0]
 80082e8:	685b      	ldr	r3, [r3, #4]
 80082ea:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80082ec:	687b      	ldr	r3, [r7, #4]
 80082ee:	681b      	ldr	r3, [r3, #0]
 80082f0:	689b      	ldr	r3, [r3, #8]
 80082f2:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	681b      	ldr	r3, [r3, #0]
 80082f8:	4a21      	ldr	r2, [pc, #132]	@ (8008380 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 80082fa:	4293      	cmp	r3, r2
 80082fc:	d108      	bne.n	8008310 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80082fe:	68fb      	ldr	r3, [r7, #12]
 8008300:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8008304:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8008306:	683b      	ldr	r3, [r7, #0]
 8008308:	685b      	ldr	r3, [r3, #4]
 800830a:	68fa      	ldr	r2, [r7, #12]
 800830c:	4313      	orrs	r3, r2
 800830e:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008310:	68fb      	ldr	r3, [r7, #12]
 8008312:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008316:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008318:	683b      	ldr	r3, [r7, #0]
 800831a:	681b      	ldr	r3, [r3, #0]
 800831c:	68fa      	ldr	r2, [r7, #12]
 800831e:	4313      	orrs	r3, r2
 8008320:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8008322:	687b      	ldr	r3, [r7, #4]
 8008324:	681b      	ldr	r3, [r3, #0]
 8008326:	68fa      	ldr	r2, [r7, #12]
 8008328:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800832a:	687b      	ldr	r3, [r7, #4]
 800832c:	681b      	ldr	r3, [r3, #0]
 800832e:	4a14      	ldr	r2, [pc, #80]	@ (8008380 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8008330:	4293      	cmp	r3, r2
 8008332:	d009      	beq.n	8008348 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8008334:	687b      	ldr	r3, [r7, #4]
 8008336:	681b      	ldr	r3, [r3, #0]
 8008338:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800833c:	d004      	beq.n	8008348 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 800833e:	687b      	ldr	r3, [r7, #4]
 8008340:	681b      	ldr	r3, [r3, #0]
 8008342:	4a10      	ldr	r2, [pc, #64]	@ (8008384 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8008344:	4293      	cmp	r3, r2
 8008346:	d10c      	bne.n	8008362 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8008348:	68bb      	ldr	r3, [r7, #8]
 800834a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800834e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008350:	683b      	ldr	r3, [r7, #0]
 8008352:	689b      	ldr	r3, [r3, #8]
 8008354:	68ba      	ldr	r2, [r7, #8]
 8008356:	4313      	orrs	r3, r2
 8008358:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800835a:	687b      	ldr	r3, [r7, #4]
 800835c:	681b      	ldr	r3, [r3, #0]
 800835e:	68ba      	ldr	r2, [r7, #8]
 8008360:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008362:	687b      	ldr	r3, [r7, #4]
 8008364:	2201      	movs	r2, #1
 8008366:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800836a:	687b      	ldr	r3, [r7, #4]
 800836c:	2200      	movs	r2, #0
 800836e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8008372:	2300      	movs	r3, #0
}
 8008374:	4618      	mov	r0, r3
 8008376:	3714      	adds	r7, #20
 8008378:	46bd      	mov	sp, r7
 800837a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800837e:	4770      	bx	lr
 8008380:	40012c00 	.word	0x40012c00
 8008384:	40014000 	.word	0x40014000

08008388 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8008388:	b480      	push	{r7}
 800838a:	b085      	sub	sp, #20
 800838c:	af00      	add	r7, sp, #0
 800838e:	6078      	str	r0, [r7, #4]
 8008390:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8008392:	2300      	movs	r3, #0
 8008394:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8008396:	687b      	ldr	r3, [r7, #4]
 8008398:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800839c:	2b01      	cmp	r3, #1
 800839e:	d101      	bne.n	80083a4 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80083a0:	2302      	movs	r3, #2
 80083a2:	e060      	b.n	8008466 <HAL_TIMEx_ConfigBreakDeadTime+0xde>
 80083a4:	687b      	ldr	r3, [r7, #4]
 80083a6:	2201      	movs	r2, #1
 80083a8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80083ac:	68fb      	ldr	r3, [r7, #12]
 80083ae:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 80083b2:	683b      	ldr	r3, [r7, #0]
 80083b4:	68db      	ldr	r3, [r3, #12]
 80083b6:	4313      	orrs	r3, r2
 80083b8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80083ba:	68fb      	ldr	r3, [r7, #12]
 80083bc:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80083c0:	683b      	ldr	r3, [r7, #0]
 80083c2:	689b      	ldr	r3, [r3, #8]
 80083c4:	4313      	orrs	r3, r2
 80083c6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80083c8:	68fb      	ldr	r3, [r7, #12]
 80083ca:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 80083ce:	683b      	ldr	r3, [r7, #0]
 80083d0:	685b      	ldr	r3, [r3, #4]
 80083d2:	4313      	orrs	r3, r2
 80083d4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80083d6:	68fb      	ldr	r3, [r7, #12]
 80083d8:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 80083dc:	683b      	ldr	r3, [r7, #0]
 80083de:	681b      	ldr	r3, [r3, #0]
 80083e0:	4313      	orrs	r3, r2
 80083e2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80083e4:	68fb      	ldr	r3, [r7, #12]
 80083e6:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80083ea:	683b      	ldr	r3, [r7, #0]
 80083ec:	691b      	ldr	r3, [r3, #16]
 80083ee:	4313      	orrs	r3, r2
 80083f0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80083f2:	68fb      	ldr	r3, [r7, #12]
 80083f4:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 80083f8:	683b      	ldr	r3, [r7, #0]
 80083fa:	695b      	ldr	r3, [r3, #20]
 80083fc:	4313      	orrs	r3, r2
 80083fe:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8008400:	68fb      	ldr	r3, [r7, #12]
 8008402:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8008406:	683b      	ldr	r3, [r7, #0]
 8008408:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800840a:	4313      	orrs	r3, r2
 800840c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800840e:	68fb      	ldr	r3, [r7, #12]
 8008410:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 8008414:	683b      	ldr	r3, [r7, #0]
 8008416:	699b      	ldr	r3, [r3, #24]
 8008418:	041b      	lsls	r3, r3, #16
 800841a:	4313      	orrs	r3, r2
 800841c:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800841e:	687b      	ldr	r3, [r7, #4]
 8008420:	681b      	ldr	r3, [r3, #0]
 8008422:	4a14      	ldr	r2, [pc, #80]	@ (8008474 <HAL_TIMEx_ConfigBreakDeadTime+0xec>)
 8008424:	4293      	cmp	r3, r2
 8008426:	d115      	bne.n	8008454 <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8008428:	68fb      	ldr	r3, [r7, #12]
 800842a:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 800842e:	683b      	ldr	r3, [r7, #0]
 8008430:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008432:	051b      	lsls	r3, r3, #20
 8008434:	4313      	orrs	r3, r2
 8008436:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8008438:	68fb      	ldr	r3, [r7, #12]
 800843a:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 800843e:	683b      	ldr	r3, [r7, #0]
 8008440:	69db      	ldr	r3, [r3, #28]
 8008442:	4313      	orrs	r3, r2
 8008444:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8008446:	68fb      	ldr	r3, [r7, #12]
 8008448:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 800844c:	683b      	ldr	r3, [r7, #0]
 800844e:	6a1b      	ldr	r3, [r3, #32]
 8008450:	4313      	orrs	r3, r2
 8008452:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8008454:	687b      	ldr	r3, [r7, #4]
 8008456:	681b      	ldr	r3, [r3, #0]
 8008458:	68fa      	ldr	r2, [r7, #12]
 800845a:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 800845c:	687b      	ldr	r3, [r7, #4]
 800845e:	2200      	movs	r2, #0
 8008460:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8008464:	2300      	movs	r3, #0
}
 8008466:	4618      	mov	r0, r3
 8008468:	3714      	adds	r7, #20
 800846a:	46bd      	mov	sp, r7
 800846c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008470:	4770      	bx	lr
 8008472:	bf00      	nop
 8008474:	40012c00 	.word	0x40012c00

08008478 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8008478:	b480      	push	{r7}
 800847a:	b083      	sub	sp, #12
 800847c:	af00      	add	r7, sp, #0
 800847e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8008480:	bf00      	nop
 8008482:	370c      	adds	r7, #12
 8008484:	46bd      	mov	sp, r7
 8008486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800848a:	4770      	bx	lr

0800848c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800848c:	b480      	push	{r7}
 800848e:	b083      	sub	sp, #12
 8008490:	af00      	add	r7, sp, #0
 8008492:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008494:	bf00      	nop
 8008496:	370c      	adds	r7, #12
 8008498:	46bd      	mov	sp, r7
 800849a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800849e:	4770      	bx	lr

080084a0 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80084a0:	b480      	push	{r7}
 80084a2:	b083      	sub	sp, #12
 80084a4:	af00      	add	r7, sp, #0
 80084a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80084a8:	bf00      	nop
 80084aa:	370c      	adds	r7, #12
 80084ac:	46bd      	mov	sp, r7
 80084ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084b2:	4770      	bx	lr

080084b4 <TIM_CCxNChannelCmd>:
  * @param  ChannelNState specifies the TIM Channel CCxNE bit new state.
  *          This parameter can be: TIM_CCxN_ENABLE or TIM_CCxN_Disable.
  * @retval None
  */
static void TIM_CCxNChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelNState)
{
 80084b4:	b480      	push	{r7}
 80084b6:	b087      	sub	sp, #28
 80084b8:	af00      	add	r7, sp, #0
 80084ba:	60f8      	str	r0, [r7, #12]
 80084bc:	60b9      	str	r1, [r7, #8]
 80084be:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  tmp = TIM_CCER_CC1NE << (Channel & 0xFU); /* 0xFU = 15 bits max shift */
 80084c0:	68bb      	ldr	r3, [r7, #8]
 80084c2:	f003 030f 	and.w	r3, r3, #15
 80084c6:	2204      	movs	r2, #4
 80084c8:	fa02 f303 	lsl.w	r3, r2, r3
 80084cc:	617b      	str	r3, [r7, #20]

  /* Reset the CCxNE Bit */
  TIMx->CCER &=  ~tmp;
 80084ce:	68fb      	ldr	r3, [r7, #12]
 80084d0:	6a1a      	ldr	r2, [r3, #32]
 80084d2:	697b      	ldr	r3, [r7, #20]
 80084d4:	43db      	mvns	r3, r3
 80084d6:	401a      	ands	r2, r3
 80084d8:	68fb      	ldr	r3, [r7, #12]
 80084da:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxNE Bit */
  TIMx->CCER |= (uint32_t)(ChannelNState << (Channel & 0xFU)); /* 0xFU = 15 bits max shift */
 80084dc:	68fb      	ldr	r3, [r7, #12]
 80084de:	6a1a      	ldr	r2, [r3, #32]
 80084e0:	68bb      	ldr	r3, [r7, #8]
 80084e2:	f003 030f 	and.w	r3, r3, #15
 80084e6:	6879      	ldr	r1, [r7, #4]
 80084e8:	fa01 f303 	lsl.w	r3, r1, r3
 80084ec:	431a      	orrs	r2, r3
 80084ee:	68fb      	ldr	r3, [r7, #12]
 80084f0:	621a      	str	r2, [r3, #32]
}
 80084f2:	bf00      	nop
 80084f4:	371c      	adds	r7, #28
 80084f6:	46bd      	mov	sp, r7
 80084f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084fc:	4770      	bx	lr

080084fe <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80084fe:	b580      	push	{r7, lr}
 8008500:	b082      	sub	sp, #8
 8008502:	af00      	add	r7, sp, #0
 8008504:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008506:	687b      	ldr	r3, [r7, #4]
 8008508:	2b00      	cmp	r3, #0
 800850a:	d101      	bne.n	8008510 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800850c:	2301      	movs	r3, #1
 800850e:	e040      	b.n	8008592 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8008510:	687b      	ldr	r3, [r7, #4]
 8008512:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8008514:	2b00      	cmp	r3, #0
 8008516:	d106      	bne.n	8008526 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008518:	687b      	ldr	r3, [r7, #4]
 800851a:	2200      	movs	r2, #0
 800851c:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008520:	6878      	ldr	r0, [r7, #4]
 8008522:	f7fa fc59 	bl	8002dd8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008526:	687b      	ldr	r3, [r7, #4]
 8008528:	2224      	movs	r2, #36	@ 0x24
 800852a:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 800852c:	687b      	ldr	r3, [r7, #4]
 800852e:	681b      	ldr	r3, [r3, #0]
 8008530:	681a      	ldr	r2, [r3, #0]
 8008532:	687b      	ldr	r3, [r7, #4]
 8008534:	681b      	ldr	r3, [r3, #0]
 8008536:	f022 0201 	bic.w	r2, r2, #1
 800853a:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800853c:	687b      	ldr	r3, [r7, #4]
 800853e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008540:	2b00      	cmp	r3, #0
 8008542:	d002      	beq.n	800854a <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8008544:	6878      	ldr	r0, [r7, #4]
 8008546:	f000 fed7 	bl	80092f8 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800854a:	6878      	ldr	r0, [r7, #4]
 800854c:	f000 fca8 	bl	8008ea0 <UART_SetConfig>
 8008550:	4603      	mov	r3, r0
 8008552:	2b01      	cmp	r3, #1
 8008554:	d101      	bne.n	800855a <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8008556:	2301      	movs	r3, #1
 8008558:	e01b      	b.n	8008592 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800855a:	687b      	ldr	r3, [r7, #4]
 800855c:	681b      	ldr	r3, [r3, #0]
 800855e:	685a      	ldr	r2, [r3, #4]
 8008560:	687b      	ldr	r3, [r7, #4]
 8008562:	681b      	ldr	r3, [r3, #0]
 8008564:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8008568:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800856a:	687b      	ldr	r3, [r7, #4]
 800856c:	681b      	ldr	r3, [r3, #0]
 800856e:	689a      	ldr	r2, [r3, #8]
 8008570:	687b      	ldr	r3, [r7, #4]
 8008572:	681b      	ldr	r3, [r3, #0]
 8008574:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8008578:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800857a:	687b      	ldr	r3, [r7, #4]
 800857c:	681b      	ldr	r3, [r3, #0]
 800857e:	681a      	ldr	r2, [r3, #0]
 8008580:	687b      	ldr	r3, [r7, #4]
 8008582:	681b      	ldr	r3, [r3, #0]
 8008584:	f042 0201 	orr.w	r2, r2, #1
 8008588:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800858a:	6878      	ldr	r0, [r7, #4]
 800858c:	f000 ff56 	bl	800943c <UART_CheckIdleState>
 8008590:	4603      	mov	r3, r0
}
 8008592:	4618      	mov	r0, r3
 8008594:	3708      	adds	r7, #8
 8008596:	46bd      	mov	sp, r7
 8008598:	bd80      	pop	{r7, pc}
	...

0800859c <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800859c:	b580      	push	{r7, lr}
 800859e:	b08a      	sub	sp, #40	@ 0x28
 80085a0:	af00      	add	r7, sp, #0
 80085a2:	60f8      	str	r0, [r7, #12]
 80085a4:	60b9      	str	r1, [r7, #8]
 80085a6:	4613      	mov	r3, r2
 80085a8:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80085aa:	68fb      	ldr	r3, [r7, #12]
 80085ac:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80085ae:	2b20      	cmp	r3, #32
 80085b0:	d165      	bne.n	800867e <HAL_UART_Transmit_DMA+0xe2>
  {
    if ((pData == NULL) || (Size == 0U))
 80085b2:	68bb      	ldr	r3, [r7, #8]
 80085b4:	2b00      	cmp	r3, #0
 80085b6:	d002      	beq.n	80085be <HAL_UART_Transmit_DMA+0x22>
 80085b8:	88fb      	ldrh	r3, [r7, #6]
 80085ba:	2b00      	cmp	r3, #0
 80085bc:	d101      	bne.n	80085c2 <HAL_UART_Transmit_DMA+0x26>
    {
      return HAL_ERROR;
 80085be:	2301      	movs	r3, #1
 80085c0:	e05e      	b.n	8008680 <HAL_UART_Transmit_DMA+0xe4>
    }

    huart->pTxBuffPtr  = pData;
 80085c2:	68fb      	ldr	r3, [r7, #12]
 80085c4:	68ba      	ldr	r2, [r7, #8]
 80085c6:	64da      	str	r2, [r3, #76]	@ 0x4c
    huart->TxXferSize  = Size;
 80085c8:	68fb      	ldr	r3, [r7, #12]
 80085ca:	88fa      	ldrh	r2, [r7, #6]
 80085cc:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 80085d0:	68fb      	ldr	r3, [r7, #12]
 80085d2:	88fa      	ldrh	r2, [r7, #6]
 80085d4:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80085d8:	68fb      	ldr	r3, [r7, #12]
 80085da:	2200      	movs	r2, #0
 80085dc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80085e0:	68fb      	ldr	r3, [r7, #12]
 80085e2:	2221      	movs	r2, #33	@ 0x21
 80085e4:	67da      	str	r2, [r3, #124]	@ 0x7c

    if (huart->hdmatx != NULL)
 80085e6:	68fb      	ldr	r3, [r7, #12]
 80085e8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80085ea:	2b00      	cmp	r3, #0
 80085ec:	d027      	beq.n	800863e <HAL_UART_Transmit_DMA+0xa2>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 80085ee:	68fb      	ldr	r3, [r7, #12]
 80085f0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80085f2:	4a25      	ldr	r2, [pc, #148]	@ (8008688 <HAL_UART_Transmit_DMA+0xec>)
 80085f4:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 80085f6:	68fb      	ldr	r3, [r7, #12]
 80085f8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80085fa:	4a24      	ldr	r2, [pc, #144]	@ (800868c <HAL_UART_Transmit_DMA+0xf0>)
 80085fc:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 80085fe:	68fb      	ldr	r3, [r7, #12]
 8008600:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008602:	4a23      	ldr	r2, [pc, #140]	@ (8008690 <HAL_UART_Transmit_DMA+0xf4>)
 8008604:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 8008606:	68fb      	ldr	r3, [r7, #12]
 8008608:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800860a:	2200      	movs	r2, #0
 800860c:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 800860e:	68fb      	ldr	r3, [r7, #12]
 8008610:	6f18      	ldr	r0, [r3, #112]	@ 0x70
 8008612:	68fb      	ldr	r3, [r7, #12]
 8008614:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008616:	4619      	mov	r1, r3
 8008618:	68fb      	ldr	r3, [r7, #12]
 800861a:	681b      	ldr	r3, [r3, #0]
 800861c:	3328      	adds	r3, #40	@ 0x28
 800861e:	461a      	mov	r2, r3
 8008620:	88fb      	ldrh	r3, [r7, #6]
 8008622:	f7fa fec7 	bl	80033b4 <HAL_DMA_Start_IT>
 8008626:	4603      	mov	r3, r0
 8008628:	2b00      	cmp	r3, #0
 800862a:	d008      	beq.n	800863e <HAL_UART_Transmit_DMA+0xa2>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 800862c:	68fb      	ldr	r3, [r7, #12]
 800862e:	2210      	movs	r2, #16
 8008630:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 8008634:	68fb      	ldr	r3, [r7, #12]
 8008636:	2220      	movs	r2, #32
 8008638:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_ERROR;
 800863a:	2301      	movs	r3, #1
 800863c:	e020      	b.n	8008680 <HAL_UART_Transmit_DMA+0xe4>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 800863e:	68fb      	ldr	r3, [r7, #12]
 8008640:	681b      	ldr	r3, [r3, #0]
 8008642:	2240      	movs	r2, #64	@ 0x40
 8008644:	621a      	str	r2, [r3, #32]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8008646:	68fb      	ldr	r3, [r7, #12]
 8008648:	681b      	ldr	r3, [r3, #0]
 800864a:	3308      	adds	r3, #8
 800864c:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800864e:	697b      	ldr	r3, [r7, #20]
 8008650:	e853 3f00 	ldrex	r3, [r3]
 8008654:	613b      	str	r3, [r7, #16]
   return(result);
 8008656:	693b      	ldr	r3, [r7, #16]
 8008658:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800865c:	627b      	str	r3, [r7, #36]	@ 0x24
 800865e:	68fb      	ldr	r3, [r7, #12]
 8008660:	681b      	ldr	r3, [r3, #0]
 8008662:	3308      	adds	r3, #8
 8008664:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008666:	623a      	str	r2, [r7, #32]
 8008668:	61fb      	str	r3, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800866a:	69f9      	ldr	r1, [r7, #28]
 800866c:	6a3a      	ldr	r2, [r7, #32]
 800866e:	e841 2300 	strex	r3, r2, [r1]
 8008672:	61bb      	str	r3, [r7, #24]
   return(result);
 8008674:	69bb      	ldr	r3, [r7, #24]
 8008676:	2b00      	cmp	r3, #0
 8008678:	d1e5      	bne.n	8008646 <HAL_UART_Transmit_DMA+0xaa>

    return HAL_OK;
 800867a:	2300      	movs	r3, #0
 800867c:	e000      	b.n	8008680 <HAL_UART_Transmit_DMA+0xe4>
  }
  else
  {
    return HAL_BUSY;
 800867e:	2302      	movs	r3, #2
  }
}
 8008680:	4618      	mov	r0, r3
 8008682:	3728      	adds	r7, #40	@ 0x28
 8008684:	46bd      	mov	sp, r7
 8008686:	bd80      	pop	{r7, pc}
 8008688:	080098b1 	.word	0x080098b1
 800868c:	0800994b 	.word	0x0800994b
 8008690:	08009ad1 	.word	0x08009ad1

08008694 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008694:	b580      	push	{r7, lr}
 8008696:	b08a      	sub	sp, #40	@ 0x28
 8008698:	af00      	add	r7, sp, #0
 800869a:	60f8      	str	r0, [r7, #12]
 800869c:	60b9      	str	r1, [r7, #8]
 800869e:	4613      	mov	r3, r2
 80086a0:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80086a2:	68fb      	ldr	r3, [r7, #12]
 80086a4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80086a8:	2b20      	cmp	r3, #32
 80086aa:	d137      	bne.n	800871c <HAL_UART_Receive_DMA+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 80086ac:	68bb      	ldr	r3, [r7, #8]
 80086ae:	2b00      	cmp	r3, #0
 80086b0:	d002      	beq.n	80086b8 <HAL_UART_Receive_DMA+0x24>
 80086b2:	88fb      	ldrh	r3, [r7, #6]
 80086b4:	2b00      	cmp	r3, #0
 80086b6:	d101      	bne.n	80086bc <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 80086b8:	2301      	movs	r3, #1
 80086ba:	e030      	b.n	800871e <HAL_UART_Receive_DMA+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80086bc:	68fb      	ldr	r3, [r7, #12]
 80086be:	2200      	movs	r2, #0
 80086c0:	661a      	str	r2, [r3, #96]	@ 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80086c2:	68fb      	ldr	r3, [r7, #12]
 80086c4:	681b      	ldr	r3, [r3, #0]
 80086c6:	4a18      	ldr	r2, [pc, #96]	@ (8008728 <HAL_UART_Receive_DMA+0x94>)
 80086c8:	4293      	cmp	r3, r2
 80086ca:	d01f      	beq.n	800870c <HAL_UART_Receive_DMA+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80086cc:	68fb      	ldr	r3, [r7, #12]
 80086ce:	681b      	ldr	r3, [r3, #0]
 80086d0:	685b      	ldr	r3, [r3, #4]
 80086d2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80086d6:	2b00      	cmp	r3, #0
 80086d8:	d018      	beq.n	800870c <HAL_UART_Receive_DMA+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80086da:	68fb      	ldr	r3, [r7, #12]
 80086dc:	681b      	ldr	r3, [r3, #0]
 80086de:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80086e0:	697b      	ldr	r3, [r7, #20]
 80086e2:	e853 3f00 	ldrex	r3, [r3]
 80086e6:	613b      	str	r3, [r7, #16]
   return(result);
 80086e8:	693b      	ldr	r3, [r7, #16]
 80086ea:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80086ee:	627b      	str	r3, [r7, #36]	@ 0x24
 80086f0:	68fb      	ldr	r3, [r7, #12]
 80086f2:	681b      	ldr	r3, [r3, #0]
 80086f4:	461a      	mov	r2, r3
 80086f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80086f8:	623b      	str	r3, [r7, #32]
 80086fa:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80086fc:	69f9      	ldr	r1, [r7, #28]
 80086fe:	6a3a      	ldr	r2, [r7, #32]
 8008700:	e841 2300 	strex	r3, r2, [r1]
 8008704:	61bb      	str	r3, [r7, #24]
   return(result);
 8008706:	69bb      	ldr	r3, [r7, #24]
 8008708:	2b00      	cmp	r3, #0
 800870a:	d1e6      	bne.n	80086da <HAL_UART_Receive_DMA+0x46>
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 800870c:	88fb      	ldrh	r3, [r7, #6]
 800870e:	461a      	mov	r2, r3
 8008710:	68b9      	ldr	r1, [r7, #8]
 8008712:	68f8      	ldr	r0, [r7, #12]
 8008714:	f000 ffa2 	bl	800965c <UART_Start_Receive_DMA>
 8008718:	4603      	mov	r3, r0
 800871a:	e000      	b.n	800871e <HAL_UART_Receive_DMA+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800871c:	2302      	movs	r3, #2
  }
}
 800871e:	4618      	mov	r0, r3
 8008720:	3728      	adds	r7, #40	@ 0x28
 8008722:	46bd      	mov	sp, r7
 8008724:	bd80      	pop	{r7, pc}
 8008726:	bf00      	nop
 8008728:	40008000 	.word	0x40008000

0800872c <HAL_UART_DMAStop>:
  * @brief Stop the DMA Transfer.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DMAStop(UART_HandleTypeDef *huart)
{
 800872c:	b580      	push	{r7, lr}
 800872e:	b090      	sub	sp, #64	@ 0x40
 8008730:	af00      	add	r7, sp, #0
 8008732:	6078      	str	r0, [r7, #4]
     HAL_UART_TxHalfCpltCallback / HAL_UART_RxHalfCpltCallback:
     indeed, when HAL_DMA_Abort() API is called, the DMA TX/RX Transfer or Half Transfer complete
     interrupt is generated if the DMA transfer interruption occurs at the middle or at the end of
     the stream and the corresponding call back is executed. */

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8008734:	687b      	ldr	r3, [r7, #4]
 8008736:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8008738:	63fb      	str	r3, [r7, #60]	@ 0x3c
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800873a:	687b      	ldr	r3, [r7, #4]
 800873c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008740:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8008742:	687b      	ldr	r3, [r7, #4]
 8008744:	681b      	ldr	r3, [r3, #0]
 8008746:	689b      	ldr	r3, [r3, #8]
 8008748:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800874c:	2b80      	cmp	r3, #128	@ 0x80
 800874e:	d139      	bne.n	80087c4 <HAL_UART_DMAStop+0x98>
 8008750:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008752:	2b21      	cmp	r3, #33	@ 0x21
 8008754:	d136      	bne.n	80087c4 <HAL_UART_DMAStop+0x98>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8008756:	687b      	ldr	r3, [r7, #4]
 8008758:	681b      	ldr	r3, [r3, #0]
 800875a:	3308      	adds	r3, #8
 800875c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800875e:	6a3b      	ldr	r3, [r7, #32]
 8008760:	e853 3f00 	ldrex	r3, [r3]
 8008764:	61fb      	str	r3, [r7, #28]
   return(result);
 8008766:	69fb      	ldr	r3, [r7, #28]
 8008768:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800876c:	637b      	str	r3, [r7, #52]	@ 0x34
 800876e:	687b      	ldr	r3, [r7, #4]
 8008770:	681b      	ldr	r3, [r3, #0]
 8008772:	3308      	adds	r3, #8
 8008774:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8008776:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8008778:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800877a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800877c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800877e:	e841 2300 	strex	r3, r2, [r1]
 8008782:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8008784:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008786:	2b00      	cmp	r3, #0
 8008788:	d1e5      	bne.n	8008756 <HAL_UART_DMAStop+0x2a>

    /* Abort the UART DMA Tx channel */
    if (huart->hdmatx != NULL)
 800878a:	687b      	ldr	r3, [r7, #4]
 800878c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800878e:	2b00      	cmp	r3, #0
 8008790:	d015      	beq.n	80087be <HAL_UART_DMAStop+0x92>
    {
      if (HAL_DMA_Abort(huart->hdmatx) != HAL_OK)
 8008792:	687b      	ldr	r3, [r7, #4]
 8008794:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008796:	4618      	mov	r0, r3
 8008798:	f7fa fe6c 	bl	8003474 <HAL_DMA_Abort>
 800879c:	4603      	mov	r3, r0
 800879e:	2b00      	cmp	r3, #0
 80087a0:	d00d      	beq.n	80087be <HAL_UART_DMAStop+0x92>
      {
        if (HAL_DMA_GetError(huart->hdmatx) == HAL_DMA_ERROR_TIMEOUT)
 80087a2:	687b      	ldr	r3, [r7, #4]
 80087a4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80087a6:	4618      	mov	r0, r3
 80087a8:	f7fa ffa0 	bl	80036ec <HAL_DMA_GetError>
 80087ac:	4603      	mov	r3, r0
 80087ae:	2b20      	cmp	r3, #32
 80087b0:	d105      	bne.n	80087be <HAL_UART_DMAStop+0x92>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 80087b2:	687b      	ldr	r3, [r7, #4]
 80087b4:	2210      	movs	r2, #16
 80087b6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 80087ba:	2303      	movs	r3, #3
 80087bc:	e044      	b.n	8008848 <HAL_UART_DMAStop+0x11c>
        }
      }
    }

    UART_EndTxTransfer(huart);
 80087be:	6878      	ldr	r0, [r7, #4]
 80087c0:	f000 ffec 	bl	800979c <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 80087c4:	687b      	ldr	r3, [r7, #4]
 80087c6:	681b      	ldr	r3, [r3, #0]
 80087c8:	689b      	ldr	r3, [r3, #8]
 80087ca:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80087ce:	2b40      	cmp	r3, #64	@ 0x40
 80087d0:	d139      	bne.n	8008846 <HAL_UART_DMAStop+0x11a>
 80087d2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80087d4:	2b22      	cmp	r3, #34	@ 0x22
 80087d6:	d136      	bne.n	8008846 <HAL_UART_DMAStop+0x11a>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80087d8:	687b      	ldr	r3, [r7, #4]
 80087da:	681b      	ldr	r3, [r3, #0]
 80087dc:	3308      	adds	r3, #8
 80087de:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80087e0:	68fb      	ldr	r3, [r7, #12]
 80087e2:	e853 3f00 	ldrex	r3, [r3]
 80087e6:	60bb      	str	r3, [r7, #8]
   return(result);
 80087e8:	68bb      	ldr	r3, [r7, #8]
 80087ea:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80087ee:	633b      	str	r3, [r7, #48]	@ 0x30
 80087f0:	687b      	ldr	r3, [r7, #4]
 80087f2:	681b      	ldr	r3, [r3, #0]
 80087f4:	3308      	adds	r3, #8
 80087f6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80087f8:	61ba      	str	r2, [r7, #24]
 80087fa:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80087fc:	6979      	ldr	r1, [r7, #20]
 80087fe:	69ba      	ldr	r2, [r7, #24]
 8008800:	e841 2300 	strex	r3, r2, [r1]
 8008804:	613b      	str	r3, [r7, #16]
   return(result);
 8008806:	693b      	ldr	r3, [r7, #16]
 8008808:	2b00      	cmp	r3, #0
 800880a:	d1e5      	bne.n	80087d8 <HAL_UART_DMAStop+0xac>

    /* Abort the UART DMA Rx channel */
    if (huart->hdmarx != NULL)
 800880c:	687b      	ldr	r3, [r7, #4]
 800880e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008810:	2b00      	cmp	r3, #0
 8008812:	d015      	beq.n	8008840 <HAL_UART_DMAStop+0x114>
    {
      if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 8008814:	687b      	ldr	r3, [r7, #4]
 8008816:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008818:	4618      	mov	r0, r3
 800881a:	f7fa fe2b 	bl	8003474 <HAL_DMA_Abort>
 800881e:	4603      	mov	r3, r0
 8008820:	2b00      	cmp	r3, #0
 8008822:	d00d      	beq.n	8008840 <HAL_UART_DMAStop+0x114>
      {
        if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 8008824:	687b      	ldr	r3, [r7, #4]
 8008826:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008828:	4618      	mov	r0, r3
 800882a:	f7fa ff5f 	bl	80036ec <HAL_DMA_GetError>
 800882e:	4603      	mov	r3, r0
 8008830:	2b20      	cmp	r3, #32
 8008832:	d105      	bne.n	8008840 <HAL_UART_DMAStop+0x114>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 8008834:	687b      	ldr	r3, [r7, #4]
 8008836:	2210      	movs	r2, #16
 8008838:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800883c:	2303      	movs	r3, #3
 800883e:	e003      	b.n	8008848 <HAL_UART_DMAStop+0x11c>
        }
      }
    }

    UART_EndRxTransfer(huart);
 8008840:	6878      	ldr	r0, [r7, #4]
 8008842:	f000 ffd1 	bl	80097e8 <UART_EndRxTransfer>
  }

  return HAL_OK;
 8008846:	2300      	movs	r3, #0
}
 8008848:	4618      	mov	r0, r3
 800884a:	3740      	adds	r7, #64	@ 0x40
 800884c:	46bd      	mov	sp, r7
 800884e:	bd80      	pop	{r7, pc}

08008850 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8008850:	b580      	push	{r7, lr}
 8008852:	b0ba      	sub	sp, #232	@ 0xe8
 8008854:	af00      	add	r7, sp, #0
 8008856:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8008858:	687b      	ldr	r3, [r7, #4]
 800885a:	681b      	ldr	r3, [r3, #0]
 800885c:	69db      	ldr	r3, [r3, #28]
 800885e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8008862:	687b      	ldr	r3, [r7, #4]
 8008864:	681b      	ldr	r3, [r3, #0]
 8008866:	681b      	ldr	r3, [r3, #0]
 8008868:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800886c:	687b      	ldr	r3, [r7, #4]
 800886e:	681b      	ldr	r3, [r3, #0]
 8008870:	689b      	ldr	r3, [r3, #8]
 8008872:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8008876:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 800887a:	f640 030f 	movw	r3, #2063	@ 0x80f
 800887e:	4013      	ands	r3, r2
 8008880:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8008884:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8008888:	2b00      	cmp	r3, #0
 800888a:	d115      	bne.n	80088b8 <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 800888c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008890:	f003 0320 	and.w	r3, r3, #32
 8008894:	2b00      	cmp	r3, #0
 8008896:	d00f      	beq.n	80088b8 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8008898:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800889c:	f003 0320 	and.w	r3, r3, #32
 80088a0:	2b00      	cmp	r3, #0
 80088a2:	d009      	beq.n	80088b8 <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 80088a4:	687b      	ldr	r3, [r7, #4]
 80088a6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80088a8:	2b00      	cmp	r3, #0
 80088aa:	f000 82ae 	beq.w	8008e0a <HAL_UART_IRQHandler+0x5ba>
      {
        huart->RxISR(huart);
 80088ae:	687b      	ldr	r3, [r7, #4]
 80088b0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80088b2:	6878      	ldr	r0, [r7, #4]
 80088b4:	4798      	blx	r3
      }
      return;
 80088b6:	e2a8      	b.n	8008e0a <HAL_UART_IRQHandler+0x5ba>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 80088b8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80088bc:	2b00      	cmp	r3, #0
 80088be:	f000 8117 	beq.w	8008af0 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 80088c2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80088c6:	f003 0301 	and.w	r3, r3, #1
 80088ca:	2b00      	cmp	r3, #0
 80088cc:	d106      	bne.n	80088dc <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 80088ce:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 80088d2:	4b85      	ldr	r3, [pc, #532]	@ (8008ae8 <HAL_UART_IRQHandler+0x298>)
 80088d4:	4013      	ands	r3, r2
 80088d6:	2b00      	cmp	r3, #0
 80088d8:	f000 810a 	beq.w	8008af0 <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80088dc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80088e0:	f003 0301 	and.w	r3, r3, #1
 80088e4:	2b00      	cmp	r3, #0
 80088e6:	d011      	beq.n	800890c <HAL_UART_IRQHandler+0xbc>
 80088e8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80088ec:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80088f0:	2b00      	cmp	r3, #0
 80088f2:	d00b      	beq.n	800890c <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80088f4:	687b      	ldr	r3, [r7, #4]
 80088f6:	681b      	ldr	r3, [r3, #0]
 80088f8:	2201      	movs	r2, #1
 80088fa:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80088fc:	687b      	ldr	r3, [r7, #4]
 80088fe:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008902:	f043 0201 	orr.w	r2, r3, #1
 8008906:	687b      	ldr	r3, [r7, #4]
 8008908:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800890c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008910:	f003 0302 	and.w	r3, r3, #2
 8008914:	2b00      	cmp	r3, #0
 8008916:	d011      	beq.n	800893c <HAL_UART_IRQHandler+0xec>
 8008918:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800891c:	f003 0301 	and.w	r3, r3, #1
 8008920:	2b00      	cmp	r3, #0
 8008922:	d00b      	beq.n	800893c <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8008924:	687b      	ldr	r3, [r7, #4]
 8008926:	681b      	ldr	r3, [r3, #0]
 8008928:	2202      	movs	r2, #2
 800892a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800892c:	687b      	ldr	r3, [r7, #4]
 800892e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008932:	f043 0204 	orr.w	r2, r3, #4
 8008936:	687b      	ldr	r3, [r7, #4]
 8008938:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800893c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008940:	f003 0304 	and.w	r3, r3, #4
 8008944:	2b00      	cmp	r3, #0
 8008946:	d011      	beq.n	800896c <HAL_UART_IRQHandler+0x11c>
 8008948:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800894c:	f003 0301 	and.w	r3, r3, #1
 8008950:	2b00      	cmp	r3, #0
 8008952:	d00b      	beq.n	800896c <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8008954:	687b      	ldr	r3, [r7, #4]
 8008956:	681b      	ldr	r3, [r3, #0]
 8008958:	2204      	movs	r2, #4
 800895a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800895c:	687b      	ldr	r3, [r7, #4]
 800895e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008962:	f043 0202 	orr.w	r2, r3, #2
 8008966:	687b      	ldr	r3, [r7, #4]
 8008968:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 800896c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008970:	f003 0308 	and.w	r3, r3, #8
 8008974:	2b00      	cmp	r3, #0
 8008976:	d017      	beq.n	80089a8 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8008978:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800897c:	f003 0320 	and.w	r3, r3, #32
 8008980:	2b00      	cmp	r3, #0
 8008982:	d105      	bne.n	8008990 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8008984:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008988:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800898c:	2b00      	cmp	r3, #0
 800898e:	d00b      	beq.n	80089a8 <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8008990:	687b      	ldr	r3, [r7, #4]
 8008992:	681b      	ldr	r3, [r3, #0]
 8008994:	2208      	movs	r2, #8
 8008996:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8008998:	687b      	ldr	r3, [r7, #4]
 800899a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800899e:	f043 0208 	orr.w	r2, r3, #8
 80089a2:	687b      	ldr	r3, [r7, #4]
 80089a4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80089a8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80089ac:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80089b0:	2b00      	cmp	r3, #0
 80089b2:	d012      	beq.n	80089da <HAL_UART_IRQHandler+0x18a>
 80089b4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80089b8:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80089bc:	2b00      	cmp	r3, #0
 80089be:	d00c      	beq.n	80089da <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80089c0:	687b      	ldr	r3, [r7, #4]
 80089c2:	681b      	ldr	r3, [r3, #0]
 80089c4:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80089c8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80089ca:	687b      	ldr	r3, [r7, #4]
 80089cc:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80089d0:	f043 0220 	orr.w	r2, r3, #32
 80089d4:	687b      	ldr	r3, [r7, #4]
 80089d6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80089da:	687b      	ldr	r3, [r7, #4]
 80089dc:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80089e0:	2b00      	cmp	r3, #0
 80089e2:	f000 8214 	beq.w	8008e0e <HAL_UART_IRQHandler+0x5be>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 80089e6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80089ea:	f003 0320 	and.w	r3, r3, #32
 80089ee:	2b00      	cmp	r3, #0
 80089f0:	d00d      	beq.n	8008a0e <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80089f2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80089f6:	f003 0320 	and.w	r3, r3, #32
 80089fa:	2b00      	cmp	r3, #0
 80089fc:	d007      	beq.n	8008a0e <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 80089fe:	687b      	ldr	r3, [r7, #4]
 8008a00:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8008a02:	2b00      	cmp	r3, #0
 8008a04:	d003      	beq.n	8008a0e <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8008a06:	687b      	ldr	r3, [r7, #4]
 8008a08:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8008a0a:	6878      	ldr	r0, [r7, #4]
 8008a0c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8008a0e:	687b      	ldr	r3, [r7, #4]
 8008a10:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008a14:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8008a18:	687b      	ldr	r3, [r7, #4]
 8008a1a:	681b      	ldr	r3, [r3, #0]
 8008a1c:	689b      	ldr	r3, [r3, #8]
 8008a1e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008a22:	2b40      	cmp	r3, #64	@ 0x40
 8008a24:	d005      	beq.n	8008a32 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8008a26:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8008a2a:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8008a2e:	2b00      	cmp	r3, #0
 8008a30:	d04f      	beq.n	8008ad2 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8008a32:	6878      	ldr	r0, [r7, #4]
 8008a34:	f000 fed8 	bl	80097e8 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008a38:	687b      	ldr	r3, [r7, #4]
 8008a3a:	681b      	ldr	r3, [r3, #0]
 8008a3c:	689b      	ldr	r3, [r3, #8]
 8008a3e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008a42:	2b40      	cmp	r3, #64	@ 0x40
 8008a44:	d141      	bne.n	8008aca <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008a46:	687b      	ldr	r3, [r7, #4]
 8008a48:	681b      	ldr	r3, [r3, #0]
 8008a4a:	3308      	adds	r3, #8
 8008a4c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a50:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8008a54:	e853 3f00 	ldrex	r3, [r3]
 8008a58:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8008a5c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8008a60:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008a64:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8008a68:	687b      	ldr	r3, [r7, #4]
 8008a6a:	681b      	ldr	r3, [r3, #0]
 8008a6c:	3308      	adds	r3, #8
 8008a6e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8008a72:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8008a76:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a7a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8008a7e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8008a82:	e841 2300 	strex	r3, r2, [r1]
 8008a86:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8008a8a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8008a8e:	2b00      	cmp	r3, #0
 8008a90:	d1d9      	bne.n	8008a46 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8008a92:	687b      	ldr	r3, [r7, #4]
 8008a94:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008a96:	2b00      	cmp	r3, #0
 8008a98:	d013      	beq.n	8008ac2 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8008a9a:	687b      	ldr	r3, [r7, #4]
 8008a9c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008a9e:	4a13      	ldr	r2, [pc, #76]	@ (8008aec <HAL_UART_IRQHandler+0x29c>)
 8008aa0:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8008aa2:	687b      	ldr	r3, [r7, #4]
 8008aa4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008aa6:	4618      	mov	r0, r3
 8008aa8:	f7fa fd22 	bl	80034f0 <HAL_DMA_Abort_IT>
 8008aac:	4603      	mov	r3, r0
 8008aae:	2b00      	cmp	r3, #0
 8008ab0:	d017      	beq.n	8008ae2 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8008ab2:	687b      	ldr	r3, [r7, #4]
 8008ab4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008ab6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008ab8:	687a      	ldr	r2, [r7, #4]
 8008aba:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8008abc:	4610      	mov	r0, r2
 8008abe:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008ac0:	e00f      	b.n	8008ae2 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8008ac2:	6878      	ldr	r0, [r7, #4]
 8008ac4:	f000 f9d6 	bl	8008e74 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008ac8:	e00b      	b.n	8008ae2 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8008aca:	6878      	ldr	r0, [r7, #4]
 8008acc:	f000 f9d2 	bl	8008e74 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008ad0:	e007      	b.n	8008ae2 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8008ad2:	6878      	ldr	r0, [r7, #4]
 8008ad4:	f000 f9ce 	bl	8008e74 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008ad8:	687b      	ldr	r3, [r7, #4]
 8008ada:	2200      	movs	r2, #0
 8008adc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      }
    }
    return;
 8008ae0:	e195      	b.n	8008e0e <HAL_UART_IRQHandler+0x5be>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008ae2:	bf00      	nop
    return;
 8008ae4:	e193      	b.n	8008e0e <HAL_UART_IRQHandler+0x5be>
 8008ae6:	bf00      	nop
 8008ae8:	04000120 	.word	0x04000120
 8008aec:	08009b4f 	.word	0x08009b4f

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008af0:	687b      	ldr	r3, [r7, #4]
 8008af2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008af4:	2b01      	cmp	r3, #1
 8008af6:	f040 814e 	bne.w	8008d96 <HAL_UART_IRQHandler+0x546>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8008afa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008afe:	f003 0310 	and.w	r3, r3, #16
 8008b02:	2b00      	cmp	r3, #0
 8008b04:	f000 8147 	beq.w	8008d96 <HAL_UART_IRQHandler+0x546>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8008b08:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008b0c:	f003 0310 	and.w	r3, r3, #16
 8008b10:	2b00      	cmp	r3, #0
 8008b12:	f000 8140 	beq.w	8008d96 <HAL_UART_IRQHandler+0x546>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8008b16:	687b      	ldr	r3, [r7, #4]
 8008b18:	681b      	ldr	r3, [r3, #0]
 8008b1a:	2210      	movs	r2, #16
 8008b1c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008b1e:	687b      	ldr	r3, [r7, #4]
 8008b20:	681b      	ldr	r3, [r3, #0]
 8008b22:	689b      	ldr	r3, [r3, #8]
 8008b24:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008b28:	2b40      	cmp	r3, #64	@ 0x40
 8008b2a:	f040 80b8 	bne.w	8008c9e <HAL_UART_IRQHandler+0x44e>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8008b2e:	687b      	ldr	r3, [r7, #4]
 8008b30:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008b32:	681b      	ldr	r3, [r3, #0]
 8008b34:	685b      	ldr	r3, [r3, #4]
 8008b36:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8008b3a:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8008b3e:	2b00      	cmp	r3, #0
 8008b40:	f000 8167 	beq.w	8008e12 <HAL_UART_IRQHandler+0x5c2>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8008b44:	687b      	ldr	r3, [r7, #4]
 8008b46:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8008b4a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8008b4e:	429a      	cmp	r2, r3
 8008b50:	f080 815f 	bcs.w	8008e12 <HAL_UART_IRQHandler+0x5c2>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8008b54:	687b      	ldr	r3, [r7, #4]
 8008b56:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8008b5a:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8008b5e:	687b      	ldr	r3, [r7, #4]
 8008b60:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008b62:	681b      	ldr	r3, [r3, #0]
 8008b64:	681b      	ldr	r3, [r3, #0]
 8008b66:	f003 0320 	and.w	r3, r3, #32
 8008b6a:	2b00      	cmp	r3, #0
 8008b6c:	f040 8086 	bne.w	8008c7c <HAL_UART_IRQHandler+0x42c>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008b70:	687b      	ldr	r3, [r7, #4]
 8008b72:	681b      	ldr	r3, [r3, #0]
 8008b74:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b78:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8008b7c:	e853 3f00 	ldrex	r3, [r3]
 8008b80:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8008b84:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8008b88:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008b8c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8008b90:	687b      	ldr	r3, [r7, #4]
 8008b92:	681b      	ldr	r3, [r3, #0]
 8008b94:	461a      	mov	r2, r3
 8008b96:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8008b9a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8008b9e:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008ba2:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8008ba6:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8008baa:	e841 2300 	strex	r3, r2, [r1]
 8008bae:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8008bb2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8008bb6:	2b00      	cmp	r3, #0
 8008bb8:	d1da      	bne.n	8008b70 <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008bba:	687b      	ldr	r3, [r7, #4]
 8008bbc:	681b      	ldr	r3, [r3, #0]
 8008bbe:	3308      	adds	r3, #8
 8008bc0:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008bc2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8008bc4:	e853 3f00 	ldrex	r3, [r3]
 8008bc8:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8008bca:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8008bcc:	f023 0301 	bic.w	r3, r3, #1
 8008bd0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8008bd4:	687b      	ldr	r3, [r7, #4]
 8008bd6:	681b      	ldr	r3, [r3, #0]
 8008bd8:	3308      	adds	r3, #8
 8008bda:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8008bde:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8008be2:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008be4:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8008be6:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8008bea:	e841 2300 	strex	r3, r2, [r1]
 8008bee:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8008bf0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8008bf2:	2b00      	cmp	r3, #0
 8008bf4:	d1e1      	bne.n	8008bba <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008bf6:	687b      	ldr	r3, [r7, #4]
 8008bf8:	681b      	ldr	r3, [r3, #0]
 8008bfa:	3308      	adds	r3, #8
 8008bfc:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008bfe:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8008c00:	e853 3f00 	ldrex	r3, [r3]
 8008c04:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8008c06:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8008c08:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008c0c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8008c10:	687b      	ldr	r3, [r7, #4]
 8008c12:	681b      	ldr	r3, [r3, #0]
 8008c14:	3308      	adds	r3, #8
 8008c16:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8008c1a:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8008c1c:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008c1e:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8008c20:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8008c22:	e841 2300 	strex	r3, r2, [r1]
 8008c26:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8008c28:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8008c2a:	2b00      	cmp	r3, #0
 8008c2c:	d1e3      	bne.n	8008bf6 <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8008c2e:	687b      	ldr	r3, [r7, #4]
 8008c30:	2220      	movs	r2, #32
 8008c32:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008c36:	687b      	ldr	r3, [r7, #4]
 8008c38:	2200      	movs	r2, #0
 8008c3a:	661a      	str	r2, [r3, #96]	@ 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008c3c:	687b      	ldr	r3, [r7, #4]
 8008c3e:	681b      	ldr	r3, [r3, #0]
 8008c40:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008c42:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008c44:	e853 3f00 	ldrex	r3, [r3]
 8008c48:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8008c4a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008c4c:	f023 0310 	bic.w	r3, r3, #16
 8008c50:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8008c54:	687b      	ldr	r3, [r7, #4]
 8008c56:	681b      	ldr	r3, [r3, #0]
 8008c58:	461a      	mov	r2, r3
 8008c5a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008c5e:	65bb      	str	r3, [r7, #88]	@ 0x58
 8008c60:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008c62:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8008c64:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8008c66:	e841 2300 	strex	r3, r2, [r1]
 8008c6a:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8008c6c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008c6e:	2b00      	cmp	r3, #0
 8008c70:	d1e4      	bne.n	8008c3c <HAL_UART_IRQHandler+0x3ec>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8008c72:	687b      	ldr	r3, [r7, #4]
 8008c74:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008c76:	4618      	mov	r0, r3
 8008c78:	f7fa fbfc 	bl	8003474 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8008c7c:	687b      	ldr	r3, [r7, #4]
 8008c7e:	2202      	movs	r2, #2
 8008c80:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8008c82:	687b      	ldr	r3, [r7, #4]
 8008c84:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8008c88:	687b      	ldr	r3, [r7, #4]
 8008c8a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8008c8e:	b29b      	uxth	r3, r3
 8008c90:	1ad3      	subs	r3, r2, r3
 8008c92:	b29b      	uxth	r3, r3
 8008c94:	4619      	mov	r1, r3
 8008c96:	6878      	ldr	r0, [r7, #4]
 8008c98:	f000 f8f6 	bl	8008e88 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8008c9c:	e0b9      	b.n	8008e12 <HAL_UART_IRQHandler+0x5c2>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8008c9e:	687b      	ldr	r3, [r7, #4]
 8008ca0:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8008ca4:	687b      	ldr	r3, [r7, #4]
 8008ca6:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8008caa:	b29b      	uxth	r3, r3
 8008cac:	1ad3      	subs	r3, r2, r3
 8008cae:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8008cb2:	687b      	ldr	r3, [r7, #4]
 8008cb4:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8008cb8:	b29b      	uxth	r3, r3
 8008cba:	2b00      	cmp	r3, #0
 8008cbc:	f000 80ab 	beq.w	8008e16 <HAL_UART_IRQHandler+0x5c6>
          && (nb_rx_data > 0U))
 8008cc0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8008cc4:	2b00      	cmp	r3, #0
 8008cc6:	f000 80a6 	beq.w	8008e16 <HAL_UART_IRQHandler+0x5c6>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008cca:	687b      	ldr	r3, [r7, #4]
 8008ccc:	681b      	ldr	r3, [r3, #0]
 8008cce:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008cd0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008cd2:	e853 3f00 	ldrex	r3, [r3]
 8008cd6:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8008cd8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008cda:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008cde:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8008ce2:	687b      	ldr	r3, [r7, #4]
 8008ce4:	681b      	ldr	r3, [r3, #0]
 8008ce6:	461a      	mov	r2, r3
 8008ce8:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8008cec:	647b      	str	r3, [r7, #68]	@ 0x44
 8008cee:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008cf0:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8008cf2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008cf4:	e841 2300 	strex	r3, r2, [r1]
 8008cf8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8008cfa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008cfc:	2b00      	cmp	r3, #0
 8008cfe:	d1e4      	bne.n	8008cca <HAL_UART_IRQHandler+0x47a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008d00:	687b      	ldr	r3, [r7, #4]
 8008d02:	681b      	ldr	r3, [r3, #0]
 8008d04:	3308      	adds	r3, #8
 8008d06:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008d0a:	e853 3f00 	ldrex	r3, [r3]
 8008d0e:	623b      	str	r3, [r7, #32]
   return(result);
 8008d10:	6a3b      	ldr	r3, [r7, #32]
 8008d12:	f023 0301 	bic.w	r3, r3, #1
 8008d16:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8008d1a:	687b      	ldr	r3, [r7, #4]
 8008d1c:	681b      	ldr	r3, [r3, #0]
 8008d1e:	3308      	adds	r3, #8
 8008d20:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8008d24:	633a      	str	r2, [r7, #48]	@ 0x30
 8008d26:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d28:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008d2a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008d2c:	e841 2300 	strex	r3, r2, [r1]
 8008d30:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8008d32:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008d34:	2b00      	cmp	r3, #0
 8008d36:	d1e3      	bne.n	8008d00 <HAL_UART_IRQHandler+0x4b0>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8008d38:	687b      	ldr	r3, [r7, #4]
 8008d3a:	2220      	movs	r2, #32
 8008d3c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008d40:	687b      	ldr	r3, [r7, #4]
 8008d42:	2200      	movs	r2, #0
 8008d44:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8008d46:	687b      	ldr	r3, [r7, #4]
 8008d48:	2200      	movs	r2, #0
 8008d4a:	669a      	str	r2, [r3, #104]	@ 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008d4c:	687b      	ldr	r3, [r7, #4]
 8008d4e:	681b      	ldr	r3, [r3, #0]
 8008d50:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d52:	693b      	ldr	r3, [r7, #16]
 8008d54:	e853 3f00 	ldrex	r3, [r3]
 8008d58:	60fb      	str	r3, [r7, #12]
   return(result);
 8008d5a:	68fb      	ldr	r3, [r7, #12]
 8008d5c:	f023 0310 	bic.w	r3, r3, #16
 8008d60:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8008d64:	687b      	ldr	r3, [r7, #4]
 8008d66:	681b      	ldr	r3, [r3, #0]
 8008d68:	461a      	mov	r2, r3
 8008d6a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8008d6e:	61fb      	str	r3, [r7, #28]
 8008d70:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d72:	69b9      	ldr	r1, [r7, #24]
 8008d74:	69fa      	ldr	r2, [r7, #28]
 8008d76:	e841 2300 	strex	r3, r2, [r1]
 8008d7a:	617b      	str	r3, [r7, #20]
   return(result);
 8008d7c:	697b      	ldr	r3, [r7, #20]
 8008d7e:	2b00      	cmp	r3, #0
 8008d80:	d1e4      	bne.n	8008d4c <HAL_UART_IRQHandler+0x4fc>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8008d82:	687b      	ldr	r3, [r7, #4]
 8008d84:	2202      	movs	r2, #2
 8008d86:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8008d88:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8008d8c:	4619      	mov	r1, r3
 8008d8e:	6878      	ldr	r0, [r7, #4]
 8008d90:	f000 f87a 	bl	8008e88 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8008d94:	e03f      	b.n	8008e16 <HAL_UART_IRQHandler+0x5c6>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8008d96:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008d9a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8008d9e:	2b00      	cmp	r3, #0
 8008da0:	d00e      	beq.n	8008dc0 <HAL_UART_IRQHandler+0x570>
 8008da2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008da6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8008daa:	2b00      	cmp	r3, #0
 8008dac:	d008      	beq.n	8008dc0 <HAL_UART_IRQHandler+0x570>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8008dae:	687b      	ldr	r3, [r7, #4]
 8008db0:	681b      	ldr	r3, [r3, #0]
 8008db2:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8008db6:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8008db8:	6878      	ldr	r0, [r7, #4]
 8008dba:	f000 ff08 	bl	8009bce <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8008dbe:	e02d      	b.n	8008e1c <HAL_UART_IRQHandler+0x5cc>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 8008dc0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008dc4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008dc8:	2b00      	cmp	r3, #0
 8008dca:	d00e      	beq.n	8008dea <HAL_UART_IRQHandler+0x59a>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8008dcc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008dd0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008dd4:	2b00      	cmp	r3, #0
 8008dd6:	d008      	beq.n	8008dea <HAL_UART_IRQHandler+0x59a>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 8008dd8:	687b      	ldr	r3, [r7, #4]
 8008dda:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008ddc:	2b00      	cmp	r3, #0
 8008dde:	d01c      	beq.n	8008e1a <HAL_UART_IRQHandler+0x5ca>
    {
      huart->TxISR(huart);
 8008de0:	687b      	ldr	r3, [r7, #4]
 8008de2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008de4:	6878      	ldr	r0, [r7, #4]
 8008de6:	4798      	blx	r3
    }
    return;
 8008de8:	e017      	b.n	8008e1a <HAL_UART_IRQHandler+0x5ca>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8008dea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008dee:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008df2:	2b00      	cmp	r3, #0
 8008df4:	d012      	beq.n	8008e1c <HAL_UART_IRQHandler+0x5cc>
 8008df6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008dfa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008dfe:	2b00      	cmp	r3, #0
 8008e00:	d00c      	beq.n	8008e1c <HAL_UART_IRQHandler+0x5cc>
  {
    UART_EndTransmit_IT(huart);
 8008e02:	6878      	ldr	r0, [r7, #4]
 8008e04:	f000 feb9 	bl	8009b7a <UART_EndTransmit_IT>
    return;
 8008e08:	e008      	b.n	8008e1c <HAL_UART_IRQHandler+0x5cc>
      return;
 8008e0a:	bf00      	nop
 8008e0c:	e006      	b.n	8008e1c <HAL_UART_IRQHandler+0x5cc>
    return;
 8008e0e:	bf00      	nop
 8008e10:	e004      	b.n	8008e1c <HAL_UART_IRQHandler+0x5cc>
      return;
 8008e12:	bf00      	nop
 8008e14:	e002      	b.n	8008e1c <HAL_UART_IRQHandler+0x5cc>
      return;
 8008e16:	bf00      	nop
 8008e18:	e000      	b.n	8008e1c <HAL_UART_IRQHandler+0x5cc>
    return;
 8008e1a:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 8008e1c:	37e8      	adds	r7, #232	@ 0xe8
 8008e1e:	46bd      	mov	sp, r7
 8008e20:	bd80      	pop	{r7, pc}
 8008e22:	bf00      	nop

08008e24 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8008e24:	b480      	push	{r7}
 8008e26:	b083      	sub	sp, #12
 8008e28:	af00      	add	r7, sp, #0
 8008e2a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8008e2c:	bf00      	nop
 8008e2e:	370c      	adds	r7, #12
 8008e30:	46bd      	mov	sp, r7
 8008e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e36:	4770      	bx	lr

08008e38 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8008e38:	b480      	push	{r7}
 8008e3a:	b083      	sub	sp, #12
 8008e3c:	af00      	add	r7, sp, #0
 8008e3e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 8008e40:	bf00      	nop
 8008e42:	370c      	adds	r7, #12
 8008e44:	46bd      	mov	sp, r7
 8008e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e4a:	4770      	bx	lr

08008e4c <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8008e4c:	b480      	push	{r7}
 8008e4e:	b083      	sub	sp, #12
 8008e50:	af00      	add	r7, sp, #0
 8008e52:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 8008e54:	bf00      	nop
 8008e56:	370c      	adds	r7, #12
 8008e58:	46bd      	mov	sp, r7
 8008e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e5e:	4770      	bx	lr

08008e60 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8008e60:	b480      	push	{r7}
 8008e62:	b083      	sub	sp, #12
 8008e64:	af00      	add	r7, sp, #0
 8008e66:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8008e68:	bf00      	nop
 8008e6a:	370c      	adds	r7, #12
 8008e6c:	46bd      	mov	sp, r7
 8008e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e72:	4770      	bx	lr

08008e74 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8008e74:	b480      	push	{r7}
 8008e76:	b083      	sub	sp, #12
 8008e78:	af00      	add	r7, sp, #0
 8008e7a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8008e7c:	bf00      	nop
 8008e7e:	370c      	adds	r7, #12
 8008e80:	46bd      	mov	sp, r7
 8008e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e86:	4770      	bx	lr

08008e88 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8008e88:	b480      	push	{r7}
 8008e8a:	b083      	sub	sp, #12
 8008e8c:	af00      	add	r7, sp, #0
 8008e8e:	6078      	str	r0, [r7, #4]
 8008e90:	460b      	mov	r3, r1
 8008e92:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8008e94:	bf00      	nop
 8008e96:	370c      	adds	r7, #12
 8008e98:	46bd      	mov	sp, r7
 8008e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e9e:	4770      	bx	lr

08008ea0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008ea0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008ea4:	b08a      	sub	sp, #40	@ 0x28
 8008ea6:	af00      	add	r7, sp, #0
 8008ea8:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8008eaa:	2300      	movs	r3, #0
 8008eac:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8008eb0:	68fb      	ldr	r3, [r7, #12]
 8008eb2:	689a      	ldr	r2, [r3, #8]
 8008eb4:	68fb      	ldr	r3, [r7, #12]
 8008eb6:	691b      	ldr	r3, [r3, #16]
 8008eb8:	431a      	orrs	r2, r3
 8008eba:	68fb      	ldr	r3, [r7, #12]
 8008ebc:	695b      	ldr	r3, [r3, #20]
 8008ebe:	431a      	orrs	r2, r3
 8008ec0:	68fb      	ldr	r3, [r7, #12]
 8008ec2:	69db      	ldr	r3, [r3, #28]
 8008ec4:	4313      	orrs	r3, r2
 8008ec6:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8008ec8:	68fb      	ldr	r3, [r7, #12]
 8008eca:	681b      	ldr	r3, [r3, #0]
 8008ecc:	681a      	ldr	r2, [r3, #0]
 8008ece:	4bb4      	ldr	r3, [pc, #720]	@ (80091a0 <UART_SetConfig+0x300>)
 8008ed0:	4013      	ands	r3, r2
 8008ed2:	68fa      	ldr	r2, [r7, #12]
 8008ed4:	6812      	ldr	r2, [r2, #0]
 8008ed6:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8008ed8:	430b      	orrs	r3, r1
 8008eda:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008edc:	68fb      	ldr	r3, [r7, #12]
 8008ede:	681b      	ldr	r3, [r3, #0]
 8008ee0:	685b      	ldr	r3, [r3, #4]
 8008ee2:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8008ee6:	68fb      	ldr	r3, [r7, #12]
 8008ee8:	68da      	ldr	r2, [r3, #12]
 8008eea:	68fb      	ldr	r3, [r7, #12]
 8008eec:	681b      	ldr	r3, [r3, #0]
 8008eee:	430a      	orrs	r2, r1
 8008ef0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8008ef2:	68fb      	ldr	r3, [r7, #12]
 8008ef4:	699b      	ldr	r3, [r3, #24]
 8008ef6:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8008ef8:	68fb      	ldr	r3, [r7, #12]
 8008efa:	681b      	ldr	r3, [r3, #0]
 8008efc:	4aa9      	ldr	r2, [pc, #676]	@ (80091a4 <UART_SetConfig+0x304>)
 8008efe:	4293      	cmp	r3, r2
 8008f00:	d004      	beq.n	8008f0c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8008f02:	68fb      	ldr	r3, [r7, #12]
 8008f04:	6a1b      	ldr	r3, [r3, #32]
 8008f06:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008f08:	4313      	orrs	r3, r2
 8008f0a:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8008f0c:	68fb      	ldr	r3, [r7, #12]
 8008f0e:	681b      	ldr	r3, [r3, #0]
 8008f10:	689b      	ldr	r3, [r3, #8]
 8008f12:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8008f16:	68fb      	ldr	r3, [r7, #12]
 8008f18:	681b      	ldr	r3, [r3, #0]
 8008f1a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008f1c:	430a      	orrs	r2, r1
 8008f1e:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8008f20:	68fb      	ldr	r3, [r7, #12]
 8008f22:	681b      	ldr	r3, [r3, #0]
 8008f24:	4aa0      	ldr	r2, [pc, #640]	@ (80091a8 <UART_SetConfig+0x308>)
 8008f26:	4293      	cmp	r3, r2
 8008f28:	d126      	bne.n	8008f78 <UART_SetConfig+0xd8>
 8008f2a:	4ba0      	ldr	r3, [pc, #640]	@ (80091ac <UART_SetConfig+0x30c>)
 8008f2c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008f30:	f003 0303 	and.w	r3, r3, #3
 8008f34:	2b03      	cmp	r3, #3
 8008f36:	d81b      	bhi.n	8008f70 <UART_SetConfig+0xd0>
 8008f38:	a201      	add	r2, pc, #4	@ (adr r2, 8008f40 <UART_SetConfig+0xa0>)
 8008f3a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008f3e:	bf00      	nop
 8008f40:	08008f51 	.word	0x08008f51
 8008f44:	08008f61 	.word	0x08008f61
 8008f48:	08008f59 	.word	0x08008f59
 8008f4c:	08008f69 	.word	0x08008f69
 8008f50:	2301      	movs	r3, #1
 8008f52:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8008f56:	e080      	b.n	800905a <UART_SetConfig+0x1ba>
 8008f58:	2302      	movs	r3, #2
 8008f5a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8008f5e:	e07c      	b.n	800905a <UART_SetConfig+0x1ba>
 8008f60:	2304      	movs	r3, #4
 8008f62:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8008f66:	e078      	b.n	800905a <UART_SetConfig+0x1ba>
 8008f68:	2308      	movs	r3, #8
 8008f6a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8008f6e:	e074      	b.n	800905a <UART_SetConfig+0x1ba>
 8008f70:	2310      	movs	r3, #16
 8008f72:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8008f76:	e070      	b.n	800905a <UART_SetConfig+0x1ba>
 8008f78:	68fb      	ldr	r3, [r7, #12]
 8008f7a:	681b      	ldr	r3, [r3, #0]
 8008f7c:	4a8c      	ldr	r2, [pc, #560]	@ (80091b0 <UART_SetConfig+0x310>)
 8008f7e:	4293      	cmp	r3, r2
 8008f80:	d138      	bne.n	8008ff4 <UART_SetConfig+0x154>
 8008f82:	4b8a      	ldr	r3, [pc, #552]	@ (80091ac <UART_SetConfig+0x30c>)
 8008f84:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008f88:	f003 030c 	and.w	r3, r3, #12
 8008f8c:	2b0c      	cmp	r3, #12
 8008f8e:	d82d      	bhi.n	8008fec <UART_SetConfig+0x14c>
 8008f90:	a201      	add	r2, pc, #4	@ (adr r2, 8008f98 <UART_SetConfig+0xf8>)
 8008f92:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008f96:	bf00      	nop
 8008f98:	08008fcd 	.word	0x08008fcd
 8008f9c:	08008fed 	.word	0x08008fed
 8008fa0:	08008fed 	.word	0x08008fed
 8008fa4:	08008fed 	.word	0x08008fed
 8008fa8:	08008fdd 	.word	0x08008fdd
 8008fac:	08008fed 	.word	0x08008fed
 8008fb0:	08008fed 	.word	0x08008fed
 8008fb4:	08008fed 	.word	0x08008fed
 8008fb8:	08008fd5 	.word	0x08008fd5
 8008fbc:	08008fed 	.word	0x08008fed
 8008fc0:	08008fed 	.word	0x08008fed
 8008fc4:	08008fed 	.word	0x08008fed
 8008fc8:	08008fe5 	.word	0x08008fe5
 8008fcc:	2300      	movs	r3, #0
 8008fce:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8008fd2:	e042      	b.n	800905a <UART_SetConfig+0x1ba>
 8008fd4:	2302      	movs	r3, #2
 8008fd6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8008fda:	e03e      	b.n	800905a <UART_SetConfig+0x1ba>
 8008fdc:	2304      	movs	r3, #4
 8008fde:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8008fe2:	e03a      	b.n	800905a <UART_SetConfig+0x1ba>
 8008fe4:	2308      	movs	r3, #8
 8008fe6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8008fea:	e036      	b.n	800905a <UART_SetConfig+0x1ba>
 8008fec:	2310      	movs	r3, #16
 8008fee:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8008ff2:	e032      	b.n	800905a <UART_SetConfig+0x1ba>
 8008ff4:	68fb      	ldr	r3, [r7, #12]
 8008ff6:	681b      	ldr	r3, [r3, #0]
 8008ff8:	4a6a      	ldr	r2, [pc, #424]	@ (80091a4 <UART_SetConfig+0x304>)
 8008ffa:	4293      	cmp	r3, r2
 8008ffc:	d12a      	bne.n	8009054 <UART_SetConfig+0x1b4>
 8008ffe:	4b6b      	ldr	r3, [pc, #428]	@ (80091ac <UART_SetConfig+0x30c>)
 8009000:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009004:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8009008:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800900c:	d01a      	beq.n	8009044 <UART_SetConfig+0x1a4>
 800900e:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8009012:	d81b      	bhi.n	800904c <UART_SetConfig+0x1ac>
 8009014:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8009018:	d00c      	beq.n	8009034 <UART_SetConfig+0x194>
 800901a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800901e:	d815      	bhi.n	800904c <UART_SetConfig+0x1ac>
 8009020:	2b00      	cmp	r3, #0
 8009022:	d003      	beq.n	800902c <UART_SetConfig+0x18c>
 8009024:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009028:	d008      	beq.n	800903c <UART_SetConfig+0x19c>
 800902a:	e00f      	b.n	800904c <UART_SetConfig+0x1ac>
 800902c:	2300      	movs	r3, #0
 800902e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8009032:	e012      	b.n	800905a <UART_SetConfig+0x1ba>
 8009034:	2302      	movs	r3, #2
 8009036:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800903a:	e00e      	b.n	800905a <UART_SetConfig+0x1ba>
 800903c:	2304      	movs	r3, #4
 800903e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8009042:	e00a      	b.n	800905a <UART_SetConfig+0x1ba>
 8009044:	2308      	movs	r3, #8
 8009046:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800904a:	e006      	b.n	800905a <UART_SetConfig+0x1ba>
 800904c:	2310      	movs	r3, #16
 800904e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8009052:	e002      	b.n	800905a <UART_SetConfig+0x1ba>
 8009054:	2310      	movs	r3, #16
 8009056:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800905a:	68fb      	ldr	r3, [r7, #12]
 800905c:	681b      	ldr	r3, [r3, #0]
 800905e:	4a51      	ldr	r2, [pc, #324]	@ (80091a4 <UART_SetConfig+0x304>)
 8009060:	4293      	cmp	r3, r2
 8009062:	d17a      	bne.n	800915a <UART_SetConfig+0x2ba>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8009064:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8009068:	2b08      	cmp	r3, #8
 800906a:	d824      	bhi.n	80090b6 <UART_SetConfig+0x216>
 800906c:	a201      	add	r2, pc, #4	@ (adr r2, 8009074 <UART_SetConfig+0x1d4>)
 800906e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009072:	bf00      	nop
 8009074:	08009099 	.word	0x08009099
 8009078:	080090b7 	.word	0x080090b7
 800907c:	080090a1 	.word	0x080090a1
 8009080:	080090b7 	.word	0x080090b7
 8009084:	080090a7 	.word	0x080090a7
 8009088:	080090b7 	.word	0x080090b7
 800908c:	080090b7 	.word	0x080090b7
 8009090:	080090b7 	.word	0x080090b7
 8009094:	080090af 	.word	0x080090af
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009098:	f7fd fc0a 	bl	80068b0 <HAL_RCC_GetPCLK1Freq>
 800909c:	61f8      	str	r0, [r7, #28]
        break;
 800909e:	e010      	b.n	80090c2 <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80090a0:	4b44      	ldr	r3, [pc, #272]	@ (80091b4 <UART_SetConfig+0x314>)
 80090a2:	61fb      	str	r3, [r7, #28]
        break;
 80090a4:	e00d      	b.n	80090c2 <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80090a6:	f7fd fb6b 	bl	8006780 <HAL_RCC_GetSysClockFreq>
 80090aa:	61f8      	str	r0, [r7, #28]
        break;
 80090ac:	e009      	b.n	80090c2 <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80090ae:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80090b2:	61fb      	str	r3, [r7, #28]
        break;
 80090b4:	e005      	b.n	80090c2 <UART_SetConfig+0x222>
      default:
        pclk = 0U;
 80090b6:	2300      	movs	r3, #0
 80090b8:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80090ba:	2301      	movs	r3, #1
 80090bc:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 80090c0:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80090c2:	69fb      	ldr	r3, [r7, #28]
 80090c4:	2b00      	cmp	r3, #0
 80090c6:	f000 8107 	beq.w	80092d8 <UART_SetConfig+0x438>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80090ca:	68fb      	ldr	r3, [r7, #12]
 80090cc:	685a      	ldr	r2, [r3, #4]
 80090ce:	4613      	mov	r3, r2
 80090d0:	005b      	lsls	r3, r3, #1
 80090d2:	4413      	add	r3, r2
 80090d4:	69fa      	ldr	r2, [r7, #28]
 80090d6:	429a      	cmp	r2, r3
 80090d8:	d305      	bcc.n	80090e6 <UART_SetConfig+0x246>
          (pclk > (4096U * huart->Init.BaudRate)))
 80090da:	68fb      	ldr	r3, [r7, #12]
 80090dc:	685b      	ldr	r3, [r3, #4]
 80090de:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80090e0:	69fa      	ldr	r2, [r7, #28]
 80090e2:	429a      	cmp	r2, r3
 80090e4:	d903      	bls.n	80090ee <UART_SetConfig+0x24e>
      {
        ret = HAL_ERROR;
 80090e6:	2301      	movs	r3, #1
 80090e8:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 80090ec:	e0f4      	b.n	80092d8 <UART_SetConfig+0x438>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80090ee:	69fb      	ldr	r3, [r7, #28]
 80090f0:	2200      	movs	r2, #0
 80090f2:	461c      	mov	r4, r3
 80090f4:	4615      	mov	r5, r2
 80090f6:	f04f 0200 	mov.w	r2, #0
 80090fa:	f04f 0300 	mov.w	r3, #0
 80090fe:	022b      	lsls	r3, r5, #8
 8009100:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8009104:	0222      	lsls	r2, r4, #8
 8009106:	68f9      	ldr	r1, [r7, #12]
 8009108:	6849      	ldr	r1, [r1, #4]
 800910a:	0849      	lsrs	r1, r1, #1
 800910c:	2000      	movs	r0, #0
 800910e:	4688      	mov	r8, r1
 8009110:	4681      	mov	r9, r0
 8009112:	eb12 0a08 	adds.w	sl, r2, r8
 8009116:	eb43 0b09 	adc.w	fp, r3, r9
 800911a:	68fb      	ldr	r3, [r7, #12]
 800911c:	685b      	ldr	r3, [r3, #4]
 800911e:	2200      	movs	r2, #0
 8009120:	603b      	str	r3, [r7, #0]
 8009122:	607a      	str	r2, [r7, #4]
 8009124:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009128:	4650      	mov	r0, sl
 800912a:	4659      	mov	r1, fp
 800912c:	f7f7 fde4 	bl	8000cf8 <__aeabi_uldivmod>
 8009130:	4602      	mov	r2, r0
 8009132:	460b      	mov	r3, r1
 8009134:	4613      	mov	r3, r2
 8009136:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8009138:	69bb      	ldr	r3, [r7, #24]
 800913a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800913e:	d308      	bcc.n	8009152 <UART_SetConfig+0x2b2>
 8009140:	69bb      	ldr	r3, [r7, #24]
 8009142:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8009146:	d204      	bcs.n	8009152 <UART_SetConfig+0x2b2>
        {
          huart->Instance->BRR = usartdiv;
 8009148:	68fb      	ldr	r3, [r7, #12]
 800914a:	681b      	ldr	r3, [r3, #0]
 800914c:	69ba      	ldr	r2, [r7, #24]
 800914e:	60da      	str	r2, [r3, #12]
 8009150:	e0c2      	b.n	80092d8 <UART_SetConfig+0x438>
        }
        else
        {
          ret = HAL_ERROR;
 8009152:	2301      	movs	r3, #1
 8009154:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8009158:	e0be      	b.n	80092d8 <UART_SetConfig+0x438>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800915a:	68fb      	ldr	r3, [r7, #12]
 800915c:	69db      	ldr	r3, [r3, #28]
 800915e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8009162:	d16a      	bne.n	800923a <UART_SetConfig+0x39a>
  {
    switch (clocksource)
 8009164:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8009168:	2b08      	cmp	r3, #8
 800916a:	d834      	bhi.n	80091d6 <UART_SetConfig+0x336>
 800916c:	a201      	add	r2, pc, #4	@ (adr r2, 8009174 <UART_SetConfig+0x2d4>)
 800916e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009172:	bf00      	nop
 8009174:	08009199 	.word	0x08009199
 8009178:	080091b9 	.word	0x080091b9
 800917c:	080091c1 	.word	0x080091c1
 8009180:	080091d7 	.word	0x080091d7
 8009184:	080091c7 	.word	0x080091c7
 8009188:	080091d7 	.word	0x080091d7
 800918c:	080091d7 	.word	0x080091d7
 8009190:	080091d7 	.word	0x080091d7
 8009194:	080091cf 	.word	0x080091cf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009198:	f7fd fb8a 	bl	80068b0 <HAL_RCC_GetPCLK1Freq>
 800919c:	61f8      	str	r0, [r7, #28]
        break;
 800919e:	e020      	b.n	80091e2 <UART_SetConfig+0x342>
 80091a0:	efff69f3 	.word	0xefff69f3
 80091a4:	40008000 	.word	0x40008000
 80091a8:	40013800 	.word	0x40013800
 80091ac:	40021000 	.word	0x40021000
 80091b0:	40004400 	.word	0x40004400
 80091b4:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80091b8:	f7fd fb90 	bl	80068dc <HAL_RCC_GetPCLK2Freq>
 80091bc:	61f8      	str	r0, [r7, #28]
        break;
 80091be:	e010      	b.n	80091e2 <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80091c0:	4b4c      	ldr	r3, [pc, #304]	@ (80092f4 <UART_SetConfig+0x454>)
 80091c2:	61fb      	str	r3, [r7, #28]
        break;
 80091c4:	e00d      	b.n	80091e2 <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80091c6:	f7fd fadb 	bl	8006780 <HAL_RCC_GetSysClockFreq>
 80091ca:	61f8      	str	r0, [r7, #28]
        break;
 80091cc:	e009      	b.n	80091e2 <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80091ce:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80091d2:	61fb      	str	r3, [r7, #28]
        break;
 80091d4:	e005      	b.n	80091e2 <UART_SetConfig+0x342>
      default:
        pclk = 0U;
 80091d6:	2300      	movs	r3, #0
 80091d8:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80091da:	2301      	movs	r3, #1
 80091dc:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 80091e0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80091e2:	69fb      	ldr	r3, [r7, #28]
 80091e4:	2b00      	cmp	r3, #0
 80091e6:	d077      	beq.n	80092d8 <UART_SetConfig+0x438>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80091e8:	69fb      	ldr	r3, [r7, #28]
 80091ea:	005a      	lsls	r2, r3, #1
 80091ec:	68fb      	ldr	r3, [r7, #12]
 80091ee:	685b      	ldr	r3, [r3, #4]
 80091f0:	085b      	lsrs	r3, r3, #1
 80091f2:	441a      	add	r2, r3
 80091f4:	68fb      	ldr	r3, [r7, #12]
 80091f6:	685b      	ldr	r3, [r3, #4]
 80091f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80091fc:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80091fe:	69bb      	ldr	r3, [r7, #24]
 8009200:	2b0f      	cmp	r3, #15
 8009202:	d916      	bls.n	8009232 <UART_SetConfig+0x392>
 8009204:	69bb      	ldr	r3, [r7, #24]
 8009206:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800920a:	d212      	bcs.n	8009232 <UART_SetConfig+0x392>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800920c:	69bb      	ldr	r3, [r7, #24]
 800920e:	b29b      	uxth	r3, r3
 8009210:	f023 030f 	bic.w	r3, r3, #15
 8009214:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8009216:	69bb      	ldr	r3, [r7, #24]
 8009218:	085b      	lsrs	r3, r3, #1
 800921a:	b29b      	uxth	r3, r3
 800921c:	f003 0307 	and.w	r3, r3, #7
 8009220:	b29a      	uxth	r2, r3
 8009222:	8afb      	ldrh	r3, [r7, #22]
 8009224:	4313      	orrs	r3, r2
 8009226:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8009228:	68fb      	ldr	r3, [r7, #12]
 800922a:	681b      	ldr	r3, [r3, #0]
 800922c:	8afa      	ldrh	r2, [r7, #22]
 800922e:	60da      	str	r2, [r3, #12]
 8009230:	e052      	b.n	80092d8 <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 8009232:	2301      	movs	r3, #1
 8009234:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8009238:	e04e      	b.n	80092d8 <UART_SetConfig+0x438>
      }
    }
  }
  else
  {
    switch (clocksource)
 800923a:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800923e:	2b08      	cmp	r3, #8
 8009240:	d827      	bhi.n	8009292 <UART_SetConfig+0x3f2>
 8009242:	a201      	add	r2, pc, #4	@ (adr r2, 8009248 <UART_SetConfig+0x3a8>)
 8009244:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009248:	0800926d 	.word	0x0800926d
 800924c:	08009275 	.word	0x08009275
 8009250:	0800927d 	.word	0x0800927d
 8009254:	08009293 	.word	0x08009293
 8009258:	08009283 	.word	0x08009283
 800925c:	08009293 	.word	0x08009293
 8009260:	08009293 	.word	0x08009293
 8009264:	08009293 	.word	0x08009293
 8009268:	0800928b 	.word	0x0800928b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800926c:	f7fd fb20 	bl	80068b0 <HAL_RCC_GetPCLK1Freq>
 8009270:	61f8      	str	r0, [r7, #28]
        break;
 8009272:	e014      	b.n	800929e <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009274:	f7fd fb32 	bl	80068dc <HAL_RCC_GetPCLK2Freq>
 8009278:	61f8      	str	r0, [r7, #28]
        break;
 800927a:	e010      	b.n	800929e <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800927c:	4b1d      	ldr	r3, [pc, #116]	@ (80092f4 <UART_SetConfig+0x454>)
 800927e:	61fb      	str	r3, [r7, #28]
        break;
 8009280:	e00d      	b.n	800929e <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8009282:	f7fd fa7d 	bl	8006780 <HAL_RCC_GetSysClockFreq>
 8009286:	61f8      	str	r0, [r7, #28]
        break;
 8009288:	e009      	b.n	800929e <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800928a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800928e:	61fb      	str	r3, [r7, #28]
        break;
 8009290:	e005      	b.n	800929e <UART_SetConfig+0x3fe>
      default:
        pclk = 0U;
 8009292:	2300      	movs	r3, #0
 8009294:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8009296:	2301      	movs	r3, #1
 8009298:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 800929c:	bf00      	nop
    }

    if (pclk != 0U)
 800929e:	69fb      	ldr	r3, [r7, #28]
 80092a0:	2b00      	cmp	r3, #0
 80092a2:	d019      	beq.n	80092d8 <UART_SetConfig+0x438>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80092a4:	68fb      	ldr	r3, [r7, #12]
 80092a6:	685b      	ldr	r3, [r3, #4]
 80092a8:	085a      	lsrs	r2, r3, #1
 80092aa:	69fb      	ldr	r3, [r7, #28]
 80092ac:	441a      	add	r2, r3
 80092ae:	68fb      	ldr	r3, [r7, #12]
 80092b0:	685b      	ldr	r3, [r3, #4]
 80092b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80092b6:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80092b8:	69bb      	ldr	r3, [r7, #24]
 80092ba:	2b0f      	cmp	r3, #15
 80092bc:	d909      	bls.n	80092d2 <UART_SetConfig+0x432>
 80092be:	69bb      	ldr	r3, [r7, #24]
 80092c0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80092c4:	d205      	bcs.n	80092d2 <UART_SetConfig+0x432>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80092c6:	69bb      	ldr	r3, [r7, #24]
 80092c8:	b29a      	uxth	r2, r3
 80092ca:	68fb      	ldr	r3, [r7, #12]
 80092cc:	681b      	ldr	r3, [r3, #0]
 80092ce:	60da      	str	r2, [r3, #12]
 80092d0:	e002      	b.n	80092d8 <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 80092d2:	2301      	movs	r3, #1
 80092d4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80092d8:	68fb      	ldr	r3, [r7, #12]
 80092da:	2200      	movs	r2, #0
 80092dc:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 80092de:	68fb      	ldr	r3, [r7, #12]
 80092e0:	2200      	movs	r2, #0
 80092e2:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 80092e4:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 80092e8:	4618      	mov	r0, r3
 80092ea:	3728      	adds	r7, #40	@ 0x28
 80092ec:	46bd      	mov	sp, r7
 80092ee:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80092f2:	bf00      	nop
 80092f4:	00f42400 	.word	0x00f42400

080092f8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80092f8:	b480      	push	{r7}
 80092fa:	b083      	sub	sp, #12
 80092fc:	af00      	add	r7, sp, #0
 80092fe:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8009300:	687b      	ldr	r3, [r7, #4]
 8009302:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009304:	f003 0308 	and.w	r3, r3, #8
 8009308:	2b00      	cmp	r3, #0
 800930a:	d00a      	beq.n	8009322 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800930c:	687b      	ldr	r3, [r7, #4]
 800930e:	681b      	ldr	r3, [r3, #0]
 8009310:	685b      	ldr	r3, [r3, #4]
 8009312:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8009316:	687b      	ldr	r3, [r7, #4]
 8009318:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800931a:	687b      	ldr	r3, [r7, #4]
 800931c:	681b      	ldr	r3, [r3, #0]
 800931e:	430a      	orrs	r2, r1
 8009320:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8009322:	687b      	ldr	r3, [r7, #4]
 8009324:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009326:	f003 0301 	and.w	r3, r3, #1
 800932a:	2b00      	cmp	r3, #0
 800932c:	d00a      	beq.n	8009344 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800932e:	687b      	ldr	r3, [r7, #4]
 8009330:	681b      	ldr	r3, [r3, #0]
 8009332:	685b      	ldr	r3, [r3, #4]
 8009334:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8009338:	687b      	ldr	r3, [r7, #4]
 800933a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800933c:	687b      	ldr	r3, [r7, #4]
 800933e:	681b      	ldr	r3, [r3, #0]
 8009340:	430a      	orrs	r2, r1
 8009342:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8009344:	687b      	ldr	r3, [r7, #4]
 8009346:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009348:	f003 0302 	and.w	r3, r3, #2
 800934c:	2b00      	cmp	r3, #0
 800934e:	d00a      	beq.n	8009366 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8009350:	687b      	ldr	r3, [r7, #4]
 8009352:	681b      	ldr	r3, [r3, #0]
 8009354:	685b      	ldr	r3, [r3, #4]
 8009356:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800935a:	687b      	ldr	r3, [r7, #4]
 800935c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800935e:	687b      	ldr	r3, [r7, #4]
 8009360:	681b      	ldr	r3, [r3, #0]
 8009362:	430a      	orrs	r2, r1
 8009364:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8009366:	687b      	ldr	r3, [r7, #4]
 8009368:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800936a:	f003 0304 	and.w	r3, r3, #4
 800936e:	2b00      	cmp	r3, #0
 8009370:	d00a      	beq.n	8009388 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8009372:	687b      	ldr	r3, [r7, #4]
 8009374:	681b      	ldr	r3, [r3, #0]
 8009376:	685b      	ldr	r3, [r3, #4]
 8009378:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800937c:	687b      	ldr	r3, [r7, #4]
 800937e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8009380:	687b      	ldr	r3, [r7, #4]
 8009382:	681b      	ldr	r3, [r3, #0]
 8009384:	430a      	orrs	r2, r1
 8009386:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8009388:	687b      	ldr	r3, [r7, #4]
 800938a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800938c:	f003 0310 	and.w	r3, r3, #16
 8009390:	2b00      	cmp	r3, #0
 8009392:	d00a      	beq.n	80093aa <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8009394:	687b      	ldr	r3, [r7, #4]
 8009396:	681b      	ldr	r3, [r3, #0]
 8009398:	689b      	ldr	r3, [r3, #8]
 800939a:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800939e:	687b      	ldr	r3, [r7, #4]
 80093a0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80093a2:	687b      	ldr	r3, [r7, #4]
 80093a4:	681b      	ldr	r3, [r3, #0]
 80093a6:	430a      	orrs	r2, r1
 80093a8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80093aa:	687b      	ldr	r3, [r7, #4]
 80093ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80093ae:	f003 0320 	and.w	r3, r3, #32
 80093b2:	2b00      	cmp	r3, #0
 80093b4:	d00a      	beq.n	80093cc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80093b6:	687b      	ldr	r3, [r7, #4]
 80093b8:	681b      	ldr	r3, [r3, #0]
 80093ba:	689b      	ldr	r3, [r3, #8]
 80093bc:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80093c0:	687b      	ldr	r3, [r7, #4]
 80093c2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80093c4:	687b      	ldr	r3, [r7, #4]
 80093c6:	681b      	ldr	r3, [r3, #0]
 80093c8:	430a      	orrs	r2, r1
 80093ca:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80093cc:	687b      	ldr	r3, [r7, #4]
 80093ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80093d0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80093d4:	2b00      	cmp	r3, #0
 80093d6:	d01a      	beq.n	800940e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80093d8:	687b      	ldr	r3, [r7, #4]
 80093da:	681b      	ldr	r3, [r3, #0]
 80093dc:	685b      	ldr	r3, [r3, #4]
 80093de:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80093e2:	687b      	ldr	r3, [r7, #4]
 80093e4:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80093e6:	687b      	ldr	r3, [r7, #4]
 80093e8:	681b      	ldr	r3, [r3, #0]
 80093ea:	430a      	orrs	r2, r1
 80093ec:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80093ee:	687b      	ldr	r3, [r7, #4]
 80093f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80093f2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80093f6:	d10a      	bne.n	800940e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80093f8:	687b      	ldr	r3, [r7, #4]
 80093fa:	681b      	ldr	r3, [r3, #0]
 80093fc:	685b      	ldr	r3, [r3, #4]
 80093fe:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8009402:	687b      	ldr	r3, [r7, #4]
 8009404:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8009406:	687b      	ldr	r3, [r7, #4]
 8009408:	681b      	ldr	r3, [r3, #0]
 800940a:	430a      	orrs	r2, r1
 800940c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800940e:	687b      	ldr	r3, [r7, #4]
 8009410:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009412:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009416:	2b00      	cmp	r3, #0
 8009418:	d00a      	beq.n	8009430 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800941a:	687b      	ldr	r3, [r7, #4]
 800941c:	681b      	ldr	r3, [r3, #0]
 800941e:	685b      	ldr	r3, [r3, #4]
 8009420:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8009424:	687b      	ldr	r3, [r7, #4]
 8009426:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8009428:	687b      	ldr	r3, [r7, #4]
 800942a:	681b      	ldr	r3, [r3, #0]
 800942c:	430a      	orrs	r2, r1
 800942e:	605a      	str	r2, [r3, #4]
  }
}
 8009430:	bf00      	nop
 8009432:	370c      	adds	r7, #12
 8009434:	46bd      	mov	sp, r7
 8009436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800943a:	4770      	bx	lr

0800943c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800943c:	b580      	push	{r7, lr}
 800943e:	b098      	sub	sp, #96	@ 0x60
 8009440:	af02      	add	r7, sp, #8
 8009442:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009444:	687b      	ldr	r3, [r7, #4]
 8009446:	2200      	movs	r2, #0
 8009448:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800944c:	f7f9 fde8 	bl	8003020 <HAL_GetTick>
 8009450:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8009452:	687b      	ldr	r3, [r7, #4]
 8009454:	681b      	ldr	r3, [r3, #0]
 8009456:	681b      	ldr	r3, [r3, #0]
 8009458:	f003 0308 	and.w	r3, r3, #8
 800945c:	2b08      	cmp	r3, #8
 800945e:	d12e      	bne.n	80094be <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009460:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8009464:	9300      	str	r3, [sp, #0]
 8009466:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009468:	2200      	movs	r2, #0
 800946a:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800946e:	6878      	ldr	r0, [r7, #4]
 8009470:	f000 f88c 	bl	800958c <UART_WaitOnFlagUntilTimeout>
 8009474:	4603      	mov	r3, r0
 8009476:	2b00      	cmp	r3, #0
 8009478:	d021      	beq.n	80094be <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 800947a:	687b      	ldr	r3, [r7, #4]
 800947c:	681b      	ldr	r3, [r3, #0]
 800947e:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009480:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009482:	e853 3f00 	ldrex	r3, [r3]
 8009486:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8009488:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800948a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800948e:	653b      	str	r3, [r7, #80]	@ 0x50
 8009490:	687b      	ldr	r3, [r7, #4]
 8009492:	681b      	ldr	r3, [r3, #0]
 8009494:	461a      	mov	r2, r3
 8009496:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009498:	647b      	str	r3, [r7, #68]	@ 0x44
 800949a:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800949c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800949e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80094a0:	e841 2300 	strex	r3, r2, [r1]
 80094a4:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80094a6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80094a8:	2b00      	cmp	r3, #0
 80094aa:	d1e6      	bne.n	800947a <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 80094ac:	687b      	ldr	r3, [r7, #4]
 80094ae:	2220      	movs	r2, #32
 80094b0:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 80094b2:	687b      	ldr	r3, [r7, #4]
 80094b4:	2200      	movs	r2, #0
 80094b6:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80094ba:	2303      	movs	r3, #3
 80094bc:	e062      	b.n	8009584 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80094be:	687b      	ldr	r3, [r7, #4]
 80094c0:	681b      	ldr	r3, [r3, #0]
 80094c2:	681b      	ldr	r3, [r3, #0]
 80094c4:	f003 0304 	and.w	r3, r3, #4
 80094c8:	2b04      	cmp	r3, #4
 80094ca:	d149      	bne.n	8009560 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80094cc:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80094d0:	9300      	str	r3, [sp, #0]
 80094d2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80094d4:	2200      	movs	r2, #0
 80094d6:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80094da:	6878      	ldr	r0, [r7, #4]
 80094dc:	f000 f856 	bl	800958c <UART_WaitOnFlagUntilTimeout>
 80094e0:	4603      	mov	r3, r0
 80094e2:	2b00      	cmp	r3, #0
 80094e4:	d03c      	beq.n	8009560 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80094e6:	687b      	ldr	r3, [r7, #4]
 80094e8:	681b      	ldr	r3, [r3, #0]
 80094ea:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80094ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80094ee:	e853 3f00 	ldrex	r3, [r3]
 80094f2:	623b      	str	r3, [r7, #32]
   return(result);
 80094f4:	6a3b      	ldr	r3, [r7, #32]
 80094f6:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80094fa:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80094fc:	687b      	ldr	r3, [r7, #4]
 80094fe:	681b      	ldr	r3, [r3, #0]
 8009500:	461a      	mov	r2, r3
 8009502:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009504:	633b      	str	r3, [r7, #48]	@ 0x30
 8009506:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009508:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800950a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800950c:	e841 2300 	strex	r3, r2, [r1]
 8009510:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8009512:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009514:	2b00      	cmp	r3, #0
 8009516:	d1e6      	bne.n	80094e6 <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009518:	687b      	ldr	r3, [r7, #4]
 800951a:	681b      	ldr	r3, [r3, #0]
 800951c:	3308      	adds	r3, #8
 800951e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009520:	693b      	ldr	r3, [r7, #16]
 8009522:	e853 3f00 	ldrex	r3, [r3]
 8009526:	60fb      	str	r3, [r7, #12]
   return(result);
 8009528:	68fb      	ldr	r3, [r7, #12]
 800952a:	f023 0301 	bic.w	r3, r3, #1
 800952e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8009530:	687b      	ldr	r3, [r7, #4]
 8009532:	681b      	ldr	r3, [r3, #0]
 8009534:	3308      	adds	r3, #8
 8009536:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8009538:	61fa      	str	r2, [r7, #28]
 800953a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800953c:	69b9      	ldr	r1, [r7, #24]
 800953e:	69fa      	ldr	r2, [r7, #28]
 8009540:	e841 2300 	strex	r3, r2, [r1]
 8009544:	617b      	str	r3, [r7, #20]
   return(result);
 8009546:	697b      	ldr	r3, [r7, #20]
 8009548:	2b00      	cmp	r3, #0
 800954a:	d1e5      	bne.n	8009518 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 800954c:	687b      	ldr	r3, [r7, #4]
 800954e:	2220      	movs	r2, #32
 8009550:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8009554:	687b      	ldr	r3, [r7, #4]
 8009556:	2200      	movs	r2, #0
 8009558:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800955c:	2303      	movs	r3, #3
 800955e:	e011      	b.n	8009584 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8009560:	687b      	ldr	r3, [r7, #4]
 8009562:	2220      	movs	r2, #32
 8009564:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8009566:	687b      	ldr	r3, [r7, #4]
 8009568:	2220      	movs	r2, #32
 800956a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800956e:	687b      	ldr	r3, [r7, #4]
 8009570:	2200      	movs	r2, #0
 8009572:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009574:	687b      	ldr	r3, [r7, #4]
 8009576:	2200      	movs	r2, #0
 8009578:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 800957a:	687b      	ldr	r3, [r7, #4]
 800957c:	2200      	movs	r2, #0
 800957e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8009582:	2300      	movs	r3, #0
}
 8009584:	4618      	mov	r0, r3
 8009586:	3758      	adds	r7, #88	@ 0x58
 8009588:	46bd      	mov	sp, r7
 800958a:	bd80      	pop	{r7, pc}

0800958c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800958c:	b580      	push	{r7, lr}
 800958e:	b084      	sub	sp, #16
 8009590:	af00      	add	r7, sp, #0
 8009592:	60f8      	str	r0, [r7, #12]
 8009594:	60b9      	str	r1, [r7, #8]
 8009596:	603b      	str	r3, [r7, #0]
 8009598:	4613      	mov	r3, r2
 800959a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800959c:	e049      	b.n	8009632 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800959e:	69bb      	ldr	r3, [r7, #24]
 80095a0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80095a4:	d045      	beq.n	8009632 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80095a6:	f7f9 fd3b 	bl	8003020 <HAL_GetTick>
 80095aa:	4602      	mov	r2, r0
 80095ac:	683b      	ldr	r3, [r7, #0]
 80095ae:	1ad3      	subs	r3, r2, r3
 80095b0:	69ba      	ldr	r2, [r7, #24]
 80095b2:	429a      	cmp	r2, r3
 80095b4:	d302      	bcc.n	80095bc <UART_WaitOnFlagUntilTimeout+0x30>
 80095b6:	69bb      	ldr	r3, [r7, #24]
 80095b8:	2b00      	cmp	r3, #0
 80095ba:	d101      	bne.n	80095c0 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80095bc:	2303      	movs	r3, #3
 80095be:	e048      	b.n	8009652 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80095c0:	68fb      	ldr	r3, [r7, #12]
 80095c2:	681b      	ldr	r3, [r3, #0]
 80095c4:	681b      	ldr	r3, [r3, #0]
 80095c6:	f003 0304 	and.w	r3, r3, #4
 80095ca:	2b00      	cmp	r3, #0
 80095cc:	d031      	beq.n	8009632 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80095ce:	68fb      	ldr	r3, [r7, #12]
 80095d0:	681b      	ldr	r3, [r3, #0]
 80095d2:	69db      	ldr	r3, [r3, #28]
 80095d4:	f003 0308 	and.w	r3, r3, #8
 80095d8:	2b08      	cmp	r3, #8
 80095da:	d110      	bne.n	80095fe <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80095dc:	68fb      	ldr	r3, [r7, #12]
 80095de:	681b      	ldr	r3, [r3, #0]
 80095e0:	2208      	movs	r2, #8
 80095e2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80095e4:	68f8      	ldr	r0, [r7, #12]
 80095e6:	f000 f8ff 	bl	80097e8 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80095ea:	68fb      	ldr	r3, [r7, #12]
 80095ec:	2208      	movs	r2, #8
 80095ee:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80095f2:	68fb      	ldr	r3, [r7, #12]
 80095f4:	2200      	movs	r2, #0
 80095f6:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 80095fa:	2301      	movs	r3, #1
 80095fc:	e029      	b.n	8009652 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80095fe:	68fb      	ldr	r3, [r7, #12]
 8009600:	681b      	ldr	r3, [r3, #0]
 8009602:	69db      	ldr	r3, [r3, #28]
 8009604:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8009608:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800960c:	d111      	bne.n	8009632 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800960e:	68fb      	ldr	r3, [r7, #12]
 8009610:	681b      	ldr	r3, [r3, #0]
 8009612:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8009616:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8009618:	68f8      	ldr	r0, [r7, #12]
 800961a:	f000 f8e5 	bl	80097e8 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800961e:	68fb      	ldr	r3, [r7, #12]
 8009620:	2220      	movs	r2, #32
 8009622:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8009626:	68fb      	ldr	r3, [r7, #12]
 8009628:	2200      	movs	r2, #0
 800962a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 800962e:	2303      	movs	r3, #3
 8009630:	e00f      	b.n	8009652 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009632:	68fb      	ldr	r3, [r7, #12]
 8009634:	681b      	ldr	r3, [r3, #0]
 8009636:	69da      	ldr	r2, [r3, #28]
 8009638:	68bb      	ldr	r3, [r7, #8]
 800963a:	4013      	ands	r3, r2
 800963c:	68ba      	ldr	r2, [r7, #8]
 800963e:	429a      	cmp	r2, r3
 8009640:	bf0c      	ite	eq
 8009642:	2301      	moveq	r3, #1
 8009644:	2300      	movne	r3, #0
 8009646:	b2db      	uxtb	r3, r3
 8009648:	461a      	mov	r2, r3
 800964a:	79fb      	ldrb	r3, [r7, #7]
 800964c:	429a      	cmp	r2, r3
 800964e:	d0a6      	beq.n	800959e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8009650:	2300      	movs	r3, #0
}
 8009652:	4618      	mov	r0, r3
 8009654:	3710      	adds	r7, #16
 8009656:	46bd      	mov	sp, r7
 8009658:	bd80      	pop	{r7, pc}
	...

0800965c <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800965c:	b580      	push	{r7, lr}
 800965e:	b096      	sub	sp, #88	@ 0x58
 8009660:	af00      	add	r7, sp, #0
 8009662:	60f8      	str	r0, [r7, #12]
 8009664:	60b9      	str	r1, [r7, #8]
 8009666:	4613      	mov	r3, r2
 8009668:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800966a:	68fb      	ldr	r3, [r7, #12]
 800966c:	68ba      	ldr	r2, [r7, #8]
 800966e:	655a      	str	r2, [r3, #84]	@ 0x54
  huart->RxXferSize = Size;
 8009670:	68fb      	ldr	r3, [r7, #12]
 8009672:	88fa      	ldrh	r2, [r7, #6]
 8009674:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009678:	68fb      	ldr	r3, [r7, #12]
 800967a:	2200      	movs	r2, #0
 800967c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8009680:	68fb      	ldr	r3, [r7, #12]
 8009682:	2222      	movs	r2, #34	@ 0x22
 8009684:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  if (huart->hdmarx != NULL)
 8009688:	68fb      	ldr	r3, [r7, #12]
 800968a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800968c:	2b00      	cmp	r3, #0
 800968e:	d028      	beq.n	80096e2 <UART_Start_Receive_DMA+0x86>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8009690:	68fb      	ldr	r3, [r7, #12]
 8009692:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009694:	4a3e      	ldr	r2, [pc, #248]	@ (8009790 <UART_Start_Receive_DMA+0x134>)
 8009696:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8009698:	68fb      	ldr	r3, [r7, #12]
 800969a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800969c:	4a3d      	ldr	r2, [pc, #244]	@ (8009794 <UART_Start_Receive_DMA+0x138>)
 800969e:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 80096a0:	68fb      	ldr	r3, [r7, #12]
 80096a2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80096a4:	4a3c      	ldr	r2, [pc, #240]	@ (8009798 <UART_Start_Receive_DMA+0x13c>)
 80096a6:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 80096a8:	68fb      	ldr	r3, [r7, #12]
 80096aa:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80096ac:	2200      	movs	r2, #0
 80096ae:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 80096b0:	68fb      	ldr	r3, [r7, #12]
 80096b2:	6f58      	ldr	r0, [r3, #116]	@ 0x74
 80096b4:	68fb      	ldr	r3, [r7, #12]
 80096b6:	681b      	ldr	r3, [r3, #0]
 80096b8:	3324      	adds	r3, #36	@ 0x24
 80096ba:	4619      	mov	r1, r3
 80096bc:	68fb      	ldr	r3, [r7, #12]
 80096be:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80096c0:	461a      	mov	r2, r3
 80096c2:	88fb      	ldrh	r3, [r7, #6]
 80096c4:	f7f9 fe76 	bl	80033b4 <HAL_DMA_Start_IT>
 80096c8:	4603      	mov	r3, r0
 80096ca:	2b00      	cmp	r3, #0
 80096cc:	d009      	beq.n	80096e2 <UART_Start_Receive_DMA+0x86>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 80096ce:	68fb      	ldr	r3, [r7, #12]
 80096d0:	2210      	movs	r2, #16
 80096d2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 80096d6:	68fb      	ldr	r3, [r7, #12]
 80096d8:	2220      	movs	r2, #32
 80096da:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      return HAL_ERROR;
 80096de:	2301      	movs	r3, #1
 80096e0:	e051      	b.n	8009786 <UART_Start_Receive_DMA+0x12a>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 80096e2:	68fb      	ldr	r3, [r7, #12]
 80096e4:	691b      	ldr	r3, [r3, #16]
 80096e6:	2b00      	cmp	r3, #0
 80096e8:	d018      	beq.n	800971c <UART_Start_Receive_DMA+0xc0>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80096ea:	68fb      	ldr	r3, [r7, #12]
 80096ec:	681b      	ldr	r3, [r3, #0]
 80096ee:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80096f0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80096f2:	e853 3f00 	ldrex	r3, [r3]
 80096f6:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80096f8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80096fa:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80096fe:	657b      	str	r3, [r7, #84]	@ 0x54
 8009700:	68fb      	ldr	r3, [r7, #12]
 8009702:	681b      	ldr	r3, [r3, #0]
 8009704:	461a      	mov	r2, r3
 8009706:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009708:	64bb      	str	r3, [r7, #72]	@ 0x48
 800970a:	647a      	str	r2, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800970c:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800970e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8009710:	e841 2300 	strex	r3, r2, [r1]
 8009714:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 8009716:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009718:	2b00      	cmp	r3, #0
 800971a:	d1e6      	bne.n	80096ea <UART_Start_Receive_DMA+0x8e>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800971c:	68fb      	ldr	r3, [r7, #12]
 800971e:	681b      	ldr	r3, [r3, #0]
 8009720:	3308      	adds	r3, #8
 8009722:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009724:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009726:	e853 3f00 	ldrex	r3, [r3]
 800972a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800972c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800972e:	f043 0301 	orr.w	r3, r3, #1
 8009732:	653b      	str	r3, [r7, #80]	@ 0x50
 8009734:	68fb      	ldr	r3, [r7, #12]
 8009736:	681b      	ldr	r3, [r3, #0]
 8009738:	3308      	adds	r3, #8
 800973a:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800973c:	637a      	str	r2, [r7, #52]	@ 0x34
 800973e:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009740:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8009742:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8009744:	e841 2300 	strex	r3, r2, [r1]
 8009748:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 800974a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800974c:	2b00      	cmp	r3, #0
 800974e:	d1e5      	bne.n	800971c <UART_Start_Receive_DMA+0xc0>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009750:	68fb      	ldr	r3, [r7, #12]
 8009752:	681b      	ldr	r3, [r3, #0]
 8009754:	3308      	adds	r3, #8
 8009756:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009758:	697b      	ldr	r3, [r7, #20]
 800975a:	e853 3f00 	ldrex	r3, [r3]
 800975e:	613b      	str	r3, [r7, #16]
   return(result);
 8009760:	693b      	ldr	r3, [r7, #16]
 8009762:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009766:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8009768:	68fb      	ldr	r3, [r7, #12]
 800976a:	681b      	ldr	r3, [r3, #0]
 800976c:	3308      	adds	r3, #8
 800976e:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8009770:	623a      	str	r2, [r7, #32]
 8009772:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009774:	69f9      	ldr	r1, [r7, #28]
 8009776:	6a3a      	ldr	r2, [r7, #32]
 8009778:	e841 2300 	strex	r3, r2, [r1]
 800977c:	61bb      	str	r3, [r7, #24]
   return(result);
 800977e:	69bb      	ldr	r3, [r7, #24]
 8009780:	2b00      	cmp	r3, #0
 8009782:	d1e5      	bne.n	8009750 <UART_Start_Receive_DMA+0xf4>

  return HAL_OK;
 8009784:	2300      	movs	r3, #0
}
 8009786:	4618      	mov	r0, r3
 8009788:	3758      	adds	r7, #88	@ 0x58
 800978a:	46bd      	mov	sp, r7
 800978c:	bd80      	pop	{r7, pc}
 800978e:	bf00      	nop
 8009790:	08009967 	.word	0x08009967
 8009794:	08009a93 	.word	0x08009a93
 8009798:	08009ad1 	.word	0x08009ad1

0800979c <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800979c:	b480      	push	{r7}
 800979e:	b089      	sub	sp, #36	@ 0x24
 80097a0:	af00      	add	r7, sp, #0
 80097a2:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
#else
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 80097a4:	687b      	ldr	r3, [r7, #4]
 80097a6:	681b      	ldr	r3, [r3, #0]
 80097a8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80097aa:	68fb      	ldr	r3, [r7, #12]
 80097ac:	e853 3f00 	ldrex	r3, [r3]
 80097b0:	60bb      	str	r3, [r7, #8]
   return(result);
 80097b2:	68bb      	ldr	r3, [r7, #8]
 80097b4:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 80097b8:	61fb      	str	r3, [r7, #28]
 80097ba:	687b      	ldr	r3, [r7, #4]
 80097bc:	681b      	ldr	r3, [r3, #0]
 80097be:	461a      	mov	r2, r3
 80097c0:	69fb      	ldr	r3, [r7, #28]
 80097c2:	61bb      	str	r3, [r7, #24]
 80097c4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80097c6:	6979      	ldr	r1, [r7, #20]
 80097c8:	69ba      	ldr	r2, [r7, #24]
 80097ca:	e841 2300 	strex	r3, r2, [r1]
 80097ce:	613b      	str	r3, [r7, #16]
   return(result);
 80097d0:	693b      	ldr	r3, [r7, #16]
 80097d2:	2b00      	cmp	r3, #0
 80097d4:	d1e6      	bne.n	80097a4 <UART_EndTxTransfer+0x8>
#endif /* USART_CR1_FIFOEN */

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80097d6:	687b      	ldr	r3, [r7, #4]
 80097d8:	2220      	movs	r2, #32
 80097da:	67da      	str	r2, [r3, #124]	@ 0x7c
}
 80097dc:	bf00      	nop
 80097de:	3724      	adds	r7, #36	@ 0x24
 80097e0:	46bd      	mov	sp, r7
 80097e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097e6:	4770      	bx	lr

080097e8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80097e8:	b480      	push	{r7}
 80097ea:	b095      	sub	sp, #84	@ 0x54
 80097ec:	af00      	add	r7, sp, #0
 80097ee:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80097f0:	687b      	ldr	r3, [r7, #4]
 80097f2:	681b      	ldr	r3, [r3, #0]
 80097f4:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80097f6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80097f8:	e853 3f00 	ldrex	r3, [r3]
 80097fc:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80097fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009800:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8009804:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8009806:	687b      	ldr	r3, [r7, #4]
 8009808:	681b      	ldr	r3, [r3, #0]
 800980a:	461a      	mov	r2, r3
 800980c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800980e:	643b      	str	r3, [r7, #64]	@ 0x40
 8009810:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009812:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8009814:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8009816:	e841 2300 	strex	r3, r2, [r1]
 800981a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800981c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800981e:	2b00      	cmp	r3, #0
 8009820:	d1e6      	bne.n	80097f0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009822:	687b      	ldr	r3, [r7, #4]
 8009824:	681b      	ldr	r3, [r3, #0]
 8009826:	3308      	adds	r3, #8
 8009828:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800982a:	6a3b      	ldr	r3, [r7, #32]
 800982c:	e853 3f00 	ldrex	r3, [r3]
 8009830:	61fb      	str	r3, [r7, #28]
   return(result);
 8009832:	69fb      	ldr	r3, [r7, #28]
 8009834:	f023 0301 	bic.w	r3, r3, #1
 8009838:	64bb      	str	r3, [r7, #72]	@ 0x48
 800983a:	687b      	ldr	r3, [r7, #4]
 800983c:	681b      	ldr	r3, [r3, #0]
 800983e:	3308      	adds	r3, #8
 8009840:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8009842:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8009844:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009846:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8009848:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800984a:	e841 2300 	strex	r3, r2, [r1]
 800984e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8009850:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009852:	2b00      	cmp	r3, #0
 8009854:	d1e5      	bne.n	8009822 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009856:	687b      	ldr	r3, [r7, #4]
 8009858:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800985a:	2b01      	cmp	r3, #1
 800985c:	d118      	bne.n	8009890 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800985e:	687b      	ldr	r3, [r7, #4]
 8009860:	681b      	ldr	r3, [r3, #0]
 8009862:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009864:	68fb      	ldr	r3, [r7, #12]
 8009866:	e853 3f00 	ldrex	r3, [r3]
 800986a:	60bb      	str	r3, [r7, #8]
   return(result);
 800986c:	68bb      	ldr	r3, [r7, #8]
 800986e:	f023 0310 	bic.w	r3, r3, #16
 8009872:	647b      	str	r3, [r7, #68]	@ 0x44
 8009874:	687b      	ldr	r3, [r7, #4]
 8009876:	681b      	ldr	r3, [r3, #0]
 8009878:	461a      	mov	r2, r3
 800987a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800987c:	61bb      	str	r3, [r7, #24]
 800987e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009880:	6979      	ldr	r1, [r7, #20]
 8009882:	69ba      	ldr	r2, [r7, #24]
 8009884:	e841 2300 	strex	r3, r2, [r1]
 8009888:	613b      	str	r3, [r7, #16]
   return(result);
 800988a:	693b      	ldr	r3, [r7, #16]
 800988c:	2b00      	cmp	r3, #0
 800988e:	d1e6      	bne.n	800985e <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8009890:	687b      	ldr	r3, [r7, #4]
 8009892:	2220      	movs	r2, #32
 8009894:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009898:	687b      	ldr	r3, [r7, #4]
 800989a:	2200      	movs	r2, #0
 800989c:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800989e:	687b      	ldr	r3, [r7, #4]
 80098a0:	2200      	movs	r2, #0
 80098a2:	669a      	str	r2, [r3, #104]	@ 0x68
}
 80098a4:	bf00      	nop
 80098a6:	3754      	adds	r7, #84	@ 0x54
 80098a8:	46bd      	mov	sp, r7
 80098aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098ae:	4770      	bx	lr

080098b0 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 80098b0:	b580      	push	{r7, lr}
 80098b2:	b090      	sub	sp, #64	@ 0x40
 80098b4:	af00      	add	r7, sp, #0
 80098b6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80098b8:	687b      	ldr	r3, [r7, #4]
 80098ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80098bc:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 80098be:	687b      	ldr	r3, [r7, #4]
 80098c0:	681b      	ldr	r3, [r3, #0]
 80098c2:	681b      	ldr	r3, [r3, #0]
 80098c4:	f003 0320 	and.w	r3, r3, #32
 80098c8:	2b00      	cmp	r3, #0
 80098ca:	d137      	bne.n	800993c <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0U;
 80098cc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80098ce:	2200      	movs	r2, #0
 80098d0:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80098d4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80098d6:	681b      	ldr	r3, [r3, #0]
 80098d8:	3308      	adds	r3, #8
 80098da:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80098dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80098de:	e853 3f00 	ldrex	r3, [r3]
 80098e2:	623b      	str	r3, [r7, #32]
   return(result);
 80098e4:	6a3b      	ldr	r3, [r7, #32]
 80098e6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80098ea:	63bb      	str	r3, [r7, #56]	@ 0x38
 80098ec:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80098ee:	681b      	ldr	r3, [r3, #0]
 80098f0:	3308      	adds	r3, #8
 80098f2:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80098f4:	633a      	str	r2, [r7, #48]	@ 0x30
 80098f6:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80098f8:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80098fa:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80098fc:	e841 2300 	strex	r3, r2, [r1]
 8009900:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8009902:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009904:	2b00      	cmp	r3, #0
 8009906:	d1e5      	bne.n	80098d4 <UART_DMATransmitCplt+0x24>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8009908:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800990a:	681b      	ldr	r3, [r3, #0]
 800990c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800990e:	693b      	ldr	r3, [r7, #16]
 8009910:	e853 3f00 	ldrex	r3, [r3]
 8009914:	60fb      	str	r3, [r7, #12]
   return(result);
 8009916:	68fb      	ldr	r3, [r7, #12]
 8009918:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800991c:	637b      	str	r3, [r7, #52]	@ 0x34
 800991e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009920:	681b      	ldr	r3, [r3, #0]
 8009922:	461a      	mov	r2, r3
 8009924:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009926:	61fb      	str	r3, [r7, #28]
 8009928:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800992a:	69b9      	ldr	r1, [r7, #24]
 800992c:	69fa      	ldr	r2, [r7, #28]
 800992e:	e841 2300 	strex	r3, r2, [r1]
 8009932:	617b      	str	r3, [r7, #20]
   return(result);
 8009934:	697b      	ldr	r3, [r7, #20]
 8009936:	2b00      	cmp	r3, #0
 8009938:	d1e6      	bne.n	8009908 <UART_DMATransmitCplt+0x58>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800993a:	e002      	b.n	8009942 <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 800993c:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 800993e:	f7ff fa71 	bl	8008e24 <HAL_UART_TxCpltCallback>
}
 8009942:	bf00      	nop
 8009944:	3740      	adds	r7, #64	@ 0x40
 8009946:	46bd      	mov	sp, r7
 8009948:	bd80      	pop	{r7, pc}

0800994a <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800994a:	b580      	push	{r7, lr}
 800994c:	b084      	sub	sp, #16
 800994e:	af00      	add	r7, sp, #0
 8009950:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8009952:	687b      	ldr	r3, [r7, #4]
 8009954:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009956:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8009958:	68f8      	ldr	r0, [r7, #12]
 800995a:	f7ff fa6d 	bl	8008e38 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800995e:	bf00      	nop
 8009960:	3710      	adds	r7, #16
 8009962:	46bd      	mov	sp, r7
 8009964:	bd80      	pop	{r7, pc}

08009966 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8009966:	b580      	push	{r7, lr}
 8009968:	b09c      	sub	sp, #112	@ 0x70
 800996a:	af00      	add	r7, sp, #0
 800996c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800996e:	687b      	ldr	r3, [r7, #4]
 8009970:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009972:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8009974:	687b      	ldr	r3, [r7, #4]
 8009976:	681b      	ldr	r3, [r3, #0]
 8009978:	681b      	ldr	r3, [r3, #0]
 800997a:	f003 0320 	and.w	r3, r3, #32
 800997e:	2b00      	cmp	r3, #0
 8009980:	d171      	bne.n	8009a66 <UART_DMAReceiveCplt+0x100>
  {
    huart->RxXferCount = 0U;
 8009982:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009984:	2200      	movs	r2, #0
 8009986:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800998a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800998c:	681b      	ldr	r3, [r3, #0]
 800998e:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009990:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009992:	e853 3f00 	ldrex	r3, [r3]
 8009996:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8009998:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800999a:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800999e:	66bb      	str	r3, [r7, #104]	@ 0x68
 80099a0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80099a2:	681b      	ldr	r3, [r3, #0]
 80099a4:	461a      	mov	r2, r3
 80099a6:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80099a8:	65bb      	str	r3, [r7, #88]	@ 0x58
 80099aa:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80099ac:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80099ae:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80099b0:	e841 2300 	strex	r3, r2, [r1]
 80099b4:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80099b6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80099b8:	2b00      	cmp	r3, #0
 80099ba:	d1e6      	bne.n	800998a <UART_DMAReceiveCplt+0x24>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80099bc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80099be:	681b      	ldr	r3, [r3, #0]
 80099c0:	3308      	adds	r3, #8
 80099c2:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80099c4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80099c6:	e853 3f00 	ldrex	r3, [r3]
 80099ca:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80099cc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80099ce:	f023 0301 	bic.w	r3, r3, #1
 80099d2:	667b      	str	r3, [r7, #100]	@ 0x64
 80099d4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80099d6:	681b      	ldr	r3, [r3, #0]
 80099d8:	3308      	adds	r3, #8
 80099da:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 80099dc:	647a      	str	r2, [r7, #68]	@ 0x44
 80099de:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80099e0:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80099e2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80099e4:	e841 2300 	strex	r3, r2, [r1]
 80099e8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80099ea:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80099ec:	2b00      	cmp	r3, #0
 80099ee:	d1e5      	bne.n	80099bc <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80099f0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80099f2:	681b      	ldr	r3, [r3, #0]
 80099f4:	3308      	adds	r3, #8
 80099f6:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80099f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80099fa:	e853 3f00 	ldrex	r3, [r3]
 80099fe:	623b      	str	r3, [r7, #32]
   return(result);
 8009a00:	6a3b      	ldr	r3, [r7, #32]
 8009a02:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009a06:	663b      	str	r3, [r7, #96]	@ 0x60
 8009a08:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009a0a:	681b      	ldr	r3, [r3, #0]
 8009a0c:	3308      	adds	r3, #8
 8009a0e:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8009a10:	633a      	str	r2, [r7, #48]	@ 0x30
 8009a12:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009a14:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8009a16:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009a18:	e841 2300 	strex	r3, r2, [r1]
 8009a1c:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8009a1e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009a20:	2b00      	cmp	r3, #0
 8009a22:	d1e5      	bne.n	80099f0 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8009a24:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009a26:	2220      	movs	r2, #32
 8009a28:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009a2c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009a2e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009a30:	2b01      	cmp	r3, #1
 8009a32:	d118      	bne.n	8009a66 <UART_DMAReceiveCplt+0x100>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009a34:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009a36:	681b      	ldr	r3, [r3, #0]
 8009a38:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009a3a:	693b      	ldr	r3, [r7, #16]
 8009a3c:	e853 3f00 	ldrex	r3, [r3]
 8009a40:	60fb      	str	r3, [r7, #12]
   return(result);
 8009a42:	68fb      	ldr	r3, [r7, #12]
 8009a44:	f023 0310 	bic.w	r3, r3, #16
 8009a48:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8009a4a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009a4c:	681b      	ldr	r3, [r3, #0]
 8009a4e:	461a      	mov	r2, r3
 8009a50:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8009a52:	61fb      	str	r3, [r7, #28]
 8009a54:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009a56:	69b9      	ldr	r1, [r7, #24]
 8009a58:	69fa      	ldr	r2, [r7, #28]
 8009a5a:	e841 2300 	strex	r3, r2, [r1]
 8009a5e:	617b      	str	r3, [r7, #20]
   return(result);
 8009a60:	697b      	ldr	r3, [r7, #20]
 8009a62:	2b00      	cmp	r3, #0
 8009a64:	d1e6      	bne.n	8009a34 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009a66:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009a68:	2200      	movs	r2, #0
 8009a6a:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009a6c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009a6e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009a70:	2b01      	cmp	r3, #1
 8009a72:	d107      	bne.n	8009a84 <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009a74:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009a76:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8009a7a:	4619      	mov	r1, r3
 8009a7c:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8009a7e:	f7ff fa03 	bl	8008e88 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8009a82:	e002      	b.n	8009a8a <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 8009a84:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8009a86:	f7ff f9e1 	bl	8008e4c <HAL_UART_RxCpltCallback>
}
 8009a8a:	bf00      	nop
 8009a8c:	3770      	adds	r7, #112	@ 0x70
 8009a8e:	46bd      	mov	sp, r7
 8009a90:	bd80      	pop	{r7, pc}

08009a92 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8009a92:	b580      	push	{r7, lr}
 8009a94:	b084      	sub	sp, #16
 8009a96:	af00      	add	r7, sp, #0
 8009a98:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8009a9a:	687b      	ldr	r3, [r7, #4]
 8009a9c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009a9e:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8009aa0:	68fb      	ldr	r3, [r7, #12]
 8009aa2:	2201      	movs	r2, #1
 8009aa4:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009aa6:	68fb      	ldr	r3, [r7, #12]
 8009aa8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009aaa:	2b01      	cmp	r3, #1
 8009aac:	d109      	bne.n	8009ac2 <UART_DMARxHalfCplt+0x30>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8009aae:	68fb      	ldr	r3, [r7, #12]
 8009ab0:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8009ab4:	085b      	lsrs	r3, r3, #1
 8009ab6:	b29b      	uxth	r3, r3
 8009ab8:	4619      	mov	r1, r3
 8009aba:	68f8      	ldr	r0, [r7, #12]
 8009abc:	f7ff f9e4 	bl	8008e88 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8009ac0:	e002      	b.n	8009ac8 <UART_DMARxHalfCplt+0x36>
    HAL_UART_RxHalfCpltCallback(huart);
 8009ac2:	68f8      	ldr	r0, [r7, #12]
 8009ac4:	f7ff f9cc 	bl	8008e60 <HAL_UART_RxHalfCpltCallback>
}
 8009ac8:	bf00      	nop
 8009aca:	3710      	adds	r7, #16
 8009acc:	46bd      	mov	sp, r7
 8009ace:	bd80      	pop	{r7, pc}

08009ad0 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8009ad0:	b580      	push	{r7, lr}
 8009ad2:	b086      	sub	sp, #24
 8009ad4:	af00      	add	r7, sp, #0
 8009ad6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8009ad8:	687b      	ldr	r3, [r7, #4]
 8009ada:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009adc:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8009ade:	697b      	ldr	r3, [r7, #20]
 8009ae0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8009ae2:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8009ae4:	697b      	ldr	r3, [r7, #20]
 8009ae6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009aea:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8009aec:	697b      	ldr	r3, [r7, #20]
 8009aee:	681b      	ldr	r3, [r3, #0]
 8009af0:	689b      	ldr	r3, [r3, #8]
 8009af2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009af6:	2b80      	cmp	r3, #128	@ 0x80
 8009af8:	d109      	bne.n	8009b0e <UART_DMAError+0x3e>
 8009afa:	693b      	ldr	r3, [r7, #16]
 8009afc:	2b21      	cmp	r3, #33	@ 0x21
 8009afe:	d106      	bne.n	8009b0e <UART_DMAError+0x3e>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8009b00:	697b      	ldr	r3, [r7, #20]
 8009b02:	2200      	movs	r2, #0
 8009b04:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    UART_EndTxTransfer(huart);
 8009b08:	6978      	ldr	r0, [r7, #20]
 8009b0a:	f7ff fe47 	bl	800979c <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8009b0e:	697b      	ldr	r3, [r7, #20]
 8009b10:	681b      	ldr	r3, [r3, #0]
 8009b12:	689b      	ldr	r3, [r3, #8]
 8009b14:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009b18:	2b40      	cmp	r3, #64	@ 0x40
 8009b1a:	d109      	bne.n	8009b30 <UART_DMAError+0x60>
 8009b1c:	68fb      	ldr	r3, [r7, #12]
 8009b1e:	2b22      	cmp	r3, #34	@ 0x22
 8009b20:	d106      	bne.n	8009b30 <UART_DMAError+0x60>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8009b22:	697b      	ldr	r3, [r7, #20]
 8009b24:	2200      	movs	r2, #0
 8009b26:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
    UART_EndRxTransfer(huart);
 8009b2a:	6978      	ldr	r0, [r7, #20]
 8009b2c:	f7ff fe5c 	bl	80097e8 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8009b30:	697b      	ldr	r3, [r7, #20]
 8009b32:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8009b36:	f043 0210 	orr.w	r2, r3, #16
 8009b3a:	697b      	ldr	r3, [r7, #20]
 8009b3c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8009b40:	6978      	ldr	r0, [r7, #20]
 8009b42:	f7ff f997 	bl	8008e74 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009b46:	bf00      	nop
 8009b48:	3718      	adds	r7, #24
 8009b4a:	46bd      	mov	sp, r7
 8009b4c:	bd80      	pop	{r7, pc}

08009b4e <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8009b4e:	b580      	push	{r7, lr}
 8009b50:	b084      	sub	sp, #16
 8009b52:	af00      	add	r7, sp, #0
 8009b54:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8009b56:	687b      	ldr	r3, [r7, #4]
 8009b58:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009b5a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8009b5c:	68fb      	ldr	r3, [r7, #12]
 8009b5e:	2200      	movs	r2, #0
 8009b60:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->TxXferCount = 0U;
 8009b64:	68fb      	ldr	r3, [r7, #12]
 8009b66:	2200      	movs	r2, #0
 8009b68:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8009b6c:	68f8      	ldr	r0, [r7, #12]
 8009b6e:	f7ff f981 	bl	8008e74 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009b72:	bf00      	nop
 8009b74:	3710      	adds	r7, #16
 8009b76:	46bd      	mov	sp, r7
 8009b78:	bd80      	pop	{r7, pc}

08009b7a <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8009b7a:	b580      	push	{r7, lr}
 8009b7c:	b088      	sub	sp, #32
 8009b7e:	af00      	add	r7, sp, #0
 8009b80:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8009b82:	687b      	ldr	r3, [r7, #4]
 8009b84:	681b      	ldr	r3, [r3, #0]
 8009b86:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009b88:	68fb      	ldr	r3, [r7, #12]
 8009b8a:	e853 3f00 	ldrex	r3, [r3]
 8009b8e:	60bb      	str	r3, [r7, #8]
   return(result);
 8009b90:	68bb      	ldr	r3, [r7, #8]
 8009b92:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009b96:	61fb      	str	r3, [r7, #28]
 8009b98:	687b      	ldr	r3, [r7, #4]
 8009b9a:	681b      	ldr	r3, [r3, #0]
 8009b9c:	461a      	mov	r2, r3
 8009b9e:	69fb      	ldr	r3, [r7, #28]
 8009ba0:	61bb      	str	r3, [r7, #24]
 8009ba2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009ba4:	6979      	ldr	r1, [r7, #20]
 8009ba6:	69ba      	ldr	r2, [r7, #24]
 8009ba8:	e841 2300 	strex	r3, r2, [r1]
 8009bac:	613b      	str	r3, [r7, #16]
   return(result);
 8009bae:	693b      	ldr	r3, [r7, #16]
 8009bb0:	2b00      	cmp	r3, #0
 8009bb2:	d1e6      	bne.n	8009b82 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8009bb4:	687b      	ldr	r3, [r7, #4]
 8009bb6:	2220      	movs	r2, #32
 8009bb8:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8009bba:	687b      	ldr	r3, [r7, #4]
 8009bbc:	2200      	movs	r2, #0
 8009bbe:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8009bc0:	6878      	ldr	r0, [r7, #4]
 8009bc2:	f7ff f92f 	bl	8008e24 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009bc6:	bf00      	nop
 8009bc8:	3720      	adds	r7, #32
 8009bca:	46bd      	mov	sp, r7
 8009bcc:	bd80      	pop	{r7, pc}

08009bce <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8009bce:	b480      	push	{r7}
 8009bd0:	b083      	sub	sp, #12
 8009bd2:	af00      	add	r7, sp, #0
 8009bd4:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8009bd6:	bf00      	nop
 8009bd8:	370c      	adds	r7, #12
 8009bda:	46bd      	mov	sp, r7
 8009bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009be0:	4770      	bx	lr

08009be2 <BNO055_Init>:
 */

#include "BNO055.h"

HAL_StatusTypeDef BNO055_Init(BNO055_Structure *bno, I2C_HandleTypeDef *hi2cx, uint8_t addr, OPRMode mode)
{
 8009be2:	b580      	push	{r7, lr}
 8009be4:	b08a      	sub	sp, #40	@ 0x28
 8009be6:	af04      	add	r7, sp, #16
 8009be8:	60f8      	str	r0, [r7, #12]
 8009bea:	60b9      	str	r1, [r7, #8]
 8009bec:	4611      	mov	r1, r2
 8009bee:	461a      	mov	r2, r3
 8009bf0:	460b      	mov	r3, r1
 8009bf2:	71fb      	strb	r3, [r7, #7]
 8009bf4:	4613      	mov	r3, r2
 8009bf6:	71bb      	strb	r3, [r7, #6]
	uint8_t txbuffer;
	uint8_t rxbuffer;

	bno->hi2cx = hi2cx;
 8009bf8:	68fb      	ldr	r3, [r7, #12]
 8009bfa:	68ba      	ldr	r2, [r7, #8]
 8009bfc:	601a      	str	r2, [r3, #0]
	bno->address = BNO055_ADD_H;
 8009bfe:	68fb      	ldr	r3, [r7, #12]
 8009c00:	2252      	movs	r2, #82	@ 0x52
 8009c02:	711a      	strb	r2, [r3, #4]
	if (addr == 0) bno->address = BNO055_ADD_L;
 8009c04:	79fb      	ldrb	r3, [r7, #7]
 8009c06:	2b00      	cmp	r3, #0
 8009c08:	d102      	bne.n	8009c10 <BNO055_Init+0x2e>
 8009c0a:	68fb      	ldr	r3, [r7, #12]
 8009c0c:	2250      	movs	r2, #80	@ 0x50
 8009c0e:	711a      	strb	r2, [r3, #4]

	HAL_I2C_Mem_Read(bno->hi2cx, bno->address, CHIP_ID, 1, &rxbuffer, 1, 10);
 8009c10:	68fb      	ldr	r3, [r7, #12]
 8009c12:	6818      	ldr	r0, [r3, #0]
 8009c14:	68fb      	ldr	r3, [r7, #12]
 8009c16:	791b      	ldrb	r3, [r3, #4]
 8009c18:	4619      	mov	r1, r3
 8009c1a:	230a      	movs	r3, #10
 8009c1c:	9302      	str	r3, [sp, #8]
 8009c1e:	2301      	movs	r3, #1
 8009c20:	9301      	str	r3, [sp, #4]
 8009c22:	f107 0316 	add.w	r3, r7, #22
 8009c26:	9300      	str	r3, [sp, #0]
 8009c28:	2301      	movs	r3, #1
 8009c2a:	2200      	movs	r2, #0
 8009c2c:	f7fa f8b4 	bl	8003d98 <HAL_I2C_Mem_Read>
	if (rxbuffer != 0xA0) {
 8009c30:	7dbb      	ldrb	r3, [r7, #22]
 8009c32:	2ba0      	cmp	r3, #160	@ 0xa0
 8009c34:	d018      	beq.n	8009c68 <BNO055_Init+0x86>
		HAL_Delay(1000);
 8009c36:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8009c3a:	f7f9 f9fd 	bl	8003038 <HAL_Delay>
		HAL_I2C_Mem_Read(bno->hi2cx, bno->address, CHIP_ID, 1, &rxbuffer, 1, 10);
 8009c3e:	68fb      	ldr	r3, [r7, #12]
 8009c40:	6818      	ldr	r0, [r3, #0]
 8009c42:	68fb      	ldr	r3, [r7, #12]
 8009c44:	791b      	ldrb	r3, [r3, #4]
 8009c46:	4619      	mov	r1, r3
 8009c48:	230a      	movs	r3, #10
 8009c4a:	9302      	str	r3, [sp, #8]
 8009c4c:	2301      	movs	r3, #1
 8009c4e:	9301      	str	r3, [sp, #4]
 8009c50:	f107 0316 	add.w	r3, r7, #22
 8009c54:	9300      	str	r3, [sp, #0]
 8009c56:	2301      	movs	r3, #1
 8009c58:	2200      	movs	r2, #0
 8009c5a:	f7fa f89d 	bl	8003d98 <HAL_I2C_Mem_Read>
		if (rxbuffer != 0xA0) return HAL_ERROR;
 8009c5e:	7dbb      	ldrb	r3, [r7, #22]
 8009c60:	2ba0      	cmp	r3, #160	@ 0xa0
 8009c62:	d001      	beq.n	8009c68 <BNO055_Init+0x86>
 8009c64:	2301      	movs	r3, #1
 8009c66:	e099      	b.n	8009d9c <BNO055_Init+0x1ba>
	}

	txbuffer = CONFIGMODE;
 8009c68:	2300      	movs	r3, #0
 8009c6a:	75fb      	strb	r3, [r7, #23]
	HAL_I2C_Mem_Write(bno->hi2cx, bno->address, OPR_MODE, 1, &txbuffer, 1, 10);
 8009c6c:	68fb      	ldr	r3, [r7, #12]
 8009c6e:	6818      	ldr	r0, [r3, #0]
 8009c70:	68fb      	ldr	r3, [r7, #12]
 8009c72:	791b      	ldrb	r3, [r3, #4]
 8009c74:	4619      	mov	r1, r3
 8009c76:	230a      	movs	r3, #10
 8009c78:	9302      	str	r3, [sp, #8]
 8009c7a:	2301      	movs	r3, #1
 8009c7c:	9301      	str	r3, [sp, #4]
 8009c7e:	f107 0317 	add.w	r3, r7, #23
 8009c82:	9300      	str	r3, [sp, #0]
 8009c84:	2301      	movs	r3, #1
 8009c86:	223d      	movs	r2, #61	@ 0x3d
 8009c88:	f7f9 ff72 	bl	8003b70 <HAL_I2C_Mem_Write>
	HAL_Delay(10);
 8009c8c:	200a      	movs	r0, #10
 8009c8e:	f7f9 f9d3 	bl	8003038 <HAL_Delay>

	txbuffer = 0x20;
 8009c92:	2320      	movs	r3, #32
 8009c94:	75fb      	strb	r3, [r7, #23]
	HAL_I2C_Mem_Write(bno->hi2cx, bno->address, SYS_TRIGGER, 1, &txbuffer, 1, 10);
 8009c96:	68fb      	ldr	r3, [r7, #12]
 8009c98:	6818      	ldr	r0, [r3, #0]
 8009c9a:	68fb      	ldr	r3, [r7, #12]
 8009c9c:	791b      	ldrb	r3, [r3, #4]
 8009c9e:	4619      	mov	r1, r3
 8009ca0:	230a      	movs	r3, #10
 8009ca2:	9302      	str	r3, [sp, #8]
 8009ca4:	2301      	movs	r3, #1
 8009ca6:	9301      	str	r3, [sp, #4]
 8009ca8:	f107 0317 	add.w	r3, r7, #23
 8009cac:	9300      	str	r3, [sp, #0]
 8009cae:	2301      	movs	r3, #1
 8009cb0:	223f      	movs	r2, #63	@ 0x3f
 8009cb2:	f7f9 ff5d 	bl	8003b70 <HAL_I2C_Mem_Write>
	HAL_Delay(30);
 8009cb6:	201e      	movs	r0, #30
 8009cb8:	f7f9 f9be 	bl	8003038 <HAL_Delay>

	do {
		HAL_I2C_Mem_Read(bno->hi2cx, bno->address, CHIP_ID, 1, &rxbuffer, 1, 10);
 8009cbc:	68fb      	ldr	r3, [r7, #12]
 8009cbe:	6818      	ldr	r0, [r3, #0]
 8009cc0:	68fb      	ldr	r3, [r7, #12]
 8009cc2:	791b      	ldrb	r3, [r3, #4]
 8009cc4:	4619      	mov	r1, r3
 8009cc6:	230a      	movs	r3, #10
 8009cc8:	9302      	str	r3, [sp, #8]
 8009cca:	2301      	movs	r3, #1
 8009ccc:	9301      	str	r3, [sp, #4]
 8009cce:	f107 0316 	add.w	r3, r7, #22
 8009cd2:	9300      	str	r3, [sp, #0]
 8009cd4:	2301      	movs	r3, #1
 8009cd6:	2200      	movs	r2, #0
 8009cd8:	f7fa f85e 	bl	8003d98 <HAL_I2C_Mem_Read>
	} while (rxbuffer != 0xA0);
 8009cdc:	7dbb      	ldrb	r3, [r7, #22]
 8009cde:	2ba0      	cmp	r3, #160	@ 0xa0
 8009ce0:	d1ec      	bne.n	8009cbc <BNO055_Init+0xda>
	HAL_Delay(50);
 8009ce2:	2032      	movs	r0, #50	@ 0x32
 8009ce4:	f7f9 f9a8 	bl	8003038 <HAL_Delay>

	txbuffer = Normal_Mode;
 8009ce8:	2300      	movs	r3, #0
 8009cea:	75fb      	strb	r3, [r7, #23]
	HAL_I2C_Mem_Write(bno->hi2cx, bno->address, PWR_MODE, 1, &txbuffer, 1, 10);
 8009cec:	68fb      	ldr	r3, [r7, #12]
 8009cee:	6818      	ldr	r0, [r3, #0]
 8009cf0:	68fb      	ldr	r3, [r7, #12]
 8009cf2:	791b      	ldrb	r3, [r3, #4]
 8009cf4:	4619      	mov	r1, r3
 8009cf6:	230a      	movs	r3, #10
 8009cf8:	9302      	str	r3, [sp, #8]
 8009cfa:	2301      	movs	r3, #1
 8009cfc:	9301      	str	r3, [sp, #4]
 8009cfe:	f107 0317 	add.w	r3, r7, #23
 8009d02:	9300      	str	r3, [sp, #0]
 8009d04:	2301      	movs	r3, #1
 8009d06:	223e      	movs	r2, #62	@ 0x3e
 8009d08:	f7f9 ff32 	bl	8003b70 <HAL_I2C_Mem_Write>
	HAL_Delay(10);
 8009d0c:	200a      	movs	r0, #10
 8009d0e:	f7f9 f993 	bl	8003038 <HAL_Delay>

	txbuffer = Page_ID_00;
 8009d12:	2300      	movs	r3, #0
 8009d14:	75fb      	strb	r3, [r7, #23]
	HAL_I2C_Mem_Write(bno->hi2cx, bno->address, PAGE_ID, 1, &txbuffer, 1, 10);
 8009d16:	68fb      	ldr	r3, [r7, #12]
 8009d18:	6818      	ldr	r0, [r3, #0]
 8009d1a:	68fb      	ldr	r3, [r7, #12]
 8009d1c:	791b      	ldrb	r3, [r3, #4]
 8009d1e:	4619      	mov	r1, r3
 8009d20:	230a      	movs	r3, #10
 8009d22:	9302      	str	r3, [sp, #8]
 8009d24:	2301      	movs	r3, #1
 8009d26:	9301      	str	r3, [sp, #4]
 8009d28:	f107 0317 	add.w	r3, r7, #23
 8009d2c:	9300      	str	r3, [sp, #0]
 8009d2e:	2301      	movs	r3, #1
 8009d30:	2207      	movs	r2, #7
 8009d32:	f7f9 ff1d 	bl	8003b70 <HAL_I2C_Mem_Write>
	HAL_Delay(10);
 8009d36:	200a      	movs	r0, #10
 8009d38:	f7f9 f97e 	bl	8003038 <HAL_Delay>

	txbuffer = 0x00;
 8009d3c:	2300      	movs	r3, #0
 8009d3e:	75fb      	strb	r3, [r7, #23]
	HAL_I2C_Mem_Write(bno->hi2cx, bno->address, SYS_TRIGGER, 1, &txbuffer, 1, 10);
 8009d40:	68fb      	ldr	r3, [r7, #12]
 8009d42:	6818      	ldr	r0, [r3, #0]
 8009d44:	68fb      	ldr	r3, [r7, #12]
 8009d46:	791b      	ldrb	r3, [r3, #4]
 8009d48:	4619      	mov	r1, r3
 8009d4a:	230a      	movs	r3, #10
 8009d4c:	9302      	str	r3, [sp, #8]
 8009d4e:	2301      	movs	r3, #1
 8009d50:	9301      	str	r3, [sp, #4]
 8009d52:	f107 0317 	add.w	r3, r7, #23
 8009d56:	9300      	str	r3, [sp, #0]
 8009d58:	2301      	movs	r3, #1
 8009d5a:	223f      	movs	r2, #63	@ 0x3f
 8009d5c:	f7f9 ff08 	bl	8003b70 <HAL_I2C_Mem_Write>
	HAL_Delay(10);
 8009d60:	200a      	movs	r0, #10
 8009d62:	f7f9 f969 	bl	8003038 <HAL_Delay>

	bno->mode = mode;
 8009d66:	68fb      	ldr	r3, [r7, #12]
 8009d68:	79ba      	ldrb	r2, [r7, #6]
 8009d6a:	715a      	strb	r2, [r3, #5]
	HAL_I2C_Mem_Write(bno->hi2cx, bno->address, OPR_MODE, 1, &bno->mode, 1, 10);
 8009d6c:	68fb      	ldr	r3, [r7, #12]
 8009d6e:	6818      	ldr	r0, [r3, #0]
 8009d70:	68fb      	ldr	r3, [r7, #12]
 8009d72:	791b      	ldrb	r3, [r3, #4]
 8009d74:	4619      	mov	r1, r3
 8009d76:	68fb      	ldr	r3, [r7, #12]
 8009d78:	3305      	adds	r3, #5
 8009d7a:	220a      	movs	r2, #10
 8009d7c:	9202      	str	r2, [sp, #8]
 8009d7e:	2201      	movs	r2, #1
 8009d80:	9201      	str	r2, [sp, #4]
 8009d82:	9300      	str	r3, [sp, #0]
 8009d84:	2301      	movs	r3, #1
 8009d86:	223d      	movs	r2, #61	@ 0x3d
 8009d88:	f7f9 fef2 	bl	8003b70 <HAL_I2C_Mem_Write>
	HAL_Delay(1000);
 8009d8c:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8009d90:	f7f9 f952 	bl	8003038 <HAL_Delay>

	bno->flag = HAL_OK;
 8009d94:	68fb      	ldr	r3, [r7, #12]
 8009d96:	2200      	movs	r2, #0
 8009d98:	719a      	strb	r2, [r3, #6]

	return HAL_OK;
 8009d9a:	2300      	movs	r3, #0
}
 8009d9c:	4618      	mov	r0, r3
 8009d9e:	3718      	adds	r7, #24
 8009da0:	46bd      	mov	sp, r7
 8009da2:	bd80      	pop	{r7, pc}

08009da4 <BNO055_Read_DMA>:
	}

}

void BNO055_Read_DMA(BNO055_Structure *bno, uint8_t fast_mode)
{
 8009da4:	b580      	push	{r7, lr}
 8009da6:	b08a      	sub	sp, #40	@ 0x28
 8009da8:	af04      	add	r7, sp, #16
 8009daa:	6078      	str	r0, [r7, #4]
 8009dac:	460b      	mov	r3, r1
 8009dae:	70fb      	strb	r3, [r7, #3]
	uint8_t read_mode;
	HAL_I2C_Mem_Read(bno->hi2cx, bno->address, OPR_MODE, 1, &read_mode, 1, 10);
 8009db0:	687b      	ldr	r3, [r7, #4]
 8009db2:	6818      	ldr	r0, [r3, #0]
 8009db4:	687b      	ldr	r3, [r7, #4]
 8009db6:	791b      	ldrb	r3, [r3, #4]
 8009db8:	4619      	mov	r1, r3
 8009dba:	230a      	movs	r3, #10
 8009dbc:	9302      	str	r3, [sp, #8]
 8009dbe:	2301      	movs	r3, #1
 8009dc0:	9301      	str	r3, [sp, #4]
 8009dc2:	f107 030f 	add.w	r3, r7, #15
 8009dc6:	9300      	str	r3, [sp, #0]
 8009dc8:	2301      	movs	r3, #1
 8009dca:	223d      	movs	r2, #61	@ 0x3d
 8009dcc:	f7f9 ffe4 	bl	8003d98 <HAL_I2C_Mem_Read>
	if (read_mode != bno->mode) {
 8009dd0:	687b      	ldr	r3, [r7, #4]
 8009dd2:	795a      	ldrb	r2, [r3, #5]
 8009dd4:	7bfb      	ldrb	r3, [r7, #15]
 8009dd6:	429a      	cmp	r2, r3
 8009dd8:	d00f      	beq.n	8009dfa <BNO055_Read_DMA+0x56>
		HAL_I2C_Mem_Write(bno->hi2cx, bno->address, OPR_MODE, 1, &bno->mode, 1, 10);
 8009dda:	687b      	ldr	r3, [r7, #4]
 8009ddc:	6818      	ldr	r0, [r3, #0]
 8009dde:	687b      	ldr	r3, [r7, #4]
 8009de0:	791b      	ldrb	r3, [r3, #4]
 8009de2:	4619      	mov	r1, r3
 8009de4:	687b      	ldr	r3, [r7, #4]
 8009de6:	3305      	adds	r3, #5
 8009de8:	220a      	movs	r2, #10
 8009dea:	9202      	str	r2, [sp, #8]
 8009dec:	2201      	movs	r2, #1
 8009dee:	9201      	str	r2, [sp, #4]
 8009df0:	9300      	str	r3, [sp, #0]
 8009df2:	2301      	movs	r3, #1
 8009df4:	223d      	movs	r2, #61	@ 0x3d
 8009df6:	f7f9 febb 	bl	8003b70 <HAL_I2C_Mem_Write>
	}

	const double scale = (1.0 / (1 << 14));
 8009dfa:	f04f 0200 	mov.w	r2, #0
 8009dfe:	4bb8      	ldr	r3, [pc, #736]	@ (800a0e0 <BNO055_Read_DMA+0x33c>)
 8009e00:	e9c7 2304 	strd	r2, r3, [r7, #16]

	bno->accel.x = ((double) bno->DataBuffer[0].i16) / 100.0;
 8009e04:	687b      	ldr	r3, [r7, #4]
 8009e06:	f9b3 30b8 	ldrsh.w	r3, [r3, #184]	@ 0xb8
 8009e0a:	4618      	mov	r0, r3
 8009e0c:	f7f6 fb9a 	bl	8000544 <__aeabi_i2d>
 8009e10:	f04f 0200 	mov.w	r2, #0
 8009e14:	4bb3      	ldr	r3, [pc, #716]	@ (800a0e4 <BNO055_Read_DMA+0x340>)
 8009e16:	f7f6 fd29 	bl	800086c <__aeabi_ddiv>
 8009e1a:	4602      	mov	r2, r0
 8009e1c:	460b      	mov	r3, r1
 8009e1e:	6879      	ldr	r1, [r7, #4]
 8009e20:	e9c1 2302 	strd	r2, r3, [r1, #8]
	bno->accel.y = ((double) bno->DataBuffer[1].i16) / 100.0;
 8009e24:	687b      	ldr	r3, [r7, #4]
 8009e26:	f9b3 30ba 	ldrsh.w	r3, [r3, #186]	@ 0xba
 8009e2a:	4618      	mov	r0, r3
 8009e2c:	f7f6 fb8a 	bl	8000544 <__aeabi_i2d>
 8009e30:	f04f 0200 	mov.w	r2, #0
 8009e34:	4bab      	ldr	r3, [pc, #684]	@ (800a0e4 <BNO055_Read_DMA+0x340>)
 8009e36:	f7f6 fd19 	bl	800086c <__aeabi_ddiv>
 8009e3a:	4602      	mov	r2, r0
 8009e3c:	460b      	mov	r3, r1
 8009e3e:	6879      	ldr	r1, [r7, #4]
 8009e40:	e9c1 2304 	strd	r2, r3, [r1, #16]
	bno->accel.z = ((double) bno->DataBuffer[2].i16) / 100.0;
 8009e44:	687b      	ldr	r3, [r7, #4]
 8009e46:	f9b3 30bc 	ldrsh.w	r3, [r3, #188]	@ 0xbc
 8009e4a:	4618      	mov	r0, r3
 8009e4c:	f7f6 fb7a 	bl	8000544 <__aeabi_i2d>
 8009e50:	f04f 0200 	mov.w	r2, #0
 8009e54:	4ba3      	ldr	r3, [pc, #652]	@ (800a0e4 <BNO055_Read_DMA+0x340>)
 8009e56:	f7f6 fd09 	bl	800086c <__aeabi_ddiv>
 8009e5a:	4602      	mov	r2, r0
 8009e5c:	460b      	mov	r3, r1
 8009e5e:	6879      	ldr	r1, [r7, #4]
 8009e60:	e9c1 2306 	strd	r2, r3, [r1, #24]

	bno->mag.x = ((double) bno->DataBuffer[3].i16) / 16.0;
 8009e64:	687b      	ldr	r3, [r7, #4]
 8009e66:	f9b3 30be 	ldrsh.w	r3, [r3, #190]	@ 0xbe
 8009e6a:	4618      	mov	r0, r3
 8009e6c:	f7f6 fb6a 	bl	8000544 <__aeabi_i2d>
 8009e70:	f04f 0200 	mov.w	r2, #0
 8009e74:	4b9c      	ldr	r3, [pc, #624]	@ (800a0e8 <BNO055_Read_DMA+0x344>)
 8009e76:	f7f6 fcf9 	bl	800086c <__aeabi_ddiv>
 8009e7a:	4602      	mov	r2, r0
 8009e7c:	460b      	mov	r3, r1
 8009e7e:	6879      	ldr	r1, [r7, #4]
 8009e80:	e9c1 2308 	strd	r2, r3, [r1, #32]
	bno->mag.y = ((double) bno->DataBuffer[4].i16) / 16.0;
 8009e84:	687b      	ldr	r3, [r7, #4]
 8009e86:	f9b3 30c0 	ldrsh.w	r3, [r3, #192]	@ 0xc0
 8009e8a:	4618      	mov	r0, r3
 8009e8c:	f7f6 fb5a 	bl	8000544 <__aeabi_i2d>
 8009e90:	f04f 0200 	mov.w	r2, #0
 8009e94:	4b94      	ldr	r3, [pc, #592]	@ (800a0e8 <BNO055_Read_DMA+0x344>)
 8009e96:	f7f6 fce9 	bl	800086c <__aeabi_ddiv>
 8009e9a:	4602      	mov	r2, r0
 8009e9c:	460b      	mov	r3, r1
 8009e9e:	6879      	ldr	r1, [r7, #4]
 8009ea0:	e9c1 230a 	strd	r2, r3, [r1, #40]	@ 0x28
	bno->mag.z = ((double) bno->DataBuffer[5].i16) / 16.0;
 8009ea4:	687b      	ldr	r3, [r7, #4]
 8009ea6:	f9b3 30c2 	ldrsh.w	r3, [r3, #194]	@ 0xc2
 8009eaa:	4618      	mov	r0, r3
 8009eac:	f7f6 fb4a 	bl	8000544 <__aeabi_i2d>
 8009eb0:	f04f 0200 	mov.w	r2, #0
 8009eb4:	4b8c      	ldr	r3, [pc, #560]	@ (800a0e8 <BNO055_Read_DMA+0x344>)
 8009eb6:	f7f6 fcd9 	bl	800086c <__aeabi_ddiv>
 8009eba:	4602      	mov	r2, r0
 8009ebc:	460b      	mov	r3, r1
 8009ebe:	6879      	ldr	r1, [r7, #4]
 8009ec0:	e9c1 230c 	strd	r2, r3, [r1, #48]	@ 0x30

	bno->gyro.x = ((double) bno->DataBuffer[6].i16) / 16.0;
 8009ec4:	687b      	ldr	r3, [r7, #4]
 8009ec6:	f9b3 30c4 	ldrsh.w	r3, [r3, #196]	@ 0xc4
 8009eca:	4618      	mov	r0, r3
 8009ecc:	f7f6 fb3a 	bl	8000544 <__aeabi_i2d>
 8009ed0:	f04f 0200 	mov.w	r2, #0
 8009ed4:	4b84      	ldr	r3, [pc, #528]	@ (800a0e8 <BNO055_Read_DMA+0x344>)
 8009ed6:	f7f6 fcc9 	bl	800086c <__aeabi_ddiv>
 8009eda:	4602      	mov	r2, r0
 8009edc:	460b      	mov	r3, r1
 8009ede:	6879      	ldr	r1, [r7, #4]
 8009ee0:	e9c1 230e 	strd	r2, r3, [r1, #56]	@ 0x38
	bno->gyro.y = ((double) bno->DataBuffer[7].i16) / 16.0;
 8009ee4:	687b      	ldr	r3, [r7, #4]
 8009ee6:	f9b3 30c6 	ldrsh.w	r3, [r3, #198]	@ 0xc6
 8009eea:	4618      	mov	r0, r3
 8009eec:	f7f6 fb2a 	bl	8000544 <__aeabi_i2d>
 8009ef0:	f04f 0200 	mov.w	r2, #0
 8009ef4:	4b7c      	ldr	r3, [pc, #496]	@ (800a0e8 <BNO055_Read_DMA+0x344>)
 8009ef6:	f7f6 fcb9 	bl	800086c <__aeabi_ddiv>
 8009efa:	4602      	mov	r2, r0
 8009efc:	460b      	mov	r3, r1
 8009efe:	6879      	ldr	r1, [r7, #4]
 8009f00:	e9c1 2310 	strd	r2, r3, [r1, #64]	@ 0x40
	bno->gyro.z = ((double) bno->DataBuffer[8].i16) / 16.0;
 8009f04:	687b      	ldr	r3, [r7, #4]
 8009f06:	f9b3 30c8 	ldrsh.w	r3, [r3, #200]	@ 0xc8
 8009f0a:	4618      	mov	r0, r3
 8009f0c:	f7f6 fb1a 	bl	8000544 <__aeabi_i2d>
 8009f10:	f04f 0200 	mov.w	r2, #0
 8009f14:	4b74      	ldr	r3, [pc, #464]	@ (800a0e8 <BNO055_Read_DMA+0x344>)
 8009f16:	f7f6 fca9 	bl	800086c <__aeabi_ddiv>
 8009f1a:	4602      	mov	r2, r0
 8009f1c:	460b      	mov	r3, r1
 8009f1e:	6879      	ldr	r1, [r7, #4]
 8009f20:	e9c1 2312 	strd	r2, r3, [r1, #72]	@ 0x48

	bno->euler.yaw = ((double) bno->DataBuffer[9].i16) / 16.0;
 8009f24:	687b      	ldr	r3, [r7, #4]
 8009f26:	f9b3 30ca 	ldrsh.w	r3, [r3, #202]	@ 0xca
 8009f2a:	4618      	mov	r0, r3
 8009f2c:	f7f6 fb0a 	bl	8000544 <__aeabi_i2d>
 8009f30:	f04f 0200 	mov.w	r2, #0
 8009f34:	4b6c      	ldr	r3, [pc, #432]	@ (800a0e8 <BNO055_Read_DMA+0x344>)
 8009f36:	f7f6 fc99 	bl	800086c <__aeabi_ddiv>
 8009f3a:	4602      	mov	r2, r0
 8009f3c:	460b      	mov	r3, r1
 8009f3e:	6879      	ldr	r1, [r7, #4]
 8009f40:	e9c1 2318 	strd	r2, r3, [r1, #96]	@ 0x60
	bno->euler.roll = ((double) bno->DataBuffer[10].i16) / 16.0;
 8009f44:	687b      	ldr	r3, [r7, #4]
 8009f46:	f9b3 30cc 	ldrsh.w	r3, [r3, #204]	@ 0xcc
 8009f4a:	4618      	mov	r0, r3
 8009f4c:	f7f6 fafa 	bl	8000544 <__aeabi_i2d>
 8009f50:	f04f 0200 	mov.w	r2, #0
 8009f54:	4b64      	ldr	r3, [pc, #400]	@ (800a0e8 <BNO055_Read_DMA+0x344>)
 8009f56:	f7f6 fc89 	bl	800086c <__aeabi_ddiv>
 8009f5a:	4602      	mov	r2, r0
 8009f5c:	460b      	mov	r3, r1
 8009f5e:	6879      	ldr	r1, [r7, #4]
 8009f60:	e9c1 2314 	strd	r2, r3, [r1, #80]	@ 0x50
	bno->euler.pitch = ((double) bno->DataBuffer[11].i16) / 16.0;
 8009f64:	687b      	ldr	r3, [r7, #4]
 8009f66:	f9b3 30ce 	ldrsh.w	r3, [r3, #206]	@ 0xce
 8009f6a:	4618      	mov	r0, r3
 8009f6c:	f7f6 faea 	bl	8000544 <__aeabi_i2d>
 8009f70:	f04f 0200 	mov.w	r2, #0
 8009f74:	4b5c      	ldr	r3, [pc, #368]	@ (800a0e8 <BNO055_Read_DMA+0x344>)
 8009f76:	f7f6 fc79 	bl	800086c <__aeabi_ddiv>
 8009f7a:	4602      	mov	r2, r0
 8009f7c:	460b      	mov	r3, r1
 8009f7e:	6879      	ldr	r1, [r7, #4]
 8009f80:	e9c1 2316 	strd	r2, r3, [r1, #88]	@ 0x58

	bno->quat.x = bno->DataBuffer[12].i16 * scale;
 8009f84:	687b      	ldr	r3, [r7, #4]
 8009f86:	f9b3 30d0 	ldrsh.w	r3, [r3, #208]	@ 0xd0
 8009f8a:	4618      	mov	r0, r3
 8009f8c:	f7f6 fada 	bl	8000544 <__aeabi_i2d>
 8009f90:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8009f94:	f7f6 fb40 	bl	8000618 <__aeabi_dmul>
 8009f98:	4602      	mov	r2, r0
 8009f9a:	460b      	mov	r3, r1
 8009f9c:	6879      	ldr	r1, [r7, #4]
 8009f9e:	e9c1 231a 	strd	r2, r3, [r1, #104]	@ 0x68
	bno->quat.y = bno->DataBuffer[13].i16 * scale;
 8009fa2:	687b      	ldr	r3, [r7, #4]
 8009fa4:	f9b3 30d2 	ldrsh.w	r3, [r3, #210]	@ 0xd2
 8009fa8:	4618      	mov	r0, r3
 8009faa:	f7f6 facb 	bl	8000544 <__aeabi_i2d>
 8009fae:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8009fb2:	f7f6 fb31 	bl	8000618 <__aeabi_dmul>
 8009fb6:	4602      	mov	r2, r0
 8009fb8:	460b      	mov	r3, r1
 8009fba:	6879      	ldr	r1, [r7, #4]
 8009fbc:	e9c1 231c 	strd	r2, r3, [r1, #112]	@ 0x70
	bno->quat.z = bno->DataBuffer[14].i16 * scale;
 8009fc0:	687b      	ldr	r3, [r7, #4]
 8009fc2:	f9b3 30d4 	ldrsh.w	r3, [r3, #212]	@ 0xd4
 8009fc6:	4618      	mov	r0, r3
 8009fc8:	f7f6 fabc 	bl	8000544 <__aeabi_i2d>
 8009fcc:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8009fd0:	f7f6 fb22 	bl	8000618 <__aeabi_dmul>
 8009fd4:	4602      	mov	r2, r0
 8009fd6:	460b      	mov	r3, r1
 8009fd8:	6879      	ldr	r1, [r7, #4]
 8009fda:	e9c1 231e 	strd	r2, r3, [r1, #120]	@ 0x78
	bno->quat.w = bno->DataBuffer[15].i16 * scale;
 8009fde:	687b      	ldr	r3, [r7, #4]
 8009fe0:	f9b3 30d6 	ldrsh.w	r3, [r3, #214]	@ 0xd6
 8009fe4:	4618      	mov	r0, r3
 8009fe6:	f7f6 faad 	bl	8000544 <__aeabi_i2d>
 8009fea:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8009fee:	f7f6 fb13 	bl	8000618 <__aeabi_dmul>
 8009ff2:	4602      	mov	r2, r0
 8009ff4:	460b      	mov	r3, r1
 8009ff6:	6879      	ldr	r1, [r7, #4]
 8009ff8:	e9c1 2320 	strd	r2, r3, [r1, #128]	@ 0x80

	if (!fast_mode) {
 8009ffc:	78fb      	ldrb	r3, [r7, #3]
 8009ffe:	2b00      	cmp	r3, #0
 800a000:	d174      	bne.n	800a0ec <BNO055_Read_DMA+0x348>

		bno->lin_acc.x = ((double) bno->DataBuffer[16].i16) / 100.0;
 800a002:	687b      	ldr	r3, [r7, #4]
 800a004:	f9b3 30d8 	ldrsh.w	r3, [r3, #216]	@ 0xd8
 800a008:	4618      	mov	r0, r3
 800a00a:	f7f6 fa9b 	bl	8000544 <__aeabi_i2d>
 800a00e:	f04f 0200 	mov.w	r2, #0
 800a012:	4b34      	ldr	r3, [pc, #208]	@ (800a0e4 <BNO055_Read_DMA+0x340>)
 800a014:	f7f6 fc2a 	bl	800086c <__aeabi_ddiv>
 800a018:	4602      	mov	r2, r0
 800a01a:	460b      	mov	r3, r1
 800a01c:	6879      	ldr	r1, [r7, #4]
 800a01e:	e9c1 2322 	strd	r2, r3, [r1, #136]	@ 0x88
		bno->lin_acc.y = ((double) bno->DataBuffer[17].i16) / 100.0;
 800a022:	687b      	ldr	r3, [r7, #4]
 800a024:	f9b3 30da 	ldrsh.w	r3, [r3, #218]	@ 0xda
 800a028:	4618      	mov	r0, r3
 800a02a:	f7f6 fa8b 	bl	8000544 <__aeabi_i2d>
 800a02e:	f04f 0200 	mov.w	r2, #0
 800a032:	4b2c      	ldr	r3, [pc, #176]	@ (800a0e4 <BNO055_Read_DMA+0x340>)
 800a034:	f7f6 fc1a 	bl	800086c <__aeabi_ddiv>
 800a038:	4602      	mov	r2, r0
 800a03a:	460b      	mov	r3, r1
 800a03c:	6879      	ldr	r1, [r7, #4]
 800a03e:	e9c1 2324 	strd	r2, r3, [r1, #144]	@ 0x90
		bno->lin_acc.z = ((double) bno->DataBuffer[18].i16) / 100.0;
 800a042:	687b      	ldr	r3, [r7, #4]
 800a044:	f9b3 30dc 	ldrsh.w	r3, [r3, #220]	@ 0xdc
 800a048:	4618      	mov	r0, r3
 800a04a:	f7f6 fa7b 	bl	8000544 <__aeabi_i2d>
 800a04e:	f04f 0200 	mov.w	r2, #0
 800a052:	4b24      	ldr	r3, [pc, #144]	@ (800a0e4 <BNO055_Read_DMA+0x340>)
 800a054:	f7f6 fc0a 	bl	800086c <__aeabi_ddiv>
 800a058:	4602      	mov	r2, r0
 800a05a:	460b      	mov	r3, r1
 800a05c:	6879      	ldr	r1, [r7, #4]
 800a05e:	e9c1 2326 	strd	r2, r3, [r1, #152]	@ 0x98

		bno->grav.x = ((double) bno->DataBuffer[19].i16) / 100.0;
 800a062:	687b      	ldr	r3, [r7, #4]
 800a064:	f9b3 30de 	ldrsh.w	r3, [r3, #222]	@ 0xde
 800a068:	4618      	mov	r0, r3
 800a06a:	f7f6 fa6b 	bl	8000544 <__aeabi_i2d>
 800a06e:	f04f 0200 	mov.w	r2, #0
 800a072:	4b1c      	ldr	r3, [pc, #112]	@ (800a0e4 <BNO055_Read_DMA+0x340>)
 800a074:	f7f6 fbfa 	bl	800086c <__aeabi_ddiv>
 800a078:	4602      	mov	r2, r0
 800a07a:	460b      	mov	r3, r1
 800a07c:	6879      	ldr	r1, [r7, #4]
 800a07e:	e9c1 2328 	strd	r2, r3, [r1, #160]	@ 0xa0
		bno->grav.y = ((double) bno->DataBuffer[20].i16) / 100.0;
 800a082:	687b      	ldr	r3, [r7, #4]
 800a084:	f9b3 30e0 	ldrsh.w	r3, [r3, #224]	@ 0xe0
 800a088:	4618      	mov	r0, r3
 800a08a:	f7f6 fa5b 	bl	8000544 <__aeabi_i2d>
 800a08e:	f04f 0200 	mov.w	r2, #0
 800a092:	4b14      	ldr	r3, [pc, #80]	@ (800a0e4 <BNO055_Read_DMA+0x340>)
 800a094:	f7f6 fbea 	bl	800086c <__aeabi_ddiv>
 800a098:	4602      	mov	r2, r0
 800a09a:	460b      	mov	r3, r1
 800a09c:	6879      	ldr	r1, [r7, #4]
 800a09e:	e9c1 232a 	strd	r2, r3, [r1, #168]	@ 0xa8
		bno->grav.z = ((double) bno->DataBuffer[21].i16) / 100.0;
 800a0a2:	687b      	ldr	r3, [r7, #4]
 800a0a4:	f9b3 30e2 	ldrsh.w	r3, [r3, #226]	@ 0xe2
 800a0a8:	4618      	mov	r0, r3
 800a0aa:	f7f6 fa4b 	bl	8000544 <__aeabi_i2d>
 800a0ae:	f04f 0200 	mov.w	r2, #0
 800a0b2:	4b0c      	ldr	r3, [pc, #48]	@ (800a0e4 <BNO055_Read_DMA+0x340>)
 800a0b4:	f7f6 fbda 	bl	800086c <__aeabi_ddiv>
 800a0b8:	4602      	mov	r2, r0
 800a0ba:	460b      	mov	r3, r1
 800a0bc:	6879      	ldr	r1, [r7, #4]
 800a0be:	e9c1 232c 	strd	r2, r3, [r1, #176]	@ 0xb0

		HAL_I2C_Mem_Read_DMA(bno->hi2cx, bno->address, ACC_DATA_X_LSB, 1, bno->DataBuffer->u8, 44);
 800a0c2:	687b      	ldr	r3, [r7, #4]
 800a0c4:	6818      	ldr	r0, [r3, #0]
 800a0c6:	687b      	ldr	r3, [r7, #4]
 800a0c8:	791b      	ldrb	r3, [r3, #4]
 800a0ca:	4619      	mov	r1, r3
 800a0cc:	687b      	ldr	r3, [r7, #4]
 800a0ce:	33b8      	adds	r3, #184	@ 0xb8
 800a0d0:	222c      	movs	r2, #44	@ 0x2c
 800a0d2:	9201      	str	r2, [sp, #4]
 800a0d4:	9300      	str	r3, [sp, #0]
 800a0d6:	2301      	movs	r3, #1
 800a0d8:	2208      	movs	r2, #8
 800a0da:	f7f9 ff77 	bl	8003fcc <HAL_I2C_Mem_Read_DMA>
	} else {
		HAL_I2C_Mem_Read_DMA(bno->hi2cx, bno->address, ACC_DATA_X_LSB, 1, bno->DataBuffer->u8, 32);
	}
}
 800a0de:	e013      	b.n	800a108 <BNO055_Read_DMA+0x364>
 800a0e0:	3f100000 	.word	0x3f100000
 800a0e4:	40590000 	.word	0x40590000
 800a0e8:	40300000 	.word	0x40300000
		HAL_I2C_Mem_Read_DMA(bno->hi2cx, bno->address, ACC_DATA_X_LSB, 1, bno->DataBuffer->u8, 32);
 800a0ec:	687b      	ldr	r3, [r7, #4]
 800a0ee:	6818      	ldr	r0, [r3, #0]
 800a0f0:	687b      	ldr	r3, [r7, #4]
 800a0f2:	791b      	ldrb	r3, [r3, #4]
 800a0f4:	4619      	mov	r1, r3
 800a0f6:	687b      	ldr	r3, [r7, #4]
 800a0f8:	33b8      	adds	r3, #184	@ 0xb8
 800a0fa:	2220      	movs	r2, #32
 800a0fc:	9201      	str	r2, [sp, #4]
 800a0fe:	9300      	str	r3, [sp, #0]
 800a100:	2301      	movs	r3, #1
 800a102:	2208      	movs	r2, #8
 800a104:	f7f9 ff62 	bl	8003fcc <HAL_I2C_Mem_Read_DMA>
}
 800a108:	bf00      	nop
 800a10a:	3718      	adds	r7, #24
 800a10c:	46bd      	mov	sp, r7
 800a10e:	bd80      	pop	{r7, pc}

0800a110 <BNO055_SetOffsets>:
		HAL_Delay(20);
	}
}

void BNO055_SetOffsets(BNO055_Structure *bno, BNO055_Offsets *bno_offset)
{
 800a110:	b580      	push	{r7, lr}
 800a112:	b08e      	sub	sp, #56	@ 0x38
 800a114:	af04      	add	r7, sp, #16
 800a116:	6078      	str	r0, [r7, #4]
 800a118:	6039      	str	r1, [r7, #0]
	uint8_t read_mode;
	HAL_I2C_Mem_Read(bno->hi2cx, bno->address, OPR_MODE, 1, &read_mode, 1, 10);
 800a11a:	687b      	ldr	r3, [r7, #4]
 800a11c:	6818      	ldr	r0, [r3, #0]
 800a11e:	687b      	ldr	r3, [r7, #4]
 800a120:	791b      	ldrb	r3, [r3, #4]
 800a122:	4619      	mov	r1, r3
 800a124:	230a      	movs	r3, #10
 800a126:	9302      	str	r3, [sp, #8]
 800a128:	2301      	movs	r3, #1
 800a12a:	9301      	str	r3, [sp, #4]
 800a12c:	f107 0327 	add.w	r3, r7, #39	@ 0x27
 800a130:	9300      	str	r3, [sp, #0]
 800a132:	2301      	movs	r3, #1
 800a134:	223d      	movs	r2, #61	@ 0x3d
 800a136:	f7f9 fe2f 	bl	8003d98 <HAL_I2C_Mem_Read>
	if (read_mode != CONFIGMODE) {
 800a13a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800a13e:	2b00      	cmp	r3, #0
 800a140:	d014      	beq.n	800a16c <BNO055_SetOffsets+0x5c>
		uint8_t txbuffer = CONFIGMODE;
 800a142:	2300      	movs	r3, #0
 800a144:	73fb      	strb	r3, [r7, #15]
		HAL_I2C_Mem_Write(bno->hi2cx, bno->address, OPR_MODE, 1, &txbuffer, 1, 10);
 800a146:	687b      	ldr	r3, [r7, #4]
 800a148:	6818      	ldr	r0, [r3, #0]
 800a14a:	687b      	ldr	r3, [r7, #4]
 800a14c:	791b      	ldrb	r3, [r3, #4]
 800a14e:	4619      	mov	r1, r3
 800a150:	230a      	movs	r3, #10
 800a152:	9302      	str	r3, [sp, #8]
 800a154:	2301      	movs	r3, #1
 800a156:	9301      	str	r3, [sp, #4]
 800a158:	f107 030f 	add.w	r3, r7, #15
 800a15c:	9300      	str	r3, [sp, #0]
 800a15e:	2301      	movs	r3, #1
 800a160:	223d      	movs	r2, #61	@ 0x3d
 800a162:	f7f9 fd05 	bl	8003b70 <HAL_I2C_Mem_Write>
		HAL_Delay(20);
 800a166:	2014      	movs	r0, #20
 800a168:	f7f8 ff66 	bl	8003038 <HAL_Delay>
	}

	uint8_t txbuffer[22];
	txbuffer[0] = bno_offset->accel_offset_x.u8[0];
 800a16c:	683b      	ldr	r3, [r7, #0]
 800a16e:	781b      	ldrb	r3, [r3, #0]
 800a170:	743b      	strb	r3, [r7, #16]
	txbuffer[1] = bno_offset->accel_offset_x.u8[1];
 800a172:	683b      	ldr	r3, [r7, #0]
 800a174:	785b      	ldrb	r3, [r3, #1]
 800a176:	747b      	strb	r3, [r7, #17]
	txbuffer[2] = bno_offset->accel_offset_y.u8[0];
 800a178:	683b      	ldr	r3, [r7, #0]
 800a17a:	789b      	ldrb	r3, [r3, #2]
 800a17c:	74bb      	strb	r3, [r7, #18]
	txbuffer[3] = bno_offset->accel_offset_y.u8[1];
 800a17e:	683b      	ldr	r3, [r7, #0]
 800a180:	78db      	ldrb	r3, [r3, #3]
 800a182:	74fb      	strb	r3, [r7, #19]
	txbuffer[4] = bno_offset->accel_offset_z.u8[0];
 800a184:	683b      	ldr	r3, [r7, #0]
 800a186:	791b      	ldrb	r3, [r3, #4]
 800a188:	753b      	strb	r3, [r7, #20]
	txbuffer[5] = bno_offset->accel_offset_z.u8[1];
 800a18a:	683b      	ldr	r3, [r7, #0]
 800a18c:	795b      	ldrb	r3, [r3, #5]
 800a18e:	757b      	strb	r3, [r7, #21]
	txbuffer[6] = bno_offset->mag_offset_x.u8[0];
 800a190:	683b      	ldr	r3, [r7, #0]
 800a192:	799b      	ldrb	r3, [r3, #6]
 800a194:	75bb      	strb	r3, [r7, #22]
	txbuffer[7] = bno_offset->mag_offset_x.u8[1];
 800a196:	683b      	ldr	r3, [r7, #0]
 800a198:	79db      	ldrb	r3, [r3, #7]
 800a19a:	75fb      	strb	r3, [r7, #23]
	txbuffer[8] = bno_offset->mag_offset_y.u8[0];
 800a19c:	683b      	ldr	r3, [r7, #0]
 800a19e:	7a1b      	ldrb	r3, [r3, #8]
 800a1a0:	763b      	strb	r3, [r7, #24]
	txbuffer[9] = bno_offset->mag_offset_y.u8[1];
 800a1a2:	683b      	ldr	r3, [r7, #0]
 800a1a4:	7a5b      	ldrb	r3, [r3, #9]
 800a1a6:	767b      	strb	r3, [r7, #25]
	txbuffer[10] = bno_offset->mag_offset_z.u8[0];
 800a1a8:	683b      	ldr	r3, [r7, #0]
 800a1aa:	7a9b      	ldrb	r3, [r3, #10]
 800a1ac:	76bb      	strb	r3, [r7, #26]
	txbuffer[11] = bno_offset->mag_offset_z.u8[1];
 800a1ae:	683b      	ldr	r3, [r7, #0]
 800a1b0:	7adb      	ldrb	r3, [r3, #11]
 800a1b2:	76fb      	strb	r3, [r7, #27]
	txbuffer[12] = bno_offset->gyro_offset_x.u8[0];
 800a1b4:	683b      	ldr	r3, [r7, #0]
 800a1b6:	7b1b      	ldrb	r3, [r3, #12]
 800a1b8:	773b      	strb	r3, [r7, #28]
	txbuffer[13] = bno_offset->gyro_offset_x.u8[1];
 800a1ba:	683b      	ldr	r3, [r7, #0]
 800a1bc:	7b5b      	ldrb	r3, [r3, #13]
 800a1be:	777b      	strb	r3, [r7, #29]
	txbuffer[14] = bno_offset->gyro_offset_y.u8[0];
 800a1c0:	683b      	ldr	r3, [r7, #0]
 800a1c2:	7b9b      	ldrb	r3, [r3, #14]
 800a1c4:	77bb      	strb	r3, [r7, #30]
	txbuffer[15] = bno_offset->gyro_offset_y.u8[1];
 800a1c6:	683b      	ldr	r3, [r7, #0]
 800a1c8:	7bdb      	ldrb	r3, [r3, #15]
 800a1ca:	77fb      	strb	r3, [r7, #31]
	txbuffer[16] = bno_offset->gyro_offset_z.u8[0];
 800a1cc:	683b      	ldr	r3, [r7, #0]
 800a1ce:	7c1b      	ldrb	r3, [r3, #16]
 800a1d0:	f887 3020 	strb.w	r3, [r7, #32]
	txbuffer[17] = bno_offset->gyro_offset_z.u8[1];
 800a1d4:	683b      	ldr	r3, [r7, #0]
 800a1d6:	7c5b      	ldrb	r3, [r3, #17]
 800a1d8:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
	txbuffer[18] = bno_offset->accel_radius.u8[0];
 800a1dc:	683b      	ldr	r3, [r7, #0]
 800a1de:	7c9b      	ldrb	r3, [r3, #18]
 800a1e0:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
	txbuffer[19] = bno_offset->accel_radius.u8[1];
 800a1e4:	683b      	ldr	r3, [r7, #0]
 800a1e6:	7cdb      	ldrb	r3, [r3, #19]
 800a1e8:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
	txbuffer[20] = bno_offset->mag_radius.u8[0];
 800a1ec:	683b      	ldr	r3, [r7, #0]
 800a1ee:	7d1b      	ldrb	r3, [r3, #20]
 800a1f0:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
	txbuffer[21] = bno_offset->mag_radius.u8[1];
 800a1f4:	683b      	ldr	r3, [r7, #0]
 800a1f6:	7d5b      	ldrb	r3, [r3, #21]
 800a1f8:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25

	HAL_I2C_Mem_Write(bno->hi2cx, bno->address, ACC_OFFSET_X_LSB, 1, txbuffer, 22, 10);
 800a1fc:	687b      	ldr	r3, [r7, #4]
 800a1fe:	6818      	ldr	r0, [r3, #0]
 800a200:	687b      	ldr	r3, [r7, #4]
 800a202:	791b      	ldrb	r3, [r3, #4]
 800a204:	4619      	mov	r1, r3
 800a206:	230a      	movs	r3, #10
 800a208:	9302      	str	r3, [sp, #8]
 800a20a:	2316      	movs	r3, #22
 800a20c:	9301      	str	r3, [sp, #4]
 800a20e:	f107 0310 	add.w	r3, r7, #16
 800a212:	9300      	str	r3, [sp, #0]
 800a214:	2301      	movs	r3, #1
 800a216:	2255      	movs	r2, #85	@ 0x55
 800a218:	f7f9 fcaa 	bl	8003b70 <HAL_I2C_Mem_Write>

	HAL_I2C_Mem_Read(bno->hi2cx, bno->address, OPR_MODE, 1, &read_mode, 1, 10);
 800a21c:	687b      	ldr	r3, [r7, #4]
 800a21e:	6818      	ldr	r0, [r3, #0]
 800a220:	687b      	ldr	r3, [r7, #4]
 800a222:	791b      	ldrb	r3, [r3, #4]
 800a224:	4619      	mov	r1, r3
 800a226:	230a      	movs	r3, #10
 800a228:	9302      	str	r3, [sp, #8]
 800a22a:	2301      	movs	r3, #1
 800a22c:	9301      	str	r3, [sp, #4]
 800a22e:	f107 0327 	add.w	r3, r7, #39	@ 0x27
 800a232:	9300      	str	r3, [sp, #0]
 800a234:	2301      	movs	r3, #1
 800a236:	223d      	movs	r2, #61	@ 0x3d
 800a238:	f7f9 fdae 	bl	8003d98 <HAL_I2C_Mem_Read>
	if (read_mode != bno->mode) {
 800a23c:	687b      	ldr	r3, [r7, #4]
 800a23e:	795a      	ldrb	r2, [r3, #5]
 800a240:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800a244:	429a      	cmp	r2, r3
 800a246:	d012      	beq.n	800a26e <BNO055_SetOffsets+0x15e>
		HAL_I2C_Mem_Write(bno->hi2cx, bno->address, OPR_MODE, 1, &bno->mode, 1, 10);
 800a248:	687b      	ldr	r3, [r7, #4]
 800a24a:	6818      	ldr	r0, [r3, #0]
 800a24c:	687b      	ldr	r3, [r7, #4]
 800a24e:	791b      	ldrb	r3, [r3, #4]
 800a250:	4619      	mov	r1, r3
 800a252:	687b      	ldr	r3, [r7, #4]
 800a254:	3305      	adds	r3, #5
 800a256:	220a      	movs	r2, #10
 800a258:	9202      	str	r2, [sp, #8]
 800a25a:	2201      	movs	r2, #1
 800a25c:	9201      	str	r2, [sp, #4]
 800a25e:	9300      	str	r3, [sp, #0]
 800a260:	2301      	movs	r3, #1
 800a262:	223d      	movs	r2, #61	@ 0x3d
 800a264:	f7f9 fc84 	bl	8003b70 <HAL_I2C_Mem_Write>
		HAL_Delay(20);
 800a268:	2014      	movs	r0, #20
 800a26a:	f7f8 fee5 	bl	8003038 <HAL_Delay>
	}
}
 800a26e:	bf00      	nop
 800a270:	3728      	adds	r7, #40	@ 0x28
 800a272:	46bd      	mov	sp, r7
 800a274:	bd80      	pop	{r7, pc}

0800a276 <BNO055_SetAxis>:

void BNO055_SetAxis(BNO055_Structure *bno, Remap_Config config, Remap_Sign sign)
{
 800a276:	b580      	push	{r7, lr}
 800a278:	b088      	sub	sp, #32
 800a27a:	af04      	add	r7, sp, #16
 800a27c:	6078      	str	r0, [r7, #4]
 800a27e:	460b      	mov	r3, r1
 800a280:	70fb      	strb	r3, [r7, #3]
 800a282:	4613      	mov	r3, r2
 800a284:	70bb      	strb	r3, [r7, #2]
	uint8_t read_mode;
	HAL_I2C_Mem_Read(bno->hi2cx, bno->address, OPR_MODE, 1, &read_mode, 1, 10);
 800a286:	687b      	ldr	r3, [r7, #4]
 800a288:	6818      	ldr	r0, [r3, #0]
 800a28a:	687b      	ldr	r3, [r7, #4]
 800a28c:	791b      	ldrb	r3, [r3, #4]
 800a28e:	4619      	mov	r1, r3
 800a290:	230a      	movs	r3, #10
 800a292:	9302      	str	r3, [sp, #8]
 800a294:	2301      	movs	r3, #1
 800a296:	9301      	str	r3, [sp, #4]
 800a298:	f107 030f 	add.w	r3, r7, #15
 800a29c:	9300      	str	r3, [sp, #0]
 800a29e:	2301      	movs	r3, #1
 800a2a0:	223d      	movs	r2, #61	@ 0x3d
 800a2a2:	f7f9 fd79 	bl	8003d98 <HAL_I2C_Mem_Read>
	if (read_mode != CONFIGMODE) {
 800a2a6:	7bfb      	ldrb	r3, [r7, #15]
 800a2a8:	2b00      	cmp	r3, #0
 800a2aa:	d014      	beq.n	800a2d6 <BNO055_SetAxis+0x60>
		uint8_t txbuffer = CONFIGMODE;
 800a2ac:	2300      	movs	r3, #0
 800a2ae:	737b      	strb	r3, [r7, #13]
		HAL_I2C_Mem_Write(bno->hi2cx, bno->address, OPR_MODE, 1, &txbuffer, 1, 10);
 800a2b0:	687b      	ldr	r3, [r7, #4]
 800a2b2:	6818      	ldr	r0, [r3, #0]
 800a2b4:	687b      	ldr	r3, [r7, #4]
 800a2b6:	791b      	ldrb	r3, [r3, #4]
 800a2b8:	4619      	mov	r1, r3
 800a2ba:	230a      	movs	r3, #10
 800a2bc:	9302      	str	r3, [sp, #8]
 800a2be:	2301      	movs	r3, #1
 800a2c0:	9301      	str	r3, [sp, #4]
 800a2c2:	f107 030d 	add.w	r3, r7, #13
 800a2c6:	9300      	str	r3, [sp, #0]
 800a2c8:	2301      	movs	r3, #1
 800a2ca:	223d      	movs	r2, #61	@ 0x3d
 800a2cc:	f7f9 fc50 	bl	8003b70 <HAL_I2C_Mem_Write>
		HAL_Delay(20);
 800a2d0:	2014      	movs	r0, #20
 800a2d2:	f7f8 feb1 	bl	8003038 <HAL_Delay>
	}

	uint8_t txbuffer;

	txbuffer = config;
 800a2d6:	78fb      	ldrb	r3, [r7, #3]
 800a2d8:	73bb      	strb	r3, [r7, #14]
	HAL_I2C_Mem_Write(bno->hi2cx, bno->address, AXIS_MAP_CONFIG, 1, &txbuffer, 1, 10);
 800a2da:	687b      	ldr	r3, [r7, #4]
 800a2dc:	6818      	ldr	r0, [r3, #0]
 800a2de:	687b      	ldr	r3, [r7, #4]
 800a2e0:	791b      	ldrb	r3, [r3, #4]
 800a2e2:	4619      	mov	r1, r3
 800a2e4:	230a      	movs	r3, #10
 800a2e6:	9302      	str	r3, [sp, #8]
 800a2e8:	2301      	movs	r3, #1
 800a2ea:	9301      	str	r3, [sp, #4]
 800a2ec:	f107 030e 	add.w	r3, r7, #14
 800a2f0:	9300      	str	r3, [sp, #0]
 800a2f2:	2301      	movs	r3, #1
 800a2f4:	2241      	movs	r2, #65	@ 0x41
 800a2f6:	f7f9 fc3b 	bl	8003b70 <HAL_I2C_Mem_Write>
	HAL_Delay(20);
 800a2fa:	2014      	movs	r0, #20
 800a2fc:	f7f8 fe9c 	bl	8003038 <HAL_Delay>

	txbuffer = sign;
 800a300:	78bb      	ldrb	r3, [r7, #2]
 800a302:	73bb      	strb	r3, [r7, #14]
	HAL_I2C_Mem_Write(bno->hi2cx, bno->address, AXIS_MAP_SIGN, 1, &txbuffer, 1, 10);
 800a304:	687b      	ldr	r3, [r7, #4]
 800a306:	6818      	ldr	r0, [r3, #0]
 800a308:	687b      	ldr	r3, [r7, #4]
 800a30a:	791b      	ldrb	r3, [r3, #4]
 800a30c:	4619      	mov	r1, r3
 800a30e:	230a      	movs	r3, #10
 800a310:	9302      	str	r3, [sp, #8]
 800a312:	2301      	movs	r3, #1
 800a314:	9301      	str	r3, [sp, #4]
 800a316:	f107 030e 	add.w	r3, r7, #14
 800a31a:	9300      	str	r3, [sp, #0]
 800a31c:	2301      	movs	r3, #1
 800a31e:	2242      	movs	r2, #66	@ 0x42
 800a320:	f7f9 fc26 	bl	8003b70 <HAL_I2C_Mem_Write>
	HAL_Delay(20);
 800a324:	2014      	movs	r0, #20
 800a326:	f7f8 fe87 	bl	8003038 <HAL_Delay>

	HAL_I2C_Mem_Read(bno->hi2cx, bno->address, OPR_MODE, 1, &read_mode, 1, 10);
 800a32a:	687b      	ldr	r3, [r7, #4]
 800a32c:	6818      	ldr	r0, [r3, #0]
 800a32e:	687b      	ldr	r3, [r7, #4]
 800a330:	791b      	ldrb	r3, [r3, #4]
 800a332:	4619      	mov	r1, r3
 800a334:	230a      	movs	r3, #10
 800a336:	9302      	str	r3, [sp, #8]
 800a338:	2301      	movs	r3, #1
 800a33a:	9301      	str	r3, [sp, #4]
 800a33c:	f107 030f 	add.w	r3, r7, #15
 800a340:	9300      	str	r3, [sp, #0]
 800a342:	2301      	movs	r3, #1
 800a344:	223d      	movs	r2, #61	@ 0x3d
 800a346:	f7f9 fd27 	bl	8003d98 <HAL_I2C_Mem_Read>
	if (read_mode != bno->mode) {
 800a34a:	687b      	ldr	r3, [r7, #4]
 800a34c:	795a      	ldrb	r2, [r3, #5]
 800a34e:	7bfb      	ldrb	r3, [r7, #15]
 800a350:	429a      	cmp	r2, r3
 800a352:	d012      	beq.n	800a37a <BNO055_SetAxis+0x104>
		HAL_I2C_Mem_Write(bno->hi2cx, bno->address, OPR_MODE, 1, &bno->mode, 1, 10);
 800a354:	687b      	ldr	r3, [r7, #4]
 800a356:	6818      	ldr	r0, [r3, #0]
 800a358:	687b      	ldr	r3, [r7, #4]
 800a35a:	791b      	ldrb	r3, [r3, #4]
 800a35c:	4619      	mov	r1, r3
 800a35e:	687b      	ldr	r3, [r7, #4]
 800a360:	3305      	adds	r3, #5
 800a362:	220a      	movs	r2, #10
 800a364:	9202      	str	r2, [sp, #8]
 800a366:	2201      	movs	r2, #1
 800a368:	9201      	str	r2, [sp, #4]
 800a36a:	9300      	str	r3, [sp, #0]
 800a36c:	2301      	movs	r3, #1
 800a36e:	223d      	movs	r2, #61	@ 0x3d
 800a370:	f7f9 fbfe 	bl	8003b70 <HAL_I2C_Mem_Write>
		HAL_Delay(20);
 800a374:	2014      	movs	r0, #20
 800a376:	f7f8 fe5f 	bl	8003038 <HAL_Delay>
	}
}
 800a37a:	bf00      	nop
 800a37c:	3710      	adds	r7, #16
 800a37e:	46bd      	mov	sp, r7
 800a380:	bd80      	pop	{r7, pc}
	...

0800a384 <RC_Init>:
 */

#include "RC.h"

uint8_t RC_Init(RC_Structure *RCx, TIM_HandleTypeDef *htimx, uint32_t channelx, float cpu_freq, bool isCHN)
{
 800a384:	b580      	push	{r7, lr}
 800a386:	b088      	sub	sp, #32
 800a388:	af00      	add	r7, sp, #0
 800a38a:	6178      	str	r0, [r7, #20]
 800a38c:	6139      	str	r1, [r7, #16]
 800a38e:	60fa      	str	r2, [r7, #12]
 800a390:	ed87 0a02 	vstr	s0, [r7, #8]
 800a394:	71fb      	strb	r3, [r7, #7]
	RCx->htimx = htimx;
 800a396:	697b      	ldr	r3, [r7, #20]
 800a398:	693a      	ldr	r2, [r7, #16]
 800a39a:	601a      	str	r2, [r3, #0]
	RCx->channelx =channelx;
 800a39c:	697b      	ldr	r3, [r7, #20]
 800a39e:	68fa      	ldr	r2, [r7, #12]
 800a3a0:	605a      	str	r2, [r3, #4]
	HAL_TIM_Base_Start(RCx->htimx);
 800a3a2:	697b      	ldr	r3, [r7, #20]
 800a3a4:	681b      	ldr	r3, [r3, #0]
 800a3a6:	4618      	mov	r0, r3
 800a3a8:	f7fc fe9a 	bl	80070e0 <HAL_TIM_Base_Start>
	if (isCHN) HAL_TIMEx_PWMN_Start(RCx->htimx, RCx->channelx);
 800a3ac:	79fb      	ldrb	r3, [r7, #7]
 800a3ae:	2b00      	cmp	r3, #0
 800a3b0:	d008      	beq.n	800a3c4 <RC_Init+0x40>
 800a3b2:	697b      	ldr	r3, [r7, #20]
 800a3b4:	681a      	ldr	r2, [r3, #0]
 800a3b6:	697b      	ldr	r3, [r7, #20]
 800a3b8:	685b      	ldr	r3, [r3, #4]
 800a3ba:	4619      	mov	r1, r3
 800a3bc:	4610      	mov	r0, r2
 800a3be:	f7fd fedf 	bl	8008180 <HAL_TIMEx_PWMN_Start>
 800a3c2:	e007      	b.n	800a3d4 <RC_Init+0x50>
	else HAL_TIM_PWM_Start(RCx->htimx, RCx->channelx);
 800a3c4:	697b      	ldr	r3, [r7, #20]
 800a3c6:	681a      	ldr	r2, [r3, #0]
 800a3c8:	697b      	ldr	r3, [r7, #20]
 800a3ca:	685b      	ldr	r3, [r3, #4]
 800a3cc:	4619      	mov	r1, r3
 800a3ce:	4610      	mov	r0, r2
 800a3d0:	f7fc ff7e 	bl	80072d0 <HAL_TIM_PWM_Start>

	if (50.0 >= cpu_freq / 2.0) return -1;
 800a3d4:	68b8      	ldr	r0, [r7, #8]
 800a3d6:	f7f6 f8c7 	bl	8000568 <__aeabi_f2d>
 800a3da:	f04f 0200 	mov.w	r2, #0
 800a3de:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800a3e2:	f7f6 fa43 	bl	800086c <__aeabi_ddiv>
 800a3e6:	4602      	mov	r2, r0
 800a3e8:	460b      	mov	r3, r1
 800a3ea:	4610      	mov	r0, r2
 800a3ec:	4619      	mov	r1, r3
 800a3ee:	f04f 0200 	mov.w	r2, #0
 800a3f2:	4b27      	ldr	r3, [pc, #156]	@ (800a490 <RC_Init+0x10c>)
 800a3f4:	f7f6 fb8c 	bl	8000b10 <__aeabi_dcmple>
 800a3f8:	4603      	mov	r3, r0
 800a3fa:	2b00      	cmp	r3, #0
 800a3fc:	d001      	beq.n	800a402 <RC_Init+0x7e>
 800a3fe:	23ff      	movs	r3, #255	@ 0xff
 800a400:	e042      	b.n	800a488 <RC_Init+0x104>
	uint32_t period_cyc = (uint32_t) (cpu_freq / 50.0);
 800a402:	68b8      	ldr	r0, [r7, #8]
 800a404:	f7f6 f8b0 	bl	8000568 <__aeabi_f2d>
 800a408:	f04f 0200 	mov.w	r2, #0
 800a40c:	4b20      	ldr	r3, [pc, #128]	@ (800a490 <RC_Init+0x10c>)
 800a40e:	f7f6 fa2d 	bl	800086c <__aeabi_ddiv>
 800a412:	4602      	mov	r2, r0
 800a414:	460b      	mov	r3, r1
 800a416:	4610      	mov	r0, r2
 800a418:	4619      	mov	r1, r3
 800a41a:	f7f6 fbad 	bl	8000b78 <__aeabi_d2uiz>
 800a41e:	4603      	mov	r3, r0
 800a420:	61fb      	str	r3, [r7, #28]
	uint16_t prescaler = (uint16_t) (period_cyc / 65535 + 1);
 800a422:	69fb      	ldr	r3, [r7, #28]
 800a424:	4a1b      	ldr	r2, [pc, #108]	@ (800a494 <RC_Init+0x110>)
 800a426:	fba2 2303 	umull	r2, r3, r2, r3
 800a42a:	0bdb      	lsrs	r3, r3, #15
 800a42c:	b29b      	uxth	r3, r3
 800a42e:	3301      	adds	r3, #1
 800a430:	837b      	strh	r3, [r7, #26]
	uint16_t overflow = (uint16_t) ((period_cyc + (prescaler / 2)) / prescaler);
 800a432:	8b7b      	ldrh	r3, [r7, #26]
 800a434:	085b      	lsrs	r3, r3, #1
 800a436:	b29b      	uxth	r3, r3
 800a438:	461a      	mov	r2, r3
 800a43a:	69fb      	ldr	r3, [r7, #28]
 800a43c:	441a      	add	r2, r3
 800a43e:	8b7b      	ldrh	r3, [r7, #26]
 800a440:	fbb2 f3f3 	udiv	r3, r2, r3
 800a444:	833b      	strh	r3, [r7, #24]
	__HAL_TIM_SET_PRESCALER(RCx->htimx, prescaler);
 800a446:	697b      	ldr	r3, [r7, #20]
 800a448:	681b      	ldr	r3, [r3, #0]
 800a44a:	681b      	ldr	r3, [r3, #0]
 800a44c:	8b7a      	ldrh	r2, [r7, #26]
 800a44e:	629a      	str	r2, [r3, #40]	@ 0x28
	__HAL_TIM_SET_AUTORELOAD(RCx->htimx, overflow);
 800a450:	697b      	ldr	r3, [r7, #20]
 800a452:	681b      	ldr	r3, [r3, #0]
 800a454:	681b      	ldr	r3, [r3, #0]
 800a456:	8b3a      	ldrh	r2, [r7, #24]
 800a458:	62da      	str	r2, [r3, #44]	@ 0x2c
 800a45a:	697b      	ldr	r3, [r7, #20]
 800a45c:	681b      	ldr	r3, [r3, #0]
 800a45e:	8b3a      	ldrh	r2, [r7, #24]
 800a460:	60da      	str	r2, [r3, #12]
	RCx->gain = overflow / 20.0;
 800a462:	8b3b      	ldrh	r3, [r7, #24]
 800a464:	4618      	mov	r0, r3
 800a466:	f7f6 f86d 	bl	8000544 <__aeabi_i2d>
 800a46a:	f04f 0200 	mov.w	r2, #0
 800a46e:	4b0a      	ldr	r3, [pc, #40]	@ (800a498 <RC_Init+0x114>)
 800a470:	f7f6 f9fc 	bl	800086c <__aeabi_ddiv>
 800a474:	4602      	mov	r2, r0
 800a476:	460b      	mov	r3, r1
 800a478:	4610      	mov	r0, r2
 800a47a:	4619      	mov	r1, r3
 800a47c:	f7f6 fb9c 	bl	8000bb8 <__aeabi_d2f>
 800a480:	4602      	mov	r2, r0
 800a482:	697b      	ldr	r3, [r7, #20]
 800a484:	609a      	str	r2, [r3, #8]
	return 0;
 800a486:	2300      	movs	r3, #0
}
 800a488:	4618      	mov	r0, r3
 800a48a:	3720      	adds	r7, #32
 800a48c:	46bd      	mov	sp, r7
 800a48e:	bd80      	pop	{r7, pc}
 800a490:	40490000 	.word	0x40490000
 800a494:	80008001 	.word	0x80008001
 800a498:	40340000 	.word	0x40340000

0800a49c <RC_Set_Input_Range>:

void RC_Set_Input_Range(RC_Structure *RCx, float _min, float _max)
{
 800a49c:	b480      	push	{r7}
 800a49e:	b087      	sub	sp, #28
 800a4a0:	af00      	add	r7, sp, #0
 800a4a2:	60f8      	str	r0, [r7, #12]
 800a4a4:	ed87 0a02 	vstr	s0, [r7, #8]
 800a4a8:	edc7 0a01 	vstr	s1, [r7, #4]
	float m = (2.5 - 0.5) / (_max - _min);
 800a4ac:	ed97 7a01 	vldr	s14, [r7, #4]
 800a4b0:	edd7 7a02 	vldr	s15, [r7, #8]
 800a4b4:	ee37 7a67 	vsub.f32	s14, s14, s15
 800a4b8:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 800a4bc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a4c0:	edc7 7a05 	vstr	s15, [r7, #20]
	float c = 0.5 - (m * _min);
 800a4c4:	ed97 7a05 	vldr	s14, [r7, #20]
 800a4c8:	edd7 7a02 	vldr	s15, [r7, #8]
 800a4cc:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a4d0:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 800a4d4:	ee77 7a67 	vsub.f32	s15, s14, s15
 800a4d8:	edc7 7a04 	vstr	s15, [r7, #16]

	RCx->offset = RCx->gain * c;
 800a4dc:	68fb      	ldr	r3, [r7, #12]
 800a4de:	ed93 7a02 	vldr	s14, [r3, #8]
 800a4e2:	edd7 7a04 	vldr	s15, [r7, #16]
 800a4e6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a4ea:	68fb      	ldr	r3, [r7, #12]
 800a4ec:	edc3 7a03 	vstr	s15, [r3, #12]
	RCx->gain *= m;
 800a4f0:	68fb      	ldr	r3, [r7, #12]
 800a4f2:	ed93 7a02 	vldr	s14, [r3, #8]
 800a4f6:	edd7 7a05 	vldr	s15, [r7, #20]
 800a4fa:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a4fe:	68fb      	ldr	r3, [r7, #12]
 800a500:	edc3 7a02 	vstr	s15, [r3, #8]
}
 800a504:	bf00      	nop
 800a506:	371c      	adds	r7, #28
 800a508:	46bd      	mov	sp, r7
 800a50a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a50e:	4770      	bx	lr

0800a510 <RC_Write>:

void RC_Write(RC_Structure *RCx, float cmd)
{
 800a510:	b480      	push	{r7}
 800a512:	b085      	sub	sp, #20
 800a514:	af00      	add	r7, sp, #0
 800a516:	6078      	str	r0, [r7, #4]
 800a518:	ed87 0a00 	vstr	s0, [r7]
	float pwm = (RCx->gain * cmd) + RCx->offset;
 800a51c:	687b      	ldr	r3, [r7, #4]
 800a51e:	ed93 7a02 	vldr	s14, [r3, #8]
 800a522:	edd7 7a00 	vldr	s15, [r7]
 800a526:	ee27 7a27 	vmul.f32	s14, s14, s15
 800a52a:	687b      	ldr	r3, [r7, #4]
 800a52c:	edd3 7a03 	vldr	s15, [r3, #12]
 800a530:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a534:	edc7 7a03 	vstr	s15, [r7, #12]
	__HAL_TIM_SET_COMPARE(RCx->htimx, RCx->channelx, (uint16_t) pwm);
 800a538:	687b      	ldr	r3, [r7, #4]
 800a53a:	685b      	ldr	r3, [r3, #4]
 800a53c:	2b00      	cmp	r3, #0
 800a53e:	d10b      	bne.n	800a558 <RC_Write+0x48>
 800a540:	edd7 7a03 	vldr	s15, [r7, #12]
 800a544:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a548:	ee17 3a90 	vmov	r3, s15
 800a54c:	b29a      	uxth	r2, r3
 800a54e:	687b      	ldr	r3, [r7, #4]
 800a550:	681b      	ldr	r3, [r3, #0]
 800a552:	681b      	ldr	r3, [r3, #0]
 800a554:	635a      	str	r2, [r3, #52]	@ 0x34
}
 800a556:	e04f      	b.n	800a5f8 <RC_Write+0xe8>
	__HAL_TIM_SET_COMPARE(RCx->htimx, RCx->channelx, (uint16_t) pwm);
 800a558:	687b      	ldr	r3, [r7, #4]
 800a55a:	685b      	ldr	r3, [r3, #4]
 800a55c:	2b04      	cmp	r3, #4
 800a55e:	d10c      	bne.n	800a57a <RC_Write+0x6a>
 800a560:	edd7 7a03 	vldr	s15, [r7, #12]
 800a564:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a568:	ee17 3a90 	vmov	r3, s15
 800a56c:	b299      	uxth	r1, r3
 800a56e:	687b      	ldr	r3, [r7, #4]
 800a570:	681b      	ldr	r3, [r3, #0]
 800a572:	681a      	ldr	r2, [r3, #0]
 800a574:	460b      	mov	r3, r1
 800a576:	6393      	str	r3, [r2, #56]	@ 0x38
}
 800a578:	e03e      	b.n	800a5f8 <RC_Write+0xe8>
	__HAL_TIM_SET_COMPARE(RCx->htimx, RCx->channelx, (uint16_t) pwm);
 800a57a:	687b      	ldr	r3, [r7, #4]
 800a57c:	685b      	ldr	r3, [r3, #4]
 800a57e:	2b08      	cmp	r3, #8
 800a580:	d10c      	bne.n	800a59c <RC_Write+0x8c>
 800a582:	edd7 7a03 	vldr	s15, [r7, #12]
 800a586:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a58a:	ee17 3a90 	vmov	r3, s15
 800a58e:	b299      	uxth	r1, r3
 800a590:	687b      	ldr	r3, [r7, #4]
 800a592:	681b      	ldr	r3, [r3, #0]
 800a594:	681a      	ldr	r2, [r3, #0]
 800a596:	460b      	mov	r3, r1
 800a598:	63d3      	str	r3, [r2, #60]	@ 0x3c
}
 800a59a:	e02d      	b.n	800a5f8 <RC_Write+0xe8>
	__HAL_TIM_SET_COMPARE(RCx->htimx, RCx->channelx, (uint16_t) pwm);
 800a59c:	687b      	ldr	r3, [r7, #4]
 800a59e:	685b      	ldr	r3, [r3, #4]
 800a5a0:	2b0c      	cmp	r3, #12
 800a5a2:	d10c      	bne.n	800a5be <RC_Write+0xae>
 800a5a4:	edd7 7a03 	vldr	s15, [r7, #12]
 800a5a8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a5ac:	ee17 3a90 	vmov	r3, s15
 800a5b0:	b299      	uxth	r1, r3
 800a5b2:	687b      	ldr	r3, [r7, #4]
 800a5b4:	681b      	ldr	r3, [r3, #0]
 800a5b6:	681a      	ldr	r2, [r3, #0]
 800a5b8:	460b      	mov	r3, r1
 800a5ba:	6413      	str	r3, [r2, #64]	@ 0x40
}
 800a5bc:	e01c      	b.n	800a5f8 <RC_Write+0xe8>
	__HAL_TIM_SET_COMPARE(RCx->htimx, RCx->channelx, (uint16_t) pwm);
 800a5be:	687b      	ldr	r3, [r7, #4]
 800a5c0:	685b      	ldr	r3, [r3, #4]
 800a5c2:	2b10      	cmp	r3, #16
 800a5c4:	d10c      	bne.n	800a5e0 <RC_Write+0xd0>
 800a5c6:	edd7 7a03 	vldr	s15, [r7, #12]
 800a5ca:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a5ce:	ee17 3a90 	vmov	r3, s15
 800a5d2:	b299      	uxth	r1, r3
 800a5d4:	687b      	ldr	r3, [r7, #4]
 800a5d6:	681b      	ldr	r3, [r3, #0]
 800a5d8:	681a      	ldr	r2, [r3, #0]
 800a5da:	460b      	mov	r3, r1
 800a5dc:	6593      	str	r3, [r2, #88]	@ 0x58
}
 800a5de:	e00b      	b.n	800a5f8 <RC_Write+0xe8>
	__HAL_TIM_SET_COMPARE(RCx->htimx, RCx->channelx, (uint16_t) pwm);
 800a5e0:	edd7 7a03 	vldr	s15, [r7, #12]
 800a5e4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a5e8:	ee17 3a90 	vmov	r3, s15
 800a5ec:	b299      	uxth	r1, r3
 800a5ee:	687b      	ldr	r3, [r7, #4]
 800a5f0:	681b      	ldr	r3, [r3, #0]
 800a5f2:	681a      	ldr	r2, [r3, #0]
 800a5f4:	460b      	mov	r3, r1
 800a5f6:	65d3      	str	r3, [r2, #92]	@ 0x5c
}
 800a5f8:	bf00      	nop
 800a5fa:	3714      	adds	r7, #20
 800a5fc:	46bd      	mov	sp, r7
 800a5fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a602:	4770      	bx	lr

0800a604 <__NVIC_SetPriority>:
{
 800a604:	b480      	push	{r7}
 800a606:	b083      	sub	sp, #12
 800a608:	af00      	add	r7, sp, #0
 800a60a:	4603      	mov	r3, r0
 800a60c:	6039      	str	r1, [r7, #0]
 800a60e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800a610:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a614:	2b00      	cmp	r3, #0
 800a616:	db0a      	blt.n	800a62e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800a618:	683b      	ldr	r3, [r7, #0]
 800a61a:	b2da      	uxtb	r2, r3
 800a61c:	490c      	ldr	r1, [pc, #48]	@ (800a650 <__NVIC_SetPriority+0x4c>)
 800a61e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a622:	0112      	lsls	r2, r2, #4
 800a624:	b2d2      	uxtb	r2, r2
 800a626:	440b      	add	r3, r1
 800a628:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 800a62c:	e00a      	b.n	800a644 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800a62e:	683b      	ldr	r3, [r7, #0]
 800a630:	b2da      	uxtb	r2, r3
 800a632:	4908      	ldr	r1, [pc, #32]	@ (800a654 <__NVIC_SetPriority+0x50>)
 800a634:	79fb      	ldrb	r3, [r7, #7]
 800a636:	f003 030f 	and.w	r3, r3, #15
 800a63a:	3b04      	subs	r3, #4
 800a63c:	0112      	lsls	r2, r2, #4
 800a63e:	b2d2      	uxtb	r2, r2
 800a640:	440b      	add	r3, r1
 800a642:	761a      	strb	r2, [r3, #24]
}
 800a644:	bf00      	nop
 800a646:	370c      	adds	r7, #12
 800a648:	46bd      	mov	sp, r7
 800a64a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a64e:	4770      	bx	lr
 800a650:	e000e100 	.word	0xe000e100
 800a654:	e000ed00 	.word	0xe000ed00

0800a658 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 800a658:	b580      	push	{r7, lr}
 800a65a:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 800a65c:	4b05      	ldr	r3, [pc, #20]	@ (800a674 <SysTick_Handler+0x1c>)
 800a65e:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 800a660:	f001 fd6e 	bl	800c140 <xTaskGetSchedulerState>
 800a664:	4603      	mov	r3, r0
 800a666:	2b01      	cmp	r3, #1
 800a668:	d001      	beq.n	800a66e <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800a66a:	f002 fb65 	bl	800cd38 <xPortSysTickHandler>
  }
}
 800a66e:	bf00      	nop
 800a670:	bd80      	pop	{r7, pc}
 800a672:	bf00      	nop
 800a674:	e000e010 	.word	0xe000e010

0800a678 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800a678:	b580      	push	{r7, lr}
 800a67a:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800a67c:	2100      	movs	r1, #0
 800a67e:	f06f 0004 	mvn.w	r0, #4
 800a682:	f7ff ffbf 	bl	800a604 <__NVIC_SetPriority>
#endif
}
 800a686:	bf00      	nop
 800a688:	bd80      	pop	{r7, pc}
	...

0800a68c <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800a68c:	b480      	push	{r7}
 800a68e:	b083      	sub	sp, #12
 800a690:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a692:	f3ef 8305 	mrs	r3, IPSR
 800a696:	603b      	str	r3, [r7, #0]
  return(result);
 800a698:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800a69a:	2b00      	cmp	r3, #0
 800a69c:	d003      	beq.n	800a6a6 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800a69e:	f06f 0305 	mvn.w	r3, #5
 800a6a2:	607b      	str	r3, [r7, #4]
 800a6a4:	e00c      	b.n	800a6c0 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800a6a6:	4b0a      	ldr	r3, [pc, #40]	@ (800a6d0 <osKernelInitialize+0x44>)
 800a6a8:	681b      	ldr	r3, [r3, #0]
 800a6aa:	2b00      	cmp	r3, #0
 800a6ac:	d105      	bne.n	800a6ba <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800a6ae:	4b08      	ldr	r3, [pc, #32]	@ (800a6d0 <osKernelInitialize+0x44>)
 800a6b0:	2201      	movs	r2, #1
 800a6b2:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800a6b4:	2300      	movs	r3, #0
 800a6b6:	607b      	str	r3, [r7, #4]
 800a6b8:	e002      	b.n	800a6c0 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800a6ba:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800a6be:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800a6c0:	687b      	ldr	r3, [r7, #4]
}
 800a6c2:	4618      	mov	r0, r3
 800a6c4:	370c      	adds	r7, #12
 800a6c6:	46bd      	mov	sp, r7
 800a6c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6cc:	4770      	bx	lr
 800a6ce:	bf00      	nop
 800a6d0:	20005d44 	.word	0x20005d44

0800a6d4 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800a6d4:	b580      	push	{r7, lr}
 800a6d6:	b082      	sub	sp, #8
 800a6d8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a6da:	f3ef 8305 	mrs	r3, IPSR
 800a6de:	603b      	str	r3, [r7, #0]
  return(result);
 800a6e0:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800a6e2:	2b00      	cmp	r3, #0
 800a6e4:	d003      	beq.n	800a6ee <osKernelStart+0x1a>
    stat = osErrorISR;
 800a6e6:	f06f 0305 	mvn.w	r3, #5
 800a6ea:	607b      	str	r3, [r7, #4]
 800a6ec:	e010      	b.n	800a710 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800a6ee:	4b0b      	ldr	r3, [pc, #44]	@ (800a71c <osKernelStart+0x48>)
 800a6f0:	681b      	ldr	r3, [r3, #0]
 800a6f2:	2b01      	cmp	r3, #1
 800a6f4:	d109      	bne.n	800a70a <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800a6f6:	f7ff ffbf 	bl	800a678 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800a6fa:	4b08      	ldr	r3, [pc, #32]	@ (800a71c <osKernelStart+0x48>)
 800a6fc:	2202      	movs	r2, #2
 800a6fe:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800a700:	f001 f892 	bl	800b828 <vTaskStartScheduler>
      stat = osOK;
 800a704:	2300      	movs	r3, #0
 800a706:	607b      	str	r3, [r7, #4]
 800a708:	e002      	b.n	800a710 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800a70a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800a70e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800a710:	687b      	ldr	r3, [r7, #4]
}
 800a712:	4618      	mov	r0, r3
 800a714:	3708      	adds	r7, #8
 800a716:	46bd      	mov	sp, r7
 800a718:	bd80      	pop	{r7, pc}
 800a71a:	bf00      	nop
 800a71c:	20005d44 	.word	0x20005d44

0800a720 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800a720:	b580      	push	{r7, lr}
 800a722:	b08e      	sub	sp, #56	@ 0x38
 800a724:	af04      	add	r7, sp, #16
 800a726:	60f8      	str	r0, [r7, #12]
 800a728:	60b9      	str	r1, [r7, #8]
 800a72a:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800a72c:	2300      	movs	r3, #0
 800a72e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a730:	f3ef 8305 	mrs	r3, IPSR
 800a734:	617b      	str	r3, [r7, #20]
  return(result);
 800a736:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800a738:	2b00      	cmp	r3, #0
 800a73a:	d17e      	bne.n	800a83a <osThreadNew+0x11a>
 800a73c:	68fb      	ldr	r3, [r7, #12]
 800a73e:	2b00      	cmp	r3, #0
 800a740:	d07b      	beq.n	800a83a <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800a742:	2380      	movs	r3, #128	@ 0x80
 800a744:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800a746:	2318      	movs	r3, #24
 800a748:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800a74a:	2300      	movs	r3, #0
 800a74c:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 800a74e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800a752:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800a754:	687b      	ldr	r3, [r7, #4]
 800a756:	2b00      	cmp	r3, #0
 800a758:	d045      	beq.n	800a7e6 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800a75a:	687b      	ldr	r3, [r7, #4]
 800a75c:	681b      	ldr	r3, [r3, #0]
 800a75e:	2b00      	cmp	r3, #0
 800a760:	d002      	beq.n	800a768 <osThreadNew+0x48>
        name = attr->name;
 800a762:	687b      	ldr	r3, [r7, #4]
 800a764:	681b      	ldr	r3, [r3, #0]
 800a766:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 800a768:	687b      	ldr	r3, [r7, #4]
 800a76a:	699b      	ldr	r3, [r3, #24]
 800a76c:	2b00      	cmp	r3, #0
 800a76e:	d002      	beq.n	800a776 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 800a770:	687b      	ldr	r3, [r7, #4]
 800a772:	699b      	ldr	r3, [r3, #24]
 800a774:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800a776:	69fb      	ldr	r3, [r7, #28]
 800a778:	2b00      	cmp	r3, #0
 800a77a:	d008      	beq.n	800a78e <osThreadNew+0x6e>
 800a77c:	69fb      	ldr	r3, [r7, #28]
 800a77e:	2b38      	cmp	r3, #56	@ 0x38
 800a780:	d805      	bhi.n	800a78e <osThreadNew+0x6e>
 800a782:	687b      	ldr	r3, [r7, #4]
 800a784:	685b      	ldr	r3, [r3, #4]
 800a786:	f003 0301 	and.w	r3, r3, #1
 800a78a:	2b00      	cmp	r3, #0
 800a78c:	d001      	beq.n	800a792 <osThreadNew+0x72>
        return (NULL);
 800a78e:	2300      	movs	r3, #0
 800a790:	e054      	b.n	800a83c <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800a792:	687b      	ldr	r3, [r7, #4]
 800a794:	695b      	ldr	r3, [r3, #20]
 800a796:	2b00      	cmp	r3, #0
 800a798:	d003      	beq.n	800a7a2 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800a79a:	687b      	ldr	r3, [r7, #4]
 800a79c:	695b      	ldr	r3, [r3, #20]
 800a79e:	089b      	lsrs	r3, r3, #2
 800a7a0:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800a7a2:	687b      	ldr	r3, [r7, #4]
 800a7a4:	689b      	ldr	r3, [r3, #8]
 800a7a6:	2b00      	cmp	r3, #0
 800a7a8:	d00e      	beq.n	800a7c8 <osThreadNew+0xa8>
 800a7aa:	687b      	ldr	r3, [r7, #4]
 800a7ac:	68db      	ldr	r3, [r3, #12]
 800a7ae:	2ba7      	cmp	r3, #167	@ 0xa7
 800a7b0:	d90a      	bls.n	800a7c8 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800a7b2:	687b      	ldr	r3, [r7, #4]
 800a7b4:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800a7b6:	2b00      	cmp	r3, #0
 800a7b8:	d006      	beq.n	800a7c8 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800a7ba:	687b      	ldr	r3, [r7, #4]
 800a7bc:	695b      	ldr	r3, [r3, #20]
 800a7be:	2b00      	cmp	r3, #0
 800a7c0:	d002      	beq.n	800a7c8 <osThreadNew+0xa8>
        mem = 1;
 800a7c2:	2301      	movs	r3, #1
 800a7c4:	61bb      	str	r3, [r7, #24]
 800a7c6:	e010      	b.n	800a7ea <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800a7c8:	687b      	ldr	r3, [r7, #4]
 800a7ca:	689b      	ldr	r3, [r3, #8]
 800a7cc:	2b00      	cmp	r3, #0
 800a7ce:	d10c      	bne.n	800a7ea <osThreadNew+0xca>
 800a7d0:	687b      	ldr	r3, [r7, #4]
 800a7d2:	68db      	ldr	r3, [r3, #12]
 800a7d4:	2b00      	cmp	r3, #0
 800a7d6:	d108      	bne.n	800a7ea <osThreadNew+0xca>
 800a7d8:	687b      	ldr	r3, [r7, #4]
 800a7da:	691b      	ldr	r3, [r3, #16]
 800a7dc:	2b00      	cmp	r3, #0
 800a7de:	d104      	bne.n	800a7ea <osThreadNew+0xca>
          mem = 0;
 800a7e0:	2300      	movs	r3, #0
 800a7e2:	61bb      	str	r3, [r7, #24]
 800a7e4:	e001      	b.n	800a7ea <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800a7e6:	2300      	movs	r3, #0
 800a7e8:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800a7ea:	69bb      	ldr	r3, [r7, #24]
 800a7ec:	2b01      	cmp	r3, #1
 800a7ee:	d110      	bne.n	800a812 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800a7f0:	687b      	ldr	r3, [r7, #4]
 800a7f2:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800a7f4:	687a      	ldr	r2, [r7, #4]
 800a7f6:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800a7f8:	9202      	str	r2, [sp, #8]
 800a7fa:	9301      	str	r3, [sp, #4]
 800a7fc:	69fb      	ldr	r3, [r7, #28]
 800a7fe:	9300      	str	r3, [sp, #0]
 800a800:	68bb      	ldr	r3, [r7, #8]
 800a802:	6a3a      	ldr	r2, [r7, #32]
 800a804:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800a806:	68f8      	ldr	r0, [r7, #12]
 800a808:	f000 fe1a 	bl	800b440 <xTaskCreateStatic>
 800a80c:	4603      	mov	r3, r0
 800a80e:	613b      	str	r3, [r7, #16]
 800a810:	e013      	b.n	800a83a <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800a812:	69bb      	ldr	r3, [r7, #24]
 800a814:	2b00      	cmp	r3, #0
 800a816:	d110      	bne.n	800a83a <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800a818:	6a3b      	ldr	r3, [r7, #32]
 800a81a:	b29a      	uxth	r2, r3
 800a81c:	f107 0310 	add.w	r3, r7, #16
 800a820:	9301      	str	r3, [sp, #4]
 800a822:	69fb      	ldr	r3, [r7, #28]
 800a824:	9300      	str	r3, [sp, #0]
 800a826:	68bb      	ldr	r3, [r7, #8]
 800a828:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800a82a:	68f8      	ldr	r0, [r7, #12]
 800a82c:	f000 fe68 	bl	800b500 <xTaskCreate>
 800a830:	4603      	mov	r3, r0
 800a832:	2b01      	cmp	r3, #1
 800a834:	d001      	beq.n	800a83a <osThreadNew+0x11a>
            hTask = NULL;
 800a836:	2300      	movs	r3, #0
 800a838:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800a83a:	693b      	ldr	r3, [r7, #16]
}
 800a83c:	4618      	mov	r0, r3
 800a83e:	3728      	adds	r7, #40	@ 0x28
 800a840:	46bd      	mov	sp, r7
 800a842:	bd80      	pop	{r7, pc}

0800a844 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 800a844:	b580      	push	{r7, lr}
 800a846:	b084      	sub	sp, #16
 800a848:	af00      	add	r7, sp, #0
 800a84a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a84c:	f3ef 8305 	mrs	r3, IPSR
 800a850:	60bb      	str	r3, [r7, #8]
  return(result);
 800a852:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800a854:	2b00      	cmp	r3, #0
 800a856:	d003      	beq.n	800a860 <osDelay+0x1c>
    stat = osErrorISR;
 800a858:	f06f 0305 	mvn.w	r3, #5
 800a85c:	60fb      	str	r3, [r7, #12]
 800a85e:	e007      	b.n	800a870 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 800a860:	2300      	movs	r3, #0
 800a862:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 800a864:	687b      	ldr	r3, [r7, #4]
 800a866:	2b00      	cmp	r3, #0
 800a868:	d002      	beq.n	800a870 <osDelay+0x2c>
      vTaskDelay(ticks);
 800a86a:	6878      	ldr	r0, [r7, #4]
 800a86c:	f000 ffa6 	bl	800b7bc <vTaskDelay>
    }
  }

  return (stat);
 800a870:	68fb      	ldr	r3, [r7, #12]
}
 800a872:	4618      	mov	r0, r3
 800a874:	3710      	adds	r7, #16
 800a876:	46bd      	mov	sp, r7
 800a878:	bd80      	pop	{r7, pc}
	...

0800a87c <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800a87c:	b480      	push	{r7}
 800a87e:	b085      	sub	sp, #20
 800a880:	af00      	add	r7, sp, #0
 800a882:	60f8      	str	r0, [r7, #12]
 800a884:	60b9      	str	r1, [r7, #8]
 800a886:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800a888:	68fb      	ldr	r3, [r7, #12]
 800a88a:	4a07      	ldr	r2, [pc, #28]	@ (800a8a8 <vApplicationGetIdleTaskMemory+0x2c>)
 800a88c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800a88e:	68bb      	ldr	r3, [r7, #8]
 800a890:	4a06      	ldr	r2, [pc, #24]	@ (800a8ac <vApplicationGetIdleTaskMemory+0x30>)
 800a892:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800a894:	687b      	ldr	r3, [r7, #4]
 800a896:	2280      	movs	r2, #128	@ 0x80
 800a898:	601a      	str	r2, [r3, #0]
}
 800a89a:	bf00      	nop
 800a89c:	3714      	adds	r7, #20
 800a89e:	46bd      	mov	sp, r7
 800a8a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8a4:	4770      	bx	lr
 800a8a6:	bf00      	nop
 800a8a8:	20005d48 	.word	0x20005d48
 800a8ac:	20005df0 	.word	0x20005df0

0800a8b0 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800a8b0:	b480      	push	{r7}
 800a8b2:	b085      	sub	sp, #20
 800a8b4:	af00      	add	r7, sp, #0
 800a8b6:	60f8      	str	r0, [r7, #12]
 800a8b8:	60b9      	str	r1, [r7, #8]
 800a8ba:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800a8bc:	68fb      	ldr	r3, [r7, #12]
 800a8be:	4a07      	ldr	r2, [pc, #28]	@ (800a8dc <vApplicationGetTimerTaskMemory+0x2c>)
 800a8c0:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800a8c2:	68bb      	ldr	r3, [r7, #8]
 800a8c4:	4a06      	ldr	r2, [pc, #24]	@ (800a8e0 <vApplicationGetTimerTaskMemory+0x30>)
 800a8c6:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800a8c8:	687b      	ldr	r3, [r7, #4]
 800a8ca:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800a8ce:	601a      	str	r2, [r3, #0]
}
 800a8d0:	bf00      	nop
 800a8d2:	3714      	adds	r7, #20
 800a8d4:	46bd      	mov	sp, r7
 800a8d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8da:	4770      	bx	lr
 800a8dc:	20005ff0 	.word	0x20005ff0
 800a8e0:	20006098 	.word	0x20006098

0800a8e4 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800a8e4:	b480      	push	{r7}
 800a8e6:	b083      	sub	sp, #12
 800a8e8:	af00      	add	r7, sp, #0
 800a8ea:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a8ec:	687b      	ldr	r3, [r7, #4]
 800a8ee:	f103 0208 	add.w	r2, r3, #8
 800a8f2:	687b      	ldr	r3, [r7, #4]
 800a8f4:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800a8f6:	687b      	ldr	r3, [r7, #4]
 800a8f8:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800a8fc:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a8fe:	687b      	ldr	r3, [r7, #4]
 800a900:	f103 0208 	add.w	r2, r3, #8
 800a904:	687b      	ldr	r3, [r7, #4]
 800a906:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a908:	687b      	ldr	r3, [r7, #4]
 800a90a:	f103 0208 	add.w	r2, r3, #8
 800a90e:	687b      	ldr	r3, [r7, #4]
 800a910:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800a912:	687b      	ldr	r3, [r7, #4]
 800a914:	2200      	movs	r2, #0
 800a916:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800a918:	bf00      	nop
 800a91a:	370c      	adds	r7, #12
 800a91c:	46bd      	mov	sp, r7
 800a91e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a922:	4770      	bx	lr

0800a924 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800a924:	b480      	push	{r7}
 800a926:	b083      	sub	sp, #12
 800a928:	af00      	add	r7, sp, #0
 800a92a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800a92c:	687b      	ldr	r3, [r7, #4]
 800a92e:	2200      	movs	r2, #0
 800a930:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800a932:	bf00      	nop
 800a934:	370c      	adds	r7, #12
 800a936:	46bd      	mov	sp, r7
 800a938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a93c:	4770      	bx	lr

0800a93e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800a93e:	b480      	push	{r7}
 800a940:	b085      	sub	sp, #20
 800a942:	af00      	add	r7, sp, #0
 800a944:	6078      	str	r0, [r7, #4]
 800a946:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800a948:	687b      	ldr	r3, [r7, #4]
 800a94a:	685b      	ldr	r3, [r3, #4]
 800a94c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800a94e:	683b      	ldr	r3, [r7, #0]
 800a950:	68fa      	ldr	r2, [r7, #12]
 800a952:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800a954:	68fb      	ldr	r3, [r7, #12]
 800a956:	689a      	ldr	r2, [r3, #8]
 800a958:	683b      	ldr	r3, [r7, #0]
 800a95a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800a95c:	68fb      	ldr	r3, [r7, #12]
 800a95e:	689b      	ldr	r3, [r3, #8]
 800a960:	683a      	ldr	r2, [r7, #0]
 800a962:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800a964:	68fb      	ldr	r3, [r7, #12]
 800a966:	683a      	ldr	r2, [r7, #0]
 800a968:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800a96a:	683b      	ldr	r3, [r7, #0]
 800a96c:	687a      	ldr	r2, [r7, #4]
 800a96e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800a970:	687b      	ldr	r3, [r7, #4]
 800a972:	681b      	ldr	r3, [r3, #0]
 800a974:	1c5a      	adds	r2, r3, #1
 800a976:	687b      	ldr	r3, [r7, #4]
 800a978:	601a      	str	r2, [r3, #0]
}
 800a97a:	bf00      	nop
 800a97c:	3714      	adds	r7, #20
 800a97e:	46bd      	mov	sp, r7
 800a980:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a984:	4770      	bx	lr

0800a986 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800a986:	b480      	push	{r7}
 800a988:	b085      	sub	sp, #20
 800a98a:	af00      	add	r7, sp, #0
 800a98c:	6078      	str	r0, [r7, #4]
 800a98e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800a990:	683b      	ldr	r3, [r7, #0]
 800a992:	681b      	ldr	r3, [r3, #0]
 800a994:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800a996:	68bb      	ldr	r3, [r7, #8]
 800a998:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800a99c:	d103      	bne.n	800a9a6 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800a99e:	687b      	ldr	r3, [r7, #4]
 800a9a0:	691b      	ldr	r3, [r3, #16]
 800a9a2:	60fb      	str	r3, [r7, #12]
 800a9a4:	e00c      	b.n	800a9c0 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800a9a6:	687b      	ldr	r3, [r7, #4]
 800a9a8:	3308      	adds	r3, #8
 800a9aa:	60fb      	str	r3, [r7, #12]
 800a9ac:	e002      	b.n	800a9b4 <vListInsert+0x2e>
 800a9ae:	68fb      	ldr	r3, [r7, #12]
 800a9b0:	685b      	ldr	r3, [r3, #4]
 800a9b2:	60fb      	str	r3, [r7, #12]
 800a9b4:	68fb      	ldr	r3, [r7, #12]
 800a9b6:	685b      	ldr	r3, [r3, #4]
 800a9b8:	681b      	ldr	r3, [r3, #0]
 800a9ba:	68ba      	ldr	r2, [r7, #8]
 800a9bc:	429a      	cmp	r2, r3
 800a9be:	d2f6      	bcs.n	800a9ae <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800a9c0:	68fb      	ldr	r3, [r7, #12]
 800a9c2:	685a      	ldr	r2, [r3, #4]
 800a9c4:	683b      	ldr	r3, [r7, #0]
 800a9c6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800a9c8:	683b      	ldr	r3, [r7, #0]
 800a9ca:	685b      	ldr	r3, [r3, #4]
 800a9cc:	683a      	ldr	r2, [r7, #0]
 800a9ce:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800a9d0:	683b      	ldr	r3, [r7, #0]
 800a9d2:	68fa      	ldr	r2, [r7, #12]
 800a9d4:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800a9d6:	68fb      	ldr	r3, [r7, #12]
 800a9d8:	683a      	ldr	r2, [r7, #0]
 800a9da:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800a9dc:	683b      	ldr	r3, [r7, #0]
 800a9de:	687a      	ldr	r2, [r7, #4]
 800a9e0:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800a9e2:	687b      	ldr	r3, [r7, #4]
 800a9e4:	681b      	ldr	r3, [r3, #0]
 800a9e6:	1c5a      	adds	r2, r3, #1
 800a9e8:	687b      	ldr	r3, [r7, #4]
 800a9ea:	601a      	str	r2, [r3, #0]
}
 800a9ec:	bf00      	nop
 800a9ee:	3714      	adds	r7, #20
 800a9f0:	46bd      	mov	sp, r7
 800a9f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9f6:	4770      	bx	lr

0800a9f8 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800a9f8:	b480      	push	{r7}
 800a9fa:	b085      	sub	sp, #20
 800a9fc:	af00      	add	r7, sp, #0
 800a9fe:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800aa00:	687b      	ldr	r3, [r7, #4]
 800aa02:	691b      	ldr	r3, [r3, #16]
 800aa04:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800aa06:	687b      	ldr	r3, [r7, #4]
 800aa08:	685b      	ldr	r3, [r3, #4]
 800aa0a:	687a      	ldr	r2, [r7, #4]
 800aa0c:	6892      	ldr	r2, [r2, #8]
 800aa0e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800aa10:	687b      	ldr	r3, [r7, #4]
 800aa12:	689b      	ldr	r3, [r3, #8]
 800aa14:	687a      	ldr	r2, [r7, #4]
 800aa16:	6852      	ldr	r2, [r2, #4]
 800aa18:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800aa1a:	68fb      	ldr	r3, [r7, #12]
 800aa1c:	685b      	ldr	r3, [r3, #4]
 800aa1e:	687a      	ldr	r2, [r7, #4]
 800aa20:	429a      	cmp	r2, r3
 800aa22:	d103      	bne.n	800aa2c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800aa24:	687b      	ldr	r3, [r7, #4]
 800aa26:	689a      	ldr	r2, [r3, #8]
 800aa28:	68fb      	ldr	r3, [r7, #12]
 800aa2a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800aa2c:	687b      	ldr	r3, [r7, #4]
 800aa2e:	2200      	movs	r2, #0
 800aa30:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800aa32:	68fb      	ldr	r3, [r7, #12]
 800aa34:	681b      	ldr	r3, [r3, #0]
 800aa36:	1e5a      	subs	r2, r3, #1
 800aa38:	68fb      	ldr	r3, [r7, #12]
 800aa3a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800aa3c:	68fb      	ldr	r3, [r7, #12]
 800aa3e:	681b      	ldr	r3, [r3, #0]
}
 800aa40:	4618      	mov	r0, r3
 800aa42:	3714      	adds	r7, #20
 800aa44:	46bd      	mov	sp, r7
 800aa46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa4a:	4770      	bx	lr

0800aa4c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800aa4c:	b580      	push	{r7, lr}
 800aa4e:	b084      	sub	sp, #16
 800aa50:	af00      	add	r7, sp, #0
 800aa52:	6078      	str	r0, [r7, #4]
 800aa54:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800aa56:	687b      	ldr	r3, [r7, #4]
 800aa58:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800aa5a:	68fb      	ldr	r3, [r7, #12]
 800aa5c:	2b00      	cmp	r3, #0
 800aa5e:	d10b      	bne.n	800aa78 <xQueueGenericReset+0x2c>
	__asm volatile
 800aa60:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800aa64:	f383 8811 	msr	BASEPRI, r3
 800aa68:	f3bf 8f6f 	isb	sy
 800aa6c:	f3bf 8f4f 	dsb	sy
 800aa70:	60bb      	str	r3, [r7, #8]
}
 800aa72:	bf00      	nop
 800aa74:	bf00      	nop
 800aa76:	e7fd      	b.n	800aa74 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800aa78:	f002 f8ce 	bl	800cc18 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800aa7c:	68fb      	ldr	r3, [r7, #12]
 800aa7e:	681a      	ldr	r2, [r3, #0]
 800aa80:	68fb      	ldr	r3, [r7, #12]
 800aa82:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800aa84:	68f9      	ldr	r1, [r7, #12]
 800aa86:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800aa88:	fb01 f303 	mul.w	r3, r1, r3
 800aa8c:	441a      	add	r2, r3
 800aa8e:	68fb      	ldr	r3, [r7, #12]
 800aa90:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800aa92:	68fb      	ldr	r3, [r7, #12]
 800aa94:	2200      	movs	r2, #0
 800aa96:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800aa98:	68fb      	ldr	r3, [r7, #12]
 800aa9a:	681a      	ldr	r2, [r3, #0]
 800aa9c:	68fb      	ldr	r3, [r7, #12]
 800aa9e:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800aaa0:	68fb      	ldr	r3, [r7, #12]
 800aaa2:	681a      	ldr	r2, [r3, #0]
 800aaa4:	68fb      	ldr	r3, [r7, #12]
 800aaa6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800aaa8:	3b01      	subs	r3, #1
 800aaaa:	68f9      	ldr	r1, [r7, #12]
 800aaac:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800aaae:	fb01 f303 	mul.w	r3, r1, r3
 800aab2:	441a      	add	r2, r3
 800aab4:	68fb      	ldr	r3, [r7, #12]
 800aab6:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800aab8:	68fb      	ldr	r3, [r7, #12]
 800aaba:	22ff      	movs	r2, #255	@ 0xff
 800aabc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800aac0:	68fb      	ldr	r3, [r7, #12]
 800aac2:	22ff      	movs	r2, #255	@ 0xff
 800aac4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 800aac8:	683b      	ldr	r3, [r7, #0]
 800aaca:	2b00      	cmp	r3, #0
 800aacc:	d114      	bne.n	800aaf8 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800aace:	68fb      	ldr	r3, [r7, #12]
 800aad0:	691b      	ldr	r3, [r3, #16]
 800aad2:	2b00      	cmp	r3, #0
 800aad4:	d01a      	beq.n	800ab0c <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800aad6:	68fb      	ldr	r3, [r7, #12]
 800aad8:	3310      	adds	r3, #16
 800aada:	4618      	mov	r0, r3
 800aadc:	f001 f942 	bl	800bd64 <xTaskRemoveFromEventList>
 800aae0:	4603      	mov	r3, r0
 800aae2:	2b00      	cmp	r3, #0
 800aae4:	d012      	beq.n	800ab0c <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800aae6:	4b0d      	ldr	r3, [pc, #52]	@ (800ab1c <xQueueGenericReset+0xd0>)
 800aae8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800aaec:	601a      	str	r2, [r3, #0]
 800aaee:	f3bf 8f4f 	dsb	sy
 800aaf2:	f3bf 8f6f 	isb	sy
 800aaf6:	e009      	b.n	800ab0c <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800aaf8:	68fb      	ldr	r3, [r7, #12]
 800aafa:	3310      	adds	r3, #16
 800aafc:	4618      	mov	r0, r3
 800aafe:	f7ff fef1 	bl	800a8e4 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800ab02:	68fb      	ldr	r3, [r7, #12]
 800ab04:	3324      	adds	r3, #36	@ 0x24
 800ab06:	4618      	mov	r0, r3
 800ab08:	f7ff feec 	bl	800a8e4 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800ab0c:	f002 f8b6 	bl	800cc7c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800ab10:	2301      	movs	r3, #1
}
 800ab12:	4618      	mov	r0, r3
 800ab14:	3710      	adds	r7, #16
 800ab16:	46bd      	mov	sp, r7
 800ab18:	bd80      	pop	{r7, pc}
 800ab1a:	bf00      	nop
 800ab1c:	e000ed04 	.word	0xe000ed04

0800ab20 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800ab20:	b580      	push	{r7, lr}
 800ab22:	b08e      	sub	sp, #56	@ 0x38
 800ab24:	af02      	add	r7, sp, #8
 800ab26:	60f8      	str	r0, [r7, #12]
 800ab28:	60b9      	str	r1, [r7, #8]
 800ab2a:	607a      	str	r2, [r7, #4]
 800ab2c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800ab2e:	68fb      	ldr	r3, [r7, #12]
 800ab30:	2b00      	cmp	r3, #0
 800ab32:	d10b      	bne.n	800ab4c <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 800ab34:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ab38:	f383 8811 	msr	BASEPRI, r3
 800ab3c:	f3bf 8f6f 	isb	sy
 800ab40:	f3bf 8f4f 	dsb	sy
 800ab44:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800ab46:	bf00      	nop
 800ab48:	bf00      	nop
 800ab4a:	e7fd      	b.n	800ab48 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800ab4c:	683b      	ldr	r3, [r7, #0]
 800ab4e:	2b00      	cmp	r3, #0
 800ab50:	d10b      	bne.n	800ab6a <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 800ab52:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ab56:	f383 8811 	msr	BASEPRI, r3
 800ab5a:	f3bf 8f6f 	isb	sy
 800ab5e:	f3bf 8f4f 	dsb	sy
 800ab62:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800ab64:	bf00      	nop
 800ab66:	bf00      	nop
 800ab68:	e7fd      	b.n	800ab66 <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800ab6a:	687b      	ldr	r3, [r7, #4]
 800ab6c:	2b00      	cmp	r3, #0
 800ab6e:	d002      	beq.n	800ab76 <xQueueGenericCreateStatic+0x56>
 800ab70:	68bb      	ldr	r3, [r7, #8]
 800ab72:	2b00      	cmp	r3, #0
 800ab74:	d001      	beq.n	800ab7a <xQueueGenericCreateStatic+0x5a>
 800ab76:	2301      	movs	r3, #1
 800ab78:	e000      	b.n	800ab7c <xQueueGenericCreateStatic+0x5c>
 800ab7a:	2300      	movs	r3, #0
 800ab7c:	2b00      	cmp	r3, #0
 800ab7e:	d10b      	bne.n	800ab98 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 800ab80:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ab84:	f383 8811 	msr	BASEPRI, r3
 800ab88:	f3bf 8f6f 	isb	sy
 800ab8c:	f3bf 8f4f 	dsb	sy
 800ab90:	623b      	str	r3, [r7, #32]
}
 800ab92:	bf00      	nop
 800ab94:	bf00      	nop
 800ab96:	e7fd      	b.n	800ab94 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800ab98:	687b      	ldr	r3, [r7, #4]
 800ab9a:	2b00      	cmp	r3, #0
 800ab9c:	d102      	bne.n	800aba4 <xQueueGenericCreateStatic+0x84>
 800ab9e:	68bb      	ldr	r3, [r7, #8]
 800aba0:	2b00      	cmp	r3, #0
 800aba2:	d101      	bne.n	800aba8 <xQueueGenericCreateStatic+0x88>
 800aba4:	2301      	movs	r3, #1
 800aba6:	e000      	b.n	800abaa <xQueueGenericCreateStatic+0x8a>
 800aba8:	2300      	movs	r3, #0
 800abaa:	2b00      	cmp	r3, #0
 800abac:	d10b      	bne.n	800abc6 <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 800abae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800abb2:	f383 8811 	msr	BASEPRI, r3
 800abb6:	f3bf 8f6f 	isb	sy
 800abba:	f3bf 8f4f 	dsb	sy
 800abbe:	61fb      	str	r3, [r7, #28]
}
 800abc0:	bf00      	nop
 800abc2:	bf00      	nop
 800abc4:	e7fd      	b.n	800abc2 <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800abc6:	2350      	movs	r3, #80	@ 0x50
 800abc8:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800abca:	697b      	ldr	r3, [r7, #20]
 800abcc:	2b50      	cmp	r3, #80	@ 0x50
 800abce:	d00b      	beq.n	800abe8 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 800abd0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800abd4:	f383 8811 	msr	BASEPRI, r3
 800abd8:	f3bf 8f6f 	isb	sy
 800abdc:	f3bf 8f4f 	dsb	sy
 800abe0:	61bb      	str	r3, [r7, #24]
}
 800abe2:	bf00      	nop
 800abe4:	bf00      	nop
 800abe6:	e7fd      	b.n	800abe4 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800abe8:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800abea:	683b      	ldr	r3, [r7, #0]
 800abec:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 800abee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800abf0:	2b00      	cmp	r3, #0
 800abf2:	d00d      	beq.n	800ac10 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800abf4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800abf6:	2201      	movs	r2, #1
 800abf8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800abfc:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 800ac00:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ac02:	9300      	str	r3, [sp, #0]
 800ac04:	4613      	mov	r3, r2
 800ac06:	687a      	ldr	r2, [r7, #4]
 800ac08:	68b9      	ldr	r1, [r7, #8]
 800ac0a:	68f8      	ldr	r0, [r7, #12]
 800ac0c:	f000 f805 	bl	800ac1a <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800ac10:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 800ac12:	4618      	mov	r0, r3
 800ac14:	3730      	adds	r7, #48	@ 0x30
 800ac16:	46bd      	mov	sp, r7
 800ac18:	bd80      	pop	{r7, pc}

0800ac1a <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800ac1a:	b580      	push	{r7, lr}
 800ac1c:	b084      	sub	sp, #16
 800ac1e:	af00      	add	r7, sp, #0
 800ac20:	60f8      	str	r0, [r7, #12]
 800ac22:	60b9      	str	r1, [r7, #8]
 800ac24:	607a      	str	r2, [r7, #4]
 800ac26:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800ac28:	68bb      	ldr	r3, [r7, #8]
 800ac2a:	2b00      	cmp	r3, #0
 800ac2c:	d103      	bne.n	800ac36 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800ac2e:	69bb      	ldr	r3, [r7, #24]
 800ac30:	69ba      	ldr	r2, [r7, #24]
 800ac32:	601a      	str	r2, [r3, #0]
 800ac34:	e002      	b.n	800ac3c <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800ac36:	69bb      	ldr	r3, [r7, #24]
 800ac38:	687a      	ldr	r2, [r7, #4]
 800ac3a:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800ac3c:	69bb      	ldr	r3, [r7, #24]
 800ac3e:	68fa      	ldr	r2, [r7, #12]
 800ac40:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800ac42:	69bb      	ldr	r3, [r7, #24]
 800ac44:	68ba      	ldr	r2, [r7, #8]
 800ac46:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800ac48:	2101      	movs	r1, #1
 800ac4a:	69b8      	ldr	r0, [r7, #24]
 800ac4c:	f7ff fefe 	bl	800aa4c <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800ac50:	69bb      	ldr	r3, [r7, #24]
 800ac52:	78fa      	ldrb	r2, [r7, #3]
 800ac54:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800ac58:	bf00      	nop
 800ac5a:	3710      	adds	r7, #16
 800ac5c:	46bd      	mov	sp, r7
 800ac5e:	bd80      	pop	{r7, pc}

0800ac60 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800ac60:	b580      	push	{r7, lr}
 800ac62:	b08e      	sub	sp, #56	@ 0x38
 800ac64:	af00      	add	r7, sp, #0
 800ac66:	60f8      	str	r0, [r7, #12]
 800ac68:	60b9      	str	r1, [r7, #8]
 800ac6a:	607a      	str	r2, [r7, #4]
 800ac6c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800ac6e:	2300      	movs	r3, #0
 800ac70:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800ac72:	68fb      	ldr	r3, [r7, #12]
 800ac74:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800ac76:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ac78:	2b00      	cmp	r3, #0
 800ac7a:	d10b      	bne.n	800ac94 <xQueueGenericSend+0x34>
	__asm volatile
 800ac7c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ac80:	f383 8811 	msr	BASEPRI, r3
 800ac84:	f3bf 8f6f 	isb	sy
 800ac88:	f3bf 8f4f 	dsb	sy
 800ac8c:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800ac8e:	bf00      	nop
 800ac90:	bf00      	nop
 800ac92:	e7fd      	b.n	800ac90 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800ac94:	68bb      	ldr	r3, [r7, #8]
 800ac96:	2b00      	cmp	r3, #0
 800ac98:	d103      	bne.n	800aca2 <xQueueGenericSend+0x42>
 800ac9a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ac9c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ac9e:	2b00      	cmp	r3, #0
 800aca0:	d101      	bne.n	800aca6 <xQueueGenericSend+0x46>
 800aca2:	2301      	movs	r3, #1
 800aca4:	e000      	b.n	800aca8 <xQueueGenericSend+0x48>
 800aca6:	2300      	movs	r3, #0
 800aca8:	2b00      	cmp	r3, #0
 800acaa:	d10b      	bne.n	800acc4 <xQueueGenericSend+0x64>
	__asm volatile
 800acac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800acb0:	f383 8811 	msr	BASEPRI, r3
 800acb4:	f3bf 8f6f 	isb	sy
 800acb8:	f3bf 8f4f 	dsb	sy
 800acbc:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800acbe:	bf00      	nop
 800acc0:	bf00      	nop
 800acc2:	e7fd      	b.n	800acc0 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800acc4:	683b      	ldr	r3, [r7, #0]
 800acc6:	2b02      	cmp	r3, #2
 800acc8:	d103      	bne.n	800acd2 <xQueueGenericSend+0x72>
 800acca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800accc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800acce:	2b01      	cmp	r3, #1
 800acd0:	d101      	bne.n	800acd6 <xQueueGenericSend+0x76>
 800acd2:	2301      	movs	r3, #1
 800acd4:	e000      	b.n	800acd8 <xQueueGenericSend+0x78>
 800acd6:	2300      	movs	r3, #0
 800acd8:	2b00      	cmp	r3, #0
 800acda:	d10b      	bne.n	800acf4 <xQueueGenericSend+0x94>
	__asm volatile
 800acdc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ace0:	f383 8811 	msr	BASEPRI, r3
 800ace4:	f3bf 8f6f 	isb	sy
 800ace8:	f3bf 8f4f 	dsb	sy
 800acec:	623b      	str	r3, [r7, #32]
}
 800acee:	bf00      	nop
 800acf0:	bf00      	nop
 800acf2:	e7fd      	b.n	800acf0 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800acf4:	f001 fa24 	bl	800c140 <xTaskGetSchedulerState>
 800acf8:	4603      	mov	r3, r0
 800acfa:	2b00      	cmp	r3, #0
 800acfc:	d102      	bne.n	800ad04 <xQueueGenericSend+0xa4>
 800acfe:	687b      	ldr	r3, [r7, #4]
 800ad00:	2b00      	cmp	r3, #0
 800ad02:	d101      	bne.n	800ad08 <xQueueGenericSend+0xa8>
 800ad04:	2301      	movs	r3, #1
 800ad06:	e000      	b.n	800ad0a <xQueueGenericSend+0xaa>
 800ad08:	2300      	movs	r3, #0
 800ad0a:	2b00      	cmp	r3, #0
 800ad0c:	d10b      	bne.n	800ad26 <xQueueGenericSend+0xc6>
	__asm volatile
 800ad0e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ad12:	f383 8811 	msr	BASEPRI, r3
 800ad16:	f3bf 8f6f 	isb	sy
 800ad1a:	f3bf 8f4f 	dsb	sy
 800ad1e:	61fb      	str	r3, [r7, #28]
}
 800ad20:	bf00      	nop
 800ad22:	bf00      	nop
 800ad24:	e7fd      	b.n	800ad22 <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800ad26:	f001 ff77 	bl	800cc18 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800ad2a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ad2c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800ad2e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ad30:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ad32:	429a      	cmp	r2, r3
 800ad34:	d302      	bcc.n	800ad3c <xQueueGenericSend+0xdc>
 800ad36:	683b      	ldr	r3, [r7, #0]
 800ad38:	2b02      	cmp	r3, #2
 800ad3a:	d129      	bne.n	800ad90 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800ad3c:	683a      	ldr	r2, [r7, #0]
 800ad3e:	68b9      	ldr	r1, [r7, #8]
 800ad40:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800ad42:	f000 fa0f 	bl	800b164 <prvCopyDataToQueue>
 800ad46:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800ad48:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ad4a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ad4c:	2b00      	cmp	r3, #0
 800ad4e:	d010      	beq.n	800ad72 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800ad50:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ad52:	3324      	adds	r3, #36	@ 0x24
 800ad54:	4618      	mov	r0, r3
 800ad56:	f001 f805 	bl	800bd64 <xTaskRemoveFromEventList>
 800ad5a:	4603      	mov	r3, r0
 800ad5c:	2b00      	cmp	r3, #0
 800ad5e:	d013      	beq.n	800ad88 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800ad60:	4b3f      	ldr	r3, [pc, #252]	@ (800ae60 <xQueueGenericSend+0x200>)
 800ad62:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800ad66:	601a      	str	r2, [r3, #0]
 800ad68:	f3bf 8f4f 	dsb	sy
 800ad6c:	f3bf 8f6f 	isb	sy
 800ad70:	e00a      	b.n	800ad88 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800ad72:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ad74:	2b00      	cmp	r3, #0
 800ad76:	d007      	beq.n	800ad88 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800ad78:	4b39      	ldr	r3, [pc, #228]	@ (800ae60 <xQueueGenericSend+0x200>)
 800ad7a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800ad7e:	601a      	str	r2, [r3, #0]
 800ad80:	f3bf 8f4f 	dsb	sy
 800ad84:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800ad88:	f001 ff78 	bl	800cc7c <vPortExitCritical>
				return pdPASS;
 800ad8c:	2301      	movs	r3, #1
 800ad8e:	e063      	b.n	800ae58 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800ad90:	687b      	ldr	r3, [r7, #4]
 800ad92:	2b00      	cmp	r3, #0
 800ad94:	d103      	bne.n	800ad9e <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800ad96:	f001 ff71 	bl	800cc7c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800ad9a:	2300      	movs	r3, #0
 800ad9c:	e05c      	b.n	800ae58 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800ad9e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ada0:	2b00      	cmp	r3, #0
 800ada2:	d106      	bne.n	800adb2 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800ada4:	f107 0314 	add.w	r3, r7, #20
 800ada8:	4618      	mov	r0, r3
 800adaa:	f001 f867 	bl	800be7c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800adae:	2301      	movs	r3, #1
 800adb0:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800adb2:	f001 ff63 	bl	800cc7c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800adb6:	f000 fda7 	bl	800b908 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800adba:	f001 ff2d 	bl	800cc18 <vPortEnterCritical>
 800adbe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800adc0:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800adc4:	b25b      	sxtb	r3, r3
 800adc6:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800adca:	d103      	bne.n	800add4 <xQueueGenericSend+0x174>
 800adcc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800adce:	2200      	movs	r2, #0
 800add0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800add4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800add6:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800adda:	b25b      	sxtb	r3, r3
 800addc:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800ade0:	d103      	bne.n	800adea <xQueueGenericSend+0x18a>
 800ade2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ade4:	2200      	movs	r2, #0
 800ade6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800adea:	f001 ff47 	bl	800cc7c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800adee:	1d3a      	adds	r2, r7, #4
 800adf0:	f107 0314 	add.w	r3, r7, #20
 800adf4:	4611      	mov	r1, r2
 800adf6:	4618      	mov	r0, r3
 800adf8:	f001 f856 	bl	800bea8 <xTaskCheckForTimeOut>
 800adfc:	4603      	mov	r3, r0
 800adfe:	2b00      	cmp	r3, #0
 800ae00:	d124      	bne.n	800ae4c <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800ae02:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800ae04:	f000 faa6 	bl	800b354 <prvIsQueueFull>
 800ae08:	4603      	mov	r3, r0
 800ae0a:	2b00      	cmp	r3, #0
 800ae0c:	d018      	beq.n	800ae40 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800ae0e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ae10:	3310      	adds	r3, #16
 800ae12:	687a      	ldr	r2, [r7, #4]
 800ae14:	4611      	mov	r1, r2
 800ae16:	4618      	mov	r0, r3
 800ae18:	f000 ff52 	bl	800bcc0 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800ae1c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800ae1e:	f000 fa31 	bl	800b284 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800ae22:	f000 fd7f 	bl	800b924 <xTaskResumeAll>
 800ae26:	4603      	mov	r3, r0
 800ae28:	2b00      	cmp	r3, #0
 800ae2a:	f47f af7c 	bne.w	800ad26 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 800ae2e:	4b0c      	ldr	r3, [pc, #48]	@ (800ae60 <xQueueGenericSend+0x200>)
 800ae30:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800ae34:	601a      	str	r2, [r3, #0]
 800ae36:	f3bf 8f4f 	dsb	sy
 800ae3a:	f3bf 8f6f 	isb	sy
 800ae3e:	e772      	b.n	800ad26 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800ae40:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800ae42:	f000 fa1f 	bl	800b284 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800ae46:	f000 fd6d 	bl	800b924 <xTaskResumeAll>
 800ae4a:	e76c      	b.n	800ad26 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800ae4c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800ae4e:	f000 fa19 	bl	800b284 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800ae52:	f000 fd67 	bl	800b924 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800ae56:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800ae58:	4618      	mov	r0, r3
 800ae5a:	3738      	adds	r7, #56	@ 0x38
 800ae5c:	46bd      	mov	sp, r7
 800ae5e:	bd80      	pop	{r7, pc}
 800ae60:	e000ed04 	.word	0xe000ed04

0800ae64 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800ae64:	b580      	push	{r7, lr}
 800ae66:	b090      	sub	sp, #64	@ 0x40
 800ae68:	af00      	add	r7, sp, #0
 800ae6a:	60f8      	str	r0, [r7, #12]
 800ae6c:	60b9      	str	r1, [r7, #8]
 800ae6e:	607a      	str	r2, [r7, #4]
 800ae70:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800ae72:	68fb      	ldr	r3, [r7, #12]
 800ae74:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 800ae76:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ae78:	2b00      	cmp	r3, #0
 800ae7a:	d10b      	bne.n	800ae94 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 800ae7c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ae80:	f383 8811 	msr	BASEPRI, r3
 800ae84:	f3bf 8f6f 	isb	sy
 800ae88:	f3bf 8f4f 	dsb	sy
 800ae8c:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800ae8e:	bf00      	nop
 800ae90:	bf00      	nop
 800ae92:	e7fd      	b.n	800ae90 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800ae94:	68bb      	ldr	r3, [r7, #8]
 800ae96:	2b00      	cmp	r3, #0
 800ae98:	d103      	bne.n	800aea2 <xQueueGenericSendFromISR+0x3e>
 800ae9a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ae9c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ae9e:	2b00      	cmp	r3, #0
 800aea0:	d101      	bne.n	800aea6 <xQueueGenericSendFromISR+0x42>
 800aea2:	2301      	movs	r3, #1
 800aea4:	e000      	b.n	800aea8 <xQueueGenericSendFromISR+0x44>
 800aea6:	2300      	movs	r3, #0
 800aea8:	2b00      	cmp	r3, #0
 800aeaa:	d10b      	bne.n	800aec4 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 800aeac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800aeb0:	f383 8811 	msr	BASEPRI, r3
 800aeb4:	f3bf 8f6f 	isb	sy
 800aeb8:	f3bf 8f4f 	dsb	sy
 800aebc:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800aebe:	bf00      	nop
 800aec0:	bf00      	nop
 800aec2:	e7fd      	b.n	800aec0 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800aec4:	683b      	ldr	r3, [r7, #0]
 800aec6:	2b02      	cmp	r3, #2
 800aec8:	d103      	bne.n	800aed2 <xQueueGenericSendFromISR+0x6e>
 800aeca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aecc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800aece:	2b01      	cmp	r3, #1
 800aed0:	d101      	bne.n	800aed6 <xQueueGenericSendFromISR+0x72>
 800aed2:	2301      	movs	r3, #1
 800aed4:	e000      	b.n	800aed8 <xQueueGenericSendFromISR+0x74>
 800aed6:	2300      	movs	r3, #0
 800aed8:	2b00      	cmp	r3, #0
 800aeda:	d10b      	bne.n	800aef4 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 800aedc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800aee0:	f383 8811 	msr	BASEPRI, r3
 800aee4:	f3bf 8f6f 	isb	sy
 800aee8:	f3bf 8f4f 	dsb	sy
 800aeec:	623b      	str	r3, [r7, #32]
}
 800aeee:	bf00      	nop
 800aef0:	bf00      	nop
 800aef2:	e7fd      	b.n	800aef0 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800aef4:	f001 ff70 	bl	800cdd8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800aef8:	f3ef 8211 	mrs	r2, BASEPRI
 800aefc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800af00:	f383 8811 	msr	BASEPRI, r3
 800af04:	f3bf 8f6f 	isb	sy
 800af08:	f3bf 8f4f 	dsb	sy
 800af0c:	61fa      	str	r2, [r7, #28]
 800af0e:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800af10:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800af12:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800af14:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800af16:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800af18:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800af1a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800af1c:	429a      	cmp	r2, r3
 800af1e:	d302      	bcc.n	800af26 <xQueueGenericSendFromISR+0xc2>
 800af20:	683b      	ldr	r3, [r7, #0]
 800af22:	2b02      	cmp	r3, #2
 800af24:	d12f      	bne.n	800af86 <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800af26:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800af28:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800af2c:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800af30:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800af32:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800af34:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800af36:	683a      	ldr	r2, [r7, #0]
 800af38:	68b9      	ldr	r1, [r7, #8]
 800af3a:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800af3c:	f000 f912 	bl	800b164 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800af40:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 800af44:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800af48:	d112      	bne.n	800af70 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800af4a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800af4c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800af4e:	2b00      	cmp	r3, #0
 800af50:	d016      	beq.n	800af80 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800af52:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800af54:	3324      	adds	r3, #36	@ 0x24
 800af56:	4618      	mov	r0, r3
 800af58:	f000 ff04 	bl	800bd64 <xTaskRemoveFromEventList>
 800af5c:	4603      	mov	r3, r0
 800af5e:	2b00      	cmp	r3, #0
 800af60:	d00e      	beq.n	800af80 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800af62:	687b      	ldr	r3, [r7, #4]
 800af64:	2b00      	cmp	r3, #0
 800af66:	d00b      	beq.n	800af80 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800af68:	687b      	ldr	r3, [r7, #4]
 800af6a:	2201      	movs	r2, #1
 800af6c:	601a      	str	r2, [r3, #0]
 800af6e:	e007      	b.n	800af80 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800af70:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800af74:	3301      	adds	r3, #1
 800af76:	b2db      	uxtb	r3, r3
 800af78:	b25a      	sxtb	r2, r3
 800af7a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800af7c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 800af80:	2301      	movs	r3, #1
 800af82:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 800af84:	e001      	b.n	800af8a <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800af86:	2300      	movs	r3, #0
 800af88:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800af8a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800af8c:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800af8e:	697b      	ldr	r3, [r7, #20]
 800af90:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800af94:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800af96:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 800af98:	4618      	mov	r0, r3
 800af9a:	3740      	adds	r7, #64	@ 0x40
 800af9c:	46bd      	mov	sp, r7
 800af9e:	bd80      	pop	{r7, pc}

0800afa0 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800afa0:	b580      	push	{r7, lr}
 800afa2:	b08c      	sub	sp, #48	@ 0x30
 800afa4:	af00      	add	r7, sp, #0
 800afa6:	60f8      	str	r0, [r7, #12]
 800afa8:	60b9      	str	r1, [r7, #8]
 800afaa:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800afac:	2300      	movs	r3, #0
 800afae:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800afb0:	68fb      	ldr	r3, [r7, #12]
 800afb2:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800afb4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800afb6:	2b00      	cmp	r3, #0
 800afb8:	d10b      	bne.n	800afd2 <xQueueReceive+0x32>
	__asm volatile
 800afba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800afbe:	f383 8811 	msr	BASEPRI, r3
 800afc2:	f3bf 8f6f 	isb	sy
 800afc6:	f3bf 8f4f 	dsb	sy
 800afca:	623b      	str	r3, [r7, #32]
}
 800afcc:	bf00      	nop
 800afce:	bf00      	nop
 800afd0:	e7fd      	b.n	800afce <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800afd2:	68bb      	ldr	r3, [r7, #8]
 800afd4:	2b00      	cmp	r3, #0
 800afd6:	d103      	bne.n	800afe0 <xQueueReceive+0x40>
 800afd8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800afda:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800afdc:	2b00      	cmp	r3, #0
 800afde:	d101      	bne.n	800afe4 <xQueueReceive+0x44>
 800afe0:	2301      	movs	r3, #1
 800afe2:	e000      	b.n	800afe6 <xQueueReceive+0x46>
 800afe4:	2300      	movs	r3, #0
 800afe6:	2b00      	cmp	r3, #0
 800afe8:	d10b      	bne.n	800b002 <xQueueReceive+0x62>
	__asm volatile
 800afea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800afee:	f383 8811 	msr	BASEPRI, r3
 800aff2:	f3bf 8f6f 	isb	sy
 800aff6:	f3bf 8f4f 	dsb	sy
 800affa:	61fb      	str	r3, [r7, #28]
}
 800affc:	bf00      	nop
 800affe:	bf00      	nop
 800b000:	e7fd      	b.n	800affe <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800b002:	f001 f89d 	bl	800c140 <xTaskGetSchedulerState>
 800b006:	4603      	mov	r3, r0
 800b008:	2b00      	cmp	r3, #0
 800b00a:	d102      	bne.n	800b012 <xQueueReceive+0x72>
 800b00c:	687b      	ldr	r3, [r7, #4]
 800b00e:	2b00      	cmp	r3, #0
 800b010:	d101      	bne.n	800b016 <xQueueReceive+0x76>
 800b012:	2301      	movs	r3, #1
 800b014:	e000      	b.n	800b018 <xQueueReceive+0x78>
 800b016:	2300      	movs	r3, #0
 800b018:	2b00      	cmp	r3, #0
 800b01a:	d10b      	bne.n	800b034 <xQueueReceive+0x94>
	__asm volatile
 800b01c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b020:	f383 8811 	msr	BASEPRI, r3
 800b024:	f3bf 8f6f 	isb	sy
 800b028:	f3bf 8f4f 	dsb	sy
 800b02c:	61bb      	str	r3, [r7, #24]
}
 800b02e:	bf00      	nop
 800b030:	bf00      	nop
 800b032:	e7fd      	b.n	800b030 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800b034:	f001 fdf0 	bl	800cc18 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800b038:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b03a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b03c:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800b03e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b040:	2b00      	cmp	r3, #0
 800b042:	d01f      	beq.n	800b084 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800b044:	68b9      	ldr	r1, [r7, #8]
 800b046:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800b048:	f000 f8f6 	bl	800b238 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800b04c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b04e:	1e5a      	subs	r2, r3, #1
 800b050:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b052:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800b054:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b056:	691b      	ldr	r3, [r3, #16]
 800b058:	2b00      	cmp	r3, #0
 800b05a:	d00f      	beq.n	800b07c <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800b05c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b05e:	3310      	adds	r3, #16
 800b060:	4618      	mov	r0, r3
 800b062:	f000 fe7f 	bl	800bd64 <xTaskRemoveFromEventList>
 800b066:	4603      	mov	r3, r0
 800b068:	2b00      	cmp	r3, #0
 800b06a:	d007      	beq.n	800b07c <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800b06c:	4b3c      	ldr	r3, [pc, #240]	@ (800b160 <xQueueReceive+0x1c0>)
 800b06e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b072:	601a      	str	r2, [r3, #0]
 800b074:	f3bf 8f4f 	dsb	sy
 800b078:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800b07c:	f001 fdfe 	bl	800cc7c <vPortExitCritical>
				return pdPASS;
 800b080:	2301      	movs	r3, #1
 800b082:	e069      	b.n	800b158 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800b084:	687b      	ldr	r3, [r7, #4]
 800b086:	2b00      	cmp	r3, #0
 800b088:	d103      	bne.n	800b092 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800b08a:	f001 fdf7 	bl	800cc7c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800b08e:	2300      	movs	r3, #0
 800b090:	e062      	b.n	800b158 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800b092:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b094:	2b00      	cmp	r3, #0
 800b096:	d106      	bne.n	800b0a6 <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800b098:	f107 0310 	add.w	r3, r7, #16
 800b09c:	4618      	mov	r0, r3
 800b09e:	f000 feed 	bl	800be7c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800b0a2:	2301      	movs	r3, #1
 800b0a4:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800b0a6:	f001 fde9 	bl	800cc7c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800b0aa:	f000 fc2d 	bl	800b908 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800b0ae:	f001 fdb3 	bl	800cc18 <vPortEnterCritical>
 800b0b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b0b4:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800b0b8:	b25b      	sxtb	r3, r3
 800b0ba:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800b0be:	d103      	bne.n	800b0c8 <xQueueReceive+0x128>
 800b0c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b0c2:	2200      	movs	r2, #0
 800b0c4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800b0c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b0ca:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800b0ce:	b25b      	sxtb	r3, r3
 800b0d0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800b0d4:	d103      	bne.n	800b0de <xQueueReceive+0x13e>
 800b0d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b0d8:	2200      	movs	r2, #0
 800b0da:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800b0de:	f001 fdcd 	bl	800cc7c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800b0e2:	1d3a      	adds	r2, r7, #4
 800b0e4:	f107 0310 	add.w	r3, r7, #16
 800b0e8:	4611      	mov	r1, r2
 800b0ea:	4618      	mov	r0, r3
 800b0ec:	f000 fedc 	bl	800bea8 <xTaskCheckForTimeOut>
 800b0f0:	4603      	mov	r3, r0
 800b0f2:	2b00      	cmp	r3, #0
 800b0f4:	d123      	bne.n	800b13e <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800b0f6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800b0f8:	f000 f916 	bl	800b328 <prvIsQueueEmpty>
 800b0fc:	4603      	mov	r3, r0
 800b0fe:	2b00      	cmp	r3, #0
 800b100:	d017      	beq.n	800b132 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800b102:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b104:	3324      	adds	r3, #36	@ 0x24
 800b106:	687a      	ldr	r2, [r7, #4]
 800b108:	4611      	mov	r1, r2
 800b10a:	4618      	mov	r0, r3
 800b10c:	f000 fdd8 	bl	800bcc0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800b110:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800b112:	f000 f8b7 	bl	800b284 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800b116:	f000 fc05 	bl	800b924 <xTaskResumeAll>
 800b11a:	4603      	mov	r3, r0
 800b11c:	2b00      	cmp	r3, #0
 800b11e:	d189      	bne.n	800b034 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 800b120:	4b0f      	ldr	r3, [pc, #60]	@ (800b160 <xQueueReceive+0x1c0>)
 800b122:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b126:	601a      	str	r2, [r3, #0]
 800b128:	f3bf 8f4f 	dsb	sy
 800b12c:	f3bf 8f6f 	isb	sy
 800b130:	e780      	b.n	800b034 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800b132:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800b134:	f000 f8a6 	bl	800b284 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800b138:	f000 fbf4 	bl	800b924 <xTaskResumeAll>
 800b13c:	e77a      	b.n	800b034 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800b13e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800b140:	f000 f8a0 	bl	800b284 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800b144:	f000 fbee 	bl	800b924 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800b148:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800b14a:	f000 f8ed 	bl	800b328 <prvIsQueueEmpty>
 800b14e:	4603      	mov	r3, r0
 800b150:	2b00      	cmp	r3, #0
 800b152:	f43f af6f 	beq.w	800b034 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800b156:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800b158:	4618      	mov	r0, r3
 800b15a:	3730      	adds	r7, #48	@ 0x30
 800b15c:	46bd      	mov	sp, r7
 800b15e:	bd80      	pop	{r7, pc}
 800b160:	e000ed04 	.word	0xe000ed04

0800b164 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800b164:	b580      	push	{r7, lr}
 800b166:	b086      	sub	sp, #24
 800b168:	af00      	add	r7, sp, #0
 800b16a:	60f8      	str	r0, [r7, #12]
 800b16c:	60b9      	str	r1, [r7, #8]
 800b16e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800b170:	2300      	movs	r3, #0
 800b172:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800b174:	68fb      	ldr	r3, [r7, #12]
 800b176:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b178:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800b17a:	68fb      	ldr	r3, [r7, #12]
 800b17c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b17e:	2b00      	cmp	r3, #0
 800b180:	d10d      	bne.n	800b19e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800b182:	68fb      	ldr	r3, [r7, #12]
 800b184:	681b      	ldr	r3, [r3, #0]
 800b186:	2b00      	cmp	r3, #0
 800b188:	d14d      	bne.n	800b226 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800b18a:	68fb      	ldr	r3, [r7, #12]
 800b18c:	689b      	ldr	r3, [r3, #8]
 800b18e:	4618      	mov	r0, r3
 800b190:	f000 fff4 	bl	800c17c <xTaskPriorityDisinherit>
 800b194:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800b196:	68fb      	ldr	r3, [r7, #12]
 800b198:	2200      	movs	r2, #0
 800b19a:	609a      	str	r2, [r3, #8]
 800b19c:	e043      	b.n	800b226 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800b19e:	687b      	ldr	r3, [r7, #4]
 800b1a0:	2b00      	cmp	r3, #0
 800b1a2:	d119      	bne.n	800b1d8 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800b1a4:	68fb      	ldr	r3, [r7, #12]
 800b1a6:	6858      	ldr	r0, [r3, #4]
 800b1a8:	68fb      	ldr	r3, [r7, #12]
 800b1aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b1ac:	461a      	mov	r2, r3
 800b1ae:	68b9      	ldr	r1, [r7, #8]
 800b1b0:	f010 fabb 	bl	801b72a <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800b1b4:	68fb      	ldr	r3, [r7, #12]
 800b1b6:	685a      	ldr	r2, [r3, #4]
 800b1b8:	68fb      	ldr	r3, [r7, #12]
 800b1ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b1bc:	441a      	add	r2, r3
 800b1be:	68fb      	ldr	r3, [r7, #12]
 800b1c0:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800b1c2:	68fb      	ldr	r3, [r7, #12]
 800b1c4:	685a      	ldr	r2, [r3, #4]
 800b1c6:	68fb      	ldr	r3, [r7, #12]
 800b1c8:	689b      	ldr	r3, [r3, #8]
 800b1ca:	429a      	cmp	r2, r3
 800b1cc:	d32b      	bcc.n	800b226 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800b1ce:	68fb      	ldr	r3, [r7, #12]
 800b1d0:	681a      	ldr	r2, [r3, #0]
 800b1d2:	68fb      	ldr	r3, [r7, #12]
 800b1d4:	605a      	str	r2, [r3, #4]
 800b1d6:	e026      	b.n	800b226 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800b1d8:	68fb      	ldr	r3, [r7, #12]
 800b1da:	68d8      	ldr	r0, [r3, #12]
 800b1dc:	68fb      	ldr	r3, [r7, #12]
 800b1de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b1e0:	461a      	mov	r2, r3
 800b1e2:	68b9      	ldr	r1, [r7, #8]
 800b1e4:	f010 faa1 	bl	801b72a <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800b1e8:	68fb      	ldr	r3, [r7, #12]
 800b1ea:	68da      	ldr	r2, [r3, #12]
 800b1ec:	68fb      	ldr	r3, [r7, #12]
 800b1ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b1f0:	425b      	negs	r3, r3
 800b1f2:	441a      	add	r2, r3
 800b1f4:	68fb      	ldr	r3, [r7, #12]
 800b1f6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800b1f8:	68fb      	ldr	r3, [r7, #12]
 800b1fa:	68da      	ldr	r2, [r3, #12]
 800b1fc:	68fb      	ldr	r3, [r7, #12]
 800b1fe:	681b      	ldr	r3, [r3, #0]
 800b200:	429a      	cmp	r2, r3
 800b202:	d207      	bcs.n	800b214 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800b204:	68fb      	ldr	r3, [r7, #12]
 800b206:	689a      	ldr	r2, [r3, #8]
 800b208:	68fb      	ldr	r3, [r7, #12]
 800b20a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b20c:	425b      	negs	r3, r3
 800b20e:	441a      	add	r2, r3
 800b210:	68fb      	ldr	r3, [r7, #12]
 800b212:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800b214:	687b      	ldr	r3, [r7, #4]
 800b216:	2b02      	cmp	r3, #2
 800b218:	d105      	bne.n	800b226 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800b21a:	693b      	ldr	r3, [r7, #16]
 800b21c:	2b00      	cmp	r3, #0
 800b21e:	d002      	beq.n	800b226 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800b220:	693b      	ldr	r3, [r7, #16]
 800b222:	3b01      	subs	r3, #1
 800b224:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800b226:	693b      	ldr	r3, [r7, #16]
 800b228:	1c5a      	adds	r2, r3, #1
 800b22a:	68fb      	ldr	r3, [r7, #12]
 800b22c:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 800b22e:	697b      	ldr	r3, [r7, #20]
}
 800b230:	4618      	mov	r0, r3
 800b232:	3718      	adds	r7, #24
 800b234:	46bd      	mov	sp, r7
 800b236:	bd80      	pop	{r7, pc}

0800b238 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800b238:	b580      	push	{r7, lr}
 800b23a:	b082      	sub	sp, #8
 800b23c:	af00      	add	r7, sp, #0
 800b23e:	6078      	str	r0, [r7, #4]
 800b240:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800b242:	687b      	ldr	r3, [r7, #4]
 800b244:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b246:	2b00      	cmp	r3, #0
 800b248:	d018      	beq.n	800b27c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800b24a:	687b      	ldr	r3, [r7, #4]
 800b24c:	68da      	ldr	r2, [r3, #12]
 800b24e:	687b      	ldr	r3, [r7, #4]
 800b250:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b252:	441a      	add	r2, r3
 800b254:	687b      	ldr	r3, [r7, #4]
 800b256:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800b258:	687b      	ldr	r3, [r7, #4]
 800b25a:	68da      	ldr	r2, [r3, #12]
 800b25c:	687b      	ldr	r3, [r7, #4]
 800b25e:	689b      	ldr	r3, [r3, #8]
 800b260:	429a      	cmp	r2, r3
 800b262:	d303      	bcc.n	800b26c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800b264:	687b      	ldr	r3, [r7, #4]
 800b266:	681a      	ldr	r2, [r3, #0]
 800b268:	687b      	ldr	r3, [r7, #4]
 800b26a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800b26c:	687b      	ldr	r3, [r7, #4]
 800b26e:	68d9      	ldr	r1, [r3, #12]
 800b270:	687b      	ldr	r3, [r7, #4]
 800b272:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b274:	461a      	mov	r2, r3
 800b276:	6838      	ldr	r0, [r7, #0]
 800b278:	f010 fa57 	bl	801b72a <memcpy>
	}
}
 800b27c:	bf00      	nop
 800b27e:	3708      	adds	r7, #8
 800b280:	46bd      	mov	sp, r7
 800b282:	bd80      	pop	{r7, pc}

0800b284 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800b284:	b580      	push	{r7, lr}
 800b286:	b084      	sub	sp, #16
 800b288:	af00      	add	r7, sp, #0
 800b28a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800b28c:	f001 fcc4 	bl	800cc18 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800b290:	687b      	ldr	r3, [r7, #4]
 800b292:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800b296:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800b298:	e011      	b.n	800b2be <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800b29a:	687b      	ldr	r3, [r7, #4]
 800b29c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b29e:	2b00      	cmp	r3, #0
 800b2a0:	d012      	beq.n	800b2c8 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800b2a2:	687b      	ldr	r3, [r7, #4]
 800b2a4:	3324      	adds	r3, #36	@ 0x24
 800b2a6:	4618      	mov	r0, r3
 800b2a8:	f000 fd5c 	bl	800bd64 <xTaskRemoveFromEventList>
 800b2ac:	4603      	mov	r3, r0
 800b2ae:	2b00      	cmp	r3, #0
 800b2b0:	d001      	beq.n	800b2b6 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800b2b2:	f000 fe5d 	bl	800bf70 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800b2b6:	7bfb      	ldrb	r3, [r7, #15]
 800b2b8:	3b01      	subs	r3, #1
 800b2ba:	b2db      	uxtb	r3, r3
 800b2bc:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800b2be:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b2c2:	2b00      	cmp	r3, #0
 800b2c4:	dce9      	bgt.n	800b29a <prvUnlockQueue+0x16>
 800b2c6:	e000      	b.n	800b2ca <prvUnlockQueue+0x46>
					break;
 800b2c8:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800b2ca:	687b      	ldr	r3, [r7, #4]
 800b2cc:	22ff      	movs	r2, #255	@ 0xff
 800b2ce:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 800b2d2:	f001 fcd3 	bl	800cc7c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800b2d6:	f001 fc9f 	bl	800cc18 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800b2da:	687b      	ldr	r3, [r7, #4]
 800b2dc:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800b2e0:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800b2e2:	e011      	b.n	800b308 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800b2e4:	687b      	ldr	r3, [r7, #4]
 800b2e6:	691b      	ldr	r3, [r3, #16]
 800b2e8:	2b00      	cmp	r3, #0
 800b2ea:	d012      	beq.n	800b312 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800b2ec:	687b      	ldr	r3, [r7, #4]
 800b2ee:	3310      	adds	r3, #16
 800b2f0:	4618      	mov	r0, r3
 800b2f2:	f000 fd37 	bl	800bd64 <xTaskRemoveFromEventList>
 800b2f6:	4603      	mov	r3, r0
 800b2f8:	2b00      	cmp	r3, #0
 800b2fa:	d001      	beq.n	800b300 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800b2fc:	f000 fe38 	bl	800bf70 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800b300:	7bbb      	ldrb	r3, [r7, #14]
 800b302:	3b01      	subs	r3, #1
 800b304:	b2db      	uxtb	r3, r3
 800b306:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800b308:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b30c:	2b00      	cmp	r3, #0
 800b30e:	dce9      	bgt.n	800b2e4 <prvUnlockQueue+0x60>
 800b310:	e000      	b.n	800b314 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800b312:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800b314:	687b      	ldr	r3, [r7, #4]
 800b316:	22ff      	movs	r2, #255	@ 0xff
 800b318:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 800b31c:	f001 fcae 	bl	800cc7c <vPortExitCritical>
}
 800b320:	bf00      	nop
 800b322:	3710      	adds	r7, #16
 800b324:	46bd      	mov	sp, r7
 800b326:	bd80      	pop	{r7, pc}

0800b328 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800b328:	b580      	push	{r7, lr}
 800b32a:	b084      	sub	sp, #16
 800b32c:	af00      	add	r7, sp, #0
 800b32e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800b330:	f001 fc72 	bl	800cc18 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800b334:	687b      	ldr	r3, [r7, #4]
 800b336:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b338:	2b00      	cmp	r3, #0
 800b33a:	d102      	bne.n	800b342 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800b33c:	2301      	movs	r3, #1
 800b33e:	60fb      	str	r3, [r7, #12]
 800b340:	e001      	b.n	800b346 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800b342:	2300      	movs	r3, #0
 800b344:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800b346:	f001 fc99 	bl	800cc7c <vPortExitCritical>

	return xReturn;
 800b34a:	68fb      	ldr	r3, [r7, #12]
}
 800b34c:	4618      	mov	r0, r3
 800b34e:	3710      	adds	r7, #16
 800b350:	46bd      	mov	sp, r7
 800b352:	bd80      	pop	{r7, pc}

0800b354 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800b354:	b580      	push	{r7, lr}
 800b356:	b084      	sub	sp, #16
 800b358:	af00      	add	r7, sp, #0
 800b35a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800b35c:	f001 fc5c 	bl	800cc18 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800b360:	687b      	ldr	r3, [r7, #4]
 800b362:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800b364:	687b      	ldr	r3, [r7, #4]
 800b366:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b368:	429a      	cmp	r2, r3
 800b36a:	d102      	bne.n	800b372 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800b36c:	2301      	movs	r3, #1
 800b36e:	60fb      	str	r3, [r7, #12]
 800b370:	e001      	b.n	800b376 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800b372:	2300      	movs	r3, #0
 800b374:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800b376:	f001 fc81 	bl	800cc7c <vPortExitCritical>

	return xReturn;
 800b37a:	68fb      	ldr	r3, [r7, #12]
}
 800b37c:	4618      	mov	r0, r3
 800b37e:	3710      	adds	r7, #16
 800b380:	46bd      	mov	sp, r7
 800b382:	bd80      	pop	{r7, pc}

0800b384 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800b384:	b480      	push	{r7}
 800b386:	b085      	sub	sp, #20
 800b388:	af00      	add	r7, sp, #0
 800b38a:	6078      	str	r0, [r7, #4]
 800b38c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800b38e:	2300      	movs	r3, #0
 800b390:	60fb      	str	r3, [r7, #12]
 800b392:	e014      	b.n	800b3be <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800b394:	4a0f      	ldr	r2, [pc, #60]	@ (800b3d4 <vQueueAddToRegistry+0x50>)
 800b396:	68fb      	ldr	r3, [r7, #12]
 800b398:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800b39c:	2b00      	cmp	r3, #0
 800b39e:	d10b      	bne.n	800b3b8 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800b3a0:	490c      	ldr	r1, [pc, #48]	@ (800b3d4 <vQueueAddToRegistry+0x50>)
 800b3a2:	68fb      	ldr	r3, [r7, #12]
 800b3a4:	683a      	ldr	r2, [r7, #0]
 800b3a6:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800b3aa:	4a0a      	ldr	r2, [pc, #40]	@ (800b3d4 <vQueueAddToRegistry+0x50>)
 800b3ac:	68fb      	ldr	r3, [r7, #12]
 800b3ae:	00db      	lsls	r3, r3, #3
 800b3b0:	4413      	add	r3, r2
 800b3b2:	687a      	ldr	r2, [r7, #4]
 800b3b4:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800b3b6:	e006      	b.n	800b3c6 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800b3b8:	68fb      	ldr	r3, [r7, #12]
 800b3ba:	3301      	adds	r3, #1
 800b3bc:	60fb      	str	r3, [r7, #12]
 800b3be:	68fb      	ldr	r3, [r7, #12]
 800b3c0:	2b07      	cmp	r3, #7
 800b3c2:	d9e7      	bls.n	800b394 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800b3c4:	bf00      	nop
 800b3c6:	bf00      	nop
 800b3c8:	3714      	adds	r7, #20
 800b3ca:	46bd      	mov	sp, r7
 800b3cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3d0:	4770      	bx	lr
 800b3d2:	bf00      	nop
 800b3d4:	20006498 	.word	0x20006498

0800b3d8 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800b3d8:	b580      	push	{r7, lr}
 800b3da:	b086      	sub	sp, #24
 800b3dc:	af00      	add	r7, sp, #0
 800b3de:	60f8      	str	r0, [r7, #12]
 800b3e0:	60b9      	str	r1, [r7, #8]
 800b3e2:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800b3e4:	68fb      	ldr	r3, [r7, #12]
 800b3e6:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800b3e8:	f001 fc16 	bl	800cc18 <vPortEnterCritical>
 800b3ec:	697b      	ldr	r3, [r7, #20]
 800b3ee:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800b3f2:	b25b      	sxtb	r3, r3
 800b3f4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800b3f8:	d103      	bne.n	800b402 <vQueueWaitForMessageRestricted+0x2a>
 800b3fa:	697b      	ldr	r3, [r7, #20]
 800b3fc:	2200      	movs	r2, #0
 800b3fe:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800b402:	697b      	ldr	r3, [r7, #20]
 800b404:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800b408:	b25b      	sxtb	r3, r3
 800b40a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800b40e:	d103      	bne.n	800b418 <vQueueWaitForMessageRestricted+0x40>
 800b410:	697b      	ldr	r3, [r7, #20]
 800b412:	2200      	movs	r2, #0
 800b414:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800b418:	f001 fc30 	bl	800cc7c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800b41c:	697b      	ldr	r3, [r7, #20]
 800b41e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b420:	2b00      	cmp	r3, #0
 800b422:	d106      	bne.n	800b432 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800b424:	697b      	ldr	r3, [r7, #20]
 800b426:	3324      	adds	r3, #36	@ 0x24
 800b428:	687a      	ldr	r2, [r7, #4]
 800b42a:	68b9      	ldr	r1, [r7, #8]
 800b42c:	4618      	mov	r0, r3
 800b42e:	f000 fc6d 	bl	800bd0c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800b432:	6978      	ldr	r0, [r7, #20]
 800b434:	f7ff ff26 	bl	800b284 <prvUnlockQueue>
	}
 800b438:	bf00      	nop
 800b43a:	3718      	adds	r7, #24
 800b43c:	46bd      	mov	sp, r7
 800b43e:	bd80      	pop	{r7, pc}

0800b440 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800b440:	b580      	push	{r7, lr}
 800b442:	b08e      	sub	sp, #56	@ 0x38
 800b444:	af04      	add	r7, sp, #16
 800b446:	60f8      	str	r0, [r7, #12]
 800b448:	60b9      	str	r1, [r7, #8]
 800b44a:	607a      	str	r2, [r7, #4]
 800b44c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800b44e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b450:	2b00      	cmp	r3, #0
 800b452:	d10b      	bne.n	800b46c <xTaskCreateStatic+0x2c>
	__asm volatile
 800b454:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b458:	f383 8811 	msr	BASEPRI, r3
 800b45c:	f3bf 8f6f 	isb	sy
 800b460:	f3bf 8f4f 	dsb	sy
 800b464:	623b      	str	r3, [r7, #32]
}
 800b466:	bf00      	nop
 800b468:	bf00      	nop
 800b46a:	e7fd      	b.n	800b468 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800b46c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b46e:	2b00      	cmp	r3, #0
 800b470:	d10b      	bne.n	800b48a <xTaskCreateStatic+0x4a>
	__asm volatile
 800b472:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b476:	f383 8811 	msr	BASEPRI, r3
 800b47a:	f3bf 8f6f 	isb	sy
 800b47e:	f3bf 8f4f 	dsb	sy
 800b482:	61fb      	str	r3, [r7, #28]
}
 800b484:	bf00      	nop
 800b486:	bf00      	nop
 800b488:	e7fd      	b.n	800b486 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800b48a:	23a8      	movs	r3, #168	@ 0xa8
 800b48c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800b48e:	693b      	ldr	r3, [r7, #16]
 800b490:	2ba8      	cmp	r3, #168	@ 0xa8
 800b492:	d00b      	beq.n	800b4ac <xTaskCreateStatic+0x6c>
	__asm volatile
 800b494:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b498:	f383 8811 	msr	BASEPRI, r3
 800b49c:	f3bf 8f6f 	isb	sy
 800b4a0:	f3bf 8f4f 	dsb	sy
 800b4a4:	61bb      	str	r3, [r7, #24]
}
 800b4a6:	bf00      	nop
 800b4a8:	bf00      	nop
 800b4aa:	e7fd      	b.n	800b4a8 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800b4ac:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800b4ae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b4b0:	2b00      	cmp	r3, #0
 800b4b2:	d01e      	beq.n	800b4f2 <xTaskCreateStatic+0xb2>
 800b4b4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b4b6:	2b00      	cmp	r3, #0
 800b4b8:	d01b      	beq.n	800b4f2 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800b4ba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b4bc:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800b4be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b4c0:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800b4c2:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800b4c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b4c6:	2202      	movs	r2, #2
 800b4c8:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800b4cc:	2300      	movs	r3, #0
 800b4ce:	9303      	str	r3, [sp, #12]
 800b4d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b4d2:	9302      	str	r3, [sp, #8]
 800b4d4:	f107 0314 	add.w	r3, r7, #20
 800b4d8:	9301      	str	r3, [sp, #4]
 800b4da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b4dc:	9300      	str	r3, [sp, #0]
 800b4de:	683b      	ldr	r3, [r7, #0]
 800b4e0:	687a      	ldr	r2, [r7, #4]
 800b4e2:	68b9      	ldr	r1, [r7, #8]
 800b4e4:	68f8      	ldr	r0, [r7, #12]
 800b4e6:	f000 f851 	bl	800b58c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800b4ea:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800b4ec:	f000 f8f6 	bl	800b6dc <prvAddNewTaskToReadyList>
 800b4f0:	e001      	b.n	800b4f6 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 800b4f2:	2300      	movs	r3, #0
 800b4f4:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800b4f6:	697b      	ldr	r3, [r7, #20]
	}
 800b4f8:	4618      	mov	r0, r3
 800b4fa:	3728      	adds	r7, #40	@ 0x28
 800b4fc:	46bd      	mov	sp, r7
 800b4fe:	bd80      	pop	{r7, pc}

0800b500 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800b500:	b580      	push	{r7, lr}
 800b502:	b08c      	sub	sp, #48	@ 0x30
 800b504:	af04      	add	r7, sp, #16
 800b506:	60f8      	str	r0, [r7, #12]
 800b508:	60b9      	str	r1, [r7, #8]
 800b50a:	603b      	str	r3, [r7, #0]
 800b50c:	4613      	mov	r3, r2
 800b50e:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800b510:	88fb      	ldrh	r3, [r7, #6]
 800b512:	009b      	lsls	r3, r3, #2
 800b514:	4618      	mov	r0, r3
 800b516:	f001 fca1 	bl	800ce5c <pvPortMalloc>
 800b51a:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800b51c:	697b      	ldr	r3, [r7, #20]
 800b51e:	2b00      	cmp	r3, #0
 800b520:	d00e      	beq.n	800b540 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800b522:	20a8      	movs	r0, #168	@ 0xa8
 800b524:	f001 fc9a 	bl	800ce5c <pvPortMalloc>
 800b528:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800b52a:	69fb      	ldr	r3, [r7, #28]
 800b52c:	2b00      	cmp	r3, #0
 800b52e:	d003      	beq.n	800b538 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800b530:	69fb      	ldr	r3, [r7, #28]
 800b532:	697a      	ldr	r2, [r7, #20]
 800b534:	631a      	str	r2, [r3, #48]	@ 0x30
 800b536:	e005      	b.n	800b544 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800b538:	6978      	ldr	r0, [r7, #20]
 800b53a:	f001 fd5d 	bl	800cff8 <vPortFree>
 800b53e:	e001      	b.n	800b544 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800b540:	2300      	movs	r3, #0
 800b542:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800b544:	69fb      	ldr	r3, [r7, #28]
 800b546:	2b00      	cmp	r3, #0
 800b548:	d017      	beq.n	800b57a <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800b54a:	69fb      	ldr	r3, [r7, #28]
 800b54c:	2200      	movs	r2, #0
 800b54e:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800b552:	88fa      	ldrh	r2, [r7, #6]
 800b554:	2300      	movs	r3, #0
 800b556:	9303      	str	r3, [sp, #12]
 800b558:	69fb      	ldr	r3, [r7, #28]
 800b55a:	9302      	str	r3, [sp, #8]
 800b55c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b55e:	9301      	str	r3, [sp, #4]
 800b560:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b562:	9300      	str	r3, [sp, #0]
 800b564:	683b      	ldr	r3, [r7, #0]
 800b566:	68b9      	ldr	r1, [r7, #8]
 800b568:	68f8      	ldr	r0, [r7, #12]
 800b56a:	f000 f80f 	bl	800b58c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800b56e:	69f8      	ldr	r0, [r7, #28]
 800b570:	f000 f8b4 	bl	800b6dc <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800b574:	2301      	movs	r3, #1
 800b576:	61bb      	str	r3, [r7, #24]
 800b578:	e002      	b.n	800b580 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800b57a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800b57e:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800b580:	69bb      	ldr	r3, [r7, #24]
	}
 800b582:	4618      	mov	r0, r3
 800b584:	3720      	adds	r7, #32
 800b586:	46bd      	mov	sp, r7
 800b588:	bd80      	pop	{r7, pc}
	...

0800b58c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800b58c:	b580      	push	{r7, lr}
 800b58e:	b088      	sub	sp, #32
 800b590:	af00      	add	r7, sp, #0
 800b592:	60f8      	str	r0, [r7, #12]
 800b594:	60b9      	str	r1, [r7, #8]
 800b596:	607a      	str	r2, [r7, #4]
 800b598:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800b59a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b59c:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 800b59e:	687b      	ldr	r3, [r7, #4]
 800b5a0:	009b      	lsls	r3, r3, #2
 800b5a2:	461a      	mov	r2, r3
 800b5a4:	21a5      	movs	r1, #165	@ 0xa5
 800b5a6:	f00f ffa1 	bl	801b4ec <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800b5aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b5ac:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800b5ae:	687b      	ldr	r3, [r7, #4]
 800b5b0:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800b5b4:	3b01      	subs	r3, #1
 800b5b6:	009b      	lsls	r3, r3, #2
 800b5b8:	4413      	add	r3, r2
 800b5ba:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800b5bc:	69bb      	ldr	r3, [r7, #24]
 800b5be:	f023 0307 	bic.w	r3, r3, #7
 800b5c2:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800b5c4:	69bb      	ldr	r3, [r7, #24]
 800b5c6:	f003 0307 	and.w	r3, r3, #7
 800b5ca:	2b00      	cmp	r3, #0
 800b5cc:	d00b      	beq.n	800b5e6 <prvInitialiseNewTask+0x5a>
	__asm volatile
 800b5ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b5d2:	f383 8811 	msr	BASEPRI, r3
 800b5d6:	f3bf 8f6f 	isb	sy
 800b5da:	f3bf 8f4f 	dsb	sy
 800b5de:	617b      	str	r3, [r7, #20]
}
 800b5e0:	bf00      	nop
 800b5e2:	bf00      	nop
 800b5e4:	e7fd      	b.n	800b5e2 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800b5e6:	68bb      	ldr	r3, [r7, #8]
 800b5e8:	2b00      	cmp	r3, #0
 800b5ea:	d01f      	beq.n	800b62c <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800b5ec:	2300      	movs	r3, #0
 800b5ee:	61fb      	str	r3, [r7, #28]
 800b5f0:	e012      	b.n	800b618 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800b5f2:	68ba      	ldr	r2, [r7, #8]
 800b5f4:	69fb      	ldr	r3, [r7, #28]
 800b5f6:	4413      	add	r3, r2
 800b5f8:	7819      	ldrb	r1, [r3, #0]
 800b5fa:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b5fc:	69fb      	ldr	r3, [r7, #28]
 800b5fe:	4413      	add	r3, r2
 800b600:	3334      	adds	r3, #52	@ 0x34
 800b602:	460a      	mov	r2, r1
 800b604:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800b606:	68ba      	ldr	r2, [r7, #8]
 800b608:	69fb      	ldr	r3, [r7, #28]
 800b60a:	4413      	add	r3, r2
 800b60c:	781b      	ldrb	r3, [r3, #0]
 800b60e:	2b00      	cmp	r3, #0
 800b610:	d006      	beq.n	800b620 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800b612:	69fb      	ldr	r3, [r7, #28]
 800b614:	3301      	adds	r3, #1
 800b616:	61fb      	str	r3, [r7, #28]
 800b618:	69fb      	ldr	r3, [r7, #28]
 800b61a:	2b0f      	cmp	r3, #15
 800b61c:	d9e9      	bls.n	800b5f2 <prvInitialiseNewTask+0x66>
 800b61e:	e000      	b.n	800b622 <prvInitialiseNewTask+0x96>
			{
				break;
 800b620:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800b622:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b624:	2200      	movs	r2, #0
 800b626:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800b62a:	e003      	b.n	800b634 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800b62c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b62e:	2200      	movs	r2, #0
 800b630:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800b634:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b636:	2b37      	cmp	r3, #55	@ 0x37
 800b638:	d901      	bls.n	800b63e <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800b63a:	2337      	movs	r3, #55	@ 0x37
 800b63c:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800b63e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b640:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800b642:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800b644:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b646:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800b648:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800b64a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b64c:	2200      	movs	r2, #0
 800b64e:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800b650:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b652:	3304      	adds	r3, #4
 800b654:	4618      	mov	r0, r3
 800b656:	f7ff f965 	bl	800a924 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800b65a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b65c:	3318      	adds	r3, #24
 800b65e:	4618      	mov	r0, r3
 800b660:	f7ff f960 	bl	800a924 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800b664:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b666:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b668:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b66a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b66c:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800b670:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b672:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800b674:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b676:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b678:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800b67a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b67c:	2200      	movs	r2, #0
 800b67e:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800b682:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b684:	2200      	movs	r2, #0
 800b686:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800b68a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b68c:	3354      	adds	r3, #84	@ 0x54
 800b68e:	224c      	movs	r2, #76	@ 0x4c
 800b690:	2100      	movs	r1, #0
 800b692:	4618      	mov	r0, r3
 800b694:	f00f ff2a 	bl	801b4ec <memset>
 800b698:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b69a:	4a0d      	ldr	r2, [pc, #52]	@ (800b6d0 <prvInitialiseNewTask+0x144>)
 800b69c:	659a      	str	r2, [r3, #88]	@ 0x58
 800b69e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b6a0:	4a0c      	ldr	r2, [pc, #48]	@ (800b6d4 <prvInitialiseNewTask+0x148>)
 800b6a2:	65da      	str	r2, [r3, #92]	@ 0x5c
 800b6a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b6a6:	4a0c      	ldr	r2, [pc, #48]	@ (800b6d8 <prvInitialiseNewTask+0x14c>)
 800b6a8:	661a      	str	r2, [r3, #96]	@ 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800b6aa:	683a      	ldr	r2, [r7, #0]
 800b6ac:	68f9      	ldr	r1, [r7, #12]
 800b6ae:	69b8      	ldr	r0, [r7, #24]
 800b6b0:	f001 f982 	bl	800c9b8 <pxPortInitialiseStack>
 800b6b4:	4602      	mov	r2, r0
 800b6b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b6b8:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800b6ba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b6bc:	2b00      	cmp	r3, #0
 800b6be:	d002      	beq.n	800b6c6 <prvInitialiseNewTask+0x13a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800b6c0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b6c2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b6c4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800b6c6:	bf00      	nop
 800b6c8:	3720      	adds	r7, #32
 800b6ca:	46bd      	mov	sp, r7
 800b6cc:	bd80      	pop	{r7, pc}
 800b6ce:	bf00      	nop
 800b6d0:	2000c268 	.word	0x2000c268
 800b6d4:	2000c2d0 	.word	0x2000c2d0
 800b6d8:	2000c338 	.word	0x2000c338

0800b6dc <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800b6dc:	b580      	push	{r7, lr}
 800b6de:	b082      	sub	sp, #8
 800b6e0:	af00      	add	r7, sp, #0
 800b6e2:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800b6e4:	f001 fa98 	bl	800cc18 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800b6e8:	4b2d      	ldr	r3, [pc, #180]	@ (800b7a0 <prvAddNewTaskToReadyList+0xc4>)
 800b6ea:	681b      	ldr	r3, [r3, #0]
 800b6ec:	3301      	adds	r3, #1
 800b6ee:	4a2c      	ldr	r2, [pc, #176]	@ (800b7a0 <prvAddNewTaskToReadyList+0xc4>)
 800b6f0:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800b6f2:	4b2c      	ldr	r3, [pc, #176]	@ (800b7a4 <prvAddNewTaskToReadyList+0xc8>)
 800b6f4:	681b      	ldr	r3, [r3, #0]
 800b6f6:	2b00      	cmp	r3, #0
 800b6f8:	d109      	bne.n	800b70e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800b6fa:	4a2a      	ldr	r2, [pc, #168]	@ (800b7a4 <prvAddNewTaskToReadyList+0xc8>)
 800b6fc:	687b      	ldr	r3, [r7, #4]
 800b6fe:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800b700:	4b27      	ldr	r3, [pc, #156]	@ (800b7a0 <prvAddNewTaskToReadyList+0xc4>)
 800b702:	681b      	ldr	r3, [r3, #0]
 800b704:	2b01      	cmp	r3, #1
 800b706:	d110      	bne.n	800b72a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800b708:	f000 fc56 	bl	800bfb8 <prvInitialiseTaskLists>
 800b70c:	e00d      	b.n	800b72a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800b70e:	4b26      	ldr	r3, [pc, #152]	@ (800b7a8 <prvAddNewTaskToReadyList+0xcc>)
 800b710:	681b      	ldr	r3, [r3, #0]
 800b712:	2b00      	cmp	r3, #0
 800b714:	d109      	bne.n	800b72a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800b716:	4b23      	ldr	r3, [pc, #140]	@ (800b7a4 <prvAddNewTaskToReadyList+0xc8>)
 800b718:	681b      	ldr	r3, [r3, #0]
 800b71a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b71c:	687b      	ldr	r3, [r7, #4]
 800b71e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b720:	429a      	cmp	r2, r3
 800b722:	d802      	bhi.n	800b72a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800b724:	4a1f      	ldr	r2, [pc, #124]	@ (800b7a4 <prvAddNewTaskToReadyList+0xc8>)
 800b726:	687b      	ldr	r3, [r7, #4]
 800b728:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800b72a:	4b20      	ldr	r3, [pc, #128]	@ (800b7ac <prvAddNewTaskToReadyList+0xd0>)
 800b72c:	681b      	ldr	r3, [r3, #0]
 800b72e:	3301      	adds	r3, #1
 800b730:	4a1e      	ldr	r2, [pc, #120]	@ (800b7ac <prvAddNewTaskToReadyList+0xd0>)
 800b732:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800b734:	4b1d      	ldr	r3, [pc, #116]	@ (800b7ac <prvAddNewTaskToReadyList+0xd0>)
 800b736:	681a      	ldr	r2, [r3, #0]
 800b738:	687b      	ldr	r3, [r7, #4]
 800b73a:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800b73c:	687b      	ldr	r3, [r7, #4]
 800b73e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b740:	4b1b      	ldr	r3, [pc, #108]	@ (800b7b0 <prvAddNewTaskToReadyList+0xd4>)
 800b742:	681b      	ldr	r3, [r3, #0]
 800b744:	429a      	cmp	r2, r3
 800b746:	d903      	bls.n	800b750 <prvAddNewTaskToReadyList+0x74>
 800b748:	687b      	ldr	r3, [r7, #4]
 800b74a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b74c:	4a18      	ldr	r2, [pc, #96]	@ (800b7b0 <prvAddNewTaskToReadyList+0xd4>)
 800b74e:	6013      	str	r3, [r2, #0]
 800b750:	687b      	ldr	r3, [r7, #4]
 800b752:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b754:	4613      	mov	r3, r2
 800b756:	009b      	lsls	r3, r3, #2
 800b758:	4413      	add	r3, r2
 800b75a:	009b      	lsls	r3, r3, #2
 800b75c:	4a15      	ldr	r2, [pc, #84]	@ (800b7b4 <prvAddNewTaskToReadyList+0xd8>)
 800b75e:	441a      	add	r2, r3
 800b760:	687b      	ldr	r3, [r7, #4]
 800b762:	3304      	adds	r3, #4
 800b764:	4619      	mov	r1, r3
 800b766:	4610      	mov	r0, r2
 800b768:	f7ff f8e9 	bl	800a93e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800b76c:	f001 fa86 	bl	800cc7c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800b770:	4b0d      	ldr	r3, [pc, #52]	@ (800b7a8 <prvAddNewTaskToReadyList+0xcc>)
 800b772:	681b      	ldr	r3, [r3, #0]
 800b774:	2b00      	cmp	r3, #0
 800b776:	d00e      	beq.n	800b796 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800b778:	4b0a      	ldr	r3, [pc, #40]	@ (800b7a4 <prvAddNewTaskToReadyList+0xc8>)
 800b77a:	681b      	ldr	r3, [r3, #0]
 800b77c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b77e:	687b      	ldr	r3, [r7, #4]
 800b780:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b782:	429a      	cmp	r2, r3
 800b784:	d207      	bcs.n	800b796 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800b786:	4b0c      	ldr	r3, [pc, #48]	@ (800b7b8 <prvAddNewTaskToReadyList+0xdc>)
 800b788:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b78c:	601a      	str	r2, [r3, #0]
 800b78e:	f3bf 8f4f 	dsb	sy
 800b792:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800b796:	bf00      	nop
 800b798:	3708      	adds	r7, #8
 800b79a:	46bd      	mov	sp, r7
 800b79c:	bd80      	pop	{r7, pc}
 800b79e:	bf00      	nop
 800b7a0:	200069ac 	.word	0x200069ac
 800b7a4:	200064d8 	.word	0x200064d8
 800b7a8:	200069b8 	.word	0x200069b8
 800b7ac:	200069c8 	.word	0x200069c8
 800b7b0:	200069b4 	.word	0x200069b4
 800b7b4:	200064dc 	.word	0x200064dc
 800b7b8:	e000ed04 	.word	0xe000ed04

0800b7bc <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800b7bc:	b580      	push	{r7, lr}
 800b7be:	b084      	sub	sp, #16
 800b7c0:	af00      	add	r7, sp, #0
 800b7c2:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800b7c4:	2300      	movs	r3, #0
 800b7c6:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800b7c8:	687b      	ldr	r3, [r7, #4]
 800b7ca:	2b00      	cmp	r3, #0
 800b7cc:	d018      	beq.n	800b800 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800b7ce:	4b14      	ldr	r3, [pc, #80]	@ (800b820 <vTaskDelay+0x64>)
 800b7d0:	681b      	ldr	r3, [r3, #0]
 800b7d2:	2b00      	cmp	r3, #0
 800b7d4:	d00b      	beq.n	800b7ee <vTaskDelay+0x32>
	__asm volatile
 800b7d6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b7da:	f383 8811 	msr	BASEPRI, r3
 800b7de:	f3bf 8f6f 	isb	sy
 800b7e2:	f3bf 8f4f 	dsb	sy
 800b7e6:	60bb      	str	r3, [r7, #8]
}
 800b7e8:	bf00      	nop
 800b7ea:	bf00      	nop
 800b7ec:	e7fd      	b.n	800b7ea <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800b7ee:	f000 f88b 	bl	800b908 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800b7f2:	2100      	movs	r1, #0
 800b7f4:	6878      	ldr	r0, [r7, #4]
 800b7f6:	f000 fd31 	bl	800c25c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800b7fa:	f000 f893 	bl	800b924 <xTaskResumeAll>
 800b7fe:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800b800:	68fb      	ldr	r3, [r7, #12]
 800b802:	2b00      	cmp	r3, #0
 800b804:	d107      	bne.n	800b816 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 800b806:	4b07      	ldr	r3, [pc, #28]	@ (800b824 <vTaskDelay+0x68>)
 800b808:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b80c:	601a      	str	r2, [r3, #0]
 800b80e:	f3bf 8f4f 	dsb	sy
 800b812:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800b816:	bf00      	nop
 800b818:	3710      	adds	r7, #16
 800b81a:	46bd      	mov	sp, r7
 800b81c:	bd80      	pop	{r7, pc}
 800b81e:	bf00      	nop
 800b820:	200069d4 	.word	0x200069d4
 800b824:	e000ed04 	.word	0xe000ed04

0800b828 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800b828:	b580      	push	{r7, lr}
 800b82a:	b08a      	sub	sp, #40	@ 0x28
 800b82c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800b82e:	2300      	movs	r3, #0
 800b830:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800b832:	2300      	movs	r3, #0
 800b834:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800b836:	463a      	mov	r2, r7
 800b838:	1d39      	adds	r1, r7, #4
 800b83a:	f107 0308 	add.w	r3, r7, #8
 800b83e:	4618      	mov	r0, r3
 800b840:	f7ff f81c 	bl	800a87c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800b844:	6839      	ldr	r1, [r7, #0]
 800b846:	687b      	ldr	r3, [r7, #4]
 800b848:	68ba      	ldr	r2, [r7, #8]
 800b84a:	9202      	str	r2, [sp, #8]
 800b84c:	9301      	str	r3, [sp, #4]
 800b84e:	2300      	movs	r3, #0
 800b850:	9300      	str	r3, [sp, #0]
 800b852:	2300      	movs	r3, #0
 800b854:	460a      	mov	r2, r1
 800b856:	4924      	ldr	r1, [pc, #144]	@ (800b8e8 <vTaskStartScheduler+0xc0>)
 800b858:	4824      	ldr	r0, [pc, #144]	@ (800b8ec <vTaskStartScheduler+0xc4>)
 800b85a:	f7ff fdf1 	bl	800b440 <xTaskCreateStatic>
 800b85e:	4603      	mov	r3, r0
 800b860:	4a23      	ldr	r2, [pc, #140]	@ (800b8f0 <vTaskStartScheduler+0xc8>)
 800b862:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800b864:	4b22      	ldr	r3, [pc, #136]	@ (800b8f0 <vTaskStartScheduler+0xc8>)
 800b866:	681b      	ldr	r3, [r3, #0]
 800b868:	2b00      	cmp	r3, #0
 800b86a:	d002      	beq.n	800b872 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800b86c:	2301      	movs	r3, #1
 800b86e:	617b      	str	r3, [r7, #20]
 800b870:	e001      	b.n	800b876 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800b872:	2300      	movs	r3, #0
 800b874:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800b876:	697b      	ldr	r3, [r7, #20]
 800b878:	2b01      	cmp	r3, #1
 800b87a:	d102      	bne.n	800b882 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800b87c:	f000 fd42 	bl	800c304 <xTimerCreateTimerTask>
 800b880:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800b882:	697b      	ldr	r3, [r7, #20]
 800b884:	2b01      	cmp	r3, #1
 800b886:	d11b      	bne.n	800b8c0 <vTaskStartScheduler+0x98>
	__asm volatile
 800b888:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b88c:	f383 8811 	msr	BASEPRI, r3
 800b890:	f3bf 8f6f 	isb	sy
 800b894:	f3bf 8f4f 	dsb	sy
 800b898:	613b      	str	r3, [r7, #16]
}
 800b89a:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800b89c:	4b15      	ldr	r3, [pc, #84]	@ (800b8f4 <vTaskStartScheduler+0xcc>)
 800b89e:	681b      	ldr	r3, [r3, #0]
 800b8a0:	3354      	adds	r3, #84	@ 0x54
 800b8a2:	4a15      	ldr	r2, [pc, #84]	@ (800b8f8 <vTaskStartScheduler+0xd0>)
 800b8a4:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800b8a6:	4b15      	ldr	r3, [pc, #84]	@ (800b8fc <vTaskStartScheduler+0xd4>)
 800b8a8:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800b8ac:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800b8ae:	4b14      	ldr	r3, [pc, #80]	@ (800b900 <vTaskStartScheduler+0xd8>)
 800b8b0:	2201      	movs	r2, #1
 800b8b2:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800b8b4:	4b13      	ldr	r3, [pc, #76]	@ (800b904 <vTaskStartScheduler+0xdc>)
 800b8b6:	2200      	movs	r2, #0
 800b8b8:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800b8ba:	f001 f909 	bl	800cad0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800b8be:	e00f      	b.n	800b8e0 <vTaskStartScheduler+0xb8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800b8c0:	697b      	ldr	r3, [r7, #20]
 800b8c2:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800b8c6:	d10b      	bne.n	800b8e0 <vTaskStartScheduler+0xb8>
	__asm volatile
 800b8c8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b8cc:	f383 8811 	msr	BASEPRI, r3
 800b8d0:	f3bf 8f6f 	isb	sy
 800b8d4:	f3bf 8f4f 	dsb	sy
 800b8d8:	60fb      	str	r3, [r7, #12]
}
 800b8da:	bf00      	nop
 800b8dc:	bf00      	nop
 800b8de:	e7fd      	b.n	800b8dc <vTaskStartScheduler+0xb4>
}
 800b8e0:	bf00      	nop
 800b8e2:	3718      	adds	r7, #24
 800b8e4:	46bd      	mov	sp, r7
 800b8e6:	bd80      	pop	{r7, pc}
 800b8e8:	0801d38c 	.word	0x0801d38c
 800b8ec:	0800bf89 	.word	0x0800bf89
 800b8f0:	200069d0 	.word	0x200069d0
 800b8f4:	200064d8 	.word	0x200064d8
 800b8f8:	200002ac 	.word	0x200002ac
 800b8fc:	200069cc 	.word	0x200069cc
 800b900:	200069b8 	.word	0x200069b8
 800b904:	200069b0 	.word	0x200069b0

0800b908 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800b908:	b480      	push	{r7}
 800b90a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800b90c:	4b04      	ldr	r3, [pc, #16]	@ (800b920 <vTaskSuspendAll+0x18>)
 800b90e:	681b      	ldr	r3, [r3, #0]
 800b910:	3301      	adds	r3, #1
 800b912:	4a03      	ldr	r2, [pc, #12]	@ (800b920 <vTaskSuspendAll+0x18>)
 800b914:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800b916:	bf00      	nop
 800b918:	46bd      	mov	sp, r7
 800b91a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b91e:	4770      	bx	lr
 800b920:	200069d4 	.word	0x200069d4

0800b924 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800b924:	b580      	push	{r7, lr}
 800b926:	b084      	sub	sp, #16
 800b928:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800b92a:	2300      	movs	r3, #0
 800b92c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800b92e:	2300      	movs	r3, #0
 800b930:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800b932:	4b42      	ldr	r3, [pc, #264]	@ (800ba3c <xTaskResumeAll+0x118>)
 800b934:	681b      	ldr	r3, [r3, #0]
 800b936:	2b00      	cmp	r3, #0
 800b938:	d10b      	bne.n	800b952 <xTaskResumeAll+0x2e>
	__asm volatile
 800b93a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b93e:	f383 8811 	msr	BASEPRI, r3
 800b942:	f3bf 8f6f 	isb	sy
 800b946:	f3bf 8f4f 	dsb	sy
 800b94a:	603b      	str	r3, [r7, #0]
}
 800b94c:	bf00      	nop
 800b94e:	bf00      	nop
 800b950:	e7fd      	b.n	800b94e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800b952:	f001 f961 	bl	800cc18 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800b956:	4b39      	ldr	r3, [pc, #228]	@ (800ba3c <xTaskResumeAll+0x118>)
 800b958:	681b      	ldr	r3, [r3, #0]
 800b95a:	3b01      	subs	r3, #1
 800b95c:	4a37      	ldr	r2, [pc, #220]	@ (800ba3c <xTaskResumeAll+0x118>)
 800b95e:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b960:	4b36      	ldr	r3, [pc, #216]	@ (800ba3c <xTaskResumeAll+0x118>)
 800b962:	681b      	ldr	r3, [r3, #0]
 800b964:	2b00      	cmp	r3, #0
 800b966:	d162      	bne.n	800ba2e <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800b968:	4b35      	ldr	r3, [pc, #212]	@ (800ba40 <xTaskResumeAll+0x11c>)
 800b96a:	681b      	ldr	r3, [r3, #0]
 800b96c:	2b00      	cmp	r3, #0
 800b96e:	d05e      	beq.n	800ba2e <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800b970:	e02f      	b.n	800b9d2 <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b972:	4b34      	ldr	r3, [pc, #208]	@ (800ba44 <xTaskResumeAll+0x120>)
 800b974:	68db      	ldr	r3, [r3, #12]
 800b976:	68db      	ldr	r3, [r3, #12]
 800b978:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800b97a:	68fb      	ldr	r3, [r7, #12]
 800b97c:	3318      	adds	r3, #24
 800b97e:	4618      	mov	r0, r3
 800b980:	f7ff f83a 	bl	800a9f8 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b984:	68fb      	ldr	r3, [r7, #12]
 800b986:	3304      	adds	r3, #4
 800b988:	4618      	mov	r0, r3
 800b98a:	f7ff f835 	bl	800a9f8 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800b98e:	68fb      	ldr	r3, [r7, #12]
 800b990:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b992:	4b2d      	ldr	r3, [pc, #180]	@ (800ba48 <xTaskResumeAll+0x124>)
 800b994:	681b      	ldr	r3, [r3, #0]
 800b996:	429a      	cmp	r2, r3
 800b998:	d903      	bls.n	800b9a2 <xTaskResumeAll+0x7e>
 800b99a:	68fb      	ldr	r3, [r7, #12]
 800b99c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b99e:	4a2a      	ldr	r2, [pc, #168]	@ (800ba48 <xTaskResumeAll+0x124>)
 800b9a0:	6013      	str	r3, [r2, #0]
 800b9a2:	68fb      	ldr	r3, [r7, #12]
 800b9a4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b9a6:	4613      	mov	r3, r2
 800b9a8:	009b      	lsls	r3, r3, #2
 800b9aa:	4413      	add	r3, r2
 800b9ac:	009b      	lsls	r3, r3, #2
 800b9ae:	4a27      	ldr	r2, [pc, #156]	@ (800ba4c <xTaskResumeAll+0x128>)
 800b9b0:	441a      	add	r2, r3
 800b9b2:	68fb      	ldr	r3, [r7, #12]
 800b9b4:	3304      	adds	r3, #4
 800b9b6:	4619      	mov	r1, r3
 800b9b8:	4610      	mov	r0, r2
 800b9ba:	f7fe ffc0 	bl	800a93e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800b9be:	68fb      	ldr	r3, [r7, #12]
 800b9c0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b9c2:	4b23      	ldr	r3, [pc, #140]	@ (800ba50 <xTaskResumeAll+0x12c>)
 800b9c4:	681b      	ldr	r3, [r3, #0]
 800b9c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b9c8:	429a      	cmp	r2, r3
 800b9ca:	d302      	bcc.n	800b9d2 <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 800b9cc:	4b21      	ldr	r3, [pc, #132]	@ (800ba54 <xTaskResumeAll+0x130>)
 800b9ce:	2201      	movs	r2, #1
 800b9d0:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800b9d2:	4b1c      	ldr	r3, [pc, #112]	@ (800ba44 <xTaskResumeAll+0x120>)
 800b9d4:	681b      	ldr	r3, [r3, #0]
 800b9d6:	2b00      	cmp	r3, #0
 800b9d8:	d1cb      	bne.n	800b972 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800b9da:	68fb      	ldr	r3, [r7, #12]
 800b9dc:	2b00      	cmp	r3, #0
 800b9de:	d001      	beq.n	800b9e4 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800b9e0:	f000 fb8e 	bl	800c100 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800b9e4:	4b1c      	ldr	r3, [pc, #112]	@ (800ba58 <xTaskResumeAll+0x134>)
 800b9e6:	681b      	ldr	r3, [r3, #0]
 800b9e8:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800b9ea:	687b      	ldr	r3, [r7, #4]
 800b9ec:	2b00      	cmp	r3, #0
 800b9ee:	d010      	beq.n	800ba12 <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800b9f0:	f000 f846 	bl	800ba80 <xTaskIncrementTick>
 800b9f4:	4603      	mov	r3, r0
 800b9f6:	2b00      	cmp	r3, #0
 800b9f8:	d002      	beq.n	800ba00 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 800b9fa:	4b16      	ldr	r3, [pc, #88]	@ (800ba54 <xTaskResumeAll+0x130>)
 800b9fc:	2201      	movs	r2, #1
 800b9fe:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800ba00:	687b      	ldr	r3, [r7, #4]
 800ba02:	3b01      	subs	r3, #1
 800ba04:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800ba06:	687b      	ldr	r3, [r7, #4]
 800ba08:	2b00      	cmp	r3, #0
 800ba0a:	d1f1      	bne.n	800b9f0 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 800ba0c:	4b12      	ldr	r3, [pc, #72]	@ (800ba58 <xTaskResumeAll+0x134>)
 800ba0e:	2200      	movs	r2, #0
 800ba10:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800ba12:	4b10      	ldr	r3, [pc, #64]	@ (800ba54 <xTaskResumeAll+0x130>)
 800ba14:	681b      	ldr	r3, [r3, #0]
 800ba16:	2b00      	cmp	r3, #0
 800ba18:	d009      	beq.n	800ba2e <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800ba1a:	2301      	movs	r3, #1
 800ba1c:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800ba1e:	4b0f      	ldr	r3, [pc, #60]	@ (800ba5c <xTaskResumeAll+0x138>)
 800ba20:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800ba24:	601a      	str	r2, [r3, #0]
 800ba26:	f3bf 8f4f 	dsb	sy
 800ba2a:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800ba2e:	f001 f925 	bl	800cc7c <vPortExitCritical>

	return xAlreadyYielded;
 800ba32:	68bb      	ldr	r3, [r7, #8]
}
 800ba34:	4618      	mov	r0, r3
 800ba36:	3710      	adds	r7, #16
 800ba38:	46bd      	mov	sp, r7
 800ba3a:	bd80      	pop	{r7, pc}
 800ba3c:	200069d4 	.word	0x200069d4
 800ba40:	200069ac 	.word	0x200069ac
 800ba44:	2000696c 	.word	0x2000696c
 800ba48:	200069b4 	.word	0x200069b4
 800ba4c:	200064dc 	.word	0x200064dc
 800ba50:	200064d8 	.word	0x200064d8
 800ba54:	200069c0 	.word	0x200069c0
 800ba58:	200069bc 	.word	0x200069bc
 800ba5c:	e000ed04 	.word	0xe000ed04

0800ba60 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800ba60:	b480      	push	{r7}
 800ba62:	b083      	sub	sp, #12
 800ba64:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800ba66:	4b05      	ldr	r3, [pc, #20]	@ (800ba7c <xTaskGetTickCount+0x1c>)
 800ba68:	681b      	ldr	r3, [r3, #0]
 800ba6a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800ba6c:	687b      	ldr	r3, [r7, #4]
}
 800ba6e:	4618      	mov	r0, r3
 800ba70:	370c      	adds	r7, #12
 800ba72:	46bd      	mov	sp, r7
 800ba74:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba78:	4770      	bx	lr
 800ba7a:	bf00      	nop
 800ba7c:	200069b0 	.word	0x200069b0

0800ba80 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800ba80:	b580      	push	{r7, lr}
 800ba82:	b086      	sub	sp, #24
 800ba84:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800ba86:	2300      	movs	r3, #0
 800ba88:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800ba8a:	4b4f      	ldr	r3, [pc, #316]	@ (800bbc8 <xTaskIncrementTick+0x148>)
 800ba8c:	681b      	ldr	r3, [r3, #0]
 800ba8e:	2b00      	cmp	r3, #0
 800ba90:	f040 8090 	bne.w	800bbb4 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800ba94:	4b4d      	ldr	r3, [pc, #308]	@ (800bbcc <xTaskIncrementTick+0x14c>)
 800ba96:	681b      	ldr	r3, [r3, #0]
 800ba98:	3301      	adds	r3, #1
 800ba9a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800ba9c:	4a4b      	ldr	r2, [pc, #300]	@ (800bbcc <xTaskIncrementTick+0x14c>)
 800ba9e:	693b      	ldr	r3, [r7, #16]
 800baa0:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800baa2:	693b      	ldr	r3, [r7, #16]
 800baa4:	2b00      	cmp	r3, #0
 800baa6:	d121      	bne.n	800baec <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 800baa8:	4b49      	ldr	r3, [pc, #292]	@ (800bbd0 <xTaskIncrementTick+0x150>)
 800baaa:	681b      	ldr	r3, [r3, #0]
 800baac:	681b      	ldr	r3, [r3, #0]
 800baae:	2b00      	cmp	r3, #0
 800bab0:	d00b      	beq.n	800baca <xTaskIncrementTick+0x4a>
	__asm volatile
 800bab2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bab6:	f383 8811 	msr	BASEPRI, r3
 800baba:	f3bf 8f6f 	isb	sy
 800babe:	f3bf 8f4f 	dsb	sy
 800bac2:	603b      	str	r3, [r7, #0]
}
 800bac4:	bf00      	nop
 800bac6:	bf00      	nop
 800bac8:	e7fd      	b.n	800bac6 <xTaskIncrementTick+0x46>
 800baca:	4b41      	ldr	r3, [pc, #260]	@ (800bbd0 <xTaskIncrementTick+0x150>)
 800bacc:	681b      	ldr	r3, [r3, #0]
 800bace:	60fb      	str	r3, [r7, #12]
 800bad0:	4b40      	ldr	r3, [pc, #256]	@ (800bbd4 <xTaskIncrementTick+0x154>)
 800bad2:	681b      	ldr	r3, [r3, #0]
 800bad4:	4a3e      	ldr	r2, [pc, #248]	@ (800bbd0 <xTaskIncrementTick+0x150>)
 800bad6:	6013      	str	r3, [r2, #0]
 800bad8:	4a3e      	ldr	r2, [pc, #248]	@ (800bbd4 <xTaskIncrementTick+0x154>)
 800bada:	68fb      	ldr	r3, [r7, #12]
 800badc:	6013      	str	r3, [r2, #0]
 800bade:	4b3e      	ldr	r3, [pc, #248]	@ (800bbd8 <xTaskIncrementTick+0x158>)
 800bae0:	681b      	ldr	r3, [r3, #0]
 800bae2:	3301      	adds	r3, #1
 800bae4:	4a3c      	ldr	r2, [pc, #240]	@ (800bbd8 <xTaskIncrementTick+0x158>)
 800bae6:	6013      	str	r3, [r2, #0]
 800bae8:	f000 fb0a 	bl	800c100 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800baec:	4b3b      	ldr	r3, [pc, #236]	@ (800bbdc <xTaskIncrementTick+0x15c>)
 800baee:	681b      	ldr	r3, [r3, #0]
 800baf0:	693a      	ldr	r2, [r7, #16]
 800baf2:	429a      	cmp	r2, r3
 800baf4:	d349      	bcc.n	800bb8a <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800baf6:	4b36      	ldr	r3, [pc, #216]	@ (800bbd0 <xTaskIncrementTick+0x150>)
 800baf8:	681b      	ldr	r3, [r3, #0]
 800bafa:	681b      	ldr	r3, [r3, #0]
 800bafc:	2b00      	cmp	r3, #0
 800bafe:	d104      	bne.n	800bb0a <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800bb00:	4b36      	ldr	r3, [pc, #216]	@ (800bbdc <xTaskIncrementTick+0x15c>)
 800bb02:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800bb06:	601a      	str	r2, [r3, #0]
					break;
 800bb08:	e03f      	b.n	800bb8a <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bb0a:	4b31      	ldr	r3, [pc, #196]	@ (800bbd0 <xTaskIncrementTick+0x150>)
 800bb0c:	681b      	ldr	r3, [r3, #0]
 800bb0e:	68db      	ldr	r3, [r3, #12]
 800bb10:	68db      	ldr	r3, [r3, #12]
 800bb12:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800bb14:	68bb      	ldr	r3, [r7, #8]
 800bb16:	685b      	ldr	r3, [r3, #4]
 800bb18:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800bb1a:	693a      	ldr	r2, [r7, #16]
 800bb1c:	687b      	ldr	r3, [r7, #4]
 800bb1e:	429a      	cmp	r2, r3
 800bb20:	d203      	bcs.n	800bb2a <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800bb22:	4a2e      	ldr	r2, [pc, #184]	@ (800bbdc <xTaskIncrementTick+0x15c>)
 800bb24:	687b      	ldr	r3, [r7, #4]
 800bb26:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800bb28:	e02f      	b.n	800bb8a <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800bb2a:	68bb      	ldr	r3, [r7, #8]
 800bb2c:	3304      	adds	r3, #4
 800bb2e:	4618      	mov	r0, r3
 800bb30:	f7fe ff62 	bl	800a9f8 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800bb34:	68bb      	ldr	r3, [r7, #8]
 800bb36:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bb38:	2b00      	cmp	r3, #0
 800bb3a:	d004      	beq.n	800bb46 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800bb3c:	68bb      	ldr	r3, [r7, #8]
 800bb3e:	3318      	adds	r3, #24
 800bb40:	4618      	mov	r0, r3
 800bb42:	f7fe ff59 	bl	800a9f8 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800bb46:	68bb      	ldr	r3, [r7, #8]
 800bb48:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800bb4a:	4b25      	ldr	r3, [pc, #148]	@ (800bbe0 <xTaskIncrementTick+0x160>)
 800bb4c:	681b      	ldr	r3, [r3, #0]
 800bb4e:	429a      	cmp	r2, r3
 800bb50:	d903      	bls.n	800bb5a <xTaskIncrementTick+0xda>
 800bb52:	68bb      	ldr	r3, [r7, #8]
 800bb54:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bb56:	4a22      	ldr	r2, [pc, #136]	@ (800bbe0 <xTaskIncrementTick+0x160>)
 800bb58:	6013      	str	r3, [r2, #0]
 800bb5a:	68bb      	ldr	r3, [r7, #8]
 800bb5c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800bb5e:	4613      	mov	r3, r2
 800bb60:	009b      	lsls	r3, r3, #2
 800bb62:	4413      	add	r3, r2
 800bb64:	009b      	lsls	r3, r3, #2
 800bb66:	4a1f      	ldr	r2, [pc, #124]	@ (800bbe4 <xTaskIncrementTick+0x164>)
 800bb68:	441a      	add	r2, r3
 800bb6a:	68bb      	ldr	r3, [r7, #8]
 800bb6c:	3304      	adds	r3, #4
 800bb6e:	4619      	mov	r1, r3
 800bb70:	4610      	mov	r0, r2
 800bb72:	f7fe fee4 	bl	800a93e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800bb76:	68bb      	ldr	r3, [r7, #8]
 800bb78:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800bb7a:	4b1b      	ldr	r3, [pc, #108]	@ (800bbe8 <xTaskIncrementTick+0x168>)
 800bb7c:	681b      	ldr	r3, [r3, #0]
 800bb7e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bb80:	429a      	cmp	r2, r3
 800bb82:	d3b8      	bcc.n	800baf6 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 800bb84:	2301      	movs	r3, #1
 800bb86:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800bb88:	e7b5      	b.n	800baf6 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800bb8a:	4b17      	ldr	r3, [pc, #92]	@ (800bbe8 <xTaskIncrementTick+0x168>)
 800bb8c:	681b      	ldr	r3, [r3, #0]
 800bb8e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800bb90:	4914      	ldr	r1, [pc, #80]	@ (800bbe4 <xTaskIncrementTick+0x164>)
 800bb92:	4613      	mov	r3, r2
 800bb94:	009b      	lsls	r3, r3, #2
 800bb96:	4413      	add	r3, r2
 800bb98:	009b      	lsls	r3, r3, #2
 800bb9a:	440b      	add	r3, r1
 800bb9c:	681b      	ldr	r3, [r3, #0]
 800bb9e:	2b01      	cmp	r3, #1
 800bba0:	d901      	bls.n	800bba6 <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 800bba2:	2301      	movs	r3, #1
 800bba4:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800bba6:	4b11      	ldr	r3, [pc, #68]	@ (800bbec <xTaskIncrementTick+0x16c>)
 800bba8:	681b      	ldr	r3, [r3, #0]
 800bbaa:	2b00      	cmp	r3, #0
 800bbac:	d007      	beq.n	800bbbe <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 800bbae:	2301      	movs	r3, #1
 800bbb0:	617b      	str	r3, [r7, #20]
 800bbb2:	e004      	b.n	800bbbe <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800bbb4:	4b0e      	ldr	r3, [pc, #56]	@ (800bbf0 <xTaskIncrementTick+0x170>)
 800bbb6:	681b      	ldr	r3, [r3, #0]
 800bbb8:	3301      	adds	r3, #1
 800bbba:	4a0d      	ldr	r2, [pc, #52]	@ (800bbf0 <xTaskIncrementTick+0x170>)
 800bbbc:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800bbbe:	697b      	ldr	r3, [r7, #20]
}
 800bbc0:	4618      	mov	r0, r3
 800bbc2:	3718      	adds	r7, #24
 800bbc4:	46bd      	mov	sp, r7
 800bbc6:	bd80      	pop	{r7, pc}
 800bbc8:	200069d4 	.word	0x200069d4
 800bbcc:	200069b0 	.word	0x200069b0
 800bbd0:	20006964 	.word	0x20006964
 800bbd4:	20006968 	.word	0x20006968
 800bbd8:	200069c4 	.word	0x200069c4
 800bbdc:	200069cc 	.word	0x200069cc
 800bbe0:	200069b4 	.word	0x200069b4
 800bbe4:	200064dc 	.word	0x200064dc
 800bbe8:	200064d8 	.word	0x200064d8
 800bbec:	200069c0 	.word	0x200069c0
 800bbf0:	200069bc 	.word	0x200069bc

0800bbf4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800bbf4:	b480      	push	{r7}
 800bbf6:	b085      	sub	sp, #20
 800bbf8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800bbfa:	4b2b      	ldr	r3, [pc, #172]	@ (800bca8 <vTaskSwitchContext+0xb4>)
 800bbfc:	681b      	ldr	r3, [r3, #0]
 800bbfe:	2b00      	cmp	r3, #0
 800bc00:	d003      	beq.n	800bc0a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800bc02:	4b2a      	ldr	r3, [pc, #168]	@ (800bcac <vTaskSwitchContext+0xb8>)
 800bc04:	2201      	movs	r2, #1
 800bc06:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800bc08:	e047      	b.n	800bc9a <vTaskSwitchContext+0xa6>
		xYieldPending = pdFALSE;
 800bc0a:	4b28      	ldr	r3, [pc, #160]	@ (800bcac <vTaskSwitchContext+0xb8>)
 800bc0c:	2200      	movs	r2, #0
 800bc0e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bc10:	4b27      	ldr	r3, [pc, #156]	@ (800bcb0 <vTaskSwitchContext+0xbc>)
 800bc12:	681b      	ldr	r3, [r3, #0]
 800bc14:	60fb      	str	r3, [r7, #12]
 800bc16:	e011      	b.n	800bc3c <vTaskSwitchContext+0x48>
 800bc18:	68fb      	ldr	r3, [r7, #12]
 800bc1a:	2b00      	cmp	r3, #0
 800bc1c:	d10b      	bne.n	800bc36 <vTaskSwitchContext+0x42>
	__asm volatile
 800bc1e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bc22:	f383 8811 	msr	BASEPRI, r3
 800bc26:	f3bf 8f6f 	isb	sy
 800bc2a:	f3bf 8f4f 	dsb	sy
 800bc2e:	607b      	str	r3, [r7, #4]
}
 800bc30:	bf00      	nop
 800bc32:	bf00      	nop
 800bc34:	e7fd      	b.n	800bc32 <vTaskSwitchContext+0x3e>
 800bc36:	68fb      	ldr	r3, [r7, #12]
 800bc38:	3b01      	subs	r3, #1
 800bc3a:	60fb      	str	r3, [r7, #12]
 800bc3c:	491d      	ldr	r1, [pc, #116]	@ (800bcb4 <vTaskSwitchContext+0xc0>)
 800bc3e:	68fa      	ldr	r2, [r7, #12]
 800bc40:	4613      	mov	r3, r2
 800bc42:	009b      	lsls	r3, r3, #2
 800bc44:	4413      	add	r3, r2
 800bc46:	009b      	lsls	r3, r3, #2
 800bc48:	440b      	add	r3, r1
 800bc4a:	681b      	ldr	r3, [r3, #0]
 800bc4c:	2b00      	cmp	r3, #0
 800bc4e:	d0e3      	beq.n	800bc18 <vTaskSwitchContext+0x24>
 800bc50:	68fa      	ldr	r2, [r7, #12]
 800bc52:	4613      	mov	r3, r2
 800bc54:	009b      	lsls	r3, r3, #2
 800bc56:	4413      	add	r3, r2
 800bc58:	009b      	lsls	r3, r3, #2
 800bc5a:	4a16      	ldr	r2, [pc, #88]	@ (800bcb4 <vTaskSwitchContext+0xc0>)
 800bc5c:	4413      	add	r3, r2
 800bc5e:	60bb      	str	r3, [r7, #8]
 800bc60:	68bb      	ldr	r3, [r7, #8]
 800bc62:	685b      	ldr	r3, [r3, #4]
 800bc64:	685a      	ldr	r2, [r3, #4]
 800bc66:	68bb      	ldr	r3, [r7, #8]
 800bc68:	605a      	str	r2, [r3, #4]
 800bc6a:	68bb      	ldr	r3, [r7, #8]
 800bc6c:	685a      	ldr	r2, [r3, #4]
 800bc6e:	68bb      	ldr	r3, [r7, #8]
 800bc70:	3308      	adds	r3, #8
 800bc72:	429a      	cmp	r2, r3
 800bc74:	d104      	bne.n	800bc80 <vTaskSwitchContext+0x8c>
 800bc76:	68bb      	ldr	r3, [r7, #8]
 800bc78:	685b      	ldr	r3, [r3, #4]
 800bc7a:	685a      	ldr	r2, [r3, #4]
 800bc7c:	68bb      	ldr	r3, [r7, #8]
 800bc7e:	605a      	str	r2, [r3, #4]
 800bc80:	68bb      	ldr	r3, [r7, #8]
 800bc82:	685b      	ldr	r3, [r3, #4]
 800bc84:	68db      	ldr	r3, [r3, #12]
 800bc86:	4a0c      	ldr	r2, [pc, #48]	@ (800bcb8 <vTaskSwitchContext+0xc4>)
 800bc88:	6013      	str	r3, [r2, #0]
 800bc8a:	4a09      	ldr	r2, [pc, #36]	@ (800bcb0 <vTaskSwitchContext+0xbc>)
 800bc8c:	68fb      	ldr	r3, [r7, #12]
 800bc8e:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800bc90:	4b09      	ldr	r3, [pc, #36]	@ (800bcb8 <vTaskSwitchContext+0xc4>)
 800bc92:	681b      	ldr	r3, [r3, #0]
 800bc94:	3354      	adds	r3, #84	@ 0x54
 800bc96:	4a09      	ldr	r2, [pc, #36]	@ (800bcbc <vTaskSwitchContext+0xc8>)
 800bc98:	6013      	str	r3, [r2, #0]
}
 800bc9a:	bf00      	nop
 800bc9c:	3714      	adds	r7, #20
 800bc9e:	46bd      	mov	sp, r7
 800bca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bca4:	4770      	bx	lr
 800bca6:	bf00      	nop
 800bca8:	200069d4 	.word	0x200069d4
 800bcac:	200069c0 	.word	0x200069c0
 800bcb0:	200069b4 	.word	0x200069b4
 800bcb4:	200064dc 	.word	0x200064dc
 800bcb8:	200064d8 	.word	0x200064d8
 800bcbc:	200002ac 	.word	0x200002ac

0800bcc0 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800bcc0:	b580      	push	{r7, lr}
 800bcc2:	b084      	sub	sp, #16
 800bcc4:	af00      	add	r7, sp, #0
 800bcc6:	6078      	str	r0, [r7, #4]
 800bcc8:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800bcca:	687b      	ldr	r3, [r7, #4]
 800bccc:	2b00      	cmp	r3, #0
 800bcce:	d10b      	bne.n	800bce8 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 800bcd0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bcd4:	f383 8811 	msr	BASEPRI, r3
 800bcd8:	f3bf 8f6f 	isb	sy
 800bcdc:	f3bf 8f4f 	dsb	sy
 800bce0:	60fb      	str	r3, [r7, #12]
}
 800bce2:	bf00      	nop
 800bce4:	bf00      	nop
 800bce6:	e7fd      	b.n	800bce4 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800bce8:	4b07      	ldr	r3, [pc, #28]	@ (800bd08 <vTaskPlaceOnEventList+0x48>)
 800bcea:	681b      	ldr	r3, [r3, #0]
 800bcec:	3318      	adds	r3, #24
 800bcee:	4619      	mov	r1, r3
 800bcf0:	6878      	ldr	r0, [r7, #4]
 800bcf2:	f7fe fe48 	bl	800a986 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800bcf6:	2101      	movs	r1, #1
 800bcf8:	6838      	ldr	r0, [r7, #0]
 800bcfa:	f000 faaf 	bl	800c25c <prvAddCurrentTaskToDelayedList>
}
 800bcfe:	bf00      	nop
 800bd00:	3710      	adds	r7, #16
 800bd02:	46bd      	mov	sp, r7
 800bd04:	bd80      	pop	{r7, pc}
 800bd06:	bf00      	nop
 800bd08:	200064d8 	.word	0x200064d8

0800bd0c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800bd0c:	b580      	push	{r7, lr}
 800bd0e:	b086      	sub	sp, #24
 800bd10:	af00      	add	r7, sp, #0
 800bd12:	60f8      	str	r0, [r7, #12]
 800bd14:	60b9      	str	r1, [r7, #8]
 800bd16:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800bd18:	68fb      	ldr	r3, [r7, #12]
 800bd1a:	2b00      	cmp	r3, #0
 800bd1c:	d10b      	bne.n	800bd36 <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 800bd1e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bd22:	f383 8811 	msr	BASEPRI, r3
 800bd26:	f3bf 8f6f 	isb	sy
 800bd2a:	f3bf 8f4f 	dsb	sy
 800bd2e:	617b      	str	r3, [r7, #20]
}
 800bd30:	bf00      	nop
 800bd32:	bf00      	nop
 800bd34:	e7fd      	b.n	800bd32 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800bd36:	4b0a      	ldr	r3, [pc, #40]	@ (800bd60 <vTaskPlaceOnEventListRestricted+0x54>)
 800bd38:	681b      	ldr	r3, [r3, #0]
 800bd3a:	3318      	adds	r3, #24
 800bd3c:	4619      	mov	r1, r3
 800bd3e:	68f8      	ldr	r0, [r7, #12]
 800bd40:	f7fe fdfd 	bl	800a93e <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800bd44:	687b      	ldr	r3, [r7, #4]
 800bd46:	2b00      	cmp	r3, #0
 800bd48:	d002      	beq.n	800bd50 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 800bd4a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800bd4e:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800bd50:	6879      	ldr	r1, [r7, #4]
 800bd52:	68b8      	ldr	r0, [r7, #8]
 800bd54:	f000 fa82 	bl	800c25c <prvAddCurrentTaskToDelayedList>
	}
 800bd58:	bf00      	nop
 800bd5a:	3718      	adds	r7, #24
 800bd5c:	46bd      	mov	sp, r7
 800bd5e:	bd80      	pop	{r7, pc}
 800bd60:	200064d8 	.word	0x200064d8

0800bd64 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800bd64:	b580      	push	{r7, lr}
 800bd66:	b086      	sub	sp, #24
 800bd68:	af00      	add	r7, sp, #0
 800bd6a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bd6c:	687b      	ldr	r3, [r7, #4]
 800bd6e:	68db      	ldr	r3, [r3, #12]
 800bd70:	68db      	ldr	r3, [r3, #12]
 800bd72:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800bd74:	693b      	ldr	r3, [r7, #16]
 800bd76:	2b00      	cmp	r3, #0
 800bd78:	d10b      	bne.n	800bd92 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 800bd7a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bd7e:	f383 8811 	msr	BASEPRI, r3
 800bd82:	f3bf 8f6f 	isb	sy
 800bd86:	f3bf 8f4f 	dsb	sy
 800bd8a:	60fb      	str	r3, [r7, #12]
}
 800bd8c:	bf00      	nop
 800bd8e:	bf00      	nop
 800bd90:	e7fd      	b.n	800bd8e <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800bd92:	693b      	ldr	r3, [r7, #16]
 800bd94:	3318      	adds	r3, #24
 800bd96:	4618      	mov	r0, r3
 800bd98:	f7fe fe2e 	bl	800a9f8 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800bd9c:	4b1d      	ldr	r3, [pc, #116]	@ (800be14 <xTaskRemoveFromEventList+0xb0>)
 800bd9e:	681b      	ldr	r3, [r3, #0]
 800bda0:	2b00      	cmp	r3, #0
 800bda2:	d11d      	bne.n	800bde0 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800bda4:	693b      	ldr	r3, [r7, #16]
 800bda6:	3304      	adds	r3, #4
 800bda8:	4618      	mov	r0, r3
 800bdaa:	f7fe fe25 	bl	800a9f8 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800bdae:	693b      	ldr	r3, [r7, #16]
 800bdb0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800bdb2:	4b19      	ldr	r3, [pc, #100]	@ (800be18 <xTaskRemoveFromEventList+0xb4>)
 800bdb4:	681b      	ldr	r3, [r3, #0]
 800bdb6:	429a      	cmp	r2, r3
 800bdb8:	d903      	bls.n	800bdc2 <xTaskRemoveFromEventList+0x5e>
 800bdba:	693b      	ldr	r3, [r7, #16]
 800bdbc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bdbe:	4a16      	ldr	r2, [pc, #88]	@ (800be18 <xTaskRemoveFromEventList+0xb4>)
 800bdc0:	6013      	str	r3, [r2, #0]
 800bdc2:	693b      	ldr	r3, [r7, #16]
 800bdc4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800bdc6:	4613      	mov	r3, r2
 800bdc8:	009b      	lsls	r3, r3, #2
 800bdca:	4413      	add	r3, r2
 800bdcc:	009b      	lsls	r3, r3, #2
 800bdce:	4a13      	ldr	r2, [pc, #76]	@ (800be1c <xTaskRemoveFromEventList+0xb8>)
 800bdd0:	441a      	add	r2, r3
 800bdd2:	693b      	ldr	r3, [r7, #16]
 800bdd4:	3304      	adds	r3, #4
 800bdd6:	4619      	mov	r1, r3
 800bdd8:	4610      	mov	r0, r2
 800bdda:	f7fe fdb0 	bl	800a93e <vListInsertEnd>
 800bdde:	e005      	b.n	800bdec <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800bde0:	693b      	ldr	r3, [r7, #16]
 800bde2:	3318      	adds	r3, #24
 800bde4:	4619      	mov	r1, r3
 800bde6:	480e      	ldr	r0, [pc, #56]	@ (800be20 <xTaskRemoveFromEventList+0xbc>)
 800bde8:	f7fe fda9 	bl	800a93e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800bdec:	693b      	ldr	r3, [r7, #16]
 800bdee:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800bdf0:	4b0c      	ldr	r3, [pc, #48]	@ (800be24 <xTaskRemoveFromEventList+0xc0>)
 800bdf2:	681b      	ldr	r3, [r3, #0]
 800bdf4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bdf6:	429a      	cmp	r2, r3
 800bdf8:	d905      	bls.n	800be06 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800bdfa:	2301      	movs	r3, #1
 800bdfc:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800bdfe:	4b0a      	ldr	r3, [pc, #40]	@ (800be28 <xTaskRemoveFromEventList+0xc4>)
 800be00:	2201      	movs	r2, #1
 800be02:	601a      	str	r2, [r3, #0]
 800be04:	e001      	b.n	800be0a <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 800be06:	2300      	movs	r3, #0
 800be08:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800be0a:	697b      	ldr	r3, [r7, #20]
}
 800be0c:	4618      	mov	r0, r3
 800be0e:	3718      	adds	r7, #24
 800be10:	46bd      	mov	sp, r7
 800be12:	bd80      	pop	{r7, pc}
 800be14:	200069d4 	.word	0x200069d4
 800be18:	200069b4 	.word	0x200069b4
 800be1c:	200064dc 	.word	0x200064dc
 800be20:	2000696c 	.word	0x2000696c
 800be24:	200064d8 	.word	0x200064d8
 800be28:	200069c0 	.word	0x200069c0

0800be2c <vTaskSetTimeOutState>:
	}
}
/*-----------------------------------------------------------*/

void vTaskSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800be2c:	b580      	push	{r7, lr}
 800be2e:	b084      	sub	sp, #16
 800be30:	af00      	add	r7, sp, #0
 800be32:	6078      	str	r0, [r7, #4]
	configASSERT( pxTimeOut );
 800be34:	687b      	ldr	r3, [r7, #4]
 800be36:	2b00      	cmp	r3, #0
 800be38:	d10b      	bne.n	800be52 <vTaskSetTimeOutState+0x26>
	__asm volatile
 800be3a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800be3e:	f383 8811 	msr	BASEPRI, r3
 800be42:	f3bf 8f6f 	isb	sy
 800be46:	f3bf 8f4f 	dsb	sy
 800be4a:	60fb      	str	r3, [r7, #12]
}
 800be4c:	bf00      	nop
 800be4e:	bf00      	nop
 800be50:	e7fd      	b.n	800be4e <vTaskSetTimeOutState+0x22>
	taskENTER_CRITICAL();
 800be52:	f000 fee1 	bl	800cc18 <vPortEnterCritical>
	{
		pxTimeOut->xOverflowCount = xNumOfOverflows;
 800be56:	4b07      	ldr	r3, [pc, #28]	@ (800be74 <vTaskSetTimeOutState+0x48>)
 800be58:	681a      	ldr	r2, [r3, #0]
 800be5a:	687b      	ldr	r3, [r7, #4]
 800be5c:	601a      	str	r2, [r3, #0]
		pxTimeOut->xTimeOnEntering = xTickCount;
 800be5e:	4b06      	ldr	r3, [pc, #24]	@ (800be78 <vTaskSetTimeOutState+0x4c>)
 800be60:	681a      	ldr	r2, [r3, #0]
 800be62:	687b      	ldr	r3, [r7, #4]
 800be64:	605a      	str	r2, [r3, #4]
	}
	taskEXIT_CRITICAL();
 800be66:	f000 ff09 	bl	800cc7c <vPortExitCritical>
}
 800be6a:	bf00      	nop
 800be6c:	3710      	adds	r7, #16
 800be6e:	46bd      	mov	sp, r7
 800be70:	bd80      	pop	{r7, pc}
 800be72:	bf00      	nop
 800be74:	200069c4 	.word	0x200069c4
 800be78:	200069b0 	.word	0x200069b0

0800be7c <vTaskInternalSetTimeOutState>:
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800be7c:	b480      	push	{r7}
 800be7e:	b083      	sub	sp, #12
 800be80:	af00      	add	r7, sp, #0
 800be82:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800be84:	4b06      	ldr	r3, [pc, #24]	@ (800bea0 <vTaskInternalSetTimeOutState+0x24>)
 800be86:	681a      	ldr	r2, [r3, #0]
 800be88:	687b      	ldr	r3, [r7, #4]
 800be8a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800be8c:	4b05      	ldr	r3, [pc, #20]	@ (800bea4 <vTaskInternalSetTimeOutState+0x28>)
 800be8e:	681a      	ldr	r2, [r3, #0]
 800be90:	687b      	ldr	r3, [r7, #4]
 800be92:	605a      	str	r2, [r3, #4]
}
 800be94:	bf00      	nop
 800be96:	370c      	adds	r7, #12
 800be98:	46bd      	mov	sp, r7
 800be9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be9e:	4770      	bx	lr
 800bea0:	200069c4 	.word	0x200069c4
 800bea4:	200069b0 	.word	0x200069b0

0800bea8 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800bea8:	b580      	push	{r7, lr}
 800beaa:	b088      	sub	sp, #32
 800beac:	af00      	add	r7, sp, #0
 800beae:	6078      	str	r0, [r7, #4]
 800beb0:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800beb2:	687b      	ldr	r3, [r7, #4]
 800beb4:	2b00      	cmp	r3, #0
 800beb6:	d10b      	bne.n	800bed0 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 800beb8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bebc:	f383 8811 	msr	BASEPRI, r3
 800bec0:	f3bf 8f6f 	isb	sy
 800bec4:	f3bf 8f4f 	dsb	sy
 800bec8:	613b      	str	r3, [r7, #16]
}
 800beca:	bf00      	nop
 800becc:	bf00      	nop
 800bece:	e7fd      	b.n	800becc <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800bed0:	683b      	ldr	r3, [r7, #0]
 800bed2:	2b00      	cmp	r3, #0
 800bed4:	d10b      	bne.n	800beee <xTaskCheckForTimeOut+0x46>
	__asm volatile
 800bed6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800beda:	f383 8811 	msr	BASEPRI, r3
 800bede:	f3bf 8f6f 	isb	sy
 800bee2:	f3bf 8f4f 	dsb	sy
 800bee6:	60fb      	str	r3, [r7, #12]
}
 800bee8:	bf00      	nop
 800beea:	bf00      	nop
 800beec:	e7fd      	b.n	800beea <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 800beee:	f000 fe93 	bl	800cc18 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800bef2:	4b1d      	ldr	r3, [pc, #116]	@ (800bf68 <xTaskCheckForTimeOut+0xc0>)
 800bef4:	681b      	ldr	r3, [r3, #0]
 800bef6:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800bef8:	687b      	ldr	r3, [r7, #4]
 800befa:	685b      	ldr	r3, [r3, #4]
 800befc:	69ba      	ldr	r2, [r7, #24]
 800befe:	1ad3      	subs	r3, r2, r3
 800bf00:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800bf02:	683b      	ldr	r3, [r7, #0]
 800bf04:	681b      	ldr	r3, [r3, #0]
 800bf06:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800bf0a:	d102      	bne.n	800bf12 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800bf0c:	2300      	movs	r3, #0
 800bf0e:	61fb      	str	r3, [r7, #28]
 800bf10:	e023      	b.n	800bf5a <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800bf12:	687b      	ldr	r3, [r7, #4]
 800bf14:	681a      	ldr	r2, [r3, #0]
 800bf16:	4b15      	ldr	r3, [pc, #84]	@ (800bf6c <xTaskCheckForTimeOut+0xc4>)
 800bf18:	681b      	ldr	r3, [r3, #0]
 800bf1a:	429a      	cmp	r2, r3
 800bf1c:	d007      	beq.n	800bf2e <xTaskCheckForTimeOut+0x86>
 800bf1e:	687b      	ldr	r3, [r7, #4]
 800bf20:	685b      	ldr	r3, [r3, #4]
 800bf22:	69ba      	ldr	r2, [r7, #24]
 800bf24:	429a      	cmp	r2, r3
 800bf26:	d302      	bcc.n	800bf2e <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800bf28:	2301      	movs	r3, #1
 800bf2a:	61fb      	str	r3, [r7, #28]
 800bf2c:	e015      	b.n	800bf5a <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800bf2e:	683b      	ldr	r3, [r7, #0]
 800bf30:	681b      	ldr	r3, [r3, #0]
 800bf32:	697a      	ldr	r2, [r7, #20]
 800bf34:	429a      	cmp	r2, r3
 800bf36:	d20b      	bcs.n	800bf50 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800bf38:	683b      	ldr	r3, [r7, #0]
 800bf3a:	681a      	ldr	r2, [r3, #0]
 800bf3c:	697b      	ldr	r3, [r7, #20]
 800bf3e:	1ad2      	subs	r2, r2, r3
 800bf40:	683b      	ldr	r3, [r7, #0]
 800bf42:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800bf44:	6878      	ldr	r0, [r7, #4]
 800bf46:	f7ff ff99 	bl	800be7c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800bf4a:	2300      	movs	r3, #0
 800bf4c:	61fb      	str	r3, [r7, #28]
 800bf4e:	e004      	b.n	800bf5a <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 800bf50:	683b      	ldr	r3, [r7, #0]
 800bf52:	2200      	movs	r2, #0
 800bf54:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800bf56:	2301      	movs	r3, #1
 800bf58:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800bf5a:	f000 fe8f 	bl	800cc7c <vPortExitCritical>

	return xReturn;
 800bf5e:	69fb      	ldr	r3, [r7, #28]
}
 800bf60:	4618      	mov	r0, r3
 800bf62:	3720      	adds	r7, #32
 800bf64:	46bd      	mov	sp, r7
 800bf66:	bd80      	pop	{r7, pc}
 800bf68:	200069b0 	.word	0x200069b0
 800bf6c:	200069c4 	.word	0x200069c4

0800bf70 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800bf70:	b480      	push	{r7}
 800bf72:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800bf74:	4b03      	ldr	r3, [pc, #12]	@ (800bf84 <vTaskMissedYield+0x14>)
 800bf76:	2201      	movs	r2, #1
 800bf78:	601a      	str	r2, [r3, #0]
}
 800bf7a:	bf00      	nop
 800bf7c:	46bd      	mov	sp, r7
 800bf7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf82:	4770      	bx	lr
 800bf84:	200069c0 	.word	0x200069c0

0800bf88 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800bf88:	b580      	push	{r7, lr}
 800bf8a:	b082      	sub	sp, #8
 800bf8c:	af00      	add	r7, sp, #0
 800bf8e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800bf90:	f000 f852 	bl	800c038 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800bf94:	4b06      	ldr	r3, [pc, #24]	@ (800bfb0 <prvIdleTask+0x28>)
 800bf96:	681b      	ldr	r3, [r3, #0]
 800bf98:	2b01      	cmp	r3, #1
 800bf9a:	d9f9      	bls.n	800bf90 <prvIdleTask+0x8>
			{
				taskYIELD();
 800bf9c:	4b05      	ldr	r3, [pc, #20]	@ (800bfb4 <prvIdleTask+0x2c>)
 800bf9e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800bfa2:	601a      	str	r2, [r3, #0]
 800bfa4:	f3bf 8f4f 	dsb	sy
 800bfa8:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800bfac:	e7f0      	b.n	800bf90 <prvIdleTask+0x8>
 800bfae:	bf00      	nop
 800bfb0:	200064dc 	.word	0x200064dc
 800bfb4:	e000ed04 	.word	0xe000ed04

0800bfb8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800bfb8:	b580      	push	{r7, lr}
 800bfba:	b082      	sub	sp, #8
 800bfbc:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800bfbe:	2300      	movs	r3, #0
 800bfc0:	607b      	str	r3, [r7, #4]
 800bfc2:	e00c      	b.n	800bfde <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800bfc4:	687a      	ldr	r2, [r7, #4]
 800bfc6:	4613      	mov	r3, r2
 800bfc8:	009b      	lsls	r3, r3, #2
 800bfca:	4413      	add	r3, r2
 800bfcc:	009b      	lsls	r3, r3, #2
 800bfce:	4a12      	ldr	r2, [pc, #72]	@ (800c018 <prvInitialiseTaskLists+0x60>)
 800bfd0:	4413      	add	r3, r2
 800bfd2:	4618      	mov	r0, r3
 800bfd4:	f7fe fc86 	bl	800a8e4 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800bfd8:	687b      	ldr	r3, [r7, #4]
 800bfda:	3301      	adds	r3, #1
 800bfdc:	607b      	str	r3, [r7, #4]
 800bfde:	687b      	ldr	r3, [r7, #4]
 800bfe0:	2b37      	cmp	r3, #55	@ 0x37
 800bfe2:	d9ef      	bls.n	800bfc4 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800bfe4:	480d      	ldr	r0, [pc, #52]	@ (800c01c <prvInitialiseTaskLists+0x64>)
 800bfe6:	f7fe fc7d 	bl	800a8e4 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800bfea:	480d      	ldr	r0, [pc, #52]	@ (800c020 <prvInitialiseTaskLists+0x68>)
 800bfec:	f7fe fc7a 	bl	800a8e4 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800bff0:	480c      	ldr	r0, [pc, #48]	@ (800c024 <prvInitialiseTaskLists+0x6c>)
 800bff2:	f7fe fc77 	bl	800a8e4 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800bff6:	480c      	ldr	r0, [pc, #48]	@ (800c028 <prvInitialiseTaskLists+0x70>)
 800bff8:	f7fe fc74 	bl	800a8e4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800bffc:	480b      	ldr	r0, [pc, #44]	@ (800c02c <prvInitialiseTaskLists+0x74>)
 800bffe:	f7fe fc71 	bl	800a8e4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800c002:	4b0b      	ldr	r3, [pc, #44]	@ (800c030 <prvInitialiseTaskLists+0x78>)
 800c004:	4a05      	ldr	r2, [pc, #20]	@ (800c01c <prvInitialiseTaskLists+0x64>)
 800c006:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800c008:	4b0a      	ldr	r3, [pc, #40]	@ (800c034 <prvInitialiseTaskLists+0x7c>)
 800c00a:	4a05      	ldr	r2, [pc, #20]	@ (800c020 <prvInitialiseTaskLists+0x68>)
 800c00c:	601a      	str	r2, [r3, #0]
}
 800c00e:	bf00      	nop
 800c010:	3708      	adds	r7, #8
 800c012:	46bd      	mov	sp, r7
 800c014:	bd80      	pop	{r7, pc}
 800c016:	bf00      	nop
 800c018:	200064dc 	.word	0x200064dc
 800c01c:	2000693c 	.word	0x2000693c
 800c020:	20006950 	.word	0x20006950
 800c024:	2000696c 	.word	0x2000696c
 800c028:	20006980 	.word	0x20006980
 800c02c:	20006998 	.word	0x20006998
 800c030:	20006964 	.word	0x20006964
 800c034:	20006968 	.word	0x20006968

0800c038 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800c038:	b580      	push	{r7, lr}
 800c03a:	b082      	sub	sp, #8
 800c03c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800c03e:	e019      	b.n	800c074 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800c040:	f000 fdea 	bl	800cc18 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c044:	4b10      	ldr	r3, [pc, #64]	@ (800c088 <prvCheckTasksWaitingTermination+0x50>)
 800c046:	68db      	ldr	r3, [r3, #12]
 800c048:	68db      	ldr	r3, [r3, #12]
 800c04a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800c04c:	687b      	ldr	r3, [r7, #4]
 800c04e:	3304      	adds	r3, #4
 800c050:	4618      	mov	r0, r3
 800c052:	f7fe fcd1 	bl	800a9f8 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800c056:	4b0d      	ldr	r3, [pc, #52]	@ (800c08c <prvCheckTasksWaitingTermination+0x54>)
 800c058:	681b      	ldr	r3, [r3, #0]
 800c05a:	3b01      	subs	r3, #1
 800c05c:	4a0b      	ldr	r2, [pc, #44]	@ (800c08c <prvCheckTasksWaitingTermination+0x54>)
 800c05e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800c060:	4b0b      	ldr	r3, [pc, #44]	@ (800c090 <prvCheckTasksWaitingTermination+0x58>)
 800c062:	681b      	ldr	r3, [r3, #0]
 800c064:	3b01      	subs	r3, #1
 800c066:	4a0a      	ldr	r2, [pc, #40]	@ (800c090 <prvCheckTasksWaitingTermination+0x58>)
 800c068:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800c06a:	f000 fe07 	bl	800cc7c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800c06e:	6878      	ldr	r0, [r7, #4]
 800c070:	f000 f810 	bl	800c094 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800c074:	4b06      	ldr	r3, [pc, #24]	@ (800c090 <prvCheckTasksWaitingTermination+0x58>)
 800c076:	681b      	ldr	r3, [r3, #0]
 800c078:	2b00      	cmp	r3, #0
 800c07a:	d1e1      	bne.n	800c040 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800c07c:	bf00      	nop
 800c07e:	bf00      	nop
 800c080:	3708      	adds	r7, #8
 800c082:	46bd      	mov	sp, r7
 800c084:	bd80      	pop	{r7, pc}
 800c086:	bf00      	nop
 800c088:	20006980 	.word	0x20006980
 800c08c:	200069ac 	.word	0x200069ac
 800c090:	20006994 	.word	0x20006994

0800c094 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800c094:	b580      	push	{r7, lr}
 800c096:	b084      	sub	sp, #16
 800c098:	af00      	add	r7, sp, #0
 800c09a:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800c09c:	687b      	ldr	r3, [r7, #4]
 800c09e:	3354      	adds	r3, #84	@ 0x54
 800c0a0:	4618      	mov	r0, r3
 800c0a2:	f00f fa71 	bl	801b588 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800c0a6:	687b      	ldr	r3, [r7, #4]
 800c0a8:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800c0ac:	2b00      	cmp	r3, #0
 800c0ae:	d108      	bne.n	800c0c2 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800c0b0:	687b      	ldr	r3, [r7, #4]
 800c0b2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c0b4:	4618      	mov	r0, r3
 800c0b6:	f000 ff9f 	bl	800cff8 <vPortFree>
				vPortFree( pxTCB );
 800c0ba:	6878      	ldr	r0, [r7, #4]
 800c0bc:	f000 ff9c 	bl	800cff8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800c0c0:	e019      	b.n	800c0f6 <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800c0c2:	687b      	ldr	r3, [r7, #4]
 800c0c4:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800c0c8:	2b01      	cmp	r3, #1
 800c0ca:	d103      	bne.n	800c0d4 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800c0cc:	6878      	ldr	r0, [r7, #4]
 800c0ce:	f000 ff93 	bl	800cff8 <vPortFree>
	}
 800c0d2:	e010      	b.n	800c0f6 <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800c0d4:	687b      	ldr	r3, [r7, #4]
 800c0d6:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800c0da:	2b02      	cmp	r3, #2
 800c0dc:	d00b      	beq.n	800c0f6 <prvDeleteTCB+0x62>
	__asm volatile
 800c0de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c0e2:	f383 8811 	msr	BASEPRI, r3
 800c0e6:	f3bf 8f6f 	isb	sy
 800c0ea:	f3bf 8f4f 	dsb	sy
 800c0ee:	60fb      	str	r3, [r7, #12]
}
 800c0f0:	bf00      	nop
 800c0f2:	bf00      	nop
 800c0f4:	e7fd      	b.n	800c0f2 <prvDeleteTCB+0x5e>
	}
 800c0f6:	bf00      	nop
 800c0f8:	3710      	adds	r7, #16
 800c0fa:	46bd      	mov	sp, r7
 800c0fc:	bd80      	pop	{r7, pc}
	...

0800c100 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800c100:	b480      	push	{r7}
 800c102:	b083      	sub	sp, #12
 800c104:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800c106:	4b0c      	ldr	r3, [pc, #48]	@ (800c138 <prvResetNextTaskUnblockTime+0x38>)
 800c108:	681b      	ldr	r3, [r3, #0]
 800c10a:	681b      	ldr	r3, [r3, #0]
 800c10c:	2b00      	cmp	r3, #0
 800c10e:	d104      	bne.n	800c11a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800c110:	4b0a      	ldr	r3, [pc, #40]	@ (800c13c <prvResetNextTaskUnblockTime+0x3c>)
 800c112:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800c116:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800c118:	e008      	b.n	800c12c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c11a:	4b07      	ldr	r3, [pc, #28]	@ (800c138 <prvResetNextTaskUnblockTime+0x38>)
 800c11c:	681b      	ldr	r3, [r3, #0]
 800c11e:	68db      	ldr	r3, [r3, #12]
 800c120:	68db      	ldr	r3, [r3, #12]
 800c122:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800c124:	687b      	ldr	r3, [r7, #4]
 800c126:	685b      	ldr	r3, [r3, #4]
 800c128:	4a04      	ldr	r2, [pc, #16]	@ (800c13c <prvResetNextTaskUnblockTime+0x3c>)
 800c12a:	6013      	str	r3, [r2, #0]
}
 800c12c:	bf00      	nop
 800c12e:	370c      	adds	r7, #12
 800c130:	46bd      	mov	sp, r7
 800c132:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c136:	4770      	bx	lr
 800c138:	20006964 	.word	0x20006964
 800c13c:	200069cc 	.word	0x200069cc

0800c140 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800c140:	b480      	push	{r7}
 800c142:	b083      	sub	sp, #12
 800c144:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800c146:	4b0b      	ldr	r3, [pc, #44]	@ (800c174 <xTaskGetSchedulerState+0x34>)
 800c148:	681b      	ldr	r3, [r3, #0]
 800c14a:	2b00      	cmp	r3, #0
 800c14c:	d102      	bne.n	800c154 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800c14e:	2301      	movs	r3, #1
 800c150:	607b      	str	r3, [r7, #4]
 800c152:	e008      	b.n	800c166 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c154:	4b08      	ldr	r3, [pc, #32]	@ (800c178 <xTaskGetSchedulerState+0x38>)
 800c156:	681b      	ldr	r3, [r3, #0]
 800c158:	2b00      	cmp	r3, #0
 800c15a:	d102      	bne.n	800c162 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800c15c:	2302      	movs	r3, #2
 800c15e:	607b      	str	r3, [r7, #4]
 800c160:	e001      	b.n	800c166 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800c162:	2300      	movs	r3, #0
 800c164:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800c166:	687b      	ldr	r3, [r7, #4]
	}
 800c168:	4618      	mov	r0, r3
 800c16a:	370c      	adds	r7, #12
 800c16c:	46bd      	mov	sp, r7
 800c16e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c172:	4770      	bx	lr
 800c174:	200069b8 	.word	0x200069b8
 800c178:	200069d4 	.word	0x200069d4

0800c17c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800c17c:	b580      	push	{r7, lr}
 800c17e:	b086      	sub	sp, #24
 800c180:	af00      	add	r7, sp, #0
 800c182:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800c184:	687b      	ldr	r3, [r7, #4]
 800c186:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800c188:	2300      	movs	r3, #0
 800c18a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800c18c:	687b      	ldr	r3, [r7, #4]
 800c18e:	2b00      	cmp	r3, #0
 800c190:	d058      	beq.n	800c244 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800c192:	4b2f      	ldr	r3, [pc, #188]	@ (800c250 <xTaskPriorityDisinherit+0xd4>)
 800c194:	681b      	ldr	r3, [r3, #0]
 800c196:	693a      	ldr	r2, [r7, #16]
 800c198:	429a      	cmp	r2, r3
 800c19a:	d00b      	beq.n	800c1b4 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 800c19c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c1a0:	f383 8811 	msr	BASEPRI, r3
 800c1a4:	f3bf 8f6f 	isb	sy
 800c1a8:	f3bf 8f4f 	dsb	sy
 800c1ac:	60fb      	str	r3, [r7, #12]
}
 800c1ae:	bf00      	nop
 800c1b0:	bf00      	nop
 800c1b2:	e7fd      	b.n	800c1b0 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800c1b4:	693b      	ldr	r3, [r7, #16]
 800c1b6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800c1b8:	2b00      	cmp	r3, #0
 800c1ba:	d10b      	bne.n	800c1d4 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 800c1bc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c1c0:	f383 8811 	msr	BASEPRI, r3
 800c1c4:	f3bf 8f6f 	isb	sy
 800c1c8:	f3bf 8f4f 	dsb	sy
 800c1cc:	60bb      	str	r3, [r7, #8]
}
 800c1ce:	bf00      	nop
 800c1d0:	bf00      	nop
 800c1d2:	e7fd      	b.n	800c1d0 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 800c1d4:	693b      	ldr	r3, [r7, #16]
 800c1d6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800c1d8:	1e5a      	subs	r2, r3, #1
 800c1da:	693b      	ldr	r3, [r7, #16]
 800c1dc:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800c1de:	693b      	ldr	r3, [r7, #16]
 800c1e0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c1e2:	693b      	ldr	r3, [r7, #16]
 800c1e4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800c1e6:	429a      	cmp	r2, r3
 800c1e8:	d02c      	beq.n	800c244 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800c1ea:	693b      	ldr	r3, [r7, #16]
 800c1ec:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800c1ee:	2b00      	cmp	r3, #0
 800c1f0:	d128      	bne.n	800c244 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800c1f2:	693b      	ldr	r3, [r7, #16]
 800c1f4:	3304      	adds	r3, #4
 800c1f6:	4618      	mov	r0, r3
 800c1f8:	f7fe fbfe 	bl	800a9f8 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800c1fc:	693b      	ldr	r3, [r7, #16]
 800c1fe:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800c200:	693b      	ldr	r3, [r7, #16]
 800c202:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c204:	693b      	ldr	r3, [r7, #16]
 800c206:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c208:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800c20c:	693b      	ldr	r3, [r7, #16]
 800c20e:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800c210:	693b      	ldr	r3, [r7, #16]
 800c212:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c214:	4b0f      	ldr	r3, [pc, #60]	@ (800c254 <xTaskPriorityDisinherit+0xd8>)
 800c216:	681b      	ldr	r3, [r3, #0]
 800c218:	429a      	cmp	r2, r3
 800c21a:	d903      	bls.n	800c224 <xTaskPriorityDisinherit+0xa8>
 800c21c:	693b      	ldr	r3, [r7, #16]
 800c21e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c220:	4a0c      	ldr	r2, [pc, #48]	@ (800c254 <xTaskPriorityDisinherit+0xd8>)
 800c222:	6013      	str	r3, [r2, #0]
 800c224:	693b      	ldr	r3, [r7, #16]
 800c226:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c228:	4613      	mov	r3, r2
 800c22a:	009b      	lsls	r3, r3, #2
 800c22c:	4413      	add	r3, r2
 800c22e:	009b      	lsls	r3, r3, #2
 800c230:	4a09      	ldr	r2, [pc, #36]	@ (800c258 <xTaskPriorityDisinherit+0xdc>)
 800c232:	441a      	add	r2, r3
 800c234:	693b      	ldr	r3, [r7, #16]
 800c236:	3304      	adds	r3, #4
 800c238:	4619      	mov	r1, r3
 800c23a:	4610      	mov	r0, r2
 800c23c:	f7fe fb7f 	bl	800a93e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800c240:	2301      	movs	r3, #1
 800c242:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800c244:	697b      	ldr	r3, [r7, #20]
	}
 800c246:	4618      	mov	r0, r3
 800c248:	3718      	adds	r7, #24
 800c24a:	46bd      	mov	sp, r7
 800c24c:	bd80      	pop	{r7, pc}
 800c24e:	bf00      	nop
 800c250:	200064d8 	.word	0x200064d8
 800c254:	200069b4 	.word	0x200069b4
 800c258:	200064dc 	.word	0x200064dc

0800c25c <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800c25c:	b580      	push	{r7, lr}
 800c25e:	b084      	sub	sp, #16
 800c260:	af00      	add	r7, sp, #0
 800c262:	6078      	str	r0, [r7, #4]
 800c264:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800c266:	4b21      	ldr	r3, [pc, #132]	@ (800c2ec <prvAddCurrentTaskToDelayedList+0x90>)
 800c268:	681b      	ldr	r3, [r3, #0]
 800c26a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800c26c:	4b20      	ldr	r3, [pc, #128]	@ (800c2f0 <prvAddCurrentTaskToDelayedList+0x94>)
 800c26e:	681b      	ldr	r3, [r3, #0]
 800c270:	3304      	adds	r3, #4
 800c272:	4618      	mov	r0, r3
 800c274:	f7fe fbc0 	bl	800a9f8 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800c278:	687b      	ldr	r3, [r7, #4]
 800c27a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800c27e:	d10a      	bne.n	800c296 <prvAddCurrentTaskToDelayedList+0x3a>
 800c280:	683b      	ldr	r3, [r7, #0]
 800c282:	2b00      	cmp	r3, #0
 800c284:	d007      	beq.n	800c296 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800c286:	4b1a      	ldr	r3, [pc, #104]	@ (800c2f0 <prvAddCurrentTaskToDelayedList+0x94>)
 800c288:	681b      	ldr	r3, [r3, #0]
 800c28a:	3304      	adds	r3, #4
 800c28c:	4619      	mov	r1, r3
 800c28e:	4819      	ldr	r0, [pc, #100]	@ (800c2f4 <prvAddCurrentTaskToDelayedList+0x98>)
 800c290:	f7fe fb55 	bl	800a93e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800c294:	e026      	b.n	800c2e4 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800c296:	68fa      	ldr	r2, [r7, #12]
 800c298:	687b      	ldr	r3, [r7, #4]
 800c29a:	4413      	add	r3, r2
 800c29c:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800c29e:	4b14      	ldr	r3, [pc, #80]	@ (800c2f0 <prvAddCurrentTaskToDelayedList+0x94>)
 800c2a0:	681b      	ldr	r3, [r3, #0]
 800c2a2:	68ba      	ldr	r2, [r7, #8]
 800c2a4:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800c2a6:	68ba      	ldr	r2, [r7, #8]
 800c2a8:	68fb      	ldr	r3, [r7, #12]
 800c2aa:	429a      	cmp	r2, r3
 800c2ac:	d209      	bcs.n	800c2c2 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800c2ae:	4b12      	ldr	r3, [pc, #72]	@ (800c2f8 <prvAddCurrentTaskToDelayedList+0x9c>)
 800c2b0:	681a      	ldr	r2, [r3, #0]
 800c2b2:	4b0f      	ldr	r3, [pc, #60]	@ (800c2f0 <prvAddCurrentTaskToDelayedList+0x94>)
 800c2b4:	681b      	ldr	r3, [r3, #0]
 800c2b6:	3304      	adds	r3, #4
 800c2b8:	4619      	mov	r1, r3
 800c2ba:	4610      	mov	r0, r2
 800c2bc:	f7fe fb63 	bl	800a986 <vListInsert>
}
 800c2c0:	e010      	b.n	800c2e4 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800c2c2:	4b0e      	ldr	r3, [pc, #56]	@ (800c2fc <prvAddCurrentTaskToDelayedList+0xa0>)
 800c2c4:	681a      	ldr	r2, [r3, #0]
 800c2c6:	4b0a      	ldr	r3, [pc, #40]	@ (800c2f0 <prvAddCurrentTaskToDelayedList+0x94>)
 800c2c8:	681b      	ldr	r3, [r3, #0]
 800c2ca:	3304      	adds	r3, #4
 800c2cc:	4619      	mov	r1, r3
 800c2ce:	4610      	mov	r0, r2
 800c2d0:	f7fe fb59 	bl	800a986 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800c2d4:	4b0a      	ldr	r3, [pc, #40]	@ (800c300 <prvAddCurrentTaskToDelayedList+0xa4>)
 800c2d6:	681b      	ldr	r3, [r3, #0]
 800c2d8:	68ba      	ldr	r2, [r7, #8]
 800c2da:	429a      	cmp	r2, r3
 800c2dc:	d202      	bcs.n	800c2e4 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800c2de:	4a08      	ldr	r2, [pc, #32]	@ (800c300 <prvAddCurrentTaskToDelayedList+0xa4>)
 800c2e0:	68bb      	ldr	r3, [r7, #8]
 800c2e2:	6013      	str	r3, [r2, #0]
}
 800c2e4:	bf00      	nop
 800c2e6:	3710      	adds	r7, #16
 800c2e8:	46bd      	mov	sp, r7
 800c2ea:	bd80      	pop	{r7, pc}
 800c2ec:	200069b0 	.word	0x200069b0
 800c2f0:	200064d8 	.word	0x200064d8
 800c2f4:	20006998 	.word	0x20006998
 800c2f8:	20006968 	.word	0x20006968
 800c2fc:	20006964 	.word	0x20006964
 800c300:	200069cc 	.word	0x200069cc

0800c304 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800c304:	b580      	push	{r7, lr}
 800c306:	b08a      	sub	sp, #40	@ 0x28
 800c308:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800c30a:	2300      	movs	r3, #0
 800c30c:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800c30e:	f000 fb13 	bl	800c938 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800c312:	4b1d      	ldr	r3, [pc, #116]	@ (800c388 <xTimerCreateTimerTask+0x84>)
 800c314:	681b      	ldr	r3, [r3, #0]
 800c316:	2b00      	cmp	r3, #0
 800c318:	d021      	beq.n	800c35e <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800c31a:	2300      	movs	r3, #0
 800c31c:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800c31e:	2300      	movs	r3, #0
 800c320:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800c322:	1d3a      	adds	r2, r7, #4
 800c324:	f107 0108 	add.w	r1, r7, #8
 800c328:	f107 030c 	add.w	r3, r7, #12
 800c32c:	4618      	mov	r0, r3
 800c32e:	f7fe fabf 	bl	800a8b0 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800c332:	6879      	ldr	r1, [r7, #4]
 800c334:	68bb      	ldr	r3, [r7, #8]
 800c336:	68fa      	ldr	r2, [r7, #12]
 800c338:	9202      	str	r2, [sp, #8]
 800c33a:	9301      	str	r3, [sp, #4]
 800c33c:	2302      	movs	r3, #2
 800c33e:	9300      	str	r3, [sp, #0]
 800c340:	2300      	movs	r3, #0
 800c342:	460a      	mov	r2, r1
 800c344:	4911      	ldr	r1, [pc, #68]	@ (800c38c <xTimerCreateTimerTask+0x88>)
 800c346:	4812      	ldr	r0, [pc, #72]	@ (800c390 <xTimerCreateTimerTask+0x8c>)
 800c348:	f7ff f87a 	bl	800b440 <xTaskCreateStatic>
 800c34c:	4603      	mov	r3, r0
 800c34e:	4a11      	ldr	r2, [pc, #68]	@ (800c394 <xTimerCreateTimerTask+0x90>)
 800c350:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800c352:	4b10      	ldr	r3, [pc, #64]	@ (800c394 <xTimerCreateTimerTask+0x90>)
 800c354:	681b      	ldr	r3, [r3, #0]
 800c356:	2b00      	cmp	r3, #0
 800c358:	d001      	beq.n	800c35e <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800c35a:	2301      	movs	r3, #1
 800c35c:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800c35e:	697b      	ldr	r3, [r7, #20]
 800c360:	2b00      	cmp	r3, #0
 800c362:	d10b      	bne.n	800c37c <xTimerCreateTimerTask+0x78>
	__asm volatile
 800c364:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c368:	f383 8811 	msr	BASEPRI, r3
 800c36c:	f3bf 8f6f 	isb	sy
 800c370:	f3bf 8f4f 	dsb	sy
 800c374:	613b      	str	r3, [r7, #16]
}
 800c376:	bf00      	nop
 800c378:	bf00      	nop
 800c37a:	e7fd      	b.n	800c378 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800c37c:	697b      	ldr	r3, [r7, #20]
}
 800c37e:	4618      	mov	r0, r3
 800c380:	3718      	adds	r7, #24
 800c382:	46bd      	mov	sp, r7
 800c384:	bd80      	pop	{r7, pc}
 800c386:	bf00      	nop
 800c388:	20006a08 	.word	0x20006a08
 800c38c:	0801d394 	.word	0x0801d394
 800c390:	0800c4d1 	.word	0x0800c4d1
 800c394:	20006a0c 	.word	0x20006a0c

0800c398 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800c398:	b580      	push	{r7, lr}
 800c39a:	b08a      	sub	sp, #40	@ 0x28
 800c39c:	af00      	add	r7, sp, #0
 800c39e:	60f8      	str	r0, [r7, #12]
 800c3a0:	60b9      	str	r1, [r7, #8]
 800c3a2:	607a      	str	r2, [r7, #4]
 800c3a4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800c3a6:	2300      	movs	r3, #0
 800c3a8:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800c3aa:	68fb      	ldr	r3, [r7, #12]
 800c3ac:	2b00      	cmp	r3, #0
 800c3ae:	d10b      	bne.n	800c3c8 <xTimerGenericCommand+0x30>
	__asm volatile
 800c3b0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c3b4:	f383 8811 	msr	BASEPRI, r3
 800c3b8:	f3bf 8f6f 	isb	sy
 800c3bc:	f3bf 8f4f 	dsb	sy
 800c3c0:	623b      	str	r3, [r7, #32]
}
 800c3c2:	bf00      	nop
 800c3c4:	bf00      	nop
 800c3c6:	e7fd      	b.n	800c3c4 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800c3c8:	4b19      	ldr	r3, [pc, #100]	@ (800c430 <xTimerGenericCommand+0x98>)
 800c3ca:	681b      	ldr	r3, [r3, #0]
 800c3cc:	2b00      	cmp	r3, #0
 800c3ce:	d02a      	beq.n	800c426 <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800c3d0:	68bb      	ldr	r3, [r7, #8]
 800c3d2:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800c3d4:	687b      	ldr	r3, [r7, #4]
 800c3d6:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800c3d8:	68fb      	ldr	r3, [r7, #12]
 800c3da:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800c3dc:	68bb      	ldr	r3, [r7, #8]
 800c3de:	2b05      	cmp	r3, #5
 800c3e0:	dc18      	bgt.n	800c414 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800c3e2:	f7ff fead 	bl	800c140 <xTaskGetSchedulerState>
 800c3e6:	4603      	mov	r3, r0
 800c3e8:	2b02      	cmp	r3, #2
 800c3ea:	d109      	bne.n	800c400 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800c3ec:	4b10      	ldr	r3, [pc, #64]	@ (800c430 <xTimerGenericCommand+0x98>)
 800c3ee:	6818      	ldr	r0, [r3, #0]
 800c3f0:	f107 0110 	add.w	r1, r7, #16
 800c3f4:	2300      	movs	r3, #0
 800c3f6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800c3f8:	f7fe fc32 	bl	800ac60 <xQueueGenericSend>
 800c3fc:	6278      	str	r0, [r7, #36]	@ 0x24
 800c3fe:	e012      	b.n	800c426 <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800c400:	4b0b      	ldr	r3, [pc, #44]	@ (800c430 <xTimerGenericCommand+0x98>)
 800c402:	6818      	ldr	r0, [r3, #0]
 800c404:	f107 0110 	add.w	r1, r7, #16
 800c408:	2300      	movs	r3, #0
 800c40a:	2200      	movs	r2, #0
 800c40c:	f7fe fc28 	bl	800ac60 <xQueueGenericSend>
 800c410:	6278      	str	r0, [r7, #36]	@ 0x24
 800c412:	e008      	b.n	800c426 <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800c414:	4b06      	ldr	r3, [pc, #24]	@ (800c430 <xTimerGenericCommand+0x98>)
 800c416:	6818      	ldr	r0, [r3, #0]
 800c418:	f107 0110 	add.w	r1, r7, #16
 800c41c:	2300      	movs	r3, #0
 800c41e:	683a      	ldr	r2, [r7, #0]
 800c420:	f7fe fd20 	bl	800ae64 <xQueueGenericSendFromISR>
 800c424:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800c426:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800c428:	4618      	mov	r0, r3
 800c42a:	3728      	adds	r7, #40	@ 0x28
 800c42c:	46bd      	mov	sp, r7
 800c42e:	bd80      	pop	{r7, pc}
 800c430:	20006a08 	.word	0x20006a08

0800c434 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800c434:	b580      	push	{r7, lr}
 800c436:	b088      	sub	sp, #32
 800c438:	af02      	add	r7, sp, #8
 800c43a:	6078      	str	r0, [r7, #4]
 800c43c:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c43e:	4b23      	ldr	r3, [pc, #140]	@ (800c4cc <prvProcessExpiredTimer+0x98>)
 800c440:	681b      	ldr	r3, [r3, #0]
 800c442:	68db      	ldr	r3, [r3, #12]
 800c444:	68db      	ldr	r3, [r3, #12]
 800c446:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800c448:	697b      	ldr	r3, [r7, #20]
 800c44a:	3304      	adds	r3, #4
 800c44c:	4618      	mov	r0, r3
 800c44e:	f7fe fad3 	bl	800a9f8 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800c452:	697b      	ldr	r3, [r7, #20]
 800c454:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800c458:	f003 0304 	and.w	r3, r3, #4
 800c45c:	2b00      	cmp	r3, #0
 800c45e:	d023      	beq.n	800c4a8 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800c460:	697b      	ldr	r3, [r7, #20]
 800c462:	699a      	ldr	r2, [r3, #24]
 800c464:	687b      	ldr	r3, [r7, #4]
 800c466:	18d1      	adds	r1, r2, r3
 800c468:	687b      	ldr	r3, [r7, #4]
 800c46a:	683a      	ldr	r2, [r7, #0]
 800c46c:	6978      	ldr	r0, [r7, #20]
 800c46e:	f000 f8d5 	bl	800c61c <prvInsertTimerInActiveList>
 800c472:	4603      	mov	r3, r0
 800c474:	2b00      	cmp	r3, #0
 800c476:	d020      	beq.n	800c4ba <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800c478:	2300      	movs	r3, #0
 800c47a:	9300      	str	r3, [sp, #0]
 800c47c:	2300      	movs	r3, #0
 800c47e:	687a      	ldr	r2, [r7, #4]
 800c480:	2100      	movs	r1, #0
 800c482:	6978      	ldr	r0, [r7, #20]
 800c484:	f7ff ff88 	bl	800c398 <xTimerGenericCommand>
 800c488:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800c48a:	693b      	ldr	r3, [r7, #16]
 800c48c:	2b00      	cmp	r3, #0
 800c48e:	d114      	bne.n	800c4ba <prvProcessExpiredTimer+0x86>
	__asm volatile
 800c490:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c494:	f383 8811 	msr	BASEPRI, r3
 800c498:	f3bf 8f6f 	isb	sy
 800c49c:	f3bf 8f4f 	dsb	sy
 800c4a0:	60fb      	str	r3, [r7, #12]
}
 800c4a2:	bf00      	nop
 800c4a4:	bf00      	nop
 800c4a6:	e7fd      	b.n	800c4a4 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800c4a8:	697b      	ldr	r3, [r7, #20]
 800c4aa:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800c4ae:	f023 0301 	bic.w	r3, r3, #1
 800c4b2:	b2da      	uxtb	r2, r3
 800c4b4:	697b      	ldr	r3, [r7, #20]
 800c4b6:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800c4ba:	697b      	ldr	r3, [r7, #20]
 800c4bc:	6a1b      	ldr	r3, [r3, #32]
 800c4be:	6978      	ldr	r0, [r7, #20]
 800c4c0:	4798      	blx	r3
}
 800c4c2:	bf00      	nop
 800c4c4:	3718      	adds	r7, #24
 800c4c6:	46bd      	mov	sp, r7
 800c4c8:	bd80      	pop	{r7, pc}
 800c4ca:	bf00      	nop
 800c4cc:	20006a00 	.word	0x20006a00

0800c4d0 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800c4d0:	b580      	push	{r7, lr}
 800c4d2:	b084      	sub	sp, #16
 800c4d4:	af00      	add	r7, sp, #0
 800c4d6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800c4d8:	f107 0308 	add.w	r3, r7, #8
 800c4dc:	4618      	mov	r0, r3
 800c4de:	f000 f859 	bl	800c594 <prvGetNextExpireTime>
 800c4e2:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800c4e4:	68bb      	ldr	r3, [r7, #8]
 800c4e6:	4619      	mov	r1, r3
 800c4e8:	68f8      	ldr	r0, [r7, #12]
 800c4ea:	f000 f805 	bl	800c4f8 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800c4ee:	f000 f8d7 	bl	800c6a0 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800c4f2:	bf00      	nop
 800c4f4:	e7f0      	b.n	800c4d8 <prvTimerTask+0x8>
	...

0800c4f8 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800c4f8:	b580      	push	{r7, lr}
 800c4fa:	b084      	sub	sp, #16
 800c4fc:	af00      	add	r7, sp, #0
 800c4fe:	6078      	str	r0, [r7, #4]
 800c500:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800c502:	f7ff fa01 	bl	800b908 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800c506:	f107 0308 	add.w	r3, r7, #8
 800c50a:	4618      	mov	r0, r3
 800c50c:	f000 f866 	bl	800c5dc <prvSampleTimeNow>
 800c510:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800c512:	68bb      	ldr	r3, [r7, #8]
 800c514:	2b00      	cmp	r3, #0
 800c516:	d130      	bne.n	800c57a <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800c518:	683b      	ldr	r3, [r7, #0]
 800c51a:	2b00      	cmp	r3, #0
 800c51c:	d10a      	bne.n	800c534 <prvProcessTimerOrBlockTask+0x3c>
 800c51e:	687a      	ldr	r2, [r7, #4]
 800c520:	68fb      	ldr	r3, [r7, #12]
 800c522:	429a      	cmp	r2, r3
 800c524:	d806      	bhi.n	800c534 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800c526:	f7ff f9fd 	bl	800b924 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800c52a:	68f9      	ldr	r1, [r7, #12]
 800c52c:	6878      	ldr	r0, [r7, #4]
 800c52e:	f7ff ff81 	bl	800c434 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800c532:	e024      	b.n	800c57e <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800c534:	683b      	ldr	r3, [r7, #0]
 800c536:	2b00      	cmp	r3, #0
 800c538:	d008      	beq.n	800c54c <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800c53a:	4b13      	ldr	r3, [pc, #76]	@ (800c588 <prvProcessTimerOrBlockTask+0x90>)
 800c53c:	681b      	ldr	r3, [r3, #0]
 800c53e:	681b      	ldr	r3, [r3, #0]
 800c540:	2b00      	cmp	r3, #0
 800c542:	d101      	bne.n	800c548 <prvProcessTimerOrBlockTask+0x50>
 800c544:	2301      	movs	r3, #1
 800c546:	e000      	b.n	800c54a <prvProcessTimerOrBlockTask+0x52>
 800c548:	2300      	movs	r3, #0
 800c54a:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800c54c:	4b0f      	ldr	r3, [pc, #60]	@ (800c58c <prvProcessTimerOrBlockTask+0x94>)
 800c54e:	6818      	ldr	r0, [r3, #0]
 800c550:	687a      	ldr	r2, [r7, #4]
 800c552:	68fb      	ldr	r3, [r7, #12]
 800c554:	1ad3      	subs	r3, r2, r3
 800c556:	683a      	ldr	r2, [r7, #0]
 800c558:	4619      	mov	r1, r3
 800c55a:	f7fe ff3d 	bl	800b3d8 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800c55e:	f7ff f9e1 	bl	800b924 <xTaskResumeAll>
 800c562:	4603      	mov	r3, r0
 800c564:	2b00      	cmp	r3, #0
 800c566:	d10a      	bne.n	800c57e <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800c568:	4b09      	ldr	r3, [pc, #36]	@ (800c590 <prvProcessTimerOrBlockTask+0x98>)
 800c56a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c56e:	601a      	str	r2, [r3, #0]
 800c570:	f3bf 8f4f 	dsb	sy
 800c574:	f3bf 8f6f 	isb	sy
}
 800c578:	e001      	b.n	800c57e <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800c57a:	f7ff f9d3 	bl	800b924 <xTaskResumeAll>
}
 800c57e:	bf00      	nop
 800c580:	3710      	adds	r7, #16
 800c582:	46bd      	mov	sp, r7
 800c584:	bd80      	pop	{r7, pc}
 800c586:	bf00      	nop
 800c588:	20006a04 	.word	0x20006a04
 800c58c:	20006a08 	.word	0x20006a08
 800c590:	e000ed04 	.word	0xe000ed04

0800c594 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800c594:	b480      	push	{r7}
 800c596:	b085      	sub	sp, #20
 800c598:	af00      	add	r7, sp, #0
 800c59a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800c59c:	4b0e      	ldr	r3, [pc, #56]	@ (800c5d8 <prvGetNextExpireTime+0x44>)
 800c59e:	681b      	ldr	r3, [r3, #0]
 800c5a0:	681b      	ldr	r3, [r3, #0]
 800c5a2:	2b00      	cmp	r3, #0
 800c5a4:	d101      	bne.n	800c5aa <prvGetNextExpireTime+0x16>
 800c5a6:	2201      	movs	r2, #1
 800c5a8:	e000      	b.n	800c5ac <prvGetNextExpireTime+0x18>
 800c5aa:	2200      	movs	r2, #0
 800c5ac:	687b      	ldr	r3, [r7, #4]
 800c5ae:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800c5b0:	687b      	ldr	r3, [r7, #4]
 800c5b2:	681b      	ldr	r3, [r3, #0]
 800c5b4:	2b00      	cmp	r3, #0
 800c5b6:	d105      	bne.n	800c5c4 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800c5b8:	4b07      	ldr	r3, [pc, #28]	@ (800c5d8 <prvGetNextExpireTime+0x44>)
 800c5ba:	681b      	ldr	r3, [r3, #0]
 800c5bc:	68db      	ldr	r3, [r3, #12]
 800c5be:	681b      	ldr	r3, [r3, #0]
 800c5c0:	60fb      	str	r3, [r7, #12]
 800c5c2:	e001      	b.n	800c5c8 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800c5c4:	2300      	movs	r3, #0
 800c5c6:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800c5c8:	68fb      	ldr	r3, [r7, #12]
}
 800c5ca:	4618      	mov	r0, r3
 800c5cc:	3714      	adds	r7, #20
 800c5ce:	46bd      	mov	sp, r7
 800c5d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5d4:	4770      	bx	lr
 800c5d6:	bf00      	nop
 800c5d8:	20006a00 	.word	0x20006a00

0800c5dc <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800c5dc:	b580      	push	{r7, lr}
 800c5de:	b084      	sub	sp, #16
 800c5e0:	af00      	add	r7, sp, #0
 800c5e2:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800c5e4:	f7ff fa3c 	bl	800ba60 <xTaskGetTickCount>
 800c5e8:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800c5ea:	4b0b      	ldr	r3, [pc, #44]	@ (800c618 <prvSampleTimeNow+0x3c>)
 800c5ec:	681b      	ldr	r3, [r3, #0]
 800c5ee:	68fa      	ldr	r2, [r7, #12]
 800c5f0:	429a      	cmp	r2, r3
 800c5f2:	d205      	bcs.n	800c600 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800c5f4:	f000 f93a 	bl	800c86c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800c5f8:	687b      	ldr	r3, [r7, #4]
 800c5fa:	2201      	movs	r2, #1
 800c5fc:	601a      	str	r2, [r3, #0]
 800c5fe:	e002      	b.n	800c606 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800c600:	687b      	ldr	r3, [r7, #4]
 800c602:	2200      	movs	r2, #0
 800c604:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800c606:	4a04      	ldr	r2, [pc, #16]	@ (800c618 <prvSampleTimeNow+0x3c>)
 800c608:	68fb      	ldr	r3, [r7, #12]
 800c60a:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800c60c:	68fb      	ldr	r3, [r7, #12]
}
 800c60e:	4618      	mov	r0, r3
 800c610:	3710      	adds	r7, #16
 800c612:	46bd      	mov	sp, r7
 800c614:	bd80      	pop	{r7, pc}
 800c616:	bf00      	nop
 800c618:	20006a10 	.word	0x20006a10

0800c61c <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800c61c:	b580      	push	{r7, lr}
 800c61e:	b086      	sub	sp, #24
 800c620:	af00      	add	r7, sp, #0
 800c622:	60f8      	str	r0, [r7, #12]
 800c624:	60b9      	str	r1, [r7, #8]
 800c626:	607a      	str	r2, [r7, #4]
 800c628:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800c62a:	2300      	movs	r3, #0
 800c62c:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800c62e:	68fb      	ldr	r3, [r7, #12]
 800c630:	68ba      	ldr	r2, [r7, #8]
 800c632:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800c634:	68fb      	ldr	r3, [r7, #12]
 800c636:	68fa      	ldr	r2, [r7, #12]
 800c638:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800c63a:	68ba      	ldr	r2, [r7, #8]
 800c63c:	687b      	ldr	r3, [r7, #4]
 800c63e:	429a      	cmp	r2, r3
 800c640:	d812      	bhi.n	800c668 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c642:	687a      	ldr	r2, [r7, #4]
 800c644:	683b      	ldr	r3, [r7, #0]
 800c646:	1ad2      	subs	r2, r2, r3
 800c648:	68fb      	ldr	r3, [r7, #12]
 800c64a:	699b      	ldr	r3, [r3, #24]
 800c64c:	429a      	cmp	r2, r3
 800c64e:	d302      	bcc.n	800c656 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800c650:	2301      	movs	r3, #1
 800c652:	617b      	str	r3, [r7, #20]
 800c654:	e01b      	b.n	800c68e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800c656:	4b10      	ldr	r3, [pc, #64]	@ (800c698 <prvInsertTimerInActiveList+0x7c>)
 800c658:	681a      	ldr	r2, [r3, #0]
 800c65a:	68fb      	ldr	r3, [r7, #12]
 800c65c:	3304      	adds	r3, #4
 800c65e:	4619      	mov	r1, r3
 800c660:	4610      	mov	r0, r2
 800c662:	f7fe f990 	bl	800a986 <vListInsert>
 800c666:	e012      	b.n	800c68e <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800c668:	687a      	ldr	r2, [r7, #4]
 800c66a:	683b      	ldr	r3, [r7, #0]
 800c66c:	429a      	cmp	r2, r3
 800c66e:	d206      	bcs.n	800c67e <prvInsertTimerInActiveList+0x62>
 800c670:	68ba      	ldr	r2, [r7, #8]
 800c672:	683b      	ldr	r3, [r7, #0]
 800c674:	429a      	cmp	r2, r3
 800c676:	d302      	bcc.n	800c67e <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800c678:	2301      	movs	r3, #1
 800c67a:	617b      	str	r3, [r7, #20]
 800c67c:	e007      	b.n	800c68e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800c67e:	4b07      	ldr	r3, [pc, #28]	@ (800c69c <prvInsertTimerInActiveList+0x80>)
 800c680:	681a      	ldr	r2, [r3, #0]
 800c682:	68fb      	ldr	r3, [r7, #12]
 800c684:	3304      	adds	r3, #4
 800c686:	4619      	mov	r1, r3
 800c688:	4610      	mov	r0, r2
 800c68a:	f7fe f97c 	bl	800a986 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800c68e:	697b      	ldr	r3, [r7, #20]
}
 800c690:	4618      	mov	r0, r3
 800c692:	3718      	adds	r7, #24
 800c694:	46bd      	mov	sp, r7
 800c696:	bd80      	pop	{r7, pc}
 800c698:	20006a04 	.word	0x20006a04
 800c69c:	20006a00 	.word	0x20006a00

0800c6a0 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800c6a0:	b580      	push	{r7, lr}
 800c6a2:	b08e      	sub	sp, #56	@ 0x38
 800c6a4:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800c6a6:	e0ce      	b.n	800c846 <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800c6a8:	687b      	ldr	r3, [r7, #4]
 800c6aa:	2b00      	cmp	r3, #0
 800c6ac:	da19      	bge.n	800c6e2 <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800c6ae:	1d3b      	adds	r3, r7, #4
 800c6b0:	3304      	adds	r3, #4
 800c6b2:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800c6b4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c6b6:	2b00      	cmp	r3, #0
 800c6b8:	d10b      	bne.n	800c6d2 <prvProcessReceivedCommands+0x32>
	__asm volatile
 800c6ba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c6be:	f383 8811 	msr	BASEPRI, r3
 800c6c2:	f3bf 8f6f 	isb	sy
 800c6c6:	f3bf 8f4f 	dsb	sy
 800c6ca:	61fb      	str	r3, [r7, #28]
}
 800c6cc:	bf00      	nop
 800c6ce:	bf00      	nop
 800c6d0:	e7fd      	b.n	800c6ce <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800c6d2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c6d4:	681b      	ldr	r3, [r3, #0]
 800c6d6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800c6d8:	6850      	ldr	r0, [r2, #4]
 800c6da:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800c6dc:	6892      	ldr	r2, [r2, #8]
 800c6de:	4611      	mov	r1, r2
 800c6e0:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800c6e2:	687b      	ldr	r3, [r7, #4]
 800c6e4:	2b00      	cmp	r3, #0
 800c6e6:	f2c0 80ae 	blt.w	800c846 <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800c6ea:	68fb      	ldr	r3, [r7, #12]
 800c6ec:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800c6ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c6f0:	695b      	ldr	r3, [r3, #20]
 800c6f2:	2b00      	cmp	r3, #0
 800c6f4:	d004      	beq.n	800c700 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800c6f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c6f8:	3304      	adds	r3, #4
 800c6fa:	4618      	mov	r0, r3
 800c6fc:	f7fe f97c 	bl	800a9f8 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800c700:	463b      	mov	r3, r7
 800c702:	4618      	mov	r0, r3
 800c704:	f7ff ff6a 	bl	800c5dc <prvSampleTimeNow>
 800c708:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 800c70a:	687b      	ldr	r3, [r7, #4]
 800c70c:	2b09      	cmp	r3, #9
 800c70e:	f200 8097 	bhi.w	800c840 <prvProcessReceivedCommands+0x1a0>
 800c712:	a201      	add	r2, pc, #4	@ (adr r2, 800c718 <prvProcessReceivedCommands+0x78>)
 800c714:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c718:	0800c741 	.word	0x0800c741
 800c71c:	0800c741 	.word	0x0800c741
 800c720:	0800c741 	.word	0x0800c741
 800c724:	0800c7b7 	.word	0x0800c7b7
 800c728:	0800c7cb 	.word	0x0800c7cb
 800c72c:	0800c817 	.word	0x0800c817
 800c730:	0800c741 	.word	0x0800c741
 800c734:	0800c741 	.word	0x0800c741
 800c738:	0800c7b7 	.word	0x0800c7b7
 800c73c:	0800c7cb 	.word	0x0800c7cb
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800c740:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c742:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800c746:	f043 0301 	orr.w	r3, r3, #1
 800c74a:	b2da      	uxtb	r2, r3
 800c74c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c74e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800c752:	68ba      	ldr	r2, [r7, #8]
 800c754:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c756:	699b      	ldr	r3, [r3, #24]
 800c758:	18d1      	adds	r1, r2, r3
 800c75a:	68bb      	ldr	r3, [r7, #8]
 800c75c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c75e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800c760:	f7ff ff5c 	bl	800c61c <prvInsertTimerInActiveList>
 800c764:	4603      	mov	r3, r0
 800c766:	2b00      	cmp	r3, #0
 800c768:	d06c      	beq.n	800c844 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800c76a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c76c:	6a1b      	ldr	r3, [r3, #32]
 800c76e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800c770:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800c772:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c774:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800c778:	f003 0304 	and.w	r3, r3, #4
 800c77c:	2b00      	cmp	r3, #0
 800c77e:	d061      	beq.n	800c844 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800c780:	68ba      	ldr	r2, [r7, #8]
 800c782:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c784:	699b      	ldr	r3, [r3, #24]
 800c786:	441a      	add	r2, r3
 800c788:	2300      	movs	r3, #0
 800c78a:	9300      	str	r3, [sp, #0]
 800c78c:	2300      	movs	r3, #0
 800c78e:	2100      	movs	r1, #0
 800c790:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800c792:	f7ff fe01 	bl	800c398 <xTimerGenericCommand>
 800c796:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800c798:	6a3b      	ldr	r3, [r7, #32]
 800c79a:	2b00      	cmp	r3, #0
 800c79c:	d152      	bne.n	800c844 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 800c79e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c7a2:	f383 8811 	msr	BASEPRI, r3
 800c7a6:	f3bf 8f6f 	isb	sy
 800c7aa:	f3bf 8f4f 	dsb	sy
 800c7ae:	61bb      	str	r3, [r7, #24]
}
 800c7b0:	bf00      	nop
 800c7b2:	bf00      	nop
 800c7b4:	e7fd      	b.n	800c7b2 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800c7b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c7b8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800c7bc:	f023 0301 	bic.w	r3, r3, #1
 800c7c0:	b2da      	uxtb	r2, r3
 800c7c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c7c4:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800c7c8:	e03d      	b.n	800c846 <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800c7ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c7cc:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800c7d0:	f043 0301 	orr.w	r3, r3, #1
 800c7d4:	b2da      	uxtb	r2, r3
 800c7d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c7d8:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800c7dc:	68ba      	ldr	r2, [r7, #8]
 800c7de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c7e0:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800c7e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c7e4:	699b      	ldr	r3, [r3, #24]
 800c7e6:	2b00      	cmp	r3, #0
 800c7e8:	d10b      	bne.n	800c802 <prvProcessReceivedCommands+0x162>
	__asm volatile
 800c7ea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c7ee:	f383 8811 	msr	BASEPRI, r3
 800c7f2:	f3bf 8f6f 	isb	sy
 800c7f6:	f3bf 8f4f 	dsb	sy
 800c7fa:	617b      	str	r3, [r7, #20]
}
 800c7fc:	bf00      	nop
 800c7fe:	bf00      	nop
 800c800:	e7fd      	b.n	800c7fe <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800c802:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c804:	699a      	ldr	r2, [r3, #24]
 800c806:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c808:	18d1      	adds	r1, r2, r3
 800c80a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c80c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c80e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800c810:	f7ff ff04 	bl	800c61c <prvInsertTimerInActiveList>
					break;
 800c814:	e017      	b.n	800c846 <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800c816:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c818:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800c81c:	f003 0302 	and.w	r3, r3, #2
 800c820:	2b00      	cmp	r3, #0
 800c822:	d103      	bne.n	800c82c <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 800c824:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800c826:	f000 fbe7 	bl	800cff8 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800c82a:	e00c      	b.n	800c846 <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800c82c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c82e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800c832:	f023 0301 	bic.w	r3, r3, #1
 800c836:	b2da      	uxtb	r2, r3
 800c838:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c83a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800c83e:	e002      	b.n	800c846 <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 800c840:	bf00      	nop
 800c842:	e000      	b.n	800c846 <prvProcessReceivedCommands+0x1a6>
					break;
 800c844:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800c846:	4b08      	ldr	r3, [pc, #32]	@ (800c868 <prvProcessReceivedCommands+0x1c8>)
 800c848:	681b      	ldr	r3, [r3, #0]
 800c84a:	1d39      	adds	r1, r7, #4
 800c84c:	2200      	movs	r2, #0
 800c84e:	4618      	mov	r0, r3
 800c850:	f7fe fba6 	bl	800afa0 <xQueueReceive>
 800c854:	4603      	mov	r3, r0
 800c856:	2b00      	cmp	r3, #0
 800c858:	f47f af26 	bne.w	800c6a8 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800c85c:	bf00      	nop
 800c85e:	bf00      	nop
 800c860:	3730      	adds	r7, #48	@ 0x30
 800c862:	46bd      	mov	sp, r7
 800c864:	bd80      	pop	{r7, pc}
 800c866:	bf00      	nop
 800c868:	20006a08 	.word	0x20006a08

0800c86c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800c86c:	b580      	push	{r7, lr}
 800c86e:	b088      	sub	sp, #32
 800c870:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800c872:	e049      	b.n	800c908 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800c874:	4b2e      	ldr	r3, [pc, #184]	@ (800c930 <prvSwitchTimerLists+0xc4>)
 800c876:	681b      	ldr	r3, [r3, #0]
 800c878:	68db      	ldr	r3, [r3, #12]
 800c87a:	681b      	ldr	r3, [r3, #0]
 800c87c:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c87e:	4b2c      	ldr	r3, [pc, #176]	@ (800c930 <prvSwitchTimerLists+0xc4>)
 800c880:	681b      	ldr	r3, [r3, #0]
 800c882:	68db      	ldr	r3, [r3, #12]
 800c884:	68db      	ldr	r3, [r3, #12]
 800c886:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800c888:	68fb      	ldr	r3, [r7, #12]
 800c88a:	3304      	adds	r3, #4
 800c88c:	4618      	mov	r0, r3
 800c88e:	f7fe f8b3 	bl	800a9f8 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800c892:	68fb      	ldr	r3, [r7, #12]
 800c894:	6a1b      	ldr	r3, [r3, #32]
 800c896:	68f8      	ldr	r0, [r7, #12]
 800c898:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800c89a:	68fb      	ldr	r3, [r7, #12]
 800c89c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800c8a0:	f003 0304 	and.w	r3, r3, #4
 800c8a4:	2b00      	cmp	r3, #0
 800c8a6:	d02f      	beq.n	800c908 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800c8a8:	68fb      	ldr	r3, [r7, #12]
 800c8aa:	699b      	ldr	r3, [r3, #24]
 800c8ac:	693a      	ldr	r2, [r7, #16]
 800c8ae:	4413      	add	r3, r2
 800c8b0:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800c8b2:	68ba      	ldr	r2, [r7, #8]
 800c8b4:	693b      	ldr	r3, [r7, #16]
 800c8b6:	429a      	cmp	r2, r3
 800c8b8:	d90e      	bls.n	800c8d8 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800c8ba:	68fb      	ldr	r3, [r7, #12]
 800c8bc:	68ba      	ldr	r2, [r7, #8]
 800c8be:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800c8c0:	68fb      	ldr	r3, [r7, #12]
 800c8c2:	68fa      	ldr	r2, [r7, #12]
 800c8c4:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800c8c6:	4b1a      	ldr	r3, [pc, #104]	@ (800c930 <prvSwitchTimerLists+0xc4>)
 800c8c8:	681a      	ldr	r2, [r3, #0]
 800c8ca:	68fb      	ldr	r3, [r7, #12]
 800c8cc:	3304      	adds	r3, #4
 800c8ce:	4619      	mov	r1, r3
 800c8d0:	4610      	mov	r0, r2
 800c8d2:	f7fe f858 	bl	800a986 <vListInsert>
 800c8d6:	e017      	b.n	800c908 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800c8d8:	2300      	movs	r3, #0
 800c8da:	9300      	str	r3, [sp, #0]
 800c8dc:	2300      	movs	r3, #0
 800c8de:	693a      	ldr	r2, [r7, #16]
 800c8e0:	2100      	movs	r1, #0
 800c8e2:	68f8      	ldr	r0, [r7, #12]
 800c8e4:	f7ff fd58 	bl	800c398 <xTimerGenericCommand>
 800c8e8:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800c8ea:	687b      	ldr	r3, [r7, #4]
 800c8ec:	2b00      	cmp	r3, #0
 800c8ee:	d10b      	bne.n	800c908 <prvSwitchTimerLists+0x9c>
	__asm volatile
 800c8f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c8f4:	f383 8811 	msr	BASEPRI, r3
 800c8f8:	f3bf 8f6f 	isb	sy
 800c8fc:	f3bf 8f4f 	dsb	sy
 800c900:	603b      	str	r3, [r7, #0]
}
 800c902:	bf00      	nop
 800c904:	bf00      	nop
 800c906:	e7fd      	b.n	800c904 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800c908:	4b09      	ldr	r3, [pc, #36]	@ (800c930 <prvSwitchTimerLists+0xc4>)
 800c90a:	681b      	ldr	r3, [r3, #0]
 800c90c:	681b      	ldr	r3, [r3, #0]
 800c90e:	2b00      	cmp	r3, #0
 800c910:	d1b0      	bne.n	800c874 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800c912:	4b07      	ldr	r3, [pc, #28]	@ (800c930 <prvSwitchTimerLists+0xc4>)
 800c914:	681b      	ldr	r3, [r3, #0]
 800c916:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800c918:	4b06      	ldr	r3, [pc, #24]	@ (800c934 <prvSwitchTimerLists+0xc8>)
 800c91a:	681b      	ldr	r3, [r3, #0]
 800c91c:	4a04      	ldr	r2, [pc, #16]	@ (800c930 <prvSwitchTimerLists+0xc4>)
 800c91e:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800c920:	4a04      	ldr	r2, [pc, #16]	@ (800c934 <prvSwitchTimerLists+0xc8>)
 800c922:	697b      	ldr	r3, [r7, #20]
 800c924:	6013      	str	r3, [r2, #0]
}
 800c926:	bf00      	nop
 800c928:	3718      	adds	r7, #24
 800c92a:	46bd      	mov	sp, r7
 800c92c:	bd80      	pop	{r7, pc}
 800c92e:	bf00      	nop
 800c930:	20006a00 	.word	0x20006a00
 800c934:	20006a04 	.word	0x20006a04

0800c938 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800c938:	b580      	push	{r7, lr}
 800c93a:	b082      	sub	sp, #8
 800c93c:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800c93e:	f000 f96b 	bl	800cc18 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800c942:	4b15      	ldr	r3, [pc, #84]	@ (800c998 <prvCheckForValidListAndQueue+0x60>)
 800c944:	681b      	ldr	r3, [r3, #0]
 800c946:	2b00      	cmp	r3, #0
 800c948:	d120      	bne.n	800c98c <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800c94a:	4814      	ldr	r0, [pc, #80]	@ (800c99c <prvCheckForValidListAndQueue+0x64>)
 800c94c:	f7fd ffca 	bl	800a8e4 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800c950:	4813      	ldr	r0, [pc, #76]	@ (800c9a0 <prvCheckForValidListAndQueue+0x68>)
 800c952:	f7fd ffc7 	bl	800a8e4 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800c956:	4b13      	ldr	r3, [pc, #76]	@ (800c9a4 <prvCheckForValidListAndQueue+0x6c>)
 800c958:	4a10      	ldr	r2, [pc, #64]	@ (800c99c <prvCheckForValidListAndQueue+0x64>)
 800c95a:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800c95c:	4b12      	ldr	r3, [pc, #72]	@ (800c9a8 <prvCheckForValidListAndQueue+0x70>)
 800c95e:	4a10      	ldr	r2, [pc, #64]	@ (800c9a0 <prvCheckForValidListAndQueue+0x68>)
 800c960:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800c962:	2300      	movs	r3, #0
 800c964:	9300      	str	r3, [sp, #0]
 800c966:	4b11      	ldr	r3, [pc, #68]	@ (800c9ac <prvCheckForValidListAndQueue+0x74>)
 800c968:	4a11      	ldr	r2, [pc, #68]	@ (800c9b0 <prvCheckForValidListAndQueue+0x78>)
 800c96a:	2110      	movs	r1, #16
 800c96c:	200a      	movs	r0, #10
 800c96e:	f7fe f8d7 	bl	800ab20 <xQueueGenericCreateStatic>
 800c972:	4603      	mov	r3, r0
 800c974:	4a08      	ldr	r2, [pc, #32]	@ (800c998 <prvCheckForValidListAndQueue+0x60>)
 800c976:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800c978:	4b07      	ldr	r3, [pc, #28]	@ (800c998 <prvCheckForValidListAndQueue+0x60>)
 800c97a:	681b      	ldr	r3, [r3, #0]
 800c97c:	2b00      	cmp	r3, #0
 800c97e:	d005      	beq.n	800c98c <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800c980:	4b05      	ldr	r3, [pc, #20]	@ (800c998 <prvCheckForValidListAndQueue+0x60>)
 800c982:	681b      	ldr	r3, [r3, #0]
 800c984:	490b      	ldr	r1, [pc, #44]	@ (800c9b4 <prvCheckForValidListAndQueue+0x7c>)
 800c986:	4618      	mov	r0, r3
 800c988:	f7fe fcfc 	bl	800b384 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800c98c:	f000 f976 	bl	800cc7c <vPortExitCritical>
}
 800c990:	bf00      	nop
 800c992:	46bd      	mov	sp, r7
 800c994:	bd80      	pop	{r7, pc}
 800c996:	bf00      	nop
 800c998:	20006a08 	.word	0x20006a08
 800c99c:	200069d8 	.word	0x200069d8
 800c9a0:	200069ec 	.word	0x200069ec
 800c9a4:	20006a00 	.word	0x20006a00
 800c9a8:	20006a04 	.word	0x20006a04
 800c9ac:	20006ab4 	.word	0x20006ab4
 800c9b0:	20006a14 	.word	0x20006a14
 800c9b4:	0801d39c 	.word	0x0801d39c

0800c9b8 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800c9b8:	b480      	push	{r7}
 800c9ba:	b085      	sub	sp, #20
 800c9bc:	af00      	add	r7, sp, #0
 800c9be:	60f8      	str	r0, [r7, #12]
 800c9c0:	60b9      	str	r1, [r7, #8]
 800c9c2:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800c9c4:	68fb      	ldr	r3, [r7, #12]
 800c9c6:	3b04      	subs	r3, #4
 800c9c8:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800c9ca:	68fb      	ldr	r3, [r7, #12]
 800c9cc:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800c9d0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800c9d2:	68fb      	ldr	r3, [r7, #12]
 800c9d4:	3b04      	subs	r3, #4
 800c9d6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800c9d8:	68bb      	ldr	r3, [r7, #8]
 800c9da:	f023 0201 	bic.w	r2, r3, #1
 800c9de:	68fb      	ldr	r3, [r7, #12]
 800c9e0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800c9e2:	68fb      	ldr	r3, [r7, #12]
 800c9e4:	3b04      	subs	r3, #4
 800c9e6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800c9e8:	4a0c      	ldr	r2, [pc, #48]	@ (800ca1c <pxPortInitialiseStack+0x64>)
 800c9ea:	68fb      	ldr	r3, [r7, #12]
 800c9ec:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800c9ee:	68fb      	ldr	r3, [r7, #12]
 800c9f0:	3b14      	subs	r3, #20
 800c9f2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800c9f4:	687a      	ldr	r2, [r7, #4]
 800c9f6:	68fb      	ldr	r3, [r7, #12]
 800c9f8:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800c9fa:	68fb      	ldr	r3, [r7, #12]
 800c9fc:	3b04      	subs	r3, #4
 800c9fe:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800ca00:	68fb      	ldr	r3, [r7, #12]
 800ca02:	f06f 0202 	mvn.w	r2, #2
 800ca06:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800ca08:	68fb      	ldr	r3, [r7, #12]
 800ca0a:	3b20      	subs	r3, #32
 800ca0c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800ca0e:	68fb      	ldr	r3, [r7, #12]
}
 800ca10:	4618      	mov	r0, r3
 800ca12:	3714      	adds	r7, #20
 800ca14:	46bd      	mov	sp, r7
 800ca16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca1a:	4770      	bx	lr
 800ca1c:	0800ca21 	.word	0x0800ca21

0800ca20 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800ca20:	b480      	push	{r7}
 800ca22:	b085      	sub	sp, #20
 800ca24:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800ca26:	2300      	movs	r3, #0
 800ca28:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800ca2a:	4b13      	ldr	r3, [pc, #76]	@ (800ca78 <prvTaskExitError+0x58>)
 800ca2c:	681b      	ldr	r3, [r3, #0]
 800ca2e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800ca32:	d00b      	beq.n	800ca4c <prvTaskExitError+0x2c>
	__asm volatile
 800ca34:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ca38:	f383 8811 	msr	BASEPRI, r3
 800ca3c:	f3bf 8f6f 	isb	sy
 800ca40:	f3bf 8f4f 	dsb	sy
 800ca44:	60fb      	str	r3, [r7, #12]
}
 800ca46:	bf00      	nop
 800ca48:	bf00      	nop
 800ca4a:	e7fd      	b.n	800ca48 <prvTaskExitError+0x28>
	__asm volatile
 800ca4c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ca50:	f383 8811 	msr	BASEPRI, r3
 800ca54:	f3bf 8f6f 	isb	sy
 800ca58:	f3bf 8f4f 	dsb	sy
 800ca5c:	60bb      	str	r3, [r7, #8]
}
 800ca5e:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800ca60:	bf00      	nop
 800ca62:	687b      	ldr	r3, [r7, #4]
 800ca64:	2b00      	cmp	r3, #0
 800ca66:	d0fc      	beq.n	800ca62 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800ca68:	bf00      	nop
 800ca6a:	bf00      	nop
 800ca6c:	3714      	adds	r7, #20
 800ca6e:	46bd      	mov	sp, r7
 800ca70:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca74:	4770      	bx	lr
 800ca76:	bf00      	nop
 800ca78:	2000002c 	.word	0x2000002c
 800ca7c:	00000000 	.word	0x00000000

0800ca80 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800ca80:	4b07      	ldr	r3, [pc, #28]	@ (800caa0 <pxCurrentTCBConst2>)
 800ca82:	6819      	ldr	r1, [r3, #0]
 800ca84:	6808      	ldr	r0, [r1, #0]
 800ca86:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ca8a:	f380 8809 	msr	PSP, r0
 800ca8e:	f3bf 8f6f 	isb	sy
 800ca92:	f04f 0000 	mov.w	r0, #0
 800ca96:	f380 8811 	msr	BASEPRI, r0
 800ca9a:	4770      	bx	lr
 800ca9c:	f3af 8000 	nop.w

0800caa0 <pxCurrentTCBConst2>:
 800caa0:	200064d8 	.word	0x200064d8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800caa4:	bf00      	nop
 800caa6:	bf00      	nop

0800caa8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800caa8:	4808      	ldr	r0, [pc, #32]	@ (800cacc <prvPortStartFirstTask+0x24>)
 800caaa:	6800      	ldr	r0, [r0, #0]
 800caac:	6800      	ldr	r0, [r0, #0]
 800caae:	f380 8808 	msr	MSP, r0
 800cab2:	f04f 0000 	mov.w	r0, #0
 800cab6:	f380 8814 	msr	CONTROL, r0
 800caba:	b662      	cpsie	i
 800cabc:	b661      	cpsie	f
 800cabe:	f3bf 8f4f 	dsb	sy
 800cac2:	f3bf 8f6f 	isb	sy
 800cac6:	df00      	svc	0
 800cac8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800caca:	bf00      	nop
 800cacc:	e000ed08 	.word	0xe000ed08

0800cad0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800cad0:	b580      	push	{r7, lr}
 800cad2:	b086      	sub	sp, #24
 800cad4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800cad6:	4b47      	ldr	r3, [pc, #284]	@ (800cbf4 <xPortStartScheduler+0x124>)
 800cad8:	681b      	ldr	r3, [r3, #0]
 800cada:	4a47      	ldr	r2, [pc, #284]	@ (800cbf8 <xPortStartScheduler+0x128>)
 800cadc:	4293      	cmp	r3, r2
 800cade:	d10b      	bne.n	800caf8 <xPortStartScheduler+0x28>
	__asm volatile
 800cae0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cae4:	f383 8811 	msr	BASEPRI, r3
 800cae8:	f3bf 8f6f 	isb	sy
 800caec:	f3bf 8f4f 	dsb	sy
 800caf0:	613b      	str	r3, [r7, #16]
}
 800caf2:	bf00      	nop
 800caf4:	bf00      	nop
 800caf6:	e7fd      	b.n	800caf4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800caf8:	4b3e      	ldr	r3, [pc, #248]	@ (800cbf4 <xPortStartScheduler+0x124>)
 800cafa:	681b      	ldr	r3, [r3, #0]
 800cafc:	4a3f      	ldr	r2, [pc, #252]	@ (800cbfc <xPortStartScheduler+0x12c>)
 800cafe:	4293      	cmp	r3, r2
 800cb00:	d10b      	bne.n	800cb1a <xPortStartScheduler+0x4a>
	__asm volatile
 800cb02:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cb06:	f383 8811 	msr	BASEPRI, r3
 800cb0a:	f3bf 8f6f 	isb	sy
 800cb0e:	f3bf 8f4f 	dsb	sy
 800cb12:	60fb      	str	r3, [r7, #12]
}
 800cb14:	bf00      	nop
 800cb16:	bf00      	nop
 800cb18:	e7fd      	b.n	800cb16 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800cb1a:	4b39      	ldr	r3, [pc, #228]	@ (800cc00 <xPortStartScheduler+0x130>)
 800cb1c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800cb1e:	697b      	ldr	r3, [r7, #20]
 800cb20:	781b      	ldrb	r3, [r3, #0]
 800cb22:	b2db      	uxtb	r3, r3
 800cb24:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800cb26:	697b      	ldr	r3, [r7, #20]
 800cb28:	22ff      	movs	r2, #255	@ 0xff
 800cb2a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800cb2c:	697b      	ldr	r3, [r7, #20]
 800cb2e:	781b      	ldrb	r3, [r3, #0]
 800cb30:	b2db      	uxtb	r3, r3
 800cb32:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800cb34:	78fb      	ldrb	r3, [r7, #3]
 800cb36:	b2db      	uxtb	r3, r3
 800cb38:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800cb3c:	b2da      	uxtb	r2, r3
 800cb3e:	4b31      	ldr	r3, [pc, #196]	@ (800cc04 <xPortStartScheduler+0x134>)
 800cb40:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800cb42:	4b31      	ldr	r3, [pc, #196]	@ (800cc08 <xPortStartScheduler+0x138>)
 800cb44:	2207      	movs	r2, #7
 800cb46:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800cb48:	e009      	b.n	800cb5e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800cb4a:	4b2f      	ldr	r3, [pc, #188]	@ (800cc08 <xPortStartScheduler+0x138>)
 800cb4c:	681b      	ldr	r3, [r3, #0]
 800cb4e:	3b01      	subs	r3, #1
 800cb50:	4a2d      	ldr	r2, [pc, #180]	@ (800cc08 <xPortStartScheduler+0x138>)
 800cb52:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800cb54:	78fb      	ldrb	r3, [r7, #3]
 800cb56:	b2db      	uxtb	r3, r3
 800cb58:	005b      	lsls	r3, r3, #1
 800cb5a:	b2db      	uxtb	r3, r3
 800cb5c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800cb5e:	78fb      	ldrb	r3, [r7, #3]
 800cb60:	b2db      	uxtb	r3, r3
 800cb62:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800cb66:	2b80      	cmp	r3, #128	@ 0x80
 800cb68:	d0ef      	beq.n	800cb4a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800cb6a:	4b27      	ldr	r3, [pc, #156]	@ (800cc08 <xPortStartScheduler+0x138>)
 800cb6c:	681b      	ldr	r3, [r3, #0]
 800cb6e:	f1c3 0307 	rsb	r3, r3, #7
 800cb72:	2b04      	cmp	r3, #4
 800cb74:	d00b      	beq.n	800cb8e <xPortStartScheduler+0xbe>
	__asm volatile
 800cb76:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cb7a:	f383 8811 	msr	BASEPRI, r3
 800cb7e:	f3bf 8f6f 	isb	sy
 800cb82:	f3bf 8f4f 	dsb	sy
 800cb86:	60bb      	str	r3, [r7, #8]
}
 800cb88:	bf00      	nop
 800cb8a:	bf00      	nop
 800cb8c:	e7fd      	b.n	800cb8a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800cb8e:	4b1e      	ldr	r3, [pc, #120]	@ (800cc08 <xPortStartScheduler+0x138>)
 800cb90:	681b      	ldr	r3, [r3, #0]
 800cb92:	021b      	lsls	r3, r3, #8
 800cb94:	4a1c      	ldr	r2, [pc, #112]	@ (800cc08 <xPortStartScheduler+0x138>)
 800cb96:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800cb98:	4b1b      	ldr	r3, [pc, #108]	@ (800cc08 <xPortStartScheduler+0x138>)
 800cb9a:	681b      	ldr	r3, [r3, #0]
 800cb9c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800cba0:	4a19      	ldr	r2, [pc, #100]	@ (800cc08 <xPortStartScheduler+0x138>)
 800cba2:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800cba4:	687b      	ldr	r3, [r7, #4]
 800cba6:	b2da      	uxtb	r2, r3
 800cba8:	697b      	ldr	r3, [r7, #20]
 800cbaa:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800cbac:	4b17      	ldr	r3, [pc, #92]	@ (800cc0c <xPortStartScheduler+0x13c>)
 800cbae:	681b      	ldr	r3, [r3, #0]
 800cbb0:	4a16      	ldr	r2, [pc, #88]	@ (800cc0c <xPortStartScheduler+0x13c>)
 800cbb2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800cbb6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800cbb8:	4b14      	ldr	r3, [pc, #80]	@ (800cc0c <xPortStartScheduler+0x13c>)
 800cbba:	681b      	ldr	r3, [r3, #0]
 800cbbc:	4a13      	ldr	r2, [pc, #76]	@ (800cc0c <xPortStartScheduler+0x13c>)
 800cbbe:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 800cbc2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800cbc4:	f000 f8da 	bl	800cd7c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800cbc8:	4b11      	ldr	r3, [pc, #68]	@ (800cc10 <xPortStartScheduler+0x140>)
 800cbca:	2200      	movs	r2, #0
 800cbcc:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800cbce:	f000 f8f9 	bl	800cdc4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800cbd2:	4b10      	ldr	r3, [pc, #64]	@ (800cc14 <xPortStartScheduler+0x144>)
 800cbd4:	681b      	ldr	r3, [r3, #0]
 800cbd6:	4a0f      	ldr	r2, [pc, #60]	@ (800cc14 <xPortStartScheduler+0x144>)
 800cbd8:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800cbdc:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800cbde:	f7ff ff63 	bl	800caa8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800cbe2:	f7ff f807 	bl	800bbf4 <vTaskSwitchContext>
	prvTaskExitError();
 800cbe6:	f7ff ff1b 	bl	800ca20 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800cbea:	2300      	movs	r3, #0
}
 800cbec:	4618      	mov	r0, r3
 800cbee:	3718      	adds	r7, #24
 800cbf0:	46bd      	mov	sp, r7
 800cbf2:	bd80      	pop	{r7, pc}
 800cbf4:	e000ed00 	.word	0xe000ed00
 800cbf8:	410fc271 	.word	0x410fc271
 800cbfc:	410fc270 	.word	0x410fc270
 800cc00:	e000e400 	.word	0xe000e400
 800cc04:	20006b04 	.word	0x20006b04
 800cc08:	20006b08 	.word	0x20006b08
 800cc0c:	e000ed20 	.word	0xe000ed20
 800cc10:	2000002c 	.word	0x2000002c
 800cc14:	e000ef34 	.word	0xe000ef34

0800cc18 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800cc18:	b480      	push	{r7}
 800cc1a:	b083      	sub	sp, #12
 800cc1c:	af00      	add	r7, sp, #0
	__asm volatile
 800cc1e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cc22:	f383 8811 	msr	BASEPRI, r3
 800cc26:	f3bf 8f6f 	isb	sy
 800cc2a:	f3bf 8f4f 	dsb	sy
 800cc2e:	607b      	str	r3, [r7, #4]
}
 800cc30:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800cc32:	4b10      	ldr	r3, [pc, #64]	@ (800cc74 <vPortEnterCritical+0x5c>)
 800cc34:	681b      	ldr	r3, [r3, #0]
 800cc36:	3301      	adds	r3, #1
 800cc38:	4a0e      	ldr	r2, [pc, #56]	@ (800cc74 <vPortEnterCritical+0x5c>)
 800cc3a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800cc3c:	4b0d      	ldr	r3, [pc, #52]	@ (800cc74 <vPortEnterCritical+0x5c>)
 800cc3e:	681b      	ldr	r3, [r3, #0]
 800cc40:	2b01      	cmp	r3, #1
 800cc42:	d110      	bne.n	800cc66 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800cc44:	4b0c      	ldr	r3, [pc, #48]	@ (800cc78 <vPortEnterCritical+0x60>)
 800cc46:	681b      	ldr	r3, [r3, #0]
 800cc48:	b2db      	uxtb	r3, r3
 800cc4a:	2b00      	cmp	r3, #0
 800cc4c:	d00b      	beq.n	800cc66 <vPortEnterCritical+0x4e>
	__asm volatile
 800cc4e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cc52:	f383 8811 	msr	BASEPRI, r3
 800cc56:	f3bf 8f6f 	isb	sy
 800cc5a:	f3bf 8f4f 	dsb	sy
 800cc5e:	603b      	str	r3, [r7, #0]
}
 800cc60:	bf00      	nop
 800cc62:	bf00      	nop
 800cc64:	e7fd      	b.n	800cc62 <vPortEnterCritical+0x4a>
	}
}
 800cc66:	bf00      	nop
 800cc68:	370c      	adds	r7, #12
 800cc6a:	46bd      	mov	sp, r7
 800cc6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc70:	4770      	bx	lr
 800cc72:	bf00      	nop
 800cc74:	2000002c 	.word	0x2000002c
 800cc78:	e000ed04 	.word	0xe000ed04

0800cc7c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800cc7c:	b480      	push	{r7}
 800cc7e:	b083      	sub	sp, #12
 800cc80:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800cc82:	4b12      	ldr	r3, [pc, #72]	@ (800cccc <vPortExitCritical+0x50>)
 800cc84:	681b      	ldr	r3, [r3, #0]
 800cc86:	2b00      	cmp	r3, #0
 800cc88:	d10b      	bne.n	800cca2 <vPortExitCritical+0x26>
	__asm volatile
 800cc8a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cc8e:	f383 8811 	msr	BASEPRI, r3
 800cc92:	f3bf 8f6f 	isb	sy
 800cc96:	f3bf 8f4f 	dsb	sy
 800cc9a:	607b      	str	r3, [r7, #4]
}
 800cc9c:	bf00      	nop
 800cc9e:	bf00      	nop
 800cca0:	e7fd      	b.n	800cc9e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800cca2:	4b0a      	ldr	r3, [pc, #40]	@ (800cccc <vPortExitCritical+0x50>)
 800cca4:	681b      	ldr	r3, [r3, #0]
 800cca6:	3b01      	subs	r3, #1
 800cca8:	4a08      	ldr	r2, [pc, #32]	@ (800cccc <vPortExitCritical+0x50>)
 800ccaa:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800ccac:	4b07      	ldr	r3, [pc, #28]	@ (800cccc <vPortExitCritical+0x50>)
 800ccae:	681b      	ldr	r3, [r3, #0]
 800ccb0:	2b00      	cmp	r3, #0
 800ccb2:	d105      	bne.n	800ccc0 <vPortExitCritical+0x44>
 800ccb4:	2300      	movs	r3, #0
 800ccb6:	603b      	str	r3, [r7, #0]
	__asm volatile
 800ccb8:	683b      	ldr	r3, [r7, #0]
 800ccba:	f383 8811 	msr	BASEPRI, r3
}
 800ccbe:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800ccc0:	bf00      	nop
 800ccc2:	370c      	adds	r7, #12
 800ccc4:	46bd      	mov	sp, r7
 800ccc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccca:	4770      	bx	lr
 800cccc:	2000002c 	.word	0x2000002c

0800ccd0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800ccd0:	f3ef 8009 	mrs	r0, PSP
 800ccd4:	f3bf 8f6f 	isb	sy
 800ccd8:	4b15      	ldr	r3, [pc, #84]	@ (800cd30 <pxCurrentTCBConst>)
 800ccda:	681a      	ldr	r2, [r3, #0]
 800ccdc:	f01e 0f10 	tst.w	lr, #16
 800cce0:	bf08      	it	eq
 800cce2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800cce6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ccea:	6010      	str	r0, [r2, #0]
 800ccec:	e92d 0009 	stmdb	sp!, {r0, r3}
 800ccf0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 800ccf4:	f380 8811 	msr	BASEPRI, r0
 800ccf8:	f3bf 8f4f 	dsb	sy
 800ccfc:	f3bf 8f6f 	isb	sy
 800cd00:	f7fe ff78 	bl	800bbf4 <vTaskSwitchContext>
 800cd04:	f04f 0000 	mov.w	r0, #0
 800cd08:	f380 8811 	msr	BASEPRI, r0
 800cd0c:	bc09      	pop	{r0, r3}
 800cd0e:	6819      	ldr	r1, [r3, #0]
 800cd10:	6808      	ldr	r0, [r1, #0]
 800cd12:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cd16:	f01e 0f10 	tst.w	lr, #16
 800cd1a:	bf08      	it	eq
 800cd1c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800cd20:	f380 8809 	msr	PSP, r0
 800cd24:	f3bf 8f6f 	isb	sy
 800cd28:	4770      	bx	lr
 800cd2a:	bf00      	nop
 800cd2c:	f3af 8000 	nop.w

0800cd30 <pxCurrentTCBConst>:
 800cd30:	200064d8 	.word	0x200064d8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800cd34:	bf00      	nop
 800cd36:	bf00      	nop

0800cd38 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800cd38:	b580      	push	{r7, lr}
 800cd3a:	b082      	sub	sp, #8
 800cd3c:	af00      	add	r7, sp, #0
	__asm volatile
 800cd3e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cd42:	f383 8811 	msr	BASEPRI, r3
 800cd46:	f3bf 8f6f 	isb	sy
 800cd4a:	f3bf 8f4f 	dsb	sy
 800cd4e:	607b      	str	r3, [r7, #4]
}
 800cd50:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800cd52:	f7fe fe95 	bl	800ba80 <xTaskIncrementTick>
 800cd56:	4603      	mov	r3, r0
 800cd58:	2b00      	cmp	r3, #0
 800cd5a:	d003      	beq.n	800cd64 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800cd5c:	4b06      	ldr	r3, [pc, #24]	@ (800cd78 <xPortSysTickHandler+0x40>)
 800cd5e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800cd62:	601a      	str	r2, [r3, #0]
 800cd64:	2300      	movs	r3, #0
 800cd66:	603b      	str	r3, [r7, #0]
	__asm volatile
 800cd68:	683b      	ldr	r3, [r7, #0]
 800cd6a:	f383 8811 	msr	BASEPRI, r3
}
 800cd6e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800cd70:	bf00      	nop
 800cd72:	3708      	adds	r7, #8
 800cd74:	46bd      	mov	sp, r7
 800cd76:	bd80      	pop	{r7, pc}
 800cd78:	e000ed04 	.word	0xe000ed04

0800cd7c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800cd7c:	b480      	push	{r7}
 800cd7e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800cd80:	4b0b      	ldr	r3, [pc, #44]	@ (800cdb0 <vPortSetupTimerInterrupt+0x34>)
 800cd82:	2200      	movs	r2, #0
 800cd84:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800cd86:	4b0b      	ldr	r3, [pc, #44]	@ (800cdb4 <vPortSetupTimerInterrupt+0x38>)
 800cd88:	2200      	movs	r2, #0
 800cd8a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800cd8c:	4b0a      	ldr	r3, [pc, #40]	@ (800cdb8 <vPortSetupTimerInterrupt+0x3c>)
 800cd8e:	681b      	ldr	r3, [r3, #0]
 800cd90:	4a0a      	ldr	r2, [pc, #40]	@ (800cdbc <vPortSetupTimerInterrupt+0x40>)
 800cd92:	fba2 2303 	umull	r2, r3, r2, r3
 800cd96:	099b      	lsrs	r3, r3, #6
 800cd98:	4a09      	ldr	r2, [pc, #36]	@ (800cdc0 <vPortSetupTimerInterrupt+0x44>)
 800cd9a:	3b01      	subs	r3, #1
 800cd9c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800cd9e:	4b04      	ldr	r3, [pc, #16]	@ (800cdb0 <vPortSetupTimerInterrupt+0x34>)
 800cda0:	2207      	movs	r2, #7
 800cda2:	601a      	str	r2, [r3, #0]
}
 800cda4:	bf00      	nop
 800cda6:	46bd      	mov	sp, r7
 800cda8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdac:	4770      	bx	lr
 800cdae:	bf00      	nop
 800cdb0:	e000e010 	.word	0xe000e010
 800cdb4:	e000e018 	.word	0xe000e018
 800cdb8:	20000020 	.word	0x20000020
 800cdbc:	10624dd3 	.word	0x10624dd3
 800cdc0:	e000e014 	.word	0xe000e014

0800cdc4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800cdc4:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 800cdd4 <vPortEnableVFP+0x10>
 800cdc8:	6801      	ldr	r1, [r0, #0]
 800cdca:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800cdce:	6001      	str	r1, [r0, #0]
 800cdd0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800cdd2:	bf00      	nop
 800cdd4:	e000ed88 	.word	0xe000ed88

0800cdd8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800cdd8:	b480      	push	{r7}
 800cdda:	b085      	sub	sp, #20
 800cddc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800cdde:	f3ef 8305 	mrs	r3, IPSR
 800cde2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800cde4:	68fb      	ldr	r3, [r7, #12]
 800cde6:	2b0f      	cmp	r3, #15
 800cde8:	d915      	bls.n	800ce16 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800cdea:	4a18      	ldr	r2, [pc, #96]	@ (800ce4c <vPortValidateInterruptPriority+0x74>)
 800cdec:	68fb      	ldr	r3, [r7, #12]
 800cdee:	4413      	add	r3, r2
 800cdf0:	781b      	ldrb	r3, [r3, #0]
 800cdf2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800cdf4:	4b16      	ldr	r3, [pc, #88]	@ (800ce50 <vPortValidateInterruptPriority+0x78>)
 800cdf6:	781b      	ldrb	r3, [r3, #0]
 800cdf8:	7afa      	ldrb	r2, [r7, #11]
 800cdfa:	429a      	cmp	r2, r3
 800cdfc:	d20b      	bcs.n	800ce16 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800cdfe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ce02:	f383 8811 	msr	BASEPRI, r3
 800ce06:	f3bf 8f6f 	isb	sy
 800ce0a:	f3bf 8f4f 	dsb	sy
 800ce0e:	607b      	str	r3, [r7, #4]
}
 800ce10:	bf00      	nop
 800ce12:	bf00      	nop
 800ce14:	e7fd      	b.n	800ce12 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800ce16:	4b0f      	ldr	r3, [pc, #60]	@ (800ce54 <vPortValidateInterruptPriority+0x7c>)
 800ce18:	681b      	ldr	r3, [r3, #0]
 800ce1a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800ce1e:	4b0e      	ldr	r3, [pc, #56]	@ (800ce58 <vPortValidateInterruptPriority+0x80>)
 800ce20:	681b      	ldr	r3, [r3, #0]
 800ce22:	429a      	cmp	r2, r3
 800ce24:	d90b      	bls.n	800ce3e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 800ce26:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ce2a:	f383 8811 	msr	BASEPRI, r3
 800ce2e:	f3bf 8f6f 	isb	sy
 800ce32:	f3bf 8f4f 	dsb	sy
 800ce36:	603b      	str	r3, [r7, #0]
}
 800ce38:	bf00      	nop
 800ce3a:	bf00      	nop
 800ce3c:	e7fd      	b.n	800ce3a <vPortValidateInterruptPriority+0x62>
	}
 800ce3e:	bf00      	nop
 800ce40:	3714      	adds	r7, #20
 800ce42:	46bd      	mov	sp, r7
 800ce44:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce48:	4770      	bx	lr
 800ce4a:	bf00      	nop
 800ce4c:	e000e3f0 	.word	0xe000e3f0
 800ce50:	20006b04 	.word	0x20006b04
 800ce54:	e000ed0c 	.word	0xe000ed0c
 800ce58:	20006b08 	.word	0x20006b08

0800ce5c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800ce5c:	b580      	push	{r7, lr}
 800ce5e:	b08a      	sub	sp, #40	@ 0x28
 800ce60:	af00      	add	r7, sp, #0
 800ce62:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800ce64:	2300      	movs	r3, #0
 800ce66:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800ce68:	f7fe fd4e 	bl	800b908 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800ce6c:	4b5c      	ldr	r3, [pc, #368]	@ (800cfe0 <pvPortMalloc+0x184>)
 800ce6e:	681b      	ldr	r3, [r3, #0]
 800ce70:	2b00      	cmp	r3, #0
 800ce72:	d101      	bne.n	800ce78 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800ce74:	f000 f924 	bl	800d0c0 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800ce78:	4b5a      	ldr	r3, [pc, #360]	@ (800cfe4 <pvPortMalloc+0x188>)
 800ce7a:	681a      	ldr	r2, [r3, #0]
 800ce7c:	687b      	ldr	r3, [r7, #4]
 800ce7e:	4013      	ands	r3, r2
 800ce80:	2b00      	cmp	r3, #0
 800ce82:	f040 8095 	bne.w	800cfb0 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800ce86:	687b      	ldr	r3, [r7, #4]
 800ce88:	2b00      	cmp	r3, #0
 800ce8a:	d01e      	beq.n	800ceca <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800ce8c:	2208      	movs	r2, #8
 800ce8e:	687b      	ldr	r3, [r7, #4]
 800ce90:	4413      	add	r3, r2
 800ce92:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800ce94:	687b      	ldr	r3, [r7, #4]
 800ce96:	f003 0307 	and.w	r3, r3, #7
 800ce9a:	2b00      	cmp	r3, #0
 800ce9c:	d015      	beq.n	800ceca <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800ce9e:	687b      	ldr	r3, [r7, #4]
 800cea0:	f023 0307 	bic.w	r3, r3, #7
 800cea4:	3308      	adds	r3, #8
 800cea6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800cea8:	687b      	ldr	r3, [r7, #4]
 800ceaa:	f003 0307 	and.w	r3, r3, #7
 800ceae:	2b00      	cmp	r3, #0
 800ceb0:	d00b      	beq.n	800ceca <pvPortMalloc+0x6e>
	__asm volatile
 800ceb2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ceb6:	f383 8811 	msr	BASEPRI, r3
 800ceba:	f3bf 8f6f 	isb	sy
 800cebe:	f3bf 8f4f 	dsb	sy
 800cec2:	617b      	str	r3, [r7, #20]
}
 800cec4:	bf00      	nop
 800cec6:	bf00      	nop
 800cec8:	e7fd      	b.n	800cec6 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800ceca:	687b      	ldr	r3, [r7, #4]
 800cecc:	2b00      	cmp	r3, #0
 800cece:	d06f      	beq.n	800cfb0 <pvPortMalloc+0x154>
 800ced0:	4b45      	ldr	r3, [pc, #276]	@ (800cfe8 <pvPortMalloc+0x18c>)
 800ced2:	681b      	ldr	r3, [r3, #0]
 800ced4:	687a      	ldr	r2, [r7, #4]
 800ced6:	429a      	cmp	r2, r3
 800ced8:	d86a      	bhi.n	800cfb0 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800ceda:	4b44      	ldr	r3, [pc, #272]	@ (800cfec <pvPortMalloc+0x190>)
 800cedc:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800cede:	4b43      	ldr	r3, [pc, #268]	@ (800cfec <pvPortMalloc+0x190>)
 800cee0:	681b      	ldr	r3, [r3, #0]
 800cee2:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800cee4:	e004      	b.n	800cef0 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 800cee6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cee8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800ceea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ceec:	681b      	ldr	r3, [r3, #0]
 800ceee:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800cef0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cef2:	685b      	ldr	r3, [r3, #4]
 800cef4:	687a      	ldr	r2, [r7, #4]
 800cef6:	429a      	cmp	r2, r3
 800cef8:	d903      	bls.n	800cf02 <pvPortMalloc+0xa6>
 800cefa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cefc:	681b      	ldr	r3, [r3, #0]
 800cefe:	2b00      	cmp	r3, #0
 800cf00:	d1f1      	bne.n	800cee6 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800cf02:	4b37      	ldr	r3, [pc, #220]	@ (800cfe0 <pvPortMalloc+0x184>)
 800cf04:	681b      	ldr	r3, [r3, #0]
 800cf06:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800cf08:	429a      	cmp	r2, r3
 800cf0a:	d051      	beq.n	800cfb0 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800cf0c:	6a3b      	ldr	r3, [r7, #32]
 800cf0e:	681b      	ldr	r3, [r3, #0]
 800cf10:	2208      	movs	r2, #8
 800cf12:	4413      	add	r3, r2
 800cf14:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800cf16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cf18:	681a      	ldr	r2, [r3, #0]
 800cf1a:	6a3b      	ldr	r3, [r7, #32]
 800cf1c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800cf1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cf20:	685a      	ldr	r2, [r3, #4]
 800cf22:	687b      	ldr	r3, [r7, #4]
 800cf24:	1ad2      	subs	r2, r2, r3
 800cf26:	2308      	movs	r3, #8
 800cf28:	005b      	lsls	r3, r3, #1
 800cf2a:	429a      	cmp	r2, r3
 800cf2c:	d920      	bls.n	800cf70 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800cf2e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800cf30:	687b      	ldr	r3, [r7, #4]
 800cf32:	4413      	add	r3, r2
 800cf34:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800cf36:	69bb      	ldr	r3, [r7, #24]
 800cf38:	f003 0307 	and.w	r3, r3, #7
 800cf3c:	2b00      	cmp	r3, #0
 800cf3e:	d00b      	beq.n	800cf58 <pvPortMalloc+0xfc>
	__asm volatile
 800cf40:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cf44:	f383 8811 	msr	BASEPRI, r3
 800cf48:	f3bf 8f6f 	isb	sy
 800cf4c:	f3bf 8f4f 	dsb	sy
 800cf50:	613b      	str	r3, [r7, #16]
}
 800cf52:	bf00      	nop
 800cf54:	bf00      	nop
 800cf56:	e7fd      	b.n	800cf54 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800cf58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cf5a:	685a      	ldr	r2, [r3, #4]
 800cf5c:	687b      	ldr	r3, [r7, #4]
 800cf5e:	1ad2      	subs	r2, r2, r3
 800cf60:	69bb      	ldr	r3, [r7, #24]
 800cf62:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800cf64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cf66:	687a      	ldr	r2, [r7, #4]
 800cf68:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800cf6a:	69b8      	ldr	r0, [r7, #24]
 800cf6c:	f000 f90a 	bl	800d184 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800cf70:	4b1d      	ldr	r3, [pc, #116]	@ (800cfe8 <pvPortMalloc+0x18c>)
 800cf72:	681a      	ldr	r2, [r3, #0]
 800cf74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cf76:	685b      	ldr	r3, [r3, #4]
 800cf78:	1ad3      	subs	r3, r2, r3
 800cf7a:	4a1b      	ldr	r2, [pc, #108]	@ (800cfe8 <pvPortMalloc+0x18c>)
 800cf7c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800cf7e:	4b1a      	ldr	r3, [pc, #104]	@ (800cfe8 <pvPortMalloc+0x18c>)
 800cf80:	681a      	ldr	r2, [r3, #0]
 800cf82:	4b1b      	ldr	r3, [pc, #108]	@ (800cff0 <pvPortMalloc+0x194>)
 800cf84:	681b      	ldr	r3, [r3, #0]
 800cf86:	429a      	cmp	r2, r3
 800cf88:	d203      	bcs.n	800cf92 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800cf8a:	4b17      	ldr	r3, [pc, #92]	@ (800cfe8 <pvPortMalloc+0x18c>)
 800cf8c:	681b      	ldr	r3, [r3, #0]
 800cf8e:	4a18      	ldr	r2, [pc, #96]	@ (800cff0 <pvPortMalloc+0x194>)
 800cf90:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800cf92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cf94:	685a      	ldr	r2, [r3, #4]
 800cf96:	4b13      	ldr	r3, [pc, #76]	@ (800cfe4 <pvPortMalloc+0x188>)
 800cf98:	681b      	ldr	r3, [r3, #0]
 800cf9a:	431a      	orrs	r2, r3
 800cf9c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cf9e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800cfa0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cfa2:	2200      	movs	r2, #0
 800cfa4:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800cfa6:	4b13      	ldr	r3, [pc, #76]	@ (800cff4 <pvPortMalloc+0x198>)
 800cfa8:	681b      	ldr	r3, [r3, #0]
 800cfaa:	3301      	adds	r3, #1
 800cfac:	4a11      	ldr	r2, [pc, #68]	@ (800cff4 <pvPortMalloc+0x198>)
 800cfae:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800cfb0:	f7fe fcb8 	bl	800b924 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800cfb4:	69fb      	ldr	r3, [r7, #28]
 800cfb6:	f003 0307 	and.w	r3, r3, #7
 800cfba:	2b00      	cmp	r3, #0
 800cfbc:	d00b      	beq.n	800cfd6 <pvPortMalloc+0x17a>
	__asm volatile
 800cfbe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cfc2:	f383 8811 	msr	BASEPRI, r3
 800cfc6:	f3bf 8f6f 	isb	sy
 800cfca:	f3bf 8f4f 	dsb	sy
 800cfce:	60fb      	str	r3, [r7, #12]
}
 800cfd0:	bf00      	nop
 800cfd2:	bf00      	nop
 800cfd4:	e7fd      	b.n	800cfd2 <pvPortMalloc+0x176>
	return pvReturn;
 800cfd6:	69fb      	ldr	r3, [r7, #28]
}
 800cfd8:	4618      	mov	r0, r3
 800cfda:	3728      	adds	r7, #40	@ 0x28
 800cfdc:	46bd      	mov	sp, r7
 800cfde:	bd80      	pop	{r7, pc}
 800cfe0:	200076cc 	.word	0x200076cc
 800cfe4:	200076e0 	.word	0x200076e0
 800cfe8:	200076d0 	.word	0x200076d0
 800cfec:	200076c4 	.word	0x200076c4
 800cff0:	200076d4 	.word	0x200076d4
 800cff4:	200076d8 	.word	0x200076d8

0800cff8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800cff8:	b580      	push	{r7, lr}
 800cffa:	b086      	sub	sp, #24
 800cffc:	af00      	add	r7, sp, #0
 800cffe:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800d000:	687b      	ldr	r3, [r7, #4]
 800d002:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800d004:	687b      	ldr	r3, [r7, #4]
 800d006:	2b00      	cmp	r3, #0
 800d008:	d04f      	beq.n	800d0aa <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800d00a:	2308      	movs	r3, #8
 800d00c:	425b      	negs	r3, r3
 800d00e:	697a      	ldr	r2, [r7, #20]
 800d010:	4413      	add	r3, r2
 800d012:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800d014:	697b      	ldr	r3, [r7, #20]
 800d016:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800d018:	693b      	ldr	r3, [r7, #16]
 800d01a:	685a      	ldr	r2, [r3, #4]
 800d01c:	4b25      	ldr	r3, [pc, #148]	@ (800d0b4 <vPortFree+0xbc>)
 800d01e:	681b      	ldr	r3, [r3, #0]
 800d020:	4013      	ands	r3, r2
 800d022:	2b00      	cmp	r3, #0
 800d024:	d10b      	bne.n	800d03e <vPortFree+0x46>
	__asm volatile
 800d026:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d02a:	f383 8811 	msr	BASEPRI, r3
 800d02e:	f3bf 8f6f 	isb	sy
 800d032:	f3bf 8f4f 	dsb	sy
 800d036:	60fb      	str	r3, [r7, #12]
}
 800d038:	bf00      	nop
 800d03a:	bf00      	nop
 800d03c:	e7fd      	b.n	800d03a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800d03e:	693b      	ldr	r3, [r7, #16]
 800d040:	681b      	ldr	r3, [r3, #0]
 800d042:	2b00      	cmp	r3, #0
 800d044:	d00b      	beq.n	800d05e <vPortFree+0x66>
	__asm volatile
 800d046:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d04a:	f383 8811 	msr	BASEPRI, r3
 800d04e:	f3bf 8f6f 	isb	sy
 800d052:	f3bf 8f4f 	dsb	sy
 800d056:	60bb      	str	r3, [r7, #8]
}
 800d058:	bf00      	nop
 800d05a:	bf00      	nop
 800d05c:	e7fd      	b.n	800d05a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800d05e:	693b      	ldr	r3, [r7, #16]
 800d060:	685a      	ldr	r2, [r3, #4]
 800d062:	4b14      	ldr	r3, [pc, #80]	@ (800d0b4 <vPortFree+0xbc>)
 800d064:	681b      	ldr	r3, [r3, #0]
 800d066:	4013      	ands	r3, r2
 800d068:	2b00      	cmp	r3, #0
 800d06a:	d01e      	beq.n	800d0aa <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800d06c:	693b      	ldr	r3, [r7, #16]
 800d06e:	681b      	ldr	r3, [r3, #0]
 800d070:	2b00      	cmp	r3, #0
 800d072:	d11a      	bne.n	800d0aa <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800d074:	693b      	ldr	r3, [r7, #16]
 800d076:	685a      	ldr	r2, [r3, #4]
 800d078:	4b0e      	ldr	r3, [pc, #56]	@ (800d0b4 <vPortFree+0xbc>)
 800d07a:	681b      	ldr	r3, [r3, #0]
 800d07c:	43db      	mvns	r3, r3
 800d07e:	401a      	ands	r2, r3
 800d080:	693b      	ldr	r3, [r7, #16]
 800d082:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800d084:	f7fe fc40 	bl	800b908 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800d088:	693b      	ldr	r3, [r7, #16]
 800d08a:	685a      	ldr	r2, [r3, #4]
 800d08c:	4b0a      	ldr	r3, [pc, #40]	@ (800d0b8 <vPortFree+0xc0>)
 800d08e:	681b      	ldr	r3, [r3, #0]
 800d090:	4413      	add	r3, r2
 800d092:	4a09      	ldr	r2, [pc, #36]	@ (800d0b8 <vPortFree+0xc0>)
 800d094:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800d096:	6938      	ldr	r0, [r7, #16]
 800d098:	f000 f874 	bl	800d184 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800d09c:	4b07      	ldr	r3, [pc, #28]	@ (800d0bc <vPortFree+0xc4>)
 800d09e:	681b      	ldr	r3, [r3, #0]
 800d0a0:	3301      	adds	r3, #1
 800d0a2:	4a06      	ldr	r2, [pc, #24]	@ (800d0bc <vPortFree+0xc4>)
 800d0a4:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800d0a6:	f7fe fc3d 	bl	800b924 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800d0aa:	bf00      	nop
 800d0ac:	3718      	adds	r7, #24
 800d0ae:	46bd      	mov	sp, r7
 800d0b0:	bd80      	pop	{r7, pc}
 800d0b2:	bf00      	nop
 800d0b4:	200076e0 	.word	0x200076e0
 800d0b8:	200076d0 	.word	0x200076d0
 800d0bc:	200076dc 	.word	0x200076dc

0800d0c0 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800d0c0:	b480      	push	{r7}
 800d0c2:	b085      	sub	sp, #20
 800d0c4:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800d0c6:	f640 33b8 	movw	r3, #3000	@ 0xbb8
 800d0ca:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800d0cc:	4b27      	ldr	r3, [pc, #156]	@ (800d16c <prvHeapInit+0xac>)
 800d0ce:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800d0d0:	68fb      	ldr	r3, [r7, #12]
 800d0d2:	f003 0307 	and.w	r3, r3, #7
 800d0d6:	2b00      	cmp	r3, #0
 800d0d8:	d00c      	beq.n	800d0f4 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800d0da:	68fb      	ldr	r3, [r7, #12]
 800d0dc:	3307      	adds	r3, #7
 800d0de:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800d0e0:	68fb      	ldr	r3, [r7, #12]
 800d0e2:	f023 0307 	bic.w	r3, r3, #7
 800d0e6:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800d0e8:	68ba      	ldr	r2, [r7, #8]
 800d0ea:	68fb      	ldr	r3, [r7, #12]
 800d0ec:	1ad3      	subs	r3, r2, r3
 800d0ee:	4a1f      	ldr	r2, [pc, #124]	@ (800d16c <prvHeapInit+0xac>)
 800d0f0:	4413      	add	r3, r2
 800d0f2:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800d0f4:	68fb      	ldr	r3, [r7, #12]
 800d0f6:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800d0f8:	4a1d      	ldr	r2, [pc, #116]	@ (800d170 <prvHeapInit+0xb0>)
 800d0fa:	687b      	ldr	r3, [r7, #4]
 800d0fc:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800d0fe:	4b1c      	ldr	r3, [pc, #112]	@ (800d170 <prvHeapInit+0xb0>)
 800d100:	2200      	movs	r2, #0
 800d102:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800d104:	687b      	ldr	r3, [r7, #4]
 800d106:	68ba      	ldr	r2, [r7, #8]
 800d108:	4413      	add	r3, r2
 800d10a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800d10c:	2208      	movs	r2, #8
 800d10e:	68fb      	ldr	r3, [r7, #12]
 800d110:	1a9b      	subs	r3, r3, r2
 800d112:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800d114:	68fb      	ldr	r3, [r7, #12]
 800d116:	f023 0307 	bic.w	r3, r3, #7
 800d11a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800d11c:	68fb      	ldr	r3, [r7, #12]
 800d11e:	4a15      	ldr	r2, [pc, #84]	@ (800d174 <prvHeapInit+0xb4>)
 800d120:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800d122:	4b14      	ldr	r3, [pc, #80]	@ (800d174 <prvHeapInit+0xb4>)
 800d124:	681b      	ldr	r3, [r3, #0]
 800d126:	2200      	movs	r2, #0
 800d128:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800d12a:	4b12      	ldr	r3, [pc, #72]	@ (800d174 <prvHeapInit+0xb4>)
 800d12c:	681b      	ldr	r3, [r3, #0]
 800d12e:	2200      	movs	r2, #0
 800d130:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800d132:	687b      	ldr	r3, [r7, #4]
 800d134:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800d136:	683b      	ldr	r3, [r7, #0]
 800d138:	68fa      	ldr	r2, [r7, #12]
 800d13a:	1ad2      	subs	r2, r2, r3
 800d13c:	683b      	ldr	r3, [r7, #0]
 800d13e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800d140:	4b0c      	ldr	r3, [pc, #48]	@ (800d174 <prvHeapInit+0xb4>)
 800d142:	681a      	ldr	r2, [r3, #0]
 800d144:	683b      	ldr	r3, [r7, #0]
 800d146:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800d148:	683b      	ldr	r3, [r7, #0]
 800d14a:	685b      	ldr	r3, [r3, #4]
 800d14c:	4a0a      	ldr	r2, [pc, #40]	@ (800d178 <prvHeapInit+0xb8>)
 800d14e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800d150:	683b      	ldr	r3, [r7, #0]
 800d152:	685b      	ldr	r3, [r3, #4]
 800d154:	4a09      	ldr	r2, [pc, #36]	@ (800d17c <prvHeapInit+0xbc>)
 800d156:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800d158:	4b09      	ldr	r3, [pc, #36]	@ (800d180 <prvHeapInit+0xc0>)
 800d15a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800d15e:	601a      	str	r2, [r3, #0]
}
 800d160:	bf00      	nop
 800d162:	3714      	adds	r7, #20
 800d164:	46bd      	mov	sp, r7
 800d166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d16a:	4770      	bx	lr
 800d16c:	20006b0c 	.word	0x20006b0c
 800d170:	200076c4 	.word	0x200076c4
 800d174:	200076cc 	.word	0x200076cc
 800d178:	200076d4 	.word	0x200076d4
 800d17c:	200076d0 	.word	0x200076d0
 800d180:	200076e0 	.word	0x200076e0

0800d184 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800d184:	b480      	push	{r7}
 800d186:	b085      	sub	sp, #20
 800d188:	af00      	add	r7, sp, #0
 800d18a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800d18c:	4b28      	ldr	r3, [pc, #160]	@ (800d230 <prvInsertBlockIntoFreeList+0xac>)
 800d18e:	60fb      	str	r3, [r7, #12]
 800d190:	e002      	b.n	800d198 <prvInsertBlockIntoFreeList+0x14>
 800d192:	68fb      	ldr	r3, [r7, #12]
 800d194:	681b      	ldr	r3, [r3, #0]
 800d196:	60fb      	str	r3, [r7, #12]
 800d198:	68fb      	ldr	r3, [r7, #12]
 800d19a:	681b      	ldr	r3, [r3, #0]
 800d19c:	687a      	ldr	r2, [r7, #4]
 800d19e:	429a      	cmp	r2, r3
 800d1a0:	d8f7      	bhi.n	800d192 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800d1a2:	68fb      	ldr	r3, [r7, #12]
 800d1a4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800d1a6:	68fb      	ldr	r3, [r7, #12]
 800d1a8:	685b      	ldr	r3, [r3, #4]
 800d1aa:	68ba      	ldr	r2, [r7, #8]
 800d1ac:	4413      	add	r3, r2
 800d1ae:	687a      	ldr	r2, [r7, #4]
 800d1b0:	429a      	cmp	r2, r3
 800d1b2:	d108      	bne.n	800d1c6 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800d1b4:	68fb      	ldr	r3, [r7, #12]
 800d1b6:	685a      	ldr	r2, [r3, #4]
 800d1b8:	687b      	ldr	r3, [r7, #4]
 800d1ba:	685b      	ldr	r3, [r3, #4]
 800d1bc:	441a      	add	r2, r3
 800d1be:	68fb      	ldr	r3, [r7, #12]
 800d1c0:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800d1c2:	68fb      	ldr	r3, [r7, #12]
 800d1c4:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800d1c6:	687b      	ldr	r3, [r7, #4]
 800d1c8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800d1ca:	687b      	ldr	r3, [r7, #4]
 800d1cc:	685b      	ldr	r3, [r3, #4]
 800d1ce:	68ba      	ldr	r2, [r7, #8]
 800d1d0:	441a      	add	r2, r3
 800d1d2:	68fb      	ldr	r3, [r7, #12]
 800d1d4:	681b      	ldr	r3, [r3, #0]
 800d1d6:	429a      	cmp	r2, r3
 800d1d8:	d118      	bne.n	800d20c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800d1da:	68fb      	ldr	r3, [r7, #12]
 800d1dc:	681a      	ldr	r2, [r3, #0]
 800d1de:	4b15      	ldr	r3, [pc, #84]	@ (800d234 <prvInsertBlockIntoFreeList+0xb0>)
 800d1e0:	681b      	ldr	r3, [r3, #0]
 800d1e2:	429a      	cmp	r2, r3
 800d1e4:	d00d      	beq.n	800d202 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800d1e6:	687b      	ldr	r3, [r7, #4]
 800d1e8:	685a      	ldr	r2, [r3, #4]
 800d1ea:	68fb      	ldr	r3, [r7, #12]
 800d1ec:	681b      	ldr	r3, [r3, #0]
 800d1ee:	685b      	ldr	r3, [r3, #4]
 800d1f0:	441a      	add	r2, r3
 800d1f2:	687b      	ldr	r3, [r7, #4]
 800d1f4:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800d1f6:	68fb      	ldr	r3, [r7, #12]
 800d1f8:	681b      	ldr	r3, [r3, #0]
 800d1fa:	681a      	ldr	r2, [r3, #0]
 800d1fc:	687b      	ldr	r3, [r7, #4]
 800d1fe:	601a      	str	r2, [r3, #0]
 800d200:	e008      	b.n	800d214 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800d202:	4b0c      	ldr	r3, [pc, #48]	@ (800d234 <prvInsertBlockIntoFreeList+0xb0>)
 800d204:	681a      	ldr	r2, [r3, #0]
 800d206:	687b      	ldr	r3, [r7, #4]
 800d208:	601a      	str	r2, [r3, #0]
 800d20a:	e003      	b.n	800d214 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800d20c:	68fb      	ldr	r3, [r7, #12]
 800d20e:	681a      	ldr	r2, [r3, #0]
 800d210:	687b      	ldr	r3, [r7, #4]
 800d212:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800d214:	68fa      	ldr	r2, [r7, #12]
 800d216:	687b      	ldr	r3, [r7, #4]
 800d218:	429a      	cmp	r2, r3
 800d21a:	d002      	beq.n	800d222 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800d21c:	68fb      	ldr	r3, [r7, #12]
 800d21e:	687a      	ldr	r2, [r7, #4]
 800d220:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800d222:	bf00      	nop
 800d224:	3714      	adds	r7, #20
 800d226:	46bd      	mov	sp, r7
 800d228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d22c:	4770      	bx	lr
 800d22e:	bf00      	nop
 800d230:	200076c4 	.word	0x200076c4
 800d234:	200076cc 	.word	0x200076cc

0800d238 <rcl_get_zero_initialized_publisher>:
 800d238:	4b01      	ldr	r3, [pc, #4]	@ (800d240 <rcl_get_zero_initialized_publisher+0x8>)
 800d23a:	6818      	ldr	r0, [r3, #0]
 800d23c:	4770      	bx	lr
 800d23e:	bf00      	nop
 800d240:	0801d42c 	.word	0x0801d42c

0800d244 <rcl_publisher_init>:
 800d244:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d248:	b088      	sub	sp, #32
 800d24a:	9d10      	ldr	r5, [sp, #64]	@ 0x40
 800d24c:	2d00      	cmp	r5, #0
 800d24e:	d069      	beq.n	800d324 <rcl_publisher_init+0xe0>
 800d250:	f105 0950 	add.w	r9, r5, #80	@ 0x50
 800d254:	4604      	mov	r4, r0
 800d256:	4648      	mov	r0, r9
 800d258:	460e      	mov	r6, r1
 800d25a:	4690      	mov	r8, r2
 800d25c:	461f      	mov	r7, r3
 800d25e:	f001 f8b3 	bl	800e3c8 <rcutils_allocator_is_valid>
 800d262:	2800      	cmp	r0, #0
 800d264:	d05e      	beq.n	800d324 <rcl_publisher_init+0xe0>
 800d266:	2c00      	cmp	r4, #0
 800d268:	d05c      	beq.n	800d324 <rcl_publisher_init+0xe0>
 800d26a:	f8d4 a000 	ldr.w	sl, [r4]
 800d26e:	f1ba 0f00 	cmp.w	sl, #0
 800d272:	d004      	beq.n	800d27e <rcl_publisher_init+0x3a>
 800d274:	2764      	movs	r7, #100	@ 0x64
 800d276:	4638      	mov	r0, r7
 800d278:	b008      	add	sp, #32
 800d27a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d27e:	4630      	mov	r0, r6
 800d280:	f006 fdc4 	bl	8013e0c <rcl_node_is_valid>
 800d284:	2800      	cmp	r0, #0
 800d286:	d052      	beq.n	800d32e <rcl_publisher_init+0xea>
 800d288:	f1b8 0f00 	cmp.w	r8, #0
 800d28c:	d04a      	beq.n	800d324 <rcl_publisher_init+0xe0>
 800d28e:	2f00      	cmp	r7, #0
 800d290:	d048      	beq.n	800d324 <rcl_publisher_init+0xe0>
 800d292:	e9cd aa03 	strd	sl, sl, [sp, #12]
 800d296:	aa07      	add	r2, sp, #28
 800d298:	9205      	str	r2, [sp, #20]
 800d29a:	f105 0358 	add.w	r3, r5, #88	@ 0x58
 800d29e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800d2a2:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 800d2a6:	f8cd a01c 	str.w	sl, [sp, #28]
 800d2aa:	4639      	mov	r1, r7
 800d2ac:	e899 000c 	ldmia.w	r9, {r2, r3}
 800d2b0:	4630      	mov	r0, r6
 800d2b2:	f006 fdff 	bl	8013eb4 <rcl_node_resolve_name>
 800d2b6:	4607      	mov	r7, r0
 800d2b8:	2800      	cmp	r0, #0
 800d2ba:	d14f      	bne.n	800d35c <rcl_publisher_init+0x118>
 800d2bc:	6d2b      	ldr	r3, [r5, #80]	@ 0x50
 800d2be:	6e29      	ldr	r1, [r5, #96]	@ 0x60
 800d2c0:	20c8      	movs	r0, #200	@ 0xc8
 800d2c2:	4798      	blx	r3
 800d2c4:	6020      	str	r0, [r4, #0]
 800d2c6:	2800      	cmp	r0, #0
 800d2c8:	d04e      	beq.n	800d368 <rcl_publisher_init+0x124>
 800d2ca:	4630      	mov	r0, r6
 800d2cc:	f006 fdc0 	bl	8013e50 <rcl_node_get_rmw_handle>
 800d2d0:	f105 0364 	add.w	r3, r5, #100	@ 0x64
 800d2d4:	9300      	str	r3, [sp, #0]
 800d2d6:	9a07      	ldr	r2, [sp, #28]
 800d2d8:	6827      	ldr	r7, [r4, #0]
 800d2da:	462b      	mov	r3, r5
 800d2dc:	4641      	mov	r1, r8
 800d2de:	f001 f981 	bl	800e5e4 <rmw_create_publisher>
 800d2e2:	6823      	ldr	r3, [r4, #0]
 800d2e4:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4
 800d2e8:	f8d3 00c4 	ldr.w	r0, [r3, #196]	@ 0xc4
 800d2ec:	b370      	cbz	r0, 800d34c <rcl_publisher_init+0x108>
 800d2ee:	f103 0170 	add.w	r1, r3, #112	@ 0x70
 800d2f2:	f001 fa55 	bl	800e7a0 <rmw_publisher_get_actual_qos>
 800d2f6:	6823      	ldr	r3, [r4, #0]
 800d2f8:	4607      	mov	r7, r0
 800d2fa:	b9d0      	cbnz	r0, 800d332 <rcl_publisher_init+0xee>
 800d2fc:	f895 2048 	ldrb.w	r2, [r5, #72]	@ 0x48
 800d300:	f883 20b8 	strb.w	r2, [r3, #184]	@ 0xb8
 800d304:	4629      	mov	r1, r5
 800d306:	2270      	movs	r2, #112	@ 0x70
 800d308:	4618      	mov	r0, r3
 800d30a:	f00e fa0e 	bl	801b72a <memcpy>
 800d30e:	6832      	ldr	r2, [r6, #0]
 800d310:	f8c0 20c0 	str.w	r2, [r0, #192]	@ 0xc0
 800d314:	9807      	ldr	r0, [sp, #28]
 800d316:	6d6b      	ldr	r3, [r5, #84]	@ 0x54
 800d318:	6e29      	ldr	r1, [r5, #96]	@ 0x60
 800d31a:	4798      	blx	r3
 800d31c:	4638      	mov	r0, r7
 800d31e:	b008      	add	sp, #32
 800d320:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d324:	270b      	movs	r7, #11
 800d326:	4638      	mov	r0, r7
 800d328:	b008      	add	sp, #32
 800d32a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d32e:	27c8      	movs	r7, #200	@ 0xc8
 800d330:	e7a1      	b.n	800d276 <rcl_publisher_init+0x32>
 800d332:	b18b      	cbz	r3, 800d358 <rcl_publisher_init+0x114>
 800d334:	f8d3 20c4 	ldr.w	r2, [r3, #196]	@ 0xc4
 800d338:	b142      	cbz	r2, 800d34c <rcl_publisher_init+0x108>
 800d33a:	4630      	mov	r0, r6
 800d33c:	f006 fd88 	bl	8013e50 <rcl_node_get_rmw_handle>
 800d340:	6823      	ldr	r3, [r4, #0]
 800d342:	f8d3 10c4 	ldr.w	r1, [r3, #196]	@ 0xc4
 800d346:	f001 fa3b 	bl	800e7c0 <rmw_destroy_publisher>
 800d34a:	6823      	ldr	r3, [r4, #0]
 800d34c:	6d6a      	ldr	r2, [r5, #84]	@ 0x54
 800d34e:	6e29      	ldr	r1, [r5, #96]	@ 0x60
 800d350:	4618      	mov	r0, r3
 800d352:	4790      	blx	r2
 800d354:	2300      	movs	r3, #0
 800d356:	6023      	str	r3, [r4, #0]
 800d358:	2701      	movs	r7, #1
 800d35a:	e7db      	b.n	800d314 <rcl_publisher_init+0xd0>
 800d35c:	2867      	cmp	r0, #103	@ 0x67
 800d35e:	d0d9      	beq.n	800d314 <rcl_publisher_init+0xd0>
 800d360:	2869      	cmp	r0, #105	@ 0x69
 800d362:	d003      	beq.n	800d36c <rcl_publisher_init+0x128>
 800d364:	280a      	cmp	r0, #10
 800d366:	d1f7      	bne.n	800d358 <rcl_publisher_init+0x114>
 800d368:	270a      	movs	r7, #10
 800d36a:	e7d3      	b.n	800d314 <rcl_publisher_init+0xd0>
 800d36c:	2767      	movs	r7, #103	@ 0x67
 800d36e:	e7d1      	b.n	800d314 <rcl_publisher_init+0xd0>

0800d370 <rcl_publisher_get_default_options>:
 800d370:	b570      	push	{r4, r5, r6, lr}
 800d372:	4d14      	ldr	r5, [pc, #80]	@ (800d3c4 <rcl_publisher_get_default_options+0x54>)
 800d374:	4914      	ldr	r1, [pc, #80]	@ (800d3c8 <rcl_publisher_get_default_options+0x58>)
 800d376:	b088      	sub	sp, #32
 800d378:	4604      	mov	r4, r0
 800d37a:	2250      	movs	r2, #80	@ 0x50
 800d37c:	4628      	mov	r0, r5
 800d37e:	f00e f9d4 	bl	801b72a <memcpy>
 800d382:	a802      	add	r0, sp, #8
 800d384:	f001 f812 	bl	800e3ac <rcutils_get_default_allocator>
 800d388:	f10d 0c08 	add.w	ip, sp, #8
 800d38c:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800d390:	f105 0e50 	add.w	lr, r5, #80	@ 0x50
 800d394:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800d398:	466e      	mov	r6, sp
 800d39a:	f8dc 3000 	ldr.w	r3, [ip]
 800d39e:	f8ce 3000 	str.w	r3, [lr]
 800d3a2:	4630      	mov	r0, r6
 800d3a4:	f001 f8a0 	bl	800e4e8 <rmw_get_default_publisher_options>
 800d3a8:	e896 0003 	ldmia.w	r6, {r0, r1}
 800d3ac:	f105 0364 	add.w	r3, r5, #100	@ 0x64
 800d3b0:	e883 0003 	stmia.w	r3, {r0, r1}
 800d3b4:	2270      	movs	r2, #112	@ 0x70
 800d3b6:	4629      	mov	r1, r5
 800d3b8:	4620      	mov	r0, r4
 800d3ba:	f00e f9b6 	bl	801b72a <memcpy>
 800d3be:	4620      	mov	r0, r4
 800d3c0:	b008      	add	sp, #32
 800d3c2:	bd70      	pop	{r4, r5, r6, pc}
 800d3c4:	200076e8 	.word	0x200076e8
 800d3c8:	0801d430 	.word	0x0801d430

0800d3cc <rcl_publish>:
 800d3cc:	b1f8      	cbz	r0, 800d40e <rcl_publish+0x42>
 800d3ce:	6803      	ldr	r3, [r0, #0]
 800d3d0:	b570      	push	{r4, r5, r6, lr}
 800d3d2:	4604      	mov	r4, r0
 800d3d4:	b1b3      	cbz	r3, 800d404 <rcl_publish+0x38>
 800d3d6:	4616      	mov	r6, r2
 800d3d8:	f8d3 20c4 	ldr.w	r2, [r3, #196]	@ 0xc4
 800d3dc:	b192      	cbz	r2, 800d404 <rcl_publish+0x38>
 800d3de:	f8d3 00c0 	ldr.w	r0, [r3, #192]	@ 0xc0
 800d3e2:	460d      	mov	r5, r1
 800d3e4:	f006 f938 	bl	8013658 <rcl_context_is_valid>
 800d3e8:	b160      	cbz	r0, 800d404 <rcl_publish+0x38>
 800d3ea:	6823      	ldr	r3, [r4, #0]
 800d3ec:	f8d3 00c4 	ldr.w	r0, [r3, #196]	@ 0xc4
 800d3f0:	b140      	cbz	r0, 800d404 <rcl_publish+0x38>
 800d3f2:	b155      	cbz	r5, 800d40a <rcl_publish+0x3e>
 800d3f4:	4632      	mov	r2, r6
 800d3f6:	4629      	mov	r1, r5
 800d3f8:	f001 f894 	bl	800e524 <rmw_publish>
 800d3fc:	3800      	subs	r0, #0
 800d3fe:	bf18      	it	ne
 800d400:	2001      	movne	r0, #1
 800d402:	bd70      	pop	{r4, r5, r6, pc}
 800d404:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 800d408:	bd70      	pop	{r4, r5, r6, pc}
 800d40a:	200b      	movs	r0, #11
 800d40c:	bd70      	pop	{r4, r5, r6, pc}
 800d40e:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 800d412:	4770      	bx	lr

0800d414 <rcl_publisher_is_valid>:
 800d414:	b1a0      	cbz	r0, 800d440 <rcl_publisher_is_valid+0x2c>
 800d416:	6803      	ldr	r3, [r0, #0]
 800d418:	b510      	push	{r4, lr}
 800d41a:	4604      	mov	r4, r0
 800d41c:	b173      	cbz	r3, 800d43c <rcl_publisher_is_valid+0x28>
 800d41e:	f8d3 20c4 	ldr.w	r2, [r3, #196]	@ 0xc4
 800d422:	b15a      	cbz	r2, 800d43c <rcl_publisher_is_valid+0x28>
 800d424:	f8d3 00c0 	ldr.w	r0, [r3, #192]	@ 0xc0
 800d428:	f006 f916 	bl	8013658 <rcl_context_is_valid>
 800d42c:	b130      	cbz	r0, 800d43c <rcl_publisher_is_valid+0x28>
 800d42e:	6823      	ldr	r3, [r4, #0]
 800d430:	f8d3 00c4 	ldr.w	r0, [r3, #196]	@ 0xc4
 800d434:	3800      	subs	r0, #0
 800d436:	bf18      	it	ne
 800d438:	2001      	movne	r0, #1
 800d43a:	bd10      	pop	{r4, pc}
 800d43c:	2000      	movs	r0, #0
 800d43e:	bd10      	pop	{r4, pc}
 800d440:	2000      	movs	r0, #0
 800d442:	4770      	bx	lr

0800d444 <rcl_publisher_is_valid_except_context>:
 800d444:	b130      	cbz	r0, 800d454 <rcl_publisher_is_valid_except_context+0x10>
 800d446:	6800      	ldr	r0, [r0, #0]
 800d448:	b120      	cbz	r0, 800d454 <rcl_publisher_is_valid_except_context+0x10>
 800d44a:	f8d0 00c4 	ldr.w	r0, [r0, #196]	@ 0xc4
 800d44e:	3800      	subs	r0, #0
 800d450:	bf18      	it	ne
 800d452:	2001      	movne	r0, #1
 800d454:	4770      	bx	lr
 800d456:	bf00      	nop

0800d458 <_rclc_check_for_new_data>:
 800d458:	2800      	cmp	r0, #0
 800d45a:	d046      	beq.n	800d4ea <_rclc_check_for_new_data+0x92>
 800d45c:	b510      	push	{r4, lr}
 800d45e:	7802      	ldrb	r2, [r0, #0]
 800d460:	b084      	sub	sp, #16
 800d462:	4603      	mov	r3, r0
 800d464:	2a0a      	cmp	r2, #10
 800d466:	d842      	bhi.n	800d4ee <_rclc_check_for_new_data+0x96>
 800d468:	e8df f002 	tbb	[pc, r2]
 800d46c:	14181212 	.word	0x14181212
 800d470:	06060614 	.word	0x06060614
 800d474:	2e1a      	.short	0x2e1a
 800d476:	16          	.byte	0x16
 800d477:	00          	.byte	0x00
 800d478:	6a0a      	ldr	r2, [r1, #32]
 800d47a:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800d47c:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 800d480:	2000      	movs	r0, #0
 800d482:	1a12      	subs	r2, r2, r0
 800d484:	bf18      	it	ne
 800d486:	2201      	movne	r2, #1
 800d488:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
 800d48c:	b004      	add	sp, #16
 800d48e:	bd10      	pop	{r4, pc}
 800d490:	680a      	ldr	r2, [r1, #0]
 800d492:	e7f2      	b.n	800d47a <_rclc_check_for_new_data+0x22>
 800d494:	698a      	ldr	r2, [r1, #24]
 800d496:	e7f0      	b.n	800d47a <_rclc_check_for_new_data+0x22>
 800d498:	688a      	ldr	r2, [r1, #8]
 800d49a:	e7ee      	b.n	800d47a <_rclc_check_for_new_data+0x22>
 800d49c:	690a      	ldr	r2, [r1, #16]
 800d49e:	e7ec      	b.n	800d47a <_rclc_check_for_new_data+0x22>
 800d4a0:	685c      	ldr	r4, [r3, #4]
 800d4a2:	4608      	mov	r0, r1
 800d4a4:	f104 0244 	add.w	r2, r4, #68	@ 0x44
 800d4a8:	f104 0143 	add.w	r1, r4, #67	@ 0x43
 800d4ac:	f104 0342 	add.w	r3, r4, #66	@ 0x42
 800d4b0:	e9cd 2101 	strd	r2, r1, [sp, #4]
 800d4b4:	9300      	str	r3, [sp, #0]
 800d4b6:	f104 0240 	add.w	r2, r4, #64	@ 0x40
 800d4ba:	f104 0341 	add.w	r3, r4, #65	@ 0x41
 800d4be:	f104 0110 	add.w	r1, r4, #16
 800d4c2:	f008 fbd1 	bl	8015c68 <rcl_action_client_wait_set_get_entities_ready>
 800d4c6:	e7e1      	b.n	800d48c <_rclc_check_for_new_data+0x34>
 800d4c8:	685c      	ldr	r4, [r3, #4]
 800d4ca:	f104 0223 	add.w	r2, r4, #35	@ 0x23
 800d4ce:	f104 0322 	add.w	r3, r4, #34	@ 0x22
 800d4d2:	e9cd 3200 	strd	r3, r2, [sp]
 800d4d6:	4608      	mov	r0, r1
 800d4d8:	f104 0321 	add.w	r3, r4, #33	@ 0x21
 800d4dc:	f104 0220 	add.w	r2, r4, #32
 800d4e0:	f104 0110 	add.w	r1, r4, #16
 800d4e4:	f008 fdd8 	bl	8016098 <rcl_action_server_wait_set_get_entities_ready>
 800d4e8:	e7d0      	b.n	800d48c <_rclc_check_for_new_data+0x34>
 800d4ea:	200b      	movs	r0, #11
 800d4ec:	4770      	bx	lr
 800d4ee:	2001      	movs	r0, #1
 800d4f0:	e7cc      	b.n	800d48c <_rclc_check_for_new_data+0x34>
 800d4f2:	bf00      	nop

0800d4f4 <_rclc_take_new_data>:
 800d4f4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d4f6:	b09b      	sub	sp, #108	@ 0x6c
 800d4f8:	2800      	cmp	r0, #0
 800d4fa:	f000 8088 	beq.w	800d60e <_rclc_take_new_data+0x11a>
 800d4fe:	7803      	ldrb	r3, [r0, #0]
 800d500:	4604      	mov	r4, r0
 800d502:	2b0a      	cmp	r3, #10
 800d504:	f200 8167 	bhi.w	800d7d6 <_rclc_take_new_data+0x2e2>
 800d508:	e8df f003 	tbb	[pc, r3]
 800d50c:	44152d2d 	.word	0x44152d2d
 800d510:	19191944 	.word	0x19191944
 800d514:	065a      	.short	0x065a
 800d516:	15          	.byte	0x15
 800d517:	00          	.byte	0x00
 800d518:	6840      	ldr	r0, [r0, #4]
 800d51a:	f890 3020 	ldrb.w	r3, [r0, #32]
 800d51e:	2b00      	cmp	r3, #0
 800d520:	f040 80b2 	bne.w	800d688 <_rclc_take_new_data+0x194>
 800d524:	f890 3022 	ldrb.w	r3, [r0, #34]	@ 0x22
 800d528:	2b00      	cmp	r3, #0
 800d52a:	f040 80e4 	bne.w	800d6f6 <_rclc_take_new_data+0x202>
 800d52e:	f890 3021 	ldrb.w	r3, [r0, #33]	@ 0x21
 800d532:	2b00      	cmp	r3, #0
 800d534:	d16f      	bne.n	800d616 <_rclc_take_new_data+0x122>
 800d536:	2500      	movs	r5, #0
 800d538:	4628      	mov	r0, r5
 800d53a:	b01b      	add	sp, #108	@ 0x6c
 800d53c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d53e:	6b42      	ldr	r2, [r0, #52]	@ 0x34
 800d540:	6a0b      	ldr	r3, [r1, #32]
 800d542:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d546:	2b00      	cmp	r3, #0
 800d548:	d0f5      	beq.n	800d536 <_rclc_take_new_data+0x42>
 800d54a:	e9d0 0201 	ldrd	r0, r2, [r0, #4]
 800d54e:	f104 0110 	add.w	r1, r4, #16
 800d552:	f006 fe59 	bl	8014208 <rcl_take_request>
 800d556:	4605      	mov	r5, r0
 800d558:	2800      	cmp	r0, #0
 800d55a:	d0ec      	beq.n	800d536 <_rclc_take_new_data+0x42>
 800d55c:	f240 2359 	movw	r3, #601	@ 0x259
 800d560:	4298      	cmp	r0, r3
 800d562:	d013      	beq.n	800d58c <_rclc_take_new_data+0x98>
 800d564:	e029      	b.n	800d5ba <_rclc_take_new_data+0xc6>
 800d566:	6b42      	ldr	r2, [r0, #52]	@ 0x34
 800d568:	680b      	ldr	r3, [r1, #0]
 800d56a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d56e:	2b00      	cmp	r3, #0
 800d570:	d0e1      	beq.n	800d536 <_rclc_take_new_data+0x42>
 800d572:	e9d0 0101 	ldrd	r0, r1, [r0, #4]
 800d576:	2300      	movs	r3, #0
 800d578:	aa0a      	add	r2, sp, #40	@ 0x28
 800d57a:	f006 ff83 	bl	8014484 <rcl_take>
 800d57e:	4605      	mov	r5, r0
 800d580:	2800      	cmp	r0, #0
 800d582:	d0d9      	beq.n	800d538 <_rclc_take_new_data+0x44>
 800d584:	f240 1391 	movw	r3, #401	@ 0x191
 800d588:	4298      	cmp	r0, r3
 800d58a:	d116      	bne.n	800d5ba <_rclc_take_new_data+0xc6>
 800d58c:	2300      	movs	r3, #0
 800d58e:	f884 3039 	strb.w	r3, [r4, #57]	@ 0x39
 800d592:	e7d1      	b.n	800d538 <_rclc_take_new_data+0x44>
 800d594:	6b42      	ldr	r2, [r0, #52]	@ 0x34
 800d596:	698b      	ldr	r3, [r1, #24]
 800d598:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d59c:	2b00      	cmp	r3, #0
 800d59e:	d0ca      	beq.n	800d536 <_rclc_take_new_data+0x42>
 800d5a0:	e9d0 0201 	ldrd	r0, r2, [r0, #4]
 800d5a4:	f104 0110 	add.w	r1, r4, #16
 800d5a8:	f005 ffe6 	bl	8013578 <rcl_take_response>
 800d5ac:	4605      	mov	r5, r0
 800d5ae:	2800      	cmp	r0, #0
 800d5b0:	d0c1      	beq.n	800d536 <_rclc_take_new_data+0x42>
 800d5b2:	f240 13f5 	movw	r3, #501	@ 0x1f5
 800d5b6:	4298      	cmp	r0, r3
 800d5b8:	d0be      	beq.n	800d538 <_rclc_take_new_data+0x44>
 800d5ba:	f000 ff29 	bl	800e410 <rcutils_reset_error>
 800d5be:	e7bb      	b.n	800d538 <_rclc_take_new_data+0x44>
 800d5c0:	6840      	ldr	r0, [r0, #4]
 800d5c2:	f890 3042 	ldrb.w	r3, [r0, #66]	@ 0x42
 800d5c6:	2b00      	cmp	r3, #0
 800d5c8:	d17d      	bne.n	800d6c6 <_rclc_take_new_data+0x1d2>
 800d5ca:	69c3      	ldr	r3, [r0, #28]
 800d5cc:	b11b      	cbz	r3, 800d5d6 <_rclc_take_new_data+0xe2>
 800d5ce:	f890 3040 	ldrb.w	r3, [r0, #64]	@ 0x40
 800d5d2:	2b00      	cmp	r3, #0
 800d5d4:	d144      	bne.n	800d660 <_rclc_take_new_data+0x16c>
 800d5d6:	f890 3044 	ldrb.w	r3, [r0, #68]	@ 0x44
 800d5da:	2b00      	cmp	r3, #0
 800d5dc:	f040 80ac 	bne.w	800d738 <_rclc_take_new_data+0x244>
 800d5e0:	f890 3043 	ldrb.w	r3, [r0, #67]	@ 0x43
 800d5e4:	2b00      	cmp	r3, #0
 800d5e6:	d0a6      	beq.n	800d536 <_rclc_take_new_data+0x42>
 800d5e8:	6ac2      	ldr	r2, [r0, #44]	@ 0x2c
 800d5ea:	a90a      	add	r1, sp, #40	@ 0x28
 800d5ec:	3010      	adds	r0, #16
 800d5ee:	f008 fa13 	bl	8015a18 <rcl_action_take_result_response>
 800d5f2:	4605      	mov	r5, r0
 800d5f4:	2800      	cmp	r0, #0
 800d5f6:	d1e0      	bne.n	800d5ba <_rclc_take_new_data+0xc6>
 800d5f8:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800d5fc:	6860      	ldr	r0, [r4, #4]
 800d5fe:	f008 fe6f 	bl	80162e0 <rclc_action_find_handle_by_result_request_sequence_number>
 800d602:	2800      	cmp	r0, #0
 800d604:	d098      	beq.n	800d538 <_rclc_take_new_data+0x44>
 800d606:	2301      	movs	r3, #1
 800d608:	f880 3023 	strb.w	r3, [r0, #35]	@ 0x23
 800d60c:	e794      	b.n	800d538 <_rclc_take_new_data+0x44>
 800d60e:	250b      	movs	r5, #11
 800d610:	4628      	mov	r0, r5
 800d612:	b01b      	add	sp, #108	@ 0x6c
 800d614:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d616:	ae04      	add	r6, sp, #16
 800d618:	aa0a      	add	r2, sp, #40	@ 0x28
 800d61a:	3010      	adds	r0, #16
 800d61c:	4631      	mov	r1, r6
 800d61e:	f008 fc6f 	bl	8015f00 <rcl_action_take_cancel_request>
 800d622:	4605      	mov	r5, r0
 800d624:	2800      	cmp	r0, #0
 800d626:	d1c8      	bne.n	800d5ba <_rclc_take_new_data+0xc6>
 800d628:	6860      	ldr	r0, [r4, #4]
 800d62a:	a90a      	add	r1, sp, #40	@ 0x28
 800d62c:	f008 fe16 	bl	801625c <rclc_action_find_goal_handle_by_uuid>
 800d630:	4607      	mov	r7, r0
 800d632:	2800      	cmp	r0, #0
 800d634:	f000 80bb 	beq.w	800d7ae <_rclc_take_new_data+0x2ba>
 800d638:	f990 0008 	ldrsb.w	r0, [r0, #8]
 800d63c:	2101      	movs	r1, #1
 800d63e:	f008 fd97 	bl	8016170 <rcl_action_transition_goal_state>
 800d642:	2803      	cmp	r0, #3
 800d644:	4684      	mov	ip, r0
 800d646:	f040 80a7 	bne.w	800d798 <_rclc_take_new_data+0x2a4>
 800d64a:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800d64c:	f107 0458 	add.w	r4, r7, #88	@ 0x58
 800d650:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800d652:	e896 0003 	ldmia.w	r6, {r0, r1}
 800d656:	e884 0003 	stmia.w	r4, {r0, r1}
 800d65a:	f887 c008 	strb.w	ip, [r7, #8]
 800d65e:	e76b      	b.n	800d538 <_rclc_take_new_data+0x44>
 800d660:	6a81      	ldr	r1, [r0, #40]	@ 0x28
 800d662:	3010      	adds	r0, #16
 800d664:	f008 fa58 	bl	8015b18 <rcl_action_take_feedback>
 800d668:	4605      	mov	r5, r0
 800d66a:	2800      	cmp	r0, #0
 800d66c:	d1a5      	bne.n	800d5ba <_rclc_take_new_data+0xc6>
 800d66e:	6860      	ldr	r0, [r4, #4]
 800d670:	6a81      	ldr	r1, [r0, #40]	@ 0x28
 800d672:	f008 fdf3 	bl	801625c <rclc_action_find_goal_handle_by_uuid>
 800d676:	4603      	mov	r3, r0
 800d678:	2800      	cmp	r0, #0
 800d67a:	f000 80a3 	beq.w	800d7c4 <_rclc_take_new_data+0x2d0>
 800d67e:	2201      	movs	r2, #1
 800d680:	6860      	ldr	r0, [r4, #4]
 800d682:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22
 800d686:	e7a6      	b.n	800d5d6 <_rclc_take_new_data+0xe2>
 800d688:	f008 fdc2 	bl	8016210 <rclc_action_take_goal_handle>
 800d68c:	4606      	mov	r6, r0
 800d68e:	6860      	ldr	r0, [r4, #4]
 800d690:	2e00      	cmp	r6, #0
 800d692:	f43f af47 	beq.w	800d524 <_rclc_take_new_data+0x30>
 800d696:	6070      	str	r0, [r6, #4]
 800d698:	69f2      	ldr	r2, [r6, #28]
 800d69a:	f106 0128 	add.w	r1, r6, #40	@ 0x28
 800d69e:	3010      	adds	r0, #16
 800d6a0:	f008 fb76 	bl	8015d90 <rcl_action_take_goal_request>
 800d6a4:	4605      	mov	r5, r0
 800d6a6:	2800      	cmp	r0, #0
 800d6a8:	f040 808e 	bne.w	800d7c8 <_rclc_take_new_data+0x2d4>
 800d6ac:	69f7      	ldr	r7, [r6, #28]
 800d6ae:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 800d6b0:	7235      	strb	r5, [r6, #8]
 800d6b2:	f8c6 0009 	str.w	r0, [r6, #9]
 800d6b6:	f8c6 100d 	str.w	r1, [r6, #13]
 800d6ba:	6860      	ldr	r0, [r4, #4]
 800d6bc:	f8c6 2011 	str.w	r2, [r6, #17]
 800d6c0:	f8c6 3015 	str.w	r3, [r6, #21]
 800d6c4:	e72e      	b.n	800d524 <_rclc_take_new_data+0x30>
 800d6c6:	aa04      	add	r2, sp, #16
 800d6c8:	a90a      	add	r1, sp, #40	@ 0x28
 800d6ca:	3010      	adds	r0, #16
 800d6cc:	f008 f92c 	bl	8015928 <rcl_action_take_goal_response>
 800d6d0:	4605      	mov	r5, r0
 800d6d2:	2800      	cmp	r0, #0
 800d6d4:	f47f af71 	bne.w	800d5ba <_rclc_take_new_data+0xc6>
 800d6d8:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800d6dc:	6860      	ldr	r0, [r4, #4]
 800d6de:	f008 fded 	bl	80162bc <rclc_action_find_handle_by_goal_request_sequence_number>
 800d6e2:	b130      	cbz	r0, 800d6f2 <_rclc_take_new_data+0x1fe>
 800d6e4:	f89d 3010 	ldrb.w	r3, [sp, #16]
 800d6e8:	f880 3021 	strb.w	r3, [r0, #33]	@ 0x21
 800d6ec:	2201      	movs	r2, #1
 800d6ee:	f880 2020 	strb.w	r2, [r0, #32]
 800d6f2:	6860      	ldr	r0, [r4, #4]
 800d6f4:	e769      	b.n	800d5ca <_rclc_take_new_data+0xd6>
 800d6f6:	aa04      	add	r2, sp, #16
 800d6f8:	3010      	adds	r0, #16
 800d6fa:	a90a      	add	r1, sp, #40	@ 0x28
 800d6fc:	f008 fbc0 	bl	8015e80 <rcl_action_take_result_request>
 800d700:	4605      	mov	r5, r0
 800d702:	2800      	cmp	r0, #0
 800d704:	f47f af59 	bne.w	800d5ba <_rclc_take_new_data+0xc6>
 800d708:	6860      	ldr	r0, [r4, #4]
 800d70a:	a904      	add	r1, sp, #16
 800d70c:	f008 fda6 	bl	801625c <rclc_action_find_goal_handle_by_uuid>
 800d710:	4607      	mov	r7, r0
 800d712:	b160      	cbz	r0, 800d72e <_rclc_take_new_data+0x23a>
 800d714:	ad0a      	add	r5, sp, #40	@ 0x28
 800d716:	f100 0640 	add.w	r6, r0, #64	@ 0x40
 800d71a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800d71c:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 800d71e:	e895 0003 	ldmia.w	r5, {r0, r1}
 800d722:	f04f 0c02 	mov.w	ip, #2
 800d726:	e886 0003 	stmia.w	r6, {r0, r1}
 800d72a:	f887 c008 	strb.w	ip, [r7, #8]
 800d72e:	6860      	ldr	r0, [r4, #4]
 800d730:	2300      	movs	r3, #0
 800d732:	f880 3022 	strb.w	r3, [r0, #34]	@ 0x22
 800d736:	e6fa      	b.n	800d52e <_rclc_take_new_data+0x3a>
 800d738:	f100 0230 	add.w	r2, r0, #48	@ 0x30
 800d73c:	a90a      	add	r1, sp, #40	@ 0x28
 800d73e:	3010      	adds	r0, #16
 800d740:	f008 f9aa 	bl	8015a98 <rcl_action_take_cancel_response>
 800d744:	4605      	mov	r5, r0
 800d746:	2800      	cmp	r0, #0
 800d748:	f47f af37 	bne.w	800d5ba <_rclc_take_new_data+0xc6>
 800d74c:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800d750:	6860      	ldr	r0, [r4, #4]
 800d752:	f008 fdd7 	bl	8016304 <rclc_action_find_handle_by_cancel_request_sequence_number>
 800d756:	4606      	mov	r6, r0
 800d758:	6860      	ldr	r0, [r4, #4]
 800d75a:	2e00      	cmp	r6, #0
 800d75c:	f43f af40 	beq.w	800d5e0 <_rclc_take_new_data+0xec>
 800d760:	6b83      	ldr	r3, [r0, #56]	@ 0x38
 800d762:	2701      	movs	r7, #1
 800d764:	84b7      	strh	r7, [r6, #36]	@ 0x24
 800d766:	2b00      	cmp	r3, #0
 800d768:	f43f af3a 	beq.w	800d5e0 <_rclc_take_new_data+0xec>
 800d76c:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 800d76e:	eb05 0145 	add.w	r1, r5, r5, lsl #1
 800d772:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
 800d776:	f008 fd71 	bl	801625c <rclc_action_find_goal_handle_by_uuid>
 800d77a:	b138      	cbz	r0, 800d78c <_rclc_take_new_data+0x298>
 800d77c:	6860      	ldr	r0, [r4, #4]
 800d77e:	6b83      	ldr	r3, [r0, #56]	@ 0x38
 800d780:	f886 7025 	strb.w	r7, [r6, #37]	@ 0x25
 800d784:	3501      	adds	r5, #1
 800d786:	42ab      	cmp	r3, r5
 800d788:	d8f0      	bhi.n	800d76c <_rclc_take_new_data+0x278>
 800d78a:	e729      	b.n	800d5e0 <_rclc_take_new_data+0xec>
 800d78c:	6860      	ldr	r0, [r4, #4]
 800d78e:	6b83      	ldr	r3, [r0, #56]	@ 0x38
 800d790:	3501      	adds	r5, #1
 800d792:	42ab      	cmp	r3, r5
 800d794:	d8ea      	bhi.n	800d76c <_rclc_take_new_data+0x278>
 800d796:	e723      	b.n	800d5e0 <_rclc_take_new_data+0xec>
 800d798:	ab06      	add	r3, sp, #24
 800d79a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800d79c:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 800d7a0:	2103      	movs	r1, #3
 800d7a2:	e896 000c 	ldmia.w	r6, {r2, r3}
 800d7a6:	6860      	ldr	r0, [r4, #4]
 800d7a8:	f008 fe22 	bl	80163f0 <rclc_action_server_goal_cancel_reject>
 800d7ac:	e6c4      	b.n	800d538 <_rclc_take_new_data+0x44>
 800d7ae:	ab06      	add	r3, sp, #24
 800d7b0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800d7b2:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 800d7b6:	2102      	movs	r1, #2
 800d7b8:	e896 000c 	ldmia.w	r6, {r2, r3}
 800d7bc:	6860      	ldr	r0, [r4, #4]
 800d7be:	f008 fe17 	bl	80163f0 <rclc_action_server_goal_cancel_reject>
 800d7c2:	e6b9      	b.n	800d538 <_rclc_take_new_data+0x44>
 800d7c4:	6860      	ldr	r0, [r4, #4]
 800d7c6:	e706      	b.n	800d5d6 <_rclc_take_new_data+0xe2>
 800d7c8:	6860      	ldr	r0, [r4, #4]
 800d7ca:	4631      	mov	r1, r6
 800d7cc:	f008 fd30 	bl	8016230 <rclc_action_remove_used_goal_handle>
 800d7d0:	f000 fe1e 	bl	800e410 <rcutils_reset_error>
 800d7d4:	e6b0      	b.n	800d538 <_rclc_take_new_data+0x44>
 800d7d6:	2501      	movs	r5, #1
 800d7d8:	e6ae      	b.n	800d538 <_rclc_take_new_data+0x44>
 800d7da:	bf00      	nop

0800d7dc <_rclc_execute.part.0>:
 800d7dc:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d7de:	7803      	ldrb	r3, [r0, #0]
 800d7e0:	b087      	sub	sp, #28
 800d7e2:	4604      	mov	r4, r0
 800d7e4:	2b0a      	cmp	r3, #10
 800d7e6:	f200 8136 	bhi.w	800da56 <_rclc_execute.part.0+0x27a>
 800d7ea:	e8df f003 	tbb	[pc, r3]
 800d7ee:	435e      	.short	0x435e
 800d7f0:	06a1664f 	.word	0x06a1664f
 800d7f4:	6c1e0606 	.word	0x6c1e0606
 800d7f8:	59          	.byte	0x59
 800d7f9:	00          	.byte	0x00
 800d7fa:	2b06      	cmp	r3, #6
 800d7fc:	f000 8122 	beq.w	800da44 <_rclc_execute.part.0+0x268>
 800d800:	2b07      	cmp	r3, #7
 800d802:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 800d804:	f040 8118 	bne.w	800da38 <_rclc_execute.part.0+0x25c>
 800d808:	e9d0 120a 	ldrd	r1, r2, [r0, #40]	@ 0x28
 800d80c:	6880      	ldr	r0, [r0, #8]
 800d80e:	4798      	blx	r3
 800d810:	f104 0110 	add.w	r1, r4, #16
 800d814:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 800d816:	6860      	ldr	r0, [r4, #4]
 800d818:	f006 fd36 	bl	8014288 <rcl_send_response>
 800d81c:	2800      	cmp	r0, #0
 800d81e:	d033      	beq.n	800d888 <_rclc_execute.part.0+0xac>
 800d820:	9005      	str	r0, [sp, #20]
 800d822:	f000 fdf5 	bl	800e410 <rcutils_reset_error>
 800d826:	9805      	ldr	r0, [sp, #20]
 800d828:	e02e      	b.n	800d888 <_rclc_execute.part.0+0xac>
 800d82a:	6840      	ldr	r0, [r0, #4]
 800d82c:	f890 3042 	ldrb.w	r3, [r0, #66]	@ 0x42
 800d830:	2b00      	cmp	r3, #0
 800d832:	f000 8086 	beq.w	800d942 <_rclc_execute.part.0+0x166>
 800d836:	2600      	movs	r6, #0
 800d838:	2701      	movs	r7, #1
 800d83a:	e004      	b.n	800d846 <_rclc_execute.part.0+0x6a>
 800d83c:	f008 fcc2 	bl	80161c4 <rclc_action_send_result_request>
 800d840:	b998      	cbnz	r0, 800d86a <_rclc_execute.part.0+0x8e>
 800d842:	722f      	strb	r7, [r5, #8]
 800d844:	6860      	ldr	r0, [r4, #4]
 800d846:	f008 fd6f 	bl	8016328 <rclc_action_find_first_handle_with_goal_response>
 800d84a:	4605      	mov	r5, r0
 800d84c:	2800      	cmp	r0, #0
 800d84e:	d077      	beq.n	800d940 <_rclc_execute.part.0+0x164>
 800d850:	6863      	ldr	r3, [r4, #4]
 800d852:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 800d854:	699b      	ldr	r3, [r3, #24]
 800d856:	f895 1021 	ldrb.w	r1, [r5, #33]	@ 0x21
 800d85a:	f885 6020 	strb.w	r6, [r5, #32]
 800d85e:	4798      	blx	r3
 800d860:	f895 3021 	ldrb.w	r3, [r5, #33]	@ 0x21
 800d864:	4628      	mov	r0, r5
 800d866:	2b00      	cmp	r3, #0
 800d868:	d1e8      	bne.n	800d83c <_rclc_execute.part.0+0x60>
 800d86a:	6860      	ldr	r0, [r4, #4]
 800d86c:	4629      	mov	r1, r5
 800d86e:	f008 fcdf 	bl	8016230 <rclc_action_remove_used_goal_handle>
 800d872:	e7e7      	b.n	800d844 <_rclc_execute.part.0+0x68>
 800d874:	f890 5039 	ldrb.w	r5, [r0, #57]	@ 0x39
 800d878:	e9d0 130b 	ldrd	r1, r3, [r0, #44]	@ 0x2c
 800d87c:	2d00      	cmp	r5, #0
 800d87e:	f000 80c9 	beq.w	800da14 <_rclc_execute.part.0+0x238>
 800d882:	6880      	ldr	r0, [r0, #8]
 800d884:	4798      	blx	r3
 800d886:	2000      	movs	r0, #0
 800d888:	b007      	add	sp, #28
 800d88a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d88c:	6840      	ldr	r0, [r0, #4]
 800d88e:	f007 f909 	bl	8014aa4 <rcl_timer_call>
 800d892:	f240 3321 	movw	r3, #801	@ 0x321
 800d896:	4298      	cmp	r0, r3
 800d898:	d004      	beq.n	800d8a4 <_rclc_execute.part.0+0xc8>
 800d89a:	2800      	cmp	r0, #0
 800d89c:	d0f4      	beq.n	800d888 <_rclc_execute.part.0+0xac>
 800d89e:	e7bf      	b.n	800d820 <_rclc_execute.part.0+0x44>
 800d8a0:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 800d8a2:	4798      	blx	r3
 800d8a4:	2000      	movs	r0, #0
 800d8a6:	b007      	add	sp, #28
 800d8a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d8aa:	f890 5039 	ldrb.w	r5, [r0, #57]	@ 0x39
 800d8ae:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 800d8b0:	b925      	cbnz	r5, 800d8bc <_rclc_execute.part.0+0xe0>
 800d8b2:	4628      	mov	r0, r5
 800d8b4:	4798      	blx	r3
 800d8b6:	4628      	mov	r0, r5
 800d8b8:	e7e6      	b.n	800d888 <_rclc_execute.part.0+0xac>
 800d8ba:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 800d8bc:	68a0      	ldr	r0, [r4, #8]
 800d8be:	4798      	blx	r3
 800d8c0:	2000      	movs	r0, #0
 800d8c2:	b007      	add	sp, #28
 800d8c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d8c6:	6840      	ldr	r0, [r0, #4]
 800d8c8:	f890 3024 	ldrb.w	r3, [r0, #36]	@ 0x24
 800d8cc:	bb3b      	cbnz	r3, 800d91e <_rclc_execute.part.0+0x142>
 800d8ce:	f890 3020 	ldrb.w	r3, [r0, #32]
 800d8d2:	2b00      	cmp	r3, #0
 800d8d4:	d07b      	beq.n	800d9ce <_rclc_execute.part.0+0x1f2>
 800d8d6:	f640 0634 	movw	r6, #2100	@ 0x834
 800d8da:	2701      	movs	r7, #1
 800d8dc:	e007      	b.n	800d8ee <_rclc_execute.part.0+0x112>
 800d8de:	4628      	mov	r0, r5
 800d8e0:	f008 fd3a 	bl	8016358 <rclc_action_server_response_goal_request>
 800d8e4:	6860      	ldr	r0, [r4, #4]
 800d8e6:	4629      	mov	r1, r5
 800d8e8:	f008 fca2 	bl	8016230 <rclc_action_remove_used_goal_handle>
 800d8ec:	6860      	ldr	r0, [r4, #4]
 800d8ee:	2100      	movs	r1, #0
 800d8f0:	f008 fccc 	bl	801628c <rclc_action_find_first_handle_by_status>
 800d8f4:	4605      	mov	r5, r0
 800d8f6:	2800      	cmp	r0, #0
 800d8f8:	d066      	beq.n	800d9c8 <_rclc_execute.part.0+0x1ec>
 800d8fa:	6863      	ldr	r3, [r4, #4]
 800d8fc:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 800d8fe:	699b      	ldr	r3, [r3, #24]
 800d900:	4798      	blx	r3
 800d902:	42b0      	cmp	r0, r6
 800d904:	f04f 0100 	mov.w	r1, #0
 800d908:	d1e9      	bne.n	800d8de <_rclc_execute.part.0+0x102>
 800d90a:	2101      	movs	r1, #1
 800d90c:	4628      	mov	r0, r5
 800d90e:	f008 fd23 	bl	8016358 <rclc_action_server_response_goal_request>
 800d912:	722f      	strb	r7, [r5, #8]
 800d914:	e7ea      	b.n	800d8ec <_rclc_execute.part.0+0x110>
 800d916:	6848      	ldr	r0, [r1, #4]
 800d918:	f008 fc8a 	bl	8016230 <rclc_action_remove_used_goal_handle>
 800d91c:	6860      	ldr	r0, [r4, #4]
 800d91e:	f008 fcc1 	bl	80162a4 <rclc_action_find_first_terminated_handle>
 800d922:	4601      	mov	r1, r0
 800d924:	2800      	cmp	r0, #0
 800d926:	d1f6      	bne.n	800d916 <_rclc_execute.part.0+0x13a>
 800d928:	6860      	ldr	r0, [r4, #4]
 800d92a:	f880 1024 	strb.w	r1, [r0, #36]	@ 0x24
 800d92e:	e7ce      	b.n	800d8ce <_rclc_execute.part.0+0xf2>
 800d930:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 800d932:	6880      	ldr	r0, [r0, #8]
 800d934:	f104 0110 	add.w	r1, r4, #16
 800d938:	4798      	blx	r3
 800d93a:	2000      	movs	r0, #0
 800d93c:	b007      	add	sp, #28
 800d93e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d940:	6860      	ldr	r0, [r4, #4]
 800d942:	f890 3040 	ldrb.w	r3, [r0, #64]	@ 0x40
 800d946:	b18b      	cbz	r3, 800d96c <_rclc_execute.part.0+0x190>
 800d948:	68c5      	ldr	r5, [r0, #12]
 800d94a:	b32d      	cbz	r5, 800d998 <_rclc_execute.part.0+0x1bc>
 800d94c:	2600      	movs	r6, #0
 800d94e:	f895 3022 	ldrb.w	r3, [r5, #34]	@ 0x22
 800d952:	b143      	cbz	r3, 800d966 <_rclc_execute.part.0+0x18a>
 800d954:	69c3      	ldr	r3, [r0, #28]
 800d956:	f885 6022 	strb.w	r6, [r5, #34]	@ 0x22
 800d95a:	b123      	cbz	r3, 800d966 <_rclc_execute.part.0+0x18a>
 800d95c:	6a81      	ldr	r1, [r0, #40]	@ 0x28
 800d95e:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 800d960:	4628      	mov	r0, r5
 800d962:	4798      	blx	r3
 800d964:	6860      	ldr	r0, [r4, #4]
 800d966:	682d      	ldr	r5, [r5, #0]
 800d968:	2d00      	cmp	r5, #0
 800d96a:	d1f0      	bne.n	800d94e <_rclc_execute.part.0+0x172>
 800d96c:	f890 3044 	ldrb.w	r3, [r0, #68]	@ 0x44
 800d970:	b193      	cbz	r3, 800d998 <_rclc_execute.part.0+0x1bc>
 800d972:	68c5      	ldr	r5, [r0, #12]
 800d974:	b185      	cbz	r5, 800d998 <_rclc_execute.part.0+0x1bc>
 800d976:	2600      	movs	r6, #0
 800d978:	f895 3024 	ldrb.w	r3, [r5, #36]	@ 0x24
 800d97c:	b14b      	cbz	r3, 800d992 <_rclc_execute.part.0+0x1b6>
 800d97e:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 800d980:	f885 6024 	strb.w	r6, [r5, #36]	@ 0x24
 800d984:	b12b      	cbz	r3, 800d992 <_rclc_execute.part.0+0x1b6>
 800d986:	4628      	mov	r0, r5
 800d988:	f895 1025 	ldrb.w	r1, [r5, #37]	@ 0x25
 800d98c:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 800d98e:	4798      	blx	r3
 800d990:	6860      	ldr	r0, [r4, #4]
 800d992:	682d      	ldr	r5, [r5, #0]
 800d994:	2d00      	cmp	r5, #0
 800d996:	d1ef      	bne.n	800d978 <_rclc_execute.part.0+0x19c>
 800d998:	f890 3043 	ldrb.w	r3, [r0, #67]	@ 0x43
 800d99c:	2b00      	cmp	r3, #0
 800d99e:	d081      	beq.n	800d8a4 <_rclc_execute.part.0+0xc8>
 800d9a0:	2700      	movs	r7, #0
 800d9a2:	e00b      	b.n	800d9bc <_rclc_execute.part.0+0x1e0>
 800d9a4:	6863      	ldr	r3, [r4, #4]
 800d9a6:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 800d9a8:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800d9aa:	6a1e      	ldr	r6, [r3, #32]
 800d9ac:	f885 7023 	strb.w	r7, [r5, #35]	@ 0x23
 800d9b0:	47b0      	blx	r6
 800d9b2:	6860      	ldr	r0, [r4, #4]
 800d9b4:	4629      	mov	r1, r5
 800d9b6:	f008 fc3b 	bl	8016230 <rclc_action_remove_used_goal_handle>
 800d9ba:	6860      	ldr	r0, [r4, #4]
 800d9bc:	f008 fcc0 	bl	8016340 <rclc_action_find_first_handle_with_result_response>
 800d9c0:	4605      	mov	r5, r0
 800d9c2:	2800      	cmp	r0, #0
 800d9c4:	d1ee      	bne.n	800d9a4 <_rclc_execute.part.0+0x1c8>
 800d9c6:	e76d      	b.n	800d8a4 <_rclc_execute.part.0+0xc8>
 800d9c8:	6860      	ldr	r0, [r4, #4]
 800d9ca:	f880 5020 	strb.w	r5, [r0, #32]
 800d9ce:	f890 3021 	ldrb.w	r3, [r0, #33]	@ 0x21
 800d9d2:	2b00      	cmp	r3, #0
 800d9d4:	f43f af66 	beq.w	800d8a4 <_rclc_execute.part.0+0xc8>
 800d9d8:	68c5      	ldr	r5, [r0, #12]
 800d9da:	b1b5      	cbz	r5, 800da0a <_rclc_execute.part.0+0x22e>
 800d9dc:	2602      	movs	r6, #2
 800d9de:	e001      	b.n	800d9e4 <_rclc_execute.part.0+0x208>
 800d9e0:	682d      	ldr	r5, [r5, #0]
 800d9e2:	b195      	cbz	r5, 800da0a <_rclc_execute.part.0+0x22e>
 800d9e4:	f995 3008 	ldrsb.w	r3, [r5, #8]
 800d9e8:	2b03      	cmp	r3, #3
 800d9ea:	d1f9      	bne.n	800d9e0 <_rclc_execute.part.0+0x204>
 800d9ec:	69c3      	ldr	r3, [r0, #28]
 800d9ee:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 800d9f0:	4628      	mov	r0, r5
 800d9f2:	4798      	blx	r3
 800d9f4:	4603      	mov	r3, r0
 800d9f6:	f105 0260 	add.w	r2, r5, #96	@ 0x60
 800d9fa:	4628      	mov	r0, r5
 800d9fc:	f885 3025 	strb.w	r3, [r5, #37]	@ 0x25
 800da00:	b163      	cbz	r3, 800da1c <_rclc_execute.part.0+0x240>
 800da02:	f008 fcc9 	bl	8016398 <rclc_action_server_goal_cancel_accept>
 800da06:	6860      	ldr	r0, [r4, #4]
 800da08:	e7ea      	b.n	800d9e0 <_rclc_execute.part.0+0x204>
 800da0a:	2300      	movs	r3, #0
 800da0c:	f880 3021 	strb.w	r3, [r0, #33]	@ 0x21
 800da10:	4618      	mov	r0, r3
 800da12:	e739      	b.n	800d888 <_rclc_execute.part.0+0xac>
 800da14:	4628      	mov	r0, r5
 800da16:	4798      	blx	r3
 800da18:	4628      	mov	r0, r5
 800da1a:	e735      	b.n	800d888 <_rclc_execute.part.0+0xac>
 800da1c:	ca0f      	ldmia	r2, {r0, r1, r2, r3}
 800da1e:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 800da22:	f105 0758 	add.w	r7, r5, #88	@ 0x58
 800da26:	e9d7 2300 	ldrd	r2, r3, [r7]
 800da2a:	6860      	ldr	r0, [r4, #4]
 800da2c:	2101      	movs	r1, #1
 800da2e:	f008 fcdf 	bl	80163f0 <rclc_action_server_goal_cancel_reject>
 800da32:	722e      	strb	r6, [r5, #8]
 800da34:	6860      	ldr	r0, [r4, #4]
 800da36:	e7d3      	b.n	800d9e0 <_rclc_execute.part.0+0x204>
 800da38:	6a81      	ldr	r1, [r0, #40]	@ 0x28
 800da3a:	6880      	ldr	r0, [r0, #8]
 800da3c:	4798      	blx	r3
 800da3e:	f104 0110 	add.w	r1, r4, #16
 800da42:	e6e7      	b.n	800d814 <_rclc_execute.part.0+0x38>
 800da44:	f100 0110 	add.w	r1, r0, #16
 800da48:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 800da4a:	6a82      	ldr	r2, [r0, #40]	@ 0x28
 800da4c:	6880      	ldr	r0, [r0, #8]
 800da4e:	9105      	str	r1, [sp, #20]
 800da50:	4798      	blx	r3
 800da52:	9905      	ldr	r1, [sp, #20]
 800da54:	e6de      	b.n	800d814 <_rclc_execute.part.0+0x38>
 800da56:	2001      	movs	r0, #1
 800da58:	e716      	b.n	800d888 <_rclc_execute.part.0+0xac>
 800da5a:	bf00      	nop

0800da5c <rclc_executor_trigger_any>:
 800da5c:	2800      	cmp	r0, #0
 800da5e:	d03f      	beq.n	800dae0 <rclc_executor_trigger_any+0x84>
 800da60:	2900      	cmp	r1, #0
 800da62:	d03e      	beq.n	800dae2 <rclc_executor_trigger_any+0x86>
 800da64:	4603      	mov	r3, r0
 800da66:	f890 0038 	ldrb.w	r0, [r0, #56]	@ 0x38
 800da6a:	2200      	movs	r2, #0
 800da6c:	2800      	cmp	r0, #0
 800da6e:	d037      	beq.n	800dae0 <rclc_executor_trigger_any+0x84>
 800da70:	b430      	push	{r4, r5}
 800da72:	f893 c000 	ldrb.w	ip, [r3]
 800da76:	f1bc 0f08 	cmp.w	ip, #8
 800da7a:	d11e      	bne.n	800daba <rclc_executor_trigger_any+0x5e>
 800da7c:	685c      	ldr	r4, [r3, #4]
 800da7e:	6c25      	ldr	r5, [r4, #64]	@ 0x40
 800da80:	f035 457f 	bics.w	r5, r5, #4278190080	@ 0xff000000
 800da84:	d105      	bne.n	800da92 <rclc_executor_trigger_any+0x36>
 800da86:	f894 0044 	ldrb.w	r0, [r4, #68]	@ 0x44
 800da8a:	b910      	cbnz	r0, 800da92 <rclc_executor_trigger_any+0x36>
 800da8c:	f894 0043 	ldrb.w	r0, [r4, #67]	@ 0x43
 800da90:	b128      	cbz	r0, 800da9e <rclc_executor_trigger_any+0x42>
 800da92:	bc30      	pop	{r4, r5}
 800da94:	4770      	bx	lr
 800da96:	f893 0039 	ldrb.w	r0, [r3, #57]	@ 0x39
 800da9a:	2800      	cmp	r0, #0
 800da9c:	d1f9      	bne.n	800da92 <rclc_executor_trigger_any+0x36>
 800da9e:	3201      	adds	r2, #1
 800daa0:	4291      	cmp	r1, r2
 800daa2:	f103 0340 	add.w	r3, r3, #64	@ 0x40
 800daa6:	d018      	beq.n	800dada <rclc_executor_trigger_any+0x7e>
 800daa8:	f893 0038 	ldrb.w	r0, [r3, #56]	@ 0x38
 800daac:	2800      	cmp	r0, #0
 800daae:	d0f0      	beq.n	800da92 <rclc_executor_trigger_any+0x36>
 800dab0:	f893 c000 	ldrb.w	ip, [r3]
 800dab4:	f1bc 0f08 	cmp.w	ip, #8
 800dab8:	d0e0      	beq.n	800da7c <rclc_executor_trigger_any+0x20>
 800daba:	f1bc 0f09 	cmp.w	ip, #9
 800dabe:	d1ea      	bne.n	800da96 <rclc_executor_trigger_any+0x3a>
 800dac0:	685c      	ldr	r4, [r3, #4]
 800dac2:	6a25      	ldr	r5, [r4, #32]
 800dac4:	2d00      	cmp	r5, #0
 800dac6:	d1e4      	bne.n	800da92 <rclc_executor_trigger_any+0x36>
 800dac8:	f894 0024 	ldrb.w	r0, [r4, #36]	@ 0x24
 800dacc:	2800      	cmp	r0, #0
 800dace:	d1e0      	bne.n	800da92 <rclc_executor_trigger_any+0x36>
 800dad0:	3201      	adds	r2, #1
 800dad2:	4291      	cmp	r1, r2
 800dad4:	f103 0340 	add.w	r3, r3, #64	@ 0x40
 800dad8:	d1e6      	bne.n	800daa8 <rclc_executor_trigger_any+0x4c>
 800dada:	2000      	movs	r0, #0
 800dadc:	bc30      	pop	{r4, r5}
 800dade:	4770      	bx	lr
 800dae0:	4770      	bx	lr
 800dae2:	4608      	mov	r0, r1
 800dae4:	4770      	bx	lr
 800dae6:	bf00      	nop

0800dae8 <rclc_executor_init>:
 800dae8:	2800      	cmp	r0, #0
 800daea:	d05f      	beq.n	800dbac <rclc_executor_init+0xc4>
 800daec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800daf0:	460c      	mov	r4, r1
 800daf2:	b0b0      	sub	sp, #192	@ 0xc0
 800daf4:	2900      	cmp	r1, #0
 800daf6:	d051      	beq.n	800db9c <rclc_executor_init+0xb4>
 800daf8:	4605      	mov	r5, r0
 800dafa:	4618      	mov	r0, r3
 800dafc:	4616      	mov	r6, r2
 800dafe:	461f      	mov	r7, r3
 800db00:	f000 fc62 	bl	800e3c8 <rcutils_allocator_is_valid>
 800db04:	2800      	cmp	r0, #0
 800db06:	d049      	beq.n	800db9c <rclc_executor_init+0xb4>
 800db08:	2e00      	cmp	r6, #0
 800db0a:	d047      	beq.n	800db9c <rclc_executor_init+0xb4>
 800db0c:	492c      	ldr	r1, [pc, #176]	@ (800dbc0 <rclc_executor_init+0xd8>)
 800db0e:	2288      	movs	r2, #136	@ 0x88
 800db10:	a80e      	add	r0, sp, #56	@ 0x38
 800db12:	f00d fe0a 	bl	801b72a <memcpy>
 800db16:	a90e      	add	r1, sp, #56	@ 0x38
 800db18:	2288      	movs	r2, #136	@ 0x88
 800db1a:	4628      	mov	r0, r5
 800db1c:	f00d fe05 	bl	801b72a <memcpy>
 800db20:	602c      	str	r4, [r5, #0]
 800db22:	4668      	mov	r0, sp
 800db24:	60ae      	str	r6, [r5, #8]
 800db26:	466c      	mov	r4, sp
 800db28:	f007 f92e 	bl	8014d88 <rcl_get_zero_initialized_wait_set>
 800db2c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800db2e:	f105 0c14 	add.w	ip, r5, #20
 800db32:	f8d7 8000 	ldr.w	r8, [r7]
 800db36:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800db3a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800db3c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800db40:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800db42:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800db46:	ed9f 7b1c 	vldr	d7, [pc, #112]	@ 800dbb8 <rclc_executor_init+0xd0>
 800db4a:	6823      	ldr	r3, [r4, #0]
 800db4c:	f8cc 3000 	str.w	r3, [ip]
 800db50:	6939      	ldr	r1, [r7, #16]
 800db52:	612f      	str	r7, [r5, #16]
 800db54:	ed85 7b1a 	vstr	d7, [r5, #104]	@ 0x68
 800db58:	01b0      	lsls	r0, r6, #6
 800db5a:	47c0      	blx	r8
 800db5c:	6068      	str	r0, [r5, #4]
 800db5e:	b338      	cbz	r0, 800dbb0 <rclc_executor_init+0xc8>
 800db60:	2400      	movs	r4, #0
 800db62:	e000      	b.n	800db66 <rclc_executor_init+0x7e>
 800db64:	6868      	ldr	r0, [r5, #4]
 800db66:	eb00 1084 	add.w	r0, r0, r4, lsl #6
 800db6a:	4631      	mov	r1, r6
 800db6c:	3401      	adds	r4, #1
 800db6e:	f000 fab3 	bl	800e0d8 <rclc_executor_handle_init>
 800db72:	42a6      	cmp	r6, r4
 800db74:	d1f6      	bne.n	800db64 <rclc_executor_init+0x7c>
 800db76:	f105 0048 	add.w	r0, r5, #72	@ 0x48
 800db7a:	f000 faa3 	bl	800e0c4 <rclc_executor_handle_counters_zero_init>
 800db7e:	4a11      	ldr	r2, [pc, #68]	@ (800dbc4 <rclc_executor_init+0xdc>)
 800db80:	686b      	ldr	r3, [r5, #4]
 800db82:	2000      	movs	r0, #0
 800db84:	e9c5 201e 	strd	r2, r0, [r5, #120]	@ 0x78
 800db88:	b163      	cbz	r3, 800dba4 <rclc_executor_init+0xbc>
 800db8a:	692b      	ldr	r3, [r5, #16]
 800db8c:	b153      	cbz	r3, 800dba4 <rclc_executor_init+0xbc>
 800db8e:	68ab      	ldr	r3, [r5, #8]
 800db90:	b143      	cbz	r3, 800dba4 <rclc_executor_init+0xbc>
 800db92:	f885 0080 	strb.w	r0, [r5, #128]	@ 0x80
 800db96:	b030      	add	sp, #192	@ 0xc0
 800db98:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800db9c:	200b      	movs	r0, #11
 800db9e:	b030      	add	sp, #192	@ 0xc0
 800dba0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800dba4:	4618      	mov	r0, r3
 800dba6:	b030      	add	sp, #192	@ 0xc0
 800dba8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800dbac:	200b      	movs	r0, #11
 800dbae:	4770      	bx	lr
 800dbb0:	200a      	movs	r0, #10
 800dbb2:	e7f4      	b.n	800db9e <rclc_executor_init+0xb6>
 800dbb4:	f3af 8000 	nop.w
 800dbb8:	3b9aca00 	.word	0x3b9aca00
 800dbbc:	00000000 	.word	0x00000000
 800dbc0:	0801d480 	.word	0x0801d480
 800dbc4:	0800da5d 	.word	0x0800da5d

0800dbc8 <rclc_executor_add_subscription>:
 800dbc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dbca:	f89d e018 	ldrb.w	lr, [sp, #24]
 800dbce:	b338      	cbz	r0, 800dc20 <rclc_executor_add_subscription+0x58>
 800dbd0:	b331      	cbz	r1, 800dc20 <rclc_executor_add_subscription+0x58>
 800dbd2:	b32a      	cbz	r2, 800dc20 <rclc_executor_add_subscription+0x58>
 800dbd4:	b323      	cbz	r3, 800dc20 <rclc_executor_add_subscription+0x58>
 800dbd6:	4604      	mov	r4, r0
 800dbd8:	e9d0 5002 	ldrd	r5, r0, [r0, #8]
 800dbdc:	42a8      	cmp	r0, r5
 800dbde:	d301      	bcc.n	800dbe4 <rclc_executor_add_subscription+0x1c>
 800dbe0:	2001      	movs	r0, #1
 800dbe2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800dbe4:	6866      	ldr	r6, [r4, #4]
 800dbe6:	0187      	lsls	r7, r0, #6
 800dbe8:	eb06 1c80 	add.w	ip, r6, r0, lsl #6
 800dbec:	2500      	movs	r5, #0
 800dbee:	55f5      	strb	r5, [r6, r7]
 800dbf0:	3001      	adds	r0, #1
 800dbf2:	f8cc 3030 	str.w	r3, [ip, #48]	@ 0x30
 800dbf6:	f8cc 502c 	str.w	r5, [ip, #44]	@ 0x2c
 800dbfa:	2301      	movs	r3, #1
 800dbfc:	f104 0514 	add.w	r5, r4, #20
 800dc00:	e9cc 1201 	strd	r1, r2, [ip, #4]
 800dc04:	f88c e001 	strb.w	lr, [ip, #1]
 800dc08:	f8ac 3038 	strh.w	r3, [ip, #56]	@ 0x38
 800dc0c:	60e0      	str	r0, [r4, #12]
 800dc0e:	4628      	mov	r0, r5
 800dc10:	f007 f8ce 	bl	8014db0 <rcl_wait_set_is_valid>
 800dc14:	b930      	cbnz	r0, 800dc24 <rclc_executor_add_subscription+0x5c>
 800dc16:	6ca3      	ldr	r3, [r4, #72]	@ 0x48
 800dc18:	3301      	adds	r3, #1
 800dc1a:	2000      	movs	r0, #0
 800dc1c:	64a3      	str	r3, [r4, #72]	@ 0x48
 800dc1e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800dc20:	200b      	movs	r0, #11
 800dc22:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800dc24:	4628      	mov	r0, r5
 800dc26:	f007 f8c9 	bl	8014dbc <rcl_wait_set_fini>
 800dc2a:	2800      	cmp	r0, #0
 800dc2c:	d0f3      	beq.n	800dc16 <rclc_executor_add_subscription+0x4e>
 800dc2e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800dc30 <rclc_executor_add_timer>:
 800dc30:	b300      	cbz	r0, 800dc74 <rclc_executor_add_timer+0x44>
 800dc32:	b1f9      	cbz	r1, 800dc74 <rclc_executor_add_timer+0x44>
 800dc34:	b538      	push	{r3, r4, r5, lr}
 800dc36:	e9d0 2302 	ldrd	r2, r3, [r0, #8]
 800dc3a:	4293      	cmp	r3, r2
 800dc3c:	4604      	mov	r4, r0
 800dc3e:	d301      	bcc.n	800dc44 <rclc_executor_add_timer+0x14>
 800dc40:	2001      	movs	r0, #1
 800dc42:	bd38      	pop	{r3, r4, r5, pc}
 800dc44:	6840      	ldr	r0, [r0, #4]
 800dc46:	eb00 1283 	add.w	r2, r0, r3, lsl #6
 800dc4a:	019d      	lsls	r5, r3, #6
 800dc4c:	6051      	str	r1, [r2, #4]
 800dc4e:	2102      	movs	r1, #2
 800dc50:	5341      	strh	r1, [r0, r5]
 800dc52:	3301      	adds	r3, #1
 800dc54:	2000      	movs	r0, #0
 800dc56:	2101      	movs	r1, #1
 800dc58:	f104 0514 	add.w	r5, r4, #20
 800dc5c:	62d0      	str	r0, [r2, #44]	@ 0x2c
 800dc5e:	8711      	strh	r1, [r2, #56]	@ 0x38
 800dc60:	4628      	mov	r0, r5
 800dc62:	60e3      	str	r3, [r4, #12]
 800dc64:	f007 f8a4 	bl	8014db0 <rcl_wait_set_is_valid>
 800dc68:	b930      	cbnz	r0, 800dc78 <rclc_executor_add_timer+0x48>
 800dc6a:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 800dc6c:	3301      	adds	r3, #1
 800dc6e:	2000      	movs	r0, #0
 800dc70:	64e3      	str	r3, [r4, #76]	@ 0x4c
 800dc72:	bd38      	pop	{r3, r4, r5, pc}
 800dc74:	200b      	movs	r0, #11
 800dc76:	4770      	bx	lr
 800dc78:	4628      	mov	r0, r5
 800dc7a:	f007 f89f 	bl	8014dbc <rcl_wait_set_fini>
 800dc7e:	2800      	cmp	r0, #0
 800dc80:	d0f3      	beq.n	800dc6a <rclc_executor_add_timer+0x3a>
 800dc82:	bd38      	pop	{r3, r4, r5, pc}

0800dc84 <rclc_executor_prepare>:
 800dc84:	2800      	cmp	r0, #0
 800dc86:	d044      	beq.n	800dd12 <rclc_executor_prepare+0x8e>
 800dc88:	b5f0      	push	{r4, r5, r6, r7, lr}
 800dc8a:	f100 0514 	add.w	r5, r0, #20
 800dc8e:	b09b      	sub	sp, #108	@ 0x6c
 800dc90:	4604      	mov	r4, r0
 800dc92:	4628      	mov	r0, r5
 800dc94:	f007 f88c 	bl	8014db0 <rcl_wait_set_is_valid>
 800dc98:	b110      	cbz	r0, 800dca0 <rclc_executor_prepare+0x1c>
 800dc9a:	2000      	movs	r0, #0
 800dc9c:	b01b      	add	sp, #108	@ 0x6c
 800dc9e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800dca0:	4628      	mov	r0, r5
 800dca2:	f007 f88b 	bl	8014dbc <rcl_wait_set_fini>
 800dca6:	2800      	cmp	r0, #0
 800dca8:	d130      	bne.n	800dd0c <rclc_executor_prepare+0x88>
 800dcaa:	a80c      	add	r0, sp, #48	@ 0x30
 800dcac:	f007 f86c 	bl	8014d88 <rcl_get_zero_initialized_wait_set>
 800dcb0:	f10d 0c30 	add.w	ip, sp, #48	@ 0x30
 800dcb4:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800dcb8:	46ae      	mov	lr, r5
 800dcba:	6927      	ldr	r7, [r4, #16]
 800dcbc:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800dcc0:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800dcc4:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800dcc8:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800dccc:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800dcd0:	f8dc 3000 	ldr.w	r3, [ip]
 800dcd4:	f8ce 3000 	str.w	r3, [lr]
 800dcd8:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 800dcda:	ae04      	add	r6, sp, #16
 800dcdc:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 800dcde:	683b      	ldr	r3, [r7, #0]
 800dce0:	6822      	ldr	r2, [r4, #0]
 800dce2:	6033      	str	r3, [r6, #0]
 800dce4:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800dce6:	6d61      	ldr	r1, [r4, #84]	@ 0x54
 800dce8:	e9cd 3202 	strd	r3, r2, [sp, #8]
 800dcec:	e9d4 3213 	ldrd	r3, r2, [r4, #76]	@ 0x4c
 800dcf0:	e9cd 2100 	strd	r2, r1, [sp]
 800dcf4:	4628      	mov	r0, r5
 800dcf6:	6e22      	ldr	r2, [r4, #96]	@ 0x60
 800dcf8:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 800dcfa:	f007 fb5d 	bl	80153b8 <rcl_wait_set_init>
 800dcfe:	2800      	cmp	r0, #0
 800dd00:	d0cc      	beq.n	800dc9c <rclc_executor_prepare+0x18>
 800dd02:	900b      	str	r0, [sp, #44]	@ 0x2c
 800dd04:	f000 fb84 	bl	800e410 <rcutils_reset_error>
 800dd08:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 800dd0a:	e7c7      	b.n	800dc9c <rclc_executor_prepare+0x18>
 800dd0c:	f000 fb80 	bl	800e410 <rcutils_reset_error>
 800dd10:	e7cb      	b.n	800dcaa <rclc_executor_prepare+0x26>
 800dd12:	200b      	movs	r0, #11
 800dd14:	4770      	bx	lr
 800dd16:	bf00      	nop

0800dd18 <rclc_executor_spin_some.part.0>:
 800dd18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dd1c:	f100 0614 	add.w	r6, r0, #20
 800dd20:	b083      	sub	sp, #12
 800dd22:	4691      	mov	r9, r2
 800dd24:	4698      	mov	r8, r3
 800dd26:	4605      	mov	r5, r0
 800dd28:	f7ff ffac 	bl	800dc84 <rclc_executor_prepare>
 800dd2c:	4630      	mov	r0, r6
 800dd2e:	f007 f911 	bl	8014f54 <rcl_wait_set_clear>
 800dd32:	4607      	mov	r7, r0
 800dd34:	2800      	cmp	r0, #0
 800dd36:	f040 80ed 	bne.w	800df14 <rclc_executor_spin_some.part.0+0x1fc>
 800dd3a:	68ab      	ldr	r3, [r5, #8]
 800dd3c:	4604      	mov	r4, r0
 800dd3e:	b303      	cbz	r3, 800dd82 <rclc_executor_spin_some.part.0+0x6a>
 800dd40:	6869      	ldr	r1, [r5, #4]
 800dd42:	eb01 1c84 	add.w	ip, r1, r4, lsl #6
 800dd46:	01a2      	lsls	r2, r4, #6
 800dd48:	f89c 3038 	ldrb.w	r3, [ip, #56]	@ 0x38
 800dd4c:	b1cb      	cbz	r3, 800dd82 <rclc_executor_spin_some.part.0+0x6a>
 800dd4e:	5c8b      	ldrb	r3, [r1, r2]
 800dd50:	2b0a      	cmp	r3, #10
 800dd52:	f200 80d8 	bhi.w	800df06 <rclc_executor_spin_some.part.0+0x1ee>
 800dd56:	e8df f003 	tbb	[pc, r3]
 800dd5a:	9c9c      	.short	0x9c9c
 800dd5c:	068c8ca7 	.word	0x068c8ca7
 800dd60:	bdc90606 	.word	0xbdc90606
 800dd64:	b2          	.byte	0xb2
 800dd65:	00          	.byte	0x00
 800dd66:	f8dc 1004 	ldr.w	r1, [ip, #4]
 800dd6a:	f10c 0234 	add.w	r2, ip, #52	@ 0x34
 800dd6e:	4630      	mov	r0, r6
 800dd70:	f007 fc38 	bl	80155e4 <rcl_wait_set_add_service>
 800dd74:	2800      	cmp	r0, #0
 800dd76:	f040 8086 	bne.w	800de86 <rclc_executor_spin_some.part.0+0x16e>
 800dd7a:	68ab      	ldr	r3, [r5, #8]
 800dd7c:	3401      	adds	r4, #1
 800dd7e:	429c      	cmp	r4, r3
 800dd80:	d3de      	bcc.n	800dd40 <rclc_executor_spin_some.part.0+0x28>
 800dd82:	4643      	mov	r3, r8
 800dd84:	464a      	mov	r2, r9
 800dd86:	4630      	mov	r0, r6
 800dd88:	f007 fc5a 	bl	8015640 <rcl_wait>
 800dd8c:	f895 3080 	ldrb.w	r3, [r5, #128]	@ 0x80
 800dd90:	2b00      	cmp	r3, #0
 800dd92:	f000 80c7 	beq.w	800df24 <rclc_executor_spin_some.part.0+0x20c>
 800dd96:	2b01      	cmp	r3, #1
 800dd98:	f040 80b5 	bne.w	800df06 <rclc_executor_spin_some.part.0+0x1ee>
 800dd9c:	68ab      	ldr	r3, [r5, #8]
 800dd9e:	2b00      	cmp	r3, #0
 800dda0:	f000 8159 	beq.w	800e056 <rclc_executor_spin_some.part.0+0x33e>
 800dda4:	2400      	movs	r4, #0
 800dda6:	46a0      	mov	r8, r4
 800dda8:	f240 1991 	movw	r9, #401	@ 0x191
 800ddac:	e00a      	b.n	800ddc4 <rclc_executor_spin_some.part.0+0xac>
 800ddae:	f7ff fb53 	bl	800d458 <_rclc_check_for_new_data>
 800ddb2:	4604      	mov	r4, r0
 800ddb4:	b110      	cbz	r0, 800ddbc <rclc_executor_spin_some.part.0+0xa4>
 800ddb6:	4548      	cmp	r0, r9
 800ddb8:	f040 80b2 	bne.w	800df20 <rclc_executor_spin_some.part.0+0x208>
 800ddbc:	68ab      	ldr	r3, [r5, #8]
 800ddbe:	4598      	cmp	r8, r3
 800ddc0:	f080 8126 	bcs.w	800e010 <rclc_executor_spin_some.part.0+0x2f8>
 800ddc4:	686a      	ldr	r2, [r5, #4]
 800ddc6:	eb02 1088 	add.w	r0, r2, r8, lsl #6
 800ddca:	4631      	mov	r1, r6
 800ddcc:	f890 c038 	ldrb.w	ip, [r0, #56]	@ 0x38
 800ddd0:	f108 0801 	add.w	r8, r8, #1
 800ddd4:	f1bc 0f00 	cmp.w	ip, #0
 800ddd8:	d1e9      	bne.n	800ddae <rclc_executor_spin_some.part.0+0x96>
 800ddda:	4619      	mov	r1, r3
 800dddc:	4610      	mov	r0, r2
 800ddde:	e9d5 321e 	ldrd	r3, r2, [r5, #120]	@ 0x78
 800dde2:	4798      	blx	r3
 800dde4:	2800      	cmp	r0, #0
 800dde6:	f000 809b 	beq.w	800df20 <rclc_executor_spin_some.part.0+0x208>
 800ddea:	68ab      	ldr	r3, [r5, #8]
 800ddec:	2b00      	cmp	r3, #0
 800ddee:	f000 8097 	beq.w	800df20 <rclc_executor_spin_some.part.0+0x208>
 800ddf2:	f04f 0800 	mov.w	r8, #0
 800ddf6:	f240 1991 	movw	r9, #401	@ 0x191
 800ddfa:	e009      	b.n	800de10 <rclc_executor_spin_some.part.0+0xf8>
 800ddfc:	f7ff fb7a 	bl	800d4f4 <_rclc_take_new_data>
 800de00:	4604      	mov	r4, r0
 800de02:	b110      	cbz	r0, 800de0a <rclc_executor_spin_some.part.0+0xf2>
 800de04:	4548      	cmp	r0, r9
 800de06:	f040 808b 	bne.w	800df20 <rclc_executor_spin_some.part.0+0x208>
 800de0a:	68ab      	ldr	r3, [r5, #8]
 800de0c:	4598      	cmp	r8, r3
 800de0e:	d209      	bcs.n	800de24 <rclc_executor_spin_some.part.0+0x10c>
 800de10:	6868      	ldr	r0, [r5, #4]
 800de12:	eb00 1088 	add.w	r0, r0, r8, lsl #6
 800de16:	4631      	mov	r1, r6
 800de18:	f890 2038 	ldrb.w	r2, [r0, #56]	@ 0x38
 800de1c:	f108 0801 	add.w	r8, r8, #1
 800de20:	2a00      	cmp	r2, #0
 800de22:	d1eb      	bne.n	800ddfc <rclc_executor_spin_some.part.0+0xe4>
 800de24:	2600      	movs	r6, #0
 800de26:	b97b      	cbnz	r3, 800de48 <rclc_executor_spin_some.part.0+0x130>
 800de28:	e07a      	b.n	800df20 <rclc_executor_spin_some.part.0+0x208>
 800de2a:	f812 200c 	ldrb.w	r2, [r2, ip]
 800de2e:	2a08      	cmp	r2, #8
 800de30:	f000 80fd 	beq.w	800e02e <rclc_executor_spin_some.part.0+0x316>
 800de34:	2a09      	cmp	r2, #9
 800de36:	f000 80ef 	beq.w	800e018 <rclc_executor_spin_some.part.0+0x300>
 800de3a:	f890 2039 	ldrb.w	r2, [r0, #57]	@ 0x39
 800de3e:	b98a      	cbnz	r2, 800de64 <rclc_executor_spin_some.part.0+0x14c>
 800de40:	3601      	adds	r6, #1
 800de42:	429e      	cmp	r6, r3
 800de44:	d262      	bcs.n	800df0c <rclc_executor_spin_some.part.0+0x1f4>
 800de46:	2400      	movs	r4, #0
 800de48:	686a      	ldr	r2, [r5, #4]
 800de4a:	eb02 1086 	add.w	r0, r2, r6, lsl #6
 800de4e:	ea4f 1c86 	mov.w	ip, r6, lsl #6
 800de52:	f890 1038 	ldrb.w	r1, [r0, #56]	@ 0x38
 800de56:	2900      	cmp	r1, #0
 800de58:	d062      	beq.n	800df20 <rclc_executor_spin_some.part.0+0x208>
 800de5a:	7841      	ldrb	r1, [r0, #1]
 800de5c:	2900      	cmp	r1, #0
 800de5e:	d0e4      	beq.n	800de2a <rclc_executor_spin_some.part.0+0x112>
 800de60:	2901      	cmp	r1, #1
 800de62:	d1ed      	bne.n	800de40 <rclc_executor_spin_some.part.0+0x128>
 800de64:	f7ff fcba 	bl	800d7dc <_rclc_execute.part.0>
 800de68:	2800      	cmp	r0, #0
 800de6a:	f040 80b6 	bne.w	800dfda <rclc_executor_spin_some.part.0+0x2c2>
 800de6e:	68ab      	ldr	r3, [r5, #8]
 800de70:	e7e6      	b.n	800de40 <rclc_executor_spin_some.part.0+0x128>
 800de72:	f8dc 1004 	ldr.w	r1, [ip, #4]
 800de76:	f10c 0234 	add.w	r2, ip, #52	@ 0x34
 800de7a:	4630      	mov	r0, r6
 800de7c:	f007 fb86 	bl	801558c <rcl_wait_set_add_client>
 800de80:	2800      	cmp	r0, #0
 800de82:	f43f af7a 	beq.w	800dd7a <rclc_executor_spin_some.part.0+0x62>
 800de86:	9001      	str	r0, [sp, #4]
 800de88:	f000 fac2 	bl	800e410 <rcutils_reset_error>
 800de8c:	9801      	ldr	r0, [sp, #4]
 800de8e:	4607      	mov	r7, r0
 800de90:	e03c      	b.n	800df0c <rclc_executor_spin_some.part.0+0x1f4>
 800de92:	f8dc 1004 	ldr.w	r1, [ip, #4]
 800de96:	f10c 0234 	add.w	r2, ip, #52	@ 0x34
 800de9a:	4630      	mov	r0, r6
 800de9c:	f007 f82e 	bl	8014efc <rcl_wait_set_add_subscription>
 800dea0:	2800      	cmp	r0, #0
 800dea2:	f43f af6a 	beq.w	800dd7a <rclc_executor_spin_some.part.0+0x62>
 800dea6:	e7ee      	b.n	800de86 <rclc_executor_spin_some.part.0+0x16e>
 800dea8:	f8dc 1004 	ldr.w	r1, [ip, #4]
 800deac:	f10c 0234 	add.w	r2, ip, #52	@ 0x34
 800deb0:	4630      	mov	r0, r6
 800deb2:	f007 fb3b 	bl	801552c <rcl_wait_set_add_timer>
 800deb6:	2800      	cmp	r0, #0
 800deb8:	f43f af5f 	beq.w	800dd7a <rclc_executor_spin_some.part.0+0x62>
 800debc:	e7e3      	b.n	800de86 <rclc_executor_spin_some.part.0+0x16e>
 800debe:	f8dc 1004 	ldr.w	r1, [ip, #4]
 800dec2:	f10c 0234 	add.w	r2, ip, #52	@ 0x34
 800dec6:	4630      	mov	r0, r6
 800dec8:	f007 fb04 	bl	80154d4 <rcl_wait_set_add_guard_condition>
 800decc:	2800      	cmp	r0, #0
 800dece:	f43f af54 	beq.w	800dd7a <rclc_executor_spin_some.part.0+0x62>
 800ded2:	e7d8      	b.n	800de86 <rclc_executor_spin_some.part.0+0x16e>
 800ded4:	f8dc 1004 	ldr.w	r1, [ip, #4]
 800ded8:	f10c 0234 	add.w	r2, ip, #52	@ 0x34
 800dedc:	3110      	adds	r1, #16
 800dede:	4630      	mov	r0, r6
 800dee0:	f008 f886 	bl	8015ff0 <rcl_action_wait_set_add_action_server>
 800dee4:	2800      	cmp	r0, #0
 800dee6:	f43f af48 	beq.w	800dd7a <rclc_executor_spin_some.part.0+0x62>
 800deea:	e7cc      	b.n	800de86 <rclc_executor_spin_some.part.0+0x16e>
 800deec:	f8dc 1004 	ldr.w	r1, [ip, #4]
 800def0:	f10c 0234 	add.w	r2, ip, #52	@ 0x34
 800def4:	3110      	adds	r1, #16
 800def6:	2300      	movs	r3, #0
 800def8:	4630      	mov	r0, r6
 800defa:	f007 fe51 	bl	8015ba0 <rcl_action_wait_set_add_action_client>
 800defe:	2800      	cmp	r0, #0
 800df00:	f43f af3b 	beq.w	800dd7a <rclc_executor_spin_some.part.0+0x62>
 800df04:	e7bf      	b.n	800de86 <rclc_executor_spin_some.part.0+0x16e>
 800df06:	f000 fa83 	bl	800e410 <rcutils_reset_error>
 800df0a:	2701      	movs	r7, #1
 800df0c:	4638      	mov	r0, r7
 800df0e:	b003      	add	sp, #12
 800df10:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800df14:	f000 fa7c 	bl	800e410 <rcutils_reset_error>
 800df18:	4638      	mov	r0, r7
 800df1a:	b003      	add	sp, #12
 800df1c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800df20:	4627      	mov	r7, r4
 800df22:	e7f3      	b.n	800df0c <rclc_executor_spin_some.part.0+0x1f4>
 800df24:	68ab      	ldr	r3, [r5, #8]
 800df26:	2b00      	cmp	r3, #0
 800df28:	f000 8092 	beq.w	800e050 <rclc_executor_spin_some.part.0+0x338>
 800df2c:	2400      	movs	r4, #0
 800df2e:	46a0      	mov	r8, r4
 800df30:	f240 1991 	movw	r9, #401	@ 0x191
 800df34:	e008      	b.n	800df48 <rclc_executor_spin_some.part.0+0x230>
 800df36:	f7ff fa8f 	bl	800d458 <_rclc_check_for_new_data>
 800df3a:	4604      	mov	r4, r0
 800df3c:	b108      	cbz	r0, 800df42 <rclc_executor_spin_some.part.0+0x22a>
 800df3e:	4548      	cmp	r0, r9
 800df40:	d1ee      	bne.n	800df20 <rclc_executor_spin_some.part.0+0x208>
 800df42:	68ab      	ldr	r3, [r5, #8]
 800df44:	4598      	cmp	r8, r3
 800df46:	d265      	bcs.n	800e014 <rclc_executor_spin_some.part.0+0x2fc>
 800df48:	686a      	ldr	r2, [r5, #4]
 800df4a:	eb02 1088 	add.w	r0, r2, r8, lsl #6
 800df4e:	4631      	mov	r1, r6
 800df50:	f890 c038 	ldrb.w	ip, [r0, #56]	@ 0x38
 800df54:	f108 0801 	add.w	r8, r8, #1
 800df58:	f1bc 0f00 	cmp.w	ip, #0
 800df5c:	d1eb      	bne.n	800df36 <rclc_executor_spin_some.part.0+0x21e>
 800df5e:	4619      	mov	r1, r3
 800df60:	4610      	mov	r0, r2
 800df62:	e9d5 321e 	ldrd	r3, r2, [r5, #120]	@ 0x78
 800df66:	4798      	blx	r3
 800df68:	2800      	cmp	r0, #0
 800df6a:	d0d9      	beq.n	800df20 <rclc_executor_spin_some.part.0+0x208>
 800df6c:	68ab      	ldr	r3, [r5, #8]
 800df6e:	2b00      	cmp	r3, #0
 800df70:	d0d6      	beq.n	800df20 <rclc_executor_spin_some.part.0+0x208>
 800df72:	f04f 0800 	mov.w	r8, #0
 800df76:	f240 1991 	movw	r9, #401	@ 0x191
 800df7a:	f240 2a59 	movw	sl, #601	@ 0x259
 800df7e:	e00e      	b.n	800df9e <rclc_executor_spin_some.part.0+0x286>
 800df80:	f813 300b 	ldrb.w	r3, [r3, fp]
 800df84:	2b08      	cmp	r3, #8
 800df86:	d033      	beq.n	800dff0 <rclc_executor_spin_some.part.0+0x2d8>
 800df88:	2b09      	cmp	r3, #9
 800df8a:	d028      	beq.n	800dfde <rclc_executor_spin_some.part.0+0x2c6>
 800df8c:	f890 3039 	ldrb.w	r3, [r0, #57]	@ 0x39
 800df90:	b9fb      	cbnz	r3, 800dfd2 <rclc_executor_spin_some.part.0+0x2ba>
 800df92:	68ab      	ldr	r3, [r5, #8]
 800df94:	f108 0801 	add.w	r8, r8, #1
 800df98:	4598      	cmp	r8, r3
 800df9a:	d2b7      	bcs.n	800df0c <rclc_executor_spin_some.part.0+0x1f4>
 800df9c:	2400      	movs	r4, #0
 800df9e:	6868      	ldr	r0, [r5, #4]
 800dfa0:	eb00 1088 	add.w	r0, r0, r8, lsl #6
 800dfa4:	ea4f 1b88 	mov.w	fp, r8, lsl #6
 800dfa8:	f890 3038 	ldrb.w	r3, [r0, #56]	@ 0x38
 800dfac:	2b00      	cmp	r3, #0
 800dfae:	d0b7      	beq.n	800df20 <rclc_executor_spin_some.part.0+0x208>
 800dfb0:	4631      	mov	r1, r6
 800dfb2:	f7ff fa9f 	bl	800d4f4 <_rclc_take_new_data>
 800dfb6:	b118      	cbz	r0, 800dfc0 <rclc_executor_spin_some.part.0+0x2a8>
 800dfb8:	4548      	cmp	r0, r9
 800dfba:	d001      	beq.n	800dfc0 <rclc_executor_spin_some.part.0+0x2a8>
 800dfbc:	4550      	cmp	r0, sl
 800dfbe:	d10c      	bne.n	800dfda <rclc_executor_spin_some.part.0+0x2c2>
 800dfc0:	686b      	ldr	r3, [r5, #4]
 800dfc2:	eb13 000b 	adds.w	r0, r3, fp
 800dfc6:	d021      	beq.n	800e00c <rclc_executor_spin_some.part.0+0x2f4>
 800dfc8:	7842      	ldrb	r2, [r0, #1]
 800dfca:	2a00      	cmp	r2, #0
 800dfcc:	d0d8      	beq.n	800df80 <rclc_executor_spin_some.part.0+0x268>
 800dfce:	2a01      	cmp	r2, #1
 800dfd0:	d1df      	bne.n	800df92 <rclc_executor_spin_some.part.0+0x27a>
 800dfd2:	f7ff fc03 	bl	800d7dc <_rclc_execute.part.0>
 800dfd6:	2800      	cmp	r0, #0
 800dfd8:	d0db      	beq.n	800df92 <rclc_executor_spin_some.part.0+0x27a>
 800dfda:	4607      	mov	r7, r0
 800dfdc:	e796      	b.n	800df0c <rclc_executor_spin_some.part.0+0x1f4>
 800dfde:	6843      	ldr	r3, [r0, #4]
 800dfe0:	6a1a      	ldr	r2, [r3, #32]
 800dfe2:	2a00      	cmp	r2, #0
 800dfe4:	d1f5      	bne.n	800dfd2 <rclc_executor_spin_some.part.0+0x2ba>
 800dfe6:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800dfea:	2b00      	cmp	r3, #0
 800dfec:	d0d1      	beq.n	800df92 <rclc_executor_spin_some.part.0+0x27a>
 800dfee:	e7f0      	b.n	800dfd2 <rclc_executor_spin_some.part.0+0x2ba>
 800dff0:	6843      	ldr	r3, [r0, #4]
 800dff2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800dff4:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800dff8:	d1eb      	bne.n	800dfd2 <rclc_executor_spin_some.part.0+0x2ba>
 800dffa:	f893 2044 	ldrb.w	r2, [r3, #68]	@ 0x44
 800dffe:	2a00      	cmp	r2, #0
 800e000:	d1e7      	bne.n	800dfd2 <rclc_executor_spin_some.part.0+0x2ba>
 800e002:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800e006:	2b00      	cmp	r3, #0
 800e008:	d0c3      	beq.n	800df92 <rclc_executor_spin_some.part.0+0x27a>
 800e00a:	e7e2      	b.n	800dfd2 <rclc_executor_spin_some.part.0+0x2ba>
 800e00c:	270b      	movs	r7, #11
 800e00e:	e77d      	b.n	800df0c <rclc_executor_spin_some.part.0+0x1f4>
 800e010:	686a      	ldr	r2, [r5, #4]
 800e012:	e6e2      	b.n	800ddda <rclc_executor_spin_some.part.0+0xc2>
 800e014:	686a      	ldr	r2, [r5, #4]
 800e016:	e7a2      	b.n	800df5e <rclc_executor_spin_some.part.0+0x246>
 800e018:	6842      	ldr	r2, [r0, #4]
 800e01a:	6a11      	ldr	r1, [r2, #32]
 800e01c:	2900      	cmp	r1, #0
 800e01e:	f47f af21 	bne.w	800de64 <rclc_executor_spin_some.part.0+0x14c>
 800e022:	f892 2024 	ldrb.w	r2, [r2, #36]	@ 0x24
 800e026:	2a00      	cmp	r2, #0
 800e028:	f43f af0a 	beq.w	800de40 <rclc_executor_spin_some.part.0+0x128>
 800e02c:	e71a      	b.n	800de64 <rclc_executor_spin_some.part.0+0x14c>
 800e02e:	6842      	ldr	r2, [r0, #4]
 800e030:	6c11      	ldr	r1, [r2, #64]	@ 0x40
 800e032:	f031 417f 	bics.w	r1, r1, #4278190080	@ 0xff000000
 800e036:	f47f af15 	bne.w	800de64 <rclc_executor_spin_some.part.0+0x14c>
 800e03a:	f892 1044 	ldrb.w	r1, [r2, #68]	@ 0x44
 800e03e:	2900      	cmp	r1, #0
 800e040:	f47f af10 	bne.w	800de64 <rclc_executor_spin_some.part.0+0x14c>
 800e044:	f892 2043 	ldrb.w	r2, [r2, #67]	@ 0x43
 800e048:	2a00      	cmp	r2, #0
 800e04a:	f43f aef9 	beq.w	800de40 <rclc_executor_spin_some.part.0+0x128>
 800e04e:	e709      	b.n	800de64 <rclc_executor_spin_some.part.0+0x14c>
 800e050:	686a      	ldr	r2, [r5, #4]
 800e052:	461c      	mov	r4, r3
 800e054:	e783      	b.n	800df5e <rclc_executor_spin_some.part.0+0x246>
 800e056:	686a      	ldr	r2, [r5, #4]
 800e058:	461c      	mov	r4, r3
 800e05a:	e6be      	b.n	800ddda <rclc_executor_spin_some.part.0+0xc2>

0800e05c <rclc_executor_spin_some>:
 800e05c:	b190      	cbz	r0, 800e084 <rclc_executor_spin_some+0x28>
 800e05e:	b570      	push	{r4, r5, r6, lr}
 800e060:	4604      	mov	r4, r0
 800e062:	6800      	ldr	r0, [r0, #0]
 800e064:	4616      	mov	r6, r2
 800e066:	461d      	mov	r5, r3
 800e068:	f005 faf6 	bl	8013658 <rcl_context_is_valid>
 800e06c:	b130      	cbz	r0, 800e07c <rclc_executor_spin_some+0x20>
 800e06e:	4632      	mov	r2, r6
 800e070:	462b      	mov	r3, r5
 800e072:	4620      	mov	r0, r4
 800e074:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800e078:	f7ff be4e 	b.w	800dd18 <rclc_executor_spin_some.part.0>
 800e07c:	f000 f9c8 	bl	800e410 <rcutils_reset_error>
 800e080:	2001      	movs	r0, #1
 800e082:	bd70      	pop	{r4, r5, r6, pc}
 800e084:	200b      	movs	r0, #11
 800e086:	4770      	bx	lr

0800e088 <rclc_executor_spin>:
 800e088:	b1d0      	cbz	r0, 800e0c0 <rclc_executor_spin+0x38>
 800e08a:	b510      	push	{r4, lr}
 800e08c:	4604      	mov	r4, r0
 800e08e:	b082      	sub	sp, #8
 800e090:	e9d4 231a 	ldrd	r2, r3, [r4, #104]	@ 0x68
 800e094:	6820      	ldr	r0, [r4, #0]
 800e096:	e9cd 2300 	strd	r2, r3, [sp]
 800e09a:	f005 fadd 	bl	8013658 <rcl_context_is_valid>
 800e09e:	4601      	mov	r1, r0
 800e0a0:	e9dd 2300 	ldrd	r2, r3, [sp]
 800e0a4:	4620      	mov	r0, r4
 800e0a6:	b131      	cbz	r1, 800e0b6 <rclc_executor_spin+0x2e>
 800e0a8:	f7ff fe36 	bl	800dd18 <rclc_executor_spin_some.part.0>
 800e0ac:	f030 0302 	bics.w	r3, r0, #2
 800e0b0:	d0ee      	beq.n	800e090 <rclc_executor_spin+0x8>
 800e0b2:	b002      	add	sp, #8
 800e0b4:	bd10      	pop	{r4, pc}
 800e0b6:	f000 f9ab 	bl	800e410 <rcutils_reset_error>
 800e0ba:	2001      	movs	r0, #1
 800e0bc:	b002      	add	sp, #8
 800e0be:	bd10      	pop	{r4, pc}
 800e0c0:	200b      	movs	r0, #11
 800e0c2:	4770      	bx	lr

0800e0c4 <rclc_executor_handle_counters_zero_init>:
 800e0c4:	b130      	cbz	r0, 800e0d4 <rclc_executor_handle_counters_zero_init+0x10>
 800e0c6:	b508      	push	{r3, lr}
 800e0c8:	2220      	movs	r2, #32
 800e0ca:	2100      	movs	r1, #0
 800e0cc:	f00d fa0e 	bl	801b4ec <memset>
 800e0d0:	2000      	movs	r0, #0
 800e0d2:	bd08      	pop	{r3, pc}
 800e0d4:	200b      	movs	r0, #11
 800e0d6:	4770      	bx	lr

0800e0d8 <rclc_executor_handle_init>:
 800e0d8:	b168      	cbz	r0, 800e0f6 <rclc_executor_handle_init+0x1e>
 800e0da:	ed9f 7b09 	vldr	d7, [pc, #36]	@ 800e100 <rclc_executor_handle_init+0x28>
 800e0de:	2300      	movs	r3, #0
 800e0e0:	220b      	movs	r2, #11
 800e0e2:	ed80 7b0a 	vstr	d7, [r0, #40]	@ 0x28
 800e0e6:	e9c0 3301 	strd	r3, r3, [r0, #4]
 800e0ea:	e9c0 310c 	strd	r3, r1, [r0, #48]	@ 0x30
 800e0ee:	8002      	strh	r2, [r0, #0]
 800e0f0:	8703      	strh	r3, [r0, #56]	@ 0x38
 800e0f2:	4618      	mov	r0, r3
 800e0f4:	4770      	bx	lr
 800e0f6:	200b      	movs	r0, #11
 800e0f8:	4770      	bx	lr
 800e0fa:	bf00      	nop
 800e0fc:	f3af 8000 	nop.w
	...

0800e108 <rclc_support_init>:
 800e108:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e10c:	b086      	sub	sp, #24
 800e10e:	b3b8      	cbz	r0, 800e180 <rclc_support_init+0x78>
 800e110:	461c      	mov	r4, r3
 800e112:	b3ab      	cbz	r3, 800e180 <rclc_support_init+0x78>
 800e114:	460f      	mov	r7, r1
 800e116:	4690      	mov	r8, r2
 800e118:	4606      	mov	r6, r0
 800e11a:	f005 fc07 	bl	801392c <rcl_get_zero_initialized_init_options>
 800e11e:	f104 030c 	add.w	r3, r4, #12
 800e122:	9005      	str	r0, [sp, #20]
 800e124:	e893 0003 	ldmia.w	r3, {r0, r1}
 800e128:	e88d 0003 	stmia.w	sp, {r0, r1}
 800e12c:	a805      	add	r0, sp, #20
 800e12e:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 800e132:	f005 fbfd 	bl	8013930 <rcl_init_options_init>
 800e136:	4605      	mov	r5, r0
 800e138:	b9e0      	cbnz	r0, 800e174 <rclc_support_init+0x6c>
 800e13a:	ad02      	add	r5, sp, #8
 800e13c:	4628      	mov	r0, r5
 800e13e:	f005 fa81 	bl	8013644 <rcl_get_zero_initialized_context>
 800e142:	e895 0003 	ldmia.w	r5, {r0, r1}
 800e146:	4633      	mov	r3, r6
 800e148:	e886 0003 	stmia.w	r6, {r0, r1}
 800e14c:	aa05      	add	r2, sp, #20
 800e14e:	4641      	mov	r1, r8
 800e150:	4638      	mov	r0, r7
 800e152:	f005 fae7 	bl	8013724 <rcl_init>
 800e156:	4605      	mov	r5, r0
 800e158:	b9b8      	cbnz	r0, 800e18a <rclc_support_init+0x82>
 800e15a:	60b4      	str	r4, [r6, #8]
 800e15c:	4622      	mov	r2, r4
 800e15e:	f106 010c 	add.w	r1, r6, #12
 800e162:	2003      	movs	r0, #3
 800e164:	f006 fa0e 	bl	8014584 <rcl_clock_init>
 800e168:	4605      	mov	r5, r0
 800e16a:	b970      	cbnz	r0, 800e18a <rclc_support_init+0x82>
 800e16c:	a805      	add	r0, sp, #20
 800e16e:	f005 fc45 	bl	80139fc <rcl_init_options_fini>
 800e172:	b108      	cbz	r0, 800e178 <rclc_support_init+0x70>
 800e174:	f000 f94c 	bl	800e410 <rcutils_reset_error>
 800e178:	4628      	mov	r0, r5
 800e17a:	b006      	add	sp, #24
 800e17c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e180:	250b      	movs	r5, #11
 800e182:	4628      	mov	r0, r5
 800e184:	b006      	add	sp, #24
 800e186:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e18a:	f000 f941 	bl	800e410 <rcutils_reset_error>
 800e18e:	a805      	add	r0, sp, #20
 800e190:	f005 fc34 	bl	80139fc <rcl_init_options_fini>
 800e194:	2800      	cmp	r0, #0
 800e196:	d0ef      	beq.n	800e178 <rclc_support_init+0x70>
 800e198:	e7ec      	b.n	800e174 <rclc_support_init+0x6c>
 800e19a:	bf00      	nop

0800e19c <rclc_node_init_default>:
 800e19c:	b3b8      	cbz	r0, 800e20e <rclc_node_init_default+0x72>
 800e19e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800e1a2:	460d      	mov	r5, r1
 800e1a4:	b0a1      	sub	sp, #132	@ 0x84
 800e1a6:	b329      	cbz	r1, 800e1f4 <rclc_node_init_default+0x58>
 800e1a8:	4616      	mov	r6, r2
 800e1aa:	b31a      	cbz	r2, 800e1f4 <rclc_node_init_default+0x58>
 800e1ac:	461f      	mov	r7, r3
 800e1ae:	b30b      	cbz	r3, 800e1f4 <rclc_node_init_default+0x58>
 800e1b0:	f10d 0810 	add.w	r8, sp, #16
 800e1b4:	4604      	mov	r4, r0
 800e1b6:	4640      	mov	r0, r8
 800e1b8:	f005 fcd8 	bl	8013b6c <rcl_get_zero_initialized_node>
 800e1bc:	e898 0003 	ldmia.w	r8, {r0, r1}
 800e1c0:	f10d 0918 	add.w	r9, sp, #24
 800e1c4:	e884 0003 	stmia.w	r4, {r0, r1}
 800e1c8:	4648      	mov	r0, r9
 800e1ca:	f005 fe47 	bl	8013e5c <rcl_node_get_default_options>
 800e1ce:	4640      	mov	r0, r8
 800e1d0:	f005 fccc 	bl	8013b6c <rcl_get_zero_initialized_node>
 800e1d4:	f8cd 9000 	str.w	r9, [sp]
 800e1d8:	e898 0003 	ldmia.w	r8, {r0, r1}
 800e1dc:	463b      	mov	r3, r7
 800e1de:	e884 0003 	stmia.w	r4, {r0, r1}
 800e1e2:	4632      	mov	r2, r6
 800e1e4:	4629      	mov	r1, r5
 800e1e6:	4620      	mov	r0, r4
 800e1e8:	f005 fcca 	bl	8013b80 <rcl_node_init>
 800e1ec:	b930      	cbnz	r0, 800e1fc <rclc_node_init_default+0x60>
 800e1ee:	b021      	add	sp, #132	@ 0x84
 800e1f0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e1f4:	200b      	movs	r0, #11
 800e1f6:	b021      	add	sp, #132	@ 0x84
 800e1f8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e1fc:	9003      	str	r0, [sp, #12]
 800e1fe:	f000 f907 	bl	800e410 <rcutils_reset_error>
 800e202:	f000 f905 	bl	800e410 <rcutils_reset_error>
 800e206:	9803      	ldr	r0, [sp, #12]
 800e208:	b021      	add	sp, #132	@ 0x84
 800e20a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e20e:	200b      	movs	r0, #11
 800e210:	4770      	bx	lr
 800e212:	bf00      	nop

0800e214 <rclc_publisher_init_default>:
 800e214:	b368      	cbz	r0, 800e272 <rclc_publisher_init_default+0x5e>
 800e216:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e21a:	460d      	mov	r5, r1
 800e21c:	b0a0      	sub	sp, #128	@ 0x80
 800e21e:	b321      	cbz	r1, 800e26a <rclc_publisher_init_default+0x56>
 800e220:	4616      	mov	r6, r2
 800e222:	b312      	cbz	r2, 800e26a <rclc_publisher_init_default+0x56>
 800e224:	461f      	mov	r7, r3
 800e226:	b303      	cbz	r3, 800e26a <rclc_publisher_init_default+0x56>
 800e228:	4604      	mov	r4, r0
 800e22a:	f7ff f805 	bl	800d238 <rcl_get_zero_initialized_publisher>
 800e22e:	f10d 0810 	add.w	r8, sp, #16
 800e232:	6020      	str	r0, [r4, #0]
 800e234:	4640      	mov	r0, r8
 800e236:	f7ff f89b 	bl	800d370 <rcl_publisher_get_default_options>
 800e23a:	490f      	ldr	r1, [pc, #60]	@ (800e278 <rclc_publisher_init_default+0x64>)
 800e23c:	2250      	movs	r2, #80	@ 0x50
 800e23e:	4640      	mov	r0, r8
 800e240:	f00d fa73 	bl	801b72a <memcpy>
 800e244:	f8cd 8000 	str.w	r8, [sp]
 800e248:	463b      	mov	r3, r7
 800e24a:	4632      	mov	r2, r6
 800e24c:	4629      	mov	r1, r5
 800e24e:	4620      	mov	r0, r4
 800e250:	f7fe fff8 	bl	800d244 <rcl_publisher_init>
 800e254:	b910      	cbnz	r0, 800e25c <rclc_publisher_init_default+0x48>
 800e256:	b020      	add	sp, #128	@ 0x80
 800e258:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e25c:	9003      	str	r0, [sp, #12]
 800e25e:	f000 f8d7 	bl	800e410 <rcutils_reset_error>
 800e262:	9803      	ldr	r0, [sp, #12]
 800e264:	b020      	add	sp, #128	@ 0x80
 800e266:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e26a:	200b      	movs	r0, #11
 800e26c:	b020      	add	sp, #128	@ 0x80
 800e26e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e272:	200b      	movs	r0, #11
 800e274:	4770      	bx	lr
 800e276:	bf00      	nop
 800e278:	0801d508 	.word	0x0801d508

0800e27c <rclc_subscription_init_default>:
 800e27c:	b368      	cbz	r0, 800e2da <rclc_subscription_init_default+0x5e>
 800e27e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e282:	460d      	mov	r5, r1
 800e284:	b0a0      	sub	sp, #128	@ 0x80
 800e286:	b321      	cbz	r1, 800e2d2 <rclc_subscription_init_default+0x56>
 800e288:	4616      	mov	r6, r2
 800e28a:	b312      	cbz	r2, 800e2d2 <rclc_subscription_init_default+0x56>
 800e28c:	461f      	mov	r7, r3
 800e28e:	b303      	cbz	r3, 800e2d2 <rclc_subscription_init_default+0x56>
 800e290:	4604      	mov	r4, r0
 800e292:	f006 f81b 	bl	80142cc <rcl_get_zero_initialized_subscription>
 800e296:	f10d 0810 	add.w	r8, sp, #16
 800e29a:	6020      	str	r0, [r4, #0]
 800e29c:	4640      	mov	r0, r8
 800e29e:	f006 f8c3 	bl	8014428 <rcl_subscription_get_default_options>
 800e2a2:	490f      	ldr	r1, [pc, #60]	@ (800e2e0 <rclc_subscription_init_default+0x64>)
 800e2a4:	2250      	movs	r2, #80	@ 0x50
 800e2a6:	4640      	mov	r0, r8
 800e2a8:	f00d fa3f 	bl	801b72a <memcpy>
 800e2ac:	f8cd 8000 	str.w	r8, [sp]
 800e2b0:	463b      	mov	r3, r7
 800e2b2:	4632      	mov	r2, r6
 800e2b4:	4629      	mov	r1, r5
 800e2b6:	4620      	mov	r0, r4
 800e2b8:	f006 f80e 	bl	80142d8 <rcl_subscription_init>
 800e2bc:	b910      	cbnz	r0, 800e2c4 <rclc_subscription_init_default+0x48>
 800e2be:	b020      	add	sp, #128	@ 0x80
 800e2c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e2c4:	9003      	str	r0, [sp, #12]
 800e2c6:	f000 f8a3 	bl	800e410 <rcutils_reset_error>
 800e2ca:	9803      	ldr	r0, [sp, #12]
 800e2cc:	b020      	add	sp, #128	@ 0x80
 800e2ce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e2d2:	200b      	movs	r0, #11
 800e2d4:	b020      	add	sp, #128	@ 0x80
 800e2d6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e2da:	200b      	movs	r0, #11
 800e2dc:	4770      	bx	lr
 800e2de:	bf00      	nop
 800e2e0:	0801d558 	.word	0x0801d558

0800e2e4 <rclc_timer_init_default>:
 800e2e4:	b360      	cbz	r0, 800e340 <rclc_timer_init_default+0x5c>
 800e2e6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e2ea:	460e      	mov	r6, r1
 800e2ec:	b08a      	sub	sp, #40	@ 0x28
 800e2ee:	b319      	cbz	r1, 800e338 <rclc_timer_init_default+0x54>
 800e2f0:	4690      	mov	r8, r2
 800e2f2:	461f      	mov	r7, r3
 800e2f4:	4605      	mov	r5, r0
 800e2f6:	f006 fb23 	bl	8014940 <rcl_get_zero_initialized_timer>
 800e2fa:	68b4      	ldr	r4, [r6, #8]
 800e2fc:	6028      	str	r0, [r5, #0]
 800e2fe:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800e300:	f10d 0c0c 	add.w	ip, sp, #12
 800e304:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800e308:	6823      	ldr	r3, [r4, #0]
 800e30a:	f8cc 3000 	str.w	r3, [ip]
 800e30e:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800e310:	9302      	str	r3, [sp, #8]
 800e312:	e9cd 8700 	strd	r8, r7, [sp]
 800e316:	4628      	mov	r0, r5
 800e318:	4632      	mov	r2, r6
 800e31a:	f106 010c 	add.w	r1, r6, #12
 800e31e:	f006 fb17 	bl	8014950 <rcl_timer_init>
 800e322:	b910      	cbnz	r0, 800e32a <rclc_timer_init_default+0x46>
 800e324:	b00a      	add	sp, #40	@ 0x28
 800e326:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e32a:	9009      	str	r0, [sp, #36]	@ 0x24
 800e32c:	f000 f870 	bl	800e410 <rcutils_reset_error>
 800e330:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800e332:	b00a      	add	sp, #40	@ 0x28
 800e334:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e338:	200b      	movs	r0, #11
 800e33a:	b00a      	add	sp, #40	@ 0x28
 800e33c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e340:	200b      	movs	r0, #11
 800e342:	4770      	bx	lr

0800e344 <__default_zero_allocate>:
 800e344:	f00c bbe8 	b.w	801ab18 <calloc>

0800e348 <__default_reallocate>:
 800e348:	f00c bd86 	b.w	801ae58 <realloc>

0800e34c <__default_deallocate>:
 800e34c:	f00c bc62 	b.w	801ac14 <free>

0800e350 <__default_allocate>:
 800e350:	f00c bc58 	b.w	801ac04 <malloc>

0800e354 <rcutils_get_zero_initialized_allocator>:
 800e354:	b510      	push	{r4, lr}
 800e356:	4c05      	ldr	r4, [pc, #20]	@ (800e36c <rcutils_get_zero_initialized_allocator+0x18>)
 800e358:	4686      	mov	lr, r0
 800e35a:	4684      	mov	ip, r0
 800e35c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800e35e:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800e362:	6823      	ldr	r3, [r4, #0]
 800e364:	f8cc 3000 	str.w	r3, [ip]
 800e368:	4670      	mov	r0, lr
 800e36a:	bd10      	pop	{r4, pc}
 800e36c:	0801d5a8 	.word	0x0801d5a8

0800e370 <rcutils_set_default_allocator>:
 800e370:	b1a8      	cbz	r0, 800e39e <rcutils_set_default_allocator+0x2e>
 800e372:	6802      	ldr	r2, [r0, #0]
 800e374:	b1a2      	cbz	r2, 800e3a0 <rcutils_set_default_allocator+0x30>
 800e376:	6841      	ldr	r1, [r0, #4]
 800e378:	b1a1      	cbz	r1, 800e3a4 <rcutils_set_default_allocator+0x34>
 800e37a:	b410      	push	{r4}
 800e37c:	68c4      	ldr	r4, [r0, #12]
 800e37e:	b164      	cbz	r4, 800e39a <rcutils_set_default_allocator+0x2a>
 800e380:	6880      	ldr	r0, [r0, #8]
 800e382:	b138      	cbz	r0, 800e394 <rcutils_set_default_allocator+0x24>
 800e384:	4b08      	ldr	r3, [pc, #32]	@ (800e3a8 <rcutils_set_default_allocator+0x38>)
 800e386:	601a      	str	r2, [r3, #0]
 800e388:	2200      	movs	r2, #0
 800e38a:	e9c3 4203 	strd	r4, r2, [r3, #12]
 800e38e:	e9c3 1001 	strd	r1, r0, [r3, #4]
 800e392:	2001      	movs	r0, #1
 800e394:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e398:	4770      	bx	lr
 800e39a:	4620      	mov	r0, r4
 800e39c:	e7fa      	b.n	800e394 <rcutils_set_default_allocator+0x24>
 800e39e:	4770      	bx	lr
 800e3a0:	4610      	mov	r0, r2
 800e3a2:	4770      	bx	lr
 800e3a4:	4608      	mov	r0, r1
 800e3a6:	4770      	bx	lr
 800e3a8:	20000030 	.word	0x20000030

0800e3ac <rcutils_get_default_allocator>:
 800e3ac:	b510      	push	{r4, lr}
 800e3ae:	4c05      	ldr	r4, [pc, #20]	@ (800e3c4 <rcutils_get_default_allocator+0x18>)
 800e3b0:	4686      	mov	lr, r0
 800e3b2:	4684      	mov	ip, r0
 800e3b4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800e3b6:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800e3ba:	6823      	ldr	r3, [r4, #0]
 800e3bc:	f8cc 3000 	str.w	r3, [ip]
 800e3c0:	4670      	mov	r0, lr
 800e3c2:	bd10      	pop	{r4, pc}
 800e3c4:	20000030 	.word	0x20000030

0800e3c8 <rcutils_allocator_is_valid>:
 800e3c8:	b158      	cbz	r0, 800e3e2 <rcutils_allocator_is_valid+0x1a>
 800e3ca:	6803      	ldr	r3, [r0, #0]
 800e3cc:	b143      	cbz	r3, 800e3e0 <rcutils_allocator_is_valid+0x18>
 800e3ce:	6843      	ldr	r3, [r0, #4]
 800e3d0:	b133      	cbz	r3, 800e3e0 <rcutils_allocator_is_valid+0x18>
 800e3d2:	68c3      	ldr	r3, [r0, #12]
 800e3d4:	b123      	cbz	r3, 800e3e0 <rcutils_allocator_is_valid+0x18>
 800e3d6:	6880      	ldr	r0, [r0, #8]
 800e3d8:	3800      	subs	r0, #0
 800e3da:	bf18      	it	ne
 800e3dc:	2001      	movne	r0, #1
 800e3de:	4770      	bx	lr
 800e3e0:	4618      	mov	r0, r3
 800e3e2:	4770      	bx	lr

0800e3e4 <rcutils_get_error_string>:
 800e3e4:	4b06      	ldr	r3, [pc, #24]	@ (800e400 <rcutils_get_error_string+0x1c>)
 800e3e6:	781b      	ldrb	r3, [r3, #0]
 800e3e8:	b13b      	cbz	r3, 800e3fa <rcutils_get_error_string+0x16>
 800e3ea:	4b06      	ldr	r3, [pc, #24]	@ (800e404 <rcutils_get_error_string+0x20>)
 800e3ec:	781a      	ldrb	r2, [r3, #0]
 800e3ee:	b90a      	cbnz	r2, 800e3f4 <rcutils_get_error_string+0x10>
 800e3f0:	2201      	movs	r2, #1
 800e3f2:	701a      	strb	r2, [r3, #0]
 800e3f4:	4b04      	ldr	r3, [pc, #16]	@ (800e408 <rcutils_get_error_string+0x24>)
 800e3f6:	7818      	ldrb	r0, [r3, #0]
 800e3f8:	4770      	bx	lr
 800e3fa:	4b04      	ldr	r3, [pc, #16]	@ (800e40c <rcutils_get_error_string+0x28>)
 800e3fc:	7818      	ldrb	r0, [r3, #0]
 800e3fe:	4770      	bx	lr
 800e400:	20007758 	.word	0x20007758
 800e404:	20007771 	.word	0x20007771
 800e408:	20007770 	.word	0x20007770
 800e40c:	0801d5bc 	.word	0x0801d5bc

0800e410 <rcutils_reset_error>:
 800e410:	ed9f 7b07 	vldr	d7, [pc, #28]	@ 800e430 <rcutils_reset_error+0x20>
 800e414:	4a08      	ldr	r2, [pc, #32]	@ (800e438 <rcutils_reset_error+0x28>)
 800e416:	4809      	ldr	r0, [pc, #36]	@ (800e43c <rcutils_reset_error+0x2c>)
 800e418:	4909      	ldr	r1, [pc, #36]	@ (800e440 <rcutils_reset_error+0x30>)
 800e41a:	2300      	movs	r3, #0
 800e41c:	8013      	strh	r3, [r2, #0]
 800e41e:	ed82 7b02 	vstr	d7, [r2, #8]
 800e422:	4a08      	ldr	r2, [pc, #32]	@ (800e444 <rcutils_reset_error+0x34>)
 800e424:	7003      	strb	r3, [r0, #0]
 800e426:	700b      	strb	r3, [r1, #0]
 800e428:	7013      	strb	r3, [r2, #0]
 800e42a:	4770      	bx	lr
 800e42c:	f3af 8000 	nop.w
	...
 800e438:	20007760 	.word	0x20007760
 800e43c:	20007771 	.word	0x20007771
 800e440:	20007770 	.word	0x20007770
 800e444:	20007758 	.word	0x20007758

0800e448 <rcutils_system_time_now>:
 800e448:	b308      	cbz	r0, 800e48e <rcutils_system_time_now+0x46>
 800e44a:	b570      	push	{r4, r5, r6, lr}
 800e44c:	b084      	sub	sp, #16
 800e44e:	4604      	mov	r4, r0
 800e450:	4669      	mov	r1, sp
 800e452:	2001      	movs	r0, #1
 800e454:	f7f4 f818 	bl	8002488 <clock_gettime>
 800e458:	e9dd 3500 	ldrd	r3, r5, [sp]
 800e45c:	2d00      	cmp	r5, #0
 800e45e:	db13      	blt.n	800e488 <rcutils_system_time_now+0x40>
 800e460:	9902      	ldr	r1, [sp, #8]
 800e462:	2900      	cmp	r1, #0
 800e464:	db0d      	blt.n	800e482 <rcutils_system_time_now+0x3a>
 800e466:	4e0b      	ldr	r6, [pc, #44]	@ (800e494 <rcutils_system_time_now+0x4c>)
 800e468:	fba3 3206 	umull	r3, r2, r3, r6
 800e46c:	185b      	adds	r3, r3, r1
 800e46e:	fb06 2205 	mla	r2, r6, r5, r2
 800e472:	f04f 0000 	mov.w	r0, #0
 800e476:	eb42 72e1 	adc.w	r2, r2, r1, asr #31
 800e47a:	e9c4 3200 	strd	r3, r2, [r4]
 800e47e:	b004      	add	sp, #16
 800e480:	bd70      	pop	{r4, r5, r6, pc}
 800e482:	ea53 0205 	orrs.w	r2, r3, r5
 800e486:	d1ee      	bne.n	800e466 <rcutils_system_time_now+0x1e>
 800e488:	2002      	movs	r0, #2
 800e48a:	b004      	add	sp, #16
 800e48c:	bd70      	pop	{r4, r5, r6, pc}
 800e48e:	200b      	movs	r0, #11
 800e490:	4770      	bx	lr
 800e492:	bf00      	nop
 800e494:	3b9aca00 	.word	0x3b9aca00

0800e498 <rcutils_steady_time_now>:
 800e498:	b308      	cbz	r0, 800e4de <rcutils_steady_time_now+0x46>
 800e49a:	b570      	push	{r4, r5, r6, lr}
 800e49c:	b084      	sub	sp, #16
 800e49e:	4604      	mov	r4, r0
 800e4a0:	4669      	mov	r1, sp
 800e4a2:	2000      	movs	r0, #0
 800e4a4:	f7f3 fff0 	bl	8002488 <clock_gettime>
 800e4a8:	e9dd 3500 	ldrd	r3, r5, [sp]
 800e4ac:	2d00      	cmp	r5, #0
 800e4ae:	db13      	blt.n	800e4d8 <rcutils_steady_time_now+0x40>
 800e4b0:	9902      	ldr	r1, [sp, #8]
 800e4b2:	2900      	cmp	r1, #0
 800e4b4:	db0d      	blt.n	800e4d2 <rcutils_steady_time_now+0x3a>
 800e4b6:	4e0b      	ldr	r6, [pc, #44]	@ (800e4e4 <rcutils_steady_time_now+0x4c>)
 800e4b8:	fba3 3206 	umull	r3, r2, r3, r6
 800e4bc:	185b      	adds	r3, r3, r1
 800e4be:	fb06 2205 	mla	r2, r6, r5, r2
 800e4c2:	f04f 0000 	mov.w	r0, #0
 800e4c6:	eb42 72e1 	adc.w	r2, r2, r1, asr #31
 800e4ca:	e9c4 3200 	strd	r3, r2, [r4]
 800e4ce:	b004      	add	sp, #16
 800e4d0:	bd70      	pop	{r4, r5, r6, pc}
 800e4d2:	ea53 0205 	orrs.w	r2, r3, r5
 800e4d6:	d1ee      	bne.n	800e4b6 <rcutils_steady_time_now+0x1e>
 800e4d8:	2002      	movs	r0, #2
 800e4da:	b004      	add	sp, #16
 800e4dc:	bd70      	pop	{r4, r5, r6, pc}
 800e4de:	200b      	movs	r0, #11
 800e4e0:	4770      	bx	lr
 800e4e2:	bf00      	nop
 800e4e4:	3b9aca00 	.word	0x3b9aca00

0800e4e8 <rmw_get_default_publisher_options>:
 800e4e8:	2200      	movs	r2, #0
 800e4ea:	6002      	str	r2, [r0, #0]
 800e4ec:	7102      	strb	r2, [r0, #4]
 800e4ee:	4770      	bx	lr

0800e4f0 <rmw_uros_set_custom_transport>:
 800e4f0:	b470      	push	{r4, r5, r6}
 800e4f2:	e9dd 5603 	ldrd	r5, r6, [sp, #12]
 800e4f6:	b162      	cbz	r2, 800e512 <rmw_uros_set_custom_transport+0x22>
 800e4f8:	b15b      	cbz	r3, 800e512 <rmw_uros_set_custom_transport+0x22>
 800e4fa:	b155      	cbz	r5, 800e512 <rmw_uros_set_custom_transport+0x22>
 800e4fc:	b14e      	cbz	r6, 800e512 <rmw_uros_set_custom_transport+0x22>
 800e4fe:	4c06      	ldr	r4, [pc, #24]	@ (800e518 <rmw_uros_set_custom_transport+0x28>)
 800e500:	7020      	strb	r0, [r4, #0]
 800e502:	e9c4 1201 	strd	r1, r2, [r4, #4]
 800e506:	e9c4 3503 	strd	r3, r5, [r4, #12]
 800e50a:	6166      	str	r6, [r4, #20]
 800e50c:	2000      	movs	r0, #0
 800e50e:	bc70      	pop	{r4, r5, r6}
 800e510:	4770      	bx	lr
 800e512:	200b      	movs	r0, #11
 800e514:	bc70      	pop	{r4, r5, r6}
 800e516:	4770      	bx	lr
 800e518:	20007774 	.word	0x20007774

0800e51c <flush_session>:
 800e51c:	6fc9      	ldr	r1, [r1, #124]	@ 0x7c
 800e51e:	f003 b87b 	b.w	8011618 <uxr_run_session_until_confirm_delivery>
 800e522:	bf00      	nop

0800e524 <rmw_publish>:
 800e524:	2800      	cmp	r0, #0
 800e526:	d053      	beq.n	800e5d0 <rmw_publish+0xac>
 800e528:	b570      	push	{r4, r5, r6, lr}
 800e52a:	460d      	mov	r5, r1
 800e52c:	b08e      	sub	sp, #56	@ 0x38
 800e52e:	2900      	cmp	r1, #0
 800e530:	d04b      	beq.n	800e5ca <rmw_publish+0xa6>
 800e532:	4604      	mov	r4, r0
 800e534:	6800      	ldr	r0, [r0, #0]
 800e536:	f000 fced 	bl	800ef14 <is_uxrce_rmw_identifier_valid>
 800e53a:	2800      	cmp	r0, #0
 800e53c:	d045      	beq.n	800e5ca <rmw_publish+0xa6>
 800e53e:	6866      	ldr	r6, [r4, #4]
 800e540:	2e00      	cmp	r6, #0
 800e542:	d042      	beq.n	800e5ca <rmw_publish+0xa6>
 800e544:	69b4      	ldr	r4, [r6, #24]
 800e546:	4628      	mov	r0, r5
 800e548:	6923      	ldr	r3, [r4, #16]
 800e54a:	4798      	blx	r3
 800e54c:	69f3      	ldr	r3, [r6, #28]
 800e54e:	9005      	str	r0, [sp, #20]
 800e550:	b113      	cbz	r3, 800e558 <rmw_publish+0x34>
 800e552:	a805      	add	r0, sp, #20
 800e554:	4798      	blx	r3
 800e556:	9805      	ldr	r0, [sp, #20]
 800e558:	f8d6 3080 	ldr.w	r3, [r6, #128]	@ 0x80
 800e55c:	691b      	ldr	r3, [r3, #16]
 800e55e:	9000      	str	r0, [sp, #0]
 800e560:	6972      	ldr	r2, [r6, #20]
 800e562:	6fb1      	ldr	r1, [r6, #120]	@ 0x78
 800e564:	f503 7028 	add.w	r0, r3, #672	@ 0x2a0
 800e568:	ab06      	add	r3, sp, #24
 800e56a:	f003 fe41 	bl	80121f0 <uxr_prepare_output_stream>
 800e56e:	b1d8      	cbz	r0, 800e5a8 <rmw_publish+0x84>
 800e570:	68a3      	ldr	r3, [r4, #8]
 800e572:	a906      	add	r1, sp, #24
 800e574:	4628      	mov	r0, r5
 800e576:	4798      	blx	r3
 800e578:	6a33      	ldr	r3, [r6, #32]
 800e57a:	4604      	mov	r4, r0
 800e57c:	b10b      	cbz	r3, 800e582 <rmw_publish+0x5e>
 800e57e:	a806      	add	r0, sp, #24
 800e580:	4798      	blx	r3
 800e582:	f896 307a 	ldrb.w	r3, [r6, #122]	@ 0x7a
 800e586:	2b01      	cmp	r3, #1
 800e588:	f8d6 3080 	ldr.w	r3, [r6, #128]	@ 0x80
 800e58c:	d022      	beq.n	800e5d4 <rmw_publish+0xb0>
 800e58e:	6918      	ldr	r0, [r3, #16]
 800e590:	6ff1      	ldr	r1, [r6, #124]	@ 0x7c
 800e592:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800e596:	f003 f83f 	bl	8011618 <uxr_run_session_until_confirm_delivery>
 800e59a:	4020      	ands	r0, r4
 800e59c:	b2c4      	uxtb	r4, r0
 800e59e:	f084 0001 	eor.w	r0, r4, #1
 800e5a2:	b2c0      	uxtb	r0, r0
 800e5a4:	b00e      	add	sp, #56	@ 0x38
 800e5a6:	bd70      	pop	{r4, r5, r6, pc}
 800e5a8:	f8d6 3080 	ldr.w	r3, [r6, #128]	@ 0x80
 800e5ac:	6918      	ldr	r0, [r3, #16]
 800e5ae:	9b05      	ldr	r3, [sp, #20]
 800e5b0:	9300      	str	r3, [sp, #0]
 800e5b2:	4b0b      	ldr	r3, [pc, #44]	@ (800e5e0 <rmw_publish+0xbc>)
 800e5b4:	9301      	str	r3, [sp, #4]
 800e5b6:	9602      	str	r6, [sp, #8]
 800e5b8:	6972      	ldr	r2, [r6, #20]
 800e5ba:	6fb1      	ldr	r1, [r6, #120]	@ 0x78
 800e5bc:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800e5c0:	ab06      	add	r3, sp, #24
 800e5c2:	f003 fe45 	bl	8012250 <uxr_prepare_output_stream_fragmented>
 800e5c6:	2800      	cmp	r0, #0
 800e5c8:	d1d2      	bne.n	800e570 <rmw_publish+0x4c>
 800e5ca:	2001      	movs	r0, #1
 800e5cc:	b00e      	add	sp, #56	@ 0x38
 800e5ce:	bd70      	pop	{r4, r5, r6, pc}
 800e5d0:	2001      	movs	r0, #1
 800e5d2:	4770      	bx	lr
 800e5d4:	6918      	ldr	r0, [r3, #16]
 800e5d6:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800e5da:	f002 fc5d 	bl	8010e98 <uxr_flash_output_streams>
 800e5de:	e7de      	b.n	800e59e <rmw_publish+0x7a>
 800e5e0:	0800e51d 	.word	0x0800e51d

0800e5e4 <rmw_create_publisher>:
 800e5e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e5e8:	b087      	sub	sp, #28
 800e5ea:	2800      	cmp	r0, #0
 800e5ec:	f000 80cc 	beq.w	800e788 <rmw_create_publisher+0x1a4>
 800e5f0:	460e      	mov	r6, r1
 800e5f2:	2900      	cmp	r1, #0
 800e5f4:	f000 80c8 	beq.w	800e788 <rmw_create_publisher+0x1a4>
 800e5f8:	4604      	mov	r4, r0
 800e5fa:	6800      	ldr	r0, [r0, #0]
 800e5fc:	4615      	mov	r5, r2
 800e5fe:	4698      	mov	r8, r3
 800e600:	f000 fc88 	bl	800ef14 <is_uxrce_rmw_identifier_valid>
 800e604:	2800      	cmp	r0, #0
 800e606:	f000 80bf 	beq.w	800e788 <rmw_create_publisher+0x1a4>
 800e60a:	2d00      	cmp	r5, #0
 800e60c:	f000 80bc 	beq.w	800e788 <rmw_create_publisher+0x1a4>
 800e610:	782b      	ldrb	r3, [r5, #0]
 800e612:	2b00      	cmp	r3, #0
 800e614:	f000 80b8 	beq.w	800e788 <rmw_create_publisher+0x1a4>
 800e618:	f1b8 0f00 	cmp.w	r8, #0
 800e61c:	f000 80b4 	beq.w	800e788 <rmw_create_publisher+0x1a4>
 800e620:	485c      	ldr	r0, [pc, #368]	@ (800e794 <rmw_create_publisher+0x1b0>)
 800e622:	f8d4 9004 	ldr.w	r9, [r4, #4]
 800e626:	f008 fc63 	bl	8016ef0 <get_memory>
 800e62a:	2800      	cmp	r0, #0
 800e62c:	f000 80ac 	beq.w	800e788 <rmw_create_publisher+0x1a4>
 800e630:	6884      	ldr	r4, [r0, #8]
 800e632:	f8c4 4088 	str.w	r4, [r4, #136]	@ 0x88
 800e636:	f008 fcc3 	bl	8016fc0 <rmw_get_implementation_identifier>
 800e63a:	f104 0a9c 	add.w	sl, r4, #156	@ 0x9c
 800e63e:	f8c4 0084 	str.w	r0, [r4, #132]	@ 0x84
 800e642:	f8c4 a08c 	str.w	sl, [r4, #140]	@ 0x8c
 800e646:	4628      	mov	r0, r5
 800e648:	f7f1 fdcc 	bl	80001e4 <strlen>
 800e64c:	3001      	adds	r0, #1
 800e64e:	283c      	cmp	r0, #60	@ 0x3c
 800e650:	f104 0784 	add.w	r7, r4, #132	@ 0x84
 800e654:	f200 8091 	bhi.w	800e77a <rmw_create_publisher+0x196>
 800e658:	4a4f      	ldr	r2, [pc, #316]	@ (800e798 <rmw_create_publisher+0x1b4>)
 800e65a:	462b      	mov	r3, r5
 800e65c:	213c      	movs	r1, #60	@ 0x3c
 800e65e:	4650      	mov	r0, sl
 800e660:	f00c fdd6 	bl	801b210 <sniprintf>
 800e664:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800e668:	67e3      	str	r3, [r4, #124]	@ 0x7c
 800e66a:	4641      	mov	r1, r8
 800e66c:	f8c4 9080 	str.w	r9, [r4, #128]	@ 0x80
 800e670:	2250      	movs	r2, #80	@ 0x50
 800e672:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 800e676:	f00d f858 	bl	801b72a <memcpy>
 800e67a:	f898 3008 	ldrb.w	r3, [r8, #8]
 800e67e:	4947      	ldr	r1, [pc, #284]	@ (800e79c <rmw_create_publisher+0x1b8>)
 800e680:	2b02      	cmp	r3, #2
 800e682:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800e686:	bf0c      	ite	eq
 800e688:	f8d3 337c 	ldreq.w	r3, [r3, #892]	@ 0x37c
 800e68c:	f8d3 3378 	ldrne.w	r3, [r3, #888]	@ 0x378
 800e690:	67a3      	str	r3, [r4, #120]	@ 0x78
 800e692:	2300      	movs	r3, #0
 800e694:	e9c4 3307 	strd	r3, r3, [r4, #28]
 800e698:	4630      	mov	r0, r6
 800e69a:	f000 fc49 	bl	800ef30 <get_message_typesupport_handle>
 800e69e:	2800      	cmp	r0, #0
 800e6a0:	d06b      	beq.n	800e77a <rmw_create_publisher+0x196>
 800e6a2:	6842      	ldr	r2, [r0, #4]
 800e6a4:	61a2      	str	r2, [r4, #24]
 800e6a6:	2a00      	cmp	r2, #0
 800e6a8:	d067      	beq.n	800e77a <rmw_create_publisher+0x196>
 800e6aa:	4629      	mov	r1, r5
 800e6ac:	4643      	mov	r3, r8
 800e6ae:	4648      	mov	r0, r9
 800e6b0:	f008 feec 	bl	801748c <create_topic>
 800e6b4:	6260      	str	r0, [r4, #36]	@ 0x24
 800e6b6:	2800      	cmp	r0, #0
 800e6b8:	d063      	beq.n	800e782 <rmw_create_publisher+0x19e>
 800e6ba:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800e6be:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800e6c2:	2103      	movs	r1, #3
 800e6c4:	f8b3 0598 	ldrh.w	r0, [r3, #1432]	@ 0x598
 800e6c8:	1c42      	adds	r2, r0, #1
 800e6ca:	f8a3 2598 	strh.w	r2, [r3, #1432]	@ 0x598
 800e6ce:	f002 fa93 	bl	8010bf8 <uxr_object_id>
 800e6d2:	f8d4 2080 	ldr.w	r2, [r4, #128]	@ 0x80
 800e6d6:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800e6da:	6120      	str	r0, [r4, #16]
 800e6dc:	f8d3 3384 	ldr.w	r3, [r3, #900]	@ 0x384
 800e6e0:	6910      	ldr	r0, [r2, #16]
 800e6e2:	2506      	movs	r5, #6
 800e6e4:	9500      	str	r5, [sp, #0]
 800e6e6:	6819      	ldr	r1, [r3, #0]
 800e6e8:	6922      	ldr	r2, [r4, #16]
 800e6ea:	f8d9 3014 	ldr.w	r3, [r9, #20]
 800e6ee:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800e6f2:	f002 f933 	bl	801095c <uxr_buffer_create_publisher_bin>
 800e6f6:	4602      	mov	r2, r0
 800e6f8:	f8d9 0010 	ldr.w	r0, [r9, #16]
 800e6fc:	f8d0 338c 	ldr.w	r3, [r0, #908]	@ 0x38c
 800e700:	f8d0 1384 	ldr.w	r1, [r0, #900]	@ 0x384
 800e704:	f000 fb86 	bl	800ee14 <run_xrce_session>
 800e708:	b3b8      	cbz	r0, 800e77a <rmw_create_publisher+0x196>
 800e70a:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800e70e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800e712:	2105      	movs	r1, #5
 800e714:	f8b3 059a 	ldrh.w	r0, [r3, #1434]	@ 0x59a
 800e718:	1c42      	adds	r2, r0, #1
 800e71a:	f8a3 259a 	strh.w	r2, [r3, #1434]	@ 0x59a
 800e71e:	f002 fa6b 	bl	8010bf8 <uxr_object_id>
 800e722:	f8d4 3080 	ldr.w	r3, [r4, #128]	@ 0x80
 800e726:	6160      	str	r0, [r4, #20]
 800e728:	691e      	ldr	r6, [r3, #16]
 800e72a:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800e72e:	f8d4 b024 	ldr.w	fp, [r4, #36]	@ 0x24
 800e732:	f10d 0a10 	add.w	sl, sp, #16
 800e736:	4641      	mov	r1, r8
 800e738:	4650      	mov	r0, sl
 800e73a:	f8d3 8384 	ldr.w	r8, [r3, #900]	@ 0x384
 800e73e:	f000 fb85 	bl	800ee4c <convert_qos_profile>
 800e742:	9503      	str	r5, [sp, #12]
 800e744:	e89a 0003 	ldmia.w	sl, {r0, r1}
 800e748:	9001      	str	r0, [sp, #4]
 800e74a:	f8ad 1008 	strh.w	r1, [sp, #8]
 800e74e:	f8db 3010 	ldr.w	r3, [fp, #16]
 800e752:	9300      	str	r3, [sp, #0]
 800e754:	f506 7628 	add.w	r6, r6, #672	@ 0x2a0
 800e758:	e9d4 3204 	ldrd	r3, r2, [r4, #16]
 800e75c:	f8d8 1000 	ldr.w	r1, [r8]
 800e760:	4630      	mov	r0, r6
 800e762:	f002 f95b 	bl	8010a1c <uxr_buffer_create_datawriter_bin>
 800e766:	4602      	mov	r2, r0
 800e768:	f8d9 0010 	ldr.w	r0, [r9, #16]
 800e76c:	f8d0 338c 	ldr.w	r3, [r0, #908]	@ 0x38c
 800e770:	f8d0 1384 	ldr.w	r1, [r0, #900]	@ 0x384
 800e774:	f000 fb4e 	bl	800ee14 <run_xrce_session>
 800e778:	b938      	cbnz	r0, 800e78a <rmw_create_publisher+0x1a6>
 800e77a:	6a60      	ldr	r0, [r4, #36]	@ 0x24
 800e77c:	b108      	cbz	r0, 800e782 <rmw_create_publisher+0x19e>
 800e77e:	f000 fa47 	bl	800ec10 <rmw_uxrce_fini_topic_memory>
 800e782:	4638      	mov	r0, r7
 800e784:	f000 f9ec 	bl	800eb60 <rmw_uxrce_fini_publisher_memory>
 800e788:	2700      	movs	r7, #0
 800e78a:	4638      	mov	r0, r7
 800e78c:	b007      	add	sp, #28
 800e78e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e792:	bf00      	nop
 800e794:	2000c06c 	.word	0x2000c06c
 800e798:	0801d5f4 	.word	0x0801d5f4
 800e79c:	0801d5c0 	.word	0x0801d5c0

0800e7a0 <rmw_publisher_get_actual_qos>:
 800e7a0:	b150      	cbz	r0, 800e7b8 <rmw_publisher_get_actual_qos+0x18>
 800e7a2:	b508      	push	{r3, lr}
 800e7a4:	460b      	mov	r3, r1
 800e7a6:	b149      	cbz	r1, 800e7bc <rmw_publisher_get_actual_qos+0x1c>
 800e7a8:	6841      	ldr	r1, [r0, #4]
 800e7aa:	2250      	movs	r2, #80	@ 0x50
 800e7ac:	3128      	adds	r1, #40	@ 0x28
 800e7ae:	4618      	mov	r0, r3
 800e7b0:	f00c ffbb 	bl	801b72a <memcpy>
 800e7b4:	2000      	movs	r0, #0
 800e7b6:	bd08      	pop	{r3, pc}
 800e7b8:	200b      	movs	r0, #11
 800e7ba:	4770      	bx	lr
 800e7bc:	200b      	movs	r0, #11
 800e7be:	bd08      	pop	{r3, pc}

0800e7c0 <rmw_destroy_publisher>:
 800e7c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e7c2:	b128      	cbz	r0, 800e7d0 <rmw_destroy_publisher+0x10>
 800e7c4:	4604      	mov	r4, r0
 800e7c6:	6800      	ldr	r0, [r0, #0]
 800e7c8:	460d      	mov	r5, r1
 800e7ca:	f000 fba3 	bl	800ef14 <is_uxrce_rmw_identifier_valid>
 800e7ce:	b910      	cbnz	r0, 800e7d6 <rmw_destroy_publisher+0x16>
 800e7d0:	2401      	movs	r4, #1
 800e7d2:	4620      	mov	r0, r4
 800e7d4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e7d6:	6863      	ldr	r3, [r4, #4]
 800e7d8:	2b00      	cmp	r3, #0
 800e7da:	d0f9      	beq.n	800e7d0 <rmw_destroy_publisher+0x10>
 800e7dc:	2d00      	cmp	r5, #0
 800e7de:	d0f7      	beq.n	800e7d0 <rmw_destroy_publisher+0x10>
 800e7e0:	6828      	ldr	r0, [r5, #0]
 800e7e2:	f000 fb97 	bl	800ef14 <is_uxrce_rmw_identifier_valid>
 800e7e6:	2800      	cmp	r0, #0
 800e7e8:	d0f2      	beq.n	800e7d0 <rmw_destroy_publisher+0x10>
 800e7ea:	686c      	ldr	r4, [r5, #4]
 800e7ec:	2c00      	cmp	r4, #0
 800e7ee:	d0ef      	beq.n	800e7d0 <rmw_destroy_publisher+0x10>
 800e7f0:	6a60      	ldr	r0, [r4, #36]	@ 0x24
 800e7f2:	f8d4 7080 	ldr.w	r7, [r4, #128]	@ 0x80
 800e7f6:	f008 fe99 	bl	801752c <destroy_topic>
 800e7fa:	f8d4 3080 	ldr.w	r3, [r4, #128]	@ 0x80
 800e7fe:	6962      	ldr	r2, [r4, #20]
 800e800:	6918      	ldr	r0, [r3, #16]
 800e802:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 800e806:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800e80a:	6819      	ldr	r1, [r3, #0]
 800e80c:	f001 fff2 	bl	80107f4 <uxr_buffer_delete_entity>
 800e810:	f8d4 3080 	ldr.w	r3, [r4, #128]	@ 0x80
 800e814:	6922      	ldr	r2, [r4, #16]
 800e816:	691b      	ldr	r3, [r3, #16]
 800e818:	f8d3 1388 	ldr.w	r1, [r3, #904]	@ 0x388
 800e81c:	4604      	mov	r4, r0
 800e81e:	6809      	ldr	r1, [r1, #0]
 800e820:	f503 7028 	add.w	r0, r3, #672	@ 0x2a0
 800e824:	f001 ffe6 	bl	80107f4 <uxr_buffer_delete_entity>
 800e828:	693e      	ldr	r6, [r7, #16]
 800e82a:	4622      	mov	r2, r4
 800e82c:	f8d6 3390 	ldr.w	r3, [r6, #912]	@ 0x390
 800e830:	f8d6 1388 	ldr.w	r1, [r6, #904]	@ 0x388
 800e834:	4604      	mov	r4, r0
 800e836:	4630      	mov	r0, r6
 800e838:	f000 faec 	bl	800ee14 <run_xrce_session>
 800e83c:	693e      	ldr	r6, [r7, #16]
 800e83e:	4622      	mov	r2, r4
 800e840:	f8d6 3390 	ldr.w	r3, [r6, #912]	@ 0x390
 800e844:	f8d6 1388 	ldr.w	r1, [r6, #904]	@ 0x388
 800e848:	4604      	mov	r4, r0
 800e84a:	4630      	mov	r0, r6
 800e84c:	f000 fae2 	bl	800ee14 <run_xrce_session>
 800e850:	b12c      	cbz	r4, 800e85e <rmw_destroy_publisher+0x9e>
 800e852:	b120      	cbz	r0, 800e85e <rmw_destroy_publisher+0x9e>
 800e854:	2400      	movs	r4, #0
 800e856:	4628      	mov	r0, r5
 800e858:	f000 f982 	bl	800eb60 <rmw_uxrce_fini_publisher_memory>
 800e85c:	e7b9      	b.n	800e7d2 <rmw_destroy_publisher+0x12>
 800e85e:	2402      	movs	r4, #2
 800e860:	e7f9      	b.n	800e856 <rmw_destroy_publisher+0x96>
 800e862:	bf00      	nop

0800e864 <rmw_uxrce_init_service_memory>:
 800e864:	b1e2      	cbz	r2, 800e8a0 <rmw_uxrce_init_service_memory+0x3c>
 800e866:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e86a:	7b05      	ldrb	r5, [r0, #12]
 800e86c:	4606      	mov	r6, r0
 800e86e:	b9ad      	cbnz	r5, 800e89c <rmw_uxrce_init_service_memory+0x38>
 800e870:	23c8      	movs	r3, #200	@ 0xc8
 800e872:	e9c0 5500 	strd	r5, r5, [r0]
 800e876:	6083      	str	r3, [r0, #8]
 800e878:	f240 1301 	movw	r3, #257	@ 0x101
 800e87c:	4617      	mov	r7, r2
 800e87e:	8183      	strh	r3, [r0, #12]
 800e880:	460c      	mov	r4, r1
 800e882:	46a8      	mov	r8, r5
 800e884:	4621      	mov	r1, r4
 800e886:	4630      	mov	r0, r6
 800e888:	3501      	adds	r5, #1
 800e88a:	f008 fb41 	bl	8016f10 <put_memory>
 800e88e:	42af      	cmp	r7, r5
 800e890:	60a4      	str	r4, [r4, #8]
 800e892:	f884 800c 	strb.w	r8, [r4, #12]
 800e896:	f104 04c8 	add.w	r4, r4, #200	@ 0xc8
 800e89a:	d1f3      	bne.n	800e884 <rmw_uxrce_init_service_memory+0x20>
 800e89c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e8a0:	4770      	bx	lr
 800e8a2:	bf00      	nop

0800e8a4 <rmw_uxrce_init_client_memory>:
 800e8a4:	b1e2      	cbz	r2, 800e8e0 <rmw_uxrce_init_client_memory+0x3c>
 800e8a6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e8aa:	7b05      	ldrb	r5, [r0, #12]
 800e8ac:	4606      	mov	r6, r0
 800e8ae:	b9ad      	cbnz	r5, 800e8dc <rmw_uxrce_init_client_memory+0x38>
 800e8b0:	23c8      	movs	r3, #200	@ 0xc8
 800e8b2:	e9c0 5500 	strd	r5, r5, [r0]
 800e8b6:	6083      	str	r3, [r0, #8]
 800e8b8:	f240 1301 	movw	r3, #257	@ 0x101
 800e8bc:	4617      	mov	r7, r2
 800e8be:	8183      	strh	r3, [r0, #12]
 800e8c0:	460c      	mov	r4, r1
 800e8c2:	46a8      	mov	r8, r5
 800e8c4:	4621      	mov	r1, r4
 800e8c6:	4630      	mov	r0, r6
 800e8c8:	3501      	adds	r5, #1
 800e8ca:	f008 fb21 	bl	8016f10 <put_memory>
 800e8ce:	42af      	cmp	r7, r5
 800e8d0:	60a4      	str	r4, [r4, #8]
 800e8d2:	f884 800c 	strb.w	r8, [r4, #12]
 800e8d6:	f104 04c8 	add.w	r4, r4, #200	@ 0xc8
 800e8da:	d1f3      	bne.n	800e8c4 <rmw_uxrce_init_client_memory+0x20>
 800e8dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e8e0:	4770      	bx	lr
 800e8e2:	bf00      	nop

0800e8e4 <rmw_uxrce_init_publisher_memory>:
 800e8e4:	b1e2      	cbz	r2, 800e920 <rmw_uxrce_init_publisher_memory+0x3c>
 800e8e6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e8ea:	7b05      	ldrb	r5, [r0, #12]
 800e8ec:	4606      	mov	r6, r0
 800e8ee:	b9ad      	cbnz	r5, 800e91c <rmw_uxrce_init_publisher_memory+0x38>
 800e8f0:	23d8      	movs	r3, #216	@ 0xd8
 800e8f2:	e9c0 5500 	strd	r5, r5, [r0]
 800e8f6:	6083      	str	r3, [r0, #8]
 800e8f8:	f240 1301 	movw	r3, #257	@ 0x101
 800e8fc:	4617      	mov	r7, r2
 800e8fe:	8183      	strh	r3, [r0, #12]
 800e900:	460c      	mov	r4, r1
 800e902:	46a8      	mov	r8, r5
 800e904:	4621      	mov	r1, r4
 800e906:	4630      	mov	r0, r6
 800e908:	3501      	adds	r5, #1
 800e90a:	f008 fb01 	bl	8016f10 <put_memory>
 800e90e:	42af      	cmp	r7, r5
 800e910:	60a4      	str	r4, [r4, #8]
 800e912:	f884 800c 	strb.w	r8, [r4, #12]
 800e916:	f104 04d8 	add.w	r4, r4, #216	@ 0xd8
 800e91a:	d1f3      	bne.n	800e904 <rmw_uxrce_init_publisher_memory+0x20>
 800e91c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e920:	4770      	bx	lr
 800e922:	bf00      	nop

0800e924 <rmw_uxrce_init_subscription_memory>:
 800e924:	b1e2      	cbz	r2, 800e960 <rmw_uxrce_init_subscription_memory+0x3c>
 800e926:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e92a:	7b05      	ldrb	r5, [r0, #12]
 800e92c:	4606      	mov	r6, r0
 800e92e:	b9ad      	cbnz	r5, 800e95c <rmw_uxrce_init_subscription_memory+0x38>
 800e930:	23d8      	movs	r3, #216	@ 0xd8
 800e932:	e9c0 5500 	strd	r5, r5, [r0]
 800e936:	6083      	str	r3, [r0, #8]
 800e938:	f240 1301 	movw	r3, #257	@ 0x101
 800e93c:	4617      	mov	r7, r2
 800e93e:	8183      	strh	r3, [r0, #12]
 800e940:	460c      	mov	r4, r1
 800e942:	46a8      	mov	r8, r5
 800e944:	4621      	mov	r1, r4
 800e946:	4630      	mov	r0, r6
 800e948:	3501      	adds	r5, #1
 800e94a:	f008 fae1 	bl	8016f10 <put_memory>
 800e94e:	42af      	cmp	r7, r5
 800e950:	60a4      	str	r4, [r4, #8]
 800e952:	f884 800c 	strb.w	r8, [r4, #12]
 800e956:	f104 04d8 	add.w	r4, r4, #216	@ 0xd8
 800e95a:	d1f3      	bne.n	800e944 <rmw_uxrce_init_subscription_memory+0x20>
 800e95c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e960:	4770      	bx	lr
 800e962:	bf00      	nop

0800e964 <rmw_uxrce_init_node_memory>:
 800e964:	b1e2      	cbz	r2, 800e9a0 <rmw_uxrce_init_node_memory+0x3c>
 800e966:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e96a:	7b05      	ldrb	r5, [r0, #12]
 800e96c:	4606      	mov	r6, r0
 800e96e:	b9ad      	cbnz	r5, 800e99c <rmw_uxrce_init_node_memory+0x38>
 800e970:	23a4      	movs	r3, #164	@ 0xa4
 800e972:	e9c0 5500 	strd	r5, r5, [r0]
 800e976:	6083      	str	r3, [r0, #8]
 800e978:	f240 1301 	movw	r3, #257	@ 0x101
 800e97c:	4617      	mov	r7, r2
 800e97e:	8183      	strh	r3, [r0, #12]
 800e980:	460c      	mov	r4, r1
 800e982:	46a8      	mov	r8, r5
 800e984:	4621      	mov	r1, r4
 800e986:	4630      	mov	r0, r6
 800e988:	3501      	adds	r5, #1
 800e98a:	f008 fac1 	bl	8016f10 <put_memory>
 800e98e:	42af      	cmp	r7, r5
 800e990:	60a4      	str	r4, [r4, #8]
 800e992:	f884 800c 	strb.w	r8, [r4, #12]
 800e996:	f104 04a4 	add.w	r4, r4, #164	@ 0xa4
 800e99a:	d1f3      	bne.n	800e984 <rmw_uxrce_init_node_memory+0x20>
 800e99c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e9a0:	4770      	bx	lr
 800e9a2:	bf00      	nop

0800e9a4 <rmw_uxrce_init_session_memory>:
 800e9a4:	b1ea      	cbz	r2, 800e9e2 <rmw_uxrce_init_session_memory+0x3e>
 800e9a6:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e9aa:	7b05      	ldrb	r5, [r0, #12]
 800e9ac:	4606      	mov	r6, r0
 800e9ae:	b9b5      	cbnz	r5, 800e9de <rmw_uxrce_init_session_memory+0x3a>
 800e9b0:	e9c0 5500 	strd	r5, r5, [r0]
 800e9b4:	f241 58a8 	movw	r8, #5544	@ 0x15a8
 800e9b8:	f240 1301 	movw	r3, #257	@ 0x101
 800e9bc:	4617      	mov	r7, r2
 800e9be:	f8c0 8008 	str.w	r8, [r0, #8]
 800e9c2:	460c      	mov	r4, r1
 800e9c4:	8183      	strh	r3, [r0, #12]
 800e9c6:	46a9      	mov	r9, r5
 800e9c8:	4621      	mov	r1, r4
 800e9ca:	4630      	mov	r0, r6
 800e9cc:	3501      	adds	r5, #1
 800e9ce:	f008 fa9f 	bl	8016f10 <put_memory>
 800e9d2:	42af      	cmp	r7, r5
 800e9d4:	60a4      	str	r4, [r4, #8]
 800e9d6:	f884 900c 	strb.w	r9, [r4, #12]
 800e9da:	4444      	add	r4, r8
 800e9dc:	d1f4      	bne.n	800e9c8 <rmw_uxrce_init_session_memory+0x24>
 800e9de:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e9e2:	4770      	bx	lr

0800e9e4 <rmw_uxrce_init_topic_memory>:
 800e9e4:	b1e2      	cbz	r2, 800ea20 <rmw_uxrce_init_topic_memory+0x3c>
 800e9e6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e9ea:	7b05      	ldrb	r5, [r0, #12]
 800e9ec:	4606      	mov	r6, r0
 800e9ee:	b9ad      	cbnz	r5, 800ea1c <rmw_uxrce_init_topic_memory+0x38>
 800e9f0:	231c      	movs	r3, #28
 800e9f2:	e9c0 5500 	strd	r5, r5, [r0]
 800e9f6:	6083      	str	r3, [r0, #8]
 800e9f8:	f240 1301 	movw	r3, #257	@ 0x101
 800e9fc:	4617      	mov	r7, r2
 800e9fe:	8183      	strh	r3, [r0, #12]
 800ea00:	460c      	mov	r4, r1
 800ea02:	46a8      	mov	r8, r5
 800ea04:	4621      	mov	r1, r4
 800ea06:	4630      	mov	r0, r6
 800ea08:	3501      	adds	r5, #1
 800ea0a:	f008 fa81 	bl	8016f10 <put_memory>
 800ea0e:	42af      	cmp	r7, r5
 800ea10:	60a4      	str	r4, [r4, #8]
 800ea12:	f884 800c 	strb.w	r8, [r4, #12]
 800ea16:	f104 041c 	add.w	r4, r4, #28
 800ea1a:	d1f3      	bne.n	800ea04 <rmw_uxrce_init_topic_memory+0x20>
 800ea1c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ea20:	4770      	bx	lr
 800ea22:	bf00      	nop

0800ea24 <rmw_uxrce_init_static_input_buffer_memory>:
 800ea24:	b1ea      	cbz	r2, 800ea62 <rmw_uxrce_init_static_input_buffer_memory+0x3e>
 800ea26:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ea2a:	7b05      	ldrb	r5, [r0, #12]
 800ea2c:	4606      	mov	r6, r0
 800ea2e:	b9b5      	cbnz	r5, 800ea5e <rmw_uxrce_init_static_input_buffer_memory+0x3a>
 800ea30:	f44f 6304 	mov.w	r3, #2112	@ 0x840
 800ea34:	e9c0 5500 	strd	r5, r5, [r0]
 800ea38:	6083      	str	r3, [r0, #8]
 800ea3a:	f240 1301 	movw	r3, #257	@ 0x101
 800ea3e:	4617      	mov	r7, r2
 800ea40:	8183      	strh	r3, [r0, #12]
 800ea42:	460c      	mov	r4, r1
 800ea44:	46a8      	mov	r8, r5
 800ea46:	4621      	mov	r1, r4
 800ea48:	4630      	mov	r0, r6
 800ea4a:	3501      	adds	r5, #1
 800ea4c:	f008 fa60 	bl	8016f10 <put_memory>
 800ea50:	42af      	cmp	r7, r5
 800ea52:	60a4      	str	r4, [r4, #8]
 800ea54:	f884 800c 	strb.w	r8, [r4, #12]
 800ea58:	f504 6404 	add.w	r4, r4, #2112	@ 0x840
 800ea5c:	d1f3      	bne.n	800ea46 <rmw_uxrce_init_static_input_buffer_memory+0x22>
 800ea5e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ea62:	4770      	bx	lr

0800ea64 <rmw_uxrce_init_init_options_impl_memory>:
 800ea64:	b1e2      	cbz	r2, 800eaa0 <rmw_uxrce_init_init_options_impl_memory+0x3c>
 800ea66:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ea6a:	7b05      	ldrb	r5, [r0, #12]
 800ea6c:	4606      	mov	r6, r0
 800ea6e:	b9ad      	cbnz	r5, 800ea9c <rmw_uxrce_init_init_options_impl_memory+0x38>
 800ea70:	232c      	movs	r3, #44	@ 0x2c
 800ea72:	e9c0 5500 	strd	r5, r5, [r0]
 800ea76:	6083      	str	r3, [r0, #8]
 800ea78:	f240 1301 	movw	r3, #257	@ 0x101
 800ea7c:	4617      	mov	r7, r2
 800ea7e:	8183      	strh	r3, [r0, #12]
 800ea80:	460c      	mov	r4, r1
 800ea82:	46a8      	mov	r8, r5
 800ea84:	4621      	mov	r1, r4
 800ea86:	4630      	mov	r0, r6
 800ea88:	3501      	adds	r5, #1
 800ea8a:	f008 fa41 	bl	8016f10 <put_memory>
 800ea8e:	42af      	cmp	r7, r5
 800ea90:	60a4      	str	r4, [r4, #8]
 800ea92:	f884 800c 	strb.w	r8, [r4, #12]
 800ea96:	f104 042c 	add.w	r4, r4, #44	@ 0x2c
 800ea9a:	d1f3      	bne.n	800ea84 <rmw_uxrce_init_init_options_impl_memory+0x20>
 800ea9c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800eaa0:	4770      	bx	lr
 800eaa2:	bf00      	nop

0800eaa4 <rmw_uxrce_init_wait_set_memory>:
 800eaa4:	b1e2      	cbz	r2, 800eae0 <rmw_uxrce_init_wait_set_memory+0x3c>
 800eaa6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800eaaa:	7b05      	ldrb	r5, [r0, #12]
 800eaac:	4606      	mov	r6, r0
 800eaae:	b9ad      	cbnz	r5, 800eadc <rmw_uxrce_init_wait_set_memory+0x38>
 800eab0:	231c      	movs	r3, #28
 800eab2:	e9c0 5500 	strd	r5, r5, [r0]
 800eab6:	6083      	str	r3, [r0, #8]
 800eab8:	f240 1301 	movw	r3, #257	@ 0x101
 800eabc:	4617      	mov	r7, r2
 800eabe:	8183      	strh	r3, [r0, #12]
 800eac0:	460c      	mov	r4, r1
 800eac2:	46a8      	mov	r8, r5
 800eac4:	4621      	mov	r1, r4
 800eac6:	4630      	mov	r0, r6
 800eac8:	3501      	adds	r5, #1
 800eaca:	f008 fa21 	bl	8016f10 <put_memory>
 800eace:	42af      	cmp	r7, r5
 800ead0:	60a4      	str	r4, [r4, #8]
 800ead2:	f884 800c 	strb.w	r8, [r4, #12]
 800ead6:	f104 041c 	add.w	r4, r4, #28
 800eada:	d1f3      	bne.n	800eac4 <rmw_uxrce_init_wait_set_memory+0x20>
 800eadc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800eae0:	4770      	bx	lr
 800eae2:	bf00      	nop

0800eae4 <rmw_uxrce_init_guard_condition_memory>:
 800eae4:	b1e2      	cbz	r2, 800eb20 <rmw_uxrce_init_guard_condition_memory+0x3c>
 800eae6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800eaea:	7b05      	ldrb	r5, [r0, #12]
 800eaec:	4606      	mov	r6, r0
 800eaee:	b9ad      	cbnz	r5, 800eb1c <rmw_uxrce_init_guard_condition_memory+0x38>
 800eaf0:	2320      	movs	r3, #32
 800eaf2:	e9c0 5500 	strd	r5, r5, [r0]
 800eaf6:	6083      	str	r3, [r0, #8]
 800eaf8:	f240 1301 	movw	r3, #257	@ 0x101
 800eafc:	4617      	mov	r7, r2
 800eafe:	8183      	strh	r3, [r0, #12]
 800eb00:	460c      	mov	r4, r1
 800eb02:	46a8      	mov	r8, r5
 800eb04:	4621      	mov	r1, r4
 800eb06:	4630      	mov	r0, r6
 800eb08:	3501      	adds	r5, #1
 800eb0a:	f008 fa01 	bl	8016f10 <put_memory>
 800eb0e:	42af      	cmp	r7, r5
 800eb10:	60a4      	str	r4, [r4, #8]
 800eb12:	f884 800c 	strb.w	r8, [r4, #12]
 800eb16:	f104 0420 	add.w	r4, r4, #32
 800eb1a:	d1f3      	bne.n	800eb04 <rmw_uxrce_init_guard_condition_memory+0x20>
 800eb1c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800eb20:	4770      	bx	lr
 800eb22:	bf00      	nop

0800eb24 <rmw_uxrce_fini_session_memory>:
 800eb24:	4601      	mov	r1, r0
 800eb26:	4801      	ldr	r0, [pc, #4]	@ (800eb2c <rmw_uxrce_fini_session_memory+0x8>)
 800eb28:	f008 b9f2 	b.w	8016f10 <put_memory>
 800eb2c:	2000c08c 	.word	0x2000c08c

0800eb30 <rmw_uxrce_fini_node_memory>:
 800eb30:	b538      	push	{r3, r4, r5, lr}
 800eb32:	4604      	mov	r4, r0
 800eb34:	6800      	ldr	r0, [r0, #0]
 800eb36:	b128      	cbz	r0, 800eb44 <rmw_uxrce_fini_node_memory+0x14>
 800eb38:	4b07      	ldr	r3, [pc, #28]	@ (800eb58 <rmw_uxrce_fini_node_memory+0x28>)
 800eb3a:	6819      	ldr	r1, [r3, #0]
 800eb3c:	f7f1 fb48 	bl	80001d0 <strcmp>
 800eb40:	b940      	cbnz	r0, 800eb54 <rmw_uxrce_fini_node_memory+0x24>
 800eb42:	6020      	str	r0, [r4, #0]
 800eb44:	6861      	ldr	r1, [r4, #4]
 800eb46:	b129      	cbz	r1, 800eb54 <rmw_uxrce_fini_node_memory+0x24>
 800eb48:	2500      	movs	r5, #0
 800eb4a:	4804      	ldr	r0, [pc, #16]	@ (800eb5c <rmw_uxrce_fini_node_memory+0x2c>)
 800eb4c:	610d      	str	r5, [r1, #16]
 800eb4e:	f008 f9df 	bl	8016f10 <put_memory>
 800eb52:	6065      	str	r5, [r4, #4]
 800eb54:	bd38      	pop	{r3, r4, r5, pc}
 800eb56:	bf00      	nop
 800eb58:	0801dd78 	.word	0x0801dd78
 800eb5c:	2000c05c 	.word	0x2000c05c

0800eb60 <rmw_uxrce_fini_publisher_memory>:
 800eb60:	b510      	push	{r4, lr}
 800eb62:	4604      	mov	r4, r0
 800eb64:	6800      	ldr	r0, [r0, #0]
 800eb66:	b128      	cbz	r0, 800eb74 <rmw_uxrce_fini_publisher_memory+0x14>
 800eb68:	4b06      	ldr	r3, [pc, #24]	@ (800eb84 <rmw_uxrce_fini_publisher_memory+0x24>)
 800eb6a:	6819      	ldr	r1, [r3, #0]
 800eb6c:	f7f1 fb30 	bl	80001d0 <strcmp>
 800eb70:	b938      	cbnz	r0, 800eb82 <rmw_uxrce_fini_publisher_memory+0x22>
 800eb72:	6020      	str	r0, [r4, #0]
 800eb74:	6861      	ldr	r1, [r4, #4]
 800eb76:	b121      	cbz	r1, 800eb82 <rmw_uxrce_fini_publisher_memory+0x22>
 800eb78:	4803      	ldr	r0, [pc, #12]	@ (800eb88 <rmw_uxrce_fini_publisher_memory+0x28>)
 800eb7a:	f008 f9c9 	bl	8016f10 <put_memory>
 800eb7e:	2300      	movs	r3, #0
 800eb80:	6063      	str	r3, [r4, #4]
 800eb82:	bd10      	pop	{r4, pc}
 800eb84:	0801dd78 	.word	0x0801dd78
 800eb88:	2000c06c 	.word	0x2000c06c

0800eb8c <rmw_uxrce_fini_subscription_memory>:
 800eb8c:	b510      	push	{r4, lr}
 800eb8e:	4604      	mov	r4, r0
 800eb90:	6800      	ldr	r0, [r0, #0]
 800eb92:	b128      	cbz	r0, 800eba0 <rmw_uxrce_fini_subscription_memory+0x14>
 800eb94:	4b06      	ldr	r3, [pc, #24]	@ (800ebb0 <rmw_uxrce_fini_subscription_memory+0x24>)
 800eb96:	6819      	ldr	r1, [r3, #0]
 800eb98:	f7f1 fb1a 	bl	80001d0 <strcmp>
 800eb9c:	b938      	cbnz	r0, 800ebae <rmw_uxrce_fini_subscription_memory+0x22>
 800eb9e:	6020      	str	r0, [r4, #0]
 800eba0:	6861      	ldr	r1, [r4, #4]
 800eba2:	b121      	cbz	r1, 800ebae <rmw_uxrce_fini_subscription_memory+0x22>
 800eba4:	4803      	ldr	r0, [pc, #12]	@ (800ebb4 <rmw_uxrce_fini_subscription_memory+0x28>)
 800eba6:	f008 f9b3 	bl	8016f10 <put_memory>
 800ebaa:	2300      	movs	r3, #0
 800ebac:	6063      	str	r3, [r4, #4]
 800ebae:	bd10      	pop	{r4, pc}
 800ebb0:	0801dd78 	.word	0x0801dd78
 800ebb4:	2000c0ac 	.word	0x2000c0ac

0800ebb8 <rmw_uxrce_fini_service_memory>:
 800ebb8:	b510      	push	{r4, lr}
 800ebba:	4604      	mov	r4, r0
 800ebbc:	6800      	ldr	r0, [r0, #0]
 800ebbe:	b128      	cbz	r0, 800ebcc <rmw_uxrce_fini_service_memory+0x14>
 800ebc0:	4b06      	ldr	r3, [pc, #24]	@ (800ebdc <rmw_uxrce_fini_service_memory+0x24>)
 800ebc2:	6819      	ldr	r1, [r3, #0]
 800ebc4:	f7f1 fb04 	bl	80001d0 <strcmp>
 800ebc8:	b938      	cbnz	r0, 800ebda <rmw_uxrce_fini_service_memory+0x22>
 800ebca:	6020      	str	r0, [r4, #0]
 800ebcc:	6861      	ldr	r1, [r4, #4]
 800ebce:	b121      	cbz	r1, 800ebda <rmw_uxrce_fini_service_memory+0x22>
 800ebd0:	4803      	ldr	r0, [pc, #12]	@ (800ebe0 <rmw_uxrce_fini_service_memory+0x28>)
 800ebd2:	f008 f99d 	bl	8016f10 <put_memory>
 800ebd6:	2300      	movs	r3, #0
 800ebd8:	6063      	str	r3, [r4, #4]
 800ebda:	bd10      	pop	{r4, pc}
 800ebdc:	0801dd78 	.word	0x0801dd78
 800ebe0:	2000c07c 	.word	0x2000c07c

0800ebe4 <rmw_uxrce_fini_client_memory>:
 800ebe4:	b510      	push	{r4, lr}
 800ebe6:	4604      	mov	r4, r0
 800ebe8:	6800      	ldr	r0, [r0, #0]
 800ebea:	b128      	cbz	r0, 800ebf8 <rmw_uxrce_fini_client_memory+0x14>
 800ebec:	4b06      	ldr	r3, [pc, #24]	@ (800ec08 <rmw_uxrce_fini_client_memory+0x24>)
 800ebee:	6819      	ldr	r1, [r3, #0]
 800ebf0:	f7f1 faee 	bl	80001d0 <strcmp>
 800ebf4:	b938      	cbnz	r0, 800ec06 <rmw_uxrce_fini_client_memory+0x22>
 800ebf6:	6020      	str	r0, [r4, #0]
 800ebf8:	6861      	ldr	r1, [r4, #4]
 800ebfa:	b121      	cbz	r1, 800ec06 <rmw_uxrce_fini_client_memory+0x22>
 800ebfc:	4803      	ldr	r0, [pc, #12]	@ (800ec0c <rmw_uxrce_fini_client_memory+0x28>)
 800ebfe:	f008 f987 	bl	8016f10 <put_memory>
 800ec02:	2300      	movs	r3, #0
 800ec04:	6063      	str	r3, [r4, #4]
 800ec06:	bd10      	pop	{r4, pc}
 800ec08:	0801dd78 	.word	0x0801dd78
 800ec0c:	20007790 	.word	0x20007790

0800ec10 <rmw_uxrce_fini_topic_memory>:
 800ec10:	b510      	push	{r4, lr}
 800ec12:	4604      	mov	r4, r0
 800ec14:	4621      	mov	r1, r4
 800ec16:	4803      	ldr	r0, [pc, #12]	@ (800ec24 <rmw_uxrce_fini_topic_memory+0x14>)
 800ec18:	f008 f97a 	bl	8016f10 <put_memory>
 800ec1c:	2300      	movs	r3, #0
 800ec1e:	61a3      	str	r3, [r4, #24]
 800ec20:	bd10      	pop	{r4, pc}
 800ec22:	bf00      	nop
 800ec24:	2000c0bc 	.word	0x2000c0bc

0800ec28 <rmw_uxrce_get_static_input_buffer_for_entity>:
 800ec28:	b082      	sub	sp, #8
 800ec2a:	b530      	push	{r4, r5, lr}
 800ec2c:	4925      	ldr	r1, [pc, #148]	@ (800ecc4 <rmw_uxrce_get_static_input_buffer_for_entity+0x9c>)
 800ec2e:	680d      	ldr	r5, [r1, #0]
 800ec30:	ac03      	add	r4, sp, #12
 800ec32:	e884 000c 	stmia.w	r4, {r2, r3}
 800ec36:	461c      	mov	r4, r3
 800ec38:	2d00      	cmp	r5, #0
 800ec3a:	d041      	beq.n	800ecc0 <rmw_uxrce_get_static_input_buffer_for_entity+0x98>
 800ec3c:	462b      	mov	r3, r5
 800ec3e:	2100      	movs	r1, #0
 800ec40:	689a      	ldr	r2, [r3, #8]
 800ec42:	685b      	ldr	r3, [r3, #4]
 800ec44:	f8d2 2814 	ldr.w	r2, [r2, #2068]	@ 0x814
 800ec48:	4290      	cmp	r0, r2
 800ec4a:	bf08      	it	eq
 800ec4c:	3101      	addeq	r1, #1
 800ec4e:	2b00      	cmp	r3, #0
 800ec50:	d1f6      	bne.n	800ec40 <rmw_uxrce_get_static_input_buffer_for_entity+0x18>
 800ec52:	f89d 300c 	ldrb.w	r3, [sp, #12]
 800ec56:	2b02      	cmp	r3, #2
 800ec58:	d029      	beq.n	800ecae <rmw_uxrce_get_static_input_buffer_for_entity+0x86>
 800ec5a:	d907      	bls.n	800ec6c <rmw_uxrce_get_static_input_buffer_for_entity+0x44>
 800ec5c:	2b03      	cmp	r3, #3
 800ec5e:	d005      	beq.n	800ec6c <rmw_uxrce_get_static_input_buffer_for_entity+0x44>
 800ec60:	2100      	movs	r1, #0
 800ec62:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800ec66:	4608      	mov	r0, r1
 800ec68:	b002      	add	sp, #8
 800ec6a:	4770      	bx	lr
 800ec6c:	b314      	cbz	r4, 800ecb4 <rmw_uxrce_get_static_input_buffer_for_entity+0x8c>
 800ec6e:	428c      	cmp	r4, r1
 800ec70:	d820      	bhi.n	800ecb4 <rmw_uxrce_get_static_input_buffer_for_entity+0x8c>
 800ec72:	2d00      	cmp	r5, #0
 800ec74:	d0f4      	beq.n	800ec60 <rmw_uxrce_get_static_input_buffer_for_entity+0x38>
 800ec76:	2100      	movs	r1, #0
 800ec78:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 800ec7c:	f06f 4400 	mvn.w	r4, #2147483648	@ 0x80000000
 800ec80:	e002      	b.n	800ec88 <rmw_uxrce_get_static_input_buffer_for_entity+0x60>
 800ec82:	686d      	ldr	r5, [r5, #4]
 800ec84:	2d00      	cmp	r5, #0
 800ec86:	d0ec      	beq.n	800ec62 <rmw_uxrce_get_static_input_buffer_for_entity+0x3a>
 800ec88:	68ab      	ldr	r3, [r5, #8]
 800ec8a:	f8d3 2814 	ldr.w	r2, [r3, #2068]	@ 0x814
 800ec8e:	4290      	cmp	r0, r2
 800ec90:	d1f7      	bne.n	800ec82 <rmw_uxrce_get_static_input_buffer_for_entity+0x5a>
 800ec92:	f8d3 2818 	ldr.w	r2, [r3, #2072]	@ 0x818
 800ec96:	f503 6302 	add.w	r3, r3, #2080	@ 0x820
 800ec9a:	4562      	cmp	r2, ip
 800ec9c:	f853 3c04 	ldr.w	r3, [r3, #-4]
 800eca0:	eb73 0e04 	sbcs.w	lr, r3, r4
 800eca4:	daed      	bge.n	800ec82 <rmw_uxrce_get_static_input_buffer_for_entity+0x5a>
 800eca6:	4694      	mov	ip, r2
 800eca8:	461c      	mov	r4, r3
 800ecaa:	4629      	mov	r1, r5
 800ecac:	e7e9      	b.n	800ec82 <rmw_uxrce_get_static_input_buffer_for_entity+0x5a>
 800ecae:	b10c      	cbz	r4, 800ecb4 <rmw_uxrce_get_static_input_buffer_for_entity+0x8c>
 800ecb0:	428c      	cmp	r4, r1
 800ecb2:	d9d5      	bls.n	800ec60 <rmw_uxrce_get_static_input_buffer_for_entity+0x38>
 800ecb4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800ecb8:	4802      	ldr	r0, [pc, #8]	@ (800ecc4 <rmw_uxrce_get_static_input_buffer_for_entity+0x9c>)
 800ecba:	b002      	add	sp, #8
 800ecbc:	f008 b918 	b.w	8016ef0 <get_memory>
 800ecc0:	4629      	mov	r1, r5
 800ecc2:	e7c6      	b.n	800ec52 <rmw_uxrce_get_static_input_buffer_for_entity+0x2a>
 800ecc4:	2000c09c 	.word	0x2000c09c

0800ecc8 <rmw_uxrce_find_static_input_buffer_by_owner>:
 800ecc8:	4b11      	ldr	r3, [pc, #68]	@ (800ed10 <rmw_uxrce_find_static_input_buffer_by_owner+0x48>)
 800ecca:	681b      	ldr	r3, [r3, #0]
 800eccc:	b530      	push	{r4, r5, lr}
 800ecce:	b1e3      	cbz	r3, 800ed0a <rmw_uxrce_find_static_input_buffer_by_owner+0x42>
 800ecd0:	f04f 3eff 	mov.w	lr, #4294967295	@ 0xffffffff
 800ecd4:	f06f 4c00 	mvn.w	ip, #2147483648	@ 0x80000000
 800ecd8:	2400      	movs	r4, #0
 800ecda:	e001      	b.n	800ece0 <rmw_uxrce_find_static_input_buffer_by_owner+0x18>
 800ecdc:	685b      	ldr	r3, [r3, #4]
 800ecde:	b193      	cbz	r3, 800ed06 <rmw_uxrce_find_static_input_buffer_by_owner+0x3e>
 800ece0:	689a      	ldr	r2, [r3, #8]
 800ece2:	f8d2 1814 	ldr.w	r1, [r2, #2068]	@ 0x814
 800ece6:	4288      	cmp	r0, r1
 800ece8:	d1f8      	bne.n	800ecdc <rmw_uxrce_find_static_input_buffer_by_owner+0x14>
 800ecea:	f8d2 1818 	ldr.w	r1, [r2, #2072]	@ 0x818
 800ecee:	f8d2 281c 	ldr.w	r2, [r2, #2076]	@ 0x81c
 800ecf2:	4571      	cmp	r1, lr
 800ecf4:	eb72 050c 	sbcs.w	r5, r2, ip
 800ecf8:	daf0      	bge.n	800ecdc <rmw_uxrce_find_static_input_buffer_by_owner+0x14>
 800ecfa:	461c      	mov	r4, r3
 800ecfc:	685b      	ldr	r3, [r3, #4]
 800ecfe:	468e      	mov	lr, r1
 800ed00:	4694      	mov	ip, r2
 800ed02:	2b00      	cmp	r3, #0
 800ed04:	d1ec      	bne.n	800ece0 <rmw_uxrce_find_static_input_buffer_by_owner+0x18>
 800ed06:	4620      	mov	r0, r4
 800ed08:	bd30      	pop	{r4, r5, pc}
 800ed0a:	461c      	mov	r4, r3
 800ed0c:	4620      	mov	r0, r4
 800ed0e:	bd30      	pop	{r4, r5, pc}
 800ed10:	2000c09c 	.word	0x2000c09c
 800ed14:	00000000 	.word	0x00000000

0800ed18 <rmw_uxrce_clean_expired_static_input_buffer>:
 800ed18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ed1c:	4b3c      	ldr	r3, [pc, #240]	@ (800ee10 <rmw_uxrce_clean_expired_static_input_buffer+0xf8>)
 800ed1e:	ed2d 8b06 	vpush	{d8-d10}
 800ed22:	681f      	ldr	r7, [r3, #0]
 800ed24:	b08d      	sub	sp, #52	@ 0x34
 800ed26:	f009 fa21 	bl	801816c <rmw_uros_epoch_nanos>
 800ed2a:	2f00      	cmp	r7, #0
 800ed2c:	d05d      	beq.n	800edea <rmw_uxrce_clean_expired_static_input_buffer+0xd2>
 800ed2e:	46b8      	mov	r8, r7
 800ed30:	ed9f 8b31 	vldr	d8, [pc, #196]	@ 800edf8 <rmw_uxrce_clean_expired_static_input_buffer+0xe0>
 800ed34:	f8d8 5008 	ldr.w	r5, [r8, #8]
 800ed38:	f895 3820 	ldrb.w	r3, [r5, #2080]	@ 0x820
 800ed3c:	2b04      	cmp	r3, #4
 800ed3e:	ed9f ab30 	vldr	d10, [pc, #192]	@ 800ee00 <rmw_uxrce_clean_expired_static_input_buffer+0xe8>
 800ed42:	ed9f 9b31 	vldr	d9, [pc, #196]	@ 800ee08 <rmw_uxrce_clean_expired_static_input_buffer+0xf0>
 800ed46:	4681      	mov	r9, r0
 800ed48:	468a      	mov	sl, r1
 800ed4a:	ac04      	add	r4, sp, #16
 800ed4c:	d03f      	beq.n	800edce <rmw_uxrce_clean_expired_static_input_buffer+0xb6>
 800ed4e:	2b05      	cmp	r3, #5
 800ed50:	d044      	beq.n	800eddc <rmw_uxrce_clean_expired_static_input_buffer+0xc4>
 800ed52:	2b03      	cmp	r3, #3
 800ed54:	d03b      	beq.n	800edce <rmw_uxrce_clean_expired_static_input_buffer+0xb6>
 800ed56:	ed8d 8b04 	vstr	d8, [sp, #16]
 800ed5a:	ed8d ab06 	vstr	d10, [sp, #24]
 800ed5e:	ed8d 8b08 	vstr	d8, [sp, #32]
 800ed62:	ed8d 8b0a 	vstr	d8, [sp, #40]	@ 0x28
 800ed66:	ab08      	add	r3, sp, #32
 800ed68:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800ed6a:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 800ed6e:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800ed72:	f007 fef1 	bl	8016b58 <rmw_time_equal>
 800ed76:	b118      	cbz	r0, 800ed80 <rmw_uxrce_clean_expired_static_input_buffer+0x68>
 800ed78:	ed8d 9b04 	vstr	d9, [sp, #16]
 800ed7c:	ed8d 8b06 	vstr	d8, [sp, #24]
 800ed80:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800ed84:	f8d5 6818 	ldr.w	r6, [r5, #2072]	@ 0x818
 800ed88:	f8d5 781c 	ldr.w	r7, [r5, #2076]	@ 0x81c
 800ed8c:	f8d8 b004 	ldr.w	fp, [r8, #4]
 800ed90:	f007 ff36 	bl	8016c00 <rmw_time_total_nsec>
 800ed94:	1830      	adds	r0, r6, r0
 800ed96:	eb47 0101 	adc.w	r1, r7, r1
 800ed9a:	4548      	cmp	r0, r9
 800ed9c:	eb71 030a 	sbcs.w	r3, r1, sl
 800eda0:	f505 6502 	add.w	r5, r5, #2080	@ 0x820
 800eda4:	db05      	blt.n	800edb2 <rmw_uxrce_clean_expired_static_input_buffer+0x9a>
 800eda6:	e955 2302 	ldrd	r2, r3, [r5, #-8]
 800edaa:	4591      	cmp	r9, r2
 800edac:	eb7a 0303 	sbcs.w	r3, sl, r3
 800edb0:	da03      	bge.n	800edba <rmw_uxrce_clean_expired_static_input_buffer+0xa2>
 800edb2:	4817      	ldr	r0, [pc, #92]	@ (800ee10 <rmw_uxrce_clean_expired_static_input_buffer+0xf8>)
 800edb4:	4641      	mov	r1, r8
 800edb6:	f008 f8ab 	bl	8016f10 <put_memory>
 800edba:	f1bb 0f00 	cmp.w	fp, #0
 800edbe:	d014      	beq.n	800edea <rmw_uxrce_clean_expired_static_input_buffer+0xd2>
 800edc0:	46d8      	mov	r8, fp
 800edc2:	f8d8 5008 	ldr.w	r5, [r8, #8]
 800edc6:	f895 3820 	ldrb.w	r3, [r5, #2080]	@ 0x820
 800edca:	2b04      	cmp	r3, #4
 800edcc:	d1bf      	bne.n	800ed4e <rmw_uxrce_clean_expired_static_input_buffer+0x36>
 800edce:	f8d5 3814 	ldr.w	r3, [r5, #2068]	@ 0x814
 800edd2:	3340      	adds	r3, #64	@ 0x40
 800edd4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800edd6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800edda:	e7c0      	b.n	800ed5e <rmw_uxrce_clean_expired_static_input_buffer+0x46>
 800eddc:	f8d5 3814 	ldr.w	r3, [r5, #2068]	@ 0x814
 800ede0:	3348      	adds	r3, #72	@ 0x48
 800ede2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800ede4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800ede8:	e7b9      	b.n	800ed5e <rmw_uxrce_clean_expired_static_input_buffer+0x46>
 800edea:	b00d      	add	sp, #52	@ 0x34
 800edec:	ecbd 8b06 	vpop	{d8-d10}
 800edf0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800edf4:	f3af 8000 	nop.w
	...
 800ee00:	00000001 	.word	0x00000001
 800ee04:	00000000 	.word	0x00000000
 800ee08:	0000001e 	.word	0x0000001e
 800ee0c:	00000000 	.word	0x00000000
 800ee10:	2000c09c 	.word	0x2000c09c

0800ee14 <run_xrce_session>:
 800ee14:	b510      	push	{r4, lr}
 800ee16:	788c      	ldrb	r4, [r1, #2]
 800ee18:	b086      	sub	sp, #24
 800ee1a:	2c01      	cmp	r4, #1
 800ee1c:	f8ad 200e 	strh.w	r2, [sp, #14]
 800ee20:	d00c      	beq.n	800ee3c <run_xrce_session+0x28>
 800ee22:	4619      	mov	r1, r3
 800ee24:	2301      	movs	r3, #1
 800ee26:	9300      	str	r3, [sp, #0]
 800ee28:	f10d 020e 	add.w	r2, sp, #14
 800ee2c:	f10d 0317 	add.w	r3, sp, #23
 800ee30:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800ee34:	f002 fc16 	bl	8011664 <uxr_run_session_until_all_status>
 800ee38:	b006      	add	sp, #24
 800ee3a:	bd10      	pop	{r4, pc}
 800ee3c:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800ee40:	f002 f82a 	bl	8010e98 <uxr_flash_output_streams>
 800ee44:	4620      	mov	r0, r4
 800ee46:	b006      	add	sp, #24
 800ee48:	bd10      	pop	{r4, pc}
 800ee4a:	bf00      	nop

0800ee4c <convert_qos_profile>:
 800ee4c:	7a4a      	ldrb	r2, [r1, #9]
 800ee4e:	f891 c008 	ldrb.w	ip, [r1, #8]
 800ee52:	2a02      	cmp	r2, #2
 800ee54:	bf18      	it	ne
 800ee56:	2200      	movne	r2, #0
 800ee58:	7002      	strb	r2, [r0, #0]
 800ee5a:	780a      	ldrb	r2, [r1, #0]
 800ee5c:	8889      	ldrh	r1, [r1, #4]
 800ee5e:	8081      	strh	r1, [r0, #4]
 800ee60:	f1ac 0c02 	sub.w	ip, ip, #2
 800ee64:	f1a2 0202 	sub.w	r2, r2, #2
 800ee68:	fabc fc8c 	clz	ip, ip
 800ee6c:	fab2 f282 	clz	r2, r2
 800ee70:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
 800ee74:	0952      	lsrs	r2, r2, #5
 800ee76:	f880 c001 	strb.w	ip, [r0, #1]
 800ee7a:	7082      	strb	r2, [r0, #2]
 800ee7c:	4770      	bx	lr
 800ee7e:	bf00      	nop

0800ee80 <generate_type_name>:
 800ee80:	b530      	push	{r4, r5, lr}
 800ee82:	2300      	movs	r3, #0
 800ee84:	700b      	strb	r3, [r1, #0]
 800ee86:	6803      	ldr	r3, [r0, #0]
 800ee88:	b087      	sub	sp, #28
 800ee8a:	4614      	mov	r4, r2
 800ee8c:	b1d3      	cbz	r3, 800eec4 <generate_type_name+0x44>
 800ee8e:	4a0f      	ldr	r2, [pc, #60]	@ (800eecc <generate_type_name+0x4c>)
 800ee90:	4615      	mov	r5, r2
 800ee92:	9203      	str	r2, [sp, #12]
 800ee94:	9500      	str	r5, [sp, #0]
 800ee96:	6842      	ldr	r2, [r0, #4]
 800ee98:	480d      	ldr	r0, [pc, #52]	@ (800eed0 <generate_type_name+0x50>)
 800ee9a:	9001      	str	r0, [sp, #4]
 800ee9c:	4608      	mov	r0, r1
 800ee9e:	490d      	ldr	r1, [pc, #52]	@ (800eed4 <generate_type_name+0x54>)
 800eea0:	9204      	str	r2, [sp, #16]
 800eea2:	9105      	str	r1, [sp, #20]
 800eea4:	9102      	str	r1, [sp, #8]
 800eea6:	4a0c      	ldr	r2, [pc, #48]	@ (800eed8 <generate_type_name+0x58>)
 800eea8:	4621      	mov	r1, r4
 800eeaa:	f00c f9b1 	bl	801b210 <sniprintf>
 800eeae:	2800      	cmp	r0, #0
 800eeb0:	db05      	blt.n	800eebe <generate_type_name+0x3e>
 800eeb2:	4284      	cmp	r4, r0
 800eeb4:	bfd4      	ite	le
 800eeb6:	2000      	movle	r0, #0
 800eeb8:	2001      	movgt	r0, #1
 800eeba:	b007      	add	sp, #28
 800eebc:	bd30      	pop	{r4, r5, pc}
 800eebe:	2000      	movs	r0, #0
 800eec0:	b007      	add	sp, #28
 800eec2:	bd30      	pop	{r4, r5, pc}
 800eec4:	4b05      	ldr	r3, [pc, #20]	@ (800eedc <generate_type_name+0x5c>)
 800eec6:	4a01      	ldr	r2, [pc, #4]	@ (800eecc <generate_type_name+0x4c>)
 800eec8:	461d      	mov	r5, r3
 800eeca:	e7e2      	b.n	800ee92 <generate_type_name+0x12>
 800eecc:	0801d5e4 	.word	0x0801d5e4
 800eed0:	0801d5fc 	.word	0x0801d5fc
 800eed4:	0801d5f8 	.word	0x0801d5f8
 800eed8:	0801d5e8 	.word	0x0801d5e8
 800eedc:	0801e064 	.word	0x0801e064

0800eee0 <generate_topic_name>:
 800eee0:	b510      	push	{r4, lr}
 800eee2:	b082      	sub	sp, #8
 800eee4:	4614      	mov	r4, r2
 800eee6:	9000      	str	r0, [sp, #0]
 800eee8:	4b08      	ldr	r3, [pc, #32]	@ (800ef0c <generate_topic_name+0x2c>)
 800eeea:	4a09      	ldr	r2, [pc, #36]	@ (800ef10 <generate_topic_name+0x30>)
 800eeec:	4608      	mov	r0, r1
 800eeee:	4621      	mov	r1, r4
 800eef0:	f00c f98e 	bl	801b210 <sniprintf>
 800eef4:	2800      	cmp	r0, #0
 800eef6:	db05      	blt.n	800ef04 <generate_topic_name+0x24>
 800eef8:	4284      	cmp	r4, r0
 800eefa:	bfd4      	ite	le
 800eefc:	2000      	movle	r0, #0
 800eefe:	2001      	movgt	r0, #1
 800ef00:	b002      	add	sp, #8
 800ef02:	bd10      	pop	{r4, pc}
 800ef04:	2000      	movs	r0, #0
 800ef06:	b002      	add	sp, #8
 800ef08:	bd10      	pop	{r4, pc}
 800ef0a:	bf00      	nop
 800ef0c:	0801d608 	.word	0x0801d608
 800ef10:	0801d600 	.word	0x0801d600

0800ef14 <is_uxrce_rmw_identifier_valid>:
 800ef14:	b510      	push	{r4, lr}
 800ef16:	4604      	mov	r4, r0
 800ef18:	b140      	cbz	r0, 800ef2c <is_uxrce_rmw_identifier_valid+0x18>
 800ef1a:	f008 f851 	bl	8016fc0 <rmw_get_implementation_identifier>
 800ef1e:	4601      	mov	r1, r0
 800ef20:	4620      	mov	r0, r4
 800ef22:	f7f1 f955 	bl	80001d0 <strcmp>
 800ef26:	fab0 f080 	clz	r0, r0
 800ef2a:	0940      	lsrs	r0, r0, #5
 800ef2c:	bd10      	pop	{r4, pc}
 800ef2e:	bf00      	nop

0800ef30 <get_message_typesupport_handle>:
 800ef30:	6883      	ldr	r3, [r0, #8]
 800ef32:	4718      	bx	r3

0800ef34 <get_message_typesupport_handle_function>:
 800ef34:	b510      	push	{r4, lr}
 800ef36:	4604      	mov	r4, r0
 800ef38:	6800      	ldr	r0, [r0, #0]
 800ef3a:	f7f1 f949 	bl	80001d0 <strcmp>
 800ef3e:	2800      	cmp	r0, #0
 800ef40:	bf0c      	ite	eq
 800ef42:	4620      	moveq	r0, r4
 800ef44:	2000      	movne	r0, #0
 800ef46:	bd10      	pop	{r4, pc}

0800ef48 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Float64MultiArray>:
 800ef48:	4b04      	ldr	r3, [pc, #16]	@ (800ef5c <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Float64MultiArray+0x14>)
 800ef4a:	681a      	ldr	r2, [r3, #0]
 800ef4c:	b10a      	cbz	r2, 800ef52 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Float64MultiArray+0xa>
 800ef4e:	4803      	ldr	r0, [pc, #12]	@ (800ef5c <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Float64MultiArray+0x14>)
 800ef50:	4770      	bx	lr
 800ef52:	4a03      	ldr	r2, [pc, #12]	@ (800ef60 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Float64MultiArray+0x18>)
 800ef54:	4801      	ldr	r0, [pc, #4]	@ (800ef5c <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Float64MultiArray+0x14>)
 800ef56:	6812      	ldr	r2, [r2, #0]
 800ef58:	601a      	str	r2, [r3, #0]
 800ef5a:	4770      	bx	lr
 800ef5c:	2000004c 	.word	0x2000004c
 800ef60:	200001b0 	.word	0x200001b0

0800ef64 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Float64MultiArray>:
 800ef64:	4a02      	ldr	r2, [pc, #8]	@ (800ef70 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Float64MultiArray+0xc>)
 800ef66:	4b03      	ldr	r3, [pc, #12]	@ (800ef74 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Float64MultiArray+0x10>)
 800ef68:	6812      	ldr	r2, [r2, #0]
 800ef6a:	601a      	str	r2, [r3, #0]
 800ef6c:	4770      	bx	lr
 800ef6e:	bf00      	nop
 800ef70:	200001b0 	.word	0x200001b0
 800ef74:	2000004c 	.word	0x2000004c

0800ef78 <std_msgs__msg__Float64MultiArray__rosidl_typesupport_introspection_c__size_function__Float64MultiArray__data>:
 800ef78:	6840      	ldr	r0, [r0, #4]
 800ef7a:	4770      	bx	lr

0800ef7c <std_msgs__msg__Float64MultiArray__rosidl_typesupport_introspection_c__get_const_function__Float64MultiArray__data>:
 800ef7c:	6800      	ldr	r0, [r0, #0]
 800ef7e:	eb00 00c1 	add.w	r0, r0, r1, lsl #3
 800ef82:	4770      	bx	lr

0800ef84 <std_msgs__msg__Float64MultiArray__rosidl_typesupport_introspection_c__fetch_function__Float64MultiArray__data>:
 800ef84:	6803      	ldr	r3, [r0, #0]
 800ef86:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
 800ef8a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ef8e:	e9c2 0100 	strd	r0, r1, [r2]
 800ef92:	4770      	bx	lr

0800ef94 <std_msgs__msg__Float64MultiArray__rosidl_typesupport_introspection_c__assign_function__Float64MultiArray__data>:
 800ef94:	6803      	ldr	r3, [r0, #0]
 800ef96:	ed92 7b00 	vldr	d7, [r2]
 800ef9a:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
 800ef9e:	ed81 7b00 	vstr	d7, [r1]
 800efa2:	4770      	bx	lr

0800efa4 <std_msgs__msg__Float64MultiArray__rosidl_typesupport_introspection_c__Float64MultiArray_init_function>:
 800efa4:	f009 b94a 	b.w	801823c <std_msgs__msg__Float64MultiArray__init>

0800efa8 <std_msgs__msg__Float64MultiArray__rosidl_typesupport_introspection_c__Float64MultiArray_fini_function>:
 800efa8:	f009 b96c 	b.w	8018284 <std_msgs__msg__Float64MultiArray__fini>

0800efac <std_msgs__msg__Float64MultiArray__rosidl_typesupport_introspection_c__resize_function__Float64MultiArray__data>:
 800efac:	b510      	push	{r4, lr}
 800efae:	b082      	sub	sp, #8
 800efb0:	4604      	mov	r4, r0
 800efb2:	9101      	str	r1, [sp, #4]
 800efb4:	f009 f900 	bl	80181b8 <rosidl_runtime_c__double__Sequence__fini>
 800efb8:	9901      	ldr	r1, [sp, #4]
 800efba:	4620      	mov	r0, r4
 800efbc:	b002      	add	sp, #8
 800efbe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800efc2:	f009 b8e1 	b.w	8018188 <rosidl_runtime_c__double__Sequence__init>
 800efc6:	bf00      	nop

0800efc8 <std_msgs__msg__Float64MultiArray__rosidl_typesupport_introspection_c__get_function__Float64MultiArray__data>:
 800efc8:	6800      	ldr	r0, [r0, #0]
 800efca:	eb00 00c1 	add.w	r0, r0, r1, lsl #3
 800efce:	4770      	bx	lr

0800efd0 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Float64MultiArray>:
 800efd0:	b508      	push	{r3, lr}
 800efd2:	f000 f857 	bl	800f084 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__MultiArrayLayout>
 800efd6:	4b06      	ldr	r3, [pc, #24]	@ (800eff0 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Float64MultiArray+0x20>)
 800efd8:	4906      	ldr	r1, [pc, #24]	@ (800eff4 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Float64MultiArray+0x24>)
 800efda:	681a      	ldr	r2, [r3, #0]
 800efdc:	60c8      	str	r0, [r1, #12]
 800efde:	b10a      	cbz	r2, 800efe4 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Float64MultiArray+0x14>
 800efe0:	4803      	ldr	r0, [pc, #12]	@ (800eff0 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Float64MultiArray+0x20>)
 800efe2:	bd08      	pop	{r3, pc}
 800efe4:	4a04      	ldr	r2, [pc, #16]	@ (800eff8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Float64MultiArray+0x28>)
 800efe6:	4802      	ldr	r0, [pc, #8]	@ (800eff0 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Float64MultiArray+0x20>)
 800efe8:	6812      	ldr	r2, [r2, #0]
 800efea:	601a      	str	r2, [r3, #0]
 800efec:	bd08      	pop	{r3, pc}
 800efee:	bf00      	nop
 800eff0:	200000d0 	.word	0x200000d0
 800eff4:	20000058 	.word	0x20000058
 800eff8:	200001b4 	.word	0x200001b4

0800effc <std_msgs__msg__MultiArrayLayout__rosidl_typesupport_introspection_c__size_function__MultiArrayLayout__dim>:
 800effc:	6840      	ldr	r0, [r0, #4]
 800effe:	4770      	bx	lr

0800f000 <std_msgs__msg__MultiArrayLayout__rosidl_typesupport_introspection_c__get_const_function__MultiArrayLayout__dim>:
 800f000:	6800      	ldr	r0, [r0, #0]
 800f002:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 800f006:	eb00 0081 	add.w	r0, r0, r1, lsl #2
 800f00a:	4770      	bx	lr

0800f00c <std_msgs__msg__MultiArrayLayout__rosidl_typesupport_introspection_c__fetch_function__MultiArrayLayout__dim>:
 800f00c:	6803      	ldr	r3, [r0, #0]
 800f00e:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 800f012:	b500      	push	{lr}
 800f014:	eb03 0e81 	add.w	lr, r3, r1, lsl #2
 800f018:	4694      	mov	ip, r2
 800f01a:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800f01e:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800f022:	f8de 3000 	ldr.w	r3, [lr]
 800f026:	f8cc 3000 	str.w	r3, [ip]
 800f02a:	f85d fb04 	ldr.w	pc, [sp], #4
 800f02e:	bf00      	nop

0800f030 <std_msgs__msg__MultiArrayLayout__rosidl_typesupport_introspection_c__assign_function__MultiArrayLayout__dim>:
 800f030:	6803      	ldr	r3, [r0, #0]
 800f032:	b500      	push	{lr}
 800f034:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 800f038:	4696      	mov	lr, r2
 800f03a:	eb03 0c81 	add.w	ip, r3, r1, lsl #2
 800f03e:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800f042:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800f046:	f8de 3000 	ldr.w	r3, [lr]
 800f04a:	f8cc 3000 	str.w	r3, [ip]
 800f04e:	f85d fb04 	ldr.w	pc, [sp], #4
 800f052:	bf00      	nop

0800f054 <std_msgs__msg__MultiArrayLayout__rosidl_typesupport_introspection_c__MultiArrayLayout_init_function>:
 800f054:	f009 b9ac 	b.w	80183b0 <std_msgs__msg__MultiArrayLayout__init>

0800f058 <std_msgs__msg__MultiArrayLayout__rosidl_typesupport_introspection_c__MultiArrayLayout_fini_function>:
 800f058:	f009 b9bc 	b.w	80183d4 <std_msgs__msg__MultiArrayLayout__fini>

0800f05c <std_msgs__msg__MultiArrayLayout__rosidl_typesupport_introspection_c__resize_function__MultiArrayLayout__dim>:
 800f05c:	b510      	push	{r4, lr}
 800f05e:	b082      	sub	sp, #8
 800f060:	4604      	mov	r4, r0
 800f062:	9101      	str	r1, [sp, #4]
 800f064:	f009 f97c 	bl	8018360 <std_msgs__msg__MultiArrayDimension__Sequence__fini>
 800f068:	9901      	ldr	r1, [sp, #4]
 800f06a:	4620      	mov	r0, r4
 800f06c:	b002      	add	sp, #8
 800f06e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f072:	f009 b971 	b.w	8018358 <std_msgs__msg__MultiArrayDimension__Sequence__init>
 800f076:	bf00      	nop

0800f078 <std_msgs__msg__MultiArrayLayout__rosidl_typesupport_introspection_c__get_function__MultiArrayLayout__dim>:
 800f078:	6800      	ldr	r0, [r0, #0]
 800f07a:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 800f07e:	eb00 0081 	add.w	r0, r0, r1, lsl #2
 800f082:	4770      	bx	lr

0800f084 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__MultiArrayLayout>:
 800f084:	b508      	push	{r3, lr}
 800f086:	f009 f9ad 	bl	80183e4 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__MultiArrayDimension>
 800f08a:	4b06      	ldr	r3, [pc, #24]	@ (800f0a4 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__MultiArrayLayout+0x20>)
 800f08c:	4906      	ldr	r1, [pc, #24]	@ (800f0a8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__MultiArrayLayout+0x24>)
 800f08e:	681a      	ldr	r2, [r3, #0]
 800f090:	60c8      	str	r0, [r1, #12]
 800f092:	b10a      	cbz	r2, 800f098 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__MultiArrayLayout+0x14>
 800f094:	4803      	ldr	r0, [pc, #12]	@ (800f0a4 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__MultiArrayLayout+0x20>)
 800f096:	bd08      	pop	{r3, pc}
 800f098:	4a04      	ldr	r2, [pc, #16]	@ (800f0ac <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__MultiArrayLayout+0x28>)
 800f09a:	4802      	ldr	r0, [pc, #8]	@ (800f0a4 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__MultiArrayLayout+0x20>)
 800f09c:	6812      	ldr	r2, [r2, #0]
 800f09e:	601a      	str	r2, [r3, #0]
 800f0a0:	bd08      	pop	{r3, pc}
 800f0a2:	bf00      	nop
 800f0a4:	20000154 	.word	0x20000154
 800f0a8:	200000dc 	.word	0x200000dc
 800f0ac:	200001b4 	.word	0x200001b4

0800f0b0 <_Float64MultiArray__max_serialized_size>:
 800f0b0:	b500      	push	{lr}
 800f0b2:	b083      	sub	sp, #12
 800f0b4:	2301      	movs	r3, #1
 800f0b6:	2100      	movs	r1, #0
 800f0b8:	f10d 0007 	add.w	r0, sp, #7
 800f0bc:	f88d 3007 	strb.w	r3, [sp, #7]
 800f0c0:	f000 f91c 	bl	800f2fc <max_serialized_size_std_msgs__msg__MultiArrayLayout>
 800f0c4:	b003      	add	sp, #12
 800f0c6:	f85d fb04 	ldr.w	pc, [sp], #4
 800f0ca:	bf00      	nop

0800f0cc <get_serialized_size_std_msgs__msg__Float64MultiArray>:
 800f0cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f0ce:	4604      	mov	r4, r0
 800f0d0:	b160      	cbz	r0, 800f0ec <get_serialized_size_std_msgs__msg__Float64MultiArray+0x20>
 800f0d2:	460d      	mov	r5, r1
 800f0d4:	f000 f8b6 	bl	800f244 <get_serialized_size_std_msgs__msg__MultiArrayLayout>
 800f0d8:	182e      	adds	r6, r5, r0
 800f0da:	4630      	mov	r0, r6
 800f0dc:	2104      	movs	r1, #4
 800f0de:	6967      	ldr	r7, [r4, #20]
 800f0e0:	f001 fa98 	bl	8010614 <ucdr_alignment>
 800f0e4:	1d03      	adds	r3, r0, #4
 800f0e6:	441e      	add	r6, r3
 800f0e8:	b90f      	cbnz	r7, 800f0ee <get_serialized_size_std_msgs__msg__Float64MultiArray+0x22>
 800f0ea:	1b70      	subs	r0, r6, r5
 800f0ec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f0ee:	4630      	mov	r0, r6
 800f0f0:	2108      	movs	r1, #8
 800f0f2:	f001 fa8f 	bl	8010614 <ucdr_alignment>
 800f0f6:	eb06 03c7 	add.w	r3, r6, r7, lsl #3
 800f0fa:	181e      	adds	r6, r3, r0
 800f0fc:	1b70      	subs	r0, r6, r5
 800f0fe:	e7f5      	b.n	800f0ec <get_serialized_size_std_msgs__msg__Float64MultiArray+0x20>

0800f100 <_Float64MultiArray__cdr_deserialize>:
 800f100:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f102:	460c      	mov	r4, r1
 800f104:	b083      	sub	sp, #12
 800f106:	b1d1      	cbz	r1, 800f13e <_Float64MultiArray__cdr_deserialize+0x3e>
 800f108:	4606      	mov	r6, r0
 800f10a:	f000 f901 	bl	800f310 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__MultiArrayLayout>
 800f10e:	6843      	ldr	r3, [r0, #4]
 800f110:	4621      	mov	r1, r4
 800f112:	68db      	ldr	r3, [r3, #12]
 800f114:	4630      	mov	r0, r6
 800f116:	4798      	blx	r3
 800f118:	69a7      	ldr	r7, [r4, #24]
 800f11a:	6921      	ldr	r1, [r4, #16]
 800f11c:	ab01      	add	r3, sp, #4
 800f11e:	463a      	mov	r2, r7
 800f120:	4630      	mov	r0, r6
 800f122:	f001 fb4d 	bl	80107c0 <ucdr_deserialize_sequence_double>
 800f126:	9b01      	ldr	r3, [sp, #4]
 800f128:	4605      	mov	r5, r0
 800f12a:	b920      	cbnz	r0, 800f136 <_Float64MultiArray__cdr_deserialize+0x36>
 800f12c:	429f      	cmp	r7, r3
 800f12e:	d30a      	bcc.n	800f146 <_Float64MultiArray__cdr_deserialize+0x46>
 800f130:	4628      	mov	r0, r5
 800f132:	b003      	add	sp, #12
 800f134:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f136:	4628      	mov	r0, r5
 800f138:	6163      	str	r3, [r4, #20]
 800f13a:	b003      	add	sp, #12
 800f13c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f13e:	460d      	mov	r5, r1
 800f140:	4628      	mov	r0, r5
 800f142:	b003      	add	sp, #12
 800f144:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f146:	2301      	movs	r3, #1
 800f148:	75b0      	strb	r0, [r6, #22]
 800f14a:	7573      	strb	r3, [r6, #21]
 800f14c:	4630      	mov	r0, r6
 800f14e:	6165      	str	r5, [r4, #20]
 800f150:	2108      	movs	r1, #8
 800f152:	f001 fa75 	bl	8010640 <ucdr_align_to>
 800f156:	9901      	ldr	r1, [sp, #4]
 800f158:	4630      	mov	r0, r6
 800f15a:	00c9      	lsls	r1, r1, #3
 800f15c:	f001 faa6 	bl	80106ac <ucdr_advance_buffer>
 800f160:	4628      	mov	r0, r5
 800f162:	b003      	add	sp, #12
 800f164:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f166:	bf00      	nop

0800f168 <_Float64MultiArray__cdr_serialize>:
 800f168:	b180      	cbz	r0, 800f18c <_Float64MultiArray__cdr_serialize+0x24>
 800f16a:	b538      	push	{r3, r4, r5, lr}
 800f16c:	460d      	mov	r5, r1
 800f16e:	4604      	mov	r4, r0
 800f170:	f000 f8ce 	bl	800f310 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__MultiArrayLayout>
 800f174:	6843      	ldr	r3, [r0, #4]
 800f176:	4629      	mov	r1, r5
 800f178:	689b      	ldr	r3, [r3, #8]
 800f17a:	4620      	mov	r0, r4
 800f17c:	4798      	blx	r3
 800f17e:	e9d4 1204 	ldrd	r1, r2, [r4, #16]
 800f182:	4628      	mov	r0, r5
 800f184:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800f188:	f001 bb08 	b.w	801079c <ucdr_serialize_sequence_double>
 800f18c:	4770      	bx	lr
 800f18e:	bf00      	nop

0800f190 <_Float64MultiArray__get_serialized_size>:
 800f190:	b570      	push	{r4, r5, r6, lr}
 800f192:	4604      	mov	r4, r0
 800f194:	b150      	cbz	r0, 800f1ac <_Float64MultiArray__get_serialized_size+0x1c>
 800f196:	2100      	movs	r1, #0
 800f198:	f000 f854 	bl	800f244 <get_serialized_size_std_msgs__msg__MultiArrayLayout>
 800f19c:	2104      	movs	r1, #4
 800f19e:	6966      	ldr	r6, [r4, #20]
 800f1a0:	4605      	mov	r5, r0
 800f1a2:	f001 fa37 	bl	8010614 <ucdr_alignment>
 800f1a6:	4428      	add	r0, r5
 800f1a8:	1d04      	adds	r4, r0, #4
 800f1aa:	b90e      	cbnz	r6, 800f1b0 <_Float64MultiArray__get_serialized_size+0x20>
 800f1ac:	4620      	mov	r0, r4
 800f1ae:	bd70      	pop	{r4, r5, r6, pc}
 800f1b0:	4620      	mov	r0, r4
 800f1b2:	2108      	movs	r1, #8
 800f1b4:	f001 fa2e 	bl	8010614 <ucdr_alignment>
 800f1b8:	eb04 04c6 	add.w	r4, r4, r6, lsl #3
 800f1bc:	4404      	add	r4, r0
 800f1be:	4620      	mov	r0, r4
 800f1c0:	bd70      	pop	{r4, r5, r6, pc}
 800f1c2:	bf00      	nop

0800f1c4 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__Float64MultiArray>:
 800f1c4:	4800      	ldr	r0, [pc, #0]	@ (800f1c8 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__Float64MultiArray+0x4>)
 800f1c6:	4770      	bx	lr
 800f1c8:	20000160 	.word	0x20000160

0800f1cc <_MultiArrayLayout__max_serialized_size>:
 800f1cc:	b508      	push	{r3, lr}
 800f1ce:	2104      	movs	r1, #4
 800f1d0:	2000      	movs	r0, #0
 800f1d2:	f001 fa1f 	bl	8010614 <ucdr_alignment>
 800f1d6:	3004      	adds	r0, #4
 800f1d8:	bd08      	pop	{r3, pc}
 800f1da:	bf00      	nop

0800f1dc <get_serialized_size_std_msgs__msg__MultiArrayLayout.part.0>:
 800f1dc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f1e0:	4689      	mov	r9, r1
 800f1e2:	f8d0 8004 	ldr.w	r8, [r0, #4]
 800f1e6:	4607      	mov	r7, r0
 800f1e8:	2104      	movs	r1, #4
 800f1ea:	4648      	mov	r0, r9
 800f1ec:	f001 fa12 	bl	8010614 <ucdr_alignment>
 800f1f0:	f109 0304 	add.w	r3, r9, #4
 800f1f4:	18c6      	adds	r6, r0, r3
 800f1f6:	f1b8 0f00 	cmp.w	r8, #0
 800f1fa:	d018      	beq.n	800f22e <get_serialized_size_std_msgs__msg__MultiArrayLayout.part.0+0x52>
 800f1fc:	2500      	movs	r5, #0
 800f1fe:	f009 f98f 	bl	8018520 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__MultiArrayDimension>
 800f202:	683a      	ldr	r2, [r7, #0]
 800f204:	6843      	ldr	r3, [r0, #4]
 800f206:	eb05 0085 	add.w	r0, r5, r5, lsl #2
 800f20a:	4631      	mov	r1, r6
 800f20c:	695b      	ldr	r3, [r3, #20]
 800f20e:	eb02 0080 	add.w	r0, r2, r0, lsl #2
 800f212:	4798      	blx	r3
 800f214:	4604      	mov	r4, r0
 800f216:	2c04      	cmp	r4, #4
 800f218:	4621      	mov	r1, r4
 800f21a:	4630      	mov	r0, r6
 800f21c:	bf28      	it	cs
 800f21e:	2104      	movcs	r1, #4
 800f220:	f001 f9f8 	bl	8010614 <ucdr_alignment>
 800f224:	3501      	adds	r5, #1
 800f226:	4404      	add	r4, r0
 800f228:	45a8      	cmp	r8, r5
 800f22a:	4426      	add	r6, r4
 800f22c:	d1e7      	bne.n	800f1fe <get_serialized_size_std_msgs__msg__MultiArrayLayout.part.0+0x22>
 800f22e:	2104      	movs	r1, #4
 800f230:	4630      	mov	r0, r6
 800f232:	f001 f9ef 	bl	8010614 <ucdr_alignment>
 800f236:	f1c9 0904 	rsb	r9, r9, #4
 800f23a:	444e      	add	r6, r9
 800f23c:	4430      	add	r0, r6
 800f23e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f242:	bf00      	nop

0800f244 <get_serialized_size_std_msgs__msg__MultiArrayLayout>:
 800f244:	b108      	cbz	r0, 800f24a <get_serialized_size_std_msgs__msg__MultiArrayLayout+0x6>
 800f246:	f7ff bfc9 	b.w	800f1dc <get_serialized_size_std_msgs__msg__MultiArrayLayout.part.0>
 800f24a:	4770      	bx	lr

0800f24c <_MultiArrayLayout__get_serialized_size>:
 800f24c:	b110      	cbz	r0, 800f254 <_MultiArrayLayout__get_serialized_size+0x8>
 800f24e:	2100      	movs	r1, #0
 800f250:	f7ff bfc4 	b.w	800f1dc <get_serialized_size_std_msgs__msg__MultiArrayLayout.part.0>
 800f254:	4770      	bx	lr
 800f256:	bf00      	nop

0800f258 <_MultiArrayLayout__cdr_deserialize>:
 800f258:	b349      	cbz	r1, 800f2ae <_MultiArrayLayout__cdr_deserialize+0x56>
 800f25a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f25c:	460e      	mov	r6, r1
 800f25e:	b083      	sub	sp, #12
 800f260:	a901      	add	r1, sp, #4
 800f262:	4607      	mov	r7, r0
 800f264:	f000 fbcc 	bl	800fa00 <ucdr_deserialize_uint32_t>
 800f268:	9b01      	ldr	r3, [sp, #4]
 800f26a:	68b2      	ldr	r2, [r6, #8]
 800f26c:	429a      	cmp	r2, r3
 800f26e:	d31b      	bcc.n	800f2a8 <_MultiArrayLayout__cdr_deserialize+0x50>
 800f270:	6073      	str	r3, [r6, #4]
 800f272:	b18b      	cbz	r3, 800f298 <_MultiArrayLayout__cdr_deserialize+0x40>
 800f274:	2400      	movs	r4, #0
 800f276:	4625      	mov	r5, r4
 800f278:	e002      	b.n	800f280 <_MultiArrayLayout__cdr_deserialize+0x28>
 800f27a:	9b01      	ldr	r3, [sp, #4]
 800f27c:	429d      	cmp	r5, r3
 800f27e:	d20b      	bcs.n	800f298 <_MultiArrayLayout__cdr_deserialize+0x40>
 800f280:	f009 f94e 	bl	8018520 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__MultiArrayDimension>
 800f284:	6831      	ldr	r1, [r6, #0]
 800f286:	6843      	ldr	r3, [r0, #4]
 800f288:	4421      	add	r1, r4
 800f28a:	68db      	ldr	r3, [r3, #12]
 800f28c:	4638      	mov	r0, r7
 800f28e:	4798      	blx	r3
 800f290:	3501      	adds	r5, #1
 800f292:	3414      	adds	r4, #20
 800f294:	2800      	cmp	r0, #0
 800f296:	d1f0      	bne.n	800f27a <_MultiArrayLayout__cdr_deserialize+0x22>
 800f298:	f106 010c 	add.w	r1, r6, #12
 800f29c:	4638      	mov	r0, r7
 800f29e:	b003      	add	sp, #12
 800f2a0:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 800f2a4:	f000 bbac 	b.w	800fa00 <ucdr_deserialize_uint32_t>
 800f2a8:	2000      	movs	r0, #0
 800f2aa:	b003      	add	sp, #12
 800f2ac:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f2ae:	2000      	movs	r0, #0
 800f2b0:	4770      	bx	lr
 800f2b2:	bf00      	nop

0800f2b4 <_MultiArrayLayout__cdr_serialize>:
 800f2b4:	b308      	cbz	r0, 800f2fa <_MultiArrayLayout__cdr_serialize+0x46>
 800f2b6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f2b8:	6847      	ldr	r7, [r0, #4]
 800f2ba:	460e      	mov	r6, r1
 800f2bc:	4605      	mov	r5, r0
 800f2be:	4608      	mov	r0, r1
 800f2c0:	4639      	mov	r1, r7
 800f2c2:	f000 fa6d 	bl	800f7a0 <ucdr_serialize_uint32_t>
 800f2c6:	b190      	cbz	r0, 800f2ee <_MultiArrayLayout__cdr_serialize+0x3a>
 800f2c8:	b18f      	cbz	r7, 800f2ee <_MultiArrayLayout__cdr_serialize+0x3a>
 800f2ca:	2400      	movs	r4, #0
 800f2cc:	e001      	b.n	800f2d2 <_MultiArrayLayout__cdr_serialize+0x1e>
 800f2ce:	42a7      	cmp	r7, r4
 800f2d0:	d00d      	beq.n	800f2ee <_MultiArrayLayout__cdr_serialize+0x3a>
 800f2d2:	f009 f925 	bl	8018520 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__MultiArrayDimension>
 800f2d6:	682a      	ldr	r2, [r5, #0]
 800f2d8:	6843      	ldr	r3, [r0, #4]
 800f2da:	eb04 0084 	add.w	r0, r4, r4, lsl #2
 800f2de:	689b      	ldr	r3, [r3, #8]
 800f2e0:	4631      	mov	r1, r6
 800f2e2:	eb02 0080 	add.w	r0, r2, r0, lsl #2
 800f2e6:	3401      	adds	r4, #1
 800f2e8:	4798      	blx	r3
 800f2ea:	2800      	cmp	r0, #0
 800f2ec:	d1ef      	bne.n	800f2ce <_MultiArrayLayout__cdr_serialize+0x1a>
 800f2ee:	68e9      	ldr	r1, [r5, #12]
 800f2f0:	4630      	mov	r0, r6
 800f2f2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800f2f6:	f000 ba53 	b.w	800f7a0 <ucdr_serialize_uint32_t>
 800f2fa:	4770      	bx	lr

0800f2fc <max_serialized_size_std_msgs__msg__MultiArrayLayout>:
 800f2fc:	b508      	push	{r3, lr}
 800f2fe:	4603      	mov	r3, r0
 800f300:	2200      	movs	r2, #0
 800f302:	4608      	mov	r0, r1
 800f304:	701a      	strb	r2, [r3, #0]
 800f306:	2104      	movs	r1, #4
 800f308:	f001 f984 	bl	8010614 <ucdr_alignment>
 800f30c:	3004      	adds	r0, #4
 800f30e:	bd08      	pop	{r3, pc}

0800f310 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__MultiArrayLayout>:
 800f310:	4800      	ldr	r0, [pc, #0]	@ (800f314 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__MultiArrayLayout+0x4>)
 800f312:	4770      	bx	lr
 800f314:	20000188 	.word	0x20000188

0800f318 <ucdr_serialize_bool>:
 800f318:	b538      	push	{r3, r4, r5, lr}
 800f31a:	460d      	mov	r5, r1
 800f31c:	2101      	movs	r1, #1
 800f31e:	4604      	mov	r4, r0
 800f320:	f001 f92c 	bl	801057c <ucdr_check_final_buffer_behavior>
 800f324:	b148      	cbz	r0, 800f33a <ucdr_serialize_bool+0x22>
 800f326:	68a3      	ldr	r3, [r4, #8]
 800f328:	701d      	strb	r5, [r3, #0]
 800f32a:	68a2      	ldr	r2, [r4, #8]
 800f32c:	6923      	ldr	r3, [r4, #16]
 800f32e:	2101      	movs	r1, #1
 800f330:	440a      	add	r2, r1
 800f332:	440b      	add	r3, r1
 800f334:	60a2      	str	r2, [r4, #8]
 800f336:	6123      	str	r3, [r4, #16]
 800f338:	7561      	strb	r1, [r4, #21]
 800f33a:	7da0      	ldrb	r0, [r4, #22]
 800f33c:	f080 0001 	eor.w	r0, r0, #1
 800f340:	bd38      	pop	{r3, r4, r5, pc}
 800f342:	bf00      	nop

0800f344 <ucdr_deserialize_bool>:
 800f344:	b538      	push	{r3, r4, r5, lr}
 800f346:	460d      	mov	r5, r1
 800f348:	2101      	movs	r1, #1
 800f34a:	4604      	mov	r4, r0
 800f34c:	f001 f916 	bl	801057c <ucdr_check_final_buffer_behavior>
 800f350:	b160      	cbz	r0, 800f36c <ucdr_deserialize_bool+0x28>
 800f352:	68a2      	ldr	r2, [r4, #8]
 800f354:	6923      	ldr	r3, [r4, #16]
 800f356:	f812 1b01 	ldrb.w	r1, [r2], #1
 800f35a:	3900      	subs	r1, #0
 800f35c:	bf18      	it	ne
 800f35e:	2101      	movne	r1, #1
 800f360:	7029      	strb	r1, [r5, #0]
 800f362:	3301      	adds	r3, #1
 800f364:	2101      	movs	r1, #1
 800f366:	60a2      	str	r2, [r4, #8]
 800f368:	6123      	str	r3, [r4, #16]
 800f36a:	7561      	strb	r1, [r4, #21]
 800f36c:	7da0      	ldrb	r0, [r4, #22]
 800f36e:	f080 0001 	eor.w	r0, r0, #1
 800f372:	bd38      	pop	{r3, r4, r5, pc}

0800f374 <ucdr_serialize_uint8_t>:
 800f374:	b538      	push	{r3, r4, r5, lr}
 800f376:	460d      	mov	r5, r1
 800f378:	2101      	movs	r1, #1
 800f37a:	4604      	mov	r4, r0
 800f37c:	f001 f8fe 	bl	801057c <ucdr_check_final_buffer_behavior>
 800f380:	b148      	cbz	r0, 800f396 <ucdr_serialize_uint8_t+0x22>
 800f382:	68a3      	ldr	r3, [r4, #8]
 800f384:	701d      	strb	r5, [r3, #0]
 800f386:	68a2      	ldr	r2, [r4, #8]
 800f388:	6923      	ldr	r3, [r4, #16]
 800f38a:	2101      	movs	r1, #1
 800f38c:	440a      	add	r2, r1
 800f38e:	440b      	add	r3, r1
 800f390:	60a2      	str	r2, [r4, #8]
 800f392:	6123      	str	r3, [r4, #16]
 800f394:	7561      	strb	r1, [r4, #21]
 800f396:	7da0      	ldrb	r0, [r4, #22]
 800f398:	f080 0001 	eor.w	r0, r0, #1
 800f39c:	bd38      	pop	{r3, r4, r5, pc}
 800f39e:	bf00      	nop

0800f3a0 <ucdr_deserialize_uint8_t>:
 800f3a0:	b538      	push	{r3, r4, r5, lr}
 800f3a2:	460d      	mov	r5, r1
 800f3a4:	2101      	movs	r1, #1
 800f3a6:	4604      	mov	r4, r0
 800f3a8:	f001 f8e8 	bl	801057c <ucdr_check_final_buffer_behavior>
 800f3ac:	b150      	cbz	r0, 800f3c4 <ucdr_deserialize_uint8_t+0x24>
 800f3ae:	68a3      	ldr	r3, [r4, #8]
 800f3b0:	781b      	ldrb	r3, [r3, #0]
 800f3b2:	702b      	strb	r3, [r5, #0]
 800f3b4:	68a2      	ldr	r2, [r4, #8]
 800f3b6:	6923      	ldr	r3, [r4, #16]
 800f3b8:	2101      	movs	r1, #1
 800f3ba:	440a      	add	r2, r1
 800f3bc:	440b      	add	r3, r1
 800f3be:	60a2      	str	r2, [r4, #8]
 800f3c0:	6123      	str	r3, [r4, #16]
 800f3c2:	7561      	strb	r1, [r4, #21]
 800f3c4:	7da0      	ldrb	r0, [r4, #22]
 800f3c6:	f080 0001 	eor.w	r0, r0, #1
 800f3ca:	bd38      	pop	{r3, r4, r5, pc}

0800f3cc <ucdr_serialize_uint16_t>:
 800f3cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f3d0:	b082      	sub	sp, #8
 800f3d2:	460b      	mov	r3, r1
 800f3d4:	2102      	movs	r1, #2
 800f3d6:	4604      	mov	r4, r0
 800f3d8:	f8ad 3006 	strh.w	r3, [sp, #6]
 800f3dc:	f001 f922 	bl	8010624 <ucdr_buffer_alignment>
 800f3e0:	4601      	mov	r1, r0
 800f3e2:	4620      	mov	r0, r4
 800f3e4:	7d67      	ldrb	r7, [r4, #21]
 800f3e6:	f001 f961 	bl	80106ac <ucdr_advance_buffer>
 800f3ea:	2102      	movs	r1, #2
 800f3ec:	4620      	mov	r0, r4
 800f3ee:	f001 f8b9 	bl	8010564 <ucdr_check_buffer_available_for>
 800f3f2:	bb78      	cbnz	r0, 800f454 <ucdr_serialize_uint16_t+0x88>
 800f3f4:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 800f3f8:	42ab      	cmp	r3, r5
 800f3fa:	d926      	bls.n	800f44a <ucdr_serialize_uint16_t+0x7e>
 800f3fc:	1b5e      	subs	r6, r3, r5
 800f3fe:	60a3      	str	r3, [r4, #8]
 800f400:	6923      	ldr	r3, [r4, #16]
 800f402:	f1c6 0802 	rsb	r8, r6, #2
 800f406:	4433      	add	r3, r6
 800f408:	6123      	str	r3, [r4, #16]
 800f40a:	4641      	mov	r1, r8
 800f40c:	4620      	mov	r0, r4
 800f40e:	f001 f8b5 	bl	801057c <ucdr_check_final_buffer_behavior>
 800f412:	2800      	cmp	r0, #0
 800f414:	d03b      	beq.n	800f48e <ucdr_serialize_uint16_t+0xc2>
 800f416:	7d23      	ldrb	r3, [r4, #20]
 800f418:	2b01      	cmp	r3, #1
 800f41a:	d04a      	beq.n	800f4b2 <ucdr_serialize_uint16_t+0xe6>
 800f41c:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800f420:	702b      	strb	r3, [r5, #0]
 800f422:	2e00      	cmp	r6, #0
 800f424:	d040      	beq.n	800f4a8 <ucdr_serialize_uint16_t+0xdc>
 800f426:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800f42a:	706b      	strb	r3, [r5, #1]
 800f42c:	6923      	ldr	r3, [r4, #16]
 800f42e:	68a2      	ldr	r2, [r4, #8]
 800f430:	7da0      	ldrb	r0, [r4, #22]
 800f432:	3302      	adds	r3, #2
 800f434:	1b9e      	subs	r6, r3, r6
 800f436:	4442      	add	r2, r8
 800f438:	2302      	movs	r3, #2
 800f43a:	f080 0001 	eor.w	r0, r0, #1
 800f43e:	60a2      	str	r2, [r4, #8]
 800f440:	6126      	str	r6, [r4, #16]
 800f442:	7563      	strb	r3, [r4, #21]
 800f444:	b002      	add	sp, #8
 800f446:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f44a:	2102      	movs	r1, #2
 800f44c:	4620      	mov	r0, r4
 800f44e:	f001 f895 	bl	801057c <ucdr_check_final_buffer_behavior>
 800f452:	b190      	cbz	r0, 800f47a <ucdr_serialize_uint16_t+0xae>
 800f454:	7d23      	ldrb	r3, [r4, #20]
 800f456:	2b01      	cmp	r3, #1
 800f458:	68a3      	ldr	r3, [r4, #8]
 800f45a:	d014      	beq.n	800f486 <ucdr_serialize_uint16_t+0xba>
 800f45c:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800f460:	701a      	strb	r2, [r3, #0]
 800f462:	68a3      	ldr	r3, [r4, #8]
 800f464:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800f468:	705a      	strb	r2, [r3, #1]
 800f46a:	68a2      	ldr	r2, [r4, #8]
 800f46c:	6923      	ldr	r3, [r4, #16]
 800f46e:	3202      	adds	r2, #2
 800f470:	3302      	adds	r3, #2
 800f472:	2102      	movs	r1, #2
 800f474:	60a2      	str	r2, [r4, #8]
 800f476:	6123      	str	r3, [r4, #16]
 800f478:	7561      	strb	r1, [r4, #21]
 800f47a:	7da0      	ldrb	r0, [r4, #22]
 800f47c:	f080 0001 	eor.w	r0, r0, #1
 800f480:	b002      	add	sp, #8
 800f482:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f486:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 800f48a:	801a      	strh	r2, [r3, #0]
 800f48c:	e7ed      	b.n	800f46a <ucdr_serialize_uint16_t+0x9e>
 800f48e:	68a2      	ldr	r2, [r4, #8]
 800f490:	6923      	ldr	r3, [r4, #16]
 800f492:	7da0      	ldrb	r0, [r4, #22]
 800f494:	7567      	strb	r7, [r4, #21]
 800f496:	1b92      	subs	r2, r2, r6
 800f498:	1b9b      	subs	r3, r3, r6
 800f49a:	f080 0001 	eor.w	r0, r0, #1
 800f49e:	60a2      	str	r2, [r4, #8]
 800f4a0:	6123      	str	r3, [r4, #16]
 800f4a2:	b002      	add	sp, #8
 800f4a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f4a8:	68a3      	ldr	r3, [r4, #8]
 800f4aa:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800f4ae:	701a      	strb	r2, [r3, #0]
 800f4b0:	e7bc      	b.n	800f42c <ucdr_serialize_uint16_t+0x60>
 800f4b2:	4628      	mov	r0, r5
 800f4b4:	f10d 0506 	add.w	r5, sp, #6
 800f4b8:	4629      	mov	r1, r5
 800f4ba:	4632      	mov	r2, r6
 800f4bc:	f00c f935 	bl	801b72a <memcpy>
 800f4c0:	68a0      	ldr	r0, [r4, #8]
 800f4c2:	4642      	mov	r2, r8
 800f4c4:	19a9      	adds	r1, r5, r6
 800f4c6:	f00c f930 	bl	801b72a <memcpy>
 800f4ca:	e7af      	b.n	800f42c <ucdr_serialize_uint16_t+0x60>

0800f4cc <ucdr_serialize_endian_uint16_t>:
 800f4cc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800f4d0:	b083      	sub	sp, #12
 800f4d2:	460d      	mov	r5, r1
 800f4d4:	2102      	movs	r1, #2
 800f4d6:	4604      	mov	r4, r0
 800f4d8:	f8ad 2006 	strh.w	r2, [sp, #6]
 800f4dc:	f001 f8a2 	bl	8010624 <ucdr_buffer_alignment>
 800f4e0:	4601      	mov	r1, r0
 800f4e2:	4620      	mov	r0, r4
 800f4e4:	f894 8015 	ldrb.w	r8, [r4, #21]
 800f4e8:	f001 f8e0 	bl	80106ac <ucdr_advance_buffer>
 800f4ec:	2102      	movs	r1, #2
 800f4ee:	4620      	mov	r0, r4
 800f4f0:	f001 f838 	bl	8010564 <ucdr_check_buffer_available_for>
 800f4f4:	bb70      	cbnz	r0, 800f554 <ucdr_serialize_endian_uint16_t+0x88>
 800f4f6:	e9d4 6701 	ldrd	r6, r7, [r4, #4]
 800f4fa:	42be      	cmp	r6, r7
 800f4fc:	d925      	bls.n	800f54a <ucdr_serialize_endian_uint16_t+0x7e>
 800f4fe:	6923      	ldr	r3, [r4, #16]
 800f500:	60a6      	str	r6, [r4, #8]
 800f502:	1bf6      	subs	r6, r6, r7
 800f504:	4433      	add	r3, r6
 800f506:	f1c6 0902 	rsb	r9, r6, #2
 800f50a:	6123      	str	r3, [r4, #16]
 800f50c:	4649      	mov	r1, r9
 800f50e:	4620      	mov	r0, r4
 800f510:	f001 f834 	bl	801057c <ucdr_check_final_buffer_behavior>
 800f514:	2800      	cmp	r0, #0
 800f516:	d039      	beq.n	800f58c <ucdr_serialize_endian_uint16_t+0xc0>
 800f518:	2d01      	cmp	r5, #1
 800f51a:	d04a      	beq.n	800f5b2 <ucdr_serialize_endian_uint16_t+0xe6>
 800f51c:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800f520:	703b      	strb	r3, [r7, #0]
 800f522:	2e00      	cmp	r6, #0
 800f524:	d040      	beq.n	800f5a8 <ucdr_serialize_endian_uint16_t+0xdc>
 800f526:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800f52a:	707b      	strb	r3, [r7, #1]
 800f52c:	6923      	ldr	r3, [r4, #16]
 800f52e:	68a2      	ldr	r2, [r4, #8]
 800f530:	7da0      	ldrb	r0, [r4, #22]
 800f532:	3302      	adds	r3, #2
 800f534:	444a      	add	r2, r9
 800f536:	1b9b      	subs	r3, r3, r6
 800f538:	2102      	movs	r1, #2
 800f53a:	f080 0001 	eor.w	r0, r0, #1
 800f53e:	60a2      	str	r2, [r4, #8]
 800f540:	6123      	str	r3, [r4, #16]
 800f542:	7561      	strb	r1, [r4, #21]
 800f544:	b003      	add	sp, #12
 800f546:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800f54a:	2102      	movs	r1, #2
 800f54c:	4620      	mov	r0, r4
 800f54e:	f001 f815 	bl	801057c <ucdr_check_final_buffer_behavior>
 800f552:	b188      	cbz	r0, 800f578 <ucdr_serialize_endian_uint16_t+0xac>
 800f554:	2d01      	cmp	r5, #1
 800f556:	68a3      	ldr	r3, [r4, #8]
 800f558:	d014      	beq.n	800f584 <ucdr_serialize_endian_uint16_t+0xb8>
 800f55a:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800f55e:	701a      	strb	r2, [r3, #0]
 800f560:	68a3      	ldr	r3, [r4, #8]
 800f562:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800f566:	705a      	strb	r2, [r3, #1]
 800f568:	68a2      	ldr	r2, [r4, #8]
 800f56a:	6923      	ldr	r3, [r4, #16]
 800f56c:	3202      	adds	r2, #2
 800f56e:	3302      	adds	r3, #2
 800f570:	2102      	movs	r1, #2
 800f572:	60a2      	str	r2, [r4, #8]
 800f574:	6123      	str	r3, [r4, #16]
 800f576:	7561      	strb	r1, [r4, #21]
 800f578:	7da0      	ldrb	r0, [r4, #22]
 800f57a:	f080 0001 	eor.w	r0, r0, #1
 800f57e:	b003      	add	sp, #12
 800f580:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800f584:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 800f588:	801a      	strh	r2, [r3, #0]
 800f58a:	e7ed      	b.n	800f568 <ucdr_serialize_endian_uint16_t+0x9c>
 800f58c:	68a2      	ldr	r2, [r4, #8]
 800f58e:	6923      	ldr	r3, [r4, #16]
 800f590:	7da0      	ldrb	r0, [r4, #22]
 800f592:	f884 8015 	strb.w	r8, [r4, #21]
 800f596:	1b92      	subs	r2, r2, r6
 800f598:	1b9b      	subs	r3, r3, r6
 800f59a:	f080 0001 	eor.w	r0, r0, #1
 800f59e:	60a2      	str	r2, [r4, #8]
 800f5a0:	6123      	str	r3, [r4, #16]
 800f5a2:	b003      	add	sp, #12
 800f5a4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800f5a8:	68a3      	ldr	r3, [r4, #8]
 800f5aa:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800f5ae:	701a      	strb	r2, [r3, #0]
 800f5b0:	e7bc      	b.n	800f52c <ucdr_serialize_endian_uint16_t+0x60>
 800f5b2:	f10d 0506 	add.w	r5, sp, #6
 800f5b6:	4629      	mov	r1, r5
 800f5b8:	4632      	mov	r2, r6
 800f5ba:	4638      	mov	r0, r7
 800f5bc:	f00c f8b5 	bl	801b72a <memcpy>
 800f5c0:	68a0      	ldr	r0, [r4, #8]
 800f5c2:	464a      	mov	r2, r9
 800f5c4:	19a9      	adds	r1, r5, r6
 800f5c6:	f00c f8b0 	bl	801b72a <memcpy>
 800f5ca:	e7af      	b.n	800f52c <ucdr_serialize_endian_uint16_t+0x60>

0800f5cc <ucdr_deserialize_uint16_t>:
 800f5cc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f5d0:	460d      	mov	r5, r1
 800f5d2:	2102      	movs	r1, #2
 800f5d4:	4604      	mov	r4, r0
 800f5d6:	f001 f825 	bl	8010624 <ucdr_buffer_alignment>
 800f5da:	4601      	mov	r1, r0
 800f5dc:	4620      	mov	r0, r4
 800f5de:	f894 8015 	ldrb.w	r8, [r4, #21]
 800f5e2:	f001 f863 	bl	80106ac <ucdr_advance_buffer>
 800f5e6:	2102      	movs	r1, #2
 800f5e8:	4620      	mov	r0, r4
 800f5ea:	f000 ffbb 	bl	8010564 <ucdr_check_buffer_available_for>
 800f5ee:	bb60      	cbnz	r0, 800f64a <ucdr_deserialize_uint16_t+0x7e>
 800f5f0:	e9d4 6701 	ldrd	r6, r7, [r4, #4]
 800f5f4:	42be      	cmp	r6, r7
 800f5f6:	d923      	bls.n	800f640 <ucdr_deserialize_uint16_t+0x74>
 800f5f8:	6923      	ldr	r3, [r4, #16]
 800f5fa:	60a6      	str	r6, [r4, #8]
 800f5fc:	1bf6      	subs	r6, r6, r7
 800f5fe:	4433      	add	r3, r6
 800f600:	f1c6 0902 	rsb	r9, r6, #2
 800f604:	6123      	str	r3, [r4, #16]
 800f606:	4649      	mov	r1, r9
 800f608:	4620      	mov	r0, r4
 800f60a:	f000 ffb7 	bl	801057c <ucdr_check_final_buffer_behavior>
 800f60e:	2800      	cmp	r0, #0
 800f610:	d034      	beq.n	800f67c <ucdr_deserialize_uint16_t+0xb0>
 800f612:	7d23      	ldrb	r3, [r4, #20]
 800f614:	2b01      	cmp	r3, #1
 800f616:	d042      	beq.n	800f69e <ucdr_deserialize_uint16_t+0xd2>
 800f618:	787b      	ldrb	r3, [r7, #1]
 800f61a:	702b      	strb	r3, [r5, #0]
 800f61c:	2e00      	cmp	r6, #0
 800f61e:	d03a      	beq.n	800f696 <ucdr_deserialize_uint16_t+0xca>
 800f620:	783b      	ldrb	r3, [r7, #0]
 800f622:	706b      	strb	r3, [r5, #1]
 800f624:	6923      	ldr	r3, [r4, #16]
 800f626:	68a2      	ldr	r2, [r4, #8]
 800f628:	7da0      	ldrb	r0, [r4, #22]
 800f62a:	2102      	movs	r1, #2
 800f62c:	3302      	adds	r3, #2
 800f62e:	444a      	add	r2, r9
 800f630:	1b9b      	subs	r3, r3, r6
 800f632:	7561      	strb	r1, [r4, #21]
 800f634:	60a2      	str	r2, [r4, #8]
 800f636:	6123      	str	r3, [r4, #16]
 800f638:	f080 0001 	eor.w	r0, r0, #1
 800f63c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f640:	2102      	movs	r1, #2
 800f642:	4620      	mov	r0, r4
 800f644:	f000 ff9a 	bl	801057c <ucdr_check_final_buffer_behavior>
 800f648:	b180      	cbz	r0, 800f66c <ucdr_deserialize_uint16_t+0xa0>
 800f64a:	7d23      	ldrb	r3, [r4, #20]
 800f64c:	2b01      	cmp	r3, #1
 800f64e:	68a3      	ldr	r3, [r4, #8]
 800f650:	d011      	beq.n	800f676 <ucdr_deserialize_uint16_t+0xaa>
 800f652:	785b      	ldrb	r3, [r3, #1]
 800f654:	702b      	strb	r3, [r5, #0]
 800f656:	68a3      	ldr	r3, [r4, #8]
 800f658:	781b      	ldrb	r3, [r3, #0]
 800f65a:	706b      	strb	r3, [r5, #1]
 800f65c:	68a2      	ldr	r2, [r4, #8]
 800f65e:	6923      	ldr	r3, [r4, #16]
 800f660:	3202      	adds	r2, #2
 800f662:	3302      	adds	r3, #2
 800f664:	2102      	movs	r1, #2
 800f666:	60a2      	str	r2, [r4, #8]
 800f668:	6123      	str	r3, [r4, #16]
 800f66a:	7561      	strb	r1, [r4, #21]
 800f66c:	7da0      	ldrb	r0, [r4, #22]
 800f66e:	f080 0001 	eor.w	r0, r0, #1
 800f672:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f676:	881b      	ldrh	r3, [r3, #0]
 800f678:	802b      	strh	r3, [r5, #0]
 800f67a:	e7ef      	b.n	800f65c <ucdr_deserialize_uint16_t+0x90>
 800f67c:	68a2      	ldr	r2, [r4, #8]
 800f67e:	6923      	ldr	r3, [r4, #16]
 800f680:	7da0      	ldrb	r0, [r4, #22]
 800f682:	f884 8015 	strb.w	r8, [r4, #21]
 800f686:	1b92      	subs	r2, r2, r6
 800f688:	1b9b      	subs	r3, r3, r6
 800f68a:	60a2      	str	r2, [r4, #8]
 800f68c:	6123      	str	r3, [r4, #16]
 800f68e:	f080 0001 	eor.w	r0, r0, #1
 800f692:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f696:	68a3      	ldr	r3, [r4, #8]
 800f698:	781b      	ldrb	r3, [r3, #0]
 800f69a:	706b      	strb	r3, [r5, #1]
 800f69c:	e7c2      	b.n	800f624 <ucdr_deserialize_uint16_t+0x58>
 800f69e:	4639      	mov	r1, r7
 800f6a0:	4632      	mov	r2, r6
 800f6a2:	4628      	mov	r0, r5
 800f6a4:	f00c f841 	bl	801b72a <memcpy>
 800f6a8:	68a1      	ldr	r1, [r4, #8]
 800f6aa:	464a      	mov	r2, r9
 800f6ac:	19a8      	adds	r0, r5, r6
 800f6ae:	f00c f83c 	bl	801b72a <memcpy>
 800f6b2:	e7b7      	b.n	800f624 <ucdr_deserialize_uint16_t+0x58>

0800f6b4 <ucdr_deserialize_endian_uint16_t>:
 800f6b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f6b8:	460e      	mov	r6, r1
 800f6ba:	2102      	movs	r1, #2
 800f6bc:	4604      	mov	r4, r0
 800f6be:	4615      	mov	r5, r2
 800f6c0:	f000 ffb0 	bl	8010624 <ucdr_buffer_alignment>
 800f6c4:	4601      	mov	r1, r0
 800f6c6:	4620      	mov	r0, r4
 800f6c8:	f894 9015 	ldrb.w	r9, [r4, #21]
 800f6cc:	f000 ffee 	bl	80106ac <ucdr_advance_buffer>
 800f6d0:	2102      	movs	r1, #2
 800f6d2:	4620      	mov	r0, r4
 800f6d4:	f000 ff46 	bl	8010564 <ucdr_check_buffer_available_for>
 800f6d8:	bb70      	cbnz	r0, 800f738 <ucdr_deserialize_endian_uint16_t+0x84>
 800f6da:	e9d4 7801 	ldrd	r7, r8, [r4, #4]
 800f6de:	4547      	cmp	r7, r8
 800f6e0:	d925      	bls.n	800f72e <ucdr_deserialize_endian_uint16_t+0x7a>
 800f6e2:	6923      	ldr	r3, [r4, #16]
 800f6e4:	60a7      	str	r7, [r4, #8]
 800f6e6:	eba7 0708 	sub.w	r7, r7, r8
 800f6ea:	443b      	add	r3, r7
 800f6ec:	f1c7 0a02 	rsb	sl, r7, #2
 800f6f0:	6123      	str	r3, [r4, #16]
 800f6f2:	4651      	mov	r1, sl
 800f6f4:	4620      	mov	r0, r4
 800f6f6:	f000 ff41 	bl	801057c <ucdr_check_final_buffer_behavior>
 800f6fa:	2800      	cmp	r0, #0
 800f6fc:	d034      	beq.n	800f768 <ucdr_deserialize_endian_uint16_t+0xb4>
 800f6fe:	2e01      	cmp	r6, #1
 800f700:	d043      	beq.n	800f78a <ucdr_deserialize_endian_uint16_t+0xd6>
 800f702:	f898 3001 	ldrb.w	r3, [r8, #1]
 800f706:	702b      	strb	r3, [r5, #0]
 800f708:	2f00      	cmp	r7, #0
 800f70a:	d03a      	beq.n	800f782 <ucdr_deserialize_endian_uint16_t+0xce>
 800f70c:	f898 3000 	ldrb.w	r3, [r8]
 800f710:	706b      	strb	r3, [r5, #1]
 800f712:	6923      	ldr	r3, [r4, #16]
 800f714:	68a2      	ldr	r2, [r4, #8]
 800f716:	7da0      	ldrb	r0, [r4, #22]
 800f718:	2102      	movs	r1, #2
 800f71a:	3302      	adds	r3, #2
 800f71c:	4452      	add	r2, sl
 800f71e:	1bdb      	subs	r3, r3, r7
 800f720:	7561      	strb	r1, [r4, #21]
 800f722:	60a2      	str	r2, [r4, #8]
 800f724:	6123      	str	r3, [r4, #16]
 800f726:	f080 0001 	eor.w	r0, r0, #1
 800f72a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f72e:	2102      	movs	r1, #2
 800f730:	4620      	mov	r0, r4
 800f732:	f000 ff23 	bl	801057c <ucdr_check_final_buffer_behavior>
 800f736:	b178      	cbz	r0, 800f758 <ucdr_deserialize_endian_uint16_t+0xa4>
 800f738:	2e01      	cmp	r6, #1
 800f73a:	68a3      	ldr	r3, [r4, #8]
 800f73c:	d011      	beq.n	800f762 <ucdr_deserialize_endian_uint16_t+0xae>
 800f73e:	785b      	ldrb	r3, [r3, #1]
 800f740:	702b      	strb	r3, [r5, #0]
 800f742:	68a3      	ldr	r3, [r4, #8]
 800f744:	781b      	ldrb	r3, [r3, #0]
 800f746:	706b      	strb	r3, [r5, #1]
 800f748:	68a2      	ldr	r2, [r4, #8]
 800f74a:	6923      	ldr	r3, [r4, #16]
 800f74c:	3202      	adds	r2, #2
 800f74e:	3302      	adds	r3, #2
 800f750:	2102      	movs	r1, #2
 800f752:	60a2      	str	r2, [r4, #8]
 800f754:	6123      	str	r3, [r4, #16]
 800f756:	7561      	strb	r1, [r4, #21]
 800f758:	7da0      	ldrb	r0, [r4, #22]
 800f75a:	f080 0001 	eor.w	r0, r0, #1
 800f75e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f762:	881b      	ldrh	r3, [r3, #0]
 800f764:	802b      	strh	r3, [r5, #0]
 800f766:	e7ef      	b.n	800f748 <ucdr_deserialize_endian_uint16_t+0x94>
 800f768:	68a2      	ldr	r2, [r4, #8]
 800f76a:	6923      	ldr	r3, [r4, #16]
 800f76c:	7da0      	ldrb	r0, [r4, #22]
 800f76e:	f884 9015 	strb.w	r9, [r4, #21]
 800f772:	1bd2      	subs	r2, r2, r7
 800f774:	1bdb      	subs	r3, r3, r7
 800f776:	60a2      	str	r2, [r4, #8]
 800f778:	6123      	str	r3, [r4, #16]
 800f77a:	f080 0001 	eor.w	r0, r0, #1
 800f77e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f782:	68a3      	ldr	r3, [r4, #8]
 800f784:	781b      	ldrb	r3, [r3, #0]
 800f786:	706b      	strb	r3, [r5, #1]
 800f788:	e7c3      	b.n	800f712 <ucdr_deserialize_endian_uint16_t+0x5e>
 800f78a:	4641      	mov	r1, r8
 800f78c:	463a      	mov	r2, r7
 800f78e:	4628      	mov	r0, r5
 800f790:	f00b ffcb 	bl	801b72a <memcpy>
 800f794:	68a1      	ldr	r1, [r4, #8]
 800f796:	4652      	mov	r2, sl
 800f798:	19e8      	adds	r0, r5, r7
 800f79a:	f00b ffc6 	bl	801b72a <memcpy>
 800f79e:	e7b8      	b.n	800f712 <ucdr_deserialize_endian_uint16_t+0x5e>

0800f7a0 <ucdr_serialize_uint32_t>:
 800f7a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f7a4:	b082      	sub	sp, #8
 800f7a6:	4604      	mov	r4, r0
 800f7a8:	9101      	str	r1, [sp, #4]
 800f7aa:	2104      	movs	r1, #4
 800f7ac:	f000 ff3a 	bl	8010624 <ucdr_buffer_alignment>
 800f7b0:	4601      	mov	r1, r0
 800f7b2:	4620      	mov	r0, r4
 800f7b4:	7d67      	ldrb	r7, [r4, #21]
 800f7b6:	f000 ff79 	bl	80106ac <ucdr_advance_buffer>
 800f7ba:	2104      	movs	r1, #4
 800f7bc:	4620      	mov	r0, r4
 800f7be:	f000 fed1 	bl	8010564 <ucdr_check_buffer_available_for>
 800f7c2:	2800      	cmp	r0, #0
 800f7c4:	d139      	bne.n	800f83a <ucdr_serialize_uint32_t+0x9a>
 800f7c6:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 800f7ca:	42ab      	cmp	r3, r5
 800f7cc:	d930      	bls.n	800f830 <ucdr_serialize_uint32_t+0x90>
 800f7ce:	1b5e      	subs	r6, r3, r5
 800f7d0:	60a3      	str	r3, [r4, #8]
 800f7d2:	6923      	ldr	r3, [r4, #16]
 800f7d4:	f1c6 0804 	rsb	r8, r6, #4
 800f7d8:	4433      	add	r3, r6
 800f7da:	6123      	str	r3, [r4, #16]
 800f7dc:	4641      	mov	r1, r8
 800f7de:	4620      	mov	r0, r4
 800f7e0:	f000 fecc 	bl	801057c <ucdr_check_final_buffer_behavior>
 800f7e4:	2800      	cmp	r0, #0
 800f7e6:	d04c      	beq.n	800f882 <ucdr_serialize_uint32_t+0xe2>
 800f7e8:	7d23      	ldrb	r3, [r4, #20]
 800f7ea:	2b01      	cmp	r3, #1
 800f7ec:	d063      	beq.n	800f8b6 <ucdr_serialize_uint32_t+0x116>
 800f7ee:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800f7f2:	702b      	strb	r3, [r5, #0]
 800f7f4:	2e00      	cmp	r6, #0
 800f7f6:	d051      	beq.n	800f89c <ucdr_serialize_uint32_t+0xfc>
 800f7f8:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800f7fc:	706b      	strb	r3, [r5, #1]
 800f7fe:	2e01      	cmp	r6, #1
 800f800:	d050      	beq.n	800f8a4 <ucdr_serialize_uint32_t+0x104>
 800f802:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800f806:	70ab      	strb	r3, [r5, #2]
 800f808:	2e02      	cmp	r6, #2
 800f80a:	d04f      	beq.n	800f8ac <ucdr_serialize_uint32_t+0x10c>
 800f80c:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800f810:	70eb      	strb	r3, [r5, #3]
 800f812:	6923      	ldr	r3, [r4, #16]
 800f814:	68a2      	ldr	r2, [r4, #8]
 800f816:	7da0      	ldrb	r0, [r4, #22]
 800f818:	3304      	adds	r3, #4
 800f81a:	1b9e      	subs	r6, r3, r6
 800f81c:	4442      	add	r2, r8
 800f81e:	2304      	movs	r3, #4
 800f820:	f080 0001 	eor.w	r0, r0, #1
 800f824:	60a2      	str	r2, [r4, #8]
 800f826:	6126      	str	r6, [r4, #16]
 800f828:	7563      	strb	r3, [r4, #21]
 800f82a:	b002      	add	sp, #8
 800f82c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f830:	2104      	movs	r1, #4
 800f832:	4620      	mov	r0, r4
 800f834:	f000 fea2 	bl	801057c <ucdr_check_final_buffer_behavior>
 800f838:	b1d0      	cbz	r0, 800f870 <ucdr_serialize_uint32_t+0xd0>
 800f83a:	7d23      	ldrb	r3, [r4, #20]
 800f83c:	2b01      	cmp	r3, #1
 800f83e:	68a3      	ldr	r3, [r4, #8]
 800f840:	d01c      	beq.n	800f87c <ucdr_serialize_uint32_t+0xdc>
 800f842:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800f846:	701a      	strb	r2, [r3, #0]
 800f848:	68a3      	ldr	r3, [r4, #8]
 800f84a:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800f84e:	705a      	strb	r2, [r3, #1]
 800f850:	68a3      	ldr	r3, [r4, #8]
 800f852:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800f856:	709a      	strb	r2, [r3, #2]
 800f858:	68a3      	ldr	r3, [r4, #8]
 800f85a:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800f85e:	70da      	strb	r2, [r3, #3]
 800f860:	68a2      	ldr	r2, [r4, #8]
 800f862:	6923      	ldr	r3, [r4, #16]
 800f864:	3204      	adds	r2, #4
 800f866:	3304      	adds	r3, #4
 800f868:	2104      	movs	r1, #4
 800f86a:	60a2      	str	r2, [r4, #8]
 800f86c:	6123      	str	r3, [r4, #16]
 800f86e:	7561      	strb	r1, [r4, #21]
 800f870:	7da0      	ldrb	r0, [r4, #22]
 800f872:	f080 0001 	eor.w	r0, r0, #1
 800f876:	b002      	add	sp, #8
 800f878:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f87c:	9a01      	ldr	r2, [sp, #4]
 800f87e:	601a      	str	r2, [r3, #0]
 800f880:	e7ee      	b.n	800f860 <ucdr_serialize_uint32_t+0xc0>
 800f882:	68a2      	ldr	r2, [r4, #8]
 800f884:	6923      	ldr	r3, [r4, #16]
 800f886:	7da0      	ldrb	r0, [r4, #22]
 800f888:	7567      	strb	r7, [r4, #21]
 800f88a:	1b92      	subs	r2, r2, r6
 800f88c:	1b9b      	subs	r3, r3, r6
 800f88e:	f080 0001 	eor.w	r0, r0, #1
 800f892:	60a2      	str	r2, [r4, #8]
 800f894:	6123      	str	r3, [r4, #16]
 800f896:	b002      	add	sp, #8
 800f898:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f89c:	68a3      	ldr	r3, [r4, #8]
 800f89e:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800f8a2:	701a      	strb	r2, [r3, #0]
 800f8a4:	68a3      	ldr	r3, [r4, #8]
 800f8a6:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800f8aa:	701a      	strb	r2, [r3, #0]
 800f8ac:	68a3      	ldr	r3, [r4, #8]
 800f8ae:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800f8b2:	701a      	strb	r2, [r3, #0]
 800f8b4:	e7ad      	b.n	800f812 <ucdr_serialize_uint32_t+0x72>
 800f8b6:	4628      	mov	r0, r5
 800f8b8:	ad01      	add	r5, sp, #4
 800f8ba:	4629      	mov	r1, r5
 800f8bc:	4632      	mov	r2, r6
 800f8be:	f00b ff34 	bl	801b72a <memcpy>
 800f8c2:	68a0      	ldr	r0, [r4, #8]
 800f8c4:	4642      	mov	r2, r8
 800f8c6:	19a9      	adds	r1, r5, r6
 800f8c8:	f00b ff2f 	bl	801b72a <memcpy>
 800f8cc:	e7a1      	b.n	800f812 <ucdr_serialize_uint32_t+0x72>
 800f8ce:	bf00      	nop

0800f8d0 <ucdr_serialize_endian_uint32_t>:
 800f8d0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800f8d4:	b083      	sub	sp, #12
 800f8d6:	460d      	mov	r5, r1
 800f8d8:	2104      	movs	r1, #4
 800f8da:	4604      	mov	r4, r0
 800f8dc:	9201      	str	r2, [sp, #4]
 800f8de:	f000 fea1 	bl	8010624 <ucdr_buffer_alignment>
 800f8e2:	4601      	mov	r1, r0
 800f8e4:	4620      	mov	r0, r4
 800f8e6:	f894 8015 	ldrb.w	r8, [r4, #21]
 800f8ea:	f000 fedf 	bl	80106ac <ucdr_advance_buffer>
 800f8ee:	2104      	movs	r1, #4
 800f8f0:	4620      	mov	r0, r4
 800f8f2:	f000 fe37 	bl	8010564 <ucdr_check_buffer_available_for>
 800f8f6:	2800      	cmp	r0, #0
 800f8f8:	d138      	bne.n	800f96c <ucdr_serialize_endian_uint32_t+0x9c>
 800f8fa:	e9d4 7601 	ldrd	r7, r6, [r4, #4]
 800f8fe:	42b7      	cmp	r7, r6
 800f900:	d92f      	bls.n	800f962 <ucdr_serialize_endian_uint32_t+0x92>
 800f902:	6923      	ldr	r3, [r4, #16]
 800f904:	60a7      	str	r7, [r4, #8]
 800f906:	1bbf      	subs	r7, r7, r6
 800f908:	443b      	add	r3, r7
 800f90a:	f1c7 0904 	rsb	r9, r7, #4
 800f90e:	6123      	str	r3, [r4, #16]
 800f910:	4649      	mov	r1, r9
 800f912:	4620      	mov	r0, r4
 800f914:	f000 fe32 	bl	801057c <ucdr_check_final_buffer_behavior>
 800f918:	2800      	cmp	r0, #0
 800f91a:	d04a      	beq.n	800f9b2 <ucdr_serialize_endian_uint32_t+0xe2>
 800f91c:	2d01      	cmp	r5, #1
 800f91e:	d063      	beq.n	800f9e8 <ucdr_serialize_endian_uint32_t+0x118>
 800f920:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800f924:	7033      	strb	r3, [r6, #0]
 800f926:	2f00      	cmp	r7, #0
 800f928:	d051      	beq.n	800f9ce <ucdr_serialize_endian_uint32_t+0xfe>
 800f92a:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800f92e:	7073      	strb	r3, [r6, #1]
 800f930:	2f01      	cmp	r7, #1
 800f932:	d050      	beq.n	800f9d6 <ucdr_serialize_endian_uint32_t+0x106>
 800f934:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800f938:	70b3      	strb	r3, [r6, #2]
 800f93a:	2f02      	cmp	r7, #2
 800f93c:	d04f      	beq.n	800f9de <ucdr_serialize_endian_uint32_t+0x10e>
 800f93e:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800f942:	70f3      	strb	r3, [r6, #3]
 800f944:	6923      	ldr	r3, [r4, #16]
 800f946:	68a2      	ldr	r2, [r4, #8]
 800f948:	7da0      	ldrb	r0, [r4, #22]
 800f94a:	3304      	adds	r3, #4
 800f94c:	444a      	add	r2, r9
 800f94e:	1bdb      	subs	r3, r3, r7
 800f950:	2104      	movs	r1, #4
 800f952:	f080 0001 	eor.w	r0, r0, #1
 800f956:	60a2      	str	r2, [r4, #8]
 800f958:	6123      	str	r3, [r4, #16]
 800f95a:	7561      	strb	r1, [r4, #21]
 800f95c:	b003      	add	sp, #12
 800f95e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800f962:	2104      	movs	r1, #4
 800f964:	4620      	mov	r0, r4
 800f966:	f000 fe09 	bl	801057c <ucdr_check_final_buffer_behavior>
 800f96a:	b1c8      	cbz	r0, 800f9a0 <ucdr_serialize_endian_uint32_t+0xd0>
 800f96c:	2d01      	cmp	r5, #1
 800f96e:	68a3      	ldr	r3, [r4, #8]
 800f970:	d01c      	beq.n	800f9ac <ucdr_serialize_endian_uint32_t+0xdc>
 800f972:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800f976:	701a      	strb	r2, [r3, #0]
 800f978:	68a3      	ldr	r3, [r4, #8]
 800f97a:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800f97e:	705a      	strb	r2, [r3, #1]
 800f980:	68a3      	ldr	r3, [r4, #8]
 800f982:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800f986:	709a      	strb	r2, [r3, #2]
 800f988:	68a3      	ldr	r3, [r4, #8]
 800f98a:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800f98e:	70da      	strb	r2, [r3, #3]
 800f990:	68a2      	ldr	r2, [r4, #8]
 800f992:	6923      	ldr	r3, [r4, #16]
 800f994:	3204      	adds	r2, #4
 800f996:	3304      	adds	r3, #4
 800f998:	2104      	movs	r1, #4
 800f99a:	60a2      	str	r2, [r4, #8]
 800f99c:	6123      	str	r3, [r4, #16]
 800f99e:	7561      	strb	r1, [r4, #21]
 800f9a0:	7da0      	ldrb	r0, [r4, #22]
 800f9a2:	f080 0001 	eor.w	r0, r0, #1
 800f9a6:	b003      	add	sp, #12
 800f9a8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800f9ac:	9a01      	ldr	r2, [sp, #4]
 800f9ae:	601a      	str	r2, [r3, #0]
 800f9b0:	e7ee      	b.n	800f990 <ucdr_serialize_endian_uint32_t+0xc0>
 800f9b2:	68a2      	ldr	r2, [r4, #8]
 800f9b4:	6923      	ldr	r3, [r4, #16]
 800f9b6:	7da0      	ldrb	r0, [r4, #22]
 800f9b8:	f884 8015 	strb.w	r8, [r4, #21]
 800f9bc:	1bd2      	subs	r2, r2, r7
 800f9be:	1bdb      	subs	r3, r3, r7
 800f9c0:	f080 0001 	eor.w	r0, r0, #1
 800f9c4:	60a2      	str	r2, [r4, #8]
 800f9c6:	6123      	str	r3, [r4, #16]
 800f9c8:	b003      	add	sp, #12
 800f9ca:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800f9ce:	68a3      	ldr	r3, [r4, #8]
 800f9d0:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800f9d4:	701a      	strb	r2, [r3, #0]
 800f9d6:	68a3      	ldr	r3, [r4, #8]
 800f9d8:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800f9dc:	701a      	strb	r2, [r3, #0]
 800f9de:	68a3      	ldr	r3, [r4, #8]
 800f9e0:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800f9e4:	701a      	strb	r2, [r3, #0]
 800f9e6:	e7ad      	b.n	800f944 <ucdr_serialize_endian_uint32_t+0x74>
 800f9e8:	ad01      	add	r5, sp, #4
 800f9ea:	4629      	mov	r1, r5
 800f9ec:	463a      	mov	r2, r7
 800f9ee:	4630      	mov	r0, r6
 800f9f0:	f00b fe9b 	bl	801b72a <memcpy>
 800f9f4:	68a0      	ldr	r0, [r4, #8]
 800f9f6:	464a      	mov	r2, r9
 800f9f8:	19e9      	adds	r1, r5, r7
 800f9fa:	f00b fe96 	bl	801b72a <memcpy>
 800f9fe:	e7a1      	b.n	800f944 <ucdr_serialize_endian_uint32_t+0x74>

0800fa00 <ucdr_deserialize_uint32_t>:
 800fa00:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800fa04:	460d      	mov	r5, r1
 800fa06:	2104      	movs	r1, #4
 800fa08:	4604      	mov	r4, r0
 800fa0a:	f000 fe0b 	bl	8010624 <ucdr_buffer_alignment>
 800fa0e:	4601      	mov	r1, r0
 800fa10:	4620      	mov	r0, r4
 800fa12:	f894 8015 	ldrb.w	r8, [r4, #21]
 800fa16:	f000 fe49 	bl	80106ac <ucdr_advance_buffer>
 800fa1a:	2104      	movs	r1, #4
 800fa1c:	4620      	mov	r0, r4
 800fa1e:	f000 fda1 	bl	8010564 <ucdr_check_buffer_available_for>
 800fa22:	2800      	cmp	r0, #0
 800fa24:	d138      	bne.n	800fa98 <ucdr_deserialize_uint32_t+0x98>
 800fa26:	e9d4 7601 	ldrd	r7, r6, [r4, #4]
 800fa2a:	42b7      	cmp	r7, r6
 800fa2c:	d92f      	bls.n	800fa8e <ucdr_deserialize_uint32_t+0x8e>
 800fa2e:	6923      	ldr	r3, [r4, #16]
 800fa30:	60a7      	str	r7, [r4, #8]
 800fa32:	1bbf      	subs	r7, r7, r6
 800fa34:	443b      	add	r3, r7
 800fa36:	f1c7 0904 	rsb	r9, r7, #4
 800fa3a:	6123      	str	r3, [r4, #16]
 800fa3c:	4649      	mov	r1, r9
 800fa3e:	4620      	mov	r0, r4
 800fa40:	f000 fd9c 	bl	801057c <ucdr_check_final_buffer_behavior>
 800fa44:	2800      	cmp	r0, #0
 800fa46:	d046      	beq.n	800fad6 <ucdr_deserialize_uint32_t+0xd6>
 800fa48:	7d23      	ldrb	r3, [r4, #20]
 800fa4a:	2b01      	cmp	r3, #1
 800fa4c:	d05c      	beq.n	800fb08 <ucdr_deserialize_uint32_t+0x108>
 800fa4e:	78f3      	ldrb	r3, [r6, #3]
 800fa50:	702b      	strb	r3, [r5, #0]
 800fa52:	2f00      	cmp	r7, #0
 800fa54:	d04c      	beq.n	800faf0 <ucdr_deserialize_uint32_t+0xf0>
 800fa56:	78b3      	ldrb	r3, [r6, #2]
 800fa58:	706b      	strb	r3, [r5, #1]
 800fa5a:	2f01      	cmp	r7, #1
 800fa5c:	f105 0302 	add.w	r3, r5, #2
 800fa60:	d04a      	beq.n	800faf8 <ucdr_deserialize_uint32_t+0xf8>
 800fa62:	7873      	ldrb	r3, [r6, #1]
 800fa64:	70ab      	strb	r3, [r5, #2]
 800fa66:	2f02      	cmp	r7, #2
 800fa68:	f105 0303 	add.w	r3, r5, #3
 800fa6c:	d048      	beq.n	800fb00 <ucdr_deserialize_uint32_t+0x100>
 800fa6e:	7833      	ldrb	r3, [r6, #0]
 800fa70:	70eb      	strb	r3, [r5, #3]
 800fa72:	6923      	ldr	r3, [r4, #16]
 800fa74:	68a2      	ldr	r2, [r4, #8]
 800fa76:	7da0      	ldrb	r0, [r4, #22]
 800fa78:	2104      	movs	r1, #4
 800fa7a:	3304      	adds	r3, #4
 800fa7c:	444a      	add	r2, r9
 800fa7e:	1bdb      	subs	r3, r3, r7
 800fa80:	7561      	strb	r1, [r4, #21]
 800fa82:	60a2      	str	r2, [r4, #8]
 800fa84:	6123      	str	r3, [r4, #16]
 800fa86:	f080 0001 	eor.w	r0, r0, #1
 800fa8a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800fa8e:	2104      	movs	r1, #4
 800fa90:	4620      	mov	r0, r4
 800fa92:	f000 fd73 	bl	801057c <ucdr_check_final_buffer_behavior>
 800fa96:	b1b0      	cbz	r0, 800fac6 <ucdr_deserialize_uint32_t+0xc6>
 800fa98:	7d23      	ldrb	r3, [r4, #20]
 800fa9a:	2b01      	cmp	r3, #1
 800fa9c:	68a3      	ldr	r3, [r4, #8]
 800fa9e:	d017      	beq.n	800fad0 <ucdr_deserialize_uint32_t+0xd0>
 800faa0:	78db      	ldrb	r3, [r3, #3]
 800faa2:	702b      	strb	r3, [r5, #0]
 800faa4:	68a3      	ldr	r3, [r4, #8]
 800faa6:	789b      	ldrb	r3, [r3, #2]
 800faa8:	706b      	strb	r3, [r5, #1]
 800faaa:	68a3      	ldr	r3, [r4, #8]
 800faac:	785b      	ldrb	r3, [r3, #1]
 800faae:	70ab      	strb	r3, [r5, #2]
 800fab0:	68a3      	ldr	r3, [r4, #8]
 800fab2:	781b      	ldrb	r3, [r3, #0]
 800fab4:	70eb      	strb	r3, [r5, #3]
 800fab6:	68a2      	ldr	r2, [r4, #8]
 800fab8:	6923      	ldr	r3, [r4, #16]
 800faba:	3204      	adds	r2, #4
 800fabc:	3304      	adds	r3, #4
 800fabe:	2104      	movs	r1, #4
 800fac0:	60a2      	str	r2, [r4, #8]
 800fac2:	6123      	str	r3, [r4, #16]
 800fac4:	7561      	strb	r1, [r4, #21]
 800fac6:	7da0      	ldrb	r0, [r4, #22]
 800fac8:	f080 0001 	eor.w	r0, r0, #1
 800facc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800fad0:	681b      	ldr	r3, [r3, #0]
 800fad2:	602b      	str	r3, [r5, #0]
 800fad4:	e7ef      	b.n	800fab6 <ucdr_deserialize_uint32_t+0xb6>
 800fad6:	68a2      	ldr	r2, [r4, #8]
 800fad8:	6923      	ldr	r3, [r4, #16]
 800fada:	7da0      	ldrb	r0, [r4, #22]
 800fadc:	f884 8015 	strb.w	r8, [r4, #21]
 800fae0:	1bd2      	subs	r2, r2, r7
 800fae2:	1bdb      	subs	r3, r3, r7
 800fae4:	60a2      	str	r2, [r4, #8]
 800fae6:	6123      	str	r3, [r4, #16]
 800fae8:	f080 0001 	eor.w	r0, r0, #1
 800faec:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800faf0:	68a3      	ldr	r3, [r4, #8]
 800faf2:	789b      	ldrb	r3, [r3, #2]
 800faf4:	706b      	strb	r3, [r5, #1]
 800faf6:	1cab      	adds	r3, r5, #2
 800faf8:	68a2      	ldr	r2, [r4, #8]
 800fafa:	7852      	ldrb	r2, [r2, #1]
 800fafc:	f803 2b01 	strb.w	r2, [r3], #1
 800fb00:	68a2      	ldr	r2, [r4, #8]
 800fb02:	7812      	ldrb	r2, [r2, #0]
 800fb04:	701a      	strb	r2, [r3, #0]
 800fb06:	e7b4      	b.n	800fa72 <ucdr_deserialize_uint32_t+0x72>
 800fb08:	4631      	mov	r1, r6
 800fb0a:	463a      	mov	r2, r7
 800fb0c:	4628      	mov	r0, r5
 800fb0e:	f00b fe0c 	bl	801b72a <memcpy>
 800fb12:	68a1      	ldr	r1, [r4, #8]
 800fb14:	464a      	mov	r2, r9
 800fb16:	19e8      	adds	r0, r5, r7
 800fb18:	f00b fe07 	bl	801b72a <memcpy>
 800fb1c:	e7a9      	b.n	800fa72 <ucdr_deserialize_uint32_t+0x72>
 800fb1e:	bf00      	nop

0800fb20 <ucdr_deserialize_endian_uint32_t>:
 800fb20:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800fb24:	460e      	mov	r6, r1
 800fb26:	2104      	movs	r1, #4
 800fb28:	4604      	mov	r4, r0
 800fb2a:	4615      	mov	r5, r2
 800fb2c:	f000 fd7a 	bl	8010624 <ucdr_buffer_alignment>
 800fb30:	4601      	mov	r1, r0
 800fb32:	4620      	mov	r0, r4
 800fb34:	f894 9015 	ldrb.w	r9, [r4, #21]
 800fb38:	f000 fdb8 	bl	80106ac <ucdr_advance_buffer>
 800fb3c:	2104      	movs	r1, #4
 800fb3e:	4620      	mov	r0, r4
 800fb40:	f000 fd10 	bl	8010564 <ucdr_check_buffer_available_for>
 800fb44:	2800      	cmp	r0, #0
 800fb46:	d13c      	bne.n	800fbc2 <ucdr_deserialize_endian_uint32_t+0xa2>
 800fb48:	e9d4 3701 	ldrd	r3, r7, [r4, #4]
 800fb4c:	42bb      	cmp	r3, r7
 800fb4e:	d933      	bls.n	800fbb8 <ucdr_deserialize_endian_uint32_t+0x98>
 800fb50:	eba3 0807 	sub.w	r8, r3, r7
 800fb54:	60a3      	str	r3, [r4, #8]
 800fb56:	6923      	ldr	r3, [r4, #16]
 800fb58:	f1c8 0a04 	rsb	sl, r8, #4
 800fb5c:	4443      	add	r3, r8
 800fb5e:	6123      	str	r3, [r4, #16]
 800fb60:	4651      	mov	r1, sl
 800fb62:	4620      	mov	r0, r4
 800fb64:	f000 fd0a 	bl	801057c <ucdr_check_final_buffer_behavior>
 800fb68:	2800      	cmp	r0, #0
 800fb6a:	d048      	beq.n	800fbfe <ucdr_deserialize_endian_uint32_t+0xde>
 800fb6c:	2e01      	cmp	r6, #1
 800fb6e:	d061      	beq.n	800fc34 <ucdr_deserialize_endian_uint32_t+0x114>
 800fb70:	78fb      	ldrb	r3, [r7, #3]
 800fb72:	702b      	strb	r3, [r5, #0]
 800fb74:	f1b8 0f00 	cmp.w	r8, #0
 800fb78:	d050      	beq.n	800fc1c <ucdr_deserialize_endian_uint32_t+0xfc>
 800fb7a:	78bb      	ldrb	r3, [r7, #2]
 800fb7c:	706b      	strb	r3, [r5, #1]
 800fb7e:	f1b8 0f01 	cmp.w	r8, #1
 800fb82:	f105 0302 	add.w	r3, r5, #2
 800fb86:	d04d      	beq.n	800fc24 <ucdr_deserialize_endian_uint32_t+0x104>
 800fb88:	787b      	ldrb	r3, [r7, #1]
 800fb8a:	70ab      	strb	r3, [r5, #2]
 800fb8c:	f1b8 0f02 	cmp.w	r8, #2
 800fb90:	f105 0303 	add.w	r3, r5, #3
 800fb94:	d04a      	beq.n	800fc2c <ucdr_deserialize_endian_uint32_t+0x10c>
 800fb96:	783b      	ldrb	r3, [r7, #0]
 800fb98:	70eb      	strb	r3, [r5, #3]
 800fb9a:	6923      	ldr	r3, [r4, #16]
 800fb9c:	68a2      	ldr	r2, [r4, #8]
 800fb9e:	7da0      	ldrb	r0, [r4, #22]
 800fba0:	2104      	movs	r1, #4
 800fba2:	3304      	adds	r3, #4
 800fba4:	4452      	add	r2, sl
 800fba6:	eba3 0308 	sub.w	r3, r3, r8
 800fbaa:	7561      	strb	r1, [r4, #21]
 800fbac:	60a2      	str	r2, [r4, #8]
 800fbae:	6123      	str	r3, [r4, #16]
 800fbb0:	f080 0001 	eor.w	r0, r0, #1
 800fbb4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fbb8:	2104      	movs	r1, #4
 800fbba:	4620      	mov	r0, r4
 800fbbc:	f000 fcde 	bl	801057c <ucdr_check_final_buffer_behavior>
 800fbc0:	b1a8      	cbz	r0, 800fbee <ucdr_deserialize_endian_uint32_t+0xce>
 800fbc2:	2e01      	cmp	r6, #1
 800fbc4:	68a3      	ldr	r3, [r4, #8]
 800fbc6:	d017      	beq.n	800fbf8 <ucdr_deserialize_endian_uint32_t+0xd8>
 800fbc8:	78db      	ldrb	r3, [r3, #3]
 800fbca:	702b      	strb	r3, [r5, #0]
 800fbcc:	68a3      	ldr	r3, [r4, #8]
 800fbce:	789b      	ldrb	r3, [r3, #2]
 800fbd0:	706b      	strb	r3, [r5, #1]
 800fbd2:	68a3      	ldr	r3, [r4, #8]
 800fbd4:	785b      	ldrb	r3, [r3, #1]
 800fbd6:	70ab      	strb	r3, [r5, #2]
 800fbd8:	68a3      	ldr	r3, [r4, #8]
 800fbda:	781b      	ldrb	r3, [r3, #0]
 800fbdc:	70eb      	strb	r3, [r5, #3]
 800fbde:	68a2      	ldr	r2, [r4, #8]
 800fbe0:	6923      	ldr	r3, [r4, #16]
 800fbe2:	3204      	adds	r2, #4
 800fbe4:	3304      	adds	r3, #4
 800fbe6:	2104      	movs	r1, #4
 800fbe8:	60a2      	str	r2, [r4, #8]
 800fbea:	6123      	str	r3, [r4, #16]
 800fbec:	7561      	strb	r1, [r4, #21]
 800fbee:	7da0      	ldrb	r0, [r4, #22]
 800fbf0:	f080 0001 	eor.w	r0, r0, #1
 800fbf4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fbf8:	681b      	ldr	r3, [r3, #0]
 800fbfa:	602b      	str	r3, [r5, #0]
 800fbfc:	e7ef      	b.n	800fbde <ucdr_deserialize_endian_uint32_t+0xbe>
 800fbfe:	68a2      	ldr	r2, [r4, #8]
 800fc00:	6923      	ldr	r3, [r4, #16]
 800fc02:	7da0      	ldrb	r0, [r4, #22]
 800fc04:	f884 9015 	strb.w	r9, [r4, #21]
 800fc08:	eba2 0208 	sub.w	r2, r2, r8
 800fc0c:	eba3 0308 	sub.w	r3, r3, r8
 800fc10:	60a2      	str	r2, [r4, #8]
 800fc12:	6123      	str	r3, [r4, #16]
 800fc14:	f080 0001 	eor.w	r0, r0, #1
 800fc18:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fc1c:	68a3      	ldr	r3, [r4, #8]
 800fc1e:	789b      	ldrb	r3, [r3, #2]
 800fc20:	706b      	strb	r3, [r5, #1]
 800fc22:	1cab      	adds	r3, r5, #2
 800fc24:	68a2      	ldr	r2, [r4, #8]
 800fc26:	7852      	ldrb	r2, [r2, #1]
 800fc28:	f803 2b01 	strb.w	r2, [r3], #1
 800fc2c:	68a2      	ldr	r2, [r4, #8]
 800fc2e:	7812      	ldrb	r2, [r2, #0]
 800fc30:	701a      	strb	r2, [r3, #0]
 800fc32:	e7b2      	b.n	800fb9a <ucdr_deserialize_endian_uint32_t+0x7a>
 800fc34:	4639      	mov	r1, r7
 800fc36:	4642      	mov	r2, r8
 800fc38:	4628      	mov	r0, r5
 800fc3a:	f00b fd76 	bl	801b72a <memcpy>
 800fc3e:	68a1      	ldr	r1, [r4, #8]
 800fc40:	4652      	mov	r2, sl
 800fc42:	eb05 0008 	add.w	r0, r5, r8
 800fc46:	f00b fd70 	bl	801b72a <memcpy>
 800fc4a:	e7a6      	b.n	800fb9a <ucdr_deserialize_endian_uint32_t+0x7a>

0800fc4c <ucdr_serialize_uint64_t>:
 800fc4c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fc50:	2108      	movs	r1, #8
 800fc52:	b082      	sub	sp, #8
 800fc54:	4604      	mov	r4, r0
 800fc56:	e9cd 2300 	strd	r2, r3, [sp]
 800fc5a:	f000 fce3 	bl	8010624 <ucdr_buffer_alignment>
 800fc5e:	4601      	mov	r1, r0
 800fc60:	4620      	mov	r0, r4
 800fc62:	7d67      	ldrb	r7, [r4, #21]
 800fc64:	f000 fd22 	bl	80106ac <ucdr_advance_buffer>
 800fc68:	2108      	movs	r1, #8
 800fc6a:	4620      	mov	r0, r4
 800fc6c:	f000 fc7a 	bl	8010564 <ucdr_check_buffer_available_for>
 800fc70:	2800      	cmp	r0, #0
 800fc72:	d14e      	bne.n	800fd12 <ucdr_serialize_uint64_t+0xc6>
 800fc74:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 800fc78:	42ab      	cmp	r3, r5
 800fc7a:	d945      	bls.n	800fd08 <ucdr_serialize_uint64_t+0xbc>
 800fc7c:	1b5e      	subs	r6, r3, r5
 800fc7e:	60a3      	str	r3, [r4, #8]
 800fc80:	6923      	ldr	r3, [r4, #16]
 800fc82:	f1c6 0808 	rsb	r8, r6, #8
 800fc86:	4433      	add	r3, r6
 800fc88:	6123      	str	r3, [r4, #16]
 800fc8a:	4641      	mov	r1, r8
 800fc8c:	4620      	mov	r0, r4
 800fc8e:	f000 fc75 	bl	801057c <ucdr_check_final_buffer_behavior>
 800fc92:	2800      	cmp	r0, #0
 800fc94:	d074      	beq.n	800fd80 <ucdr_serialize_uint64_t+0x134>
 800fc96:	7d23      	ldrb	r3, [r4, #20]
 800fc98:	2b01      	cmp	r3, #1
 800fc9a:	f000 809b 	beq.w	800fdd4 <ucdr_serialize_uint64_t+0x188>
 800fc9e:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800fca2:	702b      	strb	r3, [r5, #0]
 800fca4:	2e00      	cmp	r6, #0
 800fca6:	d078      	beq.n	800fd9a <ucdr_serialize_uint64_t+0x14e>
 800fca8:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800fcac:	706b      	strb	r3, [r5, #1]
 800fcae:	2e01      	cmp	r6, #1
 800fcb0:	d077      	beq.n	800fda2 <ucdr_serialize_uint64_t+0x156>
 800fcb2:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800fcb6:	70ab      	strb	r3, [r5, #2]
 800fcb8:	2e02      	cmp	r6, #2
 800fcba:	d076      	beq.n	800fdaa <ucdr_serialize_uint64_t+0x15e>
 800fcbc:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800fcc0:	70eb      	strb	r3, [r5, #3]
 800fcc2:	2e03      	cmp	r6, #3
 800fcc4:	d075      	beq.n	800fdb2 <ucdr_serialize_uint64_t+0x166>
 800fcc6:	f89d 3003 	ldrb.w	r3, [sp, #3]
 800fcca:	712b      	strb	r3, [r5, #4]
 800fccc:	2e04      	cmp	r6, #4
 800fcce:	d074      	beq.n	800fdba <ucdr_serialize_uint64_t+0x16e>
 800fcd0:	f89d 3002 	ldrb.w	r3, [sp, #2]
 800fcd4:	716b      	strb	r3, [r5, #5]
 800fcd6:	2e05      	cmp	r6, #5
 800fcd8:	d073      	beq.n	800fdc2 <ucdr_serialize_uint64_t+0x176>
 800fcda:	f89d 3001 	ldrb.w	r3, [sp, #1]
 800fcde:	71ab      	strb	r3, [r5, #6]
 800fce0:	2e06      	cmp	r6, #6
 800fce2:	d072      	beq.n	800fdca <ucdr_serialize_uint64_t+0x17e>
 800fce4:	f89d 3000 	ldrb.w	r3, [sp]
 800fce8:	71eb      	strb	r3, [r5, #7]
 800fcea:	6923      	ldr	r3, [r4, #16]
 800fcec:	68a2      	ldr	r2, [r4, #8]
 800fcee:	7da0      	ldrb	r0, [r4, #22]
 800fcf0:	3308      	adds	r3, #8
 800fcf2:	1b9e      	subs	r6, r3, r6
 800fcf4:	4442      	add	r2, r8
 800fcf6:	2308      	movs	r3, #8
 800fcf8:	f080 0001 	eor.w	r0, r0, #1
 800fcfc:	60a2      	str	r2, [r4, #8]
 800fcfe:	6126      	str	r6, [r4, #16]
 800fd00:	7563      	strb	r3, [r4, #21]
 800fd02:	b002      	add	sp, #8
 800fd04:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fd08:	2108      	movs	r1, #8
 800fd0a:	4620      	mov	r0, r4
 800fd0c:	f000 fc36 	bl	801057c <ucdr_check_final_buffer_behavior>
 800fd10:	b350      	cbz	r0, 800fd68 <ucdr_serialize_uint64_t+0x11c>
 800fd12:	7d23      	ldrb	r3, [r4, #20]
 800fd14:	2b01      	cmp	r3, #1
 800fd16:	d02d      	beq.n	800fd74 <ucdr_serialize_uint64_t+0x128>
 800fd18:	68a3      	ldr	r3, [r4, #8]
 800fd1a:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800fd1e:	701a      	strb	r2, [r3, #0]
 800fd20:	68a3      	ldr	r3, [r4, #8]
 800fd22:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800fd26:	705a      	strb	r2, [r3, #1]
 800fd28:	68a3      	ldr	r3, [r4, #8]
 800fd2a:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800fd2e:	709a      	strb	r2, [r3, #2]
 800fd30:	68a3      	ldr	r3, [r4, #8]
 800fd32:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800fd36:	70da      	strb	r2, [r3, #3]
 800fd38:	68a3      	ldr	r3, [r4, #8]
 800fd3a:	f89d 2003 	ldrb.w	r2, [sp, #3]
 800fd3e:	711a      	strb	r2, [r3, #4]
 800fd40:	68a3      	ldr	r3, [r4, #8]
 800fd42:	f89d 2002 	ldrb.w	r2, [sp, #2]
 800fd46:	715a      	strb	r2, [r3, #5]
 800fd48:	68a3      	ldr	r3, [r4, #8]
 800fd4a:	f89d 2001 	ldrb.w	r2, [sp, #1]
 800fd4e:	719a      	strb	r2, [r3, #6]
 800fd50:	68a3      	ldr	r3, [r4, #8]
 800fd52:	f89d 2000 	ldrb.w	r2, [sp]
 800fd56:	71da      	strb	r2, [r3, #7]
 800fd58:	68a2      	ldr	r2, [r4, #8]
 800fd5a:	6923      	ldr	r3, [r4, #16]
 800fd5c:	3208      	adds	r2, #8
 800fd5e:	3308      	adds	r3, #8
 800fd60:	2108      	movs	r1, #8
 800fd62:	60a2      	str	r2, [r4, #8]
 800fd64:	6123      	str	r3, [r4, #16]
 800fd66:	7561      	strb	r1, [r4, #21]
 800fd68:	7da0      	ldrb	r0, [r4, #22]
 800fd6a:	f080 0001 	eor.w	r0, r0, #1
 800fd6e:	b002      	add	sp, #8
 800fd70:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fd74:	466b      	mov	r3, sp
 800fd76:	cb03      	ldmia	r3!, {r0, r1}
 800fd78:	68a3      	ldr	r3, [r4, #8]
 800fd7a:	6018      	str	r0, [r3, #0]
 800fd7c:	6059      	str	r1, [r3, #4]
 800fd7e:	e7eb      	b.n	800fd58 <ucdr_serialize_uint64_t+0x10c>
 800fd80:	68a2      	ldr	r2, [r4, #8]
 800fd82:	6923      	ldr	r3, [r4, #16]
 800fd84:	7da0      	ldrb	r0, [r4, #22]
 800fd86:	7567      	strb	r7, [r4, #21]
 800fd88:	1b92      	subs	r2, r2, r6
 800fd8a:	1b9b      	subs	r3, r3, r6
 800fd8c:	f080 0001 	eor.w	r0, r0, #1
 800fd90:	60a2      	str	r2, [r4, #8]
 800fd92:	6123      	str	r3, [r4, #16]
 800fd94:	b002      	add	sp, #8
 800fd96:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fd9a:	68a3      	ldr	r3, [r4, #8]
 800fd9c:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800fda0:	701a      	strb	r2, [r3, #0]
 800fda2:	68a3      	ldr	r3, [r4, #8]
 800fda4:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800fda8:	701a      	strb	r2, [r3, #0]
 800fdaa:	68a3      	ldr	r3, [r4, #8]
 800fdac:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800fdb0:	701a      	strb	r2, [r3, #0]
 800fdb2:	68a3      	ldr	r3, [r4, #8]
 800fdb4:	f89d 2003 	ldrb.w	r2, [sp, #3]
 800fdb8:	701a      	strb	r2, [r3, #0]
 800fdba:	68a3      	ldr	r3, [r4, #8]
 800fdbc:	f89d 2002 	ldrb.w	r2, [sp, #2]
 800fdc0:	701a      	strb	r2, [r3, #0]
 800fdc2:	68a3      	ldr	r3, [r4, #8]
 800fdc4:	f89d 2001 	ldrb.w	r2, [sp, #1]
 800fdc8:	701a      	strb	r2, [r3, #0]
 800fdca:	68a3      	ldr	r3, [r4, #8]
 800fdcc:	f89d 2000 	ldrb.w	r2, [sp]
 800fdd0:	701a      	strb	r2, [r3, #0]
 800fdd2:	e78a      	b.n	800fcea <ucdr_serialize_uint64_t+0x9e>
 800fdd4:	4628      	mov	r0, r5
 800fdd6:	466d      	mov	r5, sp
 800fdd8:	4629      	mov	r1, r5
 800fdda:	4632      	mov	r2, r6
 800fddc:	f00b fca5 	bl	801b72a <memcpy>
 800fde0:	68a0      	ldr	r0, [r4, #8]
 800fde2:	4642      	mov	r2, r8
 800fde4:	19a9      	adds	r1, r5, r6
 800fde6:	f00b fca0 	bl	801b72a <memcpy>
 800fdea:	e77e      	b.n	800fcea <ucdr_serialize_uint64_t+0x9e>

0800fdec <ucdr_serialize_int16_t>:
 800fdec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fdf0:	b082      	sub	sp, #8
 800fdf2:	460b      	mov	r3, r1
 800fdf4:	2102      	movs	r1, #2
 800fdf6:	4604      	mov	r4, r0
 800fdf8:	f8ad 3006 	strh.w	r3, [sp, #6]
 800fdfc:	f000 fc12 	bl	8010624 <ucdr_buffer_alignment>
 800fe00:	4601      	mov	r1, r0
 800fe02:	4620      	mov	r0, r4
 800fe04:	7d67      	ldrb	r7, [r4, #21]
 800fe06:	f000 fc51 	bl	80106ac <ucdr_advance_buffer>
 800fe0a:	2102      	movs	r1, #2
 800fe0c:	4620      	mov	r0, r4
 800fe0e:	f000 fba9 	bl	8010564 <ucdr_check_buffer_available_for>
 800fe12:	bb78      	cbnz	r0, 800fe74 <ucdr_serialize_int16_t+0x88>
 800fe14:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 800fe18:	42ab      	cmp	r3, r5
 800fe1a:	d926      	bls.n	800fe6a <ucdr_serialize_int16_t+0x7e>
 800fe1c:	1b5e      	subs	r6, r3, r5
 800fe1e:	60a3      	str	r3, [r4, #8]
 800fe20:	6923      	ldr	r3, [r4, #16]
 800fe22:	f1c6 0802 	rsb	r8, r6, #2
 800fe26:	4433      	add	r3, r6
 800fe28:	6123      	str	r3, [r4, #16]
 800fe2a:	4641      	mov	r1, r8
 800fe2c:	4620      	mov	r0, r4
 800fe2e:	f000 fba5 	bl	801057c <ucdr_check_final_buffer_behavior>
 800fe32:	2800      	cmp	r0, #0
 800fe34:	d03b      	beq.n	800feae <ucdr_serialize_int16_t+0xc2>
 800fe36:	7d23      	ldrb	r3, [r4, #20]
 800fe38:	2b01      	cmp	r3, #1
 800fe3a:	d04a      	beq.n	800fed2 <ucdr_serialize_int16_t+0xe6>
 800fe3c:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800fe40:	702b      	strb	r3, [r5, #0]
 800fe42:	2e00      	cmp	r6, #0
 800fe44:	d040      	beq.n	800fec8 <ucdr_serialize_int16_t+0xdc>
 800fe46:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800fe4a:	706b      	strb	r3, [r5, #1]
 800fe4c:	6923      	ldr	r3, [r4, #16]
 800fe4e:	68a2      	ldr	r2, [r4, #8]
 800fe50:	7da0      	ldrb	r0, [r4, #22]
 800fe52:	3302      	adds	r3, #2
 800fe54:	1b9e      	subs	r6, r3, r6
 800fe56:	4442      	add	r2, r8
 800fe58:	2302      	movs	r3, #2
 800fe5a:	f080 0001 	eor.w	r0, r0, #1
 800fe5e:	60a2      	str	r2, [r4, #8]
 800fe60:	6126      	str	r6, [r4, #16]
 800fe62:	7563      	strb	r3, [r4, #21]
 800fe64:	b002      	add	sp, #8
 800fe66:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fe6a:	2102      	movs	r1, #2
 800fe6c:	4620      	mov	r0, r4
 800fe6e:	f000 fb85 	bl	801057c <ucdr_check_final_buffer_behavior>
 800fe72:	b190      	cbz	r0, 800fe9a <ucdr_serialize_int16_t+0xae>
 800fe74:	7d23      	ldrb	r3, [r4, #20]
 800fe76:	2b01      	cmp	r3, #1
 800fe78:	68a3      	ldr	r3, [r4, #8]
 800fe7a:	d014      	beq.n	800fea6 <ucdr_serialize_int16_t+0xba>
 800fe7c:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800fe80:	701a      	strb	r2, [r3, #0]
 800fe82:	68a3      	ldr	r3, [r4, #8]
 800fe84:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800fe88:	705a      	strb	r2, [r3, #1]
 800fe8a:	68a2      	ldr	r2, [r4, #8]
 800fe8c:	6923      	ldr	r3, [r4, #16]
 800fe8e:	3202      	adds	r2, #2
 800fe90:	3302      	adds	r3, #2
 800fe92:	2102      	movs	r1, #2
 800fe94:	60a2      	str	r2, [r4, #8]
 800fe96:	6123      	str	r3, [r4, #16]
 800fe98:	7561      	strb	r1, [r4, #21]
 800fe9a:	7da0      	ldrb	r0, [r4, #22]
 800fe9c:	f080 0001 	eor.w	r0, r0, #1
 800fea0:	b002      	add	sp, #8
 800fea2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fea6:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 800feaa:	801a      	strh	r2, [r3, #0]
 800feac:	e7ed      	b.n	800fe8a <ucdr_serialize_int16_t+0x9e>
 800feae:	68a2      	ldr	r2, [r4, #8]
 800feb0:	6923      	ldr	r3, [r4, #16]
 800feb2:	7da0      	ldrb	r0, [r4, #22]
 800feb4:	7567      	strb	r7, [r4, #21]
 800feb6:	1b92      	subs	r2, r2, r6
 800feb8:	1b9b      	subs	r3, r3, r6
 800feba:	f080 0001 	eor.w	r0, r0, #1
 800febe:	60a2      	str	r2, [r4, #8]
 800fec0:	6123      	str	r3, [r4, #16]
 800fec2:	b002      	add	sp, #8
 800fec4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fec8:	68a3      	ldr	r3, [r4, #8]
 800feca:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800fece:	701a      	strb	r2, [r3, #0]
 800fed0:	e7bc      	b.n	800fe4c <ucdr_serialize_int16_t+0x60>
 800fed2:	4628      	mov	r0, r5
 800fed4:	f10d 0506 	add.w	r5, sp, #6
 800fed8:	4629      	mov	r1, r5
 800feda:	4632      	mov	r2, r6
 800fedc:	f00b fc25 	bl	801b72a <memcpy>
 800fee0:	68a0      	ldr	r0, [r4, #8]
 800fee2:	4642      	mov	r2, r8
 800fee4:	19a9      	adds	r1, r5, r6
 800fee6:	f00b fc20 	bl	801b72a <memcpy>
 800feea:	e7af      	b.n	800fe4c <ucdr_serialize_int16_t+0x60>

0800feec <ucdr_deserialize_int16_t>:
 800feec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800fef0:	460d      	mov	r5, r1
 800fef2:	2102      	movs	r1, #2
 800fef4:	4604      	mov	r4, r0
 800fef6:	f000 fb95 	bl	8010624 <ucdr_buffer_alignment>
 800fefa:	4601      	mov	r1, r0
 800fefc:	4620      	mov	r0, r4
 800fefe:	f894 8015 	ldrb.w	r8, [r4, #21]
 800ff02:	f000 fbd3 	bl	80106ac <ucdr_advance_buffer>
 800ff06:	2102      	movs	r1, #2
 800ff08:	4620      	mov	r0, r4
 800ff0a:	f000 fb2b 	bl	8010564 <ucdr_check_buffer_available_for>
 800ff0e:	bb60      	cbnz	r0, 800ff6a <ucdr_deserialize_int16_t+0x7e>
 800ff10:	e9d4 6701 	ldrd	r6, r7, [r4, #4]
 800ff14:	42be      	cmp	r6, r7
 800ff16:	d923      	bls.n	800ff60 <ucdr_deserialize_int16_t+0x74>
 800ff18:	6923      	ldr	r3, [r4, #16]
 800ff1a:	60a6      	str	r6, [r4, #8]
 800ff1c:	1bf6      	subs	r6, r6, r7
 800ff1e:	4433      	add	r3, r6
 800ff20:	f1c6 0902 	rsb	r9, r6, #2
 800ff24:	6123      	str	r3, [r4, #16]
 800ff26:	4649      	mov	r1, r9
 800ff28:	4620      	mov	r0, r4
 800ff2a:	f000 fb27 	bl	801057c <ucdr_check_final_buffer_behavior>
 800ff2e:	2800      	cmp	r0, #0
 800ff30:	d034      	beq.n	800ff9c <ucdr_deserialize_int16_t+0xb0>
 800ff32:	7d23      	ldrb	r3, [r4, #20]
 800ff34:	2b01      	cmp	r3, #1
 800ff36:	d042      	beq.n	800ffbe <ucdr_deserialize_int16_t+0xd2>
 800ff38:	787b      	ldrb	r3, [r7, #1]
 800ff3a:	702b      	strb	r3, [r5, #0]
 800ff3c:	2e00      	cmp	r6, #0
 800ff3e:	d03a      	beq.n	800ffb6 <ucdr_deserialize_int16_t+0xca>
 800ff40:	783b      	ldrb	r3, [r7, #0]
 800ff42:	706b      	strb	r3, [r5, #1]
 800ff44:	6923      	ldr	r3, [r4, #16]
 800ff46:	68a2      	ldr	r2, [r4, #8]
 800ff48:	7da0      	ldrb	r0, [r4, #22]
 800ff4a:	2102      	movs	r1, #2
 800ff4c:	3302      	adds	r3, #2
 800ff4e:	444a      	add	r2, r9
 800ff50:	1b9b      	subs	r3, r3, r6
 800ff52:	7561      	strb	r1, [r4, #21]
 800ff54:	60a2      	str	r2, [r4, #8]
 800ff56:	6123      	str	r3, [r4, #16]
 800ff58:	f080 0001 	eor.w	r0, r0, #1
 800ff5c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ff60:	2102      	movs	r1, #2
 800ff62:	4620      	mov	r0, r4
 800ff64:	f000 fb0a 	bl	801057c <ucdr_check_final_buffer_behavior>
 800ff68:	b180      	cbz	r0, 800ff8c <ucdr_deserialize_int16_t+0xa0>
 800ff6a:	7d23      	ldrb	r3, [r4, #20]
 800ff6c:	2b01      	cmp	r3, #1
 800ff6e:	68a3      	ldr	r3, [r4, #8]
 800ff70:	d011      	beq.n	800ff96 <ucdr_deserialize_int16_t+0xaa>
 800ff72:	785b      	ldrb	r3, [r3, #1]
 800ff74:	702b      	strb	r3, [r5, #0]
 800ff76:	68a3      	ldr	r3, [r4, #8]
 800ff78:	781b      	ldrb	r3, [r3, #0]
 800ff7a:	706b      	strb	r3, [r5, #1]
 800ff7c:	68a2      	ldr	r2, [r4, #8]
 800ff7e:	6923      	ldr	r3, [r4, #16]
 800ff80:	3202      	adds	r2, #2
 800ff82:	3302      	adds	r3, #2
 800ff84:	2102      	movs	r1, #2
 800ff86:	60a2      	str	r2, [r4, #8]
 800ff88:	6123      	str	r3, [r4, #16]
 800ff8a:	7561      	strb	r1, [r4, #21]
 800ff8c:	7da0      	ldrb	r0, [r4, #22]
 800ff8e:	f080 0001 	eor.w	r0, r0, #1
 800ff92:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ff96:	881b      	ldrh	r3, [r3, #0]
 800ff98:	802b      	strh	r3, [r5, #0]
 800ff9a:	e7ef      	b.n	800ff7c <ucdr_deserialize_int16_t+0x90>
 800ff9c:	68a2      	ldr	r2, [r4, #8]
 800ff9e:	6923      	ldr	r3, [r4, #16]
 800ffa0:	7da0      	ldrb	r0, [r4, #22]
 800ffa2:	f884 8015 	strb.w	r8, [r4, #21]
 800ffa6:	1b92      	subs	r2, r2, r6
 800ffa8:	1b9b      	subs	r3, r3, r6
 800ffaa:	60a2      	str	r2, [r4, #8]
 800ffac:	6123      	str	r3, [r4, #16]
 800ffae:	f080 0001 	eor.w	r0, r0, #1
 800ffb2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ffb6:	68a3      	ldr	r3, [r4, #8]
 800ffb8:	781b      	ldrb	r3, [r3, #0]
 800ffba:	706b      	strb	r3, [r5, #1]
 800ffbc:	e7c2      	b.n	800ff44 <ucdr_deserialize_int16_t+0x58>
 800ffbe:	4639      	mov	r1, r7
 800ffc0:	4632      	mov	r2, r6
 800ffc2:	4628      	mov	r0, r5
 800ffc4:	f00b fbb1 	bl	801b72a <memcpy>
 800ffc8:	68a1      	ldr	r1, [r4, #8]
 800ffca:	464a      	mov	r2, r9
 800ffcc:	19a8      	adds	r0, r5, r6
 800ffce:	f00b fbac 	bl	801b72a <memcpy>
 800ffd2:	e7b7      	b.n	800ff44 <ucdr_deserialize_int16_t+0x58>

0800ffd4 <ucdr_serialize_int32_t>:
 800ffd4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ffd8:	b082      	sub	sp, #8
 800ffda:	4604      	mov	r4, r0
 800ffdc:	9101      	str	r1, [sp, #4]
 800ffde:	2104      	movs	r1, #4
 800ffe0:	f000 fb20 	bl	8010624 <ucdr_buffer_alignment>
 800ffe4:	4601      	mov	r1, r0
 800ffe6:	4620      	mov	r0, r4
 800ffe8:	7d67      	ldrb	r7, [r4, #21]
 800ffea:	f000 fb5f 	bl	80106ac <ucdr_advance_buffer>
 800ffee:	2104      	movs	r1, #4
 800fff0:	4620      	mov	r0, r4
 800fff2:	f000 fab7 	bl	8010564 <ucdr_check_buffer_available_for>
 800fff6:	2800      	cmp	r0, #0
 800fff8:	d139      	bne.n	801006e <ucdr_serialize_int32_t+0x9a>
 800fffa:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 800fffe:	42ab      	cmp	r3, r5
 8010000:	d930      	bls.n	8010064 <ucdr_serialize_int32_t+0x90>
 8010002:	1b5e      	subs	r6, r3, r5
 8010004:	60a3      	str	r3, [r4, #8]
 8010006:	6923      	ldr	r3, [r4, #16]
 8010008:	f1c6 0804 	rsb	r8, r6, #4
 801000c:	4433      	add	r3, r6
 801000e:	6123      	str	r3, [r4, #16]
 8010010:	4641      	mov	r1, r8
 8010012:	4620      	mov	r0, r4
 8010014:	f000 fab2 	bl	801057c <ucdr_check_final_buffer_behavior>
 8010018:	2800      	cmp	r0, #0
 801001a:	d04c      	beq.n	80100b6 <ucdr_serialize_int32_t+0xe2>
 801001c:	7d23      	ldrb	r3, [r4, #20]
 801001e:	2b01      	cmp	r3, #1
 8010020:	d063      	beq.n	80100ea <ucdr_serialize_int32_t+0x116>
 8010022:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8010026:	702b      	strb	r3, [r5, #0]
 8010028:	2e00      	cmp	r6, #0
 801002a:	d051      	beq.n	80100d0 <ucdr_serialize_int32_t+0xfc>
 801002c:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8010030:	706b      	strb	r3, [r5, #1]
 8010032:	2e01      	cmp	r6, #1
 8010034:	d050      	beq.n	80100d8 <ucdr_serialize_int32_t+0x104>
 8010036:	f89d 3005 	ldrb.w	r3, [sp, #5]
 801003a:	70ab      	strb	r3, [r5, #2]
 801003c:	2e02      	cmp	r6, #2
 801003e:	d04f      	beq.n	80100e0 <ucdr_serialize_int32_t+0x10c>
 8010040:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8010044:	70eb      	strb	r3, [r5, #3]
 8010046:	6923      	ldr	r3, [r4, #16]
 8010048:	68a2      	ldr	r2, [r4, #8]
 801004a:	7da0      	ldrb	r0, [r4, #22]
 801004c:	3304      	adds	r3, #4
 801004e:	1b9e      	subs	r6, r3, r6
 8010050:	4442      	add	r2, r8
 8010052:	2304      	movs	r3, #4
 8010054:	f080 0001 	eor.w	r0, r0, #1
 8010058:	60a2      	str	r2, [r4, #8]
 801005a:	6126      	str	r6, [r4, #16]
 801005c:	7563      	strb	r3, [r4, #21]
 801005e:	b002      	add	sp, #8
 8010060:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010064:	2104      	movs	r1, #4
 8010066:	4620      	mov	r0, r4
 8010068:	f000 fa88 	bl	801057c <ucdr_check_final_buffer_behavior>
 801006c:	b1d0      	cbz	r0, 80100a4 <ucdr_serialize_int32_t+0xd0>
 801006e:	7d23      	ldrb	r3, [r4, #20]
 8010070:	2b01      	cmp	r3, #1
 8010072:	68a3      	ldr	r3, [r4, #8]
 8010074:	d01c      	beq.n	80100b0 <ucdr_serialize_int32_t+0xdc>
 8010076:	f89d 2007 	ldrb.w	r2, [sp, #7]
 801007a:	701a      	strb	r2, [r3, #0]
 801007c:	68a3      	ldr	r3, [r4, #8]
 801007e:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8010082:	705a      	strb	r2, [r3, #1]
 8010084:	68a3      	ldr	r3, [r4, #8]
 8010086:	f89d 2005 	ldrb.w	r2, [sp, #5]
 801008a:	709a      	strb	r2, [r3, #2]
 801008c:	68a3      	ldr	r3, [r4, #8]
 801008e:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8010092:	70da      	strb	r2, [r3, #3]
 8010094:	68a2      	ldr	r2, [r4, #8]
 8010096:	6923      	ldr	r3, [r4, #16]
 8010098:	3204      	adds	r2, #4
 801009a:	3304      	adds	r3, #4
 801009c:	2104      	movs	r1, #4
 801009e:	60a2      	str	r2, [r4, #8]
 80100a0:	6123      	str	r3, [r4, #16]
 80100a2:	7561      	strb	r1, [r4, #21]
 80100a4:	7da0      	ldrb	r0, [r4, #22]
 80100a6:	f080 0001 	eor.w	r0, r0, #1
 80100aa:	b002      	add	sp, #8
 80100ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80100b0:	9a01      	ldr	r2, [sp, #4]
 80100b2:	601a      	str	r2, [r3, #0]
 80100b4:	e7ee      	b.n	8010094 <ucdr_serialize_int32_t+0xc0>
 80100b6:	68a2      	ldr	r2, [r4, #8]
 80100b8:	6923      	ldr	r3, [r4, #16]
 80100ba:	7da0      	ldrb	r0, [r4, #22]
 80100bc:	7567      	strb	r7, [r4, #21]
 80100be:	1b92      	subs	r2, r2, r6
 80100c0:	1b9b      	subs	r3, r3, r6
 80100c2:	f080 0001 	eor.w	r0, r0, #1
 80100c6:	60a2      	str	r2, [r4, #8]
 80100c8:	6123      	str	r3, [r4, #16]
 80100ca:	b002      	add	sp, #8
 80100cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80100d0:	68a3      	ldr	r3, [r4, #8]
 80100d2:	f89d 2006 	ldrb.w	r2, [sp, #6]
 80100d6:	701a      	strb	r2, [r3, #0]
 80100d8:	68a3      	ldr	r3, [r4, #8]
 80100da:	f89d 2005 	ldrb.w	r2, [sp, #5]
 80100de:	701a      	strb	r2, [r3, #0]
 80100e0:	68a3      	ldr	r3, [r4, #8]
 80100e2:	f89d 2004 	ldrb.w	r2, [sp, #4]
 80100e6:	701a      	strb	r2, [r3, #0]
 80100e8:	e7ad      	b.n	8010046 <ucdr_serialize_int32_t+0x72>
 80100ea:	4628      	mov	r0, r5
 80100ec:	ad01      	add	r5, sp, #4
 80100ee:	4629      	mov	r1, r5
 80100f0:	4632      	mov	r2, r6
 80100f2:	f00b fb1a 	bl	801b72a <memcpy>
 80100f6:	68a0      	ldr	r0, [r4, #8]
 80100f8:	4642      	mov	r2, r8
 80100fa:	19a9      	adds	r1, r5, r6
 80100fc:	f00b fb15 	bl	801b72a <memcpy>
 8010100:	e7a1      	b.n	8010046 <ucdr_serialize_int32_t+0x72>
 8010102:	bf00      	nop

08010104 <ucdr_deserialize_int32_t>:
 8010104:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010108:	460d      	mov	r5, r1
 801010a:	2104      	movs	r1, #4
 801010c:	4604      	mov	r4, r0
 801010e:	f000 fa89 	bl	8010624 <ucdr_buffer_alignment>
 8010112:	4601      	mov	r1, r0
 8010114:	4620      	mov	r0, r4
 8010116:	f894 8015 	ldrb.w	r8, [r4, #21]
 801011a:	f000 fac7 	bl	80106ac <ucdr_advance_buffer>
 801011e:	2104      	movs	r1, #4
 8010120:	4620      	mov	r0, r4
 8010122:	f000 fa1f 	bl	8010564 <ucdr_check_buffer_available_for>
 8010126:	2800      	cmp	r0, #0
 8010128:	d138      	bne.n	801019c <ucdr_deserialize_int32_t+0x98>
 801012a:	e9d4 7601 	ldrd	r7, r6, [r4, #4]
 801012e:	42b7      	cmp	r7, r6
 8010130:	d92f      	bls.n	8010192 <ucdr_deserialize_int32_t+0x8e>
 8010132:	6923      	ldr	r3, [r4, #16]
 8010134:	60a7      	str	r7, [r4, #8]
 8010136:	1bbf      	subs	r7, r7, r6
 8010138:	443b      	add	r3, r7
 801013a:	f1c7 0904 	rsb	r9, r7, #4
 801013e:	6123      	str	r3, [r4, #16]
 8010140:	4649      	mov	r1, r9
 8010142:	4620      	mov	r0, r4
 8010144:	f000 fa1a 	bl	801057c <ucdr_check_final_buffer_behavior>
 8010148:	2800      	cmp	r0, #0
 801014a:	d046      	beq.n	80101da <ucdr_deserialize_int32_t+0xd6>
 801014c:	7d23      	ldrb	r3, [r4, #20]
 801014e:	2b01      	cmp	r3, #1
 8010150:	d05c      	beq.n	801020c <ucdr_deserialize_int32_t+0x108>
 8010152:	78f3      	ldrb	r3, [r6, #3]
 8010154:	702b      	strb	r3, [r5, #0]
 8010156:	2f00      	cmp	r7, #0
 8010158:	d04c      	beq.n	80101f4 <ucdr_deserialize_int32_t+0xf0>
 801015a:	78b3      	ldrb	r3, [r6, #2]
 801015c:	706b      	strb	r3, [r5, #1]
 801015e:	2f01      	cmp	r7, #1
 8010160:	f105 0302 	add.w	r3, r5, #2
 8010164:	d04a      	beq.n	80101fc <ucdr_deserialize_int32_t+0xf8>
 8010166:	7873      	ldrb	r3, [r6, #1]
 8010168:	70ab      	strb	r3, [r5, #2]
 801016a:	2f02      	cmp	r7, #2
 801016c:	f105 0303 	add.w	r3, r5, #3
 8010170:	d048      	beq.n	8010204 <ucdr_deserialize_int32_t+0x100>
 8010172:	7833      	ldrb	r3, [r6, #0]
 8010174:	70eb      	strb	r3, [r5, #3]
 8010176:	6923      	ldr	r3, [r4, #16]
 8010178:	68a2      	ldr	r2, [r4, #8]
 801017a:	7da0      	ldrb	r0, [r4, #22]
 801017c:	2104      	movs	r1, #4
 801017e:	3304      	adds	r3, #4
 8010180:	444a      	add	r2, r9
 8010182:	1bdb      	subs	r3, r3, r7
 8010184:	7561      	strb	r1, [r4, #21]
 8010186:	60a2      	str	r2, [r4, #8]
 8010188:	6123      	str	r3, [r4, #16]
 801018a:	f080 0001 	eor.w	r0, r0, #1
 801018e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010192:	2104      	movs	r1, #4
 8010194:	4620      	mov	r0, r4
 8010196:	f000 f9f1 	bl	801057c <ucdr_check_final_buffer_behavior>
 801019a:	b1b0      	cbz	r0, 80101ca <ucdr_deserialize_int32_t+0xc6>
 801019c:	7d23      	ldrb	r3, [r4, #20]
 801019e:	2b01      	cmp	r3, #1
 80101a0:	68a3      	ldr	r3, [r4, #8]
 80101a2:	d017      	beq.n	80101d4 <ucdr_deserialize_int32_t+0xd0>
 80101a4:	78db      	ldrb	r3, [r3, #3]
 80101a6:	702b      	strb	r3, [r5, #0]
 80101a8:	68a3      	ldr	r3, [r4, #8]
 80101aa:	789b      	ldrb	r3, [r3, #2]
 80101ac:	706b      	strb	r3, [r5, #1]
 80101ae:	68a3      	ldr	r3, [r4, #8]
 80101b0:	785b      	ldrb	r3, [r3, #1]
 80101b2:	70ab      	strb	r3, [r5, #2]
 80101b4:	68a3      	ldr	r3, [r4, #8]
 80101b6:	781b      	ldrb	r3, [r3, #0]
 80101b8:	70eb      	strb	r3, [r5, #3]
 80101ba:	68a2      	ldr	r2, [r4, #8]
 80101bc:	6923      	ldr	r3, [r4, #16]
 80101be:	3204      	adds	r2, #4
 80101c0:	3304      	adds	r3, #4
 80101c2:	2104      	movs	r1, #4
 80101c4:	60a2      	str	r2, [r4, #8]
 80101c6:	6123      	str	r3, [r4, #16]
 80101c8:	7561      	strb	r1, [r4, #21]
 80101ca:	7da0      	ldrb	r0, [r4, #22]
 80101cc:	f080 0001 	eor.w	r0, r0, #1
 80101d0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80101d4:	681b      	ldr	r3, [r3, #0]
 80101d6:	602b      	str	r3, [r5, #0]
 80101d8:	e7ef      	b.n	80101ba <ucdr_deserialize_int32_t+0xb6>
 80101da:	68a2      	ldr	r2, [r4, #8]
 80101dc:	6923      	ldr	r3, [r4, #16]
 80101de:	7da0      	ldrb	r0, [r4, #22]
 80101e0:	f884 8015 	strb.w	r8, [r4, #21]
 80101e4:	1bd2      	subs	r2, r2, r7
 80101e6:	1bdb      	subs	r3, r3, r7
 80101e8:	60a2      	str	r2, [r4, #8]
 80101ea:	6123      	str	r3, [r4, #16]
 80101ec:	f080 0001 	eor.w	r0, r0, #1
 80101f0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80101f4:	68a3      	ldr	r3, [r4, #8]
 80101f6:	789b      	ldrb	r3, [r3, #2]
 80101f8:	706b      	strb	r3, [r5, #1]
 80101fa:	1cab      	adds	r3, r5, #2
 80101fc:	68a2      	ldr	r2, [r4, #8]
 80101fe:	7852      	ldrb	r2, [r2, #1]
 8010200:	f803 2b01 	strb.w	r2, [r3], #1
 8010204:	68a2      	ldr	r2, [r4, #8]
 8010206:	7812      	ldrb	r2, [r2, #0]
 8010208:	701a      	strb	r2, [r3, #0]
 801020a:	e7b4      	b.n	8010176 <ucdr_deserialize_int32_t+0x72>
 801020c:	4631      	mov	r1, r6
 801020e:	463a      	mov	r2, r7
 8010210:	4628      	mov	r0, r5
 8010212:	f00b fa8a 	bl	801b72a <memcpy>
 8010216:	68a1      	ldr	r1, [r4, #8]
 8010218:	464a      	mov	r2, r9
 801021a:	19e8      	adds	r0, r5, r7
 801021c:	f00b fa85 	bl	801b72a <memcpy>
 8010220:	e7a9      	b.n	8010176 <ucdr_deserialize_int32_t+0x72>
 8010222:	bf00      	nop

08010224 <ucdr_serialize_endian_double>:
 8010224:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8010228:	460e      	mov	r6, r1
 801022a:	b083      	sub	sp, #12
 801022c:	2108      	movs	r1, #8
 801022e:	4604      	mov	r4, r0
 8010230:	ed8d 0b00 	vstr	d0, [sp]
 8010234:	f000 f9f6 	bl	8010624 <ucdr_buffer_alignment>
 8010238:	4601      	mov	r1, r0
 801023a:	4620      	mov	r0, r4
 801023c:	f894 8015 	ldrb.w	r8, [r4, #21]
 8010240:	f000 fa34 	bl	80106ac <ucdr_advance_buffer>
 8010244:	2108      	movs	r1, #8
 8010246:	4620      	mov	r0, r4
 8010248:	f000 f98c 	bl	8010564 <ucdr_check_buffer_available_for>
 801024c:	2800      	cmp	r0, #0
 801024e:	d14d      	bne.n	80102ec <ucdr_serialize_endian_double+0xc8>
 8010250:	e9d4 5701 	ldrd	r5, r7, [r4, #4]
 8010254:	42bd      	cmp	r5, r7
 8010256:	d944      	bls.n	80102e2 <ucdr_serialize_endian_double+0xbe>
 8010258:	6923      	ldr	r3, [r4, #16]
 801025a:	60a5      	str	r5, [r4, #8]
 801025c:	1bed      	subs	r5, r5, r7
 801025e:	442b      	add	r3, r5
 8010260:	f1c5 0908 	rsb	r9, r5, #8
 8010264:	6123      	str	r3, [r4, #16]
 8010266:	4649      	mov	r1, r9
 8010268:	4620      	mov	r0, r4
 801026a:	f000 f987 	bl	801057c <ucdr_check_final_buffer_behavior>
 801026e:	2800      	cmp	r0, #0
 8010270:	d072      	beq.n	8010358 <ucdr_serialize_endian_double+0x134>
 8010272:	2e01      	cmp	r6, #1
 8010274:	f000 809b 	beq.w	80103ae <ucdr_serialize_endian_double+0x18a>
 8010278:	f89d 3007 	ldrb.w	r3, [sp, #7]
 801027c:	703b      	strb	r3, [r7, #0]
 801027e:	2d00      	cmp	r5, #0
 8010280:	d078      	beq.n	8010374 <ucdr_serialize_endian_double+0x150>
 8010282:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8010286:	707b      	strb	r3, [r7, #1]
 8010288:	2d01      	cmp	r5, #1
 801028a:	d077      	beq.n	801037c <ucdr_serialize_endian_double+0x158>
 801028c:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8010290:	70bb      	strb	r3, [r7, #2]
 8010292:	2d02      	cmp	r5, #2
 8010294:	d076      	beq.n	8010384 <ucdr_serialize_endian_double+0x160>
 8010296:	f89d 3004 	ldrb.w	r3, [sp, #4]
 801029a:	70fb      	strb	r3, [r7, #3]
 801029c:	2d03      	cmp	r5, #3
 801029e:	d075      	beq.n	801038c <ucdr_serialize_endian_double+0x168>
 80102a0:	f89d 3003 	ldrb.w	r3, [sp, #3]
 80102a4:	713b      	strb	r3, [r7, #4]
 80102a6:	2d04      	cmp	r5, #4
 80102a8:	d074      	beq.n	8010394 <ucdr_serialize_endian_double+0x170>
 80102aa:	f89d 3002 	ldrb.w	r3, [sp, #2]
 80102ae:	717b      	strb	r3, [r7, #5]
 80102b0:	2d05      	cmp	r5, #5
 80102b2:	d073      	beq.n	801039c <ucdr_serialize_endian_double+0x178>
 80102b4:	f89d 3001 	ldrb.w	r3, [sp, #1]
 80102b8:	71bb      	strb	r3, [r7, #6]
 80102ba:	2d06      	cmp	r5, #6
 80102bc:	d072      	beq.n	80103a4 <ucdr_serialize_endian_double+0x180>
 80102be:	f89d 3000 	ldrb.w	r3, [sp]
 80102c2:	71fb      	strb	r3, [r7, #7]
 80102c4:	6923      	ldr	r3, [r4, #16]
 80102c6:	68a2      	ldr	r2, [r4, #8]
 80102c8:	7da0      	ldrb	r0, [r4, #22]
 80102ca:	3308      	adds	r3, #8
 80102cc:	1b5d      	subs	r5, r3, r5
 80102ce:	444a      	add	r2, r9
 80102d0:	2308      	movs	r3, #8
 80102d2:	f080 0001 	eor.w	r0, r0, #1
 80102d6:	60a2      	str	r2, [r4, #8]
 80102d8:	6125      	str	r5, [r4, #16]
 80102da:	7563      	strb	r3, [r4, #21]
 80102dc:	b003      	add	sp, #12
 80102de:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80102e2:	2108      	movs	r1, #8
 80102e4:	4620      	mov	r0, r4
 80102e6:	f000 f949 	bl	801057c <ucdr_check_final_buffer_behavior>
 80102ea:	b348      	cbz	r0, 8010340 <ucdr_serialize_endian_double+0x11c>
 80102ec:	2e01      	cmp	r6, #1
 80102ee:	d02d      	beq.n	801034c <ucdr_serialize_endian_double+0x128>
 80102f0:	68a3      	ldr	r3, [r4, #8]
 80102f2:	f89d 2007 	ldrb.w	r2, [sp, #7]
 80102f6:	701a      	strb	r2, [r3, #0]
 80102f8:	68a3      	ldr	r3, [r4, #8]
 80102fa:	f89d 2006 	ldrb.w	r2, [sp, #6]
 80102fe:	705a      	strb	r2, [r3, #1]
 8010300:	68a3      	ldr	r3, [r4, #8]
 8010302:	f89d 2005 	ldrb.w	r2, [sp, #5]
 8010306:	709a      	strb	r2, [r3, #2]
 8010308:	68a3      	ldr	r3, [r4, #8]
 801030a:	f89d 2004 	ldrb.w	r2, [sp, #4]
 801030e:	70da      	strb	r2, [r3, #3]
 8010310:	68a3      	ldr	r3, [r4, #8]
 8010312:	f89d 2003 	ldrb.w	r2, [sp, #3]
 8010316:	711a      	strb	r2, [r3, #4]
 8010318:	68a3      	ldr	r3, [r4, #8]
 801031a:	f89d 2002 	ldrb.w	r2, [sp, #2]
 801031e:	715a      	strb	r2, [r3, #5]
 8010320:	68a3      	ldr	r3, [r4, #8]
 8010322:	f89d 2001 	ldrb.w	r2, [sp, #1]
 8010326:	719a      	strb	r2, [r3, #6]
 8010328:	68a3      	ldr	r3, [r4, #8]
 801032a:	f89d 2000 	ldrb.w	r2, [sp]
 801032e:	71da      	strb	r2, [r3, #7]
 8010330:	68a2      	ldr	r2, [r4, #8]
 8010332:	6923      	ldr	r3, [r4, #16]
 8010334:	3208      	adds	r2, #8
 8010336:	3308      	adds	r3, #8
 8010338:	2108      	movs	r1, #8
 801033a:	60a2      	str	r2, [r4, #8]
 801033c:	6123      	str	r3, [r4, #16]
 801033e:	7561      	strb	r1, [r4, #21]
 8010340:	7da0      	ldrb	r0, [r4, #22]
 8010342:	f080 0001 	eor.w	r0, r0, #1
 8010346:	b003      	add	sp, #12
 8010348:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801034c:	466b      	mov	r3, sp
 801034e:	cb03      	ldmia	r3!, {r0, r1}
 8010350:	68a3      	ldr	r3, [r4, #8]
 8010352:	6018      	str	r0, [r3, #0]
 8010354:	6059      	str	r1, [r3, #4]
 8010356:	e7eb      	b.n	8010330 <ucdr_serialize_endian_double+0x10c>
 8010358:	68a2      	ldr	r2, [r4, #8]
 801035a:	6923      	ldr	r3, [r4, #16]
 801035c:	7da0      	ldrb	r0, [r4, #22]
 801035e:	f884 8015 	strb.w	r8, [r4, #21]
 8010362:	1b52      	subs	r2, r2, r5
 8010364:	1b5b      	subs	r3, r3, r5
 8010366:	f080 0001 	eor.w	r0, r0, #1
 801036a:	60a2      	str	r2, [r4, #8]
 801036c:	6123      	str	r3, [r4, #16]
 801036e:	b003      	add	sp, #12
 8010370:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8010374:	68a3      	ldr	r3, [r4, #8]
 8010376:	f89d 2006 	ldrb.w	r2, [sp, #6]
 801037a:	701a      	strb	r2, [r3, #0]
 801037c:	68a3      	ldr	r3, [r4, #8]
 801037e:	f89d 2005 	ldrb.w	r2, [sp, #5]
 8010382:	701a      	strb	r2, [r3, #0]
 8010384:	68a3      	ldr	r3, [r4, #8]
 8010386:	f89d 2004 	ldrb.w	r2, [sp, #4]
 801038a:	701a      	strb	r2, [r3, #0]
 801038c:	68a3      	ldr	r3, [r4, #8]
 801038e:	f89d 2003 	ldrb.w	r2, [sp, #3]
 8010392:	701a      	strb	r2, [r3, #0]
 8010394:	68a3      	ldr	r3, [r4, #8]
 8010396:	f89d 2002 	ldrb.w	r2, [sp, #2]
 801039a:	701a      	strb	r2, [r3, #0]
 801039c:	68a3      	ldr	r3, [r4, #8]
 801039e:	f89d 2001 	ldrb.w	r2, [sp, #1]
 80103a2:	701a      	strb	r2, [r3, #0]
 80103a4:	68a3      	ldr	r3, [r4, #8]
 80103a6:	f89d 2000 	ldrb.w	r2, [sp]
 80103aa:	701a      	strb	r2, [r3, #0]
 80103ac:	e78a      	b.n	80102c4 <ucdr_serialize_endian_double+0xa0>
 80103ae:	466e      	mov	r6, sp
 80103b0:	4631      	mov	r1, r6
 80103b2:	462a      	mov	r2, r5
 80103b4:	4638      	mov	r0, r7
 80103b6:	f00b f9b8 	bl	801b72a <memcpy>
 80103ba:	68a0      	ldr	r0, [r4, #8]
 80103bc:	464a      	mov	r2, r9
 80103be:	1971      	adds	r1, r6, r5
 80103c0:	f00b f9b3 	bl	801b72a <memcpy>
 80103c4:	e77e      	b.n	80102c4 <ucdr_serialize_endian_double+0xa0>
 80103c6:	bf00      	nop

080103c8 <ucdr_deserialize_endian_double>:
 80103c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80103cc:	460f      	mov	r7, r1
 80103ce:	2108      	movs	r1, #8
 80103d0:	4604      	mov	r4, r0
 80103d2:	4615      	mov	r5, r2
 80103d4:	f000 f926 	bl	8010624 <ucdr_buffer_alignment>
 80103d8:	4601      	mov	r1, r0
 80103da:	4620      	mov	r0, r4
 80103dc:	f894 9015 	ldrb.w	r9, [r4, #21]
 80103e0:	f000 f964 	bl	80106ac <ucdr_advance_buffer>
 80103e4:	2108      	movs	r1, #8
 80103e6:	4620      	mov	r0, r4
 80103e8:	f000 f8bc 	bl	8010564 <ucdr_check_buffer_available_for>
 80103ec:	2800      	cmp	r0, #0
 80103ee:	d159      	bne.n	80104a4 <ucdr_deserialize_endian_double+0xdc>
 80103f0:	e9d4 6801 	ldrd	r6, r8, [r4, #4]
 80103f4:	4546      	cmp	r6, r8
 80103f6:	d950      	bls.n	801049a <ucdr_deserialize_endian_double+0xd2>
 80103f8:	6923      	ldr	r3, [r4, #16]
 80103fa:	60a6      	str	r6, [r4, #8]
 80103fc:	eba6 0608 	sub.w	r6, r6, r8
 8010400:	4433      	add	r3, r6
 8010402:	f1c6 0a08 	rsb	sl, r6, #8
 8010406:	6123      	str	r3, [r4, #16]
 8010408:	4651      	mov	r1, sl
 801040a:	4620      	mov	r0, r4
 801040c:	f000 f8b6 	bl	801057c <ucdr_check_final_buffer_behavior>
 8010410:	2800      	cmp	r0, #0
 8010412:	d073      	beq.n	80104fc <ucdr_deserialize_endian_double+0x134>
 8010414:	2f01      	cmp	r7, #1
 8010416:	f000 809a 	beq.w	801054e <ucdr_deserialize_endian_double+0x186>
 801041a:	f898 3007 	ldrb.w	r3, [r8, #7]
 801041e:	702b      	strb	r3, [r5, #0]
 8010420:	2e00      	cmp	r6, #0
 8010422:	d078      	beq.n	8010516 <ucdr_deserialize_endian_double+0x14e>
 8010424:	f898 3006 	ldrb.w	r3, [r8, #6]
 8010428:	706b      	strb	r3, [r5, #1]
 801042a:	2e01      	cmp	r6, #1
 801042c:	f105 0302 	add.w	r3, r5, #2
 8010430:	d075      	beq.n	801051e <ucdr_deserialize_endian_double+0x156>
 8010432:	f898 3005 	ldrb.w	r3, [r8, #5]
 8010436:	70ab      	strb	r3, [r5, #2]
 8010438:	2e02      	cmp	r6, #2
 801043a:	f105 0303 	add.w	r3, r5, #3
 801043e:	d072      	beq.n	8010526 <ucdr_deserialize_endian_double+0x15e>
 8010440:	f898 3004 	ldrb.w	r3, [r8, #4]
 8010444:	70eb      	strb	r3, [r5, #3]
 8010446:	2e03      	cmp	r6, #3
 8010448:	f105 0304 	add.w	r3, r5, #4
 801044c:	d06f      	beq.n	801052e <ucdr_deserialize_endian_double+0x166>
 801044e:	f898 3003 	ldrb.w	r3, [r8, #3]
 8010452:	712b      	strb	r3, [r5, #4]
 8010454:	2e04      	cmp	r6, #4
 8010456:	f105 0305 	add.w	r3, r5, #5
 801045a:	d06c      	beq.n	8010536 <ucdr_deserialize_endian_double+0x16e>
 801045c:	f898 3002 	ldrb.w	r3, [r8, #2]
 8010460:	716b      	strb	r3, [r5, #5]
 8010462:	2e05      	cmp	r6, #5
 8010464:	f105 0306 	add.w	r3, r5, #6
 8010468:	d069      	beq.n	801053e <ucdr_deserialize_endian_double+0x176>
 801046a:	f898 3001 	ldrb.w	r3, [r8, #1]
 801046e:	71ab      	strb	r3, [r5, #6]
 8010470:	2e06      	cmp	r6, #6
 8010472:	f105 0307 	add.w	r3, r5, #7
 8010476:	d066      	beq.n	8010546 <ucdr_deserialize_endian_double+0x17e>
 8010478:	f898 3000 	ldrb.w	r3, [r8]
 801047c:	71eb      	strb	r3, [r5, #7]
 801047e:	6923      	ldr	r3, [r4, #16]
 8010480:	68a2      	ldr	r2, [r4, #8]
 8010482:	7da0      	ldrb	r0, [r4, #22]
 8010484:	3308      	adds	r3, #8
 8010486:	1b9e      	subs	r6, r3, r6
 8010488:	2308      	movs	r3, #8
 801048a:	4452      	add	r2, sl
 801048c:	7563      	strb	r3, [r4, #21]
 801048e:	60a2      	str	r2, [r4, #8]
 8010490:	6126      	str	r6, [r4, #16]
 8010492:	f080 0001 	eor.w	r0, r0, #1
 8010496:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801049a:	2108      	movs	r1, #8
 801049c:	4620      	mov	r0, r4
 801049e:	f000 f86d 	bl	801057c <ucdr_check_final_buffer_behavior>
 80104a2:	b308      	cbz	r0, 80104e8 <ucdr_deserialize_endian_double+0x120>
 80104a4:	2f01      	cmp	r7, #1
 80104a6:	68a3      	ldr	r3, [r4, #8]
 80104a8:	d023      	beq.n	80104f2 <ucdr_deserialize_endian_double+0x12a>
 80104aa:	79db      	ldrb	r3, [r3, #7]
 80104ac:	702b      	strb	r3, [r5, #0]
 80104ae:	68a3      	ldr	r3, [r4, #8]
 80104b0:	799b      	ldrb	r3, [r3, #6]
 80104b2:	706b      	strb	r3, [r5, #1]
 80104b4:	68a3      	ldr	r3, [r4, #8]
 80104b6:	795b      	ldrb	r3, [r3, #5]
 80104b8:	70ab      	strb	r3, [r5, #2]
 80104ba:	68a3      	ldr	r3, [r4, #8]
 80104bc:	791b      	ldrb	r3, [r3, #4]
 80104be:	70eb      	strb	r3, [r5, #3]
 80104c0:	68a3      	ldr	r3, [r4, #8]
 80104c2:	78db      	ldrb	r3, [r3, #3]
 80104c4:	712b      	strb	r3, [r5, #4]
 80104c6:	68a3      	ldr	r3, [r4, #8]
 80104c8:	789b      	ldrb	r3, [r3, #2]
 80104ca:	716b      	strb	r3, [r5, #5]
 80104cc:	68a3      	ldr	r3, [r4, #8]
 80104ce:	785b      	ldrb	r3, [r3, #1]
 80104d0:	71ab      	strb	r3, [r5, #6]
 80104d2:	68a3      	ldr	r3, [r4, #8]
 80104d4:	781b      	ldrb	r3, [r3, #0]
 80104d6:	71eb      	strb	r3, [r5, #7]
 80104d8:	68a2      	ldr	r2, [r4, #8]
 80104da:	6923      	ldr	r3, [r4, #16]
 80104dc:	3208      	adds	r2, #8
 80104de:	3308      	adds	r3, #8
 80104e0:	2108      	movs	r1, #8
 80104e2:	60a2      	str	r2, [r4, #8]
 80104e4:	6123      	str	r3, [r4, #16]
 80104e6:	7561      	strb	r1, [r4, #21]
 80104e8:	7da0      	ldrb	r0, [r4, #22]
 80104ea:	f080 0001 	eor.w	r0, r0, #1
 80104ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80104f2:	681a      	ldr	r2, [r3, #0]
 80104f4:	685b      	ldr	r3, [r3, #4]
 80104f6:	606b      	str	r3, [r5, #4]
 80104f8:	602a      	str	r2, [r5, #0]
 80104fa:	e7ed      	b.n	80104d8 <ucdr_deserialize_endian_double+0x110>
 80104fc:	68a2      	ldr	r2, [r4, #8]
 80104fe:	6923      	ldr	r3, [r4, #16]
 8010500:	7da0      	ldrb	r0, [r4, #22]
 8010502:	f884 9015 	strb.w	r9, [r4, #21]
 8010506:	1b92      	subs	r2, r2, r6
 8010508:	1b9b      	subs	r3, r3, r6
 801050a:	60a2      	str	r2, [r4, #8]
 801050c:	6123      	str	r3, [r4, #16]
 801050e:	f080 0001 	eor.w	r0, r0, #1
 8010512:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010516:	68a3      	ldr	r3, [r4, #8]
 8010518:	799b      	ldrb	r3, [r3, #6]
 801051a:	706b      	strb	r3, [r5, #1]
 801051c:	1cab      	adds	r3, r5, #2
 801051e:	68a2      	ldr	r2, [r4, #8]
 8010520:	7952      	ldrb	r2, [r2, #5]
 8010522:	f803 2b01 	strb.w	r2, [r3], #1
 8010526:	68a2      	ldr	r2, [r4, #8]
 8010528:	7912      	ldrb	r2, [r2, #4]
 801052a:	f803 2b01 	strb.w	r2, [r3], #1
 801052e:	68a2      	ldr	r2, [r4, #8]
 8010530:	78d2      	ldrb	r2, [r2, #3]
 8010532:	f803 2b01 	strb.w	r2, [r3], #1
 8010536:	68a2      	ldr	r2, [r4, #8]
 8010538:	7892      	ldrb	r2, [r2, #2]
 801053a:	f803 2b01 	strb.w	r2, [r3], #1
 801053e:	68a2      	ldr	r2, [r4, #8]
 8010540:	7852      	ldrb	r2, [r2, #1]
 8010542:	f803 2b01 	strb.w	r2, [r3], #1
 8010546:	68a2      	ldr	r2, [r4, #8]
 8010548:	7812      	ldrb	r2, [r2, #0]
 801054a:	701a      	strb	r2, [r3, #0]
 801054c:	e797      	b.n	801047e <ucdr_deserialize_endian_double+0xb6>
 801054e:	4641      	mov	r1, r8
 8010550:	4632      	mov	r2, r6
 8010552:	4628      	mov	r0, r5
 8010554:	f00b f8e9 	bl	801b72a <memcpy>
 8010558:	68a1      	ldr	r1, [r4, #8]
 801055a:	4652      	mov	r2, sl
 801055c:	19a8      	adds	r0, r5, r6
 801055e:	f00b f8e4 	bl	801b72a <memcpy>
 8010562:	e78c      	b.n	801047e <ucdr_deserialize_endian_double+0xb6>

08010564 <ucdr_check_buffer_available_for>:
 8010564:	7d83      	ldrb	r3, [r0, #22]
 8010566:	b93b      	cbnz	r3, 8010578 <ucdr_check_buffer_available_for+0x14>
 8010568:	e9d0 0301 	ldrd	r0, r3, [r0, #4]
 801056c:	4419      	add	r1, r3
 801056e:	4288      	cmp	r0, r1
 8010570:	bf34      	ite	cc
 8010572:	2000      	movcc	r0, #0
 8010574:	2001      	movcs	r0, #1
 8010576:	4770      	bx	lr
 8010578:	2000      	movs	r0, #0
 801057a:	4770      	bx	lr

0801057c <ucdr_check_final_buffer_behavior>:
 801057c:	7d83      	ldrb	r3, [r0, #22]
 801057e:	b943      	cbnz	r3, 8010592 <ucdr_check_final_buffer_behavior+0x16>
 8010580:	e9d0 2101 	ldrd	r2, r1, [r0, #4]
 8010584:	4291      	cmp	r1, r2
 8010586:	b510      	push	{r4, lr}
 8010588:	4604      	mov	r4, r0
 801058a:	d205      	bcs.n	8010598 <ucdr_check_final_buffer_behavior+0x1c>
 801058c:	2301      	movs	r3, #1
 801058e:	4618      	mov	r0, r3
 8010590:	bd10      	pop	{r4, pc}
 8010592:	2300      	movs	r3, #0
 8010594:	4618      	mov	r0, r3
 8010596:	4770      	bx	lr
 8010598:	6982      	ldr	r2, [r0, #24]
 801059a:	b13a      	cbz	r2, 80105ac <ucdr_check_final_buffer_behavior+0x30>
 801059c:	69c1      	ldr	r1, [r0, #28]
 801059e:	4790      	blx	r2
 80105a0:	f080 0301 	eor.w	r3, r0, #1
 80105a4:	b2db      	uxtb	r3, r3
 80105a6:	75a0      	strb	r0, [r4, #22]
 80105a8:	4618      	mov	r0, r3
 80105aa:	bd10      	pop	{r4, pc}
 80105ac:	2001      	movs	r0, #1
 80105ae:	75a0      	strb	r0, [r4, #22]
 80105b0:	e7fa      	b.n	80105a8 <ucdr_check_final_buffer_behavior+0x2c>
 80105b2:	bf00      	nop

080105b4 <ucdr_set_on_full_buffer_callback>:
 80105b4:	e9c0 1206 	strd	r1, r2, [r0, #24]
 80105b8:	4770      	bx	lr
 80105ba:	bf00      	nop

080105bc <ucdr_init_buffer_origin_offset_endian>:
 80105bc:	b410      	push	{r4}
 80105be:	9c01      	ldr	r4, [sp, #4]
 80105c0:	6001      	str	r1, [r0, #0]
 80105c2:	440a      	add	r2, r1
 80105c4:	6042      	str	r2, [r0, #4]
 80105c6:	190a      	adds	r2, r1, r4
 80105c8:	441c      	add	r4, r3
 80105ca:	e9c0 3403 	strd	r3, r4, [r0, #12]
 80105ce:	6082      	str	r2, [r0, #8]
 80105d0:	f89d 3008 	ldrb.w	r3, [sp, #8]
 80105d4:	7503      	strb	r3, [r0, #20]
 80105d6:	2200      	movs	r2, #0
 80105d8:	e9c0 2206 	strd	r2, r2, [r0, #24]
 80105dc:	f85d 4b04 	ldr.w	r4, [sp], #4
 80105e0:	7542      	strb	r2, [r0, #21]
 80105e2:	7582      	strb	r2, [r0, #22]
 80105e4:	4770      	bx	lr
 80105e6:	bf00      	nop

080105e8 <ucdr_init_buffer_origin_offset>:
 80105e8:	b510      	push	{r4, lr}
 80105ea:	b082      	sub	sp, #8
 80105ec:	9c04      	ldr	r4, [sp, #16]
 80105ee:	9400      	str	r4, [sp, #0]
 80105f0:	2401      	movs	r4, #1
 80105f2:	9401      	str	r4, [sp, #4]
 80105f4:	f7ff ffe2 	bl	80105bc <ucdr_init_buffer_origin_offset_endian>
 80105f8:	b002      	add	sp, #8
 80105fa:	bd10      	pop	{r4, pc}

080105fc <ucdr_init_buffer_origin>:
 80105fc:	b510      	push	{r4, lr}
 80105fe:	b082      	sub	sp, #8
 8010600:	2400      	movs	r4, #0
 8010602:	9400      	str	r4, [sp, #0]
 8010604:	f7ff fff0 	bl	80105e8 <ucdr_init_buffer_origin_offset>
 8010608:	b002      	add	sp, #8
 801060a:	bd10      	pop	{r4, pc}

0801060c <ucdr_init_buffer>:
 801060c:	2300      	movs	r3, #0
 801060e:	f7ff bff5 	b.w	80105fc <ucdr_init_buffer_origin>
 8010612:	bf00      	nop

08010614 <ucdr_alignment>:
 8010614:	fbb0 f3f1 	udiv	r3, r0, r1
 8010618:	fb03 0011 	mls	r0, r3, r1, r0
 801061c:	1a08      	subs	r0, r1, r0
 801061e:	3901      	subs	r1, #1
 8010620:	4008      	ands	r0, r1
 8010622:	4770      	bx	lr

08010624 <ucdr_buffer_alignment>:
 8010624:	7d43      	ldrb	r3, [r0, #21]
 8010626:	428b      	cmp	r3, r1
 8010628:	d208      	bcs.n	801063c <ucdr_buffer_alignment+0x18>
 801062a:	6900      	ldr	r0, [r0, #16]
 801062c:	fbb0 f3f1 	udiv	r3, r0, r1
 8010630:	fb01 0013 	mls	r0, r1, r3, r0
 8010634:	1a08      	subs	r0, r1, r0
 8010636:	3901      	subs	r1, #1
 8010638:	4008      	ands	r0, r1
 801063a:	4770      	bx	lr
 801063c:	2000      	movs	r0, #0
 801063e:	4770      	bx	lr

08010640 <ucdr_align_to>:
 8010640:	b538      	push	{r3, r4, r5, lr}
 8010642:	4604      	mov	r4, r0
 8010644:	460d      	mov	r5, r1
 8010646:	f7ff ffed 	bl	8010624 <ucdr_buffer_alignment>
 801064a:	68a3      	ldr	r3, [r4, #8]
 801064c:	6921      	ldr	r1, [r4, #16]
 801064e:	7565      	strb	r5, [r4, #21]
 8010650:	181a      	adds	r2, r3, r0
 8010652:	6863      	ldr	r3, [r4, #4]
 8010654:	4293      	cmp	r3, r2
 8010656:	4408      	add	r0, r1
 8010658:	bf28      	it	cs
 801065a:	4613      	movcs	r3, r2
 801065c:	6120      	str	r0, [r4, #16]
 801065e:	60a3      	str	r3, [r4, #8]
 8010660:	bd38      	pop	{r3, r4, r5, pc}
 8010662:	bf00      	nop

08010664 <ucdr_buffer_length>:
 8010664:	6882      	ldr	r2, [r0, #8]
 8010666:	6800      	ldr	r0, [r0, #0]
 8010668:	1a10      	subs	r0, r2, r0
 801066a:	4770      	bx	lr

0801066c <ucdr_buffer_remaining>:
 801066c:	e9d0 2001 	ldrd	r2, r0, [r0, #4]
 8010670:	1a10      	subs	r0, r2, r0
 8010672:	4770      	bx	lr

08010674 <ucdr_check_final_buffer_behavior_array>:
 8010674:	b538      	push	{r3, r4, r5, lr}
 8010676:	7d83      	ldrb	r3, [r0, #22]
 8010678:	b963      	cbnz	r3, 8010694 <ucdr_check_final_buffer_behavior_array+0x20>
 801067a:	e9d0 3201 	ldrd	r3, r2, [r0, #4]
 801067e:	429a      	cmp	r2, r3
 8010680:	4604      	mov	r4, r0
 8010682:	460d      	mov	r5, r1
 8010684:	d308      	bcc.n	8010698 <ucdr_check_final_buffer_behavior_array+0x24>
 8010686:	b139      	cbz	r1, 8010698 <ucdr_check_final_buffer_behavior_array+0x24>
 8010688:	6983      	ldr	r3, [r0, #24]
 801068a:	b163      	cbz	r3, 80106a6 <ucdr_check_final_buffer_behavior_array+0x32>
 801068c:	69c1      	ldr	r1, [r0, #28]
 801068e:	4798      	blx	r3
 8010690:	75a0      	strb	r0, [r4, #22]
 8010692:	b108      	cbz	r0, 8010698 <ucdr_check_final_buffer_behavior_array+0x24>
 8010694:	2000      	movs	r0, #0
 8010696:	bd38      	pop	{r3, r4, r5, pc}
 8010698:	4620      	mov	r0, r4
 801069a:	f7ff ffe7 	bl	801066c <ucdr_buffer_remaining>
 801069e:	42a8      	cmp	r0, r5
 80106a0:	bf28      	it	cs
 80106a2:	4628      	movcs	r0, r5
 80106a4:	bd38      	pop	{r3, r4, r5, pc}
 80106a6:	2301      	movs	r3, #1
 80106a8:	7583      	strb	r3, [r0, #22]
 80106aa:	e7f3      	b.n	8010694 <ucdr_check_final_buffer_behavior_array+0x20>

080106ac <ucdr_advance_buffer>:
 80106ac:	b538      	push	{r3, r4, r5, lr}
 80106ae:	4604      	mov	r4, r0
 80106b0:	460d      	mov	r5, r1
 80106b2:	f7ff ff57 	bl	8010564 <ucdr_check_buffer_available_for>
 80106b6:	b178      	cbz	r0, 80106d8 <ucdr_advance_buffer+0x2c>
 80106b8:	6923      	ldr	r3, [r4, #16]
 80106ba:	68a2      	ldr	r2, [r4, #8]
 80106bc:	442b      	add	r3, r5
 80106be:	6123      	str	r3, [r4, #16]
 80106c0:	2301      	movs	r3, #1
 80106c2:	442a      	add	r2, r5
 80106c4:	7563      	strb	r3, [r4, #21]
 80106c6:	60a2      	str	r2, [r4, #8]
 80106c8:	bd38      	pop	{r3, r4, r5, pc}
 80106ca:	68a2      	ldr	r2, [r4, #8]
 80106cc:	6923      	ldr	r3, [r4, #16]
 80106ce:	4402      	add	r2, r0
 80106d0:	4403      	add	r3, r0
 80106d2:	1a2d      	subs	r5, r5, r0
 80106d4:	60a2      	str	r2, [r4, #8]
 80106d6:	6123      	str	r3, [r4, #16]
 80106d8:	4629      	mov	r1, r5
 80106da:	2201      	movs	r2, #1
 80106dc:	4620      	mov	r0, r4
 80106de:	f7ff ffc9 	bl	8010674 <ucdr_check_final_buffer_behavior_array>
 80106e2:	2800      	cmp	r0, #0
 80106e4:	d1f1      	bne.n	80106ca <ucdr_advance_buffer+0x1e>
 80106e6:	2301      	movs	r3, #1
 80106e8:	7563      	strb	r3, [r4, #21]
 80106ea:	bd38      	pop	{r3, r4, r5, pc}

080106ec <ucdr_serialize_sequence_char>:
 80106ec:	b570      	push	{r4, r5, r6, lr}
 80106ee:	4615      	mov	r5, r2
 80106f0:	460e      	mov	r6, r1
 80106f2:	7d01      	ldrb	r1, [r0, #20]
 80106f4:	4604      	mov	r4, r0
 80106f6:	f7ff f8eb 	bl	800f8d0 <ucdr_serialize_endian_uint32_t>
 80106fa:	b90d      	cbnz	r5, 8010700 <ucdr_serialize_sequence_char+0x14>
 80106fc:	2001      	movs	r0, #1
 80106fe:	bd70      	pop	{r4, r5, r6, pc}
 8010700:	7d21      	ldrb	r1, [r4, #20]
 8010702:	462b      	mov	r3, r5
 8010704:	4632      	mov	r2, r6
 8010706:	4620      	mov	r0, r4
 8010708:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801070c:	f007 bf0c 	b.w	8018528 <ucdr_serialize_endian_array_char>

08010710 <ucdr_deserialize_sequence_char>:
 8010710:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010714:	461d      	mov	r5, r3
 8010716:	4616      	mov	r6, r2
 8010718:	460f      	mov	r7, r1
 801071a:	461a      	mov	r2, r3
 801071c:	7d01      	ldrb	r1, [r0, #20]
 801071e:	4604      	mov	r4, r0
 8010720:	f7ff f9fe 	bl	800fb20 <ucdr_deserialize_endian_uint32_t>
 8010724:	682b      	ldr	r3, [r5, #0]
 8010726:	429e      	cmp	r6, r3
 8010728:	bf3c      	itt	cc
 801072a:	2201      	movcc	r2, #1
 801072c:	75a2      	strbcc	r2, [r4, #22]
 801072e:	b913      	cbnz	r3, 8010736 <ucdr_deserialize_sequence_char+0x26>
 8010730:	2001      	movs	r0, #1
 8010732:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010736:	7d21      	ldrb	r1, [r4, #20]
 8010738:	463a      	mov	r2, r7
 801073a:	4620      	mov	r0, r4
 801073c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8010740:	f007 bf24 	b.w	801858c <ucdr_deserialize_endian_array_char>

08010744 <ucdr_serialize_sequence_uint8_t>:
 8010744:	b570      	push	{r4, r5, r6, lr}
 8010746:	4615      	mov	r5, r2
 8010748:	460e      	mov	r6, r1
 801074a:	7d01      	ldrb	r1, [r0, #20]
 801074c:	4604      	mov	r4, r0
 801074e:	f7ff f8bf 	bl	800f8d0 <ucdr_serialize_endian_uint32_t>
 8010752:	b90d      	cbnz	r5, 8010758 <ucdr_serialize_sequence_uint8_t+0x14>
 8010754:	2001      	movs	r0, #1
 8010756:	bd70      	pop	{r4, r5, r6, pc}
 8010758:	7d21      	ldrb	r1, [r4, #20]
 801075a:	462b      	mov	r3, r5
 801075c:	4632      	mov	r2, r6
 801075e:	4620      	mov	r0, r4
 8010760:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8010764:	f007 bf76 	b.w	8018654 <ucdr_serialize_endian_array_uint8_t>

08010768 <ucdr_deserialize_sequence_uint8_t>:
 8010768:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801076c:	461d      	mov	r5, r3
 801076e:	4616      	mov	r6, r2
 8010770:	460f      	mov	r7, r1
 8010772:	461a      	mov	r2, r3
 8010774:	7d01      	ldrb	r1, [r0, #20]
 8010776:	4604      	mov	r4, r0
 8010778:	f7ff f9d2 	bl	800fb20 <ucdr_deserialize_endian_uint32_t>
 801077c:	682b      	ldr	r3, [r5, #0]
 801077e:	429e      	cmp	r6, r3
 8010780:	bf3c      	itt	cc
 8010782:	2201      	movcc	r2, #1
 8010784:	75a2      	strbcc	r2, [r4, #22]
 8010786:	b913      	cbnz	r3, 801078e <ucdr_deserialize_sequence_uint8_t+0x26>
 8010788:	2001      	movs	r0, #1
 801078a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801078e:	7d21      	ldrb	r1, [r4, #20]
 8010790:	463a      	mov	r2, r7
 8010792:	4620      	mov	r0, r4
 8010794:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8010798:	f007 bfc0 	b.w	801871c <ucdr_deserialize_endian_array_uint8_t>

0801079c <ucdr_serialize_sequence_double>:
 801079c:	b570      	push	{r4, r5, r6, lr}
 801079e:	4615      	mov	r5, r2
 80107a0:	460e      	mov	r6, r1
 80107a2:	7d01      	ldrb	r1, [r0, #20]
 80107a4:	4604      	mov	r4, r0
 80107a6:	f7ff f893 	bl	800f8d0 <ucdr_serialize_endian_uint32_t>
 80107aa:	b90d      	cbnz	r5, 80107b0 <ucdr_serialize_sequence_double+0x14>
 80107ac:	2001      	movs	r0, #1
 80107ae:	bd70      	pop	{r4, r5, r6, pc}
 80107b0:	7d21      	ldrb	r1, [r4, #20]
 80107b2:	462b      	mov	r3, r5
 80107b4:	4632      	mov	r2, r6
 80107b6:	4620      	mov	r0, r4
 80107b8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80107bc:	f007 bfe0 	b.w	8018780 <ucdr_serialize_endian_array_double>

080107c0 <ucdr_deserialize_sequence_double>:
 80107c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80107c4:	461d      	mov	r5, r3
 80107c6:	4616      	mov	r6, r2
 80107c8:	460f      	mov	r7, r1
 80107ca:	461a      	mov	r2, r3
 80107cc:	7d01      	ldrb	r1, [r0, #20]
 80107ce:	4604      	mov	r4, r0
 80107d0:	f7ff f9a6 	bl	800fb20 <ucdr_deserialize_endian_uint32_t>
 80107d4:	682b      	ldr	r3, [r5, #0]
 80107d6:	429e      	cmp	r6, r3
 80107d8:	bf3c      	itt	cc
 80107da:	2201      	movcc	r2, #1
 80107dc:	75a2      	strbcc	r2, [r4, #22]
 80107de:	b913      	cbnz	r3, 80107e6 <ucdr_deserialize_sequence_double+0x26>
 80107e0:	2001      	movs	r0, #1
 80107e2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80107e6:	7d21      	ldrb	r1, [r4, #20]
 80107e8:	463a      	mov	r2, r7
 80107ea:	4620      	mov	r0, r4
 80107ec:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80107f0:	f008 b81a 	b.w	8018828 <ucdr_deserialize_endian_array_double>

080107f4 <uxr_buffer_delete_entity>:
 80107f4:	b510      	push	{r4, lr}
 80107f6:	2300      	movs	r3, #0
 80107f8:	b08e      	sub	sp, #56	@ 0x38
 80107fa:	e9cd 3201 	strd	r3, r2, [sp, #4]
 80107fe:	2303      	movs	r3, #3
 8010800:	9300      	str	r3, [sp, #0]
 8010802:	2204      	movs	r2, #4
 8010804:	ab06      	add	r3, sp, #24
 8010806:	4604      	mov	r4, r0
 8010808:	9103      	str	r1, [sp, #12]
 801080a:	f001 f953 	bl	8011ab4 <uxr_prepare_stream_to_write_submessage>
 801080e:	b918      	cbnz	r0, 8010818 <uxr_buffer_delete_entity+0x24>
 8010810:	4604      	mov	r4, r0
 8010812:	4620      	mov	r0, r4
 8010814:	b00e      	add	sp, #56	@ 0x38
 8010816:	bd10      	pop	{r4, pc}
 8010818:	9902      	ldr	r1, [sp, #8]
 801081a:	aa05      	add	r2, sp, #20
 801081c:	4620      	mov	r0, r4
 801081e:	f001 fa7f 	bl	8011d20 <uxr_init_base_object_request>
 8010822:	a905      	add	r1, sp, #20
 8010824:	4604      	mov	r4, r0
 8010826:	a806      	add	r0, sp, #24
 8010828:	f002 fcd0 	bl	80131cc <uxr_serialize_DELETE_Payload>
 801082c:	4620      	mov	r0, r4
 801082e:	b00e      	add	sp, #56	@ 0x38
 8010830:	bd10      	pop	{r4, pc}
 8010832:	bf00      	nop

08010834 <uxr_common_create_entity>:
 8010834:	b510      	push	{r4, lr}
 8010836:	f3c2 4c07 	ubfx	ip, r2, #16, #8
 801083a:	b08c      	sub	sp, #48	@ 0x30
 801083c:	e9cd 2102 	strd	r2, r1, [sp, #8]
 8010840:	f1bc 0f01 	cmp.w	ip, #1
 8010844:	bf0c      	ite	eq
 8010846:	f003 0201 	andeq.w	r2, r3, #1
 801084a:	2200      	movne	r2, #0
 801084c:	330e      	adds	r3, #14
 801084e:	f89d 1038 	ldrb.w	r1, [sp, #56]	@ 0x38
 8010852:	9101      	str	r1, [sp, #4]
 8010854:	441a      	add	r2, r3
 8010856:	2301      	movs	r3, #1
 8010858:	9300      	str	r3, [sp, #0]
 801085a:	9903      	ldr	r1, [sp, #12]
 801085c:	ab04      	add	r3, sp, #16
 801085e:	b292      	uxth	r2, r2
 8010860:	4604      	mov	r4, r0
 8010862:	f001 f927 	bl	8011ab4 <uxr_prepare_stream_to_write_submessage>
 8010866:	b918      	cbnz	r0, 8010870 <uxr_common_create_entity+0x3c>
 8010868:	4604      	mov	r4, r0
 801086a:	4620      	mov	r0, r4
 801086c:	b00c      	add	sp, #48	@ 0x30
 801086e:	bd10      	pop	{r4, pc}
 8010870:	9902      	ldr	r1, [sp, #8]
 8010872:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8010874:	4620      	mov	r0, r4
 8010876:	f001 fa53 	bl	8011d20 <uxr_init_base_object_request>
 801087a:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 801087c:	4604      	mov	r4, r0
 801087e:	a804      	add	r0, sp, #16
 8010880:	f002 fc00 	bl	8013084 <uxr_serialize_CREATE_Payload>
 8010884:	4620      	mov	r0, r4
 8010886:	b00c      	add	sp, #48	@ 0x30
 8010888:	bd10      	pop	{r4, pc}
 801088a:	bf00      	nop

0801088c <uxr_buffer_create_participant_bin>:
 801088c:	b570      	push	{r4, r5, r6, lr}
 801088e:	f5ad 7d16 	sub.w	sp, sp, #600	@ 0x258
 8010892:	ac11      	add	r4, sp, #68	@ 0x44
 8010894:	f8ad 3254 	strh.w	r3, [sp, #596]	@ 0x254
 8010898:	2303      	movs	r3, #3
 801089a:	e9cd 2102 	strd	r2, r1, [sp, #8]
 801089e:	7223      	strb	r3, [r4, #8]
 80108a0:	9b9a      	ldr	r3, [sp, #616]	@ 0x268
 80108a2:	f89d 626c 	ldrb.w	r6, [sp, #620]	@ 0x26c
 80108a6:	2201      	movs	r2, #1
 80108a8:	2100      	movs	r1, #0
 80108aa:	4605      	mov	r5, r0
 80108ac:	7122      	strb	r2, [r4, #4]
 80108ae:	f88d 1014 	strb.w	r1, [sp, #20]
 80108b2:	b1cb      	cbz	r3, 80108e8 <uxr_buffer_create_participant_bin+0x5c>
 80108b4:	f88d 201c 	strb.w	r2, [sp, #28]
 80108b8:	9308      	str	r3, [sp, #32]
 80108ba:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80108be:	a915      	add	r1, sp, #84	@ 0x54
 80108c0:	a809      	add	r0, sp, #36	@ 0x24
 80108c2:	f7ff fea3 	bl	801060c <ucdr_init_buffer>
 80108c6:	a905      	add	r1, sp, #20
 80108c8:	a809      	add	r0, sp, #36	@ 0x24
 80108ca:	f001 ffbd 	bl	8012848 <uxr_serialize_OBJK_DomainParticipant_Binary>
 80108ce:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80108d0:	9600      	str	r6, [sp, #0]
 80108d2:	9401      	str	r4, [sp, #4]
 80108d4:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 80108d8:	60e3      	str	r3, [r4, #12]
 80108da:	4628      	mov	r0, r5
 80108dc:	b29b      	uxth	r3, r3
 80108de:	f7ff ffa9 	bl	8010834 <uxr_common_create_entity>
 80108e2:	f50d 7d16 	add.w	sp, sp, #600	@ 0x258
 80108e6:	bd70      	pop	{r4, r5, r6, pc}
 80108e8:	f88d 301c 	strb.w	r3, [sp, #28]
 80108ec:	e7e5      	b.n	80108ba <uxr_buffer_create_participant_bin+0x2e>
 80108ee:	bf00      	nop

080108f0 <uxr_buffer_create_topic_bin>:
 80108f0:	b570      	push	{r4, r5, r6, lr}
 80108f2:	f5ad 7d18 	sub.w	sp, sp, #608	@ 0x260
 80108f6:	e9cd 3203 	strd	r3, r2, [sp, #12]
 80108fa:	9105      	str	r1, [sp, #20]
 80108fc:	4605      	mov	r5, r0
 80108fe:	a997      	add	r1, sp, #604	@ 0x25c
 8010900:	4618      	mov	r0, r3
 8010902:	2302      	movs	r3, #2
 8010904:	f89d 6278 	ldrb.w	r6, [sp, #632]	@ 0x278
 8010908:	f88d 3050 	strb.w	r3, [sp, #80]	@ 0x50
 801090c:	f000 f996 	bl	8010c3c <uxr_object_id_to_raw>
 8010910:	9b9c      	ldr	r3, [sp, #624]	@ 0x270
 8010912:	9306      	str	r3, [sp, #24]
 8010914:	9b9d      	ldr	r3, [sp, #628]	@ 0x274
 8010916:	930a      	str	r3, [sp, #40]	@ 0x28
 8010918:	2303      	movs	r3, #3
 801091a:	f88d 3054 	strb.w	r3, [sp, #84]	@ 0x54
 801091e:	2301      	movs	r3, #1
 8010920:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8010924:	f88d 3024 	strb.w	r3, [sp, #36]	@ 0x24
 8010928:	a917      	add	r1, sp, #92	@ 0x5c
 801092a:	2300      	movs	r3, #0
 801092c:	a80b      	add	r0, sp, #44	@ 0x2c
 801092e:	f88d 301c 	strb.w	r3, [sp, #28]
 8010932:	f7ff fe6b 	bl	801060c <ucdr_init_buffer>
 8010936:	a906      	add	r1, sp, #24
 8010938:	a80b      	add	r0, sp, #44	@ 0x2c
 801093a:	f001 ffa7 	bl	801288c <uxr_serialize_OBJK_Topic_Binary>
 801093e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8010940:	9316      	str	r3, [sp, #88]	@ 0x58
 8010942:	ac13      	add	r4, sp, #76	@ 0x4c
 8010944:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 8010948:	9600      	str	r6, [sp, #0]
 801094a:	9401      	str	r4, [sp, #4]
 801094c:	b29b      	uxth	r3, r3
 801094e:	4628      	mov	r0, r5
 8010950:	f7ff ff70 	bl	8010834 <uxr_common_create_entity>
 8010954:	f50d 7d18 	add.w	sp, sp, #608	@ 0x260
 8010958:	bd70      	pop	{r4, r5, r6, pc}
 801095a:	bf00      	nop

0801095c <uxr_buffer_create_publisher_bin>:
 801095c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801095e:	f2ad 4d8c 	subw	sp, sp, #1164	@ 0x48c
 8010962:	4605      	mov	r5, r0
 8010964:	9105      	str	r1, [sp, #20]
 8010966:	4618      	mov	r0, r3
 8010968:	2603      	movs	r6, #3
 801096a:	a992      	add	r1, sp, #584	@ 0x248
 801096c:	e9cd 3203 	strd	r3, r2, [sp, #12]
 8010970:	f89d 74a0 	ldrb.w	r7, [sp, #1184]	@ 0x4a0
 8010974:	f88d 603c 	strb.w	r6, [sp, #60]	@ 0x3c
 8010978:	f000 f960 	bl	8010c3c <uxr_object_id_to_raw>
 801097c:	2300      	movs	r3, #0
 801097e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8010982:	a912      	add	r1, sp, #72	@ 0x48
 8010984:	a806      	add	r0, sp, #24
 8010986:	f88d 324c 	strb.w	r3, [sp, #588]	@ 0x24c
 801098a:	f88d 3254 	strb.w	r3, [sp, #596]	@ 0x254
 801098e:	f88d 6040 	strb.w	r6, [sp, #64]	@ 0x40
 8010992:	f7ff fe3b 	bl	801060c <ucdr_init_buffer>
 8010996:	a993      	add	r1, sp, #588	@ 0x24c
 8010998:	a806      	add	r0, sp, #24
 801099a:	f002 f82b 	bl	80129f4 <uxr_serialize_OBJK_Publisher_Binary>
 801099e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80109a0:	9311      	str	r3, [sp, #68]	@ 0x44
 80109a2:	ac0e      	add	r4, sp, #56	@ 0x38
 80109a4:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 80109a8:	9700      	str	r7, [sp, #0]
 80109aa:	9401      	str	r4, [sp, #4]
 80109ac:	b29b      	uxth	r3, r3
 80109ae:	4628      	mov	r0, r5
 80109b0:	f7ff ff40 	bl	8010834 <uxr_common_create_entity>
 80109b4:	f20d 4d8c 	addw	sp, sp, #1164	@ 0x48c
 80109b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80109ba:	bf00      	nop

080109bc <uxr_buffer_create_subscriber_bin>:
 80109bc:	b570      	push	{r4, r5, r6, lr}
 80109be:	f5ad 6d91 	sub.w	sp, sp, #1160	@ 0x488
 80109c2:	e9cd 3203 	strd	r3, r2, [sp, #12]
 80109c6:	9105      	str	r1, [sp, #20]
 80109c8:	4605      	mov	r5, r0
 80109ca:	a992      	add	r1, sp, #584	@ 0x248
 80109cc:	4618      	mov	r0, r3
 80109ce:	2304      	movs	r3, #4
 80109d0:	f89d 6498 	ldrb.w	r6, [sp, #1176]	@ 0x498
 80109d4:	f88d 303c 	strb.w	r3, [sp, #60]	@ 0x3c
 80109d8:	f000 f930 	bl	8010c3c <uxr_object_id_to_raw>
 80109dc:	2300      	movs	r3, #0
 80109de:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80109e2:	f88d 324c 	strb.w	r3, [sp, #588]	@ 0x24c
 80109e6:	f88d 3254 	strb.w	r3, [sp, #596]	@ 0x254
 80109ea:	a912      	add	r1, sp, #72	@ 0x48
 80109ec:	2303      	movs	r3, #3
 80109ee:	a806      	add	r0, sp, #24
 80109f0:	f88d 3040 	strb.w	r3, [sp, #64]	@ 0x40
 80109f4:	f7ff fe0a 	bl	801060c <ucdr_init_buffer>
 80109f8:	a993      	add	r1, sp, #588	@ 0x24c
 80109fa:	a806      	add	r0, sp, #24
 80109fc:	f002 f8aa 	bl	8012b54 <uxr_serialize_OBJK_Subscriber_Binary>
 8010a00:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8010a02:	9311      	str	r3, [sp, #68]	@ 0x44
 8010a04:	ac0e      	add	r4, sp, #56	@ 0x38
 8010a06:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 8010a0a:	9600      	str	r6, [sp, #0]
 8010a0c:	9401      	str	r4, [sp, #4]
 8010a0e:	b29b      	uxth	r3, r3
 8010a10:	4628      	mov	r0, r5
 8010a12:	f7ff ff0f 	bl	8010834 <uxr_common_create_entity>
 8010a16:	f50d 6d91 	add.w	sp, sp, #1160	@ 0x488
 8010a1a:	bd70      	pop	{r4, r5, r6, pc}

08010a1c <uxr_buffer_create_datawriter_bin>:
 8010a1c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010a20:	f5ad 7d22 	sub.w	sp, sp, #648	@ 0x288
 8010a24:	ac1d      	add	r4, sp, #116	@ 0x74
 8010a26:	e9cd 3203 	strd	r3, r2, [sp, #12]
 8010a2a:	f8bd 52a8 	ldrh.w	r5, [sp, #680]	@ 0x2a8
 8010a2e:	9105      	str	r1, [sp, #20]
 8010a30:	4606      	mov	r6, r0
 8010a32:	a9a1      	add	r1, sp, #644	@ 0x284
 8010a34:	4618      	mov	r0, r3
 8010a36:	2305      	movs	r3, #5
 8010a38:	7123      	strb	r3, [r4, #4]
 8010a3a:	f89d 82ac 	ldrb.w	r8, [sp, #684]	@ 0x2ac
 8010a3e:	2703      	movs	r7, #3
 8010a40:	f000 f8fc 	bl	8010c3c <uxr_object_id_to_raw>
 8010a44:	98a8      	ldr	r0, [sp, #672]	@ 0x2a0
 8010a46:	7227      	strb	r7, [r4, #8]
 8010a48:	a90e      	add	r1, sp, #56	@ 0x38
 8010a4a:	f000 f8f7 	bl	8010c3c <uxr_object_id_to_raw>
 8010a4e:	2300      	movs	r3, #0
 8010a50:	f8ad 5044 	strh.w	r5, [sp, #68]	@ 0x44
 8010a54:	f89d 22a5 	ldrb.w	r2, [sp, #677]	@ 0x2a5
 8010a58:	f88d 3064 	strb.w	r3, [sp, #100]	@ 0x64
 8010a5c:	3d00      	subs	r5, #0
 8010a5e:	bf18      	it	ne
 8010a60:	2501      	movne	r5, #1
 8010a62:	f88d 3046 	strb.w	r3, [sp, #70]	@ 0x46
 8010a66:	f88d 304c 	strb.w	r3, [sp, #76]	@ 0x4c
 8010a6a:	f88d 3054 	strb.w	r3, [sp, #84]	@ 0x54
 8010a6e:	f8ad 3040 	strh.w	r3, [sp, #64]	@ 0x40
 8010a72:	2301      	movs	r3, #1
 8010a74:	f88d 5042 	strb.w	r5, [sp, #66]	@ 0x42
 8010a78:	f88d 303a 	strb.w	r3, [sp, #58]	@ 0x3a
 8010a7c:	bb8a      	cbnz	r2, 8010ae2 <uxr_buffer_create_datawriter_bin+0xc6>
 8010a7e:	f8ad 3040 	strh.w	r3, [sp, #64]	@ 0x40
 8010a82:	f04f 0e23 	mov.w	lr, #35	@ 0x23
 8010a86:	f04f 0c13 	mov.w	ip, #19
 8010a8a:	250b      	movs	r5, #11
 8010a8c:	2221      	movs	r2, #33	@ 0x21
 8010a8e:	2111      	movs	r1, #17
 8010a90:	2009      	movs	r0, #9
 8010a92:	f89d 32a6 	ldrb.w	r3, [sp, #678]	@ 0x2a6
 8010a96:	b923      	cbnz	r3, 8010aa2 <uxr_buffer_create_datawriter_bin+0x86>
 8010a98:	f8ad 7040 	strh.w	r7, [sp, #64]	@ 0x40
 8010a9c:	4672      	mov	r2, lr
 8010a9e:	4661      	mov	r1, ip
 8010aa0:	4628      	mov	r0, r5
 8010aa2:	f89d 32a4 	ldrb.w	r3, [sp, #676]	@ 0x2a4
 8010aa6:	2b01      	cmp	r3, #1
 8010aa8:	d025      	beq.n	8010af6 <uxr_buffer_create_datawriter_bin+0xda>
 8010aaa:	2b03      	cmp	r3, #3
 8010aac:	d029      	beq.n	8010b02 <uxr_buffer_create_datawriter_bin+0xe6>
 8010aae:	b32b      	cbz	r3, 8010afc <uxr_buffer_create_datawriter_bin+0xe0>
 8010ab0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8010ab4:	a921      	add	r1, sp, #132	@ 0x84
 8010ab6:	a806      	add	r0, sp, #24
 8010ab8:	f7ff fda8 	bl	801060c <ucdr_init_buffer>
 8010abc:	a90e      	add	r1, sp, #56	@ 0x38
 8010abe:	a806      	add	r0, sp, #24
 8010ac0:	f002 f8fa 	bl	8012cb8 <uxr_serialize_OBJK_DataWriter_Binary>
 8010ac4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8010ac6:	f8cd 8000 	str.w	r8, [sp]
 8010aca:	9401      	str	r4, [sp, #4]
 8010acc:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 8010ad0:	60e3      	str	r3, [r4, #12]
 8010ad2:	4630      	mov	r0, r6
 8010ad4:	b29b      	uxth	r3, r3
 8010ad6:	f7ff fead 	bl	8010834 <uxr_common_create_entity>
 8010ada:	f50d 7d22 	add.w	sp, sp, #648	@ 0x288
 8010ade:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010ae2:	f04f 0e22 	mov.w	lr, #34	@ 0x22
 8010ae6:	f04f 0c12 	mov.w	ip, #18
 8010aea:	250a      	movs	r5, #10
 8010aec:	2220      	movs	r2, #32
 8010aee:	2110      	movs	r1, #16
 8010af0:	2008      	movs	r0, #8
 8010af2:	2702      	movs	r7, #2
 8010af4:	e7cd      	b.n	8010a92 <uxr_buffer_create_datawriter_bin+0x76>
 8010af6:	f8ad 1040 	strh.w	r1, [sp, #64]	@ 0x40
 8010afa:	e7d9      	b.n	8010ab0 <uxr_buffer_create_datawriter_bin+0x94>
 8010afc:	f8ad 0040 	strh.w	r0, [sp, #64]	@ 0x40
 8010b00:	e7d6      	b.n	8010ab0 <uxr_buffer_create_datawriter_bin+0x94>
 8010b02:	f8ad 2040 	strh.w	r2, [sp, #64]	@ 0x40
 8010b06:	e7d3      	b.n	8010ab0 <uxr_buffer_create_datawriter_bin+0x94>

08010b08 <uxr_buffer_create_datareader_bin>:
 8010b08:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010b0c:	f5ad 7d24 	sub.w	sp, sp, #656	@ 0x290
 8010b10:	ac1f      	add	r4, sp, #124	@ 0x7c
 8010b12:	e9cd 3203 	strd	r3, r2, [sp, #12]
 8010b16:	f8bd 52b0 	ldrh.w	r5, [sp, #688]	@ 0x2b0
 8010b1a:	9105      	str	r1, [sp, #20]
 8010b1c:	4606      	mov	r6, r0
 8010b1e:	a9a3      	add	r1, sp, #652	@ 0x28c
 8010b20:	4618      	mov	r0, r3
 8010b22:	2306      	movs	r3, #6
 8010b24:	7123      	strb	r3, [r4, #4]
 8010b26:	f89d 82b4 	ldrb.w	r8, [sp, #692]	@ 0x2b4
 8010b2a:	2703      	movs	r7, #3
 8010b2c:	f000 f886 	bl	8010c3c <uxr_object_id_to_raw>
 8010b30:	98aa      	ldr	r0, [sp, #680]	@ 0x2a8
 8010b32:	7227      	strb	r7, [r4, #8]
 8010b34:	a90e      	add	r1, sp, #56	@ 0x38
 8010b36:	f000 f881 	bl	8010c3c <uxr_object_id_to_raw>
 8010b3a:	2300      	movs	r3, #0
 8010b3c:	f8ad 5044 	strh.w	r5, [sp, #68]	@ 0x44
 8010b40:	f89d 22ad 	ldrb.w	r2, [sp, #685]	@ 0x2ad
 8010b44:	f88d 3070 	strb.w	r3, [sp, #112]	@ 0x70
 8010b48:	3d00      	subs	r5, #0
 8010b4a:	bf18      	it	ne
 8010b4c:	2501      	movne	r5, #1
 8010b4e:	f88d 3064 	strb.w	r3, [sp, #100]	@ 0x64
 8010b52:	f88d 3046 	strb.w	r3, [sp, #70]	@ 0x46
 8010b56:	f88d 304c 	strb.w	r3, [sp, #76]	@ 0x4c
 8010b5a:	f88d 3054 	strb.w	r3, [sp, #84]	@ 0x54
 8010b5e:	f8ad 3040 	strh.w	r3, [sp, #64]	@ 0x40
 8010b62:	2301      	movs	r3, #1
 8010b64:	f88d 5042 	strb.w	r5, [sp, #66]	@ 0x42
 8010b68:	f88d 303a 	strb.w	r3, [sp, #58]	@ 0x3a
 8010b6c:	bb8a      	cbnz	r2, 8010bd2 <uxr_buffer_create_datareader_bin+0xca>
 8010b6e:	f8ad 3040 	strh.w	r3, [sp, #64]	@ 0x40
 8010b72:	f04f 0e23 	mov.w	lr, #35	@ 0x23
 8010b76:	f04f 0c13 	mov.w	ip, #19
 8010b7a:	250b      	movs	r5, #11
 8010b7c:	2221      	movs	r2, #33	@ 0x21
 8010b7e:	2111      	movs	r1, #17
 8010b80:	2009      	movs	r0, #9
 8010b82:	f89d 32ae 	ldrb.w	r3, [sp, #686]	@ 0x2ae
 8010b86:	b923      	cbnz	r3, 8010b92 <uxr_buffer_create_datareader_bin+0x8a>
 8010b88:	f8ad 7040 	strh.w	r7, [sp, #64]	@ 0x40
 8010b8c:	4672      	mov	r2, lr
 8010b8e:	4661      	mov	r1, ip
 8010b90:	4628      	mov	r0, r5
 8010b92:	f89d 32ac 	ldrb.w	r3, [sp, #684]	@ 0x2ac
 8010b96:	2b01      	cmp	r3, #1
 8010b98:	d025      	beq.n	8010be6 <uxr_buffer_create_datareader_bin+0xde>
 8010b9a:	2b03      	cmp	r3, #3
 8010b9c:	d029      	beq.n	8010bf2 <uxr_buffer_create_datareader_bin+0xea>
 8010b9e:	b32b      	cbz	r3, 8010bec <uxr_buffer_create_datareader_bin+0xe4>
 8010ba0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8010ba4:	a923      	add	r1, sp, #140	@ 0x8c
 8010ba6:	a806      	add	r0, sp, #24
 8010ba8:	f7ff fd30 	bl	801060c <ucdr_init_buffer>
 8010bac:	a90e      	add	r1, sp, #56	@ 0x38
 8010bae:	a806      	add	r0, sp, #24
 8010bb0:	f002 f846 	bl	8012c40 <uxr_serialize_OBJK_DataReader_Binary>
 8010bb4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8010bb6:	f8cd 8000 	str.w	r8, [sp]
 8010bba:	9401      	str	r4, [sp, #4]
 8010bbc:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 8010bc0:	60e3      	str	r3, [r4, #12]
 8010bc2:	4630      	mov	r0, r6
 8010bc4:	b29b      	uxth	r3, r3
 8010bc6:	f7ff fe35 	bl	8010834 <uxr_common_create_entity>
 8010bca:	f50d 7d24 	add.w	sp, sp, #656	@ 0x290
 8010bce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010bd2:	f04f 0e22 	mov.w	lr, #34	@ 0x22
 8010bd6:	f04f 0c12 	mov.w	ip, #18
 8010bda:	250a      	movs	r5, #10
 8010bdc:	2220      	movs	r2, #32
 8010bde:	2110      	movs	r1, #16
 8010be0:	2008      	movs	r0, #8
 8010be2:	2702      	movs	r7, #2
 8010be4:	e7cd      	b.n	8010b82 <uxr_buffer_create_datareader_bin+0x7a>
 8010be6:	f8ad 1040 	strh.w	r1, [sp, #64]	@ 0x40
 8010bea:	e7d9      	b.n	8010ba0 <uxr_buffer_create_datareader_bin+0x98>
 8010bec:	f8ad 0040 	strh.w	r0, [sp, #64]	@ 0x40
 8010bf0:	e7d6      	b.n	8010ba0 <uxr_buffer_create_datareader_bin+0x98>
 8010bf2:	f8ad 2040 	strh.w	r2, [sp, #64]	@ 0x40
 8010bf6:	e7d3      	b.n	8010ba0 <uxr_buffer_create_datareader_bin+0x98>

08010bf8 <uxr_object_id>:
 8010bf8:	b082      	sub	sp, #8
 8010bfa:	2300      	movs	r3, #0
 8010bfc:	f88d 1006 	strb.w	r1, [sp, #6]
 8010c00:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 8010c04:	f360 030f 	bfi	r3, r0, #0, #16
 8010c08:	f362 431f 	bfi	r3, r2, #16, #16
 8010c0c:	4618      	mov	r0, r3
 8010c0e:	b002      	add	sp, #8
 8010c10:	4770      	bx	lr
 8010c12:	bf00      	nop

08010c14 <uxr_object_id_from_raw>:
 8010c14:	7843      	ldrb	r3, [r0, #1]
 8010c16:	7801      	ldrb	r1, [r0, #0]
 8010c18:	b082      	sub	sp, #8
 8010c1a:	f003 020f 	and.w	r2, r3, #15
 8010c1e:	f88d 2006 	strb.w	r2, [sp, #6]
 8010c22:	091b      	lsrs	r3, r3, #4
 8010c24:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 8010c28:	eb03 1301 	add.w	r3, r3, r1, lsl #4
 8010c2c:	2000      	movs	r0, #0
 8010c2e:	f363 000f 	bfi	r0, r3, #0, #16
 8010c32:	f362 401f 	bfi	r0, r2, #16, #16
 8010c36:	b002      	add	sp, #8
 8010c38:	4770      	bx	lr
 8010c3a:	bf00      	nop

08010c3c <uxr_object_id_to_raw>:
 8010c3c:	4602      	mov	r2, r0
 8010c3e:	f3c0 4303 	ubfx	r3, r0, #16, #4
 8010c42:	b082      	sub	sp, #8
 8010c44:	f3c2 1c0b 	ubfx	ip, r2, #4, #12
 8010c48:	eb03 1002 	add.w	r0, r3, r2, lsl #4
 8010c4c:	f881 c000 	strb.w	ip, [r1]
 8010c50:	7048      	strb	r0, [r1, #1]
 8010c52:	b002      	add	sp, #8
 8010c54:	4770      	bx	lr
 8010c56:	bf00      	nop

08010c58 <on_get_fragmentation_info>:
 8010c58:	b500      	push	{lr}
 8010c5a:	b08b      	sub	sp, #44	@ 0x2c
 8010c5c:	4601      	mov	r1, r0
 8010c5e:	2204      	movs	r2, #4
 8010c60:	a802      	add	r0, sp, #8
 8010c62:	f7ff fcd3 	bl	801060c <ucdr_init_buffer>
 8010c66:	f10d 0305 	add.w	r3, sp, #5
 8010c6a:	f10d 0206 	add.w	r2, sp, #6
 8010c6e:	a901      	add	r1, sp, #4
 8010c70:	a802      	add	r0, sp, #8
 8010c72:	f001 f9d7 	bl	8012024 <uxr_read_submessage_header>
 8010c76:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8010c7a:	2b0d      	cmp	r3, #13
 8010c7c:	d003      	beq.n	8010c86 <on_get_fragmentation_info+0x2e>
 8010c7e:	2000      	movs	r0, #0
 8010c80:	b00b      	add	sp, #44	@ 0x2c
 8010c82:	f85d fb04 	ldr.w	pc, [sp], #4
 8010c86:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8010c8a:	f013 0f02 	tst.w	r3, #2
 8010c8e:	bf14      	ite	ne
 8010c90:	2002      	movne	r0, #2
 8010c92:	2001      	moveq	r0, #1
 8010c94:	b00b      	add	sp, #44	@ 0x2c
 8010c96:	f85d fb04 	ldr.w	pc, [sp], #4
 8010c9a:	bf00      	nop

08010c9c <read_submessage_get_info>:
 8010c9c:	b570      	push	{r4, r5, r6, lr}
 8010c9e:	2500      	movs	r5, #0
 8010ca0:	f5ad 7d34 	sub.w	sp, sp, #720	@ 0x2d0
 8010ca4:	4604      	mov	r4, r0
 8010ca6:	f44f 7224 	mov.w	r2, #656	@ 0x290
 8010caa:	460e      	mov	r6, r1
 8010cac:	a810      	add	r0, sp, #64	@ 0x40
 8010cae:	4629      	mov	r1, r5
 8010cb0:	e9cd 5503 	strd	r5, r5, [sp, #12]
 8010cb4:	f00a fc1a 	bl	801b4ec <memset>
 8010cb8:	a903      	add	r1, sp, #12
 8010cba:	4630      	mov	r0, r6
 8010cbc:	f002 fa72 	bl	80131a4 <uxr_deserialize_GET_INFO_Payload>
 8010cc0:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 8010cc4:	f8ad 3040 	strh.w	r3, [sp, #64]	@ 0x40
 8010cc8:	4620      	mov	r0, r4
 8010cca:	f001 f821 	bl	8011d10 <uxr_session_header_offset>
 8010cce:	462b      	mov	r3, r5
 8010cd0:	9000      	str	r0, [sp, #0]
 8010cd2:	220c      	movs	r2, #12
 8010cd4:	a905      	add	r1, sp, #20
 8010cd6:	a808      	add	r0, sp, #32
 8010cd8:	f7ff fc86 	bl	80105e8 <ucdr_init_buffer_origin_offset>
 8010cdc:	a910      	add	r1, sp, #64	@ 0x40
 8010cde:	a808      	add	r0, sp, #32
 8010ce0:	f002 fad2 	bl	8013288 <uxr_serialize_INFO_Payload>
 8010ce4:	9b08      	ldr	r3, [sp, #32]
 8010ce6:	462a      	mov	r2, r5
 8010ce8:	4629      	mov	r1, r5
 8010cea:	4620      	mov	r0, r4
 8010cec:	f000 ffba 	bl	8011c64 <uxr_stamp_session_header>
 8010cf0:	a808      	add	r0, sp, #32
 8010cf2:	f7ff fcb7 	bl	8010664 <ucdr_buffer_length>
 8010cf6:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 8010cf8:	4602      	mov	r2, r0
 8010cfa:	a905      	add	r1, sp, #20
 8010cfc:	e9d3 0400 	ldrd	r0, r4, [r3]
 8010d00:	47a0      	blx	r4
 8010d02:	f50d 7d34 	add.w	sp, sp, #720	@ 0x2d0
 8010d06:	bd70      	pop	{r4, r5, r6, pc}

08010d08 <write_submessage_acknack.isra.0>:
 8010d08:	b570      	push	{r4, r5, r6, lr}
 8010d0a:	b092      	sub	sp, #72	@ 0x48
 8010d0c:	4605      	mov	r5, r0
 8010d0e:	460e      	mov	r6, r1
 8010d10:	4614      	mov	r4, r2
 8010d12:	f000 fffd 	bl	8011d10 <uxr_session_header_offset>
 8010d16:	a905      	add	r1, sp, #20
 8010d18:	9000      	str	r0, [sp, #0]
 8010d1a:	2300      	movs	r3, #0
 8010d1c:	a80a      	add	r0, sp, #40	@ 0x28
 8010d1e:	2211      	movs	r2, #17
 8010d20:	f7ff fc62 	bl	80105e8 <ucdr_init_buffer_origin_offset>
 8010d24:	2218      	movs	r2, #24
 8010d26:	fb02 5404 	mla	r4, r2, r4, r5
 8010d2a:	2300      	movs	r3, #0
 8010d2c:	2205      	movs	r2, #5
 8010d2e:	3450      	adds	r4, #80	@ 0x50
 8010d30:	210a      	movs	r1, #10
 8010d32:	a80a      	add	r0, sp, #40	@ 0x28
 8010d34:	f001 f95c 	bl	8011ff0 <uxr_buffer_submessage_header>
 8010d38:	a903      	add	r1, sp, #12
 8010d3a:	4620      	mov	r0, r4
 8010d3c:	f008 f846 	bl	8018dcc <uxr_compute_acknack>
 8010d40:	ba40      	rev16	r0, r0
 8010d42:	f8ad 000e 	strh.w	r0, [sp, #14]
 8010d46:	a903      	add	r1, sp, #12
 8010d48:	a80a      	add	r0, sp, #40	@ 0x28
 8010d4a:	f88d 6010 	strb.w	r6, [sp, #16]
 8010d4e:	f002 fb0b 	bl	8013368 <uxr_serialize_ACKNACK_Payload>
 8010d52:	2200      	movs	r2, #0
 8010d54:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8010d56:	4611      	mov	r1, r2
 8010d58:	4628      	mov	r0, r5
 8010d5a:	f000 ff83 	bl	8011c64 <uxr_stamp_session_header>
 8010d5e:	a80a      	add	r0, sp, #40	@ 0x28
 8010d60:	f7ff fc80 	bl	8010664 <ucdr_buffer_length>
 8010d64:	6f2b      	ldr	r3, [r5, #112]	@ 0x70
 8010d66:	4602      	mov	r2, r0
 8010d68:	a905      	add	r1, sp, #20
 8010d6a:	e9d3 0400 	ldrd	r0, r4, [r3]
 8010d6e:	47a0      	blx	r4
 8010d70:	b012      	add	sp, #72	@ 0x48
 8010d72:	bd70      	pop	{r4, r5, r6, pc}
 8010d74:	0000      	movs	r0, r0
	...

08010d78 <uxr_init_session>:
 8010d78:	b510      	push	{r4, lr}
 8010d7a:	ed9f 7b0d 	vldr	d7, [pc, #52]	@ 8010db0 <uxr_init_session+0x38>
 8010d7e:	2300      	movs	r3, #0
 8010d80:	e9c0 131c 	strd	r1, r3, [r0, #112]	@ 0x70
 8010d84:	4604      	mov	r4, r0
 8010d86:	e9c0 331e 	strd	r3, r3, [r0, #120]	@ 0x78
 8010d8a:	e9c0 3320 	strd	r3, r3, [r0, #128]	@ 0x80
 8010d8e:	e9c0 3322 	strd	r3, r3, [r0, #136]	@ 0x88
 8010d92:	e9c0 3324 	strd	r3, r3, [r0, #144]	@ 0x90
 8010d96:	ed80 7b26 	vstr	d7, [r0, #152]	@ 0x98
 8010d9a:	f880 30a0 	strb.w	r3, [r0, #160]	@ 0xa0
 8010d9e:	2181      	movs	r1, #129	@ 0x81
 8010da0:	f000 fecc 	bl	8011b3c <uxr_init_session_info>
 8010da4:	f104 0008 	add.w	r0, r4, #8
 8010da8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010dac:	f001 b83c 	b.w	8011e28 <uxr_init_stream_storage>
	...

08010db8 <uxr_set_status_callback>:
 8010db8:	e9c0 1220 	strd	r1, r2, [r0, #128]	@ 0x80
 8010dbc:	4770      	bx	lr
 8010dbe:	bf00      	nop

08010dc0 <uxr_set_topic_callback>:
 8010dc0:	e9c0 1222 	strd	r1, r2, [r0, #136]	@ 0x88
 8010dc4:	4770      	bx	lr
 8010dc6:	bf00      	nop

08010dc8 <uxr_set_request_callback>:
 8010dc8:	e9c0 1229 	strd	r1, r2, [r0, #164]	@ 0xa4
 8010dcc:	4770      	bx	lr
 8010dce:	bf00      	nop

08010dd0 <uxr_set_reply_callback>:
 8010dd0:	e9c0 122b 	strd	r1, r2, [r0, #172]	@ 0xac
 8010dd4:	4770      	bx	lr
 8010dd6:	bf00      	nop

08010dd8 <uxr_create_output_best_effort_stream>:
 8010dd8:	b510      	push	{r4, lr}
 8010dda:	b084      	sub	sp, #16
 8010ddc:	e9cd 2100 	strd	r2, r1, [sp]
 8010de0:	4604      	mov	r4, r0
 8010de2:	f000 ff95 	bl	8011d10 <uxr_session_header_offset>
 8010de6:	e9dd 2100 	ldrd	r2, r1, [sp]
 8010dea:	4603      	mov	r3, r0
 8010dec:	f104 0008 	add.w	r0, r4, #8
 8010df0:	b004      	add	sp, #16
 8010df2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010df6:	f001 b861 	b.w	8011ebc <uxr_add_output_best_effort_buffer>
 8010dfa:	bf00      	nop

08010dfc <uxr_create_output_reliable_stream>:
 8010dfc:	b510      	push	{r4, lr}
 8010dfe:	b088      	sub	sp, #32
 8010e00:	e9cd 2104 	strd	r2, r1, [sp, #16]
 8010e04:	4604      	mov	r4, r0
 8010e06:	9303      	str	r3, [sp, #12]
 8010e08:	f000 ff82 	bl	8011d10 <uxr_session_header_offset>
 8010e0c:	e9dd 3203 	ldrd	r3, r2, [sp, #12]
 8010e10:	9000      	str	r0, [sp, #0]
 8010e12:	9905      	ldr	r1, [sp, #20]
 8010e14:	f104 0008 	add.w	r0, r4, #8
 8010e18:	f001 f864 	bl	8011ee4 <uxr_add_output_reliable_buffer>
 8010e1c:	2200      	movs	r2, #0
 8010e1e:	b2c3      	uxtb	r3, r0
 8010e20:	f363 0207 	bfi	r2, r3, #0, #8
 8010e24:	f3c0 2307 	ubfx	r3, r0, #8, #8
 8010e28:	f363 220f 	bfi	r2, r3, #8, #8
 8010e2c:	f3c0 4307 	ubfx	r3, r0, #16, #8
 8010e30:	f363 4217 	bfi	r2, r3, #16, #8
 8010e34:	0e03      	lsrs	r3, r0, #24
 8010e36:	f363 621f 	bfi	r2, r3, #24, #8
 8010e3a:	4610      	mov	r0, r2
 8010e3c:	b008      	add	sp, #32
 8010e3e:	bd10      	pop	{r4, pc}

08010e40 <uxr_create_input_best_effort_stream>:
 8010e40:	b082      	sub	sp, #8
 8010e42:	3008      	adds	r0, #8
 8010e44:	b002      	add	sp, #8
 8010e46:	f001 b867 	b.w	8011f18 <uxr_add_input_best_effort_buffer>
 8010e4a:	bf00      	nop

08010e4c <uxr_create_input_reliable_stream>:
 8010e4c:	b510      	push	{r4, lr}
 8010e4e:	b084      	sub	sp, #16
 8010e50:	4c0b      	ldr	r4, [pc, #44]	@ (8010e80 <uxr_create_input_reliable_stream+0x34>)
 8010e52:	9400      	str	r4, [sp, #0]
 8010e54:	3008      	adds	r0, #8
 8010e56:	f001 f875 	bl	8011f44 <uxr_add_input_reliable_buffer>
 8010e5a:	2200      	movs	r2, #0
 8010e5c:	b2c3      	uxtb	r3, r0
 8010e5e:	f363 0207 	bfi	r2, r3, #0, #8
 8010e62:	f3c0 2307 	ubfx	r3, r0, #8, #8
 8010e66:	f363 220f 	bfi	r2, r3, #8, #8
 8010e6a:	f3c0 4307 	ubfx	r3, r0, #16, #8
 8010e6e:	f363 4217 	bfi	r2, r3, #16, #8
 8010e72:	0e03      	lsrs	r3, r0, #24
 8010e74:	f363 621f 	bfi	r2, r3, #24, #8
 8010e78:	4610      	mov	r0, r2
 8010e7a:	b004      	add	sp, #16
 8010e7c:	bd10      	pop	{r4, pc}
 8010e7e:	bf00      	nop
 8010e80:	08010c59 	.word	0x08010c59

08010e84 <uxr_epoch_nanos>:
 8010e84:	b510      	push	{r4, lr}
 8010e86:	4604      	mov	r4, r0
 8010e88:	f001 f912 	bl	80120b0 <uxr_nanos>
 8010e8c:	e9d4 3226 	ldrd	r3, r2, [r4, #152]	@ 0x98
 8010e90:	1ac0      	subs	r0, r0, r3
 8010e92:	eb61 0102 	sbc.w	r1, r1, r2
 8010e96:	bd10      	pop	{r4, pc}

08010e98 <uxr_flash_output_streams>:
 8010e98:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010e9c:	7e03      	ldrb	r3, [r0, #24]
 8010e9e:	b084      	sub	sp, #16
 8010ea0:	4604      	mov	r4, r0
 8010ea2:	2b00      	cmp	r3, #0
 8010ea4:	d035      	beq.n	8010f12 <uxr_flash_output_streams+0x7a>
 8010ea6:	f04f 0900 	mov.w	r9, #0
 8010eaa:	4648      	mov	r0, r9
 8010eac:	f10d 0802 	add.w	r8, sp, #2
 8010eb0:	af03      	add	r7, sp, #12
 8010eb2:	ae02      	add	r6, sp, #8
 8010eb4:	e006      	b.n	8010ec4 <uxr_flash_output_streams+0x2c>
 8010eb6:	7e23      	ldrb	r3, [r4, #24]
 8010eb8:	f109 0901 	add.w	r9, r9, #1
 8010ebc:	fa5f f089 	uxtb.w	r0, r9
 8010ec0:	4283      	cmp	r3, r0
 8010ec2:	d926      	bls.n	8010f12 <uxr_flash_output_streams+0x7a>
 8010ec4:	2201      	movs	r2, #1
 8010ec6:	4611      	mov	r1, r2
 8010ec8:	eb04 1500 	add.w	r5, r4, r0, lsl #4
 8010ecc:	f000 ff58 	bl	8011d80 <uxr_stream_id>
 8010ed0:	3508      	adds	r5, #8
 8010ed2:	4684      	mov	ip, r0
 8010ed4:	4643      	mov	r3, r8
 8010ed6:	463a      	mov	r2, r7
 8010ed8:	4631      	mov	r1, r6
 8010eda:	4628      	mov	r0, r5
 8010edc:	f8cd c004 	str.w	ip, [sp, #4]
 8010ee0:	f007 fffa 	bl	8018ed8 <uxr_prepare_best_effort_buffer_to_send>
 8010ee4:	2800      	cmp	r0, #0
 8010ee6:	d0e6      	beq.n	8010eb6 <uxr_flash_output_streams+0x1e>
 8010ee8:	9b02      	ldr	r3, [sp, #8]
 8010eea:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 8010eee:	f89d 1004 	ldrb.w	r1, [sp, #4]
 8010ef2:	4620      	mov	r0, r4
 8010ef4:	f000 feb6 	bl	8011c64 <uxr_stamp_session_header>
 8010ef8:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 8010efa:	9a03      	ldr	r2, [sp, #12]
 8010efc:	685d      	ldr	r5, [r3, #4]
 8010efe:	6818      	ldr	r0, [r3, #0]
 8010f00:	9902      	ldr	r1, [sp, #8]
 8010f02:	47a8      	blx	r5
 8010f04:	f109 0901 	add.w	r9, r9, #1
 8010f08:	7e23      	ldrb	r3, [r4, #24]
 8010f0a:	fa5f f089 	uxtb.w	r0, r9
 8010f0e:	4283      	cmp	r3, r0
 8010f10:	d8d8      	bhi.n	8010ec4 <uxr_flash_output_streams+0x2c>
 8010f12:	f894 3048 	ldrb.w	r3, [r4, #72]	@ 0x48
 8010f16:	b38b      	cbz	r3, 8010f7c <uxr_flash_output_streams+0xe4>
 8010f18:	f04f 0900 	mov.w	r9, #0
 8010f1c:	f10d 0802 	add.w	r8, sp, #2
 8010f20:	af03      	add	r7, sp, #12
 8010f22:	ae02      	add	r6, sp, #8
 8010f24:	4648      	mov	r0, r9
 8010f26:	2201      	movs	r2, #1
 8010f28:	2102      	movs	r1, #2
 8010f2a:	eb00 0580 	add.w	r5, r0, r0, lsl #2
 8010f2e:	f000 ff27 	bl	8011d80 <uxr_stream_id>
 8010f32:	eb04 05c5 	add.w	r5, r4, r5, lsl #3
 8010f36:	3520      	adds	r5, #32
 8010f38:	9001      	str	r0, [sp, #4]
 8010f3a:	e00d      	b.n	8010f58 <uxr_flash_output_streams+0xc0>
 8010f3c:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 8010f40:	f89d 1004 	ldrb.w	r1, [sp, #4]
 8010f44:	9b02      	ldr	r3, [sp, #8]
 8010f46:	f000 fe8d 	bl	8011c64 <uxr_stamp_session_header>
 8010f4a:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 8010f4c:	9a03      	ldr	r2, [sp, #12]
 8010f4e:	f8d3 a004 	ldr.w	sl, [r3, #4]
 8010f52:	9902      	ldr	r1, [sp, #8]
 8010f54:	6818      	ldr	r0, [r3, #0]
 8010f56:	47d0      	blx	sl
 8010f58:	4643      	mov	r3, r8
 8010f5a:	463a      	mov	r2, r7
 8010f5c:	4631      	mov	r1, r6
 8010f5e:	4628      	mov	r0, r5
 8010f60:	f008 f9d8 	bl	8019314 <uxr_prepare_next_reliable_buffer_to_send>
 8010f64:	4603      	mov	r3, r0
 8010f66:	4620      	mov	r0, r4
 8010f68:	2b00      	cmp	r3, #0
 8010f6a:	d1e7      	bne.n	8010f3c <uxr_flash_output_streams+0xa4>
 8010f6c:	f894 3048 	ldrb.w	r3, [r4, #72]	@ 0x48
 8010f70:	f109 0901 	add.w	r9, r9, #1
 8010f74:	fa5f f089 	uxtb.w	r0, r9
 8010f78:	4283      	cmp	r3, r0
 8010f7a:	d8d4      	bhi.n	8010f26 <uxr_flash_output_streams+0x8e>
 8010f7c:	b004      	add	sp, #16
 8010f7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010f82:	bf00      	nop

08010f84 <read_submessage_info>:
 8010f84:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010f88:	460d      	mov	r5, r1
 8010f8a:	f5ad 7d24 	sub.w	sp, sp, #656	@ 0x290
 8010f8e:	4669      	mov	r1, sp
 8010f90:	4607      	mov	r7, r0
 8010f92:	4628      	mov	r0, r5
 8010f94:	f002 f814 	bl	8012fc0 <uxr_deserialize_BaseObjectReply>
 8010f98:	a902      	add	r1, sp, #8
 8010f9a:	4604      	mov	r4, r0
 8010f9c:	4628      	mov	r0, r5
 8010f9e:	f89d 8005 	ldrb.w	r8, [sp, #5]
 8010fa2:	f7fe f9cf 	bl	800f344 <ucdr_deserialize_bool>
 8010fa6:	f89d 3008 	ldrb.w	r3, [sp, #8]
 8010faa:	4004      	ands	r4, r0
 8010fac:	b2e4      	uxtb	r4, r4
 8010fae:	b95b      	cbnz	r3, 8010fc8 <read_submessage_info+0x44>
 8010fb0:	a987      	add	r1, sp, #540	@ 0x21c
 8010fb2:	4628      	mov	r0, r5
 8010fb4:	f7fe f9c6 	bl	800f344 <ucdr_deserialize_bool>
 8010fb8:	f89d 321c 	ldrb.w	r3, [sp, #540]	@ 0x21c
 8010fbc:	4606      	mov	r6, r0
 8010fbe:	b94b      	cbnz	r3, 8010fd4 <read_submessage_info+0x50>
 8010fc0:	f50d 7d24 	add.w	sp, sp, #656	@ 0x290
 8010fc4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010fc8:	a903      	add	r1, sp, #12
 8010fca:	4628      	mov	r0, r5
 8010fcc:	f001 fea0 	bl	8012d10 <uxr_deserialize_ObjectVariant>
 8010fd0:	4004      	ands	r4, r0
 8010fd2:	e7ed      	b.n	8010fb0 <read_submessage_info+0x2c>
 8010fd4:	a988      	add	r1, sp, #544	@ 0x220
 8010fd6:	4628      	mov	r0, r5
 8010fd8:	f7fe f9e2 	bl	800f3a0 <ucdr_deserialize_uint8_t>
 8010fdc:	4234      	tst	r4, r6
 8010fde:	d0ef      	beq.n	8010fc0 <read_submessage_info+0x3c>
 8010fe0:	2800      	cmp	r0, #0
 8010fe2:	d0ed      	beq.n	8010fc0 <read_submessage_info+0x3c>
 8010fe4:	f89d 3220 	ldrb.w	r3, [sp, #544]	@ 0x220
 8010fe8:	2b0d      	cmp	r3, #13
 8010fea:	d1e9      	bne.n	8010fc0 <read_submessage_info+0x3c>
 8010fec:	a98a      	add	r1, sp, #552	@ 0x228
 8010fee:	4628      	mov	r0, r5
 8010ff0:	f7fe ff7c 	bl	800feec <ucdr_deserialize_int16_t>
 8010ff4:	b140      	cbz	r0, 8011008 <read_submessage_info+0x84>
 8010ff6:	f9bd 3228 	ldrsh.w	r3, [sp, #552]	@ 0x228
 8010ffa:	2b00      	cmp	r3, #0
 8010ffc:	dd07      	ble.n	801100e <read_submessage_info+0x8a>
 8010ffe:	f1b8 0f00 	cmp.w	r8, #0
 8011002:	bf14      	ite	ne
 8011004:	2001      	movne	r0, #1
 8011006:	2002      	moveq	r0, #2
 8011008:	f887 00b5 	strb.w	r0, [r7, #181]	@ 0xb5
 801100c:	e7d8      	b.n	8010fc0 <read_submessage_info+0x3c>
 801100e:	2000      	movs	r0, #0
 8011010:	e7fa      	b.n	8011008 <read_submessage_info+0x84>
 8011012:	bf00      	nop

08011014 <read_submessage_list>:
 8011014:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011018:	b097      	sub	sp, #92	@ 0x5c
 801101a:	4ec1      	ldr	r6, [pc, #772]	@ (8011320 <read_submessage_list+0x30c>)
 801101c:	9209      	str	r2, [sp, #36]	@ 0x24
 801101e:	4604      	mov	r4, r0
 8011020:	460d      	mov	r5, r1
 8011022:	f04f 0801 	mov.w	r8, #1
 8011026:	f10d 032f 	add.w	r3, sp, #47	@ 0x2f
 801102a:	aa0c      	add	r2, sp, #48	@ 0x30
 801102c:	f10d 012e 	add.w	r1, sp, #46	@ 0x2e
 8011030:	4628      	mov	r0, r5
 8011032:	f000 fff7 	bl	8012024 <uxr_read_submessage_header>
 8011036:	2800      	cmp	r0, #0
 8011038:	f000 813e 	beq.w	80112b8 <read_submessage_list+0x2a4>
 801103c:	f89d 302e 	ldrb.w	r3, [sp, #46]	@ 0x2e
 8011040:	f89d 2026 	ldrb.w	r2, [sp, #38]	@ 0x26
 8011044:	3b02      	subs	r3, #2
 8011046:	2b0d      	cmp	r3, #13
 8011048:	d8ed      	bhi.n	8011026 <read_submessage_list+0x12>
 801104a:	a101      	add	r1, pc, #4	@ (adr r1, 8011050 <read_submessage_list+0x3c>)
 801104c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8011050:	080112af 	.word	0x080112af
 8011054:	08011027 	.word	0x08011027
 8011058:	0801129f 	.word	0x0801129f
 801105c:	0801123d 	.word	0x0801123d
 8011060:	08011233 	.word	0x08011233
 8011064:	08011027 	.word	0x08011027
 8011068:	08011027 	.word	0x08011027
 801106c:	08011193 	.word	0x08011193
 8011070:	08011123 	.word	0x08011123
 8011074:	080110e3 	.word	0x080110e3
 8011078:	08011027 	.word	0x08011027
 801107c:	08011027 	.word	0x08011027
 8011080:	08011027 	.word	0x08011027
 8011084:	08011089 	.word	0x08011089
 8011088:	a910      	add	r1, sp, #64	@ 0x40
 801108a:	4628      	mov	r0, r5
 801108c:	f002 f9bc 	bl	8013408 <uxr_deserialize_TIMESTAMP_REPLY_Payload>
 8011090:	f8d4 9090 	ldr.w	r9, [r4, #144]	@ 0x90
 8011094:	f1b9 0f00 	cmp.w	r9, #0
 8011098:	f000 8116 	beq.w	80112c8 <read_submessage_list+0x2b4>
 801109c:	f001 f808 	bl	80120b0 <uxr_nanos>
 80110a0:	9f15      	ldr	r7, [sp, #84]	@ 0x54
 80110a2:	4602      	mov	r2, r0
 80110a4:	460b      	mov	r3, r1
 80110a6:	9814      	ldr	r0, [sp, #80]	@ 0x50
 80110a8:	2100      	movs	r1, #0
 80110aa:	468c      	mov	ip, r1
 80110ac:	fbc0 7c06 	smlal	r7, ip, r0, r6
 80110b0:	e9cd 7c04 	strd	r7, ip, [sp, #16]
 80110b4:	9810      	ldr	r0, [sp, #64]	@ 0x40
 80110b6:	9f11      	ldr	r7, [sp, #68]	@ 0x44
 80110b8:	468c      	mov	ip, r1
 80110ba:	fbc0 7c06 	smlal	r7, ip, r0, r6
 80110be:	46e2      	mov	sl, ip
 80110c0:	46bc      	mov	ip, r7
 80110c2:	e9dd 0712 	ldrd	r0, r7, [sp, #72]	@ 0x48
 80110c6:	fbc0 7106 	smlal	r7, r1, r0, r6
 80110ca:	e9cd ca02 	strd	ip, sl, [sp, #8]
 80110ce:	e9cd 7100 	strd	r7, r1, [sp]
 80110d2:	f8d4 1094 	ldr.w	r1, [r4, #148]	@ 0x94
 80110d6:	9106      	str	r1, [sp, #24]
 80110d8:	4620      	mov	r0, r4
 80110da:	47c8      	blx	r9
 80110dc:	f884 80a0 	strb.w	r8, [r4, #160]	@ 0xa0
 80110e0:	e7a1      	b.n	8011026 <read_submessage_list+0x12>
 80110e2:	a910      	add	r1, sp, #64	@ 0x40
 80110e4:	4628      	mov	r0, r5
 80110e6:	f002 f97d 	bl	80133e4 <uxr_deserialize_HEARTBEAT_Payload>
 80110ea:	2100      	movs	r1, #0
 80110ec:	f89d 0044 	ldrb.w	r0, [sp, #68]	@ 0x44
 80110f0:	f000 fe70 	bl	8011dd4 <uxr_stream_id_from_raw>
 80110f4:	f3c0 2707 	ubfx	r7, r0, #8, #8
 80110f8:	900f      	str	r0, [sp, #60]	@ 0x3c
 80110fa:	4639      	mov	r1, r7
 80110fc:	f104 0008 	add.w	r0, r4, #8
 8011100:	f000 ff56 	bl	8011fb0 <uxr_get_input_reliable_stream>
 8011104:	2800      	cmp	r0, #0
 8011106:	d08e      	beq.n	8011026 <read_submessage_list+0x12>
 8011108:	f8bd 1040 	ldrh.w	r1, [sp, #64]	@ 0x40
 801110c:	f8bd 2042 	ldrh.w	r2, [sp, #66]	@ 0x42
 8011110:	f007 fe50 	bl	8018db4 <uxr_process_heartbeat>
 8011114:	f89d 103c 	ldrb.w	r1, [sp, #60]	@ 0x3c
 8011118:	463a      	mov	r2, r7
 801111a:	4620      	mov	r0, r4
 801111c:	f7ff fdf4 	bl	8010d08 <write_submessage_acknack.isra.0>
 8011120:	e781      	b.n	8011026 <read_submessage_list+0x12>
 8011122:	a910      	add	r1, sp, #64	@ 0x40
 8011124:	4628      	mov	r0, r5
 8011126:	f002 f935 	bl	8013394 <uxr_deserialize_ACKNACK_Payload>
 801112a:	2100      	movs	r1, #0
 801112c:	f89d 0044 	ldrb.w	r0, [sp, #68]	@ 0x44
 8011130:	f000 fe50 	bl	8011dd4 <uxr_stream_id_from_raw>
 8011134:	900d      	str	r0, [sp, #52]	@ 0x34
 8011136:	f3c0 2107 	ubfx	r1, r0, #8, #8
 801113a:	f104 0008 	add.w	r0, r4, #8
 801113e:	f000 ff23 	bl	8011f88 <uxr_get_output_reliable_stream>
 8011142:	4607      	mov	r7, r0
 8011144:	2800      	cmp	r0, #0
 8011146:	f43f af6e 	beq.w	8011026 <read_submessage_list+0x12>
 801114a:	f89d 3042 	ldrb.w	r3, [sp, #66]	@ 0x42
 801114e:	f89d 1043 	ldrb.w	r1, [sp, #67]	@ 0x43
 8011152:	f8bd 2040 	ldrh.w	r2, [sp, #64]	@ 0x40
 8011156:	eb01 2103 	add.w	r1, r1, r3, lsl #8
 801115a:	b289      	uxth	r1, r1
 801115c:	f008 f984 	bl	8019468 <uxr_process_acknack>
 8011160:	4638      	mov	r0, r7
 8011162:	f008 f941 	bl	80193e8 <uxr_begin_output_nack_buffer_it>
 8011166:	f10d 0a38 	add.w	sl, sp, #56	@ 0x38
 801116a:	f8ad 0032 	strh.w	r0, [sp, #50]	@ 0x32
 801116e:	e006      	b.n	801117e <read_submessage_list+0x16a>
 8011170:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 8011172:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8011174:	f8d3 9004 	ldr.w	r9, [r3, #4]
 8011178:	990e      	ldr	r1, [sp, #56]	@ 0x38
 801117a:	6818      	ldr	r0, [r3, #0]
 801117c:	47c8      	blx	r9
 801117e:	f10d 0332 	add.w	r3, sp, #50	@ 0x32
 8011182:	aa0f      	add	r2, sp, #60	@ 0x3c
 8011184:	4651      	mov	r1, sl
 8011186:	4638      	mov	r0, r7
 8011188:	f008 f930 	bl	80193ec <uxr_next_reliable_nack_buffer_to_send>
 801118c:	2800      	cmp	r0, #0
 801118e:	d1ef      	bne.n	8011170 <read_submessage_list+0x15c>
 8011190:	e749      	b.n	8011026 <read_submessage_list+0x12>
 8011192:	f89d 3025 	ldrb.w	r3, [sp, #37]	@ 0x25
 8011196:	f88d 3035 	strb.w	r3, [sp, #53]	@ 0x35
 801119a:	f10d 0a38 	add.w	sl, sp, #56	@ 0x38
 801119e:	f89d 3027 	ldrb.w	r3, [sp, #39]	@ 0x27
 80111a2:	f88d 3037 	strb.w	r3, [sp, #55]	@ 0x37
 80111a6:	4651      	mov	r1, sl
 80111a8:	f89d 3024 	ldrb.w	r3, [sp, #36]	@ 0x24
 80111ac:	f8bd 7030 	ldrh.w	r7, [sp, #48]	@ 0x30
 80111b0:	f89d 902f 	ldrb.w	r9, [sp, #47]	@ 0x2f
 80111b4:	f88d 2036 	strb.w	r2, [sp, #54]	@ 0x36
 80111b8:	4628      	mov	r0, r5
 80111ba:	f88d 3034 	strb.w	r3, [sp, #52]	@ 0x34
 80111be:	f001 fe49 	bl	8012e54 <uxr_deserialize_BaseObjectRequest>
 80111c2:	4650      	mov	r0, sl
 80111c4:	a90f      	add	r1, sp, #60	@ 0x3c
 80111c6:	f10d 0232 	add.w	r2, sp, #50	@ 0x32
 80111ca:	f000 fdc7 	bl	8011d5c <uxr_parse_base_object_request>
 80111ce:	f8d4 b080 	ldr.w	fp, [r4, #128]	@ 0x80
 80111d2:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 80111d4:	f8bd a032 	ldrh.w	sl, [sp, #50]	@ 0x32
 80111d8:	9110      	str	r1, [sp, #64]	@ 0x40
 80111da:	3f04      	subs	r7, #4
 80111dc:	f009 090e 	and.w	r9, r9, #14
 80111e0:	b2bf      	uxth	r7, r7
 80111e2:	f1bb 0f00 	cmp.w	fp, #0
 80111e6:	d006      	beq.n	80111f6 <read_submessage_list+0x1e2>
 80111e8:	f8d4 3084 	ldr.w	r3, [r4, #132]	@ 0x84
 80111ec:	9300      	str	r3, [sp, #0]
 80111ee:	4652      	mov	r2, sl
 80111f0:	2300      	movs	r3, #0
 80111f2:	4620      	mov	r0, r4
 80111f4:	47d8      	blx	fp
 80111f6:	6fe2      	ldr	r2, [r4, #124]	@ 0x7c
 80111f8:	b16a      	cbz	r2, 8011216 <read_submessage_list+0x202>
 80111fa:	6f60      	ldr	r0, [r4, #116]	@ 0x74
 80111fc:	2100      	movs	r1, #0
 80111fe:	3802      	subs	r0, #2
 8011200:	e002      	b.n	8011208 <read_submessage_list+0x1f4>
 8011202:	3101      	adds	r1, #1
 8011204:	4291      	cmp	r1, r2
 8011206:	d006      	beq.n	8011216 <read_submessage_list+0x202>
 8011208:	f830 3f02 	ldrh.w	r3, [r0, #2]!
 801120c:	4553      	cmp	r3, sl
 801120e:	d1f8      	bne.n	8011202 <read_submessage_list+0x1ee>
 8011210:	6fa3      	ldr	r3, [r4, #120]	@ 0x78
 8011212:	2200      	movs	r2, #0
 8011214:	545a      	strb	r2, [r3, r1]
 8011216:	f8bd 1032 	ldrh.w	r1, [sp, #50]	@ 0x32
 801121a:	9102      	str	r1, [sp, #8]
 801121c:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 801121e:	9101      	str	r1, [sp, #4]
 8011220:	990d      	ldr	r1, [sp, #52]	@ 0x34
 8011222:	9100      	str	r1, [sp, #0]
 8011224:	464b      	mov	r3, r9
 8011226:	463a      	mov	r2, r7
 8011228:	4629      	mov	r1, r5
 801122a:	4620      	mov	r0, r4
 801122c:	f008 f9da 	bl	80195e4 <read_submessage_format>
 8011230:	e6f9      	b.n	8011026 <read_submessage_list+0x12>
 8011232:	4629      	mov	r1, r5
 8011234:	4620      	mov	r0, r4
 8011236:	f7ff fea5 	bl	8010f84 <read_submessage_info>
 801123a:	e6f4      	b.n	8011026 <read_submessage_list+0x12>
 801123c:	2a00      	cmp	r2, #0
 801123e:	d03e      	beq.n	80112be <read_submessage_list+0x2aa>
 8011240:	a910      	add	r1, sp, #64	@ 0x40
 8011242:	4628      	mov	r0, r5
 8011244:	f002 f802 	bl	801324c <uxr_deserialize_STATUS_Payload>
 8011248:	a90e      	add	r1, sp, #56	@ 0x38
 801124a:	aa0d      	add	r2, sp, #52	@ 0x34
 801124c:	a810      	add	r0, sp, #64	@ 0x40
 801124e:	f000 fd85 	bl	8011d5c <uxr_parse_base_object_request>
 8011252:	f8d4 a080 	ldr.w	sl, [r4, #128]	@ 0x80
 8011256:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8011258:	f89d 9044 	ldrb.w	r9, [sp, #68]	@ 0x44
 801125c:	f8bd 7034 	ldrh.w	r7, [sp, #52]	@ 0x34
 8011260:	910f      	str	r1, [sp, #60]	@ 0x3c
 8011262:	f1ba 0f00 	cmp.w	sl, #0
 8011266:	d006      	beq.n	8011276 <read_submessage_list+0x262>
 8011268:	f8d4 3084 	ldr.w	r3, [r4, #132]	@ 0x84
 801126c:	9300      	str	r3, [sp, #0]
 801126e:	463a      	mov	r2, r7
 8011270:	464b      	mov	r3, r9
 8011272:	4620      	mov	r0, r4
 8011274:	47d0      	blx	sl
 8011276:	6fe2      	ldr	r2, [r4, #124]	@ 0x7c
 8011278:	2a00      	cmp	r2, #0
 801127a:	f43f aed4 	beq.w	8011026 <read_submessage_list+0x12>
 801127e:	6f60      	ldr	r0, [r4, #116]	@ 0x74
 8011280:	2100      	movs	r1, #0
 8011282:	3802      	subs	r0, #2
 8011284:	e003      	b.n	801128e <read_submessage_list+0x27a>
 8011286:	3101      	adds	r1, #1
 8011288:	4291      	cmp	r1, r2
 801128a:	f43f aecc 	beq.w	8011026 <read_submessage_list+0x12>
 801128e:	f830 3f02 	ldrh.w	r3, [r0, #2]!
 8011292:	42bb      	cmp	r3, r7
 8011294:	d1f7      	bne.n	8011286 <read_submessage_list+0x272>
 8011296:	6fa3      	ldr	r3, [r4, #120]	@ 0x78
 8011298:	f803 9001 	strb.w	r9, [r3, r1]
 801129c:	e6c3      	b.n	8011026 <read_submessage_list+0x12>
 801129e:	2a00      	cmp	r2, #0
 80112a0:	f47f aec1 	bne.w	8011026 <read_submessage_list+0x12>
 80112a4:	4629      	mov	r1, r5
 80112a6:	4620      	mov	r0, r4
 80112a8:	f000 fc9e 	bl	8011be8 <uxr_read_create_session_status>
 80112ac:	e6bb      	b.n	8011026 <read_submessage_list+0x12>
 80112ae:	4629      	mov	r1, r5
 80112b0:	4620      	mov	r0, r4
 80112b2:	f7ff fcf3 	bl	8010c9c <read_submessage_get_info>
 80112b6:	e6b6      	b.n	8011026 <read_submessage_list+0x12>
 80112b8:	b017      	add	sp, #92	@ 0x5c
 80112ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80112be:	4629      	mov	r1, r5
 80112c0:	4620      	mov	r0, r4
 80112c2:	f000 fc9d 	bl	8011c00 <uxr_read_delete_session_status>
 80112c6:	e6ae      	b.n	8011026 <read_submessage_list+0x12>
 80112c8:	f000 fef2 	bl	80120b0 <uxr_nanos>
 80112cc:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 80112ce:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 80112d0:	464f      	mov	r7, r9
 80112d2:	fbc3 2706 	smlal	r2, r7, r3, r6
 80112d6:	1812      	adds	r2, r2, r0
 80112d8:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 80112da:	9813      	ldr	r0, [sp, #76]	@ 0x4c
 80112dc:	eb47 0101 	adc.w	r1, r7, r1
 80112e0:	464f      	mov	r7, r9
 80112e2:	fbc3 0706 	smlal	r0, r7, r3, r6
 80112e6:	463b      	mov	r3, r7
 80112e8:	4684      	mov	ip, r0
 80112ea:	e9dd 7010 	ldrd	r7, r0, [sp, #64]	@ 0x40
 80112ee:	fbc7 0906 	smlal	r0, r9, r7, r6
 80112f2:	eb1c 0c00 	adds.w	ip, ip, r0
 80112f6:	464f      	mov	r7, r9
 80112f8:	eb43 0307 	adc.w	r3, r3, r7
 80112fc:	ebb2 0c0c 	subs.w	ip, r2, ip
 8011300:	eb61 0303 	sbc.w	r3, r1, r3
 8011304:	0fda      	lsrs	r2, r3, #31
 8011306:	eb12 020c 	adds.w	r2, r2, ip
 801130a:	f143 0300 	adc.w	r3, r3, #0
 801130e:	0852      	lsrs	r2, r2, #1
 8011310:	ea42 72c3 	orr.w	r2, r2, r3, lsl #31
 8011314:	105b      	asrs	r3, r3, #1
 8011316:	f8c4 2098 	str.w	r2, [r4, #152]	@ 0x98
 801131a:	f8c4 309c 	str.w	r3, [r4, #156]	@ 0x9c
 801131e:	e6dd      	b.n	80110dc <read_submessage_list+0xc8>
 8011320:	3b9aca00 	.word	0x3b9aca00

08011324 <listen_message_reliably>:
 8011324:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011328:	1e0b      	subs	r3, r1, #0
 801132a:	b09d      	sub	sp, #116	@ 0x74
 801132c:	bfb8      	it	lt
 801132e:	f06f 4300 	mvnlt.w	r3, #2147483648	@ 0x80000000
 8011332:	4680      	mov	r8, r0
 8011334:	9305      	str	r3, [sp, #20]
 8011336:	f000 fea1 	bl	801207c <uxr_millis>
 801133a:	f898 2048 	ldrb.w	r2, [r8, #72]	@ 0x48
 801133e:	4681      	mov	r9, r0
 8011340:	2a00      	cmp	r2, #0
 8011342:	f000 80a1 	beq.w	8011488 <listen_message_reliably+0x164>
 8011346:	2600      	movs	r6, #0
 8011348:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 801134c:	f04f 3bff 	mov.w	fp, #4294967295	@ 0xffffffff
 8011350:	9303      	str	r3, [sp, #12]
 8011352:	4630      	mov	r0, r6
 8011354:	460f      	mov	r7, r1
 8011356:	e00f      	b.n	8011378 <listen_message_reliably+0x54>
 8011358:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 801135c:	9903      	ldr	r1, [sp, #12]
 801135e:	455a      	cmp	r2, fp
 8011360:	f106 0601 	add.w	r6, r6, #1
 8011364:	eb73 0101 	sbcs.w	r1, r3, r1
 8011368:	b2f0      	uxtb	r0, r6
 801136a:	da01      	bge.n	8011370 <listen_message_reliably+0x4c>
 801136c:	4693      	mov	fp, r2
 801136e:	9303      	str	r3, [sp, #12]
 8011370:	f898 3048 	ldrb.w	r3, [r8, #72]	@ 0x48
 8011374:	4283      	cmp	r3, r0
 8011376:	d960      	bls.n	801143a <listen_message_reliably+0x116>
 8011378:	eb00 0480 	add.w	r4, r0, r0, lsl #2
 801137c:	2102      	movs	r1, #2
 801137e:	2201      	movs	r2, #1
 8011380:	f000 fcfe 	bl	8011d80 <uxr_stream_id>
 8011384:	00e4      	lsls	r4, r4, #3
 8011386:	f104 0520 	add.w	r5, r4, #32
 801138a:	4445      	add	r5, r8
 801138c:	4601      	mov	r1, r0
 801138e:	463b      	mov	r3, r7
 8011390:	464a      	mov	r2, r9
 8011392:	4628      	mov	r0, r5
 8011394:	9109      	str	r1, [sp, #36]	@ 0x24
 8011396:	f007 fffd 	bl	8019394 <uxr_update_output_stream_heartbeat_timestamp>
 801139a:	eb08 0304 	add.w	r3, r8, r4
 801139e:	2800      	cmp	r0, #0
 80113a0:	d0da      	beq.n	8011358 <listen_message_reliably+0x34>
 80113a2:	f89d 3024 	ldrb.w	r3, [sp, #36]	@ 0x24
 80113a6:	f89d 5025 	ldrb.w	r5, [sp, #37]	@ 0x25
 80113aa:	9304      	str	r3, [sp, #16]
 80113ac:	4640      	mov	r0, r8
 80113ae:	f000 fcaf 	bl	8011d10 <uxr_session_header_offset>
 80113b2:	3501      	adds	r5, #1
 80113b4:	f10d 0a50 	add.w	sl, sp, #80	@ 0x50
 80113b8:	eb05 0585 	add.w	r5, r5, r5, lsl #2
 80113bc:	eb08 05c5 	add.w	r5, r8, r5, lsl #3
 80113c0:	2300      	movs	r3, #0
 80113c2:	2211      	movs	r2, #17
 80113c4:	9000      	str	r0, [sp, #0]
 80113c6:	a90c      	add	r1, sp, #48	@ 0x30
 80113c8:	4650      	mov	r0, sl
 80113ca:	f7ff f90d 	bl	80105e8 <ucdr_init_buffer_origin_offset>
 80113ce:	2300      	movs	r3, #0
 80113d0:	2205      	movs	r2, #5
 80113d2:	210b      	movs	r1, #11
 80113d4:	4650      	mov	r0, sl
 80113d6:	f000 fe0b 	bl	8011ff0 <uxr_buffer_submessage_header>
 80113da:	8968      	ldrh	r0, [r5, #10]
 80113dc:	2101      	movs	r1, #1
 80113de:	f008 f9cb 	bl	8019778 <uxr_seq_num_add>
 80113e2:	892b      	ldrh	r3, [r5, #8]
 80113e4:	f8ad 302a 	strh.w	r3, [sp, #42]	@ 0x2a
 80113e8:	4602      	mov	r2, r0
 80113ea:	9b04      	ldr	r3, [sp, #16]
 80113ec:	f8ad 2028 	strh.w	r2, [sp, #40]	@ 0x28
 80113f0:	a90a      	add	r1, sp, #40	@ 0x28
 80113f2:	4650      	mov	r0, sl
 80113f4:	f88d 302c 	strb.w	r3, [sp, #44]	@ 0x2c
 80113f8:	f001 ffe0 	bl	80133bc <uxr_serialize_HEARTBEAT_Payload>
 80113fc:	2200      	movs	r2, #0
 80113fe:	4611      	mov	r1, r2
 8011400:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8011402:	4640      	mov	r0, r8
 8011404:	f000 fc2e 	bl	8011c64 <uxr_stamp_session_header>
 8011408:	4650      	mov	r0, sl
 801140a:	f7ff f92b 	bl	8010664 <ucdr_buffer_length>
 801140e:	f8d8 3070 	ldr.w	r3, [r8, #112]	@ 0x70
 8011412:	4602      	mov	r2, r0
 8011414:	a90c      	add	r1, sp, #48	@ 0x30
 8011416:	e9d3 0500 	ldrd	r0, r5, [r3]
 801141a:	4444      	add	r4, r8
 801141c:	47a8      	blx	r5
 801141e:	e9d4 230e 	ldrd	r2, r3, [r4, #56]	@ 0x38
 8011422:	9903      	ldr	r1, [sp, #12]
 8011424:	455a      	cmp	r2, fp
 8011426:	f106 0601 	add.w	r6, r6, #1
 801142a:	eb73 0101 	sbcs.w	r1, r3, r1
 801142e:	b2f0      	uxtb	r0, r6
 8011430:	db9c      	blt.n	801136c <listen_message_reliably+0x48>
 8011432:	f898 3048 	ldrb.w	r3, [r8, #72]	@ 0x48
 8011436:	4283      	cmp	r3, r0
 8011438:	d89e      	bhi.n	8011378 <listen_message_reliably+0x54>
 801143a:	9a03      	ldr	r2, [sp, #12]
 801143c:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 8011440:	429a      	cmp	r2, r3
 8011442:	bf08      	it	eq
 8011444:	f1bb 3fff 	cmpeq.w	fp, #4294967295	@ 0xffffffff
 8011448:	d01e      	beq.n	8011488 <listen_message_reliably+0x164>
 801144a:	ebab 0309 	sub.w	r3, fp, r9
 801144e:	9905      	ldr	r1, [sp, #20]
 8011450:	f8d8 2070 	ldr.w	r2, [r8, #112]	@ 0x70
 8011454:	2b00      	cmp	r3, #0
 8011456:	bf08      	it	eq
 8011458:	2301      	moveq	r3, #1
 801145a:	4299      	cmp	r1, r3
 801145c:	bfa8      	it	ge
 801145e:	4619      	movge	r1, r3
 8011460:	6894      	ldr	r4, [r2, #8]
 8011462:	6810      	ldr	r0, [r2, #0]
 8011464:	4689      	mov	r9, r1
 8011466:	460b      	mov	r3, r1
 8011468:	aa08      	add	r2, sp, #32
 801146a:	a907      	add	r1, sp, #28
 801146c:	47a0      	blx	r4
 801146e:	b968      	cbnz	r0, 801148c <listen_message_reliably+0x168>
 8011470:	9b05      	ldr	r3, [sp, #20]
 8011472:	eba3 0309 	sub.w	r3, r3, r9
 8011476:	2b00      	cmp	r3, #0
 8011478:	9305      	str	r3, [sp, #20]
 801147a:	f73f af5c 	bgt.w	8011336 <listen_message_reliably+0x12>
 801147e:	4604      	mov	r4, r0
 8011480:	4620      	mov	r0, r4
 8011482:	b01d      	add	sp, #116	@ 0x74
 8011484:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011488:	9b05      	ldr	r3, [sp, #20]
 801148a:	e7e0      	b.n	801144e <listen_message_reliably+0x12a>
 801148c:	e9dd 1207 	ldrd	r1, r2, [sp, #28]
 8011490:	4604      	mov	r4, r0
 8011492:	a80c      	add	r0, sp, #48	@ 0x30
 8011494:	f7ff f8ba 	bl	801060c <ucdr_init_buffer>
 8011498:	2500      	movs	r5, #0
 801149a:	f10d 031a 	add.w	r3, sp, #26
 801149e:	aa06      	add	r2, sp, #24
 80114a0:	a90c      	add	r1, sp, #48	@ 0x30
 80114a2:	4640      	mov	r0, r8
 80114a4:	f88d 5018 	strb.w	r5, [sp, #24]
 80114a8:	f000 fbf0 	bl	8011c8c <uxr_read_session_header>
 80114ac:	b918      	cbnz	r0, 80114b6 <listen_message_reliably+0x192>
 80114ae:	4620      	mov	r0, r4
 80114b0:	b01d      	add	sp, #116	@ 0x74
 80114b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80114b6:	4629      	mov	r1, r5
 80114b8:	f89d 0018 	ldrb.w	r0, [sp, #24]
 80114bc:	f000 fc8a 	bl	8011dd4 <uxr_stream_id_from_raw>
 80114c0:	f3c0 4507 	ubfx	r5, r0, #16, #8
 80114c4:	2d01      	cmp	r5, #1
 80114c6:	e9cd 0009 	strd	r0, r0, [sp, #36]	@ 0x24
 80114ca:	f8bd a01a 	ldrh.w	sl, [sp, #26]
 80114ce:	f3c0 2607 	ubfx	r6, r0, #8, #8
 80114d2:	d04b      	beq.n	801156c <listen_message_reliably+0x248>
 80114d4:	2d02      	cmp	r5, #2
 80114d6:	d00f      	beq.n	80114f8 <listen_message_reliably+0x1d4>
 80114d8:	2d00      	cmp	r5, #0
 80114da:	d1e8      	bne.n	80114ae <listen_message_reliably+0x18a>
 80114dc:	4629      	mov	r1, r5
 80114de:	4628      	mov	r0, r5
 80114e0:	f000 fc78 	bl	8011dd4 <uxr_stream_id_from_raw>
 80114e4:	a90c      	add	r1, sp, #48	@ 0x30
 80114e6:	4602      	mov	r2, r0
 80114e8:	4640      	mov	r0, r8
 80114ea:	920a      	str	r2, [sp, #40]	@ 0x28
 80114ec:	f7ff fd92 	bl	8011014 <read_submessage_list>
 80114f0:	4620      	mov	r0, r4
 80114f2:	b01d      	add	sp, #116	@ 0x74
 80114f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80114f8:	4631      	mov	r1, r6
 80114fa:	f108 0008 	add.w	r0, r8, #8
 80114fe:	f89d 9024 	ldrb.w	r9, [sp, #36]	@ 0x24
 8011502:	f000 fd55 	bl	8011fb0 <uxr_get_input_reliable_stream>
 8011506:	4607      	mov	r7, r0
 8011508:	b338      	cbz	r0, 801155a <listen_message_reliably+0x236>
 801150a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801150c:	9203      	str	r2, [sp, #12]
 801150e:	a80c      	add	r0, sp, #48	@ 0x30
 8011510:	f7ff f8ac 	bl	801066c <ucdr_buffer_remaining>
 8011514:	4603      	mov	r3, r0
 8011516:	f10d 0019 	add.w	r0, sp, #25
 801151a:	9000      	str	r0, [sp, #0]
 801151c:	9a03      	ldr	r2, [sp, #12]
 801151e:	4651      	mov	r1, sl
 8011520:	4638      	mov	r0, r7
 8011522:	f007 fb4d 	bl	8018bc0 <uxr_receive_reliable_message>
 8011526:	b1c0      	cbz	r0, 801155a <listen_message_reliably+0x236>
 8011528:	f89d 3019 	ldrb.w	r3, [sp, #25]
 801152c:	b393      	cbz	r3, 8011594 <listen_message_reliably+0x270>
 801152e:	ad14      	add	r5, sp, #80	@ 0x50
 8011530:	f04f 0a02 	mov.w	sl, #2
 8011534:	e00a      	b.n	801154c <listen_message_reliably+0x228>
 8011536:	f88d 9028 	strb.w	r9, [sp, #40]	@ 0x28
 801153a:	f88d 6029 	strb.w	r6, [sp, #41]	@ 0x29
 801153e:	f88d a02a 	strb.w	sl, [sp, #42]	@ 0x2a
 8011542:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8011544:	4629      	mov	r1, r5
 8011546:	4640      	mov	r0, r8
 8011548:	f7ff fd64 	bl	8011014 <read_submessage_list>
 801154c:	2204      	movs	r2, #4
 801154e:	4629      	mov	r1, r5
 8011550:	4638      	mov	r0, r7
 8011552:	f007 fbb5 	bl	8018cc0 <uxr_next_input_reliable_buffer_available>
 8011556:	2800      	cmp	r0, #0
 8011558:	d1ed      	bne.n	8011536 <listen_message_reliably+0x212>
 801155a:	4640      	mov	r0, r8
 801155c:	4632      	mov	r2, r6
 801155e:	4649      	mov	r1, r9
 8011560:	f7ff fbd2 	bl	8010d08 <write_submessage_acknack.isra.0>
 8011564:	4620      	mov	r0, r4
 8011566:	b01d      	add	sp, #116	@ 0x74
 8011568:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801156c:	4631      	mov	r1, r6
 801156e:	f108 0008 	add.w	r0, r8, #8
 8011572:	f000 fd13 	bl	8011f9c <uxr_get_input_best_effort_stream>
 8011576:	2800      	cmp	r0, #0
 8011578:	d099      	beq.n	80114ae <listen_message_reliably+0x18a>
 801157a:	4651      	mov	r1, sl
 801157c:	f007 fa8c 	bl	8018a98 <uxr_receive_best_effort_message>
 8011580:	2800      	cmp	r0, #0
 8011582:	d094      	beq.n	80114ae <listen_message_reliably+0x18a>
 8011584:	f88d 502a 	strb.w	r5, [sp, #42]	@ 0x2a
 8011588:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801158a:	a90c      	add	r1, sp, #48	@ 0x30
 801158c:	4640      	mov	r0, r8
 801158e:	f7ff fd41 	bl	8011014 <read_submessage_list>
 8011592:	e78c      	b.n	80114ae <listen_message_reliably+0x18a>
 8011594:	f88d 502a 	strb.w	r5, [sp, #42]	@ 0x2a
 8011598:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801159a:	a90c      	add	r1, sp, #48	@ 0x30
 801159c:	4640      	mov	r0, r8
 801159e:	f7ff fd39 	bl	8011014 <read_submessage_list>
 80115a2:	e7c4      	b.n	801152e <listen_message_reliably+0x20a>

080115a4 <uxr_run_session_timeout>:
 80115a4:	b570      	push	{r4, r5, r6, lr}
 80115a6:	4604      	mov	r4, r0
 80115a8:	460d      	mov	r5, r1
 80115aa:	f000 fd67 	bl	801207c <uxr_millis>
 80115ae:	4606      	mov	r6, r0
 80115b0:	4620      	mov	r0, r4
 80115b2:	f7ff fc71 	bl	8010e98 <uxr_flash_output_streams>
 80115b6:	4629      	mov	r1, r5
 80115b8:	4620      	mov	r0, r4
 80115ba:	f7ff feb3 	bl	8011324 <listen_message_reliably>
 80115be:	f000 fd5d 	bl	801207c <uxr_millis>
 80115c2:	1b83      	subs	r3, r0, r6
 80115c4:	1ae9      	subs	r1, r5, r3
 80115c6:	2900      	cmp	r1, #0
 80115c8:	dcf6      	bgt.n	80115b8 <uxr_run_session_timeout+0x14>
 80115ca:	f104 0008 	add.w	r0, r4, #8
 80115ce:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80115d2:	f000 bcf7 	b.w	8011fc4 <uxr_output_streams_confirmed>
 80115d6:	bf00      	nop

080115d8 <uxr_run_session_until_data>:
 80115d8:	b570      	push	{r4, r5, r6, lr}
 80115da:	4604      	mov	r4, r0
 80115dc:	460d      	mov	r5, r1
 80115de:	f000 fd4d 	bl	801207c <uxr_millis>
 80115e2:	4606      	mov	r6, r0
 80115e4:	4620      	mov	r0, r4
 80115e6:	f7ff fc57 	bl	8010e98 <uxr_flash_output_streams>
 80115ea:	2300      	movs	r3, #0
 80115ec:	f884 30b4 	strb.w	r3, [r4, #180]	@ 0xb4
 80115f0:	4629      	mov	r1, r5
 80115f2:	e005      	b.n	8011600 <uxr_run_session_until_data+0x28>
 80115f4:	f000 fd42 	bl	801207c <uxr_millis>
 80115f8:	1b83      	subs	r3, r0, r6
 80115fa:	1ae9      	subs	r1, r5, r3
 80115fc:	2900      	cmp	r1, #0
 80115fe:	dd07      	ble.n	8011610 <uxr_run_session_until_data+0x38>
 8011600:	4620      	mov	r0, r4
 8011602:	f7ff fe8f 	bl	8011324 <listen_message_reliably>
 8011606:	f894 00b4 	ldrb.w	r0, [r4, #180]	@ 0xb4
 801160a:	2800      	cmp	r0, #0
 801160c:	d0f2      	beq.n	80115f4 <uxr_run_session_until_data+0x1c>
 801160e:	bd70      	pop	{r4, r5, r6, pc}
 8011610:	f894 00b4 	ldrb.w	r0, [r4, #180]	@ 0xb4
 8011614:	bd70      	pop	{r4, r5, r6, pc}
 8011616:	bf00      	nop

08011618 <uxr_run_session_until_confirm_delivery>:
 8011618:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801161c:	4606      	mov	r6, r0
 801161e:	460d      	mov	r5, r1
 8011620:	f000 fd2c 	bl	801207c <uxr_millis>
 8011624:	4607      	mov	r7, r0
 8011626:	4630      	mov	r0, r6
 8011628:	f7ff fc36 	bl	8010e98 <uxr_flash_output_streams>
 801162c:	2d00      	cmp	r5, #0
 801162e:	f106 0808 	add.w	r8, r6, #8
 8011632:	bfa8      	it	ge
 8011634:	462c      	movge	r4, r5
 8011636:	da07      	bge.n	8011648 <uxr_run_session_until_confirm_delivery+0x30>
 8011638:	e00e      	b.n	8011658 <uxr_run_session_until_confirm_delivery+0x40>
 801163a:	f7ff fe73 	bl	8011324 <listen_message_reliably>
 801163e:	f000 fd1d 	bl	801207c <uxr_millis>
 8011642:	1bc3      	subs	r3, r0, r7
 8011644:	1aec      	subs	r4, r5, r3
 8011646:	d407      	bmi.n	8011658 <uxr_run_session_until_confirm_delivery+0x40>
 8011648:	4640      	mov	r0, r8
 801164a:	f000 fcbb 	bl	8011fc4 <uxr_output_streams_confirmed>
 801164e:	4603      	mov	r3, r0
 8011650:	4621      	mov	r1, r4
 8011652:	4630      	mov	r0, r6
 8011654:	2b00      	cmp	r3, #0
 8011656:	d0f0      	beq.n	801163a <uxr_run_session_until_confirm_delivery+0x22>
 8011658:	4640      	mov	r0, r8
 801165a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801165e:	f000 bcb1 	b.w	8011fc4 <uxr_output_streams_confirmed>
 8011662:	bf00      	nop

08011664 <uxr_run_session_until_all_status>:
 8011664:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011668:	9c08      	ldr	r4, [sp, #32]
 801166a:	4606      	mov	r6, r0
 801166c:	460f      	mov	r7, r1
 801166e:	4691      	mov	r9, r2
 8011670:	461d      	mov	r5, r3
 8011672:	f7ff fc11 	bl	8010e98 <uxr_flash_output_streams>
 8011676:	b124      	cbz	r4, 8011682 <uxr_run_session_until_all_status+0x1e>
 8011678:	4622      	mov	r2, r4
 801167a:	21ff      	movs	r1, #255	@ 0xff
 801167c:	4628      	mov	r0, r5
 801167e:	f009 ff35 	bl	801b4ec <memset>
 8011682:	e9c6 951d 	strd	r9, r5, [r6, #116]	@ 0x74
 8011686:	67f4      	str	r4, [r6, #124]	@ 0x7c
 8011688:	f000 fcf8 	bl	801207c <uxr_millis>
 801168c:	3d01      	subs	r5, #1
 801168e:	f1a9 0902 	sub.w	r9, r9, #2
 8011692:	4680      	mov	r8, r0
 8011694:	4639      	mov	r1, r7
 8011696:	4630      	mov	r0, r6
 8011698:	f7ff fe44 	bl	8011324 <listen_message_reliably>
 801169c:	f000 fcee 	bl	801207c <uxr_millis>
 80116a0:	eba0 0008 	sub.w	r0, r0, r8
 80116a4:	1a39      	subs	r1, r7, r0
 80116a6:	b344      	cbz	r4, 80116fa <uxr_run_session_until_all_status+0x96>
 80116a8:	4628      	mov	r0, r5
 80116aa:	46ac      	mov	ip, r5
 80116ac:	2301      	movs	r3, #1
 80116ae:	e002      	b.n	80116b6 <uxr_run_session_until_all_status+0x52>
 80116b0:	42a3      	cmp	r3, r4
 80116b2:	d20d      	bcs.n	80116d0 <uxr_run_session_until_all_status+0x6c>
 80116b4:	3301      	adds	r3, #1
 80116b6:	f81c ef01 	ldrb.w	lr, [ip, #1]!
 80116ba:	f1be 0fff 	cmp.w	lr, #255	@ 0xff
 80116be:	d1f7      	bne.n	80116b0 <uxr_run_session_until_all_status+0x4c>
 80116c0:	42a3      	cmp	r3, r4
 80116c2:	f839 2013 	ldrh.w	r2, [r9, r3, lsl #1]
 80116c6:	d213      	bcs.n	80116f0 <uxr_run_session_until_all_status+0x8c>
 80116c8:	2a00      	cmp	r2, #0
 80116ca:	d0f3      	beq.n	80116b4 <uxr_run_session_until_all_status+0x50>
 80116cc:	2900      	cmp	r1, #0
 80116ce:	dce2      	bgt.n	8011696 <uxr_run_session_until_all_status+0x32>
 80116d0:	2300      	movs	r3, #0
 80116d2:	67f3      	str	r3, [r6, #124]	@ 0x7c
 80116d4:	442c      	add	r4, r5
 80116d6:	e001      	b.n	80116dc <uxr_run_session_until_all_status+0x78>
 80116d8:	2b01      	cmp	r3, #1
 80116da:	d812      	bhi.n	8011702 <uxr_run_session_until_all_status+0x9e>
 80116dc:	f810 3f01 	ldrb.w	r3, [r0, #1]!
 80116e0:	4284      	cmp	r4, r0
 80116e2:	d1f9      	bne.n	80116d8 <uxr_run_session_until_all_status+0x74>
 80116e4:	2b01      	cmp	r3, #1
 80116e6:	bf8c      	ite	hi
 80116e8:	2000      	movhi	r0, #0
 80116ea:	2001      	movls	r0, #1
 80116ec:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80116f0:	2900      	cmp	r1, #0
 80116f2:	dded      	ble.n	80116d0 <uxr_run_session_until_all_status+0x6c>
 80116f4:	2a00      	cmp	r2, #0
 80116f6:	d1ce      	bne.n	8011696 <uxr_run_session_until_all_status+0x32>
 80116f8:	e7ea      	b.n	80116d0 <uxr_run_session_until_all_status+0x6c>
 80116fa:	67f4      	str	r4, [r6, #124]	@ 0x7c
 80116fc:	2001      	movs	r0, #1
 80116fe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011702:	2000      	movs	r0, #0
 8011704:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

08011708 <wait_session_status>:
 8011708:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801170c:	4604      	mov	r4, r0
 801170e:	b09d      	sub	sp, #116	@ 0x74
 8011710:	20ff      	movs	r0, #255	@ 0xff
 8011712:	7160      	strb	r0, [r4, #5]
 8011714:	9303      	str	r3, [sp, #12]
 8011716:	2b00      	cmp	r3, #0
 8011718:	f000 80b6 	beq.w	8011888 <wait_session_status+0x180>
 801171c:	468a      	mov	sl, r1
 801171e:	4691      	mov	r9, r2
 8011720:	f04f 0b00 	mov.w	fp, #0
 8011724:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 8011726:	464a      	mov	r2, r9
 8011728:	e9d3 0500 	ldrd	r0, r5, [r3]
 801172c:	4651      	mov	r1, sl
 801172e:	47a8      	blx	r5
 8011730:	f000 fca4 	bl	801207c <uxr_millis>
 8011734:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8011738:	4605      	mov	r5, r0
 801173a:	e009      	b.n	8011750 <wait_session_status+0x48>
 801173c:	f000 fc9e 	bl	801207c <uxr_millis>
 8011740:	1b40      	subs	r0, r0, r5
 8011742:	f5c0 737a 	rsb	r3, r0, #1000	@ 0x3e8
 8011746:	2b00      	cmp	r3, #0
 8011748:	dd40      	ble.n	80117cc <wait_session_status+0xc4>
 801174a:	7960      	ldrb	r0, [r4, #5]
 801174c:	28ff      	cmp	r0, #255	@ 0xff
 801174e:	d145      	bne.n	80117dc <wait_session_status+0xd4>
 8011750:	6f22      	ldr	r2, [r4, #112]	@ 0x70
 8011752:	a908      	add	r1, sp, #32
 8011754:	6896      	ldr	r6, [r2, #8]
 8011756:	6810      	ldr	r0, [r2, #0]
 8011758:	aa09      	add	r2, sp, #36	@ 0x24
 801175a:	47b0      	blx	r6
 801175c:	2800      	cmp	r0, #0
 801175e:	d0ed      	beq.n	801173c <wait_session_status+0x34>
 8011760:	e9dd 1208 	ldrd	r1, r2, [sp, #32]
 8011764:	a80c      	add	r0, sp, #48	@ 0x30
 8011766:	f7fe ff51 	bl	801060c <ucdr_init_buffer>
 801176a:	2600      	movs	r6, #0
 801176c:	f10d 031e 	add.w	r3, sp, #30
 8011770:	aa07      	add	r2, sp, #28
 8011772:	a90c      	add	r1, sp, #48	@ 0x30
 8011774:	4620      	mov	r0, r4
 8011776:	f88d 601c 	strb.w	r6, [sp, #28]
 801177a:	f000 fa87 	bl	8011c8c <uxr_read_session_header>
 801177e:	2800      	cmp	r0, #0
 8011780:	d0dc      	beq.n	801173c <wait_session_status+0x34>
 8011782:	4631      	mov	r1, r6
 8011784:	f89d 001c 	ldrb.w	r0, [sp, #28]
 8011788:	f000 fb24 	bl	8011dd4 <uxr_stream_id_from_raw>
 801178c:	f3c0 4707 	ubfx	r7, r0, #16, #8
 8011790:	f8bd 301e 	ldrh.w	r3, [sp, #30]
 8011794:	9302      	str	r3, [sp, #8]
 8011796:	2f01      	cmp	r7, #1
 8011798:	e9cd 000a 	strd	r0, r0, [sp, #40]	@ 0x28
 801179c:	f3c0 2607 	ubfx	r6, r0, #8, #8
 80117a0:	d05c      	beq.n	801185c <wait_session_status+0x154>
 80117a2:	2f02      	cmp	r7, #2
 80117a4:	d020      	beq.n	80117e8 <wait_session_status+0xe0>
 80117a6:	2f00      	cmp	r7, #0
 80117a8:	d1c8      	bne.n	801173c <wait_session_status+0x34>
 80117aa:	4639      	mov	r1, r7
 80117ac:	4638      	mov	r0, r7
 80117ae:	f000 fb11 	bl	8011dd4 <uxr_stream_id_from_raw>
 80117b2:	a90c      	add	r1, sp, #48	@ 0x30
 80117b4:	4602      	mov	r2, r0
 80117b6:	900b      	str	r0, [sp, #44]	@ 0x2c
 80117b8:	4620      	mov	r0, r4
 80117ba:	f7ff fc2b 	bl	8011014 <read_submessage_list>
 80117be:	f000 fc5d 	bl	801207c <uxr_millis>
 80117c2:	1b40      	subs	r0, r0, r5
 80117c4:	f5c0 737a 	rsb	r3, r0, #1000	@ 0x3e8
 80117c8:	2b00      	cmp	r3, #0
 80117ca:	dcbe      	bgt.n	801174a <wait_session_status+0x42>
 80117cc:	9b03      	ldr	r3, [sp, #12]
 80117ce:	7960      	ldrb	r0, [r4, #5]
 80117d0:	f10b 0b01 	add.w	fp, fp, #1
 80117d4:	455b      	cmp	r3, fp
 80117d6:	d001      	beq.n	80117dc <wait_session_status+0xd4>
 80117d8:	28ff      	cmp	r0, #255	@ 0xff
 80117da:	d0a3      	beq.n	8011724 <wait_session_status+0x1c>
 80117dc:	38ff      	subs	r0, #255	@ 0xff
 80117de:	bf18      	it	ne
 80117e0:	2001      	movne	r0, #1
 80117e2:	b01d      	add	sp, #116	@ 0x74
 80117e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80117e8:	f89d 3028 	ldrb.w	r3, [sp, #40]	@ 0x28
 80117ec:	9304      	str	r3, [sp, #16]
 80117ee:	4631      	mov	r1, r6
 80117f0:	f104 0008 	add.w	r0, r4, #8
 80117f4:	f000 fbdc 	bl	8011fb0 <uxr_get_input_reliable_stream>
 80117f8:	4680      	mov	r8, r0
 80117fa:	b348      	cbz	r0, 8011850 <wait_session_status+0x148>
 80117fc:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80117fe:	9205      	str	r2, [sp, #20]
 8011800:	a80c      	add	r0, sp, #48	@ 0x30
 8011802:	f7fe ff33 	bl	801066c <ucdr_buffer_remaining>
 8011806:	4603      	mov	r3, r0
 8011808:	f10d 001d 	add.w	r0, sp, #29
 801180c:	9000      	str	r0, [sp, #0]
 801180e:	9a05      	ldr	r2, [sp, #20]
 8011810:	9902      	ldr	r1, [sp, #8]
 8011812:	4640      	mov	r0, r8
 8011814:	f007 f9d4 	bl	8018bc0 <uxr_receive_reliable_message>
 8011818:	b1d0      	cbz	r0, 8011850 <wait_session_status+0x148>
 801181a:	f89d 301d 	ldrb.w	r3, [sp, #29]
 801181e:	2b00      	cmp	r3, #0
 8011820:	d03a      	beq.n	8011898 <wait_session_status+0x190>
 8011822:	9f04      	ldr	r7, [sp, #16]
 8011824:	e00a      	b.n	801183c <wait_session_status+0x134>
 8011826:	f04f 0302 	mov.w	r3, #2
 801182a:	f88d 702c 	strb.w	r7, [sp, #44]	@ 0x2c
 801182e:	f88d 602d 	strb.w	r6, [sp, #45]	@ 0x2d
 8011832:	f88d 302e 	strb.w	r3, [sp, #46]	@ 0x2e
 8011836:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8011838:	f7ff fbec 	bl	8011014 <read_submessage_list>
 801183c:	a914      	add	r1, sp, #80	@ 0x50
 801183e:	2204      	movs	r2, #4
 8011840:	4640      	mov	r0, r8
 8011842:	f007 fa3d 	bl	8018cc0 <uxr_next_input_reliable_buffer_available>
 8011846:	4603      	mov	r3, r0
 8011848:	a914      	add	r1, sp, #80	@ 0x50
 801184a:	4620      	mov	r0, r4
 801184c:	2b00      	cmp	r3, #0
 801184e:	d1ea      	bne.n	8011826 <wait_session_status+0x11e>
 8011850:	9904      	ldr	r1, [sp, #16]
 8011852:	4632      	mov	r2, r6
 8011854:	4620      	mov	r0, r4
 8011856:	f7ff fa57 	bl	8010d08 <write_submessage_acknack.isra.0>
 801185a:	e76f      	b.n	801173c <wait_session_status+0x34>
 801185c:	4631      	mov	r1, r6
 801185e:	f104 0008 	add.w	r0, r4, #8
 8011862:	f000 fb9b 	bl	8011f9c <uxr_get_input_best_effort_stream>
 8011866:	2800      	cmp	r0, #0
 8011868:	f43f af68 	beq.w	801173c <wait_session_status+0x34>
 801186c:	9902      	ldr	r1, [sp, #8]
 801186e:	f007 f913 	bl	8018a98 <uxr_receive_best_effort_message>
 8011872:	2800      	cmp	r0, #0
 8011874:	f43f af62 	beq.w	801173c <wait_session_status+0x34>
 8011878:	f88d 702e 	strb.w	r7, [sp, #46]	@ 0x2e
 801187c:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 801187e:	a90c      	add	r1, sp, #48	@ 0x30
 8011880:	4620      	mov	r0, r4
 8011882:	f7ff fbc7 	bl	8011014 <read_submessage_list>
 8011886:	e759      	b.n	801173c <wait_session_status+0x34>
 8011888:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 801188a:	e9d3 0400 	ldrd	r0, r4, [r3]
 801188e:	47a0      	blx	r4
 8011890:	2001      	movs	r0, #1
 8011892:	b01d      	add	sp, #116	@ 0x74
 8011894:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011898:	f88d 702e 	strb.w	r7, [sp, #46]	@ 0x2e
 801189c:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 801189e:	a90c      	add	r1, sp, #48	@ 0x30
 80118a0:	4620      	mov	r0, r4
 80118a2:	f7ff fbb7 	bl	8011014 <read_submessage_list>
 80118a6:	e7bc      	b.n	8011822 <wait_session_status+0x11a>

080118a8 <uxr_delete_session_retries>:
 80118a8:	b530      	push	{r4, r5, lr}
 80118aa:	b08f      	sub	sp, #60	@ 0x3c
 80118ac:	4604      	mov	r4, r0
 80118ae:	460d      	mov	r5, r1
 80118b0:	f000 fa2e 	bl	8011d10 <uxr_session_header_offset>
 80118b4:	2300      	movs	r3, #0
 80118b6:	2210      	movs	r2, #16
 80118b8:	9000      	str	r0, [sp, #0]
 80118ba:	a902      	add	r1, sp, #8
 80118bc:	a806      	add	r0, sp, #24
 80118be:	f7fe fe93 	bl	80105e8 <ucdr_init_buffer_origin_offset>
 80118c2:	a906      	add	r1, sp, #24
 80118c4:	4620      	mov	r0, r4
 80118c6:	f000 f973 	bl	8011bb0 <uxr_buffer_delete_session>
 80118ca:	2200      	movs	r2, #0
 80118cc:	4611      	mov	r1, r2
 80118ce:	9b06      	ldr	r3, [sp, #24]
 80118d0:	4620      	mov	r0, r4
 80118d2:	f000 f9c7 	bl	8011c64 <uxr_stamp_session_header>
 80118d6:	a806      	add	r0, sp, #24
 80118d8:	f7fe fec4 	bl	8010664 <ucdr_buffer_length>
 80118dc:	462b      	mov	r3, r5
 80118de:	4602      	mov	r2, r0
 80118e0:	a902      	add	r1, sp, #8
 80118e2:	4620      	mov	r0, r4
 80118e4:	f7ff ff10 	bl	8011708 <wait_session_status>
 80118e8:	b118      	cbz	r0, 80118f2 <uxr_delete_session_retries+0x4a>
 80118ea:	7960      	ldrb	r0, [r4, #5]
 80118ec:	fab0 f080 	clz	r0, r0
 80118f0:	0940      	lsrs	r0, r0, #5
 80118f2:	b00f      	add	sp, #60	@ 0x3c
 80118f4:	bd30      	pop	{r4, r5, pc}
 80118f6:	bf00      	nop

080118f8 <uxr_create_session>:
 80118f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80118fc:	f100 0b08 	add.w	fp, r0, #8
 8011900:	b0ab      	sub	sp, #172	@ 0xac
 8011902:	4604      	mov	r4, r0
 8011904:	4658      	mov	r0, fp
 8011906:	f000 fa99 	bl	8011e3c <uxr_reset_stream_storage>
 801190a:	4620      	mov	r0, r4
 801190c:	f000 fa00 	bl	8011d10 <uxr_session_header_offset>
 8011910:	2300      	movs	r3, #0
 8011912:	9000      	str	r0, [sp, #0]
 8011914:	221c      	movs	r2, #28
 8011916:	a90b      	add	r1, sp, #44	@ 0x2c
 8011918:	a812      	add	r0, sp, #72	@ 0x48
 801191a:	f7fe fe65 	bl	80105e8 <ucdr_init_buffer_origin_offset>
 801191e:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 8011920:	8a1a      	ldrh	r2, [r3, #16]
 8011922:	3a04      	subs	r2, #4
 8011924:	b292      	uxth	r2, r2
 8011926:	a912      	add	r1, sp, #72	@ 0x48
 8011928:	4620      	mov	r0, r4
 801192a:	f000 f917 	bl	8011b5c <uxr_buffer_create_session>
 801192e:	9912      	ldr	r1, [sp, #72]	@ 0x48
 8011930:	4620      	mov	r0, r4
 8011932:	f000 f983 	bl	8011c3c <uxr_stamp_create_session_header>
 8011936:	a812      	add	r0, sp, #72	@ 0x48
 8011938:	f7fe fe94 	bl	8010664 <ucdr_buffer_length>
 801193c:	23ff      	movs	r3, #255	@ 0xff
 801193e:	7163      	strb	r3, [r4, #5]
 8011940:	230a      	movs	r3, #10
 8011942:	46da      	mov	sl, fp
 8011944:	9303      	str	r3, [sp, #12]
 8011946:	4683      	mov	fp, r0
 8011948:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 801194a:	465a      	mov	r2, fp
 801194c:	e9d3 0500 	ldrd	r0, r5, [r3]
 8011950:	a90b      	add	r1, sp, #44	@ 0x2c
 8011952:	47a8      	blx	r5
 8011954:	f000 fb92 	bl	801207c <uxr_millis>
 8011958:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 801195c:	4605      	mov	r5, r0
 801195e:	e009      	b.n	8011974 <uxr_create_session+0x7c>
 8011960:	f000 fb8c 	bl	801207c <uxr_millis>
 8011964:	1b40      	subs	r0, r0, r5
 8011966:	f5c0 737a 	rsb	r3, r0, #1000	@ 0x3e8
 801196a:	2b00      	cmp	r3, #0
 801196c:	7962      	ldrb	r2, [r4, #5]
 801196e:	dd38      	ble.n	80119e2 <uxr_create_session+0xea>
 8011970:	2aff      	cmp	r2, #255	@ 0xff
 8011972:	d13c      	bne.n	80119ee <uxr_create_session+0xf6>
 8011974:	6f22      	ldr	r2, [r4, #112]	@ 0x70
 8011976:	a907      	add	r1, sp, #28
 8011978:	6896      	ldr	r6, [r2, #8]
 801197a:	6810      	ldr	r0, [r2, #0]
 801197c:	aa08      	add	r2, sp, #32
 801197e:	47b0      	blx	r6
 8011980:	2800      	cmp	r0, #0
 8011982:	d0ed      	beq.n	8011960 <uxr_create_session+0x68>
 8011984:	e9dd 1207 	ldrd	r1, r2, [sp, #28]
 8011988:	a81a      	add	r0, sp, #104	@ 0x68
 801198a:	f7fe fe3f 	bl	801060c <ucdr_init_buffer>
 801198e:	2600      	movs	r6, #0
 8011990:	f10d 031a 	add.w	r3, sp, #26
 8011994:	aa06      	add	r2, sp, #24
 8011996:	a91a      	add	r1, sp, #104	@ 0x68
 8011998:	4620      	mov	r0, r4
 801199a:	f88d 6018 	strb.w	r6, [sp, #24]
 801199e:	f000 f975 	bl	8011c8c <uxr_read_session_header>
 80119a2:	2800      	cmp	r0, #0
 80119a4:	d0dc      	beq.n	8011960 <uxr_create_session+0x68>
 80119a6:	4631      	mov	r1, r6
 80119a8:	f89d 0018 	ldrb.w	r0, [sp, #24]
 80119ac:	f000 fa12 	bl	8011dd4 <uxr_stream_id_from_raw>
 80119b0:	f3c0 4607 	ubfx	r6, r0, #16, #8
 80119b4:	2e01      	cmp	r6, #1
 80119b6:	e9cd 0009 	strd	r0, r0, [sp, #36]	@ 0x24
 80119ba:	f8bd 901a 	ldrh.w	r9, [sp, #26]
 80119be:	f3c0 2707 	ubfx	r7, r0, #8, #8
 80119c2:	d053      	beq.n	8011a6c <uxr_create_session+0x174>
 80119c4:	2e02      	cmp	r6, #2
 80119c6:	d018      	beq.n	80119fa <uxr_create_session+0x102>
 80119c8:	2e00      	cmp	r6, #0
 80119ca:	d1c9      	bne.n	8011960 <uxr_create_session+0x68>
 80119cc:	4631      	mov	r1, r6
 80119ce:	4630      	mov	r0, r6
 80119d0:	f000 fa00 	bl	8011dd4 <uxr_stream_id_from_raw>
 80119d4:	a91a      	add	r1, sp, #104	@ 0x68
 80119d6:	4602      	mov	r2, r0
 80119d8:	900a      	str	r0, [sp, #40]	@ 0x28
 80119da:	4620      	mov	r0, r4
 80119dc:	f7ff fb1a 	bl	8011014 <read_submessage_list>
 80119e0:	e7be      	b.n	8011960 <uxr_create_session+0x68>
 80119e2:	9b03      	ldr	r3, [sp, #12]
 80119e4:	3b01      	subs	r3, #1
 80119e6:	9303      	str	r3, [sp, #12]
 80119e8:	d001      	beq.n	80119ee <uxr_create_session+0xf6>
 80119ea:	2aff      	cmp	r2, #255	@ 0xff
 80119ec:	d0ac      	beq.n	8011948 <uxr_create_session+0x50>
 80119ee:	2a00      	cmp	r2, #0
 80119f0:	d051      	beq.n	8011a96 <uxr_create_session+0x19e>
 80119f2:	2000      	movs	r0, #0
 80119f4:	b02b      	add	sp, #172	@ 0xac
 80119f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80119fa:	f89d 3024 	ldrb.w	r3, [sp, #36]	@ 0x24
 80119fe:	9304      	str	r3, [sp, #16]
 8011a00:	4639      	mov	r1, r7
 8011a02:	4650      	mov	r0, sl
 8011a04:	f000 fad4 	bl	8011fb0 <uxr_get_input_reliable_stream>
 8011a08:	4680      	mov	r8, r0
 8011a0a:	b348      	cbz	r0, 8011a60 <uxr_create_session+0x168>
 8011a0c:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 8011a0e:	9205      	str	r2, [sp, #20]
 8011a10:	a81a      	add	r0, sp, #104	@ 0x68
 8011a12:	f7fe fe2b 	bl	801066c <ucdr_buffer_remaining>
 8011a16:	4603      	mov	r3, r0
 8011a18:	f10d 0019 	add.w	r0, sp, #25
 8011a1c:	9000      	str	r0, [sp, #0]
 8011a1e:	9a05      	ldr	r2, [sp, #20]
 8011a20:	4649      	mov	r1, r9
 8011a22:	4640      	mov	r0, r8
 8011a24:	f007 f8cc 	bl	8018bc0 <uxr_receive_reliable_message>
 8011a28:	b1d0      	cbz	r0, 8011a60 <uxr_create_session+0x168>
 8011a2a:	f89d 3019 	ldrb.w	r3, [sp, #25]
 8011a2e:	2b00      	cmp	r3, #0
 8011a30:	d038      	beq.n	8011aa4 <uxr_create_session+0x1ac>
 8011a32:	9e04      	ldr	r6, [sp, #16]
 8011a34:	e00a      	b.n	8011a4c <uxr_create_session+0x154>
 8011a36:	f04f 0302 	mov.w	r3, #2
 8011a3a:	f88d 6028 	strb.w	r6, [sp, #40]	@ 0x28
 8011a3e:	f88d 7029 	strb.w	r7, [sp, #41]	@ 0x29
 8011a42:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8011a46:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8011a48:	f7ff fae4 	bl	8011014 <read_submessage_list>
 8011a4c:	a922      	add	r1, sp, #136	@ 0x88
 8011a4e:	2204      	movs	r2, #4
 8011a50:	4640      	mov	r0, r8
 8011a52:	f007 f935 	bl	8018cc0 <uxr_next_input_reliable_buffer_available>
 8011a56:	4603      	mov	r3, r0
 8011a58:	a922      	add	r1, sp, #136	@ 0x88
 8011a5a:	4620      	mov	r0, r4
 8011a5c:	2b00      	cmp	r3, #0
 8011a5e:	d1ea      	bne.n	8011a36 <uxr_create_session+0x13e>
 8011a60:	9904      	ldr	r1, [sp, #16]
 8011a62:	463a      	mov	r2, r7
 8011a64:	4620      	mov	r0, r4
 8011a66:	f7ff f94f 	bl	8010d08 <write_submessage_acknack.isra.0>
 8011a6a:	e779      	b.n	8011960 <uxr_create_session+0x68>
 8011a6c:	4639      	mov	r1, r7
 8011a6e:	4650      	mov	r0, sl
 8011a70:	f000 fa94 	bl	8011f9c <uxr_get_input_best_effort_stream>
 8011a74:	2800      	cmp	r0, #0
 8011a76:	f43f af73 	beq.w	8011960 <uxr_create_session+0x68>
 8011a7a:	4649      	mov	r1, r9
 8011a7c:	f007 f80c 	bl	8018a98 <uxr_receive_best_effort_message>
 8011a80:	2800      	cmp	r0, #0
 8011a82:	f43f af6d 	beq.w	8011960 <uxr_create_session+0x68>
 8011a86:	f88d 602a 	strb.w	r6, [sp, #42]	@ 0x2a
 8011a8a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8011a8c:	a91a      	add	r1, sp, #104	@ 0x68
 8011a8e:	4620      	mov	r0, r4
 8011a90:	f7ff fac0 	bl	8011014 <read_submessage_list>
 8011a94:	e764      	b.n	8011960 <uxr_create_session+0x68>
 8011a96:	4650      	mov	r0, sl
 8011a98:	f000 f9d0 	bl	8011e3c <uxr_reset_stream_storage>
 8011a9c:	2001      	movs	r0, #1
 8011a9e:	b02b      	add	sp, #172	@ 0xac
 8011aa0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011aa4:	f88d 602a 	strb.w	r6, [sp, #42]	@ 0x2a
 8011aa8:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8011aaa:	a91a      	add	r1, sp, #104	@ 0x68
 8011aac:	4620      	mov	r0, r4
 8011aae:	f7ff fab1 	bl	8011014 <read_submessage_list>
 8011ab2:	e7be      	b.n	8011a32 <uxr_create_session+0x13a>

08011ab4 <uxr_prepare_stream_to_write_submessage>:
 8011ab4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011ab8:	b082      	sub	sp, #8
 8011aba:	4682      	mov	sl, r0
 8011abc:	4610      	mov	r0, r2
 8011abe:	4615      	mov	r5, r2
 8011ac0:	461e      	mov	r6, r3
 8011ac2:	f89d 7028 	ldrb.w	r7, [sp, #40]	@ 0x28
 8011ac6:	f89d 802c 	ldrb.w	r8, [sp, #44]	@ 0x2c
 8011aca:	9101      	str	r1, [sp, #4]
 8011acc:	f3c1 2407 	ubfx	r4, r1, #8, #8
 8011ad0:	f000 face 	bl	8012070 <uxr_submessage_padding>
 8011ad4:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8011ad8:	f105 0904 	add.w	r9, r5, #4
 8011adc:	2b01      	cmp	r3, #1
 8011ade:	4481      	add	r9, r0
 8011ae0:	d01d      	beq.n	8011b1e <uxr_prepare_stream_to_write_submessage+0x6a>
 8011ae2:	2b02      	cmp	r3, #2
 8011ae4:	d116      	bne.n	8011b14 <uxr_prepare_stream_to_write_submessage+0x60>
 8011ae6:	4621      	mov	r1, r4
 8011ae8:	f10a 0008 	add.w	r0, sl, #8
 8011aec:	f000 fa4c 	bl	8011f88 <uxr_get_output_reliable_stream>
 8011af0:	4604      	mov	r4, r0
 8011af2:	b158      	cbz	r0, 8011b0c <uxr_prepare_stream_to_write_submessage+0x58>
 8011af4:	4649      	mov	r1, r9
 8011af6:	4632      	mov	r2, r6
 8011af8:	f007 fa9e 	bl	8019038 <uxr_prepare_reliable_buffer_to_write>
 8011afc:	4604      	mov	r4, r0
 8011afe:	b12c      	cbz	r4, 8011b0c <uxr_prepare_stream_to_write_submessage+0x58>
 8011b00:	4643      	mov	r3, r8
 8011b02:	b2aa      	uxth	r2, r5
 8011b04:	4639      	mov	r1, r7
 8011b06:	4630      	mov	r0, r6
 8011b08:	f000 fa72 	bl	8011ff0 <uxr_buffer_submessage_header>
 8011b0c:	4620      	mov	r0, r4
 8011b0e:	b002      	add	sp, #8
 8011b10:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011b14:	2400      	movs	r4, #0
 8011b16:	4620      	mov	r0, r4
 8011b18:	b002      	add	sp, #8
 8011b1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011b1e:	4621      	mov	r1, r4
 8011b20:	f10a 0008 	add.w	r0, sl, #8
 8011b24:	f000 fa28 	bl	8011f78 <uxr_get_output_best_effort_stream>
 8011b28:	4604      	mov	r4, r0
 8011b2a:	2800      	cmp	r0, #0
 8011b2c:	d0ee      	beq.n	8011b0c <uxr_prepare_stream_to_write_submessage+0x58>
 8011b2e:	4649      	mov	r1, r9
 8011b30:	4632      	mov	r2, r6
 8011b32:	f007 f9b1 	bl	8018e98 <uxr_prepare_best_effort_buffer_to_write>
 8011b36:	4604      	mov	r4, r0
 8011b38:	e7e1      	b.n	8011afe <uxr_prepare_stream_to_write_submessage+0x4a>
 8011b3a:	bf00      	nop

08011b3c <uxr_init_session_info>:
 8011b3c:	0e13      	lsrs	r3, r2, #24
 8011b3e:	7043      	strb	r3, [r0, #1]
 8011b40:	f3c2 2307 	ubfx	r3, r2, #8, #8
 8011b44:	f3c2 4c07 	ubfx	ip, r2, #16, #8
 8011b48:	7001      	strb	r1, [r0, #0]
 8011b4a:	70c3      	strb	r3, [r0, #3]
 8011b4c:	2109      	movs	r1, #9
 8011b4e:	23ff      	movs	r3, #255	@ 0xff
 8011b50:	f880 c002 	strb.w	ip, [r0, #2]
 8011b54:	7102      	strb	r2, [r0, #4]
 8011b56:	80c1      	strh	r1, [r0, #6]
 8011b58:	7143      	strb	r3, [r0, #5]
 8011b5a:	4770      	bx	lr

08011b5c <uxr_buffer_create_session>:
 8011b5c:	b530      	push	{r4, r5, lr}
 8011b5e:	b089      	sub	sp, #36	@ 0x24
 8011b60:	2300      	movs	r3, #0
 8011b62:	4d12      	ldr	r5, [pc, #72]	@ (8011bac <uxr_buffer_create_session+0x50>)
 8011b64:	9307      	str	r3, [sp, #28]
 8011b66:	f8ad 201c 	strh.w	r2, [sp, #28]
 8011b6a:	2201      	movs	r2, #1
 8011b6c:	9301      	str	r3, [sp, #4]
 8011b6e:	80c2      	strh	r2, [r0, #6]
 8011b70:	f88d 2004 	strb.w	r2, [sp, #4]
 8011b74:	682a      	ldr	r2, [r5, #0]
 8011b76:	9200      	str	r2, [sp, #0]
 8011b78:	88aa      	ldrh	r2, [r5, #4]
 8011b7a:	f8ad 2006 	strh.w	r2, [sp, #6]
 8011b7e:	f8d0 2001 	ldr.w	r2, [r0, #1]
 8011b82:	9202      	str	r2, [sp, #8]
 8011b84:	460c      	mov	r4, r1
 8011b86:	7802      	ldrb	r2, [r0, #0]
 8011b88:	9303      	str	r3, [sp, #12]
 8011b8a:	4619      	mov	r1, r3
 8011b8c:	f88d 200c 	strb.w	r2, [sp, #12]
 8011b90:	4620      	mov	r0, r4
 8011b92:	2210      	movs	r2, #16
 8011b94:	e9cd 3304 	strd	r3, r3, [sp, #16]
 8011b98:	9306      	str	r3, [sp, #24]
 8011b9a:	f000 fa29 	bl	8011ff0 <uxr_buffer_submessage_header>
 8011b9e:	4669      	mov	r1, sp
 8011ba0:	4620      	mov	r0, r4
 8011ba2:	f001 fa6d 	bl	8013080 <uxr_serialize_CREATE_CLIENT_Payload>
 8011ba6:	b009      	add	sp, #36	@ 0x24
 8011ba8:	bd30      	pop	{r4, r5, pc}
 8011baa:	bf00      	nop
 8011bac:	0801d3a4 	.word	0x0801d3a4

08011bb0 <uxr_buffer_delete_session>:
 8011bb0:	b510      	push	{r4, lr}
 8011bb2:	4b0c      	ldr	r3, [pc, #48]	@ (8011be4 <uxr_buffer_delete_session+0x34>)
 8011bb4:	b082      	sub	sp, #8
 8011bb6:	f8b3 c008 	ldrh.w	ip, [r3, #8]
 8011bba:	f8ad c006 	strh.w	ip, [sp, #6]
 8011bbe:	460c      	mov	r4, r1
 8011bc0:	2202      	movs	r2, #2
 8011bc2:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8011bc6:	80c2      	strh	r2, [r0, #6]
 8011bc8:	f8ad 3004 	strh.w	r3, [sp, #4]
 8011bcc:	2204      	movs	r2, #4
 8011bce:	2300      	movs	r3, #0
 8011bd0:	2103      	movs	r1, #3
 8011bd2:	4620      	mov	r0, r4
 8011bd4:	f000 fa0c 	bl	8011ff0 <uxr_buffer_submessage_header>
 8011bd8:	a901      	add	r1, sp, #4
 8011bda:	4620      	mov	r0, r4
 8011bdc:	f001 faf6 	bl	80131cc <uxr_serialize_DELETE_Payload>
 8011be0:	b002      	add	sp, #8
 8011be2:	bd10      	pop	{r4, pc}
 8011be4:	0801d3a4 	.word	0x0801d3a4

08011be8 <uxr_read_create_session_status>:
 8011be8:	b510      	push	{r4, lr}
 8011bea:	b088      	sub	sp, #32
 8011bec:	4604      	mov	r4, r0
 8011bee:	4608      	mov	r0, r1
 8011bf0:	a901      	add	r1, sp, #4
 8011bf2:	f001 fafb 	bl	80131ec <uxr_deserialize_STATUS_AGENT_Payload>
 8011bf6:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8011bfa:	7163      	strb	r3, [r4, #5]
 8011bfc:	b008      	add	sp, #32
 8011bfe:	bd10      	pop	{r4, pc}

08011c00 <uxr_read_delete_session_status>:
 8011c00:	b510      	push	{r4, lr}
 8011c02:	4604      	mov	r4, r0
 8011c04:	b084      	sub	sp, #16
 8011c06:	4608      	mov	r0, r1
 8011c08:	a902      	add	r1, sp, #8
 8011c0a:	f001 fb1f 	bl	801324c <uxr_deserialize_STATUS_Payload>
 8011c0e:	88e3      	ldrh	r3, [r4, #6]
 8011c10:	2b02      	cmp	r3, #2
 8011c12:	d001      	beq.n	8011c18 <uxr_read_delete_session_status+0x18>
 8011c14:	b004      	add	sp, #16
 8011c16:	bd10      	pop	{r4, pc}
 8011c18:	f10d 000a 	add.w	r0, sp, #10
 8011c1c:	f7fe fffa 	bl	8010c14 <uxr_object_id_from_raw>
 8011c20:	f89d 2008 	ldrb.w	r2, [sp, #8]
 8011c24:	f89d 3009 	ldrb.w	r3, [sp, #9]
 8011c28:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8011c2c:	b29b      	uxth	r3, r3
 8011c2e:	2b02      	cmp	r3, #2
 8011c30:	bf04      	itt	eq
 8011c32:	f89d 300c 	ldrbeq.w	r3, [sp, #12]
 8011c36:	7163      	strbeq	r3, [r4, #5]
 8011c38:	b004      	add	sp, #16
 8011c3a:	bd10      	pop	{r4, pc}

08011c3c <uxr_stamp_create_session_header>:
 8011c3c:	b510      	push	{r4, lr}
 8011c3e:	2208      	movs	r2, #8
 8011c40:	b08a      	sub	sp, #40	@ 0x28
 8011c42:	4604      	mov	r4, r0
 8011c44:	eb0d 0002 	add.w	r0, sp, r2
 8011c48:	f7fe fce0 	bl	801060c <ucdr_init_buffer>
 8011c4c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011c50:	9400      	str	r4, [sp, #0]
 8011c52:	2300      	movs	r3, #0
 8011c54:	461a      	mov	r2, r3
 8011c56:	f001 0180 	and.w	r1, r1, #128	@ 0x80
 8011c5a:	a802      	add	r0, sp, #8
 8011c5c:	f000 fbc2 	bl	80123e4 <uxr_serialize_message_header>
 8011c60:	b00a      	add	sp, #40	@ 0x28
 8011c62:	bd10      	pop	{r4, pc}

08011c64 <uxr_stamp_session_header>:
 8011c64:	b530      	push	{r4, r5, lr}
 8011c66:	b08d      	sub	sp, #52	@ 0x34
 8011c68:	4604      	mov	r4, r0
 8011c6a:	460d      	mov	r5, r1
 8011c6c:	9203      	str	r2, [sp, #12]
 8011c6e:	4619      	mov	r1, r3
 8011c70:	a804      	add	r0, sp, #16
 8011c72:	2208      	movs	r2, #8
 8011c74:	f7fe fcca 	bl	801060c <ucdr_init_buffer>
 8011c78:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011c7c:	9b03      	ldr	r3, [sp, #12]
 8011c7e:	9400      	str	r4, [sp, #0]
 8011c80:	462a      	mov	r2, r5
 8011c82:	a804      	add	r0, sp, #16
 8011c84:	f000 fbae 	bl	80123e4 <uxr_serialize_message_header>
 8011c88:	b00d      	add	sp, #52	@ 0x34
 8011c8a:	bd30      	pop	{r4, r5, pc}

08011c8c <uxr_read_session_header>:
 8011c8c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011c90:	4607      	mov	r7, r0
 8011c92:	b084      	sub	sp, #16
 8011c94:	4608      	mov	r0, r1
 8011c96:	460c      	mov	r4, r1
 8011c98:	4615      	mov	r5, r2
 8011c9a:	461e      	mov	r6, r3
 8011c9c:	f7fe fce6 	bl	801066c <ucdr_buffer_remaining>
 8011ca0:	2808      	cmp	r0, #8
 8011ca2:	d803      	bhi.n	8011cac <uxr_read_session_header+0x20>
 8011ca4:	2000      	movs	r0, #0
 8011ca6:	b004      	add	sp, #16
 8011ca8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011cac:	f10d 080c 	add.w	r8, sp, #12
 8011cb0:	4633      	mov	r3, r6
 8011cb2:	462a      	mov	r2, r5
 8011cb4:	f8cd 8000 	str.w	r8, [sp]
 8011cb8:	4620      	mov	r0, r4
 8011cba:	f10d 010b 	add.w	r1, sp, #11
 8011cbe:	f000 fbaf 	bl	8012420 <uxr_deserialize_message_header>
 8011cc2:	783a      	ldrb	r2, [r7, #0]
 8011cc4:	f89d 300b 	ldrb.w	r3, [sp, #11]
 8011cc8:	4293      	cmp	r3, r2
 8011cca:	d1eb      	bne.n	8011ca4 <uxr_read_session_header+0x18>
 8011ccc:	061b      	lsls	r3, r3, #24
 8011cce:	d41c      	bmi.n	8011d0a <uxr_read_session_header+0x7e>
 8011cd0:	f89d 200c 	ldrb.w	r2, [sp, #12]
 8011cd4:	787b      	ldrb	r3, [r7, #1]
 8011cd6:	429a      	cmp	r2, r3
 8011cd8:	d003      	beq.n	8011ce2 <uxr_read_session_header+0x56>
 8011cda:	2001      	movs	r0, #1
 8011cdc:	f080 0001 	eor.w	r0, r0, #1
 8011ce0:	e7e1      	b.n	8011ca6 <uxr_read_session_header+0x1a>
 8011ce2:	f89d 200d 	ldrb.w	r2, [sp, #13]
 8011ce6:	78bb      	ldrb	r3, [r7, #2]
 8011ce8:	429a      	cmp	r2, r3
 8011cea:	f107 0102 	add.w	r1, r7, #2
 8011cee:	d1f4      	bne.n	8011cda <uxr_read_session_header+0x4e>
 8011cf0:	f89d 200e 	ldrb.w	r2, [sp, #14]
 8011cf4:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8011cf8:	429a      	cmp	r2, r3
 8011cfa:	d1ee      	bne.n	8011cda <uxr_read_session_header+0x4e>
 8011cfc:	f89d 200f 	ldrb.w	r2, [sp, #15]
 8011d00:	784b      	ldrb	r3, [r1, #1]
 8011d02:	429a      	cmp	r2, r3
 8011d04:	d1e9      	bne.n	8011cda <uxr_read_session_header+0x4e>
 8011d06:	2000      	movs	r0, #0
 8011d08:	e7e8      	b.n	8011cdc <uxr_read_session_header+0x50>
 8011d0a:	2001      	movs	r0, #1
 8011d0c:	e7cb      	b.n	8011ca6 <uxr_read_session_header+0x1a>
 8011d0e:	bf00      	nop

08011d10 <uxr_session_header_offset>:
 8011d10:	f990 3000 	ldrsb.w	r3, [r0]
 8011d14:	2b00      	cmp	r3, #0
 8011d16:	bfac      	ite	ge
 8011d18:	2008      	movge	r0, #8
 8011d1a:	2004      	movlt	r0, #4
 8011d1c:	4770      	bx	lr
 8011d1e:	bf00      	nop

08011d20 <uxr_init_base_object_request>:
 8011d20:	b510      	push	{r4, lr}
 8011d22:	88c3      	ldrh	r3, [r0, #6]
 8011d24:	b082      	sub	sp, #8
 8011d26:	f64f 74f4 	movw	r4, #65524	@ 0xfff4
 8011d2a:	9101      	str	r1, [sp, #4]
 8011d2c:	f1a3 010a 	sub.w	r1, r3, #10
 8011d30:	b289      	uxth	r1, r1
 8011d32:	42a1      	cmp	r1, r4
 8011d34:	d80e      	bhi.n	8011d54 <uxr_init_base_object_request+0x34>
 8011d36:	3301      	adds	r3, #1
 8011d38:	b29c      	uxth	r4, r3
 8011d3a:	f3c3 2107 	ubfx	r1, r3, #8, #8
 8011d3e:	b2db      	uxtb	r3, r3
 8011d40:	80c4      	strh	r4, [r0, #6]
 8011d42:	9801      	ldr	r0, [sp, #4]
 8011d44:	7011      	strb	r1, [r2, #0]
 8011d46:	7053      	strb	r3, [r2, #1]
 8011d48:	1c91      	adds	r1, r2, #2
 8011d4a:	f7fe ff77 	bl	8010c3c <uxr_object_id_to_raw>
 8011d4e:	4620      	mov	r0, r4
 8011d50:	b002      	add	sp, #8
 8011d52:	bd10      	pop	{r4, pc}
 8011d54:	230a      	movs	r3, #10
 8011d56:	2100      	movs	r1, #0
 8011d58:	461c      	mov	r4, r3
 8011d5a:	e7f1      	b.n	8011d40 <uxr_init_base_object_request+0x20>

08011d5c <uxr_parse_base_object_request>:
 8011d5c:	b570      	push	{r4, r5, r6, lr}
 8011d5e:	4604      	mov	r4, r0
 8011d60:	3002      	adds	r0, #2
 8011d62:	460d      	mov	r5, r1
 8011d64:	4616      	mov	r6, r2
 8011d66:	f7fe ff55 	bl	8010c14 <uxr_object_id_from_raw>
 8011d6a:	f3c0 430f 	ubfx	r3, r0, #16, #16
 8011d6e:	8028      	strh	r0, [r5, #0]
 8011d70:	806b      	strh	r3, [r5, #2]
 8011d72:	7822      	ldrb	r2, [r4, #0]
 8011d74:	7863      	ldrb	r3, [r4, #1]
 8011d76:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8011d7a:	8033      	strh	r3, [r6, #0]
 8011d7c:	bd70      	pop	{r4, r5, r6, pc}
 8011d7e:	bf00      	nop

08011d80 <uxr_stream_id>:
 8011d80:	2901      	cmp	r1, #1
 8011d82:	b082      	sub	sp, #8
 8011d84:	d01d      	beq.n	8011dc2 <uxr_stream_id+0x42>
 8011d86:	2902      	cmp	r1, #2
 8011d88:	f04f 0c00 	mov.w	ip, #0
 8011d8c:	d01e      	beq.n	8011dcc <uxr_stream_id+0x4c>
 8011d8e:	2300      	movs	r3, #0
 8011d90:	f36c 0307 	bfi	r3, ip, #0, #8
 8011d94:	f360 230f 	bfi	r3, r0, #8, #8
 8011d98:	f361 4317 	bfi	r3, r1, #16, #8
 8011d9c:	f362 631f 	bfi	r3, r2, #24, #8
 8011da0:	b2da      	uxtb	r2, r3
 8011da2:	2000      	movs	r0, #0
 8011da4:	f362 0007 	bfi	r0, r2, #0, #8
 8011da8:	f3c3 2207 	ubfx	r2, r3, #8, #8
 8011dac:	f362 200f 	bfi	r0, r2, #8, #8
 8011db0:	f3c3 4207 	ubfx	r2, r3, #16, #8
 8011db4:	f362 4017 	bfi	r0, r2, #16, #8
 8011db8:	0e1b      	lsrs	r3, r3, #24
 8011dba:	f363 601f 	bfi	r0, r3, #24, #8
 8011dbe:	b002      	add	sp, #8
 8011dc0:	4770      	bx	lr
 8011dc2:	f100 0c01 	add.w	ip, r0, #1
 8011dc6:	fa5f fc8c 	uxtb.w	ip, ip
 8011dca:	e7e0      	b.n	8011d8e <uxr_stream_id+0xe>
 8011dcc:	f080 0c80 	eor.w	ip, r0, #128	@ 0x80
 8011dd0:	e7dd      	b.n	8011d8e <uxr_stream_id+0xe>
 8011dd2:	bf00      	nop

08011dd4 <uxr_stream_id_from_raw>:
 8011dd4:	b082      	sub	sp, #8
 8011dd6:	b130      	cbz	r0, 8011de6 <uxr_stream_id_from_raw+0x12>
 8011dd8:	0603      	lsls	r3, r0, #24
 8011dda:	d420      	bmi.n	8011e1e <uxr_stream_id_from_raw+0x4a>
 8011ddc:	1e42      	subs	r2, r0, #1
 8011dde:	b2d2      	uxtb	r2, r2
 8011de0:	f04f 0c01 	mov.w	ip, #1
 8011de4:	e001      	b.n	8011dea <uxr_stream_id_from_raw+0x16>
 8011de6:	4684      	mov	ip, r0
 8011de8:	4602      	mov	r2, r0
 8011dea:	2300      	movs	r3, #0
 8011dec:	f360 0307 	bfi	r3, r0, #0, #8
 8011df0:	f362 230f 	bfi	r3, r2, #8, #8
 8011df4:	f36c 4317 	bfi	r3, ip, #16, #8
 8011df8:	f361 631f 	bfi	r3, r1, #24, #8
 8011dfc:	b2da      	uxtb	r2, r3
 8011dfe:	2000      	movs	r0, #0
 8011e00:	f362 0007 	bfi	r0, r2, #0, #8
 8011e04:	f3c3 2207 	ubfx	r2, r3, #8, #8
 8011e08:	f362 200f 	bfi	r0, r2, #8, #8
 8011e0c:	f3c3 4207 	ubfx	r2, r3, #16, #8
 8011e10:	f362 4017 	bfi	r0, r2, #16, #8
 8011e14:	0e1b      	lsrs	r3, r3, #24
 8011e16:	f363 601f 	bfi	r0, r3, #24, #8
 8011e1a:	b002      	add	sp, #8
 8011e1c:	4770      	bx	lr
 8011e1e:	f080 0280 	eor.w	r2, r0, #128	@ 0x80
 8011e22:	f04f 0c02 	mov.w	ip, #2
 8011e26:	e7e0      	b.n	8011dea <uxr_stream_id_from_raw+0x16>

08011e28 <uxr_init_stream_storage>:
 8011e28:	2300      	movs	r3, #0
 8011e2a:	7403      	strb	r3, [r0, #16]
 8011e2c:	f880 3040 	strb.w	r3, [r0, #64]	@ 0x40
 8011e30:	f880 3044 	strb.w	r3, [r0, #68]	@ 0x44
 8011e34:	f880 3060 	strb.w	r3, [r0, #96]	@ 0x60
 8011e38:	4770      	bx	lr
 8011e3a:	bf00      	nop

08011e3c <uxr_reset_stream_storage>:
 8011e3c:	b570      	push	{r4, r5, r6, lr}
 8011e3e:	7c03      	ldrb	r3, [r0, #16]
 8011e40:	4604      	mov	r4, r0
 8011e42:	b153      	cbz	r3, 8011e5a <uxr_reset_stream_storage+0x1e>
 8011e44:	4606      	mov	r6, r0
 8011e46:	2500      	movs	r5, #0
 8011e48:	4630      	mov	r0, r6
 8011e4a:	f007 f81f 	bl	8018e8c <uxr_reset_output_best_effort_stream>
 8011e4e:	7c23      	ldrb	r3, [r4, #16]
 8011e50:	3501      	adds	r5, #1
 8011e52:	42ab      	cmp	r3, r5
 8011e54:	f106 0610 	add.w	r6, r6, #16
 8011e58:	d8f6      	bhi.n	8011e48 <uxr_reset_stream_storage+0xc>
 8011e5a:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 8011e5e:	b163      	cbz	r3, 8011e7a <uxr_reset_stream_storage+0x3e>
 8011e60:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8011e64:	2500      	movs	r5, #0
 8011e66:	4630      	mov	r0, r6
 8011e68:	f006 fe12 	bl	8018a90 <uxr_reset_input_best_effort_stream>
 8011e6c:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 8011e70:	3501      	adds	r5, #1
 8011e72:	42ab      	cmp	r3, r5
 8011e74:	f106 0602 	add.w	r6, r6, #2
 8011e78:	d8f5      	bhi.n	8011e66 <uxr_reset_stream_storage+0x2a>
 8011e7a:	f894 3040 	ldrb.w	r3, [r4, #64]	@ 0x40
 8011e7e:	b163      	cbz	r3, 8011e9a <uxr_reset_stream_storage+0x5e>
 8011e80:	f104 0618 	add.w	r6, r4, #24
 8011e84:	2500      	movs	r5, #0
 8011e86:	4630      	mov	r0, r6
 8011e88:	f007 f8ac 	bl	8018fe4 <uxr_reset_output_reliable_stream>
 8011e8c:	f894 3040 	ldrb.w	r3, [r4, #64]	@ 0x40
 8011e90:	3501      	adds	r5, #1
 8011e92:	42ab      	cmp	r3, r5
 8011e94:	f106 0628 	add.w	r6, r6, #40	@ 0x28
 8011e98:	d8f5      	bhi.n	8011e86 <uxr_reset_stream_storage+0x4a>
 8011e9a:	f894 3060 	ldrb.w	r3, [r4, #96]	@ 0x60
 8011e9e:	b163      	cbz	r3, 8011eba <uxr_reset_stream_storage+0x7e>
 8011ea0:	f104 0648 	add.w	r6, r4, #72	@ 0x48
 8011ea4:	2500      	movs	r5, #0
 8011ea6:	4630      	mov	r0, r6
 8011ea8:	f006 fe66 	bl	8018b78 <uxr_reset_input_reliable_stream>
 8011eac:	f894 3060 	ldrb.w	r3, [r4, #96]	@ 0x60
 8011eb0:	3501      	adds	r5, #1
 8011eb2:	42ab      	cmp	r3, r5
 8011eb4:	f106 0618 	add.w	r6, r6, #24
 8011eb8:	d8f5      	bhi.n	8011ea6 <uxr_reset_stream_storage+0x6a>
 8011eba:	bd70      	pop	{r4, r5, r6, pc}

08011ebc <uxr_add_output_best_effort_buffer>:
 8011ebc:	b510      	push	{r4, lr}
 8011ebe:	7c04      	ldrb	r4, [r0, #16]
 8011ec0:	f104 0c01 	add.w	ip, r4, #1
 8011ec4:	b082      	sub	sp, #8
 8011ec6:	f880 c010 	strb.w	ip, [r0, #16]
 8011eca:	eb00 1004 	add.w	r0, r0, r4, lsl #4
 8011ece:	f006 ffd3 	bl	8018e78 <uxr_init_output_best_effort_stream>
 8011ed2:	2201      	movs	r2, #1
 8011ed4:	4611      	mov	r1, r2
 8011ed6:	4620      	mov	r0, r4
 8011ed8:	b002      	add	sp, #8
 8011eda:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011ede:	f7ff bf4f 	b.w	8011d80 <uxr_stream_id>
 8011ee2:	bf00      	nop

08011ee4 <uxr_add_output_reliable_buffer>:
 8011ee4:	b510      	push	{r4, lr}
 8011ee6:	b084      	sub	sp, #16
 8011ee8:	4684      	mov	ip, r0
 8011eea:	f89d 0018 	ldrb.w	r0, [sp, #24]
 8011eee:	9000      	str	r0, [sp, #0]
 8011ef0:	f89c 4040 	ldrb.w	r4, [ip, #64]	@ 0x40
 8011ef4:	2028      	movs	r0, #40	@ 0x28
 8011ef6:	fb00 c004 	mla	r0, r0, r4, ip
 8011efa:	f104 0e01 	add.w	lr, r4, #1
 8011efe:	3018      	adds	r0, #24
 8011f00:	f88c e040 	strb.w	lr, [ip, #64]	@ 0x40
 8011f04:	f007 f836 	bl	8018f74 <uxr_init_output_reliable_stream>
 8011f08:	2201      	movs	r2, #1
 8011f0a:	2102      	movs	r1, #2
 8011f0c:	4620      	mov	r0, r4
 8011f0e:	b004      	add	sp, #16
 8011f10:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011f14:	f7ff bf34 	b.w	8011d80 <uxr_stream_id>

08011f18 <uxr_add_input_best_effort_buffer>:
 8011f18:	b510      	push	{r4, lr}
 8011f1a:	f890 4044 	ldrb.w	r4, [r0, #68]	@ 0x44
 8011f1e:	4603      	mov	r3, r0
 8011f20:	1c62      	adds	r2, r4, #1
 8011f22:	f104 0021 	add.w	r0, r4, #33	@ 0x21
 8011f26:	b082      	sub	sp, #8
 8011f28:	eb03 0040 	add.w	r0, r3, r0, lsl #1
 8011f2c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8011f30:	f006 fdaa 	bl	8018a88 <uxr_init_input_best_effort_stream>
 8011f34:	2200      	movs	r2, #0
 8011f36:	2101      	movs	r1, #1
 8011f38:	4620      	mov	r0, r4
 8011f3a:	b002      	add	sp, #8
 8011f3c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011f40:	f7ff bf1e 	b.w	8011d80 <uxr_stream_id>

08011f44 <uxr_add_input_reliable_buffer>:
 8011f44:	b510      	push	{r4, lr}
 8011f46:	b084      	sub	sp, #16
 8011f48:	4684      	mov	ip, r0
 8011f4a:	9806      	ldr	r0, [sp, #24]
 8011f4c:	9000      	str	r0, [sp, #0]
 8011f4e:	f89c 4060 	ldrb.w	r4, [ip, #96]	@ 0x60
 8011f52:	2018      	movs	r0, #24
 8011f54:	fb00 c004 	mla	r0, r0, r4, ip
 8011f58:	f104 0e01 	add.w	lr, r4, #1
 8011f5c:	3048      	adds	r0, #72	@ 0x48
 8011f5e:	f88c e060 	strb.w	lr, [ip, #96]	@ 0x60
 8011f62:	f006 fddd 	bl	8018b20 <uxr_init_input_reliable_stream>
 8011f66:	2200      	movs	r2, #0
 8011f68:	2102      	movs	r1, #2
 8011f6a:	4620      	mov	r0, r4
 8011f6c:	b004      	add	sp, #16
 8011f6e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011f72:	f7ff bf05 	b.w	8011d80 <uxr_stream_id>
 8011f76:	bf00      	nop

08011f78 <uxr_get_output_best_effort_stream>:
 8011f78:	7c03      	ldrb	r3, [r0, #16]
 8011f7a:	428b      	cmp	r3, r1
 8011f7c:	bf8c      	ite	hi
 8011f7e:	eb00 1001 	addhi.w	r0, r0, r1, lsl #4
 8011f82:	2000      	movls	r0, #0
 8011f84:	4770      	bx	lr
 8011f86:	bf00      	nop

08011f88 <uxr_get_output_reliable_stream>:
 8011f88:	f890 3040 	ldrb.w	r3, [r0, #64]	@ 0x40
 8011f8c:	428b      	cmp	r3, r1
 8011f8e:	bf83      	ittte	hi
 8011f90:	2328      	movhi	r3, #40	@ 0x28
 8011f92:	fb03 0001 	mlahi	r0, r3, r1, r0
 8011f96:	3018      	addhi	r0, #24
 8011f98:	2000      	movls	r0, #0
 8011f9a:	4770      	bx	lr

08011f9c <uxr_get_input_best_effort_stream>:
 8011f9c:	f890 3044 	ldrb.w	r3, [r0, #68]	@ 0x44
 8011fa0:	428b      	cmp	r3, r1
 8011fa2:	bf86      	itte	hi
 8011fa4:	3121      	addhi	r1, #33	@ 0x21
 8011fa6:	eb00 0041 	addhi.w	r0, r0, r1, lsl #1
 8011faa:	2000      	movls	r0, #0
 8011fac:	4770      	bx	lr
 8011fae:	bf00      	nop

08011fb0 <uxr_get_input_reliable_stream>:
 8011fb0:	f890 3060 	ldrb.w	r3, [r0, #96]	@ 0x60
 8011fb4:	428b      	cmp	r3, r1
 8011fb6:	bf83      	ittte	hi
 8011fb8:	2318      	movhi	r3, #24
 8011fba:	fb03 0001 	mlahi	r0, r3, r1, r0
 8011fbe:	3048      	addhi	r0, #72	@ 0x48
 8011fc0:	2000      	movls	r0, #0
 8011fc2:	4770      	bx	lr

08011fc4 <uxr_output_streams_confirmed>:
 8011fc4:	f890 3040 	ldrb.w	r3, [r0, #64]	@ 0x40
 8011fc8:	b183      	cbz	r3, 8011fec <uxr_output_streams_confirmed+0x28>
 8011fca:	b570      	push	{r4, r5, r6, lr}
 8011fcc:	4606      	mov	r6, r0
 8011fce:	f100 0518 	add.w	r5, r0, #24
 8011fd2:	2400      	movs	r4, #0
 8011fd4:	e001      	b.n	8011fda <uxr_output_streams_confirmed+0x16>
 8011fd6:	3528      	adds	r5, #40	@ 0x28
 8011fd8:	b138      	cbz	r0, 8011fea <uxr_output_streams_confirmed+0x26>
 8011fda:	4628      	mov	r0, r5
 8011fdc:	f007 fa72 	bl	80194c4 <uxr_is_output_up_to_date>
 8011fe0:	f896 3040 	ldrb.w	r3, [r6, #64]	@ 0x40
 8011fe4:	3401      	adds	r4, #1
 8011fe6:	42a3      	cmp	r3, r4
 8011fe8:	d8f5      	bhi.n	8011fd6 <uxr_output_streams_confirmed+0x12>
 8011fea:	bd70      	pop	{r4, r5, r6, pc}
 8011fec:	2001      	movs	r0, #1
 8011fee:	4770      	bx	lr

08011ff0 <uxr_buffer_submessage_header>:
 8011ff0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011ff2:	4604      	mov	r4, r0
 8011ff4:	460e      	mov	r6, r1
 8011ff6:	2104      	movs	r1, #4
 8011ff8:	4615      	mov	r5, r2
 8011ffa:	461f      	mov	r7, r3
 8011ffc:	f7fe fb20 	bl	8010640 <ucdr_align_to>
 8012000:	2301      	movs	r3, #1
 8012002:	ea47 0203 	orr.w	r2, r7, r3
 8012006:	4631      	mov	r1, r6
 8012008:	7523      	strb	r3, [r4, #20]
 801200a:	4620      	mov	r0, r4
 801200c:	462b      	mov	r3, r5
 801200e:	f000 fa27 	bl	8012460 <uxr_serialize_submessage_header>
 8012012:	4620      	mov	r0, r4
 8012014:	f7fe fb2a 	bl	801066c <ucdr_buffer_remaining>
 8012018:	42a8      	cmp	r0, r5
 801201a:	bf34      	ite	cc
 801201c:	2000      	movcc	r0, #0
 801201e:	2001      	movcs	r0, #1
 8012020:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012022:	bf00      	nop

08012024 <uxr_read_submessage_header>:
 8012024:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012028:	4604      	mov	r4, r0
 801202a:	460d      	mov	r5, r1
 801202c:	2104      	movs	r1, #4
 801202e:	4616      	mov	r6, r2
 8012030:	4698      	mov	r8, r3
 8012032:	f7fe fb05 	bl	8010640 <ucdr_align_to>
 8012036:	4620      	mov	r0, r4
 8012038:	f7fe fb18 	bl	801066c <ucdr_buffer_remaining>
 801203c:	2803      	cmp	r0, #3
 801203e:	bf8c      	ite	hi
 8012040:	2701      	movhi	r7, #1
 8012042:	2700      	movls	r7, #0
 8012044:	d802      	bhi.n	801204c <uxr_read_submessage_header+0x28>
 8012046:	4638      	mov	r0, r7
 8012048:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801204c:	4633      	mov	r3, r6
 801204e:	4642      	mov	r2, r8
 8012050:	4620      	mov	r0, r4
 8012052:	4629      	mov	r1, r5
 8012054:	f000 fa18 	bl	8012488 <uxr_deserialize_submessage_header>
 8012058:	f898 3000 	ldrb.w	r3, [r8]
 801205c:	f003 0201 	and.w	r2, r3, #1
 8012060:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 8012064:	f888 3000 	strb.w	r3, [r8]
 8012068:	7522      	strb	r2, [r4, #20]
 801206a:	4638      	mov	r0, r7
 801206c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08012070 <uxr_submessage_padding>:
 8012070:	f010 0003 	ands.w	r0, r0, #3
 8012074:	bf18      	it	ne
 8012076:	f1c0 0004 	rsbne	r0, r0, #4
 801207a:	4770      	bx	lr

0801207c <uxr_millis>:
 801207c:	b510      	push	{r4, lr}
 801207e:	b084      	sub	sp, #16
 8012080:	4669      	mov	r1, sp
 8012082:	2001      	movs	r0, #1
 8012084:	f7f0 fa00 	bl	8002488 <clock_gettime>
 8012088:	e89d 0015 	ldmia.w	sp, {r0, r2, r4}
 801208c:	4906      	ldr	r1, [pc, #24]	@ (80120a8 <uxr_millis+0x2c>)
 801208e:	fba0 0301 	umull	r0, r3, r0, r1
 8012092:	1900      	adds	r0, r0, r4
 8012094:	fb01 3102 	mla	r1, r1, r2, r3
 8012098:	eb41 71e4 	adc.w	r1, r1, r4, asr #31
 801209c:	4a03      	ldr	r2, [pc, #12]	@ (80120ac <uxr_millis+0x30>)
 801209e:	2300      	movs	r3, #0
 80120a0:	f7ee fdda 	bl	8000c58 <__aeabi_ldivmod>
 80120a4:	b004      	add	sp, #16
 80120a6:	bd10      	pop	{r4, pc}
 80120a8:	3b9aca00 	.word	0x3b9aca00
 80120ac:	000f4240 	.word	0x000f4240

080120b0 <uxr_nanos>:
 80120b0:	b510      	push	{r4, lr}
 80120b2:	b084      	sub	sp, #16
 80120b4:	4669      	mov	r1, sp
 80120b6:	2001      	movs	r0, #1
 80120b8:	f7f0 f9e6 	bl	8002488 <clock_gettime>
 80120bc:	4a06      	ldr	r2, [pc, #24]	@ (80120d8 <uxr_nanos+0x28>)
 80120be:	9800      	ldr	r0, [sp, #0]
 80120c0:	9902      	ldr	r1, [sp, #8]
 80120c2:	9c01      	ldr	r4, [sp, #4]
 80120c4:	fba0 0302 	umull	r0, r3, r0, r2
 80120c8:	1840      	adds	r0, r0, r1
 80120ca:	fb02 3304 	mla	r3, r2, r4, r3
 80120ce:	eb43 71e1 	adc.w	r1, r3, r1, asr #31
 80120d2:	b004      	add	sp, #16
 80120d4:	bd10      	pop	{r4, pc}
 80120d6:	bf00      	nop
 80120d8:	3b9aca00 	.word	0x3b9aca00

080120dc <on_full_output_buffer_fragmented>:
 80120dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80120e0:	460c      	mov	r4, r1
 80120e2:	b08a      	sub	sp, #40	@ 0x28
 80120e4:	f891 10c1 	ldrb.w	r1, [r1, #193]	@ 0xc1
 80120e8:	4606      	mov	r6, r0
 80120ea:	f104 0008 	add.w	r0, r4, #8
 80120ee:	f7ff ff4b 	bl	8011f88 <uxr_get_output_reliable_stream>
 80120f2:	4605      	mov	r5, r0
 80120f4:	f007 f9f0 	bl	80194d8 <get_available_free_slots>
 80120f8:	b968      	cbnz	r0, 8012116 <on_full_output_buffer_fragmented+0x3a>
 80120fa:	e9d4 312e 	ldrd	r3, r1, [r4, #184]	@ 0xb8
 80120fe:	4620      	mov	r0, r4
 8012100:	4798      	blx	r3
 8012102:	b918      	cbnz	r0, 801210c <on_full_output_buffer_fragmented+0x30>
 8012104:	2001      	movs	r0, #1
 8012106:	b00a      	add	sp, #40	@ 0x28
 8012108:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801210c:	4628      	mov	r0, r5
 801210e:	f007 f9e3 	bl	80194d8 <get_available_free_slots>
 8012112:	2800      	cmp	r0, #0
 8012114:	d0f6      	beq.n	8012104 <on_full_output_buffer_fragmented+0x28>
 8012116:	8929      	ldrh	r1, [r5, #8]
 8012118:	89eb      	ldrh	r3, [r5, #14]
 801211a:	7b28      	ldrb	r0, [r5, #12]
 801211c:	686a      	ldr	r2, [r5, #4]
 801211e:	fbb2 f8f1 	udiv	r8, r2, r1
 8012122:	fbb3 f2f1 	udiv	r2, r3, r1
 8012126:	fb01 3112 	mls	r1, r1, r2, r3
 801212a:	f5c0 407f 	rsb	r0, r0, #65280	@ 0xff00
 801212e:	b289      	uxth	r1, r1
 8012130:	fb08 f101 	mul.w	r1, r8, r1
 8012134:	30fc      	adds	r0, #252	@ 0xfc
 8012136:	f1a8 0804 	sub.w	r8, r8, #4
 801213a:	f8d4 30c4 	ldr.w	r3, [r4, #196]	@ 0xc4
 801213e:	4440      	add	r0, r8
 8012140:	b287      	uxth	r7, r0
 8012142:	1bdb      	subs	r3, r3, r7
 8012144:	f8c4 30c4 	str.w	r3, [r4, #196]	@ 0xc4
 8012148:	682b      	ldr	r3, [r5, #0]
 801214a:	3104      	adds	r1, #4
 801214c:	4419      	add	r1, r3
 801214e:	4642      	mov	r2, r8
 8012150:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8012154:	9300      	str	r3, [sp, #0]
 8012156:	a802      	add	r0, sp, #8
 8012158:	2300      	movs	r3, #0
 801215a:	f7fe fa45 	bl	80105e8 <ucdr_init_buffer_origin_offset>
 801215e:	f8d4 20c4 	ldr.w	r2, [r4, #196]	@ 0xc4
 8012162:	f102 0308 	add.w	r3, r2, #8
 8012166:	4543      	cmp	r3, r8
 8012168:	d928      	bls.n	80121bc <on_full_output_buffer_fragmented+0xe0>
 801216a:	463a      	mov	r2, r7
 801216c:	2300      	movs	r3, #0
 801216e:	210d      	movs	r1, #13
 8012170:	a802      	add	r0, sp, #8
 8012172:	f7ff ff3d 	bl	8011ff0 <uxr_buffer_submessage_header>
 8012176:	8929      	ldrh	r1, [r5, #8]
 8012178:	89eb      	ldrh	r3, [r5, #14]
 801217a:	fbb3 f2f1 	udiv	r2, r3, r1
 801217e:	fb01 3312 	mls	r3, r1, r2, r3
 8012182:	b29b      	uxth	r3, r3
 8012184:	686a      	ldr	r2, [r5, #4]
 8012186:	fbb2 f2f1 	udiv	r2, r2, r1
 801218a:	fb02 f303 	mul.w	r3, r2, r3
 801218e:	682a      	ldr	r2, [r5, #0]
 8012190:	f842 8003 	str.w	r8, [r2, r3]
 8012194:	89e8      	ldrh	r0, [r5, #14]
 8012196:	2101      	movs	r1, #1
 8012198:	f007 faee 	bl	8019778 <uxr_seq_num_add>
 801219c:	9904      	ldr	r1, [sp, #16]
 801219e:	9a03      	ldr	r2, [sp, #12]
 80121a0:	81e8      	strh	r0, [r5, #14]
 80121a2:	1a52      	subs	r2, r2, r1
 80121a4:	4630      	mov	r0, r6
 80121a6:	f7fe fa31 	bl	801060c <ucdr_init_buffer>
 80121aa:	4630      	mov	r0, r6
 80121ac:	490f      	ldr	r1, [pc, #60]	@ (80121ec <on_full_output_buffer_fragmented+0x110>)
 80121ae:	4622      	mov	r2, r4
 80121b0:	f7fe fa00 	bl	80105b4 <ucdr_set_on_full_buffer_callback>
 80121b4:	2000      	movs	r0, #0
 80121b6:	b00a      	add	sp, #40	@ 0x28
 80121b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80121bc:	b292      	uxth	r2, r2
 80121be:	2302      	movs	r3, #2
 80121c0:	210d      	movs	r1, #13
 80121c2:	a802      	add	r0, sp, #8
 80121c4:	f7ff ff14 	bl	8011ff0 <uxr_buffer_submessage_header>
 80121c8:	8928      	ldrh	r0, [r5, #8]
 80121ca:	89eb      	ldrh	r3, [r5, #14]
 80121cc:	fbb3 f1f0 	udiv	r1, r3, r0
 80121d0:	fb00 3311 	mls	r3, r0, r1, r3
 80121d4:	f8d4 20c4 	ldr.w	r2, [r4, #196]	@ 0xc4
 80121d8:	6869      	ldr	r1, [r5, #4]
 80121da:	fbb1 f1f0 	udiv	r1, r1, r0
 80121de:	b29b      	uxth	r3, r3
 80121e0:	fb01 f303 	mul.w	r3, r1, r3
 80121e4:	6829      	ldr	r1, [r5, #0]
 80121e6:	3208      	adds	r2, #8
 80121e8:	50ca      	str	r2, [r1, r3]
 80121ea:	e7d3      	b.n	8012194 <on_full_output_buffer_fragmented+0xb8>
 80121ec:	080120dd 	.word	0x080120dd

080121f0 <uxr_prepare_output_stream>:
 80121f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80121f2:	b087      	sub	sp, #28
 80121f4:	2707      	movs	r7, #7
 80121f6:	9202      	str	r2, [sp, #8]
 80121f8:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 80121fa:	9103      	str	r1, [sp, #12]
 80121fc:	2500      	movs	r5, #0
 80121fe:	3204      	adds	r2, #4
 8012200:	e9cd 7500 	strd	r7, r5, [sp]
 8012204:	461c      	mov	r4, r3
 8012206:	4606      	mov	r6, r0
 8012208:	f7ff fc54 	bl	8011ab4 <uxr_prepare_stream_to_write_submessage>
 801220c:	f080 0201 	eor.w	r2, r0, #1
 8012210:	b2d2      	uxtb	r2, r2
 8012212:	75a2      	strb	r2, [r4, #22]
 8012214:	b112      	cbz	r2, 801221c <uxr_prepare_output_stream+0x2c>
 8012216:	4628      	mov	r0, r5
 8012218:	b007      	add	sp, #28
 801221a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801221c:	aa05      	add	r2, sp, #20
 801221e:	9902      	ldr	r1, [sp, #8]
 8012220:	4630      	mov	r0, r6
 8012222:	f7ff fd7d 	bl	8011d20 <uxr_init_base_object_request>
 8012226:	a905      	add	r1, sp, #20
 8012228:	4605      	mov	r5, r0
 801222a:	4620      	mov	r0, r4
 801222c:	f001 f88c 	bl	8013348 <uxr_serialize_WRITE_DATA_Payload_Data>
 8012230:	e9d4 2101 	ldrd	r2, r1, [r4, #4]
 8012234:	69a6      	ldr	r6, [r4, #24]
 8012236:	69e7      	ldr	r7, [r4, #28]
 8012238:	1a52      	subs	r2, r2, r1
 801223a:	4620      	mov	r0, r4
 801223c:	f7fe f9e6 	bl	801060c <ucdr_init_buffer>
 8012240:	4620      	mov	r0, r4
 8012242:	463a      	mov	r2, r7
 8012244:	4631      	mov	r1, r6
 8012246:	f7fe f9b5 	bl	80105b4 <ucdr_set_on_full_buffer_callback>
 801224a:	4628      	mov	r0, r5
 801224c:	b007      	add	sp, #28
 801224e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08012250 <uxr_prepare_output_stream_fragmented>:
 8012250:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012254:	b091      	sub	sp, #68	@ 0x44
 8012256:	4605      	mov	r5, r0
 8012258:	9105      	str	r1, [sp, #20]
 801225a:	3008      	adds	r0, #8
 801225c:	f3c1 2107 	ubfx	r1, r1, #8, #8
 8012260:	461e      	mov	r6, r3
 8012262:	9204      	str	r2, [sp, #16]
 8012264:	f7ff fe90 	bl	8011f88 <uxr_get_output_reliable_stream>
 8012268:	f89d 3016 	ldrb.w	r3, [sp, #22]
 801226c:	2b01      	cmp	r3, #1
 801226e:	f000 8091 	beq.w	8012394 <uxr_prepare_output_stream_fragmented+0x144>
 8012272:	4604      	mov	r4, r0
 8012274:	2800      	cmp	r0, #0
 8012276:	f000 808d 	beq.w	8012394 <uxr_prepare_output_stream_fragmented+0x144>
 801227a:	f007 f92d 	bl	80194d8 <get_available_free_slots>
 801227e:	2800      	cmp	r0, #0
 8012280:	f000 8083 	beq.w	801238a <uxr_prepare_output_stream_fragmented+0x13a>
 8012284:	8922      	ldrh	r2, [r4, #8]
 8012286:	89e7      	ldrh	r7, [r4, #14]
 8012288:	fbb7 f9f2 	udiv	r9, r7, r2
 801228c:	fb02 7919 	mls	r9, r2, r9, r7
 8012290:	fa1f f989 	uxth.w	r9, r9
 8012294:	6863      	ldr	r3, [r4, #4]
 8012296:	fbb3 f2f2 	udiv	r2, r3, r2
 801229a:	6823      	ldr	r3, [r4, #0]
 801229c:	9203      	str	r2, [sp, #12]
 801229e:	fb02 f909 	mul.w	r9, r2, r9
 80122a2:	f109 0904 	add.w	r9, r9, #4
 80122a6:	4499      	add	r9, r3
 80122a8:	7b23      	ldrb	r3, [r4, #12]
 80122aa:	f859 8c04 	ldr.w	r8, [r9, #-4]
 80122ae:	4543      	cmp	r3, r8
 80122b0:	f1a2 0b04 	sub.w	fp, r2, #4
 80122b4:	d37a      	bcc.n	80123ac <uxr_prepare_output_stream_fragmented+0x15c>
 80122b6:	f1ab 0a04 	sub.w	sl, fp, #4
 80122ba:	ebaa 0a03 	sub.w	sl, sl, r3
 80122be:	465a      	mov	r2, fp
 80122c0:	2300      	movs	r3, #0
 80122c2:	4649      	mov	r1, r9
 80122c4:	a808      	add	r0, sp, #32
 80122c6:	f8cd 8000 	str.w	r8, [sp]
 80122ca:	f7fe f98d 	bl	80105e8 <ucdr_init_buffer_origin_offset>
 80122ce:	9b1a      	ldr	r3, [sp, #104]	@ 0x68
 80122d0:	fa1f fa8a 	uxth.w	sl, sl
 80122d4:	4652      	mov	r2, sl
 80122d6:	f103 0a08 	add.w	sl, r3, #8
 80122da:	45da      	cmp	sl, fp
 80122dc:	bf34      	ite	cc
 80122de:	2302      	movcc	r3, #2
 80122e0:	2300      	movcs	r3, #0
 80122e2:	210d      	movs	r1, #13
 80122e4:	a808      	add	r0, sp, #32
 80122e6:	f7ff fe83 	bl	8011ff0 <uxr_buffer_submessage_header>
 80122ea:	8921      	ldrh	r1, [r4, #8]
 80122ec:	fbb7 f2f1 	udiv	r2, r7, r1
 80122f0:	fb01 7212 	mls	r2, r1, r2, r7
 80122f4:	b292      	uxth	r2, r2
 80122f6:	6863      	ldr	r3, [r4, #4]
 80122f8:	fbb3 f3f1 	udiv	r3, r3, r1
 80122fc:	fb02 f303 	mul.w	r3, r2, r3
 8012300:	6822      	ldr	r2, [r4, #0]
 8012302:	4638      	mov	r0, r7
 8012304:	f842 b003 	str.w	fp, [r2, r3]
 8012308:	2101      	movs	r1, #1
 801230a:	f007 fa35 	bl	8019778 <uxr_seq_num_add>
 801230e:	9b03      	ldr	r3, [sp, #12]
 8012310:	f108 0104 	add.w	r1, r8, #4
 8012314:	f1a3 0208 	sub.w	r2, r3, #8
 8012318:	eba2 0208 	sub.w	r2, r2, r8
 801231c:	4449      	add	r1, r9
 801231e:	4607      	mov	r7, r0
 8012320:	4630      	mov	r0, r6
 8012322:	f7fe f973 	bl	801060c <ucdr_init_buffer>
 8012326:	9b1a      	ldr	r3, [sp, #104]	@ 0x68
 8012328:	81e7      	strh	r7, [r4, #14]
 801232a:	1d1a      	adds	r2, r3, #4
 801232c:	f5b2 3f80 	cmp.w	r2, #65536	@ 0x10000
 8012330:	bf28      	it	cs
 8012332:	2200      	movcs	r2, #0
 8012334:	2300      	movs	r3, #0
 8012336:	b292      	uxth	r2, r2
 8012338:	2107      	movs	r1, #7
 801233a:	4630      	mov	r0, r6
 801233c:	f7ff fe58 	bl	8011ff0 <uxr_buffer_submessage_header>
 8012340:	9904      	ldr	r1, [sp, #16]
 8012342:	aa07      	add	r2, sp, #28
 8012344:	4628      	mov	r0, r5
 8012346:	f7ff fceb 	bl	8011d20 <uxr_init_base_object_request>
 801234a:	4604      	mov	r4, r0
 801234c:	b318      	cbz	r0, 8012396 <uxr_prepare_output_stream_fragmented+0x146>
 801234e:	a907      	add	r1, sp, #28
 8012350:	4630      	mov	r0, r6
 8012352:	f000 fff9 	bl	8013348 <uxr_serialize_WRITE_DATA_Payload_Data>
 8012356:	e9d6 2101 	ldrd	r2, r1, [r6, #4]
 801235a:	4630      	mov	r0, r6
 801235c:	1a52      	subs	r2, r2, r1
 801235e:	f7fe f955 	bl	801060c <ucdr_init_buffer>
 8012362:	9b05      	ldr	r3, [sp, #20]
 8012364:	f8c5 30c0 	str.w	r3, [r5, #192]	@ 0xc0
 8012368:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 801236a:	f8c5 30b8 	str.w	r3, [r5, #184]	@ 0xb8
 801236e:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 8012370:	491b      	ldr	r1, [pc, #108]	@ (80123e0 <uxr_prepare_output_stream_fragmented+0x190>)
 8012372:	f8c5 a0c4 	str.w	sl, [r5, #196]	@ 0xc4
 8012376:	4630      	mov	r0, r6
 8012378:	f8c5 30bc 	str.w	r3, [r5, #188]	@ 0xbc
 801237c:	462a      	mov	r2, r5
 801237e:	f7fe f919 	bl	80105b4 <ucdr_set_on_full_buffer_callback>
 8012382:	4620      	mov	r0, r4
 8012384:	b011      	add	sp, #68	@ 0x44
 8012386:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801238a:	991c      	ldr	r1, [sp, #112]	@ 0x70
 801238c:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 801238e:	4628      	mov	r0, r5
 8012390:	4798      	blx	r3
 8012392:	b920      	cbnz	r0, 801239e <uxr_prepare_output_stream_fragmented+0x14e>
 8012394:	2400      	movs	r4, #0
 8012396:	4620      	mov	r0, r4
 8012398:	b011      	add	sp, #68	@ 0x44
 801239a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801239e:	4620      	mov	r0, r4
 80123a0:	f007 f89a 	bl	80194d8 <get_available_free_slots>
 80123a4:	2800      	cmp	r0, #0
 80123a6:	f47f af6d 	bne.w	8012284 <uxr_prepare_output_stream_fragmented+0x34>
 80123aa:	e7f3      	b.n	8012394 <uxr_prepare_output_stream_fragmented+0x144>
 80123ac:	4638      	mov	r0, r7
 80123ae:	2101      	movs	r1, #1
 80123b0:	f007 f9e2 	bl	8019778 <uxr_seq_num_add>
 80123b4:	8921      	ldrh	r1, [r4, #8]
 80123b6:	fbb0 f2f1 	udiv	r2, r0, r1
 80123ba:	fb01 0912 	mls	r9, r1, r2, r0
 80123be:	fa1f f289 	uxth.w	r2, r9
 80123c2:	6863      	ldr	r3, [r4, #4]
 80123c4:	fbb3 f9f1 	udiv	r9, r3, r1
 80123c8:	6823      	ldr	r3, [r4, #0]
 80123ca:	fb02 f909 	mul.w	r9, r2, r9
 80123ce:	f109 0904 	add.w	r9, r9, #4
 80123d2:	4499      	add	r9, r3
 80123d4:	4607      	mov	r7, r0
 80123d6:	7b23      	ldrb	r3, [r4, #12]
 80123d8:	f859 8c04 	ldr.w	r8, [r9, #-4]
 80123dc:	e76b      	b.n	80122b6 <uxr_prepare_output_stream_fragmented+0x66>
 80123de:	bf00      	nop
 80123e0:	080120dd 	.word	0x080120dd

080123e4 <uxr_serialize_message_header>:
 80123e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80123e6:	b083      	sub	sp, #12
 80123e8:	4616      	mov	r6, r2
 80123ea:	4604      	mov	r4, r0
 80123ec:	9301      	str	r3, [sp, #4]
 80123ee:	460d      	mov	r5, r1
 80123f0:	9f08      	ldr	r7, [sp, #32]
 80123f2:	f7fc ffbf 	bl	800f374 <ucdr_serialize_uint8_t>
 80123f6:	4631      	mov	r1, r6
 80123f8:	4620      	mov	r0, r4
 80123fa:	f7fc ffbb 	bl	800f374 <ucdr_serialize_uint8_t>
 80123fe:	9a01      	ldr	r2, [sp, #4]
 8012400:	2101      	movs	r1, #1
 8012402:	4620      	mov	r0, r4
 8012404:	f7fd f862 	bl	800f4cc <ucdr_serialize_endian_uint16_t>
 8012408:	062b      	lsls	r3, r5, #24
 801240a:	d501      	bpl.n	8012410 <uxr_serialize_message_header+0x2c>
 801240c:	b003      	add	sp, #12
 801240e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012410:	2204      	movs	r2, #4
 8012412:	4639      	mov	r1, r7
 8012414:	4620      	mov	r0, r4
 8012416:	b003      	add	sp, #12
 8012418:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 801241c:	f006 b8e8 	b.w	80185f0 <ucdr_serialize_array_uint8_t>

08012420 <uxr_deserialize_message_header>:
 8012420:	b5f0      	push	{r4, r5, r6, r7, lr}
 8012422:	b083      	sub	sp, #12
 8012424:	4616      	mov	r6, r2
 8012426:	4604      	mov	r4, r0
 8012428:	9301      	str	r3, [sp, #4]
 801242a:	460d      	mov	r5, r1
 801242c:	9f08      	ldr	r7, [sp, #32]
 801242e:	f7fc ffb7 	bl	800f3a0 <ucdr_deserialize_uint8_t>
 8012432:	4631      	mov	r1, r6
 8012434:	4620      	mov	r0, r4
 8012436:	f7fc ffb3 	bl	800f3a0 <ucdr_deserialize_uint8_t>
 801243a:	9a01      	ldr	r2, [sp, #4]
 801243c:	2101      	movs	r1, #1
 801243e:	4620      	mov	r0, r4
 8012440:	f7fd f938 	bl	800f6b4 <ucdr_deserialize_endian_uint16_t>
 8012444:	f995 3000 	ldrsb.w	r3, [r5]
 8012448:	2b00      	cmp	r3, #0
 801244a:	da01      	bge.n	8012450 <uxr_deserialize_message_header+0x30>
 801244c:	b003      	add	sp, #12
 801244e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012450:	2204      	movs	r2, #4
 8012452:	4639      	mov	r1, r7
 8012454:	4620      	mov	r0, r4
 8012456:	b003      	add	sp, #12
 8012458:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 801245c:	f006 b92c 	b.w	80186b8 <ucdr_deserialize_array_uint8_t>

08012460 <uxr_serialize_submessage_header>:
 8012460:	b530      	push	{r4, r5, lr}
 8012462:	b083      	sub	sp, #12
 8012464:	4615      	mov	r5, r2
 8012466:	4604      	mov	r4, r0
 8012468:	9301      	str	r3, [sp, #4]
 801246a:	f7fc ff83 	bl	800f374 <ucdr_serialize_uint8_t>
 801246e:	4629      	mov	r1, r5
 8012470:	4620      	mov	r0, r4
 8012472:	f7fc ff7f 	bl	800f374 <ucdr_serialize_uint8_t>
 8012476:	9a01      	ldr	r2, [sp, #4]
 8012478:	2101      	movs	r1, #1
 801247a:	4620      	mov	r0, r4
 801247c:	b003      	add	sp, #12
 801247e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8012482:	f7fd b823 	b.w	800f4cc <ucdr_serialize_endian_uint16_t>
 8012486:	bf00      	nop

08012488 <uxr_deserialize_submessage_header>:
 8012488:	b530      	push	{r4, r5, lr}
 801248a:	b083      	sub	sp, #12
 801248c:	4615      	mov	r5, r2
 801248e:	4604      	mov	r4, r0
 8012490:	9301      	str	r3, [sp, #4]
 8012492:	f7fc ff85 	bl	800f3a0 <ucdr_deserialize_uint8_t>
 8012496:	4629      	mov	r1, r5
 8012498:	4620      	mov	r0, r4
 801249a:	f7fc ff81 	bl	800f3a0 <ucdr_deserialize_uint8_t>
 801249e:	9a01      	ldr	r2, [sp, #4]
 80124a0:	2101      	movs	r1, #1
 80124a2:	4620      	mov	r0, r4
 80124a4:	b003      	add	sp, #12
 80124a6:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80124aa:	f7fd b903 	b.w	800f6b4 <ucdr_deserialize_endian_uint16_t>
 80124ae:	bf00      	nop

080124b0 <uxr_serialize_CLIENT_Representation>:
 80124b0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80124b4:	2204      	movs	r2, #4
 80124b6:	460e      	mov	r6, r1
 80124b8:	4605      	mov	r5, r0
 80124ba:	f006 f899 	bl	80185f0 <ucdr_serialize_array_uint8_t>
 80124be:	2202      	movs	r2, #2
 80124c0:	4607      	mov	r7, r0
 80124c2:	1d31      	adds	r1, r6, #4
 80124c4:	4628      	mov	r0, r5
 80124c6:	f006 f893 	bl	80185f0 <ucdr_serialize_array_uint8_t>
 80124ca:	4038      	ands	r0, r7
 80124cc:	2202      	movs	r2, #2
 80124ce:	1db1      	adds	r1, r6, #6
 80124d0:	b2c7      	uxtb	r7, r0
 80124d2:	4628      	mov	r0, r5
 80124d4:	f006 f88c 	bl	80185f0 <ucdr_serialize_array_uint8_t>
 80124d8:	2204      	movs	r2, #4
 80124da:	4007      	ands	r7, r0
 80124dc:	f106 0108 	add.w	r1, r6, #8
 80124e0:	4628      	mov	r0, r5
 80124e2:	f006 f885 	bl	80185f0 <ucdr_serialize_array_uint8_t>
 80124e6:	7b31      	ldrb	r1, [r6, #12]
 80124e8:	4007      	ands	r7, r0
 80124ea:	4628      	mov	r0, r5
 80124ec:	f7fc ff42 	bl	800f374 <ucdr_serialize_uint8_t>
 80124f0:	7b71      	ldrb	r1, [r6, #13]
 80124f2:	4007      	ands	r7, r0
 80124f4:	4628      	mov	r0, r5
 80124f6:	f7fc ff0f 	bl	800f318 <ucdr_serialize_bool>
 80124fa:	7b73      	ldrb	r3, [r6, #13]
 80124fc:	ea07 0800 	and.w	r8, r7, r0
 8012500:	b93b      	cbnz	r3, 8012512 <uxr_serialize_CLIENT_Representation+0x62>
 8012502:	8bb1      	ldrh	r1, [r6, #28]
 8012504:	4628      	mov	r0, r5
 8012506:	f7fc ff61 	bl	800f3cc <ucdr_serialize_uint16_t>
 801250a:	ea08 0000 	and.w	r0, r8, r0
 801250e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012512:	6931      	ldr	r1, [r6, #16]
 8012514:	4628      	mov	r0, r5
 8012516:	f7fd f943 	bl	800f7a0 <ucdr_serialize_uint32_t>
 801251a:	6933      	ldr	r3, [r6, #16]
 801251c:	b1e3      	cbz	r3, 8012558 <uxr_serialize_CLIENT_Representation+0xa8>
 801251e:	b1c0      	cbz	r0, 8012552 <uxr_serialize_CLIENT_Representation+0xa2>
 8012520:	4637      	mov	r7, r6
 8012522:	f04f 0900 	mov.w	r9, #0
 8012526:	e001      	b.n	801252c <uxr_serialize_CLIENT_Representation+0x7c>
 8012528:	3708      	adds	r7, #8
 801252a:	b194      	cbz	r4, 8012552 <uxr_serialize_CLIENT_Representation+0xa2>
 801252c:	6979      	ldr	r1, [r7, #20]
 801252e:	4628      	mov	r0, r5
 8012530:	f006 f9d0 	bl	80188d4 <ucdr_serialize_string>
 8012534:	69b9      	ldr	r1, [r7, #24]
 8012536:	4604      	mov	r4, r0
 8012538:	4628      	mov	r0, r5
 801253a:	f006 f9cb 	bl	80188d4 <ucdr_serialize_string>
 801253e:	6933      	ldr	r3, [r6, #16]
 8012540:	f109 0901 	add.w	r9, r9, #1
 8012544:	4004      	ands	r4, r0
 8012546:	4599      	cmp	r9, r3
 8012548:	b2e4      	uxtb	r4, r4
 801254a:	d3ed      	bcc.n	8012528 <uxr_serialize_CLIENT_Representation+0x78>
 801254c:	ea08 0804 	and.w	r8, r8, r4
 8012550:	e7d7      	b.n	8012502 <uxr_serialize_CLIENT_Representation+0x52>
 8012552:	f04f 0800 	mov.w	r8, #0
 8012556:	e7d4      	b.n	8012502 <uxr_serialize_CLIENT_Representation+0x52>
 8012558:	ea08 0800 	and.w	r8, r8, r0
 801255c:	e7d1      	b.n	8012502 <uxr_serialize_CLIENT_Representation+0x52>
 801255e:	bf00      	nop

08012560 <uxr_deserialize_CLIENT_Representation>:
 8012560:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012564:	2204      	movs	r2, #4
 8012566:	460c      	mov	r4, r1
 8012568:	4605      	mov	r5, r0
 801256a:	f006 f8a5 	bl	80186b8 <ucdr_deserialize_array_uint8_t>
 801256e:	2202      	movs	r2, #2
 8012570:	4607      	mov	r7, r0
 8012572:	1d21      	adds	r1, r4, #4
 8012574:	4628      	mov	r0, r5
 8012576:	f006 f89f 	bl	80186b8 <ucdr_deserialize_array_uint8_t>
 801257a:	4038      	ands	r0, r7
 801257c:	2202      	movs	r2, #2
 801257e:	1da1      	adds	r1, r4, #6
 8012580:	b2c6      	uxtb	r6, r0
 8012582:	4628      	mov	r0, r5
 8012584:	f006 f898 	bl	80186b8 <ucdr_deserialize_array_uint8_t>
 8012588:	2204      	movs	r2, #4
 801258a:	4006      	ands	r6, r0
 801258c:	f104 0108 	add.w	r1, r4, #8
 8012590:	4628      	mov	r0, r5
 8012592:	f006 f891 	bl	80186b8 <ucdr_deserialize_array_uint8_t>
 8012596:	f104 010c 	add.w	r1, r4, #12
 801259a:	4006      	ands	r6, r0
 801259c:	4628      	mov	r0, r5
 801259e:	f7fc feff 	bl	800f3a0 <ucdr_deserialize_uint8_t>
 80125a2:	f104 010d 	add.w	r1, r4, #13
 80125a6:	ea06 0700 	and.w	r7, r6, r0
 80125aa:	4628      	mov	r0, r5
 80125ac:	f7fc feca 	bl	800f344 <ucdr_deserialize_bool>
 80125b0:	7b63      	ldrb	r3, [r4, #13]
 80125b2:	4007      	ands	r7, r0
 80125b4:	b93b      	cbnz	r3, 80125c6 <uxr_deserialize_CLIENT_Representation+0x66>
 80125b6:	f104 011c 	add.w	r1, r4, #28
 80125ba:	4628      	mov	r0, r5
 80125bc:	f7fd f806 	bl	800f5cc <ucdr_deserialize_uint16_t>
 80125c0:	4038      	ands	r0, r7
 80125c2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80125c6:	f104 0110 	add.w	r1, r4, #16
 80125ca:	4628      	mov	r0, r5
 80125cc:	f7fd fa18 	bl	800fa00 <ucdr_deserialize_uint32_t>
 80125d0:	6923      	ldr	r3, [r4, #16]
 80125d2:	2b01      	cmp	r3, #1
 80125d4:	d903      	bls.n	80125de <uxr_deserialize_CLIENT_Representation+0x7e>
 80125d6:	2301      	movs	r3, #1
 80125d8:	75ab      	strb	r3, [r5, #22]
 80125da:	2700      	movs	r7, #0
 80125dc:	e7eb      	b.n	80125b6 <uxr_deserialize_CLIENT_Representation+0x56>
 80125de:	b30b      	cbz	r3, 8012624 <uxr_deserialize_CLIENT_Representation+0xc4>
 80125e0:	2800      	cmp	r0, #0
 80125e2:	d0fa      	beq.n	80125da <uxr_deserialize_CLIENT_Representation+0x7a>
 80125e4:	46a0      	mov	r8, r4
 80125e6:	f04f 0900 	mov.w	r9, #0
 80125ea:	e001      	b.n	80125f0 <uxr_deserialize_CLIENT_Representation+0x90>
 80125ec:	2e00      	cmp	r6, #0
 80125ee:	d0f4      	beq.n	80125da <uxr_deserialize_CLIENT_Representation+0x7a>
 80125f0:	f8d8 1014 	ldr.w	r1, [r8, #20]
 80125f4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80125f8:	4628      	mov	r0, r5
 80125fa:	f006 f97b 	bl	80188f4 <ucdr_deserialize_string>
 80125fe:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8012602:	4606      	mov	r6, r0
 8012604:	f8d8 1018 	ldr.w	r1, [r8, #24]
 8012608:	4628      	mov	r0, r5
 801260a:	f006 f973 	bl	80188f4 <ucdr_deserialize_string>
 801260e:	6923      	ldr	r3, [r4, #16]
 8012610:	f109 0901 	add.w	r9, r9, #1
 8012614:	4006      	ands	r6, r0
 8012616:	4599      	cmp	r9, r3
 8012618:	f108 0808 	add.w	r8, r8, #8
 801261c:	b2f6      	uxtb	r6, r6
 801261e:	d3e5      	bcc.n	80125ec <uxr_deserialize_CLIENT_Representation+0x8c>
 8012620:	4037      	ands	r7, r6
 8012622:	e7c8      	b.n	80125b6 <uxr_deserialize_CLIENT_Representation+0x56>
 8012624:	4007      	ands	r7, r0
 8012626:	e7c6      	b.n	80125b6 <uxr_deserialize_CLIENT_Representation+0x56>

08012628 <uxr_serialize_AGENT_Representation>:
 8012628:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801262c:	2204      	movs	r2, #4
 801262e:	460f      	mov	r7, r1
 8012630:	4605      	mov	r5, r0
 8012632:	f005 ffdd 	bl	80185f0 <ucdr_serialize_array_uint8_t>
 8012636:	2202      	movs	r2, #2
 8012638:	4604      	mov	r4, r0
 801263a:	1d39      	adds	r1, r7, #4
 801263c:	4628      	mov	r0, r5
 801263e:	f005 ffd7 	bl	80185f0 <ucdr_serialize_array_uint8_t>
 8012642:	4020      	ands	r0, r4
 8012644:	2202      	movs	r2, #2
 8012646:	1db9      	adds	r1, r7, #6
 8012648:	b2c4      	uxtb	r4, r0
 801264a:	4628      	mov	r0, r5
 801264c:	f005 ffd0 	bl	80185f0 <ucdr_serialize_array_uint8_t>
 8012650:	7a39      	ldrb	r1, [r7, #8]
 8012652:	4004      	ands	r4, r0
 8012654:	4628      	mov	r0, r5
 8012656:	f7fc fe5f 	bl	800f318 <ucdr_serialize_bool>
 801265a:	7a3b      	ldrb	r3, [r7, #8]
 801265c:	ea00 0804 	and.w	r8, r0, r4
 8012660:	b913      	cbnz	r3, 8012668 <uxr_serialize_AGENT_Representation+0x40>
 8012662:	4640      	mov	r0, r8
 8012664:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012668:	68f9      	ldr	r1, [r7, #12]
 801266a:	4628      	mov	r0, r5
 801266c:	f7fd f898 	bl	800f7a0 <ucdr_serialize_uint32_t>
 8012670:	68fb      	ldr	r3, [r7, #12]
 8012672:	b303      	cbz	r3, 80126b6 <uxr_serialize_AGENT_Representation+0x8e>
 8012674:	b1d0      	cbz	r0, 80126ac <uxr_serialize_AGENT_Representation+0x84>
 8012676:	463e      	mov	r6, r7
 8012678:	f04f 0900 	mov.w	r9, #0
 801267c:	e001      	b.n	8012682 <uxr_serialize_AGENT_Representation+0x5a>
 801267e:	3608      	adds	r6, #8
 8012680:	b1a4      	cbz	r4, 80126ac <uxr_serialize_AGENT_Representation+0x84>
 8012682:	6931      	ldr	r1, [r6, #16]
 8012684:	4628      	mov	r0, r5
 8012686:	f006 f925 	bl	80188d4 <ucdr_serialize_string>
 801268a:	6971      	ldr	r1, [r6, #20]
 801268c:	4604      	mov	r4, r0
 801268e:	4628      	mov	r0, r5
 8012690:	f006 f920 	bl	80188d4 <ucdr_serialize_string>
 8012694:	68fb      	ldr	r3, [r7, #12]
 8012696:	f109 0901 	add.w	r9, r9, #1
 801269a:	4004      	ands	r4, r0
 801269c:	4599      	cmp	r9, r3
 801269e:	b2e4      	uxtb	r4, r4
 80126a0:	d3ed      	bcc.n	801267e <uxr_serialize_AGENT_Representation+0x56>
 80126a2:	ea08 0804 	and.w	r8, r8, r4
 80126a6:	4640      	mov	r0, r8
 80126a8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80126ac:	f04f 0800 	mov.w	r8, #0
 80126b0:	4640      	mov	r0, r8
 80126b2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80126b6:	ea08 0800 	and.w	r8, r8, r0
 80126ba:	e7d2      	b.n	8012662 <uxr_serialize_AGENT_Representation+0x3a>

080126bc <uxr_serialize_DATAWRITER_Representation>:
 80126bc:	b570      	push	{r4, r5, r6, lr}
 80126be:	460d      	mov	r5, r1
 80126c0:	7809      	ldrb	r1, [r1, #0]
 80126c2:	4606      	mov	r6, r0
 80126c4:	f7fc fe56 	bl	800f374 <ucdr_serialize_uint8_t>
 80126c8:	4604      	mov	r4, r0
 80126ca:	b130      	cbz	r0, 80126da <uxr_serialize_DATAWRITER_Representation+0x1e>
 80126cc:	782b      	ldrb	r3, [r5, #0]
 80126ce:	2b02      	cmp	r3, #2
 80126d0:	d00c      	beq.n	80126ec <uxr_serialize_DATAWRITER_Representation+0x30>
 80126d2:	2b03      	cmp	r3, #3
 80126d4:	d010      	beq.n	80126f8 <uxr_serialize_DATAWRITER_Representation+0x3c>
 80126d6:	2b01      	cmp	r3, #1
 80126d8:	d008      	beq.n	80126ec <uxr_serialize_DATAWRITER_Representation+0x30>
 80126da:	2202      	movs	r2, #2
 80126dc:	f505 7102 	add.w	r1, r5, #520	@ 0x208
 80126e0:	4630      	mov	r0, r6
 80126e2:	f005 ff85 	bl	80185f0 <ucdr_serialize_array_uint8_t>
 80126e6:	4020      	ands	r0, r4
 80126e8:	b2c0      	uxtb	r0, r0
 80126ea:	bd70      	pop	{r4, r5, r6, pc}
 80126ec:	6869      	ldr	r1, [r5, #4]
 80126ee:	4630      	mov	r0, r6
 80126f0:	f006 f8f0 	bl	80188d4 <ucdr_serialize_string>
 80126f4:	4604      	mov	r4, r0
 80126f6:	e7f0      	b.n	80126da <uxr_serialize_DATAWRITER_Representation+0x1e>
 80126f8:	4629      	mov	r1, r5
 80126fa:	4630      	mov	r0, r6
 80126fc:	f851 2f04 	ldr.w	r2, [r1, #4]!
 8012700:	3104      	adds	r1, #4
 8012702:	f7fe f81f 	bl	8010744 <ucdr_serialize_sequence_uint8_t>
 8012706:	4604      	mov	r4, r0
 8012708:	e7e7      	b.n	80126da <uxr_serialize_DATAWRITER_Representation+0x1e>
 801270a:	bf00      	nop

0801270c <uxr_serialize_ObjectVariant.part.0>:
 801270c:	b570      	push	{r4, r5, r6, lr}
 801270e:	780b      	ldrb	r3, [r1, #0]
 8012710:	3b01      	subs	r3, #1
 8012712:	460c      	mov	r4, r1
 8012714:	4605      	mov	r5, r0
 8012716:	2b0d      	cmp	r3, #13
 8012718:	d854      	bhi.n	80127c4 <uxr_serialize_ObjectVariant.part.0+0xb8>
 801271a:	e8df f003 	tbb	[pc, r3]
 801271e:	0730      	.short	0x0730
 8012720:	07071b1b 	.word	0x07071b1b
 8012724:	0c530707 	.word	0x0c530707
 8012728:	494e0c0c 	.word	0x494e0c0c
 801272c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8012730:	3104      	adds	r1, #4
 8012732:	f7ff bfc3 	b.w	80126bc <uxr_serialize_DATAWRITER_Representation>
 8012736:	7909      	ldrb	r1, [r1, #4]
 8012738:	f7fc fe1c 	bl	800f374 <ucdr_serialize_uint8_t>
 801273c:	b1e8      	cbz	r0, 801277a <uxr_serialize_ObjectVariant.part.0+0x6e>
 801273e:	7923      	ldrb	r3, [r4, #4]
 8012740:	2b01      	cmp	r3, #1
 8012742:	d001      	beq.n	8012748 <uxr_serialize_ObjectVariant.part.0+0x3c>
 8012744:	2b02      	cmp	r3, #2
 8012746:	d13d      	bne.n	80127c4 <uxr_serialize_ObjectVariant.part.0+0xb8>
 8012748:	68a1      	ldr	r1, [r4, #8]
 801274a:	4628      	mov	r0, r5
 801274c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8012750:	f006 b8c0 	b.w	80188d4 <ucdr_serialize_string>
 8012754:	7909      	ldrb	r1, [r1, #4]
 8012756:	f7fc fe0d 	bl	800f374 <ucdr_serialize_uint8_t>
 801275a:	4606      	mov	r6, r0
 801275c:	b120      	cbz	r0, 8012768 <uxr_serialize_ObjectVariant.part.0+0x5c>
 801275e:	7923      	ldrb	r3, [r4, #4]
 8012760:	2b02      	cmp	r3, #2
 8012762:	d039      	beq.n	80127d8 <uxr_serialize_ObjectVariant.part.0+0xcc>
 8012764:	2b03      	cmp	r3, #3
 8012766:	d02f      	beq.n	80127c8 <uxr_serialize_ObjectVariant.part.0+0xbc>
 8012768:	2202      	movs	r2, #2
 801276a:	f504 7103 	add.w	r1, r4, #524	@ 0x20c
 801276e:	4628      	mov	r0, r5
 8012770:	f005 ff3e 	bl	80185f0 <ucdr_serialize_array_uint8_t>
 8012774:	4030      	ands	r0, r6
 8012776:	b2c0      	uxtb	r0, r0
 8012778:	bd70      	pop	{r4, r5, r6, pc}
 801277a:	2000      	movs	r0, #0
 801277c:	bd70      	pop	{r4, r5, r6, pc}
 801277e:	7909      	ldrb	r1, [r1, #4]
 8012780:	f7fc fdf8 	bl	800f374 <ucdr_serialize_uint8_t>
 8012784:	4606      	mov	r6, r0
 8012786:	b158      	cbz	r0, 80127a0 <uxr_serialize_ObjectVariant.part.0+0x94>
 8012788:	7923      	ldrb	r3, [r4, #4]
 801278a:	2b02      	cmp	r3, #2
 801278c:	d003      	beq.n	8012796 <uxr_serialize_ObjectVariant.part.0+0x8a>
 801278e:	2b03      	cmp	r3, #3
 8012790:	d028      	beq.n	80127e4 <uxr_serialize_ObjectVariant.part.0+0xd8>
 8012792:	2b01      	cmp	r3, #1
 8012794:	d104      	bne.n	80127a0 <uxr_serialize_ObjectVariant.part.0+0x94>
 8012796:	68a1      	ldr	r1, [r4, #8]
 8012798:	4628      	mov	r0, r5
 801279a:	f006 f89b 	bl	80188d4 <ucdr_serialize_string>
 801279e:	4606      	mov	r6, r0
 80127a0:	f9b4 120c 	ldrsh.w	r1, [r4, #524]	@ 0x20c
 80127a4:	4628      	mov	r0, r5
 80127a6:	f7fd fb21 	bl	800fdec <ucdr_serialize_int16_t>
 80127aa:	4030      	ands	r0, r6
 80127ac:	b2c0      	uxtb	r0, r0
 80127ae:	bd70      	pop	{r4, r5, r6, pc}
 80127b0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80127b4:	3104      	adds	r1, #4
 80127b6:	f7ff be7b 	b.w	80124b0 <uxr_serialize_CLIENT_Representation>
 80127ba:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80127be:	3104      	adds	r1, #4
 80127c0:	f7ff bf32 	b.w	8012628 <uxr_serialize_AGENT_Representation>
 80127c4:	2001      	movs	r0, #1
 80127c6:	bd70      	pop	{r4, r5, r6, pc}
 80127c8:	68a2      	ldr	r2, [r4, #8]
 80127ca:	f104 010c 	add.w	r1, r4, #12
 80127ce:	4628      	mov	r0, r5
 80127d0:	f7fd ffb8 	bl	8010744 <ucdr_serialize_sequence_uint8_t>
 80127d4:	4606      	mov	r6, r0
 80127d6:	e7c7      	b.n	8012768 <uxr_serialize_ObjectVariant.part.0+0x5c>
 80127d8:	68a1      	ldr	r1, [r4, #8]
 80127da:	4628      	mov	r0, r5
 80127dc:	f006 f87a 	bl	80188d4 <ucdr_serialize_string>
 80127e0:	4606      	mov	r6, r0
 80127e2:	e7c1      	b.n	8012768 <uxr_serialize_ObjectVariant.part.0+0x5c>
 80127e4:	68a2      	ldr	r2, [r4, #8]
 80127e6:	f104 010c 	add.w	r1, r4, #12
 80127ea:	4628      	mov	r0, r5
 80127ec:	f7fd ffaa 	bl	8010744 <ucdr_serialize_sequence_uint8_t>
 80127f0:	4606      	mov	r6, r0
 80127f2:	e7d5      	b.n	80127a0 <uxr_serialize_ObjectVariant.part.0+0x94>

080127f4 <uxr_deserialize_DATAWRITER_Representation>:
 80127f4:	b570      	push	{r4, r5, r6, lr}
 80127f6:	4606      	mov	r6, r0
 80127f8:	460d      	mov	r5, r1
 80127fa:	f7fc fdd1 	bl	800f3a0 <ucdr_deserialize_uint8_t>
 80127fe:	4604      	mov	r4, r0
 8012800:	b130      	cbz	r0, 8012810 <uxr_deserialize_DATAWRITER_Representation+0x1c>
 8012802:	782b      	ldrb	r3, [r5, #0]
 8012804:	2b02      	cmp	r3, #2
 8012806:	d00c      	beq.n	8012822 <uxr_deserialize_DATAWRITER_Representation+0x2e>
 8012808:	2b03      	cmp	r3, #3
 801280a:	d012      	beq.n	8012832 <uxr_deserialize_DATAWRITER_Representation+0x3e>
 801280c:	2b01      	cmp	r3, #1
 801280e:	d008      	beq.n	8012822 <uxr_deserialize_DATAWRITER_Representation+0x2e>
 8012810:	2202      	movs	r2, #2
 8012812:	f505 7102 	add.w	r1, r5, #520	@ 0x208
 8012816:	4630      	mov	r0, r6
 8012818:	f005 ff4e 	bl	80186b8 <ucdr_deserialize_array_uint8_t>
 801281c:	4020      	ands	r0, r4
 801281e:	b2c0      	uxtb	r0, r0
 8012820:	bd70      	pop	{r4, r5, r6, pc}
 8012822:	6869      	ldr	r1, [r5, #4]
 8012824:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8012828:	4630      	mov	r0, r6
 801282a:	f006 f863 	bl	80188f4 <ucdr_deserialize_string>
 801282e:	4604      	mov	r4, r0
 8012830:	e7ee      	b.n	8012810 <uxr_deserialize_DATAWRITER_Representation+0x1c>
 8012832:	1d2b      	adds	r3, r5, #4
 8012834:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8012838:	f105 0108 	add.w	r1, r5, #8
 801283c:	4630      	mov	r0, r6
 801283e:	f7fd ff93 	bl	8010768 <ucdr_deserialize_sequence_uint8_t>
 8012842:	4604      	mov	r4, r0
 8012844:	e7e4      	b.n	8012810 <uxr_deserialize_DATAWRITER_Representation+0x1c>
 8012846:	bf00      	nop

08012848 <uxr_serialize_OBJK_DomainParticipant_Binary>:
 8012848:	b570      	push	{r4, r5, r6, lr}
 801284a:	460d      	mov	r5, r1
 801284c:	7809      	ldrb	r1, [r1, #0]
 801284e:	4606      	mov	r6, r0
 8012850:	f7fc fd62 	bl	800f318 <ucdr_serialize_bool>
 8012854:	782b      	ldrb	r3, [r5, #0]
 8012856:	4604      	mov	r4, r0
 8012858:	b94b      	cbnz	r3, 801286e <uxr_serialize_OBJK_DomainParticipant_Binary+0x26>
 801285a:	7a29      	ldrb	r1, [r5, #8]
 801285c:	4630      	mov	r0, r6
 801285e:	f7fc fd5b 	bl	800f318 <ucdr_serialize_bool>
 8012862:	7a2b      	ldrb	r3, [r5, #8]
 8012864:	4004      	ands	r4, r0
 8012866:	b2e4      	uxtb	r4, r4
 8012868:	b943      	cbnz	r3, 801287c <uxr_serialize_OBJK_DomainParticipant_Binary+0x34>
 801286a:	4620      	mov	r0, r4
 801286c:	bd70      	pop	{r4, r5, r6, pc}
 801286e:	6869      	ldr	r1, [r5, #4]
 8012870:	4630      	mov	r0, r6
 8012872:	f006 f82f 	bl	80188d4 <ucdr_serialize_string>
 8012876:	4004      	ands	r4, r0
 8012878:	b2e4      	uxtb	r4, r4
 801287a:	e7ee      	b.n	801285a <uxr_serialize_OBJK_DomainParticipant_Binary+0x12>
 801287c:	68e9      	ldr	r1, [r5, #12]
 801287e:	4630      	mov	r0, r6
 8012880:	f006 f828 	bl	80188d4 <ucdr_serialize_string>
 8012884:	4004      	ands	r4, r0
 8012886:	4620      	mov	r0, r4
 8012888:	bd70      	pop	{r4, r5, r6, pc}
 801288a:	bf00      	nop

0801288c <uxr_serialize_OBJK_Topic_Binary>:
 801288c:	b570      	push	{r4, r5, r6, lr}
 801288e:	460d      	mov	r5, r1
 8012890:	6809      	ldr	r1, [r1, #0]
 8012892:	4606      	mov	r6, r0
 8012894:	f006 f81e 	bl	80188d4 <ucdr_serialize_string>
 8012898:	7929      	ldrb	r1, [r5, #4]
 801289a:	4604      	mov	r4, r0
 801289c:	4630      	mov	r0, r6
 801289e:	f7fc fd3b 	bl	800f318 <ucdr_serialize_bool>
 80128a2:	792b      	ldrb	r3, [r5, #4]
 80128a4:	4004      	ands	r4, r0
 80128a6:	b2e4      	uxtb	r4, r4
 80128a8:	b943      	cbnz	r3, 80128bc <uxr_serialize_OBJK_Topic_Binary+0x30>
 80128aa:	7b29      	ldrb	r1, [r5, #12]
 80128ac:	4630      	mov	r0, r6
 80128ae:	f7fc fd33 	bl	800f318 <ucdr_serialize_bool>
 80128b2:	7b2b      	ldrb	r3, [r5, #12]
 80128b4:	4004      	ands	r4, r0
 80128b6:	b93b      	cbnz	r3, 80128c8 <uxr_serialize_OBJK_Topic_Binary+0x3c>
 80128b8:	4620      	mov	r0, r4
 80128ba:	bd70      	pop	{r4, r5, r6, pc}
 80128bc:	68a9      	ldr	r1, [r5, #8]
 80128be:	4630      	mov	r0, r6
 80128c0:	f006 f808 	bl	80188d4 <ucdr_serialize_string>
 80128c4:	4004      	ands	r4, r0
 80128c6:	e7f0      	b.n	80128aa <uxr_serialize_OBJK_Topic_Binary+0x1e>
 80128c8:	6929      	ldr	r1, [r5, #16]
 80128ca:	4630      	mov	r0, r6
 80128cc:	f006 f802 	bl	80188d4 <ucdr_serialize_string>
 80128d0:	4004      	ands	r4, r0
 80128d2:	b2e4      	uxtb	r4, r4
 80128d4:	4620      	mov	r0, r4
 80128d6:	bd70      	pop	{r4, r5, r6, pc}

080128d8 <uxr_serialize_OBJK_Publisher_Binary_Qos>:
 80128d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80128dc:	460c      	mov	r4, r1
 80128de:	7809      	ldrb	r1, [r1, #0]
 80128e0:	4606      	mov	r6, r0
 80128e2:	f7fc fd19 	bl	800f318 <ucdr_serialize_bool>
 80128e6:	7823      	ldrb	r3, [r4, #0]
 80128e8:	4605      	mov	r5, r0
 80128ea:	b96b      	cbnz	r3, 8012908 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x30>
 80128ec:	f894 1028 	ldrb.w	r1, [r4, #40]	@ 0x28
 80128f0:	4630      	mov	r0, r6
 80128f2:	f7fc fd11 	bl	800f318 <ucdr_serialize_bool>
 80128f6:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
 80128fa:	4005      	ands	r5, r0
 80128fc:	b2ed      	uxtb	r5, r5
 80128fe:	2b00      	cmp	r3, #0
 8012900:	d169      	bne.n	80129d6 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xfe>
 8012902:	4628      	mov	r0, r5
 8012904:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012908:	6861      	ldr	r1, [r4, #4]
 801290a:	4630      	mov	r0, r6
 801290c:	f7fc ff48 	bl	800f7a0 <ucdr_serialize_uint32_t>
 8012910:	6863      	ldr	r3, [r4, #4]
 8012912:	2b00      	cmp	r3, #0
 8012914:	d06b      	beq.n	80129ee <uxr_serialize_OBJK_Publisher_Binary_Qos+0x116>
 8012916:	2800      	cmp	r0, #0
 8012918:	d067      	beq.n	80129ea <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 801291a:	68a1      	ldr	r1, [r4, #8]
 801291c:	4630      	mov	r0, r6
 801291e:	f005 ffd9 	bl	80188d4 <ucdr_serialize_string>
 8012922:	6863      	ldr	r3, [r4, #4]
 8012924:	2b01      	cmp	r3, #1
 8012926:	d953      	bls.n	80129d0 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 8012928:	2800      	cmp	r0, #0
 801292a:	d05e      	beq.n	80129ea <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 801292c:	68e1      	ldr	r1, [r4, #12]
 801292e:	4630      	mov	r0, r6
 8012930:	f005 ffd0 	bl	80188d4 <ucdr_serialize_string>
 8012934:	6863      	ldr	r3, [r4, #4]
 8012936:	2b02      	cmp	r3, #2
 8012938:	d94a      	bls.n	80129d0 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 801293a:	2800      	cmp	r0, #0
 801293c:	d055      	beq.n	80129ea <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 801293e:	6921      	ldr	r1, [r4, #16]
 8012940:	4630      	mov	r0, r6
 8012942:	f005 ffc7 	bl	80188d4 <ucdr_serialize_string>
 8012946:	6863      	ldr	r3, [r4, #4]
 8012948:	2b03      	cmp	r3, #3
 801294a:	d941      	bls.n	80129d0 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 801294c:	2800      	cmp	r0, #0
 801294e:	d04c      	beq.n	80129ea <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8012950:	6961      	ldr	r1, [r4, #20]
 8012952:	4630      	mov	r0, r6
 8012954:	f005 ffbe 	bl	80188d4 <ucdr_serialize_string>
 8012958:	6863      	ldr	r3, [r4, #4]
 801295a:	2b04      	cmp	r3, #4
 801295c:	d938      	bls.n	80129d0 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 801295e:	2800      	cmp	r0, #0
 8012960:	d043      	beq.n	80129ea <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8012962:	69a1      	ldr	r1, [r4, #24]
 8012964:	4630      	mov	r0, r6
 8012966:	f005 ffb5 	bl	80188d4 <ucdr_serialize_string>
 801296a:	6863      	ldr	r3, [r4, #4]
 801296c:	2b05      	cmp	r3, #5
 801296e:	d92f      	bls.n	80129d0 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 8012970:	2800      	cmp	r0, #0
 8012972:	d03a      	beq.n	80129ea <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8012974:	69e1      	ldr	r1, [r4, #28]
 8012976:	4630      	mov	r0, r6
 8012978:	f005 ffac 	bl	80188d4 <ucdr_serialize_string>
 801297c:	6863      	ldr	r3, [r4, #4]
 801297e:	2b06      	cmp	r3, #6
 8012980:	d926      	bls.n	80129d0 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 8012982:	b390      	cbz	r0, 80129ea <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8012984:	6a21      	ldr	r1, [r4, #32]
 8012986:	4630      	mov	r0, r6
 8012988:	f005 ffa4 	bl	80188d4 <ucdr_serialize_string>
 801298c:	6863      	ldr	r3, [r4, #4]
 801298e:	2b07      	cmp	r3, #7
 8012990:	d91e      	bls.n	80129d0 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 8012992:	b350      	cbz	r0, 80129ea <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8012994:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 8012996:	4630      	mov	r0, r6
 8012998:	f005 ff9c 	bl	80188d4 <ucdr_serialize_string>
 801299c:	6863      	ldr	r3, [r4, #4]
 801299e:	2b08      	cmp	r3, #8
 80129a0:	d916      	bls.n	80129d0 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 80129a2:	b310      	cbz	r0, 80129ea <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 80129a4:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
 80129a6:	4630      	mov	r0, r6
 80129a8:	f005 ff94 	bl	80188d4 <ucdr_serialize_string>
 80129ac:	6863      	ldr	r3, [r4, #4]
 80129ae:	2b09      	cmp	r3, #9
 80129b0:	d90e      	bls.n	80129d0 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 80129b2:	b1d0      	cbz	r0, 80129ea <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 80129b4:	f104 082c 	add.w	r8, r4, #44	@ 0x2c
 80129b8:	2709      	movs	r7, #9
 80129ba:	e000      	b.n	80129be <uxr_serialize_OBJK_Publisher_Binary_Qos+0xe6>
 80129bc:	b1a8      	cbz	r0, 80129ea <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 80129be:	f858 1b04 	ldr.w	r1, [r8], #4
 80129c2:	4630      	mov	r0, r6
 80129c4:	f005 ff86 	bl	80188d4 <ucdr_serialize_string>
 80129c8:	6862      	ldr	r2, [r4, #4]
 80129ca:	3701      	adds	r7, #1
 80129cc:	4297      	cmp	r7, r2
 80129ce:	d3f5      	bcc.n	80129bc <uxr_serialize_OBJK_Publisher_Binary_Qos+0xe4>
 80129d0:	4005      	ands	r5, r0
 80129d2:	b2ed      	uxtb	r5, r5
 80129d4:	e78a      	b.n	80128ec <uxr_serialize_OBJK_Publisher_Binary_Qos+0x14>
 80129d6:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 80129d8:	f104 0130 	add.w	r1, r4, #48	@ 0x30
 80129dc:	4630      	mov	r0, r6
 80129de:	f7fd feb1 	bl	8010744 <ucdr_serialize_sequence_uint8_t>
 80129e2:	4005      	ands	r5, r0
 80129e4:	4628      	mov	r0, r5
 80129e6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80129ea:	2500      	movs	r5, #0
 80129ec:	e77e      	b.n	80128ec <uxr_serialize_OBJK_Publisher_Binary_Qos+0x14>
 80129ee:	4028      	ands	r0, r5
 80129f0:	b2c5      	uxtb	r5, r0
 80129f2:	e77b      	b.n	80128ec <uxr_serialize_OBJK_Publisher_Binary_Qos+0x14>

080129f4 <uxr_serialize_OBJK_Publisher_Binary>:
 80129f4:	b570      	push	{r4, r5, r6, lr}
 80129f6:	460d      	mov	r5, r1
 80129f8:	7809      	ldrb	r1, [r1, #0]
 80129fa:	4606      	mov	r6, r0
 80129fc:	f7fc fc8c 	bl	800f318 <ucdr_serialize_bool>
 8012a00:	782b      	ldrb	r3, [r5, #0]
 8012a02:	4604      	mov	r4, r0
 8012a04:	b94b      	cbnz	r3, 8012a1a <uxr_serialize_OBJK_Publisher_Binary+0x26>
 8012a06:	7a29      	ldrb	r1, [r5, #8]
 8012a08:	4630      	mov	r0, r6
 8012a0a:	f7fc fc85 	bl	800f318 <ucdr_serialize_bool>
 8012a0e:	7a2b      	ldrb	r3, [r5, #8]
 8012a10:	4004      	ands	r4, r0
 8012a12:	b2e4      	uxtb	r4, r4
 8012a14:	b943      	cbnz	r3, 8012a28 <uxr_serialize_OBJK_Publisher_Binary+0x34>
 8012a16:	4620      	mov	r0, r4
 8012a18:	bd70      	pop	{r4, r5, r6, pc}
 8012a1a:	6869      	ldr	r1, [r5, #4]
 8012a1c:	4630      	mov	r0, r6
 8012a1e:	f005 ff59 	bl	80188d4 <ucdr_serialize_string>
 8012a22:	4004      	ands	r4, r0
 8012a24:	b2e4      	uxtb	r4, r4
 8012a26:	e7ee      	b.n	8012a06 <uxr_serialize_OBJK_Publisher_Binary+0x12>
 8012a28:	f105 010c 	add.w	r1, r5, #12
 8012a2c:	4630      	mov	r0, r6
 8012a2e:	f7ff ff53 	bl	80128d8 <uxr_serialize_OBJK_Publisher_Binary_Qos>
 8012a32:	4004      	ands	r4, r0
 8012a34:	4620      	mov	r0, r4
 8012a36:	bd70      	pop	{r4, r5, r6, pc}

08012a38 <uxr_serialize_OBJK_Subscriber_Binary_Qos>:
 8012a38:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012a3c:	460c      	mov	r4, r1
 8012a3e:	7809      	ldrb	r1, [r1, #0]
 8012a40:	4606      	mov	r6, r0
 8012a42:	f7fc fc69 	bl	800f318 <ucdr_serialize_bool>
 8012a46:	7823      	ldrb	r3, [r4, #0]
 8012a48:	4605      	mov	r5, r0
 8012a4a:	b96b      	cbnz	r3, 8012a68 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x30>
 8012a4c:	f894 1028 	ldrb.w	r1, [r4, #40]	@ 0x28
 8012a50:	4630      	mov	r0, r6
 8012a52:	f7fc fc61 	bl	800f318 <ucdr_serialize_bool>
 8012a56:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
 8012a5a:	4005      	ands	r5, r0
 8012a5c:	b2ed      	uxtb	r5, r5
 8012a5e:	2b00      	cmp	r3, #0
 8012a60:	d169      	bne.n	8012b36 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xfe>
 8012a62:	4628      	mov	r0, r5
 8012a64:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012a68:	6861      	ldr	r1, [r4, #4]
 8012a6a:	4630      	mov	r0, r6
 8012a6c:	f7fc fe98 	bl	800f7a0 <ucdr_serialize_uint32_t>
 8012a70:	6863      	ldr	r3, [r4, #4]
 8012a72:	2b00      	cmp	r3, #0
 8012a74:	d06b      	beq.n	8012b4e <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x116>
 8012a76:	2800      	cmp	r0, #0
 8012a78:	d067      	beq.n	8012b4a <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 8012a7a:	68a1      	ldr	r1, [r4, #8]
 8012a7c:	4630      	mov	r0, r6
 8012a7e:	f005 ff29 	bl	80188d4 <ucdr_serialize_string>
 8012a82:	6863      	ldr	r3, [r4, #4]
 8012a84:	2b01      	cmp	r3, #1
 8012a86:	d953      	bls.n	8012b30 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 8012a88:	2800      	cmp	r0, #0
 8012a8a:	d05e      	beq.n	8012b4a <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 8012a8c:	68e1      	ldr	r1, [r4, #12]
 8012a8e:	4630      	mov	r0, r6
 8012a90:	f005 ff20 	bl	80188d4 <ucdr_serialize_string>
 8012a94:	6863      	ldr	r3, [r4, #4]
 8012a96:	2b02      	cmp	r3, #2
 8012a98:	d94a      	bls.n	8012b30 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 8012a9a:	2800      	cmp	r0, #0
 8012a9c:	d055      	beq.n	8012b4a <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 8012a9e:	6921      	ldr	r1, [r4, #16]
 8012aa0:	4630      	mov	r0, r6
 8012aa2:	f005 ff17 	bl	80188d4 <ucdr_serialize_string>
 8012aa6:	6863      	ldr	r3, [r4, #4]
 8012aa8:	2b03      	cmp	r3, #3
 8012aaa:	d941      	bls.n	8012b30 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 8012aac:	2800      	cmp	r0, #0
 8012aae:	d04c      	beq.n	8012b4a <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 8012ab0:	6961      	ldr	r1, [r4, #20]
 8012ab2:	4630      	mov	r0, r6
 8012ab4:	f005 ff0e 	bl	80188d4 <ucdr_serialize_string>
 8012ab8:	6863      	ldr	r3, [r4, #4]
 8012aba:	2b04      	cmp	r3, #4
 8012abc:	d938      	bls.n	8012b30 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 8012abe:	2800      	cmp	r0, #0
 8012ac0:	d043      	beq.n	8012b4a <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 8012ac2:	69a1      	ldr	r1, [r4, #24]
 8012ac4:	4630      	mov	r0, r6
 8012ac6:	f005 ff05 	bl	80188d4 <ucdr_serialize_string>
 8012aca:	6863      	ldr	r3, [r4, #4]
 8012acc:	2b05      	cmp	r3, #5
 8012ace:	d92f      	bls.n	8012b30 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 8012ad0:	2800      	cmp	r0, #0
 8012ad2:	d03a      	beq.n	8012b4a <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 8012ad4:	69e1      	ldr	r1, [r4, #28]
 8012ad6:	4630      	mov	r0, r6
 8012ad8:	f005 fefc 	bl	80188d4 <ucdr_serialize_string>
 8012adc:	6863      	ldr	r3, [r4, #4]
 8012ade:	2b06      	cmp	r3, #6
 8012ae0:	d926      	bls.n	8012b30 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 8012ae2:	b390      	cbz	r0, 8012b4a <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 8012ae4:	6a21      	ldr	r1, [r4, #32]
 8012ae6:	4630      	mov	r0, r6
 8012ae8:	f005 fef4 	bl	80188d4 <ucdr_serialize_string>
 8012aec:	6863      	ldr	r3, [r4, #4]
 8012aee:	2b07      	cmp	r3, #7
 8012af0:	d91e      	bls.n	8012b30 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 8012af2:	b350      	cbz	r0, 8012b4a <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 8012af4:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 8012af6:	4630      	mov	r0, r6
 8012af8:	f005 feec 	bl	80188d4 <ucdr_serialize_string>
 8012afc:	6863      	ldr	r3, [r4, #4]
 8012afe:	2b08      	cmp	r3, #8
 8012b00:	d916      	bls.n	8012b30 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 8012b02:	b310      	cbz	r0, 8012b4a <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 8012b04:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
 8012b06:	4630      	mov	r0, r6
 8012b08:	f005 fee4 	bl	80188d4 <ucdr_serialize_string>
 8012b0c:	6863      	ldr	r3, [r4, #4]
 8012b0e:	2b09      	cmp	r3, #9
 8012b10:	d90e      	bls.n	8012b30 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 8012b12:	b1d0      	cbz	r0, 8012b4a <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 8012b14:	f104 082c 	add.w	r8, r4, #44	@ 0x2c
 8012b18:	2709      	movs	r7, #9
 8012b1a:	e000      	b.n	8012b1e <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xe6>
 8012b1c:	b1a8      	cbz	r0, 8012b4a <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 8012b1e:	f858 1b04 	ldr.w	r1, [r8], #4
 8012b22:	4630      	mov	r0, r6
 8012b24:	f005 fed6 	bl	80188d4 <ucdr_serialize_string>
 8012b28:	6862      	ldr	r2, [r4, #4]
 8012b2a:	3701      	adds	r7, #1
 8012b2c:	4297      	cmp	r7, r2
 8012b2e:	d3f5      	bcc.n	8012b1c <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xe4>
 8012b30:	4005      	ands	r5, r0
 8012b32:	b2ed      	uxtb	r5, r5
 8012b34:	e78a      	b.n	8012a4c <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x14>
 8012b36:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 8012b38:	f104 0130 	add.w	r1, r4, #48	@ 0x30
 8012b3c:	4630      	mov	r0, r6
 8012b3e:	f7fd fe01 	bl	8010744 <ucdr_serialize_sequence_uint8_t>
 8012b42:	4005      	ands	r5, r0
 8012b44:	4628      	mov	r0, r5
 8012b46:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012b4a:	2500      	movs	r5, #0
 8012b4c:	e77e      	b.n	8012a4c <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x14>
 8012b4e:	4028      	ands	r0, r5
 8012b50:	b2c5      	uxtb	r5, r0
 8012b52:	e77b      	b.n	8012a4c <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x14>

08012b54 <uxr_serialize_OBJK_Subscriber_Binary>:
 8012b54:	b570      	push	{r4, r5, r6, lr}
 8012b56:	460d      	mov	r5, r1
 8012b58:	7809      	ldrb	r1, [r1, #0]
 8012b5a:	4606      	mov	r6, r0
 8012b5c:	f7fc fbdc 	bl	800f318 <ucdr_serialize_bool>
 8012b60:	782b      	ldrb	r3, [r5, #0]
 8012b62:	4604      	mov	r4, r0
 8012b64:	b94b      	cbnz	r3, 8012b7a <uxr_serialize_OBJK_Subscriber_Binary+0x26>
 8012b66:	7a29      	ldrb	r1, [r5, #8]
 8012b68:	4630      	mov	r0, r6
 8012b6a:	f7fc fbd5 	bl	800f318 <ucdr_serialize_bool>
 8012b6e:	7a2b      	ldrb	r3, [r5, #8]
 8012b70:	4004      	ands	r4, r0
 8012b72:	b2e4      	uxtb	r4, r4
 8012b74:	b943      	cbnz	r3, 8012b88 <uxr_serialize_OBJK_Subscriber_Binary+0x34>
 8012b76:	4620      	mov	r0, r4
 8012b78:	bd70      	pop	{r4, r5, r6, pc}
 8012b7a:	6869      	ldr	r1, [r5, #4]
 8012b7c:	4630      	mov	r0, r6
 8012b7e:	f005 fea9 	bl	80188d4 <ucdr_serialize_string>
 8012b82:	4004      	ands	r4, r0
 8012b84:	b2e4      	uxtb	r4, r4
 8012b86:	e7ee      	b.n	8012b66 <uxr_serialize_OBJK_Subscriber_Binary+0x12>
 8012b88:	f105 010c 	add.w	r1, r5, #12
 8012b8c:	4630      	mov	r0, r6
 8012b8e:	f7ff ff53 	bl	8012a38 <uxr_serialize_OBJK_Subscriber_Binary_Qos>
 8012b92:	4004      	ands	r4, r0
 8012b94:	4620      	mov	r0, r4
 8012b96:	bd70      	pop	{r4, r5, r6, pc}

08012b98 <uxr_serialize_OBJK_Endpoint_QosBinary>:
 8012b98:	e92d 4368 	stmdb	sp!, {r3, r5, r6, r8, r9, lr}
 8012b9c:	4688      	mov	r8, r1
 8012b9e:	8809      	ldrh	r1, [r1, #0]
 8012ba0:	4681      	mov	r9, r0
 8012ba2:	f7fc fc13 	bl	800f3cc <ucdr_serialize_uint16_t>
 8012ba6:	f898 1002 	ldrb.w	r1, [r8, #2]
 8012baa:	4606      	mov	r6, r0
 8012bac:	4648      	mov	r0, r9
 8012bae:	f7fc fbb3 	bl	800f318 <ucdr_serialize_bool>
 8012bb2:	f898 3002 	ldrb.w	r3, [r8, #2]
 8012bb6:	4006      	ands	r6, r0
 8012bb8:	b2f5      	uxtb	r5, r6
 8012bba:	b9eb      	cbnz	r3, 8012bf8 <uxr_serialize_OBJK_Endpoint_QosBinary+0x60>
 8012bbc:	f898 1006 	ldrb.w	r1, [r8, #6]
 8012bc0:	4648      	mov	r0, r9
 8012bc2:	f7fc fba9 	bl	800f318 <ucdr_serialize_bool>
 8012bc6:	f898 3006 	ldrb.w	r3, [r8, #6]
 8012bca:	4005      	ands	r5, r0
 8012bcc:	bb7b      	cbnz	r3, 8012c2e <uxr_serialize_OBJK_Endpoint_QosBinary+0x96>
 8012bce:	f898 100c 	ldrb.w	r1, [r8, #12]
 8012bd2:	4648      	mov	r0, r9
 8012bd4:	f7fc fba0 	bl	800f318 <ucdr_serialize_bool>
 8012bd8:	f898 300c 	ldrb.w	r3, [r8, #12]
 8012bdc:	4005      	ands	r5, r0
 8012bde:	b9f3      	cbnz	r3, 8012c1e <uxr_serialize_OBJK_Endpoint_QosBinary+0x86>
 8012be0:	f898 1014 	ldrb.w	r1, [r8, #20]
 8012be4:	4648      	mov	r0, r9
 8012be6:	f7fc fb97 	bl	800f318 <ucdr_serialize_bool>
 8012bea:	f898 3014 	ldrb.w	r3, [r8, #20]
 8012bee:	4005      	ands	r5, r0
 8012bf0:	b94b      	cbnz	r3, 8012c06 <uxr_serialize_OBJK_Endpoint_QosBinary+0x6e>
 8012bf2:	4628      	mov	r0, r5
 8012bf4:	e8bd 8368 	ldmia.w	sp!, {r3, r5, r6, r8, r9, pc}
 8012bf8:	f8b8 1004 	ldrh.w	r1, [r8, #4]
 8012bfc:	4648      	mov	r0, r9
 8012bfe:	f7fc fbe5 	bl	800f3cc <ucdr_serialize_uint16_t>
 8012c02:	4005      	ands	r5, r0
 8012c04:	e7da      	b.n	8012bbc <uxr_serialize_OBJK_Endpoint_QosBinary+0x24>
 8012c06:	f8d8 2018 	ldr.w	r2, [r8, #24]
 8012c0a:	f108 011c 	add.w	r1, r8, #28
 8012c0e:	4648      	mov	r0, r9
 8012c10:	f7fd fd98 	bl	8010744 <ucdr_serialize_sequence_uint8_t>
 8012c14:	4028      	ands	r0, r5
 8012c16:	b2c5      	uxtb	r5, r0
 8012c18:	4628      	mov	r0, r5
 8012c1a:	e8bd 8368 	ldmia.w	sp!, {r3, r5, r6, r8, r9, pc}
 8012c1e:	f8d8 1010 	ldr.w	r1, [r8, #16]
 8012c22:	4648      	mov	r0, r9
 8012c24:	f7fc fdbc 	bl	800f7a0 <ucdr_serialize_uint32_t>
 8012c28:	4028      	ands	r0, r5
 8012c2a:	b2c5      	uxtb	r5, r0
 8012c2c:	e7d8      	b.n	8012be0 <uxr_serialize_OBJK_Endpoint_QosBinary+0x48>
 8012c2e:	f8d8 1008 	ldr.w	r1, [r8, #8]
 8012c32:	4648      	mov	r0, r9
 8012c34:	f7fc fdb4 	bl	800f7a0 <ucdr_serialize_uint32_t>
 8012c38:	4028      	ands	r0, r5
 8012c3a:	b2c5      	uxtb	r5, r0
 8012c3c:	e7c7      	b.n	8012bce <uxr_serialize_OBJK_Endpoint_QosBinary+0x36>
 8012c3e:	bf00      	nop

08012c40 <uxr_serialize_OBJK_DataReader_Binary>:
 8012c40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012c42:	2202      	movs	r2, #2
 8012c44:	460c      	mov	r4, r1
 8012c46:	4606      	mov	r6, r0
 8012c48:	f005 fcd2 	bl	80185f0 <ucdr_serialize_array_uint8_t>
 8012c4c:	78a1      	ldrb	r1, [r4, #2]
 8012c4e:	4605      	mov	r5, r0
 8012c50:	4630      	mov	r0, r6
 8012c52:	f7fc fb61 	bl	800f318 <ucdr_serialize_bool>
 8012c56:	78a3      	ldrb	r3, [r4, #2]
 8012c58:	4005      	ands	r5, r0
 8012c5a:	b2ed      	uxtb	r5, r5
 8012c5c:	b90b      	cbnz	r3, 8012c62 <uxr_serialize_OBJK_DataReader_Binary+0x22>
 8012c5e:	4628      	mov	r0, r5
 8012c60:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012c62:	f104 0108 	add.w	r1, r4, #8
 8012c66:	4630      	mov	r0, r6
 8012c68:	f7ff ff96 	bl	8012b98 <uxr_serialize_OBJK_Endpoint_QosBinary>
 8012c6c:	f894 102c 	ldrb.w	r1, [r4, #44]	@ 0x2c
 8012c70:	4607      	mov	r7, r0
 8012c72:	4630      	mov	r0, r6
 8012c74:	f7fc fb50 	bl	800f318 <ucdr_serialize_bool>
 8012c78:	f894 302c 	ldrb.w	r3, [r4, #44]	@ 0x2c
 8012c7c:	4038      	ands	r0, r7
 8012c7e:	b2c7      	uxtb	r7, r0
 8012c80:	b95b      	cbnz	r3, 8012c9a <uxr_serialize_OBJK_DataReader_Binary+0x5a>
 8012c82:	f894 1038 	ldrb.w	r1, [r4, #56]	@ 0x38
 8012c86:	4630      	mov	r0, r6
 8012c88:	f7fc fb46 	bl	800f318 <ucdr_serialize_bool>
 8012c8c:	f894 3038 	ldrb.w	r3, [r4, #56]	@ 0x38
 8012c90:	4007      	ands	r7, r0
 8012c92:	b94b      	cbnz	r3, 8012ca8 <uxr_serialize_OBJK_DataReader_Binary+0x68>
 8012c94:	403d      	ands	r5, r7
 8012c96:	4628      	mov	r0, r5
 8012c98:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012c9a:	e9d4 230c 	ldrd	r2, r3, [r4, #48]	@ 0x30
 8012c9e:	4630      	mov	r0, r6
 8012ca0:	f7fc ffd4 	bl	800fc4c <ucdr_serialize_uint64_t>
 8012ca4:	4007      	ands	r7, r0
 8012ca6:	e7ec      	b.n	8012c82 <uxr_serialize_OBJK_DataReader_Binary+0x42>
 8012ca8:	6be1      	ldr	r1, [r4, #60]	@ 0x3c
 8012caa:	4630      	mov	r0, r6
 8012cac:	f005 fe12 	bl	80188d4 <ucdr_serialize_string>
 8012cb0:	4007      	ands	r7, r0
 8012cb2:	b2ff      	uxtb	r7, r7
 8012cb4:	e7ee      	b.n	8012c94 <uxr_serialize_OBJK_DataReader_Binary+0x54>
 8012cb6:	bf00      	nop

08012cb8 <uxr_serialize_OBJK_DataWriter_Binary>:
 8012cb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012cba:	2202      	movs	r2, #2
 8012cbc:	460d      	mov	r5, r1
 8012cbe:	4606      	mov	r6, r0
 8012cc0:	f005 fc96 	bl	80185f0 <ucdr_serialize_array_uint8_t>
 8012cc4:	78a9      	ldrb	r1, [r5, #2]
 8012cc6:	4604      	mov	r4, r0
 8012cc8:	4630      	mov	r0, r6
 8012cca:	f7fc fb25 	bl	800f318 <ucdr_serialize_bool>
 8012cce:	78ab      	ldrb	r3, [r5, #2]
 8012cd0:	4004      	ands	r4, r0
 8012cd2:	b2e4      	uxtb	r4, r4
 8012cd4:	b90b      	cbnz	r3, 8012cda <uxr_serialize_OBJK_DataWriter_Binary+0x22>
 8012cd6:	4620      	mov	r0, r4
 8012cd8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012cda:	f105 0108 	add.w	r1, r5, #8
 8012cde:	4630      	mov	r0, r6
 8012ce0:	f7ff ff5a 	bl	8012b98 <uxr_serialize_OBJK_Endpoint_QosBinary>
 8012ce4:	f895 102c 	ldrb.w	r1, [r5, #44]	@ 0x2c
 8012ce8:	4607      	mov	r7, r0
 8012cea:	4630      	mov	r0, r6
 8012cec:	f7fc fb14 	bl	800f318 <ucdr_serialize_bool>
 8012cf0:	f895 302c 	ldrb.w	r3, [r5, #44]	@ 0x2c
 8012cf4:	4038      	ands	r0, r7
 8012cf6:	b2c7      	uxtb	r7, r0
 8012cf8:	b913      	cbnz	r3, 8012d00 <uxr_serialize_OBJK_DataWriter_Binary+0x48>
 8012cfa:	403c      	ands	r4, r7
 8012cfc:	4620      	mov	r0, r4
 8012cfe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012d00:	e9d5 230c 	ldrd	r2, r3, [r5, #48]	@ 0x30
 8012d04:	4630      	mov	r0, r6
 8012d06:	f7fc ffa1 	bl	800fc4c <ucdr_serialize_uint64_t>
 8012d0a:	4007      	ands	r7, r0
 8012d0c:	e7f5      	b.n	8012cfa <uxr_serialize_OBJK_DataWriter_Binary+0x42>
 8012d0e:	bf00      	nop

08012d10 <uxr_deserialize_ObjectVariant>:
 8012d10:	b570      	push	{r4, r5, r6, lr}
 8012d12:	4605      	mov	r5, r0
 8012d14:	460e      	mov	r6, r1
 8012d16:	f7fc fb43 	bl	800f3a0 <ucdr_deserialize_uint8_t>
 8012d1a:	b168      	cbz	r0, 8012d38 <uxr_deserialize_ObjectVariant+0x28>
 8012d1c:	7833      	ldrb	r3, [r6, #0]
 8012d1e:	3b01      	subs	r3, #1
 8012d20:	4604      	mov	r4, r0
 8012d22:	2b0d      	cmp	r3, #13
 8012d24:	d809      	bhi.n	8012d3a <uxr_deserialize_ObjectVariant+0x2a>
 8012d26:	e8df f003 	tbb	[pc, r3]
 8012d2a:	0a41      	.short	0x0a41
 8012d2c:	0a0a2323 	.word	0x0a0a2323
 8012d30:	10080a0a 	.word	0x10080a0a
 8012d34:	565c1010 	.word	0x565c1010
 8012d38:	2400      	movs	r4, #0
 8012d3a:	4620      	mov	r0, r4
 8012d3c:	bd70      	pop	{r4, r5, r6, pc}
 8012d3e:	1d31      	adds	r1, r6, #4
 8012d40:	4628      	mov	r0, r5
 8012d42:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8012d46:	f7ff bd55 	b.w	80127f4 <uxr_deserialize_DATAWRITER_Representation>
 8012d4a:	1d31      	adds	r1, r6, #4
 8012d4c:	4628      	mov	r0, r5
 8012d4e:	f7fc fb27 	bl	800f3a0 <ucdr_deserialize_uint8_t>
 8012d52:	2800      	cmp	r0, #0
 8012d54:	d0f0      	beq.n	8012d38 <uxr_deserialize_ObjectVariant+0x28>
 8012d56:	7933      	ldrb	r3, [r6, #4]
 8012d58:	2b01      	cmp	r3, #1
 8012d5a:	d001      	beq.n	8012d60 <uxr_deserialize_ObjectVariant+0x50>
 8012d5c:	2b02      	cmp	r3, #2
 8012d5e:	d1ec      	bne.n	8012d3a <uxr_deserialize_ObjectVariant+0x2a>
 8012d60:	68b1      	ldr	r1, [r6, #8]
 8012d62:	4628      	mov	r0, r5
 8012d64:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8012d68:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8012d6c:	f005 bdc2 	b.w	80188f4 <ucdr_deserialize_string>
 8012d70:	1d31      	adds	r1, r6, #4
 8012d72:	4628      	mov	r0, r5
 8012d74:	f7fc fb14 	bl	800f3a0 <ucdr_deserialize_uint8_t>
 8012d78:	4604      	mov	r4, r0
 8012d7a:	b170      	cbz	r0, 8012d9a <uxr_deserialize_ObjectVariant+0x8a>
 8012d7c:	7933      	ldrb	r3, [r6, #4]
 8012d7e:	2b02      	cmp	r3, #2
 8012d80:	d04c      	beq.n	8012e1c <uxr_deserialize_ObjectVariant+0x10c>
 8012d82:	2b03      	cmp	r3, #3
 8012d84:	d109      	bne.n	8012d9a <uxr_deserialize_ObjectVariant+0x8a>
 8012d86:	f106 0308 	add.w	r3, r6, #8
 8012d8a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8012d8e:	f106 010c 	add.w	r1, r6, #12
 8012d92:	4628      	mov	r0, r5
 8012d94:	f7fd fce8 	bl	8010768 <ucdr_deserialize_sequence_uint8_t>
 8012d98:	4604      	mov	r4, r0
 8012d9a:	2202      	movs	r2, #2
 8012d9c:	f506 7103 	add.w	r1, r6, #524	@ 0x20c
 8012da0:	4628      	mov	r0, r5
 8012da2:	f005 fc89 	bl	80186b8 <ucdr_deserialize_array_uint8_t>
 8012da6:	4020      	ands	r0, r4
 8012da8:	b2c4      	uxtb	r4, r0
 8012daa:	e7c6      	b.n	8012d3a <uxr_deserialize_ObjectVariant+0x2a>
 8012dac:	1d31      	adds	r1, r6, #4
 8012dae:	4628      	mov	r0, r5
 8012db0:	f7fc faf6 	bl	800f3a0 <ucdr_deserialize_uint8_t>
 8012db4:	4604      	mov	r4, r0
 8012db6:	b130      	cbz	r0, 8012dc6 <uxr_deserialize_ObjectVariant+0xb6>
 8012db8:	7933      	ldrb	r3, [r6, #4]
 8012dba:	2b02      	cmp	r3, #2
 8012dbc:	d036      	beq.n	8012e2c <uxr_deserialize_ObjectVariant+0x11c>
 8012dbe:	2b03      	cmp	r3, #3
 8012dc0:	d03c      	beq.n	8012e3c <uxr_deserialize_ObjectVariant+0x12c>
 8012dc2:	2b01      	cmp	r3, #1
 8012dc4:	d032      	beq.n	8012e2c <uxr_deserialize_ObjectVariant+0x11c>
 8012dc6:	f506 7103 	add.w	r1, r6, #524	@ 0x20c
 8012dca:	4628      	mov	r0, r5
 8012dcc:	f7fd f88e 	bl	800feec <ucdr_deserialize_int16_t>
 8012dd0:	4020      	ands	r0, r4
 8012dd2:	b2c4      	uxtb	r4, r0
 8012dd4:	e7b1      	b.n	8012d3a <uxr_deserialize_ObjectVariant+0x2a>
 8012dd6:	1d31      	adds	r1, r6, #4
 8012dd8:	4628      	mov	r0, r5
 8012dda:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8012dde:	f7ff bbbf 	b.w	8012560 <uxr_deserialize_CLIENT_Representation>
 8012de2:	2204      	movs	r2, #4
 8012de4:	18b1      	adds	r1, r6, r2
 8012de6:	4628      	mov	r0, r5
 8012de8:	f005 fc66 	bl	80186b8 <ucdr_deserialize_array_uint8_t>
 8012dec:	2202      	movs	r2, #2
 8012dee:	f106 0108 	add.w	r1, r6, #8
 8012df2:	4604      	mov	r4, r0
 8012df4:	4628      	mov	r0, r5
 8012df6:	f005 fc5f 	bl	80186b8 <ucdr_deserialize_array_uint8_t>
 8012dfa:	2202      	movs	r2, #2
 8012dfc:	4004      	ands	r4, r0
 8012dfe:	f106 010a 	add.w	r1, r6, #10
 8012e02:	4628      	mov	r0, r5
 8012e04:	f005 fc58 	bl	80186b8 <ucdr_deserialize_array_uint8_t>
 8012e08:	b2e4      	uxtb	r4, r4
 8012e0a:	4603      	mov	r3, r0
 8012e0c:	f106 010c 	add.w	r1, r6, #12
 8012e10:	4628      	mov	r0, r5
 8012e12:	401c      	ands	r4, r3
 8012e14:	f7fc fa96 	bl	800f344 <ucdr_deserialize_bool>
 8012e18:	4004      	ands	r4, r0
 8012e1a:	e78e      	b.n	8012d3a <uxr_deserialize_ObjectVariant+0x2a>
 8012e1c:	68b1      	ldr	r1, [r6, #8]
 8012e1e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8012e22:	4628      	mov	r0, r5
 8012e24:	f005 fd66 	bl	80188f4 <ucdr_deserialize_string>
 8012e28:	4604      	mov	r4, r0
 8012e2a:	e7b6      	b.n	8012d9a <uxr_deserialize_ObjectVariant+0x8a>
 8012e2c:	68b1      	ldr	r1, [r6, #8]
 8012e2e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8012e32:	4628      	mov	r0, r5
 8012e34:	f005 fd5e 	bl	80188f4 <ucdr_deserialize_string>
 8012e38:	4604      	mov	r4, r0
 8012e3a:	e7c4      	b.n	8012dc6 <uxr_deserialize_ObjectVariant+0xb6>
 8012e3c:	f106 0308 	add.w	r3, r6, #8
 8012e40:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8012e44:	f106 010c 	add.w	r1, r6, #12
 8012e48:	4628      	mov	r0, r5
 8012e4a:	f7fd fc8d 	bl	8010768 <ucdr_deserialize_sequence_uint8_t>
 8012e4e:	4604      	mov	r4, r0
 8012e50:	e7b9      	b.n	8012dc6 <uxr_deserialize_ObjectVariant+0xb6>
 8012e52:	bf00      	nop

08012e54 <uxr_deserialize_BaseObjectRequest>:
 8012e54:	b570      	push	{r4, r5, r6, lr}
 8012e56:	2202      	movs	r2, #2
 8012e58:	4605      	mov	r5, r0
 8012e5a:	460e      	mov	r6, r1
 8012e5c:	f005 fc2c 	bl	80186b8 <ucdr_deserialize_array_uint8_t>
 8012e60:	2202      	movs	r2, #2
 8012e62:	4604      	mov	r4, r0
 8012e64:	18b1      	adds	r1, r6, r2
 8012e66:	4628      	mov	r0, r5
 8012e68:	f005 fc26 	bl	80186b8 <ucdr_deserialize_array_uint8_t>
 8012e6c:	4020      	ands	r0, r4
 8012e6e:	b2c0      	uxtb	r0, r0
 8012e70:	bd70      	pop	{r4, r5, r6, pc}
 8012e72:	bf00      	nop

08012e74 <uxr_serialize_ActivityInfoVariant>:
 8012e74:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012e78:	460d      	mov	r5, r1
 8012e7a:	7809      	ldrb	r1, [r1, #0]
 8012e7c:	4607      	mov	r7, r0
 8012e7e:	f7fc fa79 	bl	800f374 <ucdr_serialize_uint8_t>
 8012e82:	4681      	mov	r9, r0
 8012e84:	b138      	cbz	r0, 8012e96 <uxr_serialize_ActivityInfoVariant+0x22>
 8012e86:	782b      	ldrb	r3, [r5, #0]
 8012e88:	2b06      	cmp	r3, #6
 8012e8a:	f000 8082 	beq.w	8012f92 <uxr_serialize_ActivityInfoVariant+0x11e>
 8012e8e:	2b0d      	cmp	r3, #13
 8012e90:	d016      	beq.n	8012ec0 <uxr_serialize_ActivityInfoVariant+0x4c>
 8012e92:	2b05      	cmp	r3, #5
 8012e94:	d002      	beq.n	8012e9c <uxr_serialize_ActivityInfoVariant+0x28>
 8012e96:	4648      	mov	r0, r9
 8012e98:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012e9c:	f9b5 1008 	ldrsh.w	r1, [r5, #8]
 8012ea0:	4638      	mov	r0, r7
 8012ea2:	f7fc ffa3 	bl	800fdec <ucdr_serialize_int16_t>
 8012ea6:	e9d5 2304 	ldrd	r2, r3, [r5, #16]
 8012eaa:	4681      	mov	r9, r0
 8012eac:	4638      	mov	r0, r7
 8012eae:	f7fc fecd 	bl	800fc4c <ucdr_serialize_uint64_t>
 8012eb2:	ea09 0000 	and.w	r0, r9, r0
 8012eb6:	fa5f f980 	uxtb.w	r9, r0
 8012eba:	4648      	mov	r0, r9
 8012ebc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012ec0:	f9b5 1008 	ldrsh.w	r1, [r5, #8]
 8012ec4:	4638      	mov	r0, r7
 8012ec6:	f7fc ff91 	bl	800fdec <ucdr_serialize_int16_t>
 8012eca:	68e9      	ldr	r1, [r5, #12]
 8012ecc:	4681      	mov	r9, r0
 8012ece:	4638      	mov	r0, r7
 8012ed0:	f7fc fc66 	bl	800f7a0 <ucdr_serialize_uint32_t>
 8012ed4:	68eb      	ldr	r3, [r5, #12]
 8012ed6:	2b00      	cmp	r3, #0
 8012ed8:	d0eb      	beq.n	8012eb2 <uxr_serialize_ActivityInfoVariant+0x3e>
 8012eda:	b320      	cbz	r0, 8012f26 <uxr_serialize_ActivityInfoVariant+0xb2>
 8012edc:	f105 080c 	add.w	r8, r5, #12
 8012ee0:	2600      	movs	r6, #0
 8012ee2:	eb06 0a46 	add.w	sl, r6, r6, lsl #1
 8012ee6:	eb05 0aca 	add.w	sl, r5, sl, lsl #3
 8012eea:	f89a 1010 	ldrb.w	r1, [sl, #16]
 8012eee:	4638      	mov	r0, r7
 8012ef0:	f7fc fa40 	bl	800f374 <ucdr_serialize_uint8_t>
 8012ef4:	2800      	cmp	r0, #0
 8012ef6:	d053      	beq.n	8012fa0 <uxr_serialize_ActivityInfoVariant+0x12c>
 8012ef8:	f89a 3010 	ldrb.w	r3, [sl, #16]
 8012efc:	eb06 0146 	add.w	r1, r6, r6, lsl #1
 8012f00:	0074      	lsls	r4, r6, #1
 8012f02:	00c9      	lsls	r1, r1, #3
 8012f04:	2b03      	cmp	r3, #3
 8012f06:	d854      	bhi.n	8012fb2 <uxr_serialize_ActivityInfoVariant+0x13e>
 8012f08:	e8df f003 	tbb	[pc, r3]
 8012f0c:	02102132 	.word	0x02102132
 8012f10:	4441      	add	r1, r8
 8012f12:	4638      	mov	r0, r7
 8012f14:	6889      	ldr	r1, [r1, #8]
 8012f16:	f005 fcdd 	bl	80188d4 <ucdr_serialize_string>
 8012f1a:	68ea      	ldr	r2, [r5, #12]
 8012f1c:	3601      	adds	r6, #1
 8012f1e:	4296      	cmp	r6, r2
 8012f20:	d242      	bcs.n	8012fa8 <uxr_serialize_ActivityInfoVariant+0x134>
 8012f22:	2800      	cmp	r0, #0
 8012f24:	d1dd      	bne.n	8012ee2 <uxr_serialize_ActivityInfoVariant+0x6e>
 8012f26:	f04f 0900 	mov.w	r9, #0
 8012f2a:	e7b4      	b.n	8012e96 <uxr_serialize_ActivityInfoVariant+0x22>
 8012f2c:	3108      	adds	r1, #8
 8012f2e:	4441      	add	r1, r8
 8012f30:	2210      	movs	r2, #16
 8012f32:	4638      	mov	r0, r7
 8012f34:	f005 fb5c 	bl	80185f0 <ucdr_serialize_array_uint8_t>
 8012f38:	4434      	add	r4, r6
 8012f3a:	eb05 03c4 	add.w	r3, r5, r4, lsl #3
 8012f3e:	4604      	mov	r4, r0
 8012f40:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8012f42:	4638      	mov	r0, r7
 8012f44:	f7fc fc2c 	bl	800f7a0 <ucdr_serialize_uint32_t>
 8012f48:	4020      	ands	r0, r4
 8012f4a:	b2c0      	uxtb	r0, r0
 8012f4c:	e7e5      	b.n	8012f1a <uxr_serialize_ActivityInfoVariant+0xa6>
 8012f4e:	3108      	adds	r1, #8
 8012f50:	4441      	add	r1, r8
 8012f52:	2204      	movs	r2, #4
 8012f54:	4638      	mov	r0, r7
 8012f56:	f005 fb4b 	bl	80185f0 <ucdr_serialize_array_uint8_t>
 8012f5a:	4434      	add	r4, r6
 8012f5c:	eb05 03c4 	add.w	r3, r5, r4, lsl #3
 8012f60:	4604      	mov	r4, r0
 8012f62:	8b19      	ldrh	r1, [r3, #24]
 8012f64:	4638      	mov	r0, r7
 8012f66:	f7fc fa31 	bl	800f3cc <ucdr_serialize_uint16_t>
 8012f6a:	4020      	ands	r0, r4
 8012f6c:	b2c0      	uxtb	r0, r0
 8012f6e:	e7d4      	b.n	8012f1a <uxr_serialize_ActivityInfoVariant+0xa6>
 8012f70:	3108      	adds	r1, #8
 8012f72:	4441      	add	r1, r8
 8012f74:	2202      	movs	r2, #2
 8012f76:	4638      	mov	r0, r7
 8012f78:	f005 fb3a 	bl	80185f0 <ucdr_serialize_array_uint8_t>
 8012f7c:	4434      	add	r4, r6
 8012f7e:	eb05 03c4 	add.w	r3, r5, r4, lsl #3
 8012f82:	4604      	mov	r4, r0
 8012f84:	7d99      	ldrb	r1, [r3, #22]
 8012f86:	4638      	mov	r0, r7
 8012f88:	f7fc f9f4 	bl	800f374 <ucdr_serialize_uint8_t>
 8012f8c:	4020      	ands	r0, r4
 8012f8e:	b2c0      	uxtb	r0, r0
 8012f90:	e7c3      	b.n	8012f1a <uxr_serialize_ActivityInfoVariant+0xa6>
 8012f92:	f9b5 1008 	ldrsh.w	r1, [r5, #8]
 8012f96:	4638      	mov	r0, r7
 8012f98:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012f9c:	f7fc bf26 	b.w	800fdec <ucdr_serialize_int16_t>
 8012fa0:	68ea      	ldr	r2, [r5, #12]
 8012fa2:	3601      	adds	r6, #1
 8012fa4:	42b2      	cmp	r2, r6
 8012fa6:	d8be      	bhi.n	8012f26 <uxr_serialize_ActivityInfoVariant+0xb2>
 8012fa8:	ea09 0900 	and.w	r9, r9, r0
 8012fac:	fa5f f989 	uxtb.w	r9, r9
 8012fb0:	e771      	b.n	8012e96 <uxr_serialize_ActivityInfoVariant+0x22>
 8012fb2:	68eb      	ldr	r3, [r5, #12]
 8012fb4:	3601      	adds	r6, #1
 8012fb6:	429e      	cmp	r6, r3
 8012fb8:	f10a 0a18 	add.w	sl, sl, #24
 8012fbc:	d395      	bcc.n	8012eea <uxr_serialize_ActivityInfoVariant+0x76>
 8012fbe:	e76a      	b.n	8012e96 <uxr_serialize_ActivityInfoVariant+0x22>

08012fc0 <uxr_deserialize_BaseObjectReply>:
 8012fc0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012fc4:	2202      	movs	r2, #2
 8012fc6:	4606      	mov	r6, r0
 8012fc8:	460f      	mov	r7, r1
 8012fca:	f005 fb75 	bl	80186b8 <ucdr_deserialize_array_uint8_t>
 8012fce:	2202      	movs	r2, #2
 8012fd0:	18b9      	adds	r1, r7, r2
 8012fd2:	4605      	mov	r5, r0
 8012fd4:	4630      	mov	r0, r6
 8012fd6:	f005 fb6f 	bl	80186b8 <ucdr_deserialize_array_uint8_t>
 8012fda:	1d39      	adds	r1, r7, #4
 8012fdc:	4680      	mov	r8, r0
 8012fde:	4630      	mov	r0, r6
 8012fe0:	f7fc f9de 	bl	800f3a0 <ucdr_deserialize_uint8_t>
 8012fe4:	1d79      	adds	r1, r7, #5
 8012fe6:	4604      	mov	r4, r0
 8012fe8:	4630      	mov	r0, r6
 8012fea:	f7fc f9d9 	bl	800f3a0 <ucdr_deserialize_uint8_t>
 8012fee:	ea05 0508 	and.w	r5, r5, r8
 8012ff2:	402c      	ands	r4, r5
 8012ff4:	4020      	ands	r0, r4
 8012ff6:	b2c0      	uxtb	r0, r0
 8012ff8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08012ffc <uxr_serialize_ReadSpecification>:
 8012ffc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013000:	460e      	mov	r6, r1
 8013002:	7809      	ldrb	r1, [r1, #0]
 8013004:	4607      	mov	r7, r0
 8013006:	f7fc f9b5 	bl	800f374 <ucdr_serialize_uint8_t>
 801300a:	7871      	ldrb	r1, [r6, #1]
 801300c:	4604      	mov	r4, r0
 801300e:	4638      	mov	r0, r7
 8013010:	f7fc f9b0 	bl	800f374 <ucdr_serialize_uint8_t>
 8013014:	78b1      	ldrb	r1, [r6, #2]
 8013016:	4004      	ands	r4, r0
 8013018:	4638      	mov	r0, r7
 801301a:	f7fc f97d 	bl	800f318 <ucdr_serialize_bool>
 801301e:	78b3      	ldrb	r3, [r6, #2]
 8013020:	b2e4      	uxtb	r4, r4
 8013022:	4004      	ands	r4, r0
 8013024:	b94b      	cbnz	r3, 801303a <uxr_serialize_ReadSpecification+0x3e>
 8013026:	7a31      	ldrb	r1, [r6, #8]
 8013028:	4638      	mov	r0, r7
 801302a:	f7fc f975 	bl	800f318 <ucdr_serialize_bool>
 801302e:	7a33      	ldrb	r3, [r6, #8]
 8013030:	4004      	ands	r4, r0
 8013032:	b943      	cbnz	r3, 8013046 <uxr_serialize_ReadSpecification+0x4a>
 8013034:	4620      	mov	r0, r4
 8013036:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801303a:	6871      	ldr	r1, [r6, #4]
 801303c:	4638      	mov	r0, r7
 801303e:	f005 fc49 	bl	80188d4 <ucdr_serialize_string>
 8013042:	4004      	ands	r4, r0
 8013044:	e7ef      	b.n	8013026 <uxr_serialize_ReadSpecification+0x2a>
 8013046:	8971      	ldrh	r1, [r6, #10]
 8013048:	4638      	mov	r0, r7
 801304a:	f7fc f9bf 	bl	800f3cc <ucdr_serialize_uint16_t>
 801304e:	89b1      	ldrh	r1, [r6, #12]
 8013050:	4605      	mov	r5, r0
 8013052:	4638      	mov	r0, r7
 8013054:	f7fc f9ba 	bl	800f3cc <ucdr_serialize_uint16_t>
 8013058:	89f1      	ldrh	r1, [r6, #14]
 801305a:	4005      	ands	r5, r0
 801305c:	4638      	mov	r0, r7
 801305e:	f7fc f9b5 	bl	800f3cc <ucdr_serialize_uint16_t>
 8013062:	8a31      	ldrh	r1, [r6, #16]
 8013064:	4680      	mov	r8, r0
 8013066:	4638      	mov	r0, r7
 8013068:	f7fc f9b0 	bl	800f3cc <ucdr_serialize_uint16_t>
 801306c:	b2ed      	uxtb	r5, r5
 801306e:	4025      	ands	r5, r4
 8013070:	ea08 0505 	and.w	r5, r8, r5
 8013074:	ea00 0405 	and.w	r4, r0, r5
 8013078:	4620      	mov	r0, r4
 801307a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801307e:	bf00      	nop

08013080 <uxr_serialize_CREATE_CLIENT_Payload>:
 8013080:	f7ff ba16 	b.w	80124b0 <uxr_serialize_CLIENT_Representation>

08013084 <uxr_serialize_CREATE_Payload>:
 8013084:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013086:	2202      	movs	r2, #2
 8013088:	4607      	mov	r7, r0
 801308a:	460e      	mov	r6, r1
 801308c:	f005 fab0 	bl	80185f0 <ucdr_serialize_array_uint8_t>
 8013090:	2202      	movs	r2, #2
 8013092:	18b1      	adds	r1, r6, r2
 8013094:	4605      	mov	r5, r0
 8013096:	4638      	mov	r0, r7
 8013098:	f005 faaa 	bl	80185f0 <ucdr_serialize_array_uint8_t>
 801309c:	7931      	ldrb	r1, [r6, #4]
 801309e:	4604      	mov	r4, r0
 80130a0:	4638      	mov	r0, r7
 80130a2:	f7fc f967 	bl	800f374 <ucdr_serialize_uint8_t>
 80130a6:	b170      	cbz	r0, 80130c6 <uxr_serialize_CREATE_Payload+0x42>
 80130a8:	7933      	ldrb	r3, [r6, #4]
 80130aa:	402c      	ands	r4, r5
 80130ac:	3b01      	subs	r3, #1
 80130ae:	b2e4      	uxtb	r4, r4
 80130b0:	2b0d      	cmp	r3, #13
 80130b2:	d809      	bhi.n	80130c8 <uxr_serialize_CREATE_Payload+0x44>
 80130b4:	e8df f003 	tbb	[pc, r3]
 80130b8:	23230a4c 	.word	0x23230a4c
 80130bc:	0a0a0a0a 	.word	0x0a0a0a0a
 80130c0:	12121208 	.word	0x12121208
 80130c4:	3e45      	.short	0x3e45
 80130c6:	2400      	movs	r4, #0
 80130c8:	4620      	mov	r0, r4
 80130ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80130cc:	f106 0108 	add.w	r1, r6, #8
 80130d0:	4638      	mov	r0, r7
 80130d2:	f7ff faf3 	bl	80126bc <uxr_serialize_DATAWRITER_Representation>
 80130d6:	4004      	ands	r4, r0
 80130d8:	4620      	mov	r0, r4
 80130da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80130dc:	7a31      	ldrb	r1, [r6, #8]
 80130de:	4638      	mov	r0, r7
 80130e0:	f7fc f948 	bl	800f374 <ucdr_serialize_uint8_t>
 80130e4:	2800      	cmp	r0, #0
 80130e6:	d0ee      	beq.n	80130c6 <uxr_serialize_CREATE_Payload+0x42>
 80130e8:	7a33      	ldrb	r3, [r6, #8]
 80130ea:	2b01      	cmp	r3, #1
 80130ec:	d001      	beq.n	80130f2 <uxr_serialize_CREATE_Payload+0x6e>
 80130ee:	2b02      	cmp	r3, #2
 80130f0:	d1ea      	bne.n	80130c8 <uxr_serialize_CREATE_Payload+0x44>
 80130f2:	68f1      	ldr	r1, [r6, #12]
 80130f4:	4638      	mov	r0, r7
 80130f6:	f005 fbed 	bl	80188d4 <ucdr_serialize_string>
 80130fa:	4004      	ands	r4, r0
 80130fc:	e7e4      	b.n	80130c8 <uxr_serialize_CREATE_Payload+0x44>
 80130fe:	7a31      	ldrb	r1, [r6, #8]
 8013100:	4638      	mov	r0, r7
 8013102:	f7fc f937 	bl	800f374 <ucdr_serialize_uint8_t>
 8013106:	4605      	mov	r5, r0
 8013108:	b158      	cbz	r0, 8013122 <uxr_serialize_CREATE_Payload+0x9e>
 801310a:	7a33      	ldrb	r3, [r6, #8]
 801310c:	2b02      	cmp	r3, #2
 801310e:	d034      	beq.n	801317a <uxr_serialize_CREATE_Payload+0xf6>
 8013110:	2b03      	cmp	r3, #3
 8013112:	d106      	bne.n	8013122 <uxr_serialize_CREATE_Payload+0x9e>
 8013114:	68f2      	ldr	r2, [r6, #12]
 8013116:	f106 0110 	add.w	r1, r6, #16
 801311a:	4638      	mov	r0, r7
 801311c:	f7fd fb12 	bl	8010744 <ucdr_serialize_sequence_uint8_t>
 8013120:	4605      	mov	r5, r0
 8013122:	2202      	movs	r2, #2
 8013124:	f506 7104 	add.w	r1, r6, #528	@ 0x210
 8013128:	4638      	mov	r0, r7
 801312a:	f005 fa61 	bl	80185f0 <ucdr_serialize_array_uint8_t>
 801312e:	4028      	ands	r0, r5
 8013130:	4004      	ands	r4, r0
 8013132:	e7c9      	b.n	80130c8 <uxr_serialize_CREATE_Payload+0x44>
 8013134:	f106 0108 	add.w	r1, r6, #8
 8013138:	4638      	mov	r0, r7
 801313a:	f7ff f9b9 	bl	80124b0 <uxr_serialize_CLIENT_Representation>
 801313e:	4004      	ands	r4, r0
 8013140:	e7c2      	b.n	80130c8 <uxr_serialize_CREATE_Payload+0x44>
 8013142:	f106 0108 	add.w	r1, r6, #8
 8013146:	4638      	mov	r0, r7
 8013148:	f7ff fa6e 	bl	8012628 <uxr_serialize_AGENT_Representation>
 801314c:	4004      	ands	r4, r0
 801314e:	e7bb      	b.n	80130c8 <uxr_serialize_CREATE_Payload+0x44>
 8013150:	7a31      	ldrb	r1, [r6, #8]
 8013152:	4638      	mov	r0, r7
 8013154:	f7fc f90e 	bl	800f374 <ucdr_serialize_uint8_t>
 8013158:	4605      	mov	r5, r0
 801315a:	b130      	cbz	r0, 801316a <uxr_serialize_CREATE_Payload+0xe6>
 801315c:	7a33      	ldrb	r3, [r6, #8]
 801315e:	2b02      	cmp	r3, #2
 8013160:	d011      	beq.n	8013186 <uxr_serialize_CREATE_Payload+0x102>
 8013162:	2b03      	cmp	r3, #3
 8013164:	d015      	beq.n	8013192 <uxr_serialize_CREATE_Payload+0x10e>
 8013166:	2b01      	cmp	r3, #1
 8013168:	d00d      	beq.n	8013186 <uxr_serialize_CREATE_Payload+0x102>
 801316a:	f9b6 1210 	ldrsh.w	r1, [r6, #528]	@ 0x210
 801316e:	4638      	mov	r0, r7
 8013170:	f7fc fe3c 	bl	800fdec <ucdr_serialize_int16_t>
 8013174:	4028      	ands	r0, r5
 8013176:	4004      	ands	r4, r0
 8013178:	e7a6      	b.n	80130c8 <uxr_serialize_CREATE_Payload+0x44>
 801317a:	68f1      	ldr	r1, [r6, #12]
 801317c:	4638      	mov	r0, r7
 801317e:	f005 fba9 	bl	80188d4 <ucdr_serialize_string>
 8013182:	4605      	mov	r5, r0
 8013184:	e7cd      	b.n	8013122 <uxr_serialize_CREATE_Payload+0x9e>
 8013186:	68f1      	ldr	r1, [r6, #12]
 8013188:	4638      	mov	r0, r7
 801318a:	f005 fba3 	bl	80188d4 <ucdr_serialize_string>
 801318e:	4605      	mov	r5, r0
 8013190:	e7eb      	b.n	801316a <uxr_serialize_CREATE_Payload+0xe6>
 8013192:	68f2      	ldr	r2, [r6, #12]
 8013194:	f106 0110 	add.w	r1, r6, #16
 8013198:	4638      	mov	r0, r7
 801319a:	f7fd fad3 	bl	8010744 <ucdr_serialize_sequence_uint8_t>
 801319e:	4605      	mov	r5, r0
 80131a0:	e7e3      	b.n	801316a <uxr_serialize_CREATE_Payload+0xe6>
 80131a2:	bf00      	nop

080131a4 <uxr_deserialize_GET_INFO_Payload>:
 80131a4:	b570      	push	{r4, r5, r6, lr}
 80131a6:	2202      	movs	r2, #2
 80131a8:	4605      	mov	r5, r0
 80131aa:	460e      	mov	r6, r1
 80131ac:	f005 fa84 	bl	80186b8 <ucdr_deserialize_array_uint8_t>
 80131b0:	2202      	movs	r2, #2
 80131b2:	18b1      	adds	r1, r6, r2
 80131b4:	4604      	mov	r4, r0
 80131b6:	4628      	mov	r0, r5
 80131b8:	f005 fa7e 	bl	80186b8 <ucdr_deserialize_array_uint8_t>
 80131bc:	1d31      	adds	r1, r6, #4
 80131be:	4004      	ands	r4, r0
 80131c0:	4628      	mov	r0, r5
 80131c2:	f7fc fc1d 	bl	800fa00 <ucdr_deserialize_uint32_t>
 80131c6:	b2e4      	uxtb	r4, r4
 80131c8:	4020      	ands	r0, r4
 80131ca:	bd70      	pop	{r4, r5, r6, pc}

080131cc <uxr_serialize_DELETE_Payload>:
 80131cc:	b570      	push	{r4, r5, r6, lr}
 80131ce:	2202      	movs	r2, #2
 80131d0:	4605      	mov	r5, r0
 80131d2:	460e      	mov	r6, r1
 80131d4:	f005 fa0c 	bl	80185f0 <ucdr_serialize_array_uint8_t>
 80131d8:	2202      	movs	r2, #2
 80131da:	4604      	mov	r4, r0
 80131dc:	18b1      	adds	r1, r6, r2
 80131de:	4628      	mov	r0, r5
 80131e0:	f005 fa06 	bl	80185f0 <ucdr_serialize_array_uint8_t>
 80131e4:	4020      	ands	r0, r4
 80131e6:	b2c0      	uxtb	r0, r0
 80131e8:	bd70      	pop	{r4, r5, r6, pc}
 80131ea:	bf00      	nop

080131ec <uxr_deserialize_STATUS_AGENT_Payload>:
 80131ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80131f0:	4605      	mov	r5, r0
 80131f2:	460e      	mov	r6, r1
 80131f4:	f7fc f8d4 	bl	800f3a0 <ucdr_deserialize_uint8_t>
 80131f8:	1c71      	adds	r1, r6, #1
 80131fa:	4604      	mov	r4, r0
 80131fc:	4628      	mov	r0, r5
 80131fe:	f7fc f8cf 	bl	800f3a0 <ucdr_deserialize_uint8_t>
 8013202:	2204      	movs	r2, #4
 8013204:	18b1      	adds	r1, r6, r2
 8013206:	4680      	mov	r8, r0
 8013208:	4628      	mov	r0, r5
 801320a:	f005 fa55 	bl	80186b8 <ucdr_deserialize_array_uint8_t>
 801320e:	f106 0108 	add.w	r1, r6, #8
 8013212:	4607      	mov	r7, r0
 8013214:	2202      	movs	r2, #2
 8013216:	4628      	mov	r0, r5
 8013218:	f005 fa4e 	bl	80186b8 <ucdr_deserialize_array_uint8_t>
 801321c:	ea04 0308 	and.w	r3, r4, r8
 8013220:	b2db      	uxtb	r3, r3
 8013222:	ea03 0407 	and.w	r4, r3, r7
 8013226:	2202      	movs	r2, #2
 8013228:	4607      	mov	r7, r0
 801322a:	f106 010a 	add.w	r1, r6, #10
 801322e:	4628      	mov	r0, r5
 8013230:	f005 fa42 	bl	80186b8 <ucdr_deserialize_array_uint8_t>
 8013234:	f106 010c 	add.w	r1, r6, #12
 8013238:	4603      	mov	r3, r0
 801323a:	4628      	mov	r0, r5
 801323c:	461d      	mov	r5, r3
 801323e:	f7fc f881 	bl	800f344 <ucdr_deserialize_bool>
 8013242:	403c      	ands	r4, r7
 8013244:	4025      	ands	r5, r4
 8013246:	4028      	ands	r0, r5
 8013248:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0801324c <uxr_deserialize_STATUS_Payload>:
 801324c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013250:	2202      	movs	r2, #2
 8013252:	4606      	mov	r6, r0
 8013254:	460f      	mov	r7, r1
 8013256:	f005 fa2f 	bl	80186b8 <ucdr_deserialize_array_uint8_t>
 801325a:	2202      	movs	r2, #2
 801325c:	18b9      	adds	r1, r7, r2
 801325e:	4605      	mov	r5, r0
 8013260:	4630      	mov	r0, r6
 8013262:	f005 fa29 	bl	80186b8 <ucdr_deserialize_array_uint8_t>
 8013266:	1d39      	adds	r1, r7, #4
 8013268:	4680      	mov	r8, r0
 801326a:	4630      	mov	r0, r6
 801326c:	f7fc f898 	bl	800f3a0 <ucdr_deserialize_uint8_t>
 8013270:	1d79      	adds	r1, r7, #5
 8013272:	4604      	mov	r4, r0
 8013274:	4630      	mov	r0, r6
 8013276:	f7fc f893 	bl	800f3a0 <ucdr_deserialize_uint8_t>
 801327a:	ea05 0508 	and.w	r5, r5, r8
 801327e:	402c      	ands	r4, r5
 8013280:	4020      	ands	r0, r4
 8013282:	b2c0      	uxtb	r0, r0
 8013284:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08013288 <uxr_serialize_INFO_Payload>:
 8013288:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801328c:	2202      	movs	r2, #2
 801328e:	460c      	mov	r4, r1
 8013290:	4605      	mov	r5, r0
 8013292:	f005 f9ad 	bl	80185f0 <ucdr_serialize_array_uint8_t>
 8013296:	2202      	movs	r2, #2
 8013298:	18a1      	adds	r1, r4, r2
 801329a:	4680      	mov	r8, r0
 801329c:	4628      	mov	r0, r5
 801329e:	f005 f9a7 	bl	80185f0 <ucdr_serialize_array_uint8_t>
 80132a2:	7921      	ldrb	r1, [r4, #4]
 80132a4:	4607      	mov	r7, r0
 80132a6:	4628      	mov	r0, r5
 80132a8:	f7fc f864 	bl	800f374 <ucdr_serialize_uint8_t>
 80132ac:	7961      	ldrb	r1, [r4, #5]
 80132ae:	4606      	mov	r6, r0
 80132b0:	4628      	mov	r0, r5
 80132b2:	f7fc f85f 	bl	800f374 <ucdr_serialize_uint8_t>
 80132b6:	ea08 0807 	and.w	r8, r8, r7
 80132ba:	ea06 0608 	and.w	r6, r6, r8
 80132be:	4006      	ands	r6, r0
 80132c0:	7a21      	ldrb	r1, [r4, #8]
 80132c2:	4628      	mov	r0, r5
 80132c4:	f7fc f828 	bl	800f318 <ucdr_serialize_bool>
 80132c8:	7a23      	ldrb	r3, [r4, #8]
 80132ca:	b2f7      	uxtb	r7, r6
 80132cc:	4606      	mov	r6, r0
 80132ce:	b96b      	cbnz	r3, 80132ec <uxr_serialize_INFO_Payload+0x64>
 80132d0:	f894 121c 	ldrb.w	r1, [r4, #540]	@ 0x21c
 80132d4:	4628      	mov	r0, r5
 80132d6:	f7fc f81f 	bl	800f318 <ucdr_serialize_bool>
 80132da:	f894 321c 	ldrb.w	r3, [r4, #540]	@ 0x21c
 80132de:	4030      	ands	r0, r6
 80132e0:	b2c6      	uxtb	r6, r0
 80132e2:	b983      	cbnz	r3, 8013306 <uxr_serialize_INFO_Payload+0x7e>
 80132e4:	ea06 0007 	and.w	r0, r6, r7
 80132e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80132ec:	7b21      	ldrb	r1, [r4, #12]
 80132ee:	4628      	mov	r0, r5
 80132f0:	f7fc f840 	bl	800f374 <ucdr_serialize_uint8_t>
 80132f4:	b188      	cbz	r0, 801331a <uxr_serialize_INFO_Payload+0x92>
 80132f6:	f104 010c 	add.w	r1, r4, #12
 80132fa:	4628      	mov	r0, r5
 80132fc:	f7ff fa06 	bl	801270c <uxr_serialize_ObjectVariant.part.0>
 8013300:	4030      	ands	r0, r6
 8013302:	b2c6      	uxtb	r6, r0
 8013304:	e7e4      	b.n	80132d0 <uxr_serialize_INFO_Payload+0x48>
 8013306:	f504 7108 	add.w	r1, r4, #544	@ 0x220
 801330a:	4628      	mov	r0, r5
 801330c:	f7ff fdb2 	bl	8012e74 <uxr_serialize_ActivityInfoVariant>
 8013310:	4006      	ands	r6, r0
 8013312:	ea06 0007 	and.w	r0, r6, r7
 8013316:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801331a:	4606      	mov	r6, r0
 801331c:	e7d8      	b.n	80132d0 <uxr_serialize_INFO_Payload+0x48>
 801331e:	bf00      	nop

08013320 <uxr_serialize_READ_DATA_Payload>:
 8013320:	b570      	push	{r4, r5, r6, lr}
 8013322:	2202      	movs	r2, #2
 8013324:	4605      	mov	r5, r0
 8013326:	460e      	mov	r6, r1
 8013328:	f005 f962 	bl	80185f0 <ucdr_serialize_array_uint8_t>
 801332c:	2202      	movs	r2, #2
 801332e:	18b1      	adds	r1, r6, r2
 8013330:	4604      	mov	r4, r0
 8013332:	4628      	mov	r0, r5
 8013334:	f005 f95c 	bl	80185f0 <ucdr_serialize_array_uint8_t>
 8013338:	1d31      	adds	r1, r6, #4
 801333a:	4004      	ands	r4, r0
 801333c:	4628      	mov	r0, r5
 801333e:	f7ff fe5d 	bl	8012ffc <uxr_serialize_ReadSpecification>
 8013342:	b2e4      	uxtb	r4, r4
 8013344:	4020      	ands	r0, r4
 8013346:	bd70      	pop	{r4, r5, r6, pc}

08013348 <uxr_serialize_WRITE_DATA_Payload_Data>:
 8013348:	b570      	push	{r4, r5, r6, lr}
 801334a:	2202      	movs	r2, #2
 801334c:	4605      	mov	r5, r0
 801334e:	460e      	mov	r6, r1
 8013350:	f005 f94e 	bl	80185f0 <ucdr_serialize_array_uint8_t>
 8013354:	2202      	movs	r2, #2
 8013356:	4604      	mov	r4, r0
 8013358:	18b1      	adds	r1, r6, r2
 801335a:	4628      	mov	r0, r5
 801335c:	f005 f948 	bl	80185f0 <ucdr_serialize_array_uint8_t>
 8013360:	4020      	ands	r0, r4
 8013362:	b2c0      	uxtb	r0, r0
 8013364:	bd70      	pop	{r4, r5, r6, pc}
 8013366:	bf00      	nop

08013368 <uxr_serialize_ACKNACK_Payload>:
 8013368:	b570      	push	{r4, r5, r6, lr}
 801336a:	460c      	mov	r4, r1
 801336c:	460e      	mov	r6, r1
 801336e:	f834 1b02 	ldrh.w	r1, [r4], #2
 8013372:	4605      	mov	r5, r0
 8013374:	f7fc f82a 	bl	800f3cc <ucdr_serialize_uint16_t>
 8013378:	2202      	movs	r2, #2
 801337a:	4621      	mov	r1, r4
 801337c:	4604      	mov	r4, r0
 801337e:	4628      	mov	r0, r5
 8013380:	f005 f936 	bl	80185f0 <ucdr_serialize_array_uint8_t>
 8013384:	7931      	ldrb	r1, [r6, #4]
 8013386:	4004      	ands	r4, r0
 8013388:	4628      	mov	r0, r5
 801338a:	f7fb fff3 	bl	800f374 <ucdr_serialize_uint8_t>
 801338e:	b2e4      	uxtb	r4, r4
 8013390:	4020      	ands	r0, r4
 8013392:	bd70      	pop	{r4, r5, r6, pc}

08013394 <uxr_deserialize_ACKNACK_Payload>:
 8013394:	b570      	push	{r4, r5, r6, lr}
 8013396:	4605      	mov	r5, r0
 8013398:	460e      	mov	r6, r1
 801339a:	f7fc f917 	bl	800f5cc <ucdr_deserialize_uint16_t>
 801339e:	2202      	movs	r2, #2
 80133a0:	18b1      	adds	r1, r6, r2
 80133a2:	4604      	mov	r4, r0
 80133a4:	4628      	mov	r0, r5
 80133a6:	f005 f987 	bl	80186b8 <ucdr_deserialize_array_uint8_t>
 80133aa:	1d31      	adds	r1, r6, #4
 80133ac:	4004      	ands	r4, r0
 80133ae:	4628      	mov	r0, r5
 80133b0:	f7fb fff6 	bl	800f3a0 <ucdr_deserialize_uint8_t>
 80133b4:	b2e4      	uxtb	r4, r4
 80133b6:	4020      	ands	r0, r4
 80133b8:	bd70      	pop	{r4, r5, r6, pc}
 80133ba:	bf00      	nop

080133bc <uxr_serialize_HEARTBEAT_Payload>:
 80133bc:	b570      	push	{r4, r5, r6, lr}
 80133be:	460d      	mov	r5, r1
 80133c0:	8809      	ldrh	r1, [r1, #0]
 80133c2:	4606      	mov	r6, r0
 80133c4:	f7fc f802 	bl	800f3cc <ucdr_serialize_uint16_t>
 80133c8:	8869      	ldrh	r1, [r5, #2]
 80133ca:	4604      	mov	r4, r0
 80133cc:	4630      	mov	r0, r6
 80133ce:	f7fb fffd 	bl	800f3cc <ucdr_serialize_uint16_t>
 80133d2:	7929      	ldrb	r1, [r5, #4]
 80133d4:	4004      	ands	r4, r0
 80133d6:	4630      	mov	r0, r6
 80133d8:	f7fb ffcc 	bl	800f374 <ucdr_serialize_uint8_t>
 80133dc:	b2e4      	uxtb	r4, r4
 80133de:	4020      	ands	r0, r4
 80133e0:	bd70      	pop	{r4, r5, r6, pc}
 80133e2:	bf00      	nop

080133e4 <uxr_deserialize_HEARTBEAT_Payload>:
 80133e4:	b570      	push	{r4, r5, r6, lr}
 80133e6:	4605      	mov	r5, r0
 80133e8:	460e      	mov	r6, r1
 80133ea:	f7fc f8ef 	bl	800f5cc <ucdr_deserialize_uint16_t>
 80133ee:	1cb1      	adds	r1, r6, #2
 80133f0:	4604      	mov	r4, r0
 80133f2:	4628      	mov	r0, r5
 80133f4:	f7fc f8ea 	bl	800f5cc <ucdr_deserialize_uint16_t>
 80133f8:	1d31      	adds	r1, r6, #4
 80133fa:	4004      	ands	r4, r0
 80133fc:	4628      	mov	r0, r5
 80133fe:	f7fb ffcf 	bl	800f3a0 <ucdr_deserialize_uint8_t>
 8013402:	b2e4      	uxtb	r4, r4
 8013404:	4020      	ands	r0, r4
 8013406:	bd70      	pop	{r4, r5, r6, pc}

08013408 <uxr_deserialize_TIMESTAMP_REPLY_Payload>:
 8013408:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801340c:	4605      	mov	r5, r0
 801340e:	460e      	mov	r6, r1
 8013410:	f7fc fe78 	bl	8010104 <ucdr_deserialize_int32_t>
 8013414:	1d31      	adds	r1, r6, #4
 8013416:	4607      	mov	r7, r0
 8013418:	4628      	mov	r0, r5
 801341a:	f7fc faf1 	bl	800fa00 <ucdr_deserialize_uint32_t>
 801341e:	f106 0108 	add.w	r1, r6, #8
 8013422:	4680      	mov	r8, r0
 8013424:	4628      	mov	r0, r5
 8013426:	f7fc fe6d 	bl	8010104 <ucdr_deserialize_int32_t>
 801342a:	f106 010c 	add.w	r1, r6, #12
 801342e:	4604      	mov	r4, r0
 8013430:	4628      	mov	r0, r5
 8013432:	f7fc fae5 	bl	800fa00 <ucdr_deserialize_uint32_t>
 8013436:	ea07 0708 	and.w	r7, r7, r8
 801343a:	403c      	ands	r4, r7
 801343c:	f106 0110 	add.w	r1, r6, #16
 8013440:	4004      	ands	r4, r0
 8013442:	4628      	mov	r0, r5
 8013444:	f7fc fe5e 	bl	8010104 <ucdr_deserialize_int32_t>
 8013448:	f106 0114 	add.w	r1, r6, #20
 801344c:	4607      	mov	r7, r0
 801344e:	4628      	mov	r0, r5
 8013450:	f7fc fad6 	bl	800fa00 <ucdr_deserialize_uint32_t>
 8013454:	b2e4      	uxtb	r4, r4
 8013456:	403c      	ands	r4, r7
 8013458:	4020      	ands	r0, r4
 801345a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801345e:	bf00      	nop

08013460 <uxr_serialize_SampleIdentity>:
 8013460:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013464:	220c      	movs	r2, #12
 8013466:	4604      	mov	r4, r0
 8013468:	460d      	mov	r5, r1
 801346a:	f005 f8c1 	bl	80185f0 <ucdr_serialize_array_uint8_t>
 801346e:	2203      	movs	r2, #3
 8013470:	f105 010c 	add.w	r1, r5, #12
 8013474:	4607      	mov	r7, r0
 8013476:	4620      	mov	r0, r4
 8013478:	f005 f8ba 	bl	80185f0 <ucdr_serialize_array_uint8_t>
 801347c:	7be9      	ldrb	r1, [r5, #15]
 801347e:	4680      	mov	r8, r0
 8013480:	4620      	mov	r0, r4
 8013482:	f7fb ff77 	bl	800f374 <ucdr_serialize_uint8_t>
 8013486:	6929      	ldr	r1, [r5, #16]
 8013488:	4606      	mov	r6, r0
 801348a:	4620      	mov	r0, r4
 801348c:	f7fc fda2 	bl	800ffd4 <ucdr_serialize_int32_t>
 8013490:	6969      	ldr	r1, [r5, #20]
 8013492:	4603      	mov	r3, r0
 8013494:	4620      	mov	r0, r4
 8013496:	ea07 0708 	and.w	r7, r7, r8
 801349a:	461c      	mov	r4, r3
 801349c:	f7fc f980 	bl	800f7a0 <ucdr_serialize_uint32_t>
 80134a0:	403e      	ands	r6, r7
 80134a2:	4034      	ands	r4, r6
 80134a4:	4020      	ands	r0, r4
 80134a6:	b2c0      	uxtb	r0, r0
 80134a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080134ac <uxr_deserialize_SampleIdentity>:
 80134ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80134b0:	220c      	movs	r2, #12
 80134b2:	4604      	mov	r4, r0
 80134b4:	460d      	mov	r5, r1
 80134b6:	f005 f8ff 	bl	80186b8 <ucdr_deserialize_array_uint8_t>
 80134ba:	2203      	movs	r2, #3
 80134bc:	f105 010c 	add.w	r1, r5, #12
 80134c0:	4607      	mov	r7, r0
 80134c2:	4620      	mov	r0, r4
 80134c4:	f005 f8f8 	bl	80186b8 <ucdr_deserialize_array_uint8_t>
 80134c8:	f105 010f 	add.w	r1, r5, #15
 80134cc:	4680      	mov	r8, r0
 80134ce:	4620      	mov	r0, r4
 80134d0:	f7fb ff66 	bl	800f3a0 <ucdr_deserialize_uint8_t>
 80134d4:	f105 0110 	add.w	r1, r5, #16
 80134d8:	4606      	mov	r6, r0
 80134da:	4620      	mov	r0, r4
 80134dc:	f7fc fe12 	bl	8010104 <ucdr_deserialize_int32_t>
 80134e0:	f105 0114 	add.w	r1, r5, #20
 80134e4:	4603      	mov	r3, r0
 80134e6:	4620      	mov	r0, r4
 80134e8:	ea07 0708 	and.w	r7, r7, r8
 80134ec:	461c      	mov	r4, r3
 80134ee:	f7fc fa87 	bl	800fa00 <ucdr_deserialize_uint32_t>
 80134f2:	403e      	ands	r6, r7
 80134f4:	4034      	ands	r4, r6
 80134f6:	4020      	ands	r0, r4
 80134f8:	b2c0      	uxtb	r0, r0
 80134fa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80134fe:	bf00      	nop

08013500 <rcl_client_get_rmw_handle>:
 8013500:	b118      	cbz	r0, 801350a <rcl_client_get_rmw_handle+0xa>
 8013502:	6800      	ldr	r0, [r0, #0]
 8013504:	b108      	cbz	r0, 801350a <rcl_client_get_rmw_handle+0xa>
 8013506:	f8d0 0108 	ldr.w	r0, [r0, #264]	@ 0x108
 801350a:	4770      	bx	lr

0801350c <rcl_send_request>:
 801350c:	b570      	push	{r4, r5, r6, lr}
 801350e:	b082      	sub	sp, #8
 8013510:	b1e8      	cbz	r0, 801354e <rcl_send_request+0x42>
 8013512:	4604      	mov	r4, r0
 8013514:	6800      	ldr	r0, [r0, #0]
 8013516:	b1d0      	cbz	r0, 801354e <rcl_send_request+0x42>
 8013518:	f8d0 3108 	ldr.w	r3, [r0, #264]	@ 0x108
 801351c:	b1bb      	cbz	r3, 801354e <rcl_send_request+0x42>
 801351e:	460e      	mov	r6, r1
 8013520:	b1d1      	cbz	r1, 8013558 <rcl_send_request+0x4c>
 8013522:	4615      	mov	r5, r2
 8013524:	b1c2      	cbz	r2, 8013558 <rcl_send_request+0x4c>
 8013526:	2105      	movs	r1, #5
 8013528:	f500 7088 	add.w	r0, r0, #272	@ 0x110
 801352c:	f002 ff80 	bl	8016430 <__atomic_load_8>
 8013530:	6823      	ldr	r3, [r4, #0]
 8013532:	e9c5 0100 	strd	r0, r1, [r5]
 8013536:	462a      	mov	r2, r5
 8013538:	4631      	mov	r1, r6
 801353a:	f8d3 0108 	ldr.w	r0, [r3, #264]	@ 0x108
 801353e:	f004 f92b 	bl	8017798 <rmw_send_request>
 8013542:	4606      	mov	r6, r0
 8013544:	b160      	cbz	r0, 8013560 <rcl_send_request+0x54>
 8013546:	2601      	movs	r6, #1
 8013548:	4630      	mov	r0, r6
 801354a:	b002      	add	sp, #8
 801354c:	bd70      	pop	{r4, r5, r6, pc}
 801354e:	f44f 76fa 	mov.w	r6, #500	@ 0x1f4
 8013552:	4630      	mov	r0, r6
 8013554:	b002      	add	sp, #8
 8013556:	bd70      	pop	{r4, r5, r6, pc}
 8013558:	260b      	movs	r6, #11
 801355a:	4630      	mov	r0, r6
 801355c:	b002      	add	sp, #8
 801355e:	bd70      	pop	{r4, r5, r6, pc}
 8013560:	6820      	ldr	r0, [r4, #0]
 8013562:	2105      	movs	r1, #5
 8013564:	e9d5 2300 	ldrd	r2, r3, [r5]
 8013568:	f500 7088 	add.w	r0, r0, #272	@ 0x110
 801356c:	9100      	str	r1, [sp, #0]
 801356e:	f002 ffcb 	bl	8016508 <__atomic_exchange_8>
 8013572:	4630      	mov	r0, r6
 8013574:	b002      	add	sp, #8
 8013576:	bd70      	pop	{r4, r5, r6, pc}

08013578 <rcl_take_response>:
 8013578:	b570      	push	{r4, r5, r6, lr}
 801357a:	468e      	mov	lr, r1
 801357c:	460c      	mov	r4, r1
 801357e:	4616      	mov	r6, r2
 8013580:	4605      	mov	r5, r0
 8013582:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8013586:	b08c      	sub	sp, #48	@ 0x30
 8013588:	f10d 0c18 	add.w	ip, sp, #24
 801358c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8013590:	e89e 0003 	ldmia.w	lr, {r0, r1}
 8013594:	e88c 0003 	stmia.w	ip, {r0, r1}
 8013598:	b35d      	cbz	r5, 80135f2 <rcl_take_response+0x7a>
 801359a:	682b      	ldr	r3, [r5, #0]
 801359c:	b34b      	cbz	r3, 80135f2 <rcl_take_response+0x7a>
 801359e:	f8d3 0108 	ldr.w	r0, [r3, #264]	@ 0x108
 80135a2:	b330      	cbz	r0, 80135f2 <rcl_take_response+0x7a>
 80135a4:	b346      	cbz	r6, 80135f8 <rcl_take_response+0x80>
 80135a6:	ed9f 7b16 	vldr	d7, [pc, #88]	@ 8013600 <rcl_take_response+0x88>
 80135aa:	2300      	movs	r3, #0
 80135ac:	f88d 3007 	strb.w	r3, [sp, #7]
 80135b0:	4632      	mov	r2, r6
 80135b2:	f10d 0307 	add.w	r3, sp, #7
 80135b6:	a902      	add	r1, sp, #8
 80135b8:	ed8d 7b02 	vstr	d7, [sp, #8]
 80135bc:	ed8d 7b04 	vstr	d7, [sp, #16]
 80135c0:	f004 f9f2 	bl	80179a8 <rmw_take_response>
 80135c4:	4605      	mov	r5, r0
 80135c6:	b9c8      	cbnz	r0, 80135fc <rcl_take_response+0x84>
 80135c8:	f89d 2007 	ldrb.w	r2, [sp, #7]
 80135cc:	f240 13f5 	movw	r3, #501	@ 0x1f5
 80135d0:	2a00      	cmp	r2, #0
 80135d2:	bf08      	it	eq
 80135d4:	461d      	moveq	r5, r3
 80135d6:	f10d 0e18 	add.w	lr, sp, #24
 80135da:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 80135de:	46a4      	mov	ip, r4
 80135e0:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80135e4:	e89e 0003 	ldmia.w	lr, {r0, r1}
 80135e8:	e88c 0003 	stmia.w	ip, {r0, r1}
 80135ec:	4628      	mov	r0, r5
 80135ee:	b00c      	add	sp, #48	@ 0x30
 80135f0:	bd70      	pop	{r4, r5, r6, pc}
 80135f2:	f44f 75fa 	mov.w	r5, #500	@ 0x1f4
 80135f6:	e7ee      	b.n	80135d6 <rcl_take_response+0x5e>
 80135f8:	250b      	movs	r5, #11
 80135fa:	e7ec      	b.n	80135d6 <rcl_take_response+0x5e>
 80135fc:	2501      	movs	r5, #1
 80135fe:	e7ea      	b.n	80135d6 <rcl_take_response+0x5e>
	...

08013608 <rcl_client_is_valid>:
 8013608:	b130      	cbz	r0, 8013618 <rcl_client_is_valid+0x10>
 801360a:	6800      	ldr	r0, [r0, #0]
 801360c:	b120      	cbz	r0, 8013618 <rcl_client_is_valid+0x10>
 801360e:	f8d0 0108 	ldr.w	r0, [r0, #264]	@ 0x108
 8013612:	3800      	subs	r0, #0
 8013614:	bf18      	it	ne
 8013616:	2001      	movne	r0, #1
 8013618:	4770      	bx	lr
 801361a:	bf00      	nop

0801361c <rcl_convert_rmw_ret_to_rcl_ret>:
 801361c:	280b      	cmp	r0, #11
 801361e:	dc0d      	bgt.n	801363c <rcl_convert_rmw_ret_to_rcl_ret+0x20>
 8013620:	2800      	cmp	r0, #0
 8013622:	db09      	blt.n	8013638 <rcl_convert_rmw_ret_to_rcl_ret+0x1c>
 8013624:	280b      	cmp	r0, #11
 8013626:	d807      	bhi.n	8013638 <rcl_convert_rmw_ret_to_rcl_ret+0x1c>
 8013628:	e8df f000 	tbb	[pc, r0]
 801362c:	07060607 	.word	0x07060607
 8013630:	06060606 	.word	0x06060606
 8013634:	07070606 	.word	0x07070606
 8013638:	2001      	movs	r0, #1
 801363a:	4770      	bx	lr
 801363c:	28cb      	cmp	r0, #203	@ 0xcb
 801363e:	bf18      	it	ne
 8013640:	2001      	movne	r0, #1
 8013642:	4770      	bx	lr

08013644 <rcl_get_zero_initialized_context>:
 8013644:	4a03      	ldr	r2, [pc, #12]	@ (8013654 <rcl_get_zero_initialized_context+0x10>)
 8013646:	4603      	mov	r3, r0
 8013648:	e892 0003 	ldmia.w	r2, {r0, r1}
 801364c:	e883 0003 	stmia.w	r3, {r0, r1}
 8013650:	4618      	mov	r0, r3
 8013652:	4770      	bx	lr
 8013654:	0801d7bc 	.word	0x0801d7bc

08013658 <rcl_context_is_valid>:
 8013658:	b118      	cbz	r0, 8013662 <rcl_context_is_valid+0xa>
 801365a:	6840      	ldr	r0, [r0, #4]
 801365c:	3800      	subs	r0, #0
 801365e:	bf18      	it	ne
 8013660:	2001      	movne	r0, #1
 8013662:	4770      	bx	lr

08013664 <__cleanup_context>:
 8013664:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8013668:	4606      	mov	r6, r0
 801366a:	6800      	ldr	r0, [r0, #0]
 801366c:	2300      	movs	r3, #0
 801366e:	6073      	str	r3, [r6, #4]
 8013670:	2800      	cmp	r0, #0
 8013672:	d049      	beq.n	8013708 <__cleanup_context+0xa4>
 8013674:	6947      	ldr	r7, [r0, #20]
 8013676:	f8d0 8004 	ldr.w	r8, [r0, #4]
 801367a:	f8d0 9010 	ldr.w	r9, [r0, #16]
 801367e:	b137      	cbz	r7, 801368e <__cleanup_context+0x2a>
 8013680:	3014      	adds	r0, #20
 8013682:	f000 f9bb 	bl	80139fc <rcl_init_options_fini>
 8013686:	4607      	mov	r7, r0
 8013688:	2800      	cmp	r0, #0
 801368a:	d144      	bne.n	8013716 <__cleanup_context+0xb2>
 801368c:	6830      	ldr	r0, [r6, #0]
 801368e:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8013690:	b143      	cbz	r3, 80136a4 <__cleanup_context+0x40>
 8013692:	3028      	adds	r0, #40	@ 0x28
 8013694:	f003 fec8 	bl	8017428 <rmw_context_fini>
 8013698:	b118      	cbz	r0, 80136a2 <__cleanup_context+0x3e>
 801369a:	2f00      	cmp	r7, #0
 801369c:	d03e      	beq.n	801371c <__cleanup_context+0xb8>
 801369e:	f7fa feb7 	bl	800e410 <rcutils_reset_error>
 80136a2:	6830      	ldr	r0, [r6, #0]
 80136a4:	6a03      	ldr	r3, [r0, #32]
 80136a6:	b1db      	cbz	r3, 80136e0 <__cleanup_context+0x7c>
 80136a8:	e9d0 2c06 	ldrd	r2, ip, [r0, #24]
 80136ac:	2a01      	cmp	r2, #1
 80136ae:	f17c 0100 	sbcs.w	r1, ip, #0
 80136b2:	db11      	blt.n	80136d8 <__cleanup_context+0x74>
 80136b4:	2400      	movs	r4, #0
 80136b6:	4625      	mov	r5, r4
 80136b8:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 80136bc:	4649      	mov	r1, r9
 80136be:	b1b8      	cbz	r0, 80136f0 <__cleanup_context+0x8c>
 80136c0:	47c0      	blx	r8
 80136c2:	6833      	ldr	r3, [r6, #0]
 80136c4:	e9d3 2c06 	ldrd	r2, ip, [r3, #24]
 80136c8:	3401      	adds	r4, #1
 80136ca:	f145 0500 	adc.w	r5, r5, #0
 80136ce:	4294      	cmp	r4, r2
 80136d0:	eb75 010c 	sbcs.w	r1, r5, ip
 80136d4:	6a1b      	ldr	r3, [r3, #32]
 80136d6:	dbef      	blt.n	80136b8 <__cleanup_context+0x54>
 80136d8:	4618      	mov	r0, r3
 80136da:	4649      	mov	r1, r9
 80136dc:	47c0      	blx	r8
 80136de:	6830      	ldr	r0, [r6, #0]
 80136e0:	4649      	mov	r1, r9
 80136e2:	47c0      	blx	r8
 80136e4:	2300      	movs	r3, #0
 80136e6:	e9c6 3300 	strd	r3, r3, [r6]
 80136ea:	4638      	mov	r0, r7
 80136ec:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80136f0:	3401      	adds	r4, #1
 80136f2:	f145 0500 	adc.w	r5, r5, #0
 80136f6:	4294      	cmp	r4, r2
 80136f8:	eb75 010c 	sbcs.w	r1, r5, ip
 80136fc:	dbdc      	blt.n	80136b8 <__cleanup_context+0x54>
 80136fe:	4618      	mov	r0, r3
 8013700:	4649      	mov	r1, r9
 8013702:	47c0      	blx	r8
 8013704:	6830      	ldr	r0, [r6, #0]
 8013706:	e7eb      	b.n	80136e0 <__cleanup_context+0x7c>
 8013708:	4607      	mov	r7, r0
 801370a:	2300      	movs	r3, #0
 801370c:	e9c6 3300 	strd	r3, r3, [r6]
 8013710:	4638      	mov	r0, r7
 8013712:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8013716:	f7fa fe7b 	bl	800e410 <rcutils_reset_error>
 801371a:	e7b7      	b.n	801368c <__cleanup_context+0x28>
 801371c:	f7ff ff7e 	bl	801361c <rcl_convert_rmw_ret_to_rcl_ret>
 8013720:	4607      	mov	r7, r0
 8013722:	e7bc      	b.n	801369e <__cleanup_context+0x3a>

08013724 <rcl_init>:
 8013724:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013728:	1e05      	subs	r5, r0, #0
 801372a:	b09e      	sub	sp, #120	@ 0x78
 801372c:	460e      	mov	r6, r1
 801372e:	4690      	mov	r8, r2
 8013730:	461f      	mov	r7, r3
 8013732:	f340 809c 	ble.w	801386e <rcl_init+0x14a>
 8013736:	2900      	cmp	r1, #0
 8013738:	f000 809c 	beq.w	8013874 <rcl_init+0x150>
 801373c:	f1a1 0e04 	sub.w	lr, r1, #4
 8013740:	f04f 0c00 	mov.w	ip, #0
 8013744:	f85e 4f04 	ldr.w	r4, [lr, #4]!
 8013748:	f10c 0c01 	add.w	ip, ip, #1
 801374c:	2c00      	cmp	r4, #0
 801374e:	f000 8091 	beq.w	8013874 <rcl_init+0x150>
 8013752:	4565      	cmp	r5, ip
 8013754:	d1f6      	bne.n	8013744 <rcl_init+0x20>
 8013756:	f1b8 0f00 	cmp.w	r8, #0
 801375a:	f000 808b 	beq.w	8013874 <rcl_init+0x150>
 801375e:	f8d8 4000 	ldr.w	r4, [r8]
 8013762:	2c00      	cmp	r4, #0
 8013764:	f000 8086 	beq.w	8013874 <rcl_init+0x150>
 8013768:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801376a:	f10d 0c64 	add.w	ip, sp, #100	@ 0x64
 801376e:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8013772:	6823      	ldr	r3, [r4, #0]
 8013774:	f8cc 3000 	str.w	r3, [ip]
 8013778:	a819      	add	r0, sp, #100	@ 0x64
 801377a:	f7fa fe25 	bl	800e3c8 <rcutils_allocator_is_valid>
 801377e:	2800      	cmp	r0, #0
 8013780:	d078      	beq.n	8013874 <rcl_init+0x150>
 8013782:	2f00      	cmp	r7, #0
 8013784:	d076      	beq.n	8013874 <rcl_init+0x150>
 8013786:	683b      	ldr	r3, [r7, #0]
 8013788:	2b00      	cmp	r3, #0
 801378a:	d178      	bne.n	801387e <rcl_init+0x15a>
 801378c:	e9dd 321c 	ldrd	r3, r2, [sp, #112]	@ 0x70
 8013790:	2178      	movs	r1, #120	@ 0x78
 8013792:	2001      	movs	r0, #1
 8013794:	4798      	blx	r3
 8013796:	4604      	mov	r4, r0
 8013798:	6038      	str	r0, [r7, #0]
 801379a:	2800      	cmp	r0, #0
 801379c:	f000 80b6 	beq.w	801390c <rcl_init+0x1e8>
 80137a0:	a802      	add	r0, sp, #8
 80137a2:	f003 f995 	bl	8016ad0 <rmw_get_zero_initialized_context>
 80137a6:	a902      	add	r1, sp, #8
 80137a8:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 80137ac:	2250      	movs	r2, #80	@ 0x50
 80137ae:	ac19      	add	r4, sp, #100	@ 0x64
 80137b0:	f007 ffbb 	bl	801b72a <memcpy>
 80137b4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80137b6:	f8d7 e000 	ldr.w	lr, [r7]
 80137ba:	46f4      	mov	ip, lr
 80137bc:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80137c0:	6823      	ldr	r3, [r4, #0]
 80137c2:	f8cc 3000 	str.w	r3, [ip]
 80137c6:	f10e 0114 	add.w	r1, lr, #20
 80137ca:	4640      	mov	r0, r8
 80137cc:	f000 f940 	bl	8013a50 <rcl_init_options_copy>
 80137d0:	4604      	mov	r4, r0
 80137d2:	2800      	cmp	r0, #0
 80137d4:	d144      	bne.n	8013860 <rcl_init+0x13c>
 80137d6:	f8d7 9000 	ldr.w	r9, [r7]
 80137da:	ea4f 78e5 	mov.w	r8, r5, asr #31
 80137de:	f8c9 0020 	str.w	r0, [r9, #32]
 80137e2:	f8c9 5018 	str.w	r5, [r9, #24]
 80137e6:	f8c9 801c 	str.w	r8, [r9, #28]
 80137ea:	2d00      	cmp	r5, #0
 80137ec:	d04e      	beq.n	801388c <rcl_init+0x168>
 80137ee:	2e00      	cmp	r6, #0
 80137f0:	d04c      	beq.n	801388c <rcl_init+0x168>
 80137f2:	e9dd 321c 	ldrd	r3, r2, [sp, #112]	@ 0x70
 80137f6:	2104      	movs	r1, #4
 80137f8:	4628      	mov	r0, r5
 80137fa:	4798      	blx	r3
 80137fc:	f8c9 0020 	str.w	r0, [r9, #32]
 8013800:	f8d7 9000 	ldr.w	r9, [r7]
 8013804:	f8d9 3020 	ldr.w	r3, [r9, #32]
 8013808:	46ca      	mov	sl, r9
 801380a:	b343      	cbz	r3, 801385e <rcl_init+0x13a>
 801380c:	2d01      	cmp	r5, #1
 801380e:	f178 0300 	sbcs.w	r3, r8, #0
 8013812:	db3b      	blt.n	801388c <rcl_init+0x168>
 8013814:	2400      	movs	r4, #0
 8013816:	3e04      	subs	r6, #4
 8013818:	46a1      	mov	r9, r4
 801381a:	e00b      	b.n	8013834 <rcl_init+0x110>
 801381c:	6831      	ldr	r1, [r6, #0]
 801381e:	f007 ff84 	bl	801b72a <memcpy>
 8013822:	3401      	adds	r4, #1
 8013824:	f149 0900 	adc.w	r9, r9, #0
 8013828:	45c8      	cmp	r8, r9
 801382a:	bf08      	it	eq
 801382c:	42a5      	cmpeq	r5, r4
 801382e:	d02b      	beq.n	8013888 <rcl_init+0x164>
 8013830:	f8d7 a000 	ldr.w	sl, [r7]
 8013834:	f856 0f04 	ldr.w	r0, [r6, #4]!
 8013838:	f7ec fcd4 	bl	80001e4 <strlen>
 801383c:	1c42      	adds	r2, r0, #1
 801383e:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8013840:	991d      	ldr	r1, [sp, #116]	@ 0x74
 8013842:	f8da a020 	ldr.w	sl, [sl, #32]
 8013846:	9201      	str	r2, [sp, #4]
 8013848:	4610      	mov	r0, r2
 801384a:	4798      	blx	r3
 801384c:	683b      	ldr	r3, [r7, #0]
 801384e:	f84a 0024 	str.w	r0, [sl, r4, lsl #2]
 8013852:	6a1b      	ldr	r3, [r3, #32]
 8013854:	9a01      	ldr	r2, [sp, #4]
 8013856:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 801385a:	2800      	cmp	r0, #0
 801385c:	d1de      	bne.n	801381c <rcl_init+0xf8>
 801385e:	240a      	movs	r4, #10
 8013860:	4638      	mov	r0, r7
 8013862:	f7ff feff 	bl	8013664 <__cleanup_context>
 8013866:	4620      	mov	r0, r4
 8013868:	b01e      	add	sp, #120	@ 0x78
 801386a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801386e:	2900      	cmp	r1, #0
 8013870:	f43f af71 	beq.w	8013756 <rcl_init+0x32>
 8013874:	240b      	movs	r4, #11
 8013876:	4620      	mov	r0, r4
 8013878:	b01e      	add	sp, #120	@ 0x78
 801387a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801387e:	2464      	movs	r4, #100	@ 0x64
 8013880:	4620      	mov	r0, r4
 8013882:	b01e      	add	sp, #120	@ 0x78
 8013884:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013888:	f8d7 9000 	ldr.w	r9, [r7]
 801388c:	4926      	ldr	r1, [pc, #152]	@ (8013928 <rcl_init+0x204>)
 801388e:	680b      	ldr	r3, [r1, #0]
 8013890:	3301      	adds	r3, #1
 8013892:	d036      	beq.n	8013902 <rcl_init+0x1de>
 8013894:	600b      	str	r3, [r1, #0]
 8013896:	461a      	mov	r2, r3
 8013898:	2400      	movs	r4, #0
 801389a:	f8d9 0014 	ldr.w	r0, [r9, #20]
 801389e:	607b      	str	r3, [r7, #4]
 80138a0:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 80138a2:	3301      	adds	r3, #1
 80138a4:	e9c0 2406 	strd	r2, r4, [r0, #24]
 80138a8:	d034      	beq.n	8013914 <rcl_init+0x1f0>
 80138aa:	f890 3030 	ldrb.w	r3, [r0, #48]	@ 0x30
 80138ae:	b93b      	cbnz	r3, 80138c0 <rcl_init+0x19c>
 80138b0:	3030      	adds	r0, #48	@ 0x30
 80138b2:	f000 f939 	bl	8013b28 <rcl_get_localhost_only>
 80138b6:	4604      	mov	r4, r0
 80138b8:	2800      	cmp	r0, #0
 80138ba:	d1d1      	bne.n	8013860 <rcl_init+0x13c>
 80138bc:	683b      	ldr	r3, [r7, #0]
 80138be:	6958      	ldr	r0, [r3, #20]
 80138c0:	6b40      	ldr	r0, [r0, #52]	@ 0x34
 80138c2:	aa18      	add	r2, sp, #96	@ 0x60
 80138c4:	a917      	add	r1, sp, #92	@ 0x5c
 80138c6:	f001 fa4d 	bl	8014d64 <rcl_validate_enclave_name>
 80138ca:	4604      	mov	r4, r0
 80138cc:	2800      	cmp	r0, #0
 80138ce:	d1c7      	bne.n	8013860 <rcl_init+0x13c>
 80138d0:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 80138d2:	b9eb      	cbnz	r3, 8013910 <rcl_init+0x1ec>
 80138d4:	6839      	ldr	r1, [r7, #0]
 80138d6:	694b      	ldr	r3, [r1, #20]
 80138d8:	6b58      	ldr	r0, [r3, #52]	@ 0x34
 80138da:	f103 0228 	add.w	r2, r3, #40	@ 0x28
 80138de:	f000 fc3d 	bl	801415c <rcl_get_security_options_from_environment>
 80138e2:	4604      	mov	r4, r0
 80138e4:	2800      	cmp	r0, #0
 80138e6:	d1bb      	bne.n	8013860 <rcl_init+0x13c>
 80138e8:	6839      	ldr	r1, [r7, #0]
 80138ea:	6948      	ldr	r0, [r1, #20]
 80138ec:	3128      	adds	r1, #40	@ 0x28
 80138ee:	3018      	adds	r0, #24
 80138f0:	f003 fc64 	bl	80171bc <rmw_init>
 80138f4:	4604      	mov	r4, r0
 80138f6:	2800      	cmp	r0, #0
 80138f8:	d0bd      	beq.n	8013876 <rcl_init+0x152>
 80138fa:	f7ff fe8f 	bl	801361c <rcl_convert_rmw_ret_to_rcl_ret>
 80138fe:	4604      	mov	r4, r0
 8013900:	e7ae      	b.n	8013860 <rcl_init+0x13c>
 8013902:	2201      	movs	r2, #1
 8013904:	461c      	mov	r4, r3
 8013906:	600a      	str	r2, [r1, #0]
 8013908:	4613      	mov	r3, r2
 801390a:	e7c6      	b.n	801389a <rcl_init+0x176>
 801390c:	240a      	movs	r4, #10
 801390e:	e7b2      	b.n	8013876 <rcl_init+0x152>
 8013910:	2401      	movs	r4, #1
 8013912:	e7a5      	b.n	8013860 <rcl_init+0x13c>
 8013914:	3024      	adds	r0, #36	@ 0x24
 8013916:	f006 fbe1 	bl	801a0dc <rcl_get_default_domain_id>
 801391a:	4604      	mov	r4, r0
 801391c:	2800      	cmp	r0, #0
 801391e:	d19f      	bne.n	8013860 <rcl_init+0x13c>
 8013920:	683b      	ldr	r3, [r7, #0]
 8013922:	6958      	ldr	r0, [r3, #20]
 8013924:	e7c1      	b.n	80138aa <rcl_init+0x186>
 8013926:	bf00      	nop
 8013928:	2000c0dc 	.word	0x2000c0dc

0801392c <rcl_get_zero_initialized_init_options>:
 801392c:	2000      	movs	r0, #0
 801392e:	4770      	bx	lr

08013930 <rcl_init_options_init>:
 8013930:	b084      	sub	sp, #16
 8013932:	b5f0      	push	{r4, r5, r6, r7, lr}
 8013934:	b097      	sub	sp, #92	@ 0x5c
 8013936:	ae1d      	add	r6, sp, #116	@ 0x74
 8013938:	e886 000e 	stmia.w	r6, {r1, r2, r3}
 801393c:	2800      	cmp	r0, #0
 801393e:	d058      	beq.n	80139f2 <rcl_init_options_init+0xc2>
 8013940:	6803      	ldr	r3, [r0, #0]
 8013942:	4605      	mov	r5, r0
 8013944:	b133      	cbz	r3, 8013954 <rcl_init_options_init+0x24>
 8013946:	2464      	movs	r4, #100	@ 0x64
 8013948:	4620      	mov	r0, r4
 801394a:	b017      	add	sp, #92	@ 0x5c
 801394c:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8013950:	b004      	add	sp, #16
 8013952:	4770      	bx	lr
 8013954:	4630      	mov	r0, r6
 8013956:	f7fa fd37 	bl	800e3c8 <rcutils_allocator_is_valid>
 801395a:	2800      	cmp	r0, #0
 801395c:	d049      	beq.n	80139f2 <rcl_init_options_init+0xc2>
 801395e:	46b4      	mov	ip, r6
 8013960:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8013964:	ac11      	add	r4, sp, #68	@ 0x44
 8013966:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8013968:	f8dc 3000 	ldr.w	r3, [ip]
 801396c:	6023      	str	r3, [r4, #0]
 801396e:	9921      	ldr	r1, [sp, #132]	@ 0x84
 8013970:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8013972:	2050      	movs	r0, #80	@ 0x50
 8013974:	4798      	blx	r3
 8013976:	4604      	mov	r4, r0
 8013978:	6028      	str	r0, [r5, #0]
 801397a:	2800      	cmp	r0, #0
 801397c:	d03b      	beq.n	80139f6 <rcl_init_options_init+0xc6>
 801397e:	f10d 0c44 	add.w	ip, sp, #68	@ 0x44
 8013982:	4686      	mov	lr, r0
 8013984:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8013988:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 801398c:	f8dc 3000 	ldr.w	r3, [ip]
 8013990:	f8ce 3000 	str.w	r3, [lr]
 8013994:	a802      	add	r0, sp, #8
 8013996:	f003 f8ab 	bl	8016af0 <rmw_get_zero_initialized_init_options>
 801399a:	f10d 0e08 	add.w	lr, sp, #8
 801399e:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 80139a2:	f104 0c18 	add.w	ip, r4, #24
 80139a6:	682f      	ldr	r7, [r5, #0]
 80139a8:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80139ac:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 80139b0:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80139b4:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 80139b8:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80139bc:	e89e 0003 	ldmia.w	lr, {r0, r1}
 80139c0:	ac20      	add	r4, sp, #128	@ 0x80
 80139c2:	e88c 0003 	stmia.w	ip, {r0, r1}
 80139c6:	e894 0003 	ldmia.w	r4, {r0, r1}
 80139ca:	e88d 0003 	stmia.w	sp, {r0, r1}
 80139ce:	e896 000e 	ldmia.w	r6, {r1, r2, r3}
 80139d2:	f107 0018 	add.w	r0, r7, #24
 80139d6:	f003 faf9 	bl	8016fcc <rmw_init_options_init>
 80139da:	4604      	mov	r4, r0
 80139dc:	2800      	cmp	r0, #0
 80139de:	d0b3      	beq.n	8013948 <rcl_init_options_init+0x18>
 80139e0:	9921      	ldr	r1, [sp, #132]	@ 0x84
 80139e2:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 80139e4:	6828      	ldr	r0, [r5, #0]
 80139e6:	4798      	blx	r3
 80139e8:	4620      	mov	r0, r4
 80139ea:	f7ff fe17 	bl	801361c <rcl_convert_rmw_ret_to_rcl_ret>
 80139ee:	4604      	mov	r4, r0
 80139f0:	e7aa      	b.n	8013948 <rcl_init_options_init+0x18>
 80139f2:	240b      	movs	r4, #11
 80139f4:	e7a8      	b.n	8013948 <rcl_init_options_init+0x18>
 80139f6:	240a      	movs	r4, #10
 80139f8:	e7a6      	b.n	8013948 <rcl_init_options_init+0x18>
 80139fa:	bf00      	nop

080139fc <rcl_init_options_fini>:
 80139fc:	b530      	push	{r4, r5, lr}
 80139fe:	b087      	sub	sp, #28
 8013a00:	b1f0      	cbz	r0, 8013a40 <rcl_init_options_fini+0x44>
 8013a02:	6803      	ldr	r3, [r0, #0]
 8013a04:	4604      	mov	r4, r0
 8013a06:	b1db      	cbz	r3, 8013a40 <rcl_init_options_fini+0x44>
 8013a08:	469c      	mov	ip, r3
 8013a0a:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8013a0e:	f10d 0e04 	add.w	lr, sp, #4
 8013a12:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8013a16:	f8dc 3000 	ldr.w	r3, [ip]
 8013a1a:	f8ce 3000 	str.w	r3, [lr]
 8013a1e:	a801      	add	r0, sp, #4
 8013a20:	f7fa fcd2 	bl	800e3c8 <rcutils_allocator_is_valid>
 8013a24:	b160      	cbz	r0, 8013a40 <rcl_init_options_fini+0x44>
 8013a26:	6820      	ldr	r0, [r4, #0]
 8013a28:	3018      	adds	r0, #24
 8013a2a:	f003 fb7f 	bl	801712c <rmw_init_options_fini>
 8013a2e:	4605      	mov	r5, r0
 8013a30:	b950      	cbnz	r0, 8013a48 <rcl_init_options_fini+0x4c>
 8013a32:	6820      	ldr	r0, [r4, #0]
 8013a34:	9b02      	ldr	r3, [sp, #8]
 8013a36:	9905      	ldr	r1, [sp, #20]
 8013a38:	4798      	blx	r3
 8013a3a:	4628      	mov	r0, r5
 8013a3c:	b007      	add	sp, #28
 8013a3e:	bd30      	pop	{r4, r5, pc}
 8013a40:	250b      	movs	r5, #11
 8013a42:	4628      	mov	r0, r5
 8013a44:	b007      	add	sp, #28
 8013a46:	bd30      	pop	{r4, r5, pc}
 8013a48:	f7ff fde8 	bl	801361c <rcl_convert_rmw_ret_to_rcl_ret>
 8013a4c:	4605      	mov	r5, r0
 8013a4e:	e7f8      	b.n	8013a42 <rcl_init_options_fini+0x46>

08013a50 <rcl_init_options_copy>:
 8013a50:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013a54:	b094      	sub	sp, #80	@ 0x50
 8013a56:	2800      	cmp	r0, #0
 8013a58:	d058      	beq.n	8013b0c <rcl_init_options_copy+0xbc>
 8013a5a:	4604      	mov	r4, r0
 8013a5c:	6800      	ldr	r0, [r0, #0]
 8013a5e:	2800      	cmp	r0, #0
 8013a60:	d054      	beq.n	8013b0c <rcl_init_options_copy+0xbc>
 8013a62:	460e      	mov	r6, r1
 8013a64:	f7fa fcb0 	bl	800e3c8 <rcutils_allocator_is_valid>
 8013a68:	2800      	cmp	r0, #0
 8013a6a:	d04f      	beq.n	8013b0c <rcl_init_options_copy+0xbc>
 8013a6c:	2e00      	cmp	r6, #0
 8013a6e:	d04d      	beq.n	8013b0c <rcl_init_options_copy+0xbc>
 8013a70:	6833      	ldr	r3, [r6, #0]
 8013a72:	b123      	cbz	r3, 8013a7e <rcl_init_options_copy+0x2e>
 8013a74:	2464      	movs	r4, #100	@ 0x64
 8013a76:	4620      	mov	r0, r4
 8013a78:	b014      	add	sp, #80	@ 0x50
 8013a7a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013a7e:	6827      	ldr	r7, [r4, #0]
 8013a80:	46bc      	mov	ip, r7
 8013a82:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8013a86:	ad0f      	add	r5, sp, #60	@ 0x3c
 8013a88:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8013a8a:	f8dc 3000 	ldr.w	r3, [ip]
 8013a8e:	f8d7 8000 	ldr.w	r8, [r7]
 8013a92:	602b      	str	r3, [r5, #0]
 8013a94:	4619      	mov	r1, r3
 8013a96:	2050      	movs	r0, #80	@ 0x50
 8013a98:	47c0      	blx	r8
 8013a9a:	4605      	mov	r5, r0
 8013a9c:	6030      	str	r0, [r6, #0]
 8013a9e:	b3d0      	cbz	r0, 8013b16 <rcl_init_options_copy+0xc6>
 8013aa0:	f10d 0c3c 	add.w	ip, sp, #60	@ 0x3c
 8013aa4:	4686      	mov	lr, r0
 8013aa6:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8013aaa:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8013aae:	f8dc 3000 	ldr.w	r3, [ip]
 8013ab2:	f8ce 3000 	str.w	r3, [lr]
 8013ab6:	4668      	mov	r0, sp
 8013ab8:	f003 f81a 	bl	8016af0 <rmw_get_zero_initialized_init_options>
 8013abc:	46ee      	mov	lr, sp
 8013abe:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8013ac2:	f105 0c18 	add.w	ip, r5, #24
 8013ac6:	6824      	ldr	r4, [r4, #0]
 8013ac8:	6835      	ldr	r5, [r6, #0]
 8013aca:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8013ace:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8013ad2:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8013ad6:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8013ada:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8013ade:	e89e 0003 	ldmia.w	lr, {r0, r1}
 8013ae2:	e88c 0003 	stmia.w	ip, {r0, r1}
 8013ae6:	f104 0018 	add.w	r0, r4, #24
 8013aea:	f105 0118 	add.w	r1, r5, #24
 8013aee:	f003 fad5 	bl	801709c <rmw_init_options_copy>
 8013af2:	4604      	mov	r4, r0
 8013af4:	2800      	cmp	r0, #0
 8013af6:	d0be      	beq.n	8013a76 <rcl_init_options_copy+0x26>
 8013af8:	f7fa fc74 	bl	800e3e4 <rcutils_get_error_string>
 8013afc:	f7fa fc88 	bl	800e410 <rcutils_reset_error>
 8013b00:	4630      	mov	r0, r6
 8013b02:	f7ff ff7b 	bl	80139fc <rcl_init_options_fini>
 8013b06:	b140      	cbz	r0, 8013b1a <rcl_init_options_copy+0xca>
 8013b08:	4604      	mov	r4, r0
 8013b0a:	e7b4      	b.n	8013a76 <rcl_init_options_copy+0x26>
 8013b0c:	240b      	movs	r4, #11
 8013b0e:	4620      	mov	r0, r4
 8013b10:	b014      	add	sp, #80	@ 0x50
 8013b12:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013b16:	240a      	movs	r4, #10
 8013b18:	e7ad      	b.n	8013a76 <rcl_init_options_copy+0x26>
 8013b1a:	4620      	mov	r0, r4
 8013b1c:	b014      	add	sp, #80	@ 0x50
 8013b1e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8013b22:	f7ff bd7b 	b.w	801361c <rcl_convert_rmw_ret_to_rcl_ret>
 8013b26:	bf00      	nop

08013b28 <rcl_get_localhost_only>:
 8013b28:	b510      	push	{r4, lr}
 8013b2a:	b082      	sub	sp, #8
 8013b2c:	2300      	movs	r3, #0
 8013b2e:	9301      	str	r3, [sp, #4]
 8013b30:	b1b8      	cbz	r0, 8013b62 <rcl_get_localhost_only+0x3a>
 8013b32:	4604      	mov	r4, r0
 8013b34:	a901      	add	r1, sp, #4
 8013b36:	480c      	ldr	r0, [pc, #48]	@ (8013b68 <rcl_get_localhost_only+0x40>)
 8013b38:	f002 fd1e 	bl	8016578 <rcutils_get_env>
 8013b3c:	b110      	cbz	r0, 8013b44 <rcl_get_localhost_only+0x1c>
 8013b3e:	2001      	movs	r0, #1
 8013b40:	b002      	add	sp, #8
 8013b42:	bd10      	pop	{r4, pc}
 8013b44:	9b01      	ldr	r3, [sp, #4]
 8013b46:	b113      	cbz	r3, 8013b4e <rcl_get_localhost_only+0x26>
 8013b48:	781a      	ldrb	r2, [r3, #0]
 8013b4a:	2a31      	cmp	r2, #49	@ 0x31
 8013b4c:	d004      	beq.n	8013b58 <rcl_get_localhost_only+0x30>
 8013b4e:	2302      	movs	r3, #2
 8013b50:	2000      	movs	r0, #0
 8013b52:	7023      	strb	r3, [r4, #0]
 8013b54:	b002      	add	sp, #8
 8013b56:	bd10      	pop	{r4, pc}
 8013b58:	785b      	ldrb	r3, [r3, #1]
 8013b5a:	2b00      	cmp	r3, #0
 8013b5c:	d1f7      	bne.n	8013b4e <rcl_get_localhost_only+0x26>
 8013b5e:	2301      	movs	r3, #1
 8013b60:	e7f6      	b.n	8013b50 <rcl_get_localhost_only+0x28>
 8013b62:	200b      	movs	r0, #11
 8013b64:	b002      	add	sp, #8
 8013b66:	bd10      	pop	{r4, pc}
 8013b68:	0801d7c4 	.word	0x0801d7c4

08013b6c <rcl_get_zero_initialized_node>:
 8013b6c:	4a03      	ldr	r2, [pc, #12]	@ (8013b7c <rcl_get_zero_initialized_node+0x10>)
 8013b6e:	4603      	mov	r3, r0
 8013b70:	e892 0003 	ldmia.w	r2, {r0, r1}
 8013b74:	e883 0003 	stmia.w	r3, {r0, r1}
 8013b78:	4618      	mov	r0, r3
 8013b7a:	4770      	bx	lr
 8013b7c:	0801d7ec 	.word	0x0801d7ec

08013b80 <rcl_node_init>:
 8013b80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013b84:	b0a9      	sub	sp, #164	@ 0xa4
 8013b86:	4604      	mov	r4, r0
 8013b88:	f8dd 80c8 	ldr.w	r8, [sp, #200]	@ 0xc8
 8013b8c:	a823      	add	r0, sp, #140	@ 0x8c
 8013b8e:	460e      	mov	r6, r1
 8013b90:	4615      	mov	r5, r2
 8013b92:	461f      	mov	r7, r3
 8013b94:	f006 fd16 	bl	801a5c4 <rcl_guard_condition_get_default_options>
 8013b98:	f1b8 0f00 	cmp.w	r8, #0
 8013b9c:	f000 80e6 	beq.w	8013d6c <rcl_node_init+0x1ec>
 8013ba0:	4640      	mov	r0, r8
 8013ba2:	f7fa fc11 	bl	800e3c8 <rcutils_allocator_is_valid>
 8013ba6:	2800      	cmp	r0, #0
 8013ba8:	f000 80e0 	beq.w	8013d6c <rcl_node_init+0x1ec>
 8013bac:	2e00      	cmp	r6, #0
 8013bae:	f000 80dd 	beq.w	8013d6c <rcl_node_init+0x1ec>
 8013bb2:	2d00      	cmp	r5, #0
 8013bb4:	f000 80da 	beq.w	8013d6c <rcl_node_init+0x1ec>
 8013bb8:	2c00      	cmp	r4, #0
 8013bba:	f000 80d7 	beq.w	8013d6c <rcl_node_init+0x1ec>
 8013bbe:	f8d4 9004 	ldr.w	r9, [r4, #4]
 8013bc2:	f1b9 0f00 	cmp.w	r9, #0
 8013bc6:	f040 80fd 	bne.w	8013dc4 <rcl_node_init+0x244>
 8013bca:	2f00      	cmp	r7, #0
 8013bcc:	f000 80ce 	beq.w	8013d6c <rcl_node_init+0x1ec>
 8013bd0:	4638      	mov	r0, r7
 8013bd2:	f7ff fd41 	bl	8013658 <rcl_context_is_valid>
 8013bd6:	4682      	mov	sl, r0
 8013bd8:	2800      	cmp	r0, #0
 8013bda:	f000 80cd 	beq.w	8013d78 <rcl_node_init+0x1f8>
 8013bde:	464a      	mov	r2, r9
 8013be0:	a922      	add	r1, sp, #136	@ 0x88
 8013be2:	4630      	mov	r0, r6
 8013be4:	f8cd 9088 	str.w	r9, [sp, #136]	@ 0x88
 8013be8:	f003 f924 	bl	8016e34 <rmw_validate_node_name>
 8013bec:	4681      	mov	r9, r0
 8013bee:	2800      	cmp	r0, #0
 8013bf0:	f040 80be 	bne.w	8013d70 <rcl_node_init+0x1f0>
 8013bf4:	9822      	ldr	r0, [sp, #136]	@ 0x88
 8013bf6:	2800      	cmp	r0, #0
 8013bf8:	f040 80f0 	bne.w	8013ddc <rcl_node_init+0x25c>
 8013bfc:	4628      	mov	r0, r5
 8013bfe:	f7ec faf1 	bl	80001e4 <strlen>
 8013c02:	2800      	cmp	r0, #0
 8013c04:	f040 80bb 	bne.w	8013d7e <rcl_node_init+0x1fe>
 8013c08:	4d7c      	ldr	r5, [pc, #496]	@ (8013dfc <rcl_node_init+0x27c>)
 8013c0a:	a922      	add	r1, sp, #136	@ 0x88
 8013c0c:	2200      	movs	r2, #0
 8013c0e:	4628      	mov	r0, r5
 8013c10:	f003 f8f2 	bl	8016df8 <rmw_validate_namespace>
 8013c14:	4681      	mov	r9, r0
 8013c16:	2800      	cmp	r0, #0
 8013c18:	f040 80aa 	bne.w	8013d70 <rcl_node_init+0x1f0>
 8013c1c:	4682      	mov	sl, r0
 8013c1e:	9822      	ldr	r0, [sp, #136]	@ 0x88
 8013c20:	2800      	cmp	r0, #0
 8013c22:	f040 80e0 	bne.w	8013de6 <rcl_node_init+0x266>
 8013c26:	f8d8 3000 	ldr.w	r3, [r8]
 8013c2a:	f8d8 1010 	ldr.w	r1, [r8, #16]
 8013c2e:	2078      	movs	r0, #120	@ 0x78
 8013c30:	4798      	blx	r3
 8013c32:	4681      	mov	r9, r0
 8013c34:	6060      	str	r0, [r4, #4]
 8013c36:	2800      	cmp	r0, #0
 8013c38:	f000 80ca 	beq.w	8013dd0 <rcl_node_init+0x250>
 8013c3c:	2200      	movs	r2, #0
 8013c3e:	2300      	movs	r3, #0
 8013c40:	e9c9 231a 	strd	r2, r3, [r9, #104]	@ 0x68
 8013c44:	e9c9 231c 	strd	r2, r3, [r9, #112]	@ 0x70
 8013c48:	a808      	add	r0, sp, #32
 8013c4a:	f000 f907 	bl	8013e5c <rcl_node_get_default_options>
 8013c4e:	a908      	add	r1, sp, #32
 8013c50:	4648      	mov	r0, r9
 8013c52:	2268      	movs	r2, #104	@ 0x68
 8013c54:	f007 fd69 	bl	801b72a <memcpy>
 8013c58:	6861      	ldr	r1, [r4, #4]
 8013c5a:	6027      	str	r7, [r4, #0]
 8013c5c:	4640      	mov	r0, r8
 8013c5e:	f000 f90b 	bl	8013e78 <rcl_node_options_copy>
 8013c62:	2800      	cmp	r0, #0
 8013c64:	d158      	bne.n	8013d18 <rcl_node_init+0x198>
 8013c66:	4628      	mov	r0, r5
 8013c68:	f7ec fabc 	bl	80001e4 <strlen>
 8013c6c:	4428      	add	r0, r5
 8013c6e:	f810 3c01 	ldrb.w	r3, [r0, #-1]
 8013c72:	e9cd 5603 	strd	r5, r6, [sp, #12]
 8013c76:	2b2f      	cmp	r3, #47	@ 0x2f
 8013c78:	f8d8 3010 	ldr.w	r3, [r8, #16]
 8013c7c:	9300      	str	r3, [sp, #0]
 8013c7e:	bf0c      	ite	eq
 8013c80:	4b5f      	ldreq	r3, [pc, #380]	@ (8013e00 <rcl_node_init+0x280>)
 8013c82:	4b60      	ldrne	r3, [pc, #384]	@ (8013e04 <rcl_node_init+0x284>)
 8013c84:	9302      	str	r3, [sp, #8]
 8013c86:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8013c8a:	9301      	str	r3, [sp, #4]
 8013c8c:	e898 000f 	ldmia.w	r8, {r0, r1, r2, r3}
 8013c90:	f8d4 9004 	ldr.w	r9, [r4, #4]
 8013c94:	f002 fc98 	bl	80165c8 <rcutils_format_string_limit>
 8013c98:	6823      	ldr	r3, [r4, #0]
 8013c9a:	f8c9 0074 	str.w	r0, [r9, #116]	@ 0x74
 8013c9e:	6818      	ldr	r0, [r3, #0]
 8013ca0:	4631      	mov	r1, r6
 8013ca2:	3028      	adds	r0, #40	@ 0x28
 8013ca4:	462a      	mov	r2, r5
 8013ca6:	6866      	ldr	r6, [r4, #4]
 8013ca8:	f003 fcdc 	bl	8017664 <rmw_create_node>
 8013cac:	6863      	ldr	r3, [r4, #4]
 8013cae:	66b0      	str	r0, [r6, #104]	@ 0x68
 8013cb0:	6e98      	ldr	r0, [r3, #104]	@ 0x68
 8013cb2:	2800      	cmp	r0, #0
 8013cb4:	d032      	beq.n	8013d1c <rcl_node_init+0x19c>
 8013cb6:	f003 fd69 	bl	801778c <rmw_node_get_graph_guard_condition>
 8013cba:	4681      	mov	r9, r0
 8013cbc:	b360      	cbz	r0, 8013d18 <rcl_node_init+0x198>
 8013cbe:	f8d8 3000 	ldr.w	r3, [r8]
 8013cc2:	f8d8 1010 	ldr.w	r1, [r8, #16]
 8013cc6:	6866      	ldr	r6, [r4, #4]
 8013cc8:	2008      	movs	r0, #8
 8013cca:	4798      	blx	r3
 8013ccc:	6863      	ldr	r3, [r4, #4]
 8013cce:	66f0      	str	r0, [r6, #108]	@ 0x6c
 8013cd0:	f8d3 b06c 	ldr.w	fp, [r3, #108]	@ 0x6c
 8013cd4:	f1bb 0f00 	cmp.w	fp, #0
 8013cd8:	d020      	beq.n	8013d1c <rcl_node_init+0x19c>
 8013cda:	a806      	add	r0, sp, #24
 8013cdc:	f006 fb96 	bl	801a40c <rcl_get_zero_initialized_guard_condition>
 8013ce0:	a806      	add	r0, sp, #24
 8013ce2:	c803      	ldmia	r0, {r0, r1}
 8013ce4:	6863      	ldr	r3, [r4, #4]
 8013ce6:	46c4      	mov	ip, r8
 8013ce8:	f8d3 e06c 	ldr.w	lr, [r3, #108]	@ 0x6c
 8013cec:	e88b 0003 	stmia.w	fp, {r0, r1}
 8013cf0:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8013cf4:	ae23      	add	r6, sp, #140	@ 0x8c
 8013cf6:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8013cf8:	f8dc 3000 	ldr.w	r3, [ip]
 8013cfc:	6033      	str	r3, [r6, #0]
 8013cfe:	ab28      	add	r3, sp, #160	@ 0xa0
 8013d00:	e913 000f 	ldmdb	r3, {r0, r1, r2, r3}
 8013d04:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 8013d08:	4649      	mov	r1, r9
 8013d0a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8013d0c:	463a      	mov	r2, r7
 8013d0e:	4670      	mov	r0, lr
 8013d10:	f006 fbd2 	bl	801a4b8 <rcl_guard_condition_init_from_rmw>
 8013d14:	4681      	mov	r9, r0
 8013d16:	b328      	cbz	r0, 8013d64 <rcl_node_init+0x1e4>
 8013d18:	6863      	ldr	r3, [r4, #4]
 8013d1a:	b1f3      	cbz	r3, 8013d5a <rcl_node_init+0x1da>
 8013d1c:	6f58      	ldr	r0, [r3, #116]	@ 0x74
 8013d1e:	b128      	cbz	r0, 8013d2c <rcl_node_init+0x1ac>
 8013d20:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8013d24:	f8d8 1010 	ldr.w	r1, [r8, #16]
 8013d28:	4798      	blx	r3
 8013d2a:	6863      	ldr	r3, [r4, #4]
 8013d2c:	6e98      	ldr	r0, [r3, #104]	@ 0x68
 8013d2e:	b110      	cbz	r0, 8013d36 <rcl_node_init+0x1b6>
 8013d30:	f003 fcb0 	bl	8017694 <rmw_destroy_node>
 8013d34:	6863      	ldr	r3, [r4, #4]
 8013d36:	6ed8      	ldr	r0, [r3, #108]	@ 0x6c
 8013d38:	b148      	cbz	r0, 8013d4e <rcl_node_init+0x1ce>
 8013d3a:	f006 fc1d 	bl	801a578 <rcl_guard_condition_fini>
 8013d3e:	6863      	ldr	r3, [r4, #4]
 8013d40:	f8d8 1010 	ldr.w	r1, [r8, #16]
 8013d44:	6ed8      	ldr	r0, [r3, #108]	@ 0x6c
 8013d46:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8013d4a:	4798      	blx	r3
 8013d4c:	6863      	ldr	r3, [r4, #4]
 8013d4e:	f8d8 1010 	ldr.w	r1, [r8, #16]
 8013d52:	4618      	mov	r0, r3
 8013d54:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8013d58:	4798      	blx	r3
 8013d5a:	2300      	movs	r3, #0
 8013d5c:	e9c4 3300 	strd	r3, r3, [r4]
 8013d60:	f04f 0901 	mov.w	r9, #1
 8013d64:	f1ba 0f00 	cmp.w	sl, #0
 8013d68:	d125      	bne.n	8013db6 <rcl_node_init+0x236>
 8013d6a:	e001      	b.n	8013d70 <rcl_node_init+0x1f0>
 8013d6c:	f04f 090b 	mov.w	r9, #11
 8013d70:	4648      	mov	r0, r9
 8013d72:	b029      	add	sp, #164	@ 0xa4
 8013d74:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013d78:	f04f 0965 	mov.w	r9, #101	@ 0x65
 8013d7c:	e7f8      	b.n	8013d70 <rcl_node_init+0x1f0>
 8013d7e:	782b      	ldrb	r3, [r5, #0]
 8013d80:	2b2f      	cmp	r3, #47	@ 0x2f
 8013d82:	f43f af42 	beq.w	8013c0a <rcl_node_init+0x8a>
 8013d86:	9503      	str	r5, [sp, #12]
 8013d88:	f8d8 3010 	ldr.w	r3, [r8, #16]
 8013d8c:	9300      	str	r3, [sp, #0]
 8013d8e:	4b1e      	ldr	r3, [pc, #120]	@ (8013e08 <rcl_node_init+0x288>)
 8013d90:	9302      	str	r3, [sp, #8]
 8013d92:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8013d96:	9301      	str	r3, [sp, #4]
 8013d98:	e898 000f 	ldmia.w	r8, {r0, r1, r2, r3}
 8013d9c:	f002 fc14 	bl	80165c8 <rcutils_format_string_limit>
 8013da0:	4605      	mov	r5, r0
 8013da2:	b340      	cbz	r0, 8013df6 <rcl_node_init+0x276>
 8013da4:	2200      	movs	r2, #0
 8013da6:	a922      	add	r1, sp, #136	@ 0x88
 8013da8:	9222      	str	r2, [sp, #136]	@ 0x88
 8013daa:	f003 f825 	bl	8016df8 <rmw_validate_namespace>
 8013dae:	4681      	mov	r9, r0
 8013db0:	2800      	cmp	r0, #0
 8013db2:	f43f af34 	beq.w	8013c1e <rcl_node_init+0x9e>
 8013db6:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8013dba:	f8d8 1010 	ldr.w	r1, [r8, #16]
 8013dbe:	4628      	mov	r0, r5
 8013dc0:	4798      	blx	r3
 8013dc2:	e7d5      	b.n	8013d70 <rcl_node_init+0x1f0>
 8013dc4:	f04f 0964 	mov.w	r9, #100	@ 0x64
 8013dc8:	4648      	mov	r0, r9
 8013dca:	b029      	add	sp, #164	@ 0xa4
 8013dcc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013dd0:	f04f 090a 	mov.w	r9, #10
 8013dd4:	f1ba 0f00 	cmp.w	sl, #0
 8013dd8:	d1ed      	bne.n	8013db6 <rcl_node_init+0x236>
 8013dda:	e7c9      	b.n	8013d70 <rcl_node_init+0x1f0>
 8013ddc:	f003 f87c 	bl	8016ed8 <rmw_node_name_validation_result_string>
 8013de0:	f04f 09c9 	mov.w	r9, #201	@ 0xc9
 8013de4:	e7c4      	b.n	8013d70 <rcl_node_init+0x1f0>
 8013de6:	f003 f819 	bl	8016e1c <rmw_namespace_validation_result_string>
 8013dea:	f04f 09ca 	mov.w	r9, #202	@ 0xca
 8013dee:	f1ba 0f00 	cmp.w	sl, #0
 8013df2:	d1e0      	bne.n	8013db6 <rcl_node_init+0x236>
 8013df4:	e7bc      	b.n	8013d70 <rcl_node_init+0x1f0>
 8013df6:	f04f 090a 	mov.w	r9, #10
 8013dfa:	e7b9      	b.n	8013d70 <rcl_node_init+0x1f0>
 8013dfc:	0801d7dc 	.word	0x0801d7dc
 8013e00:	0801d600 	.word	0x0801d600
 8013e04:	0801d7e4 	.word	0x0801d7e4
 8013e08:	0801d7e0 	.word	0x0801d7e0

08013e0c <rcl_node_is_valid>:
 8013e0c:	b130      	cbz	r0, 8013e1c <rcl_node_is_valid+0x10>
 8013e0e:	6843      	ldr	r3, [r0, #4]
 8013e10:	b123      	cbz	r3, 8013e1c <rcl_node_is_valid+0x10>
 8013e12:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8013e14:	b113      	cbz	r3, 8013e1c <rcl_node_is_valid+0x10>
 8013e16:	6800      	ldr	r0, [r0, #0]
 8013e18:	f7ff bc1e 	b.w	8013658 <rcl_context_is_valid>
 8013e1c:	2000      	movs	r0, #0
 8013e1e:	4770      	bx	lr

08013e20 <rcl_node_get_name>:
 8013e20:	b120      	cbz	r0, 8013e2c <rcl_node_get_name+0xc>
 8013e22:	6840      	ldr	r0, [r0, #4]
 8013e24:	b110      	cbz	r0, 8013e2c <rcl_node_get_name+0xc>
 8013e26:	6e80      	ldr	r0, [r0, #104]	@ 0x68
 8013e28:	b100      	cbz	r0, 8013e2c <rcl_node_get_name+0xc>
 8013e2a:	6880      	ldr	r0, [r0, #8]
 8013e2c:	4770      	bx	lr
 8013e2e:	bf00      	nop

08013e30 <rcl_node_get_namespace>:
 8013e30:	b120      	cbz	r0, 8013e3c <rcl_node_get_namespace+0xc>
 8013e32:	6840      	ldr	r0, [r0, #4]
 8013e34:	b110      	cbz	r0, 8013e3c <rcl_node_get_namespace+0xc>
 8013e36:	6e80      	ldr	r0, [r0, #104]	@ 0x68
 8013e38:	b100      	cbz	r0, 8013e3c <rcl_node_get_namespace+0xc>
 8013e3a:	68c0      	ldr	r0, [r0, #12]
 8013e3c:	4770      	bx	lr
 8013e3e:	bf00      	nop

08013e40 <rcl_node_get_options>:
 8013e40:	b128      	cbz	r0, 8013e4e <rcl_node_get_options+0xe>
 8013e42:	6840      	ldr	r0, [r0, #4]
 8013e44:	b118      	cbz	r0, 8013e4e <rcl_node_get_options+0xe>
 8013e46:	6e83      	ldr	r3, [r0, #104]	@ 0x68
 8013e48:	2b00      	cmp	r3, #0
 8013e4a:	bf08      	it	eq
 8013e4c:	2000      	moveq	r0, #0
 8013e4e:	4770      	bx	lr

08013e50 <rcl_node_get_rmw_handle>:
 8013e50:	b110      	cbz	r0, 8013e58 <rcl_node_get_rmw_handle+0x8>
 8013e52:	6840      	ldr	r0, [r0, #4]
 8013e54:	b100      	cbz	r0, 8013e58 <rcl_node_get_rmw_handle+0x8>
 8013e56:	6e80      	ldr	r0, [r0, #104]	@ 0x68
 8013e58:	4770      	bx	lr
 8013e5a:	bf00      	nop

08013e5c <rcl_node_get_default_options>:
 8013e5c:	b510      	push	{r4, lr}
 8013e5e:	2268      	movs	r2, #104	@ 0x68
 8013e60:	4604      	mov	r4, r0
 8013e62:	2100      	movs	r1, #0
 8013e64:	f007 fb42 	bl	801b4ec <memset>
 8013e68:	4620      	mov	r0, r4
 8013e6a:	f7fa fa9f 	bl	800e3ac <rcutils_get_default_allocator>
 8013e6e:	2301      	movs	r3, #1
 8013e70:	7523      	strb	r3, [r4, #20]
 8013e72:	4620      	mov	r0, r4
 8013e74:	bd10      	pop	{r4, pc}
 8013e76:	bf00      	nop

08013e78 <rcl_node_options_copy>:
 8013e78:	b1d0      	cbz	r0, 8013eb0 <rcl_node_options_copy+0x38>
 8013e7a:	b570      	push	{r4, r5, r6, lr}
 8013e7c:	460c      	mov	r4, r1
 8013e7e:	b1a9      	cbz	r1, 8013eac <rcl_node_options_copy+0x34>
 8013e80:	4288      	cmp	r0, r1
 8013e82:	4684      	mov	ip, r0
 8013e84:	d012      	beq.n	8013eac <rcl_node_options_copy+0x34>
 8013e86:	4605      	mov	r5, r0
 8013e88:	8a86      	ldrh	r6, [r0, #20]
 8013e8a:	468e      	mov	lr, r1
 8013e8c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8013e8e:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8013e92:	682b      	ldr	r3, [r5, #0]
 8013e94:	f8ce 3000 	str.w	r3, [lr]
 8013e98:	f10c 0118 	add.w	r1, ip, #24
 8013e9c:	2250      	movs	r2, #80	@ 0x50
 8013e9e:	82a6      	strh	r6, [r4, #20]
 8013ea0:	f104 0018 	add.w	r0, r4, #24
 8013ea4:	f007 fc41 	bl	801b72a <memcpy>
 8013ea8:	2000      	movs	r0, #0
 8013eaa:	bd70      	pop	{r4, r5, r6, pc}
 8013eac:	200b      	movs	r0, #11
 8013eae:	bd70      	pop	{r4, r5, r6, pc}
 8013eb0:	200b      	movs	r0, #11
 8013eb2:	4770      	bx	lr

08013eb4 <rcl_node_resolve_name>:
 8013eb4:	b082      	sub	sp, #8
 8013eb6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013eba:	b091      	sub	sp, #68	@ 0x44
 8013ebc:	ac1a      	add	r4, sp, #104	@ 0x68
 8013ebe:	e884 000c 	stmia.w	r4, {r2, r3}
 8013ec2:	f89d 807c 	ldrb.w	r8, [sp, #124]	@ 0x7c
 8013ec6:	2800      	cmp	r0, #0
 8013ec8:	d03b      	beq.n	8013f42 <rcl_node_resolve_name+0x8e>
 8013eca:	460c      	mov	r4, r1
 8013ecc:	4605      	mov	r5, r0
 8013ece:	f7ff ffb7 	bl	8013e40 <rcl_node_get_options>
 8013ed2:	2800      	cmp	r0, #0
 8013ed4:	d037      	beq.n	8013f46 <rcl_node_resolve_name+0x92>
 8013ed6:	4628      	mov	r0, r5
 8013ed8:	f7ff ffa2 	bl	8013e20 <rcl_node_get_name>
 8013edc:	4606      	mov	r6, r0
 8013ede:	4628      	mov	r0, r5
 8013ee0:	f7ff ffa6 	bl	8013e30 <rcl_node_get_namespace>
 8013ee4:	f10d 0e68 	add.w	lr, sp, #104	@ 0x68
 8013ee8:	4681      	mov	r9, r0
 8013eea:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8013eee:	ad0b      	add	r5, sp, #44	@ 0x2c
 8013ef0:	46ac      	mov	ip, r5
 8013ef2:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8013ef6:	f8de 3000 	ldr.w	r3, [lr]
 8013efa:	f8cc 3000 	str.w	r3, [ip]
 8013efe:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8013f00:	b1fb      	cbz	r3, 8013f42 <rcl_node_resolve_name+0x8e>
 8013f02:	468a      	mov	sl, r1
 8013f04:	f8dd b078 	ldr.w	fp, [sp, #120]	@ 0x78
 8013f08:	f002 fcb6 	bl	8016878 <rcutils_get_zero_initialized_string_map>
 8013f0c:	ab10      	add	r3, sp, #64	@ 0x40
 8013f0e:	9008      	str	r0, [sp, #32]
 8013f10:	e913 0007 	ldmdb	r3, {r0, r1, r2}
 8013f14:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 8013f18:	2100      	movs	r1, #0
 8013f1a:	e895 000c 	ldmia.w	r5, {r2, r3}
 8013f1e:	a808      	add	r0, sp, #32
 8013f20:	f002 fd22 	bl	8016968 <rcutils_string_map_init>
 8013f24:	4607      	mov	r7, r0
 8013f26:	b180      	cbz	r0, 8013f4a <rcl_node_resolve_name+0x96>
 8013f28:	f7fa fa5c 	bl	800e3e4 <rcutils_get_error_string>
 8013f2c:	f7fa fa70 	bl	800e410 <rcutils_reset_error>
 8013f30:	2f0a      	cmp	r7, #10
 8013f32:	bf18      	it	ne
 8013f34:	2701      	movne	r7, #1
 8013f36:	4638      	mov	r0, r7
 8013f38:	b011      	add	sp, #68	@ 0x44
 8013f3a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013f3e:	b002      	add	sp, #8
 8013f40:	4770      	bx	lr
 8013f42:	270b      	movs	r7, #11
 8013f44:	e7f7      	b.n	8013f36 <rcl_node_resolve_name+0x82>
 8013f46:	2701      	movs	r7, #1
 8013f48:	e7f5      	b.n	8013f36 <rcl_node_resolve_name+0x82>
 8013f4a:	9009      	str	r0, [sp, #36]	@ 0x24
 8013f4c:	9007      	str	r0, [sp, #28]
 8013f4e:	a808      	add	r0, sp, #32
 8013f50:	f006 fa56 	bl	801a400 <rcl_get_default_topic_name_substitutions>
 8013f54:	4607      	mov	r7, r0
 8013f56:	b1a8      	cbz	r0, 8013f84 <rcl_node_resolve_name+0xd0>
 8013f58:	280a      	cmp	r0, #10
 8013f5a:	9c07      	ldr	r4, [sp, #28]
 8013f5c:	d000      	beq.n	8013f60 <rcl_node_resolve_name+0xac>
 8013f5e:	2701      	movs	r7, #1
 8013f60:	a808      	add	r0, sp, #32
 8013f62:	f002 fd41 	bl	80169e8 <rcutils_string_map_fini>
 8013f66:	2800      	cmp	r0, #0
 8013f68:	d13d      	bne.n	8013fe6 <rcl_node_resolve_name+0x132>
 8013f6a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8013f6c:	4659      	mov	r1, fp
 8013f6e:	47d0      	blx	sl
 8013f70:	4659      	mov	r1, fp
 8013f72:	4620      	mov	r0, r4
 8013f74:	47d0      	blx	sl
 8013f76:	f1b8 0f00 	cmp.w	r8, #0
 8013f7a:	d0dc      	beq.n	8013f36 <rcl_node_resolve_name+0x82>
 8013f7c:	2f67      	cmp	r7, #103	@ 0x67
 8013f7e:	bf08      	it	eq
 8013f80:	2768      	moveq	r7, #104	@ 0x68
 8013f82:	e7d8      	b.n	8013f36 <rcl_node_resolve_name+0x82>
 8013f84:	ab09      	add	r3, sp, #36	@ 0x24
 8013f86:	9305      	str	r3, [sp, #20]
 8013f88:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8013f8a:	46ec      	mov	ip, sp
 8013f8c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8013f90:	682b      	ldr	r3, [r5, #0]
 8013f92:	f8cc 3000 	str.w	r3, [ip]
 8013f96:	464a      	mov	r2, r9
 8013f98:	4631      	mov	r1, r6
 8013f9a:	4620      	mov	r0, r4
 8013f9c:	ab08      	add	r3, sp, #32
 8013f9e:	f006 f8d1 	bl	801a144 <rcl_expand_topic_name>
 8013fa2:	4607      	mov	r7, r0
 8013fa4:	b9b8      	cbnz	r0, 8013fd6 <rcl_node_resolve_name+0x122>
 8013fa6:	9c09      	ldr	r4, [sp, #36]	@ 0x24
 8013fa8:	9009      	str	r0, [sp, #36]	@ 0x24
 8013faa:	4602      	mov	r2, r0
 8013fac:	a90a      	add	r1, sp, #40	@ 0x28
 8013fae:	4620      	mov	r0, r4
 8013fb0:	f002 fe5e 	bl	8016c70 <rmw_validate_full_topic_name>
 8013fb4:	b988      	cbnz	r0, 8013fda <rcl_node_resolve_name+0x126>
 8013fb6:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
 8013fb8:	b9d5      	cbnz	r5, 8013ff0 <rcl_node_resolve_name+0x13c>
 8013fba:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8013fbc:	a808      	add	r0, sp, #32
 8013fbe:	601c      	str	r4, [r3, #0]
 8013fc0:	f002 fd12 	bl	80169e8 <rcutils_string_map_fini>
 8013fc4:	4607      	mov	r7, r0
 8013fc6:	b1a8      	cbz	r0, 8013ff4 <rcl_node_resolve_name+0x140>
 8013fc8:	f7fa fa0c 	bl	800e3e4 <rcutils_get_error_string>
 8013fcc:	462c      	mov	r4, r5
 8013fce:	f7fa fa1f 	bl	800e410 <rcutils_reset_error>
 8013fd2:	2701      	movs	r7, #1
 8013fd4:	e7c9      	b.n	8013f6a <rcl_node_resolve_name+0xb6>
 8013fd6:	9c07      	ldr	r4, [sp, #28]
 8013fd8:	e7c2      	b.n	8013f60 <rcl_node_resolve_name+0xac>
 8013fda:	f7fa fa03 	bl	800e3e4 <rcutils_get_error_string>
 8013fde:	2701      	movs	r7, #1
 8013fe0:	f7fa fa16 	bl	800e410 <rcutils_reset_error>
 8013fe4:	e7bc      	b.n	8013f60 <rcl_node_resolve_name+0xac>
 8013fe6:	f7fa f9fd 	bl	800e3e4 <rcutils_get_error_string>
 8013fea:	f7fa fa11 	bl	800e410 <rcutils_reset_error>
 8013fee:	e7bc      	b.n	8013f6a <rcl_node_resolve_name+0xb6>
 8013ff0:	2767      	movs	r7, #103	@ 0x67
 8013ff2:	e7b5      	b.n	8013f60 <rcl_node_resolve_name+0xac>
 8013ff4:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8013ff6:	4659      	mov	r1, fp
 8013ff8:	47d0      	blx	sl
 8013ffa:	4659      	mov	r1, fp
 8013ffc:	4638      	mov	r0, r7
 8013ffe:	47d0      	blx	sl
 8014000:	e799      	b.n	8013f36 <rcl_node_resolve_name+0x82>
 8014002:	bf00      	nop

08014004 <exact_match_lookup>:
 8014004:	b5f0      	push	{r4, r5, r6, r7, lr}
 8014006:	f102 0708 	add.w	r7, r2, #8
 801400a:	460b      	mov	r3, r1
 801400c:	4614      	mov	r4, r2
 801400e:	4606      	mov	r6, r0
 8014010:	e897 0007 	ldmia.w	r7, {r0, r1, r2}
 8014014:	b085      	sub	sp, #20
 8014016:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 801401a:	4618      	mov	r0, r3
 801401c:	4919      	ldr	r1, [pc, #100]	@ (8014084 <exact_match_lookup+0x80>)
 801401e:	e894 000c 	ldmia.w	r4, {r2, r3}
 8014022:	f002 fac3 	bl	80165ac <rcutils_join_path>
 8014026:	7833      	ldrb	r3, [r6, #0]
 8014028:	2b2f      	cmp	r3, #47	@ 0x2f
 801402a:	4605      	mov	r5, r0
 801402c:	d023      	beq.n	8014076 <exact_match_lookup+0x72>
 801402e:	f104 030c 	add.w	r3, r4, #12
 8014032:	e893 0003 	ldmia.w	r3, {r0, r1}
 8014036:	e88d 0003 	stmia.w	sp, {r0, r1}
 801403a:	1c70      	adds	r0, r6, #1
 801403c:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 8014040:	f002 faba 	bl	80165b8 <rcutils_to_native_path>
 8014044:	4606      	mov	r6, r0
 8014046:	e897 0007 	ldmia.w	r7, {r0, r1, r2}
 801404a:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 801404e:	4631      	mov	r1, r6
 8014050:	e894 000c 	ldmia.w	r4, {r2, r3}
 8014054:	4628      	mov	r0, r5
 8014056:	f002 faa9 	bl	80165ac <rcutils_join_path>
 801405a:	6862      	ldr	r2, [r4, #4]
 801405c:	6921      	ldr	r1, [r4, #16]
 801405e:	4603      	mov	r3, r0
 8014060:	4630      	mov	r0, r6
 8014062:	461e      	mov	r6, r3
 8014064:	4790      	blx	r2
 8014066:	4628      	mov	r0, r5
 8014068:	6863      	ldr	r3, [r4, #4]
 801406a:	6921      	ldr	r1, [r4, #16]
 801406c:	4798      	blx	r3
 801406e:	4635      	mov	r5, r6
 8014070:	4628      	mov	r0, r5
 8014072:	b005      	add	sp, #20
 8014074:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014076:	7873      	ldrb	r3, [r6, #1]
 8014078:	2b00      	cmp	r3, #0
 801407a:	d1d8      	bne.n	801402e <exact_match_lookup+0x2a>
 801407c:	4628      	mov	r0, r5
 801407e:	b005      	add	sp, #20
 8014080:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014082:	bf00      	nop
 8014084:	0801d830 	.word	0x0801d830

08014088 <rcl_get_secure_root>:
 8014088:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801408c:	b085      	sub	sp, #20
 801408e:	b168      	cbz	r0, 80140ac <rcl_get_secure_root+0x24>
 8014090:	4607      	mov	r7, r0
 8014092:	4608      	mov	r0, r1
 8014094:	460c      	mov	r4, r1
 8014096:	f7fa f997 	bl	800e3c8 <rcutils_allocator_is_valid>
 801409a:	b138      	cbz	r0, 80140ac <rcl_get_secure_root+0x24>
 801409c:	2300      	movs	r3, #0
 801409e:	482d      	ldr	r0, [pc, #180]	@ (8014154 <rcl_get_secure_root+0xcc>)
 80140a0:	9303      	str	r3, [sp, #12]
 80140a2:	a903      	add	r1, sp, #12
 80140a4:	f002 fa68 	bl	8016578 <rcutils_get_env>
 80140a8:	4605      	mov	r5, r0
 80140aa:	b120      	cbz	r0, 80140b6 <rcl_get_secure_root+0x2e>
 80140ac:	2500      	movs	r5, #0
 80140ae:	4628      	mov	r0, r5
 80140b0:	b005      	add	sp, #20
 80140b2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80140b6:	9b03      	ldr	r3, [sp, #12]
 80140b8:	781a      	ldrb	r2, [r3, #0]
 80140ba:	2a00      	cmp	r2, #0
 80140bc:	d0f6      	beq.n	80140ac <rcl_get_secure_root+0x24>
 80140be:	f104 090c 	add.w	r9, r4, #12
 80140c2:	e899 0003 	ldmia.w	r9, {r0, r1}
 80140c6:	e88d 0003 	stmia.w	sp, {r0, r1}
 80140ca:	4618      	mov	r0, r3
 80140cc:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 80140d0:	f002 fb94 	bl	80167fc <rcutils_strdup>
 80140d4:	4680      	mov	r8, r0
 80140d6:	2800      	cmp	r0, #0
 80140d8:	d0e8      	beq.n	80140ac <rcl_get_secure_root+0x24>
 80140da:	481f      	ldr	r0, [pc, #124]	@ (8014158 <rcl_get_secure_root+0xd0>)
 80140dc:	9503      	str	r5, [sp, #12]
 80140de:	a903      	add	r1, sp, #12
 80140e0:	f002 fa4a 	bl	8016578 <rcutils_get_env>
 80140e4:	b160      	cbz	r0, 8014100 <rcl_get_secure_root+0x78>
 80140e6:	2600      	movs	r6, #0
 80140e8:	6863      	ldr	r3, [r4, #4]
 80140ea:	6921      	ldr	r1, [r4, #16]
 80140ec:	4630      	mov	r0, r6
 80140ee:	4798      	blx	r3
 80140f0:	4640      	mov	r0, r8
 80140f2:	6863      	ldr	r3, [r4, #4]
 80140f4:	6921      	ldr	r1, [r4, #16]
 80140f6:	4798      	blx	r3
 80140f8:	4628      	mov	r0, r5
 80140fa:	b005      	add	sp, #20
 80140fc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8014100:	9b03      	ldr	r3, [sp, #12]
 8014102:	781e      	ldrb	r6, [r3, #0]
 8014104:	b1f6      	cbz	r6, 8014144 <rcl_get_secure_root+0xbc>
 8014106:	e899 0003 	ldmia.w	r9, {r0, r1}
 801410a:	e88d 0003 	stmia.w	sp, {r0, r1}
 801410e:	4618      	mov	r0, r3
 8014110:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 8014114:	f002 fb72 	bl	80167fc <rcutils_strdup>
 8014118:	4606      	mov	r6, r0
 801411a:	2800      	cmp	r0, #0
 801411c:	d0e3      	beq.n	80140e6 <rcl_get_secure_root+0x5e>
 801411e:	4622      	mov	r2, r4
 8014120:	4641      	mov	r1, r8
 8014122:	f7ff ff6f 	bl	8014004 <exact_match_lookup>
 8014126:	4605      	mov	r5, r0
 8014128:	2d00      	cmp	r5, #0
 801412a:	d0dd      	beq.n	80140e8 <rcl_get_secure_root+0x60>
 801412c:	4628      	mov	r0, r5
 801412e:	f002 fa3b 	bl	80165a8 <rcutils_is_directory>
 8014132:	4603      	mov	r3, r0
 8014134:	2800      	cmp	r0, #0
 8014136:	d1d7      	bne.n	80140e8 <rcl_get_secure_root+0x60>
 8014138:	4628      	mov	r0, r5
 801413a:	6921      	ldr	r1, [r4, #16]
 801413c:	461d      	mov	r5, r3
 801413e:	6863      	ldr	r3, [r4, #4]
 8014140:	4798      	blx	r3
 8014142:	e7d1      	b.n	80140e8 <rcl_get_secure_root+0x60>
 8014144:	4622      	mov	r2, r4
 8014146:	4638      	mov	r0, r7
 8014148:	4641      	mov	r1, r8
 801414a:	f7ff ff5b 	bl	8014004 <exact_match_lookup>
 801414e:	4605      	mov	r5, r0
 8014150:	e7ea      	b.n	8014128 <rcl_get_secure_root+0xa0>
 8014152:	bf00      	nop
 8014154:	0801d83c 	.word	0x0801d83c
 8014158:	0801d854 	.word	0x0801d854

0801415c <rcl_get_security_options_from_environment>:
 801415c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014160:	b082      	sub	sp, #8
 8014162:	2300      	movs	r3, #0
 8014164:	4606      	mov	r6, r0
 8014166:	460f      	mov	r7, r1
 8014168:	4820      	ldr	r0, [pc, #128]	@ (80141ec <rcl_get_security_options_from_environment+0x90>)
 801416a:	9301      	str	r3, [sp, #4]
 801416c:	a901      	add	r1, sp, #4
 801416e:	4690      	mov	r8, r2
 8014170:	f002 fa02 	bl	8016578 <rcutils_get_env>
 8014174:	b120      	cbz	r0, 8014180 <rcl_get_security_options_from_environment+0x24>
 8014176:	2501      	movs	r5, #1
 8014178:	4628      	mov	r0, r5
 801417a:	b002      	add	sp, #8
 801417c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014180:	491b      	ldr	r1, [pc, #108]	@ (80141f0 <rcl_get_security_options_from_environment+0x94>)
 8014182:	4604      	mov	r4, r0
 8014184:	9801      	ldr	r0, [sp, #4]
 8014186:	f7ec f823 	bl	80001d0 <strcmp>
 801418a:	4605      	mov	r5, r0
 801418c:	b9e8      	cbnz	r0, 80141ca <rcl_get_security_options_from_environment+0x6e>
 801418e:	9001      	str	r0, [sp, #4]
 8014190:	f1b8 0f00 	cmp.w	r8, #0
 8014194:	d020      	beq.n	80141d8 <rcl_get_security_options_from_environment+0x7c>
 8014196:	4817      	ldr	r0, [pc, #92]	@ (80141f4 <rcl_get_security_options_from_environment+0x98>)
 8014198:	a901      	add	r1, sp, #4
 801419a:	f002 f9ed 	bl	8016578 <rcutils_get_env>
 801419e:	2800      	cmp	r0, #0
 80141a0:	d1e9      	bne.n	8014176 <rcl_get_security_options_from_environment+0x1a>
 80141a2:	4915      	ldr	r1, [pc, #84]	@ (80141f8 <rcl_get_security_options_from_environment+0x9c>)
 80141a4:	9801      	ldr	r0, [sp, #4]
 80141a6:	f7ec f813 	bl	80001d0 <strcmp>
 80141aa:	fab0 f080 	clz	r0, r0
 80141ae:	0940      	lsrs	r0, r0, #5
 80141b0:	f888 0000 	strb.w	r0, [r8]
 80141b4:	4639      	mov	r1, r7
 80141b6:	4630      	mov	r0, r6
 80141b8:	f7ff ff66 	bl	8014088 <rcl_get_secure_root>
 80141bc:	b170      	cbz	r0, 80141dc <rcl_get_security_options_from_environment+0x80>
 80141be:	f8c8 0004 	str.w	r0, [r8, #4]
 80141c2:	4628      	mov	r0, r5
 80141c4:	b002      	add	sp, #8
 80141c6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80141ca:	4625      	mov	r5, r4
 80141cc:	4628      	mov	r0, r5
 80141ce:	f888 4000 	strb.w	r4, [r8]
 80141d2:	b002      	add	sp, #8
 80141d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80141d8:	250b      	movs	r5, #11
 80141da:	e7cd      	b.n	8014178 <rcl_get_security_options_from_environment+0x1c>
 80141dc:	f898 5000 	ldrb.w	r5, [r8]
 80141e0:	f1a5 0501 	sub.w	r5, r5, #1
 80141e4:	fab5 f585 	clz	r5, r5
 80141e8:	096d      	lsrs	r5, r5, #5
 80141ea:	e7c5      	b.n	8014178 <rcl_get_security_options_from_environment+0x1c>
 80141ec:	0801d7f4 	.word	0x0801d7f4
 80141f0:	0801d808 	.word	0x0801d808
 80141f4:	0801d810 	.word	0x0801d810
 80141f8:	0801d828 	.word	0x0801d828

080141fc <rcl_service_get_rmw_handle>:
 80141fc:	b118      	cbz	r0, 8014206 <rcl_service_get_rmw_handle+0xa>
 80141fe:	6800      	ldr	r0, [r0, #0]
 8014200:	b108      	cbz	r0, 8014206 <rcl_service_get_rmw_handle+0xa>
 8014202:	f8d0 0108 	ldr.w	r0, [r0, #264]	@ 0x108
 8014206:	4770      	bx	lr

08014208 <rcl_take_request>:
 8014208:	b570      	push	{r4, r5, r6, lr}
 801420a:	468e      	mov	lr, r1
 801420c:	460c      	mov	r4, r1
 801420e:	4616      	mov	r6, r2
 8014210:	4605      	mov	r5, r0
 8014212:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8014216:	b08c      	sub	sp, #48	@ 0x30
 8014218:	f10d 0c18 	add.w	ip, sp, #24
 801421c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8014220:	e89e 0003 	ldmia.w	lr, {r0, r1}
 8014224:	e88c 0003 	stmia.w	ip, {r0, r1}
 8014228:	b30d      	cbz	r5, 801426e <rcl_take_request+0x66>
 801422a:	682b      	ldr	r3, [r5, #0]
 801422c:	b1fb      	cbz	r3, 801426e <rcl_take_request+0x66>
 801422e:	f8d3 0108 	ldr.w	r0, [r3, #264]	@ 0x108
 8014232:	b1e0      	cbz	r0, 801426e <rcl_take_request+0x66>
 8014234:	b336      	cbz	r6, 8014284 <rcl_take_request+0x7c>
 8014236:	2300      	movs	r3, #0
 8014238:	f88d 3007 	strb.w	r3, [sp, #7]
 801423c:	4632      	mov	r2, r6
 801423e:	f10d 0307 	add.w	r3, sp, #7
 8014242:	a902      	add	r1, sp, #8
 8014244:	f003 faf6 	bl	8017834 <rmw_take_request>
 8014248:	4605      	mov	r5, r0
 801424a:	b198      	cbz	r0, 8014274 <rcl_take_request+0x6c>
 801424c:	280a      	cmp	r0, #10
 801424e:	bf18      	it	ne
 8014250:	2501      	movne	r5, #1
 8014252:	f10d 0e18 	add.w	lr, sp, #24
 8014256:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 801425a:	46a4      	mov	ip, r4
 801425c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8014260:	e89e 0003 	ldmia.w	lr, {r0, r1}
 8014264:	e88c 0003 	stmia.w	ip, {r0, r1}
 8014268:	4628      	mov	r0, r5
 801426a:	b00c      	add	sp, #48	@ 0x30
 801426c:	bd70      	pop	{r4, r5, r6, pc}
 801426e:	f44f 7516 	mov.w	r5, #600	@ 0x258
 8014272:	e7ee      	b.n	8014252 <rcl_take_request+0x4a>
 8014274:	f89d 2007 	ldrb.w	r2, [sp, #7]
 8014278:	f240 2359 	movw	r3, #601	@ 0x259
 801427c:	2a00      	cmp	r2, #0
 801427e:	bf08      	it	eq
 8014280:	461d      	moveq	r5, r3
 8014282:	e7e6      	b.n	8014252 <rcl_take_request+0x4a>
 8014284:	250b      	movs	r5, #11
 8014286:	e7e4      	b.n	8014252 <rcl_take_request+0x4a>

08014288 <rcl_send_response>:
 8014288:	b170      	cbz	r0, 80142a8 <rcl_send_response+0x20>
 801428a:	6800      	ldr	r0, [r0, #0]
 801428c:	b160      	cbz	r0, 80142a8 <rcl_send_response+0x20>
 801428e:	f8d0 0108 	ldr.w	r0, [r0, #264]	@ 0x108
 8014292:	b148      	cbz	r0, 80142a8 <rcl_send_response+0x20>
 8014294:	b159      	cbz	r1, 80142ae <rcl_send_response+0x26>
 8014296:	b510      	push	{r4, lr}
 8014298:	b15a      	cbz	r2, 80142b2 <rcl_send_response+0x2a>
 801429a:	f003 fb29 	bl	80178f0 <rmw_send_response>
 801429e:	b110      	cbz	r0, 80142a6 <rcl_send_response+0x1e>
 80142a0:	2802      	cmp	r0, #2
 80142a2:	bf18      	it	ne
 80142a4:	2001      	movne	r0, #1
 80142a6:	bd10      	pop	{r4, pc}
 80142a8:	f44f 7016 	mov.w	r0, #600	@ 0x258
 80142ac:	4770      	bx	lr
 80142ae:	200b      	movs	r0, #11
 80142b0:	4770      	bx	lr
 80142b2:	200b      	movs	r0, #11
 80142b4:	bd10      	pop	{r4, pc}
 80142b6:	bf00      	nop

080142b8 <rcl_service_is_valid>:
 80142b8:	b130      	cbz	r0, 80142c8 <rcl_service_is_valid+0x10>
 80142ba:	6800      	ldr	r0, [r0, #0]
 80142bc:	b120      	cbz	r0, 80142c8 <rcl_service_is_valid+0x10>
 80142be:	f8d0 0108 	ldr.w	r0, [r0, #264]	@ 0x108
 80142c2:	3800      	subs	r0, #0
 80142c4:	bf18      	it	ne
 80142c6:	2001      	movne	r0, #1
 80142c8:	4770      	bx	lr
 80142ca:	bf00      	nop

080142cc <rcl_get_zero_initialized_subscription>:
 80142cc:	4b01      	ldr	r3, [pc, #4]	@ (80142d4 <rcl_get_zero_initialized_subscription+0x8>)
 80142ce:	6818      	ldr	r0, [r3, #0]
 80142d0:	4770      	bx	lr
 80142d2:	bf00      	nop
 80142d4:	0801d874 	.word	0x0801d874

080142d8 <rcl_subscription_init>:
 80142d8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80142dc:	b089      	sub	sp, #36	@ 0x24
 80142de:	9e10      	ldr	r6, [sp, #64]	@ 0x40
 80142e0:	b1d6      	cbz	r6, 8014318 <rcl_subscription_init+0x40>
 80142e2:	f106 0950 	add.w	r9, r6, #80	@ 0x50
 80142e6:	4604      	mov	r4, r0
 80142e8:	4648      	mov	r0, r9
 80142ea:	460d      	mov	r5, r1
 80142ec:	4690      	mov	r8, r2
 80142ee:	461f      	mov	r7, r3
 80142f0:	f7fa f86a 	bl	800e3c8 <rcutils_allocator_is_valid>
 80142f4:	b180      	cbz	r0, 8014318 <rcl_subscription_init+0x40>
 80142f6:	b17c      	cbz	r4, 8014318 <rcl_subscription_init+0x40>
 80142f8:	4628      	mov	r0, r5
 80142fa:	f7ff fd87 	bl	8013e0c <rcl_node_is_valid>
 80142fe:	2800      	cmp	r0, #0
 8014300:	d054      	beq.n	80143ac <rcl_subscription_init+0xd4>
 8014302:	f1b8 0f00 	cmp.w	r8, #0
 8014306:	d007      	beq.n	8014318 <rcl_subscription_init+0x40>
 8014308:	b137      	cbz	r7, 8014318 <rcl_subscription_init+0x40>
 801430a:	6823      	ldr	r3, [r4, #0]
 801430c:	b14b      	cbz	r3, 8014322 <rcl_subscription_init+0x4a>
 801430e:	2764      	movs	r7, #100	@ 0x64
 8014310:	4638      	mov	r0, r7
 8014312:	b009      	add	sp, #36	@ 0x24
 8014314:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8014318:	270b      	movs	r7, #11
 801431a:	4638      	mov	r0, r7
 801431c:	b009      	add	sp, #36	@ 0x24
 801431e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8014322:	e9cd 3303 	strd	r3, r3, [sp, #12]
 8014326:	aa07      	add	r2, sp, #28
 8014328:	9205      	str	r2, [sp, #20]
 801432a:	9307      	str	r3, [sp, #28]
 801432c:	f106 0358 	add.w	r3, r6, #88	@ 0x58
 8014330:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8014334:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 8014338:	4639      	mov	r1, r7
 801433a:	e899 000c 	ldmia.w	r9, {r2, r3}
 801433e:	4628      	mov	r0, r5
 8014340:	f7ff fdb8 	bl	8013eb4 <rcl_node_resolve_name>
 8014344:	4607      	mov	r7, r0
 8014346:	2800      	cmp	r0, #0
 8014348:	d15f      	bne.n	801440a <rcl_subscription_init+0x132>
 801434a:	e9d6 3217 	ldrd	r3, r2, [r6, #92]	@ 0x5c
 801434e:	21c8      	movs	r1, #200	@ 0xc8
 8014350:	2001      	movs	r0, #1
 8014352:	4798      	blx	r3
 8014354:	6020      	str	r0, [r4, #0]
 8014356:	2800      	cmp	r0, #0
 8014358:	d05d      	beq.n	8014416 <rcl_subscription_init+0x13e>
 801435a:	4628      	mov	r0, r5
 801435c:	f7ff fd78 	bl	8013e50 <rcl_node_get_rmw_handle>
 8014360:	f106 0364 	add.w	r3, r6, #100	@ 0x64
 8014364:	9300      	str	r3, [sp, #0]
 8014366:	9a07      	ldr	r2, [sp, #28]
 8014368:	6827      	ldr	r7, [r4, #0]
 801436a:	4641      	mov	r1, r8
 801436c:	4633      	mov	r3, r6
 801436e:	f003 fba9 	bl	8017ac4 <rmw_create_subscription>
 8014372:	f8c7 00c0 	str.w	r0, [r7, #192]	@ 0xc0
 8014376:	6827      	ldr	r7, [r4, #0]
 8014378:	f8d7 00c0 	ldr.w	r0, [r7, #192]	@ 0xc0
 801437c:	b348      	cbz	r0, 80143d2 <rcl_subscription_init+0xfa>
 801437e:	f107 0170 	add.w	r1, r7, #112	@ 0x70
 8014382:	f003 fc81 	bl	8017c88 <rmw_subscription_get_actual_qos>
 8014386:	4607      	mov	r7, r0
 8014388:	b9a8      	cbnz	r0, 80143b6 <rcl_subscription_init+0xde>
 801438a:	6820      	ldr	r0, [r4, #0]
 801438c:	f896 3048 	ldrb.w	r3, [r6, #72]	@ 0x48
 8014390:	f880 30b8 	strb.w	r3, [r0, #184]	@ 0xb8
 8014394:	2270      	movs	r2, #112	@ 0x70
 8014396:	4631      	mov	r1, r6
 8014398:	f007 f9c7 	bl	801b72a <memcpy>
 801439c:	9807      	ldr	r0, [sp, #28]
 801439e:	6d73      	ldr	r3, [r6, #84]	@ 0x54
 80143a0:	6e31      	ldr	r1, [r6, #96]	@ 0x60
 80143a2:	4798      	blx	r3
 80143a4:	4638      	mov	r0, r7
 80143a6:	b009      	add	sp, #36	@ 0x24
 80143a8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80143ac:	27c8      	movs	r7, #200	@ 0xc8
 80143ae:	4638      	mov	r0, r7
 80143b0:	b009      	add	sp, #36	@ 0x24
 80143b2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80143b6:	6827      	ldr	r7, [r4, #0]
 80143b8:	b32f      	cbz	r7, 8014406 <rcl_subscription_init+0x12e>
 80143ba:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80143be:	b14b      	cbz	r3, 80143d4 <rcl_subscription_init+0xfc>
 80143c0:	4628      	mov	r0, r5
 80143c2:	f7ff fd45 	bl	8013e50 <rcl_node_get_rmw_handle>
 80143c6:	6823      	ldr	r3, [r4, #0]
 80143c8:	f8d3 10c0 	ldr.w	r1, [r3, #192]	@ 0xc0
 80143cc:	f003 fc6c 	bl	8017ca8 <rmw_destroy_subscription>
 80143d0:	6827      	ldr	r7, [r4, #0]
 80143d2:	b197      	cbz	r7, 80143fa <rcl_subscription_init+0x122>
 80143d4:	f107 0550 	add.w	r5, r7, #80	@ 0x50
 80143d8:	4628      	mov	r0, r5
 80143da:	f7f9 fff5 	bl	800e3c8 <rcutils_allocator_is_valid>
 80143de:	b158      	cbz	r0, 80143f8 <rcl_subscription_init+0x120>
 80143e0:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 80143e2:	b148      	cbz	r0, 80143f8 <rcl_subscription_init+0x120>
 80143e4:	4629      	mov	r1, r5
 80143e6:	f002 fb97 	bl	8016b18 <rmw_subscription_content_filter_options_fini>
 80143ea:	4605      	mov	r5, r0
 80143ec:	b9b8      	cbnz	r0, 801441e <rcl_subscription_init+0x146>
 80143ee:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80143f0:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 80143f2:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 80143f4:	4798      	blx	r3
 80143f6:	66fd      	str	r5, [r7, #108]	@ 0x6c
 80143f8:	6827      	ldr	r7, [r4, #0]
 80143fa:	6d73      	ldr	r3, [r6, #84]	@ 0x54
 80143fc:	6e31      	ldr	r1, [r6, #96]	@ 0x60
 80143fe:	4638      	mov	r0, r7
 8014400:	4798      	blx	r3
 8014402:	2300      	movs	r3, #0
 8014404:	6023      	str	r3, [r4, #0]
 8014406:	2701      	movs	r7, #1
 8014408:	e7c8      	b.n	801439c <rcl_subscription_init+0xc4>
 801440a:	2867      	cmp	r0, #103	@ 0x67
 801440c:	d0c6      	beq.n	801439c <rcl_subscription_init+0xc4>
 801440e:	2869      	cmp	r0, #105	@ 0x69
 8014410:	d003      	beq.n	801441a <rcl_subscription_init+0x142>
 8014412:	280a      	cmp	r0, #10
 8014414:	d1f7      	bne.n	8014406 <rcl_subscription_init+0x12e>
 8014416:	270a      	movs	r7, #10
 8014418:	e7c0      	b.n	801439c <rcl_subscription_init+0xc4>
 801441a:	2767      	movs	r7, #103	@ 0x67
 801441c:	e7be      	b.n	801439c <rcl_subscription_init+0xc4>
 801441e:	f7ff f8fd 	bl	801361c <rcl_convert_rmw_ret_to_rcl_ret>
 8014422:	6827      	ldr	r7, [r4, #0]
 8014424:	e7e9      	b.n	80143fa <rcl_subscription_init+0x122>
 8014426:	bf00      	nop

08014428 <rcl_subscription_get_default_options>:
 8014428:	b570      	push	{r4, r5, r6, lr}
 801442a:	4d14      	ldr	r5, [pc, #80]	@ (801447c <rcl_subscription_get_default_options+0x54>)
 801442c:	4914      	ldr	r1, [pc, #80]	@ (8014480 <rcl_subscription_get_default_options+0x58>)
 801442e:	b08a      	sub	sp, #40	@ 0x28
 8014430:	4604      	mov	r4, r0
 8014432:	2250      	movs	r2, #80	@ 0x50
 8014434:	4628      	mov	r0, r5
 8014436:	f007 f978 	bl	801b72a <memcpy>
 801443a:	a804      	add	r0, sp, #16
 801443c:	f7f9 ffb6 	bl	800e3ac <rcutils_get_default_allocator>
 8014440:	f10d 0c10 	add.w	ip, sp, #16
 8014444:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8014448:	f105 0e50 	add.w	lr, r5, #80	@ 0x50
 801444c:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8014450:	466e      	mov	r6, sp
 8014452:	f8dc 3000 	ldr.w	r3, [ip]
 8014456:	f8ce 3000 	str.w	r3, [lr]
 801445a:	4630      	mov	r0, r6
 801445c:	f002 fb76 	bl	8016b4c <rmw_get_default_subscription_options>
 8014460:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
 8014464:	f105 0364 	add.w	r3, r5, #100	@ 0x64
 8014468:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 801446c:	2270      	movs	r2, #112	@ 0x70
 801446e:	4629      	mov	r1, r5
 8014470:	4620      	mov	r0, r4
 8014472:	f007 f95a 	bl	801b72a <memcpy>
 8014476:	4620      	mov	r0, r4
 8014478:	b00a      	add	sp, #40	@ 0x28
 801447a:	bd70      	pop	{r4, r5, r6, pc}
 801447c:	2000c0e0 	.word	0x2000c0e0
 8014480:	0801d878 	.word	0x0801d878

08014484 <rcl_take>:
 8014484:	2800      	cmp	r0, #0
 8014486:	d04a      	beq.n	801451e <rcl_take+0x9a>
 8014488:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801448c:	4604      	mov	r4, r0
 801448e:	6800      	ldr	r0, [r0, #0]
 8014490:	b0a4      	sub	sp, #144	@ 0x90
 8014492:	2800      	cmp	r0, #0
 8014494:	d03b      	beq.n	801450e <rcl_take+0x8a>
 8014496:	461f      	mov	r7, r3
 8014498:	f8d0 30c0 	ldr.w	r3, [r0, #192]	@ 0xc0
 801449c:	2b00      	cmp	r3, #0
 801449e:	d036      	beq.n	801450e <rcl_take+0x8a>
 80144a0:	460e      	mov	r6, r1
 80144a2:	2900      	cmp	r1, #0
 80144a4:	d039      	beq.n	801451a <rcl_take+0x96>
 80144a6:	4615      	mov	r5, r2
 80144a8:	2a00      	cmp	r2, #0
 80144aa:	d03c      	beq.n	8014526 <rcl_take+0xa2>
 80144ac:	a802      	add	r0, sp, #8
 80144ae:	f002 fbd7 	bl	8016c60 <rmw_get_zero_initialized_message_info>
 80144b2:	f10d 0c08 	add.w	ip, sp, #8
 80144b6:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80144ba:	46ae      	mov	lr, r5
 80144bc:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 80144c0:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80144c4:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 80144c8:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80144cc:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 80144d0:	e89c 000f 	ldmia.w	ip, {r0, r1, r2, r3}
 80144d4:	f04f 0800 	mov.w	r8, #0
 80144d8:	e88e 000f 	stmia.w	lr, {r0, r1, r2, r3}
 80144dc:	f88d 804f 	strb.w	r8, [sp, #79]	@ 0x4f
 80144e0:	6822      	ldr	r2, [r4, #0]
 80144e2:	462b      	mov	r3, r5
 80144e4:	f8d2 00c0 	ldr.w	r0, [r2, #192]	@ 0xc0
 80144e8:	9700      	str	r7, [sp, #0]
 80144ea:	f10d 024f 	add.w	r2, sp, #79	@ 0x4f
 80144ee:	4631      	mov	r1, r6
 80144f0:	f003 fc3a 	bl	8017d68 <rmw_take_with_info>
 80144f4:	4603      	mov	r3, r0
 80144f6:	b9c0      	cbnz	r0, 801452a <rcl_take+0xa6>
 80144f8:	f89d 104f 	ldrb.w	r1, [sp, #79]	@ 0x4f
 80144fc:	f240 1291 	movw	r2, #401	@ 0x191
 8014500:	2900      	cmp	r1, #0
 8014502:	bf08      	it	eq
 8014504:	4613      	moveq	r3, r2
 8014506:	4618      	mov	r0, r3
 8014508:	b024      	add	sp, #144	@ 0x90
 801450a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801450e:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 8014512:	4618      	mov	r0, r3
 8014514:	b024      	add	sp, #144	@ 0x90
 8014516:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801451a:	230b      	movs	r3, #11
 801451c:	e7f3      	b.n	8014506 <rcl_take+0x82>
 801451e:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 8014522:	4618      	mov	r0, r3
 8014524:	4770      	bx	lr
 8014526:	ad14      	add	r5, sp, #80	@ 0x50
 8014528:	e7c0      	b.n	80144ac <rcl_take+0x28>
 801452a:	f7ff f877 	bl	801361c <rcl_convert_rmw_ret_to_rcl_ret>
 801452e:	4603      	mov	r3, r0
 8014530:	e7e9      	b.n	8014506 <rcl_take+0x82>
 8014532:	bf00      	nop

08014534 <rcl_subscription_get_rmw_handle>:
 8014534:	b118      	cbz	r0, 801453e <rcl_subscription_get_rmw_handle+0xa>
 8014536:	6800      	ldr	r0, [r0, #0]
 8014538:	b108      	cbz	r0, 801453e <rcl_subscription_get_rmw_handle+0xa>
 801453a:	f8d0 00c0 	ldr.w	r0, [r0, #192]	@ 0xc0
 801453e:	4770      	bx	lr

08014540 <rcl_subscription_is_valid>:
 8014540:	b130      	cbz	r0, 8014550 <rcl_subscription_is_valid+0x10>
 8014542:	6800      	ldr	r0, [r0, #0]
 8014544:	b120      	cbz	r0, 8014550 <rcl_subscription_is_valid+0x10>
 8014546:	f8d0 00c0 	ldr.w	r0, [r0, #192]	@ 0xc0
 801454a:	3800      	subs	r0, #0
 801454c:	bf18      	it	ne
 801454e:	2001      	movne	r0, #1
 8014550:	4770      	bx	lr
 8014552:	bf00      	nop

08014554 <rcl_get_system_time>:
 8014554:	4608      	mov	r0, r1
 8014556:	f7f9 bf77 	b.w	800e448 <rcutils_system_time_now>
 801455a:	bf00      	nop

0801455c <rcl_get_steady_time>:
 801455c:	4608      	mov	r0, r1
 801455e:	f7f9 bf9b 	b.w	800e498 <rcutils_steady_time_now>
 8014562:	bf00      	nop

08014564 <rcl_get_ros_time>:
 8014564:	7a03      	ldrb	r3, [r0, #8]
 8014566:	b510      	push	{r4, lr}
 8014568:	460c      	mov	r4, r1
 801456a:	b133      	cbz	r3, 801457a <rcl_get_ros_time+0x16>
 801456c:	2105      	movs	r1, #5
 801456e:	f001 ff5f 	bl	8016430 <__atomic_load_8>
 8014572:	e9c4 0100 	strd	r0, r1, [r4]
 8014576:	2000      	movs	r0, #0
 8014578:	bd10      	pop	{r4, pc}
 801457a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801457e:	4608      	mov	r0, r1
 8014580:	f7f9 bf62 	b.w	800e448 <rcutils_system_time_now>

08014584 <rcl_clock_init>:
 8014584:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014586:	4605      	mov	r5, r0
 8014588:	4610      	mov	r0, r2
 801458a:	4614      	mov	r4, r2
 801458c:	460e      	mov	r6, r1
 801458e:	f7f9 ff1b 	bl	800e3c8 <rcutils_allocator_is_valid>
 8014592:	b128      	cbz	r0, 80145a0 <rcl_clock_init+0x1c>
 8014594:	2d03      	cmp	r5, #3
 8014596:	d803      	bhi.n	80145a0 <rcl_clock_init+0x1c>
 8014598:	e8df f005 	tbb	[pc, r5]
 801459c:	06532e1d 	.word	0x06532e1d
 80145a0:	f04f 0c0b 	mov.w	ip, #11
 80145a4:	4660      	mov	r0, ip
 80145a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80145a8:	2e00      	cmp	r6, #0
 80145aa:	d0f9      	beq.n	80145a0 <rcl_clock_init+0x1c>
 80145ac:	2c00      	cmp	r4, #0
 80145ae:	d0f7      	beq.n	80145a0 <rcl_clock_init+0x1c>
 80145b0:	2300      	movs	r3, #0
 80145b2:	e9c6 3301 	strd	r3, r3, [r6, #4]
 80145b6:	f8df e0b4 	ldr.w	lr, [pc, #180]	@ 801466c <rcl_clock_init+0xe8>
 80145ba:	6133      	str	r3, [r6, #16]
 80145bc:	f106 0514 	add.w	r5, r6, #20
 80145c0:	469c      	mov	ip, r3
 80145c2:	2703      	movs	r7, #3
 80145c4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80145c6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80145c8:	6823      	ldr	r3, [r4, #0]
 80145ca:	602b      	str	r3, [r5, #0]
 80145cc:	7037      	strb	r7, [r6, #0]
 80145ce:	f8c6 e00c 	str.w	lr, [r6, #12]
 80145d2:	4660      	mov	r0, ip
 80145d4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80145d6:	2e00      	cmp	r6, #0
 80145d8:	d0e2      	beq.n	80145a0 <rcl_clock_init+0x1c>
 80145da:	2300      	movs	r3, #0
 80145dc:	7033      	strb	r3, [r6, #0]
 80145de:	e9c6 3301 	strd	r3, r3, [r6, #4]
 80145e2:	e9c6 3303 	strd	r3, r3, [r6, #12]
 80145e6:	469c      	mov	ip, r3
 80145e8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80145ea:	f106 0514 	add.w	r5, r6, #20
 80145ee:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80145f0:	6823      	ldr	r3, [r4, #0]
 80145f2:	602b      	str	r3, [r5, #0]
 80145f4:	4660      	mov	r0, ip
 80145f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80145f8:	2e00      	cmp	r6, #0
 80145fa:	d0d1      	beq.n	80145a0 <rcl_clock_init+0x1c>
 80145fc:	2c00      	cmp	r4, #0
 80145fe:	d0cf      	beq.n	80145a0 <rcl_clock_init+0x1c>
 8014600:	2700      	movs	r7, #0
 8014602:	7037      	strb	r7, [r6, #0]
 8014604:	46a4      	mov	ip, r4
 8014606:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 801460a:	f106 0514 	add.w	r5, r6, #20
 801460e:	e9c6 7701 	strd	r7, r7, [r6, #4]
 8014612:	e9c6 7703 	strd	r7, r7, [r6, #12]
 8014616:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8014618:	f8dc 3000 	ldr.w	r3, [ip]
 801461c:	602b      	str	r3, [r5, #0]
 801461e:	6921      	ldr	r1, [r4, #16]
 8014620:	6823      	ldr	r3, [r4, #0]
 8014622:	2010      	movs	r0, #16
 8014624:	4798      	blx	r3
 8014626:	6130      	str	r0, [r6, #16]
 8014628:	b1d0      	cbz	r0, 8014660 <rcl_clock_init+0xdc>
 801462a:	2200      	movs	r2, #0
 801462c:	2300      	movs	r3, #0
 801462e:	e9c0 2300 	strd	r2, r3, [r0]
 8014632:	2301      	movs	r3, #1
 8014634:	7207      	strb	r7, [r0, #8]
 8014636:	4a0c      	ldr	r2, [pc, #48]	@ (8014668 <rcl_clock_init+0xe4>)
 8014638:	7033      	strb	r3, [r6, #0]
 801463a:	46bc      	mov	ip, r7
 801463c:	60f2      	str	r2, [r6, #12]
 801463e:	4660      	mov	r0, ip
 8014640:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8014642:	2e00      	cmp	r6, #0
 8014644:	d0ac      	beq.n	80145a0 <rcl_clock_init+0x1c>
 8014646:	2c00      	cmp	r4, #0
 8014648:	d0aa      	beq.n	80145a0 <rcl_clock_init+0x1c>
 801464a:	2300      	movs	r3, #0
 801464c:	e9c6 3301 	strd	r3, r3, [r6, #4]
 8014650:	f8df e01c 	ldr.w	lr, [pc, #28]	@ 8014670 <rcl_clock_init+0xec>
 8014654:	6133      	str	r3, [r6, #16]
 8014656:	f106 0514 	add.w	r5, r6, #20
 801465a:	469c      	mov	ip, r3
 801465c:	2702      	movs	r7, #2
 801465e:	e7b1      	b.n	80145c4 <rcl_clock_init+0x40>
 8014660:	f04f 0c0a 	mov.w	ip, #10
 8014664:	e79e      	b.n	80145a4 <rcl_clock_init+0x20>
 8014666:	bf00      	nop
 8014668:	08014565 	.word	0x08014565
 801466c:	0801455d 	.word	0x0801455d
 8014670:	08014555 	.word	0x08014555

08014674 <rcl_clock_get_now>:
 8014674:	b140      	cbz	r0, 8014688 <rcl_clock_get_now+0x14>
 8014676:	b139      	cbz	r1, 8014688 <rcl_clock_get_now+0x14>
 8014678:	7803      	ldrb	r3, [r0, #0]
 801467a:	b11b      	cbz	r3, 8014684 <rcl_clock_get_now+0x10>
 801467c:	68c3      	ldr	r3, [r0, #12]
 801467e:	b10b      	cbz	r3, 8014684 <rcl_clock_get_now+0x10>
 8014680:	6900      	ldr	r0, [r0, #16]
 8014682:	4718      	bx	r3
 8014684:	2001      	movs	r0, #1
 8014686:	4770      	bx	lr
 8014688:	200b      	movs	r0, #11
 801468a:	4770      	bx	lr

0801468c <rcl_clock_add_jump_callback>:
 801468c:	b082      	sub	sp, #8
 801468e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014692:	a906      	add	r1, sp, #24
 8014694:	e881 000c 	stmia.w	r1, {r2, r3}
 8014698:	e9dd 650c 	ldrd	r6, r5, [sp, #48]	@ 0x30
 801469c:	b320      	cbz	r0, 80146e8 <rcl_clock_add_jump_callback+0x5c>
 801469e:	4604      	mov	r4, r0
 80146a0:	3014      	adds	r0, #20
 80146a2:	f7f9 fe91 	bl	800e3c8 <rcutils_allocator_is_valid>
 80146a6:	b1f8      	cbz	r0, 80146e8 <rcl_clock_add_jump_callback+0x5c>
 80146a8:	b1f6      	cbz	r6, 80146e8 <rcl_clock_add_jump_callback+0x5c>
 80146aa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80146ac:	2b00      	cmp	r3, #0
 80146ae:	db1b      	blt.n	80146e8 <rcl_clock_add_jump_callback+0x5c>
 80146b0:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	@ 0x28
 80146b4:	2a01      	cmp	r2, #1
 80146b6:	f173 0300 	sbcs.w	r3, r3, #0
 80146ba:	da15      	bge.n	80146e8 <rcl_clock_add_jump_callback+0x5c>
 80146bc:	e9d4 0701 	ldrd	r0, r7, [r4, #4]
 80146c0:	2f00      	cmp	r7, #0
 80146c2:	d042      	beq.n	801474a <rcl_clock_add_jump_callback+0xbe>
 80146c4:	2300      	movs	r3, #0
 80146c6:	4602      	mov	r2, r0
 80146c8:	e003      	b.n	80146d2 <rcl_clock_add_jump_callback+0x46>
 80146ca:	42bb      	cmp	r3, r7
 80146cc:	f102 0228 	add.w	r2, r2, #40	@ 0x28
 80146d0:	d011      	beq.n	80146f6 <rcl_clock_add_jump_callback+0x6a>
 80146d2:	6811      	ldr	r1, [r2, #0]
 80146d4:	42b1      	cmp	r1, r6
 80146d6:	f103 0301 	add.w	r3, r3, #1
 80146da:	d1f6      	bne.n	80146ca <rcl_clock_add_jump_callback+0x3e>
 80146dc:	6a11      	ldr	r1, [r2, #32]
 80146de:	42a9      	cmp	r1, r5
 80146e0:	d1f3      	bne.n	80146ca <rcl_clock_add_jump_callback+0x3e>
 80146e2:	f04f 0e01 	mov.w	lr, #1
 80146e6:	e001      	b.n	80146ec <rcl_clock_add_jump_callback+0x60>
 80146e8:	f04f 0e0b 	mov.w	lr, #11
 80146ec:	4670      	mov	r0, lr
 80146ee:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80146f2:	b002      	add	sp, #8
 80146f4:	4770      	bx	lr
 80146f6:	3301      	adds	r3, #1
 80146f8:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80146fc:	00d9      	lsls	r1, r3, #3
 80146fe:	69e3      	ldr	r3, [r4, #28]
 8014700:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 8014702:	4798      	blx	r3
 8014704:	b1f0      	cbz	r0, 8014744 <rcl_clock_add_jump_callback+0xb8>
 8014706:	68a3      	ldr	r3, [r4, #8]
 8014708:	6060      	str	r0, [r4, #4]
 801470a:	eb03 0283 	add.w	r2, r3, r3, lsl #2
 801470e:	f10d 0c18 	add.w	ip, sp, #24
 8014712:	f840 6032 	str.w	r6, [r0, r2, lsl #3]
 8014716:	f103 0801 	add.w	r8, r3, #1
 801471a:	eb00 06c2 	add.w	r6, r0, r2, lsl #3
 801471e:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8014722:	f106 0708 	add.w	r7, r6, #8
 8014726:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 8014728:	e89c 0003 	ldmia.w	ip, {r0, r1}
 801472c:	f04f 0e00 	mov.w	lr, #0
 8014730:	e887 0003 	stmia.w	r7, {r0, r1}
 8014734:	6235      	str	r5, [r6, #32]
 8014736:	4670      	mov	r0, lr
 8014738:	f8c4 8008 	str.w	r8, [r4, #8]
 801473c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8014740:	b002      	add	sp, #8
 8014742:	4770      	bx	lr
 8014744:	f04f 0e0a 	mov.w	lr, #10
 8014748:	e7d0      	b.n	80146ec <rcl_clock_add_jump_callback+0x60>
 801474a:	2128      	movs	r1, #40	@ 0x28
 801474c:	e7d7      	b.n	80146fe <rcl_clock_add_jump_callback+0x72>
 801474e:	bf00      	nop

08014750 <rcl_clock_remove_jump_callback>:
 8014750:	2800      	cmp	r0, #0
 8014752:	d057      	beq.n	8014804 <rcl_clock_remove_jump_callback+0xb4>
 8014754:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8014758:	4605      	mov	r5, r0
 801475a:	3014      	adds	r0, #20
 801475c:	4688      	mov	r8, r1
 801475e:	4692      	mov	sl, r2
 8014760:	f7f9 fe32 	bl	800e3c8 <rcutils_allocator_is_valid>
 8014764:	2800      	cmp	r0, #0
 8014766:	d03b      	beq.n	80147e0 <rcl_clock_remove_jump_callback+0x90>
 8014768:	f1b8 0f00 	cmp.w	r8, #0
 801476c:	d038      	beq.n	80147e0 <rcl_clock_remove_jump_callback+0x90>
 801476e:	68ae      	ldr	r6, [r5, #8]
 8014770:	b166      	cbz	r6, 801478c <rcl_clock_remove_jump_callback+0x3c>
 8014772:	f8d5 9004 	ldr.w	r9, [r5, #4]
 8014776:	eb06 0786 	add.w	r7, r6, r6, lsl #2
 801477a:	eb09 07c7 	add.w	r7, r9, r7, lsl #3
 801477e:	464c      	mov	r4, r9
 8014780:	6823      	ldr	r3, [r4, #0]
 8014782:	4543      	cmp	r3, r8
 8014784:	d005      	beq.n	8014792 <rcl_clock_remove_jump_callback+0x42>
 8014786:	3428      	adds	r4, #40	@ 0x28
 8014788:	42a7      	cmp	r7, r4
 801478a:	d1f9      	bne.n	8014780 <rcl_clock_remove_jump_callback+0x30>
 801478c:	2001      	movs	r0, #1
 801478e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014792:	6a23      	ldr	r3, [r4, #32]
 8014794:	3428      	adds	r4, #40	@ 0x28
 8014796:	42bc      	cmp	r4, r7
 8014798:	d02d      	beq.n	80147f6 <rcl_clock_remove_jump_callback+0xa6>
 801479a:	4553      	cmp	r3, sl
 801479c:	d1f0      	bne.n	8014780 <rcl_clock_remove_jump_callback+0x30>
 801479e:	46a6      	mov	lr, r4
 80147a0:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 80147a4:	f1a4 0c28 	sub.w	ip, r4, #40	@ 0x28
 80147a8:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80147ac:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 80147b0:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80147b4:	e89e 0003 	ldmia.w	lr, {r0, r1}
 80147b8:	3428      	adds	r4, #40	@ 0x28
 80147ba:	42a7      	cmp	r7, r4
 80147bc:	e88c 0003 	stmia.w	ip, {r0, r1}
 80147c0:	d1ed      	bne.n	801479e <rcl_clock_remove_jump_callback+0x4e>
 80147c2:	3e01      	subs	r6, #1
 80147c4:	60ae      	str	r6, [r5, #8]
 80147c6:	b176      	cbz	r6, 80147e6 <rcl_clock_remove_jump_callback+0x96>
 80147c8:	eb06 0686 	add.w	r6, r6, r6, lsl #2
 80147cc:	69eb      	ldr	r3, [r5, #28]
 80147ce:	6a6a      	ldr	r2, [r5, #36]	@ 0x24
 80147d0:	00f1      	lsls	r1, r6, #3
 80147d2:	4648      	mov	r0, r9
 80147d4:	4798      	blx	r3
 80147d6:	b1b8      	cbz	r0, 8014808 <rcl_clock_remove_jump_callback+0xb8>
 80147d8:	6068      	str	r0, [r5, #4]
 80147da:	2000      	movs	r0, #0
 80147dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80147e0:	200b      	movs	r0, #11
 80147e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80147e6:	4648      	mov	r0, r9
 80147e8:	69ab      	ldr	r3, [r5, #24]
 80147ea:	6a69      	ldr	r1, [r5, #36]	@ 0x24
 80147ec:	4798      	blx	r3
 80147ee:	606e      	str	r6, [r5, #4]
 80147f0:	4630      	mov	r0, r6
 80147f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80147f6:	4553      	cmp	r3, sl
 80147f8:	d1c8      	bne.n	801478c <rcl_clock_remove_jump_callback+0x3c>
 80147fa:	3e01      	subs	r6, #1
 80147fc:	60ae      	str	r6, [r5, #8]
 80147fe:	2e00      	cmp	r6, #0
 8014800:	d1e2      	bne.n	80147c8 <rcl_clock_remove_jump_callback+0x78>
 8014802:	e7f0      	b.n	80147e6 <rcl_clock_remove_jump_callback+0x96>
 8014804:	200b      	movs	r0, #11
 8014806:	4770      	bx	lr
 8014808:	200a      	movs	r0, #10
 801480a:	e7ea      	b.n	80147e2 <rcl_clock_remove_jump_callback+0x92>

0801480c <_rcl_timer_time_jump>:
 801480c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8014810:	4605      	mov	r5, r0
 8014812:	b084      	sub	sp, #16
 8014814:	4614      	mov	r4, r2
 8014816:	b131      	cbz	r1, 8014826 <_rcl_timer_time_jump+0x1a>
 8014818:	7803      	ldrb	r3, [r0, #0]
 801481a:	3b02      	subs	r3, #2
 801481c:	2b01      	cmp	r3, #1
 801481e:	d93f      	bls.n	80148a0 <_rcl_timer_time_jump+0x94>
 8014820:	b004      	add	sp, #16
 8014822:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014826:	6813      	ldr	r3, [r2, #0]
 8014828:	a902      	add	r1, sp, #8
 801482a:	6818      	ldr	r0, [r3, #0]
 801482c:	f7ff ff22 	bl	8014674 <rcl_clock_get_now>
 8014830:	2800      	cmp	r0, #0
 8014832:	d1f5      	bne.n	8014820 <_rcl_timer_time_jump+0x14>
 8014834:	6820      	ldr	r0, [r4, #0]
 8014836:	2105      	movs	r1, #5
 8014838:	3020      	adds	r0, #32
 801483a:	f001 fdf9 	bl	8016430 <__atomic_load_8>
 801483e:	6823      	ldr	r3, [r4, #0]
 8014840:	4681      	mov	r9, r0
 8014842:	4688      	mov	r8, r1
 8014844:	f103 0028 	add.w	r0, r3, #40	@ 0x28
 8014848:	2105      	movs	r1, #5
 801484a:	f001 fdf1 	bl	8016430 <__atomic_load_8>
 801484e:	4607      	mov	r7, r0
 8014850:	6820      	ldr	r0, [r4, #0]
 8014852:	460e      	mov	r6, r1
 8014854:	3018      	adds	r0, #24
 8014856:	2105      	movs	r1, #5
 8014858:	f001 fdea 	bl	8016430 <__atomic_load_8>
 801485c:	782b      	ldrb	r3, [r5, #0]
 801485e:	9a02      	ldr	r2, [sp, #8]
 8014860:	3b02      	subs	r3, #2
 8014862:	2b01      	cmp	r3, #1
 8014864:	460d      	mov	r5, r1
 8014866:	9b03      	ldr	r3, [sp, #12]
 8014868:	4682      	mov	sl, r0
 801486a:	d937      	bls.n	80148dc <_rcl_timer_time_jump+0xd0>
 801486c:	42ba      	cmp	r2, r7
 801486e:	eb73 0106 	sbcs.w	r1, r3, r6
 8014872:	da5f      	bge.n	8014934 <_rcl_timer_time_jump+0x128>
 8014874:	454a      	cmp	r2, r9
 8014876:	eb73 0108 	sbcs.w	r1, r3, r8
 801487a:	dad1      	bge.n	8014820 <_rcl_timer_time_jump+0x14>
 801487c:	6820      	ldr	r0, [r4, #0]
 801487e:	eb1a 0202 	adds.w	r2, sl, r2
 8014882:	eb43 0305 	adc.w	r3, r3, r5
 8014886:	2505      	movs	r5, #5
 8014888:	3028      	adds	r0, #40	@ 0x28
 801488a:	9500      	str	r5, [sp, #0]
 801488c:	f001 fe06 	bl	801649c <__atomic_store_8>
 8014890:	6820      	ldr	r0, [r4, #0]
 8014892:	9500      	str	r5, [sp, #0]
 8014894:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8014898:	3020      	adds	r0, #32
 801489a:	f001 fdff 	bl	801649c <__atomic_store_8>
 801489e:	e7bf      	b.n	8014820 <_rcl_timer_time_jump+0x14>
 80148a0:	6813      	ldr	r3, [r2, #0]
 80148a2:	a902      	add	r1, sp, #8
 80148a4:	6818      	ldr	r0, [r3, #0]
 80148a6:	f7ff fee5 	bl	8014674 <rcl_clock_get_now>
 80148aa:	2800      	cmp	r0, #0
 80148ac:	d1b8      	bne.n	8014820 <_rcl_timer_time_jump+0x14>
 80148ae:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80148b2:	4313      	orrs	r3, r2
 80148b4:	d0b4      	beq.n	8014820 <_rcl_timer_time_jump+0x14>
 80148b6:	6820      	ldr	r0, [r4, #0]
 80148b8:	2105      	movs	r1, #5
 80148ba:	3028      	adds	r0, #40	@ 0x28
 80148bc:	f001 fdb8 	bl	8016430 <__atomic_load_8>
 80148c0:	9d02      	ldr	r5, [sp, #8]
 80148c2:	9b03      	ldr	r3, [sp, #12]
 80148c4:	4602      	mov	r2, r0
 80148c6:	6820      	ldr	r0, [r4, #0]
 80148c8:	1b52      	subs	r2, r2, r5
 80148ca:	f04f 0405 	mov.w	r4, #5
 80148ce:	9400      	str	r4, [sp, #0]
 80148d0:	eb61 0303 	sbc.w	r3, r1, r3
 80148d4:	3030      	adds	r0, #48	@ 0x30
 80148d6:	f001 fde1 	bl	801649c <__atomic_store_8>
 80148da:	e7a1      	b.n	8014820 <_rcl_timer_time_jump+0x14>
 80148dc:	4313      	orrs	r3, r2
 80148de:	d09f      	beq.n	8014820 <_rcl_timer_time_jump+0x14>
 80148e0:	6820      	ldr	r0, [r4, #0]
 80148e2:	f04f 0805 	mov.w	r8, #5
 80148e6:	2300      	movs	r3, #0
 80148e8:	f8cd 8000 	str.w	r8, [sp]
 80148ec:	3030      	adds	r0, #48	@ 0x30
 80148ee:	2200      	movs	r2, #0
 80148f0:	f001 fe0a 	bl	8016508 <__atomic_exchange_8>
 80148f4:	ea51 0300 	orrs.w	r3, r1, r0
 80148f8:	4606      	mov	r6, r0
 80148fa:	460f      	mov	r7, r1
 80148fc:	d090      	beq.n	8014820 <_rcl_timer_time_jump+0x14>
 80148fe:	9a02      	ldr	r2, [sp, #8]
 8014900:	9b03      	ldr	r3, [sp, #12]
 8014902:	f8cd 8000 	str.w	r8, [sp]
 8014906:	1a12      	subs	r2, r2, r0
 8014908:	6820      	ldr	r0, [r4, #0]
 801490a:	eb63 0301 	sbc.w	r3, r3, r1
 801490e:	eb12 020a 	adds.w	r2, r2, sl
 8014912:	eb43 0305 	adc.w	r3, r3, r5
 8014916:	3028      	adds	r0, #40	@ 0x28
 8014918:	f001 fdc0 	bl	801649c <__atomic_store_8>
 801491c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8014920:	f8cd 8000 	str.w	r8, [sp]
 8014924:	6820      	ldr	r0, [r4, #0]
 8014926:	1b92      	subs	r2, r2, r6
 8014928:	eb63 0307 	sbc.w	r3, r3, r7
 801492c:	3020      	adds	r0, #32
 801492e:	f001 fdb5 	bl	801649c <__atomic_store_8>
 8014932:	e775      	b.n	8014820 <_rcl_timer_time_jump+0x14>
 8014934:	6820      	ldr	r0, [r4, #0]
 8014936:	3008      	adds	r0, #8
 8014938:	f005 fe60 	bl	801a5fc <rcl_trigger_guard_condition>
 801493c:	e770      	b.n	8014820 <_rcl_timer_time_jump+0x14>
 801493e:	bf00      	nop

08014940 <rcl_get_zero_initialized_timer>:
 8014940:	4b01      	ldr	r3, [pc, #4]	@ (8014948 <rcl_get_zero_initialized_timer+0x8>)
 8014942:	6818      	ldr	r0, [r3, #0]
 8014944:	4770      	bx	lr
 8014946:	bf00      	nop
 8014948:	0801d8c8 	.word	0x0801d8c8
 801494c:	00000000 	.word	0x00000000

08014950 <rcl_timer_init>:
 8014950:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8014954:	b0aa      	sub	sp, #168	@ 0xa8
 8014956:	4604      	mov	r4, r0
 8014958:	a835      	add	r0, sp, #212	@ 0xd4
 801495a:	e9dd 8732 	ldrd	r8, r7, [sp, #200]	@ 0xc8
 801495e:	460d      	mov	r5, r1
 8014960:	4692      	mov	sl, r2
 8014962:	f7f9 fd31 	bl	800e3c8 <rcutils_allocator_is_valid>
 8014966:	2800      	cmp	r0, #0
 8014968:	d064      	beq.n	8014a34 <rcl_timer_init+0xe4>
 801496a:	2c00      	cmp	r4, #0
 801496c:	d062      	beq.n	8014a34 <rcl_timer_init+0xe4>
 801496e:	2d00      	cmp	r5, #0
 8014970:	d060      	beq.n	8014a34 <rcl_timer_init+0xe4>
 8014972:	2f00      	cmp	r7, #0
 8014974:	db5e      	blt.n	8014a34 <rcl_timer_init+0xe4>
 8014976:	6823      	ldr	r3, [r4, #0]
 8014978:	b123      	cbz	r3, 8014984 <rcl_timer_init+0x34>
 801497a:	2664      	movs	r6, #100	@ 0x64
 801497c:	4630      	mov	r0, r6
 801497e:	b02a      	add	sp, #168	@ 0xa8
 8014980:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014984:	a908      	add	r1, sp, #32
 8014986:	4628      	mov	r0, r5
 8014988:	f7ff fe74 	bl	8014674 <rcl_clock_get_now>
 801498c:	4606      	mov	r6, r0
 801498e:	2800      	cmp	r0, #0
 8014990:	d1f4      	bne.n	801497c <rcl_timer_init+0x2c>
 8014992:	ae06      	add	r6, sp, #24
 8014994:	4630      	mov	r0, r6
 8014996:	e9cd 5a16 	strd	r5, sl, [sp, #88]	@ 0x58
 801499a:	f005 fd37 	bl	801a40c <rcl_get_zero_initialized_guard_condition>
 801499e:	e896 0003 	ldmia.w	r6, {r0, r1}
 80149a2:	f10d 0960 	add.w	r9, sp, #96	@ 0x60
 80149a6:	ae0b      	add	r6, sp, #44	@ 0x2c
 80149a8:	e889 0003 	stmia.w	r9, {r0, r1}
 80149ac:	4630      	mov	r0, r6
 80149ae:	f005 fe09 	bl	801a5c4 <rcl_guard_condition_get_default_options>
 80149b2:	ab0d      	add	r3, sp, #52	@ 0x34
 80149b4:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80149b8:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 80149bc:	4651      	mov	r1, sl
 80149be:	e896 000c 	ldmia.w	r6, {r2, r3}
 80149c2:	4648      	mov	r0, r9
 80149c4:	f005 fd2c 	bl	801a420 <rcl_guard_condition_init>
 80149c8:	4606      	mov	r6, r0
 80149ca:	2800      	cmp	r0, #0
 80149cc:	d1d6      	bne.n	801497c <rcl_timer_init+0x2c>
 80149ce:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 80149d0:	781b      	ldrb	r3, [r3, #0]
 80149d2:	2b01      	cmp	r3, #1
 80149d4:	d033      	beq.n	8014a3e <rcl_timer_init+0xee>
 80149d6:	9934      	ldr	r1, [sp, #208]	@ 0xd0
 80149d8:	911a      	str	r1, [sp, #104]	@ 0x68
 80149da:	4642      	mov	r2, r8
 80149dc:	463b      	mov	r3, r7
 80149de:	e9cd 231c 	strd	r2, r3, [sp, #112]	@ 0x70
 80149e2:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80149e6:	ed9f 7b2c 	vldr	d7, [pc, #176]	@ 8014a98 <rcl_timer_init+0x148>
 80149ea:	eb12 0008 	adds.w	r0, r2, r8
 80149ee:	eb47 0103 	adc.w	r1, r7, r3
 80149f2:	f10d 0ed4 	add.w	lr, sp, #212	@ 0xd4
 80149f6:	ed8d 7b22 	vstr	d7, [sp, #136]	@ 0x88
 80149fa:	e9cd 231e 	strd	r2, r3, [sp, #120]	@ 0x78
 80149fe:	e9cd 0120 	strd	r0, r1, [sp, #128]	@ 0x80
 8014a02:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8014a06:	f10d 0c94 	add.w	ip, sp, #148	@ 0x94
 8014a0a:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8014a0e:	f8de 3000 	ldr.w	r3, [lr]
 8014a12:	f8cc 3000 	str.w	r3, [ip]
 8014a16:	f04f 0a00 	mov.w	sl, #0
 8014a1a:	4619      	mov	r1, r3
 8014a1c:	f88d a090 	strb.w	sl, [sp, #144]	@ 0x90
 8014a20:	9b35      	ldr	r3, [sp, #212]	@ 0xd4
 8014a22:	2050      	movs	r0, #80	@ 0x50
 8014a24:	4798      	blx	r3
 8014a26:	6020      	str	r0, [r4, #0]
 8014a28:	b358      	cbz	r0, 8014a82 <rcl_timer_init+0x132>
 8014a2a:	2250      	movs	r2, #80	@ 0x50
 8014a2c:	a916      	add	r1, sp, #88	@ 0x58
 8014a2e:	f006 fe7c 	bl	801b72a <memcpy>
 8014a32:	e7a3      	b.n	801497c <rcl_timer_init+0x2c>
 8014a34:	260b      	movs	r6, #11
 8014a36:	4630      	mov	r0, r6
 8014a38:	b02a      	add	sp, #168	@ 0xa8
 8014a3a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014a3e:	2001      	movs	r0, #1
 8014a40:	2100      	movs	r1, #0
 8014a42:	e9cd 0112 	strd	r0, r1, [sp, #72]	@ 0x48
 8014a46:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8014a4a:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8014a4e:	e9cd 0114 	strd	r0, r1, [sp, #80]	@ 0x50
 8014a52:	4a13      	ldr	r2, [pc, #76]	@ (8014aa0 <rcl_timer_init+0x150>)
 8014a54:	f88d 3040 	strb.w	r3, [sp, #64]	@ 0x40
 8014a58:	9405      	str	r4, [sp, #20]
 8014a5a:	9204      	str	r2, [sp, #16]
 8014a5c:	ab12      	add	r3, sp, #72	@ 0x48
 8014a5e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8014a60:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 8014a64:	f10d 0c40 	add.w	ip, sp, #64	@ 0x40
 8014a68:	e89c 000c 	ldmia.w	ip, {r2, r3}
 8014a6c:	4628      	mov	r0, r5
 8014a6e:	f7ff fe0d 	bl	801468c <rcl_clock_add_jump_callback>
 8014a72:	4682      	mov	sl, r0
 8014a74:	2800      	cmp	r0, #0
 8014a76:	d0ae      	beq.n	80149d6 <rcl_timer_init+0x86>
 8014a78:	4648      	mov	r0, r9
 8014a7a:	f005 fd7d 	bl	801a578 <rcl_guard_condition_fini>
 8014a7e:	4656      	mov	r6, sl
 8014a80:	e77c      	b.n	801497c <rcl_timer_init+0x2c>
 8014a82:	4648      	mov	r0, r9
 8014a84:	f005 fd78 	bl	801a578 <rcl_guard_condition_fini>
 8014a88:	4905      	ldr	r1, [pc, #20]	@ (8014aa0 <rcl_timer_init+0x150>)
 8014a8a:	4622      	mov	r2, r4
 8014a8c:	4628      	mov	r0, r5
 8014a8e:	f7ff fe5f 	bl	8014750 <rcl_clock_remove_jump_callback>
 8014a92:	260a      	movs	r6, #10
 8014a94:	e772      	b.n	801497c <rcl_timer_init+0x2c>
 8014a96:	bf00      	nop
	...
 8014aa0:	0801480d 	.word	0x0801480d

08014aa4 <rcl_timer_call>:
 8014aa4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014aa8:	b087      	sub	sp, #28
 8014aaa:	2800      	cmp	r0, #0
 8014aac:	d06d      	beq.n	8014b8a <rcl_timer_call+0xe6>
 8014aae:	6803      	ldr	r3, [r0, #0]
 8014ab0:	4604      	mov	r4, r0
 8014ab2:	2b00      	cmp	r3, #0
 8014ab4:	d063      	beq.n	8014b7e <rcl_timer_call+0xda>
 8014ab6:	f3bf 8f5b 	dmb	ish
 8014aba:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8014abe:	f3bf 8f5b 	dmb	ish
 8014ac2:	2b00      	cmp	r3, #0
 8014ac4:	d150      	bne.n	8014b68 <rcl_timer_call+0xc4>
 8014ac6:	6803      	ldr	r3, [r0, #0]
 8014ac8:	a904      	add	r1, sp, #16
 8014aca:	6818      	ldr	r0, [r3, #0]
 8014acc:	f7ff fdd2 	bl	8014674 <rcl_clock_get_now>
 8014ad0:	4605      	mov	r5, r0
 8014ad2:	2800      	cmp	r0, #0
 8014ad4:	d14a      	bne.n	8014b6c <rcl_timer_call+0xc8>
 8014ad6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8014ada:	2b00      	cmp	r3, #0
 8014adc:	db4a      	blt.n	8014b74 <rcl_timer_call+0xd0>
 8014ade:	6820      	ldr	r0, [r4, #0]
 8014ae0:	f04f 0a05 	mov.w	sl, #5
 8014ae4:	f8cd a000 	str.w	sl, [sp]
 8014ae8:	3020      	adds	r0, #32
 8014aea:	f001 fd0d 	bl	8016508 <__atomic_exchange_8>
 8014aee:	6823      	ldr	r3, [r4, #0]
 8014af0:	f3bf 8f5b 	dmb	ish
 8014af4:	4680      	mov	r8, r0
 8014af6:	f8d3 b010 	ldr.w	fp, [r3, #16]
 8014afa:	f3bf 8f5b 	dmb	ish
 8014afe:	6820      	ldr	r0, [r4, #0]
 8014b00:	4689      	mov	r9, r1
 8014b02:	3028      	adds	r0, #40	@ 0x28
 8014b04:	4651      	mov	r1, sl
 8014b06:	f001 fc93 	bl	8016430 <__atomic_load_8>
 8014b0a:	4606      	mov	r6, r0
 8014b0c:	6820      	ldr	r0, [r4, #0]
 8014b0e:	460f      	mov	r7, r1
 8014b10:	3018      	adds	r0, #24
 8014b12:	4651      	mov	r1, sl
 8014b14:	f001 fc8c 	bl	8016430 <__atomic_load_8>
 8014b18:	1836      	adds	r6, r6, r0
 8014b1a:	4602      	mov	r2, r0
 8014b1c:	4682      	mov	sl, r0
 8014b1e:	e9dd 0c04 	ldrd	r0, ip, [sp, #16]
 8014b22:	eb47 0701 	adc.w	r7, r7, r1
 8014b26:	4286      	cmp	r6, r0
 8014b28:	460b      	mov	r3, r1
 8014b2a:	eb77 010c 	sbcs.w	r1, r7, ip
 8014b2e:	da04      	bge.n	8014b3a <rcl_timer_call+0x96>
 8014b30:	ea53 0102 	orrs.w	r1, r3, r2
 8014b34:	d12e      	bne.n	8014b94 <rcl_timer_call+0xf0>
 8014b36:	4606      	mov	r6, r0
 8014b38:	4667      	mov	r7, ip
 8014b3a:	6820      	ldr	r0, [r4, #0]
 8014b3c:	2105      	movs	r1, #5
 8014b3e:	4632      	mov	r2, r6
 8014b40:	463b      	mov	r3, r7
 8014b42:	3028      	adds	r0, #40	@ 0x28
 8014b44:	9100      	str	r1, [sp, #0]
 8014b46:	f001 fca9 	bl	801649c <__atomic_store_8>
 8014b4a:	f1bb 0f00 	cmp.w	fp, #0
 8014b4e:	d00d      	beq.n	8014b6c <rcl_timer_call+0xc8>
 8014b50:	9a04      	ldr	r2, [sp, #16]
 8014b52:	9b05      	ldr	r3, [sp, #20]
 8014b54:	ebb2 0208 	subs.w	r2, r2, r8
 8014b58:	4620      	mov	r0, r4
 8014b5a:	eb63 0309 	sbc.w	r3, r3, r9
 8014b5e:	47d8      	blx	fp
 8014b60:	4628      	mov	r0, r5
 8014b62:	b007      	add	sp, #28
 8014b64:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014b68:	f240 3521 	movw	r5, #801	@ 0x321
 8014b6c:	4628      	mov	r0, r5
 8014b6e:	b007      	add	sp, #28
 8014b70:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014b74:	2501      	movs	r5, #1
 8014b76:	4628      	mov	r0, r5
 8014b78:	b007      	add	sp, #28
 8014b7a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014b7e:	f44f 7548 	mov.w	r5, #800	@ 0x320
 8014b82:	4628      	mov	r0, r5
 8014b84:	b007      	add	sp, #28
 8014b86:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014b8a:	250b      	movs	r5, #11
 8014b8c:	4628      	mov	r0, r5
 8014b8e:	b007      	add	sp, #28
 8014b90:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014b94:	1b80      	subs	r0, r0, r6
 8014b96:	eb6c 0107 	sbc.w	r1, ip, r7
 8014b9a:	3801      	subs	r0, #1
 8014b9c:	f161 0100 	sbc.w	r1, r1, #0
 8014ba0:	e9cd 3202 	strd	r3, r2, [sp, #8]
 8014ba4:	f7ec f858 	bl	8000c58 <__aeabi_ldivmod>
 8014ba8:	9b02      	ldr	r3, [sp, #8]
 8014baa:	3001      	adds	r0, #1
 8014bac:	f141 0100 	adc.w	r1, r1, #0
 8014bb0:	fb00 f303 	mul.w	r3, r0, r3
 8014bb4:	fb01 330a 	mla	r3, r1, sl, r3
 8014bb8:	fba0 0a0a 	umull	r0, sl, r0, sl
 8014bbc:	1986      	adds	r6, r0, r6
 8014bbe:	4453      	add	r3, sl
 8014bc0:	eb43 0707 	adc.w	r7, r3, r7
 8014bc4:	e7b9      	b.n	8014b3a <rcl_timer_call+0x96>
 8014bc6:	bf00      	nop

08014bc8 <rcl_timer_is_ready>:
 8014bc8:	b570      	push	{r4, r5, r6, lr}
 8014bca:	b082      	sub	sp, #8
 8014bcc:	b378      	cbz	r0, 8014c2e <rcl_timer_is_ready+0x66>
 8014bce:	6803      	ldr	r3, [r0, #0]
 8014bd0:	4604      	mov	r4, r0
 8014bd2:	b383      	cbz	r3, 8014c36 <rcl_timer_is_ready+0x6e>
 8014bd4:	460d      	mov	r5, r1
 8014bd6:	b351      	cbz	r1, 8014c2e <rcl_timer_is_ready+0x66>
 8014bd8:	f3bf 8f5b 	dmb	ish
 8014bdc:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8014be0:	f3bf 8f5b 	dmb	ish
 8014be4:	b953      	cbnz	r3, 8014bfc <rcl_timer_is_ready+0x34>
 8014be6:	6803      	ldr	r3, [r0, #0]
 8014be8:	4669      	mov	r1, sp
 8014bea:	6818      	ldr	r0, [r3, #0]
 8014bec:	f7ff fd42 	bl	8014674 <rcl_clock_get_now>
 8014bf0:	4606      	mov	r6, r0
 8014bf2:	b140      	cbz	r0, 8014c06 <rcl_timer_is_ready+0x3e>
 8014bf4:	f240 3321 	movw	r3, #801	@ 0x321
 8014bf8:	4298      	cmp	r0, r3
 8014bfa:	d101      	bne.n	8014c00 <rcl_timer_is_ready+0x38>
 8014bfc:	2600      	movs	r6, #0
 8014bfe:	702e      	strb	r6, [r5, #0]
 8014c00:	4630      	mov	r0, r6
 8014c02:	b002      	add	sp, #8
 8014c04:	bd70      	pop	{r4, r5, r6, pc}
 8014c06:	6820      	ldr	r0, [r4, #0]
 8014c08:	2105      	movs	r1, #5
 8014c0a:	3028      	adds	r0, #40	@ 0x28
 8014c0c:	f001 fc10 	bl	8016430 <__atomic_load_8>
 8014c10:	9b00      	ldr	r3, [sp, #0]
 8014c12:	1ac0      	subs	r0, r0, r3
 8014c14:	9b01      	ldr	r3, [sp, #4]
 8014c16:	eb61 0103 	sbc.w	r1, r1, r3
 8014c1a:	2801      	cmp	r0, #1
 8014c1c:	f171 0300 	sbcs.w	r3, r1, #0
 8014c20:	bfb4      	ite	lt
 8014c22:	2301      	movlt	r3, #1
 8014c24:	2300      	movge	r3, #0
 8014c26:	4630      	mov	r0, r6
 8014c28:	702b      	strb	r3, [r5, #0]
 8014c2a:	b002      	add	sp, #8
 8014c2c:	bd70      	pop	{r4, r5, r6, pc}
 8014c2e:	260b      	movs	r6, #11
 8014c30:	4630      	mov	r0, r6
 8014c32:	b002      	add	sp, #8
 8014c34:	bd70      	pop	{r4, r5, r6, pc}
 8014c36:	f44f 7648 	mov.w	r6, #800	@ 0x320
 8014c3a:	e7e1      	b.n	8014c00 <rcl_timer_is_ready+0x38>

08014c3c <rcl_timer_get_time_until_next_call>:
 8014c3c:	b570      	push	{r4, r5, r6, lr}
 8014c3e:	b082      	sub	sp, #8
 8014c40:	b330      	cbz	r0, 8014c90 <rcl_timer_get_time_until_next_call+0x54>
 8014c42:	6803      	ldr	r3, [r0, #0]
 8014c44:	4604      	mov	r4, r0
 8014c46:	b33b      	cbz	r3, 8014c98 <rcl_timer_get_time_until_next_call+0x5c>
 8014c48:	460d      	mov	r5, r1
 8014c4a:	b309      	cbz	r1, 8014c90 <rcl_timer_get_time_until_next_call+0x54>
 8014c4c:	f3bf 8f5b 	dmb	ish
 8014c50:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8014c54:	f3bf 8f5b 	dmb	ish
 8014c58:	b9ab      	cbnz	r3, 8014c86 <rcl_timer_get_time_until_next_call+0x4a>
 8014c5a:	6803      	ldr	r3, [r0, #0]
 8014c5c:	4669      	mov	r1, sp
 8014c5e:	6818      	ldr	r0, [r3, #0]
 8014c60:	f7ff fd08 	bl	8014674 <rcl_clock_get_now>
 8014c64:	4606      	mov	r6, r0
 8014c66:	b958      	cbnz	r0, 8014c80 <rcl_timer_get_time_until_next_call+0x44>
 8014c68:	6820      	ldr	r0, [r4, #0]
 8014c6a:	2105      	movs	r1, #5
 8014c6c:	3028      	adds	r0, #40	@ 0x28
 8014c6e:	f001 fbdf 	bl	8016430 <__atomic_load_8>
 8014c72:	9b00      	ldr	r3, [sp, #0]
 8014c74:	1ac0      	subs	r0, r0, r3
 8014c76:	9b01      	ldr	r3, [sp, #4]
 8014c78:	6028      	str	r0, [r5, #0]
 8014c7a:	eb61 0103 	sbc.w	r1, r1, r3
 8014c7e:	6069      	str	r1, [r5, #4]
 8014c80:	4630      	mov	r0, r6
 8014c82:	b002      	add	sp, #8
 8014c84:	bd70      	pop	{r4, r5, r6, pc}
 8014c86:	f240 3621 	movw	r6, #801	@ 0x321
 8014c8a:	4630      	mov	r0, r6
 8014c8c:	b002      	add	sp, #8
 8014c8e:	bd70      	pop	{r4, r5, r6, pc}
 8014c90:	260b      	movs	r6, #11
 8014c92:	4630      	mov	r0, r6
 8014c94:	b002      	add	sp, #8
 8014c96:	bd70      	pop	{r4, r5, r6, pc}
 8014c98:	f44f 7648 	mov.w	r6, #800	@ 0x320
 8014c9c:	e7f0      	b.n	8014c80 <rcl_timer_get_time_until_next_call+0x44>
 8014c9e:	bf00      	nop

08014ca0 <rcl_timer_get_guard_condition>:
 8014ca0:	b130      	cbz	r0, 8014cb0 <rcl_timer_get_guard_condition+0x10>
 8014ca2:	6800      	ldr	r0, [r0, #0]
 8014ca4:	b120      	cbz	r0, 8014cb0 <rcl_timer_get_guard_condition+0x10>
 8014ca6:	68c3      	ldr	r3, [r0, #12]
 8014ca8:	b10b      	cbz	r3, 8014cae <rcl_timer_get_guard_condition+0xe>
 8014caa:	3008      	adds	r0, #8
 8014cac:	4770      	bx	lr
 8014cae:	4618      	mov	r0, r3
 8014cb0:	4770      	bx	lr
 8014cb2:	bf00      	nop

08014cb4 <rcl_validate_enclave_name_with_size>:
 8014cb4:	b378      	cbz	r0, 8014d16 <rcl_validate_enclave_name_with_size+0x62>
 8014cb6:	b570      	push	{r4, r5, r6, lr}
 8014cb8:	4615      	mov	r5, r2
 8014cba:	b0c2      	sub	sp, #264	@ 0x108
 8014cbc:	b302      	cbz	r2, 8014d00 <rcl_validate_enclave_name_with_size+0x4c>
 8014cbe:	461e      	mov	r6, r3
 8014cc0:	466a      	mov	r2, sp
 8014cc2:	ab01      	add	r3, sp, #4
 8014cc4:	460c      	mov	r4, r1
 8014cc6:	f002 f849 	bl	8016d5c <rmw_validate_namespace_with_size>
 8014cca:	4684      	mov	ip, r0
 8014ccc:	b9e8      	cbnz	r0, 8014d0a <rcl_validate_enclave_name_with_size+0x56>
 8014cce:	9b00      	ldr	r3, [sp, #0]
 8014cd0:	b923      	cbnz	r3, 8014cdc <rcl_validate_enclave_name_with_size+0x28>
 8014cd2:	2300      	movs	r3, #0
 8014cd4:	602b      	str	r3, [r5, #0]
 8014cd6:	4660      	mov	r0, ip
 8014cd8:	b042      	add	sp, #264	@ 0x108
 8014cda:	bd70      	pop	{r4, r5, r6, pc}
 8014cdc:	2b07      	cmp	r3, #7
 8014cde:	d007      	beq.n	8014cf0 <rcl_validate_enclave_name_with_size+0x3c>
 8014ce0:	1e5a      	subs	r2, r3, #1
 8014ce2:	2a05      	cmp	r2, #5
 8014ce4:	d833      	bhi.n	8014d4e <rcl_validate_enclave_name_with_size+0x9a>
 8014ce6:	e8df f002 	tbb	[pc, r2]
 8014cea:	2c2f      	.short	0x2c2f
 8014cec:	1a232629 	.word	0x1a232629
 8014cf0:	2cff      	cmp	r4, #255	@ 0xff
 8014cf2:	d9ee      	bls.n	8014cd2 <rcl_validate_enclave_name_with_size+0x1e>
 8014cf4:	602b      	str	r3, [r5, #0]
 8014cf6:	2e00      	cmp	r6, #0
 8014cf8:	d0ed      	beq.n	8014cd6 <rcl_validate_enclave_name_with_size+0x22>
 8014cfa:	23fe      	movs	r3, #254	@ 0xfe
 8014cfc:	6033      	str	r3, [r6, #0]
 8014cfe:	e7ea      	b.n	8014cd6 <rcl_validate_enclave_name_with_size+0x22>
 8014d00:	f04f 0c0b 	mov.w	ip, #11
 8014d04:	4660      	mov	r0, ip
 8014d06:	b042      	add	sp, #264	@ 0x108
 8014d08:	bd70      	pop	{r4, r5, r6, pc}
 8014d0a:	f7fe fc87 	bl	801361c <rcl_convert_rmw_ret_to_rcl_ret>
 8014d0e:	4684      	mov	ip, r0
 8014d10:	4660      	mov	r0, ip
 8014d12:	b042      	add	sp, #264	@ 0x108
 8014d14:	bd70      	pop	{r4, r5, r6, pc}
 8014d16:	f04f 0c0b 	mov.w	ip, #11
 8014d1a:	4660      	mov	r0, ip
 8014d1c:	4770      	bx	lr
 8014d1e:	2306      	movs	r3, #6
 8014d20:	602b      	str	r3, [r5, #0]
 8014d22:	2e00      	cmp	r6, #0
 8014d24:	d0d7      	beq.n	8014cd6 <rcl_validate_enclave_name_with_size+0x22>
 8014d26:	9b01      	ldr	r3, [sp, #4]
 8014d28:	6033      	str	r3, [r6, #0]
 8014d2a:	4660      	mov	r0, ip
 8014d2c:	b042      	add	sp, #264	@ 0x108
 8014d2e:	bd70      	pop	{r4, r5, r6, pc}
 8014d30:	2305      	movs	r3, #5
 8014d32:	602b      	str	r3, [r5, #0]
 8014d34:	e7f5      	b.n	8014d22 <rcl_validate_enclave_name_with_size+0x6e>
 8014d36:	2304      	movs	r3, #4
 8014d38:	602b      	str	r3, [r5, #0]
 8014d3a:	e7f2      	b.n	8014d22 <rcl_validate_enclave_name_with_size+0x6e>
 8014d3c:	2303      	movs	r3, #3
 8014d3e:	602b      	str	r3, [r5, #0]
 8014d40:	e7ef      	b.n	8014d22 <rcl_validate_enclave_name_with_size+0x6e>
 8014d42:	2302      	movs	r3, #2
 8014d44:	602b      	str	r3, [r5, #0]
 8014d46:	e7ec      	b.n	8014d22 <rcl_validate_enclave_name_with_size+0x6e>
 8014d48:	2301      	movs	r3, #1
 8014d4a:	602b      	str	r3, [r5, #0]
 8014d4c:	e7e9      	b.n	8014d22 <rcl_validate_enclave_name_with_size+0x6e>
 8014d4e:	4a04      	ldr	r2, [pc, #16]	@ (8014d60 <rcl_validate_enclave_name_with_size+0xac>)
 8014d50:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8014d54:	a802      	add	r0, sp, #8
 8014d56:	f001 fd25 	bl	80167a4 <rcutils_snprintf>
 8014d5a:	f04f 0c01 	mov.w	ip, #1
 8014d5e:	e7ba      	b.n	8014cd6 <rcl_validate_enclave_name_with_size+0x22>
 8014d60:	0801d8cc 	.word	0x0801d8cc

08014d64 <rcl_validate_enclave_name>:
 8014d64:	b168      	cbz	r0, 8014d82 <rcl_validate_enclave_name+0x1e>
 8014d66:	b570      	push	{r4, r5, r6, lr}
 8014d68:	460d      	mov	r5, r1
 8014d6a:	4616      	mov	r6, r2
 8014d6c:	4604      	mov	r4, r0
 8014d6e:	f7eb fa39 	bl	80001e4 <strlen>
 8014d72:	4633      	mov	r3, r6
 8014d74:	4601      	mov	r1, r0
 8014d76:	462a      	mov	r2, r5
 8014d78:	4620      	mov	r0, r4
 8014d7a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8014d7e:	f7ff bf99 	b.w	8014cb4 <rcl_validate_enclave_name_with_size>
 8014d82:	200b      	movs	r0, #11
 8014d84:	4770      	bx	lr
 8014d86:	bf00      	nop

08014d88 <rcl_get_zero_initialized_wait_set>:
 8014d88:	b510      	push	{r4, lr}
 8014d8a:	4c08      	ldr	r4, [pc, #32]	@ (8014dac <rcl_get_zero_initialized_wait_set+0x24>)
 8014d8c:	4686      	mov	lr, r0
 8014d8e:	4684      	mov	ip, r0
 8014d90:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8014d92:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8014d96:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8014d98:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8014d9c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8014d9e:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8014da2:	6823      	ldr	r3, [r4, #0]
 8014da4:	f8cc 3000 	str.w	r3, [ip]
 8014da8:	4670      	mov	r0, lr
 8014daa:	bd10      	pop	{r4, pc}
 8014dac:	0801d92c 	.word	0x0801d92c

08014db0 <rcl_wait_set_is_valid>:
 8014db0:	b118      	cbz	r0, 8014dba <rcl_wait_set_is_valid+0xa>
 8014db2:	6b00      	ldr	r0, [r0, #48]	@ 0x30
 8014db4:	3800      	subs	r0, #0
 8014db6:	bf18      	it	ne
 8014db8:	2001      	movne	r0, #1
 8014dba:	4770      	bx	lr

08014dbc <rcl_wait_set_fini>:
 8014dbc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014dc0:	b082      	sub	sp, #8
 8014dc2:	2800      	cmp	r0, #0
 8014dc4:	f000 8095 	beq.w	8014ef2 <rcl_wait_set_fini+0x136>
 8014dc8:	6b06      	ldr	r6, [r0, #48]	@ 0x30
 8014dca:	4604      	mov	r4, r0
 8014dcc:	2e00      	cmp	r6, #0
 8014dce:	f000 808c 	beq.w	8014eea <rcl_wait_set_fini+0x12e>
 8014dd2:	6bf0      	ldr	r0, [r6, #60]	@ 0x3c
 8014dd4:	f003 f9b6 	bl	8018144 <rmw_destroy_wait_set>
 8014dd8:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 8014dda:	1e06      	subs	r6, r0, #0
 8014ddc:	bf18      	it	ne
 8014dde:	f44f 7661 	movne.w	r6, #900	@ 0x384
 8014de2:	2d00      	cmp	r5, #0
 8014de4:	f000 8081 	beq.w	8014eea <rcl_wait_set_fini+0x12e>
 8014de8:	6820      	ldr	r0, [r4, #0]
 8014dea:	f8d5 804c 	ldr.w	r8, [r5, #76]	@ 0x4c
 8014dee:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 8014df0:	2700      	movs	r7, #0
 8014df2:	6067      	str	r7, [r4, #4]
 8014df4:	602f      	str	r7, [r5, #0]
 8014df6:	b120      	cbz	r0, 8014e02 <rcl_wait_set_fini+0x46>
 8014df8:	9101      	str	r1, [sp, #4]
 8014dfa:	47c0      	blx	r8
 8014dfc:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 8014dfe:	9901      	ldr	r1, [sp, #4]
 8014e00:	6027      	str	r7, [r4, #0]
 8014e02:	68a8      	ldr	r0, [r5, #8]
 8014e04:	b120      	cbz	r0, 8014e10 <rcl_wait_set_fini+0x54>
 8014e06:	47c0      	blx	r8
 8014e08:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 8014e0a:	2300      	movs	r3, #0
 8014e0c:	e9c5 3301 	strd	r3, r3, [r5, #4]
 8014e10:	68a0      	ldr	r0, [r4, #8]
 8014e12:	6cef      	ldr	r7, [r5, #76]	@ 0x4c
 8014e14:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 8014e16:	f04f 0800 	mov.w	r8, #0
 8014e1a:	f8c4 800c 	str.w	r8, [r4, #12]
 8014e1e:	f8c5 800c 	str.w	r8, [r5, #12]
 8014e22:	b128      	cbz	r0, 8014e30 <rcl_wait_set_fini+0x74>
 8014e24:	47b8      	blx	r7
 8014e26:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 8014e28:	f8c4 8008 	str.w	r8, [r4, #8]
 8014e2c:	6cef      	ldr	r7, [r5, #76]	@ 0x4c
 8014e2e:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 8014e30:	6968      	ldr	r0, [r5, #20]
 8014e32:	f04f 0800 	mov.w	r8, #0
 8014e36:	f8c5 8010 	str.w	r8, [r5, #16]
 8014e3a:	b128      	cbz	r0, 8014e48 <rcl_wait_set_fini+0x8c>
 8014e3c:	47b8      	blx	r7
 8014e3e:	f8c5 8014 	str.w	r8, [r5, #20]
 8014e42:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 8014e44:	6cef      	ldr	r7, [r5, #76]	@ 0x4c
 8014e46:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 8014e48:	6920      	ldr	r0, [r4, #16]
 8014e4a:	f04f 0800 	mov.w	r8, #0
 8014e4e:	f8c4 8014 	str.w	r8, [r4, #20]
 8014e52:	f8c5 8040 	str.w	r8, [r5, #64]	@ 0x40
 8014e56:	b128      	cbz	r0, 8014e64 <rcl_wait_set_fini+0xa8>
 8014e58:	47b8      	blx	r7
 8014e5a:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 8014e5c:	f8c4 8010 	str.w	r8, [r4, #16]
 8014e60:	6cef      	ldr	r7, [r5, #76]	@ 0x4c
 8014e62:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 8014e64:	69a0      	ldr	r0, [r4, #24]
 8014e66:	f04f 0800 	mov.w	r8, #0
 8014e6a:	f8c4 801c 	str.w	r8, [r4, #28]
 8014e6e:	f8c5 8018 	str.w	r8, [r5, #24]
 8014e72:	b128      	cbz	r0, 8014e80 <rcl_wait_set_fini+0xc4>
 8014e74:	9101      	str	r1, [sp, #4]
 8014e76:	47b8      	blx	r7
 8014e78:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 8014e7a:	9901      	ldr	r1, [sp, #4]
 8014e7c:	f8c4 8018 	str.w	r8, [r4, #24]
 8014e80:	6a28      	ldr	r0, [r5, #32]
 8014e82:	b120      	cbz	r0, 8014e8e <rcl_wait_set_fini+0xd2>
 8014e84:	47b8      	blx	r7
 8014e86:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 8014e88:	2300      	movs	r3, #0
 8014e8a:	e9c5 3307 	strd	r3, r3, [r5, #28]
 8014e8e:	6a20      	ldr	r0, [r4, #32]
 8014e90:	f8d5 804c 	ldr.w	r8, [r5, #76]	@ 0x4c
 8014e94:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 8014e96:	2700      	movs	r7, #0
 8014e98:	6267      	str	r7, [r4, #36]	@ 0x24
 8014e9a:	626f      	str	r7, [r5, #36]	@ 0x24
 8014e9c:	b120      	cbz	r0, 8014ea8 <rcl_wait_set_fini+0xec>
 8014e9e:	9101      	str	r1, [sp, #4]
 8014ea0:	47c0      	blx	r8
 8014ea2:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 8014ea4:	9901      	ldr	r1, [sp, #4]
 8014ea6:	6227      	str	r7, [r4, #32]
 8014ea8:	6ae8      	ldr	r0, [r5, #44]	@ 0x2c
 8014eaa:	b120      	cbz	r0, 8014eb6 <rcl_wait_set_fini+0xfa>
 8014eac:	47c0      	blx	r8
 8014eae:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 8014eb0:	2300      	movs	r3, #0
 8014eb2:	e9c5 330a 	strd	r3, r3, [r5, #40]	@ 0x28
 8014eb6:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 8014eb8:	f8d5 804c 	ldr.w	r8, [r5, #76]	@ 0x4c
 8014ebc:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 8014ebe:	2700      	movs	r7, #0
 8014ec0:	62e7      	str	r7, [r4, #44]	@ 0x2c
 8014ec2:	632f      	str	r7, [r5, #48]	@ 0x30
 8014ec4:	b120      	cbz	r0, 8014ed0 <rcl_wait_set_fini+0x114>
 8014ec6:	9101      	str	r1, [sp, #4]
 8014ec8:	47c0      	blx	r8
 8014eca:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 8014ecc:	9901      	ldr	r1, [sp, #4]
 8014ece:	62a7      	str	r7, [r4, #40]	@ 0x28
 8014ed0:	6ba8      	ldr	r0, [r5, #56]	@ 0x38
 8014ed2:	b120      	cbz	r0, 8014ede <rcl_wait_set_fini+0x122>
 8014ed4:	47c0      	blx	r8
 8014ed6:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 8014ed8:	2300      	movs	r3, #0
 8014eda:	e9c5 330d 	strd	r3, r3, [r5, #52]	@ 0x34
 8014ede:	6ceb      	ldr	r3, [r5, #76]	@ 0x4c
 8014ee0:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 8014ee2:	4628      	mov	r0, r5
 8014ee4:	4798      	blx	r3
 8014ee6:	2300      	movs	r3, #0
 8014ee8:	6323      	str	r3, [r4, #48]	@ 0x30
 8014eea:	4630      	mov	r0, r6
 8014eec:	b002      	add	sp, #8
 8014eee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014ef2:	260b      	movs	r6, #11
 8014ef4:	4630      	mov	r0, r6
 8014ef6:	b002      	add	sp, #8
 8014ef8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08014efc <rcl_wait_set_add_subscription>:
 8014efc:	b318      	cbz	r0, 8014f46 <rcl_wait_set_add_subscription+0x4a>
 8014efe:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8014f00:	b570      	push	{r4, r5, r6, lr}
 8014f02:	4604      	mov	r4, r0
 8014f04:	b30b      	cbz	r3, 8014f4a <rcl_wait_set_add_subscription+0x4e>
 8014f06:	b319      	cbz	r1, 8014f50 <rcl_wait_set_add_subscription+0x54>
 8014f08:	681d      	ldr	r5, [r3, #0]
 8014f0a:	6840      	ldr	r0, [r0, #4]
 8014f0c:	4285      	cmp	r5, r0
 8014f0e:	d217      	bcs.n	8014f40 <rcl_wait_set_add_subscription+0x44>
 8014f10:	6820      	ldr	r0, [r4, #0]
 8014f12:	1c6e      	adds	r6, r5, #1
 8014f14:	601e      	str	r6, [r3, #0]
 8014f16:	f840 1025 	str.w	r1, [r0, r5, lsl #2]
 8014f1a:	b102      	cbz	r2, 8014f1e <rcl_wait_set_add_subscription+0x22>
 8014f1c:	6015      	str	r5, [r2, #0]
 8014f1e:	4608      	mov	r0, r1
 8014f20:	f7ff fb08 	bl	8014534 <rcl_subscription_get_rmw_handle>
 8014f24:	b150      	cbz	r0, 8014f3c <rcl_wait_set_add_subscription+0x40>
 8014f26:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8014f28:	6842      	ldr	r2, [r0, #4]
 8014f2a:	689b      	ldr	r3, [r3, #8]
 8014f2c:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8014f30:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 8014f32:	6853      	ldr	r3, [r2, #4]
 8014f34:	3301      	adds	r3, #1
 8014f36:	2000      	movs	r0, #0
 8014f38:	6053      	str	r3, [r2, #4]
 8014f3a:	bd70      	pop	{r4, r5, r6, pc}
 8014f3c:	2001      	movs	r0, #1
 8014f3e:	bd70      	pop	{r4, r5, r6, pc}
 8014f40:	f240 3086 	movw	r0, #902	@ 0x386
 8014f44:	bd70      	pop	{r4, r5, r6, pc}
 8014f46:	200b      	movs	r0, #11
 8014f48:	4770      	bx	lr
 8014f4a:	f44f 7061 	mov.w	r0, #900	@ 0x384
 8014f4e:	bd70      	pop	{r4, r5, r6, pc}
 8014f50:	200b      	movs	r0, #11
 8014f52:	bd70      	pop	{r4, r5, r6, pc}

08014f54 <rcl_wait_set_clear>:
 8014f54:	2800      	cmp	r0, #0
 8014f56:	d073      	beq.n	8015040 <rcl_wait_set_clear+0xec>
 8014f58:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8014f5a:	b510      	push	{r4, lr}
 8014f5c:	4604      	mov	r4, r0
 8014f5e:	2b00      	cmp	r3, #0
 8014f60:	d070      	beq.n	8015044 <rcl_wait_set_clear+0xf0>
 8014f62:	6800      	ldr	r0, [r0, #0]
 8014f64:	b138      	cbz	r0, 8014f76 <rcl_wait_set_clear+0x22>
 8014f66:	6862      	ldr	r2, [r4, #4]
 8014f68:	2100      	movs	r1, #0
 8014f6a:	0092      	lsls	r2, r2, #2
 8014f6c:	f006 fabe 	bl	801b4ec <memset>
 8014f70:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8014f72:	2200      	movs	r2, #0
 8014f74:	601a      	str	r2, [r3, #0]
 8014f76:	68a0      	ldr	r0, [r4, #8]
 8014f78:	b138      	cbz	r0, 8014f8a <rcl_wait_set_clear+0x36>
 8014f7a:	68e2      	ldr	r2, [r4, #12]
 8014f7c:	2100      	movs	r1, #0
 8014f7e:	0092      	lsls	r2, r2, #2
 8014f80:	f006 fab4 	bl	801b4ec <memset>
 8014f84:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8014f86:	2200      	movs	r2, #0
 8014f88:	60da      	str	r2, [r3, #12]
 8014f8a:	69a0      	ldr	r0, [r4, #24]
 8014f8c:	b138      	cbz	r0, 8014f9e <rcl_wait_set_clear+0x4a>
 8014f8e:	69e2      	ldr	r2, [r4, #28]
 8014f90:	2100      	movs	r1, #0
 8014f92:	0092      	lsls	r2, r2, #2
 8014f94:	f006 faaa 	bl	801b4ec <memset>
 8014f98:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8014f9a:	2200      	movs	r2, #0
 8014f9c:	619a      	str	r2, [r3, #24]
 8014f9e:	6a20      	ldr	r0, [r4, #32]
 8014fa0:	b138      	cbz	r0, 8014fb2 <rcl_wait_set_clear+0x5e>
 8014fa2:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 8014fa4:	2100      	movs	r1, #0
 8014fa6:	0092      	lsls	r2, r2, #2
 8014fa8:	f006 faa0 	bl	801b4ec <memset>
 8014fac:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8014fae:	2200      	movs	r2, #0
 8014fb0:	625a      	str	r2, [r3, #36]	@ 0x24
 8014fb2:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 8014fb4:	b138      	cbz	r0, 8014fc6 <rcl_wait_set_clear+0x72>
 8014fb6:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 8014fb8:	2100      	movs	r1, #0
 8014fba:	0092      	lsls	r2, r2, #2
 8014fbc:	f006 fa96 	bl	801b4ec <memset>
 8014fc0:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8014fc2:	2200      	movs	r2, #0
 8014fc4:	631a      	str	r2, [r3, #48]	@ 0x30
 8014fc6:	6920      	ldr	r0, [r4, #16]
 8014fc8:	b138      	cbz	r0, 8014fda <rcl_wait_set_clear+0x86>
 8014fca:	6962      	ldr	r2, [r4, #20]
 8014fcc:	2100      	movs	r1, #0
 8014fce:	0092      	lsls	r2, r2, #2
 8014fd0:	f006 fa8c 	bl	801b4ec <memset>
 8014fd4:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8014fd6:	2200      	movs	r2, #0
 8014fd8:	641a      	str	r2, [r3, #64]	@ 0x40
 8014fda:	6898      	ldr	r0, [r3, #8]
 8014fdc:	b138      	cbz	r0, 8014fee <rcl_wait_set_clear+0x9a>
 8014fde:	685a      	ldr	r2, [r3, #4]
 8014fe0:	2100      	movs	r1, #0
 8014fe2:	0092      	lsls	r2, r2, #2
 8014fe4:	f006 fa82 	bl	801b4ec <memset>
 8014fe8:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8014fea:	2200      	movs	r2, #0
 8014fec:	605a      	str	r2, [r3, #4]
 8014fee:	6958      	ldr	r0, [r3, #20]
 8014ff0:	b138      	cbz	r0, 8015002 <rcl_wait_set_clear+0xae>
 8014ff2:	691a      	ldr	r2, [r3, #16]
 8014ff4:	2100      	movs	r1, #0
 8014ff6:	0092      	lsls	r2, r2, #2
 8014ff8:	f006 fa78 	bl	801b4ec <memset>
 8014ffc:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8014ffe:	2200      	movs	r2, #0
 8015000:	611a      	str	r2, [r3, #16]
 8015002:	6a18      	ldr	r0, [r3, #32]
 8015004:	b138      	cbz	r0, 8015016 <rcl_wait_set_clear+0xc2>
 8015006:	69da      	ldr	r2, [r3, #28]
 8015008:	2100      	movs	r1, #0
 801500a:	0092      	lsls	r2, r2, #2
 801500c:	f006 fa6e 	bl	801b4ec <memset>
 8015010:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8015012:	2200      	movs	r2, #0
 8015014:	61da      	str	r2, [r3, #28]
 8015016:	6ad8      	ldr	r0, [r3, #44]	@ 0x2c
 8015018:	b138      	cbz	r0, 801502a <rcl_wait_set_clear+0xd6>
 801501a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 801501c:	2100      	movs	r1, #0
 801501e:	0092      	lsls	r2, r2, #2
 8015020:	f006 fa64 	bl	801b4ec <memset>
 8015024:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8015026:	2200      	movs	r2, #0
 8015028:	629a      	str	r2, [r3, #40]	@ 0x28
 801502a:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 801502c:	b138      	cbz	r0, 801503e <rcl_wait_set_clear+0xea>
 801502e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8015030:	2100      	movs	r1, #0
 8015032:	0092      	lsls	r2, r2, #2
 8015034:	f006 fa5a 	bl	801b4ec <memset>
 8015038:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801503a:	2000      	movs	r0, #0
 801503c:	6358      	str	r0, [r3, #52]	@ 0x34
 801503e:	bd10      	pop	{r4, pc}
 8015040:	200b      	movs	r0, #11
 8015042:	4770      	bx	lr
 8015044:	f44f 7061 	mov.w	r0, #900	@ 0x384
 8015048:	bd10      	pop	{r4, pc}
 801504a:	bf00      	nop

0801504c <rcl_wait_set_resize>:
 801504c:	2800      	cmp	r0, #0
 801504e:	f000 8185 	beq.w	801535c <rcl_wait_set_resize+0x310>
 8015052:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015056:	6b04      	ldr	r4, [r0, #48]	@ 0x30
 8015058:	b083      	sub	sp, #12
 801505a:	4605      	mov	r5, r0
 801505c:	2c00      	cmp	r4, #0
 801505e:	f000 817f 	beq.w	8015360 <rcl_wait_set_resize+0x314>
 8015062:	f04f 0900 	mov.w	r9, #0
 8015066:	f8d4 a058 	ldr.w	sl, [r4, #88]	@ 0x58
 801506a:	461f      	mov	r7, r3
 801506c:	4688      	mov	r8, r1
 801506e:	e9d4 b313 	ldrd	fp, r3, [r4, #76]	@ 0x4c
 8015072:	4616      	mov	r6, r2
 8015074:	f8c0 9004 	str.w	r9, [r0, #4]
 8015078:	f8c4 9000 	str.w	r9, [r4]
 801507c:	2900      	cmp	r1, #0
 801507e:	f000 80bd 	beq.w	80151fc <rcl_wait_set_resize+0x1b0>
 8015082:	008c      	lsls	r4, r1, #2
 8015084:	6800      	ldr	r0, [r0, #0]
 8015086:	9301      	str	r3, [sp, #4]
 8015088:	4652      	mov	r2, sl
 801508a:	4621      	mov	r1, r4
 801508c:	4798      	blx	r3
 801508e:	9b01      	ldr	r3, [sp, #4]
 8015090:	6028      	str	r0, [r5, #0]
 8015092:	2800      	cmp	r0, #0
 8015094:	f000 80cb 	beq.w	801522e <rcl_wait_set_resize+0x1e2>
 8015098:	4622      	mov	r2, r4
 801509a:	4649      	mov	r1, r9
 801509c:	9301      	str	r3, [sp, #4]
 801509e:	f006 fa25 	bl	801b4ec <memset>
 80150a2:	f8c5 8004 	str.w	r8, [r5, #4]
 80150a6:	f8d5 8030 	ldr.w	r8, [r5, #48]	@ 0x30
 80150aa:	9b01      	ldr	r3, [sp, #4]
 80150ac:	f8d8 0008 	ldr.w	r0, [r8, #8]
 80150b0:	f8c8 9004 	str.w	r9, [r8, #4]
 80150b4:	4652      	mov	r2, sl
 80150b6:	4621      	mov	r1, r4
 80150b8:	4798      	blx	r3
 80150ba:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 80150bc:	f8c8 0008 	str.w	r0, [r8, #8]
 80150c0:	689b      	ldr	r3, [r3, #8]
 80150c2:	2b00      	cmp	r3, #0
 80150c4:	f000 80ac 	beq.w	8015220 <rcl_wait_set_resize+0x1d4>
 80150c8:	4622      	mov	r2, r4
 80150ca:	4649      	mov	r1, r9
 80150cc:	4618      	mov	r0, r3
 80150ce:	f006 fa0d 	bl	801b4ec <memset>
 80150d2:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 80150d4:	f8d4 9058 	ldr.w	r9, [r4, #88]	@ 0x58
 80150d8:	f04f 0800 	mov.w	r8, #0
 80150dc:	e9d4 2313 	ldrd	r2, r3, [r4, #76]	@ 0x4c
 80150e0:	f8c5 800c 	str.w	r8, [r5, #12]
 80150e4:	f8c4 800c 	str.w	r8, [r4, #12]
 80150e8:	2e00      	cmp	r6, #0
 80150ea:	f040 80a4 	bne.w	8015236 <rcl_wait_set_resize+0x1ea>
 80150ee:	68a8      	ldr	r0, [r5, #8]
 80150f0:	b128      	cbz	r0, 80150fe <rcl_wait_set_resize+0xb2>
 80150f2:	4649      	mov	r1, r9
 80150f4:	4790      	blx	r2
 80150f6:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 80150f8:	60ae      	str	r6, [r5, #8]
 80150fa:	f8d4 9058 	ldr.w	r9, [r4, #88]	@ 0x58
 80150fe:	f04f 0800 	mov.w	r8, #0
 8015102:	19f6      	adds	r6, r6, r7
 8015104:	f8c4 8010 	str.w	r8, [r4, #16]
 8015108:	f040 80ac 	bne.w	8015264 <rcl_wait_set_resize+0x218>
 801510c:	6960      	ldr	r0, [r4, #20]
 801510e:	b130      	cbz	r0, 801511e <rcl_wait_set_resize+0xd2>
 8015110:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 8015112:	4649      	mov	r1, r9
 8015114:	4798      	blx	r3
 8015116:	6166      	str	r6, [r4, #20]
 8015118:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 801511a:	f8d4 9058 	ldr.w	r9, [r4, #88]	@ 0x58
 801511e:	2600      	movs	r6, #0
 8015120:	e9d4 a813 	ldrd	sl, r8, [r4, #76]	@ 0x4c
 8015124:	616e      	str	r6, [r5, #20]
 8015126:	6426      	str	r6, [r4, #64]	@ 0x40
 8015128:	2f00      	cmp	r7, #0
 801512a:	f040 80ad 	bne.w	8015288 <rcl_wait_set_resize+0x23c>
 801512e:	6928      	ldr	r0, [r5, #16]
 8015130:	b138      	cbz	r0, 8015142 <rcl_wait_set_resize+0xf6>
 8015132:	4649      	mov	r1, r9
 8015134:	47d0      	blx	sl
 8015136:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8015138:	612f      	str	r7, [r5, #16]
 801513a:	e9d4 a813 	ldrd	sl, r8, [r4, #76]	@ 0x4c
 801513e:	f8d4 9058 	ldr.w	r9, [r4, #88]	@ 0x58
 8015142:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8015144:	2600      	movs	r6, #0
 8015146:	61ee      	str	r6, [r5, #28]
 8015148:	61a6      	str	r6, [r4, #24]
 801514a:	2b00      	cmp	r3, #0
 801514c:	f040 80af 	bne.w	80152ae <rcl_wait_set_resize+0x262>
 8015150:	69a8      	ldr	r0, [r5, #24]
 8015152:	b120      	cbz	r0, 801515e <rcl_wait_set_resize+0x112>
 8015154:	4649      	mov	r1, r9
 8015156:	47d0      	blx	sl
 8015158:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801515a:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 801515c:	61ab      	str	r3, [r5, #24]
 801515e:	6a20      	ldr	r0, [r4, #32]
 8015160:	b128      	cbz	r0, 801516e <rcl_wait_set_resize+0x122>
 8015162:	4649      	mov	r1, r9
 8015164:	47d0      	blx	sl
 8015166:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8015168:	2300      	movs	r3, #0
 801516a:	e9c4 3307 	strd	r3, r3, [r4, #28]
 801516e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8015170:	6da7      	ldr	r7, [r4, #88]	@ 0x58
 8015172:	2600      	movs	r6, #0
 8015174:	e9d4 8913 	ldrd	r8, r9, [r4, #76]	@ 0x4c
 8015178:	626e      	str	r6, [r5, #36]	@ 0x24
 801517a:	6266      	str	r6, [r4, #36]	@ 0x24
 801517c:	2b00      	cmp	r3, #0
 801517e:	f000 80b6 	beq.w	80152ee <rcl_wait_set_resize+0x2a2>
 8015182:	ea4f 0a83 	mov.w	sl, r3, lsl #2
 8015186:	6a28      	ldr	r0, [r5, #32]
 8015188:	463a      	mov	r2, r7
 801518a:	4651      	mov	r1, sl
 801518c:	47c8      	blx	r9
 801518e:	6228      	str	r0, [r5, #32]
 8015190:	2800      	cmp	r0, #0
 8015192:	d04c      	beq.n	801522e <rcl_wait_set_resize+0x1e2>
 8015194:	4652      	mov	r2, sl
 8015196:	4631      	mov	r1, r6
 8015198:	f006 f9a8 	bl	801b4ec <memset>
 801519c:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 801519e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80151a0:	626b      	str	r3, [r5, #36]	@ 0x24
 80151a2:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
 80151a4:	62a6      	str	r6, [r4, #40]	@ 0x28
 80151a6:	463a      	mov	r2, r7
 80151a8:	4651      	mov	r1, sl
 80151aa:	47c8      	blx	r9
 80151ac:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 80151ae:	62e0      	str	r0, [r4, #44]	@ 0x2c
 80151b0:	6adc      	ldr	r4, [r3, #44]	@ 0x2c
 80151b2:	2c00      	cmp	r4, #0
 80151b4:	f000 80f0 	beq.w	8015398 <rcl_wait_set_resize+0x34c>
 80151b8:	4620      	mov	r0, r4
 80151ba:	4652      	mov	r2, sl
 80151bc:	4631      	mov	r1, r6
 80151be:	f006 f995 	bl	801b4ec <memset>
 80151c2:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 80151c4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80151c6:	6da7      	ldr	r7, [r4, #88]	@ 0x58
 80151c8:	2600      	movs	r6, #0
 80151ca:	e9d4 8913 	ldrd	r8, r9, [r4, #76]	@ 0x4c
 80151ce:	62ee      	str	r6, [r5, #44]	@ 0x2c
 80151d0:	6326      	str	r6, [r4, #48]	@ 0x30
 80151d2:	2b00      	cmp	r3, #0
 80151d4:	f040 809d 	bne.w	8015312 <rcl_wait_set_resize+0x2c6>
 80151d8:	6aa8      	ldr	r0, [r5, #40]	@ 0x28
 80151da:	b120      	cbz	r0, 80151e6 <rcl_wait_set_resize+0x19a>
 80151dc:	4639      	mov	r1, r7
 80151de:	47c0      	blx	r8
 80151e0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80151e2:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 80151e4:	62ab      	str	r3, [r5, #40]	@ 0x28
 80151e6:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
 80151e8:	b310      	cbz	r0, 8015230 <rcl_wait_set_resize+0x1e4>
 80151ea:	4639      	mov	r1, r7
 80151ec:	47c0      	blx	r8
 80151ee:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 80151f0:	2000      	movs	r0, #0
 80151f2:	e9c3 000d 	strd	r0, r0, [r3, #52]	@ 0x34
 80151f6:	b003      	add	sp, #12
 80151f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80151fc:	6800      	ldr	r0, [r0, #0]
 80151fe:	b120      	cbz	r0, 801520a <rcl_wait_set_resize+0x1be>
 8015200:	4651      	mov	r1, sl
 8015202:	47d8      	blx	fp
 8015204:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8015206:	f8c5 8000 	str.w	r8, [r5]
 801520a:	68a0      	ldr	r0, [r4, #8]
 801520c:	2800      	cmp	r0, #0
 801520e:	f43f af61 	beq.w	80150d4 <rcl_wait_set_resize+0x88>
 8015212:	4651      	mov	r1, sl
 8015214:	47d8      	blx	fp
 8015216:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8015218:	2300      	movs	r3, #0
 801521a:	e9c4 3301 	strd	r3, r3, [r4, #4]
 801521e:	e759      	b.n	80150d4 <rcl_wait_set_resize+0x88>
 8015220:	6828      	ldr	r0, [r5, #0]
 8015222:	9301      	str	r3, [sp, #4]
 8015224:	4651      	mov	r1, sl
 8015226:	47d8      	blx	fp
 8015228:	9b01      	ldr	r3, [sp, #4]
 801522a:	e9c5 3300 	strd	r3, r3, [r5]
 801522e:	200a      	movs	r0, #10
 8015230:	b003      	add	sp, #12
 8015232:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015236:	00b4      	lsls	r4, r6, #2
 8015238:	68a8      	ldr	r0, [r5, #8]
 801523a:	464a      	mov	r2, r9
 801523c:	4621      	mov	r1, r4
 801523e:	4798      	blx	r3
 8015240:	60a8      	str	r0, [r5, #8]
 8015242:	2800      	cmp	r0, #0
 8015244:	d0f3      	beq.n	801522e <rcl_wait_set_resize+0x1e2>
 8015246:	4622      	mov	r2, r4
 8015248:	4641      	mov	r1, r8
 801524a:	f006 f94f 	bl	801b4ec <memset>
 801524e:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8015250:	60ee      	str	r6, [r5, #12]
 8015252:	f04f 0800 	mov.w	r8, #0
 8015256:	19f6      	adds	r6, r6, r7
 8015258:	f8d4 9058 	ldr.w	r9, [r4, #88]	@ 0x58
 801525c:	f8c4 8010 	str.w	r8, [r4, #16]
 8015260:	f43f af54 	beq.w	801510c <rcl_wait_set_resize+0xc0>
 8015264:	00b6      	lsls	r6, r6, #2
 8015266:	464a      	mov	r2, r9
 8015268:	6d23      	ldr	r3, [r4, #80]	@ 0x50
 801526a:	6960      	ldr	r0, [r4, #20]
 801526c:	4631      	mov	r1, r6
 801526e:	4798      	blx	r3
 8015270:	4681      	mov	r9, r0
 8015272:	6160      	str	r0, [r4, #20]
 8015274:	2800      	cmp	r0, #0
 8015276:	d076      	beq.n	8015366 <rcl_wait_set_resize+0x31a>
 8015278:	4632      	mov	r2, r6
 801527a:	4641      	mov	r1, r8
 801527c:	f006 f936 	bl	801b4ec <memset>
 8015280:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8015282:	f8d4 9058 	ldr.w	r9, [r4, #88]	@ 0x58
 8015286:	e74a      	b.n	801511e <rcl_wait_set_resize+0xd2>
 8015288:	00bc      	lsls	r4, r7, #2
 801528a:	6928      	ldr	r0, [r5, #16]
 801528c:	464a      	mov	r2, r9
 801528e:	4621      	mov	r1, r4
 8015290:	47c0      	blx	r8
 8015292:	6128      	str	r0, [r5, #16]
 8015294:	2800      	cmp	r0, #0
 8015296:	d0ca      	beq.n	801522e <rcl_wait_set_resize+0x1e2>
 8015298:	4622      	mov	r2, r4
 801529a:	4631      	mov	r1, r6
 801529c:	f006 f926 	bl	801b4ec <memset>
 80152a0:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 80152a2:	616f      	str	r7, [r5, #20]
 80152a4:	e9d4 a813 	ldrd	sl, r8, [r4, #76]	@ 0x4c
 80152a8:	f8d4 9058 	ldr.w	r9, [r4, #88]	@ 0x58
 80152ac:	e749      	b.n	8015142 <rcl_wait_set_resize+0xf6>
 80152ae:	009c      	lsls	r4, r3, #2
 80152b0:	69a8      	ldr	r0, [r5, #24]
 80152b2:	464a      	mov	r2, r9
 80152b4:	4621      	mov	r1, r4
 80152b6:	47c0      	blx	r8
 80152b8:	61a8      	str	r0, [r5, #24]
 80152ba:	2800      	cmp	r0, #0
 80152bc:	d0b7      	beq.n	801522e <rcl_wait_set_resize+0x1e2>
 80152be:	4622      	mov	r2, r4
 80152c0:	4631      	mov	r1, r6
 80152c2:	f006 f913 	bl	801b4ec <memset>
 80152c6:	6b2f      	ldr	r7, [r5, #48]	@ 0x30
 80152c8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80152ca:	61eb      	str	r3, [r5, #28]
 80152cc:	6a38      	ldr	r0, [r7, #32]
 80152ce:	61fe      	str	r6, [r7, #28]
 80152d0:	464a      	mov	r2, r9
 80152d2:	4621      	mov	r1, r4
 80152d4:	47c0      	blx	r8
 80152d6:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 80152d8:	6238      	str	r0, [r7, #32]
 80152da:	6a1f      	ldr	r7, [r3, #32]
 80152dc:	2f00      	cmp	r7, #0
 80152de:	d054      	beq.n	801538a <rcl_wait_set_resize+0x33e>
 80152e0:	4622      	mov	r2, r4
 80152e2:	4631      	mov	r1, r6
 80152e4:	4638      	mov	r0, r7
 80152e6:	f006 f901 	bl	801b4ec <memset>
 80152ea:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 80152ec:	e73f      	b.n	801516e <rcl_wait_set_resize+0x122>
 80152ee:	6a28      	ldr	r0, [r5, #32]
 80152f0:	b120      	cbz	r0, 80152fc <rcl_wait_set_resize+0x2b0>
 80152f2:	4639      	mov	r1, r7
 80152f4:	47c0      	blx	r8
 80152f6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80152f8:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 80152fa:	622b      	str	r3, [r5, #32]
 80152fc:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
 80152fe:	2800      	cmp	r0, #0
 8015300:	f43f af60 	beq.w	80151c4 <rcl_wait_set_resize+0x178>
 8015304:	4639      	mov	r1, r7
 8015306:	47c0      	blx	r8
 8015308:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 801530a:	2300      	movs	r3, #0
 801530c:	e9c4 330a 	strd	r3, r3, [r4, #40]	@ 0x28
 8015310:	e758      	b.n	80151c4 <rcl_wait_set_resize+0x178>
 8015312:	009c      	lsls	r4, r3, #2
 8015314:	6aa8      	ldr	r0, [r5, #40]	@ 0x28
 8015316:	463a      	mov	r2, r7
 8015318:	4621      	mov	r1, r4
 801531a:	47c8      	blx	r9
 801531c:	62a8      	str	r0, [r5, #40]	@ 0x28
 801531e:	2800      	cmp	r0, #0
 8015320:	d085      	beq.n	801522e <rcl_wait_set_resize+0x1e2>
 8015322:	4622      	mov	r2, r4
 8015324:	4631      	mov	r1, r6
 8015326:	f006 f8e1 	bl	801b4ec <memset>
 801532a:	f8d5 a030 	ldr.w	sl, [r5, #48]	@ 0x30
 801532e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8015330:	62eb      	str	r3, [r5, #44]	@ 0x2c
 8015332:	f8da 0038 	ldr.w	r0, [sl, #56]	@ 0x38
 8015336:	f8ca 6034 	str.w	r6, [sl, #52]	@ 0x34
 801533a:	463a      	mov	r2, r7
 801533c:	4621      	mov	r1, r4
 801533e:	47c8      	blx	r9
 8015340:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8015342:	f8ca 0038 	str.w	r0, [sl, #56]	@ 0x38
 8015346:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8015348:	b36b      	cbz	r3, 80153a6 <rcl_wait_set_resize+0x35a>
 801534a:	4622      	mov	r2, r4
 801534c:	4631      	mov	r1, r6
 801534e:	4618      	mov	r0, r3
 8015350:	f006 f8cc 	bl	801b4ec <memset>
 8015354:	4630      	mov	r0, r6
 8015356:	b003      	add	sp, #12
 8015358:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801535c:	200b      	movs	r0, #11
 801535e:	4770      	bx	lr
 8015360:	f44f 7061 	mov.w	r0, #900	@ 0x384
 8015364:	e764      	b.n	8015230 <rcl_wait_set_resize+0x1e4>
 8015366:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8015368:	68a8      	ldr	r0, [r5, #8]
 801536a:	6d99      	ldr	r1, [r3, #88]	@ 0x58
 801536c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801536e:	4798      	blx	r3
 8015370:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8015372:	6928      	ldr	r0, [r5, #16]
 8015374:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8015376:	6d99      	ldr	r1, [r3, #88]	@ 0x58
 8015378:	f8c5 900c 	str.w	r9, [r5, #12]
 801537c:	f8c5 9008 	str.w	r9, [r5, #8]
 8015380:	4790      	blx	r2
 8015382:	e9c5 9904 	strd	r9, r9, [r5, #16]
 8015386:	200a      	movs	r0, #10
 8015388:	e752      	b.n	8015230 <rcl_wait_set_resize+0x1e4>
 801538a:	69a8      	ldr	r0, [r5, #24]
 801538c:	4649      	mov	r1, r9
 801538e:	47d0      	blx	sl
 8015390:	e9c5 7706 	strd	r7, r7, [r5, #24]
 8015394:	200a      	movs	r0, #10
 8015396:	e74b      	b.n	8015230 <rcl_wait_set_resize+0x1e4>
 8015398:	6a28      	ldr	r0, [r5, #32]
 801539a:	4639      	mov	r1, r7
 801539c:	47c0      	blx	r8
 801539e:	e9c5 4408 	strd	r4, r4, [r5, #32]
 80153a2:	200a      	movs	r0, #10
 80153a4:	e744      	b.n	8015230 <rcl_wait_set_resize+0x1e4>
 80153a6:	6aa8      	ldr	r0, [r5, #40]	@ 0x28
 80153a8:	9301      	str	r3, [sp, #4]
 80153aa:	4639      	mov	r1, r7
 80153ac:	47c0      	blx	r8
 80153ae:	9b01      	ldr	r3, [sp, #4]
 80153b0:	200a      	movs	r0, #10
 80153b2:	e9c5 330a 	strd	r3, r3, [r5, #40]	@ 0x28
 80153b6:	e73b      	b.n	8015230 <rcl_wait_set_resize+0x1e4>

080153b8 <rcl_wait_set_init>:
 80153b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80153bc:	b084      	sub	sp, #16
 80153be:	4604      	mov	r4, r0
 80153c0:	a810      	add	r0, sp, #64	@ 0x40
 80153c2:	f8dd a03c 	ldr.w	sl, [sp, #60]	@ 0x3c
 80153c6:	460f      	mov	r7, r1
 80153c8:	4690      	mov	r8, r2
 80153ca:	4699      	mov	r9, r3
 80153cc:	f7f8 fffc 	bl	800e3c8 <rcutils_allocator_is_valid>
 80153d0:	2800      	cmp	r0, #0
 80153d2:	d06b      	beq.n	80154ac <rcl_wait_set_init+0xf4>
 80153d4:	2c00      	cmp	r4, #0
 80153d6:	d069      	beq.n	80154ac <rcl_wait_set_init+0xf4>
 80153d8:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 80153da:	b125      	cbz	r5, 80153e6 <rcl_wait_set_init+0x2e>
 80153dc:	2564      	movs	r5, #100	@ 0x64
 80153de:	4628      	mov	r0, r5
 80153e0:	b004      	add	sp, #16
 80153e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80153e6:	f1ba 0f00 	cmp.w	sl, #0
 80153ea:	d05f      	beq.n	80154ac <rcl_wait_set_init+0xf4>
 80153ec:	4650      	mov	r0, sl
 80153ee:	f7fe f933 	bl	8013658 <rcl_context_is_valid>
 80153f2:	2800      	cmp	r0, #0
 80153f4:	d067      	beq.n	80154c6 <rcl_wait_set_init+0x10e>
 80153f6:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80153f8:	9914      	ldr	r1, [sp, #80]	@ 0x50
 80153fa:	205c      	movs	r0, #92	@ 0x5c
 80153fc:	4798      	blx	r3
 80153fe:	6320      	str	r0, [r4, #48]	@ 0x30
 8015400:	2800      	cmp	r0, #0
 8015402:	d062      	beq.n	80154ca <rcl_wait_set_init+0x112>
 8015404:	4629      	mov	r1, r5
 8015406:	225c      	movs	r2, #92	@ 0x5c
 8015408:	f006 f870 	bl	801b4ec <memset>
 801540c:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	@ 0x34
 8015410:	eb03 0e02 	add.w	lr, r3, r2
 8015414:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8015416:	6b26      	ldr	r6, [r4, #48]	@ 0x30
 8015418:	f10d 0c40 	add.w	ip, sp, #64	@ 0x40
 801541c:	449e      	add	lr, r3
 801541e:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8015422:	e9c6 5501 	strd	r5, r5, [r6, #4]
 8015426:	e9c6 5504 	strd	r5, r5, [r6, #16]
 801542a:	e9c6 5507 	strd	r5, r5, [r6, #28]
 801542e:	e9c6 550a 	strd	r5, r5, [r6, #40]	@ 0x28
 8015432:	e9c6 550d 	strd	r5, r5, [r6, #52]	@ 0x34
 8015436:	f106 0548 	add.w	r5, r6, #72	@ 0x48
 801543a:	f8c6 a044 	str.w	sl, [r6, #68]	@ 0x44
 801543e:	f8da a000 	ldr.w	sl, [sl]
 8015442:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8015444:	44c6      	add	lr, r8
 8015446:	f8dc 3000 	ldr.w	r3, [ip]
 801544a:	602b      	str	r3, [r5, #0]
 801544c:	eb0e 0147 	add.w	r1, lr, r7, lsl #1
 8015450:	f10a 0028 	add.w	r0, sl, #40	@ 0x28
 8015454:	f002 fe6c 	bl	8018130 <rmw_create_wait_set>
 8015458:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801545a:	63f0      	str	r0, [r6, #60]	@ 0x3c
 801545c:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 801545e:	b350      	cbz	r0, 80154b6 <rcl_wait_set_init+0xfe>
 8015460:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8015462:	9302      	str	r3, [sp, #8]
 8015464:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8015466:	9301      	str	r3, [sp, #4]
 8015468:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801546a:	9300      	str	r3, [sp, #0]
 801546c:	4642      	mov	r2, r8
 801546e:	464b      	mov	r3, r9
 8015470:	4639      	mov	r1, r7
 8015472:	4620      	mov	r0, r4
 8015474:	f7ff fdea 	bl	801504c <rcl_wait_set_resize>
 8015478:	4605      	mov	r5, r0
 801547a:	2800      	cmp	r0, #0
 801547c:	d0af      	beq.n	80153de <rcl_wait_set_init+0x26>
 801547e:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8015480:	bb2b      	cbnz	r3, 80154ce <rcl_wait_set_init+0x116>
 8015482:	2600      	movs	r6, #0
 8015484:	e9cd 6601 	strd	r6, r6, [sp, #4]
 8015488:	9600      	str	r6, [sp, #0]
 801548a:	4633      	mov	r3, r6
 801548c:	4632      	mov	r2, r6
 801548e:	4631      	mov	r1, r6
 8015490:	4620      	mov	r0, r4
 8015492:	f7ff fddb 	bl	801504c <rcl_wait_set_resize>
 8015496:	6b20      	ldr	r0, [r4, #48]	@ 0x30
 8015498:	2800      	cmp	r0, #0
 801549a:	d0a0      	beq.n	80153de <rcl_wait_set_init+0x26>
 801549c:	6cc3      	ldr	r3, [r0, #76]	@ 0x4c
 801549e:	6d81      	ldr	r1, [r0, #88]	@ 0x58
 80154a0:	4798      	blx	r3
 80154a2:	4628      	mov	r0, r5
 80154a4:	6326      	str	r6, [r4, #48]	@ 0x30
 80154a6:	b004      	add	sp, #16
 80154a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80154ac:	250b      	movs	r5, #11
 80154ae:	4628      	mov	r0, r5
 80154b0:	b004      	add	sp, #16
 80154b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80154b6:	2501      	movs	r5, #1
 80154b8:	f002 fe44 	bl	8018144 <rmw_destroy_wait_set>
 80154bc:	2800      	cmp	r0, #0
 80154be:	bf18      	it	ne
 80154c0:	f44f 7561 	movne.w	r5, #900	@ 0x384
 80154c4:	e7dd      	b.n	8015482 <rcl_wait_set_init+0xca>
 80154c6:	2565      	movs	r5, #101	@ 0x65
 80154c8:	e789      	b.n	80153de <rcl_wait_set_init+0x26>
 80154ca:	250a      	movs	r5, #10
 80154cc:	e787      	b.n	80153de <rcl_wait_set_init+0x26>
 80154ce:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 80154d0:	e7f2      	b.n	80154b8 <rcl_wait_set_init+0x100>
 80154d2:	bf00      	nop

080154d4 <rcl_wait_set_add_guard_condition>:
 80154d4:	b318      	cbz	r0, 801551e <rcl_wait_set_add_guard_condition+0x4a>
 80154d6:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 80154d8:	b570      	push	{r4, r5, r6, lr}
 80154da:	4604      	mov	r4, r0
 80154dc:	b30b      	cbz	r3, 8015522 <rcl_wait_set_add_guard_condition+0x4e>
 80154de:	b319      	cbz	r1, 8015528 <rcl_wait_set_add_guard_condition+0x54>
 80154e0:	68dd      	ldr	r5, [r3, #12]
 80154e2:	68c0      	ldr	r0, [r0, #12]
 80154e4:	4285      	cmp	r5, r0
 80154e6:	d217      	bcs.n	8015518 <rcl_wait_set_add_guard_condition+0x44>
 80154e8:	68a0      	ldr	r0, [r4, #8]
 80154ea:	1c6e      	adds	r6, r5, #1
 80154ec:	60de      	str	r6, [r3, #12]
 80154ee:	f840 1025 	str.w	r1, [r0, r5, lsl #2]
 80154f2:	b102      	cbz	r2, 80154f6 <rcl_wait_set_add_guard_condition+0x22>
 80154f4:	6015      	str	r5, [r2, #0]
 80154f6:	4608      	mov	r0, r1
 80154f8:	f005 f890 	bl	801a61c <rcl_guard_condition_get_rmw_handle>
 80154fc:	b150      	cbz	r0, 8015514 <rcl_wait_set_add_guard_condition+0x40>
 80154fe:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8015500:	6842      	ldr	r2, [r0, #4]
 8015502:	695b      	ldr	r3, [r3, #20]
 8015504:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8015508:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 801550a:	6913      	ldr	r3, [r2, #16]
 801550c:	3301      	adds	r3, #1
 801550e:	2000      	movs	r0, #0
 8015510:	6113      	str	r3, [r2, #16]
 8015512:	bd70      	pop	{r4, r5, r6, pc}
 8015514:	2001      	movs	r0, #1
 8015516:	bd70      	pop	{r4, r5, r6, pc}
 8015518:	f240 3086 	movw	r0, #902	@ 0x386
 801551c:	bd70      	pop	{r4, r5, r6, pc}
 801551e:	200b      	movs	r0, #11
 8015520:	4770      	bx	lr
 8015522:	f44f 7061 	mov.w	r0, #900	@ 0x384
 8015526:	bd70      	pop	{r4, r5, r6, pc}
 8015528:	200b      	movs	r0, #11
 801552a:	bd70      	pop	{r4, r5, r6, pc}

0801552c <rcl_wait_set_add_timer>:
 801552c:	b328      	cbz	r0, 801557a <rcl_wait_set_add_timer+0x4e>
 801552e:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8015530:	b570      	push	{r4, r5, r6, lr}
 8015532:	4604      	mov	r4, r0
 8015534:	b31b      	cbz	r3, 801557e <rcl_wait_set_add_timer+0x52>
 8015536:	b329      	cbz	r1, 8015584 <rcl_wait_set_add_timer+0x58>
 8015538:	6c18      	ldr	r0, [r3, #64]	@ 0x40
 801553a:	6965      	ldr	r5, [r4, #20]
 801553c:	42a8      	cmp	r0, r5
 801553e:	d219      	bcs.n	8015574 <rcl_wait_set_add_timer+0x48>
 8015540:	6925      	ldr	r5, [r4, #16]
 8015542:	1c46      	adds	r6, r0, #1
 8015544:	641e      	str	r6, [r3, #64]	@ 0x40
 8015546:	f845 1020 	str.w	r1, [r5, r0, lsl #2]
 801554a:	b102      	cbz	r2, 801554e <rcl_wait_set_add_timer+0x22>
 801554c:	6010      	str	r0, [r2, #0]
 801554e:	4608      	mov	r0, r1
 8015550:	f7ff fba6 	bl	8014ca0 <rcl_timer_get_guard_condition>
 8015554:	b168      	cbz	r0, 8015572 <rcl_wait_set_add_timer+0x46>
 8015556:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 8015558:	68e3      	ldr	r3, [r4, #12]
 801555a:	6c15      	ldr	r5, [r2, #64]	@ 0x40
 801555c:	3b01      	subs	r3, #1
 801555e:	441d      	add	r5, r3
 8015560:	f005 f85c 	bl	801a61c <rcl_guard_condition_get_rmw_handle>
 8015564:	b180      	cbz	r0, 8015588 <rcl_wait_set_add_timer+0x5c>
 8015566:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8015568:	6842      	ldr	r2, [r0, #4]
 801556a:	695b      	ldr	r3, [r3, #20]
 801556c:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8015570:	2000      	movs	r0, #0
 8015572:	bd70      	pop	{r4, r5, r6, pc}
 8015574:	f240 3086 	movw	r0, #902	@ 0x386
 8015578:	bd70      	pop	{r4, r5, r6, pc}
 801557a:	200b      	movs	r0, #11
 801557c:	4770      	bx	lr
 801557e:	f44f 7061 	mov.w	r0, #900	@ 0x384
 8015582:	bd70      	pop	{r4, r5, r6, pc}
 8015584:	200b      	movs	r0, #11
 8015586:	bd70      	pop	{r4, r5, r6, pc}
 8015588:	2001      	movs	r0, #1
 801558a:	bd70      	pop	{r4, r5, r6, pc}

0801558c <rcl_wait_set_add_client>:
 801558c:	b318      	cbz	r0, 80155d6 <rcl_wait_set_add_client+0x4a>
 801558e:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8015590:	b570      	push	{r4, r5, r6, lr}
 8015592:	4604      	mov	r4, r0
 8015594:	b30b      	cbz	r3, 80155da <rcl_wait_set_add_client+0x4e>
 8015596:	b319      	cbz	r1, 80155e0 <rcl_wait_set_add_client+0x54>
 8015598:	699d      	ldr	r5, [r3, #24]
 801559a:	69c0      	ldr	r0, [r0, #28]
 801559c:	4285      	cmp	r5, r0
 801559e:	d217      	bcs.n	80155d0 <rcl_wait_set_add_client+0x44>
 80155a0:	69a0      	ldr	r0, [r4, #24]
 80155a2:	1c6e      	adds	r6, r5, #1
 80155a4:	619e      	str	r6, [r3, #24]
 80155a6:	f840 1025 	str.w	r1, [r0, r5, lsl #2]
 80155aa:	b102      	cbz	r2, 80155ae <rcl_wait_set_add_client+0x22>
 80155ac:	6015      	str	r5, [r2, #0]
 80155ae:	4608      	mov	r0, r1
 80155b0:	f7fd ffa6 	bl	8013500 <rcl_client_get_rmw_handle>
 80155b4:	b150      	cbz	r0, 80155cc <rcl_wait_set_add_client+0x40>
 80155b6:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80155b8:	6842      	ldr	r2, [r0, #4]
 80155ba:	6a1b      	ldr	r3, [r3, #32]
 80155bc:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80155c0:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 80155c2:	69d3      	ldr	r3, [r2, #28]
 80155c4:	3301      	adds	r3, #1
 80155c6:	2000      	movs	r0, #0
 80155c8:	61d3      	str	r3, [r2, #28]
 80155ca:	bd70      	pop	{r4, r5, r6, pc}
 80155cc:	2001      	movs	r0, #1
 80155ce:	bd70      	pop	{r4, r5, r6, pc}
 80155d0:	f240 3086 	movw	r0, #902	@ 0x386
 80155d4:	bd70      	pop	{r4, r5, r6, pc}
 80155d6:	200b      	movs	r0, #11
 80155d8:	4770      	bx	lr
 80155da:	f44f 7061 	mov.w	r0, #900	@ 0x384
 80155de:	bd70      	pop	{r4, r5, r6, pc}
 80155e0:	200b      	movs	r0, #11
 80155e2:	bd70      	pop	{r4, r5, r6, pc}

080155e4 <rcl_wait_set_add_service>:
 80155e4:	b318      	cbz	r0, 801562e <rcl_wait_set_add_service+0x4a>
 80155e6:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 80155e8:	b570      	push	{r4, r5, r6, lr}
 80155ea:	4604      	mov	r4, r0
 80155ec:	b30b      	cbz	r3, 8015632 <rcl_wait_set_add_service+0x4e>
 80155ee:	b319      	cbz	r1, 8015638 <rcl_wait_set_add_service+0x54>
 80155f0:	6a5d      	ldr	r5, [r3, #36]	@ 0x24
 80155f2:	6a40      	ldr	r0, [r0, #36]	@ 0x24
 80155f4:	4285      	cmp	r5, r0
 80155f6:	d217      	bcs.n	8015628 <rcl_wait_set_add_service+0x44>
 80155f8:	6a20      	ldr	r0, [r4, #32]
 80155fa:	1c6e      	adds	r6, r5, #1
 80155fc:	625e      	str	r6, [r3, #36]	@ 0x24
 80155fe:	f840 1025 	str.w	r1, [r0, r5, lsl #2]
 8015602:	b102      	cbz	r2, 8015606 <rcl_wait_set_add_service+0x22>
 8015604:	6015      	str	r5, [r2, #0]
 8015606:	4608      	mov	r0, r1
 8015608:	f7fe fdf8 	bl	80141fc <rcl_service_get_rmw_handle>
 801560c:	b150      	cbz	r0, 8015624 <rcl_wait_set_add_service+0x40>
 801560e:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8015610:	6842      	ldr	r2, [r0, #4]
 8015612:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8015614:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8015618:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 801561a:	6a93      	ldr	r3, [r2, #40]	@ 0x28
 801561c:	3301      	adds	r3, #1
 801561e:	2000      	movs	r0, #0
 8015620:	6293      	str	r3, [r2, #40]	@ 0x28
 8015622:	bd70      	pop	{r4, r5, r6, pc}
 8015624:	2001      	movs	r0, #1
 8015626:	bd70      	pop	{r4, r5, r6, pc}
 8015628:	f240 3086 	movw	r0, #902	@ 0x386
 801562c:	bd70      	pop	{r4, r5, r6, pc}
 801562e:	200b      	movs	r0, #11
 8015630:	4770      	bx	lr
 8015632:	f44f 7061 	mov.w	r0, #900	@ 0x384
 8015636:	bd70      	pop	{r4, r5, r6, pc}
 8015638:	200b      	movs	r0, #11
 801563a:	bd70      	pop	{r4, r5, r6, pc}
 801563c:	0000      	movs	r0, r0
	...

08015640 <rcl_wait>:
 8015640:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015644:	ed2d 8b02 	vpush	{d8}
 8015648:	b08d      	sub	sp, #52	@ 0x34
 801564a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 801564e:	2800      	cmp	r0, #0
 8015650:	f000 8143 	beq.w	80158da <rcl_wait+0x29a>
 8015654:	6b06      	ldr	r6, [r0, #48]	@ 0x30
 8015656:	4605      	mov	r5, r0
 8015658:	2e00      	cmp	r6, #0
 801565a:	f000 8112 	beq.w	8015882 <rcl_wait+0x242>
 801565e:	6843      	ldr	r3, [r0, #4]
 8015660:	b983      	cbnz	r3, 8015684 <rcl_wait+0x44>
 8015662:	68eb      	ldr	r3, [r5, #12]
 8015664:	b973      	cbnz	r3, 8015684 <rcl_wait+0x44>
 8015666:	696b      	ldr	r3, [r5, #20]
 8015668:	b963      	cbnz	r3, 8015684 <rcl_wait+0x44>
 801566a:	69eb      	ldr	r3, [r5, #28]
 801566c:	b953      	cbnz	r3, 8015684 <rcl_wait+0x44>
 801566e:	6a6b      	ldr	r3, [r5, #36]	@ 0x24
 8015670:	b943      	cbnz	r3, 8015684 <rcl_wait+0x44>
 8015672:	6aeb      	ldr	r3, [r5, #44]	@ 0x2c
 8015674:	b933      	cbnz	r3, 8015684 <rcl_wait+0x44>
 8015676:	f240 3085 	movw	r0, #901	@ 0x385
 801567a:	b00d      	add	sp, #52	@ 0x34
 801567c:	ecbd 8b02 	vpop	{d8}
 8015680:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015684:	9b04      	ldr	r3, [sp, #16]
 8015686:	6c32      	ldr	r2, [r6, #64]	@ 0x40
 8015688:	2b01      	cmp	r3, #1
 801568a:	9b05      	ldr	r3, [sp, #20]
 801568c:	f173 0300 	sbcs.w	r3, r3, #0
 8015690:	f2c0 80f0 	blt.w	8015874 <rcl_wait+0x234>
 8015694:	e9dd 8704 	ldrd	r8, r7, [sp, #16]
 8015698:	4643      	mov	r3, r8
 801569a:	2a00      	cmp	r2, #0
 801569c:	f000 8133 	beq.w	8015906 <rcl_wait+0x2c6>
 80156a0:	2400      	movs	r4, #0
 80156a2:	4613      	mov	r3, r2
 80156a4:	ed9f 8b9c 	vldr	d8, [pc, #624]	@ 8015918 <rcl_wait+0x2d8>
 80156a8:	46a2      	mov	sl, r4
 80156aa:	46a3      	mov	fp, r4
 80156ac:	f240 3921 	movw	r9, #801	@ 0x321
 80156b0:	4632      	mov	r2, r6
 80156b2:	e014      	b.n	80156de <rcl_wait+0x9e>
 80156b4:	2800      	cmp	r0, #0
 80156b6:	d1e0      	bne.n	801567a <rcl_wait+0x3a>
 80156b8:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80156bc:	4542      	cmp	r2, r8
 80156be:	eb73 0107 	sbcs.w	r1, r3, r7
 80156c2:	da03      	bge.n	80156cc <rcl_wait+0x8c>
 80156c4:	4690      	mov	r8, r2
 80156c6:	461f      	mov	r7, r3
 80156c8:	f04f 0b01 	mov.w	fp, #1
 80156cc:	6b2a      	ldr	r2, [r5, #48]	@ 0x30
 80156ce:	6c13      	ldr	r3, [r2, #64]	@ 0x40
 80156d0:	3401      	adds	r4, #1
 80156d2:	f14a 0a00 	adc.w	sl, sl, #0
 80156d6:	429c      	cmp	r4, r3
 80156d8:	f17a 0100 	sbcs.w	r1, sl, #0
 80156dc:	d228      	bcs.n	8015730 <rcl_wait+0xf0>
 80156de:	6928      	ldr	r0, [r5, #16]
 80156e0:	f850 0024 	ldr.w	r0, [r0, r4, lsl #2]
 80156e4:	a908      	add	r1, sp, #32
 80156e6:	00a6      	lsls	r6, r4, #2
 80156e8:	2800      	cmp	r0, #0
 80156ea:	d0f1      	beq.n	80156d0 <rcl_wait+0x90>
 80156ec:	68eb      	ldr	r3, [r5, #12]
 80156ee:	f8d2 c014 	ldr.w	ip, [r2, #20]
 80156f2:	4423      	add	r3, r4
 80156f4:	f85c e023 	ldr.w	lr, [ip, r3, lsl #2]
 80156f8:	f1be 0f00 	cmp.w	lr, #0
 80156fc:	d006      	beq.n	801570c <rcl_wait+0xcc>
 80156fe:	6913      	ldr	r3, [r2, #16]
 8015700:	f84c e023 	str.w	lr, [ip, r3, lsl #2]
 8015704:	3301      	adds	r3, #1
 8015706:	6113      	str	r3, [r2, #16]
 8015708:	692b      	ldr	r3, [r5, #16]
 801570a:	5998      	ldr	r0, [r3, r6]
 801570c:	ed8d 8b08 	vstr	d8, [sp, #32]
 8015710:	f7ff fa94 	bl	8014c3c <rcl_timer_get_time_until_next_call>
 8015714:	4548      	cmp	r0, r9
 8015716:	d1cd      	bne.n	80156b4 <rcl_wait+0x74>
 8015718:	692b      	ldr	r3, [r5, #16]
 801571a:	6b2a      	ldr	r2, [r5, #48]	@ 0x30
 801571c:	2100      	movs	r1, #0
 801571e:	5199      	str	r1, [r3, r6]
 8015720:	6c13      	ldr	r3, [r2, #64]	@ 0x40
 8015722:	3401      	adds	r4, #1
 8015724:	f14a 0a00 	adc.w	sl, sl, #0
 8015728:	429c      	cmp	r4, r3
 801572a:	f17a 0100 	sbcs.w	r1, sl, #0
 801572e:	d3d6      	bcc.n	80156de <rcl_wait+0x9e>
 8015730:	4616      	mov	r6, r2
 8015732:	e9dd 3204 	ldrd	r3, r2, [sp, #16]
 8015736:	4313      	orrs	r3, r2
 8015738:	46d9      	mov	r9, fp
 801573a:	f040 80a9 	bne.w	8015890 <rcl_wait+0x250>
 801573e:	2300      	movs	r3, #0
 8015740:	2200      	movs	r2, #0
 8015742:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8015746:	e9cd 230a 	strd	r2, r3, [sp, #40]	@ 0x28
 801574a:	ab08      	add	r3, sp, #32
 801574c:	9302      	str	r3, [sp, #8]
 801574e:	6bf2      	ldr	r2, [r6, #60]	@ 0x3c
 8015750:	f106 0334 	add.w	r3, r6, #52	@ 0x34
 8015754:	e9cd 3200 	strd	r3, r2, [sp]
 8015758:	f106 0110 	add.w	r1, r6, #16
 801575c:	f106 031c 	add.w	r3, r6, #28
 8015760:	f106 0228 	add.w	r2, r6, #40	@ 0x28
 8015764:	1d30      	adds	r0, r6, #4
 8015766:	f002 fb6b 	bl	8017e40 <rmw_wait>
 801576a:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 801576c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 801576e:	4680      	mov	r8, r0
 8015770:	b1ca      	cbz	r2, 80157a6 <rcl_wait+0x166>
 8015772:	2400      	movs	r4, #0
 8015774:	4627      	mov	r7, r4
 8015776:	692a      	ldr	r2, [r5, #16]
 8015778:	f852 0024 	ldr.w	r0, [r2, r4, lsl #2]
 801577c:	f10d 011f 	add.w	r1, sp, #31
 8015780:	00a6      	lsls	r6, r4, #2
 8015782:	b160      	cbz	r0, 801579e <rcl_wait+0x15e>
 8015784:	f88d 701f 	strb.w	r7, [sp, #31]
 8015788:	f7ff fa1e 	bl	8014bc8 <rcl_timer_is_ready>
 801578c:	2800      	cmp	r0, #0
 801578e:	f47f af74 	bne.w	801567a <rcl_wait+0x3a>
 8015792:	f89d 301f 	ldrb.w	r3, [sp, #31]
 8015796:	b90b      	cbnz	r3, 801579c <rcl_wait+0x15c>
 8015798:	692a      	ldr	r2, [r5, #16]
 801579a:	5193      	str	r3, [r2, r6]
 801579c:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 801579e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80157a0:	3401      	adds	r4, #1
 80157a2:	42a2      	cmp	r2, r4
 80157a4:	d8e7      	bhi.n	8015776 <rcl_wait+0x136>
 80157a6:	f038 0002 	bics.w	r0, r8, #2
 80157aa:	f040 8090 	bne.w	80158ce <rcl_wait+0x28e>
 80157ae:	686e      	ldr	r6, [r5, #4]
 80157b0:	4602      	mov	r2, r0
 80157b2:	b91e      	cbnz	r6, 80157bc <rcl_wait+0x17c>
 80157b4:	e00d      	b.n	80157d2 <rcl_wait+0x192>
 80157b6:	3201      	adds	r2, #1
 80157b8:	42b2      	cmp	r2, r6
 80157ba:	d00a      	beq.n	80157d2 <rcl_wait+0x192>
 80157bc:	6899      	ldr	r1, [r3, #8]
 80157be:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 80157c2:	2900      	cmp	r1, #0
 80157c4:	d1f7      	bne.n	80157b6 <rcl_wait+0x176>
 80157c6:	682c      	ldr	r4, [r5, #0]
 80157c8:	f844 1022 	str.w	r1, [r4, r2, lsl #2]
 80157cc:	3201      	adds	r2, #1
 80157ce:	42b2      	cmp	r2, r6
 80157d0:	d1f4      	bne.n	80157bc <rcl_wait+0x17c>
 80157d2:	68ee      	ldr	r6, [r5, #12]
 80157d4:	2200      	movs	r2, #0
 80157d6:	b91e      	cbnz	r6, 80157e0 <rcl_wait+0x1a0>
 80157d8:	e00d      	b.n	80157f6 <rcl_wait+0x1b6>
 80157da:	3201      	adds	r2, #1
 80157dc:	42b2      	cmp	r2, r6
 80157de:	d00a      	beq.n	80157f6 <rcl_wait+0x1b6>
 80157e0:	6959      	ldr	r1, [r3, #20]
 80157e2:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 80157e6:	2900      	cmp	r1, #0
 80157e8:	d1f7      	bne.n	80157da <rcl_wait+0x19a>
 80157ea:	68ac      	ldr	r4, [r5, #8]
 80157ec:	f844 1022 	str.w	r1, [r4, r2, lsl #2]
 80157f0:	3201      	adds	r2, #1
 80157f2:	42b2      	cmp	r2, r6
 80157f4:	d1f4      	bne.n	80157e0 <rcl_wait+0x1a0>
 80157f6:	69ee      	ldr	r6, [r5, #28]
 80157f8:	2200      	movs	r2, #0
 80157fa:	b91e      	cbnz	r6, 8015804 <rcl_wait+0x1c4>
 80157fc:	e00d      	b.n	801581a <rcl_wait+0x1da>
 80157fe:	3201      	adds	r2, #1
 8015800:	42b2      	cmp	r2, r6
 8015802:	d00a      	beq.n	801581a <rcl_wait+0x1da>
 8015804:	6a19      	ldr	r1, [r3, #32]
 8015806:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 801580a:	2900      	cmp	r1, #0
 801580c:	d1f7      	bne.n	80157fe <rcl_wait+0x1be>
 801580e:	69ac      	ldr	r4, [r5, #24]
 8015810:	f844 1022 	str.w	r1, [r4, r2, lsl #2]
 8015814:	3201      	adds	r2, #1
 8015816:	42b2      	cmp	r2, r6
 8015818:	d1f4      	bne.n	8015804 <rcl_wait+0x1c4>
 801581a:	6a6e      	ldr	r6, [r5, #36]	@ 0x24
 801581c:	2200      	movs	r2, #0
 801581e:	b91e      	cbnz	r6, 8015828 <rcl_wait+0x1e8>
 8015820:	e00d      	b.n	801583e <rcl_wait+0x1fe>
 8015822:	3201      	adds	r2, #1
 8015824:	4296      	cmp	r6, r2
 8015826:	d00a      	beq.n	801583e <rcl_wait+0x1fe>
 8015828:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 801582a:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 801582e:	2900      	cmp	r1, #0
 8015830:	d1f7      	bne.n	8015822 <rcl_wait+0x1e2>
 8015832:	6a2c      	ldr	r4, [r5, #32]
 8015834:	f844 1022 	str.w	r1, [r4, r2, lsl #2]
 8015838:	3201      	adds	r2, #1
 801583a:	4296      	cmp	r6, r2
 801583c:	d1f4      	bne.n	8015828 <rcl_wait+0x1e8>
 801583e:	6aee      	ldr	r6, [r5, #44]	@ 0x2c
 8015840:	2200      	movs	r2, #0
 8015842:	b91e      	cbnz	r6, 801584c <rcl_wait+0x20c>
 8015844:	e00d      	b.n	8015862 <rcl_wait+0x222>
 8015846:	3201      	adds	r2, #1
 8015848:	42b2      	cmp	r2, r6
 801584a:	d00a      	beq.n	8015862 <rcl_wait+0x222>
 801584c:	6b99      	ldr	r1, [r3, #56]	@ 0x38
 801584e:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 8015852:	2900      	cmp	r1, #0
 8015854:	d1f7      	bne.n	8015846 <rcl_wait+0x206>
 8015856:	6aac      	ldr	r4, [r5, #40]	@ 0x28
 8015858:	f844 1022 	str.w	r1, [r4, r2, lsl #2]
 801585c:	3201      	adds	r2, #1
 801585e:	42b2      	cmp	r2, r6
 8015860:	d1f4      	bne.n	801584c <rcl_wait+0x20c>
 8015862:	f1b8 0f02 	cmp.w	r8, #2
 8015866:	f47f af08 	bne.w	801567a <rcl_wait+0x3a>
 801586a:	464b      	mov	r3, r9
 801586c:	2b00      	cmp	r3, #0
 801586e:	bf08      	it	eq
 8015870:	2002      	moveq	r0, #2
 8015872:	e702      	b.n	801567a <rcl_wait+0x3a>
 8015874:	2a00      	cmp	r2, #0
 8015876:	d03a      	beq.n	80158ee <rcl_wait+0x2ae>
 8015878:	f04f 38ff 	mov.w	r8, #4294967295	@ 0xffffffff
 801587c:	f06f 4700 	mvn.w	r7, #2147483648	@ 0x80000000
 8015880:	e70e      	b.n	80156a0 <rcl_wait+0x60>
 8015882:	f44f 7061 	mov.w	r0, #900	@ 0x384
 8015886:	b00d      	add	sp, #52	@ 0x34
 8015888:	ecbd 8b02 	vpop	{d8}
 801588c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015890:	9b04      	ldr	r3, [sp, #16]
 8015892:	2b01      	cmp	r3, #1
 8015894:	9b05      	ldr	r3, [sp, #20]
 8015896:	f173 0300 	sbcs.w	r3, r3, #0
 801589a:	db24      	blt.n	80158e6 <rcl_wait+0x2a6>
 801589c:	2f00      	cmp	r7, #0
 801589e:	bfbc      	itt	lt
 80158a0:	f04f 0800 	movlt.w	r8, #0
 80158a4:	4647      	movlt	r7, r8
 80158a6:	a31e      	add	r3, pc, #120	@ (adr r3, 8015920 <rcl_wait+0x2e0>)
 80158a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80158ac:	4640      	mov	r0, r8
 80158ae:	4639      	mov	r1, r7
 80158b0:	f7eb f9d2 	bl	8000c58 <__aeabi_ldivmod>
 80158b4:	a31a      	add	r3, pc, #104	@ (adr r3, 8015920 <rcl_wait+0x2e0>)
 80158b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80158ba:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80158be:	4640      	mov	r0, r8
 80158c0:	4639      	mov	r1, r7
 80158c2:	f7eb f9c9 	bl	8000c58 <__aeabi_ldivmod>
 80158c6:	e9cd 230a 	strd	r2, r3, [sp, #40]	@ 0x28
 80158ca:	ab08      	add	r3, sp, #32
 80158cc:	e73e      	b.n	801574c <rcl_wait+0x10c>
 80158ce:	2001      	movs	r0, #1
 80158d0:	b00d      	add	sp, #52	@ 0x34
 80158d2:	ecbd 8b02 	vpop	{d8}
 80158d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80158da:	200b      	movs	r0, #11
 80158dc:	b00d      	add	sp, #52	@ 0x34
 80158de:	ecbd 8b02 	vpop	{d8}
 80158e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80158e6:	465b      	mov	r3, fp
 80158e8:	2b00      	cmp	r3, #0
 80158ea:	d1d7      	bne.n	801589c <rcl_wait+0x25c>
 80158ec:	e72e      	b.n	801574c <rcl_wait+0x10c>
 80158ee:	e9dd 3104 	ldrd	r3, r1, [sp, #16]
 80158f2:	430b      	orrs	r3, r1
 80158f4:	bf08      	it	eq
 80158f6:	4691      	moveq	r9, r2
 80158f8:	f43f af21 	beq.w	801573e <rcl_wait+0xfe>
 80158fc:	9b04      	ldr	r3, [sp, #16]
 80158fe:	f04f 38ff 	mov.w	r8, #4294967295	@ 0xffffffff
 8015902:	f06f 4700 	mvn.w	r7, #2147483648	@ 0x80000000
 8015906:	2b01      	cmp	r3, #1
 8015908:	9b05      	ldr	r3, [sp, #20]
 801590a:	f173 0300 	sbcs.w	r3, r3, #0
 801590e:	f04f 0300 	mov.w	r3, #0
 8015912:	4699      	mov	r9, r3
 8015914:	dac2      	bge.n	801589c <rcl_wait+0x25c>
 8015916:	e719      	b.n	801574c <rcl_wait+0x10c>
 8015918:	ffffffff 	.word	0xffffffff
 801591c:	7fffffff 	.word	0x7fffffff
 8015920:	3b9aca00 	.word	0x3b9aca00
 8015924:	00000000 	.word	0x00000000

08015928 <rcl_action_take_goal_response>:
 8015928:	2800      	cmp	r0, #0
 801592a:	d039      	beq.n	80159a0 <rcl_action_take_goal_response+0x78>
 801592c:	b570      	push	{r4, r5, r6, lr}
 801592e:	4604      	mov	r4, r0
 8015930:	6800      	ldr	r0, [r0, #0]
 8015932:	b380      	cbz	r0, 8015996 <rcl_action_take_goal_response+0x6e>
 8015934:	460d      	mov	r5, r1
 8015936:	4616      	mov	r6, r2
 8015938:	f7fd fe66 	bl	8013608 <rcl_client_is_valid>
 801593c:	b330      	cbz	r0, 801598c <rcl_action_take_goal_response+0x64>
 801593e:	6820      	ldr	r0, [r4, #0]
 8015940:	3004      	adds	r0, #4
 8015942:	f7fd fe61 	bl	8013608 <rcl_client_is_valid>
 8015946:	b308      	cbz	r0, 801598c <rcl_action_take_goal_response+0x64>
 8015948:	6820      	ldr	r0, [r4, #0]
 801594a:	3008      	adds	r0, #8
 801594c:	f7fd fe5c 	bl	8013608 <rcl_client_is_valid>
 8015950:	b1e0      	cbz	r0, 801598c <rcl_action_take_goal_response+0x64>
 8015952:	6820      	ldr	r0, [r4, #0]
 8015954:	300c      	adds	r0, #12
 8015956:	f7fe fdf3 	bl	8014540 <rcl_subscription_is_valid>
 801595a:	b1b8      	cbz	r0, 801598c <rcl_action_take_goal_response+0x64>
 801595c:	6820      	ldr	r0, [r4, #0]
 801595e:	3010      	adds	r0, #16
 8015960:	f7fe fdee 	bl	8014540 <rcl_subscription_is_valid>
 8015964:	b190      	cbz	r0, 801598c <rcl_action_take_goal_response+0x64>
 8015966:	b1cd      	cbz	r5, 801599c <rcl_action_take_goal_response+0x74>
 8015968:	b1c6      	cbz	r6, 801599c <rcl_action_take_goal_response+0x74>
 801596a:	6820      	ldr	r0, [r4, #0]
 801596c:	4632      	mov	r2, r6
 801596e:	4629      	mov	r1, r5
 8015970:	f7fd fe02 	bl	8013578 <rcl_take_response>
 8015974:	b148      	cbz	r0, 801598a <rcl_action_take_goal_response+0x62>
 8015976:	280a      	cmp	r0, #10
 8015978:	d007      	beq.n	801598a <rcl_action_take_goal_response+0x62>
 801597a:	f240 12f5 	movw	r2, #501	@ 0x1f5
 801597e:	f640 0337 	movw	r3, #2103	@ 0x837
 8015982:	4290      	cmp	r0, r2
 8015984:	bf0c      	ite	eq
 8015986:	4618      	moveq	r0, r3
 8015988:	2001      	movne	r0, #1
 801598a:	bd70      	pop	{r4, r5, r6, pc}
 801598c:	f7f8 fd40 	bl	800e410 <rcutils_reset_error>
 8015990:	f640 0036 	movw	r0, #2102	@ 0x836
 8015994:	bd70      	pop	{r4, r5, r6, pc}
 8015996:	f640 0036 	movw	r0, #2102	@ 0x836
 801599a:	bd70      	pop	{r4, r5, r6, pc}
 801599c:	200b      	movs	r0, #11
 801599e:	bd70      	pop	{r4, r5, r6, pc}
 80159a0:	f640 0036 	movw	r0, #2102	@ 0x836
 80159a4:	4770      	bx	lr
 80159a6:	bf00      	nop

080159a8 <rcl_action_send_result_request>:
 80159a8:	b390      	cbz	r0, 8015a10 <rcl_action_send_result_request+0x68>
 80159aa:	b570      	push	{r4, r5, r6, lr}
 80159ac:	4604      	mov	r4, r0
 80159ae:	6800      	ldr	r0, [r0, #0]
 80159b0:	b348      	cbz	r0, 8015a06 <rcl_action_send_result_request+0x5e>
 80159b2:	460d      	mov	r5, r1
 80159b4:	4616      	mov	r6, r2
 80159b6:	f7fd fe27 	bl	8013608 <rcl_client_is_valid>
 80159ba:	b1f8      	cbz	r0, 80159fc <rcl_action_send_result_request+0x54>
 80159bc:	6820      	ldr	r0, [r4, #0]
 80159be:	3004      	adds	r0, #4
 80159c0:	f7fd fe22 	bl	8013608 <rcl_client_is_valid>
 80159c4:	b1d0      	cbz	r0, 80159fc <rcl_action_send_result_request+0x54>
 80159c6:	6820      	ldr	r0, [r4, #0]
 80159c8:	3008      	adds	r0, #8
 80159ca:	f7fd fe1d 	bl	8013608 <rcl_client_is_valid>
 80159ce:	b1a8      	cbz	r0, 80159fc <rcl_action_send_result_request+0x54>
 80159d0:	6820      	ldr	r0, [r4, #0]
 80159d2:	300c      	adds	r0, #12
 80159d4:	f7fe fdb4 	bl	8014540 <rcl_subscription_is_valid>
 80159d8:	b180      	cbz	r0, 80159fc <rcl_action_send_result_request+0x54>
 80159da:	6820      	ldr	r0, [r4, #0]
 80159dc:	3010      	adds	r0, #16
 80159de:	f7fe fdaf 	bl	8014540 <rcl_subscription_is_valid>
 80159e2:	b158      	cbz	r0, 80159fc <rcl_action_send_result_request+0x54>
 80159e4:	b195      	cbz	r5, 8015a0c <rcl_action_send_result_request+0x64>
 80159e6:	b18e      	cbz	r6, 8015a0c <rcl_action_send_result_request+0x64>
 80159e8:	6820      	ldr	r0, [r4, #0]
 80159ea:	4632      	mov	r2, r6
 80159ec:	4629      	mov	r1, r5
 80159ee:	3008      	adds	r0, #8
 80159f0:	f7fd fd8c 	bl	801350c <rcl_send_request>
 80159f4:	3800      	subs	r0, #0
 80159f6:	bf18      	it	ne
 80159f8:	2001      	movne	r0, #1
 80159fa:	bd70      	pop	{r4, r5, r6, pc}
 80159fc:	f7f8 fd08 	bl	800e410 <rcutils_reset_error>
 8015a00:	f640 0036 	movw	r0, #2102	@ 0x836
 8015a04:	bd70      	pop	{r4, r5, r6, pc}
 8015a06:	f640 0036 	movw	r0, #2102	@ 0x836
 8015a0a:	bd70      	pop	{r4, r5, r6, pc}
 8015a0c:	200b      	movs	r0, #11
 8015a0e:	bd70      	pop	{r4, r5, r6, pc}
 8015a10:	f640 0036 	movw	r0, #2102	@ 0x836
 8015a14:	4770      	bx	lr
 8015a16:	bf00      	nop

08015a18 <rcl_action_take_result_response>:
 8015a18:	2800      	cmp	r0, #0
 8015a1a:	d03a      	beq.n	8015a92 <rcl_action_take_result_response+0x7a>
 8015a1c:	b570      	push	{r4, r5, r6, lr}
 8015a1e:	4604      	mov	r4, r0
 8015a20:	6800      	ldr	r0, [r0, #0]
 8015a22:	b388      	cbz	r0, 8015a88 <rcl_action_take_result_response+0x70>
 8015a24:	460d      	mov	r5, r1
 8015a26:	4616      	mov	r6, r2
 8015a28:	f7fd fdee 	bl	8013608 <rcl_client_is_valid>
 8015a2c:	b338      	cbz	r0, 8015a7e <rcl_action_take_result_response+0x66>
 8015a2e:	6820      	ldr	r0, [r4, #0]
 8015a30:	3004      	adds	r0, #4
 8015a32:	f7fd fde9 	bl	8013608 <rcl_client_is_valid>
 8015a36:	b310      	cbz	r0, 8015a7e <rcl_action_take_result_response+0x66>
 8015a38:	6820      	ldr	r0, [r4, #0]
 8015a3a:	3008      	adds	r0, #8
 8015a3c:	f7fd fde4 	bl	8013608 <rcl_client_is_valid>
 8015a40:	b1e8      	cbz	r0, 8015a7e <rcl_action_take_result_response+0x66>
 8015a42:	6820      	ldr	r0, [r4, #0]
 8015a44:	300c      	adds	r0, #12
 8015a46:	f7fe fd7b 	bl	8014540 <rcl_subscription_is_valid>
 8015a4a:	b1c0      	cbz	r0, 8015a7e <rcl_action_take_result_response+0x66>
 8015a4c:	6820      	ldr	r0, [r4, #0]
 8015a4e:	3010      	adds	r0, #16
 8015a50:	f7fe fd76 	bl	8014540 <rcl_subscription_is_valid>
 8015a54:	b198      	cbz	r0, 8015a7e <rcl_action_take_result_response+0x66>
 8015a56:	b1d5      	cbz	r5, 8015a8e <rcl_action_take_result_response+0x76>
 8015a58:	b1ce      	cbz	r6, 8015a8e <rcl_action_take_result_response+0x76>
 8015a5a:	6820      	ldr	r0, [r4, #0]
 8015a5c:	4632      	mov	r2, r6
 8015a5e:	4629      	mov	r1, r5
 8015a60:	3008      	adds	r0, #8
 8015a62:	f7fd fd89 	bl	8013578 <rcl_take_response>
 8015a66:	b148      	cbz	r0, 8015a7c <rcl_action_take_result_response+0x64>
 8015a68:	280a      	cmp	r0, #10
 8015a6a:	d007      	beq.n	8015a7c <rcl_action_take_result_response+0x64>
 8015a6c:	f240 12f5 	movw	r2, #501	@ 0x1f5
 8015a70:	f640 0337 	movw	r3, #2103	@ 0x837
 8015a74:	4290      	cmp	r0, r2
 8015a76:	bf0c      	ite	eq
 8015a78:	4618      	moveq	r0, r3
 8015a7a:	2001      	movne	r0, #1
 8015a7c:	bd70      	pop	{r4, r5, r6, pc}
 8015a7e:	f7f8 fcc7 	bl	800e410 <rcutils_reset_error>
 8015a82:	f640 0036 	movw	r0, #2102	@ 0x836
 8015a86:	bd70      	pop	{r4, r5, r6, pc}
 8015a88:	f640 0036 	movw	r0, #2102	@ 0x836
 8015a8c:	bd70      	pop	{r4, r5, r6, pc}
 8015a8e:	200b      	movs	r0, #11
 8015a90:	bd70      	pop	{r4, r5, r6, pc}
 8015a92:	f640 0036 	movw	r0, #2102	@ 0x836
 8015a96:	4770      	bx	lr

08015a98 <rcl_action_take_cancel_response>:
 8015a98:	2800      	cmp	r0, #0
 8015a9a:	d03a      	beq.n	8015b12 <rcl_action_take_cancel_response+0x7a>
 8015a9c:	b570      	push	{r4, r5, r6, lr}
 8015a9e:	4604      	mov	r4, r0
 8015aa0:	6800      	ldr	r0, [r0, #0]
 8015aa2:	b388      	cbz	r0, 8015b08 <rcl_action_take_cancel_response+0x70>
 8015aa4:	460d      	mov	r5, r1
 8015aa6:	4616      	mov	r6, r2
 8015aa8:	f7fd fdae 	bl	8013608 <rcl_client_is_valid>
 8015aac:	b338      	cbz	r0, 8015afe <rcl_action_take_cancel_response+0x66>
 8015aae:	6820      	ldr	r0, [r4, #0]
 8015ab0:	3004      	adds	r0, #4
 8015ab2:	f7fd fda9 	bl	8013608 <rcl_client_is_valid>
 8015ab6:	b310      	cbz	r0, 8015afe <rcl_action_take_cancel_response+0x66>
 8015ab8:	6820      	ldr	r0, [r4, #0]
 8015aba:	3008      	adds	r0, #8
 8015abc:	f7fd fda4 	bl	8013608 <rcl_client_is_valid>
 8015ac0:	b1e8      	cbz	r0, 8015afe <rcl_action_take_cancel_response+0x66>
 8015ac2:	6820      	ldr	r0, [r4, #0]
 8015ac4:	300c      	adds	r0, #12
 8015ac6:	f7fe fd3b 	bl	8014540 <rcl_subscription_is_valid>
 8015aca:	b1c0      	cbz	r0, 8015afe <rcl_action_take_cancel_response+0x66>
 8015acc:	6820      	ldr	r0, [r4, #0]
 8015ace:	3010      	adds	r0, #16
 8015ad0:	f7fe fd36 	bl	8014540 <rcl_subscription_is_valid>
 8015ad4:	b198      	cbz	r0, 8015afe <rcl_action_take_cancel_response+0x66>
 8015ad6:	b1d5      	cbz	r5, 8015b0e <rcl_action_take_cancel_response+0x76>
 8015ad8:	b1ce      	cbz	r6, 8015b0e <rcl_action_take_cancel_response+0x76>
 8015ada:	6820      	ldr	r0, [r4, #0]
 8015adc:	4632      	mov	r2, r6
 8015ade:	4629      	mov	r1, r5
 8015ae0:	3004      	adds	r0, #4
 8015ae2:	f7fd fd49 	bl	8013578 <rcl_take_response>
 8015ae6:	b148      	cbz	r0, 8015afc <rcl_action_take_cancel_response+0x64>
 8015ae8:	280a      	cmp	r0, #10
 8015aea:	d007      	beq.n	8015afc <rcl_action_take_cancel_response+0x64>
 8015aec:	f240 12f5 	movw	r2, #501	@ 0x1f5
 8015af0:	f640 0337 	movw	r3, #2103	@ 0x837
 8015af4:	4290      	cmp	r0, r2
 8015af6:	bf0c      	ite	eq
 8015af8:	4618      	moveq	r0, r3
 8015afa:	2001      	movne	r0, #1
 8015afc:	bd70      	pop	{r4, r5, r6, pc}
 8015afe:	f7f8 fc87 	bl	800e410 <rcutils_reset_error>
 8015b02:	f640 0036 	movw	r0, #2102	@ 0x836
 8015b06:	bd70      	pop	{r4, r5, r6, pc}
 8015b08:	f640 0036 	movw	r0, #2102	@ 0x836
 8015b0c:	bd70      	pop	{r4, r5, r6, pc}
 8015b0e:	200b      	movs	r0, #11
 8015b10:	bd70      	pop	{r4, r5, r6, pc}
 8015b12:	f640 0036 	movw	r0, #2102	@ 0x836
 8015b16:	4770      	bx	lr

08015b18 <rcl_action_take_feedback>:
 8015b18:	2800      	cmp	r0, #0
 8015b1a:	d038      	beq.n	8015b8e <rcl_action_take_feedback+0x76>
 8015b1c:	b530      	push	{r4, r5, lr}
 8015b1e:	4604      	mov	r4, r0
 8015b20:	6800      	ldr	r0, [r0, #0]
 8015b22:	b091      	sub	sp, #68	@ 0x44
 8015b24:	b378      	cbz	r0, 8015b86 <rcl_action_take_feedback+0x6e>
 8015b26:	460d      	mov	r5, r1
 8015b28:	f7fd fd6e 	bl	8013608 <rcl_client_is_valid>
 8015b2c:	b328      	cbz	r0, 8015b7a <rcl_action_take_feedback+0x62>
 8015b2e:	6820      	ldr	r0, [r4, #0]
 8015b30:	3004      	adds	r0, #4
 8015b32:	f7fd fd69 	bl	8013608 <rcl_client_is_valid>
 8015b36:	b300      	cbz	r0, 8015b7a <rcl_action_take_feedback+0x62>
 8015b38:	6820      	ldr	r0, [r4, #0]
 8015b3a:	3008      	adds	r0, #8
 8015b3c:	f7fd fd64 	bl	8013608 <rcl_client_is_valid>
 8015b40:	b1d8      	cbz	r0, 8015b7a <rcl_action_take_feedback+0x62>
 8015b42:	6820      	ldr	r0, [r4, #0]
 8015b44:	300c      	adds	r0, #12
 8015b46:	f7fe fcfb 	bl	8014540 <rcl_subscription_is_valid>
 8015b4a:	b1b0      	cbz	r0, 8015b7a <rcl_action_take_feedback+0x62>
 8015b4c:	6820      	ldr	r0, [r4, #0]
 8015b4e:	3010      	adds	r0, #16
 8015b50:	f7fe fcf6 	bl	8014540 <rcl_subscription_is_valid>
 8015b54:	b188      	cbz	r0, 8015b7a <rcl_action_take_feedback+0x62>
 8015b56:	b1ed      	cbz	r5, 8015b94 <rcl_action_take_feedback+0x7c>
 8015b58:	6820      	ldr	r0, [r4, #0]
 8015b5a:	2300      	movs	r3, #0
 8015b5c:	466a      	mov	r2, sp
 8015b5e:	4629      	mov	r1, r5
 8015b60:	300c      	adds	r0, #12
 8015b62:	f7fe fc8f 	bl	8014484 <rcl_take>
 8015b66:	b160      	cbz	r0, 8015b82 <rcl_action_take_feedback+0x6a>
 8015b68:	f240 1391 	movw	r3, #401	@ 0x191
 8015b6c:	4298      	cmp	r0, r3
 8015b6e:	d014      	beq.n	8015b9a <rcl_action_take_feedback+0x82>
 8015b70:	280a      	cmp	r0, #10
 8015b72:	bf18      	it	ne
 8015b74:	2001      	movne	r0, #1
 8015b76:	b011      	add	sp, #68	@ 0x44
 8015b78:	bd30      	pop	{r4, r5, pc}
 8015b7a:	f7f8 fc49 	bl	800e410 <rcutils_reset_error>
 8015b7e:	f640 0036 	movw	r0, #2102	@ 0x836
 8015b82:	b011      	add	sp, #68	@ 0x44
 8015b84:	bd30      	pop	{r4, r5, pc}
 8015b86:	f640 0036 	movw	r0, #2102	@ 0x836
 8015b8a:	b011      	add	sp, #68	@ 0x44
 8015b8c:	bd30      	pop	{r4, r5, pc}
 8015b8e:	f640 0036 	movw	r0, #2102	@ 0x836
 8015b92:	4770      	bx	lr
 8015b94:	200b      	movs	r0, #11
 8015b96:	b011      	add	sp, #68	@ 0x44
 8015b98:	bd30      	pop	{r4, r5, pc}
 8015b9a:	f640 0037 	movw	r0, #2103	@ 0x837
 8015b9e:	e7f0      	b.n	8015b82 <rcl_action_take_feedback+0x6a>

08015ba0 <rcl_action_wait_set_add_action_client>:
 8015ba0:	2800      	cmp	r0, #0
 8015ba2:	d048      	beq.n	8015c36 <rcl_action_wait_set_add_action_client+0x96>
 8015ba4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015ba6:	460c      	mov	r4, r1
 8015ba8:	2900      	cmp	r1, #0
 8015baa:	d03c      	beq.n	8015c26 <rcl_action_wait_set_add_action_client+0x86>
 8015bac:	4605      	mov	r5, r0
 8015bae:	6808      	ldr	r0, [r1, #0]
 8015bb0:	2800      	cmp	r0, #0
 8015bb2:	d038      	beq.n	8015c26 <rcl_action_wait_set_add_action_client+0x86>
 8015bb4:	4617      	mov	r7, r2
 8015bb6:	461e      	mov	r6, r3
 8015bb8:	f7fd fd26 	bl	8013608 <rcl_client_is_valid>
 8015bbc:	b3b0      	cbz	r0, 8015c2c <rcl_action_wait_set_add_action_client+0x8c>
 8015bbe:	6820      	ldr	r0, [r4, #0]
 8015bc0:	3004      	adds	r0, #4
 8015bc2:	f7fd fd21 	bl	8013608 <rcl_client_is_valid>
 8015bc6:	b388      	cbz	r0, 8015c2c <rcl_action_wait_set_add_action_client+0x8c>
 8015bc8:	6820      	ldr	r0, [r4, #0]
 8015bca:	3008      	adds	r0, #8
 8015bcc:	f7fd fd1c 	bl	8013608 <rcl_client_is_valid>
 8015bd0:	b360      	cbz	r0, 8015c2c <rcl_action_wait_set_add_action_client+0x8c>
 8015bd2:	6820      	ldr	r0, [r4, #0]
 8015bd4:	300c      	adds	r0, #12
 8015bd6:	f7fe fcb3 	bl	8014540 <rcl_subscription_is_valid>
 8015bda:	b338      	cbz	r0, 8015c2c <rcl_action_wait_set_add_action_client+0x8c>
 8015bdc:	6820      	ldr	r0, [r4, #0]
 8015bde:	3010      	adds	r0, #16
 8015be0:	f7fe fcae 	bl	8014540 <rcl_subscription_is_valid>
 8015be4:	b310      	cbz	r0, 8015c2c <rcl_action_wait_set_add_action_client+0x8c>
 8015be6:	6821      	ldr	r1, [r4, #0]
 8015be8:	4628      	mov	r0, r5
 8015bea:	f501 72e2 	add.w	r2, r1, #452	@ 0x1c4
 8015bee:	f7ff fccd 	bl	801558c <rcl_wait_set_add_client>
 8015bf2:	b9b8      	cbnz	r0, 8015c24 <rcl_action_wait_set_add_action_client+0x84>
 8015bf4:	6821      	ldr	r1, [r4, #0]
 8015bf6:	4628      	mov	r0, r5
 8015bf8:	f501 72e4 	add.w	r2, r1, #456	@ 0x1c8
 8015bfc:	3104      	adds	r1, #4
 8015bfe:	f7ff fcc5 	bl	801558c <rcl_wait_set_add_client>
 8015c02:	b978      	cbnz	r0, 8015c24 <rcl_action_wait_set_add_action_client+0x84>
 8015c04:	6821      	ldr	r1, [r4, #0]
 8015c06:	4628      	mov	r0, r5
 8015c08:	f501 72e6 	add.w	r2, r1, #460	@ 0x1cc
 8015c0c:	3108      	adds	r1, #8
 8015c0e:	f7ff fcbd 	bl	801558c <rcl_wait_set_add_client>
 8015c12:	b938      	cbnz	r0, 8015c24 <rcl_action_wait_set_add_action_client+0x84>
 8015c14:	6821      	ldr	r1, [r4, #0]
 8015c16:	4628      	mov	r0, r5
 8015c18:	f501 72e8 	add.w	r2, r1, #464	@ 0x1d0
 8015c1c:	310c      	adds	r1, #12
 8015c1e:	f7ff f96d 	bl	8014efc <rcl_wait_set_add_subscription>
 8015c22:	b158      	cbz	r0, 8015c3c <rcl_action_wait_set_add_action_client+0x9c>
 8015c24:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8015c26:	f640 0036 	movw	r0, #2102	@ 0x836
 8015c2a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8015c2c:	f7f8 fbf0 	bl	800e410 <rcutils_reset_error>
 8015c30:	f640 0036 	movw	r0, #2102	@ 0x836
 8015c34:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8015c36:	f44f 7061 	mov.w	r0, #900	@ 0x384
 8015c3a:	4770      	bx	lr
 8015c3c:	6821      	ldr	r1, [r4, #0]
 8015c3e:	4628      	mov	r0, r5
 8015c40:	f501 72ea 	add.w	r2, r1, #468	@ 0x1d4
 8015c44:	3110      	adds	r1, #16
 8015c46:	f7ff f959 	bl	8014efc <rcl_wait_set_add_subscription>
 8015c4a:	2800      	cmp	r0, #0
 8015c4c:	d1ea      	bne.n	8015c24 <rcl_action_wait_set_add_action_client+0x84>
 8015c4e:	b11f      	cbz	r7, 8015c58 <rcl_action_wait_set_add_action_client+0xb8>
 8015c50:	6823      	ldr	r3, [r4, #0]
 8015c52:	f8d3 31c4 	ldr.w	r3, [r3, #452]	@ 0x1c4
 8015c56:	603b      	str	r3, [r7, #0]
 8015c58:	2e00      	cmp	r6, #0
 8015c5a:	d0e3      	beq.n	8015c24 <rcl_action_wait_set_add_action_client+0x84>
 8015c5c:	6823      	ldr	r3, [r4, #0]
 8015c5e:	f8d3 31d0 	ldr.w	r3, [r3, #464]	@ 0x1d0
 8015c62:	6033      	str	r3, [r6, #0]
 8015c64:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8015c66:	bf00      	nop

08015c68 <rcl_action_client_wait_set_get_entities_ready>:
 8015c68:	2800      	cmp	r0, #0
 8015c6a:	f000 808d 	beq.w	8015d88 <rcl_action_client_wait_set_get_entities_ready+0x120>
 8015c6e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015c72:	460c      	mov	r4, r1
 8015c74:	2900      	cmp	r1, #0
 8015c76:	d077      	beq.n	8015d68 <rcl_action_client_wait_set_get_entities_ready+0x100>
 8015c78:	4605      	mov	r5, r0
 8015c7a:	6808      	ldr	r0, [r1, #0]
 8015c7c:	2800      	cmp	r0, #0
 8015c7e:	d073      	beq.n	8015d68 <rcl_action_client_wait_set_get_entities_ready+0x100>
 8015c80:	4616      	mov	r6, r2
 8015c82:	461f      	mov	r7, r3
 8015c84:	f7fd fcc0 	bl	8013608 <rcl_client_is_valid>
 8015c88:	2800      	cmp	r0, #0
 8015c8a:	d071      	beq.n	8015d70 <rcl_action_client_wait_set_get_entities_ready+0x108>
 8015c8c:	6820      	ldr	r0, [r4, #0]
 8015c8e:	3004      	adds	r0, #4
 8015c90:	f7fd fcba 	bl	8013608 <rcl_client_is_valid>
 8015c94:	2800      	cmp	r0, #0
 8015c96:	d06b      	beq.n	8015d70 <rcl_action_client_wait_set_get_entities_ready+0x108>
 8015c98:	6820      	ldr	r0, [r4, #0]
 8015c9a:	3008      	adds	r0, #8
 8015c9c:	f7fd fcb4 	bl	8013608 <rcl_client_is_valid>
 8015ca0:	2800      	cmp	r0, #0
 8015ca2:	d065      	beq.n	8015d70 <rcl_action_client_wait_set_get_entities_ready+0x108>
 8015ca4:	6820      	ldr	r0, [r4, #0]
 8015ca6:	300c      	adds	r0, #12
 8015ca8:	f7fe fc4a 	bl	8014540 <rcl_subscription_is_valid>
 8015cac:	2800      	cmp	r0, #0
 8015cae:	d05f      	beq.n	8015d70 <rcl_action_client_wait_set_get_entities_ready+0x108>
 8015cb0:	6820      	ldr	r0, [r4, #0]
 8015cb2:	3010      	adds	r0, #16
 8015cb4:	f7fe fc44 	bl	8014540 <rcl_subscription_is_valid>
 8015cb8:	2800      	cmp	r0, #0
 8015cba:	d059      	beq.n	8015d70 <rcl_action_client_wait_set_get_entities_ready+0x108>
 8015cbc:	2e00      	cmp	r6, #0
 8015cbe:	d060      	beq.n	8015d82 <rcl_action_client_wait_set_get_entities_ready+0x11a>
 8015cc0:	2f00      	cmp	r7, #0
 8015cc2:	d05e      	beq.n	8015d82 <rcl_action_client_wait_set_get_entities_ready+0x11a>
 8015cc4:	9b06      	ldr	r3, [sp, #24]
 8015cc6:	2b00      	cmp	r3, #0
 8015cc8:	d05b      	beq.n	8015d82 <rcl_action_client_wait_set_get_entities_ready+0x11a>
 8015cca:	9b07      	ldr	r3, [sp, #28]
 8015ccc:	2b00      	cmp	r3, #0
 8015cce:	d058      	beq.n	8015d82 <rcl_action_client_wait_set_get_entities_ready+0x11a>
 8015cd0:	9b08      	ldr	r3, [sp, #32]
 8015cd2:	2b00      	cmp	r3, #0
 8015cd4:	d055      	beq.n	8015d82 <rcl_action_client_wait_set_get_entities_ready+0x11a>
 8015cd6:	6823      	ldr	r3, [r4, #0]
 8015cd8:	686a      	ldr	r2, [r5, #4]
 8015cda:	f8d3 11d0 	ldr.w	r1, [r3, #464]	@ 0x1d0
 8015cde:	428a      	cmp	r2, r1
 8015ce0:	d94c      	bls.n	8015d7c <rcl_action_client_wait_set_get_entities_ready+0x114>
 8015ce2:	f8d3 01d4 	ldr.w	r0, [r3, #468]	@ 0x1d4
 8015ce6:	4282      	cmp	r2, r0
 8015ce8:	d948      	bls.n	8015d7c <rcl_action_client_wait_set_get_entities_ready+0x114>
 8015cea:	f8d3 41c4 	ldr.w	r4, [r3, #452]	@ 0x1c4
 8015cee:	69ea      	ldr	r2, [r5, #28]
 8015cf0:	42a2      	cmp	r2, r4
 8015cf2:	d943      	bls.n	8015d7c <rcl_action_client_wait_set_get_entities_ready+0x114>
 8015cf4:	f8d3 c1c8 	ldr.w	ip, [r3, #456]	@ 0x1c8
 8015cf8:	4562      	cmp	r2, ip
 8015cfa:	d93f      	bls.n	8015d7c <rcl_action_client_wait_set_get_entities_ready+0x114>
 8015cfc:	f8d3 e1cc 	ldr.w	lr, [r3, #460]	@ 0x1cc
 8015d00:	4572      	cmp	r2, lr
 8015d02:	d93b      	bls.n	8015d7c <rcl_action_client_wait_set_get_entities_ready+0x114>
 8015d04:	69aa      	ldr	r2, [r5, #24]
 8015d06:	682d      	ldr	r5, [r5, #0]
 8015d08:	f852 8024 	ldr.w	r8, [r2, r4, lsl #2]
 8015d0c:	f855 4020 	ldr.w	r4, [r5, r0, lsl #2]
 8015d10:	f855 5021 	ldr.w	r5, [r5, r1, lsl #2]
 8015d14:	f852 102c 	ldr.w	r1, [r2, ip, lsl #2]
 8015d18:	f852 202e 	ldr.w	r2, [r2, lr, lsl #2]
 8015d1c:	f103 0c0c 	add.w	ip, r3, #12
 8015d20:	eba5 050c 	sub.w	r5, r5, ip
 8015d24:	fab5 f585 	clz	r5, r5
 8015d28:	096d      	lsrs	r5, r5, #5
 8015d2a:	7035      	strb	r5, [r6, #0]
 8015d2c:	f103 0510 	add.w	r5, r3, #16
 8015d30:	1b64      	subs	r4, r4, r5
 8015d32:	fab4 f484 	clz	r4, r4
 8015d36:	0964      	lsrs	r4, r4, #5
 8015d38:	703c      	strb	r4, [r7, #0]
 8015d3a:	eba3 0008 	sub.w	r0, r3, r8
 8015d3e:	1d1c      	adds	r4, r3, #4
 8015d40:	3308      	adds	r3, #8
 8015d42:	1ad3      	subs	r3, r2, r3
 8015d44:	fab0 f080 	clz	r0, r0
 8015d48:	9a06      	ldr	r2, [sp, #24]
 8015d4a:	0940      	lsrs	r0, r0, #5
 8015d4c:	1b09      	subs	r1, r1, r4
 8015d4e:	7010      	strb	r0, [r2, #0]
 8015d50:	fab1 f181 	clz	r1, r1
 8015d54:	9a07      	ldr	r2, [sp, #28]
 8015d56:	0949      	lsrs	r1, r1, #5
 8015d58:	7011      	strb	r1, [r2, #0]
 8015d5a:	fab3 f383 	clz	r3, r3
 8015d5e:	9a08      	ldr	r2, [sp, #32]
 8015d60:	095b      	lsrs	r3, r3, #5
 8015d62:	2000      	movs	r0, #0
 8015d64:	7013      	strb	r3, [r2, #0]
 8015d66:	e001      	b.n	8015d6c <rcl_action_client_wait_set_get_entities_ready+0x104>
 8015d68:	f640 0036 	movw	r0, #2102	@ 0x836
 8015d6c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015d70:	f7f8 fb4e 	bl	800e410 <rcutils_reset_error>
 8015d74:	f640 0036 	movw	r0, #2102	@ 0x836
 8015d78:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015d7c:	2001      	movs	r0, #1
 8015d7e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015d82:	200b      	movs	r0, #11
 8015d84:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015d88:	f44f 7061 	mov.w	r0, #900	@ 0x384
 8015d8c:	4770      	bx	lr
 8015d8e:	bf00      	nop

08015d90 <rcl_action_take_goal_request>:
 8015d90:	2800      	cmp	r0, #0
 8015d92:	d039      	beq.n	8015e08 <rcl_action_take_goal_request+0x78>
 8015d94:	b570      	push	{r4, r5, r6, lr}
 8015d96:	4604      	mov	r4, r0
 8015d98:	6800      	ldr	r0, [r0, #0]
 8015d9a:	b380      	cbz	r0, 8015dfe <rcl_action_take_goal_request+0x6e>
 8015d9c:	460d      	mov	r5, r1
 8015d9e:	4616      	mov	r6, r2
 8015da0:	f7fe fa8a 	bl	80142b8 <rcl_service_is_valid>
 8015da4:	b330      	cbz	r0, 8015df4 <rcl_action_take_goal_request+0x64>
 8015da6:	6820      	ldr	r0, [r4, #0]
 8015da8:	3004      	adds	r0, #4
 8015daa:	f7fe fa85 	bl	80142b8 <rcl_service_is_valid>
 8015dae:	b308      	cbz	r0, 8015df4 <rcl_action_take_goal_request+0x64>
 8015db0:	6820      	ldr	r0, [r4, #0]
 8015db2:	3008      	adds	r0, #8
 8015db4:	f7fe fa80 	bl	80142b8 <rcl_service_is_valid>
 8015db8:	b1e0      	cbz	r0, 8015df4 <rcl_action_take_goal_request+0x64>
 8015dba:	6820      	ldr	r0, [r4, #0]
 8015dbc:	300c      	adds	r0, #12
 8015dbe:	f7f7 fb29 	bl	800d414 <rcl_publisher_is_valid>
 8015dc2:	b1b8      	cbz	r0, 8015df4 <rcl_action_take_goal_request+0x64>
 8015dc4:	6820      	ldr	r0, [r4, #0]
 8015dc6:	3010      	adds	r0, #16
 8015dc8:	f7f7 fb24 	bl	800d414 <rcl_publisher_is_valid>
 8015dcc:	b190      	cbz	r0, 8015df4 <rcl_action_take_goal_request+0x64>
 8015dce:	b1cd      	cbz	r5, 8015e04 <rcl_action_take_goal_request+0x74>
 8015dd0:	b1c6      	cbz	r6, 8015e04 <rcl_action_take_goal_request+0x74>
 8015dd2:	6820      	ldr	r0, [r4, #0]
 8015dd4:	4632      	mov	r2, r6
 8015dd6:	4629      	mov	r1, r5
 8015dd8:	f7fe fa16 	bl	8014208 <rcl_take_request>
 8015ddc:	b148      	cbz	r0, 8015df2 <rcl_action_take_goal_request+0x62>
 8015dde:	280a      	cmp	r0, #10
 8015de0:	d007      	beq.n	8015df2 <rcl_action_take_goal_request+0x62>
 8015de2:	f240 2259 	movw	r2, #601	@ 0x259
 8015de6:	f640 0399 	movw	r3, #2201	@ 0x899
 8015dea:	4290      	cmp	r0, r2
 8015dec:	bf0c      	ite	eq
 8015dee:	4618      	moveq	r0, r3
 8015df0:	2001      	movne	r0, #1
 8015df2:	bd70      	pop	{r4, r5, r6, pc}
 8015df4:	f7f8 fb0c 	bl	800e410 <rcutils_reset_error>
 8015df8:	f640 0098 	movw	r0, #2200	@ 0x898
 8015dfc:	bd70      	pop	{r4, r5, r6, pc}
 8015dfe:	f640 0098 	movw	r0, #2200	@ 0x898
 8015e02:	bd70      	pop	{r4, r5, r6, pc}
 8015e04:	200b      	movs	r0, #11
 8015e06:	bd70      	pop	{r4, r5, r6, pc}
 8015e08:	f640 0098 	movw	r0, #2200	@ 0x898
 8015e0c:	4770      	bx	lr
 8015e0e:	bf00      	nop

08015e10 <rcl_action_send_goal_response>:
 8015e10:	b390      	cbz	r0, 8015e78 <rcl_action_send_goal_response+0x68>
 8015e12:	b570      	push	{r4, r5, r6, lr}
 8015e14:	4604      	mov	r4, r0
 8015e16:	6800      	ldr	r0, [r0, #0]
 8015e18:	b348      	cbz	r0, 8015e6e <rcl_action_send_goal_response+0x5e>
 8015e1a:	460d      	mov	r5, r1
 8015e1c:	4616      	mov	r6, r2
 8015e1e:	f7fe fa4b 	bl	80142b8 <rcl_service_is_valid>
 8015e22:	b1f8      	cbz	r0, 8015e64 <rcl_action_send_goal_response+0x54>
 8015e24:	6820      	ldr	r0, [r4, #0]
 8015e26:	3004      	adds	r0, #4
 8015e28:	f7fe fa46 	bl	80142b8 <rcl_service_is_valid>
 8015e2c:	b1d0      	cbz	r0, 8015e64 <rcl_action_send_goal_response+0x54>
 8015e2e:	6820      	ldr	r0, [r4, #0]
 8015e30:	3008      	adds	r0, #8
 8015e32:	f7fe fa41 	bl	80142b8 <rcl_service_is_valid>
 8015e36:	b1a8      	cbz	r0, 8015e64 <rcl_action_send_goal_response+0x54>
 8015e38:	6820      	ldr	r0, [r4, #0]
 8015e3a:	300c      	adds	r0, #12
 8015e3c:	f7f7 faea 	bl	800d414 <rcl_publisher_is_valid>
 8015e40:	b180      	cbz	r0, 8015e64 <rcl_action_send_goal_response+0x54>
 8015e42:	6820      	ldr	r0, [r4, #0]
 8015e44:	3010      	adds	r0, #16
 8015e46:	f7f7 fae5 	bl	800d414 <rcl_publisher_is_valid>
 8015e4a:	b158      	cbz	r0, 8015e64 <rcl_action_send_goal_response+0x54>
 8015e4c:	b195      	cbz	r5, 8015e74 <rcl_action_send_goal_response+0x64>
 8015e4e:	b18e      	cbz	r6, 8015e74 <rcl_action_send_goal_response+0x64>
 8015e50:	6820      	ldr	r0, [r4, #0]
 8015e52:	4632      	mov	r2, r6
 8015e54:	4629      	mov	r1, r5
 8015e56:	f7fe fa17 	bl	8014288 <rcl_send_response>
 8015e5a:	b110      	cbz	r0, 8015e62 <rcl_action_send_goal_response+0x52>
 8015e5c:	2802      	cmp	r0, #2
 8015e5e:	bf18      	it	ne
 8015e60:	2001      	movne	r0, #1
 8015e62:	bd70      	pop	{r4, r5, r6, pc}
 8015e64:	f7f8 fad4 	bl	800e410 <rcutils_reset_error>
 8015e68:	f640 0098 	movw	r0, #2200	@ 0x898
 8015e6c:	bd70      	pop	{r4, r5, r6, pc}
 8015e6e:	f640 0098 	movw	r0, #2200	@ 0x898
 8015e72:	bd70      	pop	{r4, r5, r6, pc}
 8015e74:	200b      	movs	r0, #11
 8015e76:	bd70      	pop	{r4, r5, r6, pc}
 8015e78:	f640 0098 	movw	r0, #2200	@ 0x898
 8015e7c:	4770      	bx	lr
 8015e7e:	bf00      	nop

08015e80 <rcl_action_take_result_request>:
 8015e80:	2800      	cmp	r0, #0
 8015e82:	d03a      	beq.n	8015efa <rcl_action_take_result_request+0x7a>
 8015e84:	b570      	push	{r4, r5, r6, lr}
 8015e86:	4604      	mov	r4, r0
 8015e88:	6800      	ldr	r0, [r0, #0]
 8015e8a:	b388      	cbz	r0, 8015ef0 <rcl_action_take_result_request+0x70>
 8015e8c:	460d      	mov	r5, r1
 8015e8e:	4616      	mov	r6, r2
 8015e90:	f7fe fa12 	bl	80142b8 <rcl_service_is_valid>
 8015e94:	b338      	cbz	r0, 8015ee6 <rcl_action_take_result_request+0x66>
 8015e96:	6820      	ldr	r0, [r4, #0]
 8015e98:	3004      	adds	r0, #4
 8015e9a:	f7fe fa0d 	bl	80142b8 <rcl_service_is_valid>
 8015e9e:	b310      	cbz	r0, 8015ee6 <rcl_action_take_result_request+0x66>
 8015ea0:	6820      	ldr	r0, [r4, #0]
 8015ea2:	3008      	adds	r0, #8
 8015ea4:	f7fe fa08 	bl	80142b8 <rcl_service_is_valid>
 8015ea8:	b1e8      	cbz	r0, 8015ee6 <rcl_action_take_result_request+0x66>
 8015eaa:	6820      	ldr	r0, [r4, #0]
 8015eac:	300c      	adds	r0, #12
 8015eae:	f7f7 fab1 	bl	800d414 <rcl_publisher_is_valid>
 8015eb2:	b1c0      	cbz	r0, 8015ee6 <rcl_action_take_result_request+0x66>
 8015eb4:	6820      	ldr	r0, [r4, #0]
 8015eb6:	3010      	adds	r0, #16
 8015eb8:	f7f7 faac 	bl	800d414 <rcl_publisher_is_valid>
 8015ebc:	b198      	cbz	r0, 8015ee6 <rcl_action_take_result_request+0x66>
 8015ebe:	b1d5      	cbz	r5, 8015ef6 <rcl_action_take_result_request+0x76>
 8015ec0:	b1ce      	cbz	r6, 8015ef6 <rcl_action_take_result_request+0x76>
 8015ec2:	6820      	ldr	r0, [r4, #0]
 8015ec4:	4632      	mov	r2, r6
 8015ec6:	4629      	mov	r1, r5
 8015ec8:	3008      	adds	r0, #8
 8015eca:	f7fe f99d 	bl	8014208 <rcl_take_request>
 8015ece:	b148      	cbz	r0, 8015ee4 <rcl_action_take_result_request+0x64>
 8015ed0:	280a      	cmp	r0, #10
 8015ed2:	d007      	beq.n	8015ee4 <rcl_action_take_result_request+0x64>
 8015ed4:	f240 2259 	movw	r2, #601	@ 0x259
 8015ed8:	f640 0399 	movw	r3, #2201	@ 0x899
 8015edc:	4290      	cmp	r0, r2
 8015ede:	bf0c      	ite	eq
 8015ee0:	4618      	moveq	r0, r3
 8015ee2:	2001      	movne	r0, #1
 8015ee4:	bd70      	pop	{r4, r5, r6, pc}
 8015ee6:	f7f8 fa93 	bl	800e410 <rcutils_reset_error>
 8015eea:	f640 0098 	movw	r0, #2200	@ 0x898
 8015eee:	bd70      	pop	{r4, r5, r6, pc}
 8015ef0:	f640 0098 	movw	r0, #2200	@ 0x898
 8015ef4:	bd70      	pop	{r4, r5, r6, pc}
 8015ef6:	200b      	movs	r0, #11
 8015ef8:	bd70      	pop	{r4, r5, r6, pc}
 8015efa:	f640 0098 	movw	r0, #2200	@ 0x898
 8015efe:	4770      	bx	lr

08015f00 <rcl_action_take_cancel_request>:
 8015f00:	2800      	cmp	r0, #0
 8015f02:	d03a      	beq.n	8015f7a <rcl_action_take_cancel_request+0x7a>
 8015f04:	b570      	push	{r4, r5, r6, lr}
 8015f06:	4604      	mov	r4, r0
 8015f08:	6800      	ldr	r0, [r0, #0]
 8015f0a:	b388      	cbz	r0, 8015f70 <rcl_action_take_cancel_request+0x70>
 8015f0c:	460d      	mov	r5, r1
 8015f0e:	4616      	mov	r6, r2
 8015f10:	f7fe f9d2 	bl	80142b8 <rcl_service_is_valid>
 8015f14:	b338      	cbz	r0, 8015f66 <rcl_action_take_cancel_request+0x66>
 8015f16:	6820      	ldr	r0, [r4, #0]
 8015f18:	3004      	adds	r0, #4
 8015f1a:	f7fe f9cd 	bl	80142b8 <rcl_service_is_valid>
 8015f1e:	b310      	cbz	r0, 8015f66 <rcl_action_take_cancel_request+0x66>
 8015f20:	6820      	ldr	r0, [r4, #0]
 8015f22:	3008      	adds	r0, #8
 8015f24:	f7fe f9c8 	bl	80142b8 <rcl_service_is_valid>
 8015f28:	b1e8      	cbz	r0, 8015f66 <rcl_action_take_cancel_request+0x66>
 8015f2a:	6820      	ldr	r0, [r4, #0]
 8015f2c:	300c      	adds	r0, #12
 8015f2e:	f7f7 fa71 	bl	800d414 <rcl_publisher_is_valid>
 8015f32:	b1c0      	cbz	r0, 8015f66 <rcl_action_take_cancel_request+0x66>
 8015f34:	6820      	ldr	r0, [r4, #0]
 8015f36:	3010      	adds	r0, #16
 8015f38:	f7f7 fa6c 	bl	800d414 <rcl_publisher_is_valid>
 8015f3c:	b198      	cbz	r0, 8015f66 <rcl_action_take_cancel_request+0x66>
 8015f3e:	b1d5      	cbz	r5, 8015f76 <rcl_action_take_cancel_request+0x76>
 8015f40:	b1ce      	cbz	r6, 8015f76 <rcl_action_take_cancel_request+0x76>
 8015f42:	6820      	ldr	r0, [r4, #0]
 8015f44:	4632      	mov	r2, r6
 8015f46:	4629      	mov	r1, r5
 8015f48:	3004      	adds	r0, #4
 8015f4a:	f7fe f95d 	bl	8014208 <rcl_take_request>
 8015f4e:	b148      	cbz	r0, 8015f64 <rcl_action_take_cancel_request+0x64>
 8015f50:	280a      	cmp	r0, #10
 8015f52:	d007      	beq.n	8015f64 <rcl_action_take_cancel_request+0x64>
 8015f54:	f240 2259 	movw	r2, #601	@ 0x259
 8015f58:	f640 0399 	movw	r3, #2201	@ 0x899
 8015f5c:	4290      	cmp	r0, r2
 8015f5e:	bf0c      	ite	eq
 8015f60:	4618      	moveq	r0, r3
 8015f62:	2001      	movne	r0, #1
 8015f64:	bd70      	pop	{r4, r5, r6, pc}
 8015f66:	f7f8 fa53 	bl	800e410 <rcutils_reset_error>
 8015f6a:	f640 0098 	movw	r0, #2200	@ 0x898
 8015f6e:	bd70      	pop	{r4, r5, r6, pc}
 8015f70:	f640 0098 	movw	r0, #2200	@ 0x898
 8015f74:	bd70      	pop	{r4, r5, r6, pc}
 8015f76:	200b      	movs	r0, #11
 8015f78:	bd70      	pop	{r4, r5, r6, pc}
 8015f7a:	f640 0098 	movw	r0, #2200	@ 0x898
 8015f7e:	4770      	bx	lr

08015f80 <rcl_action_send_cancel_response>:
 8015f80:	b398      	cbz	r0, 8015fea <rcl_action_send_cancel_response+0x6a>
 8015f82:	b570      	push	{r4, r5, r6, lr}
 8015f84:	4604      	mov	r4, r0
 8015f86:	6800      	ldr	r0, [r0, #0]
 8015f88:	b350      	cbz	r0, 8015fe0 <rcl_action_send_cancel_response+0x60>
 8015f8a:	460d      	mov	r5, r1
 8015f8c:	4616      	mov	r6, r2
 8015f8e:	f7fe f993 	bl	80142b8 <rcl_service_is_valid>
 8015f92:	b300      	cbz	r0, 8015fd6 <rcl_action_send_cancel_response+0x56>
 8015f94:	6820      	ldr	r0, [r4, #0]
 8015f96:	3004      	adds	r0, #4
 8015f98:	f7fe f98e 	bl	80142b8 <rcl_service_is_valid>
 8015f9c:	b1d8      	cbz	r0, 8015fd6 <rcl_action_send_cancel_response+0x56>
 8015f9e:	6820      	ldr	r0, [r4, #0]
 8015fa0:	3008      	adds	r0, #8
 8015fa2:	f7fe f989 	bl	80142b8 <rcl_service_is_valid>
 8015fa6:	b1b0      	cbz	r0, 8015fd6 <rcl_action_send_cancel_response+0x56>
 8015fa8:	6820      	ldr	r0, [r4, #0]
 8015faa:	300c      	adds	r0, #12
 8015fac:	f7f7 fa32 	bl	800d414 <rcl_publisher_is_valid>
 8015fb0:	b188      	cbz	r0, 8015fd6 <rcl_action_send_cancel_response+0x56>
 8015fb2:	6820      	ldr	r0, [r4, #0]
 8015fb4:	3010      	adds	r0, #16
 8015fb6:	f7f7 fa2d 	bl	800d414 <rcl_publisher_is_valid>
 8015fba:	b160      	cbz	r0, 8015fd6 <rcl_action_send_cancel_response+0x56>
 8015fbc:	b19d      	cbz	r5, 8015fe6 <rcl_action_send_cancel_response+0x66>
 8015fbe:	b196      	cbz	r6, 8015fe6 <rcl_action_send_cancel_response+0x66>
 8015fc0:	6820      	ldr	r0, [r4, #0]
 8015fc2:	4632      	mov	r2, r6
 8015fc4:	4629      	mov	r1, r5
 8015fc6:	3004      	adds	r0, #4
 8015fc8:	f7fe f95e 	bl	8014288 <rcl_send_response>
 8015fcc:	b110      	cbz	r0, 8015fd4 <rcl_action_send_cancel_response+0x54>
 8015fce:	2802      	cmp	r0, #2
 8015fd0:	bf18      	it	ne
 8015fd2:	2001      	movne	r0, #1
 8015fd4:	bd70      	pop	{r4, r5, r6, pc}
 8015fd6:	f7f8 fa1b 	bl	800e410 <rcutils_reset_error>
 8015fda:	f640 0098 	movw	r0, #2200	@ 0x898
 8015fde:	bd70      	pop	{r4, r5, r6, pc}
 8015fe0:	f640 0098 	movw	r0, #2200	@ 0x898
 8015fe4:	bd70      	pop	{r4, r5, r6, pc}
 8015fe6:	200b      	movs	r0, #11
 8015fe8:	bd70      	pop	{r4, r5, r6, pc}
 8015fea:	f640 0098 	movw	r0, #2200	@ 0x898
 8015fee:	4770      	bx	lr

08015ff0 <rcl_action_wait_set_add_action_server>:
 8015ff0:	2800      	cmp	r0, #0
 8015ff2:	d04d      	beq.n	8016090 <rcl_action_wait_set_add_action_server+0xa0>
 8015ff4:	b570      	push	{r4, r5, r6, lr}
 8015ff6:	460c      	mov	r4, r1
 8015ff8:	b159      	cbz	r1, 8016012 <rcl_action_wait_set_add_action_server+0x22>
 8015ffa:	4605      	mov	r5, r0
 8015ffc:	6808      	ldr	r0, [r1, #0]
 8015ffe:	b140      	cbz	r0, 8016012 <rcl_action_wait_set_add_action_server+0x22>
 8016000:	4616      	mov	r6, r2
 8016002:	f7fe f959 	bl	80142b8 <rcl_service_is_valid>
 8016006:	b120      	cbz	r0, 8016012 <rcl_action_wait_set_add_action_server+0x22>
 8016008:	6820      	ldr	r0, [r4, #0]
 801600a:	3004      	adds	r0, #4
 801600c:	f7fe f954 	bl	80142b8 <rcl_service_is_valid>
 8016010:	b910      	cbnz	r0, 8016018 <rcl_action_wait_set_add_action_server+0x28>
 8016012:	f640 0098 	movw	r0, #2200	@ 0x898
 8016016:	bd70      	pop	{r4, r5, r6, pc}
 8016018:	6820      	ldr	r0, [r4, #0]
 801601a:	3008      	adds	r0, #8
 801601c:	f7fe f94c 	bl	80142b8 <rcl_service_is_valid>
 8016020:	2800      	cmp	r0, #0
 8016022:	d0f6      	beq.n	8016012 <rcl_action_wait_set_add_action_server+0x22>
 8016024:	6820      	ldr	r0, [r4, #0]
 8016026:	300c      	adds	r0, #12
 8016028:	f7f7 fa0c 	bl	800d444 <rcl_publisher_is_valid_except_context>
 801602c:	2800      	cmp	r0, #0
 801602e:	d0f0      	beq.n	8016012 <rcl_action_wait_set_add_action_server+0x22>
 8016030:	6820      	ldr	r0, [r4, #0]
 8016032:	3010      	adds	r0, #16
 8016034:	f7f7 fa06 	bl	800d444 <rcl_publisher_is_valid_except_context>
 8016038:	2800      	cmp	r0, #0
 801603a:	d0ea      	beq.n	8016012 <rcl_action_wait_set_add_action_server+0x22>
 801603c:	6821      	ldr	r1, [r4, #0]
 801603e:	4628      	mov	r0, r5
 8016040:	f501 72ee 	add.w	r2, r1, #476	@ 0x1dc
 8016044:	f7ff face 	bl	80155e4 <rcl_wait_set_add_service>
 8016048:	2800      	cmp	r0, #0
 801604a:	d1e4      	bne.n	8016016 <rcl_action_wait_set_add_action_server+0x26>
 801604c:	6821      	ldr	r1, [r4, #0]
 801604e:	4628      	mov	r0, r5
 8016050:	f501 72f0 	add.w	r2, r1, #480	@ 0x1e0
 8016054:	3104      	adds	r1, #4
 8016056:	f7ff fac5 	bl	80155e4 <rcl_wait_set_add_service>
 801605a:	2800      	cmp	r0, #0
 801605c:	d1db      	bne.n	8016016 <rcl_action_wait_set_add_action_server+0x26>
 801605e:	6821      	ldr	r1, [r4, #0]
 8016060:	4628      	mov	r0, r5
 8016062:	f501 72f2 	add.w	r2, r1, #484	@ 0x1e4
 8016066:	3108      	adds	r1, #8
 8016068:	f7ff fabc 	bl	80155e4 <rcl_wait_set_add_service>
 801606c:	2800      	cmp	r0, #0
 801606e:	d1d2      	bne.n	8016016 <rcl_action_wait_set_add_action_server+0x26>
 8016070:	6821      	ldr	r1, [r4, #0]
 8016072:	4628      	mov	r0, r5
 8016074:	f501 72f4 	add.w	r2, r1, #488	@ 0x1e8
 8016078:	3114      	adds	r1, #20
 801607a:	f7ff fa57 	bl	801552c <rcl_wait_set_add_timer>
 801607e:	2800      	cmp	r0, #0
 8016080:	d1c9      	bne.n	8016016 <rcl_action_wait_set_add_action_server+0x26>
 8016082:	2e00      	cmp	r6, #0
 8016084:	d0c7      	beq.n	8016016 <rcl_action_wait_set_add_action_server+0x26>
 8016086:	6823      	ldr	r3, [r4, #0]
 8016088:	f8d3 31dc 	ldr.w	r3, [r3, #476]	@ 0x1dc
 801608c:	6033      	str	r3, [r6, #0]
 801608e:	bd70      	pop	{r4, r5, r6, pc}
 8016090:	f44f 7061 	mov.w	r0, #900	@ 0x384
 8016094:	4770      	bx	lr
 8016096:	bf00      	nop

08016098 <rcl_action_server_wait_set_get_entities_ready>:
 8016098:	2800      	cmp	r0, #0
 801609a:	d05a      	beq.n	8016152 <rcl_action_server_wait_set_get_entities_ready+0xba>
 801609c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801609e:	460c      	mov	r4, r1
 80160a0:	b161      	cbz	r1, 80160bc <rcl_action_server_wait_set_get_entities_ready+0x24>
 80160a2:	4605      	mov	r5, r0
 80160a4:	6808      	ldr	r0, [r1, #0]
 80160a6:	b148      	cbz	r0, 80160bc <rcl_action_server_wait_set_get_entities_ready+0x24>
 80160a8:	4616      	mov	r6, r2
 80160aa:	461f      	mov	r7, r3
 80160ac:	f7fe f904 	bl	80142b8 <rcl_service_is_valid>
 80160b0:	b120      	cbz	r0, 80160bc <rcl_action_server_wait_set_get_entities_ready+0x24>
 80160b2:	6820      	ldr	r0, [r4, #0]
 80160b4:	3004      	adds	r0, #4
 80160b6:	f7fe f8ff 	bl	80142b8 <rcl_service_is_valid>
 80160ba:	b910      	cbnz	r0, 80160c2 <rcl_action_server_wait_set_get_entities_ready+0x2a>
 80160bc:	f640 0098 	movw	r0, #2200	@ 0x898
 80160c0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80160c2:	6820      	ldr	r0, [r4, #0]
 80160c4:	3008      	adds	r0, #8
 80160c6:	f7fe f8f7 	bl	80142b8 <rcl_service_is_valid>
 80160ca:	2800      	cmp	r0, #0
 80160cc:	d0f6      	beq.n	80160bc <rcl_action_server_wait_set_get_entities_ready+0x24>
 80160ce:	6820      	ldr	r0, [r4, #0]
 80160d0:	300c      	adds	r0, #12
 80160d2:	f7f7 f9b7 	bl	800d444 <rcl_publisher_is_valid_except_context>
 80160d6:	2800      	cmp	r0, #0
 80160d8:	d0f0      	beq.n	80160bc <rcl_action_server_wait_set_get_entities_ready+0x24>
 80160da:	6820      	ldr	r0, [r4, #0]
 80160dc:	3010      	adds	r0, #16
 80160de:	f7f7 f9b1 	bl	800d444 <rcl_publisher_is_valid_except_context>
 80160e2:	2800      	cmp	r0, #0
 80160e4:	d0ea      	beq.n	80160bc <rcl_action_server_wait_set_get_entities_ready+0x24>
 80160e6:	b3be      	cbz	r6, 8016158 <rcl_action_server_wait_set_get_entities_ready+0xc0>
 80160e8:	b3b7      	cbz	r7, 8016158 <rcl_action_server_wait_set_get_entities_ready+0xc0>
 80160ea:	9b06      	ldr	r3, [sp, #24]
 80160ec:	b3a3      	cbz	r3, 8016158 <rcl_action_server_wait_set_get_entities_ready+0xc0>
 80160ee:	9b07      	ldr	r3, [sp, #28]
 80160f0:	b393      	cbz	r3, 8016158 <rcl_action_server_wait_set_get_entities_ready+0xc0>
 80160f2:	6821      	ldr	r1, [r4, #0]
 80160f4:	692a      	ldr	r2, [r5, #16]
 80160f6:	6a2c      	ldr	r4, [r5, #32]
 80160f8:	f8d1 51e8 	ldr.w	r5, [r1, #488]	@ 0x1e8
 80160fc:	f8d1 31e0 	ldr.w	r3, [r1, #480]	@ 0x1e0
 8016100:	f852 2025 	ldr.w	r2, [r2, r5, lsl #2]
 8016104:	f8d1 01e4 	ldr.w	r0, [r1, #484]	@ 0x1e4
 8016108:	f8d1 51dc 	ldr.w	r5, [r1, #476]	@ 0x1dc
 801610c:	f854 0020 	ldr.w	r0, [r4, r0, lsl #2]
 8016110:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 8016114:	f854 4025 	ldr.w	r4, [r4, r5, lsl #2]
 8016118:	1a64      	subs	r4, r4, r1
 801611a:	fab4 f484 	clz	r4, r4
 801611e:	0964      	lsrs	r4, r4, #5
 8016120:	7034      	strb	r4, [r6, #0]
 8016122:	1d0c      	adds	r4, r1, #4
 8016124:	1b1b      	subs	r3, r3, r4
 8016126:	fab3 f383 	clz	r3, r3
 801612a:	095b      	lsrs	r3, r3, #5
 801612c:	f101 0408 	add.w	r4, r1, #8
 8016130:	703b      	strb	r3, [r7, #0]
 8016132:	f101 0314 	add.w	r3, r1, #20
 8016136:	1b01      	subs	r1, r0, r4
 8016138:	1ad3      	subs	r3, r2, r3
 801613a:	fab1 f181 	clz	r1, r1
 801613e:	9a06      	ldr	r2, [sp, #24]
 8016140:	0949      	lsrs	r1, r1, #5
 8016142:	7011      	strb	r1, [r2, #0]
 8016144:	fab3 f383 	clz	r3, r3
 8016148:	9a07      	ldr	r2, [sp, #28]
 801614a:	095b      	lsrs	r3, r3, #5
 801614c:	2000      	movs	r0, #0
 801614e:	7013      	strb	r3, [r2, #0]
 8016150:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8016152:	f44f 7061 	mov.w	r0, #900	@ 0x384
 8016156:	4770      	bx	lr
 8016158:	200b      	movs	r0, #11
 801615a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0801615c <_execute_event_handler>:
 801615c:	2002      	movs	r0, #2
 801615e:	4770      	bx	lr

08016160 <_cancel_goal_event_handler>:
 8016160:	2003      	movs	r0, #3
 8016162:	4770      	bx	lr

08016164 <_succeed_event_handler>:
 8016164:	2004      	movs	r0, #4
 8016166:	4770      	bx	lr

08016168 <_abort_event_handler>:
 8016168:	2006      	movs	r0, #6
 801616a:	4770      	bx	lr

0801616c <_canceled_event_handler>:
 801616c:	2005      	movs	r0, #5
 801616e:	4770      	bx	lr

08016170 <rcl_action_transition_goal_state>:
 8016170:	b2c2      	uxtb	r2, r0
 8016172:	2a06      	cmp	r2, #6
 8016174:	d80c      	bhi.n	8016190 <rcl_action_transition_goal_state+0x20>
 8016176:	2904      	cmp	r1, #4
 8016178:	d80a      	bhi.n	8016190 <rcl_action_transition_goal_state+0x20>
 801617a:	eb00 0280 	add.w	r2, r0, r0, lsl #2
 801617e:	b410      	push	{r4}
 8016180:	1853      	adds	r3, r2, r1
 8016182:	4c06      	ldr	r4, [pc, #24]	@ (801619c <rcl_action_transition_goal_state+0x2c>)
 8016184:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 8016188:	b123      	cbz	r3, 8016194 <rcl_action_transition_goal_state+0x24>
 801618a:	f85d 4b04 	ldr.w	r4, [sp], #4
 801618e:	4718      	bx	r3
 8016190:	2000      	movs	r0, #0
 8016192:	4770      	bx	lr
 8016194:	2000      	movs	r0, #0
 8016196:	f85d 4b04 	ldr.w	r4, [sp], #4
 801619a:	4770      	bx	lr
 801619c:	0801d960 	.word	0x0801d960

080161a0 <rcl_action_get_zero_initialized_cancel_response>:
 80161a0:	b510      	push	{r4, lr}
 80161a2:	4c07      	ldr	r4, [pc, #28]	@ (80161c0 <rcl_action_get_zero_initialized_cancel_response+0x20>)
 80161a4:	4686      	mov	lr, r0
 80161a6:	4684      	mov	ip, r0
 80161a8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80161aa:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80161ae:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80161b0:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80161b4:	6823      	ldr	r3, [r4, #0]
 80161b6:	f8cc 3000 	str.w	r3, [ip]
 80161ba:	4670      	mov	r0, lr
 80161bc:	bd10      	pop	{r4, pc}
 80161be:	bf00      	nop
 80161c0:	0801d9ec 	.word	0x0801d9ec

080161c4 <rclc_action_send_result_request>:
 80161c4:	b1d0      	cbz	r0, 80161fc <rclc_action_send_result_request+0x38>
 80161c6:	b500      	push	{lr}
 80161c8:	4684      	mov	ip, r0
 80161ca:	b087      	sub	sp, #28
 80161cc:	f8d0 0009 	ldr.w	r0, [r0, #9]
 80161d0:	f8dc 100d 	ldr.w	r1, [ip, #13]
 80161d4:	f8dc 2011 	ldr.w	r2, [ip, #17]
 80161d8:	f8dc 3015 	ldr.w	r3, [ip, #21]
 80161dc:	f10d 0e08 	add.w	lr, sp, #8
 80161e0:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 80161e4:	f8dc 0004 	ldr.w	r0, [ip, #4]
 80161e8:	f10c 0240 	add.w	r2, ip, #64	@ 0x40
 80161ec:	a902      	add	r1, sp, #8
 80161ee:	3010      	adds	r0, #16
 80161f0:	f7ff fbda 	bl	80159a8 <rcl_action_send_result_request>
 80161f4:	b920      	cbnz	r0, 8016200 <rclc_action_send_result_request+0x3c>
 80161f6:	b007      	add	sp, #28
 80161f8:	f85d fb04 	ldr.w	pc, [sp], #4
 80161fc:	200b      	movs	r0, #11
 80161fe:	4770      	bx	lr
 8016200:	9001      	str	r0, [sp, #4]
 8016202:	f7f8 f905 	bl	800e410 <rcutils_reset_error>
 8016206:	9801      	ldr	r0, [sp, #4]
 8016208:	b007      	add	sp, #28
 801620a:	f85d fb04 	ldr.w	pc, [sp], #4
 801620e:	bf00      	nop

08016210 <rclc_action_take_goal_handle>:
 8016210:	b160      	cbz	r0, 801622c <rclc_action_take_goal_handle+0x1c>
 8016212:	6883      	ldr	r3, [r0, #8]
 8016214:	b143      	cbz	r3, 8016228 <rclc_action_take_goal_handle+0x18>
 8016216:	6819      	ldr	r1, [r3, #0]
 8016218:	6081      	str	r1, [r0, #8]
 801621a:	2200      	movs	r2, #0
 801621c:	721a      	strb	r2, [r3, #8]
 801621e:	68c1      	ldr	r1, [r0, #12]
 8016220:	6019      	str	r1, [r3, #0]
 8016222:	621a      	str	r2, [r3, #32]
 8016224:	849a      	strh	r2, [r3, #36]	@ 0x24
 8016226:	60c3      	str	r3, [r0, #12]
 8016228:	4618      	mov	r0, r3
 801622a:	4770      	bx	lr
 801622c:	4603      	mov	r3, r0
 801622e:	e7fb      	b.n	8016228 <rclc_action_take_goal_handle+0x18>

08016230 <rclc_action_remove_used_goal_handle>:
 8016230:	b180      	cbz	r0, 8016254 <rclc_action_remove_used_goal_handle+0x24>
 8016232:	b179      	cbz	r1, 8016254 <rclc_action_remove_used_goal_handle+0x24>
 8016234:	68c3      	ldr	r3, [r0, #12]
 8016236:	4299      	cmp	r1, r3
 8016238:	d00d      	beq.n	8016256 <rclc_action_remove_used_goal_handle+0x26>
 801623a:	b12b      	cbz	r3, 8016248 <rclc_action_remove_used_goal_handle+0x18>
 801623c:	681a      	ldr	r2, [r3, #0]
 801623e:	4291      	cmp	r1, r2
 8016240:	d003      	beq.n	801624a <rclc_action_remove_used_goal_handle+0x1a>
 8016242:	4613      	mov	r3, r2
 8016244:	2b00      	cmp	r3, #0
 8016246:	d1f9      	bne.n	801623c <rclc_action_remove_used_goal_handle+0xc>
 8016248:	4770      	bx	lr
 801624a:	680a      	ldr	r2, [r1, #0]
 801624c:	601a      	str	r2, [r3, #0]
 801624e:	6883      	ldr	r3, [r0, #8]
 8016250:	600b      	str	r3, [r1, #0]
 8016252:	6081      	str	r1, [r0, #8]
 8016254:	4770      	bx	lr
 8016256:	680b      	ldr	r3, [r1, #0]
 8016258:	60c3      	str	r3, [r0, #12]
 801625a:	e7f8      	b.n	801624e <rclc_action_remove_used_goal_handle+0x1e>

0801625c <rclc_action_find_goal_handle_by_uuid>:
 801625c:	b538      	push	{r3, r4, r5, lr}
 801625e:	b180      	cbz	r0, 8016282 <rclc_action_find_goal_handle_by_uuid+0x26>
 8016260:	460d      	mov	r5, r1
 8016262:	b181      	cbz	r1, 8016286 <rclc_action_find_goal_handle_by_uuid+0x2a>
 8016264:	68c4      	ldr	r4, [r0, #12]
 8016266:	b914      	cbnz	r4, 801626e <rclc_action_find_goal_handle_by_uuid+0x12>
 8016268:	e009      	b.n	801627e <rclc_action_find_goal_handle_by_uuid+0x22>
 801626a:	6824      	ldr	r4, [r4, #0]
 801626c:	b13c      	cbz	r4, 801627e <rclc_action_find_goal_handle_by_uuid+0x22>
 801626e:	f104 0009 	add.w	r0, r4, #9
 8016272:	2210      	movs	r2, #16
 8016274:	4629      	mov	r1, r5
 8016276:	f005 f90f 	bl	801b498 <memcmp>
 801627a:	2800      	cmp	r0, #0
 801627c:	d1f5      	bne.n	801626a <rclc_action_find_goal_handle_by_uuid+0xe>
 801627e:	4620      	mov	r0, r4
 8016280:	bd38      	pop	{r3, r4, r5, pc}
 8016282:	4604      	mov	r4, r0
 8016284:	e7fb      	b.n	801627e <rclc_action_find_goal_handle_by_uuid+0x22>
 8016286:	460c      	mov	r4, r1
 8016288:	e7f9      	b.n	801627e <rclc_action_find_goal_handle_by_uuid+0x22>
 801628a:	bf00      	nop

0801628c <rclc_action_find_first_handle_by_status>:
 801628c:	b140      	cbz	r0, 80162a0 <rclc_action_find_first_handle_by_status+0x14>
 801628e:	68c0      	ldr	r0, [r0, #12]
 8016290:	b910      	cbnz	r0, 8016298 <rclc_action_find_first_handle_by_status+0xc>
 8016292:	e005      	b.n	80162a0 <rclc_action_find_first_handle_by_status+0x14>
 8016294:	6800      	ldr	r0, [r0, #0]
 8016296:	b118      	cbz	r0, 80162a0 <rclc_action_find_first_handle_by_status+0x14>
 8016298:	f990 3008 	ldrsb.w	r3, [r0, #8]
 801629c:	428b      	cmp	r3, r1
 801629e:	d1f9      	bne.n	8016294 <rclc_action_find_first_handle_by_status+0x8>
 80162a0:	4770      	bx	lr
 80162a2:	bf00      	nop

080162a4 <rclc_action_find_first_terminated_handle>:
 80162a4:	b140      	cbz	r0, 80162b8 <rclc_action_find_first_terminated_handle+0x14>
 80162a6:	68c0      	ldr	r0, [r0, #12]
 80162a8:	b910      	cbnz	r0, 80162b0 <rclc_action_find_first_terminated_handle+0xc>
 80162aa:	e005      	b.n	80162b8 <rclc_action_find_first_terminated_handle+0x14>
 80162ac:	6800      	ldr	r0, [r0, #0]
 80162ae:	b118      	cbz	r0, 80162b8 <rclc_action_find_first_terminated_handle+0x14>
 80162b0:	f990 3008 	ldrsb.w	r3, [r0, #8]
 80162b4:	2b03      	cmp	r3, #3
 80162b6:	ddf9      	ble.n	80162ac <rclc_action_find_first_terminated_handle+0x8>
 80162b8:	4770      	bx	lr
 80162ba:	bf00      	nop

080162bc <rclc_action_find_handle_by_goal_request_sequence_number>:
 80162bc:	b170      	cbz	r0, 80162dc <rclc_action_find_handle_by_goal_request_sequence_number+0x20>
 80162be:	68c0      	ldr	r0, [r0, #12]
 80162c0:	b160      	cbz	r0, 80162dc <rclc_action_find_handle_by_goal_request_sequence_number+0x20>
 80162c2:	b410      	push	{r4}
 80162c4:	e001      	b.n	80162ca <rclc_action_find_handle_by_goal_request_sequence_number+0xe>
 80162c6:	6800      	ldr	r0, [r0, #0]
 80162c8:	b128      	cbz	r0, 80162d6 <rclc_action_find_handle_by_goal_request_sequence_number+0x1a>
 80162ca:	e9d0 410a 	ldrd	r4, r1, [r0, #40]	@ 0x28
 80162ce:	4299      	cmp	r1, r3
 80162d0:	bf08      	it	eq
 80162d2:	4294      	cmpeq	r4, r2
 80162d4:	d1f7      	bne.n	80162c6 <rclc_action_find_handle_by_goal_request_sequence_number+0xa>
 80162d6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80162da:	4770      	bx	lr
 80162dc:	4770      	bx	lr
 80162de:	bf00      	nop

080162e0 <rclc_action_find_handle_by_result_request_sequence_number>:
 80162e0:	b170      	cbz	r0, 8016300 <rclc_action_find_handle_by_result_request_sequence_number+0x20>
 80162e2:	68c0      	ldr	r0, [r0, #12]
 80162e4:	b160      	cbz	r0, 8016300 <rclc_action_find_handle_by_result_request_sequence_number+0x20>
 80162e6:	b410      	push	{r4}
 80162e8:	e001      	b.n	80162ee <rclc_action_find_handle_by_result_request_sequence_number+0xe>
 80162ea:	6800      	ldr	r0, [r0, #0]
 80162ec:	b128      	cbz	r0, 80162fa <rclc_action_find_handle_by_result_request_sequence_number+0x1a>
 80162ee:	e9d0 4110 	ldrd	r4, r1, [r0, #64]	@ 0x40
 80162f2:	4299      	cmp	r1, r3
 80162f4:	bf08      	it	eq
 80162f6:	4294      	cmpeq	r4, r2
 80162f8:	d1f7      	bne.n	80162ea <rclc_action_find_handle_by_result_request_sequence_number+0xa>
 80162fa:	f85d 4b04 	ldr.w	r4, [sp], #4
 80162fe:	4770      	bx	lr
 8016300:	4770      	bx	lr
 8016302:	bf00      	nop

08016304 <rclc_action_find_handle_by_cancel_request_sequence_number>:
 8016304:	b170      	cbz	r0, 8016324 <rclc_action_find_handle_by_cancel_request_sequence_number+0x20>
 8016306:	68c0      	ldr	r0, [r0, #12]
 8016308:	b160      	cbz	r0, 8016324 <rclc_action_find_handle_by_cancel_request_sequence_number+0x20>
 801630a:	b410      	push	{r4}
 801630c:	e001      	b.n	8016312 <rclc_action_find_handle_by_cancel_request_sequence_number+0xe>
 801630e:	6800      	ldr	r0, [r0, #0]
 8016310:	b128      	cbz	r0, 801631e <rclc_action_find_handle_by_cancel_request_sequence_number+0x1a>
 8016312:	e9d0 4116 	ldrd	r4, r1, [r0, #88]	@ 0x58
 8016316:	4299      	cmp	r1, r3
 8016318:	bf08      	it	eq
 801631a:	4294      	cmpeq	r4, r2
 801631c:	d1f7      	bne.n	801630e <rclc_action_find_handle_by_cancel_request_sequence_number+0xa>
 801631e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8016322:	4770      	bx	lr
 8016324:	4770      	bx	lr
 8016326:	bf00      	nop

08016328 <rclc_action_find_first_handle_with_goal_response>:
 8016328:	b140      	cbz	r0, 801633c <rclc_action_find_first_handle_with_goal_response+0x14>
 801632a:	68c0      	ldr	r0, [r0, #12]
 801632c:	b910      	cbnz	r0, 8016334 <rclc_action_find_first_handle_with_goal_response+0xc>
 801632e:	e005      	b.n	801633c <rclc_action_find_first_handle_with_goal_response+0x14>
 8016330:	6800      	ldr	r0, [r0, #0]
 8016332:	b118      	cbz	r0, 801633c <rclc_action_find_first_handle_with_goal_response+0x14>
 8016334:	f890 3020 	ldrb.w	r3, [r0, #32]
 8016338:	2b00      	cmp	r3, #0
 801633a:	d0f9      	beq.n	8016330 <rclc_action_find_first_handle_with_goal_response+0x8>
 801633c:	4770      	bx	lr
 801633e:	bf00      	nop

08016340 <rclc_action_find_first_handle_with_result_response>:
 8016340:	b140      	cbz	r0, 8016354 <rclc_action_find_first_handle_with_result_response+0x14>
 8016342:	68c0      	ldr	r0, [r0, #12]
 8016344:	b910      	cbnz	r0, 801634c <rclc_action_find_first_handle_with_result_response+0xc>
 8016346:	e005      	b.n	8016354 <rclc_action_find_first_handle_with_result_response+0x14>
 8016348:	6800      	ldr	r0, [r0, #0]
 801634a:	b118      	cbz	r0, 8016354 <rclc_action_find_first_handle_with_result_response+0x14>
 801634c:	f890 3023 	ldrb.w	r3, [r0, #35]	@ 0x23
 8016350:	2b00      	cmp	r3, #0
 8016352:	d0f9      	beq.n	8016348 <rclc_action_find_first_handle_with_result_response+0x8>
 8016354:	4770      	bx	lr
 8016356:	bf00      	nop

08016358 <rclc_action_server_response_goal_request>:
 8016358:	b198      	cbz	r0, 8016382 <rclc_action_server_response_goal_request+0x2a>
 801635a:	b510      	push	{r4, lr}
 801635c:	6844      	ldr	r4, [r0, #4]
 801635e:	b086      	sub	sp, #24
 8016360:	2200      	movs	r2, #0
 8016362:	e9cd 2203 	strd	r2, r2, [sp, #12]
 8016366:	460b      	mov	r3, r1
 8016368:	9205      	str	r2, [sp, #20]
 801636a:	f100 0128 	add.w	r1, r0, #40	@ 0x28
 801636e:	aa03      	add	r2, sp, #12
 8016370:	f104 0010 	add.w	r0, r4, #16
 8016374:	f88d 300c 	strb.w	r3, [sp, #12]
 8016378:	f7ff fd4a 	bl	8015e10 <rcl_action_send_goal_response>
 801637c:	b918      	cbnz	r0, 8016386 <rclc_action_server_response_goal_request+0x2e>
 801637e:	b006      	add	sp, #24
 8016380:	bd10      	pop	{r4, pc}
 8016382:	200b      	movs	r0, #11
 8016384:	4770      	bx	lr
 8016386:	9001      	str	r0, [sp, #4]
 8016388:	f7f8 f842 	bl	800e410 <rcutils_reset_error>
 801638c:	9801      	ldr	r0, [sp, #4]
 801638e:	b006      	add	sp, #24
 8016390:	bd10      	pop	{r4, pc}
 8016392:	bf00      	nop
 8016394:	0000      	movs	r0, r0
	...

08016398 <rclc_action_server_goal_cancel_accept>:
 8016398:	b310      	cbz	r0, 80163e0 <rclc_action_server_goal_cancel_accept+0x48>
 801639a:	b510      	push	{r4, lr}
 801639c:	b090      	sub	sp, #64	@ 0x40
 801639e:	4604      	mov	r4, r0
 80163a0:	a806      	add	r0, sp, #24
 80163a2:	f7ff fefd 	bl	80161a0 <rcl_action_get_zero_initialized_cancel_response>
 80163a6:	2300      	movs	r3, #0
 80163a8:	f8d4 0009 	ldr.w	r0, [r4, #9]
 80163ac:	f8d4 100d 	ldr.w	r1, [r4, #13]
 80163b0:	f8d4 2011 	ldr.w	r2, [r4, #17]
 80163b4:	f88d 3018 	strb.w	r3, [sp, #24]
 80163b8:	f8d4 3015 	ldr.w	r3, [r4, #21]
 80163bc:	f8cd d01c 	str.w	sp, [sp, #28]
 80163c0:	46ec      	mov	ip, sp
 80163c2:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80163c6:	ed9f 7b08 	vldr	d7, [pc, #32]	@ 80163e8 <rclc_action_server_goal_cancel_accept+0x50>
 80163ca:	6860      	ldr	r0, [r4, #4]
 80163cc:	aa06      	add	r2, sp, #24
 80163ce:	f104 0158 	add.w	r1, r4, #88	@ 0x58
 80163d2:	3010      	adds	r0, #16
 80163d4:	ed8d 7b08 	vstr	d7, [sp, #32]
 80163d8:	f7ff fdd2 	bl	8015f80 <rcl_action_send_cancel_response>
 80163dc:	b010      	add	sp, #64	@ 0x40
 80163de:	bd10      	pop	{r4, pc}
 80163e0:	200b      	movs	r0, #11
 80163e2:	4770      	bx	lr
 80163e4:	f3af 8000 	nop.w
 80163e8:	00000001 	.word	0x00000001
 80163ec:	00000001 	.word	0x00000001

080163f0 <rclc_action_server_goal_cancel_reject>:
 80163f0:	b082      	sub	sp, #8
 80163f2:	b530      	push	{r4, r5, lr}
 80163f4:	b08b      	sub	sp, #44	@ 0x2c
 80163f6:	ac0e      	add	r4, sp, #56	@ 0x38
 80163f8:	e884 000c 	stmia.w	r4, {r2, r3}
 80163fc:	b188      	cbz	r0, 8016422 <rclc_action_server_goal_cancel_reject+0x32>
 80163fe:	4604      	mov	r4, r0
 8016400:	a801      	add	r0, sp, #4
 8016402:	460d      	mov	r5, r1
 8016404:	f7ff fecc 	bl	80161a0 <rcl_action_get_zero_initialized_cancel_response>
 8016408:	aa01      	add	r2, sp, #4
 801640a:	a90e      	add	r1, sp, #56	@ 0x38
 801640c:	f104 0010 	add.w	r0, r4, #16
 8016410:	f88d 5004 	strb.w	r5, [sp, #4]
 8016414:	f7ff fdb4 	bl	8015f80 <rcl_action_send_cancel_response>
 8016418:	b00b      	add	sp, #44	@ 0x2c
 801641a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801641e:	b002      	add	sp, #8
 8016420:	4770      	bx	lr
 8016422:	200b      	movs	r0, #11
 8016424:	b00b      	add	sp, #44	@ 0x2c
 8016426:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801642a:	b002      	add	sp, #8
 801642c:	4770      	bx	lr
 801642e:	bf00      	nop

08016430 <__atomic_load_8>:
 8016430:	ea80 4110 	eor.w	r1, r0, r0, lsr #16
 8016434:	f081 013d 	eor.w	r1, r1, #61	@ 0x3d
 8016438:	4a15      	ldr	r2, [pc, #84]	@ (8016490 <__atomic_load_8+0x60>)
 801643a:	4b16      	ldr	r3, [pc, #88]	@ (8016494 <__atomic_load_8+0x64>)
 801643c:	eb01 01c1 	add.w	r1, r1, r1, lsl #3
 8016440:	ea81 1111 	eor.w	r1, r1, r1, lsr #4
 8016444:	fb02 f101 	mul.w	r1, r2, r1
 8016448:	ea81 31d1 	eor.w	r1, r1, r1, lsr #15
 801644c:	fba3 2301 	umull	r2, r3, r3, r1
 8016450:	091b      	lsrs	r3, r3, #4
 8016452:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 8016456:	ebc3 03c2 	rsb	r3, r3, r2, lsl #3
 801645a:	b4d0      	push	{r4, r6, r7}
 801645c:	4c0e      	ldr	r4, [pc, #56]	@ (8016498 <__atomic_load_8+0x68>)
 801645e:	1ac9      	subs	r1, r1, r3
 8016460:	1862      	adds	r2, r4, r1
 8016462:	f04f 0c01 	mov.w	ip, #1
 8016466:	e8d2 3f4f 	ldrexb	r3, [r2]
 801646a:	e8c2 cf46 	strexb	r6, ip, [r2]
 801646e:	2e00      	cmp	r6, #0
 8016470:	d1f9      	bne.n	8016466 <__atomic_load_8+0x36>
 8016472:	f3bf 8f5b 	dmb	ish
 8016476:	b2db      	uxtb	r3, r3
 8016478:	2b00      	cmp	r3, #0
 801647a:	d1f4      	bne.n	8016466 <__atomic_load_8+0x36>
 801647c:	e9d0 6700 	ldrd	r6, r7, [r0]
 8016480:	f3bf 8f5b 	dmb	ish
 8016484:	5463      	strb	r3, [r4, r1]
 8016486:	4630      	mov	r0, r6
 8016488:	4639      	mov	r1, r7
 801648a:	bcd0      	pop	{r4, r6, r7}
 801648c:	4770      	bx	lr
 801648e:	bf00      	nop
 8016490:	27d4eb2d 	.word	0x27d4eb2d
 8016494:	b21642c9 	.word	0xb21642c9
 8016498:	2000c150 	.word	0x2000c150

0801649c <__atomic_store_8>:
 801649c:	ea80 4110 	eor.w	r1, r0, r0, lsr #16
 80164a0:	f081 013d 	eor.w	r1, r1, #61	@ 0x3d
 80164a4:	b570      	push	{r4, r5, r6, lr}
 80164a6:	eb01 01c1 	add.w	r1, r1, r1, lsl #3
 80164aa:	4c14      	ldr	r4, [pc, #80]	@ (80164fc <__atomic_store_8+0x60>)
 80164ac:	4d14      	ldr	r5, [pc, #80]	@ (8016500 <__atomic_store_8+0x64>)
 80164ae:	ea81 1111 	eor.w	r1, r1, r1, lsr #4
 80164b2:	fb04 f101 	mul.w	r1, r4, r1
 80164b6:	4c13      	ldr	r4, [pc, #76]	@ (8016504 <__atomic_store_8+0x68>)
 80164b8:	ea81 31d1 	eor.w	r1, r1, r1, lsr #15
 80164bc:	fba4 4e01 	umull	r4, lr, r4, r1
 80164c0:	ea4f 1e1e 	mov.w	lr, lr, lsr #4
 80164c4:	eb0e 044e 	add.w	r4, lr, lr, lsl #1
 80164c8:	ebce 0ec4 	rsb	lr, lr, r4, lsl #3
 80164cc:	eba1 0e0e 	sub.w	lr, r1, lr
 80164d0:	eb05 0c0e 	add.w	ip, r5, lr
 80164d4:	f04f 0401 	mov.w	r4, #1
 80164d8:	e8dc 1f4f 	ldrexb	r1, [ip]
 80164dc:	e8cc 4f46 	strexb	r6, r4, [ip]
 80164e0:	2e00      	cmp	r6, #0
 80164e2:	d1f9      	bne.n	80164d8 <__atomic_store_8+0x3c>
 80164e4:	f3bf 8f5b 	dmb	ish
 80164e8:	b2c9      	uxtb	r1, r1
 80164ea:	2900      	cmp	r1, #0
 80164ec:	d1f4      	bne.n	80164d8 <__atomic_store_8+0x3c>
 80164ee:	e9c0 2300 	strd	r2, r3, [r0]
 80164f2:	f3bf 8f5b 	dmb	ish
 80164f6:	f805 100e 	strb.w	r1, [r5, lr]
 80164fa:	bd70      	pop	{r4, r5, r6, pc}
 80164fc:	27d4eb2d 	.word	0x27d4eb2d
 8016500:	2000c150 	.word	0x2000c150
 8016504:	b21642c9 	.word	0xb21642c9

08016508 <__atomic_exchange_8>:
 8016508:	ea80 4c10 	eor.w	ip, r0, r0, lsr #16
 801650c:	f08c 0c3d 	eor.w	ip, ip, #61	@ 0x3d
 8016510:	4916      	ldr	r1, [pc, #88]	@ (801656c <__atomic_exchange_8+0x64>)
 8016512:	eb0c 0ccc 	add.w	ip, ip, ip, lsl #3
 8016516:	ea8c 1c1c 	eor.w	ip, ip, ip, lsr #4
 801651a:	fb01 fc0c 	mul.w	ip, r1, ip
 801651e:	4914      	ldr	r1, [pc, #80]	@ (8016570 <__atomic_exchange_8+0x68>)
 8016520:	ea8c 3cdc 	eor.w	ip, ip, ip, lsr #15
 8016524:	b570      	push	{r4, r5, r6, lr}
 8016526:	4605      	mov	r5, r0
 8016528:	fba1 010c 	umull	r0, r1, r1, ip
 801652c:	0909      	lsrs	r1, r1, #4
 801652e:	eb01 0041 	add.w	r0, r1, r1, lsl #1
 8016532:	ebc1 01c0 	rsb	r1, r1, r0, lsl #3
 8016536:	4e0f      	ldr	r6, [pc, #60]	@ (8016574 <__atomic_exchange_8+0x6c>)
 8016538:	ebac 0c01 	sub.w	ip, ip, r1
 801653c:	eb06 010c 	add.w	r1, r6, ip
 8016540:	f04f 0e01 	mov.w	lr, #1
 8016544:	e8d1 4f4f 	ldrexb	r4, [r1]
 8016548:	e8c1 ef40 	strexb	r0, lr, [r1]
 801654c:	2800      	cmp	r0, #0
 801654e:	d1f9      	bne.n	8016544 <__atomic_exchange_8+0x3c>
 8016550:	f3bf 8f5b 	dmb	ish
 8016554:	b2e4      	uxtb	r4, r4
 8016556:	2c00      	cmp	r4, #0
 8016558:	d1f4      	bne.n	8016544 <__atomic_exchange_8+0x3c>
 801655a:	e9d5 0100 	ldrd	r0, r1, [r5]
 801655e:	e9c5 2300 	strd	r2, r3, [r5]
 8016562:	f3bf 8f5b 	dmb	ish
 8016566:	f806 400c 	strb.w	r4, [r6, ip]
 801656a:	bd70      	pop	{r4, r5, r6, pc}
 801656c:	27d4eb2d 	.word	0x27d4eb2d
 8016570:	b21642c9 	.word	0xb21642c9
 8016574:	2000c150 	.word	0x2000c150

08016578 <rcutils_get_env>:
 8016578:	b168      	cbz	r0, 8016596 <rcutils_get_env+0x1e>
 801657a:	b510      	push	{r4, lr}
 801657c:	460c      	mov	r4, r1
 801657e:	b129      	cbz	r1, 801658c <rcutils_get_env+0x14>
 8016580:	f004 faf8 	bl	801ab74 <getenv>
 8016584:	b120      	cbz	r0, 8016590 <rcutils_get_env+0x18>
 8016586:	6020      	str	r0, [r4, #0]
 8016588:	2000      	movs	r0, #0
 801658a:	bd10      	pop	{r4, pc}
 801658c:	4803      	ldr	r0, [pc, #12]	@ (801659c <rcutils_get_env+0x24>)
 801658e:	bd10      	pop	{r4, pc}
 8016590:	4b03      	ldr	r3, [pc, #12]	@ (80165a0 <rcutils_get_env+0x28>)
 8016592:	6023      	str	r3, [r4, #0]
 8016594:	bd10      	pop	{r4, pc}
 8016596:	4803      	ldr	r0, [pc, #12]	@ (80165a4 <rcutils_get_env+0x2c>)
 8016598:	4770      	bx	lr
 801659a:	bf00      	nop
 801659c:	0801da2c 	.word	0x0801da2c
 80165a0:	0801e064 	.word	0x0801e064
 80165a4:	0801da10 	.word	0x0801da10

080165a8 <rcutils_is_directory>:
 80165a8:	2000      	movs	r0, #0
 80165aa:	4770      	bx	lr

080165ac <rcutils_join_path>:
 80165ac:	b082      	sub	sp, #8
 80165ae:	e88d 000c 	stmia.w	sp, {r2, r3}
 80165b2:	2000      	movs	r0, #0
 80165b4:	b002      	add	sp, #8
 80165b6:	4770      	bx	lr

080165b8 <rcutils_to_native_path>:
 80165b8:	b084      	sub	sp, #16
 80165ba:	a801      	add	r0, sp, #4
 80165bc:	e880 000e 	stmia.w	r0, {r1, r2, r3}
 80165c0:	b004      	add	sp, #16
 80165c2:	2000      	movs	r0, #0
 80165c4:	4770      	bx	lr
 80165c6:	bf00      	nop

080165c8 <rcutils_format_string_limit>:
 80165c8:	b40f      	push	{r0, r1, r2, r3}
 80165ca:	b5f0      	push	{r4, r5, r6, r7, lr}
 80165cc:	b083      	sub	sp, #12
 80165ce:	ac08      	add	r4, sp, #32
 80165d0:	9e0e      	ldr	r6, [sp, #56]	@ 0x38
 80165d2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 80165d6:	b34e      	cbz	r6, 801662c <rcutils_format_string_limit+0x64>
 80165d8:	a808      	add	r0, sp, #32
 80165da:	f7f7 fef5 	bl	800e3c8 <rcutils_allocator_is_valid>
 80165de:	b328      	cbz	r0, 801662c <rcutils_format_string_limit+0x64>
 80165e0:	2100      	movs	r1, #0
 80165e2:	ab0f      	add	r3, sp, #60	@ 0x3c
 80165e4:	4632      	mov	r2, r6
 80165e6:	4608      	mov	r0, r1
 80165e8:	e9cd 3300 	strd	r3, r3, [sp]
 80165ec:	f000 f8f4 	bl	80167d8 <rcutils_vsnprintf>
 80165f0:	1c43      	adds	r3, r0, #1
 80165f2:	4605      	mov	r5, r0
 80165f4:	d01a      	beq.n	801662c <rcutils_format_string_limit+0x64>
 80165f6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80165f8:	990c      	ldr	r1, [sp, #48]	@ 0x30
 80165fa:	1c47      	adds	r7, r0, #1
 80165fc:	429f      	cmp	r7, r3
 80165fe:	bf84      	itt	hi
 8016600:	461f      	movhi	r7, r3
 8016602:	f103 35ff 	addhi.w	r5, r3, #4294967295	@ 0xffffffff
 8016606:	4638      	mov	r0, r7
 8016608:	9b08      	ldr	r3, [sp, #32]
 801660a:	4798      	blx	r3
 801660c:	4604      	mov	r4, r0
 801660e:	b168      	cbz	r0, 801662c <rcutils_format_string_limit+0x64>
 8016610:	9b01      	ldr	r3, [sp, #4]
 8016612:	4632      	mov	r2, r6
 8016614:	4639      	mov	r1, r7
 8016616:	f000 f8df 	bl	80167d8 <rcutils_vsnprintf>
 801661a:	2800      	cmp	r0, #0
 801661c:	db02      	blt.n	8016624 <rcutils_format_string_limit+0x5c>
 801661e:	2300      	movs	r3, #0
 8016620:	5563      	strb	r3, [r4, r5]
 8016622:	e004      	b.n	801662e <rcutils_format_string_limit+0x66>
 8016624:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8016626:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8016628:	4620      	mov	r0, r4
 801662a:	4798      	blx	r3
 801662c:	2400      	movs	r4, #0
 801662e:	4620      	mov	r0, r4
 8016630:	b003      	add	sp, #12
 8016632:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8016636:	b004      	add	sp, #16
 8016638:	4770      	bx	lr
 801663a:	bf00      	nop

0801663c <rcutils_repl_str>:
 801663c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016640:	ed2d 8b02 	vpush	{d8}
 8016644:	b087      	sub	sp, #28
 8016646:	4680      	mov	r8, r0
 8016648:	4608      	mov	r0, r1
 801664a:	f8cd 8004 	str.w	r8, [sp, #4]
 801664e:	ee08 2a10 	vmov	s16, r2
 8016652:	468a      	mov	sl, r1
 8016654:	4699      	mov	r9, r3
 8016656:	f7e9 fdc5 	bl	80001e4 <strlen>
 801665a:	2600      	movs	r6, #0
 801665c:	4647      	mov	r7, r8
 801665e:	9002      	str	r0, [sp, #8]
 8016660:	46b3      	mov	fp, r6
 8016662:	2510      	movs	r5, #16
 8016664:	46b0      	mov	r8, r6
 8016666:	e01d      	b.n	80166a4 <rcutils_repl_str+0x68>
 8016668:	f10b 0b01 	add.w	fp, fp, #1
 801666c:	455e      	cmp	r6, fp
 801666e:	d211      	bcs.n	8016694 <rcutils_repl_str+0x58>
 8016670:	442e      	add	r6, r5
 8016672:	f8d9 3008 	ldr.w	r3, [r9, #8]
 8016676:	f8d9 2010 	ldr.w	r2, [r9, #16]
 801667a:	00b1      	lsls	r1, r6, #2
 801667c:	4798      	blx	r3
 801667e:	2800      	cmp	r0, #0
 8016680:	f000 8088 	beq.w	8016794 <rcutils_repl_str+0x158>
 8016684:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8016688:	f5b5 1f80 	cmp.w	r5, #1048576	@ 0x100000
 801668c:	4680      	mov	r8, r0
 801668e:	bf28      	it	cs
 8016690:	f44f 1580 	movcs.w	r5, #1048576	@ 0x100000
 8016694:	9a01      	ldr	r2, [sp, #4]
 8016696:	eb08 038b 	add.w	r3, r8, fp, lsl #2
 801669a:	1aa2      	subs	r2, r4, r2
 801669c:	f843 2c04 	str.w	r2, [r3, #-4]
 80166a0:	9b02      	ldr	r3, [sp, #8]
 80166a2:	18e7      	adds	r7, r4, r3
 80166a4:	4651      	mov	r1, sl
 80166a6:	4638      	mov	r0, r7
 80166a8:	f004 ff47 	bl	801b53a <strstr>
 80166ac:	4604      	mov	r4, r0
 80166ae:	4640      	mov	r0, r8
 80166b0:	2c00      	cmp	r4, #0
 80166b2:	d1d9      	bne.n	8016668 <rcutils_repl_str+0x2c>
 80166b4:	46b8      	mov	r8, r7
 80166b6:	4607      	mov	r7, r0
 80166b8:	4640      	mov	r0, r8
 80166ba:	f7e9 fd93 	bl	80001e4 <strlen>
 80166be:	9b01      	ldr	r3, [sp, #4]
 80166c0:	eba8 0303 	sub.w	r3, r8, r3
 80166c4:	181c      	adds	r4, r3, r0
 80166c6:	9404      	str	r4, [sp, #16]
 80166c8:	f1bb 0f00 	cmp.w	fp, #0
 80166cc:	d04a      	beq.n	8016764 <rcutils_repl_str+0x128>
 80166ce:	ee18 0a10 	vmov	r0, s16
 80166d2:	f7e9 fd87 	bl	80001e4 <strlen>
 80166d6:	9b02      	ldr	r3, [sp, #8]
 80166d8:	f8d9 1010 	ldr.w	r1, [r9, #16]
 80166dc:	1ac3      	subs	r3, r0, r3
 80166de:	fb0b 4303 	mla	r3, fp, r3, r4
 80166e2:	461a      	mov	r2, r3
 80166e4:	9305      	str	r3, [sp, #20]
 80166e6:	4606      	mov	r6, r0
 80166e8:	f8d9 3000 	ldr.w	r3, [r9]
 80166ec:	1c50      	adds	r0, r2, #1
 80166ee:	4798      	blx	r3
 80166f0:	9003      	str	r0, [sp, #12]
 80166f2:	2800      	cmp	r0, #0
 80166f4:	d04f      	beq.n	8016796 <rcutils_repl_str+0x15a>
 80166f6:	f8dd 8004 	ldr.w	r8, [sp, #4]
 80166fa:	683a      	ldr	r2, [r7, #0]
 80166fc:	4641      	mov	r1, r8
 80166fe:	f005 f814 	bl	801b72a <memcpy>
 8016702:	683d      	ldr	r5, [r7, #0]
 8016704:	9b03      	ldr	r3, [sp, #12]
 8016706:	9701      	str	r7, [sp, #4]
 8016708:	46ba      	mov	sl, r7
 801670a:	441d      	add	r5, r3
 801670c:	9f02      	ldr	r7, [sp, #8]
 801670e:	f8cd 9008 	str.w	r9, [sp, #8]
 8016712:	2401      	movs	r4, #1
 8016714:	46d1      	mov	r9, sl
 8016716:	ee18 aa10 	vmov	sl, s16
 801671a:	e00a      	b.n	8016732 <rcutils_repl_str+0xf6>
 801671c:	f8d9 5000 	ldr.w	r5, [r9]
 8016720:	1aaa      	subs	r2, r5, r2
 8016722:	1885      	adds	r5, r0, r2
 8016724:	f005 f801 	bl	801b72a <memcpy>
 8016728:	45a3      	cmp	fp, r4
 801672a:	f104 0201 	add.w	r2, r4, #1
 801672e:	d935      	bls.n	801679c <rcutils_repl_str+0x160>
 8016730:	4614      	mov	r4, r2
 8016732:	4632      	mov	r2, r6
 8016734:	4651      	mov	r1, sl
 8016736:	4628      	mov	r0, r5
 8016738:	f004 fff7 	bl	801b72a <memcpy>
 801673c:	f859 2b04 	ldr.w	r2, [r9], #4
 8016740:	45a3      	cmp	fp, r4
 8016742:	443a      	add	r2, r7
 8016744:	eb05 0006 	add.w	r0, r5, r6
 8016748:	eb08 0102 	add.w	r1, r8, r2
 801674c:	d1e6      	bne.n	801671c <rcutils_repl_str+0xe0>
 801674e:	9b04      	ldr	r3, [sp, #16]
 8016750:	1a9a      	subs	r2, r3, r2
 8016752:	e9dd 7901 	ldrd	r7, r9, [sp, #4]
 8016756:	f004 ffe8 	bl	801b72a <memcpy>
 801675a:	9a03      	ldr	r2, [sp, #12]
 801675c:	9905      	ldr	r1, [sp, #20]
 801675e:	2300      	movs	r3, #0
 8016760:	5453      	strb	r3, [r2, r1]
 8016762:	e00b      	b.n	801677c <rcutils_repl_str+0x140>
 8016764:	4620      	mov	r0, r4
 8016766:	f8d9 3000 	ldr.w	r3, [r9]
 801676a:	f8d9 1010 	ldr.w	r1, [r9, #16]
 801676e:	3001      	adds	r0, #1
 8016770:	4798      	blx	r3
 8016772:	9003      	str	r0, [sp, #12]
 8016774:	b110      	cbz	r0, 801677c <rcutils_repl_str+0x140>
 8016776:	9901      	ldr	r1, [sp, #4]
 8016778:	f004 ffcf 	bl	801b71a <strcpy>
 801677c:	4638      	mov	r0, r7
 801677e:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8016782:	f8d9 1010 	ldr.w	r1, [r9, #16]
 8016786:	4798      	blx	r3
 8016788:	9803      	ldr	r0, [sp, #12]
 801678a:	b007      	add	sp, #28
 801678c:	ecbd 8b02 	vpop	{d8}
 8016790:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016794:	4647      	mov	r7, r8
 8016796:	2300      	movs	r3, #0
 8016798:	9303      	str	r3, [sp, #12]
 801679a:	e7ef      	b.n	801677c <rcutils_repl_str+0x140>
 801679c:	e9dd 7901 	ldrd	r7, r9, [sp, #4]
 80167a0:	e7db      	b.n	801675a <rcutils_repl_str+0x11e>
 80167a2:	bf00      	nop

080167a4 <rcutils_snprintf>:
 80167a4:	b40c      	push	{r2, r3}
 80167a6:	b530      	push	{r4, r5, lr}
 80167a8:	b083      	sub	sp, #12
 80167aa:	ab06      	add	r3, sp, #24
 80167ac:	f853 2b04 	ldr.w	r2, [r3], #4
 80167b0:	9301      	str	r3, [sp, #4]
 80167b2:	b152      	cbz	r2, 80167ca <rcutils_snprintf+0x26>
 80167b4:	b138      	cbz	r0, 80167c6 <rcutils_snprintf+0x22>
 80167b6:	b141      	cbz	r1, 80167ca <rcutils_snprintf+0x26>
 80167b8:	f004 fdcc 	bl	801b354 <vsniprintf>
 80167bc:	b003      	add	sp, #12
 80167be:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80167c2:	b002      	add	sp, #8
 80167c4:	4770      	bx	lr
 80167c6:	2900      	cmp	r1, #0
 80167c8:	d0f6      	beq.n	80167b8 <rcutils_snprintf+0x14>
 80167ca:	f004 ff79 	bl	801b6c0 <__errno>
 80167ce:	2316      	movs	r3, #22
 80167d0:	6003      	str	r3, [r0, #0]
 80167d2:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80167d6:	e7f1      	b.n	80167bc <rcutils_snprintf+0x18>

080167d8 <rcutils_vsnprintf>:
 80167d8:	b570      	push	{r4, r5, r6, lr}
 80167da:	b13a      	cbz	r2, 80167ec <rcutils_vsnprintf+0x14>
 80167dc:	b120      	cbz	r0, 80167e8 <rcutils_vsnprintf+0x10>
 80167de:	b129      	cbz	r1, 80167ec <rcutils_vsnprintf+0x14>
 80167e0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80167e4:	f004 bdb6 	b.w	801b354 <vsniprintf>
 80167e8:	2900      	cmp	r1, #0
 80167ea:	d0f9      	beq.n	80167e0 <rcutils_vsnprintf+0x8>
 80167ec:	f004 ff68 	bl	801b6c0 <__errno>
 80167f0:	2316      	movs	r3, #22
 80167f2:	6003      	str	r3, [r0, #0]
 80167f4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80167f8:	bd70      	pop	{r4, r5, r6, pc}
 80167fa:	bf00      	nop

080167fc <rcutils_strdup>:
 80167fc:	b084      	sub	sp, #16
 80167fe:	b570      	push	{r4, r5, r6, lr}
 8016800:	b082      	sub	sp, #8
 8016802:	ac07      	add	r4, sp, #28
 8016804:	e884 000e 	stmia.w	r4, {r1, r2, r3}
 8016808:	4605      	mov	r5, r0
 801680a:	b1b0      	cbz	r0, 801683a <rcutils_strdup+0x3e>
 801680c:	f7e9 fcea 	bl	80001e4 <strlen>
 8016810:	1c42      	adds	r2, r0, #1
 8016812:	9b07      	ldr	r3, [sp, #28]
 8016814:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8016816:	9201      	str	r2, [sp, #4]
 8016818:	4606      	mov	r6, r0
 801681a:	4610      	mov	r0, r2
 801681c:	4798      	blx	r3
 801681e:	4604      	mov	r4, r0
 8016820:	b128      	cbz	r0, 801682e <rcutils_strdup+0x32>
 8016822:	9a01      	ldr	r2, [sp, #4]
 8016824:	4629      	mov	r1, r5
 8016826:	f004 ff80 	bl	801b72a <memcpy>
 801682a:	2300      	movs	r3, #0
 801682c:	55a3      	strb	r3, [r4, r6]
 801682e:	4620      	mov	r0, r4
 8016830:	b002      	add	sp, #8
 8016832:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8016836:	b004      	add	sp, #16
 8016838:	4770      	bx	lr
 801683a:	4604      	mov	r4, r0
 801683c:	e7f7      	b.n	801682e <rcutils_strdup+0x32>
 801683e:	bf00      	nop

08016840 <rcutils_strndup>:
 8016840:	b082      	sub	sp, #8
 8016842:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016844:	ac06      	add	r4, sp, #24
 8016846:	e884 000c 	stmia.w	r4, {r2, r3}
 801684a:	4605      	mov	r5, r0
 801684c:	b188      	cbz	r0, 8016872 <rcutils_strndup+0x32>
 801684e:	1c4f      	adds	r7, r1, #1
 8016850:	460e      	mov	r6, r1
 8016852:	4638      	mov	r0, r7
 8016854:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8016856:	4790      	blx	r2
 8016858:	4604      	mov	r4, r0
 801685a:	b128      	cbz	r0, 8016868 <rcutils_strndup+0x28>
 801685c:	463a      	mov	r2, r7
 801685e:	4629      	mov	r1, r5
 8016860:	f004 ff63 	bl	801b72a <memcpy>
 8016864:	2300      	movs	r3, #0
 8016866:	55a3      	strb	r3, [r4, r6]
 8016868:	4620      	mov	r0, r4
 801686a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 801686e:	b002      	add	sp, #8
 8016870:	4770      	bx	lr
 8016872:	4604      	mov	r4, r0
 8016874:	e7f8      	b.n	8016868 <rcutils_strndup+0x28>
 8016876:	bf00      	nop

08016878 <rcutils_get_zero_initialized_string_map>:
 8016878:	4b01      	ldr	r3, [pc, #4]	@ (8016880 <rcutils_get_zero_initialized_string_map+0x8>)
 801687a:	2000      	movs	r0, #0
 801687c:	6018      	str	r0, [r3, #0]
 801687e:	4770      	bx	lr
 8016880:	2000c168 	.word	0x2000c168

08016884 <rcutils_string_map_reserve>:
 8016884:	2800      	cmp	r0, #0
 8016886:	d05f      	beq.n	8016948 <rcutils_string_map_reserve+0xc4>
 8016888:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801688c:	460c      	mov	r4, r1
 801688e:	6801      	ldr	r1, [r0, #0]
 8016890:	b082      	sub	sp, #8
 8016892:	4605      	mov	r5, r0
 8016894:	b129      	cbz	r1, 80168a2 <rcutils_string_map_reserve+0x1e>
 8016896:	68cb      	ldr	r3, [r1, #12]
 8016898:	42a3      	cmp	r3, r4
 801689a:	d906      	bls.n	80168aa <rcutils_string_map_reserve+0x26>
 801689c:	461c      	mov	r4, r3
 801689e:	2900      	cmp	r1, #0
 80168a0:	d1f9      	bne.n	8016896 <rcutils_string_map_reserve+0x12>
 80168a2:	201f      	movs	r0, #31
 80168a4:	b002      	add	sp, #8
 80168a6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80168aa:	688b      	ldr	r3, [r1, #8]
 80168ac:	42a3      	cmp	r3, r4
 80168ae:	d047      	beq.n	8016940 <rcutils_string_map_reserve+0xbc>
 80168b0:	6a0e      	ldr	r6, [r1, #32]
 80168b2:	2c00      	cmp	r4, #0
 80168b4:	d034      	beq.n	8016920 <rcutils_string_map_reserve+0x9c>
 80168b6:	f1b4 4f80 	cmp.w	r4, #1073741824	@ 0x40000000
 80168ba:	d243      	bcs.n	8016944 <rcutils_string_map_reserve+0xc0>
 80168bc:	00a7      	lsls	r7, r4, #2
 80168be:	f8d1 8018 	ldr.w	r8, [r1, #24]
 80168c2:	6808      	ldr	r0, [r1, #0]
 80168c4:	4632      	mov	r2, r6
 80168c6:	4639      	mov	r1, r7
 80168c8:	47c0      	blx	r8
 80168ca:	2800      	cmp	r0, #0
 80168cc:	d03a      	beq.n	8016944 <rcutils_string_map_reserve+0xc0>
 80168ce:	682b      	ldr	r3, [r5, #0]
 80168d0:	4632      	mov	r2, r6
 80168d2:	6018      	str	r0, [r3, #0]
 80168d4:	4639      	mov	r1, r7
 80168d6:	6858      	ldr	r0, [r3, #4]
 80168d8:	47c0      	blx	r8
 80168da:	2800      	cmp	r0, #0
 80168dc:	d032      	beq.n	8016944 <rcutils_string_map_reserve+0xc0>
 80168de:	682d      	ldr	r5, [r5, #0]
 80168e0:	68ab      	ldr	r3, [r5, #8]
 80168e2:	6068      	str	r0, [r5, #4]
 80168e4:	42a3      	cmp	r3, r4
 80168e6:	d226      	bcs.n	8016936 <rcutils_string_map_reserve+0xb2>
 80168e8:	682a      	ldr	r2, [r5, #0]
 80168ea:	eb00 0c07 	add.w	ip, r0, r7
 80168ee:	eb02 0e83 	add.w	lr, r2, r3, lsl #2
 80168f2:	45e6      	cmp	lr, ip
 80168f4:	ea4f 0183 	mov.w	r1, r3, lsl #2
 80168f8:	eb00 0683 	add.w	r6, r0, r3, lsl #2
 80168fc:	d203      	bcs.n	8016906 <rcutils_string_map_reserve+0x82>
 80168fe:	eb02 0c07 	add.w	ip, r2, r7
 8016902:	4566      	cmp	r6, ip
 8016904:	d322      	bcc.n	801694c <rcutils_string_map_reserve+0xc8>
 8016906:	1ae3      	subs	r3, r4, r3
 8016908:	009a      	lsls	r2, r3, #2
 801690a:	4670      	mov	r0, lr
 801690c:	2100      	movs	r1, #0
 801690e:	9201      	str	r2, [sp, #4]
 8016910:	f004 fdec 	bl	801b4ec <memset>
 8016914:	9a01      	ldr	r2, [sp, #4]
 8016916:	2100      	movs	r1, #0
 8016918:	4630      	mov	r0, r6
 801691a:	f004 fde7 	bl	801b4ec <memset>
 801691e:	e00a      	b.n	8016936 <rcutils_string_map_reserve+0xb2>
 8016920:	694f      	ldr	r7, [r1, #20]
 8016922:	6808      	ldr	r0, [r1, #0]
 8016924:	4631      	mov	r1, r6
 8016926:	47b8      	blx	r7
 8016928:	682b      	ldr	r3, [r5, #0]
 801692a:	4631      	mov	r1, r6
 801692c:	6858      	ldr	r0, [r3, #4]
 801692e:	601c      	str	r4, [r3, #0]
 8016930:	47b8      	blx	r7
 8016932:	682d      	ldr	r5, [r5, #0]
 8016934:	606c      	str	r4, [r5, #4]
 8016936:	2000      	movs	r0, #0
 8016938:	60ac      	str	r4, [r5, #8]
 801693a:	b002      	add	sp, #8
 801693c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016940:	2000      	movs	r0, #0
 8016942:	e7af      	b.n	80168a4 <rcutils_string_map_reserve+0x20>
 8016944:	200a      	movs	r0, #10
 8016946:	e7ad      	b.n	80168a4 <rcutils_string_map_reserve+0x20>
 8016948:	200b      	movs	r0, #11
 801694a:	4770      	bx	lr
 801694c:	1f0b      	subs	r3, r1, #4
 801694e:	4418      	add	r0, r3
 8016950:	4413      	add	r3, r2
 8016952:	3a04      	subs	r2, #4
 8016954:	4417      	add	r7, r2
 8016956:	2200      	movs	r2, #0
 8016958:	f843 2f04 	str.w	r2, [r3, #4]!
 801695c:	42bb      	cmp	r3, r7
 801695e:	f840 2f04 	str.w	r2, [r0, #4]!
 8016962:	d1f9      	bne.n	8016958 <rcutils_string_map_reserve+0xd4>
 8016964:	e7e7      	b.n	8016936 <rcutils_string_map_reserve+0xb2>
 8016966:	bf00      	nop

08016968 <rcutils_string_map_init>:
 8016968:	b082      	sub	sp, #8
 801696a:	b570      	push	{r4, r5, r6, lr}
 801696c:	ac04      	add	r4, sp, #16
 801696e:	e884 000c 	stmia.w	r4, {r2, r3}
 8016972:	b380      	cbz	r0, 80169d6 <rcutils_string_map_init+0x6e>
 8016974:	6806      	ldr	r6, [r0, #0]
 8016976:	4604      	mov	r4, r0
 8016978:	b12e      	cbz	r6, 8016986 <rcutils_string_map_init+0x1e>
 801697a:	251e      	movs	r5, #30
 801697c:	4628      	mov	r0, r5
 801697e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8016982:	b002      	add	sp, #8
 8016984:	4770      	bx	lr
 8016986:	a804      	add	r0, sp, #16
 8016988:	460d      	mov	r5, r1
 801698a:	f7f7 fd1d 	bl	800e3c8 <rcutils_allocator_is_valid>
 801698e:	b310      	cbz	r0, 80169d6 <rcutils_string_map_init+0x6e>
 8016990:	9b04      	ldr	r3, [sp, #16]
 8016992:	9908      	ldr	r1, [sp, #32]
 8016994:	2024      	movs	r0, #36	@ 0x24
 8016996:	4798      	blx	r3
 8016998:	6020      	str	r0, [r4, #0]
 801699a:	b310      	cbz	r0, 80169e2 <rcutils_string_map_init+0x7a>
 801699c:	f10d 0e10 	add.w	lr, sp, #16
 80169a0:	e9c0 6600 	strd	r6, r6, [r0]
 80169a4:	e9c0 6602 	strd	r6, r6, [r0, #8]
 80169a8:	f100 0c10 	add.w	ip, r0, #16
 80169ac:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 80169b0:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80169b4:	f8de 3000 	ldr.w	r3, [lr]
 80169b8:	f8cc 3000 	str.w	r3, [ip]
 80169bc:	4629      	mov	r1, r5
 80169be:	4620      	mov	r0, r4
 80169c0:	f7ff ff60 	bl	8016884 <rcutils_string_map_reserve>
 80169c4:	4605      	mov	r5, r0
 80169c6:	2800      	cmp	r0, #0
 80169c8:	d0d8      	beq.n	801697c <rcutils_string_map_init+0x14>
 80169ca:	9b05      	ldr	r3, [sp, #20]
 80169cc:	9908      	ldr	r1, [sp, #32]
 80169ce:	6820      	ldr	r0, [r4, #0]
 80169d0:	4798      	blx	r3
 80169d2:	6026      	str	r6, [r4, #0]
 80169d4:	e7d2      	b.n	801697c <rcutils_string_map_init+0x14>
 80169d6:	250b      	movs	r5, #11
 80169d8:	4628      	mov	r0, r5
 80169da:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80169de:	b002      	add	sp, #8
 80169e0:	4770      	bx	lr
 80169e2:	250a      	movs	r5, #10
 80169e4:	e7ca      	b.n	801697c <rcutils_string_map_init+0x14>
 80169e6:	bf00      	nop

080169e8 <rcutils_string_map_fini>:
 80169e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80169ec:	b082      	sub	sp, #8
 80169ee:	2800      	cmp	r0, #0
 80169f0:	d03a      	beq.n	8016a68 <rcutils_string_map_fini+0x80>
 80169f2:	6804      	ldr	r4, [r0, #0]
 80169f4:	4606      	mov	r6, r0
 80169f6:	2c00      	cmp	r4, #0
 80169f8:	d032      	beq.n	8016a60 <rcutils_string_map_fini+0x78>
 80169fa:	68a3      	ldr	r3, [r4, #8]
 80169fc:	b32b      	cbz	r3, 8016a4a <rcutils_string_map_fini+0x62>
 80169fe:	2500      	movs	r5, #0
 8016a00:	6822      	ldr	r2, [r4, #0]
 8016a02:	462f      	mov	r7, r5
 8016a04:	f852 0025 	ldr.w	r0, [r2, r5, lsl #2]
 8016a08:	b1e0      	cbz	r0, 8016a44 <rcutils_string_map_fini+0x5c>
 8016a0a:	6a21      	ldr	r1, [r4, #32]
 8016a0c:	f8d4 8014 	ldr.w	r8, [r4, #20]
 8016a10:	9101      	str	r1, [sp, #4]
 8016a12:	47c0      	blx	r8
 8016a14:	e9d4 2300 	ldrd	r2, r3, [r4]
 8016a18:	f842 7025 	str.w	r7, [r2, r5, lsl #2]
 8016a1c:	9901      	ldr	r1, [sp, #4]
 8016a1e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8016a22:	47c0      	blx	r8
 8016a24:	68e3      	ldr	r3, [r4, #12]
 8016a26:	6862      	ldr	r2, [r4, #4]
 8016a28:	3b01      	subs	r3, #1
 8016a2a:	f842 7025 	str.w	r7, [r2, r5, lsl #2]
 8016a2e:	60e3      	str	r3, [r4, #12]
 8016a30:	6834      	ldr	r4, [r6, #0]
 8016a32:	68a3      	ldr	r3, [r4, #8]
 8016a34:	3501      	adds	r5, #1
 8016a36:	429d      	cmp	r5, r3
 8016a38:	d207      	bcs.n	8016a4a <rcutils_string_map_fini+0x62>
 8016a3a:	6822      	ldr	r2, [r4, #0]
 8016a3c:	f852 0025 	ldr.w	r0, [r2, r5, lsl #2]
 8016a40:	2800      	cmp	r0, #0
 8016a42:	d1e2      	bne.n	8016a0a <rcutils_string_map_fini+0x22>
 8016a44:	3501      	adds	r5, #1
 8016a46:	429d      	cmp	r5, r3
 8016a48:	d3dc      	bcc.n	8016a04 <rcutils_string_map_fini+0x1c>
 8016a4a:	2100      	movs	r1, #0
 8016a4c:	4630      	mov	r0, r6
 8016a4e:	f7ff ff19 	bl	8016884 <rcutils_string_map_reserve>
 8016a52:	4604      	mov	r4, r0
 8016a54:	b920      	cbnz	r0, 8016a60 <rcutils_string_map_fini+0x78>
 8016a56:	6830      	ldr	r0, [r6, #0]
 8016a58:	6943      	ldr	r3, [r0, #20]
 8016a5a:	6a01      	ldr	r1, [r0, #32]
 8016a5c:	4798      	blx	r3
 8016a5e:	6034      	str	r4, [r6, #0]
 8016a60:	4620      	mov	r0, r4
 8016a62:	b002      	add	sp, #8
 8016a64:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016a68:	240b      	movs	r4, #11
 8016a6a:	4620      	mov	r0, r4
 8016a6c:	b002      	add	sp, #8
 8016a6e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016a72:	bf00      	nop

08016a74 <rcutils_string_map_getn>:
 8016a74:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016a78:	b300      	cbz	r0, 8016abc <rcutils_string_map_getn+0x48>
 8016a7a:	6807      	ldr	r7, [r0, #0]
 8016a7c:	b1ff      	cbz	r7, 8016abe <rcutils_string_map_getn+0x4a>
 8016a7e:	4688      	mov	r8, r1
 8016a80:	b1e1      	cbz	r1, 8016abc <rcutils_string_map_getn+0x48>
 8016a82:	f8d7 a008 	ldr.w	sl, [r7, #8]
 8016a86:	683e      	ldr	r6, [r7, #0]
 8016a88:	f1ba 0f00 	cmp.w	sl, #0
 8016a8c:	d016      	beq.n	8016abc <rcutils_string_map_getn+0x48>
 8016a8e:	4691      	mov	r9, r2
 8016a90:	3e04      	subs	r6, #4
 8016a92:	2400      	movs	r4, #0
 8016a94:	f856 5f04 	ldr.w	r5, [r6, #4]!
 8016a98:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8016a9c:	4628      	mov	r0, r5
 8016a9e:	3401      	adds	r4, #1
 8016aa0:	b155      	cbz	r5, 8016ab8 <rcutils_string_map_getn+0x44>
 8016aa2:	f7e9 fb9f 	bl	80001e4 <strlen>
 8016aa6:	4548      	cmp	r0, r9
 8016aa8:	4602      	mov	r2, r0
 8016aaa:	4629      	mov	r1, r5
 8016aac:	bf38      	it	cc
 8016aae:	464a      	movcc	r2, r9
 8016ab0:	4640      	mov	r0, r8
 8016ab2:	f004 fd30 	bl	801b516 <strncmp>
 8016ab6:	b128      	cbz	r0, 8016ac4 <rcutils_string_map_getn+0x50>
 8016ab8:	45a2      	cmp	sl, r4
 8016aba:	d1eb      	bne.n	8016a94 <rcutils_string_map_getn+0x20>
 8016abc:	2700      	movs	r7, #0
 8016abe:	4638      	mov	r0, r7
 8016ac0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016ac4:	687b      	ldr	r3, [r7, #4]
 8016ac6:	f853 700b 	ldr.w	r7, [r3, fp]
 8016aca:	4638      	mov	r0, r7
 8016acc:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

08016ad0 <rmw_get_zero_initialized_context>:
 8016ad0:	b510      	push	{r4, lr}
 8016ad2:	4604      	mov	r4, r0
 8016ad4:	3010      	adds	r0, #16
 8016ad6:	f000 f80b 	bl	8016af0 <rmw_get_zero_initialized_init_options>
 8016ada:	2300      	movs	r3, #0
 8016adc:	2000      	movs	r0, #0
 8016ade:	2100      	movs	r1, #0
 8016ae0:	e9c4 0100 	strd	r0, r1, [r4]
 8016ae4:	e9c4 3312 	strd	r3, r3, [r4, #72]	@ 0x48
 8016ae8:	60a3      	str	r3, [r4, #8]
 8016aea:	4620      	mov	r0, r4
 8016aec:	bd10      	pop	{r4, pc}
 8016aee:	bf00      	nop

08016af0 <rmw_get_zero_initialized_init_options>:
 8016af0:	b510      	push	{r4, lr}
 8016af2:	2238      	movs	r2, #56	@ 0x38
 8016af4:	4604      	mov	r4, r0
 8016af6:	2100      	movs	r1, #0
 8016af8:	f004 fcf8 	bl	801b4ec <memset>
 8016afc:	f104 0010 	add.w	r0, r4, #16
 8016b00:	f000 f806 	bl	8016b10 <rmw_get_default_security_options>
 8016b04:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8016b08:	60e3      	str	r3, [r4, #12]
 8016b0a:	4620      	mov	r0, r4
 8016b0c:	bd10      	pop	{r4, pc}
 8016b0e:	bf00      	nop

08016b10 <rmw_get_default_security_options>:
 8016b10:	2200      	movs	r2, #0
 8016b12:	7002      	strb	r2, [r0, #0]
 8016b14:	6042      	str	r2, [r0, #4]
 8016b16:	4770      	bx	lr

08016b18 <rmw_subscription_content_filter_options_fini>:
 8016b18:	b1b0      	cbz	r0, 8016b48 <rmw_subscription_content_filter_options_fini+0x30>
 8016b1a:	b538      	push	{r3, r4, r5, lr}
 8016b1c:	4604      	mov	r4, r0
 8016b1e:	4608      	mov	r0, r1
 8016b20:	460d      	mov	r5, r1
 8016b22:	f7f7 fc51 	bl	800e3c8 <rcutils_allocator_is_valid>
 8016b26:	b168      	cbz	r0, 8016b44 <rmw_subscription_content_filter_options_fini+0x2c>
 8016b28:	6820      	ldr	r0, [r4, #0]
 8016b2a:	b120      	cbz	r0, 8016b36 <rmw_subscription_content_filter_options_fini+0x1e>
 8016b2c:	686b      	ldr	r3, [r5, #4]
 8016b2e:	6929      	ldr	r1, [r5, #16]
 8016b30:	4798      	blx	r3
 8016b32:	2300      	movs	r3, #0
 8016b34:	6023      	str	r3, [r4, #0]
 8016b36:	1d20      	adds	r0, r4, #4
 8016b38:	f003 fe48 	bl	801a7cc <rcutils_string_array_fini>
 8016b3c:	3800      	subs	r0, #0
 8016b3e:	bf18      	it	ne
 8016b40:	2001      	movne	r0, #1
 8016b42:	bd38      	pop	{r3, r4, r5, pc}
 8016b44:	200b      	movs	r0, #11
 8016b46:	bd38      	pop	{r3, r4, r5, pc}
 8016b48:	200b      	movs	r0, #11
 8016b4a:	4770      	bx	lr

08016b4c <rmw_get_default_subscription_options>:
 8016b4c:	2200      	movs	r2, #0
 8016b4e:	e9c0 2200 	strd	r2, r2, [r0]
 8016b52:	6082      	str	r2, [r0, #8]
 8016b54:	4770      	bx	lr
 8016b56:	bf00      	nop

08016b58 <rmw_time_equal>:
 8016b58:	b4f0      	push	{r4, r5, r6, r7}
 8016b5a:	b084      	sub	sp, #16
 8016b5c:	ac04      	add	r4, sp, #16
 8016b5e:	e904 000f 	stmdb	r4, {r0, r1, r2, r3}
 8016b62:	4603      	mov	r3, r0
 8016b64:	4924      	ldr	r1, [pc, #144]	@ (8016bf8 <rmw_time_equal+0xa0>)
 8016b66:	9e03      	ldr	r6, [sp, #12]
 8016b68:	e9dd 5001 	ldrd	r5, r0, [sp, #4]
 8016b6c:	2202      	movs	r2, #2
 8016b6e:	4299      	cmp	r1, r3
 8016b70:	41aa      	sbcs	r2, r5
 8016b72:	d330      	bcc.n	8016bd6 <rmw_time_equal+0x7e>
 8016b74:	4c21      	ldr	r4, [pc, #132]	@ (8016bfc <rmw_time_equal+0xa4>)
 8016b76:	fba3 3204 	umull	r3, r2, r3, r4
 8016b7a:	fb04 2205 	mla	r2, r4, r5, r2
 8016b7e:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8016b82:	43dd      	mvns	r5, r3
 8016b84:	1a8c      	subs	r4, r1, r2
 8016b86:	4285      	cmp	r5, r0
 8016b88:	41b4      	sbcs	r4, r6
 8016b8a:	d332      	bcc.n	8016bf2 <rmw_time_equal+0x9a>
 8016b8c:	eb10 0c03 	adds.w	ip, r0, r3
 8016b90:	eb42 0106 	adc.w	r1, r2, r6
 8016b94:	e9dd 3608 	ldrd	r3, r6, [sp, #32]
 8016b98:	4817      	ldr	r0, [pc, #92]	@ (8016bf8 <rmw_time_equal+0xa0>)
 8016b9a:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
 8016b9c:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 8016b9e:	2202      	movs	r2, #2
 8016ba0:	4298      	cmp	r0, r3
 8016ba2:	41b2      	sbcs	r2, r6
 8016ba4:	d31c      	bcc.n	8016be0 <rmw_time_equal+0x88>
 8016ba6:	4c15      	ldr	r4, [pc, #84]	@ (8016bfc <rmw_time_equal+0xa4>)
 8016ba8:	fba3 3204 	umull	r3, r2, r3, r4
 8016bac:	fb04 2206 	mla	r2, r4, r6, r2
 8016bb0:	f06f 4000 	mvn.w	r0, #2147483648	@ 0x80000000
 8016bb4:	43de      	mvns	r6, r3
 8016bb6:	1a84      	subs	r4, r0, r2
 8016bb8:	42ae      	cmp	r6, r5
 8016bba:	41bc      	sbcs	r4, r7
 8016bbc:	d315      	bcc.n	8016bea <rmw_time_equal+0x92>
 8016bbe:	195b      	adds	r3, r3, r5
 8016bc0:	eb42 0207 	adc.w	r2, r2, r7
 8016bc4:	428a      	cmp	r2, r1
 8016bc6:	bf08      	it	eq
 8016bc8:	4563      	cmpeq	r3, ip
 8016bca:	bf0c      	ite	eq
 8016bcc:	2001      	moveq	r0, #1
 8016bce:	2000      	movne	r0, #0
 8016bd0:	b004      	add	sp, #16
 8016bd2:	bcf0      	pop	{r4, r5, r6, r7}
 8016bd4:	4770      	bx	lr
 8016bd6:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 8016bda:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8016bde:	e7d9      	b.n	8016b94 <rmw_time_equal+0x3c>
 8016be0:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8016be4:	f06f 4200 	mvn.w	r2, #2147483648	@ 0x80000000
 8016be8:	e7ec      	b.n	8016bc4 <rmw_time_equal+0x6c>
 8016bea:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8016bee:	4602      	mov	r2, r0
 8016bf0:	e7e8      	b.n	8016bc4 <rmw_time_equal+0x6c>
 8016bf2:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 8016bf6:	e7cd      	b.n	8016b94 <rmw_time_equal+0x3c>
 8016bf8:	25c17d04 	.word	0x25c17d04
 8016bfc:	3b9aca00 	.word	0x3b9aca00

08016c00 <rmw_time_total_nsec>:
 8016c00:	b470      	push	{r4, r5, r6}
 8016c02:	b085      	sub	sp, #20
 8016c04:	ac04      	add	r4, sp, #16
 8016c06:	e904 000f 	stmdb	r4, {r0, r1, r2, r3}
 8016c0a:	4603      	mov	r3, r0
 8016c0c:	4912      	ldr	r1, [pc, #72]	@ (8016c58 <rmw_time_total_nsec+0x58>)
 8016c0e:	9e03      	ldr	r6, [sp, #12]
 8016c10:	e9dd 5001 	ldrd	r5, r0, [sp, #4]
 8016c14:	2202      	movs	r2, #2
 8016c16:	4299      	cmp	r1, r3
 8016c18:	41aa      	sbcs	r2, r5
 8016c1a:	d311      	bcc.n	8016c40 <rmw_time_total_nsec+0x40>
 8016c1c:	4c0f      	ldr	r4, [pc, #60]	@ (8016c5c <rmw_time_total_nsec+0x5c>)
 8016c1e:	fba3 3204 	umull	r3, r2, r3, r4
 8016c22:	fb04 2205 	mla	r2, r4, r5, r2
 8016c26:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8016c2a:	43dd      	mvns	r5, r3
 8016c2c:	1a8c      	subs	r4, r1, r2
 8016c2e:	4285      	cmp	r5, r0
 8016c30:	41b4      	sbcs	r4, r6
 8016c32:	d30c      	bcc.n	8016c4e <rmw_time_total_nsec+0x4e>
 8016c34:	1818      	adds	r0, r3, r0
 8016c36:	eb42 0106 	adc.w	r1, r2, r6
 8016c3a:	b005      	add	sp, #20
 8016c3c:	bc70      	pop	{r4, r5, r6}
 8016c3e:	4770      	bx	lr
 8016c40:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8016c44:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8016c48:	b005      	add	sp, #20
 8016c4a:	bc70      	pop	{r4, r5, r6}
 8016c4c:	4770      	bx	lr
 8016c4e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8016c52:	b005      	add	sp, #20
 8016c54:	bc70      	pop	{r4, r5, r6}
 8016c56:	4770      	bx	lr
 8016c58:	25c17d04 	.word	0x25c17d04
 8016c5c:	3b9aca00 	.word	0x3b9aca00

08016c60 <rmw_get_zero_initialized_message_info>:
 8016c60:	b510      	push	{r4, lr}
 8016c62:	2240      	movs	r2, #64	@ 0x40
 8016c64:	4604      	mov	r4, r0
 8016c66:	2100      	movs	r1, #0
 8016c68:	f004 fc40 	bl	801b4ec <memset>
 8016c6c:	4620      	mov	r0, r4
 8016c6e:	bd10      	pop	{r4, pc}

08016c70 <rmw_validate_full_topic_name>:
 8016c70:	2800      	cmp	r0, #0
 8016c72:	d057      	beq.n	8016d24 <rmw_validate_full_topic_name+0xb4>
 8016c74:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016c78:	460d      	mov	r5, r1
 8016c7a:	2900      	cmp	r1, #0
 8016c7c:	d054      	beq.n	8016d28 <rmw_validate_full_topic_name+0xb8>
 8016c7e:	4616      	mov	r6, r2
 8016c80:	4604      	mov	r4, r0
 8016c82:	f7e9 faaf 	bl	80001e4 <strlen>
 8016c86:	b148      	cbz	r0, 8016c9c <rmw_validate_full_topic_name+0x2c>
 8016c88:	7823      	ldrb	r3, [r4, #0]
 8016c8a:	2b2f      	cmp	r3, #47	@ 0x2f
 8016c8c:	d00d      	beq.n	8016caa <rmw_validate_full_topic_name+0x3a>
 8016c8e:	2302      	movs	r3, #2
 8016c90:	602b      	str	r3, [r5, #0]
 8016c92:	b13e      	cbz	r6, 8016ca4 <rmw_validate_full_topic_name+0x34>
 8016c94:	2000      	movs	r0, #0
 8016c96:	6030      	str	r0, [r6, #0]
 8016c98:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016c9c:	2301      	movs	r3, #1
 8016c9e:	602b      	str	r3, [r5, #0]
 8016ca0:	2e00      	cmp	r6, #0
 8016ca2:	d1f7      	bne.n	8016c94 <rmw_validate_full_topic_name+0x24>
 8016ca4:	2000      	movs	r0, #0
 8016ca6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016caa:	1e43      	subs	r3, r0, #1
 8016cac:	5ce2      	ldrb	r2, [r4, r3]
 8016cae:	2a2f      	cmp	r2, #47	@ 0x2f
 8016cb0:	d03c      	beq.n	8016d2c <rmw_validate_full_topic_name+0xbc>
 8016cb2:	1e63      	subs	r3, r4, #1
 8016cb4:	eb03 0800 	add.w	r8, r3, r0
 8016cb8:	f1c4 0e01 	rsb	lr, r4, #1
 8016cbc:	eb0e 0703 	add.w	r7, lr, r3
 8016cc0:	f813 1f01 	ldrb.w	r1, [r3, #1]!
 8016cc4:	f021 0220 	bic.w	r2, r1, #32
 8016cc8:	3a41      	subs	r2, #65	@ 0x41
 8016cca:	2a19      	cmp	r2, #25
 8016ccc:	f1a1 0c2f 	sub.w	ip, r1, #47	@ 0x2f
 8016cd0:	d90b      	bls.n	8016cea <rmw_validate_full_topic_name+0x7a>
 8016cd2:	295f      	cmp	r1, #95	@ 0x5f
 8016cd4:	d009      	beq.n	8016cea <rmw_validate_full_topic_name+0x7a>
 8016cd6:	f1bc 0f0a 	cmp.w	ip, #10
 8016cda:	d906      	bls.n	8016cea <rmw_validate_full_topic_name+0x7a>
 8016cdc:	2304      	movs	r3, #4
 8016cde:	602b      	str	r3, [r5, #0]
 8016ce0:	2e00      	cmp	r6, #0
 8016ce2:	d0df      	beq.n	8016ca4 <rmw_validate_full_topic_name+0x34>
 8016ce4:	6037      	str	r7, [r6, #0]
 8016ce6:	2000      	movs	r0, #0
 8016ce8:	e7d6      	b.n	8016c98 <rmw_validate_full_topic_name+0x28>
 8016cea:	4543      	cmp	r3, r8
 8016cec:	d1e6      	bne.n	8016cbc <rmw_validate_full_topic_name+0x4c>
 8016cee:	4f1a      	ldr	r7, [pc, #104]	@ (8016d58 <rmw_validate_full_topic_name+0xe8>)
 8016cf0:	2301      	movs	r3, #1
 8016cf2:	e004      	b.n	8016cfe <rmw_validate_full_topic_name+0x8e>
 8016cf4:	4298      	cmp	r0, r3
 8016cf6:	f104 0401 	add.w	r4, r4, #1
 8016cfa:	d91c      	bls.n	8016d36 <rmw_validate_full_topic_name+0xc6>
 8016cfc:	4613      	mov	r3, r2
 8016cfe:	4298      	cmp	r0, r3
 8016d00:	f103 0201 	add.w	r2, r3, #1
 8016d04:	d0f6      	beq.n	8016cf4 <rmw_validate_full_topic_name+0x84>
 8016d06:	7821      	ldrb	r1, [r4, #0]
 8016d08:	292f      	cmp	r1, #47	@ 0x2f
 8016d0a:	d1f3      	bne.n	8016cf4 <rmw_validate_full_topic_name+0x84>
 8016d0c:	7861      	ldrb	r1, [r4, #1]
 8016d0e:	292f      	cmp	r1, #47	@ 0x2f
 8016d10:	d01c      	beq.n	8016d4c <rmw_validate_full_topic_name+0xdc>
 8016d12:	5dc9      	ldrb	r1, [r1, r7]
 8016d14:	0749      	lsls	r1, r1, #29
 8016d16:	d5ed      	bpl.n	8016cf4 <rmw_validate_full_topic_name+0x84>
 8016d18:	2206      	movs	r2, #6
 8016d1a:	602a      	str	r2, [r5, #0]
 8016d1c:	2e00      	cmp	r6, #0
 8016d1e:	d0c1      	beq.n	8016ca4 <rmw_validate_full_topic_name+0x34>
 8016d20:	6033      	str	r3, [r6, #0]
 8016d22:	e7bf      	b.n	8016ca4 <rmw_validate_full_topic_name+0x34>
 8016d24:	200b      	movs	r0, #11
 8016d26:	4770      	bx	lr
 8016d28:	200b      	movs	r0, #11
 8016d2a:	e7b5      	b.n	8016c98 <rmw_validate_full_topic_name+0x28>
 8016d2c:	2203      	movs	r2, #3
 8016d2e:	602a      	str	r2, [r5, #0]
 8016d30:	2e00      	cmp	r6, #0
 8016d32:	d1f5      	bne.n	8016d20 <rmw_validate_full_topic_name+0xb0>
 8016d34:	e7b6      	b.n	8016ca4 <rmw_validate_full_topic_name+0x34>
 8016d36:	28f7      	cmp	r0, #247	@ 0xf7
 8016d38:	d802      	bhi.n	8016d40 <rmw_validate_full_topic_name+0xd0>
 8016d3a:	2000      	movs	r0, #0
 8016d3c:	6028      	str	r0, [r5, #0]
 8016d3e:	e7ab      	b.n	8016c98 <rmw_validate_full_topic_name+0x28>
 8016d40:	2307      	movs	r3, #7
 8016d42:	602b      	str	r3, [r5, #0]
 8016d44:	2e00      	cmp	r6, #0
 8016d46:	d0ad      	beq.n	8016ca4 <rmw_validate_full_topic_name+0x34>
 8016d48:	23f6      	movs	r3, #246	@ 0xf6
 8016d4a:	e7e9      	b.n	8016d20 <rmw_validate_full_topic_name+0xb0>
 8016d4c:	2205      	movs	r2, #5
 8016d4e:	602a      	str	r2, [r5, #0]
 8016d50:	2e00      	cmp	r6, #0
 8016d52:	d1e5      	bne.n	8016d20 <rmw_validate_full_topic_name+0xb0>
 8016d54:	e7a6      	b.n	8016ca4 <rmw_validate_full_topic_name+0x34>
 8016d56:	bf00      	nop
 8016d58:	0801e17a 	.word	0x0801e17a

08016d5c <rmw_validate_namespace_with_size>:
 8016d5c:	b340      	cbz	r0, 8016db0 <rmw_validate_namespace_with_size+0x54>
 8016d5e:	b570      	push	{r4, r5, r6, lr}
 8016d60:	4614      	mov	r4, r2
 8016d62:	b0c2      	sub	sp, #264	@ 0x108
 8016d64:	b332      	cbz	r2, 8016db4 <rmw_validate_namespace_with_size+0x58>
 8016d66:	2901      	cmp	r1, #1
 8016d68:	460d      	mov	r5, r1
 8016d6a:	461e      	mov	r6, r3
 8016d6c:	d102      	bne.n	8016d74 <rmw_validate_namespace_with_size+0x18>
 8016d6e:	7803      	ldrb	r3, [r0, #0]
 8016d70:	2b2f      	cmp	r3, #47	@ 0x2f
 8016d72:	d012      	beq.n	8016d9a <rmw_validate_namespace_with_size+0x3e>
 8016d74:	aa01      	add	r2, sp, #4
 8016d76:	4669      	mov	r1, sp
 8016d78:	f7ff ff7a 	bl	8016c70 <rmw_validate_full_topic_name>
 8016d7c:	b978      	cbnz	r0, 8016d9e <rmw_validate_namespace_with_size+0x42>
 8016d7e:	9b00      	ldr	r3, [sp, #0]
 8016d80:	b14b      	cbz	r3, 8016d96 <rmw_validate_namespace_with_size+0x3a>
 8016d82:	2b07      	cmp	r3, #7
 8016d84:	d007      	beq.n	8016d96 <rmw_validate_namespace_with_size+0x3a>
 8016d86:	1e5a      	subs	r2, r3, #1
 8016d88:	2a05      	cmp	r2, #5
 8016d8a:	d82b      	bhi.n	8016de4 <rmw_validate_namespace_with_size+0x88>
 8016d8c:	e8df f002 	tbb	[pc, r2]
 8016d90:	1e212427 	.word	0x1e212427
 8016d94:	141b      	.short	0x141b
 8016d96:	2df5      	cmp	r5, #245	@ 0xf5
 8016d98:	d803      	bhi.n	8016da2 <rmw_validate_namespace_with_size+0x46>
 8016d9a:	2000      	movs	r0, #0
 8016d9c:	6020      	str	r0, [r4, #0]
 8016d9e:	b042      	add	sp, #264	@ 0x108
 8016da0:	bd70      	pop	{r4, r5, r6, pc}
 8016da2:	2307      	movs	r3, #7
 8016da4:	6023      	str	r3, [r4, #0]
 8016da6:	2e00      	cmp	r6, #0
 8016da8:	d0f9      	beq.n	8016d9e <rmw_validate_namespace_with_size+0x42>
 8016daa:	23f4      	movs	r3, #244	@ 0xf4
 8016dac:	6033      	str	r3, [r6, #0]
 8016dae:	e7f6      	b.n	8016d9e <rmw_validate_namespace_with_size+0x42>
 8016db0:	200b      	movs	r0, #11
 8016db2:	4770      	bx	lr
 8016db4:	200b      	movs	r0, #11
 8016db6:	e7f2      	b.n	8016d9e <rmw_validate_namespace_with_size+0x42>
 8016db8:	2306      	movs	r3, #6
 8016dba:	6023      	str	r3, [r4, #0]
 8016dbc:	2e00      	cmp	r6, #0
 8016dbe:	d0ee      	beq.n	8016d9e <rmw_validate_namespace_with_size+0x42>
 8016dc0:	9b01      	ldr	r3, [sp, #4]
 8016dc2:	6033      	str	r3, [r6, #0]
 8016dc4:	e7eb      	b.n	8016d9e <rmw_validate_namespace_with_size+0x42>
 8016dc6:	2305      	movs	r3, #5
 8016dc8:	6023      	str	r3, [r4, #0]
 8016dca:	e7f7      	b.n	8016dbc <rmw_validate_namespace_with_size+0x60>
 8016dcc:	2304      	movs	r3, #4
 8016dce:	6023      	str	r3, [r4, #0]
 8016dd0:	e7f4      	b.n	8016dbc <rmw_validate_namespace_with_size+0x60>
 8016dd2:	2303      	movs	r3, #3
 8016dd4:	6023      	str	r3, [r4, #0]
 8016dd6:	e7f1      	b.n	8016dbc <rmw_validate_namespace_with_size+0x60>
 8016dd8:	2302      	movs	r3, #2
 8016dda:	6023      	str	r3, [r4, #0]
 8016ddc:	e7ee      	b.n	8016dbc <rmw_validate_namespace_with_size+0x60>
 8016dde:	2301      	movs	r3, #1
 8016de0:	6023      	str	r3, [r4, #0]
 8016de2:	e7eb      	b.n	8016dbc <rmw_validate_namespace_with_size+0x60>
 8016de4:	4a03      	ldr	r2, [pc, #12]	@ (8016df4 <rmw_validate_namespace_with_size+0x98>)
 8016de6:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8016dea:	a802      	add	r0, sp, #8
 8016dec:	f7ff fcda 	bl	80167a4 <rcutils_snprintf>
 8016df0:	2001      	movs	r0, #1
 8016df2:	e7d4      	b.n	8016d9e <rmw_validate_namespace_with_size+0x42>
 8016df4:	0801da48 	.word	0x0801da48

08016df8 <rmw_validate_namespace>:
 8016df8:	b168      	cbz	r0, 8016e16 <rmw_validate_namespace+0x1e>
 8016dfa:	b570      	push	{r4, r5, r6, lr}
 8016dfc:	460d      	mov	r5, r1
 8016dfe:	4616      	mov	r6, r2
 8016e00:	4604      	mov	r4, r0
 8016e02:	f7e9 f9ef 	bl	80001e4 <strlen>
 8016e06:	4633      	mov	r3, r6
 8016e08:	4601      	mov	r1, r0
 8016e0a:	462a      	mov	r2, r5
 8016e0c:	4620      	mov	r0, r4
 8016e0e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8016e12:	f7ff bfa3 	b.w	8016d5c <rmw_validate_namespace_with_size>
 8016e16:	200b      	movs	r0, #11
 8016e18:	4770      	bx	lr
 8016e1a:	bf00      	nop

08016e1c <rmw_namespace_validation_result_string>:
 8016e1c:	2807      	cmp	r0, #7
 8016e1e:	bf9a      	itte	ls
 8016e20:	4b02      	ldrls	r3, [pc, #8]	@ (8016e2c <rmw_namespace_validation_result_string+0x10>)
 8016e22:	f853 0020 	ldrls.w	r0, [r3, r0, lsl #2]
 8016e26:	4802      	ldrhi	r0, [pc, #8]	@ (8016e30 <rmw_namespace_validation_result_string+0x14>)
 8016e28:	4770      	bx	lr
 8016e2a:	bf00      	nop
 8016e2c:	0801dc40 	.word	0x0801dc40
 8016e30:	0801da98 	.word	0x0801da98

08016e34 <rmw_validate_node_name>:
 8016e34:	2800      	cmp	r0, #0
 8016e36:	d03b      	beq.n	8016eb0 <rmw_validate_node_name+0x7c>
 8016e38:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016e3c:	460d      	mov	r5, r1
 8016e3e:	2900      	cmp	r1, #0
 8016e40:	d038      	beq.n	8016eb4 <rmw_validate_node_name+0x80>
 8016e42:	4616      	mov	r6, r2
 8016e44:	4604      	mov	r4, r0
 8016e46:	f7e9 f9cd 	bl	80001e4 <strlen>
 8016e4a:	b1e0      	cbz	r0, 8016e86 <rmw_validate_node_name+0x52>
 8016e4c:	1e63      	subs	r3, r4, #1
 8016e4e:	eb03 0800 	add.w	r8, r3, r0
 8016e52:	f1c4 0101 	rsb	r1, r4, #1
 8016e56:	18cf      	adds	r7, r1, r3
 8016e58:	f813 ef01 	ldrb.w	lr, [r3, #1]!
 8016e5c:	f1ae 0230 	sub.w	r2, lr, #48	@ 0x30
 8016e60:	f02e 0c20 	bic.w	ip, lr, #32
 8016e64:	2a09      	cmp	r2, #9
 8016e66:	f1ac 0c41 	sub.w	ip, ip, #65	@ 0x41
 8016e6a:	d914      	bls.n	8016e96 <rmw_validate_node_name+0x62>
 8016e6c:	f1bc 0f19 	cmp.w	ip, #25
 8016e70:	d911      	bls.n	8016e96 <rmw_validate_node_name+0x62>
 8016e72:	f1be 0f5f 	cmp.w	lr, #95	@ 0x5f
 8016e76:	d00e      	beq.n	8016e96 <rmw_validate_node_name+0x62>
 8016e78:	2302      	movs	r3, #2
 8016e7a:	602b      	str	r3, [r5, #0]
 8016e7c:	b106      	cbz	r6, 8016e80 <rmw_validate_node_name+0x4c>
 8016e7e:	6037      	str	r7, [r6, #0]
 8016e80:	2000      	movs	r0, #0
 8016e82:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016e86:	2301      	movs	r3, #1
 8016e88:	602b      	str	r3, [r5, #0]
 8016e8a:	2e00      	cmp	r6, #0
 8016e8c:	d0f8      	beq.n	8016e80 <rmw_validate_node_name+0x4c>
 8016e8e:	2000      	movs	r0, #0
 8016e90:	6030      	str	r0, [r6, #0]
 8016e92:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016e96:	4543      	cmp	r3, r8
 8016e98:	d1dd      	bne.n	8016e56 <rmw_validate_node_name+0x22>
 8016e9a:	7822      	ldrb	r2, [r4, #0]
 8016e9c:	4b0d      	ldr	r3, [pc, #52]	@ (8016ed4 <rmw_validate_node_name+0xa0>)
 8016e9e:	5cd3      	ldrb	r3, [r2, r3]
 8016ea0:	f013 0304 	ands.w	r3, r3, #4
 8016ea4:	d110      	bne.n	8016ec8 <rmw_validate_node_name+0x94>
 8016ea6:	28ff      	cmp	r0, #255	@ 0xff
 8016ea8:	d806      	bhi.n	8016eb8 <rmw_validate_node_name+0x84>
 8016eaa:	602b      	str	r3, [r5, #0]
 8016eac:	4618      	mov	r0, r3
 8016eae:	e7e8      	b.n	8016e82 <rmw_validate_node_name+0x4e>
 8016eb0:	200b      	movs	r0, #11
 8016eb2:	4770      	bx	lr
 8016eb4:	200b      	movs	r0, #11
 8016eb6:	e7e4      	b.n	8016e82 <rmw_validate_node_name+0x4e>
 8016eb8:	2204      	movs	r2, #4
 8016eba:	602a      	str	r2, [r5, #0]
 8016ebc:	2e00      	cmp	r6, #0
 8016ebe:	d0df      	beq.n	8016e80 <rmw_validate_node_name+0x4c>
 8016ec0:	22fe      	movs	r2, #254	@ 0xfe
 8016ec2:	6032      	str	r2, [r6, #0]
 8016ec4:	4618      	mov	r0, r3
 8016ec6:	e7dc      	b.n	8016e82 <rmw_validate_node_name+0x4e>
 8016ec8:	2303      	movs	r3, #3
 8016eca:	602b      	str	r3, [r5, #0]
 8016ecc:	2e00      	cmp	r6, #0
 8016ece:	d1de      	bne.n	8016e8e <rmw_validate_node_name+0x5a>
 8016ed0:	e7d6      	b.n	8016e80 <rmw_validate_node_name+0x4c>
 8016ed2:	bf00      	nop
 8016ed4:	0801e17a 	.word	0x0801e17a

08016ed8 <rmw_node_name_validation_result_string>:
 8016ed8:	2804      	cmp	r0, #4
 8016eda:	bf9a      	itte	ls
 8016edc:	4b02      	ldrls	r3, [pc, #8]	@ (8016ee8 <rmw_node_name_validation_result_string+0x10>)
 8016ede:	f853 0020 	ldrls.w	r0, [r3, r0, lsl #2]
 8016ee2:	4802      	ldrhi	r0, [pc, #8]	@ (8016eec <rmw_node_name_validation_result_string+0x14>)
 8016ee4:	4770      	bx	lr
 8016ee6:	bf00      	nop
 8016ee8:	0801dd4c 	.word	0x0801dd4c
 8016eec:	0801dc60 	.word	0x0801dc60

08016ef0 <get_memory>:
 8016ef0:	4603      	mov	r3, r0
 8016ef2:	6840      	ldr	r0, [r0, #4]
 8016ef4:	b158      	cbz	r0, 8016f0e <get_memory+0x1e>
 8016ef6:	6842      	ldr	r2, [r0, #4]
 8016ef8:	605a      	str	r2, [r3, #4]
 8016efa:	b10a      	cbz	r2, 8016f00 <get_memory+0x10>
 8016efc:	2100      	movs	r1, #0
 8016efe:	6011      	str	r1, [r2, #0]
 8016f00:	681a      	ldr	r2, [r3, #0]
 8016f02:	6042      	str	r2, [r0, #4]
 8016f04:	b102      	cbz	r2, 8016f08 <get_memory+0x18>
 8016f06:	6010      	str	r0, [r2, #0]
 8016f08:	2200      	movs	r2, #0
 8016f0a:	6002      	str	r2, [r0, #0]
 8016f0c:	6018      	str	r0, [r3, #0]
 8016f0e:	4770      	bx	lr

08016f10 <put_memory>:
 8016f10:	680b      	ldr	r3, [r1, #0]
 8016f12:	b10b      	cbz	r3, 8016f18 <put_memory+0x8>
 8016f14:	684a      	ldr	r2, [r1, #4]
 8016f16:	605a      	str	r2, [r3, #4]
 8016f18:	684a      	ldr	r2, [r1, #4]
 8016f1a:	b102      	cbz	r2, 8016f1e <put_memory+0xe>
 8016f1c:	6013      	str	r3, [r2, #0]
 8016f1e:	6803      	ldr	r3, [r0, #0]
 8016f20:	428b      	cmp	r3, r1
 8016f22:	6843      	ldr	r3, [r0, #4]
 8016f24:	bf08      	it	eq
 8016f26:	6002      	streq	r2, [r0, #0]
 8016f28:	604b      	str	r3, [r1, #4]
 8016f2a:	b103      	cbz	r3, 8016f2e <put_memory+0x1e>
 8016f2c:	6019      	str	r1, [r3, #0]
 8016f2e:	2300      	movs	r3, #0
 8016f30:	600b      	str	r3, [r1, #0]
 8016f32:	6041      	str	r1, [r0, #4]
 8016f34:	4770      	bx	lr
 8016f36:	bf00      	nop

08016f38 <rmw_destroy_client>:
 8016f38:	b570      	push	{r4, r5, r6, lr}
 8016f3a:	b128      	cbz	r0, 8016f48 <rmw_destroy_client+0x10>
 8016f3c:	4604      	mov	r4, r0
 8016f3e:	6800      	ldr	r0, [r0, #0]
 8016f40:	460d      	mov	r5, r1
 8016f42:	f7f7 ffe7 	bl	800ef14 <is_uxrce_rmw_identifier_valid>
 8016f46:	b910      	cbnz	r0, 8016f4e <rmw_destroy_client+0x16>
 8016f48:	2401      	movs	r4, #1
 8016f4a:	4620      	mov	r0, r4
 8016f4c:	bd70      	pop	{r4, r5, r6, pc}
 8016f4e:	6863      	ldr	r3, [r4, #4]
 8016f50:	2b00      	cmp	r3, #0
 8016f52:	d0f9      	beq.n	8016f48 <rmw_destroy_client+0x10>
 8016f54:	2d00      	cmp	r5, #0
 8016f56:	d0f7      	beq.n	8016f48 <rmw_destroy_client+0x10>
 8016f58:	6828      	ldr	r0, [r5, #0]
 8016f5a:	f7f7 ffdb 	bl	800ef14 <is_uxrce_rmw_identifier_valid>
 8016f5e:	2800      	cmp	r0, #0
 8016f60:	d0f2      	beq.n	8016f48 <rmw_destroy_client+0x10>
 8016f62:	686e      	ldr	r6, [r5, #4]
 8016f64:	2e00      	cmp	r6, #0
 8016f66:	d0ef      	beq.n	8016f48 <rmw_destroy_client+0x10>
 8016f68:	6864      	ldr	r4, [r4, #4]
 8016f6a:	6932      	ldr	r2, [r6, #16]
 8016f6c:	6920      	ldr	r0, [r4, #16]
 8016f6e:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 8016f72:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8016f76:	6819      	ldr	r1, [r3, #0]
 8016f78:	f002 fb08 	bl	801958c <uxr_buffer_cancel_data>
 8016f7c:	4602      	mov	r2, r0
 8016f7e:	6920      	ldr	r0, [r4, #16]
 8016f80:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 8016f84:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 8016f88:	f7f7 ff44 	bl	800ee14 <run_xrce_session>
 8016f8c:	6920      	ldr	r0, [r4, #16]
 8016f8e:	6932      	ldr	r2, [r6, #16]
 8016f90:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 8016f94:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8016f98:	6819      	ldr	r1, [r3, #0]
 8016f9a:	f7f9 fc2b 	bl	80107f4 <uxr_buffer_delete_entity>
 8016f9e:	4602      	mov	r2, r0
 8016fa0:	6920      	ldr	r0, [r4, #16]
 8016fa2:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 8016fa6:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 8016faa:	f7f7 ff33 	bl	800ee14 <run_xrce_session>
 8016fae:	2800      	cmp	r0, #0
 8016fb0:	4628      	mov	r0, r5
 8016fb2:	bf14      	ite	ne
 8016fb4:	2400      	movne	r4, #0
 8016fb6:	2402      	moveq	r4, #2
 8016fb8:	f7f7 fe14 	bl	800ebe4 <rmw_uxrce_fini_client_memory>
 8016fbc:	e7c5      	b.n	8016f4a <rmw_destroy_client+0x12>
 8016fbe:	bf00      	nop

08016fc0 <rmw_get_implementation_identifier>:
 8016fc0:	4b01      	ldr	r3, [pc, #4]	@ (8016fc8 <rmw_get_implementation_identifier+0x8>)
 8016fc2:	6818      	ldr	r0, [r3, #0]
 8016fc4:	4770      	bx	lr
 8016fc6:	bf00      	nop
 8016fc8:	0801dd78 	.word	0x0801dd78

08016fcc <rmw_init_options_init>:
 8016fcc:	b084      	sub	sp, #16
 8016fce:	b5f0      	push	{r4, r5, r6, r7, lr}
 8016fd0:	b083      	sub	sp, #12
 8016fd2:	ad09      	add	r5, sp, #36	@ 0x24
 8016fd4:	e885 000e 	stmia.w	r5, {r1, r2, r3}
 8016fd8:	b130      	cbz	r0, 8016fe8 <rmw_init_options_init+0x1c>
 8016fda:	4604      	mov	r4, r0
 8016fdc:	4628      	mov	r0, r5
 8016fde:	f7f7 f9f3 	bl	800e3c8 <rcutils_allocator_is_valid>
 8016fe2:	b108      	cbz	r0, 8016fe8 <rmw_init_options_init+0x1c>
 8016fe4:	68a6      	ldr	r6, [r4, #8]
 8016fe6:	b12e      	cbz	r6, 8016ff4 <rmw_init_options_init+0x28>
 8016fe8:	200b      	movs	r0, #11
 8016fea:	b003      	add	sp, #12
 8016fec:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8016ff0:	b004      	add	sp, #16
 8016ff2:	4770      	bx	lr
 8016ff4:	2200      	movs	r2, #0
 8016ff6:	2300      	movs	r3, #0
 8016ff8:	e9c4 2300 	strd	r2, r3, [r4]
 8016ffc:	4b22      	ldr	r3, [pc, #136]	@ (8017088 <rmw_init_options_init+0xbc>)
 8016ffe:	f8df e098 	ldr.w	lr, [pc, #152]	@ 8017098 <rmw_init_options_init+0xcc>
 8017002:	681b      	ldr	r3, [r3, #0]
 8017004:	60a3      	str	r3, [r4, #8]
 8017006:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8017008:	f104 0c20 	add.w	ip, r4, #32
 801700c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8017010:	466f      	mov	r7, sp
 8017012:	682b      	ldr	r3, [r5, #0]
 8017014:	f8cc 3000 	str.w	r3, [ip]
 8017018:	4638      	mov	r0, r7
 801701a:	f8c4 e01c 	str.w	lr, [r4, #28]
 801701e:	60e6      	str	r6, [r4, #12]
 8017020:	f7ff fd76 	bl	8016b10 <rmw_get_default_security_options>
 8017024:	e897 0003 	ldmia.w	r7, {r0, r1}
 8017028:	f104 0310 	add.w	r3, r4, #16
 801702c:	e883 0003 	stmia.w	r3, {r0, r1}
 8017030:	2203      	movs	r2, #3
 8017032:	4816      	ldr	r0, [pc, #88]	@ (801708c <rmw_init_options_init+0xc0>)
 8017034:	4916      	ldr	r1, [pc, #88]	@ (8017090 <rmw_init_options_init+0xc4>)
 8017036:	7626      	strb	r6, [r4, #24]
 8017038:	f7f7 fd14 	bl	800ea64 <rmw_uxrce_init_init_options_impl_memory>
 801703c:	4813      	ldr	r0, [pc, #76]	@ (801708c <rmw_init_options_init+0xc0>)
 801703e:	f7ff ff57 	bl	8016ef0 <get_memory>
 8017042:	b1f0      	cbz	r0, 8017082 <rmw_init_options_init+0xb6>
 8017044:	4a13      	ldr	r2, [pc, #76]	@ (8017094 <rmw_init_options_init+0xc8>)
 8017046:	6883      	ldr	r3, [r0, #8]
 8017048:	6851      	ldr	r1, [r2, #4]
 801704a:	7810      	ldrb	r0, [r2, #0]
 801704c:	6363      	str	r3, [r4, #52]	@ 0x34
 801704e:	7418      	strb	r0, [r3, #16]
 8017050:	6159      	str	r1, [r3, #20]
 8017052:	68d1      	ldr	r1, [r2, #12]
 8017054:	61d9      	str	r1, [r3, #28]
 8017056:	6911      	ldr	r1, [r2, #16]
 8017058:	6219      	str	r1, [r3, #32]
 801705a:	6951      	ldr	r1, [r2, #20]
 801705c:	6892      	ldr	r2, [r2, #8]
 801705e:	619a      	str	r2, [r3, #24]
 8017060:	6259      	str	r1, [r3, #36]	@ 0x24
 8017062:	f7fb f825 	bl	80120b0 <uxr_nanos>
 8017066:	f003 fe8b 	bl	801ad80 <srand>
 801706a:	f003 feb7 	bl	801addc <rand>
 801706e:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8017070:	6298      	str	r0, [r3, #40]	@ 0x28
 8017072:	2800      	cmp	r0, #0
 8017074:	d0f9      	beq.n	801706a <rmw_init_options_init+0x9e>
 8017076:	2000      	movs	r0, #0
 8017078:	b003      	add	sp, #12
 801707a:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 801707e:	b004      	add	sp, #16
 8017080:	4770      	bx	lr
 8017082:	2001      	movs	r0, #1
 8017084:	e7b1      	b.n	8016fea <rmw_init_options_init+0x1e>
 8017086:	bf00      	nop
 8017088:	0801dd78 	.word	0x0801dd78
 801708c:	2000c04c 	.word	0x2000c04c
 8017090:	200078e8 	.word	0x200078e8
 8017094:	20007774 	.word	0x20007774
 8017098:	0801d7dc 	.word	0x0801d7dc

0801709c <rmw_init_options_copy>:
 801709c:	b570      	push	{r4, r5, r6, lr}
 801709e:	b158      	cbz	r0, 80170b8 <rmw_init_options_copy+0x1c>
 80170a0:	460d      	mov	r5, r1
 80170a2:	b149      	cbz	r1, 80170b8 <rmw_init_options_copy+0x1c>
 80170a4:	4604      	mov	r4, r0
 80170a6:	6880      	ldr	r0, [r0, #8]
 80170a8:	b120      	cbz	r0, 80170b4 <rmw_init_options_copy+0x18>
 80170aa:	4b1e      	ldr	r3, [pc, #120]	@ (8017124 <rmw_init_options_copy+0x88>)
 80170ac:	6819      	ldr	r1, [r3, #0]
 80170ae:	f7e9 f88f 	bl	80001d0 <strcmp>
 80170b2:	bb90      	cbnz	r0, 801711a <rmw_init_options_copy+0x7e>
 80170b4:	68ab      	ldr	r3, [r5, #8]
 80170b6:	b113      	cbz	r3, 80170be <rmw_init_options_copy+0x22>
 80170b8:	250b      	movs	r5, #11
 80170ba:	4628      	mov	r0, r5
 80170bc:	bd70      	pop	{r4, r5, r6, pc}
 80170be:	4623      	mov	r3, r4
 80170c0:	462a      	mov	r2, r5
 80170c2:	f104 0630 	add.w	r6, r4, #48	@ 0x30
 80170c6:	f8d3 c000 	ldr.w	ip, [r3]
 80170ca:	6858      	ldr	r0, [r3, #4]
 80170cc:	6899      	ldr	r1, [r3, #8]
 80170ce:	f8d3 e00c 	ldr.w	lr, [r3, #12]
 80170d2:	f8c2 e00c 	str.w	lr, [r2, #12]
 80170d6:	3310      	adds	r3, #16
 80170d8:	42b3      	cmp	r3, r6
 80170da:	f8c2 c000 	str.w	ip, [r2]
 80170de:	6050      	str	r0, [r2, #4]
 80170e0:	6091      	str	r1, [r2, #8]
 80170e2:	f102 0210 	add.w	r2, r2, #16
 80170e6:	d1ee      	bne.n	80170c6 <rmw_init_options_copy+0x2a>
 80170e8:	6819      	ldr	r1, [r3, #0]
 80170ea:	685b      	ldr	r3, [r3, #4]
 80170ec:	480e      	ldr	r0, [pc, #56]	@ (8017128 <rmw_init_options_copy+0x8c>)
 80170ee:	6053      	str	r3, [r2, #4]
 80170f0:	6011      	str	r1, [r2, #0]
 80170f2:	f7ff fefd 	bl	8016ef0 <get_memory>
 80170f6:	b198      	cbz	r0, 8017120 <rmw_init_options_copy+0x84>
 80170f8:	6883      	ldr	r3, [r0, #8]
 80170fa:	636b      	str	r3, [r5, #52]	@ 0x34
 80170fc:	6b62      	ldr	r2, [r4, #52]	@ 0x34
 80170fe:	f102 0c10 	add.w	ip, r2, #16
 8017102:	f103 0410 	add.w	r4, r3, #16
 8017106:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 801710a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801710c:	e89c 0007 	ldmia.w	ip, {r0, r1, r2}
 8017110:	2500      	movs	r5, #0
 8017112:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8017116:	4628      	mov	r0, r5
 8017118:	bd70      	pop	{r4, r5, r6, pc}
 801711a:	250c      	movs	r5, #12
 801711c:	4628      	mov	r0, r5
 801711e:	bd70      	pop	{r4, r5, r6, pc}
 8017120:	2501      	movs	r5, #1
 8017122:	e7ca      	b.n	80170ba <rmw_init_options_copy+0x1e>
 8017124:	0801dd78 	.word	0x0801dd78
 8017128:	2000c04c 	.word	0x2000c04c

0801712c <rmw_init_options_fini>:
 801712c:	2800      	cmp	r0, #0
 801712e:	d03d      	beq.n	80171ac <rmw_init_options_fini+0x80>
 8017130:	b510      	push	{r4, lr}
 8017132:	4604      	mov	r4, r0
 8017134:	b08e      	sub	sp, #56	@ 0x38
 8017136:	3020      	adds	r0, #32
 8017138:	f7f7 f946 	bl	800e3c8 <rcutils_allocator_is_valid>
 801713c:	b360      	cbz	r0, 8017198 <rmw_init_options_fini+0x6c>
 801713e:	68a0      	ldr	r0, [r4, #8]
 8017140:	b120      	cbz	r0, 801714c <rmw_init_options_fini+0x20>
 8017142:	4b1c      	ldr	r3, [pc, #112]	@ (80171b4 <rmw_init_options_fini+0x88>)
 8017144:	6819      	ldr	r1, [r3, #0]
 8017146:	f7e9 f843 	bl	80001d0 <strcmp>
 801714a:	bb68      	cbnz	r0, 80171a8 <rmw_init_options_fini+0x7c>
 801714c:	4b1a      	ldr	r3, [pc, #104]	@ (80171b8 <rmw_init_options_fini+0x8c>)
 801714e:	6819      	ldr	r1, [r3, #0]
 8017150:	b331      	cbz	r1, 80171a0 <rmw_init_options_fini+0x74>
 8017152:	6b62      	ldr	r2, [r4, #52]	@ 0x34
 8017154:	e001      	b.n	801715a <rmw_init_options_fini+0x2e>
 8017156:	6849      	ldr	r1, [r1, #4]
 8017158:	b311      	cbz	r1, 80171a0 <rmw_init_options_fini+0x74>
 801715a:	688b      	ldr	r3, [r1, #8]
 801715c:	429a      	cmp	r2, r3
 801715e:	d1fa      	bne.n	8017156 <rmw_init_options_fini+0x2a>
 8017160:	4815      	ldr	r0, [pc, #84]	@ (80171b8 <rmw_init_options_fini+0x8c>)
 8017162:	f7ff fed5 	bl	8016f10 <put_memory>
 8017166:	4668      	mov	r0, sp
 8017168:	f7ff fcc2 	bl	8016af0 <rmw_get_zero_initialized_init_options>
 801716c:	46ee      	mov	lr, sp
 801716e:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8017172:	46a4      	mov	ip, r4
 8017174:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8017178:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 801717c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8017180:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8017184:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8017188:	e89e 0003 	ldmia.w	lr, {r0, r1}
 801718c:	e88c 0003 	stmia.w	ip, {r0, r1}
 8017190:	2300      	movs	r3, #0
 8017192:	4618      	mov	r0, r3
 8017194:	b00e      	add	sp, #56	@ 0x38
 8017196:	bd10      	pop	{r4, pc}
 8017198:	230b      	movs	r3, #11
 801719a:	4618      	mov	r0, r3
 801719c:	b00e      	add	sp, #56	@ 0x38
 801719e:	bd10      	pop	{r4, pc}
 80171a0:	2301      	movs	r3, #1
 80171a2:	4618      	mov	r0, r3
 80171a4:	b00e      	add	sp, #56	@ 0x38
 80171a6:	bd10      	pop	{r4, pc}
 80171a8:	230c      	movs	r3, #12
 80171aa:	e7f2      	b.n	8017192 <rmw_init_options_fini+0x66>
 80171ac:	230b      	movs	r3, #11
 80171ae:	4618      	mov	r0, r3
 80171b0:	4770      	bx	lr
 80171b2:	bf00      	nop
 80171b4:	0801dd78 	.word	0x0801dd78
 80171b8:	2000c04c 	.word	0x2000c04c

080171bc <rmw_init>:
 80171bc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80171c0:	b083      	sub	sp, #12
 80171c2:	2800      	cmp	r0, #0
 80171c4:	f000 80d3 	beq.w	801736e <rmw_init+0x1b2>
 80171c8:	460e      	mov	r6, r1
 80171ca:	2900      	cmp	r1, #0
 80171cc:	f000 80cf 	beq.w	801736e <rmw_init+0x1b2>
 80171d0:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 80171d2:	4605      	mov	r5, r0
 80171d4:	2b00      	cmp	r3, #0
 80171d6:	f000 80ca 	beq.w	801736e <rmw_init+0x1b2>
 80171da:	4b78      	ldr	r3, [pc, #480]	@ (80173bc <rmw_init+0x200>)
 80171dc:	6880      	ldr	r0, [r0, #8]
 80171de:	681f      	ldr	r7, [r3, #0]
 80171e0:	b128      	cbz	r0, 80171ee <rmw_init+0x32>
 80171e2:	4639      	mov	r1, r7
 80171e4:	f7e8 fff4 	bl	80001d0 <strcmp>
 80171e8:	2800      	cmp	r0, #0
 80171ea:	f040 80ca 	bne.w	8017382 <rmw_init+0x1c6>
 80171ee:	e9d5 2300 	ldrd	r2, r3, [r5]
 80171f2:	4c73      	ldr	r4, [pc, #460]	@ (80173c0 <rmw_init+0x204>)
 80171f4:	4973      	ldr	r1, [pc, #460]	@ (80173c4 <rmw_init+0x208>)
 80171f6:	4874      	ldr	r0, [pc, #464]	@ (80173c8 <rmw_init+0x20c>)
 80171f8:	60b7      	str	r7, [r6, #8]
 80171fa:	e9c6 2300 	strd	r2, r3, [r6]
 80171fe:	68eb      	ldr	r3, [r5, #12]
 8017200:	64b3      	str	r3, [r6, #72]	@ 0x48
 8017202:	2201      	movs	r2, #1
 8017204:	f7f7 fbce 	bl	800e9a4 <rmw_uxrce_init_session_memory>
 8017208:	4620      	mov	r0, r4
 801720a:	4970      	ldr	r1, [pc, #448]	@ (80173cc <rmw_init+0x210>)
 801720c:	2204      	movs	r2, #4
 801720e:	f7f7 fc09 	bl	800ea24 <rmw_uxrce_init_static_input_buffer_memory>
 8017212:	f04f 0800 	mov.w	r8, #0
 8017216:	486c      	ldr	r0, [pc, #432]	@ (80173c8 <rmw_init+0x20c>)
 8017218:	f884 800d 	strb.w	r8, [r4, #13]
 801721c:	f7ff fe68 	bl	8016ef0 <get_memory>
 8017220:	2800      	cmp	r0, #0
 8017222:	f000 80a9 	beq.w	8017378 <rmw_init+0x1bc>
 8017226:	6884      	ldr	r4, [r0, #8]
 8017228:	6b68      	ldr	r0, [r5, #52]	@ 0x34
 801722a:	6a41      	ldr	r1, [r0, #36]	@ 0x24
 801722c:	f890 c010 	ldrb.w	ip, [r0, #16]
 8017230:	e9d0 2306 	ldrd	r2, r3, [r0, #24]
 8017234:	9101      	str	r1, [sp, #4]
 8017236:	6a00      	ldr	r0, [r0, #32]
 8017238:	9000      	str	r0, [sp, #0]
 801723a:	f104 0910 	add.w	r9, r4, #16
 801723e:	4661      	mov	r1, ip
 8017240:	4648      	mov	r0, r9
 8017242:	f001 fbdb 	bl	80189fc <uxr_set_custom_transport_callbacks>
 8017246:	f504 5380 	add.w	r3, r4, #4096	@ 0x1000
 801724a:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 801724e:	e9c4 22e3 	strd	r2, r2, [r4, #908]	@ 0x38c
 8017252:	f504 725e 	add.w	r2, r4, #888	@ 0x378
 8017256:	e9c4 22e1 	strd	r2, r2, [r4, #900]	@ 0x384
 801725a:	495d      	ldr	r1, [pc, #372]	@ (80173d0 <rmw_init+0x214>)
 801725c:	f8c3 8594 	str.w	r8, [r3, #1428]	@ 0x594
 8017260:	f8c3 8598 	str.w	r8, [r3, #1432]	@ 0x598
 8017264:	f8c3 859c 	str.w	r8, [r3, #1436]	@ 0x59c
 8017268:	f8c3 85a0 	str.w	r8, [r3, #1440]	@ 0x5a0
 801726c:	4859      	ldr	r0, [pc, #356]	@ (80173d4 <rmw_init+0x218>)
 801726e:	e9c4 78da 	strd	r7, r8, [r4, #872]	@ 0x368
 8017272:	2201      	movs	r2, #1
 8017274:	64f4      	str	r4, [r6, #76]	@ 0x4c
 8017276:	f7f7 fb75 	bl	800e964 <rmw_uxrce_init_node_memory>
 801727a:	4957      	ldr	r1, [pc, #348]	@ (80173d8 <rmw_init+0x21c>)
 801727c:	4857      	ldr	r0, [pc, #348]	@ (80173dc <rmw_init+0x220>)
 801727e:	2205      	movs	r2, #5
 8017280:	f7f7 fb50 	bl	800e924 <rmw_uxrce_init_subscription_memory>
 8017284:	4956      	ldr	r1, [pc, #344]	@ (80173e0 <rmw_init+0x224>)
 8017286:	4857      	ldr	r0, [pc, #348]	@ (80173e4 <rmw_init+0x228>)
 8017288:	220a      	movs	r2, #10
 801728a:	f7f7 fb2b 	bl	800e8e4 <rmw_uxrce_init_publisher_memory>
 801728e:	4956      	ldr	r1, [pc, #344]	@ (80173e8 <rmw_init+0x22c>)
 8017290:	4856      	ldr	r0, [pc, #344]	@ (80173ec <rmw_init+0x230>)
 8017292:	2201      	movs	r2, #1
 8017294:	f7f7 fae6 	bl	800e864 <rmw_uxrce_init_service_memory>
 8017298:	4955      	ldr	r1, [pc, #340]	@ (80173f0 <rmw_init+0x234>)
 801729a:	4856      	ldr	r0, [pc, #344]	@ (80173f4 <rmw_init+0x238>)
 801729c:	2201      	movs	r2, #1
 801729e:	f7f7 fb01 	bl	800e8a4 <rmw_uxrce_init_client_memory>
 80172a2:	4955      	ldr	r1, [pc, #340]	@ (80173f8 <rmw_init+0x23c>)
 80172a4:	4855      	ldr	r0, [pc, #340]	@ (80173fc <rmw_init+0x240>)
 80172a6:	220f      	movs	r2, #15
 80172a8:	f7f7 fb9c 	bl	800e9e4 <rmw_uxrce_init_topic_memory>
 80172ac:	4954      	ldr	r1, [pc, #336]	@ (8017400 <rmw_init+0x244>)
 80172ae:	4855      	ldr	r0, [pc, #340]	@ (8017404 <rmw_init+0x248>)
 80172b0:	2203      	movs	r2, #3
 80172b2:	f7f7 fbd7 	bl	800ea64 <rmw_uxrce_init_init_options_impl_memory>
 80172b6:	4954      	ldr	r1, [pc, #336]	@ (8017408 <rmw_init+0x24c>)
 80172b8:	4854      	ldr	r0, [pc, #336]	@ (801740c <rmw_init+0x250>)
 80172ba:	2204      	movs	r2, #4
 80172bc:	f7f7 fbf2 	bl	800eaa4 <rmw_uxrce_init_wait_set_memory>
 80172c0:	4953      	ldr	r1, [pc, #332]	@ (8017410 <rmw_init+0x254>)
 80172c2:	4854      	ldr	r0, [pc, #336]	@ (8017414 <rmw_init+0x258>)
 80172c4:	2204      	movs	r2, #4
 80172c6:	f7f7 fc0d 	bl	800eae4 <rmw_uxrce_init_guard_condition_memory>
 80172ca:	6b69      	ldr	r1, [r5, #52]	@ 0x34
 80172cc:	6cf0      	ldr	r0, [r6, #76]	@ 0x4c
 80172ce:	4642      	mov	r2, r8
 80172d0:	f000 fd9e 	bl	8017e10 <rmw_uxrce_transport_init>
 80172d4:	4607      	mov	r7, r0
 80172d6:	2800      	cmp	r0, #0
 80172d8:	d158      	bne.n	801738c <rmw_init+0x1d0>
 80172da:	6b6b      	ldr	r3, [r5, #52]	@ 0x34
 80172dc:	f504 7528 	add.w	r5, r4, #672	@ 0x2a0
 80172e0:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80172e2:	f504 7122 	add.w	r1, r4, #648	@ 0x288
 80172e6:	4628      	mov	r0, r5
 80172e8:	f7f9 fd46 	bl	8010d78 <uxr_init_session>
 80172ec:	494a      	ldr	r1, [pc, #296]	@ (8017418 <rmw_init+0x25c>)
 80172ee:	4622      	mov	r2, r4
 80172f0:	4628      	mov	r0, r5
 80172f2:	f7f9 fd65 	bl	8010dc0 <uxr_set_topic_callback>
 80172f6:	4949      	ldr	r1, [pc, #292]	@ (801741c <rmw_init+0x260>)
 80172f8:	463a      	mov	r2, r7
 80172fa:	4628      	mov	r0, r5
 80172fc:	f7f9 fd5c 	bl	8010db8 <uxr_set_status_callback>
 8017300:	4947      	ldr	r1, [pc, #284]	@ (8017420 <rmw_init+0x264>)
 8017302:	463a      	mov	r2, r7
 8017304:	4628      	mov	r0, r5
 8017306:	f7f9 fd5f 	bl	8010dc8 <uxr_set_request_callback>
 801730a:	4946      	ldr	r1, [pc, #280]	@ (8017424 <rmw_init+0x268>)
 801730c:	463a      	mov	r2, r7
 801730e:	4628      	mov	r0, r5
 8017310:	f7f9 fd5e 	bl	8010dd0 <uxr_set_reply_callback>
 8017314:	f8b4 2298 	ldrh.w	r2, [r4, #664]	@ 0x298
 8017318:	2304      	movs	r3, #4
 801731a:	0092      	lsls	r2, r2, #2
 801731c:	f504 7165 	add.w	r1, r4, #916	@ 0x394
 8017320:	4628      	mov	r0, r5
 8017322:	f7f9 fd93 	bl	8010e4c <uxr_create_input_reliable_stream>
 8017326:	f8b4 2298 	ldrh.w	r2, [r4, #664]	@ 0x298
 801732a:	f8c4 0374 	str.w	r0, [r4, #884]	@ 0x374
 801732e:	0092      	lsls	r2, r2, #2
 8017330:	2304      	movs	r3, #4
 8017332:	f604 3194 	addw	r1, r4, #2964	@ 0xb94
 8017336:	4628      	mov	r0, r5
 8017338:	f7f9 fd60 	bl	8010dfc <uxr_create_output_reliable_stream>
 801733c:	f8c4 0378 	str.w	r0, [r4, #888]	@ 0x378
 8017340:	4628      	mov	r0, r5
 8017342:	f7f9 fd7d 	bl	8010e40 <uxr_create_input_best_effort_stream>
 8017346:	f504 519c 	add.w	r1, r4, #4992	@ 0x1380
 801734a:	f8c4 0380 	str.w	r0, [r4, #896]	@ 0x380
 801734e:	f8b4 2298 	ldrh.w	r2, [r4, #664]	@ 0x298
 8017352:	3114      	adds	r1, #20
 8017354:	4628      	mov	r0, r5
 8017356:	f7f9 fd3f 	bl	8010dd8 <uxr_create_output_best_effort_stream>
 801735a:	f8c4 037c 	str.w	r0, [r4, #892]	@ 0x37c
 801735e:	4628      	mov	r0, r5
 8017360:	f7fa faca 	bl	80118f8 <uxr_create_session>
 8017364:	b1f8      	cbz	r0, 80173a6 <rmw_init+0x1ea>
 8017366:	4638      	mov	r0, r7
 8017368:	b003      	add	sp, #12
 801736a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801736e:	270b      	movs	r7, #11
 8017370:	4638      	mov	r0, r7
 8017372:	b003      	add	sp, #12
 8017374:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8017378:	2701      	movs	r7, #1
 801737a:	4638      	mov	r0, r7
 801737c:	b003      	add	sp, #12
 801737e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8017382:	270c      	movs	r7, #12
 8017384:	4638      	mov	r0, r7
 8017386:	b003      	add	sp, #12
 8017388:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801738c:	4648      	mov	r0, r9
 801738e:	f001 fb77 	bl	8018a80 <uxr_close_custom_transport>
 8017392:	480d      	ldr	r0, [pc, #52]	@ (80173c8 <rmw_init+0x20c>)
 8017394:	4621      	mov	r1, r4
 8017396:	f7ff fdbb 	bl	8016f10 <put_memory>
 801739a:	4638      	mov	r0, r7
 801739c:	f8c6 804c 	str.w	r8, [r6, #76]	@ 0x4c
 80173a0:	b003      	add	sp, #12
 80173a2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80173a6:	4648      	mov	r0, r9
 80173a8:	f001 fb6a 	bl	8018a80 <uxr_close_custom_transport>
 80173ac:	4806      	ldr	r0, [pc, #24]	@ (80173c8 <rmw_init+0x20c>)
 80173ae:	4621      	mov	r1, r4
 80173b0:	f7ff fdae 	bl	8016f10 <put_memory>
 80173b4:	64f7      	str	r7, [r6, #76]	@ 0x4c
 80173b6:	2701      	movs	r7, #1
 80173b8:	e7d5      	b.n	8017366 <rmw_init+0x1aa>
 80173ba:	bf00      	nop
 80173bc:	0801dd78 	.word	0x0801dd78
 80173c0:	2000c09c 	.word	0x2000c09c
 80173c4:	20008348 	.word	0x20008348
 80173c8:	2000c08c 	.word	0x2000c08c
 80173cc:	200098f0 	.word	0x200098f0
 80173d0:	2000796c 	.word	0x2000796c
 80173d4:	2000c05c 	.word	0x2000c05c
 80173d8:	2000b9f0 	.word	0x2000b9f0
 80173dc:	2000c0ac 	.word	0x2000c0ac
 80173e0:	20007a10 	.word	0x20007a10
 80173e4:	2000c06c 	.word	0x2000c06c
 80173e8:	20008280 	.word	0x20008280
 80173ec:	2000c07c 	.word	0x2000c07c
 80173f0:	200077a0 	.word	0x200077a0
 80173f4:	20007790 	.word	0x20007790
 80173f8:	2000be28 	.word	0x2000be28
 80173fc:	2000c0bc 	.word	0x2000c0bc
 8017400:	200078e8 	.word	0x200078e8
 8017404:	2000c04c 	.word	0x2000c04c
 8017408:	2000bfcc 	.word	0x2000bfcc
 801740c:	2000c0cc 	.word	0x2000c0cc
 8017410:	20007868 	.word	0x20007868
 8017414:	2000c03c 	.word	0x2000c03c
 8017418:	0801a825 	.word	0x0801a825
 801741c:	0801a81d 	.word	0x0801a81d
 8017420:	0801a8bd 	.word	0x0801a8bd
 8017424:	0801a959 	.word	0x0801a959

08017428 <rmw_context_fini>:
 8017428:	4b17      	ldr	r3, [pc, #92]	@ (8017488 <rmw_context_fini+0x60>)
 801742a:	6cc1      	ldr	r1, [r0, #76]	@ 0x4c
 801742c:	b570      	push	{r4, r5, r6, lr}
 801742e:	681c      	ldr	r4, [r3, #0]
 8017430:	4605      	mov	r5, r0
 8017432:	b334      	cbz	r4, 8017482 <rmw_context_fini+0x5a>
 8017434:	2600      	movs	r6, #0
 8017436:	e9d4 4001 	ldrd	r4, r0, [r4, #4]
 801743a:	6902      	ldr	r2, [r0, #16]
 801743c:	428a      	cmp	r2, r1
 801743e:	d018      	beq.n	8017472 <rmw_context_fini+0x4a>
 8017440:	2c00      	cmp	r4, #0
 8017442:	d1f8      	bne.n	8017436 <rmw_context_fini+0xe>
 8017444:	b189      	cbz	r1, 801746a <rmw_context_fini+0x42>
 8017446:	f8d1 3388 	ldr.w	r3, [r1, #904]	@ 0x388
 801744a:	789b      	ldrb	r3, [r3, #2]
 801744c:	2b01      	cmp	r3, #1
 801744e:	f501 7028 	add.w	r0, r1, #672	@ 0x2a0
 8017452:	bf14      	ite	ne
 8017454:	210a      	movne	r1, #10
 8017456:	2100      	moveq	r1, #0
 8017458:	f7fa fa26 	bl	80118a8 <uxr_delete_session_retries>
 801745c:	6ce8      	ldr	r0, [r5, #76]	@ 0x4c
 801745e:	f7f7 fb61 	bl	800eb24 <rmw_uxrce_fini_session_memory>
 8017462:	6ce8      	ldr	r0, [r5, #76]	@ 0x4c
 8017464:	3010      	adds	r0, #16
 8017466:	f001 fb0b 	bl	8018a80 <uxr_close_custom_transport>
 801746a:	2300      	movs	r3, #0
 801746c:	64eb      	str	r3, [r5, #76]	@ 0x4c
 801746e:	4630      	mov	r0, r6
 8017470:	bd70      	pop	{r4, r5, r6, pc}
 8017472:	3018      	adds	r0, #24
 8017474:	f000 f90e 	bl	8017694 <rmw_destroy_node>
 8017478:	6ce9      	ldr	r1, [r5, #76]	@ 0x4c
 801747a:	4606      	mov	r6, r0
 801747c:	2c00      	cmp	r4, #0
 801747e:	d1da      	bne.n	8017436 <rmw_context_fini+0xe>
 8017480:	e7e0      	b.n	8017444 <rmw_context_fini+0x1c>
 8017482:	4626      	mov	r6, r4
 8017484:	e7de      	b.n	8017444 <rmw_context_fini+0x1c>
 8017486:	bf00      	nop
 8017488:	2000c05c 	.word	0x2000c05c

0801748c <create_topic>:
 801748c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017490:	4605      	mov	r5, r0
 8017492:	b084      	sub	sp, #16
 8017494:	4822      	ldr	r0, [pc, #136]	@ (8017520 <create_topic+0x94>)
 8017496:	460f      	mov	r7, r1
 8017498:	4616      	mov	r6, r2
 801749a:	f7ff fd29 	bl	8016ef0 <get_memory>
 801749e:	4604      	mov	r4, r0
 80174a0:	2800      	cmp	r0, #0
 80174a2:	d039      	beq.n	8017518 <create_topic+0x8c>
 80174a4:	692b      	ldr	r3, [r5, #16]
 80174a6:	6884      	ldr	r4, [r0, #8]
 80174a8:	f8df 807c 	ldr.w	r8, [pc, #124]	@ 8017528 <create_topic+0x9c>
 80174ac:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80174b0:	e9c4 6505 	strd	r6, r5, [r4, #20]
 80174b4:	f8b3 0596 	ldrh.w	r0, [r3, #1430]	@ 0x596
 80174b8:	1c42      	adds	r2, r0, #1
 80174ba:	2102      	movs	r1, #2
 80174bc:	f8a3 2596 	strh.w	r2, [r3, #1430]	@ 0x596
 80174c0:	f7f9 fb9a 	bl	8010bf8 <uxr_object_id>
 80174c4:	223c      	movs	r2, #60	@ 0x3c
 80174c6:	6120      	str	r0, [r4, #16]
 80174c8:	4641      	mov	r1, r8
 80174ca:	4638      	mov	r0, r7
 80174cc:	f7f7 fd08 	bl	800eee0 <generate_topic_name>
 80174d0:	b1f0      	cbz	r0, 8017510 <create_topic+0x84>
 80174d2:	4f14      	ldr	r7, [pc, #80]	@ (8017524 <create_topic+0x98>)
 80174d4:	4630      	mov	r0, r6
 80174d6:	2264      	movs	r2, #100	@ 0x64
 80174d8:	4639      	mov	r1, r7
 80174da:	f7f7 fcd1 	bl	800ee80 <generate_type_name>
 80174de:	b1b8      	cbz	r0, 8017510 <create_topic+0x84>
 80174e0:	6928      	ldr	r0, [r5, #16]
 80174e2:	2306      	movs	r3, #6
 80174e4:	f8d0 2384 	ldr.w	r2, [r0, #900]	@ 0x384
 80174e8:	f8cd 8000 	str.w	r8, [sp]
 80174ec:	e9cd 7301 	strd	r7, r3, [sp, #4]
 80174f0:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 80174f4:	6811      	ldr	r1, [r2, #0]
 80174f6:	696b      	ldr	r3, [r5, #20]
 80174f8:	6922      	ldr	r2, [r4, #16]
 80174fa:	f7f9 f9f9 	bl	80108f0 <uxr_buffer_create_topic_bin>
 80174fe:	4602      	mov	r2, r0
 8017500:	6928      	ldr	r0, [r5, #16]
 8017502:	f8d0 338c 	ldr.w	r3, [r0, #908]	@ 0x38c
 8017506:	f8d0 1384 	ldr.w	r1, [r0, #900]	@ 0x384
 801750a:	f7f7 fc83 	bl	800ee14 <run_xrce_session>
 801750e:	b918      	cbnz	r0, 8017518 <create_topic+0x8c>
 8017510:	4620      	mov	r0, r4
 8017512:	f7f7 fb7d 	bl	800ec10 <rmw_uxrce_fini_topic_memory>
 8017516:	2400      	movs	r4, #0
 8017518:	4620      	mov	r0, r4
 801751a:	b004      	add	sp, #16
 801751c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017520:	2000c0bc 	.word	0x2000c0bc
 8017524:	2000c1a8 	.word	0x2000c1a8
 8017528:	2000c16c 	.word	0x2000c16c

0801752c <destroy_topic>:
 801752c:	b538      	push	{r3, r4, r5, lr}
 801752e:	6985      	ldr	r5, [r0, #24]
 8017530:	b1d5      	cbz	r5, 8017568 <destroy_topic+0x3c>
 8017532:	4604      	mov	r4, r0
 8017534:	6928      	ldr	r0, [r5, #16]
 8017536:	6922      	ldr	r2, [r4, #16]
 8017538:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 801753c:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8017540:	6819      	ldr	r1, [r3, #0]
 8017542:	f7f9 f957 	bl	80107f4 <uxr_buffer_delete_entity>
 8017546:	4602      	mov	r2, r0
 8017548:	6928      	ldr	r0, [r5, #16]
 801754a:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 801754e:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 8017552:	f7f7 fc5f 	bl	800ee14 <run_xrce_session>
 8017556:	2800      	cmp	r0, #0
 8017558:	4620      	mov	r0, r4
 801755a:	bf14      	ite	ne
 801755c:	2400      	movne	r4, #0
 801755e:	2402      	moveq	r4, #2
 8017560:	f7f7 fb56 	bl	800ec10 <rmw_uxrce_fini_topic_memory>
 8017564:	4620      	mov	r0, r4
 8017566:	bd38      	pop	{r3, r4, r5, pc}
 8017568:	2401      	movs	r4, #1
 801756a:	4620      	mov	r0, r4
 801756c:	bd38      	pop	{r3, r4, r5, pc}
 801756e:	bf00      	nop

08017570 <create_node>:
 8017570:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8017574:	b083      	sub	sp, #12
 8017576:	2b00      	cmp	r3, #0
 8017578:	d05f      	beq.n	801763a <create_node+0xca>
 801757a:	4606      	mov	r6, r0
 801757c:	4835      	ldr	r0, [pc, #212]	@ (8017654 <create_node+0xe4>)
 801757e:	460f      	mov	r7, r1
 8017580:	4690      	mov	r8, r2
 8017582:	461d      	mov	r5, r3
 8017584:	f7ff fcb4 	bl	8016ef0 <get_memory>
 8017588:	2800      	cmp	r0, #0
 801758a:	d056      	beq.n	801763a <create_node+0xca>
 801758c:	6884      	ldr	r4, [r0, #8]
 801758e:	6ceb      	ldr	r3, [r5, #76]	@ 0x4c
 8017590:	6123      	str	r3, [r4, #16]
 8017592:	f7ff fd15 	bl	8016fc0 <rmw_get_implementation_identifier>
 8017596:	f104 092c 	add.w	r9, r4, #44	@ 0x2c
 801759a:	e9c4 0406 	strd	r0, r4, [r4, #24]
 801759e:	f8c4 9020 	str.w	r9, [r4, #32]
 80175a2:	4630      	mov	r0, r6
 80175a4:	f7e8 fe1e 	bl	80001e4 <strlen>
 80175a8:	1c42      	adds	r2, r0, #1
 80175aa:	2a3c      	cmp	r2, #60	@ 0x3c
 80175ac:	f104 0518 	add.w	r5, r4, #24
 80175b0:	d840      	bhi.n	8017634 <create_node+0xc4>
 80175b2:	4648      	mov	r0, r9
 80175b4:	4631      	mov	r1, r6
 80175b6:	f104 0968 	add.w	r9, r4, #104	@ 0x68
 80175ba:	f004 f8b6 	bl	801b72a <memcpy>
 80175be:	f8c4 9024 	str.w	r9, [r4, #36]	@ 0x24
 80175c2:	4638      	mov	r0, r7
 80175c4:	f7e8 fe0e 	bl	80001e4 <strlen>
 80175c8:	1c42      	adds	r2, r0, #1
 80175ca:	2a3c      	cmp	r2, #60	@ 0x3c
 80175cc:	d832      	bhi.n	8017634 <create_node+0xc4>
 80175ce:	4639      	mov	r1, r7
 80175d0:	4648      	mov	r0, r9
 80175d2:	f004 f8aa 	bl	801b72a <memcpy>
 80175d6:	6923      	ldr	r3, [r4, #16]
 80175d8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80175dc:	2101      	movs	r1, #1
 80175de:	f8b3 0594 	ldrh.w	r0, [r3, #1428]	@ 0x594
 80175e2:	1842      	adds	r2, r0, r1
 80175e4:	f8a3 2594 	strh.w	r2, [r3, #1428]	@ 0x594
 80175e8:	f7f9 fb06 	bl	8010bf8 <uxr_object_id>
 80175ec:	6160      	str	r0, [r4, #20]
 80175ee:	783b      	ldrb	r3, [r7, #0]
 80175f0:	2b2f      	cmp	r3, #47	@ 0x2f
 80175f2:	d127      	bne.n	8017644 <create_node+0xd4>
 80175f4:	787b      	ldrb	r3, [r7, #1]
 80175f6:	bb2b      	cbnz	r3, 8017644 <create_node+0xd4>
 80175f8:	4a17      	ldr	r2, [pc, #92]	@ (8017658 <create_node+0xe8>)
 80175fa:	4818      	ldr	r0, [pc, #96]	@ (801765c <create_node+0xec>)
 80175fc:	4633      	mov	r3, r6
 80175fe:	213c      	movs	r1, #60	@ 0x3c
 8017600:	f003 fe06 	bl	801b210 <sniprintf>
 8017604:	6920      	ldr	r0, [r4, #16]
 8017606:	4915      	ldr	r1, [pc, #84]	@ (801765c <create_node+0xec>)
 8017608:	f8d0 2384 	ldr.w	r2, [r0, #900]	@ 0x384
 801760c:	9100      	str	r1, [sp, #0]
 801760e:	2106      	movs	r1, #6
 8017610:	9101      	str	r1, [sp, #4]
 8017612:	6811      	ldr	r1, [r2, #0]
 8017614:	6962      	ldr	r2, [r4, #20]
 8017616:	fa1f f388 	uxth.w	r3, r8
 801761a:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 801761e:	f7f9 f935 	bl	801088c <uxr_buffer_create_participant_bin>
 8017622:	4602      	mov	r2, r0
 8017624:	6920      	ldr	r0, [r4, #16]
 8017626:	f8d0 338c 	ldr.w	r3, [r0, #908]	@ 0x38c
 801762a:	f8d0 1384 	ldr.w	r1, [r0, #900]	@ 0x384
 801762e:	f7f7 fbf1 	bl	800ee14 <run_xrce_session>
 8017632:	b918      	cbnz	r0, 801763c <create_node+0xcc>
 8017634:	4628      	mov	r0, r5
 8017636:	f7f7 fa7b 	bl	800eb30 <rmw_uxrce_fini_node_memory>
 801763a:	2500      	movs	r5, #0
 801763c:	4628      	mov	r0, r5
 801763e:	b003      	add	sp, #12
 8017640:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8017644:	4a06      	ldr	r2, [pc, #24]	@ (8017660 <create_node+0xf0>)
 8017646:	9600      	str	r6, [sp, #0]
 8017648:	463b      	mov	r3, r7
 801764a:	213c      	movs	r1, #60	@ 0x3c
 801764c:	4803      	ldr	r0, [pc, #12]	@ (801765c <create_node+0xec>)
 801764e:	f003 fddf 	bl	801b210 <sniprintf>
 8017652:	e7d7      	b.n	8017604 <create_node+0x94>
 8017654:	2000c05c 	.word	0x2000c05c
 8017658:	0801d5f4 	.word	0x0801d5f4
 801765c:	2000c20c 	.word	0x2000c20c
 8017660:	0801d7e4 	.word	0x0801d7e4

08017664 <rmw_create_node>:
 8017664:	b199      	cbz	r1, 801768e <rmw_create_node+0x2a>
 8017666:	780b      	ldrb	r3, [r1, #0]
 8017668:	468c      	mov	ip, r1
 801766a:	b183      	cbz	r3, 801768e <rmw_create_node+0x2a>
 801766c:	b410      	push	{r4}
 801766e:	4614      	mov	r4, r2
 8017670:	b14a      	cbz	r2, 8017686 <rmw_create_node+0x22>
 8017672:	7813      	ldrb	r3, [r2, #0]
 8017674:	b13b      	cbz	r3, 8017686 <rmw_create_node+0x22>
 8017676:	6c82      	ldr	r2, [r0, #72]	@ 0x48
 8017678:	4603      	mov	r3, r0
 801767a:	4621      	mov	r1, r4
 801767c:	4660      	mov	r0, ip
 801767e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8017682:	f7ff bf75 	b.w	8017570 <create_node>
 8017686:	2000      	movs	r0, #0
 8017688:	f85d 4b04 	ldr.w	r4, [sp], #4
 801768c:	4770      	bx	lr
 801768e:	2000      	movs	r0, #0
 8017690:	4770      	bx	lr
 8017692:	bf00      	nop

08017694 <rmw_destroy_node>:
 8017694:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017696:	b328      	cbz	r0, 80176e4 <rmw_destroy_node+0x50>
 8017698:	4607      	mov	r7, r0
 801769a:	6800      	ldr	r0, [r0, #0]
 801769c:	b120      	cbz	r0, 80176a8 <rmw_destroy_node+0x14>
 801769e:	4b36      	ldr	r3, [pc, #216]	@ (8017778 <rmw_destroy_node+0xe4>)
 80176a0:	6819      	ldr	r1, [r3, #0]
 80176a2:	f7e8 fd95 	bl	80001d0 <strcmp>
 80176a6:	b9e8      	cbnz	r0, 80176e4 <rmw_destroy_node+0x50>
 80176a8:	687d      	ldr	r5, [r7, #4]
 80176aa:	b1dd      	cbz	r5, 80176e4 <rmw_destroy_node+0x50>
 80176ac:	4b33      	ldr	r3, [pc, #204]	@ (801777c <rmw_destroy_node+0xe8>)
 80176ae:	681c      	ldr	r4, [r3, #0]
 80176b0:	2c00      	cmp	r4, #0
 80176b2:	d05f      	beq.n	8017774 <rmw_destroy_node+0xe0>
 80176b4:	2600      	movs	r6, #0
 80176b6:	e9d4 4101 	ldrd	r4, r1, [r4, #4]
 80176ba:	f8d1 3080 	ldr.w	r3, [r1, #128]	@ 0x80
 80176be:	429d      	cmp	r5, r3
 80176c0:	d013      	beq.n	80176ea <rmw_destroy_node+0x56>
 80176c2:	2c00      	cmp	r4, #0
 80176c4:	d1f7      	bne.n	80176b6 <rmw_destroy_node+0x22>
 80176c6:	4b2e      	ldr	r3, [pc, #184]	@ (8017780 <rmw_destroy_node+0xec>)
 80176c8:	681c      	ldr	r4, [r3, #0]
 80176ca:	b1c4      	cbz	r4, 80176fe <rmw_destroy_node+0x6a>
 80176cc:	e9d4 4101 	ldrd	r4, r1, [r4, #4]
 80176d0:	6a0b      	ldr	r3, [r1, #32]
 80176d2:	429d      	cmp	r5, r3
 80176d4:	d1f9      	bne.n	80176ca <rmw_destroy_node+0x36>
 80176d6:	317c      	adds	r1, #124	@ 0x7c
 80176d8:	4638      	mov	r0, r7
 80176da:	f000 fae5 	bl	8017ca8 <rmw_destroy_subscription>
 80176de:	2801      	cmp	r0, #1
 80176e0:	4606      	mov	r6, r0
 80176e2:	d1f2      	bne.n	80176ca <rmw_destroy_node+0x36>
 80176e4:	2601      	movs	r6, #1
 80176e6:	4630      	mov	r0, r6
 80176e8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80176ea:	3184      	adds	r1, #132	@ 0x84
 80176ec:	4638      	mov	r0, r7
 80176ee:	f7f7 f867 	bl	800e7c0 <rmw_destroy_publisher>
 80176f2:	2801      	cmp	r0, #1
 80176f4:	4606      	mov	r6, r0
 80176f6:	d0f5      	beq.n	80176e4 <rmw_destroy_node+0x50>
 80176f8:	2c00      	cmp	r4, #0
 80176fa:	d1dc      	bne.n	80176b6 <rmw_destroy_node+0x22>
 80176fc:	e7e3      	b.n	80176c6 <rmw_destroy_node+0x32>
 80176fe:	4b21      	ldr	r3, [pc, #132]	@ (8017784 <rmw_destroy_node+0xf0>)
 8017700:	681c      	ldr	r4, [r3, #0]
 8017702:	b16c      	cbz	r4, 8017720 <rmw_destroy_node+0x8c>
 8017704:	e9d4 4101 	ldrd	r4, r1, [r4, #4]
 8017708:	6f8b      	ldr	r3, [r1, #120]	@ 0x78
 801770a:	429d      	cmp	r5, r3
 801770c:	d1f9      	bne.n	8017702 <rmw_destroy_node+0x6e>
 801770e:	317c      	adds	r1, #124	@ 0x7c
 8017710:	4638      	mov	r0, r7
 8017712:	f000 f993 	bl	8017a3c <rmw_destroy_service>
 8017716:	2801      	cmp	r0, #1
 8017718:	4606      	mov	r6, r0
 801771a:	d0e3      	beq.n	80176e4 <rmw_destroy_node+0x50>
 801771c:	2c00      	cmp	r4, #0
 801771e:	d1f1      	bne.n	8017704 <rmw_destroy_node+0x70>
 8017720:	4b19      	ldr	r3, [pc, #100]	@ (8017788 <rmw_destroy_node+0xf4>)
 8017722:	681c      	ldr	r4, [r3, #0]
 8017724:	b16c      	cbz	r4, 8017742 <rmw_destroy_node+0xae>
 8017726:	e9d4 4101 	ldrd	r4, r1, [r4, #4]
 801772a:	6f8b      	ldr	r3, [r1, #120]	@ 0x78
 801772c:	429d      	cmp	r5, r3
 801772e:	d1f9      	bne.n	8017724 <rmw_destroy_node+0x90>
 8017730:	317c      	adds	r1, #124	@ 0x7c
 8017732:	4638      	mov	r0, r7
 8017734:	f7ff fc00 	bl	8016f38 <rmw_destroy_client>
 8017738:	2801      	cmp	r0, #1
 801773a:	4606      	mov	r6, r0
 801773c:	d0d2      	beq.n	80176e4 <rmw_destroy_node+0x50>
 801773e:	2c00      	cmp	r4, #0
 8017740:	d1f1      	bne.n	8017726 <rmw_destroy_node+0x92>
 8017742:	6928      	ldr	r0, [r5, #16]
 8017744:	696a      	ldr	r2, [r5, #20]
 8017746:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 801774a:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 801774e:	6819      	ldr	r1, [r3, #0]
 8017750:	f7f9 f850 	bl	80107f4 <uxr_buffer_delete_entity>
 8017754:	4602      	mov	r2, r0
 8017756:	6928      	ldr	r0, [r5, #16]
 8017758:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 801775c:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 8017760:	f7f7 fb58 	bl	800ee14 <run_xrce_session>
 8017764:	2800      	cmp	r0, #0
 8017766:	bf08      	it	eq
 8017768:	2602      	moveq	r6, #2
 801776a:	4638      	mov	r0, r7
 801776c:	f7f7 f9e0 	bl	800eb30 <rmw_uxrce_fini_node_memory>
 8017770:	4630      	mov	r0, r6
 8017772:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8017774:	4626      	mov	r6, r4
 8017776:	e7a6      	b.n	80176c6 <rmw_destroy_node+0x32>
 8017778:	0801dd78 	.word	0x0801dd78
 801777c:	2000c06c 	.word	0x2000c06c
 8017780:	2000c0ac 	.word	0x2000c0ac
 8017784:	2000c07c 	.word	0x2000c07c
 8017788:	20007790 	.word	0x20007790

0801778c <rmw_node_get_graph_guard_condition>:
 801778c:	6843      	ldr	r3, [r0, #4]
 801778e:	6918      	ldr	r0, [r3, #16]
 8017790:	f500 705a 	add.w	r0, r0, #872	@ 0x368
 8017794:	4770      	bx	lr
 8017796:	bf00      	nop

08017798 <rmw_send_request>:
 8017798:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801779c:	4604      	mov	r4, r0
 801779e:	6800      	ldr	r0, [r0, #0]
 80177a0:	b08b      	sub	sp, #44	@ 0x2c
 80177a2:	460e      	mov	r6, r1
 80177a4:	4615      	mov	r5, r2
 80177a6:	b128      	cbz	r0, 80177b4 <rmw_send_request+0x1c>
 80177a8:	4b21      	ldr	r3, [pc, #132]	@ (8017830 <rmw_send_request+0x98>)
 80177aa:	6819      	ldr	r1, [r3, #0]
 80177ac:	f7e8 fd10 	bl	80001d0 <strcmp>
 80177b0:	2800      	cmp	r0, #0
 80177b2:	d139      	bne.n	8017828 <rmw_send_request+0x90>
 80177b4:	6864      	ldr	r4, [r4, #4]
 80177b6:	6963      	ldr	r3, [r4, #20]
 80177b8:	f8d4 8078 	ldr.w	r8, [r4, #120]	@ 0x78
 80177bc:	689b      	ldr	r3, [r3, #8]
 80177be:	4798      	blx	r3
 80177c0:	f8d0 9004 	ldr.w	r9, [r0, #4]
 80177c4:	4630      	mov	r0, r6
 80177c6:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80177ca:	4798      	blx	r3
 80177cc:	f8d8 3010 	ldr.w	r3, [r8, #16]
 80177d0:	9000      	str	r0, [sp, #0]
 80177d2:	6922      	ldr	r2, [r4, #16]
 80177d4:	6f21      	ldr	r1, [r4, #112]	@ 0x70
 80177d6:	f503 7028 	add.w	r0, r3, #672	@ 0x2a0
 80177da:	ab02      	add	r3, sp, #8
 80177dc:	f7fa fd08 	bl	80121f0 <uxr_prepare_output_stream>
 80177e0:	2700      	movs	r7, #0
 80177e2:	6028      	str	r0, [r5, #0]
 80177e4:	606f      	str	r7, [r5, #4]
 80177e6:	b198      	cbz	r0, 8017810 <rmw_send_request+0x78>
 80177e8:	f8d9 3008 	ldr.w	r3, [r9, #8]
 80177ec:	a902      	add	r1, sp, #8
 80177ee:	4630      	mov	r0, r6
 80177f0:	4798      	blx	r3
 80177f2:	f894 3072 	ldrb.w	r3, [r4, #114]	@ 0x72
 80177f6:	f8d8 0010 	ldr.w	r0, [r8, #16]
 80177fa:	2b01      	cmp	r3, #1
 80177fc:	d00c      	beq.n	8017818 <rmw_send_request+0x80>
 80177fe:	6f61      	ldr	r1, [r4, #116]	@ 0x74
 8017800:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8017804:	f7f9 ff08 	bl	8011618 <uxr_run_session_until_confirm_delivery>
 8017808:	4638      	mov	r0, r7
 801780a:	b00b      	add	sp, #44	@ 0x2c
 801780c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8017810:	2001      	movs	r0, #1
 8017812:	b00b      	add	sp, #44	@ 0x2c
 8017814:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8017818:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 801781c:	f7f9 fb3c 	bl	8010e98 <uxr_flash_output_streams>
 8017820:	4638      	mov	r0, r7
 8017822:	b00b      	add	sp, #44	@ 0x2c
 8017824:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8017828:	200c      	movs	r0, #12
 801782a:	b00b      	add	sp, #44	@ 0x2c
 801782c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8017830:	0801dd78 	.word	0x0801dd78

08017834 <rmw_take_request>:
 8017834:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8017838:	4605      	mov	r5, r0
 801783a:	6800      	ldr	r0, [r0, #0]
 801783c:	b089      	sub	sp, #36	@ 0x24
 801783e:	460c      	mov	r4, r1
 8017840:	4690      	mov	r8, r2
 8017842:	461e      	mov	r6, r3
 8017844:	b128      	cbz	r0, 8017852 <rmw_take_request+0x1e>
 8017846:	4b28      	ldr	r3, [pc, #160]	@ (80178e8 <rmw_take_request+0xb4>)
 8017848:	6819      	ldr	r1, [r3, #0]
 801784a:	f7e8 fcc1 	bl	80001d0 <strcmp>
 801784e:	2800      	cmp	r0, #0
 8017850:	d146      	bne.n	80178e0 <rmw_take_request+0xac>
 8017852:	b10e      	cbz	r6, 8017858 <rmw_take_request+0x24>
 8017854:	2300      	movs	r3, #0
 8017856:	7033      	strb	r3, [r6, #0]
 8017858:	f8d5 9004 	ldr.w	r9, [r5, #4]
 801785c:	f7f7 fa5c 	bl	800ed18 <rmw_uxrce_clean_expired_static_input_buffer>
 8017860:	4648      	mov	r0, r9
 8017862:	f7f7 fa31 	bl	800ecc8 <rmw_uxrce_find_static_input_buffer_by_owner>
 8017866:	4607      	mov	r7, r0
 8017868:	b3b0      	cbz	r0, 80178d8 <rmw_take_request+0xa4>
 801786a:	6885      	ldr	r5, [r0, #8]
 801786c:	f8d5 3838 	ldr.w	r3, [r5, #2104]	@ 0x838
 8017870:	f8d5 283c 	ldr.w	r2, [r5, #2108]	@ 0x83c
 8017874:	e9c4 2308 	strd	r2, r3, [r4, #32]
 8017878:	f895 3837 	ldrb.w	r3, [r5, #2103]	@ 0x837
 801787c:	7423      	strb	r3, [r4, #16]
 801787e:	f8b5 3834 	ldrh.w	r3, [r5, #2100]	@ 0x834
 8017882:	f895 2836 	ldrb.w	r2, [r5, #2102]	@ 0x836
 8017886:	74e2      	strb	r2, [r4, #19]
 8017888:	f8a4 3011 	strh.w	r3, [r4, #17]
 801788c:	f8d5 2828 	ldr.w	r2, [r5, #2088]	@ 0x828
 8017890:	f8d5 382c 	ldr.w	r3, [r5, #2092]	@ 0x82c
 8017894:	f8d5 1830 	ldr.w	r1, [r5, #2096]	@ 0x830
 8017898:	61e1      	str	r1, [r4, #28]
 801789a:	6162      	str	r2, [r4, #20]
 801789c:	61a3      	str	r3, [r4, #24]
 801789e:	f8d9 3014 	ldr.w	r3, [r9, #20]
 80178a2:	689b      	ldr	r3, [r3, #8]
 80178a4:	4798      	blx	r3
 80178a6:	6844      	ldr	r4, [r0, #4]
 80178a8:	f8d5 2810 	ldr.w	r2, [r5, #2064]	@ 0x810
 80178ac:	f105 0110 	add.w	r1, r5, #16
 80178b0:	4668      	mov	r0, sp
 80178b2:	f7f8 feab 	bl	801060c <ucdr_init_buffer>
 80178b6:	68e3      	ldr	r3, [r4, #12]
 80178b8:	4641      	mov	r1, r8
 80178ba:	4668      	mov	r0, sp
 80178bc:	4798      	blx	r3
 80178be:	4639      	mov	r1, r7
 80178c0:	4604      	mov	r4, r0
 80178c2:	480a      	ldr	r0, [pc, #40]	@ (80178ec <rmw_take_request+0xb8>)
 80178c4:	f7ff fb24 	bl	8016f10 <put_memory>
 80178c8:	b106      	cbz	r6, 80178cc <rmw_take_request+0x98>
 80178ca:	7034      	strb	r4, [r6, #0]
 80178cc:	f084 0001 	eor.w	r0, r4, #1
 80178d0:	b2c0      	uxtb	r0, r0
 80178d2:	b009      	add	sp, #36	@ 0x24
 80178d4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80178d8:	2001      	movs	r0, #1
 80178da:	b009      	add	sp, #36	@ 0x24
 80178dc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80178e0:	200c      	movs	r0, #12
 80178e2:	b009      	add	sp, #36	@ 0x24
 80178e4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80178e8:	0801dd78 	.word	0x0801dd78
 80178ec:	2000c09c 	.word	0x2000c09c

080178f0 <rmw_send_response>:
 80178f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80178f2:	4605      	mov	r5, r0
 80178f4:	6800      	ldr	r0, [r0, #0]
 80178f6:	b091      	sub	sp, #68	@ 0x44
 80178f8:	460c      	mov	r4, r1
 80178fa:	4616      	mov	r6, r2
 80178fc:	b128      	cbz	r0, 801790a <rmw_send_response+0x1a>
 80178fe:	4b29      	ldr	r3, [pc, #164]	@ (80179a4 <rmw_send_response+0xb4>)
 8017900:	6819      	ldr	r1, [r3, #0]
 8017902:	f7e8 fc65 	bl	80001d0 <strcmp>
 8017906:	2800      	cmp	r0, #0
 8017908:	d141      	bne.n	801798e <rmw_send_response+0x9e>
 801790a:	e9d4 2304 	ldrd	r2, r3, [r4, #16]
 801790e:	9306      	str	r3, [sp, #24]
 8017910:	4623      	mov	r3, r4
 8017912:	9207      	str	r2, [sp, #28]
 8017914:	f813 2b01 	ldrb.w	r2, [r3], #1
 8017918:	686d      	ldr	r5, [r5, #4]
 801791a:	789b      	ldrb	r3, [r3, #2]
 801791c:	68a1      	ldr	r1, [r4, #8]
 801791e:	f88d 2017 	strb.w	r2, [sp, #23]
 8017922:	f88d 3016 	strb.w	r3, [sp, #22]
 8017926:	68e2      	ldr	r2, [r4, #12]
 8017928:	f8b4 3001 	ldrh.w	r3, [r4, #1]
 801792c:	6860      	ldr	r0, [r4, #4]
 801792e:	f8ad 3014 	strh.w	r3, [sp, #20]
 8017932:	ab02      	add	r3, sp, #8
 8017934:	c307      	stmia	r3!, {r0, r1, r2}
 8017936:	696b      	ldr	r3, [r5, #20]
 8017938:	6faf      	ldr	r7, [r5, #120]	@ 0x78
 801793a:	68db      	ldr	r3, [r3, #12]
 801793c:	4798      	blx	r3
 801793e:	6844      	ldr	r4, [r0, #4]
 8017940:	4630      	mov	r0, r6
 8017942:	6923      	ldr	r3, [r4, #16]
 8017944:	4798      	blx	r3
 8017946:	f100 0318 	add.w	r3, r0, #24
 801794a:	6938      	ldr	r0, [r7, #16]
 801794c:	9300      	str	r3, [sp, #0]
 801794e:	692a      	ldr	r2, [r5, #16]
 8017950:	6f29      	ldr	r1, [r5, #112]	@ 0x70
 8017952:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8017956:	ab08      	add	r3, sp, #32
 8017958:	f7fa fc4a 	bl	80121f0 <uxr_prepare_output_stream>
 801795c:	b910      	cbnz	r0, 8017964 <rmw_send_response+0x74>
 801795e:	2001      	movs	r0, #1
 8017960:	b011      	add	sp, #68	@ 0x44
 8017962:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8017964:	a902      	add	r1, sp, #8
 8017966:	a808      	add	r0, sp, #32
 8017968:	f7fb fd7a 	bl	8013460 <uxr_serialize_SampleIdentity>
 801796c:	68a3      	ldr	r3, [r4, #8]
 801796e:	a908      	add	r1, sp, #32
 8017970:	4630      	mov	r0, r6
 8017972:	4798      	blx	r3
 8017974:	f895 3072 	ldrb.w	r3, [r5, #114]	@ 0x72
 8017978:	6938      	ldr	r0, [r7, #16]
 801797a:	2b01      	cmp	r3, #1
 801797c:	d00a      	beq.n	8017994 <rmw_send_response+0xa4>
 801797e:	6f69      	ldr	r1, [r5, #116]	@ 0x74
 8017980:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8017984:	f7f9 fe48 	bl	8011618 <uxr_run_session_until_confirm_delivery>
 8017988:	2000      	movs	r0, #0
 801798a:	b011      	add	sp, #68	@ 0x44
 801798c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801798e:	200c      	movs	r0, #12
 8017990:	b011      	add	sp, #68	@ 0x44
 8017992:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8017994:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8017998:	f7f9 fa7e 	bl	8010e98 <uxr_flash_output_streams>
 801799c:	2000      	movs	r0, #0
 801799e:	b011      	add	sp, #68	@ 0x44
 80179a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80179a2:	bf00      	nop
 80179a4:	0801dd78 	.word	0x0801dd78

080179a8 <rmw_take_response>:
 80179a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80179ac:	4604      	mov	r4, r0
 80179ae:	6800      	ldr	r0, [r0, #0]
 80179b0:	b088      	sub	sp, #32
 80179b2:	4688      	mov	r8, r1
 80179b4:	4617      	mov	r7, r2
 80179b6:	461d      	mov	r5, r3
 80179b8:	b120      	cbz	r0, 80179c4 <rmw_take_response+0x1c>
 80179ba:	4b1e      	ldr	r3, [pc, #120]	@ (8017a34 <rmw_take_response+0x8c>)
 80179bc:	6819      	ldr	r1, [r3, #0]
 80179be:	f7e8 fc07 	bl	80001d0 <strcmp>
 80179c2:	bb78      	cbnz	r0, 8017a24 <rmw_take_response+0x7c>
 80179c4:	b10d      	cbz	r5, 80179ca <rmw_take_response+0x22>
 80179c6:	2300      	movs	r3, #0
 80179c8:	702b      	strb	r3, [r5, #0]
 80179ca:	6864      	ldr	r4, [r4, #4]
 80179cc:	f7f7 f9a4 	bl	800ed18 <rmw_uxrce_clean_expired_static_input_buffer>
 80179d0:	4620      	mov	r0, r4
 80179d2:	f7f7 f979 	bl	800ecc8 <rmw_uxrce_find_static_input_buffer_by_owner>
 80179d6:	4606      	mov	r6, r0
 80179d8:	b340      	cbz	r0, 8017a2c <rmw_take_response+0x84>
 80179da:	6963      	ldr	r3, [r4, #20]
 80179dc:	6884      	ldr	r4, [r0, #8]
 80179de:	68db      	ldr	r3, [r3, #12]
 80179e0:	f504 6203 	add.w	r2, r4, #2096	@ 0x830
 80179e4:	e952 0102 	ldrd	r0, r1, [r2, #-8]
 80179e8:	e9c8 0108 	strd	r0, r1, [r8, #32]
 80179ec:	4798      	blx	r3
 80179ee:	f8d0 8004 	ldr.w	r8, [r0, #4]
 80179f2:	f8d4 2810 	ldr.w	r2, [r4, #2064]	@ 0x810
 80179f6:	f104 0110 	add.w	r1, r4, #16
 80179fa:	4668      	mov	r0, sp
 80179fc:	f7f8 fe06 	bl	801060c <ucdr_init_buffer>
 8017a00:	4639      	mov	r1, r7
 8017a02:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8017a06:	4668      	mov	r0, sp
 8017a08:	4798      	blx	r3
 8017a0a:	4631      	mov	r1, r6
 8017a0c:	4604      	mov	r4, r0
 8017a0e:	480a      	ldr	r0, [pc, #40]	@ (8017a38 <rmw_take_response+0x90>)
 8017a10:	f7ff fa7e 	bl	8016f10 <put_memory>
 8017a14:	b105      	cbz	r5, 8017a18 <rmw_take_response+0x70>
 8017a16:	702c      	strb	r4, [r5, #0]
 8017a18:	f084 0001 	eor.w	r0, r4, #1
 8017a1c:	b2c0      	uxtb	r0, r0
 8017a1e:	b008      	add	sp, #32
 8017a20:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017a24:	200c      	movs	r0, #12
 8017a26:	b008      	add	sp, #32
 8017a28:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017a2c:	2001      	movs	r0, #1
 8017a2e:	b008      	add	sp, #32
 8017a30:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017a34:	0801dd78 	.word	0x0801dd78
 8017a38:	2000c09c 	.word	0x2000c09c

08017a3c <rmw_destroy_service>:
 8017a3c:	b570      	push	{r4, r5, r6, lr}
 8017a3e:	b128      	cbz	r0, 8017a4c <rmw_destroy_service+0x10>
 8017a40:	4604      	mov	r4, r0
 8017a42:	6800      	ldr	r0, [r0, #0]
 8017a44:	460d      	mov	r5, r1
 8017a46:	f7f7 fa65 	bl	800ef14 <is_uxrce_rmw_identifier_valid>
 8017a4a:	b910      	cbnz	r0, 8017a52 <rmw_destroy_service+0x16>
 8017a4c:	2401      	movs	r4, #1
 8017a4e:	4620      	mov	r0, r4
 8017a50:	bd70      	pop	{r4, r5, r6, pc}
 8017a52:	6863      	ldr	r3, [r4, #4]
 8017a54:	2b00      	cmp	r3, #0
 8017a56:	d0f9      	beq.n	8017a4c <rmw_destroy_service+0x10>
 8017a58:	2d00      	cmp	r5, #0
 8017a5a:	d0f7      	beq.n	8017a4c <rmw_destroy_service+0x10>
 8017a5c:	6828      	ldr	r0, [r5, #0]
 8017a5e:	f7f7 fa59 	bl	800ef14 <is_uxrce_rmw_identifier_valid>
 8017a62:	2800      	cmp	r0, #0
 8017a64:	d0f2      	beq.n	8017a4c <rmw_destroy_service+0x10>
 8017a66:	686e      	ldr	r6, [r5, #4]
 8017a68:	2e00      	cmp	r6, #0
 8017a6a:	d0ef      	beq.n	8017a4c <rmw_destroy_service+0x10>
 8017a6c:	6864      	ldr	r4, [r4, #4]
 8017a6e:	6932      	ldr	r2, [r6, #16]
 8017a70:	6920      	ldr	r0, [r4, #16]
 8017a72:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 8017a76:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8017a7a:	6819      	ldr	r1, [r3, #0]
 8017a7c:	f001 fd86 	bl	801958c <uxr_buffer_cancel_data>
 8017a80:	4602      	mov	r2, r0
 8017a82:	6920      	ldr	r0, [r4, #16]
 8017a84:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 8017a88:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 8017a8c:	f7f7 f9c2 	bl	800ee14 <run_xrce_session>
 8017a90:	6920      	ldr	r0, [r4, #16]
 8017a92:	6932      	ldr	r2, [r6, #16]
 8017a94:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 8017a98:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8017a9c:	6819      	ldr	r1, [r3, #0]
 8017a9e:	f7f8 fea9 	bl	80107f4 <uxr_buffer_delete_entity>
 8017aa2:	4602      	mov	r2, r0
 8017aa4:	6920      	ldr	r0, [r4, #16]
 8017aa6:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 8017aaa:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 8017aae:	f7f7 f9b1 	bl	800ee14 <run_xrce_session>
 8017ab2:	2800      	cmp	r0, #0
 8017ab4:	4628      	mov	r0, r5
 8017ab6:	bf14      	ite	ne
 8017ab8:	2400      	movne	r4, #0
 8017aba:	2402      	moveq	r4, #2
 8017abc:	f7f7 f87c 	bl	800ebb8 <rmw_uxrce_fini_service_memory>
 8017ac0:	e7c5      	b.n	8017a4e <rmw_destroy_service+0x12>
 8017ac2:	bf00      	nop

08017ac4 <rmw_create_subscription>:
 8017ac4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017ac8:	b08d      	sub	sp, #52	@ 0x34
 8017aca:	2800      	cmp	r0, #0
 8017acc:	f000 80d1 	beq.w	8017c72 <rmw_create_subscription+0x1ae>
 8017ad0:	460e      	mov	r6, r1
 8017ad2:	2900      	cmp	r1, #0
 8017ad4:	f000 80cd 	beq.w	8017c72 <rmw_create_subscription+0x1ae>
 8017ad8:	4604      	mov	r4, r0
 8017ada:	6800      	ldr	r0, [r0, #0]
 8017adc:	4615      	mov	r5, r2
 8017ade:	4698      	mov	r8, r3
 8017ae0:	f7f7 fa18 	bl	800ef14 <is_uxrce_rmw_identifier_valid>
 8017ae4:	2800      	cmp	r0, #0
 8017ae6:	f000 80c4 	beq.w	8017c72 <rmw_create_subscription+0x1ae>
 8017aea:	2d00      	cmp	r5, #0
 8017aec:	f000 80c1 	beq.w	8017c72 <rmw_create_subscription+0x1ae>
 8017af0:	782b      	ldrb	r3, [r5, #0]
 8017af2:	2b00      	cmp	r3, #0
 8017af4:	f000 80bd 	beq.w	8017c72 <rmw_create_subscription+0x1ae>
 8017af8:	f1b8 0f00 	cmp.w	r8, #0
 8017afc:	f000 80b9 	beq.w	8017c72 <rmw_create_subscription+0x1ae>
 8017b00:	485e      	ldr	r0, [pc, #376]	@ (8017c7c <rmw_create_subscription+0x1b8>)
 8017b02:	f8d4 9004 	ldr.w	r9, [r4, #4]
 8017b06:	f7ff f9f3 	bl	8016ef0 <get_memory>
 8017b0a:	4604      	mov	r4, r0
 8017b0c:	2800      	cmp	r0, #0
 8017b0e:	f000 80b1 	beq.w	8017c74 <rmw_create_subscription+0x1b0>
 8017b12:	6887      	ldr	r7, [r0, #8]
 8017b14:	f8c7 7080 	str.w	r7, [r7, #128]	@ 0x80
 8017b18:	f7ff fa52 	bl	8016fc0 <rmw_get_implementation_identifier>
 8017b1c:	f107 0a98 	add.w	sl, r7, #152	@ 0x98
 8017b20:	67f8      	str	r0, [r7, #124]	@ 0x7c
 8017b22:	f8c7 a084 	str.w	sl, [r7, #132]	@ 0x84
 8017b26:	4628      	mov	r0, r5
 8017b28:	f7e8 fb5c 	bl	80001e4 <strlen>
 8017b2c:	3001      	adds	r0, #1
 8017b2e:	283c      	cmp	r0, #60	@ 0x3c
 8017b30:	f107 047c 	add.w	r4, r7, #124	@ 0x7c
 8017b34:	f200 8096 	bhi.w	8017c64 <rmw_create_subscription+0x1a0>
 8017b38:	4a51      	ldr	r2, [pc, #324]	@ (8017c80 <rmw_create_subscription+0x1bc>)
 8017b3a:	462b      	mov	r3, r5
 8017b3c:	213c      	movs	r1, #60	@ 0x3c
 8017b3e:	4650      	mov	r0, sl
 8017b40:	f003 fb66 	bl	801b210 <sniprintf>
 8017b44:	4641      	mov	r1, r8
 8017b46:	f8c7 9020 	str.w	r9, [r7, #32]
 8017b4a:	2250      	movs	r2, #80	@ 0x50
 8017b4c:	f107 0028 	add.w	r0, r7, #40	@ 0x28
 8017b50:	f003 fdeb 	bl	801b72a <memcpy>
 8017b54:	494b      	ldr	r1, [pc, #300]	@ (8017c84 <rmw_create_subscription+0x1c0>)
 8017b56:	4630      	mov	r0, r6
 8017b58:	f7f7 f9ea 	bl	800ef30 <get_message_typesupport_handle>
 8017b5c:	2800      	cmp	r0, #0
 8017b5e:	f000 8081 	beq.w	8017c64 <rmw_create_subscription+0x1a0>
 8017b62:	6842      	ldr	r2, [r0, #4]
 8017b64:	61ba      	str	r2, [r7, #24]
 8017b66:	2a00      	cmp	r2, #0
 8017b68:	d07c      	beq.n	8017c64 <rmw_create_subscription+0x1a0>
 8017b6a:	4629      	mov	r1, r5
 8017b6c:	4643      	mov	r3, r8
 8017b6e:	4648      	mov	r0, r9
 8017b70:	f7ff fc8c 	bl	801748c <create_topic>
 8017b74:	61f8      	str	r0, [r7, #28]
 8017b76:	2800      	cmp	r0, #0
 8017b78:	d078      	beq.n	8017c6c <rmw_create_subscription+0x1a8>
 8017b7a:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8017b7e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8017b82:	2104      	movs	r1, #4
 8017b84:	f8b3 059c 	ldrh.w	r0, [r3, #1436]	@ 0x59c
 8017b88:	1c42      	adds	r2, r0, #1
 8017b8a:	f8a3 259c 	strh.w	r2, [r3, #1436]	@ 0x59c
 8017b8e:	f7f9 f833 	bl	8010bf8 <uxr_object_id>
 8017b92:	6138      	str	r0, [r7, #16]
 8017b94:	f8d9 0010 	ldr.w	r0, [r9, #16]
 8017b98:	2506      	movs	r5, #6
 8017b9a:	f8d0 3384 	ldr.w	r3, [r0, #900]	@ 0x384
 8017b9e:	9500      	str	r5, [sp, #0]
 8017ba0:	6819      	ldr	r1, [r3, #0]
 8017ba2:	693a      	ldr	r2, [r7, #16]
 8017ba4:	f8d9 3014 	ldr.w	r3, [r9, #20]
 8017ba8:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8017bac:	f7f8 ff06 	bl	80109bc <uxr_buffer_create_subscriber_bin>
 8017bb0:	4602      	mov	r2, r0
 8017bb2:	f8d9 0010 	ldr.w	r0, [r9, #16]
 8017bb6:	f8d0 338c 	ldr.w	r3, [r0, #908]	@ 0x38c
 8017bba:	f8d0 1384 	ldr.w	r1, [r0, #900]	@ 0x384
 8017bbe:	f7f7 f929 	bl	800ee14 <run_xrce_session>
 8017bc2:	2800      	cmp	r0, #0
 8017bc4:	d04e      	beq.n	8017c64 <rmw_create_subscription+0x1a0>
 8017bc6:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8017bca:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8017bce:	4629      	mov	r1, r5
 8017bd0:	f8b3 059e 	ldrh.w	r0, [r3, #1438]	@ 0x59e
 8017bd4:	1c42      	adds	r2, r0, #1
 8017bd6:	f8a3 259e 	strh.w	r2, [r3, #1438]	@ 0x59e
 8017bda:	f7f9 f80d 	bl	8010bf8 <uxr_object_id>
 8017bde:	ae08      	add	r6, sp, #32
 8017be0:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8017be4:	69fb      	ldr	r3, [r7, #28]
 8017be6:	6178      	str	r0, [r7, #20]
 8017be8:	4641      	mov	r1, r8
 8017bea:	4630      	mov	r0, r6
 8017bec:	f8da b384 	ldr.w	fp, [sl, #900]	@ 0x384
 8017bf0:	9305      	str	r3, [sp, #20]
 8017bf2:	f7f7 f92b 	bl	800ee4c <convert_qos_profile>
 8017bf6:	9503      	str	r5, [sp, #12]
 8017bf8:	e896 0003 	ldmia.w	r6, {r0, r1}
 8017bfc:	9b05      	ldr	r3, [sp, #20]
 8017bfe:	9001      	str	r0, [sp, #4]
 8017c00:	f8ad 1008 	strh.w	r1, [sp, #8]
 8017c04:	691b      	ldr	r3, [r3, #16]
 8017c06:	9300      	str	r3, [sp, #0]
 8017c08:	e9d7 3204 	ldrd	r3, r2, [r7, #16]
 8017c0c:	f8db 1000 	ldr.w	r1, [fp]
 8017c10:	f50a 7028 	add.w	r0, sl, #672	@ 0x2a0
 8017c14:	f7f8 ff78 	bl	8010b08 <uxr_buffer_create_datareader_bin>
 8017c18:	4602      	mov	r2, r0
 8017c1a:	f8d9 0010 	ldr.w	r0, [r9, #16]
 8017c1e:	f8d0 338c 	ldr.w	r3, [r0, #908]	@ 0x38c
 8017c22:	f8d0 1384 	ldr.w	r1, [r0, #900]	@ 0x384
 8017c26:	f7f7 f8f5 	bl	800ee14 <run_xrce_session>
 8017c2a:	b1d8      	cbz	r0, 8017c64 <rmw_create_subscription+0x1a0>
 8017c2c:	f898 3008 	ldrb.w	r3, [r8, #8]
 8017c30:	f8d9 0010 	ldr.w	r0, [r9, #16]
 8017c34:	2b02      	cmp	r3, #2
 8017c36:	bf0c      	ite	eq
 8017c38:	f8d0 3380 	ldreq.w	r3, [r0, #896]	@ 0x380
 8017c3c:	f8d0 3374 	ldrne.w	r3, [r0, #884]	@ 0x374
 8017c40:	9307      	str	r3, [sp, #28]
 8017c42:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8017c46:	2200      	movs	r2, #0
 8017c48:	e9cd 120a 	strd	r1, r2, [sp, #40]	@ 0x28
 8017c4c:	ab0a      	add	r3, sp, #40	@ 0x28
 8017c4e:	f8d0 1384 	ldr.w	r1, [r0, #900]	@ 0x384
 8017c52:	9300      	str	r3, [sp, #0]
 8017c54:	697a      	ldr	r2, [r7, #20]
 8017c56:	9b07      	ldr	r3, [sp, #28]
 8017c58:	6809      	ldr	r1, [r1, #0]
 8017c5a:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8017c5e:	f001 fc5b 	bl	8019518 <uxr_buffer_request_data>
 8017c62:	e007      	b.n	8017c74 <rmw_create_subscription+0x1b0>
 8017c64:	69f8      	ldr	r0, [r7, #28]
 8017c66:	b108      	cbz	r0, 8017c6c <rmw_create_subscription+0x1a8>
 8017c68:	f7f6 ffd2 	bl	800ec10 <rmw_uxrce_fini_topic_memory>
 8017c6c:	4620      	mov	r0, r4
 8017c6e:	f7f6 ff8d 	bl	800eb8c <rmw_uxrce_fini_subscription_memory>
 8017c72:	2400      	movs	r4, #0
 8017c74:	4620      	mov	r0, r4
 8017c76:	b00d      	add	sp, #52	@ 0x34
 8017c78:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017c7c:	2000c0ac 	.word	0x2000c0ac
 8017c80:	0801d5f4 	.word	0x0801d5f4
 8017c84:	0801d5c0 	.word	0x0801d5c0

08017c88 <rmw_subscription_get_actual_qos>:
 8017c88:	b150      	cbz	r0, 8017ca0 <rmw_subscription_get_actual_qos+0x18>
 8017c8a:	b508      	push	{r3, lr}
 8017c8c:	460b      	mov	r3, r1
 8017c8e:	b149      	cbz	r1, 8017ca4 <rmw_subscription_get_actual_qos+0x1c>
 8017c90:	6841      	ldr	r1, [r0, #4]
 8017c92:	2250      	movs	r2, #80	@ 0x50
 8017c94:	3128      	adds	r1, #40	@ 0x28
 8017c96:	4618      	mov	r0, r3
 8017c98:	f003 fd47 	bl	801b72a <memcpy>
 8017c9c:	2000      	movs	r0, #0
 8017c9e:	bd08      	pop	{r3, pc}
 8017ca0:	200b      	movs	r0, #11
 8017ca2:	4770      	bx	lr
 8017ca4:	200b      	movs	r0, #11
 8017ca6:	bd08      	pop	{r3, pc}

08017ca8 <rmw_destroy_subscription>:
 8017ca8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017caa:	b128      	cbz	r0, 8017cb8 <rmw_destroy_subscription+0x10>
 8017cac:	4604      	mov	r4, r0
 8017cae:	6800      	ldr	r0, [r0, #0]
 8017cb0:	460d      	mov	r5, r1
 8017cb2:	f7f7 f92f 	bl	800ef14 <is_uxrce_rmw_identifier_valid>
 8017cb6:	b910      	cbnz	r0, 8017cbe <rmw_destroy_subscription+0x16>
 8017cb8:	2401      	movs	r4, #1
 8017cba:	4620      	mov	r0, r4
 8017cbc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8017cbe:	6863      	ldr	r3, [r4, #4]
 8017cc0:	2b00      	cmp	r3, #0
 8017cc2:	d0f9      	beq.n	8017cb8 <rmw_destroy_subscription+0x10>
 8017cc4:	2d00      	cmp	r5, #0
 8017cc6:	d0f7      	beq.n	8017cb8 <rmw_destroy_subscription+0x10>
 8017cc8:	6828      	ldr	r0, [r5, #0]
 8017cca:	f7f7 f923 	bl	800ef14 <is_uxrce_rmw_identifier_valid>
 8017cce:	2800      	cmp	r0, #0
 8017cd0:	d0f2      	beq.n	8017cb8 <rmw_destroy_subscription+0x10>
 8017cd2:	686c      	ldr	r4, [r5, #4]
 8017cd4:	2c00      	cmp	r4, #0
 8017cd6:	d0ef      	beq.n	8017cb8 <rmw_destroy_subscription+0x10>
 8017cd8:	6a26      	ldr	r6, [r4, #32]
 8017cda:	6962      	ldr	r2, [r4, #20]
 8017cdc:	6930      	ldr	r0, [r6, #16]
 8017cde:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 8017ce2:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8017ce6:	6819      	ldr	r1, [r3, #0]
 8017ce8:	f001 fc50 	bl	801958c <uxr_buffer_cancel_data>
 8017cec:	4602      	mov	r2, r0
 8017cee:	6930      	ldr	r0, [r6, #16]
 8017cf0:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 8017cf4:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 8017cf8:	f7f7 f88c 	bl	800ee14 <run_xrce_session>
 8017cfc:	69e0      	ldr	r0, [r4, #28]
 8017cfe:	f7ff fc15 	bl	801752c <destroy_topic>
 8017d02:	6a23      	ldr	r3, [r4, #32]
 8017d04:	6962      	ldr	r2, [r4, #20]
 8017d06:	6918      	ldr	r0, [r3, #16]
 8017d08:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 8017d0c:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8017d10:	6819      	ldr	r1, [r3, #0]
 8017d12:	f7f8 fd6f 	bl	80107f4 <uxr_buffer_delete_entity>
 8017d16:	6a23      	ldr	r3, [r4, #32]
 8017d18:	6922      	ldr	r2, [r4, #16]
 8017d1a:	691b      	ldr	r3, [r3, #16]
 8017d1c:	f8d3 1388 	ldr.w	r1, [r3, #904]	@ 0x388
 8017d20:	4604      	mov	r4, r0
 8017d22:	6809      	ldr	r1, [r1, #0]
 8017d24:	f503 7028 	add.w	r0, r3, #672	@ 0x2a0
 8017d28:	f7f8 fd64 	bl	80107f4 <uxr_buffer_delete_entity>
 8017d2c:	6937      	ldr	r7, [r6, #16]
 8017d2e:	4622      	mov	r2, r4
 8017d30:	f8d7 3390 	ldr.w	r3, [r7, #912]	@ 0x390
 8017d34:	f8d7 1388 	ldr.w	r1, [r7, #904]	@ 0x388
 8017d38:	4604      	mov	r4, r0
 8017d3a:	4638      	mov	r0, r7
 8017d3c:	f7f7 f86a 	bl	800ee14 <run_xrce_session>
 8017d40:	6936      	ldr	r6, [r6, #16]
 8017d42:	4622      	mov	r2, r4
 8017d44:	f8d6 3390 	ldr.w	r3, [r6, #912]	@ 0x390
 8017d48:	f8d6 1388 	ldr.w	r1, [r6, #904]	@ 0x388
 8017d4c:	4604      	mov	r4, r0
 8017d4e:	4630      	mov	r0, r6
 8017d50:	f7f7 f860 	bl	800ee14 <run_xrce_session>
 8017d54:	b12c      	cbz	r4, 8017d62 <rmw_destroy_subscription+0xba>
 8017d56:	b120      	cbz	r0, 8017d62 <rmw_destroy_subscription+0xba>
 8017d58:	2400      	movs	r4, #0
 8017d5a:	4628      	mov	r0, r5
 8017d5c:	f7f6 ff16 	bl	800eb8c <rmw_uxrce_fini_subscription_memory>
 8017d60:	e7ab      	b.n	8017cba <rmw_destroy_subscription+0x12>
 8017d62:	2402      	movs	r4, #2
 8017d64:	e7f9      	b.n	8017d5a <rmw_destroy_subscription+0xb2>
 8017d66:	bf00      	nop

08017d68 <rmw_take_with_info>:
 8017d68:	b5f0      	push	{r4, r5, r6, r7, lr}
 8017d6a:	4604      	mov	r4, r0
 8017d6c:	6800      	ldr	r0, [r0, #0]
 8017d6e:	b089      	sub	sp, #36	@ 0x24
 8017d70:	460f      	mov	r7, r1
 8017d72:	4615      	mov	r5, r2
 8017d74:	b128      	cbz	r0, 8017d82 <rmw_take_with_info+0x1a>
 8017d76:	4b24      	ldr	r3, [pc, #144]	@ (8017e08 <rmw_take_with_info+0xa0>)
 8017d78:	6819      	ldr	r1, [r3, #0]
 8017d7a:	f7e8 fa29 	bl	80001d0 <strcmp>
 8017d7e:	2800      	cmp	r0, #0
 8017d80:	d13e      	bne.n	8017e00 <rmw_take_with_info+0x98>
 8017d82:	b305      	cbz	r5, 8017dc6 <rmw_take_with_info+0x5e>
 8017d84:	6864      	ldr	r4, [r4, #4]
 8017d86:	2300      	movs	r3, #0
 8017d88:	702b      	strb	r3, [r5, #0]
 8017d8a:	f7f6 ffc5 	bl	800ed18 <rmw_uxrce_clean_expired_static_input_buffer>
 8017d8e:	4620      	mov	r0, r4
 8017d90:	f7f6 ff9a 	bl	800ecc8 <rmw_uxrce_find_static_input_buffer_by_owner>
 8017d94:	4606      	mov	r6, r0
 8017d96:	b1f0      	cbz	r0, 8017dd6 <rmw_take_with_info+0x6e>
 8017d98:	6881      	ldr	r1, [r0, #8]
 8017d9a:	4668      	mov	r0, sp
 8017d9c:	f8d1 2810 	ldr.w	r2, [r1, #2064]	@ 0x810
 8017da0:	3110      	adds	r1, #16
 8017da2:	f7f8 fc33 	bl	801060c <ucdr_init_buffer>
 8017da6:	69a3      	ldr	r3, [r4, #24]
 8017da8:	4639      	mov	r1, r7
 8017daa:	68db      	ldr	r3, [r3, #12]
 8017dac:	4668      	mov	r0, sp
 8017dae:	4798      	blx	r3
 8017db0:	4631      	mov	r1, r6
 8017db2:	4604      	mov	r4, r0
 8017db4:	4815      	ldr	r0, [pc, #84]	@ (8017e0c <rmw_take_with_info+0xa4>)
 8017db6:	f7ff f8ab 	bl	8016f10 <put_memory>
 8017dba:	702c      	strb	r4, [r5, #0]
 8017dbc:	f084 0001 	eor.w	r0, r4, #1
 8017dc0:	b2c0      	uxtb	r0, r0
 8017dc2:	b009      	add	sp, #36	@ 0x24
 8017dc4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8017dc6:	6864      	ldr	r4, [r4, #4]
 8017dc8:	f7f6 ffa6 	bl	800ed18 <rmw_uxrce_clean_expired_static_input_buffer>
 8017dcc:	4620      	mov	r0, r4
 8017dce:	f7f6 ff7b 	bl	800ecc8 <rmw_uxrce_find_static_input_buffer_by_owner>
 8017dd2:	4605      	mov	r5, r0
 8017dd4:	b910      	cbnz	r0, 8017ddc <rmw_take_with_info+0x74>
 8017dd6:	2001      	movs	r0, #1
 8017dd8:	b009      	add	sp, #36	@ 0x24
 8017dda:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8017ddc:	68a9      	ldr	r1, [r5, #8]
 8017dde:	4668      	mov	r0, sp
 8017de0:	f8d1 2810 	ldr.w	r2, [r1, #2064]	@ 0x810
 8017de4:	3110      	adds	r1, #16
 8017de6:	f7f8 fc11 	bl	801060c <ucdr_init_buffer>
 8017dea:	69a3      	ldr	r3, [r4, #24]
 8017dec:	4639      	mov	r1, r7
 8017dee:	68db      	ldr	r3, [r3, #12]
 8017df0:	4668      	mov	r0, sp
 8017df2:	4798      	blx	r3
 8017df4:	4629      	mov	r1, r5
 8017df6:	4604      	mov	r4, r0
 8017df8:	4804      	ldr	r0, [pc, #16]	@ (8017e0c <rmw_take_with_info+0xa4>)
 8017dfa:	f7ff f889 	bl	8016f10 <put_memory>
 8017dfe:	e7dd      	b.n	8017dbc <rmw_take_with_info+0x54>
 8017e00:	200c      	movs	r0, #12
 8017e02:	b009      	add	sp, #36	@ 0x24
 8017e04:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8017e06:	bf00      	nop
 8017e08:	0801dd78 	.word	0x0801dd78
 8017e0c:	2000c09c 	.word	0x2000c09c

08017e10 <rmw_uxrce_transport_init>:
 8017e10:	b508      	push	{r3, lr}
 8017e12:	b108      	cbz	r0, 8017e18 <rmw_uxrce_transport_init+0x8>
 8017e14:	f100 0210 	add.w	r2, r0, #16
 8017e18:	b139      	cbz	r1, 8017e2a <rmw_uxrce_transport_init+0x1a>
 8017e1a:	6949      	ldr	r1, [r1, #20]
 8017e1c:	4610      	mov	r0, r2
 8017e1e:	f000 fdfb 	bl	8018a18 <uxr_init_custom_transport>
 8017e22:	f080 0001 	eor.w	r0, r0, #1
 8017e26:	b2c0      	uxtb	r0, r0
 8017e28:	bd08      	pop	{r3, pc}
 8017e2a:	4b04      	ldr	r3, [pc, #16]	@ (8017e3c <rmw_uxrce_transport_init+0x2c>)
 8017e2c:	4610      	mov	r0, r2
 8017e2e:	6859      	ldr	r1, [r3, #4]
 8017e30:	f000 fdf2 	bl	8018a18 <uxr_init_custom_transport>
 8017e34:	f080 0001 	eor.w	r0, r0, #1
 8017e38:	b2c0      	uxtb	r0, r0
 8017e3a:	bd08      	pop	{r3, pc}
 8017e3c:	20007774 	.word	0x20007774

08017e40 <rmw_wait>:
 8017e40:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8017e44:	b089      	sub	sp, #36	@ 0x24
 8017e46:	4605      	mov	r5, r0
 8017e48:	9c12      	ldr	r4, [sp, #72]	@ 0x48
 8017e4a:	460e      	mov	r6, r1
 8017e4c:	4698      	mov	r8, r3
 8017e4e:	4691      	mov	r9, r2
 8017e50:	2a00      	cmp	r2, #0
 8017e52:	f000 810a 	beq.w	801806a <rmw_wait+0x22a>
 8017e56:	b16c      	cbz	r4, 8017e74 <rmw_wait+0x34>
 8017e58:	4bae      	ldr	r3, [pc, #696]	@ (8018114 <rmw_wait+0x2d4>)
 8017e5a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8017e5c:	af04      	add	r7, sp, #16
 8017e5e:	e887 000f 	stmia.w	r7, {r0, r1, r2, r3}
 8017e62:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 8017e66:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8017e6a:	f7fe fe75 	bl	8016b58 <rmw_time_equal>
 8017e6e:	2800      	cmp	r0, #0
 8017e70:	f000 8127 	beq.w	80180c2 <rmw_wait+0x282>
 8017e74:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 8017e78:	f7f6 ff4e 	bl	800ed18 <rmw_uxrce_clean_expired_static_input_buffer>
 8017e7c:	4ba6      	ldr	r3, [pc, #664]	@ (8018118 <rmw_wait+0x2d8>)
 8017e7e:	681c      	ldr	r4, [r3, #0]
 8017e80:	b14c      	cbz	r4, 8017e96 <rmw_wait+0x56>
 8017e82:	4623      	mov	r3, r4
 8017e84:	2100      	movs	r1, #0
 8017e86:	e9d3 3201 	ldrd	r3, r2, [r3, #4]
 8017e8a:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8017e8e:	f882 15a4 	strb.w	r1, [r2, #1444]	@ 0x5a4
 8017e92:	2b00      	cmp	r3, #0
 8017e94:	d1f7      	bne.n	8017e86 <rmw_wait+0x46>
 8017e96:	f1b9 0f00 	cmp.w	r9, #0
 8017e9a:	d011      	beq.n	8017ec0 <rmw_wait+0x80>
 8017e9c:	f8d9 1000 	ldr.w	r1, [r9]
 8017ea0:	b171      	cbz	r1, 8017ec0 <rmw_wait+0x80>
 8017ea2:	f8d9 c004 	ldr.w	ip, [r9, #4]
 8017ea6:	2300      	movs	r3, #0
 8017ea8:	2001      	movs	r0, #1
 8017eaa:	f85c 2023 	ldr.w	r2, [ip, r3, lsl #2]
 8017eae:	6f92      	ldr	r2, [r2, #120]	@ 0x78
 8017eb0:	6912      	ldr	r2, [r2, #16]
 8017eb2:	3301      	adds	r3, #1
 8017eb4:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8017eb8:	4299      	cmp	r1, r3
 8017eba:	f882 05a4 	strb.w	r0, [r2, #1444]	@ 0x5a4
 8017ebe:	d1f4      	bne.n	8017eaa <rmw_wait+0x6a>
 8017ec0:	f1b8 0f00 	cmp.w	r8, #0
 8017ec4:	d011      	beq.n	8017eea <rmw_wait+0xaa>
 8017ec6:	f8d8 1000 	ldr.w	r1, [r8]
 8017eca:	b171      	cbz	r1, 8017eea <rmw_wait+0xaa>
 8017ecc:	f8d8 c004 	ldr.w	ip, [r8, #4]
 8017ed0:	2300      	movs	r3, #0
 8017ed2:	2001      	movs	r0, #1
 8017ed4:	f85c 2023 	ldr.w	r2, [ip, r3, lsl #2]
 8017ed8:	6f92      	ldr	r2, [r2, #120]	@ 0x78
 8017eda:	6912      	ldr	r2, [r2, #16]
 8017edc:	3301      	adds	r3, #1
 8017ede:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8017ee2:	4299      	cmp	r1, r3
 8017ee4:	f882 05a4 	strb.w	r0, [r2, #1444]	@ 0x5a4
 8017ee8:	d1f4      	bne.n	8017ed4 <rmw_wait+0x94>
 8017eea:	b185      	cbz	r5, 8017f0e <rmw_wait+0xce>
 8017eec:	6829      	ldr	r1, [r5, #0]
 8017eee:	b171      	cbz	r1, 8017f0e <rmw_wait+0xce>
 8017ef0:	f8d5 c004 	ldr.w	ip, [r5, #4]
 8017ef4:	2300      	movs	r3, #0
 8017ef6:	2001      	movs	r0, #1
 8017ef8:	f85c 2023 	ldr.w	r2, [ip, r3, lsl #2]
 8017efc:	6a12      	ldr	r2, [r2, #32]
 8017efe:	6912      	ldr	r2, [r2, #16]
 8017f00:	3301      	adds	r3, #1
 8017f02:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8017f06:	4299      	cmp	r1, r3
 8017f08:	f882 05a4 	strb.w	r0, [r2, #1444]	@ 0x5a4
 8017f0c:	d1f4      	bne.n	8017ef8 <rmw_wait+0xb8>
 8017f0e:	b34c      	cbz	r4, 8017f64 <rmw_wait+0x124>
 8017f10:	4622      	mov	r2, r4
 8017f12:	2300      	movs	r3, #0
 8017f14:	e9d2 2101 	ldrd	r2, r1, [r2, #4]
 8017f18:	f501 5180 	add.w	r1, r1, #4096	@ 0x1000
 8017f1c:	f891 15a4 	ldrb.w	r1, [r1, #1444]	@ 0x5a4
 8017f20:	440b      	add	r3, r1
 8017f22:	b2db      	uxtb	r3, r3
 8017f24:	2a00      	cmp	r2, #0
 8017f26:	d1f5      	bne.n	8017f14 <rmw_wait+0xd4>
 8017f28:	2b00      	cmp	r3, #0
 8017f2a:	f000 8084 	beq.w	8018036 <rmw_wait+0x1f6>
 8017f2e:	1c7a      	adds	r2, r7, #1
 8017f30:	d00d      	beq.n	8017f4e <rmw_wait+0x10e>
 8017f32:	ee07 7a90 	vmov	s15, r7
 8017f36:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8017f3a:	ee07 3a90 	vmov	s15, r3
 8017f3e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8017f42:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8017f46:	eefd 7ac7 	vcvt.s32.f32	s15, s14
 8017f4a:	ee17 7a90 	vmov	r7, s15
 8017f4e:	68a0      	ldr	r0, [r4, #8]
 8017f50:	f500 5380 	add.w	r3, r0, #4096	@ 0x1000
 8017f54:	f893 35a4 	ldrb.w	r3, [r3, #1444]	@ 0x5a4
 8017f58:	2b00      	cmp	r3, #0
 8017f5a:	f040 8090 	bne.w	801807e <rmw_wait+0x23e>
 8017f5e:	6864      	ldr	r4, [r4, #4]
 8017f60:	2c00      	cmp	r4, #0
 8017f62:	d1f4      	bne.n	8017f4e <rmw_wait+0x10e>
 8017f64:	f1b9 0f00 	cmp.w	r9, #0
 8017f68:	f000 80bc 	beq.w	80180e4 <rmw_wait+0x2a4>
 8017f6c:	f8d9 7000 	ldr.w	r7, [r9]
 8017f70:	2f00      	cmp	r7, #0
 8017f72:	f000 808e 	beq.w	8018092 <rmw_wait+0x252>
 8017f76:	2400      	movs	r4, #0
 8017f78:	4627      	mov	r7, r4
 8017f7a:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8017f7e:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8017f82:	f7f6 fea1 	bl	800ecc8 <rmw_uxrce_find_static_input_buffer_by_owner>
 8017f86:	2800      	cmp	r0, #0
 8017f88:	d05f      	beq.n	801804a <rmw_wait+0x20a>
 8017f8a:	f8d9 3000 	ldr.w	r3, [r9]
 8017f8e:	3401      	adds	r4, #1
 8017f90:	42a3      	cmp	r3, r4
 8017f92:	f04f 0701 	mov.w	r7, #1
 8017f96:	d8f0      	bhi.n	8017f7a <rmw_wait+0x13a>
 8017f98:	f1b8 0f00 	cmp.w	r8, #0
 8017f9c:	d012      	beq.n	8017fc4 <rmw_wait+0x184>
 8017f9e:	f8d8 3000 	ldr.w	r3, [r8]
 8017fa2:	b17b      	cbz	r3, 8017fc4 <rmw_wait+0x184>
 8017fa4:	2400      	movs	r4, #0
 8017fa6:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8017faa:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8017fae:	f7f6 fe8b 	bl	800ecc8 <rmw_uxrce_find_static_input_buffer_by_owner>
 8017fb2:	2800      	cmp	r0, #0
 8017fb4:	d051      	beq.n	801805a <rmw_wait+0x21a>
 8017fb6:	f8d8 3000 	ldr.w	r3, [r8]
 8017fba:	3401      	adds	r4, #1
 8017fbc:	42a3      	cmp	r3, r4
 8017fbe:	f04f 0701 	mov.w	r7, #1
 8017fc2:	d8f0      	bhi.n	8017fa6 <rmw_wait+0x166>
 8017fc4:	b1dd      	cbz	r5, 8017ffe <rmw_wait+0x1be>
 8017fc6:	682b      	ldr	r3, [r5, #0]
 8017fc8:	b1cb      	cbz	r3, 8017ffe <rmw_wait+0x1be>
 8017fca:	2400      	movs	r4, #0
 8017fcc:	686b      	ldr	r3, [r5, #4]
 8017fce:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8017fd2:	f7f6 fe79 	bl	800ecc8 <rmw_uxrce_find_static_input_buffer_by_owner>
 8017fd6:	b158      	cbz	r0, 8017ff0 <rmw_wait+0x1b0>
 8017fd8:	682b      	ldr	r3, [r5, #0]
 8017fda:	3401      	adds	r4, #1
 8017fdc:	42a3      	cmp	r3, r4
 8017fde:	d969      	bls.n	80180b4 <rmw_wait+0x274>
 8017fe0:	686b      	ldr	r3, [r5, #4]
 8017fe2:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8017fe6:	2701      	movs	r7, #1
 8017fe8:	f7f6 fe6e 	bl	800ecc8 <rmw_uxrce_find_static_input_buffer_by_owner>
 8017fec:	2800      	cmp	r0, #0
 8017fee:	d1f3      	bne.n	8017fd8 <rmw_wait+0x198>
 8017ff0:	e9d5 3200 	ldrd	r3, r2, [r5]
 8017ff4:	f842 0024 	str.w	r0, [r2, r4, lsl #2]
 8017ff8:	3401      	adds	r4, #1
 8017ffa:	42a3      	cmp	r3, r4
 8017ffc:	d8e6      	bhi.n	8017fcc <rmw_wait+0x18c>
 8017ffe:	b1a6      	cbz	r6, 801802a <rmw_wait+0x1ea>
 8018000:	6834      	ldr	r4, [r6, #0]
 8018002:	b194      	cbz	r4, 801802a <rmw_wait+0x1ea>
 8018004:	2300      	movs	r3, #0
 8018006:	461d      	mov	r5, r3
 8018008:	e004      	b.n	8018014 <rmw_wait+0x1d4>
 801800a:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
 801800e:	3301      	adds	r3, #1
 8018010:	42a3      	cmp	r3, r4
 8018012:	d00a      	beq.n	801802a <rmw_wait+0x1ea>
 8018014:	6870      	ldr	r0, [r6, #4]
 8018016:	f850 1023 	ldr.w	r1, [r0, r3, lsl #2]
 801801a:	7c0a      	ldrb	r2, [r1, #16]
 801801c:	2a00      	cmp	r2, #0
 801801e:	d0f4      	beq.n	801800a <rmw_wait+0x1ca>
 8018020:	3301      	adds	r3, #1
 8018022:	42a3      	cmp	r3, r4
 8018024:	740d      	strb	r5, [r1, #16]
 8018026:	4617      	mov	r7, r2
 8018028:	d1f4      	bne.n	8018014 <rmw_wait+0x1d4>
 801802a:	2f00      	cmp	r7, #0
 801802c:	d03e      	beq.n	80180ac <rmw_wait+0x26c>
 801802e:	2000      	movs	r0, #0
 8018030:	b009      	add	sp, #36	@ 0x24
 8018032:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8018036:	68a0      	ldr	r0, [r4, #8]
 8018038:	2100      	movs	r1, #0
 801803a:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 801803e:	f7f9 fab1 	bl	80115a4 <uxr_run_session_timeout>
 8018042:	6864      	ldr	r4, [r4, #4]
 8018044:	2c00      	cmp	r4, #0
 8018046:	d1f6      	bne.n	8018036 <rmw_wait+0x1f6>
 8018048:	e78c      	b.n	8017f64 <rmw_wait+0x124>
 801804a:	e9d9 3200 	ldrd	r3, r2, [r9]
 801804e:	f842 0024 	str.w	r0, [r2, r4, lsl #2]
 8018052:	3401      	adds	r4, #1
 8018054:	42a3      	cmp	r3, r4
 8018056:	d890      	bhi.n	8017f7a <rmw_wait+0x13a>
 8018058:	e79e      	b.n	8017f98 <rmw_wait+0x158>
 801805a:	e9d8 3200 	ldrd	r3, r2, [r8]
 801805e:	f842 0024 	str.w	r0, [r2, r4, lsl #2]
 8018062:	3401      	adds	r4, #1
 8018064:	429c      	cmp	r4, r3
 8018066:	d39e      	bcc.n	8017fa6 <rmw_wait+0x166>
 8018068:	e7ac      	b.n	8017fc4 <rmw_wait+0x184>
 801806a:	2b00      	cmp	r3, #0
 801806c:	f47f aef3 	bne.w	8017e56 <rmw_wait+0x16>
 8018070:	2800      	cmp	r0, #0
 8018072:	f47f aef0 	bne.w	8017e56 <rmw_wait+0x16>
 8018076:	2900      	cmp	r1, #0
 8018078:	f47f aeed 	bne.w	8017e56 <rmw_wait+0x16>
 801807c:	e7d7      	b.n	801802e <rmw_wait+0x1ee>
 801807e:	4639      	mov	r1, r7
 8018080:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8018084:	f7f9 faa8 	bl	80115d8 <uxr_run_session_until_data>
 8018088:	6864      	ldr	r4, [r4, #4]
 801808a:	2c00      	cmp	r4, #0
 801808c:	f47f af5f 	bne.w	8017f4e <rmw_wait+0x10e>
 8018090:	e768      	b.n	8017f64 <rmw_wait+0x124>
 8018092:	f1b8 0f00 	cmp.w	r8, #0
 8018096:	d032      	beq.n	80180fe <rmw_wait+0x2be>
 8018098:	f8d8 3000 	ldr.w	r3, [r8]
 801809c:	2b00      	cmp	r3, #0
 801809e:	d181      	bne.n	8017fa4 <rmw_wait+0x164>
 80180a0:	461f      	mov	r7, r3
 80180a2:	2d00      	cmp	r5, #0
 80180a4:	d18f      	bne.n	8017fc6 <rmw_wait+0x186>
 80180a6:	462f      	mov	r7, r5
 80180a8:	2e00      	cmp	r6, #0
 80180aa:	d1a9      	bne.n	8018000 <rmw_wait+0x1c0>
 80180ac:	2002      	movs	r0, #2
 80180ae:	b009      	add	sp, #36	@ 0x24
 80180b0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80180b4:	2e00      	cmp	r6, #0
 80180b6:	d0ba      	beq.n	801802e <rmw_wait+0x1ee>
 80180b8:	6834      	ldr	r4, [r6, #0]
 80180ba:	2701      	movs	r7, #1
 80180bc:	2c00      	cmp	r4, #0
 80180be:	d1a1      	bne.n	8018004 <rmw_wait+0x1c4>
 80180c0:	e7b5      	b.n	801802e <rmw_wait+0x1ee>
 80180c2:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80180c6:	f7fe fd9b 	bl	8016c00 <rmw_time_total_nsec>
 80180ca:	2300      	movs	r3, #0
 80180cc:	4a13      	ldr	r2, [pc, #76]	@ (801811c <rmw_wait+0x2dc>)
 80180ce:	f7e8 fe13 	bl	8000cf8 <__aeabi_uldivmod>
 80180d2:	f1b0 4f00 	cmp.w	r0, #2147483648	@ 0x80000000
 80180d6:	f171 0300 	sbcs.w	r3, r1, #0
 80180da:	4607      	mov	r7, r0
 80180dc:	bfa8      	it	ge
 80180de:	f06f 4700 	mvnge.w	r7, #2147483648	@ 0x80000000
 80180e2:	e6c9      	b.n	8017e78 <rmw_wait+0x38>
 80180e4:	f1b8 0f00 	cmp.w	r8, #0
 80180e8:	d009      	beq.n	80180fe <rmw_wait+0x2be>
 80180ea:	f8d8 3000 	ldr.w	r3, [r8]
 80180ee:	464f      	mov	r7, r9
 80180f0:	2b00      	cmp	r3, #0
 80180f2:	f47f af57 	bne.w	8017fa4 <rmw_wait+0x164>
 80180f6:	2d00      	cmp	r5, #0
 80180f8:	f47f af65 	bne.w	8017fc6 <rmw_wait+0x186>
 80180fc:	e7d3      	b.n	80180a6 <rmw_wait+0x266>
 80180fe:	b17d      	cbz	r5, 8018120 <rmw_wait+0x2e0>
 8018100:	682b      	ldr	r3, [r5, #0]
 8018102:	4647      	mov	r7, r8
 8018104:	2b00      	cmp	r3, #0
 8018106:	f47f af60 	bne.w	8017fca <rmw_wait+0x18a>
 801810a:	2e00      	cmp	r6, #0
 801810c:	f47f af78 	bne.w	8018000 <rmw_wait+0x1c0>
 8018110:	e7cc      	b.n	80180ac <rmw_wait+0x26c>
 8018112:	bf00      	nop
 8018114:	0801d3b0 	.word	0x0801d3b0
 8018118:	2000c08c 	.word	0x2000c08c
 801811c:	000f4240 	.word	0x000f4240
 8018120:	2e00      	cmp	r6, #0
 8018122:	d0c3      	beq.n	80180ac <rmw_wait+0x26c>
 8018124:	6834      	ldr	r4, [r6, #0]
 8018126:	462f      	mov	r7, r5
 8018128:	2c00      	cmp	r4, #0
 801812a:	f47f af6b 	bne.w	8018004 <rmw_wait+0x1c4>
 801812e:	e7bd      	b.n	80180ac <rmw_wait+0x26c>

08018130 <rmw_create_wait_set>:
 8018130:	b508      	push	{r3, lr}
 8018132:	4803      	ldr	r0, [pc, #12]	@ (8018140 <rmw_create_wait_set+0x10>)
 8018134:	f7fe fedc 	bl	8016ef0 <get_memory>
 8018138:	b108      	cbz	r0, 801813e <rmw_create_wait_set+0xe>
 801813a:	6880      	ldr	r0, [r0, #8]
 801813c:	3010      	adds	r0, #16
 801813e:	bd08      	pop	{r3, pc}
 8018140:	2000c0cc 	.word	0x2000c0cc

08018144 <rmw_destroy_wait_set>:
 8018144:	b508      	push	{r3, lr}
 8018146:	4b08      	ldr	r3, [pc, #32]	@ (8018168 <rmw_destroy_wait_set+0x24>)
 8018148:	6819      	ldr	r1, [r3, #0]
 801814a:	b911      	cbnz	r1, 8018152 <rmw_destroy_wait_set+0xe>
 801814c:	e00a      	b.n	8018164 <rmw_destroy_wait_set+0x20>
 801814e:	6849      	ldr	r1, [r1, #4]
 8018150:	b141      	cbz	r1, 8018164 <rmw_destroy_wait_set+0x20>
 8018152:	688b      	ldr	r3, [r1, #8]
 8018154:	3310      	adds	r3, #16
 8018156:	4298      	cmp	r0, r3
 8018158:	d1f9      	bne.n	801814e <rmw_destroy_wait_set+0xa>
 801815a:	4803      	ldr	r0, [pc, #12]	@ (8018168 <rmw_destroy_wait_set+0x24>)
 801815c:	f7fe fed8 	bl	8016f10 <put_memory>
 8018160:	2000      	movs	r0, #0
 8018162:	bd08      	pop	{r3, pc}
 8018164:	2001      	movs	r0, #1
 8018166:	bd08      	pop	{r3, pc}
 8018168:	2000c0cc 	.word	0x2000c0cc

0801816c <rmw_uros_epoch_nanos>:
 801816c:	4b05      	ldr	r3, [pc, #20]	@ (8018184 <rmw_uros_epoch_nanos+0x18>)
 801816e:	681b      	ldr	r3, [r3, #0]
 8018170:	b123      	cbz	r3, 801817c <rmw_uros_epoch_nanos+0x10>
 8018172:	6898      	ldr	r0, [r3, #8]
 8018174:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8018178:	f7f8 be84 	b.w	8010e84 <uxr_epoch_nanos>
 801817c:	2000      	movs	r0, #0
 801817e:	2100      	movs	r1, #0
 8018180:	4770      	bx	lr
 8018182:	bf00      	nop
 8018184:	2000c08c 	.word	0x2000c08c

08018188 <rosidl_runtime_c__double__Sequence__init>:
 8018188:	b530      	push	{r4, r5, lr}
 801818a:	4604      	mov	r4, r0
 801818c:	b087      	sub	sp, #28
 801818e:	b130      	cbz	r0, 801819e <rosidl_runtime_c__double__Sequence__init+0x16>
 8018190:	460d      	mov	r5, r1
 8018192:	b931      	cbnz	r1, 80181a2 <rosidl_runtime_c__double__Sequence__init+0x1a>
 8018194:	4608      	mov	r0, r1
 8018196:	e9c4 0500 	strd	r0, r5, [r4]
 801819a:	60a5      	str	r5, [r4, #8]
 801819c:	2001      	movs	r0, #1
 801819e:	b007      	add	sp, #28
 80181a0:	bd30      	pop	{r4, r5, pc}
 80181a2:	a801      	add	r0, sp, #4
 80181a4:	f7f6 f902 	bl	800e3ac <rcutils_get_default_allocator>
 80181a8:	9b01      	ldr	r3, [sp, #4]
 80181aa:	9905      	ldr	r1, [sp, #20]
 80181ac:	00e8      	lsls	r0, r5, #3
 80181ae:	4798      	blx	r3
 80181b0:	2800      	cmp	r0, #0
 80181b2:	d1f0      	bne.n	8018196 <rosidl_runtime_c__double__Sequence__init+0xe>
 80181b4:	e7f3      	b.n	801819e <rosidl_runtime_c__double__Sequence__init+0x16>
 80181b6:	bf00      	nop

080181b8 <rosidl_runtime_c__double__Sequence__fini>:
 80181b8:	b188      	cbz	r0, 80181de <rosidl_runtime_c__double__Sequence__fini+0x26>
 80181ba:	b510      	push	{r4, lr}
 80181bc:	6803      	ldr	r3, [r0, #0]
 80181be:	b086      	sub	sp, #24
 80181c0:	4604      	mov	r4, r0
 80181c2:	b153      	cbz	r3, 80181da <rosidl_runtime_c__double__Sequence__fini+0x22>
 80181c4:	a801      	add	r0, sp, #4
 80181c6:	f7f6 f8f1 	bl	800e3ac <rcutils_get_default_allocator>
 80181ca:	9b02      	ldr	r3, [sp, #8]
 80181cc:	9905      	ldr	r1, [sp, #20]
 80181ce:	6820      	ldr	r0, [r4, #0]
 80181d0:	4798      	blx	r3
 80181d2:	2300      	movs	r3, #0
 80181d4:	e9c4 3300 	strd	r3, r3, [r4]
 80181d8:	60a3      	str	r3, [r4, #8]
 80181da:	b006      	add	sp, #24
 80181dc:	bd10      	pop	{r4, pc}
 80181de:	4770      	bx	lr

080181e0 <rosidl_typesupport_c__get_message_typesupport_handle_function>:
 80181e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80181e4:	6805      	ldr	r5, [r0, #0]
 80181e6:	4604      	mov	r4, r0
 80181e8:	4628      	mov	r0, r5
 80181ea:	460e      	mov	r6, r1
 80181ec:	f7e7 fff0 	bl	80001d0 <strcmp>
 80181f0:	b1c8      	cbz	r0, 8018226 <rosidl_typesupport_c__get_message_typesupport_handle_function+0x46>
 80181f2:	4b11      	ldr	r3, [pc, #68]	@ (8018238 <rosidl_typesupport_c__get_message_typesupport_handle_function+0x58>)
 80181f4:	681b      	ldr	r3, [r3, #0]
 80181f6:	429d      	cmp	r5, r3
 80181f8:	d112      	bne.n	8018220 <rosidl_typesupport_c__get_message_typesupport_handle_function+0x40>
 80181fa:	f8d4 8004 	ldr.w	r8, [r4, #4]
 80181fe:	f8d8 4000 	ldr.w	r4, [r8]
 8018202:	b16c      	cbz	r4, 8018220 <rosidl_typesupport_c__get_message_typesupport_handle_function+0x40>
 8018204:	f8d8 5008 	ldr.w	r5, [r8, #8]
 8018208:	2700      	movs	r7, #0
 801820a:	3d04      	subs	r5, #4
 801820c:	f855 0f04 	ldr.w	r0, [r5, #4]!
 8018210:	4631      	mov	r1, r6
 8018212:	f7e7 ffdd 	bl	80001d0 <strcmp>
 8018216:	00bb      	lsls	r3, r7, #2
 8018218:	b140      	cbz	r0, 801822c <rosidl_typesupport_c__get_message_typesupport_handle_function+0x4c>
 801821a:	3701      	adds	r7, #1
 801821c:	42bc      	cmp	r4, r7
 801821e:	d1f5      	bne.n	801820c <rosidl_typesupport_c__get_message_typesupport_handle_function+0x2c>
 8018220:	2000      	movs	r0, #0
 8018222:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018226:	4620      	mov	r0, r4
 8018228:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801822c:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8018230:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8018234:	58d3      	ldr	r3, [r2, r3]
 8018236:	4718      	bx	r3
 8018238:	200001b0 	.word	0x200001b0

0801823c <std_msgs__msg__Float64MultiArray__init>:
 801823c:	b570      	push	{r4, r5, r6, lr}
 801823e:	4605      	mov	r5, r0
 8018240:	b1b0      	cbz	r0, 8018270 <std_msgs__msg__Float64MultiArray__init+0x34>
 8018242:	f000 f8b5 	bl	80183b0 <std_msgs__msg__MultiArrayLayout__init>
 8018246:	4604      	mov	r4, r0
 8018248:	b148      	cbz	r0, 801825e <std_msgs__msg__Float64MultiArray__init+0x22>
 801824a:	f105 0610 	add.w	r6, r5, #16
 801824e:	2100      	movs	r1, #0
 8018250:	4630      	mov	r0, r6
 8018252:	f7ff ff99 	bl	8018188 <rosidl_runtime_c__double__Sequence__init>
 8018256:	4604      	mov	r4, r0
 8018258:	b168      	cbz	r0, 8018276 <std_msgs__msg__Float64MultiArray__init+0x3a>
 801825a:	4620      	mov	r0, r4
 801825c:	bd70      	pop	{r4, r5, r6, pc}
 801825e:	4628      	mov	r0, r5
 8018260:	f000 f8b8 	bl	80183d4 <std_msgs__msg__MultiArrayLayout__fini>
 8018264:	f105 0010 	add.w	r0, r5, #16
 8018268:	f7ff ffa6 	bl	80181b8 <rosidl_runtime_c__double__Sequence__fini>
 801826c:	4620      	mov	r0, r4
 801826e:	bd70      	pop	{r4, r5, r6, pc}
 8018270:	4604      	mov	r4, r0
 8018272:	4620      	mov	r0, r4
 8018274:	bd70      	pop	{r4, r5, r6, pc}
 8018276:	4628      	mov	r0, r5
 8018278:	f000 f8ac 	bl	80183d4 <std_msgs__msg__MultiArrayLayout__fini>
 801827c:	4630      	mov	r0, r6
 801827e:	f7ff ff9b 	bl	80181b8 <rosidl_runtime_c__double__Sequence__fini>
 8018282:	e7ea      	b.n	801825a <std_msgs__msg__Float64MultiArray__init+0x1e>

08018284 <std_msgs__msg__Float64MultiArray__fini>:
 8018284:	b148      	cbz	r0, 801829a <std_msgs__msg__Float64MultiArray__fini+0x16>
 8018286:	b510      	push	{r4, lr}
 8018288:	4604      	mov	r4, r0
 801828a:	f000 f8a3 	bl	80183d4 <std_msgs__msg__MultiArrayLayout__fini>
 801828e:	f104 0010 	add.w	r0, r4, #16
 8018292:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8018296:	f7ff bf8f 	b.w	80181b8 <rosidl_runtime_c__double__Sequence__fini>
 801829a:	4770      	bx	lr

0801829c <std_msgs__msg__MultiArrayDimension__Sequence__init.part.0>:
 801829c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80182a0:	b086      	sub	sp, #24
 80182a2:	4682      	mov	sl, r0
 80182a4:	4689      	mov	r9, r1
 80182a6:	a801      	add	r0, sp, #4
 80182a8:	f7f6 f880 	bl	800e3ac <rcutils_get_default_allocator>
 80182ac:	f1b9 0f00 	cmp.w	r9, #0
 80182b0:	d02f      	beq.n	8018312 <std_msgs__msg__MultiArrayDimension__Sequence__init.part.0+0x76>
 80182b2:	e9dd 3804 	ldrd	r3, r8, [sp, #16]
 80182b6:	2114      	movs	r1, #20
 80182b8:	4642      	mov	r2, r8
 80182ba:	4648      	mov	r0, r9
 80182bc:	4798      	blx	r3
 80182be:	4607      	mov	r7, r0
 80182c0:	b388      	cbz	r0, 8018326 <std_msgs__msg__MultiArrayDimension__Sequence__init.part.0+0x8a>
 80182c2:	4606      	mov	r6, r0
 80182c4:	2400      	movs	r4, #0
 80182c6:	e004      	b.n	80182d2 <std_msgs__msg__MultiArrayDimension__Sequence__init.part.0+0x36>
 80182c8:	3401      	adds	r4, #1
 80182ca:	45a1      	cmp	r9, r4
 80182cc:	f106 0614 	add.w	r6, r6, #20
 80182d0:	d020      	beq.n	8018314 <std_msgs__msg__MultiArrayDimension__Sequence__init.part.0+0x78>
 80182d2:	4630      	mov	r0, r6
 80182d4:	f002 fbc2 	bl	801aa5c <rosidl_runtime_c__String__init>
 80182d8:	4605      	mov	r5, r0
 80182da:	2800      	cmp	r0, #0
 80182dc:	d1f4      	bne.n	80182c8 <std_msgs__msg__MultiArrayDimension__Sequence__init.part.0+0x2c>
 80182de:	4630      	mov	r0, r6
 80182e0:	f002 fbd2 	bl	801aa88 <rosidl_runtime_c__String__fini>
 80182e4:	45a1      	cmp	r9, r4
 80182e6:	d915      	bls.n	8018314 <std_msgs__msg__MultiArrayDimension__Sequence__init.part.0+0x78>
 80182e8:	b15c      	cbz	r4, 8018302 <std_msgs__msg__MultiArrayDimension__Sequence__init.part.0+0x66>
 80182ea:	eb04 0484 	add.w	r4, r4, r4, lsl #2
 80182ee:	eb07 0484 	add.w	r4, r7, r4, lsl #2
 80182f2:	3c14      	subs	r4, #20
 80182f4:	4620      	mov	r0, r4
 80182f6:	f002 fbc7 	bl	801aa88 <rosidl_runtime_c__String__fini>
 80182fa:	42a7      	cmp	r7, r4
 80182fc:	f1a4 0414 	sub.w	r4, r4, #20
 8018300:	d1f8      	bne.n	80182f4 <std_msgs__msg__MultiArrayDimension__Sequence__init.part.0+0x58>
 8018302:	4638      	mov	r0, r7
 8018304:	9b02      	ldr	r3, [sp, #8]
 8018306:	4641      	mov	r1, r8
 8018308:	4798      	blx	r3
 801830a:	4628      	mov	r0, r5
 801830c:	b006      	add	sp, #24
 801830e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8018312:	464f      	mov	r7, r9
 8018314:	e9ca 7900 	strd	r7, r9, [sl]
 8018318:	f8ca 9008 	str.w	r9, [sl, #8]
 801831c:	2501      	movs	r5, #1
 801831e:	4628      	mov	r0, r5
 8018320:	b006      	add	sp, #24
 8018322:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8018326:	4605      	mov	r5, r0
 8018328:	e7f9      	b.n	801831e <std_msgs__msg__MultiArrayDimension__Sequence__init.part.0+0x82>
 801832a:	bf00      	nop

0801832c <std_msgs__msg__MultiArrayDimension__init>:
 801832c:	b538      	push	{r3, r4, r5, lr}
 801832e:	4604      	mov	r4, r0
 8018330:	b128      	cbz	r0, 801833e <std_msgs__msg__MultiArrayDimension__init+0x12>
 8018332:	f002 fb93 	bl	801aa5c <rosidl_runtime_c__String__init>
 8018336:	4605      	mov	r5, r0
 8018338:	b120      	cbz	r0, 8018344 <std_msgs__msg__MultiArrayDimension__init+0x18>
 801833a:	4628      	mov	r0, r5
 801833c:	bd38      	pop	{r3, r4, r5, pc}
 801833e:	4605      	mov	r5, r0
 8018340:	4628      	mov	r0, r5
 8018342:	bd38      	pop	{r3, r4, r5, pc}
 8018344:	4620      	mov	r0, r4
 8018346:	f002 fb9f 	bl	801aa88 <rosidl_runtime_c__String__fini>
 801834a:	4628      	mov	r0, r5
 801834c:	bd38      	pop	{r3, r4, r5, pc}
 801834e:	bf00      	nop

08018350 <std_msgs__msg__MultiArrayDimension__fini>:
 8018350:	b108      	cbz	r0, 8018356 <std_msgs__msg__MultiArrayDimension__fini+0x6>
 8018352:	f002 bb99 	b.w	801aa88 <rosidl_runtime_c__String__fini>
 8018356:	4770      	bx	lr

08018358 <std_msgs__msg__MultiArrayDimension__Sequence__init>:
 8018358:	b108      	cbz	r0, 801835e <std_msgs__msg__MultiArrayDimension__Sequence__init+0x6>
 801835a:	f7ff bf9f 	b.w	801829c <std_msgs__msg__MultiArrayDimension__Sequence__init.part.0>
 801835e:	4770      	bx	lr

08018360 <std_msgs__msg__MultiArrayDimension__Sequence__fini>:
 8018360:	b320      	cbz	r0, 80183ac <std_msgs__msg__MultiArrayDimension__Sequence__fini+0x4c>
 8018362:	b530      	push	{r4, r5, lr}
 8018364:	4605      	mov	r5, r0
 8018366:	b087      	sub	sp, #28
 8018368:	a801      	add	r0, sp, #4
 801836a:	f7f6 f81f 	bl	800e3ac <rcutils_get_default_allocator>
 801836e:	682a      	ldr	r2, [r5, #0]
 8018370:	b1b2      	cbz	r2, 80183a0 <std_msgs__msg__MultiArrayDimension__Sequence__fini+0x40>
 8018372:	68a9      	ldr	r1, [r5, #8]
 8018374:	b161      	cbz	r1, 8018390 <std_msgs__msg__MultiArrayDimension__Sequence__fini+0x30>
 8018376:	2400      	movs	r4, #0
 8018378:	eb04 0384 	add.w	r3, r4, r4, lsl #2
 801837c:	eb12 0083 	adds.w	r0, r2, r3, lsl #2
 8018380:	d010      	beq.n	80183a4 <std_msgs__msg__MultiArrayDimension__Sequence__fini+0x44>
 8018382:	f002 fb81 	bl	801aa88 <rosidl_runtime_c__String__fini>
 8018386:	68a9      	ldr	r1, [r5, #8]
 8018388:	682a      	ldr	r2, [r5, #0]
 801838a:	3401      	adds	r4, #1
 801838c:	428c      	cmp	r4, r1
 801838e:	d3f3      	bcc.n	8018378 <std_msgs__msg__MultiArrayDimension__Sequence__fini+0x18>
 8018390:	9b02      	ldr	r3, [sp, #8]
 8018392:	9905      	ldr	r1, [sp, #20]
 8018394:	4610      	mov	r0, r2
 8018396:	4798      	blx	r3
 8018398:	2300      	movs	r3, #0
 801839a:	e9c5 3300 	strd	r3, r3, [r5]
 801839e:	60ab      	str	r3, [r5, #8]
 80183a0:	b007      	add	sp, #28
 80183a2:	bd30      	pop	{r4, r5, pc}
 80183a4:	3401      	adds	r4, #1
 80183a6:	428c      	cmp	r4, r1
 80183a8:	d3e6      	bcc.n	8018378 <std_msgs__msg__MultiArrayDimension__Sequence__fini+0x18>
 80183aa:	e7f1      	b.n	8018390 <std_msgs__msg__MultiArrayDimension__Sequence__fini+0x30>
 80183ac:	4770      	bx	lr
 80183ae:	bf00      	nop

080183b0 <std_msgs__msg__MultiArrayLayout__init>:
 80183b0:	b538      	push	{r3, r4, r5, lr}
 80183b2:	4604      	mov	r4, r0
 80183b4:	b130      	cbz	r0, 80183c4 <std_msgs__msg__MultiArrayLayout__init+0x14>
 80183b6:	2100      	movs	r1, #0
 80183b8:	f7ff ffce 	bl	8018358 <std_msgs__msg__MultiArrayDimension__Sequence__init>
 80183bc:	4605      	mov	r5, r0
 80183be:	b120      	cbz	r0, 80183ca <std_msgs__msg__MultiArrayLayout__init+0x1a>
 80183c0:	4628      	mov	r0, r5
 80183c2:	bd38      	pop	{r3, r4, r5, pc}
 80183c4:	4605      	mov	r5, r0
 80183c6:	4628      	mov	r0, r5
 80183c8:	bd38      	pop	{r3, r4, r5, pc}
 80183ca:	4620      	mov	r0, r4
 80183cc:	f7ff ffc8 	bl	8018360 <std_msgs__msg__MultiArrayDimension__Sequence__fini>
 80183d0:	4628      	mov	r0, r5
 80183d2:	bd38      	pop	{r3, r4, r5, pc}

080183d4 <std_msgs__msg__MultiArrayLayout__fini>:
 80183d4:	b108      	cbz	r0, 80183da <std_msgs__msg__MultiArrayLayout__fini+0x6>
 80183d6:	f7ff bfc3 	b.w	8018360 <std_msgs__msg__MultiArrayDimension__Sequence__fini>
 80183da:	4770      	bx	lr

080183dc <std_msgs__msg__MultiArrayDimension__rosidl_typesupport_introspection_c__MultiArrayDimension_init_function>:
 80183dc:	f7ff bfa6 	b.w	801832c <std_msgs__msg__MultiArrayDimension__init>

080183e0 <std_msgs__msg__MultiArrayDimension__rosidl_typesupport_introspection_c__MultiArrayDimension_fini_function>:
 80183e0:	f7ff bfb6 	b.w	8018350 <std_msgs__msg__MultiArrayDimension__fini>

080183e4 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__MultiArrayDimension>:
 80183e4:	4b04      	ldr	r3, [pc, #16]	@ (80183f8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__MultiArrayDimension+0x14>)
 80183e6:	681a      	ldr	r2, [r3, #0]
 80183e8:	b10a      	cbz	r2, 80183ee <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__MultiArrayDimension+0xa>
 80183ea:	4803      	ldr	r0, [pc, #12]	@ (80183f8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__MultiArrayDimension+0x14>)
 80183ec:	4770      	bx	lr
 80183ee:	4a03      	ldr	r2, [pc, #12]	@ (80183fc <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__MultiArrayDimension+0x18>)
 80183f0:	4801      	ldr	r0, [pc, #4]	@ (80183f8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__MultiArrayDimension+0x14>)
 80183f2:	6812      	ldr	r2, [r2, #0]
 80183f4:	601a      	str	r2, [r3, #0]
 80183f6:	4770      	bx	lr
 80183f8:	2000026c 	.word	0x2000026c
 80183fc:	200001b4 	.word	0x200001b4

08018400 <_MultiArrayDimension__cdr_serialize>:
 8018400:	b1d0      	cbz	r0, 8018438 <_MultiArrayDimension__cdr_serialize+0x38>
 8018402:	b570      	push	{r4, r5, r6, lr}
 8018404:	6806      	ldr	r6, [r0, #0]
 8018406:	460d      	mov	r5, r1
 8018408:	4604      	mov	r4, r0
 801840a:	b196      	cbz	r6, 8018432 <_MultiArrayDimension__cdr_serialize+0x32>
 801840c:	4630      	mov	r0, r6
 801840e:	f7e7 fee9 	bl	80001e4 <strlen>
 8018412:	1c42      	adds	r2, r0, #1
 8018414:	4631      	mov	r1, r6
 8018416:	6060      	str	r0, [r4, #4]
 8018418:	4628      	mov	r0, r5
 801841a:	f7f8 f967 	bl	80106ec <ucdr_serialize_sequence_char>
 801841e:	68e1      	ldr	r1, [r4, #12]
 8018420:	4628      	mov	r0, r5
 8018422:	f7f7 f9bd 	bl	800f7a0 <ucdr_serialize_uint32_t>
 8018426:	6921      	ldr	r1, [r4, #16]
 8018428:	4628      	mov	r0, r5
 801842a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801842e:	f7f7 b9b7 	b.w	800f7a0 <ucdr_serialize_uint32_t>
 8018432:	4632      	mov	r2, r6
 8018434:	4630      	mov	r0, r6
 8018436:	e7ed      	b.n	8018414 <_MultiArrayDimension__cdr_serialize+0x14>
 8018438:	4770      	bx	lr
 801843a:	bf00      	nop

0801843c <get_serialized_size_std_msgs__msg__MultiArrayDimension>:
 801843c:	b570      	push	{r4, r5, r6, lr}
 801843e:	4604      	mov	r4, r0
 8018440:	b1b0      	cbz	r0, 8018470 <get_serialized_size_std_msgs__msg__MultiArrayDimension+0x34>
 8018442:	460d      	mov	r5, r1
 8018444:	4628      	mov	r0, r5
 8018446:	2104      	movs	r1, #4
 8018448:	f7f8 f8e4 	bl	8010614 <ucdr_alignment>
 801844c:	6866      	ldr	r6, [r4, #4]
 801844e:	1d6b      	adds	r3, r5, #5
 8018450:	4433      	add	r3, r6
 8018452:	181e      	adds	r6, r3, r0
 8018454:	2104      	movs	r1, #4
 8018456:	4630      	mov	r0, r6
 8018458:	f7f8 f8dc 	bl	8010614 <ucdr_alignment>
 801845c:	1d04      	adds	r4, r0, #4
 801845e:	4434      	add	r4, r6
 8018460:	2104      	movs	r1, #4
 8018462:	4620      	mov	r0, r4
 8018464:	f7f8 f8d6 	bl	8010614 <ucdr_alignment>
 8018468:	f1c5 0504 	rsb	r5, r5, #4
 801846c:	4428      	add	r0, r5
 801846e:	4420      	add	r0, r4
 8018470:	bd70      	pop	{r4, r5, r6, pc}
 8018472:	bf00      	nop

08018474 <_MultiArrayDimension__cdr_deserialize>:
 8018474:	b570      	push	{r4, r5, r6, lr}
 8018476:	460c      	mov	r4, r1
 8018478:	b082      	sub	sp, #8
 801847a:	b1d9      	cbz	r1, 80184b4 <_MultiArrayDimension__cdr_deserialize+0x40>
 801847c:	688e      	ldr	r6, [r1, #8]
 801847e:	6809      	ldr	r1, [r1, #0]
 8018480:	ab01      	add	r3, sp, #4
 8018482:	4632      	mov	r2, r6
 8018484:	4605      	mov	r5, r0
 8018486:	f7f8 f943 	bl	8010710 <ucdr_deserialize_sequence_char>
 801848a:	9b01      	ldr	r3, [sp, #4]
 801848c:	b970      	cbnz	r0, 80184ac <_MultiArrayDimension__cdr_deserialize+0x38>
 801848e:	429e      	cmp	r6, r3
 8018490:	d313      	bcc.n	80184ba <_MultiArrayDimension__cdr_deserialize+0x46>
 8018492:	f104 010c 	add.w	r1, r4, #12
 8018496:	4628      	mov	r0, r5
 8018498:	f7f7 fab2 	bl	800fa00 <ucdr_deserialize_uint32_t>
 801849c:	f104 0110 	add.w	r1, r4, #16
 80184a0:	4628      	mov	r0, r5
 80184a2:	b002      	add	sp, #8
 80184a4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80184a8:	f7f7 baaa 	b.w	800fa00 <ucdr_deserialize_uint32_t>
 80184ac:	b103      	cbz	r3, 80184b0 <_MultiArrayDimension__cdr_deserialize+0x3c>
 80184ae:	3b01      	subs	r3, #1
 80184b0:	6063      	str	r3, [r4, #4]
 80184b2:	e7ee      	b.n	8018492 <_MultiArrayDimension__cdr_deserialize+0x1e>
 80184b4:	4608      	mov	r0, r1
 80184b6:	b002      	add	sp, #8
 80184b8:	bd70      	pop	{r4, r5, r6, pc}
 80184ba:	2101      	movs	r1, #1
 80184bc:	75a8      	strb	r0, [r5, #22]
 80184be:	7569      	strb	r1, [r5, #21]
 80184c0:	6060      	str	r0, [r4, #4]
 80184c2:	4628      	mov	r0, r5
 80184c4:	f7f8 f8bc 	bl	8010640 <ucdr_align_to>
 80184c8:	9901      	ldr	r1, [sp, #4]
 80184ca:	4628      	mov	r0, r5
 80184cc:	f7f8 f8ee 	bl	80106ac <ucdr_advance_buffer>
 80184d0:	e7df      	b.n	8018492 <_MultiArrayDimension__cdr_deserialize+0x1e>
 80184d2:	bf00      	nop

080184d4 <_MultiArrayDimension__max_serialized_size>:
 80184d4:	b510      	push	{r4, lr}
 80184d6:	2104      	movs	r1, #4
 80184d8:	2000      	movs	r0, #0
 80184da:	f7f8 f89b 	bl	8010614 <ucdr_alignment>
 80184de:	1d04      	adds	r4, r0, #4
 80184e0:	2104      	movs	r1, #4
 80184e2:	4620      	mov	r0, r4
 80184e4:	f7f8 f896 	bl	8010614 <ucdr_alignment>
 80184e8:	3004      	adds	r0, #4
 80184ea:	4420      	add	r0, r4
 80184ec:	bd10      	pop	{r4, pc}
 80184ee:	bf00      	nop

080184f0 <_MultiArrayDimension__get_serialized_size>:
 80184f0:	b510      	push	{r4, lr}
 80184f2:	4604      	mov	r4, r0
 80184f4:	b190      	cbz	r0, 801851c <_MultiArrayDimension__get_serialized_size+0x2c>
 80184f6:	2104      	movs	r1, #4
 80184f8:	2000      	movs	r0, #0
 80184fa:	f7f8 f88b 	bl	8010614 <ucdr_alignment>
 80184fe:	6863      	ldr	r3, [r4, #4]
 8018500:	3305      	adds	r3, #5
 8018502:	181c      	adds	r4, r3, r0
 8018504:	2104      	movs	r1, #4
 8018506:	4620      	mov	r0, r4
 8018508:	f7f8 f884 	bl	8010614 <ucdr_alignment>
 801850c:	3004      	adds	r0, #4
 801850e:	4404      	add	r4, r0
 8018510:	2104      	movs	r1, #4
 8018512:	4620      	mov	r0, r4
 8018514:	f7f8 f87e 	bl	8010614 <ucdr_alignment>
 8018518:	3004      	adds	r0, #4
 801851a:	4420      	add	r0, r4
 801851c:	bd10      	pop	{r4, pc}
 801851e:	bf00      	nop

08018520 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__MultiArrayDimension>:
 8018520:	4800      	ldr	r0, [pc, #0]	@ (8018524 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__MultiArrayDimension+0x4>)
 8018522:	4770      	bx	lr
 8018524:	20000278 	.word	0x20000278

08018528 <ucdr_serialize_endian_array_char>:
 8018528:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801852c:	4619      	mov	r1, r3
 801852e:	461f      	mov	r7, r3
 8018530:	4605      	mov	r5, r0
 8018532:	4690      	mov	r8, r2
 8018534:	f7f8 f816 	bl	8010564 <ucdr_check_buffer_available_for>
 8018538:	b9e0      	cbnz	r0, 8018574 <ucdr_serialize_endian_array_char+0x4c>
 801853a:	463e      	mov	r6, r7
 801853c:	e009      	b.n	8018552 <ucdr_serialize_endian_array_char+0x2a>
 801853e:	68a8      	ldr	r0, [r5, #8]
 8018540:	f003 f8f3 	bl	801b72a <memcpy>
 8018544:	68ab      	ldr	r3, [r5, #8]
 8018546:	6928      	ldr	r0, [r5, #16]
 8018548:	4423      	add	r3, r4
 801854a:	4420      	add	r0, r4
 801854c:	1b36      	subs	r6, r6, r4
 801854e:	60ab      	str	r3, [r5, #8]
 8018550:	6128      	str	r0, [r5, #16]
 8018552:	4631      	mov	r1, r6
 8018554:	2201      	movs	r2, #1
 8018556:	4628      	mov	r0, r5
 8018558:	f7f8 f88c 	bl	8010674 <ucdr_check_final_buffer_behavior_array>
 801855c:	1bb9      	subs	r1, r7, r6
 801855e:	4441      	add	r1, r8
 8018560:	4604      	mov	r4, r0
 8018562:	4602      	mov	r2, r0
 8018564:	2800      	cmp	r0, #0
 8018566:	d1ea      	bne.n	801853e <ucdr_serialize_endian_array_char+0x16>
 8018568:	2301      	movs	r3, #1
 801856a:	7da8      	ldrb	r0, [r5, #22]
 801856c:	756b      	strb	r3, [r5, #21]
 801856e:	4058      	eors	r0, r3
 8018570:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018574:	463a      	mov	r2, r7
 8018576:	68a8      	ldr	r0, [r5, #8]
 8018578:	4641      	mov	r1, r8
 801857a:	f003 f8d6 	bl	801b72a <memcpy>
 801857e:	68aa      	ldr	r2, [r5, #8]
 8018580:	692b      	ldr	r3, [r5, #16]
 8018582:	443a      	add	r2, r7
 8018584:	443b      	add	r3, r7
 8018586:	60aa      	str	r2, [r5, #8]
 8018588:	612b      	str	r3, [r5, #16]
 801858a:	e7ed      	b.n	8018568 <ucdr_serialize_endian_array_char+0x40>

0801858c <ucdr_deserialize_endian_array_char>:
 801858c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018590:	4619      	mov	r1, r3
 8018592:	461f      	mov	r7, r3
 8018594:	4605      	mov	r5, r0
 8018596:	4690      	mov	r8, r2
 8018598:	f7f7 ffe4 	bl	8010564 <ucdr_check_buffer_available_for>
 801859c:	b9e0      	cbnz	r0, 80185d8 <ucdr_deserialize_endian_array_char+0x4c>
 801859e:	463e      	mov	r6, r7
 80185a0:	e009      	b.n	80185b6 <ucdr_deserialize_endian_array_char+0x2a>
 80185a2:	68a9      	ldr	r1, [r5, #8]
 80185a4:	f003 f8c1 	bl	801b72a <memcpy>
 80185a8:	68ab      	ldr	r3, [r5, #8]
 80185aa:	6928      	ldr	r0, [r5, #16]
 80185ac:	4423      	add	r3, r4
 80185ae:	4420      	add	r0, r4
 80185b0:	1b36      	subs	r6, r6, r4
 80185b2:	60ab      	str	r3, [r5, #8]
 80185b4:	6128      	str	r0, [r5, #16]
 80185b6:	2201      	movs	r2, #1
 80185b8:	4631      	mov	r1, r6
 80185ba:	4628      	mov	r0, r5
 80185bc:	f7f8 f85a 	bl	8010674 <ucdr_check_final_buffer_behavior_array>
 80185c0:	4604      	mov	r4, r0
 80185c2:	1bb8      	subs	r0, r7, r6
 80185c4:	4440      	add	r0, r8
 80185c6:	4622      	mov	r2, r4
 80185c8:	2c00      	cmp	r4, #0
 80185ca:	d1ea      	bne.n	80185a2 <ucdr_deserialize_endian_array_char+0x16>
 80185cc:	2301      	movs	r3, #1
 80185ce:	7da8      	ldrb	r0, [r5, #22]
 80185d0:	756b      	strb	r3, [r5, #21]
 80185d2:	4058      	eors	r0, r3
 80185d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80185d8:	463a      	mov	r2, r7
 80185da:	68a9      	ldr	r1, [r5, #8]
 80185dc:	4640      	mov	r0, r8
 80185de:	f003 f8a4 	bl	801b72a <memcpy>
 80185e2:	68aa      	ldr	r2, [r5, #8]
 80185e4:	692b      	ldr	r3, [r5, #16]
 80185e6:	443a      	add	r2, r7
 80185e8:	443b      	add	r3, r7
 80185ea:	60aa      	str	r2, [r5, #8]
 80185ec:	612b      	str	r3, [r5, #16]
 80185ee:	e7ed      	b.n	80185cc <ucdr_deserialize_endian_array_char+0x40>

080185f0 <ucdr_serialize_array_uint8_t>:
 80185f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80185f4:	4688      	mov	r8, r1
 80185f6:	4611      	mov	r1, r2
 80185f8:	4617      	mov	r7, r2
 80185fa:	4605      	mov	r5, r0
 80185fc:	f7f7 ffb2 	bl	8010564 <ucdr_check_buffer_available_for>
 8018600:	b9e0      	cbnz	r0, 801863c <ucdr_serialize_array_uint8_t+0x4c>
 8018602:	463e      	mov	r6, r7
 8018604:	e009      	b.n	801861a <ucdr_serialize_array_uint8_t+0x2a>
 8018606:	68a8      	ldr	r0, [r5, #8]
 8018608:	f003 f88f 	bl	801b72a <memcpy>
 801860c:	68aa      	ldr	r2, [r5, #8]
 801860e:	692b      	ldr	r3, [r5, #16]
 8018610:	4422      	add	r2, r4
 8018612:	4423      	add	r3, r4
 8018614:	1b36      	subs	r6, r6, r4
 8018616:	60aa      	str	r2, [r5, #8]
 8018618:	612b      	str	r3, [r5, #16]
 801861a:	4631      	mov	r1, r6
 801861c:	2201      	movs	r2, #1
 801861e:	4628      	mov	r0, r5
 8018620:	f7f8 f828 	bl	8010674 <ucdr_check_final_buffer_behavior_array>
 8018624:	1bb9      	subs	r1, r7, r6
 8018626:	4441      	add	r1, r8
 8018628:	4604      	mov	r4, r0
 801862a:	4602      	mov	r2, r0
 801862c:	2800      	cmp	r0, #0
 801862e:	d1ea      	bne.n	8018606 <ucdr_serialize_array_uint8_t+0x16>
 8018630:	2301      	movs	r3, #1
 8018632:	7da8      	ldrb	r0, [r5, #22]
 8018634:	756b      	strb	r3, [r5, #21]
 8018636:	4058      	eors	r0, r3
 8018638:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801863c:	463a      	mov	r2, r7
 801863e:	68a8      	ldr	r0, [r5, #8]
 8018640:	4641      	mov	r1, r8
 8018642:	f003 f872 	bl	801b72a <memcpy>
 8018646:	68aa      	ldr	r2, [r5, #8]
 8018648:	692b      	ldr	r3, [r5, #16]
 801864a:	443a      	add	r2, r7
 801864c:	443b      	add	r3, r7
 801864e:	60aa      	str	r2, [r5, #8]
 8018650:	612b      	str	r3, [r5, #16]
 8018652:	e7ed      	b.n	8018630 <ucdr_serialize_array_uint8_t+0x40>

08018654 <ucdr_serialize_endian_array_uint8_t>:
 8018654:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018658:	4619      	mov	r1, r3
 801865a:	461f      	mov	r7, r3
 801865c:	4605      	mov	r5, r0
 801865e:	4690      	mov	r8, r2
 8018660:	f7f7 ff80 	bl	8010564 <ucdr_check_buffer_available_for>
 8018664:	b9e0      	cbnz	r0, 80186a0 <ucdr_serialize_endian_array_uint8_t+0x4c>
 8018666:	463e      	mov	r6, r7
 8018668:	e009      	b.n	801867e <ucdr_serialize_endian_array_uint8_t+0x2a>
 801866a:	68a8      	ldr	r0, [r5, #8]
 801866c:	f003 f85d 	bl	801b72a <memcpy>
 8018670:	68ab      	ldr	r3, [r5, #8]
 8018672:	6928      	ldr	r0, [r5, #16]
 8018674:	4423      	add	r3, r4
 8018676:	4420      	add	r0, r4
 8018678:	1b36      	subs	r6, r6, r4
 801867a:	60ab      	str	r3, [r5, #8]
 801867c:	6128      	str	r0, [r5, #16]
 801867e:	4631      	mov	r1, r6
 8018680:	2201      	movs	r2, #1
 8018682:	4628      	mov	r0, r5
 8018684:	f7f7 fff6 	bl	8010674 <ucdr_check_final_buffer_behavior_array>
 8018688:	1bb9      	subs	r1, r7, r6
 801868a:	4441      	add	r1, r8
 801868c:	4604      	mov	r4, r0
 801868e:	4602      	mov	r2, r0
 8018690:	2800      	cmp	r0, #0
 8018692:	d1ea      	bne.n	801866a <ucdr_serialize_endian_array_uint8_t+0x16>
 8018694:	2301      	movs	r3, #1
 8018696:	7da8      	ldrb	r0, [r5, #22]
 8018698:	756b      	strb	r3, [r5, #21]
 801869a:	4058      	eors	r0, r3
 801869c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80186a0:	463a      	mov	r2, r7
 80186a2:	68a8      	ldr	r0, [r5, #8]
 80186a4:	4641      	mov	r1, r8
 80186a6:	f003 f840 	bl	801b72a <memcpy>
 80186aa:	68aa      	ldr	r2, [r5, #8]
 80186ac:	692b      	ldr	r3, [r5, #16]
 80186ae:	443a      	add	r2, r7
 80186b0:	443b      	add	r3, r7
 80186b2:	60aa      	str	r2, [r5, #8]
 80186b4:	612b      	str	r3, [r5, #16]
 80186b6:	e7ed      	b.n	8018694 <ucdr_serialize_endian_array_uint8_t+0x40>

080186b8 <ucdr_deserialize_array_uint8_t>:
 80186b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80186bc:	4688      	mov	r8, r1
 80186be:	4611      	mov	r1, r2
 80186c0:	4617      	mov	r7, r2
 80186c2:	4605      	mov	r5, r0
 80186c4:	f7f7 ff4e 	bl	8010564 <ucdr_check_buffer_available_for>
 80186c8:	b9e0      	cbnz	r0, 8018704 <ucdr_deserialize_array_uint8_t+0x4c>
 80186ca:	463e      	mov	r6, r7
 80186cc:	e009      	b.n	80186e2 <ucdr_deserialize_array_uint8_t+0x2a>
 80186ce:	68a9      	ldr	r1, [r5, #8]
 80186d0:	f003 f82b 	bl	801b72a <memcpy>
 80186d4:	68aa      	ldr	r2, [r5, #8]
 80186d6:	692b      	ldr	r3, [r5, #16]
 80186d8:	4422      	add	r2, r4
 80186da:	4423      	add	r3, r4
 80186dc:	1b36      	subs	r6, r6, r4
 80186de:	60aa      	str	r2, [r5, #8]
 80186e0:	612b      	str	r3, [r5, #16]
 80186e2:	2201      	movs	r2, #1
 80186e4:	4631      	mov	r1, r6
 80186e6:	4628      	mov	r0, r5
 80186e8:	f7f7 ffc4 	bl	8010674 <ucdr_check_final_buffer_behavior_array>
 80186ec:	4604      	mov	r4, r0
 80186ee:	1bb8      	subs	r0, r7, r6
 80186f0:	4440      	add	r0, r8
 80186f2:	4622      	mov	r2, r4
 80186f4:	2c00      	cmp	r4, #0
 80186f6:	d1ea      	bne.n	80186ce <ucdr_deserialize_array_uint8_t+0x16>
 80186f8:	2301      	movs	r3, #1
 80186fa:	7da8      	ldrb	r0, [r5, #22]
 80186fc:	756b      	strb	r3, [r5, #21]
 80186fe:	4058      	eors	r0, r3
 8018700:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018704:	463a      	mov	r2, r7
 8018706:	68a9      	ldr	r1, [r5, #8]
 8018708:	4640      	mov	r0, r8
 801870a:	f003 f80e 	bl	801b72a <memcpy>
 801870e:	68aa      	ldr	r2, [r5, #8]
 8018710:	692b      	ldr	r3, [r5, #16]
 8018712:	443a      	add	r2, r7
 8018714:	443b      	add	r3, r7
 8018716:	60aa      	str	r2, [r5, #8]
 8018718:	612b      	str	r3, [r5, #16]
 801871a:	e7ed      	b.n	80186f8 <ucdr_deserialize_array_uint8_t+0x40>

0801871c <ucdr_deserialize_endian_array_uint8_t>:
 801871c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018720:	4619      	mov	r1, r3
 8018722:	461f      	mov	r7, r3
 8018724:	4605      	mov	r5, r0
 8018726:	4690      	mov	r8, r2
 8018728:	f7f7 ff1c 	bl	8010564 <ucdr_check_buffer_available_for>
 801872c:	b9e0      	cbnz	r0, 8018768 <ucdr_deserialize_endian_array_uint8_t+0x4c>
 801872e:	463e      	mov	r6, r7
 8018730:	e009      	b.n	8018746 <ucdr_deserialize_endian_array_uint8_t+0x2a>
 8018732:	68a9      	ldr	r1, [r5, #8]
 8018734:	f002 fff9 	bl	801b72a <memcpy>
 8018738:	68ab      	ldr	r3, [r5, #8]
 801873a:	6928      	ldr	r0, [r5, #16]
 801873c:	4423      	add	r3, r4
 801873e:	4420      	add	r0, r4
 8018740:	1b36      	subs	r6, r6, r4
 8018742:	60ab      	str	r3, [r5, #8]
 8018744:	6128      	str	r0, [r5, #16]
 8018746:	2201      	movs	r2, #1
 8018748:	4631      	mov	r1, r6
 801874a:	4628      	mov	r0, r5
 801874c:	f7f7 ff92 	bl	8010674 <ucdr_check_final_buffer_behavior_array>
 8018750:	4604      	mov	r4, r0
 8018752:	1bb8      	subs	r0, r7, r6
 8018754:	4440      	add	r0, r8
 8018756:	4622      	mov	r2, r4
 8018758:	2c00      	cmp	r4, #0
 801875a:	d1ea      	bne.n	8018732 <ucdr_deserialize_endian_array_uint8_t+0x16>
 801875c:	2301      	movs	r3, #1
 801875e:	7da8      	ldrb	r0, [r5, #22]
 8018760:	756b      	strb	r3, [r5, #21]
 8018762:	4058      	eors	r0, r3
 8018764:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018768:	463a      	mov	r2, r7
 801876a:	68a9      	ldr	r1, [r5, #8]
 801876c:	4640      	mov	r0, r8
 801876e:	f002 ffdc 	bl	801b72a <memcpy>
 8018772:	68aa      	ldr	r2, [r5, #8]
 8018774:	692b      	ldr	r3, [r5, #16]
 8018776:	443a      	add	r2, r7
 8018778:	443b      	add	r3, r7
 801877a:	60aa      	str	r2, [r5, #8]
 801877c:	612b      	str	r3, [r5, #16]
 801877e:	e7ed      	b.n	801875c <ucdr_deserialize_endian_array_uint8_t+0x40>

08018780 <ucdr_serialize_endian_array_double>:
 8018780:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018784:	4688      	mov	r8, r1
 8018786:	2108      	movs	r1, #8
 8018788:	4604      	mov	r4, r0
 801878a:	4616      	mov	r6, r2
 801878c:	461f      	mov	r7, r3
 801878e:	f7f7 ff49 	bl	8010624 <ucdr_buffer_alignment>
 8018792:	4601      	mov	r1, r0
 8018794:	4620      	mov	r0, r4
 8018796:	7d65      	ldrb	r5, [r4, #21]
 8018798:	f7f7 ff88 	bl	80106ac <ucdr_advance_buffer>
 801879c:	f1b8 0f01 	cmp.w	r8, #1
 80187a0:	7565      	strb	r5, [r4, #21]
 80187a2:	d00f      	beq.n	80187c4 <ucdr_serialize_endian_array_double+0x44>
 80187a4:	2500      	movs	r5, #0
 80187a6:	b147      	cbz	r7, 80187ba <ucdr_serialize_endian_array_double+0x3a>
 80187a8:	ecb6 0b02 	vldmia	r6!, {d0}
 80187ac:	4641      	mov	r1, r8
 80187ae:	4620      	mov	r0, r4
 80187b0:	3501      	adds	r5, #1
 80187b2:	f7f7 fd37 	bl	8010224 <ucdr_serialize_endian_double>
 80187b6:	42af      	cmp	r7, r5
 80187b8:	d1f6      	bne.n	80187a8 <ucdr_serialize_endian_array_double+0x28>
 80187ba:	7da0      	ldrb	r0, [r4, #22]
 80187bc:	f080 0001 	eor.w	r0, r0, #1
 80187c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80187c4:	00ff      	lsls	r7, r7, #3
 80187c6:	4639      	mov	r1, r7
 80187c8:	4620      	mov	r0, r4
 80187ca:	f7f7 fecb 	bl	8010564 <ucdr_check_buffer_available_for>
 80187ce:	b9f8      	cbnz	r0, 8018810 <ucdr_serialize_endian_array_double+0x90>
 80187d0:	46b8      	mov	r8, r7
 80187d2:	e00a      	b.n	80187ea <ucdr_serialize_endian_array_double+0x6a>
 80187d4:	68a0      	ldr	r0, [r4, #8]
 80187d6:	f002 ffa8 	bl	801b72a <memcpy>
 80187da:	68a2      	ldr	r2, [r4, #8]
 80187dc:	6923      	ldr	r3, [r4, #16]
 80187de:	442a      	add	r2, r5
 80187e0:	442b      	add	r3, r5
 80187e2:	eba8 0805 	sub.w	r8, r8, r5
 80187e6:	60a2      	str	r2, [r4, #8]
 80187e8:	6123      	str	r3, [r4, #16]
 80187ea:	4641      	mov	r1, r8
 80187ec:	2208      	movs	r2, #8
 80187ee:	4620      	mov	r0, r4
 80187f0:	f7f7 ff40 	bl	8010674 <ucdr_check_final_buffer_behavior_array>
 80187f4:	eba7 0108 	sub.w	r1, r7, r8
 80187f8:	4431      	add	r1, r6
 80187fa:	4605      	mov	r5, r0
 80187fc:	4602      	mov	r2, r0
 80187fe:	2800      	cmp	r0, #0
 8018800:	d1e8      	bne.n	80187d4 <ucdr_serialize_endian_array_double+0x54>
 8018802:	7da0      	ldrb	r0, [r4, #22]
 8018804:	2308      	movs	r3, #8
 8018806:	7563      	strb	r3, [r4, #21]
 8018808:	f080 0001 	eor.w	r0, r0, #1
 801880c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018810:	463a      	mov	r2, r7
 8018812:	68a0      	ldr	r0, [r4, #8]
 8018814:	4631      	mov	r1, r6
 8018816:	f002 ff88 	bl	801b72a <memcpy>
 801881a:	68a2      	ldr	r2, [r4, #8]
 801881c:	6923      	ldr	r3, [r4, #16]
 801881e:	443a      	add	r2, r7
 8018820:	441f      	add	r7, r3
 8018822:	60a2      	str	r2, [r4, #8]
 8018824:	6127      	str	r7, [r4, #16]
 8018826:	e7ec      	b.n	8018802 <ucdr_serialize_endian_array_double+0x82>

08018828 <ucdr_deserialize_endian_array_double>:
 8018828:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801882c:	4688      	mov	r8, r1
 801882e:	2108      	movs	r1, #8
 8018830:	4605      	mov	r5, r0
 8018832:	4614      	mov	r4, r2
 8018834:	461f      	mov	r7, r3
 8018836:	f7f7 fef5 	bl	8010624 <ucdr_buffer_alignment>
 801883a:	4601      	mov	r1, r0
 801883c:	4628      	mov	r0, r5
 801883e:	7d6e      	ldrb	r6, [r5, #21]
 8018840:	f7f7 ff34 	bl	80106ac <ucdr_advance_buffer>
 8018844:	f1b8 0f01 	cmp.w	r8, #1
 8018848:	756e      	strb	r6, [r5, #21]
 801884a:	d010      	beq.n	801886e <ucdr_deserialize_endian_array_double+0x46>
 801884c:	2600      	movs	r6, #0
 801884e:	b14f      	cbz	r7, 8018864 <ucdr_deserialize_endian_array_double+0x3c>
 8018850:	4622      	mov	r2, r4
 8018852:	4641      	mov	r1, r8
 8018854:	4628      	mov	r0, r5
 8018856:	3601      	adds	r6, #1
 8018858:	f7f7 fdb6 	bl	80103c8 <ucdr_deserialize_endian_double>
 801885c:	42b7      	cmp	r7, r6
 801885e:	f104 0408 	add.w	r4, r4, #8
 8018862:	d1f5      	bne.n	8018850 <ucdr_deserialize_endian_array_double+0x28>
 8018864:	7da8      	ldrb	r0, [r5, #22]
 8018866:	f080 0001 	eor.w	r0, r0, #1
 801886a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801886e:	00ff      	lsls	r7, r7, #3
 8018870:	4639      	mov	r1, r7
 8018872:	4628      	mov	r0, r5
 8018874:	f7f7 fe76 	bl	8010564 <ucdr_check_buffer_available_for>
 8018878:	b9f8      	cbnz	r0, 80188ba <ucdr_deserialize_endian_array_double+0x92>
 801887a:	46b8      	mov	r8, r7
 801887c:	e00a      	b.n	8018894 <ucdr_deserialize_endian_array_double+0x6c>
 801887e:	68a9      	ldr	r1, [r5, #8]
 8018880:	f002 ff53 	bl	801b72a <memcpy>
 8018884:	68aa      	ldr	r2, [r5, #8]
 8018886:	692b      	ldr	r3, [r5, #16]
 8018888:	4432      	add	r2, r6
 801888a:	4433      	add	r3, r6
 801888c:	eba8 0806 	sub.w	r8, r8, r6
 8018890:	60aa      	str	r2, [r5, #8]
 8018892:	612b      	str	r3, [r5, #16]
 8018894:	2208      	movs	r2, #8
 8018896:	4641      	mov	r1, r8
 8018898:	4628      	mov	r0, r5
 801889a:	f7f7 feeb 	bl	8010674 <ucdr_check_final_buffer_behavior_array>
 801889e:	4606      	mov	r6, r0
 80188a0:	eba7 0008 	sub.w	r0, r7, r8
 80188a4:	4420      	add	r0, r4
 80188a6:	4632      	mov	r2, r6
 80188a8:	2e00      	cmp	r6, #0
 80188aa:	d1e8      	bne.n	801887e <ucdr_deserialize_endian_array_double+0x56>
 80188ac:	7da8      	ldrb	r0, [r5, #22]
 80188ae:	2308      	movs	r3, #8
 80188b0:	756b      	strb	r3, [r5, #21]
 80188b2:	f080 0001 	eor.w	r0, r0, #1
 80188b6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80188ba:	463a      	mov	r2, r7
 80188bc:	68a9      	ldr	r1, [r5, #8]
 80188be:	4620      	mov	r0, r4
 80188c0:	f002 ff33 	bl	801b72a <memcpy>
 80188c4:	68aa      	ldr	r2, [r5, #8]
 80188c6:	692b      	ldr	r3, [r5, #16]
 80188c8:	443a      	add	r2, r7
 80188ca:	441f      	add	r7, r3
 80188cc:	60aa      	str	r2, [r5, #8]
 80188ce:	612f      	str	r7, [r5, #16]
 80188d0:	e7ec      	b.n	80188ac <ucdr_deserialize_endian_array_double+0x84>
 80188d2:	bf00      	nop

080188d4 <ucdr_serialize_string>:
 80188d4:	b510      	push	{r4, lr}
 80188d6:	b082      	sub	sp, #8
 80188d8:	4604      	mov	r4, r0
 80188da:	4608      	mov	r0, r1
 80188dc:	9101      	str	r1, [sp, #4]
 80188de:	f7e7 fc81 	bl	80001e4 <strlen>
 80188e2:	9901      	ldr	r1, [sp, #4]
 80188e4:	1c42      	adds	r2, r0, #1
 80188e6:	4620      	mov	r0, r4
 80188e8:	b002      	add	sp, #8
 80188ea:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80188ee:	f7f7 befd 	b.w	80106ec <ucdr_serialize_sequence_char>
 80188f2:	bf00      	nop

080188f4 <ucdr_deserialize_string>:
 80188f4:	b500      	push	{lr}
 80188f6:	b083      	sub	sp, #12
 80188f8:	ab01      	add	r3, sp, #4
 80188fa:	f7f7 ff09 	bl	8010710 <ucdr_deserialize_sequence_char>
 80188fe:	b003      	add	sp, #12
 8018900:	f85d fb04 	ldr.w	pc, [sp], #4

08018904 <get_custom_error>:
 8018904:	4b01      	ldr	r3, [pc, #4]	@ (801890c <get_custom_error+0x8>)
 8018906:	7818      	ldrb	r0, [r3, #0]
 8018908:	4770      	bx	lr
 801890a:	bf00      	nop
 801890c:	2000c248 	.word	0x2000c248

08018910 <recv_custom_msg>:
 8018910:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018914:	4693      	mov	fp, r2
 8018916:	b089      	sub	sp, #36	@ 0x24
 8018918:	f890 2200 	ldrb.w	r2, [r0, #512]	@ 0x200
 801891c:	9305      	str	r3, [sp, #20]
 801891e:	468a      	mov	sl, r1
 8018920:	2100      	movs	r1, #0
 8018922:	4604      	mov	r4, r0
 8018924:	f88d 101e 	strb.w	r1, [sp, #30]
 8018928:	b322      	cbz	r2, 8018974 <recv_custom_msg+0x64>
 801892a:	f200 2902 	addw	r9, r0, #514	@ 0x202
 801892e:	f10d 081f 	add.w	r8, sp, #31
 8018932:	af05      	add	r7, sp, #20
 8018934:	f10d 061e 	add.w	r6, sp, #30
 8018938:	f44f 7500 	mov.w	r5, #512	@ 0x200
 801893c:	e002      	b.n	8018944 <recv_custom_msg+0x34>
 801893e:	9b05      	ldr	r3, [sp, #20]
 8018940:	2b00      	cmp	r3, #0
 8018942:	dd0f      	ble.n	8018964 <recv_custom_msg+0x54>
 8018944:	f8d4 1274 	ldr.w	r1, [r4, #628]	@ 0x274
 8018948:	4623      	mov	r3, r4
 801894a:	e9cd 7802 	strd	r7, r8, [sp, #8]
 801894e:	e9cd 5600 	strd	r5, r6, [sp]
 8018952:	4622      	mov	r2, r4
 8018954:	4648      	mov	r0, r9
 8018956:	f001 f92d 	bl	8019bb4 <uxr_read_framed_msg>
 801895a:	2800      	cmp	r0, #0
 801895c:	d0ef      	beq.n	801893e <recv_custom_msg+0x2e>
 801895e:	f89d 301e 	ldrb.w	r3, [sp, #30]
 8018962:	b1b3      	cbz	r3, 8018992 <recv_custom_msg+0x82>
 8018964:	4b0f      	ldr	r3, [pc, #60]	@ (80189a4 <recv_custom_msg+0x94>)
 8018966:	f89d 201f 	ldrb.w	r2, [sp, #31]
 801896a:	701a      	strb	r2, [r3, #0]
 801896c:	2000      	movs	r0, #0
 801896e:	b009      	add	sp, #36	@ 0x24
 8018970:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018974:	f10d 021f 	add.w	r2, sp, #31
 8018978:	9200      	str	r2, [sp, #0]
 801897a:	f8d0 5274 	ldr.w	r5, [r0, #628]	@ 0x274
 801897e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8018982:	4601      	mov	r1, r0
 8018984:	47a8      	blx	r5
 8018986:	2800      	cmp	r0, #0
 8018988:	d0ec      	beq.n	8018964 <recv_custom_msg+0x54>
 801898a:	f89d 301e 	ldrb.w	r3, [sp, #30]
 801898e:	2b00      	cmp	r3, #0
 8018990:	d1e8      	bne.n	8018964 <recv_custom_msg+0x54>
 8018992:	f8cb 0000 	str.w	r0, [fp]
 8018996:	2001      	movs	r0, #1
 8018998:	f8ca 4000 	str.w	r4, [sl]
 801899c:	b009      	add	sp, #36	@ 0x24
 801899e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80189a2:	bf00      	nop
 80189a4:	2000c248 	.word	0x2000c248

080189a8 <send_custom_msg>:
 80189a8:	b530      	push	{r4, r5, lr}
 80189aa:	f890 4200 	ldrb.w	r4, [r0, #512]	@ 0x200
 80189ae:	b087      	sub	sp, #28
 80189b0:	4615      	mov	r5, r2
 80189b2:	b974      	cbnz	r4, 80189d2 <send_custom_msg+0x2a>
 80189b4:	f8d0 4270 	ldr.w	r4, [r0, #624]	@ 0x270
 80189b8:	f10d 0317 	add.w	r3, sp, #23
 80189bc:	47a0      	blx	r4
 80189be:	b108      	cbz	r0, 80189c4 <send_custom_msg+0x1c>
 80189c0:	42a8      	cmp	r0, r5
 80189c2:	d015      	beq.n	80189f0 <send_custom_msg+0x48>
 80189c4:	4b0c      	ldr	r3, [pc, #48]	@ (80189f8 <send_custom_msg+0x50>)
 80189c6:	f89d 2017 	ldrb.w	r2, [sp, #23]
 80189ca:	701a      	strb	r2, [r3, #0]
 80189cc:	2000      	movs	r0, #0
 80189ce:	b007      	add	sp, #28
 80189d0:	bd30      	pop	{r4, r5, pc}
 80189d2:	460b      	mov	r3, r1
 80189d4:	2200      	movs	r2, #0
 80189d6:	f10d 0117 	add.w	r1, sp, #23
 80189da:	e9cd 2101 	strd	r2, r1, [sp, #4]
 80189de:	4602      	mov	r2, r0
 80189e0:	f8d0 1270 	ldr.w	r1, [r0, #624]	@ 0x270
 80189e4:	9500      	str	r5, [sp, #0]
 80189e6:	f200 2002 	addw	r0, r0, #514	@ 0x202
 80189ea:	f000 feeb 	bl	80197c4 <uxr_write_framed_msg>
 80189ee:	e7e6      	b.n	80189be <send_custom_msg+0x16>
 80189f0:	2001      	movs	r0, #1
 80189f2:	b007      	add	sp, #28
 80189f4:	bd30      	pop	{r4, r5, pc}
 80189f6:	bf00      	nop
 80189f8:	2000c248 	.word	0x2000c248

080189fc <uxr_set_custom_transport_callbacks>:
 80189fc:	b410      	push	{r4}
 80189fe:	9c01      	ldr	r4, [sp, #4]
 8018a00:	f8c0 4270 	str.w	r4, [r0, #624]	@ 0x270
 8018a04:	e9c0 239a 	strd	r2, r3, [r0, #616]	@ 0x268
 8018a08:	9b02      	ldr	r3, [sp, #8]
 8018a0a:	f880 1200 	strb.w	r1, [r0, #512]	@ 0x200
 8018a0e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8018a12:	f8c0 3274 	str.w	r3, [r0, #628]	@ 0x274
 8018a16:	4770      	bx	lr

08018a18 <uxr_init_custom_transport>:
 8018a18:	b538      	push	{r3, r4, r5, lr}
 8018a1a:	f8d0 3268 	ldr.w	r3, [r0, #616]	@ 0x268
 8018a1e:	b303      	cbz	r3, 8018a62 <uxr_init_custom_transport+0x4a>
 8018a20:	f8d0 226c 	ldr.w	r2, [r0, #620]	@ 0x26c
 8018a24:	4604      	mov	r4, r0
 8018a26:	b1e2      	cbz	r2, 8018a62 <uxr_init_custom_transport+0x4a>
 8018a28:	f8d0 2270 	ldr.w	r2, [r0, #624]	@ 0x270
 8018a2c:	b1ca      	cbz	r2, 8018a62 <uxr_init_custom_transport+0x4a>
 8018a2e:	f8d0 2274 	ldr.w	r2, [r0, #628]	@ 0x274
 8018a32:	b1b2      	cbz	r2, 8018a62 <uxr_init_custom_transport+0x4a>
 8018a34:	f8c0 128c 	str.w	r1, [r0, #652]	@ 0x28c
 8018a38:	4798      	blx	r3
 8018a3a:	4605      	mov	r5, r0
 8018a3c:	b188      	cbz	r0, 8018a62 <uxr_init_custom_transport+0x4a>
 8018a3e:	f894 3200 	ldrb.w	r3, [r4, #512]	@ 0x200
 8018a42:	b98b      	cbnz	r3, 8018a68 <uxr_init_custom_transport+0x50>
 8018a44:	490b      	ldr	r1, [pc, #44]	@ (8018a74 <uxr_init_custom_transport+0x5c>)
 8018a46:	4b0c      	ldr	r3, [pc, #48]	@ (8018a78 <uxr_init_custom_transport+0x60>)
 8018a48:	4a0c      	ldr	r2, [pc, #48]	@ (8018a7c <uxr_init_custom_transport+0x64>)
 8018a4a:	f8c4 3280 	str.w	r3, [r4, #640]	@ 0x280
 8018a4e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8018a52:	e9c4 419e 	strd	r4, r1, [r4, #632]	@ 0x278
 8018a56:	f8c4 2284 	str.w	r2, [r4, #644]	@ 0x284
 8018a5a:	f8a4 3288 	strh.w	r3, [r4, #648]	@ 0x288
 8018a5e:	4628      	mov	r0, r5
 8018a60:	bd38      	pop	{r3, r4, r5, pc}
 8018a62:	2500      	movs	r5, #0
 8018a64:	4628      	mov	r0, r5
 8018a66:	bd38      	pop	{r3, r4, r5, pc}
 8018a68:	2100      	movs	r1, #0
 8018a6a:	f204 2002 	addw	r0, r4, #514	@ 0x202
 8018a6e:	f000 fea3 	bl	80197b8 <uxr_init_framing_io>
 8018a72:	e7e7      	b.n	8018a44 <uxr_init_custom_transport+0x2c>
 8018a74:	080189a9 	.word	0x080189a9
 8018a78:	08018911 	.word	0x08018911
 8018a7c:	08018905 	.word	0x08018905

08018a80 <uxr_close_custom_transport>:
 8018a80:	f8d0 326c 	ldr.w	r3, [r0, #620]	@ 0x26c
 8018a84:	4718      	bx	r3
 8018a86:	bf00      	nop

08018a88 <uxr_init_input_best_effort_stream>:
 8018a88:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8018a8c:	8003      	strh	r3, [r0, #0]
 8018a8e:	4770      	bx	lr

08018a90 <uxr_reset_input_best_effort_stream>:
 8018a90:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8018a94:	8003      	strh	r3, [r0, #0]
 8018a96:	4770      	bx	lr

08018a98 <uxr_receive_best_effort_message>:
 8018a98:	b538      	push	{r3, r4, r5, lr}
 8018a9a:	4604      	mov	r4, r0
 8018a9c:	8800      	ldrh	r0, [r0, #0]
 8018a9e:	460d      	mov	r5, r1
 8018aa0:	f000 fe72 	bl	8019788 <uxr_seq_num_cmp>
 8018aa4:	4603      	mov	r3, r0
 8018aa6:	2b00      	cmp	r3, #0
 8018aa8:	ea4f 70d0 	mov.w	r0, r0, lsr #31
 8018aac:	bfb8      	it	lt
 8018aae:	8025      	strhlt	r5, [r4, #0]
 8018ab0:	bd38      	pop	{r3, r4, r5, pc}
 8018ab2:	bf00      	nop

08018ab4 <on_full_input_buffer>:
 8018ab4:	b570      	push	{r4, r5, r6, lr}
 8018ab6:	4605      	mov	r5, r0
 8018ab8:	460c      	mov	r4, r1
 8018aba:	682b      	ldr	r3, [r5, #0]
 8018abc:	6809      	ldr	r1, [r1, #0]
 8018abe:	8920      	ldrh	r0, [r4, #8]
 8018ac0:	6862      	ldr	r2, [r4, #4]
 8018ac2:	fbb2 f2f0 	udiv	r2, r2, r0
 8018ac6:	eba3 0c01 	sub.w	ip, r3, r1
 8018aca:	fbbc fcf2 	udiv	ip, ip, r2
 8018ace:	f10c 0c01 	add.w	ip, ip, #1
 8018ad2:	fa1f f38c 	uxth.w	r3, ip
 8018ad6:	fbb3 f6f0 	udiv	r6, r3, r0
 8018ada:	fb00 3316 	mls	r3, r0, r6, r3
 8018ade:	b29b      	uxth	r3, r3
 8018ae0:	fb02 f303 	mul.w	r3, r2, r3
 8018ae4:	1d18      	adds	r0, r3, #4
 8018ae6:	4408      	add	r0, r1
 8018ae8:	7d26      	ldrb	r6, [r4, #20]
 8018aea:	f850 2c04 	ldr.w	r2, [r0, #-4]
 8018aee:	b116      	cbz	r6, 8018af6 <on_full_input_buffer+0x42>
 8018af0:	2600      	movs	r6, #0
 8018af2:	f840 6c04 	str.w	r6, [r0, #-4]
 8018af6:	2a03      	cmp	r2, #3
 8018af8:	d801      	bhi.n	8018afe <on_full_input_buffer+0x4a>
 8018afa:	2001      	movs	r0, #1
 8018afc:	bd70      	pop	{r4, r5, r6, pc}
 8018afe:	3308      	adds	r3, #8
 8018b00:	4419      	add	r1, r3
 8018b02:	4628      	mov	r0, r5
 8018b04:	692b      	ldr	r3, [r5, #16]
 8018b06:	3a04      	subs	r2, #4
 8018b08:	f7f7 fd78 	bl	80105fc <ucdr_init_buffer_origin>
 8018b0c:	4628      	mov	r0, r5
 8018b0e:	4903      	ldr	r1, [pc, #12]	@ (8018b1c <on_full_input_buffer+0x68>)
 8018b10:	4622      	mov	r2, r4
 8018b12:	f7f7 fd4f 	bl	80105b4 <ucdr_set_on_full_buffer_callback>
 8018b16:	2000      	movs	r0, #0
 8018b18:	bd70      	pop	{r4, r5, r6, pc}
 8018b1a:	bf00      	nop
 8018b1c:	08018ab5 	.word	0x08018ab5

08018b20 <uxr_init_input_reliable_stream>:
 8018b20:	b500      	push	{lr}
 8018b22:	e9c0 1200 	strd	r1, r2, [r0]
 8018b26:	f04f 0e00 	mov.w	lr, #0
 8018b2a:	9a01      	ldr	r2, [sp, #4]
 8018b2c:	8103      	strh	r3, [r0, #8]
 8018b2e:	6102      	str	r2, [r0, #16]
 8018b30:	f880 e014 	strb.w	lr, [r0, #20]
 8018b34:	b1d3      	cbz	r3, 8018b6c <uxr_init_input_reliable_stream+0x4c>
 8018b36:	f8c1 e000 	str.w	lr, [r1]
 8018b3a:	f8b0 c008 	ldrh.w	ip, [r0, #8]
 8018b3e:	f1bc 0f01 	cmp.w	ip, #1
 8018b42:	d913      	bls.n	8018b6c <uxr_init_input_reliable_stream+0x4c>
 8018b44:	2301      	movs	r3, #1
 8018b46:	fbb3 f1fc 	udiv	r1, r3, ip
 8018b4a:	fb0c 3111 	mls	r1, ip, r1, r3
 8018b4e:	b289      	uxth	r1, r1
 8018b50:	6842      	ldr	r2, [r0, #4]
 8018b52:	fbb2 f2fc 	udiv	r2, r2, ip
 8018b56:	fb01 f202 	mul.w	r2, r1, r2
 8018b5a:	6801      	ldr	r1, [r0, #0]
 8018b5c:	f841 e002 	str.w	lr, [r1, r2]
 8018b60:	3301      	adds	r3, #1
 8018b62:	f8b0 c008 	ldrh.w	ip, [r0, #8]
 8018b66:	b29b      	uxth	r3, r3
 8018b68:	459c      	cmp	ip, r3
 8018b6a:	d8ec      	bhi.n	8018b46 <uxr_init_input_reliable_stream+0x26>
 8018b6c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8018b70:	60c3      	str	r3, [r0, #12]
 8018b72:	f85d fb04 	ldr.w	pc, [sp], #4
 8018b76:	bf00      	nop

08018b78 <uxr_reset_input_reliable_stream>:
 8018b78:	8901      	ldrh	r1, [r0, #8]
 8018b7a:	b1e9      	cbz	r1, 8018bb8 <uxr_reset_input_reliable_stream+0x40>
 8018b7c:	f04f 0c00 	mov.w	ip, #0
 8018b80:	b500      	push	{lr}
 8018b82:	4663      	mov	r3, ip
 8018b84:	46e6      	mov	lr, ip
 8018b86:	fbb3 f2f1 	udiv	r2, r3, r1
 8018b8a:	fb01 3312 	mls	r3, r1, r2, r3
 8018b8e:	b29b      	uxth	r3, r3
 8018b90:	6842      	ldr	r2, [r0, #4]
 8018b92:	fbb2 f2f1 	udiv	r2, r2, r1
 8018b96:	fb02 f303 	mul.w	r3, r2, r3
 8018b9a:	6802      	ldr	r2, [r0, #0]
 8018b9c:	f842 e003 	str.w	lr, [r2, r3]
 8018ba0:	f10c 0c01 	add.w	ip, ip, #1
 8018ba4:	8901      	ldrh	r1, [r0, #8]
 8018ba6:	fa1f f38c 	uxth.w	r3, ip
 8018baa:	4299      	cmp	r1, r3
 8018bac:	d8eb      	bhi.n	8018b86 <uxr_reset_input_reliable_stream+0xe>
 8018bae:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8018bb2:	60c3      	str	r3, [r0, #12]
 8018bb4:	f85d fb04 	ldr.w	pc, [sp], #4
 8018bb8:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8018bbc:	60c3      	str	r3, [r0, #12]
 8018bbe:	4770      	bx	lr

08018bc0 <uxr_receive_reliable_message>:
 8018bc0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8018bc4:	4604      	mov	r4, r0
 8018bc6:	460d      	mov	r5, r1
 8018bc8:	8901      	ldrh	r1, [r0, #8]
 8018bca:	8980      	ldrh	r0, [r0, #12]
 8018bcc:	4690      	mov	r8, r2
 8018bce:	461f      	mov	r7, r3
 8018bd0:	f000 fdd2 	bl	8019778 <uxr_seq_num_add>
 8018bd4:	4629      	mov	r1, r5
 8018bd6:	4606      	mov	r6, r0
 8018bd8:	89a0      	ldrh	r0, [r4, #12]
 8018bda:	f000 fdd5 	bl	8019788 <uxr_seq_num_cmp>
 8018bde:	2800      	cmp	r0, #0
 8018be0:	db0a      	blt.n	8018bf8 <uxr_receive_reliable_message+0x38>
 8018be2:	2600      	movs	r6, #0
 8018be4:	89e0      	ldrh	r0, [r4, #14]
 8018be6:	4629      	mov	r1, r5
 8018be8:	f000 fdce 	bl	8019788 <uxr_seq_num_cmp>
 8018bec:	2800      	cmp	r0, #0
 8018bee:	da00      	bge.n	8018bf2 <uxr_receive_reliable_message+0x32>
 8018bf0:	81e5      	strh	r5, [r4, #14]
 8018bf2:	4630      	mov	r0, r6
 8018bf4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8018bf8:	4630      	mov	r0, r6
 8018bfa:	4629      	mov	r1, r5
 8018bfc:	f000 fdc4 	bl	8019788 <uxr_seq_num_cmp>
 8018c00:	2800      	cmp	r0, #0
 8018c02:	dbee      	blt.n	8018be2 <uxr_receive_reliable_message+0x22>
 8018c04:	6923      	ldr	r3, [r4, #16]
 8018c06:	4640      	mov	r0, r8
 8018c08:	4798      	blx	r3
 8018c0a:	2101      	movs	r1, #1
 8018c0c:	4681      	mov	r9, r0
 8018c0e:	89a0      	ldrh	r0, [r4, #12]
 8018c10:	f000 fdb2 	bl	8019778 <uxr_seq_num_add>
 8018c14:	f1b9 0f00 	cmp.w	r9, #0
 8018c18:	d101      	bne.n	8018c1e <uxr_receive_reliable_message+0x5e>
 8018c1a:	4285      	cmp	r5, r0
 8018c1c:	d047      	beq.n	8018cae <uxr_receive_reliable_message+0xee>
 8018c1e:	8922      	ldrh	r2, [r4, #8]
 8018c20:	fbb5 f0f2 	udiv	r0, r5, r2
 8018c24:	fb02 5010 	mls	r0, r2, r0, r5
 8018c28:	b280      	uxth	r0, r0
 8018c2a:	6863      	ldr	r3, [r4, #4]
 8018c2c:	fbb3 f3f2 	udiv	r3, r3, r2
 8018c30:	fb00 f303 	mul.w	r3, r0, r3
 8018c34:	6820      	ldr	r0, [r4, #0]
 8018c36:	3304      	adds	r3, #4
 8018c38:	4418      	add	r0, r3
 8018c3a:	f850 3c04 	ldr.w	r3, [r0, #-4]
 8018c3e:	2b00      	cmp	r3, #0
 8018c40:	d1cf      	bne.n	8018be2 <uxr_receive_reliable_message+0x22>
 8018c42:	4641      	mov	r1, r8
 8018c44:	463a      	mov	r2, r7
 8018c46:	f002 fd70 	bl	801b72a <memcpy>
 8018c4a:	8921      	ldrh	r1, [r4, #8]
 8018c4c:	fbb5 f2f1 	udiv	r2, r5, r1
 8018c50:	fb01 5212 	mls	r2, r1, r2, r5
 8018c54:	b292      	uxth	r2, r2
 8018c56:	6863      	ldr	r3, [r4, #4]
 8018c58:	fbb3 f3f1 	udiv	r3, r3, r1
 8018c5c:	fb02 f303 	mul.w	r3, r2, r3
 8018c60:	6822      	ldr	r2, [r4, #0]
 8018c62:	50d7      	str	r7, [r2, r3]
 8018c64:	9a08      	ldr	r2, [sp, #32]
 8018c66:	2301      	movs	r3, #1
 8018c68:	7013      	strb	r3, [r2, #0]
 8018c6a:	f1b9 0f00 	cmp.w	r9, #0
 8018c6e:	d0b8      	beq.n	8018be2 <uxr_receive_reliable_message+0x22>
 8018c70:	89a6      	ldrh	r6, [r4, #12]
 8018c72:	4630      	mov	r0, r6
 8018c74:	2101      	movs	r1, #1
 8018c76:	f000 fd7f 	bl	8019778 <uxr_seq_num_add>
 8018c7a:	8922      	ldrh	r2, [r4, #8]
 8018c7c:	6863      	ldr	r3, [r4, #4]
 8018c7e:	fbb3 f3f2 	udiv	r3, r3, r2
 8018c82:	4606      	mov	r6, r0
 8018c84:	fbb0 f0f2 	udiv	r0, r0, r2
 8018c88:	fb02 6010 	mls	r0, r2, r0, r6
 8018c8c:	b280      	uxth	r0, r0
 8018c8e:	fb00 f303 	mul.w	r3, r0, r3
 8018c92:	6820      	ldr	r0, [r4, #0]
 8018c94:	3304      	adds	r3, #4
 8018c96:	4418      	add	r0, r3
 8018c98:	f850 3c04 	ldr.w	r3, [r0, #-4]
 8018c9c:	2b00      	cmp	r3, #0
 8018c9e:	d0a0      	beq.n	8018be2 <uxr_receive_reliable_message+0x22>
 8018ca0:	6923      	ldr	r3, [r4, #16]
 8018ca2:	4798      	blx	r3
 8018ca4:	2802      	cmp	r0, #2
 8018ca6:	d008      	beq.n	8018cba <uxr_receive_reliable_message+0xfa>
 8018ca8:	2801      	cmp	r0, #1
 8018caa:	d0e2      	beq.n	8018c72 <uxr_receive_reliable_message+0xb2>
 8018cac:	e799      	b.n	8018be2 <uxr_receive_reliable_message+0x22>
 8018cae:	9b08      	ldr	r3, [sp, #32]
 8018cb0:	81a5      	strh	r5, [r4, #12]
 8018cb2:	2601      	movs	r6, #1
 8018cb4:	f883 9000 	strb.w	r9, [r3]
 8018cb8:	e794      	b.n	8018be4 <uxr_receive_reliable_message+0x24>
 8018cba:	2601      	movs	r6, #1
 8018cbc:	e792      	b.n	8018be4 <uxr_receive_reliable_message+0x24>
 8018cbe:	bf00      	nop

08018cc0 <uxr_next_input_reliable_buffer_available>:
 8018cc0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8018cc4:	4604      	mov	r4, r0
 8018cc6:	460f      	mov	r7, r1
 8018cc8:	8980      	ldrh	r0, [r0, #12]
 8018cca:	2101      	movs	r1, #1
 8018ccc:	4690      	mov	r8, r2
 8018cce:	f000 fd53 	bl	8019778 <uxr_seq_num_add>
 8018cd2:	8922      	ldrh	r2, [r4, #8]
 8018cd4:	fbb0 f6f2 	udiv	r6, r0, r2
 8018cd8:	fb02 0616 	mls	r6, r2, r6, r0
 8018cdc:	b2b6      	uxth	r6, r6
 8018cde:	6863      	ldr	r3, [r4, #4]
 8018ce0:	fbb3 f3f2 	udiv	r3, r3, r2
 8018ce4:	fb06 f303 	mul.w	r3, r6, r3
 8018ce8:	6826      	ldr	r6, [r4, #0]
 8018cea:	3304      	adds	r3, #4
 8018cec:	441e      	add	r6, r3
 8018cee:	f856 9c04 	ldr.w	r9, [r6, #-4]
 8018cf2:	f1b9 0f00 	cmp.w	r9, #0
 8018cf6:	d023      	beq.n	8018d40 <uxr_next_input_reliable_buffer_available+0x80>
 8018cf8:	6923      	ldr	r3, [r4, #16]
 8018cfa:	4605      	mov	r5, r0
 8018cfc:	4630      	mov	r0, r6
 8018cfe:	4798      	blx	r3
 8018d00:	4682      	mov	sl, r0
 8018d02:	b300      	cbz	r0, 8018d46 <uxr_next_input_reliable_buffer_available+0x86>
 8018d04:	f8b4 a00c 	ldrh.w	sl, [r4, #12]
 8018d08:	2101      	movs	r1, #1
 8018d0a:	4650      	mov	r0, sl
 8018d0c:	f000 fd34 	bl	8019778 <uxr_seq_num_add>
 8018d10:	8921      	ldrh	r1, [r4, #8]
 8018d12:	fbb0 f2f1 	udiv	r2, r0, r1
 8018d16:	4682      	mov	sl, r0
 8018d18:	fb01 0212 	mls	r2, r1, r2, r0
 8018d1c:	e9d4 0300 	ldrd	r0, r3, [r4]
 8018d20:	b292      	uxth	r2, r2
 8018d22:	fbb3 f3f1 	udiv	r3, r3, r1
 8018d26:	fb02 f303 	mul.w	r3, r2, r3
 8018d2a:	3304      	adds	r3, #4
 8018d2c:	4418      	add	r0, r3
 8018d2e:	f850 3c04 	ldr.w	r3, [r0, #-4]
 8018d32:	b12b      	cbz	r3, 8018d40 <uxr_next_input_reliable_buffer_available+0x80>
 8018d34:	6923      	ldr	r3, [r4, #16]
 8018d36:	4798      	blx	r3
 8018d38:	2802      	cmp	r0, #2
 8018d3a:	d01b      	beq.n	8018d74 <uxr_next_input_reliable_buffer_available+0xb4>
 8018d3c:	2801      	cmp	r0, #1
 8018d3e:	d0e3      	beq.n	8018d08 <uxr_next_input_reliable_buffer_available+0x48>
 8018d40:	2000      	movs	r0, #0
 8018d42:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8018d46:	464a      	mov	r2, r9
 8018d48:	4631      	mov	r1, r6
 8018d4a:	4638      	mov	r0, r7
 8018d4c:	f7f7 fc5e 	bl	801060c <ucdr_init_buffer>
 8018d50:	8921      	ldrh	r1, [r4, #8]
 8018d52:	fbb5 f2f1 	udiv	r2, r5, r1
 8018d56:	fb01 5212 	mls	r2, r1, r2, r5
 8018d5a:	b292      	uxth	r2, r2
 8018d5c:	6863      	ldr	r3, [r4, #4]
 8018d5e:	fbb3 f3f1 	udiv	r3, r3, r1
 8018d62:	fb02 f303 	mul.w	r3, r2, r3
 8018d66:	6822      	ldr	r2, [r4, #0]
 8018d68:	f842 a003 	str.w	sl, [r2, r3]
 8018d6c:	2001      	movs	r0, #1
 8018d6e:	81a5      	strh	r5, [r4, #12]
 8018d70:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8018d74:	8920      	ldrh	r0, [r4, #8]
 8018d76:	fbb5 f3f0 	udiv	r3, r5, r0
 8018d7a:	fb00 5513 	mls	r5, r0, r3, r5
 8018d7e:	b2ad      	uxth	r5, r5
 8018d80:	6863      	ldr	r3, [r4, #4]
 8018d82:	fbb3 f3f0 	udiv	r3, r3, r0
 8018d86:	fb03 f505 	mul.w	r5, r3, r5
 8018d8a:	6823      	ldr	r3, [r4, #0]
 8018d8c:	2000      	movs	r0, #0
 8018d8e:	5158      	str	r0, [r3, r5]
 8018d90:	eb06 0108 	add.w	r1, r6, r8
 8018d94:	eba9 0208 	sub.w	r2, r9, r8
 8018d98:	4638      	mov	r0, r7
 8018d9a:	f7f7 fc37 	bl	801060c <ucdr_init_buffer>
 8018d9e:	4638      	mov	r0, r7
 8018da0:	4903      	ldr	r1, [pc, #12]	@ (8018db0 <uxr_next_input_reliable_buffer_available+0xf0>)
 8018da2:	4622      	mov	r2, r4
 8018da4:	f7f7 fc06 	bl	80105b4 <ucdr_set_on_full_buffer_callback>
 8018da8:	f8a4 a00c 	strh.w	sl, [r4, #12]
 8018dac:	2001      	movs	r0, #1
 8018dae:	e7c8      	b.n	8018d42 <uxr_next_input_reliable_buffer_available+0x82>
 8018db0:	08018ab5 	.word	0x08018ab5

08018db4 <uxr_process_heartbeat>:
 8018db4:	b538      	push	{r3, r4, r5, lr}
 8018db6:	4611      	mov	r1, r2
 8018db8:	4604      	mov	r4, r0
 8018dba:	89c0      	ldrh	r0, [r0, #14]
 8018dbc:	4615      	mov	r5, r2
 8018dbe:	f000 fce3 	bl	8019788 <uxr_seq_num_cmp>
 8018dc2:	2800      	cmp	r0, #0
 8018dc4:	bfb8      	it	lt
 8018dc6:	81e5      	strhlt	r5, [r4, #14]
 8018dc8:	bd38      	pop	{r3, r4, r5, pc}
 8018dca:	bf00      	nop

08018dcc <uxr_compute_acknack>:
 8018dcc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8018dd0:	8903      	ldrh	r3, [r0, #8]
 8018dd2:	8985      	ldrh	r5, [r0, #12]
 8018dd4:	4604      	mov	r4, r0
 8018dd6:	460e      	mov	r6, r1
 8018dd8:	b1d3      	cbz	r3, 8018e10 <uxr_compute_acknack+0x44>
 8018dda:	4628      	mov	r0, r5
 8018ddc:	2701      	movs	r7, #1
 8018dde:	e003      	b.n	8018de8 <uxr_compute_acknack+0x1c>
 8018de0:	4567      	cmp	r7, ip
 8018de2:	d215      	bcs.n	8018e10 <uxr_compute_acknack+0x44>
 8018de4:	89a0      	ldrh	r0, [r4, #12]
 8018de6:	3701      	adds	r7, #1
 8018de8:	b2b9      	uxth	r1, r7
 8018dea:	f000 fcc5 	bl	8019778 <uxr_seq_num_add>
 8018dee:	f8b4 c008 	ldrh.w	ip, [r4, #8]
 8018df2:	fbb0 f3fc 	udiv	r3, r0, ip
 8018df6:	fb0c 0313 	mls	r3, ip, r3, r0
 8018dfa:	b29a      	uxth	r2, r3
 8018dfc:	e9d4 1300 	ldrd	r1, r3, [r4]
 8018e00:	fbb3 f3fc 	udiv	r3, r3, ip
 8018e04:	fb02 f303 	mul.w	r3, r2, r3
 8018e08:	58cb      	ldr	r3, [r1, r3]
 8018e0a:	2b00      	cmp	r3, #0
 8018e0c:	d1e8      	bne.n	8018de0 <uxr_compute_acknack+0x14>
 8018e0e:	4605      	mov	r5, r0
 8018e10:	8035      	strh	r5, [r6, #0]
 8018e12:	2101      	movs	r1, #1
 8018e14:	4628      	mov	r0, r5
 8018e16:	89e7      	ldrh	r7, [r4, #14]
 8018e18:	f000 fcb2 	bl	8019780 <uxr_seq_num_sub>
 8018e1c:	4601      	mov	r1, r0
 8018e1e:	4638      	mov	r0, r7
 8018e20:	f000 fcae 	bl	8019780 <uxr_seq_num_sub>
 8018e24:	4605      	mov	r5, r0
 8018e26:	b318      	cbz	r0, 8018e70 <uxr_compute_acknack+0xa4>
 8018e28:	f04f 0900 	mov.w	r9, #0
 8018e2c:	464f      	mov	r7, r9
 8018e2e:	f04f 0801 	mov.w	r8, #1
 8018e32:	fa1f f189 	uxth.w	r1, r9
 8018e36:	8830      	ldrh	r0, [r6, #0]
 8018e38:	f000 fc9e 	bl	8019778 <uxr_seq_num_add>
 8018e3c:	f8b4 c008 	ldrh.w	ip, [r4, #8]
 8018e40:	fbb0 f3fc 	udiv	r3, r0, ip
 8018e44:	e9d4 1200 	ldrd	r1, r2, [r4]
 8018e48:	fb03 001c 	mls	r0, r3, ip, r0
 8018e4c:	b283      	uxth	r3, r0
 8018e4e:	fbb2 f2fc 	udiv	r2, r2, ip
 8018e52:	fb02 f303 	mul.w	r3, r2, r3
 8018e56:	fa08 f209 	lsl.w	r2, r8, r9
 8018e5a:	58cb      	ldr	r3, [r1, r3]
 8018e5c:	f109 0901 	add.w	r9, r9, #1
 8018e60:	b90b      	cbnz	r3, 8018e66 <uxr_compute_acknack+0x9a>
 8018e62:	4317      	orrs	r7, r2
 8018e64:	b2bf      	uxth	r7, r7
 8018e66:	454d      	cmp	r5, r9
 8018e68:	d1e3      	bne.n	8018e32 <uxr_compute_acknack+0x66>
 8018e6a:	4638      	mov	r0, r7
 8018e6c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8018e70:	4607      	mov	r7, r0
 8018e72:	4638      	mov	r0, r7
 8018e74:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

08018e78 <uxr_init_output_best_effort_stream>:
 8018e78:	f64f 7cff 	movw	ip, #65535	@ 0xffff
 8018e7c:	e9c0 3201 	strd	r3, r2, [r0, #4]
 8018e80:	6001      	str	r1, [r0, #0]
 8018e82:	7303      	strb	r3, [r0, #12]
 8018e84:	f8a0 c00e 	strh.w	ip, [r0, #14]
 8018e88:	4770      	bx	lr
 8018e8a:	bf00      	nop

08018e8c <uxr_reset_output_best_effort_stream>:
 8018e8c:	7b02      	ldrb	r2, [r0, #12]
 8018e8e:	6042      	str	r2, [r0, #4]
 8018e90:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8018e94:	81c3      	strh	r3, [r0, #14]
 8018e96:	4770      	bx	lr

08018e98 <uxr_prepare_best_effort_buffer_to_write>:
 8018e98:	b5f0      	push	{r4, r5, r6, r7, lr}
 8018e9a:	4604      	mov	r4, r0
 8018e9c:	b083      	sub	sp, #12
 8018e9e:	6840      	ldr	r0, [r0, #4]
 8018ea0:	460d      	mov	r5, r1
 8018ea2:	4616      	mov	r6, r2
 8018ea4:	f7f9 f8e4 	bl	8012070 <uxr_submessage_padding>
 8018ea8:	6863      	ldr	r3, [r4, #4]
 8018eaa:	4418      	add	r0, r3
 8018eac:	68a3      	ldr	r3, [r4, #8]
 8018eae:	1942      	adds	r2, r0, r5
 8018eb0:	4293      	cmp	r3, r2
 8018eb2:	bf2c      	ite	cs
 8018eb4:	2701      	movcs	r7, #1
 8018eb6:	2700      	movcc	r7, #0
 8018eb8:	d202      	bcs.n	8018ec0 <uxr_prepare_best_effort_buffer_to_write+0x28>
 8018eba:	4638      	mov	r0, r7
 8018ebc:	b003      	add	sp, #12
 8018ebe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8018ec0:	9000      	str	r0, [sp, #0]
 8018ec2:	6821      	ldr	r1, [r4, #0]
 8018ec4:	4630      	mov	r0, r6
 8018ec6:	2300      	movs	r3, #0
 8018ec8:	f7f7 fb8e 	bl	80105e8 <ucdr_init_buffer_origin_offset>
 8018ecc:	6861      	ldr	r1, [r4, #4]
 8018ece:	4638      	mov	r0, r7
 8018ed0:	4429      	add	r1, r5
 8018ed2:	6061      	str	r1, [r4, #4]
 8018ed4:	b003      	add	sp, #12
 8018ed6:	bdf0      	pop	{r4, r5, r6, r7, pc}

08018ed8 <uxr_prepare_best_effort_buffer_to_send>:
 8018ed8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018edc:	4604      	mov	r4, r0
 8018ede:	461d      	mov	r5, r3
 8018ee0:	6840      	ldr	r0, [r0, #4]
 8018ee2:	7b23      	ldrb	r3, [r4, #12]
 8018ee4:	4298      	cmp	r0, r3
 8018ee6:	bf8c      	ite	hi
 8018ee8:	2601      	movhi	r6, #1
 8018eea:	2600      	movls	r6, #0
 8018eec:	d802      	bhi.n	8018ef4 <uxr_prepare_best_effort_buffer_to_send+0x1c>
 8018eee:	4630      	mov	r0, r6
 8018ef0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018ef4:	4688      	mov	r8, r1
 8018ef6:	89e0      	ldrh	r0, [r4, #14]
 8018ef8:	2101      	movs	r1, #1
 8018efa:	4617      	mov	r7, r2
 8018efc:	f000 fc3c 	bl	8019778 <uxr_seq_num_add>
 8018f00:	6823      	ldr	r3, [r4, #0]
 8018f02:	81e0      	strh	r0, [r4, #14]
 8018f04:	8028      	strh	r0, [r5, #0]
 8018f06:	f8c8 3000 	str.w	r3, [r8]
 8018f0a:	6863      	ldr	r3, [r4, #4]
 8018f0c:	603b      	str	r3, [r7, #0]
 8018f0e:	7b23      	ldrb	r3, [r4, #12]
 8018f10:	6063      	str	r3, [r4, #4]
 8018f12:	4630      	mov	r0, r6
 8018f14:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08018f18 <on_full_output_buffer>:
 8018f18:	b538      	push	{r3, r4, r5, lr}
 8018f1a:	6802      	ldr	r2, [r0, #0]
 8018f1c:	460c      	mov	r4, r1
 8018f1e:	6809      	ldr	r1, [r1, #0]
 8018f20:	8923      	ldrh	r3, [r4, #8]
 8018f22:	eba2 0c01 	sub.w	ip, r2, r1
 8018f26:	6862      	ldr	r2, [r4, #4]
 8018f28:	fbb2 f2f3 	udiv	r2, r2, r3
 8018f2c:	fbbc fcf2 	udiv	ip, ip, r2
 8018f30:	f10c 0c01 	add.w	ip, ip, #1
 8018f34:	fa1f fc8c 	uxth.w	ip, ip
 8018f38:	fbbc fef3 	udiv	lr, ip, r3
 8018f3c:	fb03 c31e 	mls	r3, r3, lr, ip
 8018f40:	b29b      	uxth	r3, r3
 8018f42:	fb02 f303 	mul.w	r3, r2, r3
 8018f46:	f894 c00c 	ldrb.w	ip, [r4, #12]
 8018f4a:	58ca      	ldr	r2, [r1, r3]
 8018f4c:	4463      	add	r3, ip
 8018f4e:	eba2 020c 	sub.w	r2, r2, ip
 8018f52:	3308      	adds	r3, #8
 8018f54:	4605      	mov	r5, r0
 8018f56:	4419      	add	r1, r3
 8018f58:	3a04      	subs	r2, #4
 8018f5a:	6903      	ldr	r3, [r0, #16]
 8018f5c:	f7f7 fb4e 	bl	80105fc <ucdr_init_buffer_origin>
 8018f60:	4628      	mov	r0, r5
 8018f62:	4903      	ldr	r1, [pc, #12]	@ (8018f70 <on_full_output_buffer+0x58>)
 8018f64:	4622      	mov	r2, r4
 8018f66:	f7f7 fb25 	bl	80105b4 <ucdr_set_on_full_buffer_callback>
 8018f6a:	2000      	movs	r0, #0
 8018f6c:	bd38      	pop	{r3, r4, r5, pc}
 8018f6e:	bf00      	nop
 8018f70:	08018f19 	.word	0x08018f19

08018f74 <uxr_init_output_reliable_stream>:
 8018f74:	b410      	push	{r4}
 8018f76:	f89d c004 	ldrb.w	ip, [sp, #4]
 8018f7a:	8103      	strh	r3, [r0, #8]
 8018f7c:	e9c0 1200 	strd	r1, r2, [r0]
 8018f80:	f880 c00c 	strb.w	ip, [r0, #12]
 8018f84:	b1d3      	cbz	r3, 8018fbc <uxr_init_output_reliable_stream+0x48>
 8018f86:	f8c1 c000 	str.w	ip, [r1]
 8018f8a:	f8b0 c008 	ldrh.w	ip, [r0, #8]
 8018f8e:	f1bc 0f01 	cmp.w	ip, #1
 8018f92:	d913      	bls.n	8018fbc <uxr_init_output_reliable_stream+0x48>
 8018f94:	2301      	movs	r3, #1
 8018f96:	fbb3 f1fc 	udiv	r1, r3, ip
 8018f9a:	fb0c 3111 	mls	r1, ip, r1, r3
 8018f9e:	b289      	uxth	r1, r1
 8018fa0:	6842      	ldr	r2, [r0, #4]
 8018fa2:	6804      	ldr	r4, [r0, #0]
 8018fa4:	fbb2 f2fc 	udiv	r2, r2, ip
 8018fa8:	fb01 f202 	mul.w	r2, r1, r2
 8018fac:	7b01      	ldrb	r1, [r0, #12]
 8018fae:	50a1      	str	r1, [r4, r2]
 8018fb0:	3301      	adds	r3, #1
 8018fb2:	f8b0 c008 	ldrh.w	ip, [r0, #8]
 8018fb6:	b29b      	uxth	r3, r3
 8018fb8:	459c      	cmp	ip, r3
 8018fba:	d8ec      	bhi.n	8018f96 <uxr_init_output_reliable_stream+0x22>
 8018fbc:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8018fc0:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 8018fc4:	e9c0 2306 	strd	r2, r3, [r0, #24]
 8018fc8:	4905      	ldr	r1, [pc, #20]	@ (8018fe0 <uxr_init_output_reliable_stream+0x6c>)
 8018fca:	f85d 4b04 	ldr.w	r4, [sp], #4
 8018fce:	f8c0 100e 	str.w	r1, [r0, #14]
 8018fd2:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8018fd6:	2300      	movs	r3, #0
 8018fd8:	8242      	strh	r2, [r0, #18]
 8018fda:	8403      	strh	r3, [r0, #32]
 8018fdc:	4770      	bx	lr
 8018fde:	bf00      	nop
 8018fe0:	ffff0000 	.word	0xffff0000

08018fe4 <uxr_reset_output_reliable_stream>:
 8018fe4:	8901      	ldrh	r1, [r0, #8]
 8018fe6:	b1b1      	cbz	r1, 8019016 <uxr_reset_output_reliable_stream+0x32>
 8018fe8:	f04f 0c00 	mov.w	ip, #0
 8018fec:	4663      	mov	r3, ip
 8018fee:	fbb3 f2f1 	udiv	r2, r3, r1
 8018ff2:	fb01 3312 	mls	r3, r1, r2, r3
 8018ff6:	b29b      	uxth	r3, r3
 8018ff8:	6842      	ldr	r2, [r0, #4]
 8018ffa:	fbb2 f2f1 	udiv	r2, r2, r1
 8018ffe:	6801      	ldr	r1, [r0, #0]
 8019000:	fb02 f303 	mul.w	r3, r2, r3
 8019004:	7b02      	ldrb	r2, [r0, #12]
 8019006:	50ca      	str	r2, [r1, r3]
 8019008:	f10c 0c01 	add.w	ip, ip, #1
 801900c:	8901      	ldrh	r1, [r0, #8]
 801900e:	fa1f f38c 	uxth.w	r3, ip
 8019012:	4299      	cmp	r1, r3
 8019014:	d8eb      	bhi.n	8018fee <uxr_reset_output_reliable_stream+0xa>
 8019016:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 801901a:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 801901e:	e9c0 2306 	strd	r2, r3, [r0, #24]
 8019022:	4904      	ldr	r1, [pc, #16]	@ (8019034 <uxr_reset_output_reliable_stream+0x50>)
 8019024:	f8c0 100e 	str.w	r1, [r0, #14]
 8019028:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 801902c:	2300      	movs	r3, #0
 801902e:	8242      	strh	r2, [r0, #18]
 8019030:	8403      	strh	r3, [r0, #32]
 8019032:	4770      	bx	lr
 8019034:	ffff0000 	.word	0xffff0000

08019038 <uxr_prepare_reliable_buffer_to_write>:
 8019038:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801903c:	4604      	mov	r4, r0
 801903e:	b091      	sub	sp, #68	@ 0x44
 8019040:	8900      	ldrh	r0, [r0, #8]
 8019042:	89e6      	ldrh	r6, [r4, #14]
 8019044:	6823      	ldr	r3, [r4, #0]
 8019046:	9204      	str	r2, [sp, #16]
 8019048:	fbb6 f2f0 	udiv	r2, r6, r0
 801904c:	fb00 6212 	mls	r2, r0, r2, r6
 8019050:	b292      	uxth	r2, r2
 8019052:	6865      	ldr	r5, [r4, #4]
 8019054:	fbb5 f5f0 	udiv	r5, r5, r0
 8019058:	fb05 3202 	mla	r2, r5, r2, r3
 801905c:	3204      	adds	r2, #4
 801905e:	f852 8c04 	ldr.w	r8, [r2, #-4]
 8019062:	f894 900c 	ldrb.w	r9, [r4, #12]
 8019066:	9203      	str	r2, [sp, #12]
 8019068:	468b      	mov	fp, r1
 801906a:	1f2f      	subs	r7, r5, #4
 801906c:	2800      	cmp	r0, #0
 801906e:	f000 814c 	beq.w	801930a <uxr_prepare_reliable_buffer_to_write+0x2d2>
 8019072:	f04f 0c00 	mov.w	ip, #0
 8019076:	46e2      	mov	sl, ip
 8019078:	4661      	mov	r1, ip
 801907a:	fbb1 f2f0 	udiv	r2, r1, r0
 801907e:	fb00 1212 	mls	r2, r0, r2, r1
 8019082:	b292      	uxth	r2, r2
 8019084:	fb05 f202 	mul.w	r2, r5, r2
 8019088:	f10c 0c01 	add.w	ip, ip, #1
 801908c:	589a      	ldr	r2, [r3, r2]
 801908e:	454a      	cmp	r2, r9
 8019090:	bf08      	it	eq
 8019092:	f10a 0a01 	addeq.w	sl, sl, #1
 8019096:	fa1f f18c 	uxth.w	r1, ip
 801909a:	bf08      	it	eq
 801909c:	fa1f fa8a 	uxtheq.w	sl, sl
 80190a0:	4281      	cmp	r1, r0
 80190a2:	d3ea      	bcc.n	801907a <uxr_prepare_reliable_buffer_to_write+0x42>
 80190a4:	4640      	mov	r0, r8
 80190a6:	2104      	movs	r1, #4
 80190a8:	f8cd a014 	str.w	sl, [sp, #20]
 80190ac:	f7f7 fab2 	bl	8010614 <ucdr_alignment>
 80190b0:	4480      	add	r8, r0
 80190b2:	eb08 020b 	add.w	r2, r8, fp
 80190b6:	42ba      	cmp	r2, r7
 80190b8:	f240 80cd 	bls.w	8019256 <uxr_prepare_reliable_buffer_to_write+0x21e>
 80190bc:	7b22      	ldrb	r2, [r4, #12]
 80190be:	445a      	add	r2, fp
 80190c0:	42ba      	cmp	r2, r7
 80190c2:	f240 80b5 	bls.w	8019230 <uxr_prepare_reliable_buffer_to_write+0x1f8>
 80190c6:	f5c9 437f 	rsb	r3, r9, #65280	@ 0xff00
 80190ca:	33fc      	adds	r3, #252	@ 0xfc
 80190cc:	b2ba      	uxth	r2, r7
 80190ce:	4413      	add	r3, r2
 80190d0:	b29b      	uxth	r3, r3
 80190d2:	fb0a f903 	mul.w	r9, sl, r3
 80190d6:	45d9      	cmp	r9, fp
 80190d8:	9305      	str	r3, [sp, #20]
 80190da:	9306      	str	r3, [sp, #24]
 80190dc:	f0c0 80b7 	bcc.w	801924e <uxr_prepare_reliable_buffer_to_write+0x216>
 80190e0:	f108 0304 	add.w	r3, r8, #4
 80190e4:	42bb      	cmp	r3, r7
 80190e6:	f080 80db 	bcs.w	80192a0 <uxr_prepare_reliable_buffer_to_write+0x268>
 80190ea:	f1a2 0904 	sub.w	r9, r2, #4
 80190ee:	eba9 0908 	sub.w	r9, r9, r8
 80190f2:	9b05      	ldr	r3, [sp, #20]
 80190f4:	fa1f f989 	uxth.w	r9, r9
 80190f8:	ebab 0b09 	sub.w	fp, fp, r9
 80190fc:	fbbb f2f3 	udiv	r2, fp, r3
 8019100:	fb03 b312 	mls	r3, r3, r2, fp
 8019104:	2b00      	cmp	r3, #0
 8019106:	f000 80c8 	beq.w	801929a <uxr_prepare_reliable_buffer_to_write+0x262>
 801910a:	3201      	adds	r2, #1
 801910c:	b292      	uxth	r2, r2
 801910e:	9306      	str	r3, [sp, #24]
 8019110:	4552      	cmp	r2, sl
 8019112:	f200 809c 	bhi.w	801924e <uxr_prepare_reliable_buffer_to_write+0x216>
 8019116:	f10d 0b20 	add.w	fp, sp, #32
 801911a:	2a00      	cmp	r2, #0
 801911c:	d042      	beq.n	80191a4 <uxr_prepare_reliable_buffer_to_write+0x16c>
 801911e:	f8cd 801c 	str.w	r8, [sp, #28]
 8019122:	f04f 0a00 	mov.w	sl, #0
 8019126:	f8dd 8014 	ldr.w	r8, [sp, #20]
 801912a:	9505      	str	r5, [sp, #20]
 801912c:	f10d 0b20 	add.w	fp, sp, #32
 8019130:	4615      	mov	r5, r2
 8019132:	e000      	b.n	8019136 <uxr_prepare_reliable_buffer_to_write+0xfe>
 8019134:	46c1      	mov	r9, r8
 8019136:	8920      	ldrh	r0, [r4, #8]
 8019138:	fbb6 f2f0 	udiv	r2, r6, r0
 801913c:	fb00 6112 	mls	r1, r0, r2, r6
 8019140:	b28a      	uxth	r2, r1
 8019142:	6863      	ldr	r3, [r4, #4]
 8019144:	fbb3 f1f0 	udiv	r1, r3, r0
 8019148:	6823      	ldr	r3, [r4, #0]
 801914a:	fb02 f101 	mul.w	r1, r2, r1
 801914e:	3104      	adds	r1, #4
 8019150:	4419      	add	r1, r3
 8019152:	4658      	mov	r0, fp
 8019154:	f851 2c04 	ldr.w	r2, [r1, #-4]
 8019158:	9200      	str	r2, [sp, #0]
 801915a:	2300      	movs	r3, #0
 801915c:	463a      	mov	r2, r7
 801915e:	f7f7 fa43 	bl	80105e8 <ucdr_init_buffer_origin_offset>
 8019162:	464a      	mov	r2, r9
 8019164:	2300      	movs	r3, #0
 8019166:	210d      	movs	r1, #13
 8019168:	4658      	mov	r0, fp
 801916a:	f7f8 ff41 	bl	8011ff0 <uxr_buffer_submessage_header>
 801916e:	8921      	ldrh	r1, [r4, #8]
 8019170:	fbb6 f2f1 	udiv	r2, r6, r1
 8019174:	fb01 6212 	mls	r2, r1, r2, r6
 8019178:	b292      	uxth	r2, r2
 801917a:	6863      	ldr	r3, [r4, #4]
 801917c:	fbb3 f3f1 	udiv	r3, r3, r1
 8019180:	fb02 f303 	mul.w	r3, r2, r3
 8019184:	6822      	ldr	r2, [r4, #0]
 8019186:	4630      	mov	r0, r6
 8019188:	50d7      	str	r7, [r2, r3]
 801918a:	2101      	movs	r1, #1
 801918c:	f000 faf4 	bl	8019778 <uxr_seq_num_add>
 8019190:	f10a 0a01 	add.w	sl, sl, #1
 8019194:	fa1f f38a 	uxth.w	r3, sl
 8019198:	429d      	cmp	r5, r3
 801919a:	4606      	mov	r6, r0
 801919c:	d8ca      	bhi.n	8019134 <uxr_prepare_reliable_buffer_to_write+0xfc>
 801919e:	f8dd 801c 	ldr.w	r8, [sp, #28]
 80191a2:	9d05      	ldr	r5, [sp, #20]
 80191a4:	8920      	ldrh	r0, [r4, #8]
 80191a6:	fbb6 f3f0 	udiv	r3, r6, r0
 80191aa:	fb00 6313 	mls	r3, r0, r3, r6
 80191ae:	b299      	uxth	r1, r3
 80191b0:	6863      	ldr	r3, [r4, #4]
 80191b2:	fbb3 f3f0 	udiv	r3, r3, r0
 80191b6:	fb01 f303 	mul.w	r3, r1, r3
 80191ba:	6821      	ldr	r1, [r4, #0]
 80191bc:	3304      	adds	r3, #4
 80191be:	4419      	add	r1, r3
 80191c0:	463a      	mov	r2, r7
 80191c2:	f851 0c04 	ldr.w	r0, [r1, #-4]
 80191c6:	9000      	str	r0, [sp, #0]
 80191c8:	2300      	movs	r3, #0
 80191ca:	4658      	mov	r0, fp
 80191cc:	f7f7 fa0c 	bl	80105e8 <ucdr_init_buffer_origin_offset>
 80191d0:	f8dd 9018 	ldr.w	r9, [sp, #24]
 80191d4:	4658      	mov	r0, fp
 80191d6:	fa1f f289 	uxth.w	r2, r9
 80191da:	2302      	movs	r3, #2
 80191dc:	210d      	movs	r1, #13
 80191de:	f7f8 ff07 	bl	8011ff0 <uxr_buffer_submessage_header>
 80191e2:	9b03      	ldr	r3, [sp, #12]
 80191e4:	8927      	ldrh	r7, [r4, #8]
 80191e6:	7b20      	ldrb	r0, [r4, #12]
 80191e8:	f108 0104 	add.w	r1, r8, #4
 80191ec:	440b      	add	r3, r1
 80191ee:	4619      	mov	r1, r3
 80191f0:	fbb6 f3f7 	udiv	r3, r6, r7
 80191f4:	fb07 6313 	mls	r3, r7, r3, r6
 80191f8:	f1a5 0208 	sub.w	r2, r5, #8
 80191fc:	b29d      	uxth	r5, r3
 80191fe:	3004      	adds	r0, #4
 8019200:	6863      	ldr	r3, [r4, #4]
 8019202:	fbb3 f3f7 	udiv	r3, r3, r7
 8019206:	fb05 f303 	mul.w	r3, r5, r3
 801920a:	6825      	ldr	r5, [r4, #0]
 801920c:	4448      	add	r0, r9
 801920e:	50e8      	str	r0, [r5, r3]
 8019210:	9d04      	ldr	r5, [sp, #16]
 8019212:	eba2 0208 	sub.w	r2, r2, r8
 8019216:	4628      	mov	r0, r5
 8019218:	f7f7 f9f8 	bl	801060c <ucdr_init_buffer>
 801921c:	4628      	mov	r0, r5
 801921e:	493c      	ldr	r1, [pc, #240]	@ (8019310 <uxr_prepare_reliable_buffer_to_write+0x2d8>)
 8019220:	4622      	mov	r2, r4
 8019222:	f7f7 f9c7 	bl	80105b4 <ucdr_set_on_full_buffer_callback>
 8019226:	2001      	movs	r0, #1
 8019228:	81e6      	strh	r6, [r4, #14]
 801922a:	b011      	add	sp, #68	@ 0x44
 801922c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019230:	2101      	movs	r1, #1
 8019232:	89e0      	ldrh	r0, [r4, #14]
 8019234:	f000 faa0 	bl	8019778 <uxr_seq_num_add>
 8019238:	8921      	ldrh	r1, [r4, #8]
 801923a:	4605      	mov	r5, r0
 801923c:	8a60      	ldrh	r0, [r4, #18]
 801923e:	f000 fa9b 	bl	8019778 <uxr_seq_num_add>
 8019242:	4601      	mov	r1, r0
 8019244:	4628      	mov	r0, r5
 8019246:	f000 fa9f 	bl	8019788 <uxr_seq_num_cmp>
 801924a:	2800      	cmp	r0, #0
 801924c:	dd42      	ble.n	80192d4 <uxr_prepare_reliable_buffer_to_write+0x29c>
 801924e:	2000      	movs	r0, #0
 8019250:	b011      	add	sp, #68	@ 0x44
 8019252:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019256:	8921      	ldrh	r1, [r4, #8]
 8019258:	8a60      	ldrh	r0, [r4, #18]
 801925a:	9205      	str	r2, [sp, #20]
 801925c:	f000 fa8c 	bl	8019778 <uxr_seq_num_add>
 8019260:	4601      	mov	r1, r0
 8019262:	4630      	mov	r0, r6
 8019264:	f000 fa90 	bl	8019788 <uxr_seq_num_cmp>
 8019268:	2800      	cmp	r0, #0
 801926a:	9a05      	ldr	r2, [sp, #20]
 801926c:	dcef      	bgt.n	801924e <uxr_prepare_reliable_buffer_to_write+0x216>
 801926e:	8927      	ldrh	r7, [r4, #8]
 8019270:	fbb6 f3f7 	udiv	r3, r6, r7
 8019274:	fb07 6313 	mls	r3, r7, r3, r6
 8019278:	b29d      	uxth	r5, r3
 801927a:	6863      	ldr	r3, [r4, #4]
 801927c:	6824      	ldr	r4, [r4, #0]
 801927e:	fbb3 f3f7 	udiv	r3, r3, r7
 8019282:	fb05 f303 	mul.w	r3, r5, r3
 8019286:	e9dd 1003 	ldrd	r1, r0, [sp, #12]
 801928a:	50e2      	str	r2, [r4, r3]
 801928c:	2300      	movs	r3, #0
 801928e:	f8cd 8000 	str.w	r8, [sp]
 8019292:	f7f7 f9a9 	bl	80105e8 <ucdr_init_buffer_origin_offset>
 8019296:	2001      	movs	r0, #1
 8019298:	e7da      	b.n	8019250 <uxr_prepare_reliable_buffer_to_write+0x218>
 801929a:	b293      	uxth	r3, r2
 801929c:	461a      	mov	r2, r3
 801929e:	e737      	b.n	8019110 <uxr_prepare_reliable_buffer_to_write+0xd8>
 80192a0:	4630      	mov	r0, r6
 80192a2:	2101      	movs	r1, #1
 80192a4:	9207      	str	r2, [sp, #28]
 80192a6:	f000 fa67 	bl	8019778 <uxr_seq_num_add>
 80192aa:	f8b4 c008 	ldrh.w	ip, [r4, #8]
 80192ae:	fbb0 f1fc 	udiv	r1, r0, ip
 80192b2:	fb0c 0111 	mls	r1, ip, r1, r0
 80192b6:	4606      	mov	r6, r0
 80192b8:	b288      	uxth	r0, r1
 80192ba:	6863      	ldr	r3, [r4, #4]
 80192bc:	fbb3 f1fc 	udiv	r1, r3, ip
 80192c0:	6823      	ldr	r3, [r4, #0]
 80192c2:	9a07      	ldr	r2, [sp, #28]
 80192c4:	fb00 f101 	mul.w	r1, r0, r1
 80192c8:	3104      	adds	r1, #4
 80192ca:	440b      	add	r3, r1
 80192cc:	9303      	str	r3, [sp, #12]
 80192ce:	f853 8c04 	ldr.w	r8, [r3, #-4]
 80192d2:	e70a      	b.n	80190ea <uxr_prepare_reliable_buffer_to_write+0xb2>
 80192d4:	8921      	ldrh	r1, [r4, #8]
 80192d6:	fbb5 f3f1 	udiv	r3, r5, r1
 80192da:	fb01 5313 	mls	r3, r1, r3, r5
 80192de:	b29a      	uxth	r2, r3
 80192e0:	6863      	ldr	r3, [r4, #4]
 80192e2:	fbb3 f3f1 	udiv	r3, r3, r1
 80192e6:	6821      	ldr	r1, [r4, #0]
 80192e8:	9804      	ldr	r0, [sp, #16]
 80192ea:	fb02 f303 	mul.w	r3, r2, r3
 80192ee:	3304      	adds	r3, #4
 80192f0:	7b22      	ldrb	r2, [r4, #12]
 80192f2:	4419      	add	r1, r3
 80192f4:	445a      	add	r2, fp
 80192f6:	f841 2c04 	str.w	r2, [r1, #-4]
 80192fa:	7b23      	ldrb	r3, [r4, #12]
 80192fc:	9300      	str	r3, [sp, #0]
 80192fe:	2300      	movs	r3, #0
 8019300:	f7f7 f972 	bl	80105e8 <ucdr_init_buffer_origin_offset>
 8019304:	81e5      	strh	r5, [r4, #14]
 8019306:	2001      	movs	r0, #1
 8019308:	e7a2      	b.n	8019250 <uxr_prepare_reliable_buffer_to_write+0x218>
 801930a:	4682      	mov	sl, r0
 801930c:	e6ca      	b.n	80190a4 <uxr_prepare_reliable_buffer_to_write+0x6c>
 801930e:	bf00      	nop
 8019310:	08018f19 	.word	0x08018f19

08019314 <uxr_prepare_next_reliable_buffer_to_send>:
 8019314:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8019316:	4604      	mov	r4, r0
 8019318:	460f      	mov	r7, r1
 801931a:	8a00      	ldrh	r0, [r0, #16]
 801931c:	2101      	movs	r1, #1
 801931e:	4616      	mov	r6, r2
 8019320:	461d      	mov	r5, r3
 8019322:	f000 fa29 	bl	8019778 <uxr_seq_num_add>
 8019326:	8028      	strh	r0, [r5, #0]
 8019328:	8922      	ldrh	r2, [r4, #8]
 801932a:	fbb0 f3f2 	udiv	r3, r0, r2
 801932e:	fb02 0c13 	mls	ip, r2, r3, r0
 8019332:	fa1f fc8c 	uxth.w	ip, ip
 8019336:	6863      	ldr	r3, [r4, #4]
 8019338:	fbb3 f3f2 	udiv	r3, r3, r2
 801933c:	fb0c fc03 	mul.w	ip, ip, r3
 8019340:	6823      	ldr	r3, [r4, #0]
 8019342:	89e1      	ldrh	r1, [r4, #14]
 8019344:	f10c 0c04 	add.w	ip, ip, #4
 8019348:	4463      	add	r3, ip
 801934a:	603b      	str	r3, [r7, #0]
 801934c:	6823      	ldr	r3, [r4, #0]
 801934e:	449c      	add	ip, r3
 8019350:	f85c 3c04 	ldr.w	r3, [ip, #-4]
 8019354:	6033      	str	r3, [r6, #0]
 8019356:	f000 fa17 	bl	8019788 <uxr_seq_num_cmp>
 801935a:	2800      	cmp	r0, #0
 801935c:	dd01      	ble.n	8019362 <uxr_prepare_next_reliable_buffer_to_send+0x4e>
 801935e:	2000      	movs	r0, #0
 8019360:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8019362:	7b23      	ldrb	r3, [r4, #12]
 8019364:	6832      	ldr	r2, [r6, #0]
 8019366:	429a      	cmp	r2, r3
 8019368:	d9f9      	bls.n	801935e <uxr_prepare_next_reliable_buffer_to_send+0x4a>
 801936a:	8a61      	ldrh	r1, [r4, #18]
 801936c:	8a20      	ldrh	r0, [r4, #16]
 801936e:	f000 fa07 	bl	8019780 <uxr_seq_num_sub>
 8019372:	8923      	ldrh	r3, [r4, #8]
 8019374:	4283      	cmp	r3, r0
 8019376:	d0f2      	beq.n	801935e <uxr_prepare_next_reliable_buffer_to_send+0x4a>
 8019378:	8828      	ldrh	r0, [r5, #0]
 801937a:	89e3      	ldrh	r3, [r4, #14]
 801937c:	8220      	strh	r0, [r4, #16]
 801937e:	4298      	cmp	r0, r3
 8019380:	d001      	beq.n	8019386 <uxr_prepare_next_reliable_buffer_to_send+0x72>
 8019382:	2001      	movs	r0, #1
 8019384:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8019386:	2101      	movs	r1, #1
 8019388:	f000 f9f6 	bl	8019778 <uxr_seq_num_add>
 801938c:	81e0      	strh	r0, [r4, #14]
 801938e:	2001      	movs	r0, #1
 8019390:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8019392:	bf00      	nop

08019394 <uxr_update_output_stream_heartbeat_timestamp>:
 8019394:	b570      	push	{r4, r5, r6, lr}
 8019396:	8a01      	ldrh	r1, [r0, #16]
 8019398:	4604      	mov	r4, r0
 801939a:	8a40      	ldrh	r0, [r0, #18]
 801939c:	4615      	mov	r5, r2
 801939e:	461e      	mov	r6, r3
 80193a0:	f000 f9f2 	bl	8019788 <uxr_seq_num_cmp>
 80193a4:	2800      	cmp	r0, #0
 80193a6:	db07      	blt.n	80193b8 <uxr_update_output_stream_heartbeat_timestamp+0x24>
 80193a8:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80193ac:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 80193b0:	e9c4 2306 	strd	r2, r3, [r4, #24]
 80193b4:	2000      	movs	r0, #0
 80193b6:	bd70      	pop	{r4, r5, r6, pc}
 80193b8:	f894 0020 	ldrb.w	r0, [r4, #32]
 80193bc:	b940      	cbnz	r0, 80193d0 <uxr_update_output_stream_heartbeat_timestamp+0x3c>
 80193be:	2301      	movs	r3, #1
 80193c0:	f884 3020 	strb.w	r3, [r4, #32]
 80193c4:	3564      	adds	r5, #100	@ 0x64
 80193c6:	f146 0600 	adc.w	r6, r6, #0
 80193ca:	e9c4 5606 	strd	r5, r6, [r4, #24]
 80193ce:	bd70      	pop	{r4, r5, r6, pc}
 80193d0:	e9d4 2306 	ldrd	r2, r3, [r4, #24]
 80193d4:	4295      	cmp	r5, r2
 80193d6:	eb76 0303 	sbcs.w	r3, r6, r3
 80193da:	bfa5      	ittet	ge
 80193dc:	3001      	addge	r0, #1
 80193de:	f884 0020 	strbge.w	r0, [r4, #32]
 80193e2:	2000      	movlt	r0, #0
 80193e4:	2001      	movge	r0, #1
 80193e6:	e7ed      	b.n	80193c4 <uxr_update_output_stream_heartbeat_timestamp+0x30>

080193e8 <uxr_begin_output_nack_buffer_it>:
 80193e8:	8a40      	ldrh	r0, [r0, #18]
 80193ea:	4770      	bx	lr

080193ec <uxr_next_reliable_nack_buffer_to_send>:
 80193ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80193f0:	f890 8021 	ldrb.w	r8, [r0, #33]	@ 0x21
 80193f4:	b082      	sub	sp, #8
 80193f6:	f1b8 0f00 	cmp.w	r8, #0
 80193fa:	d011      	beq.n	8019420 <uxr_next_reliable_nack_buffer_to_send+0x34>
 80193fc:	4604      	mov	r4, r0
 80193fe:	8818      	ldrh	r0, [r3, #0]
 8019400:	460e      	mov	r6, r1
 8019402:	4617      	mov	r7, r2
 8019404:	461d      	mov	r5, r3
 8019406:	2101      	movs	r1, #1
 8019408:	f000 f9b6 	bl	8019778 <uxr_seq_num_add>
 801940c:	8028      	strh	r0, [r5, #0]
 801940e:	8a21      	ldrh	r1, [r4, #16]
 8019410:	f000 f9ba 	bl	8019788 <uxr_seq_num_cmp>
 8019414:	2800      	cmp	r0, #0
 8019416:	dd07      	ble.n	8019428 <uxr_next_reliable_nack_buffer_to_send+0x3c>
 8019418:	f04f 0800 	mov.w	r8, #0
 801941c:	f884 8021 	strb.w	r8, [r4, #33]	@ 0x21
 8019420:	4640      	mov	r0, r8
 8019422:	b002      	add	sp, #8
 8019424:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8019428:	8921      	ldrh	r1, [r4, #8]
 801942a:	8828      	ldrh	r0, [r5, #0]
 801942c:	6823      	ldr	r3, [r4, #0]
 801942e:	fbb0 f2f1 	udiv	r2, r0, r1
 8019432:	fb01 0c12 	mls	ip, r1, r2, r0
 8019436:	fa1f f28c 	uxth.w	r2, ip
 801943a:	9301      	str	r3, [sp, #4]
 801943c:	6863      	ldr	r3, [r4, #4]
 801943e:	fbb3 fcf1 	udiv	ip, r3, r1
 8019442:	9b01      	ldr	r3, [sp, #4]
 8019444:	fb02 fc0c 	mul.w	ip, r2, ip
 8019448:	f10c 0c04 	add.w	ip, ip, #4
 801944c:	4463      	add	r3, ip
 801944e:	6033      	str	r3, [r6, #0]
 8019450:	6823      	ldr	r3, [r4, #0]
 8019452:	4463      	add	r3, ip
 8019454:	f853 3c04 	ldr.w	r3, [r3, #-4]
 8019458:	603b      	str	r3, [r7, #0]
 801945a:	7b22      	ldrb	r2, [r4, #12]
 801945c:	429a      	cmp	r2, r3
 801945e:	d0d2      	beq.n	8019406 <uxr_next_reliable_nack_buffer_to_send+0x1a>
 8019460:	4640      	mov	r0, r8
 8019462:	b002      	add	sp, #8
 8019464:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08019468 <uxr_process_acknack>:
 8019468:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801946a:	4604      	mov	r4, r0
 801946c:	460e      	mov	r6, r1
 801946e:	4610      	mov	r0, r2
 8019470:	2101      	movs	r1, #1
 8019472:	f000 f985 	bl	8019780 <uxr_seq_num_sub>
 8019476:	8a61      	ldrh	r1, [r4, #18]
 8019478:	f000 f982 	bl	8019780 <uxr_seq_num_sub>
 801947c:	b1c0      	cbz	r0, 80194b0 <uxr_process_acknack+0x48>
 801947e:	4605      	mov	r5, r0
 8019480:	2700      	movs	r7, #0
 8019482:	2101      	movs	r1, #1
 8019484:	8a60      	ldrh	r0, [r4, #18]
 8019486:	f000 f977 	bl	8019778 <uxr_seq_num_add>
 801948a:	f8b4 c008 	ldrh.w	ip, [r4, #8]
 801948e:	fbb0 f1fc 	udiv	r1, r0, ip
 8019492:	e9d4 2300 	ldrd	r2, r3, [r4]
 8019496:	fb0c 0111 	mls	r1, ip, r1, r0
 801949a:	b289      	uxth	r1, r1
 801949c:	3701      	adds	r7, #1
 801949e:	fbb3 f3fc 	udiv	r3, r3, ip
 80194a2:	fb01 f303 	mul.w	r3, r1, r3
 80194a6:	42bd      	cmp	r5, r7
 80194a8:	7b21      	ldrb	r1, [r4, #12]
 80194aa:	8260      	strh	r0, [r4, #18]
 80194ac:	50d1      	str	r1, [r2, r3]
 80194ae:	d1e8      	bne.n	8019482 <uxr_process_acknack+0x1a>
 80194b0:	3e00      	subs	r6, #0
 80194b2:	f04f 0300 	mov.w	r3, #0
 80194b6:	bf18      	it	ne
 80194b8:	2601      	movne	r6, #1
 80194ba:	f884 3020 	strb.w	r3, [r4, #32]
 80194be:	f884 6021 	strb.w	r6, [r4, #33]	@ 0x21
 80194c2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080194c4 <uxr_is_output_up_to_date>:
 80194c4:	8a01      	ldrh	r1, [r0, #16]
 80194c6:	8a40      	ldrh	r0, [r0, #18]
 80194c8:	b508      	push	{r3, lr}
 80194ca:	f000 f95d 	bl	8019788 <uxr_seq_num_cmp>
 80194ce:	fab0 f080 	clz	r0, r0
 80194d2:	0940      	lsrs	r0, r0, #5
 80194d4:	bd08      	pop	{r3, pc}
 80194d6:	bf00      	nop

080194d8 <get_available_free_slots>:
 80194d8:	8902      	ldrh	r2, [r0, #8]
 80194da:	b1da      	cbz	r2, 8019514 <get_available_free_slots+0x3c>
 80194dc:	b530      	push	{r4, r5, lr}
 80194de:	2100      	movs	r1, #0
 80194e0:	6843      	ldr	r3, [r0, #4]
 80194e2:	6805      	ldr	r5, [r0, #0]
 80194e4:	7b04      	ldrb	r4, [r0, #12]
 80194e6:	fbb3 fef2 	udiv	lr, r3, r2
 80194ea:	4608      	mov	r0, r1
 80194ec:	460b      	mov	r3, r1
 80194ee:	fbb3 fcf2 	udiv	ip, r3, r2
 80194f2:	fb02 331c 	mls	r3, r2, ip, r3
 80194f6:	b29b      	uxth	r3, r3
 80194f8:	fb0e f303 	mul.w	r3, lr, r3
 80194fc:	3101      	adds	r1, #1
 80194fe:	f855 c003 	ldr.w	ip, [r5, r3]
 8019502:	4564      	cmp	r4, ip
 8019504:	bf08      	it	eq
 8019506:	3001      	addeq	r0, #1
 8019508:	b28b      	uxth	r3, r1
 801950a:	bf08      	it	eq
 801950c:	b280      	uxtheq	r0, r0
 801950e:	4293      	cmp	r3, r2
 8019510:	d3ed      	bcc.n	80194ee <get_available_free_slots+0x16>
 8019512:	bd30      	pop	{r4, r5, pc}
 8019514:	4610      	mov	r0, r2
 8019516:	4770      	bx	lr

08019518 <uxr_buffer_request_data>:
 8019518:	b530      	push	{r4, r5, lr}
 801951a:	b095      	sub	sp, #84	@ 0x54
 801951c:	e9cd 2104 	strd	r2, r1, [sp, #16]
 8019520:	9d18      	ldr	r5, [sp, #96]	@ 0x60
 8019522:	9303      	str	r3, [sp, #12]
 8019524:	2200      	movs	r2, #0
 8019526:	2d00      	cmp	r5, #0
 8019528:	bf14      	ite	ne
 801952a:	2101      	movne	r1, #1
 801952c:	4611      	moveq	r1, r2
 801952e:	4604      	mov	r4, r0
 8019530:	f88d 301c 	strb.w	r3, [sp, #28]
 8019534:	f88d 201d 	strb.w	r2, [sp, #29]
 8019538:	f88d 201e 	strb.w	r2, [sp, #30]
 801953c:	f88d 1024 	strb.w	r1, [sp, #36]	@ 0x24
 8019540:	d021      	beq.n	8019586 <uxr_buffer_request_data+0x6e>
 8019542:	682a      	ldr	r2, [r5, #0]
 8019544:	686b      	ldr	r3, [r5, #4]
 8019546:	f8cd 2026 	str.w	r2, [sp, #38]	@ 0x26
 801954a:	f8cd 302a 	str.w	r3, [sp, #42]	@ 0x2a
 801954e:	2210      	movs	r2, #16
 8019550:	2308      	movs	r3, #8
 8019552:	2100      	movs	r1, #0
 8019554:	e9cd 3100 	strd	r3, r1, [sp]
 8019558:	4620      	mov	r0, r4
 801955a:	9905      	ldr	r1, [sp, #20]
 801955c:	ab0c      	add	r3, sp, #48	@ 0x30
 801955e:	f7f8 faa9 	bl	8011ab4 <uxr_prepare_stream_to_write_submessage>
 8019562:	b918      	cbnz	r0, 801956c <uxr_buffer_request_data+0x54>
 8019564:	4604      	mov	r4, r0
 8019566:	4620      	mov	r0, r4
 8019568:	b015      	add	sp, #84	@ 0x54
 801956a:	bd30      	pop	{r4, r5, pc}
 801956c:	9904      	ldr	r1, [sp, #16]
 801956e:	aa06      	add	r2, sp, #24
 8019570:	4620      	mov	r0, r4
 8019572:	f7f8 fbd5 	bl	8011d20 <uxr_init_base_object_request>
 8019576:	a906      	add	r1, sp, #24
 8019578:	4604      	mov	r4, r0
 801957a:	a80c      	add	r0, sp, #48	@ 0x30
 801957c:	f7f9 fed0 	bl	8013320 <uxr_serialize_READ_DATA_Payload>
 8019580:	4620      	mov	r0, r4
 8019582:	b015      	add	sp, #84	@ 0x54
 8019584:	bd30      	pop	{r4, r5, pc}
 8019586:	2208      	movs	r2, #8
 8019588:	e7e2      	b.n	8019550 <uxr_buffer_request_data+0x38>
 801958a:	bf00      	nop

0801958c <uxr_buffer_cancel_data>:
 801958c:	b510      	push	{r4, lr}
 801958e:	b094      	sub	sp, #80	@ 0x50
 8019590:	2300      	movs	r3, #0
 8019592:	9202      	str	r2, [sp, #8]
 8019594:	9205      	str	r2, [sp, #20]
 8019596:	9301      	str	r3, [sp, #4]
 8019598:	2201      	movs	r2, #1
 801959a:	f8ad 301c 	strh.w	r3, [sp, #28]
 801959e:	f88d 301e 	strb.w	r3, [sp, #30]
 80195a2:	f8cd 3026 	str.w	r3, [sp, #38]	@ 0x26
 80195a6:	f8cd 302a 	str.w	r3, [sp, #42]	@ 0x2a
 80195aa:	2308      	movs	r3, #8
 80195ac:	f88d 2024 	strb.w	r2, [sp, #36]	@ 0x24
 80195b0:	9300      	str	r3, [sp, #0]
 80195b2:	2210      	movs	r2, #16
 80195b4:	ab0c      	add	r3, sp, #48	@ 0x30
 80195b6:	4604      	mov	r4, r0
 80195b8:	9103      	str	r1, [sp, #12]
 80195ba:	f7f8 fa7b 	bl	8011ab4 <uxr_prepare_stream_to_write_submessage>
 80195be:	b918      	cbnz	r0, 80195c8 <uxr_buffer_cancel_data+0x3c>
 80195c0:	4604      	mov	r4, r0
 80195c2:	4620      	mov	r0, r4
 80195c4:	b014      	add	sp, #80	@ 0x50
 80195c6:	bd10      	pop	{r4, pc}
 80195c8:	9905      	ldr	r1, [sp, #20]
 80195ca:	aa06      	add	r2, sp, #24
 80195cc:	4620      	mov	r0, r4
 80195ce:	f7f8 fba7 	bl	8011d20 <uxr_init_base_object_request>
 80195d2:	a906      	add	r1, sp, #24
 80195d4:	4604      	mov	r4, r0
 80195d6:	a80c      	add	r0, sp, #48	@ 0x30
 80195d8:	f7f9 fea2 	bl	8013320 <uxr_serialize_READ_DATA_Payload>
 80195dc:	4620      	mov	r0, r4
 80195de:	b014      	add	sp, #80	@ 0x50
 80195e0:	bd10      	pop	{r4, pc}
 80195e2:	bf00      	nop

080195e4 <read_submessage_format>:
 80195e4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80195e8:	b095      	sub	sp, #84	@ 0x54
 80195ea:	f8bd 6078 	ldrh.w	r6, [sp, #120]	@ 0x78
 80195ee:	b113      	cbz	r3, 80195f6 <read_submessage_format+0x12>
 80195f0:	b015      	add	sp, #84	@ 0x54
 80195f2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80195f6:	460c      	mov	r4, r1
 80195f8:	4615      	mov	r5, r2
 80195fa:	e9d1 2101 	ldrd	r2, r1, [r1, #4]
 80195fe:	4607      	mov	r7, r0
 8019600:	981c      	ldr	r0, [sp, #112]	@ 0x70
 8019602:	9004      	str	r0, [sp, #16]
 8019604:	981d      	ldr	r0, [sp, #116]	@ 0x74
 8019606:	9005      	str	r0, [sp, #20]
 8019608:	1a52      	subs	r2, r2, r1
 801960a:	a80c      	add	r0, sp, #48	@ 0x30
 801960c:	4699      	mov	r9, r3
 801960e:	f89d 8076 	ldrb.w	r8, [sp, #118]	@ 0x76
 8019612:	f7f6 fffb 	bl	801060c <ucdr_init_buffer>
 8019616:	e9d4 1206 	ldrd	r1, r2, [r4, #24]
 801961a:	a80c      	add	r0, sp, #48	@ 0x30
 801961c:	f7f6 ffca 	bl	80105b4 <ucdr_set_on_full_buffer_callback>
 8019620:	69e2      	ldr	r2, [r4, #28]
 8019622:	b19a      	cbz	r2, 801964c <read_submessage_format+0x68>
 8019624:	f1b8 0f07 	cmp.w	r8, #7
 8019628:	f882 9014 	strb.w	r9, [r2, #20]
 801962c:	d040      	beq.n	80196b0 <read_submessage_format+0xcc>
 801962e:	f1b8 0f08 	cmp.w	r8, #8
 8019632:	d02e      	beq.n	8019692 <read_submessage_format+0xae>
 8019634:	f1b8 0f06 	cmp.w	r8, #6
 8019638:	d011      	beq.n	801965e <read_submessage_format+0x7a>
 801963a:	2301      	movs	r3, #1
 801963c:	7513      	strb	r3, [r2, #20]
 801963e:	4629      	mov	r1, r5
 8019640:	4620      	mov	r0, r4
 8019642:	f7f7 f833 	bl	80106ac <ucdr_advance_buffer>
 8019646:	b015      	add	sp, #84	@ 0x54
 8019648:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801964c:	f1b8 0f07 	cmp.w	r8, #7
 8019650:	d02e      	beq.n	80196b0 <read_submessage_format+0xcc>
 8019652:	f1b8 0f08 	cmp.w	r8, #8
 8019656:	d01c      	beq.n	8019692 <read_submessage_format+0xae>
 8019658:	f1b8 0f06 	cmp.w	r8, #6
 801965c:	d1ef      	bne.n	801963e <read_submessage_format+0x5a>
 801965e:	f8d7 8088 	ldr.w	r8, [r7, #136]	@ 0x88
 8019662:	f1b8 0f00 	cmp.w	r8, #0
 8019666:	d011      	beq.n	801968c <read_submessage_format+0xa8>
 8019668:	ab0c      	add	r3, sp, #48	@ 0x30
 801966a:	e9cd 3500 	strd	r3, r5, [sp]
 801966e:	2306      	movs	r3, #6
 8019670:	f88d 3016 	strb.w	r3, [sp, #22]
 8019674:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8019678:	9302      	str	r3, [sp, #8]
 801967a:	4632      	mov	r2, r6
 801967c:	e9dd 3104 	ldrd	r3, r1, [sp, #16]
 8019680:	4638      	mov	r0, r7
 8019682:	47c0      	blx	r8
 8019684:	2301      	movs	r3, #1
 8019686:	69e2      	ldr	r2, [r4, #28]
 8019688:	f887 30b4 	strb.w	r3, [r7, #180]	@ 0xb4
 801968c:	2a00      	cmp	r2, #0
 801968e:	d1d4      	bne.n	801963a <read_submessage_format+0x56>
 8019690:	e7d5      	b.n	801963e <read_submessage_format+0x5a>
 8019692:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8019696:	2b00      	cmp	r3, #0
 8019698:	d0f8      	beq.n	801968c <read_submessage_format+0xa8>
 801969a:	a906      	add	r1, sp, #24
 801969c:	a80c      	add	r0, sp, #48	@ 0x30
 801969e:	f8dd 8040 	ldr.w	r8, [sp, #64]	@ 0x40
 80196a2:	f7f9 ff03 	bl	80134ac <uxr_deserialize_SampleIdentity>
 80196a6:	b9a0      	cbnz	r0, 80196d2 <read_submessage_format+0xee>
 80196a8:	69e2      	ldr	r2, [r4, #28]
 80196aa:	2a00      	cmp	r2, #0
 80196ac:	d1c5      	bne.n	801963a <read_submessage_format+0x56>
 80196ae:	e7c6      	b.n	801963e <read_submessage_format+0x5a>
 80196b0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80196b4:	b13b      	cbz	r3, 80196c6 <read_submessage_format+0xe2>
 80196b6:	a906      	add	r1, sp, #24
 80196b8:	a80c      	add	r0, sp, #48	@ 0x30
 80196ba:	f8dd 8040 	ldr.w	r8, [sp, #64]	@ 0x40
 80196be:	f7f9 fbc9 	bl	8012e54 <uxr_deserialize_BaseObjectRequest>
 80196c2:	bb60      	cbnz	r0, 801971e <read_submessage_format+0x13a>
 80196c4:	69e2      	ldr	r2, [r4, #28]
 80196c6:	68a3      	ldr	r3, [r4, #8]
 80196c8:	442b      	add	r3, r5
 80196ca:	60a3      	str	r3, [r4, #8]
 80196cc:	2a00      	cmp	r2, #0
 80196ce:	d1b4      	bne.n	801963a <read_submessage_format+0x56>
 80196d0:	e7b5      	b.n	801963e <read_submessage_format+0x5a>
 80196d2:	e9dd 210d 	ldrd	r2, r1, [sp, #52]	@ 0x34
 80196d6:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80196d8:	1a52      	subs	r2, r2, r1
 80196da:	eba8 0803 	sub.w	r8, r8, r3
 80196de:	a80c      	add	r0, sp, #48	@ 0x30
 80196e0:	f7f6 ff94 	bl	801060c <ucdr_init_buffer>
 80196e4:	44a8      	add	r8, r5
 80196e6:	e9d4 1206 	ldrd	r1, r2, [r4, #24]
 80196ea:	a80c      	add	r0, sp, #48	@ 0x30
 80196ec:	f7f6 ff62 	bl	80105b4 <ucdr_set_on_full_buffer_callback>
 80196f0:	fa1f f888 	uxth.w	r8, r8
 80196f4:	ab0c      	add	r3, sp, #48	@ 0x30
 80196f6:	9300      	str	r3, [sp, #0]
 80196f8:	f8cd 8004 	str.w	r8, [sp, #4]
 80196fc:	2108      	movs	r1, #8
 80196fe:	f88d 1016 	strb.w	r1, [sp, #22]
 8019702:	f8d7 10a8 	ldr.w	r1, [r7, #168]	@ 0xa8
 8019706:	9102      	str	r1, [sp, #8]
 8019708:	ab06      	add	r3, sp, #24
 801970a:	4632      	mov	r2, r6
 801970c:	9905      	ldr	r1, [sp, #20]
 801970e:	f8d7 60a4 	ldr.w	r6, [r7, #164]	@ 0xa4
 8019712:	4638      	mov	r0, r7
 8019714:	47b0      	blx	r6
 8019716:	2301      	movs	r3, #1
 8019718:	f887 30b4 	strb.w	r3, [r7, #180]	@ 0xb4
 801971c:	e7c4      	b.n	80196a8 <read_submessage_format+0xc4>
 801971e:	e9dd 210d 	ldrd	r2, r1, [sp, #52]	@ 0x34
 8019722:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8019724:	1a52      	subs	r2, r2, r1
 8019726:	a80c      	add	r0, sp, #48	@ 0x30
 8019728:	eba8 0803 	sub.w	r8, r8, r3
 801972c:	f7f6 ff6e 	bl	801060c <ucdr_init_buffer>
 8019730:	e9d4 1206 	ldrd	r1, r2, [r4, #24]
 8019734:	a80c      	add	r0, sp, #48	@ 0x30
 8019736:	f7f6 ff3d 	bl	80105b4 <ucdr_set_on_full_buffer_callback>
 801973a:	ab0c      	add	r3, sp, #48	@ 0x30
 801973c:	9300      	str	r3, [sp, #0]
 801973e:	f89d 1018 	ldrb.w	r1, [sp, #24]
 8019742:	f89d 3019 	ldrb.w	r3, [sp, #25]
 8019746:	44a8      	add	r8, r5
 8019748:	fa1f f888 	uxth.w	r8, r8
 801974c:	f8cd 8004 	str.w	r8, [sp, #4]
 8019750:	eb03 2301 	add.w	r3, r3, r1, lsl #8
 8019754:	2107      	movs	r1, #7
 8019756:	f88d 1016 	strb.w	r1, [sp, #22]
 801975a:	f8d7 10b0 	ldr.w	r1, [r7, #176]	@ 0xb0
 801975e:	9102      	str	r1, [sp, #8]
 8019760:	4632      	mov	r2, r6
 8019762:	b29b      	uxth	r3, r3
 8019764:	f8d7 60ac 	ldr.w	r6, [r7, #172]	@ 0xac
 8019768:	9905      	ldr	r1, [sp, #20]
 801976a:	4638      	mov	r0, r7
 801976c:	47b0      	blx	r6
 801976e:	2301      	movs	r3, #1
 8019770:	f887 30b4 	strb.w	r3, [r7, #180]	@ 0xb4
 8019774:	e7a6      	b.n	80196c4 <read_submessage_format+0xe0>
 8019776:	bf00      	nop

08019778 <uxr_seq_num_add>:
 8019778:	4408      	add	r0, r1
 801977a:	b280      	uxth	r0, r0
 801977c:	4770      	bx	lr
 801977e:	bf00      	nop

08019780 <uxr_seq_num_sub>:
 8019780:	1a40      	subs	r0, r0, r1
 8019782:	b280      	uxth	r0, r0
 8019784:	4770      	bx	lr
 8019786:	bf00      	nop

08019788 <uxr_seq_num_cmp>:
 8019788:	4288      	cmp	r0, r1
 801978a:	d011      	beq.n	80197b0 <uxr_seq_num_cmp+0x28>
 801978c:	d309      	bcc.n	80197a2 <uxr_seq_num_cmp+0x1a>
 801978e:	4288      	cmp	r0, r1
 8019790:	d910      	bls.n	80197b4 <uxr_seq_num_cmp+0x2c>
 8019792:	1a40      	subs	r0, r0, r1
 8019794:	f5b0 4f00 	cmp.w	r0, #32768	@ 0x8000
 8019798:	bfd4      	ite	le
 801979a:	2001      	movle	r0, #1
 801979c:	f04f 30ff 	movgt.w	r0, #4294967295	@ 0xffffffff
 80197a0:	4770      	bx	lr
 80197a2:	1a0b      	subs	r3, r1, r0
 80197a4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80197a8:	daf1      	bge.n	801978e <uxr_seq_num_cmp+0x6>
 80197aa:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80197ae:	4770      	bx	lr
 80197b0:	2000      	movs	r0, #0
 80197b2:	4770      	bx	lr
 80197b4:	2001      	movs	r0, #1
 80197b6:	4770      	bx	lr

080197b8 <uxr_init_framing_io>:
 80197b8:	2300      	movs	r3, #0
 80197ba:	7041      	strb	r1, [r0, #1]
 80197bc:	7003      	strb	r3, [r0, #0]
 80197be:	8583      	strh	r3, [r0, #44]	@ 0x2c
 80197c0:	4770      	bx	lr
 80197c2:	bf00      	nop

080197c4 <uxr_write_framed_msg>:
 80197c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80197c8:	4617      	mov	r7, r2
 80197ca:	7842      	ldrb	r2, [r0, #1]
 80197cc:	b083      	sub	sp, #12
 80197ce:	460e      	mov	r6, r1
 80197d0:	f1a2 017d 	sub.w	r1, r2, #125	@ 0x7d
 80197d4:	469a      	mov	sl, r3
 80197d6:	2901      	cmp	r1, #1
 80197d8:	f04f 037e 	mov.w	r3, #126	@ 0x7e
 80197dc:	4604      	mov	r4, r0
 80197de:	f880 3038 	strb.w	r3, [r0, #56]	@ 0x38
 80197e2:	f8dd b038 	ldr.w	fp, [sp, #56]	@ 0x38
 80197e6:	f89d 0034 	ldrb.w	r0, [sp, #52]	@ 0x34
 80197ea:	f240 8137 	bls.w	8019a5c <uxr_write_framed_msg+0x298>
 80197ee:	f1a0 017d 	sub.w	r1, r0, #125	@ 0x7d
 80197f2:	f884 2039 	strb.w	r2, [r4, #57]	@ 0x39
 80197f6:	2901      	cmp	r1, #1
 80197f8:	f04f 0202 	mov.w	r2, #2
 80197fc:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 8019800:	f240 808f 	bls.w	8019922 <uxr_write_framed_msg+0x15e>
 8019804:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8019806:	f884 003a 	strb.w	r0, [r4, #58]	@ 0x3a
 801980a:	b2dd      	uxtb	r5, r3
 801980c:	f1a5 017d 	sub.w	r1, r5, #125	@ 0x7d
 8019810:	2203      	movs	r2, #3
 8019812:	2901      	cmp	r1, #1
 8019814:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 8019818:	f240 809a 	bls.w	8019950 <uxr_write_framed_msg+0x18c>
 801981c:	18a1      	adds	r1, r4, r2
 801981e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8019820:	f881 5038 	strb.w	r5, [r1, #56]	@ 0x38
 8019824:	f3c3 2107 	ubfx	r1, r3, #8, #8
 8019828:	f1a1 007d 	sub.w	r0, r1, #125	@ 0x7d
 801982c:	3201      	adds	r2, #1
 801982e:	2801      	cmp	r0, #1
 8019830:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 8019834:	f240 80a0 	bls.w	8019978 <uxr_write_framed_msg+0x1b4>
 8019838:	18a0      	adds	r0, r4, r2
 801983a:	3201      	adds	r2, #1
 801983c:	b2d2      	uxtb	r2, r2
 801983e:	f880 1038 	strb.w	r1, [r0, #56]	@ 0x38
 8019842:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 8019846:	2b00      	cmp	r3, #0
 8019848:	f000 80a9 	beq.w	801999e <uxr_write_framed_msg+0x1da>
 801984c:	f04f 0900 	mov.w	r9, #0
 8019850:	46c8      	mov	r8, r9
 8019852:	f81a 3008 	ldrb.w	r3, [sl, r8]
 8019856:	f1a3 017d 	sub.w	r1, r3, #125	@ 0x7d
 801985a:	2901      	cmp	r1, #1
 801985c:	f240 80c3 	bls.w	80199e6 <uxr_write_framed_msg+0x222>
 8019860:	2a29      	cmp	r2, #41	@ 0x29
 8019862:	f200 809f 	bhi.w	80199a4 <uxr_write_framed_msg+0x1e0>
 8019866:	18a1      	adds	r1, r4, r2
 8019868:	3201      	adds	r2, #1
 801986a:	b2d2      	uxtb	r2, r2
 801986c:	f881 3038 	strb.w	r3, [r1, #56]	@ 0x38
 8019870:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 8019874:	ea89 0303 	eor.w	r3, r9, r3
 8019878:	498c      	ldr	r1, [pc, #560]	@ (8019aac <uxr_write_framed_msg+0x2e8>)
 801987a:	b2db      	uxtb	r3, r3
 801987c:	f108 0801 	add.w	r8, r8, #1
 8019880:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8019884:	ea83 2919 	eor.w	r9, r3, r9, lsr #8
 8019888:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801988a:	4543      	cmp	r3, r8
 801988c:	d8e1      	bhi.n	8019852 <uxr_write_framed_msg+0x8e>
 801988e:	ea4f 2319 	mov.w	r3, r9, lsr #8
 8019892:	fa5f f889 	uxtb.w	r8, r9
 8019896:	9301      	str	r3, [sp, #4]
 8019898:	f04f 0900 	mov.w	r9, #0
 801989c:	f1a8 0a7d 	sub.w	sl, r8, #125	@ 0x7d
 80198a0:	fa5f f18a 	uxtb.w	r1, sl
 80198a4:	2901      	cmp	r1, #1
 80198a6:	d921      	bls.n	80198ec <uxr_write_framed_msg+0x128>
 80198a8:	2a29      	cmp	r2, #41	@ 0x29
 80198aa:	f240 80af 	bls.w	8019a0c <uxr_write_framed_msg+0x248>
 80198ae:	2500      	movs	r5, #0
 80198b0:	e000      	b.n	80198b4 <uxr_write_framed_msg+0xf0>
 80198b2:	b160      	cbz	r0, 80198ce <uxr_write_framed_msg+0x10a>
 80198b4:	f105 0138 	add.w	r1, r5, #56	@ 0x38
 80198b8:	1b52      	subs	r2, r2, r5
 80198ba:	465b      	mov	r3, fp
 80198bc:	4421      	add	r1, r4
 80198be:	4638      	mov	r0, r7
 80198c0:	47b0      	blx	r6
 80198c2:	f894 2062 	ldrb.w	r2, [r4, #98]	@ 0x62
 80198c6:	4405      	add	r5, r0
 80198c8:	4295      	cmp	r5, r2
 80198ca:	d3f2      	bcc.n	80198b2 <uxr_write_framed_msg+0xee>
 80198cc:	d003      	beq.n	80198d6 <uxr_write_framed_msg+0x112>
 80198ce:	2000      	movs	r0, #0
 80198d0:	b003      	add	sp, #12
 80198d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80198d6:	fa5f f18a 	uxtb.w	r1, sl
 80198da:	f04f 0300 	mov.w	r3, #0
 80198de:	2901      	cmp	r1, #1
 80198e0:	f884 3062 	strb.w	r3, [r4, #98]	@ 0x62
 80198e4:	f04f 0200 	mov.w	r2, #0
 80198e8:	f200 8090 	bhi.w	8019a0c <uxr_write_framed_msg+0x248>
 80198ec:	1c51      	adds	r1, r2, #1
 80198ee:	b2c9      	uxtb	r1, r1
 80198f0:	2929      	cmp	r1, #41	@ 0x29
 80198f2:	d8dc      	bhi.n	80198ae <uxr_write_framed_msg+0xea>
 80198f4:	18a5      	adds	r5, r4, r2
 80198f6:	4421      	add	r1, r4
 80198f8:	3202      	adds	r2, #2
 80198fa:	f088 0820 	eor.w	r8, r8, #32
 80198fe:	4648      	mov	r0, r9
 8019900:	f04f 037d 	mov.w	r3, #125	@ 0x7d
 8019904:	b2d2      	uxtb	r2, r2
 8019906:	f885 3038 	strb.w	r3, [r5, #56]	@ 0x38
 801990a:	f04f 0901 	mov.w	r9, #1
 801990e:	f881 8038 	strb.w	r8, [r1, #56]	@ 0x38
 8019912:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 8019916:	2800      	cmp	r0, #0
 8019918:	f040 8085 	bne.w	8019a26 <uxr_write_framed_msg+0x262>
 801991c:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8019920:	e7bc      	b.n	801989c <uxr_write_framed_msg+0xd8>
 8019922:	4611      	mov	r1, r2
 8019924:	f04f 0c03 	mov.w	ip, #3
 8019928:	2204      	movs	r2, #4
 801992a:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801992c:	4421      	add	r1, r4
 801992e:	b2dd      	uxtb	r5, r3
 8019930:	f04f 0e7d 	mov.w	lr, #125	@ 0x7d
 8019934:	f881 e038 	strb.w	lr, [r1, #56]	@ 0x38
 8019938:	44a4      	add	ip, r4
 801993a:	f1a5 017d 	sub.w	r1, r5, #125	@ 0x7d
 801993e:	f080 0020 	eor.w	r0, r0, #32
 8019942:	2901      	cmp	r1, #1
 8019944:	f88c 0038 	strb.w	r0, [ip, #56]	@ 0x38
 8019948:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 801994c:	f63f af66 	bhi.w	801981c <uxr_write_framed_msg+0x58>
 8019950:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8019952:	18a0      	adds	r0, r4, r2
 8019954:	f085 0520 	eor.w	r5, r5, #32
 8019958:	f04f 0c7d 	mov.w	ip, #125	@ 0x7d
 801995c:	f3c3 2107 	ubfx	r1, r3, #8, #8
 8019960:	f880 c038 	strb.w	ip, [r0, #56]	@ 0x38
 8019964:	f880 5039 	strb.w	r5, [r0, #57]	@ 0x39
 8019968:	f1a1 007d 	sub.w	r0, r1, #125	@ 0x7d
 801996c:	3202      	adds	r2, #2
 801996e:	2801      	cmp	r0, #1
 8019970:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 8019974:	f63f af60 	bhi.w	8019838 <uxr_write_framed_msg+0x74>
 8019978:	1c50      	adds	r0, r2, #1
 801997a:	18a5      	adds	r5, r4, r2
 801997c:	fa54 f080 	uxtab	r0, r4, r0
 8019980:	3202      	adds	r2, #2
 8019982:	f081 0120 	eor.w	r1, r1, #32
 8019986:	b2d2      	uxtb	r2, r2
 8019988:	f04f 0c7d 	mov.w	ip, #125	@ 0x7d
 801998c:	f885 c038 	strb.w	ip, [r5, #56]	@ 0x38
 8019990:	f880 1038 	strb.w	r1, [r0, #56]	@ 0x38
 8019994:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 8019998:	2b00      	cmp	r3, #0
 801999a:	f47f af57 	bne.w	801984c <uxr_write_framed_msg+0x88>
 801999e:	9301      	str	r3, [sp, #4]
 80199a0:	4698      	mov	r8, r3
 80199a2:	e779      	b.n	8019898 <uxr_write_framed_msg+0xd4>
 80199a4:	2500      	movs	r5, #0
 80199a6:	e001      	b.n	80199ac <uxr_write_framed_msg+0x1e8>
 80199a8:	2800      	cmp	r0, #0
 80199aa:	d090      	beq.n	80198ce <uxr_write_framed_msg+0x10a>
 80199ac:	f105 0138 	add.w	r1, r5, #56	@ 0x38
 80199b0:	1b52      	subs	r2, r2, r5
 80199b2:	465b      	mov	r3, fp
 80199b4:	4421      	add	r1, r4
 80199b6:	4638      	mov	r0, r7
 80199b8:	47b0      	blx	r6
 80199ba:	f894 2062 	ldrb.w	r2, [r4, #98]	@ 0x62
 80199be:	4405      	add	r5, r0
 80199c0:	4295      	cmp	r5, r2
 80199c2:	d3f1      	bcc.n	80199a8 <uxr_write_framed_msg+0x1e4>
 80199c4:	d183      	bne.n	80198ce <uxr_write_framed_msg+0x10a>
 80199c6:	f04f 0300 	mov.w	r3, #0
 80199ca:	f884 3062 	strb.w	r3, [r4, #98]	@ 0x62
 80199ce:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80199d0:	4543      	cmp	r3, r8
 80199d2:	d964      	bls.n	8019a9e <uxr_write_framed_msg+0x2da>
 80199d4:	f81a 3008 	ldrb.w	r3, [sl, r8]
 80199d8:	f1a3 017d 	sub.w	r1, r3, #125	@ 0x7d
 80199dc:	2901      	cmp	r1, #1
 80199de:	f04f 0200 	mov.w	r2, #0
 80199e2:	f63f af3d 	bhi.w	8019860 <uxr_write_framed_msg+0x9c>
 80199e6:	1c51      	adds	r1, r2, #1
 80199e8:	b2c9      	uxtb	r1, r1
 80199ea:	2929      	cmp	r1, #41	@ 0x29
 80199ec:	d8da      	bhi.n	80199a4 <uxr_write_framed_msg+0x1e0>
 80199ee:	18a0      	adds	r0, r4, r2
 80199f0:	4421      	add	r1, r4
 80199f2:	f04f 057d 	mov.w	r5, #125	@ 0x7d
 80199f6:	3202      	adds	r2, #2
 80199f8:	f880 5038 	strb.w	r5, [r0, #56]	@ 0x38
 80199fc:	b2d2      	uxtb	r2, r2
 80199fe:	f083 0020 	eor.w	r0, r3, #32
 8019a02:	f881 0038 	strb.w	r0, [r1, #56]	@ 0x38
 8019a06:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 8019a0a:	e733      	b.n	8019874 <uxr_write_framed_msg+0xb0>
 8019a0c:	18a1      	adds	r1, r4, r2
 8019a0e:	3201      	adds	r2, #1
 8019a10:	4648      	mov	r0, r9
 8019a12:	b2d2      	uxtb	r2, r2
 8019a14:	f881 8038 	strb.w	r8, [r1, #56]	@ 0x38
 8019a18:	f04f 0901 	mov.w	r9, #1
 8019a1c:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 8019a20:	2800      	cmp	r0, #0
 8019a22:	f43f af7b 	beq.w	801991c <uxr_write_framed_msg+0x158>
 8019a26:	2500      	movs	r5, #0
 8019a28:	e002      	b.n	8019a30 <uxr_write_framed_msg+0x26c>
 8019a2a:	2800      	cmp	r0, #0
 8019a2c:	f43f af4f 	beq.w	80198ce <uxr_write_framed_msg+0x10a>
 8019a30:	f105 0138 	add.w	r1, r5, #56	@ 0x38
 8019a34:	1b52      	subs	r2, r2, r5
 8019a36:	465b      	mov	r3, fp
 8019a38:	4421      	add	r1, r4
 8019a3a:	4638      	mov	r0, r7
 8019a3c:	47b0      	blx	r6
 8019a3e:	f894 2062 	ldrb.w	r2, [r4, #98]	@ 0x62
 8019a42:	4405      	add	r5, r0
 8019a44:	4295      	cmp	r5, r2
 8019a46:	d3f0      	bcc.n	8019a2a <uxr_write_framed_msg+0x266>
 8019a48:	f47f af41 	bne.w	80198ce <uxr_write_framed_msg+0x10a>
 8019a4c:	2300      	movs	r3, #0
 8019a4e:	f884 3062 	strb.w	r3, [r4, #98]	@ 0x62
 8019a52:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8019a54:	b298      	uxth	r0, r3
 8019a56:	b003      	add	sp, #12
 8019a58:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019a5c:	217d      	movs	r1, #125	@ 0x7d
 8019a5e:	f082 0220 	eor.w	r2, r2, #32
 8019a62:	f884 1039 	strb.w	r1, [r4, #57]	@ 0x39
 8019a66:	f1a0 017d 	sub.w	r1, r0, #125	@ 0x7d
 8019a6a:	f884 203a 	strb.w	r2, [r4, #58]	@ 0x3a
 8019a6e:	2901      	cmp	r1, #1
 8019a70:	f04f 0203 	mov.w	r2, #3
 8019a74:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 8019a78:	d804      	bhi.n	8019a84 <uxr_write_framed_msg+0x2c0>
 8019a7a:	4611      	mov	r1, r2
 8019a7c:	f04f 0c04 	mov.w	ip, #4
 8019a80:	2205      	movs	r2, #5
 8019a82:	e752      	b.n	801992a <uxr_write_framed_msg+0x166>
 8019a84:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8019a86:	f884 003b 	strb.w	r0, [r4, #59]	@ 0x3b
 8019a8a:	b2dd      	uxtb	r5, r3
 8019a8c:	f1a5 017d 	sub.w	r1, r5, #125	@ 0x7d
 8019a90:	2204      	movs	r2, #4
 8019a92:	2901      	cmp	r1, #1
 8019a94:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 8019a98:	f63f aec0 	bhi.w	801981c <uxr_write_framed_msg+0x58>
 8019a9c:	e758      	b.n	8019950 <uxr_write_framed_msg+0x18c>
 8019a9e:	ea4f 2319 	mov.w	r3, r9, lsr #8
 8019aa2:	fa5f f889 	uxtb.w	r8, r9
 8019aa6:	9301      	str	r3, [sp, #4]
 8019aa8:	2200      	movs	r2, #0
 8019aaa:	e6f5      	b.n	8019898 <uxr_write_framed_msg+0xd4>
 8019aac:	0801dddc 	.word	0x0801dddc

08019ab0 <uxr_framing_read_transport>:
 8019ab0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019ab4:	4604      	mov	r4, r0
 8019ab6:	b083      	sub	sp, #12
 8019ab8:	461f      	mov	r7, r3
 8019aba:	f8dd b034 	ldr.w	fp, [sp, #52]	@ 0x34
 8019abe:	4689      	mov	r9, r1
 8019ac0:	4692      	mov	sl, r2
 8019ac2:	f7f8 fadb 	bl	801207c <uxr_millis>
 8019ac6:	f894 302c 	ldrb.w	r3, [r4, #44]	@ 0x2c
 8019aca:	f894 602d 	ldrb.w	r6, [r4, #45]	@ 0x2d
 8019ace:	42b3      	cmp	r3, r6
 8019ad0:	4680      	mov	r8, r0
 8019ad2:	d061      	beq.n	8019b98 <uxr_framing_read_transport+0xe8>
 8019ad4:	d81c      	bhi.n	8019b10 <uxr_framing_read_transport+0x60>
 8019ad6:	1e75      	subs	r5, r6, #1
 8019ad8:	1aed      	subs	r5, r5, r3
 8019ada:	b2ed      	uxtb	r5, r5
 8019adc:	2600      	movs	r6, #0
 8019ade:	455d      	cmp	r5, fp
 8019ae0:	d81f      	bhi.n	8019b22 <uxr_framing_read_transport+0x72>
 8019ae2:	19ab      	adds	r3, r5, r6
 8019ae4:	455b      	cmp	r3, fp
 8019ae6:	bf84      	itt	hi
 8019ae8:	ebab 0605 	subhi.w	r6, fp, r5
 8019aec:	b2f6      	uxtbhi	r6, r6
 8019aee:	b9ed      	cbnz	r5, 8019b2c <uxr_framing_read_transport+0x7c>
 8019af0:	f04f 0b00 	mov.w	fp, #0
 8019af4:	f7f8 fac2 	bl	801207c <uxr_millis>
 8019af8:	683b      	ldr	r3, [r7, #0]
 8019afa:	eba0 0808 	sub.w	r8, r0, r8
 8019afe:	eba3 0308 	sub.w	r3, r3, r8
 8019b02:	4658      	mov	r0, fp
 8019b04:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8019b08:	603b      	str	r3, [r7, #0]
 8019b0a:	b003      	add	sp, #12
 8019b0c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019b10:	2e00      	cmp	r6, #0
 8019b12:	d049      	beq.n	8019ba8 <uxr_framing_read_transport+0xf8>
 8019b14:	f1c3 052a 	rsb	r5, r3, #42	@ 0x2a
 8019b18:	b2ed      	uxtb	r5, r5
 8019b1a:	3e01      	subs	r6, #1
 8019b1c:	455d      	cmp	r5, fp
 8019b1e:	b2f6      	uxtb	r6, r6
 8019b20:	d9df      	bls.n	8019ae2 <uxr_framing_read_transport+0x32>
 8019b22:	fa5f f58b 	uxtb.w	r5, fp
 8019b26:	2600      	movs	r6, #0
 8019b28:	2d00      	cmp	r5, #0
 8019b2a:	d0e1      	beq.n	8019af0 <uxr_framing_read_transport+0x40>
 8019b2c:	f894 102c 	ldrb.w	r1, [r4, #44]	@ 0x2c
 8019b30:	3102      	adds	r1, #2
 8019b32:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8019b34:	9300      	str	r3, [sp, #0]
 8019b36:	683b      	ldr	r3, [r7, #0]
 8019b38:	4421      	add	r1, r4
 8019b3a:	462a      	mov	r2, r5
 8019b3c:	4650      	mov	r0, sl
 8019b3e:	47c8      	blx	r9
 8019b40:	f894 302c 	ldrb.w	r3, [r4, #44]	@ 0x2c
 8019b44:	4a1a      	ldr	r2, [pc, #104]	@ (8019bb0 <uxr_framing_read_transport+0x100>)
 8019b46:	4403      	add	r3, r0
 8019b48:	0859      	lsrs	r1, r3, #1
 8019b4a:	fba2 2101 	umull	r2, r1, r2, r1
 8019b4e:	0889      	lsrs	r1, r1, #2
 8019b50:	222a      	movs	r2, #42	@ 0x2a
 8019b52:	fb02 3111 	mls	r1, r2, r1, r3
 8019b56:	4683      	mov	fp, r0
 8019b58:	f884 102c 	strb.w	r1, [r4, #44]	@ 0x2c
 8019b5c:	2800      	cmp	r0, #0
 8019b5e:	d0c7      	beq.n	8019af0 <uxr_framing_read_transport+0x40>
 8019b60:	42a8      	cmp	r0, r5
 8019b62:	d1c7      	bne.n	8019af4 <uxr_framing_read_transport+0x44>
 8019b64:	2e00      	cmp	r6, #0
 8019b66:	d0c5      	beq.n	8019af4 <uxr_framing_read_transport+0x44>
 8019b68:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8019b6a:	9300      	str	r3, [sp, #0]
 8019b6c:	3102      	adds	r1, #2
 8019b6e:	4632      	mov	r2, r6
 8019b70:	4421      	add	r1, r4
 8019b72:	2300      	movs	r3, #0
 8019b74:	4650      	mov	r0, sl
 8019b76:	47c8      	blx	r9
 8019b78:	f894 102c 	ldrb.w	r1, [r4, #44]	@ 0x2c
 8019b7c:	4a0c      	ldr	r2, [pc, #48]	@ (8019bb0 <uxr_framing_read_transport+0x100>)
 8019b7e:	180b      	adds	r3, r1, r0
 8019b80:	0859      	lsrs	r1, r3, #1
 8019b82:	fba2 1201 	umull	r1, r2, r2, r1
 8019b86:	0892      	lsrs	r2, r2, #2
 8019b88:	212a      	movs	r1, #42	@ 0x2a
 8019b8a:	fb01 3312 	mls	r3, r1, r2, r3
 8019b8e:	eb00 0b05 	add.w	fp, r0, r5
 8019b92:	f884 302c 	strb.w	r3, [r4, #44]	@ 0x2c
 8019b96:	e7ad      	b.n	8019af4 <uxr_framing_read_transport+0x44>
 8019b98:	2600      	movs	r6, #0
 8019b9a:	f1bb 0f28 	cmp.w	fp, #40	@ 0x28
 8019b9e:	85a6      	strh	r6, [r4, #44]	@ 0x2c
 8019ba0:	d9bf      	bls.n	8019b22 <uxr_framing_read_transport+0x72>
 8019ba2:	2102      	movs	r1, #2
 8019ba4:	2529      	movs	r5, #41	@ 0x29
 8019ba6:	e7c4      	b.n	8019b32 <uxr_framing_read_transport+0x82>
 8019ba8:	f1c3 0529 	rsb	r5, r3, #41	@ 0x29
 8019bac:	b2ed      	uxtb	r5, r5
 8019bae:	e796      	b.n	8019ade <uxr_framing_read_transport+0x2e>
 8019bb0:	30c30c31 	.word	0x30c30c31

08019bb4 <uxr_read_framed_msg>:
 8019bb4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019bb8:	461e      	mov	r6, r3
 8019bba:	f890 502c 	ldrb.w	r5, [r0, #44]	@ 0x2c
 8019bbe:	f890 302d 	ldrb.w	r3, [r0, #45]	@ 0x2d
 8019bc2:	429d      	cmp	r5, r3
 8019bc4:	b083      	sub	sp, #12
 8019bc6:	4604      	mov	r4, r0
 8019bc8:	4688      	mov	r8, r1
 8019bca:	4691      	mov	r9, r2
 8019bcc:	f000 8188 	beq.w	8019ee0 <uxr_read_framed_msg+0x32c>
 8019bd0:	7823      	ldrb	r3, [r4, #0]
 8019bd2:	4dc1      	ldr	r5, [pc, #772]	@ (8019ed8 <uxr_read_framed_msg+0x324>)
 8019bd4:	4fc1      	ldr	r7, [pc, #772]	@ (8019edc <uxr_read_framed_msg+0x328>)
 8019bd6:	2b07      	cmp	r3, #7
 8019bd8:	d8fd      	bhi.n	8019bd6 <uxr_read_framed_msg+0x22>
 8019bda:	e8df f013 	tbh	[pc, r3, lsl #1]
 8019bde:	0115      	.short	0x0115
 8019be0:	00d600f6 	.word	0x00d600f6
 8019be4:	009000b9 	.word	0x009000b9
 8019be8:	0030004d 	.word	0x0030004d
 8019bec:	0008      	.short	0x0008
 8019bee:	f894 102c 	ldrb.w	r1, [r4, #44]	@ 0x2c
 8019bf2:	f894 302d 	ldrb.w	r3, [r4, #45]	@ 0x2d
 8019bf6:	4299      	cmp	r1, r3
 8019bf8:	f000 814a 	beq.w	8019e90 <uxr_read_framed_msg+0x2dc>
 8019bfc:	18e2      	adds	r2, r4, r3
 8019bfe:	7892      	ldrb	r2, [r2, #2]
 8019c00:	2a7d      	cmp	r2, #125	@ 0x7d
 8019c02:	f000 8199 	beq.w	8019f38 <uxr_read_framed_msg+0x384>
 8019c06:	3301      	adds	r3, #1
 8019c08:	0858      	lsrs	r0, r3, #1
 8019c0a:	fba5 1000 	umull	r1, r0, r5, r0
 8019c0e:	0880      	lsrs	r0, r0, #2
 8019c10:	212a      	movs	r1, #42	@ 0x2a
 8019c12:	fb01 3310 	mls	r3, r1, r0, r3
 8019c16:	2a7e      	cmp	r2, #126	@ 0x7e
 8019c18:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 8019c1c:	f000 8252 	beq.w	801a0c4 <uxr_read_framed_msg+0x510>
 8019c20:	8ea3      	ldrh	r3, [r4, #52]	@ 0x34
 8019c22:	8ee1      	ldrh	r1, [r4, #54]	@ 0x36
 8019c24:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8019c28:	b29b      	uxth	r3, r3
 8019c2a:	2200      	movs	r2, #0
 8019c2c:	4299      	cmp	r1, r3
 8019c2e:	86a3      	strh	r3, [r4, #52]	@ 0x34
 8019c30:	7022      	strb	r2, [r4, #0]
 8019c32:	f000 8179 	beq.w	8019f28 <uxr_read_framed_msg+0x374>
 8019c36:	2000      	movs	r0, #0
 8019c38:	b003      	add	sp, #12
 8019c3a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019c3e:	f894 102c 	ldrb.w	r1, [r4, #44]	@ 0x2c
 8019c42:	f894 302d 	ldrb.w	r3, [r4, #45]	@ 0x2d
 8019c46:	4299      	cmp	r1, r3
 8019c48:	f000 8131 	beq.w	8019eae <uxr_read_framed_msg+0x2fa>
 8019c4c:	18e2      	adds	r2, r4, r3
 8019c4e:	7890      	ldrb	r0, [r2, #2]
 8019c50:	287d      	cmp	r0, #125	@ 0x7d
 8019c52:	f000 8190 	beq.w	8019f76 <uxr_read_framed_msg+0x3c2>
 8019c56:	3301      	adds	r3, #1
 8019c58:	085a      	lsrs	r2, r3, #1
 8019c5a:	fba5 1202 	umull	r1, r2, r5, r2
 8019c5e:	0892      	lsrs	r2, r2, #2
 8019c60:	212a      	movs	r1, #42	@ 0x2a
 8019c62:	fb01 3312 	mls	r3, r1, r2, r3
 8019c66:	287e      	cmp	r0, #126	@ 0x7e
 8019c68:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 8019c6c:	f000 821a 	beq.w	801a0a4 <uxr_read_framed_msg+0x4f0>
 8019c70:	2307      	movs	r3, #7
 8019c72:	86a0      	strh	r0, [r4, #52]	@ 0x34
 8019c74:	7023      	strb	r3, [r4, #0]
 8019c76:	e7ae      	b.n	8019bd6 <uxr_read_framed_msg+0x22>
 8019c78:	8e63      	ldrh	r3, [r4, #50]	@ 0x32
 8019c7a:	f8b4 e030 	ldrh.w	lr, [r4, #48]	@ 0x30
 8019c7e:	459e      	cmp	lr, r3
 8019c80:	d938      	bls.n	8019cf4 <uxr_read_framed_msg+0x140>
 8019c82:	ee07 8a90 	vmov	s15, r8
 8019c86:	212a      	movs	r1, #42	@ 0x2a
 8019c88:	e020      	b.n	8019ccc <uxr_read_framed_msg+0x118>
 8019c8a:	f89b c002 	ldrb.w	ip, [fp, #2]
 8019c8e:	f1bc 0f7d 	cmp.w	ip, #125	@ 0x7d
 8019c92:	f000 80d4 	beq.w	8019e3e <uxr_read_framed_msg+0x28a>
 8019c96:	f1bc 0f7e 	cmp.w	ip, #126	@ 0x7e
 8019c9a:	f884 202d 	strb.w	r2, [r4, #45]	@ 0x2d
 8019c9e:	f000 8219 	beq.w	801a0d4 <uxr_read_framed_msg+0x520>
 8019ca2:	f806 c003 	strb.w	ip, [r6, r3]
 8019ca6:	f8b4 a036 	ldrh.w	sl, [r4, #54]	@ 0x36
 8019caa:	8e63      	ldrh	r3, [r4, #50]	@ 0x32
 8019cac:	f8b4 e030 	ldrh.w	lr, [r4, #48]	@ 0x30
 8019cb0:	ea8a 000c 	eor.w	r0, sl, ip
 8019cb4:	b2c0      	uxtb	r0, r0
 8019cb6:	3301      	adds	r3, #1
 8019cb8:	f837 2010 	ldrh.w	r2, [r7, r0, lsl #1]
 8019cbc:	b29b      	uxth	r3, r3
 8019cbe:	ea82 221a 	eor.w	r2, r2, sl, lsr #8
 8019cc2:	4573      	cmp	r3, lr
 8019cc4:	8663      	strh	r3, [r4, #50]	@ 0x32
 8019cc6:	86e2      	strh	r2, [r4, #54]	@ 0x36
 8019cc8:	f080 8120 	bcs.w	8019f0c <uxr_read_framed_msg+0x358>
 8019ccc:	f894 002d 	ldrb.w	r0, [r4, #45]	@ 0x2d
 8019cd0:	f894 a02c 	ldrb.w	sl, [r4, #44]	@ 0x2c
 8019cd4:	f100 0c01 	add.w	ip, r0, #1
 8019cd8:	ea4f 025c 	mov.w	r2, ip, lsr #1
 8019cdc:	fba5 8202 	umull	r8, r2, r5, r2
 8019ce0:	0892      	lsrs	r2, r2, #2
 8019ce2:	4582      	cmp	sl, r0
 8019ce4:	eb04 0b00 	add.w	fp, r4, r0
 8019ce8:	fb01 c212 	mls	r2, r1, r2, ip
 8019cec:	d1cd      	bne.n	8019c8a <uxr_read_framed_msg+0xd6>
 8019cee:	ee17 8a90 	vmov	r8, s15
 8019cf2:	459e      	cmp	lr, r3
 8019cf4:	f040 8111 	bne.w	8019f1a <uxr_read_framed_msg+0x366>
 8019cf8:	2306      	movs	r3, #6
 8019cfa:	7023      	strb	r3, [r4, #0]
 8019cfc:	e76b      	b.n	8019bd6 <uxr_read_framed_msg+0x22>
 8019cfe:	f894 002c 	ldrb.w	r0, [r4, #44]	@ 0x2c
 8019d02:	f894 302d 	ldrb.w	r3, [r4, #45]	@ 0x2d
 8019d06:	4298      	cmp	r0, r3
 8019d08:	f000 80c2 	beq.w	8019e90 <uxr_read_framed_msg+0x2dc>
 8019d0c:	18e2      	adds	r2, r4, r3
 8019d0e:	7891      	ldrb	r1, [r2, #2]
 8019d10:	297d      	cmp	r1, #125	@ 0x7d
 8019d12:	f000 814c 	beq.w	8019fae <uxr_read_framed_msg+0x3fa>
 8019d16:	3301      	adds	r3, #1
 8019d18:	085a      	lsrs	r2, r3, #1
 8019d1a:	fba5 0202 	umull	r0, r2, r5, r2
 8019d1e:	0892      	lsrs	r2, r2, #2
 8019d20:	202a      	movs	r0, #42	@ 0x2a
 8019d22:	fb00 3312 	mls	r3, r0, r2, r3
 8019d26:	297e      	cmp	r1, #126	@ 0x7e
 8019d28:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 8019d2c:	f000 81ca 	beq.w	801a0c4 <uxr_read_framed_msg+0x510>
 8019d30:	8e23      	ldrh	r3, [r4, #48]	@ 0x30
 8019d32:	eb03 2301 	add.w	r3, r3, r1, lsl #8
 8019d36:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8019d38:	b29b      	uxth	r3, r3
 8019d3a:	2000      	movs	r0, #0
 8019d3c:	428b      	cmp	r3, r1
 8019d3e:	8623      	strh	r3, [r4, #48]	@ 0x30
 8019d40:	8660      	strh	r0, [r4, #50]	@ 0x32
 8019d42:	86e0      	strh	r0, [r4, #54]	@ 0x36
 8019d44:	f240 80df 	bls.w	8019f06 <uxr_read_framed_msg+0x352>
 8019d48:	7020      	strb	r0, [r4, #0]
 8019d4a:	b003      	add	sp, #12
 8019d4c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019d50:	f894 102c 	ldrb.w	r1, [r4, #44]	@ 0x2c
 8019d54:	f894 302d 	ldrb.w	r3, [r4, #45]	@ 0x2d
 8019d58:	4299      	cmp	r1, r3
 8019d5a:	f000 80a8 	beq.w	8019eae <uxr_read_framed_msg+0x2fa>
 8019d5e:	18e2      	adds	r2, r4, r3
 8019d60:	7890      	ldrb	r0, [r2, #2]
 8019d62:	287d      	cmp	r0, #125	@ 0x7d
 8019d64:	f000 8164 	beq.w	801a030 <uxr_read_framed_msg+0x47c>
 8019d68:	3301      	adds	r3, #1
 8019d6a:	085a      	lsrs	r2, r3, #1
 8019d6c:	fba5 1202 	umull	r1, r2, r5, r2
 8019d70:	0892      	lsrs	r2, r2, #2
 8019d72:	212a      	movs	r1, #42	@ 0x2a
 8019d74:	fb01 3312 	mls	r3, r1, r2, r3
 8019d78:	287e      	cmp	r0, #126	@ 0x7e
 8019d7a:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 8019d7e:	f000 8191 	beq.w	801a0a4 <uxr_read_framed_msg+0x4f0>
 8019d82:	2304      	movs	r3, #4
 8019d84:	8620      	strh	r0, [r4, #48]	@ 0x30
 8019d86:	7023      	strb	r3, [r4, #0]
 8019d88:	e725      	b.n	8019bd6 <uxr_read_framed_msg+0x22>
 8019d8a:	f894 002c 	ldrb.w	r0, [r4, #44]	@ 0x2c
 8019d8e:	f894 202d 	ldrb.w	r2, [r4, #45]	@ 0x2d
 8019d92:	4290      	cmp	r0, r2
 8019d94:	f000 80b3 	beq.w	8019efe <uxr_read_framed_msg+0x34a>
 8019d98:	18a3      	adds	r3, r4, r2
 8019d9a:	7899      	ldrb	r1, [r3, #2]
 8019d9c:	297d      	cmp	r1, #125	@ 0x7d
 8019d9e:	f000 8164 	beq.w	801a06a <uxr_read_framed_msg+0x4b6>
 8019da2:	3201      	adds	r2, #1
 8019da4:	0850      	lsrs	r0, r2, #1
 8019da6:	fba5 3000 	umull	r3, r0, r5, r0
 8019daa:	0880      	lsrs	r0, r0, #2
 8019dac:	232a      	movs	r3, #42	@ 0x2a
 8019dae:	fb03 2210 	mls	r2, r3, r0, r2
 8019db2:	297e      	cmp	r1, #126	@ 0x7e
 8019db4:	f884 202d 	strb.w	r2, [r4, #45]	@ 0x2d
 8019db8:	f000 8188 	beq.w	801a0cc <uxr_read_framed_msg+0x518>
 8019dbc:	7863      	ldrb	r3, [r4, #1]
 8019dbe:	428b      	cmp	r3, r1
 8019dc0:	bf0c      	ite	eq
 8019dc2:	2303      	moveq	r3, #3
 8019dc4:	2300      	movne	r3, #0
 8019dc6:	7023      	strb	r3, [r4, #0]
 8019dc8:	e705      	b.n	8019bd6 <uxr_read_framed_msg+0x22>
 8019dca:	f894 102c 	ldrb.w	r1, [r4, #44]	@ 0x2c
 8019dce:	f894 302d 	ldrb.w	r3, [r4, #45]	@ 0x2d
 8019dd2:	2200      	movs	r2, #0
 8019dd4:	4299      	cmp	r1, r3
 8019dd6:	f884 202e 	strb.w	r2, [r4, #46]	@ 0x2e
 8019dda:	d06c      	beq.n	8019eb6 <uxr_read_framed_msg+0x302>
 8019ddc:	18e2      	adds	r2, r4, r3
 8019dde:	7890      	ldrb	r0, [r2, #2]
 8019de0:	287d      	cmp	r0, #125	@ 0x7d
 8019de2:	f000 8101 	beq.w	8019fe8 <uxr_read_framed_msg+0x434>
 8019de6:	3301      	adds	r3, #1
 8019de8:	085a      	lsrs	r2, r3, #1
 8019dea:	fba5 1202 	umull	r1, r2, r5, r2
 8019dee:	0892      	lsrs	r2, r2, #2
 8019df0:	212a      	movs	r1, #42	@ 0x2a
 8019df2:	fb01 3312 	mls	r3, r1, r2, r3
 8019df6:	287e      	cmp	r0, #126	@ 0x7e
 8019df8:	f884 002e 	strb.w	r0, [r4, #46]	@ 0x2e
 8019dfc:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 8019e00:	d059      	beq.n	8019eb6 <uxr_read_framed_msg+0x302>
 8019e02:	2302      	movs	r3, #2
 8019e04:	7023      	strb	r3, [r4, #0]
 8019e06:	e6e6      	b.n	8019bd6 <uxr_read_framed_msg+0x22>
 8019e08:	f894 a02c 	ldrb.w	sl, [r4, #44]	@ 0x2c
 8019e0c:	f894 202d 	ldrb.w	r2, [r4, #45]	@ 0x2d
 8019e10:	f04f 0e2a 	mov.w	lr, #42	@ 0x2a
 8019e14:	1c51      	adds	r1, r2, #1
 8019e16:	084b      	lsrs	r3, r1, #1
 8019e18:	fba5 c303 	umull	ip, r3, r5, r3
 8019e1c:	089b      	lsrs	r3, r3, #2
 8019e1e:	fb0e 1313 	mls	r3, lr, r3, r1
 8019e22:	4592      	cmp	sl, r2
 8019e24:	eb04 0002 	add.w	r0, r4, r2
 8019e28:	b2da      	uxtb	r2, r3
 8019e2a:	f43f af04 	beq.w	8019c36 <uxr_read_framed_msg+0x82>
 8019e2e:	7883      	ldrb	r3, [r0, #2]
 8019e30:	f884 202d 	strb.w	r2, [r4, #45]	@ 0x2d
 8019e34:	2b7e      	cmp	r3, #126	@ 0x7e
 8019e36:	d1ed      	bne.n	8019e14 <uxr_read_framed_msg+0x260>
 8019e38:	2301      	movs	r3, #1
 8019e3a:	7023      	strb	r3, [r4, #0]
 8019e3c:	e6cb      	b.n	8019bd6 <uxr_read_framed_msg+0x22>
 8019e3e:	f100 0c01 	add.w	ip, r0, #1
 8019e42:	ea4f 025c 	mov.w	r2, ip, lsr #1
 8019e46:	fba5 8202 	umull	r8, r2, r5, r2
 8019e4a:	0892      	lsrs	r2, r2, #2
 8019e4c:	fb01 c212 	mls	r2, r1, r2, ip
 8019e50:	eb04 0c02 	add.w	ip, r4, r2
 8019e54:	b2d2      	uxtb	r2, r2
 8019e56:	4592      	cmp	sl, r2
 8019e58:	f100 0002 	add.w	r0, r0, #2
 8019e5c:	f43f af47 	beq.w	8019cee <uxr_read_framed_msg+0x13a>
 8019e60:	0842      	lsrs	r2, r0, #1
 8019e62:	f89c a002 	ldrb.w	sl, [ip, #2]
 8019e66:	fba5 8202 	umull	r8, r2, r5, r2
 8019e6a:	0892      	lsrs	r2, r2, #2
 8019e6c:	fb01 0012 	mls	r0, r1, r2, r0
 8019e70:	f1ba 0f7e 	cmp.w	sl, #126	@ 0x7e
 8019e74:	f08a 0c20 	eor.w	ip, sl, #32
 8019e78:	f884 002d 	strb.w	r0, [r4, #45]	@ 0x2d
 8019e7c:	f47f af11 	bne.w	8019ca2 <uxr_read_framed_msg+0xee>
 8019e80:	459e      	cmp	lr, r3
 8019e82:	ee17 8a90 	vmov	r8, s15
 8019e86:	f43f af37 	beq.w	8019cf8 <uxr_read_framed_msg+0x144>
 8019e8a:	2301      	movs	r3, #1
 8019e8c:	7023      	strb	r3, [r4, #0]
 8019e8e:	e6a2      	b.n	8019bd6 <uxr_read_framed_msg+0x22>
 8019e90:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8019e92:	9300      	str	r3, [sp, #0]
 8019e94:	2301      	movs	r3, #1
 8019e96:	9301      	str	r3, [sp, #4]
 8019e98:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8019e9a:	464a      	mov	r2, r9
 8019e9c:	4641      	mov	r1, r8
 8019e9e:	4620      	mov	r0, r4
 8019ea0:	f7ff fe06 	bl	8019ab0 <uxr_framing_read_transport>
 8019ea4:	2800      	cmp	r0, #0
 8019ea6:	f43f aec6 	beq.w	8019c36 <uxr_read_framed_msg+0x82>
 8019eaa:	7823      	ldrb	r3, [r4, #0]
 8019eac:	e693      	b.n	8019bd6 <uxr_read_framed_msg+0x22>
 8019eae:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8019eb0:	9300      	str	r3, [sp, #0]
 8019eb2:	2302      	movs	r3, #2
 8019eb4:	e7ef      	b.n	8019e96 <uxr_read_framed_msg+0x2e2>
 8019eb6:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8019eb8:	9300      	str	r3, [sp, #0]
 8019eba:	2304      	movs	r3, #4
 8019ebc:	9301      	str	r3, [sp, #4]
 8019ebe:	464a      	mov	r2, r9
 8019ec0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8019ec2:	4641      	mov	r1, r8
 8019ec4:	4620      	mov	r0, r4
 8019ec6:	f7ff fdf3 	bl	8019ab0 <uxr_framing_read_transport>
 8019eca:	2800      	cmp	r0, #0
 8019ecc:	d1ed      	bne.n	8019eaa <uxr_read_framed_msg+0x2f6>
 8019ece:	f894 302e 	ldrb.w	r3, [r4, #46]	@ 0x2e
 8019ed2:	2b7e      	cmp	r3, #126	@ 0x7e
 8019ed4:	d0e9      	beq.n	8019eaa <uxr_read_framed_msg+0x2f6>
 8019ed6:	e6ae      	b.n	8019c36 <uxr_read_framed_msg+0x82>
 8019ed8:	30c30c31 	.word	0x30c30c31
 8019edc:	0801dddc 	.word	0x0801dddc
 8019ee0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8019ee2:	9300      	str	r3, [sp, #0]
 8019ee4:	2305      	movs	r3, #5
 8019ee6:	9301      	str	r3, [sp, #4]
 8019ee8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8019eea:	f7ff fde1 	bl	8019ab0 <uxr_framing_read_transport>
 8019eee:	f894 202d 	ldrb.w	r2, [r4, #45]	@ 0x2d
 8019ef2:	f894 302c 	ldrb.w	r3, [r4, #44]	@ 0x2c
 8019ef6:	429a      	cmp	r2, r3
 8019ef8:	f43f ae9d 	beq.w	8019c36 <uxr_read_framed_msg+0x82>
 8019efc:	e668      	b.n	8019bd0 <uxr_read_framed_msg+0x1c>
 8019efe:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8019f00:	9300      	str	r3, [sp, #0]
 8019f02:	2303      	movs	r3, #3
 8019f04:	e7c7      	b.n	8019e96 <uxr_read_framed_msg+0x2e2>
 8019f06:	2305      	movs	r3, #5
 8019f08:	7023      	strb	r3, [r4, #0]
 8019f0a:	e664      	b.n	8019bd6 <uxr_read_framed_msg+0x22>
 8019f0c:	ee17 8a90 	vmov	r8, s15
 8019f10:	f43f aef2 	beq.w	8019cf8 <uxr_read_framed_msg+0x144>
 8019f14:	f1bc 0f7e 	cmp.w	ip, #126	@ 0x7e
 8019f18:	d08e      	beq.n	8019e38 <uxr_read_framed_msg+0x284>
 8019f1a:	ebae 0303 	sub.w	r3, lr, r3
 8019f1e:	3302      	adds	r3, #2
 8019f20:	9301      	str	r3, [sp, #4]
 8019f22:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8019f24:	9300      	str	r3, [sp, #0]
 8019f26:	e7b7      	b.n	8019e98 <uxr_read_framed_msg+0x2e4>
 8019f28:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8019f2a:	f894 302e 	ldrb.w	r3, [r4, #46]	@ 0x2e
 8019f2e:	7013      	strb	r3, [r2, #0]
 8019f30:	8e20      	ldrh	r0, [r4, #48]	@ 0x30
 8019f32:	b003      	add	sp, #12
 8019f34:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019f38:	f103 0c01 	add.w	ip, r3, #1
 8019f3c:	ea4f 025c 	mov.w	r2, ip, lsr #1
 8019f40:	fba5 0202 	umull	r0, r2, r5, r2
 8019f44:	0892      	lsrs	r2, r2, #2
 8019f46:	202a      	movs	r0, #42	@ 0x2a
 8019f48:	fb00 c212 	mls	r2, r0, r2, ip
 8019f4c:	fa5f fc82 	uxtb.w	ip, r2
 8019f50:	4561      	cmp	r1, ip
 8019f52:	d09d      	beq.n	8019e90 <uxr_read_framed_msg+0x2dc>
 8019f54:	3302      	adds	r3, #2
 8019f56:	4422      	add	r2, r4
 8019f58:	0859      	lsrs	r1, r3, #1
 8019f5a:	7892      	ldrb	r2, [r2, #2]
 8019f5c:	fba5 c101 	umull	ip, r1, r5, r1
 8019f60:	0889      	lsrs	r1, r1, #2
 8019f62:	fb00 3311 	mls	r3, r0, r1, r3
 8019f66:	2a7e      	cmp	r2, #126	@ 0x7e
 8019f68:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 8019f6c:	f000 80aa 	beq.w	801a0c4 <uxr_read_framed_msg+0x510>
 8019f70:	f082 0220 	eor.w	r2, r2, #32
 8019f74:	e654      	b.n	8019c20 <uxr_read_framed_msg+0x6c>
 8019f76:	1c58      	adds	r0, r3, #1
 8019f78:	0842      	lsrs	r2, r0, #1
 8019f7a:	fba5 c202 	umull	ip, r2, r5, r2
 8019f7e:	0892      	lsrs	r2, r2, #2
 8019f80:	f04f 0c2a 	mov.w	ip, #42	@ 0x2a
 8019f84:	fb0c 0212 	mls	r2, ip, r2, r0
 8019f88:	b2d0      	uxtb	r0, r2
 8019f8a:	4281      	cmp	r1, r0
 8019f8c:	d08f      	beq.n	8019eae <uxr_read_framed_msg+0x2fa>
 8019f8e:	4422      	add	r2, r4
 8019f90:	3302      	adds	r3, #2
 8019f92:	7890      	ldrb	r0, [r2, #2]
 8019f94:	085a      	lsrs	r2, r3, #1
 8019f96:	fba5 1202 	umull	r1, r2, r5, r2
 8019f9a:	0892      	lsrs	r2, r2, #2
 8019f9c:	fb0c 3312 	mls	r3, ip, r2, r3
 8019fa0:	287e      	cmp	r0, #126	@ 0x7e
 8019fa2:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 8019fa6:	d07d      	beq.n	801a0a4 <uxr_read_framed_msg+0x4f0>
 8019fa8:	f080 0020 	eor.w	r0, r0, #32
 8019fac:	e660      	b.n	8019c70 <uxr_read_framed_msg+0xbc>
 8019fae:	1c59      	adds	r1, r3, #1
 8019fb0:	084a      	lsrs	r2, r1, #1
 8019fb2:	fba5 c202 	umull	ip, r2, r5, r2
 8019fb6:	0892      	lsrs	r2, r2, #2
 8019fb8:	f04f 0c2a 	mov.w	ip, #42	@ 0x2a
 8019fbc:	fb0c 1212 	mls	r2, ip, r2, r1
 8019fc0:	b2d1      	uxtb	r1, r2
 8019fc2:	4288      	cmp	r0, r1
 8019fc4:	f43f af64 	beq.w	8019e90 <uxr_read_framed_msg+0x2dc>
 8019fc8:	4422      	add	r2, r4
 8019fca:	3302      	adds	r3, #2
 8019fcc:	7891      	ldrb	r1, [r2, #2]
 8019fce:	085a      	lsrs	r2, r3, #1
 8019fd0:	fba5 0202 	umull	r0, r2, r5, r2
 8019fd4:	0892      	lsrs	r2, r2, #2
 8019fd6:	fb0c 3312 	mls	r3, ip, r2, r3
 8019fda:	297e      	cmp	r1, #126	@ 0x7e
 8019fdc:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 8019fe0:	d070      	beq.n	801a0c4 <uxr_read_framed_msg+0x510>
 8019fe2:	f081 0120 	eor.w	r1, r1, #32
 8019fe6:	e6a3      	b.n	8019d30 <uxr_read_framed_msg+0x17c>
 8019fe8:	f103 0c01 	add.w	ip, r3, #1
 8019fec:	ea4f 025c 	mov.w	r2, ip, lsr #1
 8019ff0:	fba5 0202 	umull	r0, r2, r5, r2
 8019ff4:	0892      	lsrs	r2, r2, #2
 8019ff6:	202a      	movs	r0, #42	@ 0x2a
 8019ff8:	fb00 c212 	mls	r2, r0, r2, ip
 8019ffc:	fa5f fc82 	uxtb.w	ip, r2
 801a000:	4561      	cmp	r1, ip
 801a002:	f43f af58 	beq.w	8019eb6 <uxr_read_framed_msg+0x302>
 801a006:	4422      	add	r2, r4
 801a008:	3302      	adds	r3, #2
 801a00a:	7891      	ldrb	r1, [r2, #2]
 801a00c:	f884 102e 	strb.w	r1, [r4, #46]	@ 0x2e
 801a010:	085a      	lsrs	r2, r3, #1
 801a012:	fba5 c202 	umull	ip, r2, r5, r2
 801a016:	0892      	lsrs	r2, r2, #2
 801a018:	fb00 3312 	mls	r3, r0, r2, r3
 801a01c:	297e      	cmp	r1, #126	@ 0x7e
 801a01e:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 801a022:	f43f af48 	beq.w	8019eb6 <uxr_read_framed_msg+0x302>
 801a026:	f081 0120 	eor.w	r1, r1, #32
 801a02a:	f884 102e 	strb.w	r1, [r4, #46]	@ 0x2e
 801a02e:	e6e8      	b.n	8019e02 <uxr_read_framed_msg+0x24e>
 801a030:	1c58      	adds	r0, r3, #1
 801a032:	0842      	lsrs	r2, r0, #1
 801a034:	fba5 c202 	umull	ip, r2, r5, r2
 801a038:	0892      	lsrs	r2, r2, #2
 801a03a:	f04f 0c2a 	mov.w	ip, #42	@ 0x2a
 801a03e:	fb0c 0212 	mls	r2, ip, r2, r0
 801a042:	b2d0      	uxtb	r0, r2
 801a044:	4281      	cmp	r1, r0
 801a046:	f43f af32 	beq.w	8019eae <uxr_read_framed_msg+0x2fa>
 801a04a:	4422      	add	r2, r4
 801a04c:	3302      	adds	r3, #2
 801a04e:	7890      	ldrb	r0, [r2, #2]
 801a050:	085a      	lsrs	r2, r3, #1
 801a052:	fba5 1202 	umull	r1, r2, r5, r2
 801a056:	0892      	lsrs	r2, r2, #2
 801a058:	fb0c 3312 	mls	r3, ip, r2, r3
 801a05c:	287e      	cmp	r0, #126	@ 0x7e
 801a05e:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 801a062:	d01f      	beq.n	801a0a4 <uxr_read_framed_msg+0x4f0>
 801a064:	f080 0020 	eor.w	r0, r0, #32
 801a068:	e68b      	b.n	8019d82 <uxr_read_framed_msg+0x1ce>
 801a06a:	1c51      	adds	r1, r2, #1
 801a06c:	084b      	lsrs	r3, r1, #1
 801a06e:	fba5 c303 	umull	ip, r3, r5, r3
 801a072:	089b      	lsrs	r3, r3, #2
 801a074:	f04f 0c2a 	mov.w	ip, #42	@ 0x2a
 801a078:	fb0c 1313 	mls	r3, ip, r3, r1
 801a07c:	b2d9      	uxtb	r1, r3
 801a07e:	4288      	cmp	r0, r1
 801a080:	f43f af3d 	beq.w	8019efe <uxr_read_framed_msg+0x34a>
 801a084:	3202      	adds	r2, #2
 801a086:	4423      	add	r3, r4
 801a088:	0850      	lsrs	r0, r2, #1
 801a08a:	789b      	ldrb	r3, [r3, #2]
 801a08c:	fba5 1000 	umull	r1, r0, r5, r0
 801a090:	0880      	lsrs	r0, r0, #2
 801a092:	fb0c 2210 	mls	r2, ip, r0, r2
 801a096:	2b7e      	cmp	r3, #126	@ 0x7e
 801a098:	f884 202d 	strb.w	r2, [r4, #45]	@ 0x2d
 801a09c:	d016      	beq.n	801a0cc <uxr_read_framed_msg+0x518>
 801a09e:	f083 0120 	eor.w	r1, r3, #32
 801a0a2:	e68b      	b.n	8019dbc <uxr_read_framed_msg+0x208>
 801a0a4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801a0a6:	9300      	str	r3, [sp, #0]
 801a0a8:	2302      	movs	r3, #2
 801a0aa:	9301      	str	r3, [sp, #4]
 801a0ac:	464a      	mov	r2, r9
 801a0ae:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801a0b0:	4641      	mov	r1, r8
 801a0b2:	4620      	mov	r0, r4
 801a0b4:	f7ff fcfc 	bl	8019ab0 <uxr_framing_read_transport>
 801a0b8:	2800      	cmp	r0, #0
 801a0ba:	f47f aef6 	bne.w	8019eaa <uxr_read_framed_msg+0x2f6>
 801a0be:	2301      	movs	r3, #1
 801a0c0:	7023      	strb	r3, [r4, #0]
 801a0c2:	e588      	b.n	8019bd6 <uxr_read_framed_msg+0x22>
 801a0c4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801a0c6:	9300      	str	r3, [sp, #0]
 801a0c8:	2301      	movs	r3, #1
 801a0ca:	e7ee      	b.n	801a0aa <uxr_read_framed_msg+0x4f6>
 801a0cc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801a0ce:	9300      	str	r3, [sp, #0]
 801a0d0:	2303      	movs	r3, #3
 801a0d2:	e7ea      	b.n	801a0aa <uxr_read_framed_msg+0x4f6>
 801a0d4:	ee17 8a90 	vmov	r8, s15
 801a0d8:	e6ae      	b.n	8019e38 <uxr_read_framed_msg+0x284>
 801a0da:	bf00      	nop

0801a0dc <rcl_get_default_domain_id>:
 801a0dc:	b530      	push	{r4, r5, lr}
 801a0de:	b083      	sub	sp, #12
 801a0e0:	2300      	movs	r3, #0
 801a0e2:	9300      	str	r3, [sp, #0]
 801a0e4:	b1d0      	cbz	r0, 801a11c <rcl_get_default_domain_id+0x40>
 801a0e6:	4604      	mov	r4, r0
 801a0e8:	4669      	mov	r1, sp
 801a0ea:	4815      	ldr	r0, [pc, #84]	@ (801a140 <rcl_get_default_domain_id+0x64>)
 801a0ec:	f7fc fa44 	bl	8016578 <rcutils_get_env>
 801a0f0:	4602      	mov	r2, r0
 801a0f2:	b110      	cbz	r0, 801a0fa <rcl_get_default_domain_id+0x1e>
 801a0f4:	2001      	movs	r0, #1
 801a0f6:	b003      	add	sp, #12
 801a0f8:	bd30      	pop	{r4, r5, pc}
 801a0fa:	9b00      	ldr	r3, [sp, #0]
 801a0fc:	b18b      	cbz	r3, 801a122 <rcl_get_default_domain_id+0x46>
 801a0fe:	7818      	ldrb	r0, [r3, #0]
 801a100:	2800      	cmp	r0, #0
 801a102:	d0f8      	beq.n	801a0f6 <rcl_get_default_domain_id+0x1a>
 801a104:	a901      	add	r1, sp, #4
 801a106:	4618      	mov	r0, r3
 801a108:	9201      	str	r2, [sp, #4]
 801a10a:	f000 ff49 	bl	801afa0 <strtoul>
 801a10e:	4605      	mov	r5, r0
 801a110:	b150      	cbz	r0, 801a128 <rcl_get_default_domain_id+0x4c>
 801a112:	1c43      	adds	r3, r0, #1
 801a114:	d00d      	beq.n	801a132 <rcl_get_default_domain_id+0x56>
 801a116:	6025      	str	r5, [r4, #0]
 801a118:	2000      	movs	r0, #0
 801a11a:	e7ec      	b.n	801a0f6 <rcl_get_default_domain_id+0x1a>
 801a11c:	200b      	movs	r0, #11
 801a11e:	b003      	add	sp, #12
 801a120:	bd30      	pop	{r4, r5, pc}
 801a122:	4618      	mov	r0, r3
 801a124:	b003      	add	sp, #12
 801a126:	bd30      	pop	{r4, r5, pc}
 801a128:	9b01      	ldr	r3, [sp, #4]
 801a12a:	781b      	ldrb	r3, [r3, #0]
 801a12c:	2b00      	cmp	r3, #0
 801a12e:	d0f2      	beq.n	801a116 <rcl_get_default_domain_id+0x3a>
 801a130:	e7e0      	b.n	801a0f4 <rcl_get_default_domain_id+0x18>
 801a132:	f001 fac5 	bl	801b6c0 <__errno>
 801a136:	6803      	ldr	r3, [r0, #0]
 801a138:	2b22      	cmp	r3, #34	@ 0x22
 801a13a:	d1ec      	bne.n	801a116 <rcl_get_default_domain_id+0x3a>
 801a13c:	e7da      	b.n	801a0f4 <rcl_get_default_domain_id+0x18>
 801a13e:	bf00      	nop
 801a140:	0801dfdc 	.word	0x0801dfdc

0801a144 <rcl_expand_topic_name>:
 801a144:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a148:	b08b      	sub	sp, #44	@ 0x2c
 801a14a:	9306      	str	r3, [sp, #24]
 801a14c:	2800      	cmp	r0, #0
 801a14e:	f000 80ad 	beq.w	801a2ac <rcl_expand_topic_name+0x168>
 801a152:	460e      	mov	r6, r1
 801a154:	2900      	cmp	r1, #0
 801a156:	f000 80a9 	beq.w	801a2ac <rcl_expand_topic_name+0x168>
 801a15a:	4617      	mov	r7, r2
 801a15c:	2a00      	cmp	r2, #0
 801a15e:	f000 80a5 	beq.w	801a2ac <rcl_expand_topic_name+0x168>
 801a162:	2b00      	cmp	r3, #0
 801a164:	f000 80a2 	beq.w	801a2ac <rcl_expand_topic_name+0x168>
 801a168:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 801a16a:	2b00      	cmp	r3, #0
 801a16c:	f000 809e 	beq.w	801a2ac <rcl_expand_topic_name+0x168>
 801a170:	2200      	movs	r2, #0
 801a172:	a909      	add	r1, sp, #36	@ 0x24
 801a174:	4680      	mov	r8, r0
 801a176:	f000 fa57 	bl	801a628 <rcl_validate_topic_name>
 801a17a:	4604      	mov	r4, r0
 801a17c:	2800      	cmp	r0, #0
 801a17e:	f040 8096 	bne.w	801a2ae <rcl_expand_topic_name+0x16a>
 801a182:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801a184:	2b00      	cmp	r3, #0
 801a186:	f040 809a 	bne.w	801a2be <rcl_expand_topic_name+0x17a>
 801a18a:	4602      	mov	r2, r0
 801a18c:	a909      	add	r1, sp, #36	@ 0x24
 801a18e:	4630      	mov	r0, r6
 801a190:	f7fc fe50 	bl	8016e34 <rmw_validate_node_name>
 801a194:	2800      	cmp	r0, #0
 801a196:	f040 808e 	bne.w	801a2b6 <rcl_expand_topic_name+0x172>
 801a19a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801a19c:	2a00      	cmp	r2, #0
 801a19e:	f040 8093 	bne.w	801a2c8 <rcl_expand_topic_name+0x184>
 801a1a2:	a909      	add	r1, sp, #36	@ 0x24
 801a1a4:	4638      	mov	r0, r7
 801a1a6:	f7fc fe27 	bl	8016df8 <rmw_validate_namespace>
 801a1aa:	2800      	cmp	r0, #0
 801a1ac:	f040 8083 	bne.w	801a2b6 <rcl_expand_topic_name+0x172>
 801a1b0:	9c09      	ldr	r4, [sp, #36]	@ 0x24
 801a1b2:	2c00      	cmp	r4, #0
 801a1b4:	f040 80ed 	bne.w	801a392 <rcl_expand_topic_name+0x24e>
 801a1b8:	217b      	movs	r1, #123	@ 0x7b
 801a1ba:	4640      	mov	r0, r8
 801a1bc:	f001 f99e 	bl	801b4fc <strchr>
 801a1c0:	f898 3000 	ldrb.w	r3, [r8]
 801a1c4:	2b2f      	cmp	r3, #47	@ 0x2f
 801a1c6:	4605      	mov	r5, r0
 801a1c8:	f000 809e 	beq.w	801a308 <rcl_expand_topic_name+0x1c4>
 801a1cc:	2b7e      	cmp	r3, #126	@ 0x7e
 801a1ce:	f040 80a2 	bne.w	801a316 <rcl_expand_topic_name+0x1d2>
 801a1d2:	4638      	mov	r0, r7
 801a1d4:	f7e6 f806 	bl	80001e4 <strlen>
 801a1d8:	4a82      	ldr	r2, [pc, #520]	@ (801a3e4 <rcl_expand_topic_name+0x2a0>)
 801a1da:	4b83      	ldr	r3, [pc, #524]	@ (801a3e8 <rcl_expand_topic_name+0x2a4>)
 801a1dc:	2801      	cmp	r0, #1
 801a1de:	bf18      	it	ne
 801a1e0:	4613      	movne	r3, r2
 801a1e2:	9302      	str	r3, [sp, #8]
 801a1e4:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 801a1e6:	9300      	str	r3, [sp, #0]
 801a1e8:	e9cd 7603 	strd	r7, r6, [sp, #12]
 801a1ec:	f108 0301 	add.w	r3, r8, #1
 801a1f0:	9305      	str	r3, [sp, #20]
 801a1f2:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 801a1f6:	9301      	str	r3, [sp, #4]
 801a1f8:	ab14      	add	r3, sp, #80	@ 0x50
 801a1fa:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 801a1fc:	f7fc f9e4 	bl	80165c8 <rcutils_format_string_limit>
 801a200:	4682      	mov	sl, r0
 801a202:	2800      	cmp	r0, #0
 801a204:	f000 80c7 	beq.w	801a396 <rcl_expand_topic_name+0x252>
 801a208:	2d00      	cmp	r5, #0
 801a20a:	f000 80a2 	beq.w	801a352 <rcl_expand_topic_name+0x20e>
 801a20e:	217b      	movs	r1, #123	@ 0x7b
 801a210:	f001 f974 	bl	801b4fc <strchr>
 801a214:	46d1      	mov	r9, sl
 801a216:	4605      	mov	r5, r0
 801a218:	9407      	str	r4, [sp, #28]
 801a21a:	46d3      	mov	fp, sl
 801a21c:	464c      	mov	r4, r9
 801a21e:	2d00      	cmp	r5, #0
 801a220:	f000 80be 	beq.w	801a3a0 <rcl_expand_topic_name+0x25c>
 801a224:	217d      	movs	r1, #125	@ 0x7d
 801a226:	4620      	mov	r0, r4
 801a228:	f001 f968 	bl	801b4fc <strchr>
 801a22c:	eba0 0905 	sub.w	r9, r0, r5
 801a230:	f109 0a01 	add.w	sl, r9, #1
 801a234:	486d      	ldr	r0, [pc, #436]	@ (801a3ec <rcl_expand_topic_name+0x2a8>)
 801a236:	4652      	mov	r2, sl
 801a238:	4629      	mov	r1, r5
 801a23a:	f001 f96c 	bl	801b516 <strncmp>
 801a23e:	2800      	cmp	r0, #0
 801a240:	d067      	beq.n	801a312 <rcl_expand_topic_name+0x1ce>
 801a242:	486b      	ldr	r0, [pc, #428]	@ (801a3f0 <rcl_expand_topic_name+0x2ac>)
 801a244:	4652      	mov	r2, sl
 801a246:	4629      	mov	r1, r5
 801a248:	f001 f965 	bl	801b516 <strncmp>
 801a24c:	b130      	cbz	r0, 801a25c <rcl_expand_topic_name+0x118>
 801a24e:	4869      	ldr	r0, [pc, #420]	@ (801a3f4 <rcl_expand_topic_name+0x2b0>)
 801a250:	4652      	mov	r2, sl
 801a252:	4629      	mov	r1, r5
 801a254:	f001 f95f 	bl	801b516 <strncmp>
 801a258:	2800      	cmp	r0, #0
 801a25a:	d137      	bne.n	801a2cc <rcl_expand_topic_name+0x188>
 801a25c:	46b9      	mov	r9, r7
 801a25e:	ab16      	add	r3, sp, #88	@ 0x58
 801a260:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 801a264:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 801a268:	ab14      	add	r3, sp, #80	@ 0x50
 801a26a:	4628      	mov	r0, r5
 801a26c:	cb0c      	ldmia	r3, {r2, r3}
 801a26e:	4651      	mov	r1, sl
 801a270:	f7fc fae6 	bl	8016840 <rcutils_strndup>
 801a274:	4605      	mov	r5, r0
 801a276:	2800      	cmp	r0, #0
 801a278:	f000 809c 	beq.w	801a3b4 <rcl_expand_topic_name+0x270>
 801a27c:	464a      	mov	r2, r9
 801a27e:	4620      	mov	r0, r4
 801a280:	ab14      	add	r3, sp, #80	@ 0x50
 801a282:	4629      	mov	r1, r5
 801a284:	f7fc f9da 	bl	801663c <rcutils_repl_str>
 801a288:	9918      	ldr	r1, [sp, #96]	@ 0x60
 801a28a:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 801a28c:	4604      	mov	r4, r0
 801a28e:	4628      	mov	r0, r5
 801a290:	4798      	blx	r3
 801a292:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 801a294:	9918      	ldr	r1, [sp, #96]	@ 0x60
 801a296:	4658      	mov	r0, fp
 801a298:	4798      	blx	r3
 801a29a:	2c00      	cmp	r4, #0
 801a29c:	d07b      	beq.n	801a396 <rcl_expand_topic_name+0x252>
 801a29e:	217b      	movs	r1, #123	@ 0x7b
 801a2a0:	4620      	mov	r0, r4
 801a2a2:	f001 f92b 	bl	801b4fc <strchr>
 801a2a6:	46a3      	mov	fp, r4
 801a2a8:	4605      	mov	r5, r0
 801a2aa:	e7b8      	b.n	801a21e <rcl_expand_topic_name+0xda>
 801a2ac:	240b      	movs	r4, #11
 801a2ae:	4620      	mov	r0, r4
 801a2b0:	b00b      	add	sp, #44	@ 0x2c
 801a2b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a2b6:	f7f9 f9b1 	bl	801361c <rcl_convert_rmw_ret_to_rcl_ret>
 801a2ba:	4604      	mov	r4, r0
 801a2bc:	e7f7      	b.n	801a2ae <rcl_expand_topic_name+0x16a>
 801a2be:	2467      	movs	r4, #103	@ 0x67
 801a2c0:	4620      	mov	r0, r4
 801a2c2:	b00b      	add	sp, #44	@ 0x2c
 801a2c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a2c8:	24c9      	movs	r4, #201	@ 0xc9
 801a2ca:	e7f0      	b.n	801a2ae <rcl_expand_topic_name+0x16a>
 801a2cc:	f109 32ff 	add.w	r2, r9, #4294967295	@ 0xffffffff
 801a2d0:	9806      	ldr	r0, [sp, #24]
 801a2d2:	1c69      	adds	r1, r5, #1
 801a2d4:	f7fc fbce 	bl	8016a74 <rcutils_string_map_getn>
 801a2d8:	4681      	mov	r9, r0
 801a2da:	2800      	cmp	r0, #0
 801a2dc:	d1bf      	bne.n	801a25e <rcl_expand_topic_name+0x11a>
 801a2de:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 801a2e0:	aa16      	add	r2, sp, #88	@ 0x58
 801a2e2:	6018      	str	r0, [r3, #0]
 801a2e4:	ca07      	ldmia	r2, {r0, r1, r2}
 801a2e6:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 801a2ea:	ab14      	add	r3, sp, #80	@ 0x50
 801a2ec:	cb0c      	ldmia	r3, {r2, r3}
 801a2ee:	4651      	mov	r1, sl
 801a2f0:	4628      	mov	r0, r5
 801a2f2:	f7fc faa5 	bl	8016840 <rcutils_strndup>
 801a2f6:	9918      	ldr	r1, [sp, #96]	@ 0x60
 801a2f8:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 801a2fa:	4798      	blx	r3
 801a2fc:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 801a2fe:	9918      	ldr	r1, [sp, #96]	@ 0x60
 801a300:	4658      	mov	r0, fp
 801a302:	2469      	movs	r4, #105	@ 0x69
 801a304:	4798      	blx	r3
 801a306:	e7d2      	b.n	801a2ae <rcl_expand_topic_name+0x16a>
 801a308:	2800      	cmp	r0, #0
 801a30a:	d05b      	beq.n	801a3c4 <rcl_expand_topic_name+0x280>
 801a30c:	46c1      	mov	r9, r8
 801a30e:	46a2      	mov	sl, r4
 801a310:	e782      	b.n	801a218 <rcl_expand_topic_name+0xd4>
 801a312:	46b1      	mov	r9, r6
 801a314:	e7a3      	b.n	801a25e <rcl_expand_topic_name+0x11a>
 801a316:	2800      	cmp	r0, #0
 801a318:	d1f8      	bne.n	801a30c <rcl_expand_topic_name+0x1c8>
 801a31a:	4638      	mov	r0, r7
 801a31c:	f7e5 ff62 	bl	80001e4 <strlen>
 801a320:	4a35      	ldr	r2, [pc, #212]	@ (801a3f8 <rcl_expand_topic_name+0x2b4>)
 801a322:	4b36      	ldr	r3, [pc, #216]	@ (801a3fc <rcl_expand_topic_name+0x2b8>)
 801a324:	f8cd 8010 	str.w	r8, [sp, #16]
 801a328:	2801      	cmp	r0, #1
 801a32a:	bf18      	it	ne
 801a32c:	4613      	movne	r3, r2
 801a32e:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 801a332:	e9cd 1301 	strd	r1, r3, [sp, #4]
 801a336:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 801a338:	9703      	str	r7, [sp, #12]
 801a33a:	9200      	str	r2, [sp, #0]
 801a33c:	ab14      	add	r3, sp, #80	@ 0x50
 801a33e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 801a340:	f7fc f942 	bl	80165c8 <rcutils_format_string_limit>
 801a344:	4682      	mov	sl, r0
 801a346:	4653      	mov	r3, sl
 801a348:	b32b      	cbz	r3, 801a396 <rcl_expand_topic_name+0x252>
 801a34a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 801a34c:	f8c3 a000 	str.w	sl, [r3]
 801a350:	e7ad      	b.n	801a2ae <rcl_expand_topic_name+0x16a>
 801a352:	f89a 3000 	ldrb.w	r3, [sl]
 801a356:	2b2f      	cmp	r3, #47	@ 0x2f
 801a358:	d0f7      	beq.n	801a34a <rcl_expand_topic_name+0x206>
 801a35a:	4638      	mov	r0, r7
 801a35c:	f7e5 ff42 	bl	80001e4 <strlen>
 801a360:	4a25      	ldr	r2, [pc, #148]	@ (801a3f8 <rcl_expand_topic_name+0x2b4>)
 801a362:	4b26      	ldr	r3, [pc, #152]	@ (801a3fc <rcl_expand_topic_name+0x2b8>)
 801a364:	f8cd a010 	str.w	sl, [sp, #16]
 801a368:	2801      	cmp	r0, #1
 801a36a:	bf18      	it	ne
 801a36c:	4613      	movne	r3, r2
 801a36e:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 801a372:	e9cd 1301 	strd	r1, r3, [sp, #4]
 801a376:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 801a378:	9703      	str	r7, [sp, #12]
 801a37a:	9200      	str	r2, [sp, #0]
 801a37c:	ab14      	add	r3, sp, #80	@ 0x50
 801a37e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 801a380:	f7fc f922 	bl	80165c8 <rcutils_format_string_limit>
 801a384:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 801a386:	9918      	ldr	r1, [sp, #96]	@ 0x60
 801a388:	4605      	mov	r5, r0
 801a38a:	4650      	mov	r0, sl
 801a38c:	4798      	blx	r3
 801a38e:	46aa      	mov	sl, r5
 801a390:	e7d9      	b.n	801a346 <rcl_expand_topic_name+0x202>
 801a392:	24ca      	movs	r4, #202	@ 0xca
 801a394:	e78b      	b.n	801a2ae <rcl_expand_topic_name+0x16a>
 801a396:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 801a398:	2300      	movs	r3, #0
 801a39a:	6013      	str	r3, [r2, #0]
 801a39c:	240a      	movs	r4, #10
 801a39e:	e786      	b.n	801a2ae <rcl_expand_topic_name+0x16a>
 801a3a0:	465b      	mov	r3, fp
 801a3a2:	9c07      	ldr	r4, [sp, #28]
 801a3a4:	46da      	mov	sl, fp
 801a3a6:	2b00      	cmp	r3, #0
 801a3a8:	d1d3      	bne.n	801a352 <rcl_expand_topic_name+0x20e>
 801a3aa:	f898 3000 	ldrb.w	r3, [r8]
 801a3ae:	2b2f      	cmp	r3, #47	@ 0x2f
 801a3b0:	d0cb      	beq.n	801a34a <rcl_expand_topic_name+0x206>
 801a3b2:	e7b2      	b.n	801a31a <rcl_expand_topic_name+0x1d6>
 801a3b4:	e9dd 1218 	ldrd	r1, r2, [sp, #96]	@ 0x60
 801a3b8:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 801a3ba:	6015      	str	r5, [r2, #0]
 801a3bc:	4658      	mov	r0, fp
 801a3be:	4798      	blx	r3
 801a3c0:	240a      	movs	r4, #10
 801a3c2:	e774      	b.n	801a2ae <rcl_expand_topic_name+0x16a>
 801a3c4:	ab17      	add	r3, sp, #92	@ 0x5c
 801a3c6:	e893 0003 	ldmia.w	r3, {r0, r1}
 801a3ca:	e88d 0003 	stmia.w	sp, {r0, r1}
 801a3ce:	ab14      	add	r3, sp, #80	@ 0x50
 801a3d0:	cb0e      	ldmia	r3, {r1, r2, r3}
 801a3d2:	4640      	mov	r0, r8
 801a3d4:	f7fc fa12 	bl	80167fc <rcutils_strdup>
 801a3d8:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 801a3da:	2800      	cmp	r0, #0
 801a3dc:	6018      	str	r0, [r3, #0]
 801a3de:	bf08      	it	eq
 801a3e0:	240a      	moveq	r4, #10
 801a3e2:	e764      	b.n	801a2ae <rcl_expand_topic_name+0x16a>
 801a3e4:	0801dfec 	.word	0x0801dfec
 801a3e8:	0801d5f0 	.word	0x0801d5f0
 801a3ec:	0801dff4 	.word	0x0801dff4
 801a3f0:	0801dffc 	.word	0x0801dffc
 801a3f4:	0801e004 	.word	0x0801e004
 801a3f8:	0801d7e4 	.word	0x0801d7e4
 801a3fc:	0801d600 	.word	0x0801d600

0801a400 <rcl_get_default_topic_name_substitutions>:
 801a400:	2800      	cmp	r0, #0
 801a402:	bf0c      	ite	eq
 801a404:	200b      	moveq	r0, #11
 801a406:	2000      	movne	r0, #0
 801a408:	4770      	bx	lr
 801a40a:	bf00      	nop

0801a40c <rcl_get_zero_initialized_guard_condition>:
 801a40c:	4a03      	ldr	r2, [pc, #12]	@ (801a41c <rcl_get_zero_initialized_guard_condition+0x10>)
 801a40e:	4603      	mov	r3, r0
 801a410:	e892 0003 	ldmia.w	r2, {r0, r1}
 801a414:	e883 0003 	stmia.w	r3, {r0, r1}
 801a418:	4618      	mov	r0, r3
 801a41a:	4770      	bx	lr
 801a41c:	0801e010 	.word	0x0801e010

0801a420 <rcl_guard_condition_init>:
 801a420:	b082      	sub	sp, #8
 801a422:	b5f0      	push	{r4, r5, r6, r7, lr}
 801a424:	b087      	sub	sp, #28
 801a426:	ac0c      	add	r4, sp, #48	@ 0x30
 801a428:	e884 000c 	stmia.w	r4, {r2, r3}
 801a42c:	46a6      	mov	lr, r4
 801a42e:	460d      	mov	r5, r1
 801a430:	4604      	mov	r4, r0
 801a432:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 801a436:	f10d 0c04 	add.w	ip, sp, #4
 801a43a:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801a43e:	f8de 3000 	ldr.w	r3, [lr]
 801a442:	f8cc 3000 	str.w	r3, [ip]
 801a446:	a801      	add	r0, sp, #4
 801a448:	f7f3 ffbe 	bl	800e3c8 <rcutils_allocator_is_valid>
 801a44c:	b338      	cbz	r0, 801a49e <rcl_guard_condition_init+0x7e>
 801a44e:	b334      	cbz	r4, 801a49e <rcl_guard_condition_init+0x7e>
 801a450:	6866      	ldr	r6, [r4, #4]
 801a452:	b9ee      	cbnz	r6, 801a490 <rcl_guard_condition_init+0x70>
 801a454:	b31d      	cbz	r5, 801a49e <rcl_guard_condition_init+0x7e>
 801a456:	4628      	mov	r0, r5
 801a458:	f7f9 f8fe 	bl	8013658 <rcl_context_is_valid>
 801a45c:	b308      	cbz	r0, 801a4a2 <rcl_guard_condition_init+0x82>
 801a45e:	9b01      	ldr	r3, [sp, #4]
 801a460:	9905      	ldr	r1, [sp, #20]
 801a462:	201c      	movs	r0, #28
 801a464:	4798      	blx	r3
 801a466:	4607      	mov	r7, r0
 801a468:	6060      	str	r0, [r4, #4]
 801a46a:	b310      	cbz	r0, 801a4b2 <rcl_guard_condition_init+0x92>
 801a46c:	6828      	ldr	r0, [r5, #0]
 801a46e:	3028      	adds	r0, #40	@ 0x28
 801a470:	f000 fabc 	bl	801a9ec <rmw_create_guard_condition>
 801a474:	6038      	str	r0, [r7, #0]
 801a476:	6860      	ldr	r0, [r4, #4]
 801a478:	6805      	ldr	r5, [r0, #0]
 801a47a:	b1a5      	cbz	r5, 801a4a6 <rcl_guard_condition_init+0x86>
 801a47c:	2301      	movs	r3, #1
 801a47e:	ac01      	add	r4, sp, #4
 801a480:	7103      	strb	r3, [r0, #4]
 801a482:	f100 0708 	add.w	r7, r0, #8
 801a486:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801a488:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 801a48a:	6823      	ldr	r3, [r4, #0]
 801a48c:	603b      	str	r3, [r7, #0]
 801a48e:	e000      	b.n	801a492 <rcl_guard_condition_init+0x72>
 801a490:	2664      	movs	r6, #100	@ 0x64
 801a492:	4630      	mov	r0, r6
 801a494:	b007      	add	sp, #28
 801a496:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 801a49a:	b002      	add	sp, #8
 801a49c:	4770      	bx	lr
 801a49e:	260b      	movs	r6, #11
 801a4a0:	e7f7      	b.n	801a492 <rcl_guard_condition_init+0x72>
 801a4a2:	2665      	movs	r6, #101	@ 0x65
 801a4a4:	e7f5      	b.n	801a492 <rcl_guard_condition_init+0x72>
 801a4a6:	9b02      	ldr	r3, [sp, #8]
 801a4a8:	9905      	ldr	r1, [sp, #20]
 801a4aa:	4798      	blx	r3
 801a4ac:	2601      	movs	r6, #1
 801a4ae:	6065      	str	r5, [r4, #4]
 801a4b0:	e7ef      	b.n	801a492 <rcl_guard_condition_init+0x72>
 801a4b2:	260a      	movs	r6, #10
 801a4b4:	e7ed      	b.n	801a492 <rcl_guard_condition_init+0x72>
 801a4b6:	bf00      	nop

0801a4b8 <rcl_guard_condition_init_from_rmw>:
 801a4b8:	b082      	sub	sp, #8
 801a4ba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801a4be:	b086      	sub	sp, #24
 801a4c0:	f10d 0c30 	add.w	ip, sp, #48	@ 0x30
 801a4c4:	4604      	mov	r4, r0
 801a4c6:	f84c 3f04 	str.w	r3, [ip, #4]!
 801a4ca:	460e      	mov	r6, r1
 801a4cc:	4617      	mov	r7, r2
 801a4ce:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 801a4d2:	f10d 0e04 	add.w	lr, sp, #4
 801a4d6:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 801a4da:	f8dc 3000 	ldr.w	r3, [ip]
 801a4de:	f8ce 3000 	str.w	r3, [lr]
 801a4e2:	a801      	add	r0, sp, #4
 801a4e4:	f7f3 ff70 	bl	800e3c8 <rcutils_allocator_is_valid>
 801a4e8:	b350      	cbz	r0, 801a540 <rcl_guard_condition_init_from_rmw+0x88>
 801a4ea:	b34c      	cbz	r4, 801a540 <rcl_guard_condition_init_from_rmw+0x88>
 801a4ec:	f8d4 8004 	ldr.w	r8, [r4, #4]
 801a4f0:	f1b8 0f00 	cmp.w	r8, #0
 801a4f4:	d11e      	bne.n	801a534 <rcl_guard_condition_init_from_rmw+0x7c>
 801a4f6:	b31f      	cbz	r7, 801a540 <rcl_guard_condition_init_from_rmw+0x88>
 801a4f8:	4638      	mov	r0, r7
 801a4fa:	f7f9 f8ad 	bl	8013658 <rcl_context_is_valid>
 801a4fe:	b328      	cbz	r0, 801a54c <rcl_guard_condition_init_from_rmw+0x94>
 801a500:	9b01      	ldr	r3, [sp, #4]
 801a502:	9905      	ldr	r1, [sp, #20]
 801a504:	201c      	movs	r0, #28
 801a506:	4798      	blx	r3
 801a508:	4605      	mov	r5, r0
 801a50a:	6060      	str	r0, [r4, #4]
 801a50c:	b358      	cbz	r0, 801a566 <rcl_guard_condition_init_from_rmw+0xae>
 801a50e:	b1fe      	cbz	r6, 801a550 <rcl_guard_condition_init_from_rmw+0x98>
 801a510:	6006      	str	r6, [r0, #0]
 801a512:	f880 8004 	strb.w	r8, [r0, #4]
 801a516:	ac01      	add	r4, sp, #4
 801a518:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801a51a:	f105 0c08 	add.w	ip, r5, #8
 801a51e:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801a522:	6823      	ldr	r3, [r4, #0]
 801a524:	f8cc 3000 	str.w	r3, [ip]
 801a528:	2000      	movs	r0, #0
 801a52a:	b006      	add	sp, #24
 801a52c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801a530:	b002      	add	sp, #8
 801a532:	4770      	bx	lr
 801a534:	2064      	movs	r0, #100	@ 0x64
 801a536:	b006      	add	sp, #24
 801a538:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801a53c:	b002      	add	sp, #8
 801a53e:	4770      	bx	lr
 801a540:	200b      	movs	r0, #11
 801a542:	b006      	add	sp, #24
 801a544:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801a548:	b002      	add	sp, #8
 801a54a:	4770      	bx	lr
 801a54c:	2065      	movs	r0, #101	@ 0x65
 801a54e:	e7f2      	b.n	801a536 <rcl_guard_condition_init_from_rmw+0x7e>
 801a550:	6838      	ldr	r0, [r7, #0]
 801a552:	3028      	adds	r0, #40	@ 0x28
 801a554:	f000 fa4a 	bl	801a9ec <rmw_create_guard_condition>
 801a558:	6028      	str	r0, [r5, #0]
 801a55a:	6865      	ldr	r5, [r4, #4]
 801a55c:	682e      	ldr	r6, [r5, #0]
 801a55e:	b126      	cbz	r6, 801a56a <rcl_guard_condition_init_from_rmw+0xb2>
 801a560:	2301      	movs	r3, #1
 801a562:	712b      	strb	r3, [r5, #4]
 801a564:	e7d7      	b.n	801a516 <rcl_guard_condition_init_from_rmw+0x5e>
 801a566:	200a      	movs	r0, #10
 801a568:	e7e5      	b.n	801a536 <rcl_guard_condition_init_from_rmw+0x7e>
 801a56a:	4628      	mov	r0, r5
 801a56c:	9b02      	ldr	r3, [sp, #8]
 801a56e:	9905      	ldr	r1, [sp, #20]
 801a570:	4798      	blx	r3
 801a572:	6066      	str	r6, [r4, #4]
 801a574:	2001      	movs	r0, #1
 801a576:	e7de      	b.n	801a536 <rcl_guard_condition_init_from_rmw+0x7e>

0801a578 <rcl_guard_condition_fini>:
 801a578:	b570      	push	{r4, r5, r6, lr}
 801a57a:	b082      	sub	sp, #8
 801a57c:	b1f0      	cbz	r0, 801a5bc <rcl_guard_condition_fini+0x44>
 801a57e:	6843      	ldr	r3, [r0, #4]
 801a580:	4604      	mov	r4, r0
 801a582:	b163      	cbz	r3, 801a59e <rcl_guard_condition_fini+0x26>
 801a584:	6818      	ldr	r0, [r3, #0]
 801a586:	68de      	ldr	r6, [r3, #12]
 801a588:	6999      	ldr	r1, [r3, #24]
 801a58a:	b160      	cbz	r0, 801a5a6 <rcl_guard_condition_fini+0x2e>
 801a58c:	791d      	ldrb	r5, [r3, #4]
 801a58e:	b965      	cbnz	r5, 801a5aa <rcl_guard_condition_fini+0x32>
 801a590:	4618      	mov	r0, r3
 801a592:	47b0      	blx	r6
 801a594:	2300      	movs	r3, #0
 801a596:	4628      	mov	r0, r5
 801a598:	6063      	str	r3, [r4, #4]
 801a59a:	b002      	add	sp, #8
 801a59c:	bd70      	pop	{r4, r5, r6, pc}
 801a59e:	461d      	mov	r5, r3
 801a5a0:	4628      	mov	r0, r5
 801a5a2:	b002      	add	sp, #8
 801a5a4:	bd70      	pop	{r4, r5, r6, pc}
 801a5a6:	4605      	mov	r5, r0
 801a5a8:	e7f2      	b.n	801a590 <rcl_guard_condition_fini+0x18>
 801a5aa:	9101      	str	r1, [sp, #4]
 801a5ac:	f000 fa32 	bl	801aa14 <rmw_destroy_guard_condition>
 801a5b0:	1e05      	subs	r5, r0, #0
 801a5b2:	6863      	ldr	r3, [r4, #4]
 801a5b4:	9901      	ldr	r1, [sp, #4]
 801a5b6:	bf18      	it	ne
 801a5b8:	2501      	movne	r5, #1
 801a5ba:	e7e9      	b.n	801a590 <rcl_guard_condition_fini+0x18>
 801a5bc:	250b      	movs	r5, #11
 801a5be:	4628      	mov	r0, r5
 801a5c0:	b002      	add	sp, #8
 801a5c2:	bd70      	pop	{r4, r5, r6, pc}

0801a5c4 <rcl_guard_condition_get_default_options>:
 801a5c4:	b5f0      	push	{r4, r5, r6, r7, lr}
 801a5c6:	b087      	sub	sp, #28
 801a5c8:	4606      	mov	r6, r0
 801a5ca:	4668      	mov	r0, sp
 801a5cc:	f7f3 feee 	bl	800e3ac <rcutils_get_default_allocator>
 801a5d0:	4b09      	ldr	r3, [pc, #36]	@ (801a5f8 <rcl_guard_condition_get_default_options+0x34>)
 801a5d2:	46ee      	mov	lr, sp
 801a5d4:	469c      	mov	ip, r3
 801a5d6:	461d      	mov	r5, r3
 801a5d8:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 801a5dc:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801a5e0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801a5e2:	4634      	mov	r4, r6
 801a5e4:	f8de 7000 	ldr.w	r7, [lr]
 801a5e8:	f8cc 7000 	str.w	r7, [ip]
 801a5ec:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801a5ee:	4630      	mov	r0, r6
 801a5f0:	6027      	str	r7, [r4, #0]
 801a5f2:	b007      	add	sp, #28
 801a5f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801a5f6:	bf00      	nop
 801a5f8:	2000c24c 	.word	0x2000c24c

0801a5fc <rcl_trigger_guard_condition>:
 801a5fc:	b148      	cbz	r0, 801a612 <rcl_trigger_guard_condition+0x16>
 801a5fe:	b508      	push	{r3, lr}
 801a600:	6843      	ldr	r3, [r0, #4]
 801a602:	b143      	cbz	r3, 801a616 <rcl_trigger_guard_condition+0x1a>
 801a604:	6818      	ldr	r0, [r3, #0]
 801a606:	f000 fa19 	bl	801aa3c <rmw_trigger_guard_condition>
 801a60a:	3800      	subs	r0, #0
 801a60c:	bf18      	it	ne
 801a60e:	2001      	movne	r0, #1
 801a610:	bd08      	pop	{r3, pc}
 801a612:	200b      	movs	r0, #11
 801a614:	4770      	bx	lr
 801a616:	200b      	movs	r0, #11
 801a618:	bd08      	pop	{r3, pc}
 801a61a:	bf00      	nop

0801a61c <rcl_guard_condition_get_rmw_handle>:
 801a61c:	b110      	cbz	r0, 801a624 <rcl_guard_condition_get_rmw_handle+0x8>
 801a61e:	6840      	ldr	r0, [r0, #4]
 801a620:	b100      	cbz	r0, 801a624 <rcl_guard_condition_get_rmw_handle+0x8>
 801a622:	6800      	ldr	r0, [r0, #0]
 801a624:	4770      	bx	lr
 801a626:	bf00      	nop

0801a628 <rcl_validate_topic_name>:
 801a628:	2800      	cmp	r0, #0
 801a62a:	d07a      	beq.n	801a722 <rcl_validate_topic_name+0xfa>
 801a62c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801a630:	460e      	mov	r6, r1
 801a632:	2900      	cmp	r1, #0
 801a634:	d07c      	beq.n	801a730 <rcl_validate_topic_name+0x108>
 801a636:	4617      	mov	r7, r2
 801a638:	4605      	mov	r5, r0
 801a63a:	f7e5 fdd3 	bl	80001e4 <strlen>
 801a63e:	b1b0      	cbz	r0, 801a66e <rcl_validate_topic_name+0x46>
 801a640:	f895 9000 	ldrb.w	r9, [r5]
 801a644:	f8df c180 	ldr.w	ip, [pc, #384]	@ 801a7c8 <rcl_validate_topic_name+0x1a0>
 801a648:	f81c 3009 	ldrb.w	r3, [ip, r9]
 801a64c:	f013 0304 	ands.w	r3, r3, #4
 801a650:	d169      	bne.n	801a726 <rcl_validate_topic_name+0xfe>
 801a652:	f100 38ff 	add.w	r8, r0, #4294967295	@ 0xffffffff
 801a656:	f815 2008 	ldrb.w	r2, [r5, r8]
 801a65a:	2a2f      	cmp	r2, #47	@ 0x2f
 801a65c:	d10e      	bne.n	801a67c <rcl_validate_topic_name+0x54>
 801a65e:	2202      	movs	r2, #2
 801a660:	6032      	str	r2, [r6, #0]
 801a662:	b36f      	cbz	r7, 801a6c0 <rcl_validate_topic_name+0x98>
 801a664:	f8c7 8000 	str.w	r8, [r7]
 801a668:	4618      	mov	r0, r3
 801a66a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801a66e:	2301      	movs	r3, #1
 801a670:	6033      	str	r3, [r6, #0]
 801a672:	b32f      	cbz	r7, 801a6c0 <rcl_validate_topic_name+0x98>
 801a674:	2000      	movs	r0, #0
 801a676:	6038      	str	r0, [r7, #0]
 801a678:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801a67c:	f105 3aff 	add.w	sl, r5, #4294967295	@ 0xffffffff
 801a680:	461c      	mov	r4, r3
 801a682:	4619      	mov	r1, r3
 801a684:	f81a 2f01 	ldrb.w	r2, [sl, #1]!
 801a688:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 801a68c:	f1be 0f09 	cmp.w	lr, #9
 801a690:	d919      	bls.n	801a6c6 <rcl_validate_topic_name+0x9e>
 801a692:	f022 0e20 	bic.w	lr, r2, #32
 801a696:	f1ae 0e41 	sub.w	lr, lr, #65	@ 0x41
 801a69a:	f1be 0f19 	cmp.w	lr, #25
 801a69e:	d912      	bls.n	801a6c6 <rcl_validate_topic_name+0x9e>
 801a6a0:	2a5f      	cmp	r2, #95	@ 0x5f
 801a6a2:	d019      	beq.n	801a6d8 <rcl_validate_topic_name+0xb0>
 801a6a4:	2a2f      	cmp	r2, #47	@ 0x2f
 801a6a6:	d051      	beq.n	801a74c <rcl_validate_topic_name+0x124>
 801a6a8:	2a7e      	cmp	r2, #126	@ 0x7e
 801a6aa:	d048      	beq.n	801a73e <rcl_validate_topic_name+0x116>
 801a6ac:	2a7b      	cmp	r2, #123	@ 0x7b
 801a6ae:	d054      	beq.n	801a75a <rcl_validate_topic_name+0x132>
 801a6b0:	2a7d      	cmp	r2, #125	@ 0x7d
 801a6b2:	d161      	bne.n	801a778 <rcl_validate_topic_name+0x150>
 801a6b4:	2c00      	cmp	r4, #0
 801a6b6:	d155      	bne.n	801a764 <rcl_validate_topic_name+0x13c>
 801a6b8:	2305      	movs	r3, #5
 801a6ba:	6033      	str	r3, [r6, #0]
 801a6bc:	b107      	cbz	r7, 801a6c0 <rcl_validate_topic_name+0x98>
 801a6be:	6039      	str	r1, [r7, #0]
 801a6c0:	2000      	movs	r0, #0
 801a6c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801a6c6:	f81c 2002 	ldrb.w	r2, [ip, r2]
 801a6ca:	0752      	lsls	r2, r2, #29
 801a6cc:	d504      	bpl.n	801a6d8 <rcl_validate_topic_name+0xb0>
 801a6ce:	b11c      	cbz	r4, 801a6d8 <rcl_validate_topic_name+0xb0>
 801a6d0:	b111      	cbz	r1, 801a6d8 <rcl_validate_topic_name+0xb0>
 801a6d2:	1e4a      	subs	r2, r1, #1
 801a6d4:	429a      	cmp	r2, r3
 801a6d6:	d02d      	beq.n	801a734 <rcl_validate_topic_name+0x10c>
 801a6d8:	3101      	adds	r1, #1
 801a6da:	4288      	cmp	r0, r1
 801a6dc:	d1d2      	bne.n	801a684 <rcl_validate_topic_name+0x5c>
 801a6de:	2c00      	cmp	r4, #0
 801a6e0:	d145      	bne.n	801a76e <rcl_validate_topic_name+0x146>
 801a6e2:	f1b9 0f7e 	cmp.w	r9, #126	@ 0x7e
 801a6e6:	d04f      	beq.n	801a788 <rcl_validate_topic_name+0x160>
 801a6e8:	4620      	mov	r0, r4
 801a6ea:	2301      	movs	r3, #1
 801a6ec:	e006      	b.n	801a6fc <rcl_validate_topic_name+0xd4>
 801a6ee:	428b      	cmp	r3, r1
 801a6f0:	f105 0501 	add.w	r5, r5, #1
 801a6f4:	f103 0201 	add.w	r2, r3, #1
 801a6f8:	d236      	bcs.n	801a768 <rcl_validate_topic_name+0x140>
 801a6fa:	4613      	mov	r3, r2
 801a6fc:	4580      	cmp	r8, r0
 801a6fe:	f100 0001 	add.w	r0, r0, #1
 801a702:	d0f4      	beq.n	801a6ee <rcl_validate_topic_name+0xc6>
 801a704:	782a      	ldrb	r2, [r5, #0]
 801a706:	2a2f      	cmp	r2, #47	@ 0x2f
 801a708:	d1f1      	bne.n	801a6ee <rcl_validate_topic_name+0xc6>
 801a70a:	786a      	ldrb	r2, [r5, #1]
 801a70c:	f81c 2002 	ldrb.w	r2, [ip, r2]
 801a710:	0754      	lsls	r4, r2, #29
 801a712:	d5ec      	bpl.n	801a6ee <rcl_validate_topic_name+0xc6>
 801a714:	2204      	movs	r2, #4
 801a716:	6032      	str	r2, [r6, #0]
 801a718:	2f00      	cmp	r7, #0
 801a71a:	d0d1      	beq.n	801a6c0 <rcl_validate_topic_name+0x98>
 801a71c:	603b      	str	r3, [r7, #0]
 801a71e:	2000      	movs	r0, #0
 801a720:	e7aa      	b.n	801a678 <rcl_validate_topic_name+0x50>
 801a722:	200b      	movs	r0, #11
 801a724:	4770      	bx	lr
 801a726:	2304      	movs	r3, #4
 801a728:	6033      	str	r3, [r6, #0]
 801a72a:	2f00      	cmp	r7, #0
 801a72c:	d1a2      	bne.n	801a674 <rcl_validate_topic_name+0x4c>
 801a72e:	e7c7      	b.n	801a6c0 <rcl_validate_topic_name+0x98>
 801a730:	200b      	movs	r0, #11
 801a732:	e7a1      	b.n	801a678 <rcl_validate_topic_name+0x50>
 801a734:	2309      	movs	r3, #9
 801a736:	6033      	str	r3, [r6, #0]
 801a738:	2f00      	cmp	r7, #0
 801a73a:	d1c0      	bne.n	801a6be <rcl_validate_topic_name+0x96>
 801a73c:	e7c0      	b.n	801a6c0 <rcl_validate_topic_name+0x98>
 801a73e:	2900      	cmp	r1, #0
 801a740:	d0ca      	beq.n	801a6d8 <rcl_validate_topic_name+0xb0>
 801a742:	2306      	movs	r3, #6
 801a744:	6033      	str	r3, [r6, #0]
 801a746:	2f00      	cmp	r7, #0
 801a748:	d1b9      	bne.n	801a6be <rcl_validate_topic_name+0x96>
 801a74a:	e7b9      	b.n	801a6c0 <rcl_validate_topic_name+0x98>
 801a74c:	2c00      	cmp	r4, #0
 801a74e:	d0c3      	beq.n	801a6d8 <rcl_validate_topic_name+0xb0>
 801a750:	2308      	movs	r3, #8
 801a752:	6033      	str	r3, [r6, #0]
 801a754:	2f00      	cmp	r7, #0
 801a756:	d1b2      	bne.n	801a6be <rcl_validate_topic_name+0x96>
 801a758:	e7b2      	b.n	801a6c0 <rcl_validate_topic_name+0x98>
 801a75a:	2c00      	cmp	r4, #0
 801a75c:	d1f8      	bne.n	801a750 <rcl_validate_topic_name+0x128>
 801a75e:	460b      	mov	r3, r1
 801a760:	2401      	movs	r4, #1
 801a762:	e7b9      	b.n	801a6d8 <rcl_validate_topic_name+0xb0>
 801a764:	2400      	movs	r4, #0
 801a766:	e7b7      	b.n	801a6d8 <rcl_validate_topic_name+0xb0>
 801a768:	2000      	movs	r0, #0
 801a76a:	6030      	str	r0, [r6, #0]
 801a76c:	e784      	b.n	801a678 <rcl_validate_topic_name+0x50>
 801a76e:	2205      	movs	r2, #5
 801a770:	6032      	str	r2, [r6, #0]
 801a772:	2f00      	cmp	r7, #0
 801a774:	d1d2      	bne.n	801a71c <rcl_validate_topic_name+0xf4>
 801a776:	e7a3      	b.n	801a6c0 <rcl_validate_topic_name+0x98>
 801a778:	2c00      	cmp	r4, #0
 801a77a:	bf14      	ite	ne
 801a77c:	2308      	movne	r3, #8
 801a77e:	2303      	moveq	r3, #3
 801a780:	6033      	str	r3, [r6, #0]
 801a782:	2f00      	cmp	r7, #0
 801a784:	d19b      	bne.n	801a6be <rcl_validate_topic_name+0x96>
 801a786:	e79b      	b.n	801a6c0 <rcl_validate_topic_name+0x98>
 801a788:	2301      	movs	r3, #1
 801a78a:	e00a      	b.n	801a7a2 <rcl_validate_topic_name+0x17a>
 801a78c:	2c01      	cmp	r4, #1
 801a78e:	d013      	beq.n	801a7b8 <rcl_validate_topic_name+0x190>
 801a790:	4299      	cmp	r1, r3
 801a792:	f104 0401 	add.w	r4, r4, #1
 801a796:	f105 0501 	add.w	r5, r5, #1
 801a79a:	f103 0201 	add.w	r2, r3, #1
 801a79e:	d9e3      	bls.n	801a768 <rcl_validate_topic_name+0x140>
 801a7a0:	4613      	mov	r3, r2
 801a7a2:	45a0      	cmp	r8, r4
 801a7a4:	d0f4      	beq.n	801a790 <rcl_validate_topic_name+0x168>
 801a7a6:	782a      	ldrb	r2, [r5, #0]
 801a7a8:	2a2f      	cmp	r2, #47	@ 0x2f
 801a7aa:	d1ef      	bne.n	801a78c <rcl_validate_topic_name+0x164>
 801a7ac:	786a      	ldrb	r2, [r5, #1]
 801a7ae:	f81c 2002 	ldrb.w	r2, [ip, r2]
 801a7b2:	0752      	lsls	r2, r2, #29
 801a7b4:	d5ec      	bpl.n	801a790 <rcl_validate_topic_name+0x168>
 801a7b6:	e7ad      	b.n	801a714 <rcl_validate_topic_name+0xec>
 801a7b8:	2307      	movs	r3, #7
 801a7ba:	6033      	str	r3, [r6, #0]
 801a7bc:	2f00      	cmp	r7, #0
 801a7be:	f43f af7f 	beq.w	801a6c0 <rcl_validate_topic_name+0x98>
 801a7c2:	603c      	str	r4, [r7, #0]
 801a7c4:	2000      	movs	r0, #0
 801a7c6:	e757      	b.n	801a678 <rcl_validate_topic_name+0x50>
 801a7c8:	0801e17a 	.word	0x0801e17a

0801a7cc <rcutils_string_array_fini>:
 801a7cc:	b320      	cbz	r0, 801a818 <rcutils_string_array_fini+0x4c>
 801a7ce:	b570      	push	{r4, r5, r6, lr}
 801a7d0:	4604      	mov	r4, r0
 801a7d2:	6840      	ldr	r0, [r0, #4]
 801a7d4:	b1d8      	cbz	r0, 801a80e <rcutils_string_array_fini+0x42>
 801a7d6:	f104 0008 	add.w	r0, r4, #8
 801a7da:	f7f3 fdf5 	bl	800e3c8 <rcutils_allocator_is_valid>
 801a7de:	b1b8      	cbz	r0, 801a810 <rcutils_string_array_fini+0x44>
 801a7e0:	6823      	ldr	r3, [r4, #0]
 801a7e2:	b1bb      	cbz	r3, 801a814 <rcutils_string_array_fini+0x48>
 801a7e4:	2500      	movs	r5, #0
 801a7e6:	6860      	ldr	r0, [r4, #4]
 801a7e8:	462e      	mov	r6, r5
 801a7ea:	f850 0025 	ldr.w	r0, [r0, r5, lsl #2]
 801a7ee:	68e3      	ldr	r3, [r4, #12]
 801a7f0:	69a1      	ldr	r1, [r4, #24]
 801a7f2:	4798      	blx	r3
 801a7f4:	e9d4 3000 	ldrd	r3, r0, [r4]
 801a7f8:	f840 6025 	str.w	r6, [r0, r5, lsl #2]
 801a7fc:	3501      	adds	r5, #1
 801a7fe:	429d      	cmp	r5, r3
 801a800:	d3f3      	bcc.n	801a7ea <rcutils_string_array_fini+0x1e>
 801a802:	68e3      	ldr	r3, [r4, #12]
 801a804:	69a1      	ldr	r1, [r4, #24]
 801a806:	4798      	blx	r3
 801a808:	2000      	movs	r0, #0
 801a80a:	e9c4 0000 	strd	r0, r0, [r4]
 801a80e:	bd70      	pop	{r4, r5, r6, pc}
 801a810:	200b      	movs	r0, #11
 801a812:	bd70      	pop	{r4, r5, r6, pc}
 801a814:	6860      	ldr	r0, [r4, #4]
 801a816:	e7f4      	b.n	801a802 <rcutils_string_array_fini+0x36>
 801a818:	200b      	movs	r0, #11
 801a81a:	4770      	bx	lr

0801a81c <on_status>:
 801a81c:	b082      	sub	sp, #8
 801a81e:	b002      	add	sp, #8
 801a820:	4770      	bx	lr
 801a822:	bf00      	nop

0801a824 <on_topic>:
 801a824:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801a828:	4a22      	ldr	r2, [pc, #136]	@ (801a8b4 <on_topic+0x90>)
 801a82a:	b094      	sub	sp, #80	@ 0x50
 801a82c:	6812      	ldr	r2, [r2, #0]
 801a82e:	9d1a      	ldr	r5, [sp, #104]	@ 0x68
 801a830:	f8bd 606c 	ldrh.w	r6, [sp, #108]	@ 0x6c
 801a834:	e9cd 3112 	strd	r3, r1, [sp, #72]	@ 0x48
 801a838:	b3c2      	cbz	r2, 801a8ac <on_topic+0x88>
 801a83a:	f8bd 104c 	ldrh.w	r1, [sp, #76]	@ 0x4c
 801a83e:	f89d 004e 	ldrb.w	r0, [sp, #78]	@ 0x4e
 801a842:	e001      	b.n	801a848 <on_topic+0x24>
 801a844:	6852      	ldr	r2, [r2, #4]
 801a846:	b38a      	cbz	r2, 801a8ac <on_topic+0x88>
 801a848:	6894      	ldr	r4, [r2, #8]
 801a84a:	8aa3      	ldrh	r3, [r4, #20]
 801a84c:	428b      	cmp	r3, r1
 801a84e:	d1f9      	bne.n	801a844 <on_topic+0x20>
 801a850:	7da3      	ldrb	r3, [r4, #22]
 801a852:	4283      	cmp	r3, r0
 801a854:	d1f6      	bne.n	801a844 <on_topic+0x20>
 801a856:	2248      	movs	r2, #72	@ 0x48
 801a858:	f104 0130 	add.w	r1, r4, #48	@ 0x30
 801a85c:	4668      	mov	r0, sp
 801a85e:	f000 ff64 	bl	801b72a <memcpy>
 801a862:	f104 0328 	add.w	r3, r4, #40	@ 0x28
 801a866:	cb0c      	ldmia	r3, {r2, r3}
 801a868:	4620      	mov	r0, r4
 801a86a:	f7f4 f9dd 	bl	800ec28 <rmw_uxrce_get_static_input_buffer_for_entity>
 801a86e:	4607      	mov	r7, r0
 801a870:	b1e0      	cbz	r0, 801a8ac <on_topic+0x88>
 801a872:	f8d0 8008 	ldr.w	r8, [r0, #8]
 801a876:	4632      	mov	r2, r6
 801a878:	4628      	mov	r0, r5
 801a87a:	f108 0110 	add.w	r1, r8, #16
 801a87e:	f7fd ff1b 	bl	80186b8 <ucdr_deserialize_array_uint8_t>
 801a882:	b930      	cbnz	r0, 801a892 <on_topic+0x6e>
 801a884:	480c      	ldr	r0, [pc, #48]	@ (801a8b8 <on_topic+0x94>)
 801a886:	4639      	mov	r1, r7
 801a888:	b014      	add	sp, #80	@ 0x50
 801a88a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801a88e:	f7fc bb3f 	b.w	8016f10 <put_memory>
 801a892:	f8c8 4814 	str.w	r4, [r8, #2068]	@ 0x814
 801a896:	f8c8 6810 	str.w	r6, [r8, #2064]	@ 0x810
 801a89a:	f7fd fc67 	bl	801816c <rmw_uros_epoch_nanos>
 801a89e:	f508 6202 	add.w	r2, r8, #2080	@ 0x820
 801a8a2:	2305      	movs	r3, #5
 801a8a4:	e942 0102 	strd	r0, r1, [r2, #-8]
 801a8a8:	f888 3820 	strb.w	r3, [r8, #2080]	@ 0x820
 801a8ac:	b014      	add	sp, #80	@ 0x50
 801a8ae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801a8b2:	bf00      	nop
 801a8b4:	2000c0ac 	.word	0x2000c0ac
 801a8b8:	2000c09c 	.word	0x2000c09c

0801a8bc <on_request>:
 801a8bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801a8c0:	4823      	ldr	r0, [pc, #140]	@ (801a950 <on_request+0x94>)
 801a8c2:	b094      	sub	sp, #80	@ 0x50
 801a8c4:	6800      	ldr	r0, [r0, #0]
 801a8c6:	9f1a      	ldr	r7, [sp, #104]	@ 0x68
 801a8c8:	f8bd 606c 	ldrh.w	r6, [sp, #108]	@ 0x6c
 801a8cc:	9113      	str	r1, [sp, #76]	@ 0x4c
 801a8ce:	2800      	cmp	r0, #0
 801a8d0:	d03b      	beq.n	801a94a <on_request+0x8e>
 801a8d2:	461d      	mov	r5, r3
 801a8d4:	e001      	b.n	801a8da <on_request+0x1e>
 801a8d6:	6840      	ldr	r0, [r0, #4]
 801a8d8:	b3b8      	cbz	r0, 801a94a <on_request+0x8e>
 801a8da:	6884      	ldr	r4, [r0, #8]
 801a8dc:	8b21      	ldrh	r1, [r4, #24]
 801a8de:	4291      	cmp	r1, r2
 801a8e0:	d1f9      	bne.n	801a8d6 <on_request+0x1a>
 801a8e2:	2248      	movs	r2, #72	@ 0x48
 801a8e4:	f104 0128 	add.w	r1, r4, #40	@ 0x28
 801a8e8:	4668      	mov	r0, sp
 801a8ea:	f000 ff1e 	bl	801b72a <memcpy>
 801a8ee:	f104 0320 	add.w	r3, r4, #32
 801a8f2:	cb0c      	ldmia	r3, {r2, r3}
 801a8f4:	4620      	mov	r0, r4
 801a8f6:	f7f4 f997 	bl	800ec28 <rmw_uxrce_get_static_input_buffer_for_entity>
 801a8fa:	4680      	mov	r8, r0
 801a8fc:	b328      	cbz	r0, 801a94a <on_request+0x8e>
 801a8fe:	4638      	mov	r0, r7
 801a900:	f8d8 7008 	ldr.w	r7, [r8, #8]
 801a904:	4632      	mov	r2, r6
 801a906:	f107 0110 	add.w	r1, r7, #16
 801a90a:	f7fd fed5 	bl	80186b8 <ucdr_deserialize_array_uint8_t>
 801a90e:	b930      	cbnz	r0, 801a91e <on_request+0x62>
 801a910:	4810      	ldr	r0, [pc, #64]	@ (801a954 <on_request+0x98>)
 801a912:	4641      	mov	r1, r8
 801a914:	b014      	add	sp, #80	@ 0x50
 801a916:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801a91a:	f7fc baf9 	b.w	8016f10 <put_memory>
 801a91e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801a920:	f607 0c28 	addw	ip, r7, #2088	@ 0x828
 801a924:	f8c7 4814 	str.w	r4, [r7, #2068]	@ 0x814
 801a928:	f8c7 6810 	str.w	r6, [r7, #2064]	@ 0x810
 801a92c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801a930:	e895 0003 	ldmia.w	r5, {r0, r1}
 801a934:	e88c 0003 	stmia.w	ip, {r0, r1}
 801a938:	f7fd fc18 	bl	801816c <rmw_uros_epoch_nanos>
 801a93c:	f507 6202 	add.w	r2, r7, #2080	@ 0x820
 801a940:	2303      	movs	r3, #3
 801a942:	e942 0102 	strd	r0, r1, [r2, #-8]
 801a946:	f887 3820 	strb.w	r3, [r7, #2080]	@ 0x820
 801a94a:	b014      	add	sp, #80	@ 0x50
 801a94c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801a950:	2000c07c 	.word	0x2000c07c
 801a954:	2000c09c 	.word	0x2000c09c

0801a958 <on_reply>:
 801a958:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801a95c:	4821      	ldr	r0, [pc, #132]	@ (801a9e4 <on_reply+0x8c>)
 801a95e:	b094      	sub	sp, #80	@ 0x50
 801a960:	6800      	ldr	r0, [r0, #0]
 801a962:	9f1a      	ldr	r7, [sp, #104]	@ 0x68
 801a964:	f8bd 606c 	ldrh.w	r6, [sp, #108]	@ 0x6c
 801a968:	9113      	str	r1, [sp, #76]	@ 0x4c
 801a96a:	b3b8      	cbz	r0, 801a9dc <on_reply+0x84>
 801a96c:	461d      	mov	r5, r3
 801a96e:	e001      	b.n	801a974 <on_reply+0x1c>
 801a970:	6840      	ldr	r0, [r0, #4]
 801a972:	b398      	cbz	r0, 801a9dc <on_reply+0x84>
 801a974:	6884      	ldr	r4, [r0, #8]
 801a976:	8b21      	ldrh	r1, [r4, #24]
 801a978:	4291      	cmp	r1, r2
 801a97a:	d1f9      	bne.n	801a970 <on_reply+0x18>
 801a97c:	2248      	movs	r2, #72	@ 0x48
 801a97e:	f104 0128 	add.w	r1, r4, #40	@ 0x28
 801a982:	4668      	mov	r0, sp
 801a984:	f000 fed1 	bl	801b72a <memcpy>
 801a988:	f104 0320 	add.w	r3, r4, #32
 801a98c:	cb0c      	ldmia	r3, {r2, r3}
 801a98e:	4620      	mov	r0, r4
 801a990:	f7f4 f94a 	bl	800ec28 <rmw_uxrce_get_static_input_buffer_for_entity>
 801a994:	4680      	mov	r8, r0
 801a996:	b308      	cbz	r0, 801a9dc <on_reply+0x84>
 801a998:	4638      	mov	r0, r7
 801a99a:	f8d8 7008 	ldr.w	r7, [r8, #8]
 801a99e:	4632      	mov	r2, r6
 801a9a0:	f107 0110 	add.w	r1, r7, #16
 801a9a4:	f7fd fe88 	bl	80186b8 <ucdr_deserialize_array_uint8_t>
 801a9a8:	b930      	cbnz	r0, 801a9b8 <on_reply+0x60>
 801a9aa:	480f      	ldr	r0, [pc, #60]	@ (801a9e8 <on_reply+0x90>)
 801a9ac:	4641      	mov	r1, r8
 801a9ae:	b014      	add	sp, #80	@ 0x50
 801a9b0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801a9b4:	f7fc baac 	b.w	8016f10 <put_memory>
 801a9b8:	2200      	movs	r2, #0
 801a9ba:	f8c7 282c 	str.w	r2, [r7, #2092]	@ 0x82c
 801a9be:	f8c7 4814 	str.w	r4, [r7, #2068]	@ 0x814
 801a9c2:	f8c7 6810 	str.w	r6, [r7, #2064]	@ 0x810
 801a9c6:	f8c7 5828 	str.w	r5, [r7, #2088]	@ 0x828
 801a9ca:	f7fd fbcf 	bl	801816c <rmw_uros_epoch_nanos>
 801a9ce:	f507 6202 	add.w	r2, r7, #2080	@ 0x820
 801a9d2:	2304      	movs	r3, #4
 801a9d4:	e942 0102 	strd	r0, r1, [r2, #-8]
 801a9d8:	f887 3820 	strb.w	r3, [r7, #2080]	@ 0x820
 801a9dc:	b014      	add	sp, #80	@ 0x50
 801a9de:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801a9e2:	bf00      	nop
 801a9e4:	20007790 	.word	0x20007790
 801a9e8:	2000c09c 	.word	0x2000c09c

0801a9ec <rmw_create_guard_condition>:
 801a9ec:	b538      	push	{r3, r4, r5, lr}
 801a9ee:	4605      	mov	r5, r0
 801a9f0:	4807      	ldr	r0, [pc, #28]	@ (801aa10 <rmw_create_guard_condition+0x24>)
 801a9f2:	f7fc fa7d 	bl	8016ef0 <get_memory>
 801a9f6:	b148      	cbz	r0, 801aa0c <rmw_create_guard_condition+0x20>
 801a9f8:	6884      	ldr	r4, [r0, #8]
 801a9fa:	2300      	movs	r3, #0
 801a9fc:	7423      	strb	r3, [r4, #16]
 801a9fe:	61e5      	str	r5, [r4, #28]
 801aa00:	f7fc fade 	bl	8016fc0 <rmw_get_implementation_identifier>
 801aa04:	e9c4 0405 	strd	r0, r4, [r4, #20]
 801aa08:	f104 0014 	add.w	r0, r4, #20
 801aa0c:	bd38      	pop	{r3, r4, r5, pc}
 801aa0e:	bf00      	nop
 801aa10:	2000c03c 	.word	0x2000c03c

0801aa14 <rmw_destroy_guard_condition>:
 801aa14:	b508      	push	{r3, lr}
 801aa16:	4b08      	ldr	r3, [pc, #32]	@ (801aa38 <rmw_destroy_guard_condition+0x24>)
 801aa18:	6819      	ldr	r1, [r3, #0]
 801aa1a:	b911      	cbnz	r1, 801aa22 <rmw_destroy_guard_condition+0xe>
 801aa1c:	e00a      	b.n	801aa34 <rmw_destroy_guard_condition+0x20>
 801aa1e:	6849      	ldr	r1, [r1, #4]
 801aa20:	b141      	cbz	r1, 801aa34 <rmw_destroy_guard_condition+0x20>
 801aa22:	688b      	ldr	r3, [r1, #8]
 801aa24:	3314      	adds	r3, #20
 801aa26:	4298      	cmp	r0, r3
 801aa28:	d1f9      	bne.n	801aa1e <rmw_destroy_guard_condition+0xa>
 801aa2a:	4803      	ldr	r0, [pc, #12]	@ (801aa38 <rmw_destroy_guard_condition+0x24>)
 801aa2c:	f7fc fa70 	bl	8016f10 <put_memory>
 801aa30:	2000      	movs	r0, #0
 801aa32:	bd08      	pop	{r3, pc}
 801aa34:	2001      	movs	r0, #1
 801aa36:	bd08      	pop	{r3, pc}
 801aa38:	2000c03c 	.word	0x2000c03c

0801aa3c <rmw_trigger_guard_condition>:
 801aa3c:	b160      	cbz	r0, 801aa58 <rmw_trigger_guard_condition+0x1c>
 801aa3e:	b510      	push	{r4, lr}
 801aa40:	4604      	mov	r4, r0
 801aa42:	6800      	ldr	r0, [r0, #0]
 801aa44:	f7f4 fa66 	bl	800ef14 <is_uxrce_rmw_identifier_valid>
 801aa48:	b908      	cbnz	r0, 801aa4e <rmw_trigger_guard_condition+0x12>
 801aa4a:	2001      	movs	r0, #1
 801aa4c:	bd10      	pop	{r4, pc}
 801aa4e:	6863      	ldr	r3, [r4, #4]
 801aa50:	2201      	movs	r2, #1
 801aa52:	741a      	strb	r2, [r3, #16]
 801aa54:	2000      	movs	r0, #0
 801aa56:	bd10      	pop	{r4, pc}
 801aa58:	2001      	movs	r0, #1
 801aa5a:	4770      	bx	lr

0801aa5c <rosidl_runtime_c__String__init>:
 801aa5c:	b510      	push	{r4, lr}
 801aa5e:	4604      	mov	r4, r0
 801aa60:	b086      	sub	sp, #24
 801aa62:	b170      	cbz	r0, 801aa82 <rosidl_runtime_c__String__init+0x26>
 801aa64:	a801      	add	r0, sp, #4
 801aa66:	f7f3 fca1 	bl	800e3ac <rcutils_get_default_allocator>
 801aa6a:	9b01      	ldr	r3, [sp, #4]
 801aa6c:	9905      	ldr	r1, [sp, #20]
 801aa6e:	2001      	movs	r0, #1
 801aa70:	4798      	blx	r3
 801aa72:	6020      	str	r0, [r4, #0]
 801aa74:	b128      	cbz	r0, 801aa82 <rosidl_runtime_c__String__init+0x26>
 801aa76:	2100      	movs	r1, #0
 801aa78:	2201      	movs	r2, #1
 801aa7a:	7001      	strb	r1, [r0, #0]
 801aa7c:	e9c4 1201 	strd	r1, r2, [r4, #4]
 801aa80:	4610      	mov	r0, r2
 801aa82:	b006      	add	sp, #24
 801aa84:	bd10      	pop	{r4, pc}
 801aa86:	bf00      	nop

0801aa88 <rosidl_runtime_c__String__fini>:
 801aa88:	b320      	cbz	r0, 801aad4 <rosidl_runtime_c__String__fini+0x4c>
 801aa8a:	b510      	push	{r4, lr}
 801aa8c:	6803      	ldr	r3, [r0, #0]
 801aa8e:	b086      	sub	sp, #24
 801aa90:	4604      	mov	r4, r0
 801aa92:	b173      	cbz	r3, 801aab2 <rosidl_runtime_c__String__fini+0x2a>
 801aa94:	6883      	ldr	r3, [r0, #8]
 801aa96:	b1f3      	cbz	r3, 801aad6 <rosidl_runtime_c__String__fini+0x4e>
 801aa98:	a801      	add	r0, sp, #4
 801aa9a:	f7f3 fc87 	bl	800e3ac <rcutils_get_default_allocator>
 801aa9e:	9b02      	ldr	r3, [sp, #8]
 801aaa0:	9905      	ldr	r1, [sp, #20]
 801aaa2:	6820      	ldr	r0, [r4, #0]
 801aaa4:	4798      	blx	r3
 801aaa6:	2300      	movs	r3, #0
 801aaa8:	e9c4 3300 	strd	r3, r3, [r4]
 801aaac:	60a3      	str	r3, [r4, #8]
 801aaae:	b006      	add	sp, #24
 801aab0:	bd10      	pop	{r4, pc}
 801aab2:	6843      	ldr	r3, [r0, #4]
 801aab4:	b9db      	cbnz	r3, 801aaee <rosidl_runtime_c__String__fini+0x66>
 801aab6:	6883      	ldr	r3, [r0, #8]
 801aab8:	2b00      	cmp	r3, #0
 801aaba:	d0f8      	beq.n	801aaae <rosidl_runtime_c__String__fini+0x26>
 801aabc:	4b12      	ldr	r3, [pc, #72]	@ (801ab08 <rosidl_runtime_c__String__fini+0x80>)
 801aabe:	4813      	ldr	r0, [pc, #76]	@ (801ab0c <rosidl_runtime_c__String__fini+0x84>)
 801aac0:	681b      	ldr	r3, [r3, #0]
 801aac2:	2251      	movs	r2, #81	@ 0x51
 801aac4:	68db      	ldr	r3, [r3, #12]
 801aac6:	2101      	movs	r1, #1
 801aac8:	f000 fb82 	bl	801b1d0 <fwrite>
 801aacc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801aad0:	f000 f83e 	bl	801ab50 <exit>
 801aad4:	4770      	bx	lr
 801aad6:	4b0c      	ldr	r3, [pc, #48]	@ (801ab08 <rosidl_runtime_c__String__fini+0x80>)
 801aad8:	480d      	ldr	r0, [pc, #52]	@ (801ab10 <rosidl_runtime_c__String__fini+0x88>)
 801aada:	681b      	ldr	r3, [r3, #0]
 801aadc:	224c      	movs	r2, #76	@ 0x4c
 801aade:	68db      	ldr	r3, [r3, #12]
 801aae0:	2101      	movs	r1, #1
 801aae2:	f000 fb75 	bl	801b1d0 <fwrite>
 801aae6:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801aaea:	f000 f831 	bl	801ab50 <exit>
 801aaee:	4b06      	ldr	r3, [pc, #24]	@ (801ab08 <rosidl_runtime_c__String__fini+0x80>)
 801aaf0:	4808      	ldr	r0, [pc, #32]	@ (801ab14 <rosidl_runtime_c__String__fini+0x8c>)
 801aaf2:	681b      	ldr	r3, [r3, #0]
 801aaf4:	224e      	movs	r2, #78	@ 0x4e
 801aaf6:	68db      	ldr	r3, [r3, #12]
 801aaf8:	2101      	movs	r1, #1
 801aafa:	f000 fb69 	bl	801b1d0 <fwrite>
 801aafe:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801ab02:	f000 f825 	bl	801ab50 <exit>
 801ab06:	bf00      	nop
 801ab08:	200002ac 	.word	0x200002ac
 801ab0c:	0801e0b8 	.word	0x0801e0b8
 801ab10:	0801e018 	.word	0x0801e018
 801ab14:	0801e068 	.word	0x0801e068

0801ab18 <calloc>:
 801ab18:	4b02      	ldr	r3, [pc, #8]	@ (801ab24 <calloc+0xc>)
 801ab1a:	460a      	mov	r2, r1
 801ab1c:	4601      	mov	r1, r0
 801ab1e:	6818      	ldr	r0, [r3, #0]
 801ab20:	f000 b802 	b.w	801ab28 <_calloc_r>
 801ab24:	200002ac 	.word	0x200002ac

0801ab28 <_calloc_r>:
 801ab28:	b570      	push	{r4, r5, r6, lr}
 801ab2a:	fba1 5402 	umull	r5, r4, r1, r2
 801ab2e:	b93c      	cbnz	r4, 801ab40 <_calloc_r+0x18>
 801ab30:	4629      	mov	r1, r5
 801ab32:	f000 f899 	bl	801ac68 <_malloc_r>
 801ab36:	4606      	mov	r6, r0
 801ab38:	b928      	cbnz	r0, 801ab46 <_calloc_r+0x1e>
 801ab3a:	2600      	movs	r6, #0
 801ab3c:	4630      	mov	r0, r6
 801ab3e:	bd70      	pop	{r4, r5, r6, pc}
 801ab40:	220c      	movs	r2, #12
 801ab42:	6002      	str	r2, [r0, #0]
 801ab44:	e7f9      	b.n	801ab3a <_calloc_r+0x12>
 801ab46:	462a      	mov	r2, r5
 801ab48:	4621      	mov	r1, r4
 801ab4a:	f000 fccf 	bl	801b4ec <memset>
 801ab4e:	e7f5      	b.n	801ab3c <_calloc_r+0x14>

0801ab50 <exit>:
 801ab50:	b508      	push	{r3, lr}
 801ab52:	4b06      	ldr	r3, [pc, #24]	@ (801ab6c <exit+0x1c>)
 801ab54:	4604      	mov	r4, r0
 801ab56:	b113      	cbz	r3, 801ab5e <exit+0xe>
 801ab58:	2100      	movs	r1, #0
 801ab5a:	f3af 8000 	nop.w
 801ab5e:	4b04      	ldr	r3, [pc, #16]	@ (801ab70 <exit+0x20>)
 801ab60:	681b      	ldr	r3, [r3, #0]
 801ab62:	b103      	cbz	r3, 801ab66 <exit+0x16>
 801ab64:	4798      	blx	r3
 801ab66:	4620      	mov	r0, r4
 801ab68:	f7e7 fe22 	bl	80027b0 <_exit>
 801ab6c:	00000000 	.word	0x00000000
 801ab70:	2000c3a0 	.word	0x2000c3a0

0801ab74 <getenv>:
 801ab74:	b507      	push	{r0, r1, r2, lr}
 801ab76:	4b04      	ldr	r3, [pc, #16]	@ (801ab88 <getenv+0x14>)
 801ab78:	4601      	mov	r1, r0
 801ab7a:	aa01      	add	r2, sp, #4
 801ab7c:	6818      	ldr	r0, [r3, #0]
 801ab7e:	f000 f805 	bl	801ab8c <_findenv_r>
 801ab82:	b003      	add	sp, #12
 801ab84:	f85d fb04 	ldr.w	pc, [sp], #4
 801ab88:	200002ac 	.word	0x200002ac

0801ab8c <_findenv_r>:
 801ab8c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ab90:	f8df a06c 	ldr.w	sl, [pc, #108]	@ 801ac00 <_findenv_r+0x74>
 801ab94:	4606      	mov	r6, r0
 801ab96:	4689      	mov	r9, r1
 801ab98:	4617      	mov	r7, r2
 801ab9a:	f000 fdf3 	bl	801b784 <__env_lock>
 801ab9e:	f8da 4000 	ldr.w	r4, [sl]
 801aba2:	b134      	cbz	r4, 801abb2 <_findenv_r+0x26>
 801aba4:	464b      	mov	r3, r9
 801aba6:	4698      	mov	r8, r3
 801aba8:	f813 2b01 	ldrb.w	r2, [r3], #1
 801abac:	b13a      	cbz	r2, 801abbe <_findenv_r+0x32>
 801abae:	2a3d      	cmp	r2, #61	@ 0x3d
 801abb0:	d1f9      	bne.n	801aba6 <_findenv_r+0x1a>
 801abb2:	4630      	mov	r0, r6
 801abb4:	f000 fdec 	bl	801b790 <__env_unlock>
 801abb8:	2000      	movs	r0, #0
 801abba:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801abbe:	eba8 0809 	sub.w	r8, r8, r9
 801abc2:	46a3      	mov	fp, r4
 801abc4:	f854 0b04 	ldr.w	r0, [r4], #4
 801abc8:	2800      	cmp	r0, #0
 801abca:	d0f2      	beq.n	801abb2 <_findenv_r+0x26>
 801abcc:	4642      	mov	r2, r8
 801abce:	4649      	mov	r1, r9
 801abd0:	f000 fca1 	bl	801b516 <strncmp>
 801abd4:	2800      	cmp	r0, #0
 801abd6:	d1f4      	bne.n	801abc2 <_findenv_r+0x36>
 801abd8:	f854 3c04 	ldr.w	r3, [r4, #-4]
 801abdc:	eb03 0508 	add.w	r5, r3, r8
 801abe0:	f813 3008 	ldrb.w	r3, [r3, r8]
 801abe4:	2b3d      	cmp	r3, #61	@ 0x3d
 801abe6:	d1ec      	bne.n	801abc2 <_findenv_r+0x36>
 801abe8:	f8da 3000 	ldr.w	r3, [sl]
 801abec:	ebab 0303 	sub.w	r3, fp, r3
 801abf0:	109b      	asrs	r3, r3, #2
 801abf2:	4630      	mov	r0, r6
 801abf4:	603b      	str	r3, [r7, #0]
 801abf6:	f000 fdcb 	bl	801b790 <__env_unlock>
 801abfa:	1c68      	adds	r0, r5, #1
 801abfc:	e7dd      	b.n	801abba <_findenv_r+0x2e>
 801abfe:	bf00      	nop
 801ac00:	2000001c 	.word	0x2000001c

0801ac04 <malloc>:
 801ac04:	4b02      	ldr	r3, [pc, #8]	@ (801ac10 <malloc+0xc>)
 801ac06:	4601      	mov	r1, r0
 801ac08:	6818      	ldr	r0, [r3, #0]
 801ac0a:	f000 b82d 	b.w	801ac68 <_malloc_r>
 801ac0e:	bf00      	nop
 801ac10:	200002ac 	.word	0x200002ac

0801ac14 <free>:
 801ac14:	4b02      	ldr	r3, [pc, #8]	@ (801ac20 <free+0xc>)
 801ac16:	4601      	mov	r1, r0
 801ac18:	6818      	ldr	r0, [r3, #0]
 801ac1a:	f000 bdbf 	b.w	801b79c <_free_r>
 801ac1e:	bf00      	nop
 801ac20:	200002ac 	.word	0x200002ac

0801ac24 <sbrk_aligned>:
 801ac24:	b570      	push	{r4, r5, r6, lr}
 801ac26:	4e0f      	ldr	r6, [pc, #60]	@ (801ac64 <sbrk_aligned+0x40>)
 801ac28:	460c      	mov	r4, r1
 801ac2a:	6831      	ldr	r1, [r6, #0]
 801ac2c:	4605      	mov	r5, r0
 801ac2e:	b911      	cbnz	r1, 801ac36 <sbrk_aligned+0x12>
 801ac30:	f000 fd24 	bl	801b67c <_sbrk_r>
 801ac34:	6030      	str	r0, [r6, #0]
 801ac36:	4621      	mov	r1, r4
 801ac38:	4628      	mov	r0, r5
 801ac3a:	f000 fd1f 	bl	801b67c <_sbrk_r>
 801ac3e:	1c43      	adds	r3, r0, #1
 801ac40:	d103      	bne.n	801ac4a <sbrk_aligned+0x26>
 801ac42:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 801ac46:	4620      	mov	r0, r4
 801ac48:	bd70      	pop	{r4, r5, r6, pc}
 801ac4a:	1cc4      	adds	r4, r0, #3
 801ac4c:	f024 0403 	bic.w	r4, r4, #3
 801ac50:	42a0      	cmp	r0, r4
 801ac52:	d0f8      	beq.n	801ac46 <sbrk_aligned+0x22>
 801ac54:	1a21      	subs	r1, r4, r0
 801ac56:	4628      	mov	r0, r5
 801ac58:	f000 fd10 	bl	801b67c <_sbrk_r>
 801ac5c:	3001      	adds	r0, #1
 801ac5e:	d1f2      	bne.n	801ac46 <sbrk_aligned+0x22>
 801ac60:	e7ef      	b.n	801ac42 <sbrk_aligned+0x1e>
 801ac62:	bf00      	nop
 801ac64:	2000c260 	.word	0x2000c260

0801ac68 <_malloc_r>:
 801ac68:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801ac6c:	1ccd      	adds	r5, r1, #3
 801ac6e:	f025 0503 	bic.w	r5, r5, #3
 801ac72:	3508      	adds	r5, #8
 801ac74:	2d0c      	cmp	r5, #12
 801ac76:	bf38      	it	cc
 801ac78:	250c      	movcc	r5, #12
 801ac7a:	2d00      	cmp	r5, #0
 801ac7c:	4606      	mov	r6, r0
 801ac7e:	db01      	blt.n	801ac84 <_malloc_r+0x1c>
 801ac80:	42a9      	cmp	r1, r5
 801ac82:	d904      	bls.n	801ac8e <_malloc_r+0x26>
 801ac84:	230c      	movs	r3, #12
 801ac86:	6033      	str	r3, [r6, #0]
 801ac88:	2000      	movs	r0, #0
 801ac8a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801ac8e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 801ad64 <_malloc_r+0xfc>
 801ac92:	f000 f869 	bl	801ad68 <__malloc_lock>
 801ac96:	f8d8 3000 	ldr.w	r3, [r8]
 801ac9a:	461c      	mov	r4, r3
 801ac9c:	bb44      	cbnz	r4, 801acf0 <_malloc_r+0x88>
 801ac9e:	4629      	mov	r1, r5
 801aca0:	4630      	mov	r0, r6
 801aca2:	f7ff ffbf 	bl	801ac24 <sbrk_aligned>
 801aca6:	1c43      	adds	r3, r0, #1
 801aca8:	4604      	mov	r4, r0
 801acaa:	d158      	bne.n	801ad5e <_malloc_r+0xf6>
 801acac:	f8d8 4000 	ldr.w	r4, [r8]
 801acb0:	4627      	mov	r7, r4
 801acb2:	2f00      	cmp	r7, #0
 801acb4:	d143      	bne.n	801ad3e <_malloc_r+0xd6>
 801acb6:	2c00      	cmp	r4, #0
 801acb8:	d04b      	beq.n	801ad52 <_malloc_r+0xea>
 801acba:	6823      	ldr	r3, [r4, #0]
 801acbc:	4639      	mov	r1, r7
 801acbe:	4630      	mov	r0, r6
 801acc0:	eb04 0903 	add.w	r9, r4, r3
 801acc4:	f000 fcda 	bl	801b67c <_sbrk_r>
 801acc8:	4581      	cmp	r9, r0
 801acca:	d142      	bne.n	801ad52 <_malloc_r+0xea>
 801accc:	6821      	ldr	r1, [r4, #0]
 801acce:	1a6d      	subs	r5, r5, r1
 801acd0:	4629      	mov	r1, r5
 801acd2:	4630      	mov	r0, r6
 801acd4:	f7ff ffa6 	bl	801ac24 <sbrk_aligned>
 801acd8:	3001      	adds	r0, #1
 801acda:	d03a      	beq.n	801ad52 <_malloc_r+0xea>
 801acdc:	6823      	ldr	r3, [r4, #0]
 801acde:	442b      	add	r3, r5
 801ace0:	6023      	str	r3, [r4, #0]
 801ace2:	f8d8 3000 	ldr.w	r3, [r8]
 801ace6:	685a      	ldr	r2, [r3, #4]
 801ace8:	bb62      	cbnz	r2, 801ad44 <_malloc_r+0xdc>
 801acea:	f8c8 7000 	str.w	r7, [r8]
 801acee:	e00f      	b.n	801ad10 <_malloc_r+0xa8>
 801acf0:	6822      	ldr	r2, [r4, #0]
 801acf2:	1b52      	subs	r2, r2, r5
 801acf4:	d420      	bmi.n	801ad38 <_malloc_r+0xd0>
 801acf6:	2a0b      	cmp	r2, #11
 801acf8:	d917      	bls.n	801ad2a <_malloc_r+0xc2>
 801acfa:	1961      	adds	r1, r4, r5
 801acfc:	42a3      	cmp	r3, r4
 801acfe:	6025      	str	r5, [r4, #0]
 801ad00:	bf18      	it	ne
 801ad02:	6059      	strne	r1, [r3, #4]
 801ad04:	6863      	ldr	r3, [r4, #4]
 801ad06:	bf08      	it	eq
 801ad08:	f8c8 1000 	streq.w	r1, [r8]
 801ad0c:	5162      	str	r2, [r4, r5]
 801ad0e:	604b      	str	r3, [r1, #4]
 801ad10:	4630      	mov	r0, r6
 801ad12:	f000 f82f 	bl	801ad74 <__malloc_unlock>
 801ad16:	f104 000b 	add.w	r0, r4, #11
 801ad1a:	1d23      	adds	r3, r4, #4
 801ad1c:	f020 0007 	bic.w	r0, r0, #7
 801ad20:	1ac2      	subs	r2, r0, r3
 801ad22:	bf1c      	itt	ne
 801ad24:	1a1b      	subne	r3, r3, r0
 801ad26:	50a3      	strne	r3, [r4, r2]
 801ad28:	e7af      	b.n	801ac8a <_malloc_r+0x22>
 801ad2a:	6862      	ldr	r2, [r4, #4]
 801ad2c:	42a3      	cmp	r3, r4
 801ad2e:	bf0c      	ite	eq
 801ad30:	f8c8 2000 	streq.w	r2, [r8]
 801ad34:	605a      	strne	r2, [r3, #4]
 801ad36:	e7eb      	b.n	801ad10 <_malloc_r+0xa8>
 801ad38:	4623      	mov	r3, r4
 801ad3a:	6864      	ldr	r4, [r4, #4]
 801ad3c:	e7ae      	b.n	801ac9c <_malloc_r+0x34>
 801ad3e:	463c      	mov	r4, r7
 801ad40:	687f      	ldr	r7, [r7, #4]
 801ad42:	e7b6      	b.n	801acb2 <_malloc_r+0x4a>
 801ad44:	461a      	mov	r2, r3
 801ad46:	685b      	ldr	r3, [r3, #4]
 801ad48:	42a3      	cmp	r3, r4
 801ad4a:	d1fb      	bne.n	801ad44 <_malloc_r+0xdc>
 801ad4c:	2300      	movs	r3, #0
 801ad4e:	6053      	str	r3, [r2, #4]
 801ad50:	e7de      	b.n	801ad10 <_malloc_r+0xa8>
 801ad52:	230c      	movs	r3, #12
 801ad54:	6033      	str	r3, [r6, #0]
 801ad56:	4630      	mov	r0, r6
 801ad58:	f000 f80c 	bl	801ad74 <__malloc_unlock>
 801ad5c:	e794      	b.n	801ac88 <_malloc_r+0x20>
 801ad5e:	6005      	str	r5, [r0, #0]
 801ad60:	e7d6      	b.n	801ad10 <_malloc_r+0xa8>
 801ad62:	bf00      	nop
 801ad64:	2000c264 	.word	0x2000c264

0801ad68 <__malloc_lock>:
 801ad68:	4801      	ldr	r0, [pc, #4]	@ (801ad70 <__malloc_lock+0x8>)
 801ad6a:	f000 bcd4 	b.w	801b716 <__retarget_lock_acquire_recursive>
 801ad6e:	bf00      	nop
 801ad70:	2000c3a9 	.word	0x2000c3a9

0801ad74 <__malloc_unlock>:
 801ad74:	4801      	ldr	r0, [pc, #4]	@ (801ad7c <__malloc_unlock+0x8>)
 801ad76:	f000 bccf 	b.w	801b718 <__retarget_lock_release_recursive>
 801ad7a:	bf00      	nop
 801ad7c:	2000c3a9 	.word	0x2000c3a9

0801ad80 <srand>:
 801ad80:	b538      	push	{r3, r4, r5, lr}
 801ad82:	4b10      	ldr	r3, [pc, #64]	@ (801adc4 <srand+0x44>)
 801ad84:	681d      	ldr	r5, [r3, #0]
 801ad86:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 801ad88:	4604      	mov	r4, r0
 801ad8a:	b9b3      	cbnz	r3, 801adba <srand+0x3a>
 801ad8c:	2018      	movs	r0, #24
 801ad8e:	f7ff ff39 	bl	801ac04 <malloc>
 801ad92:	4602      	mov	r2, r0
 801ad94:	6328      	str	r0, [r5, #48]	@ 0x30
 801ad96:	b920      	cbnz	r0, 801ada2 <srand+0x22>
 801ad98:	4b0b      	ldr	r3, [pc, #44]	@ (801adc8 <srand+0x48>)
 801ad9a:	480c      	ldr	r0, [pc, #48]	@ (801adcc <srand+0x4c>)
 801ad9c:	2146      	movs	r1, #70	@ 0x46
 801ad9e:	f000 fcd3 	bl	801b748 <__assert_func>
 801ada2:	490b      	ldr	r1, [pc, #44]	@ (801add0 <srand+0x50>)
 801ada4:	4b0b      	ldr	r3, [pc, #44]	@ (801add4 <srand+0x54>)
 801ada6:	e9c0 1300 	strd	r1, r3, [r0]
 801adaa:	4b0b      	ldr	r3, [pc, #44]	@ (801add8 <srand+0x58>)
 801adac:	6083      	str	r3, [r0, #8]
 801adae:	230b      	movs	r3, #11
 801adb0:	8183      	strh	r3, [r0, #12]
 801adb2:	2100      	movs	r1, #0
 801adb4:	2001      	movs	r0, #1
 801adb6:	e9c2 0104 	strd	r0, r1, [r2, #16]
 801adba:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 801adbc:	2200      	movs	r2, #0
 801adbe:	611c      	str	r4, [r3, #16]
 801adc0:	615a      	str	r2, [r3, #20]
 801adc2:	bd38      	pop	{r3, r4, r5, pc}
 801adc4:	200002ac 	.word	0x200002ac
 801adc8:	0801e10a 	.word	0x0801e10a
 801adcc:	0801e121 	.word	0x0801e121
 801add0:	abcd330e 	.word	0xabcd330e
 801add4:	e66d1234 	.word	0xe66d1234
 801add8:	0005deec 	.word	0x0005deec

0801addc <rand>:
 801addc:	4b16      	ldr	r3, [pc, #88]	@ (801ae38 <rand+0x5c>)
 801adde:	b510      	push	{r4, lr}
 801ade0:	681c      	ldr	r4, [r3, #0]
 801ade2:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801ade4:	b9b3      	cbnz	r3, 801ae14 <rand+0x38>
 801ade6:	2018      	movs	r0, #24
 801ade8:	f7ff ff0c 	bl	801ac04 <malloc>
 801adec:	4602      	mov	r2, r0
 801adee:	6320      	str	r0, [r4, #48]	@ 0x30
 801adf0:	b920      	cbnz	r0, 801adfc <rand+0x20>
 801adf2:	4b12      	ldr	r3, [pc, #72]	@ (801ae3c <rand+0x60>)
 801adf4:	4812      	ldr	r0, [pc, #72]	@ (801ae40 <rand+0x64>)
 801adf6:	2152      	movs	r1, #82	@ 0x52
 801adf8:	f000 fca6 	bl	801b748 <__assert_func>
 801adfc:	4911      	ldr	r1, [pc, #68]	@ (801ae44 <rand+0x68>)
 801adfe:	4b12      	ldr	r3, [pc, #72]	@ (801ae48 <rand+0x6c>)
 801ae00:	e9c0 1300 	strd	r1, r3, [r0]
 801ae04:	4b11      	ldr	r3, [pc, #68]	@ (801ae4c <rand+0x70>)
 801ae06:	6083      	str	r3, [r0, #8]
 801ae08:	230b      	movs	r3, #11
 801ae0a:	8183      	strh	r3, [r0, #12]
 801ae0c:	2100      	movs	r1, #0
 801ae0e:	2001      	movs	r0, #1
 801ae10:	e9c2 0104 	strd	r0, r1, [r2, #16]
 801ae14:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 801ae16:	480e      	ldr	r0, [pc, #56]	@ (801ae50 <rand+0x74>)
 801ae18:	690b      	ldr	r3, [r1, #16]
 801ae1a:	694c      	ldr	r4, [r1, #20]
 801ae1c:	4a0d      	ldr	r2, [pc, #52]	@ (801ae54 <rand+0x78>)
 801ae1e:	4358      	muls	r0, r3
 801ae20:	fb02 0004 	mla	r0, r2, r4, r0
 801ae24:	fba3 3202 	umull	r3, r2, r3, r2
 801ae28:	3301      	adds	r3, #1
 801ae2a:	eb40 0002 	adc.w	r0, r0, r2
 801ae2e:	e9c1 3004 	strd	r3, r0, [r1, #16]
 801ae32:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 801ae36:	bd10      	pop	{r4, pc}
 801ae38:	200002ac 	.word	0x200002ac
 801ae3c:	0801e10a 	.word	0x0801e10a
 801ae40:	0801e121 	.word	0x0801e121
 801ae44:	abcd330e 	.word	0xabcd330e
 801ae48:	e66d1234 	.word	0xe66d1234
 801ae4c:	0005deec 	.word	0x0005deec
 801ae50:	5851f42d 	.word	0x5851f42d
 801ae54:	4c957f2d 	.word	0x4c957f2d

0801ae58 <realloc>:
 801ae58:	4b02      	ldr	r3, [pc, #8]	@ (801ae64 <realloc+0xc>)
 801ae5a:	460a      	mov	r2, r1
 801ae5c:	4601      	mov	r1, r0
 801ae5e:	6818      	ldr	r0, [r3, #0]
 801ae60:	f000 b802 	b.w	801ae68 <_realloc_r>
 801ae64:	200002ac 	.word	0x200002ac

0801ae68 <_realloc_r>:
 801ae68:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801ae6c:	4680      	mov	r8, r0
 801ae6e:	4615      	mov	r5, r2
 801ae70:	460c      	mov	r4, r1
 801ae72:	b921      	cbnz	r1, 801ae7e <_realloc_r+0x16>
 801ae74:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801ae78:	4611      	mov	r1, r2
 801ae7a:	f7ff bef5 	b.w	801ac68 <_malloc_r>
 801ae7e:	b92a      	cbnz	r2, 801ae8c <_realloc_r+0x24>
 801ae80:	f000 fc8c 	bl	801b79c <_free_r>
 801ae84:	2400      	movs	r4, #0
 801ae86:	4620      	mov	r0, r4
 801ae88:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801ae8c:	f000 fcd0 	bl	801b830 <_malloc_usable_size_r>
 801ae90:	4285      	cmp	r5, r0
 801ae92:	4606      	mov	r6, r0
 801ae94:	d802      	bhi.n	801ae9c <_realloc_r+0x34>
 801ae96:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 801ae9a:	d8f4      	bhi.n	801ae86 <_realloc_r+0x1e>
 801ae9c:	4629      	mov	r1, r5
 801ae9e:	4640      	mov	r0, r8
 801aea0:	f7ff fee2 	bl	801ac68 <_malloc_r>
 801aea4:	4607      	mov	r7, r0
 801aea6:	2800      	cmp	r0, #0
 801aea8:	d0ec      	beq.n	801ae84 <_realloc_r+0x1c>
 801aeaa:	42b5      	cmp	r5, r6
 801aeac:	462a      	mov	r2, r5
 801aeae:	4621      	mov	r1, r4
 801aeb0:	bf28      	it	cs
 801aeb2:	4632      	movcs	r2, r6
 801aeb4:	f000 fc39 	bl	801b72a <memcpy>
 801aeb8:	4621      	mov	r1, r4
 801aeba:	4640      	mov	r0, r8
 801aebc:	f000 fc6e 	bl	801b79c <_free_r>
 801aec0:	463c      	mov	r4, r7
 801aec2:	e7e0      	b.n	801ae86 <_realloc_r+0x1e>

0801aec4 <_strtoul_l.constprop.0>:
 801aec4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801aec8:	4e34      	ldr	r6, [pc, #208]	@ (801af9c <_strtoul_l.constprop.0+0xd8>)
 801aeca:	4686      	mov	lr, r0
 801aecc:	460d      	mov	r5, r1
 801aece:	4628      	mov	r0, r5
 801aed0:	f815 4b01 	ldrb.w	r4, [r5], #1
 801aed4:	5d37      	ldrb	r7, [r6, r4]
 801aed6:	f017 0708 	ands.w	r7, r7, #8
 801aeda:	d1f8      	bne.n	801aece <_strtoul_l.constprop.0+0xa>
 801aedc:	2c2d      	cmp	r4, #45	@ 0x2d
 801aede:	d12f      	bne.n	801af40 <_strtoul_l.constprop.0+0x7c>
 801aee0:	782c      	ldrb	r4, [r5, #0]
 801aee2:	2701      	movs	r7, #1
 801aee4:	1c85      	adds	r5, r0, #2
 801aee6:	f033 0010 	bics.w	r0, r3, #16
 801aeea:	d109      	bne.n	801af00 <_strtoul_l.constprop.0+0x3c>
 801aeec:	2c30      	cmp	r4, #48	@ 0x30
 801aeee:	d12c      	bne.n	801af4a <_strtoul_l.constprop.0+0x86>
 801aef0:	7828      	ldrb	r0, [r5, #0]
 801aef2:	f000 00df 	and.w	r0, r0, #223	@ 0xdf
 801aef6:	2858      	cmp	r0, #88	@ 0x58
 801aef8:	d127      	bne.n	801af4a <_strtoul_l.constprop.0+0x86>
 801aefa:	786c      	ldrb	r4, [r5, #1]
 801aefc:	2310      	movs	r3, #16
 801aefe:	3502      	adds	r5, #2
 801af00:	f04f 38ff 	mov.w	r8, #4294967295	@ 0xffffffff
 801af04:	2600      	movs	r6, #0
 801af06:	fbb8 f8f3 	udiv	r8, r8, r3
 801af0a:	fb03 f908 	mul.w	r9, r3, r8
 801af0e:	ea6f 0909 	mvn.w	r9, r9
 801af12:	4630      	mov	r0, r6
 801af14:	f1a4 0c30 	sub.w	ip, r4, #48	@ 0x30
 801af18:	f1bc 0f09 	cmp.w	ip, #9
 801af1c:	d81c      	bhi.n	801af58 <_strtoul_l.constprop.0+0x94>
 801af1e:	4664      	mov	r4, ip
 801af20:	42a3      	cmp	r3, r4
 801af22:	dd2a      	ble.n	801af7a <_strtoul_l.constprop.0+0xb6>
 801af24:	f1b6 3fff 	cmp.w	r6, #4294967295	@ 0xffffffff
 801af28:	d007      	beq.n	801af3a <_strtoul_l.constprop.0+0x76>
 801af2a:	4580      	cmp	r8, r0
 801af2c:	d322      	bcc.n	801af74 <_strtoul_l.constprop.0+0xb0>
 801af2e:	d101      	bne.n	801af34 <_strtoul_l.constprop.0+0x70>
 801af30:	45a1      	cmp	r9, r4
 801af32:	db1f      	blt.n	801af74 <_strtoul_l.constprop.0+0xb0>
 801af34:	fb00 4003 	mla	r0, r0, r3, r4
 801af38:	2601      	movs	r6, #1
 801af3a:	f815 4b01 	ldrb.w	r4, [r5], #1
 801af3e:	e7e9      	b.n	801af14 <_strtoul_l.constprop.0+0x50>
 801af40:	2c2b      	cmp	r4, #43	@ 0x2b
 801af42:	bf04      	itt	eq
 801af44:	782c      	ldrbeq	r4, [r5, #0]
 801af46:	1c85      	addeq	r5, r0, #2
 801af48:	e7cd      	b.n	801aee6 <_strtoul_l.constprop.0+0x22>
 801af4a:	2b00      	cmp	r3, #0
 801af4c:	d1d8      	bne.n	801af00 <_strtoul_l.constprop.0+0x3c>
 801af4e:	2c30      	cmp	r4, #48	@ 0x30
 801af50:	bf0c      	ite	eq
 801af52:	2308      	moveq	r3, #8
 801af54:	230a      	movne	r3, #10
 801af56:	e7d3      	b.n	801af00 <_strtoul_l.constprop.0+0x3c>
 801af58:	f1a4 0c41 	sub.w	ip, r4, #65	@ 0x41
 801af5c:	f1bc 0f19 	cmp.w	ip, #25
 801af60:	d801      	bhi.n	801af66 <_strtoul_l.constprop.0+0xa2>
 801af62:	3c37      	subs	r4, #55	@ 0x37
 801af64:	e7dc      	b.n	801af20 <_strtoul_l.constprop.0+0x5c>
 801af66:	f1a4 0c61 	sub.w	ip, r4, #97	@ 0x61
 801af6a:	f1bc 0f19 	cmp.w	ip, #25
 801af6e:	d804      	bhi.n	801af7a <_strtoul_l.constprop.0+0xb6>
 801af70:	3c57      	subs	r4, #87	@ 0x57
 801af72:	e7d5      	b.n	801af20 <_strtoul_l.constprop.0+0x5c>
 801af74:	f04f 36ff 	mov.w	r6, #4294967295	@ 0xffffffff
 801af78:	e7df      	b.n	801af3a <_strtoul_l.constprop.0+0x76>
 801af7a:	1c73      	adds	r3, r6, #1
 801af7c:	d106      	bne.n	801af8c <_strtoul_l.constprop.0+0xc8>
 801af7e:	2322      	movs	r3, #34	@ 0x22
 801af80:	f8ce 3000 	str.w	r3, [lr]
 801af84:	4630      	mov	r0, r6
 801af86:	b932      	cbnz	r2, 801af96 <_strtoul_l.constprop.0+0xd2>
 801af88:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801af8c:	b107      	cbz	r7, 801af90 <_strtoul_l.constprop.0+0xcc>
 801af8e:	4240      	negs	r0, r0
 801af90:	2a00      	cmp	r2, #0
 801af92:	d0f9      	beq.n	801af88 <_strtoul_l.constprop.0+0xc4>
 801af94:	b106      	cbz	r6, 801af98 <_strtoul_l.constprop.0+0xd4>
 801af96:	1e69      	subs	r1, r5, #1
 801af98:	6011      	str	r1, [r2, #0]
 801af9a:	e7f5      	b.n	801af88 <_strtoul_l.constprop.0+0xc4>
 801af9c:	0801e17a 	.word	0x0801e17a

0801afa0 <strtoul>:
 801afa0:	4613      	mov	r3, r2
 801afa2:	460a      	mov	r2, r1
 801afa4:	4601      	mov	r1, r0
 801afa6:	4802      	ldr	r0, [pc, #8]	@ (801afb0 <strtoul+0x10>)
 801afa8:	6800      	ldr	r0, [r0, #0]
 801afaa:	f7ff bf8b 	b.w	801aec4 <_strtoul_l.constprop.0>
 801afae:	bf00      	nop
 801afb0:	200002ac 	.word	0x200002ac

0801afb4 <std>:
 801afb4:	2300      	movs	r3, #0
 801afb6:	b510      	push	{r4, lr}
 801afb8:	4604      	mov	r4, r0
 801afba:	e9c0 3300 	strd	r3, r3, [r0]
 801afbe:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801afc2:	6083      	str	r3, [r0, #8]
 801afc4:	8181      	strh	r1, [r0, #12]
 801afc6:	6643      	str	r3, [r0, #100]	@ 0x64
 801afc8:	81c2      	strh	r2, [r0, #14]
 801afca:	6183      	str	r3, [r0, #24]
 801afcc:	4619      	mov	r1, r3
 801afce:	2208      	movs	r2, #8
 801afd0:	305c      	adds	r0, #92	@ 0x5c
 801afd2:	f000 fa8b 	bl	801b4ec <memset>
 801afd6:	4b0d      	ldr	r3, [pc, #52]	@ (801b00c <std+0x58>)
 801afd8:	6263      	str	r3, [r4, #36]	@ 0x24
 801afda:	4b0d      	ldr	r3, [pc, #52]	@ (801b010 <std+0x5c>)
 801afdc:	62a3      	str	r3, [r4, #40]	@ 0x28
 801afde:	4b0d      	ldr	r3, [pc, #52]	@ (801b014 <std+0x60>)
 801afe0:	62e3      	str	r3, [r4, #44]	@ 0x2c
 801afe2:	4b0d      	ldr	r3, [pc, #52]	@ (801b018 <std+0x64>)
 801afe4:	6323      	str	r3, [r4, #48]	@ 0x30
 801afe6:	4b0d      	ldr	r3, [pc, #52]	@ (801b01c <std+0x68>)
 801afe8:	6224      	str	r4, [r4, #32]
 801afea:	429c      	cmp	r4, r3
 801afec:	d006      	beq.n	801affc <std+0x48>
 801afee:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 801aff2:	4294      	cmp	r4, r2
 801aff4:	d002      	beq.n	801affc <std+0x48>
 801aff6:	33d0      	adds	r3, #208	@ 0xd0
 801aff8:	429c      	cmp	r4, r3
 801affa:	d105      	bne.n	801b008 <std+0x54>
 801affc:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 801b000:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801b004:	f000 bb86 	b.w	801b714 <__retarget_lock_init_recursive>
 801b008:	bd10      	pop	{r4, pc}
 801b00a:	bf00      	nop
 801b00c:	0801b279 	.word	0x0801b279
 801b010:	0801b29b 	.word	0x0801b29b
 801b014:	0801b2d3 	.word	0x0801b2d3
 801b018:	0801b2f7 	.word	0x0801b2f7
 801b01c:	2000c268 	.word	0x2000c268

0801b020 <stdio_exit_handler>:
 801b020:	4a02      	ldr	r2, [pc, #8]	@ (801b02c <stdio_exit_handler+0xc>)
 801b022:	4903      	ldr	r1, [pc, #12]	@ (801b030 <stdio_exit_handler+0x10>)
 801b024:	4803      	ldr	r0, [pc, #12]	@ (801b034 <stdio_exit_handler+0x14>)
 801b026:	f000 b869 	b.w	801b0fc <_fwalk_sglue>
 801b02a:	bf00      	nop
 801b02c:	200002a0 	.word	0x200002a0
 801b030:	0801c199 	.word	0x0801c199
 801b034:	200002b0 	.word	0x200002b0

0801b038 <cleanup_stdio>:
 801b038:	6841      	ldr	r1, [r0, #4]
 801b03a:	4b0c      	ldr	r3, [pc, #48]	@ (801b06c <cleanup_stdio+0x34>)
 801b03c:	4299      	cmp	r1, r3
 801b03e:	b510      	push	{r4, lr}
 801b040:	4604      	mov	r4, r0
 801b042:	d001      	beq.n	801b048 <cleanup_stdio+0x10>
 801b044:	f001 f8a8 	bl	801c198 <_fflush_r>
 801b048:	68a1      	ldr	r1, [r4, #8]
 801b04a:	4b09      	ldr	r3, [pc, #36]	@ (801b070 <cleanup_stdio+0x38>)
 801b04c:	4299      	cmp	r1, r3
 801b04e:	d002      	beq.n	801b056 <cleanup_stdio+0x1e>
 801b050:	4620      	mov	r0, r4
 801b052:	f001 f8a1 	bl	801c198 <_fflush_r>
 801b056:	68e1      	ldr	r1, [r4, #12]
 801b058:	4b06      	ldr	r3, [pc, #24]	@ (801b074 <cleanup_stdio+0x3c>)
 801b05a:	4299      	cmp	r1, r3
 801b05c:	d004      	beq.n	801b068 <cleanup_stdio+0x30>
 801b05e:	4620      	mov	r0, r4
 801b060:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801b064:	f001 b898 	b.w	801c198 <_fflush_r>
 801b068:	bd10      	pop	{r4, pc}
 801b06a:	bf00      	nop
 801b06c:	2000c268 	.word	0x2000c268
 801b070:	2000c2d0 	.word	0x2000c2d0
 801b074:	2000c338 	.word	0x2000c338

0801b078 <global_stdio_init.part.0>:
 801b078:	b510      	push	{r4, lr}
 801b07a:	4b0b      	ldr	r3, [pc, #44]	@ (801b0a8 <global_stdio_init.part.0+0x30>)
 801b07c:	4c0b      	ldr	r4, [pc, #44]	@ (801b0ac <global_stdio_init.part.0+0x34>)
 801b07e:	4a0c      	ldr	r2, [pc, #48]	@ (801b0b0 <global_stdio_init.part.0+0x38>)
 801b080:	601a      	str	r2, [r3, #0]
 801b082:	4620      	mov	r0, r4
 801b084:	2200      	movs	r2, #0
 801b086:	2104      	movs	r1, #4
 801b088:	f7ff ff94 	bl	801afb4 <std>
 801b08c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 801b090:	2201      	movs	r2, #1
 801b092:	2109      	movs	r1, #9
 801b094:	f7ff ff8e 	bl	801afb4 <std>
 801b098:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 801b09c:	2202      	movs	r2, #2
 801b09e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801b0a2:	2112      	movs	r1, #18
 801b0a4:	f7ff bf86 	b.w	801afb4 <std>
 801b0a8:	2000c3a0 	.word	0x2000c3a0
 801b0ac:	2000c268 	.word	0x2000c268
 801b0b0:	0801b021 	.word	0x0801b021

0801b0b4 <__sfp_lock_acquire>:
 801b0b4:	4801      	ldr	r0, [pc, #4]	@ (801b0bc <__sfp_lock_acquire+0x8>)
 801b0b6:	f000 bb2e 	b.w	801b716 <__retarget_lock_acquire_recursive>
 801b0ba:	bf00      	nop
 801b0bc:	2000c3aa 	.word	0x2000c3aa

0801b0c0 <__sfp_lock_release>:
 801b0c0:	4801      	ldr	r0, [pc, #4]	@ (801b0c8 <__sfp_lock_release+0x8>)
 801b0c2:	f000 bb29 	b.w	801b718 <__retarget_lock_release_recursive>
 801b0c6:	bf00      	nop
 801b0c8:	2000c3aa 	.word	0x2000c3aa

0801b0cc <__sinit>:
 801b0cc:	b510      	push	{r4, lr}
 801b0ce:	4604      	mov	r4, r0
 801b0d0:	f7ff fff0 	bl	801b0b4 <__sfp_lock_acquire>
 801b0d4:	6a23      	ldr	r3, [r4, #32]
 801b0d6:	b11b      	cbz	r3, 801b0e0 <__sinit+0x14>
 801b0d8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801b0dc:	f7ff bff0 	b.w	801b0c0 <__sfp_lock_release>
 801b0e0:	4b04      	ldr	r3, [pc, #16]	@ (801b0f4 <__sinit+0x28>)
 801b0e2:	6223      	str	r3, [r4, #32]
 801b0e4:	4b04      	ldr	r3, [pc, #16]	@ (801b0f8 <__sinit+0x2c>)
 801b0e6:	681b      	ldr	r3, [r3, #0]
 801b0e8:	2b00      	cmp	r3, #0
 801b0ea:	d1f5      	bne.n	801b0d8 <__sinit+0xc>
 801b0ec:	f7ff ffc4 	bl	801b078 <global_stdio_init.part.0>
 801b0f0:	e7f2      	b.n	801b0d8 <__sinit+0xc>
 801b0f2:	bf00      	nop
 801b0f4:	0801b039 	.word	0x0801b039
 801b0f8:	2000c3a0 	.word	0x2000c3a0

0801b0fc <_fwalk_sglue>:
 801b0fc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801b100:	4607      	mov	r7, r0
 801b102:	4688      	mov	r8, r1
 801b104:	4614      	mov	r4, r2
 801b106:	2600      	movs	r6, #0
 801b108:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801b10c:	f1b9 0901 	subs.w	r9, r9, #1
 801b110:	d505      	bpl.n	801b11e <_fwalk_sglue+0x22>
 801b112:	6824      	ldr	r4, [r4, #0]
 801b114:	2c00      	cmp	r4, #0
 801b116:	d1f7      	bne.n	801b108 <_fwalk_sglue+0xc>
 801b118:	4630      	mov	r0, r6
 801b11a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801b11e:	89ab      	ldrh	r3, [r5, #12]
 801b120:	2b01      	cmp	r3, #1
 801b122:	d907      	bls.n	801b134 <_fwalk_sglue+0x38>
 801b124:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801b128:	3301      	adds	r3, #1
 801b12a:	d003      	beq.n	801b134 <_fwalk_sglue+0x38>
 801b12c:	4629      	mov	r1, r5
 801b12e:	4638      	mov	r0, r7
 801b130:	47c0      	blx	r8
 801b132:	4306      	orrs	r6, r0
 801b134:	3568      	adds	r5, #104	@ 0x68
 801b136:	e7e9      	b.n	801b10c <_fwalk_sglue+0x10>

0801b138 <_fwrite_r>:
 801b138:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801b13c:	9c08      	ldr	r4, [sp, #32]
 801b13e:	468a      	mov	sl, r1
 801b140:	4690      	mov	r8, r2
 801b142:	fb02 f903 	mul.w	r9, r2, r3
 801b146:	4606      	mov	r6, r0
 801b148:	b118      	cbz	r0, 801b152 <_fwrite_r+0x1a>
 801b14a:	6a03      	ldr	r3, [r0, #32]
 801b14c:	b90b      	cbnz	r3, 801b152 <_fwrite_r+0x1a>
 801b14e:	f7ff ffbd 	bl	801b0cc <__sinit>
 801b152:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801b154:	07dd      	lsls	r5, r3, #31
 801b156:	d405      	bmi.n	801b164 <_fwrite_r+0x2c>
 801b158:	89a3      	ldrh	r3, [r4, #12]
 801b15a:	0598      	lsls	r0, r3, #22
 801b15c:	d402      	bmi.n	801b164 <_fwrite_r+0x2c>
 801b15e:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801b160:	f000 fad9 	bl	801b716 <__retarget_lock_acquire_recursive>
 801b164:	89a3      	ldrh	r3, [r4, #12]
 801b166:	0719      	lsls	r1, r3, #28
 801b168:	d516      	bpl.n	801b198 <_fwrite_r+0x60>
 801b16a:	6923      	ldr	r3, [r4, #16]
 801b16c:	b1a3      	cbz	r3, 801b198 <_fwrite_r+0x60>
 801b16e:	2500      	movs	r5, #0
 801b170:	454d      	cmp	r5, r9
 801b172:	d01f      	beq.n	801b1b4 <_fwrite_r+0x7c>
 801b174:	68a7      	ldr	r7, [r4, #8]
 801b176:	f81a 1005 	ldrb.w	r1, [sl, r5]
 801b17a:	3f01      	subs	r7, #1
 801b17c:	2f00      	cmp	r7, #0
 801b17e:	60a7      	str	r7, [r4, #8]
 801b180:	da04      	bge.n	801b18c <_fwrite_r+0x54>
 801b182:	69a3      	ldr	r3, [r4, #24]
 801b184:	429f      	cmp	r7, r3
 801b186:	db0f      	blt.n	801b1a8 <_fwrite_r+0x70>
 801b188:	290a      	cmp	r1, #10
 801b18a:	d00d      	beq.n	801b1a8 <_fwrite_r+0x70>
 801b18c:	6823      	ldr	r3, [r4, #0]
 801b18e:	1c5a      	adds	r2, r3, #1
 801b190:	6022      	str	r2, [r4, #0]
 801b192:	7019      	strb	r1, [r3, #0]
 801b194:	3501      	adds	r5, #1
 801b196:	e7eb      	b.n	801b170 <_fwrite_r+0x38>
 801b198:	4621      	mov	r1, r4
 801b19a:	4630      	mov	r0, r6
 801b19c:	f000 f926 	bl	801b3ec <__swsetup_r>
 801b1a0:	2800      	cmp	r0, #0
 801b1a2:	d0e4      	beq.n	801b16e <_fwrite_r+0x36>
 801b1a4:	2500      	movs	r5, #0
 801b1a6:	e005      	b.n	801b1b4 <_fwrite_r+0x7c>
 801b1a8:	4622      	mov	r2, r4
 801b1aa:	4630      	mov	r0, r6
 801b1ac:	f000 f8e0 	bl	801b370 <__swbuf_r>
 801b1b0:	3001      	adds	r0, #1
 801b1b2:	d1ef      	bne.n	801b194 <_fwrite_r+0x5c>
 801b1b4:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801b1b6:	07da      	lsls	r2, r3, #31
 801b1b8:	d405      	bmi.n	801b1c6 <_fwrite_r+0x8e>
 801b1ba:	89a3      	ldrh	r3, [r4, #12]
 801b1bc:	059b      	lsls	r3, r3, #22
 801b1be:	d402      	bmi.n	801b1c6 <_fwrite_r+0x8e>
 801b1c0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801b1c2:	f000 faa9 	bl	801b718 <__retarget_lock_release_recursive>
 801b1c6:	fbb5 f0f8 	udiv	r0, r5, r8
 801b1ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	...

0801b1d0 <fwrite>:
 801b1d0:	b507      	push	{r0, r1, r2, lr}
 801b1d2:	9300      	str	r3, [sp, #0]
 801b1d4:	4613      	mov	r3, r2
 801b1d6:	460a      	mov	r2, r1
 801b1d8:	4601      	mov	r1, r0
 801b1da:	4803      	ldr	r0, [pc, #12]	@ (801b1e8 <fwrite+0x18>)
 801b1dc:	6800      	ldr	r0, [r0, #0]
 801b1de:	f7ff ffab 	bl	801b138 <_fwrite_r>
 801b1e2:	b003      	add	sp, #12
 801b1e4:	f85d fb04 	ldr.w	pc, [sp], #4
 801b1e8:	200002ac 	.word	0x200002ac

0801b1ec <iprintf>:
 801b1ec:	b40f      	push	{r0, r1, r2, r3}
 801b1ee:	b507      	push	{r0, r1, r2, lr}
 801b1f0:	4906      	ldr	r1, [pc, #24]	@ (801b20c <iprintf+0x20>)
 801b1f2:	ab04      	add	r3, sp, #16
 801b1f4:	6808      	ldr	r0, [r1, #0]
 801b1f6:	f853 2b04 	ldr.w	r2, [r3], #4
 801b1fa:	6881      	ldr	r1, [r0, #8]
 801b1fc:	9301      	str	r3, [sp, #4]
 801b1fe:	f000 fca1 	bl	801bb44 <_vfiprintf_r>
 801b202:	b003      	add	sp, #12
 801b204:	f85d eb04 	ldr.w	lr, [sp], #4
 801b208:	b004      	add	sp, #16
 801b20a:	4770      	bx	lr
 801b20c:	200002ac 	.word	0x200002ac

0801b210 <sniprintf>:
 801b210:	b40c      	push	{r2, r3}
 801b212:	b530      	push	{r4, r5, lr}
 801b214:	4b17      	ldr	r3, [pc, #92]	@ (801b274 <sniprintf+0x64>)
 801b216:	1e0c      	subs	r4, r1, #0
 801b218:	681d      	ldr	r5, [r3, #0]
 801b21a:	b09d      	sub	sp, #116	@ 0x74
 801b21c:	da08      	bge.n	801b230 <sniprintf+0x20>
 801b21e:	238b      	movs	r3, #139	@ 0x8b
 801b220:	602b      	str	r3, [r5, #0]
 801b222:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801b226:	b01d      	add	sp, #116	@ 0x74
 801b228:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801b22c:	b002      	add	sp, #8
 801b22e:	4770      	bx	lr
 801b230:	f44f 7302 	mov.w	r3, #520	@ 0x208
 801b234:	f8ad 3014 	strh.w	r3, [sp, #20]
 801b238:	bf14      	ite	ne
 801b23a:	f104 33ff 	addne.w	r3, r4, #4294967295	@ 0xffffffff
 801b23e:	4623      	moveq	r3, r4
 801b240:	9304      	str	r3, [sp, #16]
 801b242:	9307      	str	r3, [sp, #28]
 801b244:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 801b248:	9002      	str	r0, [sp, #8]
 801b24a:	9006      	str	r0, [sp, #24]
 801b24c:	f8ad 3016 	strh.w	r3, [sp, #22]
 801b250:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 801b252:	ab21      	add	r3, sp, #132	@ 0x84
 801b254:	a902      	add	r1, sp, #8
 801b256:	4628      	mov	r0, r5
 801b258:	9301      	str	r3, [sp, #4]
 801b25a:	f000 fb4d 	bl	801b8f8 <_svfiprintf_r>
 801b25e:	1c43      	adds	r3, r0, #1
 801b260:	bfbc      	itt	lt
 801b262:	238b      	movlt	r3, #139	@ 0x8b
 801b264:	602b      	strlt	r3, [r5, #0]
 801b266:	2c00      	cmp	r4, #0
 801b268:	d0dd      	beq.n	801b226 <sniprintf+0x16>
 801b26a:	9b02      	ldr	r3, [sp, #8]
 801b26c:	2200      	movs	r2, #0
 801b26e:	701a      	strb	r2, [r3, #0]
 801b270:	e7d9      	b.n	801b226 <sniprintf+0x16>
 801b272:	bf00      	nop
 801b274:	200002ac 	.word	0x200002ac

0801b278 <__sread>:
 801b278:	b510      	push	{r4, lr}
 801b27a:	460c      	mov	r4, r1
 801b27c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801b280:	f000 f9ea 	bl	801b658 <_read_r>
 801b284:	2800      	cmp	r0, #0
 801b286:	bfab      	itete	ge
 801b288:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 801b28a:	89a3      	ldrhlt	r3, [r4, #12]
 801b28c:	181b      	addge	r3, r3, r0
 801b28e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 801b292:	bfac      	ite	ge
 801b294:	6563      	strge	r3, [r4, #84]	@ 0x54
 801b296:	81a3      	strhlt	r3, [r4, #12]
 801b298:	bd10      	pop	{r4, pc}

0801b29a <__swrite>:
 801b29a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801b29e:	461f      	mov	r7, r3
 801b2a0:	898b      	ldrh	r3, [r1, #12]
 801b2a2:	05db      	lsls	r3, r3, #23
 801b2a4:	4605      	mov	r5, r0
 801b2a6:	460c      	mov	r4, r1
 801b2a8:	4616      	mov	r6, r2
 801b2aa:	d505      	bpl.n	801b2b8 <__swrite+0x1e>
 801b2ac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801b2b0:	2302      	movs	r3, #2
 801b2b2:	2200      	movs	r2, #0
 801b2b4:	f000 f9be 	bl	801b634 <_lseek_r>
 801b2b8:	89a3      	ldrh	r3, [r4, #12]
 801b2ba:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801b2be:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 801b2c2:	81a3      	strh	r3, [r4, #12]
 801b2c4:	4632      	mov	r2, r6
 801b2c6:	463b      	mov	r3, r7
 801b2c8:	4628      	mov	r0, r5
 801b2ca:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801b2ce:	f000 b9e5 	b.w	801b69c <_write_r>

0801b2d2 <__sseek>:
 801b2d2:	b510      	push	{r4, lr}
 801b2d4:	460c      	mov	r4, r1
 801b2d6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801b2da:	f000 f9ab 	bl	801b634 <_lseek_r>
 801b2de:	1c43      	adds	r3, r0, #1
 801b2e0:	89a3      	ldrh	r3, [r4, #12]
 801b2e2:	bf15      	itete	ne
 801b2e4:	6560      	strne	r0, [r4, #84]	@ 0x54
 801b2e6:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 801b2ea:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 801b2ee:	81a3      	strheq	r3, [r4, #12]
 801b2f0:	bf18      	it	ne
 801b2f2:	81a3      	strhne	r3, [r4, #12]
 801b2f4:	bd10      	pop	{r4, pc}

0801b2f6 <__sclose>:
 801b2f6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801b2fa:	f000 b935 	b.w	801b568 <_close_r>

0801b2fe <_vsniprintf_r>:
 801b2fe:	b530      	push	{r4, r5, lr}
 801b300:	4614      	mov	r4, r2
 801b302:	2c00      	cmp	r4, #0
 801b304:	b09b      	sub	sp, #108	@ 0x6c
 801b306:	4605      	mov	r5, r0
 801b308:	461a      	mov	r2, r3
 801b30a:	da05      	bge.n	801b318 <_vsniprintf_r+0x1a>
 801b30c:	238b      	movs	r3, #139	@ 0x8b
 801b30e:	6003      	str	r3, [r0, #0]
 801b310:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801b314:	b01b      	add	sp, #108	@ 0x6c
 801b316:	bd30      	pop	{r4, r5, pc}
 801b318:	f44f 7302 	mov.w	r3, #520	@ 0x208
 801b31c:	f8ad 300c 	strh.w	r3, [sp, #12]
 801b320:	bf14      	ite	ne
 801b322:	f104 33ff 	addne.w	r3, r4, #4294967295	@ 0xffffffff
 801b326:	4623      	moveq	r3, r4
 801b328:	9302      	str	r3, [sp, #8]
 801b32a:	9305      	str	r3, [sp, #20]
 801b32c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 801b330:	9100      	str	r1, [sp, #0]
 801b332:	9104      	str	r1, [sp, #16]
 801b334:	f8ad 300e 	strh.w	r3, [sp, #14]
 801b338:	4669      	mov	r1, sp
 801b33a:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 801b33c:	f000 fadc 	bl	801b8f8 <_svfiprintf_r>
 801b340:	1c43      	adds	r3, r0, #1
 801b342:	bfbc      	itt	lt
 801b344:	238b      	movlt	r3, #139	@ 0x8b
 801b346:	602b      	strlt	r3, [r5, #0]
 801b348:	2c00      	cmp	r4, #0
 801b34a:	d0e3      	beq.n	801b314 <_vsniprintf_r+0x16>
 801b34c:	9b00      	ldr	r3, [sp, #0]
 801b34e:	2200      	movs	r2, #0
 801b350:	701a      	strb	r2, [r3, #0]
 801b352:	e7df      	b.n	801b314 <_vsniprintf_r+0x16>

0801b354 <vsniprintf>:
 801b354:	b507      	push	{r0, r1, r2, lr}
 801b356:	9300      	str	r3, [sp, #0]
 801b358:	4613      	mov	r3, r2
 801b35a:	460a      	mov	r2, r1
 801b35c:	4601      	mov	r1, r0
 801b35e:	4803      	ldr	r0, [pc, #12]	@ (801b36c <vsniprintf+0x18>)
 801b360:	6800      	ldr	r0, [r0, #0]
 801b362:	f7ff ffcc 	bl	801b2fe <_vsniprintf_r>
 801b366:	b003      	add	sp, #12
 801b368:	f85d fb04 	ldr.w	pc, [sp], #4
 801b36c:	200002ac 	.word	0x200002ac

0801b370 <__swbuf_r>:
 801b370:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801b372:	460e      	mov	r6, r1
 801b374:	4614      	mov	r4, r2
 801b376:	4605      	mov	r5, r0
 801b378:	b118      	cbz	r0, 801b382 <__swbuf_r+0x12>
 801b37a:	6a03      	ldr	r3, [r0, #32]
 801b37c:	b90b      	cbnz	r3, 801b382 <__swbuf_r+0x12>
 801b37e:	f7ff fea5 	bl	801b0cc <__sinit>
 801b382:	69a3      	ldr	r3, [r4, #24]
 801b384:	60a3      	str	r3, [r4, #8]
 801b386:	89a3      	ldrh	r3, [r4, #12]
 801b388:	071a      	lsls	r2, r3, #28
 801b38a:	d501      	bpl.n	801b390 <__swbuf_r+0x20>
 801b38c:	6923      	ldr	r3, [r4, #16]
 801b38e:	b943      	cbnz	r3, 801b3a2 <__swbuf_r+0x32>
 801b390:	4621      	mov	r1, r4
 801b392:	4628      	mov	r0, r5
 801b394:	f000 f82a 	bl	801b3ec <__swsetup_r>
 801b398:	b118      	cbz	r0, 801b3a2 <__swbuf_r+0x32>
 801b39a:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 801b39e:	4638      	mov	r0, r7
 801b3a0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801b3a2:	6823      	ldr	r3, [r4, #0]
 801b3a4:	6922      	ldr	r2, [r4, #16]
 801b3a6:	1a98      	subs	r0, r3, r2
 801b3a8:	6963      	ldr	r3, [r4, #20]
 801b3aa:	b2f6      	uxtb	r6, r6
 801b3ac:	4283      	cmp	r3, r0
 801b3ae:	4637      	mov	r7, r6
 801b3b0:	dc05      	bgt.n	801b3be <__swbuf_r+0x4e>
 801b3b2:	4621      	mov	r1, r4
 801b3b4:	4628      	mov	r0, r5
 801b3b6:	f000 feef 	bl	801c198 <_fflush_r>
 801b3ba:	2800      	cmp	r0, #0
 801b3bc:	d1ed      	bne.n	801b39a <__swbuf_r+0x2a>
 801b3be:	68a3      	ldr	r3, [r4, #8]
 801b3c0:	3b01      	subs	r3, #1
 801b3c2:	60a3      	str	r3, [r4, #8]
 801b3c4:	6823      	ldr	r3, [r4, #0]
 801b3c6:	1c5a      	adds	r2, r3, #1
 801b3c8:	6022      	str	r2, [r4, #0]
 801b3ca:	701e      	strb	r6, [r3, #0]
 801b3cc:	6962      	ldr	r2, [r4, #20]
 801b3ce:	1c43      	adds	r3, r0, #1
 801b3d0:	429a      	cmp	r2, r3
 801b3d2:	d004      	beq.n	801b3de <__swbuf_r+0x6e>
 801b3d4:	89a3      	ldrh	r3, [r4, #12]
 801b3d6:	07db      	lsls	r3, r3, #31
 801b3d8:	d5e1      	bpl.n	801b39e <__swbuf_r+0x2e>
 801b3da:	2e0a      	cmp	r6, #10
 801b3dc:	d1df      	bne.n	801b39e <__swbuf_r+0x2e>
 801b3de:	4621      	mov	r1, r4
 801b3e0:	4628      	mov	r0, r5
 801b3e2:	f000 fed9 	bl	801c198 <_fflush_r>
 801b3e6:	2800      	cmp	r0, #0
 801b3e8:	d0d9      	beq.n	801b39e <__swbuf_r+0x2e>
 801b3ea:	e7d6      	b.n	801b39a <__swbuf_r+0x2a>

0801b3ec <__swsetup_r>:
 801b3ec:	b538      	push	{r3, r4, r5, lr}
 801b3ee:	4b29      	ldr	r3, [pc, #164]	@ (801b494 <__swsetup_r+0xa8>)
 801b3f0:	4605      	mov	r5, r0
 801b3f2:	6818      	ldr	r0, [r3, #0]
 801b3f4:	460c      	mov	r4, r1
 801b3f6:	b118      	cbz	r0, 801b400 <__swsetup_r+0x14>
 801b3f8:	6a03      	ldr	r3, [r0, #32]
 801b3fa:	b90b      	cbnz	r3, 801b400 <__swsetup_r+0x14>
 801b3fc:	f7ff fe66 	bl	801b0cc <__sinit>
 801b400:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801b404:	0719      	lsls	r1, r3, #28
 801b406:	d422      	bmi.n	801b44e <__swsetup_r+0x62>
 801b408:	06da      	lsls	r2, r3, #27
 801b40a:	d407      	bmi.n	801b41c <__swsetup_r+0x30>
 801b40c:	2209      	movs	r2, #9
 801b40e:	602a      	str	r2, [r5, #0]
 801b410:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801b414:	81a3      	strh	r3, [r4, #12]
 801b416:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801b41a:	e033      	b.n	801b484 <__swsetup_r+0x98>
 801b41c:	0758      	lsls	r0, r3, #29
 801b41e:	d512      	bpl.n	801b446 <__swsetup_r+0x5a>
 801b420:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801b422:	b141      	cbz	r1, 801b436 <__swsetup_r+0x4a>
 801b424:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 801b428:	4299      	cmp	r1, r3
 801b42a:	d002      	beq.n	801b432 <__swsetup_r+0x46>
 801b42c:	4628      	mov	r0, r5
 801b42e:	f000 f9b5 	bl	801b79c <_free_r>
 801b432:	2300      	movs	r3, #0
 801b434:	6363      	str	r3, [r4, #52]	@ 0x34
 801b436:	89a3      	ldrh	r3, [r4, #12]
 801b438:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 801b43c:	81a3      	strh	r3, [r4, #12]
 801b43e:	2300      	movs	r3, #0
 801b440:	6063      	str	r3, [r4, #4]
 801b442:	6923      	ldr	r3, [r4, #16]
 801b444:	6023      	str	r3, [r4, #0]
 801b446:	89a3      	ldrh	r3, [r4, #12]
 801b448:	f043 0308 	orr.w	r3, r3, #8
 801b44c:	81a3      	strh	r3, [r4, #12]
 801b44e:	6923      	ldr	r3, [r4, #16]
 801b450:	b94b      	cbnz	r3, 801b466 <__swsetup_r+0x7a>
 801b452:	89a3      	ldrh	r3, [r4, #12]
 801b454:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 801b458:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 801b45c:	d003      	beq.n	801b466 <__swsetup_r+0x7a>
 801b45e:	4621      	mov	r1, r4
 801b460:	4628      	mov	r0, r5
 801b462:	f000 fef9 	bl	801c258 <__smakebuf_r>
 801b466:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801b46a:	f013 0201 	ands.w	r2, r3, #1
 801b46e:	d00a      	beq.n	801b486 <__swsetup_r+0x9a>
 801b470:	2200      	movs	r2, #0
 801b472:	60a2      	str	r2, [r4, #8]
 801b474:	6962      	ldr	r2, [r4, #20]
 801b476:	4252      	negs	r2, r2
 801b478:	61a2      	str	r2, [r4, #24]
 801b47a:	6922      	ldr	r2, [r4, #16]
 801b47c:	b942      	cbnz	r2, 801b490 <__swsetup_r+0xa4>
 801b47e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 801b482:	d1c5      	bne.n	801b410 <__swsetup_r+0x24>
 801b484:	bd38      	pop	{r3, r4, r5, pc}
 801b486:	0799      	lsls	r1, r3, #30
 801b488:	bf58      	it	pl
 801b48a:	6962      	ldrpl	r2, [r4, #20]
 801b48c:	60a2      	str	r2, [r4, #8]
 801b48e:	e7f4      	b.n	801b47a <__swsetup_r+0x8e>
 801b490:	2000      	movs	r0, #0
 801b492:	e7f7      	b.n	801b484 <__swsetup_r+0x98>
 801b494:	200002ac 	.word	0x200002ac

0801b498 <memcmp>:
 801b498:	b510      	push	{r4, lr}
 801b49a:	3901      	subs	r1, #1
 801b49c:	4402      	add	r2, r0
 801b49e:	4290      	cmp	r0, r2
 801b4a0:	d101      	bne.n	801b4a6 <memcmp+0xe>
 801b4a2:	2000      	movs	r0, #0
 801b4a4:	e005      	b.n	801b4b2 <memcmp+0x1a>
 801b4a6:	7803      	ldrb	r3, [r0, #0]
 801b4a8:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 801b4ac:	42a3      	cmp	r3, r4
 801b4ae:	d001      	beq.n	801b4b4 <memcmp+0x1c>
 801b4b0:	1b18      	subs	r0, r3, r4
 801b4b2:	bd10      	pop	{r4, pc}
 801b4b4:	3001      	adds	r0, #1
 801b4b6:	e7f2      	b.n	801b49e <memcmp+0x6>

0801b4b8 <memmove>:
 801b4b8:	4288      	cmp	r0, r1
 801b4ba:	b510      	push	{r4, lr}
 801b4bc:	eb01 0402 	add.w	r4, r1, r2
 801b4c0:	d902      	bls.n	801b4c8 <memmove+0x10>
 801b4c2:	4284      	cmp	r4, r0
 801b4c4:	4623      	mov	r3, r4
 801b4c6:	d807      	bhi.n	801b4d8 <memmove+0x20>
 801b4c8:	1e43      	subs	r3, r0, #1
 801b4ca:	42a1      	cmp	r1, r4
 801b4cc:	d008      	beq.n	801b4e0 <memmove+0x28>
 801b4ce:	f811 2b01 	ldrb.w	r2, [r1], #1
 801b4d2:	f803 2f01 	strb.w	r2, [r3, #1]!
 801b4d6:	e7f8      	b.n	801b4ca <memmove+0x12>
 801b4d8:	4402      	add	r2, r0
 801b4da:	4601      	mov	r1, r0
 801b4dc:	428a      	cmp	r2, r1
 801b4de:	d100      	bne.n	801b4e2 <memmove+0x2a>
 801b4e0:	bd10      	pop	{r4, pc}
 801b4e2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801b4e6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801b4ea:	e7f7      	b.n	801b4dc <memmove+0x24>

0801b4ec <memset>:
 801b4ec:	4402      	add	r2, r0
 801b4ee:	4603      	mov	r3, r0
 801b4f0:	4293      	cmp	r3, r2
 801b4f2:	d100      	bne.n	801b4f6 <memset+0xa>
 801b4f4:	4770      	bx	lr
 801b4f6:	f803 1b01 	strb.w	r1, [r3], #1
 801b4fa:	e7f9      	b.n	801b4f0 <memset+0x4>

0801b4fc <strchr>:
 801b4fc:	b2c9      	uxtb	r1, r1
 801b4fe:	4603      	mov	r3, r0
 801b500:	4618      	mov	r0, r3
 801b502:	f813 2b01 	ldrb.w	r2, [r3], #1
 801b506:	b112      	cbz	r2, 801b50e <strchr+0x12>
 801b508:	428a      	cmp	r2, r1
 801b50a:	d1f9      	bne.n	801b500 <strchr+0x4>
 801b50c:	4770      	bx	lr
 801b50e:	2900      	cmp	r1, #0
 801b510:	bf18      	it	ne
 801b512:	2000      	movne	r0, #0
 801b514:	4770      	bx	lr

0801b516 <strncmp>:
 801b516:	b510      	push	{r4, lr}
 801b518:	b16a      	cbz	r2, 801b536 <strncmp+0x20>
 801b51a:	3901      	subs	r1, #1
 801b51c:	1884      	adds	r4, r0, r2
 801b51e:	f810 2b01 	ldrb.w	r2, [r0], #1
 801b522:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 801b526:	429a      	cmp	r2, r3
 801b528:	d103      	bne.n	801b532 <strncmp+0x1c>
 801b52a:	42a0      	cmp	r0, r4
 801b52c:	d001      	beq.n	801b532 <strncmp+0x1c>
 801b52e:	2a00      	cmp	r2, #0
 801b530:	d1f5      	bne.n	801b51e <strncmp+0x8>
 801b532:	1ad0      	subs	r0, r2, r3
 801b534:	bd10      	pop	{r4, pc}
 801b536:	4610      	mov	r0, r2
 801b538:	e7fc      	b.n	801b534 <strncmp+0x1e>

0801b53a <strstr>:
 801b53a:	780a      	ldrb	r2, [r1, #0]
 801b53c:	b570      	push	{r4, r5, r6, lr}
 801b53e:	b96a      	cbnz	r2, 801b55c <strstr+0x22>
 801b540:	bd70      	pop	{r4, r5, r6, pc}
 801b542:	429a      	cmp	r2, r3
 801b544:	d109      	bne.n	801b55a <strstr+0x20>
 801b546:	460c      	mov	r4, r1
 801b548:	4605      	mov	r5, r0
 801b54a:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 801b54e:	2b00      	cmp	r3, #0
 801b550:	d0f6      	beq.n	801b540 <strstr+0x6>
 801b552:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 801b556:	429e      	cmp	r6, r3
 801b558:	d0f7      	beq.n	801b54a <strstr+0x10>
 801b55a:	3001      	adds	r0, #1
 801b55c:	7803      	ldrb	r3, [r0, #0]
 801b55e:	2b00      	cmp	r3, #0
 801b560:	d1ef      	bne.n	801b542 <strstr+0x8>
 801b562:	4618      	mov	r0, r3
 801b564:	e7ec      	b.n	801b540 <strstr+0x6>
	...

0801b568 <_close_r>:
 801b568:	b538      	push	{r3, r4, r5, lr}
 801b56a:	4d06      	ldr	r5, [pc, #24]	@ (801b584 <_close_r+0x1c>)
 801b56c:	2300      	movs	r3, #0
 801b56e:	4604      	mov	r4, r0
 801b570:	4608      	mov	r0, r1
 801b572:	602b      	str	r3, [r5, #0]
 801b574:	f7e7 f960 	bl	8002838 <_close>
 801b578:	1c43      	adds	r3, r0, #1
 801b57a:	d102      	bne.n	801b582 <_close_r+0x1a>
 801b57c:	682b      	ldr	r3, [r5, #0]
 801b57e:	b103      	cbz	r3, 801b582 <_close_r+0x1a>
 801b580:	6023      	str	r3, [r4, #0]
 801b582:	bd38      	pop	{r3, r4, r5, pc}
 801b584:	2000c3a4 	.word	0x2000c3a4

0801b588 <_reclaim_reent>:
 801b588:	4b29      	ldr	r3, [pc, #164]	@ (801b630 <_reclaim_reent+0xa8>)
 801b58a:	681b      	ldr	r3, [r3, #0]
 801b58c:	4283      	cmp	r3, r0
 801b58e:	b570      	push	{r4, r5, r6, lr}
 801b590:	4604      	mov	r4, r0
 801b592:	d04b      	beq.n	801b62c <_reclaim_reent+0xa4>
 801b594:	69c3      	ldr	r3, [r0, #28]
 801b596:	b1ab      	cbz	r3, 801b5c4 <_reclaim_reent+0x3c>
 801b598:	68db      	ldr	r3, [r3, #12]
 801b59a:	b16b      	cbz	r3, 801b5b8 <_reclaim_reent+0x30>
 801b59c:	2500      	movs	r5, #0
 801b59e:	69e3      	ldr	r3, [r4, #28]
 801b5a0:	68db      	ldr	r3, [r3, #12]
 801b5a2:	5959      	ldr	r1, [r3, r5]
 801b5a4:	2900      	cmp	r1, #0
 801b5a6:	d13b      	bne.n	801b620 <_reclaim_reent+0x98>
 801b5a8:	3504      	adds	r5, #4
 801b5aa:	2d80      	cmp	r5, #128	@ 0x80
 801b5ac:	d1f7      	bne.n	801b59e <_reclaim_reent+0x16>
 801b5ae:	69e3      	ldr	r3, [r4, #28]
 801b5b0:	4620      	mov	r0, r4
 801b5b2:	68d9      	ldr	r1, [r3, #12]
 801b5b4:	f000 f8f2 	bl	801b79c <_free_r>
 801b5b8:	69e3      	ldr	r3, [r4, #28]
 801b5ba:	6819      	ldr	r1, [r3, #0]
 801b5bc:	b111      	cbz	r1, 801b5c4 <_reclaim_reent+0x3c>
 801b5be:	4620      	mov	r0, r4
 801b5c0:	f000 f8ec 	bl	801b79c <_free_r>
 801b5c4:	6961      	ldr	r1, [r4, #20]
 801b5c6:	b111      	cbz	r1, 801b5ce <_reclaim_reent+0x46>
 801b5c8:	4620      	mov	r0, r4
 801b5ca:	f000 f8e7 	bl	801b79c <_free_r>
 801b5ce:	69e1      	ldr	r1, [r4, #28]
 801b5d0:	b111      	cbz	r1, 801b5d8 <_reclaim_reent+0x50>
 801b5d2:	4620      	mov	r0, r4
 801b5d4:	f000 f8e2 	bl	801b79c <_free_r>
 801b5d8:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 801b5da:	b111      	cbz	r1, 801b5e2 <_reclaim_reent+0x5a>
 801b5dc:	4620      	mov	r0, r4
 801b5de:	f000 f8dd 	bl	801b79c <_free_r>
 801b5e2:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801b5e4:	b111      	cbz	r1, 801b5ec <_reclaim_reent+0x64>
 801b5e6:	4620      	mov	r0, r4
 801b5e8:	f000 f8d8 	bl	801b79c <_free_r>
 801b5ec:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 801b5ee:	b111      	cbz	r1, 801b5f6 <_reclaim_reent+0x6e>
 801b5f0:	4620      	mov	r0, r4
 801b5f2:	f000 f8d3 	bl	801b79c <_free_r>
 801b5f6:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 801b5f8:	b111      	cbz	r1, 801b600 <_reclaim_reent+0x78>
 801b5fa:	4620      	mov	r0, r4
 801b5fc:	f000 f8ce 	bl	801b79c <_free_r>
 801b600:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 801b602:	b111      	cbz	r1, 801b60a <_reclaim_reent+0x82>
 801b604:	4620      	mov	r0, r4
 801b606:	f000 f8c9 	bl	801b79c <_free_r>
 801b60a:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 801b60c:	b111      	cbz	r1, 801b614 <_reclaim_reent+0x8c>
 801b60e:	4620      	mov	r0, r4
 801b610:	f000 f8c4 	bl	801b79c <_free_r>
 801b614:	6a23      	ldr	r3, [r4, #32]
 801b616:	b14b      	cbz	r3, 801b62c <_reclaim_reent+0xa4>
 801b618:	4620      	mov	r0, r4
 801b61a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801b61e:	4718      	bx	r3
 801b620:	680e      	ldr	r6, [r1, #0]
 801b622:	4620      	mov	r0, r4
 801b624:	f000 f8ba 	bl	801b79c <_free_r>
 801b628:	4631      	mov	r1, r6
 801b62a:	e7bb      	b.n	801b5a4 <_reclaim_reent+0x1c>
 801b62c:	bd70      	pop	{r4, r5, r6, pc}
 801b62e:	bf00      	nop
 801b630:	200002ac 	.word	0x200002ac

0801b634 <_lseek_r>:
 801b634:	b538      	push	{r3, r4, r5, lr}
 801b636:	4d07      	ldr	r5, [pc, #28]	@ (801b654 <_lseek_r+0x20>)
 801b638:	4604      	mov	r4, r0
 801b63a:	4608      	mov	r0, r1
 801b63c:	4611      	mov	r1, r2
 801b63e:	2200      	movs	r2, #0
 801b640:	602a      	str	r2, [r5, #0]
 801b642:	461a      	mov	r2, r3
 801b644:	f7e7 f91f 	bl	8002886 <_lseek>
 801b648:	1c43      	adds	r3, r0, #1
 801b64a:	d102      	bne.n	801b652 <_lseek_r+0x1e>
 801b64c:	682b      	ldr	r3, [r5, #0]
 801b64e:	b103      	cbz	r3, 801b652 <_lseek_r+0x1e>
 801b650:	6023      	str	r3, [r4, #0]
 801b652:	bd38      	pop	{r3, r4, r5, pc}
 801b654:	2000c3a4 	.word	0x2000c3a4

0801b658 <_read_r>:
 801b658:	b538      	push	{r3, r4, r5, lr}
 801b65a:	4d07      	ldr	r5, [pc, #28]	@ (801b678 <_read_r+0x20>)
 801b65c:	4604      	mov	r4, r0
 801b65e:	4608      	mov	r0, r1
 801b660:	4611      	mov	r1, r2
 801b662:	2200      	movs	r2, #0
 801b664:	602a      	str	r2, [r5, #0]
 801b666:	461a      	mov	r2, r3
 801b668:	f7e7 f8ad 	bl	80027c6 <_read>
 801b66c:	1c43      	adds	r3, r0, #1
 801b66e:	d102      	bne.n	801b676 <_read_r+0x1e>
 801b670:	682b      	ldr	r3, [r5, #0]
 801b672:	b103      	cbz	r3, 801b676 <_read_r+0x1e>
 801b674:	6023      	str	r3, [r4, #0]
 801b676:	bd38      	pop	{r3, r4, r5, pc}
 801b678:	2000c3a4 	.word	0x2000c3a4

0801b67c <_sbrk_r>:
 801b67c:	b538      	push	{r3, r4, r5, lr}
 801b67e:	4d06      	ldr	r5, [pc, #24]	@ (801b698 <_sbrk_r+0x1c>)
 801b680:	2300      	movs	r3, #0
 801b682:	4604      	mov	r4, r0
 801b684:	4608      	mov	r0, r1
 801b686:	602b      	str	r3, [r5, #0]
 801b688:	f7e7 f90a 	bl	80028a0 <_sbrk>
 801b68c:	1c43      	adds	r3, r0, #1
 801b68e:	d102      	bne.n	801b696 <_sbrk_r+0x1a>
 801b690:	682b      	ldr	r3, [r5, #0]
 801b692:	b103      	cbz	r3, 801b696 <_sbrk_r+0x1a>
 801b694:	6023      	str	r3, [r4, #0]
 801b696:	bd38      	pop	{r3, r4, r5, pc}
 801b698:	2000c3a4 	.word	0x2000c3a4

0801b69c <_write_r>:
 801b69c:	b538      	push	{r3, r4, r5, lr}
 801b69e:	4d07      	ldr	r5, [pc, #28]	@ (801b6bc <_write_r+0x20>)
 801b6a0:	4604      	mov	r4, r0
 801b6a2:	4608      	mov	r0, r1
 801b6a4:	4611      	mov	r1, r2
 801b6a6:	2200      	movs	r2, #0
 801b6a8:	602a      	str	r2, [r5, #0]
 801b6aa:	461a      	mov	r2, r3
 801b6ac:	f7e7 f8a8 	bl	8002800 <_write>
 801b6b0:	1c43      	adds	r3, r0, #1
 801b6b2:	d102      	bne.n	801b6ba <_write_r+0x1e>
 801b6b4:	682b      	ldr	r3, [r5, #0]
 801b6b6:	b103      	cbz	r3, 801b6ba <_write_r+0x1e>
 801b6b8:	6023      	str	r3, [r4, #0]
 801b6ba:	bd38      	pop	{r3, r4, r5, pc}
 801b6bc:	2000c3a4 	.word	0x2000c3a4

0801b6c0 <__errno>:
 801b6c0:	4b01      	ldr	r3, [pc, #4]	@ (801b6c8 <__errno+0x8>)
 801b6c2:	6818      	ldr	r0, [r3, #0]
 801b6c4:	4770      	bx	lr
 801b6c6:	bf00      	nop
 801b6c8:	200002ac 	.word	0x200002ac

0801b6cc <__libc_init_array>:
 801b6cc:	b570      	push	{r4, r5, r6, lr}
 801b6ce:	4d0d      	ldr	r5, [pc, #52]	@ (801b704 <__libc_init_array+0x38>)
 801b6d0:	4c0d      	ldr	r4, [pc, #52]	@ (801b708 <__libc_init_array+0x3c>)
 801b6d2:	1b64      	subs	r4, r4, r5
 801b6d4:	10a4      	asrs	r4, r4, #2
 801b6d6:	2600      	movs	r6, #0
 801b6d8:	42a6      	cmp	r6, r4
 801b6da:	d109      	bne.n	801b6f0 <__libc_init_array+0x24>
 801b6dc:	4d0b      	ldr	r5, [pc, #44]	@ (801b70c <__libc_init_array+0x40>)
 801b6de:	4c0c      	ldr	r4, [pc, #48]	@ (801b710 <__libc_init_array+0x44>)
 801b6e0:	f001 fe18 	bl	801d314 <_init>
 801b6e4:	1b64      	subs	r4, r4, r5
 801b6e6:	10a4      	asrs	r4, r4, #2
 801b6e8:	2600      	movs	r6, #0
 801b6ea:	42a6      	cmp	r6, r4
 801b6ec:	d105      	bne.n	801b6fa <__libc_init_array+0x2e>
 801b6ee:	bd70      	pop	{r4, r5, r6, pc}
 801b6f0:	f855 3b04 	ldr.w	r3, [r5], #4
 801b6f4:	4798      	blx	r3
 801b6f6:	3601      	adds	r6, #1
 801b6f8:	e7ee      	b.n	801b6d8 <__libc_init_array+0xc>
 801b6fa:	f855 3b04 	ldr.w	r3, [r5], #4
 801b6fe:	4798      	blx	r3
 801b700:	3601      	adds	r6, #1
 801b702:	e7f2      	b.n	801b6ea <__libc_init_array+0x1e>
 801b704:	0801e328 	.word	0x0801e328
 801b708:	0801e328 	.word	0x0801e328
 801b70c:	0801e328 	.word	0x0801e328
 801b710:	0801e330 	.word	0x0801e330

0801b714 <__retarget_lock_init_recursive>:
 801b714:	4770      	bx	lr

0801b716 <__retarget_lock_acquire_recursive>:
 801b716:	4770      	bx	lr

0801b718 <__retarget_lock_release_recursive>:
 801b718:	4770      	bx	lr

0801b71a <strcpy>:
 801b71a:	4603      	mov	r3, r0
 801b71c:	f811 2b01 	ldrb.w	r2, [r1], #1
 801b720:	f803 2b01 	strb.w	r2, [r3], #1
 801b724:	2a00      	cmp	r2, #0
 801b726:	d1f9      	bne.n	801b71c <strcpy+0x2>
 801b728:	4770      	bx	lr

0801b72a <memcpy>:
 801b72a:	440a      	add	r2, r1
 801b72c:	4291      	cmp	r1, r2
 801b72e:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 801b732:	d100      	bne.n	801b736 <memcpy+0xc>
 801b734:	4770      	bx	lr
 801b736:	b510      	push	{r4, lr}
 801b738:	f811 4b01 	ldrb.w	r4, [r1], #1
 801b73c:	f803 4f01 	strb.w	r4, [r3, #1]!
 801b740:	4291      	cmp	r1, r2
 801b742:	d1f9      	bne.n	801b738 <memcpy+0xe>
 801b744:	bd10      	pop	{r4, pc}
	...

0801b748 <__assert_func>:
 801b748:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801b74a:	4614      	mov	r4, r2
 801b74c:	461a      	mov	r2, r3
 801b74e:	4b09      	ldr	r3, [pc, #36]	@ (801b774 <__assert_func+0x2c>)
 801b750:	681b      	ldr	r3, [r3, #0]
 801b752:	4605      	mov	r5, r0
 801b754:	68d8      	ldr	r0, [r3, #12]
 801b756:	b954      	cbnz	r4, 801b76e <__assert_func+0x26>
 801b758:	4b07      	ldr	r3, [pc, #28]	@ (801b778 <__assert_func+0x30>)
 801b75a:	461c      	mov	r4, r3
 801b75c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 801b760:	9100      	str	r1, [sp, #0]
 801b762:	462b      	mov	r3, r5
 801b764:	4905      	ldr	r1, [pc, #20]	@ (801b77c <__assert_func+0x34>)
 801b766:	f000 fd3f 	bl	801c1e8 <fiprintf>
 801b76a:	f000 fdd3 	bl	801c314 <abort>
 801b76e:	4b04      	ldr	r3, [pc, #16]	@ (801b780 <__assert_func+0x38>)
 801b770:	e7f4      	b.n	801b75c <__assert_func+0x14>
 801b772:	bf00      	nop
 801b774:	200002ac 	.word	0x200002ac
 801b778:	0801e2b5 	.word	0x0801e2b5
 801b77c:	0801e287 	.word	0x0801e287
 801b780:	0801e27a 	.word	0x0801e27a

0801b784 <__env_lock>:
 801b784:	4801      	ldr	r0, [pc, #4]	@ (801b78c <__env_lock+0x8>)
 801b786:	f7ff bfc6 	b.w	801b716 <__retarget_lock_acquire_recursive>
 801b78a:	bf00      	nop
 801b78c:	2000c3a8 	.word	0x2000c3a8

0801b790 <__env_unlock>:
 801b790:	4801      	ldr	r0, [pc, #4]	@ (801b798 <__env_unlock+0x8>)
 801b792:	f7ff bfc1 	b.w	801b718 <__retarget_lock_release_recursive>
 801b796:	bf00      	nop
 801b798:	2000c3a8 	.word	0x2000c3a8

0801b79c <_free_r>:
 801b79c:	b538      	push	{r3, r4, r5, lr}
 801b79e:	4605      	mov	r5, r0
 801b7a0:	2900      	cmp	r1, #0
 801b7a2:	d041      	beq.n	801b828 <_free_r+0x8c>
 801b7a4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801b7a8:	1f0c      	subs	r4, r1, #4
 801b7aa:	2b00      	cmp	r3, #0
 801b7ac:	bfb8      	it	lt
 801b7ae:	18e4      	addlt	r4, r4, r3
 801b7b0:	f7ff fada 	bl	801ad68 <__malloc_lock>
 801b7b4:	4a1d      	ldr	r2, [pc, #116]	@ (801b82c <_free_r+0x90>)
 801b7b6:	6813      	ldr	r3, [r2, #0]
 801b7b8:	b933      	cbnz	r3, 801b7c8 <_free_r+0x2c>
 801b7ba:	6063      	str	r3, [r4, #4]
 801b7bc:	6014      	str	r4, [r2, #0]
 801b7be:	4628      	mov	r0, r5
 801b7c0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801b7c4:	f7ff bad6 	b.w	801ad74 <__malloc_unlock>
 801b7c8:	42a3      	cmp	r3, r4
 801b7ca:	d908      	bls.n	801b7de <_free_r+0x42>
 801b7cc:	6820      	ldr	r0, [r4, #0]
 801b7ce:	1821      	adds	r1, r4, r0
 801b7d0:	428b      	cmp	r3, r1
 801b7d2:	bf01      	itttt	eq
 801b7d4:	6819      	ldreq	r1, [r3, #0]
 801b7d6:	685b      	ldreq	r3, [r3, #4]
 801b7d8:	1809      	addeq	r1, r1, r0
 801b7da:	6021      	streq	r1, [r4, #0]
 801b7dc:	e7ed      	b.n	801b7ba <_free_r+0x1e>
 801b7de:	461a      	mov	r2, r3
 801b7e0:	685b      	ldr	r3, [r3, #4]
 801b7e2:	b10b      	cbz	r3, 801b7e8 <_free_r+0x4c>
 801b7e4:	42a3      	cmp	r3, r4
 801b7e6:	d9fa      	bls.n	801b7de <_free_r+0x42>
 801b7e8:	6811      	ldr	r1, [r2, #0]
 801b7ea:	1850      	adds	r0, r2, r1
 801b7ec:	42a0      	cmp	r0, r4
 801b7ee:	d10b      	bne.n	801b808 <_free_r+0x6c>
 801b7f0:	6820      	ldr	r0, [r4, #0]
 801b7f2:	4401      	add	r1, r0
 801b7f4:	1850      	adds	r0, r2, r1
 801b7f6:	4283      	cmp	r3, r0
 801b7f8:	6011      	str	r1, [r2, #0]
 801b7fa:	d1e0      	bne.n	801b7be <_free_r+0x22>
 801b7fc:	6818      	ldr	r0, [r3, #0]
 801b7fe:	685b      	ldr	r3, [r3, #4]
 801b800:	6053      	str	r3, [r2, #4]
 801b802:	4408      	add	r0, r1
 801b804:	6010      	str	r0, [r2, #0]
 801b806:	e7da      	b.n	801b7be <_free_r+0x22>
 801b808:	d902      	bls.n	801b810 <_free_r+0x74>
 801b80a:	230c      	movs	r3, #12
 801b80c:	602b      	str	r3, [r5, #0]
 801b80e:	e7d6      	b.n	801b7be <_free_r+0x22>
 801b810:	6820      	ldr	r0, [r4, #0]
 801b812:	1821      	adds	r1, r4, r0
 801b814:	428b      	cmp	r3, r1
 801b816:	bf04      	itt	eq
 801b818:	6819      	ldreq	r1, [r3, #0]
 801b81a:	685b      	ldreq	r3, [r3, #4]
 801b81c:	6063      	str	r3, [r4, #4]
 801b81e:	bf04      	itt	eq
 801b820:	1809      	addeq	r1, r1, r0
 801b822:	6021      	streq	r1, [r4, #0]
 801b824:	6054      	str	r4, [r2, #4]
 801b826:	e7ca      	b.n	801b7be <_free_r+0x22>
 801b828:	bd38      	pop	{r3, r4, r5, pc}
 801b82a:	bf00      	nop
 801b82c:	2000c264 	.word	0x2000c264

0801b830 <_malloc_usable_size_r>:
 801b830:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801b834:	1f18      	subs	r0, r3, #4
 801b836:	2b00      	cmp	r3, #0
 801b838:	bfbc      	itt	lt
 801b83a:	580b      	ldrlt	r3, [r1, r0]
 801b83c:	18c0      	addlt	r0, r0, r3
 801b83e:	4770      	bx	lr

0801b840 <__ssputs_r>:
 801b840:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801b844:	688e      	ldr	r6, [r1, #8]
 801b846:	461f      	mov	r7, r3
 801b848:	42be      	cmp	r6, r7
 801b84a:	680b      	ldr	r3, [r1, #0]
 801b84c:	4682      	mov	sl, r0
 801b84e:	460c      	mov	r4, r1
 801b850:	4690      	mov	r8, r2
 801b852:	d82d      	bhi.n	801b8b0 <__ssputs_r+0x70>
 801b854:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 801b858:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 801b85c:	d026      	beq.n	801b8ac <__ssputs_r+0x6c>
 801b85e:	6965      	ldr	r5, [r4, #20]
 801b860:	6909      	ldr	r1, [r1, #16]
 801b862:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801b866:	eba3 0901 	sub.w	r9, r3, r1
 801b86a:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 801b86e:	1c7b      	adds	r3, r7, #1
 801b870:	444b      	add	r3, r9
 801b872:	106d      	asrs	r5, r5, #1
 801b874:	429d      	cmp	r5, r3
 801b876:	bf38      	it	cc
 801b878:	461d      	movcc	r5, r3
 801b87a:	0553      	lsls	r3, r2, #21
 801b87c:	d527      	bpl.n	801b8ce <__ssputs_r+0x8e>
 801b87e:	4629      	mov	r1, r5
 801b880:	f7ff f9f2 	bl	801ac68 <_malloc_r>
 801b884:	4606      	mov	r6, r0
 801b886:	b360      	cbz	r0, 801b8e2 <__ssputs_r+0xa2>
 801b888:	6921      	ldr	r1, [r4, #16]
 801b88a:	464a      	mov	r2, r9
 801b88c:	f7ff ff4d 	bl	801b72a <memcpy>
 801b890:	89a3      	ldrh	r3, [r4, #12]
 801b892:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 801b896:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801b89a:	81a3      	strh	r3, [r4, #12]
 801b89c:	6126      	str	r6, [r4, #16]
 801b89e:	6165      	str	r5, [r4, #20]
 801b8a0:	444e      	add	r6, r9
 801b8a2:	eba5 0509 	sub.w	r5, r5, r9
 801b8a6:	6026      	str	r6, [r4, #0]
 801b8a8:	60a5      	str	r5, [r4, #8]
 801b8aa:	463e      	mov	r6, r7
 801b8ac:	42be      	cmp	r6, r7
 801b8ae:	d900      	bls.n	801b8b2 <__ssputs_r+0x72>
 801b8b0:	463e      	mov	r6, r7
 801b8b2:	6820      	ldr	r0, [r4, #0]
 801b8b4:	4632      	mov	r2, r6
 801b8b6:	4641      	mov	r1, r8
 801b8b8:	f7ff fdfe 	bl	801b4b8 <memmove>
 801b8bc:	68a3      	ldr	r3, [r4, #8]
 801b8be:	1b9b      	subs	r3, r3, r6
 801b8c0:	60a3      	str	r3, [r4, #8]
 801b8c2:	6823      	ldr	r3, [r4, #0]
 801b8c4:	4433      	add	r3, r6
 801b8c6:	6023      	str	r3, [r4, #0]
 801b8c8:	2000      	movs	r0, #0
 801b8ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801b8ce:	462a      	mov	r2, r5
 801b8d0:	f7ff faca 	bl	801ae68 <_realloc_r>
 801b8d4:	4606      	mov	r6, r0
 801b8d6:	2800      	cmp	r0, #0
 801b8d8:	d1e0      	bne.n	801b89c <__ssputs_r+0x5c>
 801b8da:	6921      	ldr	r1, [r4, #16]
 801b8dc:	4650      	mov	r0, sl
 801b8de:	f7ff ff5d 	bl	801b79c <_free_r>
 801b8e2:	230c      	movs	r3, #12
 801b8e4:	f8ca 3000 	str.w	r3, [sl]
 801b8e8:	89a3      	ldrh	r3, [r4, #12]
 801b8ea:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801b8ee:	81a3      	strh	r3, [r4, #12]
 801b8f0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801b8f4:	e7e9      	b.n	801b8ca <__ssputs_r+0x8a>
	...

0801b8f8 <_svfiprintf_r>:
 801b8f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b8fc:	4698      	mov	r8, r3
 801b8fe:	898b      	ldrh	r3, [r1, #12]
 801b900:	061b      	lsls	r3, r3, #24
 801b902:	b09d      	sub	sp, #116	@ 0x74
 801b904:	4607      	mov	r7, r0
 801b906:	460d      	mov	r5, r1
 801b908:	4614      	mov	r4, r2
 801b90a:	d510      	bpl.n	801b92e <_svfiprintf_r+0x36>
 801b90c:	690b      	ldr	r3, [r1, #16]
 801b90e:	b973      	cbnz	r3, 801b92e <_svfiprintf_r+0x36>
 801b910:	2140      	movs	r1, #64	@ 0x40
 801b912:	f7ff f9a9 	bl	801ac68 <_malloc_r>
 801b916:	6028      	str	r0, [r5, #0]
 801b918:	6128      	str	r0, [r5, #16]
 801b91a:	b930      	cbnz	r0, 801b92a <_svfiprintf_r+0x32>
 801b91c:	230c      	movs	r3, #12
 801b91e:	603b      	str	r3, [r7, #0]
 801b920:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801b924:	b01d      	add	sp, #116	@ 0x74
 801b926:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b92a:	2340      	movs	r3, #64	@ 0x40
 801b92c:	616b      	str	r3, [r5, #20]
 801b92e:	2300      	movs	r3, #0
 801b930:	9309      	str	r3, [sp, #36]	@ 0x24
 801b932:	2320      	movs	r3, #32
 801b934:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 801b938:	f8cd 800c 	str.w	r8, [sp, #12]
 801b93c:	2330      	movs	r3, #48	@ 0x30
 801b93e:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 801badc <_svfiprintf_r+0x1e4>
 801b942:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 801b946:	f04f 0901 	mov.w	r9, #1
 801b94a:	4623      	mov	r3, r4
 801b94c:	469a      	mov	sl, r3
 801b94e:	f813 2b01 	ldrb.w	r2, [r3], #1
 801b952:	b10a      	cbz	r2, 801b958 <_svfiprintf_r+0x60>
 801b954:	2a25      	cmp	r2, #37	@ 0x25
 801b956:	d1f9      	bne.n	801b94c <_svfiprintf_r+0x54>
 801b958:	ebba 0b04 	subs.w	fp, sl, r4
 801b95c:	d00b      	beq.n	801b976 <_svfiprintf_r+0x7e>
 801b95e:	465b      	mov	r3, fp
 801b960:	4622      	mov	r2, r4
 801b962:	4629      	mov	r1, r5
 801b964:	4638      	mov	r0, r7
 801b966:	f7ff ff6b 	bl	801b840 <__ssputs_r>
 801b96a:	3001      	adds	r0, #1
 801b96c:	f000 80a7 	beq.w	801babe <_svfiprintf_r+0x1c6>
 801b970:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801b972:	445a      	add	r2, fp
 801b974:	9209      	str	r2, [sp, #36]	@ 0x24
 801b976:	f89a 3000 	ldrb.w	r3, [sl]
 801b97a:	2b00      	cmp	r3, #0
 801b97c:	f000 809f 	beq.w	801babe <_svfiprintf_r+0x1c6>
 801b980:	2300      	movs	r3, #0
 801b982:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 801b986:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801b98a:	f10a 0a01 	add.w	sl, sl, #1
 801b98e:	9304      	str	r3, [sp, #16]
 801b990:	9307      	str	r3, [sp, #28]
 801b992:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 801b996:	931a      	str	r3, [sp, #104]	@ 0x68
 801b998:	4654      	mov	r4, sl
 801b99a:	2205      	movs	r2, #5
 801b99c:	f814 1b01 	ldrb.w	r1, [r4], #1
 801b9a0:	484e      	ldr	r0, [pc, #312]	@ (801badc <_svfiprintf_r+0x1e4>)
 801b9a2:	f7e4 fc2d 	bl	8000200 <memchr>
 801b9a6:	9a04      	ldr	r2, [sp, #16]
 801b9a8:	b9d8      	cbnz	r0, 801b9e2 <_svfiprintf_r+0xea>
 801b9aa:	06d0      	lsls	r0, r2, #27
 801b9ac:	bf44      	itt	mi
 801b9ae:	2320      	movmi	r3, #32
 801b9b0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801b9b4:	0711      	lsls	r1, r2, #28
 801b9b6:	bf44      	itt	mi
 801b9b8:	232b      	movmi	r3, #43	@ 0x2b
 801b9ba:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801b9be:	f89a 3000 	ldrb.w	r3, [sl]
 801b9c2:	2b2a      	cmp	r3, #42	@ 0x2a
 801b9c4:	d015      	beq.n	801b9f2 <_svfiprintf_r+0xfa>
 801b9c6:	9a07      	ldr	r2, [sp, #28]
 801b9c8:	4654      	mov	r4, sl
 801b9ca:	2000      	movs	r0, #0
 801b9cc:	f04f 0c0a 	mov.w	ip, #10
 801b9d0:	4621      	mov	r1, r4
 801b9d2:	f811 3b01 	ldrb.w	r3, [r1], #1
 801b9d6:	3b30      	subs	r3, #48	@ 0x30
 801b9d8:	2b09      	cmp	r3, #9
 801b9da:	d94b      	bls.n	801ba74 <_svfiprintf_r+0x17c>
 801b9dc:	b1b0      	cbz	r0, 801ba0c <_svfiprintf_r+0x114>
 801b9de:	9207      	str	r2, [sp, #28]
 801b9e0:	e014      	b.n	801ba0c <_svfiprintf_r+0x114>
 801b9e2:	eba0 0308 	sub.w	r3, r0, r8
 801b9e6:	fa09 f303 	lsl.w	r3, r9, r3
 801b9ea:	4313      	orrs	r3, r2
 801b9ec:	9304      	str	r3, [sp, #16]
 801b9ee:	46a2      	mov	sl, r4
 801b9f0:	e7d2      	b.n	801b998 <_svfiprintf_r+0xa0>
 801b9f2:	9b03      	ldr	r3, [sp, #12]
 801b9f4:	1d19      	adds	r1, r3, #4
 801b9f6:	681b      	ldr	r3, [r3, #0]
 801b9f8:	9103      	str	r1, [sp, #12]
 801b9fa:	2b00      	cmp	r3, #0
 801b9fc:	bfbb      	ittet	lt
 801b9fe:	425b      	neglt	r3, r3
 801ba00:	f042 0202 	orrlt.w	r2, r2, #2
 801ba04:	9307      	strge	r3, [sp, #28]
 801ba06:	9307      	strlt	r3, [sp, #28]
 801ba08:	bfb8      	it	lt
 801ba0a:	9204      	strlt	r2, [sp, #16]
 801ba0c:	7823      	ldrb	r3, [r4, #0]
 801ba0e:	2b2e      	cmp	r3, #46	@ 0x2e
 801ba10:	d10a      	bne.n	801ba28 <_svfiprintf_r+0x130>
 801ba12:	7863      	ldrb	r3, [r4, #1]
 801ba14:	2b2a      	cmp	r3, #42	@ 0x2a
 801ba16:	d132      	bne.n	801ba7e <_svfiprintf_r+0x186>
 801ba18:	9b03      	ldr	r3, [sp, #12]
 801ba1a:	1d1a      	adds	r2, r3, #4
 801ba1c:	681b      	ldr	r3, [r3, #0]
 801ba1e:	9203      	str	r2, [sp, #12]
 801ba20:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 801ba24:	3402      	adds	r4, #2
 801ba26:	9305      	str	r3, [sp, #20]
 801ba28:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 801baec <_svfiprintf_r+0x1f4>
 801ba2c:	7821      	ldrb	r1, [r4, #0]
 801ba2e:	2203      	movs	r2, #3
 801ba30:	4650      	mov	r0, sl
 801ba32:	f7e4 fbe5 	bl	8000200 <memchr>
 801ba36:	b138      	cbz	r0, 801ba48 <_svfiprintf_r+0x150>
 801ba38:	9b04      	ldr	r3, [sp, #16]
 801ba3a:	eba0 000a 	sub.w	r0, r0, sl
 801ba3e:	2240      	movs	r2, #64	@ 0x40
 801ba40:	4082      	lsls	r2, r0
 801ba42:	4313      	orrs	r3, r2
 801ba44:	3401      	adds	r4, #1
 801ba46:	9304      	str	r3, [sp, #16]
 801ba48:	f814 1b01 	ldrb.w	r1, [r4], #1
 801ba4c:	4824      	ldr	r0, [pc, #144]	@ (801bae0 <_svfiprintf_r+0x1e8>)
 801ba4e:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 801ba52:	2206      	movs	r2, #6
 801ba54:	f7e4 fbd4 	bl	8000200 <memchr>
 801ba58:	2800      	cmp	r0, #0
 801ba5a:	d036      	beq.n	801baca <_svfiprintf_r+0x1d2>
 801ba5c:	4b21      	ldr	r3, [pc, #132]	@ (801bae4 <_svfiprintf_r+0x1ec>)
 801ba5e:	bb1b      	cbnz	r3, 801baa8 <_svfiprintf_r+0x1b0>
 801ba60:	9b03      	ldr	r3, [sp, #12]
 801ba62:	3307      	adds	r3, #7
 801ba64:	f023 0307 	bic.w	r3, r3, #7
 801ba68:	3308      	adds	r3, #8
 801ba6a:	9303      	str	r3, [sp, #12]
 801ba6c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801ba6e:	4433      	add	r3, r6
 801ba70:	9309      	str	r3, [sp, #36]	@ 0x24
 801ba72:	e76a      	b.n	801b94a <_svfiprintf_r+0x52>
 801ba74:	fb0c 3202 	mla	r2, ip, r2, r3
 801ba78:	460c      	mov	r4, r1
 801ba7a:	2001      	movs	r0, #1
 801ba7c:	e7a8      	b.n	801b9d0 <_svfiprintf_r+0xd8>
 801ba7e:	2300      	movs	r3, #0
 801ba80:	3401      	adds	r4, #1
 801ba82:	9305      	str	r3, [sp, #20]
 801ba84:	4619      	mov	r1, r3
 801ba86:	f04f 0c0a 	mov.w	ip, #10
 801ba8a:	4620      	mov	r0, r4
 801ba8c:	f810 2b01 	ldrb.w	r2, [r0], #1
 801ba90:	3a30      	subs	r2, #48	@ 0x30
 801ba92:	2a09      	cmp	r2, #9
 801ba94:	d903      	bls.n	801ba9e <_svfiprintf_r+0x1a6>
 801ba96:	2b00      	cmp	r3, #0
 801ba98:	d0c6      	beq.n	801ba28 <_svfiprintf_r+0x130>
 801ba9a:	9105      	str	r1, [sp, #20]
 801ba9c:	e7c4      	b.n	801ba28 <_svfiprintf_r+0x130>
 801ba9e:	fb0c 2101 	mla	r1, ip, r1, r2
 801baa2:	4604      	mov	r4, r0
 801baa4:	2301      	movs	r3, #1
 801baa6:	e7f0      	b.n	801ba8a <_svfiprintf_r+0x192>
 801baa8:	ab03      	add	r3, sp, #12
 801baaa:	9300      	str	r3, [sp, #0]
 801baac:	462a      	mov	r2, r5
 801baae:	4b0e      	ldr	r3, [pc, #56]	@ (801bae8 <_svfiprintf_r+0x1f0>)
 801bab0:	a904      	add	r1, sp, #16
 801bab2:	4638      	mov	r0, r7
 801bab4:	f3af 8000 	nop.w
 801bab8:	1c42      	adds	r2, r0, #1
 801baba:	4606      	mov	r6, r0
 801babc:	d1d6      	bne.n	801ba6c <_svfiprintf_r+0x174>
 801babe:	89ab      	ldrh	r3, [r5, #12]
 801bac0:	065b      	lsls	r3, r3, #25
 801bac2:	f53f af2d 	bmi.w	801b920 <_svfiprintf_r+0x28>
 801bac6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801bac8:	e72c      	b.n	801b924 <_svfiprintf_r+0x2c>
 801baca:	ab03      	add	r3, sp, #12
 801bacc:	9300      	str	r3, [sp, #0]
 801bace:	462a      	mov	r2, r5
 801bad0:	4b05      	ldr	r3, [pc, #20]	@ (801bae8 <_svfiprintf_r+0x1f0>)
 801bad2:	a904      	add	r1, sp, #16
 801bad4:	4638      	mov	r0, r7
 801bad6:	f000 f9bb 	bl	801be50 <_printf_i>
 801bada:	e7ed      	b.n	801bab8 <_svfiprintf_r+0x1c0>
 801badc:	0801e2b6 	.word	0x0801e2b6
 801bae0:	0801e2c0 	.word	0x0801e2c0
 801bae4:	00000000 	.word	0x00000000
 801bae8:	0801b841 	.word	0x0801b841
 801baec:	0801e2bc 	.word	0x0801e2bc

0801baf0 <__sfputc_r>:
 801baf0:	6893      	ldr	r3, [r2, #8]
 801baf2:	3b01      	subs	r3, #1
 801baf4:	2b00      	cmp	r3, #0
 801baf6:	b410      	push	{r4}
 801baf8:	6093      	str	r3, [r2, #8]
 801bafa:	da08      	bge.n	801bb0e <__sfputc_r+0x1e>
 801bafc:	6994      	ldr	r4, [r2, #24]
 801bafe:	42a3      	cmp	r3, r4
 801bb00:	db01      	blt.n	801bb06 <__sfputc_r+0x16>
 801bb02:	290a      	cmp	r1, #10
 801bb04:	d103      	bne.n	801bb0e <__sfputc_r+0x1e>
 801bb06:	f85d 4b04 	ldr.w	r4, [sp], #4
 801bb0a:	f7ff bc31 	b.w	801b370 <__swbuf_r>
 801bb0e:	6813      	ldr	r3, [r2, #0]
 801bb10:	1c58      	adds	r0, r3, #1
 801bb12:	6010      	str	r0, [r2, #0]
 801bb14:	7019      	strb	r1, [r3, #0]
 801bb16:	4608      	mov	r0, r1
 801bb18:	f85d 4b04 	ldr.w	r4, [sp], #4
 801bb1c:	4770      	bx	lr

0801bb1e <__sfputs_r>:
 801bb1e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801bb20:	4606      	mov	r6, r0
 801bb22:	460f      	mov	r7, r1
 801bb24:	4614      	mov	r4, r2
 801bb26:	18d5      	adds	r5, r2, r3
 801bb28:	42ac      	cmp	r4, r5
 801bb2a:	d101      	bne.n	801bb30 <__sfputs_r+0x12>
 801bb2c:	2000      	movs	r0, #0
 801bb2e:	e007      	b.n	801bb40 <__sfputs_r+0x22>
 801bb30:	f814 1b01 	ldrb.w	r1, [r4], #1
 801bb34:	463a      	mov	r2, r7
 801bb36:	4630      	mov	r0, r6
 801bb38:	f7ff ffda 	bl	801baf0 <__sfputc_r>
 801bb3c:	1c43      	adds	r3, r0, #1
 801bb3e:	d1f3      	bne.n	801bb28 <__sfputs_r+0xa>
 801bb40:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0801bb44 <_vfiprintf_r>:
 801bb44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801bb48:	460d      	mov	r5, r1
 801bb4a:	b09d      	sub	sp, #116	@ 0x74
 801bb4c:	4614      	mov	r4, r2
 801bb4e:	4698      	mov	r8, r3
 801bb50:	4606      	mov	r6, r0
 801bb52:	b118      	cbz	r0, 801bb5c <_vfiprintf_r+0x18>
 801bb54:	6a03      	ldr	r3, [r0, #32]
 801bb56:	b90b      	cbnz	r3, 801bb5c <_vfiprintf_r+0x18>
 801bb58:	f7ff fab8 	bl	801b0cc <__sinit>
 801bb5c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801bb5e:	07d9      	lsls	r1, r3, #31
 801bb60:	d405      	bmi.n	801bb6e <_vfiprintf_r+0x2a>
 801bb62:	89ab      	ldrh	r3, [r5, #12]
 801bb64:	059a      	lsls	r2, r3, #22
 801bb66:	d402      	bmi.n	801bb6e <_vfiprintf_r+0x2a>
 801bb68:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801bb6a:	f7ff fdd4 	bl	801b716 <__retarget_lock_acquire_recursive>
 801bb6e:	89ab      	ldrh	r3, [r5, #12]
 801bb70:	071b      	lsls	r3, r3, #28
 801bb72:	d501      	bpl.n	801bb78 <_vfiprintf_r+0x34>
 801bb74:	692b      	ldr	r3, [r5, #16]
 801bb76:	b99b      	cbnz	r3, 801bba0 <_vfiprintf_r+0x5c>
 801bb78:	4629      	mov	r1, r5
 801bb7a:	4630      	mov	r0, r6
 801bb7c:	f7ff fc36 	bl	801b3ec <__swsetup_r>
 801bb80:	b170      	cbz	r0, 801bba0 <_vfiprintf_r+0x5c>
 801bb82:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801bb84:	07dc      	lsls	r4, r3, #31
 801bb86:	d504      	bpl.n	801bb92 <_vfiprintf_r+0x4e>
 801bb88:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801bb8c:	b01d      	add	sp, #116	@ 0x74
 801bb8e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801bb92:	89ab      	ldrh	r3, [r5, #12]
 801bb94:	0598      	lsls	r0, r3, #22
 801bb96:	d4f7      	bmi.n	801bb88 <_vfiprintf_r+0x44>
 801bb98:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801bb9a:	f7ff fdbd 	bl	801b718 <__retarget_lock_release_recursive>
 801bb9e:	e7f3      	b.n	801bb88 <_vfiprintf_r+0x44>
 801bba0:	2300      	movs	r3, #0
 801bba2:	9309      	str	r3, [sp, #36]	@ 0x24
 801bba4:	2320      	movs	r3, #32
 801bba6:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 801bbaa:	f8cd 800c 	str.w	r8, [sp, #12]
 801bbae:	2330      	movs	r3, #48	@ 0x30
 801bbb0:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 801bd60 <_vfiprintf_r+0x21c>
 801bbb4:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 801bbb8:	f04f 0901 	mov.w	r9, #1
 801bbbc:	4623      	mov	r3, r4
 801bbbe:	469a      	mov	sl, r3
 801bbc0:	f813 2b01 	ldrb.w	r2, [r3], #1
 801bbc4:	b10a      	cbz	r2, 801bbca <_vfiprintf_r+0x86>
 801bbc6:	2a25      	cmp	r2, #37	@ 0x25
 801bbc8:	d1f9      	bne.n	801bbbe <_vfiprintf_r+0x7a>
 801bbca:	ebba 0b04 	subs.w	fp, sl, r4
 801bbce:	d00b      	beq.n	801bbe8 <_vfiprintf_r+0xa4>
 801bbd0:	465b      	mov	r3, fp
 801bbd2:	4622      	mov	r2, r4
 801bbd4:	4629      	mov	r1, r5
 801bbd6:	4630      	mov	r0, r6
 801bbd8:	f7ff ffa1 	bl	801bb1e <__sfputs_r>
 801bbdc:	3001      	adds	r0, #1
 801bbde:	f000 80a7 	beq.w	801bd30 <_vfiprintf_r+0x1ec>
 801bbe2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801bbe4:	445a      	add	r2, fp
 801bbe6:	9209      	str	r2, [sp, #36]	@ 0x24
 801bbe8:	f89a 3000 	ldrb.w	r3, [sl]
 801bbec:	2b00      	cmp	r3, #0
 801bbee:	f000 809f 	beq.w	801bd30 <_vfiprintf_r+0x1ec>
 801bbf2:	2300      	movs	r3, #0
 801bbf4:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 801bbf8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801bbfc:	f10a 0a01 	add.w	sl, sl, #1
 801bc00:	9304      	str	r3, [sp, #16]
 801bc02:	9307      	str	r3, [sp, #28]
 801bc04:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 801bc08:	931a      	str	r3, [sp, #104]	@ 0x68
 801bc0a:	4654      	mov	r4, sl
 801bc0c:	2205      	movs	r2, #5
 801bc0e:	f814 1b01 	ldrb.w	r1, [r4], #1
 801bc12:	4853      	ldr	r0, [pc, #332]	@ (801bd60 <_vfiprintf_r+0x21c>)
 801bc14:	f7e4 faf4 	bl	8000200 <memchr>
 801bc18:	9a04      	ldr	r2, [sp, #16]
 801bc1a:	b9d8      	cbnz	r0, 801bc54 <_vfiprintf_r+0x110>
 801bc1c:	06d1      	lsls	r1, r2, #27
 801bc1e:	bf44      	itt	mi
 801bc20:	2320      	movmi	r3, #32
 801bc22:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801bc26:	0713      	lsls	r3, r2, #28
 801bc28:	bf44      	itt	mi
 801bc2a:	232b      	movmi	r3, #43	@ 0x2b
 801bc2c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801bc30:	f89a 3000 	ldrb.w	r3, [sl]
 801bc34:	2b2a      	cmp	r3, #42	@ 0x2a
 801bc36:	d015      	beq.n	801bc64 <_vfiprintf_r+0x120>
 801bc38:	9a07      	ldr	r2, [sp, #28]
 801bc3a:	4654      	mov	r4, sl
 801bc3c:	2000      	movs	r0, #0
 801bc3e:	f04f 0c0a 	mov.w	ip, #10
 801bc42:	4621      	mov	r1, r4
 801bc44:	f811 3b01 	ldrb.w	r3, [r1], #1
 801bc48:	3b30      	subs	r3, #48	@ 0x30
 801bc4a:	2b09      	cmp	r3, #9
 801bc4c:	d94b      	bls.n	801bce6 <_vfiprintf_r+0x1a2>
 801bc4e:	b1b0      	cbz	r0, 801bc7e <_vfiprintf_r+0x13a>
 801bc50:	9207      	str	r2, [sp, #28]
 801bc52:	e014      	b.n	801bc7e <_vfiprintf_r+0x13a>
 801bc54:	eba0 0308 	sub.w	r3, r0, r8
 801bc58:	fa09 f303 	lsl.w	r3, r9, r3
 801bc5c:	4313      	orrs	r3, r2
 801bc5e:	9304      	str	r3, [sp, #16]
 801bc60:	46a2      	mov	sl, r4
 801bc62:	e7d2      	b.n	801bc0a <_vfiprintf_r+0xc6>
 801bc64:	9b03      	ldr	r3, [sp, #12]
 801bc66:	1d19      	adds	r1, r3, #4
 801bc68:	681b      	ldr	r3, [r3, #0]
 801bc6a:	9103      	str	r1, [sp, #12]
 801bc6c:	2b00      	cmp	r3, #0
 801bc6e:	bfbb      	ittet	lt
 801bc70:	425b      	neglt	r3, r3
 801bc72:	f042 0202 	orrlt.w	r2, r2, #2
 801bc76:	9307      	strge	r3, [sp, #28]
 801bc78:	9307      	strlt	r3, [sp, #28]
 801bc7a:	bfb8      	it	lt
 801bc7c:	9204      	strlt	r2, [sp, #16]
 801bc7e:	7823      	ldrb	r3, [r4, #0]
 801bc80:	2b2e      	cmp	r3, #46	@ 0x2e
 801bc82:	d10a      	bne.n	801bc9a <_vfiprintf_r+0x156>
 801bc84:	7863      	ldrb	r3, [r4, #1]
 801bc86:	2b2a      	cmp	r3, #42	@ 0x2a
 801bc88:	d132      	bne.n	801bcf0 <_vfiprintf_r+0x1ac>
 801bc8a:	9b03      	ldr	r3, [sp, #12]
 801bc8c:	1d1a      	adds	r2, r3, #4
 801bc8e:	681b      	ldr	r3, [r3, #0]
 801bc90:	9203      	str	r2, [sp, #12]
 801bc92:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 801bc96:	3402      	adds	r4, #2
 801bc98:	9305      	str	r3, [sp, #20]
 801bc9a:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 801bd70 <_vfiprintf_r+0x22c>
 801bc9e:	7821      	ldrb	r1, [r4, #0]
 801bca0:	2203      	movs	r2, #3
 801bca2:	4650      	mov	r0, sl
 801bca4:	f7e4 faac 	bl	8000200 <memchr>
 801bca8:	b138      	cbz	r0, 801bcba <_vfiprintf_r+0x176>
 801bcaa:	9b04      	ldr	r3, [sp, #16]
 801bcac:	eba0 000a 	sub.w	r0, r0, sl
 801bcb0:	2240      	movs	r2, #64	@ 0x40
 801bcb2:	4082      	lsls	r2, r0
 801bcb4:	4313      	orrs	r3, r2
 801bcb6:	3401      	adds	r4, #1
 801bcb8:	9304      	str	r3, [sp, #16]
 801bcba:	f814 1b01 	ldrb.w	r1, [r4], #1
 801bcbe:	4829      	ldr	r0, [pc, #164]	@ (801bd64 <_vfiprintf_r+0x220>)
 801bcc0:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 801bcc4:	2206      	movs	r2, #6
 801bcc6:	f7e4 fa9b 	bl	8000200 <memchr>
 801bcca:	2800      	cmp	r0, #0
 801bccc:	d03f      	beq.n	801bd4e <_vfiprintf_r+0x20a>
 801bcce:	4b26      	ldr	r3, [pc, #152]	@ (801bd68 <_vfiprintf_r+0x224>)
 801bcd0:	bb1b      	cbnz	r3, 801bd1a <_vfiprintf_r+0x1d6>
 801bcd2:	9b03      	ldr	r3, [sp, #12]
 801bcd4:	3307      	adds	r3, #7
 801bcd6:	f023 0307 	bic.w	r3, r3, #7
 801bcda:	3308      	adds	r3, #8
 801bcdc:	9303      	str	r3, [sp, #12]
 801bcde:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801bce0:	443b      	add	r3, r7
 801bce2:	9309      	str	r3, [sp, #36]	@ 0x24
 801bce4:	e76a      	b.n	801bbbc <_vfiprintf_r+0x78>
 801bce6:	fb0c 3202 	mla	r2, ip, r2, r3
 801bcea:	460c      	mov	r4, r1
 801bcec:	2001      	movs	r0, #1
 801bcee:	e7a8      	b.n	801bc42 <_vfiprintf_r+0xfe>
 801bcf0:	2300      	movs	r3, #0
 801bcf2:	3401      	adds	r4, #1
 801bcf4:	9305      	str	r3, [sp, #20]
 801bcf6:	4619      	mov	r1, r3
 801bcf8:	f04f 0c0a 	mov.w	ip, #10
 801bcfc:	4620      	mov	r0, r4
 801bcfe:	f810 2b01 	ldrb.w	r2, [r0], #1
 801bd02:	3a30      	subs	r2, #48	@ 0x30
 801bd04:	2a09      	cmp	r2, #9
 801bd06:	d903      	bls.n	801bd10 <_vfiprintf_r+0x1cc>
 801bd08:	2b00      	cmp	r3, #0
 801bd0a:	d0c6      	beq.n	801bc9a <_vfiprintf_r+0x156>
 801bd0c:	9105      	str	r1, [sp, #20]
 801bd0e:	e7c4      	b.n	801bc9a <_vfiprintf_r+0x156>
 801bd10:	fb0c 2101 	mla	r1, ip, r1, r2
 801bd14:	4604      	mov	r4, r0
 801bd16:	2301      	movs	r3, #1
 801bd18:	e7f0      	b.n	801bcfc <_vfiprintf_r+0x1b8>
 801bd1a:	ab03      	add	r3, sp, #12
 801bd1c:	9300      	str	r3, [sp, #0]
 801bd1e:	462a      	mov	r2, r5
 801bd20:	4b12      	ldr	r3, [pc, #72]	@ (801bd6c <_vfiprintf_r+0x228>)
 801bd22:	a904      	add	r1, sp, #16
 801bd24:	4630      	mov	r0, r6
 801bd26:	f3af 8000 	nop.w
 801bd2a:	4607      	mov	r7, r0
 801bd2c:	1c78      	adds	r0, r7, #1
 801bd2e:	d1d6      	bne.n	801bcde <_vfiprintf_r+0x19a>
 801bd30:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801bd32:	07d9      	lsls	r1, r3, #31
 801bd34:	d405      	bmi.n	801bd42 <_vfiprintf_r+0x1fe>
 801bd36:	89ab      	ldrh	r3, [r5, #12]
 801bd38:	059a      	lsls	r2, r3, #22
 801bd3a:	d402      	bmi.n	801bd42 <_vfiprintf_r+0x1fe>
 801bd3c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801bd3e:	f7ff fceb 	bl	801b718 <__retarget_lock_release_recursive>
 801bd42:	89ab      	ldrh	r3, [r5, #12]
 801bd44:	065b      	lsls	r3, r3, #25
 801bd46:	f53f af1f 	bmi.w	801bb88 <_vfiprintf_r+0x44>
 801bd4a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801bd4c:	e71e      	b.n	801bb8c <_vfiprintf_r+0x48>
 801bd4e:	ab03      	add	r3, sp, #12
 801bd50:	9300      	str	r3, [sp, #0]
 801bd52:	462a      	mov	r2, r5
 801bd54:	4b05      	ldr	r3, [pc, #20]	@ (801bd6c <_vfiprintf_r+0x228>)
 801bd56:	a904      	add	r1, sp, #16
 801bd58:	4630      	mov	r0, r6
 801bd5a:	f000 f879 	bl	801be50 <_printf_i>
 801bd5e:	e7e4      	b.n	801bd2a <_vfiprintf_r+0x1e6>
 801bd60:	0801e2b6 	.word	0x0801e2b6
 801bd64:	0801e2c0 	.word	0x0801e2c0
 801bd68:	00000000 	.word	0x00000000
 801bd6c:	0801bb1f 	.word	0x0801bb1f
 801bd70:	0801e2bc 	.word	0x0801e2bc

0801bd74 <_printf_common>:
 801bd74:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801bd78:	4616      	mov	r6, r2
 801bd7a:	4698      	mov	r8, r3
 801bd7c:	688a      	ldr	r2, [r1, #8]
 801bd7e:	690b      	ldr	r3, [r1, #16]
 801bd80:	f8dd 9020 	ldr.w	r9, [sp, #32]
 801bd84:	4293      	cmp	r3, r2
 801bd86:	bfb8      	it	lt
 801bd88:	4613      	movlt	r3, r2
 801bd8a:	6033      	str	r3, [r6, #0]
 801bd8c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 801bd90:	4607      	mov	r7, r0
 801bd92:	460c      	mov	r4, r1
 801bd94:	b10a      	cbz	r2, 801bd9a <_printf_common+0x26>
 801bd96:	3301      	adds	r3, #1
 801bd98:	6033      	str	r3, [r6, #0]
 801bd9a:	6823      	ldr	r3, [r4, #0]
 801bd9c:	0699      	lsls	r1, r3, #26
 801bd9e:	bf42      	ittt	mi
 801bda0:	6833      	ldrmi	r3, [r6, #0]
 801bda2:	3302      	addmi	r3, #2
 801bda4:	6033      	strmi	r3, [r6, #0]
 801bda6:	6825      	ldr	r5, [r4, #0]
 801bda8:	f015 0506 	ands.w	r5, r5, #6
 801bdac:	d106      	bne.n	801bdbc <_printf_common+0x48>
 801bdae:	f104 0a19 	add.w	sl, r4, #25
 801bdb2:	68e3      	ldr	r3, [r4, #12]
 801bdb4:	6832      	ldr	r2, [r6, #0]
 801bdb6:	1a9b      	subs	r3, r3, r2
 801bdb8:	42ab      	cmp	r3, r5
 801bdba:	dc26      	bgt.n	801be0a <_printf_common+0x96>
 801bdbc:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 801bdc0:	6822      	ldr	r2, [r4, #0]
 801bdc2:	3b00      	subs	r3, #0
 801bdc4:	bf18      	it	ne
 801bdc6:	2301      	movne	r3, #1
 801bdc8:	0692      	lsls	r2, r2, #26
 801bdca:	d42b      	bmi.n	801be24 <_printf_common+0xb0>
 801bdcc:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 801bdd0:	4641      	mov	r1, r8
 801bdd2:	4638      	mov	r0, r7
 801bdd4:	47c8      	blx	r9
 801bdd6:	3001      	adds	r0, #1
 801bdd8:	d01e      	beq.n	801be18 <_printf_common+0xa4>
 801bdda:	6823      	ldr	r3, [r4, #0]
 801bddc:	6922      	ldr	r2, [r4, #16]
 801bdde:	f003 0306 	and.w	r3, r3, #6
 801bde2:	2b04      	cmp	r3, #4
 801bde4:	bf02      	ittt	eq
 801bde6:	68e5      	ldreq	r5, [r4, #12]
 801bde8:	6833      	ldreq	r3, [r6, #0]
 801bdea:	1aed      	subeq	r5, r5, r3
 801bdec:	68a3      	ldr	r3, [r4, #8]
 801bdee:	bf0c      	ite	eq
 801bdf0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801bdf4:	2500      	movne	r5, #0
 801bdf6:	4293      	cmp	r3, r2
 801bdf8:	bfc4      	itt	gt
 801bdfa:	1a9b      	subgt	r3, r3, r2
 801bdfc:	18ed      	addgt	r5, r5, r3
 801bdfe:	2600      	movs	r6, #0
 801be00:	341a      	adds	r4, #26
 801be02:	42b5      	cmp	r5, r6
 801be04:	d11a      	bne.n	801be3c <_printf_common+0xc8>
 801be06:	2000      	movs	r0, #0
 801be08:	e008      	b.n	801be1c <_printf_common+0xa8>
 801be0a:	2301      	movs	r3, #1
 801be0c:	4652      	mov	r2, sl
 801be0e:	4641      	mov	r1, r8
 801be10:	4638      	mov	r0, r7
 801be12:	47c8      	blx	r9
 801be14:	3001      	adds	r0, #1
 801be16:	d103      	bne.n	801be20 <_printf_common+0xac>
 801be18:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801be1c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801be20:	3501      	adds	r5, #1
 801be22:	e7c6      	b.n	801bdb2 <_printf_common+0x3e>
 801be24:	18e1      	adds	r1, r4, r3
 801be26:	1c5a      	adds	r2, r3, #1
 801be28:	2030      	movs	r0, #48	@ 0x30
 801be2a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 801be2e:	4422      	add	r2, r4
 801be30:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 801be34:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 801be38:	3302      	adds	r3, #2
 801be3a:	e7c7      	b.n	801bdcc <_printf_common+0x58>
 801be3c:	2301      	movs	r3, #1
 801be3e:	4622      	mov	r2, r4
 801be40:	4641      	mov	r1, r8
 801be42:	4638      	mov	r0, r7
 801be44:	47c8      	blx	r9
 801be46:	3001      	adds	r0, #1
 801be48:	d0e6      	beq.n	801be18 <_printf_common+0xa4>
 801be4a:	3601      	adds	r6, #1
 801be4c:	e7d9      	b.n	801be02 <_printf_common+0x8e>
	...

0801be50 <_printf_i>:
 801be50:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801be54:	7e0f      	ldrb	r7, [r1, #24]
 801be56:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 801be58:	2f78      	cmp	r7, #120	@ 0x78
 801be5a:	4691      	mov	r9, r2
 801be5c:	4680      	mov	r8, r0
 801be5e:	460c      	mov	r4, r1
 801be60:	469a      	mov	sl, r3
 801be62:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 801be66:	d807      	bhi.n	801be78 <_printf_i+0x28>
 801be68:	2f62      	cmp	r7, #98	@ 0x62
 801be6a:	d80a      	bhi.n	801be82 <_printf_i+0x32>
 801be6c:	2f00      	cmp	r7, #0
 801be6e:	f000 80d2 	beq.w	801c016 <_printf_i+0x1c6>
 801be72:	2f58      	cmp	r7, #88	@ 0x58
 801be74:	f000 80b9 	beq.w	801bfea <_printf_i+0x19a>
 801be78:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 801be7c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 801be80:	e03a      	b.n	801bef8 <_printf_i+0xa8>
 801be82:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 801be86:	2b15      	cmp	r3, #21
 801be88:	d8f6      	bhi.n	801be78 <_printf_i+0x28>
 801be8a:	a101      	add	r1, pc, #4	@ (adr r1, 801be90 <_printf_i+0x40>)
 801be8c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 801be90:	0801bee9 	.word	0x0801bee9
 801be94:	0801befd 	.word	0x0801befd
 801be98:	0801be79 	.word	0x0801be79
 801be9c:	0801be79 	.word	0x0801be79
 801bea0:	0801be79 	.word	0x0801be79
 801bea4:	0801be79 	.word	0x0801be79
 801bea8:	0801befd 	.word	0x0801befd
 801beac:	0801be79 	.word	0x0801be79
 801beb0:	0801be79 	.word	0x0801be79
 801beb4:	0801be79 	.word	0x0801be79
 801beb8:	0801be79 	.word	0x0801be79
 801bebc:	0801bffd 	.word	0x0801bffd
 801bec0:	0801bf27 	.word	0x0801bf27
 801bec4:	0801bfb7 	.word	0x0801bfb7
 801bec8:	0801be79 	.word	0x0801be79
 801becc:	0801be79 	.word	0x0801be79
 801bed0:	0801c01f 	.word	0x0801c01f
 801bed4:	0801be79 	.word	0x0801be79
 801bed8:	0801bf27 	.word	0x0801bf27
 801bedc:	0801be79 	.word	0x0801be79
 801bee0:	0801be79 	.word	0x0801be79
 801bee4:	0801bfbf 	.word	0x0801bfbf
 801bee8:	6833      	ldr	r3, [r6, #0]
 801beea:	1d1a      	adds	r2, r3, #4
 801beec:	681b      	ldr	r3, [r3, #0]
 801beee:	6032      	str	r2, [r6, #0]
 801bef0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 801bef4:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 801bef8:	2301      	movs	r3, #1
 801befa:	e09d      	b.n	801c038 <_printf_i+0x1e8>
 801befc:	6833      	ldr	r3, [r6, #0]
 801befe:	6820      	ldr	r0, [r4, #0]
 801bf00:	1d19      	adds	r1, r3, #4
 801bf02:	6031      	str	r1, [r6, #0]
 801bf04:	0606      	lsls	r6, r0, #24
 801bf06:	d501      	bpl.n	801bf0c <_printf_i+0xbc>
 801bf08:	681d      	ldr	r5, [r3, #0]
 801bf0a:	e003      	b.n	801bf14 <_printf_i+0xc4>
 801bf0c:	0645      	lsls	r5, r0, #25
 801bf0e:	d5fb      	bpl.n	801bf08 <_printf_i+0xb8>
 801bf10:	f9b3 5000 	ldrsh.w	r5, [r3]
 801bf14:	2d00      	cmp	r5, #0
 801bf16:	da03      	bge.n	801bf20 <_printf_i+0xd0>
 801bf18:	232d      	movs	r3, #45	@ 0x2d
 801bf1a:	426d      	negs	r5, r5
 801bf1c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 801bf20:	4859      	ldr	r0, [pc, #356]	@ (801c088 <_printf_i+0x238>)
 801bf22:	230a      	movs	r3, #10
 801bf24:	e011      	b.n	801bf4a <_printf_i+0xfa>
 801bf26:	6821      	ldr	r1, [r4, #0]
 801bf28:	6833      	ldr	r3, [r6, #0]
 801bf2a:	0608      	lsls	r0, r1, #24
 801bf2c:	f853 5b04 	ldr.w	r5, [r3], #4
 801bf30:	d402      	bmi.n	801bf38 <_printf_i+0xe8>
 801bf32:	0649      	lsls	r1, r1, #25
 801bf34:	bf48      	it	mi
 801bf36:	b2ad      	uxthmi	r5, r5
 801bf38:	2f6f      	cmp	r7, #111	@ 0x6f
 801bf3a:	4853      	ldr	r0, [pc, #332]	@ (801c088 <_printf_i+0x238>)
 801bf3c:	6033      	str	r3, [r6, #0]
 801bf3e:	bf14      	ite	ne
 801bf40:	230a      	movne	r3, #10
 801bf42:	2308      	moveq	r3, #8
 801bf44:	2100      	movs	r1, #0
 801bf46:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 801bf4a:	6866      	ldr	r6, [r4, #4]
 801bf4c:	60a6      	str	r6, [r4, #8]
 801bf4e:	2e00      	cmp	r6, #0
 801bf50:	bfa2      	ittt	ge
 801bf52:	6821      	ldrge	r1, [r4, #0]
 801bf54:	f021 0104 	bicge.w	r1, r1, #4
 801bf58:	6021      	strge	r1, [r4, #0]
 801bf5a:	b90d      	cbnz	r5, 801bf60 <_printf_i+0x110>
 801bf5c:	2e00      	cmp	r6, #0
 801bf5e:	d04b      	beq.n	801bff8 <_printf_i+0x1a8>
 801bf60:	4616      	mov	r6, r2
 801bf62:	fbb5 f1f3 	udiv	r1, r5, r3
 801bf66:	fb03 5711 	mls	r7, r3, r1, r5
 801bf6a:	5dc7      	ldrb	r7, [r0, r7]
 801bf6c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 801bf70:	462f      	mov	r7, r5
 801bf72:	42bb      	cmp	r3, r7
 801bf74:	460d      	mov	r5, r1
 801bf76:	d9f4      	bls.n	801bf62 <_printf_i+0x112>
 801bf78:	2b08      	cmp	r3, #8
 801bf7a:	d10b      	bne.n	801bf94 <_printf_i+0x144>
 801bf7c:	6823      	ldr	r3, [r4, #0]
 801bf7e:	07df      	lsls	r7, r3, #31
 801bf80:	d508      	bpl.n	801bf94 <_printf_i+0x144>
 801bf82:	6923      	ldr	r3, [r4, #16]
 801bf84:	6861      	ldr	r1, [r4, #4]
 801bf86:	4299      	cmp	r1, r3
 801bf88:	bfde      	ittt	le
 801bf8a:	2330      	movle	r3, #48	@ 0x30
 801bf8c:	f806 3c01 	strble.w	r3, [r6, #-1]
 801bf90:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 801bf94:	1b92      	subs	r2, r2, r6
 801bf96:	6122      	str	r2, [r4, #16]
 801bf98:	f8cd a000 	str.w	sl, [sp]
 801bf9c:	464b      	mov	r3, r9
 801bf9e:	aa03      	add	r2, sp, #12
 801bfa0:	4621      	mov	r1, r4
 801bfa2:	4640      	mov	r0, r8
 801bfa4:	f7ff fee6 	bl	801bd74 <_printf_common>
 801bfa8:	3001      	adds	r0, #1
 801bfaa:	d14a      	bne.n	801c042 <_printf_i+0x1f2>
 801bfac:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801bfb0:	b004      	add	sp, #16
 801bfb2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801bfb6:	6823      	ldr	r3, [r4, #0]
 801bfb8:	f043 0320 	orr.w	r3, r3, #32
 801bfbc:	6023      	str	r3, [r4, #0]
 801bfbe:	4833      	ldr	r0, [pc, #204]	@ (801c08c <_printf_i+0x23c>)
 801bfc0:	2778      	movs	r7, #120	@ 0x78
 801bfc2:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 801bfc6:	6823      	ldr	r3, [r4, #0]
 801bfc8:	6831      	ldr	r1, [r6, #0]
 801bfca:	061f      	lsls	r7, r3, #24
 801bfcc:	f851 5b04 	ldr.w	r5, [r1], #4
 801bfd0:	d402      	bmi.n	801bfd8 <_printf_i+0x188>
 801bfd2:	065f      	lsls	r7, r3, #25
 801bfd4:	bf48      	it	mi
 801bfd6:	b2ad      	uxthmi	r5, r5
 801bfd8:	6031      	str	r1, [r6, #0]
 801bfda:	07d9      	lsls	r1, r3, #31
 801bfdc:	bf44      	itt	mi
 801bfde:	f043 0320 	orrmi.w	r3, r3, #32
 801bfe2:	6023      	strmi	r3, [r4, #0]
 801bfe4:	b11d      	cbz	r5, 801bfee <_printf_i+0x19e>
 801bfe6:	2310      	movs	r3, #16
 801bfe8:	e7ac      	b.n	801bf44 <_printf_i+0xf4>
 801bfea:	4827      	ldr	r0, [pc, #156]	@ (801c088 <_printf_i+0x238>)
 801bfec:	e7e9      	b.n	801bfc2 <_printf_i+0x172>
 801bfee:	6823      	ldr	r3, [r4, #0]
 801bff0:	f023 0320 	bic.w	r3, r3, #32
 801bff4:	6023      	str	r3, [r4, #0]
 801bff6:	e7f6      	b.n	801bfe6 <_printf_i+0x196>
 801bff8:	4616      	mov	r6, r2
 801bffa:	e7bd      	b.n	801bf78 <_printf_i+0x128>
 801bffc:	6833      	ldr	r3, [r6, #0]
 801bffe:	6825      	ldr	r5, [r4, #0]
 801c000:	6961      	ldr	r1, [r4, #20]
 801c002:	1d18      	adds	r0, r3, #4
 801c004:	6030      	str	r0, [r6, #0]
 801c006:	062e      	lsls	r6, r5, #24
 801c008:	681b      	ldr	r3, [r3, #0]
 801c00a:	d501      	bpl.n	801c010 <_printf_i+0x1c0>
 801c00c:	6019      	str	r1, [r3, #0]
 801c00e:	e002      	b.n	801c016 <_printf_i+0x1c6>
 801c010:	0668      	lsls	r0, r5, #25
 801c012:	d5fb      	bpl.n	801c00c <_printf_i+0x1bc>
 801c014:	8019      	strh	r1, [r3, #0]
 801c016:	2300      	movs	r3, #0
 801c018:	6123      	str	r3, [r4, #16]
 801c01a:	4616      	mov	r6, r2
 801c01c:	e7bc      	b.n	801bf98 <_printf_i+0x148>
 801c01e:	6833      	ldr	r3, [r6, #0]
 801c020:	1d1a      	adds	r2, r3, #4
 801c022:	6032      	str	r2, [r6, #0]
 801c024:	681e      	ldr	r6, [r3, #0]
 801c026:	6862      	ldr	r2, [r4, #4]
 801c028:	2100      	movs	r1, #0
 801c02a:	4630      	mov	r0, r6
 801c02c:	f7e4 f8e8 	bl	8000200 <memchr>
 801c030:	b108      	cbz	r0, 801c036 <_printf_i+0x1e6>
 801c032:	1b80      	subs	r0, r0, r6
 801c034:	6060      	str	r0, [r4, #4]
 801c036:	6863      	ldr	r3, [r4, #4]
 801c038:	6123      	str	r3, [r4, #16]
 801c03a:	2300      	movs	r3, #0
 801c03c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 801c040:	e7aa      	b.n	801bf98 <_printf_i+0x148>
 801c042:	6923      	ldr	r3, [r4, #16]
 801c044:	4632      	mov	r2, r6
 801c046:	4649      	mov	r1, r9
 801c048:	4640      	mov	r0, r8
 801c04a:	47d0      	blx	sl
 801c04c:	3001      	adds	r0, #1
 801c04e:	d0ad      	beq.n	801bfac <_printf_i+0x15c>
 801c050:	6823      	ldr	r3, [r4, #0]
 801c052:	079b      	lsls	r3, r3, #30
 801c054:	d413      	bmi.n	801c07e <_printf_i+0x22e>
 801c056:	68e0      	ldr	r0, [r4, #12]
 801c058:	9b03      	ldr	r3, [sp, #12]
 801c05a:	4298      	cmp	r0, r3
 801c05c:	bfb8      	it	lt
 801c05e:	4618      	movlt	r0, r3
 801c060:	e7a6      	b.n	801bfb0 <_printf_i+0x160>
 801c062:	2301      	movs	r3, #1
 801c064:	4632      	mov	r2, r6
 801c066:	4649      	mov	r1, r9
 801c068:	4640      	mov	r0, r8
 801c06a:	47d0      	blx	sl
 801c06c:	3001      	adds	r0, #1
 801c06e:	d09d      	beq.n	801bfac <_printf_i+0x15c>
 801c070:	3501      	adds	r5, #1
 801c072:	68e3      	ldr	r3, [r4, #12]
 801c074:	9903      	ldr	r1, [sp, #12]
 801c076:	1a5b      	subs	r3, r3, r1
 801c078:	42ab      	cmp	r3, r5
 801c07a:	dcf2      	bgt.n	801c062 <_printf_i+0x212>
 801c07c:	e7eb      	b.n	801c056 <_printf_i+0x206>
 801c07e:	2500      	movs	r5, #0
 801c080:	f104 0619 	add.w	r6, r4, #25
 801c084:	e7f5      	b.n	801c072 <_printf_i+0x222>
 801c086:	bf00      	nop
 801c088:	0801e2c7 	.word	0x0801e2c7
 801c08c:	0801e2d8 	.word	0x0801e2d8

0801c090 <__sflush_r>:
 801c090:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 801c094:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801c098:	0716      	lsls	r6, r2, #28
 801c09a:	4605      	mov	r5, r0
 801c09c:	460c      	mov	r4, r1
 801c09e:	d454      	bmi.n	801c14a <__sflush_r+0xba>
 801c0a0:	684b      	ldr	r3, [r1, #4]
 801c0a2:	2b00      	cmp	r3, #0
 801c0a4:	dc02      	bgt.n	801c0ac <__sflush_r+0x1c>
 801c0a6:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 801c0a8:	2b00      	cmp	r3, #0
 801c0aa:	dd48      	ble.n	801c13e <__sflush_r+0xae>
 801c0ac:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 801c0ae:	2e00      	cmp	r6, #0
 801c0b0:	d045      	beq.n	801c13e <__sflush_r+0xae>
 801c0b2:	2300      	movs	r3, #0
 801c0b4:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 801c0b8:	682f      	ldr	r7, [r5, #0]
 801c0ba:	6a21      	ldr	r1, [r4, #32]
 801c0bc:	602b      	str	r3, [r5, #0]
 801c0be:	d030      	beq.n	801c122 <__sflush_r+0x92>
 801c0c0:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 801c0c2:	89a3      	ldrh	r3, [r4, #12]
 801c0c4:	0759      	lsls	r1, r3, #29
 801c0c6:	d505      	bpl.n	801c0d4 <__sflush_r+0x44>
 801c0c8:	6863      	ldr	r3, [r4, #4]
 801c0ca:	1ad2      	subs	r2, r2, r3
 801c0cc:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 801c0ce:	b10b      	cbz	r3, 801c0d4 <__sflush_r+0x44>
 801c0d0:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 801c0d2:	1ad2      	subs	r2, r2, r3
 801c0d4:	2300      	movs	r3, #0
 801c0d6:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 801c0d8:	6a21      	ldr	r1, [r4, #32]
 801c0da:	4628      	mov	r0, r5
 801c0dc:	47b0      	blx	r6
 801c0de:	1c43      	adds	r3, r0, #1
 801c0e0:	89a3      	ldrh	r3, [r4, #12]
 801c0e2:	d106      	bne.n	801c0f2 <__sflush_r+0x62>
 801c0e4:	6829      	ldr	r1, [r5, #0]
 801c0e6:	291d      	cmp	r1, #29
 801c0e8:	d82b      	bhi.n	801c142 <__sflush_r+0xb2>
 801c0ea:	4a2a      	ldr	r2, [pc, #168]	@ (801c194 <__sflush_r+0x104>)
 801c0ec:	410a      	asrs	r2, r1
 801c0ee:	07d6      	lsls	r6, r2, #31
 801c0f0:	d427      	bmi.n	801c142 <__sflush_r+0xb2>
 801c0f2:	2200      	movs	r2, #0
 801c0f4:	6062      	str	r2, [r4, #4]
 801c0f6:	04d9      	lsls	r1, r3, #19
 801c0f8:	6922      	ldr	r2, [r4, #16]
 801c0fa:	6022      	str	r2, [r4, #0]
 801c0fc:	d504      	bpl.n	801c108 <__sflush_r+0x78>
 801c0fe:	1c42      	adds	r2, r0, #1
 801c100:	d101      	bne.n	801c106 <__sflush_r+0x76>
 801c102:	682b      	ldr	r3, [r5, #0]
 801c104:	b903      	cbnz	r3, 801c108 <__sflush_r+0x78>
 801c106:	6560      	str	r0, [r4, #84]	@ 0x54
 801c108:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801c10a:	602f      	str	r7, [r5, #0]
 801c10c:	b1b9      	cbz	r1, 801c13e <__sflush_r+0xae>
 801c10e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 801c112:	4299      	cmp	r1, r3
 801c114:	d002      	beq.n	801c11c <__sflush_r+0x8c>
 801c116:	4628      	mov	r0, r5
 801c118:	f7ff fb40 	bl	801b79c <_free_r>
 801c11c:	2300      	movs	r3, #0
 801c11e:	6363      	str	r3, [r4, #52]	@ 0x34
 801c120:	e00d      	b.n	801c13e <__sflush_r+0xae>
 801c122:	2301      	movs	r3, #1
 801c124:	4628      	mov	r0, r5
 801c126:	47b0      	blx	r6
 801c128:	4602      	mov	r2, r0
 801c12a:	1c50      	adds	r0, r2, #1
 801c12c:	d1c9      	bne.n	801c0c2 <__sflush_r+0x32>
 801c12e:	682b      	ldr	r3, [r5, #0]
 801c130:	2b00      	cmp	r3, #0
 801c132:	d0c6      	beq.n	801c0c2 <__sflush_r+0x32>
 801c134:	2b1d      	cmp	r3, #29
 801c136:	d001      	beq.n	801c13c <__sflush_r+0xac>
 801c138:	2b16      	cmp	r3, #22
 801c13a:	d11e      	bne.n	801c17a <__sflush_r+0xea>
 801c13c:	602f      	str	r7, [r5, #0]
 801c13e:	2000      	movs	r0, #0
 801c140:	e022      	b.n	801c188 <__sflush_r+0xf8>
 801c142:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801c146:	b21b      	sxth	r3, r3
 801c148:	e01b      	b.n	801c182 <__sflush_r+0xf2>
 801c14a:	690f      	ldr	r7, [r1, #16]
 801c14c:	2f00      	cmp	r7, #0
 801c14e:	d0f6      	beq.n	801c13e <__sflush_r+0xae>
 801c150:	0793      	lsls	r3, r2, #30
 801c152:	680e      	ldr	r6, [r1, #0]
 801c154:	bf08      	it	eq
 801c156:	694b      	ldreq	r3, [r1, #20]
 801c158:	600f      	str	r7, [r1, #0]
 801c15a:	bf18      	it	ne
 801c15c:	2300      	movne	r3, #0
 801c15e:	eba6 0807 	sub.w	r8, r6, r7
 801c162:	608b      	str	r3, [r1, #8]
 801c164:	f1b8 0f00 	cmp.w	r8, #0
 801c168:	dde9      	ble.n	801c13e <__sflush_r+0xae>
 801c16a:	6a21      	ldr	r1, [r4, #32]
 801c16c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 801c16e:	4643      	mov	r3, r8
 801c170:	463a      	mov	r2, r7
 801c172:	4628      	mov	r0, r5
 801c174:	47b0      	blx	r6
 801c176:	2800      	cmp	r0, #0
 801c178:	dc08      	bgt.n	801c18c <__sflush_r+0xfc>
 801c17a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801c17e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801c182:	81a3      	strh	r3, [r4, #12]
 801c184:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801c188:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801c18c:	4407      	add	r7, r0
 801c18e:	eba8 0800 	sub.w	r8, r8, r0
 801c192:	e7e7      	b.n	801c164 <__sflush_r+0xd4>
 801c194:	dfbffffe 	.word	0xdfbffffe

0801c198 <_fflush_r>:
 801c198:	b538      	push	{r3, r4, r5, lr}
 801c19a:	690b      	ldr	r3, [r1, #16]
 801c19c:	4605      	mov	r5, r0
 801c19e:	460c      	mov	r4, r1
 801c1a0:	b913      	cbnz	r3, 801c1a8 <_fflush_r+0x10>
 801c1a2:	2500      	movs	r5, #0
 801c1a4:	4628      	mov	r0, r5
 801c1a6:	bd38      	pop	{r3, r4, r5, pc}
 801c1a8:	b118      	cbz	r0, 801c1b2 <_fflush_r+0x1a>
 801c1aa:	6a03      	ldr	r3, [r0, #32]
 801c1ac:	b90b      	cbnz	r3, 801c1b2 <_fflush_r+0x1a>
 801c1ae:	f7fe ff8d 	bl	801b0cc <__sinit>
 801c1b2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801c1b6:	2b00      	cmp	r3, #0
 801c1b8:	d0f3      	beq.n	801c1a2 <_fflush_r+0xa>
 801c1ba:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 801c1bc:	07d0      	lsls	r0, r2, #31
 801c1be:	d404      	bmi.n	801c1ca <_fflush_r+0x32>
 801c1c0:	0599      	lsls	r1, r3, #22
 801c1c2:	d402      	bmi.n	801c1ca <_fflush_r+0x32>
 801c1c4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801c1c6:	f7ff faa6 	bl	801b716 <__retarget_lock_acquire_recursive>
 801c1ca:	4628      	mov	r0, r5
 801c1cc:	4621      	mov	r1, r4
 801c1ce:	f7ff ff5f 	bl	801c090 <__sflush_r>
 801c1d2:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801c1d4:	07da      	lsls	r2, r3, #31
 801c1d6:	4605      	mov	r5, r0
 801c1d8:	d4e4      	bmi.n	801c1a4 <_fflush_r+0xc>
 801c1da:	89a3      	ldrh	r3, [r4, #12]
 801c1dc:	059b      	lsls	r3, r3, #22
 801c1de:	d4e1      	bmi.n	801c1a4 <_fflush_r+0xc>
 801c1e0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801c1e2:	f7ff fa99 	bl	801b718 <__retarget_lock_release_recursive>
 801c1e6:	e7dd      	b.n	801c1a4 <_fflush_r+0xc>

0801c1e8 <fiprintf>:
 801c1e8:	b40e      	push	{r1, r2, r3}
 801c1ea:	b503      	push	{r0, r1, lr}
 801c1ec:	4601      	mov	r1, r0
 801c1ee:	ab03      	add	r3, sp, #12
 801c1f0:	4805      	ldr	r0, [pc, #20]	@ (801c208 <fiprintf+0x20>)
 801c1f2:	f853 2b04 	ldr.w	r2, [r3], #4
 801c1f6:	6800      	ldr	r0, [r0, #0]
 801c1f8:	9301      	str	r3, [sp, #4]
 801c1fa:	f7ff fca3 	bl	801bb44 <_vfiprintf_r>
 801c1fe:	b002      	add	sp, #8
 801c200:	f85d eb04 	ldr.w	lr, [sp], #4
 801c204:	b003      	add	sp, #12
 801c206:	4770      	bx	lr
 801c208:	200002ac 	.word	0x200002ac

0801c20c <__swhatbuf_r>:
 801c20c:	b570      	push	{r4, r5, r6, lr}
 801c20e:	460c      	mov	r4, r1
 801c210:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801c214:	2900      	cmp	r1, #0
 801c216:	b096      	sub	sp, #88	@ 0x58
 801c218:	4615      	mov	r5, r2
 801c21a:	461e      	mov	r6, r3
 801c21c:	da0d      	bge.n	801c23a <__swhatbuf_r+0x2e>
 801c21e:	89a3      	ldrh	r3, [r4, #12]
 801c220:	f013 0f80 	tst.w	r3, #128	@ 0x80
 801c224:	f04f 0100 	mov.w	r1, #0
 801c228:	bf14      	ite	ne
 801c22a:	2340      	movne	r3, #64	@ 0x40
 801c22c:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 801c230:	2000      	movs	r0, #0
 801c232:	6031      	str	r1, [r6, #0]
 801c234:	602b      	str	r3, [r5, #0]
 801c236:	b016      	add	sp, #88	@ 0x58
 801c238:	bd70      	pop	{r4, r5, r6, pc}
 801c23a:	466a      	mov	r2, sp
 801c23c:	f000 f848 	bl	801c2d0 <_fstat_r>
 801c240:	2800      	cmp	r0, #0
 801c242:	dbec      	blt.n	801c21e <__swhatbuf_r+0x12>
 801c244:	9901      	ldr	r1, [sp, #4]
 801c246:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 801c24a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 801c24e:	4259      	negs	r1, r3
 801c250:	4159      	adcs	r1, r3
 801c252:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 801c256:	e7eb      	b.n	801c230 <__swhatbuf_r+0x24>

0801c258 <__smakebuf_r>:
 801c258:	898b      	ldrh	r3, [r1, #12]
 801c25a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801c25c:	079d      	lsls	r5, r3, #30
 801c25e:	4606      	mov	r6, r0
 801c260:	460c      	mov	r4, r1
 801c262:	d507      	bpl.n	801c274 <__smakebuf_r+0x1c>
 801c264:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 801c268:	6023      	str	r3, [r4, #0]
 801c26a:	6123      	str	r3, [r4, #16]
 801c26c:	2301      	movs	r3, #1
 801c26e:	6163      	str	r3, [r4, #20]
 801c270:	b003      	add	sp, #12
 801c272:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801c274:	ab01      	add	r3, sp, #4
 801c276:	466a      	mov	r2, sp
 801c278:	f7ff ffc8 	bl	801c20c <__swhatbuf_r>
 801c27c:	9f00      	ldr	r7, [sp, #0]
 801c27e:	4605      	mov	r5, r0
 801c280:	4639      	mov	r1, r7
 801c282:	4630      	mov	r0, r6
 801c284:	f7fe fcf0 	bl	801ac68 <_malloc_r>
 801c288:	b948      	cbnz	r0, 801c29e <__smakebuf_r+0x46>
 801c28a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801c28e:	059a      	lsls	r2, r3, #22
 801c290:	d4ee      	bmi.n	801c270 <__smakebuf_r+0x18>
 801c292:	f023 0303 	bic.w	r3, r3, #3
 801c296:	f043 0302 	orr.w	r3, r3, #2
 801c29a:	81a3      	strh	r3, [r4, #12]
 801c29c:	e7e2      	b.n	801c264 <__smakebuf_r+0xc>
 801c29e:	89a3      	ldrh	r3, [r4, #12]
 801c2a0:	6020      	str	r0, [r4, #0]
 801c2a2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801c2a6:	81a3      	strh	r3, [r4, #12]
 801c2a8:	9b01      	ldr	r3, [sp, #4]
 801c2aa:	e9c4 0704 	strd	r0, r7, [r4, #16]
 801c2ae:	b15b      	cbz	r3, 801c2c8 <__smakebuf_r+0x70>
 801c2b0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801c2b4:	4630      	mov	r0, r6
 801c2b6:	f000 f81d 	bl	801c2f4 <_isatty_r>
 801c2ba:	b128      	cbz	r0, 801c2c8 <__smakebuf_r+0x70>
 801c2bc:	89a3      	ldrh	r3, [r4, #12]
 801c2be:	f023 0303 	bic.w	r3, r3, #3
 801c2c2:	f043 0301 	orr.w	r3, r3, #1
 801c2c6:	81a3      	strh	r3, [r4, #12]
 801c2c8:	89a3      	ldrh	r3, [r4, #12]
 801c2ca:	431d      	orrs	r5, r3
 801c2cc:	81a5      	strh	r5, [r4, #12]
 801c2ce:	e7cf      	b.n	801c270 <__smakebuf_r+0x18>

0801c2d0 <_fstat_r>:
 801c2d0:	b538      	push	{r3, r4, r5, lr}
 801c2d2:	4d07      	ldr	r5, [pc, #28]	@ (801c2f0 <_fstat_r+0x20>)
 801c2d4:	2300      	movs	r3, #0
 801c2d6:	4604      	mov	r4, r0
 801c2d8:	4608      	mov	r0, r1
 801c2da:	4611      	mov	r1, r2
 801c2dc:	602b      	str	r3, [r5, #0]
 801c2de:	f7e6 fab7 	bl	8002850 <_fstat>
 801c2e2:	1c43      	adds	r3, r0, #1
 801c2e4:	d102      	bne.n	801c2ec <_fstat_r+0x1c>
 801c2e6:	682b      	ldr	r3, [r5, #0]
 801c2e8:	b103      	cbz	r3, 801c2ec <_fstat_r+0x1c>
 801c2ea:	6023      	str	r3, [r4, #0]
 801c2ec:	bd38      	pop	{r3, r4, r5, pc}
 801c2ee:	bf00      	nop
 801c2f0:	2000c3a4 	.word	0x2000c3a4

0801c2f4 <_isatty_r>:
 801c2f4:	b538      	push	{r3, r4, r5, lr}
 801c2f6:	4d06      	ldr	r5, [pc, #24]	@ (801c310 <_isatty_r+0x1c>)
 801c2f8:	2300      	movs	r3, #0
 801c2fa:	4604      	mov	r4, r0
 801c2fc:	4608      	mov	r0, r1
 801c2fe:	602b      	str	r3, [r5, #0]
 801c300:	f7e6 fab6 	bl	8002870 <_isatty>
 801c304:	1c43      	adds	r3, r0, #1
 801c306:	d102      	bne.n	801c30e <_isatty_r+0x1a>
 801c308:	682b      	ldr	r3, [r5, #0]
 801c30a:	b103      	cbz	r3, 801c30e <_isatty_r+0x1a>
 801c30c:	6023      	str	r3, [r4, #0]
 801c30e:	bd38      	pop	{r3, r4, r5, pc}
 801c310:	2000c3a4 	.word	0x2000c3a4

0801c314 <abort>:
 801c314:	b508      	push	{r3, lr}
 801c316:	2006      	movs	r0, #6
 801c318:	f000 f82c 	bl	801c374 <raise>
 801c31c:	2001      	movs	r0, #1
 801c31e:	f7e6 fa47 	bl	80027b0 <_exit>

0801c322 <_raise_r>:
 801c322:	291f      	cmp	r1, #31
 801c324:	b538      	push	{r3, r4, r5, lr}
 801c326:	4605      	mov	r5, r0
 801c328:	460c      	mov	r4, r1
 801c32a:	d904      	bls.n	801c336 <_raise_r+0x14>
 801c32c:	2316      	movs	r3, #22
 801c32e:	6003      	str	r3, [r0, #0]
 801c330:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801c334:	bd38      	pop	{r3, r4, r5, pc}
 801c336:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 801c338:	b112      	cbz	r2, 801c340 <_raise_r+0x1e>
 801c33a:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801c33e:	b94b      	cbnz	r3, 801c354 <_raise_r+0x32>
 801c340:	4628      	mov	r0, r5
 801c342:	f000 f831 	bl	801c3a8 <_getpid_r>
 801c346:	4622      	mov	r2, r4
 801c348:	4601      	mov	r1, r0
 801c34a:	4628      	mov	r0, r5
 801c34c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801c350:	f000 b818 	b.w	801c384 <_kill_r>
 801c354:	2b01      	cmp	r3, #1
 801c356:	d00a      	beq.n	801c36e <_raise_r+0x4c>
 801c358:	1c59      	adds	r1, r3, #1
 801c35a:	d103      	bne.n	801c364 <_raise_r+0x42>
 801c35c:	2316      	movs	r3, #22
 801c35e:	6003      	str	r3, [r0, #0]
 801c360:	2001      	movs	r0, #1
 801c362:	e7e7      	b.n	801c334 <_raise_r+0x12>
 801c364:	2100      	movs	r1, #0
 801c366:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 801c36a:	4620      	mov	r0, r4
 801c36c:	4798      	blx	r3
 801c36e:	2000      	movs	r0, #0
 801c370:	e7e0      	b.n	801c334 <_raise_r+0x12>
	...

0801c374 <raise>:
 801c374:	4b02      	ldr	r3, [pc, #8]	@ (801c380 <raise+0xc>)
 801c376:	4601      	mov	r1, r0
 801c378:	6818      	ldr	r0, [r3, #0]
 801c37a:	f7ff bfd2 	b.w	801c322 <_raise_r>
 801c37e:	bf00      	nop
 801c380:	200002ac 	.word	0x200002ac

0801c384 <_kill_r>:
 801c384:	b538      	push	{r3, r4, r5, lr}
 801c386:	4d07      	ldr	r5, [pc, #28]	@ (801c3a4 <_kill_r+0x20>)
 801c388:	2300      	movs	r3, #0
 801c38a:	4604      	mov	r4, r0
 801c38c:	4608      	mov	r0, r1
 801c38e:	4611      	mov	r1, r2
 801c390:	602b      	str	r3, [r5, #0]
 801c392:	f7e6 f9fd 	bl	8002790 <_kill>
 801c396:	1c43      	adds	r3, r0, #1
 801c398:	d102      	bne.n	801c3a0 <_kill_r+0x1c>
 801c39a:	682b      	ldr	r3, [r5, #0]
 801c39c:	b103      	cbz	r3, 801c3a0 <_kill_r+0x1c>
 801c39e:	6023      	str	r3, [r4, #0]
 801c3a0:	bd38      	pop	{r3, r4, r5, pc}
 801c3a2:	bf00      	nop
 801c3a4:	2000c3a4 	.word	0x2000c3a4

0801c3a8 <_getpid_r>:
 801c3a8:	f7e6 b9ea 	b.w	8002780 <_getpid>

0801c3ac <pow>:
 801c3ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801c3ae:	ed2d 8b02 	vpush	{d8}
 801c3b2:	eeb0 8a40 	vmov.f32	s16, s0
 801c3b6:	eef0 8a60 	vmov.f32	s17, s1
 801c3ba:	ec55 4b11 	vmov	r4, r5, d1
 801c3be:	f000 f8c7 	bl	801c550 <__ieee754_pow>
 801c3c2:	4622      	mov	r2, r4
 801c3c4:	462b      	mov	r3, r5
 801c3c6:	4620      	mov	r0, r4
 801c3c8:	4629      	mov	r1, r5
 801c3ca:	ec57 6b10 	vmov	r6, r7, d0
 801c3ce:	f7e4 fbbd 	bl	8000b4c <__aeabi_dcmpun>
 801c3d2:	2800      	cmp	r0, #0
 801c3d4:	d13b      	bne.n	801c44e <pow+0xa2>
 801c3d6:	ec51 0b18 	vmov	r0, r1, d8
 801c3da:	2200      	movs	r2, #0
 801c3dc:	2300      	movs	r3, #0
 801c3de:	f7e4 fb83 	bl	8000ae8 <__aeabi_dcmpeq>
 801c3e2:	b1b8      	cbz	r0, 801c414 <pow+0x68>
 801c3e4:	2200      	movs	r2, #0
 801c3e6:	2300      	movs	r3, #0
 801c3e8:	4620      	mov	r0, r4
 801c3ea:	4629      	mov	r1, r5
 801c3ec:	f7e4 fb7c 	bl	8000ae8 <__aeabi_dcmpeq>
 801c3f0:	2800      	cmp	r0, #0
 801c3f2:	d146      	bne.n	801c482 <pow+0xd6>
 801c3f4:	ec45 4b10 	vmov	d0, r4, r5
 801c3f8:	f000 f848 	bl	801c48c <finite>
 801c3fc:	b338      	cbz	r0, 801c44e <pow+0xa2>
 801c3fe:	2200      	movs	r2, #0
 801c400:	2300      	movs	r3, #0
 801c402:	4620      	mov	r0, r4
 801c404:	4629      	mov	r1, r5
 801c406:	f7e4 fb79 	bl	8000afc <__aeabi_dcmplt>
 801c40a:	b300      	cbz	r0, 801c44e <pow+0xa2>
 801c40c:	f7ff f958 	bl	801b6c0 <__errno>
 801c410:	2322      	movs	r3, #34	@ 0x22
 801c412:	e01b      	b.n	801c44c <pow+0xa0>
 801c414:	ec47 6b10 	vmov	d0, r6, r7
 801c418:	f000 f838 	bl	801c48c <finite>
 801c41c:	b9e0      	cbnz	r0, 801c458 <pow+0xac>
 801c41e:	eeb0 0a48 	vmov.f32	s0, s16
 801c422:	eef0 0a68 	vmov.f32	s1, s17
 801c426:	f000 f831 	bl	801c48c <finite>
 801c42a:	b1a8      	cbz	r0, 801c458 <pow+0xac>
 801c42c:	ec45 4b10 	vmov	d0, r4, r5
 801c430:	f000 f82c 	bl	801c48c <finite>
 801c434:	b180      	cbz	r0, 801c458 <pow+0xac>
 801c436:	4632      	mov	r2, r6
 801c438:	463b      	mov	r3, r7
 801c43a:	4630      	mov	r0, r6
 801c43c:	4639      	mov	r1, r7
 801c43e:	f7e4 fb85 	bl	8000b4c <__aeabi_dcmpun>
 801c442:	2800      	cmp	r0, #0
 801c444:	d0e2      	beq.n	801c40c <pow+0x60>
 801c446:	f7ff f93b 	bl	801b6c0 <__errno>
 801c44a:	2321      	movs	r3, #33	@ 0x21
 801c44c:	6003      	str	r3, [r0, #0]
 801c44e:	ecbd 8b02 	vpop	{d8}
 801c452:	ec47 6b10 	vmov	d0, r6, r7
 801c456:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801c458:	2200      	movs	r2, #0
 801c45a:	2300      	movs	r3, #0
 801c45c:	4630      	mov	r0, r6
 801c45e:	4639      	mov	r1, r7
 801c460:	f7e4 fb42 	bl	8000ae8 <__aeabi_dcmpeq>
 801c464:	2800      	cmp	r0, #0
 801c466:	d0f2      	beq.n	801c44e <pow+0xa2>
 801c468:	eeb0 0a48 	vmov.f32	s0, s16
 801c46c:	eef0 0a68 	vmov.f32	s1, s17
 801c470:	f000 f80c 	bl	801c48c <finite>
 801c474:	2800      	cmp	r0, #0
 801c476:	d0ea      	beq.n	801c44e <pow+0xa2>
 801c478:	ec45 4b10 	vmov	d0, r4, r5
 801c47c:	f000 f806 	bl	801c48c <finite>
 801c480:	e7c3      	b.n	801c40a <pow+0x5e>
 801c482:	4f01      	ldr	r7, [pc, #4]	@ (801c488 <pow+0xdc>)
 801c484:	2600      	movs	r6, #0
 801c486:	e7e2      	b.n	801c44e <pow+0xa2>
 801c488:	3ff00000 	.word	0x3ff00000

0801c48c <finite>:
 801c48c:	b082      	sub	sp, #8
 801c48e:	ed8d 0b00 	vstr	d0, [sp]
 801c492:	9801      	ldr	r0, [sp, #4]
 801c494:	f040 4000 	orr.w	r0, r0, #2147483648	@ 0x80000000
 801c498:	f500 1080 	add.w	r0, r0, #1048576	@ 0x100000
 801c49c:	0fc0      	lsrs	r0, r0, #31
 801c49e:	b002      	add	sp, #8
 801c4a0:	4770      	bx	lr

0801c4a2 <fmaxf>:
 801c4a2:	b508      	push	{r3, lr}
 801c4a4:	ed2d 8b02 	vpush	{d8}
 801c4a8:	eeb0 8a40 	vmov.f32	s16, s0
 801c4ac:	eef0 8a60 	vmov.f32	s17, s1
 801c4b0:	f000 f832 	bl	801c518 <__fpclassifyf>
 801c4b4:	b930      	cbnz	r0, 801c4c4 <fmaxf+0x22>
 801c4b6:	eeb0 8a68 	vmov.f32	s16, s17
 801c4ba:	eeb0 0a48 	vmov.f32	s0, s16
 801c4be:	ecbd 8b02 	vpop	{d8}
 801c4c2:	bd08      	pop	{r3, pc}
 801c4c4:	eeb0 0a68 	vmov.f32	s0, s17
 801c4c8:	f000 f826 	bl	801c518 <__fpclassifyf>
 801c4cc:	2800      	cmp	r0, #0
 801c4ce:	d0f4      	beq.n	801c4ba <fmaxf+0x18>
 801c4d0:	eeb4 8ae8 	vcmpe.f32	s16, s17
 801c4d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801c4d8:	dded      	ble.n	801c4b6 <fmaxf+0x14>
 801c4da:	e7ee      	b.n	801c4ba <fmaxf+0x18>

0801c4dc <fminf>:
 801c4dc:	b508      	push	{r3, lr}
 801c4de:	ed2d 8b02 	vpush	{d8}
 801c4e2:	eeb0 8a40 	vmov.f32	s16, s0
 801c4e6:	eef0 8a60 	vmov.f32	s17, s1
 801c4ea:	f000 f815 	bl	801c518 <__fpclassifyf>
 801c4ee:	b930      	cbnz	r0, 801c4fe <fminf+0x22>
 801c4f0:	eeb0 8a68 	vmov.f32	s16, s17
 801c4f4:	eeb0 0a48 	vmov.f32	s0, s16
 801c4f8:	ecbd 8b02 	vpop	{d8}
 801c4fc:	bd08      	pop	{r3, pc}
 801c4fe:	eeb0 0a68 	vmov.f32	s0, s17
 801c502:	f000 f809 	bl	801c518 <__fpclassifyf>
 801c506:	2800      	cmp	r0, #0
 801c508:	d0f4      	beq.n	801c4f4 <fminf+0x18>
 801c50a:	eeb4 8ae8 	vcmpe.f32	s16, s17
 801c50e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801c512:	d5ed      	bpl.n	801c4f0 <fminf+0x14>
 801c514:	e7ee      	b.n	801c4f4 <fminf+0x18>
	...

0801c518 <__fpclassifyf>:
 801c518:	ee10 3a10 	vmov	r3, s0
 801c51c:	f033 4000 	bics.w	r0, r3, #2147483648	@ 0x80000000
 801c520:	d00d      	beq.n	801c53e <__fpclassifyf+0x26>
 801c522:	f5a0 0300 	sub.w	r3, r0, #8388608	@ 0x800000
 801c526:	f1b3 4ffe 	cmp.w	r3, #2130706432	@ 0x7f000000
 801c52a:	d30a      	bcc.n	801c542 <__fpclassifyf+0x2a>
 801c52c:	4b07      	ldr	r3, [pc, #28]	@ (801c54c <__fpclassifyf+0x34>)
 801c52e:	1e42      	subs	r2, r0, #1
 801c530:	429a      	cmp	r2, r3
 801c532:	d908      	bls.n	801c546 <__fpclassifyf+0x2e>
 801c534:	f1a0 43ff 	sub.w	r3, r0, #2139095040	@ 0x7f800000
 801c538:	4258      	negs	r0, r3
 801c53a:	4158      	adcs	r0, r3
 801c53c:	4770      	bx	lr
 801c53e:	2002      	movs	r0, #2
 801c540:	4770      	bx	lr
 801c542:	2004      	movs	r0, #4
 801c544:	4770      	bx	lr
 801c546:	2003      	movs	r0, #3
 801c548:	4770      	bx	lr
 801c54a:	bf00      	nop
 801c54c:	007ffffe 	.word	0x007ffffe

0801c550 <__ieee754_pow>:
 801c550:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c554:	b091      	sub	sp, #68	@ 0x44
 801c556:	ed8d 1b00 	vstr	d1, [sp]
 801c55a:	e9dd 1900 	ldrd	r1, r9, [sp]
 801c55e:	f029 4a00 	bic.w	sl, r9, #2147483648	@ 0x80000000
 801c562:	ea5a 0001 	orrs.w	r0, sl, r1
 801c566:	ec57 6b10 	vmov	r6, r7, d0
 801c56a:	d113      	bne.n	801c594 <__ieee754_pow+0x44>
 801c56c:	19b3      	adds	r3, r6, r6
 801c56e:	f487 2200 	eor.w	r2, r7, #524288	@ 0x80000
 801c572:	4152      	adcs	r2, r2
 801c574:	4298      	cmp	r0, r3
 801c576:	4b98      	ldr	r3, [pc, #608]	@ (801c7d8 <__ieee754_pow+0x288>)
 801c578:	4193      	sbcs	r3, r2
 801c57a:	f080 84ea 	bcs.w	801cf52 <__ieee754_pow+0xa02>
 801c57e:	e9dd 2300 	ldrd	r2, r3, [sp]
 801c582:	4630      	mov	r0, r6
 801c584:	4639      	mov	r1, r7
 801c586:	f7e3 fe91 	bl	80002ac <__adddf3>
 801c58a:	ec41 0b10 	vmov	d0, r0, r1
 801c58e:	b011      	add	sp, #68	@ 0x44
 801c590:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c594:	4a91      	ldr	r2, [pc, #580]	@ (801c7dc <__ieee754_pow+0x28c>)
 801c596:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 801c59a:	4590      	cmp	r8, r2
 801c59c:	463d      	mov	r5, r7
 801c59e:	4633      	mov	r3, r6
 801c5a0:	d806      	bhi.n	801c5b0 <__ieee754_pow+0x60>
 801c5a2:	d101      	bne.n	801c5a8 <__ieee754_pow+0x58>
 801c5a4:	2e00      	cmp	r6, #0
 801c5a6:	d1ea      	bne.n	801c57e <__ieee754_pow+0x2e>
 801c5a8:	4592      	cmp	sl, r2
 801c5aa:	d801      	bhi.n	801c5b0 <__ieee754_pow+0x60>
 801c5ac:	d10e      	bne.n	801c5cc <__ieee754_pow+0x7c>
 801c5ae:	b169      	cbz	r1, 801c5cc <__ieee754_pow+0x7c>
 801c5b0:	f105 4540 	add.w	r5, r5, #3221225472	@ 0xc0000000
 801c5b4:	f505 1580 	add.w	r5, r5, #1048576	@ 0x100000
 801c5b8:	431d      	orrs	r5, r3
 801c5ba:	d1e0      	bne.n	801c57e <__ieee754_pow+0x2e>
 801c5bc:	e9dd 3200 	ldrd	r3, r2, [sp]
 801c5c0:	18db      	adds	r3, r3, r3
 801c5c2:	f482 2200 	eor.w	r2, r2, #524288	@ 0x80000
 801c5c6:	4152      	adcs	r2, r2
 801c5c8:	429d      	cmp	r5, r3
 801c5ca:	e7d4      	b.n	801c576 <__ieee754_pow+0x26>
 801c5cc:	2d00      	cmp	r5, #0
 801c5ce:	46c3      	mov	fp, r8
 801c5d0:	da3a      	bge.n	801c648 <__ieee754_pow+0xf8>
 801c5d2:	4a83      	ldr	r2, [pc, #524]	@ (801c7e0 <__ieee754_pow+0x290>)
 801c5d4:	4592      	cmp	sl, r2
 801c5d6:	d84d      	bhi.n	801c674 <__ieee754_pow+0x124>
 801c5d8:	f1a2 7254 	sub.w	r2, r2, #55574528	@ 0x3500000
 801c5dc:	4592      	cmp	sl, r2
 801c5de:	f240 84c7 	bls.w	801cf70 <__ieee754_pow+0xa20>
 801c5e2:	ea4f 522a 	mov.w	r2, sl, asr #20
 801c5e6:	f2a2 32ff 	subw	r2, r2, #1023	@ 0x3ff
 801c5ea:	2a14      	cmp	r2, #20
 801c5ec:	dd0f      	ble.n	801c60e <__ieee754_pow+0xbe>
 801c5ee:	f1c2 0234 	rsb	r2, r2, #52	@ 0x34
 801c5f2:	fa21 f402 	lsr.w	r4, r1, r2
 801c5f6:	fa04 f202 	lsl.w	r2, r4, r2
 801c5fa:	428a      	cmp	r2, r1
 801c5fc:	f040 84b8 	bne.w	801cf70 <__ieee754_pow+0xa20>
 801c600:	f004 0401 	and.w	r4, r4, #1
 801c604:	f1c4 0402 	rsb	r4, r4, #2
 801c608:	2900      	cmp	r1, #0
 801c60a:	d158      	bne.n	801c6be <__ieee754_pow+0x16e>
 801c60c:	e00e      	b.n	801c62c <__ieee754_pow+0xdc>
 801c60e:	2900      	cmp	r1, #0
 801c610:	d154      	bne.n	801c6bc <__ieee754_pow+0x16c>
 801c612:	f1c2 0214 	rsb	r2, r2, #20
 801c616:	fa4a f402 	asr.w	r4, sl, r2
 801c61a:	fa04 f202 	lsl.w	r2, r4, r2
 801c61e:	4552      	cmp	r2, sl
 801c620:	f040 84a3 	bne.w	801cf6a <__ieee754_pow+0xa1a>
 801c624:	f004 0401 	and.w	r4, r4, #1
 801c628:	f1c4 0402 	rsb	r4, r4, #2
 801c62c:	4a6d      	ldr	r2, [pc, #436]	@ (801c7e4 <__ieee754_pow+0x294>)
 801c62e:	4592      	cmp	sl, r2
 801c630:	d12e      	bne.n	801c690 <__ieee754_pow+0x140>
 801c632:	f1b9 0f00 	cmp.w	r9, #0
 801c636:	f280 8494 	bge.w	801cf62 <__ieee754_pow+0xa12>
 801c63a:	496a      	ldr	r1, [pc, #424]	@ (801c7e4 <__ieee754_pow+0x294>)
 801c63c:	4632      	mov	r2, r6
 801c63e:	463b      	mov	r3, r7
 801c640:	2000      	movs	r0, #0
 801c642:	f7e4 f913 	bl	800086c <__aeabi_ddiv>
 801c646:	e7a0      	b.n	801c58a <__ieee754_pow+0x3a>
 801c648:	2400      	movs	r4, #0
 801c64a:	bbc1      	cbnz	r1, 801c6be <__ieee754_pow+0x16e>
 801c64c:	4a63      	ldr	r2, [pc, #396]	@ (801c7dc <__ieee754_pow+0x28c>)
 801c64e:	4592      	cmp	sl, r2
 801c650:	d1ec      	bne.n	801c62c <__ieee754_pow+0xdc>
 801c652:	f108 4240 	add.w	r2, r8, #3221225472	@ 0xc0000000
 801c656:	f502 1280 	add.w	r2, r2, #1048576	@ 0x100000
 801c65a:	431a      	orrs	r2, r3
 801c65c:	f000 8479 	beq.w	801cf52 <__ieee754_pow+0xa02>
 801c660:	4b61      	ldr	r3, [pc, #388]	@ (801c7e8 <__ieee754_pow+0x298>)
 801c662:	4598      	cmp	r8, r3
 801c664:	d908      	bls.n	801c678 <__ieee754_pow+0x128>
 801c666:	f1b9 0f00 	cmp.w	r9, #0
 801c66a:	f2c0 8476 	blt.w	801cf5a <__ieee754_pow+0xa0a>
 801c66e:	e9dd 0100 	ldrd	r0, r1, [sp]
 801c672:	e78a      	b.n	801c58a <__ieee754_pow+0x3a>
 801c674:	2402      	movs	r4, #2
 801c676:	e7e8      	b.n	801c64a <__ieee754_pow+0xfa>
 801c678:	f1b9 0f00 	cmp.w	r9, #0
 801c67c:	f04f 0000 	mov.w	r0, #0
 801c680:	f04f 0100 	mov.w	r1, #0
 801c684:	da81      	bge.n	801c58a <__ieee754_pow+0x3a>
 801c686:	e9dd 0300 	ldrd	r0, r3, [sp]
 801c68a:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 801c68e:	e77c      	b.n	801c58a <__ieee754_pow+0x3a>
 801c690:	f1b9 4f80 	cmp.w	r9, #1073741824	@ 0x40000000
 801c694:	d106      	bne.n	801c6a4 <__ieee754_pow+0x154>
 801c696:	4632      	mov	r2, r6
 801c698:	463b      	mov	r3, r7
 801c69a:	4630      	mov	r0, r6
 801c69c:	4639      	mov	r1, r7
 801c69e:	f7e3 ffbb 	bl	8000618 <__aeabi_dmul>
 801c6a2:	e772      	b.n	801c58a <__ieee754_pow+0x3a>
 801c6a4:	4a51      	ldr	r2, [pc, #324]	@ (801c7ec <__ieee754_pow+0x29c>)
 801c6a6:	4591      	cmp	r9, r2
 801c6a8:	d109      	bne.n	801c6be <__ieee754_pow+0x16e>
 801c6aa:	2d00      	cmp	r5, #0
 801c6ac:	db07      	blt.n	801c6be <__ieee754_pow+0x16e>
 801c6ae:	ec47 6b10 	vmov	d0, r6, r7
 801c6b2:	b011      	add	sp, #68	@ 0x44
 801c6b4:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c6b8:	f000 bd52 	b.w	801d160 <__ieee754_sqrt>
 801c6bc:	2400      	movs	r4, #0
 801c6be:	ec47 6b10 	vmov	d0, r6, r7
 801c6c2:	9302      	str	r3, [sp, #8]
 801c6c4:	f000 fc88 	bl	801cfd8 <fabs>
 801c6c8:	9b02      	ldr	r3, [sp, #8]
 801c6ca:	ec51 0b10 	vmov	r0, r1, d0
 801c6ce:	bb53      	cbnz	r3, 801c726 <__ieee754_pow+0x1d6>
 801c6d0:	4b44      	ldr	r3, [pc, #272]	@ (801c7e4 <__ieee754_pow+0x294>)
 801c6d2:	f025 4240 	bic.w	r2, r5, #3221225472	@ 0xc0000000
 801c6d6:	429a      	cmp	r2, r3
 801c6d8:	d002      	beq.n	801c6e0 <__ieee754_pow+0x190>
 801c6da:	f1b8 0f00 	cmp.w	r8, #0
 801c6de:	d122      	bne.n	801c726 <__ieee754_pow+0x1d6>
 801c6e0:	f1b9 0f00 	cmp.w	r9, #0
 801c6e4:	da05      	bge.n	801c6f2 <__ieee754_pow+0x1a2>
 801c6e6:	4602      	mov	r2, r0
 801c6e8:	460b      	mov	r3, r1
 801c6ea:	2000      	movs	r0, #0
 801c6ec:	493d      	ldr	r1, [pc, #244]	@ (801c7e4 <__ieee754_pow+0x294>)
 801c6ee:	f7e4 f8bd 	bl	800086c <__aeabi_ddiv>
 801c6f2:	2d00      	cmp	r5, #0
 801c6f4:	f6bf af49 	bge.w	801c58a <__ieee754_pow+0x3a>
 801c6f8:	f108 4840 	add.w	r8, r8, #3221225472	@ 0xc0000000
 801c6fc:	f508 1880 	add.w	r8, r8, #1048576	@ 0x100000
 801c700:	ea58 0804 	orrs.w	r8, r8, r4
 801c704:	d108      	bne.n	801c718 <__ieee754_pow+0x1c8>
 801c706:	4602      	mov	r2, r0
 801c708:	460b      	mov	r3, r1
 801c70a:	4610      	mov	r0, r2
 801c70c:	4619      	mov	r1, r3
 801c70e:	f7e3 fdcb 	bl	80002a8 <__aeabi_dsub>
 801c712:	4602      	mov	r2, r0
 801c714:	460b      	mov	r3, r1
 801c716:	e794      	b.n	801c642 <__ieee754_pow+0xf2>
 801c718:	2c01      	cmp	r4, #1
 801c71a:	f47f af36 	bne.w	801c58a <__ieee754_pow+0x3a>
 801c71e:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 801c722:	4619      	mov	r1, r3
 801c724:	e731      	b.n	801c58a <__ieee754_pow+0x3a>
 801c726:	0feb      	lsrs	r3, r5, #31
 801c728:	3b01      	subs	r3, #1
 801c72a:	ea53 0204 	orrs.w	r2, r3, r4
 801c72e:	d102      	bne.n	801c736 <__ieee754_pow+0x1e6>
 801c730:	4632      	mov	r2, r6
 801c732:	463b      	mov	r3, r7
 801c734:	e7e9      	b.n	801c70a <__ieee754_pow+0x1ba>
 801c736:	3c01      	subs	r4, #1
 801c738:	431c      	orrs	r4, r3
 801c73a:	d016      	beq.n	801c76a <__ieee754_pow+0x21a>
 801c73c:	ed9f 7b22 	vldr	d7, [pc, #136]	@ 801c7c8 <__ieee754_pow+0x278>
 801c740:	f1ba 4f84 	cmp.w	sl, #1107296256	@ 0x42000000
 801c744:	ed8d 7b02 	vstr	d7, [sp, #8]
 801c748:	f240 8112 	bls.w	801c970 <__ieee754_pow+0x420>
 801c74c:	4b28      	ldr	r3, [pc, #160]	@ (801c7f0 <__ieee754_pow+0x2a0>)
 801c74e:	459a      	cmp	sl, r3
 801c750:	4b25      	ldr	r3, [pc, #148]	@ (801c7e8 <__ieee754_pow+0x298>)
 801c752:	d916      	bls.n	801c782 <__ieee754_pow+0x232>
 801c754:	4598      	cmp	r8, r3
 801c756:	d80b      	bhi.n	801c770 <__ieee754_pow+0x220>
 801c758:	f1b9 0f00 	cmp.w	r9, #0
 801c75c:	da0b      	bge.n	801c776 <__ieee754_pow+0x226>
 801c75e:	2000      	movs	r0, #0
 801c760:	b011      	add	sp, #68	@ 0x44
 801c762:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c766:	f000 bcf3 	b.w	801d150 <__math_oflow>
 801c76a:	ed9f 7b19 	vldr	d7, [pc, #100]	@ 801c7d0 <__ieee754_pow+0x280>
 801c76e:	e7e7      	b.n	801c740 <__ieee754_pow+0x1f0>
 801c770:	f1b9 0f00 	cmp.w	r9, #0
 801c774:	dcf3      	bgt.n	801c75e <__ieee754_pow+0x20e>
 801c776:	2000      	movs	r0, #0
 801c778:	b011      	add	sp, #68	@ 0x44
 801c77a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c77e:	f000 bcdf 	b.w	801d140 <__math_uflow>
 801c782:	4598      	cmp	r8, r3
 801c784:	d20c      	bcs.n	801c7a0 <__ieee754_pow+0x250>
 801c786:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801c78a:	2200      	movs	r2, #0
 801c78c:	2300      	movs	r3, #0
 801c78e:	f7e4 f9b5 	bl	8000afc <__aeabi_dcmplt>
 801c792:	3800      	subs	r0, #0
 801c794:	bf18      	it	ne
 801c796:	2001      	movne	r0, #1
 801c798:	f1b9 0f00 	cmp.w	r9, #0
 801c79c:	daec      	bge.n	801c778 <__ieee754_pow+0x228>
 801c79e:	e7df      	b.n	801c760 <__ieee754_pow+0x210>
 801c7a0:	4b10      	ldr	r3, [pc, #64]	@ (801c7e4 <__ieee754_pow+0x294>)
 801c7a2:	4598      	cmp	r8, r3
 801c7a4:	f04f 0200 	mov.w	r2, #0
 801c7a8:	d924      	bls.n	801c7f4 <__ieee754_pow+0x2a4>
 801c7aa:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801c7ae:	2300      	movs	r3, #0
 801c7b0:	f7e4 f9a4 	bl	8000afc <__aeabi_dcmplt>
 801c7b4:	3800      	subs	r0, #0
 801c7b6:	bf18      	it	ne
 801c7b8:	2001      	movne	r0, #1
 801c7ba:	f1b9 0f00 	cmp.w	r9, #0
 801c7be:	dccf      	bgt.n	801c760 <__ieee754_pow+0x210>
 801c7c0:	e7da      	b.n	801c778 <__ieee754_pow+0x228>
 801c7c2:	bf00      	nop
 801c7c4:	f3af 8000 	nop.w
 801c7c8:	00000000 	.word	0x00000000
 801c7cc:	3ff00000 	.word	0x3ff00000
 801c7d0:	00000000 	.word	0x00000000
 801c7d4:	bff00000 	.word	0xbff00000
 801c7d8:	fff00000 	.word	0xfff00000
 801c7dc:	7ff00000 	.word	0x7ff00000
 801c7e0:	433fffff 	.word	0x433fffff
 801c7e4:	3ff00000 	.word	0x3ff00000
 801c7e8:	3fefffff 	.word	0x3fefffff
 801c7ec:	3fe00000 	.word	0x3fe00000
 801c7f0:	43f00000 	.word	0x43f00000
 801c7f4:	4b5a      	ldr	r3, [pc, #360]	@ (801c960 <__ieee754_pow+0x410>)
 801c7f6:	f7e3 fd57 	bl	80002a8 <__aeabi_dsub>
 801c7fa:	a351      	add	r3, pc, #324	@ (adr r3, 801c940 <__ieee754_pow+0x3f0>)
 801c7fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c800:	4604      	mov	r4, r0
 801c802:	460d      	mov	r5, r1
 801c804:	f7e3 ff08 	bl	8000618 <__aeabi_dmul>
 801c808:	a34f      	add	r3, pc, #316	@ (adr r3, 801c948 <__ieee754_pow+0x3f8>)
 801c80a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c80e:	4606      	mov	r6, r0
 801c810:	460f      	mov	r7, r1
 801c812:	4620      	mov	r0, r4
 801c814:	4629      	mov	r1, r5
 801c816:	f7e3 feff 	bl	8000618 <__aeabi_dmul>
 801c81a:	4b52      	ldr	r3, [pc, #328]	@ (801c964 <__ieee754_pow+0x414>)
 801c81c:	4682      	mov	sl, r0
 801c81e:	468b      	mov	fp, r1
 801c820:	2200      	movs	r2, #0
 801c822:	4620      	mov	r0, r4
 801c824:	4629      	mov	r1, r5
 801c826:	f7e3 fef7 	bl	8000618 <__aeabi_dmul>
 801c82a:	4602      	mov	r2, r0
 801c82c:	460b      	mov	r3, r1
 801c82e:	a148      	add	r1, pc, #288	@ (adr r1, 801c950 <__ieee754_pow+0x400>)
 801c830:	e9d1 0100 	ldrd	r0, r1, [r1]
 801c834:	f7e3 fd38 	bl	80002a8 <__aeabi_dsub>
 801c838:	4622      	mov	r2, r4
 801c83a:	462b      	mov	r3, r5
 801c83c:	f7e3 feec 	bl	8000618 <__aeabi_dmul>
 801c840:	4602      	mov	r2, r0
 801c842:	460b      	mov	r3, r1
 801c844:	2000      	movs	r0, #0
 801c846:	4948      	ldr	r1, [pc, #288]	@ (801c968 <__ieee754_pow+0x418>)
 801c848:	f7e3 fd2e 	bl	80002a8 <__aeabi_dsub>
 801c84c:	4622      	mov	r2, r4
 801c84e:	4680      	mov	r8, r0
 801c850:	4689      	mov	r9, r1
 801c852:	462b      	mov	r3, r5
 801c854:	4620      	mov	r0, r4
 801c856:	4629      	mov	r1, r5
 801c858:	f7e3 fede 	bl	8000618 <__aeabi_dmul>
 801c85c:	4602      	mov	r2, r0
 801c85e:	460b      	mov	r3, r1
 801c860:	4640      	mov	r0, r8
 801c862:	4649      	mov	r1, r9
 801c864:	f7e3 fed8 	bl	8000618 <__aeabi_dmul>
 801c868:	a33b      	add	r3, pc, #236	@ (adr r3, 801c958 <__ieee754_pow+0x408>)
 801c86a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c86e:	f7e3 fed3 	bl	8000618 <__aeabi_dmul>
 801c872:	4602      	mov	r2, r0
 801c874:	460b      	mov	r3, r1
 801c876:	4650      	mov	r0, sl
 801c878:	4659      	mov	r1, fp
 801c87a:	f7e3 fd15 	bl	80002a8 <__aeabi_dsub>
 801c87e:	4602      	mov	r2, r0
 801c880:	460b      	mov	r3, r1
 801c882:	4680      	mov	r8, r0
 801c884:	4689      	mov	r9, r1
 801c886:	4630      	mov	r0, r6
 801c888:	4639      	mov	r1, r7
 801c88a:	f7e3 fd0f 	bl	80002ac <__adddf3>
 801c88e:	2400      	movs	r4, #0
 801c890:	4632      	mov	r2, r6
 801c892:	463b      	mov	r3, r7
 801c894:	4620      	mov	r0, r4
 801c896:	460d      	mov	r5, r1
 801c898:	f7e3 fd06 	bl	80002a8 <__aeabi_dsub>
 801c89c:	4602      	mov	r2, r0
 801c89e:	460b      	mov	r3, r1
 801c8a0:	4640      	mov	r0, r8
 801c8a2:	4649      	mov	r1, r9
 801c8a4:	f7e3 fd00 	bl	80002a8 <__aeabi_dsub>
 801c8a8:	e9dd 2300 	ldrd	r2, r3, [sp]
 801c8ac:	e9cd 2304 	strd	r2, r3, [sp, #16]
 801c8b0:	2300      	movs	r3, #0
 801c8b2:	9304      	str	r3, [sp, #16]
 801c8b4:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 801c8b8:	4606      	mov	r6, r0
 801c8ba:	460f      	mov	r7, r1
 801c8bc:	4652      	mov	r2, sl
 801c8be:	465b      	mov	r3, fp
 801c8c0:	e9dd 0100 	ldrd	r0, r1, [sp]
 801c8c4:	f7e3 fcf0 	bl	80002a8 <__aeabi_dsub>
 801c8c8:	4622      	mov	r2, r4
 801c8ca:	462b      	mov	r3, r5
 801c8cc:	f7e3 fea4 	bl	8000618 <__aeabi_dmul>
 801c8d0:	e9dd 2300 	ldrd	r2, r3, [sp]
 801c8d4:	4680      	mov	r8, r0
 801c8d6:	4689      	mov	r9, r1
 801c8d8:	4630      	mov	r0, r6
 801c8da:	4639      	mov	r1, r7
 801c8dc:	f7e3 fe9c 	bl	8000618 <__aeabi_dmul>
 801c8e0:	4602      	mov	r2, r0
 801c8e2:	460b      	mov	r3, r1
 801c8e4:	4640      	mov	r0, r8
 801c8e6:	4649      	mov	r1, r9
 801c8e8:	f7e3 fce0 	bl	80002ac <__adddf3>
 801c8ec:	4652      	mov	r2, sl
 801c8ee:	465b      	mov	r3, fp
 801c8f0:	4606      	mov	r6, r0
 801c8f2:	460f      	mov	r7, r1
 801c8f4:	4620      	mov	r0, r4
 801c8f6:	4629      	mov	r1, r5
 801c8f8:	f7e3 fe8e 	bl	8000618 <__aeabi_dmul>
 801c8fc:	460b      	mov	r3, r1
 801c8fe:	4602      	mov	r2, r0
 801c900:	4680      	mov	r8, r0
 801c902:	4689      	mov	r9, r1
 801c904:	4630      	mov	r0, r6
 801c906:	4639      	mov	r1, r7
 801c908:	f7e3 fcd0 	bl	80002ac <__adddf3>
 801c90c:	4b17      	ldr	r3, [pc, #92]	@ (801c96c <__ieee754_pow+0x41c>)
 801c90e:	4299      	cmp	r1, r3
 801c910:	4604      	mov	r4, r0
 801c912:	460d      	mov	r5, r1
 801c914:	468a      	mov	sl, r1
 801c916:	468b      	mov	fp, r1
 801c918:	f340 82ef 	ble.w	801cefa <__ieee754_pow+0x9aa>
 801c91c:	f101 433f 	add.w	r3, r1, #3204448256	@ 0xbf000000
 801c920:	f503 03e0 	add.w	r3, r3, #7340032	@ 0x700000
 801c924:	4303      	orrs	r3, r0
 801c926:	f000 81e8 	beq.w	801ccfa <__ieee754_pow+0x7aa>
 801c92a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801c92e:	2200      	movs	r2, #0
 801c930:	2300      	movs	r3, #0
 801c932:	f7e4 f8e3 	bl	8000afc <__aeabi_dcmplt>
 801c936:	3800      	subs	r0, #0
 801c938:	bf18      	it	ne
 801c93a:	2001      	movne	r0, #1
 801c93c:	e710      	b.n	801c760 <__ieee754_pow+0x210>
 801c93e:	bf00      	nop
 801c940:	60000000 	.word	0x60000000
 801c944:	3ff71547 	.word	0x3ff71547
 801c948:	f85ddf44 	.word	0xf85ddf44
 801c94c:	3e54ae0b 	.word	0x3e54ae0b
 801c950:	55555555 	.word	0x55555555
 801c954:	3fd55555 	.word	0x3fd55555
 801c958:	652b82fe 	.word	0x652b82fe
 801c95c:	3ff71547 	.word	0x3ff71547
 801c960:	3ff00000 	.word	0x3ff00000
 801c964:	3fd00000 	.word	0x3fd00000
 801c968:	3fe00000 	.word	0x3fe00000
 801c96c:	408fffff 	.word	0x408fffff
 801c970:	4bd5      	ldr	r3, [pc, #852]	@ (801ccc8 <__ieee754_pow+0x778>)
 801c972:	402b      	ands	r3, r5
 801c974:	2200      	movs	r2, #0
 801c976:	b92b      	cbnz	r3, 801c984 <__ieee754_pow+0x434>
 801c978:	4bd4      	ldr	r3, [pc, #848]	@ (801cccc <__ieee754_pow+0x77c>)
 801c97a:	f7e3 fe4d 	bl	8000618 <__aeabi_dmul>
 801c97e:	f06f 0234 	mvn.w	r2, #52	@ 0x34
 801c982:	468b      	mov	fp, r1
 801c984:	ea4f 532b 	mov.w	r3, fp, asr #20
 801c988:	f2a3 33ff 	subw	r3, r3, #1023	@ 0x3ff
 801c98c:	4413      	add	r3, r2
 801c98e:	930a      	str	r3, [sp, #40]	@ 0x28
 801c990:	4bcf      	ldr	r3, [pc, #828]	@ (801ccd0 <__ieee754_pow+0x780>)
 801c992:	f3cb 0b13 	ubfx	fp, fp, #0, #20
 801c996:	f04b 557f 	orr.w	r5, fp, #1069547520	@ 0x3fc00000
 801c99a:	459b      	cmp	fp, r3
 801c99c:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 801c9a0:	dd08      	ble.n	801c9b4 <__ieee754_pow+0x464>
 801c9a2:	4bcc      	ldr	r3, [pc, #816]	@ (801ccd4 <__ieee754_pow+0x784>)
 801c9a4:	459b      	cmp	fp, r3
 801c9a6:	f340 81a5 	ble.w	801ccf4 <__ieee754_pow+0x7a4>
 801c9aa:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801c9ac:	3301      	adds	r3, #1
 801c9ae:	930a      	str	r3, [sp, #40]	@ 0x28
 801c9b0:	f5a5 1580 	sub.w	r5, r5, #1048576	@ 0x100000
 801c9b4:	f04f 0a00 	mov.w	sl, #0
 801c9b8:	ea4f 03ca 	mov.w	r3, sl, lsl #3
 801c9bc:	930b      	str	r3, [sp, #44]	@ 0x2c
 801c9be:	4bc6      	ldr	r3, [pc, #792]	@ (801ccd8 <__ieee754_pow+0x788>)
 801c9c0:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 801c9c4:	ed93 7b00 	vldr	d7, [r3]
 801c9c8:	4629      	mov	r1, r5
 801c9ca:	ec53 2b17 	vmov	r2, r3, d7
 801c9ce:	ed8d 7b06 	vstr	d7, [sp, #24]
 801c9d2:	e9cd 0108 	strd	r0, r1, [sp, #32]
 801c9d6:	f7e3 fc67 	bl	80002a8 <__aeabi_dsub>
 801c9da:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 801c9de:	4606      	mov	r6, r0
 801c9e0:	460f      	mov	r7, r1
 801c9e2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801c9e6:	f7e3 fc61 	bl	80002ac <__adddf3>
 801c9ea:	4602      	mov	r2, r0
 801c9ec:	460b      	mov	r3, r1
 801c9ee:	2000      	movs	r0, #0
 801c9f0:	49ba      	ldr	r1, [pc, #744]	@ (801ccdc <__ieee754_pow+0x78c>)
 801c9f2:	f7e3 ff3b 	bl	800086c <__aeabi_ddiv>
 801c9f6:	e9cd 010c 	strd	r0, r1, [sp, #48]	@ 0x30
 801c9fa:	4602      	mov	r2, r0
 801c9fc:	460b      	mov	r3, r1
 801c9fe:	4630      	mov	r0, r6
 801ca00:	4639      	mov	r1, r7
 801ca02:	f7e3 fe09 	bl	8000618 <__aeabi_dmul>
 801ca06:	e9cd 0104 	strd	r0, r1, [sp, #16]
 801ca0a:	e9dd bc04 	ldrd	fp, ip, [sp, #16]
 801ca0e:	106d      	asrs	r5, r5, #1
 801ca10:	f045 5500 	orr.w	r5, r5, #536870912	@ 0x20000000
 801ca14:	f04f 0b00 	mov.w	fp, #0
 801ca18:	f505 2500 	add.w	r5, r5, #524288	@ 0x80000
 801ca1c:	4661      	mov	r1, ip
 801ca1e:	2200      	movs	r2, #0
 801ca20:	eb05 438a 	add.w	r3, r5, sl, lsl #18
 801ca24:	4658      	mov	r0, fp
 801ca26:	46e1      	mov	r9, ip
 801ca28:	e9cd bc0e 	strd	fp, ip, [sp, #56]	@ 0x38
 801ca2c:	4614      	mov	r4, r2
 801ca2e:	461d      	mov	r5, r3
 801ca30:	f7e3 fdf2 	bl	8000618 <__aeabi_dmul>
 801ca34:	4602      	mov	r2, r0
 801ca36:	460b      	mov	r3, r1
 801ca38:	4630      	mov	r0, r6
 801ca3a:	4639      	mov	r1, r7
 801ca3c:	f7e3 fc34 	bl	80002a8 <__aeabi_dsub>
 801ca40:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 801ca44:	4606      	mov	r6, r0
 801ca46:	460f      	mov	r7, r1
 801ca48:	4620      	mov	r0, r4
 801ca4a:	4629      	mov	r1, r5
 801ca4c:	f7e3 fc2c 	bl	80002a8 <__aeabi_dsub>
 801ca50:	4602      	mov	r2, r0
 801ca52:	460b      	mov	r3, r1
 801ca54:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 801ca58:	f7e3 fc26 	bl	80002a8 <__aeabi_dsub>
 801ca5c:	465a      	mov	r2, fp
 801ca5e:	464b      	mov	r3, r9
 801ca60:	f7e3 fdda 	bl	8000618 <__aeabi_dmul>
 801ca64:	4602      	mov	r2, r0
 801ca66:	460b      	mov	r3, r1
 801ca68:	4630      	mov	r0, r6
 801ca6a:	4639      	mov	r1, r7
 801ca6c:	f7e3 fc1c 	bl	80002a8 <__aeabi_dsub>
 801ca70:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 801ca74:	f7e3 fdd0 	bl	8000618 <__aeabi_dmul>
 801ca78:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801ca7c:	e9cd 0106 	strd	r0, r1, [sp, #24]
 801ca80:	4610      	mov	r0, r2
 801ca82:	4619      	mov	r1, r3
 801ca84:	f7e3 fdc8 	bl	8000618 <__aeabi_dmul>
 801ca88:	a37d      	add	r3, pc, #500	@ (adr r3, 801cc80 <__ieee754_pow+0x730>)
 801ca8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ca8e:	4604      	mov	r4, r0
 801ca90:	460d      	mov	r5, r1
 801ca92:	f7e3 fdc1 	bl	8000618 <__aeabi_dmul>
 801ca96:	a37c      	add	r3, pc, #496	@ (adr r3, 801cc88 <__ieee754_pow+0x738>)
 801ca98:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ca9c:	f7e3 fc06 	bl	80002ac <__adddf3>
 801caa0:	4622      	mov	r2, r4
 801caa2:	462b      	mov	r3, r5
 801caa4:	f7e3 fdb8 	bl	8000618 <__aeabi_dmul>
 801caa8:	a379      	add	r3, pc, #484	@ (adr r3, 801cc90 <__ieee754_pow+0x740>)
 801caaa:	e9d3 2300 	ldrd	r2, r3, [r3]
 801caae:	f7e3 fbfd 	bl	80002ac <__adddf3>
 801cab2:	4622      	mov	r2, r4
 801cab4:	462b      	mov	r3, r5
 801cab6:	f7e3 fdaf 	bl	8000618 <__aeabi_dmul>
 801caba:	a377      	add	r3, pc, #476	@ (adr r3, 801cc98 <__ieee754_pow+0x748>)
 801cabc:	e9d3 2300 	ldrd	r2, r3, [r3]
 801cac0:	f7e3 fbf4 	bl	80002ac <__adddf3>
 801cac4:	4622      	mov	r2, r4
 801cac6:	462b      	mov	r3, r5
 801cac8:	f7e3 fda6 	bl	8000618 <__aeabi_dmul>
 801cacc:	a374      	add	r3, pc, #464	@ (adr r3, 801cca0 <__ieee754_pow+0x750>)
 801cace:	e9d3 2300 	ldrd	r2, r3, [r3]
 801cad2:	f7e3 fbeb 	bl	80002ac <__adddf3>
 801cad6:	4622      	mov	r2, r4
 801cad8:	462b      	mov	r3, r5
 801cada:	f7e3 fd9d 	bl	8000618 <__aeabi_dmul>
 801cade:	a372      	add	r3, pc, #456	@ (adr r3, 801cca8 <__ieee754_pow+0x758>)
 801cae0:	e9d3 2300 	ldrd	r2, r3, [r3]
 801cae4:	f7e3 fbe2 	bl	80002ac <__adddf3>
 801cae8:	4622      	mov	r2, r4
 801caea:	4606      	mov	r6, r0
 801caec:	460f      	mov	r7, r1
 801caee:	462b      	mov	r3, r5
 801caf0:	4620      	mov	r0, r4
 801caf2:	4629      	mov	r1, r5
 801caf4:	f7e3 fd90 	bl	8000618 <__aeabi_dmul>
 801caf8:	4602      	mov	r2, r0
 801cafa:	460b      	mov	r3, r1
 801cafc:	4630      	mov	r0, r6
 801cafe:	4639      	mov	r1, r7
 801cb00:	f7e3 fd8a 	bl	8000618 <__aeabi_dmul>
 801cb04:	465a      	mov	r2, fp
 801cb06:	4604      	mov	r4, r0
 801cb08:	460d      	mov	r5, r1
 801cb0a:	464b      	mov	r3, r9
 801cb0c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 801cb10:	f7e3 fbcc 	bl	80002ac <__adddf3>
 801cb14:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 801cb18:	f7e3 fd7e 	bl	8000618 <__aeabi_dmul>
 801cb1c:	4622      	mov	r2, r4
 801cb1e:	462b      	mov	r3, r5
 801cb20:	f7e3 fbc4 	bl	80002ac <__adddf3>
 801cb24:	465a      	mov	r2, fp
 801cb26:	e9cd 0108 	strd	r0, r1, [sp, #32]
 801cb2a:	464b      	mov	r3, r9
 801cb2c:	4658      	mov	r0, fp
 801cb2e:	4649      	mov	r1, r9
 801cb30:	f7e3 fd72 	bl	8000618 <__aeabi_dmul>
 801cb34:	4b6a      	ldr	r3, [pc, #424]	@ (801cce0 <__ieee754_pow+0x790>)
 801cb36:	2200      	movs	r2, #0
 801cb38:	4606      	mov	r6, r0
 801cb3a:	460f      	mov	r7, r1
 801cb3c:	f7e3 fbb6 	bl	80002ac <__adddf3>
 801cb40:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 801cb44:	f7e3 fbb2 	bl	80002ac <__adddf3>
 801cb48:	46d8      	mov	r8, fp
 801cb4a:	e9dd bc0e 	ldrd	fp, ip, [sp, #56]	@ 0x38
 801cb4e:	460d      	mov	r5, r1
 801cb50:	465a      	mov	r2, fp
 801cb52:	460b      	mov	r3, r1
 801cb54:	4640      	mov	r0, r8
 801cb56:	4649      	mov	r1, r9
 801cb58:	e9cd bc0c 	strd	fp, ip, [sp, #48]	@ 0x30
 801cb5c:	f7e3 fd5c 	bl	8000618 <__aeabi_dmul>
 801cb60:	465c      	mov	r4, fp
 801cb62:	4680      	mov	r8, r0
 801cb64:	4689      	mov	r9, r1
 801cb66:	4b5e      	ldr	r3, [pc, #376]	@ (801cce0 <__ieee754_pow+0x790>)
 801cb68:	2200      	movs	r2, #0
 801cb6a:	4620      	mov	r0, r4
 801cb6c:	4629      	mov	r1, r5
 801cb6e:	f7e3 fb9b 	bl	80002a8 <__aeabi_dsub>
 801cb72:	4632      	mov	r2, r6
 801cb74:	463b      	mov	r3, r7
 801cb76:	f7e3 fb97 	bl	80002a8 <__aeabi_dsub>
 801cb7a:	4602      	mov	r2, r0
 801cb7c:	460b      	mov	r3, r1
 801cb7e:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 801cb82:	f7e3 fb91 	bl	80002a8 <__aeabi_dsub>
 801cb86:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801cb8a:	f7e3 fd45 	bl	8000618 <__aeabi_dmul>
 801cb8e:	4622      	mov	r2, r4
 801cb90:	4606      	mov	r6, r0
 801cb92:	460f      	mov	r7, r1
 801cb94:	462b      	mov	r3, r5
 801cb96:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801cb9a:	f7e3 fd3d 	bl	8000618 <__aeabi_dmul>
 801cb9e:	4602      	mov	r2, r0
 801cba0:	460b      	mov	r3, r1
 801cba2:	4630      	mov	r0, r6
 801cba4:	4639      	mov	r1, r7
 801cba6:	f7e3 fb81 	bl	80002ac <__adddf3>
 801cbaa:	4606      	mov	r6, r0
 801cbac:	460f      	mov	r7, r1
 801cbae:	4602      	mov	r2, r0
 801cbb0:	460b      	mov	r3, r1
 801cbb2:	4640      	mov	r0, r8
 801cbb4:	4649      	mov	r1, r9
 801cbb6:	f7e3 fb79 	bl	80002ac <__adddf3>
 801cbba:	e9dd bc0c 	ldrd	fp, ip, [sp, #48]	@ 0x30
 801cbbe:	a33c      	add	r3, pc, #240	@ (adr r3, 801ccb0 <__ieee754_pow+0x760>)
 801cbc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 801cbc4:	4658      	mov	r0, fp
 801cbc6:	e9cd bc08 	strd	fp, ip, [sp, #32]
 801cbca:	460d      	mov	r5, r1
 801cbcc:	f7e3 fd24 	bl	8000618 <__aeabi_dmul>
 801cbd0:	465c      	mov	r4, fp
 801cbd2:	e9cd 0104 	strd	r0, r1, [sp, #16]
 801cbd6:	4642      	mov	r2, r8
 801cbd8:	464b      	mov	r3, r9
 801cbda:	4620      	mov	r0, r4
 801cbdc:	4629      	mov	r1, r5
 801cbde:	f7e3 fb63 	bl	80002a8 <__aeabi_dsub>
 801cbe2:	4602      	mov	r2, r0
 801cbe4:	460b      	mov	r3, r1
 801cbe6:	4630      	mov	r0, r6
 801cbe8:	4639      	mov	r1, r7
 801cbea:	f7e3 fb5d 	bl	80002a8 <__aeabi_dsub>
 801cbee:	a332      	add	r3, pc, #200	@ (adr r3, 801ccb8 <__ieee754_pow+0x768>)
 801cbf0:	e9d3 2300 	ldrd	r2, r3, [r3]
 801cbf4:	f7e3 fd10 	bl	8000618 <__aeabi_dmul>
 801cbf8:	a331      	add	r3, pc, #196	@ (adr r3, 801ccc0 <__ieee754_pow+0x770>)
 801cbfa:	e9d3 2300 	ldrd	r2, r3, [r3]
 801cbfe:	4606      	mov	r6, r0
 801cc00:	460f      	mov	r7, r1
 801cc02:	4620      	mov	r0, r4
 801cc04:	4629      	mov	r1, r5
 801cc06:	f7e3 fd07 	bl	8000618 <__aeabi_dmul>
 801cc0a:	4602      	mov	r2, r0
 801cc0c:	460b      	mov	r3, r1
 801cc0e:	4630      	mov	r0, r6
 801cc10:	4639      	mov	r1, r7
 801cc12:	f7e3 fb4b 	bl	80002ac <__adddf3>
 801cc16:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 801cc18:	4b32      	ldr	r3, [pc, #200]	@ (801cce4 <__ieee754_pow+0x794>)
 801cc1a:	4413      	add	r3, r2
 801cc1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801cc20:	f7e3 fb44 	bl	80002ac <__adddf3>
 801cc24:	e9cd 0106 	strd	r0, r1, [sp, #24]
 801cc28:	980a      	ldr	r0, [sp, #40]	@ 0x28
 801cc2a:	f7e3 fc8b 	bl	8000544 <__aeabi_i2d>
 801cc2e:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 801cc30:	4b2d      	ldr	r3, [pc, #180]	@ (801cce8 <__ieee754_pow+0x798>)
 801cc32:	4413      	add	r3, r2
 801cc34:	e9d3 8900 	ldrd	r8, r9, [r3]
 801cc38:	4606      	mov	r6, r0
 801cc3a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 801cc3e:	460f      	mov	r7, r1
 801cc40:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 801cc44:	f7e3 fb32 	bl	80002ac <__adddf3>
 801cc48:	4642      	mov	r2, r8
 801cc4a:	464b      	mov	r3, r9
 801cc4c:	f7e3 fb2e 	bl	80002ac <__adddf3>
 801cc50:	4632      	mov	r2, r6
 801cc52:	463b      	mov	r3, r7
 801cc54:	f7e3 fb2a 	bl	80002ac <__adddf3>
 801cc58:	e9dd bc08 	ldrd	fp, ip, [sp, #32]
 801cc5c:	4632      	mov	r2, r6
 801cc5e:	463b      	mov	r3, r7
 801cc60:	4658      	mov	r0, fp
 801cc62:	460d      	mov	r5, r1
 801cc64:	f7e3 fb20 	bl	80002a8 <__aeabi_dsub>
 801cc68:	4642      	mov	r2, r8
 801cc6a:	464b      	mov	r3, r9
 801cc6c:	f7e3 fb1c 	bl	80002a8 <__aeabi_dsub>
 801cc70:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801cc74:	f7e3 fb18 	bl	80002a8 <__aeabi_dsub>
 801cc78:	465c      	mov	r4, fp
 801cc7a:	4602      	mov	r2, r0
 801cc7c:	e036      	b.n	801ccec <__ieee754_pow+0x79c>
 801cc7e:	bf00      	nop
 801cc80:	4a454eef 	.word	0x4a454eef
 801cc84:	3fca7e28 	.word	0x3fca7e28
 801cc88:	93c9db65 	.word	0x93c9db65
 801cc8c:	3fcd864a 	.word	0x3fcd864a
 801cc90:	a91d4101 	.word	0xa91d4101
 801cc94:	3fd17460 	.word	0x3fd17460
 801cc98:	518f264d 	.word	0x518f264d
 801cc9c:	3fd55555 	.word	0x3fd55555
 801cca0:	db6fabff 	.word	0xdb6fabff
 801cca4:	3fdb6db6 	.word	0x3fdb6db6
 801cca8:	33333303 	.word	0x33333303
 801ccac:	3fe33333 	.word	0x3fe33333
 801ccb0:	e0000000 	.word	0xe0000000
 801ccb4:	3feec709 	.word	0x3feec709
 801ccb8:	dc3a03fd 	.word	0xdc3a03fd
 801ccbc:	3feec709 	.word	0x3feec709
 801ccc0:	145b01f5 	.word	0x145b01f5
 801ccc4:	be3e2fe0 	.word	0xbe3e2fe0
 801ccc8:	7ff00000 	.word	0x7ff00000
 801cccc:	43400000 	.word	0x43400000
 801ccd0:	0003988e 	.word	0x0003988e
 801ccd4:	000bb679 	.word	0x000bb679
 801ccd8:	0801e310 	.word	0x0801e310
 801ccdc:	3ff00000 	.word	0x3ff00000
 801cce0:	40080000 	.word	0x40080000
 801cce4:	0801e2f0 	.word	0x0801e2f0
 801cce8:	0801e300 	.word	0x0801e300
 801ccec:	460b      	mov	r3, r1
 801ccee:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801ccf2:	e5d7      	b.n	801c8a4 <__ieee754_pow+0x354>
 801ccf4:	f04f 0a01 	mov.w	sl, #1
 801ccf8:	e65e      	b.n	801c9b8 <__ieee754_pow+0x468>
 801ccfa:	a3b4      	add	r3, pc, #720	@ (adr r3, 801cfcc <__ieee754_pow+0xa7c>)
 801ccfc:	e9d3 2300 	ldrd	r2, r3, [r3]
 801cd00:	4630      	mov	r0, r6
 801cd02:	4639      	mov	r1, r7
 801cd04:	f7e3 fad2 	bl	80002ac <__adddf3>
 801cd08:	4642      	mov	r2, r8
 801cd0a:	e9cd 0100 	strd	r0, r1, [sp]
 801cd0e:	464b      	mov	r3, r9
 801cd10:	4620      	mov	r0, r4
 801cd12:	4629      	mov	r1, r5
 801cd14:	f7e3 fac8 	bl	80002a8 <__aeabi_dsub>
 801cd18:	4602      	mov	r2, r0
 801cd1a:	460b      	mov	r3, r1
 801cd1c:	e9dd 0100 	ldrd	r0, r1, [sp]
 801cd20:	f7e3 ff0a 	bl	8000b38 <__aeabi_dcmpgt>
 801cd24:	2800      	cmp	r0, #0
 801cd26:	f47f ae00 	bne.w	801c92a <__ieee754_pow+0x3da>
 801cd2a:	ea4f 5a2a 	mov.w	sl, sl, asr #20
 801cd2e:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 801cd32:	f2aa 3afe 	subw	sl, sl, #1022	@ 0x3fe
 801cd36:	fa43 fa0a 	asr.w	sl, r3, sl
 801cd3a:	44da      	add	sl, fp
 801cd3c:	f3ca 510a 	ubfx	r1, sl, #20, #11
 801cd40:	489d      	ldr	r0, [pc, #628]	@ (801cfb8 <__ieee754_pow+0xa68>)
 801cd42:	f2a1 31ff 	subw	r1, r1, #1023	@ 0x3ff
 801cd46:	4108      	asrs	r0, r1
 801cd48:	ea00 030a 	and.w	r3, r0, sl
 801cd4c:	f3ca 0a13 	ubfx	sl, sl, #0, #20
 801cd50:	f1c1 0114 	rsb	r1, r1, #20
 801cd54:	f44a 1a80 	orr.w	sl, sl, #1048576	@ 0x100000
 801cd58:	fa4a fa01 	asr.w	sl, sl, r1
 801cd5c:	f1bb 0f00 	cmp.w	fp, #0
 801cd60:	4640      	mov	r0, r8
 801cd62:	4649      	mov	r1, r9
 801cd64:	f04f 0200 	mov.w	r2, #0
 801cd68:	bfb8      	it	lt
 801cd6a:	f1ca 0a00 	rsblt	sl, sl, #0
 801cd6e:	f7e3 fa9b 	bl	80002a8 <__aeabi_dsub>
 801cd72:	4680      	mov	r8, r0
 801cd74:	4689      	mov	r9, r1
 801cd76:	4632      	mov	r2, r6
 801cd78:	463b      	mov	r3, r7
 801cd7a:	4640      	mov	r0, r8
 801cd7c:	4649      	mov	r1, r9
 801cd7e:	f7e3 fa95 	bl	80002ac <__adddf3>
 801cd82:	2400      	movs	r4, #0
 801cd84:	a37c      	add	r3, pc, #496	@ (adr r3, 801cf78 <__ieee754_pow+0xa28>)
 801cd86:	e9d3 2300 	ldrd	r2, r3, [r3]
 801cd8a:	4620      	mov	r0, r4
 801cd8c:	460d      	mov	r5, r1
 801cd8e:	f7e3 fc43 	bl	8000618 <__aeabi_dmul>
 801cd92:	4642      	mov	r2, r8
 801cd94:	e9cd 0100 	strd	r0, r1, [sp]
 801cd98:	464b      	mov	r3, r9
 801cd9a:	4620      	mov	r0, r4
 801cd9c:	4629      	mov	r1, r5
 801cd9e:	f7e3 fa83 	bl	80002a8 <__aeabi_dsub>
 801cda2:	4602      	mov	r2, r0
 801cda4:	460b      	mov	r3, r1
 801cda6:	4630      	mov	r0, r6
 801cda8:	4639      	mov	r1, r7
 801cdaa:	f7e3 fa7d 	bl	80002a8 <__aeabi_dsub>
 801cdae:	a374      	add	r3, pc, #464	@ (adr r3, 801cf80 <__ieee754_pow+0xa30>)
 801cdb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 801cdb4:	f7e3 fc30 	bl	8000618 <__aeabi_dmul>
 801cdb8:	a373      	add	r3, pc, #460	@ (adr r3, 801cf88 <__ieee754_pow+0xa38>)
 801cdba:	e9d3 2300 	ldrd	r2, r3, [r3]
 801cdbe:	4680      	mov	r8, r0
 801cdc0:	4689      	mov	r9, r1
 801cdc2:	4620      	mov	r0, r4
 801cdc4:	4629      	mov	r1, r5
 801cdc6:	f7e3 fc27 	bl	8000618 <__aeabi_dmul>
 801cdca:	4602      	mov	r2, r0
 801cdcc:	460b      	mov	r3, r1
 801cdce:	4640      	mov	r0, r8
 801cdd0:	4649      	mov	r1, r9
 801cdd2:	f7e3 fa6b 	bl	80002ac <__adddf3>
 801cdd6:	4604      	mov	r4, r0
 801cdd8:	460d      	mov	r5, r1
 801cdda:	4602      	mov	r2, r0
 801cddc:	460b      	mov	r3, r1
 801cdde:	e9dd 0100 	ldrd	r0, r1, [sp]
 801cde2:	f7e3 fa63 	bl	80002ac <__adddf3>
 801cde6:	e9dd 2300 	ldrd	r2, r3, [sp]
 801cdea:	4680      	mov	r8, r0
 801cdec:	4689      	mov	r9, r1
 801cdee:	f7e3 fa5b 	bl	80002a8 <__aeabi_dsub>
 801cdf2:	4602      	mov	r2, r0
 801cdf4:	460b      	mov	r3, r1
 801cdf6:	4620      	mov	r0, r4
 801cdf8:	4629      	mov	r1, r5
 801cdfa:	f7e3 fa55 	bl	80002a8 <__aeabi_dsub>
 801cdfe:	4642      	mov	r2, r8
 801ce00:	4606      	mov	r6, r0
 801ce02:	460f      	mov	r7, r1
 801ce04:	464b      	mov	r3, r9
 801ce06:	4640      	mov	r0, r8
 801ce08:	4649      	mov	r1, r9
 801ce0a:	f7e3 fc05 	bl	8000618 <__aeabi_dmul>
 801ce0e:	a360      	add	r3, pc, #384	@ (adr r3, 801cf90 <__ieee754_pow+0xa40>)
 801ce10:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ce14:	4604      	mov	r4, r0
 801ce16:	460d      	mov	r5, r1
 801ce18:	f7e3 fbfe 	bl	8000618 <__aeabi_dmul>
 801ce1c:	a35e      	add	r3, pc, #376	@ (adr r3, 801cf98 <__ieee754_pow+0xa48>)
 801ce1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ce22:	f7e3 fa41 	bl	80002a8 <__aeabi_dsub>
 801ce26:	4622      	mov	r2, r4
 801ce28:	462b      	mov	r3, r5
 801ce2a:	f7e3 fbf5 	bl	8000618 <__aeabi_dmul>
 801ce2e:	a35c      	add	r3, pc, #368	@ (adr r3, 801cfa0 <__ieee754_pow+0xa50>)
 801ce30:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ce34:	f7e3 fa3a 	bl	80002ac <__adddf3>
 801ce38:	4622      	mov	r2, r4
 801ce3a:	462b      	mov	r3, r5
 801ce3c:	f7e3 fbec 	bl	8000618 <__aeabi_dmul>
 801ce40:	a359      	add	r3, pc, #356	@ (adr r3, 801cfa8 <__ieee754_pow+0xa58>)
 801ce42:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ce46:	f7e3 fa2f 	bl	80002a8 <__aeabi_dsub>
 801ce4a:	4622      	mov	r2, r4
 801ce4c:	462b      	mov	r3, r5
 801ce4e:	f7e3 fbe3 	bl	8000618 <__aeabi_dmul>
 801ce52:	a357      	add	r3, pc, #348	@ (adr r3, 801cfb0 <__ieee754_pow+0xa60>)
 801ce54:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ce58:	f7e3 fa28 	bl	80002ac <__adddf3>
 801ce5c:	4622      	mov	r2, r4
 801ce5e:	462b      	mov	r3, r5
 801ce60:	f7e3 fbda 	bl	8000618 <__aeabi_dmul>
 801ce64:	4602      	mov	r2, r0
 801ce66:	460b      	mov	r3, r1
 801ce68:	4640      	mov	r0, r8
 801ce6a:	4649      	mov	r1, r9
 801ce6c:	f7e3 fa1c 	bl	80002a8 <__aeabi_dsub>
 801ce70:	4604      	mov	r4, r0
 801ce72:	460d      	mov	r5, r1
 801ce74:	4602      	mov	r2, r0
 801ce76:	460b      	mov	r3, r1
 801ce78:	4640      	mov	r0, r8
 801ce7a:	4649      	mov	r1, r9
 801ce7c:	f7e3 fbcc 	bl	8000618 <__aeabi_dmul>
 801ce80:	2200      	movs	r2, #0
 801ce82:	e9cd 0100 	strd	r0, r1, [sp]
 801ce86:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 801ce8a:	4620      	mov	r0, r4
 801ce8c:	4629      	mov	r1, r5
 801ce8e:	f7e3 fa0b 	bl	80002a8 <__aeabi_dsub>
 801ce92:	4602      	mov	r2, r0
 801ce94:	460b      	mov	r3, r1
 801ce96:	e9dd 0100 	ldrd	r0, r1, [sp]
 801ce9a:	f7e3 fce7 	bl	800086c <__aeabi_ddiv>
 801ce9e:	4632      	mov	r2, r6
 801cea0:	4604      	mov	r4, r0
 801cea2:	460d      	mov	r5, r1
 801cea4:	463b      	mov	r3, r7
 801cea6:	4640      	mov	r0, r8
 801cea8:	4649      	mov	r1, r9
 801ceaa:	f7e3 fbb5 	bl	8000618 <__aeabi_dmul>
 801ceae:	4632      	mov	r2, r6
 801ceb0:	463b      	mov	r3, r7
 801ceb2:	f7e3 f9fb 	bl	80002ac <__adddf3>
 801ceb6:	4602      	mov	r2, r0
 801ceb8:	460b      	mov	r3, r1
 801ceba:	4620      	mov	r0, r4
 801cebc:	4629      	mov	r1, r5
 801cebe:	f7e3 f9f3 	bl	80002a8 <__aeabi_dsub>
 801cec2:	4642      	mov	r2, r8
 801cec4:	464b      	mov	r3, r9
 801cec6:	f7e3 f9ef 	bl	80002a8 <__aeabi_dsub>
 801ceca:	460b      	mov	r3, r1
 801cecc:	4602      	mov	r2, r0
 801cece:	493b      	ldr	r1, [pc, #236]	@ (801cfbc <__ieee754_pow+0xa6c>)
 801ced0:	2000      	movs	r0, #0
 801ced2:	f7e3 f9e9 	bl	80002a8 <__aeabi_dsub>
 801ced6:	ec41 0b10 	vmov	d0, r0, r1
 801ceda:	ee10 3a90 	vmov	r3, s1
 801cede:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 801cee2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 801cee6:	da30      	bge.n	801cf4a <__ieee754_pow+0x9fa>
 801cee8:	4650      	mov	r0, sl
 801ceea:	f000 f87d 	bl	801cfe8 <scalbn>
 801ceee:	ec51 0b10 	vmov	r0, r1, d0
 801cef2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801cef6:	f7ff bbd2 	b.w	801c69e <__ieee754_pow+0x14e>
 801cefa:	4c31      	ldr	r4, [pc, #196]	@ (801cfc0 <__ieee754_pow+0xa70>)
 801cefc:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 801cf00:	42a3      	cmp	r3, r4
 801cf02:	d91a      	bls.n	801cf3a <__ieee754_pow+0x9ea>
 801cf04:	4b2f      	ldr	r3, [pc, #188]	@ (801cfc4 <__ieee754_pow+0xa74>)
 801cf06:	440b      	add	r3, r1
 801cf08:	4303      	orrs	r3, r0
 801cf0a:	d009      	beq.n	801cf20 <__ieee754_pow+0x9d0>
 801cf0c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801cf10:	2200      	movs	r2, #0
 801cf12:	2300      	movs	r3, #0
 801cf14:	f7e3 fdf2 	bl	8000afc <__aeabi_dcmplt>
 801cf18:	3800      	subs	r0, #0
 801cf1a:	bf18      	it	ne
 801cf1c:	2001      	movne	r0, #1
 801cf1e:	e42b      	b.n	801c778 <__ieee754_pow+0x228>
 801cf20:	4642      	mov	r2, r8
 801cf22:	464b      	mov	r3, r9
 801cf24:	f7e3 f9c0 	bl	80002a8 <__aeabi_dsub>
 801cf28:	4632      	mov	r2, r6
 801cf2a:	463b      	mov	r3, r7
 801cf2c:	f7e3 fdfa 	bl	8000b24 <__aeabi_dcmpge>
 801cf30:	2800      	cmp	r0, #0
 801cf32:	d1eb      	bne.n	801cf0c <__ieee754_pow+0x9bc>
 801cf34:	f8df a09c 	ldr.w	sl, [pc, #156]	@ 801cfd4 <__ieee754_pow+0xa84>
 801cf38:	e6f7      	b.n	801cd2a <__ieee754_pow+0x7da>
 801cf3a:	469a      	mov	sl, r3
 801cf3c:	4b22      	ldr	r3, [pc, #136]	@ (801cfc8 <__ieee754_pow+0xa78>)
 801cf3e:	459a      	cmp	sl, r3
 801cf40:	f63f aef3 	bhi.w	801cd2a <__ieee754_pow+0x7da>
 801cf44:	f8dd a010 	ldr.w	sl, [sp, #16]
 801cf48:	e715      	b.n	801cd76 <__ieee754_pow+0x826>
 801cf4a:	ec51 0b10 	vmov	r0, r1, d0
 801cf4e:	4619      	mov	r1, r3
 801cf50:	e7cf      	b.n	801cef2 <__ieee754_pow+0x9a2>
 801cf52:	491a      	ldr	r1, [pc, #104]	@ (801cfbc <__ieee754_pow+0xa6c>)
 801cf54:	2000      	movs	r0, #0
 801cf56:	f7ff bb18 	b.w	801c58a <__ieee754_pow+0x3a>
 801cf5a:	2000      	movs	r0, #0
 801cf5c:	2100      	movs	r1, #0
 801cf5e:	f7ff bb14 	b.w	801c58a <__ieee754_pow+0x3a>
 801cf62:	4630      	mov	r0, r6
 801cf64:	4639      	mov	r1, r7
 801cf66:	f7ff bb10 	b.w	801c58a <__ieee754_pow+0x3a>
 801cf6a:	460c      	mov	r4, r1
 801cf6c:	f7ff bb5e 	b.w	801c62c <__ieee754_pow+0xdc>
 801cf70:	2400      	movs	r4, #0
 801cf72:	f7ff bb49 	b.w	801c608 <__ieee754_pow+0xb8>
 801cf76:	bf00      	nop
 801cf78:	00000000 	.word	0x00000000
 801cf7c:	3fe62e43 	.word	0x3fe62e43
 801cf80:	fefa39ef 	.word	0xfefa39ef
 801cf84:	3fe62e42 	.word	0x3fe62e42
 801cf88:	0ca86c39 	.word	0x0ca86c39
 801cf8c:	be205c61 	.word	0xbe205c61
 801cf90:	72bea4d0 	.word	0x72bea4d0
 801cf94:	3e663769 	.word	0x3e663769
 801cf98:	c5d26bf1 	.word	0xc5d26bf1
 801cf9c:	3ebbbd41 	.word	0x3ebbbd41
 801cfa0:	af25de2c 	.word	0xaf25de2c
 801cfa4:	3f11566a 	.word	0x3f11566a
 801cfa8:	16bebd93 	.word	0x16bebd93
 801cfac:	3f66c16c 	.word	0x3f66c16c
 801cfb0:	5555553e 	.word	0x5555553e
 801cfb4:	3fc55555 	.word	0x3fc55555
 801cfb8:	fff00000 	.word	0xfff00000
 801cfbc:	3ff00000 	.word	0x3ff00000
 801cfc0:	4090cbff 	.word	0x4090cbff
 801cfc4:	3f6f3400 	.word	0x3f6f3400
 801cfc8:	3fe00000 	.word	0x3fe00000
 801cfcc:	652b82fe 	.word	0x652b82fe
 801cfd0:	3c971547 	.word	0x3c971547
 801cfd4:	4090cc00 	.word	0x4090cc00

0801cfd8 <fabs>:
 801cfd8:	ec51 0b10 	vmov	r0, r1, d0
 801cfdc:	4602      	mov	r2, r0
 801cfde:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 801cfe2:	ec43 2b10 	vmov	d0, r2, r3
 801cfe6:	4770      	bx	lr

0801cfe8 <scalbn>:
 801cfe8:	b570      	push	{r4, r5, r6, lr}
 801cfea:	ec55 4b10 	vmov	r4, r5, d0
 801cfee:	f3c5 510a 	ubfx	r1, r5, #20, #11
 801cff2:	4606      	mov	r6, r0
 801cff4:	462b      	mov	r3, r5
 801cff6:	b991      	cbnz	r1, 801d01e <scalbn+0x36>
 801cff8:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 801cffc:	4323      	orrs	r3, r4
 801cffe:	d03d      	beq.n	801d07c <scalbn+0x94>
 801d000:	4b35      	ldr	r3, [pc, #212]	@ (801d0d8 <scalbn+0xf0>)
 801d002:	4620      	mov	r0, r4
 801d004:	4629      	mov	r1, r5
 801d006:	2200      	movs	r2, #0
 801d008:	f7e3 fb06 	bl	8000618 <__aeabi_dmul>
 801d00c:	4b33      	ldr	r3, [pc, #204]	@ (801d0dc <scalbn+0xf4>)
 801d00e:	429e      	cmp	r6, r3
 801d010:	4604      	mov	r4, r0
 801d012:	460d      	mov	r5, r1
 801d014:	da0f      	bge.n	801d036 <scalbn+0x4e>
 801d016:	a328      	add	r3, pc, #160	@ (adr r3, 801d0b8 <scalbn+0xd0>)
 801d018:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d01c:	e01e      	b.n	801d05c <scalbn+0x74>
 801d01e:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 801d022:	4291      	cmp	r1, r2
 801d024:	d10b      	bne.n	801d03e <scalbn+0x56>
 801d026:	4622      	mov	r2, r4
 801d028:	4620      	mov	r0, r4
 801d02a:	4629      	mov	r1, r5
 801d02c:	f7e3 f93e 	bl	80002ac <__adddf3>
 801d030:	4604      	mov	r4, r0
 801d032:	460d      	mov	r5, r1
 801d034:	e022      	b.n	801d07c <scalbn+0x94>
 801d036:	460b      	mov	r3, r1
 801d038:	f3c1 510a 	ubfx	r1, r1, #20, #11
 801d03c:	3936      	subs	r1, #54	@ 0x36
 801d03e:	f24c 3250 	movw	r2, #50000	@ 0xc350
 801d042:	4296      	cmp	r6, r2
 801d044:	dd0d      	ble.n	801d062 <scalbn+0x7a>
 801d046:	2d00      	cmp	r5, #0
 801d048:	a11d      	add	r1, pc, #116	@ (adr r1, 801d0c0 <scalbn+0xd8>)
 801d04a:	e9d1 0100 	ldrd	r0, r1, [r1]
 801d04e:	da02      	bge.n	801d056 <scalbn+0x6e>
 801d050:	a11d      	add	r1, pc, #116	@ (adr r1, 801d0c8 <scalbn+0xe0>)
 801d052:	e9d1 0100 	ldrd	r0, r1, [r1]
 801d056:	a31a      	add	r3, pc, #104	@ (adr r3, 801d0c0 <scalbn+0xd8>)
 801d058:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d05c:	f7e3 fadc 	bl	8000618 <__aeabi_dmul>
 801d060:	e7e6      	b.n	801d030 <scalbn+0x48>
 801d062:	1872      	adds	r2, r6, r1
 801d064:	f240 71fe 	movw	r1, #2046	@ 0x7fe
 801d068:	428a      	cmp	r2, r1
 801d06a:	dcec      	bgt.n	801d046 <scalbn+0x5e>
 801d06c:	2a00      	cmp	r2, #0
 801d06e:	dd08      	ble.n	801d082 <scalbn+0x9a>
 801d070:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 801d074:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 801d078:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 801d07c:	ec45 4b10 	vmov	d0, r4, r5
 801d080:	bd70      	pop	{r4, r5, r6, pc}
 801d082:	f112 0f35 	cmn.w	r2, #53	@ 0x35
 801d086:	da08      	bge.n	801d09a <scalbn+0xb2>
 801d088:	2d00      	cmp	r5, #0
 801d08a:	a10b      	add	r1, pc, #44	@ (adr r1, 801d0b8 <scalbn+0xd0>)
 801d08c:	e9d1 0100 	ldrd	r0, r1, [r1]
 801d090:	dac1      	bge.n	801d016 <scalbn+0x2e>
 801d092:	a10f      	add	r1, pc, #60	@ (adr r1, 801d0d0 <scalbn+0xe8>)
 801d094:	e9d1 0100 	ldrd	r0, r1, [r1]
 801d098:	e7bd      	b.n	801d016 <scalbn+0x2e>
 801d09a:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 801d09e:	3236      	adds	r2, #54	@ 0x36
 801d0a0:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 801d0a4:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 801d0a8:	4620      	mov	r0, r4
 801d0aa:	4b0d      	ldr	r3, [pc, #52]	@ (801d0e0 <scalbn+0xf8>)
 801d0ac:	4629      	mov	r1, r5
 801d0ae:	2200      	movs	r2, #0
 801d0b0:	e7d4      	b.n	801d05c <scalbn+0x74>
 801d0b2:	bf00      	nop
 801d0b4:	f3af 8000 	nop.w
 801d0b8:	c2f8f359 	.word	0xc2f8f359
 801d0bc:	01a56e1f 	.word	0x01a56e1f
 801d0c0:	8800759c 	.word	0x8800759c
 801d0c4:	7e37e43c 	.word	0x7e37e43c
 801d0c8:	8800759c 	.word	0x8800759c
 801d0cc:	fe37e43c 	.word	0xfe37e43c
 801d0d0:	c2f8f359 	.word	0xc2f8f359
 801d0d4:	81a56e1f 	.word	0x81a56e1f
 801d0d8:	43500000 	.word	0x43500000
 801d0dc:	ffff3cb0 	.word	0xffff3cb0
 801d0e0:	3c900000 	.word	0x3c900000

0801d0e4 <with_errno>:
 801d0e4:	b510      	push	{r4, lr}
 801d0e6:	ed2d 8b02 	vpush	{d8}
 801d0ea:	eeb0 8a40 	vmov.f32	s16, s0
 801d0ee:	eef0 8a60 	vmov.f32	s17, s1
 801d0f2:	4604      	mov	r4, r0
 801d0f4:	f7fe fae4 	bl	801b6c0 <__errno>
 801d0f8:	eeb0 0a48 	vmov.f32	s0, s16
 801d0fc:	eef0 0a68 	vmov.f32	s1, s17
 801d100:	ecbd 8b02 	vpop	{d8}
 801d104:	6004      	str	r4, [r0, #0]
 801d106:	bd10      	pop	{r4, pc}

0801d108 <xflow>:
 801d108:	4603      	mov	r3, r0
 801d10a:	b507      	push	{r0, r1, r2, lr}
 801d10c:	ec51 0b10 	vmov	r0, r1, d0
 801d110:	b183      	cbz	r3, 801d134 <xflow+0x2c>
 801d112:	4602      	mov	r2, r0
 801d114:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 801d118:	e9cd 2300 	strd	r2, r3, [sp]
 801d11c:	e9dd 2300 	ldrd	r2, r3, [sp]
 801d120:	f7e3 fa7a 	bl	8000618 <__aeabi_dmul>
 801d124:	ec41 0b10 	vmov	d0, r0, r1
 801d128:	2022      	movs	r0, #34	@ 0x22
 801d12a:	b003      	add	sp, #12
 801d12c:	f85d eb04 	ldr.w	lr, [sp], #4
 801d130:	f7ff bfd8 	b.w	801d0e4 <with_errno>
 801d134:	4602      	mov	r2, r0
 801d136:	460b      	mov	r3, r1
 801d138:	e7ee      	b.n	801d118 <xflow+0x10>
 801d13a:	0000      	movs	r0, r0
 801d13c:	0000      	movs	r0, r0
	...

0801d140 <__math_uflow>:
 801d140:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 801d148 <__math_uflow+0x8>
 801d144:	f7ff bfe0 	b.w	801d108 <xflow>
 801d148:	00000000 	.word	0x00000000
 801d14c:	10000000 	.word	0x10000000

0801d150 <__math_oflow>:
 801d150:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 801d158 <__math_oflow+0x8>
 801d154:	f7ff bfd8 	b.w	801d108 <xflow>
 801d158:	00000000 	.word	0x00000000
 801d15c:	70000000 	.word	0x70000000

0801d160 <__ieee754_sqrt>:
 801d160:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d164:	4a68      	ldr	r2, [pc, #416]	@ (801d308 <__ieee754_sqrt+0x1a8>)
 801d166:	ec55 4b10 	vmov	r4, r5, d0
 801d16a:	43aa      	bics	r2, r5
 801d16c:	462b      	mov	r3, r5
 801d16e:	4621      	mov	r1, r4
 801d170:	d110      	bne.n	801d194 <__ieee754_sqrt+0x34>
 801d172:	4622      	mov	r2, r4
 801d174:	4620      	mov	r0, r4
 801d176:	4629      	mov	r1, r5
 801d178:	f7e3 fa4e 	bl	8000618 <__aeabi_dmul>
 801d17c:	4602      	mov	r2, r0
 801d17e:	460b      	mov	r3, r1
 801d180:	4620      	mov	r0, r4
 801d182:	4629      	mov	r1, r5
 801d184:	f7e3 f892 	bl	80002ac <__adddf3>
 801d188:	4604      	mov	r4, r0
 801d18a:	460d      	mov	r5, r1
 801d18c:	ec45 4b10 	vmov	d0, r4, r5
 801d190:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d194:	2d00      	cmp	r5, #0
 801d196:	dc0e      	bgt.n	801d1b6 <__ieee754_sqrt+0x56>
 801d198:	f025 4200 	bic.w	r2, r5, #2147483648	@ 0x80000000
 801d19c:	4322      	orrs	r2, r4
 801d19e:	d0f5      	beq.n	801d18c <__ieee754_sqrt+0x2c>
 801d1a0:	b19d      	cbz	r5, 801d1ca <__ieee754_sqrt+0x6a>
 801d1a2:	4622      	mov	r2, r4
 801d1a4:	4620      	mov	r0, r4
 801d1a6:	4629      	mov	r1, r5
 801d1a8:	f7e3 f87e 	bl	80002a8 <__aeabi_dsub>
 801d1ac:	4602      	mov	r2, r0
 801d1ae:	460b      	mov	r3, r1
 801d1b0:	f7e3 fb5c 	bl	800086c <__aeabi_ddiv>
 801d1b4:	e7e8      	b.n	801d188 <__ieee754_sqrt+0x28>
 801d1b6:	152a      	asrs	r2, r5, #20
 801d1b8:	d115      	bne.n	801d1e6 <__ieee754_sqrt+0x86>
 801d1ba:	2000      	movs	r0, #0
 801d1bc:	e009      	b.n	801d1d2 <__ieee754_sqrt+0x72>
 801d1be:	0acb      	lsrs	r3, r1, #11
 801d1c0:	3a15      	subs	r2, #21
 801d1c2:	0549      	lsls	r1, r1, #21
 801d1c4:	2b00      	cmp	r3, #0
 801d1c6:	d0fa      	beq.n	801d1be <__ieee754_sqrt+0x5e>
 801d1c8:	e7f7      	b.n	801d1ba <__ieee754_sqrt+0x5a>
 801d1ca:	462a      	mov	r2, r5
 801d1cc:	e7fa      	b.n	801d1c4 <__ieee754_sqrt+0x64>
 801d1ce:	005b      	lsls	r3, r3, #1
 801d1d0:	3001      	adds	r0, #1
 801d1d2:	02dc      	lsls	r4, r3, #11
 801d1d4:	d5fb      	bpl.n	801d1ce <__ieee754_sqrt+0x6e>
 801d1d6:	1e44      	subs	r4, r0, #1
 801d1d8:	1b12      	subs	r2, r2, r4
 801d1da:	f1c0 0420 	rsb	r4, r0, #32
 801d1de:	fa21 f404 	lsr.w	r4, r1, r4
 801d1e2:	4323      	orrs	r3, r4
 801d1e4:	4081      	lsls	r1, r0
 801d1e6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 801d1ea:	f2a2 35ff 	subw	r5, r2, #1023	@ 0x3ff
 801d1ee:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 801d1f2:	07d2      	lsls	r2, r2, #31
 801d1f4:	bf5c      	itt	pl
 801d1f6:	005b      	lslpl	r3, r3, #1
 801d1f8:	eb03 73d1 	addpl.w	r3, r3, r1, lsr #31
 801d1fc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 801d200:	bf58      	it	pl
 801d202:	0049      	lslpl	r1, r1, #1
 801d204:	2600      	movs	r6, #0
 801d206:	eb03 73d1 	add.w	r3, r3, r1, lsr #31
 801d20a:	106d      	asrs	r5, r5, #1
 801d20c:	0049      	lsls	r1, r1, #1
 801d20e:	2016      	movs	r0, #22
 801d210:	4632      	mov	r2, r6
 801d212:	f44f 1400 	mov.w	r4, #2097152	@ 0x200000
 801d216:	1917      	adds	r7, r2, r4
 801d218:	429f      	cmp	r7, r3
 801d21a:	bfde      	ittt	le
 801d21c:	193a      	addle	r2, r7, r4
 801d21e:	1bdb      	suble	r3, r3, r7
 801d220:	1936      	addle	r6, r6, r4
 801d222:	0fcf      	lsrs	r7, r1, #31
 801d224:	3801      	subs	r0, #1
 801d226:	eb07 0343 	add.w	r3, r7, r3, lsl #1
 801d22a:	ea4f 0141 	mov.w	r1, r1, lsl #1
 801d22e:	ea4f 0454 	mov.w	r4, r4, lsr #1
 801d232:	d1f0      	bne.n	801d216 <__ieee754_sqrt+0xb6>
 801d234:	4604      	mov	r4, r0
 801d236:	2720      	movs	r7, #32
 801d238:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 801d23c:	429a      	cmp	r2, r3
 801d23e:	eb00 0e0c 	add.w	lr, r0, ip
 801d242:	db02      	blt.n	801d24a <__ieee754_sqrt+0xea>
 801d244:	d113      	bne.n	801d26e <__ieee754_sqrt+0x10e>
 801d246:	458e      	cmp	lr, r1
 801d248:	d811      	bhi.n	801d26e <__ieee754_sqrt+0x10e>
 801d24a:	f1be 0f00 	cmp.w	lr, #0
 801d24e:	eb0e 000c 	add.w	r0, lr, ip
 801d252:	da42      	bge.n	801d2da <__ieee754_sqrt+0x17a>
 801d254:	2800      	cmp	r0, #0
 801d256:	db40      	blt.n	801d2da <__ieee754_sqrt+0x17a>
 801d258:	f102 0801 	add.w	r8, r2, #1
 801d25c:	1a9b      	subs	r3, r3, r2
 801d25e:	458e      	cmp	lr, r1
 801d260:	bf88      	it	hi
 801d262:	f103 33ff 	addhi.w	r3, r3, #4294967295	@ 0xffffffff
 801d266:	eba1 010e 	sub.w	r1, r1, lr
 801d26a:	4464      	add	r4, ip
 801d26c:	4642      	mov	r2, r8
 801d26e:	ea4f 7ed1 	mov.w	lr, r1, lsr #31
 801d272:	3f01      	subs	r7, #1
 801d274:	eb0e 0343 	add.w	r3, lr, r3, lsl #1
 801d278:	ea4f 0141 	mov.w	r1, r1, lsl #1
 801d27c:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 801d280:	d1dc      	bne.n	801d23c <__ieee754_sqrt+0xdc>
 801d282:	4319      	orrs	r1, r3
 801d284:	d01b      	beq.n	801d2be <__ieee754_sqrt+0x15e>
 801d286:	f8df a084 	ldr.w	sl, [pc, #132]	@ 801d30c <__ieee754_sqrt+0x1ac>
 801d28a:	f8df b084 	ldr.w	fp, [pc, #132]	@ 801d310 <__ieee754_sqrt+0x1b0>
 801d28e:	e9da 0100 	ldrd	r0, r1, [sl]
 801d292:	e9db 2300 	ldrd	r2, r3, [fp]
 801d296:	f7e3 f807 	bl	80002a8 <__aeabi_dsub>
 801d29a:	e9da 8900 	ldrd	r8, r9, [sl]
 801d29e:	4602      	mov	r2, r0
 801d2a0:	460b      	mov	r3, r1
 801d2a2:	4640      	mov	r0, r8
 801d2a4:	4649      	mov	r1, r9
 801d2a6:	f7e3 fc33 	bl	8000b10 <__aeabi_dcmple>
 801d2aa:	b140      	cbz	r0, 801d2be <__ieee754_sqrt+0x15e>
 801d2ac:	f1b4 3fff 	cmp.w	r4, #4294967295	@ 0xffffffff
 801d2b0:	e9da 0100 	ldrd	r0, r1, [sl]
 801d2b4:	e9db 2300 	ldrd	r2, r3, [fp]
 801d2b8:	d111      	bne.n	801d2de <__ieee754_sqrt+0x17e>
 801d2ba:	3601      	adds	r6, #1
 801d2bc:	463c      	mov	r4, r7
 801d2be:	1072      	asrs	r2, r6, #1
 801d2c0:	0863      	lsrs	r3, r4, #1
 801d2c2:	07f1      	lsls	r1, r6, #31
 801d2c4:	f102 527f 	add.w	r2, r2, #1069547520	@ 0x3fc00000
 801d2c8:	f502 1200 	add.w	r2, r2, #2097152	@ 0x200000
 801d2cc:	bf48      	it	mi
 801d2ce:	f043 4300 	orrmi.w	r3, r3, #2147483648	@ 0x80000000
 801d2d2:	eb02 5105 	add.w	r1, r2, r5, lsl #20
 801d2d6:	4618      	mov	r0, r3
 801d2d8:	e756      	b.n	801d188 <__ieee754_sqrt+0x28>
 801d2da:	4690      	mov	r8, r2
 801d2dc:	e7be      	b.n	801d25c <__ieee754_sqrt+0xfc>
 801d2de:	f7e2 ffe5 	bl	80002ac <__adddf3>
 801d2e2:	e9da 8900 	ldrd	r8, r9, [sl]
 801d2e6:	4602      	mov	r2, r0
 801d2e8:	460b      	mov	r3, r1
 801d2ea:	4640      	mov	r0, r8
 801d2ec:	4649      	mov	r1, r9
 801d2ee:	f7e3 fc05 	bl	8000afc <__aeabi_dcmplt>
 801d2f2:	b120      	cbz	r0, 801d2fe <__ieee754_sqrt+0x19e>
 801d2f4:	1ca0      	adds	r0, r4, #2
 801d2f6:	bf08      	it	eq
 801d2f8:	3601      	addeq	r6, #1
 801d2fa:	3402      	adds	r4, #2
 801d2fc:	e7df      	b.n	801d2be <__ieee754_sqrt+0x15e>
 801d2fe:	1c63      	adds	r3, r4, #1
 801d300:	f023 0401 	bic.w	r4, r3, #1
 801d304:	e7db      	b.n	801d2be <__ieee754_sqrt+0x15e>
 801d306:	bf00      	nop
 801d308:	7ff00000 	.word	0x7ff00000
 801d30c:	20000308 	.word	0x20000308
 801d310:	20000300 	.word	0x20000300

0801d314 <_init>:
 801d314:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801d316:	bf00      	nop
 801d318:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801d31a:	bc08      	pop	{r3}
 801d31c:	469e      	mov	lr, r3
 801d31e:	4770      	bx	lr

0801d320 <_fini>:
 801d320:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801d322:	bf00      	nop
 801d324:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801d326:	bc08      	pop	{r3}
 801d328:	469e      	mov	lr, r3
 801d32a:	4770      	bx	lr
