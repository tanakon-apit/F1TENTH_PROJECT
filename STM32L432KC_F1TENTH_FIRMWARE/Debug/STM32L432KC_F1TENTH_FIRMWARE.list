
STM32L432KC_F1TENTH_FIRMWARE.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001ab20  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000c70  0801acb0  0801acb0  0001bcb0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801b920  0801b920  0001d154  2**0
                  CONTENTS
  4 .ARM          00000008  0801b920  0801b920  0001c920  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801b928  0801b928  0001d154  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801b928  0801b928  0001c928  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0801b92c  0801b92c  0001c92c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000154  20000000  0801b930  0001d000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000c0b0  20000158  0801ba84  0001d158  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  2000c208  0801ba84  0001d208  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0001d154  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002a113  00000000  00000000  0001d184  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00005c03  00000000  00000000  00047297  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001e70  00000000  00000000  0004cea0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  000290de  00000000  00000000  0004ed10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   000288ad  00000000  00000000  00077dee  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    000e2e50  00000000  00000000  000a069b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .comment      0000009c  00000000  00000000  001834eb  2**0
                  CONTENTS, READONLY
 19 .debug_rnglists 00001775  00000000  00000000  00183587  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00008d64  00000000  00000000  00184cfc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000071  00000000  00000000  0018da60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000158 	.word	0x20000158
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0801ac98 	.word	0x0801ac98

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000015c 	.word	0x2000015c
 80001cc:	0801ac98 	.word	0x0801ac98

080001d0 <strcmp>:
 80001d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d8:	2a01      	cmp	r2, #1
 80001da:	bf28      	it	cs
 80001dc:	429a      	cmpcs	r2, r3
 80001de:	d0f7      	beq.n	80001d0 <strcmp>
 80001e0:	1ad0      	subs	r0, r2, r3
 80001e2:	4770      	bx	lr

080001e4 <strlen>:
 80001e4:	4603      	mov	r3, r0
 80001e6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ea:	2a00      	cmp	r2, #0
 80001ec:	d1fb      	bne.n	80001e6 <strlen+0x2>
 80001ee:	1a18      	subs	r0, r3, r0
 80001f0:	3801      	subs	r0, #1
 80001f2:	4770      	bx	lr
	...

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	@ 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	3c01      	subs	r4, #1
 80003dc:	bf28      	it	cs
 80003de:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003e2:	d2e9      	bcs.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_dmul>:
 8000618:	b570      	push	{r4, r5, r6, lr}
 800061a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800061e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000622:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000626:	bf1d      	ittte	ne
 8000628:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800062c:	ea94 0f0c 	teqne	r4, ip
 8000630:	ea95 0f0c 	teqne	r5, ip
 8000634:	f000 f8de 	bleq	80007f4 <__aeabi_dmul+0x1dc>
 8000638:	442c      	add	r4, r5
 800063a:	ea81 0603 	eor.w	r6, r1, r3
 800063e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000642:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000646:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800064a:	bf18      	it	ne
 800064c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000654:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000658:	d038      	beq.n	80006cc <__aeabi_dmul+0xb4>
 800065a:	fba0 ce02 	umull	ip, lr, r0, r2
 800065e:	f04f 0500 	mov.w	r5, #0
 8000662:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000666:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800066a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800066e:	f04f 0600 	mov.w	r6, #0
 8000672:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000676:	f09c 0f00 	teq	ip, #0
 800067a:	bf18      	it	ne
 800067c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000680:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000684:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000688:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800068c:	d204      	bcs.n	8000698 <__aeabi_dmul+0x80>
 800068e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000692:	416d      	adcs	r5, r5
 8000694:	eb46 0606 	adc.w	r6, r6, r6
 8000698:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800069c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ac:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006b0:	bf88      	it	hi
 80006b2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006b6:	d81e      	bhi.n	80006f6 <__aeabi_dmul+0xde>
 80006b8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006bc:	bf08      	it	eq
 80006be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006c2:	f150 0000 	adcs.w	r0, r0, #0
 80006c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006d0:	ea46 0101 	orr.w	r1, r6, r1
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	ea81 0103 	eor.w	r1, r1, r3
 80006dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e0:	bfc2      	ittt	gt
 80006e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	popgt	{r4, r5, r6, pc}
 80006ec:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006f0:	f04f 0e00 	mov.w	lr, #0
 80006f4:	3c01      	subs	r4, #1
 80006f6:	f300 80ab 	bgt.w	8000850 <__aeabi_dmul+0x238>
 80006fa:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006fe:	bfde      	ittt	le
 8000700:	2000      	movle	r0, #0
 8000702:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000706:	bd70      	pople	{r4, r5, r6, pc}
 8000708:	f1c4 0400 	rsb	r4, r4, #0
 800070c:	3c20      	subs	r4, #32
 800070e:	da35      	bge.n	800077c <__aeabi_dmul+0x164>
 8000710:	340c      	adds	r4, #12
 8000712:	dc1b      	bgt.n	800074c <__aeabi_dmul+0x134>
 8000714:	f104 0414 	add.w	r4, r4, #20
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f305 	lsl.w	r3, r0, r5
 8000720:	fa20 f004 	lsr.w	r0, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000734:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000738:	fa21 f604 	lsr.w	r6, r1, r4
 800073c:	eb42 0106 	adc.w	r1, r2, r6
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 040c 	rsb	r4, r4, #12
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f304 	lsl.w	r3, r0, r4
 8000758:	fa20 f005 	lsr.w	r0, r0, r5
 800075c:	fa01 f204 	lsl.w	r2, r1, r4
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800076c:	f141 0100 	adc.w	r1, r1, #0
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 0520 	rsb	r5, r4, #32
 8000780:	fa00 f205 	lsl.w	r2, r0, r5
 8000784:	ea4e 0e02 	orr.w	lr, lr, r2
 8000788:	fa20 f304 	lsr.w	r3, r0, r4
 800078c:	fa01 f205 	lsl.w	r2, r1, r5
 8000790:	ea43 0302 	orr.w	r3, r3, r2
 8000794:	fa21 f004 	lsr.w	r0, r1, r4
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800079c:	fa21 f204 	lsr.w	r2, r1, r4
 80007a0:	ea20 0002 	bic.w	r0, r0, r2
 80007a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f094 0f00 	teq	r4, #0
 80007b8:	d10f      	bne.n	80007da <__aeabi_dmul+0x1c2>
 80007ba:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007be:	0040      	lsls	r0, r0, #1
 80007c0:	eb41 0101 	adc.w	r1, r1, r1
 80007c4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3c01      	subeq	r4, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1a6>
 80007ce:	ea41 0106 	orr.w	r1, r1, r6
 80007d2:	f095 0f00 	teq	r5, #0
 80007d6:	bf18      	it	ne
 80007d8:	4770      	bxne	lr
 80007da:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007de:	0052      	lsls	r2, r2, #1
 80007e0:	eb43 0303 	adc.w	r3, r3, r3
 80007e4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3d01      	subeq	r5, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1c6>
 80007ee:	ea43 0306 	orr.w	r3, r3, r6
 80007f2:	4770      	bx	lr
 80007f4:	ea94 0f0c 	teq	r4, ip
 80007f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007fc:	bf18      	it	ne
 80007fe:	ea95 0f0c 	teqne	r5, ip
 8000802:	d00c      	beq.n	800081e <__aeabi_dmul+0x206>
 8000804:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080e:	d1d1      	bne.n	80007b4 <__aeabi_dmul+0x19c>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000818:	f04f 0000 	mov.w	r0, #0
 800081c:	bd70      	pop	{r4, r5, r6, pc}
 800081e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000822:	bf06      	itte	eq
 8000824:	4610      	moveq	r0, r2
 8000826:	4619      	moveq	r1, r3
 8000828:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082c:	d019      	beq.n	8000862 <__aeabi_dmul+0x24a>
 800082e:	ea94 0f0c 	teq	r4, ip
 8000832:	d102      	bne.n	800083a <__aeabi_dmul+0x222>
 8000834:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000838:	d113      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800083a:	ea95 0f0c 	teq	r5, ip
 800083e:	d105      	bne.n	800084c <__aeabi_dmul+0x234>
 8000840:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000844:	bf1c      	itt	ne
 8000846:	4610      	movne	r0, r2
 8000848:	4619      	movne	r1, r3
 800084a:	d10a      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800084c:	ea81 0103 	eor.w	r1, r1, r3
 8000850:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000854:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000858:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	bd70      	pop	{r4, r5, r6, pc}
 8000862:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000866:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800086a:	bd70      	pop	{r4, r5, r6, pc}

0800086c <__aeabi_ddiv>:
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000872:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000876:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800087a:	bf1d      	ittte	ne
 800087c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000880:	ea94 0f0c 	teqne	r4, ip
 8000884:	ea95 0f0c 	teqne	r5, ip
 8000888:	f000 f8a7 	bleq	80009da <__aeabi_ddiv+0x16e>
 800088c:	eba4 0405 	sub.w	r4, r4, r5
 8000890:	ea81 0e03 	eor.w	lr, r1, r3
 8000894:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000898:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800089c:	f000 8088 	beq.w	80009b0 <__aeabi_ddiv+0x144>
 80008a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008c4:	429d      	cmp	r5, r3
 80008c6:	bf08      	it	eq
 80008c8:	4296      	cmpeq	r6, r2
 80008ca:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ce:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008d2:	d202      	bcs.n	80008da <__aeabi_ddiv+0x6e>
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	1ab6      	subs	r6, r6, r2
 80008dc:	eb65 0503 	sbc.w	r5, r5, r3
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ea:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000948:	ea55 0e06 	orrs.w	lr, r5, r6
 800094c:	d018      	beq.n	8000980 <__aeabi_ddiv+0x114>
 800094e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000952:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000956:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800095a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800095e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000962:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000966:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800096a:	d1c0      	bne.n	80008ee <__aeabi_ddiv+0x82>
 800096c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000970:	d10b      	bne.n	800098a <__aeabi_ddiv+0x11e>
 8000972:	ea41 0100 	orr.w	r1, r1, r0
 8000976:	f04f 0000 	mov.w	r0, #0
 800097a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800097e:	e7b6      	b.n	80008ee <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000984:	bf04      	itt	eq
 8000986:	4301      	orreq	r1, r0
 8000988:	2000      	moveq	r0, #0
 800098a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800098e:	bf88      	it	hi
 8000990:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000994:	f63f aeaf 	bhi.w	80006f6 <__aeabi_dmul+0xde>
 8000998:	ebb5 0c03 	subs.w	ip, r5, r3
 800099c:	bf04      	itt	eq
 800099e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009a6:	f150 0000 	adcs.w	r0, r0, #0
 80009aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	pop	{r4, r5, r6, pc}
 80009b0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009bc:	bfc2      	ittt	gt
 80009be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	popgt	{r4, r5, r6, pc}
 80009c8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009cc:	f04f 0e00 	mov.w	lr, #0
 80009d0:	3c01      	subs	r4, #1
 80009d2:	e690      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009d4:	ea45 0e06 	orr.w	lr, r5, r6
 80009d8:	e68d      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009de:	ea94 0f0c 	teq	r4, ip
 80009e2:	bf08      	it	eq
 80009e4:	ea95 0f0c 	teqeq	r5, ip
 80009e8:	f43f af3b 	beq.w	8000862 <__aeabi_dmul+0x24a>
 80009ec:	ea94 0f0c 	teq	r4, ip
 80009f0:	d10a      	bne.n	8000a08 <__aeabi_ddiv+0x19c>
 80009f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009f6:	f47f af34 	bne.w	8000862 <__aeabi_dmul+0x24a>
 80009fa:	ea95 0f0c 	teq	r5, ip
 80009fe:	f47f af25 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a02:	4610      	mov	r0, r2
 8000a04:	4619      	mov	r1, r3
 8000a06:	e72c      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a08:	ea95 0f0c 	teq	r5, ip
 8000a0c:	d106      	bne.n	8000a1c <__aeabi_ddiv+0x1b0>
 8000a0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a12:	f43f aefd 	beq.w	8000810 <__aeabi_dmul+0x1f8>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e722      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a20:	bf18      	it	ne
 8000a22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a26:	f47f aec5 	bne.w	80007b4 <__aeabi_dmul+0x19c>
 8000a2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a2e:	f47f af0d 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a36:	f47f aeeb 	bne.w	8000810 <__aeabi_dmul+0x1f8>
 8000a3a:	e712      	b.n	8000862 <__aeabi_dmul+0x24a>

08000a3c <__gedf2>:
 8000a3c:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 8000a40:	e006      	b.n	8000a50 <__cmpdf2+0x4>
 8000a42:	bf00      	nop

08000a44 <__ledf2>:
 8000a44:	f04f 0c01 	mov.w	ip, #1
 8000a48:	e002      	b.n	8000a50 <__cmpdf2+0x4>
 8000a4a:	bf00      	nop

08000a4c <__cmpdf2>:
 8000a4c:	f04f 0c01 	mov.w	ip, #1
 8000a50:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a66:	d01b      	beq.n	8000aa0 <__cmpdf2+0x54>
 8000a68:	b001      	add	sp, #4
 8000a6a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a6e:	bf0c      	ite	eq
 8000a70:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a74:	ea91 0f03 	teqne	r1, r3
 8000a78:	bf02      	ittt	eq
 8000a7a:	ea90 0f02 	teqeq	r0, r2
 8000a7e:	2000      	moveq	r0, #0
 8000a80:	4770      	bxeq	lr
 8000a82:	f110 0f00 	cmn.w	r0, #0
 8000a86:	ea91 0f03 	teq	r1, r3
 8000a8a:	bf58      	it	pl
 8000a8c:	4299      	cmppl	r1, r3
 8000a8e:	bf08      	it	eq
 8000a90:	4290      	cmpeq	r0, r2
 8000a92:	bf2c      	ite	cs
 8000a94:	17d8      	asrcs	r0, r3, #31
 8000a96:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a9a:	f040 0001 	orr.w	r0, r0, #1
 8000a9e:	4770      	bx	lr
 8000aa0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d102      	bne.n	8000ab0 <__cmpdf2+0x64>
 8000aaa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aae:	d107      	bne.n	8000ac0 <__cmpdf2+0x74>
 8000ab0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d1d6      	bne.n	8000a68 <__cmpdf2+0x1c>
 8000aba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000abe:	d0d3      	beq.n	8000a68 <__cmpdf2+0x1c>
 8000ac0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdrcmple>:
 8000ac8:	4684      	mov	ip, r0
 8000aca:	4610      	mov	r0, r2
 8000acc:	4662      	mov	r2, ip
 8000ace:	468c      	mov	ip, r1
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4663      	mov	r3, ip
 8000ad4:	e000      	b.n	8000ad8 <__aeabi_cdcmpeq>
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdcmpeq>:
 8000ad8:	b501      	push	{r0, lr}
 8000ada:	f7ff ffb7 	bl	8000a4c <__cmpdf2>
 8000ade:	2800      	cmp	r0, #0
 8000ae0:	bf48      	it	mi
 8000ae2:	f110 0f00 	cmnmi.w	r0, #0
 8000ae6:	bd01      	pop	{r0, pc}

08000ae8 <__aeabi_dcmpeq>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff fff4 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000af0:	bf0c      	ite	eq
 8000af2:	2001      	moveq	r0, #1
 8000af4:	2000      	movne	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmplt>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffea 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b04:	bf34      	ite	cc
 8000b06:	2001      	movcc	r0, #1
 8000b08:	2000      	movcs	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmple>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffe0 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b18:	bf94      	ite	ls
 8000b1a:	2001      	movls	r0, #1
 8000b1c:	2000      	movhi	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmpge>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffce 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b2c:	bf94      	ite	ls
 8000b2e:	2001      	movls	r0, #1
 8000b30:	2000      	movhi	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmpgt>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffc4 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b40:	bf34      	ite	cc
 8000b42:	2001      	movcc	r0, #1
 8000b44:	2000      	movcs	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_d2uiz>:
 8000b4c:	004a      	lsls	r2, r1, #1
 8000b4e:	d211      	bcs.n	8000b74 <__aeabi_d2uiz+0x28>
 8000b50:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b54:	d211      	bcs.n	8000b7a <__aeabi_d2uiz+0x2e>
 8000b56:	d50d      	bpl.n	8000b74 <__aeabi_d2uiz+0x28>
 8000b58:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b5c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b60:	d40e      	bmi.n	8000b80 <__aeabi_d2uiz+0x34>
 8000b62:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b66:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b6a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b6e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b72:	4770      	bx	lr
 8000b74:	f04f 0000 	mov.w	r0, #0
 8000b78:	4770      	bx	lr
 8000b7a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b7e:	d102      	bne.n	8000b86 <__aeabi_d2uiz+0x3a>
 8000b80:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000b84:	4770      	bx	lr
 8000b86:	f04f 0000 	mov.w	r0, #0
 8000b8a:	4770      	bx	lr

08000b8c <__aeabi_d2f>:
 8000b8c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b90:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000b94:	bf24      	itt	cs
 8000b96:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000b9a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000b9e:	d90d      	bls.n	8000bbc <__aeabi_d2f+0x30>
 8000ba0:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000ba4:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ba8:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bac:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000bb0:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bb4:	bf08      	it	eq
 8000bb6:	f020 0001 	biceq.w	r0, r0, #1
 8000bba:	4770      	bx	lr
 8000bbc:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000bc0:	d121      	bne.n	8000c06 <__aeabi_d2f+0x7a>
 8000bc2:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000bc6:	bfbc      	itt	lt
 8000bc8:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000bcc:	4770      	bxlt	lr
 8000bce:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000bd2:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bd6:	f1c2 0218 	rsb	r2, r2, #24
 8000bda:	f1c2 0c20 	rsb	ip, r2, #32
 8000bde:	fa10 f30c 	lsls.w	r3, r0, ip
 8000be2:	fa20 f002 	lsr.w	r0, r0, r2
 8000be6:	bf18      	it	ne
 8000be8:	f040 0001 	orrne.w	r0, r0, #1
 8000bec:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bf0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000bf4:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000bf8:	ea40 000c 	orr.w	r0, r0, ip
 8000bfc:	fa23 f302 	lsr.w	r3, r3, r2
 8000c00:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c04:	e7cc      	b.n	8000ba0 <__aeabi_d2f+0x14>
 8000c06:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c0a:	d107      	bne.n	8000c1c <__aeabi_d2f+0x90>
 8000c0c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c10:	bf1e      	ittt	ne
 8000c12:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c16:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c1a:	4770      	bxne	lr
 8000c1c:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c20:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c24:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c28:	4770      	bx	lr
 8000c2a:	bf00      	nop

08000c2c <__aeabi_ldivmod>:
 8000c2c:	b97b      	cbnz	r3, 8000c4e <__aeabi_ldivmod+0x22>
 8000c2e:	b972      	cbnz	r2, 8000c4e <__aeabi_ldivmod+0x22>
 8000c30:	2900      	cmp	r1, #0
 8000c32:	bfbe      	ittt	lt
 8000c34:	2000      	movlt	r0, #0
 8000c36:	f04f 4100 	movlt.w	r1, #2147483648	@ 0x80000000
 8000c3a:	e006      	blt.n	8000c4a <__aeabi_ldivmod+0x1e>
 8000c3c:	bf08      	it	eq
 8000c3e:	2800      	cmpeq	r0, #0
 8000c40:	bf1c      	itt	ne
 8000c42:	f06f 4100 	mvnne.w	r1, #2147483648	@ 0x80000000
 8000c46:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000c4a:	f000 b9b5 	b.w	8000fb8 <__aeabi_idiv0>
 8000c4e:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c52:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c56:	2900      	cmp	r1, #0
 8000c58:	db09      	blt.n	8000c6e <__aeabi_ldivmod+0x42>
 8000c5a:	2b00      	cmp	r3, #0
 8000c5c:	db1a      	blt.n	8000c94 <__aeabi_ldivmod+0x68>
 8000c5e:	f000 f84d 	bl	8000cfc <__udivmoddi4>
 8000c62:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c66:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c6a:	b004      	add	sp, #16
 8000c6c:	4770      	bx	lr
 8000c6e:	4240      	negs	r0, r0
 8000c70:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c74:	2b00      	cmp	r3, #0
 8000c76:	db1b      	blt.n	8000cb0 <__aeabi_ldivmod+0x84>
 8000c78:	f000 f840 	bl	8000cfc <__udivmoddi4>
 8000c7c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c80:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c84:	b004      	add	sp, #16
 8000c86:	4240      	negs	r0, r0
 8000c88:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c8c:	4252      	negs	r2, r2
 8000c8e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000c92:	4770      	bx	lr
 8000c94:	4252      	negs	r2, r2
 8000c96:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000c9a:	f000 f82f 	bl	8000cfc <__udivmoddi4>
 8000c9e:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ca2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ca6:	b004      	add	sp, #16
 8000ca8:	4240      	negs	r0, r0
 8000caa:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cae:	4770      	bx	lr
 8000cb0:	4252      	negs	r2, r2
 8000cb2:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000cb6:	f000 f821 	bl	8000cfc <__udivmoddi4>
 8000cba:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cbe:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cc2:	b004      	add	sp, #16
 8000cc4:	4252      	negs	r2, r2
 8000cc6:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000cca:	4770      	bx	lr

08000ccc <__aeabi_uldivmod>:
 8000ccc:	b953      	cbnz	r3, 8000ce4 <__aeabi_uldivmod+0x18>
 8000cce:	b94a      	cbnz	r2, 8000ce4 <__aeabi_uldivmod+0x18>
 8000cd0:	2900      	cmp	r1, #0
 8000cd2:	bf08      	it	eq
 8000cd4:	2800      	cmpeq	r0, #0
 8000cd6:	bf1c      	itt	ne
 8000cd8:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000cdc:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000ce0:	f000 b96a 	b.w	8000fb8 <__aeabi_idiv0>
 8000ce4:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ce8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cec:	f000 f806 	bl	8000cfc <__udivmoddi4>
 8000cf0:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cf4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cf8:	b004      	add	sp, #16
 8000cfa:	4770      	bx	lr

08000cfc <__udivmoddi4>:
 8000cfc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d00:	9d08      	ldr	r5, [sp, #32]
 8000d02:	460c      	mov	r4, r1
 8000d04:	2b00      	cmp	r3, #0
 8000d06:	d14e      	bne.n	8000da6 <__udivmoddi4+0xaa>
 8000d08:	4694      	mov	ip, r2
 8000d0a:	458c      	cmp	ip, r1
 8000d0c:	4686      	mov	lr, r0
 8000d0e:	fab2 f282 	clz	r2, r2
 8000d12:	d962      	bls.n	8000dda <__udivmoddi4+0xde>
 8000d14:	b14a      	cbz	r2, 8000d2a <__udivmoddi4+0x2e>
 8000d16:	f1c2 0320 	rsb	r3, r2, #32
 8000d1a:	4091      	lsls	r1, r2
 8000d1c:	fa20 f303 	lsr.w	r3, r0, r3
 8000d20:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d24:	4319      	orrs	r1, r3
 8000d26:	fa00 fe02 	lsl.w	lr, r0, r2
 8000d2a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d2e:	fa1f f68c 	uxth.w	r6, ip
 8000d32:	fbb1 f4f7 	udiv	r4, r1, r7
 8000d36:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d3a:	fb07 1114 	mls	r1, r7, r4, r1
 8000d3e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d42:	fb04 f106 	mul.w	r1, r4, r6
 8000d46:	4299      	cmp	r1, r3
 8000d48:	d90a      	bls.n	8000d60 <__udivmoddi4+0x64>
 8000d4a:	eb1c 0303 	adds.w	r3, ip, r3
 8000d4e:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000d52:	f080 8112 	bcs.w	8000f7a <__udivmoddi4+0x27e>
 8000d56:	4299      	cmp	r1, r3
 8000d58:	f240 810f 	bls.w	8000f7a <__udivmoddi4+0x27e>
 8000d5c:	3c02      	subs	r4, #2
 8000d5e:	4463      	add	r3, ip
 8000d60:	1a59      	subs	r1, r3, r1
 8000d62:	fa1f f38e 	uxth.w	r3, lr
 8000d66:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d6a:	fb07 1110 	mls	r1, r7, r0, r1
 8000d6e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d72:	fb00 f606 	mul.w	r6, r0, r6
 8000d76:	429e      	cmp	r6, r3
 8000d78:	d90a      	bls.n	8000d90 <__udivmoddi4+0x94>
 8000d7a:	eb1c 0303 	adds.w	r3, ip, r3
 8000d7e:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8000d82:	f080 80fc 	bcs.w	8000f7e <__udivmoddi4+0x282>
 8000d86:	429e      	cmp	r6, r3
 8000d88:	f240 80f9 	bls.w	8000f7e <__udivmoddi4+0x282>
 8000d8c:	4463      	add	r3, ip
 8000d8e:	3802      	subs	r0, #2
 8000d90:	1b9b      	subs	r3, r3, r6
 8000d92:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000d96:	2100      	movs	r1, #0
 8000d98:	b11d      	cbz	r5, 8000da2 <__udivmoddi4+0xa6>
 8000d9a:	40d3      	lsrs	r3, r2
 8000d9c:	2200      	movs	r2, #0
 8000d9e:	e9c5 3200 	strd	r3, r2, [r5]
 8000da2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000da6:	428b      	cmp	r3, r1
 8000da8:	d905      	bls.n	8000db6 <__udivmoddi4+0xba>
 8000daa:	b10d      	cbz	r5, 8000db0 <__udivmoddi4+0xb4>
 8000dac:	e9c5 0100 	strd	r0, r1, [r5]
 8000db0:	2100      	movs	r1, #0
 8000db2:	4608      	mov	r0, r1
 8000db4:	e7f5      	b.n	8000da2 <__udivmoddi4+0xa6>
 8000db6:	fab3 f183 	clz	r1, r3
 8000dba:	2900      	cmp	r1, #0
 8000dbc:	d146      	bne.n	8000e4c <__udivmoddi4+0x150>
 8000dbe:	42a3      	cmp	r3, r4
 8000dc0:	d302      	bcc.n	8000dc8 <__udivmoddi4+0xcc>
 8000dc2:	4290      	cmp	r0, r2
 8000dc4:	f0c0 80f0 	bcc.w	8000fa8 <__udivmoddi4+0x2ac>
 8000dc8:	1a86      	subs	r6, r0, r2
 8000dca:	eb64 0303 	sbc.w	r3, r4, r3
 8000dce:	2001      	movs	r0, #1
 8000dd0:	2d00      	cmp	r5, #0
 8000dd2:	d0e6      	beq.n	8000da2 <__udivmoddi4+0xa6>
 8000dd4:	e9c5 6300 	strd	r6, r3, [r5]
 8000dd8:	e7e3      	b.n	8000da2 <__udivmoddi4+0xa6>
 8000dda:	2a00      	cmp	r2, #0
 8000ddc:	f040 8090 	bne.w	8000f00 <__udivmoddi4+0x204>
 8000de0:	eba1 040c 	sub.w	r4, r1, ip
 8000de4:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000de8:	fa1f f78c 	uxth.w	r7, ip
 8000dec:	2101      	movs	r1, #1
 8000dee:	fbb4 f6f8 	udiv	r6, r4, r8
 8000df2:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000df6:	fb08 4416 	mls	r4, r8, r6, r4
 8000dfa:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000dfe:	fb07 f006 	mul.w	r0, r7, r6
 8000e02:	4298      	cmp	r0, r3
 8000e04:	d908      	bls.n	8000e18 <__udivmoddi4+0x11c>
 8000e06:	eb1c 0303 	adds.w	r3, ip, r3
 8000e0a:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 8000e0e:	d202      	bcs.n	8000e16 <__udivmoddi4+0x11a>
 8000e10:	4298      	cmp	r0, r3
 8000e12:	f200 80cd 	bhi.w	8000fb0 <__udivmoddi4+0x2b4>
 8000e16:	4626      	mov	r6, r4
 8000e18:	1a1c      	subs	r4, r3, r0
 8000e1a:	fa1f f38e 	uxth.w	r3, lr
 8000e1e:	fbb4 f0f8 	udiv	r0, r4, r8
 8000e22:	fb08 4410 	mls	r4, r8, r0, r4
 8000e26:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e2a:	fb00 f707 	mul.w	r7, r0, r7
 8000e2e:	429f      	cmp	r7, r3
 8000e30:	d908      	bls.n	8000e44 <__udivmoddi4+0x148>
 8000e32:	eb1c 0303 	adds.w	r3, ip, r3
 8000e36:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 8000e3a:	d202      	bcs.n	8000e42 <__udivmoddi4+0x146>
 8000e3c:	429f      	cmp	r7, r3
 8000e3e:	f200 80b0 	bhi.w	8000fa2 <__udivmoddi4+0x2a6>
 8000e42:	4620      	mov	r0, r4
 8000e44:	1bdb      	subs	r3, r3, r7
 8000e46:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000e4a:	e7a5      	b.n	8000d98 <__udivmoddi4+0x9c>
 8000e4c:	f1c1 0620 	rsb	r6, r1, #32
 8000e50:	408b      	lsls	r3, r1
 8000e52:	fa22 f706 	lsr.w	r7, r2, r6
 8000e56:	431f      	orrs	r7, r3
 8000e58:	fa20 fc06 	lsr.w	ip, r0, r6
 8000e5c:	fa04 f301 	lsl.w	r3, r4, r1
 8000e60:	ea43 030c 	orr.w	r3, r3, ip
 8000e64:	40f4      	lsrs	r4, r6
 8000e66:	fa00 f801 	lsl.w	r8, r0, r1
 8000e6a:	0c38      	lsrs	r0, r7, #16
 8000e6c:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000e70:	fbb4 fef0 	udiv	lr, r4, r0
 8000e74:	fa1f fc87 	uxth.w	ip, r7
 8000e78:	fb00 441e 	mls	r4, r0, lr, r4
 8000e7c:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000e80:	fb0e f90c 	mul.w	r9, lr, ip
 8000e84:	45a1      	cmp	r9, r4
 8000e86:	fa02 f201 	lsl.w	r2, r2, r1
 8000e8a:	d90a      	bls.n	8000ea2 <__udivmoddi4+0x1a6>
 8000e8c:	193c      	adds	r4, r7, r4
 8000e8e:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8000e92:	f080 8084 	bcs.w	8000f9e <__udivmoddi4+0x2a2>
 8000e96:	45a1      	cmp	r9, r4
 8000e98:	f240 8081 	bls.w	8000f9e <__udivmoddi4+0x2a2>
 8000e9c:	f1ae 0e02 	sub.w	lr, lr, #2
 8000ea0:	443c      	add	r4, r7
 8000ea2:	eba4 0409 	sub.w	r4, r4, r9
 8000ea6:	fa1f f983 	uxth.w	r9, r3
 8000eaa:	fbb4 f3f0 	udiv	r3, r4, r0
 8000eae:	fb00 4413 	mls	r4, r0, r3, r4
 8000eb2:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000eb6:	fb03 fc0c 	mul.w	ip, r3, ip
 8000eba:	45a4      	cmp	ip, r4
 8000ebc:	d907      	bls.n	8000ece <__udivmoddi4+0x1d2>
 8000ebe:	193c      	adds	r4, r7, r4
 8000ec0:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 8000ec4:	d267      	bcs.n	8000f96 <__udivmoddi4+0x29a>
 8000ec6:	45a4      	cmp	ip, r4
 8000ec8:	d965      	bls.n	8000f96 <__udivmoddi4+0x29a>
 8000eca:	3b02      	subs	r3, #2
 8000ecc:	443c      	add	r4, r7
 8000ece:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000ed2:	fba0 9302 	umull	r9, r3, r0, r2
 8000ed6:	eba4 040c 	sub.w	r4, r4, ip
 8000eda:	429c      	cmp	r4, r3
 8000edc:	46ce      	mov	lr, r9
 8000ede:	469c      	mov	ip, r3
 8000ee0:	d351      	bcc.n	8000f86 <__udivmoddi4+0x28a>
 8000ee2:	d04e      	beq.n	8000f82 <__udivmoddi4+0x286>
 8000ee4:	b155      	cbz	r5, 8000efc <__udivmoddi4+0x200>
 8000ee6:	ebb8 030e 	subs.w	r3, r8, lr
 8000eea:	eb64 040c 	sbc.w	r4, r4, ip
 8000eee:	fa04 f606 	lsl.w	r6, r4, r6
 8000ef2:	40cb      	lsrs	r3, r1
 8000ef4:	431e      	orrs	r6, r3
 8000ef6:	40cc      	lsrs	r4, r1
 8000ef8:	e9c5 6400 	strd	r6, r4, [r5]
 8000efc:	2100      	movs	r1, #0
 8000efe:	e750      	b.n	8000da2 <__udivmoddi4+0xa6>
 8000f00:	f1c2 0320 	rsb	r3, r2, #32
 8000f04:	fa20 f103 	lsr.w	r1, r0, r3
 8000f08:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f0c:	fa24 f303 	lsr.w	r3, r4, r3
 8000f10:	4094      	lsls	r4, r2
 8000f12:	430c      	orrs	r4, r1
 8000f14:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000f18:	fa00 fe02 	lsl.w	lr, r0, r2
 8000f1c:	fa1f f78c 	uxth.w	r7, ip
 8000f20:	fbb3 f0f8 	udiv	r0, r3, r8
 8000f24:	fb08 3110 	mls	r1, r8, r0, r3
 8000f28:	0c23      	lsrs	r3, r4, #16
 8000f2a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000f2e:	fb00 f107 	mul.w	r1, r0, r7
 8000f32:	4299      	cmp	r1, r3
 8000f34:	d908      	bls.n	8000f48 <__udivmoddi4+0x24c>
 8000f36:	eb1c 0303 	adds.w	r3, ip, r3
 8000f3a:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 8000f3e:	d22c      	bcs.n	8000f9a <__udivmoddi4+0x29e>
 8000f40:	4299      	cmp	r1, r3
 8000f42:	d92a      	bls.n	8000f9a <__udivmoddi4+0x29e>
 8000f44:	3802      	subs	r0, #2
 8000f46:	4463      	add	r3, ip
 8000f48:	1a5b      	subs	r3, r3, r1
 8000f4a:	b2a4      	uxth	r4, r4
 8000f4c:	fbb3 f1f8 	udiv	r1, r3, r8
 8000f50:	fb08 3311 	mls	r3, r8, r1, r3
 8000f54:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000f58:	fb01 f307 	mul.w	r3, r1, r7
 8000f5c:	42a3      	cmp	r3, r4
 8000f5e:	d908      	bls.n	8000f72 <__udivmoddi4+0x276>
 8000f60:	eb1c 0404 	adds.w	r4, ip, r4
 8000f64:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 8000f68:	d213      	bcs.n	8000f92 <__udivmoddi4+0x296>
 8000f6a:	42a3      	cmp	r3, r4
 8000f6c:	d911      	bls.n	8000f92 <__udivmoddi4+0x296>
 8000f6e:	3902      	subs	r1, #2
 8000f70:	4464      	add	r4, ip
 8000f72:	1ae4      	subs	r4, r4, r3
 8000f74:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000f78:	e739      	b.n	8000dee <__udivmoddi4+0xf2>
 8000f7a:	4604      	mov	r4, r0
 8000f7c:	e6f0      	b.n	8000d60 <__udivmoddi4+0x64>
 8000f7e:	4608      	mov	r0, r1
 8000f80:	e706      	b.n	8000d90 <__udivmoddi4+0x94>
 8000f82:	45c8      	cmp	r8, r9
 8000f84:	d2ae      	bcs.n	8000ee4 <__udivmoddi4+0x1e8>
 8000f86:	ebb9 0e02 	subs.w	lr, r9, r2
 8000f8a:	eb63 0c07 	sbc.w	ip, r3, r7
 8000f8e:	3801      	subs	r0, #1
 8000f90:	e7a8      	b.n	8000ee4 <__udivmoddi4+0x1e8>
 8000f92:	4631      	mov	r1, r6
 8000f94:	e7ed      	b.n	8000f72 <__udivmoddi4+0x276>
 8000f96:	4603      	mov	r3, r0
 8000f98:	e799      	b.n	8000ece <__udivmoddi4+0x1d2>
 8000f9a:	4630      	mov	r0, r6
 8000f9c:	e7d4      	b.n	8000f48 <__udivmoddi4+0x24c>
 8000f9e:	46d6      	mov	lr, sl
 8000fa0:	e77f      	b.n	8000ea2 <__udivmoddi4+0x1a6>
 8000fa2:	4463      	add	r3, ip
 8000fa4:	3802      	subs	r0, #2
 8000fa6:	e74d      	b.n	8000e44 <__udivmoddi4+0x148>
 8000fa8:	4606      	mov	r6, r0
 8000faa:	4623      	mov	r3, r4
 8000fac:	4608      	mov	r0, r1
 8000fae:	e70f      	b.n	8000dd0 <__udivmoddi4+0xd4>
 8000fb0:	3e02      	subs	r6, #2
 8000fb2:	4463      	add	r3, ip
 8000fb4:	e730      	b.n	8000e18 <__udivmoddi4+0x11c>
 8000fb6:	bf00      	nop

08000fb8 <__aeabi_idiv0>:
 8000fb8:	4770      	bx	lr
 8000fba:	bf00      	nop

08000fbc <pvPortMallocMicroROS>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMallocMicroROS( size_t xWantedSize )
{
 8000fbc:	b580      	push	{r7, lr}
 8000fbe:	b08a      	sub	sp, #40	@ 0x28
 8000fc0:	af00      	add	r7, sp, #0
 8000fc2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8000fc4:	2300      	movs	r3, #0
 8000fc6:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8000fc8:	f00a fd5c 	bl	800ba84 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8000fcc:	4b5a      	ldr	r3, [pc, #360]	@ (8001138 <pvPortMallocMicroROS+0x17c>)
 8000fce:	681b      	ldr	r3, [r3, #0]
 8000fd0:	2b00      	cmp	r3, #0
 8000fd2:	d101      	bne.n	8000fd8 <pvPortMallocMicroROS+0x1c>
		{
			prvHeapInit();
 8000fd4:	f000 f986 	bl	80012e4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8000fd8:	4b58      	ldr	r3, [pc, #352]	@ (800113c <pvPortMallocMicroROS+0x180>)
 8000fda:	681a      	ldr	r2, [r3, #0]
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	4013      	ands	r3, r2
 8000fe0:	2b00      	cmp	r3, #0
 8000fe2:	f040 8090 	bne.w	8001106 <pvPortMallocMicroROS+0x14a>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	2b00      	cmp	r3, #0
 8000fea:	d01e      	beq.n	800102a <pvPortMallocMicroROS+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8000fec:	2208      	movs	r2, #8
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	4413      	add	r3, r2
 8000ff2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	f003 0307 	and.w	r3, r3, #7
 8000ffa:	2b00      	cmp	r3, #0
 8000ffc:	d015      	beq.n	800102a <pvPortMallocMicroROS+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	f023 0307 	bic.w	r3, r3, #7
 8001004:	3308      	adds	r3, #8
 8001006:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	f003 0307 	and.w	r3, r3, #7
 800100e:	2b00      	cmp	r3, #0
 8001010:	d00b      	beq.n	800102a <pvPortMallocMicroROS+0x6e>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8001012:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001016:	f383 8811 	msr	BASEPRI, r3
 800101a:	f3bf 8f6f 	isb	sy
 800101e:	f3bf 8f4f 	dsb	sy
 8001022:	617b      	str	r3, [r7, #20]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8001024:	bf00      	nop
 8001026:	bf00      	nop
 8001028:	e7fd      	b.n	8001026 <pvPortMallocMicroROS+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	2b00      	cmp	r3, #0
 800102e:	d06a      	beq.n	8001106 <pvPortMallocMicroROS+0x14a>
 8001030:	4b43      	ldr	r3, [pc, #268]	@ (8001140 <pvPortMallocMicroROS+0x184>)
 8001032:	681b      	ldr	r3, [r3, #0]
 8001034:	687a      	ldr	r2, [r7, #4]
 8001036:	429a      	cmp	r2, r3
 8001038:	d865      	bhi.n	8001106 <pvPortMallocMicroROS+0x14a>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800103a:	4b42      	ldr	r3, [pc, #264]	@ (8001144 <pvPortMallocMicroROS+0x188>)
 800103c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800103e:	4b41      	ldr	r3, [pc, #260]	@ (8001144 <pvPortMallocMicroROS+0x188>)
 8001040:	681b      	ldr	r3, [r3, #0]
 8001042:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8001044:	e004      	b.n	8001050 <pvPortMallocMicroROS+0x94>
				{
					pxPreviousBlock = pxBlock;
 8001046:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001048:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800104a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800104c:	681b      	ldr	r3, [r3, #0]
 800104e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8001050:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001052:	685b      	ldr	r3, [r3, #4]
 8001054:	687a      	ldr	r2, [r7, #4]
 8001056:	429a      	cmp	r2, r3
 8001058:	d903      	bls.n	8001062 <pvPortMallocMicroROS+0xa6>
 800105a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800105c:	681b      	ldr	r3, [r3, #0]
 800105e:	2b00      	cmp	r3, #0
 8001060:	d1f1      	bne.n	8001046 <pvPortMallocMicroROS+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8001062:	4b35      	ldr	r3, [pc, #212]	@ (8001138 <pvPortMallocMicroROS+0x17c>)
 8001064:	681b      	ldr	r3, [r3, #0]
 8001066:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001068:	429a      	cmp	r2, r3
 800106a:	d04c      	beq.n	8001106 <pvPortMallocMicroROS+0x14a>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800106c:	6a3b      	ldr	r3, [r7, #32]
 800106e:	681b      	ldr	r3, [r3, #0]
 8001070:	2208      	movs	r2, #8
 8001072:	4413      	add	r3, r2
 8001074:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8001076:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001078:	681a      	ldr	r2, [r3, #0]
 800107a:	6a3b      	ldr	r3, [r7, #32]
 800107c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800107e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001080:	685a      	ldr	r2, [r3, #4]
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	1ad2      	subs	r2, r2, r3
 8001086:	2308      	movs	r3, #8
 8001088:	005b      	lsls	r3, r3, #1
 800108a:	429a      	cmp	r2, r3
 800108c:	d920      	bls.n	80010d0 <pvPortMallocMicroROS+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800108e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	4413      	add	r3, r2
 8001094:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8001096:	69bb      	ldr	r3, [r7, #24]
 8001098:	f003 0307 	and.w	r3, r3, #7
 800109c:	2b00      	cmp	r3, #0
 800109e:	d00b      	beq.n	80010b8 <pvPortMallocMicroROS+0xfc>
	__asm volatile
 80010a0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80010a4:	f383 8811 	msr	BASEPRI, r3
 80010a8:	f3bf 8f6f 	isb	sy
 80010ac:	f3bf 8f4f 	dsb	sy
 80010b0:	613b      	str	r3, [r7, #16]
}
 80010b2:	bf00      	nop
 80010b4:	bf00      	nop
 80010b6:	e7fd      	b.n	80010b4 <pvPortMallocMicroROS+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80010b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80010ba:	685a      	ldr	r2, [r3, #4]
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	1ad2      	subs	r2, r2, r3
 80010c0:	69bb      	ldr	r3, [r7, #24]
 80010c2:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80010c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80010c6:	687a      	ldr	r2, [r7, #4]
 80010c8:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80010ca:	69b8      	ldr	r0, [r7, #24]
 80010cc:	f000 f96c 	bl	80013a8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80010d0:	4b1b      	ldr	r3, [pc, #108]	@ (8001140 <pvPortMallocMicroROS+0x184>)
 80010d2:	681a      	ldr	r2, [r3, #0]
 80010d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80010d6:	685b      	ldr	r3, [r3, #4]
 80010d8:	1ad3      	subs	r3, r2, r3
 80010da:	4a19      	ldr	r2, [pc, #100]	@ (8001140 <pvPortMallocMicroROS+0x184>)
 80010dc:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80010de:	4b18      	ldr	r3, [pc, #96]	@ (8001140 <pvPortMallocMicroROS+0x184>)
 80010e0:	681a      	ldr	r2, [r3, #0]
 80010e2:	4b19      	ldr	r3, [pc, #100]	@ (8001148 <pvPortMallocMicroROS+0x18c>)
 80010e4:	681b      	ldr	r3, [r3, #0]
 80010e6:	429a      	cmp	r2, r3
 80010e8:	d203      	bcs.n	80010f2 <pvPortMallocMicroROS+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80010ea:	4b15      	ldr	r3, [pc, #84]	@ (8001140 <pvPortMallocMicroROS+0x184>)
 80010ec:	681b      	ldr	r3, [r3, #0]
 80010ee:	4a16      	ldr	r2, [pc, #88]	@ (8001148 <pvPortMallocMicroROS+0x18c>)
 80010f0:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80010f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80010f4:	685a      	ldr	r2, [r3, #4]
 80010f6:	4b11      	ldr	r3, [pc, #68]	@ (800113c <pvPortMallocMicroROS+0x180>)
 80010f8:	681b      	ldr	r3, [r3, #0]
 80010fa:	431a      	orrs	r2, r3
 80010fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80010fe:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8001100:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001102:	2200      	movs	r2, #0
 8001104:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8001106:	f00a fccb 	bl	800baa0 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800110a:	69fb      	ldr	r3, [r7, #28]
 800110c:	f003 0307 	and.w	r3, r3, #7
 8001110:	2b00      	cmp	r3, #0
 8001112:	d00b      	beq.n	800112c <pvPortMallocMicroROS+0x170>
	__asm volatile
 8001114:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001118:	f383 8811 	msr	BASEPRI, r3
 800111c:	f3bf 8f6f 	isb	sy
 8001120:	f3bf 8f4f 	dsb	sy
 8001124:	60fb      	str	r3, [r7, #12]
}
 8001126:	bf00      	nop
 8001128:	bf00      	nop
 800112a:	e7fd      	b.n	8001128 <pvPortMallocMicroROS+0x16c>
	return pvReturn;
 800112c:	69fb      	ldr	r3, [r7, #28]
}
 800112e:	4618      	mov	r0, r3
 8001130:	3728      	adds	r7, #40	@ 0x28
 8001132:	46bd      	mov	sp, r7
 8001134:	bd80      	pop	{r7, pc}
 8001136:	bf00      	nop
 8001138:	20000f9c 	.word	0x20000f9c
 800113c:	20000fa8 	.word	0x20000fa8
 8001140:	20000fa0 	.word	0x20000fa0
 8001144:	20000f94 	.word	0x20000f94
 8001148:	20000fa4 	.word	0x20000fa4

0800114c <vPortFreeMicroROS>:
/*-----------------------------------------------------------*/

void vPortFreeMicroROS( void *pv )
{
 800114c:	b580      	push	{r7, lr}
 800114e:	b086      	sub	sp, #24
 8001150:	af00      	add	r7, sp, #0
 8001152:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	2b00      	cmp	r3, #0
 800115c:	d04a      	beq.n	80011f4 <vPortFreeMicroROS+0xa8>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800115e:	2308      	movs	r3, #8
 8001160:	425b      	negs	r3, r3
 8001162:	697a      	ldr	r2, [r7, #20]
 8001164:	4413      	add	r3, r2
 8001166:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8001168:	697b      	ldr	r3, [r7, #20]
 800116a:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800116c:	693b      	ldr	r3, [r7, #16]
 800116e:	685a      	ldr	r2, [r3, #4]
 8001170:	4b22      	ldr	r3, [pc, #136]	@ (80011fc <vPortFreeMicroROS+0xb0>)
 8001172:	681b      	ldr	r3, [r3, #0]
 8001174:	4013      	ands	r3, r2
 8001176:	2b00      	cmp	r3, #0
 8001178:	d10b      	bne.n	8001192 <vPortFreeMicroROS+0x46>
	__asm volatile
 800117a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800117e:	f383 8811 	msr	BASEPRI, r3
 8001182:	f3bf 8f6f 	isb	sy
 8001186:	f3bf 8f4f 	dsb	sy
 800118a:	60fb      	str	r3, [r7, #12]
}
 800118c:	bf00      	nop
 800118e:	bf00      	nop
 8001190:	e7fd      	b.n	800118e <vPortFreeMicroROS+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8001192:	693b      	ldr	r3, [r7, #16]
 8001194:	681b      	ldr	r3, [r3, #0]
 8001196:	2b00      	cmp	r3, #0
 8001198:	d00b      	beq.n	80011b2 <vPortFreeMicroROS+0x66>
	__asm volatile
 800119a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800119e:	f383 8811 	msr	BASEPRI, r3
 80011a2:	f3bf 8f6f 	isb	sy
 80011a6:	f3bf 8f4f 	dsb	sy
 80011aa:	60bb      	str	r3, [r7, #8]
}
 80011ac:	bf00      	nop
 80011ae:	bf00      	nop
 80011b0:	e7fd      	b.n	80011ae <vPortFreeMicroROS+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80011b2:	693b      	ldr	r3, [r7, #16]
 80011b4:	685a      	ldr	r2, [r3, #4]
 80011b6:	4b11      	ldr	r3, [pc, #68]	@ (80011fc <vPortFreeMicroROS+0xb0>)
 80011b8:	681b      	ldr	r3, [r3, #0]
 80011ba:	4013      	ands	r3, r2
 80011bc:	2b00      	cmp	r3, #0
 80011be:	d019      	beq.n	80011f4 <vPortFreeMicroROS+0xa8>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80011c0:	693b      	ldr	r3, [r7, #16]
 80011c2:	681b      	ldr	r3, [r3, #0]
 80011c4:	2b00      	cmp	r3, #0
 80011c6:	d115      	bne.n	80011f4 <vPortFreeMicroROS+0xa8>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80011c8:	693b      	ldr	r3, [r7, #16]
 80011ca:	685a      	ldr	r2, [r3, #4]
 80011cc:	4b0b      	ldr	r3, [pc, #44]	@ (80011fc <vPortFreeMicroROS+0xb0>)
 80011ce:	681b      	ldr	r3, [r3, #0]
 80011d0:	43db      	mvns	r3, r3
 80011d2:	401a      	ands	r2, r3
 80011d4:	693b      	ldr	r3, [r7, #16]
 80011d6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80011d8:	f00a fc54 	bl	800ba84 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80011dc:	693b      	ldr	r3, [r7, #16]
 80011de:	685a      	ldr	r2, [r3, #4]
 80011e0:	4b07      	ldr	r3, [pc, #28]	@ (8001200 <vPortFreeMicroROS+0xb4>)
 80011e2:	681b      	ldr	r3, [r3, #0]
 80011e4:	4413      	add	r3, r2
 80011e6:	4a06      	ldr	r2, [pc, #24]	@ (8001200 <vPortFreeMicroROS+0xb4>)
 80011e8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80011ea:	6938      	ldr	r0, [r7, #16]
 80011ec:	f000 f8dc 	bl	80013a8 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 80011f0:	f00a fc56 	bl	800baa0 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80011f4:	bf00      	nop
 80011f6:	3718      	adds	r7, #24
 80011f8:	46bd      	mov	sp, r7
 80011fa:	bd80      	pop	{r7, pc}
 80011fc:	20000fa8 	.word	0x20000fa8
 8001200:	20000fa0 	.word	0x20000fa0

08001204 <getBlockSize>:
/*-----------------------------------------------------------*/

/*-----------------------------------------------------------*/
size_t getBlockSize( void *pv )
{
 8001204:	b480      	push	{r7}
 8001206:	b087      	sub	sp, #28
 8001208:	af00      	add	r7, sp, #0
 800120a:	6078      	str	r0, [r7, #4]

	uint8_t *puc = ( uint8_t * ) pv;
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	617b      	str	r3, [r7, #20]
	BlockLink_t *pxLink;

	puc -= xHeapStructSize;
 8001210:	2308      	movs	r3, #8
 8001212:	425b      	negs	r3, r3
 8001214:	697a      	ldr	r2, [r7, #20]
 8001216:	4413      	add	r3, r2
 8001218:	617b      	str	r3, [r7, #20]
	pxLink = ( void * ) puc;
 800121a:	697b      	ldr	r3, [r7, #20]
 800121c:	613b      	str	r3, [r7, #16]

	size_t count = pxLink->xBlockSize & ~xBlockAllocatedBit;
 800121e:	693b      	ldr	r3, [r7, #16]
 8001220:	685a      	ldr	r2, [r3, #4]
 8001222:	4b06      	ldr	r3, [pc, #24]	@ (800123c <getBlockSize+0x38>)
 8001224:	681b      	ldr	r3, [r3, #0]
 8001226:	43db      	mvns	r3, r3
 8001228:	4013      	ands	r3, r2
 800122a:	60fb      	str	r3, [r7, #12]

	return count;
 800122c:	68fb      	ldr	r3, [r7, #12]
}
 800122e:	4618      	mov	r0, r3
 8001230:	371c      	adds	r7, #28
 8001232:	46bd      	mov	sp, r7
 8001234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001238:	4770      	bx	lr
 800123a:	bf00      	nop
 800123c:	20000fa8 	.word	0x20000fa8

08001240 <pvPortReallocMicroROS>:
/*-----------------------------------------------------------*/

void *pvPortReallocMicroROS( void *pv, size_t xWantedSize )
{
 8001240:	b580      	push	{r7, lr}
 8001242:	b084      	sub	sp, #16
 8001244:	af00      	add	r7, sp, #0
 8001246:	6078      	str	r0, [r7, #4]
 8001248:	6039      	str	r1, [r7, #0]
	vTaskSuspendAll();
 800124a:	f00a fc1b 	bl	800ba84 <vTaskSuspendAll>

	void * newmem = pvPortMallocMicroROS(xWantedSize);
 800124e:	6838      	ldr	r0, [r7, #0]
 8001250:	f7ff feb4 	bl	8000fbc <pvPortMallocMicroROS>
 8001254:	60b8      	str	r0, [r7, #8]
	if (newmem != NULL && pv != NULL)
 8001256:	68bb      	ldr	r3, [r7, #8]
 8001258:	2b00      	cmp	r3, #0
 800125a:	d017      	beq.n	800128c <pvPortReallocMicroROS+0x4c>
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	2b00      	cmp	r3, #0
 8001260:	d014      	beq.n	800128c <pvPortReallocMicroROS+0x4c>
	{
		size_t count = getBlockSize(pv) - xHeapStructSize;
 8001262:	6878      	ldr	r0, [r7, #4]
 8001264:	f7ff ffce 	bl	8001204 <getBlockSize>
 8001268:	4603      	mov	r3, r0
 800126a:	2208      	movs	r2, #8
 800126c:	1a9b      	subs	r3, r3, r2
 800126e:	60fb      	str	r3, [r7, #12]
		if (xWantedSize < count)
 8001270:	683a      	ldr	r2, [r7, #0]
 8001272:	68fb      	ldr	r3, [r7, #12]
 8001274:	429a      	cmp	r2, r3
 8001276:	d201      	bcs.n	800127c <pvPortReallocMicroROS+0x3c>
		{
			count = xWantedSize;
 8001278:	683b      	ldr	r3, [r7, #0]
 800127a:	60fb      	str	r3, [r7, #12]
		}
		memcpy(newmem, pv, count);
 800127c:	68fa      	ldr	r2, [r7, #12]
 800127e:	6879      	ldr	r1, [r7, #4]
 8001280:	68b8      	ldr	r0, [r7, #8]
 8001282:	f018 fdde 	bl	8019e42 <memcpy>

		vPortFreeMicroROS(pv);
 8001286:	6878      	ldr	r0, [r7, #4]
 8001288:	f7ff ff60 	bl	800114c <vPortFreeMicroROS>
	}

	( void ) xTaskResumeAll();
 800128c:	f00a fc08 	bl	800baa0 <xTaskResumeAll>

	return newmem;
 8001290:	68bb      	ldr	r3, [r7, #8]
}
 8001292:	4618      	mov	r0, r3
 8001294:	3710      	adds	r7, #16
 8001296:	46bd      	mov	sp, r7
 8001298:	bd80      	pop	{r7, pc}

0800129a <pvPortCallocMicroROS>:
/*-----------------------------------------------------------*/

void *pvPortCallocMicroROS( size_t num, size_t xWantedSize )
{
 800129a:	b580      	push	{r7, lr}
 800129c:	b086      	sub	sp, #24
 800129e:	af00      	add	r7, sp, #0
 80012a0:	6078      	str	r0, [r7, #4]
 80012a2:	6039      	str	r1, [r7, #0]
	vTaskSuspendAll();
 80012a4:	f00a fbee 	bl	800ba84 <vTaskSuspendAll>
	size_t count = xWantedSize*num;
 80012a8:	683b      	ldr	r3, [r7, #0]
 80012aa:	687a      	ldr	r2, [r7, #4]
 80012ac:	fb02 f303 	mul.w	r3, r2, r3
 80012b0:	617b      	str	r3, [r7, #20]

	void * mem = pvPortMallocMicroROS(count);
 80012b2:	6978      	ldr	r0, [r7, #20]
 80012b4:	f7ff fe82 	bl	8000fbc <pvPortMallocMicroROS>
 80012b8:	60f8      	str	r0, [r7, #12]
  	char *in_dest = (char*)mem;
 80012ba:	68fb      	ldr	r3, [r7, #12]
 80012bc:	613b      	str	r3, [r7, #16]

  	while(count--)
 80012be:	e004      	b.n	80012ca <pvPortCallocMicroROS+0x30>
    	*in_dest++ = 0;
 80012c0:	693b      	ldr	r3, [r7, #16]
 80012c2:	1c5a      	adds	r2, r3, #1
 80012c4:	613a      	str	r2, [r7, #16]
 80012c6:	2200      	movs	r2, #0
 80012c8:	701a      	strb	r2, [r3, #0]
  	while(count--)
 80012ca:	697b      	ldr	r3, [r7, #20]
 80012cc:	1e5a      	subs	r2, r3, #1
 80012ce:	617a      	str	r2, [r7, #20]
 80012d0:	2b00      	cmp	r3, #0
 80012d2:	d1f5      	bne.n	80012c0 <pvPortCallocMicroROS+0x26>

	( void ) xTaskResumeAll();
 80012d4:	f00a fbe4 	bl	800baa0 <xTaskResumeAll>
  	return mem;
 80012d8:	68fb      	ldr	r3, [r7, #12]
}
 80012da:	4618      	mov	r0, r3
 80012dc:	3718      	adds	r7, #24
 80012de:	46bd      	mov	sp, r7
 80012e0:	bd80      	pop	{r7, pc}
	...

080012e4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80012e4:	b480      	push	{r7}
 80012e6:	b085      	sub	sp, #20
 80012e8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80012ea:	f640 33b8 	movw	r3, #3000	@ 0xbb8
 80012ee:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80012f0:	4b27      	ldr	r3, [pc, #156]	@ (8001390 <prvHeapInit+0xac>)
 80012f2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80012f4:	68fb      	ldr	r3, [r7, #12]
 80012f6:	f003 0307 	and.w	r3, r3, #7
 80012fa:	2b00      	cmp	r3, #0
 80012fc:	d00c      	beq.n	8001318 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80012fe:	68fb      	ldr	r3, [r7, #12]
 8001300:	3307      	adds	r3, #7
 8001302:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8001304:	68fb      	ldr	r3, [r7, #12]
 8001306:	f023 0307 	bic.w	r3, r3, #7
 800130a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800130c:	68ba      	ldr	r2, [r7, #8]
 800130e:	68fb      	ldr	r3, [r7, #12]
 8001310:	1ad3      	subs	r3, r2, r3
 8001312:	4a1f      	ldr	r2, [pc, #124]	@ (8001390 <prvHeapInit+0xac>)
 8001314:	4413      	add	r3, r2
 8001316:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8001318:	68fb      	ldr	r3, [r7, #12]
 800131a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800131c:	4a1d      	ldr	r2, [pc, #116]	@ (8001394 <prvHeapInit+0xb0>)
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8001322:	4b1c      	ldr	r3, [pc, #112]	@ (8001394 <prvHeapInit+0xb0>)
 8001324:	2200      	movs	r2, #0
 8001326:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	68ba      	ldr	r2, [r7, #8]
 800132c:	4413      	add	r3, r2
 800132e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8001330:	2208      	movs	r2, #8
 8001332:	68fb      	ldr	r3, [r7, #12]
 8001334:	1a9b      	subs	r3, r3, r2
 8001336:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8001338:	68fb      	ldr	r3, [r7, #12]
 800133a:	f023 0307 	bic.w	r3, r3, #7
 800133e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8001340:	68fb      	ldr	r3, [r7, #12]
 8001342:	4a15      	ldr	r2, [pc, #84]	@ (8001398 <prvHeapInit+0xb4>)
 8001344:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8001346:	4b14      	ldr	r3, [pc, #80]	@ (8001398 <prvHeapInit+0xb4>)
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	2200      	movs	r2, #0
 800134c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800134e:	4b12      	ldr	r3, [pc, #72]	@ (8001398 <prvHeapInit+0xb4>)
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	2200      	movs	r2, #0
 8001354:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800135a:	683b      	ldr	r3, [r7, #0]
 800135c:	68fa      	ldr	r2, [r7, #12]
 800135e:	1ad2      	subs	r2, r2, r3
 8001360:	683b      	ldr	r3, [r7, #0]
 8001362:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8001364:	4b0c      	ldr	r3, [pc, #48]	@ (8001398 <prvHeapInit+0xb4>)
 8001366:	681a      	ldr	r2, [r3, #0]
 8001368:	683b      	ldr	r3, [r7, #0]
 800136a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800136c:	683b      	ldr	r3, [r7, #0]
 800136e:	685b      	ldr	r3, [r3, #4]
 8001370:	4a0a      	ldr	r2, [pc, #40]	@ (800139c <prvHeapInit+0xb8>)
 8001372:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8001374:	683b      	ldr	r3, [r7, #0]
 8001376:	685b      	ldr	r3, [r3, #4]
 8001378:	4a09      	ldr	r2, [pc, #36]	@ (80013a0 <prvHeapInit+0xbc>)
 800137a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800137c:	4b09      	ldr	r3, [pc, #36]	@ (80013a4 <prvHeapInit+0xc0>)
 800137e:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8001382:	601a      	str	r2, [r3, #0]
}
 8001384:	bf00      	nop
 8001386:	3714      	adds	r7, #20
 8001388:	46bd      	mov	sp, r7
 800138a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800138e:	4770      	bx	lr
 8001390:	200003dc 	.word	0x200003dc
 8001394:	20000f94 	.word	0x20000f94
 8001398:	20000f9c 	.word	0x20000f9c
 800139c:	20000fa4 	.word	0x20000fa4
 80013a0:	20000fa0 	.word	0x20000fa0
 80013a4:	20000fa8 	.word	0x20000fa8

080013a8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80013a8:	b480      	push	{r7}
 80013aa:	b085      	sub	sp, #20
 80013ac:	af00      	add	r7, sp, #0
 80013ae:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80013b0:	4b28      	ldr	r3, [pc, #160]	@ (8001454 <prvInsertBlockIntoFreeList+0xac>)
 80013b2:	60fb      	str	r3, [r7, #12]
 80013b4:	e002      	b.n	80013bc <prvInsertBlockIntoFreeList+0x14>
 80013b6:	68fb      	ldr	r3, [r7, #12]
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	60fb      	str	r3, [r7, #12]
 80013bc:	68fb      	ldr	r3, [r7, #12]
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	687a      	ldr	r2, [r7, #4]
 80013c2:	429a      	cmp	r2, r3
 80013c4:	d8f7      	bhi.n	80013b6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80013c6:	68fb      	ldr	r3, [r7, #12]
 80013c8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80013ca:	68fb      	ldr	r3, [r7, #12]
 80013cc:	685b      	ldr	r3, [r3, #4]
 80013ce:	68ba      	ldr	r2, [r7, #8]
 80013d0:	4413      	add	r3, r2
 80013d2:	687a      	ldr	r2, [r7, #4]
 80013d4:	429a      	cmp	r2, r3
 80013d6:	d108      	bne.n	80013ea <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80013d8:	68fb      	ldr	r3, [r7, #12]
 80013da:	685a      	ldr	r2, [r3, #4]
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	685b      	ldr	r3, [r3, #4]
 80013e0:	441a      	add	r2, r3
 80013e2:	68fb      	ldr	r3, [r7, #12]
 80013e4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80013e6:	68fb      	ldr	r3, [r7, #12]
 80013e8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	685b      	ldr	r3, [r3, #4]
 80013f2:	68ba      	ldr	r2, [r7, #8]
 80013f4:	441a      	add	r2, r3
 80013f6:	68fb      	ldr	r3, [r7, #12]
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	429a      	cmp	r2, r3
 80013fc:	d118      	bne.n	8001430 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80013fe:	68fb      	ldr	r3, [r7, #12]
 8001400:	681a      	ldr	r2, [r3, #0]
 8001402:	4b15      	ldr	r3, [pc, #84]	@ (8001458 <prvInsertBlockIntoFreeList+0xb0>)
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	429a      	cmp	r2, r3
 8001408:	d00d      	beq.n	8001426 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	685a      	ldr	r2, [r3, #4]
 800140e:	68fb      	ldr	r3, [r7, #12]
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	685b      	ldr	r3, [r3, #4]
 8001414:	441a      	add	r2, r3
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800141a:	68fb      	ldr	r3, [r7, #12]
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	681a      	ldr	r2, [r3, #0]
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	601a      	str	r2, [r3, #0]
 8001424:	e008      	b.n	8001438 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8001426:	4b0c      	ldr	r3, [pc, #48]	@ (8001458 <prvInsertBlockIntoFreeList+0xb0>)
 8001428:	681a      	ldr	r2, [r3, #0]
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	601a      	str	r2, [r3, #0]
 800142e:	e003      	b.n	8001438 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8001430:	68fb      	ldr	r3, [r7, #12]
 8001432:	681a      	ldr	r2, [r3, #0]
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8001438:	68fa      	ldr	r2, [r7, #12]
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	429a      	cmp	r2, r3
 800143e:	d002      	beq.n	8001446 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8001440:	68fb      	ldr	r3, [r7, #12]
 8001442:	687a      	ldr	r2, [r7, #4]
 8001444:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8001446:	bf00      	nop
 8001448:	3714      	adds	r7, #20
 800144a:	46bd      	mov	sp, r7
 800144c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001450:	4770      	bx	lr
 8001452:	bf00      	nop
 8001454:	20000f94 	.word	0x20000f94
 8001458:	20000f9c 	.word	0x20000f9c

0800145c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 800145c:	b580      	push	{r7, lr}
 800145e:	b082      	sub	sp, #8
 8001460:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001462:	4b1e      	ldr	r3, [pc, #120]	@ (80014dc <MX_DMA_Init+0x80>)
 8001464:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001466:	4a1d      	ldr	r2, [pc, #116]	@ (80014dc <MX_DMA_Init+0x80>)
 8001468:	f043 0301 	orr.w	r3, r3, #1
 800146c:	6493      	str	r3, [r2, #72]	@ 0x48
 800146e:	4b1b      	ldr	r3, [pc, #108]	@ (80014dc <MX_DMA_Init+0x80>)
 8001470:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001472:	f003 0301 	and.w	r3, r3, #1
 8001476:	607b      	str	r3, [r7, #4]
 8001478:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 800147a:	4b18      	ldr	r3, [pc, #96]	@ (80014dc <MX_DMA_Init+0x80>)
 800147c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800147e:	4a17      	ldr	r2, [pc, #92]	@ (80014dc <MX_DMA_Init+0x80>)
 8001480:	f043 0302 	orr.w	r3, r3, #2
 8001484:	6493      	str	r3, [r2, #72]	@ 0x48
 8001486:	4b15      	ldr	r3, [pc, #84]	@ (80014dc <MX_DMA_Init+0x80>)
 8001488:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800148a:	f003 0302 	and.w	r3, r3, #2
 800148e:	603b      	str	r3, [r7, #0]
 8001490:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 5, 0);
 8001492:	2200      	movs	r2, #0
 8001494:	2105      	movs	r1, #5
 8001496:	2010      	movs	r0, #16
 8001498:	f001 fe36 	bl	8003108 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 800149c:	2010      	movs	r0, #16
 800149e:	f001 fe4f 	bl	8003140 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel7_IRQn, 5, 0);
 80014a2:	2200      	movs	r2, #0
 80014a4:	2105      	movs	r1, #5
 80014a6:	2011      	movs	r0, #17
 80014a8:	f001 fe2e 	bl	8003108 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel7_IRQn);
 80014ac:	2011      	movs	r0, #17
 80014ae:	f001 fe47 	bl	8003140 <HAL_NVIC_EnableIRQ>
  /* DMA2_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Channel6_IRQn, 5, 0);
 80014b2:	2200      	movs	r2, #0
 80014b4:	2105      	movs	r1, #5
 80014b6:	2044      	movs	r0, #68	@ 0x44
 80014b8:	f001 fe26 	bl	8003108 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel6_IRQn);
 80014bc:	2044      	movs	r0, #68	@ 0x44
 80014be:	f001 fe3f 	bl	8003140 <HAL_NVIC_EnableIRQ>
  /* DMA2_Channel7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Channel7_IRQn, 5, 0);
 80014c2:	2200      	movs	r2, #0
 80014c4:	2105      	movs	r1, #5
 80014c6:	2045      	movs	r0, #69	@ 0x45
 80014c8:	f001 fe1e 	bl	8003108 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel7_IRQn);
 80014cc:	2045      	movs	r0, #69	@ 0x45
 80014ce:	f001 fe37 	bl	8003140 <HAL_NVIC_EnableIRQ>

}
 80014d2:	bf00      	nop
 80014d4:	3708      	adds	r7, #8
 80014d6:	46bd      	mov	sp, r7
 80014d8:	bd80      	pop	{r7, pc}
 80014da:	bf00      	nop
 80014dc:	40021000 	.word	0x40021000

080014e0 <cubemx_transport_open>:
#define UART_DMA_BUFFER_SIZE 2048

static uint8_t dma_buffer[UART_DMA_BUFFER_SIZE];
static size_t dma_head = 0, dma_tail = 0;

bool cubemx_transport_open(struct uxrCustomTransport * transport){
 80014e0:	b580      	push	{r7, lr}
 80014e2:	b084      	sub	sp, #16
 80014e4:	af00      	add	r7, sp, #0
 80014e6:	6078      	str	r0, [r7, #4]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	f8d3 328c 	ldr.w	r3, [r3, #652]	@ 0x28c
 80014ee:	60fb      	str	r3, [r7, #12]
    HAL_UART_Receive_DMA(uart, dma_buffer, UART_DMA_BUFFER_SIZE);
 80014f0:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80014f4:	4904      	ldr	r1, [pc, #16]	@ (8001508 <cubemx_transport_open+0x28>)
 80014f6:	68f8      	ldr	r0, [r7, #12]
 80014f8:	f007 f870 	bl	80085dc <HAL_UART_Receive_DMA>
    return true;
 80014fc:	2301      	movs	r3, #1
}
 80014fe:	4618      	mov	r0, r3
 8001500:	3710      	adds	r7, #16
 8001502:	46bd      	mov	sp, r7
 8001504:	bd80      	pop	{r7, pc}
 8001506:	bf00      	nop
 8001508:	20000fac 	.word	0x20000fac

0800150c <cubemx_transport_close>:

bool cubemx_transport_close(struct uxrCustomTransport * transport){
 800150c:	b580      	push	{r7, lr}
 800150e:	b084      	sub	sp, #16
 8001510:	af00      	add	r7, sp, #0
 8001512:	6078      	str	r0, [r7, #4]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	f8d3 328c 	ldr.w	r3, [r3, #652]	@ 0x28c
 800151a:	60fb      	str	r3, [r7, #12]
    HAL_UART_DMAStop(uart);
 800151c:	68f8      	ldr	r0, [r7, #12]
 800151e:	f007 f8a9 	bl	8008674 <HAL_UART_DMAStop>
    return true;
 8001522:	2301      	movs	r3, #1
}
 8001524:	4618      	mov	r0, r3
 8001526:	3710      	adds	r7, #16
 8001528:	46bd      	mov	sp, r7
 800152a:	bd80      	pop	{r7, pc}

0800152c <cubemx_transport_write>:

size_t cubemx_transport_write(struct uxrCustomTransport* transport, uint8_t * buf, size_t len, uint8_t * err){
 800152c:	b580      	push	{r7, lr}
 800152e:	b086      	sub	sp, #24
 8001530:	af00      	add	r7, sp, #0
 8001532:	60f8      	str	r0, [r7, #12]
 8001534:	60b9      	str	r1, [r7, #8]
 8001536:	607a      	str	r2, [r7, #4]
 8001538:	603b      	str	r3, [r7, #0]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 800153a:	68fb      	ldr	r3, [r7, #12]
 800153c:	f8d3 328c 	ldr.w	r3, [r3, #652]	@ 0x28c
 8001540:	617b      	str	r3, [r7, #20]

    HAL_StatusTypeDef ret;
    if (uart->gState == HAL_UART_STATE_READY){
 8001542:	697b      	ldr	r3, [r7, #20]
 8001544:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8001546:	2b20      	cmp	r3, #32
 8001548:	d11a      	bne.n	8001580 <cubemx_transport_write+0x54>
        ret = HAL_UART_Transmit_DMA(uart, buf, len);
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	b29b      	uxth	r3, r3
 800154e:	461a      	mov	r2, r3
 8001550:	68b9      	ldr	r1, [r7, #8]
 8001552:	6978      	ldr	r0, [r7, #20]
 8001554:	f006 ffc6 	bl	80084e4 <HAL_UART_Transmit_DMA>
 8001558:	4603      	mov	r3, r0
 800155a:	74fb      	strb	r3, [r7, #19]
        while (ret == HAL_OK && uart->gState != HAL_UART_STATE_READY){
 800155c:	e002      	b.n	8001564 <cubemx_transport_write+0x38>
            osDelay(1);
 800155e:	2001      	movs	r0, #1
 8001560:	f009 fa2e 	bl	800a9c0 <osDelay>
        while (ret == HAL_OK && uart->gState != HAL_UART_STATE_READY){
 8001564:	7cfb      	ldrb	r3, [r7, #19]
 8001566:	2b00      	cmp	r3, #0
 8001568:	d103      	bne.n	8001572 <cubemx_transport_write+0x46>
 800156a:	697b      	ldr	r3, [r7, #20]
 800156c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800156e:	2b20      	cmp	r3, #32
 8001570:	d1f5      	bne.n	800155e <cubemx_transport_write+0x32>
        }

        return (ret == HAL_OK) ? len : 0;
 8001572:	7cfb      	ldrb	r3, [r7, #19]
 8001574:	2b00      	cmp	r3, #0
 8001576:	d101      	bne.n	800157c <cubemx_transport_write+0x50>
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	e002      	b.n	8001582 <cubemx_transport_write+0x56>
 800157c:	2300      	movs	r3, #0
 800157e:	e000      	b.n	8001582 <cubemx_transport_write+0x56>
    }else{
        return 0;
 8001580:	2300      	movs	r3, #0
    }
}
 8001582:	4618      	mov	r0, r3
 8001584:	3718      	adds	r7, #24
 8001586:	46bd      	mov	sp, r7
 8001588:	bd80      	pop	{r7, pc}
	...

0800158c <cubemx_transport_read>:

size_t cubemx_transport_read(struct uxrCustomTransport* transport, uint8_t* buf, size_t len, int timeout, uint8_t* err){
 800158c:	b580      	push	{r7, lr}
 800158e:	b088      	sub	sp, #32
 8001590:	af00      	add	r7, sp, #0
 8001592:	60f8      	str	r0, [r7, #12]
 8001594:	60b9      	str	r1, [r7, #8]
 8001596:	607a      	str	r2, [r7, #4]
 8001598:	603b      	str	r3, [r7, #0]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 800159a:	68fb      	ldr	r3, [r7, #12]
 800159c:	f8d3 328c 	ldr.w	r3, [r3, #652]	@ 0x28c
 80015a0:	617b      	str	r3, [r7, #20]

    int ms_used = 0;
 80015a2:	2300      	movs	r3, #0
 80015a4:	61fb      	str	r3, [r7, #28]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80015a6:	b672      	cpsid	i
}
 80015a8:	bf00      	nop
    do
    {
        __disable_irq();
        dma_tail = UART_DMA_BUFFER_SIZE - __HAL_DMA_GET_COUNTER(uart->hdmarx);
 80015aa:	697b      	ldr	r3, [r7, #20]
 80015ac:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	685b      	ldr	r3, [r3, #4]
 80015b2:	f5c3 6300 	rsb	r3, r3, #2048	@ 0x800
 80015b6:	4a1c      	ldr	r2, [pc, #112]	@ (8001628 <cubemx_transport_read+0x9c>)
 80015b8:	6013      	str	r3, [r2, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80015ba:	b662      	cpsie	i
}
 80015bc:	bf00      	nop
        __enable_irq();
        ms_used++;
 80015be:	69fb      	ldr	r3, [r7, #28]
 80015c0:	3301      	adds	r3, #1
 80015c2:	61fb      	str	r3, [r7, #28]
        osDelay(portTICK_RATE_MS);
 80015c4:	2001      	movs	r0, #1
 80015c6:	f009 f9fb 	bl	800a9c0 <osDelay>
    } while (dma_head == dma_tail && ms_used < timeout);
 80015ca:	4b18      	ldr	r3, [pc, #96]	@ (800162c <cubemx_transport_read+0xa0>)
 80015cc:	681a      	ldr	r2, [r3, #0]
 80015ce:	4b16      	ldr	r3, [pc, #88]	@ (8001628 <cubemx_transport_read+0x9c>)
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	429a      	cmp	r2, r3
 80015d4:	d103      	bne.n	80015de <cubemx_transport_read+0x52>
 80015d6:	69fa      	ldr	r2, [r7, #28]
 80015d8:	683b      	ldr	r3, [r7, #0]
 80015da:	429a      	cmp	r2, r3
 80015dc:	dbe3      	blt.n	80015a6 <cubemx_transport_read+0x1a>
    
    size_t wrote = 0;
 80015de:	2300      	movs	r3, #0
 80015e0:	61bb      	str	r3, [r7, #24]
    while ((dma_head != dma_tail) && (wrote < len)){
 80015e2:	e011      	b.n	8001608 <cubemx_transport_read+0x7c>
        buf[wrote] = dma_buffer[dma_head];
 80015e4:	4b11      	ldr	r3, [pc, #68]	@ (800162c <cubemx_transport_read+0xa0>)
 80015e6:	681a      	ldr	r2, [r3, #0]
 80015e8:	68b9      	ldr	r1, [r7, #8]
 80015ea:	69bb      	ldr	r3, [r7, #24]
 80015ec:	440b      	add	r3, r1
 80015ee:	4910      	ldr	r1, [pc, #64]	@ (8001630 <cubemx_transport_read+0xa4>)
 80015f0:	5c8a      	ldrb	r2, [r1, r2]
 80015f2:	701a      	strb	r2, [r3, #0]
        dma_head = (dma_head + 1) % UART_DMA_BUFFER_SIZE;
 80015f4:	4b0d      	ldr	r3, [pc, #52]	@ (800162c <cubemx_transport_read+0xa0>)
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	3301      	adds	r3, #1
 80015fa:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80015fe:	4a0b      	ldr	r2, [pc, #44]	@ (800162c <cubemx_transport_read+0xa0>)
 8001600:	6013      	str	r3, [r2, #0]
        wrote++;
 8001602:	69bb      	ldr	r3, [r7, #24]
 8001604:	3301      	adds	r3, #1
 8001606:	61bb      	str	r3, [r7, #24]
    while ((dma_head != dma_tail) && (wrote < len)){
 8001608:	4b08      	ldr	r3, [pc, #32]	@ (800162c <cubemx_transport_read+0xa0>)
 800160a:	681a      	ldr	r2, [r3, #0]
 800160c:	4b06      	ldr	r3, [pc, #24]	@ (8001628 <cubemx_transport_read+0x9c>)
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	429a      	cmp	r2, r3
 8001612:	d003      	beq.n	800161c <cubemx_transport_read+0x90>
 8001614:	69ba      	ldr	r2, [r7, #24]
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	429a      	cmp	r2, r3
 800161a:	d3e3      	bcc.n	80015e4 <cubemx_transport_read+0x58>
    }
    
    return wrote;
 800161c:	69bb      	ldr	r3, [r7, #24]
}
 800161e:	4618      	mov	r0, r3
 8001620:	3720      	adds	r7, #32
 8001622:	46bd      	mov	sp, r7
 8001624:	bd80      	pop	{r7, pc}
 8001626:	bf00      	nop
 8001628:	200017b0 	.word	0x200017b0
 800162c:	200017ac 	.word	0x200017ac
 8001630:	20000fac 	.word	0x20000fac

08001634 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8001634:	b580      	push	{r7, lr}
 8001636:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8001638:	4a04      	ldr	r2, [pc, #16]	@ (800164c <MX_FREERTOS_Init+0x18>)
 800163a:	2100      	movs	r1, #0
 800163c:	4804      	ldr	r0, [pc, #16]	@ (8001650 <MX_FREERTOS_Init+0x1c>)
 800163e:	f009 f92d 	bl	800a89c <osThreadNew>
 8001642:	4603      	mov	r3, r0
 8001644:	4a03      	ldr	r2, [pc, #12]	@ (8001654 <MX_FREERTOS_Init+0x20>)
 8001646:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 8001648:	bf00      	nop
 800164a:	bd80      	pop	{r7, pc}
 800164c:	0801ad60 	.word	0x0801ad60
 8001650:	08001e31 	.word	0x08001e31
 8001654:	200017b4 	.word	0x200017b4

08001658 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001658:	b580      	push	{r7, lr}
 800165a:	b088      	sub	sp, #32
 800165c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800165e:	f107 030c 	add.w	r3, r7, #12
 8001662:	2200      	movs	r2, #0
 8001664:	601a      	str	r2, [r3, #0]
 8001666:	605a      	str	r2, [r3, #4]
 8001668:	609a      	str	r2, [r3, #8]
 800166a:	60da      	str	r2, [r3, #12]
 800166c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800166e:	4b1d      	ldr	r3, [pc, #116]	@ (80016e4 <MX_GPIO_Init+0x8c>)
 8001670:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001672:	4a1c      	ldr	r2, [pc, #112]	@ (80016e4 <MX_GPIO_Init+0x8c>)
 8001674:	f043 0304 	orr.w	r3, r3, #4
 8001678:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800167a:	4b1a      	ldr	r3, [pc, #104]	@ (80016e4 <MX_GPIO_Init+0x8c>)
 800167c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800167e:	f003 0304 	and.w	r3, r3, #4
 8001682:	60bb      	str	r3, [r7, #8]
 8001684:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001686:	4b17      	ldr	r3, [pc, #92]	@ (80016e4 <MX_GPIO_Init+0x8c>)
 8001688:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800168a:	4a16      	ldr	r2, [pc, #88]	@ (80016e4 <MX_GPIO_Init+0x8c>)
 800168c:	f043 0301 	orr.w	r3, r3, #1
 8001690:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001692:	4b14      	ldr	r3, [pc, #80]	@ (80016e4 <MX_GPIO_Init+0x8c>)
 8001694:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001696:	f003 0301 	and.w	r3, r3, #1
 800169a:	607b      	str	r3, [r7, #4]
 800169c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800169e:	4b11      	ldr	r3, [pc, #68]	@ (80016e4 <MX_GPIO_Init+0x8c>)
 80016a0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80016a2:	4a10      	ldr	r2, [pc, #64]	@ (80016e4 <MX_GPIO_Init+0x8c>)
 80016a4:	f043 0302 	orr.w	r3, r3, #2
 80016a8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80016aa:	4b0e      	ldr	r3, [pc, #56]	@ (80016e4 <MX_GPIO_Init+0x8c>)
 80016ac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80016ae:	f003 0302 	and.w	r3, r3, #2
 80016b2:	603b      	str	r3, [r7, #0]
 80016b4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, GPIO_PIN_RESET);
 80016b6:	2200      	movs	r2, #0
 80016b8:	2108      	movs	r1, #8
 80016ba:	480b      	ldr	r0, [pc, #44]	@ (80016e8 <MX_GPIO_Init+0x90>)
 80016bc:	f002 f948 	bl	8003950 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PB3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 80016c0:	2308      	movs	r3, #8
 80016c2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016c4:	2301      	movs	r3, #1
 80016c6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016c8:	2300      	movs	r3, #0
 80016ca:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016cc:	2300      	movs	r3, #0
 80016ce:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80016d0:	f107 030c 	add.w	r3, r7, #12
 80016d4:	4619      	mov	r1, r3
 80016d6:	4804      	ldr	r0, [pc, #16]	@ (80016e8 <MX_GPIO_Init+0x90>)
 80016d8:	f001 ffd0 	bl	800367c <HAL_GPIO_Init>

}
 80016dc:	bf00      	nop
 80016de:	3720      	adds	r7, #32
 80016e0:	46bd      	mov	sp, r7
 80016e2:	bd80      	pop	{r7, pc}
 80016e4:	40021000 	.word	0x40021000
 80016e8:	48000400 	.word	0x48000400

080016ec <MX_I2C1_Init>:
DMA_HandleTypeDef hdma_i2c1_rx;
DMA_HandleTypeDef hdma_i2c1_tx;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80016ec:	b580      	push	{r7, lr}
 80016ee:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80016f0:	4b1b      	ldr	r3, [pc, #108]	@ (8001760 <MX_I2C1_Init+0x74>)
 80016f2:	4a1c      	ldr	r2, [pc, #112]	@ (8001764 <MX_I2C1_Init+0x78>)
 80016f4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00702991;
 80016f6:	4b1a      	ldr	r3, [pc, #104]	@ (8001760 <MX_I2C1_Init+0x74>)
 80016f8:	4a1b      	ldr	r2, [pc, #108]	@ (8001768 <MX_I2C1_Init+0x7c>)
 80016fa:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80016fc:	4b18      	ldr	r3, [pc, #96]	@ (8001760 <MX_I2C1_Init+0x74>)
 80016fe:	2200      	movs	r2, #0
 8001700:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001702:	4b17      	ldr	r3, [pc, #92]	@ (8001760 <MX_I2C1_Init+0x74>)
 8001704:	2201      	movs	r2, #1
 8001706:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001708:	4b15      	ldr	r3, [pc, #84]	@ (8001760 <MX_I2C1_Init+0x74>)
 800170a:	2200      	movs	r2, #0
 800170c:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800170e:	4b14      	ldr	r3, [pc, #80]	@ (8001760 <MX_I2C1_Init+0x74>)
 8001710:	2200      	movs	r2, #0
 8001712:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001714:	4b12      	ldr	r3, [pc, #72]	@ (8001760 <MX_I2C1_Init+0x74>)
 8001716:	2200      	movs	r2, #0
 8001718:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800171a:	4b11      	ldr	r3, [pc, #68]	@ (8001760 <MX_I2C1_Init+0x74>)
 800171c:	2200      	movs	r2, #0
 800171e:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001720:	4b0f      	ldr	r3, [pc, #60]	@ (8001760 <MX_I2C1_Init+0x74>)
 8001722:	2200      	movs	r2, #0
 8001724:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001726:	480e      	ldr	r0, [pc, #56]	@ (8001760 <MX_I2C1_Init+0x74>)
 8001728:	f002 f92a 	bl	8003980 <HAL_I2C_Init>
 800172c:	4603      	mov	r3, r0
 800172e:	2b00      	cmp	r3, #0
 8001730:	d001      	beq.n	8001736 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8001732:	f000 fde3 	bl	80022fc <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001736:	2100      	movs	r1, #0
 8001738:	4809      	ldr	r0, [pc, #36]	@ (8001760 <MX_I2C1_Init+0x74>)
 800173a:	f004 f9a5 	bl	8005a88 <HAL_I2CEx_ConfigAnalogFilter>
 800173e:	4603      	mov	r3, r0
 8001740:	2b00      	cmp	r3, #0
 8001742:	d001      	beq.n	8001748 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8001744:	f000 fdda 	bl	80022fc <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001748:	2100      	movs	r1, #0
 800174a:	4805      	ldr	r0, [pc, #20]	@ (8001760 <MX_I2C1_Init+0x74>)
 800174c:	f004 f9e7 	bl	8005b1e <HAL_I2CEx_ConfigDigitalFilter>
 8001750:	4603      	mov	r3, r0
 8001752:	2b00      	cmp	r3, #0
 8001754:	d001      	beq.n	800175a <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8001756:	f000 fdd1 	bl	80022fc <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800175a:	bf00      	nop
 800175c:	bd80      	pop	{r7, pc}
 800175e:	bf00      	nop
 8001760:	20005860 	.word	0x20005860
 8001764:	40005400 	.word	0x40005400
 8001768:	00702991 	.word	0x00702991

0800176c <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 800176c:	b580      	push	{r7, lr}
 800176e:	b09e      	sub	sp, #120	@ 0x78
 8001770:	af00      	add	r7, sp, #0
 8001772:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001774:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8001778:	2200      	movs	r2, #0
 800177a:	601a      	str	r2, [r3, #0]
 800177c:	605a      	str	r2, [r3, #4]
 800177e:	609a      	str	r2, [r3, #8]
 8001780:	60da      	str	r2, [r3, #12]
 8001782:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001784:	f107 0310 	add.w	r3, r7, #16
 8001788:	2254      	movs	r2, #84	@ 0x54
 800178a:	2100      	movs	r1, #0
 800178c:	4618      	mov	r0, r3
 800178e:	f018 fa39 	bl	8019c04 <memset>
  if(i2cHandle->Instance==I2C1)
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	4a4c      	ldr	r2, [pc, #304]	@ (80018c8 <HAL_I2C_MspInit+0x15c>)
 8001798:	4293      	cmp	r3, r2
 800179a:	f040 8090 	bne.w	80018be <HAL_I2C_MspInit+0x152>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 800179e:	2340      	movs	r3, #64	@ 0x40
 80017a0:	613b      	str	r3, [r7, #16]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80017a2:	2300      	movs	r3, #0
 80017a4:	63fb      	str	r3, [r7, #60]	@ 0x3c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80017a6:	f107 0310 	add.w	r3, r7, #16
 80017aa:	4618      	mov	r0, r3
 80017ac:	f005 f8e2 	bl	8006974 <HAL_RCCEx_PeriphCLKConfig>
 80017b0:	4603      	mov	r3, r0
 80017b2:	2b00      	cmp	r3, #0
 80017b4:	d001      	beq.n	80017ba <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 80017b6:	f000 fda1 	bl	80022fc <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80017ba:	4b44      	ldr	r3, [pc, #272]	@ (80018cc <HAL_I2C_MspInit+0x160>)
 80017bc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80017be:	4a43      	ldr	r2, [pc, #268]	@ (80018cc <HAL_I2C_MspInit+0x160>)
 80017c0:	f043 0302 	orr.w	r3, r3, #2
 80017c4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80017c6:	4b41      	ldr	r3, [pc, #260]	@ (80018cc <HAL_I2C_MspInit+0x160>)
 80017c8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80017ca:	f003 0302 	and.w	r3, r3, #2
 80017ce:	60fb      	str	r3, [r7, #12]
 80017d0:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80017d2:	23c0      	movs	r3, #192	@ 0xc0
 80017d4:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80017d6:	2312      	movs	r3, #18
 80017d8:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80017da:	2301      	movs	r3, #1
 80017dc:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80017de:	2303      	movs	r3, #3
 80017e0:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80017e2:	2304      	movs	r3, #4
 80017e4:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80017e6:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 80017ea:	4619      	mov	r1, r3
 80017ec:	4838      	ldr	r0, [pc, #224]	@ (80018d0 <HAL_I2C_MspInit+0x164>)
 80017ee:	f001 ff45 	bl	800367c <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80017f2:	4b36      	ldr	r3, [pc, #216]	@ (80018cc <HAL_I2C_MspInit+0x160>)
 80017f4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80017f6:	4a35      	ldr	r2, [pc, #212]	@ (80018cc <HAL_I2C_MspInit+0x160>)
 80017f8:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80017fc:	6593      	str	r3, [r2, #88]	@ 0x58
 80017fe:	4b33      	ldr	r3, [pc, #204]	@ (80018cc <HAL_I2C_MspInit+0x160>)
 8001800:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001802:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001806:	60bb      	str	r3, [r7, #8]
 8001808:	68bb      	ldr	r3, [r7, #8]

    /* I2C1 DMA Init */
    /* I2C1_RX Init */
    hdma_i2c1_rx.Instance = DMA2_Channel6;
 800180a:	4b32      	ldr	r3, [pc, #200]	@ (80018d4 <HAL_I2C_MspInit+0x168>)
 800180c:	4a32      	ldr	r2, [pc, #200]	@ (80018d8 <HAL_I2C_MspInit+0x16c>)
 800180e:	601a      	str	r2, [r3, #0]
    hdma_i2c1_rx.Init.Request = DMA_REQUEST_5;
 8001810:	4b30      	ldr	r3, [pc, #192]	@ (80018d4 <HAL_I2C_MspInit+0x168>)
 8001812:	2205      	movs	r2, #5
 8001814:	605a      	str	r2, [r3, #4]
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001816:	4b2f      	ldr	r3, [pc, #188]	@ (80018d4 <HAL_I2C_MspInit+0x168>)
 8001818:	2200      	movs	r2, #0
 800181a:	609a      	str	r2, [r3, #8]
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800181c:	4b2d      	ldr	r3, [pc, #180]	@ (80018d4 <HAL_I2C_MspInit+0x168>)
 800181e:	2200      	movs	r2, #0
 8001820:	60da      	str	r2, [r3, #12]
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001822:	4b2c      	ldr	r3, [pc, #176]	@ (80018d4 <HAL_I2C_MspInit+0x168>)
 8001824:	2280      	movs	r2, #128	@ 0x80
 8001826:	611a      	str	r2, [r3, #16]
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001828:	4b2a      	ldr	r3, [pc, #168]	@ (80018d4 <HAL_I2C_MspInit+0x168>)
 800182a:	2200      	movs	r2, #0
 800182c:	615a      	str	r2, [r3, #20]
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800182e:	4b29      	ldr	r3, [pc, #164]	@ (80018d4 <HAL_I2C_MspInit+0x168>)
 8001830:	2200      	movs	r2, #0
 8001832:	619a      	str	r2, [r3, #24]
    hdma_i2c1_rx.Init.Mode = DMA_NORMAL;
 8001834:	4b27      	ldr	r3, [pc, #156]	@ (80018d4 <HAL_I2C_MspInit+0x168>)
 8001836:	2200      	movs	r2, #0
 8001838:	61da      	str	r2, [r3, #28]
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_LOW;
 800183a:	4b26      	ldr	r3, [pc, #152]	@ (80018d4 <HAL_I2C_MspInit+0x168>)
 800183c:	2200      	movs	r2, #0
 800183e:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 8001840:	4824      	ldr	r0, [pc, #144]	@ (80018d4 <HAL_I2C_MspInit+0x168>)
 8001842:	f001 fc8b 	bl	800315c <HAL_DMA_Init>
 8001846:	4603      	mov	r3, r0
 8001848:	2b00      	cmp	r3, #0
 800184a:	d001      	beq.n	8001850 <HAL_I2C_MspInit+0xe4>
    {
      Error_Handler();
 800184c:	f000 fd56 	bl	80022fc <Error_Handler>
    }

    __HAL_LINKDMA(i2cHandle,hdmarx,hdma_i2c1_rx);
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	4a20      	ldr	r2, [pc, #128]	@ (80018d4 <HAL_I2C_MspInit+0x168>)
 8001854:	63da      	str	r2, [r3, #60]	@ 0x3c
 8001856:	4a1f      	ldr	r2, [pc, #124]	@ (80018d4 <HAL_I2C_MspInit+0x168>)
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	6293      	str	r3, [r2, #40]	@ 0x28

    /* I2C1_TX Init */
    hdma_i2c1_tx.Instance = DMA2_Channel7;
 800185c:	4b1f      	ldr	r3, [pc, #124]	@ (80018dc <HAL_I2C_MspInit+0x170>)
 800185e:	4a20      	ldr	r2, [pc, #128]	@ (80018e0 <HAL_I2C_MspInit+0x174>)
 8001860:	601a      	str	r2, [r3, #0]
    hdma_i2c1_tx.Init.Request = DMA_REQUEST_5;
 8001862:	4b1e      	ldr	r3, [pc, #120]	@ (80018dc <HAL_I2C_MspInit+0x170>)
 8001864:	2205      	movs	r2, #5
 8001866:	605a      	str	r2, [r3, #4]
    hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001868:	4b1c      	ldr	r3, [pc, #112]	@ (80018dc <HAL_I2C_MspInit+0x170>)
 800186a:	2210      	movs	r2, #16
 800186c:	609a      	str	r2, [r3, #8]
    hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800186e:	4b1b      	ldr	r3, [pc, #108]	@ (80018dc <HAL_I2C_MspInit+0x170>)
 8001870:	2200      	movs	r2, #0
 8001872:	60da      	str	r2, [r3, #12]
    hdma_i2c1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001874:	4b19      	ldr	r3, [pc, #100]	@ (80018dc <HAL_I2C_MspInit+0x170>)
 8001876:	2280      	movs	r2, #128	@ 0x80
 8001878:	611a      	str	r2, [r3, #16]
    hdma_i2c1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800187a:	4b18      	ldr	r3, [pc, #96]	@ (80018dc <HAL_I2C_MspInit+0x170>)
 800187c:	2200      	movs	r2, #0
 800187e:	615a      	str	r2, [r3, #20]
    hdma_i2c1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001880:	4b16      	ldr	r3, [pc, #88]	@ (80018dc <HAL_I2C_MspInit+0x170>)
 8001882:	2200      	movs	r2, #0
 8001884:	619a      	str	r2, [r3, #24]
    hdma_i2c1_tx.Init.Mode = DMA_NORMAL;
 8001886:	4b15      	ldr	r3, [pc, #84]	@ (80018dc <HAL_I2C_MspInit+0x170>)
 8001888:	2200      	movs	r2, #0
 800188a:	61da      	str	r2, [r3, #28]
    hdma_i2c1_tx.Init.Priority = DMA_PRIORITY_LOW;
 800188c:	4b13      	ldr	r3, [pc, #76]	@ (80018dc <HAL_I2C_MspInit+0x170>)
 800188e:	2200      	movs	r2, #0
 8001890:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK)
 8001892:	4812      	ldr	r0, [pc, #72]	@ (80018dc <HAL_I2C_MspInit+0x170>)
 8001894:	f001 fc62 	bl	800315c <HAL_DMA_Init>
 8001898:	4603      	mov	r3, r0
 800189a:	2b00      	cmp	r3, #0
 800189c:	d001      	beq.n	80018a2 <HAL_I2C_MspInit+0x136>
    {
      Error_Handler();
 800189e:	f000 fd2d 	bl	80022fc <Error_Handler>
    }

    __HAL_LINKDMA(i2cHandle,hdmatx,hdma_i2c1_tx);
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	4a0d      	ldr	r2, [pc, #52]	@ (80018dc <HAL_I2C_MspInit+0x170>)
 80018a6:	639a      	str	r2, [r3, #56]	@ 0x38
 80018a8:	4a0c      	ldr	r2, [pc, #48]	@ (80018dc <HAL_I2C_MspInit+0x170>)
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	6293      	str	r3, [r2, #40]	@ 0x28

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 5, 0);
 80018ae:	2200      	movs	r2, #0
 80018b0:	2105      	movs	r1, #5
 80018b2:	201f      	movs	r0, #31
 80018b4:	f001 fc28 	bl	8003108 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 80018b8:	201f      	movs	r0, #31
 80018ba:	f001 fc41 	bl	8003140 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 80018be:	bf00      	nop
 80018c0:	3778      	adds	r7, #120	@ 0x78
 80018c2:	46bd      	mov	sp, r7
 80018c4:	bd80      	pop	{r7, pc}
 80018c6:	bf00      	nop
 80018c8:	40005400 	.word	0x40005400
 80018cc:	40021000 	.word	0x40021000
 80018d0:	48000400 	.word	0x48000400
 80018d4:	200058b4 	.word	0x200058b4
 80018d8:	4002046c 	.word	0x4002046c
 80018dc:	200058fc 	.word	0x200058fc
 80018e0:	40020480 	.word	0x40020480
 80018e4:	00000000 	.word	0x00000000

080018e8 <enc_timer_callback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void enc_timer_callback(rcl_timer_t * timer, int64_t last_call_time)
{
 80018e8:	b5b0      	push	{r4, r5, r7, lr}
 80018ea:	b08a      	sub	sp, #40	@ 0x28
 80018ec:	af00      	add	r7, sp, #0
 80018ee:	60f8      	str	r0, [r7, #12]
 80018f0:	e9c7 2300 	strd	r2, r3, [r7]
	static bool isfirst_callback = true;
	RCLC_UNUSED(last_call_time);
	if (timer != NULL)
 80018f4:	68fb      	ldr	r3, [r7, #12]
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	f000 81c3 	beq.w	8001c82 <enc_timer_callback+0x39a>
	{

#ifdef SENSOR_ON

		int16_t counter = __HAL_TIM_GET_COUNTER(&htim1);
 80018fc:	4baa      	ldr	r3, [pc, #680]	@ (8001ba8 <enc_timer_callback+0x2c0>)
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001902:	847b      	strh	r3, [r7, #34]	@ 0x22
		int32_t delta_counter = counter - enc.prev_counter;
 8001904:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 8001908:	4aa8      	ldr	r2, [pc, #672]	@ (8001bac <enc_timer_callback+0x2c4>)
 800190a:	f9b2 2000 	ldrsh.w	r2, [r2]
 800190e:	1a9b      	subs	r3, r3, r2
 8001910:	61fb      	str	r3, [r7, #28]
		enc.prev_counter = counter;
 8001912:	4aa6      	ldr	r2, [pc, #664]	@ (8001bac <enc_timer_callback+0x2c4>)
 8001914:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8001916:	8013      	strh	r3, [r2, #0]

		if (delta_counter < -32768) enc.pos += (65535.0 * enc.gain);
 8001918:	69fb      	ldr	r3, [r7, #28]
 800191a:	f513 4f00 	cmn.w	r3, #32768	@ 0x8000
 800191e:	da16      	bge.n	800194e <enc_timer_callback+0x66>
 8001920:	4ba2      	ldr	r3, [pc, #648]	@ (8001bac <enc_timer_callback+0x2c4>)
 8001922:	e9d3 4506 	ldrd	r4, r5, [r3, #24]
 8001926:	4ba1      	ldr	r3, [pc, #644]	@ (8001bac <enc_timer_callback+0x2c4>)
 8001928:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 800192c:	a39c      	add	r3, pc, #624	@ (adr r3, 8001ba0 <enc_timer_callback+0x2b8>)
 800192e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001932:	f7fe fe71 	bl	8000618 <__aeabi_dmul>
 8001936:	4602      	mov	r2, r0
 8001938:	460b      	mov	r3, r1
 800193a:	4620      	mov	r0, r4
 800193c:	4629      	mov	r1, r5
 800193e:	f7fe fcb5 	bl	80002ac <__adddf3>
 8001942:	4602      	mov	r2, r0
 8001944:	460b      	mov	r3, r1
 8001946:	4999      	ldr	r1, [pc, #612]	@ (8001bac <enc_timer_callback+0x2c4>)
 8001948:	e9c1 2306 	strd	r2, r3, [r1, #24]
 800194c:	e019      	b.n	8001982 <enc_timer_callback+0x9a>
		else if (delta_counter > 32768) enc.pos -= (65535.0 * enc.gain);
 800194e:	69fb      	ldr	r3, [r7, #28]
 8001950:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8001954:	dd15      	ble.n	8001982 <enc_timer_callback+0x9a>
 8001956:	4b95      	ldr	r3, [pc, #596]	@ (8001bac <enc_timer_callback+0x2c4>)
 8001958:	e9d3 4506 	ldrd	r4, r5, [r3, #24]
 800195c:	4b93      	ldr	r3, [pc, #588]	@ (8001bac <enc_timer_callback+0x2c4>)
 800195e:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8001962:	a38f      	add	r3, pc, #572	@ (adr r3, 8001ba0 <enc_timer_callback+0x2b8>)
 8001964:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001968:	f7fe fe56 	bl	8000618 <__aeabi_dmul>
 800196c:	4602      	mov	r2, r0
 800196e:	460b      	mov	r3, r1
 8001970:	4620      	mov	r0, r4
 8001972:	4629      	mov	r1, r5
 8001974:	f7fe fc98 	bl	80002a8 <__aeabi_dsub>
 8001978:	4602      	mov	r2, r0
 800197a:	460b      	mov	r3, r1
 800197c:	498b      	ldr	r1, [pc, #556]	@ (8001bac <enc_timer_callback+0x2c4>)
 800197e:	e9c1 2306 	strd	r2, r3, [r1, #24]

		float speed = ((counter * enc.gain) + enc.pos - enc.unwrap_pos) * 50.0;
 8001982:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 8001986:	4618      	mov	r0, r3
 8001988:	f7fe fddc 	bl	8000544 <__aeabi_i2d>
 800198c:	4b87      	ldr	r3, [pc, #540]	@ (8001bac <enc_timer_callback+0x2c4>)
 800198e:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8001992:	f7fe fe41 	bl	8000618 <__aeabi_dmul>
 8001996:	4602      	mov	r2, r0
 8001998:	460b      	mov	r3, r1
 800199a:	4610      	mov	r0, r2
 800199c:	4619      	mov	r1, r3
 800199e:	4b83      	ldr	r3, [pc, #524]	@ (8001bac <enc_timer_callback+0x2c4>)
 80019a0:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 80019a4:	f7fe fc82 	bl	80002ac <__adddf3>
 80019a8:	4602      	mov	r2, r0
 80019aa:	460b      	mov	r3, r1
 80019ac:	4610      	mov	r0, r2
 80019ae:	4619      	mov	r1, r3
 80019b0:	4b7e      	ldr	r3, [pc, #504]	@ (8001bac <enc_timer_callback+0x2c4>)
 80019b2:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 80019b6:	f7fe fc77 	bl	80002a8 <__aeabi_dsub>
 80019ba:	4602      	mov	r2, r0
 80019bc:	460b      	mov	r3, r1
 80019be:	4610      	mov	r0, r2
 80019c0:	4619      	mov	r1, r3
 80019c2:	f04f 0200 	mov.w	r2, #0
 80019c6:	4b7a      	ldr	r3, [pc, #488]	@ (8001bb0 <enc_timer_callback+0x2c8>)
 80019c8:	f7fe fe26 	bl	8000618 <__aeabi_dmul>
 80019cc:	4602      	mov	r2, r0
 80019ce:	460b      	mov	r3, r1
 80019d0:	4610      	mov	r0, r2
 80019d2:	4619      	mov	r1, r3
 80019d4:	f7ff f8da 	bl	8000b8c <__aeabi_d2f>
 80019d8:	4603      	mov	r3, r0
 80019da:	61bb      	str	r3, [r7, #24]
		speed_filt = speed;
 80019dc:	4a75      	ldr	r2, [pc, #468]	@ (8001bb4 <enc_timer_callback+0x2cc>)
 80019de:	69bb      	ldr	r3, [r7, #24]
 80019e0:	6013      	str	r3, [r2, #0]
		enc.unwrap_pos = (counter * enc.gain) + enc.pos;
 80019e2:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 80019e6:	4618      	mov	r0, r3
 80019e8:	f7fe fdac 	bl	8000544 <__aeabi_i2d>
 80019ec:	4b6f      	ldr	r3, [pc, #444]	@ (8001bac <enc_timer_callback+0x2c4>)
 80019ee:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 80019f2:	f7fe fe11 	bl	8000618 <__aeabi_dmul>
 80019f6:	4602      	mov	r2, r0
 80019f8:	460b      	mov	r3, r1
 80019fa:	4610      	mov	r0, r2
 80019fc:	4619      	mov	r1, r3
 80019fe:	4b6b      	ldr	r3, [pc, #428]	@ (8001bac <enc_timer_callback+0x2c4>)
 8001a00:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8001a04:	f7fe fc52 	bl	80002ac <__adddf3>
 8001a08:	4602      	mov	r2, r0
 8001a0a:	460b      	mov	r3, r1
 8001a0c:	4967      	ldr	r1, [pc, #412]	@ (8001bac <enc_timer_callback+0x2c4>)
 8001a0e:	e9c1 2304 	strd	r2, r3, [r1, #16]

		float error = bldc_cmd - speed_filt;
 8001a12:	4b69      	ldr	r3, [pc, #420]	@ (8001bb8 <enc_timer_callback+0x2d0>)
 8001a14:	ed93 7a00 	vldr	s14, [r3]
 8001a18:	4b66      	ldr	r3, [pc, #408]	@ (8001bb4 <enc_timer_callback+0x2cc>)
 8001a1a:	edd3 7a00 	vldr	s15, [r3]
 8001a1e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001a22:	edc7 7a05 	vstr	s15, [r7, #20]
		float u = 0;
 8001a26:	f04f 0300 	mov.w	r3, #0
 8001a2a:	627b      	str	r3, [r7, #36]	@ 0x24

		switch (state)
 8001a2c:	4b63      	ldr	r3, [pc, #396]	@ (8001bbc <enc_timer_callback+0x2d4>)
 8001a2e:	781b      	ldrb	r3, [r3, #0]
 8001a30:	2b03      	cmp	r3, #3
 8001a32:	f200 8095 	bhi.w	8001b60 <enc_timer_callback+0x278>
 8001a36:	a201      	add	r2, pc, #4	@ (adr r2, 8001a3c <enc_timer_callback+0x154>)
 8001a38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001a3c:	08001a4d 	.word	0x08001a4d
 8001a40:	08001ae1 	.word	0x08001ae1
 8001a44:	08001b29 	.word	0x08001b29
 8001a48:	08001a85 	.word	0x08001a85
		{
		case forward:
			if (bldc_cmd > 0) u = PID_CONTROLLER_Compute(&pid, error);
 8001a4c:	4b5a      	ldr	r3, [pc, #360]	@ (8001bb8 <enc_timer_callback+0x2d0>)
 8001a4e:	edd3 7a00 	vldr	s15, [r3]
 8001a52:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001a56:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a5a:	dd07      	ble.n	8001a6c <enc_timer_callback+0x184>
 8001a5c:	ed97 0a05 	vldr	s0, [r7, #20]
 8001a60:	4857      	ldr	r0, [pc, #348]	@ (8001bc0 <enc_timer_callback+0x2d8>)
 8001a62:	f008 fcb2 	bl	800a3ca <PID_CONTROLLER_Compute>
 8001a66:	ed87 0a09 	vstr	s0, [r7, #36]	@ 0x24
 8001a6a:	e005      	b.n	8001a78 <enc_timer_callback+0x190>
			else {
				u = 0;
 8001a6c:	f04f 0300 	mov.w	r3, #0
 8001a70:	627b      	str	r3, [r7, #36]	@ 0x24
				state = brake;
 8001a72:	4b52      	ldr	r3, [pc, #328]	@ (8001bbc <enc_timer_callback+0x2d4>)
 8001a74:	2203      	movs	r2, #3
 8001a76:	701a      	strb	r2, [r3, #0]
			}
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, 0);
 8001a78:	2200      	movs	r2, #0
 8001a7a:	2108      	movs	r1, #8
 8001a7c:	4851      	ldr	r0, [pc, #324]	@ (8001bc4 <enc_timer_callback+0x2dc>)
 8001a7e:	f001 ff67 	bl	8003950 <HAL_GPIO_WritePin>
			break;
 8001a82:	e06d      	b.n	8001b60 <enc_timer_callback+0x278>
		case brake:
			pid.ek_1=0;
 8001a84:	4b4e      	ldr	r3, [pc, #312]	@ (8001bc0 <enc_timer_callback+0x2d8>)
 8001a86:	f04f 0200 	mov.w	r2, #0
 8001a8a:	60da      	str	r2, [r3, #12]
			pid.ek_2=0;
 8001a8c:	4b4c      	ldr	r3, [pc, #304]	@ (8001bc0 <enc_timer_callback+0x2d8>)
 8001a8e:	f04f 0200 	mov.w	r2, #0
 8001a92:	611a      	str	r2, [r3, #16]
			pid.u=0;
 8001a94:	4b4a      	ldr	r3, [pc, #296]	@ (8001bc0 <enc_timer_callback+0x2d8>)
 8001a96:	f04f 0200 	mov.w	r2, #0
 8001a9a:	615a      	str	r2, [r3, #20]
			u = PID_CONTROLLER_Compute(&pid, error);
 8001a9c:	ed97 0a05 	vldr	s0, [r7, #20]
 8001aa0:	4847      	ldr	r0, [pc, #284]	@ (8001bc0 <enc_timer_callback+0x2d8>)
 8001aa2:	f008 fc92 	bl	800a3ca <PID_CONTROLLER_Compute>
 8001aa6:	ed87 0a09 	vstr	s0, [r7, #36]	@ 0x24
			if (bldc_cmd > 0) state = forward;
 8001aaa:	4b43      	ldr	r3, [pc, #268]	@ (8001bb8 <enc_timer_callback+0x2d0>)
 8001aac:	edd3 7a00 	vldr	s15, [r3]
 8001ab0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001ab4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001ab8:	dd03      	ble.n	8001ac2 <enc_timer_callback+0x1da>
 8001aba:	4b40      	ldr	r3, [pc, #256]	@ (8001bbc <enc_timer_callback+0x2d4>)
 8001abc:	2200      	movs	r2, #0
 8001abe:	701a      	strb	r2, [r3, #0]
			else if (bldc_cmd < 0) {
				state = backward_1;
				u = -500;
			}
			break;
 8001ac0:	e04e      	b.n	8001b60 <enc_timer_callback+0x278>
			else if (bldc_cmd < 0) {
 8001ac2:	4b3d      	ldr	r3, [pc, #244]	@ (8001bb8 <enc_timer_callback+0x2d0>)
 8001ac4:	edd3 7a00 	vldr	s15, [r3]
 8001ac8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001acc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001ad0:	d400      	bmi.n	8001ad4 <enc_timer_callback+0x1ec>
			break;
 8001ad2:	e045      	b.n	8001b60 <enc_timer_callback+0x278>
				state = backward_1;
 8001ad4:	4b39      	ldr	r3, [pc, #228]	@ (8001bbc <enc_timer_callback+0x2d4>)
 8001ad6:	2201      	movs	r2, #1
 8001ad8:	701a      	strb	r2, [r3, #0]
				u = -500;
 8001ada:	4b3b      	ldr	r3, [pc, #236]	@ (8001bc8 <enc_timer_callback+0x2e0>)
 8001adc:	627b      	str	r3, [r7, #36]	@ 0x24
			break;
 8001ade:	e03f      	b.n	8001b60 <enc_timer_callback+0x278>
		case backward_1:
			pid.ek_1=0;
 8001ae0:	4b37      	ldr	r3, [pc, #220]	@ (8001bc0 <enc_timer_callback+0x2d8>)
 8001ae2:	f04f 0200 	mov.w	r2, #0
 8001ae6:	60da      	str	r2, [r3, #12]
			pid.ek_2=0;
 8001ae8:	4b35      	ldr	r3, [pc, #212]	@ (8001bc0 <enc_timer_callback+0x2d8>)
 8001aea:	f04f 0200 	mov.w	r2, #0
 8001aee:	611a      	str	r2, [r3, #16]
			pid.u=0;
 8001af0:	4b33      	ldr	r3, [pc, #204]	@ (8001bc0 <enc_timer_callback+0x2d8>)
 8001af2:	f04f 0200 	mov.w	r2, #0
 8001af6:	615a      	str	r2, [r3, #20]
			u = 0;
 8001af8:	f04f 0300 	mov.w	r3, #0
 8001afc:	627b      	str	r3, [r7, #36]	@ 0x24
			if (bldc_cmd < 0) state = backward_2;
 8001afe:	4b2e      	ldr	r3, [pc, #184]	@ (8001bb8 <enc_timer_callback+0x2d0>)
 8001b00:	edd3 7a00 	vldr	s15, [r3]
 8001b04:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001b08:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b0c:	d503      	bpl.n	8001b16 <enc_timer_callback+0x22e>
 8001b0e:	4b2b      	ldr	r3, [pc, #172]	@ (8001bbc <enc_timer_callback+0x2d4>)
 8001b10:	2202      	movs	r2, #2
 8001b12:	701a      	strb	r2, [r3, #0]
 8001b14:	e002      	b.n	8001b1c <enc_timer_callback+0x234>
			else state = brake;
 8001b16:	4b29      	ldr	r3, [pc, #164]	@ (8001bbc <enc_timer_callback+0x2d4>)
 8001b18:	2203      	movs	r2, #3
 8001b1a:	701a      	strb	r2, [r3, #0]
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, 1);
 8001b1c:	2201      	movs	r2, #1
 8001b1e:	2108      	movs	r1, #8
 8001b20:	4828      	ldr	r0, [pc, #160]	@ (8001bc4 <enc_timer_callback+0x2dc>)
 8001b22:	f001 ff15 	bl	8003950 <HAL_GPIO_WritePin>
			break;
 8001b26:	e01b      	b.n	8001b60 <enc_timer_callback+0x278>
		case backward_2:
			if (bldc_cmd < 0) u = PID_CONTROLLER_Compute(&pid, error);
 8001b28:	4b23      	ldr	r3, [pc, #140]	@ (8001bb8 <enc_timer_callback+0x2d0>)
 8001b2a:	edd3 7a00 	vldr	s15, [r3]
 8001b2e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001b32:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b36:	d507      	bpl.n	8001b48 <enc_timer_callback+0x260>
 8001b38:	ed97 0a05 	vldr	s0, [r7, #20]
 8001b3c:	4820      	ldr	r0, [pc, #128]	@ (8001bc0 <enc_timer_callback+0x2d8>)
 8001b3e:	f008 fc44 	bl	800a3ca <PID_CONTROLLER_Compute>
 8001b42:	ed87 0a09 	vstr	s0, [r7, #36]	@ 0x24
 8001b46:	e005      	b.n	8001b54 <enc_timer_callback+0x26c>
			else {
				u = 0;
 8001b48:	f04f 0300 	mov.w	r3, #0
 8001b4c:	627b      	str	r3, [r7, #36]	@ 0x24
				state = brake;
 8001b4e:	4b1b      	ldr	r3, [pc, #108]	@ (8001bbc <enc_timer_callback+0x2d4>)
 8001b50:	2203      	movs	r2, #3
 8001b52:	701a      	strb	r2, [r3, #0]
			}
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, 0);
 8001b54:	2200      	movs	r2, #0
 8001b56:	2108      	movs	r1, #8
 8001b58:	481a      	ldr	r0, [pc, #104]	@ (8001bc4 <enc_timer_callback+0x2dc>)
 8001b5a:	f001 fef9 	bl	8003950 <HAL_GPIO_WritePin>
			break;
 8001b5e:	bf00      	nop
		}

		enc_msg.data.data[0] = enc.unwrap_pos;
 8001b60:	4b1a      	ldr	r3, [pc, #104]	@ (8001bcc <enc_timer_callback+0x2e4>)
 8001b62:	6919      	ldr	r1, [r3, #16]
 8001b64:	4b11      	ldr	r3, [pc, #68]	@ (8001bac <enc_timer_callback+0x2c4>)
 8001b66:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8001b6a:	e9c1 2300 	strd	r2, r3, [r1]

		if (u < 0 && (state == forward || state == brake)) {
 8001b6e:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8001b72:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001b76:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b7a:	d529      	bpl.n	8001bd0 <enc_timer_callback+0x2e8>
 8001b7c:	4b0f      	ldr	r3, [pc, #60]	@ (8001bbc <enc_timer_callback+0x2d4>)
 8001b7e:	781b      	ldrb	r3, [r3, #0]
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	d003      	beq.n	8001b8c <enc_timer_callback+0x2a4>
 8001b84:	4b0d      	ldr	r3, [pc, #52]	@ (8001bbc <enc_timer_callback+0x2d4>)
 8001b86:	781b      	ldrb	r3, [r3, #0]
 8001b88:	2b03      	cmp	r3, #3
 8001b8a:	d121      	bne.n	8001bd0 <enc_timer_callback+0x2e8>
			u = 0;
 8001b8c:	f04f 0300 	mov.w	r3, #0
 8001b90:	627b      	str	r3, [r7, #36]	@ 0x24
			pid.u=0;
 8001b92:	4b0b      	ldr	r3, [pc, #44]	@ (8001bc0 <enc_timer_callback+0x2d8>)
 8001b94:	f04f 0200 	mov.w	r2, #0
 8001b98:	615a      	str	r2, [r3, #20]
 8001b9a:	e02f      	b.n	8001bfc <enc_timer_callback+0x314>
 8001b9c:	f3af 8000 	nop.w
 8001ba0:	00000000 	.word	0x00000000
 8001ba4:	40efffe0 	.word	0x40efffe0
 8001ba8:	200059ac 	.word	0x200059ac
 8001bac:	20000018 	.word	0x20000018
 8001bb0:	40490000 	.word	0x40490000
 8001bb4:	2000594c 	.word	0x2000594c
 8001bb8:	20005948 	.word	0x20005948
 8001bbc:	20000016 	.word	0x20000016
 8001bc0:	200003c0 	.word	0x200003c0
 8001bc4:	48000400 	.word	0x48000400
 8001bc8:	c3fa0000 	.word	0xc3fa0000
 8001bcc:	20000260 	.word	0x20000260
		}
		else if (u > 0 && (state == backward_1 || state == backward_2)) {
 8001bd0:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8001bd4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001bd8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001bdc:	dd0e      	ble.n	8001bfc <enc_timer_callback+0x314>
 8001bde:	4b2b      	ldr	r3, [pc, #172]	@ (8001c8c <enc_timer_callback+0x3a4>)
 8001be0:	781b      	ldrb	r3, [r3, #0]
 8001be2:	2b01      	cmp	r3, #1
 8001be4:	d003      	beq.n	8001bee <enc_timer_callback+0x306>
 8001be6:	4b29      	ldr	r3, [pc, #164]	@ (8001c8c <enc_timer_callback+0x3a4>)
 8001be8:	781b      	ldrb	r3, [r3, #0]
 8001bea:	2b02      	cmp	r3, #2
 8001bec:	d106      	bne.n	8001bfc <enc_timer_callback+0x314>
			u = 0;
 8001bee:	f04f 0300 	mov.w	r3, #0
 8001bf2:	627b      	str	r3, [r7, #36]	@ 0x24
			pid.u=0;
 8001bf4:	4b26      	ldr	r3, [pc, #152]	@ (8001c90 <enc_timer_callback+0x3a8>)
 8001bf6:	f04f 0200 	mov.w	r2, #0
 8001bfa:	615a      	str	r2, [r3, #20]
		}

		RC_Write(&bldc, 1500 + u);
 8001bfc:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8001c00:	ed9f 7a24 	vldr	s14, [pc, #144]	@ 8001c94 <enc_timer_callback+0x3ac>
 8001c04:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001c08:	eeb0 0a67 	vmov.f32	s0, s15
 8001c0c:	4822      	ldr	r0, [pc, #136]	@ (8001c98 <enc_timer_callback+0x3b0>)
 8001c0e:	f008 fd3d 	bl	800a68c <RC_Write>
		RC_Write(&servo, ang2rc(servo_cmd));
 8001c12:	4b22      	ldr	r3, [pc, #136]	@ (8001c9c <enc_timer_callback+0x3b4>)
 8001c14:	edd3 7a00 	vldr	s15, [r3]
 8001c18:	eeb0 0a67 	vmov.f32	s0, s15
 8001c1c:	f000 fb0c 	bl	8002238 <ang2rc>
 8001c20:	eef0 7a40 	vmov.f32	s15, s0
 8001c24:	eeb0 0a67 	vmov.f32	s0, s15
 8001c28:	481d      	ldr	r0, [pc, #116]	@ (8001ca0 <enc_timer_callback+0x3b8>)
 8001c2a:	f008 fd2f 	bl	800a68c <RC_Write>

		enc_msg.data.data[1] = speed_filt;
 8001c2e:	4b1d      	ldr	r3, [pc, #116]	@ (8001ca4 <enc_timer_callback+0x3bc>)
 8001c30:	681a      	ldr	r2, [r3, #0]
 8001c32:	4b1d      	ldr	r3, [pc, #116]	@ (8001ca8 <enc_timer_callback+0x3c0>)
 8001c34:	691b      	ldr	r3, [r3, #16]
 8001c36:	f103 0408 	add.w	r4, r3, #8
 8001c3a:	4610      	mov	r0, r2
 8001c3c:	f7fe fc94 	bl	8000568 <__aeabi_f2d>
 8001c40:	4602      	mov	r2, r0
 8001c42:	460b      	mov	r3, r1
 8001c44:	e9c4 2300 	strd	r2, r3, [r4]
#endif
		if (!isfirst_callback) RCSOFTCHECK(rcl_publish(&enc_publisher, &enc_msg, NULL))
 8001c48:	4b18      	ldr	r3, [pc, #96]	@ (8001cac <enc_timer_callback+0x3c4>)
 8001c4a:	781b      	ldrb	r3, [r3, #0]
 8001c4c:	f083 0301 	eor.w	r3, r3, #1
 8001c50:	b2db      	uxtb	r3, r3
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	d006      	beq.n	8001c64 <enc_timer_callback+0x37c>
 8001c56:	2200      	movs	r2, #0
 8001c58:	4913      	ldr	r1, [pc, #76]	@ (8001ca8 <enc_timer_callback+0x3c0>)
 8001c5a:	4815      	ldr	r0, [pc, #84]	@ (8001cb0 <enc_timer_callback+0x3c8>)
 8001c5c:	f00b fcca 	bl	800d5f4 <rcl_publish>
 8001c60:	6138      	str	r0, [r7, #16]
		else isfirst_callback = !isfirst_callback;
	}
}
 8001c62:	e00e      	b.n	8001c82 <enc_timer_callback+0x39a>
		else isfirst_callback = !isfirst_callback;
 8001c64:	4b11      	ldr	r3, [pc, #68]	@ (8001cac <enc_timer_callback+0x3c4>)
 8001c66:	781b      	ldrb	r3, [r3, #0]
 8001c68:	2b00      	cmp	r3, #0
 8001c6a:	bf14      	ite	ne
 8001c6c:	2301      	movne	r3, #1
 8001c6e:	2300      	moveq	r3, #0
 8001c70:	b2db      	uxtb	r3, r3
 8001c72:	f083 0301 	eor.w	r3, r3, #1
 8001c76:	b2db      	uxtb	r3, r3
 8001c78:	f003 0301 	and.w	r3, r3, #1
 8001c7c:	b2da      	uxtb	r2, r3
 8001c7e:	4b0b      	ldr	r3, [pc, #44]	@ (8001cac <enc_timer_callback+0x3c4>)
 8001c80:	701a      	strb	r2, [r3, #0]
}
 8001c82:	bf00      	nop
 8001c84:	3728      	adds	r7, #40	@ 0x28
 8001c86:	46bd      	mov	sp, r7
 8001c88:	bdb0      	pop	{r4, r5, r7, pc}
 8001c8a:	bf00      	nop
 8001c8c:	20000016 	.word	0x20000016
 8001c90:	200003c0 	.word	0x200003c0
 8001c94:	44bb8000 	.word	0x44bb8000
 8001c98:	200003b0 	.word	0x200003b0
 8001c9c:	20005944 	.word	0x20005944
 8001ca0:	200003a0 	.word	0x200003a0
 8001ca4:	2000594c 	.word	0x2000594c
 8001ca8:	20000260 	.word	0x20000260
 8001cac:	20000038 	.word	0x20000038
 8001cb0:	2000024c 	.word	0x2000024c

08001cb4 <imu_timer_callback>:

void imu_timer_callback(rcl_timer_t * timer, int64_t last_call_time)
{
 8001cb4:	b580      	push	{r7, lr}
 8001cb6:	b086      	sub	sp, #24
 8001cb8:	af00      	add	r7, sp, #0
 8001cba:	60f8      	str	r0, [r7, #12]
 8001cbc:	e9c7 2300 	strd	r2, r3, [r7]
	static bool isfirst_callback = true;
	RCLC_UNUSED(last_call_time);
	if (timer != NULL)
 8001cc0:	68fb      	ldr	r3, [r7, #12]
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	d07f      	beq.n	8001dc6 <imu_timer_callback+0x112>
	{
#ifdef SENSOR_ON
		if (bno.flag == HAL_OK)
 8001cc6:	4b42      	ldr	r3, [pc, #264]	@ (8001dd0 <imu_timer_callback+0x11c>)
 8001cc8:	799b      	ldrb	r3, [r3, #6]
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	d106      	bne.n	8001cdc <imu_timer_callback+0x28>
		{
			BNO055_Read_DMA(&bno, 0);
 8001cce:	2100      	movs	r1, #0
 8001cd0:	483f      	ldr	r0, [pc, #252]	@ (8001dd0 <imu_timer_callback+0x11c>)
 8001cd2:	f008 f80d 	bl	8009cf0 <BNO055_Read_DMA>
			bno.flag = HAL_BUSY;
 8001cd6:	4b3e      	ldr	r3, [pc, #248]	@ (8001dd0 <imu_timer_callback+0x11c>)
 8001cd8:	2202      	movs	r2, #2
 8001cda:	719a      	strb	r2, [r3, #6]
		}
		imu_msg.data.data[0] = bno.gyro.x;
 8001cdc:	4b3d      	ldr	r3, [pc, #244]	@ (8001dd4 <imu_timer_callback+0x120>)
 8001cde:	6919      	ldr	r1, [r3, #16]
 8001ce0:	4b3b      	ldr	r3, [pc, #236]	@ (8001dd0 <imu_timer_callback+0x11c>)
 8001ce2:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 8001ce6:	e9c1 2300 	strd	r2, r3, [r1]
		imu_msg.data.data[1] = bno.gyro.y;
 8001cea:	4b3a      	ldr	r3, [pc, #232]	@ (8001dd4 <imu_timer_callback+0x120>)
 8001cec:	691b      	ldr	r3, [r3, #16]
 8001cee:	f103 0108 	add.w	r1, r3, #8
 8001cf2:	4b37      	ldr	r3, [pc, #220]	@ (8001dd0 <imu_timer_callback+0x11c>)
 8001cf4:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	@ 0x40
 8001cf8:	e9c1 2300 	strd	r2, r3, [r1]
		imu_msg.data.data[2] = bno.gyro.z;
 8001cfc:	4b35      	ldr	r3, [pc, #212]	@ (8001dd4 <imu_timer_callback+0x120>)
 8001cfe:	691b      	ldr	r3, [r3, #16]
 8001d00:	f103 0110 	add.w	r1, r3, #16
 8001d04:	4b32      	ldr	r3, [pc, #200]	@ (8001dd0 <imu_timer_callback+0x11c>)
 8001d06:	e9d3 2312 	ldrd	r2, r3, [r3, #72]	@ 0x48
 8001d0a:	e9c1 2300 	strd	r2, r3, [r1]
		imu_msg.data.data[3] = bno.lin_acc.x;
 8001d0e:	4b31      	ldr	r3, [pc, #196]	@ (8001dd4 <imu_timer_callback+0x120>)
 8001d10:	691b      	ldr	r3, [r3, #16]
 8001d12:	f103 0118 	add.w	r1, r3, #24
 8001d16:	4b2e      	ldr	r3, [pc, #184]	@ (8001dd0 <imu_timer_callback+0x11c>)
 8001d18:	e9d3 2322 	ldrd	r2, r3, [r3, #136]	@ 0x88
 8001d1c:	e9c1 2300 	strd	r2, r3, [r1]
		imu_msg.data.data[4] = bno.lin_acc.y;
 8001d20:	4b2c      	ldr	r3, [pc, #176]	@ (8001dd4 <imu_timer_callback+0x120>)
 8001d22:	691b      	ldr	r3, [r3, #16]
 8001d24:	f103 0120 	add.w	r1, r3, #32
 8001d28:	4b29      	ldr	r3, [pc, #164]	@ (8001dd0 <imu_timer_callback+0x11c>)
 8001d2a:	e9d3 2324 	ldrd	r2, r3, [r3, #144]	@ 0x90
 8001d2e:	e9c1 2300 	strd	r2, r3, [r1]
		imu_msg.data.data[5] = bno.lin_acc.z;
 8001d32:	4b28      	ldr	r3, [pc, #160]	@ (8001dd4 <imu_timer_callback+0x120>)
 8001d34:	691b      	ldr	r3, [r3, #16]
 8001d36:	f103 0128 	add.w	r1, r3, #40	@ 0x28
 8001d3a:	4b25      	ldr	r3, [pc, #148]	@ (8001dd0 <imu_timer_callback+0x11c>)
 8001d3c:	e9d3 2326 	ldrd	r2, r3, [r3, #152]	@ 0x98
 8001d40:	e9c1 2300 	strd	r2, r3, [r1]
		imu_msg.data.data[6] = bno.quat.x;
 8001d44:	4b23      	ldr	r3, [pc, #140]	@ (8001dd4 <imu_timer_callback+0x120>)
 8001d46:	691b      	ldr	r3, [r3, #16]
 8001d48:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8001d4c:	4b20      	ldr	r3, [pc, #128]	@ (8001dd0 <imu_timer_callback+0x11c>)
 8001d4e:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	@ 0x68
 8001d52:	e9c1 2300 	strd	r2, r3, [r1]
		imu_msg.data.data[7] = bno.quat.y;
 8001d56:	4b1f      	ldr	r3, [pc, #124]	@ (8001dd4 <imu_timer_callback+0x120>)
 8001d58:	691b      	ldr	r3, [r3, #16]
 8001d5a:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 8001d5e:	4b1c      	ldr	r3, [pc, #112]	@ (8001dd0 <imu_timer_callback+0x11c>)
 8001d60:	e9d3 231c 	ldrd	r2, r3, [r3, #112]	@ 0x70
 8001d64:	e9c1 2300 	strd	r2, r3, [r1]
		imu_msg.data.data[8] = bno.quat.z;
 8001d68:	4b1a      	ldr	r3, [pc, #104]	@ (8001dd4 <imu_timer_callback+0x120>)
 8001d6a:	691b      	ldr	r3, [r3, #16]
 8001d6c:	f103 0140 	add.w	r1, r3, #64	@ 0x40
 8001d70:	4b17      	ldr	r3, [pc, #92]	@ (8001dd0 <imu_timer_callback+0x11c>)
 8001d72:	e9d3 231e 	ldrd	r2, r3, [r3, #120]	@ 0x78
 8001d76:	e9c1 2300 	strd	r2, r3, [r1]
		imu_msg.data.data[9] = bno.quat.w;
 8001d7a:	4b16      	ldr	r3, [pc, #88]	@ (8001dd4 <imu_timer_callback+0x120>)
 8001d7c:	691b      	ldr	r3, [r3, #16]
 8001d7e:	f103 0148 	add.w	r1, r3, #72	@ 0x48
 8001d82:	4b13      	ldr	r3, [pc, #76]	@ (8001dd0 <imu_timer_callback+0x11c>)
 8001d84:	e9d3 2320 	ldrd	r2, r3, [r3, #128]	@ 0x80
 8001d88:	e9c1 2300 	strd	r2, r3, [r1]
#endif
		if (!isfirst_callback) RCSOFTCHECK(rcl_publish(&imu_publisher, &imu_msg, NULL))
 8001d8c:	4b12      	ldr	r3, [pc, #72]	@ (8001dd8 <imu_timer_callback+0x124>)
 8001d8e:	781b      	ldrb	r3, [r3, #0]
 8001d90:	f083 0301 	eor.w	r3, r3, #1
 8001d94:	b2db      	uxtb	r3, r3
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	d006      	beq.n	8001da8 <imu_timer_callback+0xf4>
 8001d9a:	2200      	movs	r2, #0
 8001d9c:	490d      	ldr	r1, [pc, #52]	@ (8001dd4 <imu_timer_callback+0x120>)
 8001d9e:	480f      	ldr	r0, [pc, #60]	@ (8001ddc <imu_timer_callback+0x128>)
 8001da0:	f00b fc28 	bl	800d5f4 <rcl_publish>
 8001da4:	6178      	str	r0, [r7, #20]
		else isfirst_callback = !isfirst_callback;
	}
}
 8001da6:	e00e      	b.n	8001dc6 <imu_timer_callback+0x112>
		else isfirst_callback = !isfirst_callback;
 8001da8:	4b0b      	ldr	r3, [pc, #44]	@ (8001dd8 <imu_timer_callback+0x124>)
 8001daa:	781b      	ldrb	r3, [r3, #0]
 8001dac:	2b00      	cmp	r3, #0
 8001dae:	bf14      	ite	ne
 8001db0:	2301      	movne	r3, #1
 8001db2:	2300      	moveq	r3, #0
 8001db4:	b2db      	uxtb	r3, r3
 8001db6:	f083 0301 	eor.w	r3, r3, #1
 8001dba:	b2db      	uxtb	r3, r3
 8001dbc:	f003 0301 	and.w	r3, r3, #1
 8001dc0:	b2da      	uxtb	r2, r3
 8001dc2:	4b05      	ldr	r3, [pc, #20]	@ (8001dd8 <imu_timer_callback+0x124>)
 8001dc4:	701a      	strb	r2, [r3, #0]
}
 8001dc6:	bf00      	nop
 8001dc8:	3718      	adds	r7, #24
 8001dca:	46bd      	mov	sp, r7
 8001dcc:	bd80      	pop	{r7, pc}
 8001dce:	bf00      	nop
 8001dd0:	200002b8 	.word	0x200002b8
 8001dd4:	2000027c 	.word	0x2000027c
 8001dd8:	20000039 	.word	0x20000039
 8001ddc:	20000250 	.word	0x20000250

08001de0 <subscription_callback>:

void subscription_callback(const void * msgin)
{
 8001de0:	b580      	push	{r7, lr}
 8001de2:	b084      	sub	sp, #16
 8001de4:	af00      	add	r7, sp, #0
 8001de6:	6078      	str	r0, [r7, #4]
	const std_msgs__msg__Float64MultiArray *cmd_msg = (const std_msgs__msg__Float64MultiArray *)msgin;
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	60fb      	str	r3, [r7, #12]

	servo_cmd = cmd_msg->data.data[0];
 8001dec:	68fb      	ldr	r3, [r7, #12]
 8001dee:	691b      	ldr	r3, [r3, #16]
 8001df0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001df4:	4610      	mov	r0, r2
 8001df6:	4619      	mov	r1, r3
 8001df8:	f7fe fec8 	bl	8000b8c <__aeabi_d2f>
 8001dfc:	4603      	mov	r3, r0
 8001dfe:	4a09      	ldr	r2, [pc, #36]	@ (8001e24 <subscription_callback+0x44>)
 8001e00:	6013      	str	r3, [r2, #0]
	bldc_cmd = cmd_msg->data.data[1];
 8001e02:	68fb      	ldr	r3, [r7, #12]
 8001e04:	691b      	ldr	r3, [r3, #16]
 8001e06:	3308      	adds	r3, #8
 8001e08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e0c:	4610      	mov	r0, r2
 8001e0e:	4619      	mov	r1, r3
 8001e10:	f7fe febc 	bl	8000b8c <__aeabi_d2f>
 8001e14:	4603      	mov	r3, r0
 8001e16:	4a04      	ldr	r2, [pc, #16]	@ (8001e28 <subscription_callback+0x48>)
 8001e18:	6013      	str	r3, [r2, #0]
}
 8001e1a:	bf00      	nop
 8001e1c:	3710      	adds	r7, #16
 8001e1e:	46bd      	mov	sp, r7
 8001e20:	bd80      	pop	{r7, pc}
 8001e22:	bf00      	nop
 8001e24:	20005944 	.word	0x20005944
 8001e28:	20005948 	.word	0x20005948
 8001e2c:	00000000 	.word	0x00000000

08001e30 <StartDefaultTask>:

void StartDefaultTask(void *argument)
{
 8001e30:	b5b0      	push	{r4, r5, r7, lr}
 8001e32:	b090      	sub	sp, #64	@ 0x40
 8001e34:	af02      	add	r7, sp, #8
 8001e36:	61f8      	str	r0, [r7, #28]
	rmw_uros_set_custom_transport(
 8001e38:	4b5d      	ldr	r3, [pc, #372]	@ (8001fb0 <StartDefaultTask+0x180>)
 8001e3a:	9301      	str	r3, [sp, #4]
 8001e3c:	4b5d      	ldr	r3, [pc, #372]	@ (8001fb4 <StartDefaultTask+0x184>)
 8001e3e:	9300      	str	r3, [sp, #0]
 8001e40:	4b5d      	ldr	r3, [pc, #372]	@ (8001fb8 <StartDefaultTask+0x188>)
 8001e42:	4a5e      	ldr	r2, [pc, #376]	@ (8001fbc <StartDefaultTask+0x18c>)
 8001e44:	495e      	ldr	r1, [pc, #376]	@ (8001fc0 <StartDefaultTask+0x190>)
 8001e46:	2001      	movs	r0, #1
 8001e48:	f00c fb3a 	bl	800e4c0 <rmw_uros_set_custom_transport>
			cubemx_transport_open,
			cubemx_transport_close,
			cubemx_transport_write,
			cubemx_transport_read);

	rcl_allocator_t freeRTOS_allocator = rcutils_get_zero_initialized_allocator();
 8001e4c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001e50:	4618      	mov	r0, r3
 8001e52:	f00c f8b5 	bl	800dfc0 <rcutils_get_zero_initialized_allocator>
	freeRTOS_allocator.allocate = microros_allocate;
 8001e56:	4b5b      	ldr	r3, [pc, #364]	@ (8001fc4 <StartDefaultTask+0x194>)
 8001e58:	627b      	str	r3, [r7, #36]	@ 0x24
	freeRTOS_allocator.deallocate = microros_deallocate;
 8001e5a:	4b5b      	ldr	r3, [pc, #364]	@ (8001fc8 <StartDefaultTask+0x198>)
 8001e5c:	62bb      	str	r3, [r7, #40]	@ 0x28
	freeRTOS_allocator.reallocate = microros_reallocate;
 8001e5e:	4b5b      	ldr	r3, [pc, #364]	@ (8001fcc <StartDefaultTask+0x19c>)
 8001e60:	62fb      	str	r3, [r7, #44]	@ 0x2c
	freeRTOS_allocator.zero_allocate =  microros_zero_allocate;
 8001e62:	4b5b      	ldr	r3, [pc, #364]	@ (8001fd0 <StartDefaultTask+0x1a0>)
 8001e64:	633b      	str	r3, [r7, #48]	@ 0x30
	if (!rcutils_set_default_allocator(&freeRTOS_allocator)) printf("Error on default allocators (line %d)\n", __LINE__);
 8001e66:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001e6a:	4618      	mov	r0, r3
 8001e6c:	f00c f8b6 	bl	800dfdc <rcutils_set_default_allocator>
 8001e70:	4603      	mov	r3, r0
 8001e72:	f083 0301 	eor.w	r3, r3, #1
 8001e76:	b2db      	uxtb	r3, r3
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	d003      	beq.n	8001e84 <StartDefaultTask+0x54>
 8001e7c:	21f4      	movs	r1, #244	@ 0xf4
 8001e7e:	4855      	ldr	r0, [pc, #340]	@ (8001fd4 <StartDefaultTask+0x1a4>)
 8001e80:	f017 fde4 	bl	8019a4c <iprintf>

	allocator = rcl_get_default_allocator();
 8001e84:	4c54      	ldr	r4, [pc, #336]	@ (8001fd8 <StartDefaultTask+0x1a8>)
 8001e86:	463b      	mov	r3, r7
 8001e88:	4618      	mov	r0, r3
 8001e8a:	f00c f8c7 	bl	800e01c <rcutils_get_default_allocator>
 8001e8e:	4625      	mov	r5, r4
 8001e90:	463c      	mov	r4, r7
 8001e92:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001e94:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001e96:	6823      	ldr	r3, [r4, #0]
 8001e98:	602b      	str	r3, [r5, #0]
	rclc_support_init(&support, 0, NULL, &allocator);
 8001e9a:	4b4f      	ldr	r3, [pc, #316]	@ (8001fd8 <StartDefaultTask+0x1a8>)
 8001e9c:	2200      	movs	r2, #0
 8001e9e:	2100      	movs	r1, #0
 8001ea0:	484e      	ldr	r0, [pc, #312]	@ (8001fdc <StartDefaultTask+0x1ac>)
 8001ea2:	f00b ff65 	bl	800dd70 <rclc_support_init>
	rclc_node_init_default(&node, "mcu_node", "", &support);
 8001ea6:	4b4d      	ldr	r3, [pc, #308]	@ (8001fdc <StartDefaultTask+0x1ac>)
 8001ea8:	4a4d      	ldr	r2, [pc, #308]	@ (8001fe0 <StartDefaultTask+0x1b0>)
 8001eaa:	494e      	ldr	r1, [pc, #312]	@ (8001fe4 <StartDefaultTask+0x1b4>)
 8001eac:	484e      	ldr	r0, [pc, #312]	@ (8001fe8 <StartDefaultTask+0x1b8>)
 8001eae:	f00b ffad 	bl	800de0c <rclc_node_init_default>

	rclc_publisher_init_default(
 8001eb2:	f00c ffeb 	bl	800ee8c <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Float64MultiArray>
 8001eb6:	4602      	mov	r2, r0
 8001eb8:	4b4c      	ldr	r3, [pc, #304]	@ (8001fec <StartDefaultTask+0x1bc>)
 8001eba:	494b      	ldr	r1, [pc, #300]	@ (8001fe8 <StartDefaultTask+0x1b8>)
 8001ebc:	484c      	ldr	r0, [pc, #304]	@ (8001ff0 <StartDefaultTask+0x1c0>)
 8001ebe:	f00b ffe1 	bl	800de84 <rclc_publisher_init_default>
			&enc_publisher,
			&node,
			ROSIDL_GET_MSG_TYPE_SUPPORT(std_msgs, msg, Float64MultiArray),
			"enc_raw");
	rclc_publisher_init_default(
 8001ec2:	f00c ffe3 	bl	800ee8c <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Float64MultiArray>
 8001ec6:	4602      	mov	r2, r0
 8001ec8:	4b4a      	ldr	r3, [pc, #296]	@ (8001ff4 <StartDefaultTask+0x1c4>)
 8001eca:	4947      	ldr	r1, [pc, #284]	@ (8001fe8 <StartDefaultTask+0x1b8>)
 8001ecc:	484a      	ldr	r0, [pc, #296]	@ (8001ff8 <StartDefaultTask+0x1c8>)
 8001ece:	f00b ffd9 	bl	800de84 <rclc_publisher_init_default>
			&imu_publisher,
			&node,
			ROSIDL_GET_MSG_TYPE_SUPPORT(std_msgs, msg, Float64MultiArray),
			"imu_raw");

	rclc_subscription_init_default(
 8001ed2:	f00c ffdb 	bl	800ee8c <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Float64MultiArray>
 8001ed6:	4602      	mov	r2, r0
 8001ed8:	4b48      	ldr	r3, [pc, #288]	@ (8001ffc <StartDefaultTask+0x1cc>)
 8001eda:	4943      	ldr	r1, [pc, #268]	@ (8001fe8 <StartDefaultTask+0x1b8>)
 8001edc:	4848      	ldr	r0, [pc, #288]	@ (8002000 <StartDefaultTask+0x1d0>)
 8001ede:	f00c f805 	bl	800deec <rclc_subscription_init_default>
			&cmd_subscription,
			&node,
			ROSIDL_GET_MSG_TYPE_SUPPORT(std_msgs, msg, Float64MultiArray),
			"mcu_cmd");

	rclc_timer_init_default(
 8001ee2:	4b48      	ldr	r3, [pc, #288]	@ (8002004 <StartDefaultTask+0x1d4>)
 8001ee4:	9300      	str	r3, [sp, #0]
 8001ee6:	a330      	add	r3, pc, #192	@ (adr r3, 8001fa8 <StartDefaultTask+0x178>)
 8001ee8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001eec:	493b      	ldr	r1, [pc, #236]	@ (8001fdc <StartDefaultTask+0x1ac>)
 8001eee:	4846      	ldr	r0, [pc, #280]	@ (8002008 <StartDefaultTask+0x1d8>)
 8001ef0:	f00c f830 	bl	800df54 <rclc_timer_init_default>
			&enc_timer,
			&support,
			RCL_MS_TO_NS(20),
			enc_timer_callback);

	rclc_timer_init_default(&imu_timer,
 8001ef4:	4b45      	ldr	r3, [pc, #276]	@ (800200c <StartDefaultTask+0x1dc>)
 8001ef6:	9300      	str	r3, [sp, #0]
 8001ef8:	4a45      	ldr	r2, [pc, #276]	@ (8002010 <StartDefaultTask+0x1e0>)
 8001efa:	f04f 0300 	mov.w	r3, #0
 8001efe:	4937      	ldr	r1, [pc, #220]	@ (8001fdc <StartDefaultTask+0x1ac>)
 8001f00:	4844      	ldr	r0, [pc, #272]	@ (8002014 <StartDefaultTask+0x1e4>)
 8001f02:	f00c f827 	bl	800df54 <rclc_timer_init_default>
			&support,
			RCL_MS_TO_NS(10),
			imu_timer_callback);

	enc_msg.data.capacity = 2;
 8001f06:	4b44      	ldr	r3, [pc, #272]	@ (8002018 <StartDefaultTask+0x1e8>)
 8001f08:	2202      	movs	r2, #2
 8001f0a:	619a      	str	r2, [r3, #24]
	enc_msg.data.data = (double*) malloc(enc_msg.data.capacity * sizeof(double));
 8001f0c:	4b42      	ldr	r3, [pc, #264]	@ (8002018 <StartDefaultTask+0x1e8>)
 8001f0e:	699b      	ldr	r3, [r3, #24]
 8001f10:	00db      	lsls	r3, r3, #3
 8001f12:	4618      	mov	r0, r3
 8001f14:	f017 fb00 	bl	8019518 <malloc>
 8001f18:	4603      	mov	r3, r0
 8001f1a:	461a      	mov	r2, r3
 8001f1c:	4b3e      	ldr	r3, [pc, #248]	@ (8002018 <StartDefaultTask+0x1e8>)
 8001f1e:	611a      	str	r2, [r3, #16]
	enc_msg.data.size = 2;
 8001f20:	4b3d      	ldr	r3, [pc, #244]	@ (8002018 <StartDefaultTask+0x1e8>)
 8001f22:	2202      	movs	r2, #2
 8001f24:	615a      	str	r2, [r3, #20]

	imu_msg.data.capacity = 10;
 8001f26:	4b3d      	ldr	r3, [pc, #244]	@ (800201c <StartDefaultTask+0x1ec>)
 8001f28:	220a      	movs	r2, #10
 8001f2a:	619a      	str	r2, [r3, #24]
	imu_msg.data.data = (double*) malloc(imu_msg.data.capacity * sizeof(double));
 8001f2c:	4b3b      	ldr	r3, [pc, #236]	@ (800201c <StartDefaultTask+0x1ec>)
 8001f2e:	699b      	ldr	r3, [r3, #24]
 8001f30:	00db      	lsls	r3, r3, #3
 8001f32:	4618      	mov	r0, r3
 8001f34:	f017 faf0 	bl	8019518 <malloc>
 8001f38:	4603      	mov	r3, r0
 8001f3a:	461a      	mov	r2, r3
 8001f3c:	4b37      	ldr	r3, [pc, #220]	@ (800201c <StartDefaultTask+0x1ec>)
 8001f3e:	611a      	str	r2, [r3, #16]
	imu_msg.data.size = 10;
 8001f40:	4b36      	ldr	r3, [pc, #216]	@ (800201c <StartDefaultTask+0x1ec>)
 8001f42:	220a      	movs	r2, #10
 8001f44:	615a      	str	r2, [r3, #20]

	cmd_msg.data.capacity = 2;
 8001f46:	4b36      	ldr	r3, [pc, #216]	@ (8002020 <StartDefaultTask+0x1f0>)
 8001f48:	2202      	movs	r2, #2
 8001f4a:	619a      	str	r2, [r3, #24]
	cmd_msg.data.data = (double*) malloc(cmd_msg.data.capacity * sizeof(double));
 8001f4c:	4b34      	ldr	r3, [pc, #208]	@ (8002020 <StartDefaultTask+0x1f0>)
 8001f4e:	699b      	ldr	r3, [r3, #24]
 8001f50:	00db      	lsls	r3, r3, #3
 8001f52:	4618      	mov	r0, r3
 8001f54:	f017 fae0 	bl	8019518 <malloc>
 8001f58:	4603      	mov	r3, r0
 8001f5a:	461a      	mov	r2, r3
 8001f5c:	4b30      	ldr	r3, [pc, #192]	@ (8002020 <StartDefaultTask+0x1f0>)
 8001f5e:	611a      	str	r2, [r3, #16]
	cmd_msg.data.size = 2;
 8001f60:	4b2f      	ldr	r3, [pc, #188]	@ (8002020 <StartDefaultTask+0x1f0>)
 8001f62:	2202      	movs	r2, #2
 8001f64:	615a      	str	r2, [r3, #20]

	rclc_executor_init(&executor, &support.context, 3, &allocator);
 8001f66:	4b1c      	ldr	r3, [pc, #112]	@ (8001fd8 <StartDefaultTask+0x1a8>)
 8001f68:	2203      	movs	r2, #3
 8001f6a:	492e      	ldr	r1, [pc, #184]	@ (8002024 <StartDefaultTask+0x1f4>)
 8001f6c:	482e      	ldr	r0, [pc, #184]	@ (8002028 <StartDefaultTask+0x1f8>)
 8001f6e:	f00b fc5b 	bl	800d828 <rclc_executor_init>
	rclc_executor_add_subscription(&executor, &cmd_subscription, &cmd_msg, &subscription_callback, ON_NEW_DATA);
 8001f72:	2300      	movs	r3, #0
 8001f74:	9300      	str	r3, [sp, #0]
 8001f76:	4b2d      	ldr	r3, [pc, #180]	@ (800202c <StartDefaultTask+0x1fc>)
 8001f78:	4a29      	ldr	r2, [pc, #164]	@ (8002020 <StartDefaultTask+0x1f0>)
 8001f7a:	4921      	ldr	r1, [pc, #132]	@ (8002000 <StartDefaultTask+0x1d0>)
 8001f7c:	482a      	ldr	r0, [pc, #168]	@ (8002028 <StartDefaultTask+0x1f8>)
 8001f7e:	f00b fcc7 	bl	800d910 <rclc_executor_add_subscription>
	rclc_executor_add_timer(&executor, &enc_timer);
 8001f82:	4921      	ldr	r1, [pc, #132]	@ (8002008 <StartDefaultTask+0x1d8>)
 8001f84:	4828      	ldr	r0, [pc, #160]	@ (8002028 <StartDefaultTask+0x1f8>)
 8001f86:	f00b fcfd 	bl	800d984 <rclc_executor_add_timer>
	rclc_executor_add_timer(&executor, &imu_timer);
 8001f8a:	4922      	ldr	r1, [pc, #136]	@ (8002014 <StartDefaultTask+0x1e4>)
 8001f8c:	4826      	ldr	r0, [pc, #152]	@ (8002028 <StartDefaultTask+0x1f8>)
 8001f8e:	f00b fcf9 	bl	800d984 <rclc_executor_add_timer>
	rclc_executor_spin(&executor);
 8001f92:	4825      	ldr	r0, [pc, #148]	@ (8002028 <StartDefaultTask+0x1f8>)
 8001f94:	f00b feb2 	bl	800dcfc <rclc_executor_spin>

	while(1)
	{
		rclc_executor_spin_some(&executor, RCL_MS_TO_NS(1));
 8001f98:	4a25      	ldr	r2, [pc, #148]	@ (8002030 <StartDefaultTask+0x200>)
 8001f9a:	f04f 0300 	mov.w	r3, #0
 8001f9e:	4822      	ldr	r0, [pc, #136]	@ (8002028 <StartDefaultTask+0x1f8>)
 8001fa0:	f00b fe96 	bl	800dcd0 <rclc_executor_spin_some>
 8001fa4:	e7f8      	b.n	8001f98 <StartDefaultTask+0x168>
 8001fa6:	bf00      	nop
 8001fa8:	01312d00 	.word	0x01312d00
 8001fac:	00000000 	.word	0x00000000
 8001fb0:	0800158d 	.word	0x0800158d
 8001fb4:	0800152d 	.word	0x0800152d
 8001fb8:	0800150d 	.word	0x0800150d
 8001fbc:	080014e1 	.word	0x080014e1
 8001fc0:	20005a44 	.word	0x20005a44
 8001fc4:	08002309 	.word	0x08002309
 8001fc8:	0800234d 	.word	0x0800234d
 8001fcc:	08002385 	.word	0x08002385
 8001fd0:	080023f1 	.word	0x080023f1
 8001fd4:	0801acbc 	.word	0x0801acbc
 8001fd8:	20000230 	.word	0x20000230
 8001fdc:	20000174 	.word	0x20000174
 8001fe0:	0801ace4 	.word	0x0801ace4
 8001fe4:	0801ace8 	.word	0x0801ace8
 8001fe8:	20000244 	.word	0x20000244
 8001fec:	0801acf4 	.word	0x0801acf4
 8001ff0:	2000024c 	.word	0x2000024c
 8001ff4:	0801acfc 	.word	0x0801acfc
 8001ff8:	20000250 	.word	0x20000250
 8001ffc:	0801ad04 	.word	0x0801ad04
 8002000:	20000254 	.word	0x20000254
 8002004:	080018e9 	.word	0x080018e9
 8002008:	20000258 	.word	0x20000258
 800200c:	08001cb5 	.word	0x08001cb5
 8002010:	00989680 	.word	0x00989680
 8002014:	2000025c 	.word	0x2000025c
 8002018:	20000260 	.word	0x20000260
 800201c:	2000027c 	.word	0x2000027c
 8002020:	20000298 	.word	0x20000298
 8002024:	20000178 	.word	0x20000178
 8002028:	200001b0 	.word	0x200001b0
 800202c:	08001de1 	.word	0x08001de1
 8002030:	000f4240 	.word	0x000f4240

08002034 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002034:	b580      	push	{r7, lr}
 8002036:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002038:	f000 ff51 	bl	8002ede <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800203c:	f000 f882 	bl	8002144 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002040:	f7ff fb0a 	bl	8001658 <MX_GPIO_Init>
  MX_DMA_Init();
 8002044:	f7ff fa0a 	bl	800145c <MX_DMA_Init>
  MX_USART2_UART_Init();
 8002048:	f000 fe22 	bl	8002c90 <MX_USART2_UART_Init>
  MX_TIM1_Init();
 800204c:	f000 fc9c 	bl	8002988 <MX_TIM1_Init>
  MX_TIM15_Init();
 8002050:	f000 fcf4 	bl	8002a3c <MX_TIM15_Init>
  MX_I2C1_Init();
 8002054:	f7ff fb4a 	bl	80016ec <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
#ifdef SENSOR_ON
  HALCHECK(BNO055_Init(&bno, &hi2c1, 0, NDOF))
 8002058:	e002      	b.n	8002060 <main+0x2c>
 800205a:	2064      	movs	r0, #100	@ 0x64
 800205c:	f000 ff78 	bl	8002f50 <HAL_Delay>
 8002060:	230c      	movs	r3, #12
 8002062:	2200      	movs	r2, #0
 8002064:	4929      	ldr	r1, [pc, #164]	@ (800210c <main+0xd8>)
 8002066:	482a      	ldr	r0, [pc, #168]	@ (8002110 <main+0xdc>)
 8002068:	f007 fd5f 	bl	8009b2a <BNO055_Init>
 800206c:	4603      	mov	r3, r0
 800206e:	2b00      	cmp	r3, #0
 8002070:	d1f3      	bne.n	800205a <main+0x26>
#ifdef BNO_CALIB_ON
  BNO055_Calibrated(&bno, &bno_stat, &bno_off);
#endif
  BNO055_SetOffsets(&bno, &bno_off);
 8002072:	4928      	ldr	r1, [pc, #160]	@ (8002114 <main+0xe0>)
 8002074:	4826      	ldr	r0, [pc, #152]	@ (8002110 <main+0xdc>)
 8002076:	f008 f833 	bl	800a0e0 <BNO055_SetOffsets>
  BNO055_SetAxis(&bno, P0_Config, P0_Sign);
 800207a:	2204      	movs	r2, #4
 800207c:	2121      	movs	r1, #33	@ 0x21
 800207e:	4824      	ldr	r0, [pc, #144]	@ (8002110 <main+0xdc>)
 8002080:	f008 f8e1 	bl	800a246 <BNO055_SetAxis>
  HALCHECK(RC_Init(&servo, &htim15, TIM_CHANNEL_1, CPU_FREQ, true))
 8002084:	e002      	b.n	800208c <main+0x58>
 8002086:	2064      	movs	r0, #100	@ 0x64
 8002088:	f000 ff62 	bl	8002f50 <HAL_Delay>
 800208c:	2301      	movs	r3, #1
 800208e:	ed9f 0a22 	vldr	s0, [pc, #136]	@ 8002118 <main+0xe4>
 8002092:	2200      	movs	r2, #0
 8002094:	4921      	ldr	r1, [pc, #132]	@ (800211c <main+0xe8>)
 8002096:	4822      	ldr	r0, [pc, #136]	@ (8002120 <main+0xec>)
 8002098:	f008 fa32 	bl	800a500 <RC_Init>
 800209c:	4603      	mov	r3, r0
 800209e:	2b00      	cmp	r3, #0
 80020a0:	d1f1      	bne.n	8002086 <main+0x52>
  HALCHECK(RC_Init(&bldc, &htim15, TIM_CHANNEL_2, CPU_FREQ, false))
 80020a2:	e002      	b.n	80020aa <main+0x76>
 80020a4:	2064      	movs	r0, #100	@ 0x64
 80020a6:	f000 ff53 	bl	8002f50 <HAL_Delay>
 80020aa:	2300      	movs	r3, #0
 80020ac:	ed9f 0a1a 	vldr	s0, [pc, #104]	@ 8002118 <main+0xe4>
 80020b0:	2204      	movs	r2, #4
 80020b2:	491a      	ldr	r1, [pc, #104]	@ (800211c <main+0xe8>)
 80020b4:	481b      	ldr	r0, [pc, #108]	@ (8002124 <main+0xf0>)
 80020b6:	f008 fa23 	bl	800a500 <RC_Init>
 80020ba:	4603      	mov	r3, r0
 80020bc:	2b00      	cmp	r3, #0
 80020be:	d1f1      	bne.n	80020a4 <main+0x70>
  RC_Set_Input_Range(&servo, 500, 2500);
 80020c0:	eddf 0a19 	vldr	s1, [pc, #100]	@ 8002128 <main+0xf4>
 80020c4:	ed9f 0a19 	vldr	s0, [pc, #100]	@ 800212c <main+0xf8>
 80020c8:	4815      	ldr	r0, [pc, #84]	@ (8002120 <main+0xec>)
 80020ca:	f008 faa5 	bl	800a618 <RC_Set_Input_Range>
  RC_Set_Input_Range(&bldc, 500, 2500);
 80020ce:	eddf 0a16 	vldr	s1, [pc, #88]	@ 8002128 <main+0xf4>
 80020d2:	ed9f 0a16 	vldr	s0, [pc, #88]	@ 800212c <main+0xf8>
 80020d6:	4813      	ldr	r0, [pc, #76]	@ (8002124 <main+0xf0>)
 80020d8:	f008 fa9e 	bl	800a618 <RC_Set_Input_Range>
  PID_CONTROLLER_Init(&pid, KP, KI, KD, 500);
 80020dc:	eddf 1a13 	vldr	s3, [pc, #76]	@ 800212c <main+0xf8>
 80020e0:	ed9f 1a13 	vldr	s2, [pc, #76]	@ 8002130 <main+0xfc>
 80020e4:	eddf 0a13 	vldr	s1, [pc, #76]	@ 8002134 <main+0x100>
 80020e8:	ed9f 0a13 	vldr	s0, [pc, #76]	@ 8002138 <main+0x104>
 80020ec:	4813      	ldr	r0, [pc, #76]	@ (800213c <main+0x108>)
 80020ee:	f008 f930 	bl	800a352 <PID_CONTROLLER_Init>
  HAL_TIM_Encoder_Start(&htim1, TIM_CHANNEL_ALL);
 80020f2:	213c      	movs	r1, #60	@ 0x3c
 80020f4:	4812      	ldr	r0, [pc, #72]	@ (8002140 <main+0x10c>)
 80020f6:	f005 fa13 	bl	8007520 <HAL_TIM_Encoder_Start>
#endif
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80020fa:	f008 fb85 	bl	800a808 <osKernelInitialize>

  /* Call init function for freertos objects (in cmsis_os2.c) */
  MX_FREERTOS_Init();
 80020fe:	f7ff fa99 	bl	8001634 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8002102:	f008 fba5 	bl	800a850 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8002106:	bf00      	nop
 8002108:	e7fd      	b.n	8002106 <main+0xd2>
 800210a:	bf00      	nop
 800210c:	20005860 	.word	0x20005860
 8002110:	200002b8 	.word	0x200002b8
 8002114:	20000000 	.word	0x20000000
 8002118:	4c989680 	.word	0x4c989680
 800211c:	200059f8 	.word	0x200059f8
 8002120:	200003a0 	.word	0x200003a0
 8002124:	200003b0 	.word	0x200003b0
 8002128:	451c4000 	.word	0x451c4000
 800212c:	43fa0000 	.word	0x43fa0000
 8002130:	00000000 	.word	0x00000000
 8002134:	3ca3d70a 	.word	0x3ca3d70a
 8002138:	3dcccccd 	.word	0x3dcccccd
 800213c:	200003c0 	.word	0x200003c0
 8002140:	200059ac 	.word	0x200059ac

08002144 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002144:	b580      	push	{r7, lr}
 8002146:	b096      	sub	sp, #88	@ 0x58
 8002148:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800214a:	f107 0314 	add.w	r3, r7, #20
 800214e:	2244      	movs	r2, #68	@ 0x44
 8002150:	2100      	movs	r1, #0
 8002152:	4618      	mov	r0, r3
 8002154:	f017 fd56 	bl	8019c04 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002158:	463b      	mov	r3, r7
 800215a:	2200      	movs	r2, #0
 800215c:	601a      	str	r2, [r3, #0]
 800215e:	605a      	str	r2, [r3, #4]
 8002160:	609a      	str	r2, [r3, #8]
 8002162:	60da      	str	r2, [r3, #12]
 8002164:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8002166:	f44f 7000 	mov.w	r0, #512	@ 0x200
 800216a:	f003 fd43 	bl	8005bf4 <HAL_PWREx_ControlVoltageScaling>
 800216e:	4603      	mov	r3, r0
 8002170:	2b00      	cmp	r3, #0
 8002172:	d001      	beq.n	8002178 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8002174:	f000 f8c2 	bl	80022fc <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8002178:	f003 fd1e 	bl	8005bb8 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 800217c:	4b21      	ldr	r3, [pc, #132]	@ (8002204 <SystemClock_Config+0xc0>)
 800217e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002182:	4a20      	ldr	r2, [pc, #128]	@ (8002204 <SystemClock_Config+0xc0>)
 8002184:	f023 0318 	bic.w	r3, r3, #24
 8002188:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 800218c:	2314      	movs	r3, #20
 800218e:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8002190:	2301      	movs	r3, #1
 8002192:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8002194:	2301      	movs	r3, #1
 8002196:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8002198:	2300      	movs	r3, #0
 800219a:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 800219c:	2360      	movs	r3, #96	@ 0x60
 800219e:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80021a0:	2302      	movs	r3, #2
 80021a2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 80021a4:	2301      	movs	r3, #1
 80021a6:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 80021a8:	2301      	movs	r3, #1
 80021aa:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 40;
 80021ac:	2328      	movs	r3, #40	@ 0x28
 80021ae:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80021b0:	2307      	movs	r3, #7
 80021b2:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80021b4:	2302      	movs	r3, #2
 80021b6:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80021b8:	2302      	movs	r3, #2
 80021ba:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80021bc:	f107 0314 	add.w	r3, r7, #20
 80021c0:	4618      	mov	r0, r3
 80021c2:	f003 fd6d 	bl	8005ca0 <HAL_RCC_OscConfig>
 80021c6:	4603      	mov	r3, r0
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	d001      	beq.n	80021d0 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 80021cc:	f000 f896 	bl	80022fc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80021d0:	230f      	movs	r3, #15
 80021d2:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80021d4:	2303      	movs	r3, #3
 80021d6:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80021d8:	2300      	movs	r3, #0
 80021da:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80021dc:	2300      	movs	r3, #0
 80021de:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80021e0:	2300      	movs	r3, #0
 80021e2:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80021e4:	463b      	mov	r3, r7
 80021e6:	2104      	movs	r1, #4
 80021e8:	4618      	mov	r0, r3
 80021ea:	f004 f96d 	bl	80064c8 <HAL_RCC_ClockConfig>
 80021ee:	4603      	mov	r3, r0
 80021f0:	2b00      	cmp	r3, #0
 80021f2:	d001      	beq.n	80021f8 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 80021f4:	f000 f882 	bl	80022fc <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 80021f8:	f004 fdb2 	bl	8006d60 <HAL_RCCEx_EnableMSIPLLMode>
}
 80021fc:	bf00      	nop
 80021fe:	3758      	adds	r7, #88	@ 0x58
 8002200:	46bd      	mov	sp, r7
 8002202:	bd80      	pop	{r7, pc}
 8002204:	40021000 	.word	0x40021000

08002208 <HAL_I2C_MemRxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002208:	b480      	push	{r7}
 800220a:	b083      	sub	sp, #12
 800220c:	af00      	add	r7, sp, #0
 800220e:	6078      	str	r0, [r7, #4]
	if (hi2c->Instance == bno.hi2cx->Instance) bno.flag = HAL_OK;
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	681a      	ldr	r2, [r3, #0]
 8002214:	4b06      	ldr	r3, [pc, #24]	@ (8002230 <HAL_I2C_MemRxCpltCallback+0x28>)
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	429a      	cmp	r2, r3
 800221c:	d102      	bne.n	8002224 <HAL_I2C_MemRxCpltCallback+0x1c>
 800221e:	4b04      	ldr	r3, [pc, #16]	@ (8002230 <HAL_I2C_MemRxCpltCallback+0x28>)
 8002220:	2200      	movs	r2, #0
 8002222:	719a      	strb	r2, [r3, #6]
}
 8002224:	bf00      	nop
 8002226:	370c      	adds	r7, #12
 8002228:	46bd      	mov	sp, r7
 800222a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800222e:	4770      	bx	lr
 8002230:	200002b8 	.word	0x200002b8
 8002234:	00000000 	.word	0x00000000

08002238 <ang2rc>:
	}
	return rc_signal;
}

float ang2rc(float ang)
{
 8002238:	b5b0      	push	{r4, r5, r7, lr}
 800223a:	b084      	sub	sp, #16
 800223c:	af00      	add	r7, sp, #0
 800223e:	ed87 0a01 	vstr	s0, [r7, #4]
	float rc_signal = 1350;
 8002242:	4b21      	ldr	r3, [pc, #132]	@ (80022c8 <ang2rc+0x90>)
 8002244:	60fb      	str	r3, [r7, #12]
	rc_signal += ang * 1000.0 / M_PI_2;
 8002246:	68f8      	ldr	r0, [r7, #12]
 8002248:	f7fe f98e 	bl	8000568 <__aeabi_f2d>
 800224c:	4604      	mov	r4, r0
 800224e:	460d      	mov	r5, r1
 8002250:	6878      	ldr	r0, [r7, #4]
 8002252:	f7fe f989 	bl	8000568 <__aeabi_f2d>
 8002256:	f04f 0200 	mov.w	r2, #0
 800225a:	4b1c      	ldr	r3, [pc, #112]	@ (80022cc <ang2rc+0x94>)
 800225c:	f7fe f9dc 	bl	8000618 <__aeabi_dmul>
 8002260:	4602      	mov	r2, r0
 8002262:	460b      	mov	r3, r1
 8002264:	4610      	mov	r0, r2
 8002266:	4619      	mov	r1, r3
 8002268:	a315      	add	r3, pc, #84	@ (adr r3, 80022c0 <ang2rc+0x88>)
 800226a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800226e:	f7fe fafd 	bl	800086c <__aeabi_ddiv>
 8002272:	4602      	mov	r2, r0
 8002274:	460b      	mov	r3, r1
 8002276:	4620      	mov	r0, r4
 8002278:	4629      	mov	r1, r5
 800227a:	f7fe f817 	bl	80002ac <__adddf3>
 800227e:	4602      	mov	r2, r0
 8002280:	460b      	mov	r3, r1
 8002282:	4610      	mov	r0, r2
 8002284:	4619      	mov	r1, r3
 8002286:	f7fe fc81 	bl	8000b8c <__aeabi_d2f>
 800228a:	4603      	mov	r3, r0
 800228c:	60fb      	str	r3, [r7, #12]
	rc_signal = fmaxf(fminf(rc_signal, 1794), -905);
 800228e:	eddf 0a10 	vldr	s1, [pc, #64]	@ 80022d0 <ang2rc+0x98>
 8002292:	ed97 0a03 	vldr	s0, [r7, #12]
 8002296:	f018 fcc6 	bl	801ac26 <fminf>
 800229a:	eef0 7a40 	vmov.f32	s15, s0
 800229e:	eddf 0a0d 	vldr	s1, [pc, #52]	@ 80022d4 <ang2rc+0x9c>
 80022a2:	eeb0 0a67 	vmov.f32	s0, s15
 80022a6:	f018 fca1 	bl	801abec <fmaxf>
 80022aa:	ed87 0a03 	vstr	s0, [r7, #12]
	return rc_signal;
 80022ae:	68fb      	ldr	r3, [r7, #12]
 80022b0:	ee07 3a90 	vmov	s15, r3
}
 80022b4:	eeb0 0a67 	vmov.f32	s0, s15
 80022b8:	3710      	adds	r7, #16
 80022ba:	46bd      	mov	sp, r7
 80022bc:	bdb0      	pop	{r4, r5, r7, pc}
 80022be:	bf00      	nop
 80022c0:	54442d18 	.word	0x54442d18
 80022c4:	3ff921fb 	.word	0x3ff921fb
 80022c8:	44a8c000 	.word	0x44a8c000
 80022cc:	408f4000 	.word	0x408f4000
 80022d0:	44e04000 	.word	0x44e04000
 80022d4:	c4624000 	.word	0xc4624000

080022d8 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80022d8:	b580      	push	{r7, lr}
 80022da:	b082      	sub	sp, #8
 80022dc:	af00      	add	r7, sp, #0
 80022de:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	4a04      	ldr	r2, [pc, #16]	@ (80022f8 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80022e6:	4293      	cmp	r3, r2
 80022e8:	d101      	bne.n	80022ee <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80022ea:	f000 fe11 	bl	8002f10 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80022ee:	bf00      	nop
 80022f0:	3708      	adds	r7, #8
 80022f2:	46bd      	mov	sp, r7
 80022f4:	bd80      	pop	{r7, pc}
 80022f6:	bf00      	nop
 80022f8:	40001000 	.word	0x40001000

080022fc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80022fc:	b480      	push	{r7}
 80022fe:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8002300:	b672      	cpsid	i
}
 8002302:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002304:	bf00      	nop
 8002306:	e7fd      	b.n	8002304 <Error_Handler+0x8>

08002308 <microros_allocate>:
void vPortFreeMicroROS( void *pv );
void *pvPortReallocMicroROS( void *pv, size_t xWantedSize );
size_t getBlockSize( void *pv );
void *pvPortCallocMicroROS( size_t num, size_t xWantedSize );

void * microros_allocate(size_t size, void * state){
 8002308:	b580      	push	{r7, lr}
 800230a:	b082      	sub	sp, #8
 800230c:	af00      	add	r7, sp, #0
 800230e:	6078      	str	r0, [r7, #4]
 8002310:	6039      	str	r1, [r7, #0]
  (void) state;
  // printf("-- Alloc %d (prev: %d B)\n",size, xPortGetFreeHeapSize());
  absoluteUsedMemory += size;
 8002312:	4b0c      	ldr	r3, [pc, #48]	@ (8002344 <microros_allocate+0x3c>)
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	461a      	mov	r2, r3
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	4413      	add	r3, r2
 800231c:	461a      	mov	r2, r3
 800231e:	4b09      	ldr	r3, [pc, #36]	@ (8002344 <microros_allocate+0x3c>)
 8002320:	601a      	str	r2, [r3, #0]
  usedMemory += size;
 8002322:	4b09      	ldr	r3, [pc, #36]	@ (8002348 <microros_allocate+0x40>)
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	461a      	mov	r2, r3
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	4413      	add	r3, r2
 800232c:	461a      	mov	r2, r3
 800232e:	4b06      	ldr	r3, [pc, #24]	@ (8002348 <microros_allocate+0x40>)
 8002330:	601a      	str	r2, [r3, #0]
  return pvPortMallocMicroROS(size);
 8002332:	6878      	ldr	r0, [r7, #4]
 8002334:	f7fe fe42 	bl	8000fbc <pvPortMallocMicroROS>
 8002338:	4603      	mov	r3, r0
}
 800233a:	4618      	mov	r0, r3
 800233c:	3708      	adds	r7, #8
 800233e:	46bd      	mov	sp, r7
 8002340:	bd80      	pop	{r7, pc}
 8002342:	bf00      	nop
 8002344:	20005950 	.word	0x20005950
 8002348:	20005954 	.word	0x20005954

0800234c <microros_deallocate>:

void microros_deallocate(void * pointer, void * state){
 800234c:	b580      	push	{r7, lr}
 800234e:	b082      	sub	sp, #8
 8002350:	af00      	add	r7, sp, #0
 8002352:	6078      	str	r0, [r7, #4]
 8002354:	6039      	str	r1, [r7, #0]
  (void) state;
  // printf("-- Free %d (prev: %d B)\n",getBlockSize(pointer), xPortGetFreeHeapSize());
  if (NULL != pointer){
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	2b00      	cmp	r3, #0
 800235a:	d00c      	beq.n	8002376 <microros_deallocate+0x2a>
    usedMemory -= getBlockSize(pointer);
 800235c:	6878      	ldr	r0, [r7, #4]
 800235e:	f7fe ff51 	bl	8001204 <getBlockSize>
 8002362:	4603      	mov	r3, r0
 8002364:	4a06      	ldr	r2, [pc, #24]	@ (8002380 <microros_deallocate+0x34>)
 8002366:	6812      	ldr	r2, [r2, #0]
 8002368:	1ad3      	subs	r3, r2, r3
 800236a:	461a      	mov	r2, r3
 800236c:	4b04      	ldr	r3, [pc, #16]	@ (8002380 <microros_deallocate+0x34>)
 800236e:	601a      	str	r2, [r3, #0]
    vPortFreeMicroROS(pointer);
 8002370:	6878      	ldr	r0, [r7, #4]
 8002372:	f7fe feeb 	bl	800114c <vPortFreeMicroROS>
  }
}
 8002376:	bf00      	nop
 8002378:	3708      	adds	r7, #8
 800237a:	46bd      	mov	sp, r7
 800237c:	bd80      	pop	{r7, pc}
 800237e:	bf00      	nop
 8002380:	20005954 	.word	0x20005954

08002384 <microros_reallocate>:

void * microros_reallocate(void * pointer, size_t size, void * state){
 8002384:	b580      	push	{r7, lr}
 8002386:	b084      	sub	sp, #16
 8002388:	af00      	add	r7, sp, #0
 800238a:	60f8      	str	r0, [r7, #12]
 800238c:	60b9      	str	r1, [r7, #8]
 800238e:	607a      	str	r2, [r7, #4]
  (void) state;
  // printf("-- Realloc %d -> %d (prev: %d B)\n",getBlockSize(pointer),size, xPortGetFreeHeapSize());
  absoluteUsedMemory += size;
 8002390:	4b15      	ldr	r3, [pc, #84]	@ (80023e8 <microros_reallocate+0x64>)
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	461a      	mov	r2, r3
 8002396:	68bb      	ldr	r3, [r7, #8]
 8002398:	4413      	add	r3, r2
 800239a:	461a      	mov	r2, r3
 800239c:	4b12      	ldr	r3, [pc, #72]	@ (80023e8 <microros_reallocate+0x64>)
 800239e:	601a      	str	r2, [r3, #0]
  usedMemory += size;
 80023a0:	4b12      	ldr	r3, [pc, #72]	@ (80023ec <microros_reallocate+0x68>)
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	461a      	mov	r2, r3
 80023a6:	68bb      	ldr	r3, [r7, #8]
 80023a8:	4413      	add	r3, r2
 80023aa:	461a      	mov	r2, r3
 80023ac:	4b0f      	ldr	r3, [pc, #60]	@ (80023ec <microros_reallocate+0x68>)
 80023ae:	601a      	str	r2, [r3, #0]
  if (NULL == pointer){
 80023b0:	68fb      	ldr	r3, [r7, #12]
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d104      	bne.n	80023c0 <microros_reallocate+0x3c>
    return pvPortMallocMicroROS(size);
 80023b6:	68b8      	ldr	r0, [r7, #8]
 80023b8:	f7fe fe00 	bl	8000fbc <pvPortMallocMicroROS>
 80023bc:	4603      	mov	r3, r0
 80023be:	e00e      	b.n	80023de <microros_reallocate+0x5a>
  } else {
    usedMemory -= getBlockSize(pointer);
 80023c0:	68f8      	ldr	r0, [r7, #12]
 80023c2:	f7fe ff1f 	bl	8001204 <getBlockSize>
 80023c6:	4603      	mov	r3, r0
 80023c8:	4a08      	ldr	r2, [pc, #32]	@ (80023ec <microros_reallocate+0x68>)
 80023ca:	6812      	ldr	r2, [r2, #0]
 80023cc:	1ad3      	subs	r3, r2, r3
 80023ce:	461a      	mov	r2, r3
 80023d0:	4b06      	ldr	r3, [pc, #24]	@ (80023ec <microros_reallocate+0x68>)
 80023d2:	601a      	str	r2, [r3, #0]
    return pvPortReallocMicroROS(pointer,size);
 80023d4:	68b9      	ldr	r1, [r7, #8]
 80023d6:	68f8      	ldr	r0, [r7, #12]
 80023d8:	f7fe ff32 	bl	8001240 <pvPortReallocMicroROS>
 80023dc:	4603      	mov	r3, r0
  }
}
 80023de:	4618      	mov	r0, r3
 80023e0:	3710      	adds	r7, #16
 80023e2:	46bd      	mov	sp, r7
 80023e4:	bd80      	pop	{r7, pc}
 80023e6:	bf00      	nop
 80023e8:	20005950 	.word	0x20005950
 80023ec:	20005954 	.word	0x20005954

080023f0 <microros_zero_allocate>:

void * microros_zero_allocate(size_t number_of_elements, size_t size_of_element, void * state){
 80023f0:	b580      	push	{r7, lr}
 80023f2:	b084      	sub	sp, #16
 80023f4:	af00      	add	r7, sp, #0
 80023f6:	60f8      	str	r0, [r7, #12]
 80023f8:	60b9      	str	r1, [r7, #8]
 80023fa:	607a      	str	r2, [r7, #4]
  (void) state;
  // printf("-- Calloc %d x %d = %d -> (prev: %d B)\n",number_of_elements,size_of_element, number_of_elements*size_of_element, xPortGetFreeHeapSize());
  absoluteUsedMemory += number_of_elements*size_of_element;
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	68ba      	ldr	r2, [r7, #8]
 8002400:	fb02 f303 	mul.w	r3, r2, r3
 8002404:	4a0c      	ldr	r2, [pc, #48]	@ (8002438 <microros_zero_allocate+0x48>)
 8002406:	6812      	ldr	r2, [r2, #0]
 8002408:	4413      	add	r3, r2
 800240a:	461a      	mov	r2, r3
 800240c:	4b0a      	ldr	r3, [pc, #40]	@ (8002438 <microros_zero_allocate+0x48>)
 800240e:	601a      	str	r2, [r3, #0]
  usedMemory += number_of_elements*size_of_element;
 8002410:	68fb      	ldr	r3, [r7, #12]
 8002412:	68ba      	ldr	r2, [r7, #8]
 8002414:	fb02 f303 	mul.w	r3, r2, r3
 8002418:	4a08      	ldr	r2, [pc, #32]	@ (800243c <microros_zero_allocate+0x4c>)
 800241a:	6812      	ldr	r2, [r2, #0]
 800241c:	4413      	add	r3, r2
 800241e:	461a      	mov	r2, r3
 8002420:	4b06      	ldr	r3, [pc, #24]	@ (800243c <microros_zero_allocate+0x4c>)
 8002422:	601a      	str	r2, [r3, #0]
  return pvPortCallocMicroROS(number_of_elements,size_of_element);
 8002424:	68b9      	ldr	r1, [r7, #8]
 8002426:	68f8      	ldr	r0, [r7, #12]
 8002428:	f7fe ff37 	bl	800129a <pvPortCallocMicroROS>
 800242c:	4603      	mov	r3, r0
 800242e:	4618      	mov	r0, r3
 8002430:	3710      	adds	r7, #16
 8002432:	46bd      	mov	sp, r7
 8002434:	bd80      	pop	{r7, pc}
 8002436:	bf00      	nop
 8002438:	20005950 	.word	0x20005950
 800243c:	20005954 	.word	0x20005954

08002440 <UTILS_NanosecondsToTimespec>:
#define NANOSECONDS_PER_SECOND     ( 1000000000LL )                                /**< Nanoseconds per second. */
#define NANOSECONDS_PER_TICK       ( NANOSECONDS_PER_SECOND / configTICK_RATE_HZ ) /**< Nanoseconds per FreeRTOS tick. */

void UTILS_NanosecondsToTimespec( int64_t llSource,
                                  struct timespec * const pxDestination )
{
 8002440:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8002444:	b086      	sub	sp, #24
 8002446:	af00      	add	r7, sp, #0
 8002448:	e9c7 0102 	strd	r0, r1, [r7, #8]
 800244c:	607a      	str	r2, [r7, #4]
    long lCarrySec = 0;
 800244e:	2300      	movs	r3, #0
 8002450:	617b      	str	r3, [r7, #20]

    /* Convert to timespec. */
    pxDestination->tv_sec = ( time_t ) ( llSource / NANOSECONDS_PER_SECOND );
 8002452:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002456:	a320      	add	r3, pc, #128	@ (adr r3, 80024d8 <UTILS_NanosecondsToTimespec+0x98>)
 8002458:	e9d3 2300 	ldrd	r2, r3, [r3]
 800245c:	f7fe fbe6 	bl	8000c2c <__aeabi_ldivmod>
 8002460:	4602      	mov	r2, r0
 8002462:	460b      	mov	r3, r1
 8002464:	6879      	ldr	r1, [r7, #4]
 8002466:	e9c1 2300 	strd	r2, r3, [r1]
    pxDestination->tv_nsec = ( long ) ( llSource % NANOSECONDS_PER_SECOND );
 800246a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800246e:	a31a      	add	r3, pc, #104	@ (adr r3, 80024d8 <UTILS_NanosecondsToTimespec+0x98>)
 8002470:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002474:	f7fe fbda 	bl	8000c2c <__aeabi_ldivmod>
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	609a      	str	r2, [r3, #8]

    /* Subtract from tv_sec if tv_nsec < 0. */
    if( pxDestination->tv_nsec < 0L )
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	689b      	ldr	r3, [r3, #8]
 8002480:	2b00      	cmp	r3, #0
 8002482:	da20      	bge.n	80024c6 <UTILS_NanosecondsToTimespec+0x86>
    {
        /* Compute the number of seconds to carry. */
        lCarrySec = ( pxDestination->tv_nsec / ( long ) NANOSECONDS_PER_SECOND ) + 1L;
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	689b      	ldr	r3, [r3, #8]
 8002488:	4a11      	ldr	r2, [pc, #68]	@ (80024d0 <UTILS_NanosecondsToTimespec+0x90>)
 800248a:	fb82 1203 	smull	r1, r2, r2, r3
 800248e:	1712      	asrs	r2, r2, #28
 8002490:	17db      	asrs	r3, r3, #31
 8002492:	1ad3      	subs	r3, r2, r3
 8002494:	3301      	adds	r3, #1
 8002496:	617b      	str	r3, [r7, #20]

        pxDestination->tv_sec -= ( time_t ) ( lCarrySec );
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800249e:	6979      	ldr	r1, [r7, #20]
 80024a0:	17c8      	asrs	r0, r1, #31
 80024a2:	460c      	mov	r4, r1
 80024a4:	4605      	mov	r5, r0
 80024a6:	ebb2 0804 	subs.w	r8, r2, r4
 80024aa:	eb63 0905 	sbc.w	r9, r3, r5
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	e9c3 8900 	strd	r8, r9, [r3]
        pxDestination->tv_nsec += lCarrySec * ( long ) NANOSECONDS_PER_SECOND;
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	689a      	ldr	r2, [r3, #8]
 80024b8:	697b      	ldr	r3, [r7, #20]
 80024ba:	4906      	ldr	r1, [pc, #24]	@ (80024d4 <UTILS_NanosecondsToTimespec+0x94>)
 80024bc:	fb01 f303 	mul.w	r3, r1, r3
 80024c0:	441a      	add	r2, r3
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	609a      	str	r2, [r3, #8]
    }
}
 80024c6:	bf00      	nop
 80024c8:	3718      	adds	r7, #24
 80024ca:	46bd      	mov	sp, r7
 80024cc:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80024d0:	44b82fa1 	.word	0x44b82fa1
 80024d4:	3b9aca00 	.word	0x3b9aca00
 80024d8:	3b9aca00 	.word	0x3b9aca00
 80024dc:	00000000 	.word	0x00000000

080024e0 <clock_gettime>:

int clock_gettime( int clock_id,
                   struct timespec * tp )
{
 80024e0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80024e4:	b08e      	sub	sp, #56	@ 0x38
 80024e6:	af00      	add	r7, sp, #0
 80024e8:	6278      	str	r0, [r7, #36]	@ 0x24
 80024ea:	6239      	str	r1, [r7, #32]
    TimeOut_t xCurrentTime = { 0 };
 80024ec:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 80024f0:	2300      	movs	r3, #0
 80024f2:	6013      	str	r3, [r2, #0]
 80024f4:	6053      	str	r3, [r2, #4]

    /* Intermediate variable used to convert TimeOut_t to struct timespec.
     * Also used to detect overflow issues. It must be unsigned because the
     * behavior of signed integer overflow is undefined. */
    uint64_t ullTickCount = 0ULL;
 80024f6:	f04f 0200 	mov.w	r2, #0
 80024fa:	f04f 0300 	mov.w	r3, #0
 80024fe:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
    /* Silence warnings about unused parameters. */
    ( void ) clock_id;

    /* Get the current tick count and overflow count. vTaskSetTimeOutState()
     * is used to get these values because they are both static in tasks.c. */
    vTaskSetTimeOutState( &xCurrentTime );
 8002502:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8002506:	4618      	mov	r0, r3
 8002508:	f009 fd4e 	bl	800bfa8 <vTaskSetTimeOutState>

    /* Adjust the tick count for the number of times a TickType_t has overflowed.
     * portMAX_DELAY should be the maximum value of a TickType_t. */
    ullTickCount = ( uint64_t ) ( xCurrentTime.xOverflowCount ) << ( sizeof( TickType_t ) * 8 );
 800250c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800250e:	17da      	asrs	r2, r3, #31
 8002510:	61bb      	str	r3, [r7, #24]
 8002512:	61fa      	str	r2, [r7, #28]
 8002514:	f04f 0200 	mov.w	r2, #0
 8002518:	f04f 0300 	mov.w	r3, #0
 800251c:	69b9      	ldr	r1, [r7, #24]
 800251e:	000b      	movs	r3, r1
 8002520:	2200      	movs	r2, #0
 8002522:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30

    /* Add the current tick count. */
    ullTickCount += xCurrentTime.xTimeOnEntering;
 8002526:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002528:	2200      	movs	r2, #0
 800252a:	461c      	mov	r4, r3
 800252c:	4615      	mov	r5, r2
 800252e:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 8002532:	1911      	adds	r1, r2, r4
 8002534:	60b9      	str	r1, [r7, #8]
 8002536:	416b      	adcs	r3, r5
 8002538:	60fb      	str	r3, [r7, #12]
 800253a:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 800253e:	e9c7 340c 	strd	r3, r4, [r7, #48]	@ 0x30

    /* Convert ullTickCount to timespec. */
    UTILS_NanosecondsToTimespec( ( int64_t ) ullTickCount * NANOSECONDS_PER_TICK, tp );
 8002542:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 8002546:	4602      	mov	r2, r0
 8002548:	460b      	mov	r3, r1
 800254a:	f04f 0400 	mov.w	r4, #0
 800254e:	f04f 0500 	mov.w	r5, #0
 8002552:	015d      	lsls	r5, r3, #5
 8002554:	ea45 65d2 	orr.w	r5, r5, r2, lsr #27
 8002558:	0154      	lsls	r4, r2, #5
 800255a:	4622      	mov	r2, r4
 800255c:	462b      	mov	r3, r5
 800255e:	ebb2 0800 	subs.w	r8, r2, r0
 8002562:	eb63 0901 	sbc.w	r9, r3, r1
 8002566:	f04f 0200 	mov.w	r2, #0
 800256a:	f04f 0300 	mov.w	r3, #0
 800256e:	ea4f 2349 	mov.w	r3, r9, lsl #9
 8002572:	ea43 53d8 	orr.w	r3, r3, r8, lsr #23
 8002576:	ea4f 2248 	mov.w	r2, r8, lsl #9
 800257a:	4690      	mov	r8, r2
 800257c:	4699      	mov	r9, r3
 800257e:	eb18 0a00 	adds.w	sl, r8, r0
 8002582:	eb49 0b01 	adc.w	fp, r9, r1
 8002586:	f04f 0200 	mov.w	r2, #0
 800258a:	f04f 0300 	mov.w	r3, #0
 800258e:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002592:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002596:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800259a:	ebb2 040a 	subs.w	r4, r2, sl
 800259e:	603c      	str	r4, [r7, #0]
 80025a0:	eb63 030b 	sbc.w	r3, r3, fp
 80025a4:	607b      	str	r3, [r7, #4]
 80025a6:	e9d7 4500 	ldrd	r4, r5, [r7]
 80025aa:	4623      	mov	r3, r4
 80025ac:	181b      	adds	r3, r3, r0
 80025ae:	613b      	str	r3, [r7, #16]
 80025b0:	462b      	mov	r3, r5
 80025b2:	eb41 0303 	adc.w	r3, r1, r3
 80025b6:	617b      	str	r3, [r7, #20]
 80025b8:	6a3a      	ldr	r2, [r7, #32]
 80025ba:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80025be:	f7ff ff3f 	bl	8002440 <UTILS_NanosecondsToTimespec>

    return 0;
 80025c2:	2300      	movs	r3, #0
 80025c4:	4618      	mov	r0, r3
 80025c6:	3738      	adds	r7, #56	@ 0x38
 80025c8:	46bd      	mov	sp, r7
 80025ca:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
	...

080025d0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80025d0:	b580      	push	{r7, lr}
 80025d2:	b082      	sub	sp, #8
 80025d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80025d6:	4b11      	ldr	r3, [pc, #68]	@ (800261c <HAL_MspInit+0x4c>)
 80025d8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80025da:	4a10      	ldr	r2, [pc, #64]	@ (800261c <HAL_MspInit+0x4c>)
 80025dc:	f043 0301 	orr.w	r3, r3, #1
 80025e0:	6613      	str	r3, [r2, #96]	@ 0x60
 80025e2:	4b0e      	ldr	r3, [pc, #56]	@ (800261c <HAL_MspInit+0x4c>)
 80025e4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80025e6:	f003 0301 	and.w	r3, r3, #1
 80025ea:	607b      	str	r3, [r7, #4]
 80025ec:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80025ee:	4b0b      	ldr	r3, [pc, #44]	@ (800261c <HAL_MspInit+0x4c>)
 80025f0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80025f2:	4a0a      	ldr	r2, [pc, #40]	@ (800261c <HAL_MspInit+0x4c>)
 80025f4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80025f8:	6593      	str	r3, [r2, #88]	@ 0x58
 80025fa:	4b08      	ldr	r3, [pc, #32]	@ (800261c <HAL_MspInit+0x4c>)
 80025fc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80025fe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002602:	603b      	str	r3, [r7, #0]
 8002604:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8002606:	2200      	movs	r2, #0
 8002608:	210f      	movs	r1, #15
 800260a:	f06f 0001 	mvn.w	r0, #1
 800260e:	f000 fd7b 	bl	8003108 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002612:	bf00      	nop
 8002614:	3708      	adds	r7, #8
 8002616:	46bd      	mov	sp, r7
 8002618:	bd80      	pop	{r7, pc}
 800261a:	bf00      	nop
 800261c:	40021000 	.word	0x40021000

08002620 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002620:	b580      	push	{r7, lr}
 8002622:	b08e      	sub	sp, #56	@ 0x38
 8002624:	af00      	add	r7, sp, #0
 8002626:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 8002628:	2300      	movs	r3, #0
 800262a:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 800262e:	4b34      	ldr	r3, [pc, #208]	@ (8002700 <HAL_InitTick+0xe0>)
 8002630:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002632:	4a33      	ldr	r2, [pc, #204]	@ (8002700 <HAL_InitTick+0xe0>)
 8002634:	f043 0310 	orr.w	r3, r3, #16
 8002638:	6593      	str	r3, [r2, #88]	@ 0x58
 800263a:	4b31      	ldr	r3, [pc, #196]	@ (8002700 <HAL_InitTick+0xe0>)
 800263c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800263e:	f003 0310 	and.w	r3, r3, #16
 8002642:	60fb      	str	r3, [r7, #12]
 8002644:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002646:	f107 0210 	add.w	r2, r7, #16
 800264a:	f107 0314 	add.w	r3, r7, #20
 800264e:	4611      	mov	r1, r2
 8002650:	4618      	mov	r0, r3
 8002652:	f004 f8fd 	bl	8006850 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8002656:	6a3b      	ldr	r3, [r7, #32]
 8002658:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 800265a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800265c:	2b00      	cmp	r3, #0
 800265e:	d103      	bne.n	8002668 <HAL_InitTick+0x48>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8002660:	f004 f8ca 	bl	80067f8 <HAL_RCC_GetPCLK1Freq>
 8002664:	6378      	str	r0, [r7, #52]	@ 0x34
 8002666:	e004      	b.n	8002672 <HAL_InitTick+0x52>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8002668:	f004 f8c6 	bl	80067f8 <HAL_RCC_GetPCLK1Freq>
 800266c:	4603      	mov	r3, r0
 800266e:	005b      	lsls	r3, r3, #1
 8002670:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8002672:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002674:	4a23      	ldr	r2, [pc, #140]	@ (8002704 <HAL_InitTick+0xe4>)
 8002676:	fba2 2303 	umull	r2, r3, r2, r3
 800267a:	0c9b      	lsrs	r3, r3, #18
 800267c:	3b01      	subs	r3, #1
 800267e:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8002680:	4b21      	ldr	r3, [pc, #132]	@ (8002708 <HAL_InitTick+0xe8>)
 8002682:	4a22      	ldr	r2, [pc, #136]	@ (800270c <HAL_InitTick+0xec>)
 8002684:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8002686:	4b20      	ldr	r3, [pc, #128]	@ (8002708 <HAL_InitTick+0xe8>)
 8002688:	f240 32e7 	movw	r2, #999	@ 0x3e7
 800268c:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 800268e:	4a1e      	ldr	r2, [pc, #120]	@ (8002708 <HAL_InitTick+0xe8>)
 8002690:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002692:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8002694:	4b1c      	ldr	r3, [pc, #112]	@ (8002708 <HAL_InitTick+0xe8>)
 8002696:	2200      	movs	r2, #0
 8002698:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800269a:	4b1b      	ldr	r3, [pc, #108]	@ (8002708 <HAL_InitTick+0xe8>)
 800269c:	2200      	movs	r2, #0
 800269e:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80026a0:	4b19      	ldr	r3, [pc, #100]	@ (8002708 <HAL_InitTick+0xe8>)
 80026a2:	2200      	movs	r2, #0
 80026a4:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 80026a6:	4818      	ldr	r0, [pc, #96]	@ (8002708 <HAL_InitTick+0xe8>)
 80026a8:	f004 fc5c 	bl	8006f64 <HAL_TIM_Base_Init>
 80026ac:	4603      	mov	r3, r0
 80026ae:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 80026b2:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d11b      	bne.n	80026f2 <HAL_InitTick+0xd2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 80026ba:	4813      	ldr	r0, [pc, #76]	@ (8002708 <HAL_InitTick+0xe8>)
 80026bc:	f004 fd00 	bl	80070c0 <HAL_TIM_Base_Start_IT>
 80026c0:	4603      	mov	r3, r0
 80026c2:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 80026c6:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	d111      	bne.n	80026f2 <HAL_InitTick+0xd2>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80026ce:	2036      	movs	r0, #54	@ 0x36
 80026d0:	f000 fd36 	bl	8003140 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	2b0f      	cmp	r3, #15
 80026d8:	d808      	bhi.n	80026ec <HAL_InitTick+0xcc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 80026da:	2200      	movs	r2, #0
 80026dc:	6879      	ldr	r1, [r7, #4]
 80026de:	2036      	movs	r0, #54	@ 0x36
 80026e0:	f000 fd12 	bl	8003108 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80026e4:	4a0a      	ldr	r2, [pc, #40]	@ (8002710 <HAL_InitTick+0xf0>)
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	6013      	str	r3, [r2, #0]
 80026ea:	e002      	b.n	80026f2 <HAL_InitTick+0xd2>
      }
      else
      {
        status = HAL_ERROR;
 80026ec:	2301      	movs	r3, #1
 80026ee:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 80026f2:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 80026f6:	4618      	mov	r0, r3
 80026f8:	3738      	adds	r7, #56	@ 0x38
 80026fa:	46bd      	mov	sp, r7
 80026fc:	bd80      	pop	{r7, pc}
 80026fe:	bf00      	nop
 8002700:	40021000 	.word	0x40021000
 8002704:	431bde83 	.word	0x431bde83
 8002708:	20005958 	.word	0x20005958
 800270c:	40001000 	.word	0x40001000
 8002710:	20000044 	.word	0x20000044

08002714 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002714:	b480      	push	{r7}
 8002716:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002718:	bf00      	nop
 800271a:	e7fd      	b.n	8002718 <NMI_Handler+0x4>

0800271c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800271c:	b480      	push	{r7}
 800271e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002720:	bf00      	nop
 8002722:	e7fd      	b.n	8002720 <HardFault_Handler+0x4>

08002724 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002724:	b480      	push	{r7}
 8002726:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002728:	bf00      	nop
 800272a:	e7fd      	b.n	8002728 <MemManage_Handler+0x4>

0800272c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800272c:	b480      	push	{r7}
 800272e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002730:	bf00      	nop
 8002732:	e7fd      	b.n	8002730 <BusFault_Handler+0x4>

08002734 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002734:	b480      	push	{r7}
 8002736:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002738:	bf00      	nop
 800273a:	e7fd      	b.n	8002738 <UsageFault_Handler+0x4>

0800273c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800273c:	b480      	push	{r7}
 800273e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002740:	bf00      	nop
 8002742:	46bd      	mov	sp, r7
 8002744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002748:	4770      	bx	lr
	...

0800274c <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 800274c:	b580      	push	{r7, lr}
 800274e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8002750:	4802      	ldr	r0, [pc, #8]	@ (800275c <DMA1_Channel6_IRQHandler+0x10>)
 8002752:	f000 fe9a 	bl	800348a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 8002756:	bf00      	nop
 8002758:	bd80      	pop	{r7, pc}
 800275a:	bf00      	nop
 800275c:	20005acc 	.word	0x20005acc

08002760 <DMA1_Channel7_IRQHandler>:

/**
  * @brief This function handles DMA1 channel7 global interrupt.
  */
void DMA1_Channel7_IRQHandler(void)
{
 8002760:	b580      	push	{r7, lr}
 8002762:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel7_IRQn 0 */

  /* USER CODE END DMA1_Channel7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8002764:	4802      	ldr	r0, [pc, #8]	@ (8002770 <DMA1_Channel7_IRQHandler+0x10>)
 8002766:	f000 fe90 	bl	800348a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel7_IRQn 1 */

  /* USER CODE END DMA1_Channel7_IRQn 1 */
}
 800276a:	bf00      	nop
 800276c:	bd80      	pop	{r7, pc}
 800276e:	bf00      	nop
 8002770:	20005b14 	.word	0x20005b14

08002774 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8002774:	b580      	push	{r7, lr}
 8002776:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8002778:	4802      	ldr	r0, [pc, #8]	@ (8002784 <I2C1_EV_IRQHandler+0x10>)
 800277a:	f001 fcb1 	bl	80040e0 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 800277e:	bf00      	nop
 8002780:	bd80      	pop	{r7, pc}
 8002782:	bf00      	nop
 8002784:	20005860 	.word	0x20005860

08002788 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8002788:	b580      	push	{r7, lr}
 800278a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 800278c:	4802      	ldr	r0, [pc, #8]	@ (8002798 <USART2_IRQHandler+0x10>)
 800278e:	f006 f803 	bl	8008798 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8002792:	bf00      	nop
 8002794:	bd80      	pop	{r7, pc}
 8002796:	bf00      	nop
 8002798:	20005a44 	.word	0x20005a44

0800279c <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 and channel2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 800279c:	b580      	push	{r7, lr}
 800279e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80027a0:	4802      	ldr	r0, [pc, #8]	@ (80027ac <TIM6_DAC_IRQHandler+0x10>)
 80027a2:	f004 ff4b 	bl	800763c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80027a6:	bf00      	nop
 80027a8:	bd80      	pop	{r7, pc}
 80027aa:	bf00      	nop
 80027ac:	20005958 	.word	0x20005958

080027b0 <DMA2_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA2 channel6 global interrupt.
  */
void DMA2_Channel6_IRQHandler(void)
{
 80027b0:	b580      	push	{r7, lr}
 80027b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Channel6_IRQn 0 */

  /* USER CODE END DMA2_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 80027b4:	4802      	ldr	r0, [pc, #8]	@ (80027c0 <DMA2_Channel6_IRQHandler+0x10>)
 80027b6:	f000 fe68 	bl	800348a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Channel6_IRQn 1 */

  /* USER CODE END DMA2_Channel6_IRQn 1 */
}
 80027ba:	bf00      	nop
 80027bc:	bd80      	pop	{r7, pc}
 80027be:	bf00      	nop
 80027c0:	200058b4 	.word	0x200058b4

080027c4 <DMA2_Channel7_IRQHandler>:

/**
  * @brief This function handles DMA2 channel7 global interrupt.
  */
void DMA2_Channel7_IRQHandler(void)
{
 80027c4:	b580      	push	{r7, lr}
 80027c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Channel7_IRQn 0 */

  /* USER CODE END DMA2_Channel7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_tx);
 80027c8:	4802      	ldr	r0, [pc, #8]	@ (80027d4 <DMA2_Channel7_IRQHandler+0x10>)
 80027ca:	f000 fe5e 	bl	800348a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Channel7_IRQn 1 */

  /* USER CODE END DMA2_Channel7_IRQn 1 */
}
 80027ce:	bf00      	nop
 80027d0:	bd80      	pop	{r7, pc}
 80027d2:	bf00      	nop
 80027d4:	200058fc 	.word	0x200058fc

080027d8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80027d8:	b480      	push	{r7}
 80027da:	af00      	add	r7, sp, #0
  return 1;
 80027dc:	2301      	movs	r3, #1
}
 80027de:	4618      	mov	r0, r3
 80027e0:	46bd      	mov	sp, r7
 80027e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027e6:	4770      	bx	lr

080027e8 <_kill>:

int _kill(int pid, int sig)
{
 80027e8:	b580      	push	{r7, lr}
 80027ea:	b082      	sub	sp, #8
 80027ec:	af00      	add	r7, sp, #0
 80027ee:	6078      	str	r0, [r7, #4]
 80027f0:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80027f2:	f017 faf1 	bl	8019dd8 <__errno>
 80027f6:	4603      	mov	r3, r0
 80027f8:	2216      	movs	r2, #22
 80027fa:	601a      	str	r2, [r3, #0]
  return -1;
 80027fc:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8002800:	4618      	mov	r0, r3
 8002802:	3708      	adds	r7, #8
 8002804:	46bd      	mov	sp, r7
 8002806:	bd80      	pop	{r7, pc}

08002808 <_exit>:

void _exit (int status)
{
 8002808:	b580      	push	{r7, lr}
 800280a:	b082      	sub	sp, #8
 800280c:	af00      	add	r7, sp, #0
 800280e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002810:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8002814:	6878      	ldr	r0, [r7, #4]
 8002816:	f7ff ffe7 	bl	80027e8 <_kill>
  while (1) {}    /* Make sure we hang here */
 800281a:	bf00      	nop
 800281c:	e7fd      	b.n	800281a <_exit+0x12>

0800281e <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800281e:	b580      	push	{r7, lr}
 8002820:	b086      	sub	sp, #24
 8002822:	af00      	add	r7, sp, #0
 8002824:	60f8      	str	r0, [r7, #12]
 8002826:	60b9      	str	r1, [r7, #8]
 8002828:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800282a:	2300      	movs	r3, #0
 800282c:	617b      	str	r3, [r7, #20]
 800282e:	e00a      	b.n	8002846 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002830:	f3af 8000 	nop.w
 8002834:	4601      	mov	r1, r0
 8002836:	68bb      	ldr	r3, [r7, #8]
 8002838:	1c5a      	adds	r2, r3, #1
 800283a:	60ba      	str	r2, [r7, #8]
 800283c:	b2ca      	uxtb	r2, r1
 800283e:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002840:	697b      	ldr	r3, [r7, #20]
 8002842:	3301      	adds	r3, #1
 8002844:	617b      	str	r3, [r7, #20]
 8002846:	697a      	ldr	r2, [r7, #20]
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	429a      	cmp	r2, r3
 800284c:	dbf0      	blt.n	8002830 <_read+0x12>
  }

  return len;
 800284e:	687b      	ldr	r3, [r7, #4]
}
 8002850:	4618      	mov	r0, r3
 8002852:	3718      	adds	r7, #24
 8002854:	46bd      	mov	sp, r7
 8002856:	bd80      	pop	{r7, pc}

08002858 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002858:	b580      	push	{r7, lr}
 800285a:	b086      	sub	sp, #24
 800285c:	af00      	add	r7, sp, #0
 800285e:	60f8      	str	r0, [r7, #12]
 8002860:	60b9      	str	r1, [r7, #8]
 8002862:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002864:	2300      	movs	r3, #0
 8002866:	617b      	str	r3, [r7, #20]
 8002868:	e009      	b.n	800287e <_write+0x26>
  {
    __io_putchar(*ptr++);
 800286a:	68bb      	ldr	r3, [r7, #8]
 800286c:	1c5a      	adds	r2, r3, #1
 800286e:	60ba      	str	r2, [r7, #8]
 8002870:	781b      	ldrb	r3, [r3, #0]
 8002872:	4618      	mov	r0, r3
 8002874:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002878:	697b      	ldr	r3, [r7, #20]
 800287a:	3301      	adds	r3, #1
 800287c:	617b      	str	r3, [r7, #20]
 800287e:	697a      	ldr	r2, [r7, #20]
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	429a      	cmp	r2, r3
 8002884:	dbf1      	blt.n	800286a <_write+0x12>
  }
  return len;
 8002886:	687b      	ldr	r3, [r7, #4]
}
 8002888:	4618      	mov	r0, r3
 800288a:	3718      	adds	r7, #24
 800288c:	46bd      	mov	sp, r7
 800288e:	bd80      	pop	{r7, pc}

08002890 <_close>:

int _close(int file)
{
 8002890:	b480      	push	{r7}
 8002892:	b083      	sub	sp, #12
 8002894:	af00      	add	r7, sp, #0
 8002896:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002898:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 800289c:	4618      	mov	r0, r3
 800289e:	370c      	adds	r7, #12
 80028a0:	46bd      	mov	sp, r7
 80028a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028a6:	4770      	bx	lr

080028a8 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80028a8:	b480      	push	{r7}
 80028aa:	b083      	sub	sp, #12
 80028ac:	af00      	add	r7, sp, #0
 80028ae:	6078      	str	r0, [r7, #4]
 80028b0:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80028b2:	683b      	ldr	r3, [r7, #0]
 80028b4:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80028b8:	605a      	str	r2, [r3, #4]
  return 0;
 80028ba:	2300      	movs	r3, #0
}
 80028bc:	4618      	mov	r0, r3
 80028be:	370c      	adds	r7, #12
 80028c0:	46bd      	mov	sp, r7
 80028c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028c6:	4770      	bx	lr

080028c8 <_isatty>:

int _isatty(int file)
{
 80028c8:	b480      	push	{r7}
 80028ca:	b083      	sub	sp, #12
 80028cc:	af00      	add	r7, sp, #0
 80028ce:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80028d0:	2301      	movs	r3, #1
}
 80028d2:	4618      	mov	r0, r3
 80028d4:	370c      	adds	r7, #12
 80028d6:	46bd      	mov	sp, r7
 80028d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028dc:	4770      	bx	lr

080028de <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80028de:	b480      	push	{r7}
 80028e0:	b085      	sub	sp, #20
 80028e2:	af00      	add	r7, sp, #0
 80028e4:	60f8      	str	r0, [r7, #12]
 80028e6:	60b9      	str	r1, [r7, #8]
 80028e8:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80028ea:	2300      	movs	r3, #0
}
 80028ec:	4618      	mov	r0, r3
 80028ee:	3714      	adds	r7, #20
 80028f0:	46bd      	mov	sp, r7
 80028f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028f6:	4770      	bx	lr

080028f8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80028f8:	b580      	push	{r7, lr}
 80028fa:	b086      	sub	sp, #24
 80028fc:	af00      	add	r7, sp, #0
 80028fe:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002900:	4a14      	ldr	r2, [pc, #80]	@ (8002954 <_sbrk+0x5c>)
 8002902:	4b15      	ldr	r3, [pc, #84]	@ (8002958 <_sbrk+0x60>)
 8002904:	1ad3      	subs	r3, r2, r3
 8002906:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002908:	697b      	ldr	r3, [r7, #20]
 800290a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800290c:	4b13      	ldr	r3, [pc, #76]	@ (800295c <_sbrk+0x64>)
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	2b00      	cmp	r3, #0
 8002912:	d102      	bne.n	800291a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002914:	4b11      	ldr	r3, [pc, #68]	@ (800295c <_sbrk+0x64>)
 8002916:	4a12      	ldr	r2, [pc, #72]	@ (8002960 <_sbrk+0x68>)
 8002918:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800291a:	4b10      	ldr	r3, [pc, #64]	@ (800295c <_sbrk+0x64>)
 800291c:	681a      	ldr	r2, [r3, #0]
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	4413      	add	r3, r2
 8002922:	693a      	ldr	r2, [r7, #16]
 8002924:	429a      	cmp	r2, r3
 8002926:	d207      	bcs.n	8002938 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002928:	f017 fa56 	bl	8019dd8 <__errno>
 800292c:	4603      	mov	r3, r0
 800292e:	220c      	movs	r2, #12
 8002930:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002932:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8002936:	e009      	b.n	800294c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002938:	4b08      	ldr	r3, [pc, #32]	@ (800295c <_sbrk+0x64>)
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800293e:	4b07      	ldr	r3, [pc, #28]	@ (800295c <_sbrk+0x64>)
 8002940:	681a      	ldr	r2, [r3, #0]
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	4413      	add	r3, r2
 8002946:	4a05      	ldr	r2, [pc, #20]	@ (800295c <_sbrk+0x64>)
 8002948:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800294a:	68fb      	ldr	r3, [r7, #12]
}
 800294c:	4618      	mov	r0, r3
 800294e:	3718      	adds	r7, #24
 8002950:	46bd      	mov	sp, r7
 8002952:	bd80      	pop	{r7, pc}
 8002954:	20010000 	.word	0x20010000
 8002958:	00000400 	.word	0x00000400
 800295c:	200059a8 	.word	0x200059a8
 8002960:	2000c208 	.word	0x2000c208

08002964 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8002964:	b480      	push	{r7}
 8002966:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8002968:	4b06      	ldr	r3, [pc, #24]	@ (8002984 <SystemInit+0x20>)
 800296a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800296e:	4a05      	ldr	r2, [pc, #20]	@ (8002984 <SystemInit+0x20>)
 8002970:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002974:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8002978:	bf00      	nop
 800297a:	46bd      	mov	sp, r7
 800297c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002980:	4770      	bx	lr
 8002982:	bf00      	nop
 8002984:	e000ed00 	.word	0xe000ed00

08002988 <MX_TIM1_Init>:
TIM_HandleTypeDef htim1;
TIM_HandleTypeDef htim15;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8002988:	b580      	push	{r7, lr}
 800298a:	b08c      	sub	sp, #48	@ 0x30
 800298c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800298e:	f107 030c 	add.w	r3, r7, #12
 8002992:	2224      	movs	r2, #36	@ 0x24
 8002994:	2100      	movs	r1, #0
 8002996:	4618      	mov	r0, r3
 8002998:	f017 f934 	bl	8019c04 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800299c:	463b      	mov	r3, r7
 800299e:	2200      	movs	r2, #0
 80029a0:	601a      	str	r2, [r3, #0]
 80029a2:	605a      	str	r2, [r3, #4]
 80029a4:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80029a6:	4b23      	ldr	r3, [pc, #140]	@ (8002a34 <MX_TIM1_Init+0xac>)
 80029a8:	4a23      	ldr	r2, [pc, #140]	@ (8002a38 <MX_TIM1_Init+0xb0>)
 80029aa:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80029ac:	4b21      	ldr	r3, [pc, #132]	@ (8002a34 <MX_TIM1_Init+0xac>)
 80029ae:	2200      	movs	r2, #0
 80029b0:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80029b2:	4b20      	ldr	r3, [pc, #128]	@ (8002a34 <MX_TIM1_Init+0xac>)
 80029b4:	2200      	movs	r2, #0
 80029b6:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 80029b8:	4b1e      	ldr	r3, [pc, #120]	@ (8002a34 <MX_TIM1_Init+0xac>)
 80029ba:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80029be:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80029c0:	4b1c      	ldr	r3, [pc, #112]	@ (8002a34 <MX_TIM1_Init+0xac>)
 80029c2:	2200      	movs	r2, #0
 80029c4:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80029c6:	4b1b      	ldr	r3, [pc, #108]	@ (8002a34 <MX_TIM1_Init+0xac>)
 80029c8:	2200      	movs	r2, #0
 80029ca:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80029cc:	4b19      	ldr	r3, [pc, #100]	@ (8002a34 <MX_TIM1_Init+0xac>)
 80029ce:	2200      	movs	r2, #0
 80029d0:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80029d2:	2303      	movs	r3, #3
 80029d4:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80029d6:	2300      	movs	r3, #0
 80029d8:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80029da:	2301      	movs	r3, #1
 80029dc:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80029de:	2300      	movs	r3, #0
 80029e0:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80029e2:	2300      	movs	r3, #0
 80029e4:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80029e6:	2300      	movs	r3, #0
 80029e8:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80029ea:	2301      	movs	r3, #1
 80029ec:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80029ee:	2300      	movs	r3, #0
 80029f0:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 80029f2:	2300      	movs	r3, #0
 80029f4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 80029f6:	f107 030c 	add.w	r3, r7, #12
 80029fa:	4619      	mov	r1, r3
 80029fc:	480d      	ldr	r0, [pc, #52]	@ (8002a34 <MX_TIM1_Init+0xac>)
 80029fe:	f004 fce9 	bl	80073d4 <HAL_TIM_Encoder_Init>
 8002a02:	4603      	mov	r3, r0
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	d001      	beq.n	8002a0c <MX_TIM1_Init+0x84>
  {
    Error_Handler();
 8002a08:	f7ff fc78 	bl	80022fc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002a0c:	2300      	movs	r3, #0
 8002a0e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8002a10:	2300      	movs	r3, #0
 8002a12:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002a14:	2300      	movs	r3, #0
 8002a16:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8002a18:	463b      	mov	r3, r7
 8002a1a:	4619      	mov	r1, r3
 8002a1c:	4805      	ldr	r0, [pc, #20]	@ (8002a34 <MX_TIM1_Init+0xac>)
 8002a1e:	f005 fbf1 	bl	8008204 <HAL_TIMEx_MasterConfigSynchronization>
 8002a22:	4603      	mov	r3, r0
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	d001      	beq.n	8002a2c <MX_TIM1_Init+0xa4>
  {
    Error_Handler();
 8002a28:	f7ff fc68 	bl	80022fc <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8002a2c:	bf00      	nop
 8002a2e:	3730      	adds	r7, #48	@ 0x30
 8002a30:	46bd      	mov	sp, r7
 8002a32:	bd80      	pop	{r7, pc}
 8002a34:	200059ac 	.word	0x200059ac
 8002a38:	40012c00 	.word	0x40012c00

08002a3c <MX_TIM15_Init>:
/* TIM15 init function */
void MX_TIM15_Init(void)
{
 8002a3c:	b580      	push	{r7, lr}
 8002a3e:	b096      	sub	sp, #88	@ 0x58
 8002a40:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM15_Init 0 */

  /* USER CODE END TIM15_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002a42:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8002a46:	2200      	movs	r2, #0
 8002a48:	601a      	str	r2, [r3, #0]
 8002a4a:	605a      	str	r2, [r3, #4]
 8002a4c:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002a4e:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8002a52:	2200      	movs	r2, #0
 8002a54:	601a      	str	r2, [r3, #0]
 8002a56:	605a      	str	r2, [r3, #4]
 8002a58:	609a      	str	r2, [r3, #8]
 8002a5a:	60da      	str	r2, [r3, #12]
 8002a5c:	611a      	str	r2, [r3, #16]
 8002a5e:	615a      	str	r2, [r3, #20]
 8002a60:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8002a62:	1d3b      	adds	r3, r7, #4
 8002a64:	222c      	movs	r2, #44	@ 0x2c
 8002a66:	2100      	movs	r1, #0
 8002a68:	4618      	mov	r0, r3
 8002a6a:	f017 f8cb 	bl	8019c04 <memset>

  /* USER CODE BEGIN TIM15_Init 1 */

  /* USER CODE END TIM15_Init 1 */
  htim15.Instance = TIM15;
 8002a6e:	4b39      	ldr	r3, [pc, #228]	@ (8002b54 <MX_TIM15_Init+0x118>)
 8002a70:	4a39      	ldr	r2, [pc, #228]	@ (8002b58 <MX_TIM15_Init+0x11c>)
 8002a72:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 0;
 8002a74:	4b37      	ldr	r3, [pc, #220]	@ (8002b54 <MX_TIM15_Init+0x118>)
 8002a76:	2200      	movs	r2, #0
 8002a78:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002a7a:	4b36      	ldr	r3, [pc, #216]	@ (8002b54 <MX_TIM15_Init+0x118>)
 8002a7c:	2200      	movs	r2, #0
 8002a7e:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 65535;
 8002a80:	4b34      	ldr	r3, [pc, #208]	@ (8002b54 <MX_TIM15_Init+0x118>)
 8002a82:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002a86:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002a88:	4b32      	ldr	r3, [pc, #200]	@ (8002b54 <MX_TIM15_Init+0x118>)
 8002a8a:	2200      	movs	r2, #0
 8002a8c:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 8002a8e:	4b31      	ldr	r3, [pc, #196]	@ (8002b54 <MX_TIM15_Init+0x118>)
 8002a90:	2200      	movs	r2, #0
 8002a92:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002a94:	4b2f      	ldr	r3, [pc, #188]	@ (8002b54 <MX_TIM15_Init+0x118>)
 8002a96:	2200      	movs	r2, #0
 8002a98:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim15) != HAL_OK)
 8002a9a:	482e      	ldr	r0, [pc, #184]	@ (8002b54 <MX_TIM15_Init+0x118>)
 8002a9c:	f004 fb64 	bl	8007168 <HAL_TIM_PWM_Init>
 8002aa0:	4603      	mov	r3, r0
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d001      	beq.n	8002aaa <MX_TIM15_Init+0x6e>
  {
    Error_Handler();
 8002aa6:	f7ff fc29 	bl	80022fc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002aaa:	2300      	movs	r3, #0
 8002aac:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002aae:	2300      	movs	r3, #0
 8002ab0:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 8002ab2:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8002ab6:	4619      	mov	r1, r3
 8002ab8:	4826      	ldr	r0, [pc, #152]	@ (8002b54 <MX_TIM15_Init+0x118>)
 8002aba:	f005 fba3 	bl	8008204 <HAL_TIMEx_MasterConfigSynchronization>
 8002abe:	4603      	mov	r3, r0
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	d001      	beq.n	8002ac8 <MX_TIM15_Init+0x8c>
  {
    Error_Handler();
 8002ac4:	f7ff fc1a 	bl	80022fc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002ac8:	2360      	movs	r3, #96	@ 0x60
 8002aca:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.Pulse = 0;
 8002acc:	2300      	movs	r3, #0
 8002ace:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002ad0:	2300      	movs	r3, #0
 8002ad2:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8002ad4:	2300      	movs	r3, #0
 8002ad6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002ad8:	2300      	movs	r3, #0
 8002ada:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8002adc:	2300      	movs	r3, #0
 8002ade:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8002ae0:	2300      	movs	r3, #0
 8002ae2:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim15, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002ae4:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8002ae8:	2200      	movs	r2, #0
 8002aea:	4619      	mov	r1, r3
 8002aec:	4819      	ldr	r0, [pc, #100]	@ (8002b54 <MX_TIM15_Init+0x118>)
 8002aee:	f004 fea7 	bl	8007840 <HAL_TIM_PWM_ConfigChannel>
 8002af2:	4603      	mov	r3, r0
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	d001      	beq.n	8002afc <MX_TIM15_Init+0xc0>
  {
    Error_Handler();
 8002af8:	f7ff fc00 	bl	80022fc <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim15, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002afc:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8002b00:	2204      	movs	r2, #4
 8002b02:	4619      	mov	r1, r3
 8002b04:	4813      	ldr	r0, [pc, #76]	@ (8002b54 <MX_TIM15_Init+0x118>)
 8002b06:	f004 fe9b 	bl	8007840 <HAL_TIM_PWM_ConfigChannel>
 8002b0a:	4603      	mov	r3, r0
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	d001      	beq.n	8002b14 <MX_TIM15_Init+0xd8>
  {
    Error_Handler();
 8002b10:	f7ff fbf4 	bl	80022fc <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8002b14:	2300      	movs	r3, #0
 8002b16:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8002b18:	2300      	movs	r3, #0
 8002b1a:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8002b1c:	2300      	movs	r3, #0
 8002b1e:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8002b20:	2300      	movs	r3, #0
 8002b22:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8002b24:	2300      	movs	r3, #0
 8002b26:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8002b28:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002b2c:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8002b2e:	2300      	movs	r3, #0
 8002b30:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim15, &sBreakDeadTimeConfig) != HAL_OK)
 8002b32:	1d3b      	adds	r3, r7, #4
 8002b34:	4619      	mov	r1, r3
 8002b36:	4807      	ldr	r0, [pc, #28]	@ (8002b54 <MX_TIM15_Init+0x118>)
 8002b38:	f005 fbca 	bl	80082d0 <HAL_TIMEx_ConfigBreakDeadTime>
 8002b3c:	4603      	mov	r3, r0
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d001      	beq.n	8002b46 <MX_TIM15_Init+0x10a>
  {
    Error_Handler();
 8002b42:	f7ff fbdb 	bl	80022fc <Error_Handler>
  }
  /* USER CODE BEGIN TIM15_Init 2 */

  /* USER CODE END TIM15_Init 2 */
  HAL_TIM_MspPostInit(&htim15);
 8002b46:	4803      	ldr	r0, [pc, #12]	@ (8002b54 <MX_TIM15_Init+0x118>)
 8002b48:	f000 f86c 	bl	8002c24 <HAL_TIM_MspPostInit>

}
 8002b4c:	bf00      	nop
 8002b4e:	3758      	adds	r7, #88	@ 0x58
 8002b50:	46bd      	mov	sp, r7
 8002b52:	bd80      	pop	{r7, pc}
 8002b54:	200059f8 	.word	0x200059f8
 8002b58:	40014000 	.word	0x40014000

08002b5c <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 8002b5c:	b580      	push	{r7, lr}
 8002b5e:	b08a      	sub	sp, #40	@ 0x28
 8002b60:	af00      	add	r7, sp, #0
 8002b62:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b64:	f107 0314 	add.w	r3, r7, #20
 8002b68:	2200      	movs	r2, #0
 8002b6a:	601a      	str	r2, [r3, #0]
 8002b6c:	605a      	str	r2, [r3, #4]
 8002b6e:	609a      	str	r2, [r3, #8]
 8002b70:	60da      	str	r2, [r3, #12]
 8002b72:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM1)
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	4a18      	ldr	r2, [pc, #96]	@ (8002bdc <HAL_TIM_Encoder_MspInit+0x80>)
 8002b7a:	4293      	cmp	r3, r2
 8002b7c:	d129      	bne.n	8002bd2 <HAL_TIM_Encoder_MspInit+0x76>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002b7e:	4b18      	ldr	r3, [pc, #96]	@ (8002be0 <HAL_TIM_Encoder_MspInit+0x84>)
 8002b80:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002b82:	4a17      	ldr	r2, [pc, #92]	@ (8002be0 <HAL_TIM_Encoder_MspInit+0x84>)
 8002b84:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8002b88:	6613      	str	r3, [r2, #96]	@ 0x60
 8002b8a:	4b15      	ldr	r3, [pc, #84]	@ (8002be0 <HAL_TIM_Encoder_MspInit+0x84>)
 8002b8c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002b8e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002b92:	613b      	str	r3, [r7, #16]
 8002b94:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002b96:	4b12      	ldr	r3, [pc, #72]	@ (8002be0 <HAL_TIM_Encoder_MspInit+0x84>)
 8002b98:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002b9a:	4a11      	ldr	r2, [pc, #68]	@ (8002be0 <HAL_TIM_Encoder_MspInit+0x84>)
 8002b9c:	f043 0301 	orr.w	r3, r3, #1
 8002ba0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002ba2:	4b0f      	ldr	r3, [pc, #60]	@ (8002be0 <HAL_TIM_Encoder_MspInit+0x84>)
 8002ba4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002ba6:	f003 0301 	and.w	r3, r3, #1
 8002baa:	60fb      	str	r3, [r7, #12]
 8002bac:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8002bae:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8002bb2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002bb4:	2302      	movs	r3, #2
 8002bb6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bb8:	2300      	movs	r3, #0
 8002bba:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002bbc:	2302      	movs	r3, #2
 8002bbe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8002bc0:	2301      	movs	r3, #1
 8002bc2:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002bc4:	f107 0314 	add.w	r3, r7, #20
 8002bc8:	4619      	mov	r1, r3
 8002bca:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002bce:	f000 fd55 	bl	800367c <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 8002bd2:	bf00      	nop
 8002bd4:	3728      	adds	r7, #40	@ 0x28
 8002bd6:	46bd      	mov	sp, r7
 8002bd8:	bd80      	pop	{r7, pc}
 8002bda:	bf00      	nop
 8002bdc:	40012c00 	.word	0x40012c00
 8002be0:	40021000 	.word	0x40021000

08002be4 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8002be4:	b480      	push	{r7}
 8002be6:	b085      	sub	sp, #20
 8002be8:	af00      	add	r7, sp, #0
 8002bea:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM15)
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	4a0a      	ldr	r2, [pc, #40]	@ (8002c1c <HAL_TIM_PWM_MspInit+0x38>)
 8002bf2:	4293      	cmp	r3, r2
 8002bf4:	d10b      	bne.n	8002c0e <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM15_MspInit 0 */

  /* USER CODE END TIM15_MspInit 0 */
    /* TIM15 clock enable */
    __HAL_RCC_TIM15_CLK_ENABLE();
 8002bf6:	4b0a      	ldr	r3, [pc, #40]	@ (8002c20 <HAL_TIM_PWM_MspInit+0x3c>)
 8002bf8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002bfa:	4a09      	ldr	r2, [pc, #36]	@ (8002c20 <HAL_TIM_PWM_MspInit+0x3c>)
 8002bfc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002c00:	6613      	str	r3, [r2, #96]	@ 0x60
 8002c02:	4b07      	ldr	r3, [pc, #28]	@ (8002c20 <HAL_TIM_PWM_MspInit+0x3c>)
 8002c04:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002c06:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002c0a:	60fb      	str	r3, [r7, #12]
 8002c0c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM15_MspInit 1 */

  /* USER CODE END TIM15_MspInit 1 */
  }
}
 8002c0e:	bf00      	nop
 8002c10:	3714      	adds	r7, #20
 8002c12:	46bd      	mov	sp, r7
 8002c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c18:	4770      	bx	lr
 8002c1a:	bf00      	nop
 8002c1c:	40014000 	.word	0x40014000
 8002c20:	40021000 	.word	0x40021000

08002c24 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8002c24:	b580      	push	{r7, lr}
 8002c26:	b088      	sub	sp, #32
 8002c28:	af00      	add	r7, sp, #0
 8002c2a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002c2c:	f107 030c 	add.w	r3, r7, #12
 8002c30:	2200      	movs	r2, #0
 8002c32:	601a      	str	r2, [r3, #0]
 8002c34:	605a      	str	r2, [r3, #4]
 8002c36:	609a      	str	r2, [r3, #8]
 8002c38:	60da      	str	r2, [r3, #12]
 8002c3a:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM15)
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	4a11      	ldr	r2, [pc, #68]	@ (8002c88 <HAL_TIM_MspPostInit+0x64>)
 8002c42:	4293      	cmp	r3, r2
 8002c44:	d11c      	bne.n	8002c80 <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM15_MspPostInit 0 */

  /* USER CODE END TIM15_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002c46:	4b11      	ldr	r3, [pc, #68]	@ (8002c8c <HAL_TIM_MspPostInit+0x68>)
 8002c48:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002c4a:	4a10      	ldr	r2, [pc, #64]	@ (8002c8c <HAL_TIM_MspPostInit+0x68>)
 8002c4c:	f043 0301 	orr.w	r3, r3, #1
 8002c50:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002c52:	4b0e      	ldr	r3, [pc, #56]	@ (8002c8c <HAL_TIM_MspPostInit+0x68>)
 8002c54:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002c56:	f003 0301 	and.w	r3, r3, #1
 8002c5a:	60bb      	str	r3, [r7, #8]
 8002c5c:	68bb      	ldr	r3, [r7, #8]
    /**TIM15 GPIO Configuration
    PA1     ------> TIM15_CH1N
    PA3     ------> TIM15_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_3;
 8002c5e:	230a      	movs	r3, #10
 8002c60:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c62:	2302      	movs	r3, #2
 8002c64:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c66:	2300      	movs	r3, #0
 8002c68:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c6a:	2300      	movs	r3, #0
 8002c6c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF14_TIM15;
 8002c6e:	230e      	movs	r3, #14
 8002c70:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002c72:	f107 030c 	add.w	r3, r7, #12
 8002c76:	4619      	mov	r1, r3
 8002c78:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002c7c:	f000 fcfe 	bl	800367c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM15_MspPostInit 1 */

  /* USER CODE END TIM15_MspPostInit 1 */
  }

}
 8002c80:	bf00      	nop
 8002c82:	3720      	adds	r7, #32
 8002c84:	46bd      	mov	sp, r7
 8002c86:	bd80      	pop	{r7, pc}
 8002c88:	40014000 	.word	0x40014000
 8002c8c:	40021000 	.word	0x40021000

08002c90 <MX_USART2_UART_Init>:
DMA_HandleTypeDef hdma_usart2_tx;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8002c90:	b580      	push	{r7, lr}
 8002c92:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002c94:	4b14      	ldr	r3, [pc, #80]	@ (8002ce8 <MX_USART2_UART_Init+0x58>)
 8002c96:	4a15      	ldr	r2, [pc, #84]	@ (8002cec <MX_USART2_UART_Init+0x5c>)
 8002c98:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 921600;
 8002c9a:	4b13      	ldr	r3, [pc, #76]	@ (8002ce8 <MX_USART2_UART_Init+0x58>)
 8002c9c:	f44f 2261 	mov.w	r2, #921600	@ 0xe1000
 8002ca0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002ca2:	4b11      	ldr	r3, [pc, #68]	@ (8002ce8 <MX_USART2_UART_Init+0x58>)
 8002ca4:	2200      	movs	r2, #0
 8002ca6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002ca8:	4b0f      	ldr	r3, [pc, #60]	@ (8002ce8 <MX_USART2_UART_Init+0x58>)
 8002caa:	2200      	movs	r2, #0
 8002cac:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002cae:	4b0e      	ldr	r3, [pc, #56]	@ (8002ce8 <MX_USART2_UART_Init+0x58>)
 8002cb0:	2200      	movs	r2, #0
 8002cb2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002cb4:	4b0c      	ldr	r3, [pc, #48]	@ (8002ce8 <MX_USART2_UART_Init+0x58>)
 8002cb6:	220c      	movs	r2, #12
 8002cb8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002cba:	4b0b      	ldr	r3, [pc, #44]	@ (8002ce8 <MX_USART2_UART_Init+0x58>)
 8002cbc:	2200      	movs	r2, #0
 8002cbe:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002cc0:	4b09      	ldr	r3, [pc, #36]	@ (8002ce8 <MX_USART2_UART_Init+0x58>)
 8002cc2:	2200      	movs	r2, #0
 8002cc4:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002cc6:	4b08      	ldr	r3, [pc, #32]	@ (8002ce8 <MX_USART2_UART_Init+0x58>)
 8002cc8:	2200      	movs	r2, #0
 8002cca:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002ccc:	4b06      	ldr	r3, [pc, #24]	@ (8002ce8 <MX_USART2_UART_Init+0x58>)
 8002cce:	2200      	movs	r2, #0
 8002cd0:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002cd2:	4805      	ldr	r0, [pc, #20]	@ (8002ce8 <MX_USART2_UART_Init+0x58>)
 8002cd4:	f005 fbb7 	bl	8008446 <HAL_UART_Init>
 8002cd8:	4603      	mov	r3, r0
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d001      	beq.n	8002ce2 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8002cde:	f7ff fb0d 	bl	80022fc <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002ce2:	bf00      	nop
 8002ce4:	bd80      	pop	{r7, pc}
 8002ce6:	bf00      	nop
 8002ce8:	20005a44 	.word	0x20005a44
 8002cec:	40004400 	.word	0x40004400

08002cf0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002cf0:	b580      	push	{r7, lr}
 8002cf2:	b09e      	sub	sp, #120	@ 0x78
 8002cf4:	af00      	add	r7, sp, #0
 8002cf6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002cf8:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8002cfc:	2200      	movs	r2, #0
 8002cfe:	601a      	str	r2, [r3, #0]
 8002d00:	605a      	str	r2, [r3, #4]
 8002d02:	609a      	str	r2, [r3, #8]
 8002d04:	60da      	str	r2, [r3, #12]
 8002d06:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002d08:	f107 0310 	add.w	r3, r7, #16
 8002d0c:	2254      	movs	r2, #84	@ 0x54
 8002d0e:	2100      	movs	r1, #0
 8002d10:	4618      	mov	r0, r3
 8002d12:	f016 ff77 	bl	8019c04 <memset>
  if(uartHandle->Instance==USART2)
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	4a56      	ldr	r2, [pc, #344]	@ (8002e74 <HAL_UART_MspInit+0x184>)
 8002d1c:	4293      	cmp	r3, r2
 8002d1e:	f040 80a5 	bne.w	8002e6c <HAL_UART_MspInit+0x17c>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8002d22:	2302      	movs	r3, #2
 8002d24:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8002d26:	2300      	movs	r3, #0
 8002d28:	637b      	str	r3, [r7, #52]	@ 0x34
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002d2a:	f107 0310 	add.w	r3, r7, #16
 8002d2e:	4618      	mov	r0, r3
 8002d30:	f003 fe20 	bl	8006974 <HAL_RCCEx_PeriphCLKConfig>
 8002d34:	4603      	mov	r3, r0
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d001      	beq.n	8002d3e <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8002d3a:	f7ff fadf 	bl	80022fc <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002d3e:	4b4e      	ldr	r3, [pc, #312]	@ (8002e78 <HAL_UART_MspInit+0x188>)
 8002d40:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002d42:	4a4d      	ldr	r2, [pc, #308]	@ (8002e78 <HAL_UART_MspInit+0x188>)
 8002d44:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002d48:	6593      	str	r3, [r2, #88]	@ 0x58
 8002d4a:	4b4b      	ldr	r3, [pc, #300]	@ (8002e78 <HAL_UART_MspInit+0x188>)
 8002d4c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002d4e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002d52:	60fb      	str	r3, [r7, #12]
 8002d54:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002d56:	4b48      	ldr	r3, [pc, #288]	@ (8002e78 <HAL_UART_MspInit+0x188>)
 8002d58:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002d5a:	4a47      	ldr	r2, [pc, #284]	@ (8002e78 <HAL_UART_MspInit+0x188>)
 8002d5c:	f043 0301 	orr.w	r3, r3, #1
 8002d60:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002d62:	4b45      	ldr	r3, [pc, #276]	@ (8002e78 <HAL_UART_MspInit+0x188>)
 8002d64:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002d66:	f003 0301 	and.w	r3, r3, #1
 8002d6a:	60bb      	str	r3, [r7, #8]
 8002d6c:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA15 (JTDI)     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = VCP_TX_Pin;
 8002d6e:	2304      	movs	r3, #4
 8002d70:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d72:	2302      	movs	r3, #2
 8002d74:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d76:	2300      	movs	r3, #0
 8002d78:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002d7a:	2303      	movs	r3, #3
 8002d7c:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002d7e:	2307      	movs	r3, #7
 8002d80:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 8002d82:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8002d86:	4619      	mov	r1, r3
 8002d88:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002d8c:	f000 fc76 	bl	800367c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VCP_RX_Pin;
 8002d90:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002d94:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d96:	2302      	movs	r3, #2
 8002d98:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d9a:	2300      	movs	r3, #0
 8002d9c:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002d9e:	2303      	movs	r3, #3
 8002da0:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF3_USART2;
 8002da2:	2303      	movs	r3, #3
 8002da4:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 8002da6:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8002daa:	4619      	mov	r1, r3
 8002dac:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002db0:	f000 fc64 	bl	800367c <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Channel6;
 8002db4:	4b31      	ldr	r3, [pc, #196]	@ (8002e7c <HAL_UART_MspInit+0x18c>)
 8002db6:	4a32      	ldr	r2, [pc, #200]	@ (8002e80 <HAL_UART_MspInit+0x190>)
 8002db8:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Request = DMA_REQUEST_2;
 8002dba:	4b30      	ldr	r3, [pc, #192]	@ (8002e7c <HAL_UART_MspInit+0x18c>)
 8002dbc:	2202      	movs	r2, #2
 8002dbe:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002dc0:	4b2e      	ldr	r3, [pc, #184]	@ (8002e7c <HAL_UART_MspInit+0x18c>)
 8002dc2:	2200      	movs	r2, #0
 8002dc4:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002dc6:	4b2d      	ldr	r3, [pc, #180]	@ (8002e7c <HAL_UART_MspInit+0x18c>)
 8002dc8:	2200      	movs	r2, #0
 8002dca:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002dcc:	4b2b      	ldr	r3, [pc, #172]	@ (8002e7c <HAL_UART_MspInit+0x18c>)
 8002dce:	2280      	movs	r2, #128	@ 0x80
 8002dd0:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002dd2:	4b2a      	ldr	r3, [pc, #168]	@ (8002e7c <HAL_UART_MspInit+0x18c>)
 8002dd4:	2200      	movs	r2, #0
 8002dd6:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002dd8:	4b28      	ldr	r3, [pc, #160]	@ (8002e7c <HAL_UART_MspInit+0x18c>)
 8002dda:	2200      	movs	r2, #0
 8002ddc:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 8002dde:	4b27      	ldr	r3, [pc, #156]	@ (8002e7c <HAL_UART_MspInit+0x18c>)
 8002de0:	2220      	movs	r2, #32
 8002de2:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8002de4:	4b25      	ldr	r3, [pc, #148]	@ (8002e7c <HAL_UART_MspInit+0x18c>)
 8002de6:	f44f 5240 	mov.w	r2, #12288	@ 0x3000
 8002dea:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8002dec:	4823      	ldr	r0, [pc, #140]	@ (8002e7c <HAL_UART_MspInit+0x18c>)
 8002dee:	f000 f9b5 	bl	800315c <HAL_DMA_Init>
 8002df2:	4603      	mov	r3, r0
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	d001      	beq.n	8002dfc <HAL_UART_MspInit+0x10c>
    {
      Error_Handler();
 8002df8:	f7ff fa80 	bl	80022fc <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart2_rx);
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	4a1f      	ldr	r2, [pc, #124]	@ (8002e7c <HAL_UART_MspInit+0x18c>)
 8002e00:	675a      	str	r2, [r3, #116]	@ 0x74
 8002e02:	4a1e      	ldr	r2, [pc, #120]	@ (8002e7c <HAL_UART_MspInit+0x18c>)
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	6293      	str	r3, [r2, #40]	@ 0x28

    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Channel7;
 8002e08:	4b1e      	ldr	r3, [pc, #120]	@ (8002e84 <HAL_UART_MspInit+0x194>)
 8002e0a:	4a1f      	ldr	r2, [pc, #124]	@ (8002e88 <HAL_UART_MspInit+0x198>)
 8002e0c:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Request = DMA_REQUEST_2;
 8002e0e:	4b1d      	ldr	r3, [pc, #116]	@ (8002e84 <HAL_UART_MspInit+0x194>)
 8002e10:	2202      	movs	r2, #2
 8002e12:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002e14:	4b1b      	ldr	r3, [pc, #108]	@ (8002e84 <HAL_UART_MspInit+0x194>)
 8002e16:	2210      	movs	r2, #16
 8002e18:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002e1a:	4b1a      	ldr	r3, [pc, #104]	@ (8002e84 <HAL_UART_MspInit+0x194>)
 8002e1c:	2200      	movs	r2, #0
 8002e1e:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002e20:	4b18      	ldr	r3, [pc, #96]	@ (8002e84 <HAL_UART_MspInit+0x194>)
 8002e22:	2280      	movs	r2, #128	@ 0x80
 8002e24:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002e26:	4b17      	ldr	r3, [pc, #92]	@ (8002e84 <HAL_UART_MspInit+0x194>)
 8002e28:	2200      	movs	r2, #0
 8002e2a:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002e2c:	4b15      	ldr	r3, [pc, #84]	@ (8002e84 <HAL_UART_MspInit+0x194>)
 8002e2e:	2200      	movs	r2, #0
 8002e30:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8002e32:	4b14      	ldr	r3, [pc, #80]	@ (8002e84 <HAL_UART_MspInit+0x194>)
 8002e34:	2200      	movs	r2, #0
 8002e36:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8002e38:	4b12      	ldr	r3, [pc, #72]	@ (8002e84 <HAL_UART_MspInit+0x194>)
 8002e3a:	f44f 5240 	mov.w	r2, #12288	@ 0x3000
 8002e3e:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8002e40:	4810      	ldr	r0, [pc, #64]	@ (8002e84 <HAL_UART_MspInit+0x194>)
 8002e42:	f000 f98b 	bl	800315c <HAL_DMA_Init>
 8002e46:	4603      	mov	r3, r0
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	d001      	beq.n	8002e50 <HAL_UART_MspInit+0x160>
    {
      Error_Handler();
 8002e4c:	f7ff fa56 	bl	80022fc <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart2_tx);
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	4a0c      	ldr	r2, [pc, #48]	@ (8002e84 <HAL_UART_MspInit+0x194>)
 8002e54:	671a      	str	r2, [r3, #112]	@ 0x70
 8002e56:	4a0b      	ldr	r2, [pc, #44]	@ (8002e84 <HAL_UART_MspInit+0x194>)
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	6293      	str	r3, [r2, #40]	@ 0x28

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 8002e5c:	2200      	movs	r2, #0
 8002e5e:	2105      	movs	r1, #5
 8002e60:	2026      	movs	r0, #38	@ 0x26
 8002e62:	f000 f951 	bl	8003108 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8002e66:	2026      	movs	r0, #38	@ 0x26
 8002e68:	f000 f96a 	bl	8003140 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8002e6c:	bf00      	nop
 8002e6e:	3778      	adds	r7, #120	@ 0x78
 8002e70:	46bd      	mov	sp, r7
 8002e72:	bd80      	pop	{r7, pc}
 8002e74:	40004400 	.word	0x40004400
 8002e78:	40021000 	.word	0x40021000
 8002e7c:	20005acc 	.word	0x20005acc
 8002e80:	4002006c 	.word	0x4002006c
 8002e84:	20005b14 	.word	0x20005b14
 8002e88:	40020080 	.word	0x40020080

08002e8c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8002e8c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002ec4 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002e90:	f7ff fd68 	bl	8002964 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002e94:	480c      	ldr	r0, [pc, #48]	@ (8002ec8 <LoopForever+0x6>)
  ldr r1, =_edata
 8002e96:	490d      	ldr	r1, [pc, #52]	@ (8002ecc <LoopForever+0xa>)
  ldr r2, =_sidata
 8002e98:	4a0d      	ldr	r2, [pc, #52]	@ (8002ed0 <LoopForever+0xe>)
  movs r3, #0
 8002e9a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002e9c:	e002      	b.n	8002ea4 <LoopCopyDataInit>

08002e9e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002e9e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002ea0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002ea2:	3304      	adds	r3, #4

08002ea4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002ea4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002ea6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002ea8:	d3f9      	bcc.n	8002e9e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002eaa:	4a0a      	ldr	r2, [pc, #40]	@ (8002ed4 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002eac:	4c0a      	ldr	r4, [pc, #40]	@ (8002ed8 <LoopForever+0x16>)
  movs r3, #0
 8002eae:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002eb0:	e001      	b.n	8002eb6 <LoopFillZerobss>

08002eb2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002eb2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002eb4:	3204      	adds	r2, #4

08002eb6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002eb6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002eb8:	d3fb      	bcc.n	8002eb2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002eba:	f016 ff93 	bl	8019de4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002ebe:	f7ff f8b9 	bl	8002034 <main>

08002ec2 <LoopForever>:

LoopForever:
    b LoopForever
 8002ec2:	e7fe      	b.n	8002ec2 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8002ec4:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8002ec8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002ecc:	20000154 	.word	0x20000154
  ldr r2, =_sidata
 8002ed0:	0801b930 	.word	0x0801b930
  ldr r2, =_sbss
 8002ed4:	20000158 	.word	0x20000158
  ldr r4, =_ebss
 8002ed8:	2000c208 	.word	0x2000c208

08002edc <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002edc:	e7fe      	b.n	8002edc <ADC1_IRQHandler>

08002ede <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002ede:	b580      	push	{r7, lr}
 8002ee0:	b082      	sub	sp, #8
 8002ee2:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002ee4:	2300      	movs	r3, #0
 8002ee6:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002ee8:	2003      	movs	r0, #3
 8002eea:	f000 f902 	bl	80030f2 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002eee:	200f      	movs	r0, #15
 8002ef0:	f7ff fb96 	bl	8002620 <HAL_InitTick>
 8002ef4:	4603      	mov	r3, r0
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d002      	beq.n	8002f00 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8002efa:	2301      	movs	r3, #1
 8002efc:	71fb      	strb	r3, [r7, #7]
 8002efe:	e001      	b.n	8002f04 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002f00:	f7ff fb66 	bl	80025d0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002f04:	79fb      	ldrb	r3, [r7, #7]
}
 8002f06:	4618      	mov	r0, r3
 8002f08:	3708      	adds	r7, #8
 8002f0a:	46bd      	mov	sp, r7
 8002f0c:	bd80      	pop	{r7, pc}
	...

08002f10 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002f10:	b480      	push	{r7}
 8002f12:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002f14:	4b06      	ldr	r3, [pc, #24]	@ (8002f30 <HAL_IncTick+0x20>)
 8002f16:	781b      	ldrb	r3, [r3, #0]
 8002f18:	461a      	mov	r2, r3
 8002f1a:	4b06      	ldr	r3, [pc, #24]	@ (8002f34 <HAL_IncTick+0x24>)
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	4413      	add	r3, r2
 8002f20:	4a04      	ldr	r2, [pc, #16]	@ (8002f34 <HAL_IncTick+0x24>)
 8002f22:	6013      	str	r3, [r2, #0]
}
 8002f24:	bf00      	nop
 8002f26:	46bd      	mov	sp, r7
 8002f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f2c:	4770      	bx	lr
 8002f2e:	bf00      	nop
 8002f30:	20000048 	.word	0x20000048
 8002f34:	20005b5c 	.word	0x20005b5c

08002f38 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002f38:	b480      	push	{r7}
 8002f3a:	af00      	add	r7, sp, #0
  return uwTick;
 8002f3c:	4b03      	ldr	r3, [pc, #12]	@ (8002f4c <HAL_GetTick+0x14>)
 8002f3e:	681b      	ldr	r3, [r3, #0]
}
 8002f40:	4618      	mov	r0, r3
 8002f42:	46bd      	mov	sp, r7
 8002f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f48:	4770      	bx	lr
 8002f4a:	bf00      	nop
 8002f4c:	20005b5c 	.word	0x20005b5c

08002f50 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002f50:	b580      	push	{r7, lr}
 8002f52:	b084      	sub	sp, #16
 8002f54:	af00      	add	r7, sp, #0
 8002f56:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002f58:	f7ff ffee 	bl	8002f38 <HAL_GetTick>
 8002f5c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002f68:	d005      	beq.n	8002f76 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8002f6a:	4b0a      	ldr	r3, [pc, #40]	@ (8002f94 <HAL_Delay+0x44>)
 8002f6c:	781b      	ldrb	r3, [r3, #0]
 8002f6e:	461a      	mov	r2, r3
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	4413      	add	r3, r2
 8002f74:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002f76:	bf00      	nop
 8002f78:	f7ff ffde 	bl	8002f38 <HAL_GetTick>
 8002f7c:	4602      	mov	r2, r0
 8002f7e:	68bb      	ldr	r3, [r7, #8]
 8002f80:	1ad3      	subs	r3, r2, r3
 8002f82:	68fa      	ldr	r2, [r7, #12]
 8002f84:	429a      	cmp	r2, r3
 8002f86:	d8f7      	bhi.n	8002f78 <HAL_Delay+0x28>
  {
  }
}
 8002f88:	bf00      	nop
 8002f8a:	bf00      	nop
 8002f8c:	3710      	adds	r7, #16
 8002f8e:	46bd      	mov	sp, r7
 8002f90:	bd80      	pop	{r7, pc}
 8002f92:	bf00      	nop
 8002f94:	20000048 	.word	0x20000048

08002f98 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002f98:	b480      	push	{r7}
 8002f9a:	b085      	sub	sp, #20
 8002f9c:	af00      	add	r7, sp, #0
 8002f9e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	f003 0307 	and.w	r3, r3, #7
 8002fa6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002fa8:	4b0c      	ldr	r3, [pc, #48]	@ (8002fdc <__NVIC_SetPriorityGrouping+0x44>)
 8002faa:	68db      	ldr	r3, [r3, #12]
 8002fac:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002fae:	68ba      	ldr	r2, [r7, #8]
 8002fb0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002fb4:	4013      	ands	r3, r2
 8002fb6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002fbc:	68bb      	ldr	r3, [r7, #8]
 8002fbe:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002fc0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002fc4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002fc8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002fca:	4a04      	ldr	r2, [pc, #16]	@ (8002fdc <__NVIC_SetPriorityGrouping+0x44>)
 8002fcc:	68bb      	ldr	r3, [r7, #8]
 8002fce:	60d3      	str	r3, [r2, #12]
}
 8002fd0:	bf00      	nop
 8002fd2:	3714      	adds	r7, #20
 8002fd4:	46bd      	mov	sp, r7
 8002fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fda:	4770      	bx	lr
 8002fdc:	e000ed00 	.word	0xe000ed00

08002fe0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002fe0:	b480      	push	{r7}
 8002fe2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002fe4:	4b04      	ldr	r3, [pc, #16]	@ (8002ff8 <__NVIC_GetPriorityGrouping+0x18>)
 8002fe6:	68db      	ldr	r3, [r3, #12]
 8002fe8:	0a1b      	lsrs	r3, r3, #8
 8002fea:	f003 0307 	and.w	r3, r3, #7
}
 8002fee:	4618      	mov	r0, r3
 8002ff0:	46bd      	mov	sp, r7
 8002ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ff6:	4770      	bx	lr
 8002ff8:	e000ed00 	.word	0xe000ed00

08002ffc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002ffc:	b480      	push	{r7}
 8002ffe:	b083      	sub	sp, #12
 8003000:	af00      	add	r7, sp, #0
 8003002:	4603      	mov	r3, r0
 8003004:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003006:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800300a:	2b00      	cmp	r3, #0
 800300c:	db0b      	blt.n	8003026 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800300e:	79fb      	ldrb	r3, [r7, #7]
 8003010:	f003 021f 	and.w	r2, r3, #31
 8003014:	4907      	ldr	r1, [pc, #28]	@ (8003034 <__NVIC_EnableIRQ+0x38>)
 8003016:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800301a:	095b      	lsrs	r3, r3, #5
 800301c:	2001      	movs	r0, #1
 800301e:	fa00 f202 	lsl.w	r2, r0, r2
 8003022:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003026:	bf00      	nop
 8003028:	370c      	adds	r7, #12
 800302a:	46bd      	mov	sp, r7
 800302c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003030:	4770      	bx	lr
 8003032:	bf00      	nop
 8003034:	e000e100 	.word	0xe000e100

08003038 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003038:	b480      	push	{r7}
 800303a:	b083      	sub	sp, #12
 800303c:	af00      	add	r7, sp, #0
 800303e:	4603      	mov	r3, r0
 8003040:	6039      	str	r1, [r7, #0]
 8003042:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003044:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003048:	2b00      	cmp	r3, #0
 800304a:	db0a      	blt.n	8003062 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800304c:	683b      	ldr	r3, [r7, #0]
 800304e:	b2da      	uxtb	r2, r3
 8003050:	490c      	ldr	r1, [pc, #48]	@ (8003084 <__NVIC_SetPriority+0x4c>)
 8003052:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003056:	0112      	lsls	r2, r2, #4
 8003058:	b2d2      	uxtb	r2, r2
 800305a:	440b      	add	r3, r1
 800305c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003060:	e00a      	b.n	8003078 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003062:	683b      	ldr	r3, [r7, #0]
 8003064:	b2da      	uxtb	r2, r3
 8003066:	4908      	ldr	r1, [pc, #32]	@ (8003088 <__NVIC_SetPriority+0x50>)
 8003068:	79fb      	ldrb	r3, [r7, #7]
 800306a:	f003 030f 	and.w	r3, r3, #15
 800306e:	3b04      	subs	r3, #4
 8003070:	0112      	lsls	r2, r2, #4
 8003072:	b2d2      	uxtb	r2, r2
 8003074:	440b      	add	r3, r1
 8003076:	761a      	strb	r2, [r3, #24]
}
 8003078:	bf00      	nop
 800307a:	370c      	adds	r7, #12
 800307c:	46bd      	mov	sp, r7
 800307e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003082:	4770      	bx	lr
 8003084:	e000e100 	.word	0xe000e100
 8003088:	e000ed00 	.word	0xe000ed00

0800308c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800308c:	b480      	push	{r7}
 800308e:	b089      	sub	sp, #36	@ 0x24
 8003090:	af00      	add	r7, sp, #0
 8003092:	60f8      	str	r0, [r7, #12]
 8003094:	60b9      	str	r1, [r7, #8]
 8003096:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	f003 0307 	and.w	r3, r3, #7
 800309e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80030a0:	69fb      	ldr	r3, [r7, #28]
 80030a2:	f1c3 0307 	rsb	r3, r3, #7
 80030a6:	2b04      	cmp	r3, #4
 80030a8:	bf28      	it	cs
 80030aa:	2304      	movcs	r3, #4
 80030ac:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80030ae:	69fb      	ldr	r3, [r7, #28]
 80030b0:	3304      	adds	r3, #4
 80030b2:	2b06      	cmp	r3, #6
 80030b4:	d902      	bls.n	80030bc <NVIC_EncodePriority+0x30>
 80030b6:	69fb      	ldr	r3, [r7, #28]
 80030b8:	3b03      	subs	r3, #3
 80030ba:	e000      	b.n	80030be <NVIC_EncodePriority+0x32>
 80030bc:	2300      	movs	r3, #0
 80030be:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80030c0:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80030c4:	69bb      	ldr	r3, [r7, #24]
 80030c6:	fa02 f303 	lsl.w	r3, r2, r3
 80030ca:	43da      	mvns	r2, r3
 80030cc:	68bb      	ldr	r3, [r7, #8]
 80030ce:	401a      	ands	r2, r3
 80030d0:	697b      	ldr	r3, [r7, #20]
 80030d2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80030d4:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80030d8:	697b      	ldr	r3, [r7, #20]
 80030da:	fa01 f303 	lsl.w	r3, r1, r3
 80030de:	43d9      	mvns	r1, r3
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80030e4:	4313      	orrs	r3, r2
         );
}
 80030e6:	4618      	mov	r0, r3
 80030e8:	3724      	adds	r7, #36	@ 0x24
 80030ea:	46bd      	mov	sp, r7
 80030ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030f0:	4770      	bx	lr

080030f2 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80030f2:	b580      	push	{r7, lr}
 80030f4:	b082      	sub	sp, #8
 80030f6:	af00      	add	r7, sp, #0
 80030f8:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80030fa:	6878      	ldr	r0, [r7, #4]
 80030fc:	f7ff ff4c 	bl	8002f98 <__NVIC_SetPriorityGrouping>
}
 8003100:	bf00      	nop
 8003102:	3708      	adds	r7, #8
 8003104:	46bd      	mov	sp, r7
 8003106:	bd80      	pop	{r7, pc}

08003108 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003108:	b580      	push	{r7, lr}
 800310a:	b086      	sub	sp, #24
 800310c:	af00      	add	r7, sp, #0
 800310e:	4603      	mov	r3, r0
 8003110:	60b9      	str	r1, [r7, #8]
 8003112:	607a      	str	r2, [r7, #4]
 8003114:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8003116:	2300      	movs	r3, #0
 8003118:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800311a:	f7ff ff61 	bl	8002fe0 <__NVIC_GetPriorityGrouping>
 800311e:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003120:	687a      	ldr	r2, [r7, #4]
 8003122:	68b9      	ldr	r1, [r7, #8]
 8003124:	6978      	ldr	r0, [r7, #20]
 8003126:	f7ff ffb1 	bl	800308c <NVIC_EncodePriority>
 800312a:	4602      	mov	r2, r0
 800312c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003130:	4611      	mov	r1, r2
 8003132:	4618      	mov	r0, r3
 8003134:	f7ff ff80 	bl	8003038 <__NVIC_SetPriority>
}
 8003138:	bf00      	nop
 800313a:	3718      	adds	r7, #24
 800313c:	46bd      	mov	sp, r7
 800313e:	bd80      	pop	{r7, pc}

08003140 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003140:	b580      	push	{r7, lr}
 8003142:	b082      	sub	sp, #8
 8003144:	af00      	add	r7, sp, #0
 8003146:	4603      	mov	r3, r0
 8003148:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800314a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800314e:	4618      	mov	r0, r3
 8003150:	f7ff ff54 	bl	8002ffc <__NVIC_EnableIRQ>
}
 8003154:	bf00      	nop
 8003156:	3708      	adds	r7, #8
 8003158:	46bd      	mov	sp, r7
 800315a:	bd80      	pop	{r7, pc}

0800315c <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800315c:	b480      	push	{r7}
 800315e:	b085      	sub	sp, #20
 8003160:	af00      	add	r7, sp, #0
 8003162:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	2b00      	cmp	r3, #0
 8003168:	d101      	bne.n	800316e <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800316a:	2301      	movs	r3, #1
 800316c:	e098      	b.n	80032a0 <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	461a      	mov	r2, r3
 8003174:	4b4d      	ldr	r3, [pc, #308]	@ (80032ac <HAL_DMA_Init+0x150>)
 8003176:	429a      	cmp	r2, r3
 8003178:	d80f      	bhi.n	800319a <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	461a      	mov	r2, r3
 8003180:	4b4b      	ldr	r3, [pc, #300]	@ (80032b0 <HAL_DMA_Init+0x154>)
 8003182:	4413      	add	r3, r2
 8003184:	4a4b      	ldr	r2, [pc, #300]	@ (80032b4 <HAL_DMA_Init+0x158>)
 8003186:	fba2 2303 	umull	r2, r3, r2, r3
 800318a:	091b      	lsrs	r3, r3, #4
 800318c:	009a      	lsls	r2, r3, #2
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	4a48      	ldr	r2, [pc, #288]	@ (80032b8 <HAL_DMA_Init+0x15c>)
 8003196:	641a      	str	r2, [r3, #64]	@ 0x40
 8003198:	e00e      	b.n	80031b8 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	461a      	mov	r2, r3
 80031a0:	4b46      	ldr	r3, [pc, #280]	@ (80032bc <HAL_DMA_Init+0x160>)
 80031a2:	4413      	add	r3, r2
 80031a4:	4a43      	ldr	r2, [pc, #268]	@ (80032b4 <HAL_DMA_Init+0x158>)
 80031a6:	fba2 2303 	umull	r2, r3, r2, r3
 80031aa:	091b      	lsrs	r3, r3, #4
 80031ac:	009a      	lsls	r2, r3, #2
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	4a42      	ldr	r2, [pc, #264]	@ (80032c0 <HAL_DMA_Init+0x164>)
 80031b6:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	2202      	movs	r2, #2
 80031bc:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 80031ce:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80031d2:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 80031dc:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	691b      	ldr	r3, [r3, #16]
 80031e2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80031e8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	699b      	ldr	r3, [r3, #24]
 80031ee:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80031f4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	6a1b      	ldr	r3, [r3, #32]
 80031fa:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80031fc:	68fa      	ldr	r2, [r7, #12]
 80031fe:	4313      	orrs	r3, r2
 8003200:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	68fa      	ldr	r2, [r7, #12]
 8003208:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if (hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	689b      	ldr	r3, [r3, #8]
 800320e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003212:	d039      	beq.n	8003288 <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003218:	4a27      	ldr	r2, [pc, #156]	@ (80032b8 <HAL_DMA_Init+0x15c>)
 800321a:	4293      	cmp	r3, r2
 800321c:	d11a      	bne.n	8003254 <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 800321e:	4b29      	ldr	r3, [pc, #164]	@ (80032c4 <HAL_DMA_Init+0x168>)
 8003220:	681a      	ldr	r2, [r3, #0]
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003226:	f003 031c 	and.w	r3, r3, #28
 800322a:	210f      	movs	r1, #15
 800322c:	fa01 f303 	lsl.w	r3, r1, r3
 8003230:	43db      	mvns	r3, r3
 8003232:	4924      	ldr	r1, [pc, #144]	@ (80032c4 <HAL_DMA_Init+0x168>)
 8003234:	4013      	ands	r3, r2
 8003236:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8003238:	4b22      	ldr	r3, [pc, #136]	@ (80032c4 <HAL_DMA_Init+0x168>)
 800323a:	681a      	ldr	r2, [r3, #0]
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	6859      	ldr	r1, [r3, #4]
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003244:	f003 031c 	and.w	r3, r3, #28
 8003248:	fa01 f303 	lsl.w	r3, r1, r3
 800324c:	491d      	ldr	r1, [pc, #116]	@ (80032c4 <HAL_DMA_Init+0x168>)
 800324e:	4313      	orrs	r3, r2
 8003250:	600b      	str	r3, [r1, #0]
 8003252:	e019      	b.n	8003288 <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8003254:	4b1c      	ldr	r3, [pc, #112]	@ (80032c8 <HAL_DMA_Init+0x16c>)
 8003256:	681a      	ldr	r2, [r3, #0]
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800325c:	f003 031c 	and.w	r3, r3, #28
 8003260:	210f      	movs	r1, #15
 8003262:	fa01 f303 	lsl.w	r3, r1, r3
 8003266:	43db      	mvns	r3, r3
 8003268:	4917      	ldr	r1, [pc, #92]	@ (80032c8 <HAL_DMA_Init+0x16c>)
 800326a:	4013      	ands	r3, r2
 800326c:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 800326e:	4b16      	ldr	r3, [pc, #88]	@ (80032c8 <HAL_DMA_Init+0x16c>)
 8003270:	681a      	ldr	r2, [r3, #0]
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	6859      	ldr	r1, [r3, #4]
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800327a:	f003 031c 	and.w	r3, r3, #28
 800327e:	fa01 f303 	lsl.w	r3, r1, r3
 8003282:	4911      	ldr	r1, [pc, #68]	@ (80032c8 <HAL_DMA_Init+0x16c>)
 8003284:	4313      	orrs	r3, r2
 8003286:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
  /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
  /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	2200      	movs	r2, #0
 800328c:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	2201      	movs	r2, #1
 8003292:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	2200      	movs	r2, #0
 800329a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 800329e:	2300      	movs	r3, #0
}
 80032a0:	4618      	mov	r0, r3
 80032a2:	3714      	adds	r7, #20
 80032a4:	46bd      	mov	sp, r7
 80032a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032aa:	4770      	bx	lr
 80032ac:	40020407 	.word	0x40020407
 80032b0:	bffdfff8 	.word	0xbffdfff8
 80032b4:	cccccccd 	.word	0xcccccccd
 80032b8:	40020000 	.word	0x40020000
 80032bc:	bffdfbf8 	.word	0xbffdfbf8
 80032c0:	40020400 	.word	0x40020400
 80032c4:	400200a8 	.word	0x400200a8
 80032c8:	400204a8 	.word	0x400204a8

080032cc <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80032cc:	b580      	push	{r7, lr}
 80032ce:	b086      	sub	sp, #24
 80032d0:	af00      	add	r7, sp, #0
 80032d2:	60f8      	str	r0, [r7, #12]
 80032d4:	60b9      	str	r1, [r7, #8]
 80032d6:	607a      	str	r2, [r7, #4]
 80032d8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80032da:	2300      	movs	r3, #0
 80032dc:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80032e4:	2b01      	cmp	r3, #1
 80032e6:	d101      	bne.n	80032ec <HAL_DMA_Start_IT+0x20>
 80032e8:	2302      	movs	r3, #2
 80032ea:	e04b      	b.n	8003384 <HAL_DMA_Start_IT+0xb8>
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	2201      	movs	r2, #1
 80032f0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80032fa:	b2db      	uxtb	r3, r3
 80032fc:	2b01      	cmp	r3, #1
 80032fe:	d13a      	bne.n	8003376 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	2202      	movs	r2, #2
 8003304:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	2200      	movs	r2, #0
 800330c:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	681a      	ldr	r2, [r3, #0]
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	f022 0201 	bic.w	r2, r2, #1
 800331c:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800331e:	683b      	ldr	r3, [r7, #0]
 8003320:	687a      	ldr	r2, [r7, #4]
 8003322:	68b9      	ldr	r1, [r7, #8]
 8003324:	68f8      	ldr	r0, [r7, #12]
 8003326:	f000 f979 	bl	800361c <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800332e:	2b00      	cmp	r3, #0
 8003330:	d008      	beq.n	8003344 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	681a      	ldr	r2, [r3, #0]
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	f042 020e 	orr.w	r2, r2, #14
 8003340:	601a      	str	r2, [r3, #0]
 8003342:	e00f      	b.n	8003364 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	681a      	ldr	r2, [r3, #0]
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	f022 0204 	bic.w	r2, r2, #4
 8003352:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	681a      	ldr	r2, [r3, #0]
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	f042 020a 	orr.w	r2, r2, #10
 8003362:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	681a      	ldr	r2, [r3, #0]
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	f042 0201 	orr.w	r2, r2, #1
 8003372:	601a      	str	r2, [r3, #0]
 8003374:	e005      	b.n	8003382 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	2200      	movs	r2, #0
 800337a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 800337e:	2302      	movs	r3, #2
 8003380:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8003382:	7dfb      	ldrb	r3, [r7, #23]
}
 8003384:	4618      	mov	r0, r3
 8003386:	3718      	adds	r7, #24
 8003388:	46bd      	mov	sp, r7
 800338a:	bd80      	pop	{r7, pc}

0800338c <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800338c:	b480      	push	{r7}
 800338e:	b085      	sub	sp, #20
 8003390:	af00      	add	r7, sp, #0
 8003392:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003394:	2300      	movs	r3, #0
 8003396:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800339e:	b2db      	uxtb	r3, r3
 80033a0:	2b02      	cmp	r3, #2
 80033a2:	d008      	beq.n	80033b6 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	2204      	movs	r2, #4
 80033a8:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	2200      	movs	r2, #0
 80033ae:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 80033b2:	2301      	movs	r3, #1
 80033b4:	e022      	b.n	80033fc <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	681a      	ldr	r2, [r3, #0]
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	f022 020e 	bic.w	r2, r2, #14
 80033c4:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	681a      	ldr	r2, [r3, #0]
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	f022 0201 	bic.w	r2, r2, #1
 80033d4:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80033da:	f003 021c 	and.w	r2, r3, #28
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033e2:	2101      	movs	r1, #1
 80033e4:	fa01 f202 	lsl.w	r2, r1, r2
 80033e8:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	2201      	movs	r2, #1
 80033ee:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	2200      	movs	r2, #0
 80033f6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return status;
 80033fa:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 80033fc:	4618      	mov	r0, r3
 80033fe:	3714      	adds	r7, #20
 8003400:	46bd      	mov	sp, r7
 8003402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003406:	4770      	bx	lr

08003408 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003408:	b580      	push	{r7, lr}
 800340a:	b084      	sub	sp, #16
 800340c:	af00      	add	r7, sp, #0
 800340e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003410:	2300      	movs	r3, #0
 8003412:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800341a:	b2db      	uxtb	r3, r3
 800341c:	2b02      	cmp	r3, #2
 800341e:	d005      	beq.n	800342c <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	2204      	movs	r2, #4
 8003424:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8003426:	2301      	movs	r3, #1
 8003428:	73fb      	strb	r3, [r7, #15]
 800342a:	e029      	b.n	8003480 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	681a      	ldr	r2, [r3, #0]
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	f022 020e 	bic.w	r2, r2, #14
 800343a:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	681a      	ldr	r2, [r3, #0]
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	f022 0201 	bic.w	r2, r2, #1
 800344a:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003450:	f003 021c 	and.w	r2, r3, #28
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003458:	2101      	movs	r1, #1
 800345a:	fa01 f202 	lsl.w	r2, r1, r2
 800345e:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	2201      	movs	r2, #1
 8003464:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	2200      	movs	r2, #0
 800346c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003474:	2b00      	cmp	r3, #0
 8003476:	d003      	beq.n	8003480 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800347c:	6878      	ldr	r0, [r7, #4]
 800347e:	4798      	blx	r3
    }
  }
  return status;
 8003480:	7bfb      	ldrb	r3, [r7, #15]
}
 8003482:	4618      	mov	r0, r3
 8003484:	3710      	adds	r7, #16
 8003486:	46bd      	mov	sp, r7
 8003488:	bd80      	pop	{r7, pc}

0800348a <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800348a:	b580      	push	{r7, lr}
 800348c:	b084      	sub	sp, #16
 800348e:	af00      	add	r7, sp, #0
 8003490:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80034a6:	f003 031c 	and.w	r3, r3, #28
 80034aa:	2204      	movs	r2, #4
 80034ac:	409a      	lsls	r2, r3
 80034ae:	68fb      	ldr	r3, [r7, #12]
 80034b0:	4013      	ands	r3, r2
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	d026      	beq.n	8003504 <HAL_DMA_IRQHandler+0x7a>
 80034b6:	68bb      	ldr	r3, [r7, #8]
 80034b8:	f003 0304 	and.w	r3, r3, #4
 80034bc:	2b00      	cmp	r3, #0
 80034be:	d021      	beq.n	8003504 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	f003 0320 	and.w	r3, r3, #32
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d107      	bne.n	80034de <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	681a      	ldr	r2, [r3, #0]
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	f022 0204 	bic.w	r2, r2, #4
 80034dc:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80034e2:	f003 021c 	and.w	r2, r3, #28
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034ea:	2104      	movs	r1, #4
 80034ec:	fa01 f202 	lsl.w	r2, r1, r2
 80034f0:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	d071      	beq.n	80035de <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80034fe:	6878      	ldr	r0, [r7, #4]
 8003500:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8003502:	e06c      	b.n	80035de <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003508:	f003 031c 	and.w	r3, r3, #28
 800350c:	2202      	movs	r2, #2
 800350e:	409a      	lsls	r2, r3
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	4013      	ands	r3, r2
 8003514:	2b00      	cmp	r3, #0
 8003516:	d02e      	beq.n	8003576 <HAL_DMA_IRQHandler+0xec>
 8003518:	68bb      	ldr	r3, [r7, #8]
 800351a:	f003 0302 	and.w	r3, r3, #2
 800351e:	2b00      	cmp	r3, #0
 8003520:	d029      	beq.n	8003576 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	f003 0320 	and.w	r3, r3, #32
 800352c:	2b00      	cmp	r3, #0
 800352e:	d10b      	bne.n	8003548 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	681a      	ldr	r2, [r3, #0]
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	f022 020a 	bic.w	r2, r2, #10
 800353e:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	2201      	movs	r2, #1
 8003544:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800354c:	f003 021c 	and.w	r2, r3, #28
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003554:	2102      	movs	r1, #2
 8003556:	fa01 f202 	lsl.w	r2, r1, r2
 800355a:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	2200      	movs	r2, #0
 8003560:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003568:	2b00      	cmp	r3, #0
 800356a:	d038      	beq.n	80035de <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003570:	6878      	ldr	r0, [r7, #4]
 8003572:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8003574:	e033      	b.n	80035de <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800357a:	f003 031c 	and.w	r3, r3, #28
 800357e:	2208      	movs	r2, #8
 8003580:	409a      	lsls	r2, r3
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	4013      	ands	r3, r2
 8003586:	2b00      	cmp	r3, #0
 8003588:	d02a      	beq.n	80035e0 <HAL_DMA_IRQHandler+0x156>
 800358a:	68bb      	ldr	r3, [r7, #8]
 800358c:	f003 0308 	and.w	r3, r3, #8
 8003590:	2b00      	cmp	r3, #0
 8003592:	d025      	beq.n	80035e0 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	681a      	ldr	r2, [r3, #0]
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	f022 020e 	bic.w	r2, r2, #14
 80035a2:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80035a8:	f003 021c 	and.w	r2, r3, #28
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80035b0:	2101      	movs	r1, #1
 80035b2:	fa01 f202 	lsl.w	r2, r1, r2
 80035b6:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	2201      	movs	r2, #1
 80035bc:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	2201      	movs	r2, #1
 80035c2:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	2200      	movs	r2, #0
 80035ca:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d004      	beq.n	80035e0 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80035da:	6878      	ldr	r0, [r7, #4]
 80035dc:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 80035de:	bf00      	nop
 80035e0:	bf00      	nop
}
 80035e2:	3710      	adds	r7, #16
 80035e4:	46bd      	mov	sp, r7
 80035e6:	bd80      	pop	{r7, pc}

080035e8 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 80035e8:	b480      	push	{r7}
 80035ea:	b083      	sub	sp, #12
 80035ec:	af00      	add	r7, sp, #0
 80035ee:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80035f6:	b2db      	uxtb	r3, r3
}
 80035f8:	4618      	mov	r0, r3
 80035fa:	370c      	adds	r7, #12
 80035fc:	46bd      	mov	sp, r7
 80035fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003602:	4770      	bx	lr

08003604 <HAL_DMA_GetError>:
  * @param  hdma : pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8003604:	b480      	push	{r7}
 8003606:	b083      	sub	sp, #12
 8003608:	af00      	add	r7, sp, #0
 800360a:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
}
 8003610:	4618      	mov	r0, r3
 8003612:	370c      	adds	r7, #12
 8003614:	46bd      	mov	sp, r7
 8003616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800361a:	4770      	bx	lr

0800361c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800361c:	b480      	push	{r7}
 800361e:	b085      	sub	sp, #20
 8003620:	af00      	add	r7, sp, #0
 8003622:	60f8      	str	r0, [r7, #12]
 8003624:	60b9      	str	r1, [r7, #8]
 8003626:	607a      	str	r2, [r7, #4]
 8003628:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800362e:	f003 021c 	and.w	r2, r3, #28
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003636:	2101      	movs	r1, #1
 8003638:	fa01 f202 	lsl.w	r2, r1, r2
 800363c:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	683a      	ldr	r2, [r7, #0]
 8003644:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	689b      	ldr	r3, [r3, #8]
 800364a:	2b10      	cmp	r3, #16
 800364c:	d108      	bne.n	8003660 <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	687a      	ldr	r2, [r7, #4]
 8003654:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	68ba      	ldr	r2, [r7, #8]
 800365c:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800365e:	e007      	b.n	8003670 <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	68ba      	ldr	r2, [r7, #8]
 8003666:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	687a      	ldr	r2, [r7, #4]
 800366e:	60da      	str	r2, [r3, #12]
}
 8003670:	bf00      	nop
 8003672:	3714      	adds	r7, #20
 8003674:	46bd      	mov	sp, r7
 8003676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800367a:	4770      	bx	lr

0800367c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800367c:	b480      	push	{r7}
 800367e:	b087      	sub	sp, #28
 8003680:	af00      	add	r7, sp, #0
 8003682:	6078      	str	r0, [r7, #4]
 8003684:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003686:	2300      	movs	r3, #0
 8003688:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800368a:	e148      	b.n	800391e <HAL_GPIO_Init+0x2a2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800368c:	683b      	ldr	r3, [r7, #0]
 800368e:	681a      	ldr	r2, [r3, #0]
 8003690:	2101      	movs	r1, #1
 8003692:	697b      	ldr	r3, [r7, #20]
 8003694:	fa01 f303 	lsl.w	r3, r1, r3
 8003698:	4013      	ands	r3, r2
 800369a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	2b00      	cmp	r3, #0
 80036a0:	f000 813a 	beq.w	8003918 <HAL_GPIO_Init+0x29c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80036a4:	683b      	ldr	r3, [r7, #0]
 80036a6:	685b      	ldr	r3, [r3, #4]
 80036a8:	f003 0303 	and.w	r3, r3, #3
 80036ac:	2b01      	cmp	r3, #1
 80036ae:	d005      	beq.n	80036bc <HAL_GPIO_Init+0x40>
 80036b0:	683b      	ldr	r3, [r7, #0]
 80036b2:	685b      	ldr	r3, [r3, #4]
 80036b4:	f003 0303 	and.w	r3, r3, #3
 80036b8:	2b02      	cmp	r3, #2
 80036ba:	d130      	bne.n	800371e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	689b      	ldr	r3, [r3, #8]
 80036c0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80036c2:	697b      	ldr	r3, [r7, #20]
 80036c4:	005b      	lsls	r3, r3, #1
 80036c6:	2203      	movs	r2, #3
 80036c8:	fa02 f303 	lsl.w	r3, r2, r3
 80036cc:	43db      	mvns	r3, r3
 80036ce:	693a      	ldr	r2, [r7, #16]
 80036d0:	4013      	ands	r3, r2
 80036d2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80036d4:	683b      	ldr	r3, [r7, #0]
 80036d6:	68da      	ldr	r2, [r3, #12]
 80036d8:	697b      	ldr	r3, [r7, #20]
 80036da:	005b      	lsls	r3, r3, #1
 80036dc:	fa02 f303 	lsl.w	r3, r2, r3
 80036e0:	693a      	ldr	r2, [r7, #16]
 80036e2:	4313      	orrs	r3, r2
 80036e4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	693a      	ldr	r2, [r7, #16]
 80036ea:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	685b      	ldr	r3, [r3, #4]
 80036f0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80036f2:	2201      	movs	r2, #1
 80036f4:	697b      	ldr	r3, [r7, #20]
 80036f6:	fa02 f303 	lsl.w	r3, r2, r3
 80036fa:	43db      	mvns	r3, r3
 80036fc:	693a      	ldr	r2, [r7, #16]
 80036fe:	4013      	ands	r3, r2
 8003700:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003702:	683b      	ldr	r3, [r7, #0]
 8003704:	685b      	ldr	r3, [r3, #4]
 8003706:	091b      	lsrs	r3, r3, #4
 8003708:	f003 0201 	and.w	r2, r3, #1
 800370c:	697b      	ldr	r3, [r7, #20]
 800370e:	fa02 f303 	lsl.w	r3, r2, r3
 8003712:	693a      	ldr	r2, [r7, #16]
 8003714:	4313      	orrs	r3, r2
 8003716:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	693a      	ldr	r2, [r7, #16]
 800371c:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800371e:	683b      	ldr	r3, [r7, #0]
 8003720:	685b      	ldr	r3, [r3, #4]
 8003722:	f003 0303 	and.w	r3, r3, #3
 8003726:	2b03      	cmp	r3, #3
 8003728:	d017      	beq.n	800375a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	68db      	ldr	r3, [r3, #12]
 800372e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003730:	697b      	ldr	r3, [r7, #20]
 8003732:	005b      	lsls	r3, r3, #1
 8003734:	2203      	movs	r2, #3
 8003736:	fa02 f303 	lsl.w	r3, r2, r3
 800373a:	43db      	mvns	r3, r3
 800373c:	693a      	ldr	r2, [r7, #16]
 800373e:	4013      	ands	r3, r2
 8003740:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003742:	683b      	ldr	r3, [r7, #0]
 8003744:	689a      	ldr	r2, [r3, #8]
 8003746:	697b      	ldr	r3, [r7, #20]
 8003748:	005b      	lsls	r3, r3, #1
 800374a:	fa02 f303 	lsl.w	r3, r2, r3
 800374e:	693a      	ldr	r2, [r7, #16]
 8003750:	4313      	orrs	r3, r2
 8003752:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	693a      	ldr	r2, [r7, #16]
 8003758:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800375a:	683b      	ldr	r3, [r7, #0]
 800375c:	685b      	ldr	r3, [r3, #4]
 800375e:	f003 0303 	and.w	r3, r3, #3
 8003762:	2b02      	cmp	r3, #2
 8003764:	d123      	bne.n	80037ae <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8003766:	697b      	ldr	r3, [r7, #20]
 8003768:	08da      	lsrs	r2, r3, #3
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	3208      	adds	r2, #8
 800376e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003772:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003774:	697b      	ldr	r3, [r7, #20]
 8003776:	f003 0307 	and.w	r3, r3, #7
 800377a:	009b      	lsls	r3, r3, #2
 800377c:	220f      	movs	r2, #15
 800377e:	fa02 f303 	lsl.w	r3, r2, r3
 8003782:	43db      	mvns	r3, r3
 8003784:	693a      	ldr	r2, [r7, #16]
 8003786:	4013      	ands	r3, r2
 8003788:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800378a:	683b      	ldr	r3, [r7, #0]
 800378c:	691a      	ldr	r2, [r3, #16]
 800378e:	697b      	ldr	r3, [r7, #20]
 8003790:	f003 0307 	and.w	r3, r3, #7
 8003794:	009b      	lsls	r3, r3, #2
 8003796:	fa02 f303 	lsl.w	r3, r2, r3
 800379a:	693a      	ldr	r2, [r7, #16]
 800379c:	4313      	orrs	r3, r2
 800379e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80037a0:	697b      	ldr	r3, [r7, #20]
 80037a2:	08da      	lsrs	r2, r3, #3
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	3208      	adds	r2, #8
 80037a8:	6939      	ldr	r1, [r7, #16]
 80037aa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80037b4:	697b      	ldr	r3, [r7, #20]
 80037b6:	005b      	lsls	r3, r3, #1
 80037b8:	2203      	movs	r2, #3
 80037ba:	fa02 f303 	lsl.w	r3, r2, r3
 80037be:	43db      	mvns	r3, r3
 80037c0:	693a      	ldr	r2, [r7, #16]
 80037c2:	4013      	ands	r3, r2
 80037c4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80037c6:	683b      	ldr	r3, [r7, #0]
 80037c8:	685b      	ldr	r3, [r3, #4]
 80037ca:	f003 0203 	and.w	r2, r3, #3
 80037ce:	697b      	ldr	r3, [r7, #20]
 80037d0:	005b      	lsls	r3, r3, #1
 80037d2:	fa02 f303 	lsl.w	r3, r2, r3
 80037d6:	693a      	ldr	r2, [r7, #16]
 80037d8:	4313      	orrs	r3, r2
 80037da:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	693a      	ldr	r2, [r7, #16]
 80037e0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80037e2:	683b      	ldr	r3, [r7, #0]
 80037e4:	685b      	ldr	r3, [r3, #4]
 80037e6:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	f000 8094 	beq.w	8003918 <HAL_GPIO_Init+0x29c>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80037f0:	4b52      	ldr	r3, [pc, #328]	@ (800393c <HAL_GPIO_Init+0x2c0>)
 80037f2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80037f4:	4a51      	ldr	r2, [pc, #324]	@ (800393c <HAL_GPIO_Init+0x2c0>)
 80037f6:	f043 0301 	orr.w	r3, r3, #1
 80037fa:	6613      	str	r3, [r2, #96]	@ 0x60
 80037fc:	4b4f      	ldr	r3, [pc, #316]	@ (800393c <HAL_GPIO_Init+0x2c0>)
 80037fe:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003800:	f003 0301 	and.w	r3, r3, #1
 8003804:	60bb      	str	r3, [r7, #8]
 8003806:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8003808:	4a4d      	ldr	r2, [pc, #308]	@ (8003940 <HAL_GPIO_Init+0x2c4>)
 800380a:	697b      	ldr	r3, [r7, #20]
 800380c:	089b      	lsrs	r3, r3, #2
 800380e:	3302      	adds	r3, #2
 8003810:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003814:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8003816:	697b      	ldr	r3, [r7, #20]
 8003818:	f003 0303 	and.w	r3, r3, #3
 800381c:	009b      	lsls	r3, r3, #2
 800381e:	220f      	movs	r2, #15
 8003820:	fa02 f303 	lsl.w	r3, r2, r3
 8003824:	43db      	mvns	r3, r3
 8003826:	693a      	ldr	r2, [r7, #16]
 8003828:	4013      	ands	r3, r2
 800382a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8003832:	d00d      	beq.n	8003850 <HAL_GPIO_Init+0x1d4>
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	4a43      	ldr	r2, [pc, #268]	@ (8003944 <HAL_GPIO_Init+0x2c8>)
 8003838:	4293      	cmp	r3, r2
 800383a:	d007      	beq.n	800384c <HAL_GPIO_Init+0x1d0>
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	4a42      	ldr	r2, [pc, #264]	@ (8003948 <HAL_GPIO_Init+0x2cc>)
 8003840:	4293      	cmp	r3, r2
 8003842:	d101      	bne.n	8003848 <HAL_GPIO_Init+0x1cc>
 8003844:	2302      	movs	r3, #2
 8003846:	e004      	b.n	8003852 <HAL_GPIO_Init+0x1d6>
 8003848:	2307      	movs	r3, #7
 800384a:	e002      	b.n	8003852 <HAL_GPIO_Init+0x1d6>
 800384c:	2301      	movs	r3, #1
 800384e:	e000      	b.n	8003852 <HAL_GPIO_Init+0x1d6>
 8003850:	2300      	movs	r3, #0
 8003852:	697a      	ldr	r2, [r7, #20]
 8003854:	f002 0203 	and.w	r2, r2, #3
 8003858:	0092      	lsls	r2, r2, #2
 800385a:	4093      	lsls	r3, r2
 800385c:	693a      	ldr	r2, [r7, #16]
 800385e:	4313      	orrs	r3, r2
 8003860:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003862:	4937      	ldr	r1, [pc, #220]	@ (8003940 <HAL_GPIO_Init+0x2c4>)
 8003864:	697b      	ldr	r3, [r7, #20]
 8003866:	089b      	lsrs	r3, r3, #2
 8003868:	3302      	adds	r3, #2
 800386a:	693a      	ldr	r2, [r7, #16]
 800386c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003870:	4b36      	ldr	r3, [pc, #216]	@ (800394c <HAL_GPIO_Init+0x2d0>)
 8003872:	689b      	ldr	r3, [r3, #8]
 8003874:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003876:	68fb      	ldr	r3, [r7, #12]
 8003878:	43db      	mvns	r3, r3
 800387a:	693a      	ldr	r2, [r7, #16]
 800387c:	4013      	ands	r3, r2
 800387e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003880:	683b      	ldr	r3, [r7, #0]
 8003882:	685b      	ldr	r3, [r3, #4]
 8003884:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003888:	2b00      	cmp	r3, #0
 800388a:	d003      	beq.n	8003894 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 800388c:	693a      	ldr	r2, [r7, #16]
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	4313      	orrs	r3, r2
 8003892:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003894:	4a2d      	ldr	r2, [pc, #180]	@ (800394c <HAL_GPIO_Init+0x2d0>)
 8003896:	693b      	ldr	r3, [r7, #16]
 8003898:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800389a:	4b2c      	ldr	r3, [pc, #176]	@ (800394c <HAL_GPIO_Init+0x2d0>)
 800389c:	68db      	ldr	r3, [r3, #12]
 800389e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	43db      	mvns	r3, r3
 80038a4:	693a      	ldr	r2, [r7, #16]
 80038a6:	4013      	ands	r3, r2
 80038a8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80038aa:	683b      	ldr	r3, [r7, #0]
 80038ac:	685b      	ldr	r3, [r3, #4]
 80038ae:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d003      	beq.n	80038be <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 80038b6:	693a      	ldr	r2, [r7, #16]
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	4313      	orrs	r3, r2
 80038bc:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80038be:	4a23      	ldr	r2, [pc, #140]	@ (800394c <HAL_GPIO_Init+0x2d0>)
 80038c0:	693b      	ldr	r3, [r7, #16]
 80038c2:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80038c4:	4b21      	ldr	r3, [pc, #132]	@ (800394c <HAL_GPIO_Init+0x2d0>)
 80038c6:	685b      	ldr	r3, [r3, #4]
 80038c8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	43db      	mvns	r3, r3
 80038ce:	693a      	ldr	r2, [r7, #16]
 80038d0:	4013      	ands	r3, r2
 80038d2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80038d4:	683b      	ldr	r3, [r7, #0]
 80038d6:	685b      	ldr	r3, [r3, #4]
 80038d8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80038dc:	2b00      	cmp	r3, #0
 80038de:	d003      	beq.n	80038e8 <HAL_GPIO_Init+0x26c>
        {
          temp |= iocurrent;
 80038e0:	693a      	ldr	r2, [r7, #16]
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	4313      	orrs	r3, r2
 80038e6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80038e8:	4a18      	ldr	r2, [pc, #96]	@ (800394c <HAL_GPIO_Init+0x2d0>)
 80038ea:	693b      	ldr	r3, [r7, #16]
 80038ec:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80038ee:	4b17      	ldr	r3, [pc, #92]	@ (800394c <HAL_GPIO_Init+0x2d0>)
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	43db      	mvns	r3, r3
 80038f8:	693a      	ldr	r2, [r7, #16]
 80038fa:	4013      	ands	r3, r2
 80038fc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80038fe:	683b      	ldr	r3, [r7, #0]
 8003900:	685b      	ldr	r3, [r3, #4]
 8003902:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003906:	2b00      	cmp	r3, #0
 8003908:	d003      	beq.n	8003912 <HAL_GPIO_Init+0x296>
        {
          temp |= iocurrent;
 800390a:	693a      	ldr	r2, [r7, #16]
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	4313      	orrs	r3, r2
 8003910:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003912:	4a0e      	ldr	r2, [pc, #56]	@ (800394c <HAL_GPIO_Init+0x2d0>)
 8003914:	693b      	ldr	r3, [r7, #16]
 8003916:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8003918:	697b      	ldr	r3, [r7, #20]
 800391a:	3301      	adds	r3, #1
 800391c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800391e:	683b      	ldr	r3, [r7, #0]
 8003920:	681a      	ldr	r2, [r3, #0]
 8003922:	697b      	ldr	r3, [r7, #20]
 8003924:	fa22 f303 	lsr.w	r3, r2, r3
 8003928:	2b00      	cmp	r3, #0
 800392a:	f47f aeaf 	bne.w	800368c <HAL_GPIO_Init+0x10>
  }
}
 800392e:	bf00      	nop
 8003930:	bf00      	nop
 8003932:	371c      	adds	r7, #28
 8003934:	46bd      	mov	sp, r7
 8003936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800393a:	4770      	bx	lr
 800393c:	40021000 	.word	0x40021000
 8003940:	40010000 	.word	0x40010000
 8003944:	48000400 	.word	0x48000400
 8003948:	48000800 	.word	0x48000800
 800394c:	40010400 	.word	0x40010400

08003950 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003950:	b480      	push	{r7}
 8003952:	b083      	sub	sp, #12
 8003954:	af00      	add	r7, sp, #0
 8003956:	6078      	str	r0, [r7, #4]
 8003958:	460b      	mov	r3, r1
 800395a:	807b      	strh	r3, [r7, #2]
 800395c:	4613      	mov	r3, r2
 800395e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003960:	787b      	ldrb	r3, [r7, #1]
 8003962:	2b00      	cmp	r3, #0
 8003964:	d003      	beq.n	800396e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003966:	887a      	ldrh	r2, [r7, #2]
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800396c:	e002      	b.n	8003974 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800396e:	887a      	ldrh	r2, [r7, #2]
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8003974:	bf00      	nop
 8003976:	370c      	adds	r7, #12
 8003978:	46bd      	mov	sp, r7
 800397a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800397e:	4770      	bx	lr

08003980 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003980:	b580      	push	{r7, lr}
 8003982:	b082      	sub	sp, #8
 8003984:	af00      	add	r7, sp, #0
 8003986:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	2b00      	cmp	r3, #0
 800398c:	d101      	bne.n	8003992 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800398e:	2301      	movs	r3, #1
 8003990:	e08d      	b.n	8003aae <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003998:	b2db      	uxtb	r3, r3
 800399a:	2b00      	cmp	r3, #0
 800399c:	d106      	bne.n	80039ac <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	2200      	movs	r2, #0
 80039a2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80039a6:	6878      	ldr	r0, [r7, #4]
 80039a8:	f7fd fee0 	bl	800176c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	2224      	movs	r2, #36	@ 0x24
 80039b0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	681a      	ldr	r2, [r3, #0]
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	f022 0201 	bic.w	r2, r2, #1
 80039c2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	685a      	ldr	r2, [r3, #4]
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80039d0:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	689a      	ldr	r2, [r3, #8]
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80039e0:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	68db      	ldr	r3, [r3, #12]
 80039e6:	2b01      	cmp	r3, #1
 80039e8:	d107      	bne.n	80039fa <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	689a      	ldr	r2, [r3, #8]
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80039f6:	609a      	str	r2, [r3, #8]
 80039f8:	e006      	b.n	8003a08 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	689a      	ldr	r2, [r3, #8]
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8003a06:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	68db      	ldr	r3, [r3, #12]
 8003a0c:	2b02      	cmp	r3, #2
 8003a0e:	d108      	bne.n	8003a22 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	685a      	ldr	r2, [r3, #4]
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003a1e:	605a      	str	r2, [r3, #4]
 8003a20:	e007      	b.n	8003a32 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	685a      	ldr	r2, [r3, #4]
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003a30:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	685b      	ldr	r3, [r3, #4]
 8003a38:	687a      	ldr	r2, [r7, #4]
 8003a3a:	6812      	ldr	r2, [r2, #0]
 8003a3c:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8003a40:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003a44:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	68da      	ldr	r2, [r3, #12]
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003a54:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	691a      	ldr	r2, [r3, #16]
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	695b      	ldr	r3, [r3, #20]
 8003a5e:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	699b      	ldr	r3, [r3, #24]
 8003a66:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	430a      	orrs	r2, r1
 8003a6e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	69d9      	ldr	r1, [r3, #28]
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	6a1a      	ldr	r2, [r3, #32]
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	430a      	orrs	r2, r1
 8003a7e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	681a      	ldr	r2, [r3, #0]
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	f042 0201 	orr.w	r2, r2, #1
 8003a8e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	2200      	movs	r2, #0
 8003a94:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	2220      	movs	r2, #32
 8003a9a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	2200      	movs	r2, #0
 8003aa2:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	2200      	movs	r2, #0
 8003aa8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8003aac:	2300      	movs	r3, #0
}
 8003aae:	4618      	mov	r0, r3
 8003ab0:	3708      	adds	r7, #8
 8003ab2:	46bd      	mov	sp, r7
 8003ab4:	bd80      	pop	{r7, pc}
	...

08003ab8 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003ab8:	b580      	push	{r7, lr}
 8003aba:	b088      	sub	sp, #32
 8003abc:	af02      	add	r7, sp, #8
 8003abe:	60f8      	str	r0, [r7, #12]
 8003ac0:	4608      	mov	r0, r1
 8003ac2:	4611      	mov	r1, r2
 8003ac4:	461a      	mov	r2, r3
 8003ac6:	4603      	mov	r3, r0
 8003ac8:	817b      	strh	r3, [r7, #10]
 8003aca:	460b      	mov	r3, r1
 8003acc:	813b      	strh	r3, [r7, #8]
 8003ace:	4613      	mov	r3, r2
 8003ad0:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003ad2:	68fb      	ldr	r3, [r7, #12]
 8003ad4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003ad8:	b2db      	uxtb	r3, r3
 8003ada:	2b20      	cmp	r3, #32
 8003adc:	f040 80f9 	bne.w	8003cd2 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003ae0:	6a3b      	ldr	r3, [r7, #32]
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	d002      	beq.n	8003aec <HAL_I2C_Mem_Write+0x34>
 8003ae6:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8003ae8:	2b00      	cmp	r3, #0
 8003aea:	d105      	bne.n	8003af8 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003af2:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8003af4:	2301      	movs	r3, #1
 8003af6:	e0ed      	b.n	8003cd4 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003afe:	2b01      	cmp	r3, #1
 8003b00:	d101      	bne.n	8003b06 <HAL_I2C_Mem_Write+0x4e>
 8003b02:	2302      	movs	r3, #2
 8003b04:	e0e6      	b.n	8003cd4 <HAL_I2C_Mem_Write+0x21c>
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	2201      	movs	r2, #1
 8003b0a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003b0e:	f7ff fa13 	bl	8002f38 <HAL_GetTick>
 8003b12:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003b14:	697b      	ldr	r3, [r7, #20]
 8003b16:	9300      	str	r3, [sp, #0]
 8003b18:	2319      	movs	r3, #25
 8003b1a:	2201      	movs	r2, #1
 8003b1c:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8003b20:	68f8      	ldr	r0, [r7, #12]
 8003b22:	f001 fce4 	bl	80054ee <I2C_WaitOnFlagUntilTimeout>
 8003b26:	4603      	mov	r3, r0
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	d001      	beq.n	8003b30 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8003b2c:	2301      	movs	r3, #1
 8003b2e:	e0d1      	b.n	8003cd4 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	2221      	movs	r2, #33	@ 0x21
 8003b34:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	2240      	movs	r2, #64	@ 0x40
 8003b3c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	2200      	movs	r2, #0
 8003b44:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	6a3a      	ldr	r2, [r7, #32]
 8003b4a:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8003b50:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	2200      	movs	r2, #0
 8003b56:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003b58:	88f8      	ldrh	r0, [r7, #6]
 8003b5a:	893a      	ldrh	r2, [r7, #8]
 8003b5c:	8979      	ldrh	r1, [r7, #10]
 8003b5e:	697b      	ldr	r3, [r7, #20]
 8003b60:	9301      	str	r3, [sp, #4]
 8003b62:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003b64:	9300      	str	r3, [sp, #0]
 8003b66:	4603      	mov	r3, r0
 8003b68:	68f8      	ldr	r0, [r7, #12]
 8003b6a:	f000 ff11 	bl	8004990 <I2C_RequestMemoryWrite>
 8003b6e:	4603      	mov	r3, r0
 8003b70:	2b00      	cmp	r3, #0
 8003b72:	d005      	beq.n	8003b80 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	2200      	movs	r2, #0
 8003b78:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8003b7c:	2301      	movs	r3, #1
 8003b7e:	e0a9      	b.n	8003cd4 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003b84:	b29b      	uxth	r3, r3
 8003b86:	2bff      	cmp	r3, #255	@ 0xff
 8003b88:	d90e      	bls.n	8003ba8 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	22ff      	movs	r2, #255	@ 0xff
 8003b8e:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003b94:	b2da      	uxtb	r2, r3
 8003b96:	8979      	ldrh	r1, [r7, #10]
 8003b98:	2300      	movs	r3, #0
 8003b9a:	9300      	str	r3, [sp, #0]
 8003b9c:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8003ba0:	68f8      	ldr	r0, [r7, #12]
 8003ba2:	f001 fe5d 	bl	8005860 <I2C_TransferConfig>
 8003ba6:	e00f      	b.n	8003bc8 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003bac:	b29a      	uxth	r2, r3
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003bb6:	b2da      	uxtb	r2, r3
 8003bb8:	8979      	ldrh	r1, [r7, #10]
 8003bba:	2300      	movs	r3, #0
 8003bbc:	9300      	str	r3, [sp, #0]
 8003bbe:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003bc2:	68f8      	ldr	r0, [r7, #12]
 8003bc4:	f001 fe4c 	bl	8005860 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003bc8:	697a      	ldr	r2, [r7, #20]
 8003bca:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003bcc:	68f8      	ldr	r0, [r7, #12]
 8003bce:	f001 fcdd 	bl	800558c <I2C_WaitOnTXISFlagUntilTimeout>
 8003bd2:	4603      	mov	r3, r0
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	d001      	beq.n	8003bdc <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8003bd8:	2301      	movs	r3, #1
 8003bda:	e07b      	b.n	8003cd4 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003be0:	781a      	ldrb	r2, [r3, #0]
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003bec:	1c5a      	adds	r2, r3, #1
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003bf6:	b29b      	uxth	r3, r3
 8003bf8:	3b01      	subs	r3, #1
 8003bfa:	b29a      	uxth	r2, r3
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003c04:	3b01      	subs	r3, #1
 8003c06:	b29a      	uxth	r2, r3
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003c10:	b29b      	uxth	r3, r3
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	d034      	beq.n	8003c80 <HAL_I2C_Mem_Write+0x1c8>
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	d130      	bne.n	8003c80 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003c1e:	697b      	ldr	r3, [r7, #20]
 8003c20:	9300      	str	r3, [sp, #0]
 8003c22:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003c24:	2200      	movs	r2, #0
 8003c26:	2180      	movs	r1, #128	@ 0x80
 8003c28:	68f8      	ldr	r0, [r7, #12]
 8003c2a:	f001 fc60 	bl	80054ee <I2C_WaitOnFlagUntilTimeout>
 8003c2e:	4603      	mov	r3, r0
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	d001      	beq.n	8003c38 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8003c34:	2301      	movs	r3, #1
 8003c36:	e04d      	b.n	8003cd4 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003c3c:	b29b      	uxth	r3, r3
 8003c3e:	2bff      	cmp	r3, #255	@ 0xff
 8003c40:	d90e      	bls.n	8003c60 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	22ff      	movs	r2, #255	@ 0xff
 8003c46:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003c4c:	b2da      	uxtb	r2, r3
 8003c4e:	8979      	ldrh	r1, [r7, #10]
 8003c50:	2300      	movs	r3, #0
 8003c52:	9300      	str	r3, [sp, #0]
 8003c54:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8003c58:	68f8      	ldr	r0, [r7, #12]
 8003c5a:	f001 fe01 	bl	8005860 <I2C_TransferConfig>
 8003c5e:	e00f      	b.n	8003c80 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003c64:	b29a      	uxth	r2, r3
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003c6e:	b2da      	uxtb	r2, r3
 8003c70:	8979      	ldrh	r1, [r7, #10]
 8003c72:	2300      	movs	r3, #0
 8003c74:	9300      	str	r3, [sp, #0]
 8003c76:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003c7a:	68f8      	ldr	r0, [r7, #12]
 8003c7c:	f001 fdf0 	bl	8005860 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003c84:	b29b      	uxth	r3, r3
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	d19e      	bne.n	8003bc8 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003c8a:	697a      	ldr	r2, [r7, #20]
 8003c8c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003c8e:	68f8      	ldr	r0, [r7, #12]
 8003c90:	f001 fcc3 	bl	800561a <I2C_WaitOnSTOPFlagUntilTimeout>
 8003c94:	4603      	mov	r3, r0
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	d001      	beq.n	8003c9e <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8003c9a:	2301      	movs	r3, #1
 8003c9c:	e01a      	b.n	8003cd4 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	2220      	movs	r2, #32
 8003ca4:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003ca6:	68fb      	ldr	r3, [r7, #12]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	6859      	ldr	r1, [r3, #4]
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	681a      	ldr	r2, [r3, #0]
 8003cb0:	4b0a      	ldr	r3, [pc, #40]	@ (8003cdc <HAL_I2C_Mem_Write+0x224>)
 8003cb2:	400b      	ands	r3, r1
 8003cb4:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003cb6:	68fb      	ldr	r3, [r7, #12]
 8003cb8:	2220      	movs	r2, #32
 8003cba:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	2200      	movs	r2, #0
 8003cc2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	2200      	movs	r2, #0
 8003cca:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8003cce:	2300      	movs	r3, #0
 8003cd0:	e000      	b.n	8003cd4 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8003cd2:	2302      	movs	r3, #2
  }
}
 8003cd4:	4618      	mov	r0, r3
 8003cd6:	3718      	adds	r7, #24
 8003cd8:	46bd      	mov	sp, r7
 8003cda:	bd80      	pop	{r7, pc}
 8003cdc:	fe00e800 	.word	0xfe00e800

08003ce0 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003ce0:	b580      	push	{r7, lr}
 8003ce2:	b088      	sub	sp, #32
 8003ce4:	af02      	add	r7, sp, #8
 8003ce6:	60f8      	str	r0, [r7, #12]
 8003ce8:	4608      	mov	r0, r1
 8003cea:	4611      	mov	r1, r2
 8003cec:	461a      	mov	r2, r3
 8003cee:	4603      	mov	r3, r0
 8003cf0:	817b      	strh	r3, [r7, #10]
 8003cf2:	460b      	mov	r3, r1
 8003cf4:	813b      	strh	r3, [r7, #8]
 8003cf6:	4613      	mov	r3, r2
 8003cf8:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003d00:	b2db      	uxtb	r3, r3
 8003d02:	2b20      	cmp	r3, #32
 8003d04:	f040 80fd 	bne.w	8003f02 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8003d08:	6a3b      	ldr	r3, [r7, #32]
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	d002      	beq.n	8003d14 <HAL_I2C_Mem_Read+0x34>
 8003d0e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8003d10:	2b00      	cmp	r3, #0
 8003d12:	d105      	bne.n	8003d20 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003d1a:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8003d1c:	2301      	movs	r3, #1
 8003d1e:	e0f1      	b.n	8003f04 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003d26:	2b01      	cmp	r3, #1
 8003d28:	d101      	bne.n	8003d2e <HAL_I2C_Mem_Read+0x4e>
 8003d2a:	2302      	movs	r3, #2
 8003d2c:	e0ea      	b.n	8003f04 <HAL_I2C_Mem_Read+0x224>
 8003d2e:	68fb      	ldr	r3, [r7, #12]
 8003d30:	2201      	movs	r2, #1
 8003d32:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003d36:	f7ff f8ff 	bl	8002f38 <HAL_GetTick>
 8003d3a:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003d3c:	697b      	ldr	r3, [r7, #20]
 8003d3e:	9300      	str	r3, [sp, #0]
 8003d40:	2319      	movs	r3, #25
 8003d42:	2201      	movs	r2, #1
 8003d44:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8003d48:	68f8      	ldr	r0, [r7, #12]
 8003d4a:	f001 fbd0 	bl	80054ee <I2C_WaitOnFlagUntilTimeout>
 8003d4e:	4603      	mov	r3, r0
 8003d50:	2b00      	cmp	r3, #0
 8003d52:	d001      	beq.n	8003d58 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8003d54:	2301      	movs	r3, #1
 8003d56:	e0d5      	b.n	8003f04 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	2222      	movs	r2, #34	@ 0x22
 8003d5c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	2240      	movs	r2, #64	@ 0x40
 8003d64:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	2200      	movs	r2, #0
 8003d6c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003d6e:	68fb      	ldr	r3, [r7, #12]
 8003d70:	6a3a      	ldr	r2, [r7, #32]
 8003d72:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8003d78:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8003d7a:	68fb      	ldr	r3, [r7, #12]
 8003d7c:	2200      	movs	r2, #0
 8003d7e:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003d80:	88f8      	ldrh	r0, [r7, #6]
 8003d82:	893a      	ldrh	r2, [r7, #8]
 8003d84:	8979      	ldrh	r1, [r7, #10]
 8003d86:	697b      	ldr	r3, [r7, #20]
 8003d88:	9301      	str	r3, [sp, #4]
 8003d8a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003d8c:	9300      	str	r3, [sp, #0]
 8003d8e:	4603      	mov	r3, r0
 8003d90:	68f8      	ldr	r0, [r7, #12]
 8003d92:	f000 fe51 	bl	8004a38 <I2C_RequestMemoryRead>
 8003d96:	4603      	mov	r3, r0
 8003d98:	2b00      	cmp	r3, #0
 8003d9a:	d005      	beq.n	8003da8 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	2200      	movs	r2, #0
 8003da0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8003da4:	2301      	movs	r3, #1
 8003da6:	e0ad      	b.n	8003f04 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003dac:	b29b      	uxth	r3, r3
 8003dae:	2bff      	cmp	r3, #255	@ 0xff
 8003db0:	d90e      	bls.n	8003dd0 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	22ff      	movs	r2, #255	@ 0xff
 8003db6:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003dbc:	b2da      	uxtb	r2, r3
 8003dbe:	8979      	ldrh	r1, [r7, #10]
 8003dc0:	4b52      	ldr	r3, [pc, #328]	@ (8003f0c <HAL_I2C_Mem_Read+0x22c>)
 8003dc2:	9300      	str	r3, [sp, #0]
 8003dc4:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8003dc8:	68f8      	ldr	r0, [r7, #12]
 8003dca:	f001 fd49 	bl	8005860 <I2C_TransferConfig>
 8003dce:	e00f      	b.n	8003df0 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003dd4:	b29a      	uxth	r2, r3
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003dde:	b2da      	uxtb	r2, r3
 8003de0:	8979      	ldrh	r1, [r7, #10]
 8003de2:	4b4a      	ldr	r3, [pc, #296]	@ (8003f0c <HAL_I2C_Mem_Read+0x22c>)
 8003de4:	9300      	str	r3, [sp, #0]
 8003de6:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003dea:	68f8      	ldr	r0, [r7, #12]
 8003dec:	f001 fd38 	bl	8005860 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8003df0:	697b      	ldr	r3, [r7, #20]
 8003df2:	9300      	str	r3, [sp, #0]
 8003df4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003df6:	2200      	movs	r2, #0
 8003df8:	2104      	movs	r1, #4
 8003dfa:	68f8      	ldr	r0, [r7, #12]
 8003dfc:	f001 fb77 	bl	80054ee <I2C_WaitOnFlagUntilTimeout>
 8003e00:	4603      	mov	r3, r0
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	d001      	beq.n	8003e0a <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8003e06:	2301      	movs	r3, #1
 8003e08:	e07c      	b.n	8003f04 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e14:	b2d2      	uxtb	r2, r2
 8003e16:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e1c:	1c5a      	adds	r2, r3, #1
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003e26:	3b01      	subs	r3, #1
 8003e28:	b29a      	uxth	r2, r3
 8003e2a:	68fb      	ldr	r3, [r7, #12]
 8003e2c:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003e32:	b29b      	uxth	r3, r3
 8003e34:	3b01      	subs	r3, #1
 8003e36:	b29a      	uxth	r2, r3
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003e40:	b29b      	uxth	r3, r3
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	d034      	beq.n	8003eb0 <HAL_I2C_Mem_Read+0x1d0>
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	d130      	bne.n	8003eb0 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003e4e:	697b      	ldr	r3, [r7, #20]
 8003e50:	9300      	str	r3, [sp, #0]
 8003e52:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003e54:	2200      	movs	r2, #0
 8003e56:	2180      	movs	r1, #128	@ 0x80
 8003e58:	68f8      	ldr	r0, [r7, #12]
 8003e5a:	f001 fb48 	bl	80054ee <I2C_WaitOnFlagUntilTimeout>
 8003e5e:	4603      	mov	r3, r0
 8003e60:	2b00      	cmp	r3, #0
 8003e62:	d001      	beq.n	8003e68 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8003e64:	2301      	movs	r3, #1
 8003e66:	e04d      	b.n	8003f04 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003e6c:	b29b      	uxth	r3, r3
 8003e6e:	2bff      	cmp	r3, #255	@ 0xff
 8003e70:	d90e      	bls.n	8003e90 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003e72:	68fb      	ldr	r3, [r7, #12]
 8003e74:	22ff      	movs	r2, #255	@ 0xff
 8003e76:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003e7c:	b2da      	uxtb	r2, r3
 8003e7e:	8979      	ldrh	r1, [r7, #10]
 8003e80:	2300      	movs	r3, #0
 8003e82:	9300      	str	r3, [sp, #0]
 8003e84:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8003e88:	68f8      	ldr	r0, [r7, #12]
 8003e8a:	f001 fce9 	bl	8005860 <I2C_TransferConfig>
 8003e8e:	e00f      	b.n	8003eb0 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003e94:	b29a      	uxth	r2, r3
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003e9e:	b2da      	uxtb	r2, r3
 8003ea0:	8979      	ldrh	r1, [r7, #10]
 8003ea2:	2300      	movs	r3, #0
 8003ea4:	9300      	str	r3, [sp, #0]
 8003ea6:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003eaa:	68f8      	ldr	r0, [r7, #12]
 8003eac:	f001 fcd8 	bl	8005860 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003eb4:	b29b      	uxth	r3, r3
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d19a      	bne.n	8003df0 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003eba:	697a      	ldr	r2, [r7, #20]
 8003ebc:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003ebe:	68f8      	ldr	r0, [r7, #12]
 8003ec0:	f001 fbab 	bl	800561a <I2C_WaitOnSTOPFlagUntilTimeout>
 8003ec4:	4603      	mov	r3, r0
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	d001      	beq.n	8003ece <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8003eca:	2301      	movs	r3, #1
 8003ecc:	e01a      	b.n	8003f04 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	2220      	movs	r2, #32
 8003ed4:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003ed6:	68fb      	ldr	r3, [r7, #12]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	6859      	ldr	r1, [r3, #4]
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	681a      	ldr	r2, [r3, #0]
 8003ee0:	4b0b      	ldr	r3, [pc, #44]	@ (8003f10 <HAL_I2C_Mem_Read+0x230>)
 8003ee2:	400b      	ands	r3, r1
 8003ee4:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	2220      	movs	r2, #32
 8003eea:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	2200      	movs	r2, #0
 8003ef2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003ef6:	68fb      	ldr	r3, [r7, #12]
 8003ef8:	2200      	movs	r2, #0
 8003efa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8003efe:	2300      	movs	r3, #0
 8003f00:	e000      	b.n	8003f04 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8003f02:	2302      	movs	r3, #2
  }
}
 8003f04:	4618      	mov	r0, r3
 8003f06:	3718      	adds	r7, #24
 8003f08:	46bd      	mov	sp, r7
 8003f0a:	bd80      	pop	{r7, pc}
 8003f0c:	80002400 	.word	0x80002400
 8003f10:	fe00e800 	.word	0xfe00e800

08003f14 <HAL_I2C_Mem_Read_DMA>:
  * @param  Size Amount of data to be read
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                       uint16_t MemAddSize, uint8_t *pData, uint16_t Size)
{
 8003f14:	b580      	push	{r7, lr}
 8003f16:	b088      	sub	sp, #32
 8003f18:	af02      	add	r7, sp, #8
 8003f1a:	60f8      	str	r0, [r7, #12]
 8003f1c:	4608      	mov	r0, r1
 8003f1e:	4611      	mov	r1, r2
 8003f20:	461a      	mov	r2, r3
 8003f22:	4603      	mov	r3, r0
 8003f24:	817b      	strh	r3, [r7, #10]
 8003f26:	460b      	mov	r3, r1
 8003f28:	813b      	strh	r3, [r7, #8]
 8003f2a:	4613      	mov	r3, r2
 8003f2c:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef dmaxferstatus;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003f34:	b2db      	uxtb	r3, r3
 8003f36:	2b20      	cmp	r3, #32
 8003f38:	f040 80c2 	bne.w	80040c0 <HAL_I2C_Mem_Read_DMA+0x1ac>
  {
    if ((pData == NULL) || (Size == 0U))
 8003f3c:	6a3b      	ldr	r3, [r7, #32]
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	d002      	beq.n	8003f48 <HAL_I2C_Mem_Read_DMA+0x34>
 8003f42:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8003f44:	2b00      	cmp	r3, #0
 8003f46:	d105      	bne.n	8003f54 <HAL_I2C_Mem_Read_DMA+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003f4e:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8003f50:	2301      	movs	r3, #1
 8003f52:	e0b6      	b.n	80040c2 <HAL_I2C_Mem_Read_DMA+0x1ae>
    }

    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	699b      	ldr	r3, [r3, #24]
 8003f5a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003f5e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003f62:	d101      	bne.n	8003f68 <HAL_I2C_Mem_Read_DMA+0x54>
    {
      return HAL_BUSY;
 8003f64:	2302      	movs	r3, #2
 8003f66:	e0ac      	b.n	80040c2 <HAL_I2C_Mem_Read_DMA+0x1ae>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003f6e:	2b01      	cmp	r3, #1
 8003f70:	d101      	bne.n	8003f76 <HAL_I2C_Mem_Read_DMA+0x62>
 8003f72:	2302      	movs	r3, #2
 8003f74:	e0a5      	b.n	80040c2 <HAL_I2C_Mem_Read_DMA+0x1ae>
 8003f76:	68fb      	ldr	r3, [r7, #12]
 8003f78:	2201      	movs	r2, #1
 8003f7a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	2222      	movs	r2, #34	@ 0x22
 8003f82:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode        = HAL_I2C_MODE_MEM;
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	2240      	movs	r2, #64	@ 0x40
 8003f8a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	2200      	movs	r2, #0
 8003f92:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	6a3a      	ldr	r2, [r7, #32]
 8003f98:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8003f9a:	68fb      	ldr	r3, [r7, #12]
 8003f9c:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8003f9e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	4a4a      	ldr	r2, [pc, #296]	@ (80040cc <HAL_I2C_Mem_Read_DMA+0x1b8>)
 8003fa4:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->XferISR     = I2C_Mem_ISR_DMA;
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	4a49      	ldr	r2, [pc, #292]	@ (80040d0 <HAL_I2C_Mem_Read_DMA+0x1bc>)
 8003faa:	635a      	str	r2, [r3, #52]	@ 0x34
    hi2c->Devaddress  = DevAddress;
 8003fac:	897a      	ldrh	r2, [r7, #10]
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	64da      	str	r2, [r3, #76]	@ 0x4c

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003fb6:	b29b      	uxth	r3, r3
 8003fb8:	2bff      	cmp	r3, #255	@ 0xff
 8003fba:	d903      	bls.n	8003fc4 <HAL_I2C_Mem_Read_DMA+0xb0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	22ff      	movs	r2, #255	@ 0xff
 8003fc0:	851a      	strh	r2, [r3, #40]	@ 0x28
 8003fc2:	e004      	b.n	8003fce <HAL_I2C_Mem_Read_DMA+0xba>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003fc8:	b29a      	uxth	r2, r3
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	851a      	strh	r2, [r3, #40]	@ 0x28
    }

    /* If Memory address size is 8Bit */
    if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003fce:	88fb      	ldrh	r3, [r7, #6]
 8003fd0:	2b01      	cmp	r3, #1
 8003fd2:	d109      	bne.n	8003fe8 <HAL_I2C_Mem_Read_DMA+0xd4>
    {
      /* Prefetch Memory Address */
      hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003fd4:	893b      	ldrh	r3, [r7, #8]
 8003fd6:	b2da      	uxtb	r2, r3
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Reset Memaddress content */
      hi2c->Memaddress = 0xFFFFFFFFU;
 8003fde:	68fb      	ldr	r3, [r7, #12]
 8003fe0:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8003fe4:	651a      	str	r2, [r3, #80]	@ 0x50
 8003fe6:	e00b      	b.n	8004000 <HAL_I2C_Mem_Read_DMA+0xec>
    }
    /* If Memory address size is 16Bit */
    else
    {
      /* Prefetch Memory Address (MSB part, LSB will be manage through interrupt) */
      hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8003fe8:	893b      	ldrh	r3, [r7, #8]
 8003fea:	0a1b      	lsrs	r3, r3, #8
 8003fec:	b29b      	uxth	r3, r3
 8003fee:	b2da      	uxtb	r2, r3
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Prepare Memaddress buffer for LSB part */
      hi2c->Memaddress = I2C_MEM_ADD_LSB(MemAddress);
 8003ff6:	893b      	ldrh	r3, [r7, #8]
 8003ff8:	b2db      	uxtb	r3, r3
 8003ffa:	461a      	mov	r2, r3
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	651a      	str	r2, [r3, #80]	@ 0x50
    }

    if (hi2c->hdmarx != NULL)
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004004:	2b00      	cmp	r3, #0
 8004006:	d020      	beq.n	800404a <HAL_I2C_Mem_Read_DMA+0x136>
    {
      /* Set the I2C DMA transfer complete callback */
      hi2c->hdmarx->XferCpltCallback = I2C_DMAMasterReceiveCplt;
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800400c:	4a31      	ldr	r2, [pc, #196]	@ (80040d4 <HAL_I2C_Mem_Read_DMA+0x1c0>)
 800400e:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Set the DMA error callback */
      hi2c->hdmarx->XferErrorCallback = I2C_DMAError;
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004014:	4a30      	ldr	r2, [pc, #192]	@ (80040d8 <HAL_I2C_Mem_Read_DMA+0x1c4>)
 8004016:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Set the unused DMA callbacks to NULL */
      hi2c->hdmarx->XferHalfCpltCallback = NULL;
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800401c:	2200      	movs	r2, #0
 800401e:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->hdmarx->XferAbortCallback = NULL;
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004024:	2200      	movs	r2, #0
 8004026:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Enable the DMA channel */
      dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)pData,
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	3324      	adds	r3, #36	@ 0x24
 8004032:	4619      	mov	r1, r3
 8004034:	6a3a      	ldr	r2, [r7, #32]
                                       hi2c->XferSize);
 8004036:	68fb      	ldr	r3, [r7, #12]
 8004038:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
      dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)pData,
 800403a:	f7ff f947 	bl	80032cc <HAL_DMA_Start_IT>
 800403e:	4603      	mov	r3, r0
 8004040:	75fb      	strb	r3, [r7, #23]
      __HAL_UNLOCK(hi2c);

      return HAL_ERROR;
    }

    if (dmaxferstatus == HAL_OK)
 8004042:	7dfb      	ldrb	r3, [r7, #23]
 8004044:	2b00      	cmp	r3, #0
 8004046:	d127      	bne.n	8004098 <HAL_I2C_Mem_Read_DMA+0x184>
 8004048:	e013      	b.n	8004072 <HAL_I2C_Mem_Read_DMA+0x15e>
      hi2c->State     = HAL_I2C_STATE_READY;
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	2220      	movs	r2, #32
 800404e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      hi2c->Mode      = HAL_I2C_MODE_NONE;
 8004052:	68fb      	ldr	r3, [r7, #12]
 8004054:	2200      	movs	r2, #0
 8004056:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 800405a:	68fb      	ldr	r3, [r7, #12]
 800405c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800405e:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	645a      	str	r2, [r3, #68]	@ 0x44
      __HAL_UNLOCK(hi2c);
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	2200      	movs	r2, #0
 800406a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 800406e:	2301      	movs	r3, #1
 8004070:	e027      	b.n	80040c2 <HAL_I2C_Mem_Read_DMA+0x1ae>
    {
      /* Send Slave Address and Memory Address */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8004072:	88fb      	ldrh	r3, [r7, #6]
 8004074:	b2da      	uxtb	r2, r3
 8004076:	8979      	ldrh	r1, [r7, #10]
 8004078:	4b18      	ldr	r3, [pc, #96]	@ (80040dc <HAL_I2C_Mem_Read_DMA+0x1c8>)
 800407a:	9300      	str	r3, [sp, #0]
 800407c:	2300      	movs	r3, #0
 800407e:	68f8      	ldr	r0, [r7, #12]
 8004080:	f001 fbee 	bl	8005860 <I2C_TransferConfig>

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	2200      	movs	r2, #0
 8004088:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
                process unlock */
      /* Enable ERR, TC, STOP, NACK, TXI interrupt */
      /* possible to enable all of these */
      /* I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI |
        I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
      I2C_Enable_IRQ(hi2c, I2C_XFER_TX_IT);
 800408c:	2101      	movs	r1, #1
 800408e:	68f8      	ldr	r0, [r7, #12]
 8004090:	f001 fc18 	bl	80058c4 <I2C_Enable_IRQ>
      __HAL_UNLOCK(hi2c);

      return HAL_ERROR;
    }

    return HAL_OK;
 8004094:	2300      	movs	r3, #0
 8004096:	e014      	b.n	80040c2 <HAL_I2C_Mem_Read_DMA+0x1ae>
      hi2c->State     = HAL_I2C_STATE_READY;
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	2220      	movs	r2, #32
 800409c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      hi2c->Mode      = HAL_I2C_MODE_NONE;
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	2200      	movs	r2, #0
 80040a4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80040ac:	f043 0210 	orr.w	r2, r3, #16
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	645a      	str	r2, [r3, #68]	@ 0x44
      __HAL_UNLOCK(hi2c);
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	2200      	movs	r2, #0
 80040b8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 80040bc:	2301      	movs	r3, #1
 80040be:	e000      	b.n	80040c2 <HAL_I2C_Mem_Read_DMA+0x1ae>
  }
  else
  {
    return HAL_BUSY;
 80040c0:	2302      	movs	r3, #2
  }
}
 80040c2:	4618      	mov	r0, r3
 80040c4:	3718      	adds	r7, #24
 80040c6:	46bd      	mov	sp, r7
 80040c8:	bd80      	pop	{r7, pc}
 80040ca:	bf00      	nop
 80040cc:	ffff0000 	.word	0xffff0000
 80040d0:	08004599 	.word	0x08004599
 80040d4:	080053ef 	.word	0x080053ef
 80040d8:	08005485 	.word	0x08005485
 80040dc:	80002000 	.word	0x80002000

080040e0 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c) /* Derogation MISRAC2012-Rule-8.13 */
{
 80040e0:	b580      	push	{r7, lr}
 80040e2:	b084      	sub	sp, #16
 80040e4:	af00      	add	r7, sp, #0
 80040e6:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	699b      	ldr	r3, [r3, #24]
 80040ee:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80040fc:	2b00      	cmp	r3, #0
 80040fe:	d005      	beq.n	800410c <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004104:	68ba      	ldr	r2, [r7, #8]
 8004106:	68f9      	ldr	r1, [r7, #12]
 8004108:	6878      	ldr	r0, [r7, #4]
 800410a:	4798      	blx	r3
  }
}
 800410c:	bf00      	nop
 800410e:	3710      	adds	r7, #16
 8004110:	46bd      	mov	sp, r7
 8004112:	bd80      	pop	{r7, pc}

08004114 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004114:	b480      	push	{r7}
 8004116:	b083      	sub	sp, #12
 8004118:	af00      	add	r7, sp, #0
 800411a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 800411c:	bf00      	nop
 800411e:	370c      	adds	r7, #12
 8004120:	46bd      	mov	sp, r7
 8004122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004126:	4770      	bx	lr

08004128 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004128:	b480      	push	{r7}
 800412a:	b083      	sub	sp, #12
 800412c:	af00      	add	r7, sp, #0
 800412e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8004130:	bf00      	nop
 8004132:	370c      	adds	r7, #12
 8004134:	46bd      	mov	sp, r7
 8004136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800413a:	4770      	bx	lr

0800413c <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800413c:	b480      	push	{r7}
 800413e:	b083      	sub	sp, #12
 8004140:	af00      	add	r7, sp, #0
 8004142:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8004144:	bf00      	nop
 8004146:	370c      	adds	r7, #12
 8004148:	46bd      	mov	sp, r7
 800414a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800414e:	4770      	bx	lr

08004150 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004150:	b480      	push	{r7}
 8004152:	b083      	sub	sp, #12
 8004154:	af00      	add	r7, sp, #0
 8004156:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8004158:	bf00      	nop
 800415a:	370c      	adds	r7, #12
 800415c:	46bd      	mov	sp, r7
 800415e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004162:	4770      	bx	lr

08004164 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8004164:	b480      	push	{r7}
 8004166:	b083      	sub	sp, #12
 8004168:	af00      	add	r7, sp, #0
 800416a:	6078      	str	r0, [r7, #4]
 800416c:	460b      	mov	r3, r1
 800416e:	70fb      	strb	r3, [r7, #3]
 8004170:	4613      	mov	r3, r2
 8004172:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8004174:	bf00      	nop
 8004176:	370c      	adds	r7, #12
 8004178:	46bd      	mov	sp, r7
 800417a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800417e:	4770      	bx	lr

08004180 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004180:	b480      	push	{r7}
 8004182:	b083      	sub	sp, #12
 8004184:	af00      	add	r7, sp, #0
 8004186:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 8004188:	bf00      	nop
 800418a:	370c      	adds	r7, #12
 800418c:	46bd      	mov	sp, r7
 800418e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004192:	4770      	bx	lr

08004194 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004194:	b480      	push	{r7}
 8004196:	b083      	sub	sp, #12
 8004198:	af00      	add	r7, sp, #0
 800419a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 800419c:	bf00      	nop
 800419e:	370c      	adds	r7, #12
 80041a0:	46bd      	mov	sp, r7
 80041a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041a6:	4770      	bx	lr

080041a8 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 80041a8:	b480      	push	{r7}
 80041aa:	b083      	sub	sp, #12
 80041ac:	af00      	add	r7, sp, #0
 80041ae:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 80041b0:	bf00      	nop
 80041b2:	370c      	adds	r7, #12
 80041b4:	46bd      	mov	sp, r7
 80041b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ba:	4770      	bx	lr

080041bc <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80041bc:	b480      	push	{r7}
 80041be:	b083      	sub	sp, #12
 80041c0:	af00      	add	r7, sp, #0
 80041c2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 80041c4:	bf00      	nop
 80041c6:	370c      	adds	r7, #12
 80041c8:	46bd      	mov	sp, r7
 80041ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ce:	4770      	bx	lr

080041d0 <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 80041d0:	b580      	push	{r7, lr}
 80041d2:	b086      	sub	sp, #24
 80041d4:	af00      	add	r7, sp, #0
 80041d6:	60f8      	str	r0, [r7, #12]
 80041d8:	60b9      	str	r1, [r7, #8]
 80041da:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80041e0:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 80041e2:	68bb      	ldr	r3, [r7, #8]
 80041e4:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80041ec:	2b01      	cmp	r3, #1
 80041ee:	d101      	bne.n	80041f4 <I2C_Slave_ISR_IT+0x24>
 80041f0:	2302      	movs	r3, #2
 80041f2:	e0e1      	b.n	80043b8 <I2C_Slave_ISR_IT+0x1e8>
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	2201      	movs	r2, #1
 80041f8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 80041fc:	693b      	ldr	r3, [r7, #16]
 80041fe:	f003 0320 	and.w	r3, r3, #32
 8004202:	2b00      	cmp	r3, #0
 8004204:	d008      	beq.n	8004218 <I2C_Slave_ISR_IT+0x48>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	f003 0320 	and.w	r3, r3, #32
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 800420c:	2b00      	cmp	r3, #0
 800420e:	d003      	beq.n	8004218 <I2C_Slave_ISR_IT+0x48>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 8004210:	6939      	ldr	r1, [r7, #16]
 8004212:	68f8      	ldr	r0, [r7, #12]
 8004214:	f000 fe4a 	bl	8004eac <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8004218:	693b      	ldr	r3, [r7, #16]
 800421a:	f003 0310 	and.w	r3, r3, #16
 800421e:	2b00      	cmp	r3, #0
 8004220:	d04b      	beq.n	80042ba <I2C_Slave_ISR_IT+0xea>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8004228:	2b00      	cmp	r3, #0
 800422a:	d046      	beq.n	80042ba <I2C_Slave_ISR_IT+0xea>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004230:	b29b      	uxth	r3, r3
 8004232:	2b00      	cmp	r3, #0
 8004234:	d128      	bne.n	8004288 <I2C_Slave_ISR_IT+0xb8>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8004236:	68fb      	ldr	r3, [r7, #12]
 8004238:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800423c:	b2db      	uxtb	r3, r3
 800423e:	2b28      	cmp	r3, #40	@ 0x28
 8004240:	d108      	bne.n	8004254 <I2C_Slave_ISR_IT+0x84>
 8004242:	697b      	ldr	r3, [r7, #20]
 8004244:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8004248:	d104      	bne.n	8004254 <I2C_Slave_ISR_IT+0x84>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 800424a:	6939      	ldr	r1, [r7, #16]
 800424c:	68f8      	ldr	r0, [r7, #12]
 800424e:	f000 ff3f 	bl	80050d0 <I2C_ITListenCplt>
 8004252:	e031      	b.n	80042b8 <I2C_Slave_ISR_IT+0xe8>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800425a:	b2db      	uxtb	r3, r3
 800425c:	2b29      	cmp	r3, #41	@ 0x29
 800425e:	d10e      	bne.n	800427e <I2C_Slave_ISR_IT+0xae>
 8004260:	697b      	ldr	r3, [r7, #20]
 8004262:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8004266:	d00a      	beq.n	800427e <I2C_Slave_ISR_IT+0xae>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	2210      	movs	r2, #16
 800426e:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8004270:	68f8      	ldr	r0, [r7, #12]
 8004272:	f001 f898 	bl	80053a6 <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8004276:	68f8      	ldr	r0, [r7, #12]
 8004278:	f000 fcf3 	bl	8004c62 <I2C_ITSlaveSeqCplt>
 800427c:	e01c      	b.n	80042b8 <I2C_Slave_ISR_IT+0xe8>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800427e:	68fb      	ldr	r3, [r7, #12]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	2210      	movs	r2, #16
 8004284:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 8004286:	e08f      	b.n	80043a8 <I2C_Slave_ISR_IT+0x1d8>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	2210      	movs	r2, #16
 800428e:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004294:	f043 0204 	orr.w	r2, r3, #4
 8004298:	68fb      	ldr	r3, [r7, #12]
 800429a:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 800429c:	697b      	ldr	r3, [r7, #20]
 800429e:	2b00      	cmp	r3, #0
 80042a0:	d003      	beq.n	80042aa <I2C_Slave_ISR_IT+0xda>
 80042a2:	697b      	ldr	r3, [r7, #20]
 80042a4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80042a8:	d17e      	bne.n	80043a8 <I2C_Slave_ISR_IT+0x1d8>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 80042aa:	68fb      	ldr	r3, [r7, #12]
 80042ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80042ae:	4619      	mov	r1, r3
 80042b0:	68f8      	ldr	r0, [r7, #12]
 80042b2:	f000 ff61 	bl	8005178 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 80042b6:	e077      	b.n	80043a8 <I2C_Slave_ISR_IT+0x1d8>
 80042b8:	e076      	b.n	80043a8 <I2C_Slave_ISR_IT+0x1d8>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 80042ba:	693b      	ldr	r3, [r7, #16]
 80042bc:	f003 0304 	and.w	r3, r3, #4
 80042c0:	2b00      	cmp	r3, #0
 80042c2:	d02f      	beq.n	8004324 <I2C_Slave_ISR_IT+0x154>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	f003 0304 	and.w	r3, r3, #4
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 80042ca:	2b00      	cmp	r3, #0
 80042cc:	d02a      	beq.n	8004324 <I2C_Slave_ISR_IT+0x154>
  {
    if (hi2c->XferCount > 0U)
 80042ce:	68fb      	ldr	r3, [r7, #12]
 80042d0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80042d2:	b29b      	uxth	r3, r3
 80042d4:	2b00      	cmp	r3, #0
 80042d6:	d018      	beq.n	800430a <I2C_Slave_ISR_IT+0x13a>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80042e2:	b2d2      	uxtb	r2, r2
 80042e4:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80042e6:	68fb      	ldr	r3, [r7, #12]
 80042e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80042ea:	1c5a      	adds	r2, r3, #1
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80042f4:	3b01      	subs	r3, #1
 80042f6:	b29a      	uxth	r2, r3
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004300:	b29b      	uxth	r3, r3
 8004302:	3b01      	subs	r3, #1
 8004304:	b29a      	uxth	r2, r3
 8004306:	68fb      	ldr	r3, [r7, #12]
 8004308:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 800430a:	68fb      	ldr	r3, [r7, #12]
 800430c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800430e:	b29b      	uxth	r3, r3
 8004310:	2b00      	cmp	r3, #0
 8004312:	d14b      	bne.n	80043ac <I2C_Slave_ISR_IT+0x1dc>
 8004314:	697b      	ldr	r3, [r7, #20]
 8004316:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800431a:	d047      	beq.n	80043ac <I2C_Slave_ISR_IT+0x1dc>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 800431c:	68f8      	ldr	r0, [r7, #12]
 800431e:	f000 fca0 	bl	8004c62 <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 8004322:	e043      	b.n	80043ac <I2C_Slave_ISR_IT+0x1dc>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8004324:	693b      	ldr	r3, [r7, #16]
 8004326:	f003 0308 	and.w	r3, r3, #8
 800432a:	2b00      	cmp	r3, #0
 800432c:	d009      	beq.n	8004342 <I2C_Slave_ISR_IT+0x172>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	f003 0308 	and.w	r3, r3, #8
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8004334:	2b00      	cmp	r3, #0
 8004336:	d004      	beq.n	8004342 <I2C_Slave_ISR_IT+0x172>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 8004338:	6939      	ldr	r1, [r7, #16]
 800433a:	68f8      	ldr	r0, [r7, #12]
 800433c:	f000 fbd0 	bl	8004ae0 <I2C_ITAddrCplt>
 8004340:	e035      	b.n	80043ae <I2C_Slave_ISR_IT+0x1de>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8004342:	693b      	ldr	r3, [r7, #16]
 8004344:	f003 0302 	and.w	r3, r3, #2
 8004348:	2b00      	cmp	r3, #0
 800434a:	d030      	beq.n	80043ae <I2C_Slave_ISR_IT+0x1de>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	f003 0302 	and.w	r3, r3, #2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8004352:	2b00      	cmp	r3, #0
 8004354:	d02b      	beq.n	80043ae <I2C_Slave_ISR_IT+0x1de>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 8004356:	68fb      	ldr	r3, [r7, #12]
 8004358:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800435a:	b29b      	uxth	r3, r3
 800435c:	2b00      	cmp	r3, #0
 800435e:	d018      	beq.n	8004392 <I2C_Slave_ISR_IT+0x1c2>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004364:	781a      	ldrb	r2, [r3, #0]
 8004366:	68fb      	ldr	r3, [r7, #12]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004370:	1c5a      	adds	r2, r3, #1
 8004372:	68fb      	ldr	r3, [r7, #12]
 8004374:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800437a:	b29b      	uxth	r3, r3
 800437c:	3b01      	subs	r3, #1
 800437e:	b29a      	uxth	r2, r3
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004388:	3b01      	subs	r3, #1
 800438a:	b29a      	uxth	r2, r3
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	851a      	strh	r2, [r3, #40]	@ 0x28
 8004390:	e00d      	b.n	80043ae <I2C_Slave_ISR_IT+0x1de>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 8004392:	697b      	ldr	r3, [r7, #20]
 8004394:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004398:	d002      	beq.n	80043a0 <I2C_Slave_ISR_IT+0x1d0>
 800439a:	697b      	ldr	r3, [r7, #20]
 800439c:	2b00      	cmp	r3, #0
 800439e:	d106      	bne.n	80043ae <I2C_Slave_ISR_IT+0x1de>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 80043a0:	68f8      	ldr	r0, [r7, #12]
 80043a2:	f000 fc5e 	bl	8004c62 <I2C_ITSlaveSeqCplt>
 80043a6:	e002      	b.n	80043ae <I2C_Slave_ISR_IT+0x1de>
    if (hi2c->XferCount == 0U)
 80043a8:	bf00      	nop
 80043aa:	e000      	b.n	80043ae <I2C_Slave_ISR_IT+0x1de>
    if ((hi2c->XferCount == 0U) && \
 80043ac:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 80043ae:	68fb      	ldr	r3, [r7, #12]
 80043b0:	2200      	movs	r2, #0
 80043b2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 80043b6:	2300      	movs	r3, #0
}
 80043b8:	4618      	mov	r0, r3
 80043ba:	3718      	adds	r7, #24
 80043bc:	46bd      	mov	sp, r7
 80043be:	bd80      	pop	{r7, pc}

080043c0 <I2C_Master_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                            uint32_t ITSources)
{
 80043c0:	b580      	push	{r7, lr}
 80043c2:	b088      	sub	sp, #32
 80043c4:	af02      	add	r7, sp, #8
 80043c6:	60f8      	str	r0, [r7, #12]
 80043c8:	60b9      	str	r1, [r7, #8]
 80043ca:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t xfermode;

  /* Process Locked */
  __HAL_LOCK(hi2c);
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80043d2:	2b01      	cmp	r3, #1
 80043d4:	d101      	bne.n	80043da <I2C_Master_ISR_DMA+0x1a>
 80043d6:	2302      	movs	r3, #2
 80043d8:	e0d9      	b.n	800458e <I2C_Master_ISR_DMA+0x1ce>
 80043da:	68fb      	ldr	r3, [r7, #12]
 80043dc:	2201      	movs	r2, #1
 80043de:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 80043e2:	68bb      	ldr	r3, [r7, #8]
 80043e4:	f003 0310 	and.w	r3, r3, #16
 80043e8:	2b00      	cmp	r3, #0
 80043ea:	d016      	beq.n	800441a <I2C_Master_ISR_DMA+0x5a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	d011      	beq.n	800441a <I2C_Master_ISR_DMA+0x5a>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80043f6:	68fb      	ldr	r3, [r7, #12]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	2210      	movs	r2, #16
 80043fc:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004402:	f043 0204 	orr.w	r2, r3, #4
 8004406:	68fb      	ldr	r3, [r7, #12]
 8004408:	645a      	str	r2, [r3, #68]	@ 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 800440a:	2120      	movs	r1, #32
 800440c:	68f8      	ldr	r0, [r7, #12]
 800440e:	f001 fa59 	bl	80058c4 <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8004412:	68f8      	ldr	r0, [r7, #12]
 8004414:	f000 ffc7 	bl	80053a6 <I2C_Flush_TXDR>
 8004418:	e0b4      	b.n	8004584 <I2C_Master_ISR_DMA+0x1c4>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 800441a:	68bb      	ldr	r3, [r7, #8]
 800441c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004420:	2b00      	cmp	r3, #0
 8004422:	d071      	beq.n	8004508 <I2C_Master_ISR_DMA+0x148>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 800442a:	2b00      	cmp	r3, #0
 800442c:	d06c      	beq.n	8004508 <I2C_Master_ISR_DMA+0x148>
  {
    /* Disable TC interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_TCI);
 800442e:	68fb      	ldr	r3, [r7, #12]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	681a      	ldr	r2, [r3, #0]
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800443c:	601a      	str	r2, [r3, #0]

    if (hi2c->XferCount != 0U)
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004442:	b29b      	uxth	r3, r3
 8004444:	2b00      	cmp	r3, #0
 8004446:	d04e      	beq.n	80044e6 <I2C_Master_ISR_DMA+0x126>
    {
      /* Recover Slave address */
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 8004448:	68fb      	ldr	r3, [r7, #12]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	685b      	ldr	r3, [r3, #4]
 800444e:	b29b      	uxth	r3, r3
 8004450:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004454:	827b      	strh	r3, [r7, #18]

      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004456:	68fb      	ldr	r3, [r7, #12]
 8004458:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800445a:	b29b      	uxth	r3, r3
 800445c:	2bff      	cmp	r3, #255	@ 0xff
 800445e:	d906      	bls.n	800446e <I2C_Master_ISR_DMA+0xae>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 8004460:	68fb      	ldr	r3, [r7, #12]
 8004462:	22ff      	movs	r2, #255	@ 0xff
 8004464:	851a      	strh	r2, [r3, #40]	@ 0x28
        xfermode = I2C_RELOAD_MODE;
 8004466:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800446a:	617b      	str	r3, [r7, #20]
 800446c:	e010      	b.n	8004490 <I2C_Master_ISR_DMA+0xd0>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 800446e:	68fb      	ldr	r3, [r7, #12]
 8004470:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004472:	b29a      	uxth	r2, r3
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	851a      	strh	r2, [r3, #40]	@ 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800447c:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8004480:	d003      	beq.n	800448a <I2C_Master_ISR_DMA+0xca>
        {
          xfermode = hi2c->XferOptions;
 8004482:	68fb      	ldr	r3, [r7, #12]
 8004484:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004486:	617b      	str	r3, [r7, #20]
 8004488:	e002      	b.n	8004490 <I2C_Master_ISR_DMA+0xd0>
        }
        else
        {
          xfermode = I2C_AUTOEND_MODE;
 800448a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800448e:	617b      	str	r3, [r7, #20]
        }
      }

      /* Set the new XferSize in Nbytes register */
      I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, xfermode, I2C_NO_STARTSTOP);
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004494:	b2da      	uxtb	r2, r3
 8004496:	8a79      	ldrh	r1, [r7, #18]
 8004498:	2300      	movs	r3, #0
 800449a:	9300      	str	r3, [sp, #0]
 800449c:	697b      	ldr	r3, [r7, #20]
 800449e:	68f8      	ldr	r0, [r7, #12]
 80044a0:	f001 f9de 	bl	8005860 <I2C_TransferConfig>

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80044a8:	b29a      	uxth	r2, r3
 80044aa:	68fb      	ldr	r3, [r7, #12]
 80044ac:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80044ae:	1ad3      	subs	r3, r2, r3
 80044b0:	b29a      	uxth	r2, r3
 80044b2:	68fb      	ldr	r3, [r7, #12]
 80044b4:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80044b6:	68fb      	ldr	r3, [r7, #12]
 80044b8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80044bc:	b2db      	uxtb	r3, r3
 80044be:	2b22      	cmp	r3, #34	@ 0x22
 80044c0:	d108      	bne.n	80044d4 <I2C_Master_ISR_DMA+0x114>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 80044c2:	68fb      	ldr	r3, [r7, #12]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	681a      	ldr	r2, [r3, #0]
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80044d0:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 80044d2:	e057      	b.n	8004584 <I2C_Master_ISR_DMA+0x1c4>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	681a      	ldr	r2, [r3, #0]
 80044da:	68fb      	ldr	r3, [r7, #12]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80044e2:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 80044e4:	e04e      	b.n	8004584 <I2C_Master_ISR_DMA+0x1c4>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 80044e6:	68fb      	ldr	r3, [r7, #12]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	685b      	ldr	r3, [r3, #4]
 80044ec:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80044f0:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80044f4:	d003      	beq.n	80044fe <I2C_Master_ISR_DMA+0x13e>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 80044f6:	68f8      	ldr	r0, [r7, #12]
 80044f8:	f000 fb76 	bl	8004be8 <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount != 0U)
 80044fc:	e042      	b.n	8004584 <I2C_Master_ISR_DMA+0x1c4>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 80044fe:	2140      	movs	r1, #64	@ 0x40
 8004500:	68f8      	ldr	r0, [r7, #12]
 8004502:	f000 fe39 	bl	8005178 <I2C_ITError>
    if (hi2c->XferCount != 0U)
 8004506:	e03d      	b.n	8004584 <I2C_Master_ISR_DMA+0x1c4>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8004508:	68bb      	ldr	r3, [r7, #8]
 800450a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800450e:	2b00      	cmp	r3, #0
 8004510:	d028      	beq.n	8004564 <I2C_Master_ISR_DMA+0x1a4>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8004518:	2b00      	cmp	r3, #0
 800451a:	d023      	beq.n	8004564 <I2C_Master_ISR_DMA+0x1a4>
  {
    if (hi2c->XferCount == 0U)
 800451c:	68fb      	ldr	r3, [r7, #12]
 800451e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004520:	b29b      	uxth	r3, r3
 8004522:	2b00      	cmp	r3, #0
 8004524:	d119      	bne.n	800455a <I2C_Master_ISR_DMA+0x19a>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	685b      	ldr	r3, [r3, #4]
 800452c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004530:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8004534:	d025      	beq.n	8004582 <I2C_Master_ISR_DMA+0x1c2>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 8004536:	68fb      	ldr	r3, [r7, #12]
 8004538:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800453a:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800453e:	d108      	bne.n	8004552 <I2C_Master_ISR_DMA+0x192>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8004540:	68fb      	ldr	r3, [r7, #12]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	685a      	ldr	r2, [r3, #4]
 8004546:	68fb      	ldr	r3, [r7, #12]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800454e:	605a      	str	r2, [r3, #4]
    if (hi2c->XferCount == 0U)
 8004550:	e017      	b.n	8004582 <I2C_Master_ISR_DMA+0x1c2>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 8004552:	68f8      	ldr	r0, [r7, #12]
 8004554:	f000 fb48 	bl	8004be8 <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount == 0U)
 8004558:	e013      	b.n	8004582 <I2C_Master_ISR_DMA+0x1c2>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 800455a:	2140      	movs	r1, #64	@ 0x40
 800455c:	68f8      	ldr	r0, [r7, #12]
 800455e:	f000 fe0b 	bl	8005178 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8004562:	e00e      	b.n	8004582 <I2C_Master_ISR_DMA+0x1c2>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8004564:	68bb      	ldr	r3, [r7, #8]
 8004566:	f003 0320 	and.w	r3, r3, #32
 800456a:	2b00      	cmp	r3, #0
 800456c:	d00a      	beq.n	8004584 <I2C_Master_ISR_DMA+0x1c4>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	f003 0320 	and.w	r3, r3, #32
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8004574:	2b00      	cmp	r3, #0
 8004576:	d005      	beq.n	8004584 <I2C_Master_ISR_DMA+0x1c4>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 8004578:	68b9      	ldr	r1, [r7, #8]
 800457a:	68f8      	ldr	r0, [r7, #12]
 800457c:	f000 fbce 	bl	8004d1c <I2C_ITMasterCplt>
 8004580:	e000      	b.n	8004584 <I2C_Master_ISR_DMA+0x1c4>
    if (hi2c->XferCount == 0U)
 8004582:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	2200      	movs	r2, #0
 8004588:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 800458c:	2300      	movs	r3, #0
}
 800458e:	4618      	mov	r0, r3
 8004590:	3718      	adds	r7, #24
 8004592:	46bd      	mov	sp, r7
 8004594:	bd80      	pop	{r7, pc}
	...

08004598 <I2C_Mem_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Mem_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                         uint32_t ITSources)
{
 8004598:	b580      	push	{r7, lr}
 800459a:	b088      	sub	sp, #32
 800459c:	af02      	add	r7, sp, #8
 800459e:	60f8      	str	r0, [r7, #12]
 80045a0:	60b9      	str	r1, [r7, #8]
 80045a2:	607a      	str	r2, [r7, #4]
  uint32_t direction = I2C_GENERATE_START_WRITE;
 80045a4:	4b8d      	ldr	r3, [pc, #564]	@ (80047dc <I2C_Mem_ISR_DMA+0x244>)
 80045a6:	617b      	str	r3, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hi2c);
 80045a8:	68fb      	ldr	r3, [r7, #12]
 80045aa:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80045ae:	2b01      	cmp	r3, #1
 80045b0:	d101      	bne.n	80045b6 <I2C_Mem_ISR_DMA+0x1e>
 80045b2:	2302      	movs	r3, #2
 80045b4:	e10e      	b.n	80047d4 <I2C_Mem_ISR_DMA+0x23c>
 80045b6:	68fb      	ldr	r3, [r7, #12]
 80045b8:	2201      	movs	r2, #1
 80045ba:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 80045be:	68bb      	ldr	r3, [r7, #8]
 80045c0:	f003 0310 	and.w	r3, r3, #16
 80045c4:	2b00      	cmp	r3, #0
 80045c6:	d016      	beq.n	80045f6 <I2C_Mem_ISR_DMA+0x5e>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	d011      	beq.n	80045f6 <I2C_Mem_ISR_DMA+0x5e>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80045d2:	68fb      	ldr	r3, [r7, #12]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	2210      	movs	r2, #16
 80045d8:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80045da:	68fb      	ldr	r3, [r7, #12]
 80045dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80045de:	f043 0204 	orr.w	r2, r3, #4
 80045e2:	68fb      	ldr	r3, [r7, #12]
 80045e4:	645a      	str	r2, [r3, #68]	@ 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 80045e6:	2120      	movs	r1, #32
 80045e8:	68f8      	ldr	r0, [r7, #12]
 80045ea:	f001 f96b 	bl	80058c4 <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80045ee:	68f8      	ldr	r0, [r7, #12]
 80045f0:	f000 fed9 	bl	80053a6 <I2C_Flush_TXDR>
 80045f4:	e0e9      	b.n	80047ca <I2C_Mem_ISR_DMA+0x232>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TXIS) != RESET) && \
 80045f6:	68bb      	ldr	r3, [r7, #8]
 80045f8:	f003 0302 	and.w	r3, r3, #2
 80045fc:	2b00      	cmp	r3, #0
 80045fe:	d00e      	beq.n	800461e <I2C_Mem_ISR_DMA+0x86>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	f003 0302 	and.w	r3, r3, #2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TXIS) != RESET) && \
 8004606:	2b00      	cmp	r3, #0
 8004608:	d009      	beq.n	800461e <I2C_Mem_ISR_DMA+0x86>
  {
    /* Write LSB part of Memory Address */
    hi2c->Instance->TXDR = hi2c->Memaddress;
 800460a:	68fb      	ldr	r3, [r7, #12]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	68fa      	ldr	r2, [r7, #12]
 8004610:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8004612:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Reset Memaddress content */
    hi2c->Memaddress = 0xFFFFFFFFU;
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800461a:	651a      	str	r2, [r3, #80]	@ 0x50
 800461c:	e0d5      	b.n	80047ca <I2C_Mem_ISR_DMA+0x232>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 800461e:	68bb      	ldr	r3, [r7, #8]
 8004620:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004624:	2b00      	cmp	r3, #0
 8004626:	d05f      	beq.n	80046e8 <I2C_Mem_ISR_DMA+0x150>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 800462e:	2b00      	cmp	r3, #0
 8004630:	d05a      	beq.n	80046e8 <I2C_Mem_ISR_DMA+0x150>
  {
    /* Disable Interrupt related to address step */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8004632:	2101      	movs	r1, #1
 8004634:	68f8      	ldr	r0, [r7, #12]
 8004636:	f001 f9c9 	bl	80059cc <I2C_Disable_IRQ>

    /* Enable only Error interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 800463a:	2110      	movs	r1, #16
 800463c:	68f8      	ldr	r0, [r7, #12]
 800463e:	f001 f941 	bl	80058c4 <I2C_Enable_IRQ>

    if (hi2c->XferCount != 0U)
 8004642:	68fb      	ldr	r3, [r7, #12]
 8004644:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004646:	b29b      	uxth	r3, r3
 8004648:	2b00      	cmp	r3, #0
 800464a:	d048      	beq.n	80046de <I2C_Mem_ISR_DMA+0x146>
    {
      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800464c:	68fb      	ldr	r3, [r7, #12]
 800464e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004650:	b29b      	uxth	r3, r3
 8004652:	2bff      	cmp	r3, #255	@ 0xff
 8004654:	d910      	bls.n	8004678 <I2C_Mem_ISR_DMA+0xe0>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 8004656:	68fb      	ldr	r3, [r7, #12]
 8004658:	22ff      	movs	r2, #255	@ 0xff
 800465a:	851a      	strh	r2, [r3, #40]	@ 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004660:	b299      	uxth	r1, r3
 8004662:	68fb      	ldr	r3, [r7, #12]
 8004664:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004666:	b2da      	uxtb	r2, r3
 8004668:	2300      	movs	r3, #0
 800466a:	9300      	str	r3, [sp, #0]
 800466c:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8004670:	68f8      	ldr	r0, [r7, #12]
 8004672:	f001 f8f5 	bl	8005860 <I2C_TransferConfig>
 8004676:	e011      	b.n	800469c <I2C_Mem_ISR_DMA+0x104>
                           I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 8004678:	68fb      	ldr	r3, [r7, #12]
 800467a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800467c:	b29a      	uxth	r2, r3
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	851a      	strh	r2, [r3, #40]	@ 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8004682:	68fb      	ldr	r3, [r7, #12]
 8004684:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004686:	b299      	uxth	r1, r3
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800468c:	b2da      	uxtb	r2, r3
 800468e:	2300      	movs	r3, #0
 8004690:	9300      	str	r3, [sp, #0]
 8004692:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8004696:	68f8      	ldr	r0, [r7, #12]
 8004698:	f001 f8e2 	bl	8005860 <I2C_TransferConfig>
                           I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
      }

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80046a0:	b29a      	uxth	r2, r3
 80046a2:	68fb      	ldr	r3, [r7, #12]
 80046a4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80046a6:	1ad3      	subs	r3, r2, r3
 80046a8:	b29a      	uxth	r2, r3
 80046aa:	68fb      	ldr	r3, [r7, #12]
 80046ac:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80046ae:	68fb      	ldr	r3, [r7, #12]
 80046b0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80046b4:	b2db      	uxtb	r3, r3
 80046b6:	2b22      	cmp	r3, #34	@ 0x22
 80046b8:	d108      	bne.n	80046cc <I2C_Mem_ISR_DMA+0x134>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 80046ba:	68fb      	ldr	r3, [r7, #12]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	681a      	ldr	r2, [r3, #0]
 80046c0:	68fb      	ldr	r3, [r7, #12]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80046c8:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 80046ca:	e07e      	b.n	80047ca <I2C_Mem_ISR_DMA+0x232>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	681a      	ldr	r2, [r3, #0]
 80046d2:	68fb      	ldr	r3, [r7, #12]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80046da:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 80046dc:	e075      	b.n	80047ca <I2C_Mem_ISR_DMA+0x232>
    }
    else
    {
      /* Wrong size Status regarding TCR flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 80046de:	2140      	movs	r1, #64	@ 0x40
 80046e0:	68f8      	ldr	r0, [r7, #12]
 80046e2:	f000 fd49 	bl	8005178 <I2C_ITError>
    if (hi2c->XferCount != 0U)
 80046e6:	e070      	b.n	80047ca <I2C_Mem_ISR_DMA+0x232>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 80046e8:	68bb      	ldr	r3, [r7, #8]
 80046ea:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	d05d      	beq.n	80047ae <I2C_Mem_ISR_DMA+0x216>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 80046f8:	2b00      	cmp	r3, #0
 80046fa:	d058      	beq.n	80047ae <I2C_Mem_ISR_DMA+0x216>
  {
    /* Disable Interrupt related to address step */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 80046fc:	2101      	movs	r1, #1
 80046fe:	68f8      	ldr	r0, [r7, #12]
 8004700:	f001 f964 	bl	80059cc <I2C_Disable_IRQ>

    /* Enable only Error and NACK interrupt for data transfer */
    I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 8004704:	2110      	movs	r1, #16
 8004706:	68f8      	ldr	r0, [r7, #12]
 8004708:	f001 f8dc 	bl	80058c4 <I2C_Enable_IRQ>

    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800470c:	68fb      	ldr	r3, [r7, #12]
 800470e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004712:	b2db      	uxtb	r3, r3
 8004714:	2b22      	cmp	r3, #34	@ 0x22
 8004716:	d101      	bne.n	800471c <I2C_Mem_ISR_DMA+0x184>
    {
      direction = I2C_GENERATE_START_READ;
 8004718:	4b31      	ldr	r3, [pc, #196]	@ (80047e0 <I2C_Mem_ISR_DMA+0x248>)
 800471a:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800471c:	68fb      	ldr	r3, [r7, #12]
 800471e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004720:	b29b      	uxth	r3, r3
 8004722:	2bff      	cmp	r3, #255	@ 0xff
 8004724:	d910      	bls.n	8004748 <I2C_Mem_ISR_DMA+0x1b0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8004726:	68fb      	ldr	r3, [r7, #12]
 8004728:	22ff      	movs	r2, #255	@ 0xff
 800472a:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 800472c:	68fb      	ldr	r3, [r7, #12]
 800472e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004730:	b299      	uxth	r1, r3
 8004732:	68fb      	ldr	r3, [r7, #12]
 8004734:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004736:	b2da      	uxtb	r2, r3
 8004738:	697b      	ldr	r3, [r7, #20]
 800473a:	9300      	str	r3, [sp, #0]
 800473c:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8004740:	68f8      	ldr	r0, [r7, #12]
 8004742:	f001 f88d 	bl	8005860 <I2C_TransferConfig>
 8004746:	e011      	b.n	800476c <I2C_Mem_ISR_DMA+0x1d4>
                         I2C_RELOAD_MODE, direction);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8004748:	68fb      	ldr	r3, [r7, #12]
 800474a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800474c:	b29a      	uxth	r2, r3
 800474e:	68fb      	ldr	r3, [r7, #12]
 8004750:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Set NBYTES to write and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8004752:	68fb      	ldr	r3, [r7, #12]
 8004754:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004756:	b299      	uxth	r1, r3
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800475c:	b2da      	uxtb	r2, r3
 800475e:	697b      	ldr	r3, [r7, #20]
 8004760:	9300      	str	r3, [sp, #0]
 8004762:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8004766:	68f8      	ldr	r0, [r7, #12]
 8004768:	f001 f87a 	bl	8005860 <I2C_TransferConfig>
                         I2C_AUTOEND_MODE, direction);
    }

    /* Update XferCount value */
    hi2c->XferCount -= hi2c->XferSize;
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004770:	b29a      	uxth	r2, r3
 8004772:	68fb      	ldr	r3, [r7, #12]
 8004774:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004776:	1ad3      	subs	r3, r2, r3
 8004778:	b29a      	uxth	r2, r3
 800477a:	68fb      	ldr	r3, [r7, #12]
 800477c:	855a      	strh	r2, [r3, #42]	@ 0x2a

    /* Enable DMA Request */
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800477e:	68fb      	ldr	r3, [r7, #12]
 8004780:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004784:	b2db      	uxtb	r3, r3
 8004786:	2b22      	cmp	r3, #34	@ 0x22
 8004788:	d108      	bne.n	800479c <I2C_Mem_ISR_DMA+0x204>
    {
      hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 800478a:	68fb      	ldr	r3, [r7, #12]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	681a      	ldr	r2, [r3, #0]
 8004790:	68fb      	ldr	r3, [r7, #12]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004798:	601a      	str	r2, [r3, #0]
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800479a:	e016      	b.n	80047ca <I2C_Mem_ISR_DMA+0x232>
    }
    else
    {
      hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 800479c:	68fb      	ldr	r3, [r7, #12]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	681a      	ldr	r2, [r3, #0]
 80047a2:	68fb      	ldr	r3, [r7, #12]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80047aa:	601a      	str	r2, [r3, #0]
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80047ac:	e00d      	b.n	80047ca <I2C_Mem_ISR_DMA+0x232>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 80047ae:	68bb      	ldr	r3, [r7, #8]
 80047b0:	f003 0320 	and.w	r3, r3, #32
 80047b4:	2b00      	cmp	r3, #0
 80047b6:	d008      	beq.n	80047ca <I2C_Mem_ISR_DMA+0x232>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	f003 0320 	and.w	r3, r3, #32
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 80047be:	2b00      	cmp	r3, #0
 80047c0:	d003      	beq.n	80047ca <I2C_Mem_ISR_DMA+0x232>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 80047c2:	68b9      	ldr	r1, [r7, #8]
 80047c4:	68f8      	ldr	r0, [r7, #12]
 80047c6:	f000 faa9 	bl	8004d1c <I2C_ITMasterCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 80047ca:	68fb      	ldr	r3, [r7, #12]
 80047cc:	2200      	movs	r2, #0
 80047ce:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 80047d2:	2300      	movs	r3, #0
}
 80047d4:	4618      	mov	r0, r3
 80047d6:	3718      	adds	r7, #24
 80047d8:	46bd      	mov	sp, r7
 80047da:	bd80      	pop	{r7, pc}
 80047dc:	80002000 	.word	0x80002000
 80047e0:	80002400 	.word	0x80002400

080047e4 <I2C_Slave_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                           uint32_t ITSources)
{
 80047e4:	b580      	push	{r7, lr}
 80047e6:	b088      	sub	sp, #32
 80047e8:	af00      	add	r7, sp, #0
 80047ea:	60f8      	str	r0, [r7, #12]
 80047ec:	60b9      	str	r1, [r7, #8]
 80047ee:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 80047f0:	68fb      	ldr	r3, [r7, #12]
 80047f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80047f4:	61bb      	str	r3, [r7, #24]
  uint32_t treatdmanack = 0U;
 80047f6:	2300      	movs	r3, #0
 80047f8:	61fb      	str	r3, [r7, #28]
  HAL_I2C_StateTypeDef tmpstate;

  /* Process locked */
  __HAL_LOCK(hi2c);
 80047fa:	68fb      	ldr	r3, [r7, #12]
 80047fc:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004800:	2b01      	cmp	r3, #1
 8004802:	d101      	bne.n	8004808 <I2C_Slave_ISR_DMA+0x24>
 8004804:	2302      	movs	r3, #2
 8004806:	e0bf      	b.n	8004988 <I2C_Slave_ISR_DMA+0x1a4>
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	2201      	movs	r2, #1
 800480c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8004810:	68bb      	ldr	r3, [r7, #8]
 8004812:	f003 0320 	and.w	r3, r3, #32
 8004816:	2b00      	cmp	r3, #0
 8004818:	d008      	beq.n	800482c <I2C_Slave_ISR_DMA+0x48>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	f003 0320 	and.w	r3, r3, #32
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8004820:	2b00      	cmp	r3, #0
 8004822:	d003      	beq.n	800482c <I2C_Slave_ISR_DMA+0x48>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, ITFlags);
 8004824:	68b9      	ldr	r1, [r7, #8]
 8004826:	68f8      	ldr	r0, [r7, #12]
 8004828:	f000 fb40 	bl	8004eac <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 800482c:	68bb      	ldr	r3, [r7, #8]
 800482e:	f003 0310 	and.w	r3, r3, #16
 8004832:	2b00      	cmp	r3, #0
 8004834:	f000 8095 	beq.w	8004962 <I2C_Slave_ISR_DMA+0x17e>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 800483e:	2b00      	cmp	r3, #0
 8004840:	f000 808f 	beq.w	8004962 <I2C_Slave_ISR_DMA+0x17e>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0 */
    /* So clear Flag NACKF only */
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800484a:	2b00      	cmp	r3, #0
 800484c:	d104      	bne.n	8004858 <I2C_Slave_ISR_DMA+0x74>
        (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET))
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8004854:	2b00      	cmp	r3, #0
 8004856:	d07d      	beq.n	8004954 <I2C_Slave_ISR_DMA+0x170>
    {
      /* Split check of hdmarx, for MISRA compliance */
      if (hi2c->hdmarx != NULL)
 8004858:	68fb      	ldr	r3, [r7, #12]
 800485a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800485c:	2b00      	cmp	r3, #0
 800485e:	d00c      	beq.n	800487a <I2C_Slave_ISR_DMA+0x96>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET)
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004866:	2b00      	cmp	r3, #0
 8004868:	d007      	beq.n	800487a <I2C_Slave_ISR_DMA+0x96>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx) == 0U)
 800486a:	68fb      	ldr	r3, [r7, #12]
 800486c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	685b      	ldr	r3, [r3, #4]
 8004872:	2b00      	cmp	r3, #0
 8004874:	d101      	bne.n	800487a <I2C_Slave_ISR_DMA+0x96>
          {
            treatdmanack = 1U;
 8004876:	2301      	movs	r3, #1
 8004878:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      /* Split check of hdmatx, for MISRA compliance  */
      if (hi2c->hdmatx != NULL)
 800487a:	68fb      	ldr	r3, [r7, #12]
 800487c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800487e:	2b00      	cmp	r3, #0
 8004880:	d00c      	beq.n	800489c <I2C_Slave_ISR_DMA+0xb8>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET)
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004888:	2b00      	cmp	r3, #0
 800488a:	d007      	beq.n	800489c <I2C_Slave_ISR_DMA+0xb8>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx) == 0U)
 800488c:	68fb      	ldr	r3, [r7, #12]
 800488e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	685b      	ldr	r3, [r3, #4]
 8004894:	2b00      	cmp	r3, #0
 8004896:	d101      	bne.n	800489c <I2C_Slave_ISR_DMA+0xb8>
          {
            treatdmanack = 1U;
 8004898:	2301      	movs	r3, #1
 800489a:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      if (treatdmanack == 1U)
 800489c:	69fb      	ldr	r3, [r7, #28]
 800489e:	2b01      	cmp	r3, #1
 80048a0:	d128      	bne.n	80048f4 <I2C_Slave_ISR_DMA+0x110>
      {
        if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 80048a2:	68fb      	ldr	r3, [r7, #12]
 80048a4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80048a8:	b2db      	uxtb	r3, r3
 80048aa:	2b28      	cmp	r3, #40	@ 0x28
 80048ac:	d108      	bne.n	80048c0 <I2C_Slave_ISR_DMA+0xdc>
 80048ae:	69bb      	ldr	r3, [r7, #24]
 80048b0:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80048b4:	d104      	bne.n	80048c0 <I2C_Slave_ISR_DMA+0xdc>
          /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
             Warning[Pa134]: left and right operands are identical */
        {
          /* Call I2C Listen complete process */
          I2C_ITListenCplt(hi2c, ITFlags);
 80048b6:	68b9      	ldr	r1, [r7, #8]
 80048b8:	68f8      	ldr	r0, [r7, #12]
 80048ba:	f000 fc09 	bl	80050d0 <I2C_ITListenCplt>
 80048be:	e048      	b.n	8004952 <I2C_Slave_ISR_DMA+0x16e>
        }
        else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80048c6:	b2db      	uxtb	r3, r3
 80048c8:	2b29      	cmp	r3, #41	@ 0x29
 80048ca:	d10e      	bne.n	80048ea <I2C_Slave_ISR_DMA+0x106>
 80048cc:	69bb      	ldr	r3, [r7, #24]
 80048ce:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80048d2:	d00a      	beq.n	80048ea <I2C_Slave_ISR_DMA+0x106>
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	2210      	movs	r2, #16
 80048da:	61da      	str	r2, [r3, #28]

          /* Flush TX register */
          I2C_Flush_TXDR(hi2c);
 80048dc:	68f8      	ldr	r0, [r7, #12]
 80048de:	f000 fd62 	bl	80053a6 <I2C_Flush_TXDR>

          /* Last Byte is Transmitted */
          /* Call I2C Slave Sequential complete process */
          I2C_ITSlaveSeqCplt(hi2c);
 80048e2:	68f8      	ldr	r0, [r7, #12]
 80048e4:	f000 f9bd 	bl	8004c62 <I2C_ITSlaveSeqCplt>
 80048e8:	e033      	b.n	8004952 <I2C_Slave_ISR_DMA+0x16e>
        }
        else
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80048ea:	68fb      	ldr	r3, [r7, #12]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	2210      	movs	r2, #16
 80048f0:	61da      	str	r2, [r3, #28]
      if (treatdmanack == 1U)
 80048f2:	e034      	b.n	800495e <I2C_Slave_ISR_DMA+0x17a>
      }
      else
      {
        /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80048f4:	68fb      	ldr	r3, [r7, #12]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	2210      	movs	r2, #16
 80048fa:	61da      	str	r2, [r3, #28]

        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80048fc:	68fb      	ldr	r3, [r7, #12]
 80048fe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004900:	f043 0204 	orr.w	r2, r3, #4
 8004904:	68fb      	ldr	r3, [r7, #12]
 8004906:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Store current hi2c->State, solve MISRA2012-Rule-13.5 */
        tmpstate = hi2c->State;
 8004908:	68fb      	ldr	r3, [r7, #12]
 800490a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800490e:	75fb      	strb	r3, [r7, #23]

        if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8004910:	69bb      	ldr	r3, [r7, #24]
 8004912:	2b00      	cmp	r3, #0
 8004914:	d003      	beq.n	800491e <I2C_Slave_ISR_DMA+0x13a>
 8004916:	69bb      	ldr	r3, [r7, #24]
 8004918:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800491c:	d11f      	bne.n	800495e <I2C_Slave_ISR_DMA+0x17a>
        {
          if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800491e:	7dfb      	ldrb	r3, [r7, #23]
 8004920:	2b21      	cmp	r3, #33	@ 0x21
 8004922:	d002      	beq.n	800492a <I2C_Slave_ISR_DMA+0x146>
 8004924:	7dfb      	ldrb	r3, [r7, #23]
 8004926:	2b29      	cmp	r3, #41	@ 0x29
 8004928:	d103      	bne.n	8004932 <I2C_Slave_ISR_DMA+0x14e>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800492a:	68fb      	ldr	r3, [r7, #12]
 800492c:	2221      	movs	r2, #33	@ 0x21
 800492e:	631a      	str	r2, [r3, #48]	@ 0x30
 8004930:	e008      	b.n	8004944 <I2C_Slave_ISR_DMA+0x160>
          }
          else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8004932:	7dfb      	ldrb	r3, [r7, #23]
 8004934:	2b22      	cmp	r3, #34	@ 0x22
 8004936:	d002      	beq.n	800493e <I2C_Slave_ISR_DMA+0x15a>
 8004938:	7dfb      	ldrb	r3, [r7, #23]
 800493a:	2b2a      	cmp	r3, #42	@ 0x2a
 800493c:	d102      	bne.n	8004944 <I2C_Slave_ISR_DMA+0x160>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800493e:	68fb      	ldr	r3, [r7, #12]
 8004940:	2222      	movs	r2, #34	@ 0x22
 8004942:	631a      	str	r2, [r3, #48]	@ 0x30
          {
            /* Do nothing */
          }

          /* Call the corresponding callback to inform upper layer of End of Transfer */
          I2C_ITError(hi2c, hi2c->ErrorCode);
 8004944:	68fb      	ldr	r3, [r7, #12]
 8004946:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004948:	4619      	mov	r1, r3
 800494a:	68f8      	ldr	r0, [r7, #12]
 800494c:	f000 fc14 	bl	8005178 <I2C_ITError>
      if (treatdmanack == 1U)
 8004950:	e005      	b.n	800495e <I2C_Slave_ISR_DMA+0x17a>
 8004952:	e004      	b.n	800495e <I2C_Slave_ISR_DMA+0x17a>
      }
    }
    else
    {
      /* Only Clear NACK Flag, no DMA treatment is pending */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004954:	68fb      	ldr	r3, [r7, #12]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	2210      	movs	r2, #16
 800495a:	61da      	str	r2, [r3, #28]
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 800495c:	e00f      	b.n	800497e <I2C_Slave_ISR_DMA+0x19a>
      if (treatdmanack == 1U)
 800495e:	bf00      	nop
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8004960:	e00d      	b.n	800497e <I2C_Slave_ISR_DMA+0x19a>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 8004962:	68bb      	ldr	r3, [r7, #8]
 8004964:	f003 0308 	and.w	r3, r3, #8
 8004968:	2b00      	cmp	r3, #0
 800496a:	d008      	beq.n	800497e <I2C_Slave_ISR_DMA+0x19a>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	f003 0308 	and.w	r3, r3, #8
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 8004972:	2b00      	cmp	r3, #0
 8004974:	d003      	beq.n	800497e <I2C_Slave_ISR_DMA+0x19a>
  {
    I2C_ITAddrCplt(hi2c, ITFlags);
 8004976:	68b9      	ldr	r1, [r7, #8]
 8004978:	68f8      	ldr	r0, [r7, #12]
 800497a:	f000 f8b1 	bl	8004ae0 <I2C_ITAddrCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800497e:	68fb      	ldr	r3, [r7, #12]
 8004980:	2200      	movs	r2, #0
 8004982:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8004986:	2300      	movs	r3, #0
}
 8004988:	4618      	mov	r0, r3
 800498a:	3720      	adds	r7, #32
 800498c:	46bd      	mov	sp, r7
 800498e:	bd80      	pop	{r7, pc}

08004990 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8004990:	b580      	push	{r7, lr}
 8004992:	b086      	sub	sp, #24
 8004994:	af02      	add	r7, sp, #8
 8004996:	60f8      	str	r0, [r7, #12]
 8004998:	4608      	mov	r0, r1
 800499a:	4611      	mov	r1, r2
 800499c:	461a      	mov	r2, r3
 800499e:	4603      	mov	r3, r0
 80049a0:	817b      	strh	r3, [r7, #10]
 80049a2:	460b      	mov	r3, r1
 80049a4:	813b      	strh	r3, [r7, #8]
 80049a6:	4613      	mov	r3, r2
 80049a8:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 80049aa:	88fb      	ldrh	r3, [r7, #6]
 80049ac:	b2da      	uxtb	r2, r3
 80049ae:	8979      	ldrh	r1, [r7, #10]
 80049b0:	4b20      	ldr	r3, [pc, #128]	@ (8004a34 <I2C_RequestMemoryWrite+0xa4>)
 80049b2:	9300      	str	r3, [sp, #0]
 80049b4:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80049b8:	68f8      	ldr	r0, [r7, #12]
 80049ba:	f000 ff51 	bl	8005860 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80049be:	69fa      	ldr	r2, [r7, #28]
 80049c0:	69b9      	ldr	r1, [r7, #24]
 80049c2:	68f8      	ldr	r0, [r7, #12]
 80049c4:	f000 fde2 	bl	800558c <I2C_WaitOnTXISFlagUntilTimeout>
 80049c8:	4603      	mov	r3, r0
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	d001      	beq.n	80049d2 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 80049ce:	2301      	movs	r3, #1
 80049d0:	e02c      	b.n	8004a2c <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80049d2:	88fb      	ldrh	r3, [r7, #6]
 80049d4:	2b01      	cmp	r3, #1
 80049d6:	d105      	bne.n	80049e4 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80049d8:	893b      	ldrh	r3, [r7, #8]
 80049da:	b2da      	uxtb	r2, r3
 80049dc:	68fb      	ldr	r3, [r7, #12]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	629a      	str	r2, [r3, #40]	@ 0x28
 80049e2:	e015      	b.n	8004a10 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80049e4:	893b      	ldrh	r3, [r7, #8]
 80049e6:	0a1b      	lsrs	r3, r3, #8
 80049e8:	b29b      	uxth	r3, r3
 80049ea:	b2da      	uxtb	r2, r3
 80049ec:	68fb      	ldr	r3, [r7, #12]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80049f2:	69fa      	ldr	r2, [r7, #28]
 80049f4:	69b9      	ldr	r1, [r7, #24]
 80049f6:	68f8      	ldr	r0, [r7, #12]
 80049f8:	f000 fdc8 	bl	800558c <I2C_WaitOnTXISFlagUntilTimeout>
 80049fc:	4603      	mov	r3, r0
 80049fe:	2b00      	cmp	r3, #0
 8004a00:	d001      	beq.n	8004a06 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8004a02:	2301      	movs	r3, #1
 8004a04:	e012      	b.n	8004a2c <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004a06:	893b      	ldrh	r3, [r7, #8]
 8004a08:	b2da      	uxtb	r2, r3
 8004a0a:	68fb      	ldr	r3, [r7, #12]
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8004a10:	69fb      	ldr	r3, [r7, #28]
 8004a12:	9300      	str	r3, [sp, #0]
 8004a14:	69bb      	ldr	r3, [r7, #24]
 8004a16:	2200      	movs	r2, #0
 8004a18:	2180      	movs	r1, #128	@ 0x80
 8004a1a:	68f8      	ldr	r0, [r7, #12]
 8004a1c:	f000 fd67 	bl	80054ee <I2C_WaitOnFlagUntilTimeout>
 8004a20:	4603      	mov	r3, r0
 8004a22:	2b00      	cmp	r3, #0
 8004a24:	d001      	beq.n	8004a2a <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8004a26:	2301      	movs	r3, #1
 8004a28:	e000      	b.n	8004a2c <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8004a2a:	2300      	movs	r3, #0
}
 8004a2c:	4618      	mov	r0, r3
 8004a2e:	3710      	adds	r7, #16
 8004a30:	46bd      	mov	sp, r7
 8004a32:	bd80      	pop	{r7, pc}
 8004a34:	80002000 	.word	0x80002000

08004a38 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8004a38:	b580      	push	{r7, lr}
 8004a3a:	b086      	sub	sp, #24
 8004a3c:	af02      	add	r7, sp, #8
 8004a3e:	60f8      	str	r0, [r7, #12]
 8004a40:	4608      	mov	r0, r1
 8004a42:	4611      	mov	r1, r2
 8004a44:	461a      	mov	r2, r3
 8004a46:	4603      	mov	r3, r0
 8004a48:	817b      	strh	r3, [r7, #10]
 8004a4a:	460b      	mov	r3, r1
 8004a4c:	813b      	strh	r3, [r7, #8]
 8004a4e:	4613      	mov	r3, r2
 8004a50:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8004a52:	88fb      	ldrh	r3, [r7, #6]
 8004a54:	b2da      	uxtb	r2, r3
 8004a56:	8979      	ldrh	r1, [r7, #10]
 8004a58:	4b20      	ldr	r3, [pc, #128]	@ (8004adc <I2C_RequestMemoryRead+0xa4>)
 8004a5a:	9300      	str	r3, [sp, #0]
 8004a5c:	2300      	movs	r3, #0
 8004a5e:	68f8      	ldr	r0, [r7, #12]
 8004a60:	f000 fefe 	bl	8005860 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004a64:	69fa      	ldr	r2, [r7, #28]
 8004a66:	69b9      	ldr	r1, [r7, #24]
 8004a68:	68f8      	ldr	r0, [r7, #12]
 8004a6a:	f000 fd8f 	bl	800558c <I2C_WaitOnTXISFlagUntilTimeout>
 8004a6e:	4603      	mov	r3, r0
 8004a70:	2b00      	cmp	r3, #0
 8004a72:	d001      	beq.n	8004a78 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8004a74:	2301      	movs	r3, #1
 8004a76:	e02c      	b.n	8004ad2 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004a78:	88fb      	ldrh	r3, [r7, #6]
 8004a7a:	2b01      	cmp	r3, #1
 8004a7c:	d105      	bne.n	8004a8a <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004a7e:	893b      	ldrh	r3, [r7, #8]
 8004a80:	b2da      	uxtb	r2, r3
 8004a82:	68fb      	ldr	r3, [r7, #12]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	629a      	str	r2, [r3, #40]	@ 0x28
 8004a88:	e015      	b.n	8004ab6 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8004a8a:	893b      	ldrh	r3, [r7, #8]
 8004a8c:	0a1b      	lsrs	r3, r3, #8
 8004a8e:	b29b      	uxth	r3, r3
 8004a90:	b2da      	uxtb	r2, r3
 8004a92:	68fb      	ldr	r3, [r7, #12]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004a98:	69fa      	ldr	r2, [r7, #28]
 8004a9a:	69b9      	ldr	r1, [r7, #24]
 8004a9c:	68f8      	ldr	r0, [r7, #12]
 8004a9e:	f000 fd75 	bl	800558c <I2C_WaitOnTXISFlagUntilTimeout>
 8004aa2:	4603      	mov	r3, r0
 8004aa4:	2b00      	cmp	r3, #0
 8004aa6:	d001      	beq.n	8004aac <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8004aa8:	2301      	movs	r3, #1
 8004aaa:	e012      	b.n	8004ad2 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004aac:	893b      	ldrh	r3, [r7, #8]
 8004aae:	b2da      	uxtb	r2, r3
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8004ab6:	69fb      	ldr	r3, [r7, #28]
 8004ab8:	9300      	str	r3, [sp, #0]
 8004aba:	69bb      	ldr	r3, [r7, #24]
 8004abc:	2200      	movs	r2, #0
 8004abe:	2140      	movs	r1, #64	@ 0x40
 8004ac0:	68f8      	ldr	r0, [r7, #12]
 8004ac2:	f000 fd14 	bl	80054ee <I2C_WaitOnFlagUntilTimeout>
 8004ac6:	4603      	mov	r3, r0
 8004ac8:	2b00      	cmp	r3, #0
 8004aca:	d001      	beq.n	8004ad0 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8004acc:	2301      	movs	r3, #1
 8004ace:	e000      	b.n	8004ad2 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8004ad0:	2300      	movs	r3, #0
}
 8004ad2:	4618      	mov	r0, r3
 8004ad4:	3710      	adds	r7, #16
 8004ad6:	46bd      	mov	sp, r7
 8004ad8:	bd80      	pop	{r7, pc}
 8004ada:	bf00      	nop
 8004adc:	80002000 	.word	0x80002000

08004ae0 <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8004ae0:	b580      	push	{r7, lr}
 8004ae2:	b084      	sub	sp, #16
 8004ae4:	af00      	add	r7, sp, #0
 8004ae6:	6078      	str	r0, [r7, #4]
 8004ae8:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004af0:	b2db      	uxtb	r3, r3
 8004af2:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8004af6:	2b28      	cmp	r3, #40	@ 0x28
 8004af8:	d16a      	bne.n	8004bd0 <I2C_ITAddrCplt+0xf0>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	699b      	ldr	r3, [r3, #24]
 8004b00:	0c1b      	lsrs	r3, r3, #16
 8004b02:	b2db      	uxtb	r3, r3
 8004b04:	f003 0301 	and.w	r3, r3, #1
 8004b08:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	699b      	ldr	r3, [r3, #24]
 8004b10:	0c1b      	lsrs	r3, r3, #16
 8004b12:	b29b      	uxth	r3, r3
 8004b14:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 8004b18:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	689b      	ldr	r3, [r3, #8]
 8004b20:	b29b      	uxth	r3, r3
 8004b22:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004b26:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	68db      	ldr	r3, [r3, #12]
 8004b2e:	b29b      	uxth	r3, r3
 8004b30:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 8004b34:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	68db      	ldr	r3, [r3, #12]
 8004b3a:	2b02      	cmp	r3, #2
 8004b3c:	d138      	bne.n	8004bb0 <I2C_ITAddrCplt+0xd0>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 8004b3e:	897b      	ldrh	r3, [r7, #10]
 8004b40:	09db      	lsrs	r3, r3, #7
 8004b42:	b29a      	uxth	r2, r3
 8004b44:	89bb      	ldrh	r3, [r7, #12]
 8004b46:	4053      	eors	r3, r2
 8004b48:	b29b      	uxth	r3, r3
 8004b4a:	f003 0306 	and.w	r3, r3, #6
 8004b4e:	2b00      	cmp	r3, #0
 8004b50:	d11c      	bne.n	8004b8c <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 8004b52:	897b      	ldrh	r3, [r7, #10]
 8004b54:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004b5a:	1c5a      	adds	r2, r3, #1
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	649a      	str	r2, [r3, #72]	@ 0x48
        if (hi2c->AddrEventCount == 2U)
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004b64:	2b02      	cmp	r3, #2
 8004b66:	d13b      	bne.n	8004be0 <I2C_ITAddrCplt+0x100>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	2200      	movs	r2, #0
 8004b6c:	649a      	str	r2, [r3, #72]	@ 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	2208      	movs	r2, #8
 8004b74:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	2200      	movs	r2, #0
 8004b7a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8004b7e:	89ba      	ldrh	r2, [r7, #12]
 8004b80:	7bfb      	ldrb	r3, [r7, #15]
 8004b82:	4619      	mov	r1, r3
 8004b84:	6878      	ldr	r0, [r7, #4]
 8004b86:	f7ff faed 	bl	8004164 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8004b8a:	e029      	b.n	8004be0 <I2C_ITAddrCplt+0x100>
        slaveaddrcode = ownadd2code;
 8004b8c:	893b      	ldrh	r3, [r7, #8]
 8004b8e:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8004b90:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8004b94:	6878      	ldr	r0, [r7, #4]
 8004b96:	f000 ff19 	bl	80059cc <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	2200      	movs	r2, #0
 8004b9e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8004ba2:	89ba      	ldrh	r2, [r7, #12]
 8004ba4:	7bfb      	ldrb	r3, [r7, #15]
 8004ba6:	4619      	mov	r1, r3
 8004ba8:	6878      	ldr	r0, [r7, #4]
 8004baa:	f7ff fadb 	bl	8004164 <HAL_I2C_AddrCallback>
}
 8004bae:	e017      	b.n	8004be0 <I2C_ITAddrCplt+0x100>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8004bb0:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8004bb4:	6878      	ldr	r0, [r7, #4]
 8004bb6:	f000 ff09 	bl	80059cc <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	2200      	movs	r2, #0
 8004bbe:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8004bc2:	89ba      	ldrh	r2, [r7, #12]
 8004bc4:	7bfb      	ldrb	r3, [r7, #15]
 8004bc6:	4619      	mov	r1, r3
 8004bc8:	6878      	ldr	r0, [r7, #4]
 8004bca:	f7ff facb 	bl	8004164 <HAL_I2C_AddrCallback>
}
 8004bce:	e007      	b.n	8004be0 <I2C_ITAddrCplt+0x100>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	2208      	movs	r2, #8
 8004bd6:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	2200      	movs	r2, #0
 8004bdc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
}
 8004be0:	bf00      	nop
 8004be2:	3710      	adds	r7, #16
 8004be4:	46bd      	mov	sp, r7
 8004be6:	bd80      	pop	{r7, pc}

08004be8 <I2C_ITMasterSeqCplt>:
  * @brief  I2C Master sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITMasterSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8004be8:	b580      	push	{r7, lr}
 8004bea:	b082      	sub	sp, #8
 8004bec:	af00      	add	r7, sp, #0
 8004bee:	6078      	str	r0, [r7, #4]
  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	2200      	movs	r2, #0
 8004bf4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* No Generate Stop, to permit restart mode */
  /* The stop will be done at the end of transfer, when I2C_AUTOEND_MODE enable */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004bfe:	b2db      	uxtb	r3, r3
 8004c00:	2b21      	cmp	r3, #33	@ 0x21
 8004c02:	d115      	bne.n	8004c30 <I2C_ITMasterSeqCplt+0x48>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	2220      	movs	r2, #32
 8004c08:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	2211      	movs	r2, #17
 8004c10:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->XferISR       = NULL;
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	2200      	movs	r2, #0
 8004c16:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8004c18:	2101      	movs	r1, #1
 8004c1a:	6878      	ldr	r0, [r7, #4]
 8004c1c:	f000 fed6 	bl	80059cc <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	2200      	movs	r2, #0
 8004c24:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->MasterTxCpltCallback(hi2c);
#else
    HAL_I2C_MasterTxCpltCallback(hi2c);
 8004c28:	6878      	ldr	r0, [r7, #4]
 8004c2a:	f7ff fa73 	bl	8004114 <HAL_I2C_MasterTxCpltCallback>
    hi2c->MasterRxCpltCallback(hi2c);
#else
    HAL_I2C_MasterRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8004c2e:	e014      	b.n	8004c5a <I2C_ITMasterSeqCplt+0x72>
    hi2c->State         = HAL_I2C_STATE_READY;
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	2220      	movs	r2, #32
 8004c34:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	2212      	movs	r2, #18
 8004c3c:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->XferISR       = NULL;
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	2200      	movs	r2, #0
 8004c42:	635a      	str	r2, [r3, #52]	@ 0x34
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8004c44:	2102      	movs	r1, #2
 8004c46:	6878      	ldr	r0, [r7, #4]
 8004c48:	f000 fec0 	bl	80059cc <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	2200      	movs	r2, #0
 8004c50:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_MasterRxCpltCallback(hi2c);
 8004c54:	6878      	ldr	r0, [r7, #4]
 8004c56:	f7ff fa67 	bl	8004128 <HAL_I2C_MasterRxCpltCallback>
}
 8004c5a:	bf00      	nop
 8004c5c:	3708      	adds	r7, #8
 8004c5e:	46bd      	mov	sp, r7
 8004c60:	bd80      	pop	{r7, pc}

08004c62 <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8004c62:	b580      	push	{r7, lr}
 8004c64:	b084      	sub	sp, #16
 8004c66:	af00      	add	r7, sp, #0
 8004c68:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	2200      	movs	r2, #0
 8004c76:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8004c7a:	68fb      	ldr	r3, [r7, #12]
 8004c7c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004c80:	2b00      	cmp	r3, #0
 8004c82:	d008      	beq.n	8004c96 <I2C_ITSlaveSeqCplt+0x34>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	681a      	ldr	r2, [r3, #0]
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8004c92:	601a      	str	r2, [r3, #0]
 8004c94:	e00c      	b.n	8004cb0 <I2C_ITSlaveSeqCplt+0x4e>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8004c96:	68fb      	ldr	r3, [r7, #12]
 8004c98:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004c9c:	2b00      	cmp	r3, #0
 8004c9e:	d007      	beq.n	8004cb0 <I2C_ITSlaveSeqCplt+0x4e>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	681a      	ldr	r2, [r3, #0]
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8004cae:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004cb6:	b2db      	uxtb	r3, r3
 8004cb8:	2b29      	cmp	r3, #41	@ 0x29
 8004cba:	d112      	bne.n	8004ce2 <I2C_ITSlaveSeqCplt+0x80>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	2228      	movs	r2, #40	@ 0x28
 8004cc0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	2221      	movs	r2, #33	@ 0x21
 8004cc8:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8004cca:	2101      	movs	r1, #1
 8004ccc:	6878      	ldr	r0, [r7, #4]
 8004cce:	f000 fe7d 	bl	80059cc <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	2200      	movs	r2, #0
 8004cd6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8004cda:	6878      	ldr	r0, [r7, #4]
 8004cdc:	f7ff fa2e 	bl	800413c <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8004ce0:	e017      	b.n	8004d12 <I2C_ITSlaveSeqCplt+0xb0>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004ce8:	b2db      	uxtb	r3, r3
 8004cea:	2b2a      	cmp	r3, #42	@ 0x2a
 8004cec:	d111      	bne.n	8004d12 <I2C_ITSlaveSeqCplt+0xb0>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	2228      	movs	r2, #40	@ 0x28
 8004cf2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	2222      	movs	r2, #34	@ 0x22
 8004cfa:	631a      	str	r2, [r3, #48]	@ 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8004cfc:	2102      	movs	r1, #2
 8004cfe:	6878      	ldr	r0, [r7, #4]
 8004d00:	f000 fe64 	bl	80059cc <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	2200      	movs	r2, #0
 8004d08:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8004d0c:	6878      	ldr	r0, [r7, #4]
 8004d0e:	f7ff fa1f 	bl	8004150 <HAL_I2C_SlaveRxCpltCallback>
}
 8004d12:	bf00      	nop
 8004d14:	3710      	adds	r7, #16
 8004d16:	46bd      	mov	sp, r7
 8004d18:	bd80      	pop	{r7, pc}
	...

08004d1c <I2C_ITMasterCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITMasterCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8004d1c:	b580      	push	{r7, lr}
 8004d1e:	b086      	sub	sp, #24
 8004d20:	af00      	add	r7, sp, #0
 8004d22:	6078      	str	r0, [r7, #4]
 8004d24:	6039      	str	r1, [r7, #0]
  uint32_t tmperror;
  uint32_t tmpITFlags = ITFlags;
 8004d26:	683b      	ldr	r3, [r7, #0]
 8004d28:	617b      	str	r3, [r7, #20]
  __IO uint32_t tmpreg;

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	2220      	movs	r2, #32
 8004d30:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004d38:	b2db      	uxtb	r3, r3
 8004d3a:	2b21      	cmp	r3, #33	@ 0x21
 8004d3c:	d107      	bne.n	8004d4e <I2C_ITMasterCplt+0x32>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8004d3e:	2101      	movs	r1, #1
 8004d40:	6878      	ldr	r0, [r7, #4]
 8004d42:	f000 fe43 	bl	80059cc <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	2211      	movs	r2, #17
 8004d4a:	631a      	str	r2, [r3, #48]	@ 0x30
 8004d4c:	e00c      	b.n	8004d68 <I2C_ITMasterCplt+0x4c>
  }
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004d54:	b2db      	uxtb	r3, r3
 8004d56:	2b22      	cmp	r3, #34	@ 0x22
 8004d58:	d106      	bne.n	8004d68 <I2C_ITMasterCplt+0x4c>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8004d5a:	2102      	movs	r1, #2
 8004d5c:	6878      	ldr	r0, [r7, #4]
 8004d5e:	f000 fe35 	bl	80059cc <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	2212      	movs	r2, #18
 8004d66:	631a      	str	r2, [r3, #48]	@ 0x30
  {
    /* Do nothing */
  }

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	6859      	ldr	r1, [r3, #4]
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	681a      	ldr	r2, [r3, #0]
 8004d72:	4b4c      	ldr	r3, [pc, #304]	@ (8004ea4 <I2C_ITMasterCplt+0x188>)
 8004d74:	400b      	ands	r3, r1
 8004d76:	6053      	str	r3, [r2, #4]

  /* Reset handle parameters */
  hi2c->XferISR       = NULL;
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	2200      	movs	r2, #0
 8004d7c:	635a      	str	r2, [r3, #52]	@ 0x34
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	4a49      	ldr	r2, [pc, #292]	@ (8004ea8 <I2C_ITMasterCplt+0x18c>)
 8004d82:	62da      	str	r2, [r3, #44]	@ 0x2c

  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET)
 8004d84:	697b      	ldr	r3, [r7, #20]
 8004d86:	f003 0310 	and.w	r3, r3, #16
 8004d8a:	2b00      	cmp	r3, #0
 8004d8c:	d009      	beq.n	8004da2 <I2C_ITMasterCplt+0x86>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	2210      	movs	r2, #16
 8004d94:	61da      	str	r2, [r3, #28]

    /* Set acknowledge error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004d9a:	f043 0204 	orr.w	r2, r3, #4
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Fetch Last receive data if any */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) && (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET))
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004da8:	b2db      	uxtb	r3, r3
 8004daa:	2b60      	cmp	r3, #96	@ 0x60
 8004dac:	d10a      	bne.n	8004dc4 <I2C_ITMasterCplt+0xa8>
 8004dae:	697b      	ldr	r3, [r7, #20]
 8004db0:	f003 0304 	and.w	r3, r3, #4
 8004db4:	2b00      	cmp	r3, #0
 8004db6:	d005      	beq.n	8004dc4 <I2C_ITMasterCplt+0xa8>
  {
    /* Read data from RXDR */
    tmpreg = (uint8_t)hi2c->Instance->RXDR;
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004dbe:	b2db      	uxtb	r3, r3
 8004dc0:	60fb      	str	r3, [r7, #12]
    UNUSED(tmpreg);
 8004dc2:	68fb      	ldr	r3, [r7, #12]
  }

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8004dc4:	6878      	ldr	r0, [r7, #4]
 8004dc6:	f000 faee 	bl	80053a6 <I2C_Flush_TXDR>

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004dce:	613b      	str	r3, [r7, #16]

  /* Call the corresponding callback to inform upper layer of End of Transfer */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) || (tmperror != HAL_I2C_ERROR_NONE))
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004dd6:	b2db      	uxtb	r3, r3
 8004dd8:	2b60      	cmp	r3, #96	@ 0x60
 8004dda:	d002      	beq.n	8004de2 <I2C_ITMasterCplt+0xc6>
 8004ddc:	693b      	ldr	r3, [r7, #16]
 8004dde:	2b00      	cmp	r3, #0
 8004de0:	d006      	beq.n	8004df0 <I2C_ITMasterCplt+0xd4>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004de6:	4619      	mov	r1, r3
 8004de8:	6878      	ldr	r0, [r7, #4]
 8004dea:	f000 f9c5 	bl	8005178 <I2C_ITError>
  }
  else
  {
    /* Nothing to do */
  }
}
 8004dee:	e054      	b.n	8004e9a <I2C_ITMasterCplt+0x17e>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004df6:	b2db      	uxtb	r3, r3
 8004df8:	2b21      	cmp	r3, #33	@ 0x21
 8004dfa:	d124      	bne.n	8004e46 <I2C_ITMasterCplt+0x12a>
    hi2c->State = HAL_I2C_STATE_READY;
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	2220      	movs	r2, #32
 8004e00:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	2200      	movs	r2, #0
 8004e08:	631a      	str	r2, [r3, #48]	@ 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004e10:	b2db      	uxtb	r3, r3
 8004e12:	2b40      	cmp	r3, #64	@ 0x40
 8004e14:	d10b      	bne.n	8004e2e <I2C_ITMasterCplt+0x112>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	2200      	movs	r2, #0
 8004e1a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      __HAL_UNLOCK(hi2c);
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	2200      	movs	r2, #0
 8004e22:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_MemTxCpltCallback(hi2c);
 8004e26:	6878      	ldr	r0, [r7, #4]
 8004e28:	f7ff f9b4 	bl	8004194 <HAL_I2C_MemTxCpltCallback>
}
 8004e2c:	e035      	b.n	8004e9a <I2C_ITMasterCplt+0x17e>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	2200      	movs	r2, #0
 8004e32:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      __HAL_UNLOCK(hi2c);
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	2200      	movs	r2, #0
 8004e3a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8004e3e:	6878      	ldr	r0, [r7, #4]
 8004e40:	f7ff f968 	bl	8004114 <HAL_I2C_MasterTxCpltCallback>
}
 8004e44:	e029      	b.n	8004e9a <I2C_ITMasterCplt+0x17e>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004e4c:	b2db      	uxtb	r3, r3
 8004e4e:	2b22      	cmp	r3, #34	@ 0x22
 8004e50:	d123      	bne.n	8004e9a <I2C_ITMasterCplt+0x17e>
    hi2c->State = HAL_I2C_STATE_READY;
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	2220      	movs	r2, #32
 8004e56:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	2200      	movs	r2, #0
 8004e5e:	631a      	str	r2, [r3, #48]	@ 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004e66:	b2db      	uxtb	r3, r3
 8004e68:	2b40      	cmp	r3, #64	@ 0x40
 8004e6a:	d10b      	bne.n	8004e84 <I2C_ITMasterCplt+0x168>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	2200      	movs	r2, #0
 8004e70:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      __HAL_UNLOCK(hi2c);
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	2200      	movs	r2, #0
 8004e78:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_MemRxCpltCallback(hi2c);
 8004e7c:	6878      	ldr	r0, [r7, #4]
 8004e7e:	f7fd f9c3 	bl	8002208 <HAL_I2C_MemRxCpltCallback>
}
 8004e82:	e00a      	b.n	8004e9a <I2C_ITMasterCplt+0x17e>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	2200      	movs	r2, #0
 8004e88:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      __HAL_UNLOCK(hi2c);
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	2200      	movs	r2, #0
 8004e90:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8004e94:	6878      	ldr	r0, [r7, #4]
 8004e96:	f7ff f947 	bl	8004128 <HAL_I2C_MasterRxCpltCallback>
}
 8004e9a:	bf00      	nop
 8004e9c:	3718      	adds	r7, #24
 8004e9e:	46bd      	mov	sp, r7
 8004ea0:	bd80      	pop	{r7, pc}
 8004ea2:	bf00      	nop
 8004ea4:	fe00e800 	.word	0xfe00e800
 8004ea8:	ffff0000 	.word	0xffff0000

08004eac <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8004eac:	b580      	push	{r7, lr}
 8004eae:	b086      	sub	sp, #24
 8004eb0:	af00      	add	r7, sp, #0
 8004eb2:	6078      	str	r0, [r7, #4]
 8004eb4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 8004ebe:	683b      	ldr	r3, [r7, #0]
 8004ec0:	617b      	str	r3, [r7, #20]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004ec8:	73fb      	strb	r3, [r7, #15]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	2220      	movs	r2, #32
 8004ed0:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8004ed2:	7bfb      	ldrb	r3, [r7, #15]
 8004ed4:	2b21      	cmp	r3, #33	@ 0x21
 8004ed6:	d002      	beq.n	8004ede <I2C_ITSlaveCplt+0x32>
 8004ed8:	7bfb      	ldrb	r3, [r7, #15]
 8004eda:	2b29      	cmp	r3, #41	@ 0x29
 8004edc:	d108      	bne.n	8004ef0 <I2C_ITSlaveCplt+0x44>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 8004ede:	f248 0101 	movw	r1, #32769	@ 0x8001
 8004ee2:	6878      	ldr	r0, [r7, #4]
 8004ee4:	f000 fd72 	bl	80059cc <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	2221      	movs	r2, #33	@ 0x21
 8004eec:	631a      	str	r2, [r3, #48]	@ 0x30
 8004eee:	e019      	b.n	8004f24 <I2C_ITSlaveCplt+0x78>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8004ef0:	7bfb      	ldrb	r3, [r7, #15]
 8004ef2:	2b22      	cmp	r3, #34	@ 0x22
 8004ef4:	d002      	beq.n	8004efc <I2C_ITSlaveCplt+0x50>
 8004ef6:	7bfb      	ldrb	r3, [r7, #15]
 8004ef8:	2b2a      	cmp	r3, #42	@ 0x2a
 8004efa:	d108      	bne.n	8004f0e <I2C_ITSlaveCplt+0x62>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 8004efc:	f248 0102 	movw	r1, #32770	@ 0x8002
 8004f00:	6878      	ldr	r0, [r7, #4]
 8004f02:	f000 fd63 	bl	80059cc <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	2222      	movs	r2, #34	@ 0x22
 8004f0a:	631a      	str	r2, [r3, #48]	@ 0x30
 8004f0c:	e00a      	b.n	8004f24 <I2C_ITSlaveCplt+0x78>
  }
  else if (tmpstate == HAL_I2C_STATE_LISTEN)
 8004f0e:	7bfb      	ldrb	r3, [r7, #15]
 8004f10:	2b28      	cmp	r3, #40	@ 0x28
 8004f12:	d107      	bne.n	8004f24 <I2C_ITSlaveCplt+0x78>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT | I2C_XFER_RX_IT);
 8004f14:	f248 0103 	movw	r1, #32771	@ 0x8003
 8004f18:	6878      	ldr	r0, [r7, #4]
 8004f1a:	f000 fd57 	bl	80059cc <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_NONE;
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	2200      	movs	r2, #0
 8004f22:	631a      	str	r2, [r3, #48]	@ 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	685a      	ldr	r2, [r3, #4]
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004f32:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	6859      	ldr	r1, [r3, #4]
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	681a      	ldr	r2, [r3, #0]
 8004f3e:	4b62      	ldr	r3, [pc, #392]	@ (80050c8 <I2C_ITSlaveCplt+0x21c>)
 8004f40:	400b      	ands	r3, r1
 8004f42:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8004f44:	6878      	ldr	r0, [r7, #4]
 8004f46:	f000 fa2e 	bl	80053a6 <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8004f4a:	693b      	ldr	r3, [r7, #16]
 8004f4c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004f50:	2b00      	cmp	r3, #0
 8004f52:	d013      	beq.n	8004f7c <I2C_ITSlaveCplt+0xd0>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	681a      	ldr	r2, [r3, #0]
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8004f62:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004f68:	2b00      	cmp	r3, #0
 8004f6a:	d01f      	beq.n	8004fac <I2C_ITSlaveCplt+0x100>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	685b      	ldr	r3, [r3, #4]
 8004f74:	b29a      	uxth	r2, r3
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8004f7a:	e017      	b.n	8004fac <I2C_ITSlaveCplt+0x100>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8004f7c:	693b      	ldr	r3, [r7, #16]
 8004f7e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004f82:	2b00      	cmp	r3, #0
 8004f84:	d012      	beq.n	8004fac <I2C_ITSlaveCplt+0x100>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	681a      	ldr	r2, [r3, #0]
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8004f94:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004f9a:	2b00      	cmp	r3, #0
 8004f9c:	d006      	beq.n	8004fac <I2C_ITSlaveCplt+0x100>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	685b      	ldr	r3, [r3, #4]
 8004fa6:	b29a      	uxth	r2, r3
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	855a      	strh	r2, [r3, #42]	@ 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 8004fac:	697b      	ldr	r3, [r7, #20]
 8004fae:	f003 0304 	and.w	r3, r3, #4
 8004fb2:	2b00      	cmp	r3, #0
 8004fb4:	d020      	beq.n	8004ff8 <I2C_ITSlaveCplt+0x14c>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8004fb6:	697b      	ldr	r3, [r7, #20]
 8004fb8:	f023 0304 	bic.w	r3, r3, #4
 8004fbc:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004fc8:	b2d2      	uxtb	r2, r2
 8004fca:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004fd0:	1c5a      	adds	r2, r3, #1
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004fda:	2b00      	cmp	r3, #0
 8004fdc:	d00c      	beq.n	8004ff8 <I2C_ITSlaveCplt+0x14c>
    {
      hi2c->XferSize--;
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004fe2:	3b01      	subs	r3, #1
 8004fe4:	b29a      	uxth	r2, r3
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004fee:	b29b      	uxth	r3, r3
 8004ff0:	3b01      	subs	r3, #1
 8004ff2:	b29a      	uxth	r2, r3
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004ffc:	b29b      	uxth	r3, r3
 8004ffe:	2b00      	cmp	r3, #0
 8005000:	d005      	beq.n	800500e <I2C_ITSlaveCplt+0x162>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005006:	f043 0204 	orr.w	r2, r3, #4
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	2200      	movs	r2, #0
 8005012:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferISR = NULL;
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	2200      	movs	r2, #0
 800501a:	635a      	str	r2, [r3, #52]	@ 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005020:	2b00      	cmp	r3, #0
 8005022:	d010      	beq.n	8005046 <I2C_ITSlaveCplt+0x19a>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005028:	4619      	mov	r1, r3
 800502a:	6878      	ldr	r0, [r7, #4]
 800502c:	f000 f8a4 	bl	8005178 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005036:	b2db      	uxtb	r3, r3
 8005038:	2b28      	cmp	r3, #40	@ 0x28
 800503a:	d141      	bne.n	80050c0 <I2C_ITSlaveCplt+0x214>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 800503c:	6979      	ldr	r1, [r7, #20]
 800503e:	6878      	ldr	r0, [r7, #4]
 8005040:	f000 f846 	bl	80050d0 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8005044:	e03c      	b.n	80050c0 <I2C_ITSlaveCplt+0x214>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800504a:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800504e:	d014      	beq.n	800507a <I2C_ITSlaveCplt+0x1ce>
    I2C_ITSlaveSeqCplt(hi2c);
 8005050:	6878      	ldr	r0, [r7, #4]
 8005052:	f7ff fe06 	bl	8004c62 <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	4a1c      	ldr	r2, [pc, #112]	@ (80050cc <I2C_ITSlaveCplt+0x220>)
 800505a:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	2220      	movs	r2, #32
 8005060:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	2200      	movs	r2, #0
 8005068:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	2200      	movs	r2, #0
 800506e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 8005072:	6878      	ldr	r0, [r7, #4]
 8005074:	f7ff f884 	bl	8004180 <HAL_I2C_ListenCpltCallback>
}
 8005078:	e022      	b.n	80050c0 <I2C_ITSlaveCplt+0x214>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005080:	b2db      	uxtb	r3, r3
 8005082:	2b22      	cmp	r3, #34	@ 0x22
 8005084:	d10e      	bne.n	80050a4 <I2C_ITSlaveCplt+0x1f8>
    hi2c->State = HAL_I2C_STATE_READY;
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	2220      	movs	r2, #32
 800508a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	2200      	movs	r2, #0
 8005092:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	2200      	movs	r2, #0
 8005098:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 800509c:	6878      	ldr	r0, [r7, #4]
 800509e:	f7ff f857 	bl	8004150 <HAL_I2C_SlaveRxCpltCallback>
}
 80050a2:	e00d      	b.n	80050c0 <I2C_ITSlaveCplt+0x214>
    hi2c->State = HAL_I2C_STATE_READY;
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	2220      	movs	r2, #32
 80050a8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	2200      	movs	r2, #0
 80050b0:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	2200      	movs	r2, #0
 80050b6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 80050ba:	6878      	ldr	r0, [r7, #4]
 80050bc:	f7ff f83e 	bl	800413c <HAL_I2C_SlaveTxCpltCallback>
}
 80050c0:	bf00      	nop
 80050c2:	3718      	adds	r7, #24
 80050c4:	46bd      	mov	sp, r7
 80050c6:	bd80      	pop	{r7, pc}
 80050c8:	fe00e800 	.word	0xfe00e800
 80050cc:	ffff0000 	.word	0xffff0000

080050d0 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 80050d0:	b580      	push	{r7, lr}
 80050d2:	b082      	sub	sp, #8
 80050d4:	af00      	add	r7, sp, #0
 80050d6:	6078      	str	r0, [r7, #4]
 80050d8:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	4a25      	ldr	r2, [pc, #148]	@ (8005174 <I2C_ITListenCplt+0xa4>)
 80050de:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	2200      	movs	r2, #0
 80050e4:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	2220      	movs	r2, #32
 80050ea:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	2200      	movs	r2, #0
 80050f2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferISR = NULL;
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	2200      	movs	r2, #0
 80050fa:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 80050fc:	683b      	ldr	r3, [r7, #0]
 80050fe:	f003 0304 	and.w	r3, r3, #4
 8005102:	2b00      	cmp	r3, #0
 8005104:	d022      	beq.n	800514c <I2C_ITListenCplt+0x7c>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005110:	b2d2      	uxtb	r2, r2
 8005112:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005118:	1c5a      	adds	r2, r3, #1
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005122:	2b00      	cmp	r3, #0
 8005124:	d012      	beq.n	800514c <I2C_ITListenCplt+0x7c>
    {
      hi2c->XferSize--;
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800512a:	3b01      	subs	r3, #1
 800512c:	b29a      	uxth	r2, r3
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005136:	b29b      	uxth	r3, r3
 8005138:	3b01      	subs	r3, #1
 800513a:	b29a      	uxth	r2, r3
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005144:	f043 0204 	orr.w	r2, r3, #4
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	645a      	str	r2, [r3, #68]	@ 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 800514c:	f248 0103 	movw	r1, #32771	@ 0x8003
 8005150:	6878      	ldr	r0, [r7, #4]
 8005152:	f000 fc3b 	bl	80059cc <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	2210      	movs	r2, #16
 800515c:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	2200      	movs	r2, #0
 8005162:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 8005166:	6878      	ldr	r0, [r7, #4]
 8005168:	f7ff f80a 	bl	8004180 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 800516c:	bf00      	nop
 800516e:	3708      	adds	r7, #8
 8005170:	46bd      	mov	sp, r7
 8005172:	bd80      	pop	{r7, pc}
 8005174:	ffff0000 	.word	0xffff0000

08005178 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 8005178:	b580      	push	{r7, lr}
 800517a:	b084      	sub	sp, #16
 800517c:	af00      	add	r7, sp, #0
 800517e:	6078      	str	r0, [r7, #4]
 8005180:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005188:	73fb      	strb	r3, [r7, #15]

  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	2200      	movs	r2, #0
 800518e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	4a6d      	ldr	r2, [pc, #436]	@ (800534c <I2C_ITError+0x1d4>)
 8005196:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->XferCount     = 0U;
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	2200      	movs	r2, #0
 800519c:	855a      	strh	r2, [r3, #42]	@ 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80051a2:	683b      	ldr	r3, [r7, #0]
 80051a4:	431a      	orrs	r2, r3
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 80051aa:	7bfb      	ldrb	r3, [r7, #15]
 80051ac:	2b28      	cmp	r3, #40	@ 0x28
 80051ae:	d005      	beq.n	80051bc <I2C_ITError+0x44>
 80051b0:	7bfb      	ldrb	r3, [r7, #15]
 80051b2:	2b29      	cmp	r3, #41	@ 0x29
 80051b4:	d002      	beq.n	80051bc <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 80051b6:	7bfb      	ldrb	r3, [r7, #15]
 80051b8:	2b2a      	cmp	r3, #42	@ 0x2a
 80051ba:	d10b      	bne.n	80051d4 <I2C_ITError+0x5c>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 80051bc:	2103      	movs	r1, #3
 80051be:	6878      	ldr	r0, [r7, #4]
 80051c0:	f000 fc04 	bl	80059cc <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	2228      	movs	r2, #40	@ 0x28
 80051c8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	4a60      	ldr	r2, [pc, #384]	@ (8005350 <I2C_ITError+0x1d8>)
 80051d0:	635a      	str	r2, [r3, #52]	@ 0x34
 80051d2:	e030      	b.n	8005236 <I2C_ITError+0xbe>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 80051d4:	f248 0103 	movw	r1, #32771	@ 0x8003
 80051d8:	6878      	ldr	r0, [r7, #4]
 80051da:	f000 fbf7 	bl	80059cc <I2C_Disable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80051de:	6878      	ldr	r0, [r7, #4]
 80051e0:	f000 f8e1 	bl	80053a6 <I2C_Flush_TXDR>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80051ea:	b2db      	uxtb	r3, r3
 80051ec:	2b60      	cmp	r3, #96	@ 0x60
 80051ee:	d01f      	beq.n	8005230 <I2C_ITError+0xb8>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	2220      	movs	r2, #32
 80051f4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Check if a STOPF is detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	699b      	ldr	r3, [r3, #24]
 80051fe:	f003 0320 	and.w	r3, r3, #32
 8005202:	2b20      	cmp	r3, #32
 8005204:	d114      	bne.n	8005230 <I2C_ITError+0xb8>
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	699b      	ldr	r3, [r3, #24]
 800520c:	f003 0310 	and.w	r3, r3, #16
 8005210:	2b10      	cmp	r3, #16
 8005212:	d109      	bne.n	8005228 <I2C_ITError+0xb0>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	2210      	movs	r2, #16
 800521a:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005220:	f043 0204 	orr.w	r2, r3, #4
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	645a      	str	r2, [r3, #68]	@ 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	2220      	movs	r2, #32
 800522e:	61da      	str	r2, [r3, #28]
      }

    }
    hi2c->XferISR       = NULL;
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	2200      	movs	r2, #0
 8005234:	635a      	str	r2, [r3, #52]	@ 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800523a:	60bb      	str	r3, [r7, #8]

  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005240:	2b00      	cmp	r3, #0
 8005242:	d039      	beq.n	80052b8 <I2C_ITError+0x140>
 8005244:	68bb      	ldr	r3, [r7, #8]
 8005246:	2b11      	cmp	r3, #17
 8005248:	d002      	beq.n	8005250 <I2C_ITError+0xd8>
 800524a:	68bb      	ldr	r3, [r7, #8]
 800524c:	2b21      	cmp	r3, #33	@ 0x21
 800524e:	d133      	bne.n	80052b8 <I2C_ITError+0x140>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800525a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800525e:	d107      	bne.n	8005270 <I2C_ITError+0xf8>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	681a      	ldr	r2, [r3, #0]
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800526e:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005274:	4618      	mov	r0, r3
 8005276:	f7fe f9b7 	bl	80035e8 <HAL_DMA_GetState>
 800527a:	4603      	mov	r3, r0
 800527c:	2b01      	cmp	r3, #1
 800527e:	d017      	beq.n	80052b0 <I2C_ITError+0x138>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005284:	4a33      	ldr	r2, [pc, #204]	@ (8005354 <I2C_ITError+0x1dc>)
 8005286:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	2200      	movs	r2, #0
 800528c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005294:	4618      	mov	r0, r3
 8005296:	f7fe f8b7 	bl	8003408 <HAL_DMA_Abort_IT>
 800529a:	4603      	mov	r3, r0
 800529c:	2b00      	cmp	r3, #0
 800529e:	d04d      	beq.n	800533c <I2C_ITError+0x1c4>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80052a4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80052a6:	687a      	ldr	r2, [r7, #4]
 80052a8:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80052aa:	4610      	mov	r0, r2
 80052ac:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80052ae:	e045      	b.n	800533c <I2C_ITError+0x1c4>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 80052b0:	6878      	ldr	r0, [r7, #4]
 80052b2:	f000 f851 	bl	8005358 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80052b6:	e041      	b.n	800533c <I2C_ITError+0x1c4>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80052bc:	2b00      	cmp	r3, #0
 80052be:	d039      	beq.n	8005334 <I2C_ITError+0x1bc>
 80052c0:	68bb      	ldr	r3, [r7, #8]
 80052c2:	2b12      	cmp	r3, #18
 80052c4:	d002      	beq.n	80052cc <I2C_ITError+0x154>
 80052c6:	68bb      	ldr	r3, [r7, #8]
 80052c8:	2b22      	cmp	r3, #34	@ 0x22
 80052ca:	d133      	bne.n	8005334 <I2C_ITError+0x1bc>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80052d6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80052da:	d107      	bne.n	80052ec <I2C_ITError+0x174>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	681a      	ldr	r2, [r3, #0]
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80052ea:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80052f0:	4618      	mov	r0, r3
 80052f2:	f7fe f979 	bl	80035e8 <HAL_DMA_GetState>
 80052f6:	4603      	mov	r3, r0
 80052f8:	2b01      	cmp	r3, #1
 80052fa:	d017      	beq.n	800532c <I2C_ITError+0x1b4>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005300:	4a14      	ldr	r2, [pc, #80]	@ (8005354 <I2C_ITError+0x1dc>)
 8005302:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	2200      	movs	r2, #0
 8005308:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005310:	4618      	mov	r0, r3
 8005312:	f7fe f879 	bl	8003408 <HAL_DMA_Abort_IT>
 8005316:	4603      	mov	r3, r0
 8005318:	2b00      	cmp	r3, #0
 800531a:	d011      	beq.n	8005340 <I2C_ITError+0x1c8>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005320:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005322:	687a      	ldr	r2, [r7, #4]
 8005324:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8005326:	4610      	mov	r0, r2
 8005328:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800532a:	e009      	b.n	8005340 <I2C_ITError+0x1c8>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 800532c:	6878      	ldr	r0, [r7, #4]
 800532e:	f000 f813 	bl	8005358 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8005332:	e005      	b.n	8005340 <I2C_ITError+0x1c8>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 8005334:	6878      	ldr	r0, [r7, #4]
 8005336:	f000 f80f 	bl	8005358 <I2C_TreatErrorCallback>
  }
}
 800533a:	e002      	b.n	8005342 <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800533c:	bf00      	nop
 800533e:	e000      	b.n	8005342 <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8005340:	bf00      	nop
}
 8005342:	bf00      	nop
 8005344:	3710      	adds	r7, #16
 8005346:	46bd      	mov	sp, r7
 8005348:	bd80      	pop	{r7, pc}
 800534a:	bf00      	nop
 800534c:	ffff0000 	.word	0xffff0000
 8005350:	080041d1 	.word	0x080041d1
 8005354:	080054b3 	.word	0x080054b3

08005358 <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8005358:	b580      	push	{r7, lr}
 800535a:	b082      	sub	sp, #8
 800535c:	af00      	add	r7, sp, #0
 800535e:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005366:	b2db      	uxtb	r3, r3
 8005368:	2b60      	cmp	r3, #96	@ 0x60
 800536a:	d10e      	bne.n	800538a <I2C_TreatErrorCallback+0x32>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	2220      	movs	r2, #32
 8005370:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	2200      	movs	r2, #0
 8005378:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	2200      	movs	r2, #0
 800537e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8005382:	6878      	ldr	r0, [r7, #4]
 8005384:	f7fe ff1a 	bl	80041bc <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8005388:	e009      	b.n	800539e <I2C_TreatErrorCallback+0x46>
    hi2c->PreviousState = I2C_STATE_NONE;
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	2200      	movs	r2, #0
 800538e:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	2200      	movs	r2, #0
 8005394:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_ErrorCallback(hi2c);
 8005398:	6878      	ldr	r0, [r7, #4]
 800539a:	f7fe ff05 	bl	80041a8 <HAL_I2C_ErrorCallback>
}
 800539e:	bf00      	nop
 80053a0:	3708      	adds	r7, #8
 80053a2:	46bd      	mov	sp, r7
 80053a4:	bd80      	pop	{r7, pc}

080053a6 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80053a6:	b480      	push	{r7}
 80053a8:	b083      	sub	sp, #12
 80053aa:	af00      	add	r7, sp, #0
 80053ac:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	699b      	ldr	r3, [r3, #24]
 80053b4:	f003 0302 	and.w	r3, r3, #2
 80053b8:	2b02      	cmp	r3, #2
 80053ba:	d103      	bne.n	80053c4 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	2200      	movs	r2, #0
 80053c2:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	699b      	ldr	r3, [r3, #24]
 80053ca:	f003 0301 	and.w	r3, r3, #1
 80053ce:	2b01      	cmp	r3, #1
 80053d0:	d007      	beq.n	80053e2 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	699a      	ldr	r2, [r3, #24]
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	f042 0201 	orr.w	r2, r2, #1
 80053e0:	619a      	str	r2, [r3, #24]
  }
}
 80053e2:	bf00      	nop
 80053e4:	370c      	adds	r7, #12
 80053e6:	46bd      	mov	sp, r7
 80053e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053ec:	4770      	bx	lr

080053ee <I2C_DMAMasterReceiveCplt>:
  * @brief DMA I2C master receive process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAMasterReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80053ee:	b580      	push	{r7, lr}
 80053f0:	b084      	sub	sp, #16
 80053f2:	af00      	add	r7, sp, #0
 80053f4:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80053fa:	60fb      	str	r3, [r7, #12]

  /* Disable DMA Request */
  hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 80053fc:	68fb      	ldr	r3, [r7, #12]
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	681a      	ldr	r2, [r3, #0]
 8005402:	68fb      	ldr	r3, [r7, #12]
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800540a:	601a      	str	r2, [r3, #0]

  /* If last transfer, enable STOP interrupt */
  if (hi2c->XferCount == 0U)
 800540c:	68fb      	ldr	r3, [r7, #12]
 800540e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005410:	b29b      	uxth	r3, r3
 8005412:	2b00      	cmp	r3, #0
 8005414:	d104      	bne.n	8005420 <I2C_DMAMasterReceiveCplt+0x32>
  {
    /* Enable STOP interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 8005416:	2120      	movs	r1, #32
 8005418:	68f8      	ldr	r0, [r7, #12]
 800541a:	f000 fa53 	bl	80058c4 <I2C_Enable_IRQ>
    {
      /* Enable TC interrupts */
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
    }
  }
}
 800541e:	e02d      	b.n	800547c <I2C_DMAMasterReceiveCplt+0x8e>
    hi2c->pBuffPtr += hi2c->XferSize;
 8005420:	68fb      	ldr	r3, [r7, #12]
 8005422:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005424:	68fa      	ldr	r2, [r7, #12]
 8005426:	8d12      	ldrh	r2, [r2, #40]	@ 0x28
 8005428:	441a      	add	r2, r3
 800542a:	68fb      	ldr	r3, [r7, #12]
 800542c:	625a      	str	r2, [r3, #36]	@ 0x24
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800542e:	68fb      	ldr	r3, [r7, #12]
 8005430:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005432:	b29b      	uxth	r3, r3
 8005434:	2bff      	cmp	r3, #255	@ 0xff
 8005436:	d903      	bls.n	8005440 <I2C_DMAMasterReceiveCplt+0x52>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8005438:	68fb      	ldr	r3, [r7, #12]
 800543a:	22ff      	movs	r2, #255	@ 0xff
 800543c:	851a      	strh	r2, [r3, #40]	@ 0x28
 800543e:	e004      	b.n	800544a <I2C_DMAMasterReceiveCplt+0x5c>
      hi2c->XferSize = hi2c->XferCount;
 8005440:	68fb      	ldr	r3, [r7, #12]
 8005442:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005444:	b29a      	uxth	r2, r3
 8005446:	68fb      	ldr	r3, [r7, #12]
 8005448:	851a      	strh	r2, [r3, #40]	@ 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)hi2c->pBuffPtr,
 800544a:	68fb      	ldr	r3, [r7, #12]
 800544c:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 800544e:	68fb      	ldr	r3, [r7, #12]
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	3324      	adds	r3, #36	@ 0x24
 8005454:	4619      	mov	r1, r3
 8005456:	68fb      	ldr	r3, [r7, #12]
 8005458:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800545a:	461a      	mov	r2, r3
                         hi2c->XferSize) != HAL_OK)
 800545c:	68fb      	ldr	r3, [r7, #12]
 800545e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)hi2c->pBuffPtr,
 8005460:	f7fd ff34 	bl	80032cc <HAL_DMA_Start_IT>
 8005464:	4603      	mov	r3, r0
 8005466:	2b00      	cmp	r3, #0
 8005468:	d004      	beq.n	8005474 <I2C_DMAMasterReceiveCplt+0x86>
      I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 800546a:	2110      	movs	r1, #16
 800546c:	68f8      	ldr	r0, [r7, #12]
 800546e:	f7ff fe83 	bl	8005178 <I2C_ITError>
}
 8005472:	e003      	b.n	800547c <I2C_DMAMasterReceiveCplt+0x8e>
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
 8005474:	2140      	movs	r1, #64	@ 0x40
 8005476:	68f8      	ldr	r0, [r7, #12]
 8005478:	f000 fa24 	bl	80058c4 <I2C_Enable_IRQ>
}
 800547c:	bf00      	nop
 800547e:	3710      	adds	r7, #16
 8005480:	46bd      	mov	sp, r7
 8005482:	bd80      	pop	{r7, pc}

08005484 <I2C_DMAError>:
  * @brief  DMA I2C communication error callback.
  * @param hdma DMA handle
  * @retval None
  */
static void I2C_DMAError(DMA_HandleTypeDef *hdma)
{
 8005484:	b580      	push	{r7, lr}
 8005486:	b084      	sub	sp, #16
 8005488:	af00      	add	r7, sp, #0
 800548a:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005490:	60fb      	str	r3, [r7, #12]

  /* Disable Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8005492:	68fb      	ldr	r3, [r7, #12]
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	685a      	ldr	r2, [r3, #4]
 8005498:	68fb      	ldr	r3, [r7, #12]
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80054a0:	605a      	str	r2, [r3, #4]

  /* Call the corresponding callback to inform upper layer of End of Transfer */
  I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 80054a2:	2110      	movs	r1, #16
 80054a4:	68f8      	ldr	r0, [r7, #12]
 80054a6:	f7ff fe67 	bl	8005178 <I2C_ITError>
}
 80054aa:	bf00      	nop
 80054ac:	3710      	adds	r7, #16
 80054ae:	46bd      	mov	sp, r7
 80054b0:	bd80      	pop	{r7, pc}

080054b2 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 80054b2:	b580      	push	{r7, lr}
 80054b4:	b084      	sub	sp, #16
 80054b6:	af00      	add	r7, sp, #0
 80054b8:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80054be:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 80054c0:	68fb      	ldr	r3, [r7, #12]
 80054c2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80054c4:	2b00      	cmp	r3, #0
 80054c6:	d003      	beq.n	80054d0 <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 80054c8:	68fb      	ldr	r3, [r7, #12]
 80054ca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80054cc:	2200      	movs	r2, #0
 80054ce:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  if (hi2c->hdmarx != NULL)
 80054d0:	68fb      	ldr	r3, [r7, #12]
 80054d2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80054d4:	2b00      	cmp	r3, #0
 80054d6:	d003      	beq.n	80054e0 <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 80054d8:	68fb      	ldr	r3, [r7, #12]
 80054da:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80054dc:	2200      	movs	r2, #0
 80054de:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  I2C_TreatErrorCallback(hi2c);
 80054e0:	68f8      	ldr	r0, [r7, #12]
 80054e2:	f7ff ff39 	bl	8005358 <I2C_TreatErrorCallback>
}
 80054e6:	bf00      	nop
 80054e8:	3710      	adds	r7, #16
 80054ea:	46bd      	mov	sp, r7
 80054ec:	bd80      	pop	{r7, pc}

080054ee <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80054ee:	b580      	push	{r7, lr}
 80054f0:	b084      	sub	sp, #16
 80054f2:	af00      	add	r7, sp, #0
 80054f4:	60f8      	str	r0, [r7, #12]
 80054f6:	60b9      	str	r1, [r7, #8]
 80054f8:	603b      	str	r3, [r7, #0]
 80054fa:	4613      	mov	r3, r2
 80054fc:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80054fe:	e031      	b.n	8005564 <I2C_WaitOnFlagUntilTimeout+0x76>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005500:	683b      	ldr	r3, [r7, #0]
 8005502:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005506:	d02d      	beq.n	8005564 <I2C_WaitOnFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005508:	f7fd fd16 	bl	8002f38 <HAL_GetTick>
 800550c:	4602      	mov	r2, r0
 800550e:	69bb      	ldr	r3, [r7, #24]
 8005510:	1ad3      	subs	r3, r2, r3
 8005512:	683a      	ldr	r2, [r7, #0]
 8005514:	429a      	cmp	r2, r3
 8005516:	d302      	bcc.n	800551e <I2C_WaitOnFlagUntilTimeout+0x30>
 8005518:	683b      	ldr	r3, [r7, #0]
 800551a:	2b00      	cmp	r3, #0
 800551c:	d122      	bne.n	8005564 <I2C_WaitOnFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800551e:	68fb      	ldr	r3, [r7, #12]
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	699a      	ldr	r2, [r3, #24]
 8005524:	68bb      	ldr	r3, [r7, #8]
 8005526:	4013      	ands	r3, r2
 8005528:	68ba      	ldr	r2, [r7, #8]
 800552a:	429a      	cmp	r2, r3
 800552c:	bf0c      	ite	eq
 800552e:	2301      	moveq	r3, #1
 8005530:	2300      	movne	r3, #0
 8005532:	b2db      	uxtb	r3, r3
 8005534:	461a      	mov	r2, r3
 8005536:	79fb      	ldrb	r3, [r7, #7]
 8005538:	429a      	cmp	r2, r3
 800553a:	d113      	bne.n	8005564 <I2C_WaitOnFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800553c:	68fb      	ldr	r3, [r7, #12]
 800553e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005540:	f043 0220 	orr.w	r2, r3, #32
 8005544:	68fb      	ldr	r3, [r7, #12]
 8005546:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8005548:	68fb      	ldr	r3, [r7, #12]
 800554a:	2220      	movs	r2, #32
 800554c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8005550:	68fb      	ldr	r3, [r7, #12]
 8005552:	2200      	movs	r2, #0
 8005554:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005558:	68fb      	ldr	r3, [r7, #12]
 800555a:	2200      	movs	r2, #0
 800555c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 8005560:	2301      	movs	r3, #1
 8005562:	e00f      	b.n	8005584 <I2C_WaitOnFlagUntilTimeout+0x96>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005564:	68fb      	ldr	r3, [r7, #12]
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	699a      	ldr	r2, [r3, #24]
 800556a:	68bb      	ldr	r3, [r7, #8]
 800556c:	4013      	ands	r3, r2
 800556e:	68ba      	ldr	r2, [r7, #8]
 8005570:	429a      	cmp	r2, r3
 8005572:	bf0c      	ite	eq
 8005574:	2301      	moveq	r3, #1
 8005576:	2300      	movne	r3, #0
 8005578:	b2db      	uxtb	r3, r3
 800557a:	461a      	mov	r2, r3
 800557c:	79fb      	ldrb	r3, [r7, #7]
 800557e:	429a      	cmp	r2, r3
 8005580:	d0be      	beq.n	8005500 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005582:	2300      	movs	r3, #0
}
 8005584:	4618      	mov	r0, r3
 8005586:	3710      	adds	r7, #16
 8005588:	46bd      	mov	sp, r7
 800558a:	bd80      	pop	{r7, pc}

0800558c <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800558c:	b580      	push	{r7, lr}
 800558e:	b084      	sub	sp, #16
 8005590:	af00      	add	r7, sp, #0
 8005592:	60f8      	str	r0, [r7, #12]
 8005594:	60b9      	str	r1, [r7, #8]
 8005596:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8005598:	e033      	b.n	8005602 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800559a:	687a      	ldr	r2, [r7, #4]
 800559c:	68b9      	ldr	r1, [r7, #8]
 800559e:	68f8      	ldr	r0, [r7, #12]
 80055a0:	f000 f87e 	bl	80056a0 <I2C_IsErrorOccurred>
 80055a4:	4603      	mov	r3, r0
 80055a6:	2b00      	cmp	r3, #0
 80055a8:	d001      	beq.n	80055ae <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80055aa:	2301      	movs	r3, #1
 80055ac:	e031      	b.n	8005612 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80055ae:	68bb      	ldr	r3, [r7, #8]
 80055b0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80055b4:	d025      	beq.n	8005602 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80055b6:	f7fd fcbf 	bl	8002f38 <HAL_GetTick>
 80055ba:	4602      	mov	r2, r0
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	1ad3      	subs	r3, r2, r3
 80055c0:	68ba      	ldr	r2, [r7, #8]
 80055c2:	429a      	cmp	r2, r3
 80055c4:	d302      	bcc.n	80055cc <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80055c6:	68bb      	ldr	r3, [r7, #8]
 80055c8:	2b00      	cmp	r3, #0
 80055ca:	d11a      	bne.n	8005602 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 80055cc:	68fb      	ldr	r3, [r7, #12]
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	699b      	ldr	r3, [r3, #24]
 80055d2:	f003 0302 	and.w	r3, r3, #2
 80055d6:	2b02      	cmp	r3, #2
 80055d8:	d013      	beq.n	8005602 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80055da:	68fb      	ldr	r3, [r7, #12]
 80055dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80055de:	f043 0220 	orr.w	r2, r3, #32
 80055e2:	68fb      	ldr	r3, [r7, #12]
 80055e4:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80055e6:	68fb      	ldr	r3, [r7, #12]
 80055e8:	2220      	movs	r2, #32
 80055ea:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80055ee:	68fb      	ldr	r3, [r7, #12]
 80055f0:	2200      	movs	r2, #0
 80055f2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80055f6:	68fb      	ldr	r3, [r7, #12]
 80055f8:	2200      	movs	r2, #0
 80055fa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 80055fe:	2301      	movs	r3, #1
 8005600:	e007      	b.n	8005612 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8005602:	68fb      	ldr	r3, [r7, #12]
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	699b      	ldr	r3, [r3, #24]
 8005608:	f003 0302 	and.w	r3, r3, #2
 800560c:	2b02      	cmp	r3, #2
 800560e:	d1c4      	bne.n	800559a <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8005610:	2300      	movs	r3, #0
}
 8005612:	4618      	mov	r0, r3
 8005614:	3710      	adds	r7, #16
 8005616:	46bd      	mov	sp, r7
 8005618:	bd80      	pop	{r7, pc}

0800561a <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800561a:	b580      	push	{r7, lr}
 800561c:	b084      	sub	sp, #16
 800561e:	af00      	add	r7, sp, #0
 8005620:	60f8      	str	r0, [r7, #12]
 8005622:	60b9      	str	r1, [r7, #8]
 8005624:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005626:	e02f      	b.n	8005688 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8005628:	687a      	ldr	r2, [r7, #4]
 800562a:	68b9      	ldr	r1, [r7, #8]
 800562c:	68f8      	ldr	r0, [r7, #12]
 800562e:	f000 f837 	bl	80056a0 <I2C_IsErrorOccurred>
 8005632:	4603      	mov	r3, r0
 8005634:	2b00      	cmp	r3, #0
 8005636:	d001      	beq.n	800563c <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8005638:	2301      	movs	r3, #1
 800563a:	e02d      	b.n	8005698 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800563c:	f7fd fc7c 	bl	8002f38 <HAL_GetTick>
 8005640:	4602      	mov	r2, r0
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	1ad3      	subs	r3, r2, r3
 8005646:	68ba      	ldr	r2, [r7, #8]
 8005648:	429a      	cmp	r2, r3
 800564a:	d302      	bcc.n	8005652 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800564c:	68bb      	ldr	r3, [r7, #8]
 800564e:	2b00      	cmp	r3, #0
 8005650:	d11a      	bne.n	8005688 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8005652:	68fb      	ldr	r3, [r7, #12]
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	699b      	ldr	r3, [r3, #24]
 8005658:	f003 0320 	and.w	r3, r3, #32
 800565c:	2b20      	cmp	r3, #32
 800565e:	d013      	beq.n	8005688 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005660:	68fb      	ldr	r3, [r7, #12]
 8005662:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005664:	f043 0220 	orr.w	r2, r3, #32
 8005668:	68fb      	ldr	r3, [r7, #12]
 800566a:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800566c:	68fb      	ldr	r3, [r7, #12]
 800566e:	2220      	movs	r2, #32
 8005670:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005674:	68fb      	ldr	r3, [r7, #12]
 8005676:	2200      	movs	r2, #0
 8005678:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800567c:	68fb      	ldr	r3, [r7, #12]
 800567e:	2200      	movs	r2, #0
 8005680:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8005684:	2301      	movs	r3, #1
 8005686:	e007      	b.n	8005698 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005688:	68fb      	ldr	r3, [r7, #12]
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	699b      	ldr	r3, [r3, #24]
 800568e:	f003 0320 	and.w	r3, r3, #32
 8005692:	2b20      	cmp	r3, #32
 8005694:	d1c8      	bne.n	8005628 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005696:	2300      	movs	r3, #0
}
 8005698:	4618      	mov	r0, r3
 800569a:	3710      	adds	r7, #16
 800569c:	46bd      	mov	sp, r7
 800569e:	bd80      	pop	{r7, pc}

080056a0 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80056a0:	b580      	push	{r7, lr}
 80056a2:	b08a      	sub	sp, #40	@ 0x28
 80056a4:	af00      	add	r7, sp, #0
 80056a6:	60f8      	str	r0, [r7, #12]
 80056a8:	60b9      	str	r1, [r7, #8]
 80056aa:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80056ac:	2300      	movs	r3, #0
 80056ae:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 80056b2:	68fb      	ldr	r3, [r7, #12]
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	699b      	ldr	r3, [r3, #24]
 80056b8:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 80056ba:	2300      	movs	r3, #0
 80056bc:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80056c2:	69bb      	ldr	r3, [r7, #24]
 80056c4:	f003 0310 	and.w	r3, r3, #16
 80056c8:	2b00      	cmp	r3, #0
 80056ca:	d068      	beq.n	800579e <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80056cc:	68fb      	ldr	r3, [r7, #12]
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	2210      	movs	r2, #16
 80056d2:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80056d4:	e049      	b.n	800576a <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80056d6:	68bb      	ldr	r3, [r7, #8]
 80056d8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80056dc:	d045      	beq.n	800576a <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80056de:	f7fd fc2b 	bl	8002f38 <HAL_GetTick>
 80056e2:	4602      	mov	r2, r0
 80056e4:	69fb      	ldr	r3, [r7, #28]
 80056e6:	1ad3      	subs	r3, r2, r3
 80056e8:	68ba      	ldr	r2, [r7, #8]
 80056ea:	429a      	cmp	r2, r3
 80056ec:	d302      	bcc.n	80056f4 <I2C_IsErrorOccurred+0x54>
 80056ee:	68bb      	ldr	r3, [r7, #8]
 80056f0:	2b00      	cmp	r3, #0
 80056f2:	d13a      	bne.n	800576a <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80056f4:	68fb      	ldr	r3, [r7, #12]
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	685b      	ldr	r3, [r3, #4]
 80056fa:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80056fe:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8005700:	68fb      	ldr	r3, [r7, #12]
 8005702:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8005706:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8005708:	68fb      	ldr	r3, [r7, #12]
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	699b      	ldr	r3, [r3, #24]
 800570e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005712:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005716:	d121      	bne.n	800575c <I2C_IsErrorOccurred+0xbc>
 8005718:	697b      	ldr	r3, [r7, #20]
 800571a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800571e:	d01d      	beq.n	800575c <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8005720:	7cfb      	ldrb	r3, [r7, #19]
 8005722:	2b20      	cmp	r3, #32
 8005724:	d01a      	beq.n	800575c <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8005726:	68fb      	ldr	r3, [r7, #12]
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	685a      	ldr	r2, [r3, #4]
 800572c:	68fb      	ldr	r3, [r7, #12]
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005734:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8005736:	f7fd fbff 	bl	8002f38 <HAL_GetTick>
 800573a:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800573c:	e00e      	b.n	800575c <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800573e:	f7fd fbfb 	bl	8002f38 <HAL_GetTick>
 8005742:	4602      	mov	r2, r0
 8005744:	69fb      	ldr	r3, [r7, #28]
 8005746:	1ad3      	subs	r3, r2, r3
 8005748:	2b19      	cmp	r3, #25
 800574a:	d907      	bls.n	800575c <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 800574c:	6a3b      	ldr	r3, [r7, #32]
 800574e:	f043 0320 	orr.w	r3, r3, #32
 8005752:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8005754:	2301      	movs	r3, #1
 8005756:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 800575a:	e006      	b.n	800576a <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800575c:	68fb      	ldr	r3, [r7, #12]
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	699b      	ldr	r3, [r3, #24]
 8005762:	f003 0320 	and.w	r3, r3, #32
 8005766:	2b20      	cmp	r3, #32
 8005768:	d1e9      	bne.n	800573e <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800576a:	68fb      	ldr	r3, [r7, #12]
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	699b      	ldr	r3, [r3, #24]
 8005770:	f003 0320 	and.w	r3, r3, #32
 8005774:	2b20      	cmp	r3, #32
 8005776:	d003      	beq.n	8005780 <I2C_IsErrorOccurred+0xe0>
 8005778:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800577c:	2b00      	cmp	r3, #0
 800577e:	d0aa      	beq.n	80056d6 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8005780:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005784:	2b00      	cmp	r3, #0
 8005786:	d103      	bne.n	8005790 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005788:	68fb      	ldr	r3, [r7, #12]
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	2220      	movs	r2, #32
 800578e:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8005790:	6a3b      	ldr	r3, [r7, #32]
 8005792:	f043 0304 	orr.w	r3, r3, #4
 8005796:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8005798:	2301      	movs	r3, #1
 800579a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 800579e:	68fb      	ldr	r3, [r7, #12]
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	699b      	ldr	r3, [r3, #24]
 80057a4:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80057a6:	69bb      	ldr	r3, [r7, #24]
 80057a8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80057ac:	2b00      	cmp	r3, #0
 80057ae:	d00b      	beq.n	80057c8 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 80057b0:	6a3b      	ldr	r3, [r7, #32]
 80057b2:	f043 0301 	orr.w	r3, r3, #1
 80057b6:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80057b8:	68fb      	ldr	r3, [r7, #12]
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80057c0:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80057c2:	2301      	movs	r3, #1
 80057c4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80057c8:	69bb      	ldr	r3, [r7, #24]
 80057ca:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80057ce:	2b00      	cmp	r3, #0
 80057d0:	d00b      	beq.n	80057ea <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 80057d2:	6a3b      	ldr	r3, [r7, #32]
 80057d4:	f043 0308 	orr.w	r3, r3, #8
 80057d8:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80057da:	68fb      	ldr	r3, [r7, #12]
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80057e2:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80057e4:	2301      	movs	r3, #1
 80057e6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80057ea:	69bb      	ldr	r3, [r7, #24]
 80057ec:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80057f0:	2b00      	cmp	r3, #0
 80057f2:	d00b      	beq.n	800580c <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 80057f4:	6a3b      	ldr	r3, [r7, #32]
 80057f6:	f043 0302 	orr.w	r3, r3, #2
 80057fa:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80057fc:	68fb      	ldr	r3, [r7, #12]
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005804:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8005806:	2301      	movs	r3, #1
 8005808:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 800580c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005810:	2b00      	cmp	r3, #0
 8005812:	d01c      	beq.n	800584e <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8005814:	68f8      	ldr	r0, [r7, #12]
 8005816:	f7ff fdc6 	bl	80053a6 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800581a:	68fb      	ldr	r3, [r7, #12]
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	6859      	ldr	r1, [r3, #4]
 8005820:	68fb      	ldr	r3, [r7, #12]
 8005822:	681a      	ldr	r2, [r3, #0]
 8005824:	4b0d      	ldr	r3, [pc, #52]	@ (800585c <I2C_IsErrorOccurred+0x1bc>)
 8005826:	400b      	ands	r3, r1
 8005828:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 800582a:	68fb      	ldr	r3, [r7, #12]
 800582c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800582e:	6a3b      	ldr	r3, [r7, #32]
 8005830:	431a      	orrs	r2, r3
 8005832:	68fb      	ldr	r3, [r7, #12]
 8005834:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8005836:	68fb      	ldr	r3, [r7, #12]
 8005838:	2220      	movs	r2, #32
 800583a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800583e:	68fb      	ldr	r3, [r7, #12]
 8005840:	2200      	movs	r2, #0
 8005842:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005846:	68fb      	ldr	r3, [r7, #12]
 8005848:	2200      	movs	r2, #0
 800584a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 800584e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8005852:	4618      	mov	r0, r3
 8005854:	3728      	adds	r7, #40	@ 0x28
 8005856:	46bd      	mov	sp, r7
 8005858:	bd80      	pop	{r7, pc}
 800585a:	bf00      	nop
 800585c:	fe00e800 	.word	0xfe00e800

08005860 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8005860:	b480      	push	{r7}
 8005862:	b087      	sub	sp, #28
 8005864:	af00      	add	r7, sp, #0
 8005866:	60f8      	str	r0, [r7, #12]
 8005868:	607b      	str	r3, [r7, #4]
 800586a:	460b      	mov	r3, r1
 800586c:	817b      	strh	r3, [r7, #10]
 800586e:	4613      	mov	r3, r2
 8005870:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8005872:	897b      	ldrh	r3, [r7, #10]
 8005874:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8005878:	7a7b      	ldrb	r3, [r7, #9]
 800587a:	041b      	lsls	r3, r3, #16
 800587c:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8005880:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8005886:	6a3b      	ldr	r3, [r7, #32]
 8005888:	4313      	orrs	r3, r2
 800588a:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800588e:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8005890:	68fb      	ldr	r3, [r7, #12]
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	685a      	ldr	r2, [r3, #4]
 8005896:	6a3b      	ldr	r3, [r7, #32]
 8005898:	0d5b      	lsrs	r3, r3, #21
 800589a:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 800589e:	4b08      	ldr	r3, [pc, #32]	@ (80058c0 <I2C_TransferConfig+0x60>)
 80058a0:	430b      	orrs	r3, r1
 80058a2:	43db      	mvns	r3, r3
 80058a4:	ea02 0103 	and.w	r1, r2, r3
 80058a8:	68fb      	ldr	r3, [r7, #12]
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	697a      	ldr	r2, [r7, #20]
 80058ae:	430a      	orrs	r2, r1
 80058b0:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80058b2:	bf00      	nop
 80058b4:	371c      	adds	r7, #28
 80058b6:	46bd      	mov	sp, r7
 80058b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058bc:	4770      	bx	lr
 80058be:	bf00      	nop
 80058c0:	03ff63ff 	.word	0x03ff63ff

080058c4 <I2C_Enable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Enable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 80058c4:	b480      	push	{r7}
 80058c6:	b085      	sub	sp, #20
 80058c8:	af00      	add	r7, sp, #0
 80058ca:	6078      	str	r0, [r7, #4]
 80058cc:	460b      	mov	r3, r1
 80058ce:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 80058d0:	2300      	movs	r3, #0
 80058d2:	60fb      	str	r3, [r7, #12]

  if ((hi2c->XferISR != I2C_Master_ISR_DMA) && \
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80058d8:	4a39      	ldr	r2, [pc, #228]	@ (80059c0 <I2C_Enable_IRQ+0xfc>)
 80058da:	4293      	cmp	r3, r2
 80058dc:	d032      	beq.n	8005944 <I2C_Enable_IRQ+0x80>
      (hi2c->XferISR != I2C_Slave_ISR_DMA) && \
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
  if ((hi2c->XferISR != I2C_Master_ISR_DMA) && \
 80058e2:	4a38      	ldr	r2, [pc, #224]	@ (80059c4 <I2C_Enable_IRQ+0x100>)
 80058e4:	4293      	cmp	r3, r2
 80058e6:	d02d      	beq.n	8005944 <I2C_Enable_IRQ+0x80>
      (hi2c->XferISR != I2C_Mem_ISR_DMA))
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
      (hi2c->XferISR != I2C_Slave_ISR_DMA) && \
 80058ec:	4a36      	ldr	r2, [pc, #216]	@ (80059c8 <I2C_Enable_IRQ+0x104>)
 80058ee:	4293      	cmp	r3, r2
 80058f0:	d028      	beq.n	8005944 <I2C_Enable_IRQ+0x80>
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 80058f2:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80058f6:	2b00      	cmp	r3, #0
 80058f8:	da03      	bge.n	8005902 <I2C_Enable_IRQ+0x3e>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80058fa:	68fb      	ldr	r3, [r7, #12]
 80058fc:	f043 03b8 	orr.w	r3, r3, #184	@ 0xb8
 8005900:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8005902:	887b      	ldrh	r3, [r7, #2]
 8005904:	f003 0301 	and.w	r3, r3, #1
 8005908:	2b00      	cmp	r3, #0
 800590a:	d003      	beq.n	8005914 <I2C_Enable_IRQ+0x50>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 800590c:	68fb      	ldr	r3, [r7, #12]
 800590e:	f043 03f2 	orr.w	r3, r3, #242	@ 0xf2
 8005912:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8005914:	887b      	ldrh	r3, [r7, #2]
 8005916:	f003 0302 	and.w	r3, r3, #2
 800591a:	2b00      	cmp	r3, #0
 800591c:	d003      	beq.n	8005926 <I2C_Enable_IRQ+0x62>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 800591e:	68fb      	ldr	r3, [r7, #12]
 8005920:	f043 03f4 	orr.w	r3, r3, #244	@ 0xf4
 8005924:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 8005926:	887b      	ldrh	r3, [r7, #2]
 8005928:	2b10      	cmp	r3, #16
 800592a:	d103      	bne.n	8005934 <I2C_Enable_IRQ+0x70>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 800592c:	68fb      	ldr	r3, [r7, #12]
 800592e:	f043 0390 	orr.w	r3, r3, #144	@ 0x90
 8005932:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 8005934:	887b      	ldrh	r3, [r7, #2]
 8005936:	2b20      	cmp	r3, #32
 8005938:	d133      	bne.n	80059a2 <I2C_Enable_IRQ+0xde>
    {
      /* Enable STOP interrupts */
      tmpisr |= I2C_IT_STOPI;
 800593a:	68fb      	ldr	r3, [r7, #12]
 800593c:	f043 0320 	orr.w	r3, r3, #32
 8005940:	60fb      	str	r3, [r7, #12]
    if (InterruptRequest == I2C_XFER_CPLT_IT)
 8005942:	e02e      	b.n	80059a2 <I2C_Enable_IRQ+0xde>
    }
  }

  else
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8005944:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8005948:	2b00      	cmp	r3, #0
 800594a:	da03      	bge.n	8005954 <I2C_Enable_IRQ+0x90>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800594c:	68fb      	ldr	r3, [r7, #12]
 800594e:	f043 03b8 	orr.w	r3, r3, #184	@ 0xb8
 8005952:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8005954:	887b      	ldrh	r3, [r7, #2]
 8005956:	f003 0301 	and.w	r3, r3, #1
 800595a:	2b00      	cmp	r3, #0
 800595c:	d003      	beq.n	8005966 <I2C_Enable_IRQ+0xa2>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 800595e:	68fb      	ldr	r3, [r7, #12]
 8005960:	f043 03f2 	orr.w	r3, r3, #242	@ 0xf2
 8005964:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8005966:	887b      	ldrh	r3, [r7, #2]
 8005968:	f003 0302 	and.w	r3, r3, #2
 800596c:	2b00      	cmp	r3, #0
 800596e:	d003      	beq.n	8005978 <I2C_Enable_IRQ+0xb4>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 8005970:	68fb      	ldr	r3, [r7, #12]
 8005972:	f043 03f4 	orr.w	r3, r3, #244	@ 0xf4
 8005976:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 8005978:	887b      	ldrh	r3, [r7, #2]
 800597a:	2b10      	cmp	r3, #16
 800597c:	d103      	bne.n	8005986 <I2C_Enable_IRQ+0xc2>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 800597e:	68fb      	ldr	r3, [r7, #12]
 8005980:	f043 0390 	orr.w	r3, r3, #144	@ 0x90
 8005984:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 8005986:	887b      	ldrh	r3, [r7, #2]
 8005988:	2b20      	cmp	r3, #32
 800598a:	d103      	bne.n	8005994 <I2C_Enable_IRQ+0xd0>
    {
      /* Enable STOP interrupts */
      tmpisr |= (I2C_IT_STOPI | I2C_IT_TCI);
 800598c:	68fb      	ldr	r3, [r7, #12]
 800598e:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8005992:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8005994:	887b      	ldrh	r3, [r7, #2]
 8005996:	2b40      	cmp	r3, #64	@ 0x40
 8005998:	d103      	bne.n	80059a2 <I2C_Enable_IRQ+0xde>
    {
      /* Enable TC interrupts */
      tmpisr |= I2C_IT_TCI;
 800599a:	68fb      	ldr	r3, [r7, #12]
 800599c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80059a0:	60fb      	str	r3, [r7, #12]
  }

  /* Enable interrupts only at the end */
  /* to avoid the risk of I2C interrupt handle execution before */
  /* all interrupts requested done */
  __HAL_I2C_ENABLE_IT(hi2c, tmpisr);
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	6819      	ldr	r1, [r3, #0]
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	68fa      	ldr	r2, [r7, #12]
 80059ae:	430a      	orrs	r2, r1
 80059b0:	601a      	str	r2, [r3, #0]
}
 80059b2:	bf00      	nop
 80059b4:	3714      	adds	r7, #20
 80059b6:	46bd      	mov	sp, r7
 80059b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059bc:	4770      	bx	lr
 80059be:	bf00      	nop
 80059c0:	080043c1 	.word	0x080043c1
 80059c4:	080047e5 	.word	0x080047e5
 80059c8:	08004599 	.word	0x08004599

080059cc <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 80059cc:	b480      	push	{r7}
 80059ce:	b085      	sub	sp, #20
 80059d0:	af00      	add	r7, sp, #0
 80059d2:	6078      	str	r0, [r7, #4]
 80059d4:	460b      	mov	r3, r1
 80059d6:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 80059d8:	2300      	movs	r3, #0
 80059da:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 80059dc:	887b      	ldrh	r3, [r7, #2]
 80059de:	f003 0301 	and.w	r3, r3, #1
 80059e2:	2b00      	cmp	r3, #0
 80059e4:	d00f      	beq.n	8005a06 <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 80059e6:	68fb      	ldr	r3, [r7, #12]
 80059e8:	f043 0342 	orr.w	r3, r3, #66	@ 0x42
 80059ec:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80059f4:	b2db      	uxtb	r3, r3
 80059f6:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 80059fa:	2b28      	cmp	r3, #40	@ 0x28
 80059fc:	d003      	beq.n	8005a06 <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80059fe:	68fb      	ldr	r3, [r7, #12]
 8005a00:	f043 03b0 	orr.w	r3, r3, #176	@ 0xb0
 8005a04:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8005a06:	887b      	ldrh	r3, [r7, #2]
 8005a08:	f003 0302 	and.w	r3, r3, #2
 8005a0c:	2b00      	cmp	r3, #0
 8005a0e:	d00f      	beq.n	8005a30 <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 8005a10:	68fb      	ldr	r3, [r7, #12]
 8005a12:	f043 0344 	orr.w	r3, r3, #68	@ 0x44
 8005a16:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005a1e:	b2db      	uxtb	r3, r3
 8005a20:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8005a24:	2b28      	cmp	r3, #40	@ 0x28
 8005a26:	d003      	beq.n	8005a30 <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8005a28:	68fb      	ldr	r3, [r7, #12]
 8005a2a:	f043 03b0 	orr.w	r3, r3, #176	@ 0xb0
 8005a2e:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8005a30:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8005a34:	2b00      	cmp	r3, #0
 8005a36:	da03      	bge.n	8005a40 <I2C_Disable_IRQ+0x74>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8005a38:	68fb      	ldr	r3, [r7, #12]
 8005a3a:	f043 03b8 	orr.w	r3, r3, #184	@ 0xb8
 8005a3e:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 8005a40:	887b      	ldrh	r3, [r7, #2]
 8005a42:	2b10      	cmp	r3, #16
 8005a44:	d103      	bne.n	8005a4e <I2C_Disable_IRQ+0x82>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8005a46:	68fb      	ldr	r3, [r7, #12]
 8005a48:	f043 0390 	orr.w	r3, r3, #144	@ 0x90
 8005a4c:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 8005a4e:	887b      	ldrh	r3, [r7, #2]
 8005a50:	2b20      	cmp	r3, #32
 8005a52:	d103      	bne.n	8005a5c <I2C_Disable_IRQ+0x90>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 8005a54:	68fb      	ldr	r3, [r7, #12]
 8005a56:	f043 0320 	orr.w	r3, r3, #32
 8005a5a:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8005a5c:	887b      	ldrh	r3, [r7, #2]
 8005a5e:	2b40      	cmp	r3, #64	@ 0x40
 8005a60:	d103      	bne.n	8005a6a <I2C_Disable_IRQ+0x9e>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 8005a62:	68fb      	ldr	r3, [r7, #12]
 8005a64:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005a68:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	6819      	ldr	r1, [r3, #0]
 8005a70:	68fb      	ldr	r3, [r7, #12]
 8005a72:	43da      	mvns	r2, r3
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	400a      	ands	r2, r1
 8005a7a:	601a      	str	r2, [r3, #0]
}
 8005a7c:	bf00      	nop
 8005a7e:	3714      	adds	r7, #20
 8005a80:	46bd      	mov	sp, r7
 8005a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a86:	4770      	bx	lr

08005a88 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8005a88:	b480      	push	{r7}
 8005a8a:	b083      	sub	sp, #12
 8005a8c:	af00      	add	r7, sp, #0
 8005a8e:	6078      	str	r0, [r7, #4]
 8005a90:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005a98:	b2db      	uxtb	r3, r3
 8005a9a:	2b20      	cmp	r3, #32
 8005a9c:	d138      	bne.n	8005b10 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005aa4:	2b01      	cmp	r3, #1
 8005aa6:	d101      	bne.n	8005aac <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8005aa8:	2302      	movs	r3, #2
 8005aaa:	e032      	b.n	8005b12 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	2201      	movs	r2, #1
 8005ab0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	2224      	movs	r2, #36	@ 0x24
 8005ab8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	681a      	ldr	r2, [r3, #0]
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	f022 0201 	bic.w	r2, r2, #1
 8005aca:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	681a      	ldr	r2, [r3, #0]
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8005ada:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	6819      	ldr	r1, [r3, #0]
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	683a      	ldr	r2, [r7, #0]
 8005ae8:	430a      	orrs	r2, r1
 8005aea:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	681a      	ldr	r2, [r3, #0]
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	f042 0201 	orr.w	r2, r2, #1
 8005afa:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	2220      	movs	r2, #32
 8005b00:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	2200      	movs	r2, #0
 8005b08:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8005b0c:	2300      	movs	r3, #0
 8005b0e:	e000      	b.n	8005b12 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8005b10:	2302      	movs	r3, #2
  }
}
 8005b12:	4618      	mov	r0, r3
 8005b14:	370c      	adds	r7, #12
 8005b16:	46bd      	mov	sp, r7
 8005b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b1c:	4770      	bx	lr

08005b1e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8005b1e:	b480      	push	{r7}
 8005b20:	b085      	sub	sp, #20
 8005b22:	af00      	add	r7, sp, #0
 8005b24:	6078      	str	r0, [r7, #4]
 8005b26:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005b2e:	b2db      	uxtb	r3, r3
 8005b30:	2b20      	cmp	r3, #32
 8005b32:	d139      	bne.n	8005ba8 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005b3a:	2b01      	cmp	r3, #1
 8005b3c:	d101      	bne.n	8005b42 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8005b3e:	2302      	movs	r3, #2
 8005b40:	e033      	b.n	8005baa <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	2201      	movs	r2, #1
 8005b46:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	2224      	movs	r2, #36	@ 0x24
 8005b4e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	681a      	ldr	r2, [r3, #0]
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	f022 0201 	bic.w	r2, r2, #1
 8005b60:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8005b6a:	68fb      	ldr	r3, [r7, #12]
 8005b6c:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8005b70:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8005b72:	683b      	ldr	r3, [r7, #0]
 8005b74:	021b      	lsls	r3, r3, #8
 8005b76:	68fa      	ldr	r2, [r7, #12]
 8005b78:	4313      	orrs	r3, r2
 8005b7a:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	68fa      	ldr	r2, [r7, #12]
 8005b82:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	681a      	ldr	r2, [r3, #0]
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	f042 0201 	orr.w	r2, r2, #1
 8005b92:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	2220      	movs	r2, #32
 8005b98:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	2200      	movs	r2, #0
 8005ba0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8005ba4:	2300      	movs	r3, #0
 8005ba6:	e000      	b.n	8005baa <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8005ba8:	2302      	movs	r3, #2
  }
}
 8005baa:	4618      	mov	r0, r3
 8005bac:	3714      	adds	r7, #20
 8005bae:	46bd      	mov	sp, r7
 8005bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bb4:	4770      	bx	lr
	...

08005bb8 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8005bb8:	b480      	push	{r7}
 8005bba:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005bbc:	4b05      	ldr	r3, [pc, #20]	@ (8005bd4 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	4a04      	ldr	r2, [pc, #16]	@ (8005bd4 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8005bc2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005bc6:	6013      	str	r3, [r2, #0]
}
 8005bc8:	bf00      	nop
 8005bca:	46bd      	mov	sp, r7
 8005bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bd0:	4770      	bx	lr
 8005bd2:	bf00      	nop
 8005bd4:	40007000 	.word	0x40007000

08005bd8 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8005bd8:	b480      	push	{r7}
 8005bda:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8005bdc:	4b04      	ldr	r3, [pc, #16]	@ (8005bf0 <HAL_PWREx_GetVoltageRange+0x18>)
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 8005be4:	4618      	mov	r0, r3
 8005be6:	46bd      	mov	sp, r7
 8005be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bec:	4770      	bx	lr
 8005bee:	bf00      	nop
 8005bf0:	40007000 	.word	0x40007000

08005bf4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8005bf4:	b480      	push	{r7}
 8005bf6:	b085      	sub	sp, #20
 8005bf8:	af00      	add	r7, sp, #0
 8005bfa:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005c02:	d130      	bne.n	8005c66 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8005c04:	4b23      	ldr	r3, [pc, #140]	@ (8005c94 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8005c0c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005c10:	d038      	beq.n	8005c84 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8005c12:	4b20      	ldr	r3, [pc, #128]	@ (8005c94 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005c14:	681b      	ldr	r3, [r3, #0]
 8005c16:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8005c1a:	4a1e      	ldr	r2, [pc, #120]	@ (8005c94 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005c1c:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8005c20:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8005c22:	4b1d      	ldr	r3, [pc, #116]	@ (8005c98 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	2232      	movs	r2, #50	@ 0x32
 8005c28:	fb02 f303 	mul.w	r3, r2, r3
 8005c2c:	4a1b      	ldr	r2, [pc, #108]	@ (8005c9c <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8005c2e:	fba2 2303 	umull	r2, r3, r2, r3
 8005c32:	0c9b      	lsrs	r3, r3, #18
 8005c34:	3301      	adds	r3, #1
 8005c36:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005c38:	e002      	b.n	8005c40 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8005c3a:	68fb      	ldr	r3, [r7, #12]
 8005c3c:	3b01      	subs	r3, #1
 8005c3e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005c40:	4b14      	ldr	r3, [pc, #80]	@ (8005c94 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005c42:	695b      	ldr	r3, [r3, #20]
 8005c44:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005c48:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005c4c:	d102      	bne.n	8005c54 <HAL_PWREx_ControlVoltageScaling+0x60>
 8005c4e:	68fb      	ldr	r3, [r7, #12]
 8005c50:	2b00      	cmp	r3, #0
 8005c52:	d1f2      	bne.n	8005c3a <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8005c54:	4b0f      	ldr	r3, [pc, #60]	@ (8005c94 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005c56:	695b      	ldr	r3, [r3, #20]
 8005c58:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005c5c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005c60:	d110      	bne.n	8005c84 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8005c62:	2303      	movs	r3, #3
 8005c64:	e00f      	b.n	8005c86 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8005c66:	4b0b      	ldr	r3, [pc, #44]	@ (8005c94 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8005c6e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005c72:	d007      	beq.n	8005c84 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8005c74:	4b07      	ldr	r3, [pc, #28]	@ (8005c94 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8005c7c:	4a05      	ldr	r2, [pc, #20]	@ (8005c94 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005c7e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8005c82:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8005c84:	2300      	movs	r3, #0
}
 8005c86:	4618      	mov	r0, r3
 8005c88:	3714      	adds	r7, #20
 8005c8a:	46bd      	mov	sp, r7
 8005c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c90:	4770      	bx	lr
 8005c92:	bf00      	nop
 8005c94:	40007000 	.word	0x40007000
 8005c98:	20000040 	.word	0x20000040
 8005c9c:	431bde83 	.word	0x431bde83

08005ca0 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005ca0:	b580      	push	{r7, lr}
 8005ca2:	b088      	sub	sp, #32
 8005ca4:	af00      	add	r7, sp, #0
 8005ca6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	2b00      	cmp	r3, #0
 8005cac:	d102      	bne.n	8005cb4 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8005cae:	2301      	movs	r3, #1
 8005cb0:	f000 bc02 	b.w	80064b8 <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005cb4:	4b96      	ldr	r3, [pc, #600]	@ (8005f10 <HAL_RCC_OscConfig+0x270>)
 8005cb6:	689b      	ldr	r3, [r3, #8]
 8005cb8:	f003 030c 	and.w	r3, r3, #12
 8005cbc:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005cbe:	4b94      	ldr	r3, [pc, #592]	@ (8005f10 <HAL_RCC_OscConfig+0x270>)
 8005cc0:	68db      	ldr	r3, [r3, #12]
 8005cc2:	f003 0303 	and.w	r3, r3, #3
 8005cc6:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	f003 0310 	and.w	r3, r3, #16
 8005cd0:	2b00      	cmp	r3, #0
 8005cd2:	f000 80e4 	beq.w	8005e9e <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8005cd6:	69bb      	ldr	r3, [r7, #24]
 8005cd8:	2b00      	cmp	r3, #0
 8005cda:	d007      	beq.n	8005cec <HAL_RCC_OscConfig+0x4c>
 8005cdc:	69bb      	ldr	r3, [r7, #24]
 8005cde:	2b0c      	cmp	r3, #12
 8005ce0:	f040 808b 	bne.w	8005dfa <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8005ce4:	697b      	ldr	r3, [r7, #20]
 8005ce6:	2b01      	cmp	r3, #1
 8005ce8:	f040 8087 	bne.w	8005dfa <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8005cec:	4b88      	ldr	r3, [pc, #544]	@ (8005f10 <HAL_RCC_OscConfig+0x270>)
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	f003 0302 	and.w	r3, r3, #2
 8005cf4:	2b00      	cmp	r3, #0
 8005cf6:	d005      	beq.n	8005d04 <HAL_RCC_OscConfig+0x64>
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	699b      	ldr	r3, [r3, #24]
 8005cfc:	2b00      	cmp	r3, #0
 8005cfe:	d101      	bne.n	8005d04 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8005d00:	2301      	movs	r3, #1
 8005d02:	e3d9      	b.n	80064b8 <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	6a1a      	ldr	r2, [r3, #32]
 8005d08:	4b81      	ldr	r3, [pc, #516]	@ (8005f10 <HAL_RCC_OscConfig+0x270>)
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	f003 0308 	and.w	r3, r3, #8
 8005d10:	2b00      	cmp	r3, #0
 8005d12:	d004      	beq.n	8005d1e <HAL_RCC_OscConfig+0x7e>
 8005d14:	4b7e      	ldr	r3, [pc, #504]	@ (8005f10 <HAL_RCC_OscConfig+0x270>)
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005d1c:	e005      	b.n	8005d2a <HAL_RCC_OscConfig+0x8a>
 8005d1e:	4b7c      	ldr	r3, [pc, #496]	@ (8005f10 <HAL_RCC_OscConfig+0x270>)
 8005d20:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005d24:	091b      	lsrs	r3, r3, #4
 8005d26:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005d2a:	4293      	cmp	r3, r2
 8005d2c:	d223      	bcs.n	8005d76 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	6a1b      	ldr	r3, [r3, #32]
 8005d32:	4618      	mov	r0, r3
 8005d34:	f000 fdbe 	bl	80068b4 <RCC_SetFlashLatencyFromMSIRange>
 8005d38:	4603      	mov	r3, r0
 8005d3a:	2b00      	cmp	r3, #0
 8005d3c:	d001      	beq.n	8005d42 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8005d3e:	2301      	movs	r3, #1
 8005d40:	e3ba      	b.n	80064b8 <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005d42:	4b73      	ldr	r3, [pc, #460]	@ (8005f10 <HAL_RCC_OscConfig+0x270>)
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	4a72      	ldr	r2, [pc, #456]	@ (8005f10 <HAL_RCC_OscConfig+0x270>)
 8005d48:	f043 0308 	orr.w	r3, r3, #8
 8005d4c:	6013      	str	r3, [r2, #0]
 8005d4e:	4b70      	ldr	r3, [pc, #448]	@ (8005f10 <HAL_RCC_OscConfig+0x270>)
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	6a1b      	ldr	r3, [r3, #32]
 8005d5a:	496d      	ldr	r1, [pc, #436]	@ (8005f10 <HAL_RCC_OscConfig+0x270>)
 8005d5c:	4313      	orrs	r3, r2
 8005d5e:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005d60:	4b6b      	ldr	r3, [pc, #428]	@ (8005f10 <HAL_RCC_OscConfig+0x270>)
 8005d62:	685b      	ldr	r3, [r3, #4]
 8005d64:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	69db      	ldr	r3, [r3, #28]
 8005d6c:	021b      	lsls	r3, r3, #8
 8005d6e:	4968      	ldr	r1, [pc, #416]	@ (8005f10 <HAL_RCC_OscConfig+0x270>)
 8005d70:	4313      	orrs	r3, r2
 8005d72:	604b      	str	r3, [r1, #4]
 8005d74:	e025      	b.n	8005dc2 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005d76:	4b66      	ldr	r3, [pc, #408]	@ (8005f10 <HAL_RCC_OscConfig+0x270>)
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	4a65      	ldr	r2, [pc, #404]	@ (8005f10 <HAL_RCC_OscConfig+0x270>)
 8005d7c:	f043 0308 	orr.w	r3, r3, #8
 8005d80:	6013      	str	r3, [r2, #0]
 8005d82:	4b63      	ldr	r3, [pc, #396]	@ (8005f10 <HAL_RCC_OscConfig+0x270>)
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	6a1b      	ldr	r3, [r3, #32]
 8005d8e:	4960      	ldr	r1, [pc, #384]	@ (8005f10 <HAL_RCC_OscConfig+0x270>)
 8005d90:	4313      	orrs	r3, r2
 8005d92:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005d94:	4b5e      	ldr	r3, [pc, #376]	@ (8005f10 <HAL_RCC_OscConfig+0x270>)
 8005d96:	685b      	ldr	r3, [r3, #4]
 8005d98:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	69db      	ldr	r3, [r3, #28]
 8005da0:	021b      	lsls	r3, r3, #8
 8005da2:	495b      	ldr	r1, [pc, #364]	@ (8005f10 <HAL_RCC_OscConfig+0x270>)
 8005da4:	4313      	orrs	r3, r2
 8005da6:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8005da8:	69bb      	ldr	r3, [r7, #24]
 8005daa:	2b00      	cmp	r3, #0
 8005dac:	d109      	bne.n	8005dc2 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	6a1b      	ldr	r3, [r3, #32]
 8005db2:	4618      	mov	r0, r3
 8005db4:	f000 fd7e 	bl	80068b4 <RCC_SetFlashLatencyFromMSIRange>
 8005db8:	4603      	mov	r3, r0
 8005dba:	2b00      	cmp	r3, #0
 8005dbc:	d001      	beq.n	8005dc2 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8005dbe:	2301      	movs	r3, #1
 8005dc0:	e37a      	b.n	80064b8 <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8005dc2:	f000 fc81 	bl	80066c8 <HAL_RCC_GetSysClockFreq>
 8005dc6:	4602      	mov	r2, r0
 8005dc8:	4b51      	ldr	r3, [pc, #324]	@ (8005f10 <HAL_RCC_OscConfig+0x270>)
 8005dca:	689b      	ldr	r3, [r3, #8]
 8005dcc:	091b      	lsrs	r3, r3, #4
 8005dce:	f003 030f 	and.w	r3, r3, #15
 8005dd2:	4950      	ldr	r1, [pc, #320]	@ (8005f14 <HAL_RCC_OscConfig+0x274>)
 8005dd4:	5ccb      	ldrb	r3, [r1, r3]
 8005dd6:	f003 031f 	and.w	r3, r3, #31
 8005dda:	fa22 f303 	lsr.w	r3, r2, r3
 8005dde:	4a4e      	ldr	r2, [pc, #312]	@ (8005f18 <HAL_RCC_OscConfig+0x278>)
 8005de0:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8005de2:	4b4e      	ldr	r3, [pc, #312]	@ (8005f1c <HAL_RCC_OscConfig+0x27c>)
 8005de4:	681b      	ldr	r3, [r3, #0]
 8005de6:	4618      	mov	r0, r3
 8005de8:	f7fc fc1a 	bl	8002620 <HAL_InitTick>
 8005dec:	4603      	mov	r3, r0
 8005dee:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8005df0:	7bfb      	ldrb	r3, [r7, #15]
 8005df2:	2b00      	cmp	r3, #0
 8005df4:	d052      	beq.n	8005e9c <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8005df6:	7bfb      	ldrb	r3, [r7, #15]
 8005df8:	e35e      	b.n	80064b8 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	699b      	ldr	r3, [r3, #24]
 8005dfe:	2b00      	cmp	r3, #0
 8005e00:	d032      	beq.n	8005e68 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8005e02:	4b43      	ldr	r3, [pc, #268]	@ (8005f10 <HAL_RCC_OscConfig+0x270>)
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	4a42      	ldr	r2, [pc, #264]	@ (8005f10 <HAL_RCC_OscConfig+0x270>)
 8005e08:	f043 0301 	orr.w	r3, r3, #1
 8005e0c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8005e0e:	f7fd f893 	bl	8002f38 <HAL_GetTick>
 8005e12:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8005e14:	e008      	b.n	8005e28 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8005e16:	f7fd f88f 	bl	8002f38 <HAL_GetTick>
 8005e1a:	4602      	mov	r2, r0
 8005e1c:	693b      	ldr	r3, [r7, #16]
 8005e1e:	1ad3      	subs	r3, r2, r3
 8005e20:	2b02      	cmp	r3, #2
 8005e22:	d901      	bls.n	8005e28 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8005e24:	2303      	movs	r3, #3
 8005e26:	e347      	b.n	80064b8 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8005e28:	4b39      	ldr	r3, [pc, #228]	@ (8005f10 <HAL_RCC_OscConfig+0x270>)
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	f003 0302 	and.w	r3, r3, #2
 8005e30:	2b00      	cmp	r3, #0
 8005e32:	d0f0      	beq.n	8005e16 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005e34:	4b36      	ldr	r3, [pc, #216]	@ (8005f10 <HAL_RCC_OscConfig+0x270>)
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	4a35      	ldr	r2, [pc, #212]	@ (8005f10 <HAL_RCC_OscConfig+0x270>)
 8005e3a:	f043 0308 	orr.w	r3, r3, #8
 8005e3e:	6013      	str	r3, [r2, #0]
 8005e40:	4b33      	ldr	r3, [pc, #204]	@ (8005f10 <HAL_RCC_OscConfig+0x270>)
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	6a1b      	ldr	r3, [r3, #32]
 8005e4c:	4930      	ldr	r1, [pc, #192]	@ (8005f10 <HAL_RCC_OscConfig+0x270>)
 8005e4e:	4313      	orrs	r3, r2
 8005e50:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005e52:	4b2f      	ldr	r3, [pc, #188]	@ (8005f10 <HAL_RCC_OscConfig+0x270>)
 8005e54:	685b      	ldr	r3, [r3, #4]
 8005e56:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	69db      	ldr	r3, [r3, #28]
 8005e5e:	021b      	lsls	r3, r3, #8
 8005e60:	492b      	ldr	r1, [pc, #172]	@ (8005f10 <HAL_RCC_OscConfig+0x270>)
 8005e62:	4313      	orrs	r3, r2
 8005e64:	604b      	str	r3, [r1, #4]
 8005e66:	e01a      	b.n	8005e9e <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8005e68:	4b29      	ldr	r3, [pc, #164]	@ (8005f10 <HAL_RCC_OscConfig+0x270>)
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	4a28      	ldr	r2, [pc, #160]	@ (8005f10 <HAL_RCC_OscConfig+0x270>)
 8005e6e:	f023 0301 	bic.w	r3, r3, #1
 8005e72:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8005e74:	f7fd f860 	bl	8002f38 <HAL_GetTick>
 8005e78:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8005e7a:	e008      	b.n	8005e8e <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8005e7c:	f7fd f85c 	bl	8002f38 <HAL_GetTick>
 8005e80:	4602      	mov	r2, r0
 8005e82:	693b      	ldr	r3, [r7, #16]
 8005e84:	1ad3      	subs	r3, r2, r3
 8005e86:	2b02      	cmp	r3, #2
 8005e88:	d901      	bls.n	8005e8e <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8005e8a:	2303      	movs	r3, #3
 8005e8c:	e314      	b.n	80064b8 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8005e8e:	4b20      	ldr	r3, [pc, #128]	@ (8005f10 <HAL_RCC_OscConfig+0x270>)
 8005e90:	681b      	ldr	r3, [r3, #0]
 8005e92:	f003 0302 	and.w	r3, r3, #2
 8005e96:	2b00      	cmp	r3, #0
 8005e98:	d1f0      	bne.n	8005e7c <HAL_RCC_OscConfig+0x1dc>
 8005e9a:	e000      	b.n	8005e9e <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8005e9c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	f003 0301 	and.w	r3, r3, #1
 8005ea6:	2b00      	cmp	r3, #0
 8005ea8:	d073      	beq.n	8005f92 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8005eaa:	69bb      	ldr	r3, [r7, #24]
 8005eac:	2b08      	cmp	r3, #8
 8005eae:	d005      	beq.n	8005ebc <HAL_RCC_OscConfig+0x21c>
 8005eb0:	69bb      	ldr	r3, [r7, #24]
 8005eb2:	2b0c      	cmp	r3, #12
 8005eb4:	d10e      	bne.n	8005ed4 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8005eb6:	697b      	ldr	r3, [r7, #20]
 8005eb8:	2b03      	cmp	r3, #3
 8005eba:	d10b      	bne.n	8005ed4 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005ebc:	4b14      	ldr	r3, [pc, #80]	@ (8005f10 <HAL_RCC_OscConfig+0x270>)
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005ec4:	2b00      	cmp	r3, #0
 8005ec6:	d063      	beq.n	8005f90 <HAL_RCC_OscConfig+0x2f0>
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	685b      	ldr	r3, [r3, #4]
 8005ecc:	2b00      	cmp	r3, #0
 8005ece:	d15f      	bne.n	8005f90 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8005ed0:	2301      	movs	r3, #1
 8005ed2:	e2f1      	b.n	80064b8 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	685b      	ldr	r3, [r3, #4]
 8005ed8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005edc:	d106      	bne.n	8005eec <HAL_RCC_OscConfig+0x24c>
 8005ede:	4b0c      	ldr	r3, [pc, #48]	@ (8005f10 <HAL_RCC_OscConfig+0x270>)
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	4a0b      	ldr	r2, [pc, #44]	@ (8005f10 <HAL_RCC_OscConfig+0x270>)
 8005ee4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005ee8:	6013      	str	r3, [r2, #0]
 8005eea:	e025      	b.n	8005f38 <HAL_RCC_OscConfig+0x298>
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	685b      	ldr	r3, [r3, #4]
 8005ef0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005ef4:	d114      	bne.n	8005f20 <HAL_RCC_OscConfig+0x280>
 8005ef6:	4b06      	ldr	r3, [pc, #24]	@ (8005f10 <HAL_RCC_OscConfig+0x270>)
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	4a05      	ldr	r2, [pc, #20]	@ (8005f10 <HAL_RCC_OscConfig+0x270>)
 8005efc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005f00:	6013      	str	r3, [r2, #0]
 8005f02:	4b03      	ldr	r3, [pc, #12]	@ (8005f10 <HAL_RCC_OscConfig+0x270>)
 8005f04:	681b      	ldr	r3, [r3, #0]
 8005f06:	4a02      	ldr	r2, [pc, #8]	@ (8005f10 <HAL_RCC_OscConfig+0x270>)
 8005f08:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005f0c:	6013      	str	r3, [r2, #0]
 8005f0e:	e013      	b.n	8005f38 <HAL_RCC_OscConfig+0x298>
 8005f10:	40021000 	.word	0x40021000
 8005f14:	0801ad84 	.word	0x0801ad84
 8005f18:	20000040 	.word	0x20000040
 8005f1c:	20000044 	.word	0x20000044
 8005f20:	4ba0      	ldr	r3, [pc, #640]	@ (80061a4 <HAL_RCC_OscConfig+0x504>)
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	4a9f      	ldr	r2, [pc, #636]	@ (80061a4 <HAL_RCC_OscConfig+0x504>)
 8005f26:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005f2a:	6013      	str	r3, [r2, #0]
 8005f2c:	4b9d      	ldr	r3, [pc, #628]	@ (80061a4 <HAL_RCC_OscConfig+0x504>)
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	4a9c      	ldr	r2, [pc, #624]	@ (80061a4 <HAL_RCC_OscConfig+0x504>)
 8005f32:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005f36:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	685b      	ldr	r3, [r3, #4]
 8005f3c:	2b00      	cmp	r3, #0
 8005f3e:	d013      	beq.n	8005f68 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005f40:	f7fc fffa 	bl	8002f38 <HAL_GetTick>
 8005f44:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005f46:	e008      	b.n	8005f5a <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005f48:	f7fc fff6 	bl	8002f38 <HAL_GetTick>
 8005f4c:	4602      	mov	r2, r0
 8005f4e:	693b      	ldr	r3, [r7, #16]
 8005f50:	1ad3      	subs	r3, r2, r3
 8005f52:	2b64      	cmp	r3, #100	@ 0x64
 8005f54:	d901      	bls.n	8005f5a <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8005f56:	2303      	movs	r3, #3
 8005f58:	e2ae      	b.n	80064b8 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005f5a:	4b92      	ldr	r3, [pc, #584]	@ (80061a4 <HAL_RCC_OscConfig+0x504>)
 8005f5c:	681b      	ldr	r3, [r3, #0]
 8005f5e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005f62:	2b00      	cmp	r3, #0
 8005f64:	d0f0      	beq.n	8005f48 <HAL_RCC_OscConfig+0x2a8>
 8005f66:	e014      	b.n	8005f92 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005f68:	f7fc ffe6 	bl	8002f38 <HAL_GetTick>
 8005f6c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8005f6e:	e008      	b.n	8005f82 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005f70:	f7fc ffe2 	bl	8002f38 <HAL_GetTick>
 8005f74:	4602      	mov	r2, r0
 8005f76:	693b      	ldr	r3, [r7, #16]
 8005f78:	1ad3      	subs	r3, r2, r3
 8005f7a:	2b64      	cmp	r3, #100	@ 0x64
 8005f7c:	d901      	bls.n	8005f82 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8005f7e:	2303      	movs	r3, #3
 8005f80:	e29a      	b.n	80064b8 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8005f82:	4b88      	ldr	r3, [pc, #544]	@ (80061a4 <HAL_RCC_OscConfig+0x504>)
 8005f84:	681b      	ldr	r3, [r3, #0]
 8005f86:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005f8a:	2b00      	cmp	r3, #0
 8005f8c:	d1f0      	bne.n	8005f70 <HAL_RCC_OscConfig+0x2d0>
 8005f8e:	e000      	b.n	8005f92 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005f90:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	681b      	ldr	r3, [r3, #0]
 8005f96:	f003 0302 	and.w	r3, r3, #2
 8005f9a:	2b00      	cmp	r3, #0
 8005f9c:	d060      	beq.n	8006060 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8005f9e:	69bb      	ldr	r3, [r7, #24]
 8005fa0:	2b04      	cmp	r3, #4
 8005fa2:	d005      	beq.n	8005fb0 <HAL_RCC_OscConfig+0x310>
 8005fa4:	69bb      	ldr	r3, [r7, #24]
 8005fa6:	2b0c      	cmp	r3, #12
 8005fa8:	d119      	bne.n	8005fde <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8005faa:	697b      	ldr	r3, [r7, #20]
 8005fac:	2b02      	cmp	r3, #2
 8005fae:	d116      	bne.n	8005fde <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005fb0:	4b7c      	ldr	r3, [pc, #496]	@ (80061a4 <HAL_RCC_OscConfig+0x504>)
 8005fb2:	681b      	ldr	r3, [r3, #0]
 8005fb4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005fb8:	2b00      	cmp	r3, #0
 8005fba:	d005      	beq.n	8005fc8 <HAL_RCC_OscConfig+0x328>
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	68db      	ldr	r3, [r3, #12]
 8005fc0:	2b00      	cmp	r3, #0
 8005fc2:	d101      	bne.n	8005fc8 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8005fc4:	2301      	movs	r3, #1
 8005fc6:	e277      	b.n	80064b8 <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005fc8:	4b76      	ldr	r3, [pc, #472]	@ (80061a4 <HAL_RCC_OscConfig+0x504>)
 8005fca:	685b      	ldr	r3, [r3, #4]
 8005fcc:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	691b      	ldr	r3, [r3, #16]
 8005fd4:	061b      	lsls	r3, r3, #24
 8005fd6:	4973      	ldr	r1, [pc, #460]	@ (80061a4 <HAL_RCC_OscConfig+0x504>)
 8005fd8:	4313      	orrs	r3, r2
 8005fda:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005fdc:	e040      	b.n	8006060 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	68db      	ldr	r3, [r3, #12]
 8005fe2:	2b00      	cmp	r3, #0
 8005fe4:	d023      	beq.n	800602e <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005fe6:	4b6f      	ldr	r3, [pc, #444]	@ (80061a4 <HAL_RCC_OscConfig+0x504>)
 8005fe8:	681b      	ldr	r3, [r3, #0]
 8005fea:	4a6e      	ldr	r2, [pc, #440]	@ (80061a4 <HAL_RCC_OscConfig+0x504>)
 8005fec:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005ff0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005ff2:	f7fc ffa1 	bl	8002f38 <HAL_GetTick>
 8005ff6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005ff8:	e008      	b.n	800600c <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005ffa:	f7fc ff9d 	bl	8002f38 <HAL_GetTick>
 8005ffe:	4602      	mov	r2, r0
 8006000:	693b      	ldr	r3, [r7, #16]
 8006002:	1ad3      	subs	r3, r2, r3
 8006004:	2b02      	cmp	r3, #2
 8006006:	d901      	bls.n	800600c <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8006008:	2303      	movs	r3, #3
 800600a:	e255      	b.n	80064b8 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800600c:	4b65      	ldr	r3, [pc, #404]	@ (80061a4 <HAL_RCC_OscConfig+0x504>)
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006014:	2b00      	cmp	r3, #0
 8006016:	d0f0      	beq.n	8005ffa <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006018:	4b62      	ldr	r3, [pc, #392]	@ (80061a4 <HAL_RCC_OscConfig+0x504>)
 800601a:	685b      	ldr	r3, [r3, #4]
 800601c:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	691b      	ldr	r3, [r3, #16]
 8006024:	061b      	lsls	r3, r3, #24
 8006026:	495f      	ldr	r1, [pc, #380]	@ (80061a4 <HAL_RCC_OscConfig+0x504>)
 8006028:	4313      	orrs	r3, r2
 800602a:	604b      	str	r3, [r1, #4]
 800602c:	e018      	b.n	8006060 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800602e:	4b5d      	ldr	r3, [pc, #372]	@ (80061a4 <HAL_RCC_OscConfig+0x504>)
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	4a5c      	ldr	r2, [pc, #368]	@ (80061a4 <HAL_RCC_OscConfig+0x504>)
 8006034:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006038:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800603a:	f7fc ff7d 	bl	8002f38 <HAL_GetTick>
 800603e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8006040:	e008      	b.n	8006054 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006042:	f7fc ff79 	bl	8002f38 <HAL_GetTick>
 8006046:	4602      	mov	r2, r0
 8006048:	693b      	ldr	r3, [r7, #16]
 800604a:	1ad3      	subs	r3, r2, r3
 800604c:	2b02      	cmp	r3, #2
 800604e:	d901      	bls.n	8006054 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8006050:	2303      	movs	r3, #3
 8006052:	e231      	b.n	80064b8 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8006054:	4b53      	ldr	r3, [pc, #332]	@ (80061a4 <HAL_RCC_OscConfig+0x504>)
 8006056:	681b      	ldr	r3, [r3, #0]
 8006058:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800605c:	2b00      	cmp	r3, #0
 800605e:	d1f0      	bne.n	8006042 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	f003 0308 	and.w	r3, r3, #8
 8006068:	2b00      	cmp	r3, #0
 800606a:	d03c      	beq.n	80060e6 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	695b      	ldr	r3, [r3, #20]
 8006070:	2b00      	cmp	r3, #0
 8006072:	d01c      	beq.n	80060ae <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006074:	4b4b      	ldr	r3, [pc, #300]	@ (80061a4 <HAL_RCC_OscConfig+0x504>)
 8006076:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800607a:	4a4a      	ldr	r2, [pc, #296]	@ (80061a4 <HAL_RCC_OscConfig+0x504>)
 800607c:	f043 0301 	orr.w	r3, r3, #1
 8006080:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006084:	f7fc ff58 	bl	8002f38 <HAL_GetTick>
 8006088:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800608a:	e008      	b.n	800609e <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800608c:	f7fc ff54 	bl	8002f38 <HAL_GetTick>
 8006090:	4602      	mov	r2, r0
 8006092:	693b      	ldr	r3, [r7, #16]
 8006094:	1ad3      	subs	r3, r2, r3
 8006096:	2b02      	cmp	r3, #2
 8006098:	d901      	bls.n	800609e <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800609a:	2303      	movs	r3, #3
 800609c:	e20c      	b.n	80064b8 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800609e:	4b41      	ldr	r3, [pc, #260]	@ (80061a4 <HAL_RCC_OscConfig+0x504>)
 80060a0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80060a4:	f003 0302 	and.w	r3, r3, #2
 80060a8:	2b00      	cmp	r3, #0
 80060aa:	d0ef      	beq.n	800608c <HAL_RCC_OscConfig+0x3ec>
 80060ac:	e01b      	b.n	80060e6 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80060ae:	4b3d      	ldr	r3, [pc, #244]	@ (80061a4 <HAL_RCC_OscConfig+0x504>)
 80060b0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80060b4:	4a3b      	ldr	r2, [pc, #236]	@ (80061a4 <HAL_RCC_OscConfig+0x504>)
 80060b6:	f023 0301 	bic.w	r3, r3, #1
 80060ba:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80060be:	f7fc ff3b 	bl	8002f38 <HAL_GetTick>
 80060c2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80060c4:	e008      	b.n	80060d8 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80060c6:	f7fc ff37 	bl	8002f38 <HAL_GetTick>
 80060ca:	4602      	mov	r2, r0
 80060cc:	693b      	ldr	r3, [r7, #16]
 80060ce:	1ad3      	subs	r3, r2, r3
 80060d0:	2b02      	cmp	r3, #2
 80060d2:	d901      	bls.n	80060d8 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80060d4:	2303      	movs	r3, #3
 80060d6:	e1ef      	b.n	80064b8 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80060d8:	4b32      	ldr	r3, [pc, #200]	@ (80061a4 <HAL_RCC_OscConfig+0x504>)
 80060da:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80060de:	f003 0302 	and.w	r3, r3, #2
 80060e2:	2b00      	cmp	r3, #0
 80060e4:	d1ef      	bne.n	80060c6 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	f003 0304 	and.w	r3, r3, #4
 80060ee:	2b00      	cmp	r3, #0
 80060f0:	f000 80a6 	beq.w	8006240 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80060f4:	2300      	movs	r3, #0
 80060f6:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80060f8:	4b2a      	ldr	r3, [pc, #168]	@ (80061a4 <HAL_RCC_OscConfig+0x504>)
 80060fa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80060fc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006100:	2b00      	cmp	r3, #0
 8006102:	d10d      	bne.n	8006120 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006104:	4b27      	ldr	r3, [pc, #156]	@ (80061a4 <HAL_RCC_OscConfig+0x504>)
 8006106:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006108:	4a26      	ldr	r2, [pc, #152]	@ (80061a4 <HAL_RCC_OscConfig+0x504>)
 800610a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800610e:	6593      	str	r3, [r2, #88]	@ 0x58
 8006110:	4b24      	ldr	r3, [pc, #144]	@ (80061a4 <HAL_RCC_OscConfig+0x504>)
 8006112:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006114:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006118:	60bb      	str	r3, [r7, #8]
 800611a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800611c:	2301      	movs	r3, #1
 800611e:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006120:	4b21      	ldr	r3, [pc, #132]	@ (80061a8 <HAL_RCC_OscConfig+0x508>)
 8006122:	681b      	ldr	r3, [r3, #0]
 8006124:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006128:	2b00      	cmp	r3, #0
 800612a:	d118      	bne.n	800615e <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800612c:	4b1e      	ldr	r3, [pc, #120]	@ (80061a8 <HAL_RCC_OscConfig+0x508>)
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	4a1d      	ldr	r2, [pc, #116]	@ (80061a8 <HAL_RCC_OscConfig+0x508>)
 8006132:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006136:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006138:	f7fc fefe 	bl	8002f38 <HAL_GetTick>
 800613c:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800613e:	e008      	b.n	8006152 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006140:	f7fc fefa 	bl	8002f38 <HAL_GetTick>
 8006144:	4602      	mov	r2, r0
 8006146:	693b      	ldr	r3, [r7, #16]
 8006148:	1ad3      	subs	r3, r2, r3
 800614a:	2b02      	cmp	r3, #2
 800614c:	d901      	bls.n	8006152 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800614e:	2303      	movs	r3, #3
 8006150:	e1b2      	b.n	80064b8 <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006152:	4b15      	ldr	r3, [pc, #84]	@ (80061a8 <HAL_RCC_OscConfig+0x508>)
 8006154:	681b      	ldr	r3, [r3, #0]
 8006156:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800615a:	2b00      	cmp	r3, #0
 800615c:	d0f0      	beq.n	8006140 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	689b      	ldr	r3, [r3, #8]
 8006162:	2b01      	cmp	r3, #1
 8006164:	d108      	bne.n	8006178 <HAL_RCC_OscConfig+0x4d8>
 8006166:	4b0f      	ldr	r3, [pc, #60]	@ (80061a4 <HAL_RCC_OscConfig+0x504>)
 8006168:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800616c:	4a0d      	ldr	r2, [pc, #52]	@ (80061a4 <HAL_RCC_OscConfig+0x504>)
 800616e:	f043 0301 	orr.w	r3, r3, #1
 8006172:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8006176:	e029      	b.n	80061cc <HAL_RCC_OscConfig+0x52c>
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	689b      	ldr	r3, [r3, #8]
 800617c:	2b05      	cmp	r3, #5
 800617e:	d115      	bne.n	80061ac <HAL_RCC_OscConfig+0x50c>
 8006180:	4b08      	ldr	r3, [pc, #32]	@ (80061a4 <HAL_RCC_OscConfig+0x504>)
 8006182:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006186:	4a07      	ldr	r2, [pc, #28]	@ (80061a4 <HAL_RCC_OscConfig+0x504>)
 8006188:	f043 0304 	orr.w	r3, r3, #4
 800618c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8006190:	4b04      	ldr	r3, [pc, #16]	@ (80061a4 <HAL_RCC_OscConfig+0x504>)
 8006192:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006196:	4a03      	ldr	r2, [pc, #12]	@ (80061a4 <HAL_RCC_OscConfig+0x504>)
 8006198:	f043 0301 	orr.w	r3, r3, #1
 800619c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80061a0:	e014      	b.n	80061cc <HAL_RCC_OscConfig+0x52c>
 80061a2:	bf00      	nop
 80061a4:	40021000 	.word	0x40021000
 80061a8:	40007000 	.word	0x40007000
 80061ac:	4b9a      	ldr	r3, [pc, #616]	@ (8006418 <HAL_RCC_OscConfig+0x778>)
 80061ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80061b2:	4a99      	ldr	r2, [pc, #612]	@ (8006418 <HAL_RCC_OscConfig+0x778>)
 80061b4:	f023 0301 	bic.w	r3, r3, #1
 80061b8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80061bc:	4b96      	ldr	r3, [pc, #600]	@ (8006418 <HAL_RCC_OscConfig+0x778>)
 80061be:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80061c2:	4a95      	ldr	r2, [pc, #596]	@ (8006418 <HAL_RCC_OscConfig+0x778>)
 80061c4:	f023 0304 	bic.w	r3, r3, #4
 80061c8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	689b      	ldr	r3, [r3, #8]
 80061d0:	2b00      	cmp	r3, #0
 80061d2:	d016      	beq.n	8006202 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80061d4:	f7fc feb0 	bl	8002f38 <HAL_GetTick>
 80061d8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80061da:	e00a      	b.n	80061f2 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80061dc:	f7fc feac 	bl	8002f38 <HAL_GetTick>
 80061e0:	4602      	mov	r2, r0
 80061e2:	693b      	ldr	r3, [r7, #16]
 80061e4:	1ad3      	subs	r3, r2, r3
 80061e6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80061ea:	4293      	cmp	r3, r2
 80061ec:	d901      	bls.n	80061f2 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 80061ee:	2303      	movs	r3, #3
 80061f0:	e162      	b.n	80064b8 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80061f2:	4b89      	ldr	r3, [pc, #548]	@ (8006418 <HAL_RCC_OscConfig+0x778>)
 80061f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80061f8:	f003 0302 	and.w	r3, r3, #2
 80061fc:	2b00      	cmp	r3, #0
 80061fe:	d0ed      	beq.n	80061dc <HAL_RCC_OscConfig+0x53c>
 8006200:	e015      	b.n	800622e <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006202:	f7fc fe99 	bl	8002f38 <HAL_GetTick>
 8006206:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8006208:	e00a      	b.n	8006220 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800620a:	f7fc fe95 	bl	8002f38 <HAL_GetTick>
 800620e:	4602      	mov	r2, r0
 8006210:	693b      	ldr	r3, [r7, #16]
 8006212:	1ad3      	subs	r3, r2, r3
 8006214:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006218:	4293      	cmp	r3, r2
 800621a:	d901      	bls.n	8006220 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 800621c:	2303      	movs	r3, #3
 800621e:	e14b      	b.n	80064b8 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8006220:	4b7d      	ldr	r3, [pc, #500]	@ (8006418 <HAL_RCC_OscConfig+0x778>)
 8006222:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006226:	f003 0302 	and.w	r3, r3, #2
 800622a:	2b00      	cmp	r3, #0
 800622c:	d1ed      	bne.n	800620a <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800622e:	7ffb      	ldrb	r3, [r7, #31]
 8006230:	2b01      	cmp	r3, #1
 8006232:	d105      	bne.n	8006240 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006234:	4b78      	ldr	r3, [pc, #480]	@ (8006418 <HAL_RCC_OscConfig+0x778>)
 8006236:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006238:	4a77      	ldr	r2, [pc, #476]	@ (8006418 <HAL_RCC_OscConfig+0x778>)
 800623a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800623e:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	681b      	ldr	r3, [r3, #0]
 8006244:	f003 0320 	and.w	r3, r3, #32
 8006248:	2b00      	cmp	r3, #0
 800624a:	d03c      	beq.n	80062c6 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006250:	2b00      	cmp	r3, #0
 8006252:	d01c      	beq.n	800628e <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8006254:	4b70      	ldr	r3, [pc, #448]	@ (8006418 <HAL_RCC_OscConfig+0x778>)
 8006256:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800625a:	4a6f      	ldr	r2, [pc, #444]	@ (8006418 <HAL_RCC_OscConfig+0x778>)
 800625c:	f043 0301 	orr.w	r3, r3, #1
 8006260:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006264:	f7fc fe68 	bl	8002f38 <HAL_GetTick>
 8006268:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800626a:	e008      	b.n	800627e <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800626c:	f7fc fe64 	bl	8002f38 <HAL_GetTick>
 8006270:	4602      	mov	r2, r0
 8006272:	693b      	ldr	r3, [r7, #16]
 8006274:	1ad3      	subs	r3, r2, r3
 8006276:	2b02      	cmp	r3, #2
 8006278:	d901      	bls.n	800627e <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 800627a:	2303      	movs	r3, #3
 800627c:	e11c      	b.n	80064b8 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800627e:	4b66      	ldr	r3, [pc, #408]	@ (8006418 <HAL_RCC_OscConfig+0x778>)
 8006280:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8006284:	f003 0302 	and.w	r3, r3, #2
 8006288:	2b00      	cmp	r3, #0
 800628a:	d0ef      	beq.n	800626c <HAL_RCC_OscConfig+0x5cc>
 800628c:	e01b      	b.n	80062c6 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800628e:	4b62      	ldr	r3, [pc, #392]	@ (8006418 <HAL_RCC_OscConfig+0x778>)
 8006290:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8006294:	4a60      	ldr	r2, [pc, #384]	@ (8006418 <HAL_RCC_OscConfig+0x778>)
 8006296:	f023 0301 	bic.w	r3, r3, #1
 800629a:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800629e:	f7fc fe4b 	bl	8002f38 <HAL_GetTick>
 80062a2:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80062a4:	e008      	b.n	80062b8 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80062a6:	f7fc fe47 	bl	8002f38 <HAL_GetTick>
 80062aa:	4602      	mov	r2, r0
 80062ac:	693b      	ldr	r3, [r7, #16]
 80062ae:	1ad3      	subs	r3, r2, r3
 80062b0:	2b02      	cmp	r3, #2
 80062b2:	d901      	bls.n	80062b8 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 80062b4:	2303      	movs	r3, #3
 80062b6:	e0ff      	b.n	80064b8 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80062b8:	4b57      	ldr	r3, [pc, #348]	@ (8006418 <HAL_RCC_OscConfig+0x778>)
 80062ba:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80062be:	f003 0302 	and.w	r3, r3, #2
 80062c2:	2b00      	cmp	r3, #0
 80062c4:	d1ef      	bne.n	80062a6 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80062ca:	2b00      	cmp	r3, #0
 80062cc:	f000 80f3 	beq.w	80064b6 <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80062d4:	2b02      	cmp	r3, #2
 80062d6:	f040 80c9 	bne.w	800646c <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80062da:	4b4f      	ldr	r3, [pc, #316]	@ (8006418 <HAL_RCC_OscConfig+0x778>)
 80062dc:	68db      	ldr	r3, [r3, #12]
 80062de:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80062e0:	697b      	ldr	r3, [r7, #20]
 80062e2:	f003 0203 	and.w	r2, r3, #3
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80062ea:	429a      	cmp	r2, r3
 80062ec:	d12c      	bne.n	8006348 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80062ee:	697b      	ldr	r3, [r7, #20]
 80062f0:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80062f8:	3b01      	subs	r3, #1
 80062fa:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80062fc:	429a      	cmp	r2, r3
 80062fe:	d123      	bne.n	8006348 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8006300:	697b      	ldr	r3, [r7, #20]
 8006302:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800630a:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800630c:	429a      	cmp	r2, r3
 800630e:	d11b      	bne.n	8006348 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8006310:	697b      	ldr	r3, [r7, #20]
 8006312:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800631a:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800631c:	429a      	cmp	r2, r3
 800631e:	d113      	bne.n	8006348 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8006320:	697b      	ldr	r3, [r7, #20]
 8006322:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800632a:	085b      	lsrs	r3, r3, #1
 800632c:	3b01      	subs	r3, #1
 800632e:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8006330:	429a      	cmp	r2, r3
 8006332:	d109      	bne.n	8006348 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8006334:	697b      	ldr	r3, [r7, #20]
 8006336:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800633e:	085b      	lsrs	r3, r3, #1
 8006340:	3b01      	subs	r3, #1
 8006342:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8006344:	429a      	cmp	r2, r3
 8006346:	d06b      	beq.n	8006420 <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8006348:	69bb      	ldr	r3, [r7, #24]
 800634a:	2b0c      	cmp	r3, #12
 800634c:	d062      	beq.n	8006414 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800634e:	4b32      	ldr	r3, [pc, #200]	@ (8006418 <HAL_RCC_OscConfig+0x778>)
 8006350:	681b      	ldr	r3, [r3, #0]
 8006352:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8006356:	2b00      	cmp	r3, #0
 8006358:	d001      	beq.n	800635e <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 800635a:	2301      	movs	r3, #1
 800635c:	e0ac      	b.n	80064b8 <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800635e:	4b2e      	ldr	r3, [pc, #184]	@ (8006418 <HAL_RCC_OscConfig+0x778>)
 8006360:	681b      	ldr	r3, [r3, #0]
 8006362:	4a2d      	ldr	r2, [pc, #180]	@ (8006418 <HAL_RCC_OscConfig+0x778>)
 8006364:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006368:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800636a:	f7fc fde5 	bl	8002f38 <HAL_GetTick>
 800636e:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006370:	e008      	b.n	8006384 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006372:	f7fc fde1 	bl	8002f38 <HAL_GetTick>
 8006376:	4602      	mov	r2, r0
 8006378:	693b      	ldr	r3, [r7, #16]
 800637a:	1ad3      	subs	r3, r2, r3
 800637c:	2b02      	cmp	r3, #2
 800637e:	d901      	bls.n	8006384 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 8006380:	2303      	movs	r3, #3
 8006382:	e099      	b.n	80064b8 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006384:	4b24      	ldr	r3, [pc, #144]	@ (8006418 <HAL_RCC_OscConfig+0x778>)
 8006386:	681b      	ldr	r3, [r3, #0]
 8006388:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800638c:	2b00      	cmp	r3, #0
 800638e:	d1f0      	bne.n	8006372 <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006390:	4b21      	ldr	r3, [pc, #132]	@ (8006418 <HAL_RCC_OscConfig+0x778>)
 8006392:	68da      	ldr	r2, [r3, #12]
 8006394:	4b21      	ldr	r3, [pc, #132]	@ (800641c <HAL_RCC_OscConfig+0x77c>)
 8006396:	4013      	ands	r3, r2
 8006398:	687a      	ldr	r2, [r7, #4]
 800639a:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 800639c:	687a      	ldr	r2, [r7, #4]
 800639e:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80063a0:	3a01      	subs	r2, #1
 80063a2:	0112      	lsls	r2, r2, #4
 80063a4:	4311      	orrs	r1, r2
 80063a6:	687a      	ldr	r2, [r7, #4]
 80063a8:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80063aa:	0212      	lsls	r2, r2, #8
 80063ac:	4311      	orrs	r1, r2
 80063ae:	687a      	ldr	r2, [r7, #4]
 80063b0:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80063b2:	0852      	lsrs	r2, r2, #1
 80063b4:	3a01      	subs	r2, #1
 80063b6:	0552      	lsls	r2, r2, #21
 80063b8:	4311      	orrs	r1, r2
 80063ba:	687a      	ldr	r2, [r7, #4]
 80063bc:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 80063be:	0852      	lsrs	r2, r2, #1
 80063c0:	3a01      	subs	r2, #1
 80063c2:	0652      	lsls	r2, r2, #25
 80063c4:	4311      	orrs	r1, r2
 80063c6:	687a      	ldr	r2, [r7, #4]
 80063c8:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80063ca:	06d2      	lsls	r2, r2, #27
 80063cc:	430a      	orrs	r2, r1
 80063ce:	4912      	ldr	r1, [pc, #72]	@ (8006418 <HAL_RCC_OscConfig+0x778>)
 80063d0:	4313      	orrs	r3, r2
 80063d2:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80063d4:	4b10      	ldr	r3, [pc, #64]	@ (8006418 <HAL_RCC_OscConfig+0x778>)
 80063d6:	681b      	ldr	r3, [r3, #0]
 80063d8:	4a0f      	ldr	r2, [pc, #60]	@ (8006418 <HAL_RCC_OscConfig+0x778>)
 80063da:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80063de:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80063e0:	4b0d      	ldr	r3, [pc, #52]	@ (8006418 <HAL_RCC_OscConfig+0x778>)
 80063e2:	68db      	ldr	r3, [r3, #12]
 80063e4:	4a0c      	ldr	r2, [pc, #48]	@ (8006418 <HAL_RCC_OscConfig+0x778>)
 80063e6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80063ea:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80063ec:	f7fc fda4 	bl	8002f38 <HAL_GetTick>
 80063f0:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80063f2:	e008      	b.n	8006406 <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80063f4:	f7fc fda0 	bl	8002f38 <HAL_GetTick>
 80063f8:	4602      	mov	r2, r0
 80063fa:	693b      	ldr	r3, [r7, #16]
 80063fc:	1ad3      	subs	r3, r2, r3
 80063fe:	2b02      	cmp	r3, #2
 8006400:	d901      	bls.n	8006406 <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 8006402:	2303      	movs	r3, #3
 8006404:	e058      	b.n	80064b8 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006406:	4b04      	ldr	r3, [pc, #16]	@ (8006418 <HAL_RCC_OscConfig+0x778>)
 8006408:	681b      	ldr	r3, [r3, #0]
 800640a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800640e:	2b00      	cmp	r3, #0
 8006410:	d0f0      	beq.n	80063f4 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8006412:	e050      	b.n	80064b6 <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8006414:	2301      	movs	r3, #1
 8006416:	e04f      	b.n	80064b8 <HAL_RCC_OscConfig+0x818>
 8006418:	40021000 	.word	0x40021000
 800641c:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006420:	4b27      	ldr	r3, [pc, #156]	@ (80064c0 <HAL_RCC_OscConfig+0x820>)
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006428:	2b00      	cmp	r3, #0
 800642a:	d144      	bne.n	80064b6 <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 800642c:	4b24      	ldr	r3, [pc, #144]	@ (80064c0 <HAL_RCC_OscConfig+0x820>)
 800642e:	681b      	ldr	r3, [r3, #0]
 8006430:	4a23      	ldr	r2, [pc, #140]	@ (80064c0 <HAL_RCC_OscConfig+0x820>)
 8006432:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8006436:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8006438:	4b21      	ldr	r3, [pc, #132]	@ (80064c0 <HAL_RCC_OscConfig+0x820>)
 800643a:	68db      	ldr	r3, [r3, #12]
 800643c:	4a20      	ldr	r2, [pc, #128]	@ (80064c0 <HAL_RCC_OscConfig+0x820>)
 800643e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8006442:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8006444:	f7fc fd78 	bl	8002f38 <HAL_GetTick>
 8006448:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800644a:	e008      	b.n	800645e <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800644c:	f7fc fd74 	bl	8002f38 <HAL_GetTick>
 8006450:	4602      	mov	r2, r0
 8006452:	693b      	ldr	r3, [r7, #16]
 8006454:	1ad3      	subs	r3, r2, r3
 8006456:	2b02      	cmp	r3, #2
 8006458:	d901      	bls.n	800645e <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 800645a:	2303      	movs	r3, #3
 800645c:	e02c      	b.n	80064b8 <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800645e:	4b18      	ldr	r3, [pc, #96]	@ (80064c0 <HAL_RCC_OscConfig+0x820>)
 8006460:	681b      	ldr	r3, [r3, #0]
 8006462:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006466:	2b00      	cmp	r3, #0
 8006468:	d0f0      	beq.n	800644c <HAL_RCC_OscConfig+0x7ac>
 800646a:	e024      	b.n	80064b6 <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 800646c:	69bb      	ldr	r3, [r7, #24]
 800646e:	2b0c      	cmp	r3, #12
 8006470:	d01f      	beq.n	80064b2 <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006472:	4b13      	ldr	r3, [pc, #76]	@ (80064c0 <HAL_RCC_OscConfig+0x820>)
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	4a12      	ldr	r2, [pc, #72]	@ (80064c0 <HAL_RCC_OscConfig+0x820>)
 8006478:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800647c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800647e:	f7fc fd5b 	bl	8002f38 <HAL_GetTick>
 8006482:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006484:	e008      	b.n	8006498 <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006486:	f7fc fd57 	bl	8002f38 <HAL_GetTick>
 800648a:	4602      	mov	r2, r0
 800648c:	693b      	ldr	r3, [r7, #16]
 800648e:	1ad3      	subs	r3, r2, r3
 8006490:	2b02      	cmp	r3, #2
 8006492:	d901      	bls.n	8006498 <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 8006494:	2303      	movs	r3, #3
 8006496:	e00f      	b.n	80064b8 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006498:	4b09      	ldr	r3, [pc, #36]	@ (80064c0 <HAL_RCC_OscConfig+0x820>)
 800649a:	681b      	ldr	r3, [r3, #0]
 800649c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80064a0:	2b00      	cmp	r3, #0
 80064a2:	d1f0      	bne.n	8006486 <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 80064a4:	4b06      	ldr	r3, [pc, #24]	@ (80064c0 <HAL_RCC_OscConfig+0x820>)
 80064a6:	68da      	ldr	r2, [r3, #12]
 80064a8:	4905      	ldr	r1, [pc, #20]	@ (80064c0 <HAL_RCC_OscConfig+0x820>)
 80064aa:	4b06      	ldr	r3, [pc, #24]	@ (80064c4 <HAL_RCC_OscConfig+0x824>)
 80064ac:	4013      	ands	r3, r2
 80064ae:	60cb      	str	r3, [r1, #12]
 80064b0:	e001      	b.n	80064b6 <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80064b2:	2301      	movs	r3, #1
 80064b4:	e000      	b.n	80064b8 <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 80064b6:	2300      	movs	r3, #0
}
 80064b8:	4618      	mov	r0, r3
 80064ba:	3720      	adds	r7, #32
 80064bc:	46bd      	mov	sp, r7
 80064be:	bd80      	pop	{r7, pc}
 80064c0:	40021000 	.word	0x40021000
 80064c4:	feeefffc 	.word	0xfeeefffc

080064c8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80064c8:	b580      	push	{r7, lr}
 80064ca:	b084      	sub	sp, #16
 80064cc:	af00      	add	r7, sp, #0
 80064ce:	6078      	str	r0, [r7, #4]
 80064d0:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	2b00      	cmp	r3, #0
 80064d6:	d101      	bne.n	80064dc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80064d8:	2301      	movs	r3, #1
 80064da:	e0e7      	b.n	80066ac <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80064dc:	4b75      	ldr	r3, [pc, #468]	@ (80066b4 <HAL_RCC_ClockConfig+0x1ec>)
 80064de:	681b      	ldr	r3, [r3, #0]
 80064e0:	f003 0307 	and.w	r3, r3, #7
 80064e4:	683a      	ldr	r2, [r7, #0]
 80064e6:	429a      	cmp	r2, r3
 80064e8:	d910      	bls.n	800650c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80064ea:	4b72      	ldr	r3, [pc, #456]	@ (80066b4 <HAL_RCC_ClockConfig+0x1ec>)
 80064ec:	681b      	ldr	r3, [r3, #0]
 80064ee:	f023 0207 	bic.w	r2, r3, #7
 80064f2:	4970      	ldr	r1, [pc, #448]	@ (80066b4 <HAL_RCC_ClockConfig+0x1ec>)
 80064f4:	683b      	ldr	r3, [r7, #0]
 80064f6:	4313      	orrs	r3, r2
 80064f8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80064fa:	4b6e      	ldr	r3, [pc, #440]	@ (80066b4 <HAL_RCC_ClockConfig+0x1ec>)
 80064fc:	681b      	ldr	r3, [r3, #0]
 80064fe:	f003 0307 	and.w	r3, r3, #7
 8006502:	683a      	ldr	r2, [r7, #0]
 8006504:	429a      	cmp	r2, r3
 8006506:	d001      	beq.n	800650c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8006508:	2301      	movs	r3, #1
 800650a:	e0cf      	b.n	80066ac <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	681b      	ldr	r3, [r3, #0]
 8006510:	f003 0302 	and.w	r3, r3, #2
 8006514:	2b00      	cmp	r3, #0
 8006516:	d010      	beq.n	800653a <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	689a      	ldr	r2, [r3, #8]
 800651c:	4b66      	ldr	r3, [pc, #408]	@ (80066b8 <HAL_RCC_ClockConfig+0x1f0>)
 800651e:	689b      	ldr	r3, [r3, #8]
 8006520:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8006524:	429a      	cmp	r2, r3
 8006526:	d908      	bls.n	800653a <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006528:	4b63      	ldr	r3, [pc, #396]	@ (80066b8 <HAL_RCC_ClockConfig+0x1f0>)
 800652a:	689b      	ldr	r3, [r3, #8]
 800652c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	689b      	ldr	r3, [r3, #8]
 8006534:	4960      	ldr	r1, [pc, #384]	@ (80066b8 <HAL_RCC_ClockConfig+0x1f0>)
 8006536:	4313      	orrs	r3, r2
 8006538:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	681b      	ldr	r3, [r3, #0]
 800653e:	f003 0301 	and.w	r3, r3, #1
 8006542:	2b00      	cmp	r3, #0
 8006544:	d04c      	beq.n	80065e0 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	685b      	ldr	r3, [r3, #4]
 800654a:	2b03      	cmp	r3, #3
 800654c:	d107      	bne.n	800655e <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800654e:	4b5a      	ldr	r3, [pc, #360]	@ (80066b8 <HAL_RCC_ClockConfig+0x1f0>)
 8006550:	681b      	ldr	r3, [r3, #0]
 8006552:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006556:	2b00      	cmp	r3, #0
 8006558:	d121      	bne.n	800659e <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 800655a:	2301      	movs	r3, #1
 800655c:	e0a6      	b.n	80066ac <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	685b      	ldr	r3, [r3, #4]
 8006562:	2b02      	cmp	r3, #2
 8006564:	d107      	bne.n	8006576 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006566:	4b54      	ldr	r3, [pc, #336]	@ (80066b8 <HAL_RCC_ClockConfig+0x1f0>)
 8006568:	681b      	ldr	r3, [r3, #0]
 800656a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800656e:	2b00      	cmp	r3, #0
 8006570:	d115      	bne.n	800659e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8006572:	2301      	movs	r3, #1
 8006574:	e09a      	b.n	80066ac <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	685b      	ldr	r3, [r3, #4]
 800657a:	2b00      	cmp	r3, #0
 800657c:	d107      	bne.n	800658e <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800657e:	4b4e      	ldr	r3, [pc, #312]	@ (80066b8 <HAL_RCC_ClockConfig+0x1f0>)
 8006580:	681b      	ldr	r3, [r3, #0]
 8006582:	f003 0302 	and.w	r3, r3, #2
 8006586:	2b00      	cmp	r3, #0
 8006588:	d109      	bne.n	800659e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800658a:	2301      	movs	r3, #1
 800658c:	e08e      	b.n	80066ac <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800658e:	4b4a      	ldr	r3, [pc, #296]	@ (80066b8 <HAL_RCC_ClockConfig+0x1f0>)
 8006590:	681b      	ldr	r3, [r3, #0]
 8006592:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006596:	2b00      	cmp	r3, #0
 8006598:	d101      	bne.n	800659e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800659a:	2301      	movs	r3, #1
 800659c:	e086      	b.n	80066ac <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800659e:	4b46      	ldr	r3, [pc, #280]	@ (80066b8 <HAL_RCC_ClockConfig+0x1f0>)
 80065a0:	689b      	ldr	r3, [r3, #8]
 80065a2:	f023 0203 	bic.w	r2, r3, #3
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	685b      	ldr	r3, [r3, #4]
 80065aa:	4943      	ldr	r1, [pc, #268]	@ (80066b8 <HAL_RCC_ClockConfig+0x1f0>)
 80065ac:	4313      	orrs	r3, r2
 80065ae:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80065b0:	f7fc fcc2 	bl	8002f38 <HAL_GetTick>
 80065b4:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80065b6:	e00a      	b.n	80065ce <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80065b8:	f7fc fcbe 	bl	8002f38 <HAL_GetTick>
 80065bc:	4602      	mov	r2, r0
 80065be:	68fb      	ldr	r3, [r7, #12]
 80065c0:	1ad3      	subs	r3, r2, r3
 80065c2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80065c6:	4293      	cmp	r3, r2
 80065c8:	d901      	bls.n	80065ce <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 80065ca:	2303      	movs	r3, #3
 80065cc:	e06e      	b.n	80066ac <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80065ce:	4b3a      	ldr	r3, [pc, #232]	@ (80066b8 <HAL_RCC_ClockConfig+0x1f0>)
 80065d0:	689b      	ldr	r3, [r3, #8]
 80065d2:	f003 020c 	and.w	r2, r3, #12
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	685b      	ldr	r3, [r3, #4]
 80065da:	009b      	lsls	r3, r3, #2
 80065dc:	429a      	cmp	r2, r3
 80065de:	d1eb      	bne.n	80065b8 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	681b      	ldr	r3, [r3, #0]
 80065e4:	f003 0302 	and.w	r3, r3, #2
 80065e8:	2b00      	cmp	r3, #0
 80065ea:	d010      	beq.n	800660e <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	689a      	ldr	r2, [r3, #8]
 80065f0:	4b31      	ldr	r3, [pc, #196]	@ (80066b8 <HAL_RCC_ClockConfig+0x1f0>)
 80065f2:	689b      	ldr	r3, [r3, #8]
 80065f4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80065f8:	429a      	cmp	r2, r3
 80065fa:	d208      	bcs.n	800660e <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80065fc:	4b2e      	ldr	r3, [pc, #184]	@ (80066b8 <HAL_RCC_ClockConfig+0x1f0>)
 80065fe:	689b      	ldr	r3, [r3, #8]
 8006600:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	689b      	ldr	r3, [r3, #8]
 8006608:	492b      	ldr	r1, [pc, #172]	@ (80066b8 <HAL_RCC_ClockConfig+0x1f0>)
 800660a:	4313      	orrs	r3, r2
 800660c:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800660e:	4b29      	ldr	r3, [pc, #164]	@ (80066b4 <HAL_RCC_ClockConfig+0x1ec>)
 8006610:	681b      	ldr	r3, [r3, #0]
 8006612:	f003 0307 	and.w	r3, r3, #7
 8006616:	683a      	ldr	r2, [r7, #0]
 8006618:	429a      	cmp	r2, r3
 800661a:	d210      	bcs.n	800663e <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800661c:	4b25      	ldr	r3, [pc, #148]	@ (80066b4 <HAL_RCC_ClockConfig+0x1ec>)
 800661e:	681b      	ldr	r3, [r3, #0]
 8006620:	f023 0207 	bic.w	r2, r3, #7
 8006624:	4923      	ldr	r1, [pc, #140]	@ (80066b4 <HAL_RCC_ClockConfig+0x1ec>)
 8006626:	683b      	ldr	r3, [r7, #0]
 8006628:	4313      	orrs	r3, r2
 800662a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800662c:	4b21      	ldr	r3, [pc, #132]	@ (80066b4 <HAL_RCC_ClockConfig+0x1ec>)
 800662e:	681b      	ldr	r3, [r3, #0]
 8006630:	f003 0307 	and.w	r3, r3, #7
 8006634:	683a      	ldr	r2, [r7, #0]
 8006636:	429a      	cmp	r2, r3
 8006638:	d001      	beq.n	800663e <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 800663a:	2301      	movs	r3, #1
 800663c:	e036      	b.n	80066ac <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	681b      	ldr	r3, [r3, #0]
 8006642:	f003 0304 	and.w	r3, r3, #4
 8006646:	2b00      	cmp	r3, #0
 8006648:	d008      	beq.n	800665c <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800664a:	4b1b      	ldr	r3, [pc, #108]	@ (80066b8 <HAL_RCC_ClockConfig+0x1f0>)
 800664c:	689b      	ldr	r3, [r3, #8]
 800664e:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	68db      	ldr	r3, [r3, #12]
 8006656:	4918      	ldr	r1, [pc, #96]	@ (80066b8 <HAL_RCC_ClockConfig+0x1f0>)
 8006658:	4313      	orrs	r3, r2
 800665a:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	681b      	ldr	r3, [r3, #0]
 8006660:	f003 0308 	and.w	r3, r3, #8
 8006664:	2b00      	cmp	r3, #0
 8006666:	d009      	beq.n	800667c <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006668:	4b13      	ldr	r3, [pc, #76]	@ (80066b8 <HAL_RCC_ClockConfig+0x1f0>)
 800666a:	689b      	ldr	r3, [r3, #8]
 800666c:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	691b      	ldr	r3, [r3, #16]
 8006674:	00db      	lsls	r3, r3, #3
 8006676:	4910      	ldr	r1, [pc, #64]	@ (80066b8 <HAL_RCC_ClockConfig+0x1f0>)
 8006678:	4313      	orrs	r3, r2
 800667a:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800667c:	f000 f824 	bl	80066c8 <HAL_RCC_GetSysClockFreq>
 8006680:	4602      	mov	r2, r0
 8006682:	4b0d      	ldr	r3, [pc, #52]	@ (80066b8 <HAL_RCC_ClockConfig+0x1f0>)
 8006684:	689b      	ldr	r3, [r3, #8]
 8006686:	091b      	lsrs	r3, r3, #4
 8006688:	f003 030f 	and.w	r3, r3, #15
 800668c:	490b      	ldr	r1, [pc, #44]	@ (80066bc <HAL_RCC_ClockConfig+0x1f4>)
 800668e:	5ccb      	ldrb	r3, [r1, r3]
 8006690:	f003 031f 	and.w	r3, r3, #31
 8006694:	fa22 f303 	lsr.w	r3, r2, r3
 8006698:	4a09      	ldr	r2, [pc, #36]	@ (80066c0 <HAL_RCC_ClockConfig+0x1f8>)
 800669a:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800669c:	4b09      	ldr	r3, [pc, #36]	@ (80066c4 <HAL_RCC_ClockConfig+0x1fc>)
 800669e:	681b      	ldr	r3, [r3, #0]
 80066a0:	4618      	mov	r0, r3
 80066a2:	f7fb ffbd 	bl	8002620 <HAL_InitTick>
 80066a6:	4603      	mov	r3, r0
 80066a8:	72fb      	strb	r3, [r7, #11]

  return status;
 80066aa:	7afb      	ldrb	r3, [r7, #11]
}
 80066ac:	4618      	mov	r0, r3
 80066ae:	3710      	adds	r7, #16
 80066b0:	46bd      	mov	sp, r7
 80066b2:	bd80      	pop	{r7, pc}
 80066b4:	40022000 	.word	0x40022000
 80066b8:	40021000 	.word	0x40021000
 80066bc:	0801ad84 	.word	0x0801ad84
 80066c0:	20000040 	.word	0x20000040
 80066c4:	20000044 	.word	0x20000044

080066c8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80066c8:	b480      	push	{r7}
 80066ca:	b089      	sub	sp, #36	@ 0x24
 80066cc:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80066ce:	2300      	movs	r3, #0
 80066d0:	61fb      	str	r3, [r7, #28]
 80066d2:	2300      	movs	r3, #0
 80066d4:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80066d6:	4b3e      	ldr	r3, [pc, #248]	@ (80067d0 <HAL_RCC_GetSysClockFreq+0x108>)
 80066d8:	689b      	ldr	r3, [r3, #8]
 80066da:	f003 030c 	and.w	r3, r3, #12
 80066de:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80066e0:	4b3b      	ldr	r3, [pc, #236]	@ (80067d0 <HAL_RCC_GetSysClockFreq+0x108>)
 80066e2:	68db      	ldr	r3, [r3, #12]
 80066e4:	f003 0303 	and.w	r3, r3, #3
 80066e8:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80066ea:	693b      	ldr	r3, [r7, #16]
 80066ec:	2b00      	cmp	r3, #0
 80066ee:	d005      	beq.n	80066fc <HAL_RCC_GetSysClockFreq+0x34>
 80066f0:	693b      	ldr	r3, [r7, #16]
 80066f2:	2b0c      	cmp	r3, #12
 80066f4:	d121      	bne.n	800673a <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80066f6:	68fb      	ldr	r3, [r7, #12]
 80066f8:	2b01      	cmp	r3, #1
 80066fa:	d11e      	bne.n	800673a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80066fc:	4b34      	ldr	r3, [pc, #208]	@ (80067d0 <HAL_RCC_GetSysClockFreq+0x108>)
 80066fe:	681b      	ldr	r3, [r3, #0]
 8006700:	f003 0308 	and.w	r3, r3, #8
 8006704:	2b00      	cmp	r3, #0
 8006706:	d107      	bne.n	8006718 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8006708:	4b31      	ldr	r3, [pc, #196]	@ (80067d0 <HAL_RCC_GetSysClockFreq+0x108>)
 800670a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800670e:	0a1b      	lsrs	r3, r3, #8
 8006710:	f003 030f 	and.w	r3, r3, #15
 8006714:	61fb      	str	r3, [r7, #28]
 8006716:	e005      	b.n	8006724 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8006718:	4b2d      	ldr	r3, [pc, #180]	@ (80067d0 <HAL_RCC_GetSysClockFreq+0x108>)
 800671a:	681b      	ldr	r3, [r3, #0]
 800671c:	091b      	lsrs	r3, r3, #4
 800671e:	f003 030f 	and.w	r3, r3, #15
 8006722:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8006724:	4a2b      	ldr	r2, [pc, #172]	@ (80067d4 <HAL_RCC_GetSysClockFreq+0x10c>)
 8006726:	69fb      	ldr	r3, [r7, #28]
 8006728:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800672c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800672e:	693b      	ldr	r3, [r7, #16]
 8006730:	2b00      	cmp	r3, #0
 8006732:	d10d      	bne.n	8006750 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8006734:	69fb      	ldr	r3, [r7, #28]
 8006736:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8006738:	e00a      	b.n	8006750 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800673a:	693b      	ldr	r3, [r7, #16]
 800673c:	2b04      	cmp	r3, #4
 800673e:	d102      	bne.n	8006746 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8006740:	4b25      	ldr	r3, [pc, #148]	@ (80067d8 <HAL_RCC_GetSysClockFreq+0x110>)
 8006742:	61bb      	str	r3, [r7, #24]
 8006744:	e004      	b.n	8006750 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8006746:	693b      	ldr	r3, [r7, #16]
 8006748:	2b08      	cmp	r3, #8
 800674a:	d101      	bne.n	8006750 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800674c:	4b23      	ldr	r3, [pc, #140]	@ (80067dc <HAL_RCC_GetSysClockFreq+0x114>)
 800674e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8006750:	693b      	ldr	r3, [r7, #16]
 8006752:	2b0c      	cmp	r3, #12
 8006754:	d134      	bne.n	80067c0 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8006756:	4b1e      	ldr	r3, [pc, #120]	@ (80067d0 <HAL_RCC_GetSysClockFreq+0x108>)
 8006758:	68db      	ldr	r3, [r3, #12]
 800675a:	f003 0303 	and.w	r3, r3, #3
 800675e:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8006760:	68bb      	ldr	r3, [r7, #8]
 8006762:	2b02      	cmp	r3, #2
 8006764:	d003      	beq.n	800676e <HAL_RCC_GetSysClockFreq+0xa6>
 8006766:	68bb      	ldr	r3, [r7, #8]
 8006768:	2b03      	cmp	r3, #3
 800676a:	d003      	beq.n	8006774 <HAL_RCC_GetSysClockFreq+0xac>
 800676c:	e005      	b.n	800677a <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800676e:	4b1a      	ldr	r3, [pc, #104]	@ (80067d8 <HAL_RCC_GetSysClockFreq+0x110>)
 8006770:	617b      	str	r3, [r7, #20]
      break;
 8006772:	e005      	b.n	8006780 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8006774:	4b19      	ldr	r3, [pc, #100]	@ (80067dc <HAL_RCC_GetSysClockFreq+0x114>)
 8006776:	617b      	str	r3, [r7, #20]
      break;
 8006778:	e002      	b.n	8006780 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800677a:	69fb      	ldr	r3, [r7, #28]
 800677c:	617b      	str	r3, [r7, #20]
      break;
 800677e:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8006780:	4b13      	ldr	r3, [pc, #76]	@ (80067d0 <HAL_RCC_GetSysClockFreq+0x108>)
 8006782:	68db      	ldr	r3, [r3, #12]
 8006784:	091b      	lsrs	r3, r3, #4
 8006786:	f003 0307 	and.w	r3, r3, #7
 800678a:	3301      	adds	r3, #1
 800678c:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800678e:	4b10      	ldr	r3, [pc, #64]	@ (80067d0 <HAL_RCC_GetSysClockFreq+0x108>)
 8006790:	68db      	ldr	r3, [r3, #12]
 8006792:	0a1b      	lsrs	r3, r3, #8
 8006794:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006798:	697a      	ldr	r2, [r7, #20]
 800679a:	fb03 f202 	mul.w	r2, r3, r2
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80067a4:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80067a6:	4b0a      	ldr	r3, [pc, #40]	@ (80067d0 <HAL_RCC_GetSysClockFreq+0x108>)
 80067a8:	68db      	ldr	r3, [r3, #12]
 80067aa:	0e5b      	lsrs	r3, r3, #25
 80067ac:	f003 0303 	and.w	r3, r3, #3
 80067b0:	3301      	adds	r3, #1
 80067b2:	005b      	lsls	r3, r3, #1
 80067b4:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80067b6:	697a      	ldr	r2, [r7, #20]
 80067b8:	683b      	ldr	r3, [r7, #0]
 80067ba:	fbb2 f3f3 	udiv	r3, r2, r3
 80067be:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80067c0:	69bb      	ldr	r3, [r7, #24]
}
 80067c2:	4618      	mov	r0, r3
 80067c4:	3724      	adds	r7, #36	@ 0x24
 80067c6:	46bd      	mov	sp, r7
 80067c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067cc:	4770      	bx	lr
 80067ce:	bf00      	nop
 80067d0:	40021000 	.word	0x40021000
 80067d4:	0801ad9c 	.word	0x0801ad9c
 80067d8:	00f42400 	.word	0x00f42400
 80067dc:	007a1200 	.word	0x007a1200

080067e0 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80067e0:	b480      	push	{r7}
 80067e2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80067e4:	4b03      	ldr	r3, [pc, #12]	@ (80067f4 <HAL_RCC_GetHCLKFreq+0x14>)
 80067e6:	681b      	ldr	r3, [r3, #0]
}
 80067e8:	4618      	mov	r0, r3
 80067ea:	46bd      	mov	sp, r7
 80067ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067f0:	4770      	bx	lr
 80067f2:	bf00      	nop
 80067f4:	20000040 	.word	0x20000040

080067f8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80067f8:	b580      	push	{r7, lr}
 80067fa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80067fc:	f7ff fff0 	bl	80067e0 <HAL_RCC_GetHCLKFreq>
 8006800:	4602      	mov	r2, r0
 8006802:	4b06      	ldr	r3, [pc, #24]	@ (800681c <HAL_RCC_GetPCLK1Freq+0x24>)
 8006804:	689b      	ldr	r3, [r3, #8]
 8006806:	0a1b      	lsrs	r3, r3, #8
 8006808:	f003 0307 	and.w	r3, r3, #7
 800680c:	4904      	ldr	r1, [pc, #16]	@ (8006820 <HAL_RCC_GetPCLK1Freq+0x28>)
 800680e:	5ccb      	ldrb	r3, [r1, r3]
 8006810:	f003 031f 	and.w	r3, r3, #31
 8006814:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006818:	4618      	mov	r0, r3
 800681a:	bd80      	pop	{r7, pc}
 800681c:	40021000 	.word	0x40021000
 8006820:	0801ad94 	.word	0x0801ad94

08006824 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006824:	b580      	push	{r7, lr}
 8006826:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8006828:	f7ff ffda 	bl	80067e0 <HAL_RCC_GetHCLKFreq>
 800682c:	4602      	mov	r2, r0
 800682e:	4b06      	ldr	r3, [pc, #24]	@ (8006848 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006830:	689b      	ldr	r3, [r3, #8]
 8006832:	0adb      	lsrs	r3, r3, #11
 8006834:	f003 0307 	and.w	r3, r3, #7
 8006838:	4904      	ldr	r1, [pc, #16]	@ (800684c <HAL_RCC_GetPCLK2Freq+0x28>)
 800683a:	5ccb      	ldrb	r3, [r1, r3]
 800683c:	f003 031f 	and.w	r3, r3, #31
 8006840:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006844:	4618      	mov	r0, r3
 8006846:	bd80      	pop	{r7, pc}
 8006848:	40021000 	.word	0x40021000
 800684c:	0801ad94 	.word	0x0801ad94

08006850 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8006850:	b480      	push	{r7}
 8006852:	b083      	sub	sp, #12
 8006854:	af00      	add	r7, sp, #0
 8006856:	6078      	str	r0, [r7, #4]
 8006858:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	220f      	movs	r2, #15
 800685e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8006860:	4b12      	ldr	r3, [pc, #72]	@ (80068ac <HAL_RCC_GetClockConfig+0x5c>)
 8006862:	689b      	ldr	r3, [r3, #8]
 8006864:	f003 0203 	and.w	r2, r3, #3
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 800686c:	4b0f      	ldr	r3, [pc, #60]	@ (80068ac <HAL_RCC_GetClockConfig+0x5c>)
 800686e:	689b      	ldr	r3, [r3, #8]
 8006870:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8006878:	4b0c      	ldr	r3, [pc, #48]	@ (80068ac <HAL_RCC_GetClockConfig+0x5c>)
 800687a:	689b      	ldr	r3, [r3, #8]
 800687c:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8006884:	4b09      	ldr	r3, [pc, #36]	@ (80068ac <HAL_RCC_GetClockConfig+0x5c>)
 8006886:	689b      	ldr	r3, [r3, #8]
 8006888:	08db      	lsrs	r3, r3, #3
 800688a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8006892:	4b07      	ldr	r3, [pc, #28]	@ (80068b0 <HAL_RCC_GetClockConfig+0x60>)
 8006894:	681b      	ldr	r3, [r3, #0]
 8006896:	f003 0207 	and.w	r2, r3, #7
 800689a:	683b      	ldr	r3, [r7, #0]
 800689c:	601a      	str	r2, [r3, #0]
}
 800689e:	bf00      	nop
 80068a0:	370c      	adds	r7, #12
 80068a2:	46bd      	mov	sp, r7
 80068a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068a8:	4770      	bx	lr
 80068aa:	bf00      	nop
 80068ac:	40021000 	.word	0x40021000
 80068b0:	40022000 	.word	0x40022000

080068b4 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80068b4:	b580      	push	{r7, lr}
 80068b6:	b086      	sub	sp, #24
 80068b8:	af00      	add	r7, sp, #0
 80068ba:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80068bc:	2300      	movs	r3, #0
 80068be:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80068c0:	4b2a      	ldr	r3, [pc, #168]	@ (800696c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80068c2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80068c4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80068c8:	2b00      	cmp	r3, #0
 80068ca:	d003      	beq.n	80068d4 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80068cc:	f7ff f984 	bl	8005bd8 <HAL_PWREx_GetVoltageRange>
 80068d0:	6178      	str	r0, [r7, #20]
 80068d2:	e014      	b.n	80068fe <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80068d4:	4b25      	ldr	r3, [pc, #148]	@ (800696c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80068d6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80068d8:	4a24      	ldr	r2, [pc, #144]	@ (800696c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80068da:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80068de:	6593      	str	r3, [r2, #88]	@ 0x58
 80068e0:	4b22      	ldr	r3, [pc, #136]	@ (800696c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80068e2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80068e4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80068e8:	60fb      	str	r3, [r7, #12]
 80068ea:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80068ec:	f7ff f974 	bl	8005bd8 <HAL_PWREx_GetVoltageRange>
 80068f0:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80068f2:	4b1e      	ldr	r3, [pc, #120]	@ (800696c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80068f4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80068f6:	4a1d      	ldr	r2, [pc, #116]	@ (800696c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80068f8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80068fc:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80068fe:	697b      	ldr	r3, [r7, #20]
 8006900:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006904:	d10b      	bne.n	800691e <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	2b80      	cmp	r3, #128	@ 0x80
 800690a:	d919      	bls.n	8006940 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	2ba0      	cmp	r3, #160	@ 0xa0
 8006910:	d902      	bls.n	8006918 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8006912:	2302      	movs	r3, #2
 8006914:	613b      	str	r3, [r7, #16]
 8006916:	e013      	b.n	8006940 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8006918:	2301      	movs	r3, #1
 800691a:	613b      	str	r3, [r7, #16]
 800691c:	e010      	b.n	8006940 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	2b80      	cmp	r3, #128	@ 0x80
 8006922:	d902      	bls.n	800692a <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8006924:	2303      	movs	r3, #3
 8006926:	613b      	str	r3, [r7, #16]
 8006928:	e00a      	b.n	8006940 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	2b80      	cmp	r3, #128	@ 0x80
 800692e:	d102      	bne.n	8006936 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8006930:	2302      	movs	r3, #2
 8006932:	613b      	str	r3, [r7, #16]
 8006934:	e004      	b.n	8006940 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	2b70      	cmp	r3, #112	@ 0x70
 800693a:	d101      	bne.n	8006940 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800693c:	2301      	movs	r3, #1
 800693e:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8006940:	4b0b      	ldr	r3, [pc, #44]	@ (8006970 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8006942:	681b      	ldr	r3, [r3, #0]
 8006944:	f023 0207 	bic.w	r2, r3, #7
 8006948:	4909      	ldr	r1, [pc, #36]	@ (8006970 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800694a:	693b      	ldr	r3, [r7, #16]
 800694c:	4313      	orrs	r3, r2
 800694e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8006950:	4b07      	ldr	r3, [pc, #28]	@ (8006970 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8006952:	681b      	ldr	r3, [r3, #0]
 8006954:	f003 0307 	and.w	r3, r3, #7
 8006958:	693a      	ldr	r2, [r7, #16]
 800695a:	429a      	cmp	r2, r3
 800695c:	d001      	beq.n	8006962 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800695e:	2301      	movs	r3, #1
 8006960:	e000      	b.n	8006964 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8006962:	2300      	movs	r3, #0
}
 8006964:	4618      	mov	r0, r3
 8006966:	3718      	adds	r7, #24
 8006968:	46bd      	mov	sp, r7
 800696a:	bd80      	pop	{r7, pc}
 800696c:	40021000 	.word	0x40021000
 8006970:	40022000 	.word	0x40022000

08006974 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006974:	b580      	push	{r7, lr}
 8006976:	b086      	sub	sp, #24
 8006978:	af00      	add	r7, sp, #0
 800697a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800697c:	2300      	movs	r3, #0
 800697e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8006980:	2300      	movs	r3, #0
 8006982:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	681b      	ldr	r3, [r3, #0]
 8006988:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800698c:	2b00      	cmp	r3, #0
 800698e:	d031      	beq.n	80069f4 <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006994:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8006998:	d01a      	beq.n	80069d0 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 800699a:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 800699e:	d814      	bhi.n	80069ca <HAL_RCCEx_PeriphCLKConfig+0x56>
 80069a0:	2b00      	cmp	r3, #0
 80069a2:	d009      	beq.n	80069b8 <HAL_RCCEx_PeriphCLKConfig+0x44>
 80069a4:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80069a8:	d10f      	bne.n	80069ca <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 80069aa:	4b5d      	ldr	r3, [pc, #372]	@ (8006b20 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80069ac:	68db      	ldr	r3, [r3, #12]
 80069ae:	4a5c      	ldr	r2, [pc, #368]	@ (8006b20 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80069b0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80069b4:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80069b6:	e00c      	b.n	80069d2 <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	3304      	adds	r3, #4
 80069bc:	2100      	movs	r1, #0
 80069be:	4618      	mov	r0, r3
 80069c0:	f000 f9de 	bl	8006d80 <RCCEx_PLLSAI1_Config>
 80069c4:	4603      	mov	r3, r0
 80069c6:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80069c8:	e003      	b.n	80069d2 <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80069ca:	2301      	movs	r3, #1
 80069cc:	74fb      	strb	r3, [r7, #19]
      break;
 80069ce:	e000      	b.n	80069d2 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 80069d0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80069d2:	7cfb      	ldrb	r3, [r7, #19]
 80069d4:	2b00      	cmp	r3, #0
 80069d6:	d10b      	bne.n	80069f0 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80069d8:	4b51      	ldr	r3, [pc, #324]	@ (8006b20 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80069da:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80069de:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80069e6:	494e      	ldr	r1, [pc, #312]	@ (8006b20 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80069e8:	4313      	orrs	r3, r2
 80069ea:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 80069ee:	e001      	b.n	80069f4 <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80069f0:	7cfb      	ldrb	r3, [r7, #19]
 80069f2:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	681b      	ldr	r3, [r3, #0]
 80069f8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80069fc:	2b00      	cmp	r3, #0
 80069fe:	f000 809e 	beq.w	8006b3e <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006a02:	2300      	movs	r3, #0
 8006a04:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8006a06:	4b46      	ldr	r3, [pc, #280]	@ (8006b20 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8006a08:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006a0a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006a0e:	2b00      	cmp	r3, #0
 8006a10:	d101      	bne.n	8006a16 <HAL_RCCEx_PeriphCLKConfig+0xa2>
 8006a12:	2301      	movs	r3, #1
 8006a14:	e000      	b.n	8006a18 <HAL_RCCEx_PeriphCLKConfig+0xa4>
 8006a16:	2300      	movs	r3, #0
 8006a18:	2b00      	cmp	r3, #0
 8006a1a:	d00d      	beq.n	8006a38 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006a1c:	4b40      	ldr	r3, [pc, #256]	@ (8006b20 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8006a1e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006a20:	4a3f      	ldr	r2, [pc, #252]	@ (8006b20 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8006a22:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006a26:	6593      	str	r3, [r2, #88]	@ 0x58
 8006a28:	4b3d      	ldr	r3, [pc, #244]	@ (8006b20 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8006a2a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006a2c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006a30:	60bb      	str	r3, [r7, #8]
 8006a32:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006a34:	2301      	movs	r3, #1
 8006a36:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006a38:	4b3a      	ldr	r3, [pc, #232]	@ (8006b24 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8006a3a:	681b      	ldr	r3, [r3, #0]
 8006a3c:	4a39      	ldr	r2, [pc, #228]	@ (8006b24 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8006a3e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006a42:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8006a44:	f7fc fa78 	bl	8002f38 <HAL_GetTick>
 8006a48:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8006a4a:	e009      	b.n	8006a60 <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006a4c:	f7fc fa74 	bl	8002f38 <HAL_GetTick>
 8006a50:	4602      	mov	r2, r0
 8006a52:	68fb      	ldr	r3, [r7, #12]
 8006a54:	1ad3      	subs	r3, r2, r3
 8006a56:	2b02      	cmp	r3, #2
 8006a58:	d902      	bls.n	8006a60 <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 8006a5a:	2303      	movs	r3, #3
 8006a5c:	74fb      	strb	r3, [r7, #19]
        break;
 8006a5e:	e005      	b.n	8006a6c <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8006a60:	4b30      	ldr	r3, [pc, #192]	@ (8006b24 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8006a62:	681b      	ldr	r3, [r3, #0]
 8006a64:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006a68:	2b00      	cmp	r3, #0
 8006a6a:	d0ef      	beq.n	8006a4c <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 8006a6c:	7cfb      	ldrb	r3, [r7, #19]
 8006a6e:	2b00      	cmp	r3, #0
 8006a70:	d15a      	bne.n	8006b28 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8006a72:	4b2b      	ldr	r3, [pc, #172]	@ (8006b20 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8006a74:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006a78:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006a7c:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8006a7e:	697b      	ldr	r3, [r7, #20]
 8006a80:	2b00      	cmp	r3, #0
 8006a82:	d01e      	beq.n	8006ac2 <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006a88:	697a      	ldr	r2, [r7, #20]
 8006a8a:	429a      	cmp	r2, r3
 8006a8c:	d019      	beq.n	8006ac2 <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8006a8e:	4b24      	ldr	r3, [pc, #144]	@ (8006b20 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8006a90:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006a94:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006a98:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8006a9a:	4b21      	ldr	r3, [pc, #132]	@ (8006b20 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8006a9c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006aa0:	4a1f      	ldr	r2, [pc, #124]	@ (8006b20 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8006aa2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006aa6:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8006aaa:	4b1d      	ldr	r3, [pc, #116]	@ (8006b20 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8006aac:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006ab0:	4a1b      	ldr	r2, [pc, #108]	@ (8006b20 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8006ab2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006ab6:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8006aba:	4a19      	ldr	r2, [pc, #100]	@ (8006b20 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8006abc:	697b      	ldr	r3, [r7, #20]
 8006abe:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8006ac2:	697b      	ldr	r3, [r7, #20]
 8006ac4:	f003 0301 	and.w	r3, r3, #1
 8006ac8:	2b00      	cmp	r3, #0
 8006aca:	d016      	beq.n	8006afa <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006acc:	f7fc fa34 	bl	8002f38 <HAL_GetTick>
 8006ad0:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006ad2:	e00b      	b.n	8006aec <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006ad4:	f7fc fa30 	bl	8002f38 <HAL_GetTick>
 8006ad8:	4602      	mov	r2, r0
 8006ada:	68fb      	ldr	r3, [r7, #12]
 8006adc:	1ad3      	subs	r3, r2, r3
 8006ade:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006ae2:	4293      	cmp	r3, r2
 8006ae4:	d902      	bls.n	8006aec <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 8006ae6:	2303      	movs	r3, #3
 8006ae8:	74fb      	strb	r3, [r7, #19]
            break;
 8006aea:	e006      	b.n	8006afa <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006aec:	4b0c      	ldr	r3, [pc, #48]	@ (8006b20 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8006aee:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006af2:	f003 0302 	and.w	r3, r3, #2
 8006af6:	2b00      	cmp	r3, #0
 8006af8:	d0ec      	beq.n	8006ad4 <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 8006afa:	7cfb      	ldrb	r3, [r7, #19]
 8006afc:	2b00      	cmp	r3, #0
 8006afe:	d10b      	bne.n	8006b18 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006b00:	4b07      	ldr	r3, [pc, #28]	@ (8006b20 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8006b02:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006b06:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006b0e:	4904      	ldr	r1, [pc, #16]	@ (8006b20 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8006b10:	4313      	orrs	r3, r2
 8006b12:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8006b16:	e009      	b.n	8006b2c <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8006b18:	7cfb      	ldrb	r3, [r7, #19]
 8006b1a:	74bb      	strb	r3, [r7, #18]
 8006b1c:	e006      	b.n	8006b2c <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 8006b1e:	bf00      	nop
 8006b20:	40021000 	.word	0x40021000
 8006b24:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006b28:	7cfb      	ldrb	r3, [r7, #19]
 8006b2a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006b2c:	7c7b      	ldrb	r3, [r7, #17]
 8006b2e:	2b01      	cmp	r3, #1
 8006b30:	d105      	bne.n	8006b3e <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006b32:	4b8a      	ldr	r3, [pc, #552]	@ (8006d5c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8006b34:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006b36:	4a89      	ldr	r2, [pc, #548]	@ (8006d5c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8006b38:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006b3c:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	681b      	ldr	r3, [r3, #0]
 8006b42:	f003 0301 	and.w	r3, r3, #1
 8006b46:	2b00      	cmp	r3, #0
 8006b48:	d00a      	beq.n	8006b60 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8006b4a:	4b84      	ldr	r3, [pc, #528]	@ (8006d5c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8006b4c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006b50:	f023 0203 	bic.w	r2, r3, #3
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	6a1b      	ldr	r3, [r3, #32]
 8006b58:	4980      	ldr	r1, [pc, #512]	@ (8006d5c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8006b5a:	4313      	orrs	r3, r2
 8006b5c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	681b      	ldr	r3, [r3, #0]
 8006b64:	f003 0302 	and.w	r3, r3, #2
 8006b68:	2b00      	cmp	r3, #0
 8006b6a:	d00a      	beq.n	8006b82 <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8006b6c:	4b7b      	ldr	r3, [pc, #492]	@ (8006d5c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8006b6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006b72:	f023 020c 	bic.w	r2, r3, #12
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006b7a:	4978      	ldr	r1, [pc, #480]	@ (8006d5c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8006b7c:	4313      	orrs	r3, r2
 8006b7e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	681b      	ldr	r3, [r3, #0]
 8006b86:	f003 0320 	and.w	r3, r3, #32
 8006b8a:	2b00      	cmp	r3, #0
 8006b8c:	d00a      	beq.n	8006ba4 <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8006b8e:	4b73      	ldr	r3, [pc, #460]	@ (8006d5c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8006b90:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006b94:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006b9c:	496f      	ldr	r1, [pc, #444]	@ (8006d5c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8006b9e:	4313      	orrs	r3, r2
 8006ba0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	681b      	ldr	r3, [r3, #0]
 8006ba8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006bac:	2b00      	cmp	r3, #0
 8006bae:	d00a      	beq.n	8006bc6 <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8006bb0:	4b6a      	ldr	r3, [pc, #424]	@ (8006d5c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8006bb2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006bb6:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006bbe:	4967      	ldr	r1, [pc, #412]	@ (8006d5c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8006bc0:	4313      	orrs	r3, r2
 8006bc2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	681b      	ldr	r3, [r3, #0]
 8006bca:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006bce:	2b00      	cmp	r3, #0
 8006bd0:	d00a      	beq.n	8006be8 <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8006bd2:	4b62      	ldr	r3, [pc, #392]	@ (8006d5c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8006bd4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006bd8:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006be0:	495e      	ldr	r1, [pc, #376]	@ (8006d5c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8006be2:	4313      	orrs	r3, r2
 8006be4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	681b      	ldr	r3, [r3, #0]
 8006bec:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006bf0:	2b00      	cmp	r3, #0
 8006bf2:	d00a      	beq.n	8006c0a <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8006bf4:	4b59      	ldr	r3, [pc, #356]	@ (8006d5c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8006bf6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006bfa:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006c02:	4956      	ldr	r1, [pc, #344]	@ (8006d5c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8006c04:	4313      	orrs	r3, r2
 8006c06:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	681b      	ldr	r3, [r3, #0]
 8006c0e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006c12:	2b00      	cmp	r3, #0
 8006c14:	d00a      	beq.n	8006c2c <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8006c16:	4b51      	ldr	r3, [pc, #324]	@ (8006d5c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8006c18:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006c1c:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006c24:	494d      	ldr	r1, [pc, #308]	@ (8006d5c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8006c26:	4313      	orrs	r3, r2
 8006c28:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	681b      	ldr	r3, [r3, #0]
 8006c30:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8006c34:	2b00      	cmp	r3, #0
 8006c36:	d028      	beq.n	8006c8a <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8006c38:	4b48      	ldr	r3, [pc, #288]	@ (8006d5c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8006c3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006c3e:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006c46:	4945      	ldr	r1, [pc, #276]	@ (8006d5c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8006c48:	4313      	orrs	r3, r2
 8006c4a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006c52:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006c56:	d106      	bne.n	8006c66 <HAL_RCCEx_PeriphCLKConfig+0x2f2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006c58:	4b40      	ldr	r3, [pc, #256]	@ (8006d5c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8006c5a:	68db      	ldr	r3, [r3, #12]
 8006c5c:	4a3f      	ldr	r2, [pc, #252]	@ (8006d5c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8006c5e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006c62:	60d3      	str	r3, [r2, #12]
 8006c64:	e011      	b.n	8006c8a <HAL_RCCEx_PeriphCLKConfig+0x316>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006c6a:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8006c6e:	d10c      	bne.n	8006c8a <HAL_RCCEx_PeriphCLKConfig+0x316>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	3304      	adds	r3, #4
 8006c74:	2101      	movs	r1, #1
 8006c76:	4618      	mov	r0, r3
 8006c78:	f000 f882 	bl	8006d80 <RCCEx_PLLSAI1_Config>
 8006c7c:	4603      	mov	r3, r0
 8006c7e:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8006c80:	7cfb      	ldrb	r3, [r7, #19]
 8006c82:	2b00      	cmp	r3, #0
 8006c84:	d001      	beq.n	8006c8a <HAL_RCCEx_PeriphCLKConfig+0x316>
        {
          /* set overall return value */
          status = ret;
 8006c86:	7cfb      	ldrb	r3, [r7, #19]
 8006c88:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	681b      	ldr	r3, [r3, #0]
 8006c8e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8006c92:	2b00      	cmp	r3, #0
 8006c94:	d028      	beq.n	8006ce8 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8006c96:	4b31      	ldr	r3, [pc, #196]	@ (8006d5c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8006c98:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006c9c:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006ca4:	492d      	ldr	r1, [pc, #180]	@ (8006d5c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8006ca6:	4313      	orrs	r3, r2
 8006ca8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006cb0:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006cb4:	d106      	bne.n	8006cc4 <HAL_RCCEx_PeriphCLKConfig+0x350>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006cb6:	4b29      	ldr	r3, [pc, #164]	@ (8006d5c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8006cb8:	68db      	ldr	r3, [r3, #12]
 8006cba:	4a28      	ldr	r2, [pc, #160]	@ (8006d5c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8006cbc:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006cc0:	60d3      	str	r3, [r2, #12]
 8006cc2:	e011      	b.n	8006ce8 <HAL_RCCEx_PeriphCLKConfig+0x374>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006cc8:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8006ccc:	d10c      	bne.n	8006ce8 <HAL_RCCEx_PeriphCLKConfig+0x374>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	3304      	adds	r3, #4
 8006cd2:	2101      	movs	r1, #1
 8006cd4:	4618      	mov	r0, r3
 8006cd6:	f000 f853 	bl	8006d80 <RCCEx_PLLSAI1_Config>
 8006cda:	4603      	mov	r3, r0
 8006cdc:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8006cde:	7cfb      	ldrb	r3, [r7, #19]
 8006ce0:	2b00      	cmp	r3, #0
 8006ce2:	d001      	beq.n	8006ce8 <HAL_RCCEx_PeriphCLKConfig+0x374>
      {
        /* set overall return value */
        status = ret;
 8006ce4:	7cfb      	ldrb	r3, [r7, #19]
 8006ce6:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	681b      	ldr	r3, [r3, #0]
 8006cec:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006cf0:	2b00      	cmp	r3, #0
 8006cf2:	d01c      	beq.n	8006d2e <HAL_RCCEx_PeriphCLKConfig+0x3ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8006cf4:	4b19      	ldr	r3, [pc, #100]	@ (8006d5c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8006cf6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006cfa:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006d02:	4916      	ldr	r1, [pc, #88]	@ (8006d5c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8006d04:	4313      	orrs	r3, r2
 8006d06:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006d0e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006d12:	d10c      	bne.n	8006d2e <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	3304      	adds	r3, #4
 8006d18:	2102      	movs	r1, #2
 8006d1a:	4618      	mov	r0, r3
 8006d1c:	f000 f830 	bl	8006d80 <RCCEx_PLLSAI1_Config>
 8006d20:	4603      	mov	r3, r0
 8006d22:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8006d24:	7cfb      	ldrb	r3, [r7, #19]
 8006d26:	2b00      	cmp	r3, #0
 8006d28:	d001      	beq.n	8006d2e <HAL_RCCEx_PeriphCLKConfig+0x3ba>
      {
        /* set overall return value */
        status = ret;
 8006d2a:	7cfb      	ldrb	r3, [r7, #19]
 8006d2c:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	681b      	ldr	r3, [r3, #0]
 8006d32:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8006d36:	2b00      	cmp	r3, #0
 8006d38:	d00a      	beq.n	8006d50 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8006d3a:	4b08      	ldr	r3, [pc, #32]	@ (8006d5c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8006d3c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006d40:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006d48:	4904      	ldr	r1, [pc, #16]	@ (8006d5c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8006d4a:	4313      	orrs	r3, r2
 8006d4c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8006d50:	7cbb      	ldrb	r3, [r7, #18]
}
 8006d52:	4618      	mov	r0, r3
 8006d54:	3718      	adds	r7, #24
 8006d56:	46bd      	mov	sp, r7
 8006d58:	bd80      	pop	{r7, pc}
 8006d5a:	bf00      	nop
 8006d5c:	40021000 	.word	0x40021000

08006d60 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 8006d60:	b480      	push	{r7}
 8006d62:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 8006d64:	4b05      	ldr	r3, [pc, #20]	@ (8006d7c <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8006d66:	681b      	ldr	r3, [r3, #0]
 8006d68:	4a04      	ldr	r2, [pc, #16]	@ (8006d7c <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8006d6a:	f043 0304 	orr.w	r3, r3, #4
 8006d6e:	6013      	str	r3, [r2, #0]
}
 8006d70:	bf00      	nop
 8006d72:	46bd      	mov	sp, r7
 8006d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d78:	4770      	bx	lr
 8006d7a:	bf00      	nop
 8006d7c:	40021000 	.word	0x40021000

08006d80 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8006d80:	b580      	push	{r7, lr}
 8006d82:	b084      	sub	sp, #16
 8006d84:	af00      	add	r7, sp, #0
 8006d86:	6078      	str	r0, [r7, #4]
 8006d88:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006d8a:	2300      	movs	r3, #0
 8006d8c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8006d8e:	4b74      	ldr	r3, [pc, #464]	@ (8006f60 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006d90:	68db      	ldr	r3, [r3, #12]
 8006d92:	f003 0303 	and.w	r3, r3, #3
 8006d96:	2b00      	cmp	r3, #0
 8006d98:	d018      	beq.n	8006dcc <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8006d9a:	4b71      	ldr	r3, [pc, #452]	@ (8006f60 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006d9c:	68db      	ldr	r3, [r3, #12]
 8006d9e:	f003 0203 	and.w	r2, r3, #3
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	681b      	ldr	r3, [r3, #0]
 8006da6:	429a      	cmp	r2, r3
 8006da8:	d10d      	bne.n	8006dc6 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	681b      	ldr	r3, [r3, #0]
       ||
 8006dae:	2b00      	cmp	r3, #0
 8006db0:	d009      	beq.n	8006dc6 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8006db2:	4b6b      	ldr	r3, [pc, #428]	@ (8006f60 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006db4:	68db      	ldr	r3, [r3, #12]
 8006db6:	091b      	lsrs	r3, r3, #4
 8006db8:	f003 0307 	and.w	r3, r3, #7
 8006dbc:	1c5a      	adds	r2, r3, #1
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	685b      	ldr	r3, [r3, #4]
       ||
 8006dc2:	429a      	cmp	r2, r3
 8006dc4:	d047      	beq.n	8006e56 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8006dc6:	2301      	movs	r3, #1
 8006dc8:	73fb      	strb	r3, [r7, #15]
 8006dca:	e044      	b.n	8006e56 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	681b      	ldr	r3, [r3, #0]
 8006dd0:	2b03      	cmp	r3, #3
 8006dd2:	d018      	beq.n	8006e06 <RCCEx_PLLSAI1_Config+0x86>
 8006dd4:	2b03      	cmp	r3, #3
 8006dd6:	d825      	bhi.n	8006e24 <RCCEx_PLLSAI1_Config+0xa4>
 8006dd8:	2b01      	cmp	r3, #1
 8006dda:	d002      	beq.n	8006de2 <RCCEx_PLLSAI1_Config+0x62>
 8006ddc:	2b02      	cmp	r3, #2
 8006dde:	d009      	beq.n	8006df4 <RCCEx_PLLSAI1_Config+0x74>
 8006de0:	e020      	b.n	8006e24 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8006de2:	4b5f      	ldr	r3, [pc, #380]	@ (8006f60 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006de4:	681b      	ldr	r3, [r3, #0]
 8006de6:	f003 0302 	and.w	r3, r3, #2
 8006dea:	2b00      	cmp	r3, #0
 8006dec:	d11d      	bne.n	8006e2a <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8006dee:	2301      	movs	r3, #1
 8006df0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006df2:	e01a      	b.n	8006e2a <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8006df4:	4b5a      	ldr	r3, [pc, #360]	@ (8006f60 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006df6:	681b      	ldr	r3, [r3, #0]
 8006df8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006dfc:	2b00      	cmp	r3, #0
 8006dfe:	d116      	bne.n	8006e2e <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8006e00:	2301      	movs	r3, #1
 8006e02:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006e04:	e013      	b.n	8006e2e <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8006e06:	4b56      	ldr	r3, [pc, #344]	@ (8006f60 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006e08:	681b      	ldr	r3, [r3, #0]
 8006e0a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006e0e:	2b00      	cmp	r3, #0
 8006e10:	d10f      	bne.n	8006e32 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8006e12:	4b53      	ldr	r3, [pc, #332]	@ (8006f60 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006e14:	681b      	ldr	r3, [r3, #0]
 8006e16:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8006e1a:	2b00      	cmp	r3, #0
 8006e1c:	d109      	bne.n	8006e32 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8006e1e:	2301      	movs	r3, #1
 8006e20:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8006e22:	e006      	b.n	8006e32 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8006e24:	2301      	movs	r3, #1
 8006e26:	73fb      	strb	r3, [r7, #15]
      break;
 8006e28:	e004      	b.n	8006e34 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8006e2a:	bf00      	nop
 8006e2c:	e002      	b.n	8006e34 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8006e2e:	bf00      	nop
 8006e30:	e000      	b.n	8006e34 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8006e32:	bf00      	nop
    }

    if(status == HAL_OK)
 8006e34:	7bfb      	ldrb	r3, [r7, #15]
 8006e36:	2b00      	cmp	r3, #0
 8006e38:	d10d      	bne.n	8006e56 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8006e3a:	4b49      	ldr	r3, [pc, #292]	@ (8006f60 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006e3c:	68db      	ldr	r3, [r3, #12]
 8006e3e:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	6819      	ldr	r1, [r3, #0]
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	685b      	ldr	r3, [r3, #4]
 8006e4a:	3b01      	subs	r3, #1
 8006e4c:	011b      	lsls	r3, r3, #4
 8006e4e:	430b      	orrs	r3, r1
 8006e50:	4943      	ldr	r1, [pc, #268]	@ (8006f60 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006e52:	4313      	orrs	r3, r2
 8006e54:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8006e56:	7bfb      	ldrb	r3, [r7, #15]
 8006e58:	2b00      	cmp	r3, #0
 8006e5a:	d17c      	bne.n	8006f56 <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8006e5c:	4b40      	ldr	r3, [pc, #256]	@ (8006f60 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006e5e:	681b      	ldr	r3, [r3, #0]
 8006e60:	4a3f      	ldr	r2, [pc, #252]	@ (8006f60 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006e62:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8006e66:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006e68:	f7fc f866 	bl	8002f38 <HAL_GetTick>
 8006e6c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8006e6e:	e009      	b.n	8006e84 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8006e70:	f7fc f862 	bl	8002f38 <HAL_GetTick>
 8006e74:	4602      	mov	r2, r0
 8006e76:	68bb      	ldr	r3, [r7, #8]
 8006e78:	1ad3      	subs	r3, r2, r3
 8006e7a:	2b02      	cmp	r3, #2
 8006e7c:	d902      	bls.n	8006e84 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8006e7e:	2303      	movs	r3, #3
 8006e80:	73fb      	strb	r3, [r7, #15]
        break;
 8006e82:	e005      	b.n	8006e90 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8006e84:	4b36      	ldr	r3, [pc, #216]	@ (8006f60 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006e86:	681b      	ldr	r3, [r3, #0]
 8006e88:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006e8c:	2b00      	cmp	r3, #0
 8006e8e:	d1ef      	bne.n	8006e70 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8006e90:	7bfb      	ldrb	r3, [r7, #15]
 8006e92:	2b00      	cmp	r3, #0
 8006e94:	d15f      	bne.n	8006f56 <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8006e96:	683b      	ldr	r3, [r7, #0]
 8006e98:	2b00      	cmp	r3, #0
 8006e9a:	d110      	bne.n	8006ebe <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8006e9c:	4b30      	ldr	r3, [pc, #192]	@ (8006f60 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006e9e:	691b      	ldr	r3, [r3, #16]
 8006ea0:	f023 4378 	bic.w	r3, r3, #4160749568	@ 0xf8000000
 8006ea4:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8006ea8:	687a      	ldr	r2, [r7, #4]
 8006eaa:	6892      	ldr	r2, [r2, #8]
 8006eac:	0211      	lsls	r1, r2, #8
 8006eae:	687a      	ldr	r2, [r7, #4]
 8006eb0:	68d2      	ldr	r2, [r2, #12]
 8006eb2:	06d2      	lsls	r2, r2, #27
 8006eb4:	430a      	orrs	r2, r1
 8006eb6:	492a      	ldr	r1, [pc, #168]	@ (8006f60 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006eb8:	4313      	orrs	r3, r2
 8006eba:	610b      	str	r3, [r1, #16]
 8006ebc:	e027      	b.n	8006f0e <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8006ebe:	683b      	ldr	r3, [r7, #0]
 8006ec0:	2b01      	cmp	r3, #1
 8006ec2:	d112      	bne.n	8006eea <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8006ec4:	4b26      	ldr	r3, [pc, #152]	@ (8006f60 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006ec6:	691b      	ldr	r3, [r3, #16]
 8006ec8:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 8006ecc:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8006ed0:	687a      	ldr	r2, [r7, #4]
 8006ed2:	6892      	ldr	r2, [r2, #8]
 8006ed4:	0211      	lsls	r1, r2, #8
 8006ed6:	687a      	ldr	r2, [r7, #4]
 8006ed8:	6912      	ldr	r2, [r2, #16]
 8006eda:	0852      	lsrs	r2, r2, #1
 8006edc:	3a01      	subs	r2, #1
 8006ede:	0552      	lsls	r2, r2, #21
 8006ee0:	430a      	orrs	r2, r1
 8006ee2:	491f      	ldr	r1, [pc, #124]	@ (8006f60 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006ee4:	4313      	orrs	r3, r2
 8006ee6:	610b      	str	r3, [r1, #16]
 8006ee8:	e011      	b.n	8006f0e <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8006eea:	4b1d      	ldr	r3, [pc, #116]	@ (8006f60 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006eec:	691b      	ldr	r3, [r3, #16]
 8006eee:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8006ef2:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8006ef6:	687a      	ldr	r2, [r7, #4]
 8006ef8:	6892      	ldr	r2, [r2, #8]
 8006efa:	0211      	lsls	r1, r2, #8
 8006efc:	687a      	ldr	r2, [r7, #4]
 8006efe:	6952      	ldr	r2, [r2, #20]
 8006f00:	0852      	lsrs	r2, r2, #1
 8006f02:	3a01      	subs	r2, #1
 8006f04:	0652      	lsls	r2, r2, #25
 8006f06:	430a      	orrs	r2, r1
 8006f08:	4915      	ldr	r1, [pc, #84]	@ (8006f60 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006f0a:	4313      	orrs	r3, r2
 8006f0c:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8006f0e:	4b14      	ldr	r3, [pc, #80]	@ (8006f60 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006f10:	681b      	ldr	r3, [r3, #0]
 8006f12:	4a13      	ldr	r2, [pc, #76]	@ (8006f60 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006f14:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8006f18:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006f1a:	f7fc f80d 	bl	8002f38 <HAL_GetTick>
 8006f1e:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8006f20:	e009      	b.n	8006f36 <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8006f22:	f7fc f809 	bl	8002f38 <HAL_GetTick>
 8006f26:	4602      	mov	r2, r0
 8006f28:	68bb      	ldr	r3, [r7, #8]
 8006f2a:	1ad3      	subs	r3, r2, r3
 8006f2c:	2b02      	cmp	r3, #2
 8006f2e:	d902      	bls.n	8006f36 <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 8006f30:	2303      	movs	r3, #3
 8006f32:	73fb      	strb	r3, [r7, #15]
          break;
 8006f34:	e005      	b.n	8006f42 <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8006f36:	4b0a      	ldr	r3, [pc, #40]	@ (8006f60 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006f38:	681b      	ldr	r3, [r3, #0]
 8006f3a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006f3e:	2b00      	cmp	r3, #0
 8006f40:	d0ef      	beq.n	8006f22 <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 8006f42:	7bfb      	ldrb	r3, [r7, #15]
 8006f44:	2b00      	cmp	r3, #0
 8006f46:	d106      	bne.n	8006f56 <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8006f48:	4b05      	ldr	r3, [pc, #20]	@ (8006f60 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006f4a:	691a      	ldr	r2, [r3, #16]
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	699b      	ldr	r3, [r3, #24]
 8006f50:	4903      	ldr	r1, [pc, #12]	@ (8006f60 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006f52:	4313      	orrs	r3, r2
 8006f54:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8006f56:	7bfb      	ldrb	r3, [r7, #15]
}
 8006f58:	4618      	mov	r0, r3
 8006f5a:	3710      	adds	r7, #16
 8006f5c:	46bd      	mov	sp, r7
 8006f5e:	bd80      	pop	{r7, pc}
 8006f60:	40021000 	.word	0x40021000

08006f64 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006f64:	b580      	push	{r7, lr}
 8006f66:	b082      	sub	sp, #8
 8006f68:	af00      	add	r7, sp, #0
 8006f6a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	2b00      	cmp	r3, #0
 8006f70:	d101      	bne.n	8006f76 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006f72:	2301      	movs	r3, #1
 8006f74:	e049      	b.n	800700a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006f7c:	b2db      	uxtb	r3, r3
 8006f7e:	2b00      	cmp	r3, #0
 8006f80:	d106      	bne.n	8006f90 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	2200      	movs	r2, #0
 8006f86:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006f8a:	6878      	ldr	r0, [r7, #4]
 8006f8c:	f000 f841 	bl	8007012 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	2202      	movs	r2, #2
 8006f94:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	681a      	ldr	r2, [r3, #0]
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	3304      	adds	r3, #4
 8006fa0:	4619      	mov	r1, r3
 8006fa2:	4610      	mov	r0, r2
 8006fa4:	f000 fd88 	bl	8007ab8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	2201      	movs	r2, #1
 8006fac:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	2201      	movs	r2, #1
 8006fb4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	2201      	movs	r2, #1
 8006fbc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	2201      	movs	r2, #1
 8006fc4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	2201      	movs	r2, #1
 8006fcc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	2201      	movs	r2, #1
 8006fd4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	2201      	movs	r2, #1
 8006fdc:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	2201      	movs	r2, #1
 8006fe4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	2201      	movs	r2, #1
 8006fec:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	2201      	movs	r2, #1
 8006ff4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	2201      	movs	r2, #1
 8006ffc:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	2201      	movs	r2, #1
 8007004:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8007008:	2300      	movs	r3, #0
}
 800700a:	4618      	mov	r0, r3
 800700c:	3708      	adds	r7, #8
 800700e:	46bd      	mov	sp, r7
 8007010:	bd80      	pop	{r7, pc}

08007012 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8007012:	b480      	push	{r7}
 8007014:	b083      	sub	sp, #12
 8007016:	af00      	add	r7, sp, #0
 8007018:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800701a:	bf00      	nop
 800701c:	370c      	adds	r7, #12
 800701e:	46bd      	mov	sp, r7
 8007020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007024:	4770      	bx	lr
	...

08007028 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8007028:	b480      	push	{r7}
 800702a:	b085      	sub	sp, #20
 800702c:	af00      	add	r7, sp, #0
 800702e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007036:	b2db      	uxtb	r3, r3
 8007038:	2b01      	cmp	r3, #1
 800703a:	d001      	beq.n	8007040 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 800703c:	2301      	movs	r3, #1
 800703e:	e033      	b.n	80070a8 <HAL_TIM_Base_Start+0x80>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	2202      	movs	r2, #2
 8007044:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	681b      	ldr	r3, [r3, #0]
 800704c:	4a19      	ldr	r2, [pc, #100]	@ (80070b4 <HAL_TIM_Base_Start+0x8c>)
 800704e:	4293      	cmp	r3, r2
 8007050:	d009      	beq.n	8007066 <HAL_TIM_Base_Start+0x3e>
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	681b      	ldr	r3, [r3, #0]
 8007056:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800705a:	d004      	beq.n	8007066 <HAL_TIM_Base_Start+0x3e>
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	681b      	ldr	r3, [r3, #0]
 8007060:	4a15      	ldr	r2, [pc, #84]	@ (80070b8 <HAL_TIM_Base_Start+0x90>)
 8007062:	4293      	cmp	r3, r2
 8007064:	d115      	bne.n	8007092 <HAL_TIM_Base_Start+0x6a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	681b      	ldr	r3, [r3, #0]
 800706a:	689a      	ldr	r2, [r3, #8]
 800706c:	4b13      	ldr	r3, [pc, #76]	@ (80070bc <HAL_TIM_Base_Start+0x94>)
 800706e:	4013      	ands	r3, r2
 8007070:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007072:	68fb      	ldr	r3, [r7, #12]
 8007074:	2b06      	cmp	r3, #6
 8007076:	d015      	beq.n	80070a4 <HAL_TIM_Base_Start+0x7c>
 8007078:	68fb      	ldr	r3, [r7, #12]
 800707a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800707e:	d011      	beq.n	80070a4 <HAL_TIM_Base_Start+0x7c>
    {
      __HAL_TIM_ENABLE(htim);
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	681b      	ldr	r3, [r3, #0]
 8007084:	681a      	ldr	r2, [r3, #0]
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	681b      	ldr	r3, [r3, #0]
 800708a:	f042 0201 	orr.w	r2, r2, #1
 800708e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007090:	e008      	b.n	80070a4 <HAL_TIM_Base_Start+0x7c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	681b      	ldr	r3, [r3, #0]
 8007096:	681a      	ldr	r2, [r3, #0]
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	681b      	ldr	r3, [r3, #0]
 800709c:	f042 0201 	orr.w	r2, r2, #1
 80070a0:	601a      	str	r2, [r3, #0]
 80070a2:	e000      	b.n	80070a6 <HAL_TIM_Base_Start+0x7e>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80070a4:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80070a6:	2300      	movs	r3, #0
}
 80070a8:	4618      	mov	r0, r3
 80070aa:	3714      	adds	r7, #20
 80070ac:	46bd      	mov	sp, r7
 80070ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070b2:	4770      	bx	lr
 80070b4:	40012c00 	.word	0x40012c00
 80070b8:	40014000 	.word	0x40014000
 80070bc:	00010007 	.word	0x00010007

080070c0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80070c0:	b480      	push	{r7}
 80070c2:	b085      	sub	sp, #20
 80070c4:	af00      	add	r7, sp, #0
 80070c6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80070ce:	b2db      	uxtb	r3, r3
 80070d0:	2b01      	cmp	r3, #1
 80070d2:	d001      	beq.n	80070d8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80070d4:	2301      	movs	r3, #1
 80070d6:	e03b      	b.n	8007150 <HAL_TIM_Base_Start_IT+0x90>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	2202      	movs	r2, #2
 80070dc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	681b      	ldr	r3, [r3, #0]
 80070e4:	68da      	ldr	r2, [r3, #12]
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	681b      	ldr	r3, [r3, #0]
 80070ea:	f042 0201 	orr.w	r2, r2, #1
 80070ee:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	681b      	ldr	r3, [r3, #0]
 80070f4:	4a19      	ldr	r2, [pc, #100]	@ (800715c <HAL_TIM_Base_Start_IT+0x9c>)
 80070f6:	4293      	cmp	r3, r2
 80070f8:	d009      	beq.n	800710e <HAL_TIM_Base_Start_IT+0x4e>
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	681b      	ldr	r3, [r3, #0]
 80070fe:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007102:	d004      	beq.n	800710e <HAL_TIM_Base_Start_IT+0x4e>
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	681b      	ldr	r3, [r3, #0]
 8007108:	4a15      	ldr	r2, [pc, #84]	@ (8007160 <HAL_TIM_Base_Start_IT+0xa0>)
 800710a:	4293      	cmp	r3, r2
 800710c:	d115      	bne.n	800713a <HAL_TIM_Base_Start_IT+0x7a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	681b      	ldr	r3, [r3, #0]
 8007112:	689a      	ldr	r2, [r3, #8]
 8007114:	4b13      	ldr	r3, [pc, #76]	@ (8007164 <HAL_TIM_Base_Start_IT+0xa4>)
 8007116:	4013      	ands	r3, r2
 8007118:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800711a:	68fb      	ldr	r3, [r7, #12]
 800711c:	2b06      	cmp	r3, #6
 800711e:	d015      	beq.n	800714c <HAL_TIM_Base_Start_IT+0x8c>
 8007120:	68fb      	ldr	r3, [r7, #12]
 8007122:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007126:	d011      	beq.n	800714c <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	681b      	ldr	r3, [r3, #0]
 800712c:	681a      	ldr	r2, [r3, #0]
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	681b      	ldr	r3, [r3, #0]
 8007132:	f042 0201 	orr.w	r2, r2, #1
 8007136:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007138:	e008      	b.n	800714c <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	681b      	ldr	r3, [r3, #0]
 800713e:	681a      	ldr	r2, [r3, #0]
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	681b      	ldr	r3, [r3, #0]
 8007144:	f042 0201 	orr.w	r2, r2, #1
 8007148:	601a      	str	r2, [r3, #0]
 800714a:	e000      	b.n	800714e <HAL_TIM_Base_Start_IT+0x8e>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800714c:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800714e:	2300      	movs	r3, #0
}
 8007150:	4618      	mov	r0, r3
 8007152:	3714      	adds	r7, #20
 8007154:	46bd      	mov	sp, r7
 8007156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800715a:	4770      	bx	lr
 800715c:	40012c00 	.word	0x40012c00
 8007160:	40014000 	.word	0x40014000
 8007164:	00010007 	.word	0x00010007

08007168 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8007168:	b580      	push	{r7, lr}
 800716a:	b082      	sub	sp, #8
 800716c:	af00      	add	r7, sp, #0
 800716e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	2b00      	cmp	r3, #0
 8007174:	d101      	bne.n	800717a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8007176:	2301      	movs	r3, #1
 8007178:	e049      	b.n	800720e <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007180:	b2db      	uxtb	r3, r3
 8007182:	2b00      	cmp	r3, #0
 8007184:	d106      	bne.n	8007194 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	2200      	movs	r2, #0
 800718a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800718e:	6878      	ldr	r0, [r7, #4]
 8007190:	f7fb fd28 	bl	8002be4 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	2202      	movs	r2, #2
 8007198:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	681a      	ldr	r2, [r3, #0]
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	3304      	adds	r3, #4
 80071a4:	4619      	mov	r1, r3
 80071a6:	4610      	mov	r0, r2
 80071a8:	f000 fc86 	bl	8007ab8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	2201      	movs	r2, #1
 80071b0:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	2201      	movs	r2, #1
 80071b8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	2201      	movs	r2, #1
 80071c0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	2201      	movs	r2, #1
 80071c8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	2201      	movs	r2, #1
 80071d0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	2201      	movs	r2, #1
 80071d8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	2201      	movs	r2, #1
 80071e0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	2201      	movs	r2, #1
 80071e8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	2201      	movs	r2, #1
 80071f0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	2201      	movs	r2, #1
 80071f8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	2201      	movs	r2, #1
 8007200:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	2201      	movs	r2, #1
 8007208:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800720c:	2300      	movs	r3, #0
}
 800720e:	4618      	mov	r0, r3
 8007210:	3708      	adds	r7, #8
 8007212:	46bd      	mov	sp, r7
 8007214:	bd80      	pop	{r7, pc}
	...

08007218 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007218:	b580      	push	{r7, lr}
 800721a:	b084      	sub	sp, #16
 800721c:	af00      	add	r7, sp, #0
 800721e:	6078      	str	r0, [r7, #4]
 8007220:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8007222:	683b      	ldr	r3, [r7, #0]
 8007224:	2b00      	cmp	r3, #0
 8007226:	d109      	bne.n	800723c <HAL_TIM_PWM_Start+0x24>
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800722e:	b2db      	uxtb	r3, r3
 8007230:	2b01      	cmp	r3, #1
 8007232:	bf14      	ite	ne
 8007234:	2301      	movne	r3, #1
 8007236:	2300      	moveq	r3, #0
 8007238:	b2db      	uxtb	r3, r3
 800723a:	e03c      	b.n	80072b6 <HAL_TIM_PWM_Start+0x9e>
 800723c:	683b      	ldr	r3, [r7, #0]
 800723e:	2b04      	cmp	r3, #4
 8007240:	d109      	bne.n	8007256 <HAL_TIM_PWM_Start+0x3e>
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8007248:	b2db      	uxtb	r3, r3
 800724a:	2b01      	cmp	r3, #1
 800724c:	bf14      	ite	ne
 800724e:	2301      	movne	r3, #1
 8007250:	2300      	moveq	r3, #0
 8007252:	b2db      	uxtb	r3, r3
 8007254:	e02f      	b.n	80072b6 <HAL_TIM_PWM_Start+0x9e>
 8007256:	683b      	ldr	r3, [r7, #0]
 8007258:	2b08      	cmp	r3, #8
 800725a:	d109      	bne.n	8007270 <HAL_TIM_PWM_Start+0x58>
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8007262:	b2db      	uxtb	r3, r3
 8007264:	2b01      	cmp	r3, #1
 8007266:	bf14      	ite	ne
 8007268:	2301      	movne	r3, #1
 800726a:	2300      	moveq	r3, #0
 800726c:	b2db      	uxtb	r3, r3
 800726e:	e022      	b.n	80072b6 <HAL_TIM_PWM_Start+0x9e>
 8007270:	683b      	ldr	r3, [r7, #0]
 8007272:	2b0c      	cmp	r3, #12
 8007274:	d109      	bne.n	800728a <HAL_TIM_PWM_Start+0x72>
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800727c:	b2db      	uxtb	r3, r3
 800727e:	2b01      	cmp	r3, #1
 8007280:	bf14      	ite	ne
 8007282:	2301      	movne	r3, #1
 8007284:	2300      	moveq	r3, #0
 8007286:	b2db      	uxtb	r3, r3
 8007288:	e015      	b.n	80072b6 <HAL_TIM_PWM_Start+0x9e>
 800728a:	683b      	ldr	r3, [r7, #0]
 800728c:	2b10      	cmp	r3, #16
 800728e:	d109      	bne.n	80072a4 <HAL_TIM_PWM_Start+0x8c>
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8007296:	b2db      	uxtb	r3, r3
 8007298:	2b01      	cmp	r3, #1
 800729a:	bf14      	ite	ne
 800729c:	2301      	movne	r3, #1
 800729e:	2300      	moveq	r3, #0
 80072a0:	b2db      	uxtb	r3, r3
 80072a2:	e008      	b.n	80072b6 <HAL_TIM_PWM_Start+0x9e>
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 80072aa:	b2db      	uxtb	r3, r3
 80072ac:	2b01      	cmp	r3, #1
 80072ae:	bf14      	ite	ne
 80072b0:	2301      	movne	r3, #1
 80072b2:	2300      	moveq	r3, #0
 80072b4:	b2db      	uxtb	r3, r3
 80072b6:	2b00      	cmp	r3, #0
 80072b8:	d001      	beq.n	80072be <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 80072ba:	2301      	movs	r3, #1
 80072bc:	e07e      	b.n	80073bc <HAL_TIM_PWM_Start+0x1a4>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80072be:	683b      	ldr	r3, [r7, #0]
 80072c0:	2b00      	cmp	r3, #0
 80072c2:	d104      	bne.n	80072ce <HAL_TIM_PWM_Start+0xb6>
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	2202      	movs	r2, #2
 80072c8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80072cc:	e023      	b.n	8007316 <HAL_TIM_PWM_Start+0xfe>
 80072ce:	683b      	ldr	r3, [r7, #0]
 80072d0:	2b04      	cmp	r3, #4
 80072d2:	d104      	bne.n	80072de <HAL_TIM_PWM_Start+0xc6>
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	2202      	movs	r2, #2
 80072d8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80072dc:	e01b      	b.n	8007316 <HAL_TIM_PWM_Start+0xfe>
 80072de:	683b      	ldr	r3, [r7, #0]
 80072e0:	2b08      	cmp	r3, #8
 80072e2:	d104      	bne.n	80072ee <HAL_TIM_PWM_Start+0xd6>
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	2202      	movs	r2, #2
 80072e8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80072ec:	e013      	b.n	8007316 <HAL_TIM_PWM_Start+0xfe>
 80072ee:	683b      	ldr	r3, [r7, #0]
 80072f0:	2b0c      	cmp	r3, #12
 80072f2:	d104      	bne.n	80072fe <HAL_TIM_PWM_Start+0xe6>
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	2202      	movs	r2, #2
 80072f8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80072fc:	e00b      	b.n	8007316 <HAL_TIM_PWM_Start+0xfe>
 80072fe:	683b      	ldr	r3, [r7, #0]
 8007300:	2b10      	cmp	r3, #16
 8007302:	d104      	bne.n	800730e <HAL_TIM_PWM_Start+0xf6>
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	2202      	movs	r2, #2
 8007308:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800730c:	e003      	b.n	8007316 <HAL_TIM_PWM_Start+0xfe>
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	2202      	movs	r2, #2
 8007312:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	681b      	ldr	r3, [r3, #0]
 800731a:	2201      	movs	r2, #1
 800731c:	6839      	ldr	r1, [r7, #0]
 800731e:	4618      	mov	r0, r3
 8007320:	f000 feac 	bl	800807c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	681b      	ldr	r3, [r3, #0]
 8007328:	4a26      	ldr	r2, [pc, #152]	@ (80073c4 <HAL_TIM_PWM_Start+0x1ac>)
 800732a:	4293      	cmp	r3, r2
 800732c:	d009      	beq.n	8007342 <HAL_TIM_PWM_Start+0x12a>
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	681b      	ldr	r3, [r3, #0]
 8007332:	4a25      	ldr	r2, [pc, #148]	@ (80073c8 <HAL_TIM_PWM_Start+0x1b0>)
 8007334:	4293      	cmp	r3, r2
 8007336:	d004      	beq.n	8007342 <HAL_TIM_PWM_Start+0x12a>
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	681b      	ldr	r3, [r3, #0]
 800733c:	4a23      	ldr	r2, [pc, #140]	@ (80073cc <HAL_TIM_PWM_Start+0x1b4>)
 800733e:	4293      	cmp	r3, r2
 8007340:	d101      	bne.n	8007346 <HAL_TIM_PWM_Start+0x12e>
 8007342:	2301      	movs	r3, #1
 8007344:	e000      	b.n	8007348 <HAL_TIM_PWM_Start+0x130>
 8007346:	2300      	movs	r3, #0
 8007348:	2b00      	cmp	r3, #0
 800734a:	d007      	beq.n	800735c <HAL_TIM_PWM_Start+0x144>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	681b      	ldr	r3, [r3, #0]
 8007350:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	681b      	ldr	r3, [r3, #0]
 8007356:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800735a:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	681b      	ldr	r3, [r3, #0]
 8007360:	4a18      	ldr	r2, [pc, #96]	@ (80073c4 <HAL_TIM_PWM_Start+0x1ac>)
 8007362:	4293      	cmp	r3, r2
 8007364:	d009      	beq.n	800737a <HAL_TIM_PWM_Start+0x162>
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	681b      	ldr	r3, [r3, #0]
 800736a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800736e:	d004      	beq.n	800737a <HAL_TIM_PWM_Start+0x162>
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	681b      	ldr	r3, [r3, #0]
 8007374:	4a14      	ldr	r2, [pc, #80]	@ (80073c8 <HAL_TIM_PWM_Start+0x1b0>)
 8007376:	4293      	cmp	r3, r2
 8007378:	d115      	bne.n	80073a6 <HAL_TIM_PWM_Start+0x18e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	681b      	ldr	r3, [r3, #0]
 800737e:	689a      	ldr	r2, [r3, #8]
 8007380:	4b13      	ldr	r3, [pc, #76]	@ (80073d0 <HAL_TIM_PWM_Start+0x1b8>)
 8007382:	4013      	ands	r3, r2
 8007384:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007386:	68fb      	ldr	r3, [r7, #12]
 8007388:	2b06      	cmp	r3, #6
 800738a:	d015      	beq.n	80073b8 <HAL_TIM_PWM_Start+0x1a0>
 800738c:	68fb      	ldr	r3, [r7, #12]
 800738e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007392:	d011      	beq.n	80073b8 <HAL_TIM_PWM_Start+0x1a0>
    {
      __HAL_TIM_ENABLE(htim);
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	681b      	ldr	r3, [r3, #0]
 8007398:	681a      	ldr	r2, [r3, #0]
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	681b      	ldr	r3, [r3, #0]
 800739e:	f042 0201 	orr.w	r2, r2, #1
 80073a2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80073a4:	e008      	b.n	80073b8 <HAL_TIM_PWM_Start+0x1a0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	681b      	ldr	r3, [r3, #0]
 80073aa:	681a      	ldr	r2, [r3, #0]
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	681b      	ldr	r3, [r3, #0]
 80073b0:	f042 0201 	orr.w	r2, r2, #1
 80073b4:	601a      	str	r2, [r3, #0]
 80073b6:	e000      	b.n	80073ba <HAL_TIM_PWM_Start+0x1a2>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80073b8:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80073ba:	2300      	movs	r3, #0
}
 80073bc:	4618      	mov	r0, r3
 80073be:	3710      	adds	r7, #16
 80073c0:	46bd      	mov	sp, r7
 80073c2:	bd80      	pop	{r7, pc}
 80073c4:	40012c00 	.word	0x40012c00
 80073c8:	40014000 	.word	0x40014000
 80073cc:	40014400 	.word	0x40014400
 80073d0:	00010007 	.word	0x00010007

080073d4 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 80073d4:	b580      	push	{r7, lr}
 80073d6:	b086      	sub	sp, #24
 80073d8:	af00      	add	r7, sp, #0
 80073da:	6078      	str	r0, [r7, #4]
 80073dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	2b00      	cmp	r3, #0
 80073e2:	d101      	bne.n	80073e8 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 80073e4:	2301      	movs	r3, #1
 80073e6:	e097      	b.n	8007518 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80073ee:	b2db      	uxtb	r3, r3
 80073f0:	2b00      	cmp	r3, #0
 80073f2:	d106      	bne.n	8007402 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	2200      	movs	r2, #0
 80073f8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 80073fc:	6878      	ldr	r0, [r7, #4]
 80073fe:	f7fb fbad 	bl	8002b5c <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	2202      	movs	r2, #2
 8007406:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	681b      	ldr	r3, [r3, #0]
 800740e:	689b      	ldr	r3, [r3, #8]
 8007410:	687a      	ldr	r2, [r7, #4]
 8007412:	6812      	ldr	r2, [r2, #0]
 8007414:	f423 33a0 	bic.w	r3, r3, #81920	@ 0x14000
 8007418:	f023 0307 	bic.w	r3, r3, #7
 800741c:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	681a      	ldr	r2, [r3, #0]
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	3304      	adds	r3, #4
 8007426:	4619      	mov	r1, r3
 8007428:	4610      	mov	r0, r2
 800742a:	f000 fb45 	bl	8007ab8 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	681b      	ldr	r3, [r3, #0]
 8007432:	689b      	ldr	r3, [r3, #8]
 8007434:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	681b      	ldr	r3, [r3, #0]
 800743a:	699b      	ldr	r3, [r3, #24]
 800743c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	681b      	ldr	r3, [r3, #0]
 8007442:	6a1b      	ldr	r3, [r3, #32]
 8007444:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8007446:	683b      	ldr	r3, [r7, #0]
 8007448:	681b      	ldr	r3, [r3, #0]
 800744a:	697a      	ldr	r2, [r7, #20]
 800744c:	4313      	orrs	r3, r2
 800744e:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8007450:	693b      	ldr	r3, [r7, #16]
 8007452:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007456:	f023 0303 	bic.w	r3, r3, #3
 800745a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800745c:	683b      	ldr	r3, [r7, #0]
 800745e:	689a      	ldr	r2, [r3, #8]
 8007460:	683b      	ldr	r3, [r7, #0]
 8007462:	699b      	ldr	r3, [r3, #24]
 8007464:	021b      	lsls	r3, r3, #8
 8007466:	4313      	orrs	r3, r2
 8007468:	693a      	ldr	r2, [r7, #16]
 800746a:	4313      	orrs	r3, r2
 800746c:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800746e:	693b      	ldr	r3, [r7, #16]
 8007470:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 8007474:	f023 030c 	bic.w	r3, r3, #12
 8007478:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800747a:	693b      	ldr	r3, [r7, #16]
 800747c:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8007480:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8007484:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8007486:	683b      	ldr	r3, [r7, #0]
 8007488:	68da      	ldr	r2, [r3, #12]
 800748a:	683b      	ldr	r3, [r7, #0]
 800748c:	69db      	ldr	r3, [r3, #28]
 800748e:	021b      	lsls	r3, r3, #8
 8007490:	4313      	orrs	r3, r2
 8007492:	693a      	ldr	r2, [r7, #16]
 8007494:	4313      	orrs	r3, r2
 8007496:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8007498:	683b      	ldr	r3, [r7, #0]
 800749a:	691b      	ldr	r3, [r3, #16]
 800749c:	011a      	lsls	r2, r3, #4
 800749e:	683b      	ldr	r3, [r7, #0]
 80074a0:	6a1b      	ldr	r3, [r3, #32]
 80074a2:	031b      	lsls	r3, r3, #12
 80074a4:	4313      	orrs	r3, r2
 80074a6:	693a      	ldr	r2, [r7, #16]
 80074a8:	4313      	orrs	r3, r2
 80074aa:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 80074ac:	68fb      	ldr	r3, [r7, #12]
 80074ae:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 80074b2:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 80074b4:	68fb      	ldr	r3, [r7, #12]
 80074b6:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 80074ba:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 80074bc:	683b      	ldr	r3, [r7, #0]
 80074be:	685a      	ldr	r2, [r3, #4]
 80074c0:	683b      	ldr	r3, [r7, #0]
 80074c2:	695b      	ldr	r3, [r3, #20]
 80074c4:	011b      	lsls	r3, r3, #4
 80074c6:	4313      	orrs	r3, r2
 80074c8:	68fa      	ldr	r2, [r7, #12]
 80074ca:	4313      	orrs	r3, r2
 80074cc:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	681b      	ldr	r3, [r3, #0]
 80074d2:	697a      	ldr	r2, [r7, #20]
 80074d4:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	681b      	ldr	r3, [r3, #0]
 80074da:	693a      	ldr	r2, [r7, #16]
 80074dc:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	681b      	ldr	r3, [r3, #0]
 80074e2:	68fa      	ldr	r2, [r7, #12]
 80074e4:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	2201      	movs	r2, #1
 80074ea:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	2201      	movs	r2, #1
 80074f2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	2201      	movs	r2, #1
 80074fa:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	2201      	movs	r2, #1
 8007502:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	2201      	movs	r2, #1
 800750a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	2201      	movs	r2, #1
 8007512:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8007516:	2300      	movs	r3, #0
}
 8007518:	4618      	mov	r0, r3
 800751a:	3718      	adds	r7, #24
 800751c:	46bd      	mov	sp, r7
 800751e:	bd80      	pop	{r7, pc}

08007520 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007520:	b580      	push	{r7, lr}
 8007522:	b084      	sub	sp, #16
 8007524:	af00      	add	r7, sp, #0
 8007526:	6078      	str	r0, [r7, #4]
 8007528:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8007530:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8007538:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8007540:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8007548:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 800754a:	683b      	ldr	r3, [r7, #0]
 800754c:	2b00      	cmp	r3, #0
 800754e:	d110      	bne.n	8007572 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8007550:	7bfb      	ldrb	r3, [r7, #15]
 8007552:	2b01      	cmp	r3, #1
 8007554:	d102      	bne.n	800755c <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8007556:	7b7b      	ldrb	r3, [r7, #13]
 8007558:	2b01      	cmp	r3, #1
 800755a:	d001      	beq.n	8007560 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 800755c:	2301      	movs	r3, #1
 800755e:	e069      	b.n	8007634 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	2202      	movs	r2, #2
 8007564:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	2202      	movs	r2, #2
 800756c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007570:	e031      	b.n	80075d6 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8007572:	683b      	ldr	r3, [r7, #0]
 8007574:	2b04      	cmp	r3, #4
 8007576:	d110      	bne.n	800759a <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8007578:	7bbb      	ldrb	r3, [r7, #14]
 800757a:	2b01      	cmp	r3, #1
 800757c:	d102      	bne.n	8007584 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800757e:	7b3b      	ldrb	r3, [r7, #12]
 8007580:	2b01      	cmp	r3, #1
 8007582:	d001      	beq.n	8007588 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8007584:	2301      	movs	r3, #1
 8007586:	e055      	b.n	8007634 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	2202      	movs	r2, #2
 800758c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	2202      	movs	r2, #2
 8007594:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8007598:	e01d      	b.n	80075d6 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800759a:	7bfb      	ldrb	r3, [r7, #15]
 800759c:	2b01      	cmp	r3, #1
 800759e:	d108      	bne.n	80075b2 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80075a0:	7bbb      	ldrb	r3, [r7, #14]
 80075a2:	2b01      	cmp	r3, #1
 80075a4:	d105      	bne.n	80075b2 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80075a6:	7b7b      	ldrb	r3, [r7, #13]
 80075a8:	2b01      	cmp	r3, #1
 80075aa:	d102      	bne.n	80075b2 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80075ac:	7b3b      	ldrb	r3, [r7, #12]
 80075ae:	2b01      	cmp	r3, #1
 80075b0:	d001      	beq.n	80075b6 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 80075b2:	2301      	movs	r3, #1
 80075b4:	e03e      	b.n	8007634 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	2202      	movs	r2, #2
 80075ba:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	2202      	movs	r2, #2
 80075c2:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	2202      	movs	r2, #2
 80075ca:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	2202      	movs	r2, #2
 80075d2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 80075d6:	683b      	ldr	r3, [r7, #0]
 80075d8:	2b00      	cmp	r3, #0
 80075da:	d003      	beq.n	80075e4 <HAL_TIM_Encoder_Start+0xc4>
 80075dc:	683b      	ldr	r3, [r7, #0]
 80075de:	2b04      	cmp	r3, #4
 80075e0:	d008      	beq.n	80075f4 <HAL_TIM_Encoder_Start+0xd4>
 80075e2:	e00f      	b.n	8007604 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	681b      	ldr	r3, [r3, #0]
 80075e8:	2201      	movs	r2, #1
 80075ea:	2100      	movs	r1, #0
 80075ec:	4618      	mov	r0, r3
 80075ee:	f000 fd45 	bl	800807c <TIM_CCxChannelCmd>
      break;
 80075f2:	e016      	b.n	8007622 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	681b      	ldr	r3, [r3, #0]
 80075f8:	2201      	movs	r2, #1
 80075fa:	2104      	movs	r1, #4
 80075fc:	4618      	mov	r0, r3
 80075fe:	f000 fd3d 	bl	800807c <TIM_CCxChannelCmd>
      break;
 8007602:	e00e      	b.n	8007622 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	681b      	ldr	r3, [r3, #0]
 8007608:	2201      	movs	r2, #1
 800760a:	2100      	movs	r1, #0
 800760c:	4618      	mov	r0, r3
 800760e:	f000 fd35 	bl	800807c <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	681b      	ldr	r3, [r3, #0]
 8007616:	2201      	movs	r2, #1
 8007618:	2104      	movs	r1, #4
 800761a:	4618      	mov	r0, r3
 800761c:	f000 fd2e 	bl	800807c <TIM_CCxChannelCmd>
      break;
 8007620:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	681b      	ldr	r3, [r3, #0]
 8007626:	681a      	ldr	r2, [r3, #0]
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	681b      	ldr	r3, [r3, #0]
 800762c:	f042 0201 	orr.w	r2, r2, #1
 8007630:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8007632:	2300      	movs	r3, #0
}
 8007634:	4618      	mov	r0, r3
 8007636:	3710      	adds	r7, #16
 8007638:	46bd      	mov	sp, r7
 800763a:	bd80      	pop	{r7, pc}

0800763c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800763c:	b580      	push	{r7, lr}
 800763e:	b084      	sub	sp, #16
 8007640:	af00      	add	r7, sp, #0
 8007642:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	681b      	ldr	r3, [r3, #0]
 8007648:	68db      	ldr	r3, [r3, #12]
 800764a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	681b      	ldr	r3, [r3, #0]
 8007650:	691b      	ldr	r3, [r3, #16]
 8007652:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8007654:	68bb      	ldr	r3, [r7, #8]
 8007656:	f003 0302 	and.w	r3, r3, #2
 800765a:	2b00      	cmp	r3, #0
 800765c:	d020      	beq.n	80076a0 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800765e:	68fb      	ldr	r3, [r7, #12]
 8007660:	f003 0302 	and.w	r3, r3, #2
 8007664:	2b00      	cmp	r3, #0
 8007666:	d01b      	beq.n	80076a0 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	681b      	ldr	r3, [r3, #0]
 800766c:	f06f 0202 	mvn.w	r2, #2
 8007670:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	2201      	movs	r2, #1
 8007676:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	681b      	ldr	r3, [r3, #0]
 800767c:	699b      	ldr	r3, [r3, #24]
 800767e:	f003 0303 	and.w	r3, r3, #3
 8007682:	2b00      	cmp	r3, #0
 8007684:	d003      	beq.n	800768e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8007686:	6878      	ldr	r0, [r7, #4]
 8007688:	f000 f9f8 	bl	8007a7c <HAL_TIM_IC_CaptureCallback>
 800768c:	e005      	b.n	800769a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800768e:	6878      	ldr	r0, [r7, #4]
 8007690:	f000 f9ea 	bl	8007a68 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007694:	6878      	ldr	r0, [r7, #4]
 8007696:	f000 f9fb 	bl	8007a90 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	2200      	movs	r2, #0
 800769e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80076a0:	68bb      	ldr	r3, [r7, #8]
 80076a2:	f003 0304 	and.w	r3, r3, #4
 80076a6:	2b00      	cmp	r3, #0
 80076a8:	d020      	beq.n	80076ec <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80076aa:	68fb      	ldr	r3, [r7, #12]
 80076ac:	f003 0304 	and.w	r3, r3, #4
 80076b0:	2b00      	cmp	r3, #0
 80076b2:	d01b      	beq.n	80076ec <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	681b      	ldr	r3, [r3, #0]
 80076b8:	f06f 0204 	mvn.w	r2, #4
 80076bc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	2202      	movs	r2, #2
 80076c2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	681b      	ldr	r3, [r3, #0]
 80076c8:	699b      	ldr	r3, [r3, #24]
 80076ca:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80076ce:	2b00      	cmp	r3, #0
 80076d0:	d003      	beq.n	80076da <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80076d2:	6878      	ldr	r0, [r7, #4]
 80076d4:	f000 f9d2 	bl	8007a7c <HAL_TIM_IC_CaptureCallback>
 80076d8:	e005      	b.n	80076e6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80076da:	6878      	ldr	r0, [r7, #4]
 80076dc:	f000 f9c4 	bl	8007a68 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80076e0:	6878      	ldr	r0, [r7, #4]
 80076e2:	f000 f9d5 	bl	8007a90 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	2200      	movs	r2, #0
 80076ea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80076ec:	68bb      	ldr	r3, [r7, #8]
 80076ee:	f003 0308 	and.w	r3, r3, #8
 80076f2:	2b00      	cmp	r3, #0
 80076f4:	d020      	beq.n	8007738 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80076f6:	68fb      	ldr	r3, [r7, #12]
 80076f8:	f003 0308 	and.w	r3, r3, #8
 80076fc:	2b00      	cmp	r3, #0
 80076fe:	d01b      	beq.n	8007738 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	681b      	ldr	r3, [r3, #0]
 8007704:	f06f 0208 	mvn.w	r2, #8
 8007708:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	2204      	movs	r2, #4
 800770e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	681b      	ldr	r3, [r3, #0]
 8007714:	69db      	ldr	r3, [r3, #28]
 8007716:	f003 0303 	and.w	r3, r3, #3
 800771a:	2b00      	cmp	r3, #0
 800771c:	d003      	beq.n	8007726 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800771e:	6878      	ldr	r0, [r7, #4]
 8007720:	f000 f9ac 	bl	8007a7c <HAL_TIM_IC_CaptureCallback>
 8007724:	e005      	b.n	8007732 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007726:	6878      	ldr	r0, [r7, #4]
 8007728:	f000 f99e 	bl	8007a68 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800772c:	6878      	ldr	r0, [r7, #4]
 800772e:	f000 f9af 	bl	8007a90 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	2200      	movs	r2, #0
 8007736:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8007738:	68bb      	ldr	r3, [r7, #8]
 800773a:	f003 0310 	and.w	r3, r3, #16
 800773e:	2b00      	cmp	r3, #0
 8007740:	d020      	beq.n	8007784 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8007742:	68fb      	ldr	r3, [r7, #12]
 8007744:	f003 0310 	and.w	r3, r3, #16
 8007748:	2b00      	cmp	r3, #0
 800774a:	d01b      	beq.n	8007784 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	681b      	ldr	r3, [r3, #0]
 8007750:	f06f 0210 	mvn.w	r2, #16
 8007754:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	2208      	movs	r2, #8
 800775a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	681b      	ldr	r3, [r3, #0]
 8007760:	69db      	ldr	r3, [r3, #28]
 8007762:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007766:	2b00      	cmp	r3, #0
 8007768:	d003      	beq.n	8007772 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800776a:	6878      	ldr	r0, [r7, #4]
 800776c:	f000 f986 	bl	8007a7c <HAL_TIM_IC_CaptureCallback>
 8007770:	e005      	b.n	800777e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007772:	6878      	ldr	r0, [r7, #4]
 8007774:	f000 f978 	bl	8007a68 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007778:	6878      	ldr	r0, [r7, #4]
 800777a:	f000 f989 	bl	8007a90 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	2200      	movs	r2, #0
 8007782:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8007784:	68bb      	ldr	r3, [r7, #8]
 8007786:	f003 0301 	and.w	r3, r3, #1
 800778a:	2b00      	cmp	r3, #0
 800778c:	d00c      	beq.n	80077a8 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800778e:	68fb      	ldr	r3, [r7, #12]
 8007790:	f003 0301 	and.w	r3, r3, #1
 8007794:	2b00      	cmp	r3, #0
 8007796:	d007      	beq.n	80077a8 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	681b      	ldr	r3, [r3, #0]
 800779c:	f06f 0201 	mvn.w	r2, #1
 80077a0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80077a2:	6878      	ldr	r0, [r7, #4]
 80077a4:	f7fa fd98 	bl	80022d8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80077a8:	68bb      	ldr	r3, [r7, #8]
 80077aa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80077ae:	2b00      	cmp	r3, #0
 80077b0:	d00c      	beq.n	80077cc <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80077b2:	68fb      	ldr	r3, [r7, #12]
 80077b4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80077b8:	2b00      	cmp	r3, #0
 80077ba:	d007      	beq.n	80077cc <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	681b      	ldr	r3, [r3, #0]
 80077c0:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80077c4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80077c6:	6878      	ldr	r0, [r7, #4]
 80077c8:	f000 fe04 	bl	80083d4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 80077cc:	68bb      	ldr	r3, [r7, #8]
 80077ce:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80077d2:	2b00      	cmp	r3, #0
 80077d4:	d00c      	beq.n	80077f0 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80077d6:	68fb      	ldr	r3, [r7, #12]
 80077d8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80077dc:	2b00      	cmp	r3, #0
 80077de:	d007      	beq.n	80077f0 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	681b      	ldr	r3, [r3, #0]
 80077e4:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 80077e8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80077ea:	6878      	ldr	r0, [r7, #4]
 80077ec:	f000 fdfc 	bl	80083e8 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80077f0:	68bb      	ldr	r3, [r7, #8]
 80077f2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80077f6:	2b00      	cmp	r3, #0
 80077f8:	d00c      	beq.n	8007814 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80077fa:	68fb      	ldr	r3, [r7, #12]
 80077fc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007800:	2b00      	cmp	r3, #0
 8007802:	d007      	beq.n	8007814 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	681b      	ldr	r3, [r3, #0]
 8007808:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800780c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800780e:	6878      	ldr	r0, [r7, #4]
 8007810:	f000 f948 	bl	8007aa4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8007814:	68bb      	ldr	r3, [r7, #8]
 8007816:	f003 0320 	and.w	r3, r3, #32
 800781a:	2b00      	cmp	r3, #0
 800781c:	d00c      	beq.n	8007838 <HAL_TIM_IRQHandler+0x1fc>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800781e:	68fb      	ldr	r3, [r7, #12]
 8007820:	f003 0320 	and.w	r3, r3, #32
 8007824:	2b00      	cmp	r3, #0
 8007826:	d007      	beq.n	8007838 <HAL_TIM_IRQHandler+0x1fc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	681b      	ldr	r3, [r3, #0]
 800782c:	f06f 0220 	mvn.w	r2, #32
 8007830:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8007832:	6878      	ldr	r0, [r7, #4]
 8007834:	f000 fdc4 	bl	80083c0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007838:	bf00      	nop
 800783a:	3710      	adds	r7, #16
 800783c:	46bd      	mov	sp, r7
 800783e:	bd80      	pop	{r7, pc}

08007840 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8007840:	b580      	push	{r7, lr}
 8007842:	b086      	sub	sp, #24
 8007844:	af00      	add	r7, sp, #0
 8007846:	60f8      	str	r0, [r7, #12]
 8007848:	60b9      	str	r1, [r7, #8]
 800784a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800784c:	2300      	movs	r3, #0
 800784e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8007850:	68fb      	ldr	r3, [r7, #12]
 8007852:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007856:	2b01      	cmp	r3, #1
 8007858:	d101      	bne.n	800785e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800785a:	2302      	movs	r3, #2
 800785c:	e0ff      	b.n	8007a5e <HAL_TIM_PWM_ConfigChannel+0x21e>
 800785e:	68fb      	ldr	r3, [r7, #12]
 8007860:	2201      	movs	r2, #1
 8007862:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	2b14      	cmp	r3, #20
 800786a:	f200 80f0 	bhi.w	8007a4e <HAL_TIM_PWM_ConfigChannel+0x20e>
 800786e:	a201      	add	r2, pc, #4	@ (adr r2, 8007874 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8007870:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007874:	080078c9 	.word	0x080078c9
 8007878:	08007a4f 	.word	0x08007a4f
 800787c:	08007a4f 	.word	0x08007a4f
 8007880:	08007a4f 	.word	0x08007a4f
 8007884:	08007909 	.word	0x08007909
 8007888:	08007a4f 	.word	0x08007a4f
 800788c:	08007a4f 	.word	0x08007a4f
 8007890:	08007a4f 	.word	0x08007a4f
 8007894:	0800794b 	.word	0x0800794b
 8007898:	08007a4f 	.word	0x08007a4f
 800789c:	08007a4f 	.word	0x08007a4f
 80078a0:	08007a4f 	.word	0x08007a4f
 80078a4:	0800798b 	.word	0x0800798b
 80078a8:	08007a4f 	.word	0x08007a4f
 80078ac:	08007a4f 	.word	0x08007a4f
 80078b0:	08007a4f 	.word	0x08007a4f
 80078b4:	080079cd 	.word	0x080079cd
 80078b8:	08007a4f 	.word	0x08007a4f
 80078bc:	08007a4f 	.word	0x08007a4f
 80078c0:	08007a4f 	.word	0x08007a4f
 80078c4:	08007a0d 	.word	0x08007a0d
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80078c8:	68fb      	ldr	r3, [r7, #12]
 80078ca:	681b      	ldr	r3, [r3, #0]
 80078cc:	68b9      	ldr	r1, [r7, #8]
 80078ce:	4618      	mov	r0, r3
 80078d0:	f000 f956 	bl	8007b80 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80078d4:	68fb      	ldr	r3, [r7, #12]
 80078d6:	681b      	ldr	r3, [r3, #0]
 80078d8:	699a      	ldr	r2, [r3, #24]
 80078da:	68fb      	ldr	r3, [r7, #12]
 80078dc:	681b      	ldr	r3, [r3, #0]
 80078de:	f042 0208 	orr.w	r2, r2, #8
 80078e2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80078e4:	68fb      	ldr	r3, [r7, #12]
 80078e6:	681b      	ldr	r3, [r3, #0]
 80078e8:	699a      	ldr	r2, [r3, #24]
 80078ea:	68fb      	ldr	r3, [r7, #12]
 80078ec:	681b      	ldr	r3, [r3, #0]
 80078ee:	f022 0204 	bic.w	r2, r2, #4
 80078f2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80078f4:	68fb      	ldr	r3, [r7, #12]
 80078f6:	681b      	ldr	r3, [r3, #0]
 80078f8:	6999      	ldr	r1, [r3, #24]
 80078fa:	68bb      	ldr	r3, [r7, #8]
 80078fc:	691a      	ldr	r2, [r3, #16]
 80078fe:	68fb      	ldr	r3, [r7, #12]
 8007900:	681b      	ldr	r3, [r3, #0]
 8007902:	430a      	orrs	r2, r1
 8007904:	619a      	str	r2, [r3, #24]
      break;
 8007906:	e0a5      	b.n	8007a54 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8007908:	68fb      	ldr	r3, [r7, #12]
 800790a:	681b      	ldr	r3, [r3, #0]
 800790c:	68b9      	ldr	r1, [r7, #8]
 800790e:	4618      	mov	r0, r3
 8007910:	f000 f9b2 	bl	8007c78 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8007914:	68fb      	ldr	r3, [r7, #12]
 8007916:	681b      	ldr	r3, [r3, #0]
 8007918:	699a      	ldr	r2, [r3, #24]
 800791a:	68fb      	ldr	r3, [r7, #12]
 800791c:	681b      	ldr	r3, [r3, #0]
 800791e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8007922:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8007924:	68fb      	ldr	r3, [r7, #12]
 8007926:	681b      	ldr	r3, [r3, #0]
 8007928:	699a      	ldr	r2, [r3, #24]
 800792a:	68fb      	ldr	r3, [r7, #12]
 800792c:	681b      	ldr	r3, [r3, #0]
 800792e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007932:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8007934:	68fb      	ldr	r3, [r7, #12]
 8007936:	681b      	ldr	r3, [r3, #0]
 8007938:	6999      	ldr	r1, [r3, #24]
 800793a:	68bb      	ldr	r3, [r7, #8]
 800793c:	691b      	ldr	r3, [r3, #16]
 800793e:	021a      	lsls	r2, r3, #8
 8007940:	68fb      	ldr	r3, [r7, #12]
 8007942:	681b      	ldr	r3, [r3, #0]
 8007944:	430a      	orrs	r2, r1
 8007946:	619a      	str	r2, [r3, #24]
      break;
 8007948:	e084      	b.n	8007a54 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800794a:	68fb      	ldr	r3, [r7, #12]
 800794c:	681b      	ldr	r3, [r3, #0]
 800794e:	68b9      	ldr	r1, [r7, #8]
 8007950:	4618      	mov	r0, r3
 8007952:	f000 fa0b 	bl	8007d6c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8007956:	68fb      	ldr	r3, [r7, #12]
 8007958:	681b      	ldr	r3, [r3, #0]
 800795a:	69da      	ldr	r2, [r3, #28]
 800795c:	68fb      	ldr	r3, [r7, #12]
 800795e:	681b      	ldr	r3, [r3, #0]
 8007960:	f042 0208 	orr.w	r2, r2, #8
 8007964:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8007966:	68fb      	ldr	r3, [r7, #12]
 8007968:	681b      	ldr	r3, [r3, #0]
 800796a:	69da      	ldr	r2, [r3, #28]
 800796c:	68fb      	ldr	r3, [r7, #12]
 800796e:	681b      	ldr	r3, [r3, #0]
 8007970:	f022 0204 	bic.w	r2, r2, #4
 8007974:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8007976:	68fb      	ldr	r3, [r7, #12]
 8007978:	681b      	ldr	r3, [r3, #0]
 800797a:	69d9      	ldr	r1, [r3, #28]
 800797c:	68bb      	ldr	r3, [r7, #8]
 800797e:	691a      	ldr	r2, [r3, #16]
 8007980:	68fb      	ldr	r3, [r7, #12]
 8007982:	681b      	ldr	r3, [r3, #0]
 8007984:	430a      	orrs	r2, r1
 8007986:	61da      	str	r2, [r3, #28]
      break;
 8007988:	e064      	b.n	8007a54 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800798a:	68fb      	ldr	r3, [r7, #12]
 800798c:	681b      	ldr	r3, [r3, #0]
 800798e:	68b9      	ldr	r1, [r7, #8]
 8007990:	4618      	mov	r0, r3
 8007992:	f000 fa63 	bl	8007e5c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8007996:	68fb      	ldr	r3, [r7, #12]
 8007998:	681b      	ldr	r3, [r3, #0]
 800799a:	69da      	ldr	r2, [r3, #28]
 800799c:	68fb      	ldr	r3, [r7, #12]
 800799e:	681b      	ldr	r3, [r3, #0]
 80079a0:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80079a4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80079a6:	68fb      	ldr	r3, [r7, #12]
 80079a8:	681b      	ldr	r3, [r3, #0]
 80079aa:	69da      	ldr	r2, [r3, #28]
 80079ac:	68fb      	ldr	r3, [r7, #12]
 80079ae:	681b      	ldr	r3, [r3, #0]
 80079b0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80079b4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80079b6:	68fb      	ldr	r3, [r7, #12]
 80079b8:	681b      	ldr	r3, [r3, #0]
 80079ba:	69d9      	ldr	r1, [r3, #28]
 80079bc:	68bb      	ldr	r3, [r7, #8]
 80079be:	691b      	ldr	r3, [r3, #16]
 80079c0:	021a      	lsls	r2, r3, #8
 80079c2:	68fb      	ldr	r3, [r7, #12]
 80079c4:	681b      	ldr	r3, [r3, #0]
 80079c6:	430a      	orrs	r2, r1
 80079c8:	61da      	str	r2, [r3, #28]
      break;
 80079ca:	e043      	b.n	8007a54 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80079cc:	68fb      	ldr	r3, [r7, #12]
 80079ce:	681b      	ldr	r3, [r3, #0]
 80079d0:	68b9      	ldr	r1, [r7, #8]
 80079d2:	4618      	mov	r0, r3
 80079d4:	f000 faa0 	bl	8007f18 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80079d8:	68fb      	ldr	r3, [r7, #12]
 80079da:	681b      	ldr	r3, [r3, #0]
 80079dc:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80079de:	68fb      	ldr	r3, [r7, #12]
 80079e0:	681b      	ldr	r3, [r3, #0]
 80079e2:	f042 0208 	orr.w	r2, r2, #8
 80079e6:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80079e8:	68fb      	ldr	r3, [r7, #12]
 80079ea:	681b      	ldr	r3, [r3, #0]
 80079ec:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80079ee:	68fb      	ldr	r3, [r7, #12]
 80079f0:	681b      	ldr	r3, [r3, #0]
 80079f2:	f022 0204 	bic.w	r2, r2, #4
 80079f6:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80079f8:	68fb      	ldr	r3, [r7, #12]
 80079fa:	681b      	ldr	r3, [r3, #0]
 80079fc:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 80079fe:	68bb      	ldr	r3, [r7, #8]
 8007a00:	691a      	ldr	r2, [r3, #16]
 8007a02:	68fb      	ldr	r3, [r7, #12]
 8007a04:	681b      	ldr	r3, [r3, #0]
 8007a06:	430a      	orrs	r2, r1
 8007a08:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8007a0a:	e023      	b.n	8007a54 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8007a0c:	68fb      	ldr	r3, [r7, #12]
 8007a0e:	681b      	ldr	r3, [r3, #0]
 8007a10:	68b9      	ldr	r1, [r7, #8]
 8007a12:	4618      	mov	r0, r3
 8007a14:	f000 fad8 	bl	8007fc8 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8007a18:	68fb      	ldr	r3, [r7, #12]
 8007a1a:	681b      	ldr	r3, [r3, #0]
 8007a1c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8007a1e:	68fb      	ldr	r3, [r7, #12]
 8007a20:	681b      	ldr	r3, [r3, #0]
 8007a22:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8007a26:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8007a28:	68fb      	ldr	r3, [r7, #12]
 8007a2a:	681b      	ldr	r3, [r3, #0]
 8007a2c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8007a2e:	68fb      	ldr	r3, [r7, #12]
 8007a30:	681b      	ldr	r3, [r3, #0]
 8007a32:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007a36:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8007a38:	68fb      	ldr	r3, [r7, #12]
 8007a3a:	681b      	ldr	r3, [r3, #0]
 8007a3c:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8007a3e:	68bb      	ldr	r3, [r7, #8]
 8007a40:	691b      	ldr	r3, [r3, #16]
 8007a42:	021a      	lsls	r2, r3, #8
 8007a44:	68fb      	ldr	r3, [r7, #12]
 8007a46:	681b      	ldr	r3, [r3, #0]
 8007a48:	430a      	orrs	r2, r1
 8007a4a:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8007a4c:	e002      	b.n	8007a54 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8007a4e:	2301      	movs	r3, #1
 8007a50:	75fb      	strb	r3, [r7, #23]
      break;
 8007a52:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8007a54:	68fb      	ldr	r3, [r7, #12]
 8007a56:	2200      	movs	r2, #0
 8007a58:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8007a5c:	7dfb      	ldrb	r3, [r7, #23]
}
 8007a5e:	4618      	mov	r0, r3
 8007a60:	3718      	adds	r7, #24
 8007a62:	46bd      	mov	sp, r7
 8007a64:	bd80      	pop	{r7, pc}
 8007a66:	bf00      	nop

08007a68 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007a68:	b480      	push	{r7}
 8007a6a:	b083      	sub	sp, #12
 8007a6c:	af00      	add	r7, sp, #0
 8007a6e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007a70:	bf00      	nop
 8007a72:	370c      	adds	r7, #12
 8007a74:	46bd      	mov	sp, r7
 8007a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a7a:	4770      	bx	lr

08007a7c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8007a7c:	b480      	push	{r7}
 8007a7e:	b083      	sub	sp, #12
 8007a80:	af00      	add	r7, sp, #0
 8007a82:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8007a84:	bf00      	nop
 8007a86:	370c      	adds	r7, #12
 8007a88:	46bd      	mov	sp, r7
 8007a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a8e:	4770      	bx	lr

08007a90 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007a90:	b480      	push	{r7}
 8007a92:	b083      	sub	sp, #12
 8007a94:	af00      	add	r7, sp, #0
 8007a96:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007a98:	bf00      	nop
 8007a9a:	370c      	adds	r7, #12
 8007a9c:	46bd      	mov	sp, r7
 8007a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aa2:	4770      	bx	lr

08007aa4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007aa4:	b480      	push	{r7}
 8007aa6:	b083      	sub	sp, #12
 8007aa8:	af00      	add	r7, sp, #0
 8007aaa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007aac:	bf00      	nop
 8007aae:	370c      	adds	r7, #12
 8007ab0:	46bd      	mov	sp, r7
 8007ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ab6:	4770      	bx	lr

08007ab8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8007ab8:	b480      	push	{r7}
 8007aba:	b085      	sub	sp, #20
 8007abc:	af00      	add	r7, sp, #0
 8007abe:	6078      	str	r0, [r7, #4]
 8007ac0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	681b      	ldr	r3, [r3, #0]
 8007ac6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	4a2a      	ldr	r2, [pc, #168]	@ (8007b74 <TIM_Base_SetConfig+0xbc>)
 8007acc:	4293      	cmp	r3, r2
 8007ace:	d003      	beq.n	8007ad8 <TIM_Base_SetConfig+0x20>
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007ad6:	d108      	bne.n	8007aea <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007ad8:	68fb      	ldr	r3, [r7, #12]
 8007ada:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007ade:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007ae0:	683b      	ldr	r3, [r7, #0]
 8007ae2:	685b      	ldr	r3, [r3, #4]
 8007ae4:	68fa      	ldr	r2, [r7, #12]
 8007ae6:	4313      	orrs	r3, r2
 8007ae8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	4a21      	ldr	r2, [pc, #132]	@ (8007b74 <TIM_Base_SetConfig+0xbc>)
 8007aee:	4293      	cmp	r3, r2
 8007af0:	d00b      	beq.n	8007b0a <TIM_Base_SetConfig+0x52>
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007af8:	d007      	beq.n	8007b0a <TIM_Base_SetConfig+0x52>
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	4a1e      	ldr	r2, [pc, #120]	@ (8007b78 <TIM_Base_SetConfig+0xc0>)
 8007afe:	4293      	cmp	r3, r2
 8007b00:	d003      	beq.n	8007b0a <TIM_Base_SetConfig+0x52>
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	4a1d      	ldr	r2, [pc, #116]	@ (8007b7c <TIM_Base_SetConfig+0xc4>)
 8007b06:	4293      	cmp	r3, r2
 8007b08:	d108      	bne.n	8007b1c <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007b0a:	68fb      	ldr	r3, [r7, #12]
 8007b0c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007b10:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007b12:	683b      	ldr	r3, [r7, #0]
 8007b14:	68db      	ldr	r3, [r3, #12]
 8007b16:	68fa      	ldr	r2, [r7, #12]
 8007b18:	4313      	orrs	r3, r2
 8007b1a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007b1c:	68fb      	ldr	r3, [r7, #12]
 8007b1e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8007b22:	683b      	ldr	r3, [r7, #0]
 8007b24:	695b      	ldr	r3, [r3, #20]
 8007b26:	4313      	orrs	r3, r2
 8007b28:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	68fa      	ldr	r2, [r7, #12]
 8007b2e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007b30:	683b      	ldr	r3, [r7, #0]
 8007b32:	689a      	ldr	r2, [r3, #8]
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007b38:	683b      	ldr	r3, [r7, #0]
 8007b3a:	681a      	ldr	r2, [r3, #0]
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	4a0c      	ldr	r2, [pc, #48]	@ (8007b74 <TIM_Base_SetConfig+0xbc>)
 8007b44:	4293      	cmp	r3, r2
 8007b46:	d007      	beq.n	8007b58 <TIM_Base_SetConfig+0xa0>
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	4a0b      	ldr	r2, [pc, #44]	@ (8007b78 <TIM_Base_SetConfig+0xc0>)
 8007b4c:	4293      	cmp	r3, r2
 8007b4e:	d003      	beq.n	8007b58 <TIM_Base_SetConfig+0xa0>
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	4a0a      	ldr	r2, [pc, #40]	@ (8007b7c <TIM_Base_SetConfig+0xc4>)
 8007b54:	4293      	cmp	r3, r2
 8007b56:	d103      	bne.n	8007b60 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007b58:	683b      	ldr	r3, [r7, #0]
 8007b5a:	691a      	ldr	r2, [r3, #16]
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	2201      	movs	r2, #1
 8007b64:	615a      	str	r2, [r3, #20]
}
 8007b66:	bf00      	nop
 8007b68:	3714      	adds	r7, #20
 8007b6a:	46bd      	mov	sp, r7
 8007b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b70:	4770      	bx	lr
 8007b72:	bf00      	nop
 8007b74:	40012c00 	.word	0x40012c00
 8007b78:	40014000 	.word	0x40014000
 8007b7c:	40014400 	.word	0x40014400

08007b80 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007b80:	b480      	push	{r7}
 8007b82:	b087      	sub	sp, #28
 8007b84:	af00      	add	r7, sp, #0
 8007b86:	6078      	str	r0, [r7, #4]
 8007b88:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	6a1b      	ldr	r3, [r3, #32]
 8007b8e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	6a1b      	ldr	r3, [r3, #32]
 8007b94:	f023 0201 	bic.w	r2, r3, #1
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	685b      	ldr	r3, [r3, #4]
 8007ba0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	699b      	ldr	r3, [r3, #24]
 8007ba6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8007ba8:	68fb      	ldr	r3, [r7, #12]
 8007baa:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007bae:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007bb2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8007bb4:	68fb      	ldr	r3, [r7, #12]
 8007bb6:	f023 0303 	bic.w	r3, r3, #3
 8007bba:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007bbc:	683b      	ldr	r3, [r7, #0]
 8007bbe:	681b      	ldr	r3, [r3, #0]
 8007bc0:	68fa      	ldr	r2, [r7, #12]
 8007bc2:	4313      	orrs	r3, r2
 8007bc4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8007bc6:	697b      	ldr	r3, [r7, #20]
 8007bc8:	f023 0302 	bic.w	r3, r3, #2
 8007bcc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8007bce:	683b      	ldr	r3, [r7, #0]
 8007bd0:	689b      	ldr	r3, [r3, #8]
 8007bd2:	697a      	ldr	r2, [r7, #20]
 8007bd4:	4313      	orrs	r3, r2
 8007bd6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	4a24      	ldr	r2, [pc, #144]	@ (8007c6c <TIM_OC1_SetConfig+0xec>)
 8007bdc:	4293      	cmp	r3, r2
 8007bde:	d007      	beq.n	8007bf0 <TIM_OC1_SetConfig+0x70>
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	4a23      	ldr	r2, [pc, #140]	@ (8007c70 <TIM_OC1_SetConfig+0xf0>)
 8007be4:	4293      	cmp	r3, r2
 8007be6:	d003      	beq.n	8007bf0 <TIM_OC1_SetConfig+0x70>
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	4a22      	ldr	r2, [pc, #136]	@ (8007c74 <TIM_OC1_SetConfig+0xf4>)
 8007bec:	4293      	cmp	r3, r2
 8007bee:	d10c      	bne.n	8007c0a <TIM_OC1_SetConfig+0x8a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8007bf0:	697b      	ldr	r3, [r7, #20]
 8007bf2:	f023 0308 	bic.w	r3, r3, #8
 8007bf6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8007bf8:	683b      	ldr	r3, [r7, #0]
 8007bfa:	68db      	ldr	r3, [r3, #12]
 8007bfc:	697a      	ldr	r2, [r7, #20]
 8007bfe:	4313      	orrs	r3, r2
 8007c00:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8007c02:	697b      	ldr	r3, [r7, #20]
 8007c04:	f023 0304 	bic.w	r3, r3, #4
 8007c08:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	4a17      	ldr	r2, [pc, #92]	@ (8007c6c <TIM_OC1_SetConfig+0xec>)
 8007c0e:	4293      	cmp	r3, r2
 8007c10:	d007      	beq.n	8007c22 <TIM_OC1_SetConfig+0xa2>
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	4a16      	ldr	r2, [pc, #88]	@ (8007c70 <TIM_OC1_SetConfig+0xf0>)
 8007c16:	4293      	cmp	r3, r2
 8007c18:	d003      	beq.n	8007c22 <TIM_OC1_SetConfig+0xa2>
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	4a15      	ldr	r2, [pc, #84]	@ (8007c74 <TIM_OC1_SetConfig+0xf4>)
 8007c1e:	4293      	cmp	r3, r2
 8007c20:	d111      	bne.n	8007c46 <TIM_OC1_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8007c22:	693b      	ldr	r3, [r7, #16]
 8007c24:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007c28:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8007c2a:	693b      	ldr	r3, [r7, #16]
 8007c2c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8007c30:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8007c32:	683b      	ldr	r3, [r7, #0]
 8007c34:	695b      	ldr	r3, [r3, #20]
 8007c36:	693a      	ldr	r2, [r7, #16]
 8007c38:	4313      	orrs	r3, r2
 8007c3a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8007c3c:	683b      	ldr	r3, [r7, #0]
 8007c3e:	699b      	ldr	r3, [r3, #24]
 8007c40:	693a      	ldr	r2, [r7, #16]
 8007c42:	4313      	orrs	r3, r2
 8007c44:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	693a      	ldr	r2, [r7, #16]
 8007c4a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	68fa      	ldr	r2, [r7, #12]
 8007c50:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8007c52:	683b      	ldr	r3, [r7, #0]
 8007c54:	685a      	ldr	r2, [r3, #4]
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	697a      	ldr	r2, [r7, #20]
 8007c5e:	621a      	str	r2, [r3, #32]
}
 8007c60:	bf00      	nop
 8007c62:	371c      	adds	r7, #28
 8007c64:	46bd      	mov	sp, r7
 8007c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c6a:	4770      	bx	lr
 8007c6c:	40012c00 	.word	0x40012c00
 8007c70:	40014000 	.word	0x40014000
 8007c74:	40014400 	.word	0x40014400

08007c78 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007c78:	b480      	push	{r7}
 8007c7a:	b087      	sub	sp, #28
 8007c7c:	af00      	add	r7, sp, #0
 8007c7e:	6078      	str	r0, [r7, #4]
 8007c80:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	6a1b      	ldr	r3, [r3, #32]
 8007c86:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	6a1b      	ldr	r3, [r3, #32]
 8007c8c:	f023 0210 	bic.w	r2, r3, #16
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	685b      	ldr	r3, [r3, #4]
 8007c98:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	699b      	ldr	r3, [r3, #24]
 8007c9e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8007ca0:	68fb      	ldr	r3, [r7, #12]
 8007ca2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8007ca6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007caa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8007cac:	68fb      	ldr	r3, [r7, #12]
 8007cae:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007cb2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007cb4:	683b      	ldr	r3, [r7, #0]
 8007cb6:	681b      	ldr	r3, [r3, #0]
 8007cb8:	021b      	lsls	r3, r3, #8
 8007cba:	68fa      	ldr	r2, [r7, #12]
 8007cbc:	4313      	orrs	r3, r2
 8007cbe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8007cc0:	697b      	ldr	r3, [r7, #20]
 8007cc2:	f023 0320 	bic.w	r3, r3, #32
 8007cc6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8007cc8:	683b      	ldr	r3, [r7, #0]
 8007cca:	689b      	ldr	r3, [r3, #8]
 8007ccc:	011b      	lsls	r3, r3, #4
 8007cce:	697a      	ldr	r2, [r7, #20]
 8007cd0:	4313      	orrs	r3, r2
 8007cd2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	4a22      	ldr	r2, [pc, #136]	@ (8007d60 <TIM_OC2_SetConfig+0xe8>)
 8007cd8:	4293      	cmp	r3, r2
 8007cda:	d10d      	bne.n	8007cf8 <TIM_OC2_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8007cdc:	697b      	ldr	r3, [r7, #20]
 8007cde:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007ce2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8007ce4:	683b      	ldr	r3, [r7, #0]
 8007ce6:	68db      	ldr	r3, [r3, #12]
 8007ce8:	011b      	lsls	r3, r3, #4
 8007cea:	697a      	ldr	r2, [r7, #20]
 8007cec:	4313      	orrs	r3, r2
 8007cee:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8007cf0:	697b      	ldr	r3, [r7, #20]
 8007cf2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007cf6:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	4a19      	ldr	r2, [pc, #100]	@ (8007d60 <TIM_OC2_SetConfig+0xe8>)
 8007cfc:	4293      	cmp	r3, r2
 8007cfe:	d007      	beq.n	8007d10 <TIM_OC2_SetConfig+0x98>
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	4a18      	ldr	r2, [pc, #96]	@ (8007d64 <TIM_OC2_SetConfig+0xec>)
 8007d04:	4293      	cmp	r3, r2
 8007d06:	d003      	beq.n	8007d10 <TIM_OC2_SetConfig+0x98>
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	4a17      	ldr	r2, [pc, #92]	@ (8007d68 <TIM_OC2_SetConfig+0xf0>)
 8007d0c:	4293      	cmp	r3, r2
 8007d0e:	d113      	bne.n	8007d38 <TIM_OC2_SetConfig+0xc0>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8007d10:	693b      	ldr	r3, [r7, #16]
 8007d12:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8007d16:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8007d18:	693b      	ldr	r3, [r7, #16]
 8007d1a:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8007d1e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8007d20:	683b      	ldr	r3, [r7, #0]
 8007d22:	695b      	ldr	r3, [r3, #20]
 8007d24:	009b      	lsls	r3, r3, #2
 8007d26:	693a      	ldr	r2, [r7, #16]
 8007d28:	4313      	orrs	r3, r2
 8007d2a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8007d2c:	683b      	ldr	r3, [r7, #0]
 8007d2e:	699b      	ldr	r3, [r3, #24]
 8007d30:	009b      	lsls	r3, r3, #2
 8007d32:	693a      	ldr	r2, [r7, #16]
 8007d34:	4313      	orrs	r3, r2
 8007d36:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	693a      	ldr	r2, [r7, #16]
 8007d3c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	68fa      	ldr	r2, [r7, #12]
 8007d42:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8007d44:	683b      	ldr	r3, [r7, #0]
 8007d46:	685a      	ldr	r2, [r3, #4]
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	697a      	ldr	r2, [r7, #20]
 8007d50:	621a      	str	r2, [r3, #32]
}
 8007d52:	bf00      	nop
 8007d54:	371c      	adds	r7, #28
 8007d56:	46bd      	mov	sp, r7
 8007d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d5c:	4770      	bx	lr
 8007d5e:	bf00      	nop
 8007d60:	40012c00 	.word	0x40012c00
 8007d64:	40014000 	.word	0x40014000
 8007d68:	40014400 	.word	0x40014400

08007d6c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007d6c:	b480      	push	{r7}
 8007d6e:	b087      	sub	sp, #28
 8007d70:	af00      	add	r7, sp, #0
 8007d72:	6078      	str	r0, [r7, #4]
 8007d74:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	6a1b      	ldr	r3, [r3, #32]
 8007d7a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	6a1b      	ldr	r3, [r3, #32]
 8007d80:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	685b      	ldr	r3, [r3, #4]
 8007d8c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	69db      	ldr	r3, [r3, #28]
 8007d92:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8007d94:	68fb      	ldr	r3, [r7, #12]
 8007d96:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007d9a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007d9e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8007da0:	68fb      	ldr	r3, [r7, #12]
 8007da2:	f023 0303 	bic.w	r3, r3, #3
 8007da6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007da8:	683b      	ldr	r3, [r7, #0]
 8007daa:	681b      	ldr	r3, [r3, #0]
 8007dac:	68fa      	ldr	r2, [r7, #12]
 8007dae:	4313      	orrs	r3, r2
 8007db0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8007db2:	697b      	ldr	r3, [r7, #20]
 8007db4:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8007db8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8007dba:	683b      	ldr	r3, [r7, #0]
 8007dbc:	689b      	ldr	r3, [r3, #8]
 8007dbe:	021b      	lsls	r3, r3, #8
 8007dc0:	697a      	ldr	r2, [r7, #20]
 8007dc2:	4313      	orrs	r3, r2
 8007dc4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	4a21      	ldr	r2, [pc, #132]	@ (8007e50 <TIM_OC3_SetConfig+0xe4>)
 8007dca:	4293      	cmp	r3, r2
 8007dcc:	d10d      	bne.n	8007dea <TIM_OC3_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8007dce:	697b      	ldr	r3, [r7, #20]
 8007dd0:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8007dd4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8007dd6:	683b      	ldr	r3, [r7, #0]
 8007dd8:	68db      	ldr	r3, [r3, #12]
 8007dda:	021b      	lsls	r3, r3, #8
 8007ddc:	697a      	ldr	r2, [r7, #20]
 8007dde:	4313      	orrs	r3, r2
 8007de0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8007de2:	697b      	ldr	r3, [r7, #20]
 8007de4:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8007de8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	4a18      	ldr	r2, [pc, #96]	@ (8007e50 <TIM_OC3_SetConfig+0xe4>)
 8007dee:	4293      	cmp	r3, r2
 8007df0:	d007      	beq.n	8007e02 <TIM_OC3_SetConfig+0x96>
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	4a17      	ldr	r2, [pc, #92]	@ (8007e54 <TIM_OC3_SetConfig+0xe8>)
 8007df6:	4293      	cmp	r3, r2
 8007df8:	d003      	beq.n	8007e02 <TIM_OC3_SetConfig+0x96>
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	4a16      	ldr	r2, [pc, #88]	@ (8007e58 <TIM_OC3_SetConfig+0xec>)
 8007dfe:	4293      	cmp	r3, r2
 8007e00:	d113      	bne.n	8007e2a <TIM_OC3_SetConfig+0xbe>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8007e02:	693b      	ldr	r3, [r7, #16]
 8007e04:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8007e08:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8007e0a:	693b      	ldr	r3, [r7, #16]
 8007e0c:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8007e10:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8007e12:	683b      	ldr	r3, [r7, #0]
 8007e14:	695b      	ldr	r3, [r3, #20]
 8007e16:	011b      	lsls	r3, r3, #4
 8007e18:	693a      	ldr	r2, [r7, #16]
 8007e1a:	4313      	orrs	r3, r2
 8007e1c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8007e1e:	683b      	ldr	r3, [r7, #0]
 8007e20:	699b      	ldr	r3, [r3, #24]
 8007e22:	011b      	lsls	r3, r3, #4
 8007e24:	693a      	ldr	r2, [r7, #16]
 8007e26:	4313      	orrs	r3, r2
 8007e28:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	693a      	ldr	r2, [r7, #16]
 8007e2e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	68fa      	ldr	r2, [r7, #12]
 8007e34:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8007e36:	683b      	ldr	r3, [r7, #0]
 8007e38:	685a      	ldr	r2, [r3, #4]
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	697a      	ldr	r2, [r7, #20]
 8007e42:	621a      	str	r2, [r3, #32]
}
 8007e44:	bf00      	nop
 8007e46:	371c      	adds	r7, #28
 8007e48:	46bd      	mov	sp, r7
 8007e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e4e:	4770      	bx	lr
 8007e50:	40012c00 	.word	0x40012c00
 8007e54:	40014000 	.word	0x40014000
 8007e58:	40014400 	.word	0x40014400

08007e5c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007e5c:	b480      	push	{r7}
 8007e5e:	b087      	sub	sp, #28
 8007e60:	af00      	add	r7, sp, #0
 8007e62:	6078      	str	r0, [r7, #4]
 8007e64:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007e66:	687b      	ldr	r3, [r7, #4]
 8007e68:	6a1b      	ldr	r3, [r3, #32]
 8007e6a:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	6a1b      	ldr	r3, [r3, #32]
 8007e70:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	685b      	ldr	r3, [r3, #4]
 8007e7c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	69db      	ldr	r3, [r3, #28]
 8007e82:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8007e84:	68fb      	ldr	r3, [r7, #12]
 8007e86:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8007e8a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007e8e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8007e90:	68fb      	ldr	r3, [r7, #12]
 8007e92:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007e96:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007e98:	683b      	ldr	r3, [r7, #0]
 8007e9a:	681b      	ldr	r3, [r3, #0]
 8007e9c:	021b      	lsls	r3, r3, #8
 8007e9e:	68fa      	ldr	r2, [r7, #12]
 8007ea0:	4313      	orrs	r3, r2
 8007ea2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8007ea4:	693b      	ldr	r3, [r7, #16]
 8007ea6:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8007eaa:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007eac:	683b      	ldr	r3, [r7, #0]
 8007eae:	689b      	ldr	r3, [r3, #8]
 8007eb0:	031b      	lsls	r3, r3, #12
 8007eb2:	693a      	ldr	r2, [r7, #16]
 8007eb4:	4313      	orrs	r3, r2
 8007eb6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	4a14      	ldr	r2, [pc, #80]	@ (8007f0c <TIM_OC4_SetConfig+0xb0>)
 8007ebc:	4293      	cmp	r3, r2
 8007ebe:	d007      	beq.n	8007ed0 <TIM_OC4_SetConfig+0x74>
 8007ec0:	687b      	ldr	r3, [r7, #4]
 8007ec2:	4a13      	ldr	r2, [pc, #76]	@ (8007f10 <TIM_OC4_SetConfig+0xb4>)
 8007ec4:	4293      	cmp	r3, r2
 8007ec6:	d003      	beq.n	8007ed0 <TIM_OC4_SetConfig+0x74>
 8007ec8:	687b      	ldr	r3, [r7, #4]
 8007eca:	4a12      	ldr	r2, [pc, #72]	@ (8007f14 <TIM_OC4_SetConfig+0xb8>)
 8007ecc:	4293      	cmp	r3, r2
 8007ece:	d109      	bne.n	8007ee4 <TIM_OC4_SetConfig+0x88>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8007ed0:	697b      	ldr	r3, [r7, #20]
 8007ed2:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8007ed6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8007ed8:	683b      	ldr	r3, [r7, #0]
 8007eda:	695b      	ldr	r3, [r3, #20]
 8007edc:	019b      	lsls	r3, r3, #6
 8007ede:	697a      	ldr	r2, [r7, #20]
 8007ee0:	4313      	orrs	r3, r2
 8007ee2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	697a      	ldr	r2, [r7, #20]
 8007ee8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	68fa      	ldr	r2, [r7, #12]
 8007eee:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007ef0:	683b      	ldr	r3, [r7, #0]
 8007ef2:	685a      	ldr	r2, [r3, #4]
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	693a      	ldr	r2, [r7, #16]
 8007efc:	621a      	str	r2, [r3, #32]
}
 8007efe:	bf00      	nop
 8007f00:	371c      	adds	r7, #28
 8007f02:	46bd      	mov	sp, r7
 8007f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f08:	4770      	bx	lr
 8007f0a:	bf00      	nop
 8007f0c:	40012c00 	.word	0x40012c00
 8007f10:	40014000 	.word	0x40014000
 8007f14:	40014400 	.word	0x40014400

08007f18 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8007f18:	b480      	push	{r7}
 8007f1a:	b087      	sub	sp, #28
 8007f1c:	af00      	add	r7, sp, #0
 8007f1e:	6078      	str	r0, [r7, #4]
 8007f20:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	6a1b      	ldr	r3, [r3, #32]
 8007f26:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8007f28:	687b      	ldr	r3, [r7, #4]
 8007f2a:	6a1b      	ldr	r3, [r3, #32]
 8007f2c:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8007f30:	687b      	ldr	r3, [r7, #4]
 8007f32:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	685b      	ldr	r3, [r3, #4]
 8007f38:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007f3e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8007f40:	68fb      	ldr	r3, [r7, #12]
 8007f42:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007f46:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007f4a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007f4c:	683b      	ldr	r3, [r7, #0]
 8007f4e:	681b      	ldr	r3, [r3, #0]
 8007f50:	68fa      	ldr	r2, [r7, #12]
 8007f52:	4313      	orrs	r3, r2
 8007f54:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8007f56:	693b      	ldr	r3, [r7, #16]
 8007f58:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8007f5c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8007f5e:	683b      	ldr	r3, [r7, #0]
 8007f60:	689b      	ldr	r3, [r3, #8]
 8007f62:	041b      	lsls	r3, r3, #16
 8007f64:	693a      	ldr	r2, [r7, #16]
 8007f66:	4313      	orrs	r3, r2
 8007f68:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	4a13      	ldr	r2, [pc, #76]	@ (8007fbc <TIM_OC5_SetConfig+0xa4>)
 8007f6e:	4293      	cmp	r3, r2
 8007f70:	d007      	beq.n	8007f82 <TIM_OC5_SetConfig+0x6a>
 8007f72:	687b      	ldr	r3, [r7, #4]
 8007f74:	4a12      	ldr	r2, [pc, #72]	@ (8007fc0 <TIM_OC5_SetConfig+0xa8>)
 8007f76:	4293      	cmp	r3, r2
 8007f78:	d003      	beq.n	8007f82 <TIM_OC5_SetConfig+0x6a>
 8007f7a:	687b      	ldr	r3, [r7, #4]
 8007f7c:	4a11      	ldr	r2, [pc, #68]	@ (8007fc4 <TIM_OC5_SetConfig+0xac>)
 8007f7e:	4293      	cmp	r3, r2
 8007f80:	d109      	bne.n	8007f96 <TIM_OC5_SetConfig+0x7e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8007f82:	697b      	ldr	r3, [r7, #20]
 8007f84:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007f88:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8007f8a:	683b      	ldr	r3, [r7, #0]
 8007f8c:	695b      	ldr	r3, [r3, #20]
 8007f8e:	021b      	lsls	r3, r3, #8
 8007f90:	697a      	ldr	r2, [r7, #20]
 8007f92:	4313      	orrs	r3, r2
 8007f94:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007f96:	687b      	ldr	r3, [r7, #4]
 8007f98:	697a      	ldr	r2, [r7, #20]
 8007f9a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	68fa      	ldr	r2, [r7, #12]
 8007fa0:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8007fa2:	683b      	ldr	r3, [r7, #0]
 8007fa4:	685a      	ldr	r2, [r3, #4]
 8007fa6:	687b      	ldr	r3, [r7, #4]
 8007fa8:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007faa:	687b      	ldr	r3, [r7, #4]
 8007fac:	693a      	ldr	r2, [r7, #16]
 8007fae:	621a      	str	r2, [r3, #32]
}
 8007fb0:	bf00      	nop
 8007fb2:	371c      	adds	r7, #28
 8007fb4:	46bd      	mov	sp, r7
 8007fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fba:	4770      	bx	lr
 8007fbc:	40012c00 	.word	0x40012c00
 8007fc0:	40014000 	.word	0x40014000
 8007fc4:	40014400 	.word	0x40014400

08007fc8 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8007fc8:	b480      	push	{r7}
 8007fca:	b087      	sub	sp, #28
 8007fcc:	af00      	add	r7, sp, #0
 8007fce:	6078      	str	r0, [r7, #4]
 8007fd0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007fd2:	687b      	ldr	r3, [r7, #4]
 8007fd4:	6a1b      	ldr	r3, [r3, #32]
 8007fd6:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	6a1b      	ldr	r3, [r3, #32]
 8007fdc:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	685b      	ldr	r3, [r3, #4]
 8007fe8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8007fea:	687b      	ldr	r3, [r7, #4]
 8007fec:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007fee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8007ff0:	68fb      	ldr	r3, [r7, #12]
 8007ff2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8007ff6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007ffa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007ffc:	683b      	ldr	r3, [r7, #0]
 8007ffe:	681b      	ldr	r3, [r3, #0]
 8008000:	021b      	lsls	r3, r3, #8
 8008002:	68fa      	ldr	r2, [r7, #12]
 8008004:	4313      	orrs	r3, r2
 8008006:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8008008:	693b      	ldr	r3, [r7, #16]
 800800a:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800800e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8008010:	683b      	ldr	r3, [r7, #0]
 8008012:	689b      	ldr	r3, [r3, #8]
 8008014:	051b      	lsls	r3, r3, #20
 8008016:	693a      	ldr	r2, [r7, #16]
 8008018:	4313      	orrs	r3, r2
 800801a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	4a14      	ldr	r2, [pc, #80]	@ (8008070 <TIM_OC6_SetConfig+0xa8>)
 8008020:	4293      	cmp	r3, r2
 8008022:	d007      	beq.n	8008034 <TIM_OC6_SetConfig+0x6c>
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	4a13      	ldr	r2, [pc, #76]	@ (8008074 <TIM_OC6_SetConfig+0xac>)
 8008028:	4293      	cmp	r3, r2
 800802a:	d003      	beq.n	8008034 <TIM_OC6_SetConfig+0x6c>
 800802c:	687b      	ldr	r3, [r7, #4]
 800802e:	4a12      	ldr	r2, [pc, #72]	@ (8008078 <TIM_OC6_SetConfig+0xb0>)
 8008030:	4293      	cmp	r3, r2
 8008032:	d109      	bne.n	8008048 <TIM_OC6_SetConfig+0x80>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8008034:	697b      	ldr	r3, [r7, #20]
 8008036:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800803a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800803c:	683b      	ldr	r3, [r7, #0]
 800803e:	695b      	ldr	r3, [r3, #20]
 8008040:	029b      	lsls	r3, r3, #10
 8008042:	697a      	ldr	r2, [r7, #20]
 8008044:	4313      	orrs	r3, r2
 8008046:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	697a      	ldr	r2, [r7, #20]
 800804c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800804e:	687b      	ldr	r3, [r7, #4]
 8008050:	68fa      	ldr	r2, [r7, #12]
 8008052:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8008054:	683b      	ldr	r3, [r7, #0]
 8008056:	685a      	ldr	r2, [r3, #4]
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800805c:	687b      	ldr	r3, [r7, #4]
 800805e:	693a      	ldr	r2, [r7, #16]
 8008060:	621a      	str	r2, [r3, #32]
}
 8008062:	bf00      	nop
 8008064:	371c      	adds	r7, #28
 8008066:	46bd      	mov	sp, r7
 8008068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800806c:	4770      	bx	lr
 800806e:	bf00      	nop
 8008070:	40012c00 	.word	0x40012c00
 8008074:	40014000 	.word	0x40014000
 8008078:	40014400 	.word	0x40014400

0800807c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800807c:	b480      	push	{r7}
 800807e:	b087      	sub	sp, #28
 8008080:	af00      	add	r7, sp, #0
 8008082:	60f8      	str	r0, [r7, #12]
 8008084:	60b9      	str	r1, [r7, #8]
 8008086:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8008088:	68bb      	ldr	r3, [r7, #8]
 800808a:	f003 031f 	and.w	r3, r3, #31
 800808e:	2201      	movs	r2, #1
 8008090:	fa02 f303 	lsl.w	r3, r2, r3
 8008094:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8008096:	68fb      	ldr	r3, [r7, #12]
 8008098:	6a1a      	ldr	r2, [r3, #32]
 800809a:	697b      	ldr	r3, [r7, #20]
 800809c:	43db      	mvns	r3, r3
 800809e:	401a      	ands	r2, r3
 80080a0:	68fb      	ldr	r3, [r7, #12]
 80080a2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80080a4:	68fb      	ldr	r3, [r7, #12]
 80080a6:	6a1a      	ldr	r2, [r3, #32]
 80080a8:	68bb      	ldr	r3, [r7, #8]
 80080aa:	f003 031f 	and.w	r3, r3, #31
 80080ae:	6879      	ldr	r1, [r7, #4]
 80080b0:	fa01 f303 	lsl.w	r3, r1, r3
 80080b4:	431a      	orrs	r2, r3
 80080b6:	68fb      	ldr	r3, [r7, #12]
 80080b8:	621a      	str	r2, [r3, #32]
}
 80080ba:	bf00      	nop
 80080bc:	371c      	adds	r7, #28
 80080be:	46bd      	mov	sp, r7
 80080c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080c4:	4770      	bx	lr
	...

080080c8 <HAL_TIMEx_PWMN_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80080c8:	b580      	push	{r7, lr}
 80080ca:	b084      	sub	sp, #16
 80080cc:	af00      	add	r7, sp, #0
 80080ce:	6078      	str	r0, [r7, #4]
 80080d0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Check the TIM complementary channel state */
  if (TIM_CHANNEL_N_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80080d2:	683b      	ldr	r3, [r7, #0]
 80080d4:	2b00      	cmp	r3, #0
 80080d6:	d109      	bne.n	80080ec <HAL_TIMEx_PWMN_Start+0x24>
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80080de:	b2db      	uxtb	r3, r3
 80080e0:	2b01      	cmp	r3, #1
 80080e2:	bf14      	ite	ne
 80080e4:	2301      	movne	r3, #1
 80080e6:	2300      	moveq	r3, #0
 80080e8:	b2db      	uxtb	r3, r3
 80080ea:	e022      	b.n	8008132 <HAL_TIMEx_PWMN_Start+0x6a>
 80080ec:	683b      	ldr	r3, [r7, #0]
 80080ee:	2b04      	cmp	r3, #4
 80080f0:	d109      	bne.n	8008106 <HAL_TIMEx_PWMN_Start+0x3e>
 80080f2:	687b      	ldr	r3, [r7, #4]
 80080f4:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80080f8:	b2db      	uxtb	r3, r3
 80080fa:	2b01      	cmp	r3, #1
 80080fc:	bf14      	ite	ne
 80080fe:	2301      	movne	r3, #1
 8008100:	2300      	moveq	r3, #0
 8008102:	b2db      	uxtb	r3, r3
 8008104:	e015      	b.n	8008132 <HAL_TIMEx_PWMN_Start+0x6a>
 8008106:	683b      	ldr	r3, [r7, #0]
 8008108:	2b08      	cmp	r3, #8
 800810a:	d109      	bne.n	8008120 <HAL_TIMEx_PWMN_Start+0x58>
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 8008112:	b2db      	uxtb	r3, r3
 8008114:	2b01      	cmp	r3, #1
 8008116:	bf14      	ite	ne
 8008118:	2301      	movne	r3, #1
 800811a:	2300      	moveq	r3, #0
 800811c:	b2db      	uxtb	r3, r3
 800811e:	e008      	b.n	8008132 <HAL_TIMEx_PWMN_Start+0x6a>
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	f893 3047 	ldrb.w	r3, [r3, #71]	@ 0x47
 8008126:	b2db      	uxtb	r3, r3
 8008128:	2b01      	cmp	r3, #1
 800812a:	bf14      	ite	ne
 800812c:	2301      	movne	r3, #1
 800812e:	2300      	moveq	r3, #0
 8008130:	b2db      	uxtb	r3, r3
 8008132:	2b00      	cmp	r3, #0
 8008134:	d001      	beq.n	800813a <HAL_TIMEx_PWMN_Start+0x72>
  {
    return HAL_ERROR;
 8008136:	2301      	movs	r3, #1
 8008138:	e05a      	b.n	80081f0 <HAL_TIMEx_PWMN_Start+0x128>
  }

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800813a:	683b      	ldr	r3, [r7, #0]
 800813c:	2b00      	cmp	r3, #0
 800813e:	d104      	bne.n	800814a <HAL_TIMEx_PWMN_Start+0x82>
 8008140:	687b      	ldr	r3, [r7, #4]
 8008142:	2202      	movs	r2, #2
 8008144:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8008148:	e013      	b.n	8008172 <HAL_TIMEx_PWMN_Start+0xaa>
 800814a:	683b      	ldr	r3, [r7, #0]
 800814c:	2b04      	cmp	r3, #4
 800814e:	d104      	bne.n	800815a <HAL_TIMEx_PWMN_Start+0x92>
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	2202      	movs	r2, #2
 8008154:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8008158:	e00b      	b.n	8008172 <HAL_TIMEx_PWMN_Start+0xaa>
 800815a:	683b      	ldr	r3, [r7, #0]
 800815c:	2b08      	cmp	r3, #8
 800815e:	d104      	bne.n	800816a <HAL_TIMEx_PWMN_Start+0xa2>
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	2202      	movs	r2, #2
 8008164:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8008168:	e003      	b.n	8008172 <HAL_TIMEx_PWMN_Start+0xaa>
 800816a:	687b      	ldr	r3, [r7, #4]
 800816c:	2202      	movs	r2, #2
 800816e:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Enable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 8008172:	687b      	ldr	r3, [r7, #4]
 8008174:	681b      	ldr	r3, [r3, #0]
 8008176:	2204      	movs	r2, #4
 8008178:	6839      	ldr	r1, [r7, #0]
 800817a:	4618      	mov	r0, r3
 800817c:	f000 f93e 	bl	80083fc <TIM_CCxNChannelCmd>

  /* Enable the Main Output */
  __HAL_TIM_MOE_ENABLE(htim);
 8008180:	687b      	ldr	r3, [r7, #4]
 8008182:	681b      	ldr	r3, [r3, #0]
 8008184:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8008186:	687b      	ldr	r3, [r7, #4]
 8008188:	681b      	ldr	r3, [r3, #0]
 800818a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800818e:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008190:	687b      	ldr	r3, [r7, #4]
 8008192:	681b      	ldr	r3, [r3, #0]
 8008194:	4a18      	ldr	r2, [pc, #96]	@ (80081f8 <HAL_TIMEx_PWMN_Start+0x130>)
 8008196:	4293      	cmp	r3, r2
 8008198:	d009      	beq.n	80081ae <HAL_TIMEx_PWMN_Start+0xe6>
 800819a:	687b      	ldr	r3, [r7, #4]
 800819c:	681b      	ldr	r3, [r3, #0]
 800819e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80081a2:	d004      	beq.n	80081ae <HAL_TIMEx_PWMN_Start+0xe6>
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	681b      	ldr	r3, [r3, #0]
 80081a8:	4a14      	ldr	r2, [pc, #80]	@ (80081fc <HAL_TIMEx_PWMN_Start+0x134>)
 80081aa:	4293      	cmp	r3, r2
 80081ac:	d115      	bne.n	80081da <HAL_TIMEx_PWMN_Start+0x112>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80081ae:	687b      	ldr	r3, [r7, #4]
 80081b0:	681b      	ldr	r3, [r3, #0]
 80081b2:	689a      	ldr	r2, [r3, #8]
 80081b4:	4b12      	ldr	r3, [pc, #72]	@ (8008200 <HAL_TIMEx_PWMN_Start+0x138>)
 80081b6:	4013      	ands	r3, r2
 80081b8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80081ba:	68fb      	ldr	r3, [r7, #12]
 80081bc:	2b06      	cmp	r3, #6
 80081be:	d015      	beq.n	80081ec <HAL_TIMEx_PWMN_Start+0x124>
 80081c0:	68fb      	ldr	r3, [r7, #12]
 80081c2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80081c6:	d011      	beq.n	80081ec <HAL_TIMEx_PWMN_Start+0x124>
    {
      __HAL_TIM_ENABLE(htim);
 80081c8:	687b      	ldr	r3, [r7, #4]
 80081ca:	681b      	ldr	r3, [r3, #0]
 80081cc:	681a      	ldr	r2, [r3, #0]
 80081ce:	687b      	ldr	r3, [r7, #4]
 80081d0:	681b      	ldr	r3, [r3, #0]
 80081d2:	f042 0201 	orr.w	r2, r2, #1
 80081d6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80081d8:	e008      	b.n	80081ec <HAL_TIMEx_PWMN_Start+0x124>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80081da:	687b      	ldr	r3, [r7, #4]
 80081dc:	681b      	ldr	r3, [r3, #0]
 80081de:	681a      	ldr	r2, [r3, #0]
 80081e0:	687b      	ldr	r3, [r7, #4]
 80081e2:	681b      	ldr	r3, [r3, #0]
 80081e4:	f042 0201 	orr.w	r2, r2, #1
 80081e8:	601a      	str	r2, [r3, #0]
 80081ea:	e000      	b.n	80081ee <HAL_TIMEx_PWMN_Start+0x126>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80081ec:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80081ee:	2300      	movs	r3, #0
}
 80081f0:	4618      	mov	r0, r3
 80081f2:	3710      	adds	r7, #16
 80081f4:	46bd      	mov	sp, r7
 80081f6:	bd80      	pop	{r7, pc}
 80081f8:	40012c00 	.word	0x40012c00
 80081fc:	40014000 	.word	0x40014000
 8008200:	00010007 	.word	0x00010007

08008204 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008204:	b480      	push	{r7}
 8008206:	b085      	sub	sp, #20
 8008208:	af00      	add	r7, sp, #0
 800820a:	6078      	str	r0, [r7, #4]
 800820c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800820e:	687b      	ldr	r3, [r7, #4]
 8008210:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008214:	2b01      	cmp	r3, #1
 8008216:	d101      	bne.n	800821c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008218:	2302      	movs	r3, #2
 800821a:	e04f      	b.n	80082bc <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	2201      	movs	r2, #1
 8008220:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	2202      	movs	r2, #2
 8008228:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800822c:	687b      	ldr	r3, [r7, #4]
 800822e:	681b      	ldr	r3, [r3, #0]
 8008230:	685b      	ldr	r3, [r3, #4]
 8008232:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008234:	687b      	ldr	r3, [r7, #4]
 8008236:	681b      	ldr	r3, [r3, #0]
 8008238:	689b      	ldr	r3, [r3, #8]
 800823a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800823c:	687b      	ldr	r3, [r7, #4]
 800823e:	681b      	ldr	r3, [r3, #0]
 8008240:	4a21      	ldr	r2, [pc, #132]	@ (80082c8 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8008242:	4293      	cmp	r3, r2
 8008244:	d108      	bne.n	8008258 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8008246:	68fb      	ldr	r3, [r7, #12]
 8008248:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800824c:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800824e:	683b      	ldr	r3, [r7, #0]
 8008250:	685b      	ldr	r3, [r3, #4]
 8008252:	68fa      	ldr	r2, [r7, #12]
 8008254:	4313      	orrs	r3, r2
 8008256:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008258:	68fb      	ldr	r3, [r7, #12]
 800825a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800825e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008260:	683b      	ldr	r3, [r7, #0]
 8008262:	681b      	ldr	r3, [r3, #0]
 8008264:	68fa      	ldr	r2, [r7, #12]
 8008266:	4313      	orrs	r3, r2
 8008268:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800826a:	687b      	ldr	r3, [r7, #4]
 800826c:	681b      	ldr	r3, [r3, #0]
 800826e:	68fa      	ldr	r2, [r7, #12]
 8008270:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008272:	687b      	ldr	r3, [r7, #4]
 8008274:	681b      	ldr	r3, [r3, #0]
 8008276:	4a14      	ldr	r2, [pc, #80]	@ (80082c8 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8008278:	4293      	cmp	r3, r2
 800827a:	d009      	beq.n	8008290 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 800827c:	687b      	ldr	r3, [r7, #4]
 800827e:	681b      	ldr	r3, [r3, #0]
 8008280:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008284:	d004      	beq.n	8008290 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8008286:	687b      	ldr	r3, [r7, #4]
 8008288:	681b      	ldr	r3, [r3, #0]
 800828a:	4a10      	ldr	r2, [pc, #64]	@ (80082cc <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 800828c:	4293      	cmp	r3, r2
 800828e:	d10c      	bne.n	80082aa <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8008290:	68bb      	ldr	r3, [r7, #8]
 8008292:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8008296:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008298:	683b      	ldr	r3, [r7, #0]
 800829a:	689b      	ldr	r3, [r3, #8]
 800829c:	68ba      	ldr	r2, [r7, #8]
 800829e:	4313      	orrs	r3, r2
 80082a0:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80082a2:	687b      	ldr	r3, [r7, #4]
 80082a4:	681b      	ldr	r3, [r3, #0]
 80082a6:	68ba      	ldr	r2, [r7, #8]
 80082a8:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80082aa:	687b      	ldr	r3, [r7, #4]
 80082ac:	2201      	movs	r2, #1
 80082ae:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80082b2:	687b      	ldr	r3, [r7, #4]
 80082b4:	2200      	movs	r2, #0
 80082b6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80082ba:	2300      	movs	r3, #0
}
 80082bc:	4618      	mov	r0, r3
 80082be:	3714      	adds	r7, #20
 80082c0:	46bd      	mov	sp, r7
 80082c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082c6:	4770      	bx	lr
 80082c8:	40012c00 	.word	0x40012c00
 80082cc:	40014000 	.word	0x40014000

080082d0 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80082d0:	b480      	push	{r7}
 80082d2:	b085      	sub	sp, #20
 80082d4:	af00      	add	r7, sp, #0
 80082d6:	6078      	str	r0, [r7, #4]
 80082d8:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80082da:	2300      	movs	r3, #0
 80082dc:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80082de:	687b      	ldr	r3, [r7, #4]
 80082e0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80082e4:	2b01      	cmp	r3, #1
 80082e6:	d101      	bne.n	80082ec <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80082e8:	2302      	movs	r3, #2
 80082ea:	e060      	b.n	80083ae <HAL_TIMEx_ConfigBreakDeadTime+0xde>
 80082ec:	687b      	ldr	r3, [r7, #4]
 80082ee:	2201      	movs	r2, #1
 80082f0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80082f4:	68fb      	ldr	r3, [r7, #12]
 80082f6:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 80082fa:	683b      	ldr	r3, [r7, #0]
 80082fc:	68db      	ldr	r3, [r3, #12]
 80082fe:	4313      	orrs	r3, r2
 8008300:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8008302:	68fb      	ldr	r3, [r7, #12]
 8008304:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8008308:	683b      	ldr	r3, [r7, #0]
 800830a:	689b      	ldr	r3, [r3, #8]
 800830c:	4313      	orrs	r3, r2
 800830e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8008310:	68fb      	ldr	r3, [r7, #12]
 8008312:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8008316:	683b      	ldr	r3, [r7, #0]
 8008318:	685b      	ldr	r3, [r3, #4]
 800831a:	4313      	orrs	r3, r2
 800831c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800831e:	68fb      	ldr	r3, [r7, #12]
 8008320:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8008324:	683b      	ldr	r3, [r7, #0]
 8008326:	681b      	ldr	r3, [r3, #0]
 8008328:	4313      	orrs	r3, r2
 800832a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800832c:	68fb      	ldr	r3, [r7, #12]
 800832e:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8008332:	683b      	ldr	r3, [r7, #0]
 8008334:	691b      	ldr	r3, [r3, #16]
 8008336:	4313      	orrs	r3, r2
 8008338:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800833a:	68fb      	ldr	r3, [r7, #12]
 800833c:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8008340:	683b      	ldr	r3, [r7, #0]
 8008342:	695b      	ldr	r3, [r3, #20]
 8008344:	4313      	orrs	r3, r2
 8008346:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8008348:	68fb      	ldr	r3, [r7, #12]
 800834a:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 800834e:	683b      	ldr	r3, [r7, #0]
 8008350:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008352:	4313      	orrs	r3, r2
 8008354:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8008356:	68fb      	ldr	r3, [r7, #12]
 8008358:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 800835c:	683b      	ldr	r3, [r7, #0]
 800835e:	699b      	ldr	r3, [r3, #24]
 8008360:	041b      	lsls	r3, r3, #16
 8008362:	4313      	orrs	r3, r2
 8008364:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8008366:	687b      	ldr	r3, [r7, #4]
 8008368:	681b      	ldr	r3, [r3, #0]
 800836a:	4a14      	ldr	r2, [pc, #80]	@ (80083bc <HAL_TIMEx_ConfigBreakDeadTime+0xec>)
 800836c:	4293      	cmp	r3, r2
 800836e:	d115      	bne.n	800839c <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8008370:	68fb      	ldr	r3, [r7, #12]
 8008372:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 8008376:	683b      	ldr	r3, [r7, #0]
 8008378:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800837a:	051b      	lsls	r3, r3, #20
 800837c:	4313      	orrs	r3, r2
 800837e:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8008380:	68fb      	ldr	r3, [r7, #12]
 8008382:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8008386:	683b      	ldr	r3, [r7, #0]
 8008388:	69db      	ldr	r3, [r3, #28]
 800838a:	4313      	orrs	r3, r2
 800838c:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800838e:	68fb      	ldr	r3, [r7, #12]
 8008390:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8008394:	683b      	ldr	r3, [r7, #0]
 8008396:	6a1b      	ldr	r3, [r3, #32]
 8008398:	4313      	orrs	r3, r2
 800839a:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800839c:	687b      	ldr	r3, [r7, #4]
 800839e:	681b      	ldr	r3, [r3, #0]
 80083a0:	68fa      	ldr	r2, [r7, #12]
 80083a2:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 80083a4:	687b      	ldr	r3, [r7, #4]
 80083a6:	2200      	movs	r2, #0
 80083a8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80083ac:	2300      	movs	r3, #0
}
 80083ae:	4618      	mov	r0, r3
 80083b0:	3714      	adds	r7, #20
 80083b2:	46bd      	mov	sp, r7
 80083b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083b8:	4770      	bx	lr
 80083ba:	bf00      	nop
 80083bc:	40012c00 	.word	0x40012c00

080083c0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80083c0:	b480      	push	{r7}
 80083c2:	b083      	sub	sp, #12
 80083c4:	af00      	add	r7, sp, #0
 80083c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80083c8:	bf00      	nop
 80083ca:	370c      	adds	r7, #12
 80083cc:	46bd      	mov	sp, r7
 80083ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083d2:	4770      	bx	lr

080083d4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80083d4:	b480      	push	{r7}
 80083d6:	b083      	sub	sp, #12
 80083d8:	af00      	add	r7, sp, #0
 80083da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80083dc:	bf00      	nop
 80083de:	370c      	adds	r7, #12
 80083e0:	46bd      	mov	sp, r7
 80083e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083e6:	4770      	bx	lr

080083e8 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80083e8:	b480      	push	{r7}
 80083ea:	b083      	sub	sp, #12
 80083ec:	af00      	add	r7, sp, #0
 80083ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80083f0:	bf00      	nop
 80083f2:	370c      	adds	r7, #12
 80083f4:	46bd      	mov	sp, r7
 80083f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083fa:	4770      	bx	lr

080083fc <TIM_CCxNChannelCmd>:
  * @param  ChannelNState specifies the TIM Channel CCxNE bit new state.
  *          This parameter can be: TIM_CCxN_ENABLE or TIM_CCxN_Disable.
  * @retval None
  */
static void TIM_CCxNChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelNState)
{
 80083fc:	b480      	push	{r7}
 80083fe:	b087      	sub	sp, #28
 8008400:	af00      	add	r7, sp, #0
 8008402:	60f8      	str	r0, [r7, #12]
 8008404:	60b9      	str	r1, [r7, #8]
 8008406:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  tmp = TIM_CCER_CC1NE << (Channel & 0xFU); /* 0xFU = 15 bits max shift */
 8008408:	68bb      	ldr	r3, [r7, #8]
 800840a:	f003 030f 	and.w	r3, r3, #15
 800840e:	2204      	movs	r2, #4
 8008410:	fa02 f303 	lsl.w	r3, r2, r3
 8008414:	617b      	str	r3, [r7, #20]

  /* Reset the CCxNE Bit */
  TIMx->CCER &=  ~tmp;
 8008416:	68fb      	ldr	r3, [r7, #12]
 8008418:	6a1a      	ldr	r2, [r3, #32]
 800841a:	697b      	ldr	r3, [r7, #20]
 800841c:	43db      	mvns	r3, r3
 800841e:	401a      	ands	r2, r3
 8008420:	68fb      	ldr	r3, [r7, #12]
 8008422:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxNE Bit */
  TIMx->CCER |= (uint32_t)(ChannelNState << (Channel & 0xFU)); /* 0xFU = 15 bits max shift */
 8008424:	68fb      	ldr	r3, [r7, #12]
 8008426:	6a1a      	ldr	r2, [r3, #32]
 8008428:	68bb      	ldr	r3, [r7, #8]
 800842a:	f003 030f 	and.w	r3, r3, #15
 800842e:	6879      	ldr	r1, [r7, #4]
 8008430:	fa01 f303 	lsl.w	r3, r1, r3
 8008434:	431a      	orrs	r2, r3
 8008436:	68fb      	ldr	r3, [r7, #12]
 8008438:	621a      	str	r2, [r3, #32]
}
 800843a:	bf00      	nop
 800843c:	371c      	adds	r7, #28
 800843e:	46bd      	mov	sp, r7
 8008440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008444:	4770      	bx	lr

08008446 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008446:	b580      	push	{r7, lr}
 8008448:	b082      	sub	sp, #8
 800844a:	af00      	add	r7, sp, #0
 800844c:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800844e:	687b      	ldr	r3, [r7, #4]
 8008450:	2b00      	cmp	r3, #0
 8008452:	d101      	bne.n	8008458 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008454:	2301      	movs	r3, #1
 8008456:	e040      	b.n	80084da <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8008458:	687b      	ldr	r3, [r7, #4]
 800845a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800845c:	2b00      	cmp	r3, #0
 800845e:	d106      	bne.n	800846e <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008460:	687b      	ldr	r3, [r7, #4]
 8008462:	2200      	movs	r2, #0
 8008464:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008468:	6878      	ldr	r0, [r7, #4]
 800846a:	f7fa fc41 	bl	8002cf0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800846e:	687b      	ldr	r3, [r7, #4]
 8008470:	2224      	movs	r2, #36	@ 0x24
 8008472:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8008474:	687b      	ldr	r3, [r7, #4]
 8008476:	681b      	ldr	r3, [r3, #0]
 8008478:	681a      	ldr	r2, [r3, #0]
 800847a:	687b      	ldr	r3, [r7, #4]
 800847c:	681b      	ldr	r3, [r3, #0]
 800847e:	f022 0201 	bic.w	r2, r2, #1
 8008482:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8008484:	687b      	ldr	r3, [r7, #4]
 8008486:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008488:	2b00      	cmp	r3, #0
 800848a:	d002      	beq.n	8008492 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 800848c:	6878      	ldr	r0, [r7, #4]
 800848e:	f000 fed7 	bl	8009240 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8008492:	6878      	ldr	r0, [r7, #4]
 8008494:	f000 fca8 	bl	8008de8 <UART_SetConfig>
 8008498:	4603      	mov	r3, r0
 800849a:	2b01      	cmp	r3, #1
 800849c:	d101      	bne.n	80084a2 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 800849e:	2301      	movs	r3, #1
 80084a0:	e01b      	b.n	80084da <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80084a2:	687b      	ldr	r3, [r7, #4]
 80084a4:	681b      	ldr	r3, [r3, #0]
 80084a6:	685a      	ldr	r2, [r3, #4]
 80084a8:	687b      	ldr	r3, [r7, #4]
 80084aa:	681b      	ldr	r3, [r3, #0]
 80084ac:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80084b0:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80084b2:	687b      	ldr	r3, [r7, #4]
 80084b4:	681b      	ldr	r3, [r3, #0]
 80084b6:	689a      	ldr	r2, [r3, #8]
 80084b8:	687b      	ldr	r3, [r7, #4]
 80084ba:	681b      	ldr	r3, [r3, #0]
 80084bc:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80084c0:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80084c2:	687b      	ldr	r3, [r7, #4]
 80084c4:	681b      	ldr	r3, [r3, #0]
 80084c6:	681a      	ldr	r2, [r3, #0]
 80084c8:	687b      	ldr	r3, [r7, #4]
 80084ca:	681b      	ldr	r3, [r3, #0]
 80084cc:	f042 0201 	orr.w	r2, r2, #1
 80084d0:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80084d2:	6878      	ldr	r0, [r7, #4]
 80084d4:	f000 ff56 	bl	8009384 <UART_CheckIdleState>
 80084d8:	4603      	mov	r3, r0
}
 80084da:	4618      	mov	r0, r3
 80084dc:	3708      	adds	r7, #8
 80084de:	46bd      	mov	sp, r7
 80084e0:	bd80      	pop	{r7, pc}
	...

080084e4 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 80084e4:	b580      	push	{r7, lr}
 80084e6:	b08a      	sub	sp, #40	@ 0x28
 80084e8:	af00      	add	r7, sp, #0
 80084ea:	60f8      	str	r0, [r7, #12]
 80084ec:	60b9      	str	r1, [r7, #8]
 80084ee:	4613      	mov	r3, r2
 80084f0:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80084f2:	68fb      	ldr	r3, [r7, #12]
 80084f4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80084f6:	2b20      	cmp	r3, #32
 80084f8:	d165      	bne.n	80085c6 <HAL_UART_Transmit_DMA+0xe2>
  {
    if ((pData == NULL) || (Size == 0U))
 80084fa:	68bb      	ldr	r3, [r7, #8]
 80084fc:	2b00      	cmp	r3, #0
 80084fe:	d002      	beq.n	8008506 <HAL_UART_Transmit_DMA+0x22>
 8008500:	88fb      	ldrh	r3, [r7, #6]
 8008502:	2b00      	cmp	r3, #0
 8008504:	d101      	bne.n	800850a <HAL_UART_Transmit_DMA+0x26>
    {
      return HAL_ERROR;
 8008506:	2301      	movs	r3, #1
 8008508:	e05e      	b.n	80085c8 <HAL_UART_Transmit_DMA+0xe4>
    }

    huart->pTxBuffPtr  = pData;
 800850a:	68fb      	ldr	r3, [r7, #12]
 800850c:	68ba      	ldr	r2, [r7, #8]
 800850e:	64da      	str	r2, [r3, #76]	@ 0x4c
    huart->TxXferSize  = Size;
 8008510:	68fb      	ldr	r3, [r7, #12]
 8008512:	88fa      	ldrh	r2, [r7, #6]
 8008514:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8008518:	68fb      	ldr	r3, [r7, #12]
 800851a:	88fa      	ldrh	r2, [r7, #6]
 800851c:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008520:	68fb      	ldr	r3, [r7, #12]
 8008522:	2200      	movs	r2, #0
 8008524:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8008528:	68fb      	ldr	r3, [r7, #12]
 800852a:	2221      	movs	r2, #33	@ 0x21
 800852c:	67da      	str	r2, [r3, #124]	@ 0x7c

    if (huart->hdmatx != NULL)
 800852e:	68fb      	ldr	r3, [r7, #12]
 8008530:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008532:	2b00      	cmp	r3, #0
 8008534:	d027      	beq.n	8008586 <HAL_UART_Transmit_DMA+0xa2>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8008536:	68fb      	ldr	r3, [r7, #12]
 8008538:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800853a:	4a25      	ldr	r2, [pc, #148]	@ (80085d0 <HAL_UART_Transmit_DMA+0xec>)
 800853c:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800853e:	68fb      	ldr	r3, [r7, #12]
 8008540:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008542:	4a24      	ldr	r2, [pc, #144]	@ (80085d4 <HAL_UART_Transmit_DMA+0xf0>)
 8008544:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 8008546:	68fb      	ldr	r3, [r7, #12]
 8008548:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800854a:	4a23      	ldr	r2, [pc, #140]	@ (80085d8 <HAL_UART_Transmit_DMA+0xf4>)
 800854c:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 800854e:	68fb      	ldr	r3, [r7, #12]
 8008550:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008552:	2200      	movs	r2, #0
 8008554:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 8008556:	68fb      	ldr	r3, [r7, #12]
 8008558:	6f18      	ldr	r0, [r3, #112]	@ 0x70
 800855a:	68fb      	ldr	r3, [r7, #12]
 800855c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800855e:	4619      	mov	r1, r3
 8008560:	68fb      	ldr	r3, [r7, #12]
 8008562:	681b      	ldr	r3, [r3, #0]
 8008564:	3328      	adds	r3, #40	@ 0x28
 8008566:	461a      	mov	r2, r3
 8008568:	88fb      	ldrh	r3, [r7, #6]
 800856a:	f7fa feaf 	bl	80032cc <HAL_DMA_Start_IT>
 800856e:	4603      	mov	r3, r0
 8008570:	2b00      	cmp	r3, #0
 8008572:	d008      	beq.n	8008586 <HAL_UART_Transmit_DMA+0xa2>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8008574:	68fb      	ldr	r3, [r7, #12]
 8008576:	2210      	movs	r2, #16
 8008578:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 800857c:	68fb      	ldr	r3, [r7, #12]
 800857e:	2220      	movs	r2, #32
 8008580:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_ERROR;
 8008582:	2301      	movs	r3, #1
 8008584:	e020      	b.n	80085c8 <HAL_UART_Transmit_DMA+0xe4>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 8008586:	68fb      	ldr	r3, [r7, #12]
 8008588:	681b      	ldr	r3, [r3, #0]
 800858a:	2240      	movs	r2, #64	@ 0x40
 800858c:	621a      	str	r2, [r3, #32]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800858e:	68fb      	ldr	r3, [r7, #12]
 8008590:	681b      	ldr	r3, [r3, #0]
 8008592:	3308      	adds	r3, #8
 8008594:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008596:	697b      	ldr	r3, [r7, #20]
 8008598:	e853 3f00 	ldrex	r3, [r3]
 800859c:	613b      	str	r3, [r7, #16]
   return(result);
 800859e:	693b      	ldr	r3, [r7, #16]
 80085a0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80085a4:	627b      	str	r3, [r7, #36]	@ 0x24
 80085a6:	68fb      	ldr	r3, [r7, #12]
 80085a8:	681b      	ldr	r3, [r3, #0]
 80085aa:	3308      	adds	r3, #8
 80085ac:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80085ae:	623a      	str	r2, [r7, #32]
 80085b0:	61fb      	str	r3, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80085b2:	69f9      	ldr	r1, [r7, #28]
 80085b4:	6a3a      	ldr	r2, [r7, #32]
 80085b6:	e841 2300 	strex	r3, r2, [r1]
 80085ba:	61bb      	str	r3, [r7, #24]
   return(result);
 80085bc:	69bb      	ldr	r3, [r7, #24]
 80085be:	2b00      	cmp	r3, #0
 80085c0:	d1e5      	bne.n	800858e <HAL_UART_Transmit_DMA+0xaa>

    return HAL_OK;
 80085c2:	2300      	movs	r3, #0
 80085c4:	e000      	b.n	80085c8 <HAL_UART_Transmit_DMA+0xe4>
  }
  else
  {
    return HAL_BUSY;
 80085c6:	2302      	movs	r3, #2
  }
}
 80085c8:	4618      	mov	r0, r3
 80085ca:	3728      	adds	r7, #40	@ 0x28
 80085cc:	46bd      	mov	sp, r7
 80085ce:	bd80      	pop	{r7, pc}
 80085d0:	080097f9 	.word	0x080097f9
 80085d4:	08009893 	.word	0x08009893
 80085d8:	08009a19 	.word	0x08009a19

080085dc <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80085dc:	b580      	push	{r7, lr}
 80085de:	b08a      	sub	sp, #40	@ 0x28
 80085e0:	af00      	add	r7, sp, #0
 80085e2:	60f8      	str	r0, [r7, #12]
 80085e4:	60b9      	str	r1, [r7, #8]
 80085e6:	4613      	mov	r3, r2
 80085e8:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80085ea:	68fb      	ldr	r3, [r7, #12]
 80085ec:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80085f0:	2b20      	cmp	r3, #32
 80085f2:	d137      	bne.n	8008664 <HAL_UART_Receive_DMA+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 80085f4:	68bb      	ldr	r3, [r7, #8]
 80085f6:	2b00      	cmp	r3, #0
 80085f8:	d002      	beq.n	8008600 <HAL_UART_Receive_DMA+0x24>
 80085fa:	88fb      	ldrh	r3, [r7, #6]
 80085fc:	2b00      	cmp	r3, #0
 80085fe:	d101      	bne.n	8008604 <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 8008600:	2301      	movs	r3, #1
 8008602:	e030      	b.n	8008666 <HAL_UART_Receive_DMA+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008604:	68fb      	ldr	r3, [r7, #12]
 8008606:	2200      	movs	r2, #0
 8008608:	661a      	str	r2, [r3, #96]	@ 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800860a:	68fb      	ldr	r3, [r7, #12]
 800860c:	681b      	ldr	r3, [r3, #0]
 800860e:	4a18      	ldr	r2, [pc, #96]	@ (8008670 <HAL_UART_Receive_DMA+0x94>)
 8008610:	4293      	cmp	r3, r2
 8008612:	d01f      	beq.n	8008654 <HAL_UART_Receive_DMA+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8008614:	68fb      	ldr	r3, [r7, #12]
 8008616:	681b      	ldr	r3, [r3, #0]
 8008618:	685b      	ldr	r3, [r3, #4]
 800861a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800861e:	2b00      	cmp	r3, #0
 8008620:	d018      	beq.n	8008654 <HAL_UART_Receive_DMA+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8008622:	68fb      	ldr	r3, [r7, #12]
 8008624:	681b      	ldr	r3, [r3, #0]
 8008626:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008628:	697b      	ldr	r3, [r7, #20]
 800862a:	e853 3f00 	ldrex	r3, [r3]
 800862e:	613b      	str	r3, [r7, #16]
   return(result);
 8008630:	693b      	ldr	r3, [r7, #16]
 8008632:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8008636:	627b      	str	r3, [r7, #36]	@ 0x24
 8008638:	68fb      	ldr	r3, [r7, #12]
 800863a:	681b      	ldr	r3, [r3, #0]
 800863c:	461a      	mov	r2, r3
 800863e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008640:	623b      	str	r3, [r7, #32]
 8008642:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008644:	69f9      	ldr	r1, [r7, #28]
 8008646:	6a3a      	ldr	r2, [r7, #32]
 8008648:	e841 2300 	strex	r3, r2, [r1]
 800864c:	61bb      	str	r3, [r7, #24]
   return(result);
 800864e:	69bb      	ldr	r3, [r7, #24]
 8008650:	2b00      	cmp	r3, #0
 8008652:	d1e6      	bne.n	8008622 <HAL_UART_Receive_DMA+0x46>
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8008654:	88fb      	ldrh	r3, [r7, #6]
 8008656:	461a      	mov	r2, r3
 8008658:	68b9      	ldr	r1, [r7, #8]
 800865a:	68f8      	ldr	r0, [r7, #12]
 800865c:	f000 ffa2 	bl	80095a4 <UART_Start_Receive_DMA>
 8008660:	4603      	mov	r3, r0
 8008662:	e000      	b.n	8008666 <HAL_UART_Receive_DMA+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8008664:	2302      	movs	r3, #2
  }
}
 8008666:	4618      	mov	r0, r3
 8008668:	3728      	adds	r7, #40	@ 0x28
 800866a:	46bd      	mov	sp, r7
 800866c:	bd80      	pop	{r7, pc}
 800866e:	bf00      	nop
 8008670:	40008000 	.word	0x40008000

08008674 <HAL_UART_DMAStop>:
  * @brief Stop the DMA Transfer.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DMAStop(UART_HandleTypeDef *huart)
{
 8008674:	b580      	push	{r7, lr}
 8008676:	b090      	sub	sp, #64	@ 0x40
 8008678:	af00      	add	r7, sp, #0
 800867a:	6078      	str	r0, [r7, #4]
     HAL_UART_TxHalfCpltCallback / HAL_UART_RxHalfCpltCallback:
     indeed, when HAL_DMA_Abort() API is called, the DMA TX/RX Transfer or Half Transfer complete
     interrupt is generated if the DMA transfer interruption occurs at the middle or at the end of
     the stream and the corresponding call back is executed. */

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800867c:	687b      	ldr	r3, [r7, #4]
 800867e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8008680:	63fb      	str	r3, [r7, #60]	@ 0x3c
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8008682:	687b      	ldr	r3, [r7, #4]
 8008684:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008688:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800868a:	687b      	ldr	r3, [r7, #4]
 800868c:	681b      	ldr	r3, [r3, #0]
 800868e:	689b      	ldr	r3, [r3, #8]
 8008690:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008694:	2b80      	cmp	r3, #128	@ 0x80
 8008696:	d139      	bne.n	800870c <HAL_UART_DMAStop+0x98>
 8008698:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800869a:	2b21      	cmp	r3, #33	@ 0x21
 800869c:	d136      	bne.n	800870c <HAL_UART_DMAStop+0x98>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800869e:	687b      	ldr	r3, [r7, #4]
 80086a0:	681b      	ldr	r3, [r3, #0]
 80086a2:	3308      	adds	r3, #8
 80086a4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80086a6:	6a3b      	ldr	r3, [r7, #32]
 80086a8:	e853 3f00 	ldrex	r3, [r3]
 80086ac:	61fb      	str	r3, [r7, #28]
   return(result);
 80086ae:	69fb      	ldr	r3, [r7, #28]
 80086b0:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80086b4:	637b      	str	r3, [r7, #52]	@ 0x34
 80086b6:	687b      	ldr	r3, [r7, #4]
 80086b8:	681b      	ldr	r3, [r3, #0]
 80086ba:	3308      	adds	r3, #8
 80086bc:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80086be:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80086c0:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80086c2:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80086c4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80086c6:	e841 2300 	strex	r3, r2, [r1]
 80086ca:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80086cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80086ce:	2b00      	cmp	r3, #0
 80086d0:	d1e5      	bne.n	800869e <HAL_UART_DMAStop+0x2a>

    /* Abort the UART DMA Tx channel */
    if (huart->hdmatx != NULL)
 80086d2:	687b      	ldr	r3, [r7, #4]
 80086d4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80086d6:	2b00      	cmp	r3, #0
 80086d8:	d015      	beq.n	8008706 <HAL_UART_DMAStop+0x92>
    {
      if (HAL_DMA_Abort(huart->hdmatx) != HAL_OK)
 80086da:	687b      	ldr	r3, [r7, #4]
 80086dc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80086de:	4618      	mov	r0, r3
 80086e0:	f7fa fe54 	bl	800338c <HAL_DMA_Abort>
 80086e4:	4603      	mov	r3, r0
 80086e6:	2b00      	cmp	r3, #0
 80086e8:	d00d      	beq.n	8008706 <HAL_UART_DMAStop+0x92>
      {
        if (HAL_DMA_GetError(huart->hdmatx) == HAL_DMA_ERROR_TIMEOUT)
 80086ea:	687b      	ldr	r3, [r7, #4]
 80086ec:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80086ee:	4618      	mov	r0, r3
 80086f0:	f7fa ff88 	bl	8003604 <HAL_DMA_GetError>
 80086f4:	4603      	mov	r3, r0
 80086f6:	2b20      	cmp	r3, #32
 80086f8:	d105      	bne.n	8008706 <HAL_UART_DMAStop+0x92>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 80086fa:	687b      	ldr	r3, [r7, #4]
 80086fc:	2210      	movs	r2, #16
 80086fe:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8008702:	2303      	movs	r3, #3
 8008704:	e044      	b.n	8008790 <HAL_UART_DMAStop+0x11c>
        }
      }
    }

    UART_EndTxTransfer(huart);
 8008706:	6878      	ldr	r0, [r7, #4]
 8008708:	f000 ffec 	bl	80096e4 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800870c:	687b      	ldr	r3, [r7, #4]
 800870e:	681b      	ldr	r3, [r3, #0]
 8008710:	689b      	ldr	r3, [r3, #8]
 8008712:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008716:	2b40      	cmp	r3, #64	@ 0x40
 8008718:	d139      	bne.n	800878e <HAL_UART_DMAStop+0x11a>
 800871a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800871c:	2b22      	cmp	r3, #34	@ 0x22
 800871e:	d136      	bne.n	800878e <HAL_UART_DMAStop+0x11a>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008720:	687b      	ldr	r3, [r7, #4]
 8008722:	681b      	ldr	r3, [r3, #0]
 8008724:	3308      	adds	r3, #8
 8008726:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008728:	68fb      	ldr	r3, [r7, #12]
 800872a:	e853 3f00 	ldrex	r3, [r3]
 800872e:	60bb      	str	r3, [r7, #8]
   return(result);
 8008730:	68bb      	ldr	r3, [r7, #8]
 8008732:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008736:	633b      	str	r3, [r7, #48]	@ 0x30
 8008738:	687b      	ldr	r3, [r7, #4]
 800873a:	681b      	ldr	r3, [r3, #0]
 800873c:	3308      	adds	r3, #8
 800873e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008740:	61ba      	str	r2, [r7, #24]
 8008742:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008744:	6979      	ldr	r1, [r7, #20]
 8008746:	69ba      	ldr	r2, [r7, #24]
 8008748:	e841 2300 	strex	r3, r2, [r1]
 800874c:	613b      	str	r3, [r7, #16]
   return(result);
 800874e:	693b      	ldr	r3, [r7, #16]
 8008750:	2b00      	cmp	r3, #0
 8008752:	d1e5      	bne.n	8008720 <HAL_UART_DMAStop+0xac>

    /* Abort the UART DMA Rx channel */
    if (huart->hdmarx != NULL)
 8008754:	687b      	ldr	r3, [r7, #4]
 8008756:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008758:	2b00      	cmp	r3, #0
 800875a:	d015      	beq.n	8008788 <HAL_UART_DMAStop+0x114>
    {
      if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 800875c:	687b      	ldr	r3, [r7, #4]
 800875e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008760:	4618      	mov	r0, r3
 8008762:	f7fa fe13 	bl	800338c <HAL_DMA_Abort>
 8008766:	4603      	mov	r3, r0
 8008768:	2b00      	cmp	r3, #0
 800876a:	d00d      	beq.n	8008788 <HAL_UART_DMAStop+0x114>
      {
        if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 800876c:	687b      	ldr	r3, [r7, #4]
 800876e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008770:	4618      	mov	r0, r3
 8008772:	f7fa ff47 	bl	8003604 <HAL_DMA_GetError>
 8008776:	4603      	mov	r3, r0
 8008778:	2b20      	cmp	r3, #32
 800877a:	d105      	bne.n	8008788 <HAL_UART_DMAStop+0x114>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 800877c:	687b      	ldr	r3, [r7, #4]
 800877e:	2210      	movs	r2, #16
 8008780:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8008784:	2303      	movs	r3, #3
 8008786:	e003      	b.n	8008790 <HAL_UART_DMAStop+0x11c>
        }
      }
    }

    UART_EndRxTransfer(huart);
 8008788:	6878      	ldr	r0, [r7, #4]
 800878a:	f000 ffd1 	bl	8009730 <UART_EndRxTransfer>
  }

  return HAL_OK;
 800878e:	2300      	movs	r3, #0
}
 8008790:	4618      	mov	r0, r3
 8008792:	3740      	adds	r7, #64	@ 0x40
 8008794:	46bd      	mov	sp, r7
 8008796:	bd80      	pop	{r7, pc}

08008798 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8008798:	b580      	push	{r7, lr}
 800879a:	b0ba      	sub	sp, #232	@ 0xe8
 800879c:	af00      	add	r7, sp, #0
 800879e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80087a0:	687b      	ldr	r3, [r7, #4]
 80087a2:	681b      	ldr	r3, [r3, #0]
 80087a4:	69db      	ldr	r3, [r3, #28]
 80087a6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80087aa:	687b      	ldr	r3, [r7, #4]
 80087ac:	681b      	ldr	r3, [r3, #0]
 80087ae:	681b      	ldr	r3, [r3, #0]
 80087b0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80087b4:	687b      	ldr	r3, [r7, #4]
 80087b6:	681b      	ldr	r3, [r3, #0]
 80087b8:	689b      	ldr	r3, [r3, #8]
 80087ba:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80087be:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 80087c2:	f640 030f 	movw	r3, #2063	@ 0x80f
 80087c6:	4013      	ands	r3, r2
 80087c8:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 80087cc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80087d0:	2b00      	cmp	r3, #0
 80087d2:	d115      	bne.n	8008800 <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 80087d4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80087d8:	f003 0320 	and.w	r3, r3, #32
 80087dc:	2b00      	cmp	r3, #0
 80087de:	d00f      	beq.n	8008800 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80087e0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80087e4:	f003 0320 	and.w	r3, r3, #32
 80087e8:	2b00      	cmp	r3, #0
 80087ea:	d009      	beq.n	8008800 <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 80087ec:	687b      	ldr	r3, [r7, #4]
 80087ee:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80087f0:	2b00      	cmp	r3, #0
 80087f2:	f000 82ae 	beq.w	8008d52 <HAL_UART_IRQHandler+0x5ba>
      {
        huart->RxISR(huart);
 80087f6:	687b      	ldr	r3, [r7, #4]
 80087f8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80087fa:	6878      	ldr	r0, [r7, #4]
 80087fc:	4798      	blx	r3
      }
      return;
 80087fe:	e2a8      	b.n	8008d52 <HAL_UART_IRQHandler+0x5ba>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 8008800:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8008804:	2b00      	cmp	r3, #0
 8008806:	f000 8117 	beq.w	8008a38 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800880a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800880e:	f003 0301 	and.w	r3, r3, #1
 8008812:	2b00      	cmp	r3, #0
 8008814:	d106      	bne.n	8008824 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8008816:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 800881a:	4b85      	ldr	r3, [pc, #532]	@ (8008a30 <HAL_UART_IRQHandler+0x298>)
 800881c:	4013      	ands	r3, r2
 800881e:	2b00      	cmp	r3, #0
 8008820:	f000 810a 	beq.w	8008a38 <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8008824:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008828:	f003 0301 	and.w	r3, r3, #1
 800882c:	2b00      	cmp	r3, #0
 800882e:	d011      	beq.n	8008854 <HAL_UART_IRQHandler+0xbc>
 8008830:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008834:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008838:	2b00      	cmp	r3, #0
 800883a:	d00b      	beq.n	8008854 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800883c:	687b      	ldr	r3, [r7, #4]
 800883e:	681b      	ldr	r3, [r3, #0]
 8008840:	2201      	movs	r2, #1
 8008842:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8008844:	687b      	ldr	r3, [r7, #4]
 8008846:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800884a:	f043 0201 	orr.w	r2, r3, #1
 800884e:	687b      	ldr	r3, [r7, #4]
 8008850:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008854:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008858:	f003 0302 	and.w	r3, r3, #2
 800885c:	2b00      	cmp	r3, #0
 800885e:	d011      	beq.n	8008884 <HAL_UART_IRQHandler+0xec>
 8008860:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008864:	f003 0301 	and.w	r3, r3, #1
 8008868:	2b00      	cmp	r3, #0
 800886a:	d00b      	beq.n	8008884 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800886c:	687b      	ldr	r3, [r7, #4]
 800886e:	681b      	ldr	r3, [r3, #0]
 8008870:	2202      	movs	r2, #2
 8008872:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8008874:	687b      	ldr	r3, [r7, #4]
 8008876:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800887a:	f043 0204 	orr.w	r2, r3, #4
 800887e:	687b      	ldr	r3, [r7, #4]
 8008880:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008884:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008888:	f003 0304 	and.w	r3, r3, #4
 800888c:	2b00      	cmp	r3, #0
 800888e:	d011      	beq.n	80088b4 <HAL_UART_IRQHandler+0x11c>
 8008890:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008894:	f003 0301 	and.w	r3, r3, #1
 8008898:	2b00      	cmp	r3, #0
 800889a:	d00b      	beq.n	80088b4 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800889c:	687b      	ldr	r3, [r7, #4]
 800889e:	681b      	ldr	r3, [r3, #0]
 80088a0:	2204      	movs	r2, #4
 80088a2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80088a4:	687b      	ldr	r3, [r7, #4]
 80088a6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80088aa:	f043 0202 	orr.w	r2, r3, #2
 80088ae:	687b      	ldr	r3, [r7, #4]
 80088b0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 80088b4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80088b8:	f003 0308 	and.w	r3, r3, #8
 80088bc:	2b00      	cmp	r3, #0
 80088be:	d017      	beq.n	80088f0 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80088c0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80088c4:	f003 0320 	and.w	r3, r3, #32
 80088c8:	2b00      	cmp	r3, #0
 80088ca:	d105      	bne.n	80088d8 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 80088cc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80088d0:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80088d4:	2b00      	cmp	r3, #0
 80088d6:	d00b      	beq.n	80088f0 <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80088d8:	687b      	ldr	r3, [r7, #4]
 80088da:	681b      	ldr	r3, [r3, #0]
 80088dc:	2208      	movs	r2, #8
 80088de:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80088e0:	687b      	ldr	r3, [r7, #4]
 80088e2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80088e6:	f043 0208 	orr.w	r2, r3, #8
 80088ea:	687b      	ldr	r3, [r7, #4]
 80088ec:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80088f0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80088f4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80088f8:	2b00      	cmp	r3, #0
 80088fa:	d012      	beq.n	8008922 <HAL_UART_IRQHandler+0x18a>
 80088fc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008900:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8008904:	2b00      	cmp	r3, #0
 8008906:	d00c      	beq.n	8008922 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008908:	687b      	ldr	r3, [r7, #4]
 800890a:	681b      	ldr	r3, [r3, #0]
 800890c:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8008910:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8008912:	687b      	ldr	r3, [r7, #4]
 8008914:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008918:	f043 0220 	orr.w	r2, r3, #32
 800891c:	687b      	ldr	r3, [r7, #4]
 800891e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8008922:	687b      	ldr	r3, [r7, #4]
 8008924:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008928:	2b00      	cmp	r3, #0
 800892a:	f000 8214 	beq.w	8008d56 <HAL_UART_IRQHandler+0x5be>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800892e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008932:	f003 0320 	and.w	r3, r3, #32
 8008936:	2b00      	cmp	r3, #0
 8008938:	d00d      	beq.n	8008956 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800893a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800893e:	f003 0320 	and.w	r3, r3, #32
 8008942:	2b00      	cmp	r3, #0
 8008944:	d007      	beq.n	8008956 <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 8008946:	687b      	ldr	r3, [r7, #4]
 8008948:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800894a:	2b00      	cmp	r3, #0
 800894c:	d003      	beq.n	8008956 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 800894e:	687b      	ldr	r3, [r7, #4]
 8008950:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8008952:	6878      	ldr	r0, [r7, #4]
 8008954:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8008956:	687b      	ldr	r3, [r7, #4]
 8008958:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800895c:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8008960:	687b      	ldr	r3, [r7, #4]
 8008962:	681b      	ldr	r3, [r3, #0]
 8008964:	689b      	ldr	r3, [r3, #8]
 8008966:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800896a:	2b40      	cmp	r3, #64	@ 0x40
 800896c:	d005      	beq.n	800897a <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800896e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8008972:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8008976:	2b00      	cmp	r3, #0
 8008978:	d04f      	beq.n	8008a1a <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800897a:	6878      	ldr	r0, [r7, #4]
 800897c:	f000 fed8 	bl	8009730 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008980:	687b      	ldr	r3, [r7, #4]
 8008982:	681b      	ldr	r3, [r3, #0]
 8008984:	689b      	ldr	r3, [r3, #8]
 8008986:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800898a:	2b40      	cmp	r3, #64	@ 0x40
 800898c:	d141      	bne.n	8008a12 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800898e:	687b      	ldr	r3, [r7, #4]
 8008990:	681b      	ldr	r3, [r3, #0]
 8008992:	3308      	adds	r3, #8
 8008994:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008998:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800899c:	e853 3f00 	ldrex	r3, [r3]
 80089a0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80089a4:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80089a8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80089ac:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80089b0:	687b      	ldr	r3, [r7, #4]
 80089b2:	681b      	ldr	r3, [r3, #0]
 80089b4:	3308      	adds	r3, #8
 80089b6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80089ba:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80089be:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80089c2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80089c6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80089ca:	e841 2300 	strex	r3, r2, [r1]
 80089ce:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80089d2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80089d6:	2b00      	cmp	r3, #0
 80089d8:	d1d9      	bne.n	800898e <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80089da:	687b      	ldr	r3, [r7, #4]
 80089dc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80089de:	2b00      	cmp	r3, #0
 80089e0:	d013      	beq.n	8008a0a <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80089e2:	687b      	ldr	r3, [r7, #4]
 80089e4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80089e6:	4a13      	ldr	r2, [pc, #76]	@ (8008a34 <HAL_UART_IRQHandler+0x29c>)
 80089e8:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80089ea:	687b      	ldr	r3, [r7, #4]
 80089ec:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80089ee:	4618      	mov	r0, r3
 80089f0:	f7fa fd0a 	bl	8003408 <HAL_DMA_Abort_IT>
 80089f4:	4603      	mov	r3, r0
 80089f6:	2b00      	cmp	r3, #0
 80089f8:	d017      	beq.n	8008a2a <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80089fa:	687b      	ldr	r3, [r7, #4]
 80089fc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80089fe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008a00:	687a      	ldr	r2, [r7, #4]
 8008a02:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8008a04:	4610      	mov	r0, r2
 8008a06:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008a08:	e00f      	b.n	8008a2a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8008a0a:	6878      	ldr	r0, [r7, #4]
 8008a0c:	f000 f9d6 	bl	8008dbc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008a10:	e00b      	b.n	8008a2a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8008a12:	6878      	ldr	r0, [r7, #4]
 8008a14:	f000 f9d2 	bl	8008dbc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008a18:	e007      	b.n	8008a2a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8008a1a:	6878      	ldr	r0, [r7, #4]
 8008a1c:	f000 f9ce 	bl	8008dbc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008a20:	687b      	ldr	r3, [r7, #4]
 8008a22:	2200      	movs	r2, #0
 8008a24:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      }
    }
    return;
 8008a28:	e195      	b.n	8008d56 <HAL_UART_IRQHandler+0x5be>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008a2a:	bf00      	nop
    return;
 8008a2c:	e193      	b.n	8008d56 <HAL_UART_IRQHandler+0x5be>
 8008a2e:	bf00      	nop
 8008a30:	04000120 	.word	0x04000120
 8008a34:	08009a97 	.word	0x08009a97

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008a38:	687b      	ldr	r3, [r7, #4]
 8008a3a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008a3c:	2b01      	cmp	r3, #1
 8008a3e:	f040 814e 	bne.w	8008cde <HAL_UART_IRQHandler+0x546>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8008a42:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008a46:	f003 0310 	and.w	r3, r3, #16
 8008a4a:	2b00      	cmp	r3, #0
 8008a4c:	f000 8147 	beq.w	8008cde <HAL_UART_IRQHandler+0x546>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8008a50:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008a54:	f003 0310 	and.w	r3, r3, #16
 8008a58:	2b00      	cmp	r3, #0
 8008a5a:	f000 8140 	beq.w	8008cde <HAL_UART_IRQHandler+0x546>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8008a5e:	687b      	ldr	r3, [r7, #4]
 8008a60:	681b      	ldr	r3, [r3, #0]
 8008a62:	2210      	movs	r2, #16
 8008a64:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008a66:	687b      	ldr	r3, [r7, #4]
 8008a68:	681b      	ldr	r3, [r3, #0]
 8008a6a:	689b      	ldr	r3, [r3, #8]
 8008a6c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008a70:	2b40      	cmp	r3, #64	@ 0x40
 8008a72:	f040 80b8 	bne.w	8008be6 <HAL_UART_IRQHandler+0x44e>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8008a76:	687b      	ldr	r3, [r7, #4]
 8008a78:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008a7a:	681b      	ldr	r3, [r3, #0]
 8008a7c:	685b      	ldr	r3, [r3, #4]
 8008a7e:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8008a82:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8008a86:	2b00      	cmp	r3, #0
 8008a88:	f000 8167 	beq.w	8008d5a <HAL_UART_IRQHandler+0x5c2>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8008a8c:	687b      	ldr	r3, [r7, #4]
 8008a8e:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8008a92:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8008a96:	429a      	cmp	r2, r3
 8008a98:	f080 815f 	bcs.w	8008d5a <HAL_UART_IRQHandler+0x5c2>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8008a9c:	687b      	ldr	r3, [r7, #4]
 8008a9e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8008aa2:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8008aa6:	687b      	ldr	r3, [r7, #4]
 8008aa8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008aaa:	681b      	ldr	r3, [r3, #0]
 8008aac:	681b      	ldr	r3, [r3, #0]
 8008aae:	f003 0320 	and.w	r3, r3, #32
 8008ab2:	2b00      	cmp	r3, #0
 8008ab4:	f040 8086 	bne.w	8008bc4 <HAL_UART_IRQHandler+0x42c>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008ab8:	687b      	ldr	r3, [r7, #4]
 8008aba:	681b      	ldr	r3, [r3, #0]
 8008abc:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ac0:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8008ac4:	e853 3f00 	ldrex	r3, [r3]
 8008ac8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8008acc:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8008ad0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008ad4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8008ad8:	687b      	ldr	r3, [r7, #4]
 8008ada:	681b      	ldr	r3, [r3, #0]
 8008adc:	461a      	mov	r2, r3
 8008ade:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8008ae2:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8008ae6:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008aea:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8008aee:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8008af2:	e841 2300 	strex	r3, r2, [r1]
 8008af6:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8008afa:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8008afe:	2b00      	cmp	r3, #0
 8008b00:	d1da      	bne.n	8008ab8 <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008b02:	687b      	ldr	r3, [r7, #4]
 8008b04:	681b      	ldr	r3, [r3, #0]
 8008b06:	3308      	adds	r3, #8
 8008b08:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b0a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8008b0c:	e853 3f00 	ldrex	r3, [r3]
 8008b10:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8008b12:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8008b14:	f023 0301 	bic.w	r3, r3, #1
 8008b18:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8008b1c:	687b      	ldr	r3, [r7, #4]
 8008b1e:	681b      	ldr	r3, [r3, #0]
 8008b20:	3308      	adds	r3, #8
 8008b22:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8008b26:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8008b2a:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b2c:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8008b2e:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8008b32:	e841 2300 	strex	r3, r2, [r1]
 8008b36:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8008b38:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8008b3a:	2b00      	cmp	r3, #0
 8008b3c:	d1e1      	bne.n	8008b02 <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008b3e:	687b      	ldr	r3, [r7, #4]
 8008b40:	681b      	ldr	r3, [r3, #0]
 8008b42:	3308      	adds	r3, #8
 8008b44:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b46:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8008b48:	e853 3f00 	ldrex	r3, [r3]
 8008b4c:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8008b4e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8008b50:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008b54:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8008b58:	687b      	ldr	r3, [r7, #4]
 8008b5a:	681b      	ldr	r3, [r3, #0]
 8008b5c:	3308      	adds	r3, #8
 8008b5e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8008b62:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8008b64:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b66:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8008b68:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8008b6a:	e841 2300 	strex	r3, r2, [r1]
 8008b6e:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8008b70:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8008b72:	2b00      	cmp	r3, #0
 8008b74:	d1e3      	bne.n	8008b3e <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8008b76:	687b      	ldr	r3, [r7, #4]
 8008b78:	2220      	movs	r2, #32
 8008b7a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008b7e:	687b      	ldr	r3, [r7, #4]
 8008b80:	2200      	movs	r2, #0
 8008b82:	661a      	str	r2, [r3, #96]	@ 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008b84:	687b      	ldr	r3, [r7, #4]
 8008b86:	681b      	ldr	r3, [r3, #0]
 8008b88:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b8a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008b8c:	e853 3f00 	ldrex	r3, [r3]
 8008b90:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8008b92:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008b94:	f023 0310 	bic.w	r3, r3, #16
 8008b98:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8008b9c:	687b      	ldr	r3, [r7, #4]
 8008b9e:	681b      	ldr	r3, [r3, #0]
 8008ba0:	461a      	mov	r2, r3
 8008ba2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008ba6:	65bb      	str	r3, [r7, #88]	@ 0x58
 8008ba8:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008baa:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8008bac:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8008bae:	e841 2300 	strex	r3, r2, [r1]
 8008bb2:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8008bb4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008bb6:	2b00      	cmp	r3, #0
 8008bb8:	d1e4      	bne.n	8008b84 <HAL_UART_IRQHandler+0x3ec>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8008bba:	687b      	ldr	r3, [r7, #4]
 8008bbc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008bbe:	4618      	mov	r0, r3
 8008bc0:	f7fa fbe4 	bl	800338c <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8008bc4:	687b      	ldr	r3, [r7, #4]
 8008bc6:	2202      	movs	r2, #2
 8008bc8:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8008bca:	687b      	ldr	r3, [r7, #4]
 8008bcc:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8008bd0:	687b      	ldr	r3, [r7, #4]
 8008bd2:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8008bd6:	b29b      	uxth	r3, r3
 8008bd8:	1ad3      	subs	r3, r2, r3
 8008bda:	b29b      	uxth	r3, r3
 8008bdc:	4619      	mov	r1, r3
 8008bde:	6878      	ldr	r0, [r7, #4]
 8008be0:	f000 f8f6 	bl	8008dd0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8008be4:	e0b9      	b.n	8008d5a <HAL_UART_IRQHandler+0x5c2>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8008be6:	687b      	ldr	r3, [r7, #4]
 8008be8:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8008bec:	687b      	ldr	r3, [r7, #4]
 8008bee:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8008bf2:	b29b      	uxth	r3, r3
 8008bf4:	1ad3      	subs	r3, r2, r3
 8008bf6:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8008bfa:	687b      	ldr	r3, [r7, #4]
 8008bfc:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8008c00:	b29b      	uxth	r3, r3
 8008c02:	2b00      	cmp	r3, #0
 8008c04:	f000 80ab 	beq.w	8008d5e <HAL_UART_IRQHandler+0x5c6>
          && (nb_rx_data > 0U))
 8008c08:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8008c0c:	2b00      	cmp	r3, #0
 8008c0e:	f000 80a6 	beq.w	8008d5e <HAL_UART_IRQHandler+0x5c6>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008c12:	687b      	ldr	r3, [r7, #4]
 8008c14:	681b      	ldr	r3, [r3, #0]
 8008c16:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008c18:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008c1a:	e853 3f00 	ldrex	r3, [r3]
 8008c1e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8008c20:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008c22:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008c26:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8008c2a:	687b      	ldr	r3, [r7, #4]
 8008c2c:	681b      	ldr	r3, [r3, #0]
 8008c2e:	461a      	mov	r2, r3
 8008c30:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8008c34:	647b      	str	r3, [r7, #68]	@ 0x44
 8008c36:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008c38:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8008c3a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008c3c:	e841 2300 	strex	r3, r2, [r1]
 8008c40:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8008c42:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008c44:	2b00      	cmp	r3, #0
 8008c46:	d1e4      	bne.n	8008c12 <HAL_UART_IRQHandler+0x47a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008c48:	687b      	ldr	r3, [r7, #4]
 8008c4a:	681b      	ldr	r3, [r3, #0]
 8008c4c:	3308      	adds	r3, #8
 8008c4e:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008c50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008c52:	e853 3f00 	ldrex	r3, [r3]
 8008c56:	623b      	str	r3, [r7, #32]
   return(result);
 8008c58:	6a3b      	ldr	r3, [r7, #32]
 8008c5a:	f023 0301 	bic.w	r3, r3, #1
 8008c5e:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8008c62:	687b      	ldr	r3, [r7, #4]
 8008c64:	681b      	ldr	r3, [r3, #0]
 8008c66:	3308      	adds	r3, #8
 8008c68:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8008c6c:	633a      	str	r2, [r7, #48]	@ 0x30
 8008c6e:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008c70:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008c72:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008c74:	e841 2300 	strex	r3, r2, [r1]
 8008c78:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8008c7a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008c7c:	2b00      	cmp	r3, #0
 8008c7e:	d1e3      	bne.n	8008c48 <HAL_UART_IRQHandler+0x4b0>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8008c80:	687b      	ldr	r3, [r7, #4]
 8008c82:	2220      	movs	r2, #32
 8008c84:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008c88:	687b      	ldr	r3, [r7, #4]
 8008c8a:	2200      	movs	r2, #0
 8008c8c:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8008c8e:	687b      	ldr	r3, [r7, #4]
 8008c90:	2200      	movs	r2, #0
 8008c92:	669a      	str	r2, [r3, #104]	@ 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008c94:	687b      	ldr	r3, [r7, #4]
 8008c96:	681b      	ldr	r3, [r3, #0]
 8008c98:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008c9a:	693b      	ldr	r3, [r7, #16]
 8008c9c:	e853 3f00 	ldrex	r3, [r3]
 8008ca0:	60fb      	str	r3, [r7, #12]
   return(result);
 8008ca2:	68fb      	ldr	r3, [r7, #12]
 8008ca4:	f023 0310 	bic.w	r3, r3, #16
 8008ca8:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8008cac:	687b      	ldr	r3, [r7, #4]
 8008cae:	681b      	ldr	r3, [r3, #0]
 8008cb0:	461a      	mov	r2, r3
 8008cb2:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8008cb6:	61fb      	str	r3, [r7, #28]
 8008cb8:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008cba:	69b9      	ldr	r1, [r7, #24]
 8008cbc:	69fa      	ldr	r2, [r7, #28]
 8008cbe:	e841 2300 	strex	r3, r2, [r1]
 8008cc2:	617b      	str	r3, [r7, #20]
   return(result);
 8008cc4:	697b      	ldr	r3, [r7, #20]
 8008cc6:	2b00      	cmp	r3, #0
 8008cc8:	d1e4      	bne.n	8008c94 <HAL_UART_IRQHandler+0x4fc>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8008cca:	687b      	ldr	r3, [r7, #4]
 8008ccc:	2202      	movs	r2, #2
 8008cce:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8008cd0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8008cd4:	4619      	mov	r1, r3
 8008cd6:	6878      	ldr	r0, [r7, #4]
 8008cd8:	f000 f87a 	bl	8008dd0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8008cdc:	e03f      	b.n	8008d5e <HAL_UART_IRQHandler+0x5c6>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8008cde:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008ce2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8008ce6:	2b00      	cmp	r3, #0
 8008ce8:	d00e      	beq.n	8008d08 <HAL_UART_IRQHandler+0x570>
 8008cea:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008cee:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8008cf2:	2b00      	cmp	r3, #0
 8008cf4:	d008      	beq.n	8008d08 <HAL_UART_IRQHandler+0x570>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8008cf6:	687b      	ldr	r3, [r7, #4]
 8008cf8:	681b      	ldr	r3, [r3, #0]
 8008cfa:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8008cfe:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8008d00:	6878      	ldr	r0, [r7, #4]
 8008d02:	f000 ff08 	bl	8009b16 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8008d06:	e02d      	b.n	8008d64 <HAL_UART_IRQHandler+0x5cc>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 8008d08:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008d0c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008d10:	2b00      	cmp	r3, #0
 8008d12:	d00e      	beq.n	8008d32 <HAL_UART_IRQHandler+0x59a>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8008d14:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008d18:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008d1c:	2b00      	cmp	r3, #0
 8008d1e:	d008      	beq.n	8008d32 <HAL_UART_IRQHandler+0x59a>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 8008d20:	687b      	ldr	r3, [r7, #4]
 8008d22:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008d24:	2b00      	cmp	r3, #0
 8008d26:	d01c      	beq.n	8008d62 <HAL_UART_IRQHandler+0x5ca>
    {
      huart->TxISR(huart);
 8008d28:	687b      	ldr	r3, [r7, #4]
 8008d2a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008d2c:	6878      	ldr	r0, [r7, #4]
 8008d2e:	4798      	blx	r3
    }
    return;
 8008d30:	e017      	b.n	8008d62 <HAL_UART_IRQHandler+0x5ca>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8008d32:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008d36:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008d3a:	2b00      	cmp	r3, #0
 8008d3c:	d012      	beq.n	8008d64 <HAL_UART_IRQHandler+0x5cc>
 8008d3e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008d42:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008d46:	2b00      	cmp	r3, #0
 8008d48:	d00c      	beq.n	8008d64 <HAL_UART_IRQHandler+0x5cc>
  {
    UART_EndTransmit_IT(huart);
 8008d4a:	6878      	ldr	r0, [r7, #4]
 8008d4c:	f000 feb9 	bl	8009ac2 <UART_EndTransmit_IT>
    return;
 8008d50:	e008      	b.n	8008d64 <HAL_UART_IRQHandler+0x5cc>
      return;
 8008d52:	bf00      	nop
 8008d54:	e006      	b.n	8008d64 <HAL_UART_IRQHandler+0x5cc>
    return;
 8008d56:	bf00      	nop
 8008d58:	e004      	b.n	8008d64 <HAL_UART_IRQHandler+0x5cc>
      return;
 8008d5a:	bf00      	nop
 8008d5c:	e002      	b.n	8008d64 <HAL_UART_IRQHandler+0x5cc>
      return;
 8008d5e:	bf00      	nop
 8008d60:	e000      	b.n	8008d64 <HAL_UART_IRQHandler+0x5cc>
    return;
 8008d62:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 8008d64:	37e8      	adds	r7, #232	@ 0xe8
 8008d66:	46bd      	mov	sp, r7
 8008d68:	bd80      	pop	{r7, pc}
 8008d6a:	bf00      	nop

08008d6c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8008d6c:	b480      	push	{r7}
 8008d6e:	b083      	sub	sp, #12
 8008d70:	af00      	add	r7, sp, #0
 8008d72:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8008d74:	bf00      	nop
 8008d76:	370c      	adds	r7, #12
 8008d78:	46bd      	mov	sp, r7
 8008d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d7e:	4770      	bx	lr

08008d80 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8008d80:	b480      	push	{r7}
 8008d82:	b083      	sub	sp, #12
 8008d84:	af00      	add	r7, sp, #0
 8008d86:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 8008d88:	bf00      	nop
 8008d8a:	370c      	adds	r7, #12
 8008d8c:	46bd      	mov	sp, r7
 8008d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d92:	4770      	bx	lr

08008d94 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8008d94:	b480      	push	{r7}
 8008d96:	b083      	sub	sp, #12
 8008d98:	af00      	add	r7, sp, #0
 8008d9a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 8008d9c:	bf00      	nop
 8008d9e:	370c      	adds	r7, #12
 8008da0:	46bd      	mov	sp, r7
 8008da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008da6:	4770      	bx	lr

08008da8 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8008da8:	b480      	push	{r7}
 8008daa:	b083      	sub	sp, #12
 8008dac:	af00      	add	r7, sp, #0
 8008dae:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8008db0:	bf00      	nop
 8008db2:	370c      	adds	r7, #12
 8008db4:	46bd      	mov	sp, r7
 8008db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dba:	4770      	bx	lr

08008dbc <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8008dbc:	b480      	push	{r7}
 8008dbe:	b083      	sub	sp, #12
 8008dc0:	af00      	add	r7, sp, #0
 8008dc2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8008dc4:	bf00      	nop
 8008dc6:	370c      	adds	r7, #12
 8008dc8:	46bd      	mov	sp, r7
 8008dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dce:	4770      	bx	lr

08008dd0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8008dd0:	b480      	push	{r7}
 8008dd2:	b083      	sub	sp, #12
 8008dd4:	af00      	add	r7, sp, #0
 8008dd6:	6078      	str	r0, [r7, #4]
 8008dd8:	460b      	mov	r3, r1
 8008dda:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8008ddc:	bf00      	nop
 8008dde:	370c      	adds	r7, #12
 8008de0:	46bd      	mov	sp, r7
 8008de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008de6:	4770      	bx	lr

08008de8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008de8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008dec:	b08a      	sub	sp, #40	@ 0x28
 8008dee:	af00      	add	r7, sp, #0
 8008df0:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8008df2:	2300      	movs	r3, #0
 8008df4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8008df8:	68fb      	ldr	r3, [r7, #12]
 8008dfa:	689a      	ldr	r2, [r3, #8]
 8008dfc:	68fb      	ldr	r3, [r7, #12]
 8008dfe:	691b      	ldr	r3, [r3, #16]
 8008e00:	431a      	orrs	r2, r3
 8008e02:	68fb      	ldr	r3, [r7, #12]
 8008e04:	695b      	ldr	r3, [r3, #20]
 8008e06:	431a      	orrs	r2, r3
 8008e08:	68fb      	ldr	r3, [r7, #12]
 8008e0a:	69db      	ldr	r3, [r3, #28]
 8008e0c:	4313      	orrs	r3, r2
 8008e0e:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8008e10:	68fb      	ldr	r3, [r7, #12]
 8008e12:	681b      	ldr	r3, [r3, #0]
 8008e14:	681a      	ldr	r2, [r3, #0]
 8008e16:	4bb4      	ldr	r3, [pc, #720]	@ (80090e8 <UART_SetConfig+0x300>)
 8008e18:	4013      	ands	r3, r2
 8008e1a:	68fa      	ldr	r2, [r7, #12]
 8008e1c:	6812      	ldr	r2, [r2, #0]
 8008e1e:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8008e20:	430b      	orrs	r3, r1
 8008e22:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008e24:	68fb      	ldr	r3, [r7, #12]
 8008e26:	681b      	ldr	r3, [r3, #0]
 8008e28:	685b      	ldr	r3, [r3, #4]
 8008e2a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8008e2e:	68fb      	ldr	r3, [r7, #12]
 8008e30:	68da      	ldr	r2, [r3, #12]
 8008e32:	68fb      	ldr	r3, [r7, #12]
 8008e34:	681b      	ldr	r3, [r3, #0]
 8008e36:	430a      	orrs	r2, r1
 8008e38:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8008e3a:	68fb      	ldr	r3, [r7, #12]
 8008e3c:	699b      	ldr	r3, [r3, #24]
 8008e3e:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8008e40:	68fb      	ldr	r3, [r7, #12]
 8008e42:	681b      	ldr	r3, [r3, #0]
 8008e44:	4aa9      	ldr	r2, [pc, #676]	@ (80090ec <UART_SetConfig+0x304>)
 8008e46:	4293      	cmp	r3, r2
 8008e48:	d004      	beq.n	8008e54 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8008e4a:	68fb      	ldr	r3, [r7, #12]
 8008e4c:	6a1b      	ldr	r3, [r3, #32]
 8008e4e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008e50:	4313      	orrs	r3, r2
 8008e52:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8008e54:	68fb      	ldr	r3, [r7, #12]
 8008e56:	681b      	ldr	r3, [r3, #0]
 8008e58:	689b      	ldr	r3, [r3, #8]
 8008e5a:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8008e5e:	68fb      	ldr	r3, [r7, #12]
 8008e60:	681b      	ldr	r3, [r3, #0]
 8008e62:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008e64:	430a      	orrs	r2, r1
 8008e66:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8008e68:	68fb      	ldr	r3, [r7, #12]
 8008e6a:	681b      	ldr	r3, [r3, #0]
 8008e6c:	4aa0      	ldr	r2, [pc, #640]	@ (80090f0 <UART_SetConfig+0x308>)
 8008e6e:	4293      	cmp	r3, r2
 8008e70:	d126      	bne.n	8008ec0 <UART_SetConfig+0xd8>
 8008e72:	4ba0      	ldr	r3, [pc, #640]	@ (80090f4 <UART_SetConfig+0x30c>)
 8008e74:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008e78:	f003 0303 	and.w	r3, r3, #3
 8008e7c:	2b03      	cmp	r3, #3
 8008e7e:	d81b      	bhi.n	8008eb8 <UART_SetConfig+0xd0>
 8008e80:	a201      	add	r2, pc, #4	@ (adr r2, 8008e88 <UART_SetConfig+0xa0>)
 8008e82:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008e86:	bf00      	nop
 8008e88:	08008e99 	.word	0x08008e99
 8008e8c:	08008ea9 	.word	0x08008ea9
 8008e90:	08008ea1 	.word	0x08008ea1
 8008e94:	08008eb1 	.word	0x08008eb1
 8008e98:	2301      	movs	r3, #1
 8008e9a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8008e9e:	e080      	b.n	8008fa2 <UART_SetConfig+0x1ba>
 8008ea0:	2302      	movs	r3, #2
 8008ea2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8008ea6:	e07c      	b.n	8008fa2 <UART_SetConfig+0x1ba>
 8008ea8:	2304      	movs	r3, #4
 8008eaa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8008eae:	e078      	b.n	8008fa2 <UART_SetConfig+0x1ba>
 8008eb0:	2308      	movs	r3, #8
 8008eb2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8008eb6:	e074      	b.n	8008fa2 <UART_SetConfig+0x1ba>
 8008eb8:	2310      	movs	r3, #16
 8008eba:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8008ebe:	e070      	b.n	8008fa2 <UART_SetConfig+0x1ba>
 8008ec0:	68fb      	ldr	r3, [r7, #12]
 8008ec2:	681b      	ldr	r3, [r3, #0]
 8008ec4:	4a8c      	ldr	r2, [pc, #560]	@ (80090f8 <UART_SetConfig+0x310>)
 8008ec6:	4293      	cmp	r3, r2
 8008ec8:	d138      	bne.n	8008f3c <UART_SetConfig+0x154>
 8008eca:	4b8a      	ldr	r3, [pc, #552]	@ (80090f4 <UART_SetConfig+0x30c>)
 8008ecc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008ed0:	f003 030c 	and.w	r3, r3, #12
 8008ed4:	2b0c      	cmp	r3, #12
 8008ed6:	d82d      	bhi.n	8008f34 <UART_SetConfig+0x14c>
 8008ed8:	a201      	add	r2, pc, #4	@ (adr r2, 8008ee0 <UART_SetConfig+0xf8>)
 8008eda:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008ede:	bf00      	nop
 8008ee0:	08008f15 	.word	0x08008f15
 8008ee4:	08008f35 	.word	0x08008f35
 8008ee8:	08008f35 	.word	0x08008f35
 8008eec:	08008f35 	.word	0x08008f35
 8008ef0:	08008f25 	.word	0x08008f25
 8008ef4:	08008f35 	.word	0x08008f35
 8008ef8:	08008f35 	.word	0x08008f35
 8008efc:	08008f35 	.word	0x08008f35
 8008f00:	08008f1d 	.word	0x08008f1d
 8008f04:	08008f35 	.word	0x08008f35
 8008f08:	08008f35 	.word	0x08008f35
 8008f0c:	08008f35 	.word	0x08008f35
 8008f10:	08008f2d 	.word	0x08008f2d
 8008f14:	2300      	movs	r3, #0
 8008f16:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8008f1a:	e042      	b.n	8008fa2 <UART_SetConfig+0x1ba>
 8008f1c:	2302      	movs	r3, #2
 8008f1e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8008f22:	e03e      	b.n	8008fa2 <UART_SetConfig+0x1ba>
 8008f24:	2304      	movs	r3, #4
 8008f26:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8008f2a:	e03a      	b.n	8008fa2 <UART_SetConfig+0x1ba>
 8008f2c:	2308      	movs	r3, #8
 8008f2e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8008f32:	e036      	b.n	8008fa2 <UART_SetConfig+0x1ba>
 8008f34:	2310      	movs	r3, #16
 8008f36:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8008f3a:	e032      	b.n	8008fa2 <UART_SetConfig+0x1ba>
 8008f3c:	68fb      	ldr	r3, [r7, #12]
 8008f3e:	681b      	ldr	r3, [r3, #0]
 8008f40:	4a6a      	ldr	r2, [pc, #424]	@ (80090ec <UART_SetConfig+0x304>)
 8008f42:	4293      	cmp	r3, r2
 8008f44:	d12a      	bne.n	8008f9c <UART_SetConfig+0x1b4>
 8008f46:	4b6b      	ldr	r3, [pc, #428]	@ (80090f4 <UART_SetConfig+0x30c>)
 8008f48:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008f4c:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8008f50:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8008f54:	d01a      	beq.n	8008f8c <UART_SetConfig+0x1a4>
 8008f56:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8008f5a:	d81b      	bhi.n	8008f94 <UART_SetConfig+0x1ac>
 8008f5c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008f60:	d00c      	beq.n	8008f7c <UART_SetConfig+0x194>
 8008f62:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008f66:	d815      	bhi.n	8008f94 <UART_SetConfig+0x1ac>
 8008f68:	2b00      	cmp	r3, #0
 8008f6a:	d003      	beq.n	8008f74 <UART_SetConfig+0x18c>
 8008f6c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008f70:	d008      	beq.n	8008f84 <UART_SetConfig+0x19c>
 8008f72:	e00f      	b.n	8008f94 <UART_SetConfig+0x1ac>
 8008f74:	2300      	movs	r3, #0
 8008f76:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8008f7a:	e012      	b.n	8008fa2 <UART_SetConfig+0x1ba>
 8008f7c:	2302      	movs	r3, #2
 8008f7e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8008f82:	e00e      	b.n	8008fa2 <UART_SetConfig+0x1ba>
 8008f84:	2304      	movs	r3, #4
 8008f86:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8008f8a:	e00a      	b.n	8008fa2 <UART_SetConfig+0x1ba>
 8008f8c:	2308      	movs	r3, #8
 8008f8e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8008f92:	e006      	b.n	8008fa2 <UART_SetConfig+0x1ba>
 8008f94:	2310      	movs	r3, #16
 8008f96:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8008f9a:	e002      	b.n	8008fa2 <UART_SetConfig+0x1ba>
 8008f9c:	2310      	movs	r3, #16
 8008f9e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8008fa2:	68fb      	ldr	r3, [r7, #12]
 8008fa4:	681b      	ldr	r3, [r3, #0]
 8008fa6:	4a51      	ldr	r2, [pc, #324]	@ (80090ec <UART_SetConfig+0x304>)
 8008fa8:	4293      	cmp	r3, r2
 8008faa:	d17a      	bne.n	80090a2 <UART_SetConfig+0x2ba>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8008fac:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8008fb0:	2b08      	cmp	r3, #8
 8008fb2:	d824      	bhi.n	8008ffe <UART_SetConfig+0x216>
 8008fb4:	a201      	add	r2, pc, #4	@ (adr r2, 8008fbc <UART_SetConfig+0x1d4>)
 8008fb6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008fba:	bf00      	nop
 8008fbc:	08008fe1 	.word	0x08008fe1
 8008fc0:	08008fff 	.word	0x08008fff
 8008fc4:	08008fe9 	.word	0x08008fe9
 8008fc8:	08008fff 	.word	0x08008fff
 8008fcc:	08008fef 	.word	0x08008fef
 8008fd0:	08008fff 	.word	0x08008fff
 8008fd4:	08008fff 	.word	0x08008fff
 8008fd8:	08008fff 	.word	0x08008fff
 8008fdc:	08008ff7 	.word	0x08008ff7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008fe0:	f7fd fc0a 	bl	80067f8 <HAL_RCC_GetPCLK1Freq>
 8008fe4:	61f8      	str	r0, [r7, #28]
        break;
 8008fe6:	e010      	b.n	800900a <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008fe8:	4b44      	ldr	r3, [pc, #272]	@ (80090fc <UART_SetConfig+0x314>)
 8008fea:	61fb      	str	r3, [r7, #28]
        break;
 8008fec:	e00d      	b.n	800900a <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008fee:	f7fd fb6b 	bl	80066c8 <HAL_RCC_GetSysClockFreq>
 8008ff2:	61f8      	str	r0, [r7, #28]
        break;
 8008ff4:	e009      	b.n	800900a <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008ff6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008ffa:	61fb      	str	r3, [r7, #28]
        break;
 8008ffc:	e005      	b.n	800900a <UART_SetConfig+0x222>
      default:
        pclk = 0U;
 8008ffe:	2300      	movs	r3, #0
 8009000:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8009002:	2301      	movs	r3, #1
 8009004:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8009008:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800900a:	69fb      	ldr	r3, [r7, #28]
 800900c:	2b00      	cmp	r3, #0
 800900e:	f000 8107 	beq.w	8009220 <UART_SetConfig+0x438>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8009012:	68fb      	ldr	r3, [r7, #12]
 8009014:	685a      	ldr	r2, [r3, #4]
 8009016:	4613      	mov	r3, r2
 8009018:	005b      	lsls	r3, r3, #1
 800901a:	4413      	add	r3, r2
 800901c:	69fa      	ldr	r2, [r7, #28]
 800901e:	429a      	cmp	r2, r3
 8009020:	d305      	bcc.n	800902e <UART_SetConfig+0x246>
          (pclk > (4096U * huart->Init.BaudRate)))
 8009022:	68fb      	ldr	r3, [r7, #12]
 8009024:	685b      	ldr	r3, [r3, #4]
 8009026:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8009028:	69fa      	ldr	r2, [r7, #28]
 800902a:	429a      	cmp	r2, r3
 800902c:	d903      	bls.n	8009036 <UART_SetConfig+0x24e>
      {
        ret = HAL_ERROR;
 800902e:	2301      	movs	r3, #1
 8009030:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8009034:	e0f4      	b.n	8009220 <UART_SetConfig+0x438>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8009036:	69fb      	ldr	r3, [r7, #28]
 8009038:	2200      	movs	r2, #0
 800903a:	461c      	mov	r4, r3
 800903c:	4615      	mov	r5, r2
 800903e:	f04f 0200 	mov.w	r2, #0
 8009042:	f04f 0300 	mov.w	r3, #0
 8009046:	022b      	lsls	r3, r5, #8
 8009048:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 800904c:	0222      	lsls	r2, r4, #8
 800904e:	68f9      	ldr	r1, [r7, #12]
 8009050:	6849      	ldr	r1, [r1, #4]
 8009052:	0849      	lsrs	r1, r1, #1
 8009054:	2000      	movs	r0, #0
 8009056:	4688      	mov	r8, r1
 8009058:	4681      	mov	r9, r0
 800905a:	eb12 0a08 	adds.w	sl, r2, r8
 800905e:	eb43 0b09 	adc.w	fp, r3, r9
 8009062:	68fb      	ldr	r3, [r7, #12]
 8009064:	685b      	ldr	r3, [r3, #4]
 8009066:	2200      	movs	r2, #0
 8009068:	603b      	str	r3, [r7, #0]
 800906a:	607a      	str	r2, [r7, #4]
 800906c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009070:	4650      	mov	r0, sl
 8009072:	4659      	mov	r1, fp
 8009074:	f7f7 fe2a 	bl	8000ccc <__aeabi_uldivmod>
 8009078:	4602      	mov	r2, r0
 800907a:	460b      	mov	r3, r1
 800907c:	4613      	mov	r3, r2
 800907e:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8009080:	69bb      	ldr	r3, [r7, #24]
 8009082:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8009086:	d308      	bcc.n	800909a <UART_SetConfig+0x2b2>
 8009088:	69bb      	ldr	r3, [r7, #24]
 800908a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800908e:	d204      	bcs.n	800909a <UART_SetConfig+0x2b2>
        {
          huart->Instance->BRR = usartdiv;
 8009090:	68fb      	ldr	r3, [r7, #12]
 8009092:	681b      	ldr	r3, [r3, #0]
 8009094:	69ba      	ldr	r2, [r7, #24]
 8009096:	60da      	str	r2, [r3, #12]
 8009098:	e0c2      	b.n	8009220 <UART_SetConfig+0x438>
        }
        else
        {
          ret = HAL_ERROR;
 800909a:	2301      	movs	r3, #1
 800909c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 80090a0:	e0be      	b.n	8009220 <UART_SetConfig+0x438>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80090a2:	68fb      	ldr	r3, [r7, #12]
 80090a4:	69db      	ldr	r3, [r3, #28]
 80090a6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80090aa:	d16a      	bne.n	8009182 <UART_SetConfig+0x39a>
  {
    switch (clocksource)
 80090ac:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80090b0:	2b08      	cmp	r3, #8
 80090b2:	d834      	bhi.n	800911e <UART_SetConfig+0x336>
 80090b4:	a201      	add	r2, pc, #4	@ (adr r2, 80090bc <UART_SetConfig+0x2d4>)
 80090b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80090ba:	bf00      	nop
 80090bc:	080090e1 	.word	0x080090e1
 80090c0:	08009101 	.word	0x08009101
 80090c4:	08009109 	.word	0x08009109
 80090c8:	0800911f 	.word	0x0800911f
 80090cc:	0800910f 	.word	0x0800910f
 80090d0:	0800911f 	.word	0x0800911f
 80090d4:	0800911f 	.word	0x0800911f
 80090d8:	0800911f 	.word	0x0800911f
 80090dc:	08009117 	.word	0x08009117
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80090e0:	f7fd fb8a 	bl	80067f8 <HAL_RCC_GetPCLK1Freq>
 80090e4:	61f8      	str	r0, [r7, #28]
        break;
 80090e6:	e020      	b.n	800912a <UART_SetConfig+0x342>
 80090e8:	efff69f3 	.word	0xefff69f3
 80090ec:	40008000 	.word	0x40008000
 80090f0:	40013800 	.word	0x40013800
 80090f4:	40021000 	.word	0x40021000
 80090f8:	40004400 	.word	0x40004400
 80090fc:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009100:	f7fd fb90 	bl	8006824 <HAL_RCC_GetPCLK2Freq>
 8009104:	61f8      	str	r0, [r7, #28]
        break;
 8009106:	e010      	b.n	800912a <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8009108:	4b4c      	ldr	r3, [pc, #304]	@ (800923c <UART_SetConfig+0x454>)
 800910a:	61fb      	str	r3, [r7, #28]
        break;
 800910c:	e00d      	b.n	800912a <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800910e:	f7fd fadb 	bl	80066c8 <HAL_RCC_GetSysClockFreq>
 8009112:	61f8      	str	r0, [r7, #28]
        break;
 8009114:	e009      	b.n	800912a <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009116:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800911a:	61fb      	str	r3, [r7, #28]
        break;
 800911c:	e005      	b.n	800912a <UART_SetConfig+0x342>
      default:
        pclk = 0U;
 800911e:	2300      	movs	r3, #0
 8009120:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8009122:	2301      	movs	r3, #1
 8009124:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8009128:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800912a:	69fb      	ldr	r3, [r7, #28]
 800912c:	2b00      	cmp	r3, #0
 800912e:	d077      	beq.n	8009220 <UART_SetConfig+0x438>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8009130:	69fb      	ldr	r3, [r7, #28]
 8009132:	005a      	lsls	r2, r3, #1
 8009134:	68fb      	ldr	r3, [r7, #12]
 8009136:	685b      	ldr	r3, [r3, #4]
 8009138:	085b      	lsrs	r3, r3, #1
 800913a:	441a      	add	r2, r3
 800913c:	68fb      	ldr	r3, [r7, #12]
 800913e:	685b      	ldr	r3, [r3, #4]
 8009140:	fbb2 f3f3 	udiv	r3, r2, r3
 8009144:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009146:	69bb      	ldr	r3, [r7, #24]
 8009148:	2b0f      	cmp	r3, #15
 800914a:	d916      	bls.n	800917a <UART_SetConfig+0x392>
 800914c:	69bb      	ldr	r3, [r7, #24]
 800914e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009152:	d212      	bcs.n	800917a <UART_SetConfig+0x392>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8009154:	69bb      	ldr	r3, [r7, #24]
 8009156:	b29b      	uxth	r3, r3
 8009158:	f023 030f 	bic.w	r3, r3, #15
 800915c:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800915e:	69bb      	ldr	r3, [r7, #24]
 8009160:	085b      	lsrs	r3, r3, #1
 8009162:	b29b      	uxth	r3, r3
 8009164:	f003 0307 	and.w	r3, r3, #7
 8009168:	b29a      	uxth	r2, r3
 800916a:	8afb      	ldrh	r3, [r7, #22]
 800916c:	4313      	orrs	r3, r2
 800916e:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8009170:	68fb      	ldr	r3, [r7, #12]
 8009172:	681b      	ldr	r3, [r3, #0]
 8009174:	8afa      	ldrh	r2, [r7, #22]
 8009176:	60da      	str	r2, [r3, #12]
 8009178:	e052      	b.n	8009220 <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 800917a:	2301      	movs	r3, #1
 800917c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8009180:	e04e      	b.n	8009220 <UART_SetConfig+0x438>
      }
    }
  }
  else
  {
    switch (clocksource)
 8009182:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8009186:	2b08      	cmp	r3, #8
 8009188:	d827      	bhi.n	80091da <UART_SetConfig+0x3f2>
 800918a:	a201      	add	r2, pc, #4	@ (adr r2, 8009190 <UART_SetConfig+0x3a8>)
 800918c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009190:	080091b5 	.word	0x080091b5
 8009194:	080091bd 	.word	0x080091bd
 8009198:	080091c5 	.word	0x080091c5
 800919c:	080091db 	.word	0x080091db
 80091a0:	080091cb 	.word	0x080091cb
 80091a4:	080091db 	.word	0x080091db
 80091a8:	080091db 	.word	0x080091db
 80091ac:	080091db 	.word	0x080091db
 80091b0:	080091d3 	.word	0x080091d3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80091b4:	f7fd fb20 	bl	80067f8 <HAL_RCC_GetPCLK1Freq>
 80091b8:	61f8      	str	r0, [r7, #28]
        break;
 80091ba:	e014      	b.n	80091e6 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80091bc:	f7fd fb32 	bl	8006824 <HAL_RCC_GetPCLK2Freq>
 80091c0:	61f8      	str	r0, [r7, #28]
        break;
 80091c2:	e010      	b.n	80091e6 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80091c4:	4b1d      	ldr	r3, [pc, #116]	@ (800923c <UART_SetConfig+0x454>)
 80091c6:	61fb      	str	r3, [r7, #28]
        break;
 80091c8:	e00d      	b.n	80091e6 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80091ca:	f7fd fa7d 	bl	80066c8 <HAL_RCC_GetSysClockFreq>
 80091ce:	61f8      	str	r0, [r7, #28]
        break;
 80091d0:	e009      	b.n	80091e6 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80091d2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80091d6:	61fb      	str	r3, [r7, #28]
        break;
 80091d8:	e005      	b.n	80091e6 <UART_SetConfig+0x3fe>
      default:
        pclk = 0U;
 80091da:	2300      	movs	r3, #0
 80091dc:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80091de:	2301      	movs	r3, #1
 80091e0:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 80091e4:	bf00      	nop
    }

    if (pclk != 0U)
 80091e6:	69fb      	ldr	r3, [r7, #28]
 80091e8:	2b00      	cmp	r3, #0
 80091ea:	d019      	beq.n	8009220 <UART_SetConfig+0x438>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80091ec:	68fb      	ldr	r3, [r7, #12]
 80091ee:	685b      	ldr	r3, [r3, #4]
 80091f0:	085a      	lsrs	r2, r3, #1
 80091f2:	69fb      	ldr	r3, [r7, #28]
 80091f4:	441a      	add	r2, r3
 80091f6:	68fb      	ldr	r3, [r7, #12]
 80091f8:	685b      	ldr	r3, [r3, #4]
 80091fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80091fe:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009200:	69bb      	ldr	r3, [r7, #24]
 8009202:	2b0f      	cmp	r3, #15
 8009204:	d909      	bls.n	800921a <UART_SetConfig+0x432>
 8009206:	69bb      	ldr	r3, [r7, #24]
 8009208:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800920c:	d205      	bcs.n	800921a <UART_SetConfig+0x432>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800920e:	69bb      	ldr	r3, [r7, #24]
 8009210:	b29a      	uxth	r2, r3
 8009212:	68fb      	ldr	r3, [r7, #12]
 8009214:	681b      	ldr	r3, [r3, #0]
 8009216:	60da      	str	r2, [r3, #12]
 8009218:	e002      	b.n	8009220 <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 800921a:	2301      	movs	r3, #1
 800921c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8009220:	68fb      	ldr	r3, [r7, #12]
 8009222:	2200      	movs	r2, #0
 8009224:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8009226:	68fb      	ldr	r3, [r7, #12]
 8009228:	2200      	movs	r2, #0
 800922a:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 800922c:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 8009230:	4618      	mov	r0, r3
 8009232:	3728      	adds	r7, #40	@ 0x28
 8009234:	46bd      	mov	sp, r7
 8009236:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800923a:	bf00      	nop
 800923c:	00f42400 	.word	0x00f42400

08009240 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8009240:	b480      	push	{r7}
 8009242:	b083      	sub	sp, #12
 8009244:	af00      	add	r7, sp, #0
 8009246:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8009248:	687b      	ldr	r3, [r7, #4]
 800924a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800924c:	f003 0308 	and.w	r3, r3, #8
 8009250:	2b00      	cmp	r3, #0
 8009252:	d00a      	beq.n	800926a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8009254:	687b      	ldr	r3, [r7, #4]
 8009256:	681b      	ldr	r3, [r3, #0]
 8009258:	685b      	ldr	r3, [r3, #4]
 800925a:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800925e:	687b      	ldr	r3, [r7, #4]
 8009260:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8009262:	687b      	ldr	r3, [r7, #4]
 8009264:	681b      	ldr	r3, [r3, #0]
 8009266:	430a      	orrs	r2, r1
 8009268:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800926a:	687b      	ldr	r3, [r7, #4]
 800926c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800926e:	f003 0301 	and.w	r3, r3, #1
 8009272:	2b00      	cmp	r3, #0
 8009274:	d00a      	beq.n	800928c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8009276:	687b      	ldr	r3, [r7, #4]
 8009278:	681b      	ldr	r3, [r3, #0]
 800927a:	685b      	ldr	r3, [r3, #4]
 800927c:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8009280:	687b      	ldr	r3, [r7, #4]
 8009282:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8009284:	687b      	ldr	r3, [r7, #4]
 8009286:	681b      	ldr	r3, [r3, #0]
 8009288:	430a      	orrs	r2, r1
 800928a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800928c:	687b      	ldr	r3, [r7, #4]
 800928e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009290:	f003 0302 	and.w	r3, r3, #2
 8009294:	2b00      	cmp	r3, #0
 8009296:	d00a      	beq.n	80092ae <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8009298:	687b      	ldr	r3, [r7, #4]
 800929a:	681b      	ldr	r3, [r3, #0]
 800929c:	685b      	ldr	r3, [r3, #4]
 800929e:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80092a2:	687b      	ldr	r3, [r7, #4]
 80092a4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80092a6:	687b      	ldr	r3, [r7, #4]
 80092a8:	681b      	ldr	r3, [r3, #0]
 80092aa:	430a      	orrs	r2, r1
 80092ac:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80092ae:	687b      	ldr	r3, [r7, #4]
 80092b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80092b2:	f003 0304 	and.w	r3, r3, #4
 80092b6:	2b00      	cmp	r3, #0
 80092b8:	d00a      	beq.n	80092d0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80092ba:	687b      	ldr	r3, [r7, #4]
 80092bc:	681b      	ldr	r3, [r3, #0]
 80092be:	685b      	ldr	r3, [r3, #4]
 80092c0:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80092c4:	687b      	ldr	r3, [r7, #4]
 80092c6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80092c8:	687b      	ldr	r3, [r7, #4]
 80092ca:	681b      	ldr	r3, [r3, #0]
 80092cc:	430a      	orrs	r2, r1
 80092ce:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80092d0:	687b      	ldr	r3, [r7, #4]
 80092d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80092d4:	f003 0310 	and.w	r3, r3, #16
 80092d8:	2b00      	cmp	r3, #0
 80092da:	d00a      	beq.n	80092f2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80092dc:	687b      	ldr	r3, [r7, #4]
 80092de:	681b      	ldr	r3, [r3, #0]
 80092e0:	689b      	ldr	r3, [r3, #8]
 80092e2:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80092e6:	687b      	ldr	r3, [r7, #4]
 80092e8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80092ea:	687b      	ldr	r3, [r7, #4]
 80092ec:	681b      	ldr	r3, [r3, #0]
 80092ee:	430a      	orrs	r2, r1
 80092f0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80092f2:	687b      	ldr	r3, [r7, #4]
 80092f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80092f6:	f003 0320 	and.w	r3, r3, #32
 80092fa:	2b00      	cmp	r3, #0
 80092fc:	d00a      	beq.n	8009314 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80092fe:	687b      	ldr	r3, [r7, #4]
 8009300:	681b      	ldr	r3, [r3, #0]
 8009302:	689b      	ldr	r3, [r3, #8]
 8009304:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8009308:	687b      	ldr	r3, [r7, #4]
 800930a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800930c:	687b      	ldr	r3, [r7, #4]
 800930e:	681b      	ldr	r3, [r3, #0]
 8009310:	430a      	orrs	r2, r1
 8009312:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8009314:	687b      	ldr	r3, [r7, #4]
 8009316:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009318:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800931c:	2b00      	cmp	r3, #0
 800931e:	d01a      	beq.n	8009356 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8009320:	687b      	ldr	r3, [r7, #4]
 8009322:	681b      	ldr	r3, [r3, #0]
 8009324:	685b      	ldr	r3, [r3, #4]
 8009326:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800932a:	687b      	ldr	r3, [r7, #4]
 800932c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800932e:	687b      	ldr	r3, [r7, #4]
 8009330:	681b      	ldr	r3, [r3, #0]
 8009332:	430a      	orrs	r2, r1
 8009334:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8009336:	687b      	ldr	r3, [r7, #4]
 8009338:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800933a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800933e:	d10a      	bne.n	8009356 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8009340:	687b      	ldr	r3, [r7, #4]
 8009342:	681b      	ldr	r3, [r3, #0]
 8009344:	685b      	ldr	r3, [r3, #4]
 8009346:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800934a:	687b      	ldr	r3, [r7, #4]
 800934c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800934e:	687b      	ldr	r3, [r7, #4]
 8009350:	681b      	ldr	r3, [r3, #0]
 8009352:	430a      	orrs	r2, r1
 8009354:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8009356:	687b      	ldr	r3, [r7, #4]
 8009358:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800935a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800935e:	2b00      	cmp	r3, #0
 8009360:	d00a      	beq.n	8009378 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8009362:	687b      	ldr	r3, [r7, #4]
 8009364:	681b      	ldr	r3, [r3, #0]
 8009366:	685b      	ldr	r3, [r3, #4]
 8009368:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800936c:	687b      	ldr	r3, [r7, #4]
 800936e:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8009370:	687b      	ldr	r3, [r7, #4]
 8009372:	681b      	ldr	r3, [r3, #0]
 8009374:	430a      	orrs	r2, r1
 8009376:	605a      	str	r2, [r3, #4]
  }
}
 8009378:	bf00      	nop
 800937a:	370c      	adds	r7, #12
 800937c:	46bd      	mov	sp, r7
 800937e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009382:	4770      	bx	lr

08009384 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8009384:	b580      	push	{r7, lr}
 8009386:	b098      	sub	sp, #96	@ 0x60
 8009388:	af02      	add	r7, sp, #8
 800938a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800938c:	687b      	ldr	r3, [r7, #4]
 800938e:	2200      	movs	r2, #0
 8009390:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8009394:	f7f9 fdd0 	bl	8002f38 <HAL_GetTick>
 8009398:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800939a:	687b      	ldr	r3, [r7, #4]
 800939c:	681b      	ldr	r3, [r3, #0]
 800939e:	681b      	ldr	r3, [r3, #0]
 80093a0:	f003 0308 	and.w	r3, r3, #8
 80093a4:	2b08      	cmp	r3, #8
 80093a6:	d12e      	bne.n	8009406 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80093a8:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80093ac:	9300      	str	r3, [sp, #0]
 80093ae:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80093b0:	2200      	movs	r2, #0
 80093b2:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80093b6:	6878      	ldr	r0, [r7, #4]
 80093b8:	f000 f88c 	bl	80094d4 <UART_WaitOnFlagUntilTimeout>
 80093bc:	4603      	mov	r3, r0
 80093be:	2b00      	cmp	r3, #0
 80093c0:	d021      	beq.n	8009406 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 80093c2:	687b      	ldr	r3, [r7, #4]
 80093c4:	681b      	ldr	r3, [r3, #0]
 80093c6:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80093c8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80093ca:	e853 3f00 	ldrex	r3, [r3]
 80093ce:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80093d0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80093d2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80093d6:	653b      	str	r3, [r7, #80]	@ 0x50
 80093d8:	687b      	ldr	r3, [r7, #4]
 80093da:	681b      	ldr	r3, [r3, #0]
 80093dc:	461a      	mov	r2, r3
 80093de:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80093e0:	647b      	str	r3, [r7, #68]	@ 0x44
 80093e2:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80093e4:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80093e6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80093e8:	e841 2300 	strex	r3, r2, [r1]
 80093ec:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80093ee:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80093f0:	2b00      	cmp	r3, #0
 80093f2:	d1e6      	bne.n	80093c2 <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 80093f4:	687b      	ldr	r3, [r7, #4]
 80093f6:	2220      	movs	r2, #32
 80093f8:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 80093fa:	687b      	ldr	r3, [r7, #4]
 80093fc:	2200      	movs	r2, #0
 80093fe:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009402:	2303      	movs	r3, #3
 8009404:	e062      	b.n	80094cc <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8009406:	687b      	ldr	r3, [r7, #4]
 8009408:	681b      	ldr	r3, [r3, #0]
 800940a:	681b      	ldr	r3, [r3, #0]
 800940c:	f003 0304 	and.w	r3, r3, #4
 8009410:	2b04      	cmp	r3, #4
 8009412:	d149      	bne.n	80094a8 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009414:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8009418:	9300      	str	r3, [sp, #0]
 800941a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800941c:	2200      	movs	r2, #0
 800941e:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8009422:	6878      	ldr	r0, [r7, #4]
 8009424:	f000 f856 	bl	80094d4 <UART_WaitOnFlagUntilTimeout>
 8009428:	4603      	mov	r3, r0
 800942a:	2b00      	cmp	r3, #0
 800942c:	d03c      	beq.n	80094a8 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800942e:	687b      	ldr	r3, [r7, #4]
 8009430:	681b      	ldr	r3, [r3, #0]
 8009432:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009434:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009436:	e853 3f00 	ldrex	r3, [r3]
 800943a:	623b      	str	r3, [r7, #32]
   return(result);
 800943c:	6a3b      	ldr	r3, [r7, #32]
 800943e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8009442:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8009444:	687b      	ldr	r3, [r7, #4]
 8009446:	681b      	ldr	r3, [r3, #0]
 8009448:	461a      	mov	r2, r3
 800944a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800944c:	633b      	str	r3, [r7, #48]	@ 0x30
 800944e:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009450:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8009452:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009454:	e841 2300 	strex	r3, r2, [r1]
 8009458:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800945a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800945c:	2b00      	cmp	r3, #0
 800945e:	d1e6      	bne.n	800942e <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009460:	687b      	ldr	r3, [r7, #4]
 8009462:	681b      	ldr	r3, [r3, #0]
 8009464:	3308      	adds	r3, #8
 8009466:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009468:	693b      	ldr	r3, [r7, #16]
 800946a:	e853 3f00 	ldrex	r3, [r3]
 800946e:	60fb      	str	r3, [r7, #12]
   return(result);
 8009470:	68fb      	ldr	r3, [r7, #12]
 8009472:	f023 0301 	bic.w	r3, r3, #1
 8009476:	64bb      	str	r3, [r7, #72]	@ 0x48
 8009478:	687b      	ldr	r3, [r7, #4]
 800947a:	681b      	ldr	r3, [r3, #0]
 800947c:	3308      	adds	r3, #8
 800947e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8009480:	61fa      	str	r2, [r7, #28]
 8009482:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009484:	69b9      	ldr	r1, [r7, #24]
 8009486:	69fa      	ldr	r2, [r7, #28]
 8009488:	e841 2300 	strex	r3, r2, [r1]
 800948c:	617b      	str	r3, [r7, #20]
   return(result);
 800948e:	697b      	ldr	r3, [r7, #20]
 8009490:	2b00      	cmp	r3, #0
 8009492:	d1e5      	bne.n	8009460 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8009494:	687b      	ldr	r3, [r7, #4]
 8009496:	2220      	movs	r2, #32
 8009498:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 800949c:	687b      	ldr	r3, [r7, #4]
 800949e:	2200      	movs	r2, #0
 80094a0:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80094a4:	2303      	movs	r3, #3
 80094a6:	e011      	b.n	80094cc <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80094a8:	687b      	ldr	r3, [r7, #4]
 80094aa:	2220      	movs	r2, #32
 80094ac:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80094ae:	687b      	ldr	r3, [r7, #4]
 80094b0:	2220      	movs	r2, #32
 80094b2:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80094b6:	687b      	ldr	r3, [r7, #4]
 80094b8:	2200      	movs	r2, #0
 80094ba:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80094bc:	687b      	ldr	r3, [r7, #4]
 80094be:	2200      	movs	r2, #0
 80094c0:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 80094c2:	687b      	ldr	r3, [r7, #4]
 80094c4:	2200      	movs	r2, #0
 80094c6:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 80094ca:	2300      	movs	r3, #0
}
 80094cc:	4618      	mov	r0, r3
 80094ce:	3758      	adds	r7, #88	@ 0x58
 80094d0:	46bd      	mov	sp, r7
 80094d2:	bd80      	pop	{r7, pc}

080094d4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80094d4:	b580      	push	{r7, lr}
 80094d6:	b084      	sub	sp, #16
 80094d8:	af00      	add	r7, sp, #0
 80094da:	60f8      	str	r0, [r7, #12]
 80094dc:	60b9      	str	r1, [r7, #8]
 80094de:	603b      	str	r3, [r7, #0]
 80094e0:	4613      	mov	r3, r2
 80094e2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80094e4:	e049      	b.n	800957a <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80094e6:	69bb      	ldr	r3, [r7, #24]
 80094e8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80094ec:	d045      	beq.n	800957a <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80094ee:	f7f9 fd23 	bl	8002f38 <HAL_GetTick>
 80094f2:	4602      	mov	r2, r0
 80094f4:	683b      	ldr	r3, [r7, #0]
 80094f6:	1ad3      	subs	r3, r2, r3
 80094f8:	69ba      	ldr	r2, [r7, #24]
 80094fa:	429a      	cmp	r2, r3
 80094fc:	d302      	bcc.n	8009504 <UART_WaitOnFlagUntilTimeout+0x30>
 80094fe:	69bb      	ldr	r3, [r7, #24]
 8009500:	2b00      	cmp	r3, #0
 8009502:	d101      	bne.n	8009508 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8009504:	2303      	movs	r3, #3
 8009506:	e048      	b.n	800959a <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8009508:	68fb      	ldr	r3, [r7, #12]
 800950a:	681b      	ldr	r3, [r3, #0]
 800950c:	681b      	ldr	r3, [r3, #0]
 800950e:	f003 0304 	and.w	r3, r3, #4
 8009512:	2b00      	cmp	r3, #0
 8009514:	d031      	beq.n	800957a <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8009516:	68fb      	ldr	r3, [r7, #12]
 8009518:	681b      	ldr	r3, [r3, #0]
 800951a:	69db      	ldr	r3, [r3, #28]
 800951c:	f003 0308 	and.w	r3, r3, #8
 8009520:	2b08      	cmp	r3, #8
 8009522:	d110      	bne.n	8009546 <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8009524:	68fb      	ldr	r3, [r7, #12]
 8009526:	681b      	ldr	r3, [r3, #0]
 8009528:	2208      	movs	r2, #8
 800952a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800952c:	68f8      	ldr	r0, [r7, #12]
 800952e:	f000 f8ff 	bl	8009730 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8009532:	68fb      	ldr	r3, [r7, #12]
 8009534:	2208      	movs	r2, #8
 8009536:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800953a:	68fb      	ldr	r3, [r7, #12]
 800953c:	2200      	movs	r2, #0
 800953e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8009542:	2301      	movs	r3, #1
 8009544:	e029      	b.n	800959a <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8009546:	68fb      	ldr	r3, [r7, #12]
 8009548:	681b      	ldr	r3, [r3, #0]
 800954a:	69db      	ldr	r3, [r3, #28]
 800954c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8009550:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8009554:	d111      	bne.n	800957a <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8009556:	68fb      	ldr	r3, [r7, #12]
 8009558:	681b      	ldr	r3, [r3, #0]
 800955a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800955e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8009560:	68f8      	ldr	r0, [r7, #12]
 8009562:	f000 f8e5 	bl	8009730 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8009566:	68fb      	ldr	r3, [r7, #12]
 8009568:	2220      	movs	r2, #32
 800956a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800956e:	68fb      	ldr	r3, [r7, #12]
 8009570:	2200      	movs	r2, #0
 8009572:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8009576:	2303      	movs	r3, #3
 8009578:	e00f      	b.n	800959a <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800957a:	68fb      	ldr	r3, [r7, #12]
 800957c:	681b      	ldr	r3, [r3, #0]
 800957e:	69da      	ldr	r2, [r3, #28]
 8009580:	68bb      	ldr	r3, [r7, #8]
 8009582:	4013      	ands	r3, r2
 8009584:	68ba      	ldr	r2, [r7, #8]
 8009586:	429a      	cmp	r2, r3
 8009588:	bf0c      	ite	eq
 800958a:	2301      	moveq	r3, #1
 800958c:	2300      	movne	r3, #0
 800958e:	b2db      	uxtb	r3, r3
 8009590:	461a      	mov	r2, r3
 8009592:	79fb      	ldrb	r3, [r7, #7]
 8009594:	429a      	cmp	r2, r3
 8009596:	d0a6      	beq.n	80094e6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8009598:	2300      	movs	r3, #0
}
 800959a:	4618      	mov	r0, r3
 800959c:	3710      	adds	r7, #16
 800959e:	46bd      	mov	sp, r7
 80095a0:	bd80      	pop	{r7, pc}
	...

080095a4 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80095a4:	b580      	push	{r7, lr}
 80095a6:	b096      	sub	sp, #88	@ 0x58
 80095a8:	af00      	add	r7, sp, #0
 80095aa:	60f8      	str	r0, [r7, #12]
 80095ac:	60b9      	str	r1, [r7, #8]
 80095ae:	4613      	mov	r3, r2
 80095b0:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80095b2:	68fb      	ldr	r3, [r7, #12]
 80095b4:	68ba      	ldr	r2, [r7, #8]
 80095b6:	655a      	str	r2, [r3, #84]	@ 0x54
  huart->RxXferSize = Size;
 80095b8:	68fb      	ldr	r3, [r7, #12]
 80095ba:	88fa      	ldrh	r2, [r7, #6]
 80095bc:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80095c0:	68fb      	ldr	r3, [r7, #12]
 80095c2:	2200      	movs	r2, #0
 80095c4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80095c8:	68fb      	ldr	r3, [r7, #12]
 80095ca:	2222      	movs	r2, #34	@ 0x22
 80095cc:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  if (huart->hdmarx != NULL)
 80095d0:	68fb      	ldr	r3, [r7, #12]
 80095d2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80095d4:	2b00      	cmp	r3, #0
 80095d6:	d028      	beq.n	800962a <UART_Start_Receive_DMA+0x86>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 80095d8:	68fb      	ldr	r3, [r7, #12]
 80095da:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80095dc:	4a3e      	ldr	r2, [pc, #248]	@ (80096d8 <UART_Start_Receive_DMA+0x134>)
 80095de:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 80095e0:	68fb      	ldr	r3, [r7, #12]
 80095e2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80095e4:	4a3d      	ldr	r2, [pc, #244]	@ (80096dc <UART_Start_Receive_DMA+0x138>)
 80095e6:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 80095e8:	68fb      	ldr	r3, [r7, #12]
 80095ea:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80095ec:	4a3c      	ldr	r2, [pc, #240]	@ (80096e0 <UART_Start_Receive_DMA+0x13c>)
 80095ee:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 80095f0:	68fb      	ldr	r3, [r7, #12]
 80095f2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80095f4:	2200      	movs	r2, #0
 80095f6:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 80095f8:	68fb      	ldr	r3, [r7, #12]
 80095fa:	6f58      	ldr	r0, [r3, #116]	@ 0x74
 80095fc:	68fb      	ldr	r3, [r7, #12]
 80095fe:	681b      	ldr	r3, [r3, #0]
 8009600:	3324      	adds	r3, #36	@ 0x24
 8009602:	4619      	mov	r1, r3
 8009604:	68fb      	ldr	r3, [r7, #12]
 8009606:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009608:	461a      	mov	r2, r3
 800960a:	88fb      	ldrh	r3, [r7, #6]
 800960c:	f7f9 fe5e 	bl	80032cc <HAL_DMA_Start_IT>
 8009610:	4603      	mov	r3, r0
 8009612:	2b00      	cmp	r3, #0
 8009614:	d009      	beq.n	800962a <UART_Start_Receive_DMA+0x86>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 8009616:	68fb      	ldr	r3, [r7, #12]
 8009618:	2210      	movs	r2, #16
 800961a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 800961e:	68fb      	ldr	r3, [r7, #12]
 8009620:	2220      	movs	r2, #32
 8009622:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      return HAL_ERROR;
 8009626:	2301      	movs	r3, #1
 8009628:	e051      	b.n	80096ce <UART_Start_Receive_DMA+0x12a>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800962a:	68fb      	ldr	r3, [r7, #12]
 800962c:	691b      	ldr	r3, [r3, #16]
 800962e:	2b00      	cmp	r3, #0
 8009630:	d018      	beq.n	8009664 <UART_Start_Receive_DMA+0xc0>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009632:	68fb      	ldr	r3, [r7, #12]
 8009634:	681b      	ldr	r3, [r3, #0]
 8009636:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009638:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800963a:	e853 3f00 	ldrex	r3, [r3]
 800963e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8009640:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009642:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8009646:	657b      	str	r3, [r7, #84]	@ 0x54
 8009648:	68fb      	ldr	r3, [r7, #12]
 800964a:	681b      	ldr	r3, [r3, #0]
 800964c:	461a      	mov	r2, r3
 800964e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009650:	64bb      	str	r3, [r7, #72]	@ 0x48
 8009652:	647a      	str	r2, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009654:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8009656:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8009658:	e841 2300 	strex	r3, r2, [r1]
 800965c:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 800965e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009660:	2b00      	cmp	r3, #0
 8009662:	d1e6      	bne.n	8009632 <UART_Start_Receive_DMA+0x8e>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009664:	68fb      	ldr	r3, [r7, #12]
 8009666:	681b      	ldr	r3, [r3, #0]
 8009668:	3308      	adds	r3, #8
 800966a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800966c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800966e:	e853 3f00 	ldrex	r3, [r3]
 8009672:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8009674:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009676:	f043 0301 	orr.w	r3, r3, #1
 800967a:	653b      	str	r3, [r7, #80]	@ 0x50
 800967c:	68fb      	ldr	r3, [r7, #12]
 800967e:	681b      	ldr	r3, [r3, #0]
 8009680:	3308      	adds	r3, #8
 8009682:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8009684:	637a      	str	r2, [r7, #52]	@ 0x34
 8009686:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009688:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800968a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800968c:	e841 2300 	strex	r3, r2, [r1]
 8009690:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8009692:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009694:	2b00      	cmp	r3, #0
 8009696:	d1e5      	bne.n	8009664 <UART_Start_Receive_DMA+0xc0>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009698:	68fb      	ldr	r3, [r7, #12]
 800969a:	681b      	ldr	r3, [r3, #0]
 800969c:	3308      	adds	r3, #8
 800969e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80096a0:	697b      	ldr	r3, [r7, #20]
 80096a2:	e853 3f00 	ldrex	r3, [r3]
 80096a6:	613b      	str	r3, [r7, #16]
   return(result);
 80096a8:	693b      	ldr	r3, [r7, #16]
 80096aa:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80096ae:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80096b0:	68fb      	ldr	r3, [r7, #12]
 80096b2:	681b      	ldr	r3, [r3, #0]
 80096b4:	3308      	adds	r3, #8
 80096b6:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80096b8:	623a      	str	r2, [r7, #32]
 80096ba:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80096bc:	69f9      	ldr	r1, [r7, #28]
 80096be:	6a3a      	ldr	r2, [r7, #32]
 80096c0:	e841 2300 	strex	r3, r2, [r1]
 80096c4:	61bb      	str	r3, [r7, #24]
   return(result);
 80096c6:	69bb      	ldr	r3, [r7, #24]
 80096c8:	2b00      	cmp	r3, #0
 80096ca:	d1e5      	bne.n	8009698 <UART_Start_Receive_DMA+0xf4>

  return HAL_OK;
 80096cc:	2300      	movs	r3, #0
}
 80096ce:	4618      	mov	r0, r3
 80096d0:	3758      	adds	r7, #88	@ 0x58
 80096d2:	46bd      	mov	sp, r7
 80096d4:	bd80      	pop	{r7, pc}
 80096d6:	bf00      	nop
 80096d8:	080098af 	.word	0x080098af
 80096dc:	080099db 	.word	0x080099db
 80096e0:	08009a19 	.word	0x08009a19

080096e4 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 80096e4:	b480      	push	{r7}
 80096e6:	b089      	sub	sp, #36	@ 0x24
 80096e8:	af00      	add	r7, sp, #0
 80096ea:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
#else
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 80096ec:	687b      	ldr	r3, [r7, #4]
 80096ee:	681b      	ldr	r3, [r3, #0]
 80096f0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80096f2:	68fb      	ldr	r3, [r7, #12]
 80096f4:	e853 3f00 	ldrex	r3, [r3]
 80096f8:	60bb      	str	r3, [r7, #8]
   return(result);
 80096fa:	68bb      	ldr	r3, [r7, #8]
 80096fc:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8009700:	61fb      	str	r3, [r7, #28]
 8009702:	687b      	ldr	r3, [r7, #4]
 8009704:	681b      	ldr	r3, [r3, #0]
 8009706:	461a      	mov	r2, r3
 8009708:	69fb      	ldr	r3, [r7, #28]
 800970a:	61bb      	str	r3, [r7, #24]
 800970c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800970e:	6979      	ldr	r1, [r7, #20]
 8009710:	69ba      	ldr	r2, [r7, #24]
 8009712:	e841 2300 	strex	r3, r2, [r1]
 8009716:	613b      	str	r3, [r7, #16]
   return(result);
 8009718:	693b      	ldr	r3, [r7, #16]
 800971a:	2b00      	cmp	r3, #0
 800971c:	d1e6      	bne.n	80096ec <UART_EndTxTransfer+0x8>
#endif /* USART_CR1_FIFOEN */

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800971e:	687b      	ldr	r3, [r7, #4]
 8009720:	2220      	movs	r2, #32
 8009722:	67da      	str	r2, [r3, #124]	@ 0x7c
}
 8009724:	bf00      	nop
 8009726:	3724      	adds	r7, #36	@ 0x24
 8009728:	46bd      	mov	sp, r7
 800972a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800972e:	4770      	bx	lr

08009730 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8009730:	b480      	push	{r7}
 8009732:	b095      	sub	sp, #84	@ 0x54
 8009734:	af00      	add	r7, sp, #0
 8009736:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8009738:	687b      	ldr	r3, [r7, #4]
 800973a:	681b      	ldr	r3, [r3, #0]
 800973c:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800973e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009740:	e853 3f00 	ldrex	r3, [r3]
 8009744:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8009746:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009748:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800974c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800974e:	687b      	ldr	r3, [r7, #4]
 8009750:	681b      	ldr	r3, [r3, #0]
 8009752:	461a      	mov	r2, r3
 8009754:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009756:	643b      	str	r3, [r7, #64]	@ 0x40
 8009758:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800975a:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800975c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800975e:	e841 2300 	strex	r3, r2, [r1]
 8009762:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8009764:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009766:	2b00      	cmp	r3, #0
 8009768:	d1e6      	bne.n	8009738 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800976a:	687b      	ldr	r3, [r7, #4]
 800976c:	681b      	ldr	r3, [r3, #0]
 800976e:	3308      	adds	r3, #8
 8009770:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009772:	6a3b      	ldr	r3, [r7, #32]
 8009774:	e853 3f00 	ldrex	r3, [r3]
 8009778:	61fb      	str	r3, [r7, #28]
   return(result);
 800977a:	69fb      	ldr	r3, [r7, #28]
 800977c:	f023 0301 	bic.w	r3, r3, #1
 8009780:	64bb      	str	r3, [r7, #72]	@ 0x48
 8009782:	687b      	ldr	r3, [r7, #4]
 8009784:	681b      	ldr	r3, [r3, #0]
 8009786:	3308      	adds	r3, #8
 8009788:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800978a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800978c:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800978e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8009790:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009792:	e841 2300 	strex	r3, r2, [r1]
 8009796:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8009798:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800979a:	2b00      	cmp	r3, #0
 800979c:	d1e5      	bne.n	800976a <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800979e:	687b      	ldr	r3, [r7, #4]
 80097a0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80097a2:	2b01      	cmp	r3, #1
 80097a4:	d118      	bne.n	80097d8 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80097a6:	687b      	ldr	r3, [r7, #4]
 80097a8:	681b      	ldr	r3, [r3, #0]
 80097aa:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80097ac:	68fb      	ldr	r3, [r7, #12]
 80097ae:	e853 3f00 	ldrex	r3, [r3]
 80097b2:	60bb      	str	r3, [r7, #8]
   return(result);
 80097b4:	68bb      	ldr	r3, [r7, #8]
 80097b6:	f023 0310 	bic.w	r3, r3, #16
 80097ba:	647b      	str	r3, [r7, #68]	@ 0x44
 80097bc:	687b      	ldr	r3, [r7, #4]
 80097be:	681b      	ldr	r3, [r3, #0]
 80097c0:	461a      	mov	r2, r3
 80097c2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80097c4:	61bb      	str	r3, [r7, #24]
 80097c6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80097c8:	6979      	ldr	r1, [r7, #20]
 80097ca:	69ba      	ldr	r2, [r7, #24]
 80097cc:	e841 2300 	strex	r3, r2, [r1]
 80097d0:	613b      	str	r3, [r7, #16]
   return(result);
 80097d2:	693b      	ldr	r3, [r7, #16]
 80097d4:	2b00      	cmp	r3, #0
 80097d6:	d1e6      	bne.n	80097a6 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80097d8:	687b      	ldr	r3, [r7, #4]
 80097da:	2220      	movs	r2, #32
 80097dc:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80097e0:	687b      	ldr	r3, [r7, #4]
 80097e2:	2200      	movs	r2, #0
 80097e4:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80097e6:	687b      	ldr	r3, [r7, #4]
 80097e8:	2200      	movs	r2, #0
 80097ea:	669a      	str	r2, [r3, #104]	@ 0x68
}
 80097ec:	bf00      	nop
 80097ee:	3754      	adds	r7, #84	@ 0x54
 80097f0:	46bd      	mov	sp, r7
 80097f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097f6:	4770      	bx	lr

080097f8 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 80097f8:	b580      	push	{r7, lr}
 80097fa:	b090      	sub	sp, #64	@ 0x40
 80097fc:	af00      	add	r7, sp, #0
 80097fe:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8009800:	687b      	ldr	r3, [r7, #4]
 8009802:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009804:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8009806:	687b      	ldr	r3, [r7, #4]
 8009808:	681b      	ldr	r3, [r3, #0]
 800980a:	681b      	ldr	r3, [r3, #0]
 800980c:	f003 0320 	and.w	r3, r3, #32
 8009810:	2b00      	cmp	r3, #0
 8009812:	d137      	bne.n	8009884 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0U;
 8009814:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009816:	2200      	movs	r2, #0
 8009818:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800981c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800981e:	681b      	ldr	r3, [r3, #0]
 8009820:	3308      	adds	r3, #8
 8009822:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009824:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009826:	e853 3f00 	ldrex	r3, [r3]
 800982a:	623b      	str	r3, [r7, #32]
   return(result);
 800982c:	6a3b      	ldr	r3, [r7, #32]
 800982e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8009832:	63bb      	str	r3, [r7, #56]	@ 0x38
 8009834:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009836:	681b      	ldr	r3, [r3, #0]
 8009838:	3308      	adds	r3, #8
 800983a:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800983c:	633a      	str	r2, [r7, #48]	@ 0x30
 800983e:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009840:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8009842:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009844:	e841 2300 	strex	r3, r2, [r1]
 8009848:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800984a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800984c:	2b00      	cmp	r3, #0
 800984e:	d1e5      	bne.n	800981c <UART_DMATransmitCplt+0x24>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8009850:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009852:	681b      	ldr	r3, [r3, #0]
 8009854:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009856:	693b      	ldr	r3, [r7, #16]
 8009858:	e853 3f00 	ldrex	r3, [r3]
 800985c:	60fb      	str	r3, [r7, #12]
   return(result);
 800985e:	68fb      	ldr	r3, [r7, #12]
 8009860:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009864:	637b      	str	r3, [r7, #52]	@ 0x34
 8009866:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009868:	681b      	ldr	r3, [r3, #0]
 800986a:	461a      	mov	r2, r3
 800986c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800986e:	61fb      	str	r3, [r7, #28]
 8009870:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009872:	69b9      	ldr	r1, [r7, #24]
 8009874:	69fa      	ldr	r2, [r7, #28]
 8009876:	e841 2300 	strex	r3, r2, [r1]
 800987a:	617b      	str	r3, [r7, #20]
   return(result);
 800987c:	697b      	ldr	r3, [r7, #20]
 800987e:	2b00      	cmp	r3, #0
 8009880:	d1e6      	bne.n	8009850 <UART_DMATransmitCplt+0x58>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8009882:	e002      	b.n	800988a <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 8009884:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8009886:	f7ff fa71 	bl	8008d6c <HAL_UART_TxCpltCallback>
}
 800988a:	bf00      	nop
 800988c:	3740      	adds	r7, #64	@ 0x40
 800988e:	46bd      	mov	sp, r7
 8009890:	bd80      	pop	{r7, pc}

08009892 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8009892:	b580      	push	{r7, lr}
 8009894:	b084      	sub	sp, #16
 8009896:	af00      	add	r7, sp, #0
 8009898:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800989a:	687b      	ldr	r3, [r7, #4]
 800989c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800989e:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 80098a0:	68f8      	ldr	r0, [r7, #12]
 80098a2:	f7ff fa6d 	bl	8008d80 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80098a6:	bf00      	nop
 80098a8:	3710      	adds	r7, #16
 80098aa:	46bd      	mov	sp, r7
 80098ac:	bd80      	pop	{r7, pc}

080098ae <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80098ae:	b580      	push	{r7, lr}
 80098b0:	b09c      	sub	sp, #112	@ 0x70
 80098b2:	af00      	add	r7, sp, #0
 80098b4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80098b6:	687b      	ldr	r3, [r7, #4]
 80098b8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80098ba:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 80098bc:	687b      	ldr	r3, [r7, #4]
 80098be:	681b      	ldr	r3, [r3, #0]
 80098c0:	681b      	ldr	r3, [r3, #0]
 80098c2:	f003 0320 	and.w	r3, r3, #32
 80098c6:	2b00      	cmp	r3, #0
 80098c8:	d171      	bne.n	80099ae <UART_DMAReceiveCplt+0x100>
  {
    huart->RxXferCount = 0U;
 80098ca:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80098cc:	2200      	movs	r2, #0
 80098ce:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80098d2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80098d4:	681b      	ldr	r3, [r3, #0]
 80098d6:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80098d8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80098da:	e853 3f00 	ldrex	r3, [r3]
 80098de:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80098e0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80098e2:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80098e6:	66bb      	str	r3, [r7, #104]	@ 0x68
 80098e8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80098ea:	681b      	ldr	r3, [r3, #0]
 80098ec:	461a      	mov	r2, r3
 80098ee:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80098f0:	65bb      	str	r3, [r7, #88]	@ 0x58
 80098f2:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80098f4:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80098f6:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80098f8:	e841 2300 	strex	r3, r2, [r1]
 80098fc:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80098fe:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009900:	2b00      	cmp	r3, #0
 8009902:	d1e6      	bne.n	80098d2 <UART_DMAReceiveCplt+0x24>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009904:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009906:	681b      	ldr	r3, [r3, #0]
 8009908:	3308      	adds	r3, #8
 800990a:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800990c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800990e:	e853 3f00 	ldrex	r3, [r3]
 8009912:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8009914:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009916:	f023 0301 	bic.w	r3, r3, #1
 800991a:	667b      	str	r3, [r7, #100]	@ 0x64
 800991c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800991e:	681b      	ldr	r3, [r3, #0]
 8009920:	3308      	adds	r3, #8
 8009922:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8009924:	647a      	str	r2, [r7, #68]	@ 0x44
 8009926:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009928:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800992a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800992c:	e841 2300 	strex	r3, r2, [r1]
 8009930:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8009932:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009934:	2b00      	cmp	r3, #0
 8009936:	d1e5      	bne.n	8009904 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009938:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800993a:	681b      	ldr	r3, [r3, #0]
 800993c:	3308      	adds	r3, #8
 800993e:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009940:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009942:	e853 3f00 	ldrex	r3, [r3]
 8009946:	623b      	str	r3, [r7, #32]
   return(result);
 8009948:	6a3b      	ldr	r3, [r7, #32]
 800994a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800994e:	663b      	str	r3, [r7, #96]	@ 0x60
 8009950:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009952:	681b      	ldr	r3, [r3, #0]
 8009954:	3308      	adds	r3, #8
 8009956:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8009958:	633a      	str	r2, [r7, #48]	@ 0x30
 800995a:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800995c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800995e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009960:	e841 2300 	strex	r3, r2, [r1]
 8009964:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8009966:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009968:	2b00      	cmp	r3, #0
 800996a:	d1e5      	bne.n	8009938 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800996c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800996e:	2220      	movs	r2, #32
 8009970:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009974:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009976:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009978:	2b01      	cmp	r3, #1
 800997a:	d118      	bne.n	80099ae <UART_DMAReceiveCplt+0x100>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800997c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800997e:	681b      	ldr	r3, [r3, #0]
 8009980:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009982:	693b      	ldr	r3, [r7, #16]
 8009984:	e853 3f00 	ldrex	r3, [r3]
 8009988:	60fb      	str	r3, [r7, #12]
   return(result);
 800998a:	68fb      	ldr	r3, [r7, #12]
 800998c:	f023 0310 	bic.w	r3, r3, #16
 8009990:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8009992:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009994:	681b      	ldr	r3, [r3, #0]
 8009996:	461a      	mov	r2, r3
 8009998:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800999a:	61fb      	str	r3, [r7, #28]
 800999c:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800999e:	69b9      	ldr	r1, [r7, #24]
 80099a0:	69fa      	ldr	r2, [r7, #28]
 80099a2:	e841 2300 	strex	r3, r2, [r1]
 80099a6:	617b      	str	r3, [r7, #20]
   return(result);
 80099a8:	697b      	ldr	r3, [r7, #20]
 80099aa:	2b00      	cmp	r3, #0
 80099ac:	d1e6      	bne.n	800997c <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80099ae:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80099b0:	2200      	movs	r2, #0
 80099b2:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80099b4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80099b6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80099b8:	2b01      	cmp	r3, #1
 80099ba:	d107      	bne.n	80099cc <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80099bc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80099be:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 80099c2:	4619      	mov	r1, r3
 80099c4:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 80099c6:	f7ff fa03 	bl	8008dd0 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80099ca:	e002      	b.n	80099d2 <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 80099cc:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 80099ce:	f7ff f9e1 	bl	8008d94 <HAL_UART_RxCpltCallback>
}
 80099d2:	bf00      	nop
 80099d4:	3770      	adds	r7, #112	@ 0x70
 80099d6:	46bd      	mov	sp, r7
 80099d8:	bd80      	pop	{r7, pc}

080099da <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80099da:	b580      	push	{r7, lr}
 80099dc:	b084      	sub	sp, #16
 80099de:	af00      	add	r7, sp, #0
 80099e0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80099e2:	687b      	ldr	r3, [r7, #4]
 80099e4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80099e6:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 80099e8:	68fb      	ldr	r3, [r7, #12]
 80099ea:	2201      	movs	r2, #1
 80099ec:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80099ee:	68fb      	ldr	r3, [r7, #12]
 80099f0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80099f2:	2b01      	cmp	r3, #1
 80099f4:	d109      	bne.n	8009a0a <UART_DMARxHalfCplt+0x30>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 80099f6:	68fb      	ldr	r3, [r7, #12]
 80099f8:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 80099fc:	085b      	lsrs	r3, r3, #1
 80099fe:	b29b      	uxth	r3, r3
 8009a00:	4619      	mov	r1, r3
 8009a02:	68f8      	ldr	r0, [r7, #12]
 8009a04:	f7ff f9e4 	bl	8008dd0 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8009a08:	e002      	b.n	8009a10 <UART_DMARxHalfCplt+0x36>
    HAL_UART_RxHalfCpltCallback(huart);
 8009a0a:	68f8      	ldr	r0, [r7, #12]
 8009a0c:	f7ff f9cc 	bl	8008da8 <HAL_UART_RxHalfCpltCallback>
}
 8009a10:	bf00      	nop
 8009a12:	3710      	adds	r7, #16
 8009a14:	46bd      	mov	sp, r7
 8009a16:	bd80      	pop	{r7, pc}

08009a18 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8009a18:	b580      	push	{r7, lr}
 8009a1a:	b086      	sub	sp, #24
 8009a1c:	af00      	add	r7, sp, #0
 8009a1e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8009a20:	687b      	ldr	r3, [r7, #4]
 8009a22:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009a24:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8009a26:	697b      	ldr	r3, [r7, #20]
 8009a28:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8009a2a:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8009a2c:	697b      	ldr	r3, [r7, #20]
 8009a2e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009a32:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8009a34:	697b      	ldr	r3, [r7, #20]
 8009a36:	681b      	ldr	r3, [r3, #0]
 8009a38:	689b      	ldr	r3, [r3, #8]
 8009a3a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009a3e:	2b80      	cmp	r3, #128	@ 0x80
 8009a40:	d109      	bne.n	8009a56 <UART_DMAError+0x3e>
 8009a42:	693b      	ldr	r3, [r7, #16]
 8009a44:	2b21      	cmp	r3, #33	@ 0x21
 8009a46:	d106      	bne.n	8009a56 <UART_DMAError+0x3e>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8009a48:	697b      	ldr	r3, [r7, #20]
 8009a4a:	2200      	movs	r2, #0
 8009a4c:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    UART_EndTxTransfer(huart);
 8009a50:	6978      	ldr	r0, [r7, #20]
 8009a52:	f7ff fe47 	bl	80096e4 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8009a56:	697b      	ldr	r3, [r7, #20]
 8009a58:	681b      	ldr	r3, [r3, #0]
 8009a5a:	689b      	ldr	r3, [r3, #8]
 8009a5c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009a60:	2b40      	cmp	r3, #64	@ 0x40
 8009a62:	d109      	bne.n	8009a78 <UART_DMAError+0x60>
 8009a64:	68fb      	ldr	r3, [r7, #12]
 8009a66:	2b22      	cmp	r3, #34	@ 0x22
 8009a68:	d106      	bne.n	8009a78 <UART_DMAError+0x60>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8009a6a:	697b      	ldr	r3, [r7, #20]
 8009a6c:	2200      	movs	r2, #0
 8009a6e:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
    UART_EndRxTransfer(huart);
 8009a72:	6978      	ldr	r0, [r7, #20]
 8009a74:	f7ff fe5c 	bl	8009730 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8009a78:	697b      	ldr	r3, [r7, #20]
 8009a7a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8009a7e:	f043 0210 	orr.w	r2, r3, #16
 8009a82:	697b      	ldr	r3, [r7, #20]
 8009a84:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8009a88:	6978      	ldr	r0, [r7, #20]
 8009a8a:	f7ff f997 	bl	8008dbc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009a8e:	bf00      	nop
 8009a90:	3718      	adds	r7, #24
 8009a92:	46bd      	mov	sp, r7
 8009a94:	bd80      	pop	{r7, pc}

08009a96 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8009a96:	b580      	push	{r7, lr}
 8009a98:	b084      	sub	sp, #16
 8009a9a:	af00      	add	r7, sp, #0
 8009a9c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8009a9e:	687b      	ldr	r3, [r7, #4]
 8009aa0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009aa2:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8009aa4:	68fb      	ldr	r3, [r7, #12]
 8009aa6:	2200      	movs	r2, #0
 8009aa8:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->TxXferCount = 0U;
 8009aac:	68fb      	ldr	r3, [r7, #12]
 8009aae:	2200      	movs	r2, #0
 8009ab0:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8009ab4:	68f8      	ldr	r0, [r7, #12]
 8009ab6:	f7ff f981 	bl	8008dbc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009aba:	bf00      	nop
 8009abc:	3710      	adds	r7, #16
 8009abe:	46bd      	mov	sp, r7
 8009ac0:	bd80      	pop	{r7, pc}

08009ac2 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8009ac2:	b580      	push	{r7, lr}
 8009ac4:	b088      	sub	sp, #32
 8009ac6:	af00      	add	r7, sp, #0
 8009ac8:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8009aca:	687b      	ldr	r3, [r7, #4]
 8009acc:	681b      	ldr	r3, [r3, #0]
 8009ace:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009ad0:	68fb      	ldr	r3, [r7, #12]
 8009ad2:	e853 3f00 	ldrex	r3, [r3]
 8009ad6:	60bb      	str	r3, [r7, #8]
   return(result);
 8009ad8:	68bb      	ldr	r3, [r7, #8]
 8009ada:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009ade:	61fb      	str	r3, [r7, #28]
 8009ae0:	687b      	ldr	r3, [r7, #4]
 8009ae2:	681b      	ldr	r3, [r3, #0]
 8009ae4:	461a      	mov	r2, r3
 8009ae6:	69fb      	ldr	r3, [r7, #28]
 8009ae8:	61bb      	str	r3, [r7, #24]
 8009aea:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009aec:	6979      	ldr	r1, [r7, #20]
 8009aee:	69ba      	ldr	r2, [r7, #24]
 8009af0:	e841 2300 	strex	r3, r2, [r1]
 8009af4:	613b      	str	r3, [r7, #16]
   return(result);
 8009af6:	693b      	ldr	r3, [r7, #16]
 8009af8:	2b00      	cmp	r3, #0
 8009afa:	d1e6      	bne.n	8009aca <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8009afc:	687b      	ldr	r3, [r7, #4]
 8009afe:	2220      	movs	r2, #32
 8009b00:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8009b02:	687b      	ldr	r3, [r7, #4]
 8009b04:	2200      	movs	r2, #0
 8009b06:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8009b08:	6878      	ldr	r0, [r7, #4]
 8009b0a:	f7ff f92f 	bl	8008d6c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009b0e:	bf00      	nop
 8009b10:	3720      	adds	r7, #32
 8009b12:	46bd      	mov	sp, r7
 8009b14:	bd80      	pop	{r7, pc}

08009b16 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8009b16:	b480      	push	{r7}
 8009b18:	b083      	sub	sp, #12
 8009b1a:	af00      	add	r7, sp, #0
 8009b1c:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8009b1e:	bf00      	nop
 8009b20:	370c      	adds	r7, #12
 8009b22:	46bd      	mov	sp, r7
 8009b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b28:	4770      	bx	lr

08009b2a <BNO055_Init>:
 */

#include "BNO055.h"

HAL_StatusTypeDef BNO055_Init(BNO055_Structure *bno, I2C_HandleTypeDef *hi2cx, uint8_t addr, OPRMode mode)
{
 8009b2a:	b580      	push	{r7, lr}
 8009b2c:	b08a      	sub	sp, #40	@ 0x28
 8009b2e:	af04      	add	r7, sp, #16
 8009b30:	60f8      	str	r0, [r7, #12]
 8009b32:	60b9      	str	r1, [r7, #8]
 8009b34:	4611      	mov	r1, r2
 8009b36:	461a      	mov	r2, r3
 8009b38:	460b      	mov	r3, r1
 8009b3a:	71fb      	strb	r3, [r7, #7]
 8009b3c:	4613      	mov	r3, r2
 8009b3e:	71bb      	strb	r3, [r7, #6]
	uint8_t txbuffer;
	uint8_t rxbuffer;

	bno->hi2cx = hi2cx;
 8009b40:	68fb      	ldr	r3, [r7, #12]
 8009b42:	68ba      	ldr	r2, [r7, #8]
 8009b44:	601a      	str	r2, [r3, #0]
	bno->address = BNO055_ADD_H;
 8009b46:	68fb      	ldr	r3, [r7, #12]
 8009b48:	2252      	movs	r2, #82	@ 0x52
 8009b4a:	711a      	strb	r2, [r3, #4]
	if (addr == 0) bno->address = BNO055_ADD_L;
 8009b4c:	79fb      	ldrb	r3, [r7, #7]
 8009b4e:	2b00      	cmp	r3, #0
 8009b50:	d102      	bne.n	8009b58 <BNO055_Init+0x2e>
 8009b52:	68fb      	ldr	r3, [r7, #12]
 8009b54:	2250      	movs	r2, #80	@ 0x50
 8009b56:	711a      	strb	r2, [r3, #4]

	HAL_I2C_Mem_Read(bno->hi2cx, bno->address, CHIP_ID, 1, &rxbuffer, 1, 10);
 8009b58:	68fb      	ldr	r3, [r7, #12]
 8009b5a:	6818      	ldr	r0, [r3, #0]
 8009b5c:	68fb      	ldr	r3, [r7, #12]
 8009b5e:	791b      	ldrb	r3, [r3, #4]
 8009b60:	4619      	mov	r1, r3
 8009b62:	230a      	movs	r3, #10
 8009b64:	9302      	str	r3, [sp, #8]
 8009b66:	2301      	movs	r3, #1
 8009b68:	9301      	str	r3, [sp, #4]
 8009b6a:	f107 0316 	add.w	r3, r7, #22
 8009b6e:	9300      	str	r3, [sp, #0]
 8009b70:	2301      	movs	r3, #1
 8009b72:	2200      	movs	r2, #0
 8009b74:	f7fa f8b4 	bl	8003ce0 <HAL_I2C_Mem_Read>
	if (rxbuffer != 0xA0) {
 8009b78:	7dbb      	ldrb	r3, [r7, #22]
 8009b7a:	2ba0      	cmp	r3, #160	@ 0xa0
 8009b7c:	d018      	beq.n	8009bb0 <BNO055_Init+0x86>
		HAL_Delay(1000);
 8009b7e:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8009b82:	f7f9 f9e5 	bl	8002f50 <HAL_Delay>
		HAL_I2C_Mem_Read(bno->hi2cx, bno->address, CHIP_ID, 1, &rxbuffer, 1, 10);
 8009b86:	68fb      	ldr	r3, [r7, #12]
 8009b88:	6818      	ldr	r0, [r3, #0]
 8009b8a:	68fb      	ldr	r3, [r7, #12]
 8009b8c:	791b      	ldrb	r3, [r3, #4]
 8009b8e:	4619      	mov	r1, r3
 8009b90:	230a      	movs	r3, #10
 8009b92:	9302      	str	r3, [sp, #8]
 8009b94:	2301      	movs	r3, #1
 8009b96:	9301      	str	r3, [sp, #4]
 8009b98:	f107 0316 	add.w	r3, r7, #22
 8009b9c:	9300      	str	r3, [sp, #0]
 8009b9e:	2301      	movs	r3, #1
 8009ba0:	2200      	movs	r2, #0
 8009ba2:	f7fa f89d 	bl	8003ce0 <HAL_I2C_Mem_Read>
		if (rxbuffer != 0xA0) return HAL_ERROR;
 8009ba6:	7dbb      	ldrb	r3, [r7, #22]
 8009ba8:	2ba0      	cmp	r3, #160	@ 0xa0
 8009baa:	d001      	beq.n	8009bb0 <BNO055_Init+0x86>
 8009bac:	2301      	movs	r3, #1
 8009bae:	e099      	b.n	8009ce4 <BNO055_Init+0x1ba>
	}

	txbuffer = CONFIGMODE;
 8009bb0:	2300      	movs	r3, #0
 8009bb2:	75fb      	strb	r3, [r7, #23]
	HAL_I2C_Mem_Write(bno->hi2cx, bno->address, OPR_MODE, 1, &txbuffer, 1, 10);
 8009bb4:	68fb      	ldr	r3, [r7, #12]
 8009bb6:	6818      	ldr	r0, [r3, #0]
 8009bb8:	68fb      	ldr	r3, [r7, #12]
 8009bba:	791b      	ldrb	r3, [r3, #4]
 8009bbc:	4619      	mov	r1, r3
 8009bbe:	230a      	movs	r3, #10
 8009bc0:	9302      	str	r3, [sp, #8]
 8009bc2:	2301      	movs	r3, #1
 8009bc4:	9301      	str	r3, [sp, #4]
 8009bc6:	f107 0317 	add.w	r3, r7, #23
 8009bca:	9300      	str	r3, [sp, #0]
 8009bcc:	2301      	movs	r3, #1
 8009bce:	223d      	movs	r2, #61	@ 0x3d
 8009bd0:	f7f9 ff72 	bl	8003ab8 <HAL_I2C_Mem_Write>
	HAL_Delay(10);
 8009bd4:	200a      	movs	r0, #10
 8009bd6:	f7f9 f9bb 	bl	8002f50 <HAL_Delay>

	txbuffer = 0x20;
 8009bda:	2320      	movs	r3, #32
 8009bdc:	75fb      	strb	r3, [r7, #23]
	HAL_I2C_Mem_Write(bno->hi2cx, bno->address, SYS_TRIGGER, 1, &txbuffer, 1, 10);
 8009bde:	68fb      	ldr	r3, [r7, #12]
 8009be0:	6818      	ldr	r0, [r3, #0]
 8009be2:	68fb      	ldr	r3, [r7, #12]
 8009be4:	791b      	ldrb	r3, [r3, #4]
 8009be6:	4619      	mov	r1, r3
 8009be8:	230a      	movs	r3, #10
 8009bea:	9302      	str	r3, [sp, #8]
 8009bec:	2301      	movs	r3, #1
 8009bee:	9301      	str	r3, [sp, #4]
 8009bf0:	f107 0317 	add.w	r3, r7, #23
 8009bf4:	9300      	str	r3, [sp, #0]
 8009bf6:	2301      	movs	r3, #1
 8009bf8:	223f      	movs	r2, #63	@ 0x3f
 8009bfa:	f7f9 ff5d 	bl	8003ab8 <HAL_I2C_Mem_Write>
	HAL_Delay(30);
 8009bfe:	201e      	movs	r0, #30
 8009c00:	f7f9 f9a6 	bl	8002f50 <HAL_Delay>

	do {
		HAL_I2C_Mem_Read(bno->hi2cx, bno->address, CHIP_ID, 1, &rxbuffer, 1, 10);
 8009c04:	68fb      	ldr	r3, [r7, #12]
 8009c06:	6818      	ldr	r0, [r3, #0]
 8009c08:	68fb      	ldr	r3, [r7, #12]
 8009c0a:	791b      	ldrb	r3, [r3, #4]
 8009c0c:	4619      	mov	r1, r3
 8009c0e:	230a      	movs	r3, #10
 8009c10:	9302      	str	r3, [sp, #8]
 8009c12:	2301      	movs	r3, #1
 8009c14:	9301      	str	r3, [sp, #4]
 8009c16:	f107 0316 	add.w	r3, r7, #22
 8009c1a:	9300      	str	r3, [sp, #0]
 8009c1c:	2301      	movs	r3, #1
 8009c1e:	2200      	movs	r2, #0
 8009c20:	f7fa f85e 	bl	8003ce0 <HAL_I2C_Mem_Read>
	} while (rxbuffer != 0xA0);
 8009c24:	7dbb      	ldrb	r3, [r7, #22]
 8009c26:	2ba0      	cmp	r3, #160	@ 0xa0
 8009c28:	d1ec      	bne.n	8009c04 <BNO055_Init+0xda>
	HAL_Delay(50);
 8009c2a:	2032      	movs	r0, #50	@ 0x32
 8009c2c:	f7f9 f990 	bl	8002f50 <HAL_Delay>

	txbuffer = Normal_Mode;
 8009c30:	2300      	movs	r3, #0
 8009c32:	75fb      	strb	r3, [r7, #23]
	HAL_I2C_Mem_Write(bno->hi2cx, bno->address, PWR_MODE, 1, &txbuffer, 1, 10);
 8009c34:	68fb      	ldr	r3, [r7, #12]
 8009c36:	6818      	ldr	r0, [r3, #0]
 8009c38:	68fb      	ldr	r3, [r7, #12]
 8009c3a:	791b      	ldrb	r3, [r3, #4]
 8009c3c:	4619      	mov	r1, r3
 8009c3e:	230a      	movs	r3, #10
 8009c40:	9302      	str	r3, [sp, #8]
 8009c42:	2301      	movs	r3, #1
 8009c44:	9301      	str	r3, [sp, #4]
 8009c46:	f107 0317 	add.w	r3, r7, #23
 8009c4a:	9300      	str	r3, [sp, #0]
 8009c4c:	2301      	movs	r3, #1
 8009c4e:	223e      	movs	r2, #62	@ 0x3e
 8009c50:	f7f9 ff32 	bl	8003ab8 <HAL_I2C_Mem_Write>
	HAL_Delay(10);
 8009c54:	200a      	movs	r0, #10
 8009c56:	f7f9 f97b 	bl	8002f50 <HAL_Delay>

	txbuffer = Page_ID_00;
 8009c5a:	2300      	movs	r3, #0
 8009c5c:	75fb      	strb	r3, [r7, #23]
	HAL_I2C_Mem_Write(bno->hi2cx, bno->address, PAGE_ID, 1, &txbuffer, 1, 10);
 8009c5e:	68fb      	ldr	r3, [r7, #12]
 8009c60:	6818      	ldr	r0, [r3, #0]
 8009c62:	68fb      	ldr	r3, [r7, #12]
 8009c64:	791b      	ldrb	r3, [r3, #4]
 8009c66:	4619      	mov	r1, r3
 8009c68:	230a      	movs	r3, #10
 8009c6a:	9302      	str	r3, [sp, #8]
 8009c6c:	2301      	movs	r3, #1
 8009c6e:	9301      	str	r3, [sp, #4]
 8009c70:	f107 0317 	add.w	r3, r7, #23
 8009c74:	9300      	str	r3, [sp, #0]
 8009c76:	2301      	movs	r3, #1
 8009c78:	2207      	movs	r2, #7
 8009c7a:	f7f9 ff1d 	bl	8003ab8 <HAL_I2C_Mem_Write>
	HAL_Delay(10);
 8009c7e:	200a      	movs	r0, #10
 8009c80:	f7f9 f966 	bl	8002f50 <HAL_Delay>

	txbuffer = 0x00;
 8009c84:	2300      	movs	r3, #0
 8009c86:	75fb      	strb	r3, [r7, #23]
	HAL_I2C_Mem_Write(bno->hi2cx, bno->address, SYS_TRIGGER, 1, &txbuffer, 1, 10);
 8009c88:	68fb      	ldr	r3, [r7, #12]
 8009c8a:	6818      	ldr	r0, [r3, #0]
 8009c8c:	68fb      	ldr	r3, [r7, #12]
 8009c8e:	791b      	ldrb	r3, [r3, #4]
 8009c90:	4619      	mov	r1, r3
 8009c92:	230a      	movs	r3, #10
 8009c94:	9302      	str	r3, [sp, #8]
 8009c96:	2301      	movs	r3, #1
 8009c98:	9301      	str	r3, [sp, #4]
 8009c9a:	f107 0317 	add.w	r3, r7, #23
 8009c9e:	9300      	str	r3, [sp, #0]
 8009ca0:	2301      	movs	r3, #1
 8009ca2:	223f      	movs	r2, #63	@ 0x3f
 8009ca4:	f7f9 ff08 	bl	8003ab8 <HAL_I2C_Mem_Write>
	HAL_Delay(10);
 8009ca8:	200a      	movs	r0, #10
 8009caa:	f7f9 f951 	bl	8002f50 <HAL_Delay>

	bno->mode = mode;
 8009cae:	68fb      	ldr	r3, [r7, #12]
 8009cb0:	79ba      	ldrb	r2, [r7, #6]
 8009cb2:	715a      	strb	r2, [r3, #5]
	HAL_I2C_Mem_Write(bno->hi2cx, bno->address, OPR_MODE, 1, &bno->mode, 1, 10);
 8009cb4:	68fb      	ldr	r3, [r7, #12]
 8009cb6:	6818      	ldr	r0, [r3, #0]
 8009cb8:	68fb      	ldr	r3, [r7, #12]
 8009cba:	791b      	ldrb	r3, [r3, #4]
 8009cbc:	4619      	mov	r1, r3
 8009cbe:	68fb      	ldr	r3, [r7, #12]
 8009cc0:	3305      	adds	r3, #5
 8009cc2:	220a      	movs	r2, #10
 8009cc4:	9202      	str	r2, [sp, #8]
 8009cc6:	2201      	movs	r2, #1
 8009cc8:	9201      	str	r2, [sp, #4]
 8009cca:	9300      	str	r3, [sp, #0]
 8009ccc:	2301      	movs	r3, #1
 8009cce:	223d      	movs	r2, #61	@ 0x3d
 8009cd0:	f7f9 fef2 	bl	8003ab8 <HAL_I2C_Mem_Write>
	HAL_Delay(1000);
 8009cd4:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8009cd8:	f7f9 f93a 	bl	8002f50 <HAL_Delay>

	bno->flag = HAL_OK;
 8009cdc:	68fb      	ldr	r3, [r7, #12]
 8009cde:	2200      	movs	r2, #0
 8009ce0:	719a      	strb	r2, [r3, #6]

	return HAL_OK;
 8009ce2:	2300      	movs	r3, #0
}
 8009ce4:	4618      	mov	r0, r3
 8009ce6:	3718      	adds	r7, #24
 8009ce8:	46bd      	mov	sp, r7
 8009cea:	bd80      	pop	{r7, pc}
 8009cec:	0000      	movs	r0, r0
	...

08009cf0 <BNO055_Read_DMA>:
	}

}

void BNO055_Read_DMA(BNO055_Structure *bno, uint8_t fast_mode)
{
 8009cf0:	b580      	push	{r7, lr}
 8009cf2:	b08a      	sub	sp, #40	@ 0x28
 8009cf4:	af04      	add	r7, sp, #16
 8009cf6:	6078      	str	r0, [r7, #4]
 8009cf8:	460b      	mov	r3, r1
 8009cfa:	70fb      	strb	r3, [r7, #3]
	uint8_t read_mode;
	HAL_I2C_Mem_Read(bno->hi2cx, bno->address, OPR_MODE, 1, &read_mode, 1, 10);
 8009cfc:	687b      	ldr	r3, [r7, #4]
 8009cfe:	6818      	ldr	r0, [r3, #0]
 8009d00:	687b      	ldr	r3, [r7, #4]
 8009d02:	791b      	ldrb	r3, [r3, #4]
 8009d04:	4619      	mov	r1, r3
 8009d06:	230a      	movs	r3, #10
 8009d08:	9302      	str	r3, [sp, #8]
 8009d0a:	2301      	movs	r3, #1
 8009d0c:	9301      	str	r3, [sp, #4]
 8009d0e:	f107 030f 	add.w	r3, r7, #15
 8009d12:	9300      	str	r3, [sp, #0]
 8009d14:	2301      	movs	r3, #1
 8009d16:	223d      	movs	r2, #61	@ 0x3d
 8009d18:	f7f9 ffe2 	bl	8003ce0 <HAL_I2C_Mem_Read>
	if (read_mode != bno->mode) {
 8009d1c:	687b      	ldr	r3, [r7, #4]
 8009d1e:	795a      	ldrb	r2, [r3, #5]
 8009d20:	7bfb      	ldrb	r3, [r7, #15]
 8009d22:	429a      	cmp	r2, r3
 8009d24:	d00f      	beq.n	8009d46 <BNO055_Read_DMA+0x56>
		HAL_I2C_Mem_Write(bno->hi2cx, bno->address, OPR_MODE, 1, &bno->mode, 1, 10);
 8009d26:	687b      	ldr	r3, [r7, #4]
 8009d28:	6818      	ldr	r0, [r3, #0]
 8009d2a:	687b      	ldr	r3, [r7, #4]
 8009d2c:	791b      	ldrb	r3, [r3, #4]
 8009d2e:	4619      	mov	r1, r3
 8009d30:	687b      	ldr	r3, [r7, #4]
 8009d32:	3305      	adds	r3, #5
 8009d34:	220a      	movs	r2, #10
 8009d36:	9202      	str	r2, [sp, #8]
 8009d38:	2201      	movs	r2, #1
 8009d3a:	9201      	str	r2, [sp, #4]
 8009d3c:	9300      	str	r3, [sp, #0]
 8009d3e:	2301      	movs	r3, #1
 8009d40:	223d      	movs	r2, #61	@ 0x3d
 8009d42:	f7f9 feb9 	bl	8003ab8 <HAL_I2C_Mem_Write>
	}

	const double scale = (1.0 / (1 << 14));
 8009d46:	f04f 0200 	mov.w	r2, #0
 8009d4a:	4bc3      	ldr	r3, [pc, #780]	@ (800a058 <BNO055_Read_DMA+0x368>)
 8009d4c:	e9c7 2304 	strd	r2, r3, [r7, #16]

	bno->accel.x = ((double) bno->DataBuffer[0].i16) / 100.0;
 8009d50:	687b      	ldr	r3, [r7, #4]
 8009d52:	f9b3 30b8 	ldrsh.w	r3, [r3, #184]	@ 0xb8
 8009d56:	4618      	mov	r0, r3
 8009d58:	f7f6 fbf4 	bl	8000544 <__aeabi_i2d>
 8009d5c:	f04f 0200 	mov.w	r2, #0
 8009d60:	4bbe      	ldr	r3, [pc, #760]	@ (800a05c <BNO055_Read_DMA+0x36c>)
 8009d62:	f7f6 fd83 	bl	800086c <__aeabi_ddiv>
 8009d66:	4602      	mov	r2, r0
 8009d68:	460b      	mov	r3, r1
 8009d6a:	6879      	ldr	r1, [r7, #4]
 8009d6c:	e9c1 2302 	strd	r2, r3, [r1, #8]
	bno->accel.y = ((double) bno->DataBuffer[1].i16) / 100.0;
 8009d70:	687b      	ldr	r3, [r7, #4]
 8009d72:	f9b3 30ba 	ldrsh.w	r3, [r3, #186]	@ 0xba
 8009d76:	4618      	mov	r0, r3
 8009d78:	f7f6 fbe4 	bl	8000544 <__aeabi_i2d>
 8009d7c:	f04f 0200 	mov.w	r2, #0
 8009d80:	4bb6      	ldr	r3, [pc, #728]	@ (800a05c <BNO055_Read_DMA+0x36c>)
 8009d82:	f7f6 fd73 	bl	800086c <__aeabi_ddiv>
 8009d86:	4602      	mov	r2, r0
 8009d88:	460b      	mov	r3, r1
 8009d8a:	6879      	ldr	r1, [r7, #4]
 8009d8c:	e9c1 2304 	strd	r2, r3, [r1, #16]
	bno->accel.z = ((double) bno->DataBuffer[2].i16) / 100.0;
 8009d90:	687b      	ldr	r3, [r7, #4]
 8009d92:	f9b3 30bc 	ldrsh.w	r3, [r3, #188]	@ 0xbc
 8009d96:	4618      	mov	r0, r3
 8009d98:	f7f6 fbd4 	bl	8000544 <__aeabi_i2d>
 8009d9c:	f04f 0200 	mov.w	r2, #0
 8009da0:	4bae      	ldr	r3, [pc, #696]	@ (800a05c <BNO055_Read_DMA+0x36c>)
 8009da2:	f7f6 fd63 	bl	800086c <__aeabi_ddiv>
 8009da6:	4602      	mov	r2, r0
 8009da8:	460b      	mov	r3, r1
 8009daa:	6879      	ldr	r1, [r7, #4]
 8009dac:	e9c1 2306 	strd	r2, r3, [r1, #24]

	bno->mag.x = ((double) bno->DataBuffer[3].i16) / 16.0;
 8009db0:	687b      	ldr	r3, [r7, #4]
 8009db2:	f9b3 30be 	ldrsh.w	r3, [r3, #190]	@ 0xbe
 8009db6:	4618      	mov	r0, r3
 8009db8:	f7f6 fbc4 	bl	8000544 <__aeabi_i2d>
 8009dbc:	f04f 0200 	mov.w	r2, #0
 8009dc0:	4ba7      	ldr	r3, [pc, #668]	@ (800a060 <BNO055_Read_DMA+0x370>)
 8009dc2:	f7f6 fd53 	bl	800086c <__aeabi_ddiv>
 8009dc6:	4602      	mov	r2, r0
 8009dc8:	460b      	mov	r3, r1
 8009dca:	6879      	ldr	r1, [r7, #4]
 8009dcc:	e9c1 2308 	strd	r2, r3, [r1, #32]
	bno->mag.y = ((double) bno->DataBuffer[4].i16) / 16.0;
 8009dd0:	687b      	ldr	r3, [r7, #4]
 8009dd2:	f9b3 30c0 	ldrsh.w	r3, [r3, #192]	@ 0xc0
 8009dd6:	4618      	mov	r0, r3
 8009dd8:	f7f6 fbb4 	bl	8000544 <__aeabi_i2d>
 8009ddc:	f04f 0200 	mov.w	r2, #0
 8009de0:	4b9f      	ldr	r3, [pc, #636]	@ (800a060 <BNO055_Read_DMA+0x370>)
 8009de2:	f7f6 fd43 	bl	800086c <__aeabi_ddiv>
 8009de6:	4602      	mov	r2, r0
 8009de8:	460b      	mov	r3, r1
 8009dea:	6879      	ldr	r1, [r7, #4]
 8009dec:	e9c1 230a 	strd	r2, r3, [r1, #40]	@ 0x28
	bno->mag.z = ((double) bno->DataBuffer[5].i16) / 16.0;
 8009df0:	687b      	ldr	r3, [r7, #4]
 8009df2:	f9b3 30c2 	ldrsh.w	r3, [r3, #194]	@ 0xc2
 8009df6:	4618      	mov	r0, r3
 8009df8:	f7f6 fba4 	bl	8000544 <__aeabi_i2d>
 8009dfc:	f04f 0200 	mov.w	r2, #0
 8009e00:	4b97      	ldr	r3, [pc, #604]	@ (800a060 <BNO055_Read_DMA+0x370>)
 8009e02:	f7f6 fd33 	bl	800086c <__aeabi_ddiv>
 8009e06:	4602      	mov	r2, r0
 8009e08:	460b      	mov	r3, r1
 8009e0a:	6879      	ldr	r1, [r7, #4]
 8009e0c:	e9c1 230c 	strd	r2, r3, [r1, #48]	@ 0x30

	bno->gyro.x = ((double) bno->DataBuffer[6].i16) * M_PI / (16.0 * 180.0);
 8009e10:	687b      	ldr	r3, [r7, #4]
 8009e12:	f9b3 30c4 	ldrsh.w	r3, [r3, #196]	@ 0xc4
 8009e16:	4618      	mov	r0, r3
 8009e18:	f7f6 fb94 	bl	8000544 <__aeabi_i2d>
 8009e1c:	a38c      	add	r3, pc, #560	@ (adr r3, 800a050 <BNO055_Read_DMA+0x360>)
 8009e1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e22:	f7f6 fbf9 	bl	8000618 <__aeabi_dmul>
 8009e26:	4602      	mov	r2, r0
 8009e28:	460b      	mov	r3, r1
 8009e2a:	4610      	mov	r0, r2
 8009e2c:	4619      	mov	r1, r3
 8009e2e:	f04f 0200 	mov.w	r2, #0
 8009e32:	4b8c      	ldr	r3, [pc, #560]	@ (800a064 <BNO055_Read_DMA+0x374>)
 8009e34:	f7f6 fd1a 	bl	800086c <__aeabi_ddiv>
 8009e38:	4602      	mov	r2, r0
 8009e3a:	460b      	mov	r3, r1
 8009e3c:	6879      	ldr	r1, [r7, #4]
 8009e3e:	e9c1 230e 	strd	r2, r3, [r1, #56]	@ 0x38
	bno->gyro.y = ((double) bno->DataBuffer[7].i16) * M_PI / (16.0 * 180.0);
 8009e42:	687b      	ldr	r3, [r7, #4]
 8009e44:	f9b3 30c6 	ldrsh.w	r3, [r3, #198]	@ 0xc6
 8009e48:	4618      	mov	r0, r3
 8009e4a:	f7f6 fb7b 	bl	8000544 <__aeabi_i2d>
 8009e4e:	a380      	add	r3, pc, #512	@ (adr r3, 800a050 <BNO055_Read_DMA+0x360>)
 8009e50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e54:	f7f6 fbe0 	bl	8000618 <__aeabi_dmul>
 8009e58:	4602      	mov	r2, r0
 8009e5a:	460b      	mov	r3, r1
 8009e5c:	4610      	mov	r0, r2
 8009e5e:	4619      	mov	r1, r3
 8009e60:	f04f 0200 	mov.w	r2, #0
 8009e64:	4b7f      	ldr	r3, [pc, #508]	@ (800a064 <BNO055_Read_DMA+0x374>)
 8009e66:	f7f6 fd01 	bl	800086c <__aeabi_ddiv>
 8009e6a:	4602      	mov	r2, r0
 8009e6c:	460b      	mov	r3, r1
 8009e6e:	6879      	ldr	r1, [r7, #4]
 8009e70:	e9c1 2310 	strd	r2, r3, [r1, #64]	@ 0x40
	bno->gyro.z = ((double) bno->DataBuffer[8].i16) * M_PI / (16.0 * 180.0);
 8009e74:	687b      	ldr	r3, [r7, #4]
 8009e76:	f9b3 30c8 	ldrsh.w	r3, [r3, #200]	@ 0xc8
 8009e7a:	4618      	mov	r0, r3
 8009e7c:	f7f6 fb62 	bl	8000544 <__aeabi_i2d>
 8009e80:	a373      	add	r3, pc, #460	@ (adr r3, 800a050 <BNO055_Read_DMA+0x360>)
 8009e82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e86:	f7f6 fbc7 	bl	8000618 <__aeabi_dmul>
 8009e8a:	4602      	mov	r2, r0
 8009e8c:	460b      	mov	r3, r1
 8009e8e:	4610      	mov	r0, r2
 8009e90:	4619      	mov	r1, r3
 8009e92:	f04f 0200 	mov.w	r2, #0
 8009e96:	4b73      	ldr	r3, [pc, #460]	@ (800a064 <BNO055_Read_DMA+0x374>)
 8009e98:	f7f6 fce8 	bl	800086c <__aeabi_ddiv>
 8009e9c:	4602      	mov	r2, r0
 8009e9e:	460b      	mov	r3, r1
 8009ea0:	6879      	ldr	r1, [r7, #4]
 8009ea2:	e9c1 2312 	strd	r2, r3, [r1, #72]	@ 0x48

	bno->euler.yaw = ((double) bno->DataBuffer[9].i16) * M_PI / (16.0 * 180.0);
 8009ea6:	687b      	ldr	r3, [r7, #4]
 8009ea8:	f9b3 30ca 	ldrsh.w	r3, [r3, #202]	@ 0xca
 8009eac:	4618      	mov	r0, r3
 8009eae:	f7f6 fb49 	bl	8000544 <__aeabi_i2d>
 8009eb2:	a367      	add	r3, pc, #412	@ (adr r3, 800a050 <BNO055_Read_DMA+0x360>)
 8009eb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009eb8:	f7f6 fbae 	bl	8000618 <__aeabi_dmul>
 8009ebc:	4602      	mov	r2, r0
 8009ebe:	460b      	mov	r3, r1
 8009ec0:	4610      	mov	r0, r2
 8009ec2:	4619      	mov	r1, r3
 8009ec4:	f04f 0200 	mov.w	r2, #0
 8009ec8:	4b66      	ldr	r3, [pc, #408]	@ (800a064 <BNO055_Read_DMA+0x374>)
 8009eca:	f7f6 fccf 	bl	800086c <__aeabi_ddiv>
 8009ece:	4602      	mov	r2, r0
 8009ed0:	460b      	mov	r3, r1
 8009ed2:	6879      	ldr	r1, [r7, #4]
 8009ed4:	e9c1 2318 	strd	r2, r3, [r1, #96]	@ 0x60
	bno->euler.roll = ((double) bno->DataBuffer[10].i16) * M_PI / (16.0 * 180.0);
 8009ed8:	687b      	ldr	r3, [r7, #4]
 8009eda:	f9b3 30cc 	ldrsh.w	r3, [r3, #204]	@ 0xcc
 8009ede:	4618      	mov	r0, r3
 8009ee0:	f7f6 fb30 	bl	8000544 <__aeabi_i2d>
 8009ee4:	a35a      	add	r3, pc, #360	@ (adr r3, 800a050 <BNO055_Read_DMA+0x360>)
 8009ee6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009eea:	f7f6 fb95 	bl	8000618 <__aeabi_dmul>
 8009eee:	4602      	mov	r2, r0
 8009ef0:	460b      	mov	r3, r1
 8009ef2:	4610      	mov	r0, r2
 8009ef4:	4619      	mov	r1, r3
 8009ef6:	f04f 0200 	mov.w	r2, #0
 8009efa:	4b5a      	ldr	r3, [pc, #360]	@ (800a064 <BNO055_Read_DMA+0x374>)
 8009efc:	f7f6 fcb6 	bl	800086c <__aeabi_ddiv>
 8009f00:	4602      	mov	r2, r0
 8009f02:	460b      	mov	r3, r1
 8009f04:	6879      	ldr	r1, [r7, #4]
 8009f06:	e9c1 2314 	strd	r2, r3, [r1, #80]	@ 0x50
	bno->euler.pitch = ((double) bno->DataBuffer[11].i16) * M_PI / (16.0 * 180.0);
 8009f0a:	687b      	ldr	r3, [r7, #4]
 8009f0c:	f9b3 30ce 	ldrsh.w	r3, [r3, #206]	@ 0xce
 8009f10:	4618      	mov	r0, r3
 8009f12:	f7f6 fb17 	bl	8000544 <__aeabi_i2d>
 8009f16:	a34e      	add	r3, pc, #312	@ (adr r3, 800a050 <BNO055_Read_DMA+0x360>)
 8009f18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f1c:	f7f6 fb7c 	bl	8000618 <__aeabi_dmul>
 8009f20:	4602      	mov	r2, r0
 8009f22:	460b      	mov	r3, r1
 8009f24:	4610      	mov	r0, r2
 8009f26:	4619      	mov	r1, r3
 8009f28:	f04f 0200 	mov.w	r2, #0
 8009f2c:	4b4d      	ldr	r3, [pc, #308]	@ (800a064 <BNO055_Read_DMA+0x374>)
 8009f2e:	f7f6 fc9d 	bl	800086c <__aeabi_ddiv>
 8009f32:	4602      	mov	r2, r0
 8009f34:	460b      	mov	r3, r1
 8009f36:	6879      	ldr	r1, [r7, #4]
 8009f38:	e9c1 2316 	strd	r2, r3, [r1, #88]	@ 0x58

	bno->quat.w = bno->DataBuffer[12].i16 * scale;
 8009f3c:	687b      	ldr	r3, [r7, #4]
 8009f3e:	f9b3 30d0 	ldrsh.w	r3, [r3, #208]	@ 0xd0
 8009f42:	4618      	mov	r0, r3
 8009f44:	f7f6 fafe 	bl	8000544 <__aeabi_i2d>
 8009f48:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8009f4c:	f7f6 fb64 	bl	8000618 <__aeabi_dmul>
 8009f50:	4602      	mov	r2, r0
 8009f52:	460b      	mov	r3, r1
 8009f54:	6879      	ldr	r1, [r7, #4]
 8009f56:	e9c1 2320 	strd	r2, r3, [r1, #128]	@ 0x80
	bno->quat.x = bno->DataBuffer[13].i16 * scale;
 8009f5a:	687b      	ldr	r3, [r7, #4]
 8009f5c:	f9b3 30d2 	ldrsh.w	r3, [r3, #210]	@ 0xd2
 8009f60:	4618      	mov	r0, r3
 8009f62:	f7f6 faef 	bl	8000544 <__aeabi_i2d>
 8009f66:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8009f6a:	f7f6 fb55 	bl	8000618 <__aeabi_dmul>
 8009f6e:	4602      	mov	r2, r0
 8009f70:	460b      	mov	r3, r1
 8009f72:	6879      	ldr	r1, [r7, #4]
 8009f74:	e9c1 231a 	strd	r2, r3, [r1, #104]	@ 0x68
	bno->quat.y = bno->DataBuffer[14].i16 * scale;
 8009f78:	687b      	ldr	r3, [r7, #4]
 8009f7a:	f9b3 30d4 	ldrsh.w	r3, [r3, #212]	@ 0xd4
 8009f7e:	4618      	mov	r0, r3
 8009f80:	f7f6 fae0 	bl	8000544 <__aeabi_i2d>
 8009f84:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8009f88:	f7f6 fb46 	bl	8000618 <__aeabi_dmul>
 8009f8c:	4602      	mov	r2, r0
 8009f8e:	460b      	mov	r3, r1
 8009f90:	6879      	ldr	r1, [r7, #4]
 8009f92:	e9c1 231c 	strd	r2, r3, [r1, #112]	@ 0x70
	bno->quat.z = bno->DataBuffer[15].i16 * scale;
 8009f96:	687b      	ldr	r3, [r7, #4]
 8009f98:	f9b3 30d6 	ldrsh.w	r3, [r3, #214]	@ 0xd6
 8009f9c:	4618      	mov	r0, r3
 8009f9e:	f7f6 fad1 	bl	8000544 <__aeabi_i2d>
 8009fa2:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8009fa6:	f7f6 fb37 	bl	8000618 <__aeabi_dmul>
 8009faa:	4602      	mov	r2, r0
 8009fac:	460b      	mov	r3, r1
 8009fae:	6879      	ldr	r1, [r7, #4]
 8009fb0:	e9c1 231e 	strd	r2, r3, [r1, #120]	@ 0x78

	if (!fast_mode) {
 8009fb4:	78fb      	ldrb	r3, [r7, #3]
 8009fb6:	2b00      	cmp	r3, #0
 8009fb8:	d17d      	bne.n	800a0b6 <BNO055_Read_DMA+0x3c6>

		bno->lin_acc.x = ((double) bno->DataBuffer[16].i16) / 100.0;
 8009fba:	687b      	ldr	r3, [r7, #4]
 8009fbc:	f9b3 30d8 	ldrsh.w	r3, [r3, #216]	@ 0xd8
 8009fc0:	4618      	mov	r0, r3
 8009fc2:	f7f6 fabf 	bl	8000544 <__aeabi_i2d>
 8009fc6:	f04f 0200 	mov.w	r2, #0
 8009fca:	4b24      	ldr	r3, [pc, #144]	@ (800a05c <BNO055_Read_DMA+0x36c>)
 8009fcc:	f7f6 fc4e 	bl	800086c <__aeabi_ddiv>
 8009fd0:	4602      	mov	r2, r0
 8009fd2:	460b      	mov	r3, r1
 8009fd4:	6879      	ldr	r1, [r7, #4]
 8009fd6:	e9c1 2322 	strd	r2, r3, [r1, #136]	@ 0x88
		bno->lin_acc.y = ((double) bno->DataBuffer[17].i16) / 100.0;
 8009fda:	687b      	ldr	r3, [r7, #4]
 8009fdc:	f9b3 30da 	ldrsh.w	r3, [r3, #218]	@ 0xda
 8009fe0:	4618      	mov	r0, r3
 8009fe2:	f7f6 faaf 	bl	8000544 <__aeabi_i2d>
 8009fe6:	f04f 0200 	mov.w	r2, #0
 8009fea:	4b1c      	ldr	r3, [pc, #112]	@ (800a05c <BNO055_Read_DMA+0x36c>)
 8009fec:	f7f6 fc3e 	bl	800086c <__aeabi_ddiv>
 8009ff0:	4602      	mov	r2, r0
 8009ff2:	460b      	mov	r3, r1
 8009ff4:	6879      	ldr	r1, [r7, #4]
 8009ff6:	e9c1 2324 	strd	r2, r3, [r1, #144]	@ 0x90
		bno->lin_acc.z = ((double) bno->DataBuffer[18].i16) / 100.0;
 8009ffa:	687b      	ldr	r3, [r7, #4]
 8009ffc:	f9b3 30dc 	ldrsh.w	r3, [r3, #220]	@ 0xdc
 800a000:	4618      	mov	r0, r3
 800a002:	f7f6 fa9f 	bl	8000544 <__aeabi_i2d>
 800a006:	f04f 0200 	mov.w	r2, #0
 800a00a:	4b14      	ldr	r3, [pc, #80]	@ (800a05c <BNO055_Read_DMA+0x36c>)
 800a00c:	f7f6 fc2e 	bl	800086c <__aeabi_ddiv>
 800a010:	4602      	mov	r2, r0
 800a012:	460b      	mov	r3, r1
 800a014:	6879      	ldr	r1, [r7, #4]
 800a016:	e9c1 2326 	strd	r2, r3, [r1, #152]	@ 0x98

		bno->grav.x = ((double) bno->DataBuffer[19].i16) / 100.0;
 800a01a:	687b      	ldr	r3, [r7, #4]
 800a01c:	f9b3 30de 	ldrsh.w	r3, [r3, #222]	@ 0xde
 800a020:	4618      	mov	r0, r3
 800a022:	f7f6 fa8f 	bl	8000544 <__aeabi_i2d>
 800a026:	f04f 0200 	mov.w	r2, #0
 800a02a:	4b0c      	ldr	r3, [pc, #48]	@ (800a05c <BNO055_Read_DMA+0x36c>)
 800a02c:	f7f6 fc1e 	bl	800086c <__aeabi_ddiv>
 800a030:	4602      	mov	r2, r0
 800a032:	460b      	mov	r3, r1
 800a034:	6879      	ldr	r1, [r7, #4]
 800a036:	e9c1 2328 	strd	r2, r3, [r1, #160]	@ 0xa0
		bno->grav.y = ((double) bno->DataBuffer[20].i16) / 100.0;
 800a03a:	687b      	ldr	r3, [r7, #4]
 800a03c:	f9b3 30e0 	ldrsh.w	r3, [r3, #224]	@ 0xe0
 800a040:	4618      	mov	r0, r3
 800a042:	f7f6 fa7f 	bl	8000544 <__aeabi_i2d>
 800a046:	f04f 0200 	mov.w	r2, #0
 800a04a:	e00d      	b.n	800a068 <BNO055_Read_DMA+0x378>
 800a04c:	f3af 8000 	nop.w
 800a050:	54442d18 	.word	0x54442d18
 800a054:	400921fb 	.word	0x400921fb
 800a058:	3f100000 	.word	0x3f100000
 800a05c:	40590000 	.word	0x40590000
 800a060:	40300000 	.word	0x40300000
 800a064:	40a68000 	.word	0x40a68000
 800a068:	4b1c      	ldr	r3, [pc, #112]	@ (800a0dc <BNO055_Read_DMA+0x3ec>)
 800a06a:	f7f6 fbff 	bl	800086c <__aeabi_ddiv>
 800a06e:	4602      	mov	r2, r0
 800a070:	460b      	mov	r3, r1
 800a072:	6879      	ldr	r1, [r7, #4]
 800a074:	e9c1 232a 	strd	r2, r3, [r1, #168]	@ 0xa8
		bno->grav.z = ((double) bno->DataBuffer[21].i16) / 100.0;
 800a078:	687b      	ldr	r3, [r7, #4]
 800a07a:	f9b3 30e2 	ldrsh.w	r3, [r3, #226]	@ 0xe2
 800a07e:	4618      	mov	r0, r3
 800a080:	f7f6 fa60 	bl	8000544 <__aeabi_i2d>
 800a084:	f04f 0200 	mov.w	r2, #0
 800a088:	4b14      	ldr	r3, [pc, #80]	@ (800a0dc <BNO055_Read_DMA+0x3ec>)
 800a08a:	f7f6 fbef 	bl	800086c <__aeabi_ddiv>
 800a08e:	4602      	mov	r2, r0
 800a090:	460b      	mov	r3, r1
 800a092:	6879      	ldr	r1, [r7, #4]
 800a094:	e9c1 232c 	strd	r2, r3, [r1, #176]	@ 0xb0

		HAL_I2C_Mem_Read_DMA(bno->hi2cx, bno->address, ACC_DATA_X_LSB, 1, bno->DataBuffer->u8, 44);
 800a098:	687b      	ldr	r3, [r7, #4]
 800a09a:	6818      	ldr	r0, [r3, #0]
 800a09c:	687b      	ldr	r3, [r7, #4]
 800a09e:	791b      	ldrb	r3, [r3, #4]
 800a0a0:	4619      	mov	r1, r3
 800a0a2:	687b      	ldr	r3, [r7, #4]
 800a0a4:	33b8      	adds	r3, #184	@ 0xb8
 800a0a6:	222c      	movs	r2, #44	@ 0x2c
 800a0a8:	9201      	str	r2, [sp, #4]
 800a0aa:	9300      	str	r3, [sp, #0]
 800a0ac:	2301      	movs	r3, #1
 800a0ae:	2208      	movs	r2, #8
 800a0b0:	f7f9 ff30 	bl	8003f14 <HAL_I2C_Mem_Read_DMA>
	} else {
		HAL_I2C_Mem_Read_DMA(bno->hi2cx, bno->address, ACC_DATA_X_LSB, 1, bno->DataBuffer->u8, 32);
	}
}
 800a0b4:	e00d      	b.n	800a0d2 <BNO055_Read_DMA+0x3e2>
		HAL_I2C_Mem_Read_DMA(bno->hi2cx, bno->address, ACC_DATA_X_LSB, 1, bno->DataBuffer->u8, 32);
 800a0b6:	687b      	ldr	r3, [r7, #4]
 800a0b8:	6818      	ldr	r0, [r3, #0]
 800a0ba:	687b      	ldr	r3, [r7, #4]
 800a0bc:	791b      	ldrb	r3, [r3, #4]
 800a0be:	4619      	mov	r1, r3
 800a0c0:	687b      	ldr	r3, [r7, #4]
 800a0c2:	33b8      	adds	r3, #184	@ 0xb8
 800a0c4:	2220      	movs	r2, #32
 800a0c6:	9201      	str	r2, [sp, #4]
 800a0c8:	9300      	str	r3, [sp, #0]
 800a0ca:	2301      	movs	r3, #1
 800a0cc:	2208      	movs	r2, #8
 800a0ce:	f7f9 ff21 	bl	8003f14 <HAL_I2C_Mem_Read_DMA>
}
 800a0d2:	bf00      	nop
 800a0d4:	3718      	adds	r7, #24
 800a0d6:	46bd      	mov	sp, r7
 800a0d8:	bd80      	pop	{r7, pc}
 800a0da:	bf00      	nop
 800a0dc:	40590000 	.word	0x40590000

0800a0e0 <BNO055_SetOffsets>:
		HAL_Delay(20);
	}
}

void BNO055_SetOffsets(BNO055_Structure *bno, BNO055_Offsets *bno_offset)
{
 800a0e0:	b580      	push	{r7, lr}
 800a0e2:	b08e      	sub	sp, #56	@ 0x38
 800a0e4:	af04      	add	r7, sp, #16
 800a0e6:	6078      	str	r0, [r7, #4]
 800a0e8:	6039      	str	r1, [r7, #0]
	uint8_t read_mode;
	HAL_I2C_Mem_Read(bno->hi2cx, bno->address, OPR_MODE, 1, &read_mode, 1, 10);
 800a0ea:	687b      	ldr	r3, [r7, #4]
 800a0ec:	6818      	ldr	r0, [r3, #0]
 800a0ee:	687b      	ldr	r3, [r7, #4]
 800a0f0:	791b      	ldrb	r3, [r3, #4]
 800a0f2:	4619      	mov	r1, r3
 800a0f4:	230a      	movs	r3, #10
 800a0f6:	9302      	str	r3, [sp, #8]
 800a0f8:	2301      	movs	r3, #1
 800a0fa:	9301      	str	r3, [sp, #4]
 800a0fc:	f107 0327 	add.w	r3, r7, #39	@ 0x27
 800a100:	9300      	str	r3, [sp, #0]
 800a102:	2301      	movs	r3, #1
 800a104:	223d      	movs	r2, #61	@ 0x3d
 800a106:	f7f9 fdeb 	bl	8003ce0 <HAL_I2C_Mem_Read>
	if (read_mode != CONFIGMODE) {
 800a10a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800a10e:	2b00      	cmp	r3, #0
 800a110:	d014      	beq.n	800a13c <BNO055_SetOffsets+0x5c>
		uint8_t txbuffer = CONFIGMODE;
 800a112:	2300      	movs	r3, #0
 800a114:	73fb      	strb	r3, [r7, #15]
		HAL_I2C_Mem_Write(bno->hi2cx, bno->address, OPR_MODE, 1, &txbuffer, 1, 10);
 800a116:	687b      	ldr	r3, [r7, #4]
 800a118:	6818      	ldr	r0, [r3, #0]
 800a11a:	687b      	ldr	r3, [r7, #4]
 800a11c:	791b      	ldrb	r3, [r3, #4]
 800a11e:	4619      	mov	r1, r3
 800a120:	230a      	movs	r3, #10
 800a122:	9302      	str	r3, [sp, #8]
 800a124:	2301      	movs	r3, #1
 800a126:	9301      	str	r3, [sp, #4]
 800a128:	f107 030f 	add.w	r3, r7, #15
 800a12c:	9300      	str	r3, [sp, #0]
 800a12e:	2301      	movs	r3, #1
 800a130:	223d      	movs	r2, #61	@ 0x3d
 800a132:	f7f9 fcc1 	bl	8003ab8 <HAL_I2C_Mem_Write>
		HAL_Delay(20);
 800a136:	2014      	movs	r0, #20
 800a138:	f7f8 ff0a 	bl	8002f50 <HAL_Delay>
	}

	uint8_t txbuffer[22];
	txbuffer[0] = bno_offset->accel_offset_x.u8[0];
 800a13c:	683b      	ldr	r3, [r7, #0]
 800a13e:	781b      	ldrb	r3, [r3, #0]
 800a140:	743b      	strb	r3, [r7, #16]
	txbuffer[1] = bno_offset->accel_offset_x.u8[1];
 800a142:	683b      	ldr	r3, [r7, #0]
 800a144:	785b      	ldrb	r3, [r3, #1]
 800a146:	747b      	strb	r3, [r7, #17]
	txbuffer[2] = bno_offset->accel_offset_y.u8[0];
 800a148:	683b      	ldr	r3, [r7, #0]
 800a14a:	789b      	ldrb	r3, [r3, #2]
 800a14c:	74bb      	strb	r3, [r7, #18]
	txbuffer[3] = bno_offset->accel_offset_y.u8[1];
 800a14e:	683b      	ldr	r3, [r7, #0]
 800a150:	78db      	ldrb	r3, [r3, #3]
 800a152:	74fb      	strb	r3, [r7, #19]
	txbuffer[4] = bno_offset->accel_offset_z.u8[0];
 800a154:	683b      	ldr	r3, [r7, #0]
 800a156:	791b      	ldrb	r3, [r3, #4]
 800a158:	753b      	strb	r3, [r7, #20]
	txbuffer[5] = bno_offset->accel_offset_z.u8[1];
 800a15a:	683b      	ldr	r3, [r7, #0]
 800a15c:	795b      	ldrb	r3, [r3, #5]
 800a15e:	757b      	strb	r3, [r7, #21]
	txbuffer[6] = bno_offset->mag_offset_x.u8[0];
 800a160:	683b      	ldr	r3, [r7, #0]
 800a162:	799b      	ldrb	r3, [r3, #6]
 800a164:	75bb      	strb	r3, [r7, #22]
	txbuffer[7] = bno_offset->mag_offset_x.u8[1];
 800a166:	683b      	ldr	r3, [r7, #0]
 800a168:	79db      	ldrb	r3, [r3, #7]
 800a16a:	75fb      	strb	r3, [r7, #23]
	txbuffer[8] = bno_offset->mag_offset_y.u8[0];
 800a16c:	683b      	ldr	r3, [r7, #0]
 800a16e:	7a1b      	ldrb	r3, [r3, #8]
 800a170:	763b      	strb	r3, [r7, #24]
	txbuffer[9] = bno_offset->mag_offset_y.u8[1];
 800a172:	683b      	ldr	r3, [r7, #0]
 800a174:	7a5b      	ldrb	r3, [r3, #9]
 800a176:	767b      	strb	r3, [r7, #25]
	txbuffer[10] = bno_offset->mag_offset_z.u8[0];
 800a178:	683b      	ldr	r3, [r7, #0]
 800a17a:	7a9b      	ldrb	r3, [r3, #10]
 800a17c:	76bb      	strb	r3, [r7, #26]
	txbuffer[11] = bno_offset->mag_offset_z.u8[1];
 800a17e:	683b      	ldr	r3, [r7, #0]
 800a180:	7adb      	ldrb	r3, [r3, #11]
 800a182:	76fb      	strb	r3, [r7, #27]
	txbuffer[12] = bno_offset->gyro_offset_x.u8[0];
 800a184:	683b      	ldr	r3, [r7, #0]
 800a186:	7b1b      	ldrb	r3, [r3, #12]
 800a188:	773b      	strb	r3, [r7, #28]
	txbuffer[13] = bno_offset->gyro_offset_x.u8[1];
 800a18a:	683b      	ldr	r3, [r7, #0]
 800a18c:	7b5b      	ldrb	r3, [r3, #13]
 800a18e:	777b      	strb	r3, [r7, #29]
	txbuffer[14] = bno_offset->gyro_offset_y.u8[0];
 800a190:	683b      	ldr	r3, [r7, #0]
 800a192:	7b9b      	ldrb	r3, [r3, #14]
 800a194:	77bb      	strb	r3, [r7, #30]
	txbuffer[15] = bno_offset->gyro_offset_y.u8[1];
 800a196:	683b      	ldr	r3, [r7, #0]
 800a198:	7bdb      	ldrb	r3, [r3, #15]
 800a19a:	77fb      	strb	r3, [r7, #31]
	txbuffer[16] = bno_offset->gyro_offset_z.u8[0];
 800a19c:	683b      	ldr	r3, [r7, #0]
 800a19e:	7c1b      	ldrb	r3, [r3, #16]
 800a1a0:	f887 3020 	strb.w	r3, [r7, #32]
	txbuffer[17] = bno_offset->gyro_offset_z.u8[1];
 800a1a4:	683b      	ldr	r3, [r7, #0]
 800a1a6:	7c5b      	ldrb	r3, [r3, #17]
 800a1a8:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
	txbuffer[18] = bno_offset->accel_radius.u8[0];
 800a1ac:	683b      	ldr	r3, [r7, #0]
 800a1ae:	7c9b      	ldrb	r3, [r3, #18]
 800a1b0:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
	txbuffer[19] = bno_offset->accel_radius.u8[1];
 800a1b4:	683b      	ldr	r3, [r7, #0]
 800a1b6:	7cdb      	ldrb	r3, [r3, #19]
 800a1b8:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
	txbuffer[20] = bno_offset->mag_radius.u8[0];
 800a1bc:	683b      	ldr	r3, [r7, #0]
 800a1be:	7d1b      	ldrb	r3, [r3, #20]
 800a1c0:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
	txbuffer[21] = bno_offset->mag_radius.u8[1];
 800a1c4:	683b      	ldr	r3, [r7, #0]
 800a1c6:	7d5b      	ldrb	r3, [r3, #21]
 800a1c8:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25

	HAL_I2C_Mem_Write(bno->hi2cx, bno->address, ACC_OFFSET_X_LSB, 1, txbuffer, 22, 10);
 800a1cc:	687b      	ldr	r3, [r7, #4]
 800a1ce:	6818      	ldr	r0, [r3, #0]
 800a1d0:	687b      	ldr	r3, [r7, #4]
 800a1d2:	791b      	ldrb	r3, [r3, #4]
 800a1d4:	4619      	mov	r1, r3
 800a1d6:	230a      	movs	r3, #10
 800a1d8:	9302      	str	r3, [sp, #8]
 800a1da:	2316      	movs	r3, #22
 800a1dc:	9301      	str	r3, [sp, #4]
 800a1de:	f107 0310 	add.w	r3, r7, #16
 800a1e2:	9300      	str	r3, [sp, #0]
 800a1e4:	2301      	movs	r3, #1
 800a1e6:	2255      	movs	r2, #85	@ 0x55
 800a1e8:	f7f9 fc66 	bl	8003ab8 <HAL_I2C_Mem_Write>

	HAL_I2C_Mem_Read(bno->hi2cx, bno->address, OPR_MODE, 1, &read_mode, 1, 10);
 800a1ec:	687b      	ldr	r3, [r7, #4]
 800a1ee:	6818      	ldr	r0, [r3, #0]
 800a1f0:	687b      	ldr	r3, [r7, #4]
 800a1f2:	791b      	ldrb	r3, [r3, #4]
 800a1f4:	4619      	mov	r1, r3
 800a1f6:	230a      	movs	r3, #10
 800a1f8:	9302      	str	r3, [sp, #8]
 800a1fa:	2301      	movs	r3, #1
 800a1fc:	9301      	str	r3, [sp, #4]
 800a1fe:	f107 0327 	add.w	r3, r7, #39	@ 0x27
 800a202:	9300      	str	r3, [sp, #0]
 800a204:	2301      	movs	r3, #1
 800a206:	223d      	movs	r2, #61	@ 0x3d
 800a208:	f7f9 fd6a 	bl	8003ce0 <HAL_I2C_Mem_Read>
	if (read_mode != bno->mode) {
 800a20c:	687b      	ldr	r3, [r7, #4]
 800a20e:	795a      	ldrb	r2, [r3, #5]
 800a210:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800a214:	429a      	cmp	r2, r3
 800a216:	d012      	beq.n	800a23e <BNO055_SetOffsets+0x15e>
		HAL_I2C_Mem_Write(bno->hi2cx, bno->address, OPR_MODE, 1, &bno->mode, 1, 10);
 800a218:	687b      	ldr	r3, [r7, #4]
 800a21a:	6818      	ldr	r0, [r3, #0]
 800a21c:	687b      	ldr	r3, [r7, #4]
 800a21e:	791b      	ldrb	r3, [r3, #4]
 800a220:	4619      	mov	r1, r3
 800a222:	687b      	ldr	r3, [r7, #4]
 800a224:	3305      	adds	r3, #5
 800a226:	220a      	movs	r2, #10
 800a228:	9202      	str	r2, [sp, #8]
 800a22a:	2201      	movs	r2, #1
 800a22c:	9201      	str	r2, [sp, #4]
 800a22e:	9300      	str	r3, [sp, #0]
 800a230:	2301      	movs	r3, #1
 800a232:	223d      	movs	r2, #61	@ 0x3d
 800a234:	f7f9 fc40 	bl	8003ab8 <HAL_I2C_Mem_Write>
		HAL_Delay(20);
 800a238:	2014      	movs	r0, #20
 800a23a:	f7f8 fe89 	bl	8002f50 <HAL_Delay>
	}
}
 800a23e:	bf00      	nop
 800a240:	3728      	adds	r7, #40	@ 0x28
 800a242:	46bd      	mov	sp, r7
 800a244:	bd80      	pop	{r7, pc}

0800a246 <BNO055_SetAxis>:

void BNO055_SetAxis(BNO055_Structure *bno, Remap_Config config, Remap_Sign sign)
{
 800a246:	b580      	push	{r7, lr}
 800a248:	b088      	sub	sp, #32
 800a24a:	af04      	add	r7, sp, #16
 800a24c:	6078      	str	r0, [r7, #4]
 800a24e:	460b      	mov	r3, r1
 800a250:	70fb      	strb	r3, [r7, #3]
 800a252:	4613      	mov	r3, r2
 800a254:	70bb      	strb	r3, [r7, #2]
	uint8_t read_mode;
	HAL_I2C_Mem_Read(bno->hi2cx, bno->address, OPR_MODE, 1, &read_mode, 1, 10);
 800a256:	687b      	ldr	r3, [r7, #4]
 800a258:	6818      	ldr	r0, [r3, #0]
 800a25a:	687b      	ldr	r3, [r7, #4]
 800a25c:	791b      	ldrb	r3, [r3, #4]
 800a25e:	4619      	mov	r1, r3
 800a260:	230a      	movs	r3, #10
 800a262:	9302      	str	r3, [sp, #8]
 800a264:	2301      	movs	r3, #1
 800a266:	9301      	str	r3, [sp, #4]
 800a268:	f107 030f 	add.w	r3, r7, #15
 800a26c:	9300      	str	r3, [sp, #0]
 800a26e:	2301      	movs	r3, #1
 800a270:	223d      	movs	r2, #61	@ 0x3d
 800a272:	f7f9 fd35 	bl	8003ce0 <HAL_I2C_Mem_Read>
	if (read_mode != CONFIGMODE) {
 800a276:	7bfb      	ldrb	r3, [r7, #15]
 800a278:	2b00      	cmp	r3, #0
 800a27a:	d014      	beq.n	800a2a6 <BNO055_SetAxis+0x60>
		uint8_t txbuffer = CONFIGMODE;
 800a27c:	2300      	movs	r3, #0
 800a27e:	737b      	strb	r3, [r7, #13]
		HAL_I2C_Mem_Write(bno->hi2cx, bno->address, OPR_MODE, 1, &txbuffer, 1, 10);
 800a280:	687b      	ldr	r3, [r7, #4]
 800a282:	6818      	ldr	r0, [r3, #0]
 800a284:	687b      	ldr	r3, [r7, #4]
 800a286:	791b      	ldrb	r3, [r3, #4]
 800a288:	4619      	mov	r1, r3
 800a28a:	230a      	movs	r3, #10
 800a28c:	9302      	str	r3, [sp, #8]
 800a28e:	2301      	movs	r3, #1
 800a290:	9301      	str	r3, [sp, #4]
 800a292:	f107 030d 	add.w	r3, r7, #13
 800a296:	9300      	str	r3, [sp, #0]
 800a298:	2301      	movs	r3, #1
 800a29a:	223d      	movs	r2, #61	@ 0x3d
 800a29c:	f7f9 fc0c 	bl	8003ab8 <HAL_I2C_Mem_Write>
		HAL_Delay(20);
 800a2a0:	2014      	movs	r0, #20
 800a2a2:	f7f8 fe55 	bl	8002f50 <HAL_Delay>
	}

	uint8_t txbuffer;

	txbuffer = config;
 800a2a6:	78fb      	ldrb	r3, [r7, #3]
 800a2a8:	73bb      	strb	r3, [r7, #14]
	HAL_I2C_Mem_Write(bno->hi2cx, bno->address, AXIS_MAP_CONFIG, 1, &txbuffer, 1, 10);
 800a2aa:	687b      	ldr	r3, [r7, #4]
 800a2ac:	6818      	ldr	r0, [r3, #0]
 800a2ae:	687b      	ldr	r3, [r7, #4]
 800a2b0:	791b      	ldrb	r3, [r3, #4]
 800a2b2:	4619      	mov	r1, r3
 800a2b4:	230a      	movs	r3, #10
 800a2b6:	9302      	str	r3, [sp, #8]
 800a2b8:	2301      	movs	r3, #1
 800a2ba:	9301      	str	r3, [sp, #4]
 800a2bc:	f107 030e 	add.w	r3, r7, #14
 800a2c0:	9300      	str	r3, [sp, #0]
 800a2c2:	2301      	movs	r3, #1
 800a2c4:	2241      	movs	r2, #65	@ 0x41
 800a2c6:	f7f9 fbf7 	bl	8003ab8 <HAL_I2C_Mem_Write>
	HAL_Delay(20);
 800a2ca:	2014      	movs	r0, #20
 800a2cc:	f7f8 fe40 	bl	8002f50 <HAL_Delay>

	txbuffer = sign;
 800a2d0:	78bb      	ldrb	r3, [r7, #2]
 800a2d2:	73bb      	strb	r3, [r7, #14]
	HAL_I2C_Mem_Write(bno->hi2cx, bno->address, AXIS_MAP_SIGN, 1, &txbuffer, 1, 10);
 800a2d4:	687b      	ldr	r3, [r7, #4]
 800a2d6:	6818      	ldr	r0, [r3, #0]
 800a2d8:	687b      	ldr	r3, [r7, #4]
 800a2da:	791b      	ldrb	r3, [r3, #4]
 800a2dc:	4619      	mov	r1, r3
 800a2de:	230a      	movs	r3, #10
 800a2e0:	9302      	str	r3, [sp, #8]
 800a2e2:	2301      	movs	r3, #1
 800a2e4:	9301      	str	r3, [sp, #4]
 800a2e6:	f107 030e 	add.w	r3, r7, #14
 800a2ea:	9300      	str	r3, [sp, #0]
 800a2ec:	2301      	movs	r3, #1
 800a2ee:	2242      	movs	r2, #66	@ 0x42
 800a2f0:	f7f9 fbe2 	bl	8003ab8 <HAL_I2C_Mem_Write>
	HAL_Delay(20);
 800a2f4:	2014      	movs	r0, #20
 800a2f6:	f7f8 fe2b 	bl	8002f50 <HAL_Delay>

	HAL_I2C_Mem_Read(bno->hi2cx, bno->address, OPR_MODE, 1, &read_mode, 1, 10);
 800a2fa:	687b      	ldr	r3, [r7, #4]
 800a2fc:	6818      	ldr	r0, [r3, #0]
 800a2fe:	687b      	ldr	r3, [r7, #4]
 800a300:	791b      	ldrb	r3, [r3, #4]
 800a302:	4619      	mov	r1, r3
 800a304:	230a      	movs	r3, #10
 800a306:	9302      	str	r3, [sp, #8]
 800a308:	2301      	movs	r3, #1
 800a30a:	9301      	str	r3, [sp, #4]
 800a30c:	f107 030f 	add.w	r3, r7, #15
 800a310:	9300      	str	r3, [sp, #0]
 800a312:	2301      	movs	r3, #1
 800a314:	223d      	movs	r2, #61	@ 0x3d
 800a316:	f7f9 fce3 	bl	8003ce0 <HAL_I2C_Mem_Read>
	if (read_mode != bno->mode) {
 800a31a:	687b      	ldr	r3, [r7, #4]
 800a31c:	795a      	ldrb	r2, [r3, #5]
 800a31e:	7bfb      	ldrb	r3, [r7, #15]
 800a320:	429a      	cmp	r2, r3
 800a322:	d012      	beq.n	800a34a <BNO055_SetAxis+0x104>
		HAL_I2C_Mem_Write(bno->hi2cx, bno->address, OPR_MODE, 1, &bno->mode, 1, 10);
 800a324:	687b      	ldr	r3, [r7, #4]
 800a326:	6818      	ldr	r0, [r3, #0]
 800a328:	687b      	ldr	r3, [r7, #4]
 800a32a:	791b      	ldrb	r3, [r3, #4]
 800a32c:	4619      	mov	r1, r3
 800a32e:	687b      	ldr	r3, [r7, #4]
 800a330:	3305      	adds	r3, #5
 800a332:	220a      	movs	r2, #10
 800a334:	9202      	str	r2, [sp, #8]
 800a336:	2201      	movs	r2, #1
 800a338:	9201      	str	r2, [sp, #4]
 800a33a:	9300      	str	r3, [sp, #0]
 800a33c:	2301      	movs	r3, #1
 800a33e:	223d      	movs	r2, #61	@ 0x3d
 800a340:	f7f9 fbba 	bl	8003ab8 <HAL_I2C_Mem_Write>
		HAL_Delay(20);
 800a344:	2014      	movs	r0, #20
 800a346:	f7f8 fe03 	bl	8002f50 <HAL_Delay>
	}
}
 800a34a:	bf00      	nop
 800a34c:	3710      	adds	r7, #16
 800a34e:	46bd      	mov	sp, r7
 800a350:	bd80      	pop	{r7, pc}

0800a352 <PID_CONTROLLER_Init>:
/* USER CODE END SAT */

/* USER CODE BEGIN PID */

void PID_CONTROLLER_Init(PID_Structure *PIDx, float _Kp, float _Ki, float _Kd, float _Umax)
{
 800a352:	b480      	push	{r7}
 800a354:	b087      	sub	sp, #28
 800a356:	af00      	add	r7, sp, #0
 800a358:	6178      	str	r0, [r7, #20]
 800a35a:	ed87 0a04 	vstr	s0, [r7, #16]
 800a35e:	edc7 0a03 	vstr	s1, [r7, #12]
 800a362:	ed87 1a02 	vstr	s2, [r7, #8]
 800a366:	edc7 1a01 	vstr	s3, [r7, #4]
	PIDx->a0 = _Kp + _Ki + _Kd;
 800a36a:	ed97 7a04 	vldr	s14, [r7, #16]
 800a36e:	edd7 7a03 	vldr	s15, [r7, #12]
 800a372:	ee37 7a27 	vadd.f32	s14, s14, s15
 800a376:	edd7 7a02 	vldr	s15, [r7, #8]
 800a37a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a37e:	697b      	ldr	r3, [r7, #20]
 800a380:	edc3 7a00 	vstr	s15, [r3]
	PIDx->a1 = _Kp + (2 * _Kd);
 800a384:	edd7 7a02 	vldr	s15, [r7, #8]
 800a388:	ee37 7aa7 	vadd.f32	s14, s15, s15
 800a38c:	edd7 7a04 	vldr	s15, [r7, #16]
 800a390:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a394:	697b      	ldr	r3, [r7, #20]
 800a396:	edc3 7a01 	vstr	s15, [r3, #4]
	PIDx->a2 = _Kd;
 800a39a:	697b      	ldr	r3, [r7, #20]
 800a39c:	68ba      	ldr	r2, [r7, #8]
 800a39e:	609a      	str	r2, [r3, #8]
	PIDx->ek_1 = 0;
 800a3a0:	697b      	ldr	r3, [r7, #20]
 800a3a2:	f04f 0200 	mov.w	r2, #0
 800a3a6:	60da      	str	r2, [r3, #12]
	PIDx->ek_2 = 0;
 800a3a8:	697b      	ldr	r3, [r7, #20]
 800a3aa:	f04f 0200 	mov.w	r2, #0
 800a3ae:	611a      	str	r2, [r3, #16]
	PIDx->u = 0;
 800a3b0:	697b      	ldr	r3, [r7, #20]
 800a3b2:	f04f 0200 	mov.w	r2, #0
 800a3b6:	615a      	str	r2, [r3, #20]
	PIDx->u_max = _Umax;
 800a3b8:	697b      	ldr	r3, [r7, #20]
 800a3ba:	687a      	ldr	r2, [r7, #4]
 800a3bc:	619a      	str	r2, [r3, #24]
}
 800a3be:	bf00      	nop
 800a3c0:	371c      	adds	r7, #28
 800a3c2:	46bd      	mov	sp, r7
 800a3c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3c8:	4770      	bx	lr

0800a3ca <PID_CONTROLLER_Compute>:

float PID_CONTROLLER_Compute(PID_Structure *PIDx, float ek)
{
 800a3ca:	b580      	push	{r7, lr}
 800a3cc:	ed2d 8b02 	vpush	{d8}
 800a3d0:	b082      	sub	sp, #8
 800a3d2:	af00      	add	r7, sp, #0
 800a3d4:	6078      	str	r0, [r7, #4]
 800a3d6:	ed87 0a00 	vstr	s0, [r7]
	if (!((PIDx->u >= PIDx->u_max && ek > 0) || (PIDx->u <= -1 * PIDx->u_max && ek < 0)))
 800a3da:	687b      	ldr	r3, [r7, #4]
 800a3dc:	ed93 7a05 	vldr	s14, [r3, #20]
 800a3e0:	687b      	ldr	r3, [r7, #4]
 800a3e2:	edd3 7a06 	vldr	s15, [r3, #24]
 800a3e6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800a3ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a3ee:	bfac      	ite	ge
 800a3f0:	2301      	movge	r3, #1
 800a3f2:	2300      	movlt	r3, #0
 800a3f4:	b2db      	uxtb	r3, r3
 800a3f6:	f083 0301 	eor.w	r3, r3, #1
 800a3fa:	b2db      	uxtb	r3, r3
 800a3fc:	2b00      	cmp	r3, #0
 800a3fe:	d10e      	bne.n	800a41e <PID_CONTROLLER_Compute+0x54>
 800a400:	edd7 7a00 	vldr	s15, [r7]
 800a404:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800a408:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a40c:	bfcc      	ite	gt
 800a40e:	2301      	movgt	r3, #1
 800a410:	2300      	movle	r3, #0
 800a412:	b2db      	uxtb	r3, r3
 800a414:	f083 0301 	eor.w	r3, r3, #1
 800a418:	b2db      	uxtb	r3, r3
 800a41a:	2b00      	cmp	r3, #0
 800a41c:	d046      	beq.n	800a4ac <PID_CONTROLLER_Compute+0xe2>
 800a41e:	687b      	ldr	r3, [r7, #4]
 800a420:	ed93 7a05 	vldr	s14, [r3, #20]
 800a424:	687b      	ldr	r3, [r7, #4]
 800a426:	edd3 7a06 	vldr	s15, [r3, #24]
 800a42a:	eef1 7a67 	vneg.f32	s15, s15
 800a42e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800a432:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a436:	bf94      	ite	ls
 800a438:	2301      	movls	r3, #1
 800a43a:	2300      	movhi	r3, #0
 800a43c:	b2db      	uxtb	r3, r3
 800a43e:	f083 0301 	eor.w	r3, r3, #1
 800a442:	b2db      	uxtb	r3, r3
 800a444:	2b00      	cmp	r3, #0
 800a446:	d10e      	bne.n	800a466 <PID_CONTROLLER_Compute+0x9c>
 800a448:	edd7 7a00 	vldr	s15, [r7]
 800a44c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800a450:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a454:	bf4c      	ite	mi
 800a456:	2301      	movmi	r3, #1
 800a458:	2300      	movpl	r3, #0
 800a45a:	b2db      	uxtb	r3, r3
 800a45c:	f083 0301 	eor.w	r3, r3, #1
 800a460:	b2db      	uxtb	r3, r3
 800a462:	2b00      	cmp	r3, #0
 800a464:	d022      	beq.n	800a4ac <PID_CONTROLLER_Compute+0xe2>
	{
		PIDx->u += (PIDx->a0 * ek) - (PIDx->a1 * PIDx->ek_1) + (PIDx->a2 * PIDx->ek_2);
 800a466:	687b      	ldr	r3, [r7, #4]
 800a468:	ed93 7a05 	vldr	s14, [r3, #20]
 800a46c:	687b      	ldr	r3, [r7, #4]
 800a46e:	edd3 6a00 	vldr	s13, [r3]
 800a472:	edd7 7a00 	vldr	s15, [r7]
 800a476:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800a47a:	687b      	ldr	r3, [r7, #4]
 800a47c:	ed93 6a01 	vldr	s12, [r3, #4]
 800a480:	687b      	ldr	r3, [r7, #4]
 800a482:	edd3 7a03 	vldr	s15, [r3, #12]
 800a486:	ee66 7a27 	vmul.f32	s15, s12, s15
 800a48a:	ee76 6ae7 	vsub.f32	s13, s13, s15
 800a48e:	687b      	ldr	r3, [r7, #4]
 800a490:	ed93 6a02 	vldr	s12, [r3, #8]
 800a494:	687b      	ldr	r3, [r7, #4]
 800a496:	edd3 7a04 	vldr	s15, [r3, #16]
 800a49a:	ee66 7a27 	vmul.f32	s15, s12, s15
 800a49e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a4a2:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a4a6:	687b      	ldr	r3, [r7, #4]
 800a4a8:	edc3 7a05 	vstr	s15, [r3, #20]
	}
	PIDx->ek_2 = PIDx->ek_1;
 800a4ac:	687b      	ldr	r3, [r7, #4]
 800a4ae:	68da      	ldr	r2, [r3, #12]
 800a4b0:	687b      	ldr	r3, [r7, #4]
 800a4b2:	611a      	str	r2, [r3, #16]
	PIDx->ek_1 = ek;
 800a4b4:	687b      	ldr	r3, [r7, #4]
 800a4b6:	683a      	ldr	r2, [r7, #0]
 800a4b8:	60da      	str	r2, [r3, #12]
	return fmaxf(-PIDx->u_max,fminf(PIDx->u, PIDx->u_max));
 800a4ba:	687b      	ldr	r3, [r7, #4]
 800a4bc:	edd3 7a06 	vldr	s15, [r3, #24]
 800a4c0:	eeb1 8a67 	vneg.f32	s16, s15
 800a4c4:	687b      	ldr	r3, [r7, #4]
 800a4c6:	edd3 7a05 	vldr	s15, [r3, #20]
 800a4ca:	687b      	ldr	r3, [r7, #4]
 800a4cc:	ed93 7a06 	vldr	s14, [r3, #24]
 800a4d0:	eef0 0a47 	vmov.f32	s1, s14
 800a4d4:	eeb0 0a67 	vmov.f32	s0, s15
 800a4d8:	f010 fba5 	bl	801ac26 <fminf>
 800a4dc:	eef0 7a40 	vmov.f32	s15, s0
 800a4e0:	eef0 0a67 	vmov.f32	s1, s15
 800a4e4:	eeb0 0a48 	vmov.f32	s0, s16
 800a4e8:	f010 fb80 	bl	801abec <fmaxf>
 800a4ec:	eef0 7a40 	vmov.f32	s15, s0
}
 800a4f0:	eeb0 0a67 	vmov.f32	s0, s15
 800a4f4:	3708      	adds	r7, #8
 800a4f6:	46bd      	mov	sp, r7
 800a4f8:	ecbd 8b02 	vpop	{d8}
 800a4fc:	bd80      	pop	{r7, pc}
	...

0800a500 <RC_Init>:
 */

#include "RC.h"

uint8_t RC_Init(RC_Structure *RCx, TIM_HandleTypeDef *htimx, uint32_t channelx, float cpu_freq, bool isCHN)
{
 800a500:	b580      	push	{r7, lr}
 800a502:	b088      	sub	sp, #32
 800a504:	af00      	add	r7, sp, #0
 800a506:	6178      	str	r0, [r7, #20]
 800a508:	6139      	str	r1, [r7, #16]
 800a50a:	60fa      	str	r2, [r7, #12]
 800a50c:	ed87 0a02 	vstr	s0, [r7, #8]
 800a510:	71fb      	strb	r3, [r7, #7]
	RCx->htimx = htimx;
 800a512:	697b      	ldr	r3, [r7, #20]
 800a514:	693a      	ldr	r2, [r7, #16]
 800a516:	601a      	str	r2, [r3, #0]
	RCx->channelx =channelx;
 800a518:	697b      	ldr	r3, [r7, #20]
 800a51a:	68fa      	ldr	r2, [r7, #12]
 800a51c:	605a      	str	r2, [r3, #4]
	HAL_TIM_Base_Start(RCx->htimx);
 800a51e:	697b      	ldr	r3, [r7, #20]
 800a520:	681b      	ldr	r3, [r3, #0]
 800a522:	4618      	mov	r0, r3
 800a524:	f7fc fd80 	bl	8007028 <HAL_TIM_Base_Start>
	if (isCHN) HAL_TIMEx_PWMN_Start(RCx->htimx, RCx->channelx);
 800a528:	79fb      	ldrb	r3, [r7, #7]
 800a52a:	2b00      	cmp	r3, #0
 800a52c:	d008      	beq.n	800a540 <RC_Init+0x40>
 800a52e:	697b      	ldr	r3, [r7, #20]
 800a530:	681a      	ldr	r2, [r3, #0]
 800a532:	697b      	ldr	r3, [r7, #20]
 800a534:	685b      	ldr	r3, [r3, #4]
 800a536:	4619      	mov	r1, r3
 800a538:	4610      	mov	r0, r2
 800a53a:	f7fd fdc5 	bl	80080c8 <HAL_TIMEx_PWMN_Start>
 800a53e:	e007      	b.n	800a550 <RC_Init+0x50>
	else HAL_TIM_PWM_Start(RCx->htimx, RCx->channelx);
 800a540:	697b      	ldr	r3, [r7, #20]
 800a542:	681a      	ldr	r2, [r3, #0]
 800a544:	697b      	ldr	r3, [r7, #20]
 800a546:	685b      	ldr	r3, [r3, #4]
 800a548:	4619      	mov	r1, r3
 800a54a:	4610      	mov	r0, r2
 800a54c:	f7fc fe64 	bl	8007218 <HAL_TIM_PWM_Start>

	if (50.0 >= cpu_freq / 2.0) return -1;
 800a550:	68b8      	ldr	r0, [r7, #8]
 800a552:	f7f6 f809 	bl	8000568 <__aeabi_f2d>
 800a556:	f04f 0200 	mov.w	r2, #0
 800a55a:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800a55e:	f7f6 f985 	bl	800086c <__aeabi_ddiv>
 800a562:	4602      	mov	r2, r0
 800a564:	460b      	mov	r3, r1
 800a566:	4610      	mov	r0, r2
 800a568:	4619      	mov	r1, r3
 800a56a:	f04f 0200 	mov.w	r2, #0
 800a56e:	4b27      	ldr	r3, [pc, #156]	@ (800a60c <RC_Init+0x10c>)
 800a570:	f7f6 face 	bl	8000b10 <__aeabi_dcmple>
 800a574:	4603      	mov	r3, r0
 800a576:	2b00      	cmp	r3, #0
 800a578:	d001      	beq.n	800a57e <RC_Init+0x7e>
 800a57a:	23ff      	movs	r3, #255	@ 0xff
 800a57c:	e042      	b.n	800a604 <RC_Init+0x104>
	uint32_t period_cyc = (uint32_t) (cpu_freq / 50.0);
 800a57e:	68b8      	ldr	r0, [r7, #8]
 800a580:	f7f5 fff2 	bl	8000568 <__aeabi_f2d>
 800a584:	f04f 0200 	mov.w	r2, #0
 800a588:	4b20      	ldr	r3, [pc, #128]	@ (800a60c <RC_Init+0x10c>)
 800a58a:	f7f6 f96f 	bl	800086c <__aeabi_ddiv>
 800a58e:	4602      	mov	r2, r0
 800a590:	460b      	mov	r3, r1
 800a592:	4610      	mov	r0, r2
 800a594:	4619      	mov	r1, r3
 800a596:	f7f6 fad9 	bl	8000b4c <__aeabi_d2uiz>
 800a59a:	4603      	mov	r3, r0
 800a59c:	61fb      	str	r3, [r7, #28]
	uint16_t prescaler = (uint16_t) (period_cyc / 65535 + 1);
 800a59e:	69fb      	ldr	r3, [r7, #28]
 800a5a0:	4a1b      	ldr	r2, [pc, #108]	@ (800a610 <RC_Init+0x110>)
 800a5a2:	fba2 2303 	umull	r2, r3, r2, r3
 800a5a6:	0bdb      	lsrs	r3, r3, #15
 800a5a8:	b29b      	uxth	r3, r3
 800a5aa:	3301      	adds	r3, #1
 800a5ac:	837b      	strh	r3, [r7, #26]
	uint16_t overflow = (uint16_t) ((period_cyc + (prescaler / 2)) / prescaler);
 800a5ae:	8b7b      	ldrh	r3, [r7, #26]
 800a5b0:	085b      	lsrs	r3, r3, #1
 800a5b2:	b29b      	uxth	r3, r3
 800a5b4:	461a      	mov	r2, r3
 800a5b6:	69fb      	ldr	r3, [r7, #28]
 800a5b8:	441a      	add	r2, r3
 800a5ba:	8b7b      	ldrh	r3, [r7, #26]
 800a5bc:	fbb2 f3f3 	udiv	r3, r2, r3
 800a5c0:	833b      	strh	r3, [r7, #24]
	__HAL_TIM_SET_PRESCALER(RCx->htimx, prescaler);
 800a5c2:	697b      	ldr	r3, [r7, #20]
 800a5c4:	681b      	ldr	r3, [r3, #0]
 800a5c6:	681b      	ldr	r3, [r3, #0]
 800a5c8:	8b7a      	ldrh	r2, [r7, #26]
 800a5ca:	629a      	str	r2, [r3, #40]	@ 0x28
	__HAL_TIM_SET_AUTORELOAD(RCx->htimx, overflow);
 800a5cc:	697b      	ldr	r3, [r7, #20]
 800a5ce:	681b      	ldr	r3, [r3, #0]
 800a5d0:	681b      	ldr	r3, [r3, #0]
 800a5d2:	8b3a      	ldrh	r2, [r7, #24]
 800a5d4:	62da      	str	r2, [r3, #44]	@ 0x2c
 800a5d6:	697b      	ldr	r3, [r7, #20]
 800a5d8:	681b      	ldr	r3, [r3, #0]
 800a5da:	8b3a      	ldrh	r2, [r7, #24]
 800a5dc:	60da      	str	r2, [r3, #12]
	RCx->gain = overflow / 20.0;
 800a5de:	8b3b      	ldrh	r3, [r7, #24]
 800a5e0:	4618      	mov	r0, r3
 800a5e2:	f7f5 ffaf 	bl	8000544 <__aeabi_i2d>
 800a5e6:	f04f 0200 	mov.w	r2, #0
 800a5ea:	4b0a      	ldr	r3, [pc, #40]	@ (800a614 <RC_Init+0x114>)
 800a5ec:	f7f6 f93e 	bl	800086c <__aeabi_ddiv>
 800a5f0:	4602      	mov	r2, r0
 800a5f2:	460b      	mov	r3, r1
 800a5f4:	4610      	mov	r0, r2
 800a5f6:	4619      	mov	r1, r3
 800a5f8:	f7f6 fac8 	bl	8000b8c <__aeabi_d2f>
 800a5fc:	4602      	mov	r2, r0
 800a5fe:	697b      	ldr	r3, [r7, #20]
 800a600:	609a      	str	r2, [r3, #8]
	return 0;
 800a602:	2300      	movs	r3, #0
}
 800a604:	4618      	mov	r0, r3
 800a606:	3720      	adds	r7, #32
 800a608:	46bd      	mov	sp, r7
 800a60a:	bd80      	pop	{r7, pc}
 800a60c:	40490000 	.word	0x40490000
 800a610:	80008001 	.word	0x80008001
 800a614:	40340000 	.word	0x40340000

0800a618 <RC_Set_Input_Range>:

void RC_Set_Input_Range(RC_Structure *RCx, float _min, float _max)
{
 800a618:	b480      	push	{r7}
 800a61a:	b087      	sub	sp, #28
 800a61c:	af00      	add	r7, sp, #0
 800a61e:	60f8      	str	r0, [r7, #12]
 800a620:	ed87 0a02 	vstr	s0, [r7, #8]
 800a624:	edc7 0a01 	vstr	s1, [r7, #4]
	float m = (2.5 - 0.5) / (_max - _min);
 800a628:	ed97 7a01 	vldr	s14, [r7, #4]
 800a62c:	edd7 7a02 	vldr	s15, [r7, #8]
 800a630:	ee37 7a67 	vsub.f32	s14, s14, s15
 800a634:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 800a638:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a63c:	edc7 7a05 	vstr	s15, [r7, #20]
	float c = 0.5 - (m * _min);
 800a640:	ed97 7a05 	vldr	s14, [r7, #20]
 800a644:	edd7 7a02 	vldr	s15, [r7, #8]
 800a648:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a64c:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 800a650:	ee77 7a67 	vsub.f32	s15, s14, s15
 800a654:	edc7 7a04 	vstr	s15, [r7, #16]

	RCx->offset = RCx->gain * c;
 800a658:	68fb      	ldr	r3, [r7, #12]
 800a65a:	ed93 7a02 	vldr	s14, [r3, #8]
 800a65e:	edd7 7a04 	vldr	s15, [r7, #16]
 800a662:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a666:	68fb      	ldr	r3, [r7, #12]
 800a668:	edc3 7a03 	vstr	s15, [r3, #12]
	RCx->gain *= m;
 800a66c:	68fb      	ldr	r3, [r7, #12]
 800a66e:	ed93 7a02 	vldr	s14, [r3, #8]
 800a672:	edd7 7a05 	vldr	s15, [r7, #20]
 800a676:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a67a:	68fb      	ldr	r3, [r7, #12]
 800a67c:	edc3 7a02 	vstr	s15, [r3, #8]
}
 800a680:	bf00      	nop
 800a682:	371c      	adds	r7, #28
 800a684:	46bd      	mov	sp, r7
 800a686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a68a:	4770      	bx	lr

0800a68c <RC_Write>:

void RC_Write(RC_Structure *RCx, float cmd)
{
 800a68c:	b480      	push	{r7}
 800a68e:	b085      	sub	sp, #20
 800a690:	af00      	add	r7, sp, #0
 800a692:	6078      	str	r0, [r7, #4]
 800a694:	ed87 0a00 	vstr	s0, [r7]
	float pwm = (RCx->gain * cmd) + RCx->offset;
 800a698:	687b      	ldr	r3, [r7, #4]
 800a69a:	ed93 7a02 	vldr	s14, [r3, #8]
 800a69e:	edd7 7a00 	vldr	s15, [r7]
 800a6a2:	ee27 7a27 	vmul.f32	s14, s14, s15
 800a6a6:	687b      	ldr	r3, [r7, #4]
 800a6a8:	edd3 7a03 	vldr	s15, [r3, #12]
 800a6ac:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a6b0:	edc7 7a03 	vstr	s15, [r7, #12]
	__HAL_TIM_SET_COMPARE(RCx->htimx, RCx->channelx, (uint16_t) pwm);
 800a6b4:	687b      	ldr	r3, [r7, #4]
 800a6b6:	685b      	ldr	r3, [r3, #4]
 800a6b8:	2b00      	cmp	r3, #0
 800a6ba:	d10b      	bne.n	800a6d4 <RC_Write+0x48>
 800a6bc:	edd7 7a03 	vldr	s15, [r7, #12]
 800a6c0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a6c4:	ee17 3a90 	vmov	r3, s15
 800a6c8:	b29a      	uxth	r2, r3
 800a6ca:	687b      	ldr	r3, [r7, #4]
 800a6cc:	681b      	ldr	r3, [r3, #0]
 800a6ce:	681b      	ldr	r3, [r3, #0]
 800a6d0:	635a      	str	r2, [r3, #52]	@ 0x34
}
 800a6d2:	e04f      	b.n	800a774 <RC_Write+0xe8>
	__HAL_TIM_SET_COMPARE(RCx->htimx, RCx->channelx, (uint16_t) pwm);
 800a6d4:	687b      	ldr	r3, [r7, #4]
 800a6d6:	685b      	ldr	r3, [r3, #4]
 800a6d8:	2b04      	cmp	r3, #4
 800a6da:	d10c      	bne.n	800a6f6 <RC_Write+0x6a>
 800a6dc:	edd7 7a03 	vldr	s15, [r7, #12]
 800a6e0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a6e4:	ee17 3a90 	vmov	r3, s15
 800a6e8:	b299      	uxth	r1, r3
 800a6ea:	687b      	ldr	r3, [r7, #4]
 800a6ec:	681b      	ldr	r3, [r3, #0]
 800a6ee:	681a      	ldr	r2, [r3, #0]
 800a6f0:	460b      	mov	r3, r1
 800a6f2:	6393      	str	r3, [r2, #56]	@ 0x38
}
 800a6f4:	e03e      	b.n	800a774 <RC_Write+0xe8>
	__HAL_TIM_SET_COMPARE(RCx->htimx, RCx->channelx, (uint16_t) pwm);
 800a6f6:	687b      	ldr	r3, [r7, #4]
 800a6f8:	685b      	ldr	r3, [r3, #4]
 800a6fa:	2b08      	cmp	r3, #8
 800a6fc:	d10c      	bne.n	800a718 <RC_Write+0x8c>
 800a6fe:	edd7 7a03 	vldr	s15, [r7, #12]
 800a702:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a706:	ee17 3a90 	vmov	r3, s15
 800a70a:	b299      	uxth	r1, r3
 800a70c:	687b      	ldr	r3, [r7, #4]
 800a70e:	681b      	ldr	r3, [r3, #0]
 800a710:	681a      	ldr	r2, [r3, #0]
 800a712:	460b      	mov	r3, r1
 800a714:	63d3      	str	r3, [r2, #60]	@ 0x3c
}
 800a716:	e02d      	b.n	800a774 <RC_Write+0xe8>
	__HAL_TIM_SET_COMPARE(RCx->htimx, RCx->channelx, (uint16_t) pwm);
 800a718:	687b      	ldr	r3, [r7, #4]
 800a71a:	685b      	ldr	r3, [r3, #4]
 800a71c:	2b0c      	cmp	r3, #12
 800a71e:	d10c      	bne.n	800a73a <RC_Write+0xae>
 800a720:	edd7 7a03 	vldr	s15, [r7, #12]
 800a724:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a728:	ee17 3a90 	vmov	r3, s15
 800a72c:	b299      	uxth	r1, r3
 800a72e:	687b      	ldr	r3, [r7, #4]
 800a730:	681b      	ldr	r3, [r3, #0]
 800a732:	681a      	ldr	r2, [r3, #0]
 800a734:	460b      	mov	r3, r1
 800a736:	6413      	str	r3, [r2, #64]	@ 0x40
}
 800a738:	e01c      	b.n	800a774 <RC_Write+0xe8>
	__HAL_TIM_SET_COMPARE(RCx->htimx, RCx->channelx, (uint16_t) pwm);
 800a73a:	687b      	ldr	r3, [r7, #4]
 800a73c:	685b      	ldr	r3, [r3, #4]
 800a73e:	2b10      	cmp	r3, #16
 800a740:	d10c      	bne.n	800a75c <RC_Write+0xd0>
 800a742:	edd7 7a03 	vldr	s15, [r7, #12]
 800a746:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a74a:	ee17 3a90 	vmov	r3, s15
 800a74e:	b299      	uxth	r1, r3
 800a750:	687b      	ldr	r3, [r7, #4]
 800a752:	681b      	ldr	r3, [r3, #0]
 800a754:	681a      	ldr	r2, [r3, #0]
 800a756:	460b      	mov	r3, r1
 800a758:	6593      	str	r3, [r2, #88]	@ 0x58
}
 800a75a:	e00b      	b.n	800a774 <RC_Write+0xe8>
	__HAL_TIM_SET_COMPARE(RCx->htimx, RCx->channelx, (uint16_t) pwm);
 800a75c:	edd7 7a03 	vldr	s15, [r7, #12]
 800a760:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a764:	ee17 3a90 	vmov	r3, s15
 800a768:	b299      	uxth	r1, r3
 800a76a:	687b      	ldr	r3, [r7, #4]
 800a76c:	681b      	ldr	r3, [r3, #0]
 800a76e:	681a      	ldr	r2, [r3, #0]
 800a770:	460b      	mov	r3, r1
 800a772:	65d3      	str	r3, [r2, #92]	@ 0x5c
}
 800a774:	bf00      	nop
 800a776:	3714      	adds	r7, #20
 800a778:	46bd      	mov	sp, r7
 800a77a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a77e:	4770      	bx	lr

0800a780 <__NVIC_SetPriority>:
{
 800a780:	b480      	push	{r7}
 800a782:	b083      	sub	sp, #12
 800a784:	af00      	add	r7, sp, #0
 800a786:	4603      	mov	r3, r0
 800a788:	6039      	str	r1, [r7, #0]
 800a78a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800a78c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a790:	2b00      	cmp	r3, #0
 800a792:	db0a      	blt.n	800a7aa <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800a794:	683b      	ldr	r3, [r7, #0]
 800a796:	b2da      	uxtb	r2, r3
 800a798:	490c      	ldr	r1, [pc, #48]	@ (800a7cc <__NVIC_SetPriority+0x4c>)
 800a79a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a79e:	0112      	lsls	r2, r2, #4
 800a7a0:	b2d2      	uxtb	r2, r2
 800a7a2:	440b      	add	r3, r1
 800a7a4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 800a7a8:	e00a      	b.n	800a7c0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800a7aa:	683b      	ldr	r3, [r7, #0]
 800a7ac:	b2da      	uxtb	r2, r3
 800a7ae:	4908      	ldr	r1, [pc, #32]	@ (800a7d0 <__NVIC_SetPriority+0x50>)
 800a7b0:	79fb      	ldrb	r3, [r7, #7]
 800a7b2:	f003 030f 	and.w	r3, r3, #15
 800a7b6:	3b04      	subs	r3, #4
 800a7b8:	0112      	lsls	r2, r2, #4
 800a7ba:	b2d2      	uxtb	r2, r2
 800a7bc:	440b      	add	r3, r1
 800a7be:	761a      	strb	r2, [r3, #24]
}
 800a7c0:	bf00      	nop
 800a7c2:	370c      	adds	r7, #12
 800a7c4:	46bd      	mov	sp, r7
 800a7c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7ca:	4770      	bx	lr
 800a7cc:	e000e100 	.word	0xe000e100
 800a7d0:	e000ed00 	.word	0xe000ed00

0800a7d4 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 800a7d4:	b580      	push	{r7, lr}
 800a7d6:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 800a7d8:	4b05      	ldr	r3, [pc, #20]	@ (800a7f0 <SysTick_Handler+0x1c>)
 800a7da:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 800a7dc:	f001 fd6e 	bl	800c2bc <xTaskGetSchedulerState>
 800a7e0:	4603      	mov	r3, r0
 800a7e2:	2b01      	cmp	r3, #1
 800a7e4:	d001      	beq.n	800a7ea <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800a7e6:	f002 fb67 	bl	800ceb8 <xPortSysTickHandler>
  }
}
 800a7ea:	bf00      	nop
 800a7ec:	bd80      	pop	{r7, pc}
 800a7ee:	bf00      	nop
 800a7f0:	e000e010 	.word	0xe000e010

0800a7f4 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800a7f4:	b580      	push	{r7, lr}
 800a7f6:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800a7f8:	2100      	movs	r1, #0
 800a7fa:	f06f 0004 	mvn.w	r0, #4
 800a7fe:	f7ff ffbf 	bl	800a780 <__NVIC_SetPriority>
#endif
}
 800a802:	bf00      	nop
 800a804:	bd80      	pop	{r7, pc}
	...

0800a808 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800a808:	b480      	push	{r7}
 800a80a:	b083      	sub	sp, #12
 800a80c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a80e:	f3ef 8305 	mrs	r3, IPSR
 800a812:	603b      	str	r3, [r7, #0]
  return(result);
 800a814:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800a816:	2b00      	cmp	r3, #0
 800a818:	d003      	beq.n	800a822 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800a81a:	f06f 0305 	mvn.w	r3, #5
 800a81e:	607b      	str	r3, [r7, #4]
 800a820:	e00c      	b.n	800a83c <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800a822:	4b0a      	ldr	r3, [pc, #40]	@ (800a84c <osKernelInitialize+0x44>)
 800a824:	681b      	ldr	r3, [r3, #0]
 800a826:	2b00      	cmp	r3, #0
 800a828:	d105      	bne.n	800a836 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800a82a:	4b08      	ldr	r3, [pc, #32]	@ (800a84c <osKernelInitialize+0x44>)
 800a82c:	2201      	movs	r2, #1
 800a82e:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800a830:	2300      	movs	r3, #0
 800a832:	607b      	str	r3, [r7, #4]
 800a834:	e002      	b.n	800a83c <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800a836:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800a83a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800a83c:	687b      	ldr	r3, [r7, #4]
}
 800a83e:	4618      	mov	r0, r3
 800a840:	370c      	adds	r7, #12
 800a842:	46bd      	mov	sp, r7
 800a844:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a848:	4770      	bx	lr
 800a84a:	bf00      	nop
 800a84c:	20005b60 	.word	0x20005b60

0800a850 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800a850:	b580      	push	{r7, lr}
 800a852:	b082      	sub	sp, #8
 800a854:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a856:	f3ef 8305 	mrs	r3, IPSR
 800a85a:	603b      	str	r3, [r7, #0]
  return(result);
 800a85c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800a85e:	2b00      	cmp	r3, #0
 800a860:	d003      	beq.n	800a86a <osKernelStart+0x1a>
    stat = osErrorISR;
 800a862:	f06f 0305 	mvn.w	r3, #5
 800a866:	607b      	str	r3, [r7, #4]
 800a868:	e010      	b.n	800a88c <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800a86a:	4b0b      	ldr	r3, [pc, #44]	@ (800a898 <osKernelStart+0x48>)
 800a86c:	681b      	ldr	r3, [r3, #0]
 800a86e:	2b01      	cmp	r3, #1
 800a870:	d109      	bne.n	800a886 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800a872:	f7ff ffbf 	bl	800a7f4 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800a876:	4b08      	ldr	r3, [pc, #32]	@ (800a898 <osKernelStart+0x48>)
 800a878:	2202      	movs	r2, #2
 800a87a:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800a87c:	f001 f892 	bl	800b9a4 <vTaskStartScheduler>
      stat = osOK;
 800a880:	2300      	movs	r3, #0
 800a882:	607b      	str	r3, [r7, #4]
 800a884:	e002      	b.n	800a88c <osKernelStart+0x3c>
    } else {
      stat = osError;
 800a886:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800a88a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800a88c:	687b      	ldr	r3, [r7, #4]
}
 800a88e:	4618      	mov	r0, r3
 800a890:	3708      	adds	r7, #8
 800a892:	46bd      	mov	sp, r7
 800a894:	bd80      	pop	{r7, pc}
 800a896:	bf00      	nop
 800a898:	20005b60 	.word	0x20005b60

0800a89c <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800a89c:	b580      	push	{r7, lr}
 800a89e:	b08e      	sub	sp, #56	@ 0x38
 800a8a0:	af04      	add	r7, sp, #16
 800a8a2:	60f8      	str	r0, [r7, #12]
 800a8a4:	60b9      	str	r1, [r7, #8]
 800a8a6:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800a8a8:	2300      	movs	r3, #0
 800a8aa:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a8ac:	f3ef 8305 	mrs	r3, IPSR
 800a8b0:	617b      	str	r3, [r7, #20]
  return(result);
 800a8b2:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800a8b4:	2b00      	cmp	r3, #0
 800a8b6:	d17e      	bne.n	800a9b6 <osThreadNew+0x11a>
 800a8b8:	68fb      	ldr	r3, [r7, #12]
 800a8ba:	2b00      	cmp	r3, #0
 800a8bc:	d07b      	beq.n	800a9b6 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800a8be:	2380      	movs	r3, #128	@ 0x80
 800a8c0:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800a8c2:	2318      	movs	r3, #24
 800a8c4:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800a8c6:	2300      	movs	r3, #0
 800a8c8:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 800a8ca:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800a8ce:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800a8d0:	687b      	ldr	r3, [r7, #4]
 800a8d2:	2b00      	cmp	r3, #0
 800a8d4:	d045      	beq.n	800a962 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800a8d6:	687b      	ldr	r3, [r7, #4]
 800a8d8:	681b      	ldr	r3, [r3, #0]
 800a8da:	2b00      	cmp	r3, #0
 800a8dc:	d002      	beq.n	800a8e4 <osThreadNew+0x48>
        name = attr->name;
 800a8de:	687b      	ldr	r3, [r7, #4]
 800a8e0:	681b      	ldr	r3, [r3, #0]
 800a8e2:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 800a8e4:	687b      	ldr	r3, [r7, #4]
 800a8e6:	699b      	ldr	r3, [r3, #24]
 800a8e8:	2b00      	cmp	r3, #0
 800a8ea:	d002      	beq.n	800a8f2 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 800a8ec:	687b      	ldr	r3, [r7, #4]
 800a8ee:	699b      	ldr	r3, [r3, #24]
 800a8f0:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800a8f2:	69fb      	ldr	r3, [r7, #28]
 800a8f4:	2b00      	cmp	r3, #0
 800a8f6:	d008      	beq.n	800a90a <osThreadNew+0x6e>
 800a8f8:	69fb      	ldr	r3, [r7, #28]
 800a8fa:	2b38      	cmp	r3, #56	@ 0x38
 800a8fc:	d805      	bhi.n	800a90a <osThreadNew+0x6e>
 800a8fe:	687b      	ldr	r3, [r7, #4]
 800a900:	685b      	ldr	r3, [r3, #4]
 800a902:	f003 0301 	and.w	r3, r3, #1
 800a906:	2b00      	cmp	r3, #0
 800a908:	d001      	beq.n	800a90e <osThreadNew+0x72>
        return (NULL);
 800a90a:	2300      	movs	r3, #0
 800a90c:	e054      	b.n	800a9b8 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800a90e:	687b      	ldr	r3, [r7, #4]
 800a910:	695b      	ldr	r3, [r3, #20]
 800a912:	2b00      	cmp	r3, #0
 800a914:	d003      	beq.n	800a91e <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800a916:	687b      	ldr	r3, [r7, #4]
 800a918:	695b      	ldr	r3, [r3, #20]
 800a91a:	089b      	lsrs	r3, r3, #2
 800a91c:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800a91e:	687b      	ldr	r3, [r7, #4]
 800a920:	689b      	ldr	r3, [r3, #8]
 800a922:	2b00      	cmp	r3, #0
 800a924:	d00e      	beq.n	800a944 <osThreadNew+0xa8>
 800a926:	687b      	ldr	r3, [r7, #4]
 800a928:	68db      	ldr	r3, [r3, #12]
 800a92a:	2ba7      	cmp	r3, #167	@ 0xa7
 800a92c:	d90a      	bls.n	800a944 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800a92e:	687b      	ldr	r3, [r7, #4]
 800a930:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800a932:	2b00      	cmp	r3, #0
 800a934:	d006      	beq.n	800a944 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800a936:	687b      	ldr	r3, [r7, #4]
 800a938:	695b      	ldr	r3, [r3, #20]
 800a93a:	2b00      	cmp	r3, #0
 800a93c:	d002      	beq.n	800a944 <osThreadNew+0xa8>
        mem = 1;
 800a93e:	2301      	movs	r3, #1
 800a940:	61bb      	str	r3, [r7, #24]
 800a942:	e010      	b.n	800a966 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800a944:	687b      	ldr	r3, [r7, #4]
 800a946:	689b      	ldr	r3, [r3, #8]
 800a948:	2b00      	cmp	r3, #0
 800a94a:	d10c      	bne.n	800a966 <osThreadNew+0xca>
 800a94c:	687b      	ldr	r3, [r7, #4]
 800a94e:	68db      	ldr	r3, [r3, #12]
 800a950:	2b00      	cmp	r3, #0
 800a952:	d108      	bne.n	800a966 <osThreadNew+0xca>
 800a954:	687b      	ldr	r3, [r7, #4]
 800a956:	691b      	ldr	r3, [r3, #16]
 800a958:	2b00      	cmp	r3, #0
 800a95a:	d104      	bne.n	800a966 <osThreadNew+0xca>
          mem = 0;
 800a95c:	2300      	movs	r3, #0
 800a95e:	61bb      	str	r3, [r7, #24]
 800a960:	e001      	b.n	800a966 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800a962:	2300      	movs	r3, #0
 800a964:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800a966:	69bb      	ldr	r3, [r7, #24]
 800a968:	2b01      	cmp	r3, #1
 800a96a:	d110      	bne.n	800a98e <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800a96c:	687b      	ldr	r3, [r7, #4]
 800a96e:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800a970:	687a      	ldr	r2, [r7, #4]
 800a972:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800a974:	9202      	str	r2, [sp, #8]
 800a976:	9301      	str	r3, [sp, #4]
 800a978:	69fb      	ldr	r3, [r7, #28]
 800a97a:	9300      	str	r3, [sp, #0]
 800a97c:	68bb      	ldr	r3, [r7, #8]
 800a97e:	6a3a      	ldr	r2, [r7, #32]
 800a980:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800a982:	68f8      	ldr	r0, [r7, #12]
 800a984:	f000 fe1a 	bl	800b5bc <xTaskCreateStatic>
 800a988:	4603      	mov	r3, r0
 800a98a:	613b      	str	r3, [r7, #16]
 800a98c:	e013      	b.n	800a9b6 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800a98e:	69bb      	ldr	r3, [r7, #24]
 800a990:	2b00      	cmp	r3, #0
 800a992:	d110      	bne.n	800a9b6 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800a994:	6a3b      	ldr	r3, [r7, #32]
 800a996:	b29a      	uxth	r2, r3
 800a998:	f107 0310 	add.w	r3, r7, #16
 800a99c:	9301      	str	r3, [sp, #4]
 800a99e:	69fb      	ldr	r3, [r7, #28]
 800a9a0:	9300      	str	r3, [sp, #0]
 800a9a2:	68bb      	ldr	r3, [r7, #8]
 800a9a4:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800a9a6:	68f8      	ldr	r0, [r7, #12]
 800a9a8:	f000 fe68 	bl	800b67c <xTaskCreate>
 800a9ac:	4603      	mov	r3, r0
 800a9ae:	2b01      	cmp	r3, #1
 800a9b0:	d001      	beq.n	800a9b6 <osThreadNew+0x11a>
            hTask = NULL;
 800a9b2:	2300      	movs	r3, #0
 800a9b4:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800a9b6:	693b      	ldr	r3, [r7, #16]
}
 800a9b8:	4618      	mov	r0, r3
 800a9ba:	3728      	adds	r7, #40	@ 0x28
 800a9bc:	46bd      	mov	sp, r7
 800a9be:	bd80      	pop	{r7, pc}

0800a9c0 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 800a9c0:	b580      	push	{r7, lr}
 800a9c2:	b084      	sub	sp, #16
 800a9c4:	af00      	add	r7, sp, #0
 800a9c6:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a9c8:	f3ef 8305 	mrs	r3, IPSR
 800a9cc:	60bb      	str	r3, [r7, #8]
  return(result);
 800a9ce:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800a9d0:	2b00      	cmp	r3, #0
 800a9d2:	d003      	beq.n	800a9dc <osDelay+0x1c>
    stat = osErrorISR;
 800a9d4:	f06f 0305 	mvn.w	r3, #5
 800a9d8:	60fb      	str	r3, [r7, #12]
 800a9da:	e007      	b.n	800a9ec <osDelay+0x2c>
  }
  else {
    stat = osOK;
 800a9dc:	2300      	movs	r3, #0
 800a9de:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 800a9e0:	687b      	ldr	r3, [r7, #4]
 800a9e2:	2b00      	cmp	r3, #0
 800a9e4:	d002      	beq.n	800a9ec <osDelay+0x2c>
      vTaskDelay(ticks);
 800a9e6:	6878      	ldr	r0, [r7, #4]
 800a9e8:	f000 ffa6 	bl	800b938 <vTaskDelay>
    }
  }

  return (stat);
 800a9ec:	68fb      	ldr	r3, [r7, #12]
}
 800a9ee:	4618      	mov	r0, r3
 800a9f0:	3710      	adds	r7, #16
 800a9f2:	46bd      	mov	sp, r7
 800a9f4:	bd80      	pop	{r7, pc}
	...

0800a9f8 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800a9f8:	b480      	push	{r7}
 800a9fa:	b085      	sub	sp, #20
 800a9fc:	af00      	add	r7, sp, #0
 800a9fe:	60f8      	str	r0, [r7, #12]
 800aa00:	60b9      	str	r1, [r7, #8]
 800aa02:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800aa04:	68fb      	ldr	r3, [r7, #12]
 800aa06:	4a07      	ldr	r2, [pc, #28]	@ (800aa24 <vApplicationGetIdleTaskMemory+0x2c>)
 800aa08:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800aa0a:	68bb      	ldr	r3, [r7, #8]
 800aa0c:	4a06      	ldr	r2, [pc, #24]	@ (800aa28 <vApplicationGetIdleTaskMemory+0x30>)
 800aa0e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800aa10:	687b      	ldr	r3, [r7, #4]
 800aa12:	2280      	movs	r2, #128	@ 0x80
 800aa14:	601a      	str	r2, [r3, #0]
}
 800aa16:	bf00      	nop
 800aa18:	3714      	adds	r7, #20
 800aa1a:	46bd      	mov	sp, r7
 800aa1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa20:	4770      	bx	lr
 800aa22:	bf00      	nop
 800aa24:	20005b64 	.word	0x20005b64
 800aa28:	20005c0c 	.word	0x20005c0c

0800aa2c <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800aa2c:	b480      	push	{r7}
 800aa2e:	b085      	sub	sp, #20
 800aa30:	af00      	add	r7, sp, #0
 800aa32:	60f8      	str	r0, [r7, #12]
 800aa34:	60b9      	str	r1, [r7, #8]
 800aa36:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800aa38:	68fb      	ldr	r3, [r7, #12]
 800aa3a:	4a07      	ldr	r2, [pc, #28]	@ (800aa58 <vApplicationGetTimerTaskMemory+0x2c>)
 800aa3c:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800aa3e:	68bb      	ldr	r3, [r7, #8]
 800aa40:	4a06      	ldr	r2, [pc, #24]	@ (800aa5c <vApplicationGetTimerTaskMemory+0x30>)
 800aa42:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800aa44:	687b      	ldr	r3, [r7, #4]
 800aa46:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800aa4a:	601a      	str	r2, [r3, #0]
}
 800aa4c:	bf00      	nop
 800aa4e:	3714      	adds	r7, #20
 800aa50:	46bd      	mov	sp, r7
 800aa52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa56:	4770      	bx	lr
 800aa58:	20005e0c 	.word	0x20005e0c
 800aa5c:	20005eb4 	.word	0x20005eb4

0800aa60 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800aa60:	b480      	push	{r7}
 800aa62:	b083      	sub	sp, #12
 800aa64:	af00      	add	r7, sp, #0
 800aa66:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800aa68:	687b      	ldr	r3, [r7, #4]
 800aa6a:	f103 0208 	add.w	r2, r3, #8
 800aa6e:	687b      	ldr	r3, [r7, #4]
 800aa70:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800aa72:	687b      	ldr	r3, [r7, #4]
 800aa74:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800aa78:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800aa7a:	687b      	ldr	r3, [r7, #4]
 800aa7c:	f103 0208 	add.w	r2, r3, #8
 800aa80:	687b      	ldr	r3, [r7, #4]
 800aa82:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800aa84:	687b      	ldr	r3, [r7, #4]
 800aa86:	f103 0208 	add.w	r2, r3, #8
 800aa8a:	687b      	ldr	r3, [r7, #4]
 800aa8c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800aa8e:	687b      	ldr	r3, [r7, #4]
 800aa90:	2200      	movs	r2, #0
 800aa92:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800aa94:	bf00      	nop
 800aa96:	370c      	adds	r7, #12
 800aa98:	46bd      	mov	sp, r7
 800aa9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa9e:	4770      	bx	lr

0800aaa0 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800aaa0:	b480      	push	{r7}
 800aaa2:	b083      	sub	sp, #12
 800aaa4:	af00      	add	r7, sp, #0
 800aaa6:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800aaa8:	687b      	ldr	r3, [r7, #4]
 800aaaa:	2200      	movs	r2, #0
 800aaac:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800aaae:	bf00      	nop
 800aab0:	370c      	adds	r7, #12
 800aab2:	46bd      	mov	sp, r7
 800aab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aab8:	4770      	bx	lr

0800aaba <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800aaba:	b480      	push	{r7}
 800aabc:	b085      	sub	sp, #20
 800aabe:	af00      	add	r7, sp, #0
 800aac0:	6078      	str	r0, [r7, #4]
 800aac2:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800aac4:	687b      	ldr	r3, [r7, #4]
 800aac6:	685b      	ldr	r3, [r3, #4]
 800aac8:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800aaca:	683b      	ldr	r3, [r7, #0]
 800aacc:	68fa      	ldr	r2, [r7, #12]
 800aace:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800aad0:	68fb      	ldr	r3, [r7, #12]
 800aad2:	689a      	ldr	r2, [r3, #8]
 800aad4:	683b      	ldr	r3, [r7, #0]
 800aad6:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800aad8:	68fb      	ldr	r3, [r7, #12]
 800aada:	689b      	ldr	r3, [r3, #8]
 800aadc:	683a      	ldr	r2, [r7, #0]
 800aade:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800aae0:	68fb      	ldr	r3, [r7, #12]
 800aae2:	683a      	ldr	r2, [r7, #0]
 800aae4:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800aae6:	683b      	ldr	r3, [r7, #0]
 800aae8:	687a      	ldr	r2, [r7, #4]
 800aaea:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800aaec:	687b      	ldr	r3, [r7, #4]
 800aaee:	681b      	ldr	r3, [r3, #0]
 800aaf0:	1c5a      	adds	r2, r3, #1
 800aaf2:	687b      	ldr	r3, [r7, #4]
 800aaf4:	601a      	str	r2, [r3, #0]
}
 800aaf6:	bf00      	nop
 800aaf8:	3714      	adds	r7, #20
 800aafa:	46bd      	mov	sp, r7
 800aafc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab00:	4770      	bx	lr

0800ab02 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800ab02:	b480      	push	{r7}
 800ab04:	b085      	sub	sp, #20
 800ab06:	af00      	add	r7, sp, #0
 800ab08:	6078      	str	r0, [r7, #4]
 800ab0a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800ab0c:	683b      	ldr	r3, [r7, #0]
 800ab0e:	681b      	ldr	r3, [r3, #0]
 800ab10:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800ab12:	68bb      	ldr	r3, [r7, #8]
 800ab14:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800ab18:	d103      	bne.n	800ab22 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800ab1a:	687b      	ldr	r3, [r7, #4]
 800ab1c:	691b      	ldr	r3, [r3, #16]
 800ab1e:	60fb      	str	r3, [r7, #12]
 800ab20:	e00c      	b.n	800ab3c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800ab22:	687b      	ldr	r3, [r7, #4]
 800ab24:	3308      	adds	r3, #8
 800ab26:	60fb      	str	r3, [r7, #12]
 800ab28:	e002      	b.n	800ab30 <vListInsert+0x2e>
 800ab2a:	68fb      	ldr	r3, [r7, #12]
 800ab2c:	685b      	ldr	r3, [r3, #4]
 800ab2e:	60fb      	str	r3, [r7, #12]
 800ab30:	68fb      	ldr	r3, [r7, #12]
 800ab32:	685b      	ldr	r3, [r3, #4]
 800ab34:	681b      	ldr	r3, [r3, #0]
 800ab36:	68ba      	ldr	r2, [r7, #8]
 800ab38:	429a      	cmp	r2, r3
 800ab3a:	d2f6      	bcs.n	800ab2a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800ab3c:	68fb      	ldr	r3, [r7, #12]
 800ab3e:	685a      	ldr	r2, [r3, #4]
 800ab40:	683b      	ldr	r3, [r7, #0]
 800ab42:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800ab44:	683b      	ldr	r3, [r7, #0]
 800ab46:	685b      	ldr	r3, [r3, #4]
 800ab48:	683a      	ldr	r2, [r7, #0]
 800ab4a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800ab4c:	683b      	ldr	r3, [r7, #0]
 800ab4e:	68fa      	ldr	r2, [r7, #12]
 800ab50:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800ab52:	68fb      	ldr	r3, [r7, #12]
 800ab54:	683a      	ldr	r2, [r7, #0]
 800ab56:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800ab58:	683b      	ldr	r3, [r7, #0]
 800ab5a:	687a      	ldr	r2, [r7, #4]
 800ab5c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800ab5e:	687b      	ldr	r3, [r7, #4]
 800ab60:	681b      	ldr	r3, [r3, #0]
 800ab62:	1c5a      	adds	r2, r3, #1
 800ab64:	687b      	ldr	r3, [r7, #4]
 800ab66:	601a      	str	r2, [r3, #0]
}
 800ab68:	bf00      	nop
 800ab6a:	3714      	adds	r7, #20
 800ab6c:	46bd      	mov	sp, r7
 800ab6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab72:	4770      	bx	lr

0800ab74 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800ab74:	b480      	push	{r7}
 800ab76:	b085      	sub	sp, #20
 800ab78:	af00      	add	r7, sp, #0
 800ab7a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800ab7c:	687b      	ldr	r3, [r7, #4]
 800ab7e:	691b      	ldr	r3, [r3, #16]
 800ab80:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800ab82:	687b      	ldr	r3, [r7, #4]
 800ab84:	685b      	ldr	r3, [r3, #4]
 800ab86:	687a      	ldr	r2, [r7, #4]
 800ab88:	6892      	ldr	r2, [r2, #8]
 800ab8a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800ab8c:	687b      	ldr	r3, [r7, #4]
 800ab8e:	689b      	ldr	r3, [r3, #8]
 800ab90:	687a      	ldr	r2, [r7, #4]
 800ab92:	6852      	ldr	r2, [r2, #4]
 800ab94:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800ab96:	68fb      	ldr	r3, [r7, #12]
 800ab98:	685b      	ldr	r3, [r3, #4]
 800ab9a:	687a      	ldr	r2, [r7, #4]
 800ab9c:	429a      	cmp	r2, r3
 800ab9e:	d103      	bne.n	800aba8 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800aba0:	687b      	ldr	r3, [r7, #4]
 800aba2:	689a      	ldr	r2, [r3, #8]
 800aba4:	68fb      	ldr	r3, [r7, #12]
 800aba6:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800aba8:	687b      	ldr	r3, [r7, #4]
 800abaa:	2200      	movs	r2, #0
 800abac:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800abae:	68fb      	ldr	r3, [r7, #12]
 800abb0:	681b      	ldr	r3, [r3, #0]
 800abb2:	1e5a      	subs	r2, r3, #1
 800abb4:	68fb      	ldr	r3, [r7, #12]
 800abb6:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800abb8:	68fb      	ldr	r3, [r7, #12]
 800abba:	681b      	ldr	r3, [r3, #0]
}
 800abbc:	4618      	mov	r0, r3
 800abbe:	3714      	adds	r7, #20
 800abc0:	46bd      	mov	sp, r7
 800abc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abc6:	4770      	bx	lr

0800abc8 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800abc8:	b580      	push	{r7, lr}
 800abca:	b084      	sub	sp, #16
 800abcc:	af00      	add	r7, sp, #0
 800abce:	6078      	str	r0, [r7, #4]
 800abd0:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800abd2:	687b      	ldr	r3, [r7, #4]
 800abd4:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800abd6:	68fb      	ldr	r3, [r7, #12]
 800abd8:	2b00      	cmp	r3, #0
 800abda:	d10b      	bne.n	800abf4 <xQueueGenericReset+0x2c>
	__asm volatile
 800abdc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800abe0:	f383 8811 	msr	BASEPRI, r3
 800abe4:	f3bf 8f6f 	isb	sy
 800abe8:	f3bf 8f4f 	dsb	sy
 800abec:	60bb      	str	r3, [r7, #8]
}
 800abee:	bf00      	nop
 800abf0:	bf00      	nop
 800abf2:	e7fd      	b.n	800abf0 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800abf4:	f002 f8d0 	bl	800cd98 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800abf8:	68fb      	ldr	r3, [r7, #12]
 800abfa:	681a      	ldr	r2, [r3, #0]
 800abfc:	68fb      	ldr	r3, [r7, #12]
 800abfe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ac00:	68f9      	ldr	r1, [r7, #12]
 800ac02:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800ac04:	fb01 f303 	mul.w	r3, r1, r3
 800ac08:	441a      	add	r2, r3
 800ac0a:	68fb      	ldr	r3, [r7, #12]
 800ac0c:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800ac0e:	68fb      	ldr	r3, [r7, #12]
 800ac10:	2200      	movs	r2, #0
 800ac12:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800ac14:	68fb      	ldr	r3, [r7, #12]
 800ac16:	681a      	ldr	r2, [r3, #0]
 800ac18:	68fb      	ldr	r3, [r7, #12]
 800ac1a:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800ac1c:	68fb      	ldr	r3, [r7, #12]
 800ac1e:	681a      	ldr	r2, [r3, #0]
 800ac20:	68fb      	ldr	r3, [r7, #12]
 800ac22:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ac24:	3b01      	subs	r3, #1
 800ac26:	68f9      	ldr	r1, [r7, #12]
 800ac28:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800ac2a:	fb01 f303 	mul.w	r3, r1, r3
 800ac2e:	441a      	add	r2, r3
 800ac30:	68fb      	ldr	r3, [r7, #12]
 800ac32:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800ac34:	68fb      	ldr	r3, [r7, #12]
 800ac36:	22ff      	movs	r2, #255	@ 0xff
 800ac38:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800ac3c:	68fb      	ldr	r3, [r7, #12]
 800ac3e:	22ff      	movs	r2, #255	@ 0xff
 800ac40:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 800ac44:	683b      	ldr	r3, [r7, #0]
 800ac46:	2b00      	cmp	r3, #0
 800ac48:	d114      	bne.n	800ac74 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800ac4a:	68fb      	ldr	r3, [r7, #12]
 800ac4c:	691b      	ldr	r3, [r3, #16]
 800ac4e:	2b00      	cmp	r3, #0
 800ac50:	d01a      	beq.n	800ac88 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800ac52:	68fb      	ldr	r3, [r7, #12]
 800ac54:	3310      	adds	r3, #16
 800ac56:	4618      	mov	r0, r3
 800ac58:	f001 f942 	bl	800bee0 <xTaskRemoveFromEventList>
 800ac5c:	4603      	mov	r3, r0
 800ac5e:	2b00      	cmp	r3, #0
 800ac60:	d012      	beq.n	800ac88 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800ac62:	4b0d      	ldr	r3, [pc, #52]	@ (800ac98 <xQueueGenericReset+0xd0>)
 800ac64:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800ac68:	601a      	str	r2, [r3, #0]
 800ac6a:	f3bf 8f4f 	dsb	sy
 800ac6e:	f3bf 8f6f 	isb	sy
 800ac72:	e009      	b.n	800ac88 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800ac74:	68fb      	ldr	r3, [r7, #12]
 800ac76:	3310      	adds	r3, #16
 800ac78:	4618      	mov	r0, r3
 800ac7a:	f7ff fef1 	bl	800aa60 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800ac7e:	68fb      	ldr	r3, [r7, #12]
 800ac80:	3324      	adds	r3, #36	@ 0x24
 800ac82:	4618      	mov	r0, r3
 800ac84:	f7ff feec 	bl	800aa60 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800ac88:	f002 f8b8 	bl	800cdfc <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800ac8c:	2301      	movs	r3, #1
}
 800ac8e:	4618      	mov	r0, r3
 800ac90:	3710      	adds	r7, #16
 800ac92:	46bd      	mov	sp, r7
 800ac94:	bd80      	pop	{r7, pc}
 800ac96:	bf00      	nop
 800ac98:	e000ed04 	.word	0xe000ed04

0800ac9c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800ac9c:	b580      	push	{r7, lr}
 800ac9e:	b08e      	sub	sp, #56	@ 0x38
 800aca0:	af02      	add	r7, sp, #8
 800aca2:	60f8      	str	r0, [r7, #12]
 800aca4:	60b9      	str	r1, [r7, #8]
 800aca6:	607a      	str	r2, [r7, #4]
 800aca8:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800acaa:	68fb      	ldr	r3, [r7, #12]
 800acac:	2b00      	cmp	r3, #0
 800acae:	d10b      	bne.n	800acc8 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 800acb0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800acb4:	f383 8811 	msr	BASEPRI, r3
 800acb8:	f3bf 8f6f 	isb	sy
 800acbc:	f3bf 8f4f 	dsb	sy
 800acc0:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800acc2:	bf00      	nop
 800acc4:	bf00      	nop
 800acc6:	e7fd      	b.n	800acc4 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800acc8:	683b      	ldr	r3, [r7, #0]
 800acca:	2b00      	cmp	r3, #0
 800accc:	d10b      	bne.n	800ace6 <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 800acce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800acd2:	f383 8811 	msr	BASEPRI, r3
 800acd6:	f3bf 8f6f 	isb	sy
 800acda:	f3bf 8f4f 	dsb	sy
 800acde:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800ace0:	bf00      	nop
 800ace2:	bf00      	nop
 800ace4:	e7fd      	b.n	800ace2 <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800ace6:	687b      	ldr	r3, [r7, #4]
 800ace8:	2b00      	cmp	r3, #0
 800acea:	d002      	beq.n	800acf2 <xQueueGenericCreateStatic+0x56>
 800acec:	68bb      	ldr	r3, [r7, #8]
 800acee:	2b00      	cmp	r3, #0
 800acf0:	d001      	beq.n	800acf6 <xQueueGenericCreateStatic+0x5a>
 800acf2:	2301      	movs	r3, #1
 800acf4:	e000      	b.n	800acf8 <xQueueGenericCreateStatic+0x5c>
 800acf6:	2300      	movs	r3, #0
 800acf8:	2b00      	cmp	r3, #0
 800acfa:	d10b      	bne.n	800ad14 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 800acfc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ad00:	f383 8811 	msr	BASEPRI, r3
 800ad04:	f3bf 8f6f 	isb	sy
 800ad08:	f3bf 8f4f 	dsb	sy
 800ad0c:	623b      	str	r3, [r7, #32]
}
 800ad0e:	bf00      	nop
 800ad10:	bf00      	nop
 800ad12:	e7fd      	b.n	800ad10 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800ad14:	687b      	ldr	r3, [r7, #4]
 800ad16:	2b00      	cmp	r3, #0
 800ad18:	d102      	bne.n	800ad20 <xQueueGenericCreateStatic+0x84>
 800ad1a:	68bb      	ldr	r3, [r7, #8]
 800ad1c:	2b00      	cmp	r3, #0
 800ad1e:	d101      	bne.n	800ad24 <xQueueGenericCreateStatic+0x88>
 800ad20:	2301      	movs	r3, #1
 800ad22:	e000      	b.n	800ad26 <xQueueGenericCreateStatic+0x8a>
 800ad24:	2300      	movs	r3, #0
 800ad26:	2b00      	cmp	r3, #0
 800ad28:	d10b      	bne.n	800ad42 <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 800ad2a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ad2e:	f383 8811 	msr	BASEPRI, r3
 800ad32:	f3bf 8f6f 	isb	sy
 800ad36:	f3bf 8f4f 	dsb	sy
 800ad3a:	61fb      	str	r3, [r7, #28]
}
 800ad3c:	bf00      	nop
 800ad3e:	bf00      	nop
 800ad40:	e7fd      	b.n	800ad3e <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800ad42:	2350      	movs	r3, #80	@ 0x50
 800ad44:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800ad46:	697b      	ldr	r3, [r7, #20]
 800ad48:	2b50      	cmp	r3, #80	@ 0x50
 800ad4a:	d00b      	beq.n	800ad64 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 800ad4c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ad50:	f383 8811 	msr	BASEPRI, r3
 800ad54:	f3bf 8f6f 	isb	sy
 800ad58:	f3bf 8f4f 	dsb	sy
 800ad5c:	61bb      	str	r3, [r7, #24]
}
 800ad5e:	bf00      	nop
 800ad60:	bf00      	nop
 800ad62:	e7fd      	b.n	800ad60 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800ad64:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800ad66:	683b      	ldr	r3, [r7, #0]
 800ad68:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 800ad6a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ad6c:	2b00      	cmp	r3, #0
 800ad6e:	d00d      	beq.n	800ad8c <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800ad70:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ad72:	2201      	movs	r2, #1
 800ad74:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800ad78:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 800ad7c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ad7e:	9300      	str	r3, [sp, #0]
 800ad80:	4613      	mov	r3, r2
 800ad82:	687a      	ldr	r2, [r7, #4]
 800ad84:	68b9      	ldr	r1, [r7, #8]
 800ad86:	68f8      	ldr	r0, [r7, #12]
 800ad88:	f000 f805 	bl	800ad96 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800ad8c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 800ad8e:	4618      	mov	r0, r3
 800ad90:	3730      	adds	r7, #48	@ 0x30
 800ad92:	46bd      	mov	sp, r7
 800ad94:	bd80      	pop	{r7, pc}

0800ad96 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800ad96:	b580      	push	{r7, lr}
 800ad98:	b084      	sub	sp, #16
 800ad9a:	af00      	add	r7, sp, #0
 800ad9c:	60f8      	str	r0, [r7, #12]
 800ad9e:	60b9      	str	r1, [r7, #8]
 800ada0:	607a      	str	r2, [r7, #4]
 800ada2:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800ada4:	68bb      	ldr	r3, [r7, #8]
 800ada6:	2b00      	cmp	r3, #0
 800ada8:	d103      	bne.n	800adb2 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800adaa:	69bb      	ldr	r3, [r7, #24]
 800adac:	69ba      	ldr	r2, [r7, #24]
 800adae:	601a      	str	r2, [r3, #0]
 800adb0:	e002      	b.n	800adb8 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800adb2:	69bb      	ldr	r3, [r7, #24]
 800adb4:	687a      	ldr	r2, [r7, #4]
 800adb6:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800adb8:	69bb      	ldr	r3, [r7, #24]
 800adba:	68fa      	ldr	r2, [r7, #12]
 800adbc:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800adbe:	69bb      	ldr	r3, [r7, #24]
 800adc0:	68ba      	ldr	r2, [r7, #8]
 800adc2:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800adc4:	2101      	movs	r1, #1
 800adc6:	69b8      	ldr	r0, [r7, #24]
 800adc8:	f7ff fefe 	bl	800abc8 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800adcc:	69bb      	ldr	r3, [r7, #24]
 800adce:	78fa      	ldrb	r2, [r7, #3]
 800add0:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800add4:	bf00      	nop
 800add6:	3710      	adds	r7, #16
 800add8:	46bd      	mov	sp, r7
 800adda:	bd80      	pop	{r7, pc}

0800addc <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800addc:	b580      	push	{r7, lr}
 800adde:	b08e      	sub	sp, #56	@ 0x38
 800ade0:	af00      	add	r7, sp, #0
 800ade2:	60f8      	str	r0, [r7, #12]
 800ade4:	60b9      	str	r1, [r7, #8]
 800ade6:	607a      	str	r2, [r7, #4]
 800ade8:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800adea:	2300      	movs	r3, #0
 800adec:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800adee:	68fb      	ldr	r3, [r7, #12]
 800adf0:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800adf2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800adf4:	2b00      	cmp	r3, #0
 800adf6:	d10b      	bne.n	800ae10 <xQueueGenericSend+0x34>
	__asm volatile
 800adf8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800adfc:	f383 8811 	msr	BASEPRI, r3
 800ae00:	f3bf 8f6f 	isb	sy
 800ae04:	f3bf 8f4f 	dsb	sy
 800ae08:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800ae0a:	bf00      	nop
 800ae0c:	bf00      	nop
 800ae0e:	e7fd      	b.n	800ae0c <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800ae10:	68bb      	ldr	r3, [r7, #8]
 800ae12:	2b00      	cmp	r3, #0
 800ae14:	d103      	bne.n	800ae1e <xQueueGenericSend+0x42>
 800ae16:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ae18:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ae1a:	2b00      	cmp	r3, #0
 800ae1c:	d101      	bne.n	800ae22 <xQueueGenericSend+0x46>
 800ae1e:	2301      	movs	r3, #1
 800ae20:	e000      	b.n	800ae24 <xQueueGenericSend+0x48>
 800ae22:	2300      	movs	r3, #0
 800ae24:	2b00      	cmp	r3, #0
 800ae26:	d10b      	bne.n	800ae40 <xQueueGenericSend+0x64>
	__asm volatile
 800ae28:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ae2c:	f383 8811 	msr	BASEPRI, r3
 800ae30:	f3bf 8f6f 	isb	sy
 800ae34:	f3bf 8f4f 	dsb	sy
 800ae38:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800ae3a:	bf00      	nop
 800ae3c:	bf00      	nop
 800ae3e:	e7fd      	b.n	800ae3c <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800ae40:	683b      	ldr	r3, [r7, #0]
 800ae42:	2b02      	cmp	r3, #2
 800ae44:	d103      	bne.n	800ae4e <xQueueGenericSend+0x72>
 800ae46:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ae48:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ae4a:	2b01      	cmp	r3, #1
 800ae4c:	d101      	bne.n	800ae52 <xQueueGenericSend+0x76>
 800ae4e:	2301      	movs	r3, #1
 800ae50:	e000      	b.n	800ae54 <xQueueGenericSend+0x78>
 800ae52:	2300      	movs	r3, #0
 800ae54:	2b00      	cmp	r3, #0
 800ae56:	d10b      	bne.n	800ae70 <xQueueGenericSend+0x94>
	__asm volatile
 800ae58:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ae5c:	f383 8811 	msr	BASEPRI, r3
 800ae60:	f3bf 8f6f 	isb	sy
 800ae64:	f3bf 8f4f 	dsb	sy
 800ae68:	623b      	str	r3, [r7, #32]
}
 800ae6a:	bf00      	nop
 800ae6c:	bf00      	nop
 800ae6e:	e7fd      	b.n	800ae6c <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800ae70:	f001 fa24 	bl	800c2bc <xTaskGetSchedulerState>
 800ae74:	4603      	mov	r3, r0
 800ae76:	2b00      	cmp	r3, #0
 800ae78:	d102      	bne.n	800ae80 <xQueueGenericSend+0xa4>
 800ae7a:	687b      	ldr	r3, [r7, #4]
 800ae7c:	2b00      	cmp	r3, #0
 800ae7e:	d101      	bne.n	800ae84 <xQueueGenericSend+0xa8>
 800ae80:	2301      	movs	r3, #1
 800ae82:	e000      	b.n	800ae86 <xQueueGenericSend+0xaa>
 800ae84:	2300      	movs	r3, #0
 800ae86:	2b00      	cmp	r3, #0
 800ae88:	d10b      	bne.n	800aea2 <xQueueGenericSend+0xc6>
	__asm volatile
 800ae8a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ae8e:	f383 8811 	msr	BASEPRI, r3
 800ae92:	f3bf 8f6f 	isb	sy
 800ae96:	f3bf 8f4f 	dsb	sy
 800ae9a:	61fb      	str	r3, [r7, #28]
}
 800ae9c:	bf00      	nop
 800ae9e:	bf00      	nop
 800aea0:	e7fd      	b.n	800ae9e <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800aea2:	f001 ff79 	bl	800cd98 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800aea6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aea8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800aeaa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aeac:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800aeae:	429a      	cmp	r2, r3
 800aeb0:	d302      	bcc.n	800aeb8 <xQueueGenericSend+0xdc>
 800aeb2:	683b      	ldr	r3, [r7, #0]
 800aeb4:	2b02      	cmp	r3, #2
 800aeb6:	d129      	bne.n	800af0c <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800aeb8:	683a      	ldr	r2, [r7, #0]
 800aeba:	68b9      	ldr	r1, [r7, #8]
 800aebc:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800aebe:	f000 fa0f 	bl	800b2e0 <prvCopyDataToQueue>
 800aec2:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800aec4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aec6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800aec8:	2b00      	cmp	r3, #0
 800aeca:	d010      	beq.n	800aeee <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800aecc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aece:	3324      	adds	r3, #36	@ 0x24
 800aed0:	4618      	mov	r0, r3
 800aed2:	f001 f805 	bl	800bee0 <xTaskRemoveFromEventList>
 800aed6:	4603      	mov	r3, r0
 800aed8:	2b00      	cmp	r3, #0
 800aeda:	d013      	beq.n	800af04 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800aedc:	4b3f      	ldr	r3, [pc, #252]	@ (800afdc <xQueueGenericSend+0x200>)
 800aede:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800aee2:	601a      	str	r2, [r3, #0]
 800aee4:	f3bf 8f4f 	dsb	sy
 800aee8:	f3bf 8f6f 	isb	sy
 800aeec:	e00a      	b.n	800af04 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800aeee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800aef0:	2b00      	cmp	r3, #0
 800aef2:	d007      	beq.n	800af04 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800aef4:	4b39      	ldr	r3, [pc, #228]	@ (800afdc <xQueueGenericSend+0x200>)
 800aef6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800aefa:	601a      	str	r2, [r3, #0]
 800aefc:	f3bf 8f4f 	dsb	sy
 800af00:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800af04:	f001 ff7a 	bl	800cdfc <vPortExitCritical>
				return pdPASS;
 800af08:	2301      	movs	r3, #1
 800af0a:	e063      	b.n	800afd4 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800af0c:	687b      	ldr	r3, [r7, #4]
 800af0e:	2b00      	cmp	r3, #0
 800af10:	d103      	bne.n	800af1a <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800af12:	f001 ff73 	bl	800cdfc <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800af16:	2300      	movs	r3, #0
 800af18:	e05c      	b.n	800afd4 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800af1a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800af1c:	2b00      	cmp	r3, #0
 800af1e:	d106      	bne.n	800af2e <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800af20:	f107 0314 	add.w	r3, r7, #20
 800af24:	4618      	mov	r0, r3
 800af26:	f001 f867 	bl	800bff8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800af2a:	2301      	movs	r3, #1
 800af2c:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800af2e:	f001 ff65 	bl	800cdfc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800af32:	f000 fda7 	bl	800ba84 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800af36:	f001 ff2f 	bl	800cd98 <vPortEnterCritical>
 800af3a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800af3c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800af40:	b25b      	sxtb	r3, r3
 800af42:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800af46:	d103      	bne.n	800af50 <xQueueGenericSend+0x174>
 800af48:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800af4a:	2200      	movs	r2, #0
 800af4c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800af50:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800af52:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800af56:	b25b      	sxtb	r3, r3
 800af58:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800af5c:	d103      	bne.n	800af66 <xQueueGenericSend+0x18a>
 800af5e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800af60:	2200      	movs	r2, #0
 800af62:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800af66:	f001 ff49 	bl	800cdfc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800af6a:	1d3a      	adds	r2, r7, #4
 800af6c:	f107 0314 	add.w	r3, r7, #20
 800af70:	4611      	mov	r1, r2
 800af72:	4618      	mov	r0, r3
 800af74:	f001 f856 	bl	800c024 <xTaskCheckForTimeOut>
 800af78:	4603      	mov	r3, r0
 800af7a:	2b00      	cmp	r3, #0
 800af7c:	d124      	bne.n	800afc8 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800af7e:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800af80:	f000 faa6 	bl	800b4d0 <prvIsQueueFull>
 800af84:	4603      	mov	r3, r0
 800af86:	2b00      	cmp	r3, #0
 800af88:	d018      	beq.n	800afbc <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800af8a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800af8c:	3310      	adds	r3, #16
 800af8e:	687a      	ldr	r2, [r7, #4]
 800af90:	4611      	mov	r1, r2
 800af92:	4618      	mov	r0, r3
 800af94:	f000 ff52 	bl	800be3c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800af98:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800af9a:	f000 fa31 	bl	800b400 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800af9e:	f000 fd7f 	bl	800baa0 <xTaskResumeAll>
 800afa2:	4603      	mov	r3, r0
 800afa4:	2b00      	cmp	r3, #0
 800afa6:	f47f af7c 	bne.w	800aea2 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 800afaa:	4b0c      	ldr	r3, [pc, #48]	@ (800afdc <xQueueGenericSend+0x200>)
 800afac:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800afb0:	601a      	str	r2, [r3, #0]
 800afb2:	f3bf 8f4f 	dsb	sy
 800afb6:	f3bf 8f6f 	isb	sy
 800afba:	e772      	b.n	800aea2 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800afbc:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800afbe:	f000 fa1f 	bl	800b400 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800afc2:	f000 fd6d 	bl	800baa0 <xTaskResumeAll>
 800afc6:	e76c      	b.n	800aea2 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800afc8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800afca:	f000 fa19 	bl	800b400 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800afce:	f000 fd67 	bl	800baa0 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800afd2:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800afd4:	4618      	mov	r0, r3
 800afd6:	3738      	adds	r7, #56	@ 0x38
 800afd8:	46bd      	mov	sp, r7
 800afda:	bd80      	pop	{r7, pc}
 800afdc:	e000ed04 	.word	0xe000ed04

0800afe0 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800afe0:	b580      	push	{r7, lr}
 800afe2:	b090      	sub	sp, #64	@ 0x40
 800afe4:	af00      	add	r7, sp, #0
 800afe6:	60f8      	str	r0, [r7, #12]
 800afe8:	60b9      	str	r1, [r7, #8]
 800afea:	607a      	str	r2, [r7, #4]
 800afec:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800afee:	68fb      	ldr	r3, [r7, #12]
 800aff0:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 800aff2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aff4:	2b00      	cmp	r3, #0
 800aff6:	d10b      	bne.n	800b010 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 800aff8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800affc:	f383 8811 	msr	BASEPRI, r3
 800b000:	f3bf 8f6f 	isb	sy
 800b004:	f3bf 8f4f 	dsb	sy
 800b008:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800b00a:	bf00      	nop
 800b00c:	bf00      	nop
 800b00e:	e7fd      	b.n	800b00c <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800b010:	68bb      	ldr	r3, [r7, #8]
 800b012:	2b00      	cmp	r3, #0
 800b014:	d103      	bne.n	800b01e <xQueueGenericSendFromISR+0x3e>
 800b016:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b018:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b01a:	2b00      	cmp	r3, #0
 800b01c:	d101      	bne.n	800b022 <xQueueGenericSendFromISR+0x42>
 800b01e:	2301      	movs	r3, #1
 800b020:	e000      	b.n	800b024 <xQueueGenericSendFromISR+0x44>
 800b022:	2300      	movs	r3, #0
 800b024:	2b00      	cmp	r3, #0
 800b026:	d10b      	bne.n	800b040 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 800b028:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b02c:	f383 8811 	msr	BASEPRI, r3
 800b030:	f3bf 8f6f 	isb	sy
 800b034:	f3bf 8f4f 	dsb	sy
 800b038:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800b03a:	bf00      	nop
 800b03c:	bf00      	nop
 800b03e:	e7fd      	b.n	800b03c <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800b040:	683b      	ldr	r3, [r7, #0]
 800b042:	2b02      	cmp	r3, #2
 800b044:	d103      	bne.n	800b04e <xQueueGenericSendFromISR+0x6e>
 800b046:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b048:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b04a:	2b01      	cmp	r3, #1
 800b04c:	d101      	bne.n	800b052 <xQueueGenericSendFromISR+0x72>
 800b04e:	2301      	movs	r3, #1
 800b050:	e000      	b.n	800b054 <xQueueGenericSendFromISR+0x74>
 800b052:	2300      	movs	r3, #0
 800b054:	2b00      	cmp	r3, #0
 800b056:	d10b      	bne.n	800b070 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 800b058:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b05c:	f383 8811 	msr	BASEPRI, r3
 800b060:	f3bf 8f6f 	isb	sy
 800b064:	f3bf 8f4f 	dsb	sy
 800b068:	623b      	str	r3, [r7, #32]
}
 800b06a:	bf00      	nop
 800b06c:	bf00      	nop
 800b06e:	e7fd      	b.n	800b06c <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800b070:	f001 ff72 	bl	800cf58 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800b074:	f3ef 8211 	mrs	r2, BASEPRI
 800b078:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b07c:	f383 8811 	msr	BASEPRI, r3
 800b080:	f3bf 8f6f 	isb	sy
 800b084:	f3bf 8f4f 	dsb	sy
 800b088:	61fa      	str	r2, [r7, #28]
 800b08a:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800b08c:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800b08e:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800b090:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b092:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800b094:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b096:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b098:	429a      	cmp	r2, r3
 800b09a:	d302      	bcc.n	800b0a2 <xQueueGenericSendFromISR+0xc2>
 800b09c:	683b      	ldr	r3, [r7, #0]
 800b09e:	2b02      	cmp	r3, #2
 800b0a0:	d12f      	bne.n	800b102 <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800b0a2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b0a4:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800b0a8:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800b0ac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b0ae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b0b0:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800b0b2:	683a      	ldr	r2, [r7, #0]
 800b0b4:	68b9      	ldr	r1, [r7, #8]
 800b0b6:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800b0b8:	f000 f912 	bl	800b2e0 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800b0bc:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 800b0c0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800b0c4:	d112      	bne.n	800b0ec <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800b0c6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b0c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b0ca:	2b00      	cmp	r3, #0
 800b0cc:	d016      	beq.n	800b0fc <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800b0ce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b0d0:	3324      	adds	r3, #36	@ 0x24
 800b0d2:	4618      	mov	r0, r3
 800b0d4:	f000 ff04 	bl	800bee0 <xTaskRemoveFromEventList>
 800b0d8:	4603      	mov	r3, r0
 800b0da:	2b00      	cmp	r3, #0
 800b0dc:	d00e      	beq.n	800b0fc <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800b0de:	687b      	ldr	r3, [r7, #4]
 800b0e0:	2b00      	cmp	r3, #0
 800b0e2:	d00b      	beq.n	800b0fc <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800b0e4:	687b      	ldr	r3, [r7, #4]
 800b0e6:	2201      	movs	r2, #1
 800b0e8:	601a      	str	r2, [r3, #0]
 800b0ea:	e007      	b.n	800b0fc <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800b0ec:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800b0f0:	3301      	adds	r3, #1
 800b0f2:	b2db      	uxtb	r3, r3
 800b0f4:	b25a      	sxtb	r2, r3
 800b0f6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b0f8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 800b0fc:	2301      	movs	r3, #1
 800b0fe:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 800b100:	e001      	b.n	800b106 <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800b102:	2300      	movs	r3, #0
 800b104:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800b106:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b108:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800b10a:	697b      	ldr	r3, [r7, #20]
 800b10c:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800b110:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800b112:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 800b114:	4618      	mov	r0, r3
 800b116:	3740      	adds	r7, #64	@ 0x40
 800b118:	46bd      	mov	sp, r7
 800b11a:	bd80      	pop	{r7, pc}

0800b11c <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800b11c:	b580      	push	{r7, lr}
 800b11e:	b08c      	sub	sp, #48	@ 0x30
 800b120:	af00      	add	r7, sp, #0
 800b122:	60f8      	str	r0, [r7, #12]
 800b124:	60b9      	str	r1, [r7, #8]
 800b126:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800b128:	2300      	movs	r3, #0
 800b12a:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800b12c:	68fb      	ldr	r3, [r7, #12]
 800b12e:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800b130:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b132:	2b00      	cmp	r3, #0
 800b134:	d10b      	bne.n	800b14e <xQueueReceive+0x32>
	__asm volatile
 800b136:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b13a:	f383 8811 	msr	BASEPRI, r3
 800b13e:	f3bf 8f6f 	isb	sy
 800b142:	f3bf 8f4f 	dsb	sy
 800b146:	623b      	str	r3, [r7, #32]
}
 800b148:	bf00      	nop
 800b14a:	bf00      	nop
 800b14c:	e7fd      	b.n	800b14a <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800b14e:	68bb      	ldr	r3, [r7, #8]
 800b150:	2b00      	cmp	r3, #0
 800b152:	d103      	bne.n	800b15c <xQueueReceive+0x40>
 800b154:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b156:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b158:	2b00      	cmp	r3, #0
 800b15a:	d101      	bne.n	800b160 <xQueueReceive+0x44>
 800b15c:	2301      	movs	r3, #1
 800b15e:	e000      	b.n	800b162 <xQueueReceive+0x46>
 800b160:	2300      	movs	r3, #0
 800b162:	2b00      	cmp	r3, #0
 800b164:	d10b      	bne.n	800b17e <xQueueReceive+0x62>
	__asm volatile
 800b166:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b16a:	f383 8811 	msr	BASEPRI, r3
 800b16e:	f3bf 8f6f 	isb	sy
 800b172:	f3bf 8f4f 	dsb	sy
 800b176:	61fb      	str	r3, [r7, #28]
}
 800b178:	bf00      	nop
 800b17a:	bf00      	nop
 800b17c:	e7fd      	b.n	800b17a <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800b17e:	f001 f89d 	bl	800c2bc <xTaskGetSchedulerState>
 800b182:	4603      	mov	r3, r0
 800b184:	2b00      	cmp	r3, #0
 800b186:	d102      	bne.n	800b18e <xQueueReceive+0x72>
 800b188:	687b      	ldr	r3, [r7, #4]
 800b18a:	2b00      	cmp	r3, #0
 800b18c:	d101      	bne.n	800b192 <xQueueReceive+0x76>
 800b18e:	2301      	movs	r3, #1
 800b190:	e000      	b.n	800b194 <xQueueReceive+0x78>
 800b192:	2300      	movs	r3, #0
 800b194:	2b00      	cmp	r3, #0
 800b196:	d10b      	bne.n	800b1b0 <xQueueReceive+0x94>
	__asm volatile
 800b198:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b19c:	f383 8811 	msr	BASEPRI, r3
 800b1a0:	f3bf 8f6f 	isb	sy
 800b1a4:	f3bf 8f4f 	dsb	sy
 800b1a8:	61bb      	str	r3, [r7, #24]
}
 800b1aa:	bf00      	nop
 800b1ac:	bf00      	nop
 800b1ae:	e7fd      	b.n	800b1ac <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800b1b0:	f001 fdf2 	bl	800cd98 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800b1b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b1b6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b1b8:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800b1ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b1bc:	2b00      	cmp	r3, #0
 800b1be:	d01f      	beq.n	800b200 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800b1c0:	68b9      	ldr	r1, [r7, #8]
 800b1c2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800b1c4:	f000 f8f6 	bl	800b3b4 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800b1c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b1ca:	1e5a      	subs	r2, r3, #1
 800b1cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b1ce:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800b1d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b1d2:	691b      	ldr	r3, [r3, #16]
 800b1d4:	2b00      	cmp	r3, #0
 800b1d6:	d00f      	beq.n	800b1f8 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800b1d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b1da:	3310      	adds	r3, #16
 800b1dc:	4618      	mov	r0, r3
 800b1de:	f000 fe7f 	bl	800bee0 <xTaskRemoveFromEventList>
 800b1e2:	4603      	mov	r3, r0
 800b1e4:	2b00      	cmp	r3, #0
 800b1e6:	d007      	beq.n	800b1f8 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800b1e8:	4b3c      	ldr	r3, [pc, #240]	@ (800b2dc <xQueueReceive+0x1c0>)
 800b1ea:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b1ee:	601a      	str	r2, [r3, #0]
 800b1f0:	f3bf 8f4f 	dsb	sy
 800b1f4:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800b1f8:	f001 fe00 	bl	800cdfc <vPortExitCritical>
				return pdPASS;
 800b1fc:	2301      	movs	r3, #1
 800b1fe:	e069      	b.n	800b2d4 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800b200:	687b      	ldr	r3, [r7, #4]
 800b202:	2b00      	cmp	r3, #0
 800b204:	d103      	bne.n	800b20e <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800b206:	f001 fdf9 	bl	800cdfc <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800b20a:	2300      	movs	r3, #0
 800b20c:	e062      	b.n	800b2d4 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800b20e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b210:	2b00      	cmp	r3, #0
 800b212:	d106      	bne.n	800b222 <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800b214:	f107 0310 	add.w	r3, r7, #16
 800b218:	4618      	mov	r0, r3
 800b21a:	f000 feed 	bl	800bff8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800b21e:	2301      	movs	r3, #1
 800b220:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800b222:	f001 fdeb 	bl	800cdfc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800b226:	f000 fc2d 	bl	800ba84 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800b22a:	f001 fdb5 	bl	800cd98 <vPortEnterCritical>
 800b22e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b230:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800b234:	b25b      	sxtb	r3, r3
 800b236:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800b23a:	d103      	bne.n	800b244 <xQueueReceive+0x128>
 800b23c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b23e:	2200      	movs	r2, #0
 800b240:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800b244:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b246:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800b24a:	b25b      	sxtb	r3, r3
 800b24c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800b250:	d103      	bne.n	800b25a <xQueueReceive+0x13e>
 800b252:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b254:	2200      	movs	r2, #0
 800b256:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800b25a:	f001 fdcf 	bl	800cdfc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800b25e:	1d3a      	adds	r2, r7, #4
 800b260:	f107 0310 	add.w	r3, r7, #16
 800b264:	4611      	mov	r1, r2
 800b266:	4618      	mov	r0, r3
 800b268:	f000 fedc 	bl	800c024 <xTaskCheckForTimeOut>
 800b26c:	4603      	mov	r3, r0
 800b26e:	2b00      	cmp	r3, #0
 800b270:	d123      	bne.n	800b2ba <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800b272:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800b274:	f000 f916 	bl	800b4a4 <prvIsQueueEmpty>
 800b278:	4603      	mov	r3, r0
 800b27a:	2b00      	cmp	r3, #0
 800b27c:	d017      	beq.n	800b2ae <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800b27e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b280:	3324      	adds	r3, #36	@ 0x24
 800b282:	687a      	ldr	r2, [r7, #4]
 800b284:	4611      	mov	r1, r2
 800b286:	4618      	mov	r0, r3
 800b288:	f000 fdd8 	bl	800be3c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800b28c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800b28e:	f000 f8b7 	bl	800b400 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800b292:	f000 fc05 	bl	800baa0 <xTaskResumeAll>
 800b296:	4603      	mov	r3, r0
 800b298:	2b00      	cmp	r3, #0
 800b29a:	d189      	bne.n	800b1b0 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 800b29c:	4b0f      	ldr	r3, [pc, #60]	@ (800b2dc <xQueueReceive+0x1c0>)
 800b29e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b2a2:	601a      	str	r2, [r3, #0]
 800b2a4:	f3bf 8f4f 	dsb	sy
 800b2a8:	f3bf 8f6f 	isb	sy
 800b2ac:	e780      	b.n	800b1b0 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800b2ae:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800b2b0:	f000 f8a6 	bl	800b400 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800b2b4:	f000 fbf4 	bl	800baa0 <xTaskResumeAll>
 800b2b8:	e77a      	b.n	800b1b0 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800b2ba:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800b2bc:	f000 f8a0 	bl	800b400 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800b2c0:	f000 fbee 	bl	800baa0 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800b2c4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800b2c6:	f000 f8ed 	bl	800b4a4 <prvIsQueueEmpty>
 800b2ca:	4603      	mov	r3, r0
 800b2cc:	2b00      	cmp	r3, #0
 800b2ce:	f43f af6f 	beq.w	800b1b0 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800b2d2:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800b2d4:	4618      	mov	r0, r3
 800b2d6:	3730      	adds	r7, #48	@ 0x30
 800b2d8:	46bd      	mov	sp, r7
 800b2da:	bd80      	pop	{r7, pc}
 800b2dc:	e000ed04 	.word	0xe000ed04

0800b2e0 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800b2e0:	b580      	push	{r7, lr}
 800b2e2:	b086      	sub	sp, #24
 800b2e4:	af00      	add	r7, sp, #0
 800b2e6:	60f8      	str	r0, [r7, #12]
 800b2e8:	60b9      	str	r1, [r7, #8]
 800b2ea:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800b2ec:	2300      	movs	r3, #0
 800b2ee:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800b2f0:	68fb      	ldr	r3, [r7, #12]
 800b2f2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b2f4:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800b2f6:	68fb      	ldr	r3, [r7, #12]
 800b2f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b2fa:	2b00      	cmp	r3, #0
 800b2fc:	d10d      	bne.n	800b31a <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800b2fe:	68fb      	ldr	r3, [r7, #12]
 800b300:	681b      	ldr	r3, [r3, #0]
 800b302:	2b00      	cmp	r3, #0
 800b304:	d14d      	bne.n	800b3a2 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800b306:	68fb      	ldr	r3, [r7, #12]
 800b308:	689b      	ldr	r3, [r3, #8]
 800b30a:	4618      	mov	r0, r3
 800b30c:	f000 fff4 	bl	800c2f8 <xTaskPriorityDisinherit>
 800b310:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800b312:	68fb      	ldr	r3, [r7, #12]
 800b314:	2200      	movs	r2, #0
 800b316:	609a      	str	r2, [r3, #8]
 800b318:	e043      	b.n	800b3a2 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800b31a:	687b      	ldr	r3, [r7, #4]
 800b31c:	2b00      	cmp	r3, #0
 800b31e:	d119      	bne.n	800b354 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800b320:	68fb      	ldr	r3, [r7, #12]
 800b322:	6858      	ldr	r0, [r3, #4]
 800b324:	68fb      	ldr	r3, [r7, #12]
 800b326:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b328:	461a      	mov	r2, r3
 800b32a:	68b9      	ldr	r1, [r7, #8]
 800b32c:	f00e fd89 	bl	8019e42 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800b330:	68fb      	ldr	r3, [r7, #12]
 800b332:	685a      	ldr	r2, [r3, #4]
 800b334:	68fb      	ldr	r3, [r7, #12]
 800b336:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b338:	441a      	add	r2, r3
 800b33a:	68fb      	ldr	r3, [r7, #12]
 800b33c:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800b33e:	68fb      	ldr	r3, [r7, #12]
 800b340:	685a      	ldr	r2, [r3, #4]
 800b342:	68fb      	ldr	r3, [r7, #12]
 800b344:	689b      	ldr	r3, [r3, #8]
 800b346:	429a      	cmp	r2, r3
 800b348:	d32b      	bcc.n	800b3a2 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800b34a:	68fb      	ldr	r3, [r7, #12]
 800b34c:	681a      	ldr	r2, [r3, #0]
 800b34e:	68fb      	ldr	r3, [r7, #12]
 800b350:	605a      	str	r2, [r3, #4]
 800b352:	e026      	b.n	800b3a2 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800b354:	68fb      	ldr	r3, [r7, #12]
 800b356:	68d8      	ldr	r0, [r3, #12]
 800b358:	68fb      	ldr	r3, [r7, #12]
 800b35a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b35c:	461a      	mov	r2, r3
 800b35e:	68b9      	ldr	r1, [r7, #8]
 800b360:	f00e fd6f 	bl	8019e42 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800b364:	68fb      	ldr	r3, [r7, #12]
 800b366:	68da      	ldr	r2, [r3, #12]
 800b368:	68fb      	ldr	r3, [r7, #12]
 800b36a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b36c:	425b      	negs	r3, r3
 800b36e:	441a      	add	r2, r3
 800b370:	68fb      	ldr	r3, [r7, #12]
 800b372:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800b374:	68fb      	ldr	r3, [r7, #12]
 800b376:	68da      	ldr	r2, [r3, #12]
 800b378:	68fb      	ldr	r3, [r7, #12]
 800b37a:	681b      	ldr	r3, [r3, #0]
 800b37c:	429a      	cmp	r2, r3
 800b37e:	d207      	bcs.n	800b390 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800b380:	68fb      	ldr	r3, [r7, #12]
 800b382:	689a      	ldr	r2, [r3, #8]
 800b384:	68fb      	ldr	r3, [r7, #12]
 800b386:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b388:	425b      	negs	r3, r3
 800b38a:	441a      	add	r2, r3
 800b38c:	68fb      	ldr	r3, [r7, #12]
 800b38e:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800b390:	687b      	ldr	r3, [r7, #4]
 800b392:	2b02      	cmp	r3, #2
 800b394:	d105      	bne.n	800b3a2 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800b396:	693b      	ldr	r3, [r7, #16]
 800b398:	2b00      	cmp	r3, #0
 800b39a:	d002      	beq.n	800b3a2 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800b39c:	693b      	ldr	r3, [r7, #16]
 800b39e:	3b01      	subs	r3, #1
 800b3a0:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800b3a2:	693b      	ldr	r3, [r7, #16]
 800b3a4:	1c5a      	adds	r2, r3, #1
 800b3a6:	68fb      	ldr	r3, [r7, #12]
 800b3a8:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 800b3aa:	697b      	ldr	r3, [r7, #20]
}
 800b3ac:	4618      	mov	r0, r3
 800b3ae:	3718      	adds	r7, #24
 800b3b0:	46bd      	mov	sp, r7
 800b3b2:	bd80      	pop	{r7, pc}

0800b3b4 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800b3b4:	b580      	push	{r7, lr}
 800b3b6:	b082      	sub	sp, #8
 800b3b8:	af00      	add	r7, sp, #0
 800b3ba:	6078      	str	r0, [r7, #4]
 800b3bc:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800b3be:	687b      	ldr	r3, [r7, #4]
 800b3c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b3c2:	2b00      	cmp	r3, #0
 800b3c4:	d018      	beq.n	800b3f8 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800b3c6:	687b      	ldr	r3, [r7, #4]
 800b3c8:	68da      	ldr	r2, [r3, #12]
 800b3ca:	687b      	ldr	r3, [r7, #4]
 800b3cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b3ce:	441a      	add	r2, r3
 800b3d0:	687b      	ldr	r3, [r7, #4]
 800b3d2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800b3d4:	687b      	ldr	r3, [r7, #4]
 800b3d6:	68da      	ldr	r2, [r3, #12]
 800b3d8:	687b      	ldr	r3, [r7, #4]
 800b3da:	689b      	ldr	r3, [r3, #8]
 800b3dc:	429a      	cmp	r2, r3
 800b3de:	d303      	bcc.n	800b3e8 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800b3e0:	687b      	ldr	r3, [r7, #4]
 800b3e2:	681a      	ldr	r2, [r3, #0]
 800b3e4:	687b      	ldr	r3, [r7, #4]
 800b3e6:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800b3e8:	687b      	ldr	r3, [r7, #4]
 800b3ea:	68d9      	ldr	r1, [r3, #12]
 800b3ec:	687b      	ldr	r3, [r7, #4]
 800b3ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b3f0:	461a      	mov	r2, r3
 800b3f2:	6838      	ldr	r0, [r7, #0]
 800b3f4:	f00e fd25 	bl	8019e42 <memcpy>
	}
}
 800b3f8:	bf00      	nop
 800b3fa:	3708      	adds	r7, #8
 800b3fc:	46bd      	mov	sp, r7
 800b3fe:	bd80      	pop	{r7, pc}

0800b400 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800b400:	b580      	push	{r7, lr}
 800b402:	b084      	sub	sp, #16
 800b404:	af00      	add	r7, sp, #0
 800b406:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800b408:	f001 fcc6 	bl	800cd98 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800b40c:	687b      	ldr	r3, [r7, #4]
 800b40e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800b412:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800b414:	e011      	b.n	800b43a <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800b416:	687b      	ldr	r3, [r7, #4]
 800b418:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b41a:	2b00      	cmp	r3, #0
 800b41c:	d012      	beq.n	800b444 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800b41e:	687b      	ldr	r3, [r7, #4]
 800b420:	3324      	adds	r3, #36	@ 0x24
 800b422:	4618      	mov	r0, r3
 800b424:	f000 fd5c 	bl	800bee0 <xTaskRemoveFromEventList>
 800b428:	4603      	mov	r3, r0
 800b42a:	2b00      	cmp	r3, #0
 800b42c:	d001      	beq.n	800b432 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800b42e:	f000 fe5d 	bl	800c0ec <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800b432:	7bfb      	ldrb	r3, [r7, #15]
 800b434:	3b01      	subs	r3, #1
 800b436:	b2db      	uxtb	r3, r3
 800b438:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800b43a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b43e:	2b00      	cmp	r3, #0
 800b440:	dce9      	bgt.n	800b416 <prvUnlockQueue+0x16>
 800b442:	e000      	b.n	800b446 <prvUnlockQueue+0x46>
					break;
 800b444:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800b446:	687b      	ldr	r3, [r7, #4]
 800b448:	22ff      	movs	r2, #255	@ 0xff
 800b44a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 800b44e:	f001 fcd5 	bl	800cdfc <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800b452:	f001 fca1 	bl	800cd98 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800b456:	687b      	ldr	r3, [r7, #4]
 800b458:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800b45c:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800b45e:	e011      	b.n	800b484 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800b460:	687b      	ldr	r3, [r7, #4]
 800b462:	691b      	ldr	r3, [r3, #16]
 800b464:	2b00      	cmp	r3, #0
 800b466:	d012      	beq.n	800b48e <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800b468:	687b      	ldr	r3, [r7, #4]
 800b46a:	3310      	adds	r3, #16
 800b46c:	4618      	mov	r0, r3
 800b46e:	f000 fd37 	bl	800bee0 <xTaskRemoveFromEventList>
 800b472:	4603      	mov	r3, r0
 800b474:	2b00      	cmp	r3, #0
 800b476:	d001      	beq.n	800b47c <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800b478:	f000 fe38 	bl	800c0ec <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800b47c:	7bbb      	ldrb	r3, [r7, #14]
 800b47e:	3b01      	subs	r3, #1
 800b480:	b2db      	uxtb	r3, r3
 800b482:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800b484:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b488:	2b00      	cmp	r3, #0
 800b48a:	dce9      	bgt.n	800b460 <prvUnlockQueue+0x60>
 800b48c:	e000      	b.n	800b490 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800b48e:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800b490:	687b      	ldr	r3, [r7, #4]
 800b492:	22ff      	movs	r2, #255	@ 0xff
 800b494:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 800b498:	f001 fcb0 	bl	800cdfc <vPortExitCritical>
}
 800b49c:	bf00      	nop
 800b49e:	3710      	adds	r7, #16
 800b4a0:	46bd      	mov	sp, r7
 800b4a2:	bd80      	pop	{r7, pc}

0800b4a4 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800b4a4:	b580      	push	{r7, lr}
 800b4a6:	b084      	sub	sp, #16
 800b4a8:	af00      	add	r7, sp, #0
 800b4aa:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800b4ac:	f001 fc74 	bl	800cd98 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800b4b0:	687b      	ldr	r3, [r7, #4]
 800b4b2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b4b4:	2b00      	cmp	r3, #0
 800b4b6:	d102      	bne.n	800b4be <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800b4b8:	2301      	movs	r3, #1
 800b4ba:	60fb      	str	r3, [r7, #12]
 800b4bc:	e001      	b.n	800b4c2 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800b4be:	2300      	movs	r3, #0
 800b4c0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800b4c2:	f001 fc9b 	bl	800cdfc <vPortExitCritical>

	return xReturn;
 800b4c6:	68fb      	ldr	r3, [r7, #12]
}
 800b4c8:	4618      	mov	r0, r3
 800b4ca:	3710      	adds	r7, #16
 800b4cc:	46bd      	mov	sp, r7
 800b4ce:	bd80      	pop	{r7, pc}

0800b4d0 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800b4d0:	b580      	push	{r7, lr}
 800b4d2:	b084      	sub	sp, #16
 800b4d4:	af00      	add	r7, sp, #0
 800b4d6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800b4d8:	f001 fc5e 	bl	800cd98 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800b4dc:	687b      	ldr	r3, [r7, #4]
 800b4de:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800b4e0:	687b      	ldr	r3, [r7, #4]
 800b4e2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b4e4:	429a      	cmp	r2, r3
 800b4e6:	d102      	bne.n	800b4ee <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800b4e8:	2301      	movs	r3, #1
 800b4ea:	60fb      	str	r3, [r7, #12]
 800b4ec:	e001      	b.n	800b4f2 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800b4ee:	2300      	movs	r3, #0
 800b4f0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800b4f2:	f001 fc83 	bl	800cdfc <vPortExitCritical>

	return xReturn;
 800b4f6:	68fb      	ldr	r3, [r7, #12]
}
 800b4f8:	4618      	mov	r0, r3
 800b4fa:	3710      	adds	r7, #16
 800b4fc:	46bd      	mov	sp, r7
 800b4fe:	bd80      	pop	{r7, pc}

0800b500 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800b500:	b480      	push	{r7}
 800b502:	b085      	sub	sp, #20
 800b504:	af00      	add	r7, sp, #0
 800b506:	6078      	str	r0, [r7, #4]
 800b508:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800b50a:	2300      	movs	r3, #0
 800b50c:	60fb      	str	r3, [r7, #12]
 800b50e:	e014      	b.n	800b53a <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800b510:	4a0f      	ldr	r2, [pc, #60]	@ (800b550 <vQueueAddToRegistry+0x50>)
 800b512:	68fb      	ldr	r3, [r7, #12]
 800b514:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800b518:	2b00      	cmp	r3, #0
 800b51a:	d10b      	bne.n	800b534 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800b51c:	490c      	ldr	r1, [pc, #48]	@ (800b550 <vQueueAddToRegistry+0x50>)
 800b51e:	68fb      	ldr	r3, [r7, #12]
 800b520:	683a      	ldr	r2, [r7, #0]
 800b522:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800b526:	4a0a      	ldr	r2, [pc, #40]	@ (800b550 <vQueueAddToRegistry+0x50>)
 800b528:	68fb      	ldr	r3, [r7, #12]
 800b52a:	00db      	lsls	r3, r3, #3
 800b52c:	4413      	add	r3, r2
 800b52e:	687a      	ldr	r2, [r7, #4]
 800b530:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800b532:	e006      	b.n	800b542 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800b534:	68fb      	ldr	r3, [r7, #12]
 800b536:	3301      	adds	r3, #1
 800b538:	60fb      	str	r3, [r7, #12]
 800b53a:	68fb      	ldr	r3, [r7, #12]
 800b53c:	2b07      	cmp	r3, #7
 800b53e:	d9e7      	bls.n	800b510 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800b540:	bf00      	nop
 800b542:	bf00      	nop
 800b544:	3714      	adds	r7, #20
 800b546:	46bd      	mov	sp, r7
 800b548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b54c:	4770      	bx	lr
 800b54e:	bf00      	nop
 800b550:	200062b4 	.word	0x200062b4

0800b554 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800b554:	b580      	push	{r7, lr}
 800b556:	b086      	sub	sp, #24
 800b558:	af00      	add	r7, sp, #0
 800b55a:	60f8      	str	r0, [r7, #12]
 800b55c:	60b9      	str	r1, [r7, #8]
 800b55e:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800b560:	68fb      	ldr	r3, [r7, #12]
 800b562:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800b564:	f001 fc18 	bl	800cd98 <vPortEnterCritical>
 800b568:	697b      	ldr	r3, [r7, #20]
 800b56a:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800b56e:	b25b      	sxtb	r3, r3
 800b570:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800b574:	d103      	bne.n	800b57e <vQueueWaitForMessageRestricted+0x2a>
 800b576:	697b      	ldr	r3, [r7, #20]
 800b578:	2200      	movs	r2, #0
 800b57a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800b57e:	697b      	ldr	r3, [r7, #20]
 800b580:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800b584:	b25b      	sxtb	r3, r3
 800b586:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800b58a:	d103      	bne.n	800b594 <vQueueWaitForMessageRestricted+0x40>
 800b58c:	697b      	ldr	r3, [r7, #20]
 800b58e:	2200      	movs	r2, #0
 800b590:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800b594:	f001 fc32 	bl	800cdfc <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800b598:	697b      	ldr	r3, [r7, #20]
 800b59a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b59c:	2b00      	cmp	r3, #0
 800b59e:	d106      	bne.n	800b5ae <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800b5a0:	697b      	ldr	r3, [r7, #20]
 800b5a2:	3324      	adds	r3, #36	@ 0x24
 800b5a4:	687a      	ldr	r2, [r7, #4]
 800b5a6:	68b9      	ldr	r1, [r7, #8]
 800b5a8:	4618      	mov	r0, r3
 800b5aa:	f000 fc6d 	bl	800be88 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800b5ae:	6978      	ldr	r0, [r7, #20]
 800b5b0:	f7ff ff26 	bl	800b400 <prvUnlockQueue>
	}
 800b5b4:	bf00      	nop
 800b5b6:	3718      	adds	r7, #24
 800b5b8:	46bd      	mov	sp, r7
 800b5ba:	bd80      	pop	{r7, pc}

0800b5bc <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800b5bc:	b580      	push	{r7, lr}
 800b5be:	b08e      	sub	sp, #56	@ 0x38
 800b5c0:	af04      	add	r7, sp, #16
 800b5c2:	60f8      	str	r0, [r7, #12]
 800b5c4:	60b9      	str	r1, [r7, #8]
 800b5c6:	607a      	str	r2, [r7, #4]
 800b5c8:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800b5ca:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b5cc:	2b00      	cmp	r3, #0
 800b5ce:	d10b      	bne.n	800b5e8 <xTaskCreateStatic+0x2c>
	__asm volatile
 800b5d0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b5d4:	f383 8811 	msr	BASEPRI, r3
 800b5d8:	f3bf 8f6f 	isb	sy
 800b5dc:	f3bf 8f4f 	dsb	sy
 800b5e0:	623b      	str	r3, [r7, #32]
}
 800b5e2:	bf00      	nop
 800b5e4:	bf00      	nop
 800b5e6:	e7fd      	b.n	800b5e4 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800b5e8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b5ea:	2b00      	cmp	r3, #0
 800b5ec:	d10b      	bne.n	800b606 <xTaskCreateStatic+0x4a>
	__asm volatile
 800b5ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b5f2:	f383 8811 	msr	BASEPRI, r3
 800b5f6:	f3bf 8f6f 	isb	sy
 800b5fa:	f3bf 8f4f 	dsb	sy
 800b5fe:	61fb      	str	r3, [r7, #28]
}
 800b600:	bf00      	nop
 800b602:	bf00      	nop
 800b604:	e7fd      	b.n	800b602 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800b606:	23a8      	movs	r3, #168	@ 0xa8
 800b608:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800b60a:	693b      	ldr	r3, [r7, #16]
 800b60c:	2ba8      	cmp	r3, #168	@ 0xa8
 800b60e:	d00b      	beq.n	800b628 <xTaskCreateStatic+0x6c>
	__asm volatile
 800b610:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b614:	f383 8811 	msr	BASEPRI, r3
 800b618:	f3bf 8f6f 	isb	sy
 800b61c:	f3bf 8f4f 	dsb	sy
 800b620:	61bb      	str	r3, [r7, #24]
}
 800b622:	bf00      	nop
 800b624:	bf00      	nop
 800b626:	e7fd      	b.n	800b624 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800b628:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800b62a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b62c:	2b00      	cmp	r3, #0
 800b62e:	d01e      	beq.n	800b66e <xTaskCreateStatic+0xb2>
 800b630:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b632:	2b00      	cmp	r3, #0
 800b634:	d01b      	beq.n	800b66e <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800b636:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b638:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800b63a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b63c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800b63e:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800b640:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b642:	2202      	movs	r2, #2
 800b644:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800b648:	2300      	movs	r3, #0
 800b64a:	9303      	str	r3, [sp, #12]
 800b64c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b64e:	9302      	str	r3, [sp, #8]
 800b650:	f107 0314 	add.w	r3, r7, #20
 800b654:	9301      	str	r3, [sp, #4]
 800b656:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b658:	9300      	str	r3, [sp, #0]
 800b65a:	683b      	ldr	r3, [r7, #0]
 800b65c:	687a      	ldr	r2, [r7, #4]
 800b65e:	68b9      	ldr	r1, [r7, #8]
 800b660:	68f8      	ldr	r0, [r7, #12]
 800b662:	f000 f851 	bl	800b708 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800b666:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800b668:	f000 f8f6 	bl	800b858 <prvAddNewTaskToReadyList>
 800b66c:	e001      	b.n	800b672 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 800b66e:	2300      	movs	r3, #0
 800b670:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800b672:	697b      	ldr	r3, [r7, #20]
	}
 800b674:	4618      	mov	r0, r3
 800b676:	3728      	adds	r7, #40	@ 0x28
 800b678:	46bd      	mov	sp, r7
 800b67a:	bd80      	pop	{r7, pc}

0800b67c <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800b67c:	b580      	push	{r7, lr}
 800b67e:	b08c      	sub	sp, #48	@ 0x30
 800b680:	af04      	add	r7, sp, #16
 800b682:	60f8      	str	r0, [r7, #12]
 800b684:	60b9      	str	r1, [r7, #8]
 800b686:	603b      	str	r3, [r7, #0]
 800b688:	4613      	mov	r3, r2
 800b68a:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800b68c:	88fb      	ldrh	r3, [r7, #6]
 800b68e:	009b      	lsls	r3, r3, #2
 800b690:	4618      	mov	r0, r3
 800b692:	f001 fca3 	bl	800cfdc <pvPortMalloc>
 800b696:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800b698:	697b      	ldr	r3, [r7, #20]
 800b69a:	2b00      	cmp	r3, #0
 800b69c:	d00e      	beq.n	800b6bc <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800b69e:	20a8      	movs	r0, #168	@ 0xa8
 800b6a0:	f001 fc9c 	bl	800cfdc <pvPortMalloc>
 800b6a4:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800b6a6:	69fb      	ldr	r3, [r7, #28]
 800b6a8:	2b00      	cmp	r3, #0
 800b6aa:	d003      	beq.n	800b6b4 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800b6ac:	69fb      	ldr	r3, [r7, #28]
 800b6ae:	697a      	ldr	r2, [r7, #20]
 800b6b0:	631a      	str	r2, [r3, #48]	@ 0x30
 800b6b2:	e005      	b.n	800b6c0 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800b6b4:	6978      	ldr	r0, [r7, #20]
 800b6b6:	f001 fd5f 	bl	800d178 <vPortFree>
 800b6ba:	e001      	b.n	800b6c0 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800b6bc:	2300      	movs	r3, #0
 800b6be:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800b6c0:	69fb      	ldr	r3, [r7, #28]
 800b6c2:	2b00      	cmp	r3, #0
 800b6c4:	d017      	beq.n	800b6f6 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800b6c6:	69fb      	ldr	r3, [r7, #28]
 800b6c8:	2200      	movs	r2, #0
 800b6ca:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800b6ce:	88fa      	ldrh	r2, [r7, #6]
 800b6d0:	2300      	movs	r3, #0
 800b6d2:	9303      	str	r3, [sp, #12]
 800b6d4:	69fb      	ldr	r3, [r7, #28]
 800b6d6:	9302      	str	r3, [sp, #8]
 800b6d8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b6da:	9301      	str	r3, [sp, #4]
 800b6dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b6de:	9300      	str	r3, [sp, #0]
 800b6e0:	683b      	ldr	r3, [r7, #0]
 800b6e2:	68b9      	ldr	r1, [r7, #8]
 800b6e4:	68f8      	ldr	r0, [r7, #12]
 800b6e6:	f000 f80f 	bl	800b708 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800b6ea:	69f8      	ldr	r0, [r7, #28]
 800b6ec:	f000 f8b4 	bl	800b858 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800b6f0:	2301      	movs	r3, #1
 800b6f2:	61bb      	str	r3, [r7, #24]
 800b6f4:	e002      	b.n	800b6fc <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800b6f6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800b6fa:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800b6fc:	69bb      	ldr	r3, [r7, #24]
	}
 800b6fe:	4618      	mov	r0, r3
 800b700:	3720      	adds	r7, #32
 800b702:	46bd      	mov	sp, r7
 800b704:	bd80      	pop	{r7, pc}
	...

0800b708 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800b708:	b580      	push	{r7, lr}
 800b70a:	b088      	sub	sp, #32
 800b70c:	af00      	add	r7, sp, #0
 800b70e:	60f8      	str	r0, [r7, #12]
 800b710:	60b9      	str	r1, [r7, #8]
 800b712:	607a      	str	r2, [r7, #4]
 800b714:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800b716:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b718:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 800b71a:	687b      	ldr	r3, [r7, #4]
 800b71c:	009b      	lsls	r3, r3, #2
 800b71e:	461a      	mov	r2, r3
 800b720:	21a5      	movs	r1, #165	@ 0xa5
 800b722:	f00e fa6f 	bl	8019c04 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800b726:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b728:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800b72a:	687b      	ldr	r3, [r7, #4]
 800b72c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800b730:	3b01      	subs	r3, #1
 800b732:	009b      	lsls	r3, r3, #2
 800b734:	4413      	add	r3, r2
 800b736:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800b738:	69bb      	ldr	r3, [r7, #24]
 800b73a:	f023 0307 	bic.w	r3, r3, #7
 800b73e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800b740:	69bb      	ldr	r3, [r7, #24]
 800b742:	f003 0307 	and.w	r3, r3, #7
 800b746:	2b00      	cmp	r3, #0
 800b748:	d00b      	beq.n	800b762 <prvInitialiseNewTask+0x5a>
	__asm volatile
 800b74a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b74e:	f383 8811 	msr	BASEPRI, r3
 800b752:	f3bf 8f6f 	isb	sy
 800b756:	f3bf 8f4f 	dsb	sy
 800b75a:	617b      	str	r3, [r7, #20]
}
 800b75c:	bf00      	nop
 800b75e:	bf00      	nop
 800b760:	e7fd      	b.n	800b75e <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800b762:	68bb      	ldr	r3, [r7, #8]
 800b764:	2b00      	cmp	r3, #0
 800b766:	d01f      	beq.n	800b7a8 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800b768:	2300      	movs	r3, #0
 800b76a:	61fb      	str	r3, [r7, #28]
 800b76c:	e012      	b.n	800b794 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800b76e:	68ba      	ldr	r2, [r7, #8]
 800b770:	69fb      	ldr	r3, [r7, #28]
 800b772:	4413      	add	r3, r2
 800b774:	7819      	ldrb	r1, [r3, #0]
 800b776:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b778:	69fb      	ldr	r3, [r7, #28]
 800b77a:	4413      	add	r3, r2
 800b77c:	3334      	adds	r3, #52	@ 0x34
 800b77e:	460a      	mov	r2, r1
 800b780:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800b782:	68ba      	ldr	r2, [r7, #8]
 800b784:	69fb      	ldr	r3, [r7, #28]
 800b786:	4413      	add	r3, r2
 800b788:	781b      	ldrb	r3, [r3, #0]
 800b78a:	2b00      	cmp	r3, #0
 800b78c:	d006      	beq.n	800b79c <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800b78e:	69fb      	ldr	r3, [r7, #28]
 800b790:	3301      	adds	r3, #1
 800b792:	61fb      	str	r3, [r7, #28]
 800b794:	69fb      	ldr	r3, [r7, #28]
 800b796:	2b0f      	cmp	r3, #15
 800b798:	d9e9      	bls.n	800b76e <prvInitialiseNewTask+0x66>
 800b79a:	e000      	b.n	800b79e <prvInitialiseNewTask+0x96>
			{
				break;
 800b79c:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800b79e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b7a0:	2200      	movs	r2, #0
 800b7a2:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800b7a6:	e003      	b.n	800b7b0 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800b7a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b7aa:	2200      	movs	r2, #0
 800b7ac:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800b7b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b7b2:	2b37      	cmp	r3, #55	@ 0x37
 800b7b4:	d901      	bls.n	800b7ba <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800b7b6:	2337      	movs	r3, #55	@ 0x37
 800b7b8:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800b7ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b7bc:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800b7be:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800b7c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b7c2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800b7c4:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800b7c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b7c8:	2200      	movs	r2, #0
 800b7ca:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800b7cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b7ce:	3304      	adds	r3, #4
 800b7d0:	4618      	mov	r0, r3
 800b7d2:	f7ff f965 	bl	800aaa0 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800b7d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b7d8:	3318      	adds	r3, #24
 800b7da:	4618      	mov	r0, r3
 800b7dc:	f7ff f960 	bl	800aaa0 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800b7e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b7e2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b7e4:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b7e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b7e8:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800b7ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b7ee:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800b7f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b7f2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b7f4:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800b7f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b7f8:	2200      	movs	r2, #0
 800b7fa:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800b7fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b800:	2200      	movs	r2, #0
 800b802:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800b806:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b808:	3354      	adds	r3, #84	@ 0x54
 800b80a:	224c      	movs	r2, #76	@ 0x4c
 800b80c:	2100      	movs	r1, #0
 800b80e:	4618      	mov	r0, r3
 800b810:	f00e f9f8 	bl	8019c04 <memset>
 800b814:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b816:	4a0d      	ldr	r2, [pc, #52]	@ (800b84c <prvInitialiseNewTask+0x144>)
 800b818:	659a      	str	r2, [r3, #88]	@ 0x58
 800b81a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b81c:	4a0c      	ldr	r2, [pc, #48]	@ (800b850 <prvInitialiseNewTask+0x148>)
 800b81e:	65da      	str	r2, [r3, #92]	@ 0x5c
 800b820:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b822:	4a0c      	ldr	r2, [pc, #48]	@ (800b854 <prvInitialiseNewTask+0x14c>)
 800b824:	661a      	str	r2, [r3, #96]	@ 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800b826:	683a      	ldr	r2, [r7, #0]
 800b828:	68f9      	ldr	r1, [r7, #12]
 800b82a:	69b8      	ldr	r0, [r7, #24]
 800b82c:	f001 f982 	bl	800cb34 <pxPortInitialiseStack>
 800b830:	4602      	mov	r2, r0
 800b832:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b834:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800b836:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b838:	2b00      	cmp	r3, #0
 800b83a:	d002      	beq.n	800b842 <prvInitialiseNewTask+0x13a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800b83c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b83e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b840:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800b842:	bf00      	nop
 800b844:	3720      	adds	r7, #32
 800b846:	46bd      	mov	sp, r7
 800b848:	bd80      	pop	{r7, pc}
 800b84a:	bf00      	nop
 800b84c:	200076fc 	.word	0x200076fc
 800b850:	20007764 	.word	0x20007764
 800b854:	200077cc 	.word	0x200077cc

0800b858 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800b858:	b580      	push	{r7, lr}
 800b85a:	b082      	sub	sp, #8
 800b85c:	af00      	add	r7, sp, #0
 800b85e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800b860:	f001 fa9a 	bl	800cd98 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800b864:	4b2d      	ldr	r3, [pc, #180]	@ (800b91c <prvAddNewTaskToReadyList+0xc4>)
 800b866:	681b      	ldr	r3, [r3, #0]
 800b868:	3301      	adds	r3, #1
 800b86a:	4a2c      	ldr	r2, [pc, #176]	@ (800b91c <prvAddNewTaskToReadyList+0xc4>)
 800b86c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800b86e:	4b2c      	ldr	r3, [pc, #176]	@ (800b920 <prvAddNewTaskToReadyList+0xc8>)
 800b870:	681b      	ldr	r3, [r3, #0]
 800b872:	2b00      	cmp	r3, #0
 800b874:	d109      	bne.n	800b88a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800b876:	4a2a      	ldr	r2, [pc, #168]	@ (800b920 <prvAddNewTaskToReadyList+0xc8>)
 800b878:	687b      	ldr	r3, [r7, #4]
 800b87a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800b87c:	4b27      	ldr	r3, [pc, #156]	@ (800b91c <prvAddNewTaskToReadyList+0xc4>)
 800b87e:	681b      	ldr	r3, [r3, #0]
 800b880:	2b01      	cmp	r3, #1
 800b882:	d110      	bne.n	800b8a6 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800b884:	f000 fc56 	bl	800c134 <prvInitialiseTaskLists>
 800b888:	e00d      	b.n	800b8a6 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800b88a:	4b26      	ldr	r3, [pc, #152]	@ (800b924 <prvAddNewTaskToReadyList+0xcc>)
 800b88c:	681b      	ldr	r3, [r3, #0]
 800b88e:	2b00      	cmp	r3, #0
 800b890:	d109      	bne.n	800b8a6 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800b892:	4b23      	ldr	r3, [pc, #140]	@ (800b920 <prvAddNewTaskToReadyList+0xc8>)
 800b894:	681b      	ldr	r3, [r3, #0]
 800b896:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b898:	687b      	ldr	r3, [r7, #4]
 800b89a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b89c:	429a      	cmp	r2, r3
 800b89e:	d802      	bhi.n	800b8a6 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800b8a0:	4a1f      	ldr	r2, [pc, #124]	@ (800b920 <prvAddNewTaskToReadyList+0xc8>)
 800b8a2:	687b      	ldr	r3, [r7, #4]
 800b8a4:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800b8a6:	4b20      	ldr	r3, [pc, #128]	@ (800b928 <prvAddNewTaskToReadyList+0xd0>)
 800b8a8:	681b      	ldr	r3, [r3, #0]
 800b8aa:	3301      	adds	r3, #1
 800b8ac:	4a1e      	ldr	r2, [pc, #120]	@ (800b928 <prvAddNewTaskToReadyList+0xd0>)
 800b8ae:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800b8b0:	4b1d      	ldr	r3, [pc, #116]	@ (800b928 <prvAddNewTaskToReadyList+0xd0>)
 800b8b2:	681a      	ldr	r2, [r3, #0]
 800b8b4:	687b      	ldr	r3, [r7, #4]
 800b8b6:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800b8b8:	687b      	ldr	r3, [r7, #4]
 800b8ba:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b8bc:	4b1b      	ldr	r3, [pc, #108]	@ (800b92c <prvAddNewTaskToReadyList+0xd4>)
 800b8be:	681b      	ldr	r3, [r3, #0]
 800b8c0:	429a      	cmp	r2, r3
 800b8c2:	d903      	bls.n	800b8cc <prvAddNewTaskToReadyList+0x74>
 800b8c4:	687b      	ldr	r3, [r7, #4]
 800b8c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b8c8:	4a18      	ldr	r2, [pc, #96]	@ (800b92c <prvAddNewTaskToReadyList+0xd4>)
 800b8ca:	6013      	str	r3, [r2, #0]
 800b8cc:	687b      	ldr	r3, [r7, #4]
 800b8ce:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b8d0:	4613      	mov	r3, r2
 800b8d2:	009b      	lsls	r3, r3, #2
 800b8d4:	4413      	add	r3, r2
 800b8d6:	009b      	lsls	r3, r3, #2
 800b8d8:	4a15      	ldr	r2, [pc, #84]	@ (800b930 <prvAddNewTaskToReadyList+0xd8>)
 800b8da:	441a      	add	r2, r3
 800b8dc:	687b      	ldr	r3, [r7, #4]
 800b8de:	3304      	adds	r3, #4
 800b8e0:	4619      	mov	r1, r3
 800b8e2:	4610      	mov	r0, r2
 800b8e4:	f7ff f8e9 	bl	800aaba <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800b8e8:	f001 fa88 	bl	800cdfc <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800b8ec:	4b0d      	ldr	r3, [pc, #52]	@ (800b924 <prvAddNewTaskToReadyList+0xcc>)
 800b8ee:	681b      	ldr	r3, [r3, #0]
 800b8f0:	2b00      	cmp	r3, #0
 800b8f2:	d00e      	beq.n	800b912 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800b8f4:	4b0a      	ldr	r3, [pc, #40]	@ (800b920 <prvAddNewTaskToReadyList+0xc8>)
 800b8f6:	681b      	ldr	r3, [r3, #0]
 800b8f8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b8fa:	687b      	ldr	r3, [r7, #4]
 800b8fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b8fe:	429a      	cmp	r2, r3
 800b900:	d207      	bcs.n	800b912 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800b902:	4b0c      	ldr	r3, [pc, #48]	@ (800b934 <prvAddNewTaskToReadyList+0xdc>)
 800b904:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b908:	601a      	str	r2, [r3, #0]
 800b90a:	f3bf 8f4f 	dsb	sy
 800b90e:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800b912:	bf00      	nop
 800b914:	3708      	adds	r7, #8
 800b916:	46bd      	mov	sp, r7
 800b918:	bd80      	pop	{r7, pc}
 800b91a:	bf00      	nop
 800b91c:	200067c8 	.word	0x200067c8
 800b920:	200062f4 	.word	0x200062f4
 800b924:	200067d4 	.word	0x200067d4
 800b928:	200067e4 	.word	0x200067e4
 800b92c:	200067d0 	.word	0x200067d0
 800b930:	200062f8 	.word	0x200062f8
 800b934:	e000ed04 	.word	0xe000ed04

0800b938 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800b938:	b580      	push	{r7, lr}
 800b93a:	b084      	sub	sp, #16
 800b93c:	af00      	add	r7, sp, #0
 800b93e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800b940:	2300      	movs	r3, #0
 800b942:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800b944:	687b      	ldr	r3, [r7, #4]
 800b946:	2b00      	cmp	r3, #0
 800b948:	d018      	beq.n	800b97c <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800b94a:	4b14      	ldr	r3, [pc, #80]	@ (800b99c <vTaskDelay+0x64>)
 800b94c:	681b      	ldr	r3, [r3, #0]
 800b94e:	2b00      	cmp	r3, #0
 800b950:	d00b      	beq.n	800b96a <vTaskDelay+0x32>
	__asm volatile
 800b952:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b956:	f383 8811 	msr	BASEPRI, r3
 800b95a:	f3bf 8f6f 	isb	sy
 800b95e:	f3bf 8f4f 	dsb	sy
 800b962:	60bb      	str	r3, [r7, #8]
}
 800b964:	bf00      	nop
 800b966:	bf00      	nop
 800b968:	e7fd      	b.n	800b966 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800b96a:	f000 f88b 	bl	800ba84 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800b96e:	2100      	movs	r1, #0
 800b970:	6878      	ldr	r0, [r7, #4]
 800b972:	f000 fd31 	bl	800c3d8 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800b976:	f000 f893 	bl	800baa0 <xTaskResumeAll>
 800b97a:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800b97c:	68fb      	ldr	r3, [r7, #12]
 800b97e:	2b00      	cmp	r3, #0
 800b980:	d107      	bne.n	800b992 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 800b982:	4b07      	ldr	r3, [pc, #28]	@ (800b9a0 <vTaskDelay+0x68>)
 800b984:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b988:	601a      	str	r2, [r3, #0]
 800b98a:	f3bf 8f4f 	dsb	sy
 800b98e:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800b992:	bf00      	nop
 800b994:	3710      	adds	r7, #16
 800b996:	46bd      	mov	sp, r7
 800b998:	bd80      	pop	{r7, pc}
 800b99a:	bf00      	nop
 800b99c:	200067f0 	.word	0x200067f0
 800b9a0:	e000ed04 	.word	0xe000ed04

0800b9a4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800b9a4:	b580      	push	{r7, lr}
 800b9a6:	b08a      	sub	sp, #40	@ 0x28
 800b9a8:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800b9aa:	2300      	movs	r3, #0
 800b9ac:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800b9ae:	2300      	movs	r3, #0
 800b9b0:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800b9b2:	463a      	mov	r2, r7
 800b9b4:	1d39      	adds	r1, r7, #4
 800b9b6:	f107 0308 	add.w	r3, r7, #8
 800b9ba:	4618      	mov	r0, r3
 800b9bc:	f7ff f81c 	bl	800a9f8 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800b9c0:	6839      	ldr	r1, [r7, #0]
 800b9c2:	687b      	ldr	r3, [r7, #4]
 800b9c4:	68ba      	ldr	r2, [r7, #8]
 800b9c6:	9202      	str	r2, [sp, #8]
 800b9c8:	9301      	str	r3, [sp, #4]
 800b9ca:	2300      	movs	r3, #0
 800b9cc:	9300      	str	r3, [sp, #0]
 800b9ce:	2300      	movs	r3, #0
 800b9d0:	460a      	mov	r2, r1
 800b9d2:	4924      	ldr	r1, [pc, #144]	@ (800ba64 <vTaskStartScheduler+0xc0>)
 800b9d4:	4824      	ldr	r0, [pc, #144]	@ (800ba68 <vTaskStartScheduler+0xc4>)
 800b9d6:	f7ff fdf1 	bl	800b5bc <xTaskCreateStatic>
 800b9da:	4603      	mov	r3, r0
 800b9dc:	4a23      	ldr	r2, [pc, #140]	@ (800ba6c <vTaskStartScheduler+0xc8>)
 800b9de:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800b9e0:	4b22      	ldr	r3, [pc, #136]	@ (800ba6c <vTaskStartScheduler+0xc8>)
 800b9e2:	681b      	ldr	r3, [r3, #0]
 800b9e4:	2b00      	cmp	r3, #0
 800b9e6:	d002      	beq.n	800b9ee <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800b9e8:	2301      	movs	r3, #1
 800b9ea:	617b      	str	r3, [r7, #20]
 800b9ec:	e001      	b.n	800b9f2 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800b9ee:	2300      	movs	r3, #0
 800b9f0:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800b9f2:	697b      	ldr	r3, [r7, #20]
 800b9f4:	2b01      	cmp	r3, #1
 800b9f6:	d102      	bne.n	800b9fe <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800b9f8:	f000 fd42 	bl	800c480 <xTimerCreateTimerTask>
 800b9fc:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800b9fe:	697b      	ldr	r3, [r7, #20]
 800ba00:	2b01      	cmp	r3, #1
 800ba02:	d11b      	bne.n	800ba3c <vTaskStartScheduler+0x98>
	__asm volatile
 800ba04:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ba08:	f383 8811 	msr	BASEPRI, r3
 800ba0c:	f3bf 8f6f 	isb	sy
 800ba10:	f3bf 8f4f 	dsb	sy
 800ba14:	613b      	str	r3, [r7, #16]
}
 800ba16:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800ba18:	4b15      	ldr	r3, [pc, #84]	@ (800ba70 <vTaskStartScheduler+0xcc>)
 800ba1a:	681b      	ldr	r3, [r3, #0]
 800ba1c:	3354      	adds	r3, #84	@ 0x54
 800ba1e:	4a15      	ldr	r2, [pc, #84]	@ (800ba74 <vTaskStartScheduler+0xd0>)
 800ba20:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800ba22:	4b15      	ldr	r3, [pc, #84]	@ (800ba78 <vTaskStartScheduler+0xd4>)
 800ba24:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800ba28:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800ba2a:	4b14      	ldr	r3, [pc, #80]	@ (800ba7c <vTaskStartScheduler+0xd8>)
 800ba2c:	2201      	movs	r2, #1
 800ba2e:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800ba30:	4b13      	ldr	r3, [pc, #76]	@ (800ba80 <vTaskStartScheduler+0xdc>)
 800ba32:	2200      	movs	r2, #0
 800ba34:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800ba36:	f001 f90b 	bl	800cc50 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800ba3a:	e00f      	b.n	800ba5c <vTaskStartScheduler+0xb8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800ba3c:	697b      	ldr	r3, [r7, #20]
 800ba3e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800ba42:	d10b      	bne.n	800ba5c <vTaskStartScheduler+0xb8>
	__asm volatile
 800ba44:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ba48:	f383 8811 	msr	BASEPRI, r3
 800ba4c:	f3bf 8f6f 	isb	sy
 800ba50:	f3bf 8f4f 	dsb	sy
 800ba54:	60fb      	str	r3, [r7, #12]
}
 800ba56:	bf00      	nop
 800ba58:	bf00      	nop
 800ba5a:	e7fd      	b.n	800ba58 <vTaskStartScheduler+0xb4>
}
 800ba5c:	bf00      	nop
 800ba5e:	3718      	adds	r7, #24
 800ba60:	46bd      	mov	sp, r7
 800ba62:	bd80      	pop	{r7, pc}
 800ba64:	0801ad0c 	.word	0x0801ad0c
 800ba68:	0800c105 	.word	0x0800c105
 800ba6c:	200067ec 	.word	0x200067ec
 800ba70:	200062f4 	.word	0x200062f4
 800ba74:	20000104 	.word	0x20000104
 800ba78:	200067e8 	.word	0x200067e8
 800ba7c:	200067d4 	.word	0x200067d4
 800ba80:	200067cc 	.word	0x200067cc

0800ba84 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800ba84:	b480      	push	{r7}
 800ba86:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800ba88:	4b04      	ldr	r3, [pc, #16]	@ (800ba9c <vTaskSuspendAll+0x18>)
 800ba8a:	681b      	ldr	r3, [r3, #0]
 800ba8c:	3301      	adds	r3, #1
 800ba8e:	4a03      	ldr	r2, [pc, #12]	@ (800ba9c <vTaskSuspendAll+0x18>)
 800ba90:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800ba92:	bf00      	nop
 800ba94:	46bd      	mov	sp, r7
 800ba96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba9a:	4770      	bx	lr
 800ba9c:	200067f0 	.word	0x200067f0

0800baa0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800baa0:	b580      	push	{r7, lr}
 800baa2:	b084      	sub	sp, #16
 800baa4:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800baa6:	2300      	movs	r3, #0
 800baa8:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800baaa:	2300      	movs	r3, #0
 800baac:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800baae:	4b42      	ldr	r3, [pc, #264]	@ (800bbb8 <xTaskResumeAll+0x118>)
 800bab0:	681b      	ldr	r3, [r3, #0]
 800bab2:	2b00      	cmp	r3, #0
 800bab4:	d10b      	bne.n	800bace <xTaskResumeAll+0x2e>
	__asm volatile
 800bab6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800baba:	f383 8811 	msr	BASEPRI, r3
 800babe:	f3bf 8f6f 	isb	sy
 800bac2:	f3bf 8f4f 	dsb	sy
 800bac6:	603b      	str	r3, [r7, #0]
}
 800bac8:	bf00      	nop
 800baca:	bf00      	nop
 800bacc:	e7fd      	b.n	800baca <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800bace:	f001 f963 	bl	800cd98 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800bad2:	4b39      	ldr	r3, [pc, #228]	@ (800bbb8 <xTaskResumeAll+0x118>)
 800bad4:	681b      	ldr	r3, [r3, #0]
 800bad6:	3b01      	subs	r3, #1
 800bad8:	4a37      	ldr	r2, [pc, #220]	@ (800bbb8 <xTaskResumeAll+0x118>)
 800bada:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800badc:	4b36      	ldr	r3, [pc, #216]	@ (800bbb8 <xTaskResumeAll+0x118>)
 800bade:	681b      	ldr	r3, [r3, #0]
 800bae0:	2b00      	cmp	r3, #0
 800bae2:	d162      	bne.n	800bbaa <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800bae4:	4b35      	ldr	r3, [pc, #212]	@ (800bbbc <xTaskResumeAll+0x11c>)
 800bae6:	681b      	ldr	r3, [r3, #0]
 800bae8:	2b00      	cmp	r3, #0
 800baea:	d05e      	beq.n	800bbaa <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800baec:	e02f      	b.n	800bb4e <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800baee:	4b34      	ldr	r3, [pc, #208]	@ (800bbc0 <xTaskResumeAll+0x120>)
 800baf0:	68db      	ldr	r3, [r3, #12]
 800baf2:	68db      	ldr	r3, [r3, #12]
 800baf4:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800baf6:	68fb      	ldr	r3, [r7, #12]
 800baf8:	3318      	adds	r3, #24
 800bafa:	4618      	mov	r0, r3
 800bafc:	f7ff f83a 	bl	800ab74 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800bb00:	68fb      	ldr	r3, [r7, #12]
 800bb02:	3304      	adds	r3, #4
 800bb04:	4618      	mov	r0, r3
 800bb06:	f7ff f835 	bl	800ab74 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800bb0a:	68fb      	ldr	r3, [r7, #12]
 800bb0c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800bb0e:	4b2d      	ldr	r3, [pc, #180]	@ (800bbc4 <xTaskResumeAll+0x124>)
 800bb10:	681b      	ldr	r3, [r3, #0]
 800bb12:	429a      	cmp	r2, r3
 800bb14:	d903      	bls.n	800bb1e <xTaskResumeAll+0x7e>
 800bb16:	68fb      	ldr	r3, [r7, #12]
 800bb18:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bb1a:	4a2a      	ldr	r2, [pc, #168]	@ (800bbc4 <xTaskResumeAll+0x124>)
 800bb1c:	6013      	str	r3, [r2, #0]
 800bb1e:	68fb      	ldr	r3, [r7, #12]
 800bb20:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800bb22:	4613      	mov	r3, r2
 800bb24:	009b      	lsls	r3, r3, #2
 800bb26:	4413      	add	r3, r2
 800bb28:	009b      	lsls	r3, r3, #2
 800bb2a:	4a27      	ldr	r2, [pc, #156]	@ (800bbc8 <xTaskResumeAll+0x128>)
 800bb2c:	441a      	add	r2, r3
 800bb2e:	68fb      	ldr	r3, [r7, #12]
 800bb30:	3304      	adds	r3, #4
 800bb32:	4619      	mov	r1, r3
 800bb34:	4610      	mov	r0, r2
 800bb36:	f7fe ffc0 	bl	800aaba <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800bb3a:	68fb      	ldr	r3, [r7, #12]
 800bb3c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800bb3e:	4b23      	ldr	r3, [pc, #140]	@ (800bbcc <xTaskResumeAll+0x12c>)
 800bb40:	681b      	ldr	r3, [r3, #0]
 800bb42:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bb44:	429a      	cmp	r2, r3
 800bb46:	d302      	bcc.n	800bb4e <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 800bb48:	4b21      	ldr	r3, [pc, #132]	@ (800bbd0 <xTaskResumeAll+0x130>)
 800bb4a:	2201      	movs	r2, #1
 800bb4c:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800bb4e:	4b1c      	ldr	r3, [pc, #112]	@ (800bbc0 <xTaskResumeAll+0x120>)
 800bb50:	681b      	ldr	r3, [r3, #0]
 800bb52:	2b00      	cmp	r3, #0
 800bb54:	d1cb      	bne.n	800baee <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800bb56:	68fb      	ldr	r3, [r7, #12]
 800bb58:	2b00      	cmp	r3, #0
 800bb5a:	d001      	beq.n	800bb60 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800bb5c:	f000 fb8e 	bl	800c27c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800bb60:	4b1c      	ldr	r3, [pc, #112]	@ (800bbd4 <xTaskResumeAll+0x134>)
 800bb62:	681b      	ldr	r3, [r3, #0]
 800bb64:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800bb66:	687b      	ldr	r3, [r7, #4]
 800bb68:	2b00      	cmp	r3, #0
 800bb6a:	d010      	beq.n	800bb8e <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800bb6c:	f000 f846 	bl	800bbfc <xTaskIncrementTick>
 800bb70:	4603      	mov	r3, r0
 800bb72:	2b00      	cmp	r3, #0
 800bb74:	d002      	beq.n	800bb7c <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 800bb76:	4b16      	ldr	r3, [pc, #88]	@ (800bbd0 <xTaskResumeAll+0x130>)
 800bb78:	2201      	movs	r2, #1
 800bb7a:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800bb7c:	687b      	ldr	r3, [r7, #4]
 800bb7e:	3b01      	subs	r3, #1
 800bb80:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800bb82:	687b      	ldr	r3, [r7, #4]
 800bb84:	2b00      	cmp	r3, #0
 800bb86:	d1f1      	bne.n	800bb6c <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 800bb88:	4b12      	ldr	r3, [pc, #72]	@ (800bbd4 <xTaskResumeAll+0x134>)
 800bb8a:	2200      	movs	r2, #0
 800bb8c:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800bb8e:	4b10      	ldr	r3, [pc, #64]	@ (800bbd0 <xTaskResumeAll+0x130>)
 800bb90:	681b      	ldr	r3, [r3, #0]
 800bb92:	2b00      	cmp	r3, #0
 800bb94:	d009      	beq.n	800bbaa <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800bb96:	2301      	movs	r3, #1
 800bb98:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800bb9a:	4b0f      	ldr	r3, [pc, #60]	@ (800bbd8 <xTaskResumeAll+0x138>)
 800bb9c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800bba0:	601a      	str	r2, [r3, #0]
 800bba2:	f3bf 8f4f 	dsb	sy
 800bba6:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800bbaa:	f001 f927 	bl	800cdfc <vPortExitCritical>

	return xAlreadyYielded;
 800bbae:	68bb      	ldr	r3, [r7, #8]
}
 800bbb0:	4618      	mov	r0, r3
 800bbb2:	3710      	adds	r7, #16
 800bbb4:	46bd      	mov	sp, r7
 800bbb6:	bd80      	pop	{r7, pc}
 800bbb8:	200067f0 	.word	0x200067f0
 800bbbc:	200067c8 	.word	0x200067c8
 800bbc0:	20006788 	.word	0x20006788
 800bbc4:	200067d0 	.word	0x200067d0
 800bbc8:	200062f8 	.word	0x200062f8
 800bbcc:	200062f4 	.word	0x200062f4
 800bbd0:	200067dc 	.word	0x200067dc
 800bbd4:	200067d8 	.word	0x200067d8
 800bbd8:	e000ed04 	.word	0xe000ed04

0800bbdc <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800bbdc:	b480      	push	{r7}
 800bbde:	b083      	sub	sp, #12
 800bbe0:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800bbe2:	4b05      	ldr	r3, [pc, #20]	@ (800bbf8 <xTaskGetTickCount+0x1c>)
 800bbe4:	681b      	ldr	r3, [r3, #0]
 800bbe6:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800bbe8:	687b      	ldr	r3, [r7, #4]
}
 800bbea:	4618      	mov	r0, r3
 800bbec:	370c      	adds	r7, #12
 800bbee:	46bd      	mov	sp, r7
 800bbf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbf4:	4770      	bx	lr
 800bbf6:	bf00      	nop
 800bbf8:	200067cc 	.word	0x200067cc

0800bbfc <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800bbfc:	b580      	push	{r7, lr}
 800bbfe:	b086      	sub	sp, #24
 800bc00:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800bc02:	2300      	movs	r3, #0
 800bc04:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800bc06:	4b4f      	ldr	r3, [pc, #316]	@ (800bd44 <xTaskIncrementTick+0x148>)
 800bc08:	681b      	ldr	r3, [r3, #0]
 800bc0a:	2b00      	cmp	r3, #0
 800bc0c:	f040 8090 	bne.w	800bd30 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800bc10:	4b4d      	ldr	r3, [pc, #308]	@ (800bd48 <xTaskIncrementTick+0x14c>)
 800bc12:	681b      	ldr	r3, [r3, #0]
 800bc14:	3301      	adds	r3, #1
 800bc16:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800bc18:	4a4b      	ldr	r2, [pc, #300]	@ (800bd48 <xTaskIncrementTick+0x14c>)
 800bc1a:	693b      	ldr	r3, [r7, #16]
 800bc1c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800bc1e:	693b      	ldr	r3, [r7, #16]
 800bc20:	2b00      	cmp	r3, #0
 800bc22:	d121      	bne.n	800bc68 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 800bc24:	4b49      	ldr	r3, [pc, #292]	@ (800bd4c <xTaskIncrementTick+0x150>)
 800bc26:	681b      	ldr	r3, [r3, #0]
 800bc28:	681b      	ldr	r3, [r3, #0]
 800bc2a:	2b00      	cmp	r3, #0
 800bc2c:	d00b      	beq.n	800bc46 <xTaskIncrementTick+0x4a>
	__asm volatile
 800bc2e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bc32:	f383 8811 	msr	BASEPRI, r3
 800bc36:	f3bf 8f6f 	isb	sy
 800bc3a:	f3bf 8f4f 	dsb	sy
 800bc3e:	603b      	str	r3, [r7, #0]
}
 800bc40:	bf00      	nop
 800bc42:	bf00      	nop
 800bc44:	e7fd      	b.n	800bc42 <xTaskIncrementTick+0x46>
 800bc46:	4b41      	ldr	r3, [pc, #260]	@ (800bd4c <xTaskIncrementTick+0x150>)
 800bc48:	681b      	ldr	r3, [r3, #0]
 800bc4a:	60fb      	str	r3, [r7, #12]
 800bc4c:	4b40      	ldr	r3, [pc, #256]	@ (800bd50 <xTaskIncrementTick+0x154>)
 800bc4e:	681b      	ldr	r3, [r3, #0]
 800bc50:	4a3e      	ldr	r2, [pc, #248]	@ (800bd4c <xTaskIncrementTick+0x150>)
 800bc52:	6013      	str	r3, [r2, #0]
 800bc54:	4a3e      	ldr	r2, [pc, #248]	@ (800bd50 <xTaskIncrementTick+0x154>)
 800bc56:	68fb      	ldr	r3, [r7, #12]
 800bc58:	6013      	str	r3, [r2, #0]
 800bc5a:	4b3e      	ldr	r3, [pc, #248]	@ (800bd54 <xTaskIncrementTick+0x158>)
 800bc5c:	681b      	ldr	r3, [r3, #0]
 800bc5e:	3301      	adds	r3, #1
 800bc60:	4a3c      	ldr	r2, [pc, #240]	@ (800bd54 <xTaskIncrementTick+0x158>)
 800bc62:	6013      	str	r3, [r2, #0]
 800bc64:	f000 fb0a 	bl	800c27c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800bc68:	4b3b      	ldr	r3, [pc, #236]	@ (800bd58 <xTaskIncrementTick+0x15c>)
 800bc6a:	681b      	ldr	r3, [r3, #0]
 800bc6c:	693a      	ldr	r2, [r7, #16]
 800bc6e:	429a      	cmp	r2, r3
 800bc70:	d349      	bcc.n	800bd06 <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800bc72:	4b36      	ldr	r3, [pc, #216]	@ (800bd4c <xTaskIncrementTick+0x150>)
 800bc74:	681b      	ldr	r3, [r3, #0]
 800bc76:	681b      	ldr	r3, [r3, #0]
 800bc78:	2b00      	cmp	r3, #0
 800bc7a:	d104      	bne.n	800bc86 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800bc7c:	4b36      	ldr	r3, [pc, #216]	@ (800bd58 <xTaskIncrementTick+0x15c>)
 800bc7e:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800bc82:	601a      	str	r2, [r3, #0]
					break;
 800bc84:	e03f      	b.n	800bd06 <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bc86:	4b31      	ldr	r3, [pc, #196]	@ (800bd4c <xTaskIncrementTick+0x150>)
 800bc88:	681b      	ldr	r3, [r3, #0]
 800bc8a:	68db      	ldr	r3, [r3, #12]
 800bc8c:	68db      	ldr	r3, [r3, #12]
 800bc8e:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800bc90:	68bb      	ldr	r3, [r7, #8]
 800bc92:	685b      	ldr	r3, [r3, #4]
 800bc94:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800bc96:	693a      	ldr	r2, [r7, #16]
 800bc98:	687b      	ldr	r3, [r7, #4]
 800bc9a:	429a      	cmp	r2, r3
 800bc9c:	d203      	bcs.n	800bca6 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800bc9e:	4a2e      	ldr	r2, [pc, #184]	@ (800bd58 <xTaskIncrementTick+0x15c>)
 800bca0:	687b      	ldr	r3, [r7, #4]
 800bca2:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800bca4:	e02f      	b.n	800bd06 <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800bca6:	68bb      	ldr	r3, [r7, #8]
 800bca8:	3304      	adds	r3, #4
 800bcaa:	4618      	mov	r0, r3
 800bcac:	f7fe ff62 	bl	800ab74 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800bcb0:	68bb      	ldr	r3, [r7, #8]
 800bcb2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bcb4:	2b00      	cmp	r3, #0
 800bcb6:	d004      	beq.n	800bcc2 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800bcb8:	68bb      	ldr	r3, [r7, #8]
 800bcba:	3318      	adds	r3, #24
 800bcbc:	4618      	mov	r0, r3
 800bcbe:	f7fe ff59 	bl	800ab74 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800bcc2:	68bb      	ldr	r3, [r7, #8]
 800bcc4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800bcc6:	4b25      	ldr	r3, [pc, #148]	@ (800bd5c <xTaskIncrementTick+0x160>)
 800bcc8:	681b      	ldr	r3, [r3, #0]
 800bcca:	429a      	cmp	r2, r3
 800bccc:	d903      	bls.n	800bcd6 <xTaskIncrementTick+0xda>
 800bcce:	68bb      	ldr	r3, [r7, #8]
 800bcd0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bcd2:	4a22      	ldr	r2, [pc, #136]	@ (800bd5c <xTaskIncrementTick+0x160>)
 800bcd4:	6013      	str	r3, [r2, #0]
 800bcd6:	68bb      	ldr	r3, [r7, #8]
 800bcd8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800bcda:	4613      	mov	r3, r2
 800bcdc:	009b      	lsls	r3, r3, #2
 800bcde:	4413      	add	r3, r2
 800bce0:	009b      	lsls	r3, r3, #2
 800bce2:	4a1f      	ldr	r2, [pc, #124]	@ (800bd60 <xTaskIncrementTick+0x164>)
 800bce4:	441a      	add	r2, r3
 800bce6:	68bb      	ldr	r3, [r7, #8]
 800bce8:	3304      	adds	r3, #4
 800bcea:	4619      	mov	r1, r3
 800bcec:	4610      	mov	r0, r2
 800bcee:	f7fe fee4 	bl	800aaba <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800bcf2:	68bb      	ldr	r3, [r7, #8]
 800bcf4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800bcf6:	4b1b      	ldr	r3, [pc, #108]	@ (800bd64 <xTaskIncrementTick+0x168>)
 800bcf8:	681b      	ldr	r3, [r3, #0]
 800bcfa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bcfc:	429a      	cmp	r2, r3
 800bcfe:	d3b8      	bcc.n	800bc72 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 800bd00:	2301      	movs	r3, #1
 800bd02:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800bd04:	e7b5      	b.n	800bc72 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800bd06:	4b17      	ldr	r3, [pc, #92]	@ (800bd64 <xTaskIncrementTick+0x168>)
 800bd08:	681b      	ldr	r3, [r3, #0]
 800bd0a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800bd0c:	4914      	ldr	r1, [pc, #80]	@ (800bd60 <xTaskIncrementTick+0x164>)
 800bd0e:	4613      	mov	r3, r2
 800bd10:	009b      	lsls	r3, r3, #2
 800bd12:	4413      	add	r3, r2
 800bd14:	009b      	lsls	r3, r3, #2
 800bd16:	440b      	add	r3, r1
 800bd18:	681b      	ldr	r3, [r3, #0]
 800bd1a:	2b01      	cmp	r3, #1
 800bd1c:	d901      	bls.n	800bd22 <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 800bd1e:	2301      	movs	r3, #1
 800bd20:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800bd22:	4b11      	ldr	r3, [pc, #68]	@ (800bd68 <xTaskIncrementTick+0x16c>)
 800bd24:	681b      	ldr	r3, [r3, #0]
 800bd26:	2b00      	cmp	r3, #0
 800bd28:	d007      	beq.n	800bd3a <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 800bd2a:	2301      	movs	r3, #1
 800bd2c:	617b      	str	r3, [r7, #20]
 800bd2e:	e004      	b.n	800bd3a <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800bd30:	4b0e      	ldr	r3, [pc, #56]	@ (800bd6c <xTaskIncrementTick+0x170>)
 800bd32:	681b      	ldr	r3, [r3, #0]
 800bd34:	3301      	adds	r3, #1
 800bd36:	4a0d      	ldr	r2, [pc, #52]	@ (800bd6c <xTaskIncrementTick+0x170>)
 800bd38:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800bd3a:	697b      	ldr	r3, [r7, #20]
}
 800bd3c:	4618      	mov	r0, r3
 800bd3e:	3718      	adds	r7, #24
 800bd40:	46bd      	mov	sp, r7
 800bd42:	bd80      	pop	{r7, pc}
 800bd44:	200067f0 	.word	0x200067f0
 800bd48:	200067cc 	.word	0x200067cc
 800bd4c:	20006780 	.word	0x20006780
 800bd50:	20006784 	.word	0x20006784
 800bd54:	200067e0 	.word	0x200067e0
 800bd58:	200067e8 	.word	0x200067e8
 800bd5c:	200067d0 	.word	0x200067d0
 800bd60:	200062f8 	.word	0x200062f8
 800bd64:	200062f4 	.word	0x200062f4
 800bd68:	200067dc 	.word	0x200067dc
 800bd6c:	200067d8 	.word	0x200067d8

0800bd70 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800bd70:	b480      	push	{r7}
 800bd72:	b085      	sub	sp, #20
 800bd74:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800bd76:	4b2b      	ldr	r3, [pc, #172]	@ (800be24 <vTaskSwitchContext+0xb4>)
 800bd78:	681b      	ldr	r3, [r3, #0]
 800bd7a:	2b00      	cmp	r3, #0
 800bd7c:	d003      	beq.n	800bd86 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800bd7e:	4b2a      	ldr	r3, [pc, #168]	@ (800be28 <vTaskSwitchContext+0xb8>)
 800bd80:	2201      	movs	r2, #1
 800bd82:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800bd84:	e047      	b.n	800be16 <vTaskSwitchContext+0xa6>
		xYieldPending = pdFALSE;
 800bd86:	4b28      	ldr	r3, [pc, #160]	@ (800be28 <vTaskSwitchContext+0xb8>)
 800bd88:	2200      	movs	r2, #0
 800bd8a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bd8c:	4b27      	ldr	r3, [pc, #156]	@ (800be2c <vTaskSwitchContext+0xbc>)
 800bd8e:	681b      	ldr	r3, [r3, #0]
 800bd90:	60fb      	str	r3, [r7, #12]
 800bd92:	e011      	b.n	800bdb8 <vTaskSwitchContext+0x48>
 800bd94:	68fb      	ldr	r3, [r7, #12]
 800bd96:	2b00      	cmp	r3, #0
 800bd98:	d10b      	bne.n	800bdb2 <vTaskSwitchContext+0x42>
	__asm volatile
 800bd9a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bd9e:	f383 8811 	msr	BASEPRI, r3
 800bda2:	f3bf 8f6f 	isb	sy
 800bda6:	f3bf 8f4f 	dsb	sy
 800bdaa:	607b      	str	r3, [r7, #4]
}
 800bdac:	bf00      	nop
 800bdae:	bf00      	nop
 800bdb0:	e7fd      	b.n	800bdae <vTaskSwitchContext+0x3e>
 800bdb2:	68fb      	ldr	r3, [r7, #12]
 800bdb4:	3b01      	subs	r3, #1
 800bdb6:	60fb      	str	r3, [r7, #12]
 800bdb8:	491d      	ldr	r1, [pc, #116]	@ (800be30 <vTaskSwitchContext+0xc0>)
 800bdba:	68fa      	ldr	r2, [r7, #12]
 800bdbc:	4613      	mov	r3, r2
 800bdbe:	009b      	lsls	r3, r3, #2
 800bdc0:	4413      	add	r3, r2
 800bdc2:	009b      	lsls	r3, r3, #2
 800bdc4:	440b      	add	r3, r1
 800bdc6:	681b      	ldr	r3, [r3, #0]
 800bdc8:	2b00      	cmp	r3, #0
 800bdca:	d0e3      	beq.n	800bd94 <vTaskSwitchContext+0x24>
 800bdcc:	68fa      	ldr	r2, [r7, #12]
 800bdce:	4613      	mov	r3, r2
 800bdd0:	009b      	lsls	r3, r3, #2
 800bdd2:	4413      	add	r3, r2
 800bdd4:	009b      	lsls	r3, r3, #2
 800bdd6:	4a16      	ldr	r2, [pc, #88]	@ (800be30 <vTaskSwitchContext+0xc0>)
 800bdd8:	4413      	add	r3, r2
 800bdda:	60bb      	str	r3, [r7, #8]
 800bddc:	68bb      	ldr	r3, [r7, #8]
 800bdde:	685b      	ldr	r3, [r3, #4]
 800bde0:	685a      	ldr	r2, [r3, #4]
 800bde2:	68bb      	ldr	r3, [r7, #8]
 800bde4:	605a      	str	r2, [r3, #4]
 800bde6:	68bb      	ldr	r3, [r7, #8]
 800bde8:	685a      	ldr	r2, [r3, #4]
 800bdea:	68bb      	ldr	r3, [r7, #8]
 800bdec:	3308      	adds	r3, #8
 800bdee:	429a      	cmp	r2, r3
 800bdf0:	d104      	bne.n	800bdfc <vTaskSwitchContext+0x8c>
 800bdf2:	68bb      	ldr	r3, [r7, #8]
 800bdf4:	685b      	ldr	r3, [r3, #4]
 800bdf6:	685a      	ldr	r2, [r3, #4]
 800bdf8:	68bb      	ldr	r3, [r7, #8]
 800bdfa:	605a      	str	r2, [r3, #4]
 800bdfc:	68bb      	ldr	r3, [r7, #8]
 800bdfe:	685b      	ldr	r3, [r3, #4]
 800be00:	68db      	ldr	r3, [r3, #12]
 800be02:	4a0c      	ldr	r2, [pc, #48]	@ (800be34 <vTaskSwitchContext+0xc4>)
 800be04:	6013      	str	r3, [r2, #0]
 800be06:	4a09      	ldr	r2, [pc, #36]	@ (800be2c <vTaskSwitchContext+0xbc>)
 800be08:	68fb      	ldr	r3, [r7, #12]
 800be0a:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800be0c:	4b09      	ldr	r3, [pc, #36]	@ (800be34 <vTaskSwitchContext+0xc4>)
 800be0e:	681b      	ldr	r3, [r3, #0]
 800be10:	3354      	adds	r3, #84	@ 0x54
 800be12:	4a09      	ldr	r2, [pc, #36]	@ (800be38 <vTaskSwitchContext+0xc8>)
 800be14:	6013      	str	r3, [r2, #0]
}
 800be16:	bf00      	nop
 800be18:	3714      	adds	r7, #20
 800be1a:	46bd      	mov	sp, r7
 800be1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be20:	4770      	bx	lr
 800be22:	bf00      	nop
 800be24:	200067f0 	.word	0x200067f0
 800be28:	200067dc 	.word	0x200067dc
 800be2c:	200067d0 	.word	0x200067d0
 800be30:	200062f8 	.word	0x200062f8
 800be34:	200062f4 	.word	0x200062f4
 800be38:	20000104 	.word	0x20000104

0800be3c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800be3c:	b580      	push	{r7, lr}
 800be3e:	b084      	sub	sp, #16
 800be40:	af00      	add	r7, sp, #0
 800be42:	6078      	str	r0, [r7, #4]
 800be44:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800be46:	687b      	ldr	r3, [r7, #4]
 800be48:	2b00      	cmp	r3, #0
 800be4a:	d10b      	bne.n	800be64 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 800be4c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800be50:	f383 8811 	msr	BASEPRI, r3
 800be54:	f3bf 8f6f 	isb	sy
 800be58:	f3bf 8f4f 	dsb	sy
 800be5c:	60fb      	str	r3, [r7, #12]
}
 800be5e:	bf00      	nop
 800be60:	bf00      	nop
 800be62:	e7fd      	b.n	800be60 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800be64:	4b07      	ldr	r3, [pc, #28]	@ (800be84 <vTaskPlaceOnEventList+0x48>)
 800be66:	681b      	ldr	r3, [r3, #0]
 800be68:	3318      	adds	r3, #24
 800be6a:	4619      	mov	r1, r3
 800be6c:	6878      	ldr	r0, [r7, #4]
 800be6e:	f7fe fe48 	bl	800ab02 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800be72:	2101      	movs	r1, #1
 800be74:	6838      	ldr	r0, [r7, #0]
 800be76:	f000 faaf 	bl	800c3d8 <prvAddCurrentTaskToDelayedList>
}
 800be7a:	bf00      	nop
 800be7c:	3710      	adds	r7, #16
 800be7e:	46bd      	mov	sp, r7
 800be80:	bd80      	pop	{r7, pc}
 800be82:	bf00      	nop
 800be84:	200062f4 	.word	0x200062f4

0800be88 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800be88:	b580      	push	{r7, lr}
 800be8a:	b086      	sub	sp, #24
 800be8c:	af00      	add	r7, sp, #0
 800be8e:	60f8      	str	r0, [r7, #12]
 800be90:	60b9      	str	r1, [r7, #8]
 800be92:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800be94:	68fb      	ldr	r3, [r7, #12]
 800be96:	2b00      	cmp	r3, #0
 800be98:	d10b      	bne.n	800beb2 <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 800be9a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800be9e:	f383 8811 	msr	BASEPRI, r3
 800bea2:	f3bf 8f6f 	isb	sy
 800bea6:	f3bf 8f4f 	dsb	sy
 800beaa:	617b      	str	r3, [r7, #20]
}
 800beac:	bf00      	nop
 800beae:	bf00      	nop
 800beb0:	e7fd      	b.n	800beae <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800beb2:	4b0a      	ldr	r3, [pc, #40]	@ (800bedc <vTaskPlaceOnEventListRestricted+0x54>)
 800beb4:	681b      	ldr	r3, [r3, #0]
 800beb6:	3318      	adds	r3, #24
 800beb8:	4619      	mov	r1, r3
 800beba:	68f8      	ldr	r0, [r7, #12]
 800bebc:	f7fe fdfd 	bl	800aaba <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800bec0:	687b      	ldr	r3, [r7, #4]
 800bec2:	2b00      	cmp	r3, #0
 800bec4:	d002      	beq.n	800becc <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 800bec6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800beca:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800becc:	6879      	ldr	r1, [r7, #4]
 800bece:	68b8      	ldr	r0, [r7, #8]
 800bed0:	f000 fa82 	bl	800c3d8 <prvAddCurrentTaskToDelayedList>
	}
 800bed4:	bf00      	nop
 800bed6:	3718      	adds	r7, #24
 800bed8:	46bd      	mov	sp, r7
 800beda:	bd80      	pop	{r7, pc}
 800bedc:	200062f4 	.word	0x200062f4

0800bee0 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800bee0:	b580      	push	{r7, lr}
 800bee2:	b086      	sub	sp, #24
 800bee4:	af00      	add	r7, sp, #0
 800bee6:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bee8:	687b      	ldr	r3, [r7, #4]
 800beea:	68db      	ldr	r3, [r3, #12]
 800beec:	68db      	ldr	r3, [r3, #12]
 800beee:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800bef0:	693b      	ldr	r3, [r7, #16]
 800bef2:	2b00      	cmp	r3, #0
 800bef4:	d10b      	bne.n	800bf0e <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 800bef6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800befa:	f383 8811 	msr	BASEPRI, r3
 800befe:	f3bf 8f6f 	isb	sy
 800bf02:	f3bf 8f4f 	dsb	sy
 800bf06:	60fb      	str	r3, [r7, #12]
}
 800bf08:	bf00      	nop
 800bf0a:	bf00      	nop
 800bf0c:	e7fd      	b.n	800bf0a <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800bf0e:	693b      	ldr	r3, [r7, #16]
 800bf10:	3318      	adds	r3, #24
 800bf12:	4618      	mov	r0, r3
 800bf14:	f7fe fe2e 	bl	800ab74 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800bf18:	4b1d      	ldr	r3, [pc, #116]	@ (800bf90 <xTaskRemoveFromEventList+0xb0>)
 800bf1a:	681b      	ldr	r3, [r3, #0]
 800bf1c:	2b00      	cmp	r3, #0
 800bf1e:	d11d      	bne.n	800bf5c <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800bf20:	693b      	ldr	r3, [r7, #16]
 800bf22:	3304      	adds	r3, #4
 800bf24:	4618      	mov	r0, r3
 800bf26:	f7fe fe25 	bl	800ab74 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800bf2a:	693b      	ldr	r3, [r7, #16]
 800bf2c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800bf2e:	4b19      	ldr	r3, [pc, #100]	@ (800bf94 <xTaskRemoveFromEventList+0xb4>)
 800bf30:	681b      	ldr	r3, [r3, #0]
 800bf32:	429a      	cmp	r2, r3
 800bf34:	d903      	bls.n	800bf3e <xTaskRemoveFromEventList+0x5e>
 800bf36:	693b      	ldr	r3, [r7, #16]
 800bf38:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bf3a:	4a16      	ldr	r2, [pc, #88]	@ (800bf94 <xTaskRemoveFromEventList+0xb4>)
 800bf3c:	6013      	str	r3, [r2, #0]
 800bf3e:	693b      	ldr	r3, [r7, #16]
 800bf40:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800bf42:	4613      	mov	r3, r2
 800bf44:	009b      	lsls	r3, r3, #2
 800bf46:	4413      	add	r3, r2
 800bf48:	009b      	lsls	r3, r3, #2
 800bf4a:	4a13      	ldr	r2, [pc, #76]	@ (800bf98 <xTaskRemoveFromEventList+0xb8>)
 800bf4c:	441a      	add	r2, r3
 800bf4e:	693b      	ldr	r3, [r7, #16]
 800bf50:	3304      	adds	r3, #4
 800bf52:	4619      	mov	r1, r3
 800bf54:	4610      	mov	r0, r2
 800bf56:	f7fe fdb0 	bl	800aaba <vListInsertEnd>
 800bf5a:	e005      	b.n	800bf68 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800bf5c:	693b      	ldr	r3, [r7, #16]
 800bf5e:	3318      	adds	r3, #24
 800bf60:	4619      	mov	r1, r3
 800bf62:	480e      	ldr	r0, [pc, #56]	@ (800bf9c <xTaskRemoveFromEventList+0xbc>)
 800bf64:	f7fe fda9 	bl	800aaba <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800bf68:	693b      	ldr	r3, [r7, #16]
 800bf6a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800bf6c:	4b0c      	ldr	r3, [pc, #48]	@ (800bfa0 <xTaskRemoveFromEventList+0xc0>)
 800bf6e:	681b      	ldr	r3, [r3, #0]
 800bf70:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bf72:	429a      	cmp	r2, r3
 800bf74:	d905      	bls.n	800bf82 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800bf76:	2301      	movs	r3, #1
 800bf78:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800bf7a:	4b0a      	ldr	r3, [pc, #40]	@ (800bfa4 <xTaskRemoveFromEventList+0xc4>)
 800bf7c:	2201      	movs	r2, #1
 800bf7e:	601a      	str	r2, [r3, #0]
 800bf80:	e001      	b.n	800bf86 <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 800bf82:	2300      	movs	r3, #0
 800bf84:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800bf86:	697b      	ldr	r3, [r7, #20]
}
 800bf88:	4618      	mov	r0, r3
 800bf8a:	3718      	adds	r7, #24
 800bf8c:	46bd      	mov	sp, r7
 800bf8e:	bd80      	pop	{r7, pc}
 800bf90:	200067f0 	.word	0x200067f0
 800bf94:	200067d0 	.word	0x200067d0
 800bf98:	200062f8 	.word	0x200062f8
 800bf9c:	20006788 	.word	0x20006788
 800bfa0:	200062f4 	.word	0x200062f4
 800bfa4:	200067dc 	.word	0x200067dc

0800bfa8 <vTaskSetTimeOutState>:
	}
}
/*-----------------------------------------------------------*/

void vTaskSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800bfa8:	b580      	push	{r7, lr}
 800bfaa:	b084      	sub	sp, #16
 800bfac:	af00      	add	r7, sp, #0
 800bfae:	6078      	str	r0, [r7, #4]
	configASSERT( pxTimeOut );
 800bfb0:	687b      	ldr	r3, [r7, #4]
 800bfb2:	2b00      	cmp	r3, #0
 800bfb4:	d10b      	bne.n	800bfce <vTaskSetTimeOutState+0x26>
	__asm volatile
 800bfb6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bfba:	f383 8811 	msr	BASEPRI, r3
 800bfbe:	f3bf 8f6f 	isb	sy
 800bfc2:	f3bf 8f4f 	dsb	sy
 800bfc6:	60fb      	str	r3, [r7, #12]
}
 800bfc8:	bf00      	nop
 800bfca:	bf00      	nop
 800bfcc:	e7fd      	b.n	800bfca <vTaskSetTimeOutState+0x22>
	taskENTER_CRITICAL();
 800bfce:	f000 fee3 	bl	800cd98 <vPortEnterCritical>
	{
		pxTimeOut->xOverflowCount = xNumOfOverflows;
 800bfd2:	4b07      	ldr	r3, [pc, #28]	@ (800bff0 <vTaskSetTimeOutState+0x48>)
 800bfd4:	681a      	ldr	r2, [r3, #0]
 800bfd6:	687b      	ldr	r3, [r7, #4]
 800bfd8:	601a      	str	r2, [r3, #0]
		pxTimeOut->xTimeOnEntering = xTickCount;
 800bfda:	4b06      	ldr	r3, [pc, #24]	@ (800bff4 <vTaskSetTimeOutState+0x4c>)
 800bfdc:	681a      	ldr	r2, [r3, #0]
 800bfde:	687b      	ldr	r3, [r7, #4]
 800bfe0:	605a      	str	r2, [r3, #4]
	}
	taskEXIT_CRITICAL();
 800bfe2:	f000 ff0b 	bl	800cdfc <vPortExitCritical>
}
 800bfe6:	bf00      	nop
 800bfe8:	3710      	adds	r7, #16
 800bfea:	46bd      	mov	sp, r7
 800bfec:	bd80      	pop	{r7, pc}
 800bfee:	bf00      	nop
 800bff0:	200067e0 	.word	0x200067e0
 800bff4:	200067cc 	.word	0x200067cc

0800bff8 <vTaskInternalSetTimeOutState>:
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800bff8:	b480      	push	{r7}
 800bffa:	b083      	sub	sp, #12
 800bffc:	af00      	add	r7, sp, #0
 800bffe:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800c000:	4b06      	ldr	r3, [pc, #24]	@ (800c01c <vTaskInternalSetTimeOutState+0x24>)
 800c002:	681a      	ldr	r2, [r3, #0]
 800c004:	687b      	ldr	r3, [r7, #4]
 800c006:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800c008:	4b05      	ldr	r3, [pc, #20]	@ (800c020 <vTaskInternalSetTimeOutState+0x28>)
 800c00a:	681a      	ldr	r2, [r3, #0]
 800c00c:	687b      	ldr	r3, [r7, #4]
 800c00e:	605a      	str	r2, [r3, #4]
}
 800c010:	bf00      	nop
 800c012:	370c      	adds	r7, #12
 800c014:	46bd      	mov	sp, r7
 800c016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c01a:	4770      	bx	lr
 800c01c:	200067e0 	.word	0x200067e0
 800c020:	200067cc 	.word	0x200067cc

0800c024 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800c024:	b580      	push	{r7, lr}
 800c026:	b088      	sub	sp, #32
 800c028:	af00      	add	r7, sp, #0
 800c02a:	6078      	str	r0, [r7, #4]
 800c02c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800c02e:	687b      	ldr	r3, [r7, #4]
 800c030:	2b00      	cmp	r3, #0
 800c032:	d10b      	bne.n	800c04c <xTaskCheckForTimeOut+0x28>
	__asm volatile
 800c034:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c038:	f383 8811 	msr	BASEPRI, r3
 800c03c:	f3bf 8f6f 	isb	sy
 800c040:	f3bf 8f4f 	dsb	sy
 800c044:	613b      	str	r3, [r7, #16]
}
 800c046:	bf00      	nop
 800c048:	bf00      	nop
 800c04a:	e7fd      	b.n	800c048 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800c04c:	683b      	ldr	r3, [r7, #0]
 800c04e:	2b00      	cmp	r3, #0
 800c050:	d10b      	bne.n	800c06a <xTaskCheckForTimeOut+0x46>
	__asm volatile
 800c052:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c056:	f383 8811 	msr	BASEPRI, r3
 800c05a:	f3bf 8f6f 	isb	sy
 800c05e:	f3bf 8f4f 	dsb	sy
 800c062:	60fb      	str	r3, [r7, #12]
}
 800c064:	bf00      	nop
 800c066:	bf00      	nop
 800c068:	e7fd      	b.n	800c066 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 800c06a:	f000 fe95 	bl	800cd98 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800c06e:	4b1d      	ldr	r3, [pc, #116]	@ (800c0e4 <xTaskCheckForTimeOut+0xc0>)
 800c070:	681b      	ldr	r3, [r3, #0]
 800c072:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800c074:	687b      	ldr	r3, [r7, #4]
 800c076:	685b      	ldr	r3, [r3, #4]
 800c078:	69ba      	ldr	r2, [r7, #24]
 800c07a:	1ad3      	subs	r3, r2, r3
 800c07c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800c07e:	683b      	ldr	r3, [r7, #0]
 800c080:	681b      	ldr	r3, [r3, #0]
 800c082:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800c086:	d102      	bne.n	800c08e <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800c088:	2300      	movs	r3, #0
 800c08a:	61fb      	str	r3, [r7, #28]
 800c08c:	e023      	b.n	800c0d6 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800c08e:	687b      	ldr	r3, [r7, #4]
 800c090:	681a      	ldr	r2, [r3, #0]
 800c092:	4b15      	ldr	r3, [pc, #84]	@ (800c0e8 <xTaskCheckForTimeOut+0xc4>)
 800c094:	681b      	ldr	r3, [r3, #0]
 800c096:	429a      	cmp	r2, r3
 800c098:	d007      	beq.n	800c0aa <xTaskCheckForTimeOut+0x86>
 800c09a:	687b      	ldr	r3, [r7, #4]
 800c09c:	685b      	ldr	r3, [r3, #4]
 800c09e:	69ba      	ldr	r2, [r7, #24]
 800c0a0:	429a      	cmp	r2, r3
 800c0a2:	d302      	bcc.n	800c0aa <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800c0a4:	2301      	movs	r3, #1
 800c0a6:	61fb      	str	r3, [r7, #28]
 800c0a8:	e015      	b.n	800c0d6 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800c0aa:	683b      	ldr	r3, [r7, #0]
 800c0ac:	681b      	ldr	r3, [r3, #0]
 800c0ae:	697a      	ldr	r2, [r7, #20]
 800c0b0:	429a      	cmp	r2, r3
 800c0b2:	d20b      	bcs.n	800c0cc <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800c0b4:	683b      	ldr	r3, [r7, #0]
 800c0b6:	681a      	ldr	r2, [r3, #0]
 800c0b8:	697b      	ldr	r3, [r7, #20]
 800c0ba:	1ad2      	subs	r2, r2, r3
 800c0bc:	683b      	ldr	r3, [r7, #0]
 800c0be:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800c0c0:	6878      	ldr	r0, [r7, #4]
 800c0c2:	f7ff ff99 	bl	800bff8 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800c0c6:	2300      	movs	r3, #0
 800c0c8:	61fb      	str	r3, [r7, #28]
 800c0ca:	e004      	b.n	800c0d6 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 800c0cc:	683b      	ldr	r3, [r7, #0]
 800c0ce:	2200      	movs	r2, #0
 800c0d0:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800c0d2:	2301      	movs	r3, #1
 800c0d4:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800c0d6:	f000 fe91 	bl	800cdfc <vPortExitCritical>

	return xReturn;
 800c0da:	69fb      	ldr	r3, [r7, #28]
}
 800c0dc:	4618      	mov	r0, r3
 800c0de:	3720      	adds	r7, #32
 800c0e0:	46bd      	mov	sp, r7
 800c0e2:	bd80      	pop	{r7, pc}
 800c0e4:	200067cc 	.word	0x200067cc
 800c0e8:	200067e0 	.word	0x200067e0

0800c0ec <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800c0ec:	b480      	push	{r7}
 800c0ee:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800c0f0:	4b03      	ldr	r3, [pc, #12]	@ (800c100 <vTaskMissedYield+0x14>)
 800c0f2:	2201      	movs	r2, #1
 800c0f4:	601a      	str	r2, [r3, #0]
}
 800c0f6:	bf00      	nop
 800c0f8:	46bd      	mov	sp, r7
 800c0fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0fe:	4770      	bx	lr
 800c100:	200067dc 	.word	0x200067dc

0800c104 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800c104:	b580      	push	{r7, lr}
 800c106:	b082      	sub	sp, #8
 800c108:	af00      	add	r7, sp, #0
 800c10a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800c10c:	f000 f852 	bl	800c1b4 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800c110:	4b06      	ldr	r3, [pc, #24]	@ (800c12c <prvIdleTask+0x28>)
 800c112:	681b      	ldr	r3, [r3, #0]
 800c114:	2b01      	cmp	r3, #1
 800c116:	d9f9      	bls.n	800c10c <prvIdleTask+0x8>
			{
				taskYIELD();
 800c118:	4b05      	ldr	r3, [pc, #20]	@ (800c130 <prvIdleTask+0x2c>)
 800c11a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c11e:	601a      	str	r2, [r3, #0]
 800c120:	f3bf 8f4f 	dsb	sy
 800c124:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800c128:	e7f0      	b.n	800c10c <prvIdleTask+0x8>
 800c12a:	bf00      	nop
 800c12c:	200062f8 	.word	0x200062f8
 800c130:	e000ed04 	.word	0xe000ed04

0800c134 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800c134:	b580      	push	{r7, lr}
 800c136:	b082      	sub	sp, #8
 800c138:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800c13a:	2300      	movs	r3, #0
 800c13c:	607b      	str	r3, [r7, #4]
 800c13e:	e00c      	b.n	800c15a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800c140:	687a      	ldr	r2, [r7, #4]
 800c142:	4613      	mov	r3, r2
 800c144:	009b      	lsls	r3, r3, #2
 800c146:	4413      	add	r3, r2
 800c148:	009b      	lsls	r3, r3, #2
 800c14a:	4a12      	ldr	r2, [pc, #72]	@ (800c194 <prvInitialiseTaskLists+0x60>)
 800c14c:	4413      	add	r3, r2
 800c14e:	4618      	mov	r0, r3
 800c150:	f7fe fc86 	bl	800aa60 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800c154:	687b      	ldr	r3, [r7, #4]
 800c156:	3301      	adds	r3, #1
 800c158:	607b      	str	r3, [r7, #4]
 800c15a:	687b      	ldr	r3, [r7, #4]
 800c15c:	2b37      	cmp	r3, #55	@ 0x37
 800c15e:	d9ef      	bls.n	800c140 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800c160:	480d      	ldr	r0, [pc, #52]	@ (800c198 <prvInitialiseTaskLists+0x64>)
 800c162:	f7fe fc7d 	bl	800aa60 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800c166:	480d      	ldr	r0, [pc, #52]	@ (800c19c <prvInitialiseTaskLists+0x68>)
 800c168:	f7fe fc7a 	bl	800aa60 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800c16c:	480c      	ldr	r0, [pc, #48]	@ (800c1a0 <prvInitialiseTaskLists+0x6c>)
 800c16e:	f7fe fc77 	bl	800aa60 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800c172:	480c      	ldr	r0, [pc, #48]	@ (800c1a4 <prvInitialiseTaskLists+0x70>)
 800c174:	f7fe fc74 	bl	800aa60 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800c178:	480b      	ldr	r0, [pc, #44]	@ (800c1a8 <prvInitialiseTaskLists+0x74>)
 800c17a:	f7fe fc71 	bl	800aa60 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800c17e:	4b0b      	ldr	r3, [pc, #44]	@ (800c1ac <prvInitialiseTaskLists+0x78>)
 800c180:	4a05      	ldr	r2, [pc, #20]	@ (800c198 <prvInitialiseTaskLists+0x64>)
 800c182:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800c184:	4b0a      	ldr	r3, [pc, #40]	@ (800c1b0 <prvInitialiseTaskLists+0x7c>)
 800c186:	4a05      	ldr	r2, [pc, #20]	@ (800c19c <prvInitialiseTaskLists+0x68>)
 800c188:	601a      	str	r2, [r3, #0]
}
 800c18a:	bf00      	nop
 800c18c:	3708      	adds	r7, #8
 800c18e:	46bd      	mov	sp, r7
 800c190:	bd80      	pop	{r7, pc}
 800c192:	bf00      	nop
 800c194:	200062f8 	.word	0x200062f8
 800c198:	20006758 	.word	0x20006758
 800c19c:	2000676c 	.word	0x2000676c
 800c1a0:	20006788 	.word	0x20006788
 800c1a4:	2000679c 	.word	0x2000679c
 800c1a8:	200067b4 	.word	0x200067b4
 800c1ac:	20006780 	.word	0x20006780
 800c1b0:	20006784 	.word	0x20006784

0800c1b4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800c1b4:	b580      	push	{r7, lr}
 800c1b6:	b082      	sub	sp, #8
 800c1b8:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800c1ba:	e019      	b.n	800c1f0 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800c1bc:	f000 fdec 	bl	800cd98 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c1c0:	4b10      	ldr	r3, [pc, #64]	@ (800c204 <prvCheckTasksWaitingTermination+0x50>)
 800c1c2:	68db      	ldr	r3, [r3, #12]
 800c1c4:	68db      	ldr	r3, [r3, #12]
 800c1c6:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800c1c8:	687b      	ldr	r3, [r7, #4]
 800c1ca:	3304      	adds	r3, #4
 800c1cc:	4618      	mov	r0, r3
 800c1ce:	f7fe fcd1 	bl	800ab74 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800c1d2:	4b0d      	ldr	r3, [pc, #52]	@ (800c208 <prvCheckTasksWaitingTermination+0x54>)
 800c1d4:	681b      	ldr	r3, [r3, #0]
 800c1d6:	3b01      	subs	r3, #1
 800c1d8:	4a0b      	ldr	r2, [pc, #44]	@ (800c208 <prvCheckTasksWaitingTermination+0x54>)
 800c1da:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800c1dc:	4b0b      	ldr	r3, [pc, #44]	@ (800c20c <prvCheckTasksWaitingTermination+0x58>)
 800c1de:	681b      	ldr	r3, [r3, #0]
 800c1e0:	3b01      	subs	r3, #1
 800c1e2:	4a0a      	ldr	r2, [pc, #40]	@ (800c20c <prvCheckTasksWaitingTermination+0x58>)
 800c1e4:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800c1e6:	f000 fe09 	bl	800cdfc <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800c1ea:	6878      	ldr	r0, [r7, #4]
 800c1ec:	f000 f810 	bl	800c210 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800c1f0:	4b06      	ldr	r3, [pc, #24]	@ (800c20c <prvCheckTasksWaitingTermination+0x58>)
 800c1f2:	681b      	ldr	r3, [r3, #0]
 800c1f4:	2b00      	cmp	r3, #0
 800c1f6:	d1e1      	bne.n	800c1bc <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800c1f8:	bf00      	nop
 800c1fa:	bf00      	nop
 800c1fc:	3708      	adds	r7, #8
 800c1fe:	46bd      	mov	sp, r7
 800c200:	bd80      	pop	{r7, pc}
 800c202:	bf00      	nop
 800c204:	2000679c 	.word	0x2000679c
 800c208:	200067c8 	.word	0x200067c8
 800c20c:	200067b0 	.word	0x200067b0

0800c210 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800c210:	b580      	push	{r7, lr}
 800c212:	b084      	sub	sp, #16
 800c214:	af00      	add	r7, sp, #0
 800c216:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800c218:	687b      	ldr	r3, [r7, #4]
 800c21a:	3354      	adds	r3, #84	@ 0x54
 800c21c:	4618      	mov	r0, r3
 800c21e:	f00d fd3f 	bl	8019ca0 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800c222:	687b      	ldr	r3, [r7, #4]
 800c224:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800c228:	2b00      	cmp	r3, #0
 800c22a:	d108      	bne.n	800c23e <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800c22c:	687b      	ldr	r3, [r7, #4]
 800c22e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c230:	4618      	mov	r0, r3
 800c232:	f000 ffa1 	bl	800d178 <vPortFree>
				vPortFree( pxTCB );
 800c236:	6878      	ldr	r0, [r7, #4]
 800c238:	f000 ff9e 	bl	800d178 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800c23c:	e019      	b.n	800c272 <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800c23e:	687b      	ldr	r3, [r7, #4]
 800c240:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800c244:	2b01      	cmp	r3, #1
 800c246:	d103      	bne.n	800c250 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800c248:	6878      	ldr	r0, [r7, #4]
 800c24a:	f000 ff95 	bl	800d178 <vPortFree>
	}
 800c24e:	e010      	b.n	800c272 <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800c250:	687b      	ldr	r3, [r7, #4]
 800c252:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800c256:	2b02      	cmp	r3, #2
 800c258:	d00b      	beq.n	800c272 <prvDeleteTCB+0x62>
	__asm volatile
 800c25a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c25e:	f383 8811 	msr	BASEPRI, r3
 800c262:	f3bf 8f6f 	isb	sy
 800c266:	f3bf 8f4f 	dsb	sy
 800c26a:	60fb      	str	r3, [r7, #12]
}
 800c26c:	bf00      	nop
 800c26e:	bf00      	nop
 800c270:	e7fd      	b.n	800c26e <prvDeleteTCB+0x5e>
	}
 800c272:	bf00      	nop
 800c274:	3710      	adds	r7, #16
 800c276:	46bd      	mov	sp, r7
 800c278:	bd80      	pop	{r7, pc}
	...

0800c27c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800c27c:	b480      	push	{r7}
 800c27e:	b083      	sub	sp, #12
 800c280:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800c282:	4b0c      	ldr	r3, [pc, #48]	@ (800c2b4 <prvResetNextTaskUnblockTime+0x38>)
 800c284:	681b      	ldr	r3, [r3, #0]
 800c286:	681b      	ldr	r3, [r3, #0]
 800c288:	2b00      	cmp	r3, #0
 800c28a:	d104      	bne.n	800c296 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800c28c:	4b0a      	ldr	r3, [pc, #40]	@ (800c2b8 <prvResetNextTaskUnblockTime+0x3c>)
 800c28e:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800c292:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800c294:	e008      	b.n	800c2a8 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c296:	4b07      	ldr	r3, [pc, #28]	@ (800c2b4 <prvResetNextTaskUnblockTime+0x38>)
 800c298:	681b      	ldr	r3, [r3, #0]
 800c29a:	68db      	ldr	r3, [r3, #12]
 800c29c:	68db      	ldr	r3, [r3, #12]
 800c29e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800c2a0:	687b      	ldr	r3, [r7, #4]
 800c2a2:	685b      	ldr	r3, [r3, #4]
 800c2a4:	4a04      	ldr	r2, [pc, #16]	@ (800c2b8 <prvResetNextTaskUnblockTime+0x3c>)
 800c2a6:	6013      	str	r3, [r2, #0]
}
 800c2a8:	bf00      	nop
 800c2aa:	370c      	adds	r7, #12
 800c2ac:	46bd      	mov	sp, r7
 800c2ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2b2:	4770      	bx	lr
 800c2b4:	20006780 	.word	0x20006780
 800c2b8:	200067e8 	.word	0x200067e8

0800c2bc <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800c2bc:	b480      	push	{r7}
 800c2be:	b083      	sub	sp, #12
 800c2c0:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800c2c2:	4b0b      	ldr	r3, [pc, #44]	@ (800c2f0 <xTaskGetSchedulerState+0x34>)
 800c2c4:	681b      	ldr	r3, [r3, #0]
 800c2c6:	2b00      	cmp	r3, #0
 800c2c8:	d102      	bne.n	800c2d0 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800c2ca:	2301      	movs	r3, #1
 800c2cc:	607b      	str	r3, [r7, #4]
 800c2ce:	e008      	b.n	800c2e2 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c2d0:	4b08      	ldr	r3, [pc, #32]	@ (800c2f4 <xTaskGetSchedulerState+0x38>)
 800c2d2:	681b      	ldr	r3, [r3, #0]
 800c2d4:	2b00      	cmp	r3, #0
 800c2d6:	d102      	bne.n	800c2de <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800c2d8:	2302      	movs	r3, #2
 800c2da:	607b      	str	r3, [r7, #4]
 800c2dc:	e001      	b.n	800c2e2 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800c2de:	2300      	movs	r3, #0
 800c2e0:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800c2e2:	687b      	ldr	r3, [r7, #4]
	}
 800c2e4:	4618      	mov	r0, r3
 800c2e6:	370c      	adds	r7, #12
 800c2e8:	46bd      	mov	sp, r7
 800c2ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2ee:	4770      	bx	lr
 800c2f0:	200067d4 	.word	0x200067d4
 800c2f4:	200067f0 	.word	0x200067f0

0800c2f8 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800c2f8:	b580      	push	{r7, lr}
 800c2fa:	b086      	sub	sp, #24
 800c2fc:	af00      	add	r7, sp, #0
 800c2fe:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800c300:	687b      	ldr	r3, [r7, #4]
 800c302:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800c304:	2300      	movs	r3, #0
 800c306:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800c308:	687b      	ldr	r3, [r7, #4]
 800c30a:	2b00      	cmp	r3, #0
 800c30c:	d058      	beq.n	800c3c0 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800c30e:	4b2f      	ldr	r3, [pc, #188]	@ (800c3cc <xTaskPriorityDisinherit+0xd4>)
 800c310:	681b      	ldr	r3, [r3, #0]
 800c312:	693a      	ldr	r2, [r7, #16]
 800c314:	429a      	cmp	r2, r3
 800c316:	d00b      	beq.n	800c330 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 800c318:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c31c:	f383 8811 	msr	BASEPRI, r3
 800c320:	f3bf 8f6f 	isb	sy
 800c324:	f3bf 8f4f 	dsb	sy
 800c328:	60fb      	str	r3, [r7, #12]
}
 800c32a:	bf00      	nop
 800c32c:	bf00      	nop
 800c32e:	e7fd      	b.n	800c32c <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800c330:	693b      	ldr	r3, [r7, #16]
 800c332:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800c334:	2b00      	cmp	r3, #0
 800c336:	d10b      	bne.n	800c350 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 800c338:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c33c:	f383 8811 	msr	BASEPRI, r3
 800c340:	f3bf 8f6f 	isb	sy
 800c344:	f3bf 8f4f 	dsb	sy
 800c348:	60bb      	str	r3, [r7, #8]
}
 800c34a:	bf00      	nop
 800c34c:	bf00      	nop
 800c34e:	e7fd      	b.n	800c34c <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 800c350:	693b      	ldr	r3, [r7, #16]
 800c352:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800c354:	1e5a      	subs	r2, r3, #1
 800c356:	693b      	ldr	r3, [r7, #16]
 800c358:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800c35a:	693b      	ldr	r3, [r7, #16]
 800c35c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c35e:	693b      	ldr	r3, [r7, #16]
 800c360:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800c362:	429a      	cmp	r2, r3
 800c364:	d02c      	beq.n	800c3c0 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800c366:	693b      	ldr	r3, [r7, #16]
 800c368:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800c36a:	2b00      	cmp	r3, #0
 800c36c:	d128      	bne.n	800c3c0 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800c36e:	693b      	ldr	r3, [r7, #16]
 800c370:	3304      	adds	r3, #4
 800c372:	4618      	mov	r0, r3
 800c374:	f7fe fbfe 	bl	800ab74 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800c378:	693b      	ldr	r3, [r7, #16]
 800c37a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800c37c:	693b      	ldr	r3, [r7, #16]
 800c37e:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c380:	693b      	ldr	r3, [r7, #16]
 800c382:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c384:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800c388:	693b      	ldr	r3, [r7, #16]
 800c38a:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800c38c:	693b      	ldr	r3, [r7, #16]
 800c38e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c390:	4b0f      	ldr	r3, [pc, #60]	@ (800c3d0 <xTaskPriorityDisinherit+0xd8>)
 800c392:	681b      	ldr	r3, [r3, #0]
 800c394:	429a      	cmp	r2, r3
 800c396:	d903      	bls.n	800c3a0 <xTaskPriorityDisinherit+0xa8>
 800c398:	693b      	ldr	r3, [r7, #16]
 800c39a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c39c:	4a0c      	ldr	r2, [pc, #48]	@ (800c3d0 <xTaskPriorityDisinherit+0xd8>)
 800c39e:	6013      	str	r3, [r2, #0]
 800c3a0:	693b      	ldr	r3, [r7, #16]
 800c3a2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c3a4:	4613      	mov	r3, r2
 800c3a6:	009b      	lsls	r3, r3, #2
 800c3a8:	4413      	add	r3, r2
 800c3aa:	009b      	lsls	r3, r3, #2
 800c3ac:	4a09      	ldr	r2, [pc, #36]	@ (800c3d4 <xTaskPriorityDisinherit+0xdc>)
 800c3ae:	441a      	add	r2, r3
 800c3b0:	693b      	ldr	r3, [r7, #16]
 800c3b2:	3304      	adds	r3, #4
 800c3b4:	4619      	mov	r1, r3
 800c3b6:	4610      	mov	r0, r2
 800c3b8:	f7fe fb7f 	bl	800aaba <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800c3bc:	2301      	movs	r3, #1
 800c3be:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800c3c0:	697b      	ldr	r3, [r7, #20]
	}
 800c3c2:	4618      	mov	r0, r3
 800c3c4:	3718      	adds	r7, #24
 800c3c6:	46bd      	mov	sp, r7
 800c3c8:	bd80      	pop	{r7, pc}
 800c3ca:	bf00      	nop
 800c3cc:	200062f4 	.word	0x200062f4
 800c3d0:	200067d0 	.word	0x200067d0
 800c3d4:	200062f8 	.word	0x200062f8

0800c3d8 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800c3d8:	b580      	push	{r7, lr}
 800c3da:	b084      	sub	sp, #16
 800c3dc:	af00      	add	r7, sp, #0
 800c3de:	6078      	str	r0, [r7, #4]
 800c3e0:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800c3e2:	4b21      	ldr	r3, [pc, #132]	@ (800c468 <prvAddCurrentTaskToDelayedList+0x90>)
 800c3e4:	681b      	ldr	r3, [r3, #0]
 800c3e6:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800c3e8:	4b20      	ldr	r3, [pc, #128]	@ (800c46c <prvAddCurrentTaskToDelayedList+0x94>)
 800c3ea:	681b      	ldr	r3, [r3, #0]
 800c3ec:	3304      	adds	r3, #4
 800c3ee:	4618      	mov	r0, r3
 800c3f0:	f7fe fbc0 	bl	800ab74 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800c3f4:	687b      	ldr	r3, [r7, #4]
 800c3f6:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800c3fa:	d10a      	bne.n	800c412 <prvAddCurrentTaskToDelayedList+0x3a>
 800c3fc:	683b      	ldr	r3, [r7, #0]
 800c3fe:	2b00      	cmp	r3, #0
 800c400:	d007      	beq.n	800c412 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800c402:	4b1a      	ldr	r3, [pc, #104]	@ (800c46c <prvAddCurrentTaskToDelayedList+0x94>)
 800c404:	681b      	ldr	r3, [r3, #0]
 800c406:	3304      	adds	r3, #4
 800c408:	4619      	mov	r1, r3
 800c40a:	4819      	ldr	r0, [pc, #100]	@ (800c470 <prvAddCurrentTaskToDelayedList+0x98>)
 800c40c:	f7fe fb55 	bl	800aaba <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800c410:	e026      	b.n	800c460 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800c412:	68fa      	ldr	r2, [r7, #12]
 800c414:	687b      	ldr	r3, [r7, #4]
 800c416:	4413      	add	r3, r2
 800c418:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800c41a:	4b14      	ldr	r3, [pc, #80]	@ (800c46c <prvAddCurrentTaskToDelayedList+0x94>)
 800c41c:	681b      	ldr	r3, [r3, #0]
 800c41e:	68ba      	ldr	r2, [r7, #8]
 800c420:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800c422:	68ba      	ldr	r2, [r7, #8]
 800c424:	68fb      	ldr	r3, [r7, #12]
 800c426:	429a      	cmp	r2, r3
 800c428:	d209      	bcs.n	800c43e <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800c42a:	4b12      	ldr	r3, [pc, #72]	@ (800c474 <prvAddCurrentTaskToDelayedList+0x9c>)
 800c42c:	681a      	ldr	r2, [r3, #0]
 800c42e:	4b0f      	ldr	r3, [pc, #60]	@ (800c46c <prvAddCurrentTaskToDelayedList+0x94>)
 800c430:	681b      	ldr	r3, [r3, #0]
 800c432:	3304      	adds	r3, #4
 800c434:	4619      	mov	r1, r3
 800c436:	4610      	mov	r0, r2
 800c438:	f7fe fb63 	bl	800ab02 <vListInsert>
}
 800c43c:	e010      	b.n	800c460 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800c43e:	4b0e      	ldr	r3, [pc, #56]	@ (800c478 <prvAddCurrentTaskToDelayedList+0xa0>)
 800c440:	681a      	ldr	r2, [r3, #0]
 800c442:	4b0a      	ldr	r3, [pc, #40]	@ (800c46c <prvAddCurrentTaskToDelayedList+0x94>)
 800c444:	681b      	ldr	r3, [r3, #0]
 800c446:	3304      	adds	r3, #4
 800c448:	4619      	mov	r1, r3
 800c44a:	4610      	mov	r0, r2
 800c44c:	f7fe fb59 	bl	800ab02 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800c450:	4b0a      	ldr	r3, [pc, #40]	@ (800c47c <prvAddCurrentTaskToDelayedList+0xa4>)
 800c452:	681b      	ldr	r3, [r3, #0]
 800c454:	68ba      	ldr	r2, [r7, #8]
 800c456:	429a      	cmp	r2, r3
 800c458:	d202      	bcs.n	800c460 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800c45a:	4a08      	ldr	r2, [pc, #32]	@ (800c47c <prvAddCurrentTaskToDelayedList+0xa4>)
 800c45c:	68bb      	ldr	r3, [r7, #8]
 800c45e:	6013      	str	r3, [r2, #0]
}
 800c460:	bf00      	nop
 800c462:	3710      	adds	r7, #16
 800c464:	46bd      	mov	sp, r7
 800c466:	bd80      	pop	{r7, pc}
 800c468:	200067cc 	.word	0x200067cc
 800c46c:	200062f4 	.word	0x200062f4
 800c470:	200067b4 	.word	0x200067b4
 800c474:	20006784 	.word	0x20006784
 800c478:	20006780 	.word	0x20006780
 800c47c:	200067e8 	.word	0x200067e8

0800c480 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800c480:	b580      	push	{r7, lr}
 800c482:	b08a      	sub	sp, #40	@ 0x28
 800c484:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800c486:	2300      	movs	r3, #0
 800c488:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800c48a:	f000 fb13 	bl	800cab4 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800c48e:	4b1d      	ldr	r3, [pc, #116]	@ (800c504 <xTimerCreateTimerTask+0x84>)
 800c490:	681b      	ldr	r3, [r3, #0]
 800c492:	2b00      	cmp	r3, #0
 800c494:	d021      	beq.n	800c4da <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800c496:	2300      	movs	r3, #0
 800c498:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800c49a:	2300      	movs	r3, #0
 800c49c:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800c49e:	1d3a      	adds	r2, r7, #4
 800c4a0:	f107 0108 	add.w	r1, r7, #8
 800c4a4:	f107 030c 	add.w	r3, r7, #12
 800c4a8:	4618      	mov	r0, r3
 800c4aa:	f7fe fabf 	bl	800aa2c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800c4ae:	6879      	ldr	r1, [r7, #4]
 800c4b0:	68bb      	ldr	r3, [r7, #8]
 800c4b2:	68fa      	ldr	r2, [r7, #12]
 800c4b4:	9202      	str	r2, [sp, #8]
 800c4b6:	9301      	str	r3, [sp, #4]
 800c4b8:	2302      	movs	r3, #2
 800c4ba:	9300      	str	r3, [sp, #0]
 800c4bc:	2300      	movs	r3, #0
 800c4be:	460a      	mov	r2, r1
 800c4c0:	4911      	ldr	r1, [pc, #68]	@ (800c508 <xTimerCreateTimerTask+0x88>)
 800c4c2:	4812      	ldr	r0, [pc, #72]	@ (800c50c <xTimerCreateTimerTask+0x8c>)
 800c4c4:	f7ff f87a 	bl	800b5bc <xTaskCreateStatic>
 800c4c8:	4603      	mov	r3, r0
 800c4ca:	4a11      	ldr	r2, [pc, #68]	@ (800c510 <xTimerCreateTimerTask+0x90>)
 800c4cc:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800c4ce:	4b10      	ldr	r3, [pc, #64]	@ (800c510 <xTimerCreateTimerTask+0x90>)
 800c4d0:	681b      	ldr	r3, [r3, #0]
 800c4d2:	2b00      	cmp	r3, #0
 800c4d4:	d001      	beq.n	800c4da <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800c4d6:	2301      	movs	r3, #1
 800c4d8:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800c4da:	697b      	ldr	r3, [r7, #20]
 800c4dc:	2b00      	cmp	r3, #0
 800c4de:	d10b      	bne.n	800c4f8 <xTimerCreateTimerTask+0x78>
	__asm volatile
 800c4e0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c4e4:	f383 8811 	msr	BASEPRI, r3
 800c4e8:	f3bf 8f6f 	isb	sy
 800c4ec:	f3bf 8f4f 	dsb	sy
 800c4f0:	613b      	str	r3, [r7, #16]
}
 800c4f2:	bf00      	nop
 800c4f4:	bf00      	nop
 800c4f6:	e7fd      	b.n	800c4f4 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800c4f8:	697b      	ldr	r3, [r7, #20]
}
 800c4fa:	4618      	mov	r0, r3
 800c4fc:	3718      	adds	r7, #24
 800c4fe:	46bd      	mov	sp, r7
 800c500:	bd80      	pop	{r7, pc}
 800c502:	bf00      	nop
 800c504:	20006824 	.word	0x20006824
 800c508:	0801ad14 	.word	0x0801ad14
 800c50c:	0800c64d 	.word	0x0800c64d
 800c510:	20006828 	.word	0x20006828

0800c514 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800c514:	b580      	push	{r7, lr}
 800c516:	b08a      	sub	sp, #40	@ 0x28
 800c518:	af00      	add	r7, sp, #0
 800c51a:	60f8      	str	r0, [r7, #12]
 800c51c:	60b9      	str	r1, [r7, #8]
 800c51e:	607a      	str	r2, [r7, #4]
 800c520:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800c522:	2300      	movs	r3, #0
 800c524:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800c526:	68fb      	ldr	r3, [r7, #12]
 800c528:	2b00      	cmp	r3, #0
 800c52a:	d10b      	bne.n	800c544 <xTimerGenericCommand+0x30>
	__asm volatile
 800c52c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c530:	f383 8811 	msr	BASEPRI, r3
 800c534:	f3bf 8f6f 	isb	sy
 800c538:	f3bf 8f4f 	dsb	sy
 800c53c:	623b      	str	r3, [r7, #32]
}
 800c53e:	bf00      	nop
 800c540:	bf00      	nop
 800c542:	e7fd      	b.n	800c540 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800c544:	4b19      	ldr	r3, [pc, #100]	@ (800c5ac <xTimerGenericCommand+0x98>)
 800c546:	681b      	ldr	r3, [r3, #0]
 800c548:	2b00      	cmp	r3, #0
 800c54a:	d02a      	beq.n	800c5a2 <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800c54c:	68bb      	ldr	r3, [r7, #8]
 800c54e:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800c550:	687b      	ldr	r3, [r7, #4]
 800c552:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800c554:	68fb      	ldr	r3, [r7, #12]
 800c556:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800c558:	68bb      	ldr	r3, [r7, #8]
 800c55a:	2b05      	cmp	r3, #5
 800c55c:	dc18      	bgt.n	800c590 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800c55e:	f7ff fead 	bl	800c2bc <xTaskGetSchedulerState>
 800c562:	4603      	mov	r3, r0
 800c564:	2b02      	cmp	r3, #2
 800c566:	d109      	bne.n	800c57c <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800c568:	4b10      	ldr	r3, [pc, #64]	@ (800c5ac <xTimerGenericCommand+0x98>)
 800c56a:	6818      	ldr	r0, [r3, #0]
 800c56c:	f107 0110 	add.w	r1, r7, #16
 800c570:	2300      	movs	r3, #0
 800c572:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800c574:	f7fe fc32 	bl	800addc <xQueueGenericSend>
 800c578:	6278      	str	r0, [r7, #36]	@ 0x24
 800c57a:	e012      	b.n	800c5a2 <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800c57c:	4b0b      	ldr	r3, [pc, #44]	@ (800c5ac <xTimerGenericCommand+0x98>)
 800c57e:	6818      	ldr	r0, [r3, #0]
 800c580:	f107 0110 	add.w	r1, r7, #16
 800c584:	2300      	movs	r3, #0
 800c586:	2200      	movs	r2, #0
 800c588:	f7fe fc28 	bl	800addc <xQueueGenericSend>
 800c58c:	6278      	str	r0, [r7, #36]	@ 0x24
 800c58e:	e008      	b.n	800c5a2 <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800c590:	4b06      	ldr	r3, [pc, #24]	@ (800c5ac <xTimerGenericCommand+0x98>)
 800c592:	6818      	ldr	r0, [r3, #0]
 800c594:	f107 0110 	add.w	r1, r7, #16
 800c598:	2300      	movs	r3, #0
 800c59a:	683a      	ldr	r2, [r7, #0]
 800c59c:	f7fe fd20 	bl	800afe0 <xQueueGenericSendFromISR>
 800c5a0:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800c5a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800c5a4:	4618      	mov	r0, r3
 800c5a6:	3728      	adds	r7, #40	@ 0x28
 800c5a8:	46bd      	mov	sp, r7
 800c5aa:	bd80      	pop	{r7, pc}
 800c5ac:	20006824 	.word	0x20006824

0800c5b0 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800c5b0:	b580      	push	{r7, lr}
 800c5b2:	b088      	sub	sp, #32
 800c5b4:	af02      	add	r7, sp, #8
 800c5b6:	6078      	str	r0, [r7, #4]
 800c5b8:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c5ba:	4b23      	ldr	r3, [pc, #140]	@ (800c648 <prvProcessExpiredTimer+0x98>)
 800c5bc:	681b      	ldr	r3, [r3, #0]
 800c5be:	68db      	ldr	r3, [r3, #12]
 800c5c0:	68db      	ldr	r3, [r3, #12]
 800c5c2:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800c5c4:	697b      	ldr	r3, [r7, #20]
 800c5c6:	3304      	adds	r3, #4
 800c5c8:	4618      	mov	r0, r3
 800c5ca:	f7fe fad3 	bl	800ab74 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800c5ce:	697b      	ldr	r3, [r7, #20]
 800c5d0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800c5d4:	f003 0304 	and.w	r3, r3, #4
 800c5d8:	2b00      	cmp	r3, #0
 800c5da:	d023      	beq.n	800c624 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800c5dc:	697b      	ldr	r3, [r7, #20]
 800c5de:	699a      	ldr	r2, [r3, #24]
 800c5e0:	687b      	ldr	r3, [r7, #4]
 800c5e2:	18d1      	adds	r1, r2, r3
 800c5e4:	687b      	ldr	r3, [r7, #4]
 800c5e6:	683a      	ldr	r2, [r7, #0]
 800c5e8:	6978      	ldr	r0, [r7, #20]
 800c5ea:	f000 f8d5 	bl	800c798 <prvInsertTimerInActiveList>
 800c5ee:	4603      	mov	r3, r0
 800c5f0:	2b00      	cmp	r3, #0
 800c5f2:	d020      	beq.n	800c636 <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800c5f4:	2300      	movs	r3, #0
 800c5f6:	9300      	str	r3, [sp, #0]
 800c5f8:	2300      	movs	r3, #0
 800c5fa:	687a      	ldr	r2, [r7, #4]
 800c5fc:	2100      	movs	r1, #0
 800c5fe:	6978      	ldr	r0, [r7, #20]
 800c600:	f7ff ff88 	bl	800c514 <xTimerGenericCommand>
 800c604:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800c606:	693b      	ldr	r3, [r7, #16]
 800c608:	2b00      	cmp	r3, #0
 800c60a:	d114      	bne.n	800c636 <prvProcessExpiredTimer+0x86>
	__asm volatile
 800c60c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c610:	f383 8811 	msr	BASEPRI, r3
 800c614:	f3bf 8f6f 	isb	sy
 800c618:	f3bf 8f4f 	dsb	sy
 800c61c:	60fb      	str	r3, [r7, #12]
}
 800c61e:	bf00      	nop
 800c620:	bf00      	nop
 800c622:	e7fd      	b.n	800c620 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800c624:	697b      	ldr	r3, [r7, #20]
 800c626:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800c62a:	f023 0301 	bic.w	r3, r3, #1
 800c62e:	b2da      	uxtb	r2, r3
 800c630:	697b      	ldr	r3, [r7, #20]
 800c632:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800c636:	697b      	ldr	r3, [r7, #20]
 800c638:	6a1b      	ldr	r3, [r3, #32]
 800c63a:	6978      	ldr	r0, [r7, #20]
 800c63c:	4798      	blx	r3
}
 800c63e:	bf00      	nop
 800c640:	3718      	adds	r7, #24
 800c642:	46bd      	mov	sp, r7
 800c644:	bd80      	pop	{r7, pc}
 800c646:	bf00      	nop
 800c648:	2000681c 	.word	0x2000681c

0800c64c <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800c64c:	b580      	push	{r7, lr}
 800c64e:	b084      	sub	sp, #16
 800c650:	af00      	add	r7, sp, #0
 800c652:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800c654:	f107 0308 	add.w	r3, r7, #8
 800c658:	4618      	mov	r0, r3
 800c65a:	f000 f859 	bl	800c710 <prvGetNextExpireTime>
 800c65e:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800c660:	68bb      	ldr	r3, [r7, #8]
 800c662:	4619      	mov	r1, r3
 800c664:	68f8      	ldr	r0, [r7, #12]
 800c666:	f000 f805 	bl	800c674 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800c66a:	f000 f8d7 	bl	800c81c <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800c66e:	bf00      	nop
 800c670:	e7f0      	b.n	800c654 <prvTimerTask+0x8>
	...

0800c674 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800c674:	b580      	push	{r7, lr}
 800c676:	b084      	sub	sp, #16
 800c678:	af00      	add	r7, sp, #0
 800c67a:	6078      	str	r0, [r7, #4]
 800c67c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800c67e:	f7ff fa01 	bl	800ba84 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800c682:	f107 0308 	add.w	r3, r7, #8
 800c686:	4618      	mov	r0, r3
 800c688:	f000 f866 	bl	800c758 <prvSampleTimeNow>
 800c68c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800c68e:	68bb      	ldr	r3, [r7, #8]
 800c690:	2b00      	cmp	r3, #0
 800c692:	d130      	bne.n	800c6f6 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800c694:	683b      	ldr	r3, [r7, #0]
 800c696:	2b00      	cmp	r3, #0
 800c698:	d10a      	bne.n	800c6b0 <prvProcessTimerOrBlockTask+0x3c>
 800c69a:	687a      	ldr	r2, [r7, #4]
 800c69c:	68fb      	ldr	r3, [r7, #12]
 800c69e:	429a      	cmp	r2, r3
 800c6a0:	d806      	bhi.n	800c6b0 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800c6a2:	f7ff f9fd 	bl	800baa0 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800c6a6:	68f9      	ldr	r1, [r7, #12]
 800c6a8:	6878      	ldr	r0, [r7, #4]
 800c6aa:	f7ff ff81 	bl	800c5b0 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800c6ae:	e024      	b.n	800c6fa <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800c6b0:	683b      	ldr	r3, [r7, #0]
 800c6b2:	2b00      	cmp	r3, #0
 800c6b4:	d008      	beq.n	800c6c8 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800c6b6:	4b13      	ldr	r3, [pc, #76]	@ (800c704 <prvProcessTimerOrBlockTask+0x90>)
 800c6b8:	681b      	ldr	r3, [r3, #0]
 800c6ba:	681b      	ldr	r3, [r3, #0]
 800c6bc:	2b00      	cmp	r3, #0
 800c6be:	d101      	bne.n	800c6c4 <prvProcessTimerOrBlockTask+0x50>
 800c6c0:	2301      	movs	r3, #1
 800c6c2:	e000      	b.n	800c6c6 <prvProcessTimerOrBlockTask+0x52>
 800c6c4:	2300      	movs	r3, #0
 800c6c6:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800c6c8:	4b0f      	ldr	r3, [pc, #60]	@ (800c708 <prvProcessTimerOrBlockTask+0x94>)
 800c6ca:	6818      	ldr	r0, [r3, #0]
 800c6cc:	687a      	ldr	r2, [r7, #4]
 800c6ce:	68fb      	ldr	r3, [r7, #12]
 800c6d0:	1ad3      	subs	r3, r2, r3
 800c6d2:	683a      	ldr	r2, [r7, #0]
 800c6d4:	4619      	mov	r1, r3
 800c6d6:	f7fe ff3d 	bl	800b554 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800c6da:	f7ff f9e1 	bl	800baa0 <xTaskResumeAll>
 800c6de:	4603      	mov	r3, r0
 800c6e0:	2b00      	cmp	r3, #0
 800c6e2:	d10a      	bne.n	800c6fa <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800c6e4:	4b09      	ldr	r3, [pc, #36]	@ (800c70c <prvProcessTimerOrBlockTask+0x98>)
 800c6e6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c6ea:	601a      	str	r2, [r3, #0]
 800c6ec:	f3bf 8f4f 	dsb	sy
 800c6f0:	f3bf 8f6f 	isb	sy
}
 800c6f4:	e001      	b.n	800c6fa <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800c6f6:	f7ff f9d3 	bl	800baa0 <xTaskResumeAll>
}
 800c6fa:	bf00      	nop
 800c6fc:	3710      	adds	r7, #16
 800c6fe:	46bd      	mov	sp, r7
 800c700:	bd80      	pop	{r7, pc}
 800c702:	bf00      	nop
 800c704:	20006820 	.word	0x20006820
 800c708:	20006824 	.word	0x20006824
 800c70c:	e000ed04 	.word	0xe000ed04

0800c710 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800c710:	b480      	push	{r7}
 800c712:	b085      	sub	sp, #20
 800c714:	af00      	add	r7, sp, #0
 800c716:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800c718:	4b0e      	ldr	r3, [pc, #56]	@ (800c754 <prvGetNextExpireTime+0x44>)
 800c71a:	681b      	ldr	r3, [r3, #0]
 800c71c:	681b      	ldr	r3, [r3, #0]
 800c71e:	2b00      	cmp	r3, #0
 800c720:	d101      	bne.n	800c726 <prvGetNextExpireTime+0x16>
 800c722:	2201      	movs	r2, #1
 800c724:	e000      	b.n	800c728 <prvGetNextExpireTime+0x18>
 800c726:	2200      	movs	r2, #0
 800c728:	687b      	ldr	r3, [r7, #4]
 800c72a:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800c72c:	687b      	ldr	r3, [r7, #4]
 800c72e:	681b      	ldr	r3, [r3, #0]
 800c730:	2b00      	cmp	r3, #0
 800c732:	d105      	bne.n	800c740 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800c734:	4b07      	ldr	r3, [pc, #28]	@ (800c754 <prvGetNextExpireTime+0x44>)
 800c736:	681b      	ldr	r3, [r3, #0]
 800c738:	68db      	ldr	r3, [r3, #12]
 800c73a:	681b      	ldr	r3, [r3, #0]
 800c73c:	60fb      	str	r3, [r7, #12]
 800c73e:	e001      	b.n	800c744 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800c740:	2300      	movs	r3, #0
 800c742:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800c744:	68fb      	ldr	r3, [r7, #12]
}
 800c746:	4618      	mov	r0, r3
 800c748:	3714      	adds	r7, #20
 800c74a:	46bd      	mov	sp, r7
 800c74c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c750:	4770      	bx	lr
 800c752:	bf00      	nop
 800c754:	2000681c 	.word	0x2000681c

0800c758 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800c758:	b580      	push	{r7, lr}
 800c75a:	b084      	sub	sp, #16
 800c75c:	af00      	add	r7, sp, #0
 800c75e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800c760:	f7ff fa3c 	bl	800bbdc <xTaskGetTickCount>
 800c764:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800c766:	4b0b      	ldr	r3, [pc, #44]	@ (800c794 <prvSampleTimeNow+0x3c>)
 800c768:	681b      	ldr	r3, [r3, #0]
 800c76a:	68fa      	ldr	r2, [r7, #12]
 800c76c:	429a      	cmp	r2, r3
 800c76e:	d205      	bcs.n	800c77c <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800c770:	f000 f93a 	bl	800c9e8 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800c774:	687b      	ldr	r3, [r7, #4]
 800c776:	2201      	movs	r2, #1
 800c778:	601a      	str	r2, [r3, #0]
 800c77a:	e002      	b.n	800c782 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800c77c:	687b      	ldr	r3, [r7, #4]
 800c77e:	2200      	movs	r2, #0
 800c780:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800c782:	4a04      	ldr	r2, [pc, #16]	@ (800c794 <prvSampleTimeNow+0x3c>)
 800c784:	68fb      	ldr	r3, [r7, #12]
 800c786:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800c788:	68fb      	ldr	r3, [r7, #12]
}
 800c78a:	4618      	mov	r0, r3
 800c78c:	3710      	adds	r7, #16
 800c78e:	46bd      	mov	sp, r7
 800c790:	bd80      	pop	{r7, pc}
 800c792:	bf00      	nop
 800c794:	2000682c 	.word	0x2000682c

0800c798 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800c798:	b580      	push	{r7, lr}
 800c79a:	b086      	sub	sp, #24
 800c79c:	af00      	add	r7, sp, #0
 800c79e:	60f8      	str	r0, [r7, #12]
 800c7a0:	60b9      	str	r1, [r7, #8]
 800c7a2:	607a      	str	r2, [r7, #4]
 800c7a4:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800c7a6:	2300      	movs	r3, #0
 800c7a8:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800c7aa:	68fb      	ldr	r3, [r7, #12]
 800c7ac:	68ba      	ldr	r2, [r7, #8]
 800c7ae:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800c7b0:	68fb      	ldr	r3, [r7, #12]
 800c7b2:	68fa      	ldr	r2, [r7, #12]
 800c7b4:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800c7b6:	68ba      	ldr	r2, [r7, #8]
 800c7b8:	687b      	ldr	r3, [r7, #4]
 800c7ba:	429a      	cmp	r2, r3
 800c7bc:	d812      	bhi.n	800c7e4 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c7be:	687a      	ldr	r2, [r7, #4]
 800c7c0:	683b      	ldr	r3, [r7, #0]
 800c7c2:	1ad2      	subs	r2, r2, r3
 800c7c4:	68fb      	ldr	r3, [r7, #12]
 800c7c6:	699b      	ldr	r3, [r3, #24]
 800c7c8:	429a      	cmp	r2, r3
 800c7ca:	d302      	bcc.n	800c7d2 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800c7cc:	2301      	movs	r3, #1
 800c7ce:	617b      	str	r3, [r7, #20]
 800c7d0:	e01b      	b.n	800c80a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800c7d2:	4b10      	ldr	r3, [pc, #64]	@ (800c814 <prvInsertTimerInActiveList+0x7c>)
 800c7d4:	681a      	ldr	r2, [r3, #0]
 800c7d6:	68fb      	ldr	r3, [r7, #12]
 800c7d8:	3304      	adds	r3, #4
 800c7da:	4619      	mov	r1, r3
 800c7dc:	4610      	mov	r0, r2
 800c7de:	f7fe f990 	bl	800ab02 <vListInsert>
 800c7e2:	e012      	b.n	800c80a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800c7e4:	687a      	ldr	r2, [r7, #4]
 800c7e6:	683b      	ldr	r3, [r7, #0]
 800c7e8:	429a      	cmp	r2, r3
 800c7ea:	d206      	bcs.n	800c7fa <prvInsertTimerInActiveList+0x62>
 800c7ec:	68ba      	ldr	r2, [r7, #8]
 800c7ee:	683b      	ldr	r3, [r7, #0]
 800c7f0:	429a      	cmp	r2, r3
 800c7f2:	d302      	bcc.n	800c7fa <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800c7f4:	2301      	movs	r3, #1
 800c7f6:	617b      	str	r3, [r7, #20]
 800c7f8:	e007      	b.n	800c80a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800c7fa:	4b07      	ldr	r3, [pc, #28]	@ (800c818 <prvInsertTimerInActiveList+0x80>)
 800c7fc:	681a      	ldr	r2, [r3, #0]
 800c7fe:	68fb      	ldr	r3, [r7, #12]
 800c800:	3304      	adds	r3, #4
 800c802:	4619      	mov	r1, r3
 800c804:	4610      	mov	r0, r2
 800c806:	f7fe f97c 	bl	800ab02 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800c80a:	697b      	ldr	r3, [r7, #20]
}
 800c80c:	4618      	mov	r0, r3
 800c80e:	3718      	adds	r7, #24
 800c810:	46bd      	mov	sp, r7
 800c812:	bd80      	pop	{r7, pc}
 800c814:	20006820 	.word	0x20006820
 800c818:	2000681c 	.word	0x2000681c

0800c81c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800c81c:	b580      	push	{r7, lr}
 800c81e:	b08e      	sub	sp, #56	@ 0x38
 800c820:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800c822:	e0ce      	b.n	800c9c2 <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800c824:	687b      	ldr	r3, [r7, #4]
 800c826:	2b00      	cmp	r3, #0
 800c828:	da19      	bge.n	800c85e <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800c82a:	1d3b      	adds	r3, r7, #4
 800c82c:	3304      	adds	r3, #4
 800c82e:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800c830:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c832:	2b00      	cmp	r3, #0
 800c834:	d10b      	bne.n	800c84e <prvProcessReceivedCommands+0x32>
	__asm volatile
 800c836:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c83a:	f383 8811 	msr	BASEPRI, r3
 800c83e:	f3bf 8f6f 	isb	sy
 800c842:	f3bf 8f4f 	dsb	sy
 800c846:	61fb      	str	r3, [r7, #28]
}
 800c848:	bf00      	nop
 800c84a:	bf00      	nop
 800c84c:	e7fd      	b.n	800c84a <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800c84e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c850:	681b      	ldr	r3, [r3, #0]
 800c852:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800c854:	6850      	ldr	r0, [r2, #4]
 800c856:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800c858:	6892      	ldr	r2, [r2, #8]
 800c85a:	4611      	mov	r1, r2
 800c85c:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800c85e:	687b      	ldr	r3, [r7, #4]
 800c860:	2b00      	cmp	r3, #0
 800c862:	f2c0 80ae 	blt.w	800c9c2 <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800c866:	68fb      	ldr	r3, [r7, #12]
 800c868:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800c86a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c86c:	695b      	ldr	r3, [r3, #20]
 800c86e:	2b00      	cmp	r3, #0
 800c870:	d004      	beq.n	800c87c <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800c872:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c874:	3304      	adds	r3, #4
 800c876:	4618      	mov	r0, r3
 800c878:	f7fe f97c 	bl	800ab74 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800c87c:	463b      	mov	r3, r7
 800c87e:	4618      	mov	r0, r3
 800c880:	f7ff ff6a 	bl	800c758 <prvSampleTimeNow>
 800c884:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 800c886:	687b      	ldr	r3, [r7, #4]
 800c888:	2b09      	cmp	r3, #9
 800c88a:	f200 8097 	bhi.w	800c9bc <prvProcessReceivedCommands+0x1a0>
 800c88e:	a201      	add	r2, pc, #4	@ (adr r2, 800c894 <prvProcessReceivedCommands+0x78>)
 800c890:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c894:	0800c8bd 	.word	0x0800c8bd
 800c898:	0800c8bd 	.word	0x0800c8bd
 800c89c:	0800c8bd 	.word	0x0800c8bd
 800c8a0:	0800c933 	.word	0x0800c933
 800c8a4:	0800c947 	.word	0x0800c947
 800c8a8:	0800c993 	.word	0x0800c993
 800c8ac:	0800c8bd 	.word	0x0800c8bd
 800c8b0:	0800c8bd 	.word	0x0800c8bd
 800c8b4:	0800c933 	.word	0x0800c933
 800c8b8:	0800c947 	.word	0x0800c947
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800c8bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c8be:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800c8c2:	f043 0301 	orr.w	r3, r3, #1
 800c8c6:	b2da      	uxtb	r2, r3
 800c8c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c8ca:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800c8ce:	68ba      	ldr	r2, [r7, #8]
 800c8d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c8d2:	699b      	ldr	r3, [r3, #24]
 800c8d4:	18d1      	adds	r1, r2, r3
 800c8d6:	68bb      	ldr	r3, [r7, #8]
 800c8d8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c8da:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800c8dc:	f7ff ff5c 	bl	800c798 <prvInsertTimerInActiveList>
 800c8e0:	4603      	mov	r3, r0
 800c8e2:	2b00      	cmp	r3, #0
 800c8e4:	d06c      	beq.n	800c9c0 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800c8e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c8e8:	6a1b      	ldr	r3, [r3, #32]
 800c8ea:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800c8ec:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800c8ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c8f0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800c8f4:	f003 0304 	and.w	r3, r3, #4
 800c8f8:	2b00      	cmp	r3, #0
 800c8fa:	d061      	beq.n	800c9c0 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800c8fc:	68ba      	ldr	r2, [r7, #8]
 800c8fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c900:	699b      	ldr	r3, [r3, #24]
 800c902:	441a      	add	r2, r3
 800c904:	2300      	movs	r3, #0
 800c906:	9300      	str	r3, [sp, #0]
 800c908:	2300      	movs	r3, #0
 800c90a:	2100      	movs	r1, #0
 800c90c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800c90e:	f7ff fe01 	bl	800c514 <xTimerGenericCommand>
 800c912:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800c914:	6a3b      	ldr	r3, [r7, #32]
 800c916:	2b00      	cmp	r3, #0
 800c918:	d152      	bne.n	800c9c0 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 800c91a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c91e:	f383 8811 	msr	BASEPRI, r3
 800c922:	f3bf 8f6f 	isb	sy
 800c926:	f3bf 8f4f 	dsb	sy
 800c92a:	61bb      	str	r3, [r7, #24]
}
 800c92c:	bf00      	nop
 800c92e:	bf00      	nop
 800c930:	e7fd      	b.n	800c92e <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800c932:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c934:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800c938:	f023 0301 	bic.w	r3, r3, #1
 800c93c:	b2da      	uxtb	r2, r3
 800c93e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c940:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800c944:	e03d      	b.n	800c9c2 <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800c946:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c948:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800c94c:	f043 0301 	orr.w	r3, r3, #1
 800c950:	b2da      	uxtb	r2, r3
 800c952:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c954:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800c958:	68ba      	ldr	r2, [r7, #8]
 800c95a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c95c:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800c95e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c960:	699b      	ldr	r3, [r3, #24]
 800c962:	2b00      	cmp	r3, #0
 800c964:	d10b      	bne.n	800c97e <prvProcessReceivedCommands+0x162>
	__asm volatile
 800c966:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c96a:	f383 8811 	msr	BASEPRI, r3
 800c96e:	f3bf 8f6f 	isb	sy
 800c972:	f3bf 8f4f 	dsb	sy
 800c976:	617b      	str	r3, [r7, #20]
}
 800c978:	bf00      	nop
 800c97a:	bf00      	nop
 800c97c:	e7fd      	b.n	800c97a <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800c97e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c980:	699a      	ldr	r2, [r3, #24]
 800c982:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c984:	18d1      	adds	r1, r2, r3
 800c986:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c988:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c98a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800c98c:	f7ff ff04 	bl	800c798 <prvInsertTimerInActiveList>
					break;
 800c990:	e017      	b.n	800c9c2 <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800c992:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c994:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800c998:	f003 0302 	and.w	r3, r3, #2
 800c99c:	2b00      	cmp	r3, #0
 800c99e:	d103      	bne.n	800c9a8 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 800c9a0:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800c9a2:	f000 fbe9 	bl	800d178 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800c9a6:	e00c      	b.n	800c9c2 <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800c9a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c9aa:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800c9ae:	f023 0301 	bic.w	r3, r3, #1
 800c9b2:	b2da      	uxtb	r2, r3
 800c9b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c9b6:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800c9ba:	e002      	b.n	800c9c2 <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 800c9bc:	bf00      	nop
 800c9be:	e000      	b.n	800c9c2 <prvProcessReceivedCommands+0x1a6>
					break;
 800c9c0:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800c9c2:	4b08      	ldr	r3, [pc, #32]	@ (800c9e4 <prvProcessReceivedCommands+0x1c8>)
 800c9c4:	681b      	ldr	r3, [r3, #0]
 800c9c6:	1d39      	adds	r1, r7, #4
 800c9c8:	2200      	movs	r2, #0
 800c9ca:	4618      	mov	r0, r3
 800c9cc:	f7fe fba6 	bl	800b11c <xQueueReceive>
 800c9d0:	4603      	mov	r3, r0
 800c9d2:	2b00      	cmp	r3, #0
 800c9d4:	f47f af26 	bne.w	800c824 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800c9d8:	bf00      	nop
 800c9da:	bf00      	nop
 800c9dc:	3730      	adds	r7, #48	@ 0x30
 800c9de:	46bd      	mov	sp, r7
 800c9e0:	bd80      	pop	{r7, pc}
 800c9e2:	bf00      	nop
 800c9e4:	20006824 	.word	0x20006824

0800c9e8 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800c9e8:	b580      	push	{r7, lr}
 800c9ea:	b088      	sub	sp, #32
 800c9ec:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800c9ee:	e049      	b.n	800ca84 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800c9f0:	4b2e      	ldr	r3, [pc, #184]	@ (800caac <prvSwitchTimerLists+0xc4>)
 800c9f2:	681b      	ldr	r3, [r3, #0]
 800c9f4:	68db      	ldr	r3, [r3, #12]
 800c9f6:	681b      	ldr	r3, [r3, #0]
 800c9f8:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c9fa:	4b2c      	ldr	r3, [pc, #176]	@ (800caac <prvSwitchTimerLists+0xc4>)
 800c9fc:	681b      	ldr	r3, [r3, #0]
 800c9fe:	68db      	ldr	r3, [r3, #12]
 800ca00:	68db      	ldr	r3, [r3, #12]
 800ca02:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800ca04:	68fb      	ldr	r3, [r7, #12]
 800ca06:	3304      	adds	r3, #4
 800ca08:	4618      	mov	r0, r3
 800ca0a:	f7fe f8b3 	bl	800ab74 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800ca0e:	68fb      	ldr	r3, [r7, #12]
 800ca10:	6a1b      	ldr	r3, [r3, #32]
 800ca12:	68f8      	ldr	r0, [r7, #12]
 800ca14:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800ca16:	68fb      	ldr	r3, [r7, #12]
 800ca18:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800ca1c:	f003 0304 	and.w	r3, r3, #4
 800ca20:	2b00      	cmp	r3, #0
 800ca22:	d02f      	beq.n	800ca84 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800ca24:	68fb      	ldr	r3, [r7, #12]
 800ca26:	699b      	ldr	r3, [r3, #24]
 800ca28:	693a      	ldr	r2, [r7, #16]
 800ca2a:	4413      	add	r3, r2
 800ca2c:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800ca2e:	68ba      	ldr	r2, [r7, #8]
 800ca30:	693b      	ldr	r3, [r7, #16]
 800ca32:	429a      	cmp	r2, r3
 800ca34:	d90e      	bls.n	800ca54 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800ca36:	68fb      	ldr	r3, [r7, #12]
 800ca38:	68ba      	ldr	r2, [r7, #8]
 800ca3a:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800ca3c:	68fb      	ldr	r3, [r7, #12]
 800ca3e:	68fa      	ldr	r2, [r7, #12]
 800ca40:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800ca42:	4b1a      	ldr	r3, [pc, #104]	@ (800caac <prvSwitchTimerLists+0xc4>)
 800ca44:	681a      	ldr	r2, [r3, #0]
 800ca46:	68fb      	ldr	r3, [r7, #12]
 800ca48:	3304      	adds	r3, #4
 800ca4a:	4619      	mov	r1, r3
 800ca4c:	4610      	mov	r0, r2
 800ca4e:	f7fe f858 	bl	800ab02 <vListInsert>
 800ca52:	e017      	b.n	800ca84 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800ca54:	2300      	movs	r3, #0
 800ca56:	9300      	str	r3, [sp, #0]
 800ca58:	2300      	movs	r3, #0
 800ca5a:	693a      	ldr	r2, [r7, #16]
 800ca5c:	2100      	movs	r1, #0
 800ca5e:	68f8      	ldr	r0, [r7, #12]
 800ca60:	f7ff fd58 	bl	800c514 <xTimerGenericCommand>
 800ca64:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800ca66:	687b      	ldr	r3, [r7, #4]
 800ca68:	2b00      	cmp	r3, #0
 800ca6a:	d10b      	bne.n	800ca84 <prvSwitchTimerLists+0x9c>
	__asm volatile
 800ca6c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ca70:	f383 8811 	msr	BASEPRI, r3
 800ca74:	f3bf 8f6f 	isb	sy
 800ca78:	f3bf 8f4f 	dsb	sy
 800ca7c:	603b      	str	r3, [r7, #0]
}
 800ca7e:	bf00      	nop
 800ca80:	bf00      	nop
 800ca82:	e7fd      	b.n	800ca80 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800ca84:	4b09      	ldr	r3, [pc, #36]	@ (800caac <prvSwitchTimerLists+0xc4>)
 800ca86:	681b      	ldr	r3, [r3, #0]
 800ca88:	681b      	ldr	r3, [r3, #0]
 800ca8a:	2b00      	cmp	r3, #0
 800ca8c:	d1b0      	bne.n	800c9f0 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800ca8e:	4b07      	ldr	r3, [pc, #28]	@ (800caac <prvSwitchTimerLists+0xc4>)
 800ca90:	681b      	ldr	r3, [r3, #0]
 800ca92:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800ca94:	4b06      	ldr	r3, [pc, #24]	@ (800cab0 <prvSwitchTimerLists+0xc8>)
 800ca96:	681b      	ldr	r3, [r3, #0]
 800ca98:	4a04      	ldr	r2, [pc, #16]	@ (800caac <prvSwitchTimerLists+0xc4>)
 800ca9a:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800ca9c:	4a04      	ldr	r2, [pc, #16]	@ (800cab0 <prvSwitchTimerLists+0xc8>)
 800ca9e:	697b      	ldr	r3, [r7, #20]
 800caa0:	6013      	str	r3, [r2, #0]
}
 800caa2:	bf00      	nop
 800caa4:	3718      	adds	r7, #24
 800caa6:	46bd      	mov	sp, r7
 800caa8:	bd80      	pop	{r7, pc}
 800caaa:	bf00      	nop
 800caac:	2000681c 	.word	0x2000681c
 800cab0:	20006820 	.word	0x20006820

0800cab4 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800cab4:	b580      	push	{r7, lr}
 800cab6:	b082      	sub	sp, #8
 800cab8:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800caba:	f000 f96d 	bl	800cd98 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800cabe:	4b15      	ldr	r3, [pc, #84]	@ (800cb14 <prvCheckForValidListAndQueue+0x60>)
 800cac0:	681b      	ldr	r3, [r3, #0]
 800cac2:	2b00      	cmp	r3, #0
 800cac4:	d120      	bne.n	800cb08 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800cac6:	4814      	ldr	r0, [pc, #80]	@ (800cb18 <prvCheckForValidListAndQueue+0x64>)
 800cac8:	f7fd ffca 	bl	800aa60 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800cacc:	4813      	ldr	r0, [pc, #76]	@ (800cb1c <prvCheckForValidListAndQueue+0x68>)
 800cace:	f7fd ffc7 	bl	800aa60 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800cad2:	4b13      	ldr	r3, [pc, #76]	@ (800cb20 <prvCheckForValidListAndQueue+0x6c>)
 800cad4:	4a10      	ldr	r2, [pc, #64]	@ (800cb18 <prvCheckForValidListAndQueue+0x64>)
 800cad6:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800cad8:	4b12      	ldr	r3, [pc, #72]	@ (800cb24 <prvCheckForValidListAndQueue+0x70>)
 800cada:	4a10      	ldr	r2, [pc, #64]	@ (800cb1c <prvCheckForValidListAndQueue+0x68>)
 800cadc:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800cade:	2300      	movs	r3, #0
 800cae0:	9300      	str	r3, [sp, #0]
 800cae2:	4b11      	ldr	r3, [pc, #68]	@ (800cb28 <prvCheckForValidListAndQueue+0x74>)
 800cae4:	4a11      	ldr	r2, [pc, #68]	@ (800cb2c <prvCheckForValidListAndQueue+0x78>)
 800cae6:	2110      	movs	r1, #16
 800cae8:	200a      	movs	r0, #10
 800caea:	f7fe f8d7 	bl	800ac9c <xQueueGenericCreateStatic>
 800caee:	4603      	mov	r3, r0
 800caf0:	4a08      	ldr	r2, [pc, #32]	@ (800cb14 <prvCheckForValidListAndQueue+0x60>)
 800caf2:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800caf4:	4b07      	ldr	r3, [pc, #28]	@ (800cb14 <prvCheckForValidListAndQueue+0x60>)
 800caf6:	681b      	ldr	r3, [r3, #0]
 800caf8:	2b00      	cmp	r3, #0
 800cafa:	d005      	beq.n	800cb08 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800cafc:	4b05      	ldr	r3, [pc, #20]	@ (800cb14 <prvCheckForValidListAndQueue+0x60>)
 800cafe:	681b      	ldr	r3, [r3, #0]
 800cb00:	490b      	ldr	r1, [pc, #44]	@ (800cb30 <prvCheckForValidListAndQueue+0x7c>)
 800cb02:	4618      	mov	r0, r3
 800cb04:	f7fe fcfc 	bl	800b500 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800cb08:	f000 f978 	bl	800cdfc <vPortExitCritical>
}
 800cb0c:	bf00      	nop
 800cb0e:	46bd      	mov	sp, r7
 800cb10:	bd80      	pop	{r7, pc}
 800cb12:	bf00      	nop
 800cb14:	20006824 	.word	0x20006824
 800cb18:	200067f4 	.word	0x200067f4
 800cb1c:	20006808 	.word	0x20006808
 800cb20:	2000681c 	.word	0x2000681c
 800cb24:	20006820 	.word	0x20006820
 800cb28:	200068d0 	.word	0x200068d0
 800cb2c:	20006830 	.word	0x20006830
 800cb30:	0801ad1c 	.word	0x0801ad1c

0800cb34 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800cb34:	b480      	push	{r7}
 800cb36:	b085      	sub	sp, #20
 800cb38:	af00      	add	r7, sp, #0
 800cb3a:	60f8      	str	r0, [r7, #12]
 800cb3c:	60b9      	str	r1, [r7, #8]
 800cb3e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800cb40:	68fb      	ldr	r3, [r7, #12]
 800cb42:	3b04      	subs	r3, #4
 800cb44:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800cb46:	68fb      	ldr	r3, [r7, #12]
 800cb48:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800cb4c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800cb4e:	68fb      	ldr	r3, [r7, #12]
 800cb50:	3b04      	subs	r3, #4
 800cb52:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800cb54:	68bb      	ldr	r3, [r7, #8]
 800cb56:	f023 0201 	bic.w	r2, r3, #1
 800cb5a:	68fb      	ldr	r3, [r7, #12]
 800cb5c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800cb5e:	68fb      	ldr	r3, [r7, #12]
 800cb60:	3b04      	subs	r3, #4
 800cb62:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800cb64:	4a0c      	ldr	r2, [pc, #48]	@ (800cb98 <pxPortInitialiseStack+0x64>)
 800cb66:	68fb      	ldr	r3, [r7, #12]
 800cb68:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800cb6a:	68fb      	ldr	r3, [r7, #12]
 800cb6c:	3b14      	subs	r3, #20
 800cb6e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800cb70:	687a      	ldr	r2, [r7, #4]
 800cb72:	68fb      	ldr	r3, [r7, #12]
 800cb74:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800cb76:	68fb      	ldr	r3, [r7, #12]
 800cb78:	3b04      	subs	r3, #4
 800cb7a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800cb7c:	68fb      	ldr	r3, [r7, #12]
 800cb7e:	f06f 0202 	mvn.w	r2, #2
 800cb82:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800cb84:	68fb      	ldr	r3, [r7, #12]
 800cb86:	3b20      	subs	r3, #32
 800cb88:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800cb8a:	68fb      	ldr	r3, [r7, #12]
}
 800cb8c:	4618      	mov	r0, r3
 800cb8e:	3714      	adds	r7, #20
 800cb90:	46bd      	mov	sp, r7
 800cb92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb96:	4770      	bx	lr
 800cb98:	0800cb9d 	.word	0x0800cb9d

0800cb9c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800cb9c:	b480      	push	{r7}
 800cb9e:	b085      	sub	sp, #20
 800cba0:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800cba2:	2300      	movs	r3, #0
 800cba4:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800cba6:	4b13      	ldr	r3, [pc, #76]	@ (800cbf4 <prvTaskExitError+0x58>)
 800cba8:	681b      	ldr	r3, [r3, #0]
 800cbaa:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800cbae:	d00b      	beq.n	800cbc8 <prvTaskExitError+0x2c>
	__asm volatile
 800cbb0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cbb4:	f383 8811 	msr	BASEPRI, r3
 800cbb8:	f3bf 8f6f 	isb	sy
 800cbbc:	f3bf 8f4f 	dsb	sy
 800cbc0:	60fb      	str	r3, [r7, #12]
}
 800cbc2:	bf00      	nop
 800cbc4:	bf00      	nop
 800cbc6:	e7fd      	b.n	800cbc4 <prvTaskExitError+0x28>
	__asm volatile
 800cbc8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cbcc:	f383 8811 	msr	BASEPRI, r3
 800cbd0:	f3bf 8f6f 	isb	sy
 800cbd4:	f3bf 8f4f 	dsb	sy
 800cbd8:	60bb      	str	r3, [r7, #8]
}
 800cbda:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800cbdc:	bf00      	nop
 800cbde:	687b      	ldr	r3, [r7, #4]
 800cbe0:	2b00      	cmp	r3, #0
 800cbe2:	d0fc      	beq.n	800cbde <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800cbe4:	bf00      	nop
 800cbe6:	bf00      	nop
 800cbe8:	3714      	adds	r7, #20
 800cbea:	46bd      	mov	sp, r7
 800cbec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbf0:	4770      	bx	lr
 800cbf2:	bf00      	nop
 800cbf4:	2000004c 	.word	0x2000004c
	...

0800cc00 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800cc00:	4b07      	ldr	r3, [pc, #28]	@ (800cc20 <pxCurrentTCBConst2>)
 800cc02:	6819      	ldr	r1, [r3, #0]
 800cc04:	6808      	ldr	r0, [r1, #0]
 800cc06:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cc0a:	f380 8809 	msr	PSP, r0
 800cc0e:	f3bf 8f6f 	isb	sy
 800cc12:	f04f 0000 	mov.w	r0, #0
 800cc16:	f380 8811 	msr	BASEPRI, r0
 800cc1a:	4770      	bx	lr
 800cc1c:	f3af 8000 	nop.w

0800cc20 <pxCurrentTCBConst2>:
 800cc20:	200062f4 	.word	0x200062f4
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800cc24:	bf00      	nop
 800cc26:	bf00      	nop

0800cc28 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800cc28:	4808      	ldr	r0, [pc, #32]	@ (800cc4c <prvPortStartFirstTask+0x24>)
 800cc2a:	6800      	ldr	r0, [r0, #0]
 800cc2c:	6800      	ldr	r0, [r0, #0]
 800cc2e:	f380 8808 	msr	MSP, r0
 800cc32:	f04f 0000 	mov.w	r0, #0
 800cc36:	f380 8814 	msr	CONTROL, r0
 800cc3a:	b662      	cpsie	i
 800cc3c:	b661      	cpsie	f
 800cc3e:	f3bf 8f4f 	dsb	sy
 800cc42:	f3bf 8f6f 	isb	sy
 800cc46:	df00      	svc	0
 800cc48:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800cc4a:	bf00      	nop
 800cc4c:	e000ed08 	.word	0xe000ed08

0800cc50 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800cc50:	b580      	push	{r7, lr}
 800cc52:	b086      	sub	sp, #24
 800cc54:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800cc56:	4b47      	ldr	r3, [pc, #284]	@ (800cd74 <xPortStartScheduler+0x124>)
 800cc58:	681b      	ldr	r3, [r3, #0]
 800cc5a:	4a47      	ldr	r2, [pc, #284]	@ (800cd78 <xPortStartScheduler+0x128>)
 800cc5c:	4293      	cmp	r3, r2
 800cc5e:	d10b      	bne.n	800cc78 <xPortStartScheduler+0x28>
	__asm volatile
 800cc60:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cc64:	f383 8811 	msr	BASEPRI, r3
 800cc68:	f3bf 8f6f 	isb	sy
 800cc6c:	f3bf 8f4f 	dsb	sy
 800cc70:	613b      	str	r3, [r7, #16]
}
 800cc72:	bf00      	nop
 800cc74:	bf00      	nop
 800cc76:	e7fd      	b.n	800cc74 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800cc78:	4b3e      	ldr	r3, [pc, #248]	@ (800cd74 <xPortStartScheduler+0x124>)
 800cc7a:	681b      	ldr	r3, [r3, #0]
 800cc7c:	4a3f      	ldr	r2, [pc, #252]	@ (800cd7c <xPortStartScheduler+0x12c>)
 800cc7e:	4293      	cmp	r3, r2
 800cc80:	d10b      	bne.n	800cc9a <xPortStartScheduler+0x4a>
	__asm volatile
 800cc82:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cc86:	f383 8811 	msr	BASEPRI, r3
 800cc8a:	f3bf 8f6f 	isb	sy
 800cc8e:	f3bf 8f4f 	dsb	sy
 800cc92:	60fb      	str	r3, [r7, #12]
}
 800cc94:	bf00      	nop
 800cc96:	bf00      	nop
 800cc98:	e7fd      	b.n	800cc96 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800cc9a:	4b39      	ldr	r3, [pc, #228]	@ (800cd80 <xPortStartScheduler+0x130>)
 800cc9c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800cc9e:	697b      	ldr	r3, [r7, #20]
 800cca0:	781b      	ldrb	r3, [r3, #0]
 800cca2:	b2db      	uxtb	r3, r3
 800cca4:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800cca6:	697b      	ldr	r3, [r7, #20]
 800cca8:	22ff      	movs	r2, #255	@ 0xff
 800ccaa:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800ccac:	697b      	ldr	r3, [r7, #20]
 800ccae:	781b      	ldrb	r3, [r3, #0]
 800ccb0:	b2db      	uxtb	r3, r3
 800ccb2:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800ccb4:	78fb      	ldrb	r3, [r7, #3]
 800ccb6:	b2db      	uxtb	r3, r3
 800ccb8:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800ccbc:	b2da      	uxtb	r2, r3
 800ccbe:	4b31      	ldr	r3, [pc, #196]	@ (800cd84 <xPortStartScheduler+0x134>)
 800ccc0:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800ccc2:	4b31      	ldr	r3, [pc, #196]	@ (800cd88 <xPortStartScheduler+0x138>)
 800ccc4:	2207      	movs	r2, #7
 800ccc6:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800ccc8:	e009      	b.n	800ccde <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800ccca:	4b2f      	ldr	r3, [pc, #188]	@ (800cd88 <xPortStartScheduler+0x138>)
 800cccc:	681b      	ldr	r3, [r3, #0]
 800ccce:	3b01      	subs	r3, #1
 800ccd0:	4a2d      	ldr	r2, [pc, #180]	@ (800cd88 <xPortStartScheduler+0x138>)
 800ccd2:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800ccd4:	78fb      	ldrb	r3, [r7, #3]
 800ccd6:	b2db      	uxtb	r3, r3
 800ccd8:	005b      	lsls	r3, r3, #1
 800ccda:	b2db      	uxtb	r3, r3
 800ccdc:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800ccde:	78fb      	ldrb	r3, [r7, #3]
 800cce0:	b2db      	uxtb	r3, r3
 800cce2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800cce6:	2b80      	cmp	r3, #128	@ 0x80
 800cce8:	d0ef      	beq.n	800ccca <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800ccea:	4b27      	ldr	r3, [pc, #156]	@ (800cd88 <xPortStartScheduler+0x138>)
 800ccec:	681b      	ldr	r3, [r3, #0]
 800ccee:	f1c3 0307 	rsb	r3, r3, #7
 800ccf2:	2b04      	cmp	r3, #4
 800ccf4:	d00b      	beq.n	800cd0e <xPortStartScheduler+0xbe>
	__asm volatile
 800ccf6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ccfa:	f383 8811 	msr	BASEPRI, r3
 800ccfe:	f3bf 8f6f 	isb	sy
 800cd02:	f3bf 8f4f 	dsb	sy
 800cd06:	60bb      	str	r3, [r7, #8]
}
 800cd08:	bf00      	nop
 800cd0a:	bf00      	nop
 800cd0c:	e7fd      	b.n	800cd0a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800cd0e:	4b1e      	ldr	r3, [pc, #120]	@ (800cd88 <xPortStartScheduler+0x138>)
 800cd10:	681b      	ldr	r3, [r3, #0]
 800cd12:	021b      	lsls	r3, r3, #8
 800cd14:	4a1c      	ldr	r2, [pc, #112]	@ (800cd88 <xPortStartScheduler+0x138>)
 800cd16:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800cd18:	4b1b      	ldr	r3, [pc, #108]	@ (800cd88 <xPortStartScheduler+0x138>)
 800cd1a:	681b      	ldr	r3, [r3, #0]
 800cd1c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800cd20:	4a19      	ldr	r2, [pc, #100]	@ (800cd88 <xPortStartScheduler+0x138>)
 800cd22:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800cd24:	687b      	ldr	r3, [r7, #4]
 800cd26:	b2da      	uxtb	r2, r3
 800cd28:	697b      	ldr	r3, [r7, #20]
 800cd2a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800cd2c:	4b17      	ldr	r3, [pc, #92]	@ (800cd8c <xPortStartScheduler+0x13c>)
 800cd2e:	681b      	ldr	r3, [r3, #0]
 800cd30:	4a16      	ldr	r2, [pc, #88]	@ (800cd8c <xPortStartScheduler+0x13c>)
 800cd32:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800cd36:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800cd38:	4b14      	ldr	r3, [pc, #80]	@ (800cd8c <xPortStartScheduler+0x13c>)
 800cd3a:	681b      	ldr	r3, [r3, #0]
 800cd3c:	4a13      	ldr	r2, [pc, #76]	@ (800cd8c <xPortStartScheduler+0x13c>)
 800cd3e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 800cd42:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800cd44:	f000 f8da 	bl	800cefc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800cd48:	4b11      	ldr	r3, [pc, #68]	@ (800cd90 <xPortStartScheduler+0x140>)
 800cd4a:	2200      	movs	r2, #0
 800cd4c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800cd4e:	f000 f8f9 	bl	800cf44 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800cd52:	4b10      	ldr	r3, [pc, #64]	@ (800cd94 <xPortStartScheduler+0x144>)
 800cd54:	681b      	ldr	r3, [r3, #0]
 800cd56:	4a0f      	ldr	r2, [pc, #60]	@ (800cd94 <xPortStartScheduler+0x144>)
 800cd58:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800cd5c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800cd5e:	f7ff ff63 	bl	800cc28 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800cd62:	f7ff f805 	bl	800bd70 <vTaskSwitchContext>
	prvTaskExitError();
 800cd66:	f7ff ff19 	bl	800cb9c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800cd6a:	2300      	movs	r3, #0
}
 800cd6c:	4618      	mov	r0, r3
 800cd6e:	3718      	adds	r7, #24
 800cd70:	46bd      	mov	sp, r7
 800cd72:	bd80      	pop	{r7, pc}
 800cd74:	e000ed00 	.word	0xe000ed00
 800cd78:	410fc271 	.word	0x410fc271
 800cd7c:	410fc270 	.word	0x410fc270
 800cd80:	e000e400 	.word	0xe000e400
 800cd84:	20006920 	.word	0x20006920
 800cd88:	20006924 	.word	0x20006924
 800cd8c:	e000ed20 	.word	0xe000ed20
 800cd90:	2000004c 	.word	0x2000004c
 800cd94:	e000ef34 	.word	0xe000ef34

0800cd98 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800cd98:	b480      	push	{r7}
 800cd9a:	b083      	sub	sp, #12
 800cd9c:	af00      	add	r7, sp, #0
	__asm volatile
 800cd9e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cda2:	f383 8811 	msr	BASEPRI, r3
 800cda6:	f3bf 8f6f 	isb	sy
 800cdaa:	f3bf 8f4f 	dsb	sy
 800cdae:	607b      	str	r3, [r7, #4]
}
 800cdb0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800cdb2:	4b10      	ldr	r3, [pc, #64]	@ (800cdf4 <vPortEnterCritical+0x5c>)
 800cdb4:	681b      	ldr	r3, [r3, #0]
 800cdb6:	3301      	adds	r3, #1
 800cdb8:	4a0e      	ldr	r2, [pc, #56]	@ (800cdf4 <vPortEnterCritical+0x5c>)
 800cdba:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800cdbc:	4b0d      	ldr	r3, [pc, #52]	@ (800cdf4 <vPortEnterCritical+0x5c>)
 800cdbe:	681b      	ldr	r3, [r3, #0]
 800cdc0:	2b01      	cmp	r3, #1
 800cdc2:	d110      	bne.n	800cde6 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800cdc4:	4b0c      	ldr	r3, [pc, #48]	@ (800cdf8 <vPortEnterCritical+0x60>)
 800cdc6:	681b      	ldr	r3, [r3, #0]
 800cdc8:	b2db      	uxtb	r3, r3
 800cdca:	2b00      	cmp	r3, #0
 800cdcc:	d00b      	beq.n	800cde6 <vPortEnterCritical+0x4e>
	__asm volatile
 800cdce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cdd2:	f383 8811 	msr	BASEPRI, r3
 800cdd6:	f3bf 8f6f 	isb	sy
 800cdda:	f3bf 8f4f 	dsb	sy
 800cdde:	603b      	str	r3, [r7, #0]
}
 800cde0:	bf00      	nop
 800cde2:	bf00      	nop
 800cde4:	e7fd      	b.n	800cde2 <vPortEnterCritical+0x4a>
	}
}
 800cde6:	bf00      	nop
 800cde8:	370c      	adds	r7, #12
 800cdea:	46bd      	mov	sp, r7
 800cdec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdf0:	4770      	bx	lr
 800cdf2:	bf00      	nop
 800cdf4:	2000004c 	.word	0x2000004c
 800cdf8:	e000ed04 	.word	0xe000ed04

0800cdfc <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800cdfc:	b480      	push	{r7}
 800cdfe:	b083      	sub	sp, #12
 800ce00:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800ce02:	4b12      	ldr	r3, [pc, #72]	@ (800ce4c <vPortExitCritical+0x50>)
 800ce04:	681b      	ldr	r3, [r3, #0]
 800ce06:	2b00      	cmp	r3, #0
 800ce08:	d10b      	bne.n	800ce22 <vPortExitCritical+0x26>
	__asm volatile
 800ce0a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ce0e:	f383 8811 	msr	BASEPRI, r3
 800ce12:	f3bf 8f6f 	isb	sy
 800ce16:	f3bf 8f4f 	dsb	sy
 800ce1a:	607b      	str	r3, [r7, #4]
}
 800ce1c:	bf00      	nop
 800ce1e:	bf00      	nop
 800ce20:	e7fd      	b.n	800ce1e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800ce22:	4b0a      	ldr	r3, [pc, #40]	@ (800ce4c <vPortExitCritical+0x50>)
 800ce24:	681b      	ldr	r3, [r3, #0]
 800ce26:	3b01      	subs	r3, #1
 800ce28:	4a08      	ldr	r2, [pc, #32]	@ (800ce4c <vPortExitCritical+0x50>)
 800ce2a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800ce2c:	4b07      	ldr	r3, [pc, #28]	@ (800ce4c <vPortExitCritical+0x50>)
 800ce2e:	681b      	ldr	r3, [r3, #0]
 800ce30:	2b00      	cmp	r3, #0
 800ce32:	d105      	bne.n	800ce40 <vPortExitCritical+0x44>
 800ce34:	2300      	movs	r3, #0
 800ce36:	603b      	str	r3, [r7, #0]
	__asm volatile
 800ce38:	683b      	ldr	r3, [r7, #0]
 800ce3a:	f383 8811 	msr	BASEPRI, r3
}
 800ce3e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800ce40:	bf00      	nop
 800ce42:	370c      	adds	r7, #12
 800ce44:	46bd      	mov	sp, r7
 800ce46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce4a:	4770      	bx	lr
 800ce4c:	2000004c 	.word	0x2000004c

0800ce50 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800ce50:	f3ef 8009 	mrs	r0, PSP
 800ce54:	f3bf 8f6f 	isb	sy
 800ce58:	4b15      	ldr	r3, [pc, #84]	@ (800ceb0 <pxCurrentTCBConst>)
 800ce5a:	681a      	ldr	r2, [r3, #0]
 800ce5c:	f01e 0f10 	tst.w	lr, #16
 800ce60:	bf08      	it	eq
 800ce62:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800ce66:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ce6a:	6010      	str	r0, [r2, #0]
 800ce6c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800ce70:	f04f 0050 	mov.w	r0, #80	@ 0x50
 800ce74:	f380 8811 	msr	BASEPRI, r0
 800ce78:	f3bf 8f4f 	dsb	sy
 800ce7c:	f3bf 8f6f 	isb	sy
 800ce80:	f7fe ff76 	bl	800bd70 <vTaskSwitchContext>
 800ce84:	f04f 0000 	mov.w	r0, #0
 800ce88:	f380 8811 	msr	BASEPRI, r0
 800ce8c:	bc09      	pop	{r0, r3}
 800ce8e:	6819      	ldr	r1, [r3, #0]
 800ce90:	6808      	ldr	r0, [r1, #0]
 800ce92:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ce96:	f01e 0f10 	tst.w	lr, #16
 800ce9a:	bf08      	it	eq
 800ce9c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800cea0:	f380 8809 	msr	PSP, r0
 800cea4:	f3bf 8f6f 	isb	sy
 800cea8:	4770      	bx	lr
 800ceaa:	bf00      	nop
 800ceac:	f3af 8000 	nop.w

0800ceb0 <pxCurrentTCBConst>:
 800ceb0:	200062f4 	.word	0x200062f4
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800ceb4:	bf00      	nop
 800ceb6:	bf00      	nop

0800ceb8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800ceb8:	b580      	push	{r7, lr}
 800ceba:	b082      	sub	sp, #8
 800cebc:	af00      	add	r7, sp, #0
	__asm volatile
 800cebe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cec2:	f383 8811 	msr	BASEPRI, r3
 800cec6:	f3bf 8f6f 	isb	sy
 800ceca:	f3bf 8f4f 	dsb	sy
 800cece:	607b      	str	r3, [r7, #4]
}
 800ced0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800ced2:	f7fe fe93 	bl	800bbfc <xTaskIncrementTick>
 800ced6:	4603      	mov	r3, r0
 800ced8:	2b00      	cmp	r3, #0
 800ceda:	d003      	beq.n	800cee4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800cedc:	4b06      	ldr	r3, [pc, #24]	@ (800cef8 <xPortSysTickHandler+0x40>)
 800cede:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800cee2:	601a      	str	r2, [r3, #0]
 800cee4:	2300      	movs	r3, #0
 800cee6:	603b      	str	r3, [r7, #0]
	__asm volatile
 800cee8:	683b      	ldr	r3, [r7, #0]
 800ceea:	f383 8811 	msr	BASEPRI, r3
}
 800ceee:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800cef0:	bf00      	nop
 800cef2:	3708      	adds	r7, #8
 800cef4:	46bd      	mov	sp, r7
 800cef6:	bd80      	pop	{r7, pc}
 800cef8:	e000ed04 	.word	0xe000ed04

0800cefc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800cefc:	b480      	push	{r7}
 800cefe:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800cf00:	4b0b      	ldr	r3, [pc, #44]	@ (800cf30 <vPortSetupTimerInterrupt+0x34>)
 800cf02:	2200      	movs	r2, #0
 800cf04:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800cf06:	4b0b      	ldr	r3, [pc, #44]	@ (800cf34 <vPortSetupTimerInterrupt+0x38>)
 800cf08:	2200      	movs	r2, #0
 800cf0a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800cf0c:	4b0a      	ldr	r3, [pc, #40]	@ (800cf38 <vPortSetupTimerInterrupt+0x3c>)
 800cf0e:	681b      	ldr	r3, [r3, #0]
 800cf10:	4a0a      	ldr	r2, [pc, #40]	@ (800cf3c <vPortSetupTimerInterrupt+0x40>)
 800cf12:	fba2 2303 	umull	r2, r3, r2, r3
 800cf16:	099b      	lsrs	r3, r3, #6
 800cf18:	4a09      	ldr	r2, [pc, #36]	@ (800cf40 <vPortSetupTimerInterrupt+0x44>)
 800cf1a:	3b01      	subs	r3, #1
 800cf1c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800cf1e:	4b04      	ldr	r3, [pc, #16]	@ (800cf30 <vPortSetupTimerInterrupt+0x34>)
 800cf20:	2207      	movs	r2, #7
 800cf22:	601a      	str	r2, [r3, #0]
}
 800cf24:	bf00      	nop
 800cf26:	46bd      	mov	sp, r7
 800cf28:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf2c:	4770      	bx	lr
 800cf2e:	bf00      	nop
 800cf30:	e000e010 	.word	0xe000e010
 800cf34:	e000e018 	.word	0xe000e018
 800cf38:	20000040 	.word	0x20000040
 800cf3c:	10624dd3 	.word	0x10624dd3
 800cf40:	e000e014 	.word	0xe000e014

0800cf44 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800cf44:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 800cf54 <vPortEnableVFP+0x10>
 800cf48:	6801      	ldr	r1, [r0, #0]
 800cf4a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800cf4e:	6001      	str	r1, [r0, #0]
 800cf50:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800cf52:	bf00      	nop
 800cf54:	e000ed88 	.word	0xe000ed88

0800cf58 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800cf58:	b480      	push	{r7}
 800cf5a:	b085      	sub	sp, #20
 800cf5c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800cf5e:	f3ef 8305 	mrs	r3, IPSR
 800cf62:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800cf64:	68fb      	ldr	r3, [r7, #12]
 800cf66:	2b0f      	cmp	r3, #15
 800cf68:	d915      	bls.n	800cf96 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800cf6a:	4a18      	ldr	r2, [pc, #96]	@ (800cfcc <vPortValidateInterruptPriority+0x74>)
 800cf6c:	68fb      	ldr	r3, [r7, #12]
 800cf6e:	4413      	add	r3, r2
 800cf70:	781b      	ldrb	r3, [r3, #0]
 800cf72:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800cf74:	4b16      	ldr	r3, [pc, #88]	@ (800cfd0 <vPortValidateInterruptPriority+0x78>)
 800cf76:	781b      	ldrb	r3, [r3, #0]
 800cf78:	7afa      	ldrb	r2, [r7, #11]
 800cf7a:	429a      	cmp	r2, r3
 800cf7c:	d20b      	bcs.n	800cf96 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800cf7e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cf82:	f383 8811 	msr	BASEPRI, r3
 800cf86:	f3bf 8f6f 	isb	sy
 800cf8a:	f3bf 8f4f 	dsb	sy
 800cf8e:	607b      	str	r3, [r7, #4]
}
 800cf90:	bf00      	nop
 800cf92:	bf00      	nop
 800cf94:	e7fd      	b.n	800cf92 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800cf96:	4b0f      	ldr	r3, [pc, #60]	@ (800cfd4 <vPortValidateInterruptPriority+0x7c>)
 800cf98:	681b      	ldr	r3, [r3, #0]
 800cf9a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800cf9e:	4b0e      	ldr	r3, [pc, #56]	@ (800cfd8 <vPortValidateInterruptPriority+0x80>)
 800cfa0:	681b      	ldr	r3, [r3, #0]
 800cfa2:	429a      	cmp	r2, r3
 800cfa4:	d90b      	bls.n	800cfbe <vPortValidateInterruptPriority+0x66>
	__asm volatile
 800cfa6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cfaa:	f383 8811 	msr	BASEPRI, r3
 800cfae:	f3bf 8f6f 	isb	sy
 800cfb2:	f3bf 8f4f 	dsb	sy
 800cfb6:	603b      	str	r3, [r7, #0]
}
 800cfb8:	bf00      	nop
 800cfba:	bf00      	nop
 800cfbc:	e7fd      	b.n	800cfba <vPortValidateInterruptPriority+0x62>
	}
 800cfbe:	bf00      	nop
 800cfc0:	3714      	adds	r7, #20
 800cfc2:	46bd      	mov	sp, r7
 800cfc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfc8:	4770      	bx	lr
 800cfca:	bf00      	nop
 800cfcc:	e000e3f0 	.word	0xe000e3f0
 800cfd0:	20006920 	.word	0x20006920
 800cfd4:	e000ed0c 	.word	0xe000ed0c
 800cfd8:	20006924 	.word	0x20006924

0800cfdc <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800cfdc:	b580      	push	{r7, lr}
 800cfde:	b08a      	sub	sp, #40	@ 0x28
 800cfe0:	af00      	add	r7, sp, #0
 800cfe2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800cfe4:	2300      	movs	r3, #0
 800cfe6:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800cfe8:	f7fe fd4c 	bl	800ba84 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800cfec:	4b5c      	ldr	r3, [pc, #368]	@ (800d160 <pvPortMalloc+0x184>)
 800cfee:	681b      	ldr	r3, [r3, #0]
 800cff0:	2b00      	cmp	r3, #0
 800cff2:	d101      	bne.n	800cff8 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800cff4:	f000 f924 	bl	800d240 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800cff8:	4b5a      	ldr	r3, [pc, #360]	@ (800d164 <pvPortMalloc+0x188>)
 800cffa:	681a      	ldr	r2, [r3, #0]
 800cffc:	687b      	ldr	r3, [r7, #4]
 800cffe:	4013      	ands	r3, r2
 800d000:	2b00      	cmp	r3, #0
 800d002:	f040 8095 	bne.w	800d130 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800d006:	687b      	ldr	r3, [r7, #4]
 800d008:	2b00      	cmp	r3, #0
 800d00a:	d01e      	beq.n	800d04a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800d00c:	2208      	movs	r2, #8
 800d00e:	687b      	ldr	r3, [r7, #4]
 800d010:	4413      	add	r3, r2
 800d012:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800d014:	687b      	ldr	r3, [r7, #4]
 800d016:	f003 0307 	and.w	r3, r3, #7
 800d01a:	2b00      	cmp	r3, #0
 800d01c:	d015      	beq.n	800d04a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800d01e:	687b      	ldr	r3, [r7, #4]
 800d020:	f023 0307 	bic.w	r3, r3, #7
 800d024:	3308      	adds	r3, #8
 800d026:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800d028:	687b      	ldr	r3, [r7, #4]
 800d02a:	f003 0307 	and.w	r3, r3, #7
 800d02e:	2b00      	cmp	r3, #0
 800d030:	d00b      	beq.n	800d04a <pvPortMalloc+0x6e>
	__asm volatile
 800d032:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d036:	f383 8811 	msr	BASEPRI, r3
 800d03a:	f3bf 8f6f 	isb	sy
 800d03e:	f3bf 8f4f 	dsb	sy
 800d042:	617b      	str	r3, [r7, #20]
}
 800d044:	bf00      	nop
 800d046:	bf00      	nop
 800d048:	e7fd      	b.n	800d046 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800d04a:	687b      	ldr	r3, [r7, #4]
 800d04c:	2b00      	cmp	r3, #0
 800d04e:	d06f      	beq.n	800d130 <pvPortMalloc+0x154>
 800d050:	4b45      	ldr	r3, [pc, #276]	@ (800d168 <pvPortMalloc+0x18c>)
 800d052:	681b      	ldr	r3, [r3, #0]
 800d054:	687a      	ldr	r2, [r7, #4]
 800d056:	429a      	cmp	r2, r3
 800d058:	d86a      	bhi.n	800d130 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800d05a:	4b44      	ldr	r3, [pc, #272]	@ (800d16c <pvPortMalloc+0x190>)
 800d05c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800d05e:	4b43      	ldr	r3, [pc, #268]	@ (800d16c <pvPortMalloc+0x190>)
 800d060:	681b      	ldr	r3, [r3, #0]
 800d062:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800d064:	e004      	b.n	800d070 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 800d066:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d068:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800d06a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d06c:	681b      	ldr	r3, [r3, #0]
 800d06e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800d070:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d072:	685b      	ldr	r3, [r3, #4]
 800d074:	687a      	ldr	r2, [r7, #4]
 800d076:	429a      	cmp	r2, r3
 800d078:	d903      	bls.n	800d082 <pvPortMalloc+0xa6>
 800d07a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d07c:	681b      	ldr	r3, [r3, #0]
 800d07e:	2b00      	cmp	r3, #0
 800d080:	d1f1      	bne.n	800d066 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800d082:	4b37      	ldr	r3, [pc, #220]	@ (800d160 <pvPortMalloc+0x184>)
 800d084:	681b      	ldr	r3, [r3, #0]
 800d086:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800d088:	429a      	cmp	r2, r3
 800d08a:	d051      	beq.n	800d130 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800d08c:	6a3b      	ldr	r3, [r7, #32]
 800d08e:	681b      	ldr	r3, [r3, #0]
 800d090:	2208      	movs	r2, #8
 800d092:	4413      	add	r3, r2
 800d094:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800d096:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d098:	681a      	ldr	r2, [r3, #0]
 800d09a:	6a3b      	ldr	r3, [r7, #32]
 800d09c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800d09e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d0a0:	685a      	ldr	r2, [r3, #4]
 800d0a2:	687b      	ldr	r3, [r7, #4]
 800d0a4:	1ad2      	subs	r2, r2, r3
 800d0a6:	2308      	movs	r3, #8
 800d0a8:	005b      	lsls	r3, r3, #1
 800d0aa:	429a      	cmp	r2, r3
 800d0ac:	d920      	bls.n	800d0f0 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800d0ae:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800d0b0:	687b      	ldr	r3, [r7, #4]
 800d0b2:	4413      	add	r3, r2
 800d0b4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800d0b6:	69bb      	ldr	r3, [r7, #24]
 800d0b8:	f003 0307 	and.w	r3, r3, #7
 800d0bc:	2b00      	cmp	r3, #0
 800d0be:	d00b      	beq.n	800d0d8 <pvPortMalloc+0xfc>
	__asm volatile
 800d0c0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d0c4:	f383 8811 	msr	BASEPRI, r3
 800d0c8:	f3bf 8f6f 	isb	sy
 800d0cc:	f3bf 8f4f 	dsb	sy
 800d0d0:	613b      	str	r3, [r7, #16]
}
 800d0d2:	bf00      	nop
 800d0d4:	bf00      	nop
 800d0d6:	e7fd      	b.n	800d0d4 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800d0d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d0da:	685a      	ldr	r2, [r3, #4]
 800d0dc:	687b      	ldr	r3, [r7, #4]
 800d0de:	1ad2      	subs	r2, r2, r3
 800d0e0:	69bb      	ldr	r3, [r7, #24]
 800d0e2:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800d0e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d0e6:	687a      	ldr	r2, [r7, #4]
 800d0e8:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800d0ea:	69b8      	ldr	r0, [r7, #24]
 800d0ec:	f000 f90a 	bl	800d304 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800d0f0:	4b1d      	ldr	r3, [pc, #116]	@ (800d168 <pvPortMalloc+0x18c>)
 800d0f2:	681a      	ldr	r2, [r3, #0]
 800d0f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d0f6:	685b      	ldr	r3, [r3, #4]
 800d0f8:	1ad3      	subs	r3, r2, r3
 800d0fa:	4a1b      	ldr	r2, [pc, #108]	@ (800d168 <pvPortMalloc+0x18c>)
 800d0fc:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800d0fe:	4b1a      	ldr	r3, [pc, #104]	@ (800d168 <pvPortMalloc+0x18c>)
 800d100:	681a      	ldr	r2, [r3, #0]
 800d102:	4b1b      	ldr	r3, [pc, #108]	@ (800d170 <pvPortMalloc+0x194>)
 800d104:	681b      	ldr	r3, [r3, #0]
 800d106:	429a      	cmp	r2, r3
 800d108:	d203      	bcs.n	800d112 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800d10a:	4b17      	ldr	r3, [pc, #92]	@ (800d168 <pvPortMalloc+0x18c>)
 800d10c:	681b      	ldr	r3, [r3, #0]
 800d10e:	4a18      	ldr	r2, [pc, #96]	@ (800d170 <pvPortMalloc+0x194>)
 800d110:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800d112:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d114:	685a      	ldr	r2, [r3, #4]
 800d116:	4b13      	ldr	r3, [pc, #76]	@ (800d164 <pvPortMalloc+0x188>)
 800d118:	681b      	ldr	r3, [r3, #0]
 800d11a:	431a      	orrs	r2, r3
 800d11c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d11e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800d120:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d122:	2200      	movs	r2, #0
 800d124:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800d126:	4b13      	ldr	r3, [pc, #76]	@ (800d174 <pvPortMalloc+0x198>)
 800d128:	681b      	ldr	r3, [r3, #0]
 800d12a:	3301      	adds	r3, #1
 800d12c:	4a11      	ldr	r2, [pc, #68]	@ (800d174 <pvPortMalloc+0x198>)
 800d12e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800d130:	f7fe fcb6 	bl	800baa0 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800d134:	69fb      	ldr	r3, [r7, #28]
 800d136:	f003 0307 	and.w	r3, r3, #7
 800d13a:	2b00      	cmp	r3, #0
 800d13c:	d00b      	beq.n	800d156 <pvPortMalloc+0x17a>
	__asm volatile
 800d13e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d142:	f383 8811 	msr	BASEPRI, r3
 800d146:	f3bf 8f6f 	isb	sy
 800d14a:	f3bf 8f4f 	dsb	sy
 800d14e:	60fb      	str	r3, [r7, #12]
}
 800d150:	bf00      	nop
 800d152:	bf00      	nop
 800d154:	e7fd      	b.n	800d152 <pvPortMalloc+0x176>
	return pvReturn;
 800d156:	69fb      	ldr	r3, [r7, #28]
}
 800d158:	4618      	mov	r0, r3
 800d15a:	3728      	adds	r7, #40	@ 0x28
 800d15c:	46bd      	mov	sp, r7
 800d15e:	bd80      	pop	{r7, pc}
 800d160:	200074e8 	.word	0x200074e8
 800d164:	200074fc 	.word	0x200074fc
 800d168:	200074ec 	.word	0x200074ec
 800d16c:	200074e0 	.word	0x200074e0
 800d170:	200074f0 	.word	0x200074f0
 800d174:	200074f4 	.word	0x200074f4

0800d178 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800d178:	b580      	push	{r7, lr}
 800d17a:	b086      	sub	sp, #24
 800d17c:	af00      	add	r7, sp, #0
 800d17e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800d180:	687b      	ldr	r3, [r7, #4]
 800d182:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800d184:	687b      	ldr	r3, [r7, #4]
 800d186:	2b00      	cmp	r3, #0
 800d188:	d04f      	beq.n	800d22a <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800d18a:	2308      	movs	r3, #8
 800d18c:	425b      	negs	r3, r3
 800d18e:	697a      	ldr	r2, [r7, #20]
 800d190:	4413      	add	r3, r2
 800d192:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800d194:	697b      	ldr	r3, [r7, #20]
 800d196:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800d198:	693b      	ldr	r3, [r7, #16]
 800d19a:	685a      	ldr	r2, [r3, #4]
 800d19c:	4b25      	ldr	r3, [pc, #148]	@ (800d234 <vPortFree+0xbc>)
 800d19e:	681b      	ldr	r3, [r3, #0]
 800d1a0:	4013      	ands	r3, r2
 800d1a2:	2b00      	cmp	r3, #0
 800d1a4:	d10b      	bne.n	800d1be <vPortFree+0x46>
	__asm volatile
 800d1a6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d1aa:	f383 8811 	msr	BASEPRI, r3
 800d1ae:	f3bf 8f6f 	isb	sy
 800d1b2:	f3bf 8f4f 	dsb	sy
 800d1b6:	60fb      	str	r3, [r7, #12]
}
 800d1b8:	bf00      	nop
 800d1ba:	bf00      	nop
 800d1bc:	e7fd      	b.n	800d1ba <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800d1be:	693b      	ldr	r3, [r7, #16]
 800d1c0:	681b      	ldr	r3, [r3, #0]
 800d1c2:	2b00      	cmp	r3, #0
 800d1c4:	d00b      	beq.n	800d1de <vPortFree+0x66>
	__asm volatile
 800d1c6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d1ca:	f383 8811 	msr	BASEPRI, r3
 800d1ce:	f3bf 8f6f 	isb	sy
 800d1d2:	f3bf 8f4f 	dsb	sy
 800d1d6:	60bb      	str	r3, [r7, #8]
}
 800d1d8:	bf00      	nop
 800d1da:	bf00      	nop
 800d1dc:	e7fd      	b.n	800d1da <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800d1de:	693b      	ldr	r3, [r7, #16]
 800d1e0:	685a      	ldr	r2, [r3, #4]
 800d1e2:	4b14      	ldr	r3, [pc, #80]	@ (800d234 <vPortFree+0xbc>)
 800d1e4:	681b      	ldr	r3, [r3, #0]
 800d1e6:	4013      	ands	r3, r2
 800d1e8:	2b00      	cmp	r3, #0
 800d1ea:	d01e      	beq.n	800d22a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800d1ec:	693b      	ldr	r3, [r7, #16]
 800d1ee:	681b      	ldr	r3, [r3, #0]
 800d1f0:	2b00      	cmp	r3, #0
 800d1f2:	d11a      	bne.n	800d22a <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800d1f4:	693b      	ldr	r3, [r7, #16]
 800d1f6:	685a      	ldr	r2, [r3, #4]
 800d1f8:	4b0e      	ldr	r3, [pc, #56]	@ (800d234 <vPortFree+0xbc>)
 800d1fa:	681b      	ldr	r3, [r3, #0]
 800d1fc:	43db      	mvns	r3, r3
 800d1fe:	401a      	ands	r2, r3
 800d200:	693b      	ldr	r3, [r7, #16]
 800d202:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800d204:	f7fe fc3e 	bl	800ba84 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800d208:	693b      	ldr	r3, [r7, #16]
 800d20a:	685a      	ldr	r2, [r3, #4]
 800d20c:	4b0a      	ldr	r3, [pc, #40]	@ (800d238 <vPortFree+0xc0>)
 800d20e:	681b      	ldr	r3, [r3, #0]
 800d210:	4413      	add	r3, r2
 800d212:	4a09      	ldr	r2, [pc, #36]	@ (800d238 <vPortFree+0xc0>)
 800d214:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800d216:	6938      	ldr	r0, [r7, #16]
 800d218:	f000 f874 	bl	800d304 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800d21c:	4b07      	ldr	r3, [pc, #28]	@ (800d23c <vPortFree+0xc4>)
 800d21e:	681b      	ldr	r3, [r3, #0]
 800d220:	3301      	adds	r3, #1
 800d222:	4a06      	ldr	r2, [pc, #24]	@ (800d23c <vPortFree+0xc4>)
 800d224:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800d226:	f7fe fc3b 	bl	800baa0 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800d22a:	bf00      	nop
 800d22c:	3718      	adds	r7, #24
 800d22e:	46bd      	mov	sp, r7
 800d230:	bd80      	pop	{r7, pc}
 800d232:	bf00      	nop
 800d234:	200074fc 	.word	0x200074fc
 800d238:	200074ec 	.word	0x200074ec
 800d23c:	200074f8 	.word	0x200074f8

0800d240 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800d240:	b480      	push	{r7}
 800d242:	b085      	sub	sp, #20
 800d244:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800d246:	f640 33b8 	movw	r3, #3000	@ 0xbb8
 800d24a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800d24c:	4b27      	ldr	r3, [pc, #156]	@ (800d2ec <prvHeapInit+0xac>)
 800d24e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800d250:	68fb      	ldr	r3, [r7, #12]
 800d252:	f003 0307 	and.w	r3, r3, #7
 800d256:	2b00      	cmp	r3, #0
 800d258:	d00c      	beq.n	800d274 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800d25a:	68fb      	ldr	r3, [r7, #12]
 800d25c:	3307      	adds	r3, #7
 800d25e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800d260:	68fb      	ldr	r3, [r7, #12]
 800d262:	f023 0307 	bic.w	r3, r3, #7
 800d266:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800d268:	68ba      	ldr	r2, [r7, #8]
 800d26a:	68fb      	ldr	r3, [r7, #12]
 800d26c:	1ad3      	subs	r3, r2, r3
 800d26e:	4a1f      	ldr	r2, [pc, #124]	@ (800d2ec <prvHeapInit+0xac>)
 800d270:	4413      	add	r3, r2
 800d272:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800d274:	68fb      	ldr	r3, [r7, #12]
 800d276:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800d278:	4a1d      	ldr	r2, [pc, #116]	@ (800d2f0 <prvHeapInit+0xb0>)
 800d27a:	687b      	ldr	r3, [r7, #4]
 800d27c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800d27e:	4b1c      	ldr	r3, [pc, #112]	@ (800d2f0 <prvHeapInit+0xb0>)
 800d280:	2200      	movs	r2, #0
 800d282:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800d284:	687b      	ldr	r3, [r7, #4]
 800d286:	68ba      	ldr	r2, [r7, #8]
 800d288:	4413      	add	r3, r2
 800d28a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800d28c:	2208      	movs	r2, #8
 800d28e:	68fb      	ldr	r3, [r7, #12]
 800d290:	1a9b      	subs	r3, r3, r2
 800d292:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800d294:	68fb      	ldr	r3, [r7, #12]
 800d296:	f023 0307 	bic.w	r3, r3, #7
 800d29a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800d29c:	68fb      	ldr	r3, [r7, #12]
 800d29e:	4a15      	ldr	r2, [pc, #84]	@ (800d2f4 <prvHeapInit+0xb4>)
 800d2a0:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800d2a2:	4b14      	ldr	r3, [pc, #80]	@ (800d2f4 <prvHeapInit+0xb4>)
 800d2a4:	681b      	ldr	r3, [r3, #0]
 800d2a6:	2200      	movs	r2, #0
 800d2a8:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800d2aa:	4b12      	ldr	r3, [pc, #72]	@ (800d2f4 <prvHeapInit+0xb4>)
 800d2ac:	681b      	ldr	r3, [r3, #0]
 800d2ae:	2200      	movs	r2, #0
 800d2b0:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800d2b2:	687b      	ldr	r3, [r7, #4]
 800d2b4:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800d2b6:	683b      	ldr	r3, [r7, #0]
 800d2b8:	68fa      	ldr	r2, [r7, #12]
 800d2ba:	1ad2      	subs	r2, r2, r3
 800d2bc:	683b      	ldr	r3, [r7, #0]
 800d2be:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800d2c0:	4b0c      	ldr	r3, [pc, #48]	@ (800d2f4 <prvHeapInit+0xb4>)
 800d2c2:	681a      	ldr	r2, [r3, #0]
 800d2c4:	683b      	ldr	r3, [r7, #0]
 800d2c6:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800d2c8:	683b      	ldr	r3, [r7, #0]
 800d2ca:	685b      	ldr	r3, [r3, #4]
 800d2cc:	4a0a      	ldr	r2, [pc, #40]	@ (800d2f8 <prvHeapInit+0xb8>)
 800d2ce:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800d2d0:	683b      	ldr	r3, [r7, #0]
 800d2d2:	685b      	ldr	r3, [r3, #4]
 800d2d4:	4a09      	ldr	r2, [pc, #36]	@ (800d2fc <prvHeapInit+0xbc>)
 800d2d6:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800d2d8:	4b09      	ldr	r3, [pc, #36]	@ (800d300 <prvHeapInit+0xc0>)
 800d2da:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800d2de:	601a      	str	r2, [r3, #0]
}
 800d2e0:	bf00      	nop
 800d2e2:	3714      	adds	r7, #20
 800d2e4:	46bd      	mov	sp, r7
 800d2e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2ea:	4770      	bx	lr
 800d2ec:	20006928 	.word	0x20006928
 800d2f0:	200074e0 	.word	0x200074e0
 800d2f4:	200074e8 	.word	0x200074e8
 800d2f8:	200074f0 	.word	0x200074f0
 800d2fc:	200074ec 	.word	0x200074ec
 800d300:	200074fc 	.word	0x200074fc

0800d304 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800d304:	b480      	push	{r7}
 800d306:	b085      	sub	sp, #20
 800d308:	af00      	add	r7, sp, #0
 800d30a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800d30c:	4b28      	ldr	r3, [pc, #160]	@ (800d3b0 <prvInsertBlockIntoFreeList+0xac>)
 800d30e:	60fb      	str	r3, [r7, #12]
 800d310:	e002      	b.n	800d318 <prvInsertBlockIntoFreeList+0x14>
 800d312:	68fb      	ldr	r3, [r7, #12]
 800d314:	681b      	ldr	r3, [r3, #0]
 800d316:	60fb      	str	r3, [r7, #12]
 800d318:	68fb      	ldr	r3, [r7, #12]
 800d31a:	681b      	ldr	r3, [r3, #0]
 800d31c:	687a      	ldr	r2, [r7, #4]
 800d31e:	429a      	cmp	r2, r3
 800d320:	d8f7      	bhi.n	800d312 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800d322:	68fb      	ldr	r3, [r7, #12]
 800d324:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800d326:	68fb      	ldr	r3, [r7, #12]
 800d328:	685b      	ldr	r3, [r3, #4]
 800d32a:	68ba      	ldr	r2, [r7, #8]
 800d32c:	4413      	add	r3, r2
 800d32e:	687a      	ldr	r2, [r7, #4]
 800d330:	429a      	cmp	r2, r3
 800d332:	d108      	bne.n	800d346 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800d334:	68fb      	ldr	r3, [r7, #12]
 800d336:	685a      	ldr	r2, [r3, #4]
 800d338:	687b      	ldr	r3, [r7, #4]
 800d33a:	685b      	ldr	r3, [r3, #4]
 800d33c:	441a      	add	r2, r3
 800d33e:	68fb      	ldr	r3, [r7, #12]
 800d340:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800d342:	68fb      	ldr	r3, [r7, #12]
 800d344:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800d346:	687b      	ldr	r3, [r7, #4]
 800d348:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800d34a:	687b      	ldr	r3, [r7, #4]
 800d34c:	685b      	ldr	r3, [r3, #4]
 800d34e:	68ba      	ldr	r2, [r7, #8]
 800d350:	441a      	add	r2, r3
 800d352:	68fb      	ldr	r3, [r7, #12]
 800d354:	681b      	ldr	r3, [r3, #0]
 800d356:	429a      	cmp	r2, r3
 800d358:	d118      	bne.n	800d38c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800d35a:	68fb      	ldr	r3, [r7, #12]
 800d35c:	681a      	ldr	r2, [r3, #0]
 800d35e:	4b15      	ldr	r3, [pc, #84]	@ (800d3b4 <prvInsertBlockIntoFreeList+0xb0>)
 800d360:	681b      	ldr	r3, [r3, #0]
 800d362:	429a      	cmp	r2, r3
 800d364:	d00d      	beq.n	800d382 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800d366:	687b      	ldr	r3, [r7, #4]
 800d368:	685a      	ldr	r2, [r3, #4]
 800d36a:	68fb      	ldr	r3, [r7, #12]
 800d36c:	681b      	ldr	r3, [r3, #0]
 800d36e:	685b      	ldr	r3, [r3, #4]
 800d370:	441a      	add	r2, r3
 800d372:	687b      	ldr	r3, [r7, #4]
 800d374:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800d376:	68fb      	ldr	r3, [r7, #12]
 800d378:	681b      	ldr	r3, [r3, #0]
 800d37a:	681a      	ldr	r2, [r3, #0]
 800d37c:	687b      	ldr	r3, [r7, #4]
 800d37e:	601a      	str	r2, [r3, #0]
 800d380:	e008      	b.n	800d394 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800d382:	4b0c      	ldr	r3, [pc, #48]	@ (800d3b4 <prvInsertBlockIntoFreeList+0xb0>)
 800d384:	681a      	ldr	r2, [r3, #0]
 800d386:	687b      	ldr	r3, [r7, #4]
 800d388:	601a      	str	r2, [r3, #0]
 800d38a:	e003      	b.n	800d394 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800d38c:	68fb      	ldr	r3, [r7, #12]
 800d38e:	681a      	ldr	r2, [r3, #0]
 800d390:	687b      	ldr	r3, [r7, #4]
 800d392:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800d394:	68fa      	ldr	r2, [r7, #12]
 800d396:	687b      	ldr	r3, [r7, #4]
 800d398:	429a      	cmp	r2, r3
 800d39a:	d002      	beq.n	800d3a2 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800d39c:	68fb      	ldr	r3, [r7, #12]
 800d39e:	687a      	ldr	r2, [r7, #4]
 800d3a0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800d3a2:	bf00      	nop
 800d3a4:	3714      	adds	r7, #20
 800d3a6:	46bd      	mov	sp, r7
 800d3a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3ac:	4770      	bx	lr
 800d3ae:	bf00      	nop
 800d3b0:	200074e0 	.word	0x200074e0
 800d3b4:	200074e8 	.word	0x200074e8

0800d3b8 <rcl_get_zero_initialized_publisher>:
 800d3b8:	4b01      	ldr	r3, [pc, #4]	@ (800d3c0 <rcl_get_zero_initialized_publisher+0x8>)
 800d3ba:	6818      	ldr	r0, [r3, #0]
 800d3bc:	4770      	bx	lr
 800d3be:	bf00      	nop
 800d3c0:	0801adcc 	.word	0x0801adcc

0800d3c4 <rcl_publisher_init>:
 800d3c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d3c8:	b091      	sub	sp, #68	@ 0x44
 800d3ca:	9f1a      	ldr	r7, [sp, #104]	@ 0x68
 800d3cc:	b3d7      	cbz	r7, 800d444 <rcl_publisher_init+0x80>
 800d3ce:	f107 0950 	add.w	r9, r7, #80	@ 0x50
 800d3d2:	4604      	mov	r4, r0
 800d3d4:	4648      	mov	r0, r9
 800d3d6:	4688      	mov	r8, r1
 800d3d8:	4616      	mov	r6, r2
 800d3da:	461d      	mov	r5, r3
 800d3dc:	f000 fe2c 	bl	800e038 <rcutils_allocator_is_valid>
 800d3e0:	b380      	cbz	r0, 800d444 <rcl_publisher_init+0x80>
 800d3e2:	b37c      	cbz	r4, 800d444 <rcl_publisher_init+0x80>
 800d3e4:	f8d4 a000 	ldr.w	sl, [r4]
 800d3e8:	f1ba 0f00 	cmp.w	sl, #0
 800d3ec:	d004      	beq.n	800d3f8 <rcl_publisher_init+0x34>
 800d3ee:	2564      	movs	r5, #100	@ 0x64
 800d3f0:	4628      	mov	r0, r5
 800d3f2:	b011      	add	sp, #68	@ 0x44
 800d3f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d3f8:	4640      	mov	r0, r8
 800d3fa:	f006 fd65 	bl	8013ec8 <rcl_node_is_valid>
 800d3fe:	b330      	cbz	r0, 800d44e <rcl_publisher_init+0x8a>
 800d400:	b306      	cbz	r6, 800d444 <rcl_publisher_init+0x80>
 800d402:	b1fd      	cbz	r5, 800d444 <rcl_publisher_init+0x80>
 800d404:	46ce      	mov	lr, r9
 800d406:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800d40a:	f10d 0c2c 	add.w	ip, sp, #44	@ 0x2c
 800d40e:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800d412:	f8de 3000 	ldr.w	r3, [lr]
 800d416:	f8cc 3000 	str.w	r3, [ip]
 800d41a:	f000 fe49 	bl	800e0b0 <rcutils_get_zero_initialized_string_map>
 800d41e:	ab10      	add	r3, sp, #64	@ 0x40
 800d420:	4684      	mov	ip, r0
 800d422:	e913 0007 	ldmdb	r3, {r0, r1, r2}
 800d426:	f8cd c020 	str.w	ip, [sp, #32]
 800d42a:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 800d42e:	e9dd 230b 	ldrd	r2, r3, [sp, #44]	@ 0x2c
 800d432:	4651      	mov	r1, sl
 800d434:	a808      	add	r0, sp, #32
 800d436:	f000 feb5 	bl	800e1a4 <rcutils_string_map_init>
 800d43a:	b150      	cbz	r0, 800d452 <rcl_publisher_init+0x8e>
 800d43c:	280a      	cmp	r0, #10
 800d43e:	d013      	beq.n	800d468 <rcl_publisher_init+0xa4>
 800d440:	2501      	movs	r5, #1
 800d442:	e7d5      	b.n	800d3f0 <rcl_publisher_init+0x2c>
 800d444:	250b      	movs	r5, #11
 800d446:	4628      	mov	r0, r5
 800d448:	b011      	add	sp, #68	@ 0x44
 800d44a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d44e:	25c8      	movs	r5, #200	@ 0xc8
 800d450:	e7ce      	b.n	800d3f0 <rcl_publisher_init+0x2c>
 800d452:	a808      	add	r0, sp, #32
 800d454:	f006 f96e 	bl	8013734 <rcl_get_default_topic_name_substitutions>
 800d458:	4682      	mov	sl, r0
 800d45a:	b138      	cbz	r0, 800d46c <rcl_publisher_init+0xa8>
 800d45c:	a808      	add	r0, sp, #32
 800d45e:	f000 fee1 	bl	800e224 <rcutils_string_map_fini>
 800d462:	f1ba 0f0a 	cmp.w	sl, #10
 800d466:	d1eb      	bne.n	800d440 <rcl_publisher_init+0x7c>
 800d468:	250a      	movs	r5, #10
 800d46a:	e7c1      	b.n	800d3f0 <rcl_publisher_init+0x2c>
 800d46c:	4640      	mov	r0, r8
 800d46e:	f8cd a024 	str.w	sl, [sp, #36]	@ 0x24
 800d472:	f006 fd33 	bl	8013edc <rcl_node_get_name>
 800d476:	4682      	mov	sl, r0
 800d478:	4640      	mov	r0, r8
 800d47a:	f006 fd37 	bl	8013eec <rcl_node_get_namespace>
 800d47e:	4686      	mov	lr, r0
 800d480:	e8b9 000f 	ldmia.w	r9!, {r0, r1, r2, r3}
 800d484:	f10d 0b24 	add.w	fp, sp, #36	@ 0x24
 800d488:	46ec      	mov	ip, sp
 800d48a:	f8cd b014 	str.w	fp, [sp, #20]
 800d48e:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800d492:	f8d9 3000 	ldr.w	r3, [r9]
 800d496:	f8cc 3000 	str.w	r3, [ip]
 800d49a:	4628      	mov	r0, r5
 800d49c:	4651      	mov	r1, sl
 800d49e:	4672      	mov	r2, lr
 800d4a0:	ab08      	add	r3, sp, #32
 800d4a2:	f005 ffe1 	bl	8013468 <rcl_expand_topic_name>
 800d4a6:	4605      	mov	r5, r0
 800d4a8:	a808      	add	r0, sp, #32
 800d4aa:	f000 febb 	bl	800e224 <rcutils_string_map_fini>
 800d4ae:	b920      	cbnz	r0, 800d4ba <rcl_publisher_init+0xf6>
 800d4b0:	b15d      	cbz	r5, 800d4ca <rcl_publisher_init+0x106>
 800d4b2:	2d67      	cmp	r5, #103	@ 0x67
 800d4b4:	d002      	beq.n	800d4bc <rcl_publisher_init+0xf8>
 800d4b6:	2d69      	cmp	r5, #105	@ 0x69
 800d4b8:	d05f      	beq.n	800d57a <rcl_publisher_init+0x1b6>
 800d4ba:	2501      	movs	r5, #1
 800d4bc:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800d4be:	2800      	cmp	r0, #0
 800d4c0:	d096      	beq.n	800d3f0 <rcl_publisher_init+0x2c>
 800d4c2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d4c4:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 800d4c6:	4798      	blx	r3
 800d4c8:	e792      	b.n	800d3f0 <rcl_publisher_init+0x2c>
 800d4ca:	4640      	mov	r0, r8
 800d4cc:	f006 fd16 	bl	8013efc <rcl_node_get_options>
 800d4d0:	2800      	cmp	r0, #0
 800d4d2:	d0f2      	beq.n	800d4ba <rcl_publisher_init+0xf6>
 800d4d4:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800d4d6:	f7f2 fe85 	bl	80001e4 <strlen>
 800d4da:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d4dc:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 800d4de:	3001      	adds	r0, #1
 800d4e0:	4798      	blx	r3
 800d4e2:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800d4e4:	9107      	str	r1, [sp, #28]
 800d4e6:	4681      	mov	r9, r0
 800d4e8:	4608      	mov	r0, r1
 800d4ea:	f7f2 fe7b 	bl	80001e4 <strlen>
 800d4ee:	9907      	ldr	r1, [sp, #28]
 800d4f0:	1c42      	adds	r2, r0, #1
 800d4f2:	4648      	mov	r0, r9
 800d4f4:	f00c fca5 	bl	8019e42 <memcpy>
 800d4f8:	462a      	mov	r2, r5
 800d4fa:	4648      	mov	r0, r9
 800d4fc:	a90a      	add	r1, sp, #40	@ 0x28
 800d4fe:	f000 ff59 	bl	800e3b4 <rmw_validate_full_topic_name>
 800d502:	2800      	cmp	r0, #0
 800d504:	d137      	bne.n	800d576 <rcl_publisher_init+0x1b2>
 800d506:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800d508:	2b00      	cmp	r3, #0
 800d50a:	d138      	bne.n	800d57e <rcl_publisher_init+0x1ba>
 800d50c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d50e:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 800d510:	20c0      	movs	r0, #192	@ 0xc0
 800d512:	4798      	blx	r3
 800d514:	6020      	str	r0, [r4, #0]
 800d516:	b3a0      	cbz	r0, 800d582 <rcl_publisher_init+0x1be>
 800d518:	4640      	mov	r0, r8
 800d51a:	f006 fcf7 	bl	8013f0c <rcl_node_get_rmw_handle>
 800d51e:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 800d522:	9300      	str	r3, [sp, #0]
 800d524:	4631      	mov	r1, r6
 800d526:	463b      	mov	r3, r7
 800d528:	464a      	mov	r2, r9
 800d52a:	6825      	ldr	r5, [r4, #0]
 800d52c:	f001 f842 	bl	800e5b4 <rmw_create_publisher>
 800d530:	6821      	ldr	r1, [r4, #0]
 800d532:	f8c5 00bc 	str.w	r0, [r5, #188]	@ 0xbc
 800d536:	f8d1 00bc 	ldr.w	r0, [r1, #188]	@ 0xbc
 800d53a:	b388      	cbz	r0, 800d5a0 <rcl_publisher_init+0x1dc>
 800d53c:	3168      	adds	r1, #104	@ 0x68
 800d53e:	f001 f913 	bl	800e768 <rmw_publisher_get_actual_qos>
 800d542:	6823      	ldr	r3, [r4, #0]
 800d544:	4605      	mov	r5, r0
 800d546:	b9f0      	cbnz	r0, 800d586 <rcl_publisher_init+0x1c2>
 800d548:	f897 2048 	ldrb.w	r2, [r7, #72]	@ 0x48
 800d54c:	f883 20b0 	strb.w	r2, [r3, #176]	@ 0xb0
 800d550:	4618      	mov	r0, r3
 800d552:	2268      	movs	r2, #104	@ 0x68
 800d554:	4639      	mov	r1, r7
 800d556:	f00c fc74 	bl	8019e42 <memcpy>
 800d55a:	f8d8 2000 	ldr.w	r2, [r8]
 800d55e:	f8c0 20b8 	str.w	r2, [r0, #184]	@ 0xb8
 800d562:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800d564:	b110      	cbz	r0, 800d56c <rcl_publisher_init+0x1a8>
 800d566:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d568:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 800d56a:	4798      	blx	r3
 800d56c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d56e:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 800d570:	4648      	mov	r0, r9
 800d572:	4798      	blx	r3
 800d574:	e73c      	b.n	800d3f0 <rcl_publisher_init+0x2c>
 800d576:	2501      	movs	r5, #1
 800d578:	e7f3      	b.n	800d562 <rcl_publisher_init+0x19e>
 800d57a:	2567      	movs	r5, #103	@ 0x67
 800d57c:	e79e      	b.n	800d4bc <rcl_publisher_init+0xf8>
 800d57e:	2567      	movs	r5, #103	@ 0x67
 800d580:	e7ef      	b.n	800d562 <rcl_publisher_init+0x19e>
 800d582:	250a      	movs	r5, #10
 800d584:	e7ed      	b.n	800d562 <rcl_publisher_init+0x19e>
 800d586:	2b00      	cmp	r3, #0
 800d588:	d0f5      	beq.n	800d576 <rcl_publisher_init+0x1b2>
 800d58a:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 800d58e:	b13b      	cbz	r3, 800d5a0 <rcl_publisher_init+0x1dc>
 800d590:	4640      	mov	r0, r8
 800d592:	f006 fcbb 	bl	8013f0c <rcl_node_get_rmw_handle>
 800d596:	6823      	ldr	r3, [r4, #0]
 800d598:	f8d3 10bc 	ldr.w	r1, [r3, #188]	@ 0xbc
 800d59c:	f001 f8f2 	bl	800e784 <rmw_destroy_publisher>
 800d5a0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d5a2:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 800d5a4:	6820      	ldr	r0, [r4, #0]
 800d5a6:	4798      	blx	r3
 800d5a8:	2300      	movs	r3, #0
 800d5aa:	6023      	str	r3, [r4, #0]
 800d5ac:	2501      	movs	r5, #1
 800d5ae:	e7d8      	b.n	800d562 <rcl_publisher_init+0x19e>

0800d5b0 <rcl_publisher_get_default_options>:
 800d5b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d5b2:	4f0e      	ldr	r7, [pc, #56]	@ (800d5ec <rcl_publisher_get_default_options+0x3c>)
 800d5b4:	490e      	ldr	r1, [pc, #56]	@ (800d5f0 <rcl_publisher_get_default_options+0x40>)
 800d5b6:	b087      	sub	sp, #28
 800d5b8:	4606      	mov	r6, r0
 800d5ba:	2250      	movs	r2, #80	@ 0x50
 800d5bc:	4638      	mov	r0, r7
 800d5be:	f00c fc40 	bl	8019e42 <memcpy>
 800d5c2:	466c      	mov	r4, sp
 800d5c4:	4668      	mov	r0, sp
 800d5c6:	f000 fd29 	bl	800e01c <rcutils_get_default_allocator>
 800d5ca:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800d5cc:	f107 0550 	add.w	r5, r7, #80	@ 0x50
 800d5d0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800d5d2:	6823      	ldr	r3, [r4, #0]
 800d5d4:	602b      	str	r3, [r5, #0]
 800d5d6:	f000 feeb 	bl	800e3b0 <rmw_get_default_publisher_options>
 800d5da:	4639      	mov	r1, r7
 800d5dc:	6678      	str	r0, [r7, #100]	@ 0x64
 800d5de:	2268      	movs	r2, #104	@ 0x68
 800d5e0:	4630      	mov	r0, r6
 800d5e2:	f00c fc2e 	bl	8019e42 <memcpy>
 800d5e6:	4630      	mov	r0, r6
 800d5e8:	b007      	add	sp, #28
 800d5ea:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d5ec:	20007500 	.word	0x20007500
 800d5f0:	0801add0 	.word	0x0801add0

0800d5f4 <rcl_publish>:
 800d5f4:	b1f8      	cbz	r0, 800d636 <rcl_publish+0x42>
 800d5f6:	6803      	ldr	r3, [r0, #0]
 800d5f8:	b570      	push	{r4, r5, r6, lr}
 800d5fa:	4604      	mov	r4, r0
 800d5fc:	b1b3      	cbz	r3, 800d62c <rcl_publish+0x38>
 800d5fe:	4616      	mov	r6, r2
 800d600:	f8d3 20bc 	ldr.w	r2, [r3, #188]	@ 0xbc
 800d604:	b192      	cbz	r2, 800d62c <rcl_publish+0x38>
 800d606:	f8d3 00b8 	ldr.w	r0, [r3, #184]	@ 0xb8
 800d60a:	460d      	mov	r5, r1
 800d60c:	f005 fec2 	bl	8013394 <rcl_context_is_valid>
 800d610:	b160      	cbz	r0, 800d62c <rcl_publish+0x38>
 800d612:	6823      	ldr	r3, [r4, #0]
 800d614:	f8d3 00bc 	ldr.w	r0, [r3, #188]	@ 0xbc
 800d618:	b140      	cbz	r0, 800d62c <rcl_publish+0x38>
 800d61a:	b155      	cbz	r5, 800d632 <rcl_publish+0x3e>
 800d61c:	4632      	mov	r2, r6
 800d61e:	4629      	mov	r1, r5
 800d620:	f000 ff68 	bl	800e4f4 <rmw_publish>
 800d624:	3800      	subs	r0, #0
 800d626:	bf18      	it	ne
 800d628:	2001      	movne	r0, #1
 800d62a:	bd70      	pop	{r4, r5, r6, pc}
 800d62c:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 800d630:	bd70      	pop	{r4, r5, r6, pc}
 800d632:	200b      	movs	r0, #11
 800d634:	bd70      	pop	{r4, r5, r6, pc}
 800d636:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 800d63a:	4770      	bx	lr

0800d63c <_rclc_check_for_new_data>:
 800d63c:	b1e0      	cbz	r0, 800d678 <_rclc_check_for_new_data+0x3c>
 800d63e:	7803      	ldrb	r3, [r0, #0]
 800d640:	2b08      	cmp	r3, #8
 800d642:	d81b      	bhi.n	800d67c <_rclc_check_for_new_data+0x40>
 800d644:	e8df f003 	tbb	[pc, r3]
 800d648:	12161010 	.word	0x12161010
 800d64c:	05050512 	.word	0x05050512
 800d650:	14          	.byte	0x14
 800d651:	00          	.byte	0x00
 800d652:	6a0b      	ldr	r3, [r1, #32]
 800d654:	6b42      	ldr	r2, [r0, #52]	@ 0x34
 800d656:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d65a:	3b00      	subs	r3, #0
 800d65c:	bf18      	it	ne
 800d65e:	2301      	movne	r3, #1
 800d660:	f880 3039 	strb.w	r3, [r0, #57]	@ 0x39
 800d664:	2000      	movs	r0, #0
 800d666:	4770      	bx	lr
 800d668:	680b      	ldr	r3, [r1, #0]
 800d66a:	e7f3      	b.n	800d654 <_rclc_check_for_new_data+0x18>
 800d66c:	698b      	ldr	r3, [r1, #24]
 800d66e:	e7f1      	b.n	800d654 <_rclc_check_for_new_data+0x18>
 800d670:	688b      	ldr	r3, [r1, #8]
 800d672:	e7ef      	b.n	800d654 <_rclc_check_for_new_data+0x18>
 800d674:	690b      	ldr	r3, [r1, #16]
 800d676:	e7ed      	b.n	800d654 <_rclc_check_for_new_data+0x18>
 800d678:	200b      	movs	r0, #11
 800d67a:	4770      	bx	lr
 800d67c:	2300      	movs	r3, #0
 800d67e:	f880 3039 	strb.w	r3, [r0, #57]	@ 0x39
 800d682:	2001      	movs	r0, #1
 800d684:	4770      	bx	lr
 800d686:	bf00      	nop

0800d688 <_rclc_take_new_data>:
 800d688:	2800      	cmp	r0, #0
 800d68a:	d049      	beq.n	800d720 <_rclc_take_new_data+0x98>
 800d68c:	b510      	push	{r4, lr}
 800d68e:	7803      	ldrb	r3, [r0, #0]
 800d690:	b08e      	sub	sp, #56	@ 0x38
 800d692:	4604      	mov	r4, r0
 800d694:	2b08      	cmp	r3, #8
 800d696:	d84a      	bhi.n	800d72e <_rclc_take_new_data+0xa6>
 800d698:	e8df f003 	tbb	[pc, r3]
 800d69c:	2b121515 	.word	0x2b121515
 800d6a0:	0505052b 	.word	0x0505052b
 800d6a4:	12          	.byte	0x12
 800d6a5:	00          	.byte	0x00
 800d6a6:	6a0b      	ldr	r3, [r1, #32]
 800d6a8:	6b42      	ldr	r2, [r0, #52]	@ 0x34
 800d6aa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d6ae:	b13b      	cbz	r3, 800d6c0 <_rclc_take_new_data+0x38>
 800d6b0:	e9d0 0201 	ldrd	r0, r2, [r0, #4]
 800d6b4:	f104 0110 	add.w	r1, r4, #16
 800d6b8:	f006 fd62 	bl	8014180 <rcl_take_request>
 800d6bc:	2800      	cmp	r0, #0
 800d6be:	d131      	bne.n	800d724 <_rclc_take_new_data+0x9c>
 800d6c0:	2000      	movs	r0, #0
 800d6c2:	b00e      	add	sp, #56	@ 0x38
 800d6c4:	bd10      	pop	{r4, pc}
 800d6c6:	680b      	ldr	r3, [r1, #0]
 800d6c8:	6b42      	ldr	r2, [r0, #52]	@ 0x34
 800d6ca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d6ce:	2b00      	cmp	r3, #0
 800d6d0:	d0f6      	beq.n	800d6c0 <_rclc_take_new_data+0x38>
 800d6d2:	e9d0 0101 	ldrd	r0, r1, [r0, #4]
 800d6d6:	2300      	movs	r3, #0
 800d6d8:	aa02      	add	r2, sp, #8
 800d6da:	f006 fec7 	bl	801446c <rcl_take>
 800d6de:	2800      	cmp	r0, #0
 800d6e0:	d0ef      	beq.n	800d6c2 <_rclc_take_new_data+0x3a>
 800d6e2:	f240 1391 	movw	r3, #401	@ 0x191
 800d6e6:	4298      	cmp	r0, r3
 800d6e8:	d115      	bne.n	800d716 <_rclc_take_new_data+0x8e>
 800d6ea:	2300      	movs	r3, #0
 800d6ec:	f884 3039 	strb.w	r3, [r4, #57]	@ 0x39
 800d6f0:	e7e7      	b.n	800d6c2 <_rclc_take_new_data+0x3a>
 800d6f2:	698b      	ldr	r3, [r1, #24]
 800d6f4:	6b42      	ldr	r2, [r0, #52]	@ 0x34
 800d6f6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d6fa:	2b00      	cmp	r3, #0
 800d6fc:	d0e0      	beq.n	800d6c0 <_rclc_take_new_data+0x38>
 800d6fe:	e9d0 0201 	ldrd	r0, r2, [r0, #4]
 800d702:	f104 0110 	add.w	r1, r4, #16
 800d706:	f005 fdeb 	bl	80132e0 <rcl_take_response>
 800d70a:	2800      	cmp	r0, #0
 800d70c:	d0d8      	beq.n	800d6c0 <_rclc_take_new_data+0x38>
 800d70e:	f240 13f5 	movw	r3, #501	@ 0x1f5
 800d712:	4298      	cmp	r0, r3
 800d714:	d0d5      	beq.n	800d6c2 <_rclc_take_new_data+0x3a>
 800d716:	9001      	str	r0, [sp, #4]
 800d718:	f000 fcb2 	bl	800e080 <rcutils_reset_error>
 800d71c:	9801      	ldr	r0, [sp, #4]
 800d71e:	e7d0      	b.n	800d6c2 <_rclc_take_new_data+0x3a>
 800d720:	200b      	movs	r0, #11
 800d722:	4770      	bx	lr
 800d724:	f240 2359 	movw	r3, #601	@ 0x259
 800d728:	4298      	cmp	r0, r3
 800d72a:	d0de      	beq.n	800d6ea <_rclc_take_new_data+0x62>
 800d72c:	e7f3      	b.n	800d716 <_rclc_take_new_data+0x8e>
 800d72e:	2001      	movs	r0, #1
 800d730:	e7c7      	b.n	800d6c2 <_rclc_take_new_data+0x3a>
 800d732:	bf00      	nop

0800d734 <rclc_executor_trigger_any>:
 800d734:	b170      	cbz	r0, 800d754 <rclc_executor_trigger_any+0x20>
 800d736:	b179      	cbz	r1, 800d758 <rclc_executor_trigger_any+0x24>
 800d738:	4603      	mov	r3, r0
 800d73a:	2200      	movs	r2, #0
 800d73c:	e005      	b.n	800d74a <rclc_executor_trigger_any+0x16>
 800d73e:	f893 0039 	ldrb.w	r0, [r3, #57]	@ 0x39
 800d742:	3340      	adds	r3, #64	@ 0x40
 800d744:	b930      	cbnz	r0, 800d754 <rclc_executor_trigger_any+0x20>
 800d746:	4291      	cmp	r1, r2
 800d748:	d005      	beq.n	800d756 <rclc_executor_trigger_any+0x22>
 800d74a:	f893 0038 	ldrb.w	r0, [r3, #56]	@ 0x38
 800d74e:	3201      	adds	r2, #1
 800d750:	2800      	cmp	r0, #0
 800d752:	d1f4      	bne.n	800d73e <rclc_executor_trigger_any+0xa>
 800d754:	4770      	bx	lr
 800d756:	4770      	bx	lr
 800d758:	4608      	mov	r0, r1
 800d75a:	e7fb      	b.n	800d754 <rclc_executor_trigger_any+0x20>

0800d75c <_rclc_execute.part.0>:
 800d75c:	b530      	push	{r4, r5, lr}
 800d75e:	7803      	ldrb	r3, [r0, #0]
 800d760:	b083      	sub	sp, #12
 800d762:	4604      	mov	r4, r0
 800d764:	2b08      	cmp	r3, #8
 800d766:	d85b      	bhi.n	800d820 <_rclc_execute.part.0+0xc4>
 800d768:	e8df f003 	tbb	[pc, r3]
 800d76c:	3036271f 	.word	0x3036271f
 800d770:	0505053f 	.word	0x0505053f
 800d774:	1a          	.byte	0x1a
 800d775:	00          	.byte	0x00
 800d776:	2b06      	cmp	r3, #6
 800d778:	d049      	beq.n	800d80e <_rclc_execute.part.0+0xb2>
 800d77a:	2b07      	cmp	r3, #7
 800d77c:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 800d77e:	d140      	bne.n	800d802 <_rclc_execute.part.0+0xa6>
 800d780:	e9d0 120a 	ldrd	r1, r2, [r0, #40]	@ 0x28
 800d784:	6880      	ldr	r0, [r0, #8]
 800d786:	4798      	blx	r3
 800d788:	f104 0110 	add.w	r1, r4, #16
 800d78c:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 800d78e:	6860      	ldr	r0, [r4, #4]
 800d790:	f006 fd2e 	bl	80141f0 <rcl_send_response>
 800d794:	b138      	cbz	r0, 800d7a6 <_rclc_execute.part.0+0x4a>
 800d796:	9001      	str	r0, [sp, #4]
 800d798:	f000 fc72 	bl	800e080 <rcutils_reset_error>
 800d79c:	9801      	ldr	r0, [sp, #4]
 800d79e:	e002      	b.n	800d7a6 <_rclc_execute.part.0+0x4a>
 800d7a0:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 800d7a2:	4798      	blx	r3
 800d7a4:	2000      	movs	r0, #0
 800d7a6:	b003      	add	sp, #12
 800d7a8:	bd30      	pop	{r4, r5, pc}
 800d7aa:	f890 5039 	ldrb.w	r5, [r0, #57]	@ 0x39
 800d7ae:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 800d7b0:	b96d      	cbnz	r5, 800d7ce <_rclc_execute.part.0+0x72>
 800d7b2:	4628      	mov	r0, r5
 800d7b4:	4798      	blx	r3
 800d7b6:	4628      	mov	r0, r5
 800d7b8:	e7f5      	b.n	800d7a6 <_rclc_execute.part.0+0x4a>
 800d7ba:	f890 5039 	ldrb.w	r5, [r0, #57]	@ 0x39
 800d7be:	e9d0 130b 	ldrd	r1, r3, [r0, #44]	@ 0x2c
 800d7c2:	b1d5      	cbz	r5, 800d7fa <_rclc_execute.part.0+0x9e>
 800d7c4:	6880      	ldr	r0, [r0, #8]
 800d7c6:	4798      	blx	r3
 800d7c8:	2000      	movs	r0, #0
 800d7ca:	e7ec      	b.n	800d7a6 <_rclc_execute.part.0+0x4a>
 800d7cc:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 800d7ce:	68a0      	ldr	r0, [r4, #8]
 800d7d0:	4798      	blx	r3
 800d7d2:	2000      	movs	r0, #0
 800d7d4:	b003      	add	sp, #12
 800d7d6:	bd30      	pop	{r4, r5, pc}
 800d7d8:	6840      	ldr	r0, [r0, #4]
 800d7da:	f007 f957 	bl	8014a8c <rcl_timer_call>
 800d7de:	f240 3321 	movw	r3, #801	@ 0x321
 800d7e2:	4298      	cmp	r0, r3
 800d7e4:	d1d6      	bne.n	800d794 <_rclc_execute.part.0+0x38>
 800d7e6:	2000      	movs	r0, #0
 800d7e8:	e7dd      	b.n	800d7a6 <_rclc_execute.part.0+0x4a>
 800d7ea:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 800d7ec:	6880      	ldr	r0, [r0, #8]
 800d7ee:	f104 0110 	add.w	r1, r4, #16
 800d7f2:	4798      	blx	r3
 800d7f4:	2000      	movs	r0, #0
 800d7f6:	b003      	add	sp, #12
 800d7f8:	bd30      	pop	{r4, r5, pc}
 800d7fa:	4628      	mov	r0, r5
 800d7fc:	4798      	blx	r3
 800d7fe:	4628      	mov	r0, r5
 800d800:	e7d1      	b.n	800d7a6 <_rclc_execute.part.0+0x4a>
 800d802:	6a81      	ldr	r1, [r0, #40]	@ 0x28
 800d804:	6880      	ldr	r0, [r0, #8]
 800d806:	4798      	blx	r3
 800d808:	f104 0110 	add.w	r1, r4, #16
 800d80c:	e7be      	b.n	800d78c <_rclc_execute.part.0+0x30>
 800d80e:	f100 0110 	add.w	r1, r0, #16
 800d812:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 800d814:	6a82      	ldr	r2, [r0, #40]	@ 0x28
 800d816:	6880      	ldr	r0, [r0, #8]
 800d818:	9101      	str	r1, [sp, #4]
 800d81a:	4798      	blx	r3
 800d81c:	9901      	ldr	r1, [sp, #4]
 800d81e:	e7b5      	b.n	800d78c <_rclc_execute.part.0+0x30>
 800d820:	2001      	movs	r0, #1
 800d822:	e7c0      	b.n	800d7a6 <_rclc_execute.part.0+0x4a>
 800d824:	0000      	movs	r0, r0
	...

0800d828 <rclc_executor_init>:
 800d828:	2800      	cmp	r0, #0
 800d82a:	d063      	beq.n	800d8f4 <rclc_executor_init+0xcc>
 800d82c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d830:	460f      	mov	r7, r1
 800d832:	b0ae      	sub	sp, #184	@ 0xb8
 800d834:	2900      	cmp	r1, #0
 800d836:	d055      	beq.n	800d8e4 <rclc_executor_init+0xbc>
 800d838:	4605      	mov	r5, r0
 800d83a:	4618      	mov	r0, r3
 800d83c:	4616      	mov	r6, r2
 800d83e:	4698      	mov	r8, r3
 800d840:	f000 fbfa 	bl	800e038 <rcutils_allocator_is_valid>
 800d844:	2800      	cmp	r0, #0
 800d846:	d04d      	beq.n	800d8e4 <rclc_executor_init+0xbc>
 800d848:	2e00      	cmp	r6, #0
 800d84a:	d04b      	beq.n	800d8e4 <rclc_executor_init+0xbc>
 800d84c:	492e      	ldr	r1, [pc, #184]	@ (800d908 <rclc_executor_init+0xe0>)
 800d84e:	2280      	movs	r2, #128	@ 0x80
 800d850:	a80e      	add	r0, sp, #56	@ 0x38
 800d852:	f00c faf6 	bl	8019e42 <memcpy>
 800d856:	2400      	movs	r4, #0
 800d858:	a90e      	add	r1, sp, #56	@ 0x38
 800d85a:	2280      	movs	r2, #128	@ 0x80
 800d85c:	4628      	mov	r0, r5
 800d85e:	f00c faf0 	bl	8019e42 <memcpy>
 800d862:	602f      	str	r7, [r5, #0]
 800d864:	4668      	mov	r0, sp
 800d866:	e9c5 6402 	strd	r6, r4, [r5, #8]
 800d86a:	466f      	mov	r7, sp
 800d86c:	f007 fb68 	bl	8014f40 <rcl_get_zero_initialized_wait_set>
 800d870:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 800d872:	f105 0c14 	add.w	ip, r5, #20
 800d876:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800d87a:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 800d87c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800d880:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 800d882:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800d886:	a31e      	add	r3, pc, #120	@ (adr r3, 800d900 <rclc_executor_init+0xd8>)
 800d888:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d88c:	6839      	ldr	r1, [r7, #0]
 800d88e:	f8cc 1000 	str.w	r1, [ip]
 800d892:	f8d8 7000 	ldr.w	r7, [r8]
 800d896:	f8d8 1010 	ldr.w	r1, [r8, #16]
 800d89a:	f8c5 8010 	str.w	r8, [r5, #16]
 800d89e:	e9c5 2318 	strd	r2, r3, [r5, #96]	@ 0x60
 800d8a2:	01b0      	lsls	r0, r6, #6
 800d8a4:	47b8      	blx	r7
 800d8a6:	6068      	str	r0, [r5, #4]
 800d8a8:	b908      	cbnz	r0, 800d8ae <rclc_executor_init+0x86>
 800d8aa:	e025      	b.n	800d8f8 <rclc_executor_init+0xd0>
 800d8ac:	6868      	ldr	r0, [r5, #4]
 800d8ae:	eb00 1084 	add.w	r0, r0, r4, lsl #6
 800d8b2:	4631      	mov	r1, r6
 800d8b4:	3401      	adds	r4, #1
 800d8b6:	f000 fa47 	bl	800dd48 <rclc_executor_handle_init>
 800d8ba:	42a6      	cmp	r6, r4
 800d8bc:	d1f6      	bne.n	800d8ac <rclc_executor_init+0x84>
 800d8be:	f105 0048 	add.w	r0, r5, #72	@ 0x48
 800d8c2:	f000 fa35 	bl	800dd30 <rclc_executor_handle_counters_zero_init>
 800d8c6:	686b      	ldr	r3, [r5, #4]
 800d8c8:	4a10      	ldr	r2, [pc, #64]	@ (800d90c <rclc_executor_init+0xe4>)
 800d8ca:	672a      	str	r2, [r5, #112]	@ 0x70
 800d8cc:	2000      	movs	r0, #0
 800d8ce:	6768      	str	r0, [r5, #116]	@ 0x74
 800d8d0:	b163      	cbz	r3, 800d8ec <rclc_executor_init+0xc4>
 800d8d2:	692b      	ldr	r3, [r5, #16]
 800d8d4:	b153      	cbz	r3, 800d8ec <rclc_executor_init+0xc4>
 800d8d6:	68ab      	ldr	r3, [r5, #8]
 800d8d8:	b143      	cbz	r3, 800d8ec <rclc_executor_init+0xc4>
 800d8da:	f885 0078 	strb.w	r0, [r5, #120]	@ 0x78
 800d8de:	b02e      	add	sp, #184	@ 0xb8
 800d8e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d8e4:	200b      	movs	r0, #11
 800d8e6:	b02e      	add	sp, #184	@ 0xb8
 800d8e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d8ec:	4618      	mov	r0, r3
 800d8ee:	b02e      	add	sp, #184	@ 0xb8
 800d8f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d8f4:	200b      	movs	r0, #11
 800d8f6:	4770      	bx	lr
 800d8f8:	200a      	movs	r0, #10
 800d8fa:	e7f4      	b.n	800d8e6 <rclc_executor_init+0xbe>
 800d8fc:	f3af 8000 	nop.w
 800d900:	3b9aca00 	.word	0x3b9aca00
 800d904:	00000000 	.word	0x00000000
 800d908:	0801ae20 	.word	0x0801ae20
 800d90c:	0800d735 	.word	0x0800d735

0800d910 <rclc_executor_add_subscription>:
 800d910:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d914:	f89d 7018 	ldrb.w	r7, [sp, #24]
 800d918:	b358      	cbz	r0, 800d972 <rclc_executor_add_subscription+0x62>
 800d91a:	b351      	cbz	r1, 800d972 <rclc_executor_add_subscription+0x62>
 800d91c:	b34a      	cbz	r2, 800d972 <rclc_executor_add_subscription+0x62>
 800d91e:	b343      	cbz	r3, 800d972 <rclc_executor_add_subscription+0x62>
 800d920:	4604      	mov	r4, r0
 800d922:	e9d0 0502 	ldrd	r0, r5, [r0, #8]
 800d926:	4285      	cmp	r5, r0
 800d928:	d302      	bcc.n	800d930 <rclc_executor_add_subscription+0x20>
 800d92a:	2001      	movs	r0, #1
 800d92c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d930:	f8d4 e004 	ldr.w	lr, [r4, #4]
 800d934:	ea4f 1885 	mov.w	r8, r5, lsl #6
 800d938:	eb0e 1685 	add.w	r6, lr, r5, lsl #6
 800d93c:	f04f 0c00 	mov.w	ip, #0
 800d940:	f80e c008 	strb.w	ip, [lr, r8]
 800d944:	2001      	movs	r0, #1
 800d946:	3501      	adds	r5, #1
 800d948:	f104 0814 	add.w	r8, r4, #20
 800d94c:	f886 0038 	strb.w	r0, [r6, #56]	@ 0x38
 800d950:	e9c6 1201 	strd	r1, r2, [r6, #4]
 800d954:	6333      	str	r3, [r6, #48]	@ 0x30
 800d956:	7077      	strb	r7, [r6, #1]
 800d958:	f8c6 c02c 	str.w	ip, [r6, #44]	@ 0x2c
 800d95c:	4640      	mov	r0, r8
 800d95e:	60e5      	str	r5, [r4, #12]
 800d960:	f007 fb00 	bl	8014f64 <rcl_wait_set_is_valid>
 800d964:	b940      	cbnz	r0, 800d978 <rclc_executor_add_subscription+0x68>
 800d966:	6ca3      	ldr	r3, [r4, #72]	@ 0x48
 800d968:	3301      	adds	r3, #1
 800d96a:	64a3      	str	r3, [r4, #72]	@ 0x48
 800d96c:	2000      	movs	r0, #0
 800d96e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d972:	200b      	movs	r0, #11
 800d974:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d978:	4640      	mov	r0, r8
 800d97a:	f007 faf9 	bl	8014f70 <rcl_wait_set_fini>
 800d97e:	2800      	cmp	r0, #0
 800d980:	d0f1      	beq.n	800d966 <rclc_executor_add_subscription+0x56>
 800d982:	e7d3      	b.n	800d92c <rclc_executor_add_subscription+0x1c>

0800d984 <rclc_executor_add_timer>:
 800d984:	b308      	cbz	r0, 800d9ca <rclc_executor_add_timer+0x46>
 800d986:	b301      	cbz	r1, 800d9ca <rclc_executor_add_timer+0x46>
 800d988:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d98a:	e9d0 2302 	ldrd	r2, r3, [r0, #8]
 800d98e:	4293      	cmp	r3, r2
 800d990:	4604      	mov	r4, r0
 800d992:	d301      	bcc.n	800d998 <rclc_executor_add_timer+0x14>
 800d994:	2001      	movs	r0, #1
 800d996:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d998:	6840      	ldr	r0, [r0, #4]
 800d99a:	019d      	lsls	r5, r3, #6
 800d99c:	eb00 1283 	add.w	r2, r0, r3, lsl #6
 800d9a0:	2702      	movs	r7, #2
 800d9a2:	6051      	str	r1, [r2, #4]
 800d9a4:	3301      	adds	r3, #1
 800d9a6:	5347      	strh	r7, [r0, r5]
 800d9a8:	2601      	movs	r6, #1
 800d9aa:	2100      	movs	r1, #0
 800d9ac:	f104 0514 	add.w	r5, r4, #20
 800d9b0:	f882 6038 	strb.w	r6, [r2, #56]	@ 0x38
 800d9b4:	62d1      	str	r1, [r2, #44]	@ 0x2c
 800d9b6:	4628      	mov	r0, r5
 800d9b8:	60e3      	str	r3, [r4, #12]
 800d9ba:	f007 fad3 	bl	8014f64 <rcl_wait_set_is_valid>
 800d9be:	b930      	cbnz	r0, 800d9ce <rclc_executor_add_timer+0x4a>
 800d9c0:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 800d9c2:	3301      	adds	r3, #1
 800d9c4:	64e3      	str	r3, [r4, #76]	@ 0x4c
 800d9c6:	2000      	movs	r0, #0
 800d9c8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d9ca:	200b      	movs	r0, #11
 800d9cc:	4770      	bx	lr
 800d9ce:	4628      	mov	r0, r5
 800d9d0:	f007 face 	bl	8014f70 <rcl_wait_set_fini>
 800d9d4:	2800      	cmp	r0, #0
 800d9d6:	d0f3      	beq.n	800d9c0 <rclc_executor_add_timer+0x3c>
 800d9d8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d9da:	bf00      	nop

0800d9dc <rclc_executor_prepare>:
 800d9dc:	2800      	cmp	r0, #0
 800d9de:	d03d      	beq.n	800da5c <rclc_executor_prepare+0x80>
 800d9e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d9e4:	f100 0814 	add.w	r8, r0, #20
 800d9e8:	b09a      	sub	sp, #104	@ 0x68
 800d9ea:	4604      	mov	r4, r0
 800d9ec:	4640      	mov	r0, r8
 800d9ee:	f007 fab9 	bl	8014f64 <rcl_wait_set_is_valid>
 800d9f2:	b118      	cbz	r0, 800d9fc <rclc_executor_prepare+0x20>
 800d9f4:	2000      	movs	r0, #0
 800d9f6:	b01a      	add	sp, #104	@ 0x68
 800d9f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d9fc:	4640      	mov	r0, r8
 800d9fe:	f007 fab7 	bl	8014f70 <rcl_wait_set_fini>
 800da02:	2800      	cmp	r0, #0
 800da04:	d127      	bne.n	800da56 <rclc_executor_prepare+0x7a>
 800da06:	a80c      	add	r0, sp, #48	@ 0x30
 800da08:	ad0c      	add	r5, sp, #48	@ 0x30
 800da0a:	f007 fa99 	bl	8014f40 <rcl_get_zero_initialized_wait_set>
 800da0e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800da10:	4646      	mov	r6, r8
 800da12:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 800da14:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800da16:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 800da18:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800da1a:	6927      	ldr	r7, [r4, #16]
 800da1c:	682d      	ldr	r5, [r5, #0]
 800da1e:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 800da20:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 800da22:	6035      	str	r5, [r6, #0]
 800da24:	ad04      	add	r5, sp, #16
 800da26:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800da28:	e9d4 3214 	ldrd	r3, r2, [r4, #80]	@ 0x50
 800da2c:	6de1      	ldr	r1, [r4, #92]	@ 0x5c
 800da2e:	6826      	ldr	r6, [r4, #0]
 800da30:	6838      	ldr	r0, [r7, #0]
 800da32:	6028      	str	r0, [r5, #0]
 800da34:	e9cd 1602 	strd	r1, r6, [sp, #8]
 800da38:	e9cd 3200 	strd	r3, r2, [sp]
 800da3c:	4640      	mov	r0, r8
 800da3e:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 800da40:	6da2      	ldr	r2, [r4, #88]	@ 0x58
 800da42:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 800da44:	f007 fdb2 	bl	80155ac <rcl_wait_set_init>
 800da48:	2800      	cmp	r0, #0
 800da4a:	d0d4      	beq.n	800d9f6 <rclc_executor_prepare+0x1a>
 800da4c:	900b      	str	r0, [sp, #44]	@ 0x2c
 800da4e:	f000 fb17 	bl	800e080 <rcutils_reset_error>
 800da52:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 800da54:	e7cf      	b.n	800d9f6 <rclc_executor_prepare+0x1a>
 800da56:	f000 fb13 	bl	800e080 <rcutils_reset_error>
 800da5a:	e7d4      	b.n	800da06 <rclc_executor_prepare+0x2a>
 800da5c:	200b      	movs	r0, #11
 800da5e:	4770      	bx	lr

0800da60 <rclc_executor_spin_some.part.0>:
 800da60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800da64:	f100 0814 	add.w	r8, r0, #20
 800da68:	b083      	sub	sp, #12
 800da6a:	4692      	mov	sl, r2
 800da6c:	4699      	mov	r9, r3
 800da6e:	4605      	mov	r5, r0
 800da70:	f7ff ffb4 	bl	800d9dc <rclc_executor_prepare>
 800da74:	4640      	mov	r0, r8
 800da76:	f007 fb47 	bl	8015108 <rcl_wait_set_clear>
 800da7a:	4607      	mov	r7, r0
 800da7c:	2800      	cmp	r0, #0
 800da7e:	f040 80be 	bne.w	800dbfe <rclc_executor_spin_some.part.0+0x19e>
 800da82:	68ab      	ldr	r3, [r5, #8]
 800da84:	4604      	mov	r4, r0
 800da86:	b1eb      	cbz	r3, 800dac4 <rclc_executor_spin_some.part.0+0x64>
 800da88:	686e      	ldr	r6, [r5, #4]
 800da8a:	eb06 1184 	add.w	r1, r6, r4, lsl #6
 800da8e:	01a2      	lsls	r2, r4, #6
 800da90:	f891 3038 	ldrb.w	r3, [r1, #56]	@ 0x38
 800da94:	b1b3      	cbz	r3, 800dac4 <rclc_executor_spin_some.part.0+0x64>
 800da96:	5cb3      	ldrb	r3, [r6, r2]
 800da98:	2b08      	cmp	r3, #8
 800da9a:	f200 80a9 	bhi.w	800dbf0 <rclc_executor_spin_some.part.0+0x190>
 800da9e:	e8df f003 	tbb	[pc, r3]
 800daa2:	8989      	.short	0x8989
 800daa4:	057b7b93 	.word	0x057b7b93
 800daa8:	0505      	.short	0x0505
 800daaa:	9d          	.byte	0x9d
 800daab:	00          	.byte	0x00
 800daac:	f101 0234 	add.w	r2, r1, #52	@ 0x34
 800dab0:	4640      	mov	r0, r8
 800dab2:	6849      	ldr	r1, [r1, #4]
 800dab4:	f007 fe90 	bl	80157d8 <rcl_wait_set_add_service>
 800dab8:	2800      	cmp	r0, #0
 800daba:	d175      	bne.n	800dba8 <rclc_executor_spin_some.part.0+0x148>
 800dabc:	68ab      	ldr	r3, [r5, #8]
 800dabe:	3401      	adds	r4, #1
 800dac0:	429c      	cmp	r4, r3
 800dac2:	d3e1      	bcc.n	800da88 <rclc_executor_spin_some.part.0+0x28>
 800dac4:	464b      	mov	r3, r9
 800dac6:	4652      	mov	r2, sl
 800dac8:	4640      	mov	r0, r8
 800daca:	f007 feb1 	bl	8015830 <rcl_wait>
 800dace:	f895 3078 	ldrb.w	r3, [r5, #120]	@ 0x78
 800dad2:	2b00      	cmp	r3, #0
 800dad4:	f000 809b 	beq.w	800dc0e <rclc_executor_spin_some.part.0+0x1ae>
 800dad8:	2b01      	cmp	r3, #1
 800dada:	f040 8089 	bne.w	800dbf0 <rclc_executor_spin_some.part.0+0x190>
 800dade:	68ab      	ldr	r3, [r5, #8]
 800dae0:	2b00      	cmp	r3, #0
 800dae2:	f000 80ef 	beq.w	800dcc4 <rclc_executor_spin_some.part.0+0x264>
 800dae6:	2400      	movs	r4, #0
 800dae8:	4626      	mov	r6, r4
 800daea:	f240 1991 	movw	r9, #401	@ 0x191
 800daee:	e00a      	b.n	800db06 <rclc_executor_spin_some.part.0+0xa6>
 800daf0:	f7ff fda4 	bl	800d63c <_rclc_check_for_new_data>
 800daf4:	4604      	mov	r4, r0
 800daf6:	b110      	cbz	r0, 800dafe <rclc_executor_spin_some.part.0+0x9e>
 800daf8:	4548      	cmp	r0, r9
 800dafa:	f040 8086 	bne.w	800dc0a <rclc_executor_spin_some.part.0+0x1aa>
 800dafe:	68ab      	ldr	r3, [r5, #8]
 800db00:	429e      	cmp	r6, r3
 800db02:	f080 80db 	bcs.w	800dcbc <rclc_executor_spin_some.part.0+0x25c>
 800db06:	686a      	ldr	r2, [r5, #4]
 800db08:	eb02 1086 	add.w	r0, r2, r6, lsl #6
 800db0c:	4641      	mov	r1, r8
 800db0e:	f890 c038 	ldrb.w	ip, [r0, #56]	@ 0x38
 800db12:	3601      	adds	r6, #1
 800db14:	f1bc 0f00 	cmp.w	ip, #0
 800db18:	d1ea      	bne.n	800daf0 <rclc_executor_spin_some.part.0+0x90>
 800db1a:	4619      	mov	r1, r3
 800db1c:	4610      	mov	r0, r2
 800db1e:	e9d5 321c 	ldrd	r3, r2, [r5, #112]	@ 0x70
 800db22:	4798      	blx	r3
 800db24:	2800      	cmp	r0, #0
 800db26:	d070      	beq.n	800dc0a <rclc_executor_spin_some.part.0+0x1aa>
 800db28:	68aa      	ldr	r2, [r5, #8]
 800db2a:	2a00      	cmp	r2, #0
 800db2c:	d06d      	beq.n	800dc0a <rclc_executor_spin_some.part.0+0x1aa>
 800db2e:	2600      	movs	r6, #0
 800db30:	f240 1991 	movw	r9, #401	@ 0x191
 800db34:	e008      	b.n	800db48 <rclc_executor_spin_some.part.0+0xe8>
 800db36:	f7ff fda7 	bl	800d688 <_rclc_take_new_data>
 800db3a:	4604      	mov	r4, r0
 800db3c:	b108      	cbz	r0, 800db42 <rclc_executor_spin_some.part.0+0xe2>
 800db3e:	4548      	cmp	r0, r9
 800db40:	d163      	bne.n	800dc0a <rclc_executor_spin_some.part.0+0x1aa>
 800db42:	68aa      	ldr	r2, [r5, #8]
 800db44:	4296      	cmp	r6, r2
 800db46:	d208      	bcs.n	800db5a <rclc_executor_spin_some.part.0+0xfa>
 800db48:	6868      	ldr	r0, [r5, #4]
 800db4a:	eb00 1086 	add.w	r0, r0, r6, lsl #6
 800db4e:	4641      	mov	r1, r8
 800db50:	f890 3038 	ldrb.w	r3, [r0, #56]	@ 0x38
 800db54:	3601      	adds	r6, #1
 800db56:	2b00      	cmp	r3, #0
 800db58:	d1ed      	bne.n	800db36 <rclc_executor_spin_some.part.0+0xd6>
 800db5a:	2600      	movs	r6, #0
 800db5c:	b932      	cbnz	r2, 800db6c <rclc_executor_spin_some.part.0+0x10c>
 800db5e:	e054      	b.n	800dc0a <rclc_executor_spin_some.part.0+0x1aa>
 800db60:	2901      	cmp	r1, #1
 800db62:	d012      	beq.n	800db8a <rclc_executor_spin_some.part.0+0x12a>
 800db64:	3601      	adds	r6, #1
 800db66:	4296      	cmp	r6, r2
 800db68:	d245      	bcs.n	800dbf6 <rclc_executor_spin_some.part.0+0x196>
 800db6a:	2400      	movs	r4, #0
 800db6c:	686b      	ldr	r3, [r5, #4]
 800db6e:	eb03 1386 	add.w	r3, r3, r6, lsl #6
 800db72:	4618      	mov	r0, r3
 800db74:	f893 1038 	ldrb.w	r1, [r3, #56]	@ 0x38
 800db78:	2900      	cmp	r1, #0
 800db7a:	d046      	beq.n	800dc0a <rclc_executor_spin_some.part.0+0x1aa>
 800db7c:	7859      	ldrb	r1, [r3, #1]
 800db7e:	2900      	cmp	r1, #0
 800db80:	d1ee      	bne.n	800db60 <rclc_executor_spin_some.part.0+0x100>
 800db82:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 800db86:	2b00      	cmp	r3, #0
 800db88:	d0ec      	beq.n	800db64 <rclc_executor_spin_some.part.0+0x104>
 800db8a:	f7ff fde7 	bl	800d75c <_rclc_execute.part.0>
 800db8e:	2800      	cmp	r0, #0
 800db90:	f040 8096 	bne.w	800dcc0 <rclc_executor_spin_some.part.0+0x260>
 800db94:	68aa      	ldr	r2, [r5, #8]
 800db96:	e7e5      	b.n	800db64 <rclc_executor_spin_some.part.0+0x104>
 800db98:	f101 0234 	add.w	r2, r1, #52	@ 0x34
 800db9c:	4640      	mov	r0, r8
 800db9e:	6849      	ldr	r1, [r1, #4]
 800dba0:	f007 fdee 	bl	8015780 <rcl_wait_set_add_client>
 800dba4:	2800      	cmp	r0, #0
 800dba6:	d089      	beq.n	800dabc <rclc_executor_spin_some.part.0+0x5c>
 800dba8:	9001      	str	r0, [sp, #4]
 800dbaa:	f000 fa69 	bl	800e080 <rcutils_reset_error>
 800dbae:	9801      	ldr	r0, [sp, #4]
 800dbb0:	4607      	mov	r7, r0
 800dbb2:	e020      	b.n	800dbf6 <rclc_executor_spin_some.part.0+0x196>
 800dbb4:	f101 0234 	add.w	r2, r1, #52	@ 0x34
 800dbb8:	4640      	mov	r0, r8
 800dbba:	6849      	ldr	r1, [r1, #4]
 800dbbc:	f007 fa78 	bl	80150b0 <rcl_wait_set_add_subscription>
 800dbc0:	2800      	cmp	r0, #0
 800dbc2:	f43f af7b 	beq.w	800dabc <rclc_executor_spin_some.part.0+0x5c>
 800dbc6:	e7ef      	b.n	800dba8 <rclc_executor_spin_some.part.0+0x148>
 800dbc8:	f101 0234 	add.w	r2, r1, #52	@ 0x34
 800dbcc:	4640      	mov	r0, r8
 800dbce:	6849      	ldr	r1, [r1, #4]
 800dbd0:	f007 fda6 	bl	8015720 <rcl_wait_set_add_timer>
 800dbd4:	2800      	cmp	r0, #0
 800dbd6:	f43f af71 	beq.w	800dabc <rclc_executor_spin_some.part.0+0x5c>
 800dbda:	e7e5      	b.n	800dba8 <rclc_executor_spin_some.part.0+0x148>
 800dbdc:	f101 0234 	add.w	r2, r1, #52	@ 0x34
 800dbe0:	4640      	mov	r0, r8
 800dbe2:	6849      	ldr	r1, [r1, #4]
 800dbe4:	f007 fd70 	bl	80156c8 <rcl_wait_set_add_guard_condition>
 800dbe8:	2800      	cmp	r0, #0
 800dbea:	f43f af67 	beq.w	800dabc <rclc_executor_spin_some.part.0+0x5c>
 800dbee:	e7db      	b.n	800dba8 <rclc_executor_spin_some.part.0+0x148>
 800dbf0:	f000 fa46 	bl	800e080 <rcutils_reset_error>
 800dbf4:	2701      	movs	r7, #1
 800dbf6:	4638      	mov	r0, r7
 800dbf8:	b003      	add	sp, #12
 800dbfa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dbfe:	f000 fa3f 	bl	800e080 <rcutils_reset_error>
 800dc02:	4638      	mov	r0, r7
 800dc04:	b003      	add	sp, #12
 800dc06:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dc0a:	4627      	mov	r7, r4
 800dc0c:	e7f3      	b.n	800dbf6 <rclc_executor_spin_some.part.0+0x196>
 800dc0e:	68ab      	ldr	r3, [r5, #8]
 800dc10:	2b00      	cmp	r3, #0
 800dc12:	d05a      	beq.n	800dcca <rclc_executor_spin_some.part.0+0x26a>
 800dc14:	2400      	movs	r4, #0
 800dc16:	4626      	mov	r6, r4
 800dc18:	f240 1991 	movw	r9, #401	@ 0x191
 800dc1c:	e008      	b.n	800dc30 <rclc_executor_spin_some.part.0+0x1d0>
 800dc1e:	f7ff fd0d 	bl	800d63c <_rclc_check_for_new_data>
 800dc22:	4604      	mov	r4, r0
 800dc24:	b108      	cbz	r0, 800dc2a <rclc_executor_spin_some.part.0+0x1ca>
 800dc26:	4548      	cmp	r0, r9
 800dc28:	d1ef      	bne.n	800dc0a <rclc_executor_spin_some.part.0+0x1aa>
 800dc2a:	68ab      	ldr	r3, [r5, #8]
 800dc2c:	429e      	cmp	r6, r3
 800dc2e:	d243      	bcs.n	800dcb8 <rclc_executor_spin_some.part.0+0x258>
 800dc30:	686a      	ldr	r2, [r5, #4]
 800dc32:	eb02 1086 	add.w	r0, r2, r6, lsl #6
 800dc36:	4641      	mov	r1, r8
 800dc38:	f890 c038 	ldrb.w	ip, [r0, #56]	@ 0x38
 800dc3c:	3601      	adds	r6, #1
 800dc3e:	f1bc 0f00 	cmp.w	ip, #0
 800dc42:	d1ec      	bne.n	800dc1e <rclc_executor_spin_some.part.0+0x1be>
 800dc44:	4619      	mov	r1, r3
 800dc46:	4610      	mov	r0, r2
 800dc48:	e9d5 321c 	ldrd	r3, r2, [r5, #112]	@ 0x70
 800dc4c:	4798      	blx	r3
 800dc4e:	2800      	cmp	r0, #0
 800dc50:	d0db      	beq.n	800dc0a <rclc_executor_spin_some.part.0+0x1aa>
 800dc52:	68ab      	ldr	r3, [r5, #8]
 800dc54:	2b00      	cmp	r3, #0
 800dc56:	d0d8      	beq.n	800dc0a <rclc_executor_spin_some.part.0+0x1aa>
 800dc58:	f04f 0a00 	mov.w	sl, #0
 800dc5c:	f240 1691 	movw	r6, #401	@ 0x191
 800dc60:	f240 2959 	movw	r9, #601	@ 0x259
 800dc64:	e00b      	b.n	800dc7e <rclc_executor_spin_some.part.0+0x21e>
 800dc66:	f890 3039 	ldrb.w	r3, [r0, #57]	@ 0x39
 800dc6a:	b113      	cbz	r3, 800dc72 <rclc_executor_spin_some.part.0+0x212>
 800dc6c:	f7ff fd76 	bl	800d75c <_rclc_execute.part.0>
 800dc70:	bb30      	cbnz	r0, 800dcc0 <rclc_executor_spin_some.part.0+0x260>
 800dc72:	68ab      	ldr	r3, [r5, #8]
 800dc74:	f10a 0a01 	add.w	sl, sl, #1
 800dc78:	459a      	cmp	sl, r3
 800dc7a:	d2bc      	bcs.n	800dbf6 <rclc_executor_spin_some.part.0+0x196>
 800dc7c:	2400      	movs	r4, #0
 800dc7e:	6868      	ldr	r0, [r5, #4]
 800dc80:	eb00 108a 	add.w	r0, r0, sl, lsl #6
 800dc84:	ea4f 1b8a 	mov.w	fp, sl, lsl #6
 800dc88:	f890 3038 	ldrb.w	r3, [r0, #56]	@ 0x38
 800dc8c:	2b00      	cmp	r3, #0
 800dc8e:	d0bc      	beq.n	800dc0a <rclc_executor_spin_some.part.0+0x1aa>
 800dc90:	4641      	mov	r1, r8
 800dc92:	f7ff fcf9 	bl	800d688 <_rclc_take_new_data>
 800dc96:	b118      	cbz	r0, 800dca0 <rclc_executor_spin_some.part.0+0x240>
 800dc98:	42b0      	cmp	r0, r6
 800dc9a:	d001      	beq.n	800dca0 <rclc_executor_spin_some.part.0+0x240>
 800dc9c:	4548      	cmp	r0, r9
 800dc9e:	d10f      	bne.n	800dcc0 <rclc_executor_spin_some.part.0+0x260>
 800dca0:	6868      	ldr	r0, [r5, #4]
 800dca2:	eb10 000b 	adds.w	r0, r0, fp
 800dca6:	d005      	beq.n	800dcb4 <rclc_executor_spin_some.part.0+0x254>
 800dca8:	7843      	ldrb	r3, [r0, #1]
 800dcaa:	2b00      	cmp	r3, #0
 800dcac:	d0db      	beq.n	800dc66 <rclc_executor_spin_some.part.0+0x206>
 800dcae:	2b01      	cmp	r3, #1
 800dcb0:	d1df      	bne.n	800dc72 <rclc_executor_spin_some.part.0+0x212>
 800dcb2:	e7db      	b.n	800dc6c <rclc_executor_spin_some.part.0+0x20c>
 800dcb4:	270b      	movs	r7, #11
 800dcb6:	e79e      	b.n	800dbf6 <rclc_executor_spin_some.part.0+0x196>
 800dcb8:	686a      	ldr	r2, [r5, #4]
 800dcba:	e7c3      	b.n	800dc44 <rclc_executor_spin_some.part.0+0x1e4>
 800dcbc:	686a      	ldr	r2, [r5, #4]
 800dcbe:	e72c      	b.n	800db1a <rclc_executor_spin_some.part.0+0xba>
 800dcc0:	4607      	mov	r7, r0
 800dcc2:	e798      	b.n	800dbf6 <rclc_executor_spin_some.part.0+0x196>
 800dcc4:	686a      	ldr	r2, [r5, #4]
 800dcc6:	461c      	mov	r4, r3
 800dcc8:	e727      	b.n	800db1a <rclc_executor_spin_some.part.0+0xba>
 800dcca:	686a      	ldr	r2, [r5, #4]
 800dccc:	461c      	mov	r4, r3
 800dcce:	e7b9      	b.n	800dc44 <rclc_executor_spin_some.part.0+0x1e4>

0800dcd0 <rclc_executor_spin_some>:
 800dcd0:	b190      	cbz	r0, 800dcf8 <rclc_executor_spin_some+0x28>
 800dcd2:	b570      	push	{r4, r5, r6, lr}
 800dcd4:	4604      	mov	r4, r0
 800dcd6:	6800      	ldr	r0, [r0, #0]
 800dcd8:	4616      	mov	r6, r2
 800dcda:	461d      	mov	r5, r3
 800dcdc:	f005 fb5a 	bl	8013394 <rcl_context_is_valid>
 800dce0:	b130      	cbz	r0, 800dcf0 <rclc_executor_spin_some+0x20>
 800dce2:	4632      	mov	r2, r6
 800dce4:	462b      	mov	r3, r5
 800dce6:	4620      	mov	r0, r4
 800dce8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800dcec:	f7ff beb8 	b.w	800da60 <rclc_executor_spin_some.part.0>
 800dcf0:	f000 f9c6 	bl	800e080 <rcutils_reset_error>
 800dcf4:	2001      	movs	r0, #1
 800dcf6:	bd70      	pop	{r4, r5, r6, pc}
 800dcf8:	200b      	movs	r0, #11
 800dcfa:	4770      	bx	lr

0800dcfc <rclc_executor_spin>:
 800dcfc:	b1a8      	cbz	r0, 800dd2a <rclc_executor_spin+0x2e>
 800dcfe:	b5d0      	push	{r4, r6, r7, lr}
 800dd00:	4604      	mov	r4, r0
 800dd02:	6820      	ldr	r0, [r4, #0]
 800dd04:	e9d4 6718 	ldrd	r6, r7, [r4, #96]	@ 0x60
 800dd08:	f005 fb44 	bl	8013394 <rcl_context_is_valid>
 800dd0c:	4601      	mov	r1, r0
 800dd0e:	4632      	mov	r2, r6
 800dd10:	463b      	mov	r3, r7
 800dd12:	4620      	mov	r0, r4
 800dd14:	b129      	cbz	r1, 800dd22 <rclc_executor_spin+0x26>
 800dd16:	f7ff fea3 	bl	800da60 <rclc_executor_spin_some.part.0>
 800dd1a:	f030 0302 	bics.w	r3, r0, #2
 800dd1e:	d0f0      	beq.n	800dd02 <rclc_executor_spin+0x6>
 800dd20:	bdd0      	pop	{r4, r6, r7, pc}
 800dd22:	f000 f9ad 	bl	800e080 <rcutils_reset_error>
 800dd26:	2001      	movs	r0, #1
 800dd28:	bdd0      	pop	{r4, r6, r7, pc}
 800dd2a:	200b      	movs	r0, #11
 800dd2c:	4770      	bx	lr
 800dd2e:	bf00      	nop

0800dd30 <rclc_executor_handle_counters_zero_init>:
 800dd30:	b140      	cbz	r0, 800dd44 <rclc_executor_handle_counters_zero_init+0x14>
 800dd32:	2300      	movs	r3, #0
 800dd34:	6003      	str	r3, [r0, #0]
 800dd36:	6043      	str	r3, [r0, #4]
 800dd38:	6083      	str	r3, [r0, #8]
 800dd3a:	60c3      	str	r3, [r0, #12]
 800dd3c:	6103      	str	r3, [r0, #16]
 800dd3e:	6143      	str	r3, [r0, #20]
 800dd40:	4618      	mov	r0, r3
 800dd42:	4770      	bx	lr
 800dd44:	200b      	movs	r0, #11
 800dd46:	4770      	bx	lr

0800dd48 <rclc_executor_handle_init>:
 800dd48:	b178      	cbz	r0, 800dd6a <rclc_executor_handle_init+0x22>
 800dd4a:	b430      	push	{r4, r5}
 800dd4c:	4603      	mov	r3, r0
 800dd4e:	2209      	movs	r2, #9
 800dd50:	2000      	movs	r0, #0
 800dd52:	2400      	movs	r4, #0
 800dd54:	2500      	movs	r5, #0
 800dd56:	801a      	strh	r2, [r3, #0]
 800dd58:	e9c3 450a 	strd	r4, r5, [r3, #40]	@ 0x28
 800dd5c:	bc30      	pop	{r4, r5}
 800dd5e:	e9c3 0001 	strd	r0, r0, [r3, #4]
 800dd62:	6359      	str	r1, [r3, #52]	@ 0x34
 800dd64:	6318      	str	r0, [r3, #48]	@ 0x30
 800dd66:	8718      	strh	r0, [r3, #56]	@ 0x38
 800dd68:	4770      	bx	lr
 800dd6a:	200b      	movs	r0, #11
 800dd6c:	4770      	bx	lr
 800dd6e:	bf00      	nop

0800dd70 <rclc_support_init>:
 800dd70:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800dd74:	b086      	sub	sp, #24
 800dd76:	2800      	cmp	r0, #0
 800dd78:	d042      	beq.n	800de00 <rclc_support_init+0x90>
 800dd7a:	461c      	mov	r4, r3
 800dd7c:	2b00      	cmp	r3, #0
 800dd7e:	d03f      	beq.n	800de00 <rclc_support_init+0x90>
 800dd80:	460f      	mov	r7, r1
 800dd82:	4690      	mov	r8, r2
 800dd84:	4606      	mov	r6, r0
 800dd86:	f005 fde5 	bl	8013954 <rcl_get_zero_initialized_init_options>
 800dd8a:	4603      	mov	r3, r0
 800dd8c:	e9d4 0103 	ldrd	r0, r1, [r4, #12]
 800dd90:	e88d 0003 	stmia.w	sp, {r0, r1}
 800dd94:	9305      	str	r3, [sp, #20]
 800dd96:	a805      	add	r0, sp, #20
 800dd98:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 800dd9c:	f005 fddc 	bl	8013958 <rcl_init_options_init>
 800dda0:	4605      	mov	r5, r0
 800dda2:	bb38      	cbnz	r0, 800ddf4 <rclc_support_init+0x84>
 800dda4:	f005 fdd6 	bl	8013954 <rcl_get_zero_initialized_init_options>
 800dda8:	4631      	mov	r1, r6
 800ddaa:	6030      	str	r0, [r6, #0]
 800ddac:	a805      	add	r0, sp, #20
 800ddae:	f005 fe49 	bl	8013a44 <rcl_init_options_copy>
 800ddb2:	4605      	mov	r5, r0
 800ddb4:	b9c0      	cbnz	r0, 800dde8 <rclc_support_init+0x78>
 800ddb6:	ad02      	add	r5, sp, #8
 800ddb8:	4628      	mov	r0, r5
 800ddba:	f005 fae1 	bl	8013380 <rcl_get_zero_initialized_context>
 800ddbe:	e895 0003 	ldmia.w	r5, {r0, r1}
 800ddc2:	1d33      	adds	r3, r6, #4
 800ddc4:	e883 0003 	stmia.w	r3, {r0, r1}
 800ddc8:	4632      	mov	r2, r6
 800ddca:	4641      	mov	r1, r8
 800ddcc:	4638      	mov	r0, r7
 800ddce:	f005 fcb7 	bl	8013740 <rcl_init>
 800ddd2:	4605      	mov	r5, r0
 800ddd4:	b940      	cbnz	r0, 800dde8 <rclc_support_init+0x78>
 800ddd6:	60f4      	str	r4, [r6, #12]
 800ddd8:	4622      	mov	r2, r4
 800ddda:	f106 0110 	add.w	r1, r6, #16
 800ddde:	2003      	movs	r0, #3
 800dde0:	f006 fbae 	bl	8014540 <rcl_clock_init>
 800dde4:	4605      	mov	r5, r0
 800dde6:	b108      	cbz	r0, 800ddec <rclc_support_init+0x7c>
 800dde8:	f000 f94a 	bl	800e080 <rcutils_reset_error>
 800ddec:	a805      	add	r0, sp, #20
 800ddee:	f005 fe05 	bl	80139fc <rcl_init_options_fini>
 800ddf2:	b108      	cbz	r0, 800ddf8 <rclc_support_init+0x88>
 800ddf4:	f000 f944 	bl	800e080 <rcutils_reset_error>
 800ddf8:	4628      	mov	r0, r5
 800ddfa:	b006      	add	sp, #24
 800ddfc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800de00:	250b      	movs	r5, #11
 800de02:	4628      	mov	r0, r5
 800de04:	b006      	add	sp, #24
 800de06:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800de0a:	bf00      	nop

0800de0c <rclc_node_init_default>:
 800de0c:	b3b8      	cbz	r0, 800de7e <rclc_node_init_default+0x72>
 800de0e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800de12:	460d      	mov	r5, r1
 800de14:	b08f      	sub	sp, #60	@ 0x3c
 800de16:	b329      	cbz	r1, 800de64 <rclc_node_init_default+0x58>
 800de18:	4616      	mov	r6, r2
 800de1a:	b31a      	cbz	r2, 800de64 <rclc_node_init_default+0x58>
 800de1c:	461f      	mov	r7, r3
 800de1e:	b30b      	cbz	r3, 800de64 <rclc_node_init_default+0x58>
 800de20:	f10d 0810 	add.w	r8, sp, #16
 800de24:	4604      	mov	r4, r0
 800de26:	4640      	mov	r0, r8
 800de28:	f005 fed4 	bl	8013bd4 <rcl_get_zero_initialized_node>
 800de2c:	e898 0003 	ldmia.w	r8, {r0, r1}
 800de30:	f10d 091c 	add.w	r9, sp, #28
 800de34:	e884 0003 	stmia.w	r4, {r0, r1}
 800de38:	4648      	mov	r0, r9
 800de3a:	f006 f86d 	bl	8013f18 <rcl_node_get_default_options>
 800de3e:	4640      	mov	r0, r8
 800de40:	f005 fec8 	bl	8013bd4 <rcl_get_zero_initialized_node>
 800de44:	e898 0003 	ldmia.w	r8, {r0, r1}
 800de48:	1d3b      	adds	r3, r7, #4
 800de4a:	f8cd 9000 	str.w	r9, [sp]
 800de4e:	4632      	mov	r2, r6
 800de50:	e884 0003 	stmia.w	r4, {r0, r1}
 800de54:	4629      	mov	r1, r5
 800de56:	4620      	mov	r0, r4
 800de58:	f005 fec6 	bl	8013be8 <rcl_node_init>
 800de5c:	b930      	cbnz	r0, 800de6c <rclc_node_init_default+0x60>
 800de5e:	b00f      	add	sp, #60	@ 0x3c
 800de60:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800de64:	200b      	movs	r0, #11
 800de66:	b00f      	add	sp, #60	@ 0x3c
 800de68:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800de6c:	9003      	str	r0, [sp, #12]
 800de6e:	f000 f907 	bl	800e080 <rcutils_reset_error>
 800de72:	f000 f905 	bl	800e080 <rcutils_reset_error>
 800de76:	9803      	ldr	r0, [sp, #12]
 800de78:	b00f      	add	sp, #60	@ 0x3c
 800de7a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800de7e:	200b      	movs	r0, #11
 800de80:	4770      	bx	lr
 800de82:	bf00      	nop

0800de84 <rclc_publisher_init_default>:
 800de84:	b368      	cbz	r0, 800dee2 <rclc_publisher_init_default+0x5e>
 800de86:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800de8a:	460d      	mov	r5, r1
 800de8c:	b09e      	sub	sp, #120	@ 0x78
 800de8e:	b321      	cbz	r1, 800deda <rclc_publisher_init_default+0x56>
 800de90:	4616      	mov	r6, r2
 800de92:	b312      	cbz	r2, 800deda <rclc_publisher_init_default+0x56>
 800de94:	461f      	mov	r7, r3
 800de96:	b303      	cbz	r3, 800deda <rclc_publisher_init_default+0x56>
 800de98:	4604      	mov	r4, r0
 800de9a:	f7ff fa8d 	bl	800d3b8 <rcl_get_zero_initialized_publisher>
 800de9e:	f10d 0810 	add.w	r8, sp, #16
 800dea2:	6020      	str	r0, [r4, #0]
 800dea4:	4640      	mov	r0, r8
 800dea6:	f7ff fb83 	bl	800d5b0 <rcl_publisher_get_default_options>
 800deaa:	490f      	ldr	r1, [pc, #60]	@ (800dee8 <rclc_publisher_init_default+0x64>)
 800deac:	2250      	movs	r2, #80	@ 0x50
 800deae:	4640      	mov	r0, r8
 800deb0:	f00b ffc7 	bl	8019e42 <memcpy>
 800deb4:	f8cd 8000 	str.w	r8, [sp]
 800deb8:	463b      	mov	r3, r7
 800deba:	4632      	mov	r2, r6
 800debc:	4629      	mov	r1, r5
 800debe:	4620      	mov	r0, r4
 800dec0:	f7ff fa80 	bl	800d3c4 <rcl_publisher_init>
 800dec4:	b910      	cbnz	r0, 800decc <rclc_publisher_init_default+0x48>
 800dec6:	b01e      	add	sp, #120	@ 0x78
 800dec8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800decc:	9003      	str	r0, [sp, #12]
 800dece:	f000 f8d7 	bl	800e080 <rcutils_reset_error>
 800ded2:	9803      	ldr	r0, [sp, #12]
 800ded4:	b01e      	add	sp, #120	@ 0x78
 800ded6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800deda:	200b      	movs	r0, #11
 800dedc:	b01e      	add	sp, #120	@ 0x78
 800dede:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800dee2:	200b      	movs	r0, #11
 800dee4:	4770      	bx	lr
 800dee6:	bf00      	nop
 800dee8:	0801aea0 	.word	0x0801aea0

0800deec <rclc_subscription_init_default>:
 800deec:	b368      	cbz	r0, 800df4a <rclc_subscription_init_default+0x5e>
 800deee:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800def2:	460d      	mov	r5, r1
 800def4:	b0a0      	sub	sp, #128	@ 0x80
 800def6:	b321      	cbz	r1, 800df42 <rclc_subscription_init_default+0x56>
 800def8:	4616      	mov	r6, r2
 800defa:	b312      	cbz	r2, 800df42 <rclc_subscription_init_default+0x56>
 800defc:	461f      	mov	r7, r3
 800defe:	b303      	cbz	r3, 800df42 <rclc_subscription_init_default+0x56>
 800df00:	4604      	mov	r4, r0
 800df02:	f006 f98b 	bl	801421c <rcl_get_zero_initialized_subscription>
 800df06:	f10d 0810 	add.w	r8, sp, #16
 800df0a:	6020      	str	r0, [r4, #0]
 800df0c:	4640      	mov	r0, r8
 800df0e:	f006 fa81 	bl	8014414 <rcl_subscription_get_default_options>
 800df12:	490f      	ldr	r1, [pc, #60]	@ (800df50 <rclc_subscription_init_default+0x64>)
 800df14:	2250      	movs	r2, #80	@ 0x50
 800df16:	4640      	mov	r0, r8
 800df18:	f00b ff93 	bl	8019e42 <memcpy>
 800df1c:	f8cd 8000 	str.w	r8, [sp]
 800df20:	463b      	mov	r3, r7
 800df22:	4632      	mov	r2, r6
 800df24:	4629      	mov	r1, r5
 800df26:	4620      	mov	r0, r4
 800df28:	f006 f97e 	bl	8014228 <rcl_subscription_init>
 800df2c:	b910      	cbnz	r0, 800df34 <rclc_subscription_init_default+0x48>
 800df2e:	b020      	add	sp, #128	@ 0x80
 800df30:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800df34:	9003      	str	r0, [sp, #12]
 800df36:	f000 f8a3 	bl	800e080 <rcutils_reset_error>
 800df3a:	9803      	ldr	r0, [sp, #12]
 800df3c:	b020      	add	sp, #128	@ 0x80
 800df3e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800df42:	200b      	movs	r0, #11
 800df44:	b020      	add	sp, #128	@ 0x80
 800df46:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800df4a:	200b      	movs	r0, #11
 800df4c:	4770      	bx	lr
 800df4e:	bf00      	nop
 800df50:	0801aef0 	.word	0x0801aef0

0800df54 <rclc_timer_init_default>:
 800df54:	b348      	cbz	r0, 800dfaa <rclc_timer_init_default+0x56>
 800df56:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800df5a:	460c      	mov	r4, r1
 800df5c:	b08b      	sub	sp, #44	@ 0x2c
 800df5e:	b301      	cbz	r1, 800dfa2 <rclc_timer_init_default+0x4e>
 800df60:	4691      	mov	r9, r2
 800df62:	4698      	mov	r8, r3
 800df64:	4607      	mov	r7, r0
 800df66:	f006 fcd7 	bl	8014918 <rcl_get_zero_initialized_timer>
 800df6a:	68e6      	ldr	r6, [r4, #12]
 800df6c:	6038      	str	r0, [r7, #0]
 800df6e:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800df70:	ad03      	add	r5, sp, #12
 800df72:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800df74:	6833      	ldr	r3, [r6, #0]
 800df76:	602b      	str	r3, [r5, #0]
 800df78:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800df7a:	9302      	str	r3, [sp, #8]
 800df7c:	e9cd 9800 	strd	r9, r8, [sp]
 800df80:	4638      	mov	r0, r7
 800df82:	1d22      	adds	r2, r4, #4
 800df84:	f104 0110 	add.w	r1, r4, #16
 800df88:	f006 fccc 	bl	8014924 <rcl_timer_init>
 800df8c:	b910      	cbnz	r0, 800df94 <rclc_timer_init_default+0x40>
 800df8e:	b00b      	add	sp, #44	@ 0x2c
 800df90:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800df94:	9009      	str	r0, [sp, #36]	@ 0x24
 800df96:	f000 f873 	bl	800e080 <rcutils_reset_error>
 800df9a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800df9c:	b00b      	add	sp, #44	@ 0x2c
 800df9e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800dfa2:	200b      	movs	r0, #11
 800dfa4:	b00b      	add	sp, #44	@ 0x2c
 800dfa6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800dfaa:	200b      	movs	r0, #11
 800dfac:	4770      	bx	lr
 800dfae:	bf00      	nop

0800dfb0 <__default_zero_allocate>:
 800dfb0:	f00b ba4e 	b.w	8019450 <calloc>

0800dfb4 <__default_reallocate>:
 800dfb4:	f00b bbda 	b.w	801976c <realloc>

0800dfb8 <__default_deallocate>:
 800dfb8:	f00b bab6 	b.w	8019528 <free>

0800dfbc <__default_allocate>:
 800dfbc:	f00b baac 	b.w	8019518 <malloc>

0800dfc0 <rcutils_get_zero_initialized_allocator>:
 800dfc0:	b470      	push	{r4, r5, r6}
 800dfc2:	4d05      	ldr	r5, [pc, #20]	@ (800dfd8 <rcutils_get_zero_initialized_allocator+0x18>)
 800dfc4:	4606      	mov	r6, r0
 800dfc6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800dfc8:	4634      	mov	r4, r6
 800dfca:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800dfcc:	682b      	ldr	r3, [r5, #0]
 800dfce:	6023      	str	r3, [r4, #0]
 800dfd0:	4630      	mov	r0, r6
 800dfd2:	bc70      	pop	{r4, r5, r6}
 800dfd4:	4770      	bx	lr
 800dfd6:	bf00      	nop
 800dfd8:	0801af40 	.word	0x0801af40

0800dfdc <rcutils_set_default_allocator>:
 800dfdc:	b1a0      	cbz	r0, 800e008 <rcutils_set_default_allocator+0x2c>
 800dfde:	6801      	ldr	r1, [r0, #0]
 800dfe0:	b199      	cbz	r1, 800e00a <rcutils_set_default_allocator+0x2e>
 800dfe2:	b430      	push	{r4, r5}
 800dfe4:	6844      	ldr	r4, [r0, #4]
 800dfe6:	b194      	cbz	r4, 800e00e <rcutils_set_default_allocator+0x32>
 800dfe8:	68c5      	ldr	r5, [r0, #12]
 800dfea:	b15d      	cbz	r5, 800e004 <rcutils_set_default_allocator+0x28>
 800dfec:	6883      	ldr	r3, [r0, #8]
 800dfee:	b18b      	cbz	r3, 800e014 <rcutils_set_default_allocator+0x38>
 800dff0:	4a09      	ldr	r2, [pc, #36]	@ (800e018 <rcutils_set_default_allocator+0x3c>)
 800dff2:	e9c2 1400 	strd	r1, r4, [r2]
 800dff6:	e9c2 3502 	strd	r3, r5, [r2, #8]
 800dffa:	2000      	movs	r0, #0
 800dffc:	6110      	str	r0, [r2, #16]
 800dffe:	2001      	movs	r0, #1
 800e000:	bc30      	pop	{r4, r5}
 800e002:	4770      	bx	lr
 800e004:	4628      	mov	r0, r5
 800e006:	e7fb      	b.n	800e000 <rcutils_set_default_allocator+0x24>
 800e008:	4770      	bx	lr
 800e00a:	4608      	mov	r0, r1
 800e00c:	4770      	bx	lr
 800e00e:	4620      	mov	r0, r4
 800e010:	bc30      	pop	{r4, r5}
 800e012:	4770      	bx	lr
 800e014:	4618      	mov	r0, r3
 800e016:	e7f3      	b.n	800e000 <rcutils_set_default_allocator+0x24>
 800e018:	20000050 	.word	0x20000050

0800e01c <rcutils_get_default_allocator>:
 800e01c:	b470      	push	{r4, r5, r6}
 800e01e:	4d05      	ldr	r5, [pc, #20]	@ (800e034 <rcutils_get_default_allocator+0x18>)
 800e020:	4606      	mov	r6, r0
 800e022:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800e024:	4634      	mov	r4, r6
 800e026:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800e028:	682b      	ldr	r3, [r5, #0]
 800e02a:	6023      	str	r3, [r4, #0]
 800e02c:	4630      	mov	r0, r6
 800e02e:	bc70      	pop	{r4, r5, r6}
 800e030:	4770      	bx	lr
 800e032:	bf00      	nop
 800e034:	20000050 	.word	0x20000050

0800e038 <rcutils_allocator_is_valid>:
 800e038:	b158      	cbz	r0, 800e052 <rcutils_allocator_is_valid+0x1a>
 800e03a:	6803      	ldr	r3, [r0, #0]
 800e03c:	b143      	cbz	r3, 800e050 <rcutils_allocator_is_valid+0x18>
 800e03e:	6843      	ldr	r3, [r0, #4]
 800e040:	b133      	cbz	r3, 800e050 <rcutils_allocator_is_valid+0x18>
 800e042:	68c3      	ldr	r3, [r0, #12]
 800e044:	b123      	cbz	r3, 800e050 <rcutils_allocator_is_valid+0x18>
 800e046:	6880      	ldr	r0, [r0, #8]
 800e048:	3800      	subs	r0, #0
 800e04a:	bf18      	it	ne
 800e04c:	2001      	movne	r0, #1
 800e04e:	4770      	bx	lr
 800e050:	4618      	mov	r0, r3
 800e052:	4770      	bx	lr

0800e054 <rcutils_get_error_string>:
 800e054:	4b06      	ldr	r3, [pc, #24]	@ (800e070 <rcutils_get_error_string+0x1c>)
 800e056:	781b      	ldrb	r3, [r3, #0]
 800e058:	b13b      	cbz	r3, 800e06a <rcutils_get_error_string+0x16>
 800e05a:	4b06      	ldr	r3, [pc, #24]	@ (800e074 <rcutils_get_error_string+0x20>)
 800e05c:	781a      	ldrb	r2, [r3, #0]
 800e05e:	b90a      	cbnz	r2, 800e064 <rcutils_get_error_string+0x10>
 800e060:	2201      	movs	r2, #1
 800e062:	701a      	strb	r2, [r3, #0]
 800e064:	4b04      	ldr	r3, [pc, #16]	@ (800e078 <rcutils_get_error_string+0x24>)
 800e066:	7818      	ldrb	r0, [r3, #0]
 800e068:	4770      	bx	lr
 800e06a:	4b04      	ldr	r3, [pc, #16]	@ (800e07c <rcutils_get_error_string+0x28>)
 800e06c:	7818      	ldrb	r0, [r3, #0]
 800e06e:	4770      	bx	lr
 800e070:	20007568 	.word	0x20007568
 800e074:	20007569 	.word	0x20007569
 800e078:	20007840 	.word	0x20007840
 800e07c:	0801af54 	.word	0x0801af54

0800e080 <rcutils_reset_error>:
 800e080:	b4d0      	push	{r4, r6, r7}
 800e082:	4a07      	ldr	r2, [pc, #28]	@ (800e0a0 <rcutils_reset_error+0x20>)
 800e084:	4807      	ldr	r0, [pc, #28]	@ (800e0a4 <rcutils_reset_error+0x24>)
 800e086:	4c08      	ldr	r4, [pc, #32]	@ (800e0a8 <rcutils_reset_error+0x28>)
 800e088:	4908      	ldr	r1, [pc, #32]	@ (800e0ac <rcutils_reset_error+0x2c>)
 800e08a:	2300      	movs	r3, #0
 800e08c:	2600      	movs	r6, #0
 800e08e:	2700      	movs	r7, #0
 800e090:	8013      	strh	r3, [r2, #0]
 800e092:	7003      	strb	r3, [r0, #0]
 800e094:	e9c2 6702 	strd	r6, r7, [r2, #8]
 800e098:	7023      	strb	r3, [r4, #0]
 800e09a:	700b      	strb	r3, [r1, #0]
 800e09c:	bcd0      	pop	{r4, r6, r7}
 800e09e:	4770      	bx	lr
 800e0a0:	20007848 	.word	0x20007848
 800e0a4:	20007840 	.word	0x20007840
 800e0a8:	20007569 	.word	0x20007569
 800e0ac:	20007568 	.word	0x20007568

0800e0b0 <rcutils_get_zero_initialized_string_map>:
 800e0b0:	4b01      	ldr	r3, [pc, #4]	@ (800e0b8 <rcutils_get_zero_initialized_string_map+0x8>)
 800e0b2:	2000      	movs	r0, #0
 800e0b4:	6018      	str	r0, [r3, #0]
 800e0b6:	4770      	bx	lr
 800e0b8:	2000756c 	.word	0x2000756c

0800e0bc <rcutils_string_map_reserve>:
 800e0bc:	2800      	cmp	r0, #0
 800e0be:	d061      	beq.n	800e184 <rcutils_string_map_reserve+0xc8>
 800e0c0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800e0c4:	6805      	ldr	r5, [r0, #0]
 800e0c6:	b083      	sub	sp, #12
 800e0c8:	460c      	mov	r4, r1
 800e0ca:	4606      	mov	r6, r0
 800e0cc:	b12d      	cbz	r5, 800e0da <rcutils_string_map_reserve+0x1e>
 800e0ce:	68eb      	ldr	r3, [r5, #12]
 800e0d0:	42a3      	cmp	r3, r4
 800e0d2:	d906      	bls.n	800e0e2 <rcutils_string_map_reserve+0x26>
 800e0d4:	461c      	mov	r4, r3
 800e0d6:	2d00      	cmp	r5, #0
 800e0d8:	d1f9      	bne.n	800e0ce <rcutils_string_map_reserve+0x12>
 800e0da:	201f      	movs	r0, #31
 800e0dc:	b003      	add	sp, #12
 800e0de:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e0e2:	68ab      	ldr	r3, [r5, #8]
 800e0e4:	42a3      	cmp	r3, r4
 800e0e6:	d049      	beq.n	800e17c <rcutils_string_map_reserve+0xc0>
 800e0e8:	6a2f      	ldr	r7, [r5, #32]
 800e0ea:	2c00      	cmp	r4, #0
 800e0ec:	d035      	beq.n	800e15a <rcutils_string_map_reserve+0x9e>
 800e0ee:	f1b4 4f80 	cmp.w	r4, #1073741824	@ 0x40000000
 800e0f2:	d245      	bcs.n	800e180 <rcutils_string_map_reserve+0xc4>
 800e0f4:	ea4f 0884 	mov.w	r8, r4, lsl #2
 800e0f8:	f8d5 9018 	ldr.w	r9, [r5, #24]
 800e0fc:	6828      	ldr	r0, [r5, #0]
 800e0fe:	4641      	mov	r1, r8
 800e100:	463a      	mov	r2, r7
 800e102:	47c8      	blx	r9
 800e104:	2800      	cmp	r0, #0
 800e106:	d03b      	beq.n	800e180 <rcutils_string_map_reserve+0xc4>
 800e108:	6833      	ldr	r3, [r6, #0]
 800e10a:	463a      	mov	r2, r7
 800e10c:	6018      	str	r0, [r3, #0]
 800e10e:	4641      	mov	r1, r8
 800e110:	6858      	ldr	r0, [r3, #4]
 800e112:	47c8      	blx	r9
 800e114:	2800      	cmp	r0, #0
 800e116:	d033      	beq.n	800e180 <rcutils_string_map_reserve+0xc4>
 800e118:	6835      	ldr	r5, [r6, #0]
 800e11a:	68ab      	ldr	r3, [r5, #8]
 800e11c:	6068      	str	r0, [r5, #4]
 800e11e:	42a3      	cmp	r3, r4
 800e120:	d227      	bcs.n	800e172 <rcutils_string_map_reserve+0xb6>
 800e122:	682a      	ldr	r2, [r5, #0]
 800e124:	eb00 0108 	add.w	r1, r0, r8
 800e128:	eb02 0783 	add.w	r7, r2, r3, lsl #2
 800e12c:	428f      	cmp	r7, r1
 800e12e:	ea4f 0c83 	mov.w	ip, r3, lsl #2
 800e132:	eb00 0683 	add.w	r6, r0, r3, lsl #2
 800e136:	d203      	bcs.n	800e140 <rcutils_string_map_reserve+0x84>
 800e138:	eb02 0108 	add.w	r1, r2, r8
 800e13c:	428e      	cmp	r6, r1
 800e13e:	d323      	bcc.n	800e188 <rcutils_string_map_reserve+0xcc>
 800e140:	1ae3      	subs	r3, r4, r3
 800e142:	009a      	lsls	r2, r3, #2
 800e144:	4638      	mov	r0, r7
 800e146:	2100      	movs	r1, #0
 800e148:	9201      	str	r2, [sp, #4]
 800e14a:	f00b fd5b 	bl	8019c04 <memset>
 800e14e:	9a01      	ldr	r2, [sp, #4]
 800e150:	4630      	mov	r0, r6
 800e152:	2100      	movs	r1, #0
 800e154:	f00b fd56 	bl	8019c04 <memset>
 800e158:	e00b      	b.n	800e172 <rcutils_string_map_reserve+0xb6>
 800e15a:	f8d5 8014 	ldr.w	r8, [r5, #20]
 800e15e:	6828      	ldr	r0, [r5, #0]
 800e160:	4639      	mov	r1, r7
 800e162:	47c0      	blx	r8
 800e164:	6833      	ldr	r3, [r6, #0]
 800e166:	4639      	mov	r1, r7
 800e168:	6858      	ldr	r0, [r3, #4]
 800e16a:	601c      	str	r4, [r3, #0]
 800e16c:	47c0      	blx	r8
 800e16e:	6835      	ldr	r5, [r6, #0]
 800e170:	606c      	str	r4, [r5, #4]
 800e172:	2000      	movs	r0, #0
 800e174:	60ac      	str	r4, [r5, #8]
 800e176:	b003      	add	sp, #12
 800e178:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e17c:	2000      	movs	r0, #0
 800e17e:	e7ad      	b.n	800e0dc <rcutils_string_map_reserve+0x20>
 800e180:	200a      	movs	r0, #10
 800e182:	e7ab      	b.n	800e0dc <rcutils_string_map_reserve+0x20>
 800e184:	200b      	movs	r0, #11
 800e186:	4770      	bx	lr
 800e188:	1f13      	subs	r3, r2, #4
 800e18a:	f1ac 0c04 	sub.w	ip, ip, #4
 800e18e:	4498      	add	r8, r3
 800e190:	4460      	add	r0, ip
 800e192:	4462      	add	r2, ip
 800e194:	2300      	movs	r3, #0
 800e196:	f842 3f04 	str.w	r3, [r2, #4]!
 800e19a:	4542      	cmp	r2, r8
 800e19c:	f840 3f04 	str.w	r3, [r0, #4]!
 800e1a0:	d1f9      	bne.n	800e196 <rcutils_string_map_reserve+0xda>
 800e1a2:	e7e6      	b.n	800e172 <rcutils_string_map_reserve+0xb6>

0800e1a4 <rcutils_string_map_init>:
 800e1a4:	b082      	sub	sp, #8
 800e1a6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e1a8:	460e      	mov	r6, r1
 800e1aa:	a906      	add	r1, sp, #24
 800e1ac:	e881 000c 	stmia.w	r1, {r2, r3}
 800e1b0:	b380      	cbz	r0, 800e214 <rcutils_string_map_init+0x70>
 800e1b2:	6807      	ldr	r7, [r0, #0]
 800e1b4:	4604      	mov	r4, r0
 800e1b6:	b12f      	cbz	r7, 800e1c4 <rcutils_string_map_init+0x20>
 800e1b8:	251e      	movs	r5, #30
 800e1ba:	4628      	mov	r0, r5
 800e1bc:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800e1c0:	b002      	add	sp, #8
 800e1c2:	4770      	bx	lr
 800e1c4:	a806      	add	r0, sp, #24
 800e1c6:	f7ff ff37 	bl	800e038 <rcutils_allocator_is_valid>
 800e1ca:	b318      	cbz	r0, 800e214 <rcutils_string_map_init+0x70>
 800e1cc:	9b06      	ldr	r3, [sp, #24]
 800e1ce:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800e1d0:	2024      	movs	r0, #36	@ 0x24
 800e1d2:	4798      	blx	r3
 800e1d4:	4605      	mov	r5, r0
 800e1d6:	6020      	str	r0, [r4, #0]
 800e1d8:	b310      	cbz	r0, 800e220 <rcutils_string_map_init+0x7c>
 800e1da:	f10d 0e18 	add.w	lr, sp, #24
 800e1de:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800e1e2:	f105 0c10 	add.w	ip, r5, #16
 800e1e6:	e9c5 7700 	strd	r7, r7, [r5]
 800e1ea:	e9c5 7702 	strd	r7, r7, [r5, #8]
 800e1ee:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800e1f2:	f8de 3000 	ldr.w	r3, [lr]
 800e1f6:	f8cc 3000 	str.w	r3, [ip]
 800e1fa:	4631      	mov	r1, r6
 800e1fc:	4620      	mov	r0, r4
 800e1fe:	f7ff ff5d 	bl	800e0bc <rcutils_string_map_reserve>
 800e202:	4605      	mov	r5, r0
 800e204:	2800      	cmp	r0, #0
 800e206:	d0d8      	beq.n	800e1ba <rcutils_string_map_init+0x16>
 800e208:	9b07      	ldr	r3, [sp, #28]
 800e20a:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800e20c:	6820      	ldr	r0, [r4, #0]
 800e20e:	4798      	blx	r3
 800e210:	6027      	str	r7, [r4, #0]
 800e212:	e7d2      	b.n	800e1ba <rcutils_string_map_init+0x16>
 800e214:	250b      	movs	r5, #11
 800e216:	4628      	mov	r0, r5
 800e218:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800e21c:	b002      	add	sp, #8
 800e21e:	4770      	bx	lr
 800e220:	250a      	movs	r5, #10
 800e222:	e7ca      	b.n	800e1ba <rcutils_string_map_init+0x16>

0800e224 <rcutils_string_map_fini>:
 800e224:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e228:	b082      	sub	sp, #8
 800e22a:	2800      	cmp	r0, #0
 800e22c:	d039      	beq.n	800e2a2 <rcutils_string_map_fini+0x7e>
 800e22e:	6804      	ldr	r4, [r0, #0]
 800e230:	4606      	mov	r6, r0
 800e232:	2c00      	cmp	r4, #0
 800e234:	d031      	beq.n	800e29a <rcutils_string_map_fini+0x76>
 800e236:	68a3      	ldr	r3, [r4, #8]
 800e238:	b323      	cbz	r3, 800e284 <rcutils_string_map_fini+0x60>
 800e23a:	2500      	movs	r5, #0
 800e23c:	6822      	ldr	r2, [r4, #0]
 800e23e:	46a8      	mov	r8, r5
 800e240:	f852 0025 	ldr.w	r0, [r2, r5, lsl #2]
 800e244:	b1d8      	cbz	r0, 800e27e <rcutils_string_map_fini+0x5a>
 800e246:	6a21      	ldr	r1, [r4, #32]
 800e248:	6967      	ldr	r7, [r4, #20]
 800e24a:	9101      	str	r1, [sp, #4]
 800e24c:	47b8      	blx	r7
 800e24e:	e9d4 2300 	ldrd	r2, r3, [r4]
 800e252:	f842 8025 	str.w	r8, [r2, r5, lsl #2]
 800e256:	9901      	ldr	r1, [sp, #4]
 800e258:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800e25c:	47b8      	blx	r7
 800e25e:	68e3      	ldr	r3, [r4, #12]
 800e260:	6862      	ldr	r2, [r4, #4]
 800e262:	3b01      	subs	r3, #1
 800e264:	f842 8025 	str.w	r8, [r2, r5, lsl #2]
 800e268:	60e3      	str	r3, [r4, #12]
 800e26a:	6834      	ldr	r4, [r6, #0]
 800e26c:	68a3      	ldr	r3, [r4, #8]
 800e26e:	3501      	adds	r5, #1
 800e270:	429d      	cmp	r5, r3
 800e272:	d207      	bcs.n	800e284 <rcutils_string_map_fini+0x60>
 800e274:	6822      	ldr	r2, [r4, #0]
 800e276:	f852 0025 	ldr.w	r0, [r2, r5, lsl #2]
 800e27a:	2800      	cmp	r0, #0
 800e27c:	d1e3      	bne.n	800e246 <rcutils_string_map_fini+0x22>
 800e27e:	3501      	adds	r5, #1
 800e280:	429d      	cmp	r5, r3
 800e282:	d3dd      	bcc.n	800e240 <rcutils_string_map_fini+0x1c>
 800e284:	2100      	movs	r1, #0
 800e286:	4630      	mov	r0, r6
 800e288:	f7ff ff18 	bl	800e0bc <rcutils_string_map_reserve>
 800e28c:	4604      	mov	r4, r0
 800e28e:	b920      	cbnz	r0, 800e29a <rcutils_string_map_fini+0x76>
 800e290:	6830      	ldr	r0, [r6, #0]
 800e292:	6943      	ldr	r3, [r0, #20]
 800e294:	6a01      	ldr	r1, [r0, #32]
 800e296:	4798      	blx	r3
 800e298:	6034      	str	r4, [r6, #0]
 800e29a:	4620      	mov	r0, r4
 800e29c:	b002      	add	sp, #8
 800e29e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e2a2:	240b      	movs	r4, #11
 800e2a4:	4620      	mov	r0, r4
 800e2a6:	b002      	add	sp, #8
 800e2a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800e2ac <rcutils_string_map_getn>:
 800e2ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e2b0:	b082      	sub	sp, #8
 800e2b2:	b308      	cbz	r0, 800e2f8 <rcutils_string_map_getn+0x4c>
 800e2b4:	6804      	ldr	r4, [r0, #0]
 800e2b6:	b304      	cbz	r4, 800e2fa <rcutils_string_map_getn+0x4e>
 800e2b8:	460d      	mov	r5, r1
 800e2ba:	b1e9      	cbz	r1, 800e2f8 <rcutils_string_map_getn+0x4c>
 800e2bc:	f8d4 9008 	ldr.w	r9, [r4, #8]
 800e2c0:	6827      	ldr	r7, [r4, #0]
 800e2c2:	f1b9 0f00 	cmp.w	r9, #0
 800e2c6:	d017      	beq.n	800e2f8 <rcutils_string_map_getn+0x4c>
 800e2c8:	4690      	mov	r8, r2
 800e2ca:	3f04      	subs	r7, #4
 800e2cc:	2600      	movs	r6, #0
 800e2ce:	f857 1f04 	ldr.w	r1, [r7, #4]!
 800e2d2:	9101      	str	r1, [sp, #4]
 800e2d4:	ea4f 0a86 	mov.w	sl, r6, lsl #2
 800e2d8:	4608      	mov	r0, r1
 800e2da:	3601      	adds	r6, #1
 800e2dc:	b151      	cbz	r1, 800e2f4 <rcutils_string_map_getn+0x48>
 800e2de:	f7f1 ff81 	bl	80001e4 <strlen>
 800e2e2:	4540      	cmp	r0, r8
 800e2e4:	4602      	mov	r2, r0
 800e2e6:	9901      	ldr	r1, [sp, #4]
 800e2e8:	bf38      	it	cc
 800e2ea:	4642      	movcc	r2, r8
 800e2ec:	4628      	mov	r0, r5
 800e2ee:	f00b fc9e 	bl	8019c2e <strncmp>
 800e2f2:	b130      	cbz	r0, 800e302 <rcutils_string_map_getn+0x56>
 800e2f4:	45b1      	cmp	r9, r6
 800e2f6:	d1ea      	bne.n	800e2ce <rcutils_string_map_getn+0x22>
 800e2f8:	2400      	movs	r4, #0
 800e2fa:	4620      	mov	r0, r4
 800e2fc:	b002      	add	sp, #8
 800e2fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e302:	6863      	ldr	r3, [r4, #4]
 800e304:	f853 400a 	ldr.w	r4, [r3, sl]
 800e308:	4620      	mov	r0, r4
 800e30a:	b002      	add	sp, #8
 800e30c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0800e310 <rcutils_system_time_now>:
 800e310:	b310      	cbz	r0, 800e358 <rcutils_system_time_now+0x48>
 800e312:	b570      	push	{r4, r5, r6, lr}
 800e314:	b084      	sub	sp, #16
 800e316:	4669      	mov	r1, sp
 800e318:	4604      	mov	r4, r0
 800e31a:	2001      	movs	r0, #1
 800e31c:	f7f4 f8e0 	bl	80024e0 <clock_gettime>
 800e320:	e9dd 0100 	ldrd	r0, r1, [sp]
 800e324:	2800      	cmp	r0, #0
 800e326:	f171 0300 	sbcs.w	r3, r1, #0
 800e32a:	db12      	blt.n	800e352 <rcutils_system_time_now+0x42>
 800e32c:	9d02      	ldr	r5, [sp, #8]
 800e32e:	2d00      	cmp	r5, #0
 800e330:	db0c      	blt.n	800e34c <rcutils_system_time_now+0x3c>
 800e332:	4e0a      	ldr	r6, [pc, #40]	@ (800e35c <rcutils_system_time_now+0x4c>)
 800e334:	fba0 2306 	umull	r2, r3, r0, r6
 800e338:	1952      	adds	r2, r2, r5
 800e33a:	fb06 3301 	mla	r3, r6, r1, r3
 800e33e:	eb43 73e5 	adc.w	r3, r3, r5, asr #31
 800e342:	2000      	movs	r0, #0
 800e344:	e9c4 2300 	strd	r2, r3, [r4]
 800e348:	b004      	add	sp, #16
 800e34a:	bd70      	pop	{r4, r5, r6, pc}
 800e34c:	ea50 0301 	orrs.w	r3, r0, r1
 800e350:	d1ef      	bne.n	800e332 <rcutils_system_time_now+0x22>
 800e352:	2002      	movs	r0, #2
 800e354:	b004      	add	sp, #16
 800e356:	bd70      	pop	{r4, r5, r6, pc}
 800e358:	200b      	movs	r0, #11
 800e35a:	4770      	bx	lr
 800e35c:	3b9aca00 	.word	0x3b9aca00

0800e360 <rcutils_steady_time_now>:
 800e360:	b310      	cbz	r0, 800e3a8 <rcutils_steady_time_now+0x48>
 800e362:	b570      	push	{r4, r5, r6, lr}
 800e364:	b084      	sub	sp, #16
 800e366:	4669      	mov	r1, sp
 800e368:	4604      	mov	r4, r0
 800e36a:	2000      	movs	r0, #0
 800e36c:	f7f4 f8b8 	bl	80024e0 <clock_gettime>
 800e370:	e9dd 0100 	ldrd	r0, r1, [sp]
 800e374:	2800      	cmp	r0, #0
 800e376:	f171 0300 	sbcs.w	r3, r1, #0
 800e37a:	db12      	blt.n	800e3a2 <rcutils_steady_time_now+0x42>
 800e37c:	9d02      	ldr	r5, [sp, #8]
 800e37e:	2d00      	cmp	r5, #0
 800e380:	db0c      	blt.n	800e39c <rcutils_steady_time_now+0x3c>
 800e382:	4e0a      	ldr	r6, [pc, #40]	@ (800e3ac <rcutils_steady_time_now+0x4c>)
 800e384:	fba0 2306 	umull	r2, r3, r0, r6
 800e388:	1952      	adds	r2, r2, r5
 800e38a:	fb06 3301 	mla	r3, r6, r1, r3
 800e38e:	eb43 73e5 	adc.w	r3, r3, r5, asr #31
 800e392:	2000      	movs	r0, #0
 800e394:	e9c4 2300 	strd	r2, r3, [r4]
 800e398:	b004      	add	sp, #16
 800e39a:	bd70      	pop	{r4, r5, r6, pc}
 800e39c:	ea50 0301 	orrs.w	r3, r0, r1
 800e3a0:	d1ef      	bne.n	800e382 <rcutils_steady_time_now+0x22>
 800e3a2:	2002      	movs	r0, #2
 800e3a4:	b004      	add	sp, #16
 800e3a6:	bd70      	pop	{r4, r5, r6, pc}
 800e3a8:	200b      	movs	r0, #11
 800e3aa:	4770      	bx	lr
 800e3ac:	3b9aca00 	.word	0x3b9aca00

0800e3b0 <rmw_get_default_publisher_options>:
 800e3b0:	2000      	movs	r0, #0
 800e3b2:	4770      	bx	lr

0800e3b4 <rmw_validate_full_topic_name>:
 800e3b4:	2800      	cmp	r0, #0
 800e3b6:	d062      	beq.n	800e47e <rmw_validate_full_topic_name+0xca>
 800e3b8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e3bc:	460d      	mov	r5, r1
 800e3be:	2900      	cmp	r1, #0
 800e3c0:	d05f      	beq.n	800e482 <rmw_validate_full_topic_name+0xce>
 800e3c2:	4616      	mov	r6, r2
 800e3c4:	4604      	mov	r4, r0
 800e3c6:	f7f1 ff0d 	bl	80001e4 <strlen>
 800e3ca:	b148      	cbz	r0, 800e3e0 <rmw_validate_full_topic_name+0x2c>
 800e3cc:	7823      	ldrb	r3, [r4, #0]
 800e3ce:	2b2f      	cmp	r3, #47	@ 0x2f
 800e3d0:	d00d      	beq.n	800e3ee <rmw_validate_full_topic_name+0x3a>
 800e3d2:	2302      	movs	r3, #2
 800e3d4:	602b      	str	r3, [r5, #0]
 800e3d6:	b13e      	cbz	r6, 800e3e8 <rmw_validate_full_topic_name+0x34>
 800e3d8:	2000      	movs	r0, #0
 800e3da:	6030      	str	r0, [r6, #0]
 800e3dc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e3e0:	2301      	movs	r3, #1
 800e3e2:	602b      	str	r3, [r5, #0]
 800e3e4:	2e00      	cmp	r6, #0
 800e3e6:	d1f7      	bne.n	800e3d8 <rmw_validate_full_topic_name+0x24>
 800e3e8:	2000      	movs	r0, #0
 800e3ea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e3ee:	1e47      	subs	r7, r0, #1
 800e3f0:	5de3      	ldrb	r3, [r4, r7]
 800e3f2:	2b2f      	cmp	r3, #47	@ 0x2f
 800e3f4:	d047      	beq.n	800e486 <rmw_validate_full_topic_name+0xd2>
 800e3f6:	1e63      	subs	r3, r4, #1
 800e3f8:	eb03 0900 	add.w	r9, r3, r0
 800e3fc:	f1c4 0e01 	rsb	lr, r4, #1
 800e400:	eb0e 0803 	add.w	r8, lr, r3
 800e404:	f813 1f01 	ldrb.w	r1, [r3, #1]!
 800e408:	f021 0220 	bic.w	r2, r1, #32
 800e40c:	3a41      	subs	r2, #65	@ 0x41
 800e40e:	2a19      	cmp	r2, #25
 800e410:	f1a1 0c2f 	sub.w	ip, r1, #47	@ 0x2f
 800e414:	d90c      	bls.n	800e430 <rmw_validate_full_topic_name+0x7c>
 800e416:	295f      	cmp	r1, #95	@ 0x5f
 800e418:	d00a      	beq.n	800e430 <rmw_validate_full_topic_name+0x7c>
 800e41a:	f1bc 0f0a 	cmp.w	ip, #10
 800e41e:	d907      	bls.n	800e430 <rmw_validate_full_topic_name+0x7c>
 800e420:	2304      	movs	r3, #4
 800e422:	602b      	str	r3, [r5, #0]
 800e424:	2e00      	cmp	r6, #0
 800e426:	d0df      	beq.n	800e3e8 <rmw_validate_full_topic_name+0x34>
 800e428:	f8c6 8000 	str.w	r8, [r6]
 800e42c:	2000      	movs	r0, #0
 800e42e:	e7d5      	b.n	800e3dc <rmw_validate_full_topic_name+0x28>
 800e430:	454b      	cmp	r3, r9
 800e432:	d1e5      	bne.n	800e400 <rmw_validate_full_topic_name+0x4c>
 800e434:	f8df e084 	ldr.w	lr, [pc, #132]	@ 800e4bc <rmw_validate_full_topic_name+0x108>
 800e438:	2300      	movs	r3, #0
 800e43a:	f107 0801 	add.w	r8, r7, #1
 800e43e:	e005      	b.n	800e44c <rmw_validate_full_topic_name+0x98>
 800e440:	4611      	mov	r1, r2
 800e442:	4288      	cmp	r0, r1
 800e444:	4613      	mov	r3, r2
 800e446:	f104 0401 	add.w	r4, r4, #1
 800e44a:	d925      	bls.n	800e498 <rmw_validate_full_topic_name+0xe4>
 800e44c:	429f      	cmp	r7, r3
 800e44e:	f103 0201 	add.w	r2, r3, #1
 800e452:	d01e      	beq.n	800e492 <rmw_validate_full_topic_name+0xde>
 800e454:	7821      	ldrb	r1, [r4, #0]
 800e456:	292f      	cmp	r1, #47	@ 0x2f
 800e458:	d1f2      	bne.n	800e440 <rmw_validate_full_topic_name+0x8c>
 800e45a:	f894 c001 	ldrb.w	ip, [r4, #1]
 800e45e:	1c5a      	adds	r2, r3, #1
 800e460:	f1bc 0f2f 	cmp.w	ip, #47	@ 0x2f
 800e464:	4611      	mov	r1, r2
 800e466:	d024      	beq.n	800e4b2 <rmw_validate_full_topic_name+0xfe>
 800e468:	f81c 300e 	ldrb.w	r3, [ip, lr]
 800e46c:	075b      	lsls	r3, r3, #29
 800e46e:	d5e8      	bpl.n	800e442 <rmw_validate_full_topic_name+0x8e>
 800e470:	2306      	movs	r3, #6
 800e472:	602b      	str	r3, [r5, #0]
 800e474:	2e00      	cmp	r6, #0
 800e476:	d0b7      	beq.n	800e3e8 <rmw_validate_full_topic_name+0x34>
 800e478:	6032      	str	r2, [r6, #0]
 800e47a:	2000      	movs	r0, #0
 800e47c:	e7ae      	b.n	800e3dc <rmw_validate_full_topic_name+0x28>
 800e47e:	200b      	movs	r0, #11
 800e480:	4770      	bx	lr
 800e482:	200b      	movs	r0, #11
 800e484:	e7aa      	b.n	800e3dc <rmw_validate_full_topic_name+0x28>
 800e486:	2303      	movs	r3, #3
 800e488:	602b      	str	r3, [r5, #0]
 800e48a:	2e00      	cmp	r6, #0
 800e48c:	d0ac      	beq.n	800e3e8 <rmw_validate_full_topic_name+0x34>
 800e48e:	6037      	str	r7, [r6, #0]
 800e490:	e7aa      	b.n	800e3e8 <rmw_validate_full_topic_name+0x34>
 800e492:	4641      	mov	r1, r8
 800e494:	1c7a      	adds	r2, r7, #1
 800e496:	e7d4      	b.n	800e442 <rmw_validate_full_topic_name+0x8e>
 800e498:	28f7      	cmp	r0, #247	@ 0xf7
 800e49a:	d802      	bhi.n	800e4a2 <rmw_validate_full_topic_name+0xee>
 800e49c:	2000      	movs	r0, #0
 800e49e:	6028      	str	r0, [r5, #0]
 800e4a0:	e79c      	b.n	800e3dc <rmw_validate_full_topic_name+0x28>
 800e4a2:	2307      	movs	r3, #7
 800e4a4:	602b      	str	r3, [r5, #0]
 800e4a6:	2e00      	cmp	r6, #0
 800e4a8:	d09e      	beq.n	800e3e8 <rmw_validate_full_topic_name+0x34>
 800e4aa:	23f6      	movs	r3, #246	@ 0xf6
 800e4ac:	6033      	str	r3, [r6, #0]
 800e4ae:	2000      	movs	r0, #0
 800e4b0:	e794      	b.n	800e3dc <rmw_validate_full_topic_name+0x28>
 800e4b2:	2305      	movs	r3, #5
 800e4b4:	602b      	str	r3, [r5, #0]
 800e4b6:	2e00      	cmp	r6, #0
 800e4b8:	d1de      	bne.n	800e478 <rmw_validate_full_topic_name+0xc4>
 800e4ba:	e795      	b.n	800e3e8 <rmw_validate_full_topic_name+0x34>
 800e4bc:	0801b7b0 	.word	0x0801b7b0

0800e4c0 <rmw_uros_set_custom_transport>:
 800e4c0:	b470      	push	{r4, r5, r6}
 800e4c2:	e9dd 5603 	ldrd	r5, r6, [sp, #12]
 800e4c6:	b162      	cbz	r2, 800e4e2 <rmw_uros_set_custom_transport+0x22>
 800e4c8:	b15b      	cbz	r3, 800e4e2 <rmw_uros_set_custom_transport+0x22>
 800e4ca:	b155      	cbz	r5, 800e4e2 <rmw_uros_set_custom_transport+0x22>
 800e4cc:	b14e      	cbz	r6, 800e4e2 <rmw_uros_set_custom_transport+0x22>
 800e4ce:	4c06      	ldr	r4, [pc, #24]	@ (800e4e8 <rmw_uros_set_custom_transport+0x28>)
 800e4d0:	7020      	strb	r0, [r4, #0]
 800e4d2:	e9c4 1201 	strd	r1, r2, [r4, #4]
 800e4d6:	e9c4 3503 	strd	r3, r5, [r4, #12]
 800e4da:	6166      	str	r6, [r4, #20]
 800e4dc:	2000      	movs	r0, #0
 800e4de:	bc70      	pop	{r4, r5, r6}
 800e4e0:	4770      	bx	lr
 800e4e2:	200b      	movs	r0, #11
 800e4e4:	bc70      	pop	{r4, r5, r6}
 800e4e6:	4770      	bx	lr
 800e4e8:	20007858 	.word	0x20007858

0800e4ec <flush_session>:
 800e4ec:	6fc9      	ldr	r1, [r1, #124]	@ 0x7c
 800e4ee:	f002 bf7b 	b.w	80113e8 <uxr_run_session_until_confirm_delivery>
 800e4f2:	bf00      	nop

0800e4f4 <rmw_publish>:
 800e4f4:	2800      	cmp	r0, #0
 800e4f6:	d053      	beq.n	800e5a0 <rmw_publish+0xac>
 800e4f8:	b570      	push	{r4, r5, r6, lr}
 800e4fa:	460d      	mov	r5, r1
 800e4fc:	b08e      	sub	sp, #56	@ 0x38
 800e4fe:	2900      	cmp	r1, #0
 800e500:	d04b      	beq.n	800e59a <rmw_publish+0xa6>
 800e502:	4604      	mov	r4, r0
 800e504:	6800      	ldr	r0, [r0, #0]
 800e506:	f000 fca7 	bl	800ee58 <is_uxrce_rmw_identifier_valid>
 800e50a:	2800      	cmp	r0, #0
 800e50c:	d045      	beq.n	800e59a <rmw_publish+0xa6>
 800e50e:	6866      	ldr	r6, [r4, #4]
 800e510:	2e00      	cmp	r6, #0
 800e512:	d042      	beq.n	800e59a <rmw_publish+0xa6>
 800e514:	69b4      	ldr	r4, [r6, #24]
 800e516:	4628      	mov	r0, r5
 800e518:	6923      	ldr	r3, [r4, #16]
 800e51a:	4798      	blx	r3
 800e51c:	69f3      	ldr	r3, [r6, #28]
 800e51e:	9005      	str	r0, [sp, #20]
 800e520:	b113      	cbz	r3, 800e528 <rmw_publish+0x34>
 800e522:	a805      	add	r0, sp, #20
 800e524:	4798      	blx	r3
 800e526:	9805      	ldr	r0, [sp, #20]
 800e528:	f8d6 3080 	ldr.w	r3, [r6, #128]	@ 0x80
 800e52c:	691b      	ldr	r3, [r3, #16]
 800e52e:	9000      	str	r0, [sp, #0]
 800e530:	6972      	ldr	r2, [r6, #20]
 800e532:	6fb1      	ldr	r1, [r6, #120]	@ 0x78
 800e534:	f503 7028 	add.w	r0, r3, #672	@ 0x2a0
 800e538:	ab06      	add	r3, sp, #24
 800e53a:	f003 fd5d 	bl	8011ff8 <uxr_prepare_output_stream>
 800e53e:	b1d8      	cbz	r0, 800e578 <rmw_publish+0x84>
 800e540:	68a3      	ldr	r3, [r4, #8]
 800e542:	4628      	mov	r0, r5
 800e544:	a906      	add	r1, sp, #24
 800e546:	4798      	blx	r3
 800e548:	6a33      	ldr	r3, [r6, #32]
 800e54a:	4604      	mov	r4, r0
 800e54c:	b10b      	cbz	r3, 800e552 <rmw_publish+0x5e>
 800e54e:	a806      	add	r0, sp, #24
 800e550:	4798      	blx	r3
 800e552:	f896 307a 	ldrb.w	r3, [r6, #122]	@ 0x7a
 800e556:	2b01      	cmp	r3, #1
 800e558:	f8d6 3080 	ldr.w	r3, [r6, #128]	@ 0x80
 800e55c:	d022      	beq.n	800e5a4 <rmw_publish+0xb0>
 800e55e:	6918      	ldr	r0, [r3, #16]
 800e560:	6ff1      	ldr	r1, [r6, #124]	@ 0x7c
 800e562:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800e566:	f002 ff3f 	bl	80113e8 <uxr_run_session_until_confirm_delivery>
 800e56a:	4020      	ands	r0, r4
 800e56c:	b2c4      	uxtb	r4, r0
 800e56e:	f084 0001 	eor.w	r0, r4, #1
 800e572:	b2c0      	uxtb	r0, r0
 800e574:	b00e      	add	sp, #56	@ 0x38
 800e576:	bd70      	pop	{r4, r5, r6, pc}
 800e578:	f8d6 3080 	ldr.w	r3, [r6, #128]	@ 0x80
 800e57c:	4a0c      	ldr	r2, [pc, #48]	@ (800e5b0 <rmw_publish+0xbc>)
 800e57e:	6918      	ldr	r0, [r3, #16]
 800e580:	9b05      	ldr	r3, [sp, #20]
 800e582:	9300      	str	r3, [sp, #0]
 800e584:	e9cd 2601 	strd	r2, r6, [sp, #4]
 800e588:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800e58c:	6972      	ldr	r2, [r6, #20]
 800e58e:	6fb1      	ldr	r1, [r6, #120]	@ 0x78
 800e590:	ab06      	add	r3, sp, #24
 800e592:	f003 fd61 	bl	8012058 <uxr_prepare_output_stream_fragmented>
 800e596:	2800      	cmp	r0, #0
 800e598:	d1d2      	bne.n	800e540 <rmw_publish+0x4c>
 800e59a:	2001      	movs	r0, #1
 800e59c:	b00e      	add	sp, #56	@ 0x38
 800e59e:	bd70      	pop	{r4, r5, r6, pc}
 800e5a0:	2001      	movs	r0, #1
 800e5a2:	4770      	bx	lr
 800e5a4:	6918      	ldr	r0, [r3, #16]
 800e5a6:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800e5aa:	f002 fb61 	bl	8010c70 <uxr_flash_output_streams>
 800e5ae:	e7de      	b.n	800e56e <rmw_publish+0x7a>
 800e5b0:	0800e4ed 	.word	0x0800e4ed

0800e5b4 <rmw_create_publisher>:
 800e5b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e5b8:	b087      	sub	sp, #28
 800e5ba:	2800      	cmp	r0, #0
 800e5bc:	f000 80c9 	beq.w	800e752 <rmw_create_publisher+0x19e>
 800e5c0:	460e      	mov	r6, r1
 800e5c2:	2900      	cmp	r1, #0
 800e5c4:	f000 80c5 	beq.w	800e752 <rmw_create_publisher+0x19e>
 800e5c8:	4604      	mov	r4, r0
 800e5ca:	6800      	ldr	r0, [r0, #0]
 800e5cc:	4615      	mov	r5, r2
 800e5ce:	4698      	mov	r8, r3
 800e5d0:	f000 fc42 	bl	800ee58 <is_uxrce_rmw_identifier_valid>
 800e5d4:	2800      	cmp	r0, #0
 800e5d6:	f000 80bc 	beq.w	800e752 <rmw_create_publisher+0x19e>
 800e5da:	2d00      	cmp	r5, #0
 800e5dc:	f000 80b9 	beq.w	800e752 <rmw_create_publisher+0x19e>
 800e5e0:	782b      	ldrb	r3, [r5, #0]
 800e5e2:	2b00      	cmp	r3, #0
 800e5e4:	f000 80b5 	beq.w	800e752 <rmw_create_publisher+0x19e>
 800e5e8:	f1b8 0f00 	cmp.w	r8, #0
 800e5ec:	f000 80b1 	beq.w	800e752 <rmw_create_publisher+0x19e>
 800e5f0:	485a      	ldr	r0, [pc, #360]	@ (800e75c <rmw_create_publisher+0x1a8>)
 800e5f2:	f8d4 9004 	ldr.w	r9, [r4, #4]
 800e5f6:	f007 fdad 	bl	8016154 <get_memory>
 800e5fa:	2800      	cmp	r0, #0
 800e5fc:	f000 80a9 	beq.w	800e752 <rmw_create_publisher+0x19e>
 800e600:	68c4      	ldr	r4, [r0, #12]
 800e602:	f8c4 4088 	str.w	r4, [r4, #136]	@ 0x88
 800e606:	f007 fe0d 	bl	8016224 <rmw_get_implementation_identifier>
 800e60a:	f104 0a98 	add.w	sl, r4, #152	@ 0x98
 800e60e:	f8c4 0084 	str.w	r0, [r4, #132]	@ 0x84
 800e612:	f8c4 a08c 	str.w	sl, [r4, #140]	@ 0x8c
 800e616:	4628      	mov	r0, r5
 800e618:	f7f1 fde4 	bl	80001e4 <strlen>
 800e61c:	3001      	adds	r0, #1
 800e61e:	283c      	cmp	r0, #60	@ 0x3c
 800e620:	f104 0784 	add.w	r7, r4, #132	@ 0x84
 800e624:	f200 808e 	bhi.w	800e744 <rmw_create_publisher+0x190>
 800e628:	4a4d      	ldr	r2, [pc, #308]	@ (800e760 <rmw_create_publisher+0x1ac>)
 800e62a:	462b      	mov	r3, r5
 800e62c:	213c      	movs	r1, #60	@ 0x3c
 800e62e:	4650      	mov	r0, sl
 800e630:	f00b fa1e 	bl	8019a70 <sniprintf>
 800e634:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800e638:	e9c4 391f 	strd	r3, r9, [r4, #124]	@ 0x7c
 800e63c:	4641      	mov	r1, r8
 800e63e:	2250      	movs	r2, #80	@ 0x50
 800e640:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 800e644:	f00b fbfd 	bl	8019e42 <memcpy>
 800e648:	f898 3008 	ldrb.w	r3, [r8, #8]
 800e64c:	4945      	ldr	r1, [pc, #276]	@ (800e764 <rmw_create_publisher+0x1b0>)
 800e64e:	2b02      	cmp	r3, #2
 800e650:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800e654:	bf0c      	ite	eq
 800e656:	f8d3 337c 	ldreq.w	r3, [r3, #892]	@ 0x37c
 800e65a:	f8d3 3378 	ldrne.w	r3, [r3, #888]	@ 0x378
 800e65e:	67a3      	str	r3, [r4, #120]	@ 0x78
 800e660:	2300      	movs	r3, #0
 800e662:	e9c4 3307 	strd	r3, r3, [r4, #28]
 800e666:	4630      	mov	r0, r6
 800e668:	f000 fc04 	bl	800ee74 <get_message_typesupport_handle>
 800e66c:	2800      	cmp	r0, #0
 800e66e:	d069      	beq.n	800e744 <rmw_create_publisher+0x190>
 800e670:	6842      	ldr	r2, [r0, #4]
 800e672:	61a2      	str	r2, [r4, #24]
 800e674:	2a00      	cmp	r2, #0
 800e676:	d065      	beq.n	800e744 <rmw_create_publisher+0x190>
 800e678:	4629      	mov	r1, r5
 800e67a:	4643      	mov	r3, r8
 800e67c:	4648      	mov	r0, r9
 800e67e:	f008 f81b 	bl	80166b8 <create_topic>
 800e682:	6260      	str	r0, [r4, #36]	@ 0x24
 800e684:	2800      	cmp	r0, #0
 800e686:	d061      	beq.n	800e74c <rmw_create_publisher+0x198>
 800e688:	f8d9 2010 	ldr.w	r2, [r9, #16]
 800e68c:	f241 5398 	movw	r3, #5528	@ 0x1598
 800e690:	2103      	movs	r1, #3
 800e692:	5ad0      	ldrh	r0, [r2, r3]
 800e694:	1c45      	adds	r5, r0, #1
 800e696:	52d5      	strh	r5, [r2, r3]
 800e698:	f002 f99e 	bl	80109d8 <uxr_object_id>
 800e69c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800e6a0:	f8d4 2080 	ldr.w	r2, [r4, #128]	@ 0x80
 800e6a4:	f8d3 3384 	ldr.w	r3, [r3, #900]	@ 0x384
 800e6a8:	6912      	ldr	r2, [r2, #16]
 800e6aa:	6120      	str	r0, [r4, #16]
 800e6ac:	f04f 0a06 	mov.w	sl, #6
 800e6b0:	f8cd a000 	str.w	sl, [sp]
 800e6b4:	6819      	ldr	r1, [r3, #0]
 800e6b6:	f8d9 3014 	ldr.w	r3, [r9, #20]
 800e6ba:	f502 7028 	add.w	r0, r2, #672	@ 0x2a0
 800e6be:	6922      	ldr	r2, [r4, #16]
 800e6c0:	f002 f83a 	bl	8010738 <uxr_buffer_create_publisher_bin>
 800e6c4:	4602      	mov	r2, r0
 800e6c6:	f8d9 0010 	ldr.w	r0, [r9, #16]
 800e6ca:	f8d0 338c 	ldr.w	r3, [r0, #908]	@ 0x38c
 800e6ce:	f8d0 1384 	ldr.w	r1, [r0, #900]	@ 0x384
 800e6d2:	f000 fb41 	bl	800ed58 <run_xrce_session>
 800e6d6:	b3a8      	cbz	r0, 800e744 <rmw_create_publisher+0x190>
 800e6d8:	f8d9 2010 	ldr.w	r2, [r9, #16]
 800e6dc:	f241 539a 	movw	r3, #5530	@ 0x159a
 800e6e0:	2105      	movs	r1, #5
 800e6e2:	5ad0      	ldrh	r0, [r2, r3]
 800e6e4:	1c45      	adds	r5, r0, #1
 800e6e6:	52d5      	strh	r5, [r2, r3]
 800e6e8:	f002 f976 	bl	80109d8 <uxr_object_id>
 800e6ec:	f8d4 2080 	ldr.w	r2, [r4, #128]	@ 0x80
 800e6f0:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800e6f4:	6915      	ldr	r5, [r2, #16]
 800e6f6:	6160      	str	r0, [r4, #20]
 800e6f8:	ae04      	add	r6, sp, #16
 800e6fa:	4641      	mov	r1, r8
 800e6fc:	4630      	mov	r0, r6
 800e6fe:	f8d3 8384 	ldr.w	r8, [r3, #900]	@ 0x384
 800e702:	f8d4 b024 	ldr.w	fp, [r4, #36]	@ 0x24
 800e706:	f000 fb43 	bl	800ed90 <convert_qos_profile>
 800e70a:	e896 0003 	ldmia.w	r6, {r0, r1}
 800e70e:	f8cd a00c 	str.w	sl, [sp, #12]
 800e712:	9001      	str	r0, [sp, #4]
 800e714:	f8ad 1008 	strh.w	r1, [sp, #8]
 800e718:	f8db 3010 	ldr.w	r3, [fp, #16]
 800e71c:	9300      	str	r3, [sp, #0]
 800e71e:	f505 7528 	add.w	r5, r5, #672	@ 0x2a0
 800e722:	e9d4 3204 	ldrd	r3, r2, [r4, #16]
 800e726:	f8d8 1000 	ldr.w	r1, [r8]
 800e72a:	4628      	mov	r0, r5
 800e72c:	f002 f862 	bl	80107f4 <uxr_buffer_create_datawriter_bin>
 800e730:	4602      	mov	r2, r0
 800e732:	f8d9 0010 	ldr.w	r0, [r9, #16]
 800e736:	f8d0 338c 	ldr.w	r3, [r0, #908]	@ 0x38c
 800e73a:	f8d0 1384 	ldr.w	r1, [r0, #900]	@ 0x384
 800e73e:	f000 fb0b 	bl	800ed58 <run_xrce_session>
 800e742:	b938      	cbnz	r0, 800e754 <rmw_create_publisher+0x1a0>
 800e744:	6a60      	ldr	r0, [r4, #36]	@ 0x24
 800e746:	b108      	cbz	r0, 800e74c <rmw_create_publisher+0x198>
 800e748:	f000 fa0c 	bl	800eb64 <rmw_uxrce_fini_topic_memory>
 800e74c:	4638      	mov	r0, r7
 800e74e:	f000 f9b1 	bl	800eab4 <rmw_uxrce_fini_publisher_memory>
 800e752:	2700      	movs	r7, #0
 800e754:	4638      	mov	r0, r7
 800e756:	b007      	add	sp, #28
 800e758:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e75c:	20007888 	.word	0x20007888
 800e760:	0801af8c 	.word	0x0801af8c
 800e764:	0801af58 	.word	0x0801af58

0800e768 <rmw_publisher_get_actual_qos>:
 800e768:	b150      	cbz	r0, 800e780 <rmw_publisher_get_actual_qos+0x18>
 800e76a:	b149      	cbz	r1, 800e780 <rmw_publisher_get_actual_qos+0x18>
 800e76c:	b508      	push	{r3, lr}
 800e76e:	6843      	ldr	r3, [r0, #4]
 800e770:	2250      	movs	r2, #80	@ 0x50
 800e772:	4608      	mov	r0, r1
 800e774:	f103 0128 	add.w	r1, r3, #40	@ 0x28
 800e778:	f00b fb63 	bl	8019e42 <memcpy>
 800e77c:	2000      	movs	r0, #0
 800e77e:	bd08      	pop	{r3, pc}
 800e780:	200b      	movs	r0, #11
 800e782:	4770      	bx	lr

0800e784 <rmw_destroy_publisher>:
 800e784:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e786:	b128      	cbz	r0, 800e794 <rmw_destroy_publisher+0x10>
 800e788:	4604      	mov	r4, r0
 800e78a:	6800      	ldr	r0, [r0, #0]
 800e78c:	460d      	mov	r5, r1
 800e78e:	f000 fb63 	bl	800ee58 <is_uxrce_rmw_identifier_valid>
 800e792:	b910      	cbnz	r0, 800e79a <rmw_destroy_publisher+0x16>
 800e794:	2401      	movs	r4, #1
 800e796:	4620      	mov	r0, r4
 800e798:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e79a:	6863      	ldr	r3, [r4, #4]
 800e79c:	2b00      	cmp	r3, #0
 800e79e:	d0f9      	beq.n	800e794 <rmw_destroy_publisher+0x10>
 800e7a0:	2d00      	cmp	r5, #0
 800e7a2:	d0f7      	beq.n	800e794 <rmw_destroy_publisher+0x10>
 800e7a4:	6828      	ldr	r0, [r5, #0]
 800e7a6:	f000 fb57 	bl	800ee58 <is_uxrce_rmw_identifier_valid>
 800e7aa:	2800      	cmp	r0, #0
 800e7ac:	d0f2      	beq.n	800e794 <rmw_destroy_publisher+0x10>
 800e7ae:	686c      	ldr	r4, [r5, #4]
 800e7b0:	2c00      	cmp	r4, #0
 800e7b2:	d0ef      	beq.n	800e794 <rmw_destroy_publisher+0x10>
 800e7b4:	6a60      	ldr	r0, [r4, #36]	@ 0x24
 800e7b6:	f8d4 7080 	ldr.w	r7, [r4, #128]	@ 0x80
 800e7ba:	f007 ffcd 	bl	8016758 <destroy_topic>
 800e7be:	f8d4 3080 	ldr.w	r3, [r4, #128]	@ 0x80
 800e7c2:	6962      	ldr	r2, [r4, #20]
 800e7c4:	6918      	ldr	r0, [r3, #16]
 800e7c6:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 800e7ca:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800e7ce:	6819      	ldr	r1, [r3, #0]
 800e7d0:	f001 ff00 	bl	80105d4 <uxr_buffer_delete_entity>
 800e7d4:	f8d4 1080 	ldr.w	r1, [r4, #128]	@ 0x80
 800e7d8:	6922      	ldr	r2, [r4, #16]
 800e7da:	4603      	mov	r3, r0
 800e7dc:	6908      	ldr	r0, [r1, #16]
 800e7de:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 800e7e2:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800e7e6:	6809      	ldr	r1, [r1, #0]
 800e7e8:	461c      	mov	r4, r3
 800e7ea:	f001 fef3 	bl	80105d4 <uxr_buffer_delete_entity>
 800e7ee:	4606      	mov	r6, r0
 800e7f0:	6938      	ldr	r0, [r7, #16]
 800e7f2:	4622      	mov	r2, r4
 800e7f4:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 800e7f8:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 800e7fc:	f000 faac 	bl	800ed58 <run_xrce_session>
 800e800:	4604      	mov	r4, r0
 800e802:	6938      	ldr	r0, [r7, #16]
 800e804:	4632      	mov	r2, r6
 800e806:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 800e80a:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 800e80e:	f000 faa3 	bl	800ed58 <run_xrce_session>
 800e812:	b12c      	cbz	r4, 800e820 <rmw_destroy_publisher+0x9c>
 800e814:	b120      	cbz	r0, 800e820 <rmw_destroy_publisher+0x9c>
 800e816:	2400      	movs	r4, #0
 800e818:	4628      	mov	r0, r5
 800e81a:	f000 f94b 	bl	800eab4 <rmw_uxrce_fini_publisher_memory>
 800e81e:	e7ba      	b.n	800e796 <rmw_destroy_publisher+0x12>
 800e820:	2402      	movs	r4, #2
 800e822:	e7f9      	b.n	800e818 <rmw_destroy_publisher+0x94>

0800e824 <rmw_uxrce_init_service_memory>:
 800e824:	b1b2      	cbz	r2, 800e854 <rmw_uxrce_init_service_memory+0x30>
 800e826:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e828:	7a07      	ldrb	r7, [r0, #8]
 800e82a:	4605      	mov	r5, r0
 800e82c:	b98f      	cbnz	r7, 800e852 <rmw_uxrce_init_service_memory+0x2e>
 800e82e:	e9c0 7700 	strd	r7, r7, [r0]
 800e832:	460c      	mov	r4, r1
 800e834:	23c8      	movs	r3, #200	@ 0xc8
 800e836:	2101      	movs	r1, #1
 800e838:	fb03 4602 	mla	r6, r3, r2, r4
 800e83c:	60c3      	str	r3, [r0, #12]
 800e83e:	7201      	strb	r1, [r0, #8]
 800e840:	4621      	mov	r1, r4
 800e842:	4628      	mov	r0, r5
 800e844:	f007 fc96 	bl	8016174 <put_memory>
 800e848:	60e4      	str	r4, [r4, #12]
 800e84a:	f804 7bc8 	strb.w	r7, [r4], #200
 800e84e:	42a6      	cmp	r6, r4
 800e850:	d1f6      	bne.n	800e840 <rmw_uxrce_init_service_memory+0x1c>
 800e852:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e854:	4770      	bx	lr
 800e856:	bf00      	nop

0800e858 <rmw_uxrce_init_client_memory>:
 800e858:	b1b2      	cbz	r2, 800e888 <rmw_uxrce_init_client_memory+0x30>
 800e85a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e85c:	7a07      	ldrb	r7, [r0, #8]
 800e85e:	4605      	mov	r5, r0
 800e860:	b98f      	cbnz	r7, 800e886 <rmw_uxrce_init_client_memory+0x2e>
 800e862:	e9c0 7700 	strd	r7, r7, [r0]
 800e866:	460c      	mov	r4, r1
 800e868:	23c8      	movs	r3, #200	@ 0xc8
 800e86a:	2101      	movs	r1, #1
 800e86c:	fb03 4602 	mla	r6, r3, r2, r4
 800e870:	60c3      	str	r3, [r0, #12]
 800e872:	7201      	strb	r1, [r0, #8]
 800e874:	4621      	mov	r1, r4
 800e876:	4628      	mov	r0, r5
 800e878:	f007 fc7c 	bl	8016174 <put_memory>
 800e87c:	60e4      	str	r4, [r4, #12]
 800e87e:	f804 7bc8 	strb.w	r7, [r4], #200
 800e882:	42a6      	cmp	r6, r4
 800e884:	d1f6      	bne.n	800e874 <rmw_uxrce_init_client_memory+0x1c>
 800e886:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e888:	4770      	bx	lr
 800e88a:	bf00      	nop

0800e88c <rmw_uxrce_init_publisher_memory>:
 800e88c:	b1b2      	cbz	r2, 800e8bc <rmw_uxrce_init_publisher_memory+0x30>
 800e88e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e890:	7a07      	ldrb	r7, [r0, #8]
 800e892:	4605      	mov	r5, r0
 800e894:	b98f      	cbnz	r7, 800e8ba <rmw_uxrce_init_publisher_memory+0x2e>
 800e896:	e9c0 7700 	strd	r7, r7, [r0]
 800e89a:	460c      	mov	r4, r1
 800e89c:	23d8      	movs	r3, #216	@ 0xd8
 800e89e:	2101      	movs	r1, #1
 800e8a0:	fb03 4602 	mla	r6, r3, r2, r4
 800e8a4:	60c3      	str	r3, [r0, #12]
 800e8a6:	7201      	strb	r1, [r0, #8]
 800e8a8:	4621      	mov	r1, r4
 800e8aa:	4628      	mov	r0, r5
 800e8ac:	f007 fc62 	bl	8016174 <put_memory>
 800e8b0:	60e4      	str	r4, [r4, #12]
 800e8b2:	f804 7bd8 	strb.w	r7, [r4], #216
 800e8b6:	42a6      	cmp	r6, r4
 800e8b8:	d1f6      	bne.n	800e8a8 <rmw_uxrce_init_publisher_memory+0x1c>
 800e8ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e8bc:	4770      	bx	lr
 800e8be:	bf00      	nop

0800e8c0 <rmw_uxrce_init_subscription_memory>:
 800e8c0:	b1b2      	cbz	r2, 800e8f0 <rmw_uxrce_init_subscription_memory+0x30>
 800e8c2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e8c4:	7a07      	ldrb	r7, [r0, #8]
 800e8c6:	4605      	mov	r5, r0
 800e8c8:	b98f      	cbnz	r7, 800e8ee <rmw_uxrce_init_subscription_memory+0x2e>
 800e8ca:	e9c0 7700 	strd	r7, r7, [r0]
 800e8ce:	460c      	mov	r4, r1
 800e8d0:	23d0      	movs	r3, #208	@ 0xd0
 800e8d2:	2101      	movs	r1, #1
 800e8d4:	fb03 4602 	mla	r6, r3, r2, r4
 800e8d8:	60c3      	str	r3, [r0, #12]
 800e8da:	7201      	strb	r1, [r0, #8]
 800e8dc:	4621      	mov	r1, r4
 800e8de:	4628      	mov	r0, r5
 800e8e0:	f007 fc48 	bl	8016174 <put_memory>
 800e8e4:	60e4      	str	r4, [r4, #12]
 800e8e6:	f804 7bd0 	strb.w	r7, [r4], #208
 800e8ea:	42a6      	cmp	r6, r4
 800e8ec:	d1f6      	bne.n	800e8dc <rmw_uxrce_init_subscription_memory+0x1c>
 800e8ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e8f0:	4770      	bx	lr
 800e8f2:	bf00      	nop

0800e8f4 <rmw_uxrce_init_node_memory>:
 800e8f4:	b1b2      	cbz	r2, 800e924 <rmw_uxrce_init_node_memory+0x30>
 800e8f6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e8f8:	7a07      	ldrb	r7, [r0, #8]
 800e8fa:	4605      	mov	r5, r0
 800e8fc:	b98f      	cbnz	r7, 800e922 <rmw_uxrce_init_node_memory+0x2e>
 800e8fe:	e9c0 7700 	strd	r7, r7, [r0]
 800e902:	460c      	mov	r4, r1
 800e904:	23a4      	movs	r3, #164	@ 0xa4
 800e906:	2101      	movs	r1, #1
 800e908:	fb03 4602 	mla	r6, r3, r2, r4
 800e90c:	60c3      	str	r3, [r0, #12]
 800e90e:	7201      	strb	r1, [r0, #8]
 800e910:	4621      	mov	r1, r4
 800e912:	4628      	mov	r0, r5
 800e914:	f007 fc2e 	bl	8016174 <put_memory>
 800e918:	60e4      	str	r4, [r4, #12]
 800e91a:	f804 7ba4 	strb.w	r7, [r4], #164
 800e91e:	42a6      	cmp	r6, r4
 800e920:	d1f6      	bne.n	800e910 <rmw_uxrce_init_node_memory+0x1c>
 800e922:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e924:	4770      	bx	lr
 800e926:	bf00      	nop

0800e928 <rmw_uxrce_init_session_memory>:
 800e928:	b1d2      	cbz	r2, 800e960 <rmw_uxrce_init_session_memory+0x38>
 800e92a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e92e:	7a07      	ldrb	r7, [r0, #8]
 800e930:	4605      	mov	r5, r0
 800e932:	b99f      	cbnz	r7, 800e95c <rmw_uxrce_init_session_memory+0x34>
 800e934:	e9c0 7700 	strd	r7, r7, [r0]
 800e938:	f241 53a8 	movw	r3, #5544	@ 0x15a8
 800e93c:	460c      	mov	r4, r1
 800e93e:	2101      	movs	r1, #1
 800e940:	fb03 4602 	mla	r6, r3, r2, r4
 800e944:	60c3      	str	r3, [r0, #12]
 800e946:	4698      	mov	r8, r3
 800e948:	7201      	strb	r1, [r0, #8]
 800e94a:	4621      	mov	r1, r4
 800e94c:	4628      	mov	r0, r5
 800e94e:	f007 fc11 	bl	8016174 <put_memory>
 800e952:	60e4      	str	r4, [r4, #12]
 800e954:	7027      	strb	r7, [r4, #0]
 800e956:	4444      	add	r4, r8
 800e958:	42a6      	cmp	r6, r4
 800e95a:	d1f6      	bne.n	800e94a <rmw_uxrce_init_session_memory+0x22>
 800e95c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e960:	4770      	bx	lr
 800e962:	bf00      	nop

0800e964 <rmw_uxrce_init_topic_memory>:
 800e964:	b1c2      	cbz	r2, 800e998 <rmw_uxrce_init_topic_memory+0x34>
 800e966:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e968:	7a07      	ldrb	r7, [r0, #8]
 800e96a:	4606      	mov	r6, r0
 800e96c:	b99f      	cbnz	r7, 800e996 <rmw_uxrce_init_topic_memory+0x32>
 800e96e:	e9c0 7700 	strd	r7, r7, [r0]
 800e972:	460c      	mov	r4, r1
 800e974:	ebc2 02c2 	rsb	r2, r2, r2, lsl #3
 800e978:	2101      	movs	r1, #1
 800e97a:	231c      	movs	r3, #28
 800e97c:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800e980:	7201      	strb	r1, [r0, #8]
 800e982:	60c3      	str	r3, [r0, #12]
 800e984:	4621      	mov	r1, r4
 800e986:	4630      	mov	r0, r6
 800e988:	f007 fbf4 	bl	8016174 <put_memory>
 800e98c:	60e4      	str	r4, [r4, #12]
 800e98e:	f804 7b1c 	strb.w	r7, [r4], #28
 800e992:	42a5      	cmp	r5, r4
 800e994:	d1f6      	bne.n	800e984 <rmw_uxrce_init_topic_memory+0x20>
 800e996:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e998:	4770      	bx	lr
 800e99a:	bf00      	nop

0800e99c <rmw_uxrce_init_static_input_buffer_memory>:
 800e99c:	b1d2      	cbz	r2, 800e9d4 <rmw_uxrce_init_static_input_buffer_memory+0x38>
 800e99e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e9a0:	7a07      	ldrb	r7, [r0, #8]
 800e9a2:	4606      	mov	r6, r0
 800e9a4:	b9af      	cbnz	r7, 800e9d2 <rmw_uxrce_init_static_input_buffer_memory+0x36>
 800e9a6:	e9c0 7700 	strd	r7, r7, [r0]
 800e9aa:	460c      	mov	r4, r1
 800e9ac:	eb02 1242 	add.w	r2, r2, r2, lsl #5
 800e9b0:	2101      	movs	r1, #1
 800e9b2:	f44f 6304 	mov.w	r3, #2112	@ 0x840
 800e9b6:	eb04 1582 	add.w	r5, r4, r2, lsl #6
 800e9ba:	7201      	strb	r1, [r0, #8]
 800e9bc:	60c3      	str	r3, [r0, #12]
 800e9be:	4621      	mov	r1, r4
 800e9c0:	4630      	mov	r0, r6
 800e9c2:	f007 fbd7 	bl	8016174 <put_memory>
 800e9c6:	60e4      	str	r4, [r4, #12]
 800e9c8:	7027      	strb	r7, [r4, #0]
 800e9ca:	f504 6404 	add.w	r4, r4, #2112	@ 0x840
 800e9ce:	42a5      	cmp	r5, r4
 800e9d0:	d1f5      	bne.n	800e9be <rmw_uxrce_init_static_input_buffer_memory+0x22>
 800e9d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e9d4:	4770      	bx	lr
 800e9d6:	bf00      	nop

0800e9d8 <rmw_uxrce_init_init_options_impl_memory>:
 800e9d8:	b1b2      	cbz	r2, 800ea08 <rmw_uxrce_init_init_options_impl_memory+0x30>
 800e9da:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e9dc:	7a07      	ldrb	r7, [r0, #8]
 800e9de:	4605      	mov	r5, r0
 800e9e0:	b98f      	cbnz	r7, 800ea06 <rmw_uxrce_init_init_options_impl_memory+0x2e>
 800e9e2:	e9c0 7700 	strd	r7, r7, [r0]
 800e9e6:	460c      	mov	r4, r1
 800e9e8:	232c      	movs	r3, #44	@ 0x2c
 800e9ea:	2101      	movs	r1, #1
 800e9ec:	fb03 4602 	mla	r6, r3, r2, r4
 800e9f0:	60c3      	str	r3, [r0, #12]
 800e9f2:	7201      	strb	r1, [r0, #8]
 800e9f4:	4621      	mov	r1, r4
 800e9f6:	4628      	mov	r0, r5
 800e9f8:	f007 fbbc 	bl	8016174 <put_memory>
 800e9fc:	60e4      	str	r4, [r4, #12]
 800e9fe:	f804 7b2c 	strb.w	r7, [r4], #44
 800ea02:	42a6      	cmp	r6, r4
 800ea04:	d1f6      	bne.n	800e9f4 <rmw_uxrce_init_init_options_impl_memory+0x1c>
 800ea06:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ea08:	4770      	bx	lr
 800ea0a:	bf00      	nop

0800ea0c <rmw_uxrce_init_wait_set_memory>:
 800ea0c:	b1c2      	cbz	r2, 800ea40 <rmw_uxrce_init_wait_set_memory+0x34>
 800ea0e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ea10:	7a07      	ldrb	r7, [r0, #8]
 800ea12:	4606      	mov	r6, r0
 800ea14:	b99f      	cbnz	r7, 800ea3e <rmw_uxrce_init_wait_set_memory+0x32>
 800ea16:	e9c0 7700 	strd	r7, r7, [r0]
 800ea1a:	460c      	mov	r4, r1
 800ea1c:	ebc2 02c2 	rsb	r2, r2, r2, lsl #3
 800ea20:	2101      	movs	r1, #1
 800ea22:	231c      	movs	r3, #28
 800ea24:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800ea28:	7201      	strb	r1, [r0, #8]
 800ea2a:	60c3      	str	r3, [r0, #12]
 800ea2c:	4621      	mov	r1, r4
 800ea2e:	4630      	mov	r0, r6
 800ea30:	f007 fba0 	bl	8016174 <put_memory>
 800ea34:	60e4      	str	r4, [r4, #12]
 800ea36:	f804 7b1c 	strb.w	r7, [r4], #28
 800ea3a:	42a5      	cmp	r5, r4
 800ea3c:	d1f6      	bne.n	800ea2c <rmw_uxrce_init_wait_set_memory+0x20>
 800ea3e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ea40:	4770      	bx	lr
 800ea42:	bf00      	nop

0800ea44 <rmw_uxrce_init_guard_condition_memory>:
 800ea44:	b1b2      	cbz	r2, 800ea74 <rmw_uxrce_init_guard_condition_memory+0x30>
 800ea46:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ea48:	7a07      	ldrb	r7, [r0, #8]
 800ea4a:	4605      	mov	r5, r0
 800ea4c:	b98f      	cbnz	r7, 800ea72 <rmw_uxrce_init_guard_condition_memory+0x2e>
 800ea4e:	e9c0 7700 	strd	r7, r7, [r0]
 800ea52:	460c      	mov	r4, r1
 800ea54:	2320      	movs	r3, #32
 800ea56:	2101      	movs	r1, #1
 800ea58:	eb04 1642 	add.w	r6, r4, r2, lsl #5
 800ea5c:	7201      	strb	r1, [r0, #8]
 800ea5e:	60c3      	str	r3, [r0, #12]
 800ea60:	4621      	mov	r1, r4
 800ea62:	4628      	mov	r0, r5
 800ea64:	f007 fb86 	bl	8016174 <put_memory>
 800ea68:	60e4      	str	r4, [r4, #12]
 800ea6a:	f804 7b20 	strb.w	r7, [r4], #32
 800ea6e:	42a6      	cmp	r6, r4
 800ea70:	d1f6      	bne.n	800ea60 <rmw_uxrce_init_guard_condition_memory+0x1c>
 800ea72:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ea74:	4770      	bx	lr
 800ea76:	bf00      	nop

0800ea78 <rmw_uxrce_fini_session_memory>:
 800ea78:	4601      	mov	r1, r0
 800ea7a:	4801      	ldr	r0, [pc, #4]	@ (800ea80 <rmw_uxrce_fini_session_memory+0x8>)
 800ea7c:	f007 bb7a 	b.w	8016174 <put_memory>
 800ea80:	2000aa20 	.word	0x2000aa20

0800ea84 <rmw_uxrce_fini_node_memory>:
 800ea84:	b538      	push	{r3, r4, r5, lr}
 800ea86:	4604      	mov	r4, r0
 800ea88:	6800      	ldr	r0, [r0, #0]
 800ea8a:	b128      	cbz	r0, 800ea98 <rmw_uxrce_fini_node_memory+0x14>
 800ea8c:	4b07      	ldr	r3, [pc, #28]	@ (800eaac <rmw_uxrce_fini_node_memory+0x28>)
 800ea8e:	6819      	ldr	r1, [r3, #0]
 800ea90:	f7f1 fb9e 	bl	80001d0 <strcmp>
 800ea94:	b940      	cbnz	r0, 800eaa8 <rmw_uxrce_fini_node_memory+0x24>
 800ea96:	6020      	str	r0, [r4, #0]
 800ea98:	6861      	ldr	r1, [r4, #4]
 800ea9a:	b129      	cbz	r1, 800eaa8 <rmw_uxrce_fini_node_memory+0x24>
 800ea9c:	2500      	movs	r5, #0
 800ea9e:	4804      	ldr	r0, [pc, #16]	@ (800eab0 <rmw_uxrce_fini_node_memory+0x2c>)
 800eaa0:	610d      	str	r5, [r1, #16]
 800eaa2:	f007 fb67 	bl	8016174 <put_memory>
 800eaa6:	6065      	str	r5, [r4, #4]
 800eaa8:	bd38      	pop	{r3, r4, r5, pc}
 800eaaa:	bf00      	nop
 800eaac:	0801b510 	.word	0x0801b510
 800eab0:	2000a84c 	.word	0x2000a84c

0800eab4 <rmw_uxrce_fini_publisher_memory>:
 800eab4:	b510      	push	{r4, lr}
 800eab6:	4604      	mov	r4, r0
 800eab8:	6800      	ldr	r0, [r0, #0]
 800eaba:	b128      	cbz	r0, 800eac8 <rmw_uxrce_fini_publisher_memory+0x14>
 800eabc:	4b06      	ldr	r3, [pc, #24]	@ (800ead8 <rmw_uxrce_fini_publisher_memory+0x24>)
 800eabe:	6819      	ldr	r1, [r3, #0]
 800eac0:	f7f1 fb86 	bl	80001d0 <strcmp>
 800eac4:	b938      	cbnz	r0, 800ead6 <rmw_uxrce_fini_publisher_memory+0x22>
 800eac6:	6020      	str	r0, [r4, #0]
 800eac8:	6861      	ldr	r1, [r4, #4]
 800eaca:	b121      	cbz	r1, 800ead6 <rmw_uxrce_fini_publisher_memory+0x22>
 800eacc:	4803      	ldr	r0, [pc, #12]	@ (800eadc <rmw_uxrce_fini_publisher_memory+0x28>)
 800eace:	f007 fb51 	bl	8016174 <put_memory>
 800ead2:	2300      	movs	r3, #0
 800ead4:	6063      	str	r3, [r4, #4]
 800ead6:	bd10      	pop	{r4, pc}
 800ead8:	0801b510 	.word	0x0801b510
 800eadc:	20007888 	.word	0x20007888

0800eae0 <rmw_uxrce_fini_subscription_memory>:
 800eae0:	b510      	push	{r4, lr}
 800eae2:	4604      	mov	r4, r0
 800eae4:	6800      	ldr	r0, [r0, #0]
 800eae6:	b128      	cbz	r0, 800eaf4 <rmw_uxrce_fini_subscription_memory+0x14>
 800eae8:	4b06      	ldr	r3, [pc, #24]	@ (800eb04 <rmw_uxrce_fini_subscription_memory+0x24>)
 800eaea:	6819      	ldr	r1, [r3, #0]
 800eaec:	f7f1 fb70 	bl	80001d0 <strcmp>
 800eaf0:	b938      	cbnz	r0, 800eb02 <rmw_uxrce_fini_subscription_memory+0x22>
 800eaf2:	6020      	str	r0, [r4, #0]
 800eaf4:	6861      	ldr	r1, [r4, #4]
 800eaf6:	b121      	cbz	r1, 800eb02 <rmw_uxrce_fini_subscription_memory+0x22>
 800eaf8:	4803      	ldr	r0, [pc, #12]	@ (800eb08 <rmw_uxrce_fini_subscription_memory+0x28>)
 800eafa:	f007 fb3b 	bl	8016174 <put_memory>
 800eafe:	2300      	movs	r3, #0
 800eb00:	6063      	str	r3, [r4, #4]
 800eb02:	bd10      	pop	{r4, pc}
 800eb04:	0801b510 	.word	0x0801b510
 800eb08:	2000aae4 	.word	0x2000aae4

0800eb0c <rmw_uxrce_fini_service_memory>:
 800eb0c:	b510      	push	{r4, lr}
 800eb0e:	4604      	mov	r4, r0
 800eb10:	6800      	ldr	r0, [r0, #0]
 800eb12:	b128      	cbz	r0, 800eb20 <rmw_uxrce_fini_service_memory+0x14>
 800eb14:	4b06      	ldr	r3, [pc, #24]	@ (800eb30 <rmw_uxrce_fini_service_memory+0x24>)
 800eb16:	6819      	ldr	r1, [r3, #0]
 800eb18:	f7f1 fb5a 	bl	80001d0 <strcmp>
 800eb1c:	b938      	cbnz	r0, 800eb2e <rmw_uxrce_fini_service_memory+0x22>
 800eb1e:	6020      	str	r0, [r4, #0]
 800eb20:	6861      	ldr	r1, [r4, #4]
 800eb22:	b121      	cbz	r1, 800eb2e <rmw_uxrce_fini_service_memory+0x22>
 800eb24:	4803      	ldr	r0, [pc, #12]	@ (800eb34 <rmw_uxrce_fini_service_memory+0x28>)
 800eb26:	f007 fb25 	bl	8016174 <put_memory>
 800eb2a:	2300      	movs	r3, #0
 800eb2c:	6063      	str	r3, [r4, #4]
 800eb2e:	bd10      	pop	{r4, pc}
 800eb30:	0801b510 	.word	0x0801b510
 800eb34:	2000aad4 	.word	0x2000aad4

0800eb38 <rmw_uxrce_fini_client_memory>:
 800eb38:	b510      	push	{r4, lr}
 800eb3a:	4604      	mov	r4, r0
 800eb3c:	6800      	ldr	r0, [r0, #0]
 800eb3e:	b128      	cbz	r0, 800eb4c <rmw_uxrce_fini_client_memory+0x14>
 800eb40:	4b06      	ldr	r3, [pc, #24]	@ (800eb5c <rmw_uxrce_fini_client_memory+0x24>)
 800eb42:	6819      	ldr	r1, [r3, #0]
 800eb44:	f7f1 fb44 	bl	80001d0 <strcmp>
 800eb48:	b938      	cbnz	r0, 800eb5a <rmw_uxrce_fini_client_memory+0x22>
 800eb4a:	6020      	str	r0, [r4, #0]
 800eb4c:	6861      	ldr	r1, [r4, #4]
 800eb4e:	b121      	cbz	r1, 800eb5a <rmw_uxrce_fini_client_memory+0x22>
 800eb50:	4803      	ldr	r0, [pc, #12]	@ (800eb60 <rmw_uxrce_fini_client_memory+0x28>)
 800eb52:	f007 fb0f 	bl	8016174 <put_memory>
 800eb56:	2300      	movs	r3, #0
 800eb58:	6063      	str	r3, [r4, #4]
 800eb5a:	bd10      	pop	{r4, pc}
 800eb5c:	0801b510 	.word	0x0801b510
 800eb60:	20008108 	.word	0x20008108

0800eb64 <rmw_uxrce_fini_topic_memory>:
 800eb64:	b510      	push	{r4, lr}
 800eb66:	4601      	mov	r1, r0
 800eb68:	4604      	mov	r4, r0
 800eb6a:	4803      	ldr	r0, [pc, #12]	@ (800eb78 <rmw_uxrce_fini_topic_memory+0x14>)
 800eb6c:	f007 fb02 	bl	8016174 <put_memory>
 800eb70:	2300      	movs	r3, #0
 800eb72:	61a3      	str	r3, [r4, #24]
 800eb74:	bd10      	pop	{r4, pc}
 800eb76:	bf00      	nop
 800eb78:	2000aa10 	.word	0x2000aa10

0800eb7c <rmw_uxrce_get_static_input_buffer_for_entity>:
 800eb7c:	b082      	sub	sp, #8
 800eb7e:	b4f0      	push	{r4, r5, r6, r7}
 800eb80:	4923      	ldr	r1, [pc, #140]	@ (800ec10 <rmw_uxrce_get_static_input_buffer_for_entity+0x94>)
 800eb82:	ac04      	add	r4, sp, #16
 800eb84:	e884 000c 	stmia.w	r4, {r2, r3}
 800eb88:	680d      	ldr	r5, [r1, #0]
 800eb8a:	9c05      	ldr	r4, [sp, #20]
 800eb8c:	2d00      	cmp	r5, #0
 800eb8e:	d03d      	beq.n	800ec0c <rmw_uxrce_get_static_input_buffer_for_entity+0x90>
 800eb90:	462b      	mov	r3, r5
 800eb92:	2100      	movs	r1, #0
 800eb94:	68da      	ldr	r2, [r3, #12]
 800eb96:	689b      	ldr	r3, [r3, #8]
 800eb98:	f8d2 2814 	ldr.w	r2, [r2, #2068]	@ 0x814
 800eb9c:	4290      	cmp	r0, r2
 800eb9e:	bf08      	it	eq
 800eba0:	3101      	addeq	r1, #1
 800eba2:	2b00      	cmp	r3, #0
 800eba4:	d1f6      	bne.n	800eb94 <rmw_uxrce_get_static_input_buffer_for_entity+0x18>
 800eba6:	f89d 3010 	ldrb.w	r3, [sp, #16]
 800ebaa:	2b02      	cmp	r3, #2
 800ebac:	d026      	beq.n	800ebfc <rmw_uxrce_get_static_input_buffer_for_entity+0x80>
 800ebae:	d906      	bls.n	800ebbe <rmw_uxrce_get_static_input_buffer_for_entity+0x42>
 800ebb0:	2b03      	cmp	r3, #3
 800ebb2:	d004      	beq.n	800ebbe <rmw_uxrce_get_static_input_buffer_for_entity+0x42>
 800ebb4:	2100      	movs	r1, #0
 800ebb6:	bcf0      	pop	{r4, r5, r6, r7}
 800ebb8:	4608      	mov	r0, r1
 800ebba:	b002      	add	sp, #8
 800ebbc:	4770      	bx	lr
 800ebbe:	b304      	cbz	r4, 800ec02 <rmw_uxrce_get_static_input_buffer_for_entity+0x86>
 800ebc0:	428c      	cmp	r4, r1
 800ebc2:	d81e      	bhi.n	800ec02 <rmw_uxrce_get_static_input_buffer_for_entity+0x86>
 800ebc4:	2d00      	cmp	r5, #0
 800ebc6:	d0f5      	beq.n	800ebb4 <rmw_uxrce_get_static_input_buffer_for_entity+0x38>
 800ebc8:	2100      	movs	r1, #0
 800ebca:	f04f 36ff 	mov.w	r6, #4294967295	@ 0xffffffff
 800ebce:	f06f 4700 	mvn.w	r7, #2147483648	@ 0x80000000
 800ebd2:	e002      	b.n	800ebda <rmw_uxrce_get_static_input_buffer_for_entity+0x5e>
 800ebd4:	68ad      	ldr	r5, [r5, #8]
 800ebd6:	2d00      	cmp	r5, #0
 800ebd8:	d0ed      	beq.n	800ebb6 <rmw_uxrce_get_static_input_buffer_for_entity+0x3a>
 800ebda:	68eb      	ldr	r3, [r5, #12]
 800ebdc:	f8d3 2814 	ldr.w	r2, [r3, #2068]	@ 0x814
 800ebe0:	4290      	cmp	r0, r2
 800ebe2:	d1f7      	bne.n	800ebd4 <rmw_uxrce_get_static_input_buffer_for_entity+0x58>
 800ebe4:	f603 0318 	addw	r3, r3, #2072	@ 0x818
 800ebe8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ebec:	42b2      	cmp	r2, r6
 800ebee:	eb73 0407 	sbcs.w	r4, r3, r7
 800ebf2:	daef      	bge.n	800ebd4 <rmw_uxrce_get_static_input_buffer_for_entity+0x58>
 800ebf4:	4616      	mov	r6, r2
 800ebf6:	461f      	mov	r7, r3
 800ebf8:	4629      	mov	r1, r5
 800ebfa:	e7eb      	b.n	800ebd4 <rmw_uxrce_get_static_input_buffer_for_entity+0x58>
 800ebfc:	b10c      	cbz	r4, 800ec02 <rmw_uxrce_get_static_input_buffer_for_entity+0x86>
 800ebfe:	428c      	cmp	r4, r1
 800ec00:	d9d8      	bls.n	800ebb4 <rmw_uxrce_get_static_input_buffer_for_entity+0x38>
 800ec02:	bcf0      	pop	{r4, r5, r6, r7}
 800ec04:	4802      	ldr	r0, [pc, #8]	@ (800ec10 <rmw_uxrce_get_static_input_buffer_for_entity+0x94>)
 800ec06:	b002      	add	sp, #8
 800ec08:	f007 baa4 	b.w	8016154 <get_memory>
 800ec0c:	4629      	mov	r1, r5
 800ec0e:	e7ca      	b.n	800eba6 <rmw_uxrce_get_static_input_buffer_for_entity+0x2a>
 800ec10:	20007878 	.word	0x20007878

0800ec14 <rmw_uxrce_find_static_input_buffer_by_owner>:
 800ec14:	4b12      	ldr	r3, [pc, #72]	@ (800ec60 <rmw_uxrce_find_static_input_buffer_by_owner+0x4c>)
 800ec16:	681b      	ldr	r3, [r3, #0]
 800ec18:	b1fb      	cbz	r3, 800ec5a <rmw_uxrce_find_static_input_buffer_by_owner+0x46>
 800ec1a:	b4f0      	push	{r4, r5, r6, r7}
 800ec1c:	f04f 0c00 	mov.w	ip, #0
 800ec20:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 800ec24:	f06f 4500 	mvn.w	r5, #2147483648	@ 0x80000000
 800ec28:	e001      	b.n	800ec2e <rmw_uxrce_find_static_input_buffer_by_owner+0x1a>
 800ec2a:	689b      	ldr	r3, [r3, #8]
 800ec2c:	b193      	cbz	r3, 800ec54 <rmw_uxrce_find_static_input_buffer_by_owner+0x40>
 800ec2e:	68da      	ldr	r2, [r3, #12]
 800ec30:	f8d2 1814 	ldr.w	r1, [r2, #2068]	@ 0x814
 800ec34:	4288      	cmp	r0, r1
 800ec36:	d1f8      	bne.n	800ec2a <rmw_uxrce_find_static_input_buffer_by_owner+0x16>
 800ec38:	f602 0218 	addw	r2, r2, #2072	@ 0x818
 800ec3c:	e9d2 6700 	ldrd	r6, r7, [r2]
 800ec40:	42a6      	cmp	r6, r4
 800ec42:	eb77 0205 	sbcs.w	r2, r7, r5
 800ec46:	daf0      	bge.n	800ec2a <rmw_uxrce_find_static_input_buffer_by_owner+0x16>
 800ec48:	469c      	mov	ip, r3
 800ec4a:	689b      	ldr	r3, [r3, #8]
 800ec4c:	4634      	mov	r4, r6
 800ec4e:	463d      	mov	r5, r7
 800ec50:	2b00      	cmp	r3, #0
 800ec52:	d1ec      	bne.n	800ec2e <rmw_uxrce_find_static_input_buffer_by_owner+0x1a>
 800ec54:	4660      	mov	r0, ip
 800ec56:	bcf0      	pop	{r4, r5, r6, r7}
 800ec58:	4770      	bx	lr
 800ec5a:	4618      	mov	r0, r3
 800ec5c:	4770      	bx	lr
 800ec5e:	bf00      	nop
 800ec60:	20007878 	.word	0x20007878
 800ec64:	00000000 	.word	0x00000000

0800ec68 <rmw_uxrce_clean_expired_static_input_buffer>:
 800ec68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ec6c:	4e38      	ldr	r6, [pc, #224]	@ (800ed50 <rmw_uxrce_clean_expired_static_input_buffer+0xe8>)
 800ec6e:	f8d6 8000 	ldr.w	r8, [r6]
 800ec72:	b083      	sub	sp, #12
 800ec74:	f008 fb44 	bl	8017300 <rmw_uros_epoch_nanos>
 800ec78:	f1b8 0f00 	cmp.w	r8, #0
 800ec7c:	d05f      	beq.n	800ed3e <rmw_uxrce_clean_expired_static_input_buffer+0xd6>
 800ec7e:	46b1      	mov	r9, r6
 800ec80:	f8d8 600c 	ldr.w	r6, [r8, #12]
 800ec84:	f896 3820 	ldrb.w	r3, [r6, #2080]	@ 0x820
 800ec88:	2b04      	cmp	r3, #4
 800ec8a:	4682      	mov	sl, r0
 800ec8c:	468b      	mov	fp, r1
 800ec8e:	d02d      	beq.n	800ecec <rmw_uxrce_clean_expired_static_input_buffer+0x84>
 800ec90:	2b05      	cmp	r3, #5
 800ec92:	d041      	beq.n	800ed18 <rmw_uxrce_clean_expired_static_input_buffer+0xb0>
 800ec94:	2b03      	cmp	r3, #3
 800ec96:	d029      	beq.n	800ecec <rmw_uxrce_clean_expired_static_input_buffer+0x84>
 800ec98:	2200      	movs	r2, #0
 800ec9a:	2300      	movs	r3, #0
 800ec9c:	e9cd 2300 	strd	r2, r3, [sp]
 800eca0:	2001      	movs	r0, #1
 800eca2:	2100      	movs	r1, #0
 800eca4:	9b00      	ldr	r3, [sp, #0]
 800eca6:	f606 0618 	addw	r6, r6, #2072	@ 0x818
 800ecaa:	e9d6 6700 	ldrd	r6, r7, [r6]
 800ecae:	18c2      	adds	r2, r0, r3
 800ecb0:	9b01      	ldr	r3, [sp, #4]
 800ecb2:	eb41 0303 	adc.w	r3, r1, r3
 800ecb6:	1994      	adds	r4, r2, r6
 800ecb8:	eb43 0507 	adc.w	r5, r3, r7
 800ecbc:	4554      	cmp	r4, sl
 800ecbe:	eb75 020b 	sbcs.w	r2, r5, fp
 800ecc2:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800ecc6:	db03      	blt.n	800ecd0 <rmw_uxrce_clean_expired_static_input_buffer+0x68>
 800ecc8:	45b2      	cmp	sl, r6
 800ecca:	eb7b 0207 	sbcs.w	r2, fp, r7
 800ecce:	da05      	bge.n	800ecdc <rmw_uxrce_clean_expired_static_input_buffer+0x74>
 800ecd0:	4641      	mov	r1, r8
 800ecd2:	4648      	mov	r0, r9
 800ecd4:	9300      	str	r3, [sp, #0]
 800ecd6:	f007 fa4d 	bl	8016174 <put_memory>
 800ecda:	9b00      	ldr	r3, [sp, #0]
 800ecdc:	b37b      	cbz	r3, 800ed3e <rmw_uxrce_clean_expired_static_input_buffer+0xd6>
 800ecde:	4698      	mov	r8, r3
 800ece0:	f8d8 600c 	ldr.w	r6, [r8, #12]
 800ece4:	f896 3820 	ldrb.w	r3, [r6, #2080]	@ 0x820
 800ece8:	2b04      	cmp	r3, #4
 800ecea:	d1d1      	bne.n	800ec90 <rmw_uxrce_clean_expired_static_input_buffer+0x28>
 800ecec:	f8d6 1814 	ldr.w	r1, [r6, #2068]	@ 0x814
 800ecf0:	e9d1 2310 	ldrd	r2, r3, [r1, #64]	@ 0x40
 800ecf4:	e9cd 2300 	strd	r2, r3, [sp]
 800ecf8:	4313      	orrs	r3, r2
 800ecfa:	e9d1 0112 	ldrd	r0, r1, [r1, #72]	@ 0x48
 800ecfe:	d015      	beq.n	800ed2c <rmw_uxrce_clean_expired_static_input_buffer+0xc4>
 800ed00:	9a01      	ldr	r2, [sp, #4]
 800ed02:	4b14      	ldr	r3, [pc, #80]	@ (800ed54 <rmw_uxrce_clean_expired_static_input_buffer+0xec>)
 800ed04:	fb03 f702 	mul.w	r7, r3, r2
 800ed08:	9a00      	ldr	r2, [sp, #0]
 800ed0a:	fba2 2303 	umull	r2, r3, r2, r3
 800ed0e:	e9cd 2300 	strd	r2, r3, [sp]
 800ed12:	443b      	add	r3, r7
 800ed14:	9301      	str	r3, [sp, #4]
 800ed16:	e7c5      	b.n	800eca4 <rmw_uxrce_clean_expired_static_input_buffer+0x3c>
 800ed18:	f8d6 1814 	ldr.w	r1, [r6, #2068]	@ 0x814
 800ed1c:	e9d1 2312 	ldrd	r2, r3, [r1, #72]	@ 0x48
 800ed20:	e9cd 2300 	strd	r2, r3, [sp]
 800ed24:	4313      	orrs	r3, r2
 800ed26:	e9d1 0114 	ldrd	r0, r1, [r1, #80]	@ 0x50
 800ed2a:	d1e9      	bne.n	800ed00 <rmw_uxrce_clean_expired_static_input_buffer+0x98>
 800ed2c:	ea50 0301 	orrs.w	r3, r0, r1
 800ed30:	bf02      	ittt	eq
 800ed32:	a305      	addeq	r3, pc, #20	@ (adr r3, 800ed48 <rmw_uxrce_clean_expired_static_input_buffer+0xe0>)
 800ed34:	e9d3 2300 	ldrdeq	r2, r3, [r3]
 800ed38:	e9cd 2300 	strdeq	r2, r3, [sp]
 800ed3c:	e7b2      	b.n	800eca4 <rmw_uxrce_clean_expired_static_input_buffer+0x3c>
 800ed3e:	b003      	add	sp, #12
 800ed40:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ed44:	f3af 8000 	nop.w
 800ed48:	fc23ac00 	.word	0xfc23ac00
 800ed4c:	00000006 	.word	0x00000006
 800ed50:	20007878 	.word	0x20007878
 800ed54:	3b9aca00 	.word	0x3b9aca00

0800ed58 <run_xrce_session>:
 800ed58:	b510      	push	{r4, lr}
 800ed5a:	788c      	ldrb	r4, [r1, #2]
 800ed5c:	b086      	sub	sp, #24
 800ed5e:	2c01      	cmp	r4, #1
 800ed60:	f8ad 200e 	strh.w	r2, [sp, #14]
 800ed64:	d00c      	beq.n	800ed80 <run_xrce_session+0x28>
 800ed66:	4619      	mov	r1, r3
 800ed68:	2301      	movs	r3, #1
 800ed6a:	9300      	str	r3, [sp, #0]
 800ed6c:	f10d 020e 	add.w	r2, sp, #14
 800ed70:	f10d 0317 	add.w	r3, sp, #23
 800ed74:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800ed78:	f002 fb5c 	bl	8011434 <uxr_run_session_until_all_status>
 800ed7c:	b006      	add	sp, #24
 800ed7e:	bd10      	pop	{r4, pc}
 800ed80:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800ed84:	f001 ff74 	bl	8010c70 <uxr_flash_output_streams>
 800ed88:	4620      	mov	r0, r4
 800ed8a:	b006      	add	sp, #24
 800ed8c:	bd10      	pop	{r4, pc}
 800ed8e:	bf00      	nop

0800ed90 <convert_qos_profile>:
 800ed90:	b430      	push	{r4, r5}
 800ed92:	7a0d      	ldrb	r5, [r1, #8]
 800ed94:	780c      	ldrb	r4, [r1, #0]
 800ed96:	7a4a      	ldrb	r2, [r1, #9]
 800ed98:	8889      	ldrh	r1, [r1, #4]
 800ed9a:	8081      	strh	r1, [r0, #4]
 800ed9c:	f1a5 0502 	sub.w	r5, r5, #2
 800eda0:	f1a4 0402 	sub.w	r4, r4, #2
 800eda4:	2a02      	cmp	r2, #2
 800eda6:	fab5 f585 	clz	r5, r5
 800edaa:	fab4 f484 	clz	r4, r4
 800edae:	ea4f 1555 	mov.w	r5, r5, lsr #5
 800edb2:	ea4f 1454 	mov.w	r4, r4, lsr #5
 800edb6:	bf18      	it	ne
 800edb8:	2200      	movne	r2, #0
 800edba:	7045      	strb	r5, [r0, #1]
 800edbc:	7084      	strb	r4, [r0, #2]
 800edbe:	7002      	strb	r2, [r0, #0]
 800edc0:	bc30      	pop	{r4, r5}
 800edc2:	4770      	bx	lr

0800edc4 <generate_type_name>:
 800edc4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800edc6:	2300      	movs	r3, #0
 800edc8:	700b      	strb	r3, [r1, #0]
 800edca:	6803      	ldr	r3, [r0, #0]
 800edcc:	b087      	sub	sp, #28
 800edce:	4614      	mov	r4, r2
 800edd0:	b1d3      	cbz	r3, 800ee08 <generate_type_name+0x44>
 800edd2:	4d0f      	ldr	r5, [pc, #60]	@ (800ee10 <generate_type_name+0x4c>)
 800edd4:	462f      	mov	r7, r5
 800edd6:	4a0f      	ldr	r2, [pc, #60]	@ (800ee14 <generate_type_name+0x50>)
 800edd8:	4e0f      	ldr	r6, [pc, #60]	@ (800ee18 <generate_type_name+0x54>)
 800edda:	6840      	ldr	r0, [r0, #4]
 800eddc:	9004      	str	r0, [sp, #16]
 800edde:	e9cd 6201 	strd	r6, r2, [sp, #4]
 800ede2:	4608      	mov	r0, r1
 800ede4:	9205      	str	r2, [sp, #20]
 800ede6:	9503      	str	r5, [sp, #12]
 800ede8:	4a0c      	ldr	r2, [pc, #48]	@ (800ee1c <generate_type_name+0x58>)
 800edea:	9700      	str	r7, [sp, #0]
 800edec:	4621      	mov	r1, r4
 800edee:	f00a fe3f 	bl	8019a70 <sniprintf>
 800edf2:	2800      	cmp	r0, #0
 800edf4:	db05      	blt.n	800ee02 <generate_type_name+0x3e>
 800edf6:	4284      	cmp	r4, r0
 800edf8:	bfd4      	ite	le
 800edfa:	2000      	movle	r0, #0
 800edfc:	2001      	movgt	r0, #1
 800edfe:	b007      	add	sp, #28
 800ee00:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ee02:	2000      	movs	r0, #0
 800ee04:	b007      	add	sp, #28
 800ee06:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ee08:	4b05      	ldr	r3, [pc, #20]	@ (800ee20 <generate_type_name+0x5c>)
 800ee0a:	4d01      	ldr	r5, [pc, #4]	@ (800ee10 <generate_type_name+0x4c>)
 800ee0c:	461f      	mov	r7, r3
 800ee0e:	e7e2      	b.n	800edd6 <generate_type_name+0x12>
 800ee10:	0801af7c 	.word	0x0801af7c
 800ee14:	0801af90 	.word	0x0801af90
 800ee18:	0801af94 	.word	0x0801af94
 800ee1c:	0801af80 	.word	0x0801af80
 800ee20:	0801b2e8 	.word	0x0801b2e8

0800ee24 <generate_topic_name>:
 800ee24:	b510      	push	{r4, lr}
 800ee26:	b082      	sub	sp, #8
 800ee28:	4b09      	ldr	r3, [pc, #36]	@ (800ee50 <generate_topic_name+0x2c>)
 800ee2a:	9000      	str	r0, [sp, #0]
 800ee2c:	4614      	mov	r4, r2
 800ee2e:	4608      	mov	r0, r1
 800ee30:	4611      	mov	r1, r2
 800ee32:	4a08      	ldr	r2, [pc, #32]	@ (800ee54 <generate_topic_name+0x30>)
 800ee34:	f00a fe1c 	bl	8019a70 <sniprintf>
 800ee38:	2800      	cmp	r0, #0
 800ee3a:	db05      	blt.n	800ee48 <generate_topic_name+0x24>
 800ee3c:	4284      	cmp	r4, r0
 800ee3e:	bfd4      	ite	le
 800ee40:	2000      	movle	r0, #0
 800ee42:	2001      	movgt	r0, #1
 800ee44:	b002      	add	sp, #8
 800ee46:	bd10      	pop	{r4, pc}
 800ee48:	2000      	movs	r0, #0
 800ee4a:	b002      	add	sp, #8
 800ee4c:	bd10      	pop	{r4, pc}
 800ee4e:	bf00      	nop
 800ee50:	0801afa0 	.word	0x0801afa0
 800ee54:	0801af98 	.word	0x0801af98

0800ee58 <is_uxrce_rmw_identifier_valid>:
 800ee58:	b510      	push	{r4, lr}
 800ee5a:	4604      	mov	r4, r0
 800ee5c:	b140      	cbz	r0, 800ee70 <is_uxrce_rmw_identifier_valid+0x18>
 800ee5e:	f007 f9e1 	bl	8016224 <rmw_get_implementation_identifier>
 800ee62:	4601      	mov	r1, r0
 800ee64:	4620      	mov	r0, r4
 800ee66:	f7f1 f9b3 	bl	80001d0 <strcmp>
 800ee6a:	fab0 f080 	clz	r0, r0
 800ee6e:	0940      	lsrs	r0, r0, #5
 800ee70:	bd10      	pop	{r4, pc}
 800ee72:	bf00      	nop

0800ee74 <get_message_typesupport_handle>:
 800ee74:	6883      	ldr	r3, [r0, #8]
 800ee76:	4718      	bx	r3

0800ee78 <get_message_typesupport_handle_function>:
 800ee78:	b510      	push	{r4, lr}
 800ee7a:	4604      	mov	r4, r0
 800ee7c:	6800      	ldr	r0, [r0, #0]
 800ee7e:	f7f1 f9a7 	bl	80001d0 <strcmp>
 800ee82:	2800      	cmp	r0, #0
 800ee84:	bf0c      	ite	eq
 800ee86:	4620      	moveq	r0, r4
 800ee88:	2000      	movne	r0, #0
 800ee8a:	bd10      	pop	{r4, pc}

0800ee8c <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Float64MultiArray>:
 800ee8c:	f000 b88a 	b.w	800efa4 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__Float64MultiArray>

0800ee90 <_Float64MultiArray__max_serialized_size>:
 800ee90:	b500      	push	{lr}
 800ee92:	b083      	sub	sp, #12
 800ee94:	2301      	movs	r3, #1
 800ee96:	2100      	movs	r1, #0
 800ee98:	f10d 0007 	add.w	r0, sp, #7
 800ee9c:	f88d 3007 	strb.w	r3, [sp, #7]
 800eea0:	f000 f91c 	bl	800f0dc <max_serialized_size_std_msgs__msg__MultiArrayLayout>
 800eea4:	b003      	add	sp, #12
 800eea6:	f85d fb04 	ldr.w	pc, [sp], #4
 800eeaa:	bf00      	nop

0800eeac <get_serialized_size_std_msgs__msg__Float64MultiArray>:
 800eeac:	b570      	push	{r4, r5, r6, lr}
 800eeae:	4604      	mov	r4, r0
 800eeb0:	b160      	cbz	r0, 800eecc <get_serialized_size_std_msgs__msg__Float64MultiArray+0x20>
 800eeb2:	460e      	mov	r6, r1
 800eeb4:	f000 f8b6 	bl	800f024 <get_serialized_size_std_msgs__msg__MultiArrayLayout>
 800eeb8:	1835      	adds	r5, r6, r0
 800eeba:	4628      	mov	r0, r5
 800eebc:	2104      	movs	r1, #4
 800eebe:	6964      	ldr	r4, [r4, #20]
 800eec0:	f001 fa98 	bl	80103f4 <ucdr_alignment>
 800eec4:	1d03      	adds	r3, r0, #4
 800eec6:	441d      	add	r5, r3
 800eec8:	b90c      	cbnz	r4, 800eece <get_serialized_size_std_msgs__msg__Float64MultiArray+0x22>
 800eeca:	1ba8      	subs	r0, r5, r6
 800eecc:	bd70      	pop	{r4, r5, r6, pc}
 800eece:	4628      	mov	r0, r5
 800eed0:	2108      	movs	r1, #8
 800eed2:	f001 fa8f 	bl	80103f4 <ucdr_alignment>
 800eed6:	eb05 03c4 	add.w	r3, r5, r4, lsl #3
 800eeda:	181d      	adds	r5, r3, r0
 800eedc:	1ba8      	subs	r0, r5, r6
 800eede:	e7f5      	b.n	800eecc <get_serialized_size_std_msgs__msg__Float64MultiArray+0x20>

0800eee0 <_Float64MultiArray__cdr_deserialize>:
 800eee0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800eee2:	460c      	mov	r4, r1
 800eee4:	b083      	sub	sp, #12
 800eee6:	b1d1      	cbz	r1, 800ef1e <_Float64MultiArray__cdr_deserialize+0x3e>
 800eee8:	4606      	mov	r6, r0
 800eeea:	f000 f901 	bl	800f0f0 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__MultiArrayLayout>
 800eeee:	6843      	ldr	r3, [r0, #4]
 800eef0:	4621      	mov	r1, r4
 800eef2:	68db      	ldr	r3, [r3, #12]
 800eef4:	4630      	mov	r0, r6
 800eef6:	4798      	blx	r3
 800eef8:	69a7      	ldr	r7, [r4, #24]
 800eefa:	6921      	ldr	r1, [r4, #16]
 800eefc:	ab01      	add	r3, sp, #4
 800eefe:	463a      	mov	r2, r7
 800ef00:	4630      	mov	r0, r6
 800ef02:	f001 fb4d 	bl	80105a0 <ucdr_deserialize_sequence_double>
 800ef06:	9b01      	ldr	r3, [sp, #4]
 800ef08:	4605      	mov	r5, r0
 800ef0a:	b920      	cbnz	r0, 800ef16 <_Float64MultiArray__cdr_deserialize+0x36>
 800ef0c:	429f      	cmp	r7, r3
 800ef0e:	d30a      	bcc.n	800ef26 <_Float64MultiArray__cdr_deserialize+0x46>
 800ef10:	4628      	mov	r0, r5
 800ef12:	b003      	add	sp, #12
 800ef14:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ef16:	4628      	mov	r0, r5
 800ef18:	6163      	str	r3, [r4, #20]
 800ef1a:	b003      	add	sp, #12
 800ef1c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ef1e:	460d      	mov	r5, r1
 800ef20:	4628      	mov	r0, r5
 800ef22:	b003      	add	sp, #12
 800ef24:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ef26:	2301      	movs	r3, #1
 800ef28:	75b0      	strb	r0, [r6, #22]
 800ef2a:	7573      	strb	r3, [r6, #21]
 800ef2c:	2108      	movs	r1, #8
 800ef2e:	6160      	str	r0, [r4, #20]
 800ef30:	4630      	mov	r0, r6
 800ef32:	f001 fa75 	bl	8010420 <ucdr_align_to>
 800ef36:	9901      	ldr	r1, [sp, #4]
 800ef38:	4630      	mov	r0, r6
 800ef3a:	00c9      	lsls	r1, r1, #3
 800ef3c:	f001 faa6 	bl	801048c <ucdr_advance_buffer>
 800ef40:	4628      	mov	r0, r5
 800ef42:	b003      	add	sp, #12
 800ef44:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ef46:	bf00      	nop

0800ef48 <_Float64MultiArray__cdr_serialize>:
 800ef48:	b180      	cbz	r0, 800ef6c <_Float64MultiArray__cdr_serialize+0x24>
 800ef4a:	b538      	push	{r3, r4, r5, lr}
 800ef4c:	460d      	mov	r5, r1
 800ef4e:	4604      	mov	r4, r0
 800ef50:	f000 f8ce 	bl	800f0f0 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__MultiArrayLayout>
 800ef54:	6843      	ldr	r3, [r0, #4]
 800ef56:	4629      	mov	r1, r5
 800ef58:	689b      	ldr	r3, [r3, #8]
 800ef5a:	4620      	mov	r0, r4
 800ef5c:	4798      	blx	r3
 800ef5e:	e9d4 1204 	ldrd	r1, r2, [r4, #16]
 800ef62:	4628      	mov	r0, r5
 800ef64:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ef68:	f001 bb08 	b.w	801057c <ucdr_serialize_sequence_double>
 800ef6c:	4770      	bx	lr
 800ef6e:	bf00      	nop

0800ef70 <_Float64MultiArray__get_serialized_size>:
 800ef70:	b538      	push	{r3, r4, r5, lr}
 800ef72:	4604      	mov	r4, r0
 800ef74:	b150      	cbz	r0, 800ef8c <_Float64MultiArray__get_serialized_size+0x1c>
 800ef76:	2100      	movs	r1, #0
 800ef78:	f000 f854 	bl	800f024 <get_serialized_size_std_msgs__msg__MultiArrayLayout>
 800ef7c:	2104      	movs	r1, #4
 800ef7e:	6965      	ldr	r5, [r4, #20]
 800ef80:	4604      	mov	r4, r0
 800ef82:	f001 fa37 	bl	80103f4 <ucdr_alignment>
 800ef86:	4404      	add	r4, r0
 800ef88:	3404      	adds	r4, #4
 800ef8a:	b90d      	cbnz	r5, 800ef90 <_Float64MultiArray__get_serialized_size+0x20>
 800ef8c:	4620      	mov	r0, r4
 800ef8e:	bd38      	pop	{r3, r4, r5, pc}
 800ef90:	2108      	movs	r1, #8
 800ef92:	4620      	mov	r0, r4
 800ef94:	f001 fa2e 	bl	80103f4 <ucdr_alignment>
 800ef98:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800ef9c:	4404      	add	r4, r0
 800ef9e:	4620      	mov	r0, r4
 800efa0:	bd38      	pop	{r3, r4, r5, pc}
 800efa2:	bf00      	nop

0800efa4 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__Float64MultiArray>:
 800efa4:	4800      	ldr	r0, [pc, #0]	@ (800efa8 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__Float64MultiArray+0x4>)
 800efa6:	4770      	bx	lr
 800efa8:	20000064 	.word	0x20000064

0800efac <_MultiArrayLayout__max_serialized_size>:
 800efac:	b508      	push	{r3, lr}
 800efae:	2104      	movs	r1, #4
 800efb0:	2000      	movs	r0, #0
 800efb2:	f001 fa1f 	bl	80103f4 <ucdr_alignment>
 800efb6:	3004      	adds	r0, #4
 800efb8:	bd08      	pop	{r3, pc}
 800efba:	bf00      	nop

0800efbc <get_serialized_size_std_msgs__msg__MultiArrayLayout.part.0>:
 800efbc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800efc0:	f8d0 8004 	ldr.w	r8, [r0, #4]
 800efc4:	4689      	mov	r9, r1
 800efc6:	4607      	mov	r7, r0
 800efc8:	4608      	mov	r0, r1
 800efca:	2104      	movs	r1, #4
 800efcc:	f001 fa12 	bl	80103f4 <ucdr_alignment>
 800efd0:	f109 0304 	add.w	r3, r9, #4
 800efd4:	18c6      	adds	r6, r0, r3
 800efd6:	f1b8 0f00 	cmp.w	r8, #0
 800efda:	d018      	beq.n	800f00e <get_serialized_size_std_msgs__msg__MultiArrayLayout.part.0+0x52>
 800efdc:	2500      	movs	r5, #0
 800efde:	f008 fa2b 	bl	8017438 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__MultiArrayDimension>
 800efe2:	683a      	ldr	r2, [r7, #0]
 800efe4:	6843      	ldr	r3, [r0, #4]
 800efe6:	eb05 0085 	add.w	r0, r5, r5, lsl #2
 800efea:	4631      	mov	r1, r6
 800efec:	695b      	ldr	r3, [r3, #20]
 800efee:	eb02 0080 	add.w	r0, r2, r0, lsl #2
 800eff2:	4798      	blx	r3
 800eff4:	2804      	cmp	r0, #4
 800eff6:	4601      	mov	r1, r0
 800eff8:	4604      	mov	r4, r0
 800effa:	bf28      	it	cs
 800effc:	2104      	movcs	r1, #4
 800effe:	4630      	mov	r0, r6
 800f000:	f001 f9f8 	bl	80103f4 <ucdr_alignment>
 800f004:	3501      	adds	r5, #1
 800f006:	4404      	add	r4, r0
 800f008:	45a8      	cmp	r8, r5
 800f00a:	4426      	add	r6, r4
 800f00c:	d1e7      	bne.n	800efde <get_serialized_size_std_msgs__msg__MultiArrayLayout.part.0+0x22>
 800f00e:	2104      	movs	r1, #4
 800f010:	4630      	mov	r0, r6
 800f012:	f001 f9ef 	bl	80103f4 <ucdr_alignment>
 800f016:	f1c9 0904 	rsb	r9, r9, #4
 800f01a:	444e      	add	r6, r9
 800f01c:	4430      	add	r0, r6
 800f01e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f022:	bf00      	nop

0800f024 <get_serialized_size_std_msgs__msg__MultiArrayLayout>:
 800f024:	b108      	cbz	r0, 800f02a <get_serialized_size_std_msgs__msg__MultiArrayLayout+0x6>
 800f026:	f7ff bfc9 	b.w	800efbc <get_serialized_size_std_msgs__msg__MultiArrayLayout.part.0>
 800f02a:	4770      	bx	lr

0800f02c <_MultiArrayLayout__get_serialized_size>:
 800f02c:	b110      	cbz	r0, 800f034 <_MultiArrayLayout__get_serialized_size+0x8>
 800f02e:	2100      	movs	r1, #0
 800f030:	f7ff bfc4 	b.w	800efbc <get_serialized_size_std_msgs__msg__MultiArrayLayout.part.0>
 800f034:	4770      	bx	lr
 800f036:	bf00      	nop

0800f038 <_MultiArrayLayout__cdr_deserialize>:
 800f038:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f03a:	460d      	mov	r5, r1
 800f03c:	b083      	sub	sp, #12
 800f03e:	b329      	cbz	r1, 800f08c <_MultiArrayLayout__cdr_deserialize+0x54>
 800f040:	a901      	add	r1, sp, #4
 800f042:	4607      	mov	r7, r0
 800f044:	f000 fbce 	bl	800f7e4 <ucdr_deserialize_uint32_t>
 800f048:	9b01      	ldr	r3, [sp, #4]
 800f04a:	68aa      	ldr	r2, [r5, #8]
 800f04c:	429a      	cmp	r2, r3
 800f04e:	d31a      	bcc.n	800f086 <_MultiArrayLayout__cdr_deserialize+0x4e>
 800f050:	606b      	str	r3, [r5, #4]
 800f052:	b18b      	cbz	r3, 800f078 <_MultiArrayLayout__cdr_deserialize+0x40>
 800f054:	2400      	movs	r4, #0
 800f056:	4626      	mov	r6, r4
 800f058:	e002      	b.n	800f060 <_MultiArrayLayout__cdr_deserialize+0x28>
 800f05a:	9b01      	ldr	r3, [sp, #4]
 800f05c:	429e      	cmp	r6, r3
 800f05e:	d20b      	bcs.n	800f078 <_MultiArrayLayout__cdr_deserialize+0x40>
 800f060:	f008 f9ea 	bl	8017438 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__MultiArrayDimension>
 800f064:	6829      	ldr	r1, [r5, #0]
 800f066:	6843      	ldr	r3, [r0, #4]
 800f068:	4421      	add	r1, r4
 800f06a:	68db      	ldr	r3, [r3, #12]
 800f06c:	4638      	mov	r0, r7
 800f06e:	4798      	blx	r3
 800f070:	3601      	adds	r6, #1
 800f072:	3414      	adds	r4, #20
 800f074:	2800      	cmp	r0, #0
 800f076:	d1f0      	bne.n	800f05a <_MultiArrayLayout__cdr_deserialize+0x22>
 800f078:	f105 010c 	add.w	r1, r5, #12
 800f07c:	4638      	mov	r0, r7
 800f07e:	f000 fbb1 	bl	800f7e4 <ucdr_deserialize_uint32_t>
 800f082:	b003      	add	sp, #12
 800f084:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f086:	2000      	movs	r0, #0
 800f088:	b003      	add	sp, #12
 800f08a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f08c:	4608      	mov	r0, r1
 800f08e:	b003      	add	sp, #12
 800f090:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f092:	bf00      	nop

0800f094 <_MultiArrayLayout__cdr_serialize>:
 800f094:	b308      	cbz	r0, 800f0da <_MultiArrayLayout__cdr_serialize+0x46>
 800f096:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f098:	6847      	ldr	r7, [r0, #4]
 800f09a:	460e      	mov	r6, r1
 800f09c:	4605      	mov	r5, r0
 800f09e:	4608      	mov	r0, r1
 800f0a0:	4639      	mov	r1, r7
 800f0a2:	f000 fa6f 	bl	800f584 <ucdr_serialize_uint32_t>
 800f0a6:	b190      	cbz	r0, 800f0ce <_MultiArrayLayout__cdr_serialize+0x3a>
 800f0a8:	b18f      	cbz	r7, 800f0ce <_MultiArrayLayout__cdr_serialize+0x3a>
 800f0aa:	2400      	movs	r4, #0
 800f0ac:	e001      	b.n	800f0b2 <_MultiArrayLayout__cdr_serialize+0x1e>
 800f0ae:	42a7      	cmp	r7, r4
 800f0b0:	d00d      	beq.n	800f0ce <_MultiArrayLayout__cdr_serialize+0x3a>
 800f0b2:	f008 f9c1 	bl	8017438 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__MultiArrayDimension>
 800f0b6:	682a      	ldr	r2, [r5, #0]
 800f0b8:	6843      	ldr	r3, [r0, #4]
 800f0ba:	eb04 0084 	add.w	r0, r4, r4, lsl #2
 800f0be:	689b      	ldr	r3, [r3, #8]
 800f0c0:	eb02 0080 	add.w	r0, r2, r0, lsl #2
 800f0c4:	4631      	mov	r1, r6
 800f0c6:	3401      	adds	r4, #1
 800f0c8:	4798      	blx	r3
 800f0ca:	2800      	cmp	r0, #0
 800f0cc:	d1ef      	bne.n	800f0ae <_MultiArrayLayout__cdr_serialize+0x1a>
 800f0ce:	68e9      	ldr	r1, [r5, #12]
 800f0d0:	4630      	mov	r0, r6
 800f0d2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800f0d6:	f000 ba55 	b.w	800f584 <ucdr_serialize_uint32_t>
 800f0da:	4770      	bx	lr

0800f0dc <max_serialized_size_std_msgs__msg__MultiArrayLayout>:
 800f0dc:	b508      	push	{r3, lr}
 800f0de:	4603      	mov	r3, r0
 800f0e0:	2200      	movs	r2, #0
 800f0e2:	4608      	mov	r0, r1
 800f0e4:	701a      	strb	r2, [r3, #0]
 800f0e6:	2104      	movs	r1, #4
 800f0e8:	f001 f984 	bl	80103f4 <ucdr_alignment>
 800f0ec:	3004      	adds	r0, #4
 800f0ee:	bd08      	pop	{r3, pc}

0800f0f0 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__MultiArrayLayout>:
 800f0f0:	4800      	ldr	r0, [pc, #0]	@ (800f0f4 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__MultiArrayLayout+0x4>)
 800f0f2:	4770      	bx	lr
 800f0f4:	2000008c 	.word	0x2000008c

0800f0f8 <ucdr_serialize_bool>:
 800f0f8:	b538      	push	{r3, r4, r5, lr}
 800f0fa:	460d      	mov	r5, r1
 800f0fc:	2101      	movs	r1, #1
 800f0fe:	4604      	mov	r4, r0
 800f100:	f001 f92e 	bl	8010360 <ucdr_check_final_buffer_behavior>
 800f104:	b148      	cbz	r0, 800f11a <ucdr_serialize_bool+0x22>
 800f106:	68a3      	ldr	r3, [r4, #8]
 800f108:	701d      	strb	r5, [r3, #0]
 800f10a:	68a2      	ldr	r2, [r4, #8]
 800f10c:	6923      	ldr	r3, [r4, #16]
 800f10e:	3201      	adds	r2, #1
 800f110:	3301      	adds	r3, #1
 800f112:	2101      	movs	r1, #1
 800f114:	60a2      	str	r2, [r4, #8]
 800f116:	6123      	str	r3, [r4, #16]
 800f118:	7561      	strb	r1, [r4, #21]
 800f11a:	7da0      	ldrb	r0, [r4, #22]
 800f11c:	f080 0001 	eor.w	r0, r0, #1
 800f120:	bd38      	pop	{r3, r4, r5, pc}
 800f122:	bf00      	nop

0800f124 <ucdr_deserialize_bool>:
 800f124:	b538      	push	{r3, r4, r5, lr}
 800f126:	460d      	mov	r5, r1
 800f128:	2101      	movs	r1, #1
 800f12a:	4604      	mov	r4, r0
 800f12c:	f001 f918 	bl	8010360 <ucdr_check_final_buffer_behavior>
 800f130:	b168      	cbz	r0, 800f14e <ucdr_deserialize_bool+0x2a>
 800f132:	68a2      	ldr	r2, [r4, #8]
 800f134:	6923      	ldr	r3, [r4, #16]
 800f136:	f812 1b01 	ldrb.w	r1, [r2], #1
 800f13a:	3900      	subs	r1, #0
 800f13c:	f103 0301 	add.w	r3, r3, #1
 800f140:	bf18      	it	ne
 800f142:	2101      	movne	r1, #1
 800f144:	2001      	movs	r0, #1
 800f146:	7029      	strb	r1, [r5, #0]
 800f148:	60a2      	str	r2, [r4, #8]
 800f14a:	6123      	str	r3, [r4, #16]
 800f14c:	7560      	strb	r0, [r4, #21]
 800f14e:	7da0      	ldrb	r0, [r4, #22]
 800f150:	f080 0001 	eor.w	r0, r0, #1
 800f154:	bd38      	pop	{r3, r4, r5, pc}
 800f156:	bf00      	nop

0800f158 <ucdr_serialize_uint8_t>:
 800f158:	b538      	push	{r3, r4, r5, lr}
 800f15a:	460d      	mov	r5, r1
 800f15c:	2101      	movs	r1, #1
 800f15e:	4604      	mov	r4, r0
 800f160:	f001 f8fe 	bl	8010360 <ucdr_check_final_buffer_behavior>
 800f164:	b148      	cbz	r0, 800f17a <ucdr_serialize_uint8_t+0x22>
 800f166:	68a3      	ldr	r3, [r4, #8]
 800f168:	701d      	strb	r5, [r3, #0]
 800f16a:	68a2      	ldr	r2, [r4, #8]
 800f16c:	6923      	ldr	r3, [r4, #16]
 800f16e:	3201      	adds	r2, #1
 800f170:	3301      	adds	r3, #1
 800f172:	2101      	movs	r1, #1
 800f174:	60a2      	str	r2, [r4, #8]
 800f176:	6123      	str	r3, [r4, #16]
 800f178:	7561      	strb	r1, [r4, #21]
 800f17a:	7da0      	ldrb	r0, [r4, #22]
 800f17c:	f080 0001 	eor.w	r0, r0, #1
 800f180:	bd38      	pop	{r3, r4, r5, pc}
 800f182:	bf00      	nop

0800f184 <ucdr_deserialize_uint8_t>:
 800f184:	b538      	push	{r3, r4, r5, lr}
 800f186:	460d      	mov	r5, r1
 800f188:	2101      	movs	r1, #1
 800f18a:	4604      	mov	r4, r0
 800f18c:	f001 f8e8 	bl	8010360 <ucdr_check_final_buffer_behavior>
 800f190:	b150      	cbz	r0, 800f1a8 <ucdr_deserialize_uint8_t+0x24>
 800f192:	68a3      	ldr	r3, [r4, #8]
 800f194:	781b      	ldrb	r3, [r3, #0]
 800f196:	702b      	strb	r3, [r5, #0]
 800f198:	68a2      	ldr	r2, [r4, #8]
 800f19a:	6923      	ldr	r3, [r4, #16]
 800f19c:	3201      	adds	r2, #1
 800f19e:	3301      	adds	r3, #1
 800f1a0:	2101      	movs	r1, #1
 800f1a2:	60a2      	str	r2, [r4, #8]
 800f1a4:	6123      	str	r3, [r4, #16]
 800f1a6:	7561      	strb	r1, [r4, #21]
 800f1a8:	7da0      	ldrb	r0, [r4, #22]
 800f1aa:	f080 0001 	eor.w	r0, r0, #1
 800f1ae:	bd38      	pop	{r3, r4, r5, pc}

0800f1b0 <ucdr_serialize_uint16_t>:
 800f1b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f1b4:	b082      	sub	sp, #8
 800f1b6:	460b      	mov	r3, r1
 800f1b8:	2102      	movs	r1, #2
 800f1ba:	4604      	mov	r4, r0
 800f1bc:	f8ad 3006 	strh.w	r3, [sp, #6]
 800f1c0:	f001 f920 	bl	8010404 <ucdr_buffer_alignment>
 800f1c4:	4601      	mov	r1, r0
 800f1c6:	4620      	mov	r0, r4
 800f1c8:	7d67      	ldrb	r7, [r4, #21]
 800f1ca:	f001 f95f 	bl	801048c <ucdr_advance_buffer>
 800f1ce:	4620      	mov	r0, r4
 800f1d0:	2102      	movs	r1, #2
 800f1d2:	f001 f8b9 	bl	8010348 <ucdr_check_buffer_available_for>
 800f1d6:	bb78      	cbnz	r0, 800f238 <ucdr_serialize_uint16_t+0x88>
 800f1d8:	e9d4 5601 	ldrd	r5, r6, [r4, #4]
 800f1dc:	42b5      	cmp	r5, r6
 800f1de:	d926      	bls.n	800f22e <ucdr_serialize_uint16_t+0x7e>
 800f1e0:	6922      	ldr	r2, [r4, #16]
 800f1e2:	60a5      	str	r5, [r4, #8]
 800f1e4:	1bad      	subs	r5, r5, r6
 800f1e6:	442a      	add	r2, r5
 800f1e8:	f1c5 0802 	rsb	r8, r5, #2
 800f1ec:	6122      	str	r2, [r4, #16]
 800f1ee:	4641      	mov	r1, r8
 800f1f0:	4620      	mov	r0, r4
 800f1f2:	f001 f8b5 	bl	8010360 <ucdr_check_final_buffer_behavior>
 800f1f6:	2800      	cmp	r0, #0
 800f1f8:	d03b      	beq.n	800f272 <ucdr_serialize_uint16_t+0xc2>
 800f1fa:	7d23      	ldrb	r3, [r4, #20]
 800f1fc:	2b01      	cmp	r3, #1
 800f1fe:	d04a      	beq.n	800f296 <ucdr_serialize_uint16_t+0xe6>
 800f200:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800f204:	7033      	strb	r3, [r6, #0]
 800f206:	2d00      	cmp	r5, #0
 800f208:	d040      	beq.n	800f28c <ucdr_serialize_uint16_t+0xdc>
 800f20a:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800f20e:	7073      	strb	r3, [r6, #1]
 800f210:	6923      	ldr	r3, [r4, #16]
 800f212:	68a2      	ldr	r2, [r4, #8]
 800f214:	7da0      	ldrb	r0, [r4, #22]
 800f216:	3302      	adds	r3, #2
 800f218:	1b5b      	subs	r3, r3, r5
 800f21a:	4442      	add	r2, r8
 800f21c:	2102      	movs	r1, #2
 800f21e:	f080 0001 	eor.w	r0, r0, #1
 800f222:	6123      	str	r3, [r4, #16]
 800f224:	60a2      	str	r2, [r4, #8]
 800f226:	7561      	strb	r1, [r4, #21]
 800f228:	b002      	add	sp, #8
 800f22a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f22e:	2102      	movs	r1, #2
 800f230:	4620      	mov	r0, r4
 800f232:	f001 f895 	bl	8010360 <ucdr_check_final_buffer_behavior>
 800f236:	b190      	cbz	r0, 800f25e <ucdr_serialize_uint16_t+0xae>
 800f238:	7d23      	ldrb	r3, [r4, #20]
 800f23a:	2b01      	cmp	r3, #1
 800f23c:	68a3      	ldr	r3, [r4, #8]
 800f23e:	d014      	beq.n	800f26a <ucdr_serialize_uint16_t+0xba>
 800f240:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800f244:	701a      	strb	r2, [r3, #0]
 800f246:	68a3      	ldr	r3, [r4, #8]
 800f248:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800f24c:	705a      	strb	r2, [r3, #1]
 800f24e:	68a2      	ldr	r2, [r4, #8]
 800f250:	6923      	ldr	r3, [r4, #16]
 800f252:	3202      	adds	r2, #2
 800f254:	3302      	adds	r3, #2
 800f256:	2102      	movs	r1, #2
 800f258:	60a2      	str	r2, [r4, #8]
 800f25a:	6123      	str	r3, [r4, #16]
 800f25c:	7561      	strb	r1, [r4, #21]
 800f25e:	7da0      	ldrb	r0, [r4, #22]
 800f260:	f080 0001 	eor.w	r0, r0, #1
 800f264:	b002      	add	sp, #8
 800f266:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f26a:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 800f26e:	801a      	strh	r2, [r3, #0]
 800f270:	e7ed      	b.n	800f24e <ucdr_serialize_uint16_t+0x9e>
 800f272:	68a2      	ldr	r2, [r4, #8]
 800f274:	6923      	ldr	r3, [r4, #16]
 800f276:	7da0      	ldrb	r0, [r4, #22]
 800f278:	7567      	strb	r7, [r4, #21]
 800f27a:	1b52      	subs	r2, r2, r5
 800f27c:	1b5b      	subs	r3, r3, r5
 800f27e:	f080 0001 	eor.w	r0, r0, #1
 800f282:	60a2      	str	r2, [r4, #8]
 800f284:	6123      	str	r3, [r4, #16]
 800f286:	b002      	add	sp, #8
 800f288:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f28c:	68a3      	ldr	r3, [r4, #8]
 800f28e:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800f292:	701a      	strb	r2, [r3, #0]
 800f294:	e7bc      	b.n	800f210 <ucdr_serialize_uint16_t+0x60>
 800f296:	4630      	mov	r0, r6
 800f298:	f10d 0606 	add.w	r6, sp, #6
 800f29c:	4631      	mov	r1, r6
 800f29e:	462a      	mov	r2, r5
 800f2a0:	f00a fdcf 	bl	8019e42 <memcpy>
 800f2a4:	68a0      	ldr	r0, [r4, #8]
 800f2a6:	4642      	mov	r2, r8
 800f2a8:	1971      	adds	r1, r6, r5
 800f2aa:	f00a fdca 	bl	8019e42 <memcpy>
 800f2ae:	e7af      	b.n	800f210 <ucdr_serialize_uint16_t+0x60>

0800f2b0 <ucdr_serialize_endian_uint16_t>:
 800f2b0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800f2b4:	b083      	sub	sp, #12
 800f2b6:	460d      	mov	r5, r1
 800f2b8:	2102      	movs	r1, #2
 800f2ba:	4604      	mov	r4, r0
 800f2bc:	f8ad 2006 	strh.w	r2, [sp, #6]
 800f2c0:	f001 f8a0 	bl	8010404 <ucdr_buffer_alignment>
 800f2c4:	4601      	mov	r1, r0
 800f2c6:	4620      	mov	r0, r4
 800f2c8:	f894 8015 	ldrb.w	r8, [r4, #21]
 800f2cc:	f001 f8de 	bl	801048c <ucdr_advance_buffer>
 800f2d0:	4620      	mov	r0, r4
 800f2d2:	2102      	movs	r1, #2
 800f2d4:	f001 f838 	bl	8010348 <ucdr_check_buffer_available_for>
 800f2d8:	bb70      	cbnz	r0, 800f338 <ucdr_serialize_endian_uint16_t+0x88>
 800f2da:	e9d4 6701 	ldrd	r6, r7, [r4, #4]
 800f2de:	42be      	cmp	r6, r7
 800f2e0:	d925      	bls.n	800f32e <ucdr_serialize_endian_uint16_t+0x7e>
 800f2e2:	6922      	ldr	r2, [r4, #16]
 800f2e4:	60a6      	str	r6, [r4, #8]
 800f2e6:	1bf6      	subs	r6, r6, r7
 800f2e8:	4432      	add	r2, r6
 800f2ea:	f1c6 0902 	rsb	r9, r6, #2
 800f2ee:	6122      	str	r2, [r4, #16]
 800f2f0:	4649      	mov	r1, r9
 800f2f2:	4620      	mov	r0, r4
 800f2f4:	f001 f834 	bl	8010360 <ucdr_check_final_buffer_behavior>
 800f2f8:	2800      	cmp	r0, #0
 800f2fa:	d039      	beq.n	800f370 <ucdr_serialize_endian_uint16_t+0xc0>
 800f2fc:	2d01      	cmp	r5, #1
 800f2fe:	d04a      	beq.n	800f396 <ucdr_serialize_endian_uint16_t+0xe6>
 800f300:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800f304:	703b      	strb	r3, [r7, #0]
 800f306:	2e00      	cmp	r6, #0
 800f308:	d040      	beq.n	800f38c <ucdr_serialize_endian_uint16_t+0xdc>
 800f30a:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800f30e:	707b      	strb	r3, [r7, #1]
 800f310:	6923      	ldr	r3, [r4, #16]
 800f312:	68a2      	ldr	r2, [r4, #8]
 800f314:	7da0      	ldrb	r0, [r4, #22]
 800f316:	3302      	adds	r3, #2
 800f318:	1b9b      	subs	r3, r3, r6
 800f31a:	444a      	add	r2, r9
 800f31c:	2102      	movs	r1, #2
 800f31e:	f080 0001 	eor.w	r0, r0, #1
 800f322:	6123      	str	r3, [r4, #16]
 800f324:	60a2      	str	r2, [r4, #8]
 800f326:	7561      	strb	r1, [r4, #21]
 800f328:	b003      	add	sp, #12
 800f32a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800f32e:	2102      	movs	r1, #2
 800f330:	4620      	mov	r0, r4
 800f332:	f001 f815 	bl	8010360 <ucdr_check_final_buffer_behavior>
 800f336:	b188      	cbz	r0, 800f35c <ucdr_serialize_endian_uint16_t+0xac>
 800f338:	2d01      	cmp	r5, #1
 800f33a:	68a3      	ldr	r3, [r4, #8]
 800f33c:	d014      	beq.n	800f368 <ucdr_serialize_endian_uint16_t+0xb8>
 800f33e:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800f342:	701a      	strb	r2, [r3, #0]
 800f344:	68a3      	ldr	r3, [r4, #8]
 800f346:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800f34a:	705a      	strb	r2, [r3, #1]
 800f34c:	68a2      	ldr	r2, [r4, #8]
 800f34e:	6923      	ldr	r3, [r4, #16]
 800f350:	3202      	adds	r2, #2
 800f352:	3302      	adds	r3, #2
 800f354:	2102      	movs	r1, #2
 800f356:	60a2      	str	r2, [r4, #8]
 800f358:	6123      	str	r3, [r4, #16]
 800f35a:	7561      	strb	r1, [r4, #21]
 800f35c:	7da0      	ldrb	r0, [r4, #22]
 800f35e:	f080 0001 	eor.w	r0, r0, #1
 800f362:	b003      	add	sp, #12
 800f364:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800f368:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 800f36c:	801a      	strh	r2, [r3, #0]
 800f36e:	e7ed      	b.n	800f34c <ucdr_serialize_endian_uint16_t+0x9c>
 800f370:	68a2      	ldr	r2, [r4, #8]
 800f372:	6923      	ldr	r3, [r4, #16]
 800f374:	7da0      	ldrb	r0, [r4, #22]
 800f376:	f884 8015 	strb.w	r8, [r4, #21]
 800f37a:	1b92      	subs	r2, r2, r6
 800f37c:	1b9b      	subs	r3, r3, r6
 800f37e:	f080 0001 	eor.w	r0, r0, #1
 800f382:	60a2      	str	r2, [r4, #8]
 800f384:	6123      	str	r3, [r4, #16]
 800f386:	b003      	add	sp, #12
 800f388:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800f38c:	68a3      	ldr	r3, [r4, #8]
 800f38e:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800f392:	701a      	strb	r2, [r3, #0]
 800f394:	e7bc      	b.n	800f310 <ucdr_serialize_endian_uint16_t+0x60>
 800f396:	f10d 0506 	add.w	r5, sp, #6
 800f39a:	4629      	mov	r1, r5
 800f39c:	4632      	mov	r2, r6
 800f39e:	4638      	mov	r0, r7
 800f3a0:	f00a fd4f 	bl	8019e42 <memcpy>
 800f3a4:	68a0      	ldr	r0, [r4, #8]
 800f3a6:	464a      	mov	r2, r9
 800f3a8:	19a9      	adds	r1, r5, r6
 800f3aa:	f00a fd4a 	bl	8019e42 <memcpy>
 800f3ae:	e7af      	b.n	800f310 <ucdr_serialize_endian_uint16_t+0x60>

0800f3b0 <ucdr_deserialize_uint16_t>:
 800f3b0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f3b4:	460d      	mov	r5, r1
 800f3b6:	2102      	movs	r1, #2
 800f3b8:	4604      	mov	r4, r0
 800f3ba:	f001 f823 	bl	8010404 <ucdr_buffer_alignment>
 800f3be:	4601      	mov	r1, r0
 800f3c0:	4620      	mov	r0, r4
 800f3c2:	f894 8015 	ldrb.w	r8, [r4, #21]
 800f3c6:	f001 f861 	bl	801048c <ucdr_advance_buffer>
 800f3ca:	4620      	mov	r0, r4
 800f3cc:	2102      	movs	r1, #2
 800f3ce:	f000 ffbb 	bl	8010348 <ucdr_check_buffer_available_for>
 800f3d2:	bb60      	cbnz	r0, 800f42e <ucdr_deserialize_uint16_t+0x7e>
 800f3d4:	e9d4 6701 	ldrd	r6, r7, [r4, #4]
 800f3d8:	42be      	cmp	r6, r7
 800f3da:	d923      	bls.n	800f424 <ucdr_deserialize_uint16_t+0x74>
 800f3dc:	6922      	ldr	r2, [r4, #16]
 800f3de:	60a6      	str	r6, [r4, #8]
 800f3e0:	1bf6      	subs	r6, r6, r7
 800f3e2:	4432      	add	r2, r6
 800f3e4:	f1c6 0902 	rsb	r9, r6, #2
 800f3e8:	6122      	str	r2, [r4, #16]
 800f3ea:	4649      	mov	r1, r9
 800f3ec:	4620      	mov	r0, r4
 800f3ee:	f000 ffb7 	bl	8010360 <ucdr_check_final_buffer_behavior>
 800f3f2:	2800      	cmp	r0, #0
 800f3f4:	d034      	beq.n	800f460 <ucdr_deserialize_uint16_t+0xb0>
 800f3f6:	7d23      	ldrb	r3, [r4, #20]
 800f3f8:	2b01      	cmp	r3, #1
 800f3fa:	d042      	beq.n	800f482 <ucdr_deserialize_uint16_t+0xd2>
 800f3fc:	787b      	ldrb	r3, [r7, #1]
 800f3fe:	702b      	strb	r3, [r5, #0]
 800f400:	2e00      	cmp	r6, #0
 800f402:	d03a      	beq.n	800f47a <ucdr_deserialize_uint16_t+0xca>
 800f404:	783b      	ldrb	r3, [r7, #0]
 800f406:	706b      	strb	r3, [r5, #1]
 800f408:	6923      	ldr	r3, [r4, #16]
 800f40a:	68a2      	ldr	r2, [r4, #8]
 800f40c:	7da0      	ldrb	r0, [r4, #22]
 800f40e:	2102      	movs	r1, #2
 800f410:	3302      	adds	r3, #2
 800f412:	1b9b      	subs	r3, r3, r6
 800f414:	444a      	add	r2, r9
 800f416:	7561      	strb	r1, [r4, #21]
 800f418:	6123      	str	r3, [r4, #16]
 800f41a:	60a2      	str	r2, [r4, #8]
 800f41c:	f080 0001 	eor.w	r0, r0, #1
 800f420:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f424:	2102      	movs	r1, #2
 800f426:	4620      	mov	r0, r4
 800f428:	f000 ff9a 	bl	8010360 <ucdr_check_final_buffer_behavior>
 800f42c:	b180      	cbz	r0, 800f450 <ucdr_deserialize_uint16_t+0xa0>
 800f42e:	7d23      	ldrb	r3, [r4, #20]
 800f430:	2b01      	cmp	r3, #1
 800f432:	68a3      	ldr	r3, [r4, #8]
 800f434:	d011      	beq.n	800f45a <ucdr_deserialize_uint16_t+0xaa>
 800f436:	785b      	ldrb	r3, [r3, #1]
 800f438:	702b      	strb	r3, [r5, #0]
 800f43a:	68a3      	ldr	r3, [r4, #8]
 800f43c:	781b      	ldrb	r3, [r3, #0]
 800f43e:	706b      	strb	r3, [r5, #1]
 800f440:	68a2      	ldr	r2, [r4, #8]
 800f442:	6923      	ldr	r3, [r4, #16]
 800f444:	3202      	adds	r2, #2
 800f446:	3302      	adds	r3, #2
 800f448:	2102      	movs	r1, #2
 800f44a:	60a2      	str	r2, [r4, #8]
 800f44c:	6123      	str	r3, [r4, #16]
 800f44e:	7561      	strb	r1, [r4, #21]
 800f450:	7da0      	ldrb	r0, [r4, #22]
 800f452:	f080 0001 	eor.w	r0, r0, #1
 800f456:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f45a:	881b      	ldrh	r3, [r3, #0]
 800f45c:	802b      	strh	r3, [r5, #0]
 800f45e:	e7ef      	b.n	800f440 <ucdr_deserialize_uint16_t+0x90>
 800f460:	68a2      	ldr	r2, [r4, #8]
 800f462:	6923      	ldr	r3, [r4, #16]
 800f464:	7da0      	ldrb	r0, [r4, #22]
 800f466:	f884 8015 	strb.w	r8, [r4, #21]
 800f46a:	1b92      	subs	r2, r2, r6
 800f46c:	1b9b      	subs	r3, r3, r6
 800f46e:	60a2      	str	r2, [r4, #8]
 800f470:	6123      	str	r3, [r4, #16]
 800f472:	f080 0001 	eor.w	r0, r0, #1
 800f476:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f47a:	68a3      	ldr	r3, [r4, #8]
 800f47c:	781b      	ldrb	r3, [r3, #0]
 800f47e:	706b      	strb	r3, [r5, #1]
 800f480:	e7c2      	b.n	800f408 <ucdr_deserialize_uint16_t+0x58>
 800f482:	4639      	mov	r1, r7
 800f484:	4632      	mov	r2, r6
 800f486:	4628      	mov	r0, r5
 800f488:	f00a fcdb 	bl	8019e42 <memcpy>
 800f48c:	68a1      	ldr	r1, [r4, #8]
 800f48e:	464a      	mov	r2, r9
 800f490:	19a8      	adds	r0, r5, r6
 800f492:	f00a fcd6 	bl	8019e42 <memcpy>
 800f496:	e7b7      	b.n	800f408 <ucdr_deserialize_uint16_t+0x58>

0800f498 <ucdr_deserialize_endian_uint16_t>:
 800f498:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f49c:	460e      	mov	r6, r1
 800f49e:	2102      	movs	r1, #2
 800f4a0:	4604      	mov	r4, r0
 800f4a2:	4615      	mov	r5, r2
 800f4a4:	f000 ffae 	bl	8010404 <ucdr_buffer_alignment>
 800f4a8:	4601      	mov	r1, r0
 800f4aa:	4620      	mov	r0, r4
 800f4ac:	f894 9015 	ldrb.w	r9, [r4, #21]
 800f4b0:	f000 ffec 	bl	801048c <ucdr_advance_buffer>
 800f4b4:	4620      	mov	r0, r4
 800f4b6:	2102      	movs	r1, #2
 800f4b8:	f000 ff46 	bl	8010348 <ucdr_check_buffer_available_for>
 800f4bc:	bb70      	cbnz	r0, 800f51c <ucdr_deserialize_endian_uint16_t+0x84>
 800f4be:	e9d4 7801 	ldrd	r7, r8, [r4, #4]
 800f4c2:	4547      	cmp	r7, r8
 800f4c4:	d925      	bls.n	800f512 <ucdr_deserialize_endian_uint16_t+0x7a>
 800f4c6:	6922      	ldr	r2, [r4, #16]
 800f4c8:	60a7      	str	r7, [r4, #8]
 800f4ca:	eba7 0708 	sub.w	r7, r7, r8
 800f4ce:	443a      	add	r2, r7
 800f4d0:	f1c7 0a02 	rsb	sl, r7, #2
 800f4d4:	6122      	str	r2, [r4, #16]
 800f4d6:	4651      	mov	r1, sl
 800f4d8:	4620      	mov	r0, r4
 800f4da:	f000 ff41 	bl	8010360 <ucdr_check_final_buffer_behavior>
 800f4de:	2800      	cmp	r0, #0
 800f4e0:	d034      	beq.n	800f54c <ucdr_deserialize_endian_uint16_t+0xb4>
 800f4e2:	2e01      	cmp	r6, #1
 800f4e4:	d043      	beq.n	800f56e <ucdr_deserialize_endian_uint16_t+0xd6>
 800f4e6:	f898 3001 	ldrb.w	r3, [r8, #1]
 800f4ea:	702b      	strb	r3, [r5, #0]
 800f4ec:	2f00      	cmp	r7, #0
 800f4ee:	d03a      	beq.n	800f566 <ucdr_deserialize_endian_uint16_t+0xce>
 800f4f0:	f898 3000 	ldrb.w	r3, [r8]
 800f4f4:	706b      	strb	r3, [r5, #1]
 800f4f6:	6923      	ldr	r3, [r4, #16]
 800f4f8:	68a2      	ldr	r2, [r4, #8]
 800f4fa:	7da0      	ldrb	r0, [r4, #22]
 800f4fc:	2102      	movs	r1, #2
 800f4fe:	3302      	adds	r3, #2
 800f500:	1bdb      	subs	r3, r3, r7
 800f502:	4452      	add	r2, sl
 800f504:	7561      	strb	r1, [r4, #21]
 800f506:	6123      	str	r3, [r4, #16]
 800f508:	60a2      	str	r2, [r4, #8]
 800f50a:	f080 0001 	eor.w	r0, r0, #1
 800f50e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f512:	2102      	movs	r1, #2
 800f514:	4620      	mov	r0, r4
 800f516:	f000 ff23 	bl	8010360 <ucdr_check_final_buffer_behavior>
 800f51a:	b178      	cbz	r0, 800f53c <ucdr_deserialize_endian_uint16_t+0xa4>
 800f51c:	2e01      	cmp	r6, #1
 800f51e:	68a3      	ldr	r3, [r4, #8]
 800f520:	d011      	beq.n	800f546 <ucdr_deserialize_endian_uint16_t+0xae>
 800f522:	785b      	ldrb	r3, [r3, #1]
 800f524:	702b      	strb	r3, [r5, #0]
 800f526:	68a3      	ldr	r3, [r4, #8]
 800f528:	781b      	ldrb	r3, [r3, #0]
 800f52a:	706b      	strb	r3, [r5, #1]
 800f52c:	68a2      	ldr	r2, [r4, #8]
 800f52e:	6923      	ldr	r3, [r4, #16]
 800f530:	3202      	adds	r2, #2
 800f532:	3302      	adds	r3, #2
 800f534:	2102      	movs	r1, #2
 800f536:	60a2      	str	r2, [r4, #8]
 800f538:	6123      	str	r3, [r4, #16]
 800f53a:	7561      	strb	r1, [r4, #21]
 800f53c:	7da0      	ldrb	r0, [r4, #22]
 800f53e:	f080 0001 	eor.w	r0, r0, #1
 800f542:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f546:	881b      	ldrh	r3, [r3, #0]
 800f548:	802b      	strh	r3, [r5, #0]
 800f54a:	e7ef      	b.n	800f52c <ucdr_deserialize_endian_uint16_t+0x94>
 800f54c:	68a2      	ldr	r2, [r4, #8]
 800f54e:	6923      	ldr	r3, [r4, #16]
 800f550:	7da0      	ldrb	r0, [r4, #22]
 800f552:	f884 9015 	strb.w	r9, [r4, #21]
 800f556:	1bd2      	subs	r2, r2, r7
 800f558:	1bdb      	subs	r3, r3, r7
 800f55a:	60a2      	str	r2, [r4, #8]
 800f55c:	6123      	str	r3, [r4, #16]
 800f55e:	f080 0001 	eor.w	r0, r0, #1
 800f562:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f566:	68a3      	ldr	r3, [r4, #8]
 800f568:	781b      	ldrb	r3, [r3, #0]
 800f56a:	706b      	strb	r3, [r5, #1]
 800f56c:	e7c3      	b.n	800f4f6 <ucdr_deserialize_endian_uint16_t+0x5e>
 800f56e:	4641      	mov	r1, r8
 800f570:	463a      	mov	r2, r7
 800f572:	4628      	mov	r0, r5
 800f574:	f00a fc65 	bl	8019e42 <memcpy>
 800f578:	68a1      	ldr	r1, [r4, #8]
 800f57a:	4652      	mov	r2, sl
 800f57c:	19e8      	adds	r0, r5, r7
 800f57e:	f00a fc60 	bl	8019e42 <memcpy>
 800f582:	e7b8      	b.n	800f4f6 <ucdr_deserialize_endian_uint16_t+0x5e>

0800f584 <ucdr_serialize_uint32_t>:
 800f584:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f588:	b082      	sub	sp, #8
 800f58a:	4604      	mov	r4, r0
 800f58c:	9101      	str	r1, [sp, #4]
 800f58e:	2104      	movs	r1, #4
 800f590:	f000 ff38 	bl	8010404 <ucdr_buffer_alignment>
 800f594:	4601      	mov	r1, r0
 800f596:	4620      	mov	r0, r4
 800f598:	7d67      	ldrb	r7, [r4, #21]
 800f59a:	f000 ff77 	bl	801048c <ucdr_advance_buffer>
 800f59e:	4620      	mov	r0, r4
 800f5a0:	2104      	movs	r1, #4
 800f5a2:	f000 fed1 	bl	8010348 <ucdr_check_buffer_available_for>
 800f5a6:	2800      	cmp	r0, #0
 800f5a8:	d139      	bne.n	800f61e <ucdr_serialize_uint32_t+0x9a>
 800f5aa:	e9d4 6501 	ldrd	r6, r5, [r4, #4]
 800f5ae:	42ae      	cmp	r6, r5
 800f5b0:	d930      	bls.n	800f614 <ucdr_serialize_uint32_t+0x90>
 800f5b2:	6922      	ldr	r2, [r4, #16]
 800f5b4:	60a6      	str	r6, [r4, #8]
 800f5b6:	1b76      	subs	r6, r6, r5
 800f5b8:	4432      	add	r2, r6
 800f5ba:	f1c6 0804 	rsb	r8, r6, #4
 800f5be:	6122      	str	r2, [r4, #16]
 800f5c0:	4641      	mov	r1, r8
 800f5c2:	4620      	mov	r0, r4
 800f5c4:	f000 fecc 	bl	8010360 <ucdr_check_final_buffer_behavior>
 800f5c8:	2800      	cmp	r0, #0
 800f5ca:	d04c      	beq.n	800f666 <ucdr_serialize_uint32_t+0xe2>
 800f5cc:	7d23      	ldrb	r3, [r4, #20]
 800f5ce:	2b01      	cmp	r3, #1
 800f5d0:	d063      	beq.n	800f69a <ucdr_serialize_uint32_t+0x116>
 800f5d2:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800f5d6:	702b      	strb	r3, [r5, #0]
 800f5d8:	2e00      	cmp	r6, #0
 800f5da:	d051      	beq.n	800f680 <ucdr_serialize_uint32_t+0xfc>
 800f5dc:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800f5e0:	706b      	strb	r3, [r5, #1]
 800f5e2:	2e01      	cmp	r6, #1
 800f5e4:	d050      	beq.n	800f688 <ucdr_serialize_uint32_t+0x104>
 800f5e6:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800f5ea:	70ab      	strb	r3, [r5, #2]
 800f5ec:	2e02      	cmp	r6, #2
 800f5ee:	d04f      	beq.n	800f690 <ucdr_serialize_uint32_t+0x10c>
 800f5f0:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800f5f4:	70eb      	strb	r3, [r5, #3]
 800f5f6:	6923      	ldr	r3, [r4, #16]
 800f5f8:	68a2      	ldr	r2, [r4, #8]
 800f5fa:	7da0      	ldrb	r0, [r4, #22]
 800f5fc:	3304      	adds	r3, #4
 800f5fe:	1b9b      	subs	r3, r3, r6
 800f600:	4442      	add	r2, r8
 800f602:	2104      	movs	r1, #4
 800f604:	f080 0001 	eor.w	r0, r0, #1
 800f608:	6123      	str	r3, [r4, #16]
 800f60a:	60a2      	str	r2, [r4, #8]
 800f60c:	7561      	strb	r1, [r4, #21]
 800f60e:	b002      	add	sp, #8
 800f610:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f614:	2104      	movs	r1, #4
 800f616:	4620      	mov	r0, r4
 800f618:	f000 fea2 	bl	8010360 <ucdr_check_final_buffer_behavior>
 800f61c:	b1d0      	cbz	r0, 800f654 <ucdr_serialize_uint32_t+0xd0>
 800f61e:	7d23      	ldrb	r3, [r4, #20]
 800f620:	2b01      	cmp	r3, #1
 800f622:	68a3      	ldr	r3, [r4, #8]
 800f624:	d01c      	beq.n	800f660 <ucdr_serialize_uint32_t+0xdc>
 800f626:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800f62a:	701a      	strb	r2, [r3, #0]
 800f62c:	68a3      	ldr	r3, [r4, #8]
 800f62e:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800f632:	705a      	strb	r2, [r3, #1]
 800f634:	68a3      	ldr	r3, [r4, #8]
 800f636:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800f63a:	709a      	strb	r2, [r3, #2]
 800f63c:	68a3      	ldr	r3, [r4, #8]
 800f63e:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800f642:	70da      	strb	r2, [r3, #3]
 800f644:	68a2      	ldr	r2, [r4, #8]
 800f646:	6923      	ldr	r3, [r4, #16]
 800f648:	3204      	adds	r2, #4
 800f64a:	3304      	adds	r3, #4
 800f64c:	2104      	movs	r1, #4
 800f64e:	60a2      	str	r2, [r4, #8]
 800f650:	6123      	str	r3, [r4, #16]
 800f652:	7561      	strb	r1, [r4, #21]
 800f654:	7da0      	ldrb	r0, [r4, #22]
 800f656:	f080 0001 	eor.w	r0, r0, #1
 800f65a:	b002      	add	sp, #8
 800f65c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f660:	9a01      	ldr	r2, [sp, #4]
 800f662:	601a      	str	r2, [r3, #0]
 800f664:	e7ee      	b.n	800f644 <ucdr_serialize_uint32_t+0xc0>
 800f666:	68a2      	ldr	r2, [r4, #8]
 800f668:	6923      	ldr	r3, [r4, #16]
 800f66a:	7da0      	ldrb	r0, [r4, #22]
 800f66c:	7567      	strb	r7, [r4, #21]
 800f66e:	1b92      	subs	r2, r2, r6
 800f670:	1b9b      	subs	r3, r3, r6
 800f672:	f080 0001 	eor.w	r0, r0, #1
 800f676:	60a2      	str	r2, [r4, #8]
 800f678:	6123      	str	r3, [r4, #16]
 800f67a:	b002      	add	sp, #8
 800f67c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f680:	68a3      	ldr	r3, [r4, #8]
 800f682:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800f686:	701a      	strb	r2, [r3, #0]
 800f688:	68a3      	ldr	r3, [r4, #8]
 800f68a:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800f68e:	701a      	strb	r2, [r3, #0]
 800f690:	68a3      	ldr	r3, [r4, #8]
 800f692:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800f696:	701a      	strb	r2, [r3, #0]
 800f698:	e7ad      	b.n	800f5f6 <ucdr_serialize_uint32_t+0x72>
 800f69a:	4628      	mov	r0, r5
 800f69c:	ad01      	add	r5, sp, #4
 800f69e:	4629      	mov	r1, r5
 800f6a0:	4632      	mov	r2, r6
 800f6a2:	f00a fbce 	bl	8019e42 <memcpy>
 800f6a6:	68a0      	ldr	r0, [r4, #8]
 800f6a8:	4642      	mov	r2, r8
 800f6aa:	19a9      	adds	r1, r5, r6
 800f6ac:	f00a fbc9 	bl	8019e42 <memcpy>
 800f6b0:	e7a1      	b.n	800f5f6 <ucdr_serialize_uint32_t+0x72>
 800f6b2:	bf00      	nop

0800f6b4 <ucdr_serialize_endian_uint32_t>:
 800f6b4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800f6b8:	b083      	sub	sp, #12
 800f6ba:	460d      	mov	r5, r1
 800f6bc:	2104      	movs	r1, #4
 800f6be:	4604      	mov	r4, r0
 800f6c0:	9201      	str	r2, [sp, #4]
 800f6c2:	f000 fe9f 	bl	8010404 <ucdr_buffer_alignment>
 800f6c6:	4601      	mov	r1, r0
 800f6c8:	4620      	mov	r0, r4
 800f6ca:	f894 8015 	ldrb.w	r8, [r4, #21]
 800f6ce:	f000 fedd 	bl	801048c <ucdr_advance_buffer>
 800f6d2:	4620      	mov	r0, r4
 800f6d4:	2104      	movs	r1, #4
 800f6d6:	f000 fe37 	bl	8010348 <ucdr_check_buffer_available_for>
 800f6da:	2800      	cmp	r0, #0
 800f6dc:	d138      	bne.n	800f750 <ucdr_serialize_endian_uint32_t+0x9c>
 800f6de:	e9d4 7601 	ldrd	r7, r6, [r4, #4]
 800f6e2:	42b7      	cmp	r7, r6
 800f6e4:	d92f      	bls.n	800f746 <ucdr_serialize_endian_uint32_t+0x92>
 800f6e6:	6922      	ldr	r2, [r4, #16]
 800f6e8:	60a7      	str	r7, [r4, #8]
 800f6ea:	1bbf      	subs	r7, r7, r6
 800f6ec:	443a      	add	r2, r7
 800f6ee:	f1c7 0904 	rsb	r9, r7, #4
 800f6f2:	6122      	str	r2, [r4, #16]
 800f6f4:	4649      	mov	r1, r9
 800f6f6:	4620      	mov	r0, r4
 800f6f8:	f000 fe32 	bl	8010360 <ucdr_check_final_buffer_behavior>
 800f6fc:	2800      	cmp	r0, #0
 800f6fe:	d04a      	beq.n	800f796 <ucdr_serialize_endian_uint32_t+0xe2>
 800f700:	2d01      	cmp	r5, #1
 800f702:	d063      	beq.n	800f7cc <ucdr_serialize_endian_uint32_t+0x118>
 800f704:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800f708:	7033      	strb	r3, [r6, #0]
 800f70a:	2f00      	cmp	r7, #0
 800f70c:	d051      	beq.n	800f7b2 <ucdr_serialize_endian_uint32_t+0xfe>
 800f70e:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800f712:	7073      	strb	r3, [r6, #1]
 800f714:	2f01      	cmp	r7, #1
 800f716:	d050      	beq.n	800f7ba <ucdr_serialize_endian_uint32_t+0x106>
 800f718:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800f71c:	70b3      	strb	r3, [r6, #2]
 800f71e:	2f02      	cmp	r7, #2
 800f720:	d04f      	beq.n	800f7c2 <ucdr_serialize_endian_uint32_t+0x10e>
 800f722:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800f726:	70f3      	strb	r3, [r6, #3]
 800f728:	6923      	ldr	r3, [r4, #16]
 800f72a:	68a2      	ldr	r2, [r4, #8]
 800f72c:	7da0      	ldrb	r0, [r4, #22]
 800f72e:	3304      	adds	r3, #4
 800f730:	1bdb      	subs	r3, r3, r7
 800f732:	444a      	add	r2, r9
 800f734:	2104      	movs	r1, #4
 800f736:	f080 0001 	eor.w	r0, r0, #1
 800f73a:	6123      	str	r3, [r4, #16]
 800f73c:	60a2      	str	r2, [r4, #8]
 800f73e:	7561      	strb	r1, [r4, #21]
 800f740:	b003      	add	sp, #12
 800f742:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800f746:	2104      	movs	r1, #4
 800f748:	4620      	mov	r0, r4
 800f74a:	f000 fe09 	bl	8010360 <ucdr_check_final_buffer_behavior>
 800f74e:	b1c8      	cbz	r0, 800f784 <ucdr_serialize_endian_uint32_t+0xd0>
 800f750:	2d01      	cmp	r5, #1
 800f752:	68a3      	ldr	r3, [r4, #8]
 800f754:	d01c      	beq.n	800f790 <ucdr_serialize_endian_uint32_t+0xdc>
 800f756:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800f75a:	701a      	strb	r2, [r3, #0]
 800f75c:	68a3      	ldr	r3, [r4, #8]
 800f75e:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800f762:	705a      	strb	r2, [r3, #1]
 800f764:	68a3      	ldr	r3, [r4, #8]
 800f766:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800f76a:	709a      	strb	r2, [r3, #2]
 800f76c:	68a3      	ldr	r3, [r4, #8]
 800f76e:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800f772:	70da      	strb	r2, [r3, #3]
 800f774:	68a2      	ldr	r2, [r4, #8]
 800f776:	6923      	ldr	r3, [r4, #16]
 800f778:	3204      	adds	r2, #4
 800f77a:	3304      	adds	r3, #4
 800f77c:	2104      	movs	r1, #4
 800f77e:	60a2      	str	r2, [r4, #8]
 800f780:	6123      	str	r3, [r4, #16]
 800f782:	7561      	strb	r1, [r4, #21]
 800f784:	7da0      	ldrb	r0, [r4, #22]
 800f786:	f080 0001 	eor.w	r0, r0, #1
 800f78a:	b003      	add	sp, #12
 800f78c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800f790:	9a01      	ldr	r2, [sp, #4]
 800f792:	601a      	str	r2, [r3, #0]
 800f794:	e7ee      	b.n	800f774 <ucdr_serialize_endian_uint32_t+0xc0>
 800f796:	68a2      	ldr	r2, [r4, #8]
 800f798:	6923      	ldr	r3, [r4, #16]
 800f79a:	7da0      	ldrb	r0, [r4, #22]
 800f79c:	f884 8015 	strb.w	r8, [r4, #21]
 800f7a0:	1bd2      	subs	r2, r2, r7
 800f7a2:	1bdb      	subs	r3, r3, r7
 800f7a4:	f080 0001 	eor.w	r0, r0, #1
 800f7a8:	60a2      	str	r2, [r4, #8]
 800f7aa:	6123      	str	r3, [r4, #16]
 800f7ac:	b003      	add	sp, #12
 800f7ae:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800f7b2:	68a3      	ldr	r3, [r4, #8]
 800f7b4:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800f7b8:	701a      	strb	r2, [r3, #0]
 800f7ba:	68a3      	ldr	r3, [r4, #8]
 800f7bc:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800f7c0:	701a      	strb	r2, [r3, #0]
 800f7c2:	68a3      	ldr	r3, [r4, #8]
 800f7c4:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800f7c8:	701a      	strb	r2, [r3, #0]
 800f7ca:	e7ad      	b.n	800f728 <ucdr_serialize_endian_uint32_t+0x74>
 800f7cc:	ad01      	add	r5, sp, #4
 800f7ce:	4629      	mov	r1, r5
 800f7d0:	463a      	mov	r2, r7
 800f7d2:	4630      	mov	r0, r6
 800f7d4:	f00a fb35 	bl	8019e42 <memcpy>
 800f7d8:	68a0      	ldr	r0, [r4, #8]
 800f7da:	464a      	mov	r2, r9
 800f7dc:	19e9      	adds	r1, r5, r7
 800f7de:	f00a fb30 	bl	8019e42 <memcpy>
 800f7e2:	e7a1      	b.n	800f728 <ucdr_serialize_endian_uint32_t+0x74>

0800f7e4 <ucdr_deserialize_uint32_t>:
 800f7e4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f7e8:	460d      	mov	r5, r1
 800f7ea:	2104      	movs	r1, #4
 800f7ec:	4604      	mov	r4, r0
 800f7ee:	f000 fe09 	bl	8010404 <ucdr_buffer_alignment>
 800f7f2:	4601      	mov	r1, r0
 800f7f4:	4620      	mov	r0, r4
 800f7f6:	f894 8015 	ldrb.w	r8, [r4, #21]
 800f7fa:	f000 fe47 	bl	801048c <ucdr_advance_buffer>
 800f7fe:	4620      	mov	r0, r4
 800f800:	2104      	movs	r1, #4
 800f802:	f000 fda1 	bl	8010348 <ucdr_check_buffer_available_for>
 800f806:	2800      	cmp	r0, #0
 800f808:	d138      	bne.n	800f87c <ucdr_deserialize_uint32_t+0x98>
 800f80a:	e9d4 7601 	ldrd	r7, r6, [r4, #4]
 800f80e:	42b7      	cmp	r7, r6
 800f810:	d92f      	bls.n	800f872 <ucdr_deserialize_uint32_t+0x8e>
 800f812:	6922      	ldr	r2, [r4, #16]
 800f814:	60a7      	str	r7, [r4, #8]
 800f816:	1bbf      	subs	r7, r7, r6
 800f818:	443a      	add	r2, r7
 800f81a:	f1c7 0904 	rsb	r9, r7, #4
 800f81e:	6122      	str	r2, [r4, #16]
 800f820:	4649      	mov	r1, r9
 800f822:	4620      	mov	r0, r4
 800f824:	f000 fd9c 	bl	8010360 <ucdr_check_final_buffer_behavior>
 800f828:	2800      	cmp	r0, #0
 800f82a:	d046      	beq.n	800f8ba <ucdr_deserialize_uint32_t+0xd6>
 800f82c:	7d23      	ldrb	r3, [r4, #20]
 800f82e:	2b01      	cmp	r3, #1
 800f830:	d05c      	beq.n	800f8ec <ucdr_deserialize_uint32_t+0x108>
 800f832:	78f3      	ldrb	r3, [r6, #3]
 800f834:	702b      	strb	r3, [r5, #0]
 800f836:	2f00      	cmp	r7, #0
 800f838:	d04c      	beq.n	800f8d4 <ucdr_deserialize_uint32_t+0xf0>
 800f83a:	78b3      	ldrb	r3, [r6, #2]
 800f83c:	706b      	strb	r3, [r5, #1]
 800f83e:	2f01      	cmp	r7, #1
 800f840:	f105 0302 	add.w	r3, r5, #2
 800f844:	d04a      	beq.n	800f8dc <ucdr_deserialize_uint32_t+0xf8>
 800f846:	7873      	ldrb	r3, [r6, #1]
 800f848:	70ab      	strb	r3, [r5, #2]
 800f84a:	2f02      	cmp	r7, #2
 800f84c:	f105 0303 	add.w	r3, r5, #3
 800f850:	d048      	beq.n	800f8e4 <ucdr_deserialize_uint32_t+0x100>
 800f852:	7833      	ldrb	r3, [r6, #0]
 800f854:	70eb      	strb	r3, [r5, #3]
 800f856:	6923      	ldr	r3, [r4, #16]
 800f858:	68a2      	ldr	r2, [r4, #8]
 800f85a:	7da0      	ldrb	r0, [r4, #22]
 800f85c:	2104      	movs	r1, #4
 800f85e:	3304      	adds	r3, #4
 800f860:	1bdb      	subs	r3, r3, r7
 800f862:	444a      	add	r2, r9
 800f864:	7561      	strb	r1, [r4, #21]
 800f866:	6123      	str	r3, [r4, #16]
 800f868:	60a2      	str	r2, [r4, #8]
 800f86a:	f080 0001 	eor.w	r0, r0, #1
 800f86e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f872:	2104      	movs	r1, #4
 800f874:	4620      	mov	r0, r4
 800f876:	f000 fd73 	bl	8010360 <ucdr_check_final_buffer_behavior>
 800f87a:	b1b0      	cbz	r0, 800f8aa <ucdr_deserialize_uint32_t+0xc6>
 800f87c:	7d23      	ldrb	r3, [r4, #20]
 800f87e:	2b01      	cmp	r3, #1
 800f880:	68a3      	ldr	r3, [r4, #8]
 800f882:	d017      	beq.n	800f8b4 <ucdr_deserialize_uint32_t+0xd0>
 800f884:	78db      	ldrb	r3, [r3, #3]
 800f886:	702b      	strb	r3, [r5, #0]
 800f888:	68a3      	ldr	r3, [r4, #8]
 800f88a:	789b      	ldrb	r3, [r3, #2]
 800f88c:	706b      	strb	r3, [r5, #1]
 800f88e:	68a3      	ldr	r3, [r4, #8]
 800f890:	785b      	ldrb	r3, [r3, #1]
 800f892:	70ab      	strb	r3, [r5, #2]
 800f894:	68a3      	ldr	r3, [r4, #8]
 800f896:	781b      	ldrb	r3, [r3, #0]
 800f898:	70eb      	strb	r3, [r5, #3]
 800f89a:	68a2      	ldr	r2, [r4, #8]
 800f89c:	6923      	ldr	r3, [r4, #16]
 800f89e:	3204      	adds	r2, #4
 800f8a0:	3304      	adds	r3, #4
 800f8a2:	2104      	movs	r1, #4
 800f8a4:	60a2      	str	r2, [r4, #8]
 800f8a6:	6123      	str	r3, [r4, #16]
 800f8a8:	7561      	strb	r1, [r4, #21]
 800f8aa:	7da0      	ldrb	r0, [r4, #22]
 800f8ac:	f080 0001 	eor.w	r0, r0, #1
 800f8b0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f8b4:	681b      	ldr	r3, [r3, #0]
 800f8b6:	602b      	str	r3, [r5, #0]
 800f8b8:	e7ef      	b.n	800f89a <ucdr_deserialize_uint32_t+0xb6>
 800f8ba:	68a2      	ldr	r2, [r4, #8]
 800f8bc:	6923      	ldr	r3, [r4, #16]
 800f8be:	7da0      	ldrb	r0, [r4, #22]
 800f8c0:	f884 8015 	strb.w	r8, [r4, #21]
 800f8c4:	1bd2      	subs	r2, r2, r7
 800f8c6:	1bdb      	subs	r3, r3, r7
 800f8c8:	60a2      	str	r2, [r4, #8]
 800f8ca:	6123      	str	r3, [r4, #16]
 800f8cc:	f080 0001 	eor.w	r0, r0, #1
 800f8d0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f8d4:	68a3      	ldr	r3, [r4, #8]
 800f8d6:	789b      	ldrb	r3, [r3, #2]
 800f8d8:	706b      	strb	r3, [r5, #1]
 800f8da:	1cab      	adds	r3, r5, #2
 800f8dc:	68a2      	ldr	r2, [r4, #8]
 800f8de:	7852      	ldrb	r2, [r2, #1]
 800f8e0:	f803 2b01 	strb.w	r2, [r3], #1
 800f8e4:	68a2      	ldr	r2, [r4, #8]
 800f8e6:	7812      	ldrb	r2, [r2, #0]
 800f8e8:	701a      	strb	r2, [r3, #0]
 800f8ea:	e7b4      	b.n	800f856 <ucdr_deserialize_uint32_t+0x72>
 800f8ec:	4631      	mov	r1, r6
 800f8ee:	463a      	mov	r2, r7
 800f8f0:	4628      	mov	r0, r5
 800f8f2:	f00a faa6 	bl	8019e42 <memcpy>
 800f8f6:	68a1      	ldr	r1, [r4, #8]
 800f8f8:	464a      	mov	r2, r9
 800f8fa:	19e8      	adds	r0, r5, r7
 800f8fc:	f00a faa1 	bl	8019e42 <memcpy>
 800f900:	e7a9      	b.n	800f856 <ucdr_deserialize_uint32_t+0x72>
 800f902:	bf00      	nop

0800f904 <ucdr_deserialize_endian_uint32_t>:
 800f904:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f908:	460e      	mov	r6, r1
 800f90a:	2104      	movs	r1, #4
 800f90c:	4604      	mov	r4, r0
 800f90e:	4615      	mov	r5, r2
 800f910:	f000 fd78 	bl	8010404 <ucdr_buffer_alignment>
 800f914:	4601      	mov	r1, r0
 800f916:	4620      	mov	r0, r4
 800f918:	f894 9015 	ldrb.w	r9, [r4, #21]
 800f91c:	f000 fdb6 	bl	801048c <ucdr_advance_buffer>
 800f920:	4620      	mov	r0, r4
 800f922:	2104      	movs	r1, #4
 800f924:	f000 fd10 	bl	8010348 <ucdr_check_buffer_available_for>
 800f928:	2800      	cmp	r0, #0
 800f92a:	d13c      	bne.n	800f9a6 <ucdr_deserialize_endian_uint32_t+0xa2>
 800f92c:	e9d4 3701 	ldrd	r3, r7, [r4, #4]
 800f930:	42bb      	cmp	r3, r7
 800f932:	d933      	bls.n	800f99c <ucdr_deserialize_endian_uint32_t+0x98>
 800f934:	6922      	ldr	r2, [r4, #16]
 800f936:	60a3      	str	r3, [r4, #8]
 800f938:	eba3 0807 	sub.w	r8, r3, r7
 800f93c:	4442      	add	r2, r8
 800f93e:	f1c8 0a04 	rsb	sl, r8, #4
 800f942:	6122      	str	r2, [r4, #16]
 800f944:	4651      	mov	r1, sl
 800f946:	4620      	mov	r0, r4
 800f948:	f000 fd0a 	bl	8010360 <ucdr_check_final_buffer_behavior>
 800f94c:	2800      	cmp	r0, #0
 800f94e:	d048      	beq.n	800f9e2 <ucdr_deserialize_endian_uint32_t+0xde>
 800f950:	2e01      	cmp	r6, #1
 800f952:	d061      	beq.n	800fa18 <ucdr_deserialize_endian_uint32_t+0x114>
 800f954:	78fb      	ldrb	r3, [r7, #3]
 800f956:	702b      	strb	r3, [r5, #0]
 800f958:	f1b8 0f00 	cmp.w	r8, #0
 800f95c:	d050      	beq.n	800fa00 <ucdr_deserialize_endian_uint32_t+0xfc>
 800f95e:	78bb      	ldrb	r3, [r7, #2]
 800f960:	706b      	strb	r3, [r5, #1]
 800f962:	f1b8 0f01 	cmp.w	r8, #1
 800f966:	f105 0302 	add.w	r3, r5, #2
 800f96a:	d04d      	beq.n	800fa08 <ucdr_deserialize_endian_uint32_t+0x104>
 800f96c:	787b      	ldrb	r3, [r7, #1]
 800f96e:	70ab      	strb	r3, [r5, #2]
 800f970:	f1b8 0f02 	cmp.w	r8, #2
 800f974:	f105 0303 	add.w	r3, r5, #3
 800f978:	d04a      	beq.n	800fa10 <ucdr_deserialize_endian_uint32_t+0x10c>
 800f97a:	783b      	ldrb	r3, [r7, #0]
 800f97c:	70eb      	strb	r3, [r5, #3]
 800f97e:	6923      	ldr	r3, [r4, #16]
 800f980:	68a2      	ldr	r2, [r4, #8]
 800f982:	7da0      	ldrb	r0, [r4, #22]
 800f984:	2104      	movs	r1, #4
 800f986:	3304      	adds	r3, #4
 800f988:	eba3 0308 	sub.w	r3, r3, r8
 800f98c:	4452      	add	r2, sl
 800f98e:	7561      	strb	r1, [r4, #21]
 800f990:	6123      	str	r3, [r4, #16]
 800f992:	60a2      	str	r2, [r4, #8]
 800f994:	f080 0001 	eor.w	r0, r0, #1
 800f998:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f99c:	2104      	movs	r1, #4
 800f99e:	4620      	mov	r0, r4
 800f9a0:	f000 fcde 	bl	8010360 <ucdr_check_final_buffer_behavior>
 800f9a4:	b1a8      	cbz	r0, 800f9d2 <ucdr_deserialize_endian_uint32_t+0xce>
 800f9a6:	2e01      	cmp	r6, #1
 800f9a8:	68a3      	ldr	r3, [r4, #8]
 800f9aa:	d017      	beq.n	800f9dc <ucdr_deserialize_endian_uint32_t+0xd8>
 800f9ac:	78db      	ldrb	r3, [r3, #3]
 800f9ae:	702b      	strb	r3, [r5, #0]
 800f9b0:	68a3      	ldr	r3, [r4, #8]
 800f9b2:	789b      	ldrb	r3, [r3, #2]
 800f9b4:	706b      	strb	r3, [r5, #1]
 800f9b6:	68a3      	ldr	r3, [r4, #8]
 800f9b8:	785b      	ldrb	r3, [r3, #1]
 800f9ba:	70ab      	strb	r3, [r5, #2]
 800f9bc:	68a3      	ldr	r3, [r4, #8]
 800f9be:	781b      	ldrb	r3, [r3, #0]
 800f9c0:	70eb      	strb	r3, [r5, #3]
 800f9c2:	68a2      	ldr	r2, [r4, #8]
 800f9c4:	6923      	ldr	r3, [r4, #16]
 800f9c6:	3204      	adds	r2, #4
 800f9c8:	3304      	adds	r3, #4
 800f9ca:	2104      	movs	r1, #4
 800f9cc:	60a2      	str	r2, [r4, #8]
 800f9ce:	6123      	str	r3, [r4, #16]
 800f9d0:	7561      	strb	r1, [r4, #21]
 800f9d2:	7da0      	ldrb	r0, [r4, #22]
 800f9d4:	f080 0001 	eor.w	r0, r0, #1
 800f9d8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f9dc:	681b      	ldr	r3, [r3, #0]
 800f9de:	602b      	str	r3, [r5, #0]
 800f9e0:	e7ef      	b.n	800f9c2 <ucdr_deserialize_endian_uint32_t+0xbe>
 800f9e2:	68a2      	ldr	r2, [r4, #8]
 800f9e4:	6923      	ldr	r3, [r4, #16]
 800f9e6:	7da0      	ldrb	r0, [r4, #22]
 800f9e8:	f884 9015 	strb.w	r9, [r4, #21]
 800f9ec:	eba2 0208 	sub.w	r2, r2, r8
 800f9f0:	eba3 0308 	sub.w	r3, r3, r8
 800f9f4:	60a2      	str	r2, [r4, #8]
 800f9f6:	6123      	str	r3, [r4, #16]
 800f9f8:	f080 0001 	eor.w	r0, r0, #1
 800f9fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fa00:	68a3      	ldr	r3, [r4, #8]
 800fa02:	789b      	ldrb	r3, [r3, #2]
 800fa04:	706b      	strb	r3, [r5, #1]
 800fa06:	1cab      	adds	r3, r5, #2
 800fa08:	68a2      	ldr	r2, [r4, #8]
 800fa0a:	7852      	ldrb	r2, [r2, #1]
 800fa0c:	f803 2b01 	strb.w	r2, [r3], #1
 800fa10:	68a2      	ldr	r2, [r4, #8]
 800fa12:	7812      	ldrb	r2, [r2, #0]
 800fa14:	701a      	strb	r2, [r3, #0]
 800fa16:	e7b2      	b.n	800f97e <ucdr_deserialize_endian_uint32_t+0x7a>
 800fa18:	4639      	mov	r1, r7
 800fa1a:	4642      	mov	r2, r8
 800fa1c:	4628      	mov	r0, r5
 800fa1e:	f00a fa10 	bl	8019e42 <memcpy>
 800fa22:	68a1      	ldr	r1, [r4, #8]
 800fa24:	4652      	mov	r2, sl
 800fa26:	eb05 0008 	add.w	r0, r5, r8
 800fa2a:	f00a fa0a 	bl	8019e42 <memcpy>
 800fa2e:	e7a6      	b.n	800f97e <ucdr_deserialize_endian_uint32_t+0x7a>

0800fa30 <ucdr_serialize_uint64_t>:
 800fa30:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fa34:	2108      	movs	r1, #8
 800fa36:	b082      	sub	sp, #8
 800fa38:	4604      	mov	r4, r0
 800fa3a:	e9cd 2300 	strd	r2, r3, [sp]
 800fa3e:	f000 fce1 	bl	8010404 <ucdr_buffer_alignment>
 800fa42:	4601      	mov	r1, r0
 800fa44:	4620      	mov	r0, r4
 800fa46:	7d67      	ldrb	r7, [r4, #21]
 800fa48:	f000 fd20 	bl	801048c <ucdr_advance_buffer>
 800fa4c:	4620      	mov	r0, r4
 800fa4e:	2108      	movs	r1, #8
 800fa50:	f000 fc7a 	bl	8010348 <ucdr_check_buffer_available_for>
 800fa54:	2800      	cmp	r0, #0
 800fa56:	d14e      	bne.n	800faf6 <ucdr_serialize_uint64_t+0xc6>
 800fa58:	e9d4 5601 	ldrd	r5, r6, [r4, #4]
 800fa5c:	42b5      	cmp	r5, r6
 800fa5e:	d945      	bls.n	800faec <ucdr_serialize_uint64_t+0xbc>
 800fa60:	6923      	ldr	r3, [r4, #16]
 800fa62:	60a5      	str	r5, [r4, #8]
 800fa64:	1bad      	subs	r5, r5, r6
 800fa66:	442b      	add	r3, r5
 800fa68:	f1c5 0808 	rsb	r8, r5, #8
 800fa6c:	6123      	str	r3, [r4, #16]
 800fa6e:	4641      	mov	r1, r8
 800fa70:	4620      	mov	r0, r4
 800fa72:	f000 fc75 	bl	8010360 <ucdr_check_final_buffer_behavior>
 800fa76:	2800      	cmp	r0, #0
 800fa78:	d074      	beq.n	800fb64 <ucdr_serialize_uint64_t+0x134>
 800fa7a:	7d23      	ldrb	r3, [r4, #20]
 800fa7c:	2b01      	cmp	r3, #1
 800fa7e:	f000 809b 	beq.w	800fbb8 <ucdr_serialize_uint64_t+0x188>
 800fa82:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800fa86:	7033      	strb	r3, [r6, #0]
 800fa88:	2d00      	cmp	r5, #0
 800fa8a:	d078      	beq.n	800fb7e <ucdr_serialize_uint64_t+0x14e>
 800fa8c:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800fa90:	7073      	strb	r3, [r6, #1]
 800fa92:	2d01      	cmp	r5, #1
 800fa94:	d077      	beq.n	800fb86 <ucdr_serialize_uint64_t+0x156>
 800fa96:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800fa9a:	70b3      	strb	r3, [r6, #2]
 800fa9c:	2d02      	cmp	r5, #2
 800fa9e:	d076      	beq.n	800fb8e <ucdr_serialize_uint64_t+0x15e>
 800faa0:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800faa4:	70f3      	strb	r3, [r6, #3]
 800faa6:	2d03      	cmp	r5, #3
 800faa8:	d075      	beq.n	800fb96 <ucdr_serialize_uint64_t+0x166>
 800faaa:	f89d 3003 	ldrb.w	r3, [sp, #3]
 800faae:	7133      	strb	r3, [r6, #4]
 800fab0:	2d04      	cmp	r5, #4
 800fab2:	d074      	beq.n	800fb9e <ucdr_serialize_uint64_t+0x16e>
 800fab4:	f89d 3002 	ldrb.w	r3, [sp, #2]
 800fab8:	7173      	strb	r3, [r6, #5]
 800faba:	2d05      	cmp	r5, #5
 800fabc:	d073      	beq.n	800fba6 <ucdr_serialize_uint64_t+0x176>
 800fabe:	f89d 3001 	ldrb.w	r3, [sp, #1]
 800fac2:	71b3      	strb	r3, [r6, #6]
 800fac4:	2d06      	cmp	r5, #6
 800fac6:	d072      	beq.n	800fbae <ucdr_serialize_uint64_t+0x17e>
 800fac8:	f89d 3000 	ldrb.w	r3, [sp]
 800facc:	71f3      	strb	r3, [r6, #7]
 800face:	6923      	ldr	r3, [r4, #16]
 800fad0:	68a2      	ldr	r2, [r4, #8]
 800fad2:	7da0      	ldrb	r0, [r4, #22]
 800fad4:	3308      	adds	r3, #8
 800fad6:	1b5d      	subs	r5, r3, r5
 800fad8:	4442      	add	r2, r8
 800fada:	2308      	movs	r3, #8
 800fadc:	f080 0001 	eor.w	r0, r0, #1
 800fae0:	6125      	str	r5, [r4, #16]
 800fae2:	60a2      	str	r2, [r4, #8]
 800fae4:	7563      	strb	r3, [r4, #21]
 800fae6:	b002      	add	sp, #8
 800fae8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800faec:	2108      	movs	r1, #8
 800faee:	4620      	mov	r0, r4
 800faf0:	f000 fc36 	bl	8010360 <ucdr_check_final_buffer_behavior>
 800faf4:	b350      	cbz	r0, 800fb4c <ucdr_serialize_uint64_t+0x11c>
 800faf6:	7d23      	ldrb	r3, [r4, #20]
 800faf8:	2b01      	cmp	r3, #1
 800fafa:	d02d      	beq.n	800fb58 <ucdr_serialize_uint64_t+0x128>
 800fafc:	68a3      	ldr	r3, [r4, #8]
 800fafe:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800fb02:	701a      	strb	r2, [r3, #0]
 800fb04:	68a3      	ldr	r3, [r4, #8]
 800fb06:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800fb0a:	705a      	strb	r2, [r3, #1]
 800fb0c:	68a3      	ldr	r3, [r4, #8]
 800fb0e:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800fb12:	709a      	strb	r2, [r3, #2]
 800fb14:	68a3      	ldr	r3, [r4, #8]
 800fb16:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800fb1a:	70da      	strb	r2, [r3, #3]
 800fb1c:	68a3      	ldr	r3, [r4, #8]
 800fb1e:	f89d 2003 	ldrb.w	r2, [sp, #3]
 800fb22:	711a      	strb	r2, [r3, #4]
 800fb24:	68a3      	ldr	r3, [r4, #8]
 800fb26:	f89d 2002 	ldrb.w	r2, [sp, #2]
 800fb2a:	715a      	strb	r2, [r3, #5]
 800fb2c:	68a3      	ldr	r3, [r4, #8]
 800fb2e:	f89d 2001 	ldrb.w	r2, [sp, #1]
 800fb32:	719a      	strb	r2, [r3, #6]
 800fb34:	68a3      	ldr	r3, [r4, #8]
 800fb36:	f89d 2000 	ldrb.w	r2, [sp]
 800fb3a:	71da      	strb	r2, [r3, #7]
 800fb3c:	68a2      	ldr	r2, [r4, #8]
 800fb3e:	6923      	ldr	r3, [r4, #16]
 800fb40:	3208      	adds	r2, #8
 800fb42:	3308      	adds	r3, #8
 800fb44:	2108      	movs	r1, #8
 800fb46:	60a2      	str	r2, [r4, #8]
 800fb48:	6123      	str	r3, [r4, #16]
 800fb4a:	7561      	strb	r1, [r4, #21]
 800fb4c:	7da0      	ldrb	r0, [r4, #22]
 800fb4e:	f080 0001 	eor.w	r0, r0, #1
 800fb52:	b002      	add	sp, #8
 800fb54:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fb58:	466b      	mov	r3, sp
 800fb5a:	cb03      	ldmia	r3!, {r0, r1}
 800fb5c:	68a3      	ldr	r3, [r4, #8]
 800fb5e:	6018      	str	r0, [r3, #0]
 800fb60:	6059      	str	r1, [r3, #4]
 800fb62:	e7eb      	b.n	800fb3c <ucdr_serialize_uint64_t+0x10c>
 800fb64:	68a2      	ldr	r2, [r4, #8]
 800fb66:	6923      	ldr	r3, [r4, #16]
 800fb68:	7da0      	ldrb	r0, [r4, #22]
 800fb6a:	7567      	strb	r7, [r4, #21]
 800fb6c:	1b52      	subs	r2, r2, r5
 800fb6e:	f080 0001 	eor.w	r0, r0, #1
 800fb72:	1b5d      	subs	r5, r3, r5
 800fb74:	60a2      	str	r2, [r4, #8]
 800fb76:	6125      	str	r5, [r4, #16]
 800fb78:	b002      	add	sp, #8
 800fb7a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fb7e:	68a3      	ldr	r3, [r4, #8]
 800fb80:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800fb84:	701a      	strb	r2, [r3, #0]
 800fb86:	68a3      	ldr	r3, [r4, #8]
 800fb88:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800fb8c:	701a      	strb	r2, [r3, #0]
 800fb8e:	68a3      	ldr	r3, [r4, #8]
 800fb90:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800fb94:	701a      	strb	r2, [r3, #0]
 800fb96:	68a3      	ldr	r3, [r4, #8]
 800fb98:	f89d 2003 	ldrb.w	r2, [sp, #3]
 800fb9c:	701a      	strb	r2, [r3, #0]
 800fb9e:	68a3      	ldr	r3, [r4, #8]
 800fba0:	f89d 2002 	ldrb.w	r2, [sp, #2]
 800fba4:	701a      	strb	r2, [r3, #0]
 800fba6:	68a3      	ldr	r3, [r4, #8]
 800fba8:	f89d 2001 	ldrb.w	r2, [sp, #1]
 800fbac:	701a      	strb	r2, [r3, #0]
 800fbae:	68a3      	ldr	r3, [r4, #8]
 800fbb0:	f89d 2000 	ldrb.w	r2, [sp]
 800fbb4:	701a      	strb	r2, [r3, #0]
 800fbb6:	e78a      	b.n	800face <ucdr_serialize_uint64_t+0x9e>
 800fbb8:	4630      	mov	r0, r6
 800fbba:	466e      	mov	r6, sp
 800fbbc:	4631      	mov	r1, r6
 800fbbe:	462a      	mov	r2, r5
 800fbc0:	f00a f93f 	bl	8019e42 <memcpy>
 800fbc4:	68a0      	ldr	r0, [r4, #8]
 800fbc6:	4642      	mov	r2, r8
 800fbc8:	1971      	adds	r1, r6, r5
 800fbca:	f00a f93a 	bl	8019e42 <memcpy>
 800fbce:	e77e      	b.n	800face <ucdr_serialize_uint64_t+0x9e>

0800fbd0 <ucdr_serialize_int16_t>:
 800fbd0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fbd4:	b082      	sub	sp, #8
 800fbd6:	460b      	mov	r3, r1
 800fbd8:	2102      	movs	r1, #2
 800fbda:	4604      	mov	r4, r0
 800fbdc:	f8ad 3006 	strh.w	r3, [sp, #6]
 800fbe0:	f000 fc10 	bl	8010404 <ucdr_buffer_alignment>
 800fbe4:	4601      	mov	r1, r0
 800fbe6:	4620      	mov	r0, r4
 800fbe8:	7d67      	ldrb	r7, [r4, #21]
 800fbea:	f000 fc4f 	bl	801048c <ucdr_advance_buffer>
 800fbee:	4620      	mov	r0, r4
 800fbf0:	2102      	movs	r1, #2
 800fbf2:	f000 fba9 	bl	8010348 <ucdr_check_buffer_available_for>
 800fbf6:	bb78      	cbnz	r0, 800fc58 <ucdr_serialize_int16_t+0x88>
 800fbf8:	e9d4 5601 	ldrd	r5, r6, [r4, #4]
 800fbfc:	42b5      	cmp	r5, r6
 800fbfe:	d926      	bls.n	800fc4e <ucdr_serialize_int16_t+0x7e>
 800fc00:	6922      	ldr	r2, [r4, #16]
 800fc02:	60a5      	str	r5, [r4, #8]
 800fc04:	1bad      	subs	r5, r5, r6
 800fc06:	442a      	add	r2, r5
 800fc08:	f1c5 0802 	rsb	r8, r5, #2
 800fc0c:	6122      	str	r2, [r4, #16]
 800fc0e:	4641      	mov	r1, r8
 800fc10:	4620      	mov	r0, r4
 800fc12:	f000 fba5 	bl	8010360 <ucdr_check_final_buffer_behavior>
 800fc16:	2800      	cmp	r0, #0
 800fc18:	d03b      	beq.n	800fc92 <ucdr_serialize_int16_t+0xc2>
 800fc1a:	7d23      	ldrb	r3, [r4, #20]
 800fc1c:	2b01      	cmp	r3, #1
 800fc1e:	d04a      	beq.n	800fcb6 <ucdr_serialize_int16_t+0xe6>
 800fc20:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800fc24:	7033      	strb	r3, [r6, #0]
 800fc26:	2d00      	cmp	r5, #0
 800fc28:	d040      	beq.n	800fcac <ucdr_serialize_int16_t+0xdc>
 800fc2a:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800fc2e:	7073      	strb	r3, [r6, #1]
 800fc30:	6923      	ldr	r3, [r4, #16]
 800fc32:	68a2      	ldr	r2, [r4, #8]
 800fc34:	7da0      	ldrb	r0, [r4, #22]
 800fc36:	3302      	adds	r3, #2
 800fc38:	1b5b      	subs	r3, r3, r5
 800fc3a:	4442      	add	r2, r8
 800fc3c:	2102      	movs	r1, #2
 800fc3e:	f080 0001 	eor.w	r0, r0, #1
 800fc42:	6123      	str	r3, [r4, #16]
 800fc44:	60a2      	str	r2, [r4, #8]
 800fc46:	7561      	strb	r1, [r4, #21]
 800fc48:	b002      	add	sp, #8
 800fc4a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fc4e:	2102      	movs	r1, #2
 800fc50:	4620      	mov	r0, r4
 800fc52:	f000 fb85 	bl	8010360 <ucdr_check_final_buffer_behavior>
 800fc56:	b190      	cbz	r0, 800fc7e <ucdr_serialize_int16_t+0xae>
 800fc58:	7d23      	ldrb	r3, [r4, #20]
 800fc5a:	2b01      	cmp	r3, #1
 800fc5c:	68a3      	ldr	r3, [r4, #8]
 800fc5e:	d014      	beq.n	800fc8a <ucdr_serialize_int16_t+0xba>
 800fc60:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800fc64:	701a      	strb	r2, [r3, #0]
 800fc66:	68a3      	ldr	r3, [r4, #8]
 800fc68:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800fc6c:	705a      	strb	r2, [r3, #1]
 800fc6e:	68a2      	ldr	r2, [r4, #8]
 800fc70:	6923      	ldr	r3, [r4, #16]
 800fc72:	3202      	adds	r2, #2
 800fc74:	3302      	adds	r3, #2
 800fc76:	2102      	movs	r1, #2
 800fc78:	60a2      	str	r2, [r4, #8]
 800fc7a:	6123      	str	r3, [r4, #16]
 800fc7c:	7561      	strb	r1, [r4, #21]
 800fc7e:	7da0      	ldrb	r0, [r4, #22]
 800fc80:	f080 0001 	eor.w	r0, r0, #1
 800fc84:	b002      	add	sp, #8
 800fc86:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fc8a:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 800fc8e:	801a      	strh	r2, [r3, #0]
 800fc90:	e7ed      	b.n	800fc6e <ucdr_serialize_int16_t+0x9e>
 800fc92:	68a2      	ldr	r2, [r4, #8]
 800fc94:	6923      	ldr	r3, [r4, #16]
 800fc96:	7da0      	ldrb	r0, [r4, #22]
 800fc98:	7567      	strb	r7, [r4, #21]
 800fc9a:	1b52      	subs	r2, r2, r5
 800fc9c:	1b5b      	subs	r3, r3, r5
 800fc9e:	f080 0001 	eor.w	r0, r0, #1
 800fca2:	60a2      	str	r2, [r4, #8]
 800fca4:	6123      	str	r3, [r4, #16]
 800fca6:	b002      	add	sp, #8
 800fca8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fcac:	68a3      	ldr	r3, [r4, #8]
 800fcae:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800fcb2:	701a      	strb	r2, [r3, #0]
 800fcb4:	e7bc      	b.n	800fc30 <ucdr_serialize_int16_t+0x60>
 800fcb6:	4630      	mov	r0, r6
 800fcb8:	f10d 0606 	add.w	r6, sp, #6
 800fcbc:	4631      	mov	r1, r6
 800fcbe:	462a      	mov	r2, r5
 800fcc0:	f00a f8bf 	bl	8019e42 <memcpy>
 800fcc4:	68a0      	ldr	r0, [r4, #8]
 800fcc6:	4642      	mov	r2, r8
 800fcc8:	1971      	adds	r1, r6, r5
 800fcca:	f00a f8ba 	bl	8019e42 <memcpy>
 800fcce:	e7af      	b.n	800fc30 <ucdr_serialize_int16_t+0x60>

0800fcd0 <ucdr_deserialize_int16_t>:
 800fcd0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800fcd4:	460d      	mov	r5, r1
 800fcd6:	2102      	movs	r1, #2
 800fcd8:	4604      	mov	r4, r0
 800fcda:	f000 fb93 	bl	8010404 <ucdr_buffer_alignment>
 800fcde:	4601      	mov	r1, r0
 800fce0:	4620      	mov	r0, r4
 800fce2:	f894 8015 	ldrb.w	r8, [r4, #21]
 800fce6:	f000 fbd1 	bl	801048c <ucdr_advance_buffer>
 800fcea:	4620      	mov	r0, r4
 800fcec:	2102      	movs	r1, #2
 800fcee:	f000 fb2b 	bl	8010348 <ucdr_check_buffer_available_for>
 800fcf2:	bb60      	cbnz	r0, 800fd4e <ucdr_deserialize_int16_t+0x7e>
 800fcf4:	e9d4 6701 	ldrd	r6, r7, [r4, #4]
 800fcf8:	42be      	cmp	r6, r7
 800fcfa:	d923      	bls.n	800fd44 <ucdr_deserialize_int16_t+0x74>
 800fcfc:	6922      	ldr	r2, [r4, #16]
 800fcfe:	60a6      	str	r6, [r4, #8]
 800fd00:	1bf6      	subs	r6, r6, r7
 800fd02:	4432      	add	r2, r6
 800fd04:	f1c6 0902 	rsb	r9, r6, #2
 800fd08:	6122      	str	r2, [r4, #16]
 800fd0a:	4649      	mov	r1, r9
 800fd0c:	4620      	mov	r0, r4
 800fd0e:	f000 fb27 	bl	8010360 <ucdr_check_final_buffer_behavior>
 800fd12:	2800      	cmp	r0, #0
 800fd14:	d034      	beq.n	800fd80 <ucdr_deserialize_int16_t+0xb0>
 800fd16:	7d23      	ldrb	r3, [r4, #20]
 800fd18:	2b01      	cmp	r3, #1
 800fd1a:	d042      	beq.n	800fda2 <ucdr_deserialize_int16_t+0xd2>
 800fd1c:	787b      	ldrb	r3, [r7, #1]
 800fd1e:	702b      	strb	r3, [r5, #0]
 800fd20:	2e00      	cmp	r6, #0
 800fd22:	d03a      	beq.n	800fd9a <ucdr_deserialize_int16_t+0xca>
 800fd24:	783b      	ldrb	r3, [r7, #0]
 800fd26:	706b      	strb	r3, [r5, #1]
 800fd28:	6923      	ldr	r3, [r4, #16]
 800fd2a:	68a2      	ldr	r2, [r4, #8]
 800fd2c:	7da0      	ldrb	r0, [r4, #22]
 800fd2e:	2102      	movs	r1, #2
 800fd30:	3302      	adds	r3, #2
 800fd32:	1b9b      	subs	r3, r3, r6
 800fd34:	444a      	add	r2, r9
 800fd36:	7561      	strb	r1, [r4, #21]
 800fd38:	6123      	str	r3, [r4, #16]
 800fd3a:	60a2      	str	r2, [r4, #8]
 800fd3c:	f080 0001 	eor.w	r0, r0, #1
 800fd40:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800fd44:	2102      	movs	r1, #2
 800fd46:	4620      	mov	r0, r4
 800fd48:	f000 fb0a 	bl	8010360 <ucdr_check_final_buffer_behavior>
 800fd4c:	b180      	cbz	r0, 800fd70 <ucdr_deserialize_int16_t+0xa0>
 800fd4e:	7d23      	ldrb	r3, [r4, #20]
 800fd50:	2b01      	cmp	r3, #1
 800fd52:	68a3      	ldr	r3, [r4, #8]
 800fd54:	d011      	beq.n	800fd7a <ucdr_deserialize_int16_t+0xaa>
 800fd56:	785b      	ldrb	r3, [r3, #1]
 800fd58:	702b      	strb	r3, [r5, #0]
 800fd5a:	68a3      	ldr	r3, [r4, #8]
 800fd5c:	781b      	ldrb	r3, [r3, #0]
 800fd5e:	706b      	strb	r3, [r5, #1]
 800fd60:	68a2      	ldr	r2, [r4, #8]
 800fd62:	6923      	ldr	r3, [r4, #16]
 800fd64:	3202      	adds	r2, #2
 800fd66:	3302      	adds	r3, #2
 800fd68:	2102      	movs	r1, #2
 800fd6a:	60a2      	str	r2, [r4, #8]
 800fd6c:	6123      	str	r3, [r4, #16]
 800fd6e:	7561      	strb	r1, [r4, #21]
 800fd70:	7da0      	ldrb	r0, [r4, #22]
 800fd72:	f080 0001 	eor.w	r0, r0, #1
 800fd76:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800fd7a:	881b      	ldrh	r3, [r3, #0]
 800fd7c:	802b      	strh	r3, [r5, #0]
 800fd7e:	e7ef      	b.n	800fd60 <ucdr_deserialize_int16_t+0x90>
 800fd80:	68a2      	ldr	r2, [r4, #8]
 800fd82:	6923      	ldr	r3, [r4, #16]
 800fd84:	7da0      	ldrb	r0, [r4, #22]
 800fd86:	f884 8015 	strb.w	r8, [r4, #21]
 800fd8a:	1b92      	subs	r2, r2, r6
 800fd8c:	1b9b      	subs	r3, r3, r6
 800fd8e:	60a2      	str	r2, [r4, #8]
 800fd90:	6123      	str	r3, [r4, #16]
 800fd92:	f080 0001 	eor.w	r0, r0, #1
 800fd96:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800fd9a:	68a3      	ldr	r3, [r4, #8]
 800fd9c:	781b      	ldrb	r3, [r3, #0]
 800fd9e:	706b      	strb	r3, [r5, #1]
 800fda0:	e7c2      	b.n	800fd28 <ucdr_deserialize_int16_t+0x58>
 800fda2:	4639      	mov	r1, r7
 800fda4:	4632      	mov	r2, r6
 800fda6:	4628      	mov	r0, r5
 800fda8:	f00a f84b 	bl	8019e42 <memcpy>
 800fdac:	68a1      	ldr	r1, [r4, #8]
 800fdae:	464a      	mov	r2, r9
 800fdb0:	19a8      	adds	r0, r5, r6
 800fdb2:	f00a f846 	bl	8019e42 <memcpy>
 800fdb6:	e7b7      	b.n	800fd28 <ucdr_deserialize_int16_t+0x58>

0800fdb8 <ucdr_serialize_int32_t>:
 800fdb8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fdbc:	b082      	sub	sp, #8
 800fdbe:	4604      	mov	r4, r0
 800fdc0:	9101      	str	r1, [sp, #4]
 800fdc2:	2104      	movs	r1, #4
 800fdc4:	f000 fb1e 	bl	8010404 <ucdr_buffer_alignment>
 800fdc8:	4601      	mov	r1, r0
 800fdca:	4620      	mov	r0, r4
 800fdcc:	7d67      	ldrb	r7, [r4, #21]
 800fdce:	f000 fb5d 	bl	801048c <ucdr_advance_buffer>
 800fdd2:	4620      	mov	r0, r4
 800fdd4:	2104      	movs	r1, #4
 800fdd6:	f000 fab7 	bl	8010348 <ucdr_check_buffer_available_for>
 800fdda:	2800      	cmp	r0, #0
 800fddc:	d139      	bne.n	800fe52 <ucdr_serialize_int32_t+0x9a>
 800fdde:	e9d4 6501 	ldrd	r6, r5, [r4, #4]
 800fde2:	42ae      	cmp	r6, r5
 800fde4:	d930      	bls.n	800fe48 <ucdr_serialize_int32_t+0x90>
 800fde6:	6922      	ldr	r2, [r4, #16]
 800fde8:	60a6      	str	r6, [r4, #8]
 800fdea:	1b76      	subs	r6, r6, r5
 800fdec:	4432      	add	r2, r6
 800fdee:	f1c6 0804 	rsb	r8, r6, #4
 800fdf2:	6122      	str	r2, [r4, #16]
 800fdf4:	4641      	mov	r1, r8
 800fdf6:	4620      	mov	r0, r4
 800fdf8:	f000 fab2 	bl	8010360 <ucdr_check_final_buffer_behavior>
 800fdfc:	2800      	cmp	r0, #0
 800fdfe:	d04c      	beq.n	800fe9a <ucdr_serialize_int32_t+0xe2>
 800fe00:	7d23      	ldrb	r3, [r4, #20]
 800fe02:	2b01      	cmp	r3, #1
 800fe04:	d063      	beq.n	800fece <ucdr_serialize_int32_t+0x116>
 800fe06:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800fe0a:	702b      	strb	r3, [r5, #0]
 800fe0c:	2e00      	cmp	r6, #0
 800fe0e:	d051      	beq.n	800feb4 <ucdr_serialize_int32_t+0xfc>
 800fe10:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800fe14:	706b      	strb	r3, [r5, #1]
 800fe16:	2e01      	cmp	r6, #1
 800fe18:	d050      	beq.n	800febc <ucdr_serialize_int32_t+0x104>
 800fe1a:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800fe1e:	70ab      	strb	r3, [r5, #2]
 800fe20:	2e02      	cmp	r6, #2
 800fe22:	d04f      	beq.n	800fec4 <ucdr_serialize_int32_t+0x10c>
 800fe24:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800fe28:	70eb      	strb	r3, [r5, #3]
 800fe2a:	6923      	ldr	r3, [r4, #16]
 800fe2c:	68a2      	ldr	r2, [r4, #8]
 800fe2e:	7da0      	ldrb	r0, [r4, #22]
 800fe30:	3304      	adds	r3, #4
 800fe32:	1b9b      	subs	r3, r3, r6
 800fe34:	4442      	add	r2, r8
 800fe36:	2104      	movs	r1, #4
 800fe38:	f080 0001 	eor.w	r0, r0, #1
 800fe3c:	6123      	str	r3, [r4, #16]
 800fe3e:	60a2      	str	r2, [r4, #8]
 800fe40:	7561      	strb	r1, [r4, #21]
 800fe42:	b002      	add	sp, #8
 800fe44:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fe48:	2104      	movs	r1, #4
 800fe4a:	4620      	mov	r0, r4
 800fe4c:	f000 fa88 	bl	8010360 <ucdr_check_final_buffer_behavior>
 800fe50:	b1d0      	cbz	r0, 800fe88 <ucdr_serialize_int32_t+0xd0>
 800fe52:	7d23      	ldrb	r3, [r4, #20]
 800fe54:	2b01      	cmp	r3, #1
 800fe56:	68a3      	ldr	r3, [r4, #8]
 800fe58:	d01c      	beq.n	800fe94 <ucdr_serialize_int32_t+0xdc>
 800fe5a:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800fe5e:	701a      	strb	r2, [r3, #0]
 800fe60:	68a3      	ldr	r3, [r4, #8]
 800fe62:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800fe66:	705a      	strb	r2, [r3, #1]
 800fe68:	68a3      	ldr	r3, [r4, #8]
 800fe6a:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800fe6e:	709a      	strb	r2, [r3, #2]
 800fe70:	68a3      	ldr	r3, [r4, #8]
 800fe72:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800fe76:	70da      	strb	r2, [r3, #3]
 800fe78:	68a2      	ldr	r2, [r4, #8]
 800fe7a:	6923      	ldr	r3, [r4, #16]
 800fe7c:	3204      	adds	r2, #4
 800fe7e:	3304      	adds	r3, #4
 800fe80:	2104      	movs	r1, #4
 800fe82:	60a2      	str	r2, [r4, #8]
 800fe84:	6123      	str	r3, [r4, #16]
 800fe86:	7561      	strb	r1, [r4, #21]
 800fe88:	7da0      	ldrb	r0, [r4, #22]
 800fe8a:	f080 0001 	eor.w	r0, r0, #1
 800fe8e:	b002      	add	sp, #8
 800fe90:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fe94:	9a01      	ldr	r2, [sp, #4]
 800fe96:	601a      	str	r2, [r3, #0]
 800fe98:	e7ee      	b.n	800fe78 <ucdr_serialize_int32_t+0xc0>
 800fe9a:	68a2      	ldr	r2, [r4, #8]
 800fe9c:	6923      	ldr	r3, [r4, #16]
 800fe9e:	7da0      	ldrb	r0, [r4, #22]
 800fea0:	7567      	strb	r7, [r4, #21]
 800fea2:	1b92      	subs	r2, r2, r6
 800fea4:	1b9b      	subs	r3, r3, r6
 800fea6:	f080 0001 	eor.w	r0, r0, #1
 800feaa:	60a2      	str	r2, [r4, #8]
 800feac:	6123      	str	r3, [r4, #16]
 800feae:	b002      	add	sp, #8
 800feb0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800feb4:	68a3      	ldr	r3, [r4, #8]
 800feb6:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800feba:	701a      	strb	r2, [r3, #0]
 800febc:	68a3      	ldr	r3, [r4, #8]
 800febe:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800fec2:	701a      	strb	r2, [r3, #0]
 800fec4:	68a3      	ldr	r3, [r4, #8]
 800fec6:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800feca:	701a      	strb	r2, [r3, #0]
 800fecc:	e7ad      	b.n	800fe2a <ucdr_serialize_int32_t+0x72>
 800fece:	4628      	mov	r0, r5
 800fed0:	ad01      	add	r5, sp, #4
 800fed2:	4629      	mov	r1, r5
 800fed4:	4632      	mov	r2, r6
 800fed6:	f009 ffb4 	bl	8019e42 <memcpy>
 800feda:	68a0      	ldr	r0, [r4, #8]
 800fedc:	4642      	mov	r2, r8
 800fede:	19a9      	adds	r1, r5, r6
 800fee0:	f009 ffaf 	bl	8019e42 <memcpy>
 800fee4:	e7a1      	b.n	800fe2a <ucdr_serialize_int32_t+0x72>
 800fee6:	bf00      	nop

0800fee8 <ucdr_deserialize_int32_t>:
 800fee8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800feec:	460d      	mov	r5, r1
 800feee:	2104      	movs	r1, #4
 800fef0:	4604      	mov	r4, r0
 800fef2:	f000 fa87 	bl	8010404 <ucdr_buffer_alignment>
 800fef6:	4601      	mov	r1, r0
 800fef8:	4620      	mov	r0, r4
 800fefa:	f894 8015 	ldrb.w	r8, [r4, #21]
 800fefe:	f000 fac5 	bl	801048c <ucdr_advance_buffer>
 800ff02:	4620      	mov	r0, r4
 800ff04:	2104      	movs	r1, #4
 800ff06:	f000 fa1f 	bl	8010348 <ucdr_check_buffer_available_for>
 800ff0a:	2800      	cmp	r0, #0
 800ff0c:	d138      	bne.n	800ff80 <ucdr_deserialize_int32_t+0x98>
 800ff0e:	e9d4 7601 	ldrd	r7, r6, [r4, #4]
 800ff12:	42b7      	cmp	r7, r6
 800ff14:	d92f      	bls.n	800ff76 <ucdr_deserialize_int32_t+0x8e>
 800ff16:	6922      	ldr	r2, [r4, #16]
 800ff18:	60a7      	str	r7, [r4, #8]
 800ff1a:	1bbf      	subs	r7, r7, r6
 800ff1c:	443a      	add	r2, r7
 800ff1e:	f1c7 0904 	rsb	r9, r7, #4
 800ff22:	6122      	str	r2, [r4, #16]
 800ff24:	4649      	mov	r1, r9
 800ff26:	4620      	mov	r0, r4
 800ff28:	f000 fa1a 	bl	8010360 <ucdr_check_final_buffer_behavior>
 800ff2c:	2800      	cmp	r0, #0
 800ff2e:	d046      	beq.n	800ffbe <ucdr_deserialize_int32_t+0xd6>
 800ff30:	7d23      	ldrb	r3, [r4, #20]
 800ff32:	2b01      	cmp	r3, #1
 800ff34:	d05c      	beq.n	800fff0 <ucdr_deserialize_int32_t+0x108>
 800ff36:	78f3      	ldrb	r3, [r6, #3]
 800ff38:	702b      	strb	r3, [r5, #0]
 800ff3a:	2f00      	cmp	r7, #0
 800ff3c:	d04c      	beq.n	800ffd8 <ucdr_deserialize_int32_t+0xf0>
 800ff3e:	78b3      	ldrb	r3, [r6, #2]
 800ff40:	706b      	strb	r3, [r5, #1]
 800ff42:	2f01      	cmp	r7, #1
 800ff44:	f105 0302 	add.w	r3, r5, #2
 800ff48:	d04a      	beq.n	800ffe0 <ucdr_deserialize_int32_t+0xf8>
 800ff4a:	7873      	ldrb	r3, [r6, #1]
 800ff4c:	70ab      	strb	r3, [r5, #2]
 800ff4e:	2f02      	cmp	r7, #2
 800ff50:	f105 0303 	add.w	r3, r5, #3
 800ff54:	d048      	beq.n	800ffe8 <ucdr_deserialize_int32_t+0x100>
 800ff56:	7833      	ldrb	r3, [r6, #0]
 800ff58:	70eb      	strb	r3, [r5, #3]
 800ff5a:	6923      	ldr	r3, [r4, #16]
 800ff5c:	68a2      	ldr	r2, [r4, #8]
 800ff5e:	7da0      	ldrb	r0, [r4, #22]
 800ff60:	2104      	movs	r1, #4
 800ff62:	3304      	adds	r3, #4
 800ff64:	1bdb      	subs	r3, r3, r7
 800ff66:	444a      	add	r2, r9
 800ff68:	7561      	strb	r1, [r4, #21]
 800ff6a:	6123      	str	r3, [r4, #16]
 800ff6c:	60a2      	str	r2, [r4, #8]
 800ff6e:	f080 0001 	eor.w	r0, r0, #1
 800ff72:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ff76:	2104      	movs	r1, #4
 800ff78:	4620      	mov	r0, r4
 800ff7a:	f000 f9f1 	bl	8010360 <ucdr_check_final_buffer_behavior>
 800ff7e:	b1b0      	cbz	r0, 800ffae <ucdr_deserialize_int32_t+0xc6>
 800ff80:	7d23      	ldrb	r3, [r4, #20]
 800ff82:	2b01      	cmp	r3, #1
 800ff84:	68a3      	ldr	r3, [r4, #8]
 800ff86:	d017      	beq.n	800ffb8 <ucdr_deserialize_int32_t+0xd0>
 800ff88:	78db      	ldrb	r3, [r3, #3]
 800ff8a:	702b      	strb	r3, [r5, #0]
 800ff8c:	68a3      	ldr	r3, [r4, #8]
 800ff8e:	789b      	ldrb	r3, [r3, #2]
 800ff90:	706b      	strb	r3, [r5, #1]
 800ff92:	68a3      	ldr	r3, [r4, #8]
 800ff94:	785b      	ldrb	r3, [r3, #1]
 800ff96:	70ab      	strb	r3, [r5, #2]
 800ff98:	68a3      	ldr	r3, [r4, #8]
 800ff9a:	781b      	ldrb	r3, [r3, #0]
 800ff9c:	70eb      	strb	r3, [r5, #3]
 800ff9e:	68a2      	ldr	r2, [r4, #8]
 800ffa0:	6923      	ldr	r3, [r4, #16]
 800ffa2:	3204      	adds	r2, #4
 800ffa4:	3304      	adds	r3, #4
 800ffa6:	2104      	movs	r1, #4
 800ffa8:	60a2      	str	r2, [r4, #8]
 800ffaa:	6123      	str	r3, [r4, #16]
 800ffac:	7561      	strb	r1, [r4, #21]
 800ffae:	7da0      	ldrb	r0, [r4, #22]
 800ffb0:	f080 0001 	eor.w	r0, r0, #1
 800ffb4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ffb8:	681b      	ldr	r3, [r3, #0]
 800ffba:	602b      	str	r3, [r5, #0]
 800ffbc:	e7ef      	b.n	800ff9e <ucdr_deserialize_int32_t+0xb6>
 800ffbe:	68a2      	ldr	r2, [r4, #8]
 800ffc0:	6923      	ldr	r3, [r4, #16]
 800ffc2:	7da0      	ldrb	r0, [r4, #22]
 800ffc4:	f884 8015 	strb.w	r8, [r4, #21]
 800ffc8:	1bd2      	subs	r2, r2, r7
 800ffca:	1bdb      	subs	r3, r3, r7
 800ffcc:	60a2      	str	r2, [r4, #8]
 800ffce:	6123      	str	r3, [r4, #16]
 800ffd0:	f080 0001 	eor.w	r0, r0, #1
 800ffd4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ffd8:	68a3      	ldr	r3, [r4, #8]
 800ffda:	789b      	ldrb	r3, [r3, #2]
 800ffdc:	706b      	strb	r3, [r5, #1]
 800ffde:	1cab      	adds	r3, r5, #2
 800ffe0:	68a2      	ldr	r2, [r4, #8]
 800ffe2:	7852      	ldrb	r2, [r2, #1]
 800ffe4:	f803 2b01 	strb.w	r2, [r3], #1
 800ffe8:	68a2      	ldr	r2, [r4, #8]
 800ffea:	7812      	ldrb	r2, [r2, #0]
 800ffec:	701a      	strb	r2, [r3, #0]
 800ffee:	e7b4      	b.n	800ff5a <ucdr_deserialize_int32_t+0x72>
 800fff0:	4631      	mov	r1, r6
 800fff2:	463a      	mov	r2, r7
 800fff4:	4628      	mov	r0, r5
 800fff6:	f009 ff24 	bl	8019e42 <memcpy>
 800fffa:	68a1      	ldr	r1, [r4, #8]
 800fffc:	464a      	mov	r2, r9
 800fffe:	19e8      	adds	r0, r5, r7
 8010000:	f009 ff1f 	bl	8019e42 <memcpy>
 8010004:	e7a9      	b.n	800ff5a <ucdr_deserialize_int32_t+0x72>
 8010006:	bf00      	nop

08010008 <ucdr_serialize_endian_double>:
 8010008:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801000c:	460e      	mov	r6, r1
 801000e:	b083      	sub	sp, #12
 8010010:	2108      	movs	r1, #8
 8010012:	4604      	mov	r4, r0
 8010014:	ed8d 0b00 	vstr	d0, [sp]
 8010018:	f000 f9f4 	bl	8010404 <ucdr_buffer_alignment>
 801001c:	4601      	mov	r1, r0
 801001e:	4620      	mov	r0, r4
 8010020:	f894 8015 	ldrb.w	r8, [r4, #21]
 8010024:	f000 fa32 	bl	801048c <ucdr_advance_buffer>
 8010028:	4620      	mov	r0, r4
 801002a:	2108      	movs	r1, #8
 801002c:	f000 f98c 	bl	8010348 <ucdr_check_buffer_available_for>
 8010030:	2800      	cmp	r0, #0
 8010032:	d14d      	bne.n	80100d0 <ucdr_serialize_endian_double+0xc8>
 8010034:	e9d4 5701 	ldrd	r5, r7, [r4, #4]
 8010038:	42bd      	cmp	r5, r7
 801003a:	d944      	bls.n	80100c6 <ucdr_serialize_endian_double+0xbe>
 801003c:	6923      	ldr	r3, [r4, #16]
 801003e:	60a5      	str	r5, [r4, #8]
 8010040:	1bed      	subs	r5, r5, r7
 8010042:	442b      	add	r3, r5
 8010044:	f1c5 0908 	rsb	r9, r5, #8
 8010048:	6123      	str	r3, [r4, #16]
 801004a:	4649      	mov	r1, r9
 801004c:	4620      	mov	r0, r4
 801004e:	f000 f987 	bl	8010360 <ucdr_check_final_buffer_behavior>
 8010052:	2800      	cmp	r0, #0
 8010054:	d072      	beq.n	801013c <ucdr_serialize_endian_double+0x134>
 8010056:	2e01      	cmp	r6, #1
 8010058:	f000 809b 	beq.w	8010192 <ucdr_serialize_endian_double+0x18a>
 801005c:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8010060:	703b      	strb	r3, [r7, #0]
 8010062:	2d00      	cmp	r5, #0
 8010064:	d078      	beq.n	8010158 <ucdr_serialize_endian_double+0x150>
 8010066:	f89d 3006 	ldrb.w	r3, [sp, #6]
 801006a:	707b      	strb	r3, [r7, #1]
 801006c:	2d01      	cmp	r5, #1
 801006e:	d077      	beq.n	8010160 <ucdr_serialize_endian_double+0x158>
 8010070:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8010074:	70bb      	strb	r3, [r7, #2]
 8010076:	2d02      	cmp	r5, #2
 8010078:	d076      	beq.n	8010168 <ucdr_serialize_endian_double+0x160>
 801007a:	f89d 3004 	ldrb.w	r3, [sp, #4]
 801007e:	70fb      	strb	r3, [r7, #3]
 8010080:	2d03      	cmp	r5, #3
 8010082:	d075      	beq.n	8010170 <ucdr_serialize_endian_double+0x168>
 8010084:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8010088:	713b      	strb	r3, [r7, #4]
 801008a:	2d04      	cmp	r5, #4
 801008c:	d074      	beq.n	8010178 <ucdr_serialize_endian_double+0x170>
 801008e:	f89d 3002 	ldrb.w	r3, [sp, #2]
 8010092:	717b      	strb	r3, [r7, #5]
 8010094:	2d05      	cmp	r5, #5
 8010096:	d073      	beq.n	8010180 <ucdr_serialize_endian_double+0x178>
 8010098:	f89d 3001 	ldrb.w	r3, [sp, #1]
 801009c:	71bb      	strb	r3, [r7, #6]
 801009e:	2d06      	cmp	r5, #6
 80100a0:	d072      	beq.n	8010188 <ucdr_serialize_endian_double+0x180>
 80100a2:	f89d 3000 	ldrb.w	r3, [sp]
 80100a6:	71fb      	strb	r3, [r7, #7]
 80100a8:	6923      	ldr	r3, [r4, #16]
 80100aa:	68a2      	ldr	r2, [r4, #8]
 80100ac:	7da0      	ldrb	r0, [r4, #22]
 80100ae:	3308      	adds	r3, #8
 80100b0:	1b5d      	subs	r5, r3, r5
 80100b2:	444a      	add	r2, r9
 80100b4:	2308      	movs	r3, #8
 80100b6:	f080 0001 	eor.w	r0, r0, #1
 80100ba:	6125      	str	r5, [r4, #16]
 80100bc:	60a2      	str	r2, [r4, #8]
 80100be:	7563      	strb	r3, [r4, #21]
 80100c0:	b003      	add	sp, #12
 80100c2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80100c6:	2108      	movs	r1, #8
 80100c8:	4620      	mov	r0, r4
 80100ca:	f000 f949 	bl	8010360 <ucdr_check_final_buffer_behavior>
 80100ce:	b348      	cbz	r0, 8010124 <ucdr_serialize_endian_double+0x11c>
 80100d0:	2e01      	cmp	r6, #1
 80100d2:	d02d      	beq.n	8010130 <ucdr_serialize_endian_double+0x128>
 80100d4:	68a3      	ldr	r3, [r4, #8]
 80100d6:	f89d 2007 	ldrb.w	r2, [sp, #7]
 80100da:	701a      	strb	r2, [r3, #0]
 80100dc:	68a3      	ldr	r3, [r4, #8]
 80100de:	f89d 2006 	ldrb.w	r2, [sp, #6]
 80100e2:	705a      	strb	r2, [r3, #1]
 80100e4:	68a3      	ldr	r3, [r4, #8]
 80100e6:	f89d 2005 	ldrb.w	r2, [sp, #5]
 80100ea:	709a      	strb	r2, [r3, #2]
 80100ec:	68a3      	ldr	r3, [r4, #8]
 80100ee:	f89d 2004 	ldrb.w	r2, [sp, #4]
 80100f2:	70da      	strb	r2, [r3, #3]
 80100f4:	68a3      	ldr	r3, [r4, #8]
 80100f6:	f89d 2003 	ldrb.w	r2, [sp, #3]
 80100fa:	711a      	strb	r2, [r3, #4]
 80100fc:	68a3      	ldr	r3, [r4, #8]
 80100fe:	f89d 2002 	ldrb.w	r2, [sp, #2]
 8010102:	715a      	strb	r2, [r3, #5]
 8010104:	68a3      	ldr	r3, [r4, #8]
 8010106:	f89d 2001 	ldrb.w	r2, [sp, #1]
 801010a:	719a      	strb	r2, [r3, #6]
 801010c:	68a3      	ldr	r3, [r4, #8]
 801010e:	f89d 2000 	ldrb.w	r2, [sp]
 8010112:	71da      	strb	r2, [r3, #7]
 8010114:	68a2      	ldr	r2, [r4, #8]
 8010116:	6923      	ldr	r3, [r4, #16]
 8010118:	3208      	adds	r2, #8
 801011a:	3308      	adds	r3, #8
 801011c:	2108      	movs	r1, #8
 801011e:	60a2      	str	r2, [r4, #8]
 8010120:	6123      	str	r3, [r4, #16]
 8010122:	7561      	strb	r1, [r4, #21]
 8010124:	7da0      	ldrb	r0, [r4, #22]
 8010126:	f080 0001 	eor.w	r0, r0, #1
 801012a:	b003      	add	sp, #12
 801012c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8010130:	466b      	mov	r3, sp
 8010132:	cb03      	ldmia	r3!, {r0, r1}
 8010134:	68a3      	ldr	r3, [r4, #8]
 8010136:	6018      	str	r0, [r3, #0]
 8010138:	6059      	str	r1, [r3, #4]
 801013a:	e7eb      	b.n	8010114 <ucdr_serialize_endian_double+0x10c>
 801013c:	68a2      	ldr	r2, [r4, #8]
 801013e:	6923      	ldr	r3, [r4, #16]
 8010140:	7da0      	ldrb	r0, [r4, #22]
 8010142:	f884 8015 	strb.w	r8, [r4, #21]
 8010146:	1b52      	subs	r2, r2, r5
 8010148:	f080 0001 	eor.w	r0, r0, #1
 801014c:	1b5d      	subs	r5, r3, r5
 801014e:	60a2      	str	r2, [r4, #8]
 8010150:	6125      	str	r5, [r4, #16]
 8010152:	b003      	add	sp, #12
 8010154:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8010158:	68a3      	ldr	r3, [r4, #8]
 801015a:	f89d 2006 	ldrb.w	r2, [sp, #6]
 801015e:	701a      	strb	r2, [r3, #0]
 8010160:	68a3      	ldr	r3, [r4, #8]
 8010162:	f89d 2005 	ldrb.w	r2, [sp, #5]
 8010166:	701a      	strb	r2, [r3, #0]
 8010168:	68a3      	ldr	r3, [r4, #8]
 801016a:	f89d 2004 	ldrb.w	r2, [sp, #4]
 801016e:	701a      	strb	r2, [r3, #0]
 8010170:	68a3      	ldr	r3, [r4, #8]
 8010172:	f89d 2003 	ldrb.w	r2, [sp, #3]
 8010176:	701a      	strb	r2, [r3, #0]
 8010178:	68a3      	ldr	r3, [r4, #8]
 801017a:	f89d 2002 	ldrb.w	r2, [sp, #2]
 801017e:	701a      	strb	r2, [r3, #0]
 8010180:	68a3      	ldr	r3, [r4, #8]
 8010182:	f89d 2001 	ldrb.w	r2, [sp, #1]
 8010186:	701a      	strb	r2, [r3, #0]
 8010188:	68a3      	ldr	r3, [r4, #8]
 801018a:	f89d 2000 	ldrb.w	r2, [sp]
 801018e:	701a      	strb	r2, [r3, #0]
 8010190:	e78a      	b.n	80100a8 <ucdr_serialize_endian_double+0xa0>
 8010192:	466e      	mov	r6, sp
 8010194:	4631      	mov	r1, r6
 8010196:	462a      	mov	r2, r5
 8010198:	4638      	mov	r0, r7
 801019a:	f009 fe52 	bl	8019e42 <memcpy>
 801019e:	68a0      	ldr	r0, [r4, #8]
 80101a0:	464a      	mov	r2, r9
 80101a2:	1971      	adds	r1, r6, r5
 80101a4:	f009 fe4d 	bl	8019e42 <memcpy>
 80101a8:	e77e      	b.n	80100a8 <ucdr_serialize_endian_double+0xa0>
 80101aa:	bf00      	nop

080101ac <ucdr_deserialize_endian_double>:
 80101ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80101b0:	460f      	mov	r7, r1
 80101b2:	2108      	movs	r1, #8
 80101b4:	4604      	mov	r4, r0
 80101b6:	4615      	mov	r5, r2
 80101b8:	f000 f924 	bl	8010404 <ucdr_buffer_alignment>
 80101bc:	4601      	mov	r1, r0
 80101be:	4620      	mov	r0, r4
 80101c0:	f894 9015 	ldrb.w	r9, [r4, #21]
 80101c4:	f000 f962 	bl	801048c <ucdr_advance_buffer>
 80101c8:	4620      	mov	r0, r4
 80101ca:	2108      	movs	r1, #8
 80101cc:	f000 f8bc 	bl	8010348 <ucdr_check_buffer_available_for>
 80101d0:	2800      	cmp	r0, #0
 80101d2:	d159      	bne.n	8010288 <ucdr_deserialize_endian_double+0xdc>
 80101d4:	e9d4 6801 	ldrd	r6, r8, [r4, #4]
 80101d8:	4546      	cmp	r6, r8
 80101da:	d950      	bls.n	801027e <ucdr_deserialize_endian_double+0xd2>
 80101dc:	6923      	ldr	r3, [r4, #16]
 80101de:	60a6      	str	r6, [r4, #8]
 80101e0:	eba6 0608 	sub.w	r6, r6, r8
 80101e4:	4433      	add	r3, r6
 80101e6:	f1c6 0a08 	rsb	sl, r6, #8
 80101ea:	6123      	str	r3, [r4, #16]
 80101ec:	4651      	mov	r1, sl
 80101ee:	4620      	mov	r0, r4
 80101f0:	f000 f8b6 	bl	8010360 <ucdr_check_final_buffer_behavior>
 80101f4:	2800      	cmp	r0, #0
 80101f6:	d073      	beq.n	80102e0 <ucdr_deserialize_endian_double+0x134>
 80101f8:	2f01      	cmp	r7, #1
 80101fa:	f000 809a 	beq.w	8010332 <ucdr_deserialize_endian_double+0x186>
 80101fe:	f898 3007 	ldrb.w	r3, [r8, #7]
 8010202:	702b      	strb	r3, [r5, #0]
 8010204:	2e00      	cmp	r6, #0
 8010206:	d078      	beq.n	80102fa <ucdr_deserialize_endian_double+0x14e>
 8010208:	f898 3006 	ldrb.w	r3, [r8, #6]
 801020c:	706b      	strb	r3, [r5, #1]
 801020e:	2e01      	cmp	r6, #1
 8010210:	f105 0302 	add.w	r3, r5, #2
 8010214:	d075      	beq.n	8010302 <ucdr_deserialize_endian_double+0x156>
 8010216:	f898 3005 	ldrb.w	r3, [r8, #5]
 801021a:	70ab      	strb	r3, [r5, #2]
 801021c:	2e02      	cmp	r6, #2
 801021e:	f105 0303 	add.w	r3, r5, #3
 8010222:	d072      	beq.n	801030a <ucdr_deserialize_endian_double+0x15e>
 8010224:	f898 3004 	ldrb.w	r3, [r8, #4]
 8010228:	70eb      	strb	r3, [r5, #3]
 801022a:	2e03      	cmp	r6, #3
 801022c:	f105 0304 	add.w	r3, r5, #4
 8010230:	d06f      	beq.n	8010312 <ucdr_deserialize_endian_double+0x166>
 8010232:	f898 3003 	ldrb.w	r3, [r8, #3]
 8010236:	712b      	strb	r3, [r5, #4]
 8010238:	2e04      	cmp	r6, #4
 801023a:	f105 0305 	add.w	r3, r5, #5
 801023e:	d06c      	beq.n	801031a <ucdr_deserialize_endian_double+0x16e>
 8010240:	f898 3002 	ldrb.w	r3, [r8, #2]
 8010244:	716b      	strb	r3, [r5, #5]
 8010246:	2e05      	cmp	r6, #5
 8010248:	f105 0306 	add.w	r3, r5, #6
 801024c:	d069      	beq.n	8010322 <ucdr_deserialize_endian_double+0x176>
 801024e:	f898 3001 	ldrb.w	r3, [r8, #1]
 8010252:	71ab      	strb	r3, [r5, #6]
 8010254:	2e06      	cmp	r6, #6
 8010256:	f105 0307 	add.w	r3, r5, #7
 801025a:	d066      	beq.n	801032a <ucdr_deserialize_endian_double+0x17e>
 801025c:	f898 3000 	ldrb.w	r3, [r8]
 8010260:	71eb      	strb	r3, [r5, #7]
 8010262:	6923      	ldr	r3, [r4, #16]
 8010264:	68a2      	ldr	r2, [r4, #8]
 8010266:	7da0      	ldrb	r0, [r4, #22]
 8010268:	3308      	adds	r3, #8
 801026a:	1b9e      	subs	r6, r3, r6
 801026c:	2308      	movs	r3, #8
 801026e:	4452      	add	r2, sl
 8010270:	7563      	strb	r3, [r4, #21]
 8010272:	6126      	str	r6, [r4, #16]
 8010274:	60a2      	str	r2, [r4, #8]
 8010276:	f080 0001 	eor.w	r0, r0, #1
 801027a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801027e:	2108      	movs	r1, #8
 8010280:	4620      	mov	r0, r4
 8010282:	f000 f86d 	bl	8010360 <ucdr_check_final_buffer_behavior>
 8010286:	b308      	cbz	r0, 80102cc <ucdr_deserialize_endian_double+0x120>
 8010288:	2f01      	cmp	r7, #1
 801028a:	68a3      	ldr	r3, [r4, #8]
 801028c:	d023      	beq.n	80102d6 <ucdr_deserialize_endian_double+0x12a>
 801028e:	79db      	ldrb	r3, [r3, #7]
 8010290:	702b      	strb	r3, [r5, #0]
 8010292:	68a3      	ldr	r3, [r4, #8]
 8010294:	799b      	ldrb	r3, [r3, #6]
 8010296:	706b      	strb	r3, [r5, #1]
 8010298:	68a3      	ldr	r3, [r4, #8]
 801029a:	795b      	ldrb	r3, [r3, #5]
 801029c:	70ab      	strb	r3, [r5, #2]
 801029e:	68a3      	ldr	r3, [r4, #8]
 80102a0:	791b      	ldrb	r3, [r3, #4]
 80102a2:	70eb      	strb	r3, [r5, #3]
 80102a4:	68a3      	ldr	r3, [r4, #8]
 80102a6:	78db      	ldrb	r3, [r3, #3]
 80102a8:	712b      	strb	r3, [r5, #4]
 80102aa:	68a3      	ldr	r3, [r4, #8]
 80102ac:	789b      	ldrb	r3, [r3, #2]
 80102ae:	716b      	strb	r3, [r5, #5]
 80102b0:	68a3      	ldr	r3, [r4, #8]
 80102b2:	785b      	ldrb	r3, [r3, #1]
 80102b4:	71ab      	strb	r3, [r5, #6]
 80102b6:	68a3      	ldr	r3, [r4, #8]
 80102b8:	781b      	ldrb	r3, [r3, #0]
 80102ba:	71eb      	strb	r3, [r5, #7]
 80102bc:	68a2      	ldr	r2, [r4, #8]
 80102be:	6923      	ldr	r3, [r4, #16]
 80102c0:	3208      	adds	r2, #8
 80102c2:	3308      	adds	r3, #8
 80102c4:	2108      	movs	r1, #8
 80102c6:	60a2      	str	r2, [r4, #8]
 80102c8:	6123      	str	r3, [r4, #16]
 80102ca:	7561      	strb	r1, [r4, #21]
 80102cc:	7da0      	ldrb	r0, [r4, #22]
 80102ce:	f080 0001 	eor.w	r0, r0, #1
 80102d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80102d6:	681a      	ldr	r2, [r3, #0]
 80102d8:	685b      	ldr	r3, [r3, #4]
 80102da:	606b      	str	r3, [r5, #4]
 80102dc:	602a      	str	r2, [r5, #0]
 80102de:	e7ed      	b.n	80102bc <ucdr_deserialize_endian_double+0x110>
 80102e0:	68a2      	ldr	r2, [r4, #8]
 80102e2:	6923      	ldr	r3, [r4, #16]
 80102e4:	7da0      	ldrb	r0, [r4, #22]
 80102e6:	f884 9015 	strb.w	r9, [r4, #21]
 80102ea:	1b92      	subs	r2, r2, r6
 80102ec:	1b9e      	subs	r6, r3, r6
 80102ee:	60a2      	str	r2, [r4, #8]
 80102f0:	6126      	str	r6, [r4, #16]
 80102f2:	f080 0001 	eor.w	r0, r0, #1
 80102f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80102fa:	68a3      	ldr	r3, [r4, #8]
 80102fc:	799b      	ldrb	r3, [r3, #6]
 80102fe:	706b      	strb	r3, [r5, #1]
 8010300:	1cab      	adds	r3, r5, #2
 8010302:	68a2      	ldr	r2, [r4, #8]
 8010304:	7952      	ldrb	r2, [r2, #5]
 8010306:	f803 2b01 	strb.w	r2, [r3], #1
 801030a:	68a2      	ldr	r2, [r4, #8]
 801030c:	7912      	ldrb	r2, [r2, #4]
 801030e:	f803 2b01 	strb.w	r2, [r3], #1
 8010312:	68a2      	ldr	r2, [r4, #8]
 8010314:	78d2      	ldrb	r2, [r2, #3]
 8010316:	f803 2b01 	strb.w	r2, [r3], #1
 801031a:	68a2      	ldr	r2, [r4, #8]
 801031c:	7892      	ldrb	r2, [r2, #2]
 801031e:	f803 2b01 	strb.w	r2, [r3], #1
 8010322:	68a2      	ldr	r2, [r4, #8]
 8010324:	7852      	ldrb	r2, [r2, #1]
 8010326:	f803 2b01 	strb.w	r2, [r3], #1
 801032a:	68a2      	ldr	r2, [r4, #8]
 801032c:	7812      	ldrb	r2, [r2, #0]
 801032e:	701a      	strb	r2, [r3, #0]
 8010330:	e797      	b.n	8010262 <ucdr_deserialize_endian_double+0xb6>
 8010332:	4641      	mov	r1, r8
 8010334:	4632      	mov	r2, r6
 8010336:	4628      	mov	r0, r5
 8010338:	f009 fd83 	bl	8019e42 <memcpy>
 801033c:	68a1      	ldr	r1, [r4, #8]
 801033e:	4652      	mov	r2, sl
 8010340:	19a8      	adds	r0, r5, r6
 8010342:	f009 fd7e 	bl	8019e42 <memcpy>
 8010346:	e78c      	b.n	8010262 <ucdr_deserialize_endian_double+0xb6>

08010348 <ucdr_check_buffer_available_for>:
 8010348:	7d83      	ldrb	r3, [r0, #22]
 801034a:	b93b      	cbnz	r3, 801035c <ucdr_check_buffer_available_for+0x14>
 801034c:	e9d0 0301 	ldrd	r0, r3, [r0, #4]
 8010350:	4419      	add	r1, r3
 8010352:	4288      	cmp	r0, r1
 8010354:	bf34      	ite	cc
 8010356:	2000      	movcc	r0, #0
 8010358:	2001      	movcs	r0, #1
 801035a:	4770      	bx	lr
 801035c:	2000      	movs	r0, #0
 801035e:	4770      	bx	lr

08010360 <ucdr_check_final_buffer_behavior>:
 8010360:	7d83      	ldrb	r3, [r0, #22]
 8010362:	b943      	cbnz	r3, 8010376 <ucdr_check_final_buffer_behavior+0x16>
 8010364:	e9d0 2101 	ldrd	r2, r1, [r0, #4]
 8010368:	4291      	cmp	r1, r2
 801036a:	b510      	push	{r4, lr}
 801036c:	4604      	mov	r4, r0
 801036e:	d205      	bcs.n	801037c <ucdr_check_final_buffer_behavior+0x1c>
 8010370:	2301      	movs	r3, #1
 8010372:	4618      	mov	r0, r3
 8010374:	bd10      	pop	{r4, pc}
 8010376:	2300      	movs	r3, #0
 8010378:	4618      	mov	r0, r3
 801037a:	4770      	bx	lr
 801037c:	6982      	ldr	r2, [r0, #24]
 801037e:	b13a      	cbz	r2, 8010390 <ucdr_check_final_buffer_behavior+0x30>
 8010380:	69c1      	ldr	r1, [r0, #28]
 8010382:	4790      	blx	r2
 8010384:	f080 0301 	eor.w	r3, r0, #1
 8010388:	b2db      	uxtb	r3, r3
 801038a:	75a0      	strb	r0, [r4, #22]
 801038c:	4618      	mov	r0, r3
 801038e:	bd10      	pop	{r4, pc}
 8010390:	2001      	movs	r0, #1
 8010392:	75a0      	strb	r0, [r4, #22]
 8010394:	e7fa      	b.n	801038c <ucdr_check_final_buffer_behavior+0x2c>
 8010396:	bf00      	nop

08010398 <ucdr_set_on_full_buffer_callback>:
 8010398:	e9c0 1206 	strd	r1, r2, [r0, #24]
 801039c:	4770      	bx	lr
 801039e:	bf00      	nop

080103a0 <ucdr_init_buffer_origin_offset_endian>:
 80103a0:	b430      	push	{r4, r5}
 80103a2:	9c02      	ldr	r4, [sp, #8]
 80103a4:	f89d 500c 	ldrb.w	r5, [sp, #12]
 80103a8:	6001      	str	r1, [r0, #0]
 80103aa:	440a      	add	r2, r1
 80103ac:	60c3      	str	r3, [r0, #12]
 80103ae:	4421      	add	r1, r4
 80103b0:	441c      	add	r4, r3
 80103b2:	2300      	movs	r3, #0
 80103b4:	6104      	str	r4, [r0, #16]
 80103b6:	7505      	strb	r5, [r0, #20]
 80103b8:	e9c0 2101 	strd	r2, r1, [r0, #4]
 80103bc:	bc30      	pop	{r4, r5}
 80103be:	e9c0 3306 	strd	r3, r3, [r0, #24]
 80103c2:	7543      	strb	r3, [r0, #21]
 80103c4:	7583      	strb	r3, [r0, #22]
 80103c6:	4770      	bx	lr

080103c8 <ucdr_init_buffer_origin_offset>:
 80103c8:	b510      	push	{r4, lr}
 80103ca:	b082      	sub	sp, #8
 80103cc:	9c04      	ldr	r4, [sp, #16]
 80103ce:	9400      	str	r4, [sp, #0]
 80103d0:	2401      	movs	r4, #1
 80103d2:	9401      	str	r4, [sp, #4]
 80103d4:	f7ff ffe4 	bl	80103a0 <ucdr_init_buffer_origin_offset_endian>
 80103d8:	b002      	add	sp, #8
 80103da:	bd10      	pop	{r4, pc}

080103dc <ucdr_init_buffer_origin>:
 80103dc:	b510      	push	{r4, lr}
 80103de:	b082      	sub	sp, #8
 80103e0:	2400      	movs	r4, #0
 80103e2:	9400      	str	r4, [sp, #0]
 80103e4:	f7ff fff0 	bl	80103c8 <ucdr_init_buffer_origin_offset>
 80103e8:	b002      	add	sp, #8
 80103ea:	bd10      	pop	{r4, pc}

080103ec <ucdr_init_buffer>:
 80103ec:	2300      	movs	r3, #0
 80103ee:	f7ff bff5 	b.w	80103dc <ucdr_init_buffer_origin>
 80103f2:	bf00      	nop

080103f4 <ucdr_alignment>:
 80103f4:	fbb0 f3f1 	udiv	r3, r0, r1
 80103f8:	fb03 0011 	mls	r0, r3, r1, r0
 80103fc:	1a08      	subs	r0, r1, r0
 80103fe:	3901      	subs	r1, #1
 8010400:	4008      	ands	r0, r1
 8010402:	4770      	bx	lr

08010404 <ucdr_buffer_alignment>:
 8010404:	7d43      	ldrb	r3, [r0, #21]
 8010406:	428b      	cmp	r3, r1
 8010408:	d208      	bcs.n	801041c <ucdr_buffer_alignment+0x18>
 801040a:	6903      	ldr	r3, [r0, #16]
 801040c:	fbb3 f0f1 	udiv	r0, r3, r1
 8010410:	fb01 3010 	mls	r0, r1, r0, r3
 8010414:	1a08      	subs	r0, r1, r0
 8010416:	3901      	subs	r1, #1
 8010418:	4008      	ands	r0, r1
 801041a:	4770      	bx	lr
 801041c:	2000      	movs	r0, #0
 801041e:	4770      	bx	lr

08010420 <ucdr_align_to>:
 8010420:	b570      	push	{r4, r5, r6, lr}
 8010422:	4604      	mov	r4, r0
 8010424:	460e      	mov	r6, r1
 8010426:	f7ff ffed 	bl	8010404 <ucdr_buffer_alignment>
 801042a:	68a5      	ldr	r5, [r4, #8]
 801042c:	6863      	ldr	r3, [r4, #4]
 801042e:	6922      	ldr	r2, [r4, #16]
 8010430:	7566      	strb	r6, [r4, #21]
 8010432:	4405      	add	r5, r0
 8010434:	42ab      	cmp	r3, r5
 8010436:	4410      	add	r0, r2
 8010438:	bf28      	it	cs
 801043a:	462b      	movcs	r3, r5
 801043c:	6120      	str	r0, [r4, #16]
 801043e:	60a3      	str	r3, [r4, #8]
 8010440:	bd70      	pop	{r4, r5, r6, pc}
 8010442:	bf00      	nop

08010444 <ucdr_buffer_length>:
 8010444:	6882      	ldr	r2, [r0, #8]
 8010446:	6800      	ldr	r0, [r0, #0]
 8010448:	1a10      	subs	r0, r2, r0
 801044a:	4770      	bx	lr

0801044c <ucdr_buffer_remaining>:
 801044c:	e9d0 2001 	ldrd	r2, r0, [r0, #4]
 8010450:	1a10      	subs	r0, r2, r0
 8010452:	4770      	bx	lr

08010454 <ucdr_check_final_buffer_behavior_array>:
 8010454:	b538      	push	{r3, r4, r5, lr}
 8010456:	7d83      	ldrb	r3, [r0, #22]
 8010458:	b963      	cbnz	r3, 8010474 <ucdr_check_final_buffer_behavior_array+0x20>
 801045a:	e9d0 3201 	ldrd	r3, r2, [r0, #4]
 801045e:	429a      	cmp	r2, r3
 8010460:	4604      	mov	r4, r0
 8010462:	460d      	mov	r5, r1
 8010464:	d308      	bcc.n	8010478 <ucdr_check_final_buffer_behavior_array+0x24>
 8010466:	b139      	cbz	r1, 8010478 <ucdr_check_final_buffer_behavior_array+0x24>
 8010468:	6983      	ldr	r3, [r0, #24]
 801046a:	b163      	cbz	r3, 8010486 <ucdr_check_final_buffer_behavior_array+0x32>
 801046c:	69c1      	ldr	r1, [r0, #28]
 801046e:	4798      	blx	r3
 8010470:	75a0      	strb	r0, [r4, #22]
 8010472:	b108      	cbz	r0, 8010478 <ucdr_check_final_buffer_behavior_array+0x24>
 8010474:	2000      	movs	r0, #0
 8010476:	bd38      	pop	{r3, r4, r5, pc}
 8010478:	4620      	mov	r0, r4
 801047a:	f7ff ffe7 	bl	801044c <ucdr_buffer_remaining>
 801047e:	42a8      	cmp	r0, r5
 8010480:	bf28      	it	cs
 8010482:	4628      	movcs	r0, r5
 8010484:	bd38      	pop	{r3, r4, r5, pc}
 8010486:	2301      	movs	r3, #1
 8010488:	7583      	strb	r3, [r0, #22]
 801048a:	e7f3      	b.n	8010474 <ucdr_check_final_buffer_behavior_array+0x20>

0801048c <ucdr_advance_buffer>:
 801048c:	b538      	push	{r3, r4, r5, lr}
 801048e:	4604      	mov	r4, r0
 8010490:	460d      	mov	r5, r1
 8010492:	f7ff ff59 	bl	8010348 <ucdr_check_buffer_available_for>
 8010496:	b178      	cbz	r0, 80104b8 <ucdr_advance_buffer+0x2c>
 8010498:	68a3      	ldr	r3, [r4, #8]
 801049a:	6921      	ldr	r1, [r4, #16]
 801049c:	442b      	add	r3, r5
 801049e:	60a3      	str	r3, [r4, #8]
 80104a0:	2301      	movs	r3, #1
 80104a2:	4429      	add	r1, r5
 80104a4:	7563      	strb	r3, [r4, #21]
 80104a6:	6121      	str	r1, [r4, #16]
 80104a8:	bd38      	pop	{r3, r4, r5, pc}
 80104aa:	68a2      	ldr	r2, [r4, #8]
 80104ac:	6923      	ldr	r3, [r4, #16]
 80104ae:	4402      	add	r2, r0
 80104b0:	4403      	add	r3, r0
 80104b2:	1a2d      	subs	r5, r5, r0
 80104b4:	60a2      	str	r2, [r4, #8]
 80104b6:	6123      	str	r3, [r4, #16]
 80104b8:	2201      	movs	r2, #1
 80104ba:	4629      	mov	r1, r5
 80104bc:	4620      	mov	r0, r4
 80104be:	f7ff ffc9 	bl	8010454 <ucdr_check_final_buffer_behavior_array>
 80104c2:	2800      	cmp	r0, #0
 80104c4:	d1f1      	bne.n	80104aa <ucdr_advance_buffer+0x1e>
 80104c6:	2301      	movs	r3, #1
 80104c8:	7563      	strb	r3, [r4, #21]
 80104ca:	bd38      	pop	{r3, r4, r5, pc}

080104cc <ucdr_serialize_sequence_char>:
 80104cc:	b570      	push	{r4, r5, r6, lr}
 80104ce:	460e      	mov	r6, r1
 80104d0:	4615      	mov	r5, r2
 80104d2:	7d01      	ldrb	r1, [r0, #20]
 80104d4:	4604      	mov	r4, r0
 80104d6:	f7ff f8ed 	bl	800f6b4 <ucdr_serialize_endian_uint32_t>
 80104da:	b90d      	cbnz	r5, 80104e0 <ucdr_serialize_sequence_char+0x14>
 80104dc:	2001      	movs	r0, #1
 80104de:	bd70      	pop	{r4, r5, r6, pc}
 80104e0:	7d21      	ldrb	r1, [r4, #20]
 80104e2:	462b      	mov	r3, r5
 80104e4:	4632      	mov	r2, r6
 80104e6:	4620      	mov	r0, r4
 80104e8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80104ec:	f006 bfa8 	b.w	8017440 <ucdr_serialize_endian_array_char>

080104f0 <ucdr_deserialize_sequence_char>:
 80104f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80104f4:	461d      	mov	r5, r3
 80104f6:	4616      	mov	r6, r2
 80104f8:	460f      	mov	r7, r1
 80104fa:	461a      	mov	r2, r3
 80104fc:	7d01      	ldrb	r1, [r0, #20]
 80104fe:	4604      	mov	r4, r0
 8010500:	f7ff fa00 	bl	800f904 <ucdr_deserialize_endian_uint32_t>
 8010504:	682b      	ldr	r3, [r5, #0]
 8010506:	429e      	cmp	r6, r3
 8010508:	bf3c      	itt	cc
 801050a:	2201      	movcc	r2, #1
 801050c:	75a2      	strbcc	r2, [r4, #22]
 801050e:	b913      	cbnz	r3, 8010516 <ucdr_deserialize_sequence_char+0x26>
 8010510:	2001      	movs	r0, #1
 8010512:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010516:	7d21      	ldrb	r1, [r4, #20]
 8010518:	463a      	mov	r2, r7
 801051a:	4620      	mov	r0, r4
 801051c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8010520:	f006 bfc0 	b.w	80174a4 <ucdr_deserialize_endian_array_char>

08010524 <ucdr_serialize_sequence_uint8_t>:
 8010524:	b570      	push	{r4, r5, r6, lr}
 8010526:	460e      	mov	r6, r1
 8010528:	4615      	mov	r5, r2
 801052a:	7d01      	ldrb	r1, [r0, #20]
 801052c:	4604      	mov	r4, r0
 801052e:	f7ff f8c1 	bl	800f6b4 <ucdr_serialize_endian_uint32_t>
 8010532:	b90d      	cbnz	r5, 8010538 <ucdr_serialize_sequence_uint8_t+0x14>
 8010534:	2001      	movs	r0, #1
 8010536:	bd70      	pop	{r4, r5, r6, pc}
 8010538:	7d21      	ldrb	r1, [r4, #20]
 801053a:	462b      	mov	r3, r5
 801053c:	4632      	mov	r2, r6
 801053e:	4620      	mov	r0, r4
 8010540:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8010544:	f007 b812 	b.w	801756c <ucdr_serialize_endian_array_uint8_t>

08010548 <ucdr_deserialize_sequence_uint8_t>:
 8010548:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801054c:	461d      	mov	r5, r3
 801054e:	4616      	mov	r6, r2
 8010550:	460f      	mov	r7, r1
 8010552:	461a      	mov	r2, r3
 8010554:	7d01      	ldrb	r1, [r0, #20]
 8010556:	4604      	mov	r4, r0
 8010558:	f7ff f9d4 	bl	800f904 <ucdr_deserialize_endian_uint32_t>
 801055c:	682b      	ldr	r3, [r5, #0]
 801055e:	429e      	cmp	r6, r3
 8010560:	bf3c      	itt	cc
 8010562:	2201      	movcc	r2, #1
 8010564:	75a2      	strbcc	r2, [r4, #22]
 8010566:	b913      	cbnz	r3, 801056e <ucdr_deserialize_sequence_uint8_t+0x26>
 8010568:	2001      	movs	r0, #1
 801056a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801056e:	7d21      	ldrb	r1, [r4, #20]
 8010570:	463a      	mov	r2, r7
 8010572:	4620      	mov	r0, r4
 8010574:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8010578:	f007 b85c 	b.w	8017634 <ucdr_deserialize_endian_array_uint8_t>

0801057c <ucdr_serialize_sequence_double>:
 801057c:	b570      	push	{r4, r5, r6, lr}
 801057e:	460e      	mov	r6, r1
 8010580:	4615      	mov	r5, r2
 8010582:	7d01      	ldrb	r1, [r0, #20]
 8010584:	4604      	mov	r4, r0
 8010586:	f7ff f895 	bl	800f6b4 <ucdr_serialize_endian_uint32_t>
 801058a:	b90d      	cbnz	r5, 8010590 <ucdr_serialize_sequence_double+0x14>
 801058c:	2001      	movs	r0, #1
 801058e:	bd70      	pop	{r4, r5, r6, pc}
 8010590:	7d21      	ldrb	r1, [r4, #20]
 8010592:	462b      	mov	r3, r5
 8010594:	4632      	mov	r2, r6
 8010596:	4620      	mov	r0, r4
 8010598:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801059c:	f007 b87c 	b.w	8017698 <ucdr_serialize_endian_array_double>

080105a0 <ucdr_deserialize_sequence_double>:
 80105a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80105a4:	461d      	mov	r5, r3
 80105a6:	4616      	mov	r6, r2
 80105a8:	460f      	mov	r7, r1
 80105aa:	461a      	mov	r2, r3
 80105ac:	7d01      	ldrb	r1, [r0, #20]
 80105ae:	4604      	mov	r4, r0
 80105b0:	f7ff f9a8 	bl	800f904 <ucdr_deserialize_endian_uint32_t>
 80105b4:	682b      	ldr	r3, [r5, #0]
 80105b6:	429e      	cmp	r6, r3
 80105b8:	bf3c      	itt	cc
 80105ba:	2201      	movcc	r2, #1
 80105bc:	75a2      	strbcc	r2, [r4, #22]
 80105be:	b913      	cbnz	r3, 80105c6 <ucdr_deserialize_sequence_double+0x26>
 80105c0:	2001      	movs	r0, #1
 80105c2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80105c6:	7d21      	ldrb	r1, [r4, #20]
 80105c8:	463a      	mov	r2, r7
 80105ca:	4620      	mov	r0, r4
 80105cc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80105d0:	f007 b8b8 	b.w	8017744 <ucdr_deserialize_endian_array_double>

080105d4 <uxr_buffer_delete_entity>:
 80105d4:	b530      	push	{r4, r5, lr}
 80105d6:	b08f      	sub	sp, #60	@ 0x3c
 80105d8:	2403      	movs	r4, #3
 80105da:	2500      	movs	r5, #0
 80105dc:	e9cd 4500 	strd	r4, r5, [sp]
 80105e0:	9202      	str	r2, [sp, #8]
 80105e2:	ab06      	add	r3, sp, #24
 80105e4:	2204      	movs	r2, #4
 80105e6:	9103      	str	r1, [sp, #12]
 80105e8:	4604      	mov	r4, r0
 80105ea:	f001 f95f 	bl	80118ac <uxr_prepare_stream_to_write_submessage>
 80105ee:	b918      	cbnz	r0, 80105f8 <uxr_buffer_delete_entity+0x24>
 80105f0:	4604      	mov	r4, r0
 80105f2:	4620      	mov	r0, r4
 80105f4:	b00f      	add	sp, #60	@ 0x3c
 80105f6:	bd30      	pop	{r4, r5, pc}
 80105f8:	9902      	ldr	r1, [sp, #8]
 80105fa:	aa05      	add	r2, sp, #20
 80105fc:	4620      	mov	r0, r4
 80105fe:	f001 fa8f 	bl	8011b20 <uxr_init_base_object_request>
 8010602:	a905      	add	r1, sp, #20
 8010604:	4604      	mov	r4, r0
 8010606:	a806      	add	r0, sp, #24
 8010608:	f002 fcca 	bl	8012fa0 <uxr_serialize_DELETE_Payload>
 801060c:	4620      	mov	r0, r4
 801060e:	b00f      	add	sp, #60	@ 0x3c
 8010610:	bd30      	pop	{r4, r5, pc}
 8010612:	bf00      	nop

08010614 <uxr_common_create_entity>:
 8010614:	b530      	push	{r4, r5, lr}
 8010616:	f3c2 4507 	ubfx	r5, r2, #16, #8
 801061a:	b08d      	sub	sp, #52	@ 0x34
 801061c:	e9cd 2102 	strd	r2, r1, [sp, #8]
 8010620:	2d01      	cmp	r5, #1
 8010622:	bf0c      	ite	eq
 8010624:	f003 0201 	andeq.w	r2, r3, #1
 8010628:	2200      	movne	r2, #0
 801062a:	330e      	adds	r3, #14
 801062c:	4604      	mov	r4, r0
 801062e:	441a      	add	r2, r3
 8010630:	f89d 0040 	ldrb.w	r0, [sp, #64]	@ 0x40
 8010634:	9001      	str	r0, [sp, #4]
 8010636:	2101      	movs	r1, #1
 8010638:	9100      	str	r1, [sp, #0]
 801063a:	b292      	uxth	r2, r2
 801063c:	9903      	ldr	r1, [sp, #12]
 801063e:	ab04      	add	r3, sp, #16
 8010640:	4620      	mov	r0, r4
 8010642:	f001 f933 	bl	80118ac <uxr_prepare_stream_to_write_submessage>
 8010646:	b918      	cbnz	r0, 8010650 <uxr_common_create_entity+0x3c>
 8010648:	4604      	mov	r4, r0
 801064a:	4620      	mov	r0, r4
 801064c:	b00d      	add	sp, #52	@ 0x34
 801064e:	bd30      	pop	{r4, r5, pc}
 8010650:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8010652:	9902      	ldr	r1, [sp, #8]
 8010654:	4620      	mov	r0, r4
 8010656:	f001 fa63 	bl	8011b20 <uxr_init_base_object_request>
 801065a:	9911      	ldr	r1, [sp, #68]	@ 0x44
 801065c:	4604      	mov	r4, r0
 801065e:	a804      	add	r0, sp, #16
 8010660:	f002 fbf2 	bl	8012e48 <uxr_serialize_CREATE_Payload>
 8010664:	4620      	mov	r0, r4
 8010666:	b00d      	add	sp, #52	@ 0x34
 8010668:	bd30      	pop	{r4, r5, pc}
 801066a:	bf00      	nop

0801066c <uxr_buffer_create_participant_bin>:
 801066c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801066e:	f5ad 7d17 	sub.w	sp, sp, #604	@ 0x25c
 8010672:	ac11      	add	r4, sp, #68	@ 0x44
 8010674:	9103      	str	r1, [sp, #12]
 8010676:	9e9c      	ldr	r6, [sp, #624]	@ 0x270
 8010678:	f8a4 3210 	strh.w	r3, [r4, #528]	@ 0x210
 801067c:	2103      	movs	r1, #3
 801067e:	7221      	strb	r1, [r4, #8]
 8010680:	2301      	movs	r3, #1
 8010682:	2100      	movs	r1, #0
 8010684:	7123      	strb	r3, [r4, #4]
 8010686:	f89d 7274 	ldrb.w	r7, [sp, #628]	@ 0x274
 801068a:	9202      	str	r2, [sp, #8]
 801068c:	4605      	mov	r5, r0
 801068e:	f88d 1014 	strb.w	r1, [sp, #20]
 8010692:	b1ce      	cbz	r6, 80106c8 <uxr_buffer_create_participant_bin+0x5c>
 8010694:	f88d 301c 	strb.w	r3, [sp, #28]
 8010698:	9608      	str	r6, [sp, #32]
 801069a:	a809      	add	r0, sp, #36	@ 0x24
 801069c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80106a0:	a915      	add	r1, sp, #84	@ 0x54
 80106a2:	f7ff fea3 	bl	80103ec <ucdr_init_buffer>
 80106a6:	a905      	add	r1, sp, #20
 80106a8:	a809      	add	r0, sp, #36	@ 0x24
 80106aa:	f001 ff95 	bl	80125d8 <uxr_serialize_OBJK_DomainParticipant_Binary>
 80106ae:	980d      	ldr	r0, [sp, #52]	@ 0x34
 80106b0:	9401      	str	r4, [sp, #4]
 80106b2:	b283      	uxth	r3, r0
 80106b4:	9700      	str	r7, [sp, #0]
 80106b6:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 80106ba:	60e0      	str	r0, [r4, #12]
 80106bc:	4628      	mov	r0, r5
 80106be:	f7ff ffa9 	bl	8010614 <uxr_common_create_entity>
 80106c2:	f50d 7d17 	add.w	sp, sp, #604	@ 0x25c
 80106c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80106c8:	f88d 601c 	strb.w	r6, [sp, #28]
 80106cc:	e7e5      	b.n	801069a <uxr_buffer_create_participant_bin+0x2e>
 80106ce:	bf00      	nop

080106d0 <uxr_buffer_create_topic_bin>:
 80106d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80106d2:	f5ad 7d19 	sub.w	sp, sp, #612	@ 0x264
 80106d6:	ac13      	add	r4, sp, #76	@ 0x4c
 80106d8:	4605      	mov	r5, r0
 80106da:	9105      	str	r1, [sp, #20]
 80106dc:	4618      	mov	r0, r3
 80106de:	a997      	add	r1, sp, #604	@ 0x25c
 80106e0:	2602      	movs	r6, #2
 80106e2:	e9cd 3203 	strd	r3, r2, [sp, #12]
 80106e6:	f89d 7280 	ldrb.w	r7, [sp, #640]	@ 0x280
 80106ea:	f88d 6050 	strb.w	r6, [sp, #80]	@ 0x50
 80106ee:	9e9f      	ldr	r6, [sp, #636]	@ 0x27c
 80106f0:	f000 f994 	bl	8010a1c <uxr_object_id_to_raw>
 80106f4:	9a9e      	ldr	r2, [sp, #632]	@ 0x278
 80106f6:	9206      	str	r2, [sp, #24]
 80106f8:	2303      	movs	r3, #3
 80106fa:	2101      	movs	r1, #1
 80106fc:	7223      	strb	r3, [r4, #8]
 80106fe:	a80b      	add	r0, sp, #44	@ 0x2c
 8010700:	2300      	movs	r3, #0
 8010702:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8010706:	f88d 1024 	strb.w	r1, [sp, #36]	@ 0x24
 801070a:	a917      	add	r1, sp, #92	@ 0x5c
 801070c:	f88d 301c 	strb.w	r3, [sp, #28]
 8010710:	960a      	str	r6, [sp, #40]	@ 0x28
 8010712:	f7ff fe6b 	bl	80103ec <ucdr_init_buffer>
 8010716:	a906      	add	r1, sp, #24
 8010718:	a80b      	add	r0, sp, #44	@ 0x2c
 801071a:	f001 ff7f 	bl	801261c <uxr_serialize_OBJK_Topic_Binary>
 801071e:	9e0f      	ldr	r6, [sp, #60]	@ 0x3c
 8010720:	9401      	str	r4, [sp, #4]
 8010722:	9700      	str	r7, [sp, #0]
 8010724:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 8010728:	4628      	mov	r0, r5
 801072a:	b2b3      	uxth	r3, r6
 801072c:	60e6      	str	r6, [r4, #12]
 801072e:	f7ff ff71 	bl	8010614 <uxr_common_create_entity>
 8010732:	f50d 7d19 	add.w	sp, sp, #612	@ 0x264
 8010736:	bdf0      	pop	{r4, r5, r6, r7, pc}

08010738 <uxr_buffer_create_publisher_bin>:
 8010738:	b5f0      	push	{r4, r5, r6, r7, lr}
 801073a:	f2ad 4d8c 	subw	sp, sp, #1164	@ 0x48c
 801073e:	ac0e      	add	r4, sp, #56	@ 0x38
 8010740:	4605      	mov	r5, r0
 8010742:	9105      	str	r1, [sp, #20]
 8010744:	4618      	mov	r0, r3
 8010746:	2603      	movs	r6, #3
 8010748:	a992      	add	r1, sp, #584	@ 0x248
 801074a:	e9cd 3203 	strd	r3, r2, [sp, #12]
 801074e:	f89d 74a0 	ldrb.w	r7, [sp, #1184]	@ 0x4a0
 8010752:	f88d 603c 	strb.w	r6, [sp, #60]	@ 0x3c
 8010756:	f000 f961 	bl	8010a1c <uxr_object_id_to_raw>
 801075a:	2300      	movs	r3, #0
 801075c:	a806      	add	r0, sp, #24
 801075e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8010762:	a912      	add	r1, sp, #72	@ 0x48
 8010764:	f88d 324c 	strb.w	r3, [sp, #588]	@ 0x24c
 8010768:	f88d 3254 	strb.w	r3, [sp, #596]	@ 0x254
 801076c:	7226      	strb	r6, [r4, #8]
 801076e:	f7ff fe3d 	bl	80103ec <ucdr_init_buffer>
 8010772:	a993      	add	r1, sp, #588	@ 0x24c
 8010774:	a806      	add	r0, sp, #24
 8010776:	f002 f805 	bl	8012784 <uxr_serialize_OBJK_Publisher_Binary>
 801077a:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 801077c:	9700      	str	r7, [sp, #0]
 801077e:	9401      	str	r4, [sp, #4]
 8010780:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 8010784:	4628      	mov	r0, r5
 8010786:	b2b3      	uxth	r3, r6
 8010788:	60e6      	str	r6, [r4, #12]
 801078a:	f7ff ff43 	bl	8010614 <uxr_common_create_entity>
 801078e:	f20d 4d8c 	addw	sp, sp, #1164	@ 0x48c
 8010792:	bdf0      	pop	{r4, r5, r6, r7, pc}

08010794 <uxr_buffer_create_subscriber_bin>:
 8010794:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010796:	f2ad 4d8c 	subw	sp, sp, #1164	@ 0x48c
 801079a:	ac0e      	add	r4, sp, #56	@ 0x38
 801079c:	4605      	mov	r5, r0
 801079e:	9105      	str	r1, [sp, #20]
 80107a0:	4618      	mov	r0, r3
 80107a2:	a992      	add	r1, sp, #584	@ 0x248
 80107a4:	2604      	movs	r6, #4
 80107a6:	e9cd 3203 	strd	r3, r2, [sp, #12]
 80107aa:	f89d 74a0 	ldrb.w	r7, [sp, #1184]	@ 0x4a0
 80107ae:	f88d 603c 	strb.w	r6, [sp, #60]	@ 0x3c
 80107b2:	f000 f933 	bl	8010a1c <uxr_object_id_to_raw>
 80107b6:	2103      	movs	r1, #3
 80107b8:	2300      	movs	r3, #0
 80107ba:	a806      	add	r0, sp, #24
 80107bc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80107c0:	7221      	strb	r1, [r4, #8]
 80107c2:	a912      	add	r1, sp, #72	@ 0x48
 80107c4:	f88d 324c 	strb.w	r3, [sp, #588]	@ 0x24c
 80107c8:	f88d 3254 	strb.w	r3, [sp, #596]	@ 0x254
 80107cc:	f7ff fe0e 	bl	80103ec <ucdr_init_buffer>
 80107d0:	a993      	add	r1, sp, #588	@ 0x24c
 80107d2:	a806      	add	r0, sp, #24
 80107d4:	f002 f886 	bl	80128e4 <uxr_serialize_OBJK_Subscriber_Binary>
 80107d8:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 80107da:	9700      	str	r7, [sp, #0]
 80107dc:	9401      	str	r4, [sp, #4]
 80107de:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 80107e2:	4628      	mov	r0, r5
 80107e4:	b2b3      	uxth	r3, r6
 80107e6:	60e6      	str	r6, [r4, #12]
 80107e8:	f7ff ff14 	bl	8010614 <uxr_common_create_entity>
 80107ec:	f20d 4d8c 	addw	sp, sp, #1164	@ 0x48c
 80107f0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80107f2:	bf00      	nop

080107f4 <uxr_buffer_create_datawriter_bin>:
 80107f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80107f8:	f5ad 7d22 	sub.w	sp, sp, #648	@ 0x288
 80107fc:	ac1d      	add	r4, sp, #116	@ 0x74
 80107fe:	2505      	movs	r5, #5
 8010800:	e9cd 3203 	strd	r3, r2, [sp, #12]
 8010804:	9105      	str	r1, [sp, #20]
 8010806:	4606      	mov	r6, r0
 8010808:	a9a1      	add	r1, sp, #644	@ 0x284
 801080a:	4618      	mov	r0, r3
 801080c:	7125      	strb	r5, [r4, #4]
 801080e:	f8bd 52a8 	ldrh.w	r5, [sp, #680]	@ 0x2a8
 8010812:	f89d 82ac 	ldrb.w	r8, [sp, #684]	@ 0x2ac
 8010816:	2703      	movs	r7, #3
 8010818:	f000 f900 	bl	8010a1c <uxr_object_id_to_raw>
 801081c:	a90e      	add	r1, sp, #56	@ 0x38
 801081e:	98a8      	ldr	r0, [sp, #672]	@ 0x2a0
 8010820:	7227      	strb	r7, [r4, #8]
 8010822:	f000 f8fb 	bl	8010a1c <uxr_object_id_to_raw>
 8010826:	f8ad 5044 	strh.w	r5, [sp, #68]	@ 0x44
 801082a:	f89d 12a5 	ldrb.w	r1, [sp, #677]	@ 0x2a5
 801082e:	3d00      	subs	r5, #0
 8010830:	f04f 0300 	mov.w	r3, #0
 8010834:	bf18      	it	ne
 8010836:	2501      	movne	r5, #1
 8010838:	2201      	movs	r2, #1
 801083a:	f88d 5042 	strb.w	r5, [sp, #66]	@ 0x42
 801083e:	f88d 203a 	strb.w	r2, [sp, #58]	@ 0x3a
 8010842:	f88d 3064 	strb.w	r3, [sp, #100]	@ 0x64
 8010846:	f88d 3046 	strb.w	r3, [sp, #70]	@ 0x46
 801084a:	f88d 304c 	strb.w	r3, [sp, #76]	@ 0x4c
 801084e:	f88d 3054 	strb.w	r3, [sp, #84]	@ 0x54
 8010852:	f8ad 3040 	strh.w	r3, [sp, #64]	@ 0x40
 8010856:	bb89      	cbnz	r1, 80108bc <uxr_buffer_create_datawriter_bin+0xc8>
 8010858:	f8ad 2040 	strh.w	r2, [sp, #64]	@ 0x40
 801085c:	f04f 0e23 	mov.w	lr, #35	@ 0x23
 8010860:	f04f 0c13 	mov.w	ip, #19
 8010864:	250b      	movs	r5, #11
 8010866:	2221      	movs	r2, #33	@ 0x21
 8010868:	2111      	movs	r1, #17
 801086a:	2009      	movs	r0, #9
 801086c:	f89d 32a6 	ldrb.w	r3, [sp, #678]	@ 0x2a6
 8010870:	b923      	cbnz	r3, 801087c <uxr_buffer_create_datawriter_bin+0x88>
 8010872:	f8ad 7040 	strh.w	r7, [sp, #64]	@ 0x40
 8010876:	4672      	mov	r2, lr
 8010878:	4661      	mov	r1, ip
 801087a:	4628      	mov	r0, r5
 801087c:	f89d 32a4 	ldrb.w	r3, [sp, #676]	@ 0x2a4
 8010880:	2b01      	cmp	r3, #1
 8010882:	d025      	beq.n	80108d0 <uxr_buffer_create_datawriter_bin+0xdc>
 8010884:	2b03      	cmp	r3, #3
 8010886:	d029      	beq.n	80108dc <uxr_buffer_create_datawriter_bin+0xe8>
 8010888:	b32b      	cbz	r3, 80108d6 <uxr_buffer_create_datawriter_bin+0xe2>
 801088a:	a806      	add	r0, sp, #24
 801088c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8010890:	a921      	add	r1, sp, #132	@ 0x84
 8010892:	f7ff fdab 	bl	80103ec <ucdr_init_buffer>
 8010896:	a90e      	add	r1, sp, #56	@ 0x38
 8010898:	a806      	add	r0, sp, #24
 801089a:	f002 f8d5 	bl	8012a48 <uxr_serialize_OBJK_DataWriter_Binary>
 801089e:	980a      	ldr	r0, [sp, #40]	@ 0x28
 80108a0:	9401      	str	r4, [sp, #4]
 80108a2:	b283      	uxth	r3, r0
 80108a4:	f8cd 8000 	str.w	r8, [sp]
 80108a8:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 80108ac:	60e0      	str	r0, [r4, #12]
 80108ae:	4630      	mov	r0, r6
 80108b0:	f7ff feb0 	bl	8010614 <uxr_common_create_entity>
 80108b4:	f50d 7d22 	add.w	sp, sp, #648	@ 0x288
 80108b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80108bc:	f04f 0e22 	mov.w	lr, #34	@ 0x22
 80108c0:	f04f 0c12 	mov.w	ip, #18
 80108c4:	250a      	movs	r5, #10
 80108c6:	2220      	movs	r2, #32
 80108c8:	2110      	movs	r1, #16
 80108ca:	2008      	movs	r0, #8
 80108cc:	2702      	movs	r7, #2
 80108ce:	e7cd      	b.n	801086c <uxr_buffer_create_datawriter_bin+0x78>
 80108d0:	f8ad 1040 	strh.w	r1, [sp, #64]	@ 0x40
 80108d4:	e7d9      	b.n	801088a <uxr_buffer_create_datawriter_bin+0x96>
 80108d6:	f8ad 0040 	strh.w	r0, [sp, #64]	@ 0x40
 80108da:	e7d6      	b.n	801088a <uxr_buffer_create_datawriter_bin+0x96>
 80108dc:	f8ad 2040 	strh.w	r2, [sp, #64]	@ 0x40
 80108e0:	e7d3      	b.n	801088a <uxr_buffer_create_datawriter_bin+0x96>
 80108e2:	bf00      	nop

080108e4 <uxr_buffer_create_datareader_bin>:
 80108e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80108e8:	f5ad 7d24 	sub.w	sp, sp, #656	@ 0x290
 80108ec:	ac1f      	add	r4, sp, #124	@ 0x7c
 80108ee:	2506      	movs	r5, #6
 80108f0:	e9cd 3203 	strd	r3, r2, [sp, #12]
 80108f4:	9105      	str	r1, [sp, #20]
 80108f6:	4606      	mov	r6, r0
 80108f8:	a9a3      	add	r1, sp, #652	@ 0x28c
 80108fa:	4618      	mov	r0, r3
 80108fc:	7125      	strb	r5, [r4, #4]
 80108fe:	f8bd 52b0 	ldrh.w	r5, [sp, #688]	@ 0x2b0
 8010902:	f89d 82b4 	ldrb.w	r8, [sp, #692]	@ 0x2b4
 8010906:	2703      	movs	r7, #3
 8010908:	f000 f888 	bl	8010a1c <uxr_object_id_to_raw>
 801090c:	a90e      	add	r1, sp, #56	@ 0x38
 801090e:	98aa      	ldr	r0, [sp, #680]	@ 0x2a8
 8010910:	7227      	strb	r7, [r4, #8]
 8010912:	f000 f883 	bl	8010a1c <uxr_object_id_to_raw>
 8010916:	f8ad 5044 	strh.w	r5, [sp, #68]	@ 0x44
 801091a:	f89d 12ad 	ldrb.w	r1, [sp, #685]	@ 0x2ad
 801091e:	3d00      	subs	r5, #0
 8010920:	f04f 0300 	mov.w	r3, #0
 8010924:	bf18      	it	ne
 8010926:	2501      	movne	r5, #1
 8010928:	2201      	movs	r2, #1
 801092a:	f88d 5042 	strb.w	r5, [sp, #66]	@ 0x42
 801092e:	f88d 203a 	strb.w	r2, [sp, #58]	@ 0x3a
 8010932:	f88d 3070 	strb.w	r3, [sp, #112]	@ 0x70
 8010936:	f88d 3064 	strb.w	r3, [sp, #100]	@ 0x64
 801093a:	f88d 3046 	strb.w	r3, [sp, #70]	@ 0x46
 801093e:	f88d 304c 	strb.w	r3, [sp, #76]	@ 0x4c
 8010942:	f88d 3054 	strb.w	r3, [sp, #84]	@ 0x54
 8010946:	f8ad 3040 	strh.w	r3, [sp, #64]	@ 0x40
 801094a:	bb89      	cbnz	r1, 80109b0 <uxr_buffer_create_datareader_bin+0xcc>
 801094c:	f8ad 2040 	strh.w	r2, [sp, #64]	@ 0x40
 8010950:	f04f 0e23 	mov.w	lr, #35	@ 0x23
 8010954:	f04f 0c13 	mov.w	ip, #19
 8010958:	250b      	movs	r5, #11
 801095a:	2221      	movs	r2, #33	@ 0x21
 801095c:	2111      	movs	r1, #17
 801095e:	2009      	movs	r0, #9
 8010960:	f89d 32ae 	ldrb.w	r3, [sp, #686]	@ 0x2ae
 8010964:	b923      	cbnz	r3, 8010970 <uxr_buffer_create_datareader_bin+0x8c>
 8010966:	f8ad 7040 	strh.w	r7, [sp, #64]	@ 0x40
 801096a:	4672      	mov	r2, lr
 801096c:	4661      	mov	r1, ip
 801096e:	4628      	mov	r0, r5
 8010970:	f89d 32ac 	ldrb.w	r3, [sp, #684]	@ 0x2ac
 8010974:	2b01      	cmp	r3, #1
 8010976:	d025      	beq.n	80109c4 <uxr_buffer_create_datareader_bin+0xe0>
 8010978:	2b03      	cmp	r3, #3
 801097a:	d029      	beq.n	80109d0 <uxr_buffer_create_datareader_bin+0xec>
 801097c:	b32b      	cbz	r3, 80109ca <uxr_buffer_create_datareader_bin+0xe6>
 801097e:	a806      	add	r0, sp, #24
 8010980:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8010984:	a923      	add	r1, sp, #140	@ 0x8c
 8010986:	f7ff fd31 	bl	80103ec <ucdr_init_buffer>
 801098a:	a90e      	add	r1, sp, #56	@ 0x38
 801098c:	a806      	add	r0, sp, #24
 801098e:	f002 f81f 	bl	80129d0 <uxr_serialize_OBJK_DataReader_Binary>
 8010992:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8010994:	9401      	str	r4, [sp, #4]
 8010996:	b283      	uxth	r3, r0
 8010998:	f8cd 8000 	str.w	r8, [sp]
 801099c:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 80109a0:	60e0      	str	r0, [r4, #12]
 80109a2:	4630      	mov	r0, r6
 80109a4:	f7ff fe36 	bl	8010614 <uxr_common_create_entity>
 80109a8:	f50d 7d24 	add.w	sp, sp, #656	@ 0x290
 80109ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80109b0:	f04f 0e22 	mov.w	lr, #34	@ 0x22
 80109b4:	f04f 0c12 	mov.w	ip, #18
 80109b8:	250a      	movs	r5, #10
 80109ba:	2220      	movs	r2, #32
 80109bc:	2110      	movs	r1, #16
 80109be:	2008      	movs	r0, #8
 80109c0:	2702      	movs	r7, #2
 80109c2:	e7cd      	b.n	8010960 <uxr_buffer_create_datareader_bin+0x7c>
 80109c4:	f8ad 1040 	strh.w	r1, [sp, #64]	@ 0x40
 80109c8:	e7d9      	b.n	801097e <uxr_buffer_create_datareader_bin+0x9a>
 80109ca:	f8ad 0040 	strh.w	r0, [sp, #64]	@ 0x40
 80109ce:	e7d6      	b.n	801097e <uxr_buffer_create_datareader_bin+0x9a>
 80109d0:	f8ad 2040 	strh.w	r2, [sp, #64]	@ 0x40
 80109d4:	e7d3      	b.n	801097e <uxr_buffer_create_datareader_bin+0x9a>
 80109d6:	bf00      	nop

080109d8 <uxr_object_id>:
 80109d8:	b082      	sub	sp, #8
 80109da:	2300      	movs	r3, #0
 80109dc:	f88d 1006 	strb.w	r1, [sp, #6]
 80109e0:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 80109e4:	f360 030f 	bfi	r3, r0, #0, #16
 80109e8:	f362 431f 	bfi	r3, r2, #16, #16
 80109ec:	4618      	mov	r0, r3
 80109ee:	b002      	add	sp, #8
 80109f0:	4770      	bx	lr
 80109f2:	bf00      	nop

080109f4 <uxr_object_id_from_raw>:
 80109f4:	7843      	ldrb	r3, [r0, #1]
 80109f6:	7801      	ldrb	r1, [r0, #0]
 80109f8:	b082      	sub	sp, #8
 80109fa:	f003 000f 	and.w	r0, r3, #15
 80109fe:	f88d 0006 	strb.w	r0, [sp, #6]
 8010a02:	091b      	lsrs	r3, r3, #4
 8010a04:	eb03 1301 	add.w	r3, r3, r1, lsl #4
 8010a08:	2200      	movs	r2, #0
 8010a0a:	f8bd 1006 	ldrh.w	r1, [sp, #6]
 8010a0e:	f363 020f 	bfi	r2, r3, #0, #16
 8010a12:	f361 421f 	bfi	r2, r1, #16, #16
 8010a16:	4610      	mov	r0, r2
 8010a18:	b002      	add	sp, #8
 8010a1a:	4770      	bx	lr

08010a1c <uxr_object_id_to_raw>:
 8010a1c:	4602      	mov	r2, r0
 8010a1e:	f3c0 4303 	ubfx	r3, r0, #16, #4
 8010a22:	b082      	sub	sp, #8
 8010a24:	eb03 1302 	add.w	r3, r3, r2, lsl #4
 8010a28:	f3c2 120b 	ubfx	r2, r2, #4, #12
 8010a2c:	700a      	strb	r2, [r1, #0]
 8010a2e:	704b      	strb	r3, [r1, #1]
 8010a30:	b002      	add	sp, #8
 8010a32:	4770      	bx	lr

08010a34 <on_get_fragmentation_info>:
 8010a34:	b500      	push	{lr}
 8010a36:	b08b      	sub	sp, #44	@ 0x2c
 8010a38:	4601      	mov	r1, r0
 8010a3a:	2204      	movs	r2, #4
 8010a3c:	a802      	add	r0, sp, #8
 8010a3e:	f7ff fcd5 	bl	80103ec <ucdr_init_buffer>
 8010a42:	f10d 0305 	add.w	r3, sp, #5
 8010a46:	a802      	add	r0, sp, #8
 8010a48:	f10d 0206 	add.w	r2, sp, #6
 8010a4c:	a901      	add	r1, sp, #4
 8010a4e:	f001 f9eb 	bl	8011e28 <uxr_read_submessage_header>
 8010a52:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8010a56:	2b0d      	cmp	r3, #13
 8010a58:	d003      	beq.n	8010a62 <on_get_fragmentation_info+0x2e>
 8010a5a:	2000      	movs	r0, #0
 8010a5c:	b00b      	add	sp, #44	@ 0x2c
 8010a5e:	f85d fb04 	ldr.w	pc, [sp], #4
 8010a62:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8010a66:	f013 0f02 	tst.w	r3, #2
 8010a6a:	bf14      	ite	ne
 8010a6c:	2002      	movne	r0, #2
 8010a6e:	2001      	moveq	r0, #1
 8010a70:	b00b      	add	sp, #44	@ 0x2c
 8010a72:	f85d fb04 	ldr.w	pc, [sp], #4
 8010a76:	bf00      	nop

08010a78 <read_submessage_get_info>:
 8010a78:	b570      	push	{r4, r5, r6, lr}
 8010a7a:	2500      	movs	r5, #0
 8010a7c:	f5ad 7d34 	sub.w	sp, sp, #720	@ 0x2d0
 8010a80:	4604      	mov	r4, r0
 8010a82:	f44f 7224 	mov.w	r2, #656	@ 0x290
 8010a86:	460e      	mov	r6, r1
 8010a88:	a810      	add	r0, sp, #64	@ 0x40
 8010a8a:	4629      	mov	r1, r5
 8010a8c:	e9cd 5503 	strd	r5, r5, [sp, #12]
 8010a90:	f009 f8b8 	bl	8019c04 <memset>
 8010a94:	a903      	add	r1, sp, #12
 8010a96:	4630      	mov	r0, r6
 8010a98:	f002 fa6e 	bl	8012f78 <uxr_deserialize_GET_INFO_Payload>
 8010a9c:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 8010aa0:	f8ad 3040 	strh.w	r3, [sp, #64]	@ 0x40
 8010aa4:	4620      	mov	r0, r4
 8010aa6:	f001 f833 	bl	8011b10 <uxr_session_header_offset>
 8010aaa:	462b      	mov	r3, r5
 8010aac:	9000      	str	r0, [sp, #0]
 8010aae:	a905      	add	r1, sp, #20
 8010ab0:	a808      	add	r0, sp, #32
 8010ab2:	220c      	movs	r2, #12
 8010ab4:	f7ff fc88 	bl	80103c8 <ucdr_init_buffer_origin_offset>
 8010ab8:	a910      	add	r1, sp, #64	@ 0x40
 8010aba:	a808      	add	r0, sp, #32
 8010abc:	f002 face 	bl	801305c <uxr_serialize_INFO_Payload>
 8010ac0:	9b08      	ldr	r3, [sp, #32]
 8010ac2:	462a      	mov	r2, r5
 8010ac4:	4629      	mov	r1, r5
 8010ac6:	4620      	mov	r0, r4
 8010ac8:	f000 ffca 	bl	8011a60 <uxr_stamp_session_header>
 8010acc:	a808      	add	r0, sp, #32
 8010ace:	f7ff fcb9 	bl	8010444 <ucdr_buffer_length>
 8010ad2:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 8010ad4:	4602      	mov	r2, r0
 8010ad6:	a905      	add	r1, sp, #20
 8010ad8:	e9d3 0400 	ldrd	r0, r4, [r3]
 8010adc:	47a0      	blx	r4
 8010ade:	f50d 7d34 	add.w	sp, sp, #720	@ 0x2d0
 8010ae2:	bd70      	pop	{r4, r5, r6, pc}

08010ae4 <write_submessage_acknack.isra.0>:
 8010ae4:	b570      	push	{r4, r5, r6, lr}
 8010ae6:	b092      	sub	sp, #72	@ 0x48
 8010ae8:	4605      	mov	r5, r0
 8010aea:	460e      	mov	r6, r1
 8010aec:	4614      	mov	r4, r2
 8010aee:	f001 f80f 	bl	8011b10 <uxr_session_header_offset>
 8010af2:	a905      	add	r1, sp, #20
 8010af4:	9000      	str	r0, [sp, #0]
 8010af6:	2300      	movs	r3, #0
 8010af8:	a80a      	add	r0, sp, #40	@ 0x28
 8010afa:	2211      	movs	r2, #17
 8010afc:	f7ff fc64 	bl	80103c8 <ucdr_init_buffer_origin_offset>
 8010b00:	2218      	movs	r2, #24
 8010b02:	fb02 5404 	mla	r4, r2, r4, r5
 8010b06:	2300      	movs	r3, #0
 8010b08:	2205      	movs	r2, #5
 8010b0a:	3450      	adds	r4, #80	@ 0x50
 8010b0c:	a80a      	add	r0, sp, #40	@ 0x28
 8010b0e:	210a      	movs	r1, #10
 8010b10:	f001 f970 	bl	8011df4 <uxr_buffer_submessage_header>
 8010b14:	a903      	add	r1, sp, #12
 8010b16:	4620      	mov	r0, r4
 8010b18:	f007 f8d8 	bl	8017ccc <uxr_compute_acknack>
 8010b1c:	a903      	add	r1, sp, #12
 8010b1e:	ba43      	rev16	r3, r0
 8010b20:	a80a      	add	r0, sp, #40	@ 0x28
 8010b22:	f8ad 300e 	strh.w	r3, [sp, #14]
 8010b26:	f88d 6010 	strb.w	r6, [sp, #16]
 8010b2a:	f002 fb07 	bl	801313c <uxr_serialize_ACKNACK_Payload>
 8010b2e:	2200      	movs	r2, #0
 8010b30:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8010b32:	4611      	mov	r1, r2
 8010b34:	4628      	mov	r0, r5
 8010b36:	f000 ff93 	bl	8011a60 <uxr_stamp_session_header>
 8010b3a:	a80a      	add	r0, sp, #40	@ 0x28
 8010b3c:	f7ff fc82 	bl	8010444 <ucdr_buffer_length>
 8010b40:	6f2b      	ldr	r3, [r5, #112]	@ 0x70
 8010b42:	4602      	mov	r2, r0
 8010b44:	a905      	add	r1, sp, #20
 8010b46:	e9d3 0400 	ldrd	r0, r4, [r3]
 8010b4a:	47a0      	blx	r4
 8010b4c:	b012      	add	sp, #72	@ 0x48
 8010b4e:	bd70      	pop	{r4, r5, r6, pc}

08010b50 <uxr_init_session>:
 8010b50:	b5d0      	push	{r4, r6, r7, lr}
 8010b52:	2300      	movs	r3, #0
 8010b54:	2600      	movs	r6, #0
 8010b56:	2700      	movs	r7, #0
 8010b58:	e9c0 6726 	strd	r6, r7, [r0, #152]	@ 0x98
 8010b5c:	4604      	mov	r4, r0
 8010b5e:	6701      	str	r1, [r0, #112]	@ 0x70
 8010b60:	e9c0 331d 	strd	r3, r3, [r0, #116]	@ 0x74
 8010b64:	e9c0 331f 	strd	r3, r3, [r0, #124]	@ 0x7c
 8010b68:	e9c0 3321 	strd	r3, r3, [r0, #132]	@ 0x84
 8010b6c:	e9c0 3323 	strd	r3, r3, [r0, #140]	@ 0x8c
 8010b70:	f8c0 3094 	str.w	r3, [r0, #148]	@ 0x94
 8010b74:	f880 30a0 	strb.w	r3, [r0, #160]	@ 0xa0
 8010b78:	2181      	movs	r1, #129	@ 0x81
 8010b7a:	f000 fedb 	bl	8011934 <uxr_init_session_info>
 8010b7e:	f104 0008 	add.w	r0, r4, #8
 8010b82:	e8bd 40d0 	ldmia.w	sp!, {r4, r6, r7, lr}
 8010b86:	f001 b851 	b.w	8011c2c <uxr_init_stream_storage>
 8010b8a:	bf00      	nop

08010b8c <uxr_set_status_callback>:
 8010b8c:	e9c0 1220 	strd	r1, r2, [r0, #128]	@ 0x80
 8010b90:	4770      	bx	lr
 8010b92:	bf00      	nop

08010b94 <uxr_set_topic_callback>:
 8010b94:	e9c0 1222 	strd	r1, r2, [r0, #136]	@ 0x88
 8010b98:	4770      	bx	lr
 8010b9a:	bf00      	nop

08010b9c <uxr_set_request_callback>:
 8010b9c:	e9c0 1229 	strd	r1, r2, [r0, #164]	@ 0xa4
 8010ba0:	4770      	bx	lr
 8010ba2:	bf00      	nop

08010ba4 <uxr_set_reply_callback>:
 8010ba4:	e9c0 122b 	strd	r1, r2, [r0, #172]	@ 0xac
 8010ba8:	4770      	bx	lr
 8010baa:	bf00      	nop

08010bac <uxr_create_output_best_effort_stream>:
 8010bac:	b510      	push	{r4, lr}
 8010bae:	b084      	sub	sp, #16
 8010bb0:	e9cd 2100 	strd	r2, r1, [sp]
 8010bb4:	4604      	mov	r4, r0
 8010bb6:	f000 ffab 	bl	8011b10 <uxr_session_header_offset>
 8010bba:	e9dd 2100 	ldrd	r2, r1, [sp]
 8010bbe:	4603      	mov	r3, r0
 8010bc0:	f104 0008 	add.w	r0, r4, #8
 8010bc4:	b004      	add	sp, #16
 8010bc6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010bca:	f001 b879 	b.w	8011cc0 <uxr_add_output_best_effort_buffer>
 8010bce:	bf00      	nop

08010bd0 <uxr_create_output_reliable_stream>:
 8010bd0:	b530      	push	{r4, r5, lr}
 8010bd2:	b089      	sub	sp, #36	@ 0x24
 8010bd4:	e9cd 2104 	strd	r2, r1, [sp, #16]
 8010bd8:	9303      	str	r3, [sp, #12]
 8010bda:	4604      	mov	r4, r0
 8010bdc:	f000 ff98 	bl	8011b10 <uxr_session_header_offset>
 8010be0:	4605      	mov	r5, r0
 8010be2:	e9dd 3203 	ldrd	r3, r2, [sp, #12]
 8010be6:	9905      	ldr	r1, [sp, #20]
 8010be8:	9500      	str	r5, [sp, #0]
 8010bea:	f104 0008 	add.w	r0, r4, #8
 8010bee:	f001 f879 	bl	8011ce4 <uxr_add_output_reliable_buffer>
 8010bf2:	2200      	movs	r2, #0
 8010bf4:	b2c3      	uxtb	r3, r0
 8010bf6:	f363 0207 	bfi	r2, r3, #0, #8
 8010bfa:	f3c0 2307 	ubfx	r3, r0, #8, #8
 8010bfe:	f363 220f 	bfi	r2, r3, #8, #8
 8010c02:	f3c0 4307 	ubfx	r3, r0, #16, #8
 8010c06:	f363 4217 	bfi	r2, r3, #16, #8
 8010c0a:	0e03      	lsrs	r3, r0, #24
 8010c0c:	f363 621f 	bfi	r2, r3, #24, #8
 8010c10:	4610      	mov	r0, r2
 8010c12:	b009      	add	sp, #36	@ 0x24
 8010c14:	bd30      	pop	{r4, r5, pc}
 8010c16:	bf00      	nop

08010c18 <uxr_create_input_best_effort_stream>:
 8010c18:	b082      	sub	sp, #8
 8010c1a:	3008      	adds	r0, #8
 8010c1c:	b002      	add	sp, #8
 8010c1e:	f001 b87b 	b.w	8011d18 <uxr_add_input_best_effort_buffer>
 8010c22:	bf00      	nop

08010c24 <uxr_create_input_reliable_stream>:
 8010c24:	b510      	push	{r4, lr}
 8010c26:	b084      	sub	sp, #16
 8010c28:	4c0b      	ldr	r4, [pc, #44]	@ (8010c58 <uxr_create_input_reliable_stream+0x34>)
 8010c2a:	9400      	str	r4, [sp, #0]
 8010c2c:	3008      	adds	r0, #8
 8010c2e:	f001 f889 	bl	8011d44 <uxr_add_input_reliable_buffer>
 8010c32:	2200      	movs	r2, #0
 8010c34:	b2c3      	uxtb	r3, r0
 8010c36:	f363 0207 	bfi	r2, r3, #0, #8
 8010c3a:	f3c0 2307 	ubfx	r3, r0, #8, #8
 8010c3e:	f363 220f 	bfi	r2, r3, #8, #8
 8010c42:	f3c0 4307 	ubfx	r3, r0, #16, #8
 8010c46:	f363 4217 	bfi	r2, r3, #16, #8
 8010c4a:	0e03      	lsrs	r3, r0, #24
 8010c4c:	f363 621f 	bfi	r2, r3, #24, #8
 8010c50:	4610      	mov	r0, r2
 8010c52:	b004      	add	sp, #16
 8010c54:	bd10      	pop	{r4, pc}
 8010c56:	bf00      	nop
 8010c58:	08010a35 	.word	0x08010a35

08010c5c <uxr_epoch_nanos>:
 8010c5c:	b510      	push	{r4, lr}
 8010c5e:	4604      	mov	r4, r0
 8010c60:	f001 f92a 	bl	8011eb8 <uxr_nanos>
 8010c64:	e9d4 3226 	ldrd	r3, r2, [r4, #152]	@ 0x98
 8010c68:	1ac0      	subs	r0, r0, r3
 8010c6a:	eb61 0102 	sbc.w	r1, r1, r2
 8010c6e:	bd10      	pop	{r4, pc}

08010c70 <uxr_flash_output_streams>:
 8010c70:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010c74:	7e03      	ldrb	r3, [r0, #24]
 8010c76:	b084      	sub	sp, #16
 8010c78:	4604      	mov	r4, r0
 8010c7a:	b1fb      	cbz	r3, 8010cbc <uxr_flash_output_streams+0x4c>
 8010c7c:	f04f 0900 	mov.w	r9, #0
 8010c80:	4648      	mov	r0, r9
 8010c82:	f10d 0802 	add.w	r8, sp, #2
 8010c86:	af03      	add	r7, sp, #12
 8010c88:	ae02      	add	r6, sp, #8
 8010c8a:	2201      	movs	r2, #1
 8010c8c:	4611      	mov	r1, r2
 8010c8e:	eb04 1500 	add.w	r5, r4, r0, lsl #4
 8010c92:	f000 ff75 	bl	8011b80 <uxr_stream_id>
 8010c96:	3508      	adds	r5, #8
 8010c98:	4684      	mov	ip, r0
 8010c9a:	4643      	mov	r3, r8
 8010c9c:	4628      	mov	r0, r5
 8010c9e:	463a      	mov	r2, r7
 8010ca0:	4631      	mov	r1, r6
 8010ca2:	f8cd c004 	str.w	ip, [sp, #4]
 8010ca6:	f007 f899 	bl	8017ddc <uxr_prepare_best_effort_buffer_to_send>
 8010caa:	2800      	cmp	r0, #0
 8010cac:	d13d      	bne.n	8010d2a <uxr_flash_output_streams+0xba>
 8010cae:	7e23      	ldrb	r3, [r4, #24]
 8010cb0:	f109 0901 	add.w	r9, r9, #1
 8010cb4:	fa5f f089 	uxtb.w	r0, r9
 8010cb8:	4283      	cmp	r3, r0
 8010cba:	d8e6      	bhi.n	8010c8a <uxr_flash_output_streams+0x1a>
 8010cbc:	f894 3048 	ldrb.w	r3, [r4, #72]	@ 0x48
 8010cc0:	b383      	cbz	r3, 8010d24 <uxr_flash_output_streams+0xb4>
 8010cc2:	f04f 0900 	mov.w	r9, #0
 8010cc6:	4648      	mov	r0, r9
 8010cc8:	f10d 0802 	add.w	r8, sp, #2
 8010ccc:	af03      	add	r7, sp, #12
 8010cce:	ae02      	add	r6, sp, #8
 8010cd0:	2201      	movs	r2, #1
 8010cd2:	2102      	movs	r1, #2
 8010cd4:	eb00 0580 	add.w	r5, r0, r0, lsl #2
 8010cd8:	f000 ff52 	bl	8011b80 <uxr_stream_id>
 8010cdc:	eb04 05c5 	add.w	r5, r4, r5, lsl #3
 8010ce0:	3520      	adds	r5, #32
 8010ce2:	9001      	str	r0, [sp, #4]
 8010ce4:	e00c      	b.n	8010d00 <uxr_flash_output_streams+0x90>
 8010ce6:	9b02      	ldr	r3, [sp, #8]
 8010ce8:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 8010cec:	f89d 1004 	ldrb.w	r1, [sp, #4]
 8010cf0:	f000 feb6 	bl	8011a60 <uxr_stamp_session_header>
 8010cf4:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 8010cf6:	9a03      	ldr	r2, [sp, #12]
 8010cf8:	9902      	ldr	r1, [sp, #8]
 8010cfa:	e9d3 0a00 	ldrd	r0, sl, [r3]
 8010cfe:	47d0      	blx	sl
 8010d00:	4643      	mov	r3, r8
 8010d02:	463a      	mov	r2, r7
 8010d04:	4631      	mov	r1, r6
 8010d06:	4628      	mov	r0, r5
 8010d08:	f007 fa7c 	bl	8018204 <uxr_prepare_next_reliable_buffer_to_send>
 8010d0c:	4603      	mov	r3, r0
 8010d0e:	4620      	mov	r0, r4
 8010d10:	2b00      	cmp	r3, #0
 8010d12:	d1e8      	bne.n	8010ce6 <uxr_flash_output_streams+0x76>
 8010d14:	f894 3048 	ldrb.w	r3, [r4, #72]	@ 0x48
 8010d18:	f109 0901 	add.w	r9, r9, #1
 8010d1c:	fa5f f089 	uxtb.w	r0, r9
 8010d20:	4283      	cmp	r3, r0
 8010d22:	d8d5      	bhi.n	8010cd0 <uxr_flash_output_streams+0x60>
 8010d24:	b004      	add	sp, #16
 8010d26:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010d2a:	9b02      	ldr	r3, [sp, #8]
 8010d2c:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 8010d30:	f89d 1004 	ldrb.w	r1, [sp, #4]
 8010d34:	4620      	mov	r0, r4
 8010d36:	f000 fe93 	bl	8011a60 <uxr_stamp_session_header>
 8010d3a:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 8010d3c:	9a03      	ldr	r2, [sp, #12]
 8010d3e:	9902      	ldr	r1, [sp, #8]
 8010d40:	e9d3 0500 	ldrd	r0, r5, [r3]
 8010d44:	47a8      	blx	r5
 8010d46:	f109 0901 	add.w	r9, r9, #1
 8010d4a:	7e23      	ldrb	r3, [r4, #24]
 8010d4c:	fa5f f089 	uxtb.w	r0, r9
 8010d50:	4283      	cmp	r3, r0
 8010d52:	d89a      	bhi.n	8010c8a <uxr_flash_output_streams+0x1a>
 8010d54:	e7b2      	b.n	8010cbc <uxr_flash_output_streams+0x4c>
 8010d56:	bf00      	nop

08010d58 <read_submessage_info>:
 8010d58:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010d5c:	460d      	mov	r5, r1
 8010d5e:	f5ad 7d24 	sub.w	sp, sp, #656	@ 0x290
 8010d62:	4669      	mov	r1, sp
 8010d64:	4607      	mov	r7, r0
 8010d66:	4628      	mov	r0, r5
 8010d68:	f002 f80c 	bl	8012d84 <uxr_deserialize_BaseObjectReply>
 8010d6c:	a902      	add	r1, sp, #8
 8010d6e:	4604      	mov	r4, r0
 8010d70:	4628      	mov	r0, r5
 8010d72:	f89d 8005 	ldrb.w	r8, [sp, #5]
 8010d76:	f7fe f9d5 	bl	800f124 <ucdr_deserialize_bool>
 8010d7a:	f89d 3008 	ldrb.w	r3, [sp, #8]
 8010d7e:	4004      	ands	r4, r0
 8010d80:	b2e4      	uxtb	r4, r4
 8010d82:	b95b      	cbnz	r3, 8010d9c <read_submessage_info+0x44>
 8010d84:	a987      	add	r1, sp, #540	@ 0x21c
 8010d86:	4628      	mov	r0, r5
 8010d88:	f7fe f9cc 	bl	800f124 <ucdr_deserialize_bool>
 8010d8c:	f89d 321c 	ldrb.w	r3, [sp, #540]	@ 0x21c
 8010d90:	4606      	mov	r6, r0
 8010d92:	b94b      	cbnz	r3, 8010da8 <read_submessage_info+0x50>
 8010d94:	f50d 7d24 	add.w	sp, sp, #656	@ 0x290
 8010d98:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010d9c:	a903      	add	r1, sp, #12
 8010d9e:	4628      	mov	r0, r5
 8010da0:	f001 fe7e 	bl	8012aa0 <uxr_deserialize_ObjectVariant>
 8010da4:	4004      	ands	r4, r0
 8010da6:	e7ed      	b.n	8010d84 <read_submessage_info+0x2c>
 8010da8:	a988      	add	r1, sp, #544	@ 0x220
 8010daa:	4628      	mov	r0, r5
 8010dac:	f7fe f9ea 	bl	800f184 <ucdr_deserialize_uint8_t>
 8010db0:	4234      	tst	r4, r6
 8010db2:	d0ef      	beq.n	8010d94 <read_submessage_info+0x3c>
 8010db4:	2800      	cmp	r0, #0
 8010db6:	d0ed      	beq.n	8010d94 <read_submessage_info+0x3c>
 8010db8:	f89d 3220 	ldrb.w	r3, [sp, #544]	@ 0x220
 8010dbc:	2b0d      	cmp	r3, #13
 8010dbe:	d1e9      	bne.n	8010d94 <read_submessage_info+0x3c>
 8010dc0:	4628      	mov	r0, r5
 8010dc2:	a98a      	add	r1, sp, #552	@ 0x228
 8010dc4:	f7fe ff84 	bl	800fcd0 <ucdr_deserialize_int16_t>
 8010dc8:	b140      	cbz	r0, 8010ddc <read_submessage_info+0x84>
 8010dca:	f9bd 3228 	ldrsh.w	r3, [sp, #552]	@ 0x228
 8010dce:	2b00      	cmp	r3, #0
 8010dd0:	dd07      	ble.n	8010de2 <read_submessage_info+0x8a>
 8010dd2:	f1b8 0f00 	cmp.w	r8, #0
 8010dd6:	bf14      	ite	ne
 8010dd8:	2001      	movne	r0, #1
 8010dda:	2002      	moveq	r0, #2
 8010ddc:	f887 00b5 	strb.w	r0, [r7, #181]	@ 0xb5
 8010de0:	e7d8      	b.n	8010d94 <read_submessage_info+0x3c>
 8010de2:	2000      	movs	r0, #0
 8010de4:	e7fa      	b.n	8010ddc <read_submessage_info+0x84>
 8010de6:	bf00      	nop

08010de8 <read_submessage_list>:
 8010de8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010dec:	b098      	sub	sp, #96	@ 0x60
 8010dee:	f8df 9304 	ldr.w	r9, [pc, #772]	@ 80110f4 <read_submessage_list+0x30c>
 8010df2:	920b      	str	r2, [sp, #44]	@ 0x2c
 8010df4:	4604      	mov	r4, r0
 8010df6:	4688      	mov	r8, r1
 8010df8:	f10d 0337 	add.w	r3, sp, #55	@ 0x37
 8010dfc:	aa0e      	add	r2, sp, #56	@ 0x38
 8010dfe:	f10d 0136 	add.w	r1, sp, #54	@ 0x36
 8010e02:	4640      	mov	r0, r8
 8010e04:	f001 f810 	bl	8011e28 <uxr_read_submessage_header>
 8010e08:	2800      	cmp	r0, #0
 8010e0a:	f000 813d 	beq.w	8011088 <read_submessage_list+0x2a0>
 8010e0e:	f89d 3036 	ldrb.w	r3, [sp, #54]	@ 0x36
 8010e12:	f89d 202e 	ldrb.w	r2, [sp, #46]	@ 0x2e
 8010e16:	3b02      	subs	r3, #2
 8010e18:	2b0d      	cmp	r3, #13
 8010e1a:	d8ed      	bhi.n	8010df8 <read_submessage_list+0x10>
 8010e1c:	a101      	add	r1, pc, #4	@ (adr r1, 8010e24 <read_submessage_list+0x3c>)
 8010e1e:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8010e22:	bf00      	nop
 8010e24:	0801107f 	.word	0x0801107f
 8010e28:	08010df9 	.word	0x08010df9
 8010e2c:	0801106f 	.word	0x0801106f
 8010e30:	08011013 	.word	0x08011013
 8010e34:	08011009 	.word	0x08011009
 8010e38:	08010df9 	.word	0x08010df9
 8010e3c:	08010df9 	.word	0x08010df9
 8010e40:	08010f6b 	.word	0x08010f6b
 8010e44:	08010efd 	.word	0x08010efd
 8010e48:	08010ebb 	.word	0x08010ebb
 8010e4c:	08010df9 	.word	0x08010df9
 8010e50:	08010df9 	.word	0x08010df9
 8010e54:	08010df9 	.word	0x08010df9
 8010e58:	08010e5d 	.word	0x08010e5d
 8010e5c:	a912      	add	r1, sp, #72	@ 0x48
 8010e5e:	4640      	mov	r0, r8
 8010e60:	f002 f9bc 	bl	80131dc <uxr_deserialize_TIMESTAMP_REPLY_Payload>
 8010e64:	f8d4 5090 	ldr.w	r5, [r4, #144]	@ 0x90
 8010e68:	2d00      	cmp	r5, #0
 8010e6a:	f000 8115 	beq.w	8011098 <read_submessage_list+0x2b0>
 8010e6e:	f001 f823 	bl	8011eb8 <uxr_nanos>
 8010e72:	9e17      	ldr	r6, [sp, #92]	@ 0x5c
 8010e74:	460b      	mov	r3, r1
 8010e76:	9916      	ldr	r1, [sp, #88]	@ 0x58
 8010e78:	2700      	movs	r7, #0
 8010e7a:	fbc9 6701 	smlal	r6, r7, r9, r1
 8010e7e:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8010e82:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 8010e84:	4602      	mov	r2, r0
 8010e86:	9812      	ldr	r0, [sp, #72]	@ 0x48
 8010e88:	460e      	mov	r6, r1
 8010e8a:	2700      	movs	r7, #0
 8010e8c:	f8d4 1094 	ldr.w	r1, [r4, #148]	@ 0x94
 8010e90:	9106      	str	r1, [sp, #24]
 8010e92:	fbc9 6700 	smlal	r6, r7, r9, r0
 8010e96:	9915      	ldr	r1, [sp, #84]	@ 0x54
 8010e98:	e9cd 6702 	strd	r6, r7, [sp, #8]
 8010e9c:	9e14      	ldr	r6, [sp, #80]	@ 0x50
 8010e9e:	2700      	movs	r7, #0
 8010ea0:	4608      	mov	r0, r1
 8010ea2:	4639      	mov	r1, r7
 8010ea4:	fbc9 0106 	smlal	r0, r1, r9, r6
 8010ea8:	e9cd 0100 	strd	r0, r1, [sp]
 8010eac:	4620      	mov	r0, r4
 8010eae:	47a8      	blx	r5
 8010eb0:	f04f 0301 	mov.w	r3, #1
 8010eb4:	f884 30a0 	strb.w	r3, [r4, #160]	@ 0xa0
 8010eb8:	e79e      	b.n	8010df8 <read_submessage_list+0x10>
 8010eba:	a912      	add	r1, sp, #72	@ 0x48
 8010ebc:	4640      	mov	r0, r8
 8010ebe:	f002 f97b 	bl	80131b8 <uxr_deserialize_HEARTBEAT_Payload>
 8010ec2:	2100      	movs	r1, #0
 8010ec4:	f89d 004c 	ldrb.w	r0, [sp, #76]	@ 0x4c
 8010ec8:	f000 fe84 	bl	8011bd4 <uxr_stream_id_from_raw>
 8010ecc:	f3c0 2507 	ubfx	r5, r0, #8, #8
 8010ed0:	4603      	mov	r3, r0
 8010ed2:	4629      	mov	r1, r5
 8010ed4:	f104 0008 	add.w	r0, r4, #8
 8010ed8:	9311      	str	r3, [sp, #68]	@ 0x44
 8010eda:	f000 ff69 	bl	8011db0 <uxr_get_input_reliable_stream>
 8010ede:	2800      	cmp	r0, #0
 8010ee0:	d08a      	beq.n	8010df8 <read_submessage_list+0x10>
 8010ee2:	f8bd 204a 	ldrh.w	r2, [sp, #74]	@ 0x4a
 8010ee6:	f8bd 1048 	ldrh.w	r1, [sp, #72]	@ 0x48
 8010eea:	f006 fee3 	bl	8017cb4 <uxr_process_heartbeat>
 8010eee:	f89d 1044 	ldrb.w	r1, [sp, #68]	@ 0x44
 8010ef2:	462a      	mov	r2, r5
 8010ef4:	4620      	mov	r0, r4
 8010ef6:	f7ff fdf5 	bl	8010ae4 <write_submessage_acknack.isra.0>
 8010efa:	e77d      	b.n	8010df8 <read_submessage_list+0x10>
 8010efc:	a912      	add	r1, sp, #72	@ 0x48
 8010efe:	4640      	mov	r0, r8
 8010f00:	f002 f932 	bl	8013168 <uxr_deserialize_ACKNACK_Payload>
 8010f04:	2100      	movs	r1, #0
 8010f06:	f89d 004c 	ldrb.w	r0, [sp, #76]	@ 0x4c
 8010f0a:	f000 fe63 	bl	8011bd4 <uxr_stream_id_from_raw>
 8010f0e:	4603      	mov	r3, r0
 8010f10:	f3c0 2107 	ubfx	r1, r0, #8, #8
 8010f14:	f104 0008 	add.w	r0, r4, #8
 8010f18:	930f      	str	r3, [sp, #60]	@ 0x3c
 8010f1a:	f000 ff33 	bl	8011d84 <uxr_get_output_reliable_stream>
 8010f1e:	4605      	mov	r5, r0
 8010f20:	2800      	cmp	r0, #0
 8010f22:	f43f af69 	beq.w	8010df8 <read_submessage_list+0x10>
 8010f26:	f89d 304a 	ldrb.w	r3, [sp, #74]	@ 0x4a
 8010f2a:	f89d 104b 	ldrb.w	r1, [sp, #75]	@ 0x4b
 8010f2e:	f8bd 2048 	ldrh.w	r2, [sp, #72]	@ 0x48
 8010f32:	eb01 2103 	add.w	r1, r1, r3, lsl #8
 8010f36:	b289      	uxth	r1, r1
 8010f38:	f007 fa0c 	bl	8018354 <uxr_process_acknack>
 8010f3c:	4628      	mov	r0, r5
 8010f3e:	f007 f9cf 	bl	80182e0 <uxr_begin_output_nack_buffer_it>
 8010f42:	af10      	add	r7, sp, #64	@ 0x40
 8010f44:	f8ad 003a 	strh.w	r0, [sp, #58]	@ 0x3a
 8010f48:	e005      	b.n	8010f56 <read_submessage_list+0x16e>
 8010f4a:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 8010f4c:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8010f4e:	9910      	ldr	r1, [sp, #64]	@ 0x40
 8010f50:	e9d3 0600 	ldrd	r0, r6, [r3]
 8010f54:	47b0      	blx	r6
 8010f56:	f10d 033a 	add.w	r3, sp, #58	@ 0x3a
 8010f5a:	aa11      	add	r2, sp, #68	@ 0x44
 8010f5c:	4639      	mov	r1, r7
 8010f5e:	4628      	mov	r0, r5
 8010f60:	f007 f9c0 	bl	80182e4 <uxr_next_reliable_nack_buffer_to_send>
 8010f64:	2800      	cmp	r0, #0
 8010f66:	d1f0      	bne.n	8010f4a <read_submessage_list+0x162>
 8010f68:	e746      	b.n	8010df8 <read_submessage_list+0x10>
 8010f6a:	f89d 302d 	ldrb.w	r3, [sp, #45]	@ 0x2d
 8010f6e:	f88d 203e 	strb.w	r2, [sp, #62]	@ 0x3e
 8010f72:	af10      	add	r7, sp, #64	@ 0x40
 8010f74:	f89d 202f 	ldrb.w	r2, [sp, #47]	@ 0x2f
 8010f78:	f88d 303d 	strb.w	r3, [sp, #61]	@ 0x3d
 8010f7c:	4639      	mov	r1, r7
 8010f7e:	f89d 302c 	ldrb.w	r3, [sp, #44]	@ 0x2c
 8010f82:	f89d 6037 	ldrb.w	r6, [sp, #55]	@ 0x37
 8010f86:	f8bd 5038 	ldrh.w	r5, [sp, #56]	@ 0x38
 8010f8a:	f88d 203f 	strb.w	r2, [sp, #63]	@ 0x3f
 8010f8e:	4640      	mov	r0, r8
 8010f90:	f88d 303c 	strb.w	r3, [sp, #60]	@ 0x3c
 8010f94:	f001 fe32 	bl	8012bfc <uxr_deserialize_BaseObjectRequest>
 8010f98:	4638      	mov	r0, r7
 8010f9a:	a911      	add	r1, sp, #68	@ 0x44
 8010f9c:	f10d 023a 	add.w	r2, sp, #58	@ 0x3a
 8010fa0:	f000 fddc 	bl	8011b5c <uxr_parse_base_object_request>
 8010fa4:	f8d4 a080 	ldr.w	sl, [r4, #128]	@ 0x80
 8010fa8:	9911      	ldr	r1, [sp, #68]	@ 0x44
 8010faa:	f8bd 703a 	ldrh.w	r7, [sp, #58]	@ 0x3a
 8010fae:	9112      	str	r1, [sp, #72]	@ 0x48
 8010fb0:	3d04      	subs	r5, #4
 8010fb2:	f006 060e 	and.w	r6, r6, #14
 8010fb6:	b2ad      	uxth	r5, r5
 8010fb8:	f1ba 0f00 	cmp.w	sl, #0
 8010fbc:	d006      	beq.n	8010fcc <read_submessage_list+0x1e4>
 8010fbe:	f8d4 3084 	ldr.w	r3, [r4, #132]	@ 0x84
 8010fc2:	9300      	str	r3, [sp, #0]
 8010fc4:	463a      	mov	r2, r7
 8010fc6:	2300      	movs	r3, #0
 8010fc8:	4620      	mov	r0, r4
 8010fca:	47d0      	blx	sl
 8010fcc:	6fe0      	ldr	r0, [r4, #124]	@ 0x7c
 8010fce:	b168      	cbz	r0, 8010fec <read_submessage_list+0x204>
 8010fd0:	6f61      	ldr	r1, [r4, #116]	@ 0x74
 8010fd2:	2300      	movs	r3, #0
 8010fd4:	3902      	subs	r1, #2
 8010fd6:	e002      	b.n	8010fde <read_submessage_list+0x1f6>
 8010fd8:	3301      	adds	r3, #1
 8010fda:	4283      	cmp	r3, r0
 8010fdc:	d006      	beq.n	8010fec <read_submessage_list+0x204>
 8010fde:	f831 2f02 	ldrh.w	r2, [r1, #2]!
 8010fe2:	42ba      	cmp	r2, r7
 8010fe4:	d1f8      	bne.n	8010fd8 <read_submessage_list+0x1f0>
 8010fe6:	6fa2      	ldr	r2, [r4, #120]	@ 0x78
 8010fe8:	2100      	movs	r1, #0
 8010fea:	54d1      	strb	r1, [r2, r3]
 8010fec:	9811      	ldr	r0, [sp, #68]	@ 0x44
 8010fee:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8010ff0:	f8bd 303a 	ldrh.w	r3, [sp, #58]	@ 0x3a
 8010ff4:	9302      	str	r3, [sp, #8]
 8010ff6:	e9cd 1000 	strd	r1, r0, [sp]
 8010ffa:	4633      	mov	r3, r6
 8010ffc:	462a      	mov	r2, r5
 8010ffe:	4641      	mov	r1, r8
 8011000:	4620      	mov	r0, r4
 8011002:	f007 fa65 	bl	80184d0 <read_submessage_format>
 8011006:	e6f7      	b.n	8010df8 <read_submessage_list+0x10>
 8011008:	4641      	mov	r1, r8
 801100a:	4620      	mov	r0, r4
 801100c:	f7ff fea4 	bl	8010d58 <read_submessage_info>
 8011010:	e6f2      	b.n	8010df8 <read_submessage_list+0x10>
 8011012:	2a00      	cmp	r2, #0
 8011014:	d03b      	beq.n	801108e <read_submessage_list+0x2a6>
 8011016:	a912      	add	r1, sp, #72	@ 0x48
 8011018:	4640      	mov	r0, r8
 801101a:	f002 f801 	bl	8013020 <uxr_deserialize_STATUS_Payload>
 801101e:	a910      	add	r1, sp, #64	@ 0x40
 8011020:	aa0f      	add	r2, sp, #60	@ 0x3c
 8011022:	a812      	add	r0, sp, #72	@ 0x48
 8011024:	f000 fd9a 	bl	8011b5c <uxr_parse_base_object_request>
 8011028:	f8d4 5080 	ldr.w	r5, [r4, #128]	@ 0x80
 801102c:	9910      	ldr	r1, [sp, #64]	@ 0x40
 801102e:	f89d 704c 	ldrb.w	r7, [sp, #76]	@ 0x4c
 8011032:	f8bd 603c 	ldrh.w	r6, [sp, #60]	@ 0x3c
 8011036:	9111      	str	r1, [sp, #68]	@ 0x44
 8011038:	b135      	cbz	r5, 8011048 <read_submessage_list+0x260>
 801103a:	f8d4 3084 	ldr.w	r3, [r4, #132]	@ 0x84
 801103e:	9300      	str	r3, [sp, #0]
 8011040:	4632      	mov	r2, r6
 8011042:	463b      	mov	r3, r7
 8011044:	4620      	mov	r0, r4
 8011046:	47a8      	blx	r5
 8011048:	6fe3      	ldr	r3, [r4, #124]	@ 0x7c
 801104a:	2b00      	cmp	r3, #0
 801104c:	f43f aed4 	beq.w	8010df8 <read_submessage_list+0x10>
 8011050:	6f60      	ldr	r0, [r4, #116]	@ 0x74
 8011052:	2100      	movs	r1, #0
 8011054:	3802      	subs	r0, #2
 8011056:	e003      	b.n	8011060 <read_submessage_list+0x278>
 8011058:	3101      	adds	r1, #1
 801105a:	4299      	cmp	r1, r3
 801105c:	f43f aecc 	beq.w	8010df8 <read_submessage_list+0x10>
 8011060:	f830 2f02 	ldrh.w	r2, [r0, #2]!
 8011064:	42b2      	cmp	r2, r6
 8011066:	d1f7      	bne.n	8011058 <read_submessage_list+0x270>
 8011068:	6fa3      	ldr	r3, [r4, #120]	@ 0x78
 801106a:	545f      	strb	r7, [r3, r1]
 801106c:	e6c4      	b.n	8010df8 <read_submessage_list+0x10>
 801106e:	2a00      	cmp	r2, #0
 8011070:	f47f aec2 	bne.w	8010df8 <read_submessage_list+0x10>
 8011074:	4641      	mov	r1, r8
 8011076:	4620      	mov	r0, r4
 8011078:	f000 fcb4 	bl	80119e4 <uxr_read_create_session_status>
 801107c:	e6bc      	b.n	8010df8 <read_submessage_list+0x10>
 801107e:	4641      	mov	r1, r8
 8011080:	4620      	mov	r0, r4
 8011082:	f7ff fcf9 	bl	8010a78 <read_submessage_get_info>
 8011086:	e6b7      	b.n	8010df8 <read_submessage_list+0x10>
 8011088:	b018      	add	sp, #96	@ 0x60
 801108a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801108e:	4641      	mov	r1, r8
 8011090:	4620      	mov	r0, r4
 8011092:	f000 fcb3 	bl	80119fc <uxr_read_delete_session_status>
 8011096:	e6af      	b.n	8010df8 <read_submessage_list+0x10>
 8011098:	f000 ff0e 	bl	8011eb8 <uxr_nanos>
 801109c:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 801109e:	9e17      	ldr	r6, [sp, #92]	@ 0x5c
 80110a0:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 80110a2:	9d14      	ldr	r5, [sp, #80]	@ 0x50
 80110a4:	2700      	movs	r7, #0
 80110a6:	fbc9 6703 	smlal	r6, r7, r9, r3
 80110aa:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 80110ac:	eb16 0c00 	adds.w	ip, r6, r0
 80110b0:	4618      	mov	r0, r3
 80110b2:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80110b4:	eb47 0e01 	adc.w	lr, r7, r1
 80110b8:	461e      	mov	r6, r3
 80110ba:	2100      	movs	r1, #0
 80110bc:	2700      	movs	r7, #0
 80110be:	fbc9 0105 	smlal	r0, r1, r9, r5
 80110c2:	fbc9 6702 	smlal	r6, r7, r9, r2
 80110c6:	1983      	adds	r3, r0, r6
 80110c8:	eb41 0207 	adc.w	r2, r1, r7
 80110cc:	ebbc 0303 	subs.w	r3, ip, r3
 80110d0:	9308      	str	r3, [sp, #32]
 80110d2:	eb6e 0302 	sbc.w	r3, lr, r2
 80110d6:	9309      	str	r3, [sp, #36]	@ 0x24
 80110d8:	e9dd 1208 	ldrd	r1, r2, [sp, #32]
 80110dc:	0fd3      	lsrs	r3, r2, #31
 80110de:	18c9      	adds	r1, r1, r3
 80110e0:	f142 0200 	adc.w	r2, r2, #0
 80110e4:	084b      	lsrs	r3, r1, #1
 80110e6:	ea43 73c2 	orr.w	r3, r3, r2, lsl #31
 80110ea:	1052      	asrs	r2, r2, #1
 80110ec:	e9c4 3226 	strd	r3, r2, [r4, #152]	@ 0x98
 80110f0:	e6de      	b.n	8010eb0 <read_submessage_list+0xc8>
 80110f2:	bf00      	nop
 80110f4:	3b9aca00 	.word	0x3b9aca00

080110f8 <listen_message_reliably>:
 80110f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80110fc:	1e0b      	subs	r3, r1, #0
 80110fe:	b09d      	sub	sp, #116	@ 0x74
 8011100:	bfb8      	it	lt
 8011102:	f06f 4300 	mvnlt.w	r3, #2147483648	@ 0x80000000
 8011106:	9305      	str	r3, [sp, #20]
 8011108:	4607      	mov	r7, r0
 801110a:	f000 feb9 	bl	8011e80 <uxr_millis>
 801110e:	f897 2048 	ldrb.w	r2, [r7, #72]	@ 0x48
 8011112:	4681      	mov	r9, r0
 8011114:	2a00      	cmp	r2, #0
 8011116:	f000 8095 	beq.w	8011244 <listen_message_reliably+0x14c>
 801111a:	2600      	movs	r6, #0
 801111c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8011120:	f06f 4400 	mvn.w	r4, #2147483648	@ 0x80000000
 8011124:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8011128:	4630      	mov	r0, r6
 801112a:	4688      	mov	r8, r1
 801112c:	46ca      	mov	sl, r9
 801112e:	e00f      	b.n	8011150 <listen_message_reliably+0x58>
 8011130:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 8011134:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8011138:	42a2      	cmp	r2, r4
 801113a:	eb73 0105 	sbcs.w	r1, r3, r5
 801113e:	bfb8      	it	lt
 8011140:	e9cd 2302 	strdlt	r2, r3, [sp, #8]
 8011144:	3601      	adds	r6, #1
 8011146:	f897 3048 	ldrb.w	r3, [r7, #72]	@ 0x48
 801114a:	b2f0      	uxtb	r0, r6
 801114c:	4283      	cmp	r3, r0
 801114e:	d951      	bls.n	80111f4 <listen_message_reliably+0xfc>
 8011150:	eb00 0480 	add.w	r4, r0, r0, lsl #2
 8011154:	2201      	movs	r2, #1
 8011156:	2102      	movs	r1, #2
 8011158:	f000 fd12 	bl	8011b80 <uxr_stream_id>
 801115c:	00e4      	lsls	r4, r4, #3
 801115e:	f104 0520 	add.w	r5, r4, #32
 8011162:	443d      	add	r5, r7
 8011164:	4601      	mov	r1, r0
 8011166:	4643      	mov	r3, r8
 8011168:	4652      	mov	r2, sl
 801116a:	4628      	mov	r0, r5
 801116c:	9109      	str	r1, [sp, #36]	@ 0x24
 801116e:	f007 f88b 	bl	8018288 <uxr_update_output_stream_heartbeat_timestamp>
 8011172:	193b      	adds	r3, r7, r4
 8011174:	2800      	cmp	r0, #0
 8011176:	d0db      	beq.n	8011130 <listen_message_reliably+0x38>
 8011178:	f89d 5025 	ldrb.w	r5, [sp, #37]	@ 0x25
 801117c:	f89d 9024 	ldrb.w	r9, [sp, #36]	@ 0x24
 8011180:	4638      	mov	r0, r7
 8011182:	f000 fcc5 	bl	8011b10 <uxr_session_header_offset>
 8011186:	3501      	adds	r5, #1
 8011188:	f10d 0b50 	add.w	fp, sp, #80	@ 0x50
 801118c:	eb05 0585 	add.w	r5, r5, r5, lsl #2
 8011190:	eb07 05c5 	add.w	r5, r7, r5, lsl #3
 8011194:	9000      	str	r0, [sp, #0]
 8011196:	2300      	movs	r3, #0
 8011198:	4658      	mov	r0, fp
 801119a:	2211      	movs	r2, #17
 801119c:	a90c      	add	r1, sp, #48	@ 0x30
 801119e:	f7ff f913 	bl	80103c8 <ucdr_init_buffer_origin_offset>
 80111a2:	2300      	movs	r3, #0
 80111a4:	2205      	movs	r2, #5
 80111a6:	210b      	movs	r1, #11
 80111a8:	4658      	mov	r0, fp
 80111aa:	f000 fe23 	bl	8011df4 <uxr_buffer_submessage_header>
 80111ae:	8968      	ldrh	r0, [r5, #10]
 80111b0:	2101      	movs	r1, #1
 80111b2:	f007 fa4d 	bl	8018650 <uxr_seq_num_add>
 80111b6:	892a      	ldrh	r2, [r5, #8]
 80111b8:	f8ad 202a 	strh.w	r2, [sp, #42]	@ 0x2a
 80111bc:	4603      	mov	r3, r0
 80111be:	a90a      	add	r1, sp, #40	@ 0x28
 80111c0:	4658      	mov	r0, fp
 80111c2:	f8ad 3028 	strh.w	r3, [sp, #40]	@ 0x28
 80111c6:	f88d 902c 	strb.w	r9, [sp, #44]	@ 0x2c
 80111ca:	f001 ffe1 	bl	8013190 <uxr_serialize_HEARTBEAT_Payload>
 80111ce:	2200      	movs	r2, #0
 80111d0:	4611      	mov	r1, r2
 80111d2:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 80111d4:	4638      	mov	r0, r7
 80111d6:	f000 fc43 	bl	8011a60 <uxr_stamp_session_header>
 80111da:	4658      	mov	r0, fp
 80111dc:	f7ff f932 	bl	8010444 <ucdr_buffer_length>
 80111e0:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80111e2:	4602      	mov	r2, r0
 80111e4:	a90c      	add	r1, sp, #48	@ 0x30
 80111e6:	e9d3 0500 	ldrd	r0, r5, [r3]
 80111ea:	443c      	add	r4, r7
 80111ec:	47a8      	blx	r5
 80111ee:	e9d4 230e 	ldrd	r2, r3, [r4, #56]	@ 0x38
 80111f2:	e79f      	b.n	8011134 <listen_message_reliably+0x3c>
 80111f4:	e9dd 3402 	ldrd	r3, r4, [sp, #8]
 80111f8:	f06f 4200 	mvn.w	r2, #2147483648	@ 0x80000000
 80111fc:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8011200:	4294      	cmp	r4, r2
 8011202:	bf08      	it	eq
 8011204:	428b      	cmpeq	r3, r1
 8011206:	d01d      	beq.n	8011244 <listen_message_reliably+0x14c>
 8011208:	eba3 030a 	sub.w	r3, r3, sl
 801120c:	9905      	ldr	r1, [sp, #20]
 801120e:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 8011210:	2b00      	cmp	r3, #0
 8011212:	bf08      	it	eq
 8011214:	2301      	moveq	r3, #1
 8011216:	4299      	cmp	r1, r3
 8011218:	bfa8      	it	ge
 801121a:	4619      	movge	r1, r3
 801121c:	6894      	ldr	r4, [r2, #8]
 801121e:	6810      	ldr	r0, [r2, #0]
 8011220:	4689      	mov	r9, r1
 8011222:	460b      	mov	r3, r1
 8011224:	aa08      	add	r2, sp, #32
 8011226:	a907      	add	r1, sp, #28
 8011228:	47a0      	blx	r4
 801122a:	b968      	cbnz	r0, 8011248 <listen_message_reliably+0x150>
 801122c:	9b05      	ldr	r3, [sp, #20]
 801122e:	eba3 0309 	sub.w	r3, r3, r9
 8011232:	2b00      	cmp	r3, #0
 8011234:	9305      	str	r3, [sp, #20]
 8011236:	f73f af68 	bgt.w	801110a <listen_message_reliably+0x12>
 801123a:	4604      	mov	r4, r0
 801123c:	4620      	mov	r0, r4
 801123e:	b01d      	add	sp, #116	@ 0x74
 8011240:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011244:	9b05      	ldr	r3, [sp, #20]
 8011246:	e7e1      	b.n	801120c <listen_message_reliably+0x114>
 8011248:	e9dd 1207 	ldrd	r1, r2, [sp, #28]
 801124c:	4604      	mov	r4, r0
 801124e:	a80c      	add	r0, sp, #48	@ 0x30
 8011250:	f7ff f8cc 	bl	80103ec <ucdr_init_buffer>
 8011254:	2500      	movs	r5, #0
 8011256:	a90c      	add	r1, sp, #48	@ 0x30
 8011258:	f10d 031a 	add.w	r3, sp, #26
 801125c:	aa06      	add	r2, sp, #24
 801125e:	4638      	mov	r0, r7
 8011260:	f88d 5018 	strb.w	r5, [sp, #24]
 8011264:	f000 fc12 	bl	8011a8c <uxr_read_session_header>
 8011268:	b918      	cbnz	r0, 8011272 <listen_message_reliably+0x17a>
 801126a:	4620      	mov	r0, r4
 801126c:	b01d      	add	sp, #116	@ 0x74
 801126e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011272:	4629      	mov	r1, r5
 8011274:	f89d 0018 	ldrb.w	r0, [sp, #24]
 8011278:	f000 fcac 	bl	8011bd4 <uxr_stream_id_from_raw>
 801127c:	f3c0 4607 	ubfx	r6, r0, #16, #8
 8011280:	2e01      	cmp	r6, #1
 8011282:	f8bd 901a 	ldrh.w	r9, [sp, #26]
 8011286:	900a      	str	r0, [sp, #40]	@ 0x28
 8011288:	fa5f fa80 	uxtb.w	sl, r0
 801128c:	f3c0 2507 	ubfx	r5, r0, #8, #8
 8011290:	d04b      	beq.n	801132a <listen_message_reliably+0x232>
 8011292:	2e02      	cmp	r6, #2
 8011294:	d00f      	beq.n	80112b6 <listen_message_reliably+0x1be>
 8011296:	2e00      	cmp	r6, #0
 8011298:	d1e7      	bne.n	801126a <listen_message_reliably+0x172>
 801129a:	4631      	mov	r1, r6
 801129c:	4630      	mov	r0, r6
 801129e:	f000 fc99 	bl	8011bd4 <uxr_stream_id_from_raw>
 80112a2:	a90c      	add	r1, sp, #48	@ 0x30
 80112a4:	4602      	mov	r2, r0
 80112a6:	4638      	mov	r0, r7
 80112a8:	920a      	str	r2, [sp, #40]	@ 0x28
 80112aa:	f7ff fd9d 	bl	8010de8 <read_submessage_list>
 80112ae:	4620      	mov	r0, r4
 80112b0:	b01d      	add	sp, #116	@ 0x74
 80112b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80112b6:	4629      	mov	r1, r5
 80112b8:	f107 0008 	add.w	r0, r7, #8
 80112bc:	f000 fd78 	bl	8011db0 <uxr_get_input_reliable_stream>
 80112c0:	4680      	mov	r8, r0
 80112c2:	b348      	cbz	r0, 8011318 <listen_message_reliably+0x220>
 80112c4:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80112c6:	9202      	str	r2, [sp, #8]
 80112c8:	a80c      	add	r0, sp, #48	@ 0x30
 80112ca:	f7ff f8bf 	bl	801044c <ucdr_buffer_remaining>
 80112ce:	4603      	mov	r3, r0
 80112d0:	f10d 0019 	add.w	r0, sp, #25
 80112d4:	9000      	str	r0, [sp, #0]
 80112d6:	9a02      	ldr	r2, [sp, #8]
 80112d8:	4649      	mov	r1, r9
 80112da:	4640      	mov	r0, r8
 80112dc:	f006 fbec 	bl	8017ab8 <uxr_receive_reliable_message>
 80112e0:	b1d0      	cbz	r0, 8011318 <listen_message_reliably+0x220>
 80112e2:	f89d 3019 	ldrb.w	r3, [sp, #25]
 80112e6:	2b00      	cmp	r3, #0
 80112e8:	d037      	beq.n	801135a <listen_message_reliably+0x262>
 80112ea:	ae14      	add	r6, sp, #80	@ 0x50
 80112ec:	f04f 0902 	mov.w	r9, #2
 80112f0:	e008      	b.n	8011304 <listen_message_reliably+0x20c>
 80112f2:	f88d a028 	strb.w	sl, [sp, #40]	@ 0x28
 80112f6:	f88d 5029 	strb.w	r5, [sp, #41]	@ 0x29
 80112fa:	f88d 902a 	strb.w	r9, [sp, #42]	@ 0x2a
 80112fe:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8011300:	f7ff fd72 	bl	8010de8 <read_submessage_list>
 8011304:	4631      	mov	r1, r6
 8011306:	2204      	movs	r2, #4
 8011308:	4640      	mov	r0, r8
 801130a:	f006 fc55 	bl	8017bb8 <uxr_next_input_reliable_buffer_available>
 801130e:	4603      	mov	r3, r0
 8011310:	4631      	mov	r1, r6
 8011312:	4638      	mov	r0, r7
 8011314:	2b00      	cmp	r3, #0
 8011316:	d1ec      	bne.n	80112f2 <listen_message_reliably+0x1fa>
 8011318:	4638      	mov	r0, r7
 801131a:	462a      	mov	r2, r5
 801131c:	4651      	mov	r1, sl
 801131e:	f7ff fbe1 	bl	8010ae4 <write_submessage_acknack.isra.0>
 8011322:	4620      	mov	r0, r4
 8011324:	b01d      	add	sp, #116	@ 0x74
 8011326:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801132a:	4629      	mov	r1, r5
 801132c:	f107 0008 	add.w	r0, r7, #8
 8011330:	f000 fd34 	bl	8011d9c <uxr_get_input_best_effort_stream>
 8011334:	2800      	cmp	r0, #0
 8011336:	d098      	beq.n	801126a <listen_message_reliably+0x172>
 8011338:	4649      	mov	r1, r9
 801133a:	f006 fb39 	bl	80179b0 <uxr_receive_best_effort_message>
 801133e:	2800      	cmp	r0, #0
 8011340:	d093      	beq.n	801126a <listen_message_reliably+0x172>
 8011342:	f88d a028 	strb.w	sl, [sp, #40]	@ 0x28
 8011346:	f88d 5029 	strb.w	r5, [sp, #41]	@ 0x29
 801134a:	f88d 602a 	strb.w	r6, [sp, #42]	@ 0x2a
 801134e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8011350:	a90c      	add	r1, sp, #48	@ 0x30
 8011352:	4638      	mov	r0, r7
 8011354:	f7ff fd48 	bl	8010de8 <read_submessage_list>
 8011358:	e787      	b.n	801126a <listen_message_reliably+0x172>
 801135a:	f88d a028 	strb.w	sl, [sp, #40]	@ 0x28
 801135e:	f88d 5029 	strb.w	r5, [sp, #41]	@ 0x29
 8011362:	f88d 602a 	strb.w	r6, [sp, #42]	@ 0x2a
 8011366:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8011368:	a90c      	add	r1, sp, #48	@ 0x30
 801136a:	4638      	mov	r0, r7
 801136c:	f7ff fd3c 	bl	8010de8 <read_submessage_list>
 8011370:	e7bb      	b.n	80112ea <listen_message_reliably+0x1f2>
 8011372:	bf00      	nop

08011374 <uxr_run_session_timeout>:
 8011374:	b570      	push	{r4, r5, r6, lr}
 8011376:	4604      	mov	r4, r0
 8011378:	460d      	mov	r5, r1
 801137a:	f000 fd81 	bl	8011e80 <uxr_millis>
 801137e:	4606      	mov	r6, r0
 8011380:	4620      	mov	r0, r4
 8011382:	f7ff fc75 	bl	8010c70 <uxr_flash_output_streams>
 8011386:	4629      	mov	r1, r5
 8011388:	4620      	mov	r0, r4
 801138a:	f7ff feb5 	bl	80110f8 <listen_message_reliably>
 801138e:	f000 fd77 	bl	8011e80 <uxr_millis>
 8011392:	1b83      	subs	r3, r0, r6
 8011394:	1ae9      	subs	r1, r5, r3
 8011396:	2900      	cmp	r1, #0
 8011398:	dcf6      	bgt.n	8011388 <uxr_run_session_timeout+0x14>
 801139a:	f104 0008 	add.w	r0, r4, #8
 801139e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80113a2:	f000 bd11 	b.w	8011dc8 <uxr_output_streams_confirmed>
 80113a6:	bf00      	nop

080113a8 <uxr_run_session_until_data>:
 80113a8:	b570      	push	{r4, r5, r6, lr}
 80113aa:	4604      	mov	r4, r0
 80113ac:	460d      	mov	r5, r1
 80113ae:	f000 fd67 	bl	8011e80 <uxr_millis>
 80113b2:	4606      	mov	r6, r0
 80113b4:	4620      	mov	r0, r4
 80113b6:	f7ff fc5b 	bl	8010c70 <uxr_flash_output_streams>
 80113ba:	2300      	movs	r3, #0
 80113bc:	f884 30b4 	strb.w	r3, [r4, #180]	@ 0xb4
 80113c0:	4629      	mov	r1, r5
 80113c2:	e005      	b.n	80113d0 <uxr_run_session_until_data+0x28>
 80113c4:	f000 fd5c 	bl	8011e80 <uxr_millis>
 80113c8:	1b83      	subs	r3, r0, r6
 80113ca:	1ae9      	subs	r1, r5, r3
 80113cc:	2900      	cmp	r1, #0
 80113ce:	dd07      	ble.n	80113e0 <uxr_run_session_until_data+0x38>
 80113d0:	4620      	mov	r0, r4
 80113d2:	f7ff fe91 	bl	80110f8 <listen_message_reliably>
 80113d6:	f894 00b4 	ldrb.w	r0, [r4, #180]	@ 0xb4
 80113da:	2800      	cmp	r0, #0
 80113dc:	d0f2      	beq.n	80113c4 <uxr_run_session_until_data+0x1c>
 80113de:	bd70      	pop	{r4, r5, r6, pc}
 80113e0:	f894 00b4 	ldrb.w	r0, [r4, #180]	@ 0xb4
 80113e4:	bd70      	pop	{r4, r5, r6, pc}
 80113e6:	bf00      	nop

080113e8 <uxr_run_session_until_confirm_delivery>:
 80113e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80113ec:	4606      	mov	r6, r0
 80113ee:	460d      	mov	r5, r1
 80113f0:	f000 fd46 	bl	8011e80 <uxr_millis>
 80113f4:	4607      	mov	r7, r0
 80113f6:	4630      	mov	r0, r6
 80113f8:	f7ff fc3a 	bl	8010c70 <uxr_flash_output_streams>
 80113fc:	2d00      	cmp	r5, #0
 80113fe:	f106 0808 	add.w	r8, r6, #8
 8011402:	bfa8      	it	ge
 8011404:	462c      	movge	r4, r5
 8011406:	da07      	bge.n	8011418 <uxr_run_session_until_confirm_delivery+0x30>
 8011408:	e00e      	b.n	8011428 <uxr_run_session_until_confirm_delivery+0x40>
 801140a:	f7ff fe75 	bl	80110f8 <listen_message_reliably>
 801140e:	f000 fd37 	bl	8011e80 <uxr_millis>
 8011412:	1bc3      	subs	r3, r0, r7
 8011414:	1aec      	subs	r4, r5, r3
 8011416:	d407      	bmi.n	8011428 <uxr_run_session_until_confirm_delivery+0x40>
 8011418:	4640      	mov	r0, r8
 801141a:	f000 fcd5 	bl	8011dc8 <uxr_output_streams_confirmed>
 801141e:	4603      	mov	r3, r0
 8011420:	4621      	mov	r1, r4
 8011422:	4630      	mov	r0, r6
 8011424:	2b00      	cmp	r3, #0
 8011426:	d0f0      	beq.n	801140a <uxr_run_session_until_confirm_delivery+0x22>
 8011428:	4640      	mov	r0, r8
 801142a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801142e:	f000 bccb 	b.w	8011dc8 <uxr_output_streams_confirmed>
 8011432:	bf00      	nop

08011434 <uxr_run_session_until_all_status>:
 8011434:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011438:	9d08      	ldr	r5, [sp, #32]
 801143a:	460f      	mov	r7, r1
 801143c:	4692      	mov	sl, r2
 801143e:	461c      	mov	r4, r3
 8011440:	4606      	mov	r6, r0
 8011442:	f7ff fc15 	bl	8010c70 <uxr_flash_output_streams>
 8011446:	b125      	cbz	r5, 8011452 <uxr_run_session_until_all_status+0x1e>
 8011448:	462a      	mov	r2, r5
 801144a:	21ff      	movs	r1, #255	@ 0xff
 801144c:	4620      	mov	r0, r4
 801144e:	f008 fbd9 	bl	8019c04 <memset>
 8011452:	e9c6 a41d 	strd	sl, r4, [r6, #116]	@ 0x74
 8011456:	67f5      	str	r5, [r6, #124]	@ 0x7c
 8011458:	f000 fd12 	bl	8011e80 <uxr_millis>
 801145c:	f104 39ff 	add.w	r9, r4, #4294967295	@ 0xffffffff
 8011460:	f1aa 0a02 	sub.w	sl, sl, #2
 8011464:	4680      	mov	r8, r0
 8011466:	4639      	mov	r1, r7
 8011468:	4630      	mov	r0, r6
 801146a:	f7ff fe45 	bl	80110f8 <listen_message_reliably>
 801146e:	f000 fd07 	bl	8011e80 <uxr_millis>
 8011472:	eba0 0008 	sub.w	r0, r0, r8
 8011476:	1a39      	subs	r1, r7, r0
 8011478:	b33d      	cbz	r5, 80114ca <uxr_run_session_until_all_status+0x96>
 801147a:	46cc      	mov	ip, r9
 801147c:	464a      	mov	r2, r9
 801147e:	2301      	movs	r3, #1
 8011480:	e002      	b.n	8011488 <uxr_run_session_until_all_status+0x54>
 8011482:	42ab      	cmp	r3, r5
 8011484:	d20c      	bcs.n	80114a0 <uxr_run_session_until_all_status+0x6c>
 8011486:	3301      	adds	r3, #1
 8011488:	f812 4f01 	ldrb.w	r4, [r2, #1]!
 801148c:	2cff      	cmp	r4, #255	@ 0xff
 801148e:	d1f8      	bne.n	8011482 <uxr_run_session_until_all_status+0x4e>
 8011490:	42ab      	cmp	r3, r5
 8011492:	f83a 0013 	ldrh.w	r0, [sl, r3, lsl #1]
 8011496:	d213      	bcs.n	80114c0 <uxr_run_session_until_all_status+0x8c>
 8011498:	2800      	cmp	r0, #0
 801149a:	d0f4      	beq.n	8011486 <uxr_run_session_until_all_status+0x52>
 801149c:	2900      	cmp	r1, #0
 801149e:	dce3      	bgt.n	8011468 <uxr_run_session_until_all_status+0x34>
 80114a0:	2300      	movs	r3, #0
 80114a2:	444d      	add	r5, r9
 80114a4:	67f3      	str	r3, [r6, #124]	@ 0x7c
 80114a6:	e001      	b.n	80114ac <uxr_run_session_until_all_status+0x78>
 80114a8:	2b01      	cmp	r3, #1
 80114aa:	d812      	bhi.n	80114d2 <uxr_run_session_until_all_status+0x9e>
 80114ac:	f81c 3f01 	ldrb.w	r3, [ip, #1]!
 80114b0:	4565      	cmp	r5, ip
 80114b2:	d1f9      	bne.n	80114a8 <uxr_run_session_until_all_status+0x74>
 80114b4:	2b01      	cmp	r3, #1
 80114b6:	bf8c      	ite	hi
 80114b8:	2000      	movhi	r0, #0
 80114ba:	2001      	movls	r0, #1
 80114bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80114c0:	2900      	cmp	r1, #0
 80114c2:	dded      	ble.n	80114a0 <uxr_run_session_until_all_status+0x6c>
 80114c4:	2800      	cmp	r0, #0
 80114c6:	d1cf      	bne.n	8011468 <uxr_run_session_until_all_status+0x34>
 80114c8:	e7ea      	b.n	80114a0 <uxr_run_session_until_all_status+0x6c>
 80114ca:	67f5      	str	r5, [r6, #124]	@ 0x7c
 80114cc:	2001      	movs	r0, #1
 80114ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80114d2:	2000      	movs	r0, #0
 80114d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

080114d8 <uxr_create_session>:
 80114d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80114dc:	ed2d 8b02 	vpush	{d8}
 80114e0:	f100 0808 	add.w	r8, r0, #8
 80114e4:	b0a9      	sub	sp, #164	@ 0xa4
 80114e6:	4604      	mov	r4, r0
 80114e8:	4640      	mov	r0, r8
 80114ea:	f000 fba9 	bl	8011c40 <uxr_reset_stream_storage>
 80114ee:	4620      	mov	r0, r4
 80114f0:	f000 fb0e 	bl	8011b10 <uxr_session_header_offset>
 80114f4:	a909      	add	r1, sp, #36	@ 0x24
 80114f6:	9000      	str	r0, [sp, #0]
 80114f8:	2300      	movs	r3, #0
 80114fa:	a810      	add	r0, sp, #64	@ 0x40
 80114fc:	221c      	movs	r2, #28
 80114fe:	f7fe ff63 	bl	80103c8 <ucdr_init_buffer_origin_offset>
 8011502:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 8011504:	8a1a      	ldrh	r2, [r3, #16]
 8011506:	3a04      	subs	r2, #4
 8011508:	b292      	uxth	r2, r2
 801150a:	4620      	mov	r0, r4
 801150c:	a910      	add	r1, sp, #64	@ 0x40
 801150e:	f000 fa23 	bl	8011958 <uxr_buffer_create_session>
 8011512:	9910      	ldr	r1, [sp, #64]	@ 0x40
 8011514:	4620      	mov	r0, r4
 8011516:	f000 fa8f 	bl	8011a38 <uxr_stamp_create_session_header>
 801151a:	a810      	add	r0, sp, #64	@ 0x40
 801151c:	f7fe ff92 	bl	8010444 <ucdr_buffer_length>
 8011520:	23ff      	movs	r3, #255	@ 0xff
 8011522:	ee08 0a10 	vmov	s16, r0
 8011526:	7163      	strb	r3, [r4, #5]
 8011528:	f04f 090a 	mov.w	r9, #10
 801152c:	46c2      	mov	sl, r8
 801152e:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 8011530:	ee18 2a10 	vmov	r2, s16
 8011534:	e9d3 0500 	ldrd	r0, r5, [r3]
 8011538:	a909      	add	r1, sp, #36	@ 0x24
 801153a:	47a8      	blx	r5
 801153c:	f000 fca0 	bl	8011e80 <uxr_millis>
 8011540:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8011544:	9002      	str	r0, [sp, #8]
 8011546:	e00c      	b.n	8011562 <uxr_create_session+0x8a>
 8011548:	f000 fc9a 	bl	8011e80 <uxr_millis>
 801154c:	9b02      	ldr	r3, [sp, #8]
 801154e:	7962      	ldrb	r2, [r4, #5]
 8011550:	1ac0      	subs	r0, r0, r3
 8011552:	f5c0 737a 	rsb	r3, r0, #1000	@ 0x3e8
 8011556:	2b00      	cmp	r3, #0
 8011558:	f340 8094 	ble.w	8011684 <uxr_create_session+0x1ac>
 801155c:	2aff      	cmp	r2, #255	@ 0xff
 801155e:	f040 8097 	bne.w	8011690 <uxr_create_session+0x1b8>
 8011562:	6f22      	ldr	r2, [r4, #112]	@ 0x70
 8011564:	a905      	add	r1, sp, #20
 8011566:	6895      	ldr	r5, [r2, #8]
 8011568:	6810      	ldr	r0, [r2, #0]
 801156a:	aa06      	add	r2, sp, #24
 801156c:	47a8      	blx	r5
 801156e:	2800      	cmp	r0, #0
 8011570:	d0ea      	beq.n	8011548 <uxr_create_session+0x70>
 8011572:	e9dd 1205 	ldrd	r1, r2, [sp, #20]
 8011576:	a818      	add	r0, sp, #96	@ 0x60
 8011578:	f7fe ff38 	bl	80103ec <ucdr_init_buffer>
 801157c:	2500      	movs	r5, #0
 801157e:	f10d 0312 	add.w	r3, sp, #18
 8011582:	aa04      	add	r2, sp, #16
 8011584:	a918      	add	r1, sp, #96	@ 0x60
 8011586:	4620      	mov	r0, r4
 8011588:	f88d 5010 	strb.w	r5, [sp, #16]
 801158c:	f000 fa7e 	bl	8011a8c <uxr_read_session_header>
 8011590:	2800      	cmp	r0, #0
 8011592:	d0d9      	beq.n	8011548 <uxr_create_session+0x70>
 8011594:	4629      	mov	r1, r5
 8011596:	f89d 0010 	ldrb.w	r0, [sp, #16]
 801159a:	f000 fb1b 	bl	8011bd4 <uxr_stream_id_from_raw>
 801159e:	f3c0 4707 	ubfx	r7, r0, #16, #8
 80115a2:	2f01      	cmp	r7, #1
 80115a4:	e9cd 0007 	strd	r0, r0, [sp, #28]
 80115a8:	f8bd b012 	ldrh.w	fp, [sp, #18]
 80115ac:	fa5f f880 	uxtb.w	r8, r0
 80115b0:	f3c0 2507 	ubfx	r5, r0, #8, #8
 80115b4:	d04d      	beq.n	8011652 <uxr_create_session+0x17a>
 80115b6:	2f02      	cmp	r7, #2
 80115b8:	d00c      	beq.n	80115d4 <uxr_create_session+0xfc>
 80115ba:	2f00      	cmp	r7, #0
 80115bc:	d1c4      	bne.n	8011548 <uxr_create_session+0x70>
 80115be:	4639      	mov	r1, r7
 80115c0:	4638      	mov	r0, r7
 80115c2:	f000 fb07 	bl	8011bd4 <uxr_stream_id_from_raw>
 80115c6:	a918      	add	r1, sp, #96	@ 0x60
 80115c8:	4602      	mov	r2, r0
 80115ca:	4620      	mov	r0, r4
 80115cc:	9208      	str	r2, [sp, #32]
 80115ce:	f7ff fc0b 	bl	8010de8 <read_submessage_list>
 80115d2:	e7b9      	b.n	8011548 <uxr_create_session+0x70>
 80115d4:	4629      	mov	r1, r5
 80115d6:	4650      	mov	r0, sl
 80115d8:	f000 fbea 	bl	8011db0 <uxr_get_input_reliable_stream>
 80115dc:	4606      	mov	r6, r0
 80115de:	b390      	cbz	r0, 8011646 <uxr_create_session+0x16e>
 80115e0:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 80115e2:	9203      	str	r2, [sp, #12]
 80115e4:	a818      	add	r0, sp, #96	@ 0x60
 80115e6:	f7fe ff31 	bl	801044c <ucdr_buffer_remaining>
 80115ea:	4603      	mov	r3, r0
 80115ec:	f10d 0011 	add.w	r0, sp, #17
 80115f0:	9000      	str	r0, [sp, #0]
 80115f2:	9a03      	ldr	r2, [sp, #12]
 80115f4:	4659      	mov	r1, fp
 80115f6:	4630      	mov	r0, r6
 80115f8:	f006 fa5e 	bl	8017ab8 <uxr_receive_reliable_message>
 80115fc:	b318      	cbz	r0, 8011646 <uxr_create_session+0x16e>
 80115fe:	f89d 3011 	ldrb.w	r3, [sp, #17]
 8011602:	b9b3      	cbnz	r3, 8011632 <uxr_create_session+0x15a>
 8011604:	f88d 8020 	strb.w	r8, [sp, #32]
 8011608:	f88d 5021 	strb.w	r5, [sp, #33]	@ 0x21
 801160c:	f88d 7022 	strb.w	r7, [sp, #34]	@ 0x22
 8011610:	9a08      	ldr	r2, [sp, #32]
 8011612:	a918      	add	r1, sp, #96	@ 0x60
 8011614:	4620      	mov	r0, r4
 8011616:	f7ff fbe7 	bl	8010de8 <read_submessage_list>
 801161a:	e00a      	b.n	8011632 <uxr_create_session+0x15a>
 801161c:	f04f 0302 	mov.w	r3, #2
 8011620:	f88d 8020 	strb.w	r8, [sp, #32]
 8011624:	f88d 5021 	strb.w	r5, [sp, #33]	@ 0x21
 8011628:	f88d 3022 	strb.w	r3, [sp, #34]	@ 0x22
 801162c:	9a08      	ldr	r2, [sp, #32]
 801162e:	f7ff fbdb 	bl	8010de8 <read_submessage_list>
 8011632:	a920      	add	r1, sp, #128	@ 0x80
 8011634:	2204      	movs	r2, #4
 8011636:	4630      	mov	r0, r6
 8011638:	f006 fabe 	bl	8017bb8 <uxr_next_input_reliable_buffer_available>
 801163c:	4603      	mov	r3, r0
 801163e:	a920      	add	r1, sp, #128	@ 0x80
 8011640:	4620      	mov	r0, r4
 8011642:	2b00      	cmp	r3, #0
 8011644:	d1ea      	bne.n	801161c <uxr_create_session+0x144>
 8011646:	462a      	mov	r2, r5
 8011648:	4641      	mov	r1, r8
 801164a:	4620      	mov	r0, r4
 801164c:	f7ff fa4a 	bl	8010ae4 <write_submessage_acknack.isra.0>
 8011650:	e77a      	b.n	8011548 <uxr_create_session+0x70>
 8011652:	4629      	mov	r1, r5
 8011654:	4650      	mov	r0, sl
 8011656:	f000 fba1 	bl	8011d9c <uxr_get_input_best_effort_stream>
 801165a:	2800      	cmp	r0, #0
 801165c:	f43f af74 	beq.w	8011548 <uxr_create_session+0x70>
 8011660:	4659      	mov	r1, fp
 8011662:	f006 f9a5 	bl	80179b0 <uxr_receive_best_effort_message>
 8011666:	2800      	cmp	r0, #0
 8011668:	f43f af6e 	beq.w	8011548 <uxr_create_session+0x70>
 801166c:	f88d 8020 	strb.w	r8, [sp, #32]
 8011670:	f88d 5021 	strb.w	r5, [sp, #33]	@ 0x21
 8011674:	f88d 7022 	strb.w	r7, [sp, #34]	@ 0x22
 8011678:	9a08      	ldr	r2, [sp, #32]
 801167a:	a918      	add	r1, sp, #96	@ 0x60
 801167c:	4620      	mov	r0, r4
 801167e:	f7ff fbb3 	bl	8010de8 <read_submessage_list>
 8011682:	e761      	b.n	8011548 <uxr_create_session+0x70>
 8011684:	f1b9 0901 	subs.w	r9, r9, #1
 8011688:	d002      	beq.n	8011690 <uxr_create_session+0x1b8>
 801168a:	2aff      	cmp	r2, #255	@ 0xff
 801168c:	f43f af4f 	beq.w	801152e <uxr_create_session+0x56>
 8011690:	b12a      	cbz	r2, 801169e <uxr_create_session+0x1c6>
 8011692:	2000      	movs	r0, #0
 8011694:	b029      	add	sp, #164	@ 0xa4
 8011696:	ecbd 8b02 	vpop	{d8}
 801169a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801169e:	4650      	mov	r0, sl
 80116a0:	f000 face 	bl	8011c40 <uxr_reset_stream_storage>
 80116a4:	2001      	movs	r0, #1
 80116a6:	b029      	add	sp, #164	@ 0xa4
 80116a8:	ecbd 8b02 	vpop	{d8}
 80116ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080116b0 <wait_session_status>:
 80116b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80116b4:	4604      	mov	r4, r0
 80116b6:	b09d      	sub	sp, #116	@ 0x74
 80116b8:	20ff      	movs	r0, #255	@ 0xff
 80116ba:	7160      	strb	r0, [r4, #5]
 80116bc:	9304      	str	r3, [sp, #16]
 80116be:	2b00      	cmp	r3, #0
 80116c0:	f000 80b8 	beq.w	8011834 <wait_session_status+0x184>
 80116c4:	2300      	movs	r3, #0
 80116c6:	468b      	mov	fp, r1
 80116c8:	4692      	mov	sl, r2
 80116ca:	9303      	str	r3, [sp, #12]
 80116cc:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 80116ce:	4652      	mov	r2, sl
 80116d0:	e9d3 0500 	ldrd	r0, r5, [r3]
 80116d4:	4659      	mov	r1, fp
 80116d6:	47a8      	blx	r5
 80116d8:	f000 fbd2 	bl	8011e80 <uxr_millis>
 80116dc:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80116e0:	4605      	mov	r5, r0
 80116e2:	e009      	b.n	80116f8 <wait_session_status+0x48>
 80116e4:	f000 fbcc 	bl	8011e80 <uxr_millis>
 80116e8:	1b40      	subs	r0, r0, r5
 80116ea:	f5c0 737a 	rsb	r3, r0, #1000	@ 0x3e8
 80116ee:	2b00      	cmp	r3, #0
 80116f0:	dd42      	ble.n	8011778 <wait_session_status+0xc8>
 80116f2:	7960      	ldrb	r0, [r4, #5]
 80116f4:	28ff      	cmp	r0, #255	@ 0xff
 80116f6:	d148      	bne.n	801178a <wait_session_status+0xda>
 80116f8:	6f22      	ldr	r2, [r4, #112]	@ 0x70
 80116fa:	a908      	add	r1, sp, #32
 80116fc:	6896      	ldr	r6, [r2, #8]
 80116fe:	6810      	ldr	r0, [r2, #0]
 8011700:	aa09      	add	r2, sp, #36	@ 0x24
 8011702:	47b0      	blx	r6
 8011704:	2800      	cmp	r0, #0
 8011706:	d0ed      	beq.n	80116e4 <wait_session_status+0x34>
 8011708:	e9dd 1208 	ldrd	r1, r2, [sp, #32]
 801170c:	a80c      	add	r0, sp, #48	@ 0x30
 801170e:	f7fe fe6d 	bl	80103ec <ucdr_init_buffer>
 8011712:	2600      	movs	r6, #0
 8011714:	f10d 031e 	add.w	r3, sp, #30
 8011718:	aa07      	add	r2, sp, #28
 801171a:	a90c      	add	r1, sp, #48	@ 0x30
 801171c:	4620      	mov	r0, r4
 801171e:	f88d 601c 	strb.w	r6, [sp, #28]
 8011722:	f000 f9b3 	bl	8011a8c <uxr_read_session_header>
 8011726:	2800      	cmp	r0, #0
 8011728:	d0dc      	beq.n	80116e4 <wait_session_status+0x34>
 801172a:	4631      	mov	r1, r6
 801172c:	f89d 001c 	ldrb.w	r0, [sp, #28]
 8011730:	f000 fa50 	bl	8011bd4 <uxr_stream_id_from_raw>
 8011734:	f3c0 4707 	ubfx	r7, r0, #16, #8
 8011738:	f8bd 301e 	ldrh.w	r3, [sp, #30]
 801173c:	9302      	str	r3, [sp, #8]
 801173e:	2f01      	cmp	r7, #1
 8011740:	e9cd 000a 	strd	r0, r0, [sp, #40]	@ 0x28
 8011744:	fa5f f880 	uxtb.w	r8, r0
 8011748:	f3c0 2607 	ubfx	r6, r0, #8, #8
 801174c:	d058      	beq.n	8011800 <wait_session_status+0x150>
 801174e:	2f02      	cmp	r7, #2
 8011750:	d021      	beq.n	8011796 <wait_session_status+0xe6>
 8011752:	2f00      	cmp	r7, #0
 8011754:	d1c6      	bne.n	80116e4 <wait_session_status+0x34>
 8011756:	4639      	mov	r1, r7
 8011758:	4638      	mov	r0, r7
 801175a:	f000 fa3b 	bl	8011bd4 <uxr_stream_id_from_raw>
 801175e:	a90c      	add	r1, sp, #48	@ 0x30
 8011760:	4602      	mov	r2, r0
 8011762:	4620      	mov	r0, r4
 8011764:	920b      	str	r2, [sp, #44]	@ 0x2c
 8011766:	f7ff fb3f 	bl	8010de8 <read_submessage_list>
 801176a:	f000 fb89 	bl	8011e80 <uxr_millis>
 801176e:	1b40      	subs	r0, r0, r5
 8011770:	f5c0 737a 	rsb	r3, r0, #1000	@ 0x3e8
 8011774:	2b00      	cmp	r3, #0
 8011776:	dcbc      	bgt.n	80116f2 <wait_session_status+0x42>
 8011778:	9b03      	ldr	r3, [sp, #12]
 801177a:	9a04      	ldr	r2, [sp, #16]
 801177c:	7960      	ldrb	r0, [r4, #5]
 801177e:	3301      	adds	r3, #1
 8011780:	429a      	cmp	r2, r3
 8011782:	9303      	str	r3, [sp, #12]
 8011784:	d001      	beq.n	801178a <wait_session_status+0xda>
 8011786:	28ff      	cmp	r0, #255	@ 0xff
 8011788:	d0a0      	beq.n	80116cc <wait_session_status+0x1c>
 801178a:	38ff      	subs	r0, #255	@ 0xff
 801178c:	bf18      	it	ne
 801178e:	2001      	movne	r0, #1
 8011790:	b01d      	add	sp, #116	@ 0x74
 8011792:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011796:	4631      	mov	r1, r6
 8011798:	f104 0008 	add.w	r0, r4, #8
 801179c:	f000 fb08 	bl	8011db0 <uxr_get_input_reliable_stream>
 80117a0:	4681      	mov	r9, r0
 80117a2:	b338      	cbz	r0, 80117f4 <wait_session_status+0x144>
 80117a4:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80117a6:	9205      	str	r2, [sp, #20]
 80117a8:	a80c      	add	r0, sp, #48	@ 0x30
 80117aa:	f7fe fe4f 	bl	801044c <ucdr_buffer_remaining>
 80117ae:	4603      	mov	r3, r0
 80117b0:	f10d 001d 	add.w	r0, sp, #29
 80117b4:	9000      	str	r0, [sp, #0]
 80117b6:	9a05      	ldr	r2, [sp, #20]
 80117b8:	9902      	ldr	r1, [sp, #8]
 80117ba:	4648      	mov	r0, r9
 80117bc:	f006 f97c 	bl	8017ab8 <uxr_receive_reliable_message>
 80117c0:	b1c0      	cbz	r0, 80117f4 <wait_session_status+0x144>
 80117c2:	f89d 301d 	ldrb.w	r3, [sp, #29]
 80117c6:	b95b      	cbnz	r3, 80117e0 <wait_session_status+0x130>
 80117c8:	e03c      	b.n	8011844 <wait_session_status+0x194>
 80117ca:	f04f 0302 	mov.w	r3, #2
 80117ce:	f88d 802c 	strb.w	r8, [sp, #44]	@ 0x2c
 80117d2:	f88d 602d 	strb.w	r6, [sp, #45]	@ 0x2d
 80117d6:	f88d 302e 	strb.w	r3, [sp, #46]	@ 0x2e
 80117da:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 80117dc:	f7ff fb04 	bl	8010de8 <read_submessage_list>
 80117e0:	a914      	add	r1, sp, #80	@ 0x50
 80117e2:	2204      	movs	r2, #4
 80117e4:	4648      	mov	r0, r9
 80117e6:	f006 f9e7 	bl	8017bb8 <uxr_next_input_reliable_buffer_available>
 80117ea:	4603      	mov	r3, r0
 80117ec:	a914      	add	r1, sp, #80	@ 0x50
 80117ee:	4620      	mov	r0, r4
 80117f0:	2b00      	cmp	r3, #0
 80117f2:	d1ea      	bne.n	80117ca <wait_session_status+0x11a>
 80117f4:	4632      	mov	r2, r6
 80117f6:	4641      	mov	r1, r8
 80117f8:	4620      	mov	r0, r4
 80117fa:	f7ff f973 	bl	8010ae4 <write_submessage_acknack.isra.0>
 80117fe:	e771      	b.n	80116e4 <wait_session_status+0x34>
 8011800:	4631      	mov	r1, r6
 8011802:	f104 0008 	add.w	r0, r4, #8
 8011806:	f000 fac9 	bl	8011d9c <uxr_get_input_best_effort_stream>
 801180a:	2800      	cmp	r0, #0
 801180c:	f43f af6a 	beq.w	80116e4 <wait_session_status+0x34>
 8011810:	9902      	ldr	r1, [sp, #8]
 8011812:	f006 f8cd 	bl	80179b0 <uxr_receive_best_effort_message>
 8011816:	2800      	cmp	r0, #0
 8011818:	f43f af64 	beq.w	80116e4 <wait_session_status+0x34>
 801181c:	f88d 802c 	strb.w	r8, [sp, #44]	@ 0x2c
 8011820:	f88d 602d 	strb.w	r6, [sp, #45]	@ 0x2d
 8011824:	f88d 702e 	strb.w	r7, [sp, #46]	@ 0x2e
 8011828:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 801182a:	a90c      	add	r1, sp, #48	@ 0x30
 801182c:	4620      	mov	r0, r4
 801182e:	f7ff fadb 	bl	8010de8 <read_submessage_list>
 8011832:	e757      	b.n	80116e4 <wait_session_status+0x34>
 8011834:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 8011836:	e9d3 0400 	ldrd	r0, r4, [r3]
 801183a:	47a0      	blx	r4
 801183c:	2001      	movs	r0, #1
 801183e:	b01d      	add	sp, #116	@ 0x74
 8011840:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011844:	f88d 802c 	strb.w	r8, [sp, #44]	@ 0x2c
 8011848:	f88d 602d 	strb.w	r6, [sp, #45]	@ 0x2d
 801184c:	f88d 702e 	strb.w	r7, [sp, #46]	@ 0x2e
 8011850:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8011852:	a90c      	add	r1, sp, #48	@ 0x30
 8011854:	4620      	mov	r0, r4
 8011856:	f7ff fac7 	bl	8010de8 <read_submessage_list>
 801185a:	e7c1      	b.n	80117e0 <wait_session_status+0x130>

0801185c <uxr_delete_session_retries>:
 801185c:	b530      	push	{r4, r5, lr}
 801185e:	b08f      	sub	sp, #60	@ 0x3c
 8011860:	4604      	mov	r4, r0
 8011862:	460d      	mov	r5, r1
 8011864:	f000 f954 	bl	8011b10 <uxr_session_header_offset>
 8011868:	2300      	movs	r3, #0
 801186a:	2210      	movs	r2, #16
 801186c:	9000      	str	r0, [sp, #0]
 801186e:	a902      	add	r1, sp, #8
 8011870:	a806      	add	r0, sp, #24
 8011872:	f7fe fda9 	bl	80103c8 <ucdr_init_buffer_origin_offset>
 8011876:	a906      	add	r1, sp, #24
 8011878:	4620      	mov	r0, r4
 801187a:	f000 f897 	bl	80119ac <uxr_buffer_delete_session>
 801187e:	2200      	movs	r2, #0
 8011880:	4611      	mov	r1, r2
 8011882:	9b06      	ldr	r3, [sp, #24]
 8011884:	4620      	mov	r0, r4
 8011886:	f000 f8eb 	bl	8011a60 <uxr_stamp_session_header>
 801188a:	a806      	add	r0, sp, #24
 801188c:	f7fe fdda 	bl	8010444 <ucdr_buffer_length>
 8011890:	462b      	mov	r3, r5
 8011892:	4602      	mov	r2, r0
 8011894:	a902      	add	r1, sp, #8
 8011896:	4620      	mov	r0, r4
 8011898:	f7ff ff0a 	bl	80116b0 <wait_session_status>
 801189c:	b118      	cbz	r0, 80118a6 <uxr_delete_session_retries+0x4a>
 801189e:	7960      	ldrb	r0, [r4, #5]
 80118a0:	fab0 f080 	clz	r0, r0
 80118a4:	0940      	lsrs	r0, r0, #5
 80118a6:	b00f      	add	sp, #60	@ 0x3c
 80118a8:	bd30      	pop	{r4, r5, pc}
 80118aa:	bf00      	nop

080118ac <uxr_prepare_stream_to_write_submessage>:
 80118ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80118b0:	b082      	sub	sp, #8
 80118b2:	4682      	mov	sl, r0
 80118b4:	4610      	mov	r0, r2
 80118b6:	4615      	mov	r5, r2
 80118b8:	461e      	mov	r6, r3
 80118ba:	f89d 7028 	ldrb.w	r7, [sp, #40]	@ 0x28
 80118be:	f89d 802c 	ldrb.w	r8, [sp, #44]	@ 0x2c
 80118c2:	9101      	str	r1, [sp, #4]
 80118c4:	f3c1 2407 	ubfx	r4, r1, #8, #8
 80118c8:	f000 fad4 	bl	8011e74 <uxr_submessage_padding>
 80118cc:	f89d 3006 	ldrb.w	r3, [sp, #6]
 80118d0:	f105 0904 	add.w	r9, r5, #4
 80118d4:	2b01      	cmp	r3, #1
 80118d6:	4481      	add	r9, r0
 80118d8:	d01d      	beq.n	8011916 <uxr_prepare_stream_to_write_submessage+0x6a>
 80118da:	2b02      	cmp	r3, #2
 80118dc:	d116      	bne.n	801190c <uxr_prepare_stream_to_write_submessage+0x60>
 80118de:	4621      	mov	r1, r4
 80118e0:	f10a 0008 	add.w	r0, sl, #8
 80118e4:	f000 fa4e 	bl	8011d84 <uxr_get_output_reliable_stream>
 80118e8:	4604      	mov	r4, r0
 80118ea:	b158      	cbz	r0, 8011904 <uxr_prepare_stream_to_write_submessage+0x58>
 80118ec:	4649      	mov	r1, r9
 80118ee:	4632      	mov	r2, r6
 80118f0:	f006 fb18 	bl	8017f24 <uxr_prepare_reliable_buffer_to_write>
 80118f4:	4604      	mov	r4, r0
 80118f6:	b12c      	cbz	r4, 8011904 <uxr_prepare_stream_to_write_submessage+0x58>
 80118f8:	4643      	mov	r3, r8
 80118fa:	b2aa      	uxth	r2, r5
 80118fc:	4639      	mov	r1, r7
 80118fe:	4630      	mov	r0, r6
 8011900:	f000 fa78 	bl	8011df4 <uxr_buffer_submessage_header>
 8011904:	4620      	mov	r0, r4
 8011906:	b002      	add	sp, #8
 8011908:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801190c:	2400      	movs	r4, #0
 801190e:	4620      	mov	r0, r4
 8011910:	b002      	add	sp, #8
 8011912:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011916:	4621      	mov	r1, r4
 8011918:	f10a 0008 	add.w	r0, sl, #8
 801191c:	f000 fa2a 	bl	8011d74 <uxr_get_output_best_effort_stream>
 8011920:	4604      	mov	r4, r0
 8011922:	2800      	cmp	r0, #0
 8011924:	d0ee      	beq.n	8011904 <uxr_prepare_stream_to_write_submessage+0x58>
 8011926:	4649      	mov	r1, r9
 8011928:	4632      	mov	r2, r6
 801192a:	f006 fa37 	bl	8017d9c <uxr_prepare_best_effort_buffer_to_write>
 801192e:	4604      	mov	r4, r0
 8011930:	e7e1      	b.n	80118f6 <uxr_prepare_stream_to_write_submessage+0x4a>
 8011932:	bf00      	nop

08011934 <uxr_init_session_info>:
 8011934:	b470      	push	{r4, r5, r6}
 8011936:	7102      	strb	r2, [r0, #4]
 8011938:	0e16      	lsrs	r6, r2, #24
 801193a:	f3c2 4507 	ubfx	r5, r2, #16, #8
 801193e:	f3c2 2407 	ubfx	r4, r2, #8, #8
 8011942:	23ff      	movs	r3, #255	@ 0xff
 8011944:	2209      	movs	r2, #9
 8011946:	7046      	strb	r6, [r0, #1]
 8011948:	7085      	strb	r5, [r0, #2]
 801194a:	70c4      	strb	r4, [r0, #3]
 801194c:	7001      	strb	r1, [r0, #0]
 801194e:	bc70      	pop	{r4, r5, r6}
 8011950:	80c2      	strh	r2, [r0, #6]
 8011952:	7143      	strb	r3, [r0, #5]
 8011954:	4770      	bx	lr
 8011956:	bf00      	nop

08011958 <uxr_buffer_create_session>:
 8011958:	b570      	push	{r4, r5, r6, lr}
 801195a:	b088      	sub	sp, #32
 801195c:	2300      	movs	r3, #0
 801195e:	4d12      	ldr	r5, [pc, #72]	@ (80119a8 <uxr_buffer_create_session+0x50>)
 8011960:	9307      	str	r3, [sp, #28]
 8011962:	f8ad 201c 	strh.w	r2, [sp, #28]
 8011966:	7802      	ldrb	r2, [r0, #0]
 8011968:	9303      	str	r3, [sp, #12]
 801196a:	460c      	mov	r4, r1
 801196c:	f88d 200c 	strb.w	r2, [sp, #12]
 8011970:	2101      	movs	r1, #1
 8011972:	682a      	ldr	r2, [r5, #0]
 8011974:	f8d0 6001 	ldr.w	r6, [r0, #1]
 8011978:	88ad      	ldrh	r5, [r5, #4]
 801197a:	80c1      	strh	r1, [r0, #6]
 801197c:	f8ad 1004 	strh.w	r1, [sp, #4]
 8011980:	9200      	str	r2, [sp, #0]
 8011982:	4619      	mov	r1, r3
 8011984:	2210      	movs	r2, #16
 8011986:	4620      	mov	r0, r4
 8011988:	e9cd 3304 	strd	r3, r3, [sp, #16]
 801198c:	9306      	str	r3, [sp, #24]
 801198e:	f88d 300d 	strb.w	r3, [sp, #13]
 8011992:	9602      	str	r6, [sp, #8]
 8011994:	f8ad 5006 	strh.w	r5, [sp, #6]
 8011998:	f000 fa2c 	bl	8011df4 <uxr_buffer_submessage_header>
 801199c:	4620      	mov	r0, r4
 801199e:	4669      	mov	r1, sp
 80119a0:	f001 fa50 	bl	8012e44 <uxr_serialize_CREATE_CLIENT_Payload>
 80119a4:	b008      	add	sp, #32
 80119a6:	bd70      	pop	{r4, r5, r6, pc}
 80119a8:	0801ad24 	.word	0x0801ad24

080119ac <uxr_buffer_delete_session>:
 80119ac:	b530      	push	{r4, r5, lr}
 80119ae:	4b0c      	ldr	r3, [pc, #48]	@ (80119e0 <uxr_buffer_delete_session+0x34>)
 80119b0:	b083      	sub	sp, #12
 80119b2:	891b      	ldrh	r3, [r3, #8]
 80119b4:	f8ad 3006 	strh.w	r3, [sp, #6]
 80119b8:	2202      	movs	r2, #2
 80119ba:	460c      	mov	r4, r1
 80119bc:	80c2      	strh	r2, [r0, #6]
 80119be:	2300      	movs	r3, #0
 80119c0:	2204      	movs	r2, #4
 80119c2:	4608      	mov	r0, r1
 80119c4:	f44f 7500 	mov.w	r5, #512	@ 0x200
 80119c8:	2103      	movs	r1, #3
 80119ca:	f8ad 5004 	strh.w	r5, [sp, #4]
 80119ce:	f000 fa11 	bl	8011df4 <uxr_buffer_submessage_header>
 80119d2:	4620      	mov	r0, r4
 80119d4:	a901      	add	r1, sp, #4
 80119d6:	f001 fae3 	bl	8012fa0 <uxr_serialize_DELETE_Payload>
 80119da:	b003      	add	sp, #12
 80119dc:	bd30      	pop	{r4, r5, pc}
 80119de:	bf00      	nop
 80119e0:	0801ad24 	.word	0x0801ad24

080119e4 <uxr_read_create_session_status>:
 80119e4:	b510      	push	{r4, lr}
 80119e6:	b088      	sub	sp, #32
 80119e8:	4604      	mov	r4, r0
 80119ea:	4608      	mov	r0, r1
 80119ec:	a901      	add	r1, sp, #4
 80119ee:	f001 fae7 	bl	8012fc0 <uxr_deserialize_STATUS_AGENT_Payload>
 80119f2:	f89d 3004 	ldrb.w	r3, [sp, #4]
 80119f6:	7163      	strb	r3, [r4, #5]
 80119f8:	b008      	add	sp, #32
 80119fa:	bd10      	pop	{r4, pc}

080119fc <uxr_read_delete_session_status>:
 80119fc:	b510      	push	{r4, lr}
 80119fe:	4604      	mov	r4, r0
 8011a00:	b084      	sub	sp, #16
 8011a02:	4608      	mov	r0, r1
 8011a04:	a902      	add	r1, sp, #8
 8011a06:	f001 fb0b 	bl	8013020 <uxr_deserialize_STATUS_Payload>
 8011a0a:	88e3      	ldrh	r3, [r4, #6]
 8011a0c:	2b02      	cmp	r3, #2
 8011a0e:	d001      	beq.n	8011a14 <uxr_read_delete_session_status+0x18>
 8011a10:	b004      	add	sp, #16
 8011a12:	bd10      	pop	{r4, pc}
 8011a14:	f10d 000a 	add.w	r0, sp, #10
 8011a18:	f7fe ffec 	bl	80109f4 <uxr_object_id_from_raw>
 8011a1c:	f89d 2008 	ldrb.w	r2, [sp, #8]
 8011a20:	f89d 3009 	ldrb.w	r3, [sp, #9]
 8011a24:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8011a28:	b29b      	uxth	r3, r3
 8011a2a:	2b02      	cmp	r3, #2
 8011a2c:	bf04      	itt	eq
 8011a2e:	f89d 300c 	ldrbeq.w	r3, [sp, #12]
 8011a32:	7163      	strbeq	r3, [r4, #5]
 8011a34:	b004      	add	sp, #16
 8011a36:	bd10      	pop	{r4, pc}

08011a38 <uxr_stamp_create_session_header>:
 8011a38:	b510      	push	{r4, lr}
 8011a3a:	4604      	mov	r4, r0
 8011a3c:	b08a      	sub	sp, #40	@ 0x28
 8011a3e:	a802      	add	r0, sp, #8
 8011a40:	2208      	movs	r2, #8
 8011a42:	f7fe fcd3 	bl	80103ec <ucdr_init_buffer>
 8011a46:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011a4a:	9400      	str	r4, [sp, #0]
 8011a4c:	2300      	movs	r3, #0
 8011a4e:	a802      	add	r0, sp, #8
 8011a50:	f001 0180 	and.w	r1, r1, #128	@ 0x80
 8011a54:	461a      	mov	r2, r3
 8011a56:	f000 fbcb 	bl	80121f0 <uxr_serialize_message_header>
 8011a5a:	b00a      	add	sp, #40	@ 0x28
 8011a5c:	bd10      	pop	{r4, pc}
 8011a5e:	bf00      	nop

08011a60 <uxr_stamp_session_header>:
 8011a60:	b570      	push	{r4, r5, r6, lr}
 8011a62:	4604      	mov	r4, r0
 8011a64:	b08c      	sub	sp, #48	@ 0x30
 8011a66:	460d      	mov	r5, r1
 8011a68:	4616      	mov	r6, r2
 8011a6a:	4619      	mov	r1, r3
 8011a6c:	a804      	add	r0, sp, #16
 8011a6e:	2208      	movs	r2, #8
 8011a70:	9603      	str	r6, [sp, #12]
 8011a72:	f7fe fcbb 	bl	80103ec <ucdr_init_buffer>
 8011a76:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011a7a:	9b03      	ldr	r3, [sp, #12]
 8011a7c:	9400      	str	r4, [sp, #0]
 8011a7e:	462a      	mov	r2, r5
 8011a80:	a804      	add	r0, sp, #16
 8011a82:	f000 fbb5 	bl	80121f0 <uxr_serialize_message_header>
 8011a86:	b00c      	add	sp, #48	@ 0x30
 8011a88:	bd70      	pop	{r4, r5, r6, pc}
 8011a8a:	bf00      	nop

08011a8c <uxr_read_session_header>:
 8011a8c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011a90:	4607      	mov	r7, r0
 8011a92:	b084      	sub	sp, #16
 8011a94:	4608      	mov	r0, r1
 8011a96:	460c      	mov	r4, r1
 8011a98:	4615      	mov	r5, r2
 8011a9a:	461e      	mov	r6, r3
 8011a9c:	f7fe fcd6 	bl	801044c <ucdr_buffer_remaining>
 8011aa0:	2808      	cmp	r0, #8
 8011aa2:	d803      	bhi.n	8011aac <uxr_read_session_header+0x20>
 8011aa4:	2000      	movs	r0, #0
 8011aa6:	b004      	add	sp, #16
 8011aa8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011aac:	f10d 080c 	add.w	r8, sp, #12
 8011ab0:	4633      	mov	r3, r6
 8011ab2:	462a      	mov	r2, r5
 8011ab4:	4620      	mov	r0, r4
 8011ab6:	f8cd 8000 	str.w	r8, [sp]
 8011aba:	f10d 010b 	add.w	r1, sp, #11
 8011abe:	f000 fbb5 	bl	801222c <uxr_deserialize_message_header>
 8011ac2:	783a      	ldrb	r2, [r7, #0]
 8011ac4:	f89d 300b 	ldrb.w	r3, [sp, #11]
 8011ac8:	4293      	cmp	r3, r2
 8011aca:	d1eb      	bne.n	8011aa4 <uxr_read_session_header+0x18>
 8011acc:	061b      	lsls	r3, r3, #24
 8011ace:	d41c      	bmi.n	8011b0a <uxr_read_session_header+0x7e>
 8011ad0:	f898 2000 	ldrb.w	r2, [r8]
 8011ad4:	787b      	ldrb	r3, [r7, #1]
 8011ad6:	429a      	cmp	r2, r3
 8011ad8:	d003      	beq.n	8011ae2 <uxr_read_session_header+0x56>
 8011ada:	2001      	movs	r0, #1
 8011adc:	f080 0001 	eor.w	r0, r0, #1
 8011ae0:	e7e1      	b.n	8011aa6 <uxr_read_session_header+0x1a>
 8011ae2:	f89d 200d 	ldrb.w	r2, [sp, #13]
 8011ae6:	78bb      	ldrb	r3, [r7, #2]
 8011ae8:	429a      	cmp	r2, r3
 8011aea:	f107 0102 	add.w	r1, r7, #2
 8011aee:	d1f4      	bne.n	8011ada <uxr_read_session_header+0x4e>
 8011af0:	f89d 200e 	ldrb.w	r2, [sp, #14]
 8011af4:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8011af8:	429a      	cmp	r2, r3
 8011afa:	d1ee      	bne.n	8011ada <uxr_read_session_header+0x4e>
 8011afc:	784b      	ldrb	r3, [r1, #1]
 8011afe:	f89d 200f 	ldrb.w	r2, [sp, #15]
 8011b02:	429a      	cmp	r2, r3
 8011b04:	d1e9      	bne.n	8011ada <uxr_read_session_header+0x4e>
 8011b06:	2000      	movs	r0, #0
 8011b08:	e7e8      	b.n	8011adc <uxr_read_session_header+0x50>
 8011b0a:	2001      	movs	r0, #1
 8011b0c:	e7cb      	b.n	8011aa6 <uxr_read_session_header+0x1a>
 8011b0e:	bf00      	nop

08011b10 <uxr_session_header_offset>:
 8011b10:	f990 3000 	ldrsb.w	r3, [r0]
 8011b14:	2b00      	cmp	r3, #0
 8011b16:	bfac      	ite	ge
 8011b18:	2008      	movge	r0, #8
 8011b1a:	2004      	movlt	r0, #4
 8011b1c:	4770      	bx	lr
 8011b1e:	bf00      	nop

08011b20 <uxr_init_base_object_request>:
 8011b20:	b530      	push	{r4, r5, lr}
 8011b22:	88c3      	ldrh	r3, [r0, #6]
 8011b24:	b083      	sub	sp, #12
 8011b26:	f64f 74f4 	movw	r4, #65524	@ 0xfff4
 8011b2a:	9101      	str	r1, [sp, #4]
 8011b2c:	f1a3 010a 	sub.w	r1, r3, #10
 8011b30:	b289      	uxth	r1, r1
 8011b32:	42a1      	cmp	r1, r4
 8011b34:	d80e      	bhi.n	8011b54 <uxr_init_base_object_request+0x34>
 8011b36:	3301      	adds	r3, #1
 8011b38:	b29c      	uxth	r4, r3
 8011b3a:	f3c3 2507 	ubfx	r5, r3, #8, #8
 8011b3e:	b2db      	uxtb	r3, r3
 8011b40:	80c4      	strh	r4, [r0, #6]
 8011b42:	1c91      	adds	r1, r2, #2
 8011b44:	9801      	ldr	r0, [sp, #4]
 8011b46:	7015      	strb	r5, [r2, #0]
 8011b48:	7053      	strb	r3, [r2, #1]
 8011b4a:	f7fe ff67 	bl	8010a1c <uxr_object_id_to_raw>
 8011b4e:	4620      	mov	r0, r4
 8011b50:	b003      	add	sp, #12
 8011b52:	bd30      	pop	{r4, r5, pc}
 8011b54:	230a      	movs	r3, #10
 8011b56:	461c      	mov	r4, r3
 8011b58:	2500      	movs	r5, #0
 8011b5a:	e7f1      	b.n	8011b40 <uxr_init_base_object_request+0x20>

08011b5c <uxr_parse_base_object_request>:
 8011b5c:	b570      	push	{r4, r5, r6, lr}
 8011b5e:	4604      	mov	r4, r0
 8011b60:	3002      	adds	r0, #2
 8011b62:	460d      	mov	r5, r1
 8011b64:	4616      	mov	r6, r2
 8011b66:	f7fe ff45 	bl	80109f4 <uxr_object_id_from_raw>
 8011b6a:	f3c0 430f 	ubfx	r3, r0, #16, #16
 8011b6e:	8028      	strh	r0, [r5, #0]
 8011b70:	806b      	strh	r3, [r5, #2]
 8011b72:	7822      	ldrb	r2, [r4, #0]
 8011b74:	7863      	ldrb	r3, [r4, #1]
 8011b76:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8011b7a:	8033      	strh	r3, [r6, #0]
 8011b7c:	bd70      	pop	{r4, r5, r6, pc}
 8011b7e:	bf00      	nop

08011b80 <uxr_stream_id>:
 8011b80:	b410      	push	{r4}
 8011b82:	2901      	cmp	r1, #1
 8011b84:	b083      	sub	sp, #12
 8011b86:	d01f      	beq.n	8011bc8 <uxr_stream_id+0x48>
 8011b88:	2902      	cmp	r1, #2
 8011b8a:	f04f 0400 	mov.w	r4, #0
 8011b8e:	d01e      	beq.n	8011bce <uxr_stream_id+0x4e>
 8011b90:	2300      	movs	r3, #0
 8011b92:	f364 0307 	bfi	r3, r4, #0, #8
 8011b96:	f360 230f 	bfi	r3, r0, #8, #8
 8011b9a:	f361 4317 	bfi	r3, r1, #16, #8
 8011b9e:	f362 631f 	bfi	r3, r2, #24, #8
 8011ba2:	b2da      	uxtb	r2, r3
 8011ba4:	2000      	movs	r0, #0
 8011ba6:	f362 0007 	bfi	r0, r2, #0, #8
 8011baa:	f3c3 2207 	ubfx	r2, r3, #8, #8
 8011bae:	f362 200f 	bfi	r0, r2, #8, #8
 8011bb2:	f3c3 4207 	ubfx	r2, r3, #16, #8
 8011bb6:	f362 4017 	bfi	r0, r2, #16, #8
 8011bba:	0e1b      	lsrs	r3, r3, #24
 8011bbc:	f363 601f 	bfi	r0, r3, #24, #8
 8011bc0:	b003      	add	sp, #12
 8011bc2:	f85d 4b04 	ldr.w	r4, [sp], #4
 8011bc6:	4770      	bx	lr
 8011bc8:	1c44      	adds	r4, r0, #1
 8011bca:	b2e4      	uxtb	r4, r4
 8011bcc:	e7e0      	b.n	8011b90 <uxr_stream_id+0x10>
 8011bce:	f080 0480 	eor.w	r4, r0, #128	@ 0x80
 8011bd2:	e7dd      	b.n	8011b90 <uxr_stream_id+0x10>

08011bd4 <uxr_stream_id_from_raw>:
 8011bd4:	b410      	push	{r4}
 8011bd6:	b083      	sub	sp, #12
 8011bd8:	b128      	cbz	r0, 8011be6 <uxr_stream_id_from_raw+0x12>
 8011bda:	0603      	lsls	r3, r0, #24
 8011bdc:	d421      	bmi.n	8011c22 <uxr_stream_id_from_raw+0x4e>
 8011bde:	1e42      	subs	r2, r0, #1
 8011be0:	b2d2      	uxtb	r2, r2
 8011be2:	2401      	movs	r4, #1
 8011be4:	e001      	b.n	8011bea <uxr_stream_id_from_raw+0x16>
 8011be6:	4604      	mov	r4, r0
 8011be8:	4602      	mov	r2, r0
 8011bea:	2300      	movs	r3, #0
 8011bec:	f360 0307 	bfi	r3, r0, #0, #8
 8011bf0:	f362 230f 	bfi	r3, r2, #8, #8
 8011bf4:	f364 4317 	bfi	r3, r4, #16, #8
 8011bf8:	f361 631f 	bfi	r3, r1, #24, #8
 8011bfc:	b2da      	uxtb	r2, r3
 8011bfe:	2000      	movs	r0, #0
 8011c00:	f362 0007 	bfi	r0, r2, #0, #8
 8011c04:	f3c3 2207 	ubfx	r2, r3, #8, #8
 8011c08:	f362 200f 	bfi	r0, r2, #8, #8
 8011c0c:	f3c3 4207 	ubfx	r2, r3, #16, #8
 8011c10:	f362 4017 	bfi	r0, r2, #16, #8
 8011c14:	0e1b      	lsrs	r3, r3, #24
 8011c16:	f363 601f 	bfi	r0, r3, #24, #8
 8011c1a:	b003      	add	sp, #12
 8011c1c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8011c20:	4770      	bx	lr
 8011c22:	f080 0280 	eor.w	r2, r0, #128	@ 0x80
 8011c26:	2402      	movs	r4, #2
 8011c28:	e7df      	b.n	8011bea <uxr_stream_id_from_raw+0x16>
 8011c2a:	bf00      	nop

08011c2c <uxr_init_stream_storage>:
 8011c2c:	2300      	movs	r3, #0
 8011c2e:	7403      	strb	r3, [r0, #16]
 8011c30:	f880 3040 	strb.w	r3, [r0, #64]	@ 0x40
 8011c34:	f880 3044 	strb.w	r3, [r0, #68]	@ 0x44
 8011c38:	f880 3060 	strb.w	r3, [r0, #96]	@ 0x60
 8011c3c:	4770      	bx	lr
 8011c3e:	bf00      	nop

08011c40 <uxr_reset_stream_storage>:
 8011c40:	b570      	push	{r4, r5, r6, lr}
 8011c42:	7c03      	ldrb	r3, [r0, #16]
 8011c44:	4604      	mov	r4, r0
 8011c46:	b153      	cbz	r3, 8011c5e <uxr_reset_stream_storage+0x1e>
 8011c48:	4606      	mov	r6, r0
 8011c4a:	2500      	movs	r5, #0
 8011c4c:	4630      	mov	r0, r6
 8011c4e:	f006 f89f 	bl	8017d90 <uxr_reset_output_best_effort_stream>
 8011c52:	7c23      	ldrb	r3, [r4, #16]
 8011c54:	3501      	adds	r5, #1
 8011c56:	42ab      	cmp	r3, r5
 8011c58:	f106 0610 	add.w	r6, r6, #16
 8011c5c:	d8f6      	bhi.n	8011c4c <uxr_reset_stream_storage+0xc>
 8011c5e:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 8011c62:	b163      	cbz	r3, 8011c7e <uxr_reset_stream_storage+0x3e>
 8011c64:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8011c68:	2500      	movs	r5, #0
 8011c6a:	4630      	mov	r0, r6
 8011c6c:	f005 fe9c 	bl	80179a8 <uxr_reset_input_best_effort_stream>
 8011c70:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 8011c74:	3501      	adds	r5, #1
 8011c76:	42ab      	cmp	r3, r5
 8011c78:	f106 0602 	add.w	r6, r6, #2
 8011c7c:	d8f5      	bhi.n	8011c6a <uxr_reset_stream_storage+0x2a>
 8011c7e:	f894 3040 	ldrb.w	r3, [r4, #64]	@ 0x40
 8011c82:	b163      	cbz	r3, 8011c9e <uxr_reset_stream_storage+0x5e>
 8011c84:	f104 0618 	add.w	r6, r4, #24
 8011c88:	2500      	movs	r5, #0
 8011c8a:	4630      	mov	r0, r6
 8011c8c:	f006 f920 	bl	8017ed0 <uxr_reset_output_reliable_stream>
 8011c90:	f894 3040 	ldrb.w	r3, [r4, #64]	@ 0x40
 8011c94:	3501      	adds	r5, #1
 8011c96:	42ab      	cmp	r3, r5
 8011c98:	f106 0628 	add.w	r6, r6, #40	@ 0x28
 8011c9c:	d8f5      	bhi.n	8011c8a <uxr_reset_stream_storage+0x4a>
 8011c9e:	f894 3060 	ldrb.w	r3, [r4, #96]	@ 0x60
 8011ca2:	b163      	cbz	r3, 8011cbe <uxr_reset_stream_storage+0x7e>
 8011ca4:	f104 0648 	add.w	r6, r4, #72	@ 0x48
 8011ca8:	2500      	movs	r5, #0
 8011caa:	4630      	mov	r0, r6
 8011cac:	f005 fee4 	bl	8017a78 <uxr_reset_input_reliable_stream>
 8011cb0:	f894 3060 	ldrb.w	r3, [r4, #96]	@ 0x60
 8011cb4:	3501      	adds	r5, #1
 8011cb6:	42ab      	cmp	r3, r5
 8011cb8:	f106 0618 	add.w	r6, r6, #24
 8011cbc:	d8f5      	bhi.n	8011caa <uxr_reset_stream_storage+0x6a>
 8011cbe:	bd70      	pop	{r4, r5, r6, pc}

08011cc0 <uxr_add_output_best_effort_buffer>:
 8011cc0:	b530      	push	{r4, r5, lr}
 8011cc2:	7c04      	ldrb	r4, [r0, #16]
 8011cc4:	1c65      	adds	r5, r4, #1
 8011cc6:	b083      	sub	sp, #12
 8011cc8:	7405      	strb	r5, [r0, #16]
 8011cca:	eb00 1004 	add.w	r0, r0, r4, lsl #4
 8011cce:	f006 f853 	bl	8017d78 <uxr_init_output_best_effort_stream>
 8011cd2:	2201      	movs	r2, #1
 8011cd4:	4620      	mov	r0, r4
 8011cd6:	4611      	mov	r1, r2
 8011cd8:	b003      	add	sp, #12
 8011cda:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8011cde:	f7ff bf4f 	b.w	8011b80 <uxr_stream_id>
 8011ce2:	bf00      	nop

08011ce4 <uxr_add_output_reliable_buffer>:
 8011ce4:	b570      	push	{r4, r5, r6, lr}
 8011ce6:	b084      	sub	sp, #16
 8011ce8:	f890 4040 	ldrb.w	r4, [r0, #64]	@ 0x40
 8011cec:	f89d 6020 	ldrb.w	r6, [sp, #32]
 8011cf0:	9600      	str	r6, [sp, #0]
 8011cf2:	2528      	movs	r5, #40	@ 0x28
 8011cf4:	1c66      	adds	r6, r4, #1
 8011cf6:	fb05 0504 	mla	r5, r5, r4, r0
 8011cfa:	f880 6040 	strb.w	r6, [r0, #64]	@ 0x40
 8011cfe:	f105 0018 	add.w	r0, r5, #24
 8011d02:	f006 f8b3 	bl	8017e6c <uxr_init_output_reliable_stream>
 8011d06:	4620      	mov	r0, r4
 8011d08:	2201      	movs	r2, #1
 8011d0a:	2102      	movs	r1, #2
 8011d0c:	b004      	add	sp, #16
 8011d0e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8011d12:	f7ff bf35 	b.w	8011b80 <uxr_stream_id>
 8011d16:	bf00      	nop

08011d18 <uxr_add_input_best_effort_buffer>:
 8011d18:	b510      	push	{r4, lr}
 8011d1a:	f890 4044 	ldrb.w	r4, [r0, #68]	@ 0x44
 8011d1e:	1c62      	adds	r2, r4, #1
 8011d20:	f104 0321 	add.w	r3, r4, #33	@ 0x21
 8011d24:	b082      	sub	sp, #8
 8011d26:	f880 2044 	strb.w	r2, [r0, #68]	@ 0x44
 8011d2a:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 8011d2e:	f005 fe37 	bl	80179a0 <uxr_init_input_best_effort_stream>
 8011d32:	4620      	mov	r0, r4
 8011d34:	2200      	movs	r2, #0
 8011d36:	2101      	movs	r1, #1
 8011d38:	b002      	add	sp, #8
 8011d3a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011d3e:	f7ff bf1f 	b.w	8011b80 <uxr_stream_id>
 8011d42:	bf00      	nop

08011d44 <uxr_add_input_reliable_buffer>:
 8011d44:	b570      	push	{r4, r5, r6, lr}
 8011d46:	b084      	sub	sp, #16
 8011d48:	f890 4060 	ldrb.w	r4, [r0, #96]	@ 0x60
 8011d4c:	9e08      	ldr	r6, [sp, #32]
 8011d4e:	9600      	str	r6, [sp, #0]
 8011d50:	2518      	movs	r5, #24
 8011d52:	1c66      	adds	r6, r4, #1
 8011d54:	fb05 0504 	mla	r5, r5, r4, r0
 8011d58:	f880 6060 	strb.w	r6, [r0, #96]	@ 0x60
 8011d5c:	f105 0048 	add.w	r0, r5, #72	@ 0x48
 8011d60:	f005 fe66 	bl	8017a30 <uxr_init_input_reliable_stream>
 8011d64:	4620      	mov	r0, r4
 8011d66:	2200      	movs	r2, #0
 8011d68:	2102      	movs	r1, #2
 8011d6a:	b004      	add	sp, #16
 8011d6c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8011d70:	f7ff bf06 	b.w	8011b80 <uxr_stream_id>

08011d74 <uxr_get_output_best_effort_stream>:
 8011d74:	7c03      	ldrb	r3, [r0, #16]
 8011d76:	428b      	cmp	r3, r1
 8011d78:	bf8c      	ite	hi
 8011d7a:	eb00 1001 	addhi.w	r0, r0, r1, lsl #4
 8011d7e:	2000      	movls	r0, #0
 8011d80:	4770      	bx	lr
 8011d82:	bf00      	nop

08011d84 <uxr_get_output_reliable_stream>:
 8011d84:	f890 3040 	ldrb.w	r3, [r0, #64]	@ 0x40
 8011d88:	428b      	cmp	r3, r1
 8011d8a:	bf83      	ittte	hi
 8011d8c:	2328      	movhi	r3, #40	@ 0x28
 8011d8e:	fb03 0101 	mlahi	r1, r3, r1, r0
 8011d92:	f101 0018 	addhi.w	r0, r1, #24
 8011d96:	2000      	movls	r0, #0
 8011d98:	4770      	bx	lr
 8011d9a:	bf00      	nop

08011d9c <uxr_get_input_best_effort_stream>:
 8011d9c:	f890 3044 	ldrb.w	r3, [r0, #68]	@ 0x44
 8011da0:	428b      	cmp	r3, r1
 8011da2:	bf86      	itte	hi
 8011da4:	3121      	addhi	r1, #33	@ 0x21
 8011da6:	eb00 0041 	addhi.w	r0, r0, r1, lsl #1
 8011daa:	2000      	movls	r0, #0
 8011dac:	4770      	bx	lr
 8011dae:	bf00      	nop

08011db0 <uxr_get_input_reliable_stream>:
 8011db0:	f890 3060 	ldrb.w	r3, [r0, #96]	@ 0x60
 8011db4:	428b      	cmp	r3, r1
 8011db6:	bf83      	ittte	hi
 8011db8:	2318      	movhi	r3, #24
 8011dba:	fb03 0101 	mlahi	r1, r3, r1, r0
 8011dbe:	f101 0048 	addhi.w	r0, r1, #72	@ 0x48
 8011dc2:	2000      	movls	r0, #0
 8011dc4:	4770      	bx	lr
 8011dc6:	bf00      	nop

08011dc8 <uxr_output_streams_confirmed>:
 8011dc8:	f890 3040 	ldrb.w	r3, [r0, #64]	@ 0x40
 8011dcc:	b183      	cbz	r3, 8011df0 <uxr_output_streams_confirmed+0x28>
 8011dce:	b570      	push	{r4, r5, r6, lr}
 8011dd0:	4606      	mov	r6, r0
 8011dd2:	f100 0518 	add.w	r5, r0, #24
 8011dd6:	2400      	movs	r4, #0
 8011dd8:	e001      	b.n	8011dde <uxr_output_streams_confirmed+0x16>
 8011dda:	3528      	adds	r5, #40	@ 0x28
 8011ddc:	b138      	cbz	r0, 8011dee <uxr_output_streams_confirmed+0x26>
 8011dde:	4628      	mov	r0, r5
 8011de0:	f006 fae6 	bl	80183b0 <uxr_is_output_up_to_date>
 8011de4:	f896 3040 	ldrb.w	r3, [r6, #64]	@ 0x40
 8011de8:	3401      	adds	r4, #1
 8011dea:	42a3      	cmp	r3, r4
 8011dec:	d8f5      	bhi.n	8011dda <uxr_output_streams_confirmed+0x12>
 8011dee:	bd70      	pop	{r4, r5, r6, pc}
 8011df0:	2001      	movs	r0, #1
 8011df2:	4770      	bx	lr

08011df4 <uxr_buffer_submessage_header>:
 8011df4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011df6:	4604      	mov	r4, r0
 8011df8:	460e      	mov	r6, r1
 8011dfa:	2104      	movs	r1, #4
 8011dfc:	4615      	mov	r5, r2
 8011dfe:	461f      	mov	r7, r3
 8011e00:	f7fe fb0e 	bl	8010420 <ucdr_align_to>
 8011e04:	2301      	movs	r3, #1
 8011e06:	ea47 0203 	orr.w	r2, r7, r3
 8011e0a:	4631      	mov	r1, r6
 8011e0c:	7523      	strb	r3, [r4, #20]
 8011e0e:	4620      	mov	r0, r4
 8011e10:	462b      	mov	r3, r5
 8011e12:	f000 fa2b 	bl	801226c <uxr_serialize_submessage_header>
 8011e16:	4620      	mov	r0, r4
 8011e18:	f7fe fb18 	bl	801044c <ucdr_buffer_remaining>
 8011e1c:	42a8      	cmp	r0, r5
 8011e1e:	bf34      	ite	cc
 8011e20:	2000      	movcc	r0, #0
 8011e22:	2001      	movcs	r0, #1
 8011e24:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011e26:	bf00      	nop

08011e28 <uxr_read_submessage_header>:
 8011e28:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011e2c:	4604      	mov	r4, r0
 8011e2e:	460d      	mov	r5, r1
 8011e30:	2104      	movs	r1, #4
 8011e32:	4616      	mov	r6, r2
 8011e34:	4698      	mov	r8, r3
 8011e36:	f7fe faf3 	bl	8010420 <ucdr_align_to>
 8011e3a:	4620      	mov	r0, r4
 8011e3c:	f7fe fb06 	bl	801044c <ucdr_buffer_remaining>
 8011e40:	2803      	cmp	r0, #3
 8011e42:	bf8c      	ite	hi
 8011e44:	2701      	movhi	r7, #1
 8011e46:	2700      	movls	r7, #0
 8011e48:	d802      	bhi.n	8011e50 <uxr_read_submessage_header+0x28>
 8011e4a:	4638      	mov	r0, r7
 8011e4c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011e50:	4633      	mov	r3, r6
 8011e52:	4642      	mov	r2, r8
 8011e54:	4620      	mov	r0, r4
 8011e56:	4629      	mov	r1, r5
 8011e58:	f000 fa1c 	bl	8012294 <uxr_deserialize_submessage_header>
 8011e5c:	f898 3000 	ldrb.w	r3, [r8]
 8011e60:	f003 02fe 	and.w	r2, r3, #254	@ 0xfe
 8011e64:	f003 0301 	and.w	r3, r3, #1
 8011e68:	f888 2000 	strb.w	r2, [r8]
 8011e6c:	7523      	strb	r3, [r4, #20]
 8011e6e:	4638      	mov	r0, r7
 8011e70:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08011e74 <uxr_submessage_padding>:
 8011e74:	f010 0003 	ands.w	r0, r0, #3
 8011e78:	bf18      	it	ne
 8011e7a:	f1c0 0004 	rsbne	r0, r0, #4
 8011e7e:	4770      	bx	lr

08011e80 <uxr_millis>:
 8011e80:	b510      	push	{r4, lr}
 8011e82:	b084      	sub	sp, #16
 8011e84:	4669      	mov	r1, sp
 8011e86:	2001      	movs	r0, #1
 8011e88:	f7f0 fb2a 	bl	80024e0 <clock_gettime>
 8011e8c:	e9dd 2400 	ldrd	r2, r4, [sp]
 8011e90:	4907      	ldr	r1, [pc, #28]	@ (8011eb0 <uxr_millis+0x30>)
 8011e92:	9802      	ldr	r0, [sp, #8]
 8011e94:	fba2 2301 	umull	r2, r3, r2, r1
 8011e98:	fb01 3304 	mla	r3, r1, r4, r3
 8011e9c:	4604      	mov	r4, r0
 8011e9e:	1810      	adds	r0, r2, r0
 8011ea0:	eb43 71e4 	adc.w	r1, r3, r4, asr #31
 8011ea4:	4a03      	ldr	r2, [pc, #12]	@ (8011eb4 <uxr_millis+0x34>)
 8011ea6:	2300      	movs	r3, #0
 8011ea8:	f7ee fec0 	bl	8000c2c <__aeabi_ldivmod>
 8011eac:	b004      	add	sp, #16
 8011eae:	bd10      	pop	{r4, pc}
 8011eb0:	3b9aca00 	.word	0x3b9aca00
 8011eb4:	000f4240 	.word	0x000f4240

08011eb8 <uxr_nanos>:
 8011eb8:	b510      	push	{r4, lr}
 8011eba:	b084      	sub	sp, #16
 8011ebc:	4669      	mov	r1, sp
 8011ebe:	2001      	movs	r0, #1
 8011ec0:	f7f0 fb0e 	bl	80024e0 <clock_gettime>
 8011ec4:	e9dd 2400 	ldrd	r2, r4, [sp]
 8011ec8:	4905      	ldr	r1, [pc, #20]	@ (8011ee0 <uxr_nanos+0x28>)
 8011eca:	9802      	ldr	r0, [sp, #8]
 8011ecc:	fba2 2301 	umull	r2, r3, r2, r1
 8011ed0:	fb01 3304 	mla	r3, r1, r4, r3
 8011ed4:	4604      	mov	r4, r0
 8011ed6:	1810      	adds	r0, r2, r0
 8011ed8:	eb43 71e4 	adc.w	r1, r3, r4, asr #31
 8011edc:	b004      	add	sp, #16
 8011ede:	bd10      	pop	{r4, pc}
 8011ee0:	3b9aca00 	.word	0x3b9aca00

08011ee4 <on_full_output_buffer_fragmented>:
 8011ee4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011ee8:	460c      	mov	r4, r1
 8011eea:	b08a      	sub	sp, #40	@ 0x28
 8011eec:	f891 10c1 	ldrb.w	r1, [r1, #193]	@ 0xc1
 8011ef0:	4606      	mov	r6, r0
 8011ef2:	f104 0008 	add.w	r0, r4, #8
 8011ef6:	f7ff ff45 	bl	8011d84 <uxr_get_output_reliable_stream>
 8011efa:	4605      	mov	r5, r0
 8011efc:	f006 fa62 	bl	80183c4 <get_available_free_slots>
 8011f00:	b968      	cbnz	r0, 8011f1e <on_full_output_buffer_fragmented+0x3a>
 8011f02:	e9d4 312e 	ldrd	r3, r1, [r4, #184]	@ 0xb8
 8011f06:	4620      	mov	r0, r4
 8011f08:	4798      	blx	r3
 8011f0a:	b918      	cbnz	r0, 8011f14 <on_full_output_buffer_fragmented+0x30>
 8011f0c:	2001      	movs	r0, #1
 8011f0e:	b00a      	add	sp, #40	@ 0x28
 8011f10:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011f14:	4628      	mov	r0, r5
 8011f16:	f006 fa55 	bl	80183c4 <get_available_free_slots>
 8011f1a:	2800      	cmp	r0, #0
 8011f1c:	d0f6      	beq.n	8011f0c <on_full_output_buffer_fragmented+0x28>
 8011f1e:	8928      	ldrh	r0, [r5, #8]
 8011f20:	89eb      	ldrh	r3, [r5, #14]
 8011f22:	7b2a      	ldrb	r2, [r5, #12]
 8011f24:	fbb3 f1f0 	udiv	r1, r3, r0
 8011f28:	f5c2 427f 	rsb	r2, r2, #65280	@ 0xff00
 8011f2c:	fb00 3111 	mls	r1, r0, r1, r3
 8011f30:	b28b      	uxth	r3, r1
 8011f32:	32fc      	adds	r2, #252	@ 0xfc
 8011f34:	6869      	ldr	r1, [r5, #4]
 8011f36:	fbb1 f1f0 	udiv	r1, r1, r0
 8011f3a:	1f0f      	subs	r7, r1, #4
 8011f3c:	f8d4 00c4 	ldr.w	r0, [r4, #196]	@ 0xc4
 8011f40:	fb01 f103 	mul.w	r1, r1, r3
 8011f44:	443a      	add	r2, r7
 8011f46:	682b      	ldr	r3, [r5, #0]
 8011f48:	fa1f f882 	uxth.w	r8, r2
 8011f4c:	3104      	adds	r1, #4
 8011f4e:	4419      	add	r1, r3
 8011f50:	eba0 0008 	sub.w	r0, r0, r8
 8011f54:	f8c4 00c4 	str.w	r0, [r4, #196]	@ 0xc4
 8011f58:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8011f5c:	9300      	str	r3, [sp, #0]
 8011f5e:	463a      	mov	r2, r7
 8011f60:	2300      	movs	r3, #0
 8011f62:	a802      	add	r0, sp, #8
 8011f64:	f7fe fa30 	bl	80103c8 <ucdr_init_buffer_origin_offset>
 8011f68:	f8d4 20c4 	ldr.w	r2, [r4, #196]	@ 0xc4
 8011f6c:	f102 0308 	add.w	r3, r2, #8
 8011f70:	42bb      	cmp	r3, r7
 8011f72:	d927      	bls.n	8011fc4 <on_full_output_buffer_fragmented+0xe0>
 8011f74:	4642      	mov	r2, r8
 8011f76:	2300      	movs	r3, #0
 8011f78:	210d      	movs	r1, #13
 8011f7a:	a802      	add	r0, sp, #8
 8011f7c:	f7ff ff3a 	bl	8011df4 <uxr_buffer_submessage_header>
 8011f80:	8928      	ldrh	r0, [r5, #8]
 8011f82:	89eb      	ldrh	r3, [r5, #14]
 8011f84:	fbb3 f1f0 	udiv	r1, r3, r0
 8011f88:	fb00 3111 	mls	r1, r0, r1, r3
 8011f8c:	e9d5 2300 	ldrd	r2, r3, [r5]
 8011f90:	b289      	uxth	r1, r1
 8011f92:	fbb3 f3f0 	udiv	r3, r3, r0
 8011f96:	fb03 f301 	mul.w	r3, r3, r1
 8011f9a:	50d7      	str	r7, [r2, r3]
 8011f9c:	89e8      	ldrh	r0, [r5, #14]
 8011f9e:	2101      	movs	r1, #1
 8011fa0:	f006 fb56 	bl	8018650 <uxr_seq_num_add>
 8011fa4:	e9dd 2103 	ldrd	r2, r1, [sp, #12]
 8011fa8:	81e8      	strh	r0, [r5, #14]
 8011faa:	1a52      	subs	r2, r2, r1
 8011fac:	4630      	mov	r0, r6
 8011fae:	f7fe fa1d 	bl	80103ec <ucdr_init_buffer>
 8011fb2:	4630      	mov	r0, r6
 8011fb4:	490f      	ldr	r1, [pc, #60]	@ (8011ff4 <on_full_output_buffer_fragmented+0x110>)
 8011fb6:	4622      	mov	r2, r4
 8011fb8:	f7fe f9ee 	bl	8010398 <ucdr_set_on_full_buffer_callback>
 8011fbc:	2000      	movs	r0, #0
 8011fbe:	b00a      	add	sp, #40	@ 0x28
 8011fc0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011fc4:	b292      	uxth	r2, r2
 8011fc6:	2302      	movs	r3, #2
 8011fc8:	210d      	movs	r1, #13
 8011fca:	a802      	add	r0, sp, #8
 8011fcc:	f7ff ff12 	bl	8011df4 <uxr_buffer_submessage_header>
 8011fd0:	8928      	ldrh	r0, [r5, #8]
 8011fd2:	89eb      	ldrh	r3, [r5, #14]
 8011fd4:	fbb3 f2f0 	udiv	r2, r3, r0
 8011fd8:	fb00 3212 	mls	r2, r0, r2, r3
 8011fdc:	f8d4 10c4 	ldr.w	r1, [r4, #196]	@ 0xc4
 8011fe0:	686b      	ldr	r3, [r5, #4]
 8011fe2:	fbb3 f3f0 	udiv	r3, r3, r0
 8011fe6:	b292      	uxth	r2, r2
 8011fe8:	6828      	ldr	r0, [r5, #0]
 8011fea:	fb03 f302 	mul.w	r3, r3, r2
 8011fee:	3108      	adds	r1, #8
 8011ff0:	50c1      	str	r1, [r0, r3]
 8011ff2:	e7d3      	b.n	8011f9c <on_full_output_buffer_fragmented+0xb8>
 8011ff4:	08011ee5 	.word	0x08011ee5

08011ff8 <uxr_prepare_output_stream>:
 8011ff8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011ffa:	b087      	sub	sp, #28
 8011ffc:	2407      	movs	r4, #7
 8011ffe:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8012000:	9202      	str	r2, [sp, #8]
 8012002:	2500      	movs	r5, #0
 8012004:	1d32      	adds	r2, r6, #4
 8012006:	e9cd 4500 	strd	r4, r5, [sp]
 801200a:	9103      	str	r1, [sp, #12]
 801200c:	461c      	mov	r4, r3
 801200e:	4606      	mov	r6, r0
 8012010:	f7ff fc4c 	bl	80118ac <uxr_prepare_stream_to_write_submessage>
 8012014:	f080 0201 	eor.w	r2, r0, #1
 8012018:	b2d2      	uxtb	r2, r2
 801201a:	75a2      	strb	r2, [r4, #22]
 801201c:	b112      	cbz	r2, 8012024 <uxr_prepare_output_stream+0x2c>
 801201e:	4628      	mov	r0, r5
 8012020:	b007      	add	sp, #28
 8012022:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012024:	aa05      	add	r2, sp, #20
 8012026:	9902      	ldr	r1, [sp, #8]
 8012028:	4630      	mov	r0, r6
 801202a:	f7ff fd79 	bl	8011b20 <uxr_init_base_object_request>
 801202e:	a905      	add	r1, sp, #20
 8012030:	4605      	mov	r5, r0
 8012032:	4620      	mov	r0, r4
 8012034:	f001 f872 	bl	801311c <uxr_serialize_WRITE_DATA_Payload_Data>
 8012038:	e9d4 2101 	ldrd	r2, r1, [r4, #4]
 801203c:	e9d4 6706 	ldrd	r6, r7, [r4, #24]
 8012040:	1a52      	subs	r2, r2, r1
 8012042:	4620      	mov	r0, r4
 8012044:	f7fe f9d2 	bl	80103ec <ucdr_init_buffer>
 8012048:	4620      	mov	r0, r4
 801204a:	463a      	mov	r2, r7
 801204c:	4631      	mov	r1, r6
 801204e:	f7fe f9a3 	bl	8010398 <ucdr_set_on_full_buffer_callback>
 8012052:	4628      	mov	r0, r5
 8012054:	b007      	add	sp, #28
 8012056:	bdf0      	pop	{r4, r5, r6, r7, pc}

08012058 <uxr_prepare_output_stream_fragmented>:
 8012058:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801205c:	b093      	sub	sp, #76	@ 0x4c
 801205e:	4605      	mov	r5, r0
 8012060:	9107      	str	r1, [sp, #28]
 8012062:	3008      	adds	r0, #8
 8012064:	f3c1 2107 	ubfx	r1, r1, #8, #8
 8012068:	9303      	str	r3, [sp, #12]
 801206a:	9206      	str	r2, [sp, #24]
 801206c:	f7ff fe8a 	bl	8011d84 <uxr_get_output_reliable_stream>
 8012070:	f89d 301e 	ldrb.w	r3, [sp, #30]
 8012074:	2b01      	cmp	r3, #1
 8012076:	f000 8094 	beq.w	80121a2 <uxr_prepare_output_stream_fragmented+0x14a>
 801207a:	4604      	mov	r4, r0
 801207c:	2800      	cmp	r0, #0
 801207e:	f000 8090 	beq.w	80121a2 <uxr_prepare_output_stream_fragmented+0x14a>
 8012082:	f006 f99f 	bl	80183c4 <get_available_free_slots>
 8012086:	2800      	cmp	r0, #0
 8012088:	f000 8086 	beq.w	8012198 <uxr_prepare_output_stream_fragmented+0x140>
 801208c:	8922      	ldrh	r2, [r4, #8]
 801208e:	89e7      	ldrh	r7, [r4, #14]
 8012090:	fbb7 f8f2 	udiv	r8, r7, r2
 8012094:	e9d4 3100 	ldrd	r3, r1, [r4]
 8012098:	fb02 7818 	mls	r8, r2, r8, r7
 801209c:	fa1f f888 	uxth.w	r8, r8
 80120a0:	fbb1 f2f2 	udiv	r2, r1, r2
 80120a4:	fb02 f808 	mul.w	r8, r2, r8
 80120a8:	f108 0804 	add.w	r8, r8, #4
 80120ac:	4498      	add	r8, r3
 80120ae:	7b23      	ldrb	r3, [r4, #12]
 80120b0:	f858 ac04 	ldr.w	sl, [r8, #-4]
 80120b4:	9204      	str	r2, [sp, #16]
 80120b6:	4553      	cmp	r3, sl
 80120b8:	f1a2 0b04 	sub.w	fp, r2, #4
 80120bc:	d37d      	bcc.n	80121ba <uxr_prepare_output_stream_fragmented+0x162>
 80120be:	9e1c      	ldr	r6, [sp, #112]	@ 0x70
 80120c0:	f8cd a000 	str.w	sl, [sp]
 80120c4:	f1ab 0904 	sub.w	r9, fp, #4
 80120c8:	eba9 0903 	sub.w	r9, r9, r3
 80120cc:	3608      	adds	r6, #8
 80120ce:	a80a      	add	r0, sp, #40	@ 0x28
 80120d0:	2300      	movs	r3, #0
 80120d2:	465a      	mov	r2, fp
 80120d4:	4641      	mov	r1, r8
 80120d6:	fa1f f989 	uxth.w	r9, r9
 80120da:	9605      	str	r6, [sp, #20]
 80120dc:	f7fe f974 	bl	80103c8 <ucdr_init_buffer_origin_offset>
 80120e0:	455e      	cmp	r6, fp
 80120e2:	bf34      	ite	cc
 80120e4:	2302      	movcc	r3, #2
 80120e6:	2300      	movcs	r3, #0
 80120e8:	464a      	mov	r2, r9
 80120ea:	210d      	movs	r1, #13
 80120ec:	a80a      	add	r0, sp, #40	@ 0x28
 80120ee:	f7ff fe81 	bl	8011df4 <uxr_buffer_submessage_header>
 80120f2:	8920      	ldrh	r0, [r4, #8]
 80120f4:	fbb7 f3f0 	udiv	r3, r7, r0
 80120f8:	e9d4 2100 	ldrd	r2, r1, [r4]
 80120fc:	fb00 7313 	mls	r3, r0, r3, r7
 8012100:	b29b      	uxth	r3, r3
 8012102:	fbb1 f1f0 	udiv	r1, r1, r0
 8012106:	fb03 f301 	mul.w	r3, r3, r1
 801210a:	4638      	mov	r0, r7
 801210c:	f842 b003 	str.w	fp, [r2, r3]
 8012110:	2101      	movs	r1, #1
 8012112:	f006 fa9d 	bl	8018650 <uxr_seq_num_add>
 8012116:	9b04      	ldr	r3, [sp, #16]
 8012118:	9e03      	ldr	r6, [sp, #12]
 801211a:	f1a3 0208 	sub.w	r2, r3, #8
 801211e:	f10a 0104 	add.w	r1, sl, #4
 8012122:	4607      	mov	r7, r0
 8012124:	eba2 020a 	sub.w	r2, r2, sl
 8012128:	4441      	add	r1, r8
 801212a:	4630      	mov	r0, r6
 801212c:	f7fe f95e 	bl	80103ec <ucdr_init_buffer>
 8012130:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 8012132:	81e7      	strh	r7, [r4, #14]
 8012134:	1d1a      	adds	r2, r3, #4
 8012136:	f5b2 3f80 	cmp.w	r2, #65536	@ 0x10000
 801213a:	bf28      	it	cs
 801213c:	2200      	movcs	r2, #0
 801213e:	b292      	uxth	r2, r2
 8012140:	2300      	movs	r3, #0
 8012142:	2107      	movs	r1, #7
 8012144:	4630      	mov	r0, r6
 8012146:	f7ff fe55 	bl	8011df4 <uxr_buffer_submessage_header>
 801214a:	9906      	ldr	r1, [sp, #24]
 801214c:	aa09      	add	r2, sp, #36	@ 0x24
 801214e:	4628      	mov	r0, r5
 8012150:	f7ff fce6 	bl	8011b20 <uxr_init_base_object_request>
 8012154:	4604      	mov	r4, r0
 8012156:	b328      	cbz	r0, 80121a4 <uxr_prepare_output_stream_fragmented+0x14c>
 8012158:	9e03      	ldr	r6, [sp, #12]
 801215a:	a909      	add	r1, sp, #36	@ 0x24
 801215c:	4630      	mov	r0, r6
 801215e:	f000 ffdd 	bl	801311c <uxr_serialize_WRITE_DATA_Payload_Data>
 8012162:	e9d6 2101 	ldrd	r2, r1, [r6, #4]
 8012166:	4630      	mov	r0, r6
 8012168:	1a52      	subs	r2, r2, r1
 801216a:	f7fe f93f 	bl	80103ec <ucdr_init_buffer>
 801216e:	9a05      	ldr	r2, [sp, #20]
 8012170:	f8c5 20c4 	str.w	r2, [r5, #196]	@ 0xc4
 8012174:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 8012176:	9b07      	ldr	r3, [sp, #28]
 8012178:	f8c5 20b8 	str.w	r2, [r5, #184]	@ 0xb8
 801217c:	9a1e      	ldr	r2, [sp, #120]	@ 0x78
 801217e:	f8c5 20bc 	str.w	r2, [r5, #188]	@ 0xbc
 8012182:	4630      	mov	r0, r6
 8012184:	4919      	ldr	r1, [pc, #100]	@ (80121ec <uxr_prepare_output_stream_fragmented+0x194>)
 8012186:	f8c5 30c0 	str.w	r3, [r5, #192]	@ 0xc0
 801218a:	462a      	mov	r2, r5
 801218c:	f7fe f904 	bl	8010398 <ucdr_set_on_full_buffer_callback>
 8012190:	4620      	mov	r0, r4
 8012192:	b013      	add	sp, #76	@ 0x4c
 8012194:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012198:	991e      	ldr	r1, [sp, #120]	@ 0x78
 801219a:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 801219c:	4628      	mov	r0, r5
 801219e:	4798      	blx	r3
 80121a0:	b920      	cbnz	r0, 80121ac <uxr_prepare_output_stream_fragmented+0x154>
 80121a2:	2400      	movs	r4, #0
 80121a4:	4620      	mov	r0, r4
 80121a6:	b013      	add	sp, #76	@ 0x4c
 80121a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80121ac:	4620      	mov	r0, r4
 80121ae:	f006 f909 	bl	80183c4 <get_available_free_slots>
 80121b2:	2800      	cmp	r0, #0
 80121b4:	f47f af6a 	bne.w	801208c <uxr_prepare_output_stream_fragmented+0x34>
 80121b8:	e7f3      	b.n	80121a2 <uxr_prepare_output_stream_fragmented+0x14a>
 80121ba:	4638      	mov	r0, r7
 80121bc:	2101      	movs	r1, #1
 80121be:	f006 fa47 	bl	8018650 <uxr_seq_num_add>
 80121c2:	8922      	ldrh	r2, [r4, #8]
 80121c4:	fbb0 f8f2 	udiv	r8, r0, r2
 80121c8:	fb02 0818 	mls	r8, r2, r8, r0
 80121cc:	fa1f f888 	uxth.w	r8, r8
 80121d0:	6863      	ldr	r3, [r4, #4]
 80121d2:	fbb3 f3f2 	udiv	r3, r3, r2
 80121d6:	6822      	ldr	r2, [r4, #0]
 80121d8:	fb08 f803 	mul.w	r8, r8, r3
 80121dc:	f108 0804 	add.w	r8, r8, #4
 80121e0:	4490      	add	r8, r2
 80121e2:	7b23      	ldrb	r3, [r4, #12]
 80121e4:	f858 ac04 	ldr.w	sl, [r8, #-4]
 80121e8:	4607      	mov	r7, r0
 80121ea:	e768      	b.n	80120be <uxr_prepare_output_stream_fragmented+0x66>
 80121ec:	08011ee5 	.word	0x08011ee5

080121f0 <uxr_serialize_message_header>:
 80121f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80121f2:	b083      	sub	sp, #12
 80121f4:	4616      	mov	r6, r2
 80121f6:	4604      	mov	r4, r0
 80121f8:	9301      	str	r3, [sp, #4]
 80121fa:	460d      	mov	r5, r1
 80121fc:	9f08      	ldr	r7, [sp, #32]
 80121fe:	f7fc ffab 	bl	800f158 <ucdr_serialize_uint8_t>
 8012202:	4631      	mov	r1, r6
 8012204:	4620      	mov	r0, r4
 8012206:	f7fc ffa7 	bl	800f158 <ucdr_serialize_uint8_t>
 801220a:	9a01      	ldr	r2, [sp, #4]
 801220c:	4620      	mov	r0, r4
 801220e:	2101      	movs	r1, #1
 8012210:	f7fd f84e 	bl	800f2b0 <ucdr_serialize_endian_uint16_t>
 8012214:	062b      	lsls	r3, r5, #24
 8012216:	d501      	bpl.n	801221c <uxr_serialize_message_header+0x2c>
 8012218:	b003      	add	sp, #12
 801221a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801221c:	4639      	mov	r1, r7
 801221e:	4620      	mov	r0, r4
 8012220:	2204      	movs	r2, #4
 8012222:	b003      	add	sp, #12
 8012224:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8012228:	f005 b96e 	b.w	8017508 <ucdr_serialize_array_uint8_t>

0801222c <uxr_deserialize_message_header>:
 801222c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801222e:	b083      	sub	sp, #12
 8012230:	4616      	mov	r6, r2
 8012232:	4604      	mov	r4, r0
 8012234:	9301      	str	r3, [sp, #4]
 8012236:	460d      	mov	r5, r1
 8012238:	9f08      	ldr	r7, [sp, #32]
 801223a:	f7fc ffa3 	bl	800f184 <ucdr_deserialize_uint8_t>
 801223e:	4631      	mov	r1, r6
 8012240:	4620      	mov	r0, r4
 8012242:	f7fc ff9f 	bl	800f184 <ucdr_deserialize_uint8_t>
 8012246:	9a01      	ldr	r2, [sp, #4]
 8012248:	4620      	mov	r0, r4
 801224a:	2101      	movs	r1, #1
 801224c:	f7fd f924 	bl	800f498 <ucdr_deserialize_endian_uint16_t>
 8012250:	f995 3000 	ldrsb.w	r3, [r5]
 8012254:	2b00      	cmp	r3, #0
 8012256:	da01      	bge.n	801225c <uxr_deserialize_message_header+0x30>
 8012258:	b003      	add	sp, #12
 801225a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801225c:	4639      	mov	r1, r7
 801225e:	4620      	mov	r0, r4
 8012260:	2204      	movs	r2, #4
 8012262:	b003      	add	sp, #12
 8012264:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8012268:	f005 b9b2 	b.w	80175d0 <ucdr_deserialize_array_uint8_t>

0801226c <uxr_serialize_submessage_header>:
 801226c:	b530      	push	{r4, r5, lr}
 801226e:	b083      	sub	sp, #12
 8012270:	4615      	mov	r5, r2
 8012272:	4604      	mov	r4, r0
 8012274:	9301      	str	r3, [sp, #4]
 8012276:	f7fc ff6f 	bl	800f158 <ucdr_serialize_uint8_t>
 801227a:	4629      	mov	r1, r5
 801227c:	4620      	mov	r0, r4
 801227e:	f7fc ff6b 	bl	800f158 <ucdr_serialize_uint8_t>
 8012282:	9a01      	ldr	r2, [sp, #4]
 8012284:	4620      	mov	r0, r4
 8012286:	2101      	movs	r1, #1
 8012288:	b003      	add	sp, #12
 801228a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801228e:	f7fd b80f 	b.w	800f2b0 <ucdr_serialize_endian_uint16_t>
 8012292:	bf00      	nop

08012294 <uxr_deserialize_submessage_header>:
 8012294:	b530      	push	{r4, r5, lr}
 8012296:	b083      	sub	sp, #12
 8012298:	4615      	mov	r5, r2
 801229a:	4604      	mov	r4, r0
 801229c:	9301      	str	r3, [sp, #4]
 801229e:	f7fc ff71 	bl	800f184 <ucdr_deserialize_uint8_t>
 80122a2:	4629      	mov	r1, r5
 80122a4:	4620      	mov	r0, r4
 80122a6:	f7fc ff6d 	bl	800f184 <ucdr_deserialize_uint8_t>
 80122aa:	9a01      	ldr	r2, [sp, #4]
 80122ac:	4620      	mov	r0, r4
 80122ae:	2101      	movs	r1, #1
 80122b0:	b003      	add	sp, #12
 80122b2:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80122b6:	f7fd b8ef 	b.w	800f498 <ucdr_deserialize_endian_uint16_t>
 80122ba:	bf00      	nop

080122bc <uxr_serialize_CLIENT_Representation>:
 80122bc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80122c0:	2204      	movs	r2, #4
 80122c2:	460c      	mov	r4, r1
 80122c4:	4605      	mov	r5, r0
 80122c6:	f005 f91f 	bl	8017508 <ucdr_serialize_array_uint8_t>
 80122ca:	1d21      	adds	r1, r4, #4
 80122cc:	4607      	mov	r7, r0
 80122ce:	2202      	movs	r2, #2
 80122d0:	4628      	mov	r0, r5
 80122d2:	f005 f919 	bl	8017508 <ucdr_serialize_array_uint8_t>
 80122d6:	1da1      	adds	r1, r4, #6
 80122d8:	4007      	ands	r7, r0
 80122da:	2202      	movs	r2, #2
 80122dc:	4628      	mov	r0, r5
 80122de:	f005 f913 	bl	8017508 <ucdr_serialize_array_uint8_t>
 80122e2:	fa5f f887 	uxtb.w	r8, r7
 80122e6:	2204      	movs	r2, #4
 80122e8:	4607      	mov	r7, r0
 80122ea:	f104 0108 	add.w	r1, r4, #8
 80122ee:	4628      	mov	r0, r5
 80122f0:	f005 f90a 	bl	8017508 <ucdr_serialize_array_uint8_t>
 80122f4:	ea08 0707 	and.w	r7, r8, r7
 80122f8:	7b21      	ldrb	r1, [r4, #12]
 80122fa:	4680      	mov	r8, r0
 80122fc:	4628      	mov	r0, r5
 80122fe:	f7fc ff2b 	bl	800f158 <ucdr_serialize_uint8_t>
 8012302:	ea08 0807 	and.w	r8, r8, r7
 8012306:	7b61      	ldrb	r1, [r4, #13]
 8012308:	4607      	mov	r7, r0
 801230a:	4628      	mov	r0, r5
 801230c:	f7fc fef4 	bl	800f0f8 <ucdr_serialize_bool>
 8012310:	7b63      	ldrb	r3, [r4, #13]
 8012312:	ea08 0707 	and.w	r7, r8, r7
 8012316:	ea07 0600 	and.w	r6, r7, r0
 801231a:	b933      	cbnz	r3, 801232a <uxr_serialize_CLIENT_Representation+0x6e>
 801231c:	8ba1      	ldrh	r1, [r4, #28]
 801231e:	4628      	mov	r0, r5
 8012320:	f7fc ff46 	bl	800f1b0 <ucdr_serialize_uint16_t>
 8012324:	4030      	ands	r0, r6
 8012326:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801232a:	6921      	ldr	r1, [r4, #16]
 801232c:	4628      	mov	r0, r5
 801232e:	f7fd f929 	bl	800f584 <ucdr_serialize_uint32_t>
 8012332:	6923      	ldr	r3, [r4, #16]
 8012334:	b1cb      	cbz	r3, 801236a <uxr_serialize_CLIENT_Representation+0xae>
 8012336:	b1d0      	cbz	r0, 801236e <uxr_serialize_CLIENT_Representation+0xb2>
 8012338:	46a0      	mov	r8, r4
 801233a:	f04f 0900 	mov.w	r9, #0
 801233e:	e002      	b.n	8012346 <uxr_serialize_CLIENT_Representation+0x8a>
 8012340:	f108 0808 	add.w	r8, r8, #8
 8012344:	b198      	cbz	r0, 801236e <uxr_serialize_CLIENT_Representation+0xb2>
 8012346:	f8d8 1014 	ldr.w	r1, [r8, #20]
 801234a:	4628      	mov	r0, r5
 801234c:	f005 fa50 	bl	80177f0 <ucdr_serialize_string>
 8012350:	f8d8 1018 	ldr.w	r1, [r8, #24]
 8012354:	4607      	mov	r7, r0
 8012356:	4628      	mov	r0, r5
 8012358:	f005 fa4a 	bl	80177f0 <ucdr_serialize_string>
 801235c:	6923      	ldr	r3, [r4, #16]
 801235e:	f109 0901 	add.w	r9, r9, #1
 8012362:	4038      	ands	r0, r7
 8012364:	4599      	cmp	r9, r3
 8012366:	b2c0      	uxtb	r0, r0
 8012368:	d3ea      	bcc.n	8012340 <uxr_serialize_CLIENT_Representation+0x84>
 801236a:	4006      	ands	r6, r0
 801236c:	e7d6      	b.n	801231c <uxr_serialize_CLIENT_Representation+0x60>
 801236e:	2600      	movs	r6, #0
 8012370:	e7d4      	b.n	801231c <uxr_serialize_CLIENT_Representation+0x60>
 8012372:	bf00      	nop

08012374 <uxr_deserialize_CLIENT_Representation>:
 8012374:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012378:	2204      	movs	r2, #4
 801237a:	460c      	mov	r4, r1
 801237c:	4605      	mov	r5, r0
 801237e:	f005 f927 	bl	80175d0 <ucdr_deserialize_array_uint8_t>
 8012382:	1d21      	adds	r1, r4, #4
 8012384:	4607      	mov	r7, r0
 8012386:	2202      	movs	r2, #2
 8012388:	4628      	mov	r0, r5
 801238a:	f005 f921 	bl	80175d0 <ucdr_deserialize_array_uint8_t>
 801238e:	1da1      	adds	r1, r4, #6
 8012390:	4007      	ands	r7, r0
 8012392:	2202      	movs	r2, #2
 8012394:	4628      	mov	r0, r5
 8012396:	f005 f91b 	bl	80175d0 <ucdr_deserialize_array_uint8_t>
 801239a:	fa5f f887 	uxtb.w	r8, r7
 801239e:	2204      	movs	r2, #4
 80123a0:	4607      	mov	r7, r0
 80123a2:	f104 0108 	add.w	r1, r4, #8
 80123a6:	4628      	mov	r0, r5
 80123a8:	f005 f912 	bl	80175d0 <ucdr_deserialize_array_uint8_t>
 80123ac:	ea08 0707 	and.w	r7, r8, r7
 80123b0:	f104 010c 	add.w	r1, r4, #12
 80123b4:	4680      	mov	r8, r0
 80123b6:	4628      	mov	r0, r5
 80123b8:	f7fc fee4 	bl	800f184 <ucdr_deserialize_uint8_t>
 80123bc:	ea08 0807 	and.w	r8, r8, r7
 80123c0:	f104 010d 	add.w	r1, r4, #13
 80123c4:	4607      	mov	r7, r0
 80123c6:	4628      	mov	r0, r5
 80123c8:	f7fc feac 	bl	800f124 <ucdr_deserialize_bool>
 80123cc:	7b63      	ldrb	r3, [r4, #13]
 80123ce:	ea08 0707 	and.w	r7, r8, r7
 80123d2:	ea07 0600 	and.w	r6, r7, r0
 80123d6:	b93b      	cbnz	r3, 80123e8 <uxr_deserialize_CLIENT_Representation+0x74>
 80123d8:	f104 011c 	add.w	r1, r4, #28
 80123dc:	4628      	mov	r0, r5
 80123de:	f7fc ffe7 	bl	800f3b0 <ucdr_deserialize_uint16_t>
 80123e2:	4030      	ands	r0, r6
 80123e4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80123e8:	f104 0110 	add.w	r1, r4, #16
 80123ec:	4628      	mov	r0, r5
 80123ee:	f7fd f9f9 	bl	800f7e4 <ucdr_deserialize_uint32_t>
 80123f2:	6923      	ldr	r3, [r4, #16]
 80123f4:	2b01      	cmp	r3, #1
 80123f6:	d903      	bls.n	8012400 <uxr_deserialize_CLIENT_Representation+0x8c>
 80123f8:	2301      	movs	r3, #1
 80123fa:	75ab      	strb	r3, [r5, #22]
 80123fc:	2600      	movs	r6, #0
 80123fe:	e7eb      	b.n	80123d8 <uxr_deserialize_CLIENT_Representation+0x64>
 8012400:	b1fb      	cbz	r3, 8012442 <uxr_deserialize_CLIENT_Representation+0xce>
 8012402:	2800      	cmp	r0, #0
 8012404:	d0fa      	beq.n	80123fc <uxr_deserialize_CLIENT_Representation+0x88>
 8012406:	46a0      	mov	r8, r4
 8012408:	f04f 0900 	mov.w	r9, #0
 801240c:	e003      	b.n	8012416 <uxr_deserialize_CLIENT_Representation+0xa2>
 801240e:	f108 0808 	add.w	r8, r8, #8
 8012412:	2800      	cmp	r0, #0
 8012414:	d0f2      	beq.n	80123fc <uxr_deserialize_CLIENT_Representation+0x88>
 8012416:	f8d8 1014 	ldr.w	r1, [r8, #20]
 801241a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 801241e:	4628      	mov	r0, r5
 8012420:	f005 f9f6 	bl	8017810 <ucdr_deserialize_string>
 8012424:	f8d8 1018 	ldr.w	r1, [r8, #24]
 8012428:	4607      	mov	r7, r0
 801242a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 801242e:	4628      	mov	r0, r5
 8012430:	f005 f9ee 	bl	8017810 <ucdr_deserialize_string>
 8012434:	6923      	ldr	r3, [r4, #16]
 8012436:	f109 0901 	add.w	r9, r9, #1
 801243a:	4038      	ands	r0, r7
 801243c:	4599      	cmp	r9, r3
 801243e:	b2c0      	uxtb	r0, r0
 8012440:	d3e5      	bcc.n	801240e <uxr_deserialize_CLIENT_Representation+0x9a>
 8012442:	4006      	ands	r6, r0
 8012444:	e7c8      	b.n	80123d8 <uxr_deserialize_CLIENT_Representation+0x64>
 8012446:	bf00      	nop

08012448 <uxr_serialize_AGENT_Representation>:
 8012448:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801244c:	2204      	movs	r2, #4
 801244e:	460c      	mov	r4, r1
 8012450:	4605      	mov	r5, r0
 8012452:	f005 f859 	bl	8017508 <ucdr_serialize_array_uint8_t>
 8012456:	1d21      	adds	r1, r4, #4
 8012458:	4606      	mov	r6, r0
 801245a:	2202      	movs	r2, #2
 801245c:	4628      	mov	r0, r5
 801245e:	f005 f853 	bl	8017508 <ucdr_serialize_array_uint8_t>
 8012462:	1da1      	adds	r1, r4, #6
 8012464:	4006      	ands	r6, r0
 8012466:	2202      	movs	r2, #2
 8012468:	4628      	mov	r0, r5
 801246a:	f005 f84d 	bl	8017508 <ucdr_serialize_array_uint8_t>
 801246e:	b2f6      	uxtb	r6, r6
 8012470:	4603      	mov	r3, r0
 8012472:	7a21      	ldrb	r1, [r4, #8]
 8012474:	4628      	mov	r0, r5
 8012476:	401e      	ands	r6, r3
 8012478:	f7fc fe3e 	bl	800f0f8 <ucdr_serialize_bool>
 801247c:	7a23      	ldrb	r3, [r4, #8]
 801247e:	ea00 0706 	and.w	r7, r0, r6
 8012482:	b913      	cbnz	r3, 801248a <uxr_serialize_AGENT_Representation+0x42>
 8012484:	4638      	mov	r0, r7
 8012486:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801248a:	68e1      	ldr	r1, [r4, #12]
 801248c:	4628      	mov	r0, r5
 801248e:	f7fd f879 	bl	800f584 <ucdr_serialize_uint32_t>
 8012492:	68e3      	ldr	r3, [r4, #12]
 8012494:	b313      	cbz	r3, 80124dc <uxr_serialize_AGENT_Representation+0x94>
 8012496:	b1e8      	cbz	r0, 80124d4 <uxr_serialize_AGENT_Representation+0x8c>
 8012498:	46a0      	mov	r8, r4
 801249a:	f04f 0900 	mov.w	r9, #0
 801249e:	e002      	b.n	80124a6 <uxr_serialize_AGENT_Representation+0x5e>
 80124a0:	f108 0808 	add.w	r8, r8, #8
 80124a4:	b1b3      	cbz	r3, 80124d4 <uxr_serialize_AGENT_Representation+0x8c>
 80124a6:	f8d8 1010 	ldr.w	r1, [r8, #16]
 80124aa:	4628      	mov	r0, r5
 80124ac:	f005 f9a0 	bl	80177f0 <ucdr_serialize_string>
 80124b0:	f8d8 1014 	ldr.w	r1, [r8, #20]
 80124b4:	4606      	mov	r6, r0
 80124b6:	4628      	mov	r0, r5
 80124b8:	f005 f99a 	bl	80177f0 <ucdr_serialize_string>
 80124bc:	68e2      	ldr	r2, [r4, #12]
 80124be:	f109 0901 	add.w	r9, r9, #1
 80124c2:	ea06 0300 	and.w	r3, r6, r0
 80124c6:	4591      	cmp	r9, r2
 80124c8:	b2db      	uxtb	r3, r3
 80124ca:	d3e9      	bcc.n	80124a0 <uxr_serialize_AGENT_Representation+0x58>
 80124cc:	401f      	ands	r7, r3
 80124ce:	4638      	mov	r0, r7
 80124d0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80124d4:	2700      	movs	r7, #0
 80124d6:	4638      	mov	r0, r7
 80124d8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80124dc:	4007      	ands	r7, r0
 80124de:	e7d1      	b.n	8012484 <uxr_serialize_AGENT_Representation+0x3c>

080124e0 <uxr_serialize_ObjectVariant.part.0>:
 80124e0:	b570      	push	{r4, r5, r6, lr}
 80124e2:	780b      	ldrb	r3, [r1, #0]
 80124e4:	3b01      	subs	r3, #1
 80124e6:	460c      	mov	r4, r1
 80124e8:	4605      	mov	r5, r0
 80124ea:	2b0d      	cmp	r3, #13
 80124ec:	d869      	bhi.n	80125c2 <uxr_serialize_ObjectVariant.part.0+0xe2>
 80124ee:	e8df f003 	tbb	[pc, r3]
 80124f2:	074a      	.short	0x074a
 80124f4:	07073030 	.word	0x07073030
 80124f8:	21680707 	.word	0x21680707
 80124fc:	45632121 	.word	0x45632121
 8012500:	7909      	ldrb	r1, [r1, #4]
 8012502:	f7fc fe29 	bl	800f158 <ucdr_serialize_uint8_t>
 8012506:	4606      	mov	r6, r0
 8012508:	b158      	cbz	r0, 8012522 <uxr_serialize_ObjectVariant.part.0+0x42>
 801250a:	7923      	ldrb	r3, [r4, #4]
 801250c:	2b02      	cmp	r3, #2
 801250e:	d003      	beq.n	8012518 <uxr_serialize_ObjectVariant.part.0+0x38>
 8012510:	2b03      	cmp	r3, #3
 8012512:	d029      	beq.n	8012568 <uxr_serialize_ObjectVariant.part.0+0x88>
 8012514:	2b01      	cmp	r3, #1
 8012516:	d104      	bne.n	8012522 <uxr_serialize_ObjectVariant.part.0+0x42>
 8012518:	68a1      	ldr	r1, [r4, #8]
 801251a:	4628      	mov	r0, r5
 801251c:	f005 f968 	bl	80177f0 <ucdr_serialize_string>
 8012520:	4606      	mov	r6, r0
 8012522:	f504 7103 	add.w	r1, r4, #524	@ 0x20c
 8012526:	4628      	mov	r0, r5
 8012528:	2202      	movs	r2, #2
 801252a:	f004 ffed 	bl	8017508 <ucdr_serialize_array_uint8_t>
 801252e:	4030      	ands	r0, r6
 8012530:	b2c0      	uxtb	r0, r0
 8012532:	bd70      	pop	{r4, r5, r6, pc}
 8012534:	7909      	ldrb	r1, [r1, #4]
 8012536:	f7fc fe0f 	bl	800f158 <ucdr_serialize_uint8_t>
 801253a:	b1e8      	cbz	r0, 8012578 <uxr_serialize_ObjectVariant.part.0+0x98>
 801253c:	7923      	ldrb	r3, [r4, #4]
 801253e:	2b01      	cmp	r3, #1
 8012540:	d001      	beq.n	8012546 <uxr_serialize_ObjectVariant.part.0+0x66>
 8012542:	2b02      	cmp	r3, #2
 8012544:	d13d      	bne.n	80125c2 <uxr_serialize_ObjectVariant.part.0+0xe2>
 8012546:	68a1      	ldr	r1, [r4, #8]
 8012548:	4628      	mov	r0, r5
 801254a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801254e:	f005 b94f 	b.w	80177f0 <ucdr_serialize_string>
 8012552:	7909      	ldrb	r1, [r1, #4]
 8012554:	f7fc fe00 	bl	800f158 <ucdr_serialize_uint8_t>
 8012558:	4606      	mov	r6, r0
 801255a:	2800      	cmp	r0, #0
 801255c:	d0e1      	beq.n	8012522 <uxr_serialize_ObjectVariant.part.0+0x42>
 801255e:	7923      	ldrb	r3, [r4, #4]
 8012560:	2b02      	cmp	r3, #2
 8012562:	d0d9      	beq.n	8012518 <uxr_serialize_ObjectVariant.part.0+0x38>
 8012564:	2b03      	cmp	r3, #3
 8012566:	d1dc      	bne.n	8012522 <uxr_serialize_ObjectVariant.part.0+0x42>
 8012568:	68a2      	ldr	r2, [r4, #8]
 801256a:	f104 010c 	add.w	r1, r4, #12
 801256e:	4628      	mov	r0, r5
 8012570:	f7fd ffd8 	bl	8010524 <ucdr_serialize_sequence_uint8_t>
 8012574:	4606      	mov	r6, r0
 8012576:	e7d4      	b.n	8012522 <uxr_serialize_ObjectVariant.part.0+0x42>
 8012578:	2000      	movs	r0, #0
 801257a:	bd70      	pop	{r4, r5, r6, pc}
 801257c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8012580:	3104      	adds	r1, #4
 8012582:	f7ff be9b 	b.w	80122bc <uxr_serialize_CLIENT_Representation>
 8012586:	7909      	ldrb	r1, [r1, #4]
 8012588:	f7fc fde6 	bl	800f158 <ucdr_serialize_uint8_t>
 801258c:	4606      	mov	r6, r0
 801258e:	b158      	cbz	r0, 80125a8 <uxr_serialize_ObjectVariant.part.0+0xc8>
 8012590:	7923      	ldrb	r3, [r4, #4]
 8012592:	2b02      	cmp	r3, #2
 8012594:	d003      	beq.n	801259e <uxr_serialize_ObjectVariant.part.0+0xbe>
 8012596:	2b03      	cmp	r3, #3
 8012598:	d015      	beq.n	80125c6 <uxr_serialize_ObjectVariant.part.0+0xe6>
 801259a:	2b01      	cmp	r3, #1
 801259c:	d104      	bne.n	80125a8 <uxr_serialize_ObjectVariant.part.0+0xc8>
 801259e:	68a1      	ldr	r1, [r4, #8]
 80125a0:	4628      	mov	r0, r5
 80125a2:	f005 f925 	bl	80177f0 <ucdr_serialize_string>
 80125a6:	4606      	mov	r6, r0
 80125a8:	f9b4 120c 	ldrsh.w	r1, [r4, #524]	@ 0x20c
 80125ac:	4628      	mov	r0, r5
 80125ae:	f7fd fb0f 	bl	800fbd0 <ucdr_serialize_int16_t>
 80125b2:	4030      	ands	r0, r6
 80125b4:	b2c0      	uxtb	r0, r0
 80125b6:	bd70      	pop	{r4, r5, r6, pc}
 80125b8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80125bc:	3104      	adds	r1, #4
 80125be:	f7ff bf43 	b.w	8012448 <uxr_serialize_AGENT_Representation>
 80125c2:	2001      	movs	r0, #1
 80125c4:	bd70      	pop	{r4, r5, r6, pc}
 80125c6:	68a2      	ldr	r2, [r4, #8]
 80125c8:	f104 010c 	add.w	r1, r4, #12
 80125cc:	4628      	mov	r0, r5
 80125ce:	f7fd ffa9 	bl	8010524 <ucdr_serialize_sequence_uint8_t>
 80125d2:	4606      	mov	r6, r0
 80125d4:	e7e8      	b.n	80125a8 <uxr_serialize_ObjectVariant.part.0+0xc8>
 80125d6:	bf00      	nop

080125d8 <uxr_serialize_OBJK_DomainParticipant_Binary>:
 80125d8:	b570      	push	{r4, r5, r6, lr}
 80125da:	460d      	mov	r5, r1
 80125dc:	7809      	ldrb	r1, [r1, #0]
 80125de:	4606      	mov	r6, r0
 80125e0:	f7fc fd8a 	bl	800f0f8 <ucdr_serialize_bool>
 80125e4:	782b      	ldrb	r3, [r5, #0]
 80125e6:	4604      	mov	r4, r0
 80125e8:	b94b      	cbnz	r3, 80125fe <uxr_serialize_OBJK_DomainParticipant_Binary+0x26>
 80125ea:	7a29      	ldrb	r1, [r5, #8]
 80125ec:	4630      	mov	r0, r6
 80125ee:	f7fc fd83 	bl	800f0f8 <ucdr_serialize_bool>
 80125f2:	7a2b      	ldrb	r3, [r5, #8]
 80125f4:	4004      	ands	r4, r0
 80125f6:	b2e4      	uxtb	r4, r4
 80125f8:	b943      	cbnz	r3, 801260c <uxr_serialize_OBJK_DomainParticipant_Binary+0x34>
 80125fa:	4620      	mov	r0, r4
 80125fc:	bd70      	pop	{r4, r5, r6, pc}
 80125fe:	6869      	ldr	r1, [r5, #4]
 8012600:	4630      	mov	r0, r6
 8012602:	f005 f8f5 	bl	80177f0 <ucdr_serialize_string>
 8012606:	4004      	ands	r4, r0
 8012608:	b2e4      	uxtb	r4, r4
 801260a:	e7ee      	b.n	80125ea <uxr_serialize_OBJK_DomainParticipant_Binary+0x12>
 801260c:	68e9      	ldr	r1, [r5, #12]
 801260e:	4630      	mov	r0, r6
 8012610:	f005 f8ee 	bl	80177f0 <ucdr_serialize_string>
 8012614:	4004      	ands	r4, r0
 8012616:	4620      	mov	r0, r4
 8012618:	bd70      	pop	{r4, r5, r6, pc}
 801261a:	bf00      	nop

0801261c <uxr_serialize_OBJK_Topic_Binary>:
 801261c:	b570      	push	{r4, r5, r6, lr}
 801261e:	460d      	mov	r5, r1
 8012620:	6809      	ldr	r1, [r1, #0]
 8012622:	4606      	mov	r6, r0
 8012624:	f005 f8e4 	bl	80177f0 <ucdr_serialize_string>
 8012628:	7929      	ldrb	r1, [r5, #4]
 801262a:	4604      	mov	r4, r0
 801262c:	4630      	mov	r0, r6
 801262e:	f7fc fd63 	bl	800f0f8 <ucdr_serialize_bool>
 8012632:	792b      	ldrb	r3, [r5, #4]
 8012634:	4004      	ands	r4, r0
 8012636:	b2e4      	uxtb	r4, r4
 8012638:	b943      	cbnz	r3, 801264c <uxr_serialize_OBJK_Topic_Binary+0x30>
 801263a:	7b29      	ldrb	r1, [r5, #12]
 801263c:	4630      	mov	r0, r6
 801263e:	f7fc fd5b 	bl	800f0f8 <ucdr_serialize_bool>
 8012642:	7b2b      	ldrb	r3, [r5, #12]
 8012644:	4004      	ands	r4, r0
 8012646:	b93b      	cbnz	r3, 8012658 <uxr_serialize_OBJK_Topic_Binary+0x3c>
 8012648:	4620      	mov	r0, r4
 801264a:	bd70      	pop	{r4, r5, r6, pc}
 801264c:	68a9      	ldr	r1, [r5, #8]
 801264e:	4630      	mov	r0, r6
 8012650:	f005 f8ce 	bl	80177f0 <ucdr_serialize_string>
 8012654:	4004      	ands	r4, r0
 8012656:	e7f0      	b.n	801263a <uxr_serialize_OBJK_Topic_Binary+0x1e>
 8012658:	6929      	ldr	r1, [r5, #16]
 801265a:	4630      	mov	r0, r6
 801265c:	f005 f8c8 	bl	80177f0 <ucdr_serialize_string>
 8012660:	4004      	ands	r4, r0
 8012662:	b2e4      	uxtb	r4, r4
 8012664:	4620      	mov	r0, r4
 8012666:	bd70      	pop	{r4, r5, r6, pc}

08012668 <uxr_serialize_OBJK_Publisher_Binary_Qos>:
 8012668:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801266c:	460c      	mov	r4, r1
 801266e:	7809      	ldrb	r1, [r1, #0]
 8012670:	4606      	mov	r6, r0
 8012672:	f7fc fd41 	bl	800f0f8 <ucdr_serialize_bool>
 8012676:	7823      	ldrb	r3, [r4, #0]
 8012678:	4605      	mov	r5, r0
 801267a:	b96b      	cbnz	r3, 8012698 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x30>
 801267c:	f894 1028 	ldrb.w	r1, [r4, #40]	@ 0x28
 8012680:	4630      	mov	r0, r6
 8012682:	f7fc fd39 	bl	800f0f8 <ucdr_serialize_bool>
 8012686:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
 801268a:	4005      	ands	r5, r0
 801268c:	b2ed      	uxtb	r5, r5
 801268e:	2b00      	cmp	r3, #0
 8012690:	d169      	bne.n	8012766 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xfe>
 8012692:	4628      	mov	r0, r5
 8012694:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012698:	6861      	ldr	r1, [r4, #4]
 801269a:	4630      	mov	r0, r6
 801269c:	f7fc ff72 	bl	800f584 <ucdr_serialize_uint32_t>
 80126a0:	6863      	ldr	r3, [r4, #4]
 80126a2:	2b00      	cmp	r3, #0
 80126a4:	d06b      	beq.n	801277e <uxr_serialize_OBJK_Publisher_Binary_Qos+0x116>
 80126a6:	2800      	cmp	r0, #0
 80126a8:	d067      	beq.n	801277a <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 80126aa:	68a1      	ldr	r1, [r4, #8]
 80126ac:	4630      	mov	r0, r6
 80126ae:	f005 f89f 	bl	80177f0 <ucdr_serialize_string>
 80126b2:	6863      	ldr	r3, [r4, #4]
 80126b4:	2b01      	cmp	r3, #1
 80126b6:	d953      	bls.n	8012760 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 80126b8:	2800      	cmp	r0, #0
 80126ba:	d05e      	beq.n	801277a <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 80126bc:	68e1      	ldr	r1, [r4, #12]
 80126be:	4630      	mov	r0, r6
 80126c0:	f005 f896 	bl	80177f0 <ucdr_serialize_string>
 80126c4:	6863      	ldr	r3, [r4, #4]
 80126c6:	2b02      	cmp	r3, #2
 80126c8:	d94a      	bls.n	8012760 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 80126ca:	2800      	cmp	r0, #0
 80126cc:	d055      	beq.n	801277a <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 80126ce:	6921      	ldr	r1, [r4, #16]
 80126d0:	4630      	mov	r0, r6
 80126d2:	f005 f88d 	bl	80177f0 <ucdr_serialize_string>
 80126d6:	6863      	ldr	r3, [r4, #4]
 80126d8:	2b03      	cmp	r3, #3
 80126da:	d941      	bls.n	8012760 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 80126dc:	2800      	cmp	r0, #0
 80126de:	d04c      	beq.n	801277a <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 80126e0:	6961      	ldr	r1, [r4, #20]
 80126e2:	4630      	mov	r0, r6
 80126e4:	f005 f884 	bl	80177f0 <ucdr_serialize_string>
 80126e8:	6863      	ldr	r3, [r4, #4]
 80126ea:	2b04      	cmp	r3, #4
 80126ec:	d938      	bls.n	8012760 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 80126ee:	2800      	cmp	r0, #0
 80126f0:	d043      	beq.n	801277a <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 80126f2:	69a1      	ldr	r1, [r4, #24]
 80126f4:	4630      	mov	r0, r6
 80126f6:	f005 f87b 	bl	80177f0 <ucdr_serialize_string>
 80126fa:	6863      	ldr	r3, [r4, #4]
 80126fc:	2b05      	cmp	r3, #5
 80126fe:	d92f      	bls.n	8012760 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 8012700:	2800      	cmp	r0, #0
 8012702:	d03a      	beq.n	801277a <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8012704:	69e1      	ldr	r1, [r4, #28]
 8012706:	4630      	mov	r0, r6
 8012708:	f005 f872 	bl	80177f0 <ucdr_serialize_string>
 801270c:	6863      	ldr	r3, [r4, #4]
 801270e:	2b06      	cmp	r3, #6
 8012710:	d926      	bls.n	8012760 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 8012712:	b390      	cbz	r0, 801277a <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8012714:	6a21      	ldr	r1, [r4, #32]
 8012716:	4630      	mov	r0, r6
 8012718:	f005 f86a 	bl	80177f0 <ucdr_serialize_string>
 801271c:	6863      	ldr	r3, [r4, #4]
 801271e:	2b07      	cmp	r3, #7
 8012720:	d91e      	bls.n	8012760 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 8012722:	b350      	cbz	r0, 801277a <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8012724:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 8012726:	4630      	mov	r0, r6
 8012728:	f005 f862 	bl	80177f0 <ucdr_serialize_string>
 801272c:	6863      	ldr	r3, [r4, #4]
 801272e:	2b08      	cmp	r3, #8
 8012730:	d916      	bls.n	8012760 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 8012732:	b310      	cbz	r0, 801277a <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8012734:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
 8012736:	4630      	mov	r0, r6
 8012738:	f005 f85a 	bl	80177f0 <ucdr_serialize_string>
 801273c:	6863      	ldr	r3, [r4, #4]
 801273e:	2b09      	cmp	r3, #9
 8012740:	d90e      	bls.n	8012760 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 8012742:	b1d0      	cbz	r0, 801277a <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8012744:	f104 082c 	add.w	r8, r4, #44	@ 0x2c
 8012748:	2709      	movs	r7, #9
 801274a:	e000      	b.n	801274e <uxr_serialize_OBJK_Publisher_Binary_Qos+0xe6>
 801274c:	b1a8      	cbz	r0, 801277a <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 801274e:	f858 1b04 	ldr.w	r1, [r8], #4
 8012752:	4630      	mov	r0, r6
 8012754:	f005 f84c 	bl	80177f0 <ucdr_serialize_string>
 8012758:	6862      	ldr	r2, [r4, #4]
 801275a:	3701      	adds	r7, #1
 801275c:	4297      	cmp	r7, r2
 801275e:	d3f5      	bcc.n	801274c <uxr_serialize_OBJK_Publisher_Binary_Qos+0xe4>
 8012760:	4005      	ands	r5, r0
 8012762:	b2ed      	uxtb	r5, r5
 8012764:	e78a      	b.n	801267c <uxr_serialize_OBJK_Publisher_Binary_Qos+0x14>
 8012766:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 8012768:	4630      	mov	r0, r6
 801276a:	f104 0130 	add.w	r1, r4, #48	@ 0x30
 801276e:	f7fd fed9 	bl	8010524 <ucdr_serialize_sequence_uint8_t>
 8012772:	4005      	ands	r5, r0
 8012774:	4628      	mov	r0, r5
 8012776:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801277a:	2500      	movs	r5, #0
 801277c:	e77e      	b.n	801267c <uxr_serialize_OBJK_Publisher_Binary_Qos+0x14>
 801277e:	4028      	ands	r0, r5
 8012780:	b2c5      	uxtb	r5, r0
 8012782:	e77b      	b.n	801267c <uxr_serialize_OBJK_Publisher_Binary_Qos+0x14>

08012784 <uxr_serialize_OBJK_Publisher_Binary>:
 8012784:	b570      	push	{r4, r5, r6, lr}
 8012786:	460d      	mov	r5, r1
 8012788:	7809      	ldrb	r1, [r1, #0]
 801278a:	4606      	mov	r6, r0
 801278c:	f7fc fcb4 	bl	800f0f8 <ucdr_serialize_bool>
 8012790:	782b      	ldrb	r3, [r5, #0]
 8012792:	4604      	mov	r4, r0
 8012794:	b94b      	cbnz	r3, 80127aa <uxr_serialize_OBJK_Publisher_Binary+0x26>
 8012796:	7a29      	ldrb	r1, [r5, #8]
 8012798:	4630      	mov	r0, r6
 801279a:	f7fc fcad 	bl	800f0f8 <ucdr_serialize_bool>
 801279e:	7a2b      	ldrb	r3, [r5, #8]
 80127a0:	4004      	ands	r4, r0
 80127a2:	b2e4      	uxtb	r4, r4
 80127a4:	b943      	cbnz	r3, 80127b8 <uxr_serialize_OBJK_Publisher_Binary+0x34>
 80127a6:	4620      	mov	r0, r4
 80127a8:	bd70      	pop	{r4, r5, r6, pc}
 80127aa:	6869      	ldr	r1, [r5, #4]
 80127ac:	4630      	mov	r0, r6
 80127ae:	f005 f81f 	bl	80177f0 <ucdr_serialize_string>
 80127b2:	4004      	ands	r4, r0
 80127b4:	b2e4      	uxtb	r4, r4
 80127b6:	e7ee      	b.n	8012796 <uxr_serialize_OBJK_Publisher_Binary+0x12>
 80127b8:	f105 010c 	add.w	r1, r5, #12
 80127bc:	4630      	mov	r0, r6
 80127be:	f7ff ff53 	bl	8012668 <uxr_serialize_OBJK_Publisher_Binary_Qos>
 80127c2:	4004      	ands	r4, r0
 80127c4:	4620      	mov	r0, r4
 80127c6:	bd70      	pop	{r4, r5, r6, pc}

080127c8 <uxr_serialize_OBJK_Subscriber_Binary_Qos>:
 80127c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80127cc:	460c      	mov	r4, r1
 80127ce:	7809      	ldrb	r1, [r1, #0]
 80127d0:	4606      	mov	r6, r0
 80127d2:	f7fc fc91 	bl	800f0f8 <ucdr_serialize_bool>
 80127d6:	7823      	ldrb	r3, [r4, #0]
 80127d8:	4605      	mov	r5, r0
 80127da:	b96b      	cbnz	r3, 80127f8 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x30>
 80127dc:	f894 1028 	ldrb.w	r1, [r4, #40]	@ 0x28
 80127e0:	4630      	mov	r0, r6
 80127e2:	f7fc fc89 	bl	800f0f8 <ucdr_serialize_bool>
 80127e6:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
 80127ea:	4005      	ands	r5, r0
 80127ec:	b2ed      	uxtb	r5, r5
 80127ee:	2b00      	cmp	r3, #0
 80127f0:	d169      	bne.n	80128c6 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xfe>
 80127f2:	4628      	mov	r0, r5
 80127f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80127f8:	6861      	ldr	r1, [r4, #4]
 80127fa:	4630      	mov	r0, r6
 80127fc:	f7fc fec2 	bl	800f584 <ucdr_serialize_uint32_t>
 8012800:	6863      	ldr	r3, [r4, #4]
 8012802:	2b00      	cmp	r3, #0
 8012804:	d06b      	beq.n	80128de <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x116>
 8012806:	2800      	cmp	r0, #0
 8012808:	d067      	beq.n	80128da <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 801280a:	68a1      	ldr	r1, [r4, #8]
 801280c:	4630      	mov	r0, r6
 801280e:	f004 ffef 	bl	80177f0 <ucdr_serialize_string>
 8012812:	6863      	ldr	r3, [r4, #4]
 8012814:	2b01      	cmp	r3, #1
 8012816:	d953      	bls.n	80128c0 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 8012818:	2800      	cmp	r0, #0
 801281a:	d05e      	beq.n	80128da <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 801281c:	68e1      	ldr	r1, [r4, #12]
 801281e:	4630      	mov	r0, r6
 8012820:	f004 ffe6 	bl	80177f0 <ucdr_serialize_string>
 8012824:	6863      	ldr	r3, [r4, #4]
 8012826:	2b02      	cmp	r3, #2
 8012828:	d94a      	bls.n	80128c0 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 801282a:	2800      	cmp	r0, #0
 801282c:	d055      	beq.n	80128da <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 801282e:	6921      	ldr	r1, [r4, #16]
 8012830:	4630      	mov	r0, r6
 8012832:	f004 ffdd 	bl	80177f0 <ucdr_serialize_string>
 8012836:	6863      	ldr	r3, [r4, #4]
 8012838:	2b03      	cmp	r3, #3
 801283a:	d941      	bls.n	80128c0 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 801283c:	2800      	cmp	r0, #0
 801283e:	d04c      	beq.n	80128da <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 8012840:	6961      	ldr	r1, [r4, #20]
 8012842:	4630      	mov	r0, r6
 8012844:	f004 ffd4 	bl	80177f0 <ucdr_serialize_string>
 8012848:	6863      	ldr	r3, [r4, #4]
 801284a:	2b04      	cmp	r3, #4
 801284c:	d938      	bls.n	80128c0 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 801284e:	2800      	cmp	r0, #0
 8012850:	d043      	beq.n	80128da <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 8012852:	69a1      	ldr	r1, [r4, #24]
 8012854:	4630      	mov	r0, r6
 8012856:	f004 ffcb 	bl	80177f0 <ucdr_serialize_string>
 801285a:	6863      	ldr	r3, [r4, #4]
 801285c:	2b05      	cmp	r3, #5
 801285e:	d92f      	bls.n	80128c0 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 8012860:	2800      	cmp	r0, #0
 8012862:	d03a      	beq.n	80128da <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 8012864:	69e1      	ldr	r1, [r4, #28]
 8012866:	4630      	mov	r0, r6
 8012868:	f004 ffc2 	bl	80177f0 <ucdr_serialize_string>
 801286c:	6863      	ldr	r3, [r4, #4]
 801286e:	2b06      	cmp	r3, #6
 8012870:	d926      	bls.n	80128c0 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 8012872:	b390      	cbz	r0, 80128da <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 8012874:	6a21      	ldr	r1, [r4, #32]
 8012876:	4630      	mov	r0, r6
 8012878:	f004 ffba 	bl	80177f0 <ucdr_serialize_string>
 801287c:	6863      	ldr	r3, [r4, #4]
 801287e:	2b07      	cmp	r3, #7
 8012880:	d91e      	bls.n	80128c0 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 8012882:	b350      	cbz	r0, 80128da <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 8012884:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 8012886:	4630      	mov	r0, r6
 8012888:	f004 ffb2 	bl	80177f0 <ucdr_serialize_string>
 801288c:	6863      	ldr	r3, [r4, #4]
 801288e:	2b08      	cmp	r3, #8
 8012890:	d916      	bls.n	80128c0 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 8012892:	b310      	cbz	r0, 80128da <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 8012894:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
 8012896:	4630      	mov	r0, r6
 8012898:	f004 ffaa 	bl	80177f0 <ucdr_serialize_string>
 801289c:	6863      	ldr	r3, [r4, #4]
 801289e:	2b09      	cmp	r3, #9
 80128a0:	d90e      	bls.n	80128c0 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 80128a2:	b1d0      	cbz	r0, 80128da <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 80128a4:	f104 082c 	add.w	r8, r4, #44	@ 0x2c
 80128a8:	2709      	movs	r7, #9
 80128aa:	e000      	b.n	80128ae <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xe6>
 80128ac:	b1a8      	cbz	r0, 80128da <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 80128ae:	f858 1b04 	ldr.w	r1, [r8], #4
 80128b2:	4630      	mov	r0, r6
 80128b4:	f004 ff9c 	bl	80177f0 <ucdr_serialize_string>
 80128b8:	6862      	ldr	r2, [r4, #4]
 80128ba:	3701      	adds	r7, #1
 80128bc:	4297      	cmp	r7, r2
 80128be:	d3f5      	bcc.n	80128ac <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xe4>
 80128c0:	4005      	ands	r5, r0
 80128c2:	b2ed      	uxtb	r5, r5
 80128c4:	e78a      	b.n	80127dc <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x14>
 80128c6:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 80128c8:	4630      	mov	r0, r6
 80128ca:	f104 0130 	add.w	r1, r4, #48	@ 0x30
 80128ce:	f7fd fe29 	bl	8010524 <ucdr_serialize_sequence_uint8_t>
 80128d2:	4005      	ands	r5, r0
 80128d4:	4628      	mov	r0, r5
 80128d6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80128da:	2500      	movs	r5, #0
 80128dc:	e77e      	b.n	80127dc <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x14>
 80128de:	4028      	ands	r0, r5
 80128e0:	b2c5      	uxtb	r5, r0
 80128e2:	e77b      	b.n	80127dc <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x14>

080128e4 <uxr_serialize_OBJK_Subscriber_Binary>:
 80128e4:	b570      	push	{r4, r5, r6, lr}
 80128e6:	460d      	mov	r5, r1
 80128e8:	7809      	ldrb	r1, [r1, #0]
 80128ea:	4606      	mov	r6, r0
 80128ec:	f7fc fc04 	bl	800f0f8 <ucdr_serialize_bool>
 80128f0:	782b      	ldrb	r3, [r5, #0]
 80128f2:	4604      	mov	r4, r0
 80128f4:	b94b      	cbnz	r3, 801290a <uxr_serialize_OBJK_Subscriber_Binary+0x26>
 80128f6:	7a29      	ldrb	r1, [r5, #8]
 80128f8:	4630      	mov	r0, r6
 80128fa:	f7fc fbfd 	bl	800f0f8 <ucdr_serialize_bool>
 80128fe:	7a2b      	ldrb	r3, [r5, #8]
 8012900:	4004      	ands	r4, r0
 8012902:	b2e4      	uxtb	r4, r4
 8012904:	b943      	cbnz	r3, 8012918 <uxr_serialize_OBJK_Subscriber_Binary+0x34>
 8012906:	4620      	mov	r0, r4
 8012908:	bd70      	pop	{r4, r5, r6, pc}
 801290a:	6869      	ldr	r1, [r5, #4]
 801290c:	4630      	mov	r0, r6
 801290e:	f004 ff6f 	bl	80177f0 <ucdr_serialize_string>
 8012912:	4004      	ands	r4, r0
 8012914:	b2e4      	uxtb	r4, r4
 8012916:	e7ee      	b.n	80128f6 <uxr_serialize_OBJK_Subscriber_Binary+0x12>
 8012918:	f105 010c 	add.w	r1, r5, #12
 801291c:	4630      	mov	r0, r6
 801291e:	f7ff ff53 	bl	80127c8 <uxr_serialize_OBJK_Subscriber_Binary_Qos>
 8012922:	4004      	ands	r4, r0
 8012924:	4620      	mov	r0, r4
 8012926:	bd70      	pop	{r4, r5, r6, pc}

08012928 <uxr_serialize_OBJK_Endpoint_QosBinary>:
 8012928:	e92d 4368 	stmdb	sp!, {r3, r5, r6, r8, r9, lr}
 801292c:	4688      	mov	r8, r1
 801292e:	8809      	ldrh	r1, [r1, #0]
 8012930:	4681      	mov	r9, r0
 8012932:	f7fc fc3d 	bl	800f1b0 <ucdr_serialize_uint16_t>
 8012936:	f898 1002 	ldrb.w	r1, [r8, #2]
 801293a:	4606      	mov	r6, r0
 801293c:	4648      	mov	r0, r9
 801293e:	f7fc fbdb 	bl	800f0f8 <ucdr_serialize_bool>
 8012942:	f898 3002 	ldrb.w	r3, [r8, #2]
 8012946:	4030      	ands	r0, r6
 8012948:	b2c5      	uxtb	r5, r0
 801294a:	b9eb      	cbnz	r3, 8012988 <uxr_serialize_OBJK_Endpoint_QosBinary+0x60>
 801294c:	f898 1006 	ldrb.w	r1, [r8, #6]
 8012950:	4648      	mov	r0, r9
 8012952:	f7fc fbd1 	bl	800f0f8 <ucdr_serialize_bool>
 8012956:	f898 3006 	ldrb.w	r3, [r8, #6]
 801295a:	4005      	ands	r5, r0
 801295c:	bb7b      	cbnz	r3, 80129be <uxr_serialize_OBJK_Endpoint_QosBinary+0x96>
 801295e:	f898 100c 	ldrb.w	r1, [r8, #12]
 8012962:	4648      	mov	r0, r9
 8012964:	f7fc fbc8 	bl	800f0f8 <ucdr_serialize_bool>
 8012968:	f898 300c 	ldrb.w	r3, [r8, #12]
 801296c:	4005      	ands	r5, r0
 801296e:	b9f3      	cbnz	r3, 80129ae <uxr_serialize_OBJK_Endpoint_QosBinary+0x86>
 8012970:	f898 1014 	ldrb.w	r1, [r8, #20]
 8012974:	4648      	mov	r0, r9
 8012976:	f7fc fbbf 	bl	800f0f8 <ucdr_serialize_bool>
 801297a:	f898 3014 	ldrb.w	r3, [r8, #20]
 801297e:	4005      	ands	r5, r0
 8012980:	b94b      	cbnz	r3, 8012996 <uxr_serialize_OBJK_Endpoint_QosBinary+0x6e>
 8012982:	4628      	mov	r0, r5
 8012984:	e8bd 8368 	ldmia.w	sp!, {r3, r5, r6, r8, r9, pc}
 8012988:	f8b8 1004 	ldrh.w	r1, [r8, #4]
 801298c:	4648      	mov	r0, r9
 801298e:	f7fc fc0f 	bl	800f1b0 <ucdr_serialize_uint16_t>
 8012992:	4005      	ands	r5, r0
 8012994:	e7da      	b.n	801294c <uxr_serialize_OBJK_Endpoint_QosBinary+0x24>
 8012996:	f8d8 2018 	ldr.w	r2, [r8, #24]
 801299a:	4648      	mov	r0, r9
 801299c:	f108 011c 	add.w	r1, r8, #28
 80129a0:	f7fd fdc0 	bl	8010524 <ucdr_serialize_sequence_uint8_t>
 80129a4:	4028      	ands	r0, r5
 80129a6:	b2c5      	uxtb	r5, r0
 80129a8:	4628      	mov	r0, r5
 80129aa:	e8bd 8368 	ldmia.w	sp!, {r3, r5, r6, r8, r9, pc}
 80129ae:	f8d8 1010 	ldr.w	r1, [r8, #16]
 80129b2:	4648      	mov	r0, r9
 80129b4:	f7fc fde6 	bl	800f584 <ucdr_serialize_uint32_t>
 80129b8:	4028      	ands	r0, r5
 80129ba:	b2c5      	uxtb	r5, r0
 80129bc:	e7d8      	b.n	8012970 <uxr_serialize_OBJK_Endpoint_QosBinary+0x48>
 80129be:	f8d8 1008 	ldr.w	r1, [r8, #8]
 80129c2:	4648      	mov	r0, r9
 80129c4:	f7fc fdde 	bl	800f584 <ucdr_serialize_uint32_t>
 80129c8:	4028      	ands	r0, r5
 80129ca:	b2c5      	uxtb	r5, r0
 80129cc:	e7c7      	b.n	801295e <uxr_serialize_OBJK_Endpoint_QosBinary+0x36>
 80129ce:	bf00      	nop

080129d0 <uxr_serialize_OBJK_DataReader_Binary>:
 80129d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80129d2:	2202      	movs	r2, #2
 80129d4:	460c      	mov	r4, r1
 80129d6:	4606      	mov	r6, r0
 80129d8:	f004 fd96 	bl	8017508 <ucdr_serialize_array_uint8_t>
 80129dc:	78a1      	ldrb	r1, [r4, #2]
 80129de:	4605      	mov	r5, r0
 80129e0:	4630      	mov	r0, r6
 80129e2:	f7fc fb89 	bl	800f0f8 <ucdr_serialize_bool>
 80129e6:	78a3      	ldrb	r3, [r4, #2]
 80129e8:	4005      	ands	r5, r0
 80129ea:	b2ed      	uxtb	r5, r5
 80129ec:	b90b      	cbnz	r3, 80129f2 <uxr_serialize_OBJK_DataReader_Binary+0x22>
 80129ee:	4628      	mov	r0, r5
 80129f0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80129f2:	f104 0108 	add.w	r1, r4, #8
 80129f6:	4630      	mov	r0, r6
 80129f8:	f7ff ff96 	bl	8012928 <uxr_serialize_OBJK_Endpoint_QosBinary>
 80129fc:	f894 102c 	ldrb.w	r1, [r4, #44]	@ 0x2c
 8012a00:	4607      	mov	r7, r0
 8012a02:	4630      	mov	r0, r6
 8012a04:	f7fc fb78 	bl	800f0f8 <ucdr_serialize_bool>
 8012a08:	f894 302c 	ldrb.w	r3, [r4, #44]	@ 0x2c
 8012a0c:	4038      	ands	r0, r7
 8012a0e:	b2c7      	uxtb	r7, r0
 8012a10:	b95b      	cbnz	r3, 8012a2a <uxr_serialize_OBJK_DataReader_Binary+0x5a>
 8012a12:	f894 1038 	ldrb.w	r1, [r4, #56]	@ 0x38
 8012a16:	4630      	mov	r0, r6
 8012a18:	f7fc fb6e 	bl	800f0f8 <ucdr_serialize_bool>
 8012a1c:	f894 3038 	ldrb.w	r3, [r4, #56]	@ 0x38
 8012a20:	4007      	ands	r7, r0
 8012a22:	b94b      	cbnz	r3, 8012a38 <uxr_serialize_OBJK_DataReader_Binary+0x68>
 8012a24:	403d      	ands	r5, r7
 8012a26:	4628      	mov	r0, r5
 8012a28:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012a2a:	e9d4 230c 	ldrd	r2, r3, [r4, #48]	@ 0x30
 8012a2e:	4630      	mov	r0, r6
 8012a30:	f7fc fffe 	bl	800fa30 <ucdr_serialize_uint64_t>
 8012a34:	4007      	ands	r7, r0
 8012a36:	e7ec      	b.n	8012a12 <uxr_serialize_OBJK_DataReader_Binary+0x42>
 8012a38:	6be1      	ldr	r1, [r4, #60]	@ 0x3c
 8012a3a:	4630      	mov	r0, r6
 8012a3c:	f004 fed8 	bl	80177f0 <ucdr_serialize_string>
 8012a40:	4007      	ands	r7, r0
 8012a42:	b2ff      	uxtb	r7, r7
 8012a44:	e7ee      	b.n	8012a24 <uxr_serialize_OBJK_DataReader_Binary+0x54>
 8012a46:	bf00      	nop

08012a48 <uxr_serialize_OBJK_DataWriter_Binary>:
 8012a48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012a4a:	2202      	movs	r2, #2
 8012a4c:	460d      	mov	r5, r1
 8012a4e:	4606      	mov	r6, r0
 8012a50:	f004 fd5a 	bl	8017508 <ucdr_serialize_array_uint8_t>
 8012a54:	78a9      	ldrb	r1, [r5, #2]
 8012a56:	4604      	mov	r4, r0
 8012a58:	4630      	mov	r0, r6
 8012a5a:	f7fc fb4d 	bl	800f0f8 <ucdr_serialize_bool>
 8012a5e:	78ab      	ldrb	r3, [r5, #2]
 8012a60:	4004      	ands	r4, r0
 8012a62:	b2e4      	uxtb	r4, r4
 8012a64:	b90b      	cbnz	r3, 8012a6a <uxr_serialize_OBJK_DataWriter_Binary+0x22>
 8012a66:	4620      	mov	r0, r4
 8012a68:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012a6a:	f105 0108 	add.w	r1, r5, #8
 8012a6e:	4630      	mov	r0, r6
 8012a70:	f7ff ff5a 	bl	8012928 <uxr_serialize_OBJK_Endpoint_QosBinary>
 8012a74:	f895 102c 	ldrb.w	r1, [r5, #44]	@ 0x2c
 8012a78:	4607      	mov	r7, r0
 8012a7a:	4630      	mov	r0, r6
 8012a7c:	f7fc fb3c 	bl	800f0f8 <ucdr_serialize_bool>
 8012a80:	f895 302c 	ldrb.w	r3, [r5, #44]	@ 0x2c
 8012a84:	4007      	ands	r7, r0
 8012a86:	b2ff      	uxtb	r7, r7
 8012a88:	b913      	cbnz	r3, 8012a90 <uxr_serialize_OBJK_DataWriter_Binary+0x48>
 8012a8a:	403c      	ands	r4, r7
 8012a8c:	4620      	mov	r0, r4
 8012a8e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012a90:	e9d5 230c 	ldrd	r2, r3, [r5, #48]	@ 0x30
 8012a94:	4630      	mov	r0, r6
 8012a96:	f7fc ffcb 	bl	800fa30 <ucdr_serialize_uint64_t>
 8012a9a:	4007      	ands	r7, r0
 8012a9c:	e7f5      	b.n	8012a8a <uxr_serialize_OBJK_DataWriter_Binary+0x42>
 8012a9e:	bf00      	nop

08012aa0 <uxr_deserialize_ObjectVariant>:
 8012aa0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012aa2:	4605      	mov	r5, r0
 8012aa4:	460e      	mov	r6, r1
 8012aa6:	f7fc fb6d 	bl	800f184 <ucdr_deserialize_uint8_t>
 8012aaa:	b320      	cbz	r0, 8012af6 <uxr_deserialize_ObjectVariant+0x56>
 8012aac:	7833      	ldrb	r3, [r6, #0]
 8012aae:	3b01      	subs	r3, #1
 8012ab0:	4604      	mov	r4, r0
 8012ab2:	2b0d      	cmp	r3, #13
 8012ab4:	d81d      	bhi.n	8012af2 <uxr_deserialize_ObjectVariant+0x52>
 8012ab6:	e8df f003 	tbb	[pc, r3]
 8012aba:	2107      	.short	0x2107
 8012abc:	21214b4b 	.word	0x21214b4b
 8012ac0:	381c2121 	.word	0x381c2121
 8012ac4:	876a3838 	.word	0x876a3838
 8012ac8:	1d31      	adds	r1, r6, #4
 8012aca:	4628      	mov	r0, r5
 8012acc:	f7fc fb5a 	bl	800f184 <ucdr_deserialize_uint8_t>
 8012ad0:	4607      	mov	r7, r0
 8012ad2:	b138      	cbz	r0, 8012ae4 <uxr_deserialize_ObjectVariant+0x44>
 8012ad4:	7933      	ldrb	r3, [r6, #4]
 8012ad6:	2b02      	cmp	r3, #2
 8012ad8:	d07c      	beq.n	8012bd4 <uxr_deserialize_ObjectVariant+0x134>
 8012ada:	2b03      	cmp	r3, #3
 8012adc:	f000 8082 	beq.w	8012be4 <uxr_deserialize_ObjectVariant+0x144>
 8012ae0:	2b01      	cmp	r3, #1
 8012ae2:	d077      	beq.n	8012bd4 <uxr_deserialize_ObjectVariant+0x134>
 8012ae4:	f506 7103 	add.w	r1, r6, #524	@ 0x20c
 8012ae8:	4628      	mov	r0, r5
 8012aea:	f7fd f8f1 	bl	800fcd0 <ucdr_deserialize_int16_t>
 8012aee:	4038      	ands	r0, r7
 8012af0:	b2c4      	uxtb	r4, r0
 8012af2:	4620      	mov	r0, r4
 8012af4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012af6:	2400      	movs	r4, #0
 8012af8:	4620      	mov	r0, r4
 8012afa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012afc:	1d31      	adds	r1, r6, #4
 8012afe:	4628      	mov	r0, r5
 8012b00:	f7fc fb40 	bl	800f184 <ucdr_deserialize_uint8_t>
 8012b04:	4607      	mov	r7, r0
 8012b06:	b130      	cbz	r0, 8012b16 <uxr_deserialize_ObjectVariant+0x76>
 8012b08:	7933      	ldrb	r3, [r6, #4]
 8012b0a:	2b02      	cmp	r3, #2
 8012b0c:	d037      	beq.n	8012b7e <uxr_deserialize_ObjectVariant+0xde>
 8012b0e:	2b03      	cmp	r3, #3
 8012b10:	d02a      	beq.n	8012b68 <uxr_deserialize_ObjectVariant+0xc8>
 8012b12:	2b01      	cmp	r3, #1
 8012b14:	d033      	beq.n	8012b7e <uxr_deserialize_ObjectVariant+0xde>
 8012b16:	f506 7103 	add.w	r1, r6, #524	@ 0x20c
 8012b1a:	4628      	mov	r0, r5
 8012b1c:	2202      	movs	r2, #2
 8012b1e:	f004 fd57 	bl	80175d0 <ucdr_deserialize_array_uint8_t>
 8012b22:	4038      	ands	r0, r7
 8012b24:	b2c4      	uxtb	r4, r0
 8012b26:	4620      	mov	r0, r4
 8012b28:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012b2a:	1d31      	adds	r1, r6, #4
 8012b2c:	4628      	mov	r0, r5
 8012b2e:	f7fc fb29 	bl	800f184 <ucdr_deserialize_uint8_t>
 8012b32:	2800      	cmp	r0, #0
 8012b34:	d0df      	beq.n	8012af6 <uxr_deserialize_ObjectVariant+0x56>
 8012b36:	7933      	ldrb	r3, [r6, #4]
 8012b38:	2b01      	cmp	r3, #1
 8012b3a:	d001      	beq.n	8012b40 <uxr_deserialize_ObjectVariant+0xa0>
 8012b3c:	2b02      	cmp	r3, #2
 8012b3e:	d1d8      	bne.n	8012af2 <uxr_deserialize_ObjectVariant+0x52>
 8012b40:	68b1      	ldr	r1, [r6, #8]
 8012b42:	4628      	mov	r0, r5
 8012b44:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8012b48:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8012b4c:	f004 be60 	b.w	8017810 <ucdr_deserialize_string>
 8012b50:	1d31      	adds	r1, r6, #4
 8012b52:	4628      	mov	r0, r5
 8012b54:	f7fc fb16 	bl	800f184 <ucdr_deserialize_uint8_t>
 8012b58:	4607      	mov	r7, r0
 8012b5a:	2800      	cmp	r0, #0
 8012b5c:	d0db      	beq.n	8012b16 <uxr_deserialize_ObjectVariant+0x76>
 8012b5e:	7933      	ldrb	r3, [r6, #4]
 8012b60:	2b02      	cmp	r3, #2
 8012b62:	d00c      	beq.n	8012b7e <uxr_deserialize_ObjectVariant+0xde>
 8012b64:	2b03      	cmp	r3, #3
 8012b66:	d1d6      	bne.n	8012b16 <uxr_deserialize_ObjectVariant+0x76>
 8012b68:	f106 0308 	add.w	r3, r6, #8
 8012b6c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8012b70:	f106 010c 	add.w	r1, r6, #12
 8012b74:	4628      	mov	r0, r5
 8012b76:	f7fd fce7 	bl	8010548 <ucdr_deserialize_sequence_uint8_t>
 8012b7a:	4607      	mov	r7, r0
 8012b7c:	e7cb      	b.n	8012b16 <uxr_deserialize_ObjectVariant+0x76>
 8012b7e:	68b1      	ldr	r1, [r6, #8]
 8012b80:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8012b84:	4628      	mov	r0, r5
 8012b86:	f004 fe43 	bl	8017810 <ucdr_deserialize_string>
 8012b8a:	4607      	mov	r7, r0
 8012b8c:	e7c3      	b.n	8012b16 <uxr_deserialize_ObjectVariant+0x76>
 8012b8e:	2204      	movs	r2, #4
 8012b90:	18b1      	adds	r1, r6, r2
 8012b92:	4628      	mov	r0, r5
 8012b94:	f004 fd1c 	bl	80175d0 <ucdr_deserialize_array_uint8_t>
 8012b98:	2202      	movs	r2, #2
 8012b9a:	4604      	mov	r4, r0
 8012b9c:	f106 0108 	add.w	r1, r6, #8
 8012ba0:	4628      	mov	r0, r5
 8012ba2:	f004 fd15 	bl	80175d0 <ucdr_deserialize_array_uint8_t>
 8012ba6:	2202      	movs	r2, #2
 8012ba8:	4004      	ands	r4, r0
 8012baa:	f106 010a 	add.w	r1, r6, #10
 8012bae:	4628      	mov	r0, r5
 8012bb0:	f004 fd0e 	bl	80175d0 <ucdr_deserialize_array_uint8_t>
 8012bb4:	b2e4      	uxtb	r4, r4
 8012bb6:	4603      	mov	r3, r0
 8012bb8:	f106 010c 	add.w	r1, r6, #12
 8012bbc:	4628      	mov	r0, r5
 8012bbe:	401c      	ands	r4, r3
 8012bc0:	f7fc fab0 	bl	800f124 <ucdr_deserialize_bool>
 8012bc4:	4004      	ands	r4, r0
 8012bc6:	e794      	b.n	8012af2 <uxr_deserialize_ObjectVariant+0x52>
 8012bc8:	1d31      	adds	r1, r6, #4
 8012bca:	4628      	mov	r0, r5
 8012bcc:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8012bd0:	f7ff bbd0 	b.w	8012374 <uxr_deserialize_CLIENT_Representation>
 8012bd4:	68b1      	ldr	r1, [r6, #8]
 8012bd6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8012bda:	4628      	mov	r0, r5
 8012bdc:	f004 fe18 	bl	8017810 <ucdr_deserialize_string>
 8012be0:	4607      	mov	r7, r0
 8012be2:	e77f      	b.n	8012ae4 <uxr_deserialize_ObjectVariant+0x44>
 8012be4:	f106 0308 	add.w	r3, r6, #8
 8012be8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8012bec:	f106 010c 	add.w	r1, r6, #12
 8012bf0:	4628      	mov	r0, r5
 8012bf2:	f7fd fca9 	bl	8010548 <ucdr_deserialize_sequence_uint8_t>
 8012bf6:	4607      	mov	r7, r0
 8012bf8:	e774      	b.n	8012ae4 <uxr_deserialize_ObjectVariant+0x44>
 8012bfa:	bf00      	nop

08012bfc <uxr_deserialize_BaseObjectRequest>:
 8012bfc:	b570      	push	{r4, r5, r6, lr}
 8012bfe:	2202      	movs	r2, #2
 8012c00:	4605      	mov	r5, r0
 8012c02:	460e      	mov	r6, r1
 8012c04:	f004 fce4 	bl	80175d0 <ucdr_deserialize_array_uint8_t>
 8012c08:	1cb1      	adds	r1, r6, #2
 8012c0a:	4604      	mov	r4, r0
 8012c0c:	2202      	movs	r2, #2
 8012c0e:	4628      	mov	r0, r5
 8012c10:	f004 fcde 	bl	80175d0 <ucdr_deserialize_array_uint8_t>
 8012c14:	4020      	ands	r0, r4
 8012c16:	b2c0      	uxtb	r0, r0
 8012c18:	bd70      	pop	{r4, r5, r6, pc}
 8012c1a:	bf00      	nop

08012c1c <uxr_serialize_AGENT_ActivityInfo>:
 8012c1c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012c20:	460e      	mov	r6, r1
 8012c22:	f9b1 1000 	ldrsh.w	r1, [r1]
 8012c26:	4607      	mov	r7, r0
 8012c28:	f7fc ffd2 	bl	800fbd0 <ucdr_serialize_int16_t>
 8012c2c:	6871      	ldr	r1, [r6, #4]
 8012c2e:	4680      	mov	r8, r0
 8012c30:	4638      	mov	r0, r7
 8012c32:	f7fc fca7 	bl	800f584 <ucdr_serialize_uint32_t>
 8012c36:	6873      	ldr	r3, [r6, #4]
 8012c38:	2b00      	cmp	r3, #0
 8012c3a:	d06a      	beq.n	8012d12 <uxr_serialize_AGENT_ActivityInfo+0xf6>
 8012c3c:	b318      	cbz	r0, 8012c86 <uxr_serialize_AGENT_ActivityInfo+0x6a>
 8012c3e:	f106 0904 	add.w	r9, r6, #4
 8012c42:	2500      	movs	r5, #0
 8012c44:	eb05 0445 	add.w	r4, r5, r5, lsl #1
 8012c48:	eb06 04c4 	add.w	r4, r6, r4, lsl #3
 8012c4c:	7a21      	ldrb	r1, [r4, #8]
 8012c4e:	4638      	mov	r0, r7
 8012c50:	f7fc fa82 	bl	800f158 <ucdr_serialize_uint8_t>
 8012c54:	2800      	cmp	r0, #0
 8012c56:	d051      	beq.n	8012cfc <uxr_serialize_AGENT_ActivityInfo+0xe0>
 8012c58:	7a23      	ldrb	r3, [r4, #8]
 8012c5a:	eb05 0145 	add.w	r1, r5, r5, lsl #1
 8012c5e:	00c9      	lsls	r1, r1, #3
 8012c60:	ea4f 0a45 	mov.w	sl, r5, lsl #1
 8012c64:	2b03      	cmp	r3, #3
 8012c66:	d859      	bhi.n	8012d1c <uxr_serialize_AGENT_ActivityInfo+0x100>
 8012c68:	e8df f003 	tbb	[pc, r3]
 8012c6c:	02122436 	.word	0x02122436
 8012c70:	4449      	add	r1, r9
 8012c72:	4638      	mov	r0, r7
 8012c74:	6889      	ldr	r1, [r1, #8]
 8012c76:	f004 fdbb 	bl	80177f0 <ucdr_serialize_string>
 8012c7a:	6873      	ldr	r3, [r6, #4]
 8012c7c:	3501      	adds	r5, #1
 8012c7e:	429d      	cmp	r5, r3
 8012c80:	d240      	bcs.n	8012d04 <uxr_serialize_AGENT_ActivityInfo+0xe8>
 8012c82:	2800      	cmp	r0, #0
 8012c84:	d1de      	bne.n	8012c44 <uxr_serialize_AGENT_ActivityInfo+0x28>
 8012c86:	f04f 0800 	mov.w	r8, #0
 8012c8a:	4640      	mov	r0, r8
 8012c8c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012c90:	3108      	adds	r1, #8
 8012c92:	4449      	add	r1, r9
 8012c94:	2210      	movs	r2, #16
 8012c96:	4638      	mov	r0, r7
 8012c98:	f004 fc36 	bl	8017508 <ucdr_serialize_array_uint8_t>
 8012c9c:	44aa      	add	sl, r5
 8012c9e:	eb06 0aca 	add.w	sl, r6, sl, lsl #3
 8012ca2:	4604      	mov	r4, r0
 8012ca4:	f8da 101c 	ldr.w	r1, [sl, #28]
 8012ca8:	4638      	mov	r0, r7
 8012caa:	f7fc fc6b 	bl	800f584 <ucdr_serialize_uint32_t>
 8012cae:	4020      	ands	r0, r4
 8012cb0:	b2c0      	uxtb	r0, r0
 8012cb2:	e7e2      	b.n	8012c7a <uxr_serialize_AGENT_ActivityInfo+0x5e>
 8012cb4:	3108      	adds	r1, #8
 8012cb6:	4449      	add	r1, r9
 8012cb8:	2204      	movs	r2, #4
 8012cba:	4638      	mov	r0, r7
 8012cbc:	f004 fc24 	bl	8017508 <ucdr_serialize_array_uint8_t>
 8012cc0:	44aa      	add	sl, r5
 8012cc2:	eb06 0aca 	add.w	sl, r6, sl, lsl #3
 8012cc6:	4604      	mov	r4, r0
 8012cc8:	f8ba 1010 	ldrh.w	r1, [sl, #16]
 8012ccc:	4638      	mov	r0, r7
 8012cce:	f7fc fa6f 	bl	800f1b0 <ucdr_serialize_uint16_t>
 8012cd2:	4020      	ands	r0, r4
 8012cd4:	b2c0      	uxtb	r0, r0
 8012cd6:	e7d0      	b.n	8012c7a <uxr_serialize_AGENT_ActivityInfo+0x5e>
 8012cd8:	3108      	adds	r1, #8
 8012cda:	4449      	add	r1, r9
 8012cdc:	2202      	movs	r2, #2
 8012cde:	4638      	mov	r0, r7
 8012ce0:	f004 fc12 	bl	8017508 <ucdr_serialize_array_uint8_t>
 8012ce4:	44aa      	add	sl, r5
 8012ce6:	eb06 0aca 	add.w	sl, r6, sl, lsl #3
 8012cea:	4604      	mov	r4, r0
 8012cec:	f89a 100e 	ldrb.w	r1, [sl, #14]
 8012cf0:	4638      	mov	r0, r7
 8012cf2:	f7fc fa31 	bl	800f158 <ucdr_serialize_uint8_t>
 8012cf6:	4020      	ands	r0, r4
 8012cf8:	b2c0      	uxtb	r0, r0
 8012cfa:	e7be      	b.n	8012c7a <uxr_serialize_AGENT_ActivityInfo+0x5e>
 8012cfc:	6873      	ldr	r3, [r6, #4]
 8012cfe:	3501      	adds	r5, #1
 8012d00:	429d      	cmp	r5, r3
 8012d02:	d3c0      	bcc.n	8012c86 <uxr_serialize_AGENT_ActivityInfo+0x6a>
 8012d04:	ea08 0000 	and.w	r0, r8, r0
 8012d08:	fa5f f880 	uxtb.w	r8, r0
 8012d0c:	4640      	mov	r0, r8
 8012d0e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012d12:	ea08 0800 	and.w	r8, r8, r0
 8012d16:	fa5f f888 	uxtb.w	r8, r8
 8012d1a:	e7b6      	b.n	8012c8a <uxr_serialize_AGENT_ActivityInfo+0x6e>
 8012d1c:	6873      	ldr	r3, [r6, #4]
 8012d1e:	3501      	adds	r5, #1
 8012d20:	42ab      	cmp	r3, r5
 8012d22:	f104 0418 	add.w	r4, r4, #24
 8012d26:	d891      	bhi.n	8012c4c <uxr_serialize_AGENT_ActivityInfo+0x30>
 8012d28:	e7af      	b.n	8012c8a <uxr_serialize_AGENT_ActivityInfo+0x6e>
 8012d2a:	bf00      	nop

08012d2c <uxr_serialize_ActivityInfoVariant>:
 8012d2c:	b570      	push	{r4, r5, r6, lr}
 8012d2e:	460d      	mov	r5, r1
 8012d30:	7809      	ldrb	r1, [r1, #0]
 8012d32:	4606      	mov	r6, r0
 8012d34:	f7fc fa10 	bl	800f158 <ucdr_serialize_uint8_t>
 8012d38:	b130      	cbz	r0, 8012d48 <uxr_serialize_ActivityInfoVariant+0x1c>
 8012d3a:	782b      	ldrb	r3, [r5, #0]
 8012d3c:	2b06      	cmp	r3, #6
 8012d3e:	d019      	beq.n	8012d74 <uxr_serialize_ActivityInfoVariant+0x48>
 8012d40:	2b0d      	cmp	r3, #13
 8012d42:	d010      	beq.n	8012d66 <uxr_serialize_ActivityInfoVariant+0x3a>
 8012d44:	2b05      	cmp	r3, #5
 8012d46:	d000      	beq.n	8012d4a <uxr_serialize_ActivityInfoVariant+0x1e>
 8012d48:	bd70      	pop	{r4, r5, r6, pc}
 8012d4a:	f9b5 1008 	ldrsh.w	r1, [r5, #8]
 8012d4e:	4630      	mov	r0, r6
 8012d50:	f7fc ff3e 	bl	800fbd0 <ucdr_serialize_int16_t>
 8012d54:	e9d5 2304 	ldrd	r2, r3, [r5, #16]
 8012d58:	4604      	mov	r4, r0
 8012d5a:	4630      	mov	r0, r6
 8012d5c:	f7fc fe68 	bl	800fa30 <ucdr_serialize_uint64_t>
 8012d60:	4020      	ands	r0, r4
 8012d62:	b2c0      	uxtb	r0, r0
 8012d64:	bd70      	pop	{r4, r5, r6, pc}
 8012d66:	f105 0108 	add.w	r1, r5, #8
 8012d6a:	4630      	mov	r0, r6
 8012d6c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8012d70:	f7ff bf54 	b.w	8012c1c <uxr_serialize_AGENT_ActivityInfo>
 8012d74:	f9b5 1008 	ldrsh.w	r1, [r5, #8]
 8012d78:	4630      	mov	r0, r6
 8012d7a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8012d7e:	f7fc bf27 	b.w	800fbd0 <ucdr_serialize_int16_t>
 8012d82:	bf00      	nop

08012d84 <uxr_deserialize_BaseObjectReply>:
 8012d84:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012d88:	2202      	movs	r2, #2
 8012d8a:	4606      	mov	r6, r0
 8012d8c:	460f      	mov	r7, r1
 8012d8e:	f004 fc1f 	bl	80175d0 <ucdr_deserialize_array_uint8_t>
 8012d92:	2202      	movs	r2, #2
 8012d94:	1cb9      	adds	r1, r7, #2
 8012d96:	4605      	mov	r5, r0
 8012d98:	4630      	mov	r0, r6
 8012d9a:	f004 fc19 	bl	80175d0 <ucdr_deserialize_array_uint8_t>
 8012d9e:	1d39      	adds	r1, r7, #4
 8012da0:	4680      	mov	r8, r0
 8012da2:	4630      	mov	r0, r6
 8012da4:	f7fc f9ee 	bl	800f184 <ucdr_deserialize_uint8_t>
 8012da8:	1d79      	adds	r1, r7, #5
 8012daa:	4604      	mov	r4, r0
 8012dac:	4630      	mov	r0, r6
 8012dae:	f7fc f9e9 	bl	800f184 <ucdr_deserialize_uint8_t>
 8012db2:	ea05 0508 	and.w	r5, r5, r8
 8012db6:	402c      	ands	r4, r5
 8012db8:	4020      	ands	r0, r4
 8012dba:	b2c0      	uxtb	r0, r0
 8012dbc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08012dc0 <uxr_serialize_ReadSpecification>:
 8012dc0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012dc4:	460e      	mov	r6, r1
 8012dc6:	7809      	ldrb	r1, [r1, #0]
 8012dc8:	4607      	mov	r7, r0
 8012dca:	f7fc f9c5 	bl	800f158 <ucdr_serialize_uint8_t>
 8012dce:	7871      	ldrb	r1, [r6, #1]
 8012dd0:	4604      	mov	r4, r0
 8012dd2:	4638      	mov	r0, r7
 8012dd4:	f7fc f9c0 	bl	800f158 <ucdr_serialize_uint8_t>
 8012dd8:	78b1      	ldrb	r1, [r6, #2]
 8012dda:	4004      	ands	r4, r0
 8012ddc:	4638      	mov	r0, r7
 8012dde:	f7fc f98b 	bl	800f0f8 <ucdr_serialize_bool>
 8012de2:	78b3      	ldrb	r3, [r6, #2]
 8012de4:	b2e4      	uxtb	r4, r4
 8012de6:	4004      	ands	r4, r0
 8012de8:	b94b      	cbnz	r3, 8012dfe <uxr_serialize_ReadSpecification+0x3e>
 8012dea:	7a31      	ldrb	r1, [r6, #8]
 8012dec:	4638      	mov	r0, r7
 8012dee:	f7fc f983 	bl	800f0f8 <ucdr_serialize_bool>
 8012df2:	7a33      	ldrb	r3, [r6, #8]
 8012df4:	4004      	ands	r4, r0
 8012df6:	b943      	cbnz	r3, 8012e0a <uxr_serialize_ReadSpecification+0x4a>
 8012df8:	4620      	mov	r0, r4
 8012dfa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012dfe:	6871      	ldr	r1, [r6, #4]
 8012e00:	4638      	mov	r0, r7
 8012e02:	f004 fcf5 	bl	80177f0 <ucdr_serialize_string>
 8012e06:	4004      	ands	r4, r0
 8012e08:	e7ef      	b.n	8012dea <uxr_serialize_ReadSpecification+0x2a>
 8012e0a:	8971      	ldrh	r1, [r6, #10]
 8012e0c:	4638      	mov	r0, r7
 8012e0e:	f7fc f9cf 	bl	800f1b0 <ucdr_serialize_uint16_t>
 8012e12:	89b1      	ldrh	r1, [r6, #12]
 8012e14:	4605      	mov	r5, r0
 8012e16:	4638      	mov	r0, r7
 8012e18:	f7fc f9ca 	bl	800f1b0 <ucdr_serialize_uint16_t>
 8012e1c:	89f1      	ldrh	r1, [r6, #14]
 8012e1e:	4005      	ands	r5, r0
 8012e20:	4638      	mov	r0, r7
 8012e22:	f7fc f9c5 	bl	800f1b0 <ucdr_serialize_uint16_t>
 8012e26:	8a31      	ldrh	r1, [r6, #16]
 8012e28:	4680      	mov	r8, r0
 8012e2a:	4638      	mov	r0, r7
 8012e2c:	f7fc f9c0 	bl	800f1b0 <ucdr_serialize_uint16_t>
 8012e30:	b2ed      	uxtb	r5, r5
 8012e32:	4025      	ands	r5, r4
 8012e34:	ea08 0505 	and.w	r5, r8, r5
 8012e38:	ea00 0405 	and.w	r4, r0, r5
 8012e3c:	4620      	mov	r0, r4
 8012e3e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012e42:	bf00      	nop

08012e44 <uxr_serialize_CREATE_CLIENT_Payload>:
 8012e44:	f7ff ba3a 	b.w	80122bc <uxr_serialize_CLIENT_Representation>

08012e48 <uxr_serialize_CREATE_Payload>:
 8012e48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012e4a:	2202      	movs	r2, #2
 8012e4c:	4606      	mov	r6, r0
 8012e4e:	460d      	mov	r5, r1
 8012e50:	f004 fb5a 	bl	8017508 <ucdr_serialize_array_uint8_t>
 8012e54:	1ca9      	adds	r1, r5, #2
 8012e56:	4604      	mov	r4, r0
 8012e58:	2202      	movs	r2, #2
 8012e5a:	4630      	mov	r0, r6
 8012e5c:	f004 fb54 	bl	8017508 <ucdr_serialize_array_uint8_t>
 8012e60:	7929      	ldrb	r1, [r5, #4]
 8012e62:	4607      	mov	r7, r0
 8012e64:	4630      	mov	r0, r6
 8012e66:	f7fc f977 	bl	800f158 <ucdr_serialize_uint8_t>
 8012e6a:	b328      	cbz	r0, 8012eb8 <uxr_serialize_CREATE_Payload+0x70>
 8012e6c:	792b      	ldrb	r3, [r5, #4]
 8012e6e:	403c      	ands	r4, r7
 8012e70:	3b01      	subs	r3, #1
 8012e72:	b2e4      	uxtb	r4, r4
 8012e74:	2b0d      	cmp	r3, #13
 8012e76:	d81d      	bhi.n	8012eb4 <uxr_serialize_CREATE_Payload+0x6c>
 8012e78:	e8df f003 	tbb	[pc, r3]
 8012e7c:	32320753 	.word	0x32320753
 8012e80:	07070707 	.word	0x07070707
 8012e84:	2121211c 	.word	0x2121211c
 8012e88:	684c      	.short	0x684c
 8012e8a:	7a29      	ldrb	r1, [r5, #8]
 8012e8c:	4630      	mov	r0, r6
 8012e8e:	f7fc f963 	bl	800f158 <ucdr_serialize_uint8_t>
 8012e92:	4607      	mov	r7, r0
 8012e94:	b130      	cbz	r0, 8012ea4 <uxr_serialize_CREATE_Payload+0x5c>
 8012e96:	7a2b      	ldrb	r3, [r5, #8]
 8012e98:	2b02      	cmp	r3, #2
 8012e9a:	d035      	beq.n	8012f08 <uxr_serialize_CREATE_Payload+0xc0>
 8012e9c:	2b03      	cmp	r3, #3
 8012e9e:	d02b      	beq.n	8012ef8 <uxr_serialize_CREATE_Payload+0xb0>
 8012ea0:	2b01      	cmp	r3, #1
 8012ea2:	d031      	beq.n	8012f08 <uxr_serialize_CREATE_Payload+0xc0>
 8012ea4:	f505 7104 	add.w	r1, r5, #528	@ 0x210
 8012ea8:	4630      	mov	r0, r6
 8012eaa:	2202      	movs	r2, #2
 8012eac:	f004 fb2c 	bl	8017508 <ucdr_serialize_array_uint8_t>
 8012eb0:	4038      	ands	r0, r7
 8012eb2:	4004      	ands	r4, r0
 8012eb4:	4620      	mov	r0, r4
 8012eb6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012eb8:	2400      	movs	r4, #0
 8012eba:	4620      	mov	r0, r4
 8012ebc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012ebe:	7a29      	ldrb	r1, [r5, #8]
 8012ec0:	4630      	mov	r0, r6
 8012ec2:	f7fc f949 	bl	800f158 <ucdr_serialize_uint8_t>
 8012ec6:	2800      	cmp	r0, #0
 8012ec8:	d0f6      	beq.n	8012eb8 <uxr_serialize_CREATE_Payload+0x70>
 8012eca:	7a2b      	ldrb	r3, [r5, #8]
 8012ecc:	2b01      	cmp	r3, #1
 8012ece:	d001      	beq.n	8012ed4 <uxr_serialize_CREATE_Payload+0x8c>
 8012ed0:	2b02      	cmp	r3, #2
 8012ed2:	d1ef      	bne.n	8012eb4 <uxr_serialize_CREATE_Payload+0x6c>
 8012ed4:	68e9      	ldr	r1, [r5, #12]
 8012ed6:	4630      	mov	r0, r6
 8012ed8:	f004 fc8a 	bl	80177f0 <ucdr_serialize_string>
 8012edc:	4004      	ands	r4, r0
 8012ede:	e7e9      	b.n	8012eb4 <uxr_serialize_CREATE_Payload+0x6c>
 8012ee0:	7a29      	ldrb	r1, [r5, #8]
 8012ee2:	4630      	mov	r0, r6
 8012ee4:	f7fc f938 	bl	800f158 <ucdr_serialize_uint8_t>
 8012ee8:	4607      	mov	r7, r0
 8012eea:	2800      	cmp	r0, #0
 8012eec:	d0da      	beq.n	8012ea4 <uxr_serialize_CREATE_Payload+0x5c>
 8012eee:	7a2b      	ldrb	r3, [r5, #8]
 8012ef0:	2b02      	cmp	r3, #2
 8012ef2:	d009      	beq.n	8012f08 <uxr_serialize_CREATE_Payload+0xc0>
 8012ef4:	2b03      	cmp	r3, #3
 8012ef6:	d1d5      	bne.n	8012ea4 <uxr_serialize_CREATE_Payload+0x5c>
 8012ef8:	68ea      	ldr	r2, [r5, #12]
 8012efa:	f105 0110 	add.w	r1, r5, #16
 8012efe:	4630      	mov	r0, r6
 8012f00:	f7fd fb10 	bl	8010524 <ucdr_serialize_sequence_uint8_t>
 8012f04:	4607      	mov	r7, r0
 8012f06:	e7cd      	b.n	8012ea4 <uxr_serialize_CREATE_Payload+0x5c>
 8012f08:	68e9      	ldr	r1, [r5, #12]
 8012f0a:	4630      	mov	r0, r6
 8012f0c:	f004 fc70 	bl	80177f0 <ucdr_serialize_string>
 8012f10:	4607      	mov	r7, r0
 8012f12:	e7c7      	b.n	8012ea4 <uxr_serialize_CREATE_Payload+0x5c>
 8012f14:	f105 0108 	add.w	r1, r5, #8
 8012f18:	4630      	mov	r0, r6
 8012f1a:	f7ff fa95 	bl	8012448 <uxr_serialize_AGENT_Representation>
 8012f1e:	4004      	ands	r4, r0
 8012f20:	e7c8      	b.n	8012eb4 <uxr_serialize_CREATE_Payload+0x6c>
 8012f22:	7a29      	ldrb	r1, [r5, #8]
 8012f24:	4630      	mov	r0, r6
 8012f26:	f7fc f917 	bl	800f158 <ucdr_serialize_uint8_t>
 8012f2a:	4607      	mov	r7, r0
 8012f2c:	b130      	cbz	r0, 8012f3c <uxr_serialize_CREATE_Payload+0xf4>
 8012f2e:	7a2b      	ldrb	r3, [r5, #8]
 8012f30:	2b02      	cmp	r3, #2
 8012f32:	d012      	beq.n	8012f5a <uxr_serialize_CREATE_Payload+0x112>
 8012f34:	2b03      	cmp	r3, #3
 8012f36:	d016      	beq.n	8012f66 <uxr_serialize_CREATE_Payload+0x11e>
 8012f38:	2b01      	cmp	r3, #1
 8012f3a:	d00e      	beq.n	8012f5a <uxr_serialize_CREATE_Payload+0x112>
 8012f3c:	f9b5 1210 	ldrsh.w	r1, [r5, #528]	@ 0x210
 8012f40:	4630      	mov	r0, r6
 8012f42:	f7fc fe45 	bl	800fbd0 <ucdr_serialize_int16_t>
 8012f46:	4038      	ands	r0, r7
 8012f48:	4004      	ands	r4, r0
 8012f4a:	e7b3      	b.n	8012eb4 <uxr_serialize_CREATE_Payload+0x6c>
 8012f4c:	f105 0108 	add.w	r1, r5, #8
 8012f50:	4630      	mov	r0, r6
 8012f52:	f7ff f9b3 	bl	80122bc <uxr_serialize_CLIENT_Representation>
 8012f56:	4004      	ands	r4, r0
 8012f58:	e7ac      	b.n	8012eb4 <uxr_serialize_CREATE_Payload+0x6c>
 8012f5a:	68e9      	ldr	r1, [r5, #12]
 8012f5c:	4630      	mov	r0, r6
 8012f5e:	f004 fc47 	bl	80177f0 <ucdr_serialize_string>
 8012f62:	4607      	mov	r7, r0
 8012f64:	e7ea      	b.n	8012f3c <uxr_serialize_CREATE_Payload+0xf4>
 8012f66:	68ea      	ldr	r2, [r5, #12]
 8012f68:	f105 0110 	add.w	r1, r5, #16
 8012f6c:	4630      	mov	r0, r6
 8012f6e:	f7fd fad9 	bl	8010524 <ucdr_serialize_sequence_uint8_t>
 8012f72:	4607      	mov	r7, r0
 8012f74:	e7e2      	b.n	8012f3c <uxr_serialize_CREATE_Payload+0xf4>
 8012f76:	bf00      	nop

08012f78 <uxr_deserialize_GET_INFO_Payload>:
 8012f78:	b570      	push	{r4, r5, r6, lr}
 8012f7a:	2202      	movs	r2, #2
 8012f7c:	4605      	mov	r5, r0
 8012f7e:	460e      	mov	r6, r1
 8012f80:	f004 fb26 	bl	80175d0 <ucdr_deserialize_array_uint8_t>
 8012f84:	1cb1      	adds	r1, r6, #2
 8012f86:	2202      	movs	r2, #2
 8012f88:	4604      	mov	r4, r0
 8012f8a:	4628      	mov	r0, r5
 8012f8c:	f004 fb20 	bl	80175d0 <ucdr_deserialize_array_uint8_t>
 8012f90:	1d31      	adds	r1, r6, #4
 8012f92:	4004      	ands	r4, r0
 8012f94:	4628      	mov	r0, r5
 8012f96:	f7fc fc25 	bl	800f7e4 <ucdr_deserialize_uint32_t>
 8012f9a:	b2e4      	uxtb	r4, r4
 8012f9c:	4020      	ands	r0, r4
 8012f9e:	bd70      	pop	{r4, r5, r6, pc}

08012fa0 <uxr_serialize_DELETE_Payload>:
 8012fa0:	b570      	push	{r4, r5, r6, lr}
 8012fa2:	2202      	movs	r2, #2
 8012fa4:	4605      	mov	r5, r0
 8012fa6:	460e      	mov	r6, r1
 8012fa8:	f004 faae 	bl	8017508 <ucdr_serialize_array_uint8_t>
 8012fac:	1cb1      	adds	r1, r6, #2
 8012fae:	4604      	mov	r4, r0
 8012fb0:	2202      	movs	r2, #2
 8012fb2:	4628      	mov	r0, r5
 8012fb4:	f004 faa8 	bl	8017508 <ucdr_serialize_array_uint8_t>
 8012fb8:	4020      	ands	r0, r4
 8012fba:	b2c0      	uxtb	r0, r0
 8012fbc:	bd70      	pop	{r4, r5, r6, pc}
 8012fbe:	bf00      	nop

08012fc0 <uxr_deserialize_STATUS_AGENT_Payload>:
 8012fc0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012fc4:	4606      	mov	r6, r0
 8012fc6:	460f      	mov	r7, r1
 8012fc8:	f7fc f8dc 	bl	800f184 <ucdr_deserialize_uint8_t>
 8012fcc:	1c79      	adds	r1, r7, #1
 8012fce:	4605      	mov	r5, r0
 8012fd0:	4630      	mov	r0, r6
 8012fd2:	f7fc f8d7 	bl	800f184 <ucdr_deserialize_uint8_t>
 8012fd6:	1d39      	adds	r1, r7, #4
 8012fd8:	4681      	mov	r9, r0
 8012fda:	2204      	movs	r2, #4
 8012fdc:	4630      	mov	r0, r6
 8012fde:	f004 faf7 	bl	80175d0 <ucdr_deserialize_array_uint8_t>
 8012fe2:	f107 0108 	add.w	r1, r7, #8
 8012fe6:	4604      	mov	r4, r0
 8012fe8:	2202      	movs	r2, #2
 8012fea:	4630      	mov	r0, r6
 8012fec:	f004 faf0 	bl	80175d0 <ucdr_deserialize_array_uint8_t>
 8012ff0:	f107 010a 	add.w	r1, r7, #10
 8012ff4:	4680      	mov	r8, r0
 8012ff6:	2202      	movs	r2, #2
 8012ff8:	4630      	mov	r0, r6
 8012ffa:	f004 fae9 	bl	80175d0 <ucdr_deserialize_array_uint8_t>
 8012ffe:	ea05 0509 	and.w	r5, r5, r9
 8013002:	b2ed      	uxtb	r5, r5
 8013004:	402c      	ands	r4, r5
 8013006:	f107 010c 	add.w	r1, r7, #12
 801300a:	4605      	mov	r5, r0
 801300c:	4630      	mov	r0, r6
 801300e:	f7fc f889 	bl	800f124 <ucdr_deserialize_bool>
 8013012:	ea08 0404 	and.w	r4, r8, r4
 8013016:	4025      	ands	r5, r4
 8013018:	4028      	ands	r0, r5
 801301a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801301e:	bf00      	nop

08013020 <uxr_deserialize_STATUS_Payload>:
 8013020:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013024:	2202      	movs	r2, #2
 8013026:	4606      	mov	r6, r0
 8013028:	460f      	mov	r7, r1
 801302a:	f004 fad1 	bl	80175d0 <ucdr_deserialize_array_uint8_t>
 801302e:	2202      	movs	r2, #2
 8013030:	1cb9      	adds	r1, r7, #2
 8013032:	4605      	mov	r5, r0
 8013034:	4630      	mov	r0, r6
 8013036:	f004 facb 	bl	80175d0 <ucdr_deserialize_array_uint8_t>
 801303a:	1d39      	adds	r1, r7, #4
 801303c:	4680      	mov	r8, r0
 801303e:	4630      	mov	r0, r6
 8013040:	f7fc f8a0 	bl	800f184 <ucdr_deserialize_uint8_t>
 8013044:	1d79      	adds	r1, r7, #5
 8013046:	4604      	mov	r4, r0
 8013048:	4630      	mov	r0, r6
 801304a:	f7fc f89b 	bl	800f184 <ucdr_deserialize_uint8_t>
 801304e:	ea05 0508 	and.w	r5, r5, r8
 8013052:	402c      	ands	r4, r5
 8013054:	4020      	ands	r0, r4
 8013056:	b2c0      	uxtb	r0, r0
 8013058:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0801305c <uxr_serialize_INFO_Payload>:
 801305c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013060:	2202      	movs	r2, #2
 8013062:	460c      	mov	r4, r1
 8013064:	4605      	mov	r5, r0
 8013066:	f004 fa4f 	bl	8017508 <ucdr_serialize_array_uint8_t>
 801306a:	2202      	movs	r2, #2
 801306c:	4680      	mov	r8, r0
 801306e:	1ca1      	adds	r1, r4, #2
 8013070:	4628      	mov	r0, r5
 8013072:	f004 fa49 	bl	8017508 <ucdr_serialize_array_uint8_t>
 8013076:	7921      	ldrb	r1, [r4, #4]
 8013078:	4607      	mov	r7, r0
 801307a:	4628      	mov	r0, r5
 801307c:	f7fc f86c 	bl	800f158 <ucdr_serialize_uint8_t>
 8013080:	7961      	ldrb	r1, [r4, #5]
 8013082:	4606      	mov	r6, r0
 8013084:	4628      	mov	r0, r5
 8013086:	f7fc f867 	bl	800f158 <ucdr_serialize_uint8_t>
 801308a:	ea08 0807 	and.w	r8, r8, r7
 801308e:	ea06 0608 	and.w	r6, r6, r8
 8013092:	4006      	ands	r6, r0
 8013094:	7a21      	ldrb	r1, [r4, #8]
 8013096:	4628      	mov	r0, r5
 8013098:	f7fc f82e 	bl	800f0f8 <ucdr_serialize_bool>
 801309c:	7a23      	ldrb	r3, [r4, #8]
 801309e:	b2f7      	uxtb	r7, r6
 80130a0:	4606      	mov	r6, r0
 80130a2:	b96b      	cbnz	r3, 80130c0 <uxr_serialize_INFO_Payload+0x64>
 80130a4:	f894 121c 	ldrb.w	r1, [r4, #540]	@ 0x21c
 80130a8:	4628      	mov	r0, r5
 80130aa:	f7fc f825 	bl	800f0f8 <ucdr_serialize_bool>
 80130ae:	f894 321c 	ldrb.w	r3, [r4, #540]	@ 0x21c
 80130b2:	4030      	ands	r0, r6
 80130b4:	b2c6      	uxtb	r6, r0
 80130b6:	b983      	cbnz	r3, 80130da <uxr_serialize_INFO_Payload+0x7e>
 80130b8:	ea06 0007 	and.w	r0, r6, r7
 80130bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80130c0:	7b21      	ldrb	r1, [r4, #12]
 80130c2:	4628      	mov	r0, r5
 80130c4:	f7fc f848 	bl	800f158 <ucdr_serialize_uint8_t>
 80130c8:	b188      	cbz	r0, 80130ee <uxr_serialize_INFO_Payload+0x92>
 80130ca:	f104 010c 	add.w	r1, r4, #12
 80130ce:	4628      	mov	r0, r5
 80130d0:	f7ff fa06 	bl	80124e0 <uxr_serialize_ObjectVariant.part.0>
 80130d4:	4030      	ands	r0, r6
 80130d6:	b2c6      	uxtb	r6, r0
 80130d8:	e7e4      	b.n	80130a4 <uxr_serialize_INFO_Payload+0x48>
 80130da:	f504 7108 	add.w	r1, r4, #544	@ 0x220
 80130de:	4628      	mov	r0, r5
 80130e0:	f7ff fe24 	bl	8012d2c <uxr_serialize_ActivityInfoVariant>
 80130e4:	4006      	ands	r6, r0
 80130e6:	ea06 0007 	and.w	r0, r6, r7
 80130ea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80130ee:	4606      	mov	r6, r0
 80130f0:	e7d8      	b.n	80130a4 <uxr_serialize_INFO_Payload+0x48>
 80130f2:	bf00      	nop

080130f4 <uxr_serialize_READ_DATA_Payload>:
 80130f4:	b570      	push	{r4, r5, r6, lr}
 80130f6:	2202      	movs	r2, #2
 80130f8:	4605      	mov	r5, r0
 80130fa:	460e      	mov	r6, r1
 80130fc:	f004 fa04 	bl	8017508 <ucdr_serialize_array_uint8_t>
 8013100:	1cb1      	adds	r1, r6, #2
 8013102:	2202      	movs	r2, #2
 8013104:	4604      	mov	r4, r0
 8013106:	4628      	mov	r0, r5
 8013108:	f004 f9fe 	bl	8017508 <ucdr_serialize_array_uint8_t>
 801310c:	1d31      	adds	r1, r6, #4
 801310e:	4004      	ands	r4, r0
 8013110:	4628      	mov	r0, r5
 8013112:	f7ff fe55 	bl	8012dc0 <uxr_serialize_ReadSpecification>
 8013116:	b2e4      	uxtb	r4, r4
 8013118:	4020      	ands	r0, r4
 801311a:	bd70      	pop	{r4, r5, r6, pc}

0801311c <uxr_serialize_WRITE_DATA_Payload_Data>:
 801311c:	b570      	push	{r4, r5, r6, lr}
 801311e:	2202      	movs	r2, #2
 8013120:	4605      	mov	r5, r0
 8013122:	460e      	mov	r6, r1
 8013124:	f004 f9f0 	bl	8017508 <ucdr_serialize_array_uint8_t>
 8013128:	1cb1      	adds	r1, r6, #2
 801312a:	4604      	mov	r4, r0
 801312c:	2202      	movs	r2, #2
 801312e:	4628      	mov	r0, r5
 8013130:	f004 f9ea 	bl	8017508 <ucdr_serialize_array_uint8_t>
 8013134:	4020      	ands	r0, r4
 8013136:	b2c0      	uxtb	r0, r0
 8013138:	bd70      	pop	{r4, r5, r6, pc}
 801313a:	bf00      	nop

0801313c <uxr_serialize_ACKNACK_Payload>:
 801313c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801313e:	460f      	mov	r7, r1
 8013140:	460e      	mov	r6, r1
 8013142:	f837 1b02 	ldrh.w	r1, [r7], #2
 8013146:	4605      	mov	r5, r0
 8013148:	f7fc f832 	bl	800f1b0 <ucdr_serialize_uint16_t>
 801314c:	4639      	mov	r1, r7
 801314e:	2202      	movs	r2, #2
 8013150:	4604      	mov	r4, r0
 8013152:	4628      	mov	r0, r5
 8013154:	f004 f9d8 	bl	8017508 <ucdr_serialize_array_uint8_t>
 8013158:	7931      	ldrb	r1, [r6, #4]
 801315a:	4004      	ands	r4, r0
 801315c:	4628      	mov	r0, r5
 801315e:	f7fb fffb 	bl	800f158 <ucdr_serialize_uint8_t>
 8013162:	b2e4      	uxtb	r4, r4
 8013164:	4020      	ands	r0, r4
 8013166:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08013168 <uxr_deserialize_ACKNACK_Payload>:
 8013168:	b570      	push	{r4, r5, r6, lr}
 801316a:	4605      	mov	r5, r0
 801316c:	460e      	mov	r6, r1
 801316e:	f7fc f91f 	bl	800f3b0 <ucdr_deserialize_uint16_t>
 8013172:	1cb1      	adds	r1, r6, #2
 8013174:	2202      	movs	r2, #2
 8013176:	4604      	mov	r4, r0
 8013178:	4628      	mov	r0, r5
 801317a:	f004 fa29 	bl	80175d0 <ucdr_deserialize_array_uint8_t>
 801317e:	1d31      	adds	r1, r6, #4
 8013180:	4004      	ands	r4, r0
 8013182:	4628      	mov	r0, r5
 8013184:	f7fb fffe 	bl	800f184 <ucdr_deserialize_uint8_t>
 8013188:	b2e4      	uxtb	r4, r4
 801318a:	4020      	ands	r0, r4
 801318c:	bd70      	pop	{r4, r5, r6, pc}
 801318e:	bf00      	nop

08013190 <uxr_serialize_HEARTBEAT_Payload>:
 8013190:	b570      	push	{r4, r5, r6, lr}
 8013192:	460d      	mov	r5, r1
 8013194:	8809      	ldrh	r1, [r1, #0]
 8013196:	4606      	mov	r6, r0
 8013198:	f7fc f80a 	bl	800f1b0 <ucdr_serialize_uint16_t>
 801319c:	8869      	ldrh	r1, [r5, #2]
 801319e:	4604      	mov	r4, r0
 80131a0:	4630      	mov	r0, r6
 80131a2:	f7fc f805 	bl	800f1b0 <ucdr_serialize_uint16_t>
 80131a6:	7929      	ldrb	r1, [r5, #4]
 80131a8:	4004      	ands	r4, r0
 80131aa:	4630      	mov	r0, r6
 80131ac:	f7fb ffd4 	bl	800f158 <ucdr_serialize_uint8_t>
 80131b0:	b2e4      	uxtb	r4, r4
 80131b2:	4020      	ands	r0, r4
 80131b4:	bd70      	pop	{r4, r5, r6, pc}
 80131b6:	bf00      	nop

080131b8 <uxr_deserialize_HEARTBEAT_Payload>:
 80131b8:	b570      	push	{r4, r5, r6, lr}
 80131ba:	4605      	mov	r5, r0
 80131bc:	460e      	mov	r6, r1
 80131be:	f7fc f8f7 	bl	800f3b0 <ucdr_deserialize_uint16_t>
 80131c2:	1cb1      	adds	r1, r6, #2
 80131c4:	4604      	mov	r4, r0
 80131c6:	4628      	mov	r0, r5
 80131c8:	f7fc f8f2 	bl	800f3b0 <ucdr_deserialize_uint16_t>
 80131cc:	1d31      	adds	r1, r6, #4
 80131ce:	4004      	ands	r4, r0
 80131d0:	4628      	mov	r0, r5
 80131d2:	f7fb ffd7 	bl	800f184 <ucdr_deserialize_uint8_t>
 80131d6:	b2e4      	uxtb	r4, r4
 80131d8:	4020      	ands	r0, r4
 80131da:	bd70      	pop	{r4, r5, r6, pc}

080131dc <uxr_deserialize_TIMESTAMP_REPLY_Payload>:
 80131dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80131e0:	4605      	mov	r5, r0
 80131e2:	460e      	mov	r6, r1
 80131e4:	f7fc fe80 	bl	800fee8 <ucdr_deserialize_int32_t>
 80131e8:	1d31      	adds	r1, r6, #4
 80131ea:	4607      	mov	r7, r0
 80131ec:	4628      	mov	r0, r5
 80131ee:	f7fc faf9 	bl	800f7e4 <ucdr_deserialize_uint32_t>
 80131f2:	f106 0108 	add.w	r1, r6, #8
 80131f6:	4680      	mov	r8, r0
 80131f8:	4628      	mov	r0, r5
 80131fa:	f7fc fe75 	bl	800fee8 <ucdr_deserialize_int32_t>
 80131fe:	f106 010c 	add.w	r1, r6, #12
 8013202:	4604      	mov	r4, r0
 8013204:	4628      	mov	r0, r5
 8013206:	f7fc faed 	bl	800f7e4 <ucdr_deserialize_uint32_t>
 801320a:	ea07 0708 	and.w	r7, r7, r8
 801320e:	403c      	ands	r4, r7
 8013210:	f106 0110 	add.w	r1, r6, #16
 8013214:	4004      	ands	r4, r0
 8013216:	4628      	mov	r0, r5
 8013218:	f7fc fe66 	bl	800fee8 <ucdr_deserialize_int32_t>
 801321c:	f106 0114 	add.w	r1, r6, #20
 8013220:	4603      	mov	r3, r0
 8013222:	4628      	mov	r0, r5
 8013224:	461d      	mov	r5, r3
 8013226:	f7fc fadd 	bl	800f7e4 <ucdr_deserialize_uint32_t>
 801322a:	b2e4      	uxtb	r4, r4
 801322c:	402c      	ands	r4, r5
 801322e:	4020      	ands	r0, r4
 8013230:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08013234 <uxr_serialize_SampleIdentity>:
 8013234:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013238:	220c      	movs	r2, #12
 801323a:	4604      	mov	r4, r0
 801323c:	460d      	mov	r5, r1
 801323e:	f004 f963 	bl	8017508 <ucdr_serialize_array_uint8_t>
 8013242:	2203      	movs	r2, #3
 8013244:	f105 010c 	add.w	r1, r5, #12
 8013248:	4607      	mov	r7, r0
 801324a:	4620      	mov	r0, r4
 801324c:	f004 f95c 	bl	8017508 <ucdr_serialize_array_uint8_t>
 8013250:	7be9      	ldrb	r1, [r5, #15]
 8013252:	4680      	mov	r8, r0
 8013254:	4620      	mov	r0, r4
 8013256:	f7fb ff7f 	bl	800f158 <ucdr_serialize_uint8_t>
 801325a:	6929      	ldr	r1, [r5, #16]
 801325c:	4606      	mov	r6, r0
 801325e:	4620      	mov	r0, r4
 8013260:	f7fc fdaa 	bl	800fdb8 <ucdr_serialize_int32_t>
 8013264:	6969      	ldr	r1, [r5, #20]
 8013266:	4603      	mov	r3, r0
 8013268:	4620      	mov	r0, r4
 801326a:	ea07 0708 	and.w	r7, r7, r8
 801326e:	461c      	mov	r4, r3
 8013270:	f7fc f988 	bl	800f584 <ucdr_serialize_uint32_t>
 8013274:	403e      	ands	r6, r7
 8013276:	4034      	ands	r4, r6
 8013278:	4020      	ands	r0, r4
 801327a:	b2c0      	uxtb	r0, r0
 801327c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08013280 <uxr_deserialize_SampleIdentity>:
 8013280:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013284:	220c      	movs	r2, #12
 8013286:	4604      	mov	r4, r0
 8013288:	460d      	mov	r5, r1
 801328a:	f004 f9a1 	bl	80175d0 <ucdr_deserialize_array_uint8_t>
 801328e:	2203      	movs	r2, #3
 8013290:	f105 010c 	add.w	r1, r5, #12
 8013294:	4607      	mov	r7, r0
 8013296:	4620      	mov	r0, r4
 8013298:	f004 f99a 	bl	80175d0 <ucdr_deserialize_array_uint8_t>
 801329c:	f105 010f 	add.w	r1, r5, #15
 80132a0:	4680      	mov	r8, r0
 80132a2:	4620      	mov	r0, r4
 80132a4:	f7fb ff6e 	bl	800f184 <ucdr_deserialize_uint8_t>
 80132a8:	f105 0110 	add.w	r1, r5, #16
 80132ac:	4606      	mov	r6, r0
 80132ae:	4620      	mov	r0, r4
 80132b0:	f7fc fe1a 	bl	800fee8 <ucdr_deserialize_int32_t>
 80132b4:	f105 0114 	add.w	r1, r5, #20
 80132b8:	4603      	mov	r3, r0
 80132ba:	4620      	mov	r0, r4
 80132bc:	ea07 0708 	and.w	r7, r7, r8
 80132c0:	461c      	mov	r4, r3
 80132c2:	f7fc fa8f 	bl	800f7e4 <ucdr_deserialize_uint32_t>
 80132c6:	403e      	ands	r6, r7
 80132c8:	4034      	ands	r4, r6
 80132ca:	4020      	ands	r0, r4
 80132cc:	b2c0      	uxtb	r0, r0
 80132ce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80132d2:	bf00      	nop

080132d4 <rcl_client_get_rmw_handle>:
 80132d4:	b110      	cbz	r0, 80132dc <rcl_client_get_rmw_handle+0x8>
 80132d6:	6800      	ldr	r0, [r0, #0]
 80132d8:	b100      	cbz	r0, 80132dc <rcl_client_get_rmw_handle+0x8>
 80132da:	6e80      	ldr	r0, [r0, #104]	@ 0x68
 80132dc:	4770      	bx	lr
 80132de:	bf00      	nop

080132e0 <rcl_take_response>:
 80132e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80132e2:	460e      	mov	r6, r1
 80132e4:	460c      	mov	r4, r1
 80132e6:	4607      	mov	r7, r0
 80132e8:	4694      	mov	ip, r2
 80132ea:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 80132ec:	b08d      	sub	sp, #52	@ 0x34
 80132ee:	ad06      	add	r5, sp, #24
 80132f0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80132f2:	e896 0003 	ldmia.w	r6, {r0, r1}
 80132f6:	e885 0003 	stmia.w	r5, {r0, r1}
 80132fa:	b337      	cbz	r7, 801334a <rcl_take_response+0x6a>
 80132fc:	683b      	ldr	r3, [r7, #0]
 80132fe:	b323      	cbz	r3, 801334a <rcl_take_response+0x6a>
 8013300:	6e98      	ldr	r0, [r3, #104]	@ 0x68
 8013302:	b310      	cbz	r0, 801334a <rcl_take_response+0x6a>
 8013304:	4662      	mov	r2, ip
 8013306:	b31a      	cbz	r2, 8013350 <rcl_take_response+0x70>
 8013308:	2300      	movs	r3, #0
 801330a:	2600      	movs	r6, #0
 801330c:	2700      	movs	r7, #0
 801330e:	f88d 3007 	strb.w	r3, [sp, #7]
 8013312:	a902      	add	r1, sp, #8
 8013314:	f10d 0307 	add.w	r3, sp, #7
 8013318:	e9cd 6702 	strd	r6, r7, [sp, #8]
 801331c:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8013320:	f003 fc0c 	bl	8016b3c <rmw_take_response>
 8013324:	4606      	mov	r6, r0
 8013326:	b9a8      	cbnz	r0, 8013354 <rcl_take_response+0x74>
 8013328:	f89d 2007 	ldrb.w	r2, [sp, #7]
 801332c:	f240 13f5 	movw	r3, #501	@ 0x1f5
 8013330:	2a00      	cmp	r2, #0
 8013332:	bf08      	it	eq
 8013334:	461e      	moveq	r6, r3
 8013336:	ad06      	add	r5, sp, #24
 8013338:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801333a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801333c:	e895 0003 	ldmia.w	r5, {r0, r1}
 8013340:	e884 0003 	stmia.w	r4, {r0, r1}
 8013344:	4630      	mov	r0, r6
 8013346:	b00d      	add	sp, #52	@ 0x34
 8013348:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801334a:	f44f 76fa 	mov.w	r6, #500	@ 0x1f4
 801334e:	e7f2      	b.n	8013336 <rcl_take_response+0x56>
 8013350:	260b      	movs	r6, #11
 8013352:	e7f0      	b.n	8013336 <rcl_take_response+0x56>
 8013354:	2601      	movs	r6, #1
 8013356:	e7ee      	b.n	8013336 <rcl_take_response+0x56>

08013358 <rcl_convert_rmw_ret_to_rcl_ret>:
 8013358:	280b      	cmp	r0, #11
 801335a:	dc0d      	bgt.n	8013378 <rcl_convert_rmw_ret_to_rcl_ret+0x20>
 801335c:	2800      	cmp	r0, #0
 801335e:	db09      	blt.n	8013374 <rcl_convert_rmw_ret_to_rcl_ret+0x1c>
 8013360:	280b      	cmp	r0, #11
 8013362:	d807      	bhi.n	8013374 <rcl_convert_rmw_ret_to_rcl_ret+0x1c>
 8013364:	e8df f000 	tbb	[pc, r0]
 8013368:	07060607 	.word	0x07060607
 801336c:	06060606 	.word	0x06060606
 8013370:	07070606 	.word	0x07070606
 8013374:	2001      	movs	r0, #1
 8013376:	4770      	bx	lr
 8013378:	28cb      	cmp	r0, #203	@ 0xcb
 801337a:	bf18      	it	ne
 801337c:	2001      	movne	r0, #1
 801337e:	4770      	bx	lr

08013380 <rcl_get_zero_initialized_context>:
 8013380:	4a03      	ldr	r2, [pc, #12]	@ (8013390 <rcl_get_zero_initialized_context+0x10>)
 8013382:	4603      	mov	r3, r0
 8013384:	e892 0003 	ldmia.w	r2, {r0, r1}
 8013388:	e883 0003 	stmia.w	r3, {r0, r1}
 801338c:	4618      	mov	r0, r3
 801338e:	4770      	bx	lr
 8013390:	0801afdc 	.word	0x0801afdc

08013394 <rcl_context_is_valid>:
 8013394:	b118      	cbz	r0, 801339e <rcl_context_is_valid+0xa>
 8013396:	6840      	ldr	r0, [r0, #4]
 8013398:	3800      	subs	r0, #0
 801339a:	bf18      	it	ne
 801339c:	2001      	movne	r0, #1
 801339e:	4770      	bx	lr

080133a0 <__cleanup_context>:
 80133a0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80133a4:	4606      	mov	r6, r0
 80133a6:	6800      	ldr	r0, [r0, #0]
 80133a8:	2300      	movs	r3, #0
 80133aa:	6073      	str	r3, [r6, #4]
 80133ac:	2800      	cmp	r0, #0
 80133ae:	d04d      	beq.n	801344c <__cleanup_context+0xac>
 80133b0:	6947      	ldr	r7, [r0, #20]
 80133b2:	f8d0 8004 	ldr.w	r8, [r0, #4]
 80133b6:	f8d0 9010 	ldr.w	r9, [r0, #16]
 80133ba:	b137      	cbz	r7, 80133ca <__cleanup_context+0x2a>
 80133bc:	3014      	adds	r0, #20
 80133be:	f000 fb1d 	bl	80139fc <rcl_init_options_fini>
 80133c2:	4607      	mov	r7, r0
 80133c4:	2800      	cmp	r0, #0
 80133c6:	d148      	bne.n	801345a <__cleanup_context+0xba>
 80133c8:	6830      	ldr	r0, [r6, #0]
 80133ca:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 80133cc:	b143      	cbz	r3, 80133e0 <__cleanup_context+0x40>
 80133ce:	3028      	adds	r0, #40	@ 0x28
 80133d0:	f003 f940 	bl	8016654 <rmw_context_fini>
 80133d4:	b118      	cbz	r0, 80133de <__cleanup_context+0x3e>
 80133d6:	2f00      	cmp	r7, #0
 80133d8:	d042      	beq.n	8013460 <__cleanup_context+0xc0>
 80133da:	f7fa fe51 	bl	800e080 <rcutils_reset_error>
 80133de:	6830      	ldr	r0, [r6, #0]
 80133e0:	f8d0 c020 	ldr.w	ip, [r0, #32]
 80133e4:	f1bc 0f00 	cmp.w	ip, #0
 80133e8:	d01c      	beq.n	8013424 <__cleanup_context+0x84>
 80133ea:	e9d0 2306 	ldrd	r2, r3, [r0, #24]
 80133ee:	2a01      	cmp	r2, #1
 80133f0:	f173 0100 	sbcs.w	r1, r3, #0
 80133f4:	db12      	blt.n	801341c <__cleanup_context+0x7c>
 80133f6:	2400      	movs	r4, #0
 80133f8:	2500      	movs	r5, #0
 80133fa:	f85c 0024 	ldr.w	r0, [ip, r4, lsl #2]
 80133fe:	4649      	mov	r1, r9
 8013400:	b1c0      	cbz	r0, 8013434 <__cleanup_context+0x94>
 8013402:	47c0      	blx	r8
 8013404:	6831      	ldr	r1, [r6, #0]
 8013406:	e9d1 2306 	ldrd	r2, r3, [r1, #24]
 801340a:	3401      	adds	r4, #1
 801340c:	f145 0500 	adc.w	r5, r5, #0
 8013410:	4294      	cmp	r4, r2
 8013412:	f8d1 c020 	ldr.w	ip, [r1, #32]
 8013416:	eb75 0103 	sbcs.w	r1, r5, r3
 801341a:	dbee      	blt.n	80133fa <__cleanup_context+0x5a>
 801341c:	4660      	mov	r0, ip
 801341e:	4649      	mov	r1, r9
 8013420:	47c0      	blx	r8
 8013422:	6830      	ldr	r0, [r6, #0]
 8013424:	4649      	mov	r1, r9
 8013426:	47c0      	blx	r8
 8013428:	2300      	movs	r3, #0
 801342a:	e9c6 3300 	strd	r3, r3, [r6]
 801342e:	4638      	mov	r0, r7
 8013430:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8013434:	3401      	adds	r4, #1
 8013436:	f145 0500 	adc.w	r5, r5, #0
 801343a:	4294      	cmp	r4, r2
 801343c:	eb75 0103 	sbcs.w	r1, r5, r3
 8013440:	dbdb      	blt.n	80133fa <__cleanup_context+0x5a>
 8013442:	4660      	mov	r0, ip
 8013444:	4649      	mov	r1, r9
 8013446:	47c0      	blx	r8
 8013448:	6830      	ldr	r0, [r6, #0]
 801344a:	e7eb      	b.n	8013424 <__cleanup_context+0x84>
 801344c:	4607      	mov	r7, r0
 801344e:	2300      	movs	r3, #0
 8013450:	e9c6 3300 	strd	r3, r3, [r6]
 8013454:	4638      	mov	r0, r7
 8013456:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801345a:	f7fa fe11 	bl	800e080 <rcutils_reset_error>
 801345e:	e7b3      	b.n	80133c8 <__cleanup_context+0x28>
 8013460:	f7ff ff7a 	bl	8013358 <rcl_convert_rmw_ret_to_rcl_ret>
 8013464:	4607      	mov	r7, r0
 8013466:	e7b8      	b.n	80133da <__cleanup_context+0x3a>

08013468 <rcl_expand_topic_name>:
 8013468:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801346c:	b08b      	sub	sp, #44	@ 0x2c
 801346e:	9306      	str	r3, [sp, #24]
 8013470:	2800      	cmp	r0, #0
 8013472:	f000 80d2 	beq.w	801361a <rcl_expand_topic_name+0x1b2>
 8013476:	460e      	mov	r6, r1
 8013478:	2900      	cmp	r1, #0
 801347a:	f000 80ce 	beq.w	801361a <rcl_expand_topic_name+0x1b2>
 801347e:	4617      	mov	r7, r2
 8013480:	2a00      	cmp	r2, #0
 8013482:	f000 80ca 	beq.w	801361a <rcl_expand_topic_name+0x1b2>
 8013486:	2b00      	cmp	r3, #0
 8013488:	f000 80c7 	beq.w	801361a <rcl_expand_topic_name+0x1b2>
 801348c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 801348e:	2b00      	cmp	r3, #0
 8013490:	f000 80c3 	beq.w	801361a <rcl_expand_topic_name+0x1b2>
 8013494:	a909      	add	r1, sp, #36	@ 0x24
 8013496:	2200      	movs	r2, #0
 8013498:	4680      	mov	r8, r0
 801349a:	f001 fc67 	bl	8014d6c <rcl_validate_topic_name>
 801349e:	4604      	mov	r4, r0
 80134a0:	2800      	cmp	r0, #0
 80134a2:	f040 80b6 	bne.w	8013612 <rcl_expand_topic_name+0x1aa>
 80134a6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80134a8:	2b00      	cmp	r3, #0
 80134aa:	f040 80bf 	bne.w	801362c <rcl_expand_topic_name+0x1c4>
 80134ae:	4602      	mov	r2, r0
 80134b0:	a909      	add	r1, sp, #36	@ 0x24
 80134b2:	4630      	mov	r0, r6
 80134b4:	f002 fdf0 	bl	8016098 <rmw_validate_node_name>
 80134b8:	2800      	cmp	r0, #0
 80134ba:	f040 80b3 	bne.w	8013624 <rcl_expand_topic_name+0x1bc>
 80134be:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80134c0:	2a00      	cmp	r2, #0
 80134c2:	f040 80b8 	bne.w	8013636 <rcl_expand_topic_name+0x1ce>
 80134c6:	a909      	add	r1, sp, #36	@ 0x24
 80134c8:	4638      	mov	r0, r7
 80134ca:	f002 fdc7 	bl	801605c <rmw_validate_namespace>
 80134ce:	2800      	cmp	r0, #0
 80134d0:	f040 80a8 	bne.w	8013624 <rcl_expand_topic_name+0x1bc>
 80134d4:	9c09      	ldr	r4, [sp, #36]	@ 0x24
 80134d6:	2c00      	cmp	r4, #0
 80134d8:	f040 80f6 	bne.w	80136c8 <rcl_expand_topic_name+0x260>
 80134dc:	217b      	movs	r1, #123	@ 0x7b
 80134de:	4640      	mov	r0, r8
 80134e0:	f006 fb98 	bl	8019c14 <strchr>
 80134e4:	f898 3000 	ldrb.w	r3, [r8]
 80134e8:	2b2f      	cmp	r3, #47	@ 0x2f
 80134ea:	4605      	mov	r5, r0
 80134ec:	f000 80c4 	beq.w	8013678 <rcl_expand_topic_name+0x210>
 80134f0:	2b7e      	cmp	r3, #126	@ 0x7e
 80134f2:	d16f      	bne.n	80135d4 <rcl_expand_topic_name+0x16c>
 80134f4:	4638      	mov	r0, r7
 80134f6:	f7ec fe75 	bl	80001e4 <strlen>
 80134fa:	4b87      	ldr	r3, [pc, #540]	@ (8013718 <rcl_expand_topic_name+0x2b0>)
 80134fc:	4987      	ldr	r1, [pc, #540]	@ (801371c <rcl_expand_topic_name+0x2b4>)
 80134fe:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 8013500:	9604      	str	r6, [sp, #16]
 8013502:	2801      	cmp	r0, #1
 8013504:	bf0c      	ite	eq
 8013506:	4618      	moveq	r0, r3
 8013508:	4608      	movne	r0, r1
 801350a:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 801350e:	e9cd 2300 	strd	r2, r3, [sp]
 8013512:	e9cd 0702 	strd	r0, r7, [sp, #8]
 8013516:	f108 0101 	add.w	r1, r8, #1
 801351a:	9105      	str	r1, [sp, #20]
 801351c:	ab14      	add	r3, sp, #80	@ 0x50
 801351e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8013520:	f002 fbb4 	bl	8015c8c <rcutils_format_string_limit>
 8013524:	4682      	mov	sl, r0
 8013526:	2800      	cmp	r0, #0
 8013528:	f000 80d0 	beq.w	80136cc <rcl_expand_topic_name+0x264>
 801352c:	2d00      	cmp	r5, #0
 801352e:	f000 80aa 	beq.w	8013686 <rcl_expand_topic_name+0x21e>
 8013532:	217b      	movs	r1, #123	@ 0x7b
 8013534:	f006 fb6e 	bl	8019c14 <strchr>
 8013538:	46d1      	mov	r9, sl
 801353a:	4605      	mov	r5, r0
 801353c:	9407      	str	r4, [sp, #28]
 801353e:	46d3      	mov	fp, sl
 8013540:	464c      	mov	r4, r9
 8013542:	2d00      	cmp	r5, #0
 8013544:	f000 80c7 	beq.w	80136d6 <rcl_expand_topic_name+0x26e>
 8013548:	217d      	movs	r1, #125	@ 0x7d
 801354a:	4620      	mov	r0, r4
 801354c:	f006 fb62 	bl	8019c14 <strchr>
 8013550:	eba0 0905 	sub.w	r9, r0, r5
 8013554:	f109 0a01 	add.w	sl, r9, #1
 8013558:	4871      	ldr	r0, [pc, #452]	@ (8013720 <rcl_expand_topic_name+0x2b8>)
 801355a:	4652      	mov	r2, sl
 801355c:	4629      	mov	r1, r5
 801355e:	f006 fb66 	bl	8019c2e <strncmp>
 8013562:	2800      	cmp	r0, #0
 8013564:	f000 808d 	beq.w	8013682 <rcl_expand_topic_name+0x21a>
 8013568:	486e      	ldr	r0, [pc, #440]	@ (8013724 <rcl_expand_topic_name+0x2bc>)
 801356a:	4652      	mov	r2, sl
 801356c:	4629      	mov	r1, r5
 801356e:	f006 fb5e 	bl	8019c2e <strncmp>
 8013572:	b130      	cbz	r0, 8013582 <rcl_expand_topic_name+0x11a>
 8013574:	486c      	ldr	r0, [pc, #432]	@ (8013728 <rcl_expand_topic_name+0x2c0>)
 8013576:	4652      	mov	r2, sl
 8013578:	4629      	mov	r1, r5
 801357a:	f006 fb58 	bl	8019c2e <strncmp>
 801357e:	2800      	cmp	r0, #0
 8013580:	d15b      	bne.n	801363a <rcl_expand_topic_name+0x1d2>
 8013582:	46b9      	mov	r9, r7
 8013584:	ab16      	add	r3, sp, #88	@ 0x58
 8013586:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 801358a:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 801358e:	ab14      	add	r3, sp, #80	@ 0x50
 8013590:	4628      	mov	r0, r5
 8013592:	cb0c      	ldmia	r3, {r2, r3}
 8013594:	4651      	mov	r1, sl
 8013596:	f002 fcc5 	bl	8015f24 <rcutils_strndup>
 801359a:	4605      	mov	r5, r0
 801359c:	2800      	cmp	r0, #0
 801359e:	f000 80a4 	beq.w	80136ea <rcl_expand_topic_name+0x282>
 80135a2:	464a      	mov	r2, r9
 80135a4:	4620      	mov	r0, r4
 80135a6:	ab14      	add	r3, sp, #80	@ 0x50
 80135a8:	4629      	mov	r1, r5
 80135aa:	f002 fbc1 	bl	8015d30 <rcutils_repl_str>
 80135ae:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 80135b0:	9918      	ldr	r1, [sp, #96]	@ 0x60
 80135b2:	4604      	mov	r4, r0
 80135b4:	4628      	mov	r0, r5
 80135b6:	4798      	blx	r3
 80135b8:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 80135ba:	9918      	ldr	r1, [sp, #96]	@ 0x60
 80135bc:	4658      	mov	r0, fp
 80135be:	4798      	blx	r3
 80135c0:	2c00      	cmp	r4, #0
 80135c2:	f000 8083 	beq.w	80136cc <rcl_expand_topic_name+0x264>
 80135c6:	217b      	movs	r1, #123	@ 0x7b
 80135c8:	4620      	mov	r0, r4
 80135ca:	f006 fb23 	bl	8019c14 <strchr>
 80135ce:	46a3      	mov	fp, r4
 80135d0:	4605      	mov	r5, r0
 80135d2:	e7b6      	b.n	8013542 <rcl_expand_topic_name+0xda>
 80135d4:	2800      	cmp	r0, #0
 80135d6:	d151      	bne.n	801367c <rcl_expand_topic_name+0x214>
 80135d8:	4638      	mov	r0, r7
 80135da:	f7ec fe03 	bl	80001e4 <strlen>
 80135de:	4b53      	ldr	r3, [pc, #332]	@ (801372c <rcl_expand_topic_name+0x2c4>)
 80135e0:	4a53      	ldr	r2, [pc, #332]	@ (8013730 <rcl_expand_topic_name+0x2c8>)
 80135e2:	f8cd 8010 	str.w	r8, [sp, #16]
 80135e6:	2801      	cmp	r0, #1
 80135e8:	bf0c      	ite	eq
 80135ea:	4618      	moveq	r0, r3
 80135ec:	4610      	movne	r0, r2
 80135ee:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 80135f0:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80135f4:	e9cd 3200 	strd	r3, r2, [sp]
 80135f8:	e9cd 0702 	strd	r0, r7, [sp, #8]
 80135fc:	ab14      	add	r3, sp, #80	@ 0x50
 80135fe:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8013600:	f002 fb44 	bl	8015c8c <rcutils_format_string_limit>
 8013604:	4682      	mov	sl, r0
 8013606:	4653      	mov	r3, sl
 8013608:	2b00      	cmp	r3, #0
 801360a:	d05f      	beq.n	80136cc <rcl_expand_topic_name+0x264>
 801360c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 801360e:	f8c3 a000 	str.w	sl, [r3]
 8013612:	4620      	mov	r0, r4
 8013614:	b00b      	add	sp, #44	@ 0x2c
 8013616:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801361a:	240b      	movs	r4, #11
 801361c:	4620      	mov	r0, r4
 801361e:	b00b      	add	sp, #44	@ 0x2c
 8013620:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013624:	f7ff fe98 	bl	8013358 <rcl_convert_rmw_ret_to_rcl_ret>
 8013628:	4604      	mov	r4, r0
 801362a:	e7f2      	b.n	8013612 <rcl_expand_topic_name+0x1aa>
 801362c:	2467      	movs	r4, #103	@ 0x67
 801362e:	4620      	mov	r0, r4
 8013630:	b00b      	add	sp, #44	@ 0x2c
 8013632:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013636:	24c9      	movs	r4, #201	@ 0xc9
 8013638:	e7eb      	b.n	8013612 <rcl_expand_topic_name+0x1aa>
 801363a:	f109 32ff 	add.w	r2, r9, #4294967295	@ 0xffffffff
 801363e:	9806      	ldr	r0, [sp, #24]
 8013640:	1c69      	adds	r1, r5, #1
 8013642:	f7fa fe33 	bl	800e2ac <rcutils_string_map_getn>
 8013646:	4681      	mov	r9, r0
 8013648:	2800      	cmp	r0, #0
 801364a:	d19b      	bne.n	8013584 <rcl_expand_topic_name+0x11c>
 801364c:	aa16      	add	r2, sp, #88	@ 0x58
 801364e:	ca07      	ldmia	r2, {r0, r1, r2}
 8013650:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8013652:	f8c3 9000 	str.w	r9, [r3]
 8013656:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 801365a:	ab14      	add	r3, sp, #80	@ 0x50
 801365c:	cb0c      	ldmia	r3, {r2, r3}
 801365e:	4651      	mov	r1, sl
 8013660:	4628      	mov	r0, r5
 8013662:	f002 fc5f 	bl	8015f24 <rcutils_strndup>
 8013666:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8013668:	9918      	ldr	r1, [sp, #96]	@ 0x60
 801366a:	4798      	blx	r3
 801366c:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 801366e:	9918      	ldr	r1, [sp, #96]	@ 0x60
 8013670:	4658      	mov	r0, fp
 8013672:	4798      	blx	r3
 8013674:	2469      	movs	r4, #105	@ 0x69
 8013676:	e7cc      	b.n	8013612 <rcl_expand_topic_name+0x1aa>
 8013678:	2800      	cmp	r0, #0
 801367a:	d03e      	beq.n	80136fa <rcl_expand_topic_name+0x292>
 801367c:	46c1      	mov	r9, r8
 801367e:	46a2      	mov	sl, r4
 8013680:	e75c      	b.n	801353c <rcl_expand_topic_name+0xd4>
 8013682:	46b1      	mov	r9, r6
 8013684:	e77e      	b.n	8013584 <rcl_expand_topic_name+0x11c>
 8013686:	f89a 3000 	ldrb.w	r3, [sl]
 801368a:	2b2f      	cmp	r3, #47	@ 0x2f
 801368c:	d0be      	beq.n	801360c <rcl_expand_topic_name+0x1a4>
 801368e:	4638      	mov	r0, r7
 8013690:	f7ec fda8 	bl	80001e4 <strlen>
 8013694:	4b25      	ldr	r3, [pc, #148]	@ (801372c <rcl_expand_topic_name+0x2c4>)
 8013696:	4926      	ldr	r1, [pc, #152]	@ (8013730 <rcl_expand_topic_name+0x2c8>)
 8013698:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 801369a:	f8cd a010 	str.w	sl, [sp, #16]
 801369e:	2801      	cmp	r0, #1
 80136a0:	bf0c      	ite	eq
 80136a2:	4618      	moveq	r0, r3
 80136a4:	4608      	movne	r0, r1
 80136a6:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80136aa:	e9cd 2300 	strd	r2, r3, [sp]
 80136ae:	e9cd 0702 	strd	r0, r7, [sp, #8]
 80136b2:	ab14      	add	r3, sp, #80	@ 0x50
 80136b4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80136b6:	f002 fae9 	bl	8015c8c <rcutils_format_string_limit>
 80136ba:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 80136bc:	9918      	ldr	r1, [sp, #96]	@ 0x60
 80136be:	4603      	mov	r3, r0
 80136c0:	4650      	mov	r0, sl
 80136c2:	469a      	mov	sl, r3
 80136c4:	4790      	blx	r2
 80136c6:	e79e      	b.n	8013606 <rcl_expand_topic_name+0x19e>
 80136c8:	24ca      	movs	r4, #202	@ 0xca
 80136ca:	e7a2      	b.n	8013612 <rcl_expand_topic_name+0x1aa>
 80136cc:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 80136ce:	2300      	movs	r3, #0
 80136d0:	6013      	str	r3, [r2, #0]
 80136d2:	240a      	movs	r4, #10
 80136d4:	e79d      	b.n	8013612 <rcl_expand_topic_name+0x1aa>
 80136d6:	465b      	mov	r3, fp
 80136d8:	9c07      	ldr	r4, [sp, #28]
 80136da:	46da      	mov	sl, fp
 80136dc:	2b00      	cmp	r3, #0
 80136de:	d1d2      	bne.n	8013686 <rcl_expand_topic_name+0x21e>
 80136e0:	f898 3000 	ldrb.w	r3, [r8]
 80136e4:	2b2f      	cmp	r3, #47	@ 0x2f
 80136e6:	d091      	beq.n	801360c <rcl_expand_topic_name+0x1a4>
 80136e8:	e776      	b.n	80135d8 <rcl_expand_topic_name+0x170>
 80136ea:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80136ec:	9918      	ldr	r1, [sp, #96]	@ 0x60
 80136ee:	601d      	str	r5, [r3, #0]
 80136f0:	4658      	mov	r0, fp
 80136f2:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 80136f4:	4798      	blx	r3
 80136f6:	240a      	movs	r4, #10
 80136f8:	e78b      	b.n	8013612 <rcl_expand_topic_name+0x1aa>
 80136fa:	e9dd 0117 	ldrd	r0, r1, [sp, #92]	@ 0x5c
 80136fe:	e88d 0003 	stmia.w	sp, {r0, r1}
 8013702:	ab14      	add	r3, sp, #80	@ 0x50
 8013704:	cb0e      	ldmia	r3, {r1, r2, r3}
 8013706:	4640      	mov	r0, r8
 8013708:	f002 fbea 	bl	8015ee0 <rcutils_strdup>
 801370c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 801370e:	2800      	cmp	r0, #0
 8013710:	bf08      	it	eq
 8013712:	240a      	moveq	r4, #10
 8013714:	6018      	str	r0, [r3, #0]
 8013716:	e77c      	b.n	8013612 <rcl_expand_topic_name+0x1aa>
 8013718:	0801af88 	.word	0x0801af88
 801371c:	0801afe4 	.word	0x0801afe4
 8013720:	0801aff4 	.word	0x0801aff4
 8013724:	0801affc 	.word	0x0801affc
 8013728:	0801b004 	.word	0x0801b004
 801372c:	0801af98 	.word	0x0801af98
 8013730:	0801afec 	.word	0x0801afec

08013734 <rcl_get_default_topic_name_substitutions>:
 8013734:	2800      	cmp	r0, #0
 8013736:	bf0c      	ite	eq
 8013738:	200b      	moveq	r0, #11
 801373a:	2000      	movne	r0, #0
 801373c:	4770      	bx	lr
 801373e:	bf00      	nop

08013740 <rcl_init>:
 8013740:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013744:	1e07      	subs	r7, r0, #0
 8013746:	b09f      	sub	sp, #124	@ 0x7c
 8013748:	4688      	mov	r8, r1
 801374a:	4692      	mov	sl, r2
 801374c:	4699      	mov	r9, r3
 801374e:	f340 8097 	ble.w	8013880 <rcl_init+0x140>
 8013752:	2900      	cmp	r1, #0
 8013754:	f000 8097 	beq.w	8013886 <rcl_init+0x146>
 8013758:	1f0d      	subs	r5, r1, #4
 801375a:	2400      	movs	r4, #0
 801375c:	f855 6f04 	ldr.w	r6, [r5, #4]!
 8013760:	3401      	adds	r4, #1
 8013762:	2e00      	cmp	r6, #0
 8013764:	f000 808f 	beq.w	8013886 <rcl_init+0x146>
 8013768:	42a7      	cmp	r7, r4
 801376a:	d1f7      	bne.n	801375c <rcl_init+0x1c>
 801376c:	f1ba 0f00 	cmp.w	sl, #0
 8013770:	f000 8089 	beq.w	8013886 <rcl_init+0x146>
 8013774:	f8da 4000 	ldr.w	r4, [sl]
 8013778:	2c00      	cmp	r4, #0
 801377a:	f000 8084 	beq.w	8013886 <rcl_init+0x146>
 801377e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8013780:	ad19      	add	r5, sp, #100	@ 0x64
 8013782:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8013784:	6823      	ldr	r3, [r4, #0]
 8013786:	602b      	str	r3, [r5, #0]
 8013788:	a819      	add	r0, sp, #100	@ 0x64
 801378a:	f7fa fc55 	bl	800e038 <rcutils_allocator_is_valid>
 801378e:	2800      	cmp	r0, #0
 8013790:	d079      	beq.n	8013886 <rcl_init+0x146>
 8013792:	f1b9 0f00 	cmp.w	r9, #0
 8013796:	d076      	beq.n	8013886 <rcl_init+0x146>
 8013798:	f8d9 3000 	ldr.w	r3, [r9]
 801379c:	2b00      	cmp	r3, #0
 801379e:	d177      	bne.n	8013890 <rcl_init+0x150>
 80137a0:	e9dd 321c 	ldrd	r3, r2, [sp, #112]	@ 0x70
 80137a4:	2178      	movs	r1, #120	@ 0x78
 80137a6:	2001      	movs	r0, #1
 80137a8:	4798      	blx	r3
 80137aa:	4604      	mov	r4, r0
 80137ac:	f8c9 0000 	str.w	r0, [r9]
 80137b0:	2800      	cmp	r0, #0
 80137b2:	f000 80ba 	beq.w	801392a <rcl_init+0x1ea>
 80137b6:	a802      	add	r0, sp, #8
 80137b8:	f002 fbd0 	bl	8015f5c <rmw_get_zero_initialized_context>
 80137bc:	a902      	add	r1, sp, #8
 80137be:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 80137c2:	2250      	movs	r2, #80	@ 0x50
 80137c4:	ac19      	add	r4, sp, #100	@ 0x64
 80137c6:	f006 fb3c 	bl	8019e42 <memcpy>
 80137ca:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80137cc:	f8d9 5000 	ldr.w	r5, [r9]
 80137d0:	6826      	ldr	r6, [r4, #0]
 80137d2:	462c      	mov	r4, r5
 80137d4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80137d6:	f105 0114 	add.w	r1, r5, #20
 80137da:	6026      	str	r6, [r4, #0]
 80137dc:	4650      	mov	r0, sl
 80137de:	f000 f931 	bl	8013a44 <rcl_init_options_copy>
 80137e2:	4606      	mov	r6, r0
 80137e4:	2800      	cmp	r0, #0
 80137e6:	d144      	bne.n	8013872 <rcl_init+0x132>
 80137e8:	f8d9 a000 	ldr.w	sl, [r9]
 80137ec:	463c      	mov	r4, r7
 80137ee:	17fd      	asrs	r5, r7, #31
 80137f0:	e9ca 4506 	strd	r4, r5, [sl, #24]
 80137f4:	f8ca 0020 	str.w	r0, [sl, #32]
 80137f8:	2f00      	cmp	r7, #0
 80137fa:	d050      	beq.n	801389e <rcl_init+0x15e>
 80137fc:	f1b8 0f00 	cmp.w	r8, #0
 8013800:	d04d      	beq.n	801389e <rcl_init+0x15e>
 8013802:	e9dd 321c 	ldrd	r3, r2, [sp, #112]	@ 0x70
 8013806:	4638      	mov	r0, r7
 8013808:	2104      	movs	r1, #4
 801380a:	4798      	blx	r3
 801380c:	f8ca 0020 	str.w	r0, [sl, #32]
 8013810:	f8d9 a000 	ldr.w	sl, [r9]
 8013814:	f8da 3020 	ldr.w	r3, [sl, #32]
 8013818:	46d3      	mov	fp, sl
 801381a:	b34b      	cbz	r3, 8013870 <rcl_init+0x130>
 801381c:	2f01      	cmp	r7, #1
 801381e:	f175 0300 	sbcs.w	r3, r5, #0
 8013822:	db3c      	blt.n	801389e <rcl_init+0x15e>
 8013824:	f1a8 0804 	sub.w	r8, r8, #4
 8013828:	2600      	movs	r6, #0
 801382a:	2700      	movs	r7, #0
 801382c:	e00c      	b.n	8013848 <rcl_init+0x108>
 801382e:	f8d8 1000 	ldr.w	r1, [r8]
 8013832:	f006 fb06 	bl	8019e42 <memcpy>
 8013836:	3601      	adds	r6, #1
 8013838:	f147 0700 	adc.w	r7, r7, #0
 801383c:	42bd      	cmp	r5, r7
 801383e:	bf08      	it	eq
 8013840:	42b4      	cmpeq	r4, r6
 8013842:	d02a      	beq.n	801389a <rcl_init+0x15a>
 8013844:	f8d9 b000 	ldr.w	fp, [r9]
 8013848:	f858 0f04 	ldr.w	r0, [r8, #4]!
 801384c:	f7ec fcca 	bl	80001e4 <strlen>
 8013850:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8013852:	991d      	ldr	r1, [sp, #116]	@ 0x74
 8013854:	f8db a020 	ldr.w	sl, [fp, #32]
 8013858:	9001      	str	r0, [sp, #4]
 801385a:	4798      	blx	r3
 801385c:	f8d9 1000 	ldr.w	r1, [r9]
 8013860:	9a01      	ldr	r2, [sp, #4]
 8013862:	6a09      	ldr	r1, [r1, #32]
 8013864:	00b3      	lsls	r3, r6, #2
 8013866:	f84a 0003 	str.w	r0, [sl, r3]
 801386a:	58c8      	ldr	r0, [r1, r3]
 801386c:	2800      	cmp	r0, #0
 801386e:	d1de      	bne.n	801382e <rcl_init+0xee>
 8013870:	260a      	movs	r6, #10
 8013872:	4648      	mov	r0, r9
 8013874:	f7ff fd94 	bl	80133a0 <__cleanup_context>
 8013878:	4630      	mov	r0, r6
 801387a:	b01f      	add	sp, #124	@ 0x7c
 801387c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013880:	2900      	cmp	r1, #0
 8013882:	f43f af73 	beq.w	801376c <rcl_init+0x2c>
 8013886:	260b      	movs	r6, #11
 8013888:	4630      	mov	r0, r6
 801388a:	b01f      	add	sp, #124	@ 0x7c
 801388c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013890:	2664      	movs	r6, #100	@ 0x64
 8013892:	4630      	mov	r0, r6
 8013894:	b01f      	add	sp, #124	@ 0x7c
 8013896:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801389a:	f8d9 a000 	ldr.w	sl, [r9]
 801389e:	4a2c      	ldr	r2, [pc, #176]	@ (8013950 <rcl_init+0x210>)
 80138a0:	6813      	ldr	r3, [r2, #0]
 80138a2:	3301      	adds	r3, #1
 80138a4:	d03b      	beq.n	801391e <rcl_init+0x1de>
 80138a6:	6013      	str	r3, [r2, #0]
 80138a8:	4619      	mov	r1, r3
 80138aa:	2000      	movs	r0, #0
 80138ac:	f8da 4014 	ldr.w	r4, [sl, #20]
 80138b0:	f8c9 3004 	str.w	r3, [r9, #4]
 80138b4:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 80138b6:	3301      	adds	r3, #1
 80138b8:	e9c4 1006 	strd	r1, r0, [r4, #24]
 80138bc:	d039      	beq.n	8013932 <rcl_init+0x1f2>
 80138be:	f894 3030 	ldrb.w	r3, [r4, #48]	@ 0x30
 80138c2:	b94b      	cbnz	r3, 80138d8 <rcl_init+0x198>
 80138c4:	f104 0030 	add.w	r0, r4, #48	@ 0x30
 80138c8:	f000 f962 	bl	8013b90 <rcl_get_localhost_only>
 80138cc:	4606      	mov	r6, r0
 80138ce:	2800      	cmp	r0, #0
 80138d0:	d1cf      	bne.n	8013872 <rcl_init+0x132>
 80138d2:	f8d9 3000 	ldr.w	r3, [r9]
 80138d6:	695c      	ldr	r4, [r3, #20]
 80138d8:	6b60      	ldr	r0, [r4, #52]	@ 0x34
 80138da:	aa18      	add	r2, sp, #96	@ 0x60
 80138dc:	a917      	add	r1, sp, #92	@ 0x5c
 80138de:	f001 fa33 	bl	8014d48 <rcl_validate_enclave_name>
 80138e2:	4606      	mov	r6, r0
 80138e4:	2800      	cmp	r0, #0
 80138e6:	d1c4      	bne.n	8013872 <rcl_init+0x132>
 80138e8:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 80138ea:	bb03      	cbnz	r3, 801392e <rcl_init+0x1ee>
 80138ec:	f8d9 1000 	ldr.w	r1, [r9]
 80138f0:	694b      	ldr	r3, [r1, #20]
 80138f2:	6b58      	ldr	r0, [r3, #52]	@ 0x34
 80138f4:	f103 0228 	add.w	r2, r3, #40	@ 0x28
 80138f8:	f000 fbf2 	bl	80140e0 <rcl_get_security_options_from_environment>
 80138fc:	4606      	mov	r6, r0
 80138fe:	2800      	cmp	r0, #0
 8013900:	d1b7      	bne.n	8013872 <rcl_init+0x132>
 8013902:	f8d9 1000 	ldr.w	r1, [r9]
 8013906:	6948      	ldr	r0, [r1, #20]
 8013908:	3128      	adds	r1, #40	@ 0x28
 801390a:	3018      	adds	r0, #24
 801390c:	f002 fd6a 	bl	80163e4 <rmw_init>
 8013910:	4606      	mov	r6, r0
 8013912:	2800      	cmp	r0, #0
 8013914:	d0b8      	beq.n	8013888 <rcl_init+0x148>
 8013916:	f7ff fd1f 	bl	8013358 <rcl_convert_rmw_ret_to_rcl_ret>
 801391a:	4606      	mov	r6, r0
 801391c:	e7a9      	b.n	8013872 <rcl_init+0x132>
 801391e:	2401      	movs	r4, #1
 8013920:	4618      	mov	r0, r3
 8013922:	4621      	mov	r1, r4
 8013924:	6014      	str	r4, [r2, #0]
 8013926:	4623      	mov	r3, r4
 8013928:	e7c0      	b.n	80138ac <rcl_init+0x16c>
 801392a:	260a      	movs	r6, #10
 801392c:	e7ac      	b.n	8013888 <rcl_init+0x148>
 801392e:	2601      	movs	r6, #1
 8013930:	e79f      	b.n	8013872 <rcl_init+0x132>
 8013932:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 8013936:	f005 fb29 	bl	8018f8c <rcl_get_default_domain_id>
 801393a:	4606      	mov	r6, r0
 801393c:	2800      	cmp	r0, #0
 801393e:	d198      	bne.n	8013872 <rcl_init+0x132>
 8013940:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8013942:	3301      	adds	r3, #1
 8013944:	f8d9 3000 	ldr.w	r3, [r9]
 8013948:	bf08      	it	eq
 801394a:	6260      	streq	r0, [r4, #36]	@ 0x24
 801394c:	695c      	ldr	r4, [r3, #20]
 801394e:	e7b6      	b.n	80138be <rcl_init+0x17e>
 8013950:	20007570 	.word	0x20007570

08013954 <rcl_get_zero_initialized_init_options>:
 8013954:	2000      	movs	r0, #0
 8013956:	4770      	bx	lr

08013958 <rcl_init_options_init>:
 8013958:	b084      	sub	sp, #16
 801395a:	b5f0      	push	{r4, r5, r6, r7, lr}
 801395c:	b091      	sub	sp, #68	@ 0x44
 801395e:	af17      	add	r7, sp, #92	@ 0x5c
 8013960:	e887 000e 	stmia.w	r7, {r1, r2, r3}
 8013964:	2800      	cmp	r0, #0
 8013966:	d044      	beq.n	80139f2 <rcl_init_options_init+0x9a>
 8013968:	6803      	ldr	r3, [r0, #0]
 801396a:	4606      	mov	r6, r0
 801396c:	b133      	cbz	r3, 801397c <rcl_init_options_init+0x24>
 801396e:	2464      	movs	r4, #100	@ 0x64
 8013970:	4620      	mov	r0, r4
 8013972:	b011      	add	sp, #68	@ 0x44
 8013974:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8013978:	b004      	add	sp, #16
 801397a:	4770      	bx	lr
 801397c:	4638      	mov	r0, r7
 801397e:	f7fa fb5b 	bl	800e038 <rcutils_allocator_is_valid>
 8013982:	2800      	cmp	r0, #0
 8013984:	d035      	beq.n	80139f2 <rcl_init_options_init+0x9a>
 8013986:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8013988:	991b      	ldr	r1, [sp, #108]	@ 0x6c
 801398a:	2050      	movs	r0, #80	@ 0x50
 801398c:	4798      	blx	r3
 801398e:	4604      	mov	r4, r0
 8013990:	6030      	str	r0, [r6, #0]
 8013992:	2800      	cmp	r0, #0
 8013994:	d02f      	beq.n	80139f6 <rcl_init_options_init+0x9e>
 8013996:	46bc      	mov	ip, r7
 8013998:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 801399c:	4625      	mov	r5, r4
 801399e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80139a0:	f8dc 3000 	ldr.w	r3, [ip]
 80139a4:	602b      	str	r3, [r5, #0]
 80139a6:	a802      	add	r0, sp, #8
 80139a8:	ad02      	add	r5, sp, #8
 80139aa:	f002 fadf 	bl	8015f6c <rmw_get_zero_initialized_init_options>
 80139ae:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80139b0:	3418      	adds	r4, #24
 80139b2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80139b4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80139b6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80139b8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80139ba:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80139bc:	e895 0003 	ldmia.w	r5, {r0, r1}
 80139c0:	6833      	ldr	r3, [r6, #0]
 80139c2:	e884 0003 	stmia.w	r4, {r0, r1}
 80139c6:	e9dd 011a 	ldrd	r0, r1, [sp, #104]	@ 0x68
 80139ca:	e88d 0003 	stmia.w	sp, {r0, r1}
 80139ce:	f103 0018 	add.w	r0, r3, #24
 80139d2:	e897 000e 	ldmia.w	r7, {r1, r2, r3}
 80139d6:	f002 fc2b 	bl	8016230 <rmw_init_options_init>
 80139da:	4604      	mov	r4, r0
 80139dc:	2800      	cmp	r0, #0
 80139de:	d0c7      	beq.n	8013970 <rcl_init_options_init+0x18>
 80139e0:	6830      	ldr	r0, [r6, #0]
 80139e2:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 80139e4:	991b      	ldr	r1, [sp, #108]	@ 0x6c
 80139e6:	4798      	blx	r3
 80139e8:	4620      	mov	r0, r4
 80139ea:	f7ff fcb5 	bl	8013358 <rcl_convert_rmw_ret_to_rcl_ret>
 80139ee:	4604      	mov	r4, r0
 80139f0:	e7be      	b.n	8013970 <rcl_init_options_init+0x18>
 80139f2:	240b      	movs	r4, #11
 80139f4:	e7bc      	b.n	8013970 <rcl_init_options_init+0x18>
 80139f6:	240a      	movs	r4, #10
 80139f8:	e7ba      	b.n	8013970 <rcl_init_options_init+0x18>
 80139fa:	bf00      	nop

080139fc <rcl_init_options_fini>:
 80139fc:	b570      	push	{r4, r5, r6, lr}
 80139fe:	b086      	sub	sp, #24
 8013a00:	b1c0      	cbz	r0, 8013a34 <rcl_init_options_fini+0x38>
 8013a02:	6804      	ldr	r4, [r0, #0]
 8013a04:	4606      	mov	r6, r0
 8013a06:	b1ac      	cbz	r4, 8013a34 <rcl_init_options_fini+0x38>
 8013a08:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8013a0a:	ad01      	add	r5, sp, #4
 8013a0c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8013a0e:	6823      	ldr	r3, [r4, #0]
 8013a10:	602b      	str	r3, [r5, #0]
 8013a12:	a801      	add	r0, sp, #4
 8013a14:	f7fa fb10 	bl	800e038 <rcutils_allocator_is_valid>
 8013a18:	b160      	cbz	r0, 8013a34 <rcl_init_options_fini+0x38>
 8013a1a:	6830      	ldr	r0, [r6, #0]
 8013a1c:	3018      	adds	r0, #24
 8013a1e:	f002 fca1 	bl	8016364 <rmw_init_options_fini>
 8013a22:	4604      	mov	r4, r0
 8013a24:	b950      	cbnz	r0, 8013a3c <rcl_init_options_fini+0x40>
 8013a26:	6830      	ldr	r0, [r6, #0]
 8013a28:	9b02      	ldr	r3, [sp, #8]
 8013a2a:	9905      	ldr	r1, [sp, #20]
 8013a2c:	4798      	blx	r3
 8013a2e:	4620      	mov	r0, r4
 8013a30:	b006      	add	sp, #24
 8013a32:	bd70      	pop	{r4, r5, r6, pc}
 8013a34:	240b      	movs	r4, #11
 8013a36:	4620      	mov	r0, r4
 8013a38:	b006      	add	sp, #24
 8013a3a:	bd70      	pop	{r4, r5, r6, pc}
 8013a3c:	f7ff fc8c 	bl	8013358 <rcl_convert_rmw_ret_to_rcl_ret>
 8013a40:	4604      	mov	r4, r0
 8013a42:	e7f8      	b.n	8013a36 <rcl_init_options_fini+0x3a>

08013a44 <rcl_init_options_copy>:
 8013a44:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013a48:	b096      	sub	sp, #88	@ 0x58
 8013a4a:	2800      	cmp	r0, #0
 8013a4c:	d063      	beq.n	8013b16 <rcl_init_options_copy+0xd2>
 8013a4e:	6806      	ldr	r6, [r0, #0]
 8013a50:	4605      	mov	r5, r0
 8013a52:	2e00      	cmp	r6, #0
 8013a54:	d05f      	beq.n	8013b16 <rcl_init_options_copy+0xd2>
 8013a56:	460c      	mov	r4, r1
 8013a58:	2900      	cmp	r1, #0
 8013a5a:	d05c      	beq.n	8013b16 <rcl_init_options_copy+0xd2>
 8013a5c:	680b      	ldr	r3, [r1, #0]
 8013a5e:	b123      	cbz	r3, 8013a6a <rcl_init_options_copy+0x26>
 8013a60:	2664      	movs	r6, #100	@ 0x64
 8013a62:	4630      	mov	r0, r6
 8013a64:	b016      	add	sp, #88	@ 0x58
 8013a66:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013a6a:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8013a6c:	af11      	add	r7, sp, #68	@ 0x44
 8013a6e:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 8013a70:	f10d 0844 	add.w	r8, sp, #68	@ 0x44
 8013a74:	6833      	ldr	r3, [r6, #0]
 8013a76:	603b      	str	r3, [r7, #0]
 8013a78:	4640      	mov	r0, r8
 8013a7a:	f7fa fadd 	bl	800e038 <rcutils_allocator_is_valid>
 8013a7e:	2800      	cmp	r0, #0
 8013a80:	d049      	beq.n	8013b16 <rcl_init_options_copy+0xd2>
 8013a82:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8013a84:	9915      	ldr	r1, [sp, #84]	@ 0x54
 8013a86:	2050      	movs	r0, #80	@ 0x50
 8013a88:	4798      	blx	r3
 8013a8a:	4606      	mov	r6, r0
 8013a8c:	6020      	str	r0, [r4, #0]
 8013a8e:	2800      	cmp	r0, #0
 8013a90:	d077      	beq.n	8013b82 <rcl_init_options_copy+0x13e>
 8013a92:	46c4      	mov	ip, r8
 8013a94:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8013a98:	4637      	mov	r7, r6
 8013a9a:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 8013a9c:	f8dc 3000 	ldr.w	r3, [ip]
 8013aa0:	603b      	str	r3, [r7, #0]
 8013aa2:	a802      	add	r0, sp, #8
 8013aa4:	af02      	add	r7, sp, #8
 8013aa6:	f002 fa61 	bl	8015f6c <rmw_get_zero_initialized_init_options>
 8013aaa:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 8013aac:	3618      	adds	r6, #24
 8013aae:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8013ab0:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 8013ab2:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8013ab4:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 8013ab6:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8013ab8:	e897 0003 	ldmia.w	r7, {r0, r1}
 8013abc:	ab16      	add	r3, sp, #88	@ 0x58
 8013abe:	e886 0003 	stmia.w	r6, {r0, r1}
 8013ac2:	e913 0003 	ldmdb	r3, {r0, r1}
 8013ac6:	6823      	ldr	r3, [r4, #0]
 8013ac8:	e88d 0003 	stmia.w	sp, {r0, r1}
 8013acc:	f103 0018 	add.w	r0, r3, #24
 8013ad0:	e898 000e 	ldmia.w	r8, {r1, r2, r3}
 8013ad4:	f002 fbac 	bl	8016230 <rmw_init_options_init>
 8013ad8:	4606      	mov	r6, r0
 8013ada:	bb08      	cbnz	r0, 8013b20 <rcl_init_options_copy+0xdc>
 8013adc:	682f      	ldr	r7, [r5, #0]
 8013ade:	f8d4 c000 	ldr.w	ip, [r4]
 8013ae2:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 8013ae4:	4666      	mov	r6, ip
 8013ae6:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8013ae8:	683b      	ldr	r3, [r7, #0]
 8013aea:	6033      	str	r3, [r6, #0]
 8013aec:	f10c 0018 	add.w	r0, ip, #24
 8013af0:	f002 fc38 	bl	8016364 <rmw_init_options_fini>
 8013af4:	4607      	mov	r7, r0
 8013af6:	b1f0      	cbz	r0, 8013b36 <rcl_init_options_copy+0xf2>
 8013af8:	f7fa faac 	bl	800e054 <rcutils_get_error_string>
 8013afc:	f7fa fac0 	bl	800e080 <rcutils_reset_error>
 8013b00:	4620      	mov	r0, r4
 8013b02:	f7ff ff7b 	bl	80139fc <rcl_init_options_fini>
 8013b06:	4606      	mov	r6, r0
 8013b08:	2800      	cmp	r0, #0
 8013b0a:	d1aa      	bne.n	8013a62 <rcl_init_options_copy+0x1e>
 8013b0c:	4638      	mov	r0, r7
 8013b0e:	f7ff fc23 	bl	8013358 <rcl_convert_rmw_ret_to_rcl_ret>
 8013b12:	4606      	mov	r6, r0
 8013b14:	e7a5      	b.n	8013a62 <rcl_init_options_copy+0x1e>
 8013b16:	260b      	movs	r6, #11
 8013b18:	4630      	mov	r0, r6
 8013b1a:	b016      	add	sp, #88	@ 0x58
 8013b1c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013b20:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8013b22:	9915      	ldr	r1, [sp, #84]	@ 0x54
 8013b24:	6820      	ldr	r0, [r4, #0]
 8013b26:	4798      	blx	r3
 8013b28:	4630      	mov	r0, r6
 8013b2a:	f7ff fc15 	bl	8013358 <rcl_convert_rmw_ret_to_rcl_ret>
 8013b2e:	4606      	mov	r6, r0
 8013b30:	2800      	cmp	r0, #0
 8013b32:	d0d3      	beq.n	8013adc <rcl_init_options_copy+0x98>
 8013b34:	e795      	b.n	8013a62 <rcl_init_options_copy+0x1e>
 8013b36:	a802      	add	r0, sp, #8
 8013b38:	ae02      	add	r6, sp, #8
 8013b3a:	6827      	ldr	r7, [r4, #0]
 8013b3c:	f002 fa16 	bl	8015f6c <rmw_get_zero_initialized_init_options>
 8013b40:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8013b42:	3718      	adds	r7, #24
 8013b44:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 8013b46:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8013b48:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 8013b4a:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8013b4c:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 8013b4e:	e896 0003 	ldmia.w	r6, {r0, r1}
 8013b52:	682a      	ldr	r2, [r5, #0]
 8013b54:	6823      	ldr	r3, [r4, #0]
 8013b56:	e887 0003 	stmia.w	r7, {r0, r1}
 8013b5a:	f102 0018 	add.w	r0, r2, #24
 8013b5e:	f103 0118 	add.w	r1, r3, #24
 8013b62:	f002 fbbd 	bl	80162e0 <rmw_init_options_copy>
 8013b66:	4606      	mov	r6, r0
 8013b68:	2800      	cmp	r0, #0
 8013b6a:	f43f af7a 	beq.w	8013a62 <rcl_init_options_copy+0x1e>
 8013b6e:	f7fa fa71 	bl	800e054 <rcutils_get_error_string>
 8013b72:	f7fa fa85 	bl	800e080 <rcutils_reset_error>
 8013b76:	4620      	mov	r0, r4
 8013b78:	f7ff ff40 	bl	80139fc <rcl_init_options_fini>
 8013b7c:	b118      	cbz	r0, 8013b86 <rcl_init_options_copy+0x142>
 8013b7e:	4606      	mov	r6, r0
 8013b80:	e76f      	b.n	8013a62 <rcl_init_options_copy+0x1e>
 8013b82:	260a      	movs	r6, #10
 8013b84:	e76d      	b.n	8013a62 <rcl_init_options_copy+0x1e>
 8013b86:	4630      	mov	r0, r6
 8013b88:	f7ff fbe6 	bl	8013358 <rcl_convert_rmw_ret_to_rcl_ret>
 8013b8c:	4606      	mov	r6, r0
 8013b8e:	e768      	b.n	8013a62 <rcl_init_options_copy+0x1e>

08013b90 <rcl_get_localhost_only>:
 8013b90:	b510      	push	{r4, lr}
 8013b92:	b082      	sub	sp, #8
 8013b94:	2300      	movs	r3, #0
 8013b96:	9301      	str	r3, [sp, #4]
 8013b98:	b1b8      	cbz	r0, 8013bca <rcl_get_localhost_only+0x3a>
 8013b9a:	4604      	mov	r4, r0
 8013b9c:	a901      	add	r1, sp, #4
 8013b9e:	480c      	ldr	r0, [pc, #48]	@ (8013bd0 <rcl_get_localhost_only+0x40>)
 8013ba0:	f002 f8ae 	bl	8015d00 <rcutils_get_env>
 8013ba4:	b110      	cbz	r0, 8013bac <rcl_get_localhost_only+0x1c>
 8013ba6:	2001      	movs	r0, #1
 8013ba8:	b002      	add	sp, #8
 8013baa:	bd10      	pop	{r4, pc}
 8013bac:	9b01      	ldr	r3, [sp, #4]
 8013bae:	b113      	cbz	r3, 8013bb6 <rcl_get_localhost_only+0x26>
 8013bb0:	781a      	ldrb	r2, [r3, #0]
 8013bb2:	2a31      	cmp	r2, #49	@ 0x31
 8013bb4:	d004      	beq.n	8013bc0 <rcl_get_localhost_only+0x30>
 8013bb6:	2302      	movs	r3, #2
 8013bb8:	2000      	movs	r0, #0
 8013bba:	7023      	strb	r3, [r4, #0]
 8013bbc:	b002      	add	sp, #8
 8013bbe:	bd10      	pop	{r4, pc}
 8013bc0:	785b      	ldrb	r3, [r3, #1]
 8013bc2:	2b00      	cmp	r3, #0
 8013bc4:	d1f7      	bne.n	8013bb6 <rcl_get_localhost_only+0x26>
 8013bc6:	2301      	movs	r3, #1
 8013bc8:	e7f6      	b.n	8013bb8 <rcl_get_localhost_only+0x28>
 8013bca:	200b      	movs	r0, #11
 8013bcc:	b002      	add	sp, #8
 8013bce:	bd10      	pop	{r4, pc}
 8013bd0:	0801b010 	.word	0x0801b010

08013bd4 <rcl_get_zero_initialized_node>:
 8013bd4:	4a03      	ldr	r2, [pc, #12]	@ (8013be4 <rcl_get_zero_initialized_node+0x10>)
 8013bd6:	4603      	mov	r3, r0
 8013bd8:	e892 0003 	ldmia.w	r2, {r0, r1}
 8013bdc:	e883 0003 	stmia.w	r3, {r0, r1}
 8013be0:	4618      	mov	r0, r3
 8013be2:	4770      	bx	lr
 8013be4:	0801b030 	.word	0x0801b030

08013be8 <rcl_node_init>:
 8013be8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013bec:	b09b      	sub	sp, #108	@ 0x6c
 8013bee:	4604      	mov	r4, r0
 8013bf0:	f8dd 8090 	ldr.w	r8, [sp, #144]	@ 0x90
 8013bf4:	f04f 0c00 	mov.w	ip, #0
 8013bf8:	a815      	add	r0, sp, #84	@ 0x54
 8013bfa:	460e      	mov	r6, r1
 8013bfc:	4615      	mov	r5, r2
 8013bfe:	461f      	mov	r7, r3
 8013c00:	f8cd c04c 	str.w	ip, [sp, #76]	@ 0x4c
 8013c04:	f005 fad8 	bl	80191b8 <rcl_guard_condition_get_default_options>
 8013c08:	f1b8 0f00 	cmp.w	r8, #0
 8013c0c:	f000 80fd 	beq.w	8013e0a <rcl_node_init+0x222>
 8013c10:	f108 0b04 	add.w	fp, r8, #4
 8013c14:	4658      	mov	r0, fp
 8013c16:	f7fa fa0f 	bl	800e038 <rcutils_allocator_is_valid>
 8013c1a:	2800      	cmp	r0, #0
 8013c1c:	f000 80f5 	beq.w	8013e0a <rcl_node_init+0x222>
 8013c20:	2e00      	cmp	r6, #0
 8013c22:	f000 80f2 	beq.w	8013e0a <rcl_node_init+0x222>
 8013c26:	2d00      	cmp	r5, #0
 8013c28:	f000 80ef 	beq.w	8013e0a <rcl_node_init+0x222>
 8013c2c:	2c00      	cmp	r4, #0
 8013c2e:	f000 80ec 	beq.w	8013e0a <rcl_node_init+0x222>
 8013c32:	f8d4 9004 	ldr.w	r9, [r4, #4]
 8013c36:	f1b9 0f00 	cmp.w	r9, #0
 8013c3a:	f040 8112 	bne.w	8013e62 <rcl_node_init+0x27a>
 8013c3e:	2f00      	cmp	r7, #0
 8013c40:	f000 80e3 	beq.w	8013e0a <rcl_node_init+0x222>
 8013c44:	4638      	mov	r0, r7
 8013c46:	f7ff fba5 	bl	8013394 <rcl_context_is_valid>
 8013c4a:	4682      	mov	sl, r0
 8013c4c:	2800      	cmp	r0, #0
 8013c4e:	f000 80e2 	beq.w	8013e16 <rcl_node_init+0x22e>
 8013c52:	464a      	mov	r2, r9
 8013c54:	a914      	add	r1, sp, #80	@ 0x50
 8013c56:	4630      	mov	r0, r6
 8013c58:	f8cd 9050 	str.w	r9, [sp, #80]	@ 0x50
 8013c5c:	f002 fa1c 	bl	8016098 <rmw_validate_node_name>
 8013c60:	4681      	mov	r9, r0
 8013c62:	2800      	cmp	r0, #0
 8013c64:	f040 80d3 	bne.w	8013e0e <rcl_node_init+0x226>
 8013c68:	9814      	ldr	r0, [sp, #80]	@ 0x50
 8013c6a:	2800      	cmp	r0, #0
 8013c6c:	f040 8105 	bne.w	8013e7a <rcl_node_init+0x292>
 8013c70:	4628      	mov	r0, r5
 8013c72:	f7ec fab7 	bl	80001e4 <strlen>
 8013c76:	2800      	cmp	r0, #0
 8013c78:	f040 80d0 	bne.w	8013e1c <rcl_node_init+0x234>
 8013c7c:	4d8e      	ldr	r5, [pc, #568]	@ (8013eb8 <rcl_node_init+0x2d0>)
 8013c7e:	a914      	add	r1, sp, #80	@ 0x50
 8013c80:	2200      	movs	r2, #0
 8013c82:	4628      	mov	r0, r5
 8013c84:	f002 f9ea 	bl	801605c <rmw_validate_namespace>
 8013c88:	4681      	mov	r9, r0
 8013c8a:	2800      	cmp	r0, #0
 8013c8c:	f040 80bf 	bne.w	8013e0e <rcl_node_init+0x226>
 8013c90:	4682      	mov	sl, r0
 8013c92:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8013c94:	2b00      	cmp	r3, #0
 8013c96:	f040 80f5 	bne.w	8013e84 <rcl_node_init+0x29c>
 8013c9a:	f8d8 2004 	ldr.w	r2, [r8, #4]
 8013c9e:	f8d8 1014 	ldr.w	r1, [r8, #20]
 8013ca2:	9307      	str	r3, [sp, #28]
 8013ca4:	2030      	movs	r0, #48	@ 0x30
 8013ca6:	4790      	blx	r2
 8013ca8:	4681      	mov	r9, r0
 8013caa:	6060      	str	r0, [r4, #4]
 8013cac:	2800      	cmp	r0, #0
 8013cae:	f000 80de 	beq.w	8013e6e <rcl_node_init+0x286>
 8013cb2:	9b07      	ldr	r3, [sp, #28]
 8013cb4:	e9c0 3308 	strd	r3, r3, [r0, #32]
 8013cb8:	e9c0 330a 	strd	r3, r3, [r0, #40]	@ 0x28
 8013cbc:	a80a      	add	r0, sp, #40	@ 0x28
 8013cbe:	f000 f92b 	bl	8013f18 <rcl_node_get_default_options>
 8013cc2:	f10d 0e28 	add.w	lr, sp, #40	@ 0x28
 8013cc6:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8013cca:	46cc      	mov	ip, r9
 8013ccc:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8013cd0:	e89e 0007 	ldmia.w	lr, {r0, r1, r2}
 8013cd4:	e88c 0007 	stmia.w	ip, {r0, r1, r2}
 8013cd8:	6861      	ldr	r1, [r4, #4]
 8013cda:	6027      	str	r7, [r4, #0]
 8013cdc:	4640      	mov	r0, r8
 8013cde:	f000 f937 	bl	8013f50 <rcl_node_options_copy>
 8013ce2:	2800      	cmp	r0, #0
 8013ce4:	d167      	bne.n	8013db6 <rcl_node_init+0x1ce>
 8013ce6:	4628      	mov	r0, r5
 8013ce8:	f7ec fa7c 	bl	80001e4 <strlen>
 8013cec:	4428      	add	r0, r5
 8013cee:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8013cf2:	f810 3c01 	ldrb.w	r3, [r0, #-1]
 8013cf6:	2b2f      	cmp	r3, #47	@ 0x2f
 8013cf8:	bf08      	it	eq
 8013cfa:	4970      	ldreq	r1, [pc, #448]	@ (8013ebc <rcl_node_init+0x2d4>)
 8013cfc:	f8db 3010 	ldr.w	r3, [fp, #16]
 8013d00:	bf18      	it	ne
 8013d02:	496f      	ldrne	r1, [pc, #444]	@ (8013ec0 <rcl_node_init+0x2d8>)
 8013d04:	9604      	str	r6, [sp, #16]
 8013d06:	e9cd 1502 	strd	r1, r5, [sp, #8]
 8013d0a:	e9cd 3200 	strd	r3, r2, [sp]
 8013d0e:	e89b 000f 	ldmia.w	fp, {r0, r1, r2, r3}
 8013d12:	f8d4 9004 	ldr.w	r9, [r4, #4]
 8013d16:	f001 ffb9 	bl	8015c8c <rcutils_format_string_limit>
 8013d1a:	f8c9 002c 	str.w	r0, [r9, #44]	@ 0x2c
 8013d1e:	f8d4 9004 	ldr.w	r9, [r4, #4]
 8013d22:	f8d9 3000 	ldr.w	r3, [r9]
 8013d26:	9313      	str	r3, [sp, #76]	@ 0x4c
 8013d28:	1c59      	adds	r1, r3, #1
 8013d2a:	f000 80b7 	beq.w	8013e9c <rcl_node_init+0x2b4>
 8013d2e:	683a      	ldr	r2, [r7, #0]
 8013d30:	f8c9 301c 	str.w	r3, [r9, #28]
 8013d34:	6952      	ldr	r2, [r2, #20]
 8013d36:	6821      	ldr	r1, [r4, #0]
 8013d38:	f892 2030 	ldrb.w	r2, [r2, #48]	@ 0x30
 8013d3c:	6808      	ldr	r0, [r1, #0]
 8013d3e:	f1a2 0201 	sub.w	r2, r2, #1
 8013d42:	fab2 f282 	clz	r2, r2
 8013d46:	0952      	lsrs	r2, r2, #5
 8013d48:	9200      	str	r2, [sp, #0]
 8013d4a:	4631      	mov	r1, r6
 8013d4c:	3028      	adds	r0, #40	@ 0x28
 8013d4e:	462a      	mov	r2, r5
 8013d50:	f002 fd9e 	bl	8016890 <rmw_create_node>
 8013d54:	6863      	ldr	r3, [r4, #4]
 8013d56:	f8c9 0020 	str.w	r0, [r9, #32]
 8013d5a:	6a18      	ldr	r0, [r3, #32]
 8013d5c:	b368      	cbz	r0, 8013dba <rcl_node_init+0x1d2>
 8013d5e:	f002 fe2b 	bl	80169b8 <rmw_node_get_graph_guard_condition>
 8013d62:	4681      	mov	r9, r0
 8013d64:	b338      	cbz	r0, 8013db6 <rcl_node_init+0x1ce>
 8013d66:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8013d6a:	f8d8 1014 	ldr.w	r1, [r8, #20]
 8013d6e:	6866      	ldr	r6, [r4, #4]
 8013d70:	2008      	movs	r0, #8
 8013d72:	4798      	blx	r3
 8013d74:	6863      	ldr	r3, [r4, #4]
 8013d76:	6270      	str	r0, [r6, #36]	@ 0x24
 8013d78:	6a5e      	ldr	r6, [r3, #36]	@ 0x24
 8013d7a:	b1f6      	cbz	r6, 8013dba <rcl_node_init+0x1d2>
 8013d7c:	a808      	add	r0, sp, #32
 8013d7e:	f005 f939 	bl	8018ff4 <rcl_get_zero_initialized_guard_condition>
 8013d82:	a808      	add	r0, sp, #32
 8013d84:	c803      	ldmia	r0, {r0, r1}
 8013d86:	e886 0003 	stmia.w	r6, {r0, r1}
 8013d8a:	e8bb 000f 	ldmia.w	fp!, {r0, r1, r2, r3}
 8013d8e:	ae15      	add	r6, sp, #84	@ 0x54
 8013d90:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8013d92:	f8db 3000 	ldr.w	r3, [fp]
 8013d96:	6033      	str	r3, [r6, #0]
 8013d98:	ab1a      	add	r3, sp, #104	@ 0x68
 8013d9a:	e913 000f 	ldmdb	r3, {r0, r1, r2, r3}
 8013d9e:	6866      	ldr	r6, [r4, #4]
 8013da0:	6a76      	ldr	r6, [r6, #36]	@ 0x24
 8013da2:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 8013da6:	4649      	mov	r1, r9
 8013da8:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8013daa:	4630      	mov	r0, r6
 8013dac:	463a      	mov	r2, r7
 8013dae:	f005 f985 	bl	80190bc <rcl_guard_condition_init_from_rmw>
 8013db2:	4681      	mov	r9, r0
 8013db4:	b328      	cbz	r0, 8013e02 <rcl_node_init+0x21a>
 8013db6:	6863      	ldr	r3, [r4, #4]
 8013db8:	b1f3      	cbz	r3, 8013df8 <rcl_node_init+0x210>
 8013dba:	6ad8      	ldr	r0, [r3, #44]	@ 0x2c
 8013dbc:	b128      	cbz	r0, 8013dca <rcl_node_init+0x1e2>
 8013dbe:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8013dc2:	f8d8 1014 	ldr.w	r1, [r8, #20]
 8013dc6:	4798      	blx	r3
 8013dc8:	6863      	ldr	r3, [r4, #4]
 8013dca:	6a18      	ldr	r0, [r3, #32]
 8013dcc:	b110      	cbz	r0, 8013dd4 <rcl_node_init+0x1ec>
 8013dce:	f002 fd77 	bl	80168c0 <rmw_destroy_node>
 8013dd2:	6863      	ldr	r3, [r4, #4]
 8013dd4:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 8013dd6:	b148      	cbz	r0, 8013dec <rcl_node_init+0x204>
 8013dd8:	f005 f9c8 	bl	801916c <rcl_guard_condition_fini>
 8013ddc:	6862      	ldr	r2, [r4, #4]
 8013dde:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8013de2:	6a50      	ldr	r0, [r2, #36]	@ 0x24
 8013de4:	f8d8 1014 	ldr.w	r1, [r8, #20]
 8013de8:	4798      	blx	r3
 8013dea:	6863      	ldr	r3, [r4, #4]
 8013dec:	f8d8 2008 	ldr.w	r2, [r8, #8]
 8013df0:	f8d8 1014 	ldr.w	r1, [r8, #20]
 8013df4:	4618      	mov	r0, r3
 8013df6:	4790      	blx	r2
 8013df8:	2300      	movs	r3, #0
 8013dfa:	e9c4 3300 	strd	r3, r3, [r4]
 8013dfe:	f04f 0901 	mov.w	r9, #1
 8013e02:	f1ba 0f00 	cmp.w	sl, #0
 8013e06:	d125      	bne.n	8013e54 <rcl_node_init+0x26c>
 8013e08:	e001      	b.n	8013e0e <rcl_node_init+0x226>
 8013e0a:	f04f 090b 	mov.w	r9, #11
 8013e0e:	4648      	mov	r0, r9
 8013e10:	b01b      	add	sp, #108	@ 0x6c
 8013e12:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013e16:	f04f 0965 	mov.w	r9, #101	@ 0x65
 8013e1a:	e7f8      	b.n	8013e0e <rcl_node_init+0x226>
 8013e1c:	782b      	ldrb	r3, [r5, #0]
 8013e1e:	2b2f      	cmp	r3, #47	@ 0x2f
 8013e20:	f43f af2d 	beq.w	8013c7e <rcl_node_init+0x96>
 8013e24:	4927      	ldr	r1, [pc, #156]	@ (8013ec4 <rcl_node_init+0x2dc>)
 8013e26:	f8db 3010 	ldr.w	r3, [fp, #16]
 8013e2a:	9300      	str	r3, [sp, #0]
 8013e2c:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8013e30:	e9cd 2101 	strd	r2, r1, [sp, #4]
 8013e34:	9503      	str	r5, [sp, #12]
 8013e36:	e89b 000f 	ldmia.w	fp, {r0, r1, r2, r3}
 8013e3a:	f001 ff27 	bl	8015c8c <rcutils_format_string_limit>
 8013e3e:	4605      	mov	r5, r0
 8013e40:	b348      	cbz	r0, 8013e96 <rcl_node_init+0x2ae>
 8013e42:	2200      	movs	r2, #0
 8013e44:	a914      	add	r1, sp, #80	@ 0x50
 8013e46:	9214      	str	r2, [sp, #80]	@ 0x50
 8013e48:	f002 f908 	bl	801605c <rmw_validate_namespace>
 8013e4c:	4681      	mov	r9, r0
 8013e4e:	2800      	cmp	r0, #0
 8013e50:	f43f af1f 	beq.w	8013c92 <rcl_node_init+0xaa>
 8013e54:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8013e58:	f8d8 1014 	ldr.w	r1, [r8, #20]
 8013e5c:	4628      	mov	r0, r5
 8013e5e:	4798      	blx	r3
 8013e60:	e7d5      	b.n	8013e0e <rcl_node_init+0x226>
 8013e62:	f04f 0964 	mov.w	r9, #100	@ 0x64
 8013e66:	4648      	mov	r0, r9
 8013e68:	b01b      	add	sp, #108	@ 0x6c
 8013e6a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013e6e:	f04f 090a 	mov.w	r9, #10
 8013e72:	f1ba 0f00 	cmp.w	sl, #0
 8013e76:	d1ed      	bne.n	8013e54 <rcl_node_init+0x26c>
 8013e78:	e7c9      	b.n	8013e0e <rcl_node_init+0x226>
 8013e7a:	f002 f95f 	bl	801613c <rmw_node_name_validation_result_string>
 8013e7e:	f04f 09c9 	mov.w	r9, #201	@ 0xc9
 8013e82:	e7c4      	b.n	8013e0e <rcl_node_init+0x226>
 8013e84:	4618      	mov	r0, r3
 8013e86:	f002 f8fb 	bl	8016080 <rmw_namespace_validation_result_string>
 8013e8a:	f04f 09ca 	mov.w	r9, #202	@ 0xca
 8013e8e:	f1ba 0f00 	cmp.w	sl, #0
 8013e92:	d1df      	bne.n	8013e54 <rcl_node_init+0x26c>
 8013e94:	e7bb      	b.n	8013e0e <rcl_node_init+0x226>
 8013e96:	f04f 090a 	mov.w	r9, #10
 8013e9a:	e7b8      	b.n	8013e0e <rcl_node_init+0x226>
 8013e9c:	a813      	add	r0, sp, #76	@ 0x4c
 8013e9e:	f005 f875 	bl	8018f8c <rcl_get_default_domain_id>
 8013ea2:	2800      	cmp	r0, #0
 8013ea4:	d187      	bne.n	8013db6 <rcl_node_init+0x1ce>
 8013ea6:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8013ea8:	f8d4 9004 	ldr.w	r9, [r4, #4]
 8013eac:	1c5a      	adds	r2, r3, #1
 8013eae:	bf04      	itt	eq
 8013eb0:	9013      	streq	r0, [sp, #76]	@ 0x4c
 8013eb2:	4603      	moveq	r3, r0
 8013eb4:	e73b      	b.n	8013d2e <rcl_node_init+0x146>
 8013eb6:	bf00      	nop
 8013eb8:	0801b028 	.word	0x0801b028
 8013ebc:	0801af98 	.word	0x0801af98
 8013ec0:	0801afec 	.word	0x0801afec
 8013ec4:	0801b02c 	.word	0x0801b02c

08013ec8 <rcl_node_is_valid>:
 8013ec8:	b130      	cbz	r0, 8013ed8 <rcl_node_is_valid+0x10>
 8013eca:	6843      	ldr	r3, [r0, #4]
 8013ecc:	b123      	cbz	r3, 8013ed8 <rcl_node_is_valid+0x10>
 8013ece:	6a1b      	ldr	r3, [r3, #32]
 8013ed0:	b113      	cbz	r3, 8013ed8 <rcl_node_is_valid+0x10>
 8013ed2:	6800      	ldr	r0, [r0, #0]
 8013ed4:	f7ff ba5e 	b.w	8013394 <rcl_context_is_valid>
 8013ed8:	2000      	movs	r0, #0
 8013eda:	4770      	bx	lr

08013edc <rcl_node_get_name>:
 8013edc:	b120      	cbz	r0, 8013ee8 <rcl_node_get_name+0xc>
 8013ede:	6840      	ldr	r0, [r0, #4]
 8013ee0:	b110      	cbz	r0, 8013ee8 <rcl_node_get_name+0xc>
 8013ee2:	6a00      	ldr	r0, [r0, #32]
 8013ee4:	b100      	cbz	r0, 8013ee8 <rcl_node_get_name+0xc>
 8013ee6:	6880      	ldr	r0, [r0, #8]
 8013ee8:	4770      	bx	lr
 8013eea:	bf00      	nop

08013eec <rcl_node_get_namespace>:
 8013eec:	b120      	cbz	r0, 8013ef8 <rcl_node_get_namespace+0xc>
 8013eee:	6840      	ldr	r0, [r0, #4]
 8013ef0:	b110      	cbz	r0, 8013ef8 <rcl_node_get_namespace+0xc>
 8013ef2:	6a00      	ldr	r0, [r0, #32]
 8013ef4:	b100      	cbz	r0, 8013ef8 <rcl_node_get_namespace+0xc>
 8013ef6:	68c0      	ldr	r0, [r0, #12]
 8013ef8:	4770      	bx	lr
 8013efa:	bf00      	nop

08013efc <rcl_node_get_options>:
 8013efc:	b128      	cbz	r0, 8013f0a <rcl_node_get_options+0xe>
 8013efe:	6840      	ldr	r0, [r0, #4]
 8013f00:	b118      	cbz	r0, 8013f0a <rcl_node_get_options+0xe>
 8013f02:	6a03      	ldr	r3, [r0, #32]
 8013f04:	2b00      	cmp	r3, #0
 8013f06:	bf08      	it	eq
 8013f08:	2000      	moveq	r0, #0
 8013f0a:	4770      	bx	lr

08013f0c <rcl_node_get_rmw_handle>:
 8013f0c:	b110      	cbz	r0, 8013f14 <rcl_node_get_rmw_handle+0x8>
 8013f0e:	6840      	ldr	r0, [r0, #4]
 8013f10:	b100      	cbz	r0, 8013f14 <rcl_node_get_rmw_handle+0x8>
 8013f12:	6a00      	ldr	r0, [r0, #32]
 8013f14:	4770      	bx	lr
 8013f16:	bf00      	nop

08013f18 <rcl_node_get_default_options>:
 8013f18:	b5f0      	push	{r4, r5, r6, r7, lr}
 8013f1a:	b087      	sub	sp, #28
 8013f1c:	4607      	mov	r7, r0
 8013f1e:	466d      	mov	r5, sp
 8013f20:	4668      	mov	r0, sp
 8013f22:	f7fa f87b 	bl	800e01c <rcutils_get_default_allocator>
 8013f26:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8013f28:	4c08      	ldr	r4, [pc, #32]	@ (8013f4c <rcl_node_get_default_options+0x34>)
 8013f2a:	f8d5 c000 	ldr.w	ip, [r5]
 8013f2e:	1d26      	adds	r6, r4, #4
 8013f30:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8013f32:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8013f34:	463d      	mov	r5, r7
 8013f36:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8013f38:	f8c6 c000 	str.w	ip, [r6]
 8013f3c:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8013f40:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 8013f44:	4638      	mov	r0, r7
 8013f46:	b007      	add	sp, #28
 8013f48:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013f4a:	bf00      	nop
 8013f4c:	200000b4 	.word	0x200000b4

08013f50 <rcl_node_options_copy>:
 8013f50:	b1c8      	cbz	r0, 8013f86 <rcl_node_options_copy+0x36>
 8013f52:	b4f0      	push	{r4, r5, r6, r7}
 8013f54:	460f      	mov	r7, r1
 8013f56:	b199      	cbz	r1, 8013f80 <rcl_node_options_copy+0x30>
 8013f58:	4288      	cmp	r0, r1
 8013f5a:	4606      	mov	r6, r0
 8013f5c:	d010      	beq.n	8013f80 <rcl_node_options_copy+0x30>
 8013f5e:	4605      	mov	r5, r0
 8013f60:	460c      	mov	r4, r1
 8013f62:	f855 3b04 	ldr.w	r3, [r5], #4
 8013f66:	f844 3b04 	str.w	r3, [r4], #4
 8013f6a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8013f6c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8013f6e:	7e32      	ldrb	r2, [r6, #24]
 8013f70:	6829      	ldr	r1, [r5, #0]
 8013f72:	7e73      	ldrb	r3, [r6, #25]
 8013f74:	6021      	str	r1, [r4, #0]
 8013f76:	2000      	movs	r0, #0
 8013f78:	763a      	strb	r2, [r7, #24]
 8013f7a:	767b      	strb	r3, [r7, #25]
 8013f7c:	bcf0      	pop	{r4, r5, r6, r7}
 8013f7e:	4770      	bx	lr
 8013f80:	200b      	movs	r0, #11
 8013f82:	bcf0      	pop	{r4, r5, r6, r7}
 8013f84:	4770      	bx	lr
 8013f86:	200b      	movs	r0, #11
 8013f88:	4770      	bx	lr
 8013f8a:	bf00      	nop

08013f8c <exact_match_lookup>:
 8013f8c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8013f8e:	f102 0708 	add.w	r7, r2, #8
 8013f92:	460b      	mov	r3, r1
 8013f94:	4614      	mov	r4, r2
 8013f96:	4606      	mov	r6, r0
 8013f98:	e897 0007 	ldmia.w	r7, {r0, r1, r2}
 8013f9c:	b085      	sub	sp, #20
 8013f9e:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 8013fa2:	4618      	mov	r0, r3
 8013fa4:	4918      	ldr	r1, [pc, #96]	@ (8014008 <exact_match_lookup+0x7c>)
 8013fa6:	e894 000c 	ldmia.w	r4, {r2, r3}
 8013faa:	f001 fe61 	bl	8015c70 <rcutils_join_path>
 8013fae:	7833      	ldrb	r3, [r6, #0]
 8013fb0:	2b2f      	cmp	r3, #47	@ 0x2f
 8013fb2:	4605      	mov	r5, r0
 8013fb4:	d021      	beq.n	8013ffa <exact_match_lookup+0x6e>
 8013fb6:	e9d4 0103 	ldrd	r0, r1, [r4, #12]
 8013fba:	e88d 0003 	stmia.w	sp, {r0, r1}
 8013fbe:	1c70      	adds	r0, r6, #1
 8013fc0:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 8013fc4:	f001 fe5a 	bl	8015c7c <rcutils_to_native_path>
 8013fc8:	4606      	mov	r6, r0
 8013fca:	e897 0007 	ldmia.w	r7, {r0, r1, r2}
 8013fce:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 8013fd2:	4631      	mov	r1, r6
 8013fd4:	e894 000c 	ldmia.w	r4, {r2, r3}
 8013fd8:	4628      	mov	r0, r5
 8013fda:	f001 fe49 	bl	8015c70 <rcutils_join_path>
 8013fde:	6862      	ldr	r2, [r4, #4]
 8013fe0:	6921      	ldr	r1, [r4, #16]
 8013fe2:	4603      	mov	r3, r0
 8013fe4:	4630      	mov	r0, r6
 8013fe6:	461e      	mov	r6, r3
 8013fe8:	4790      	blx	r2
 8013fea:	4628      	mov	r0, r5
 8013fec:	6863      	ldr	r3, [r4, #4]
 8013fee:	6921      	ldr	r1, [r4, #16]
 8013ff0:	4798      	blx	r3
 8013ff2:	4635      	mov	r5, r6
 8013ff4:	4628      	mov	r0, r5
 8013ff6:	b005      	add	sp, #20
 8013ff8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013ffa:	7873      	ldrb	r3, [r6, #1]
 8013ffc:	2b00      	cmp	r3, #0
 8013ffe:	d1da      	bne.n	8013fb6 <exact_match_lookup+0x2a>
 8014000:	4628      	mov	r0, r5
 8014002:	b005      	add	sp, #20
 8014004:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014006:	bf00      	nop
 8014008:	0801b074 	.word	0x0801b074

0801400c <rcl_get_secure_root>:
 801400c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8014010:	b085      	sub	sp, #20
 8014012:	b168      	cbz	r0, 8014030 <rcl_get_secure_root+0x24>
 8014014:	4607      	mov	r7, r0
 8014016:	4608      	mov	r0, r1
 8014018:	460c      	mov	r4, r1
 801401a:	f7fa f80d 	bl	800e038 <rcutils_allocator_is_valid>
 801401e:	b138      	cbz	r0, 8014030 <rcl_get_secure_root+0x24>
 8014020:	2300      	movs	r3, #0
 8014022:	482d      	ldr	r0, [pc, #180]	@ (80140d8 <rcl_get_secure_root+0xcc>)
 8014024:	9303      	str	r3, [sp, #12]
 8014026:	a903      	add	r1, sp, #12
 8014028:	f001 fe6a 	bl	8015d00 <rcutils_get_env>
 801402c:	4605      	mov	r5, r0
 801402e:	b120      	cbz	r0, 801403a <rcl_get_secure_root+0x2e>
 8014030:	2500      	movs	r5, #0
 8014032:	4628      	mov	r0, r5
 8014034:	b005      	add	sp, #20
 8014036:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801403a:	9b03      	ldr	r3, [sp, #12]
 801403c:	781a      	ldrb	r2, [r3, #0]
 801403e:	2a00      	cmp	r2, #0
 8014040:	d0f6      	beq.n	8014030 <rcl_get_secure_root+0x24>
 8014042:	f104 090c 	add.w	r9, r4, #12
 8014046:	e899 0003 	ldmia.w	r9, {r0, r1}
 801404a:	e88d 0003 	stmia.w	sp, {r0, r1}
 801404e:	4618      	mov	r0, r3
 8014050:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 8014054:	f001 ff44 	bl	8015ee0 <rcutils_strdup>
 8014058:	4680      	mov	r8, r0
 801405a:	2800      	cmp	r0, #0
 801405c:	d0e8      	beq.n	8014030 <rcl_get_secure_root+0x24>
 801405e:	481f      	ldr	r0, [pc, #124]	@ (80140dc <rcl_get_secure_root+0xd0>)
 8014060:	9503      	str	r5, [sp, #12]
 8014062:	a903      	add	r1, sp, #12
 8014064:	f001 fe4c 	bl	8015d00 <rcutils_get_env>
 8014068:	b160      	cbz	r0, 8014084 <rcl_get_secure_root+0x78>
 801406a:	2600      	movs	r6, #0
 801406c:	6863      	ldr	r3, [r4, #4]
 801406e:	6921      	ldr	r1, [r4, #16]
 8014070:	4630      	mov	r0, r6
 8014072:	4798      	blx	r3
 8014074:	4640      	mov	r0, r8
 8014076:	6863      	ldr	r3, [r4, #4]
 8014078:	6921      	ldr	r1, [r4, #16]
 801407a:	4798      	blx	r3
 801407c:	4628      	mov	r0, r5
 801407e:	b005      	add	sp, #20
 8014080:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8014084:	9b03      	ldr	r3, [sp, #12]
 8014086:	781e      	ldrb	r6, [r3, #0]
 8014088:	b1f6      	cbz	r6, 80140c8 <rcl_get_secure_root+0xbc>
 801408a:	e899 0003 	ldmia.w	r9, {r0, r1}
 801408e:	e88d 0003 	stmia.w	sp, {r0, r1}
 8014092:	4618      	mov	r0, r3
 8014094:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 8014098:	f001 ff22 	bl	8015ee0 <rcutils_strdup>
 801409c:	4606      	mov	r6, r0
 801409e:	2800      	cmp	r0, #0
 80140a0:	d0e3      	beq.n	801406a <rcl_get_secure_root+0x5e>
 80140a2:	4622      	mov	r2, r4
 80140a4:	4641      	mov	r1, r8
 80140a6:	f7ff ff71 	bl	8013f8c <exact_match_lookup>
 80140aa:	4605      	mov	r5, r0
 80140ac:	2d00      	cmp	r5, #0
 80140ae:	d0dd      	beq.n	801406c <rcl_get_secure_root+0x60>
 80140b0:	4628      	mov	r0, r5
 80140b2:	f001 fddb 	bl	8015c6c <rcutils_is_directory>
 80140b6:	4607      	mov	r7, r0
 80140b8:	2800      	cmp	r0, #0
 80140ba:	d1d7      	bne.n	801406c <rcl_get_secure_root+0x60>
 80140bc:	4628      	mov	r0, r5
 80140be:	6863      	ldr	r3, [r4, #4]
 80140c0:	6921      	ldr	r1, [r4, #16]
 80140c2:	4798      	blx	r3
 80140c4:	463d      	mov	r5, r7
 80140c6:	e7d1      	b.n	801406c <rcl_get_secure_root+0x60>
 80140c8:	4638      	mov	r0, r7
 80140ca:	4622      	mov	r2, r4
 80140cc:	4641      	mov	r1, r8
 80140ce:	f7ff ff5d 	bl	8013f8c <exact_match_lookup>
 80140d2:	4605      	mov	r5, r0
 80140d4:	e7ea      	b.n	80140ac <rcl_get_secure_root+0xa0>
 80140d6:	bf00      	nop
 80140d8:	0801b080 	.word	0x0801b080
 80140dc:	0801b098 	.word	0x0801b098

080140e0 <rcl_get_security_options_from_environment>:
 80140e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80140e4:	b082      	sub	sp, #8
 80140e6:	4607      	mov	r7, r0
 80140e8:	4688      	mov	r8, r1
 80140ea:	2400      	movs	r4, #0
 80140ec:	481d      	ldr	r0, [pc, #116]	@ (8014164 <rcl_get_security_options_from_environment+0x84>)
 80140ee:	9401      	str	r4, [sp, #4]
 80140f0:	a901      	add	r1, sp, #4
 80140f2:	4616      	mov	r6, r2
 80140f4:	f001 fe04 	bl	8015d00 <rcutils_get_env>
 80140f8:	b120      	cbz	r0, 8014104 <rcl_get_security_options_from_environment+0x24>
 80140fa:	2501      	movs	r5, #1
 80140fc:	4628      	mov	r0, r5
 80140fe:	b002      	add	sp, #8
 8014100:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014104:	4918      	ldr	r1, [pc, #96]	@ (8014168 <rcl_get_security_options_from_environment+0x88>)
 8014106:	4604      	mov	r4, r0
 8014108:	9801      	ldr	r0, [sp, #4]
 801410a:	f7ec f861 	bl	80001d0 <strcmp>
 801410e:	4605      	mov	r5, r0
 8014110:	b9c8      	cbnz	r0, 8014146 <rcl_get_security_options_from_environment+0x66>
 8014112:	9001      	str	r0, [sp, #4]
 8014114:	b1ee      	cbz	r6, 8014152 <rcl_get_security_options_from_environment+0x72>
 8014116:	4815      	ldr	r0, [pc, #84]	@ (801416c <rcl_get_security_options_from_environment+0x8c>)
 8014118:	a901      	add	r1, sp, #4
 801411a:	f001 fdf1 	bl	8015d00 <rcutils_get_env>
 801411e:	2800      	cmp	r0, #0
 8014120:	d1eb      	bne.n	80140fa <rcl_get_security_options_from_environment+0x1a>
 8014122:	4913      	ldr	r1, [pc, #76]	@ (8014170 <rcl_get_security_options_from_environment+0x90>)
 8014124:	9801      	ldr	r0, [sp, #4]
 8014126:	f7ec f853 	bl	80001d0 <strcmp>
 801412a:	fab0 f080 	clz	r0, r0
 801412e:	0940      	lsrs	r0, r0, #5
 8014130:	7030      	strb	r0, [r6, #0]
 8014132:	4641      	mov	r1, r8
 8014134:	4638      	mov	r0, r7
 8014136:	f7ff ff69 	bl	801400c <rcl_get_secure_root>
 801413a:	b160      	cbz	r0, 8014156 <rcl_get_security_options_from_environment+0x76>
 801413c:	6070      	str	r0, [r6, #4]
 801413e:	4628      	mov	r0, r5
 8014140:	b002      	add	sp, #8
 8014142:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014146:	4625      	mov	r5, r4
 8014148:	4628      	mov	r0, r5
 801414a:	7034      	strb	r4, [r6, #0]
 801414c:	b002      	add	sp, #8
 801414e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014152:	250b      	movs	r5, #11
 8014154:	e7d2      	b.n	80140fc <rcl_get_security_options_from_environment+0x1c>
 8014156:	7835      	ldrb	r5, [r6, #0]
 8014158:	f1a5 0501 	sub.w	r5, r5, #1
 801415c:	fab5 f585 	clz	r5, r5
 8014160:	096d      	lsrs	r5, r5, #5
 8014162:	e7cb      	b.n	80140fc <rcl_get_security_options_from_environment+0x1c>
 8014164:	0801b038 	.word	0x0801b038
 8014168:	0801b04c 	.word	0x0801b04c
 801416c:	0801b054 	.word	0x0801b054
 8014170:	0801b06c 	.word	0x0801b06c

08014174 <rcl_service_get_rmw_handle>:
 8014174:	b110      	cbz	r0, 801417c <rcl_service_get_rmw_handle+0x8>
 8014176:	6800      	ldr	r0, [r0, #0]
 8014178:	b100      	cbz	r0, 801417c <rcl_service_get_rmw_handle+0x8>
 801417a:	6e80      	ldr	r0, [r0, #104]	@ 0x68
 801417c:	4770      	bx	lr
 801417e:	bf00      	nop

08014180 <rcl_take_request>:
 8014180:	b5f0      	push	{r4, r5, r6, r7, lr}
 8014182:	460e      	mov	r6, r1
 8014184:	460c      	mov	r4, r1
 8014186:	4607      	mov	r7, r0
 8014188:	4694      	mov	ip, r2
 801418a:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 801418c:	b08d      	sub	sp, #52	@ 0x34
 801418e:	ad06      	add	r5, sp, #24
 8014190:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8014192:	e896 0003 	ldmia.w	r6, {r0, r1}
 8014196:	e885 0003 	stmia.w	r5, {r0, r1}
 801419a:	b1e7      	cbz	r7, 80141d6 <rcl_take_request+0x56>
 801419c:	683b      	ldr	r3, [r7, #0]
 801419e:	b1d3      	cbz	r3, 80141d6 <rcl_take_request+0x56>
 80141a0:	6e98      	ldr	r0, [r3, #104]	@ 0x68
 80141a2:	b1c0      	cbz	r0, 80141d6 <rcl_take_request+0x56>
 80141a4:	4662      	mov	r2, ip
 80141a6:	b30a      	cbz	r2, 80141ec <rcl_take_request+0x6c>
 80141a8:	2500      	movs	r5, #0
 80141aa:	f10d 0307 	add.w	r3, sp, #7
 80141ae:	a902      	add	r1, sp, #8
 80141b0:	f88d 5007 	strb.w	r5, [sp, #7]
 80141b4:	f002 fc06 	bl	80169c4 <rmw_take_request>
 80141b8:	4606      	mov	r6, r0
 80141ba:	b178      	cbz	r0, 80141dc <rcl_take_request+0x5c>
 80141bc:	280a      	cmp	r0, #10
 80141be:	bf18      	it	ne
 80141c0:	2601      	movne	r6, #1
 80141c2:	ad06      	add	r5, sp, #24
 80141c4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80141c6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80141c8:	e895 0003 	ldmia.w	r5, {r0, r1}
 80141cc:	e884 0003 	stmia.w	r4, {r0, r1}
 80141d0:	4630      	mov	r0, r6
 80141d2:	b00d      	add	sp, #52	@ 0x34
 80141d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80141d6:	f44f 7616 	mov.w	r6, #600	@ 0x258
 80141da:	e7f2      	b.n	80141c2 <rcl_take_request+0x42>
 80141dc:	f89d 2007 	ldrb.w	r2, [sp, #7]
 80141e0:	f240 2359 	movw	r3, #601	@ 0x259
 80141e4:	2a00      	cmp	r2, #0
 80141e6:	bf08      	it	eq
 80141e8:	461e      	moveq	r6, r3
 80141ea:	e7ea      	b.n	80141c2 <rcl_take_request+0x42>
 80141ec:	260b      	movs	r6, #11
 80141ee:	e7e8      	b.n	80141c2 <rcl_take_request+0x42>

080141f0 <rcl_send_response>:
 80141f0:	b160      	cbz	r0, 801420c <rcl_send_response+0x1c>
 80141f2:	6800      	ldr	r0, [r0, #0]
 80141f4:	b150      	cbz	r0, 801420c <rcl_send_response+0x1c>
 80141f6:	6e80      	ldr	r0, [r0, #104]	@ 0x68
 80141f8:	b140      	cbz	r0, 801420c <rcl_send_response+0x1c>
 80141fa:	b151      	cbz	r1, 8014212 <rcl_send_response+0x22>
 80141fc:	b510      	push	{r4, lr}
 80141fe:	b152      	cbz	r2, 8014216 <rcl_send_response+0x26>
 8014200:	f002 fc3e 	bl	8016a80 <rmw_send_response>
 8014204:	3800      	subs	r0, #0
 8014206:	bf18      	it	ne
 8014208:	2001      	movne	r0, #1
 801420a:	bd10      	pop	{r4, pc}
 801420c:	f44f 7016 	mov.w	r0, #600	@ 0x258
 8014210:	4770      	bx	lr
 8014212:	200b      	movs	r0, #11
 8014214:	4770      	bx	lr
 8014216:	200b      	movs	r0, #11
 8014218:	bd10      	pop	{r4, pc}
 801421a:	bf00      	nop

0801421c <rcl_get_zero_initialized_subscription>:
 801421c:	4b01      	ldr	r3, [pc, #4]	@ (8014224 <rcl_get_zero_initialized_subscription+0x8>)
 801421e:	6818      	ldr	r0, [r3, #0]
 8014220:	4770      	bx	lr
 8014222:	bf00      	nop
 8014224:	0801b0b8 	.word	0x0801b0b8

08014228 <rcl_subscription_init>:
 8014228:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801422c:	b091      	sub	sp, #68	@ 0x44
 801422e:	9f1a      	ldr	r7, [sp, #104]	@ 0x68
 8014230:	b1d7      	cbz	r7, 8014268 <rcl_subscription_init+0x40>
 8014232:	f107 0950 	add.w	r9, r7, #80	@ 0x50
 8014236:	4604      	mov	r4, r0
 8014238:	4648      	mov	r0, r9
 801423a:	4688      	mov	r8, r1
 801423c:	4616      	mov	r6, r2
 801423e:	461d      	mov	r5, r3
 8014240:	f7f9 fefa 	bl	800e038 <rcutils_allocator_is_valid>
 8014244:	b180      	cbz	r0, 8014268 <rcl_subscription_init+0x40>
 8014246:	b17c      	cbz	r4, 8014268 <rcl_subscription_init+0x40>
 8014248:	4640      	mov	r0, r8
 801424a:	f7ff fe3d 	bl	8013ec8 <rcl_node_is_valid>
 801424e:	b380      	cbz	r0, 80142b2 <rcl_subscription_init+0x8a>
 8014250:	b156      	cbz	r6, 8014268 <rcl_subscription_init+0x40>
 8014252:	b14d      	cbz	r5, 8014268 <rcl_subscription_init+0x40>
 8014254:	f8d4 a000 	ldr.w	sl, [r4]
 8014258:	f1ba 0f00 	cmp.w	sl, #0
 801425c:	d009      	beq.n	8014272 <rcl_subscription_init+0x4a>
 801425e:	2564      	movs	r5, #100	@ 0x64
 8014260:	4628      	mov	r0, r5
 8014262:	b011      	add	sp, #68	@ 0x44
 8014264:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014268:	250b      	movs	r5, #11
 801426a:	4628      	mov	r0, r5
 801426c:	b011      	add	sp, #68	@ 0x44
 801426e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014272:	46ce      	mov	lr, r9
 8014274:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8014278:	f10d 0c2c 	add.w	ip, sp, #44	@ 0x2c
 801427c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8014280:	f8de 3000 	ldr.w	r3, [lr]
 8014284:	f8cc 3000 	str.w	r3, [ip]
 8014288:	f7f9 ff12 	bl	800e0b0 <rcutils_get_zero_initialized_string_map>
 801428c:	ab10      	add	r3, sp, #64	@ 0x40
 801428e:	4684      	mov	ip, r0
 8014290:	e913 0007 	ldmdb	r3, {r0, r1, r2}
 8014294:	f8cd c020 	str.w	ip, [sp, #32]
 8014298:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 801429c:	e9dd 230b 	ldrd	r2, r3, [sp, #44]	@ 0x2c
 80142a0:	4651      	mov	r1, sl
 80142a2:	a808      	add	r0, sp, #32
 80142a4:	f7f9 ff7e 	bl	800e1a4 <rcutils_string_map_init>
 80142a8:	b140      	cbz	r0, 80142bc <rcl_subscription_init+0x94>
 80142aa:	280a      	cmp	r0, #10
 80142ac:	d011      	beq.n	80142d2 <rcl_subscription_init+0xaa>
 80142ae:	2501      	movs	r5, #1
 80142b0:	e7db      	b.n	801426a <rcl_subscription_init+0x42>
 80142b2:	25c8      	movs	r5, #200	@ 0xc8
 80142b4:	4628      	mov	r0, r5
 80142b6:	b011      	add	sp, #68	@ 0x44
 80142b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80142bc:	a808      	add	r0, sp, #32
 80142be:	f7ff fa39 	bl	8013734 <rcl_get_default_topic_name_substitutions>
 80142c2:	4682      	mov	sl, r0
 80142c4:	b138      	cbz	r0, 80142d6 <rcl_subscription_init+0xae>
 80142c6:	a808      	add	r0, sp, #32
 80142c8:	f7f9 ffac 	bl	800e224 <rcutils_string_map_fini>
 80142cc:	f1ba 0f0a 	cmp.w	sl, #10
 80142d0:	d1ed      	bne.n	80142ae <rcl_subscription_init+0x86>
 80142d2:	250a      	movs	r5, #10
 80142d4:	e7c9      	b.n	801426a <rcl_subscription_init+0x42>
 80142d6:	4640      	mov	r0, r8
 80142d8:	f8cd a024 	str.w	sl, [sp, #36]	@ 0x24
 80142dc:	f7ff fdfe 	bl	8013edc <rcl_node_get_name>
 80142e0:	4682      	mov	sl, r0
 80142e2:	4640      	mov	r0, r8
 80142e4:	f7ff fe02 	bl	8013eec <rcl_node_get_namespace>
 80142e8:	4686      	mov	lr, r0
 80142ea:	e8b9 000f 	ldmia.w	r9!, {r0, r1, r2, r3}
 80142ee:	f10d 0b24 	add.w	fp, sp, #36	@ 0x24
 80142f2:	46ec      	mov	ip, sp
 80142f4:	f8cd b014 	str.w	fp, [sp, #20]
 80142f8:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80142fc:	f8d9 3000 	ldr.w	r3, [r9]
 8014300:	f8cc 3000 	str.w	r3, [ip]
 8014304:	4628      	mov	r0, r5
 8014306:	4651      	mov	r1, sl
 8014308:	4672      	mov	r2, lr
 801430a:	ab08      	add	r3, sp, #32
 801430c:	f7ff f8ac 	bl	8013468 <rcl_expand_topic_name>
 8014310:	4605      	mov	r5, r0
 8014312:	a808      	add	r0, sp, #32
 8014314:	f7f9 ff86 	bl	800e224 <rcutils_string_map_fini>
 8014318:	b920      	cbnz	r0, 8014324 <rcl_subscription_init+0xfc>
 801431a:	b15d      	cbz	r5, 8014334 <rcl_subscription_init+0x10c>
 801431c:	2d67      	cmp	r5, #103	@ 0x67
 801431e:	d002      	beq.n	8014326 <rcl_subscription_init+0xfe>
 8014320:	2d69      	cmp	r5, #105	@ 0x69
 8014322:	d05a      	beq.n	80143da <rcl_subscription_init+0x1b2>
 8014324:	2501      	movs	r5, #1
 8014326:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8014328:	2800      	cmp	r0, #0
 801432a:	d09e      	beq.n	801426a <rcl_subscription_init+0x42>
 801432c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801432e:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 8014330:	4798      	blx	r3
 8014332:	e79a      	b.n	801426a <rcl_subscription_init+0x42>
 8014334:	4640      	mov	r0, r8
 8014336:	f7ff fde1 	bl	8013efc <rcl_node_get_options>
 801433a:	2800      	cmp	r0, #0
 801433c:	d0f2      	beq.n	8014324 <rcl_subscription_init+0xfc>
 801433e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8014340:	f7eb ff50 	bl	80001e4 <strlen>
 8014344:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8014346:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 8014348:	3001      	adds	r0, #1
 801434a:	4798      	blx	r3
 801434c:	9909      	ldr	r1, [sp, #36]	@ 0x24
 801434e:	9107      	str	r1, [sp, #28]
 8014350:	4681      	mov	r9, r0
 8014352:	4608      	mov	r0, r1
 8014354:	f7eb ff46 	bl	80001e4 <strlen>
 8014358:	9907      	ldr	r1, [sp, #28]
 801435a:	1c42      	adds	r2, r0, #1
 801435c:	4648      	mov	r0, r9
 801435e:	f005 fd70 	bl	8019e42 <memcpy>
 8014362:	462a      	mov	r2, r5
 8014364:	4648      	mov	r0, r9
 8014366:	a90a      	add	r1, sp, #40	@ 0x28
 8014368:	f7fa f824 	bl	800e3b4 <rmw_validate_full_topic_name>
 801436c:	2800      	cmp	r0, #0
 801436e:	d132      	bne.n	80143d6 <rcl_subscription_init+0x1ae>
 8014370:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8014372:	2b00      	cmp	r3, #0
 8014374:	d133      	bne.n	80143de <rcl_subscription_init+0x1b6>
 8014376:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8014378:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 801437a:	20c8      	movs	r0, #200	@ 0xc8
 801437c:	4798      	blx	r3
 801437e:	6020      	str	r0, [r4, #0]
 8014380:	b378      	cbz	r0, 80143e2 <rcl_subscription_init+0x1ba>
 8014382:	4640      	mov	r0, r8
 8014384:	f7ff fdc2 	bl	8013f0c <rcl_node_get_rmw_handle>
 8014388:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 801438c:	9300      	str	r3, [sp, #0]
 801438e:	4631      	mov	r1, r6
 8014390:	463b      	mov	r3, r7
 8014392:	464a      	mov	r2, r9
 8014394:	6825      	ldr	r5, [r4, #0]
 8014396:	f002 fc61 	bl	8016c5c <rmw_create_subscription>
 801439a:	6821      	ldr	r1, [r4, #0]
 801439c:	f8c5 00c0 	str.w	r0, [r5, #192]	@ 0xc0
 80143a0:	f8d1 00c0 	ldr.w	r0, [r1, #192]	@ 0xc0
 80143a4:	b368      	cbz	r0, 8014402 <rcl_subscription_init+0x1da>
 80143a6:	3170      	adds	r1, #112	@ 0x70
 80143a8:	f002 fd34 	bl	8016e14 <rmw_subscription_get_actual_qos>
 80143ac:	4605      	mov	r5, r0
 80143ae:	b9d0      	cbnz	r0, 80143e6 <rcl_subscription_init+0x1be>
 80143b0:	6820      	ldr	r0, [r4, #0]
 80143b2:	f897 3048 	ldrb.w	r3, [r7, #72]	@ 0x48
 80143b6:	f880 30b8 	strb.w	r3, [r0, #184]	@ 0xb8
 80143ba:	2270      	movs	r2, #112	@ 0x70
 80143bc:	4639      	mov	r1, r7
 80143be:	f005 fd40 	bl	8019e42 <memcpy>
 80143c2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80143c4:	b110      	cbz	r0, 80143cc <rcl_subscription_init+0x1a4>
 80143c6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80143c8:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 80143ca:	4798      	blx	r3
 80143cc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80143ce:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 80143d0:	4648      	mov	r0, r9
 80143d2:	4798      	blx	r3
 80143d4:	e749      	b.n	801426a <rcl_subscription_init+0x42>
 80143d6:	2501      	movs	r5, #1
 80143d8:	e7f3      	b.n	80143c2 <rcl_subscription_init+0x19a>
 80143da:	2567      	movs	r5, #103	@ 0x67
 80143dc:	e7a3      	b.n	8014326 <rcl_subscription_init+0xfe>
 80143de:	2567      	movs	r5, #103	@ 0x67
 80143e0:	e7ef      	b.n	80143c2 <rcl_subscription_init+0x19a>
 80143e2:	250a      	movs	r5, #10
 80143e4:	e7ed      	b.n	80143c2 <rcl_subscription_init+0x19a>
 80143e6:	6823      	ldr	r3, [r4, #0]
 80143e8:	2b00      	cmp	r3, #0
 80143ea:	d0f4      	beq.n	80143d6 <rcl_subscription_init+0x1ae>
 80143ec:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 80143f0:	b13b      	cbz	r3, 8014402 <rcl_subscription_init+0x1da>
 80143f2:	4640      	mov	r0, r8
 80143f4:	f7ff fd8a 	bl	8013f0c <rcl_node_get_rmw_handle>
 80143f8:	6823      	ldr	r3, [r4, #0]
 80143fa:	f8d3 10c0 	ldr.w	r1, [r3, #192]	@ 0xc0
 80143fe:	f002 fd17 	bl	8016e30 <rmw_destroy_subscription>
 8014402:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8014404:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 8014406:	6820      	ldr	r0, [r4, #0]
 8014408:	4798      	blx	r3
 801440a:	2300      	movs	r3, #0
 801440c:	6023      	str	r3, [r4, #0]
 801440e:	2501      	movs	r5, #1
 8014410:	e7d7      	b.n	80143c2 <rcl_subscription_init+0x19a>
 8014412:	bf00      	nop

08014414 <rcl_subscription_get_default_options>:
 8014414:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014418:	4f12      	ldr	r7, [pc, #72]	@ (8014464 <rcl_subscription_get_default_options+0x50>)
 801441a:	4913      	ldr	r1, [pc, #76]	@ (8014468 <rcl_subscription_get_default_options+0x54>)
 801441c:	b088      	sub	sp, #32
 801441e:	4606      	mov	r6, r0
 8014420:	2250      	movs	r2, #80	@ 0x50
 8014422:	4638      	mov	r0, r7
 8014424:	f005 fd0d 	bl	8019e42 <memcpy>
 8014428:	ac02      	add	r4, sp, #8
 801442a:	a802      	add	r0, sp, #8
 801442c:	f7f9 fdf6 	bl	800e01c <rcutils_get_default_allocator>
 8014430:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8014432:	f107 0550 	add.w	r5, r7, #80	@ 0x50
 8014436:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8014438:	46e8      	mov	r8, sp
 801443a:	6823      	ldr	r3, [r4, #0]
 801443c:	602b      	str	r3, [r5, #0]
 801443e:	4640      	mov	r0, r8
 8014440:	f001 fda8 	bl	8015f94 <rmw_get_default_subscription_options>
 8014444:	e898 0003 	ldmia.w	r8, {r0, r1}
 8014448:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 801444c:	e883 0003 	stmia.w	r3, {r0, r1}
 8014450:	2270      	movs	r2, #112	@ 0x70
 8014452:	4639      	mov	r1, r7
 8014454:	4630      	mov	r0, r6
 8014456:	f005 fcf4 	bl	8019e42 <memcpy>
 801445a:	4630      	mov	r0, r6
 801445c:	b008      	add	sp, #32
 801445e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014462:	bf00      	nop
 8014464:	20007578 	.word	0x20007578
 8014468:	0801b0c0 	.word	0x0801b0c0

0801446c <rcl_take>:
 801446c:	2800      	cmp	r0, #0
 801446e:	d03f      	beq.n	80144f0 <rcl_take+0x84>
 8014470:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8014474:	4617      	mov	r7, r2
 8014476:	6802      	ldr	r2, [r0, #0]
 8014478:	b09d      	sub	sp, #116	@ 0x74
 801447a:	4606      	mov	r6, r0
 801447c:	b382      	cbz	r2, 80144e0 <rcl_take+0x74>
 801447e:	4699      	mov	r9, r3
 8014480:	f8d2 30c0 	ldr.w	r3, [r2, #192]	@ 0xc0
 8014484:	b363      	cbz	r3, 80144e0 <rcl_take+0x74>
 8014486:	4688      	mov	r8, r1
 8014488:	b381      	cbz	r1, 80144ec <rcl_take+0x80>
 801448a:	2f00      	cmp	r7, #0
 801448c:	d034      	beq.n	80144f8 <rcl_take+0x8c>
 801448e:	a802      	add	r0, sp, #8
 8014490:	ac02      	add	r4, sp, #8
 8014492:	f001 fd83 	bl	8015f9c <rmw_get_zero_initialized_message_info>
 8014496:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8014498:	463d      	mov	r5, r7
 801449a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 801449c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801449e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80144a0:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80144a4:	6834      	ldr	r4, [r6, #0]
 80144a6:	f8d4 60c0 	ldr.w	r6, [r4, #192]	@ 0xc0
 80144aa:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 80144ae:	2400      	movs	r4, #0
 80144b0:	463b      	mov	r3, r7
 80144b2:	4630      	mov	r0, r6
 80144b4:	f8cd 9000 	str.w	r9, [sp]
 80144b8:	4641      	mov	r1, r8
 80144ba:	f10d 023f 	add.w	r2, sp, #63	@ 0x3f
 80144be:	f88d 403f 	strb.w	r4, [sp, #63]	@ 0x3f
 80144c2:	f002 fd13 	bl	8016eec <rmw_take_with_info>
 80144c6:	4603      	mov	r3, r0
 80144c8:	b9c0      	cbnz	r0, 80144fc <rcl_take+0x90>
 80144ca:	f89d 103f 	ldrb.w	r1, [sp, #63]	@ 0x3f
 80144ce:	f240 1291 	movw	r2, #401	@ 0x191
 80144d2:	2900      	cmp	r1, #0
 80144d4:	bf08      	it	eq
 80144d6:	4613      	moveq	r3, r2
 80144d8:	4618      	mov	r0, r3
 80144da:	b01d      	add	sp, #116	@ 0x74
 80144dc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80144e0:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 80144e4:	4618      	mov	r0, r3
 80144e6:	b01d      	add	sp, #116	@ 0x74
 80144e8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80144ec:	230b      	movs	r3, #11
 80144ee:	e7f3      	b.n	80144d8 <rcl_take+0x6c>
 80144f0:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 80144f4:	4618      	mov	r0, r3
 80144f6:	4770      	bx	lr
 80144f8:	af10      	add	r7, sp, #64	@ 0x40
 80144fa:	e7c8      	b.n	801448e <rcl_take+0x22>
 80144fc:	f7fe ff2c 	bl	8013358 <rcl_convert_rmw_ret_to_rcl_ret>
 8014500:	4603      	mov	r3, r0
 8014502:	e7e9      	b.n	80144d8 <rcl_take+0x6c>

08014504 <rcl_subscription_get_rmw_handle>:
 8014504:	b118      	cbz	r0, 801450e <rcl_subscription_get_rmw_handle+0xa>
 8014506:	6800      	ldr	r0, [r0, #0]
 8014508:	b108      	cbz	r0, 801450e <rcl_subscription_get_rmw_handle+0xa>
 801450a:	f8d0 00c0 	ldr.w	r0, [r0, #192]	@ 0xc0
 801450e:	4770      	bx	lr

08014510 <rcl_get_system_time>:
 8014510:	4608      	mov	r0, r1
 8014512:	f7f9 befd 	b.w	800e310 <rcutils_system_time_now>
 8014516:	bf00      	nop

08014518 <rcl_get_steady_time>:
 8014518:	4608      	mov	r0, r1
 801451a:	f7f9 bf21 	b.w	800e360 <rcutils_steady_time_now>
 801451e:	bf00      	nop

08014520 <rcl_get_ros_time>:
 8014520:	7a03      	ldrb	r3, [r0, #8]
 8014522:	b510      	push	{r4, lr}
 8014524:	460c      	mov	r4, r1
 8014526:	b133      	cbz	r3, 8014536 <rcl_get_ros_time+0x16>
 8014528:	2105      	movs	r1, #5
 801452a:	f001 fafd 	bl	8015b28 <__atomic_load_8>
 801452e:	e9c4 0100 	strd	r0, r1, [r4]
 8014532:	2000      	movs	r0, #0
 8014534:	bd10      	pop	{r4, pc}
 8014536:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801453a:	4608      	mov	r0, r1
 801453c:	f7f9 bee8 	b.w	800e310 <rcutils_system_time_now>

08014540 <rcl_clock_init>:
 8014540:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8014544:	4606      	mov	r6, r0
 8014546:	4610      	mov	r0, r2
 8014548:	4614      	mov	r4, r2
 801454a:	460d      	mov	r5, r1
 801454c:	f7f9 fd74 	bl	800e038 <rcutils_allocator_is_valid>
 8014550:	b128      	cbz	r0, 801455e <rcl_clock_init+0x1e>
 8014552:	2e03      	cmp	r6, #3
 8014554:	d803      	bhi.n	801455e <rcl_clock_init+0x1e>
 8014556:	e8df f006 	tbb	[pc, r6]
 801455a:	2c1b      	.short	0x2c1b
 801455c:	0554      	.short	0x0554
 801455e:	200b      	movs	r0, #11
 8014560:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8014564:	2d00      	cmp	r5, #0
 8014566:	d0fa      	beq.n	801455e <rcl_clock_init+0x1e>
 8014568:	2c00      	cmp	r4, #0
 801456a:	d0f8      	beq.n	801455e <rcl_clock_init+0x1e>
 801456c:	2600      	movs	r6, #0
 801456e:	702e      	strb	r6, [r5, #0]
 8014570:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8014572:	f105 0714 	add.w	r7, r5, #20
 8014576:	e9c5 6601 	strd	r6, r6, [r5, #4]
 801457a:	612e      	str	r6, [r5, #16]
 801457c:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 801457e:	6823      	ldr	r3, [r4, #0]
 8014580:	603b      	str	r3, [r7, #0]
 8014582:	2303      	movs	r3, #3
 8014584:	4a2b      	ldr	r2, [pc, #172]	@ (8014634 <rcl_clock_init+0xf4>)
 8014586:	702b      	strb	r3, [r5, #0]
 8014588:	4630      	mov	r0, r6
 801458a:	60ea      	str	r2, [r5, #12]
 801458c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8014590:	2d00      	cmp	r5, #0
 8014592:	d0e4      	beq.n	801455e <rcl_clock_init+0x1e>
 8014594:	2600      	movs	r6, #0
 8014596:	702e      	strb	r6, [r5, #0]
 8014598:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801459a:	f105 0714 	add.w	r7, r5, #20
 801459e:	e9c5 6601 	strd	r6, r6, [r5, #4]
 80145a2:	e9c5 6603 	strd	r6, r6, [r5, #12]
 80145a6:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 80145a8:	6823      	ldr	r3, [r4, #0]
 80145aa:	603b      	str	r3, [r7, #0]
 80145ac:	4630      	mov	r0, r6
 80145ae:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80145b2:	2d00      	cmp	r5, #0
 80145b4:	d0d3      	beq.n	801455e <rcl_clock_init+0x1e>
 80145b6:	2c00      	cmp	r4, #0
 80145b8:	d0d1      	beq.n	801455e <rcl_clock_init+0x1e>
 80145ba:	2600      	movs	r6, #0
 80145bc:	702e      	strb	r6, [r5, #0]
 80145be:	46a4      	mov	ip, r4
 80145c0:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80145c4:	f105 0714 	add.w	r7, r5, #20
 80145c8:	e9c5 6601 	strd	r6, r6, [r5, #4]
 80145cc:	e9c5 6603 	strd	r6, r6, [r5, #12]
 80145d0:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 80145d2:	f8dc 3000 	ldr.w	r3, [ip]
 80145d6:	603b      	str	r3, [r7, #0]
 80145d8:	6921      	ldr	r1, [r4, #16]
 80145da:	6823      	ldr	r3, [r4, #0]
 80145dc:	2010      	movs	r0, #16
 80145de:	4798      	blx	r3
 80145e0:	4603      	mov	r3, r0
 80145e2:	6128      	str	r0, [r5, #16]
 80145e4:	b318      	cbz	r0, 801462e <rcl_clock_init+0xee>
 80145e6:	f04f 0800 	mov.w	r8, #0
 80145ea:	f04f 0900 	mov.w	r9, #0
 80145ee:	7206      	strb	r6, [r0, #8]
 80145f0:	e9c3 8900 	strd	r8, r9, [r3]
 80145f4:	2301      	movs	r3, #1
 80145f6:	4a10      	ldr	r2, [pc, #64]	@ (8014638 <rcl_clock_init+0xf8>)
 80145f8:	702b      	strb	r3, [r5, #0]
 80145fa:	4630      	mov	r0, r6
 80145fc:	60ea      	str	r2, [r5, #12]
 80145fe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8014602:	2d00      	cmp	r5, #0
 8014604:	d0ab      	beq.n	801455e <rcl_clock_init+0x1e>
 8014606:	2c00      	cmp	r4, #0
 8014608:	d0a9      	beq.n	801455e <rcl_clock_init+0x1e>
 801460a:	2600      	movs	r6, #0
 801460c:	702e      	strb	r6, [r5, #0]
 801460e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8014610:	f105 0714 	add.w	r7, r5, #20
 8014614:	e9c5 6601 	strd	r6, r6, [r5, #4]
 8014618:	612e      	str	r6, [r5, #16]
 801461a:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 801461c:	6823      	ldr	r3, [r4, #0]
 801461e:	603b      	str	r3, [r7, #0]
 8014620:	2302      	movs	r3, #2
 8014622:	4a06      	ldr	r2, [pc, #24]	@ (801463c <rcl_clock_init+0xfc>)
 8014624:	702b      	strb	r3, [r5, #0]
 8014626:	4630      	mov	r0, r6
 8014628:	60ea      	str	r2, [r5, #12]
 801462a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801462e:	200a      	movs	r0, #10
 8014630:	e796      	b.n	8014560 <rcl_clock_init+0x20>
 8014632:	bf00      	nop
 8014634:	08014519 	.word	0x08014519
 8014638:	08014521 	.word	0x08014521
 801463c:	08014511 	.word	0x08014511

08014640 <rcl_clock_get_now>:
 8014640:	b140      	cbz	r0, 8014654 <rcl_clock_get_now+0x14>
 8014642:	b139      	cbz	r1, 8014654 <rcl_clock_get_now+0x14>
 8014644:	7803      	ldrb	r3, [r0, #0]
 8014646:	b11b      	cbz	r3, 8014650 <rcl_clock_get_now+0x10>
 8014648:	68c3      	ldr	r3, [r0, #12]
 801464a:	b10b      	cbz	r3, 8014650 <rcl_clock_get_now+0x10>
 801464c:	6900      	ldr	r0, [r0, #16]
 801464e:	4718      	bx	r3
 8014650:	2001      	movs	r0, #1
 8014652:	4770      	bx	lr
 8014654:	200b      	movs	r0, #11
 8014656:	4770      	bx	lr

08014658 <rcl_clock_add_jump_callback>:
 8014658:	b082      	sub	sp, #8
 801465a:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801465e:	a908      	add	r1, sp, #32
 8014660:	e881 000c 	stmia.w	r1, {r2, r3}
 8014664:	e9dd 560e 	ldrd	r5, r6, [sp, #56]	@ 0x38
 8014668:	b340      	cbz	r0, 80146bc <rcl_clock_add_jump_callback+0x64>
 801466a:	4604      	mov	r4, r0
 801466c:	3014      	adds	r0, #20
 801466e:	f7f9 fce3 	bl	800e038 <rcutils_allocator_is_valid>
 8014672:	b318      	cbz	r0, 80146bc <rcl_clock_add_jump_callback+0x64>
 8014674:	b315      	cbz	r5, 80146bc <rcl_clock_add_jump_callback+0x64>
 8014676:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	@ 0x28
 801467a:	2a00      	cmp	r2, #0
 801467c:	f173 0300 	sbcs.w	r3, r3, #0
 8014680:	db1c      	blt.n	80146bc <rcl_clock_add_jump_callback+0x64>
 8014682:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 8014686:	2a01      	cmp	r2, #1
 8014688:	f173 0300 	sbcs.w	r3, r3, #0
 801468c:	da16      	bge.n	80146bc <rcl_clock_add_jump_callback+0x64>
 801468e:	e9d4 0701 	ldrd	r0, r7, [r4, #4]
 8014692:	2f00      	cmp	r7, #0
 8014694:	d03e      	beq.n	8014714 <rcl_clock_add_jump_callback+0xbc>
 8014696:	2300      	movs	r3, #0
 8014698:	f100 0220 	add.w	r2, r0, #32
 801469c:	e003      	b.n	80146a6 <rcl_clock_add_jump_callback+0x4e>
 801469e:	42bb      	cmp	r3, r7
 80146a0:	f102 0228 	add.w	r2, r2, #40	@ 0x28
 80146a4:	d00f      	beq.n	80146c6 <rcl_clock_add_jump_callback+0x6e>
 80146a6:	f852 1c20 	ldr.w	r1, [r2, #-32]
 80146aa:	42a9      	cmp	r1, r5
 80146ac:	f103 0301 	add.w	r3, r3, #1
 80146b0:	d1f5      	bne.n	801469e <rcl_clock_add_jump_callback+0x46>
 80146b2:	6811      	ldr	r1, [r2, #0]
 80146b4:	42b1      	cmp	r1, r6
 80146b6:	d1f2      	bne.n	801469e <rcl_clock_add_jump_callback+0x46>
 80146b8:	2001      	movs	r0, #1
 80146ba:	e000      	b.n	80146be <rcl_clock_add_jump_callback+0x66>
 80146bc:	200b      	movs	r0, #11
 80146be:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80146c2:	b002      	add	sp, #8
 80146c4:	4770      	bx	lr
 80146c6:	3301      	adds	r3, #1
 80146c8:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80146cc:	00d9      	lsls	r1, r3, #3
 80146ce:	69e3      	ldr	r3, [r4, #28]
 80146d0:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 80146d2:	4798      	blx	r3
 80146d4:	4684      	mov	ip, r0
 80146d6:	b1d8      	cbz	r0, 8014710 <rcl_clock_add_jump_callback+0xb8>
 80146d8:	af08      	add	r7, sp, #32
 80146da:	f8d4 e008 	ldr.w	lr, [r4, #8]
 80146de:	6060      	str	r0, [r4, #4]
 80146e0:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 80146e2:	eb0e 098e 	add.w	r9, lr, lr, lsl #2
 80146e6:	eb0c 08c9 	add.w	r8, ip, r9, lsl #3
 80146ea:	f84c 5039 	str.w	r5, [ip, r9, lsl #3]
 80146ee:	f108 0508 	add.w	r5, r8, #8
 80146f2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80146f4:	e897 0003 	ldmia.w	r7, {r0, r1}
 80146f8:	f10e 0301 	add.w	r3, lr, #1
 80146fc:	e885 0003 	stmia.w	r5, {r0, r1}
 8014700:	f8c8 6020 	str.w	r6, [r8, #32]
 8014704:	60a3      	str	r3, [r4, #8]
 8014706:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801470a:	2000      	movs	r0, #0
 801470c:	b002      	add	sp, #8
 801470e:	4770      	bx	lr
 8014710:	200a      	movs	r0, #10
 8014712:	e7d4      	b.n	80146be <rcl_clock_add_jump_callback+0x66>
 8014714:	2128      	movs	r1, #40	@ 0x28
 8014716:	e7da      	b.n	80146ce <rcl_clock_add_jump_callback+0x76>

08014718 <rcl_clock_remove_jump_callback>:
 8014718:	2800      	cmp	r0, #0
 801471a:	d057      	beq.n	80147cc <rcl_clock_remove_jump_callback+0xb4>
 801471c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014720:	4607      	mov	r7, r0
 8014722:	3014      	adds	r0, #20
 8014724:	460c      	mov	r4, r1
 8014726:	4615      	mov	r5, r2
 8014728:	f7f9 fc86 	bl	800e038 <rcutils_allocator_is_valid>
 801472c:	2800      	cmp	r0, #0
 801472e:	d03a      	beq.n	80147a6 <rcl_clock_remove_jump_callback+0x8e>
 8014730:	2c00      	cmp	r4, #0
 8014732:	d038      	beq.n	80147a6 <rcl_clock_remove_jump_callback+0x8e>
 8014734:	f8d7 8008 	ldr.w	r8, [r7, #8]
 8014738:	f1b8 0f00 	cmp.w	r8, #0
 801473c:	d00c      	beq.n	8014758 <rcl_clock_remove_jump_callback+0x40>
 801473e:	f8d7 e004 	ldr.w	lr, [r7, #4]
 8014742:	eb08 0c88 	add.w	ip, r8, r8, lsl #2
 8014746:	4676      	mov	r6, lr
 8014748:	eb0e 0ccc 	add.w	ip, lr, ip, lsl #3
 801474c:	6833      	ldr	r3, [r6, #0]
 801474e:	42a3      	cmp	r3, r4
 8014750:	d005      	beq.n	801475e <rcl_clock_remove_jump_callback+0x46>
 8014752:	3628      	adds	r6, #40	@ 0x28
 8014754:	45b4      	cmp	ip, r6
 8014756:	d1f9      	bne.n	801474c <rcl_clock_remove_jump_callback+0x34>
 8014758:	2001      	movs	r0, #1
 801475a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801475e:	6a33      	ldr	r3, [r6, #32]
 8014760:	3628      	adds	r6, #40	@ 0x28
 8014762:	4566      	cmp	r6, ip
 8014764:	d02a      	beq.n	80147bc <rcl_clock_remove_jump_callback+0xa4>
 8014766:	42ab      	cmp	r3, r5
 8014768:	d1f0      	bne.n	801474c <rcl_clock_remove_jump_callback+0x34>
 801476a:	4635      	mov	r5, r6
 801476c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801476e:	f1a6 0428 	sub.w	r4, r6, #40	@ 0x28
 8014772:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8014774:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8014776:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8014778:	e895 0003 	ldmia.w	r5, {r0, r1}
 801477c:	3628      	adds	r6, #40	@ 0x28
 801477e:	4566      	cmp	r6, ip
 8014780:	e884 0003 	stmia.w	r4, {r0, r1}
 8014784:	d1f1      	bne.n	801476a <rcl_clock_remove_jump_callback+0x52>
 8014786:	f108 34ff 	add.w	r4, r8, #4294967295	@ 0xffffffff
 801478a:	60bc      	str	r4, [r7, #8]
 801478c:	b174      	cbz	r4, 80147ac <rcl_clock_remove_jump_callback+0x94>
 801478e:	eb04 0484 	add.w	r4, r4, r4, lsl #2
 8014792:	69fb      	ldr	r3, [r7, #28]
 8014794:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8014796:	00e1      	lsls	r1, r4, #3
 8014798:	4670      	mov	r0, lr
 801479a:	4798      	blx	r3
 801479c:	b1c0      	cbz	r0, 80147d0 <rcl_clock_remove_jump_callback+0xb8>
 801479e:	6078      	str	r0, [r7, #4]
 80147a0:	2000      	movs	r0, #0
 80147a2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80147a6:	200b      	movs	r0, #11
 80147a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80147ac:	4670      	mov	r0, lr
 80147ae:	69bb      	ldr	r3, [r7, #24]
 80147b0:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80147b2:	4798      	blx	r3
 80147b4:	607c      	str	r4, [r7, #4]
 80147b6:	4620      	mov	r0, r4
 80147b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80147bc:	42ab      	cmp	r3, r5
 80147be:	d1cb      	bne.n	8014758 <rcl_clock_remove_jump_callback+0x40>
 80147c0:	f108 34ff 	add.w	r4, r8, #4294967295	@ 0xffffffff
 80147c4:	60bc      	str	r4, [r7, #8]
 80147c6:	2c00      	cmp	r4, #0
 80147c8:	d1e1      	bne.n	801478e <rcl_clock_remove_jump_callback+0x76>
 80147ca:	e7ef      	b.n	80147ac <rcl_clock_remove_jump_callback+0x94>
 80147cc:	200b      	movs	r0, #11
 80147ce:	4770      	bx	lr
 80147d0:	200a      	movs	r0, #10
 80147d2:	e7e9      	b.n	80147a8 <rcl_clock_remove_jump_callback+0x90>

080147d4 <_rcl_timer_time_jump>:
 80147d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80147d8:	4682      	mov	sl, r0
 80147da:	b087      	sub	sp, #28
 80147dc:	4614      	mov	r4, r2
 80147de:	b131      	cbz	r1, 80147ee <_rcl_timer_time_jump+0x1a>
 80147e0:	7803      	ldrb	r3, [r0, #0]
 80147e2:	3b02      	subs	r3, #2
 80147e4:	2b01      	cmp	r3, #1
 80147e6:	d944      	bls.n	8014872 <_rcl_timer_time_jump+0x9e>
 80147e8:	b007      	add	sp, #28
 80147ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80147ee:	6813      	ldr	r3, [r2, #0]
 80147f0:	a904      	add	r1, sp, #16
 80147f2:	6818      	ldr	r0, [r3, #0]
 80147f4:	f7ff ff24 	bl	8014640 <rcl_clock_get_now>
 80147f8:	2800      	cmp	r0, #0
 80147fa:	d1f5      	bne.n	80147e8 <_rcl_timer_time_jump+0x14>
 80147fc:	6820      	ldr	r0, [r4, #0]
 80147fe:	2105      	movs	r1, #5
 8014800:	3020      	adds	r0, #32
 8014802:	f001 f991 	bl	8015b28 <__atomic_load_8>
 8014806:	4602      	mov	r2, r0
 8014808:	6820      	ldr	r0, [r4, #0]
 801480a:	460b      	mov	r3, r1
 801480c:	3028      	adds	r0, #40	@ 0x28
 801480e:	2105      	movs	r1, #5
 8014810:	4690      	mov	r8, r2
 8014812:	4699      	mov	r9, r3
 8014814:	f001 f988 	bl	8015b28 <__atomic_load_8>
 8014818:	4602      	mov	r2, r0
 801481a:	6820      	ldr	r0, [r4, #0]
 801481c:	460b      	mov	r3, r1
 801481e:	3018      	adds	r0, #24
 8014820:	2105      	movs	r1, #5
 8014822:	461f      	mov	r7, r3
 8014824:	4616      	mov	r6, r2
 8014826:	f001 f97f 	bl	8015b28 <__atomic_load_8>
 801482a:	f89a 3000 	ldrb.w	r3, [sl]
 801482e:	9103      	str	r1, [sp, #12]
 8014830:	3b02      	subs	r3, #2
 8014832:	2b01      	cmp	r3, #1
 8014834:	4605      	mov	r5, r0
 8014836:	d93a      	bls.n	80148ae <_rcl_timer_time_jump+0xda>
 8014838:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 801483c:	45b2      	cmp	sl, r6
 801483e:	eb7b 0307 	sbcs.w	r3, fp, r7
 8014842:	da64      	bge.n	801490e <_rcl_timer_time_jump+0x13a>
 8014844:	45c2      	cmp	sl, r8
 8014846:	eb7b 0309 	sbcs.w	r3, fp, r9
 801484a:	dacd      	bge.n	80147e8 <_rcl_timer_time_jump+0x14>
 801484c:	6820      	ldr	r0, [r4, #0]
 801484e:	eb15 020a 	adds.w	r2, r5, sl
 8014852:	f04f 0505 	mov.w	r5, #5
 8014856:	eb41 030b 	adc.w	r3, r1, fp
 801485a:	3028      	adds	r0, #40	@ 0x28
 801485c:	9500      	str	r5, [sp, #0]
 801485e:	f001 f997 	bl	8015b90 <__atomic_store_8>
 8014862:	6820      	ldr	r0, [r4, #0]
 8014864:	9500      	str	r5, [sp, #0]
 8014866:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801486a:	3020      	adds	r0, #32
 801486c:	f001 f990 	bl	8015b90 <__atomic_store_8>
 8014870:	e7ba      	b.n	80147e8 <_rcl_timer_time_jump+0x14>
 8014872:	6813      	ldr	r3, [r2, #0]
 8014874:	a904      	add	r1, sp, #16
 8014876:	6818      	ldr	r0, [r3, #0]
 8014878:	f7ff fee2 	bl	8014640 <rcl_clock_get_now>
 801487c:	2800      	cmp	r0, #0
 801487e:	d1b3      	bne.n	80147e8 <_rcl_timer_time_jump+0x14>
 8014880:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8014884:	4313      	orrs	r3, r2
 8014886:	d0af      	beq.n	80147e8 <_rcl_timer_time_jump+0x14>
 8014888:	6820      	ldr	r0, [r4, #0]
 801488a:	2105      	movs	r1, #5
 801488c:	3028      	adds	r0, #40	@ 0x28
 801488e:	f001 f94b 	bl	8015b28 <__atomic_load_8>
 8014892:	9a04      	ldr	r2, [sp, #16]
 8014894:	6823      	ldr	r3, [r4, #0]
 8014896:	9e05      	ldr	r6, [sp, #20]
 8014898:	1a82      	subs	r2, r0, r2
 801489a:	f04f 0405 	mov.w	r4, #5
 801489e:	f103 0030 	add.w	r0, r3, #48	@ 0x30
 80148a2:	9400      	str	r4, [sp, #0]
 80148a4:	eb61 0306 	sbc.w	r3, r1, r6
 80148a8:	f001 f972 	bl	8015b90 <__atomic_store_8>
 80148ac:	e79c      	b.n	80147e8 <_rcl_timer_time_jump+0x14>
 80148ae:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80148b2:	4313      	orrs	r3, r2
 80148b4:	d098      	beq.n	80147e8 <_rcl_timer_time_jump+0x14>
 80148b6:	6820      	ldr	r0, [r4, #0]
 80148b8:	f04f 0805 	mov.w	r8, #5
 80148bc:	2300      	movs	r3, #0
 80148be:	3030      	adds	r0, #48	@ 0x30
 80148c0:	f8cd 8000 	str.w	r8, [sp]
 80148c4:	2200      	movs	r2, #0
 80148c6:	f001 f997 	bl	8015bf8 <__atomic_exchange_8>
 80148ca:	4606      	mov	r6, r0
 80148cc:	460f      	mov	r7, r1
 80148ce:	ea56 0307 	orrs.w	r3, r6, r7
 80148d2:	d089      	beq.n	80147e8 <_rcl_timer_time_jump+0x14>
 80148d4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80148d8:	1b92      	subs	r2, r2, r6
 80148da:	eb63 0301 	sbc.w	r3, r3, r1
 80148de:	9903      	ldr	r1, [sp, #12]
 80148e0:	6820      	ldr	r0, [r4, #0]
 80148e2:	f8cd 8000 	str.w	r8, [sp]
 80148e6:	1952      	adds	r2, r2, r5
 80148e8:	eb43 0101 	adc.w	r1, r3, r1
 80148ec:	460b      	mov	r3, r1
 80148ee:	3028      	adds	r0, #40	@ 0x28
 80148f0:	f001 f94e 	bl	8015b90 <__atomic_store_8>
 80148f4:	9a04      	ldr	r2, [sp, #16]
 80148f6:	6820      	ldr	r0, [r4, #0]
 80148f8:	9b05      	ldr	r3, [sp, #20]
 80148fa:	f8cd 8000 	str.w	r8, [sp]
 80148fe:	1b92      	subs	r2, r2, r6
 8014900:	f100 0020 	add.w	r0, r0, #32
 8014904:	eb63 0307 	sbc.w	r3, r3, r7
 8014908:	f001 f942 	bl	8015b90 <__atomic_store_8>
 801490c:	e76c      	b.n	80147e8 <_rcl_timer_time_jump+0x14>
 801490e:	6820      	ldr	r0, [r4, #0]
 8014910:	3008      	adds	r0, #8
 8014912:	f004 fc6b 	bl	80191ec <rcl_trigger_guard_condition>
 8014916:	e767      	b.n	80147e8 <_rcl_timer_time_jump+0x14>

08014918 <rcl_get_zero_initialized_timer>:
 8014918:	4b01      	ldr	r3, [pc, #4]	@ (8014920 <rcl_get_zero_initialized_timer+0x8>)
 801491a:	6818      	ldr	r0, [r3, #0]
 801491c:	4770      	bx	lr
 801491e:	bf00      	nop
 8014920:	0801b110 	.word	0x0801b110

08014924 <rcl_timer_init>:
 8014924:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014928:	b0ad      	sub	sp, #180	@ 0xb4
 801492a:	4604      	mov	r4, r0
 801492c:	a839      	add	r0, sp, #228	@ 0xe4
 801492e:	460d      	mov	r5, r1
 8014930:	4690      	mov	r8, r2
 8014932:	f7f9 fb81 	bl	800e038 <rcutils_allocator_is_valid>
 8014936:	2800      	cmp	r0, #0
 8014938:	d072      	beq.n	8014a20 <rcl_timer_init+0xfc>
 801493a:	2c00      	cmp	r4, #0
 801493c:	d070      	beq.n	8014a20 <rcl_timer_init+0xfc>
 801493e:	2d00      	cmp	r5, #0
 8014940:	d06e      	beq.n	8014a20 <rcl_timer_init+0xfc>
 8014942:	e9dd 2336 	ldrd	r2, r3, [sp, #216]	@ 0xd8
 8014946:	2a00      	cmp	r2, #0
 8014948:	f173 0300 	sbcs.w	r3, r3, #0
 801494c:	db68      	blt.n	8014a20 <rcl_timer_init+0xfc>
 801494e:	6823      	ldr	r3, [r4, #0]
 8014950:	b12b      	cbz	r3, 801495e <rcl_timer_init+0x3a>
 8014952:	f04f 0a64 	mov.w	sl, #100	@ 0x64
 8014956:	4650      	mov	r0, sl
 8014958:	b02d      	add	sp, #180	@ 0xb4
 801495a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801495e:	a90a      	add	r1, sp, #40	@ 0x28
 8014960:	4628      	mov	r0, r5
 8014962:	f7ff fe6d 	bl	8014640 <rcl_clock_get_now>
 8014966:	4682      	mov	sl, r0
 8014968:	2800      	cmp	r0, #0
 801496a:	d1f4      	bne.n	8014956 <rcl_timer_init+0x32>
 801496c:	f10d 0920 	add.w	r9, sp, #32
 8014970:	4648      	mov	r0, r9
 8014972:	e9cd 5818 	strd	r5, r8, [sp, #96]	@ 0x60
 8014976:	f004 fb3d 	bl	8018ff4 <rcl_get_zero_initialized_guard_condition>
 801497a:	e899 0003 	ldmia.w	r9, {r0, r1}
 801497e:	f10d 0b68 	add.w	fp, sp, #104	@ 0x68
 8014982:	f10d 0934 	add.w	r9, sp, #52	@ 0x34
 8014986:	e88b 0003 	stmia.w	fp, {r0, r1}
 801498a:	4648      	mov	r0, r9
 801498c:	f004 fc14 	bl	80191b8 <rcl_guard_condition_get_default_options>
 8014990:	ab0f      	add	r3, sp, #60	@ 0x3c
 8014992:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8014996:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 801499a:	4641      	mov	r1, r8
 801499c:	e899 000c 	ldmia.w	r9, {r2, r3}
 80149a0:	4658      	mov	r0, fp
 80149a2:	f004 fb31 	bl	8019008 <rcl_guard_condition_init>
 80149a6:	4682      	mov	sl, r0
 80149a8:	2800      	cmp	r0, #0
 80149aa:	d1d4      	bne.n	8014956 <rcl_timer_init+0x32>
 80149ac:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 80149ae:	f893 c000 	ldrb.w	ip, [r3]
 80149b2:	f1bc 0f01 	cmp.w	ip, #1
 80149b6:	d039      	beq.n	8014a2c <rcl_timer_init+0x108>
 80149b8:	f10d 0ce4 	add.w	ip, sp, #228	@ 0xe4
 80149bc:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80149c0:	e9dd 890a 	ldrd	r8, r9, [sp, #40]	@ 0x28
 80149c4:	9e36      	ldr	r6, [sp, #216]	@ 0xd8
 80149c6:	f10d 0e9c 	add.w	lr, sp, #156	@ 0x9c
 80149ca:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 80149ce:	eb18 0606 	adds.w	r6, r8, r6
 80149d2:	9b37      	ldr	r3, [sp, #220]	@ 0xdc
 80149d4:	9606      	str	r6, [sp, #24]
 80149d6:	e9dd 6736 	ldrd	r6, r7, [sp, #216]	@ 0xd8
 80149da:	eb49 0303 	adc.w	r3, r9, r3
 80149de:	9a38      	ldr	r2, [sp, #224]	@ 0xe0
 80149e0:	9307      	str	r3, [sp, #28]
 80149e2:	921c      	str	r2, [sp, #112]	@ 0x70
 80149e4:	e9cd 671e 	strd	r6, r7, [sp, #120]	@ 0x78
 80149e8:	e9dd 6706 	ldrd	r6, r7, [sp, #24]
 80149ec:	f8dc 3000 	ldr.w	r3, [ip]
 80149f0:	f8ce 3000 	str.w	r3, [lr]
 80149f4:	2000      	movs	r0, #0
 80149f6:	2100      	movs	r1, #0
 80149f8:	2200      	movs	r2, #0
 80149fa:	e9cd 0124 	strd	r0, r1, [sp, #144]	@ 0x90
 80149fe:	9b39      	ldr	r3, [sp, #228]	@ 0xe4
 8014a00:	993d      	ldr	r1, [sp, #244]	@ 0xf4
 8014a02:	e9cd 8920 	strd	r8, r9, [sp, #128]	@ 0x80
 8014a06:	2050      	movs	r0, #80	@ 0x50
 8014a08:	e9cd 6722 	strd	r6, r7, [sp, #136]	@ 0x88
 8014a0c:	f88d 2098 	strb.w	r2, [sp, #152]	@ 0x98
 8014a10:	4798      	blx	r3
 8014a12:	6020      	str	r0, [r4, #0]
 8014a14:	b360      	cbz	r0, 8014a70 <rcl_timer_init+0x14c>
 8014a16:	2250      	movs	r2, #80	@ 0x50
 8014a18:	a918      	add	r1, sp, #96	@ 0x60
 8014a1a:	f005 fa12 	bl	8019e42 <memcpy>
 8014a1e:	e79a      	b.n	8014956 <rcl_timer_init+0x32>
 8014a20:	f04f 0a0b 	mov.w	sl, #11
 8014a24:	4650      	mov	r0, sl
 8014a26:	b02d      	add	sp, #180	@ 0xb4
 8014a28:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014a2c:	2201      	movs	r2, #1
 8014a2e:	2300      	movs	r3, #0
 8014a30:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8014a34:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8014a38:	e9cd 2314 	strd	r2, r3, [sp, #80]	@ 0x50
 8014a3c:	e9cd 0116 	strd	r0, r1, [sp, #88]	@ 0x58
 8014a40:	ab14      	add	r3, sp, #80	@ 0x50
 8014a42:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8014a44:	f88d c048 	strb.w	ip, [sp, #72]	@ 0x48
 8014a48:	f8df c03c 	ldr.w	ip, [pc, #60]	@ 8014a88 <rcl_timer_init+0x164>
 8014a4c:	9405      	str	r4, [sp, #20]
 8014a4e:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 8014a52:	f8cd c010 	str.w	ip, [sp, #16]
 8014a56:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	@ 0x48
 8014a5a:	4628      	mov	r0, r5
 8014a5c:	f7ff fdfc 	bl	8014658 <rcl_clock_add_jump_callback>
 8014a60:	4680      	mov	r8, r0
 8014a62:	2800      	cmp	r0, #0
 8014a64:	d0a8      	beq.n	80149b8 <rcl_timer_init+0x94>
 8014a66:	4658      	mov	r0, fp
 8014a68:	f004 fb80 	bl	801916c <rcl_guard_condition_fini>
 8014a6c:	46c2      	mov	sl, r8
 8014a6e:	e772      	b.n	8014956 <rcl_timer_init+0x32>
 8014a70:	4658      	mov	r0, fp
 8014a72:	f004 fb7b 	bl	801916c <rcl_guard_condition_fini>
 8014a76:	4904      	ldr	r1, [pc, #16]	@ (8014a88 <rcl_timer_init+0x164>)
 8014a78:	4622      	mov	r2, r4
 8014a7a:	4628      	mov	r0, r5
 8014a7c:	f7ff fe4c 	bl	8014718 <rcl_clock_remove_jump_callback>
 8014a80:	f04f 0a0a 	mov.w	sl, #10
 8014a84:	e767      	b.n	8014956 <rcl_timer_init+0x32>
 8014a86:	bf00      	nop
 8014a88:	080147d5 	.word	0x080147d5

08014a8c <rcl_timer_call>:
 8014a8c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014a90:	b08b      	sub	sp, #44	@ 0x2c
 8014a92:	2800      	cmp	r0, #0
 8014a94:	d06e      	beq.n	8014b74 <rcl_timer_call+0xe8>
 8014a96:	6803      	ldr	r3, [r0, #0]
 8014a98:	f3bf 8f5b 	dmb	ish
 8014a9c:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8014aa0:	f3bf 8f5b 	dmb	ish
 8014aa4:	4604      	mov	r4, r0
 8014aa6:	2b00      	cmp	r3, #0
 8014aa8:	d159      	bne.n	8014b5e <rcl_timer_call+0xd2>
 8014aaa:	6803      	ldr	r3, [r0, #0]
 8014aac:	a908      	add	r1, sp, #32
 8014aae:	6818      	ldr	r0, [r3, #0]
 8014ab0:	f7ff fdc6 	bl	8014640 <rcl_clock_get_now>
 8014ab4:	4605      	mov	r5, r0
 8014ab6:	2800      	cmp	r0, #0
 8014ab8:	d14d      	bne.n	8014b56 <rcl_timer_call+0xca>
 8014aba:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8014abe:	2a00      	cmp	r2, #0
 8014ac0:	f173 0100 	sbcs.w	r1, r3, #0
 8014ac4:	db51      	blt.n	8014b6a <rcl_timer_call+0xde>
 8014ac6:	6820      	ldr	r0, [r4, #0]
 8014ac8:	2605      	movs	r6, #5
 8014aca:	9600      	str	r6, [sp, #0]
 8014acc:	3020      	adds	r0, #32
 8014ace:	f001 f893 	bl	8015bf8 <__atomic_exchange_8>
 8014ad2:	6822      	ldr	r2, [r4, #0]
 8014ad4:	f3bf 8f5b 	dmb	ish
 8014ad8:	4682      	mov	sl, r0
 8014ada:	f8d2 b010 	ldr.w	fp, [r2, #16]
 8014ade:	f3bf 8f5b 	dmb	ish
 8014ae2:	6820      	ldr	r0, [r4, #0]
 8014ae4:	460b      	mov	r3, r1
 8014ae6:	3028      	adds	r0, #40	@ 0x28
 8014ae8:	4631      	mov	r1, r6
 8014aea:	9305      	str	r3, [sp, #20]
 8014aec:	f001 f81c 	bl	8015b28 <__atomic_load_8>
 8014af0:	4603      	mov	r3, r0
 8014af2:	6820      	ldr	r0, [r4, #0]
 8014af4:	460a      	mov	r2, r1
 8014af6:	3018      	adds	r0, #24
 8014af8:	4631      	mov	r1, r6
 8014afa:	e9cd 2303 	strd	r2, r3, [sp, #12]
 8014afe:	f001 f813 	bl	8015b28 <__atomic_load_8>
 8014b02:	9b04      	ldr	r3, [sp, #16]
 8014b04:	9a03      	ldr	r2, [sp, #12]
 8014b06:	4606      	mov	r6, r0
 8014b08:	460f      	mov	r7, r1
 8014b0a:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8014b0e:	eb13 0806 	adds.w	r8, r3, r6
 8014b12:	eb42 0907 	adc.w	r9, r2, r7
 8014b16:	4580      	cmp	r8, r0
 8014b18:	eb79 0301 	sbcs.w	r3, r9, r1
 8014b1c:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8014b20:	460a      	mov	r2, r1
 8014b22:	da04      	bge.n	8014b2e <rcl_timer_call+0xa2>
 8014b24:	ea56 0307 	orrs.w	r3, r6, r7
 8014b28:	d129      	bne.n	8014b7e <rcl_timer_call+0xf2>
 8014b2a:	e9dd 8906 	ldrd	r8, r9, [sp, #24]
 8014b2e:	6820      	ldr	r0, [r4, #0]
 8014b30:	2105      	movs	r1, #5
 8014b32:	4642      	mov	r2, r8
 8014b34:	464b      	mov	r3, r9
 8014b36:	3028      	adds	r0, #40	@ 0x28
 8014b38:	9100      	str	r1, [sp, #0]
 8014b3a:	f001 f829 	bl	8015b90 <__atomic_store_8>
 8014b3e:	f1bb 0f00 	cmp.w	fp, #0
 8014b42:	d008      	beq.n	8014b56 <rcl_timer_call+0xca>
 8014b44:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8014b48:	9905      	ldr	r1, [sp, #20]
 8014b4a:	ebb2 020a 	subs.w	r2, r2, sl
 8014b4e:	4620      	mov	r0, r4
 8014b50:	eb63 0301 	sbc.w	r3, r3, r1
 8014b54:	47d8      	blx	fp
 8014b56:	4628      	mov	r0, r5
 8014b58:	b00b      	add	sp, #44	@ 0x2c
 8014b5a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014b5e:	f240 3521 	movw	r5, #801	@ 0x321
 8014b62:	4628      	mov	r0, r5
 8014b64:	b00b      	add	sp, #44	@ 0x2c
 8014b66:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014b6a:	2501      	movs	r5, #1
 8014b6c:	4628      	mov	r0, r5
 8014b6e:	b00b      	add	sp, #44	@ 0x2c
 8014b70:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014b74:	250b      	movs	r5, #11
 8014b76:	4628      	mov	r0, r5
 8014b78:	b00b      	add	sp, #44	@ 0x2c
 8014b7a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014b7e:	ebb0 0008 	subs.w	r0, r0, r8
 8014b82:	eb62 0109 	sbc.w	r1, r2, r9
 8014b86:	f110 30ff 	adds.w	r0, r0, #4294967295	@ 0xffffffff
 8014b8a:	463b      	mov	r3, r7
 8014b8c:	f141 31ff 	adc.w	r1, r1, #4294967295	@ 0xffffffff
 8014b90:	4632      	mov	r2, r6
 8014b92:	f7ec f84b 	bl	8000c2c <__aeabi_ldivmod>
 8014b96:	1c43      	adds	r3, r0, #1
 8014b98:	f141 0100 	adc.w	r1, r1, #0
 8014b9c:	fb00 7007 	mla	r0, r0, r7, r7
 8014ba0:	fb06 0001 	mla	r0, r6, r1, r0
 8014ba4:	fba3 6706 	umull	r6, r7, r3, r6
 8014ba8:	4407      	add	r7, r0
 8014baa:	eb18 0806 	adds.w	r8, r8, r6
 8014bae:	eb49 0907 	adc.w	r9, r9, r7
 8014bb2:	e7bc      	b.n	8014b2e <rcl_timer_call+0xa2>

08014bb4 <rcl_timer_is_ready>:
 8014bb4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014bb8:	b082      	sub	sp, #8
 8014bba:	b310      	cbz	r0, 8014c02 <rcl_timer_is_ready+0x4e>
 8014bbc:	4688      	mov	r8, r1
 8014bbe:	b301      	cbz	r1, 8014c02 <rcl_timer_is_ready+0x4e>
 8014bc0:	6803      	ldr	r3, [r0, #0]
 8014bc2:	4604      	mov	r4, r0
 8014bc4:	4669      	mov	r1, sp
 8014bc6:	6818      	ldr	r0, [r3, #0]
 8014bc8:	f7ff fd3a 	bl	8014640 <rcl_clock_get_now>
 8014bcc:	4605      	mov	r5, r0
 8014bce:	b118      	cbz	r0, 8014bd8 <rcl_timer_is_ready+0x24>
 8014bd0:	4628      	mov	r0, r5
 8014bd2:	b002      	add	sp, #8
 8014bd4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014bd8:	6820      	ldr	r0, [r4, #0]
 8014bda:	2105      	movs	r1, #5
 8014bdc:	3028      	adds	r0, #40	@ 0x28
 8014bde:	f000 ffa3 	bl	8015b28 <__atomic_load_8>
 8014be2:	e9dd 3200 	ldrd	r3, r2, [sp]
 8014be6:	1ac6      	subs	r6, r0, r3
 8014be8:	eb61 0702 	sbc.w	r7, r1, r2
 8014bec:	2e01      	cmp	r6, #1
 8014bee:	f177 0300 	sbcs.w	r3, r7, #0
 8014bf2:	db0b      	blt.n	8014c0c <rcl_timer_is_ready+0x58>
 8014bf4:	462b      	mov	r3, r5
 8014bf6:	4628      	mov	r0, r5
 8014bf8:	f888 3000 	strb.w	r3, [r8]
 8014bfc:	b002      	add	sp, #8
 8014bfe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014c02:	250b      	movs	r5, #11
 8014c04:	4628      	mov	r0, r5
 8014c06:	b002      	add	sp, #8
 8014c08:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014c0c:	6823      	ldr	r3, [r4, #0]
 8014c0e:	f3bf 8f5b 	dmb	ish
 8014c12:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8014c16:	f3bf 8f5b 	dmb	ish
 8014c1a:	fab3 f383 	clz	r3, r3
 8014c1e:	095b      	lsrs	r3, r3, #5
 8014c20:	e7e9      	b.n	8014bf6 <rcl_timer_is_ready+0x42>
 8014c22:	bf00      	nop

08014c24 <rcl_timer_get_time_until_next_call>:
 8014c24:	b570      	push	{r4, r5, r6, lr}
 8014c26:	b082      	sub	sp, #8
 8014c28:	b1d8      	cbz	r0, 8014c62 <rcl_timer_get_time_until_next_call+0x3e>
 8014c2a:	460d      	mov	r5, r1
 8014c2c:	b1c9      	cbz	r1, 8014c62 <rcl_timer_get_time_until_next_call+0x3e>
 8014c2e:	6803      	ldr	r3, [r0, #0]
 8014c30:	4604      	mov	r4, r0
 8014c32:	4669      	mov	r1, sp
 8014c34:	6818      	ldr	r0, [r3, #0]
 8014c36:	f7ff fd03 	bl	8014640 <rcl_clock_get_now>
 8014c3a:	4606      	mov	r6, r0
 8014c3c:	b110      	cbz	r0, 8014c44 <rcl_timer_get_time_until_next_call+0x20>
 8014c3e:	4630      	mov	r0, r6
 8014c40:	b002      	add	sp, #8
 8014c42:	bd70      	pop	{r4, r5, r6, pc}
 8014c44:	6820      	ldr	r0, [r4, #0]
 8014c46:	2105      	movs	r1, #5
 8014c48:	3028      	adds	r0, #40	@ 0x28
 8014c4a:	f000 ff6d 	bl	8015b28 <__atomic_load_8>
 8014c4e:	e9dd 3200 	ldrd	r3, r2, [sp]
 8014c52:	1ac0      	subs	r0, r0, r3
 8014c54:	eb61 0102 	sbc.w	r1, r1, r2
 8014c58:	e9c5 0100 	strd	r0, r1, [r5]
 8014c5c:	4630      	mov	r0, r6
 8014c5e:	b002      	add	sp, #8
 8014c60:	bd70      	pop	{r4, r5, r6, pc}
 8014c62:	260b      	movs	r6, #11
 8014c64:	4630      	mov	r0, r6
 8014c66:	b002      	add	sp, #8
 8014c68:	bd70      	pop	{r4, r5, r6, pc}
 8014c6a:	bf00      	nop

08014c6c <rcl_timer_is_canceled>:
 8014c6c:	b168      	cbz	r0, 8014c8a <rcl_timer_is_canceled+0x1e>
 8014c6e:	b161      	cbz	r1, 8014c8a <rcl_timer_is_canceled+0x1e>
 8014c70:	6803      	ldr	r3, [r0, #0]
 8014c72:	f3bf 8f5b 	dmb	ish
 8014c76:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8014c7a:	f3bf 8f5b 	dmb	ish
 8014c7e:	3b00      	subs	r3, #0
 8014c80:	bf18      	it	ne
 8014c82:	2301      	movne	r3, #1
 8014c84:	700b      	strb	r3, [r1, #0]
 8014c86:	2000      	movs	r0, #0
 8014c88:	4770      	bx	lr
 8014c8a:	200b      	movs	r0, #11
 8014c8c:	4770      	bx	lr
 8014c8e:	bf00      	nop

08014c90 <rcl_timer_get_guard_condition>:
 8014c90:	b130      	cbz	r0, 8014ca0 <rcl_timer_get_guard_condition+0x10>
 8014c92:	6800      	ldr	r0, [r0, #0]
 8014c94:	b120      	cbz	r0, 8014ca0 <rcl_timer_get_guard_condition+0x10>
 8014c96:	68c3      	ldr	r3, [r0, #12]
 8014c98:	b10b      	cbz	r3, 8014c9e <rcl_timer_get_guard_condition+0xe>
 8014c9a:	3008      	adds	r0, #8
 8014c9c:	4770      	bx	lr
 8014c9e:	4618      	mov	r0, r3
 8014ca0:	4770      	bx	lr
 8014ca2:	bf00      	nop

08014ca4 <rcl_validate_enclave_name_with_size>:
 8014ca4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8014ca6:	b0c3      	sub	sp, #268	@ 0x10c
 8014ca8:	b1d0      	cbz	r0, 8014ce0 <rcl_validate_enclave_name_with_size+0x3c>
 8014caa:	4615      	mov	r5, r2
 8014cac:	b1c2      	cbz	r2, 8014ce0 <rcl_validate_enclave_name_with_size+0x3c>
 8014cae:	461f      	mov	r7, r3
 8014cb0:	466a      	mov	r2, sp
 8014cb2:	ab01      	add	r3, sp, #4
 8014cb4:	460e      	mov	r6, r1
 8014cb6:	f001 f983 	bl	8015fc0 <rmw_validate_namespace_with_size>
 8014cba:	4604      	mov	r4, r0
 8014cbc:	b9e0      	cbnz	r0, 8014cf8 <rcl_validate_enclave_name_with_size+0x54>
 8014cbe:	9b00      	ldr	r3, [sp, #0]
 8014cc0:	b923      	cbnz	r3, 8014ccc <rcl_validate_enclave_name_with_size+0x28>
 8014cc2:	2300      	movs	r3, #0
 8014cc4:	602b      	str	r3, [r5, #0]
 8014cc6:	4620      	mov	r0, r4
 8014cc8:	b043      	add	sp, #268	@ 0x10c
 8014cca:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014ccc:	2b07      	cmp	r3, #7
 8014cce:	d00b      	beq.n	8014ce8 <rcl_validate_enclave_name_with_size+0x44>
 8014cd0:	1e5a      	subs	r2, r3, #1
 8014cd2:	2a05      	cmp	r2, #5
 8014cd4:	d82e      	bhi.n	8014d34 <rcl_validate_enclave_name_with_size+0x90>
 8014cd6:	e8df f002 	tbb	[pc, r2]
 8014cda:	211e      	.short	0x211e
 8014cdc:	152a2724 	.word	0x152a2724
 8014ce0:	240b      	movs	r4, #11
 8014ce2:	4620      	mov	r0, r4
 8014ce4:	b043      	add	sp, #268	@ 0x10c
 8014ce6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014ce8:	2eff      	cmp	r6, #255	@ 0xff
 8014cea:	d9ea      	bls.n	8014cc2 <rcl_validate_enclave_name_with_size+0x1e>
 8014cec:	602b      	str	r3, [r5, #0]
 8014cee:	2f00      	cmp	r7, #0
 8014cf0:	d0e9      	beq.n	8014cc6 <rcl_validate_enclave_name_with_size+0x22>
 8014cf2:	23fe      	movs	r3, #254	@ 0xfe
 8014cf4:	603b      	str	r3, [r7, #0]
 8014cf6:	e7e6      	b.n	8014cc6 <rcl_validate_enclave_name_with_size+0x22>
 8014cf8:	f7fe fb2e 	bl	8013358 <rcl_convert_rmw_ret_to_rcl_ret>
 8014cfc:	4604      	mov	r4, r0
 8014cfe:	4620      	mov	r0, r4
 8014d00:	b043      	add	sp, #268	@ 0x10c
 8014d02:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014d04:	2306      	movs	r3, #6
 8014d06:	602b      	str	r3, [r5, #0]
 8014d08:	2f00      	cmp	r7, #0
 8014d0a:	d0dc      	beq.n	8014cc6 <rcl_validate_enclave_name_with_size+0x22>
 8014d0c:	9b01      	ldr	r3, [sp, #4]
 8014d0e:	603b      	str	r3, [r7, #0]
 8014d10:	4620      	mov	r0, r4
 8014d12:	b043      	add	sp, #268	@ 0x10c
 8014d14:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014d16:	2301      	movs	r3, #1
 8014d18:	602b      	str	r3, [r5, #0]
 8014d1a:	e7f5      	b.n	8014d08 <rcl_validate_enclave_name_with_size+0x64>
 8014d1c:	2302      	movs	r3, #2
 8014d1e:	602b      	str	r3, [r5, #0]
 8014d20:	e7f2      	b.n	8014d08 <rcl_validate_enclave_name_with_size+0x64>
 8014d22:	2303      	movs	r3, #3
 8014d24:	602b      	str	r3, [r5, #0]
 8014d26:	e7ef      	b.n	8014d08 <rcl_validate_enclave_name_with_size+0x64>
 8014d28:	2304      	movs	r3, #4
 8014d2a:	602b      	str	r3, [r5, #0]
 8014d2c:	e7ec      	b.n	8014d08 <rcl_validate_enclave_name_with_size+0x64>
 8014d2e:	2305      	movs	r3, #5
 8014d30:	602b      	str	r3, [r5, #0]
 8014d32:	e7e9      	b.n	8014d08 <rcl_validate_enclave_name_with_size+0x64>
 8014d34:	4a03      	ldr	r2, [pc, #12]	@ (8014d44 <rcl_validate_enclave_name_with_size+0xa0>)
 8014d36:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8014d3a:	a802      	add	r0, sp, #8
 8014d3c:	f001 f8a4 	bl	8015e88 <rcutils_snprintf>
 8014d40:	2401      	movs	r4, #1
 8014d42:	e7c0      	b.n	8014cc6 <rcl_validate_enclave_name_with_size+0x22>
 8014d44:	0801b114 	.word	0x0801b114

08014d48 <rcl_validate_enclave_name>:
 8014d48:	b168      	cbz	r0, 8014d66 <rcl_validate_enclave_name+0x1e>
 8014d4a:	b570      	push	{r4, r5, r6, lr}
 8014d4c:	460d      	mov	r5, r1
 8014d4e:	4616      	mov	r6, r2
 8014d50:	4604      	mov	r4, r0
 8014d52:	f7eb fa47 	bl	80001e4 <strlen>
 8014d56:	4633      	mov	r3, r6
 8014d58:	4601      	mov	r1, r0
 8014d5a:	462a      	mov	r2, r5
 8014d5c:	4620      	mov	r0, r4
 8014d5e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8014d62:	f7ff bf9f 	b.w	8014ca4 <rcl_validate_enclave_name_with_size>
 8014d66:	200b      	movs	r0, #11
 8014d68:	4770      	bx	lr
 8014d6a:	bf00      	nop

08014d6c <rcl_validate_topic_name>:
 8014d6c:	2800      	cmp	r0, #0
 8014d6e:	f000 808b 	beq.w	8014e88 <rcl_validate_topic_name+0x11c>
 8014d72:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8014d76:	460e      	mov	r6, r1
 8014d78:	2900      	cmp	r1, #0
 8014d7a:	f000 808c 	beq.w	8014e96 <rcl_validate_topic_name+0x12a>
 8014d7e:	4617      	mov	r7, r2
 8014d80:	4605      	mov	r5, r0
 8014d82:	f7eb fa2f 	bl	80001e4 <strlen>
 8014d86:	b1b0      	cbz	r0, 8014db6 <rcl_validate_topic_name+0x4a>
 8014d88:	f895 9000 	ldrb.w	r9, [r5]
 8014d8c:	f8df c1ac 	ldr.w	ip, [pc, #428]	@ 8014f3c <rcl_validate_topic_name+0x1d0>
 8014d90:	f81c 3009 	ldrb.w	r3, [ip, r9]
 8014d94:	f013 0304 	ands.w	r3, r3, #4
 8014d98:	d178      	bne.n	8014e8c <rcl_validate_topic_name+0x120>
 8014d9a:	f100 38ff 	add.w	r8, r0, #4294967295	@ 0xffffffff
 8014d9e:	f815 2008 	ldrb.w	r2, [r5, r8]
 8014da2:	2a2f      	cmp	r2, #47	@ 0x2f
 8014da4:	d10e      	bne.n	8014dc4 <rcl_validate_topic_name+0x58>
 8014da6:	2202      	movs	r2, #2
 8014da8:	6032      	str	r2, [r6, #0]
 8014daa:	b36f      	cbz	r7, 8014e08 <rcl_validate_topic_name+0x9c>
 8014dac:	f8c7 8000 	str.w	r8, [r7]
 8014db0:	4618      	mov	r0, r3
 8014db2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014db6:	2301      	movs	r3, #1
 8014db8:	6033      	str	r3, [r6, #0]
 8014dba:	b32f      	cbz	r7, 8014e08 <rcl_validate_topic_name+0x9c>
 8014dbc:	2000      	movs	r0, #0
 8014dbe:	6038      	str	r0, [r7, #0]
 8014dc0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014dc4:	461c      	mov	r4, r3
 8014dc6:	4619      	mov	r1, r3
 8014dc8:	f105 3aff 	add.w	sl, r5, #4294967295	@ 0xffffffff
 8014dcc:	f81a 2f01 	ldrb.w	r2, [sl, #1]!
 8014dd0:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 8014dd4:	f1be 0f09 	cmp.w	lr, #9
 8014dd8:	d946      	bls.n	8014e68 <rcl_validate_topic_name+0xfc>
 8014dda:	f022 0e20 	bic.w	lr, r2, #32
 8014dde:	f1ae 0e41 	sub.w	lr, lr, #65	@ 0x41
 8014de2:	f1be 0f19 	cmp.w	lr, #25
 8014de6:	d93f      	bls.n	8014e68 <rcl_validate_topic_name+0xfc>
 8014de8:	2a5f      	cmp	r2, #95	@ 0x5f
 8014dea:	d014      	beq.n	8014e16 <rcl_validate_topic_name+0xaa>
 8014dec:	2a2f      	cmp	r2, #47	@ 0x2f
 8014dee:	d05b      	beq.n	8014ea8 <rcl_validate_topic_name+0x13c>
 8014df0:	2a7e      	cmp	r2, #126	@ 0x7e
 8014df2:	d052      	beq.n	8014e9a <rcl_validate_topic_name+0x12e>
 8014df4:	2a7b      	cmp	r2, #123	@ 0x7b
 8014df6:	d00a      	beq.n	8014e0e <rcl_validate_topic_name+0xa2>
 8014df8:	2a7d      	cmp	r2, #125	@ 0x7d
 8014dfa:	d16f      	bne.n	8014edc <rcl_validate_topic_name+0x170>
 8014dfc:	2c00      	cmp	r4, #0
 8014dfe:	d15e      	bne.n	8014ebe <rcl_validate_topic_name+0x152>
 8014e00:	2305      	movs	r3, #5
 8014e02:	6033      	str	r3, [r6, #0]
 8014e04:	b107      	cbz	r7, 8014e08 <rcl_validate_topic_name+0x9c>
 8014e06:	6039      	str	r1, [r7, #0]
 8014e08:	2000      	movs	r0, #0
 8014e0a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014e0e:	2c00      	cmp	r4, #0
 8014e10:	d14c      	bne.n	8014eac <rcl_validate_topic_name+0x140>
 8014e12:	460b      	mov	r3, r1
 8014e14:	2401      	movs	r4, #1
 8014e16:	3101      	adds	r1, #1
 8014e18:	4288      	cmp	r0, r1
 8014e1a:	d1d7      	bne.n	8014dcc <rcl_validate_topic_name+0x60>
 8014e1c:	2c00      	cmp	r4, #0
 8014e1e:	d156      	bne.n	8014ece <rcl_validate_topic_name+0x162>
 8014e20:	f1b9 0f7e 	cmp.w	r9, #126	@ 0x7e
 8014e24:	4620      	mov	r0, r4
 8014e26:	d061      	beq.n	8014eec <rcl_validate_topic_name+0x180>
 8014e28:	f108 0e01 	add.w	lr, r8, #1
 8014e2c:	e007      	b.n	8014e3e <rcl_validate_topic_name+0xd2>
 8014e2e:	2801      	cmp	r0, #1
 8014e30:	d047      	beq.n	8014ec2 <rcl_validate_topic_name+0x156>
 8014e32:	461a      	mov	r2, r3
 8014e34:	4291      	cmp	r1, r2
 8014e36:	4618      	mov	r0, r3
 8014e38:	f105 0501 	add.w	r5, r5, #1
 8014e3c:	d944      	bls.n	8014ec8 <rcl_validate_topic_name+0x15c>
 8014e3e:	4580      	cmp	r8, r0
 8014e40:	f100 0301 	add.w	r3, r0, #1
 8014e44:	d037      	beq.n	8014eb6 <rcl_validate_topic_name+0x14a>
 8014e46:	782a      	ldrb	r2, [r5, #0]
 8014e48:	2a2f      	cmp	r2, #47	@ 0x2f
 8014e4a:	d1f0      	bne.n	8014e2e <rcl_validate_topic_name+0xc2>
 8014e4c:	786b      	ldrb	r3, [r5, #1]
 8014e4e:	f81c 4003 	ldrb.w	r4, [ip, r3]
 8014e52:	1c43      	adds	r3, r0, #1
 8014e54:	0760      	lsls	r0, r4, #29
 8014e56:	461a      	mov	r2, r3
 8014e58:	d5ec      	bpl.n	8014e34 <rcl_validate_topic_name+0xc8>
 8014e5a:	2304      	movs	r3, #4
 8014e5c:	6033      	str	r3, [r6, #0]
 8014e5e:	2f00      	cmp	r7, #0
 8014e60:	d0d2      	beq.n	8014e08 <rcl_validate_topic_name+0x9c>
 8014e62:	603a      	str	r2, [r7, #0]
 8014e64:	2000      	movs	r0, #0
 8014e66:	e7ab      	b.n	8014dc0 <rcl_validate_topic_name+0x54>
 8014e68:	f81c 2002 	ldrb.w	r2, [ip, r2]
 8014e6c:	0752      	lsls	r2, r2, #29
 8014e6e:	d5d2      	bpl.n	8014e16 <rcl_validate_topic_name+0xaa>
 8014e70:	2c00      	cmp	r4, #0
 8014e72:	d0d0      	beq.n	8014e16 <rcl_validate_topic_name+0xaa>
 8014e74:	2900      	cmp	r1, #0
 8014e76:	d0ce      	beq.n	8014e16 <rcl_validate_topic_name+0xaa>
 8014e78:	1e4a      	subs	r2, r1, #1
 8014e7a:	429a      	cmp	r2, r3
 8014e7c:	d1cb      	bne.n	8014e16 <rcl_validate_topic_name+0xaa>
 8014e7e:	2309      	movs	r3, #9
 8014e80:	6033      	str	r3, [r6, #0]
 8014e82:	2f00      	cmp	r7, #0
 8014e84:	d1bf      	bne.n	8014e06 <rcl_validate_topic_name+0x9a>
 8014e86:	e7bf      	b.n	8014e08 <rcl_validate_topic_name+0x9c>
 8014e88:	200b      	movs	r0, #11
 8014e8a:	4770      	bx	lr
 8014e8c:	2304      	movs	r3, #4
 8014e8e:	6033      	str	r3, [r6, #0]
 8014e90:	2f00      	cmp	r7, #0
 8014e92:	d193      	bne.n	8014dbc <rcl_validate_topic_name+0x50>
 8014e94:	e7b8      	b.n	8014e08 <rcl_validate_topic_name+0x9c>
 8014e96:	200b      	movs	r0, #11
 8014e98:	e792      	b.n	8014dc0 <rcl_validate_topic_name+0x54>
 8014e9a:	2900      	cmp	r1, #0
 8014e9c:	d0bb      	beq.n	8014e16 <rcl_validate_topic_name+0xaa>
 8014e9e:	2306      	movs	r3, #6
 8014ea0:	6033      	str	r3, [r6, #0]
 8014ea2:	2f00      	cmp	r7, #0
 8014ea4:	d1af      	bne.n	8014e06 <rcl_validate_topic_name+0x9a>
 8014ea6:	e7af      	b.n	8014e08 <rcl_validate_topic_name+0x9c>
 8014ea8:	2c00      	cmp	r4, #0
 8014eaa:	d0b4      	beq.n	8014e16 <rcl_validate_topic_name+0xaa>
 8014eac:	2308      	movs	r3, #8
 8014eae:	6033      	str	r3, [r6, #0]
 8014eb0:	2f00      	cmp	r7, #0
 8014eb2:	d1a8      	bne.n	8014e06 <rcl_validate_topic_name+0x9a>
 8014eb4:	e7a8      	b.n	8014e08 <rcl_validate_topic_name+0x9c>
 8014eb6:	4672      	mov	r2, lr
 8014eb8:	f108 0301 	add.w	r3, r8, #1
 8014ebc:	e7ba      	b.n	8014e34 <rcl_validate_topic_name+0xc8>
 8014ebe:	2400      	movs	r4, #0
 8014ec0:	e7a9      	b.n	8014e16 <rcl_validate_topic_name+0xaa>
 8014ec2:	2202      	movs	r2, #2
 8014ec4:	4613      	mov	r3, r2
 8014ec6:	e7b5      	b.n	8014e34 <rcl_validate_topic_name+0xc8>
 8014ec8:	2000      	movs	r0, #0
 8014eca:	6030      	str	r0, [r6, #0]
 8014ecc:	e778      	b.n	8014dc0 <rcl_validate_topic_name+0x54>
 8014ece:	2205      	movs	r2, #5
 8014ed0:	6032      	str	r2, [r6, #0]
 8014ed2:	2f00      	cmp	r7, #0
 8014ed4:	d098      	beq.n	8014e08 <rcl_validate_topic_name+0x9c>
 8014ed6:	603b      	str	r3, [r7, #0]
 8014ed8:	2000      	movs	r0, #0
 8014eda:	e771      	b.n	8014dc0 <rcl_validate_topic_name+0x54>
 8014edc:	2c00      	cmp	r4, #0
 8014ede:	bf14      	ite	ne
 8014ee0:	2308      	movne	r3, #8
 8014ee2:	2303      	moveq	r3, #3
 8014ee4:	6033      	str	r3, [r6, #0]
 8014ee6:	2f00      	cmp	r7, #0
 8014ee8:	d18d      	bne.n	8014e06 <rcl_validate_topic_name+0x9a>
 8014eea:	e78d      	b.n	8014e08 <rcl_validate_topic_name+0x9c>
 8014eec:	f108 0401 	add.w	r4, r8, #1
 8014ef0:	e007      	b.n	8014f02 <rcl_validate_topic_name+0x196>
 8014ef2:	2801      	cmp	r0, #1
 8014ef4:	d019      	beq.n	8014f2a <rcl_validate_topic_name+0x1be>
 8014ef6:	461a      	mov	r2, r3
 8014ef8:	4291      	cmp	r1, r2
 8014efa:	4618      	mov	r0, r3
 8014efc:	f105 0501 	add.w	r5, r5, #1
 8014f00:	d9e2      	bls.n	8014ec8 <rcl_validate_topic_name+0x15c>
 8014f02:	4580      	cmp	r8, r0
 8014f04:	f100 0301 	add.w	r3, r0, #1
 8014f08:	d00b      	beq.n	8014f22 <rcl_validate_topic_name+0x1b6>
 8014f0a:	782a      	ldrb	r2, [r5, #0]
 8014f0c:	2a2f      	cmp	r2, #47	@ 0x2f
 8014f0e:	d1f0      	bne.n	8014ef2 <rcl_validate_topic_name+0x186>
 8014f10:	786b      	ldrb	r3, [r5, #1]
 8014f12:	f81c e003 	ldrb.w	lr, [ip, r3]
 8014f16:	1c43      	adds	r3, r0, #1
 8014f18:	f01e 0f04 	tst.w	lr, #4
 8014f1c:	461a      	mov	r2, r3
 8014f1e:	d0eb      	beq.n	8014ef8 <rcl_validate_topic_name+0x18c>
 8014f20:	e79b      	b.n	8014e5a <rcl_validate_topic_name+0xee>
 8014f22:	4622      	mov	r2, r4
 8014f24:	f108 0301 	add.w	r3, r8, #1
 8014f28:	e7e6      	b.n	8014ef8 <rcl_validate_topic_name+0x18c>
 8014f2a:	2307      	movs	r3, #7
 8014f2c:	6033      	str	r3, [r6, #0]
 8014f2e:	2f00      	cmp	r7, #0
 8014f30:	f43f af6a 	beq.w	8014e08 <rcl_validate_topic_name+0x9c>
 8014f34:	6038      	str	r0, [r7, #0]
 8014f36:	2000      	movs	r0, #0
 8014f38:	e742      	b.n	8014dc0 <rcl_validate_topic_name+0x54>
 8014f3a:	bf00      	nop
 8014f3c:	0801b7b0 	.word	0x0801b7b0

08014f40 <rcl_get_zero_initialized_wait_set>:
 8014f40:	b470      	push	{r4, r5, r6}
 8014f42:	4d07      	ldr	r5, [pc, #28]	@ (8014f60 <rcl_get_zero_initialized_wait_set+0x20>)
 8014f44:	4606      	mov	r6, r0
 8014f46:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8014f48:	4634      	mov	r4, r6
 8014f4a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8014f4c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8014f4e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8014f50:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8014f52:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8014f54:	682b      	ldr	r3, [r5, #0]
 8014f56:	6023      	str	r3, [r4, #0]
 8014f58:	4630      	mov	r0, r6
 8014f5a:	bc70      	pop	{r4, r5, r6}
 8014f5c:	4770      	bx	lr
 8014f5e:	bf00      	nop
 8014f60:	0801b174 	.word	0x0801b174

08014f64 <rcl_wait_set_is_valid>:
 8014f64:	b118      	cbz	r0, 8014f6e <rcl_wait_set_is_valid+0xa>
 8014f66:	6b00      	ldr	r0, [r0, #48]	@ 0x30
 8014f68:	3800      	subs	r0, #0
 8014f6a:	bf18      	it	ne
 8014f6c:	2001      	movne	r0, #1
 8014f6e:	4770      	bx	lr

08014f70 <rcl_wait_set_fini>:
 8014f70:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014f74:	b082      	sub	sp, #8
 8014f76:	2800      	cmp	r0, #0
 8014f78:	f000 8095 	beq.w	80150a6 <rcl_wait_set_fini+0x136>
 8014f7c:	6b06      	ldr	r6, [r0, #48]	@ 0x30
 8014f7e:	4604      	mov	r4, r0
 8014f80:	2e00      	cmp	r6, #0
 8014f82:	f000 808c 	beq.w	801509e <rcl_wait_set_fini+0x12e>
 8014f86:	6bf0      	ldr	r0, [r6, #60]	@ 0x3c
 8014f88:	f002 f9a6 	bl	80172d8 <rmw_destroy_wait_set>
 8014f8c:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 8014f8e:	1e06      	subs	r6, r0, #0
 8014f90:	bf18      	it	ne
 8014f92:	f44f 7661 	movne.w	r6, #900	@ 0x384
 8014f96:	2d00      	cmp	r5, #0
 8014f98:	f000 8081 	beq.w	801509e <rcl_wait_set_fini+0x12e>
 8014f9c:	6820      	ldr	r0, [r4, #0]
 8014f9e:	f8d5 804c 	ldr.w	r8, [r5, #76]	@ 0x4c
 8014fa2:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 8014fa4:	2700      	movs	r7, #0
 8014fa6:	6067      	str	r7, [r4, #4]
 8014fa8:	602f      	str	r7, [r5, #0]
 8014faa:	b120      	cbz	r0, 8014fb6 <rcl_wait_set_fini+0x46>
 8014fac:	9101      	str	r1, [sp, #4]
 8014fae:	47c0      	blx	r8
 8014fb0:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 8014fb2:	9901      	ldr	r1, [sp, #4]
 8014fb4:	6027      	str	r7, [r4, #0]
 8014fb6:	68a8      	ldr	r0, [r5, #8]
 8014fb8:	b120      	cbz	r0, 8014fc4 <rcl_wait_set_fini+0x54>
 8014fba:	47c0      	blx	r8
 8014fbc:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 8014fbe:	2300      	movs	r3, #0
 8014fc0:	e9c5 3301 	strd	r3, r3, [r5, #4]
 8014fc4:	68a0      	ldr	r0, [r4, #8]
 8014fc6:	6cef      	ldr	r7, [r5, #76]	@ 0x4c
 8014fc8:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 8014fca:	f04f 0800 	mov.w	r8, #0
 8014fce:	f8c4 800c 	str.w	r8, [r4, #12]
 8014fd2:	f8c5 800c 	str.w	r8, [r5, #12]
 8014fd6:	b128      	cbz	r0, 8014fe4 <rcl_wait_set_fini+0x74>
 8014fd8:	47b8      	blx	r7
 8014fda:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 8014fdc:	f8c4 8008 	str.w	r8, [r4, #8]
 8014fe0:	6cef      	ldr	r7, [r5, #76]	@ 0x4c
 8014fe2:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 8014fe4:	6968      	ldr	r0, [r5, #20]
 8014fe6:	f04f 0800 	mov.w	r8, #0
 8014fea:	f8c5 8010 	str.w	r8, [r5, #16]
 8014fee:	b128      	cbz	r0, 8014ffc <rcl_wait_set_fini+0x8c>
 8014ff0:	47b8      	blx	r7
 8014ff2:	f8c5 8014 	str.w	r8, [r5, #20]
 8014ff6:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 8014ff8:	6cef      	ldr	r7, [r5, #76]	@ 0x4c
 8014ffa:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 8014ffc:	6920      	ldr	r0, [r4, #16]
 8014ffe:	f04f 0800 	mov.w	r8, #0
 8015002:	f8c4 8014 	str.w	r8, [r4, #20]
 8015006:	f8c5 8040 	str.w	r8, [r5, #64]	@ 0x40
 801500a:	b128      	cbz	r0, 8015018 <rcl_wait_set_fini+0xa8>
 801500c:	47b8      	blx	r7
 801500e:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 8015010:	f8c4 8010 	str.w	r8, [r4, #16]
 8015014:	6cef      	ldr	r7, [r5, #76]	@ 0x4c
 8015016:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 8015018:	69a0      	ldr	r0, [r4, #24]
 801501a:	f04f 0800 	mov.w	r8, #0
 801501e:	f8c4 801c 	str.w	r8, [r4, #28]
 8015022:	f8c5 8018 	str.w	r8, [r5, #24]
 8015026:	b128      	cbz	r0, 8015034 <rcl_wait_set_fini+0xc4>
 8015028:	9101      	str	r1, [sp, #4]
 801502a:	47b8      	blx	r7
 801502c:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 801502e:	9901      	ldr	r1, [sp, #4]
 8015030:	f8c4 8018 	str.w	r8, [r4, #24]
 8015034:	6a28      	ldr	r0, [r5, #32]
 8015036:	b120      	cbz	r0, 8015042 <rcl_wait_set_fini+0xd2>
 8015038:	47b8      	blx	r7
 801503a:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 801503c:	2300      	movs	r3, #0
 801503e:	e9c5 3307 	strd	r3, r3, [r5, #28]
 8015042:	6a20      	ldr	r0, [r4, #32]
 8015044:	f8d5 804c 	ldr.w	r8, [r5, #76]	@ 0x4c
 8015048:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 801504a:	2700      	movs	r7, #0
 801504c:	6267      	str	r7, [r4, #36]	@ 0x24
 801504e:	626f      	str	r7, [r5, #36]	@ 0x24
 8015050:	b120      	cbz	r0, 801505c <rcl_wait_set_fini+0xec>
 8015052:	9101      	str	r1, [sp, #4]
 8015054:	47c0      	blx	r8
 8015056:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 8015058:	9901      	ldr	r1, [sp, #4]
 801505a:	6227      	str	r7, [r4, #32]
 801505c:	6ae8      	ldr	r0, [r5, #44]	@ 0x2c
 801505e:	b120      	cbz	r0, 801506a <rcl_wait_set_fini+0xfa>
 8015060:	47c0      	blx	r8
 8015062:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 8015064:	2300      	movs	r3, #0
 8015066:	e9c5 330a 	strd	r3, r3, [r5, #40]	@ 0x28
 801506a:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 801506c:	f8d5 804c 	ldr.w	r8, [r5, #76]	@ 0x4c
 8015070:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 8015072:	2700      	movs	r7, #0
 8015074:	62e7      	str	r7, [r4, #44]	@ 0x2c
 8015076:	632f      	str	r7, [r5, #48]	@ 0x30
 8015078:	b120      	cbz	r0, 8015084 <rcl_wait_set_fini+0x114>
 801507a:	9101      	str	r1, [sp, #4]
 801507c:	47c0      	blx	r8
 801507e:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 8015080:	9901      	ldr	r1, [sp, #4]
 8015082:	62a7      	str	r7, [r4, #40]	@ 0x28
 8015084:	6ba8      	ldr	r0, [r5, #56]	@ 0x38
 8015086:	b120      	cbz	r0, 8015092 <rcl_wait_set_fini+0x122>
 8015088:	47c0      	blx	r8
 801508a:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 801508c:	2300      	movs	r3, #0
 801508e:	e9c5 330d 	strd	r3, r3, [r5, #52]	@ 0x34
 8015092:	6ceb      	ldr	r3, [r5, #76]	@ 0x4c
 8015094:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 8015096:	4628      	mov	r0, r5
 8015098:	4798      	blx	r3
 801509a:	2300      	movs	r3, #0
 801509c:	6323      	str	r3, [r4, #48]	@ 0x30
 801509e:	4630      	mov	r0, r6
 80150a0:	b002      	add	sp, #8
 80150a2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80150a6:	260b      	movs	r6, #11
 80150a8:	4630      	mov	r0, r6
 80150aa:	b002      	add	sp, #8
 80150ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080150b0 <rcl_wait_set_add_subscription>:
 80150b0:	b320      	cbz	r0, 80150fc <rcl_wait_set_add_subscription+0x4c>
 80150b2:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 80150b4:	b570      	push	{r4, r5, r6, lr}
 80150b6:	4604      	mov	r4, r0
 80150b8:	b1d3      	cbz	r3, 80150f0 <rcl_wait_set_add_subscription+0x40>
 80150ba:	b319      	cbz	r1, 8015104 <rcl_wait_set_add_subscription+0x54>
 80150bc:	681d      	ldr	r5, [r3, #0]
 80150be:	6860      	ldr	r0, [r4, #4]
 80150c0:	4285      	cmp	r5, r0
 80150c2:	d218      	bcs.n	80150f6 <rcl_wait_set_add_subscription+0x46>
 80150c4:	6820      	ldr	r0, [r4, #0]
 80150c6:	1c6e      	adds	r6, r5, #1
 80150c8:	601e      	str	r6, [r3, #0]
 80150ca:	f840 1025 	str.w	r1, [r0, r5, lsl #2]
 80150ce:	b102      	cbz	r2, 80150d2 <rcl_wait_set_add_subscription+0x22>
 80150d0:	6015      	str	r5, [r2, #0]
 80150d2:	4608      	mov	r0, r1
 80150d4:	f7ff fa16 	bl	8014504 <rcl_subscription_get_rmw_handle>
 80150d8:	b190      	cbz	r0, 8015100 <rcl_wait_set_add_subscription+0x50>
 80150da:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80150dc:	6842      	ldr	r2, [r0, #4]
 80150de:	689b      	ldr	r3, [r3, #8]
 80150e0:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80150e4:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 80150e6:	6853      	ldr	r3, [r2, #4]
 80150e8:	3301      	adds	r3, #1
 80150ea:	6053      	str	r3, [r2, #4]
 80150ec:	2000      	movs	r0, #0
 80150ee:	bd70      	pop	{r4, r5, r6, pc}
 80150f0:	f44f 7061 	mov.w	r0, #900	@ 0x384
 80150f4:	bd70      	pop	{r4, r5, r6, pc}
 80150f6:	f240 3086 	movw	r0, #902	@ 0x386
 80150fa:	bd70      	pop	{r4, r5, r6, pc}
 80150fc:	200b      	movs	r0, #11
 80150fe:	4770      	bx	lr
 8015100:	2001      	movs	r0, #1
 8015102:	bd70      	pop	{r4, r5, r6, pc}
 8015104:	200b      	movs	r0, #11
 8015106:	bd70      	pop	{r4, r5, r6, pc}

08015108 <rcl_wait_set_clear>:
 8015108:	2800      	cmp	r0, #0
 801510a:	d073      	beq.n	80151f4 <rcl_wait_set_clear+0xec>
 801510c:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 801510e:	b510      	push	{r4, lr}
 8015110:	4604      	mov	r4, r0
 8015112:	2b00      	cmp	r3, #0
 8015114:	d070      	beq.n	80151f8 <rcl_wait_set_clear+0xf0>
 8015116:	6800      	ldr	r0, [r0, #0]
 8015118:	b138      	cbz	r0, 801512a <rcl_wait_set_clear+0x22>
 801511a:	6862      	ldr	r2, [r4, #4]
 801511c:	2100      	movs	r1, #0
 801511e:	0092      	lsls	r2, r2, #2
 8015120:	f004 fd70 	bl	8019c04 <memset>
 8015124:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8015126:	2200      	movs	r2, #0
 8015128:	601a      	str	r2, [r3, #0]
 801512a:	68a0      	ldr	r0, [r4, #8]
 801512c:	b138      	cbz	r0, 801513e <rcl_wait_set_clear+0x36>
 801512e:	68e2      	ldr	r2, [r4, #12]
 8015130:	2100      	movs	r1, #0
 8015132:	0092      	lsls	r2, r2, #2
 8015134:	f004 fd66 	bl	8019c04 <memset>
 8015138:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801513a:	2200      	movs	r2, #0
 801513c:	60da      	str	r2, [r3, #12]
 801513e:	69a0      	ldr	r0, [r4, #24]
 8015140:	b138      	cbz	r0, 8015152 <rcl_wait_set_clear+0x4a>
 8015142:	69e2      	ldr	r2, [r4, #28]
 8015144:	2100      	movs	r1, #0
 8015146:	0092      	lsls	r2, r2, #2
 8015148:	f004 fd5c 	bl	8019c04 <memset>
 801514c:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801514e:	2200      	movs	r2, #0
 8015150:	619a      	str	r2, [r3, #24]
 8015152:	6a20      	ldr	r0, [r4, #32]
 8015154:	b138      	cbz	r0, 8015166 <rcl_wait_set_clear+0x5e>
 8015156:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 8015158:	2100      	movs	r1, #0
 801515a:	0092      	lsls	r2, r2, #2
 801515c:	f004 fd52 	bl	8019c04 <memset>
 8015160:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8015162:	2200      	movs	r2, #0
 8015164:	625a      	str	r2, [r3, #36]	@ 0x24
 8015166:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 8015168:	b138      	cbz	r0, 801517a <rcl_wait_set_clear+0x72>
 801516a:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 801516c:	2100      	movs	r1, #0
 801516e:	0092      	lsls	r2, r2, #2
 8015170:	f004 fd48 	bl	8019c04 <memset>
 8015174:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8015176:	2200      	movs	r2, #0
 8015178:	631a      	str	r2, [r3, #48]	@ 0x30
 801517a:	6920      	ldr	r0, [r4, #16]
 801517c:	b138      	cbz	r0, 801518e <rcl_wait_set_clear+0x86>
 801517e:	6962      	ldr	r2, [r4, #20]
 8015180:	2100      	movs	r1, #0
 8015182:	0092      	lsls	r2, r2, #2
 8015184:	f004 fd3e 	bl	8019c04 <memset>
 8015188:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801518a:	2200      	movs	r2, #0
 801518c:	641a      	str	r2, [r3, #64]	@ 0x40
 801518e:	6898      	ldr	r0, [r3, #8]
 8015190:	b138      	cbz	r0, 80151a2 <rcl_wait_set_clear+0x9a>
 8015192:	685a      	ldr	r2, [r3, #4]
 8015194:	2100      	movs	r1, #0
 8015196:	0092      	lsls	r2, r2, #2
 8015198:	f004 fd34 	bl	8019c04 <memset>
 801519c:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801519e:	2200      	movs	r2, #0
 80151a0:	605a      	str	r2, [r3, #4]
 80151a2:	6958      	ldr	r0, [r3, #20]
 80151a4:	b138      	cbz	r0, 80151b6 <rcl_wait_set_clear+0xae>
 80151a6:	691a      	ldr	r2, [r3, #16]
 80151a8:	2100      	movs	r1, #0
 80151aa:	0092      	lsls	r2, r2, #2
 80151ac:	f004 fd2a 	bl	8019c04 <memset>
 80151b0:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80151b2:	2200      	movs	r2, #0
 80151b4:	611a      	str	r2, [r3, #16]
 80151b6:	6a18      	ldr	r0, [r3, #32]
 80151b8:	b138      	cbz	r0, 80151ca <rcl_wait_set_clear+0xc2>
 80151ba:	69da      	ldr	r2, [r3, #28]
 80151bc:	2100      	movs	r1, #0
 80151be:	0092      	lsls	r2, r2, #2
 80151c0:	f004 fd20 	bl	8019c04 <memset>
 80151c4:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80151c6:	2200      	movs	r2, #0
 80151c8:	61da      	str	r2, [r3, #28]
 80151ca:	6ad8      	ldr	r0, [r3, #44]	@ 0x2c
 80151cc:	b138      	cbz	r0, 80151de <rcl_wait_set_clear+0xd6>
 80151ce:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80151d0:	2100      	movs	r1, #0
 80151d2:	0092      	lsls	r2, r2, #2
 80151d4:	f004 fd16 	bl	8019c04 <memset>
 80151d8:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80151da:	2200      	movs	r2, #0
 80151dc:	629a      	str	r2, [r3, #40]	@ 0x28
 80151de:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 80151e0:	b138      	cbz	r0, 80151f2 <rcl_wait_set_clear+0xea>
 80151e2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80151e4:	2100      	movs	r1, #0
 80151e6:	0092      	lsls	r2, r2, #2
 80151e8:	f004 fd0c 	bl	8019c04 <memset>
 80151ec:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80151ee:	2000      	movs	r0, #0
 80151f0:	6358      	str	r0, [r3, #52]	@ 0x34
 80151f2:	bd10      	pop	{r4, pc}
 80151f4:	200b      	movs	r0, #11
 80151f6:	4770      	bx	lr
 80151f8:	f44f 7061 	mov.w	r0, #900	@ 0x384
 80151fc:	bd10      	pop	{r4, pc}
 80151fe:	bf00      	nop

08015200 <rcl_wait_set_resize>:
 8015200:	2800      	cmp	r0, #0
 8015202:	f000 81a6 	beq.w	8015552 <rcl_wait_set_resize+0x352>
 8015206:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801520a:	f8d0 a030 	ldr.w	sl, [r0, #48]	@ 0x30
 801520e:	b083      	sub	sp, #12
 8015210:	4604      	mov	r4, r0
 8015212:	f1ba 0f00 	cmp.w	sl, #0
 8015216:	f000 819e 	beq.w	8015556 <rcl_wait_set_resize+0x356>
 801521a:	461e      	mov	r6, r3
 801521c:	e9da b313 	ldrd	fp, r3, [sl, #76]	@ 0x4c
 8015220:	f04f 0800 	mov.w	r8, #0
 8015224:	f8da 9058 	ldr.w	r9, [sl, #88]	@ 0x58
 8015228:	9300      	str	r3, [sp, #0]
 801522a:	f8c0 8004 	str.w	r8, [r0, #4]
 801522e:	460f      	mov	r7, r1
 8015230:	4615      	mov	r5, r2
 8015232:	f8ca 8000 	str.w	r8, [sl]
 8015236:	2900      	cmp	r1, #0
 8015238:	f000 80c9 	beq.w	80153ce <rcl_wait_set_resize+0x1ce>
 801523c:	ea4f 0a81 	mov.w	sl, r1, lsl #2
 8015240:	6800      	ldr	r0, [r0, #0]
 8015242:	4651      	mov	r1, sl
 8015244:	464a      	mov	r2, r9
 8015246:	4798      	blx	r3
 8015248:	6020      	str	r0, [r4, #0]
 801524a:	2800      	cmp	r0, #0
 801524c:	f000 80d8 	beq.w	8015400 <rcl_wait_set_resize+0x200>
 8015250:	4652      	mov	r2, sl
 8015252:	4641      	mov	r1, r8
 8015254:	f004 fcd6 	bl	8019c04 <memset>
 8015258:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801525a:	6067      	str	r7, [r4, #4]
 801525c:	6898      	ldr	r0, [r3, #8]
 801525e:	f8c3 8004 	str.w	r8, [r3, #4]
 8015262:	9301      	str	r3, [sp, #4]
 8015264:	464a      	mov	r2, r9
 8015266:	9b00      	ldr	r3, [sp, #0]
 8015268:	4651      	mov	r1, sl
 801526a:	4798      	blx	r3
 801526c:	9b01      	ldr	r3, [sp, #4]
 801526e:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 8015270:	6098      	str	r0, [r3, #8]
 8015272:	6897      	ldr	r7, [r2, #8]
 8015274:	2f00      	cmp	r7, #0
 8015276:	f000 80be 	beq.w	80153f6 <rcl_wait_set_resize+0x1f6>
 801527a:	4652      	mov	r2, sl
 801527c:	4641      	mov	r1, r8
 801527e:	4638      	mov	r0, r7
 8015280:	f004 fcc0 	bl	8019c04 <memset>
 8015284:	f8d4 a030 	ldr.w	sl, [r4, #48]	@ 0x30
 8015288:	f8da 8058 	ldr.w	r8, [sl, #88]	@ 0x58
 801528c:	2700      	movs	r7, #0
 801528e:	e9da 2313 	ldrd	r2, r3, [sl, #76]	@ 0x4c
 8015292:	60e7      	str	r7, [r4, #12]
 8015294:	f8ca 700c 	str.w	r7, [sl, #12]
 8015298:	2d00      	cmp	r5, #0
 801529a:	f040 80b5 	bne.w	8015408 <rcl_wait_set_resize+0x208>
 801529e:	68a0      	ldr	r0, [r4, #8]
 80152a0:	b130      	cbz	r0, 80152b0 <rcl_wait_set_resize+0xb0>
 80152a2:	4641      	mov	r1, r8
 80152a4:	4790      	blx	r2
 80152a6:	f8d4 a030 	ldr.w	sl, [r4, #48]	@ 0x30
 80152aa:	60a5      	str	r5, [r4, #8]
 80152ac:	f8da 8058 	ldr.w	r8, [sl, #88]	@ 0x58
 80152b0:	2700      	movs	r7, #0
 80152b2:	19ad      	adds	r5, r5, r6
 80152b4:	f8ca 7010 	str.w	r7, [sl, #16]
 80152b8:	f040 80be 	bne.w	8015438 <rcl_wait_set_resize+0x238>
 80152bc:	f8da 0014 	ldr.w	r0, [sl, #20]
 80152c0:	b148      	cbz	r0, 80152d6 <rcl_wait_set_resize+0xd6>
 80152c2:	f8da 304c 	ldr.w	r3, [sl, #76]	@ 0x4c
 80152c6:	4641      	mov	r1, r8
 80152c8:	4798      	blx	r3
 80152ca:	f8ca 5014 	str.w	r5, [sl, #20]
 80152ce:	f8d4 a030 	ldr.w	sl, [r4, #48]	@ 0x30
 80152d2:	f8da 8058 	ldr.w	r8, [sl, #88]	@ 0x58
 80152d6:	2500      	movs	r5, #0
 80152d8:	e9da 9713 	ldrd	r9, r7, [sl, #76]	@ 0x4c
 80152dc:	6165      	str	r5, [r4, #20]
 80152de:	f8ca 5040 	str.w	r5, [sl, #64]	@ 0x40
 80152e2:	2e00      	cmp	r6, #0
 80152e4:	f040 80bf 	bne.w	8015466 <rcl_wait_set_resize+0x266>
 80152e8:	6920      	ldr	r0, [r4, #16]
 80152ea:	b140      	cbz	r0, 80152fe <rcl_wait_set_resize+0xfe>
 80152ec:	4641      	mov	r1, r8
 80152ee:	47c8      	blx	r9
 80152f0:	f8d4 a030 	ldr.w	sl, [r4, #48]	@ 0x30
 80152f4:	6126      	str	r6, [r4, #16]
 80152f6:	e9da 9713 	ldrd	r9, r7, [sl, #76]	@ 0x4c
 80152fa:	f8da 8058 	ldr.w	r8, [sl, #88]	@ 0x58
 80152fe:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8015300:	2500      	movs	r5, #0
 8015302:	61e5      	str	r5, [r4, #28]
 8015304:	f8ca 5018 	str.w	r5, [sl, #24]
 8015308:	2b00      	cmp	r3, #0
 801530a:	f040 80c1 	bne.w	8015490 <rcl_wait_set_resize+0x290>
 801530e:	69a0      	ldr	r0, [r4, #24]
 8015310:	b128      	cbz	r0, 801531e <rcl_wait_set_resize+0x11e>
 8015312:	4641      	mov	r1, r8
 8015314:	47c8      	blx	r9
 8015316:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8015318:	f8d4 a030 	ldr.w	sl, [r4, #48]	@ 0x30
 801531c:	61a3      	str	r3, [r4, #24]
 801531e:	f8da 0020 	ldr.w	r0, [sl, #32]
 8015322:	b130      	cbz	r0, 8015332 <rcl_wait_set_resize+0x132>
 8015324:	4641      	mov	r1, r8
 8015326:	47c8      	blx	r9
 8015328:	f8d4 a030 	ldr.w	sl, [r4, #48]	@ 0x30
 801532c:	2300      	movs	r3, #0
 801532e:	e9ca 3307 	strd	r3, r3, [sl, #28]
 8015332:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8015334:	f8da 7058 	ldr.w	r7, [sl, #88]	@ 0x58
 8015338:	2600      	movs	r6, #0
 801533a:	e9da 8913 	ldrd	r8, r9, [sl, #76]	@ 0x4c
 801533e:	6266      	str	r6, [r4, #36]	@ 0x24
 8015340:	f8ca 6024 	str.w	r6, [sl, #36]	@ 0x24
 8015344:	2b00      	cmp	r3, #0
 8015346:	f000 80c8 	beq.w	80154da <rcl_wait_set_resize+0x2da>
 801534a:	ea4f 0a83 	mov.w	sl, r3, lsl #2
 801534e:	6a20      	ldr	r0, [r4, #32]
 8015350:	4651      	mov	r1, sl
 8015352:	463a      	mov	r2, r7
 8015354:	47c8      	blx	r9
 8015356:	6220      	str	r0, [r4, #32]
 8015358:	2800      	cmp	r0, #0
 801535a:	d051      	beq.n	8015400 <rcl_wait_set_resize+0x200>
 801535c:	4652      	mov	r2, sl
 801535e:	4631      	mov	r1, r6
 8015360:	f004 fc50 	bl	8019c04 <memset>
 8015364:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 8015366:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8015368:	6263      	str	r3, [r4, #36]	@ 0x24
 801536a:	6ae8      	ldr	r0, [r5, #44]	@ 0x2c
 801536c:	62ae      	str	r6, [r5, #40]	@ 0x28
 801536e:	463a      	mov	r2, r7
 8015370:	4651      	mov	r1, sl
 8015372:	47c8      	blx	r9
 8015374:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8015376:	62e8      	str	r0, [r5, #44]	@ 0x2c
 8015378:	6add      	ldr	r5, [r3, #44]	@ 0x2c
 801537a:	2d00      	cmp	r5, #0
 801537c:	f000 8105 	beq.w	801558a <rcl_wait_set_resize+0x38a>
 8015380:	4652      	mov	r2, sl
 8015382:	4631      	mov	r1, r6
 8015384:	4628      	mov	r0, r5
 8015386:	f004 fc3d 	bl	8019c04 <memset>
 801538a:	f8d4 a030 	ldr.w	sl, [r4, #48]	@ 0x30
 801538e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8015390:	f8da 6058 	ldr.w	r6, [sl, #88]	@ 0x58
 8015394:	2500      	movs	r5, #0
 8015396:	e9da 7913 	ldrd	r7, r9, [sl, #76]	@ 0x4c
 801539a:	62e5      	str	r5, [r4, #44]	@ 0x2c
 801539c:	f8ca 5030 	str.w	r5, [sl, #48]	@ 0x30
 80153a0:	2b00      	cmp	r3, #0
 80153a2:	f040 80af 	bne.w	8015504 <rcl_wait_set_resize+0x304>
 80153a6:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 80153a8:	b128      	cbz	r0, 80153b6 <rcl_wait_set_resize+0x1b6>
 80153aa:	4631      	mov	r1, r6
 80153ac:	47b8      	blx	r7
 80153ae:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80153b0:	f8d4 a030 	ldr.w	sl, [r4, #48]	@ 0x30
 80153b4:	62a3      	str	r3, [r4, #40]	@ 0x28
 80153b6:	f8da 0038 	ldr.w	r0, [sl, #56]	@ 0x38
 80153ba:	b310      	cbz	r0, 8015402 <rcl_wait_set_resize+0x202>
 80153bc:	4631      	mov	r1, r6
 80153be:	47b8      	blx	r7
 80153c0:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80153c2:	2000      	movs	r0, #0
 80153c4:	e9c3 000d 	strd	r0, r0, [r3, #52]	@ 0x34
 80153c8:	b003      	add	sp, #12
 80153ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80153ce:	6800      	ldr	r0, [r0, #0]
 80153d0:	b120      	cbz	r0, 80153dc <rcl_wait_set_resize+0x1dc>
 80153d2:	4649      	mov	r1, r9
 80153d4:	47d8      	blx	fp
 80153d6:	f8d4 a030 	ldr.w	sl, [r4, #48]	@ 0x30
 80153da:	6027      	str	r7, [r4, #0]
 80153dc:	f8da 0008 	ldr.w	r0, [sl, #8]
 80153e0:	2800      	cmp	r0, #0
 80153e2:	f43f af51 	beq.w	8015288 <rcl_wait_set_resize+0x88>
 80153e6:	4649      	mov	r1, r9
 80153e8:	47d8      	blx	fp
 80153ea:	f8d4 a030 	ldr.w	sl, [r4, #48]	@ 0x30
 80153ee:	2300      	movs	r3, #0
 80153f0:	e9ca 3301 	strd	r3, r3, [sl, #4]
 80153f4:	e748      	b.n	8015288 <rcl_wait_set_resize+0x88>
 80153f6:	6820      	ldr	r0, [r4, #0]
 80153f8:	4649      	mov	r1, r9
 80153fa:	47d8      	blx	fp
 80153fc:	e9c4 7700 	strd	r7, r7, [r4]
 8015400:	200a      	movs	r0, #10
 8015402:	b003      	add	sp, #12
 8015404:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015408:	ea4f 0985 	mov.w	r9, r5, lsl #2
 801540c:	68a0      	ldr	r0, [r4, #8]
 801540e:	4642      	mov	r2, r8
 8015410:	4649      	mov	r1, r9
 8015412:	4798      	blx	r3
 8015414:	60a0      	str	r0, [r4, #8]
 8015416:	2800      	cmp	r0, #0
 8015418:	d0f2      	beq.n	8015400 <rcl_wait_set_resize+0x200>
 801541a:	4639      	mov	r1, r7
 801541c:	464a      	mov	r2, r9
 801541e:	f004 fbf1 	bl	8019c04 <memset>
 8015422:	f8d4 a030 	ldr.w	sl, [r4, #48]	@ 0x30
 8015426:	60e5      	str	r5, [r4, #12]
 8015428:	2700      	movs	r7, #0
 801542a:	19ad      	adds	r5, r5, r6
 801542c:	f8da 8058 	ldr.w	r8, [sl, #88]	@ 0x58
 8015430:	f8ca 7010 	str.w	r7, [sl, #16]
 8015434:	f43f af42 	beq.w	80152bc <rcl_wait_set_resize+0xbc>
 8015438:	00ad      	lsls	r5, r5, #2
 801543a:	4642      	mov	r2, r8
 801543c:	f8da 3050 	ldr.w	r3, [sl, #80]	@ 0x50
 8015440:	f8da 0014 	ldr.w	r0, [sl, #20]
 8015444:	4629      	mov	r1, r5
 8015446:	4798      	blx	r3
 8015448:	4680      	mov	r8, r0
 801544a:	f8ca 0014 	str.w	r0, [sl, #20]
 801544e:	2800      	cmp	r0, #0
 8015450:	f000 8084 	beq.w	801555c <rcl_wait_set_resize+0x35c>
 8015454:	462a      	mov	r2, r5
 8015456:	4639      	mov	r1, r7
 8015458:	f004 fbd4 	bl	8019c04 <memset>
 801545c:	f8d4 a030 	ldr.w	sl, [r4, #48]	@ 0x30
 8015460:	f8da 8058 	ldr.w	r8, [sl, #88]	@ 0x58
 8015464:	e737      	b.n	80152d6 <rcl_wait_set_resize+0xd6>
 8015466:	ea4f 0986 	mov.w	r9, r6, lsl #2
 801546a:	6920      	ldr	r0, [r4, #16]
 801546c:	4642      	mov	r2, r8
 801546e:	4649      	mov	r1, r9
 8015470:	47b8      	blx	r7
 8015472:	6120      	str	r0, [r4, #16]
 8015474:	2800      	cmp	r0, #0
 8015476:	d0c3      	beq.n	8015400 <rcl_wait_set_resize+0x200>
 8015478:	464a      	mov	r2, r9
 801547a:	4629      	mov	r1, r5
 801547c:	f004 fbc2 	bl	8019c04 <memset>
 8015480:	f8d4 a030 	ldr.w	sl, [r4, #48]	@ 0x30
 8015484:	6166      	str	r6, [r4, #20]
 8015486:	e9da 9713 	ldrd	r9, r7, [sl, #76]	@ 0x4c
 801548a:	f8da 8058 	ldr.w	r8, [sl, #88]	@ 0x58
 801548e:	e736      	b.n	80152fe <rcl_wait_set_resize+0xfe>
 8015490:	009e      	lsls	r6, r3, #2
 8015492:	69a0      	ldr	r0, [r4, #24]
 8015494:	4631      	mov	r1, r6
 8015496:	4642      	mov	r2, r8
 8015498:	47b8      	blx	r7
 801549a:	61a0      	str	r0, [r4, #24]
 801549c:	2800      	cmp	r0, #0
 801549e:	d0af      	beq.n	8015400 <rcl_wait_set_resize+0x200>
 80154a0:	4632      	mov	r2, r6
 80154a2:	4629      	mov	r1, r5
 80154a4:	f004 fbae 	bl	8019c04 <memset>
 80154a8:	f8d4 a030 	ldr.w	sl, [r4, #48]	@ 0x30
 80154ac:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80154ae:	61e3      	str	r3, [r4, #28]
 80154b0:	f8da 0020 	ldr.w	r0, [sl, #32]
 80154b4:	f8ca 501c 	str.w	r5, [sl, #28]
 80154b8:	4642      	mov	r2, r8
 80154ba:	4631      	mov	r1, r6
 80154bc:	47b8      	blx	r7
 80154be:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80154c0:	f8ca 0020 	str.w	r0, [sl, #32]
 80154c4:	6a1f      	ldr	r7, [r3, #32]
 80154c6:	2f00      	cmp	r7, #0
 80154c8:	d058      	beq.n	801557c <rcl_wait_set_resize+0x37c>
 80154ca:	4632      	mov	r2, r6
 80154cc:	4629      	mov	r1, r5
 80154ce:	4638      	mov	r0, r7
 80154d0:	f004 fb98 	bl	8019c04 <memset>
 80154d4:	f8d4 a030 	ldr.w	sl, [r4, #48]	@ 0x30
 80154d8:	e72b      	b.n	8015332 <rcl_wait_set_resize+0x132>
 80154da:	6a20      	ldr	r0, [r4, #32]
 80154dc:	b128      	cbz	r0, 80154ea <rcl_wait_set_resize+0x2ea>
 80154de:	4639      	mov	r1, r7
 80154e0:	47c0      	blx	r8
 80154e2:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80154e4:	f8d4 a030 	ldr.w	sl, [r4, #48]	@ 0x30
 80154e8:	6223      	str	r3, [r4, #32]
 80154ea:	f8da 002c 	ldr.w	r0, [sl, #44]	@ 0x2c
 80154ee:	2800      	cmp	r0, #0
 80154f0:	f43f af4d 	beq.w	801538e <rcl_wait_set_resize+0x18e>
 80154f4:	4639      	mov	r1, r7
 80154f6:	47c0      	blx	r8
 80154f8:	f8d4 a030 	ldr.w	sl, [r4, #48]	@ 0x30
 80154fc:	2300      	movs	r3, #0
 80154fe:	e9ca 330a 	strd	r3, r3, [sl, #40]	@ 0x28
 8015502:	e744      	b.n	801538e <rcl_wait_set_resize+0x18e>
 8015504:	ea4f 0883 	mov.w	r8, r3, lsl #2
 8015508:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 801550a:	4641      	mov	r1, r8
 801550c:	4632      	mov	r2, r6
 801550e:	47c8      	blx	r9
 8015510:	62a0      	str	r0, [r4, #40]	@ 0x28
 8015512:	2800      	cmp	r0, #0
 8015514:	f43f af74 	beq.w	8015400 <rcl_wait_set_resize+0x200>
 8015518:	4642      	mov	r2, r8
 801551a:	4629      	mov	r1, r5
 801551c:	f004 fb72 	bl	8019c04 <memset>
 8015520:	f8d4 a030 	ldr.w	sl, [r4, #48]	@ 0x30
 8015524:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8015526:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8015528:	f8da 0038 	ldr.w	r0, [sl, #56]	@ 0x38
 801552c:	f8ca 5034 	str.w	r5, [sl, #52]	@ 0x34
 8015530:	4632      	mov	r2, r6
 8015532:	4641      	mov	r1, r8
 8015534:	47c8      	blx	r9
 8015536:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8015538:	f8ca 0038 	str.w	r0, [sl, #56]	@ 0x38
 801553c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801553e:	b35b      	cbz	r3, 8015598 <rcl_wait_set_resize+0x398>
 8015540:	4642      	mov	r2, r8
 8015542:	4618      	mov	r0, r3
 8015544:	4629      	mov	r1, r5
 8015546:	f004 fb5d 	bl	8019c04 <memset>
 801554a:	4628      	mov	r0, r5
 801554c:	b003      	add	sp, #12
 801554e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015552:	200b      	movs	r0, #11
 8015554:	4770      	bx	lr
 8015556:	f44f 7061 	mov.w	r0, #900	@ 0x384
 801555a:	e752      	b.n	8015402 <rcl_wait_set_resize+0x202>
 801555c:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801555e:	68a0      	ldr	r0, [r4, #8]
 8015560:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8015562:	6d99      	ldr	r1, [r3, #88]	@ 0x58
 8015564:	4790      	blx	r2
 8015566:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8015568:	6920      	ldr	r0, [r4, #16]
 801556a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 801556c:	6d99      	ldr	r1, [r3, #88]	@ 0x58
 801556e:	e9c4 8802 	strd	r8, r8, [r4, #8]
 8015572:	4790      	blx	r2
 8015574:	e9c4 8804 	strd	r8, r8, [r4, #16]
 8015578:	200a      	movs	r0, #10
 801557a:	e742      	b.n	8015402 <rcl_wait_set_resize+0x202>
 801557c:	69a0      	ldr	r0, [r4, #24]
 801557e:	4641      	mov	r1, r8
 8015580:	47c8      	blx	r9
 8015582:	e9c4 7706 	strd	r7, r7, [r4, #24]
 8015586:	200a      	movs	r0, #10
 8015588:	e73b      	b.n	8015402 <rcl_wait_set_resize+0x202>
 801558a:	6a20      	ldr	r0, [r4, #32]
 801558c:	4639      	mov	r1, r7
 801558e:	47c0      	blx	r8
 8015590:	e9c4 5508 	strd	r5, r5, [r4, #32]
 8015594:	200a      	movs	r0, #10
 8015596:	e734      	b.n	8015402 <rcl_wait_set_resize+0x202>
 8015598:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 801559a:	9300      	str	r3, [sp, #0]
 801559c:	4631      	mov	r1, r6
 801559e:	47b8      	blx	r7
 80155a0:	9b00      	ldr	r3, [sp, #0]
 80155a2:	200a      	movs	r0, #10
 80155a4:	e9c4 330a 	strd	r3, r3, [r4, #40]	@ 0x28
 80155a8:	e72b      	b.n	8015402 <rcl_wait_set_resize+0x202>
 80155aa:	bf00      	nop

080155ac <rcl_wait_set_init>:
 80155ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80155b0:	b084      	sub	sp, #16
 80155b2:	4604      	mov	r4, r0
 80155b4:	a810      	add	r0, sp, #64	@ 0x40
 80155b6:	f8dd a03c 	ldr.w	sl, [sp, #60]	@ 0x3c
 80155ba:	460f      	mov	r7, r1
 80155bc:	4690      	mov	r8, r2
 80155be:	4699      	mov	r9, r3
 80155c0:	f7f8 fd3a 	bl	800e038 <rcutils_allocator_is_valid>
 80155c4:	2800      	cmp	r0, #0
 80155c6:	d06b      	beq.n	80156a0 <rcl_wait_set_init+0xf4>
 80155c8:	2c00      	cmp	r4, #0
 80155ca:	d069      	beq.n	80156a0 <rcl_wait_set_init+0xf4>
 80155cc:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 80155ce:	b125      	cbz	r5, 80155da <rcl_wait_set_init+0x2e>
 80155d0:	2564      	movs	r5, #100	@ 0x64
 80155d2:	4628      	mov	r0, r5
 80155d4:	b004      	add	sp, #16
 80155d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80155da:	f1ba 0f00 	cmp.w	sl, #0
 80155de:	d05f      	beq.n	80156a0 <rcl_wait_set_init+0xf4>
 80155e0:	4650      	mov	r0, sl
 80155e2:	f7fd fed7 	bl	8013394 <rcl_context_is_valid>
 80155e6:	2800      	cmp	r0, #0
 80155e8:	d067      	beq.n	80156ba <rcl_wait_set_init+0x10e>
 80155ea:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80155ec:	9914      	ldr	r1, [sp, #80]	@ 0x50
 80155ee:	205c      	movs	r0, #92	@ 0x5c
 80155f0:	4798      	blx	r3
 80155f2:	6320      	str	r0, [r4, #48]	@ 0x30
 80155f4:	2800      	cmp	r0, #0
 80155f6:	d062      	beq.n	80156be <rcl_wait_set_init+0x112>
 80155f8:	225c      	movs	r2, #92	@ 0x5c
 80155fa:	4629      	mov	r1, r5
 80155fc:	f004 fb02 	bl	8019c04 <memset>
 8015600:	f10d 0c40 	add.w	ip, sp, #64	@ 0x40
 8015604:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8015608:	6b26      	ldr	r6, [r4, #48]	@ 0x30
 801560a:	f8dc e000 	ldr.w	lr, [ip]
 801560e:	f8c6 a044 	str.w	sl, [r6, #68]	@ 0x44
 8015612:	f106 0c48 	add.w	ip, r6, #72	@ 0x48
 8015616:	e9c6 5504 	strd	r5, r5, [r6, #16]
 801561a:	e9c6 5507 	strd	r5, r5, [r6, #28]
 801561e:	e9c6 550a 	strd	r5, r5, [r6, #40]	@ 0x28
 8015622:	e9c6 550d 	strd	r5, r5, [r6, #52]	@ 0x34
 8015626:	60b5      	str	r5, [r6, #8]
 8015628:	6075      	str	r5, [r6, #4]
 801562a:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801562e:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	@ 0x34
 8015632:	1899      	adds	r1, r3, r2
 8015634:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8015636:	f8da 0000 	ldr.w	r0, [sl]
 801563a:	f8cc e000 	str.w	lr, [ip]
 801563e:	4419      	add	r1, r3
 8015640:	4441      	add	r1, r8
 8015642:	3028      	adds	r0, #40	@ 0x28
 8015644:	eb01 0147 	add.w	r1, r1, r7, lsl #1
 8015648:	f001 fe3c 	bl	80172c4 <rmw_create_wait_set>
 801564c:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801564e:	63f0      	str	r0, [r6, #60]	@ 0x3c
 8015650:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 8015652:	b350      	cbz	r0, 80156aa <rcl_wait_set_init+0xfe>
 8015654:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8015656:	9302      	str	r3, [sp, #8]
 8015658:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801565a:	9301      	str	r3, [sp, #4]
 801565c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801565e:	9300      	str	r3, [sp, #0]
 8015660:	4642      	mov	r2, r8
 8015662:	464b      	mov	r3, r9
 8015664:	4639      	mov	r1, r7
 8015666:	4620      	mov	r0, r4
 8015668:	f7ff fdca 	bl	8015200 <rcl_wait_set_resize>
 801566c:	4605      	mov	r5, r0
 801566e:	2800      	cmp	r0, #0
 8015670:	d0af      	beq.n	80155d2 <rcl_wait_set_init+0x26>
 8015672:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8015674:	bb2b      	cbnz	r3, 80156c2 <rcl_wait_set_init+0x116>
 8015676:	2600      	movs	r6, #0
 8015678:	e9cd 6601 	strd	r6, r6, [sp, #4]
 801567c:	9600      	str	r6, [sp, #0]
 801567e:	4633      	mov	r3, r6
 8015680:	4632      	mov	r2, r6
 8015682:	4631      	mov	r1, r6
 8015684:	4620      	mov	r0, r4
 8015686:	f7ff fdbb 	bl	8015200 <rcl_wait_set_resize>
 801568a:	6b20      	ldr	r0, [r4, #48]	@ 0x30
 801568c:	2800      	cmp	r0, #0
 801568e:	d0a0      	beq.n	80155d2 <rcl_wait_set_init+0x26>
 8015690:	6cc3      	ldr	r3, [r0, #76]	@ 0x4c
 8015692:	6d81      	ldr	r1, [r0, #88]	@ 0x58
 8015694:	4798      	blx	r3
 8015696:	4628      	mov	r0, r5
 8015698:	6326      	str	r6, [r4, #48]	@ 0x30
 801569a:	b004      	add	sp, #16
 801569c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80156a0:	250b      	movs	r5, #11
 80156a2:	4628      	mov	r0, r5
 80156a4:	b004      	add	sp, #16
 80156a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80156aa:	2501      	movs	r5, #1
 80156ac:	f001 fe14 	bl	80172d8 <rmw_destroy_wait_set>
 80156b0:	2800      	cmp	r0, #0
 80156b2:	bf18      	it	ne
 80156b4:	f44f 7561 	movne.w	r5, #900	@ 0x384
 80156b8:	e7dd      	b.n	8015676 <rcl_wait_set_init+0xca>
 80156ba:	2565      	movs	r5, #101	@ 0x65
 80156bc:	e789      	b.n	80155d2 <rcl_wait_set_init+0x26>
 80156be:	250a      	movs	r5, #10
 80156c0:	e787      	b.n	80155d2 <rcl_wait_set_init+0x26>
 80156c2:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 80156c4:	e7f2      	b.n	80156ac <rcl_wait_set_init+0x100>
 80156c6:	bf00      	nop

080156c8 <rcl_wait_set_add_guard_condition>:
 80156c8:	b320      	cbz	r0, 8015714 <rcl_wait_set_add_guard_condition+0x4c>
 80156ca:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 80156cc:	b570      	push	{r4, r5, r6, lr}
 80156ce:	4604      	mov	r4, r0
 80156d0:	b1d3      	cbz	r3, 8015708 <rcl_wait_set_add_guard_condition+0x40>
 80156d2:	b319      	cbz	r1, 801571c <rcl_wait_set_add_guard_condition+0x54>
 80156d4:	68dd      	ldr	r5, [r3, #12]
 80156d6:	68e0      	ldr	r0, [r4, #12]
 80156d8:	4285      	cmp	r5, r0
 80156da:	d218      	bcs.n	801570e <rcl_wait_set_add_guard_condition+0x46>
 80156dc:	68a0      	ldr	r0, [r4, #8]
 80156de:	1c6e      	adds	r6, r5, #1
 80156e0:	60de      	str	r6, [r3, #12]
 80156e2:	f840 1025 	str.w	r1, [r0, r5, lsl #2]
 80156e6:	b102      	cbz	r2, 80156ea <rcl_wait_set_add_guard_condition+0x22>
 80156e8:	6015      	str	r5, [r2, #0]
 80156ea:	4608      	mov	r0, r1
 80156ec:	f003 fd8e 	bl	801920c <rcl_guard_condition_get_rmw_handle>
 80156f0:	b190      	cbz	r0, 8015718 <rcl_wait_set_add_guard_condition+0x50>
 80156f2:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80156f4:	6842      	ldr	r2, [r0, #4]
 80156f6:	695b      	ldr	r3, [r3, #20]
 80156f8:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80156fc:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 80156fe:	6913      	ldr	r3, [r2, #16]
 8015700:	3301      	adds	r3, #1
 8015702:	6113      	str	r3, [r2, #16]
 8015704:	2000      	movs	r0, #0
 8015706:	bd70      	pop	{r4, r5, r6, pc}
 8015708:	f44f 7061 	mov.w	r0, #900	@ 0x384
 801570c:	bd70      	pop	{r4, r5, r6, pc}
 801570e:	f240 3086 	movw	r0, #902	@ 0x386
 8015712:	bd70      	pop	{r4, r5, r6, pc}
 8015714:	200b      	movs	r0, #11
 8015716:	4770      	bx	lr
 8015718:	2001      	movs	r0, #1
 801571a:	bd70      	pop	{r4, r5, r6, pc}
 801571c:	200b      	movs	r0, #11
 801571e:	bd70      	pop	{r4, r5, r6, pc}

08015720 <rcl_wait_set_add_timer>:
 8015720:	b340      	cbz	r0, 8015774 <rcl_wait_set_add_timer+0x54>
 8015722:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8015724:	b570      	push	{r4, r5, r6, lr}
 8015726:	4604      	mov	r4, r0
 8015728:	b1f3      	cbz	r3, 8015768 <rcl_wait_set_add_timer+0x48>
 801572a:	b329      	cbz	r1, 8015778 <rcl_wait_set_add_timer+0x58>
 801572c:	6c18      	ldr	r0, [r3, #64]	@ 0x40
 801572e:	6965      	ldr	r5, [r4, #20]
 8015730:	42a8      	cmp	r0, r5
 8015732:	d21c      	bcs.n	801576e <rcl_wait_set_add_timer+0x4e>
 8015734:	6925      	ldr	r5, [r4, #16]
 8015736:	1c46      	adds	r6, r0, #1
 8015738:	641e      	str	r6, [r3, #64]	@ 0x40
 801573a:	f845 1020 	str.w	r1, [r5, r0, lsl #2]
 801573e:	b102      	cbz	r2, 8015742 <rcl_wait_set_add_timer+0x22>
 8015740:	6010      	str	r0, [r2, #0]
 8015742:	4608      	mov	r0, r1
 8015744:	f7ff faa4 	bl	8014c90 <rcl_timer_get_guard_condition>
 8015748:	b168      	cbz	r0, 8015766 <rcl_wait_set_add_timer+0x46>
 801574a:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 801574c:	68e3      	ldr	r3, [r4, #12]
 801574e:	6c15      	ldr	r5, [r2, #64]	@ 0x40
 8015750:	3b01      	subs	r3, #1
 8015752:	441d      	add	r5, r3
 8015754:	f003 fd5a 	bl	801920c <rcl_guard_condition_get_rmw_handle>
 8015758:	b180      	cbz	r0, 801577c <rcl_wait_set_add_timer+0x5c>
 801575a:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801575c:	6842      	ldr	r2, [r0, #4]
 801575e:	695b      	ldr	r3, [r3, #20]
 8015760:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8015764:	2000      	movs	r0, #0
 8015766:	bd70      	pop	{r4, r5, r6, pc}
 8015768:	f44f 7061 	mov.w	r0, #900	@ 0x384
 801576c:	bd70      	pop	{r4, r5, r6, pc}
 801576e:	f240 3086 	movw	r0, #902	@ 0x386
 8015772:	bd70      	pop	{r4, r5, r6, pc}
 8015774:	200b      	movs	r0, #11
 8015776:	4770      	bx	lr
 8015778:	200b      	movs	r0, #11
 801577a:	bd70      	pop	{r4, r5, r6, pc}
 801577c:	2001      	movs	r0, #1
 801577e:	bd70      	pop	{r4, r5, r6, pc}

08015780 <rcl_wait_set_add_client>:
 8015780:	b320      	cbz	r0, 80157cc <rcl_wait_set_add_client+0x4c>
 8015782:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8015784:	b570      	push	{r4, r5, r6, lr}
 8015786:	4604      	mov	r4, r0
 8015788:	b1d3      	cbz	r3, 80157c0 <rcl_wait_set_add_client+0x40>
 801578a:	b319      	cbz	r1, 80157d4 <rcl_wait_set_add_client+0x54>
 801578c:	699d      	ldr	r5, [r3, #24]
 801578e:	69e0      	ldr	r0, [r4, #28]
 8015790:	4285      	cmp	r5, r0
 8015792:	d218      	bcs.n	80157c6 <rcl_wait_set_add_client+0x46>
 8015794:	69a0      	ldr	r0, [r4, #24]
 8015796:	1c6e      	adds	r6, r5, #1
 8015798:	619e      	str	r6, [r3, #24]
 801579a:	f840 1025 	str.w	r1, [r0, r5, lsl #2]
 801579e:	b102      	cbz	r2, 80157a2 <rcl_wait_set_add_client+0x22>
 80157a0:	6015      	str	r5, [r2, #0]
 80157a2:	4608      	mov	r0, r1
 80157a4:	f7fd fd96 	bl	80132d4 <rcl_client_get_rmw_handle>
 80157a8:	b190      	cbz	r0, 80157d0 <rcl_wait_set_add_client+0x50>
 80157aa:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80157ac:	6842      	ldr	r2, [r0, #4]
 80157ae:	6a1b      	ldr	r3, [r3, #32]
 80157b0:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80157b4:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 80157b6:	69d3      	ldr	r3, [r2, #28]
 80157b8:	3301      	adds	r3, #1
 80157ba:	61d3      	str	r3, [r2, #28]
 80157bc:	2000      	movs	r0, #0
 80157be:	bd70      	pop	{r4, r5, r6, pc}
 80157c0:	f44f 7061 	mov.w	r0, #900	@ 0x384
 80157c4:	bd70      	pop	{r4, r5, r6, pc}
 80157c6:	f240 3086 	movw	r0, #902	@ 0x386
 80157ca:	bd70      	pop	{r4, r5, r6, pc}
 80157cc:	200b      	movs	r0, #11
 80157ce:	4770      	bx	lr
 80157d0:	2001      	movs	r0, #1
 80157d2:	bd70      	pop	{r4, r5, r6, pc}
 80157d4:	200b      	movs	r0, #11
 80157d6:	bd70      	pop	{r4, r5, r6, pc}

080157d8 <rcl_wait_set_add_service>:
 80157d8:	b320      	cbz	r0, 8015824 <rcl_wait_set_add_service+0x4c>
 80157da:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 80157dc:	b570      	push	{r4, r5, r6, lr}
 80157de:	4604      	mov	r4, r0
 80157e0:	b1d3      	cbz	r3, 8015818 <rcl_wait_set_add_service+0x40>
 80157e2:	b319      	cbz	r1, 801582c <rcl_wait_set_add_service+0x54>
 80157e4:	6a5d      	ldr	r5, [r3, #36]	@ 0x24
 80157e6:	6a60      	ldr	r0, [r4, #36]	@ 0x24
 80157e8:	4285      	cmp	r5, r0
 80157ea:	d218      	bcs.n	801581e <rcl_wait_set_add_service+0x46>
 80157ec:	6a20      	ldr	r0, [r4, #32]
 80157ee:	1c6e      	adds	r6, r5, #1
 80157f0:	625e      	str	r6, [r3, #36]	@ 0x24
 80157f2:	f840 1025 	str.w	r1, [r0, r5, lsl #2]
 80157f6:	b102      	cbz	r2, 80157fa <rcl_wait_set_add_service+0x22>
 80157f8:	6015      	str	r5, [r2, #0]
 80157fa:	4608      	mov	r0, r1
 80157fc:	f7fe fcba 	bl	8014174 <rcl_service_get_rmw_handle>
 8015800:	b190      	cbz	r0, 8015828 <rcl_wait_set_add_service+0x50>
 8015802:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8015804:	6842      	ldr	r2, [r0, #4]
 8015806:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8015808:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 801580c:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 801580e:	6a93      	ldr	r3, [r2, #40]	@ 0x28
 8015810:	3301      	adds	r3, #1
 8015812:	6293      	str	r3, [r2, #40]	@ 0x28
 8015814:	2000      	movs	r0, #0
 8015816:	bd70      	pop	{r4, r5, r6, pc}
 8015818:	f44f 7061 	mov.w	r0, #900	@ 0x384
 801581c:	bd70      	pop	{r4, r5, r6, pc}
 801581e:	f240 3086 	movw	r0, #902	@ 0x386
 8015822:	bd70      	pop	{r4, r5, r6, pc}
 8015824:	200b      	movs	r0, #11
 8015826:	4770      	bx	lr
 8015828:	2001      	movs	r0, #1
 801582a:	bd70      	pop	{r4, r5, r6, pc}
 801582c:	200b      	movs	r0, #11
 801582e:	bd70      	pop	{r4, r5, r6, pc}

08015830 <rcl_wait>:
 8015830:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015834:	b08f      	sub	sp, #60	@ 0x3c
 8015836:	e9cd 2304 	strd	r2, r3, [sp, #16]
 801583a:	2800      	cmp	r0, #0
 801583c:	f000 814c 	beq.w	8015ad8 <rcl_wait+0x2a8>
 8015840:	6b05      	ldr	r5, [r0, #48]	@ 0x30
 8015842:	4604      	mov	r4, r0
 8015844:	2d00      	cmp	r5, #0
 8015846:	f000 80bc 	beq.w	80159c2 <rcl_wait+0x192>
 801584a:	6843      	ldr	r3, [r0, #4]
 801584c:	b973      	cbnz	r3, 801586c <rcl_wait+0x3c>
 801584e:	68e3      	ldr	r3, [r4, #12]
 8015850:	b963      	cbnz	r3, 801586c <rcl_wait+0x3c>
 8015852:	6963      	ldr	r3, [r4, #20]
 8015854:	b953      	cbnz	r3, 801586c <rcl_wait+0x3c>
 8015856:	69e3      	ldr	r3, [r4, #28]
 8015858:	b943      	cbnz	r3, 801586c <rcl_wait+0x3c>
 801585a:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 801585c:	b933      	cbnz	r3, 801586c <rcl_wait+0x3c>
 801585e:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8015860:	b923      	cbnz	r3, 801586c <rcl_wait+0x3c>
 8015862:	f240 3085 	movw	r0, #901	@ 0x385
 8015866:	b00f      	add	sp, #60	@ 0x3c
 8015868:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801586c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8015870:	2a01      	cmp	r2, #1
 8015872:	f173 0300 	sbcs.w	r3, r3, #0
 8015876:	6c29      	ldr	r1, [r5, #64]	@ 0x40
 8015878:	db56      	blt.n	8015928 <rcl_wait+0xf8>
 801587a:	e9dd 6704 	ldrd	r6, r7, [sp, #16]
 801587e:	2900      	cmp	r1, #0
 8015880:	f000 8149 	beq.w	8015b16 <rcl_wait+0x2e6>
 8015884:	2300      	movs	r3, #0
 8015886:	9307      	str	r3, [sp, #28]
 8015888:	469b      	mov	fp, r3
 801588a:	f04f 0800 	mov.w	r8, #0
 801588e:	f04f 0900 	mov.w	r9, #0
 8015892:	e00d      	b.n	80158b0 <rcl_wait+0x80>
 8015894:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 8015896:	6922      	ldr	r2, [r4, #16]
 8015898:	6c29      	ldr	r1, [r5, #64]	@ 0x40
 801589a:	f842 000a 	str.w	r0, [r2, sl]
 801589e:	f118 0801 	adds.w	r8, r8, #1
 80158a2:	f149 0900 	adc.w	r9, r9, #0
 80158a6:	2300      	movs	r3, #0
 80158a8:	4599      	cmp	r9, r3
 80158aa:	bf08      	it	eq
 80158ac:	4588      	cmpeq	r8, r1
 80158ae:	d243      	bcs.n	8015938 <rcl_wait+0x108>
 80158b0:	6922      	ldr	r2, [r4, #16]
 80158b2:	ea4f 0a88 	mov.w	sl, r8, lsl #2
 80158b6:	f852 000a 	ldr.w	r0, [r2, sl]
 80158ba:	2800      	cmp	r0, #0
 80158bc:	d0ef      	beq.n	801589e <rcl_wait+0x6e>
 80158be:	68e2      	ldr	r2, [r4, #12]
 80158c0:	6969      	ldr	r1, [r5, #20]
 80158c2:	4442      	add	r2, r8
 80158c4:	f851 3022 	ldr.w	r3, [r1, r2, lsl #2]
 80158c8:	b13b      	cbz	r3, 80158da <rcl_wait+0xaa>
 80158ca:	692a      	ldr	r2, [r5, #16]
 80158cc:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 80158d0:	6921      	ldr	r1, [r4, #16]
 80158d2:	3201      	adds	r2, #1
 80158d4:	f851 000a 	ldr.w	r0, [r1, sl]
 80158d8:	612a      	str	r2, [r5, #16]
 80158da:	f10d 0127 	add.w	r1, sp, #39	@ 0x27
 80158de:	f88d b027 	strb.w	fp, [sp, #39]	@ 0x27
 80158e2:	f7ff f9c3 	bl	8014c6c <rcl_timer_is_canceled>
 80158e6:	2800      	cmp	r0, #0
 80158e8:	d1bd      	bne.n	8015866 <rcl_wait+0x36>
 80158ea:	f89d 2027 	ldrb.w	r2, [sp, #39]	@ 0x27
 80158ee:	2a00      	cmp	r2, #0
 80158f0:	d1d0      	bne.n	8015894 <rcl_wait+0x64>
 80158f2:	6922      	ldr	r2, [r4, #16]
 80158f4:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 80158f8:	f852 000a 	ldr.w	r0, [r2, sl]
 80158fc:	a90a      	add	r1, sp, #40	@ 0x28
 80158fe:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8015902:	e9cd 230a 	strd	r2, r3, [sp, #40]	@ 0x28
 8015906:	f7ff f98d 	bl	8014c24 <rcl_timer_get_time_until_next_call>
 801590a:	2800      	cmp	r0, #0
 801590c:	d1ab      	bne.n	8015866 <rcl_wait+0x36>
 801590e:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	@ 0x28
 8015912:	42b2      	cmp	r2, r6
 8015914:	eb73 0107 	sbcs.w	r1, r3, r7
 8015918:	da03      	bge.n	8015922 <rcl_wait+0xf2>
 801591a:	461f      	mov	r7, r3
 801591c:	2301      	movs	r3, #1
 801591e:	4616      	mov	r6, r2
 8015920:	9307      	str	r3, [sp, #28]
 8015922:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 8015924:	6c29      	ldr	r1, [r5, #64]	@ 0x40
 8015926:	e7ba      	b.n	801589e <rcl_wait+0x6e>
 8015928:	2900      	cmp	r1, #0
 801592a:	f000 80de 	beq.w	8015aea <rcl_wait+0x2ba>
 801592e:	f04f 36ff 	mov.w	r6, #4294967295	@ 0xffffffff
 8015932:	f06f 4700 	mvn.w	r7, #2147483648	@ 0x80000000
 8015936:	e7a5      	b.n	8015884 <rcl_wait+0x54>
 8015938:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801593c:	4313      	orrs	r3, r2
 801593e:	d145      	bne.n	80159cc <rcl_wait+0x19c>
 8015940:	2300      	movs	r3, #0
 8015942:	2200      	movs	r2, #0
 8015944:	e9cd 230a 	strd	r2, r3, [sp, #40]	@ 0x28
 8015948:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 801594c:	ab0a      	add	r3, sp, #40	@ 0x28
 801594e:	9302      	str	r3, [sp, #8]
 8015950:	6beb      	ldr	r3, [r5, #60]	@ 0x3c
 8015952:	9301      	str	r3, [sp, #4]
 8015954:	f105 0334 	add.w	r3, r5, #52	@ 0x34
 8015958:	9300      	str	r3, [sp, #0]
 801595a:	f105 0228 	add.w	r2, r5, #40	@ 0x28
 801595e:	f105 031c 	add.w	r3, r5, #28
 8015962:	f105 0110 	add.w	r1, r5, #16
 8015966:	1d28      	adds	r0, r5, #4
 8015968:	f001 fb2c 	bl	8016fc4 <rmw_wait>
 801596c:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801596e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8015970:	4680      	mov	r8, r0
 8015972:	b30a      	cbz	r2, 80159b8 <rcl_wait+0x188>
 8015974:	2500      	movs	r5, #0
 8015976:	462f      	mov	r7, r5
 8015978:	e004      	b.n	8015984 <rcl_wait+0x154>
 801597a:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801597c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 801597e:	3501      	adds	r5, #1
 8015980:	42aa      	cmp	r2, r5
 8015982:	d919      	bls.n	80159b8 <rcl_wait+0x188>
 8015984:	6922      	ldr	r2, [r4, #16]
 8015986:	f852 0025 	ldr.w	r0, [r2, r5, lsl #2]
 801598a:	f10d 0127 	add.w	r1, sp, #39	@ 0x27
 801598e:	00ae      	lsls	r6, r5, #2
 8015990:	2800      	cmp	r0, #0
 8015992:	d0f3      	beq.n	801597c <rcl_wait+0x14c>
 8015994:	f88d 7027 	strb.w	r7, [sp, #39]	@ 0x27
 8015998:	f7ff f90c 	bl	8014bb4 <rcl_timer_is_ready>
 801599c:	2800      	cmp	r0, #0
 801599e:	f47f af62 	bne.w	8015866 <rcl_wait+0x36>
 80159a2:	f89d 2027 	ldrb.w	r2, [sp, #39]	@ 0x27
 80159a6:	2a00      	cmp	r2, #0
 80159a8:	d1e7      	bne.n	801597a <rcl_wait+0x14a>
 80159aa:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80159ac:	6921      	ldr	r1, [r4, #16]
 80159ae:	518a      	str	r2, [r1, r6]
 80159b0:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80159b2:	3501      	adds	r5, #1
 80159b4:	42aa      	cmp	r2, r5
 80159b6:	d8e5      	bhi.n	8015984 <rcl_wait+0x154>
 80159b8:	f038 0002 	bics.w	r0, r8, #2
 80159bc:	d029      	beq.n	8015a12 <rcl_wait+0x1e2>
 80159be:	2001      	movs	r0, #1
 80159c0:	e751      	b.n	8015866 <rcl_wait+0x36>
 80159c2:	f44f 7061 	mov.w	r0, #900	@ 0x384
 80159c6:	b00f      	add	sp, #60	@ 0x3c
 80159c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80159cc:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80159d0:	2a01      	cmp	r2, #1
 80159d2:	f173 0300 	sbcs.w	r3, r3, #0
 80159d6:	f2c0 8083 	blt.w	8015ae0 <rcl_wait+0x2b0>
 80159da:	2e00      	cmp	r6, #0
 80159dc:	f177 0300 	sbcs.w	r3, r7, #0
 80159e0:	bfbc      	itt	lt
 80159e2:	2600      	movlt	r6, #0
 80159e4:	2700      	movlt	r7, #0
 80159e6:	a34e      	add	r3, pc, #312	@ (adr r3, 8015b20 <rcl_wait+0x2f0>)
 80159e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80159ec:	4630      	mov	r0, r6
 80159ee:	4639      	mov	r1, r7
 80159f0:	f7eb f91c 	bl	8000c2c <__aeabi_ldivmod>
 80159f4:	a34a      	add	r3, pc, #296	@ (adr r3, 8015b20 <rcl_wait+0x2f0>)
 80159f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80159fa:	4680      	mov	r8, r0
 80159fc:	4689      	mov	r9, r1
 80159fe:	4630      	mov	r0, r6
 8015a00:	4639      	mov	r1, r7
 8015a02:	e9cd 890a 	strd	r8, r9, [sp, #40]	@ 0x28
 8015a06:	f7eb f911 	bl	8000c2c <__aeabi_ldivmod>
 8015a0a:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 8015a0e:	ab0a      	add	r3, sp, #40	@ 0x28
 8015a10:	e79d      	b.n	801594e <rcl_wait+0x11e>
 8015a12:	6866      	ldr	r6, [r4, #4]
 8015a14:	4602      	mov	r2, r0
 8015a16:	b91e      	cbnz	r6, 8015a20 <rcl_wait+0x1f0>
 8015a18:	e00d      	b.n	8015a36 <rcl_wait+0x206>
 8015a1a:	3201      	adds	r2, #1
 8015a1c:	42b2      	cmp	r2, r6
 8015a1e:	d00a      	beq.n	8015a36 <rcl_wait+0x206>
 8015a20:	6899      	ldr	r1, [r3, #8]
 8015a22:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 8015a26:	2900      	cmp	r1, #0
 8015a28:	d1f7      	bne.n	8015a1a <rcl_wait+0x1ea>
 8015a2a:	6825      	ldr	r5, [r4, #0]
 8015a2c:	f845 1022 	str.w	r1, [r5, r2, lsl #2]
 8015a30:	3201      	adds	r2, #1
 8015a32:	42b2      	cmp	r2, r6
 8015a34:	d1f4      	bne.n	8015a20 <rcl_wait+0x1f0>
 8015a36:	68e6      	ldr	r6, [r4, #12]
 8015a38:	2200      	movs	r2, #0
 8015a3a:	b91e      	cbnz	r6, 8015a44 <rcl_wait+0x214>
 8015a3c:	e00d      	b.n	8015a5a <rcl_wait+0x22a>
 8015a3e:	3201      	adds	r2, #1
 8015a40:	42b2      	cmp	r2, r6
 8015a42:	d00a      	beq.n	8015a5a <rcl_wait+0x22a>
 8015a44:	6959      	ldr	r1, [r3, #20]
 8015a46:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 8015a4a:	2900      	cmp	r1, #0
 8015a4c:	d1f7      	bne.n	8015a3e <rcl_wait+0x20e>
 8015a4e:	68a5      	ldr	r5, [r4, #8]
 8015a50:	f845 1022 	str.w	r1, [r5, r2, lsl #2]
 8015a54:	3201      	adds	r2, #1
 8015a56:	42b2      	cmp	r2, r6
 8015a58:	d1f4      	bne.n	8015a44 <rcl_wait+0x214>
 8015a5a:	69e6      	ldr	r6, [r4, #28]
 8015a5c:	2200      	movs	r2, #0
 8015a5e:	b91e      	cbnz	r6, 8015a68 <rcl_wait+0x238>
 8015a60:	e00d      	b.n	8015a7e <rcl_wait+0x24e>
 8015a62:	3201      	adds	r2, #1
 8015a64:	42b2      	cmp	r2, r6
 8015a66:	d00a      	beq.n	8015a7e <rcl_wait+0x24e>
 8015a68:	6a19      	ldr	r1, [r3, #32]
 8015a6a:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 8015a6e:	2900      	cmp	r1, #0
 8015a70:	d1f7      	bne.n	8015a62 <rcl_wait+0x232>
 8015a72:	69a5      	ldr	r5, [r4, #24]
 8015a74:	f845 1022 	str.w	r1, [r5, r2, lsl #2]
 8015a78:	3201      	adds	r2, #1
 8015a7a:	42b2      	cmp	r2, r6
 8015a7c:	d1f4      	bne.n	8015a68 <rcl_wait+0x238>
 8015a7e:	6a66      	ldr	r6, [r4, #36]	@ 0x24
 8015a80:	2200      	movs	r2, #0
 8015a82:	b91e      	cbnz	r6, 8015a8c <rcl_wait+0x25c>
 8015a84:	e00d      	b.n	8015aa2 <rcl_wait+0x272>
 8015a86:	3201      	adds	r2, #1
 8015a88:	4296      	cmp	r6, r2
 8015a8a:	d00a      	beq.n	8015aa2 <rcl_wait+0x272>
 8015a8c:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8015a8e:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 8015a92:	2900      	cmp	r1, #0
 8015a94:	d1f7      	bne.n	8015a86 <rcl_wait+0x256>
 8015a96:	6a25      	ldr	r5, [r4, #32]
 8015a98:	f845 1022 	str.w	r1, [r5, r2, lsl #2]
 8015a9c:	3201      	adds	r2, #1
 8015a9e:	4296      	cmp	r6, r2
 8015aa0:	d1f4      	bne.n	8015a8c <rcl_wait+0x25c>
 8015aa2:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8015aa4:	2200      	movs	r2, #0
 8015aa6:	b91e      	cbnz	r6, 8015ab0 <rcl_wait+0x280>
 8015aa8:	e00d      	b.n	8015ac6 <rcl_wait+0x296>
 8015aaa:	3201      	adds	r2, #1
 8015aac:	42b2      	cmp	r2, r6
 8015aae:	d00a      	beq.n	8015ac6 <rcl_wait+0x296>
 8015ab0:	6b99      	ldr	r1, [r3, #56]	@ 0x38
 8015ab2:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 8015ab6:	2900      	cmp	r1, #0
 8015ab8:	d1f7      	bne.n	8015aaa <rcl_wait+0x27a>
 8015aba:	6aa5      	ldr	r5, [r4, #40]	@ 0x28
 8015abc:	f845 1022 	str.w	r1, [r5, r2, lsl #2]
 8015ac0:	3201      	adds	r2, #1
 8015ac2:	42b2      	cmp	r2, r6
 8015ac4:	d1f4      	bne.n	8015ab0 <rcl_wait+0x280>
 8015ac6:	f1b8 0f02 	cmp.w	r8, #2
 8015aca:	f47f aecc 	bne.w	8015866 <rcl_wait+0x36>
 8015ace:	9b07      	ldr	r3, [sp, #28]
 8015ad0:	2b00      	cmp	r3, #0
 8015ad2:	bf08      	it	eq
 8015ad4:	2002      	moveq	r0, #2
 8015ad6:	e6c6      	b.n	8015866 <rcl_wait+0x36>
 8015ad8:	200b      	movs	r0, #11
 8015ada:	b00f      	add	sp, #60	@ 0x3c
 8015adc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015ae0:	9b07      	ldr	r3, [sp, #28]
 8015ae2:	2b00      	cmp	r3, #0
 8015ae4:	f47f af79 	bne.w	80159da <rcl_wait+0x1aa>
 8015ae8:	e731      	b.n	801594e <rcl_wait+0x11e>
 8015aea:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8015aee:	4313      	orrs	r3, r2
 8015af0:	bf08      	it	eq
 8015af2:	9107      	streq	r1, [sp, #28]
 8015af4:	f43f af24 	beq.w	8015940 <rcl_wait+0x110>
 8015af8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8015afc:	f04f 36ff 	mov.w	r6, #4294967295	@ 0xffffffff
 8015b00:	f06f 4700 	mvn.w	r7, #2147483648	@ 0x80000000
 8015b04:	2a01      	cmp	r2, #1
 8015b06:	f173 0300 	sbcs.w	r3, r3, #0
 8015b0a:	f04f 0300 	mov.w	r3, #0
 8015b0e:	9307      	str	r3, [sp, #28]
 8015b10:	f6bf af63 	bge.w	80159da <rcl_wait+0x1aa>
 8015b14:	e71b      	b.n	801594e <rcl_wait+0x11e>
 8015b16:	4632      	mov	r2, r6
 8015b18:	463b      	mov	r3, r7
 8015b1a:	e7f3      	b.n	8015b04 <rcl_wait+0x2d4>
 8015b1c:	f3af 8000 	nop.w
 8015b20:	3b9aca00 	.word	0x3b9aca00
 8015b24:	00000000 	.word	0x00000000

08015b28 <__atomic_load_8>:
 8015b28:	ea80 4110 	eor.w	r1, r0, r0, lsr #16
 8015b2c:	f081 013d 	eor.w	r1, r1, #61	@ 0x3d
 8015b30:	4b14      	ldr	r3, [pc, #80]	@ (8015b84 <__atomic_load_8+0x5c>)
 8015b32:	4a15      	ldr	r2, [pc, #84]	@ (8015b88 <__atomic_load_8+0x60>)
 8015b34:	eb01 01c1 	add.w	r1, r1, r1, lsl #3
 8015b38:	ea81 1111 	eor.w	r1, r1, r1, lsr #4
 8015b3c:	fb03 f301 	mul.w	r3, r3, r1
 8015b40:	ea83 33d3 	eor.w	r3, r3, r3, lsr #15
 8015b44:	fba2 1203 	umull	r1, r2, r2, r3
 8015b48:	0912      	lsrs	r2, r2, #4
 8015b4a:	eb02 0142 	add.w	r1, r2, r2, lsl #1
 8015b4e:	b430      	push	{r4, r5}
 8015b50:	ebc2 02c1 	rsb	r2, r2, r1, lsl #3
 8015b54:	4c0d      	ldr	r4, [pc, #52]	@ (8015b8c <__atomic_load_8+0x64>)
 8015b56:	1a9b      	subs	r3, r3, r2
 8015b58:	18e1      	adds	r1, r4, r3
 8015b5a:	f04f 0501 	mov.w	r5, #1
 8015b5e:	e8d1 2f4f 	ldrexb	r2, [r1]
 8015b62:	e8c1 5f4c 	strexb	ip, r5, [r1]
 8015b66:	f1bc 0f00 	cmp.w	ip, #0
 8015b6a:	d1f8      	bne.n	8015b5e <__atomic_load_8+0x36>
 8015b6c:	f3bf 8f5b 	dmb	ish
 8015b70:	b2d2      	uxtb	r2, r2
 8015b72:	2a00      	cmp	r2, #0
 8015b74:	d1f3      	bne.n	8015b5e <__atomic_load_8+0x36>
 8015b76:	e9d0 0100 	ldrd	r0, r1, [r0]
 8015b7a:	f3bf 8f5b 	dmb	ish
 8015b7e:	54e2      	strb	r2, [r4, r3]
 8015b80:	bc30      	pop	{r4, r5}
 8015b82:	4770      	bx	lr
 8015b84:	27d4eb2d 	.word	0x27d4eb2d
 8015b88:	b21642c9 	.word	0xb21642c9
 8015b8c:	200075e8 	.word	0x200075e8

08015b90 <__atomic_store_8>:
 8015b90:	b4f0      	push	{r4, r5, r6, r7}
 8015b92:	ea80 4510 	eor.w	r5, r0, r0, lsr #16
 8015b96:	f085 053d 	eor.w	r5, r5, #61	@ 0x3d
 8015b9a:	4914      	ldr	r1, [pc, #80]	@ (8015bec <__atomic_store_8+0x5c>)
 8015b9c:	4c14      	ldr	r4, [pc, #80]	@ (8015bf0 <__atomic_store_8+0x60>)
 8015b9e:	4e15      	ldr	r6, [pc, #84]	@ (8015bf4 <__atomic_store_8+0x64>)
 8015ba0:	eb05 05c5 	add.w	r5, r5, r5, lsl #3
 8015ba4:	ea85 1515 	eor.w	r5, r5, r5, lsr #4
 8015ba8:	fb01 f105 	mul.w	r1, r1, r5
 8015bac:	ea81 31d1 	eor.w	r1, r1, r1, lsr #15
 8015bb0:	fba4 5401 	umull	r5, r4, r4, r1
 8015bb4:	0924      	lsrs	r4, r4, #4
 8015bb6:	eb04 0544 	add.w	r5, r4, r4, lsl #1
 8015bba:	ebc4 04c5 	rsb	r4, r4, r5, lsl #3
 8015bbe:	1b09      	subs	r1, r1, r4
 8015bc0:	1875      	adds	r5, r6, r1
 8015bc2:	f04f 0701 	mov.w	r7, #1
 8015bc6:	e8d5 4f4f 	ldrexb	r4, [r5]
 8015bca:	e8c5 7f4c 	strexb	ip, r7, [r5]
 8015bce:	f1bc 0f00 	cmp.w	ip, #0
 8015bd2:	d1f8      	bne.n	8015bc6 <__atomic_store_8+0x36>
 8015bd4:	f3bf 8f5b 	dmb	ish
 8015bd8:	b2e4      	uxtb	r4, r4
 8015bda:	2c00      	cmp	r4, #0
 8015bdc:	d1f3      	bne.n	8015bc6 <__atomic_store_8+0x36>
 8015bde:	e9c0 2300 	strd	r2, r3, [r0]
 8015be2:	f3bf 8f5b 	dmb	ish
 8015be6:	5474      	strb	r4, [r6, r1]
 8015be8:	bcf0      	pop	{r4, r5, r6, r7}
 8015bea:	4770      	bx	lr
 8015bec:	27d4eb2d 	.word	0x27d4eb2d
 8015bf0:	b21642c9 	.word	0xb21642c9
 8015bf4:	200075e8 	.word	0x200075e8

08015bf8 <__atomic_exchange_8>:
 8015bf8:	e92d 03f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9}
 8015bfc:	ea80 4510 	eor.w	r5, r0, r0, lsr #16
 8015c00:	f085 053d 	eor.w	r5, r5, #61	@ 0x3d
 8015c04:	4c16      	ldr	r4, [pc, #88]	@ (8015c60 <__atomic_exchange_8+0x68>)
 8015c06:	4917      	ldr	r1, [pc, #92]	@ (8015c64 <__atomic_exchange_8+0x6c>)
 8015c08:	4e17      	ldr	r6, [pc, #92]	@ (8015c68 <__atomic_exchange_8+0x70>)
 8015c0a:	eb05 05c5 	add.w	r5, r5, r5, lsl #3
 8015c0e:	ea85 1515 	eor.w	r5, r5, r5, lsr #4
 8015c12:	fb04 f505 	mul.w	r5, r4, r5
 8015c16:	ea85 35d5 	eor.w	r5, r5, r5, lsr #15
 8015c1a:	fba1 4105 	umull	r4, r1, r1, r5
 8015c1e:	0909      	lsrs	r1, r1, #4
 8015c20:	eb01 0441 	add.w	r4, r1, r1, lsl #1
 8015c24:	ebc1 01c4 	rsb	r1, r1, r4, lsl #3
 8015c28:	1a6c      	subs	r4, r5, r1
 8015c2a:	1931      	adds	r1, r6, r4
 8015c2c:	f04f 0701 	mov.w	r7, #1
 8015c30:	e8d1 5f4f 	ldrexb	r5, [r1]
 8015c34:	e8c1 7f4c 	strexb	ip, r7, [r1]
 8015c38:	f1bc 0f00 	cmp.w	ip, #0
 8015c3c:	d1f8      	bne.n	8015c30 <__atomic_exchange_8+0x38>
 8015c3e:	f3bf 8f5b 	dmb	ish
 8015c42:	b2ed      	uxtb	r5, r5
 8015c44:	2d00      	cmp	r5, #0
 8015c46:	d1f3      	bne.n	8015c30 <__atomic_exchange_8+0x38>
 8015c48:	e9d0 8900 	ldrd	r8, r9, [r0]
 8015c4c:	e9c0 2300 	strd	r2, r3, [r0]
 8015c50:	f3bf 8f5b 	dmb	ish
 8015c54:	5535      	strb	r5, [r6, r4]
 8015c56:	4640      	mov	r0, r8
 8015c58:	4649      	mov	r1, r9
 8015c5a:	e8bd 03f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9}
 8015c5e:	4770      	bx	lr
 8015c60:	27d4eb2d 	.word	0x27d4eb2d
 8015c64:	b21642c9 	.word	0xb21642c9
 8015c68:	200075e8 	.word	0x200075e8

08015c6c <rcutils_is_directory>:
 8015c6c:	2000      	movs	r0, #0
 8015c6e:	4770      	bx	lr

08015c70 <rcutils_join_path>:
 8015c70:	b082      	sub	sp, #8
 8015c72:	e88d 000c 	stmia.w	sp, {r2, r3}
 8015c76:	2000      	movs	r0, #0
 8015c78:	b002      	add	sp, #8
 8015c7a:	4770      	bx	lr

08015c7c <rcutils_to_native_path>:
 8015c7c:	b084      	sub	sp, #16
 8015c7e:	a801      	add	r0, sp, #4
 8015c80:	e880 000e 	stmia.w	r0, {r1, r2, r3}
 8015c84:	b004      	add	sp, #16
 8015c86:	2000      	movs	r0, #0
 8015c88:	4770      	bx	lr
 8015c8a:	bf00      	nop

08015c8c <rcutils_format_string_limit>:
 8015c8c:	b40f      	push	{r0, r1, r2, r3}
 8015c8e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8015c90:	b083      	sub	sp, #12
 8015c92:	ac08      	add	r4, sp, #32
 8015c94:	9e0e      	ldr	r6, [sp, #56]	@ 0x38
 8015c96:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8015c9a:	b34e      	cbz	r6, 8015cf0 <rcutils_format_string_limit+0x64>
 8015c9c:	a808      	add	r0, sp, #32
 8015c9e:	f7f8 f9cb 	bl	800e038 <rcutils_allocator_is_valid>
 8015ca2:	b328      	cbz	r0, 8015cf0 <rcutils_format_string_limit+0x64>
 8015ca4:	2100      	movs	r1, #0
 8015ca6:	ab0f      	add	r3, sp, #60	@ 0x3c
 8015ca8:	4608      	mov	r0, r1
 8015caa:	4632      	mov	r2, r6
 8015cac:	e9cd 3300 	strd	r3, r3, [sp]
 8015cb0:	f000 f904 	bl	8015ebc <rcutils_vsnprintf>
 8015cb4:	1c43      	adds	r3, r0, #1
 8015cb6:	4605      	mov	r5, r0
 8015cb8:	d01a      	beq.n	8015cf0 <rcutils_format_string_limit+0x64>
 8015cba:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8015cbc:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8015cbe:	1c47      	adds	r7, r0, #1
 8015cc0:	429f      	cmp	r7, r3
 8015cc2:	bf84      	itt	hi
 8015cc4:	461f      	movhi	r7, r3
 8015cc6:	f103 35ff 	addhi.w	r5, r3, #4294967295	@ 0xffffffff
 8015cca:	4638      	mov	r0, r7
 8015ccc:	9b08      	ldr	r3, [sp, #32]
 8015cce:	4798      	blx	r3
 8015cd0:	4604      	mov	r4, r0
 8015cd2:	b168      	cbz	r0, 8015cf0 <rcutils_format_string_limit+0x64>
 8015cd4:	9b01      	ldr	r3, [sp, #4]
 8015cd6:	4632      	mov	r2, r6
 8015cd8:	4639      	mov	r1, r7
 8015cda:	f000 f8ef 	bl	8015ebc <rcutils_vsnprintf>
 8015cde:	2800      	cmp	r0, #0
 8015ce0:	db02      	blt.n	8015ce8 <rcutils_format_string_limit+0x5c>
 8015ce2:	2300      	movs	r3, #0
 8015ce4:	5563      	strb	r3, [r4, r5]
 8015ce6:	e004      	b.n	8015cf2 <rcutils_format_string_limit+0x66>
 8015ce8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8015cea:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8015cec:	4620      	mov	r0, r4
 8015cee:	4798      	blx	r3
 8015cf0:	2400      	movs	r4, #0
 8015cf2:	4620      	mov	r0, r4
 8015cf4:	b003      	add	sp, #12
 8015cf6:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8015cfa:	b004      	add	sp, #16
 8015cfc:	4770      	bx	lr
 8015cfe:	bf00      	nop

08015d00 <rcutils_get_env>:
 8015d00:	b168      	cbz	r0, 8015d1e <rcutils_get_env+0x1e>
 8015d02:	b510      	push	{r4, lr}
 8015d04:	460c      	mov	r4, r1
 8015d06:	b129      	cbz	r1, 8015d14 <rcutils_get_env+0x14>
 8015d08:	f003 fbbe 	bl	8019488 <getenv>
 8015d0c:	b120      	cbz	r0, 8015d18 <rcutils_get_env+0x18>
 8015d0e:	6020      	str	r0, [r4, #0]
 8015d10:	2000      	movs	r0, #0
 8015d12:	bd10      	pop	{r4, pc}
 8015d14:	4803      	ldr	r0, [pc, #12]	@ (8015d24 <rcutils_get_env+0x24>)
 8015d16:	bd10      	pop	{r4, pc}
 8015d18:	4b03      	ldr	r3, [pc, #12]	@ (8015d28 <rcutils_get_env+0x28>)
 8015d1a:	6023      	str	r3, [r4, #0]
 8015d1c:	bd10      	pop	{r4, pc}
 8015d1e:	4803      	ldr	r0, [pc, #12]	@ (8015d2c <rcutils_get_env+0x2c>)
 8015d20:	4770      	bx	lr
 8015d22:	bf00      	nop
 8015d24:	0801b1c4 	.word	0x0801b1c4
 8015d28:	0801b2e8 	.word	0x0801b2e8
 8015d2c:	0801b1a8 	.word	0x0801b1a8

08015d30 <rcutils_repl_str>:
 8015d30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015d34:	ed2d 8b02 	vpush	{d8}
 8015d38:	b087      	sub	sp, #28
 8015d3a:	4680      	mov	r8, r0
 8015d3c:	4608      	mov	r0, r1
 8015d3e:	f8cd 8000 	str.w	r8, [sp]
 8015d42:	ee08 2a10 	vmov	s16, r2
 8015d46:	468a      	mov	sl, r1
 8015d48:	4699      	mov	r9, r3
 8015d4a:	f7ea fa4b 	bl	80001e4 <strlen>
 8015d4e:	2600      	movs	r6, #0
 8015d50:	4647      	mov	r7, r8
 8015d52:	9001      	str	r0, [sp, #4]
 8015d54:	46b3      	mov	fp, r6
 8015d56:	2510      	movs	r5, #16
 8015d58:	46b0      	mov	r8, r6
 8015d5a:	e01d      	b.n	8015d98 <rcutils_repl_str+0x68>
 8015d5c:	f10b 0b01 	add.w	fp, fp, #1
 8015d60:	455e      	cmp	r6, fp
 8015d62:	d211      	bcs.n	8015d88 <rcutils_repl_str+0x58>
 8015d64:	442e      	add	r6, r5
 8015d66:	f8d9 3008 	ldr.w	r3, [r9, #8]
 8015d6a:	f8d9 2010 	ldr.w	r2, [r9, #16]
 8015d6e:	00b1      	lsls	r1, r6, #2
 8015d70:	4798      	blx	r3
 8015d72:	2800      	cmp	r0, #0
 8015d74:	f000 8084 	beq.w	8015e80 <rcutils_repl_str+0x150>
 8015d78:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8015d7c:	f5b5 1f80 	cmp.w	r5, #1048576	@ 0x100000
 8015d80:	bf28      	it	cs
 8015d82:	f44f 1580 	movcs.w	r5, #1048576	@ 0x100000
 8015d86:	4680      	mov	r8, r0
 8015d88:	9a00      	ldr	r2, [sp, #0]
 8015d8a:	eb08 038b 	add.w	r3, r8, fp, lsl #2
 8015d8e:	1aa2      	subs	r2, r4, r2
 8015d90:	f843 2c04 	str.w	r2, [r3, #-4]
 8015d94:	9b01      	ldr	r3, [sp, #4]
 8015d96:	18e7      	adds	r7, r4, r3
 8015d98:	4651      	mov	r1, sl
 8015d9a:	4638      	mov	r0, r7
 8015d9c:	f003 ff59 	bl	8019c52 <strstr>
 8015da0:	4604      	mov	r4, r0
 8015da2:	4640      	mov	r0, r8
 8015da4:	2c00      	cmp	r4, #0
 8015da6:	d1d9      	bne.n	8015d5c <rcutils_repl_str+0x2c>
 8015da8:	46b8      	mov	r8, r7
 8015daa:	4607      	mov	r7, r0
 8015dac:	4640      	mov	r0, r8
 8015dae:	f7ea fa19 	bl	80001e4 <strlen>
 8015db2:	9b00      	ldr	r3, [sp, #0]
 8015db4:	eba8 0303 	sub.w	r3, r8, r3
 8015db8:	181d      	adds	r5, r3, r0
 8015dba:	9504      	str	r5, [sp, #16]
 8015dbc:	f1bb 0f00 	cmp.w	fp, #0
 8015dc0:	d03d      	beq.n	8015e3e <rcutils_repl_str+0x10e>
 8015dc2:	ee18 0a10 	vmov	r0, s16
 8015dc6:	f7ea fa0d 	bl	80001e4 <strlen>
 8015dca:	9b01      	ldr	r3, [sp, #4]
 8015dcc:	f8d9 1010 	ldr.w	r1, [r9, #16]
 8015dd0:	1ac3      	subs	r3, r0, r3
 8015dd2:	fb0b 5303 	mla	r3, fp, r3, r5
 8015dd6:	9305      	str	r3, [sp, #20]
 8015dd8:	4606      	mov	r6, r0
 8015dda:	1c58      	adds	r0, r3, #1
 8015ddc:	f8d9 3000 	ldr.w	r3, [r9]
 8015de0:	4798      	blx	r3
 8015de2:	9003      	str	r0, [sp, #12]
 8015de4:	2800      	cmp	r0, #0
 8015de6:	d04c      	beq.n	8015e82 <rcutils_repl_str+0x152>
 8015de8:	683a      	ldr	r2, [r7, #0]
 8015dea:	9900      	ldr	r1, [sp, #0]
 8015dec:	f004 f829 	bl	8019e42 <memcpy>
 8015df0:	9b03      	ldr	r3, [sp, #12]
 8015df2:	683d      	ldr	r5, [r7, #0]
 8015df4:	ee18 8a10 	vmov	r8, s16
 8015df8:	441d      	add	r5, r3
 8015dfa:	f10b 33ff 	add.w	r3, fp, #4294967295	@ 0xffffffff
 8015dfe:	9302      	str	r3, [sp, #8]
 8015e00:	46ba      	mov	sl, r7
 8015e02:	4632      	mov	r2, r6
 8015e04:	4641      	mov	r1, r8
 8015e06:	4628      	mov	r0, r5
 8015e08:	f004 f81b 	bl	8019e42 <memcpy>
 8015e0c:	9b01      	ldr	r3, [sp, #4]
 8015e0e:	f85a 2b04 	ldr.w	r2, [sl], #4
 8015e12:	441a      	add	r2, r3
 8015e14:	9b00      	ldr	r3, [sp, #0]
 8015e16:	1899      	adds	r1, r3, r2
 8015e18:	9b02      	ldr	r3, [sp, #8]
 8015e1a:	4435      	add	r5, r6
 8015e1c:	429c      	cmp	r4, r3
 8015e1e:	4628      	mov	r0, r5
 8015e20:	d025      	beq.n	8015e6e <rcutils_repl_str+0x13e>
 8015e22:	f8da 3000 	ldr.w	r3, [sl]
 8015e26:	3401      	adds	r4, #1
 8015e28:	1a9a      	subs	r2, r3, r2
 8015e2a:	4415      	add	r5, r2
 8015e2c:	f004 f809 	bl	8019e42 <memcpy>
 8015e30:	455c      	cmp	r4, fp
 8015e32:	d3e6      	bcc.n	8015e02 <rcutils_repl_str+0xd2>
 8015e34:	9a03      	ldr	r2, [sp, #12]
 8015e36:	9905      	ldr	r1, [sp, #20]
 8015e38:	2300      	movs	r3, #0
 8015e3a:	5453      	strb	r3, [r2, r1]
 8015e3c:	e00b      	b.n	8015e56 <rcutils_repl_str+0x126>
 8015e3e:	4628      	mov	r0, r5
 8015e40:	f8d9 3000 	ldr.w	r3, [r9]
 8015e44:	f8d9 1010 	ldr.w	r1, [r9, #16]
 8015e48:	3001      	adds	r0, #1
 8015e4a:	4798      	blx	r3
 8015e4c:	9003      	str	r0, [sp, #12]
 8015e4e:	b110      	cbz	r0, 8015e56 <rcutils_repl_str+0x126>
 8015e50:	9900      	ldr	r1, [sp, #0]
 8015e52:	f003 ffee 	bl	8019e32 <strcpy>
 8015e56:	4638      	mov	r0, r7
 8015e58:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8015e5c:	f8d9 1010 	ldr.w	r1, [r9, #16]
 8015e60:	4798      	blx	r3
 8015e62:	9803      	ldr	r0, [sp, #12]
 8015e64:	b007      	add	sp, #28
 8015e66:	ecbd 8b02 	vpop	{d8}
 8015e6a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015e6e:	9b04      	ldr	r3, [sp, #16]
 8015e70:	3401      	adds	r4, #1
 8015e72:	1a9a      	subs	r2, r3, r2
 8015e74:	4415      	add	r5, r2
 8015e76:	f003 ffe4 	bl	8019e42 <memcpy>
 8015e7a:	455c      	cmp	r4, fp
 8015e7c:	d3c1      	bcc.n	8015e02 <rcutils_repl_str+0xd2>
 8015e7e:	e7d9      	b.n	8015e34 <rcutils_repl_str+0x104>
 8015e80:	4647      	mov	r7, r8
 8015e82:	2300      	movs	r3, #0
 8015e84:	9303      	str	r3, [sp, #12]
 8015e86:	e7e6      	b.n	8015e56 <rcutils_repl_str+0x126>

08015e88 <rcutils_snprintf>:
 8015e88:	b40c      	push	{r2, r3}
 8015e8a:	b530      	push	{r4, r5, lr}
 8015e8c:	b083      	sub	sp, #12
 8015e8e:	ab06      	add	r3, sp, #24
 8015e90:	f853 2b04 	ldr.w	r2, [r3], #4
 8015e94:	9301      	str	r3, [sp, #4]
 8015e96:	b152      	cbz	r2, 8015eae <rcutils_snprintf+0x26>
 8015e98:	b138      	cbz	r0, 8015eaa <rcutils_snprintf+0x22>
 8015e9a:	b141      	cbz	r1, 8015eae <rcutils_snprintf+0x26>
 8015e9c:	f003 fe8a 	bl	8019bb4 <vsniprintf>
 8015ea0:	b003      	add	sp, #12
 8015ea2:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8015ea6:	b002      	add	sp, #8
 8015ea8:	4770      	bx	lr
 8015eaa:	2900      	cmp	r1, #0
 8015eac:	d0f6      	beq.n	8015e9c <rcutils_snprintf+0x14>
 8015eae:	f003 ff93 	bl	8019dd8 <__errno>
 8015eb2:	2316      	movs	r3, #22
 8015eb4:	6003      	str	r3, [r0, #0]
 8015eb6:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8015eba:	e7f1      	b.n	8015ea0 <rcutils_snprintf+0x18>

08015ebc <rcutils_vsnprintf>:
 8015ebc:	b570      	push	{r4, r5, r6, lr}
 8015ebe:	b13a      	cbz	r2, 8015ed0 <rcutils_vsnprintf+0x14>
 8015ec0:	b120      	cbz	r0, 8015ecc <rcutils_vsnprintf+0x10>
 8015ec2:	b129      	cbz	r1, 8015ed0 <rcutils_vsnprintf+0x14>
 8015ec4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8015ec8:	f003 be74 	b.w	8019bb4 <vsniprintf>
 8015ecc:	2900      	cmp	r1, #0
 8015ece:	d0f9      	beq.n	8015ec4 <rcutils_vsnprintf+0x8>
 8015ed0:	f003 ff82 	bl	8019dd8 <__errno>
 8015ed4:	2316      	movs	r3, #22
 8015ed6:	6003      	str	r3, [r0, #0]
 8015ed8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8015edc:	bd70      	pop	{r4, r5, r6, pc}
 8015ede:	bf00      	nop

08015ee0 <rcutils_strdup>:
 8015ee0:	b084      	sub	sp, #16
 8015ee2:	b570      	push	{r4, r5, r6, lr}
 8015ee4:	b082      	sub	sp, #8
 8015ee6:	ac07      	add	r4, sp, #28
 8015ee8:	e884 000e 	stmia.w	r4, {r1, r2, r3}
 8015eec:	4605      	mov	r5, r0
 8015eee:	b1b0      	cbz	r0, 8015f1e <rcutils_strdup+0x3e>
 8015ef0:	f7ea f978 	bl	80001e4 <strlen>
 8015ef4:	1c42      	adds	r2, r0, #1
 8015ef6:	9b07      	ldr	r3, [sp, #28]
 8015ef8:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8015efa:	9201      	str	r2, [sp, #4]
 8015efc:	4606      	mov	r6, r0
 8015efe:	4610      	mov	r0, r2
 8015f00:	4798      	blx	r3
 8015f02:	4604      	mov	r4, r0
 8015f04:	b128      	cbz	r0, 8015f12 <rcutils_strdup+0x32>
 8015f06:	9a01      	ldr	r2, [sp, #4]
 8015f08:	4629      	mov	r1, r5
 8015f0a:	f003 ff9a 	bl	8019e42 <memcpy>
 8015f0e:	2300      	movs	r3, #0
 8015f10:	55a3      	strb	r3, [r4, r6]
 8015f12:	4620      	mov	r0, r4
 8015f14:	b002      	add	sp, #8
 8015f16:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8015f1a:	b004      	add	sp, #16
 8015f1c:	4770      	bx	lr
 8015f1e:	4604      	mov	r4, r0
 8015f20:	e7f7      	b.n	8015f12 <rcutils_strdup+0x32>
 8015f22:	bf00      	nop

08015f24 <rcutils_strndup>:
 8015f24:	b082      	sub	sp, #8
 8015f26:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015f28:	460e      	mov	r6, r1
 8015f2a:	a906      	add	r1, sp, #24
 8015f2c:	e881 000c 	stmia.w	r1, {r2, r3}
 8015f30:	4605      	mov	r5, r0
 8015f32:	b180      	cbz	r0, 8015f56 <rcutils_strndup+0x32>
 8015f34:	1c77      	adds	r7, r6, #1
 8015f36:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8015f38:	4638      	mov	r0, r7
 8015f3a:	4790      	blx	r2
 8015f3c:	4604      	mov	r4, r0
 8015f3e:	b128      	cbz	r0, 8015f4c <rcutils_strndup+0x28>
 8015f40:	463a      	mov	r2, r7
 8015f42:	4629      	mov	r1, r5
 8015f44:	f003 ff7d 	bl	8019e42 <memcpy>
 8015f48:	2300      	movs	r3, #0
 8015f4a:	55a3      	strb	r3, [r4, r6]
 8015f4c:	4620      	mov	r0, r4
 8015f4e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8015f52:	b002      	add	sp, #8
 8015f54:	4770      	bx	lr
 8015f56:	4604      	mov	r4, r0
 8015f58:	e7f8      	b.n	8015f4c <rcutils_strndup+0x28>
 8015f5a:	bf00      	nop

08015f5c <rmw_get_zero_initialized_context>:
 8015f5c:	b510      	push	{r4, lr}
 8015f5e:	2250      	movs	r2, #80	@ 0x50
 8015f60:	4604      	mov	r4, r0
 8015f62:	2100      	movs	r1, #0
 8015f64:	f003 fe4e 	bl	8019c04 <memset>
 8015f68:	4620      	mov	r0, r4
 8015f6a:	bd10      	pop	{r4, pc}

08015f6c <rmw_get_zero_initialized_init_options>:
 8015f6c:	b510      	push	{r4, lr}
 8015f6e:	2238      	movs	r2, #56	@ 0x38
 8015f70:	4604      	mov	r4, r0
 8015f72:	2100      	movs	r1, #0
 8015f74:	f003 fe46 	bl	8019c04 <memset>
 8015f78:	f104 0010 	add.w	r0, r4, #16
 8015f7c:	f000 f806 	bl	8015f8c <rmw_get_default_security_options>
 8015f80:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8015f84:	60e3      	str	r3, [r4, #12]
 8015f86:	4620      	mov	r0, r4
 8015f88:	bd10      	pop	{r4, pc}
 8015f8a:	bf00      	nop

08015f8c <rmw_get_default_security_options>:
 8015f8c:	2200      	movs	r2, #0
 8015f8e:	7002      	strb	r2, [r0, #0]
 8015f90:	6042      	str	r2, [r0, #4]
 8015f92:	4770      	bx	lr

08015f94 <rmw_get_default_subscription_options>:
 8015f94:	2200      	movs	r2, #0
 8015f96:	6002      	str	r2, [r0, #0]
 8015f98:	7102      	strb	r2, [r0, #4]
 8015f9a:	4770      	bx	lr

08015f9c <rmw_get_zero_initialized_message_info>:
 8015f9c:	b470      	push	{r4, r5, r6}
 8015f9e:	4d07      	ldr	r5, [pc, #28]	@ (8015fbc <rmw_get_zero_initialized_message_info+0x20>)
 8015fa0:	4606      	mov	r6, r0
 8015fa2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8015fa4:	4634      	mov	r4, r6
 8015fa6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8015fa8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8015faa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8015fac:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8015fb0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8015fb4:	4630      	mov	r0, r6
 8015fb6:	bc70      	pop	{r4, r5, r6}
 8015fb8:	4770      	bx	lr
 8015fba:	bf00      	nop
 8015fbc:	0801ad30 	.word	0x0801ad30

08015fc0 <rmw_validate_namespace_with_size>:
 8015fc0:	b340      	cbz	r0, 8016014 <rmw_validate_namespace_with_size+0x54>
 8015fc2:	b5d0      	push	{r4, r6, r7, lr}
 8015fc4:	4614      	mov	r4, r2
 8015fc6:	b0c2      	sub	sp, #264	@ 0x108
 8015fc8:	b332      	cbz	r2, 8016018 <rmw_validate_namespace_with_size+0x58>
 8015fca:	2901      	cmp	r1, #1
 8015fcc:	460f      	mov	r7, r1
 8015fce:	461e      	mov	r6, r3
 8015fd0:	d102      	bne.n	8015fd8 <rmw_validate_namespace_with_size+0x18>
 8015fd2:	7803      	ldrb	r3, [r0, #0]
 8015fd4:	2b2f      	cmp	r3, #47	@ 0x2f
 8015fd6:	d019      	beq.n	801600c <rmw_validate_namespace_with_size+0x4c>
 8015fd8:	aa01      	add	r2, sp, #4
 8015fda:	4669      	mov	r1, sp
 8015fdc:	f7f8 f9ea 	bl	800e3b4 <rmw_validate_full_topic_name>
 8015fe0:	b990      	cbnz	r0, 8016008 <rmw_validate_namespace_with_size+0x48>
 8015fe2:	9b00      	ldr	r3, [sp, #0]
 8015fe4:	b14b      	cbz	r3, 8015ffa <rmw_validate_namespace_with_size+0x3a>
 8015fe6:	2b07      	cmp	r3, #7
 8015fe8:	d007      	beq.n	8015ffa <rmw_validate_namespace_with_size+0x3a>
 8015fea:	1e5a      	subs	r2, r3, #1
 8015fec:	2a05      	cmp	r2, #5
 8015fee:	d82b      	bhi.n	8016048 <rmw_validate_namespace_with_size+0x88>
 8015ff0:	e8df f002 	tbb	[pc, r2]
 8015ff4:	24211e1b 	.word	0x24211e1b
 8015ff8:	1427      	.short	0x1427
 8015ffa:	2ff5      	cmp	r7, #245	@ 0xf5
 8015ffc:	d906      	bls.n	801600c <rmw_validate_namespace_with_size+0x4c>
 8015ffe:	2307      	movs	r3, #7
 8016000:	6023      	str	r3, [r4, #0]
 8016002:	b10e      	cbz	r6, 8016008 <rmw_validate_namespace_with_size+0x48>
 8016004:	23f4      	movs	r3, #244	@ 0xf4
 8016006:	6033      	str	r3, [r6, #0]
 8016008:	b042      	add	sp, #264	@ 0x108
 801600a:	bdd0      	pop	{r4, r6, r7, pc}
 801600c:	2000      	movs	r0, #0
 801600e:	6020      	str	r0, [r4, #0]
 8016010:	b042      	add	sp, #264	@ 0x108
 8016012:	bdd0      	pop	{r4, r6, r7, pc}
 8016014:	200b      	movs	r0, #11
 8016016:	4770      	bx	lr
 8016018:	200b      	movs	r0, #11
 801601a:	e7f5      	b.n	8016008 <rmw_validate_namespace_with_size+0x48>
 801601c:	2306      	movs	r3, #6
 801601e:	6023      	str	r3, [r4, #0]
 8016020:	2e00      	cmp	r6, #0
 8016022:	d0f1      	beq.n	8016008 <rmw_validate_namespace_with_size+0x48>
 8016024:	9b01      	ldr	r3, [sp, #4]
 8016026:	6033      	str	r3, [r6, #0]
 8016028:	e7ee      	b.n	8016008 <rmw_validate_namespace_with_size+0x48>
 801602a:	2301      	movs	r3, #1
 801602c:	6023      	str	r3, [r4, #0]
 801602e:	e7f7      	b.n	8016020 <rmw_validate_namespace_with_size+0x60>
 8016030:	2302      	movs	r3, #2
 8016032:	6023      	str	r3, [r4, #0]
 8016034:	e7f4      	b.n	8016020 <rmw_validate_namespace_with_size+0x60>
 8016036:	2303      	movs	r3, #3
 8016038:	6023      	str	r3, [r4, #0]
 801603a:	e7f1      	b.n	8016020 <rmw_validate_namespace_with_size+0x60>
 801603c:	2304      	movs	r3, #4
 801603e:	6023      	str	r3, [r4, #0]
 8016040:	e7ee      	b.n	8016020 <rmw_validate_namespace_with_size+0x60>
 8016042:	2305      	movs	r3, #5
 8016044:	6023      	str	r3, [r4, #0]
 8016046:	e7eb      	b.n	8016020 <rmw_validate_namespace_with_size+0x60>
 8016048:	4a03      	ldr	r2, [pc, #12]	@ (8016058 <rmw_validate_namespace_with_size+0x98>)
 801604a:	f44f 7180 	mov.w	r1, #256	@ 0x100
 801604e:	a802      	add	r0, sp, #8
 8016050:	f7ff ff1a 	bl	8015e88 <rcutils_snprintf>
 8016054:	2001      	movs	r0, #1
 8016056:	e7d7      	b.n	8016008 <rmw_validate_namespace_with_size+0x48>
 8016058:	0801b1e0 	.word	0x0801b1e0

0801605c <rmw_validate_namespace>:
 801605c:	b168      	cbz	r0, 801607a <rmw_validate_namespace+0x1e>
 801605e:	b570      	push	{r4, r5, r6, lr}
 8016060:	460d      	mov	r5, r1
 8016062:	4616      	mov	r6, r2
 8016064:	4604      	mov	r4, r0
 8016066:	f7ea f8bd 	bl	80001e4 <strlen>
 801606a:	4633      	mov	r3, r6
 801606c:	4601      	mov	r1, r0
 801606e:	462a      	mov	r2, r5
 8016070:	4620      	mov	r0, r4
 8016072:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8016076:	f7ff bfa3 	b.w	8015fc0 <rmw_validate_namespace_with_size>
 801607a:	200b      	movs	r0, #11
 801607c:	4770      	bx	lr
 801607e:	bf00      	nop

08016080 <rmw_namespace_validation_result_string>:
 8016080:	2807      	cmp	r0, #7
 8016082:	bf9a      	itte	ls
 8016084:	4b02      	ldrls	r3, [pc, #8]	@ (8016090 <rmw_namespace_validation_result_string+0x10>)
 8016086:	f853 0020 	ldrls.w	r0, [r3, r0, lsl #2]
 801608a:	4802      	ldrhi	r0, [pc, #8]	@ (8016094 <rmw_namespace_validation_result_string+0x14>)
 801608c:	4770      	bx	lr
 801608e:	bf00      	nop
 8016090:	0801b3d8 	.word	0x0801b3d8
 8016094:	0801b230 	.word	0x0801b230

08016098 <rmw_validate_node_name>:
 8016098:	2800      	cmp	r0, #0
 801609a:	d03b      	beq.n	8016114 <rmw_validate_node_name+0x7c>
 801609c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80160a0:	460f      	mov	r7, r1
 80160a2:	2900      	cmp	r1, #0
 80160a4:	d038      	beq.n	8016118 <rmw_validate_node_name+0x80>
 80160a6:	4615      	mov	r5, r2
 80160a8:	4604      	mov	r4, r0
 80160aa:	f7ea f89b 	bl	80001e4 <strlen>
 80160ae:	b1e0      	cbz	r0, 80160ea <rmw_validate_node_name+0x52>
 80160b0:	1e63      	subs	r3, r4, #1
 80160b2:	eb03 0e00 	add.w	lr, r3, r0
 80160b6:	f1c4 0c01 	rsb	ip, r4, #1
 80160ba:	eb0c 0803 	add.w	r8, ip, r3
 80160be:	f813 6f01 	ldrb.w	r6, [r3, #1]!
 80160c2:	f1a6 0130 	sub.w	r1, r6, #48	@ 0x30
 80160c6:	f026 0220 	bic.w	r2, r6, #32
 80160ca:	2909      	cmp	r1, #9
 80160cc:	f1a2 0241 	sub.w	r2, r2, #65	@ 0x41
 80160d0:	d913      	bls.n	80160fa <rmw_validate_node_name+0x62>
 80160d2:	2a19      	cmp	r2, #25
 80160d4:	d911      	bls.n	80160fa <rmw_validate_node_name+0x62>
 80160d6:	2e5f      	cmp	r6, #95	@ 0x5f
 80160d8:	d00f      	beq.n	80160fa <rmw_validate_node_name+0x62>
 80160da:	2302      	movs	r3, #2
 80160dc:	603b      	str	r3, [r7, #0]
 80160de:	b10d      	cbz	r5, 80160e4 <rmw_validate_node_name+0x4c>
 80160e0:	f8c5 8000 	str.w	r8, [r5]
 80160e4:	2000      	movs	r0, #0
 80160e6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80160ea:	2301      	movs	r3, #1
 80160ec:	603b      	str	r3, [r7, #0]
 80160ee:	2d00      	cmp	r5, #0
 80160f0:	d0f8      	beq.n	80160e4 <rmw_validate_node_name+0x4c>
 80160f2:	2000      	movs	r0, #0
 80160f4:	6028      	str	r0, [r5, #0]
 80160f6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80160fa:	4573      	cmp	r3, lr
 80160fc:	d1dd      	bne.n	80160ba <rmw_validate_node_name+0x22>
 80160fe:	7822      	ldrb	r2, [r4, #0]
 8016100:	4b0d      	ldr	r3, [pc, #52]	@ (8016138 <rmw_validate_node_name+0xa0>)
 8016102:	5cd3      	ldrb	r3, [r2, r3]
 8016104:	f013 0304 	ands.w	r3, r3, #4
 8016108:	d110      	bne.n	801612c <rmw_validate_node_name+0x94>
 801610a:	28ff      	cmp	r0, #255	@ 0xff
 801610c:	d806      	bhi.n	801611c <rmw_validate_node_name+0x84>
 801610e:	603b      	str	r3, [r7, #0]
 8016110:	4618      	mov	r0, r3
 8016112:	e7e8      	b.n	80160e6 <rmw_validate_node_name+0x4e>
 8016114:	200b      	movs	r0, #11
 8016116:	4770      	bx	lr
 8016118:	200b      	movs	r0, #11
 801611a:	e7e4      	b.n	80160e6 <rmw_validate_node_name+0x4e>
 801611c:	2204      	movs	r2, #4
 801611e:	603a      	str	r2, [r7, #0]
 8016120:	2d00      	cmp	r5, #0
 8016122:	d0df      	beq.n	80160e4 <rmw_validate_node_name+0x4c>
 8016124:	22fe      	movs	r2, #254	@ 0xfe
 8016126:	4618      	mov	r0, r3
 8016128:	602a      	str	r2, [r5, #0]
 801612a:	e7dc      	b.n	80160e6 <rmw_validate_node_name+0x4e>
 801612c:	2303      	movs	r3, #3
 801612e:	603b      	str	r3, [r7, #0]
 8016130:	2d00      	cmp	r5, #0
 8016132:	d1de      	bne.n	80160f2 <rmw_validate_node_name+0x5a>
 8016134:	e7d6      	b.n	80160e4 <rmw_validate_node_name+0x4c>
 8016136:	bf00      	nop
 8016138:	0801b7b0 	.word	0x0801b7b0

0801613c <rmw_node_name_validation_result_string>:
 801613c:	2804      	cmp	r0, #4
 801613e:	bf9a      	itte	ls
 8016140:	4b02      	ldrls	r3, [pc, #8]	@ (801614c <rmw_node_name_validation_result_string+0x10>)
 8016142:	f853 0020 	ldrls.w	r0, [r3, r0, lsl #2]
 8016146:	4802      	ldrhi	r0, [pc, #8]	@ (8016150 <rmw_node_name_validation_result_string+0x14>)
 8016148:	4770      	bx	lr
 801614a:	bf00      	nop
 801614c:	0801b4e4 	.word	0x0801b4e4
 8016150:	0801b3f8 	.word	0x0801b3f8

08016154 <get_memory>:
 8016154:	4603      	mov	r3, r0
 8016156:	6840      	ldr	r0, [r0, #4]
 8016158:	b158      	cbz	r0, 8016172 <get_memory+0x1e>
 801615a:	6882      	ldr	r2, [r0, #8]
 801615c:	605a      	str	r2, [r3, #4]
 801615e:	b10a      	cbz	r2, 8016164 <get_memory+0x10>
 8016160:	2100      	movs	r1, #0
 8016162:	6051      	str	r1, [r2, #4]
 8016164:	681a      	ldr	r2, [r3, #0]
 8016166:	6082      	str	r2, [r0, #8]
 8016168:	b102      	cbz	r2, 801616c <get_memory+0x18>
 801616a:	6050      	str	r0, [r2, #4]
 801616c:	2200      	movs	r2, #0
 801616e:	6042      	str	r2, [r0, #4]
 8016170:	6018      	str	r0, [r3, #0]
 8016172:	4770      	bx	lr

08016174 <put_memory>:
 8016174:	684b      	ldr	r3, [r1, #4]
 8016176:	b10b      	cbz	r3, 801617c <put_memory+0x8>
 8016178:	688a      	ldr	r2, [r1, #8]
 801617a:	609a      	str	r2, [r3, #8]
 801617c:	688a      	ldr	r2, [r1, #8]
 801617e:	b102      	cbz	r2, 8016182 <put_memory+0xe>
 8016180:	6053      	str	r3, [r2, #4]
 8016182:	6803      	ldr	r3, [r0, #0]
 8016184:	428b      	cmp	r3, r1
 8016186:	6843      	ldr	r3, [r0, #4]
 8016188:	bf08      	it	eq
 801618a:	6002      	streq	r2, [r0, #0]
 801618c:	608b      	str	r3, [r1, #8]
 801618e:	b103      	cbz	r3, 8016192 <put_memory+0x1e>
 8016190:	6059      	str	r1, [r3, #4]
 8016192:	2300      	movs	r3, #0
 8016194:	604b      	str	r3, [r1, #4]
 8016196:	6041      	str	r1, [r0, #4]
 8016198:	4770      	bx	lr
 801619a:	bf00      	nop

0801619c <rmw_destroy_client>:
 801619c:	b570      	push	{r4, r5, r6, lr}
 801619e:	b128      	cbz	r0, 80161ac <rmw_destroy_client+0x10>
 80161a0:	4604      	mov	r4, r0
 80161a2:	6800      	ldr	r0, [r0, #0]
 80161a4:	460d      	mov	r5, r1
 80161a6:	f7f8 fe57 	bl	800ee58 <is_uxrce_rmw_identifier_valid>
 80161aa:	b910      	cbnz	r0, 80161b2 <rmw_destroy_client+0x16>
 80161ac:	2401      	movs	r4, #1
 80161ae:	4620      	mov	r0, r4
 80161b0:	bd70      	pop	{r4, r5, r6, pc}
 80161b2:	6863      	ldr	r3, [r4, #4]
 80161b4:	2b00      	cmp	r3, #0
 80161b6:	d0f9      	beq.n	80161ac <rmw_destroy_client+0x10>
 80161b8:	2d00      	cmp	r5, #0
 80161ba:	d0f7      	beq.n	80161ac <rmw_destroy_client+0x10>
 80161bc:	6828      	ldr	r0, [r5, #0]
 80161be:	f7f8 fe4b 	bl	800ee58 <is_uxrce_rmw_identifier_valid>
 80161c2:	2800      	cmp	r0, #0
 80161c4:	d0f2      	beq.n	80161ac <rmw_destroy_client+0x10>
 80161c6:	686e      	ldr	r6, [r5, #4]
 80161c8:	2e00      	cmp	r6, #0
 80161ca:	d0ef      	beq.n	80161ac <rmw_destroy_client+0x10>
 80161cc:	6864      	ldr	r4, [r4, #4]
 80161ce:	6932      	ldr	r2, [r6, #16]
 80161d0:	6920      	ldr	r0, [r4, #16]
 80161d2:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 80161d6:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 80161da:	6819      	ldr	r1, [r3, #0]
 80161dc:	f002 f94c 	bl	8018478 <uxr_buffer_cancel_data>
 80161e0:	4602      	mov	r2, r0
 80161e2:	6920      	ldr	r0, [r4, #16]
 80161e4:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 80161e8:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 80161ec:	f7f8 fdb4 	bl	800ed58 <run_xrce_session>
 80161f0:	6920      	ldr	r0, [r4, #16]
 80161f2:	6932      	ldr	r2, [r6, #16]
 80161f4:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 80161f8:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 80161fc:	6819      	ldr	r1, [r3, #0]
 80161fe:	f7fa f9e9 	bl	80105d4 <uxr_buffer_delete_entity>
 8016202:	4602      	mov	r2, r0
 8016204:	6920      	ldr	r0, [r4, #16]
 8016206:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 801620a:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 801620e:	f7f8 fda3 	bl	800ed58 <run_xrce_session>
 8016212:	2800      	cmp	r0, #0
 8016214:	4628      	mov	r0, r5
 8016216:	bf14      	ite	ne
 8016218:	2400      	movne	r4, #0
 801621a:	2402      	moveq	r4, #2
 801621c:	f7f8 fc8c 	bl	800eb38 <rmw_uxrce_fini_client_memory>
 8016220:	e7c5      	b.n	80161ae <rmw_destroy_client+0x12>
 8016222:	bf00      	nop

08016224 <rmw_get_implementation_identifier>:
 8016224:	4b01      	ldr	r3, [pc, #4]	@ (801622c <rmw_get_implementation_identifier+0x8>)
 8016226:	6818      	ldr	r0, [r3, #0]
 8016228:	4770      	bx	lr
 801622a:	bf00      	nop
 801622c:	0801b510 	.word	0x0801b510

08016230 <rmw_init_options_init>:
 8016230:	b084      	sub	sp, #16
 8016232:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8016236:	ad09      	add	r5, sp, #36	@ 0x24
 8016238:	e885 000e 	stmia.w	r5, {r1, r2, r3}
 801623c:	b130      	cbz	r0, 801624c <rmw_init_options_init+0x1c>
 801623e:	4604      	mov	r4, r0
 8016240:	4628      	mov	r0, r5
 8016242:	f7f7 fef9 	bl	800e038 <rcutils_allocator_is_valid>
 8016246:	b108      	cbz	r0, 801624c <rmw_init_options_init+0x1c>
 8016248:	68a3      	ldr	r3, [r4, #8]
 801624a:	b123      	cbz	r3, 8016256 <rmw_init_options_init+0x26>
 801624c:	200b      	movs	r0, #11
 801624e:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8016252:	b004      	add	sp, #16
 8016254:	4770      	bx	lr
 8016256:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8016258:	4f1c      	ldr	r7, [pc, #112]	@ (80162cc <rmw_init_options_init+0x9c>)
 801625a:	682e      	ldr	r6, [r5, #0]
 801625c:	683d      	ldr	r5, [r7, #0]
 801625e:	60a5      	str	r5, [r4, #8]
 8016260:	f04f 0800 	mov.w	r8, #0
 8016264:	f04f 0900 	mov.w	r9, #0
 8016268:	f104 0520 	add.w	r5, r4, #32
 801626c:	e9c4 8900 	strd	r8, r9, [r4]
 8016270:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8016272:	4b17      	ldr	r3, [pc, #92]	@ (80162d0 <rmw_init_options_init+0xa0>)
 8016274:	4817      	ldr	r0, [pc, #92]	@ (80162d4 <rmw_init_options_init+0xa4>)
 8016276:	602e      	str	r6, [r5, #0]
 8016278:	4917      	ldr	r1, [pc, #92]	@ (80162d8 <rmw_init_options_init+0xa8>)
 801627a:	61e3      	str	r3, [r4, #28]
 801627c:	2203      	movs	r2, #3
 801627e:	f7f8 fbab 	bl	800e9d8 <rmw_uxrce_init_init_options_impl_memory>
 8016282:	4814      	ldr	r0, [pc, #80]	@ (80162d4 <rmw_init_options_init+0xa4>)
 8016284:	f7ff ff66 	bl	8016154 <get_memory>
 8016288:	b1e8      	cbz	r0, 80162c6 <rmw_init_options_init+0x96>
 801628a:	4a14      	ldr	r2, [pc, #80]	@ (80162dc <rmw_init_options_init+0xac>)
 801628c:	68c3      	ldr	r3, [r0, #12]
 801628e:	6851      	ldr	r1, [r2, #4]
 8016290:	7810      	ldrb	r0, [r2, #0]
 8016292:	6363      	str	r3, [r4, #52]	@ 0x34
 8016294:	7418      	strb	r0, [r3, #16]
 8016296:	6159      	str	r1, [r3, #20]
 8016298:	e9d2 5002 	ldrd	r5, r0, [r2, #8]
 801629c:	e9d2 1204 	ldrd	r1, r2, [r2, #16]
 80162a0:	e9c3 5006 	strd	r5, r0, [r3, #24]
 80162a4:	e9c3 1208 	strd	r1, r2, [r3, #32]
 80162a8:	f7fb fe06 	bl	8011eb8 <uxr_nanos>
 80162ac:	f003 f9f2 	bl	8019694 <srand>
 80162b0:	f003 fa1e 	bl	80196f0 <rand>
 80162b4:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80162b6:	6298      	str	r0, [r3, #40]	@ 0x28
 80162b8:	2800      	cmp	r0, #0
 80162ba:	d0f9      	beq.n	80162b0 <rmw_init_options_init+0x80>
 80162bc:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80162c0:	2000      	movs	r0, #0
 80162c2:	b004      	add	sp, #16
 80162c4:	4770      	bx	lr
 80162c6:	2001      	movs	r0, #1
 80162c8:	e7c1      	b.n	801624e <rmw_init_options_init+0x1e>
 80162ca:	bf00      	nop
 80162cc:	0801b510 	.word	0x0801b510
 80162d0:	0801b028 	.word	0x0801b028
 80162d4:	2000ab74 	.word	0x2000ab74
 80162d8:	2000a7c8 	.word	0x2000a7c8
 80162dc:	20007858 	.word	0x20007858

080162e0 <rmw_init_options_copy>:
 80162e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80162e2:	b158      	cbz	r0, 80162fc <rmw_init_options_copy+0x1c>
 80162e4:	460e      	mov	r6, r1
 80162e6:	b149      	cbz	r1, 80162fc <rmw_init_options_copy+0x1c>
 80162e8:	4604      	mov	r4, r0
 80162ea:	6880      	ldr	r0, [r0, #8]
 80162ec:	b120      	cbz	r0, 80162f8 <rmw_init_options_copy+0x18>
 80162ee:	4b1b      	ldr	r3, [pc, #108]	@ (801635c <rmw_init_options_copy+0x7c>)
 80162f0:	6819      	ldr	r1, [r3, #0]
 80162f2:	f7e9 ff6d 	bl	80001d0 <strcmp>
 80162f6:	bb60      	cbnz	r0, 8016352 <rmw_init_options_copy+0x72>
 80162f8:	68b3      	ldr	r3, [r6, #8]
 80162fa:	b113      	cbz	r3, 8016302 <rmw_init_options_copy+0x22>
 80162fc:	230b      	movs	r3, #11
 80162fe:	4618      	mov	r0, r3
 8016300:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8016302:	4623      	mov	r3, r4
 8016304:	4632      	mov	r2, r6
 8016306:	f104 0c30 	add.w	ip, r4, #48	@ 0x30
 801630a:	681d      	ldr	r5, [r3, #0]
 801630c:	6858      	ldr	r0, [r3, #4]
 801630e:	6899      	ldr	r1, [r3, #8]
 8016310:	68df      	ldr	r7, [r3, #12]
 8016312:	60d7      	str	r7, [r2, #12]
 8016314:	3310      	adds	r3, #16
 8016316:	4563      	cmp	r3, ip
 8016318:	6015      	str	r5, [r2, #0]
 801631a:	6050      	str	r0, [r2, #4]
 801631c:	6091      	str	r1, [r2, #8]
 801631e:	f102 0210 	add.w	r2, r2, #16
 8016322:	d1f2      	bne.n	801630a <rmw_init_options_copy+0x2a>
 8016324:	6819      	ldr	r1, [r3, #0]
 8016326:	685b      	ldr	r3, [r3, #4]
 8016328:	480d      	ldr	r0, [pc, #52]	@ (8016360 <rmw_init_options_copy+0x80>)
 801632a:	6053      	str	r3, [r2, #4]
 801632c:	6011      	str	r1, [r2, #0]
 801632e:	f7ff ff11 	bl	8016154 <get_memory>
 8016332:	b188      	cbz	r0, 8016358 <rmw_init_options_copy+0x78>
 8016334:	68c5      	ldr	r5, [r0, #12]
 8016336:	6375      	str	r5, [r6, #52]	@ 0x34
 8016338:	6b66      	ldr	r6, [r4, #52]	@ 0x34
 801633a:	3610      	adds	r6, #16
 801633c:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 801633e:	f105 0410 	add.w	r4, r5, #16
 8016342:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8016344:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
 8016348:	2300      	movs	r3, #0
 801634a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 801634e:	4618      	mov	r0, r3
 8016350:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8016352:	230c      	movs	r3, #12
 8016354:	4618      	mov	r0, r3
 8016356:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8016358:	2301      	movs	r3, #1
 801635a:	e7d0      	b.n	80162fe <rmw_init_options_copy+0x1e>
 801635c:	0801b510 	.word	0x0801b510
 8016360:	2000ab74 	.word	0x2000ab74

08016364 <rmw_init_options_fini>:
 8016364:	2800      	cmp	r0, #0
 8016366:	d036      	beq.n	80163d6 <rmw_init_options_fini+0x72>
 8016368:	b530      	push	{r4, r5, lr}
 801636a:	4604      	mov	r4, r0
 801636c:	b08f      	sub	sp, #60	@ 0x3c
 801636e:	3020      	adds	r0, #32
 8016370:	f7f7 fe62 	bl	800e038 <rcutils_allocator_is_valid>
 8016374:	b328      	cbz	r0, 80163c2 <rmw_init_options_fini+0x5e>
 8016376:	68a0      	ldr	r0, [r4, #8]
 8016378:	b120      	cbz	r0, 8016384 <rmw_init_options_fini+0x20>
 801637a:	4b18      	ldr	r3, [pc, #96]	@ (80163dc <rmw_init_options_fini+0x78>)
 801637c:	6819      	ldr	r1, [r3, #0]
 801637e:	f7e9 ff27 	bl	80001d0 <strcmp>
 8016382:	bb30      	cbnz	r0, 80163d2 <rmw_init_options_fini+0x6e>
 8016384:	4b16      	ldr	r3, [pc, #88]	@ (80163e0 <rmw_init_options_fini+0x7c>)
 8016386:	6819      	ldr	r1, [r3, #0]
 8016388:	b1f9      	cbz	r1, 80163ca <rmw_init_options_fini+0x66>
 801638a:	6b62      	ldr	r2, [r4, #52]	@ 0x34
 801638c:	e001      	b.n	8016392 <rmw_init_options_fini+0x2e>
 801638e:	6889      	ldr	r1, [r1, #8]
 8016390:	b1d9      	cbz	r1, 80163ca <rmw_init_options_fini+0x66>
 8016392:	68cb      	ldr	r3, [r1, #12]
 8016394:	429a      	cmp	r2, r3
 8016396:	d1fa      	bne.n	801638e <rmw_init_options_fini+0x2a>
 8016398:	4811      	ldr	r0, [pc, #68]	@ (80163e0 <rmw_init_options_fini+0x7c>)
 801639a:	f7ff feeb 	bl	8016174 <put_memory>
 801639e:	466d      	mov	r5, sp
 80163a0:	4668      	mov	r0, sp
 80163a2:	f7ff fde3 	bl	8015f6c <rmw_get_zero_initialized_init_options>
 80163a6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80163a8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80163aa:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80163ac:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80163ae:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80163b0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80163b2:	e895 0003 	ldmia.w	r5, {r0, r1}
 80163b6:	e884 0003 	stmia.w	r4, {r0, r1}
 80163ba:	2300      	movs	r3, #0
 80163bc:	4618      	mov	r0, r3
 80163be:	b00f      	add	sp, #60	@ 0x3c
 80163c0:	bd30      	pop	{r4, r5, pc}
 80163c2:	230b      	movs	r3, #11
 80163c4:	4618      	mov	r0, r3
 80163c6:	b00f      	add	sp, #60	@ 0x3c
 80163c8:	bd30      	pop	{r4, r5, pc}
 80163ca:	2301      	movs	r3, #1
 80163cc:	4618      	mov	r0, r3
 80163ce:	b00f      	add	sp, #60	@ 0x3c
 80163d0:	bd30      	pop	{r4, r5, pc}
 80163d2:	230c      	movs	r3, #12
 80163d4:	e7f2      	b.n	80163bc <rmw_init_options_fini+0x58>
 80163d6:	230b      	movs	r3, #11
 80163d8:	4618      	mov	r0, r3
 80163da:	4770      	bx	lr
 80163dc:	0801b510 	.word	0x0801b510
 80163e0:	2000ab74 	.word	0x2000ab74

080163e4 <rmw_init>:
 80163e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80163e8:	b082      	sub	sp, #8
 80163ea:	2800      	cmp	r0, #0
 80163ec:	f000 80d6 	beq.w	801659c <rmw_init+0x1b8>
 80163f0:	460e      	mov	r6, r1
 80163f2:	2900      	cmp	r1, #0
 80163f4:	f000 80d2 	beq.w	801659c <rmw_init+0x1b8>
 80163f8:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 80163fa:	4605      	mov	r5, r0
 80163fc:	2b00      	cmp	r3, #0
 80163fe:	f000 80cd 	beq.w	801659c <rmw_init+0x1b8>
 8016402:	4b79      	ldr	r3, [pc, #484]	@ (80165e8 <rmw_init+0x204>)
 8016404:	6880      	ldr	r0, [r0, #8]
 8016406:	f8d3 9000 	ldr.w	r9, [r3]
 801640a:	b128      	cbz	r0, 8016418 <rmw_init+0x34>
 801640c:	4649      	mov	r1, r9
 801640e:	f7e9 fedf 	bl	80001d0 <strcmp>
 8016412:	2800      	cmp	r0, #0
 8016414:	f040 80cc 	bne.w	80165b0 <rmw_init+0x1cc>
 8016418:	e9d5 0100 	ldrd	r0, r1, [r5]
 801641c:	68eb      	ldr	r3, [r5, #12]
 801641e:	61f3      	str	r3, [r6, #28]
 8016420:	e9c6 0100 	strd	r0, r1, [r6]
 8016424:	2201      	movs	r2, #1
 8016426:	4971      	ldr	r1, [pc, #452]	@ (80165ec <rmw_init+0x208>)
 8016428:	4871      	ldr	r0, [pc, #452]	@ (80165f0 <rmw_init+0x20c>)
 801642a:	f8c6 9008 	str.w	r9, [r6, #8]
 801642e:	f7f8 fa7b 	bl	800e928 <rmw_uxrce_init_session_memory>
 8016432:	4870      	ldr	r0, [pc, #448]	@ (80165f4 <rmw_init+0x210>)
 8016434:	4970      	ldr	r1, [pc, #448]	@ (80165f8 <rmw_init+0x214>)
 8016436:	2204      	movs	r2, #4
 8016438:	f7f8 fab0 	bl	800e99c <rmw_uxrce_init_static_input_buffer_memory>
 801643c:	486c      	ldr	r0, [pc, #432]	@ (80165f0 <rmw_init+0x20c>)
 801643e:	f7ff fe89 	bl	8016154 <get_memory>
 8016442:	2800      	cmp	r0, #0
 8016444:	f000 80af 	beq.w	80165a6 <rmw_init+0x1c2>
 8016448:	6b6f      	ldr	r7, [r5, #52]	@ 0x34
 801644a:	68c4      	ldr	r4, [r0, #12]
 801644c:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 801644e:	7c39      	ldrb	r1, [r7, #16]
 8016450:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8016454:	9001      	str	r0, [sp, #4]
 8016456:	6a38      	ldr	r0, [r7, #32]
 8016458:	9000      	str	r0, [sp, #0]
 801645a:	f104 0a10 	add.w	sl, r4, #16
 801645e:	4650      	mov	r0, sl
 8016460:	f001 fa5a 	bl	8017918 <uxr_set_custom_transport_callbacks>
 8016464:	f241 5294 	movw	r2, #5524	@ 0x1594
 8016468:	f241 5398 	movw	r3, #5528	@ 0x1598
 801646c:	f04f 0800 	mov.w	r8, #0
 8016470:	f241 509c 	movw	r0, #5532	@ 0x159c
 8016474:	f504 51ad 	add.w	r1, r4, #5536	@ 0x15a0
 8016478:	f844 8002 	str.w	r8, [r4, r2]
 801647c:	f844 8003 	str.w	r8, [r4, r3]
 8016480:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8016484:	f504 735e 	add.w	r3, r4, #888	@ 0x378
 8016488:	f844 8000 	str.w	r8, [r4, r0]
 801648c:	e9c4 33e1 	strd	r3, r3, [r4, #900]	@ 0x384
 8016490:	e9c4 22e3 	strd	r2, r2, [r4, #908]	@ 0x38c
 8016494:	4859      	ldr	r0, [pc, #356]	@ (80165fc <rmw_init+0x218>)
 8016496:	f8c1 8000 	str.w	r8, [r1]
 801649a:	2201      	movs	r2, #1
 801649c:	e9c4 98da 	strd	r9, r8, [r4, #872]	@ 0x368
 80164a0:	4957      	ldr	r1, [pc, #348]	@ (8016600 <rmw_init+0x21c>)
 80164a2:	64b4      	str	r4, [r6, #72]	@ 0x48
 80164a4:	f7f8 fa26 	bl	800e8f4 <rmw_uxrce_init_node_memory>
 80164a8:	4956      	ldr	r1, [pc, #344]	@ (8016604 <rmw_init+0x220>)
 80164aa:	4857      	ldr	r0, [pc, #348]	@ (8016608 <rmw_init+0x224>)
 80164ac:	2205      	movs	r2, #5
 80164ae:	f7f8 fa07 	bl	800e8c0 <rmw_uxrce_init_subscription_memory>
 80164b2:	4956      	ldr	r1, [pc, #344]	@ (801660c <rmw_init+0x228>)
 80164b4:	4856      	ldr	r0, [pc, #344]	@ (8016610 <rmw_init+0x22c>)
 80164b6:	220a      	movs	r2, #10
 80164b8:	f7f8 f9e8 	bl	800e88c <rmw_uxrce_init_publisher_memory>
 80164bc:	4955      	ldr	r1, [pc, #340]	@ (8016614 <rmw_init+0x230>)
 80164be:	4856      	ldr	r0, [pc, #344]	@ (8016618 <rmw_init+0x234>)
 80164c0:	2201      	movs	r2, #1
 80164c2:	f7f8 f9af 	bl	800e824 <rmw_uxrce_init_service_memory>
 80164c6:	4955      	ldr	r1, [pc, #340]	@ (801661c <rmw_init+0x238>)
 80164c8:	4855      	ldr	r0, [pc, #340]	@ (8016620 <rmw_init+0x23c>)
 80164ca:	2201      	movs	r2, #1
 80164cc:	f7f8 f9c4 	bl	800e858 <rmw_uxrce_init_client_memory>
 80164d0:	4954      	ldr	r1, [pc, #336]	@ (8016624 <rmw_init+0x240>)
 80164d2:	4855      	ldr	r0, [pc, #340]	@ (8016628 <rmw_init+0x244>)
 80164d4:	220f      	movs	r2, #15
 80164d6:	f7f8 fa45 	bl	800e964 <rmw_uxrce_init_topic_memory>
 80164da:	4954      	ldr	r1, [pc, #336]	@ (801662c <rmw_init+0x248>)
 80164dc:	4854      	ldr	r0, [pc, #336]	@ (8016630 <rmw_init+0x24c>)
 80164de:	2203      	movs	r2, #3
 80164e0:	f7f8 fa7a 	bl	800e9d8 <rmw_uxrce_init_init_options_impl_memory>
 80164e4:	4953      	ldr	r1, [pc, #332]	@ (8016634 <rmw_init+0x250>)
 80164e6:	4854      	ldr	r0, [pc, #336]	@ (8016638 <rmw_init+0x254>)
 80164e8:	2204      	movs	r2, #4
 80164ea:	f7f8 fa8f 	bl	800ea0c <rmw_uxrce_init_wait_set_memory>
 80164ee:	4953      	ldr	r1, [pc, #332]	@ (801663c <rmw_init+0x258>)
 80164f0:	4853      	ldr	r0, [pc, #332]	@ (8016640 <rmw_init+0x25c>)
 80164f2:	2204      	movs	r2, #4
 80164f4:	f7f8 faa6 	bl	800ea44 <rmw_uxrce_init_guard_condition_memory>
 80164f8:	6b69      	ldr	r1, [r5, #52]	@ 0x34
 80164fa:	6cb0      	ldr	r0, [r6, #72]	@ 0x48
 80164fc:	4642      	mov	r2, r8
 80164fe:	f000 fd49 	bl	8016f94 <rmw_uxrce_transport_init>
 8016502:	4607      	mov	r7, r0
 8016504:	2800      	cmp	r0, #0
 8016506:	d158      	bne.n	80165ba <rmw_init+0x1d6>
 8016508:	6b6b      	ldr	r3, [r5, #52]	@ 0x34
 801650a:	f504 7528 	add.w	r5, r4, #672	@ 0x2a0
 801650e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8016510:	4628      	mov	r0, r5
 8016512:	f504 7122 	add.w	r1, r4, #648	@ 0x288
 8016516:	f7fa fb1b 	bl	8010b50 <uxr_init_session>
 801651a:	494a      	ldr	r1, [pc, #296]	@ (8016644 <rmw_init+0x260>)
 801651c:	4622      	mov	r2, r4
 801651e:	4628      	mov	r0, r5
 8016520:	f7fa fb38 	bl	8010b94 <uxr_set_topic_callback>
 8016524:	4948      	ldr	r1, [pc, #288]	@ (8016648 <rmw_init+0x264>)
 8016526:	463a      	mov	r2, r7
 8016528:	4628      	mov	r0, r5
 801652a:	f7fa fb2f 	bl	8010b8c <uxr_set_status_callback>
 801652e:	4947      	ldr	r1, [pc, #284]	@ (801664c <rmw_init+0x268>)
 8016530:	463a      	mov	r2, r7
 8016532:	4628      	mov	r0, r5
 8016534:	f7fa fb32 	bl	8010b9c <uxr_set_request_callback>
 8016538:	4945      	ldr	r1, [pc, #276]	@ (8016650 <rmw_init+0x26c>)
 801653a:	463a      	mov	r2, r7
 801653c:	4628      	mov	r0, r5
 801653e:	f7fa fb31 	bl	8010ba4 <uxr_set_reply_callback>
 8016542:	f8b4 2298 	ldrh.w	r2, [r4, #664]	@ 0x298
 8016546:	2304      	movs	r3, #4
 8016548:	0092      	lsls	r2, r2, #2
 801654a:	f504 7165 	add.w	r1, r4, #916	@ 0x394
 801654e:	4628      	mov	r0, r5
 8016550:	f7fa fb68 	bl	8010c24 <uxr_create_input_reliable_stream>
 8016554:	f8b4 2298 	ldrh.w	r2, [r4, #664]	@ 0x298
 8016558:	f8c4 0374 	str.w	r0, [r4, #884]	@ 0x374
 801655c:	0092      	lsls	r2, r2, #2
 801655e:	2304      	movs	r3, #4
 8016560:	f604 3194 	addw	r1, r4, #2964	@ 0xb94
 8016564:	4628      	mov	r0, r5
 8016566:	f7fa fb33 	bl	8010bd0 <uxr_create_output_reliable_stream>
 801656a:	f8c4 0378 	str.w	r0, [r4, #888]	@ 0x378
 801656e:	4628      	mov	r0, r5
 8016570:	f7fa fb52 	bl	8010c18 <uxr_create_input_best_effort_stream>
 8016574:	f504 519c 	add.w	r1, r4, #4992	@ 0x1380
 8016578:	f8c4 0380 	str.w	r0, [r4, #896]	@ 0x380
 801657c:	f8b4 2298 	ldrh.w	r2, [r4, #664]	@ 0x298
 8016580:	4628      	mov	r0, r5
 8016582:	3114      	adds	r1, #20
 8016584:	f7fa fb12 	bl	8010bac <uxr_create_output_best_effort_stream>
 8016588:	f8c4 037c 	str.w	r0, [r4, #892]	@ 0x37c
 801658c:	4628      	mov	r0, r5
 801658e:	f7fa ffa3 	bl	80114d8 <uxr_create_session>
 8016592:	b1f8      	cbz	r0, 80165d4 <rmw_init+0x1f0>
 8016594:	4638      	mov	r0, r7
 8016596:	b002      	add	sp, #8
 8016598:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801659c:	270b      	movs	r7, #11
 801659e:	4638      	mov	r0, r7
 80165a0:	b002      	add	sp, #8
 80165a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80165a6:	2701      	movs	r7, #1
 80165a8:	4638      	mov	r0, r7
 80165aa:	b002      	add	sp, #8
 80165ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80165b0:	270c      	movs	r7, #12
 80165b2:	4638      	mov	r0, r7
 80165b4:	b002      	add	sp, #8
 80165b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80165ba:	4650      	mov	r0, sl
 80165bc:	f001 f9ec 	bl	8017998 <uxr_close_custom_transport>
 80165c0:	480b      	ldr	r0, [pc, #44]	@ (80165f0 <rmw_init+0x20c>)
 80165c2:	4621      	mov	r1, r4
 80165c4:	f7ff fdd6 	bl	8016174 <put_memory>
 80165c8:	4638      	mov	r0, r7
 80165ca:	f8c6 8048 	str.w	r8, [r6, #72]	@ 0x48
 80165ce:	b002      	add	sp, #8
 80165d0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80165d4:	4650      	mov	r0, sl
 80165d6:	f001 f9df 	bl	8017998 <uxr_close_custom_transport>
 80165da:	4805      	ldr	r0, [pc, #20]	@ (80165f0 <rmw_init+0x20c>)
 80165dc:	4621      	mov	r1, r4
 80165de:	f7ff fdc9 	bl	8016174 <put_memory>
 80165e2:	64b7      	str	r7, [r6, #72]	@ 0x48
 80165e4:	2701      	movs	r7, #1
 80165e6:	e7d5      	b.n	8016594 <rmw_init+0x1b0>
 80165e8:	0801b510 	.word	0x0801b510
 80165ec:	2000ac50 	.word	0x2000ac50
 80165f0:	2000aa20 	.word	0x2000aa20
 80165f4:	20007878 	.word	0x20007878
 80165f8:	20008658 	.word	0x20008658
 80165fc:	2000a84c 	.word	0x2000a84c
 8016600:	2000aa30 	.word	0x2000aa30
 8016604:	20008180 	.word	0x20008180
 8016608:	2000aae4 	.word	0x2000aae4
 801660c:	20007898 	.word	0x20007898
 8016610:	20007888 	.word	0x20007888
 8016614:	2000ab88 	.word	0x2000ab88
 8016618:	2000aad4 	.word	0x2000aad4
 801661c:	20008590 	.word	0x20008590
 8016620:	20008108 	.word	0x20008108
 8016624:	2000a85c 	.word	0x2000a85c
 8016628:	2000aa10 	.word	0x2000aa10
 801662c:	2000a7c8 	.word	0x2000a7c8
 8016630:	2000ab74 	.word	0x2000ab74
 8016634:	2000a758 	.word	0x2000a758
 8016638:	2000c1f8 	.word	0x2000c1f8
 801663c:	2000aaf4 	.word	0x2000aaf4
 8016640:	2000aa00 	.word	0x2000aa00
 8016644:	08019221 	.word	0x08019221
 8016648:	08019219 	.word	0x08019219
 801664c:	080192b5 	.word	0x080192b5
 8016650:	0801934d 	.word	0x0801934d

08016654 <rmw_context_fini>:
 8016654:	4b17      	ldr	r3, [pc, #92]	@ (80166b4 <rmw_context_fini+0x60>)
 8016656:	b570      	push	{r4, r5, r6, lr}
 8016658:	681c      	ldr	r4, [r3, #0]
 801665a:	4605      	mov	r5, r0
 801665c:	6c80      	ldr	r0, [r0, #72]	@ 0x48
 801665e:	b33c      	cbz	r4, 80166b0 <rmw_context_fini+0x5c>
 8016660:	2600      	movs	r6, #0
 8016662:	e9d4 4302 	ldrd	r4, r3, [r4, #8]
 8016666:	691a      	ldr	r2, [r3, #16]
 8016668:	4282      	cmp	r2, r0
 801666a:	d018      	beq.n	801669e <rmw_context_fini+0x4a>
 801666c:	2c00      	cmp	r4, #0
 801666e:	d1f8      	bne.n	8016662 <rmw_context_fini+0xe>
 8016670:	b188      	cbz	r0, 8016696 <rmw_context_fini+0x42>
 8016672:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 8016676:	789b      	ldrb	r3, [r3, #2]
 8016678:	2b01      	cmp	r3, #1
 801667a:	bf14      	ite	ne
 801667c:	210a      	movne	r1, #10
 801667e:	2100      	moveq	r1, #0
 8016680:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8016684:	f7fb f8ea 	bl	801185c <uxr_delete_session_retries>
 8016688:	6ca8      	ldr	r0, [r5, #72]	@ 0x48
 801668a:	f7f8 f9f5 	bl	800ea78 <rmw_uxrce_fini_session_memory>
 801668e:	6ca8      	ldr	r0, [r5, #72]	@ 0x48
 8016690:	3010      	adds	r0, #16
 8016692:	f001 f981 	bl	8017998 <uxr_close_custom_transport>
 8016696:	2300      	movs	r3, #0
 8016698:	4630      	mov	r0, r6
 801669a:	64ab      	str	r3, [r5, #72]	@ 0x48
 801669c:	bd70      	pop	{r4, r5, r6, pc}
 801669e:	f103 0018 	add.w	r0, r3, #24
 80166a2:	f000 f90d 	bl	80168c0 <rmw_destroy_node>
 80166a6:	4606      	mov	r6, r0
 80166a8:	6ca8      	ldr	r0, [r5, #72]	@ 0x48
 80166aa:	2c00      	cmp	r4, #0
 80166ac:	d1d9      	bne.n	8016662 <rmw_context_fini+0xe>
 80166ae:	e7df      	b.n	8016670 <rmw_context_fini+0x1c>
 80166b0:	4626      	mov	r6, r4
 80166b2:	e7dd      	b.n	8016670 <rmw_context_fini+0x1c>
 80166b4:	2000a84c 	.word	0x2000a84c

080166b8 <create_topic>:
 80166b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80166bc:	4607      	mov	r7, r0
 80166be:	b084      	sub	sp, #16
 80166c0:	4822      	ldr	r0, [pc, #136]	@ (801674c <create_topic+0x94>)
 80166c2:	4689      	mov	r9, r1
 80166c4:	4690      	mov	r8, r2
 80166c6:	f7ff fd45 	bl	8016154 <get_memory>
 80166ca:	4604      	mov	r4, r0
 80166cc:	2800      	cmp	r0, #0
 80166ce:	d038      	beq.n	8016742 <create_topic+0x8a>
 80166d0:	693e      	ldr	r6, [r7, #16]
 80166d2:	68c4      	ldr	r4, [r0, #12]
 80166d4:	f8df a07c 	ldr.w	sl, [pc, #124]	@ 8016754 <create_topic+0x9c>
 80166d8:	61a7      	str	r7, [r4, #24]
 80166da:	f241 5596 	movw	r5, #5526	@ 0x1596
 80166de:	f8c4 8014 	str.w	r8, [r4, #20]
 80166e2:	5b70      	ldrh	r0, [r6, r5]
 80166e4:	1c42      	adds	r2, r0, #1
 80166e6:	5372      	strh	r2, [r6, r5]
 80166e8:	2102      	movs	r1, #2
 80166ea:	f7fa f975 	bl	80109d8 <uxr_object_id>
 80166ee:	4651      	mov	r1, sl
 80166f0:	6120      	str	r0, [r4, #16]
 80166f2:	223c      	movs	r2, #60	@ 0x3c
 80166f4:	4648      	mov	r0, r9
 80166f6:	f7f8 fb95 	bl	800ee24 <generate_topic_name>
 80166fa:	b1f0      	cbz	r0, 801673a <create_topic+0x82>
 80166fc:	4d14      	ldr	r5, [pc, #80]	@ (8016750 <create_topic+0x98>)
 80166fe:	4640      	mov	r0, r8
 8016700:	4629      	mov	r1, r5
 8016702:	2264      	movs	r2, #100	@ 0x64
 8016704:	f7f8 fb5e 	bl	800edc4 <generate_type_name>
 8016708:	b1b8      	cbz	r0, 801673a <create_topic+0x82>
 801670a:	e9d7 0304 	ldrd	r0, r3, [r7, #16]
 801670e:	2106      	movs	r1, #6
 8016710:	f8d0 2384 	ldr.w	r2, [r0, #900]	@ 0x384
 8016714:	9501      	str	r5, [sp, #4]
 8016716:	f8cd a000 	str.w	sl, [sp]
 801671a:	9102      	str	r1, [sp, #8]
 801671c:	6811      	ldr	r1, [r2, #0]
 801671e:	6922      	ldr	r2, [r4, #16]
 8016720:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8016724:	f7f9 ffd4 	bl	80106d0 <uxr_buffer_create_topic_bin>
 8016728:	4602      	mov	r2, r0
 801672a:	6938      	ldr	r0, [r7, #16]
 801672c:	f8d0 338c 	ldr.w	r3, [r0, #908]	@ 0x38c
 8016730:	f8d0 1384 	ldr.w	r1, [r0, #900]	@ 0x384
 8016734:	f7f8 fb10 	bl	800ed58 <run_xrce_session>
 8016738:	b918      	cbnz	r0, 8016742 <create_topic+0x8a>
 801673a:	4620      	mov	r0, r4
 801673c:	f7f8 fa12 	bl	800eb64 <rmw_uxrce_fini_topic_memory>
 8016740:	2400      	movs	r4, #0
 8016742:	4620      	mov	r0, r4
 8016744:	b004      	add	sp, #16
 8016746:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801674a:	bf00      	nop
 801674c:	2000aa10 	.word	0x2000aa10
 8016750:	2000763c 	.word	0x2000763c
 8016754:	20007600 	.word	0x20007600

08016758 <destroy_topic>:
 8016758:	b538      	push	{r3, r4, r5, lr}
 801675a:	6985      	ldr	r5, [r0, #24]
 801675c:	b1d5      	cbz	r5, 8016794 <destroy_topic+0x3c>
 801675e:	4604      	mov	r4, r0
 8016760:	6928      	ldr	r0, [r5, #16]
 8016762:	6922      	ldr	r2, [r4, #16]
 8016764:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 8016768:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 801676c:	6819      	ldr	r1, [r3, #0]
 801676e:	f7f9 ff31 	bl	80105d4 <uxr_buffer_delete_entity>
 8016772:	4602      	mov	r2, r0
 8016774:	6928      	ldr	r0, [r5, #16]
 8016776:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 801677a:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 801677e:	f7f8 faeb 	bl	800ed58 <run_xrce_session>
 8016782:	2800      	cmp	r0, #0
 8016784:	4620      	mov	r0, r4
 8016786:	bf14      	ite	ne
 8016788:	2400      	movne	r4, #0
 801678a:	2402      	moveq	r4, #2
 801678c:	f7f8 f9ea 	bl	800eb64 <rmw_uxrce_fini_topic_memory>
 8016790:	4620      	mov	r0, r4
 8016792:	bd38      	pop	{r3, r4, r5, pc}
 8016794:	2401      	movs	r4, #1
 8016796:	4620      	mov	r0, r4
 8016798:	bd38      	pop	{r3, r4, r5, pc}
 801679a:	bf00      	nop

0801679c <create_node>:
 801679c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80167a0:	b083      	sub	sp, #12
 80167a2:	2b00      	cmp	r3, #0
 80167a4:	d05f      	beq.n	8016866 <create_node+0xca>
 80167a6:	4606      	mov	r6, r0
 80167a8:	4835      	ldr	r0, [pc, #212]	@ (8016880 <create_node+0xe4>)
 80167aa:	460f      	mov	r7, r1
 80167ac:	4690      	mov	r8, r2
 80167ae:	461d      	mov	r5, r3
 80167b0:	f7ff fcd0 	bl	8016154 <get_memory>
 80167b4:	2800      	cmp	r0, #0
 80167b6:	d056      	beq.n	8016866 <create_node+0xca>
 80167b8:	68c4      	ldr	r4, [r0, #12]
 80167ba:	6cab      	ldr	r3, [r5, #72]	@ 0x48
 80167bc:	6123      	str	r3, [r4, #16]
 80167be:	f7ff fd31 	bl	8016224 <rmw_get_implementation_identifier>
 80167c2:	f104 092c 	add.w	r9, r4, #44	@ 0x2c
 80167c6:	e9c4 0406 	strd	r0, r4, [r4, #24]
 80167ca:	f8c4 9020 	str.w	r9, [r4, #32]
 80167ce:	4630      	mov	r0, r6
 80167d0:	f7e9 fd08 	bl	80001e4 <strlen>
 80167d4:	1c42      	adds	r2, r0, #1
 80167d6:	2a3c      	cmp	r2, #60	@ 0x3c
 80167d8:	f104 0518 	add.w	r5, r4, #24
 80167dc:	d840      	bhi.n	8016860 <create_node+0xc4>
 80167de:	4648      	mov	r0, r9
 80167e0:	4631      	mov	r1, r6
 80167e2:	f104 0968 	add.w	r9, r4, #104	@ 0x68
 80167e6:	f003 fb2c 	bl	8019e42 <memcpy>
 80167ea:	f8c4 9024 	str.w	r9, [r4, #36]	@ 0x24
 80167ee:	4638      	mov	r0, r7
 80167f0:	f7e9 fcf8 	bl	80001e4 <strlen>
 80167f4:	1c42      	adds	r2, r0, #1
 80167f6:	2a3c      	cmp	r2, #60	@ 0x3c
 80167f8:	d832      	bhi.n	8016860 <create_node+0xc4>
 80167fa:	4639      	mov	r1, r7
 80167fc:	4648      	mov	r0, r9
 80167fe:	f003 fb20 	bl	8019e42 <memcpy>
 8016802:	f241 5394 	movw	r3, #5524	@ 0x1594
 8016806:	6922      	ldr	r2, [r4, #16]
 8016808:	5ad0      	ldrh	r0, [r2, r3]
 801680a:	2101      	movs	r1, #1
 801680c:	eb00 0c01 	add.w	ip, r0, r1
 8016810:	f822 c003 	strh.w	ip, [r2, r3]
 8016814:	f7fa f8e0 	bl	80109d8 <uxr_object_id>
 8016818:	6160      	str	r0, [r4, #20]
 801681a:	783b      	ldrb	r3, [r7, #0]
 801681c:	2b2f      	cmp	r3, #47	@ 0x2f
 801681e:	d127      	bne.n	8016870 <create_node+0xd4>
 8016820:	787b      	ldrb	r3, [r7, #1]
 8016822:	bb2b      	cbnz	r3, 8016870 <create_node+0xd4>
 8016824:	4a17      	ldr	r2, [pc, #92]	@ (8016884 <create_node+0xe8>)
 8016826:	4818      	ldr	r0, [pc, #96]	@ (8016888 <create_node+0xec>)
 8016828:	4633      	mov	r3, r6
 801682a:	213c      	movs	r1, #60	@ 0x3c
 801682c:	f003 f920 	bl	8019a70 <sniprintf>
 8016830:	6920      	ldr	r0, [r4, #16]
 8016832:	4b15      	ldr	r3, [pc, #84]	@ (8016888 <create_node+0xec>)
 8016834:	f8d0 2384 	ldr.w	r2, [r0, #900]	@ 0x384
 8016838:	9300      	str	r3, [sp, #0]
 801683a:	2306      	movs	r3, #6
 801683c:	9301      	str	r3, [sp, #4]
 801683e:	6811      	ldr	r1, [r2, #0]
 8016840:	6962      	ldr	r2, [r4, #20]
 8016842:	fa1f f388 	uxth.w	r3, r8
 8016846:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 801684a:	f7f9 ff0f 	bl	801066c <uxr_buffer_create_participant_bin>
 801684e:	4602      	mov	r2, r0
 8016850:	6920      	ldr	r0, [r4, #16]
 8016852:	f8d0 338c 	ldr.w	r3, [r0, #908]	@ 0x38c
 8016856:	f8d0 1384 	ldr.w	r1, [r0, #900]	@ 0x384
 801685a:	f7f8 fa7d 	bl	800ed58 <run_xrce_session>
 801685e:	b918      	cbnz	r0, 8016868 <create_node+0xcc>
 8016860:	4628      	mov	r0, r5
 8016862:	f7f8 f90f 	bl	800ea84 <rmw_uxrce_fini_node_memory>
 8016866:	2500      	movs	r5, #0
 8016868:	4628      	mov	r0, r5
 801686a:	b003      	add	sp, #12
 801686c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8016870:	4a06      	ldr	r2, [pc, #24]	@ (801688c <create_node+0xf0>)
 8016872:	9600      	str	r6, [sp, #0]
 8016874:	463b      	mov	r3, r7
 8016876:	213c      	movs	r1, #60	@ 0x3c
 8016878:	4803      	ldr	r0, [pc, #12]	@ (8016888 <create_node+0xec>)
 801687a:	f003 f8f9 	bl	8019a70 <sniprintf>
 801687e:	e7d7      	b.n	8016830 <create_node+0x94>
 8016880:	2000a84c 	.word	0x2000a84c
 8016884:	0801af8c 	.word	0x0801af8c
 8016888:	200076a0 	.word	0x200076a0
 801688c:	0801afec 	.word	0x0801afec

08016890 <rmw_create_node>:
 8016890:	b199      	cbz	r1, 80168ba <rmw_create_node+0x2a>
 8016892:	b430      	push	{r4, r5}
 8016894:	4615      	mov	r5, r2
 8016896:	461a      	mov	r2, r3
 8016898:	780b      	ldrb	r3, [r1, #0]
 801689a:	460c      	mov	r4, r1
 801689c:	b153      	cbz	r3, 80168b4 <rmw_create_node+0x24>
 801689e:	b14d      	cbz	r5, 80168b4 <rmw_create_node+0x24>
 80168a0:	782b      	ldrb	r3, [r5, #0]
 80168a2:	b13b      	cbz	r3, 80168b4 <rmw_create_node+0x24>
 80168a4:	b902      	cbnz	r2, 80168a8 <rmw_create_node+0x18>
 80168a6:	69c2      	ldr	r2, [r0, #28]
 80168a8:	4603      	mov	r3, r0
 80168aa:	4629      	mov	r1, r5
 80168ac:	4620      	mov	r0, r4
 80168ae:	bc30      	pop	{r4, r5}
 80168b0:	f7ff bf74 	b.w	801679c <create_node>
 80168b4:	2000      	movs	r0, #0
 80168b6:	bc30      	pop	{r4, r5}
 80168b8:	4770      	bx	lr
 80168ba:	2000      	movs	r0, #0
 80168bc:	4770      	bx	lr
 80168be:	bf00      	nop

080168c0 <rmw_destroy_node>:
 80168c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80168c2:	b328      	cbz	r0, 8016910 <rmw_destroy_node+0x50>
 80168c4:	4607      	mov	r7, r0
 80168c6:	6800      	ldr	r0, [r0, #0]
 80168c8:	b120      	cbz	r0, 80168d4 <rmw_destroy_node+0x14>
 80168ca:	4b36      	ldr	r3, [pc, #216]	@ (80169a4 <rmw_destroy_node+0xe4>)
 80168cc:	6819      	ldr	r1, [r3, #0]
 80168ce:	f7e9 fc7f 	bl	80001d0 <strcmp>
 80168d2:	b9e8      	cbnz	r0, 8016910 <rmw_destroy_node+0x50>
 80168d4:	687d      	ldr	r5, [r7, #4]
 80168d6:	b1dd      	cbz	r5, 8016910 <rmw_destroy_node+0x50>
 80168d8:	4b33      	ldr	r3, [pc, #204]	@ (80169a8 <rmw_destroy_node+0xe8>)
 80168da:	681c      	ldr	r4, [r3, #0]
 80168dc:	2c00      	cmp	r4, #0
 80168de:	d05f      	beq.n	80169a0 <rmw_destroy_node+0xe0>
 80168e0:	2600      	movs	r6, #0
 80168e2:	e9d4 4102 	ldrd	r4, r1, [r4, #8]
 80168e6:	f8d1 3080 	ldr.w	r3, [r1, #128]	@ 0x80
 80168ea:	429d      	cmp	r5, r3
 80168ec:	d013      	beq.n	8016916 <rmw_destroy_node+0x56>
 80168ee:	2c00      	cmp	r4, #0
 80168f0:	d1f7      	bne.n	80168e2 <rmw_destroy_node+0x22>
 80168f2:	4b2e      	ldr	r3, [pc, #184]	@ (80169ac <rmw_destroy_node+0xec>)
 80168f4:	681c      	ldr	r4, [r3, #0]
 80168f6:	b1c4      	cbz	r4, 801692a <rmw_destroy_node+0x6a>
 80168f8:	e9d4 4102 	ldrd	r4, r1, [r4, #8]
 80168fc:	6a0b      	ldr	r3, [r1, #32]
 80168fe:	429d      	cmp	r5, r3
 8016900:	d1f9      	bne.n	80168f6 <rmw_destroy_node+0x36>
 8016902:	317c      	adds	r1, #124	@ 0x7c
 8016904:	4638      	mov	r0, r7
 8016906:	f000 fa93 	bl	8016e30 <rmw_destroy_subscription>
 801690a:	2801      	cmp	r0, #1
 801690c:	4606      	mov	r6, r0
 801690e:	d1f2      	bne.n	80168f6 <rmw_destroy_node+0x36>
 8016910:	2601      	movs	r6, #1
 8016912:	4630      	mov	r0, r6
 8016914:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8016916:	3184      	adds	r1, #132	@ 0x84
 8016918:	4638      	mov	r0, r7
 801691a:	f7f7 ff33 	bl	800e784 <rmw_destroy_publisher>
 801691e:	2801      	cmp	r0, #1
 8016920:	4606      	mov	r6, r0
 8016922:	d0f5      	beq.n	8016910 <rmw_destroy_node+0x50>
 8016924:	2c00      	cmp	r4, #0
 8016926:	d1dc      	bne.n	80168e2 <rmw_destroy_node+0x22>
 8016928:	e7e3      	b.n	80168f2 <rmw_destroy_node+0x32>
 801692a:	4b21      	ldr	r3, [pc, #132]	@ (80169b0 <rmw_destroy_node+0xf0>)
 801692c:	681c      	ldr	r4, [r3, #0]
 801692e:	b16c      	cbz	r4, 801694c <rmw_destroy_node+0x8c>
 8016930:	e9d4 4102 	ldrd	r4, r1, [r4, #8]
 8016934:	6f8b      	ldr	r3, [r1, #120]	@ 0x78
 8016936:	429d      	cmp	r5, r3
 8016938:	d1f9      	bne.n	801692e <rmw_destroy_node+0x6e>
 801693a:	317c      	adds	r1, #124	@ 0x7c
 801693c:	4638      	mov	r0, r7
 801693e:	f000 f949 	bl	8016bd4 <rmw_destroy_service>
 8016942:	2801      	cmp	r0, #1
 8016944:	4606      	mov	r6, r0
 8016946:	d0e3      	beq.n	8016910 <rmw_destroy_node+0x50>
 8016948:	2c00      	cmp	r4, #0
 801694a:	d1f1      	bne.n	8016930 <rmw_destroy_node+0x70>
 801694c:	4b19      	ldr	r3, [pc, #100]	@ (80169b4 <rmw_destroy_node+0xf4>)
 801694e:	681c      	ldr	r4, [r3, #0]
 8016950:	b16c      	cbz	r4, 801696e <rmw_destroy_node+0xae>
 8016952:	e9d4 4102 	ldrd	r4, r1, [r4, #8]
 8016956:	6f8b      	ldr	r3, [r1, #120]	@ 0x78
 8016958:	429d      	cmp	r5, r3
 801695a:	d1f9      	bne.n	8016950 <rmw_destroy_node+0x90>
 801695c:	317c      	adds	r1, #124	@ 0x7c
 801695e:	4638      	mov	r0, r7
 8016960:	f7ff fc1c 	bl	801619c <rmw_destroy_client>
 8016964:	2801      	cmp	r0, #1
 8016966:	4606      	mov	r6, r0
 8016968:	d0d2      	beq.n	8016910 <rmw_destroy_node+0x50>
 801696a:	2c00      	cmp	r4, #0
 801696c:	d1f1      	bne.n	8016952 <rmw_destroy_node+0x92>
 801696e:	e9d5 0204 	ldrd	r0, r2, [r5, #16]
 8016972:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 8016976:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 801697a:	6819      	ldr	r1, [r3, #0]
 801697c:	f7f9 fe2a 	bl	80105d4 <uxr_buffer_delete_entity>
 8016980:	4602      	mov	r2, r0
 8016982:	6928      	ldr	r0, [r5, #16]
 8016984:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 8016988:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 801698c:	f7f8 f9e4 	bl	800ed58 <run_xrce_session>
 8016990:	2800      	cmp	r0, #0
 8016992:	bf08      	it	eq
 8016994:	2602      	moveq	r6, #2
 8016996:	4638      	mov	r0, r7
 8016998:	f7f8 f874 	bl	800ea84 <rmw_uxrce_fini_node_memory>
 801699c:	4630      	mov	r0, r6
 801699e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80169a0:	4626      	mov	r6, r4
 80169a2:	e7a6      	b.n	80168f2 <rmw_destroy_node+0x32>
 80169a4:	0801b510 	.word	0x0801b510
 80169a8:	20007888 	.word	0x20007888
 80169ac:	2000aae4 	.word	0x2000aae4
 80169b0:	2000aad4 	.word	0x2000aad4
 80169b4:	20008108 	.word	0x20008108

080169b8 <rmw_node_get_graph_guard_condition>:
 80169b8:	6843      	ldr	r3, [r0, #4]
 80169ba:	6918      	ldr	r0, [r3, #16]
 80169bc:	f500 705a 	add.w	r0, r0, #872	@ 0x368
 80169c0:	4770      	bx	lr
 80169c2:	bf00      	nop

080169c4 <rmw_take_request>:
 80169c4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80169c8:	4605      	mov	r5, r0
 80169ca:	6800      	ldr	r0, [r0, #0]
 80169cc:	b089      	sub	sp, #36	@ 0x24
 80169ce:	460c      	mov	r4, r1
 80169d0:	4690      	mov	r8, r2
 80169d2:	461e      	mov	r6, r3
 80169d4:	b128      	cbz	r0, 80169e2 <rmw_take_request+0x1e>
 80169d6:	4b28      	ldr	r3, [pc, #160]	@ (8016a78 <rmw_take_request+0xb4>)
 80169d8:	6819      	ldr	r1, [r3, #0]
 80169da:	f7e9 fbf9 	bl	80001d0 <strcmp>
 80169de:	2800      	cmp	r0, #0
 80169e0:	d146      	bne.n	8016a70 <rmw_take_request+0xac>
 80169e2:	b10e      	cbz	r6, 80169e8 <rmw_take_request+0x24>
 80169e4:	2300      	movs	r3, #0
 80169e6:	7033      	strb	r3, [r6, #0]
 80169e8:	f8d5 9004 	ldr.w	r9, [r5, #4]
 80169ec:	f7f8 f93c 	bl	800ec68 <rmw_uxrce_clean_expired_static_input_buffer>
 80169f0:	4648      	mov	r0, r9
 80169f2:	f7f8 f90f 	bl	800ec14 <rmw_uxrce_find_static_input_buffer_by_owner>
 80169f6:	4607      	mov	r7, r0
 80169f8:	b3b0      	cbz	r0, 8016a68 <rmw_take_request+0xa4>
 80169fa:	68c5      	ldr	r5, [r0, #12]
 80169fc:	f8d5 2838 	ldr.w	r2, [r5, #2104]	@ 0x838
 8016a00:	f8d5 183c 	ldr.w	r1, [r5, #2108]	@ 0x83c
 8016a04:	f895 3837 	ldrb.w	r3, [r5, #2103]	@ 0x837
 8016a08:	7423      	strb	r3, [r4, #16]
 8016a0a:	e9c4 1208 	strd	r1, r2, [r4, #32]
 8016a0e:	f8b5 3834 	ldrh.w	r3, [r5, #2100]	@ 0x834
 8016a12:	f895 2836 	ldrb.w	r2, [r5, #2102]	@ 0x836
 8016a16:	74e2      	strb	r2, [r4, #19]
 8016a18:	f8a4 3011 	strh.w	r3, [r4, #17]
 8016a1c:	f8d5 2828 	ldr.w	r2, [r5, #2088]	@ 0x828
 8016a20:	f8d5 382c 	ldr.w	r3, [r5, #2092]	@ 0x82c
 8016a24:	f8d5 1830 	ldr.w	r1, [r5, #2096]	@ 0x830
 8016a28:	61e1      	str	r1, [r4, #28]
 8016a2a:	6162      	str	r2, [r4, #20]
 8016a2c:	61a3      	str	r3, [r4, #24]
 8016a2e:	f8d9 3014 	ldr.w	r3, [r9, #20]
 8016a32:	689b      	ldr	r3, [r3, #8]
 8016a34:	4798      	blx	r3
 8016a36:	6844      	ldr	r4, [r0, #4]
 8016a38:	f8d5 2810 	ldr.w	r2, [r5, #2064]	@ 0x810
 8016a3c:	f105 0110 	add.w	r1, r5, #16
 8016a40:	4668      	mov	r0, sp
 8016a42:	f7f9 fcd3 	bl	80103ec <ucdr_init_buffer>
 8016a46:	68e3      	ldr	r3, [r4, #12]
 8016a48:	4641      	mov	r1, r8
 8016a4a:	4668      	mov	r0, sp
 8016a4c:	4798      	blx	r3
 8016a4e:	4639      	mov	r1, r7
 8016a50:	4604      	mov	r4, r0
 8016a52:	480a      	ldr	r0, [pc, #40]	@ (8016a7c <rmw_take_request+0xb8>)
 8016a54:	f7ff fb8e 	bl	8016174 <put_memory>
 8016a58:	b106      	cbz	r6, 8016a5c <rmw_take_request+0x98>
 8016a5a:	7034      	strb	r4, [r6, #0]
 8016a5c:	f084 0001 	eor.w	r0, r4, #1
 8016a60:	b2c0      	uxtb	r0, r0
 8016a62:	b009      	add	sp, #36	@ 0x24
 8016a64:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8016a68:	2001      	movs	r0, #1
 8016a6a:	b009      	add	sp, #36	@ 0x24
 8016a6c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8016a70:	200c      	movs	r0, #12
 8016a72:	b009      	add	sp, #36	@ 0x24
 8016a74:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8016a78:	0801b510 	.word	0x0801b510
 8016a7c:	20007878 	.word	0x20007878

08016a80 <rmw_send_response>:
 8016a80:	b5f0      	push	{r4, r5, r6, r7, lr}
 8016a82:	4605      	mov	r5, r0
 8016a84:	6800      	ldr	r0, [r0, #0]
 8016a86:	b091      	sub	sp, #68	@ 0x44
 8016a88:	460c      	mov	r4, r1
 8016a8a:	4617      	mov	r7, r2
 8016a8c:	b128      	cbz	r0, 8016a9a <rmw_send_response+0x1a>
 8016a8e:	4b2a      	ldr	r3, [pc, #168]	@ (8016b38 <rmw_send_response+0xb8>)
 8016a90:	6819      	ldr	r1, [r3, #0]
 8016a92:	f7e9 fb9d 	bl	80001d0 <strcmp>
 8016a96:	2800      	cmp	r0, #0
 8016a98:	d143      	bne.n	8016b22 <rmw_send_response+0xa2>
 8016a9a:	4623      	mov	r3, r4
 8016a9c:	4626      	mov	r6, r4
 8016a9e:	f853 0f04 	ldr.w	r0, [r3, #4]!
 8016aa2:	f836 ef01 	ldrh.w	lr, [r6, #1]!
 8016aa6:	6859      	ldr	r1, [r3, #4]
 8016aa8:	686d      	ldr	r5, [r5, #4]
 8016aaa:	689a      	ldr	r2, [r3, #8]
 8016aac:	78b3      	ldrb	r3, [r6, #2]
 8016aae:	f894 c000 	ldrb.w	ip, [r4]
 8016ab2:	6966      	ldr	r6, [r4, #20]
 8016ab4:	f88d 3016 	strb.w	r3, [sp, #22]
 8016ab8:	ab02      	add	r3, sp, #8
 8016aba:	f8ad e014 	strh.w	lr, [sp, #20]
 8016abe:	f88d c017 	strb.w	ip, [sp, #23]
 8016ac2:	9606      	str	r6, [sp, #24]
 8016ac4:	c307      	stmia	r3!, {r0, r1, r2}
 8016ac6:	696b      	ldr	r3, [r5, #20]
 8016ac8:	6922      	ldr	r2, [r4, #16]
 8016aca:	9207      	str	r2, [sp, #28]
 8016acc:	68db      	ldr	r3, [r3, #12]
 8016ace:	6fae      	ldr	r6, [r5, #120]	@ 0x78
 8016ad0:	4798      	blx	r3
 8016ad2:	4603      	mov	r3, r0
 8016ad4:	4638      	mov	r0, r7
 8016ad6:	685c      	ldr	r4, [r3, #4]
 8016ad8:	6923      	ldr	r3, [r4, #16]
 8016ada:	4798      	blx	r3
 8016adc:	6933      	ldr	r3, [r6, #16]
 8016ade:	3018      	adds	r0, #24
 8016ae0:	9000      	str	r0, [sp, #0]
 8016ae2:	692a      	ldr	r2, [r5, #16]
 8016ae4:	6f29      	ldr	r1, [r5, #112]	@ 0x70
 8016ae6:	f503 7028 	add.w	r0, r3, #672	@ 0x2a0
 8016aea:	ab08      	add	r3, sp, #32
 8016aec:	f7fb fa84 	bl	8011ff8 <uxr_prepare_output_stream>
 8016af0:	b910      	cbnz	r0, 8016af8 <rmw_send_response+0x78>
 8016af2:	2001      	movs	r0, #1
 8016af4:	b011      	add	sp, #68	@ 0x44
 8016af6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8016af8:	a902      	add	r1, sp, #8
 8016afa:	a808      	add	r0, sp, #32
 8016afc:	f7fc fb9a 	bl	8013234 <uxr_serialize_SampleIdentity>
 8016b00:	68a3      	ldr	r3, [r4, #8]
 8016b02:	a908      	add	r1, sp, #32
 8016b04:	4638      	mov	r0, r7
 8016b06:	4798      	blx	r3
 8016b08:	f895 3072 	ldrb.w	r3, [r5, #114]	@ 0x72
 8016b0c:	6930      	ldr	r0, [r6, #16]
 8016b0e:	2b01      	cmp	r3, #1
 8016b10:	d00a      	beq.n	8016b28 <rmw_send_response+0xa8>
 8016b12:	6f69      	ldr	r1, [r5, #116]	@ 0x74
 8016b14:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8016b18:	f7fa fc66 	bl	80113e8 <uxr_run_session_until_confirm_delivery>
 8016b1c:	2000      	movs	r0, #0
 8016b1e:	b011      	add	sp, #68	@ 0x44
 8016b20:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8016b22:	200c      	movs	r0, #12
 8016b24:	b011      	add	sp, #68	@ 0x44
 8016b26:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8016b28:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8016b2c:	f7fa f8a0 	bl	8010c70 <uxr_flash_output_streams>
 8016b30:	2000      	movs	r0, #0
 8016b32:	b011      	add	sp, #68	@ 0x44
 8016b34:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8016b36:	bf00      	nop
 8016b38:	0801b510 	.word	0x0801b510

08016b3c <rmw_take_response>:
 8016b3c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8016b40:	4604      	mov	r4, r0
 8016b42:	6800      	ldr	r0, [r0, #0]
 8016b44:	b089      	sub	sp, #36	@ 0x24
 8016b46:	4688      	mov	r8, r1
 8016b48:	4617      	mov	r7, r2
 8016b4a:	461d      	mov	r5, r3
 8016b4c:	b120      	cbz	r0, 8016b58 <rmw_take_response+0x1c>
 8016b4e:	4b1f      	ldr	r3, [pc, #124]	@ (8016bcc <rmw_take_response+0x90>)
 8016b50:	6819      	ldr	r1, [r3, #0]
 8016b52:	f7e9 fb3d 	bl	80001d0 <strcmp>
 8016b56:	bb88      	cbnz	r0, 8016bbc <rmw_take_response+0x80>
 8016b58:	b10d      	cbz	r5, 8016b5e <rmw_take_response+0x22>
 8016b5a:	2300      	movs	r3, #0
 8016b5c:	702b      	strb	r3, [r5, #0]
 8016b5e:	f8d4 9004 	ldr.w	r9, [r4, #4]
 8016b62:	f7f8 f881 	bl	800ec68 <rmw_uxrce_clean_expired_static_input_buffer>
 8016b66:	4648      	mov	r0, r9
 8016b68:	f7f8 f854 	bl	800ec14 <rmw_uxrce_find_static_input_buffer_by_owner>
 8016b6c:	4606      	mov	r6, r0
 8016b6e:	b348      	cbz	r0, 8016bc4 <rmw_take_response+0x88>
 8016b70:	68c4      	ldr	r4, [r0, #12]
 8016b72:	f8d9 1014 	ldr.w	r1, [r9, #20]
 8016b76:	f604 0328 	addw	r3, r4, #2088	@ 0x828
 8016b7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016b7e:	68c9      	ldr	r1, [r1, #12]
 8016b80:	e9c8 2308 	strd	r2, r3, [r8, #32]
 8016b84:	4788      	blx	r1
 8016b86:	f8d0 8004 	ldr.w	r8, [r0, #4]
 8016b8a:	f8d4 2810 	ldr.w	r2, [r4, #2064]	@ 0x810
 8016b8e:	f104 0110 	add.w	r1, r4, #16
 8016b92:	4668      	mov	r0, sp
 8016b94:	f7f9 fc2a 	bl	80103ec <ucdr_init_buffer>
 8016b98:	4639      	mov	r1, r7
 8016b9a:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8016b9e:	4668      	mov	r0, sp
 8016ba0:	4798      	blx	r3
 8016ba2:	4631      	mov	r1, r6
 8016ba4:	4604      	mov	r4, r0
 8016ba6:	480a      	ldr	r0, [pc, #40]	@ (8016bd0 <rmw_take_response+0x94>)
 8016ba8:	f7ff fae4 	bl	8016174 <put_memory>
 8016bac:	b105      	cbz	r5, 8016bb0 <rmw_take_response+0x74>
 8016bae:	702c      	strb	r4, [r5, #0]
 8016bb0:	f084 0001 	eor.w	r0, r4, #1
 8016bb4:	b2c0      	uxtb	r0, r0
 8016bb6:	b009      	add	sp, #36	@ 0x24
 8016bb8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8016bbc:	200c      	movs	r0, #12
 8016bbe:	b009      	add	sp, #36	@ 0x24
 8016bc0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8016bc4:	2001      	movs	r0, #1
 8016bc6:	b009      	add	sp, #36	@ 0x24
 8016bc8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8016bcc:	0801b510 	.word	0x0801b510
 8016bd0:	20007878 	.word	0x20007878

08016bd4 <rmw_destroy_service>:
 8016bd4:	b570      	push	{r4, r5, r6, lr}
 8016bd6:	b128      	cbz	r0, 8016be4 <rmw_destroy_service+0x10>
 8016bd8:	4604      	mov	r4, r0
 8016bda:	6800      	ldr	r0, [r0, #0]
 8016bdc:	460d      	mov	r5, r1
 8016bde:	f7f8 f93b 	bl	800ee58 <is_uxrce_rmw_identifier_valid>
 8016be2:	b910      	cbnz	r0, 8016bea <rmw_destroy_service+0x16>
 8016be4:	2401      	movs	r4, #1
 8016be6:	4620      	mov	r0, r4
 8016be8:	bd70      	pop	{r4, r5, r6, pc}
 8016bea:	6863      	ldr	r3, [r4, #4]
 8016bec:	2b00      	cmp	r3, #0
 8016bee:	d0f9      	beq.n	8016be4 <rmw_destroy_service+0x10>
 8016bf0:	2d00      	cmp	r5, #0
 8016bf2:	d0f7      	beq.n	8016be4 <rmw_destroy_service+0x10>
 8016bf4:	6828      	ldr	r0, [r5, #0]
 8016bf6:	f7f8 f92f 	bl	800ee58 <is_uxrce_rmw_identifier_valid>
 8016bfa:	2800      	cmp	r0, #0
 8016bfc:	d0f2      	beq.n	8016be4 <rmw_destroy_service+0x10>
 8016bfe:	686e      	ldr	r6, [r5, #4]
 8016c00:	2e00      	cmp	r6, #0
 8016c02:	d0ef      	beq.n	8016be4 <rmw_destroy_service+0x10>
 8016c04:	6864      	ldr	r4, [r4, #4]
 8016c06:	6932      	ldr	r2, [r6, #16]
 8016c08:	6920      	ldr	r0, [r4, #16]
 8016c0a:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 8016c0e:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8016c12:	6819      	ldr	r1, [r3, #0]
 8016c14:	f001 fc30 	bl	8018478 <uxr_buffer_cancel_data>
 8016c18:	4602      	mov	r2, r0
 8016c1a:	6920      	ldr	r0, [r4, #16]
 8016c1c:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 8016c20:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 8016c24:	f7f8 f898 	bl	800ed58 <run_xrce_session>
 8016c28:	6920      	ldr	r0, [r4, #16]
 8016c2a:	6932      	ldr	r2, [r6, #16]
 8016c2c:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 8016c30:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8016c34:	6819      	ldr	r1, [r3, #0]
 8016c36:	f7f9 fccd 	bl	80105d4 <uxr_buffer_delete_entity>
 8016c3a:	4602      	mov	r2, r0
 8016c3c:	6920      	ldr	r0, [r4, #16]
 8016c3e:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 8016c42:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 8016c46:	f7f8 f887 	bl	800ed58 <run_xrce_session>
 8016c4a:	2800      	cmp	r0, #0
 8016c4c:	4628      	mov	r0, r5
 8016c4e:	bf14      	ite	ne
 8016c50:	2400      	movne	r4, #0
 8016c52:	2402      	moveq	r4, #2
 8016c54:	f7f7 ff5a 	bl	800eb0c <rmw_uxrce_fini_service_memory>
 8016c58:	e7c5      	b.n	8016be6 <rmw_destroy_service+0x12>
 8016c5a:	bf00      	nop

08016c5c <rmw_create_subscription>:
 8016c5c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016c60:	b08d      	sub	sp, #52	@ 0x34
 8016c62:	2800      	cmp	r0, #0
 8016c64:	f000 80cb 	beq.w	8016dfe <rmw_create_subscription+0x1a2>
 8016c68:	460e      	mov	r6, r1
 8016c6a:	2900      	cmp	r1, #0
 8016c6c:	f000 80c7 	beq.w	8016dfe <rmw_create_subscription+0x1a2>
 8016c70:	4604      	mov	r4, r0
 8016c72:	6800      	ldr	r0, [r0, #0]
 8016c74:	4615      	mov	r5, r2
 8016c76:	4698      	mov	r8, r3
 8016c78:	f7f8 f8ee 	bl	800ee58 <is_uxrce_rmw_identifier_valid>
 8016c7c:	2800      	cmp	r0, #0
 8016c7e:	f000 80be 	beq.w	8016dfe <rmw_create_subscription+0x1a2>
 8016c82:	2d00      	cmp	r5, #0
 8016c84:	f000 80bb 	beq.w	8016dfe <rmw_create_subscription+0x1a2>
 8016c88:	782b      	ldrb	r3, [r5, #0]
 8016c8a:	2b00      	cmp	r3, #0
 8016c8c:	f000 80b7 	beq.w	8016dfe <rmw_create_subscription+0x1a2>
 8016c90:	f1b8 0f00 	cmp.w	r8, #0
 8016c94:	f000 80b3 	beq.w	8016dfe <rmw_create_subscription+0x1a2>
 8016c98:	485b      	ldr	r0, [pc, #364]	@ (8016e08 <rmw_create_subscription+0x1ac>)
 8016c9a:	f8d4 9004 	ldr.w	r9, [r4, #4]
 8016c9e:	f7ff fa59 	bl	8016154 <get_memory>
 8016ca2:	4604      	mov	r4, r0
 8016ca4:	2800      	cmp	r0, #0
 8016ca6:	f000 80ab 	beq.w	8016e00 <rmw_create_subscription+0x1a4>
 8016caa:	68c7      	ldr	r7, [r0, #12]
 8016cac:	f8c7 7080 	str.w	r7, [r7, #128]	@ 0x80
 8016cb0:	f7ff fab8 	bl	8016224 <rmw_get_implementation_identifier>
 8016cb4:	f107 0a94 	add.w	sl, r7, #148	@ 0x94
 8016cb8:	67f8      	str	r0, [r7, #124]	@ 0x7c
 8016cba:	f8c7 a084 	str.w	sl, [r7, #132]	@ 0x84
 8016cbe:	4628      	mov	r0, r5
 8016cc0:	f7e9 fa90 	bl	80001e4 <strlen>
 8016cc4:	3001      	adds	r0, #1
 8016cc6:	283c      	cmp	r0, #60	@ 0x3c
 8016cc8:	f107 047c 	add.w	r4, r7, #124	@ 0x7c
 8016ccc:	f200 8090 	bhi.w	8016df0 <rmw_create_subscription+0x194>
 8016cd0:	4a4e      	ldr	r2, [pc, #312]	@ (8016e0c <rmw_create_subscription+0x1b0>)
 8016cd2:	462b      	mov	r3, r5
 8016cd4:	213c      	movs	r1, #60	@ 0x3c
 8016cd6:	4650      	mov	r0, sl
 8016cd8:	f002 feca 	bl	8019a70 <sniprintf>
 8016cdc:	4641      	mov	r1, r8
 8016cde:	f8c7 9020 	str.w	r9, [r7, #32]
 8016ce2:	2250      	movs	r2, #80	@ 0x50
 8016ce4:	f107 0028 	add.w	r0, r7, #40	@ 0x28
 8016ce8:	f003 f8ab 	bl	8019e42 <memcpy>
 8016cec:	4948      	ldr	r1, [pc, #288]	@ (8016e10 <rmw_create_subscription+0x1b4>)
 8016cee:	4630      	mov	r0, r6
 8016cf0:	f7f8 f8c0 	bl	800ee74 <get_message_typesupport_handle>
 8016cf4:	2800      	cmp	r0, #0
 8016cf6:	d07b      	beq.n	8016df0 <rmw_create_subscription+0x194>
 8016cf8:	6842      	ldr	r2, [r0, #4]
 8016cfa:	61ba      	str	r2, [r7, #24]
 8016cfc:	2a00      	cmp	r2, #0
 8016cfe:	d077      	beq.n	8016df0 <rmw_create_subscription+0x194>
 8016d00:	4629      	mov	r1, r5
 8016d02:	4643      	mov	r3, r8
 8016d04:	4648      	mov	r0, r9
 8016d06:	f7ff fcd7 	bl	80166b8 <create_topic>
 8016d0a:	61f8      	str	r0, [r7, #28]
 8016d0c:	2800      	cmp	r0, #0
 8016d0e:	d073      	beq.n	8016df8 <rmw_create_subscription+0x19c>
 8016d10:	f8d9 2010 	ldr.w	r2, [r9, #16]
 8016d14:	f241 539c 	movw	r3, #5532	@ 0x159c
 8016d18:	2104      	movs	r1, #4
 8016d1a:	5ad0      	ldrh	r0, [r2, r3]
 8016d1c:	1c45      	adds	r5, r0, #1
 8016d1e:	52d5      	strh	r5, [r2, r3]
 8016d20:	f7f9 fe5a 	bl	80109d8 <uxr_object_id>
 8016d24:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8016d28:	6138      	str	r0, [r7, #16]
 8016d2a:	f8d3 2384 	ldr.w	r2, [r3, #900]	@ 0x384
 8016d2e:	2606      	movs	r6, #6
 8016d30:	9600      	str	r6, [sp, #0]
 8016d32:	6811      	ldr	r1, [r2, #0]
 8016d34:	693a      	ldr	r2, [r7, #16]
 8016d36:	f503 7028 	add.w	r0, r3, #672	@ 0x2a0
 8016d3a:	f8d9 3014 	ldr.w	r3, [r9, #20]
 8016d3e:	f7f9 fd29 	bl	8010794 <uxr_buffer_create_subscriber_bin>
 8016d42:	4602      	mov	r2, r0
 8016d44:	f8d9 0010 	ldr.w	r0, [r9, #16]
 8016d48:	f8d0 338c 	ldr.w	r3, [r0, #908]	@ 0x38c
 8016d4c:	f8d0 1384 	ldr.w	r1, [r0, #900]	@ 0x384
 8016d50:	f7f8 f802 	bl	800ed58 <run_xrce_session>
 8016d54:	2800      	cmp	r0, #0
 8016d56:	d04b      	beq.n	8016df0 <rmw_create_subscription+0x194>
 8016d58:	f8d9 2010 	ldr.w	r2, [r9, #16]
 8016d5c:	f241 539e 	movw	r3, #5534	@ 0x159e
 8016d60:	4631      	mov	r1, r6
 8016d62:	5ad0      	ldrh	r0, [r2, r3]
 8016d64:	1c45      	adds	r5, r0, #1
 8016d66:	52d5      	strh	r5, [r2, r3]
 8016d68:	f7f9 fe36 	bl	80109d8 <uxr_object_id>
 8016d6c:	ad08      	add	r5, sp, #32
 8016d6e:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8016d72:	69fb      	ldr	r3, [r7, #28]
 8016d74:	6178      	str	r0, [r7, #20]
 8016d76:	4641      	mov	r1, r8
 8016d78:	4628      	mov	r0, r5
 8016d7a:	f8da b384 	ldr.w	fp, [sl, #900]	@ 0x384
 8016d7e:	9305      	str	r3, [sp, #20]
 8016d80:	f7f8 f806 	bl	800ed90 <convert_qos_profile>
 8016d84:	e895 0003 	ldmia.w	r5, {r0, r1}
 8016d88:	9b05      	ldr	r3, [sp, #20]
 8016d8a:	9001      	str	r0, [sp, #4]
 8016d8c:	9603      	str	r6, [sp, #12]
 8016d8e:	f8ad 1008 	strh.w	r1, [sp, #8]
 8016d92:	691b      	ldr	r3, [r3, #16]
 8016d94:	9300      	str	r3, [sp, #0]
 8016d96:	e9d7 3204 	ldrd	r3, r2, [r7, #16]
 8016d9a:	f8db 1000 	ldr.w	r1, [fp]
 8016d9e:	f50a 7028 	add.w	r0, sl, #672	@ 0x2a0
 8016da2:	f7f9 fd9f 	bl	80108e4 <uxr_buffer_create_datareader_bin>
 8016da6:	4602      	mov	r2, r0
 8016da8:	f8d9 0010 	ldr.w	r0, [r9, #16]
 8016dac:	f8d0 338c 	ldr.w	r3, [r0, #908]	@ 0x38c
 8016db0:	f8d0 1384 	ldr.w	r1, [r0, #900]	@ 0x384
 8016db4:	f7f7 ffd0 	bl	800ed58 <run_xrce_session>
 8016db8:	b1d0      	cbz	r0, 8016df0 <rmw_create_subscription+0x194>
 8016dba:	f898 3008 	ldrb.w	r3, [r8, #8]
 8016dbe:	f8d9 0010 	ldr.w	r0, [r9, #16]
 8016dc2:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8016dc6:	2200      	movs	r2, #0
 8016dc8:	e9cd 120a 	strd	r1, r2, [sp, #40]	@ 0x28
 8016dcc:	2b02      	cmp	r3, #2
 8016dce:	f8d0 1384 	ldr.w	r1, [r0, #900]	@ 0x384
 8016dd2:	bf0c      	ite	eq
 8016dd4:	f8d0 3380 	ldreq.w	r3, [r0, #896]	@ 0x380
 8016dd8:	f8d0 3374 	ldrne.w	r3, [r0, #884]	@ 0x374
 8016ddc:	9307      	str	r3, [sp, #28]
 8016dde:	aa0a      	add	r2, sp, #40	@ 0x28
 8016de0:	9200      	str	r2, [sp, #0]
 8016de2:	697a      	ldr	r2, [r7, #20]
 8016de4:	6809      	ldr	r1, [r1, #0]
 8016de6:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8016dea:	f001 fb0b 	bl	8018404 <uxr_buffer_request_data>
 8016dee:	e007      	b.n	8016e00 <rmw_create_subscription+0x1a4>
 8016df0:	69f8      	ldr	r0, [r7, #28]
 8016df2:	b108      	cbz	r0, 8016df8 <rmw_create_subscription+0x19c>
 8016df4:	f7f7 feb6 	bl	800eb64 <rmw_uxrce_fini_topic_memory>
 8016df8:	4620      	mov	r0, r4
 8016dfa:	f7f7 fe71 	bl	800eae0 <rmw_uxrce_fini_subscription_memory>
 8016dfe:	2400      	movs	r4, #0
 8016e00:	4620      	mov	r0, r4
 8016e02:	b00d      	add	sp, #52	@ 0x34
 8016e04:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016e08:	2000aae4 	.word	0x2000aae4
 8016e0c:	0801af8c 	.word	0x0801af8c
 8016e10:	0801af58 	.word	0x0801af58

08016e14 <rmw_subscription_get_actual_qos>:
 8016e14:	b150      	cbz	r0, 8016e2c <rmw_subscription_get_actual_qos+0x18>
 8016e16:	b149      	cbz	r1, 8016e2c <rmw_subscription_get_actual_qos+0x18>
 8016e18:	b508      	push	{r3, lr}
 8016e1a:	6843      	ldr	r3, [r0, #4]
 8016e1c:	2250      	movs	r2, #80	@ 0x50
 8016e1e:	4608      	mov	r0, r1
 8016e20:	f103 0128 	add.w	r1, r3, #40	@ 0x28
 8016e24:	f003 f80d 	bl	8019e42 <memcpy>
 8016e28:	2000      	movs	r0, #0
 8016e2a:	bd08      	pop	{r3, pc}
 8016e2c:	200b      	movs	r0, #11
 8016e2e:	4770      	bx	lr

08016e30 <rmw_destroy_subscription>:
 8016e30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016e32:	b128      	cbz	r0, 8016e40 <rmw_destroy_subscription+0x10>
 8016e34:	4604      	mov	r4, r0
 8016e36:	6800      	ldr	r0, [r0, #0]
 8016e38:	460d      	mov	r5, r1
 8016e3a:	f7f8 f80d 	bl	800ee58 <is_uxrce_rmw_identifier_valid>
 8016e3e:	b910      	cbnz	r0, 8016e46 <rmw_destroy_subscription+0x16>
 8016e40:	2401      	movs	r4, #1
 8016e42:	4620      	mov	r0, r4
 8016e44:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8016e46:	6863      	ldr	r3, [r4, #4]
 8016e48:	2b00      	cmp	r3, #0
 8016e4a:	d0f9      	beq.n	8016e40 <rmw_destroy_subscription+0x10>
 8016e4c:	2d00      	cmp	r5, #0
 8016e4e:	d0f7      	beq.n	8016e40 <rmw_destroy_subscription+0x10>
 8016e50:	6828      	ldr	r0, [r5, #0]
 8016e52:	f7f8 f801 	bl	800ee58 <is_uxrce_rmw_identifier_valid>
 8016e56:	2800      	cmp	r0, #0
 8016e58:	d0f2      	beq.n	8016e40 <rmw_destroy_subscription+0x10>
 8016e5a:	686c      	ldr	r4, [r5, #4]
 8016e5c:	2c00      	cmp	r4, #0
 8016e5e:	d0ef      	beq.n	8016e40 <rmw_destroy_subscription+0x10>
 8016e60:	6a26      	ldr	r6, [r4, #32]
 8016e62:	6962      	ldr	r2, [r4, #20]
 8016e64:	6930      	ldr	r0, [r6, #16]
 8016e66:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 8016e6a:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8016e6e:	6819      	ldr	r1, [r3, #0]
 8016e70:	f001 fb02 	bl	8018478 <uxr_buffer_cancel_data>
 8016e74:	4602      	mov	r2, r0
 8016e76:	6930      	ldr	r0, [r6, #16]
 8016e78:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 8016e7c:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 8016e80:	f7f7 ff6a 	bl	800ed58 <run_xrce_session>
 8016e84:	69e0      	ldr	r0, [r4, #28]
 8016e86:	f7ff fc67 	bl	8016758 <destroy_topic>
 8016e8a:	6a23      	ldr	r3, [r4, #32]
 8016e8c:	6962      	ldr	r2, [r4, #20]
 8016e8e:	6918      	ldr	r0, [r3, #16]
 8016e90:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 8016e94:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8016e98:	6819      	ldr	r1, [r3, #0]
 8016e9a:	f7f9 fb9b 	bl	80105d4 <uxr_buffer_delete_entity>
 8016e9e:	6a21      	ldr	r1, [r4, #32]
 8016ea0:	6922      	ldr	r2, [r4, #16]
 8016ea2:	4603      	mov	r3, r0
 8016ea4:	6908      	ldr	r0, [r1, #16]
 8016ea6:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 8016eaa:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8016eae:	6809      	ldr	r1, [r1, #0]
 8016eb0:	461c      	mov	r4, r3
 8016eb2:	f7f9 fb8f 	bl	80105d4 <uxr_buffer_delete_entity>
 8016eb6:	4607      	mov	r7, r0
 8016eb8:	6930      	ldr	r0, [r6, #16]
 8016eba:	4622      	mov	r2, r4
 8016ebc:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 8016ec0:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 8016ec4:	f7f7 ff48 	bl	800ed58 <run_xrce_session>
 8016ec8:	4604      	mov	r4, r0
 8016eca:	6930      	ldr	r0, [r6, #16]
 8016ecc:	463a      	mov	r2, r7
 8016ece:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 8016ed2:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 8016ed6:	f7f7 ff3f 	bl	800ed58 <run_xrce_session>
 8016eda:	b12c      	cbz	r4, 8016ee8 <rmw_destroy_subscription+0xb8>
 8016edc:	b120      	cbz	r0, 8016ee8 <rmw_destroy_subscription+0xb8>
 8016ede:	2400      	movs	r4, #0
 8016ee0:	4628      	mov	r0, r5
 8016ee2:	f7f7 fdfd 	bl	800eae0 <rmw_uxrce_fini_subscription_memory>
 8016ee6:	e7ac      	b.n	8016e42 <rmw_destroy_subscription+0x12>
 8016ee8:	2402      	movs	r4, #2
 8016eea:	e7f9      	b.n	8016ee0 <rmw_destroy_subscription+0xb0>

08016eec <rmw_take_with_info>:
 8016eec:	b5f0      	push	{r4, r5, r6, r7, lr}
 8016eee:	4604      	mov	r4, r0
 8016ef0:	6800      	ldr	r0, [r0, #0]
 8016ef2:	b089      	sub	sp, #36	@ 0x24
 8016ef4:	460f      	mov	r7, r1
 8016ef6:	4615      	mov	r5, r2
 8016ef8:	b128      	cbz	r0, 8016f06 <rmw_take_with_info+0x1a>
 8016efa:	4b24      	ldr	r3, [pc, #144]	@ (8016f8c <rmw_take_with_info+0xa0>)
 8016efc:	6819      	ldr	r1, [r3, #0]
 8016efe:	f7e9 f967 	bl	80001d0 <strcmp>
 8016f02:	2800      	cmp	r0, #0
 8016f04:	d13e      	bne.n	8016f84 <rmw_take_with_info+0x98>
 8016f06:	b305      	cbz	r5, 8016f4a <rmw_take_with_info+0x5e>
 8016f08:	6864      	ldr	r4, [r4, #4]
 8016f0a:	2300      	movs	r3, #0
 8016f0c:	702b      	strb	r3, [r5, #0]
 8016f0e:	f7f7 feab 	bl	800ec68 <rmw_uxrce_clean_expired_static_input_buffer>
 8016f12:	4620      	mov	r0, r4
 8016f14:	f7f7 fe7e 	bl	800ec14 <rmw_uxrce_find_static_input_buffer_by_owner>
 8016f18:	4606      	mov	r6, r0
 8016f1a:	b1f0      	cbz	r0, 8016f5a <rmw_take_with_info+0x6e>
 8016f1c:	68c1      	ldr	r1, [r0, #12]
 8016f1e:	4668      	mov	r0, sp
 8016f20:	f8d1 2810 	ldr.w	r2, [r1, #2064]	@ 0x810
 8016f24:	3110      	adds	r1, #16
 8016f26:	f7f9 fa61 	bl	80103ec <ucdr_init_buffer>
 8016f2a:	69a3      	ldr	r3, [r4, #24]
 8016f2c:	4639      	mov	r1, r7
 8016f2e:	68db      	ldr	r3, [r3, #12]
 8016f30:	4668      	mov	r0, sp
 8016f32:	4798      	blx	r3
 8016f34:	4631      	mov	r1, r6
 8016f36:	4604      	mov	r4, r0
 8016f38:	4815      	ldr	r0, [pc, #84]	@ (8016f90 <rmw_take_with_info+0xa4>)
 8016f3a:	f7ff f91b 	bl	8016174 <put_memory>
 8016f3e:	702c      	strb	r4, [r5, #0]
 8016f40:	f084 0001 	eor.w	r0, r4, #1
 8016f44:	b2c0      	uxtb	r0, r0
 8016f46:	b009      	add	sp, #36	@ 0x24
 8016f48:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8016f4a:	6864      	ldr	r4, [r4, #4]
 8016f4c:	f7f7 fe8c 	bl	800ec68 <rmw_uxrce_clean_expired_static_input_buffer>
 8016f50:	4620      	mov	r0, r4
 8016f52:	f7f7 fe5f 	bl	800ec14 <rmw_uxrce_find_static_input_buffer_by_owner>
 8016f56:	4605      	mov	r5, r0
 8016f58:	b910      	cbnz	r0, 8016f60 <rmw_take_with_info+0x74>
 8016f5a:	2001      	movs	r0, #1
 8016f5c:	b009      	add	sp, #36	@ 0x24
 8016f5e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8016f60:	68e9      	ldr	r1, [r5, #12]
 8016f62:	4668      	mov	r0, sp
 8016f64:	f8d1 2810 	ldr.w	r2, [r1, #2064]	@ 0x810
 8016f68:	3110      	adds	r1, #16
 8016f6a:	f7f9 fa3f 	bl	80103ec <ucdr_init_buffer>
 8016f6e:	69a3      	ldr	r3, [r4, #24]
 8016f70:	4639      	mov	r1, r7
 8016f72:	68db      	ldr	r3, [r3, #12]
 8016f74:	4668      	mov	r0, sp
 8016f76:	4798      	blx	r3
 8016f78:	4629      	mov	r1, r5
 8016f7a:	4604      	mov	r4, r0
 8016f7c:	4804      	ldr	r0, [pc, #16]	@ (8016f90 <rmw_take_with_info+0xa4>)
 8016f7e:	f7ff f8f9 	bl	8016174 <put_memory>
 8016f82:	e7dd      	b.n	8016f40 <rmw_take_with_info+0x54>
 8016f84:	200c      	movs	r0, #12
 8016f86:	b009      	add	sp, #36	@ 0x24
 8016f88:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8016f8a:	bf00      	nop
 8016f8c:	0801b510 	.word	0x0801b510
 8016f90:	20007878 	.word	0x20007878

08016f94 <rmw_uxrce_transport_init>:
 8016f94:	b508      	push	{r3, lr}
 8016f96:	b108      	cbz	r0, 8016f9c <rmw_uxrce_transport_init+0x8>
 8016f98:	f100 0210 	add.w	r2, r0, #16
 8016f9c:	b139      	cbz	r1, 8016fae <rmw_uxrce_transport_init+0x1a>
 8016f9e:	6949      	ldr	r1, [r1, #20]
 8016fa0:	4610      	mov	r0, r2
 8016fa2:	f000 fcc5 	bl	8017930 <uxr_init_custom_transport>
 8016fa6:	f080 0001 	eor.w	r0, r0, #1
 8016faa:	b2c0      	uxtb	r0, r0
 8016fac:	bd08      	pop	{r3, pc}
 8016fae:	4b04      	ldr	r3, [pc, #16]	@ (8016fc0 <rmw_uxrce_transport_init+0x2c>)
 8016fb0:	4610      	mov	r0, r2
 8016fb2:	6859      	ldr	r1, [r3, #4]
 8016fb4:	f000 fcbc 	bl	8017930 <uxr_init_custom_transport>
 8016fb8:	f080 0001 	eor.w	r0, r0, #1
 8016fbc:	b2c0      	uxtb	r0, r0
 8016fbe:	bd08      	pop	{r3, pc}
 8016fc0:	20007858 	.word	0x20007858

08016fc4 <rmw_wait>:
 8016fc4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016fc8:	460f      	mov	r7, r1
 8016fca:	4606      	mov	r6, r0
 8016fcc:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8016fce:	469a      	mov	sl, r3
 8016fd0:	4615      	mov	r5, r2
 8016fd2:	2a00      	cmp	r2, #0
 8016fd4:	f000 8122 	beq.w	801721c <rmw_wait+0x258>
 8016fd8:	2900      	cmp	r1, #0
 8016fda:	f000 812a 	beq.w	8017232 <rmw_wait+0x26e>
 8016fde:	e9d1 2300 	ldrd	r2, r3, [r1]
 8016fe2:	ea4f 1b42 	mov.w	fp, r2, lsl #5
 8016fe6:	015c      	lsls	r4, r3, #5
 8016fe8:	ebbb 0b02 	subs.w	fp, fp, r2
 8016fec:	ea44 64d2 	orr.w	r4, r4, r2, lsr #27
 8016ff0:	eb64 0403 	sbc.w	r4, r4, r3
 8016ff4:	ea4f 008b 	mov.w	r0, fp, lsl #2
 8016ff8:	00a4      	lsls	r4, r4, #2
 8016ffa:	ea44 749b 	orr.w	r4, r4, fp, lsr #30
 8016ffe:	eb10 0b02 	adds.w	fp, r0, r2
 8017002:	eb43 0404 	adc.w	r4, r3, r4
 8017006:	4aad      	ldr	r2, [pc, #692]	@ (80172bc <rmw_wait+0x2f8>)
 8017008:	2300      	movs	r3, #0
 801700a:	e9d1 0102 	ldrd	r0, r1, [r1, #8]
 801700e:	f7e9 fe5d 	bl	8000ccc <__aeabi_uldivmod>
 8017012:	00e4      	lsls	r4, r4, #3
 8017014:	ea44 745b 	orr.w	r4, r4, fp, lsr #29
 8017018:	ea4f 0bcb 	mov.w	fp, fp, lsl #3
 801701c:	eb1b 0800 	adds.w	r8, fp, r0
 8017020:	f06f 4200 	mvn.w	r2, #2147483648	@ 0x80000000
 8017024:	eb44 0901 	adc.w	r9, r4, r1
 8017028:	2300      	movs	r3, #0
 801702a:	4542      	cmp	r2, r8
 801702c:	eb73 0109 	sbcs.w	r1, r3, r9
 8017030:	f2c0 80f2 	blt.w	8017218 <rmw_wait+0x254>
 8017034:	f7f7 fe18 	bl	800ec68 <rmw_uxrce_clean_expired_static_input_buffer>
 8017038:	4ba1      	ldr	r3, [pc, #644]	@ (80172c0 <rmw_wait+0x2fc>)
 801703a:	681c      	ldr	r4, [r3, #0]
 801703c:	b144      	cbz	r4, 8017050 <rmw_wait+0x8c>
 801703e:	4623      	mov	r3, r4
 8017040:	f241 50a4 	movw	r0, #5540	@ 0x15a4
 8017044:	2100      	movs	r1, #0
 8017046:	e9d3 3202 	ldrd	r3, r2, [r3, #8]
 801704a:	5411      	strb	r1, [r2, r0]
 801704c:	2b00      	cmp	r3, #0
 801704e:	d1fa      	bne.n	8017046 <rmw_wait+0x82>
 8017050:	b185      	cbz	r5, 8017074 <rmw_wait+0xb0>
 8017052:	6829      	ldr	r1, [r5, #0]
 8017054:	b171      	cbz	r1, 8017074 <rmw_wait+0xb0>
 8017056:	f8d5 e004 	ldr.w	lr, [r5, #4]
 801705a:	2300      	movs	r3, #0
 801705c:	f241 5ca4 	movw	ip, #5540	@ 0x15a4
 8017060:	2001      	movs	r0, #1
 8017062:	f85e 2023 	ldr.w	r2, [lr, r3, lsl #2]
 8017066:	6f92      	ldr	r2, [r2, #120]	@ 0x78
 8017068:	3301      	adds	r3, #1
 801706a:	6912      	ldr	r2, [r2, #16]
 801706c:	4299      	cmp	r1, r3
 801706e:	f802 000c 	strb.w	r0, [r2, ip]
 8017072:	d1f6      	bne.n	8017062 <rmw_wait+0x9e>
 8017074:	f1ba 0f00 	cmp.w	sl, #0
 8017078:	d011      	beq.n	801709e <rmw_wait+0xda>
 801707a:	f8da 1000 	ldr.w	r1, [sl]
 801707e:	b171      	cbz	r1, 801709e <rmw_wait+0xda>
 8017080:	f8da e004 	ldr.w	lr, [sl, #4]
 8017084:	2300      	movs	r3, #0
 8017086:	f241 5ca4 	movw	ip, #5540	@ 0x15a4
 801708a:	2001      	movs	r0, #1
 801708c:	f85e 2023 	ldr.w	r2, [lr, r3, lsl #2]
 8017090:	6f92      	ldr	r2, [r2, #120]	@ 0x78
 8017092:	3301      	adds	r3, #1
 8017094:	6912      	ldr	r2, [r2, #16]
 8017096:	4299      	cmp	r1, r3
 8017098:	f802 000c 	strb.w	r0, [r2, ip]
 801709c:	d1f6      	bne.n	801708c <rmw_wait+0xc8>
 801709e:	b186      	cbz	r6, 80170c2 <rmw_wait+0xfe>
 80170a0:	6831      	ldr	r1, [r6, #0]
 80170a2:	b171      	cbz	r1, 80170c2 <rmw_wait+0xfe>
 80170a4:	f8d6 e004 	ldr.w	lr, [r6, #4]
 80170a8:	2300      	movs	r3, #0
 80170aa:	f241 5ca4 	movw	ip, #5540	@ 0x15a4
 80170ae:	2001      	movs	r0, #1
 80170b0:	f85e 2023 	ldr.w	r2, [lr, r3, lsl #2]
 80170b4:	6a12      	ldr	r2, [r2, #32]
 80170b6:	3301      	adds	r3, #1
 80170b8:	6912      	ldr	r2, [r2, #16]
 80170ba:	4299      	cmp	r1, r3
 80170bc:	f802 000c 	strb.w	r0, [r2, ip]
 80170c0:	d1f6      	bne.n	80170b0 <rmw_wait+0xec>
 80170c2:	b34c      	cbz	r4, 8017118 <rmw_wait+0x154>
 80170c4:	4622      	mov	r2, r4
 80170c6:	2300      	movs	r3, #0
 80170c8:	f241 50a4 	movw	r0, #5540	@ 0x15a4
 80170cc:	e9d2 2102 	ldrd	r2, r1, [r2, #8]
 80170d0:	5c09      	ldrb	r1, [r1, r0]
 80170d2:	440b      	add	r3, r1
 80170d4:	b2db      	uxtb	r3, r3
 80170d6:	2a00      	cmp	r2, #0
 80170d8:	d1f8      	bne.n	80170cc <rmw_wait+0x108>
 80170da:	2b00      	cmp	r3, #0
 80170dc:	f000 8082 	beq.w	80171e4 <rmw_wait+0x220>
 80170e0:	f1b8 3fff 	cmp.w	r8, #4294967295	@ 0xffffffff
 80170e4:	d00d      	beq.n	8017102 <rmw_wait+0x13e>
 80170e6:	ee07 8a90 	vmov	s15, r8
 80170ea:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80170ee:	ee07 3a90 	vmov	s15, r3
 80170f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80170f6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80170fa:	eefd 7ac7 	vcvt.s32.f32	s15, s14
 80170fe:	ee17 8a90 	vmov	r8, s15
 8017102:	f241 59a4 	movw	r9, #5540	@ 0x15a4
 8017106:	68e0      	ldr	r0, [r4, #12]
 8017108:	f810 3009 	ldrb.w	r3, [r0, r9]
 801710c:	2b00      	cmp	r3, #0
 801710e:	f040 8093 	bne.w	8017238 <rmw_wait+0x274>
 8017112:	68a4      	ldr	r4, [r4, #8]
 8017114:	2c00      	cmp	r4, #0
 8017116:	d1f6      	bne.n	8017106 <rmw_wait+0x142>
 8017118:	2d00      	cmp	r5, #0
 801711a:	f000 80ac 	beq.w	8017276 <rmw_wait+0x2b2>
 801711e:	682b      	ldr	r3, [r5, #0]
 8017120:	2b00      	cmp	r3, #0
 8017122:	f000 8093 	beq.w	801724c <rmw_wait+0x288>
 8017126:	2400      	movs	r4, #0
 8017128:	46a0      	mov	r8, r4
 801712a:	686b      	ldr	r3, [r5, #4]
 801712c:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8017130:	f7f7 fd70 	bl	800ec14 <rmw_uxrce_find_static_input_buffer_by_owner>
 8017134:	2800      	cmp	r0, #0
 8017136:	d05f      	beq.n	80171f8 <rmw_wait+0x234>
 8017138:	682b      	ldr	r3, [r5, #0]
 801713a:	3401      	adds	r4, #1
 801713c:	42a3      	cmp	r3, r4
 801713e:	f04f 0801 	mov.w	r8, #1
 8017142:	d8f2      	bhi.n	801712a <rmw_wait+0x166>
 8017144:	f1ba 0f00 	cmp.w	sl, #0
 8017148:	d012      	beq.n	8017170 <rmw_wait+0x1ac>
 801714a:	f8da 3000 	ldr.w	r3, [sl]
 801714e:	b17b      	cbz	r3, 8017170 <rmw_wait+0x1ac>
 8017150:	2400      	movs	r4, #0
 8017152:	f8da 3004 	ldr.w	r3, [sl, #4]
 8017156:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 801715a:	f7f7 fd5b 	bl	800ec14 <rmw_uxrce_find_static_input_buffer_by_owner>
 801715e:	2800      	cmp	r0, #0
 8017160:	d052      	beq.n	8017208 <rmw_wait+0x244>
 8017162:	f8da 3000 	ldr.w	r3, [sl]
 8017166:	3401      	adds	r4, #1
 8017168:	42a3      	cmp	r3, r4
 801716a:	f04f 0801 	mov.w	r8, #1
 801716e:	d8f0      	bhi.n	8017152 <rmw_wait+0x18e>
 8017170:	b1e6      	cbz	r6, 80171ac <rmw_wait+0x1e8>
 8017172:	6833      	ldr	r3, [r6, #0]
 8017174:	b1d3      	cbz	r3, 80171ac <rmw_wait+0x1e8>
 8017176:	2400      	movs	r4, #0
 8017178:	6873      	ldr	r3, [r6, #4]
 801717a:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 801717e:	f7f7 fd49 	bl	800ec14 <rmw_uxrce_find_static_input_buffer_by_owner>
 8017182:	b160      	cbz	r0, 801719e <rmw_wait+0x1da>
 8017184:	6833      	ldr	r3, [r6, #0]
 8017186:	3401      	adds	r4, #1
 8017188:	42a3      	cmp	r3, r4
 801718a:	d96c      	bls.n	8017266 <rmw_wait+0x2a2>
 801718c:	6873      	ldr	r3, [r6, #4]
 801718e:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8017192:	f04f 0801 	mov.w	r8, #1
 8017196:	f7f7 fd3d 	bl	800ec14 <rmw_uxrce_find_static_input_buffer_by_owner>
 801719a:	2800      	cmp	r0, #0
 801719c:	d1f2      	bne.n	8017184 <rmw_wait+0x1c0>
 801719e:	e9d6 3200 	ldrd	r3, r2, [r6]
 80171a2:	f842 0024 	str.w	r0, [r2, r4, lsl #2]
 80171a6:	3401      	adds	r4, #1
 80171a8:	42a3      	cmp	r3, r4
 80171aa:	d8e5      	bhi.n	8017178 <rmw_wait+0x1b4>
 80171ac:	b1a7      	cbz	r7, 80171d8 <rmw_wait+0x214>
 80171ae:	683c      	ldr	r4, [r7, #0]
 80171b0:	b194      	cbz	r4, 80171d8 <rmw_wait+0x214>
 80171b2:	2300      	movs	r3, #0
 80171b4:	461d      	mov	r5, r3
 80171b6:	e004      	b.n	80171c2 <rmw_wait+0x1fe>
 80171b8:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
 80171bc:	3301      	adds	r3, #1
 80171be:	42a3      	cmp	r3, r4
 80171c0:	d00a      	beq.n	80171d8 <rmw_wait+0x214>
 80171c2:	6878      	ldr	r0, [r7, #4]
 80171c4:	f850 1023 	ldr.w	r1, [r0, r3, lsl #2]
 80171c8:	7c0a      	ldrb	r2, [r1, #16]
 80171ca:	2a00      	cmp	r2, #0
 80171cc:	d0f4      	beq.n	80171b8 <rmw_wait+0x1f4>
 80171ce:	3301      	adds	r3, #1
 80171d0:	42a3      	cmp	r3, r4
 80171d2:	740d      	strb	r5, [r1, #16]
 80171d4:	4690      	mov	r8, r2
 80171d6:	d1f4      	bne.n	80171c2 <rmw_wait+0x1fe>
 80171d8:	f1b8 0f00 	cmp.w	r8, #0
 80171dc:	d040      	beq.n	8017260 <rmw_wait+0x29c>
 80171de:	2000      	movs	r0, #0
 80171e0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80171e4:	68e0      	ldr	r0, [r4, #12]
 80171e6:	2100      	movs	r1, #0
 80171e8:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 80171ec:	f7fa f8c2 	bl	8011374 <uxr_run_session_timeout>
 80171f0:	68a4      	ldr	r4, [r4, #8]
 80171f2:	2c00      	cmp	r4, #0
 80171f4:	d1f6      	bne.n	80171e4 <rmw_wait+0x220>
 80171f6:	e78f      	b.n	8017118 <rmw_wait+0x154>
 80171f8:	e9d5 3200 	ldrd	r3, r2, [r5]
 80171fc:	f842 0024 	str.w	r0, [r2, r4, lsl #2]
 8017200:	3401      	adds	r4, #1
 8017202:	42a3      	cmp	r3, r4
 8017204:	d891      	bhi.n	801712a <rmw_wait+0x166>
 8017206:	e79d      	b.n	8017144 <rmw_wait+0x180>
 8017208:	e9da 3200 	ldrd	r3, r2, [sl]
 801720c:	f842 0024 	str.w	r0, [r2, r4, lsl #2]
 8017210:	3401      	adds	r4, #1
 8017212:	429c      	cmp	r4, r3
 8017214:	d39d      	bcc.n	8017152 <rmw_wait+0x18e>
 8017216:	e7ab      	b.n	8017170 <rmw_wait+0x1ac>
 8017218:	4690      	mov	r8, r2
 801721a:	e70b      	b.n	8017034 <rmw_wait+0x70>
 801721c:	2b00      	cmp	r3, #0
 801721e:	f47f aedb 	bne.w	8016fd8 <rmw_wait+0x14>
 8017222:	2800      	cmp	r0, #0
 8017224:	f47f aed8 	bne.w	8016fd8 <rmw_wait+0x14>
 8017228:	2f00      	cmp	r7, #0
 801722a:	d0d8      	beq.n	80171de <rmw_wait+0x21a>
 801722c:	2900      	cmp	r1, #0
 801722e:	f47f aed6 	bne.w	8016fde <rmw_wait+0x1a>
 8017232:	f04f 38ff 	mov.w	r8, #4294967295	@ 0xffffffff
 8017236:	e6fd      	b.n	8017034 <rmw_wait+0x70>
 8017238:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 801723c:	4641      	mov	r1, r8
 801723e:	f7fa f8b3 	bl	80113a8 <uxr_run_session_until_data>
 8017242:	68a4      	ldr	r4, [r4, #8]
 8017244:	2c00      	cmp	r4, #0
 8017246:	f47f af5e 	bne.w	8017106 <rmw_wait+0x142>
 801724a:	e765      	b.n	8017118 <rmw_wait+0x154>
 801724c:	f1ba 0f00 	cmp.w	sl, #0
 8017250:	d11e      	bne.n	8017290 <rmw_wait+0x2cc>
 8017252:	b35e      	cbz	r6, 80172ac <rmw_wait+0x2e8>
 8017254:	6833      	ldr	r3, [r6, #0]
 8017256:	46d0      	mov	r8, sl
 8017258:	2b00      	cmp	r3, #0
 801725a:	d18c      	bne.n	8017176 <rmw_wait+0x1b2>
 801725c:	2f00      	cmp	r7, #0
 801725e:	d1a6      	bne.n	80171ae <rmw_wait+0x1ea>
 8017260:	2002      	movs	r0, #2
 8017262:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017266:	2f00      	cmp	r7, #0
 8017268:	d0b9      	beq.n	80171de <rmw_wait+0x21a>
 801726a:	683c      	ldr	r4, [r7, #0]
 801726c:	f04f 0801 	mov.w	r8, #1
 8017270:	2c00      	cmp	r4, #0
 8017272:	d19e      	bne.n	80171b2 <rmw_wait+0x1ee>
 8017274:	e7b3      	b.n	80171de <rmw_wait+0x21a>
 8017276:	f1ba 0f00 	cmp.w	sl, #0
 801727a:	d0ea      	beq.n	8017252 <rmw_wait+0x28e>
 801727c:	f8da 3000 	ldr.w	r3, [sl]
 8017280:	46a8      	mov	r8, r5
 8017282:	2b00      	cmp	r3, #0
 8017284:	f47f af64 	bne.w	8017150 <rmw_wait+0x18c>
 8017288:	2e00      	cmp	r6, #0
 801728a:	f47f af72 	bne.w	8017172 <rmw_wait+0x1ae>
 801728e:	e009      	b.n	80172a4 <rmw_wait+0x2e0>
 8017290:	f8da 2000 	ldr.w	r2, [sl]
 8017294:	4698      	mov	r8, r3
 8017296:	2a00      	cmp	r2, #0
 8017298:	f47f af5a 	bne.w	8017150 <rmw_wait+0x18c>
 801729c:	4690      	mov	r8, r2
 801729e:	2e00      	cmp	r6, #0
 80172a0:	f47f af67 	bne.w	8017172 <rmw_wait+0x1ae>
 80172a4:	46b0      	mov	r8, r6
 80172a6:	2f00      	cmp	r7, #0
 80172a8:	d181      	bne.n	80171ae <rmw_wait+0x1ea>
 80172aa:	e7d9      	b.n	8017260 <rmw_wait+0x29c>
 80172ac:	2f00      	cmp	r7, #0
 80172ae:	d0d7      	beq.n	8017260 <rmw_wait+0x29c>
 80172b0:	683c      	ldr	r4, [r7, #0]
 80172b2:	46b0      	mov	r8, r6
 80172b4:	2c00      	cmp	r4, #0
 80172b6:	f47f af7c 	bne.w	80171b2 <rmw_wait+0x1ee>
 80172ba:	e7d1      	b.n	8017260 <rmw_wait+0x29c>
 80172bc:	000f4240 	.word	0x000f4240
 80172c0:	2000aa20 	.word	0x2000aa20

080172c4 <rmw_create_wait_set>:
 80172c4:	b508      	push	{r3, lr}
 80172c6:	4803      	ldr	r0, [pc, #12]	@ (80172d4 <rmw_create_wait_set+0x10>)
 80172c8:	f7fe ff44 	bl	8016154 <get_memory>
 80172cc:	b108      	cbz	r0, 80172d2 <rmw_create_wait_set+0xe>
 80172ce:	68c0      	ldr	r0, [r0, #12]
 80172d0:	3010      	adds	r0, #16
 80172d2:	bd08      	pop	{r3, pc}
 80172d4:	2000c1f8 	.word	0x2000c1f8

080172d8 <rmw_destroy_wait_set>:
 80172d8:	b508      	push	{r3, lr}
 80172da:	4b08      	ldr	r3, [pc, #32]	@ (80172fc <rmw_destroy_wait_set+0x24>)
 80172dc:	6819      	ldr	r1, [r3, #0]
 80172de:	b911      	cbnz	r1, 80172e6 <rmw_destroy_wait_set+0xe>
 80172e0:	e00a      	b.n	80172f8 <rmw_destroy_wait_set+0x20>
 80172e2:	6889      	ldr	r1, [r1, #8]
 80172e4:	b141      	cbz	r1, 80172f8 <rmw_destroy_wait_set+0x20>
 80172e6:	68cb      	ldr	r3, [r1, #12]
 80172e8:	3310      	adds	r3, #16
 80172ea:	4298      	cmp	r0, r3
 80172ec:	d1f9      	bne.n	80172e2 <rmw_destroy_wait_set+0xa>
 80172ee:	4803      	ldr	r0, [pc, #12]	@ (80172fc <rmw_destroy_wait_set+0x24>)
 80172f0:	f7fe ff40 	bl	8016174 <put_memory>
 80172f4:	2000      	movs	r0, #0
 80172f6:	bd08      	pop	{r3, pc}
 80172f8:	2001      	movs	r0, #1
 80172fa:	bd08      	pop	{r3, pc}
 80172fc:	2000c1f8 	.word	0x2000c1f8

08017300 <rmw_uros_epoch_nanos>:
 8017300:	4b05      	ldr	r3, [pc, #20]	@ (8017318 <rmw_uros_epoch_nanos+0x18>)
 8017302:	681b      	ldr	r3, [r3, #0]
 8017304:	b123      	cbz	r3, 8017310 <rmw_uros_epoch_nanos+0x10>
 8017306:	68d8      	ldr	r0, [r3, #12]
 8017308:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 801730c:	f7f9 bca6 	b.w	8010c5c <uxr_epoch_nanos>
 8017310:	2000      	movs	r0, #0
 8017312:	2100      	movs	r1, #0
 8017314:	4770      	bx	lr
 8017316:	bf00      	nop
 8017318:	2000aa20 	.word	0x2000aa20

0801731c <_MultiArrayDimension__cdr_serialize>:
 801731c:	b1d0      	cbz	r0, 8017354 <_MultiArrayDimension__cdr_serialize+0x38>
 801731e:	b570      	push	{r4, r5, r6, lr}
 8017320:	6806      	ldr	r6, [r0, #0]
 8017322:	460d      	mov	r5, r1
 8017324:	4604      	mov	r4, r0
 8017326:	b196      	cbz	r6, 801734e <_MultiArrayDimension__cdr_serialize+0x32>
 8017328:	4630      	mov	r0, r6
 801732a:	f7e8 ff5b 	bl	80001e4 <strlen>
 801732e:	1c42      	adds	r2, r0, #1
 8017330:	6060      	str	r0, [r4, #4]
 8017332:	4631      	mov	r1, r6
 8017334:	4628      	mov	r0, r5
 8017336:	f7f9 f8c9 	bl	80104cc <ucdr_serialize_sequence_char>
 801733a:	68e1      	ldr	r1, [r4, #12]
 801733c:	4628      	mov	r0, r5
 801733e:	f7f8 f921 	bl	800f584 <ucdr_serialize_uint32_t>
 8017342:	6921      	ldr	r1, [r4, #16]
 8017344:	4628      	mov	r0, r5
 8017346:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801734a:	f7f8 b91b 	b.w	800f584 <ucdr_serialize_uint32_t>
 801734e:	4632      	mov	r2, r6
 8017350:	4630      	mov	r0, r6
 8017352:	e7ed      	b.n	8017330 <_MultiArrayDimension__cdr_serialize+0x14>
 8017354:	4770      	bx	lr
 8017356:	bf00      	nop

08017358 <get_serialized_size_std_msgs__msg__MultiArrayDimension>:
 8017358:	b570      	push	{r4, r5, r6, lr}
 801735a:	4604      	mov	r4, r0
 801735c:	b1b0      	cbz	r0, 801738c <get_serialized_size_std_msgs__msg__MultiArrayDimension+0x34>
 801735e:	460e      	mov	r6, r1
 8017360:	4630      	mov	r0, r6
 8017362:	2104      	movs	r1, #4
 8017364:	f7f9 f846 	bl	80103f4 <ucdr_alignment>
 8017368:	6865      	ldr	r5, [r4, #4]
 801736a:	1d73      	adds	r3, r6, #5
 801736c:	442b      	add	r3, r5
 801736e:	181d      	adds	r5, r3, r0
 8017370:	4628      	mov	r0, r5
 8017372:	2104      	movs	r1, #4
 8017374:	f7f9 f83e 	bl	80103f4 <ucdr_alignment>
 8017378:	3004      	adds	r0, #4
 801737a:	4405      	add	r5, r0
 801737c:	4628      	mov	r0, r5
 801737e:	2104      	movs	r1, #4
 8017380:	f7f9 f838 	bl	80103f4 <ucdr_alignment>
 8017384:	f1c6 0604 	rsb	r6, r6, #4
 8017388:	4430      	add	r0, r6
 801738a:	4428      	add	r0, r5
 801738c:	bd70      	pop	{r4, r5, r6, pc}
 801738e:	bf00      	nop

08017390 <_MultiArrayDimension__cdr_deserialize>:
 8017390:	b570      	push	{r4, r5, r6, lr}
 8017392:	460c      	mov	r4, r1
 8017394:	b082      	sub	sp, #8
 8017396:	b1d1      	cbz	r1, 80173ce <_MultiArrayDimension__cdr_deserialize+0x3e>
 8017398:	688e      	ldr	r6, [r1, #8]
 801739a:	6809      	ldr	r1, [r1, #0]
 801739c:	ab01      	add	r3, sp, #4
 801739e:	4632      	mov	r2, r6
 80173a0:	4605      	mov	r5, r0
 80173a2:	f7f9 f8a5 	bl	80104f0 <ucdr_deserialize_sequence_char>
 80173a6:	9b01      	ldr	r3, [sp, #4]
 80173a8:	b968      	cbnz	r0, 80173c6 <_MultiArrayDimension__cdr_deserialize+0x36>
 80173aa:	429e      	cmp	r6, r3
 80173ac:	d312      	bcc.n	80173d4 <_MultiArrayDimension__cdr_deserialize+0x44>
 80173ae:	f104 010c 	add.w	r1, r4, #12
 80173b2:	4628      	mov	r0, r5
 80173b4:	f7f8 fa16 	bl	800f7e4 <ucdr_deserialize_uint32_t>
 80173b8:	f104 0110 	add.w	r1, r4, #16
 80173bc:	4628      	mov	r0, r5
 80173be:	f7f8 fa11 	bl	800f7e4 <ucdr_deserialize_uint32_t>
 80173c2:	b002      	add	sp, #8
 80173c4:	bd70      	pop	{r4, r5, r6, pc}
 80173c6:	b103      	cbz	r3, 80173ca <_MultiArrayDimension__cdr_deserialize+0x3a>
 80173c8:	3b01      	subs	r3, #1
 80173ca:	6063      	str	r3, [r4, #4]
 80173cc:	e7ef      	b.n	80173ae <_MultiArrayDimension__cdr_deserialize+0x1e>
 80173ce:	4608      	mov	r0, r1
 80173d0:	b002      	add	sp, #8
 80173d2:	bd70      	pop	{r4, r5, r6, pc}
 80173d4:	2101      	movs	r1, #1
 80173d6:	75a8      	strb	r0, [r5, #22]
 80173d8:	7569      	strb	r1, [r5, #21]
 80173da:	6060      	str	r0, [r4, #4]
 80173dc:	4628      	mov	r0, r5
 80173de:	f7f9 f81f 	bl	8010420 <ucdr_align_to>
 80173e2:	9901      	ldr	r1, [sp, #4]
 80173e4:	4628      	mov	r0, r5
 80173e6:	f7f9 f851 	bl	801048c <ucdr_advance_buffer>
 80173ea:	e7e0      	b.n	80173ae <_MultiArrayDimension__cdr_deserialize+0x1e>

080173ec <_MultiArrayDimension__max_serialized_size>:
 80173ec:	b510      	push	{r4, lr}
 80173ee:	2104      	movs	r1, #4
 80173f0:	2000      	movs	r0, #0
 80173f2:	f7f8 ffff 	bl	80103f4 <ucdr_alignment>
 80173f6:	1d04      	adds	r4, r0, #4
 80173f8:	4620      	mov	r0, r4
 80173fa:	2104      	movs	r1, #4
 80173fc:	f7f8 fffa 	bl	80103f4 <ucdr_alignment>
 8017400:	3004      	adds	r0, #4
 8017402:	4420      	add	r0, r4
 8017404:	bd10      	pop	{r4, pc}
 8017406:	bf00      	nop

08017408 <_MultiArrayDimension__get_serialized_size>:
 8017408:	b510      	push	{r4, lr}
 801740a:	4604      	mov	r4, r0
 801740c:	b190      	cbz	r0, 8017434 <_MultiArrayDimension__get_serialized_size+0x2c>
 801740e:	2104      	movs	r1, #4
 8017410:	2000      	movs	r0, #0
 8017412:	f7f8 ffef 	bl	80103f4 <ucdr_alignment>
 8017416:	6863      	ldr	r3, [r4, #4]
 8017418:	3305      	adds	r3, #5
 801741a:	181c      	adds	r4, r3, r0
 801741c:	4620      	mov	r0, r4
 801741e:	2104      	movs	r1, #4
 8017420:	f7f8 ffe8 	bl	80103f4 <ucdr_alignment>
 8017424:	3004      	adds	r0, #4
 8017426:	4404      	add	r4, r0
 8017428:	4620      	mov	r0, r4
 801742a:	2104      	movs	r1, #4
 801742c:	f7f8 ffe2 	bl	80103f4 <ucdr_alignment>
 8017430:	3004      	adds	r0, #4
 8017432:	4420      	add	r0, r4
 8017434:	bd10      	pop	{r4, pc}
 8017436:	bf00      	nop

08017438 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__MultiArrayDimension>:
 8017438:	4800      	ldr	r0, [pc, #0]	@ (801743c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__MultiArrayDimension+0x4>)
 801743a:	4770      	bx	lr
 801743c:	200000d0 	.word	0x200000d0

08017440 <ucdr_serialize_endian_array_char>:
 8017440:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017444:	4619      	mov	r1, r3
 8017446:	461e      	mov	r6, r3
 8017448:	4690      	mov	r8, r2
 801744a:	4604      	mov	r4, r0
 801744c:	f7f8 ff7c 	bl	8010348 <ucdr_check_buffer_available_for>
 8017450:	b9e0      	cbnz	r0, 801748c <ucdr_serialize_endian_array_char+0x4c>
 8017452:	4637      	mov	r7, r6
 8017454:	e009      	b.n	801746a <ucdr_serialize_endian_array_char+0x2a>
 8017456:	68a0      	ldr	r0, [r4, #8]
 8017458:	f002 fcf3 	bl	8019e42 <memcpy>
 801745c:	68a2      	ldr	r2, [r4, #8]
 801745e:	6923      	ldr	r3, [r4, #16]
 8017460:	442a      	add	r2, r5
 8017462:	442b      	add	r3, r5
 8017464:	1b7f      	subs	r7, r7, r5
 8017466:	60a2      	str	r2, [r4, #8]
 8017468:	6123      	str	r3, [r4, #16]
 801746a:	2201      	movs	r2, #1
 801746c:	4639      	mov	r1, r7
 801746e:	4620      	mov	r0, r4
 8017470:	f7f8 fff0 	bl	8010454 <ucdr_check_final_buffer_behavior_array>
 8017474:	1bf1      	subs	r1, r6, r7
 8017476:	4441      	add	r1, r8
 8017478:	4605      	mov	r5, r0
 801747a:	4602      	mov	r2, r0
 801747c:	2800      	cmp	r0, #0
 801747e:	d1ea      	bne.n	8017456 <ucdr_serialize_endian_array_char+0x16>
 8017480:	2301      	movs	r3, #1
 8017482:	7da0      	ldrb	r0, [r4, #22]
 8017484:	7563      	strb	r3, [r4, #21]
 8017486:	4058      	eors	r0, r3
 8017488:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801748c:	4632      	mov	r2, r6
 801748e:	68a0      	ldr	r0, [r4, #8]
 8017490:	4641      	mov	r1, r8
 8017492:	f002 fcd6 	bl	8019e42 <memcpy>
 8017496:	68a2      	ldr	r2, [r4, #8]
 8017498:	6923      	ldr	r3, [r4, #16]
 801749a:	4432      	add	r2, r6
 801749c:	4433      	add	r3, r6
 801749e:	60a2      	str	r2, [r4, #8]
 80174a0:	6123      	str	r3, [r4, #16]
 80174a2:	e7ed      	b.n	8017480 <ucdr_serialize_endian_array_char+0x40>

080174a4 <ucdr_deserialize_endian_array_char>:
 80174a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80174a8:	4619      	mov	r1, r3
 80174aa:	461e      	mov	r6, r3
 80174ac:	4690      	mov	r8, r2
 80174ae:	4604      	mov	r4, r0
 80174b0:	f7f8 ff4a 	bl	8010348 <ucdr_check_buffer_available_for>
 80174b4:	b9e0      	cbnz	r0, 80174f0 <ucdr_deserialize_endian_array_char+0x4c>
 80174b6:	4637      	mov	r7, r6
 80174b8:	e009      	b.n	80174ce <ucdr_deserialize_endian_array_char+0x2a>
 80174ba:	68a1      	ldr	r1, [r4, #8]
 80174bc:	f002 fcc1 	bl	8019e42 <memcpy>
 80174c0:	68a2      	ldr	r2, [r4, #8]
 80174c2:	6923      	ldr	r3, [r4, #16]
 80174c4:	442a      	add	r2, r5
 80174c6:	442b      	add	r3, r5
 80174c8:	1b7f      	subs	r7, r7, r5
 80174ca:	60a2      	str	r2, [r4, #8]
 80174cc:	6123      	str	r3, [r4, #16]
 80174ce:	2201      	movs	r2, #1
 80174d0:	4639      	mov	r1, r7
 80174d2:	4620      	mov	r0, r4
 80174d4:	f7f8 ffbe 	bl	8010454 <ucdr_check_final_buffer_behavior_array>
 80174d8:	4605      	mov	r5, r0
 80174da:	1bf0      	subs	r0, r6, r7
 80174dc:	4440      	add	r0, r8
 80174de:	462a      	mov	r2, r5
 80174e0:	2d00      	cmp	r5, #0
 80174e2:	d1ea      	bne.n	80174ba <ucdr_deserialize_endian_array_char+0x16>
 80174e4:	2301      	movs	r3, #1
 80174e6:	7da0      	ldrb	r0, [r4, #22]
 80174e8:	7563      	strb	r3, [r4, #21]
 80174ea:	4058      	eors	r0, r3
 80174ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80174f0:	4632      	mov	r2, r6
 80174f2:	68a1      	ldr	r1, [r4, #8]
 80174f4:	4640      	mov	r0, r8
 80174f6:	f002 fca4 	bl	8019e42 <memcpy>
 80174fa:	68a2      	ldr	r2, [r4, #8]
 80174fc:	6923      	ldr	r3, [r4, #16]
 80174fe:	4432      	add	r2, r6
 8017500:	4433      	add	r3, r6
 8017502:	60a2      	str	r2, [r4, #8]
 8017504:	6123      	str	r3, [r4, #16]
 8017506:	e7ed      	b.n	80174e4 <ucdr_deserialize_endian_array_char+0x40>

08017508 <ucdr_serialize_array_uint8_t>:
 8017508:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801750c:	4688      	mov	r8, r1
 801750e:	4611      	mov	r1, r2
 8017510:	4616      	mov	r6, r2
 8017512:	4604      	mov	r4, r0
 8017514:	f7f8 ff18 	bl	8010348 <ucdr_check_buffer_available_for>
 8017518:	b9e0      	cbnz	r0, 8017554 <ucdr_serialize_array_uint8_t+0x4c>
 801751a:	4637      	mov	r7, r6
 801751c:	e009      	b.n	8017532 <ucdr_serialize_array_uint8_t+0x2a>
 801751e:	68a0      	ldr	r0, [r4, #8]
 8017520:	f002 fc8f 	bl	8019e42 <memcpy>
 8017524:	68a2      	ldr	r2, [r4, #8]
 8017526:	6923      	ldr	r3, [r4, #16]
 8017528:	442a      	add	r2, r5
 801752a:	442b      	add	r3, r5
 801752c:	1b7f      	subs	r7, r7, r5
 801752e:	60a2      	str	r2, [r4, #8]
 8017530:	6123      	str	r3, [r4, #16]
 8017532:	2201      	movs	r2, #1
 8017534:	4639      	mov	r1, r7
 8017536:	4620      	mov	r0, r4
 8017538:	f7f8 ff8c 	bl	8010454 <ucdr_check_final_buffer_behavior_array>
 801753c:	1bf1      	subs	r1, r6, r7
 801753e:	4441      	add	r1, r8
 8017540:	4605      	mov	r5, r0
 8017542:	4602      	mov	r2, r0
 8017544:	2800      	cmp	r0, #0
 8017546:	d1ea      	bne.n	801751e <ucdr_serialize_array_uint8_t+0x16>
 8017548:	2301      	movs	r3, #1
 801754a:	7da0      	ldrb	r0, [r4, #22]
 801754c:	7563      	strb	r3, [r4, #21]
 801754e:	4058      	eors	r0, r3
 8017550:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017554:	4632      	mov	r2, r6
 8017556:	68a0      	ldr	r0, [r4, #8]
 8017558:	4641      	mov	r1, r8
 801755a:	f002 fc72 	bl	8019e42 <memcpy>
 801755e:	68a3      	ldr	r3, [r4, #8]
 8017560:	6922      	ldr	r2, [r4, #16]
 8017562:	4433      	add	r3, r6
 8017564:	4432      	add	r2, r6
 8017566:	60a3      	str	r3, [r4, #8]
 8017568:	6122      	str	r2, [r4, #16]
 801756a:	e7ed      	b.n	8017548 <ucdr_serialize_array_uint8_t+0x40>

0801756c <ucdr_serialize_endian_array_uint8_t>:
 801756c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017570:	4619      	mov	r1, r3
 8017572:	461e      	mov	r6, r3
 8017574:	4690      	mov	r8, r2
 8017576:	4604      	mov	r4, r0
 8017578:	f7f8 fee6 	bl	8010348 <ucdr_check_buffer_available_for>
 801757c:	b9e0      	cbnz	r0, 80175b8 <ucdr_serialize_endian_array_uint8_t+0x4c>
 801757e:	4637      	mov	r7, r6
 8017580:	e009      	b.n	8017596 <ucdr_serialize_endian_array_uint8_t+0x2a>
 8017582:	68a0      	ldr	r0, [r4, #8]
 8017584:	f002 fc5d 	bl	8019e42 <memcpy>
 8017588:	68a2      	ldr	r2, [r4, #8]
 801758a:	6923      	ldr	r3, [r4, #16]
 801758c:	442a      	add	r2, r5
 801758e:	442b      	add	r3, r5
 8017590:	1b7f      	subs	r7, r7, r5
 8017592:	60a2      	str	r2, [r4, #8]
 8017594:	6123      	str	r3, [r4, #16]
 8017596:	2201      	movs	r2, #1
 8017598:	4639      	mov	r1, r7
 801759a:	4620      	mov	r0, r4
 801759c:	f7f8 ff5a 	bl	8010454 <ucdr_check_final_buffer_behavior_array>
 80175a0:	1bf1      	subs	r1, r6, r7
 80175a2:	4441      	add	r1, r8
 80175a4:	4605      	mov	r5, r0
 80175a6:	4602      	mov	r2, r0
 80175a8:	2800      	cmp	r0, #0
 80175aa:	d1ea      	bne.n	8017582 <ucdr_serialize_endian_array_uint8_t+0x16>
 80175ac:	2301      	movs	r3, #1
 80175ae:	7da0      	ldrb	r0, [r4, #22]
 80175b0:	7563      	strb	r3, [r4, #21]
 80175b2:	4058      	eors	r0, r3
 80175b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80175b8:	4632      	mov	r2, r6
 80175ba:	68a0      	ldr	r0, [r4, #8]
 80175bc:	4641      	mov	r1, r8
 80175be:	f002 fc40 	bl	8019e42 <memcpy>
 80175c2:	68a2      	ldr	r2, [r4, #8]
 80175c4:	6923      	ldr	r3, [r4, #16]
 80175c6:	4432      	add	r2, r6
 80175c8:	4433      	add	r3, r6
 80175ca:	60a2      	str	r2, [r4, #8]
 80175cc:	6123      	str	r3, [r4, #16]
 80175ce:	e7ed      	b.n	80175ac <ucdr_serialize_endian_array_uint8_t+0x40>

080175d0 <ucdr_deserialize_array_uint8_t>:
 80175d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80175d4:	4688      	mov	r8, r1
 80175d6:	4611      	mov	r1, r2
 80175d8:	4616      	mov	r6, r2
 80175da:	4604      	mov	r4, r0
 80175dc:	f7f8 feb4 	bl	8010348 <ucdr_check_buffer_available_for>
 80175e0:	b9e0      	cbnz	r0, 801761c <ucdr_deserialize_array_uint8_t+0x4c>
 80175e2:	4637      	mov	r7, r6
 80175e4:	e009      	b.n	80175fa <ucdr_deserialize_array_uint8_t+0x2a>
 80175e6:	68a1      	ldr	r1, [r4, #8]
 80175e8:	f002 fc2b 	bl	8019e42 <memcpy>
 80175ec:	68a2      	ldr	r2, [r4, #8]
 80175ee:	6923      	ldr	r3, [r4, #16]
 80175f0:	442a      	add	r2, r5
 80175f2:	442b      	add	r3, r5
 80175f4:	1b7f      	subs	r7, r7, r5
 80175f6:	60a2      	str	r2, [r4, #8]
 80175f8:	6123      	str	r3, [r4, #16]
 80175fa:	2201      	movs	r2, #1
 80175fc:	4639      	mov	r1, r7
 80175fe:	4620      	mov	r0, r4
 8017600:	f7f8 ff28 	bl	8010454 <ucdr_check_final_buffer_behavior_array>
 8017604:	4605      	mov	r5, r0
 8017606:	1bf0      	subs	r0, r6, r7
 8017608:	4440      	add	r0, r8
 801760a:	462a      	mov	r2, r5
 801760c:	2d00      	cmp	r5, #0
 801760e:	d1ea      	bne.n	80175e6 <ucdr_deserialize_array_uint8_t+0x16>
 8017610:	2301      	movs	r3, #1
 8017612:	7da0      	ldrb	r0, [r4, #22]
 8017614:	7563      	strb	r3, [r4, #21]
 8017616:	4058      	eors	r0, r3
 8017618:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801761c:	4632      	mov	r2, r6
 801761e:	68a1      	ldr	r1, [r4, #8]
 8017620:	4640      	mov	r0, r8
 8017622:	f002 fc0e 	bl	8019e42 <memcpy>
 8017626:	68a3      	ldr	r3, [r4, #8]
 8017628:	6922      	ldr	r2, [r4, #16]
 801762a:	4433      	add	r3, r6
 801762c:	4432      	add	r2, r6
 801762e:	60a3      	str	r3, [r4, #8]
 8017630:	6122      	str	r2, [r4, #16]
 8017632:	e7ed      	b.n	8017610 <ucdr_deserialize_array_uint8_t+0x40>

08017634 <ucdr_deserialize_endian_array_uint8_t>:
 8017634:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017638:	4619      	mov	r1, r3
 801763a:	461e      	mov	r6, r3
 801763c:	4690      	mov	r8, r2
 801763e:	4604      	mov	r4, r0
 8017640:	f7f8 fe82 	bl	8010348 <ucdr_check_buffer_available_for>
 8017644:	b9e0      	cbnz	r0, 8017680 <ucdr_deserialize_endian_array_uint8_t+0x4c>
 8017646:	4637      	mov	r7, r6
 8017648:	e009      	b.n	801765e <ucdr_deserialize_endian_array_uint8_t+0x2a>
 801764a:	68a1      	ldr	r1, [r4, #8]
 801764c:	f002 fbf9 	bl	8019e42 <memcpy>
 8017650:	68a2      	ldr	r2, [r4, #8]
 8017652:	6923      	ldr	r3, [r4, #16]
 8017654:	442a      	add	r2, r5
 8017656:	442b      	add	r3, r5
 8017658:	1b7f      	subs	r7, r7, r5
 801765a:	60a2      	str	r2, [r4, #8]
 801765c:	6123      	str	r3, [r4, #16]
 801765e:	2201      	movs	r2, #1
 8017660:	4639      	mov	r1, r7
 8017662:	4620      	mov	r0, r4
 8017664:	f7f8 fef6 	bl	8010454 <ucdr_check_final_buffer_behavior_array>
 8017668:	4605      	mov	r5, r0
 801766a:	1bf0      	subs	r0, r6, r7
 801766c:	4440      	add	r0, r8
 801766e:	462a      	mov	r2, r5
 8017670:	2d00      	cmp	r5, #0
 8017672:	d1ea      	bne.n	801764a <ucdr_deserialize_endian_array_uint8_t+0x16>
 8017674:	2301      	movs	r3, #1
 8017676:	7da0      	ldrb	r0, [r4, #22]
 8017678:	7563      	strb	r3, [r4, #21]
 801767a:	4058      	eors	r0, r3
 801767c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017680:	4632      	mov	r2, r6
 8017682:	68a1      	ldr	r1, [r4, #8]
 8017684:	4640      	mov	r0, r8
 8017686:	f002 fbdc 	bl	8019e42 <memcpy>
 801768a:	68a2      	ldr	r2, [r4, #8]
 801768c:	6923      	ldr	r3, [r4, #16]
 801768e:	4432      	add	r2, r6
 8017690:	4433      	add	r3, r6
 8017692:	60a2      	str	r2, [r4, #8]
 8017694:	6123      	str	r3, [r4, #16]
 8017696:	e7ed      	b.n	8017674 <ucdr_deserialize_endian_array_uint8_t+0x40>

08017698 <ucdr_serialize_endian_array_double>:
 8017698:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801769c:	460f      	mov	r7, r1
 801769e:	2108      	movs	r1, #8
 80176a0:	4605      	mov	r5, r0
 80176a2:	4614      	mov	r4, r2
 80176a4:	461e      	mov	r6, r3
 80176a6:	f7f8 fead 	bl	8010404 <ucdr_buffer_alignment>
 80176aa:	4601      	mov	r1, r0
 80176ac:	4628      	mov	r0, r5
 80176ae:	f895 8015 	ldrb.w	r8, [r5, #21]
 80176b2:	f7f8 feeb 	bl	801048c <ucdr_advance_buffer>
 80176b6:	2f01      	cmp	r7, #1
 80176b8:	f885 8015 	strb.w	r8, [r5, #21]
 80176bc:	d00f      	beq.n	80176de <ucdr_serialize_endian_array_double+0x46>
 80176be:	b14e      	cbz	r6, 80176d4 <ucdr_serialize_endian_array_double+0x3c>
 80176c0:	eb04 06c6 	add.w	r6, r4, r6, lsl #3
 80176c4:	ecb4 0b02 	vldmia	r4!, {d0}
 80176c8:	4639      	mov	r1, r7
 80176ca:	4628      	mov	r0, r5
 80176cc:	f7f8 fc9c 	bl	8010008 <ucdr_serialize_endian_double>
 80176d0:	42a6      	cmp	r6, r4
 80176d2:	d1f7      	bne.n	80176c4 <ucdr_serialize_endian_array_double+0x2c>
 80176d4:	7da8      	ldrb	r0, [r5, #22]
 80176d6:	f080 0001 	eor.w	r0, r0, #1
 80176da:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80176de:	00f6      	lsls	r6, r6, #3
 80176e0:	4631      	mov	r1, r6
 80176e2:	4628      	mov	r0, r5
 80176e4:	f7f8 fe30 	bl	8010348 <ucdr_check_buffer_available_for>
 80176e8:	b9f8      	cbnz	r0, 801772a <ucdr_serialize_endian_array_double+0x92>
 80176ea:	46b0      	mov	r8, r6
 80176ec:	e00a      	b.n	8017704 <ucdr_serialize_endian_array_double+0x6c>
 80176ee:	68a8      	ldr	r0, [r5, #8]
 80176f0:	f002 fba7 	bl	8019e42 <memcpy>
 80176f4:	68aa      	ldr	r2, [r5, #8]
 80176f6:	692b      	ldr	r3, [r5, #16]
 80176f8:	443a      	add	r2, r7
 80176fa:	443b      	add	r3, r7
 80176fc:	eba8 0807 	sub.w	r8, r8, r7
 8017700:	60aa      	str	r2, [r5, #8]
 8017702:	612b      	str	r3, [r5, #16]
 8017704:	2208      	movs	r2, #8
 8017706:	4641      	mov	r1, r8
 8017708:	4628      	mov	r0, r5
 801770a:	f7f8 fea3 	bl	8010454 <ucdr_check_final_buffer_behavior_array>
 801770e:	eba6 0108 	sub.w	r1, r6, r8
 8017712:	4421      	add	r1, r4
 8017714:	4607      	mov	r7, r0
 8017716:	4602      	mov	r2, r0
 8017718:	2800      	cmp	r0, #0
 801771a:	d1e8      	bne.n	80176ee <ucdr_serialize_endian_array_double+0x56>
 801771c:	7da8      	ldrb	r0, [r5, #22]
 801771e:	2308      	movs	r3, #8
 8017720:	756b      	strb	r3, [r5, #21]
 8017722:	f080 0001 	eor.w	r0, r0, #1
 8017726:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801772a:	4632      	mov	r2, r6
 801772c:	68a8      	ldr	r0, [r5, #8]
 801772e:	4621      	mov	r1, r4
 8017730:	f002 fb87 	bl	8019e42 <memcpy>
 8017734:	68aa      	ldr	r2, [r5, #8]
 8017736:	692b      	ldr	r3, [r5, #16]
 8017738:	4432      	add	r2, r6
 801773a:	441e      	add	r6, r3
 801773c:	60aa      	str	r2, [r5, #8]
 801773e:	612e      	str	r6, [r5, #16]
 8017740:	e7ec      	b.n	801771c <ucdr_serialize_endian_array_double+0x84>
 8017742:	bf00      	nop

08017744 <ucdr_deserialize_endian_array_double>:
 8017744:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017748:	460f      	mov	r7, r1
 801774a:	2108      	movs	r1, #8
 801774c:	4605      	mov	r5, r0
 801774e:	4614      	mov	r4, r2
 8017750:	461e      	mov	r6, r3
 8017752:	f7f8 fe57 	bl	8010404 <ucdr_buffer_alignment>
 8017756:	4601      	mov	r1, r0
 8017758:	4628      	mov	r0, r5
 801775a:	f895 8015 	ldrb.w	r8, [r5, #21]
 801775e:	f7f8 fe95 	bl	801048c <ucdr_advance_buffer>
 8017762:	2f01      	cmp	r7, #1
 8017764:	f885 8015 	strb.w	r8, [r5, #21]
 8017768:	d00f      	beq.n	801778a <ucdr_deserialize_endian_array_double+0x46>
 801776a:	b14e      	cbz	r6, 8017780 <ucdr_deserialize_endian_array_double+0x3c>
 801776c:	eb04 06c6 	add.w	r6, r4, r6, lsl #3
 8017770:	4622      	mov	r2, r4
 8017772:	4639      	mov	r1, r7
 8017774:	3408      	adds	r4, #8
 8017776:	4628      	mov	r0, r5
 8017778:	f7f8 fd18 	bl	80101ac <ucdr_deserialize_endian_double>
 801777c:	42a6      	cmp	r6, r4
 801777e:	d1f7      	bne.n	8017770 <ucdr_deserialize_endian_array_double+0x2c>
 8017780:	7da8      	ldrb	r0, [r5, #22]
 8017782:	f080 0001 	eor.w	r0, r0, #1
 8017786:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801778a:	00f6      	lsls	r6, r6, #3
 801778c:	4631      	mov	r1, r6
 801778e:	4628      	mov	r0, r5
 8017790:	f7f8 fdda 	bl	8010348 <ucdr_check_buffer_available_for>
 8017794:	b9f8      	cbnz	r0, 80177d6 <ucdr_deserialize_endian_array_double+0x92>
 8017796:	46b0      	mov	r8, r6
 8017798:	e00a      	b.n	80177b0 <ucdr_deserialize_endian_array_double+0x6c>
 801779a:	68a9      	ldr	r1, [r5, #8]
 801779c:	f002 fb51 	bl	8019e42 <memcpy>
 80177a0:	68aa      	ldr	r2, [r5, #8]
 80177a2:	692b      	ldr	r3, [r5, #16]
 80177a4:	443a      	add	r2, r7
 80177a6:	443b      	add	r3, r7
 80177a8:	eba8 0807 	sub.w	r8, r8, r7
 80177ac:	60aa      	str	r2, [r5, #8]
 80177ae:	612b      	str	r3, [r5, #16]
 80177b0:	2208      	movs	r2, #8
 80177b2:	4641      	mov	r1, r8
 80177b4:	4628      	mov	r0, r5
 80177b6:	f7f8 fe4d 	bl	8010454 <ucdr_check_final_buffer_behavior_array>
 80177ba:	4607      	mov	r7, r0
 80177bc:	eba6 0008 	sub.w	r0, r6, r8
 80177c0:	4420      	add	r0, r4
 80177c2:	463a      	mov	r2, r7
 80177c4:	2f00      	cmp	r7, #0
 80177c6:	d1e8      	bne.n	801779a <ucdr_deserialize_endian_array_double+0x56>
 80177c8:	7da8      	ldrb	r0, [r5, #22]
 80177ca:	2308      	movs	r3, #8
 80177cc:	756b      	strb	r3, [r5, #21]
 80177ce:	f080 0001 	eor.w	r0, r0, #1
 80177d2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80177d6:	4632      	mov	r2, r6
 80177d8:	68a9      	ldr	r1, [r5, #8]
 80177da:	4620      	mov	r0, r4
 80177dc:	f002 fb31 	bl	8019e42 <memcpy>
 80177e0:	68aa      	ldr	r2, [r5, #8]
 80177e2:	692b      	ldr	r3, [r5, #16]
 80177e4:	4432      	add	r2, r6
 80177e6:	441e      	add	r6, r3
 80177e8:	60aa      	str	r2, [r5, #8]
 80177ea:	612e      	str	r6, [r5, #16]
 80177ec:	e7ec      	b.n	80177c8 <ucdr_deserialize_endian_array_double+0x84>
 80177ee:	bf00      	nop

080177f0 <ucdr_serialize_string>:
 80177f0:	b510      	push	{r4, lr}
 80177f2:	b082      	sub	sp, #8
 80177f4:	4604      	mov	r4, r0
 80177f6:	4608      	mov	r0, r1
 80177f8:	9101      	str	r1, [sp, #4]
 80177fa:	f7e8 fcf3 	bl	80001e4 <strlen>
 80177fe:	9901      	ldr	r1, [sp, #4]
 8017800:	4602      	mov	r2, r0
 8017802:	3201      	adds	r2, #1
 8017804:	4620      	mov	r0, r4
 8017806:	b002      	add	sp, #8
 8017808:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801780c:	f7f8 be5e 	b.w	80104cc <ucdr_serialize_sequence_char>

08017810 <ucdr_deserialize_string>:
 8017810:	b500      	push	{lr}
 8017812:	b083      	sub	sp, #12
 8017814:	ab01      	add	r3, sp, #4
 8017816:	f7f8 fe6b 	bl	80104f0 <ucdr_deserialize_sequence_char>
 801781a:	b003      	add	sp, #12
 801781c:	f85d fb04 	ldr.w	pc, [sp], #4

08017820 <get_custom_error>:
 8017820:	4b01      	ldr	r3, [pc, #4]	@ (8017828 <get_custom_error+0x8>)
 8017822:	7818      	ldrb	r0, [r3, #0]
 8017824:	4770      	bx	lr
 8017826:	bf00      	nop
 8017828:	200076dc 	.word	0x200076dc

0801782c <recv_custom_msg>:
 801782c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017830:	f890 5200 	ldrb.w	r5, [r0, #512]	@ 0x200
 8017834:	b089      	sub	sp, #36	@ 0x24
 8017836:	2600      	movs	r6, #0
 8017838:	4604      	mov	r4, r0
 801783a:	9305      	str	r3, [sp, #20]
 801783c:	468a      	mov	sl, r1
 801783e:	4693      	mov	fp, r2
 8017840:	f88d 601e 	strb.w	r6, [sp, #30]
 8017844:	b325      	cbz	r5, 8017890 <recv_custom_msg+0x64>
 8017846:	f200 2902 	addw	r9, r0, #514	@ 0x202
 801784a:	f10d 081f 	add.w	r8, sp, #31
 801784e:	af05      	add	r7, sp, #20
 8017850:	f10d 061e 	add.w	r6, sp, #30
 8017854:	f44f 7500 	mov.w	r5, #512	@ 0x200
 8017858:	e002      	b.n	8017860 <recv_custom_msg+0x34>
 801785a:	9b05      	ldr	r3, [sp, #20]
 801785c:	2b00      	cmp	r3, #0
 801785e:	dd0f      	ble.n	8017880 <recv_custom_msg+0x54>
 8017860:	e9cd 7802 	strd	r7, r8, [sp, #8]
 8017864:	e9cd 5600 	strd	r5, r6, [sp]
 8017868:	4623      	mov	r3, r4
 801786a:	f8d4 1274 	ldr.w	r1, [r4, #628]	@ 0x274
 801786e:	4622      	mov	r2, r4
 8017870:	4648      	mov	r0, r9
 8017872:	f001 f8fb 	bl	8018a6c <uxr_read_framed_msg>
 8017876:	2800      	cmp	r0, #0
 8017878:	d0ef      	beq.n	801785a <recv_custom_msg+0x2e>
 801787a:	f89d 301e 	ldrb.w	r3, [sp, #30]
 801787e:	b1b3      	cbz	r3, 80178ae <recv_custom_msg+0x82>
 8017880:	4b0f      	ldr	r3, [pc, #60]	@ (80178c0 <recv_custom_msg+0x94>)
 8017882:	f89d 201f 	ldrb.w	r2, [sp, #31]
 8017886:	701a      	strb	r2, [r3, #0]
 8017888:	2000      	movs	r0, #0
 801788a:	b009      	add	sp, #36	@ 0x24
 801788c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017890:	f10d 021f 	add.w	r2, sp, #31
 8017894:	9200      	str	r2, [sp, #0]
 8017896:	f8d0 5274 	ldr.w	r5, [r0, #628]	@ 0x274
 801789a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 801789e:	4601      	mov	r1, r0
 80178a0:	47a8      	blx	r5
 80178a2:	2800      	cmp	r0, #0
 80178a4:	d0ec      	beq.n	8017880 <recv_custom_msg+0x54>
 80178a6:	f89d 301e 	ldrb.w	r3, [sp, #30]
 80178aa:	2b00      	cmp	r3, #0
 80178ac:	d1e8      	bne.n	8017880 <recv_custom_msg+0x54>
 80178ae:	f8cb 0000 	str.w	r0, [fp]
 80178b2:	2001      	movs	r0, #1
 80178b4:	f8ca 4000 	str.w	r4, [sl]
 80178b8:	b009      	add	sp, #36	@ 0x24
 80178ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80178be:	bf00      	nop
 80178c0:	200076dc 	.word	0x200076dc

080178c4 <send_custom_msg>:
 80178c4:	b570      	push	{r4, r5, r6, lr}
 80178c6:	f890 5200 	ldrb.w	r5, [r0, #512]	@ 0x200
 80178ca:	b086      	sub	sp, #24
 80178cc:	4616      	mov	r6, r2
 80178ce:	b975      	cbnz	r5, 80178ee <send_custom_msg+0x2a>
 80178d0:	f8d0 4270 	ldr.w	r4, [r0, #624]	@ 0x270
 80178d4:	f10d 0317 	add.w	r3, sp, #23
 80178d8:	47a0      	blx	r4
 80178da:	b108      	cbz	r0, 80178e0 <send_custom_msg+0x1c>
 80178dc:	42b0      	cmp	r0, r6
 80178de:	d015      	beq.n	801790c <send_custom_msg+0x48>
 80178e0:	4b0c      	ldr	r3, [pc, #48]	@ (8017914 <send_custom_msg+0x50>)
 80178e2:	f89d 2017 	ldrb.w	r2, [sp, #23]
 80178e6:	701a      	strb	r2, [r3, #0]
 80178e8:	2000      	movs	r0, #0
 80178ea:	b006      	add	sp, #24
 80178ec:	bd70      	pop	{r4, r5, r6, pc}
 80178ee:	460b      	mov	r3, r1
 80178f0:	2200      	movs	r2, #0
 80178f2:	f10d 0117 	add.w	r1, sp, #23
 80178f6:	e9cd 2101 	strd	r2, r1, [sp, #4]
 80178fa:	9600      	str	r6, [sp, #0]
 80178fc:	f8d0 1270 	ldr.w	r1, [r0, #624]	@ 0x270
 8017900:	4602      	mov	r2, r0
 8017902:	f200 2002 	addw	r0, r0, #514	@ 0x202
 8017906:	f000 fec9 	bl	801869c <uxr_write_framed_msg>
 801790a:	e7e6      	b.n	80178da <send_custom_msg+0x16>
 801790c:	2001      	movs	r0, #1
 801790e:	b006      	add	sp, #24
 8017910:	bd70      	pop	{r4, r5, r6, pc}
 8017912:	bf00      	nop
 8017914:	200076dc 	.word	0x200076dc

08017918 <uxr_set_custom_transport_callbacks>:
 8017918:	b430      	push	{r4, r5}
 801791a:	e9dd 5402 	ldrd	r5, r4, [sp, #8]
 801791e:	e9c0 239a 	strd	r2, r3, [r0, #616]	@ 0x268
 8017922:	e9c0 549c 	strd	r5, r4, [r0, #624]	@ 0x270
 8017926:	f880 1200 	strb.w	r1, [r0, #512]	@ 0x200
 801792a:	bc30      	pop	{r4, r5}
 801792c:	4770      	bx	lr
 801792e:	bf00      	nop

08017930 <uxr_init_custom_transport>:
 8017930:	b538      	push	{r3, r4, r5, lr}
 8017932:	f8d0 3268 	ldr.w	r3, [r0, #616]	@ 0x268
 8017936:	b303      	cbz	r3, 801797a <uxr_init_custom_transport+0x4a>
 8017938:	f8d0 226c 	ldr.w	r2, [r0, #620]	@ 0x26c
 801793c:	4604      	mov	r4, r0
 801793e:	b1e2      	cbz	r2, 801797a <uxr_init_custom_transport+0x4a>
 8017940:	f8d0 2270 	ldr.w	r2, [r0, #624]	@ 0x270
 8017944:	b1ca      	cbz	r2, 801797a <uxr_init_custom_transport+0x4a>
 8017946:	f8d0 2274 	ldr.w	r2, [r0, #628]	@ 0x274
 801794a:	b1b2      	cbz	r2, 801797a <uxr_init_custom_transport+0x4a>
 801794c:	f8c0 128c 	str.w	r1, [r0, #652]	@ 0x28c
 8017950:	4798      	blx	r3
 8017952:	4605      	mov	r5, r0
 8017954:	b188      	cbz	r0, 801797a <uxr_init_custom_transport+0x4a>
 8017956:	f894 3200 	ldrb.w	r3, [r4, #512]	@ 0x200
 801795a:	b98b      	cbnz	r3, 8017980 <uxr_init_custom_transport+0x50>
 801795c:	480b      	ldr	r0, [pc, #44]	@ (801798c <uxr_init_custom_transport+0x5c>)
 801795e:	490c      	ldr	r1, [pc, #48]	@ (8017990 <uxr_init_custom_transport+0x60>)
 8017960:	4a0c      	ldr	r2, [pc, #48]	@ (8017994 <uxr_init_custom_transport+0x64>)
 8017962:	f8c4 4278 	str.w	r4, [r4, #632]	@ 0x278
 8017966:	f44f 7300 	mov.w	r3, #512	@ 0x200
 801796a:	e9c4 019f 	strd	r0, r1, [r4, #636]	@ 0x27c
 801796e:	f8c4 2284 	str.w	r2, [r4, #644]	@ 0x284
 8017972:	f8a4 3288 	strh.w	r3, [r4, #648]	@ 0x288
 8017976:	4628      	mov	r0, r5
 8017978:	bd38      	pop	{r3, r4, r5, pc}
 801797a:	2500      	movs	r5, #0
 801797c:	4628      	mov	r0, r5
 801797e:	bd38      	pop	{r3, r4, r5, pc}
 8017980:	2100      	movs	r1, #0
 8017982:	f204 2002 	addw	r0, r4, #514	@ 0x202
 8017986:	f000 fe83 	bl	8018690 <uxr_init_framing_io>
 801798a:	e7e7      	b.n	801795c <uxr_init_custom_transport+0x2c>
 801798c:	080178c5 	.word	0x080178c5
 8017990:	0801782d 	.word	0x0801782d
 8017994:	08017821 	.word	0x08017821

08017998 <uxr_close_custom_transport>:
 8017998:	f8d0 326c 	ldr.w	r3, [r0, #620]	@ 0x26c
 801799c:	4718      	bx	r3
 801799e:	bf00      	nop

080179a0 <uxr_init_input_best_effort_stream>:
 80179a0:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80179a4:	8003      	strh	r3, [r0, #0]
 80179a6:	4770      	bx	lr

080179a8 <uxr_reset_input_best_effort_stream>:
 80179a8:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80179ac:	8003      	strh	r3, [r0, #0]
 80179ae:	4770      	bx	lr

080179b0 <uxr_receive_best_effort_message>:
 80179b0:	b538      	push	{r3, r4, r5, lr}
 80179b2:	4604      	mov	r4, r0
 80179b4:	8800      	ldrh	r0, [r0, #0]
 80179b6:	460d      	mov	r5, r1
 80179b8:	f000 fe52 	bl	8018660 <uxr_seq_num_cmp>
 80179bc:	4603      	mov	r3, r0
 80179be:	2b00      	cmp	r3, #0
 80179c0:	ea4f 70d0 	mov.w	r0, r0, lsr #31
 80179c4:	bfb8      	it	lt
 80179c6:	8025      	strhlt	r5, [r4, #0]
 80179c8:	bd38      	pop	{r3, r4, r5, pc}
 80179ca:	bf00      	nop

080179cc <on_full_input_buffer>:
 80179cc:	b570      	push	{r4, r5, r6, lr}
 80179ce:	6802      	ldr	r2, [r0, #0]
 80179d0:	460d      	mov	r5, r1
 80179d2:	6809      	ldr	r1, [r1, #0]
 80179d4:	686c      	ldr	r4, [r5, #4]
 80179d6:	1a53      	subs	r3, r2, r1
 80179d8:	4606      	mov	r6, r0
 80179da:	8928      	ldrh	r0, [r5, #8]
 80179dc:	fbb4 f4f0 	udiv	r4, r4, r0
 80179e0:	fbb3 f3f4 	udiv	r3, r3, r4
 80179e4:	3301      	adds	r3, #1
 80179e6:	b29b      	uxth	r3, r3
 80179e8:	fbb3 f2f0 	udiv	r2, r3, r0
 80179ec:	fb00 3312 	mls	r3, r0, r2, r3
 80179f0:	b29b      	uxth	r3, r3
 80179f2:	fb04 f403 	mul.w	r4, r4, r3
 80179f6:	1d23      	adds	r3, r4, #4
 80179f8:	440b      	add	r3, r1
 80179fa:	7d28      	ldrb	r0, [r5, #20]
 80179fc:	f853 2c04 	ldr.w	r2, [r3, #-4]
 8017a00:	b110      	cbz	r0, 8017a08 <on_full_input_buffer+0x3c>
 8017a02:	2000      	movs	r0, #0
 8017a04:	f843 0c04 	str.w	r0, [r3, #-4]
 8017a08:	2a03      	cmp	r2, #3
 8017a0a:	d801      	bhi.n	8017a10 <on_full_input_buffer+0x44>
 8017a0c:	2001      	movs	r0, #1
 8017a0e:	bd70      	pop	{r4, r5, r6, pc}
 8017a10:	3408      	adds	r4, #8
 8017a12:	6933      	ldr	r3, [r6, #16]
 8017a14:	4421      	add	r1, r4
 8017a16:	4630      	mov	r0, r6
 8017a18:	3a04      	subs	r2, #4
 8017a1a:	f7f8 fcdf 	bl	80103dc <ucdr_init_buffer_origin>
 8017a1e:	4630      	mov	r0, r6
 8017a20:	4902      	ldr	r1, [pc, #8]	@ (8017a2c <on_full_input_buffer+0x60>)
 8017a22:	462a      	mov	r2, r5
 8017a24:	f7f8 fcb8 	bl	8010398 <ucdr_set_on_full_buffer_callback>
 8017a28:	2000      	movs	r0, #0
 8017a2a:	bd70      	pop	{r4, r5, r6, pc}
 8017a2c:	080179cd 	.word	0x080179cd

08017a30 <uxr_init_input_reliable_stream>:
 8017a30:	b470      	push	{r4, r5, r6}
 8017a32:	9c03      	ldr	r4, [sp, #12]
 8017a34:	6001      	str	r1, [r0, #0]
 8017a36:	2600      	movs	r6, #0
 8017a38:	8103      	strh	r3, [r0, #8]
 8017a3a:	6042      	str	r2, [r0, #4]
 8017a3c:	6104      	str	r4, [r0, #16]
 8017a3e:	7506      	strb	r6, [r0, #20]
 8017a40:	b1ab      	cbz	r3, 8017a6e <uxr_init_input_reliable_stream+0x3e>
 8017a42:	600e      	str	r6, [r1, #0]
 8017a44:	8901      	ldrh	r1, [r0, #8]
 8017a46:	2901      	cmp	r1, #1
 8017a48:	d911      	bls.n	8017a6e <uxr_init_input_reliable_stream+0x3e>
 8017a4a:	2201      	movs	r2, #1
 8017a4c:	e9d0 5400 	ldrd	r5, r4, [r0]
 8017a50:	fbb2 f3f1 	udiv	r3, r2, r1
 8017a54:	fb01 2313 	mls	r3, r1, r3, r2
 8017a58:	b29b      	uxth	r3, r3
 8017a5a:	fbb4 f1f1 	udiv	r1, r4, r1
 8017a5e:	fb03 f301 	mul.w	r3, r3, r1
 8017a62:	3201      	adds	r2, #1
 8017a64:	50ee      	str	r6, [r5, r3]
 8017a66:	8901      	ldrh	r1, [r0, #8]
 8017a68:	b292      	uxth	r2, r2
 8017a6a:	4291      	cmp	r1, r2
 8017a6c:	d8ee      	bhi.n	8017a4c <uxr_init_input_reliable_stream+0x1c>
 8017a6e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8017a72:	bc70      	pop	{r4, r5, r6}
 8017a74:	60c3      	str	r3, [r0, #12]
 8017a76:	4770      	bx	lr

08017a78 <uxr_reset_input_reliable_stream>:
 8017a78:	8902      	ldrh	r2, [r0, #8]
 8017a7a:	b1ca      	cbz	r2, 8017ab0 <uxr_reset_input_reliable_stream+0x38>
 8017a7c:	b470      	push	{r4, r5, r6}
 8017a7e:	2400      	movs	r4, #0
 8017a80:	4621      	mov	r1, r4
 8017a82:	4626      	mov	r6, r4
 8017a84:	fbb1 f3f2 	udiv	r3, r1, r2
 8017a88:	fb02 1313 	mls	r3, r2, r3, r1
 8017a8c:	e9d0 5100 	ldrd	r5, r1, [r0]
 8017a90:	b29b      	uxth	r3, r3
 8017a92:	fbb1 f2f2 	udiv	r2, r1, r2
 8017a96:	fb03 f302 	mul.w	r3, r3, r2
 8017a9a:	3401      	adds	r4, #1
 8017a9c:	50ee      	str	r6, [r5, r3]
 8017a9e:	8902      	ldrh	r2, [r0, #8]
 8017aa0:	b2a1      	uxth	r1, r4
 8017aa2:	428a      	cmp	r2, r1
 8017aa4:	d8ee      	bhi.n	8017a84 <uxr_reset_input_reliable_stream+0xc>
 8017aa6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8017aaa:	bc70      	pop	{r4, r5, r6}
 8017aac:	60c3      	str	r3, [r0, #12]
 8017aae:	4770      	bx	lr
 8017ab0:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8017ab4:	60c3      	str	r3, [r0, #12]
 8017ab6:	4770      	bx	lr

08017ab8 <uxr_receive_reliable_message>:
 8017ab8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8017abc:	4604      	mov	r4, r0
 8017abe:	460d      	mov	r5, r1
 8017ac0:	8901      	ldrh	r1, [r0, #8]
 8017ac2:	8980      	ldrh	r0, [r0, #12]
 8017ac4:	4690      	mov	r8, r2
 8017ac6:	461f      	mov	r7, r3
 8017ac8:	f000 fdc2 	bl	8018650 <uxr_seq_num_add>
 8017acc:	4629      	mov	r1, r5
 8017ace:	4606      	mov	r6, r0
 8017ad0:	89a0      	ldrh	r0, [r4, #12]
 8017ad2:	f000 fdc5 	bl	8018660 <uxr_seq_num_cmp>
 8017ad6:	2800      	cmp	r0, #0
 8017ad8:	db0a      	blt.n	8017af0 <uxr_receive_reliable_message+0x38>
 8017ada:	2600      	movs	r6, #0
 8017adc:	89e0      	ldrh	r0, [r4, #14]
 8017ade:	4629      	mov	r1, r5
 8017ae0:	f000 fdbe 	bl	8018660 <uxr_seq_num_cmp>
 8017ae4:	2800      	cmp	r0, #0
 8017ae6:	bfb8      	it	lt
 8017ae8:	81e5      	strhlt	r5, [r4, #14]
 8017aea:	4630      	mov	r0, r6
 8017aec:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8017af0:	4630      	mov	r0, r6
 8017af2:	4629      	mov	r1, r5
 8017af4:	f000 fdb4 	bl	8018660 <uxr_seq_num_cmp>
 8017af8:	2800      	cmp	r0, #0
 8017afa:	dbee      	blt.n	8017ada <uxr_receive_reliable_message+0x22>
 8017afc:	6923      	ldr	r3, [r4, #16]
 8017afe:	4640      	mov	r0, r8
 8017b00:	4798      	blx	r3
 8017b02:	2101      	movs	r1, #1
 8017b04:	4681      	mov	r9, r0
 8017b06:	89a0      	ldrh	r0, [r4, #12]
 8017b08:	f000 fda2 	bl	8018650 <uxr_seq_num_add>
 8017b0c:	f1b9 0f00 	cmp.w	r9, #0
 8017b10:	d101      	bne.n	8017b16 <uxr_receive_reliable_message+0x5e>
 8017b12:	4285      	cmp	r5, r0
 8017b14:	d049      	beq.n	8017baa <uxr_receive_reliable_message+0xf2>
 8017b16:	8921      	ldrh	r1, [r4, #8]
 8017b18:	fbb5 f3f1 	udiv	r3, r5, r1
 8017b1c:	fb01 5313 	mls	r3, r1, r3, r5
 8017b20:	b29b      	uxth	r3, r3
 8017b22:	6862      	ldr	r2, [r4, #4]
 8017b24:	6820      	ldr	r0, [r4, #0]
 8017b26:	fbb2 f2f1 	udiv	r2, r2, r1
 8017b2a:	fb03 f302 	mul.w	r3, r3, r2
 8017b2e:	3304      	adds	r3, #4
 8017b30:	4418      	add	r0, r3
 8017b32:	f850 3c04 	ldr.w	r3, [r0, #-4]
 8017b36:	2b00      	cmp	r3, #0
 8017b38:	d1cf      	bne.n	8017ada <uxr_receive_reliable_message+0x22>
 8017b3a:	4641      	mov	r1, r8
 8017b3c:	463a      	mov	r2, r7
 8017b3e:	f002 f980 	bl	8019e42 <memcpy>
 8017b42:	8921      	ldrh	r1, [r4, #8]
 8017b44:	fbb5 f3f1 	udiv	r3, r5, r1
 8017b48:	fb01 5313 	mls	r3, r1, r3, r5
 8017b4c:	b29b      	uxth	r3, r3
 8017b4e:	6862      	ldr	r2, [r4, #4]
 8017b50:	fbb2 f2f1 	udiv	r2, r2, r1
 8017b54:	6821      	ldr	r1, [r4, #0]
 8017b56:	fb03 f302 	mul.w	r3, r3, r2
 8017b5a:	2201      	movs	r2, #1
 8017b5c:	50cf      	str	r7, [r1, r3]
 8017b5e:	9b08      	ldr	r3, [sp, #32]
 8017b60:	701a      	strb	r2, [r3, #0]
 8017b62:	f1b9 0f00 	cmp.w	r9, #0
 8017b66:	d0b8      	beq.n	8017ada <uxr_receive_reliable_message+0x22>
 8017b68:	89a6      	ldrh	r6, [r4, #12]
 8017b6a:	e001      	b.n	8017b70 <uxr_receive_reliable_message+0xb8>
 8017b6c:	2801      	cmp	r0, #1
 8017b6e:	d1b4      	bne.n	8017ada <uxr_receive_reliable_message+0x22>
 8017b70:	4630      	mov	r0, r6
 8017b72:	2101      	movs	r1, #1
 8017b74:	f000 fd6c 	bl	8018650 <uxr_seq_num_add>
 8017b78:	8921      	ldrh	r1, [r4, #8]
 8017b7a:	fbb0 f3f1 	udiv	r3, r0, r1
 8017b7e:	fb01 0313 	mls	r3, r1, r3, r0
 8017b82:	b29b      	uxth	r3, r3
 8017b84:	6862      	ldr	r2, [r4, #4]
 8017b86:	fbb2 f2f1 	udiv	r2, r2, r1
 8017b8a:	4606      	mov	r6, r0
 8017b8c:	fb03 f302 	mul.w	r3, r3, r2
 8017b90:	6820      	ldr	r0, [r4, #0]
 8017b92:	3304      	adds	r3, #4
 8017b94:	4418      	add	r0, r3
 8017b96:	f850 3c04 	ldr.w	r3, [r0, #-4]
 8017b9a:	2b00      	cmp	r3, #0
 8017b9c:	d09d      	beq.n	8017ada <uxr_receive_reliable_message+0x22>
 8017b9e:	6923      	ldr	r3, [r4, #16]
 8017ba0:	4798      	blx	r3
 8017ba2:	2802      	cmp	r0, #2
 8017ba4:	d1e2      	bne.n	8017b6c <uxr_receive_reliable_message+0xb4>
 8017ba6:	2601      	movs	r6, #1
 8017ba8:	e798      	b.n	8017adc <uxr_receive_reliable_message+0x24>
 8017baa:	9b08      	ldr	r3, [sp, #32]
 8017bac:	81a5      	strh	r5, [r4, #12]
 8017bae:	2601      	movs	r6, #1
 8017bb0:	f883 9000 	strb.w	r9, [r3]
 8017bb4:	e792      	b.n	8017adc <uxr_receive_reliable_message+0x24>
 8017bb6:	bf00      	nop

08017bb8 <uxr_next_input_reliable_buffer_available>:
 8017bb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8017bbc:	4604      	mov	r4, r0
 8017bbe:	460e      	mov	r6, r1
 8017bc0:	8980      	ldrh	r0, [r0, #12]
 8017bc2:	2101      	movs	r1, #1
 8017bc4:	4617      	mov	r7, r2
 8017bc6:	f000 fd43 	bl	8018650 <uxr_seq_num_add>
 8017bca:	8921      	ldrh	r1, [r4, #8]
 8017bcc:	fbb0 f3f1 	udiv	r3, r0, r1
 8017bd0:	fb01 0313 	mls	r3, r1, r3, r0
 8017bd4:	b29b      	uxth	r3, r3
 8017bd6:	6862      	ldr	r2, [r4, #4]
 8017bd8:	fbb2 f2f1 	udiv	r2, r2, r1
 8017bdc:	fb03 f302 	mul.w	r3, r3, r2
 8017be0:	6822      	ldr	r2, [r4, #0]
 8017be2:	3304      	adds	r3, #4
 8017be4:	eb02 0803 	add.w	r8, r2, r3
 8017be8:	f858 9c04 	ldr.w	r9, [r8, #-4]
 8017bec:	f1b9 0f00 	cmp.w	r9, #0
 8017bf0:	d025      	beq.n	8017c3e <uxr_next_input_reliable_buffer_available+0x86>
 8017bf2:	6923      	ldr	r3, [r4, #16]
 8017bf4:	4605      	mov	r5, r0
 8017bf6:	4640      	mov	r0, r8
 8017bf8:	4798      	blx	r3
 8017bfa:	4682      	mov	sl, r0
 8017bfc:	b310      	cbz	r0, 8017c44 <uxr_next_input_reliable_buffer_available+0x8c>
 8017bfe:	f8b4 a00c 	ldrh.w	sl, [r4, #12]
 8017c02:	e005      	b.n	8017c10 <uxr_next_input_reliable_buffer_available+0x58>
 8017c04:	6923      	ldr	r3, [r4, #16]
 8017c06:	4798      	blx	r3
 8017c08:	2802      	cmp	r0, #2
 8017c0a:	d032      	beq.n	8017c72 <uxr_next_input_reliable_buffer_available+0xba>
 8017c0c:	2801      	cmp	r0, #1
 8017c0e:	d116      	bne.n	8017c3e <uxr_next_input_reliable_buffer_available+0x86>
 8017c10:	4650      	mov	r0, sl
 8017c12:	2101      	movs	r1, #1
 8017c14:	f000 fd1c 	bl	8018650 <uxr_seq_num_add>
 8017c18:	8921      	ldrh	r1, [r4, #8]
 8017c1a:	fbb0 f3f1 	udiv	r3, r0, r1
 8017c1e:	fb01 0313 	mls	r3, r1, r3, r0
 8017c22:	b29b      	uxth	r3, r3
 8017c24:	6862      	ldr	r2, [r4, #4]
 8017c26:	fbb2 f2f1 	udiv	r2, r2, r1
 8017c2a:	4682      	mov	sl, r0
 8017c2c:	fb03 f302 	mul.w	r3, r3, r2
 8017c30:	6820      	ldr	r0, [r4, #0]
 8017c32:	3304      	adds	r3, #4
 8017c34:	4418      	add	r0, r3
 8017c36:	f850 3c04 	ldr.w	r3, [r0, #-4]
 8017c3a:	2b00      	cmp	r3, #0
 8017c3c:	d1e2      	bne.n	8017c04 <uxr_next_input_reliable_buffer_available+0x4c>
 8017c3e:	2000      	movs	r0, #0
 8017c40:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017c44:	464a      	mov	r2, r9
 8017c46:	4641      	mov	r1, r8
 8017c48:	4630      	mov	r0, r6
 8017c4a:	f7f8 fbcf 	bl	80103ec <ucdr_init_buffer>
 8017c4e:	8921      	ldrh	r1, [r4, #8]
 8017c50:	fbb5 f3f1 	udiv	r3, r5, r1
 8017c54:	fb01 5313 	mls	r3, r1, r3, r5
 8017c58:	b29b      	uxth	r3, r3
 8017c5a:	6862      	ldr	r2, [r4, #4]
 8017c5c:	fbb2 f2f1 	udiv	r2, r2, r1
 8017c60:	6821      	ldr	r1, [r4, #0]
 8017c62:	fb03 f302 	mul.w	r3, r3, r2
 8017c66:	2001      	movs	r0, #1
 8017c68:	f841 a003 	str.w	sl, [r1, r3]
 8017c6c:	81a5      	strh	r5, [r4, #12]
 8017c6e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017c72:	8922      	ldrh	r2, [r4, #8]
 8017c74:	fbb5 f0f2 	udiv	r0, r5, r2
 8017c78:	fb02 5510 	mls	r5, r2, r0, r5
 8017c7c:	b2ad      	uxth	r5, r5
 8017c7e:	6863      	ldr	r3, [r4, #4]
 8017c80:	fbb3 f3f2 	udiv	r3, r3, r2
 8017c84:	fb05 f503 	mul.w	r5, r5, r3
 8017c88:	6823      	ldr	r3, [r4, #0]
 8017c8a:	2000      	movs	r0, #0
 8017c8c:	5158      	str	r0, [r3, r5]
 8017c8e:	eba9 0207 	sub.w	r2, r9, r7
 8017c92:	eb08 0107 	add.w	r1, r8, r7
 8017c96:	4630      	mov	r0, r6
 8017c98:	f7f8 fba8 	bl	80103ec <ucdr_init_buffer>
 8017c9c:	4630      	mov	r0, r6
 8017c9e:	4904      	ldr	r1, [pc, #16]	@ (8017cb0 <uxr_next_input_reliable_buffer_available+0xf8>)
 8017ca0:	4622      	mov	r2, r4
 8017ca2:	f7f8 fb79 	bl	8010398 <ucdr_set_on_full_buffer_callback>
 8017ca6:	f8a4 a00c 	strh.w	sl, [r4, #12]
 8017caa:	2001      	movs	r0, #1
 8017cac:	e7c8      	b.n	8017c40 <uxr_next_input_reliable_buffer_available+0x88>
 8017cae:	bf00      	nop
 8017cb0:	080179cd 	.word	0x080179cd

08017cb4 <uxr_process_heartbeat>:
 8017cb4:	b538      	push	{r3, r4, r5, lr}
 8017cb6:	4611      	mov	r1, r2
 8017cb8:	4604      	mov	r4, r0
 8017cba:	89c0      	ldrh	r0, [r0, #14]
 8017cbc:	4615      	mov	r5, r2
 8017cbe:	f000 fccf 	bl	8018660 <uxr_seq_num_cmp>
 8017cc2:	2800      	cmp	r0, #0
 8017cc4:	bfb8      	it	lt
 8017cc6:	81e5      	strhlt	r5, [r4, #14]
 8017cc8:	bd38      	pop	{r3, r4, r5, pc}
 8017cca:	bf00      	nop

08017ccc <uxr_compute_acknack>:
 8017ccc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8017cd0:	8903      	ldrh	r3, [r0, #8]
 8017cd2:	8986      	ldrh	r6, [r0, #12]
 8017cd4:	4604      	mov	r4, r0
 8017cd6:	460d      	mov	r5, r1
 8017cd8:	b1d3      	cbz	r3, 8017d10 <uxr_compute_acknack+0x44>
 8017cda:	4630      	mov	r0, r6
 8017cdc:	2701      	movs	r7, #1
 8017cde:	e003      	b.n	8017ce8 <uxr_compute_acknack+0x1c>
 8017ce0:	4567      	cmp	r7, ip
 8017ce2:	d215      	bcs.n	8017d10 <uxr_compute_acknack+0x44>
 8017ce4:	89a0      	ldrh	r0, [r4, #12]
 8017ce6:	3701      	adds	r7, #1
 8017ce8:	b2b9      	uxth	r1, r7
 8017cea:	f000 fcb1 	bl	8018650 <uxr_seq_num_add>
 8017cee:	f8b4 c008 	ldrh.w	ip, [r4, #8]
 8017cf2:	fbb0 f2fc 	udiv	r2, r0, ip
 8017cf6:	e9d4 1300 	ldrd	r1, r3, [r4]
 8017cfa:	fb0c 0212 	mls	r2, ip, r2, r0
 8017cfe:	b292      	uxth	r2, r2
 8017d00:	fbb3 f3fc 	udiv	r3, r3, ip
 8017d04:	fb02 1303 	mla	r3, r2, r3, r1
 8017d08:	681b      	ldr	r3, [r3, #0]
 8017d0a:	2b00      	cmp	r3, #0
 8017d0c:	d1e8      	bne.n	8017ce0 <uxr_compute_acknack+0x14>
 8017d0e:	4606      	mov	r6, r0
 8017d10:	802e      	strh	r6, [r5, #0]
 8017d12:	4630      	mov	r0, r6
 8017d14:	2101      	movs	r1, #1
 8017d16:	89e6      	ldrh	r6, [r4, #14]
 8017d18:	f000 fc9e 	bl	8018658 <uxr_seq_num_sub>
 8017d1c:	4601      	mov	r1, r0
 8017d1e:	4630      	mov	r0, r6
 8017d20:	f000 fc9a 	bl	8018658 <uxr_seq_num_sub>
 8017d24:	4606      	mov	r6, r0
 8017d26:	b318      	cbz	r0, 8017d70 <uxr_compute_acknack+0xa4>
 8017d28:	f04f 0900 	mov.w	r9, #0
 8017d2c:	464f      	mov	r7, r9
 8017d2e:	f04f 0801 	mov.w	r8, #1
 8017d32:	fa1f f189 	uxth.w	r1, r9
 8017d36:	8828      	ldrh	r0, [r5, #0]
 8017d38:	f000 fc8a 	bl	8018650 <uxr_seq_num_add>
 8017d3c:	f8b4 c008 	ldrh.w	ip, [r4, #8]
 8017d40:	6822      	ldr	r2, [r4, #0]
 8017d42:	fbb0 f1fc 	udiv	r1, r0, ip
 8017d46:	fb01 011c 	mls	r1, r1, ip, r0
 8017d4a:	b289      	uxth	r1, r1
 8017d4c:	6863      	ldr	r3, [r4, #4]
 8017d4e:	fbb3 f3fc 	udiv	r3, r3, ip
 8017d52:	fb01 2303 	mla	r3, r1, r3, r2
 8017d56:	fa08 f209 	lsl.w	r2, r8, r9
 8017d5a:	681b      	ldr	r3, [r3, #0]
 8017d5c:	f109 0901 	add.w	r9, r9, #1
 8017d60:	b90b      	cbnz	r3, 8017d66 <uxr_compute_acknack+0x9a>
 8017d62:	4317      	orrs	r7, r2
 8017d64:	b2bf      	uxth	r7, r7
 8017d66:	454e      	cmp	r6, r9
 8017d68:	d1e3      	bne.n	8017d32 <uxr_compute_acknack+0x66>
 8017d6a:	4638      	mov	r0, r7
 8017d6c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8017d70:	4607      	mov	r7, r0
 8017d72:	4638      	mov	r0, r7
 8017d74:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

08017d78 <uxr_init_output_best_effort_stream>:
 8017d78:	b410      	push	{r4}
 8017d7a:	f64f 74ff 	movw	r4, #65535	@ 0xffff
 8017d7e:	81c4      	strh	r4, [r0, #14]
 8017d80:	e9c0 1300 	strd	r1, r3, [r0]
 8017d84:	f85d 4b04 	ldr.w	r4, [sp], #4
 8017d88:	7303      	strb	r3, [r0, #12]
 8017d8a:	6082      	str	r2, [r0, #8]
 8017d8c:	4770      	bx	lr
 8017d8e:	bf00      	nop

08017d90 <uxr_reset_output_best_effort_stream>:
 8017d90:	7b02      	ldrb	r2, [r0, #12]
 8017d92:	6042      	str	r2, [r0, #4]
 8017d94:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8017d98:	81c3      	strh	r3, [r0, #14]
 8017d9a:	4770      	bx	lr

08017d9c <uxr_prepare_best_effort_buffer_to_write>:
 8017d9c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8017d9e:	4604      	mov	r4, r0
 8017da0:	b083      	sub	sp, #12
 8017da2:	6840      	ldr	r0, [r0, #4]
 8017da4:	460d      	mov	r5, r1
 8017da6:	4616      	mov	r6, r2
 8017da8:	f7fa f864 	bl	8011e74 <uxr_submessage_padding>
 8017dac:	e9d4 2301 	ldrd	r2, r3, [r4, #4]
 8017db0:	4410      	add	r0, r2
 8017db2:	1942      	adds	r2, r0, r5
 8017db4:	4293      	cmp	r3, r2
 8017db6:	bf2c      	ite	cs
 8017db8:	2701      	movcs	r7, #1
 8017dba:	2700      	movcc	r7, #0
 8017dbc:	d202      	bcs.n	8017dc4 <uxr_prepare_best_effort_buffer_to_write+0x28>
 8017dbe:	4638      	mov	r0, r7
 8017dc0:	b003      	add	sp, #12
 8017dc2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8017dc4:	9000      	str	r0, [sp, #0]
 8017dc6:	6821      	ldr	r1, [r4, #0]
 8017dc8:	4630      	mov	r0, r6
 8017dca:	2300      	movs	r3, #0
 8017dcc:	f7f8 fafc 	bl	80103c8 <ucdr_init_buffer_origin_offset>
 8017dd0:	6861      	ldr	r1, [r4, #4]
 8017dd2:	4638      	mov	r0, r7
 8017dd4:	4429      	add	r1, r5
 8017dd6:	6061      	str	r1, [r4, #4]
 8017dd8:	b003      	add	sp, #12
 8017dda:	bdf0      	pop	{r4, r5, r6, r7, pc}

08017ddc <uxr_prepare_best_effort_buffer_to_send>:
 8017ddc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017de0:	6845      	ldr	r5, [r0, #4]
 8017de2:	4604      	mov	r4, r0
 8017de4:	7b00      	ldrb	r0, [r0, #12]
 8017de6:	4285      	cmp	r5, r0
 8017de8:	bf8c      	ite	hi
 8017dea:	2701      	movhi	r7, #1
 8017dec:	2700      	movls	r7, #0
 8017dee:	d802      	bhi.n	8017df6 <uxr_prepare_best_effort_buffer_to_send+0x1a>
 8017df0:	4638      	mov	r0, r7
 8017df2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017df6:	4688      	mov	r8, r1
 8017df8:	89e0      	ldrh	r0, [r4, #14]
 8017dfa:	2101      	movs	r1, #1
 8017dfc:	4615      	mov	r5, r2
 8017dfe:	461e      	mov	r6, r3
 8017e00:	f000 fc26 	bl	8018650 <uxr_seq_num_add>
 8017e04:	e9d4 2300 	ldrd	r2, r3, [r4]
 8017e08:	81e0      	strh	r0, [r4, #14]
 8017e0a:	8030      	strh	r0, [r6, #0]
 8017e0c:	f8c8 2000 	str.w	r2, [r8]
 8017e10:	602b      	str	r3, [r5, #0]
 8017e12:	7b23      	ldrb	r3, [r4, #12]
 8017e14:	6063      	str	r3, [r4, #4]
 8017e16:	4638      	mov	r0, r7
 8017e18:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08017e1c <on_full_output_buffer>:
 8017e1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017e1e:	6802      	ldr	r2, [r0, #0]
 8017e20:	460d      	mov	r5, r1
 8017e22:	6809      	ldr	r1, [r1, #0]
 8017e24:	892f      	ldrh	r7, [r5, #8]
 8017e26:	686c      	ldr	r4, [r5, #4]
 8017e28:	fbb4 f4f7 	udiv	r4, r4, r7
 8017e2c:	1a53      	subs	r3, r2, r1
 8017e2e:	fbb3 f3f4 	udiv	r3, r3, r4
 8017e32:	3301      	adds	r3, #1
 8017e34:	b29b      	uxth	r3, r3
 8017e36:	fbb3 f2f7 	udiv	r2, r3, r7
 8017e3a:	fb07 3312 	mls	r3, r7, r2, r3
 8017e3e:	b29b      	uxth	r3, r3
 8017e40:	fb04 f403 	mul.w	r4, r4, r3
 8017e44:	7b2f      	ldrb	r7, [r5, #12]
 8017e46:	590a      	ldr	r2, [r1, r4]
 8017e48:	6903      	ldr	r3, [r0, #16]
 8017e4a:	443c      	add	r4, r7
 8017e4c:	3408      	adds	r4, #8
 8017e4e:	1bd2      	subs	r2, r2, r7
 8017e50:	4606      	mov	r6, r0
 8017e52:	4421      	add	r1, r4
 8017e54:	3a04      	subs	r2, #4
 8017e56:	f7f8 fac1 	bl	80103dc <ucdr_init_buffer_origin>
 8017e5a:	4630      	mov	r0, r6
 8017e5c:	4902      	ldr	r1, [pc, #8]	@ (8017e68 <on_full_output_buffer+0x4c>)
 8017e5e:	462a      	mov	r2, r5
 8017e60:	f7f8 fa9a 	bl	8010398 <ucdr_set_on_full_buffer_callback>
 8017e64:	2000      	movs	r0, #0
 8017e66:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8017e68:	08017e1d 	.word	0x08017e1d

08017e6c <uxr_init_output_reliable_stream>:
 8017e6c:	b430      	push	{r4, r5}
 8017e6e:	f89d 4008 	ldrb.w	r4, [sp, #8]
 8017e72:	6001      	str	r1, [r0, #0]
 8017e74:	8103      	strh	r3, [r0, #8]
 8017e76:	6042      	str	r2, [r0, #4]
 8017e78:	7304      	strb	r4, [r0, #12]
 8017e7a:	b1b3      	cbz	r3, 8017eaa <uxr_init_output_reliable_stream+0x3e>
 8017e7c:	600c      	str	r4, [r1, #0]
 8017e7e:	8901      	ldrh	r1, [r0, #8]
 8017e80:	2901      	cmp	r1, #1
 8017e82:	d912      	bls.n	8017eaa <uxr_init_output_reliable_stream+0x3e>
 8017e84:	2201      	movs	r2, #1
 8017e86:	e9d0 5400 	ldrd	r5, r4, [r0]
 8017e8a:	fbb2 f3f1 	udiv	r3, r2, r1
 8017e8e:	fb01 2313 	mls	r3, r1, r3, r2
 8017e92:	b29b      	uxth	r3, r3
 8017e94:	fbb4 f1f1 	udiv	r1, r4, r1
 8017e98:	fb03 f301 	mul.w	r3, r3, r1
 8017e9c:	7b01      	ldrb	r1, [r0, #12]
 8017e9e:	50e9      	str	r1, [r5, r3]
 8017ea0:	3201      	adds	r2, #1
 8017ea2:	8901      	ldrh	r1, [r0, #8]
 8017ea4:	b292      	uxth	r2, r2
 8017ea6:	4291      	cmp	r1, r2
 8017ea8:	d8ed      	bhi.n	8017e86 <uxr_init_output_reliable_stream+0x1a>
 8017eaa:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8017eae:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 8017eb2:	e9c0 2306 	strd	r2, r3, [r0, #24]
 8017eb6:	4b05      	ldr	r3, [pc, #20]	@ (8017ecc <uxr_init_output_reliable_stream+0x60>)
 8017eb8:	f8c0 300e 	str.w	r3, [r0, #14]
 8017ebc:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8017ec0:	2300      	movs	r3, #0
 8017ec2:	bc30      	pop	{r4, r5}
 8017ec4:	8242      	strh	r2, [r0, #18]
 8017ec6:	8403      	strh	r3, [r0, #32]
 8017ec8:	4770      	bx	lr
 8017eca:	bf00      	nop
 8017ecc:	ffff0000 	.word	0xffff0000

08017ed0 <uxr_reset_output_reliable_stream>:
 8017ed0:	8902      	ldrh	r2, [r0, #8]
 8017ed2:	b430      	push	{r4, r5}
 8017ed4:	b19a      	cbz	r2, 8017efe <uxr_reset_output_reliable_stream+0x2e>
 8017ed6:	2400      	movs	r4, #0
 8017ed8:	4621      	mov	r1, r4
 8017eda:	fbb1 f3f2 	udiv	r3, r1, r2
 8017ede:	fb02 1313 	mls	r3, r2, r3, r1
 8017ee2:	e9d0 5100 	ldrd	r5, r1, [r0]
 8017ee6:	b29b      	uxth	r3, r3
 8017ee8:	fbb1 f2f2 	udiv	r2, r1, r2
 8017eec:	fb03 f302 	mul.w	r3, r3, r2
 8017ef0:	7b02      	ldrb	r2, [r0, #12]
 8017ef2:	50ea      	str	r2, [r5, r3]
 8017ef4:	3401      	adds	r4, #1
 8017ef6:	8902      	ldrh	r2, [r0, #8]
 8017ef8:	b2a1      	uxth	r1, r4
 8017efa:	428a      	cmp	r2, r1
 8017efc:	d8ed      	bhi.n	8017eda <uxr_reset_output_reliable_stream+0xa>
 8017efe:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8017f02:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 8017f06:	e9c0 2306 	strd	r2, r3, [r0, #24]
 8017f0a:	4b05      	ldr	r3, [pc, #20]	@ (8017f20 <uxr_reset_output_reliable_stream+0x50>)
 8017f0c:	f8c0 300e 	str.w	r3, [r0, #14]
 8017f10:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8017f14:	2300      	movs	r3, #0
 8017f16:	bc30      	pop	{r4, r5}
 8017f18:	8242      	strh	r2, [r0, #18]
 8017f1a:	8403      	strh	r3, [r0, #32]
 8017f1c:	4770      	bx	lr
 8017f1e:	bf00      	nop
 8017f20:	ffff0000 	.word	0xffff0000

08017f24 <uxr_prepare_reliable_buffer_to_write>:
 8017f24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017f28:	4604      	mov	r4, r0
 8017f2a:	89c6      	ldrh	r6, [r0, #14]
 8017f2c:	8900      	ldrh	r0, [r0, #8]
 8017f2e:	f8d4 c000 	ldr.w	ip, [r4]
 8017f32:	fbb6 f3f0 	udiv	r3, r6, r0
 8017f36:	fb00 6313 	mls	r3, r0, r3, r6
 8017f3a:	b091      	sub	sp, #68	@ 0x44
 8017f3c:	b29b      	uxth	r3, r3
 8017f3e:	6865      	ldr	r5, [r4, #4]
 8017f40:	fbb5 f5f0 	udiv	r5, r5, r0
 8017f44:	fb05 c303 	mla	r3, r5, r3, ip
 8017f48:	9204      	str	r2, [sp, #16]
 8017f4a:	1d1a      	adds	r2, r3, #4
 8017f4c:	f8d3 8000 	ldr.w	r8, [r3]
 8017f50:	f894 900c 	ldrb.w	r9, [r4, #12]
 8017f54:	9203      	str	r2, [sp, #12]
 8017f56:	468b      	mov	fp, r1
 8017f58:	1f2f      	subs	r7, r5, #4
 8017f5a:	2800      	cmp	r0, #0
 8017f5c:	f000 814e 	beq.w	80181fc <uxr_prepare_reliable_buffer_to_write+0x2d8>
 8017f60:	f04f 0e00 	mov.w	lr, #0
 8017f64:	46f2      	mov	sl, lr
 8017f66:	4672      	mov	r2, lr
 8017f68:	fbb2 f3f0 	udiv	r3, r2, r0
 8017f6c:	fb00 2313 	mls	r3, r0, r3, r2
 8017f70:	b29b      	uxth	r3, r3
 8017f72:	fb05 c303 	mla	r3, r5, r3, ip
 8017f76:	f10e 0e01 	add.w	lr, lr, #1
 8017f7a:	681b      	ldr	r3, [r3, #0]
 8017f7c:	454b      	cmp	r3, r9
 8017f7e:	bf08      	it	eq
 8017f80:	f10a 0a01 	addeq.w	sl, sl, #1
 8017f84:	fa1f f28e 	uxth.w	r2, lr
 8017f88:	bf08      	it	eq
 8017f8a:	fa1f fa8a 	uxtheq.w	sl, sl
 8017f8e:	4282      	cmp	r2, r0
 8017f90:	d3ea      	bcc.n	8017f68 <uxr_prepare_reliable_buffer_to_write+0x44>
 8017f92:	4640      	mov	r0, r8
 8017f94:	2104      	movs	r1, #4
 8017f96:	f8cd a014 	str.w	sl, [sp, #20]
 8017f9a:	f7f8 fa2b 	bl	80103f4 <ucdr_alignment>
 8017f9e:	4480      	add	r8, r0
 8017fa0:	eb08 020b 	add.w	r2, r8, fp
 8017fa4:	42ba      	cmp	r2, r7
 8017fa6:	f240 80cf 	bls.w	8018148 <uxr_prepare_reliable_buffer_to_write+0x224>
 8017faa:	7b22      	ldrb	r2, [r4, #12]
 8017fac:	445a      	add	r2, fp
 8017fae:	42ba      	cmp	r2, r7
 8017fb0:	f240 80b7 	bls.w	8018122 <uxr_prepare_reliable_buffer_to_write+0x1fe>
 8017fb4:	f5c9 437f 	rsb	r3, r9, #65280	@ 0xff00
 8017fb8:	33fc      	adds	r3, #252	@ 0xfc
 8017fba:	b2ba      	uxth	r2, r7
 8017fbc:	4413      	add	r3, r2
 8017fbe:	b29b      	uxth	r3, r3
 8017fc0:	fb0a f903 	mul.w	r9, sl, r3
 8017fc4:	45d9      	cmp	r9, fp
 8017fc6:	9305      	str	r3, [sp, #20]
 8017fc8:	9306      	str	r3, [sp, #24]
 8017fca:	f0c0 80b9 	bcc.w	8018140 <uxr_prepare_reliable_buffer_to_write+0x21c>
 8017fce:	f108 0304 	add.w	r3, r8, #4
 8017fd2:	42bb      	cmp	r3, r7
 8017fd4:	f080 80dd 	bcs.w	8018192 <uxr_prepare_reliable_buffer_to_write+0x26e>
 8017fd8:	f1a2 0904 	sub.w	r9, r2, #4
 8017fdc:	eba9 0908 	sub.w	r9, r9, r8
 8017fe0:	9b05      	ldr	r3, [sp, #20]
 8017fe2:	fa1f f989 	uxth.w	r9, r9
 8017fe6:	ebab 0b09 	sub.w	fp, fp, r9
 8017fea:	fbbb f2f3 	udiv	r2, fp, r3
 8017fee:	fb03 b312 	mls	r3, r3, r2, fp
 8017ff2:	2b00      	cmp	r3, #0
 8017ff4:	f000 80ca 	beq.w	801818c <uxr_prepare_reliable_buffer_to_write+0x268>
 8017ff8:	3201      	adds	r2, #1
 8017ffa:	b292      	uxth	r2, r2
 8017ffc:	4611      	mov	r1, r2
 8017ffe:	9306      	str	r3, [sp, #24]
 8018000:	4551      	cmp	r1, sl
 8018002:	f200 809d 	bhi.w	8018140 <uxr_prepare_reliable_buffer_to_write+0x21c>
 8018006:	f10d 0b20 	add.w	fp, sp, #32
 801800a:	2900      	cmp	r1, #0
 801800c:	d042      	beq.n	8018094 <uxr_prepare_reliable_buffer_to_write+0x170>
 801800e:	f8cd 801c 	str.w	r8, [sp, #28]
 8018012:	f04f 0a00 	mov.w	sl, #0
 8018016:	f8dd 8014 	ldr.w	r8, [sp, #20]
 801801a:	9505      	str	r5, [sp, #20]
 801801c:	f10d 0b20 	add.w	fp, sp, #32
 8018020:	460d      	mov	r5, r1
 8018022:	e000      	b.n	8018026 <uxr_prepare_reliable_buffer_to_write+0x102>
 8018024:	46c1      	mov	r9, r8
 8018026:	8920      	ldrh	r0, [r4, #8]
 8018028:	fbb6 f1f0 	udiv	r1, r6, r0
 801802c:	e9d4 3200 	ldrd	r3, r2, [r4]
 8018030:	fb00 6111 	mls	r1, r0, r1, r6
 8018034:	b289      	uxth	r1, r1
 8018036:	fbb2 f2f0 	udiv	r2, r2, r0
 801803a:	fb01 f102 	mul.w	r1, r1, r2
 801803e:	3104      	adds	r1, #4
 8018040:	4419      	add	r1, r3
 8018042:	463a      	mov	r2, r7
 8018044:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8018048:	9300      	str	r3, [sp, #0]
 801804a:	4658      	mov	r0, fp
 801804c:	2300      	movs	r3, #0
 801804e:	f7f8 f9bb 	bl	80103c8 <ucdr_init_buffer_origin_offset>
 8018052:	464a      	mov	r2, r9
 8018054:	2300      	movs	r3, #0
 8018056:	210d      	movs	r1, #13
 8018058:	4658      	mov	r0, fp
 801805a:	f7f9 fecb 	bl	8011df4 <uxr_buffer_submessage_header>
 801805e:	8920      	ldrh	r0, [r4, #8]
 8018060:	fbb6 f3f0 	udiv	r3, r6, r0
 8018064:	e9d4 2100 	ldrd	r2, r1, [r4]
 8018068:	fb00 6313 	mls	r3, r0, r3, r6
 801806c:	b29b      	uxth	r3, r3
 801806e:	fbb1 f1f0 	udiv	r1, r1, r0
 8018072:	fb03 f301 	mul.w	r3, r3, r1
 8018076:	4630      	mov	r0, r6
 8018078:	50d7      	str	r7, [r2, r3]
 801807a:	2101      	movs	r1, #1
 801807c:	f000 fae8 	bl	8018650 <uxr_seq_num_add>
 8018080:	f10a 0a01 	add.w	sl, sl, #1
 8018084:	fa1f f38a 	uxth.w	r3, sl
 8018088:	429d      	cmp	r5, r3
 801808a:	4606      	mov	r6, r0
 801808c:	d8ca      	bhi.n	8018024 <uxr_prepare_reliable_buffer_to_write+0x100>
 801808e:	f8dd 801c 	ldr.w	r8, [sp, #28]
 8018092:	9d05      	ldr	r5, [sp, #20]
 8018094:	8921      	ldrh	r1, [r4, #8]
 8018096:	fbb6 f3f1 	udiv	r3, r6, r1
 801809a:	fb01 6313 	mls	r3, r1, r3, r6
 801809e:	b29b      	uxth	r3, r3
 80180a0:	6862      	ldr	r2, [r4, #4]
 80180a2:	fbb2 f2f1 	udiv	r2, r2, r1
 80180a6:	6821      	ldr	r1, [r4, #0]
 80180a8:	fb03 f302 	mul.w	r3, r3, r2
 80180ac:	3304      	adds	r3, #4
 80180ae:	4419      	add	r1, r3
 80180b0:	463a      	mov	r2, r7
 80180b2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80180b6:	9300      	str	r3, [sp, #0]
 80180b8:	4658      	mov	r0, fp
 80180ba:	2300      	movs	r3, #0
 80180bc:	f7f8 f984 	bl	80103c8 <ucdr_init_buffer_origin_offset>
 80180c0:	f8dd 9018 	ldr.w	r9, [sp, #24]
 80180c4:	4658      	mov	r0, fp
 80180c6:	fa1f f289 	uxth.w	r2, r9
 80180ca:	2302      	movs	r3, #2
 80180cc:	210d      	movs	r1, #13
 80180ce:	f7f9 fe91 	bl	8011df4 <uxr_buffer_submessage_header>
 80180d2:	8921      	ldrh	r1, [r4, #8]
 80180d4:	7b27      	ldrb	r7, [r4, #12]
 80180d6:	fbb6 f0f1 	udiv	r0, r6, r1
 80180da:	e9d4 3200 	ldrd	r3, r2, [r4]
 80180de:	fb01 6010 	mls	r0, r1, r0, r6
 80180e2:	b280      	uxth	r0, r0
 80180e4:	fbb2 f2f1 	udiv	r2, r2, r1
 80180e8:	3704      	adds	r7, #4
 80180ea:	fb00 f002 	mul.w	r0, r0, r2
 80180ee:	f1a5 0208 	sub.w	r2, r5, #8
 80180f2:	464d      	mov	r5, r9
 80180f4:	443d      	add	r5, r7
 80180f6:	9f03      	ldr	r7, [sp, #12]
 80180f8:	501d      	str	r5, [r3, r0]
 80180fa:	f108 0104 	add.w	r1, r8, #4
 80180fe:	9d04      	ldr	r5, [sp, #16]
 8018100:	440f      	add	r7, r1
 8018102:	eba2 0208 	sub.w	r2, r2, r8
 8018106:	4639      	mov	r1, r7
 8018108:	4628      	mov	r0, r5
 801810a:	f7f8 f96f 	bl	80103ec <ucdr_init_buffer>
 801810e:	4628      	mov	r0, r5
 8018110:	493b      	ldr	r1, [pc, #236]	@ (8018200 <uxr_prepare_reliable_buffer_to_write+0x2dc>)
 8018112:	4622      	mov	r2, r4
 8018114:	f7f8 f940 	bl	8010398 <ucdr_set_on_full_buffer_callback>
 8018118:	2001      	movs	r0, #1
 801811a:	81e6      	strh	r6, [r4, #14]
 801811c:	b011      	add	sp, #68	@ 0x44
 801811e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018122:	2101      	movs	r1, #1
 8018124:	89e0      	ldrh	r0, [r4, #14]
 8018126:	f000 fa93 	bl	8018650 <uxr_seq_num_add>
 801812a:	8921      	ldrh	r1, [r4, #8]
 801812c:	4605      	mov	r5, r0
 801812e:	8a60      	ldrh	r0, [r4, #18]
 8018130:	f000 fa8e 	bl	8018650 <uxr_seq_num_add>
 8018134:	4601      	mov	r1, r0
 8018136:	4628      	mov	r0, r5
 8018138:	f000 fa92 	bl	8018660 <uxr_seq_num_cmp>
 801813c:	2800      	cmp	r0, #0
 801813e:	dd42      	ble.n	80181c6 <uxr_prepare_reliable_buffer_to_write+0x2a2>
 8018140:	2000      	movs	r0, #0
 8018142:	b011      	add	sp, #68	@ 0x44
 8018144:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018148:	8921      	ldrh	r1, [r4, #8]
 801814a:	8a60      	ldrh	r0, [r4, #18]
 801814c:	9205      	str	r2, [sp, #20]
 801814e:	f000 fa7f 	bl	8018650 <uxr_seq_num_add>
 8018152:	4601      	mov	r1, r0
 8018154:	4630      	mov	r0, r6
 8018156:	f000 fa83 	bl	8018660 <uxr_seq_num_cmp>
 801815a:	2800      	cmp	r0, #0
 801815c:	9a05      	ldr	r2, [sp, #20]
 801815e:	dcef      	bgt.n	8018140 <uxr_prepare_reliable_buffer_to_write+0x21c>
 8018160:	8920      	ldrh	r0, [r4, #8]
 8018162:	fbb6 f3f0 	udiv	r3, r6, r0
 8018166:	e9d4 4100 	ldrd	r4, r1, [r4]
 801816a:	fb00 6313 	mls	r3, r0, r3, r6
 801816e:	b29b      	uxth	r3, r3
 8018170:	fbb1 f1f0 	udiv	r1, r1, r0
 8018174:	fb03 f301 	mul.w	r3, r3, r1
 8018178:	e9dd 1003 	ldrd	r1, r0, [sp, #12]
 801817c:	50e2      	str	r2, [r4, r3]
 801817e:	f8cd 8000 	str.w	r8, [sp]
 8018182:	2300      	movs	r3, #0
 8018184:	f7f8 f920 	bl	80103c8 <ucdr_init_buffer_origin_offset>
 8018188:	2001      	movs	r0, #1
 801818a:	e7da      	b.n	8018142 <uxr_prepare_reliable_buffer_to_write+0x21e>
 801818c:	b293      	uxth	r3, r2
 801818e:	4619      	mov	r1, r3
 8018190:	e736      	b.n	8018000 <uxr_prepare_reliable_buffer_to_write+0xdc>
 8018192:	4630      	mov	r0, r6
 8018194:	2101      	movs	r1, #1
 8018196:	9207      	str	r2, [sp, #28]
 8018198:	f000 fa5a 	bl	8018650 <uxr_seq_num_add>
 801819c:	f8b4 c008 	ldrh.w	ip, [r4, #8]
 80181a0:	fbb0 f1fc 	udiv	r1, r0, ip
 80181a4:	fb0c 0111 	mls	r1, ip, r1, r0
 80181a8:	b289      	uxth	r1, r1
 80181aa:	6863      	ldr	r3, [r4, #4]
 80181ac:	fbb3 f3fc 	udiv	r3, r3, ip
 80181b0:	fb01 f103 	mul.w	r1, r1, r3
 80181b4:	6823      	ldr	r3, [r4, #0]
 80181b6:	9a07      	ldr	r2, [sp, #28]
 80181b8:	3104      	adds	r1, #4
 80181ba:	440b      	add	r3, r1
 80181bc:	4606      	mov	r6, r0
 80181be:	f853 8c04 	ldr.w	r8, [r3, #-4]
 80181c2:	9303      	str	r3, [sp, #12]
 80181c4:	e708      	b.n	8017fd8 <uxr_prepare_reliable_buffer_to_write+0xb4>
 80181c6:	8920      	ldrh	r0, [r4, #8]
 80181c8:	fbb5 f3f0 	udiv	r3, r5, r0
 80181cc:	fb00 5313 	mls	r3, r0, r3, r5
 80181d0:	b29b      	uxth	r3, r3
 80181d2:	6862      	ldr	r2, [r4, #4]
 80181d4:	6821      	ldr	r1, [r4, #0]
 80181d6:	fbb2 f0f0 	udiv	r0, r2, r0
 80181da:	fb03 f300 	mul.w	r3, r3, r0
 80181de:	7b22      	ldrb	r2, [r4, #12]
 80181e0:	9804      	ldr	r0, [sp, #16]
 80181e2:	3304      	adds	r3, #4
 80181e4:	4419      	add	r1, r3
 80181e6:	445a      	add	r2, fp
 80181e8:	f841 2c04 	str.w	r2, [r1, #-4]
 80181ec:	7b23      	ldrb	r3, [r4, #12]
 80181ee:	9300      	str	r3, [sp, #0]
 80181f0:	2300      	movs	r3, #0
 80181f2:	f7f8 f8e9 	bl	80103c8 <ucdr_init_buffer_origin_offset>
 80181f6:	81e5      	strh	r5, [r4, #14]
 80181f8:	2001      	movs	r0, #1
 80181fa:	e7a2      	b.n	8018142 <uxr_prepare_reliable_buffer_to_write+0x21e>
 80181fc:	4682      	mov	sl, r0
 80181fe:	e6c8      	b.n	8017f92 <uxr_prepare_reliable_buffer_to_write+0x6e>
 8018200:	08017e1d 	.word	0x08017e1d

08018204 <uxr_prepare_next_reliable_buffer_to_send>:
 8018204:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018208:	4605      	mov	r5, r0
 801820a:	4688      	mov	r8, r1
 801820c:	8a00      	ldrh	r0, [r0, #16]
 801820e:	2101      	movs	r1, #1
 8018210:	4617      	mov	r7, r2
 8018212:	461e      	mov	r6, r3
 8018214:	f000 fa1c 	bl	8018650 <uxr_seq_num_add>
 8018218:	8030      	strh	r0, [r6, #0]
 801821a:	892a      	ldrh	r2, [r5, #8]
 801821c:	fbb0 f3f2 	udiv	r3, r0, r2
 8018220:	fb02 0413 	mls	r4, r2, r3, r0
 8018224:	b2a4      	uxth	r4, r4
 8018226:	686b      	ldr	r3, [r5, #4]
 8018228:	fbb3 f2f2 	udiv	r2, r3, r2
 801822c:	682b      	ldr	r3, [r5, #0]
 801822e:	89e9      	ldrh	r1, [r5, #14]
 8018230:	fb04 f402 	mul.w	r4, r4, r2
 8018234:	3404      	adds	r4, #4
 8018236:	4423      	add	r3, r4
 8018238:	f8c8 3000 	str.w	r3, [r8]
 801823c:	682b      	ldr	r3, [r5, #0]
 801823e:	441c      	add	r4, r3
 8018240:	f854 3c04 	ldr.w	r3, [r4, #-4]
 8018244:	603b      	str	r3, [r7, #0]
 8018246:	f000 fa0b 	bl	8018660 <uxr_seq_num_cmp>
 801824a:	2800      	cmp	r0, #0
 801824c:	dd02      	ble.n	8018254 <uxr_prepare_next_reliable_buffer_to_send+0x50>
 801824e:	2000      	movs	r0, #0
 8018250:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018254:	683a      	ldr	r2, [r7, #0]
 8018256:	7b2b      	ldrb	r3, [r5, #12]
 8018258:	429a      	cmp	r2, r3
 801825a:	d9f8      	bls.n	801824e <uxr_prepare_next_reliable_buffer_to_send+0x4a>
 801825c:	8a69      	ldrh	r1, [r5, #18]
 801825e:	8a28      	ldrh	r0, [r5, #16]
 8018260:	f000 f9fa 	bl	8018658 <uxr_seq_num_sub>
 8018264:	892b      	ldrh	r3, [r5, #8]
 8018266:	4283      	cmp	r3, r0
 8018268:	d0f1      	beq.n	801824e <uxr_prepare_next_reliable_buffer_to_send+0x4a>
 801826a:	8830      	ldrh	r0, [r6, #0]
 801826c:	89eb      	ldrh	r3, [r5, #14]
 801826e:	8228      	strh	r0, [r5, #16]
 8018270:	4298      	cmp	r0, r3
 8018272:	d002      	beq.n	801827a <uxr_prepare_next_reliable_buffer_to_send+0x76>
 8018274:	2001      	movs	r0, #1
 8018276:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801827a:	2101      	movs	r1, #1
 801827c:	f000 f9e8 	bl	8018650 <uxr_seq_num_add>
 8018280:	81e8      	strh	r0, [r5, #14]
 8018282:	2001      	movs	r0, #1
 8018284:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08018288 <uxr_update_output_stream_heartbeat_timestamp>:
 8018288:	b5d0      	push	{r4, r6, r7, lr}
 801828a:	8a01      	ldrh	r1, [r0, #16]
 801828c:	4604      	mov	r4, r0
 801828e:	8a40      	ldrh	r0, [r0, #18]
 8018290:	4616      	mov	r6, r2
 8018292:	461f      	mov	r7, r3
 8018294:	f000 f9e4 	bl	8018660 <uxr_seq_num_cmp>
 8018298:	2800      	cmp	r0, #0
 801829a:	db07      	blt.n	80182ac <uxr_update_output_stream_heartbeat_timestamp+0x24>
 801829c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80182a0:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 80182a4:	e9c4 2306 	strd	r2, r3, [r4, #24]
 80182a8:	2000      	movs	r0, #0
 80182aa:	bdd0      	pop	{r4, r6, r7, pc}
 80182ac:	f894 0020 	ldrb.w	r0, [r4, #32]
 80182b0:	b948      	cbnz	r0, 80182c6 <uxr_update_output_stream_heartbeat_timestamp+0x3e>
 80182b2:	2301      	movs	r3, #1
 80182b4:	f884 3020 	strb.w	r3, [r4, #32]
 80182b8:	f116 0364 	adds.w	r3, r6, #100	@ 0x64
 80182bc:	f147 0200 	adc.w	r2, r7, #0
 80182c0:	e9c4 3206 	strd	r3, r2, [r4, #24]
 80182c4:	bdd0      	pop	{r4, r6, r7, pc}
 80182c6:	e9d4 2306 	ldrd	r2, r3, [r4, #24]
 80182ca:	4296      	cmp	r6, r2
 80182cc:	eb77 0303 	sbcs.w	r3, r7, r3
 80182d0:	bfa5      	ittet	ge
 80182d2:	3001      	addge	r0, #1
 80182d4:	f884 0020 	strbge.w	r0, [r4, #32]
 80182d8:	2000      	movlt	r0, #0
 80182da:	2001      	movge	r0, #1
 80182dc:	e7ec      	b.n	80182b8 <uxr_update_output_stream_heartbeat_timestamp+0x30>
 80182de:	bf00      	nop

080182e0 <uxr_begin_output_nack_buffer_it>:
 80182e0:	8a40      	ldrh	r0, [r0, #18]
 80182e2:	4770      	bx	lr

080182e4 <uxr_next_reliable_nack_buffer_to_send>:
 80182e4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80182e8:	f890 9021 	ldrb.w	r9, [r0, #33]	@ 0x21
 80182ec:	f1b9 0f00 	cmp.w	r9, #0
 80182f0:	d011      	beq.n	8018316 <uxr_next_reliable_nack_buffer_to_send+0x32>
 80182f2:	4605      	mov	r5, r0
 80182f4:	8818      	ldrh	r0, [r3, #0]
 80182f6:	460f      	mov	r7, r1
 80182f8:	4690      	mov	r8, r2
 80182fa:	461e      	mov	r6, r3
 80182fc:	2101      	movs	r1, #1
 80182fe:	f000 f9a7 	bl	8018650 <uxr_seq_num_add>
 8018302:	8030      	strh	r0, [r6, #0]
 8018304:	8a29      	ldrh	r1, [r5, #16]
 8018306:	f000 f9ab 	bl	8018660 <uxr_seq_num_cmp>
 801830a:	2800      	cmp	r0, #0
 801830c:	dd06      	ble.n	801831c <uxr_next_reliable_nack_buffer_to_send+0x38>
 801830e:	f04f 0900 	mov.w	r9, #0
 8018312:	f885 9021 	strb.w	r9, [r5, #33]	@ 0x21
 8018316:	4648      	mov	r0, r9
 8018318:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801831c:	892a      	ldrh	r2, [r5, #8]
 801831e:	8830      	ldrh	r0, [r6, #0]
 8018320:	fbb0 f4f2 	udiv	r4, r0, r2
 8018324:	fb02 0414 	mls	r4, r2, r4, r0
 8018328:	b2a4      	uxth	r4, r4
 801832a:	686b      	ldr	r3, [r5, #4]
 801832c:	fbb3 f2f2 	udiv	r2, r3, r2
 8018330:	682b      	ldr	r3, [r5, #0]
 8018332:	fb04 f402 	mul.w	r4, r4, r2
 8018336:	3404      	adds	r4, #4
 8018338:	4423      	add	r3, r4
 801833a:	603b      	str	r3, [r7, #0]
 801833c:	682b      	ldr	r3, [r5, #0]
 801833e:	441c      	add	r4, r3
 8018340:	f854 3c04 	ldr.w	r3, [r4, #-4]
 8018344:	f8c8 3000 	str.w	r3, [r8]
 8018348:	7b2a      	ldrb	r2, [r5, #12]
 801834a:	429a      	cmp	r2, r3
 801834c:	d0d6      	beq.n	80182fc <uxr_next_reliable_nack_buffer_to_send+0x18>
 801834e:	4648      	mov	r0, r9
 8018350:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

08018354 <uxr_process_acknack>:
 8018354:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018356:	4604      	mov	r4, r0
 8018358:	460e      	mov	r6, r1
 801835a:	4610      	mov	r0, r2
 801835c:	2101      	movs	r1, #1
 801835e:	f000 f97b 	bl	8018658 <uxr_seq_num_sub>
 8018362:	8a61      	ldrh	r1, [r4, #18]
 8018364:	f000 f978 	bl	8018658 <uxr_seq_num_sub>
 8018368:	b1c0      	cbz	r0, 801839c <uxr_process_acknack+0x48>
 801836a:	4605      	mov	r5, r0
 801836c:	2700      	movs	r7, #0
 801836e:	2101      	movs	r1, #1
 8018370:	8a60      	ldrh	r0, [r4, #18]
 8018372:	f000 f96d 	bl	8018650 <uxr_seq_num_add>
 8018376:	f8b4 c008 	ldrh.w	ip, [r4, #8]
 801837a:	fbb0 f3fc 	udiv	r3, r0, ip
 801837e:	e9d4 2100 	ldrd	r2, r1, [r4]
 8018382:	fb0c 0313 	mls	r3, ip, r3, r0
 8018386:	b29b      	uxth	r3, r3
 8018388:	fbb1 f1fc 	udiv	r1, r1, ip
 801838c:	3701      	adds	r7, #1
 801838e:	fb03 f301 	mul.w	r3, r3, r1
 8018392:	42bd      	cmp	r5, r7
 8018394:	7b21      	ldrb	r1, [r4, #12]
 8018396:	8260      	strh	r0, [r4, #18]
 8018398:	50d1      	str	r1, [r2, r3]
 801839a:	d1e8      	bne.n	801836e <uxr_process_acknack+0x1a>
 801839c:	3e00      	subs	r6, #0
 801839e:	f04f 0300 	mov.w	r3, #0
 80183a2:	bf18      	it	ne
 80183a4:	2601      	movne	r6, #1
 80183a6:	f884 3020 	strb.w	r3, [r4, #32]
 80183aa:	f884 6021 	strb.w	r6, [r4, #33]	@ 0x21
 80183ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080183b0 <uxr_is_output_up_to_date>:
 80183b0:	8a01      	ldrh	r1, [r0, #16]
 80183b2:	8a40      	ldrh	r0, [r0, #18]
 80183b4:	b508      	push	{r3, lr}
 80183b6:	f000 f953 	bl	8018660 <uxr_seq_num_cmp>
 80183ba:	fab0 f080 	clz	r0, r0
 80183be:	0940      	lsrs	r0, r0, #5
 80183c0:	bd08      	pop	{r3, pc}
 80183c2:	bf00      	nop

080183c4 <get_available_free_slots>:
 80183c4:	8901      	ldrh	r1, [r0, #8]
 80183c6:	b1d9      	cbz	r1, 8018400 <get_available_free_slots+0x3c>
 80183c8:	b4f0      	push	{r4, r5, r6, r7}
 80183ca:	2400      	movs	r4, #0
 80183cc:	6845      	ldr	r5, [r0, #4]
 80183ce:	6807      	ldr	r7, [r0, #0]
 80183d0:	7b06      	ldrb	r6, [r0, #12]
 80183d2:	fbb5 f5f1 	udiv	r5, r5, r1
 80183d6:	4620      	mov	r0, r4
 80183d8:	4622      	mov	r2, r4
 80183da:	fbb2 f3f1 	udiv	r3, r2, r1
 80183de:	fb01 2313 	mls	r3, r1, r3, r2
 80183e2:	b29b      	uxth	r3, r3
 80183e4:	fb05 7303 	mla	r3, r5, r3, r7
 80183e8:	3401      	adds	r4, #1
 80183ea:	681b      	ldr	r3, [r3, #0]
 80183ec:	429e      	cmp	r6, r3
 80183ee:	bf08      	it	eq
 80183f0:	3001      	addeq	r0, #1
 80183f2:	b2a2      	uxth	r2, r4
 80183f4:	bf08      	it	eq
 80183f6:	b280      	uxtheq	r0, r0
 80183f8:	428a      	cmp	r2, r1
 80183fa:	d3ee      	bcc.n	80183da <get_available_free_slots+0x16>
 80183fc:	bcf0      	pop	{r4, r5, r6, r7}
 80183fe:	4770      	bx	lr
 8018400:	4608      	mov	r0, r1
 8018402:	4770      	bx	lr

08018404 <uxr_buffer_request_data>:
 8018404:	b530      	push	{r4, r5, lr}
 8018406:	b095      	sub	sp, #84	@ 0x54
 8018408:	4604      	mov	r4, r0
 801840a:	9d18      	ldr	r5, [sp, #96]	@ 0x60
 801840c:	9105      	str	r1, [sp, #20]
 801840e:	2d00      	cmp	r5, #0
 8018410:	bf14      	ite	ne
 8018412:	2101      	movne	r1, #1
 8018414:	2100      	moveq	r1, #0
 8018416:	9204      	str	r2, [sp, #16]
 8018418:	f04f 0200 	mov.w	r2, #0
 801841c:	9303      	str	r3, [sp, #12]
 801841e:	f88d 301c 	strb.w	r3, [sp, #28]
 8018422:	f88d 1024 	strb.w	r1, [sp, #36]	@ 0x24
 8018426:	f88d 201d 	strb.w	r2, [sp, #29]
 801842a:	f88d 201e 	strb.w	r2, [sp, #30]
 801842e:	d021      	beq.n	8018474 <uxr_buffer_request_data+0x70>
 8018430:	686a      	ldr	r2, [r5, #4]
 8018432:	682b      	ldr	r3, [r5, #0]
 8018434:	f8cd 202a 	str.w	r2, [sp, #42]	@ 0x2a
 8018438:	f8cd 3026 	str.w	r3, [sp, #38]	@ 0x26
 801843c:	2210      	movs	r2, #16
 801843e:	2000      	movs	r0, #0
 8018440:	2108      	movs	r1, #8
 8018442:	e9cd 1000 	strd	r1, r0, [sp]
 8018446:	ab0c      	add	r3, sp, #48	@ 0x30
 8018448:	9905      	ldr	r1, [sp, #20]
 801844a:	4620      	mov	r0, r4
 801844c:	f7f9 fa2e 	bl	80118ac <uxr_prepare_stream_to_write_submessage>
 8018450:	b918      	cbnz	r0, 801845a <uxr_buffer_request_data+0x56>
 8018452:	4604      	mov	r4, r0
 8018454:	4620      	mov	r0, r4
 8018456:	b015      	add	sp, #84	@ 0x54
 8018458:	bd30      	pop	{r4, r5, pc}
 801845a:	9904      	ldr	r1, [sp, #16]
 801845c:	aa06      	add	r2, sp, #24
 801845e:	4620      	mov	r0, r4
 8018460:	f7f9 fb5e 	bl	8011b20 <uxr_init_base_object_request>
 8018464:	a906      	add	r1, sp, #24
 8018466:	4604      	mov	r4, r0
 8018468:	a80c      	add	r0, sp, #48	@ 0x30
 801846a:	f7fa fe43 	bl	80130f4 <uxr_serialize_READ_DATA_Payload>
 801846e:	4620      	mov	r0, r4
 8018470:	b015      	add	sp, #84	@ 0x54
 8018472:	bd30      	pop	{r4, r5, pc}
 8018474:	2208      	movs	r2, #8
 8018476:	e7e2      	b.n	801843e <uxr_buffer_request_data+0x3a>

08018478 <uxr_buffer_cancel_data>:
 8018478:	b530      	push	{r4, r5, lr}
 801847a:	b095      	sub	sp, #84	@ 0x54
 801847c:	2400      	movs	r4, #0
 801847e:	2308      	movs	r3, #8
 8018480:	e9cd 4201 	strd	r4, r2, [sp, #4]
 8018484:	9300      	str	r3, [sp, #0]
 8018486:	9205      	str	r2, [sp, #20]
 8018488:	2501      	movs	r5, #1
 801848a:	ab0c      	add	r3, sp, #48	@ 0x30
 801848c:	2210      	movs	r2, #16
 801848e:	f8ad 401c 	strh.w	r4, [sp, #28]
 8018492:	f88d 401e 	strb.w	r4, [sp, #30]
 8018496:	f8cd 4026 	str.w	r4, [sp, #38]	@ 0x26
 801849a:	f8cd 402a 	str.w	r4, [sp, #42]	@ 0x2a
 801849e:	9103      	str	r1, [sp, #12]
 80184a0:	4604      	mov	r4, r0
 80184a2:	f88d 5024 	strb.w	r5, [sp, #36]	@ 0x24
 80184a6:	f7f9 fa01 	bl	80118ac <uxr_prepare_stream_to_write_submessage>
 80184aa:	b918      	cbnz	r0, 80184b4 <uxr_buffer_cancel_data+0x3c>
 80184ac:	4604      	mov	r4, r0
 80184ae:	4620      	mov	r0, r4
 80184b0:	b015      	add	sp, #84	@ 0x54
 80184b2:	bd30      	pop	{r4, r5, pc}
 80184b4:	9905      	ldr	r1, [sp, #20]
 80184b6:	aa06      	add	r2, sp, #24
 80184b8:	4620      	mov	r0, r4
 80184ba:	f7f9 fb31 	bl	8011b20 <uxr_init_base_object_request>
 80184be:	a906      	add	r1, sp, #24
 80184c0:	4604      	mov	r4, r0
 80184c2:	a80c      	add	r0, sp, #48	@ 0x30
 80184c4:	f7fa fe16 	bl	80130f4 <uxr_serialize_READ_DATA_Payload>
 80184c8:	4620      	mov	r0, r4
 80184ca:	b015      	add	sp, #84	@ 0x54
 80184cc:	bd30      	pop	{r4, r5, pc}
 80184ce:	bf00      	nop

080184d0 <read_submessage_format>:
 80184d0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80184d4:	b095      	sub	sp, #84	@ 0x54
 80184d6:	f8bd 9078 	ldrh.w	r9, [sp, #120]	@ 0x78
 80184da:	b113      	cbz	r3, 80184e2 <read_submessage_format+0x12>
 80184dc:	b015      	add	sp, #84	@ 0x54
 80184de:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80184e2:	460c      	mov	r4, r1
 80184e4:	4616      	mov	r6, r2
 80184e6:	e9d1 2101 	ldrd	r2, r1, [r1, #4]
 80184ea:	461d      	mov	r5, r3
 80184ec:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 80184ee:	9304      	str	r3, [sp, #16]
 80184f0:	1a52      	subs	r2, r2, r1
 80184f2:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 80184f4:	9305      	str	r3, [sp, #20]
 80184f6:	4607      	mov	r7, r0
 80184f8:	a80c      	add	r0, sp, #48	@ 0x30
 80184fa:	f89d 8076 	ldrb.w	r8, [sp, #118]	@ 0x76
 80184fe:	f7f7 ff75 	bl	80103ec <ucdr_init_buffer>
 8018502:	e9d4 1206 	ldrd	r1, r2, [r4, #24]
 8018506:	a80c      	add	r0, sp, #48	@ 0x30
 8018508:	f7f7 ff46 	bl	8010398 <ucdr_set_on_full_buffer_callback>
 801850c:	69e3      	ldr	r3, [r4, #28]
 801850e:	b193      	cbz	r3, 8018536 <read_submessage_format+0x66>
 8018510:	f1b8 0f07 	cmp.w	r8, #7
 8018514:	751d      	strb	r5, [r3, #20]
 8018516:	d03e      	beq.n	8018596 <read_submessage_format+0xc6>
 8018518:	f1b8 0f08 	cmp.w	r8, #8
 801851c:	d02c      	beq.n	8018578 <read_submessage_format+0xa8>
 801851e:	f1b8 0f06 	cmp.w	r8, #6
 8018522:	d011      	beq.n	8018548 <read_submessage_format+0x78>
 8018524:	2201      	movs	r2, #1
 8018526:	751a      	strb	r2, [r3, #20]
 8018528:	4631      	mov	r1, r6
 801852a:	4620      	mov	r0, r4
 801852c:	f7f7 ffae 	bl	801048c <ucdr_advance_buffer>
 8018530:	b015      	add	sp, #84	@ 0x54
 8018532:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8018536:	f1b8 0f07 	cmp.w	r8, #7
 801853a:	d02c      	beq.n	8018596 <read_submessage_format+0xc6>
 801853c:	f1b8 0f08 	cmp.w	r8, #8
 8018540:	d01a      	beq.n	8018578 <read_submessage_format+0xa8>
 8018542:	f1b8 0f06 	cmp.w	r8, #6
 8018546:	d1ef      	bne.n	8018528 <read_submessage_format+0x58>
 8018548:	f8d7 5088 	ldr.w	r5, [r7, #136]	@ 0x88
 801854c:	b18d      	cbz	r5, 8018572 <read_submessage_format+0xa2>
 801854e:	2306      	movs	r3, #6
 8018550:	f88d 3016 	strb.w	r3, [sp, #22]
 8018554:	aa0c      	add	r2, sp, #48	@ 0x30
 8018556:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 801855a:	9302      	str	r3, [sp, #8]
 801855c:	9200      	str	r2, [sp, #0]
 801855e:	9b04      	ldr	r3, [sp, #16]
 8018560:	9905      	ldr	r1, [sp, #20]
 8018562:	9601      	str	r6, [sp, #4]
 8018564:	464a      	mov	r2, r9
 8018566:	4638      	mov	r0, r7
 8018568:	47a8      	blx	r5
 801856a:	2301      	movs	r3, #1
 801856c:	f887 30b4 	strb.w	r3, [r7, #180]	@ 0xb4
 8018570:	69e3      	ldr	r3, [r4, #28]
 8018572:	2b00      	cmp	r3, #0
 8018574:	d1d6      	bne.n	8018524 <read_submessage_format+0x54>
 8018576:	e7d7      	b.n	8018528 <read_submessage_format+0x58>
 8018578:	f8d7 20a4 	ldr.w	r2, [r7, #164]	@ 0xa4
 801857c:	2a00      	cmp	r2, #0
 801857e:	d0f8      	beq.n	8018572 <read_submessage_format+0xa2>
 8018580:	a906      	add	r1, sp, #24
 8018582:	a80c      	add	r0, sp, #48	@ 0x30
 8018584:	9d10      	ldr	r5, [sp, #64]	@ 0x40
 8018586:	f7fa fe7b 	bl	8013280 <uxr_deserialize_SampleIdentity>
 801858a:	2800      	cmp	r0, #0
 801858c:	d13c      	bne.n	8018608 <read_submessage_format+0x138>
 801858e:	69e3      	ldr	r3, [r4, #28]
 8018590:	2b00      	cmp	r3, #0
 8018592:	d1c7      	bne.n	8018524 <read_submessage_format+0x54>
 8018594:	e7c8      	b.n	8018528 <read_submessage_format+0x58>
 8018596:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 801859a:	b132      	cbz	r2, 80185aa <read_submessage_format+0xda>
 801859c:	a906      	add	r1, sp, #24
 801859e:	a80c      	add	r0, sp, #48	@ 0x30
 80185a0:	9d10      	ldr	r5, [sp, #64]	@ 0x40
 80185a2:	f7fa fb2b 	bl	8012bfc <uxr_deserialize_BaseObjectRequest>
 80185a6:	b930      	cbnz	r0, 80185b6 <read_submessage_format+0xe6>
 80185a8:	69e3      	ldr	r3, [r4, #28]
 80185aa:	68a2      	ldr	r2, [r4, #8]
 80185ac:	4432      	add	r2, r6
 80185ae:	60a2      	str	r2, [r4, #8]
 80185b0:	2b00      	cmp	r3, #0
 80185b2:	d1b7      	bne.n	8018524 <read_submessage_format+0x54>
 80185b4:	e7b8      	b.n	8018528 <read_submessage_format+0x58>
 80185b6:	e9dd 210d 	ldrd	r2, r1, [sp, #52]	@ 0x34
 80185ba:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80185bc:	1a52      	subs	r2, r2, r1
 80185be:	a80c      	add	r0, sp, #48	@ 0x30
 80185c0:	1aed      	subs	r5, r5, r3
 80185c2:	f7f7 ff13 	bl	80103ec <ucdr_init_buffer>
 80185c6:	e9d4 1206 	ldrd	r1, r2, [r4, #24]
 80185ca:	a80c      	add	r0, sp, #48	@ 0x30
 80185cc:	f7f7 fee4 	bl	8010398 <ucdr_set_on_full_buffer_callback>
 80185d0:	4435      	add	r5, r6
 80185d2:	f89d 1018 	ldrb.w	r1, [sp, #24]
 80185d6:	f89d 3019 	ldrb.w	r3, [sp, #25]
 80185da:	f8d7 00b0 	ldr.w	r0, [r7, #176]	@ 0xb0
 80185de:	9002      	str	r0, [sp, #8]
 80185e0:	2207      	movs	r2, #7
 80185e2:	f88d 2016 	strb.w	r2, [sp, #22]
 80185e6:	b2ad      	uxth	r5, r5
 80185e8:	aa0c      	add	r2, sp, #48	@ 0x30
 80185ea:	9200      	str	r2, [sp, #0]
 80185ec:	9501      	str	r5, [sp, #4]
 80185ee:	eb03 2301 	add.w	r3, r3, r1, lsl #8
 80185f2:	b29b      	uxth	r3, r3
 80185f4:	9905      	ldr	r1, [sp, #20]
 80185f6:	f8d7 50ac 	ldr.w	r5, [r7, #172]	@ 0xac
 80185fa:	464a      	mov	r2, r9
 80185fc:	4638      	mov	r0, r7
 80185fe:	47a8      	blx	r5
 8018600:	2301      	movs	r3, #1
 8018602:	f887 30b4 	strb.w	r3, [r7, #180]	@ 0xb4
 8018606:	e7cf      	b.n	80185a8 <read_submessage_format+0xd8>
 8018608:	e9dd 210d 	ldrd	r2, r1, [sp, #52]	@ 0x34
 801860c:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801860e:	1a52      	subs	r2, r2, r1
 8018610:	a80c      	add	r0, sp, #48	@ 0x30
 8018612:	1aed      	subs	r5, r5, r3
 8018614:	f7f7 feea 	bl	80103ec <ucdr_init_buffer>
 8018618:	e9d4 1206 	ldrd	r1, r2, [r4, #24]
 801861c:	a80c      	add	r0, sp, #48	@ 0x30
 801861e:	f7f7 febb 	bl	8010398 <ucdr_set_on_full_buffer_callback>
 8018622:	4435      	add	r5, r6
 8018624:	2308      	movs	r3, #8
 8018626:	f8d7 00a8 	ldr.w	r0, [r7, #168]	@ 0xa8
 801862a:	f88d 3016 	strb.w	r3, [sp, #22]
 801862e:	b2ad      	uxth	r5, r5
 8018630:	ab0c      	add	r3, sp, #48	@ 0x30
 8018632:	9300      	str	r3, [sp, #0]
 8018634:	9002      	str	r0, [sp, #8]
 8018636:	9501      	str	r5, [sp, #4]
 8018638:	ab06      	add	r3, sp, #24
 801863a:	9905      	ldr	r1, [sp, #20]
 801863c:	f8d7 50a4 	ldr.w	r5, [r7, #164]	@ 0xa4
 8018640:	464a      	mov	r2, r9
 8018642:	4638      	mov	r0, r7
 8018644:	47a8      	blx	r5
 8018646:	2301      	movs	r3, #1
 8018648:	f887 30b4 	strb.w	r3, [r7, #180]	@ 0xb4
 801864c:	e79f      	b.n	801858e <read_submessage_format+0xbe>
 801864e:	bf00      	nop

08018650 <uxr_seq_num_add>:
 8018650:	4408      	add	r0, r1
 8018652:	b280      	uxth	r0, r0
 8018654:	4770      	bx	lr
 8018656:	bf00      	nop

08018658 <uxr_seq_num_sub>:
 8018658:	1a40      	subs	r0, r0, r1
 801865a:	b280      	uxth	r0, r0
 801865c:	4770      	bx	lr
 801865e:	bf00      	nop

08018660 <uxr_seq_num_cmp>:
 8018660:	4288      	cmp	r0, r1
 8018662:	d011      	beq.n	8018688 <uxr_seq_num_cmp+0x28>
 8018664:	d309      	bcc.n	801867a <uxr_seq_num_cmp+0x1a>
 8018666:	4288      	cmp	r0, r1
 8018668:	d910      	bls.n	801868c <uxr_seq_num_cmp+0x2c>
 801866a:	1a40      	subs	r0, r0, r1
 801866c:	f5b0 4f00 	cmp.w	r0, #32768	@ 0x8000
 8018670:	bfd4      	ite	le
 8018672:	2001      	movle	r0, #1
 8018674:	f04f 30ff 	movgt.w	r0, #4294967295	@ 0xffffffff
 8018678:	4770      	bx	lr
 801867a:	1a0b      	subs	r3, r1, r0
 801867c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8018680:	daf1      	bge.n	8018666 <uxr_seq_num_cmp+0x6>
 8018682:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8018686:	4770      	bx	lr
 8018688:	2000      	movs	r0, #0
 801868a:	4770      	bx	lr
 801868c:	2001      	movs	r0, #1
 801868e:	4770      	bx	lr

08018690 <uxr_init_framing_io>:
 8018690:	2300      	movs	r3, #0
 8018692:	7041      	strb	r1, [r0, #1]
 8018694:	7003      	strb	r3, [r0, #0]
 8018696:	8583      	strh	r3, [r0, #44]	@ 0x2c
 8018698:	4770      	bx	lr
 801869a:	bf00      	nop

0801869c <uxr_write_framed_msg>:
 801869c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80186a0:	7845      	ldrb	r5, [r0, #1]
 80186a2:	b085      	sub	sp, #20
 80186a4:	4604      	mov	r4, r0
 80186a6:	f1a5 0c7d 	sub.w	ip, r5, #125	@ 0x7d
 80186aa:	f04f 0e7e 	mov.w	lr, #126	@ 0x7e
 80186ae:	f1bc 0f01 	cmp.w	ip, #1
 80186b2:	f89d 003c 	ldrb.w	r0, [sp, #60]	@ 0x3c
 80186b6:	f8dd 8040 	ldr.w	r8, [sp, #64]	@ 0x40
 80186ba:	f884 e038 	strb.w	lr, [r4, #56]	@ 0x38
 80186be:	460e      	mov	r6, r1
 80186c0:	4617      	mov	r7, r2
 80186c2:	469b      	mov	fp, r3
 80186c4:	f240 8116 	bls.w	80188f4 <uxr_write_framed_msg+0x258>
 80186c8:	f1a0 027d 	sub.w	r2, r0, #125	@ 0x7d
 80186cc:	2302      	movs	r3, #2
 80186ce:	2a01      	cmp	r2, #1
 80186d0:	f884 5039 	strb.w	r5, [r4, #57]	@ 0x39
 80186d4:	f884 3062 	strb.w	r3, [r4, #98]	@ 0x62
 80186d8:	f240 8091 	bls.w	80187fe <uxr_write_framed_msg+0x162>
 80186dc:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80186de:	f884 003a 	strb.w	r0, [r4, #58]	@ 0x3a
 80186e2:	b2d9      	uxtb	r1, r3
 80186e4:	f1a1 037d 	sub.w	r3, r1, #125	@ 0x7d
 80186e8:	2203      	movs	r2, #3
 80186ea:	2b01      	cmp	r3, #1
 80186ec:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 80186f0:	f240 809a 	bls.w	8018828 <uxr_write_framed_msg+0x18c>
 80186f4:	18a3      	adds	r3, r4, r2
 80186f6:	3201      	adds	r2, #1
 80186f8:	f883 1038 	strb.w	r1, [r3, #56]	@ 0x38
 80186fc:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 8018700:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8018702:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8018706:	f1a3 017d 	sub.w	r1, r3, #125	@ 0x7d
 801870a:	2901      	cmp	r1, #1
 801870c:	eb04 0102 	add.w	r1, r4, r2
 8018710:	f240 8101 	bls.w	8018916 <uxr_write_framed_msg+0x27a>
 8018714:	f881 3038 	strb.w	r3, [r1, #56]	@ 0x38
 8018718:	3201      	adds	r2, #1
 801871a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801871c:	b2d2      	uxtb	r2, r2
 801871e:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 8018722:	2b00      	cmp	r3, #0
 8018724:	f000 8106 	beq.w	8018934 <uxr_write_framed_msg+0x298>
 8018728:	f04f 0a00 	mov.w	sl, #0
 801872c:	46d1      	mov	r9, sl
 801872e:	f81b 3009 	ldrb.w	r3, [fp, r9]
 8018732:	f1a3 017d 	sub.w	r1, r3, #125	@ 0x7d
 8018736:	2901      	cmp	r1, #1
 8018738:	f240 80a3 	bls.w	8018882 <uxr_write_framed_msg+0x1e6>
 801873c:	2a29      	cmp	r2, #41	@ 0x29
 801873e:	d87f      	bhi.n	8018840 <uxr_write_framed_msg+0x1a4>
 8018740:	18a1      	adds	r1, r4, r2
 8018742:	3201      	adds	r2, #1
 8018744:	b2d2      	uxtb	r2, r2
 8018746:	f881 3038 	strb.w	r3, [r1, #56]	@ 0x38
 801874a:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 801874e:	ea8a 0303 	eor.w	r3, sl, r3
 8018752:	4984      	ldr	r1, [pc, #528]	@ (8018964 <uxr_write_framed_msg+0x2c8>)
 8018754:	b2db      	uxtb	r3, r3
 8018756:	f109 0901 	add.w	r9, r9, #1
 801875a:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 801875e:	ea83 2a1a 	eor.w	sl, r3, sl, lsr #8
 8018762:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8018764:	454b      	cmp	r3, r9
 8018766:	d8e2      	bhi.n	801872e <uxr_write_framed_msg+0x92>
 8018768:	ea4f 231a 	mov.w	r3, sl, lsr #8
 801876c:	fa5f f98a 	uxtb.w	r9, sl
 8018770:	9301      	str	r3, [sp, #4]
 8018772:	f04f 0b00 	mov.w	fp, #0
 8018776:	f88d 900c 	strb.w	r9, [sp, #12]
 801877a:	f88d 300d 	strb.w	r3, [sp, #13]
 801877e:	f1a9 0a7d 	sub.w	sl, r9, #125	@ 0x7d
 8018782:	fa5f f18a 	uxtb.w	r1, sl
 8018786:	2901      	cmp	r1, #1
 8018788:	d920      	bls.n	80187cc <uxr_write_framed_msg+0x130>
 801878a:	2a29      	cmp	r2, #41	@ 0x29
 801878c:	f240 808b 	bls.w	80188a6 <uxr_write_framed_msg+0x20a>
 8018790:	2500      	movs	r5, #0
 8018792:	e000      	b.n	8018796 <uxr_write_framed_msg+0xfa>
 8018794:	b160      	cbz	r0, 80187b0 <uxr_write_framed_msg+0x114>
 8018796:	f105 0138 	add.w	r1, r5, #56	@ 0x38
 801879a:	1b52      	subs	r2, r2, r5
 801879c:	4421      	add	r1, r4
 801879e:	4643      	mov	r3, r8
 80187a0:	4638      	mov	r0, r7
 80187a2:	47b0      	blx	r6
 80187a4:	f894 2062 	ldrb.w	r2, [r4, #98]	@ 0x62
 80187a8:	4405      	add	r5, r0
 80187aa:	4295      	cmp	r5, r2
 80187ac:	d3f2      	bcc.n	8018794 <uxr_write_framed_msg+0xf8>
 80187ae:	d003      	beq.n	80187b8 <uxr_write_framed_msg+0x11c>
 80187b0:	2000      	movs	r0, #0
 80187b2:	b005      	add	sp, #20
 80187b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80187b8:	fa5f f18a 	uxtb.w	r1, sl
 80187bc:	f04f 0300 	mov.w	r3, #0
 80187c0:	2901      	cmp	r1, #1
 80187c2:	f884 3062 	strb.w	r3, [r4, #98]	@ 0x62
 80187c6:	f04f 0200 	mov.w	r2, #0
 80187ca:	d86c      	bhi.n	80188a6 <uxr_write_framed_msg+0x20a>
 80187cc:	1c51      	adds	r1, r2, #1
 80187ce:	b2c9      	uxtb	r1, r1
 80187d0:	2929      	cmp	r1, #41	@ 0x29
 80187d2:	d8dd      	bhi.n	8018790 <uxr_write_framed_msg+0xf4>
 80187d4:	18a0      	adds	r0, r4, r2
 80187d6:	3202      	adds	r2, #2
 80187d8:	f089 0920 	eor.w	r9, r9, #32
 80187dc:	b2d2      	uxtb	r2, r2
 80187de:	4659      	mov	r1, fp
 80187e0:	f04f 037d 	mov.w	r3, #125	@ 0x7d
 80187e4:	f880 9039 	strb.w	r9, [r0, #57]	@ 0x39
 80187e8:	f880 3038 	strb.w	r3, [r0, #56]	@ 0x38
 80187ec:	f04f 0b01 	mov.w	fp, #1
 80187f0:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 80187f4:	2900      	cmp	r1, #0
 80187f6:	d162      	bne.n	80188be <uxr_write_framed_msg+0x222>
 80187f8:	f8dd 9004 	ldr.w	r9, [sp, #4]
 80187fc:	e7bf      	b.n	801877e <uxr_write_framed_msg+0xe2>
 80187fe:	2204      	movs	r2, #4
 8018800:	2503      	movs	r5, #3
 8018802:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8018804:	4423      	add	r3, r4
 8018806:	b2c9      	uxtb	r1, r1
 8018808:	f04f 0c7d 	mov.w	ip, #125	@ 0x7d
 801880c:	f883 c038 	strb.w	ip, [r3, #56]	@ 0x38
 8018810:	4425      	add	r5, r4
 8018812:	f1a1 037d 	sub.w	r3, r1, #125	@ 0x7d
 8018816:	f080 0020 	eor.w	r0, r0, #32
 801881a:	2b01      	cmp	r3, #1
 801881c:	f885 0038 	strb.w	r0, [r5, #56]	@ 0x38
 8018820:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 8018824:	f63f af66 	bhi.w	80186f4 <uxr_write_framed_msg+0x58>
 8018828:	18a3      	adds	r3, r4, r2
 801882a:	f081 0120 	eor.w	r1, r1, #32
 801882e:	3202      	adds	r2, #2
 8018830:	207d      	movs	r0, #125	@ 0x7d
 8018832:	f883 1039 	strb.w	r1, [r3, #57]	@ 0x39
 8018836:	f883 0038 	strb.w	r0, [r3, #56]	@ 0x38
 801883a:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 801883e:	e75f      	b.n	8018700 <uxr_write_framed_msg+0x64>
 8018840:	2500      	movs	r5, #0
 8018842:	e001      	b.n	8018848 <uxr_write_framed_msg+0x1ac>
 8018844:	2800      	cmp	r0, #0
 8018846:	d0b3      	beq.n	80187b0 <uxr_write_framed_msg+0x114>
 8018848:	f105 0138 	add.w	r1, r5, #56	@ 0x38
 801884c:	1b52      	subs	r2, r2, r5
 801884e:	4421      	add	r1, r4
 8018850:	4643      	mov	r3, r8
 8018852:	4638      	mov	r0, r7
 8018854:	47b0      	blx	r6
 8018856:	f894 2062 	ldrb.w	r2, [r4, #98]	@ 0x62
 801885a:	4405      	add	r5, r0
 801885c:	4295      	cmp	r5, r2
 801885e:	d3f1      	bcc.n	8018844 <uxr_write_framed_msg+0x1a8>
 8018860:	d1a6      	bne.n	80187b0 <uxr_write_framed_msg+0x114>
 8018862:	f04f 0300 	mov.w	r3, #0
 8018866:	f884 3062 	strb.w	r3, [r4, #98]	@ 0x62
 801886a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801886c:	454b      	cmp	r3, r9
 801886e:	d971      	bls.n	8018954 <uxr_write_framed_msg+0x2b8>
 8018870:	f81b 3009 	ldrb.w	r3, [fp, r9]
 8018874:	f1a3 017d 	sub.w	r1, r3, #125	@ 0x7d
 8018878:	2901      	cmp	r1, #1
 801887a:	f04f 0200 	mov.w	r2, #0
 801887e:	f63f af5d 	bhi.w	801873c <uxr_write_framed_msg+0xa0>
 8018882:	1c51      	adds	r1, r2, #1
 8018884:	b2c9      	uxtb	r1, r1
 8018886:	2929      	cmp	r1, #41	@ 0x29
 8018888:	d8da      	bhi.n	8018840 <uxr_write_framed_msg+0x1a4>
 801888a:	18a0      	adds	r0, r4, r2
 801888c:	3202      	adds	r2, #2
 801888e:	b2d2      	uxtb	r2, r2
 8018890:	f083 0120 	eor.w	r1, r3, #32
 8018894:	f04f 057d 	mov.w	r5, #125	@ 0x7d
 8018898:	f880 5038 	strb.w	r5, [r0, #56]	@ 0x38
 801889c:	f880 1039 	strb.w	r1, [r0, #57]	@ 0x39
 80188a0:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 80188a4:	e753      	b.n	801874e <uxr_write_framed_msg+0xb2>
 80188a6:	18a0      	adds	r0, r4, r2
 80188a8:	3201      	adds	r2, #1
 80188aa:	b2d2      	uxtb	r2, r2
 80188ac:	4659      	mov	r1, fp
 80188ae:	f880 9038 	strb.w	r9, [r0, #56]	@ 0x38
 80188b2:	f04f 0b01 	mov.w	fp, #1
 80188b6:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 80188ba:	2900      	cmp	r1, #0
 80188bc:	d09c      	beq.n	80187f8 <uxr_write_framed_msg+0x15c>
 80188be:	2500      	movs	r5, #0
 80188c0:	e002      	b.n	80188c8 <uxr_write_framed_msg+0x22c>
 80188c2:	2800      	cmp	r0, #0
 80188c4:	f43f af74 	beq.w	80187b0 <uxr_write_framed_msg+0x114>
 80188c8:	f105 0138 	add.w	r1, r5, #56	@ 0x38
 80188cc:	1b52      	subs	r2, r2, r5
 80188ce:	4421      	add	r1, r4
 80188d0:	4643      	mov	r3, r8
 80188d2:	4638      	mov	r0, r7
 80188d4:	47b0      	blx	r6
 80188d6:	f894 2062 	ldrb.w	r2, [r4, #98]	@ 0x62
 80188da:	4405      	add	r5, r0
 80188dc:	4295      	cmp	r5, r2
 80188de:	d3f0      	bcc.n	80188c2 <uxr_write_framed_msg+0x226>
 80188e0:	f47f af66 	bne.w	80187b0 <uxr_write_framed_msg+0x114>
 80188e4:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80188e6:	2300      	movs	r3, #0
 80188e8:	b290      	uxth	r0, r2
 80188ea:	f884 3062 	strb.w	r3, [r4, #98]	@ 0x62
 80188ee:	b005      	add	sp, #20
 80188f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80188f4:	f1a0 027d 	sub.w	r2, r0, #125	@ 0x7d
 80188f8:	f085 0520 	eor.w	r5, r5, #32
 80188fc:	2303      	movs	r3, #3
 80188fe:	217d      	movs	r1, #125	@ 0x7d
 8018900:	2a01      	cmp	r2, #1
 8018902:	f884 503a 	strb.w	r5, [r4, #58]	@ 0x3a
 8018906:	f884 3062 	strb.w	r3, [r4, #98]	@ 0x62
 801890a:	f884 1039 	strb.w	r1, [r4, #57]	@ 0x39
 801890e:	d814      	bhi.n	801893a <uxr_write_framed_msg+0x29e>
 8018910:	2205      	movs	r2, #5
 8018912:	2504      	movs	r5, #4
 8018914:	e775      	b.n	8018802 <uxr_write_framed_msg+0x166>
 8018916:	f083 0320 	eor.w	r3, r3, #32
 801891a:	f881 3039 	strb.w	r3, [r1, #57]	@ 0x39
 801891e:	3202      	adds	r2, #2
 8018920:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8018922:	b2d2      	uxtb	r2, r2
 8018924:	207d      	movs	r0, #125	@ 0x7d
 8018926:	f881 0038 	strb.w	r0, [r1, #56]	@ 0x38
 801892a:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 801892e:	2b00      	cmp	r3, #0
 8018930:	f47f aefa 	bne.w	8018728 <uxr_write_framed_msg+0x8c>
 8018934:	9301      	str	r3, [sp, #4]
 8018936:	4699      	mov	r9, r3
 8018938:	e71b      	b.n	8018772 <uxr_write_framed_msg+0xd6>
 801893a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801893c:	f884 003b 	strb.w	r0, [r4, #59]	@ 0x3b
 8018940:	b2d9      	uxtb	r1, r3
 8018942:	f1a1 037d 	sub.w	r3, r1, #125	@ 0x7d
 8018946:	2204      	movs	r2, #4
 8018948:	2b01      	cmp	r3, #1
 801894a:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 801894e:	f63f aed1 	bhi.w	80186f4 <uxr_write_framed_msg+0x58>
 8018952:	e769      	b.n	8018828 <uxr_write_framed_msg+0x18c>
 8018954:	ea4f 231a 	mov.w	r3, sl, lsr #8
 8018958:	fa5f f98a 	uxtb.w	r9, sl
 801895c:	9301      	str	r3, [sp, #4]
 801895e:	2200      	movs	r2, #0
 8018960:	e707      	b.n	8018772 <uxr_write_framed_msg+0xd6>
 8018962:	bf00      	nop
 8018964:	0801b528 	.word	0x0801b528

08018968 <uxr_framing_read_transport>:
 8018968:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801896c:	4604      	mov	r4, r0
 801896e:	b083      	sub	sp, #12
 8018970:	461f      	mov	r7, r3
 8018972:	f8dd b034 	ldr.w	fp, [sp, #52]	@ 0x34
 8018976:	4689      	mov	r9, r1
 8018978:	4692      	mov	sl, r2
 801897a:	f7f9 fa81 	bl	8011e80 <uxr_millis>
 801897e:	f894 302c 	ldrb.w	r3, [r4, #44]	@ 0x2c
 8018982:	f894 602d 	ldrb.w	r6, [r4, #45]	@ 0x2d
 8018986:	42b3      	cmp	r3, r6
 8018988:	4680      	mov	r8, r0
 801898a:	d05f      	beq.n	8018a4c <uxr_framing_read_transport+0xe4>
 801898c:	d81b      	bhi.n	80189c6 <uxr_framing_read_transport+0x5e>
 801898e:	1e75      	subs	r5, r6, #1
 8018990:	1aed      	subs	r5, r5, r3
 8018992:	b2ed      	uxtb	r5, r5
 8018994:	2600      	movs	r6, #0
 8018996:	455d      	cmp	r5, fp
 8018998:	d81e      	bhi.n	80189d8 <uxr_framing_read_transport+0x70>
 801899a:	19ab      	adds	r3, r5, r6
 801899c:	455b      	cmp	r3, fp
 801899e:	bf84      	itt	hi
 80189a0:	ebab 0605 	subhi.w	r6, fp, r5
 80189a4:	b2f6      	uxtbhi	r6, r6
 80189a6:	b9e5      	cbnz	r5, 80189e2 <uxr_framing_read_transport+0x7a>
 80189a8:	f04f 0b00 	mov.w	fp, #0
 80189ac:	f7f9 fa68 	bl	8011e80 <uxr_millis>
 80189b0:	683b      	ldr	r3, [r7, #0]
 80189b2:	eba0 0008 	sub.w	r0, r0, r8
 80189b6:	1a1b      	subs	r3, r3, r0
 80189b8:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80189bc:	4658      	mov	r0, fp
 80189be:	603b      	str	r3, [r7, #0]
 80189c0:	b003      	add	sp, #12
 80189c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80189c6:	2e00      	cmp	r6, #0
 80189c8:	d048      	beq.n	8018a5c <uxr_framing_read_transport+0xf4>
 80189ca:	f1c3 052a 	rsb	r5, r3, #42	@ 0x2a
 80189ce:	b2ed      	uxtb	r5, r5
 80189d0:	3e01      	subs	r6, #1
 80189d2:	455d      	cmp	r5, fp
 80189d4:	b2f6      	uxtb	r6, r6
 80189d6:	d9e0      	bls.n	801899a <uxr_framing_read_transport+0x32>
 80189d8:	fa5f f58b 	uxtb.w	r5, fp
 80189dc:	2600      	movs	r6, #0
 80189de:	2d00      	cmp	r5, #0
 80189e0:	d0e2      	beq.n	80189a8 <uxr_framing_read_transport+0x40>
 80189e2:	f894 102c 	ldrb.w	r1, [r4, #44]	@ 0x2c
 80189e6:	3102      	adds	r1, #2
 80189e8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80189ea:	9300      	str	r3, [sp, #0]
 80189ec:	683b      	ldr	r3, [r7, #0]
 80189ee:	4421      	add	r1, r4
 80189f0:	462a      	mov	r2, r5
 80189f2:	4650      	mov	r0, sl
 80189f4:	47c8      	blx	r9
 80189f6:	f894 302c 	ldrb.w	r3, [r4, #44]	@ 0x2c
 80189fa:	4a1b      	ldr	r2, [pc, #108]	@ (8018a68 <uxr_framing_read_transport+0x100>)
 80189fc:	4403      	add	r3, r0
 80189fe:	0859      	lsrs	r1, r3, #1
 8018a00:	fba2 2101 	umull	r2, r1, r2, r1
 8018a04:	0889      	lsrs	r1, r1, #2
 8018a06:	222a      	movs	r2, #42	@ 0x2a
 8018a08:	fb02 3111 	mls	r1, r2, r1, r3
 8018a0c:	4683      	mov	fp, r0
 8018a0e:	f884 102c 	strb.w	r1, [r4, #44]	@ 0x2c
 8018a12:	2800      	cmp	r0, #0
 8018a14:	d0c8      	beq.n	80189a8 <uxr_framing_read_transport+0x40>
 8018a16:	42a8      	cmp	r0, r5
 8018a18:	d1c8      	bne.n	80189ac <uxr_framing_read_transport+0x44>
 8018a1a:	b31e      	cbz	r6, 8018a64 <uxr_framing_read_transport+0xfc>
 8018a1c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8018a1e:	9300      	str	r3, [sp, #0]
 8018a20:	3102      	adds	r1, #2
 8018a22:	4421      	add	r1, r4
 8018a24:	4632      	mov	r2, r6
 8018a26:	2300      	movs	r3, #0
 8018a28:	4650      	mov	r0, sl
 8018a2a:	47c8      	blx	r9
 8018a2c:	f894 302c 	ldrb.w	r3, [r4, #44]	@ 0x2c
 8018a30:	490d      	ldr	r1, [pc, #52]	@ (8018a68 <uxr_framing_read_transport+0x100>)
 8018a32:	181a      	adds	r2, r3, r0
 8018a34:	0853      	lsrs	r3, r2, #1
 8018a36:	fba1 1303 	umull	r1, r3, r1, r3
 8018a3a:	089b      	lsrs	r3, r3, #2
 8018a3c:	212a      	movs	r1, #42	@ 0x2a
 8018a3e:	fb01 2313 	mls	r3, r1, r3, r2
 8018a42:	eb00 0b05 	add.w	fp, r0, r5
 8018a46:	f884 302c 	strb.w	r3, [r4, #44]	@ 0x2c
 8018a4a:	e7af      	b.n	80189ac <uxr_framing_read_transport+0x44>
 8018a4c:	2600      	movs	r6, #0
 8018a4e:	f1bb 0f28 	cmp.w	fp, #40	@ 0x28
 8018a52:	85a6      	strh	r6, [r4, #44]	@ 0x2c
 8018a54:	d9c0      	bls.n	80189d8 <uxr_framing_read_transport+0x70>
 8018a56:	2102      	movs	r1, #2
 8018a58:	2529      	movs	r5, #41	@ 0x29
 8018a5a:	e7c5      	b.n	80189e8 <uxr_framing_read_transport+0x80>
 8018a5c:	f1c3 0529 	rsb	r5, r3, #41	@ 0x29
 8018a60:	b2ed      	uxtb	r5, r5
 8018a62:	e798      	b.n	8018996 <uxr_framing_read_transport+0x2e>
 8018a64:	46ab      	mov	fp, r5
 8018a66:	e7a1      	b.n	80189ac <uxr_framing_read_transport+0x44>
 8018a68:	30c30c31 	.word	0x30c30c31

08018a6c <uxr_read_framed_msg>:
 8018a6c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018a70:	f890 602c 	ldrb.w	r6, [r0, #44]	@ 0x2c
 8018a74:	f890 502d 	ldrb.w	r5, [r0, #45]	@ 0x2d
 8018a78:	42ae      	cmp	r6, r5
 8018a7a:	b083      	sub	sp, #12
 8018a7c:	4604      	mov	r4, r0
 8018a7e:	461f      	mov	r7, r3
 8018a80:	4689      	mov	r9, r1
 8018a82:	4692      	mov	sl, r2
 8018a84:	f000 817d 	beq.w	8018d82 <uxr_read_framed_msg+0x316>
 8018a88:	7823      	ldrb	r3, [r4, #0]
 8018a8a:	4ecc      	ldr	r6, [pc, #816]	@ (8018dbc <uxr_read_framed_msg+0x350>)
 8018a8c:	f8df 8330 	ldr.w	r8, [pc, #816]	@ 8018dc0 <uxr_read_framed_msg+0x354>
 8018a90:	2b07      	cmp	r3, #7
 8018a92:	d8fd      	bhi.n	8018a90 <uxr_read_framed_msg+0x24>
 8018a94:	e8df f013 	tbh	[pc, r3, lsl #1]
 8018a98:	00f40113 	.word	0x00f40113
 8018a9c:	00b700d4 	.word	0x00b700d4
 8018aa0:	004d008e 	.word	0x004d008e
 8018aa4:	00080030 	.word	0x00080030
 8018aa8:	f894 002c 	ldrb.w	r0, [r4, #44]	@ 0x2c
 8018aac:	f894 302d 	ldrb.w	r3, [r4, #45]	@ 0x2d
 8018ab0:	4298      	cmp	r0, r3
 8018ab2:	f000 8141 	beq.w	8018d38 <uxr_read_framed_msg+0x2cc>
 8018ab6:	18e2      	adds	r2, r4, r3
 8018ab8:	7891      	ldrb	r1, [r2, #2]
 8018aba:	297d      	cmp	r1, #125	@ 0x7d
 8018abc:	f000 81a2 	beq.w	8018e04 <uxr_read_framed_msg+0x398>
 8018ac0:	3301      	adds	r3, #1
 8018ac2:	085a      	lsrs	r2, r3, #1
 8018ac4:	fba6 0202 	umull	r0, r2, r6, r2
 8018ac8:	0892      	lsrs	r2, r2, #2
 8018aca:	202a      	movs	r0, #42	@ 0x2a
 8018acc:	fb00 3312 	mls	r3, r0, r2, r3
 8018ad0:	297e      	cmp	r1, #126	@ 0x7e
 8018ad2:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 8018ad6:	f000 8251 	beq.w	8018f7c <uxr_read_framed_msg+0x510>
 8018ada:	8ea3      	ldrh	r3, [r4, #52]	@ 0x34
 8018adc:	8ee2      	ldrh	r2, [r4, #54]	@ 0x36
 8018ade:	eb03 2301 	add.w	r3, r3, r1, lsl #8
 8018ae2:	b29b      	uxth	r3, r3
 8018ae4:	2100      	movs	r1, #0
 8018ae6:	429a      	cmp	r2, r3
 8018ae8:	86a3      	strh	r3, [r4, #52]	@ 0x34
 8018aea:	7021      	strb	r1, [r4, #0]
 8018aec:	f000 8182 	beq.w	8018df4 <uxr_read_framed_msg+0x388>
 8018af0:	2000      	movs	r0, #0
 8018af2:	b003      	add	sp, #12
 8018af4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018af8:	f894 002c 	ldrb.w	r0, [r4, #44]	@ 0x2c
 8018afc:	f894 302d 	ldrb.w	r3, [r4, #45]	@ 0x2d
 8018b00:	4298      	cmp	r0, r3
 8018b02:	f000 8128 	beq.w	8018d56 <uxr_read_framed_msg+0x2ea>
 8018b06:	18e2      	adds	r2, r4, r3
 8018b08:	7891      	ldrb	r1, [r2, #2]
 8018b0a:	297d      	cmp	r1, #125	@ 0x7d
 8018b0c:	f000 8196 	beq.w	8018e3c <uxr_read_framed_msg+0x3d0>
 8018b10:	3301      	adds	r3, #1
 8018b12:	085a      	lsrs	r2, r3, #1
 8018b14:	fba6 0202 	umull	r0, r2, r6, r2
 8018b18:	0892      	lsrs	r2, r2, #2
 8018b1a:	202a      	movs	r0, #42	@ 0x2a
 8018b1c:	fb00 3312 	mls	r3, r0, r2, r3
 8018b20:	297e      	cmp	r1, #126	@ 0x7e
 8018b22:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 8018b26:	f000 8219 	beq.w	8018f5c <uxr_read_framed_msg+0x4f0>
 8018b2a:	2307      	movs	r3, #7
 8018b2c:	86a1      	strh	r1, [r4, #52]	@ 0x34
 8018b2e:	7023      	strb	r3, [r4, #0]
 8018b30:	e7ae      	b.n	8018a90 <uxr_read_framed_msg+0x24>
 8018b32:	8e63      	ldrh	r3, [r4, #50]	@ 0x32
 8018b34:	8e25      	ldrh	r5, [r4, #48]	@ 0x30
 8018b36:	429d      	cmp	r5, r3
 8018b38:	d937      	bls.n	8018baa <uxr_read_framed_msg+0x13e>
 8018b3a:	ee07 9a90 	vmov	s15, r9
 8018b3e:	f04f 0c2a 	mov.w	ip, #42	@ 0x2a
 8018b42:	e01e      	b.n	8018b82 <uxr_read_framed_msg+0x116>
 8018b44:	f89e e002 	ldrb.w	lr, [lr, #2]
 8018b48:	f1be 0f7d 	cmp.w	lr, #125	@ 0x7d
 8018b4c:	f000 80d2 	beq.w	8018cf4 <uxr_read_framed_msg+0x288>
 8018b50:	f1be 0f7e 	cmp.w	lr, #126	@ 0x7e
 8018b54:	f884 202d 	strb.w	r2, [r4, #45]	@ 0x2d
 8018b58:	f000 8214 	beq.w	8018f84 <uxr_read_framed_msg+0x518>
 8018b5c:	f807 e003 	strb.w	lr, [r7, r3]
 8018b60:	8ee0      	ldrh	r0, [r4, #54]	@ 0x36
 8018b62:	8e63      	ldrh	r3, [r4, #50]	@ 0x32
 8018b64:	8e25      	ldrh	r5, [r4, #48]	@ 0x30
 8018b66:	ea80 010e 	eor.w	r1, r0, lr
 8018b6a:	b2c9      	uxtb	r1, r1
 8018b6c:	3301      	adds	r3, #1
 8018b6e:	f838 2011 	ldrh.w	r2, [r8, r1, lsl #1]
 8018b72:	b29b      	uxth	r3, r3
 8018b74:	ea82 2210 	eor.w	r2, r2, r0, lsr #8
 8018b78:	42ab      	cmp	r3, r5
 8018b7a:	86e2      	strh	r2, [r4, #54]	@ 0x36
 8018b7c:	8663      	strh	r3, [r4, #50]	@ 0x32
 8018b7e:	f080 8121 	bcs.w	8018dc4 <uxr_read_framed_msg+0x358>
 8018b82:	f894 102d 	ldrb.w	r1, [r4, #45]	@ 0x2d
 8018b86:	f894 002c 	ldrb.w	r0, [r4, #44]	@ 0x2c
 8018b8a:	f101 0b01 	add.w	fp, r1, #1
 8018b8e:	ea4f 025b 	mov.w	r2, fp, lsr #1
 8018b92:	fba6 9202 	umull	r9, r2, r6, r2
 8018b96:	0892      	lsrs	r2, r2, #2
 8018b98:	4288      	cmp	r0, r1
 8018b9a:	eb04 0e01 	add.w	lr, r4, r1
 8018b9e:	fb0c b212 	mls	r2, ip, r2, fp
 8018ba2:	d1cf      	bne.n	8018b44 <uxr_read_framed_msg+0xd8>
 8018ba4:	ee17 9a90 	vmov	r9, s15
 8018ba8:	429d      	cmp	r5, r3
 8018baa:	f040 8112 	bne.w	8018dd2 <uxr_read_framed_msg+0x366>
 8018bae:	2306      	movs	r3, #6
 8018bb0:	7023      	strb	r3, [r4, #0]
 8018bb2:	e76d      	b.n	8018a90 <uxr_read_framed_msg+0x24>
 8018bb4:	f894 002c 	ldrb.w	r0, [r4, #44]	@ 0x2c
 8018bb8:	f894 302d 	ldrb.w	r3, [r4, #45]	@ 0x2d
 8018bbc:	4298      	cmp	r0, r3
 8018bbe:	f000 80bb 	beq.w	8018d38 <uxr_read_framed_msg+0x2cc>
 8018bc2:	18e2      	adds	r2, r4, r3
 8018bc4:	7891      	ldrb	r1, [r2, #2]
 8018bc6:	297d      	cmp	r1, #125	@ 0x7d
 8018bc8:	f000 8153 	beq.w	8018e72 <uxr_read_framed_msg+0x406>
 8018bcc:	3301      	adds	r3, #1
 8018bce:	085a      	lsrs	r2, r3, #1
 8018bd0:	fba6 0202 	umull	r0, r2, r6, r2
 8018bd4:	0892      	lsrs	r2, r2, #2
 8018bd6:	202a      	movs	r0, #42	@ 0x2a
 8018bd8:	fb00 3212 	mls	r2, r0, r2, r3
 8018bdc:	297e      	cmp	r1, #126	@ 0x7e
 8018bde:	f884 202d 	strb.w	r2, [r4, #45]	@ 0x2d
 8018be2:	f000 81cb 	beq.w	8018f7c <uxr_read_framed_msg+0x510>
 8018be6:	8e23      	ldrh	r3, [r4, #48]	@ 0x30
 8018be8:	eb03 2301 	add.w	r3, r3, r1, lsl #8
 8018bec:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8018bee:	b29b      	uxth	r3, r3
 8018bf0:	2000      	movs	r0, #0
 8018bf2:	428b      	cmp	r3, r1
 8018bf4:	8623      	strh	r3, [r4, #48]	@ 0x30
 8018bf6:	8660      	strh	r0, [r4, #50]	@ 0x32
 8018bf8:	86e0      	strh	r0, [r4, #54]	@ 0x36
 8018bfa:	f240 80db 	bls.w	8018db4 <uxr_read_framed_msg+0x348>
 8018bfe:	7020      	strb	r0, [r4, #0]
 8018c00:	b003      	add	sp, #12
 8018c02:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018c06:	f894 002c 	ldrb.w	r0, [r4, #44]	@ 0x2c
 8018c0a:	f894 302d 	ldrb.w	r3, [r4, #45]	@ 0x2d
 8018c0e:	4298      	cmp	r0, r3
 8018c10:	f000 80a1 	beq.w	8018d56 <uxr_read_framed_msg+0x2ea>
 8018c14:	18e2      	adds	r2, r4, r3
 8018c16:	7891      	ldrb	r1, [r2, #2]
 8018c18:	297d      	cmp	r1, #125	@ 0x7d
 8018c1a:	f000 8167 	beq.w	8018eec <uxr_read_framed_msg+0x480>
 8018c1e:	3301      	adds	r3, #1
 8018c20:	085a      	lsrs	r2, r3, #1
 8018c22:	fba6 0202 	umull	r0, r2, r6, r2
 8018c26:	0892      	lsrs	r2, r2, #2
 8018c28:	202a      	movs	r0, #42	@ 0x2a
 8018c2a:	fb00 3312 	mls	r3, r0, r2, r3
 8018c2e:	297e      	cmp	r1, #126	@ 0x7e
 8018c30:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 8018c34:	f000 8192 	beq.w	8018f5c <uxr_read_framed_msg+0x4f0>
 8018c38:	2304      	movs	r3, #4
 8018c3a:	8621      	strh	r1, [r4, #48]	@ 0x30
 8018c3c:	7023      	strb	r3, [r4, #0]
 8018c3e:	e727      	b.n	8018a90 <uxr_read_framed_msg+0x24>
 8018c40:	f894 002c 	ldrb.w	r0, [r4, #44]	@ 0x2c
 8018c44:	f894 202d 	ldrb.w	r2, [r4, #45]	@ 0x2d
 8018c48:	4290      	cmp	r0, r2
 8018c4a:	f000 80b1 	beq.w	8018db0 <uxr_read_framed_msg+0x344>
 8018c4e:	18a3      	adds	r3, r4, r2
 8018c50:	7899      	ldrb	r1, [r3, #2]
 8018c52:	297d      	cmp	r1, #125	@ 0x7d
 8018c54:	f000 8166 	beq.w	8018f24 <uxr_read_framed_msg+0x4b8>
 8018c58:	3201      	adds	r2, #1
 8018c5a:	0850      	lsrs	r0, r2, #1
 8018c5c:	fba6 3000 	umull	r3, r0, r6, r0
 8018c60:	0880      	lsrs	r0, r0, #2
 8018c62:	232a      	movs	r3, #42	@ 0x2a
 8018c64:	fb03 2210 	mls	r2, r3, r0, r2
 8018c68:	297e      	cmp	r1, #126	@ 0x7e
 8018c6a:	f884 202d 	strb.w	r2, [r4, #45]	@ 0x2d
 8018c6e:	f000 8187 	beq.w	8018f80 <uxr_read_framed_msg+0x514>
 8018c72:	7863      	ldrb	r3, [r4, #1]
 8018c74:	428b      	cmp	r3, r1
 8018c76:	bf0c      	ite	eq
 8018c78:	2303      	moveq	r3, #3
 8018c7a:	2300      	movne	r3, #0
 8018c7c:	7023      	strb	r3, [r4, #0]
 8018c7e:	e707      	b.n	8018a90 <uxr_read_framed_msg+0x24>
 8018c80:	f894 102c 	ldrb.w	r1, [r4, #44]	@ 0x2c
 8018c84:	f894 302d 	ldrb.w	r3, [r4, #45]	@ 0x2d
 8018c88:	2200      	movs	r2, #0
 8018c8a:	4299      	cmp	r1, r3
 8018c8c:	f884 202e 	strb.w	r2, [r4, #46]	@ 0x2e
 8018c90:	d063      	beq.n	8018d5a <uxr_read_framed_msg+0x2ee>
 8018c92:	18e2      	adds	r2, r4, r3
 8018c94:	7892      	ldrb	r2, [r2, #2]
 8018c96:	2a7d      	cmp	r2, #125	@ 0x7d
 8018c98:	f000 8107 	beq.w	8018eaa <uxr_read_framed_msg+0x43e>
 8018c9c:	1c59      	adds	r1, r3, #1
 8018c9e:	084b      	lsrs	r3, r1, #1
 8018ca0:	fba6 0303 	umull	r0, r3, r6, r3
 8018ca4:	089b      	lsrs	r3, r3, #2
 8018ca6:	202a      	movs	r0, #42	@ 0x2a
 8018ca8:	fb00 1313 	mls	r3, r0, r3, r1
 8018cac:	2a7e      	cmp	r2, #126	@ 0x7e
 8018cae:	f884 202e 	strb.w	r2, [r4, #46]	@ 0x2e
 8018cb2:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 8018cb6:	d050      	beq.n	8018d5a <uxr_read_framed_msg+0x2ee>
 8018cb8:	2302      	movs	r3, #2
 8018cba:	7023      	strb	r3, [r4, #0]
 8018cbc:	e6e8      	b.n	8018a90 <uxr_read_framed_msg+0x24>
 8018cbe:	f894 e02c 	ldrb.w	lr, [r4, #44]	@ 0x2c
 8018cc2:	f894 202d 	ldrb.w	r2, [r4, #45]	@ 0x2d
 8018cc6:	f04f 0c2a 	mov.w	ip, #42	@ 0x2a
 8018cca:	1c51      	adds	r1, r2, #1
 8018ccc:	084b      	lsrs	r3, r1, #1
 8018cce:	fba6 5303 	umull	r5, r3, r6, r3
 8018cd2:	089b      	lsrs	r3, r3, #2
 8018cd4:	fb0c 1313 	mls	r3, ip, r3, r1
 8018cd8:	4596      	cmp	lr, r2
 8018cda:	eb04 0002 	add.w	r0, r4, r2
 8018cde:	b2da      	uxtb	r2, r3
 8018ce0:	f43f af06 	beq.w	8018af0 <uxr_read_framed_msg+0x84>
 8018ce4:	7883      	ldrb	r3, [r0, #2]
 8018ce6:	f884 202d 	strb.w	r2, [r4, #45]	@ 0x2d
 8018cea:	2b7e      	cmp	r3, #126	@ 0x7e
 8018cec:	d1ed      	bne.n	8018cca <uxr_read_framed_msg+0x25e>
 8018cee:	2301      	movs	r3, #1
 8018cf0:	7023      	strb	r3, [r4, #0]
 8018cf2:	e6cd      	b.n	8018a90 <uxr_read_framed_msg+0x24>
 8018cf4:	f101 0b01 	add.w	fp, r1, #1
 8018cf8:	ea4f 025b 	mov.w	r2, fp, lsr #1
 8018cfc:	fba6 e202 	umull	lr, r2, r6, r2
 8018d00:	3102      	adds	r1, #2
 8018d02:	0892      	lsrs	r2, r2, #2
 8018d04:	ea4f 0e51 	mov.w	lr, r1, lsr #1
 8018d08:	fb0c b212 	mls	r2, ip, r2, fp
 8018d0c:	fba6 9e0e 	umull	r9, lr, r6, lr
 8018d10:	eb04 0b02 	add.w	fp, r4, r2
 8018d14:	b2d2      	uxtb	r2, r2
 8018d16:	ea4f 0e9e 	mov.w	lr, lr, lsr #2
 8018d1a:	4290      	cmp	r0, r2
 8018d1c:	fb0c 111e 	mls	r1, ip, lr, r1
 8018d20:	f43f af40 	beq.w	8018ba4 <uxr_read_framed_msg+0x138>
 8018d24:	f89b e002 	ldrb.w	lr, [fp, #2]
 8018d28:	f884 102d 	strb.w	r1, [r4, #45]	@ 0x2d
 8018d2c:	f1be 0f7e 	cmp.w	lr, #126	@ 0x7e
 8018d30:	d036      	beq.n	8018da0 <uxr_read_framed_msg+0x334>
 8018d32:	f08e 0e20 	eor.w	lr, lr, #32
 8018d36:	e711      	b.n	8018b5c <uxr_read_framed_msg+0xf0>
 8018d38:	2301      	movs	r3, #1
 8018d3a:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8018d3c:	4649      	mov	r1, r9
 8018d3e:	e9cd 2300 	strd	r2, r3, [sp]
 8018d42:	4620      	mov	r0, r4
 8018d44:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8018d46:	4652      	mov	r2, sl
 8018d48:	f7ff fe0e 	bl	8018968 <uxr_framing_read_transport>
 8018d4c:	2800      	cmp	r0, #0
 8018d4e:	f43f aecf 	beq.w	8018af0 <uxr_read_framed_msg+0x84>
 8018d52:	7823      	ldrb	r3, [r4, #0]
 8018d54:	e69c      	b.n	8018a90 <uxr_read_framed_msg+0x24>
 8018d56:	2302      	movs	r3, #2
 8018d58:	e7ef      	b.n	8018d3a <uxr_read_framed_msg+0x2ce>
 8018d5a:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8018d5c:	2304      	movs	r3, #4
 8018d5e:	e9cd 2300 	strd	r2, r3, [sp]
 8018d62:	4649      	mov	r1, r9
 8018d64:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8018d66:	4652      	mov	r2, sl
 8018d68:	4620      	mov	r0, r4
 8018d6a:	f7ff fdfd 	bl	8018968 <uxr_framing_read_transport>
 8018d6e:	2800      	cmp	r0, #0
 8018d70:	d1ef      	bne.n	8018d52 <uxr_read_framed_msg+0x2e6>
 8018d72:	f894 002e 	ldrb.w	r0, [r4, #46]	@ 0x2e
 8018d76:	387e      	subs	r0, #126	@ 0x7e
 8018d78:	bf18      	it	ne
 8018d7a:	2001      	movne	r0, #1
 8018d7c:	2800      	cmp	r0, #0
 8018d7e:	d0e8      	beq.n	8018d52 <uxr_read_framed_msg+0x2e6>
 8018d80:	e6b6      	b.n	8018af0 <uxr_read_framed_msg+0x84>
 8018d82:	9d0f      	ldr	r5, [sp, #60]	@ 0x3c
 8018d84:	2305      	movs	r3, #5
 8018d86:	e9cd 5300 	strd	r5, r3, [sp]
 8018d8a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8018d8c:	f7ff fdec 	bl	8018968 <uxr_framing_read_transport>
 8018d90:	f894 202d 	ldrb.w	r2, [r4, #45]	@ 0x2d
 8018d94:	f894 302c 	ldrb.w	r3, [r4, #44]	@ 0x2c
 8018d98:	429a      	cmp	r2, r3
 8018d9a:	f43f aea9 	beq.w	8018af0 <uxr_read_framed_msg+0x84>
 8018d9e:	e673      	b.n	8018a88 <uxr_read_framed_msg+0x1c>
 8018da0:	429d      	cmp	r5, r3
 8018da2:	ee17 9a90 	vmov	r9, s15
 8018da6:	f43f af02 	beq.w	8018bae <uxr_read_framed_msg+0x142>
 8018daa:	2301      	movs	r3, #1
 8018dac:	7023      	strb	r3, [r4, #0]
 8018dae:	e66f      	b.n	8018a90 <uxr_read_framed_msg+0x24>
 8018db0:	2303      	movs	r3, #3
 8018db2:	e7c2      	b.n	8018d3a <uxr_read_framed_msg+0x2ce>
 8018db4:	2305      	movs	r3, #5
 8018db6:	7023      	strb	r3, [r4, #0]
 8018db8:	e66a      	b.n	8018a90 <uxr_read_framed_msg+0x24>
 8018dba:	bf00      	nop
 8018dbc:	30c30c31 	.word	0x30c30c31
 8018dc0:	0801b528 	.word	0x0801b528
 8018dc4:	ee17 9a90 	vmov	r9, s15
 8018dc8:	f43f aef1 	beq.w	8018bae <uxr_read_framed_msg+0x142>
 8018dcc:	f1be 0f7e 	cmp.w	lr, #126	@ 0x7e
 8018dd0:	d08d      	beq.n	8018cee <uxr_read_framed_msg+0x282>
 8018dd2:	1aeb      	subs	r3, r5, r3
 8018dd4:	3302      	adds	r3, #2
 8018dd6:	9301      	str	r3, [sp, #4]
 8018dd8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8018dda:	9300      	str	r3, [sp, #0]
 8018ddc:	4652      	mov	r2, sl
 8018dde:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8018de0:	4649      	mov	r1, r9
 8018de2:	4620      	mov	r0, r4
 8018de4:	f7ff fdc0 	bl	8018968 <uxr_framing_read_transport>
 8018de8:	fab0 f080 	clz	r0, r0
 8018dec:	0940      	lsrs	r0, r0, #5
 8018dee:	2800      	cmp	r0, #0
 8018df0:	d0af      	beq.n	8018d52 <uxr_read_framed_msg+0x2e6>
 8018df2:	e67d      	b.n	8018af0 <uxr_read_framed_msg+0x84>
 8018df4:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8018df6:	f894 302e 	ldrb.w	r3, [r4, #46]	@ 0x2e
 8018dfa:	7013      	strb	r3, [r2, #0]
 8018dfc:	8e20      	ldrh	r0, [r4, #48]	@ 0x30
 8018dfe:	b003      	add	sp, #12
 8018e00:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018e04:	1c59      	adds	r1, r3, #1
 8018e06:	084a      	lsrs	r2, r1, #1
 8018e08:	fba6 5202 	umull	r5, r2, r6, r2
 8018e0c:	0892      	lsrs	r2, r2, #2
 8018e0e:	252a      	movs	r5, #42	@ 0x2a
 8018e10:	fb05 1212 	mls	r2, r5, r2, r1
 8018e14:	b2d1      	uxtb	r1, r2
 8018e16:	4288      	cmp	r0, r1
 8018e18:	d08e      	beq.n	8018d38 <uxr_read_framed_msg+0x2cc>
 8018e1a:	3302      	adds	r3, #2
 8018e1c:	4422      	add	r2, r4
 8018e1e:	0858      	lsrs	r0, r3, #1
 8018e20:	fba6 1000 	umull	r1, r0, r6, r0
 8018e24:	7891      	ldrb	r1, [r2, #2]
 8018e26:	0882      	lsrs	r2, r0, #2
 8018e28:	fb05 3312 	mls	r3, r5, r2, r3
 8018e2c:	297e      	cmp	r1, #126	@ 0x7e
 8018e2e:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 8018e32:	f000 80a3 	beq.w	8018f7c <uxr_read_framed_msg+0x510>
 8018e36:	f081 0120 	eor.w	r1, r1, #32
 8018e3a:	e64e      	b.n	8018ada <uxr_read_framed_msg+0x6e>
 8018e3c:	1c59      	adds	r1, r3, #1
 8018e3e:	084a      	lsrs	r2, r1, #1
 8018e40:	fba6 5202 	umull	r5, r2, r6, r2
 8018e44:	0892      	lsrs	r2, r2, #2
 8018e46:	252a      	movs	r5, #42	@ 0x2a
 8018e48:	fb05 1212 	mls	r2, r5, r2, r1
 8018e4c:	b2d1      	uxtb	r1, r2
 8018e4e:	4288      	cmp	r0, r1
 8018e50:	d081      	beq.n	8018d56 <uxr_read_framed_msg+0x2ea>
 8018e52:	3302      	adds	r3, #2
 8018e54:	4422      	add	r2, r4
 8018e56:	0858      	lsrs	r0, r3, #1
 8018e58:	fba6 1000 	umull	r1, r0, r6, r0
 8018e5c:	7891      	ldrb	r1, [r2, #2]
 8018e5e:	0882      	lsrs	r2, r0, #2
 8018e60:	fb05 3312 	mls	r3, r5, r2, r3
 8018e64:	297e      	cmp	r1, #126	@ 0x7e
 8018e66:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 8018e6a:	d077      	beq.n	8018f5c <uxr_read_framed_msg+0x4f0>
 8018e6c:	f081 0120 	eor.w	r1, r1, #32
 8018e70:	e65b      	b.n	8018b2a <uxr_read_framed_msg+0xbe>
 8018e72:	1c59      	adds	r1, r3, #1
 8018e74:	084a      	lsrs	r2, r1, #1
 8018e76:	fba6 5202 	umull	r5, r2, r6, r2
 8018e7a:	0892      	lsrs	r2, r2, #2
 8018e7c:	252a      	movs	r5, #42	@ 0x2a
 8018e7e:	fb05 1212 	mls	r2, r5, r2, r1
 8018e82:	b2d1      	uxtb	r1, r2
 8018e84:	4288      	cmp	r0, r1
 8018e86:	f43f af57 	beq.w	8018d38 <uxr_read_framed_msg+0x2cc>
 8018e8a:	3302      	adds	r3, #2
 8018e8c:	4422      	add	r2, r4
 8018e8e:	0858      	lsrs	r0, r3, #1
 8018e90:	fba6 1000 	umull	r1, r0, r6, r0
 8018e94:	7891      	ldrb	r1, [r2, #2]
 8018e96:	0882      	lsrs	r2, r0, #2
 8018e98:	fb05 3312 	mls	r3, r5, r2, r3
 8018e9c:	297e      	cmp	r1, #126	@ 0x7e
 8018e9e:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 8018ea2:	d06b      	beq.n	8018f7c <uxr_read_framed_msg+0x510>
 8018ea4:	f081 0120 	eor.w	r1, r1, #32
 8018ea8:	e69d      	b.n	8018be6 <uxr_read_framed_msg+0x17a>
 8018eaa:	1c5d      	adds	r5, r3, #1
 8018eac:	086a      	lsrs	r2, r5, #1
 8018eae:	fba6 0202 	umull	r0, r2, r6, r2
 8018eb2:	0892      	lsrs	r2, r2, #2
 8018eb4:	202a      	movs	r0, #42	@ 0x2a
 8018eb6:	fb00 5212 	mls	r2, r0, r2, r5
 8018eba:	b2d5      	uxtb	r5, r2
 8018ebc:	42a9      	cmp	r1, r5
 8018ebe:	f43f af4c 	beq.w	8018d5a <uxr_read_framed_msg+0x2ee>
 8018ec2:	3302      	adds	r3, #2
 8018ec4:	4422      	add	r2, r4
 8018ec6:	0859      	lsrs	r1, r3, #1
 8018ec8:	fba6 5101 	umull	r5, r1, r6, r1
 8018ecc:	7895      	ldrb	r5, [r2, #2]
 8018ece:	f884 502e 	strb.w	r5, [r4, #46]	@ 0x2e
 8018ed2:	088a      	lsrs	r2, r1, #2
 8018ed4:	fb00 3312 	mls	r3, r0, r2, r3
 8018ed8:	2d7e      	cmp	r5, #126	@ 0x7e
 8018eda:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 8018ede:	f43f af3c 	beq.w	8018d5a <uxr_read_framed_msg+0x2ee>
 8018ee2:	f085 0520 	eor.w	r5, r5, #32
 8018ee6:	f884 502e 	strb.w	r5, [r4, #46]	@ 0x2e
 8018eea:	e6e5      	b.n	8018cb8 <uxr_read_framed_msg+0x24c>
 8018eec:	1c59      	adds	r1, r3, #1
 8018eee:	084a      	lsrs	r2, r1, #1
 8018ef0:	fba6 5202 	umull	r5, r2, r6, r2
 8018ef4:	0892      	lsrs	r2, r2, #2
 8018ef6:	252a      	movs	r5, #42	@ 0x2a
 8018ef8:	fb05 1212 	mls	r2, r5, r2, r1
 8018efc:	b2d1      	uxtb	r1, r2
 8018efe:	4288      	cmp	r0, r1
 8018f00:	f43f af29 	beq.w	8018d56 <uxr_read_framed_msg+0x2ea>
 8018f04:	3302      	adds	r3, #2
 8018f06:	4422      	add	r2, r4
 8018f08:	0858      	lsrs	r0, r3, #1
 8018f0a:	fba6 1000 	umull	r1, r0, r6, r0
 8018f0e:	7891      	ldrb	r1, [r2, #2]
 8018f10:	0882      	lsrs	r2, r0, #2
 8018f12:	fb05 3312 	mls	r3, r5, r2, r3
 8018f16:	297e      	cmp	r1, #126	@ 0x7e
 8018f18:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 8018f1c:	d01e      	beq.n	8018f5c <uxr_read_framed_msg+0x4f0>
 8018f1e:	f081 0120 	eor.w	r1, r1, #32
 8018f22:	e689      	b.n	8018c38 <uxr_read_framed_msg+0x1cc>
 8018f24:	1c51      	adds	r1, r2, #1
 8018f26:	084b      	lsrs	r3, r1, #1
 8018f28:	fba6 5303 	umull	r5, r3, r6, r3
 8018f2c:	089b      	lsrs	r3, r3, #2
 8018f2e:	252a      	movs	r5, #42	@ 0x2a
 8018f30:	fb05 1313 	mls	r3, r5, r3, r1
 8018f34:	b2d9      	uxtb	r1, r3
 8018f36:	4288      	cmp	r0, r1
 8018f38:	f43f af3a 	beq.w	8018db0 <uxr_read_framed_msg+0x344>
 8018f3c:	3202      	adds	r2, #2
 8018f3e:	4423      	add	r3, r4
 8018f40:	0850      	lsrs	r0, r2, #1
 8018f42:	789b      	ldrb	r3, [r3, #2]
 8018f44:	fba6 1000 	umull	r1, r0, r6, r0
 8018f48:	0880      	lsrs	r0, r0, #2
 8018f4a:	fb05 2210 	mls	r2, r5, r0, r2
 8018f4e:	2b7e      	cmp	r3, #126	@ 0x7e
 8018f50:	f884 202d 	strb.w	r2, [r4, #45]	@ 0x2d
 8018f54:	d014      	beq.n	8018f80 <uxr_read_framed_msg+0x514>
 8018f56:	f083 0120 	eor.w	r1, r3, #32
 8018f5a:	e68a      	b.n	8018c72 <uxr_read_framed_msg+0x206>
 8018f5c:	2302      	movs	r3, #2
 8018f5e:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8018f60:	4649      	mov	r1, r9
 8018f62:	e9cd 2300 	strd	r2, r3, [sp]
 8018f66:	4620      	mov	r0, r4
 8018f68:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8018f6a:	4652      	mov	r2, sl
 8018f6c:	f7ff fcfc 	bl	8018968 <uxr_framing_read_transport>
 8018f70:	2800      	cmp	r0, #0
 8018f72:	f47f aeee 	bne.w	8018d52 <uxr_read_framed_msg+0x2e6>
 8018f76:	2301      	movs	r3, #1
 8018f78:	7023      	strb	r3, [r4, #0]
 8018f7a:	e589      	b.n	8018a90 <uxr_read_framed_msg+0x24>
 8018f7c:	2301      	movs	r3, #1
 8018f7e:	e7ee      	b.n	8018f5e <uxr_read_framed_msg+0x4f2>
 8018f80:	2303      	movs	r3, #3
 8018f82:	e7ec      	b.n	8018f5e <uxr_read_framed_msg+0x4f2>
 8018f84:	ee17 9a90 	vmov	r9, s15
 8018f88:	e6b1      	b.n	8018cee <uxr_read_framed_msg+0x282>
 8018f8a:	bf00      	nop

08018f8c <rcl_get_default_domain_id>:
 8018f8c:	b530      	push	{r4, r5, lr}
 8018f8e:	b083      	sub	sp, #12
 8018f90:	2300      	movs	r3, #0
 8018f92:	9300      	str	r3, [sp, #0]
 8018f94:	b1d0      	cbz	r0, 8018fcc <rcl_get_default_domain_id+0x40>
 8018f96:	4604      	mov	r4, r0
 8018f98:	4669      	mov	r1, sp
 8018f9a:	4815      	ldr	r0, [pc, #84]	@ (8018ff0 <rcl_get_default_domain_id+0x64>)
 8018f9c:	f7fc feb0 	bl	8015d00 <rcutils_get_env>
 8018fa0:	4602      	mov	r2, r0
 8018fa2:	b110      	cbz	r0, 8018faa <rcl_get_default_domain_id+0x1e>
 8018fa4:	2001      	movs	r0, #1
 8018fa6:	b003      	add	sp, #12
 8018fa8:	bd30      	pop	{r4, r5, pc}
 8018faa:	9b00      	ldr	r3, [sp, #0]
 8018fac:	b18b      	cbz	r3, 8018fd2 <rcl_get_default_domain_id+0x46>
 8018fae:	7818      	ldrb	r0, [r3, #0]
 8018fb0:	2800      	cmp	r0, #0
 8018fb2:	d0f8      	beq.n	8018fa6 <rcl_get_default_domain_id+0x1a>
 8018fb4:	4618      	mov	r0, r3
 8018fb6:	a901      	add	r1, sp, #4
 8018fb8:	9201      	str	r2, [sp, #4]
 8018fba:	f000 fc7b 	bl	80198b4 <strtoul>
 8018fbe:	4605      	mov	r5, r0
 8018fc0:	b150      	cbz	r0, 8018fd8 <rcl_get_default_domain_id+0x4c>
 8018fc2:	1c43      	adds	r3, r0, #1
 8018fc4:	d00d      	beq.n	8018fe2 <rcl_get_default_domain_id+0x56>
 8018fc6:	6025      	str	r5, [r4, #0]
 8018fc8:	2000      	movs	r0, #0
 8018fca:	e7ec      	b.n	8018fa6 <rcl_get_default_domain_id+0x1a>
 8018fcc:	200b      	movs	r0, #11
 8018fce:	b003      	add	sp, #12
 8018fd0:	bd30      	pop	{r4, r5, pc}
 8018fd2:	4618      	mov	r0, r3
 8018fd4:	b003      	add	sp, #12
 8018fd6:	bd30      	pop	{r4, r5, pc}
 8018fd8:	9b01      	ldr	r3, [sp, #4]
 8018fda:	781b      	ldrb	r3, [r3, #0]
 8018fdc:	2b00      	cmp	r3, #0
 8018fde:	d0f2      	beq.n	8018fc6 <rcl_get_default_domain_id+0x3a>
 8018fe0:	e7e0      	b.n	8018fa4 <rcl_get_default_domain_id+0x18>
 8018fe2:	f000 fef9 	bl	8019dd8 <__errno>
 8018fe6:	6803      	ldr	r3, [r0, #0]
 8018fe8:	2b22      	cmp	r3, #34	@ 0x22
 8018fea:	d1ec      	bne.n	8018fc6 <rcl_get_default_domain_id+0x3a>
 8018fec:	e7da      	b.n	8018fa4 <rcl_get_default_domain_id+0x18>
 8018fee:	bf00      	nop
 8018ff0:	0801b728 	.word	0x0801b728

08018ff4 <rcl_get_zero_initialized_guard_condition>:
 8018ff4:	4a03      	ldr	r2, [pc, #12]	@ (8019004 <rcl_get_zero_initialized_guard_condition+0x10>)
 8018ff6:	4603      	mov	r3, r0
 8018ff8:	e892 0003 	ldmia.w	r2, {r0, r1}
 8018ffc:	e883 0003 	stmia.w	r3, {r0, r1}
 8019000:	4618      	mov	r0, r3
 8019002:	4770      	bx	lr
 8019004:	0801b738 	.word	0x0801b738

08019008 <rcl_guard_condition_init>:
 8019008:	b082      	sub	sp, #8
 801900a:	b5f0      	push	{r4, r5, r6, r7, lr}
 801900c:	b087      	sub	sp, #28
 801900e:	ac0c      	add	r4, sp, #48	@ 0x30
 8019010:	e884 000c 	stmia.w	r4, {r2, r3}
 8019014:	4625      	mov	r5, r4
 8019016:	4607      	mov	r7, r0
 8019018:	460e      	mov	r6, r1
 801901a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801901c:	ac01      	add	r4, sp, #4
 801901e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8019020:	682b      	ldr	r3, [r5, #0]
 8019022:	6023      	str	r3, [r4, #0]
 8019024:	a801      	add	r0, sp, #4
 8019026:	f7f5 f807 	bl	800e038 <rcutils_allocator_is_valid>
 801902a:	2800      	cmp	r0, #0
 801902c:	d034      	beq.n	8019098 <rcl_guard_condition_init+0x90>
 801902e:	463c      	mov	r4, r7
 8019030:	2f00      	cmp	r7, #0
 8019032:	d031      	beq.n	8019098 <rcl_guard_condition_init+0x90>
 8019034:	4635      	mov	r5, r6
 8019036:	687e      	ldr	r6, [r7, #4]
 8019038:	bb46      	cbnz	r6, 801908c <rcl_guard_condition_init+0x84>
 801903a:	2d00      	cmp	r5, #0
 801903c:	d02c      	beq.n	8019098 <rcl_guard_condition_init+0x90>
 801903e:	4628      	mov	r0, r5
 8019040:	f7fa f9a8 	bl	8013394 <rcl_context_is_valid>
 8019044:	2800      	cmp	r0, #0
 8019046:	d02d      	beq.n	80190a4 <rcl_guard_condition_init+0x9c>
 8019048:	9b01      	ldr	r3, [sp, #4]
 801904a:	9905      	ldr	r1, [sp, #20]
 801904c:	201c      	movs	r0, #28
 801904e:	4798      	blx	r3
 8019050:	4607      	mov	r7, r0
 8019052:	6060      	str	r0, [r4, #4]
 8019054:	2800      	cmp	r0, #0
 8019056:	d02e      	beq.n	80190b6 <rcl_guard_condition_init+0xae>
 8019058:	6828      	ldr	r0, [r5, #0]
 801905a:	3028      	adds	r0, #40	@ 0x28
 801905c:	f000 f9c0 	bl	80193e0 <rmw_create_guard_condition>
 8019060:	f8d4 c004 	ldr.w	ip, [r4, #4]
 8019064:	6038      	str	r0, [r7, #0]
 8019066:	f8dc 5000 	ldr.w	r5, [ip]
 801906a:	b1ed      	cbz	r5, 80190a8 <rcl_guard_condition_init+0xa0>
 801906c:	ac01      	add	r4, sp, #4
 801906e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8019070:	2701      	movs	r7, #1
 8019072:	f10c 0508 	add.w	r5, ip, #8
 8019076:	f88c 7004 	strb.w	r7, [ip, #4]
 801907a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 801907c:	6823      	ldr	r3, [r4, #0]
 801907e:	602b      	str	r3, [r5, #0]
 8019080:	4630      	mov	r0, r6
 8019082:	b007      	add	sp, #28
 8019084:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8019088:	b002      	add	sp, #8
 801908a:	4770      	bx	lr
 801908c:	2064      	movs	r0, #100	@ 0x64
 801908e:	b007      	add	sp, #28
 8019090:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8019094:	b002      	add	sp, #8
 8019096:	4770      	bx	lr
 8019098:	200b      	movs	r0, #11
 801909a:	b007      	add	sp, #28
 801909c:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 80190a0:	b002      	add	sp, #8
 80190a2:	4770      	bx	lr
 80190a4:	2065      	movs	r0, #101	@ 0x65
 80190a6:	e7f2      	b.n	801908e <rcl_guard_condition_init+0x86>
 80190a8:	4660      	mov	r0, ip
 80190aa:	9b02      	ldr	r3, [sp, #8]
 80190ac:	9905      	ldr	r1, [sp, #20]
 80190ae:	4798      	blx	r3
 80190b0:	6065      	str	r5, [r4, #4]
 80190b2:	2001      	movs	r0, #1
 80190b4:	e7eb      	b.n	801908e <rcl_guard_condition_init+0x86>
 80190b6:	200a      	movs	r0, #10
 80190b8:	e7e9      	b.n	801908e <rcl_guard_condition_init+0x86>
 80190ba:	bf00      	nop

080190bc <rcl_guard_condition_init_from_rmw>:
 80190bc:	b082      	sub	sp, #8
 80190be:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80190c2:	b086      	sub	sp, #24
 80190c4:	ac0c      	add	r4, sp, #48	@ 0x30
 80190c6:	4684      	mov	ip, r0
 80190c8:	f844 3f04 	str.w	r3, [r4, #4]!
 80190cc:	460f      	mov	r7, r1
 80190ce:	4690      	mov	r8, r2
 80190d0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80190d2:	ad01      	add	r5, sp, #4
 80190d4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80190d6:	6823      	ldr	r3, [r4, #0]
 80190d8:	602b      	str	r3, [r5, #0]
 80190da:	a801      	add	r0, sp, #4
 80190dc:	4664      	mov	r4, ip
 80190de:	f7f4 ffab 	bl	800e038 <rcutils_allocator_is_valid>
 80190e2:	b328      	cbz	r0, 8019130 <rcl_guard_condition_init_from_rmw+0x74>
 80190e4:	b324      	cbz	r4, 8019130 <rcl_guard_condition_init_from_rmw+0x74>
 80190e6:	6866      	ldr	r6, [r4, #4]
 80190e8:	b9e6      	cbnz	r6, 8019124 <rcl_guard_condition_init_from_rmw+0x68>
 80190ea:	f1b8 0f00 	cmp.w	r8, #0
 80190ee:	d01f      	beq.n	8019130 <rcl_guard_condition_init_from_rmw+0x74>
 80190f0:	4640      	mov	r0, r8
 80190f2:	f7fa f94f 	bl	8013394 <rcl_context_is_valid>
 80190f6:	b308      	cbz	r0, 801913c <rcl_guard_condition_init_from_rmw+0x80>
 80190f8:	9b01      	ldr	r3, [sp, #4]
 80190fa:	9905      	ldr	r1, [sp, #20]
 80190fc:	201c      	movs	r0, #28
 80190fe:	4798      	blx	r3
 8019100:	4605      	mov	r5, r0
 8019102:	6060      	str	r0, [r4, #4]
 8019104:	b340      	cbz	r0, 8019158 <rcl_guard_condition_init_from_rmw+0x9c>
 8019106:	b1df      	cbz	r7, 8019140 <rcl_guard_condition_init_from_rmw+0x84>
 8019108:	6007      	str	r7, [r0, #0]
 801910a:	7106      	strb	r6, [r0, #4]
 801910c:	ac01      	add	r4, sp, #4
 801910e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8019110:	3508      	adds	r5, #8
 8019112:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8019114:	6823      	ldr	r3, [r4, #0]
 8019116:	602b      	str	r3, [r5, #0]
 8019118:	2000      	movs	r0, #0
 801911a:	b006      	add	sp, #24
 801911c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8019120:	b002      	add	sp, #8
 8019122:	4770      	bx	lr
 8019124:	2064      	movs	r0, #100	@ 0x64
 8019126:	b006      	add	sp, #24
 8019128:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801912c:	b002      	add	sp, #8
 801912e:	4770      	bx	lr
 8019130:	200b      	movs	r0, #11
 8019132:	b006      	add	sp, #24
 8019134:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8019138:	b002      	add	sp, #8
 801913a:	4770      	bx	lr
 801913c:	2065      	movs	r0, #101	@ 0x65
 801913e:	e7f2      	b.n	8019126 <rcl_guard_condition_init_from_rmw+0x6a>
 8019140:	f8d8 0000 	ldr.w	r0, [r8]
 8019144:	3028      	adds	r0, #40	@ 0x28
 8019146:	f000 f94b 	bl	80193e0 <rmw_create_guard_condition>
 801914a:	6028      	str	r0, [r5, #0]
 801914c:	6865      	ldr	r5, [r4, #4]
 801914e:	682e      	ldr	r6, [r5, #0]
 8019150:	b126      	cbz	r6, 801915c <rcl_guard_condition_init_from_rmw+0xa0>
 8019152:	2301      	movs	r3, #1
 8019154:	712b      	strb	r3, [r5, #4]
 8019156:	e7d9      	b.n	801910c <rcl_guard_condition_init_from_rmw+0x50>
 8019158:	200a      	movs	r0, #10
 801915a:	e7e4      	b.n	8019126 <rcl_guard_condition_init_from_rmw+0x6a>
 801915c:	4628      	mov	r0, r5
 801915e:	9b02      	ldr	r3, [sp, #8]
 8019160:	9905      	ldr	r1, [sp, #20]
 8019162:	4798      	blx	r3
 8019164:	6066      	str	r6, [r4, #4]
 8019166:	2001      	movs	r0, #1
 8019168:	e7dd      	b.n	8019126 <rcl_guard_condition_init_from_rmw+0x6a>
 801916a:	bf00      	nop

0801916c <rcl_guard_condition_fini>:
 801916c:	b570      	push	{r4, r5, r6, lr}
 801916e:	b082      	sub	sp, #8
 8019170:	b1f0      	cbz	r0, 80191b0 <rcl_guard_condition_fini+0x44>
 8019172:	4604      	mov	r4, r0
 8019174:	6840      	ldr	r0, [r0, #4]
 8019176:	b158      	cbz	r0, 8019190 <rcl_guard_condition_fini+0x24>
 8019178:	6803      	ldr	r3, [r0, #0]
 801917a:	68c6      	ldr	r6, [r0, #12]
 801917c:	6981      	ldr	r1, [r0, #24]
 801917e:	b15b      	cbz	r3, 8019198 <rcl_guard_condition_fini+0x2c>
 8019180:	7905      	ldrb	r5, [r0, #4]
 8019182:	b95d      	cbnz	r5, 801919c <rcl_guard_condition_fini+0x30>
 8019184:	47b0      	blx	r6
 8019186:	2300      	movs	r3, #0
 8019188:	4628      	mov	r0, r5
 801918a:	6063      	str	r3, [r4, #4]
 801918c:	b002      	add	sp, #8
 801918e:	bd70      	pop	{r4, r5, r6, pc}
 8019190:	4605      	mov	r5, r0
 8019192:	4628      	mov	r0, r5
 8019194:	b002      	add	sp, #8
 8019196:	bd70      	pop	{r4, r5, r6, pc}
 8019198:	461d      	mov	r5, r3
 801919a:	e7f3      	b.n	8019184 <rcl_guard_condition_fini+0x18>
 801919c:	4618      	mov	r0, r3
 801919e:	9101      	str	r1, [sp, #4]
 80191a0:	f000 f932 	bl	8019408 <rmw_destroy_guard_condition>
 80191a4:	1e05      	subs	r5, r0, #0
 80191a6:	9901      	ldr	r1, [sp, #4]
 80191a8:	6860      	ldr	r0, [r4, #4]
 80191aa:	bf18      	it	ne
 80191ac:	2501      	movne	r5, #1
 80191ae:	e7e9      	b.n	8019184 <rcl_guard_condition_fini+0x18>
 80191b0:	250b      	movs	r5, #11
 80191b2:	4628      	mov	r0, r5
 80191b4:	b002      	add	sp, #8
 80191b6:	bd70      	pop	{r4, r5, r6, pc}

080191b8 <rcl_guard_condition_get_default_options>:
 80191b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80191ba:	b087      	sub	sp, #28
 80191bc:	4607      	mov	r7, r0
 80191be:	466c      	mov	r4, sp
 80191c0:	4668      	mov	r0, sp
 80191c2:	f7f4 ff2b 	bl	800e01c <rcutils_get_default_allocator>
 80191c6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80191c8:	4d07      	ldr	r5, [pc, #28]	@ (80191e8 <rcl_guard_condition_get_default_options+0x30>)
 80191ca:	f8d4 c000 	ldr.w	ip, [r4]
 80191ce:	462e      	mov	r6, r5
 80191d0:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 80191d2:	462c      	mov	r4, r5
 80191d4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80191d6:	463c      	mov	r4, r7
 80191d8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80191da:	4638      	mov	r0, r7
 80191dc:	f8c6 c000 	str.w	ip, [r6]
 80191e0:	f8c4 c000 	str.w	ip, [r4]
 80191e4:	b007      	add	sp, #28
 80191e6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80191e8:	200076e0 	.word	0x200076e0

080191ec <rcl_trigger_guard_condition>:
 80191ec:	b148      	cbz	r0, 8019202 <rcl_trigger_guard_condition+0x16>
 80191ee:	b508      	push	{r3, lr}
 80191f0:	6843      	ldr	r3, [r0, #4]
 80191f2:	b143      	cbz	r3, 8019206 <rcl_trigger_guard_condition+0x1a>
 80191f4:	6818      	ldr	r0, [r3, #0]
 80191f6:	f000 f91b 	bl	8019430 <rmw_trigger_guard_condition>
 80191fa:	3800      	subs	r0, #0
 80191fc:	bf18      	it	ne
 80191fe:	2001      	movne	r0, #1
 8019200:	bd08      	pop	{r3, pc}
 8019202:	200b      	movs	r0, #11
 8019204:	4770      	bx	lr
 8019206:	200b      	movs	r0, #11
 8019208:	bd08      	pop	{r3, pc}
 801920a:	bf00      	nop

0801920c <rcl_guard_condition_get_rmw_handle>:
 801920c:	b110      	cbz	r0, 8019214 <rcl_guard_condition_get_rmw_handle+0x8>
 801920e:	6840      	ldr	r0, [r0, #4]
 8019210:	b100      	cbz	r0, 8019214 <rcl_guard_condition_get_rmw_handle+0x8>
 8019212:	6800      	ldr	r0, [r0, #0]
 8019214:	4770      	bx	lr
 8019216:	bf00      	nop

08019218 <on_status>:
 8019218:	b082      	sub	sp, #8
 801921a:	b002      	add	sp, #8
 801921c:	4770      	bx	lr
 801921e:	bf00      	nop

08019220 <on_topic>:
 8019220:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019224:	4a21      	ldr	r2, [pc, #132]	@ (80192ac <on_topic+0x8c>)
 8019226:	b094      	sub	sp, #80	@ 0x50
 8019228:	6812      	ldr	r2, [r2, #0]
 801922a:	9e1a      	ldr	r6, [sp, #104]	@ 0x68
 801922c:	f8bd 506c 	ldrh.w	r5, [sp, #108]	@ 0x6c
 8019230:	9113      	str	r1, [sp, #76]	@ 0x4c
 8019232:	9312      	str	r3, [sp, #72]	@ 0x48
 8019234:	b3ba      	cbz	r2, 80192a6 <on_topic+0x86>
 8019236:	f8bd 104c 	ldrh.w	r1, [sp, #76]	@ 0x4c
 801923a:	f89d 004e 	ldrb.w	r0, [sp, #78]	@ 0x4e
 801923e:	e001      	b.n	8019244 <on_topic+0x24>
 8019240:	6892      	ldr	r2, [r2, #8]
 8019242:	b382      	cbz	r2, 80192a6 <on_topic+0x86>
 8019244:	68d4      	ldr	r4, [r2, #12]
 8019246:	8aa3      	ldrh	r3, [r4, #20]
 8019248:	428b      	cmp	r3, r1
 801924a:	d1f9      	bne.n	8019240 <on_topic+0x20>
 801924c:	7da3      	ldrb	r3, [r4, #22]
 801924e:	4283      	cmp	r3, r0
 8019250:	d1f6      	bne.n	8019240 <on_topic+0x20>
 8019252:	2248      	movs	r2, #72	@ 0x48
 8019254:	f104 0130 	add.w	r1, r4, #48	@ 0x30
 8019258:	4668      	mov	r0, sp
 801925a:	f000 fdf2 	bl	8019e42 <memcpy>
 801925e:	e9d4 230a 	ldrd	r2, r3, [r4, #40]	@ 0x28
 8019262:	4620      	mov	r0, r4
 8019264:	f7f5 fc8a 	bl	800eb7c <rmw_uxrce_get_static_input_buffer_for_entity>
 8019268:	4607      	mov	r7, r0
 801926a:	b1e0      	cbz	r0, 80192a6 <on_topic+0x86>
 801926c:	f8d0 800c 	ldr.w	r8, [r0, #12]
 8019270:	462a      	mov	r2, r5
 8019272:	4630      	mov	r0, r6
 8019274:	f108 0110 	add.w	r1, r8, #16
 8019278:	f7fe f9aa 	bl	80175d0 <ucdr_deserialize_array_uint8_t>
 801927c:	b930      	cbnz	r0, 801928c <on_topic+0x6c>
 801927e:	480c      	ldr	r0, [pc, #48]	@ (80192b0 <on_topic+0x90>)
 8019280:	4639      	mov	r1, r7
 8019282:	b014      	add	sp, #80	@ 0x50
 8019284:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8019288:	f7fc bf74 	b.w	8016174 <put_memory>
 801928c:	f8c8 4814 	str.w	r4, [r8, #2068]	@ 0x814
 8019290:	f8c8 5810 	str.w	r5, [r8, #2064]	@ 0x810
 8019294:	f7fe f834 	bl	8017300 <rmw_uros_epoch_nanos>
 8019298:	f608 0218 	addw	r2, r8, #2072	@ 0x818
 801929c:	2305      	movs	r3, #5
 801929e:	e9c2 0100 	strd	r0, r1, [r2]
 80192a2:	f888 3820 	strb.w	r3, [r8, #2080]	@ 0x820
 80192a6:	b014      	add	sp, #80	@ 0x50
 80192a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80192ac:	2000aae4 	.word	0x2000aae4
 80192b0:	20007878 	.word	0x20007878

080192b4 <on_request>:
 80192b4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80192b8:	4822      	ldr	r0, [pc, #136]	@ (8019344 <on_request+0x90>)
 80192ba:	b095      	sub	sp, #84	@ 0x54
 80192bc:	9113      	str	r1, [sp, #76]	@ 0x4c
 80192be:	6801      	ldr	r1, [r0, #0]
 80192c0:	9f1c      	ldr	r7, [sp, #112]	@ 0x70
 80192c2:	f8bd 6074 	ldrh.w	r6, [sp, #116]	@ 0x74
 80192c6:	2900      	cmp	r1, #0
 80192c8:	d039      	beq.n	801933e <on_request+0x8a>
 80192ca:	461d      	mov	r5, r3
 80192cc:	e001      	b.n	80192d2 <on_request+0x1e>
 80192ce:	6889      	ldr	r1, [r1, #8]
 80192d0:	b3a9      	cbz	r1, 801933e <on_request+0x8a>
 80192d2:	68cc      	ldr	r4, [r1, #12]
 80192d4:	8b20      	ldrh	r0, [r4, #24]
 80192d6:	4290      	cmp	r0, r2
 80192d8:	d1f9      	bne.n	80192ce <on_request+0x1a>
 80192da:	2248      	movs	r2, #72	@ 0x48
 80192dc:	f104 0128 	add.w	r1, r4, #40	@ 0x28
 80192e0:	4668      	mov	r0, sp
 80192e2:	f000 fdae 	bl	8019e42 <memcpy>
 80192e6:	e9d4 2308 	ldrd	r2, r3, [r4, #32]
 80192ea:	4620      	mov	r0, r4
 80192ec:	f7f5 fc46 	bl	800eb7c <rmw_uxrce_get_static_input_buffer_for_entity>
 80192f0:	4680      	mov	r8, r0
 80192f2:	b320      	cbz	r0, 801933e <on_request+0x8a>
 80192f4:	f8d0 900c 	ldr.w	r9, [r0, #12]
 80192f8:	4632      	mov	r2, r6
 80192fa:	4638      	mov	r0, r7
 80192fc:	f109 0110 	add.w	r1, r9, #16
 8019300:	f7fe f966 	bl	80175d0 <ucdr_deserialize_array_uint8_t>
 8019304:	b930      	cbnz	r0, 8019314 <on_request+0x60>
 8019306:	4810      	ldr	r0, [pc, #64]	@ (8019348 <on_request+0x94>)
 8019308:	4641      	mov	r1, r8
 801930a:	b015      	add	sp, #84	@ 0x54
 801930c:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8019310:	f7fc bf30 	b.w	8016174 <put_memory>
 8019314:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8019316:	f8c9 4814 	str.w	r4, [r9, #2068]	@ 0x814
 801931a:	f609 0428 	addw	r4, r9, #2088	@ 0x828
 801931e:	f8c9 6810 	str.w	r6, [r9, #2064]	@ 0x810
 8019322:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8019324:	e895 0003 	ldmia.w	r5, {r0, r1}
 8019328:	e884 0003 	stmia.w	r4, {r0, r1}
 801932c:	f7fd ffe8 	bl	8017300 <rmw_uros_epoch_nanos>
 8019330:	f609 0218 	addw	r2, r9, #2072	@ 0x818
 8019334:	2303      	movs	r3, #3
 8019336:	e9c2 0100 	strd	r0, r1, [r2]
 801933a:	f889 3820 	strb.w	r3, [r9, #2080]	@ 0x820
 801933e:	b015      	add	sp, #84	@ 0x54
 8019340:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8019344:	2000aad4 	.word	0x2000aad4
 8019348:	20007878 	.word	0x20007878

0801934c <on_reply>:
 801934c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8019350:	4821      	ldr	r0, [pc, #132]	@ (80193d8 <on_reply+0x8c>)
 8019352:	b095      	sub	sp, #84	@ 0x54
 8019354:	9113      	str	r1, [sp, #76]	@ 0x4c
 8019356:	6801      	ldr	r1, [r0, #0]
 8019358:	9f1c      	ldr	r7, [sp, #112]	@ 0x70
 801935a:	f8bd 6074 	ldrh.w	r6, [sp, #116]	@ 0x74
 801935e:	b3b9      	cbz	r1, 80193d0 <on_reply+0x84>
 8019360:	461d      	mov	r5, r3
 8019362:	e001      	b.n	8019368 <on_reply+0x1c>
 8019364:	6889      	ldr	r1, [r1, #8]
 8019366:	b399      	cbz	r1, 80193d0 <on_reply+0x84>
 8019368:	68cc      	ldr	r4, [r1, #12]
 801936a:	8b20      	ldrh	r0, [r4, #24]
 801936c:	4290      	cmp	r0, r2
 801936e:	d1f9      	bne.n	8019364 <on_reply+0x18>
 8019370:	2248      	movs	r2, #72	@ 0x48
 8019372:	f104 0128 	add.w	r1, r4, #40	@ 0x28
 8019376:	4668      	mov	r0, sp
 8019378:	f000 fd63 	bl	8019e42 <memcpy>
 801937c:	e9d4 2308 	ldrd	r2, r3, [r4, #32]
 8019380:	4620      	mov	r0, r4
 8019382:	f7f5 fbfb 	bl	800eb7c <rmw_uxrce_get_static_input_buffer_for_entity>
 8019386:	4680      	mov	r8, r0
 8019388:	b310      	cbz	r0, 80193d0 <on_reply+0x84>
 801938a:	f8d0 900c 	ldr.w	r9, [r0, #12]
 801938e:	4632      	mov	r2, r6
 8019390:	4638      	mov	r0, r7
 8019392:	f109 0110 	add.w	r1, r9, #16
 8019396:	f7fe f91b 	bl	80175d0 <ucdr_deserialize_array_uint8_t>
 801939a:	b930      	cbnz	r0, 80193aa <on_reply+0x5e>
 801939c:	480f      	ldr	r0, [pc, #60]	@ (80193dc <on_reply+0x90>)
 801939e:	4641      	mov	r1, r8
 80193a0:	b015      	add	sp, #84	@ 0x54
 80193a2:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80193a6:	f7fc bee5 	b.w	8016174 <put_memory>
 80193aa:	b2aa      	uxth	r2, r5
 80193ac:	2300      	movs	r3, #0
 80193ae:	f609 0128 	addw	r1, r9, #2088	@ 0x828
 80193b2:	f8c9 4814 	str.w	r4, [r9, #2068]	@ 0x814
 80193b6:	f8c9 6810 	str.w	r6, [r9, #2064]	@ 0x810
 80193ba:	e9c1 2300 	strd	r2, r3, [r1]
 80193be:	f7fd ff9f 	bl	8017300 <rmw_uros_epoch_nanos>
 80193c2:	f609 0218 	addw	r2, r9, #2072	@ 0x818
 80193c6:	2304      	movs	r3, #4
 80193c8:	e9c2 0100 	strd	r0, r1, [r2]
 80193cc:	f889 3820 	strb.w	r3, [r9, #2080]	@ 0x820
 80193d0:	b015      	add	sp, #84	@ 0x54
 80193d2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80193d6:	bf00      	nop
 80193d8:	20008108 	.word	0x20008108
 80193dc:	20007878 	.word	0x20007878

080193e0 <rmw_create_guard_condition>:
 80193e0:	b538      	push	{r3, r4, r5, lr}
 80193e2:	4605      	mov	r5, r0
 80193e4:	4807      	ldr	r0, [pc, #28]	@ (8019404 <rmw_create_guard_condition+0x24>)
 80193e6:	f7fc feb5 	bl	8016154 <get_memory>
 80193ea:	b148      	cbz	r0, 8019400 <rmw_create_guard_condition+0x20>
 80193ec:	68c4      	ldr	r4, [r0, #12]
 80193ee:	2300      	movs	r3, #0
 80193f0:	61e5      	str	r5, [r4, #28]
 80193f2:	7423      	strb	r3, [r4, #16]
 80193f4:	f7fc ff16 	bl	8016224 <rmw_get_implementation_identifier>
 80193f8:	e9c4 0405 	strd	r0, r4, [r4, #20]
 80193fc:	f104 0014 	add.w	r0, r4, #20
 8019400:	bd38      	pop	{r3, r4, r5, pc}
 8019402:	bf00      	nop
 8019404:	2000aa00 	.word	0x2000aa00

08019408 <rmw_destroy_guard_condition>:
 8019408:	b508      	push	{r3, lr}
 801940a:	4b08      	ldr	r3, [pc, #32]	@ (801942c <rmw_destroy_guard_condition+0x24>)
 801940c:	6819      	ldr	r1, [r3, #0]
 801940e:	b911      	cbnz	r1, 8019416 <rmw_destroy_guard_condition+0xe>
 8019410:	e00a      	b.n	8019428 <rmw_destroy_guard_condition+0x20>
 8019412:	6889      	ldr	r1, [r1, #8]
 8019414:	b141      	cbz	r1, 8019428 <rmw_destroy_guard_condition+0x20>
 8019416:	68cb      	ldr	r3, [r1, #12]
 8019418:	3314      	adds	r3, #20
 801941a:	4298      	cmp	r0, r3
 801941c:	d1f9      	bne.n	8019412 <rmw_destroy_guard_condition+0xa>
 801941e:	4803      	ldr	r0, [pc, #12]	@ (801942c <rmw_destroy_guard_condition+0x24>)
 8019420:	f7fc fea8 	bl	8016174 <put_memory>
 8019424:	2000      	movs	r0, #0
 8019426:	bd08      	pop	{r3, pc}
 8019428:	2001      	movs	r0, #1
 801942a:	bd08      	pop	{r3, pc}
 801942c:	2000aa00 	.word	0x2000aa00

08019430 <rmw_trigger_guard_condition>:
 8019430:	b160      	cbz	r0, 801944c <rmw_trigger_guard_condition+0x1c>
 8019432:	b510      	push	{r4, lr}
 8019434:	4604      	mov	r4, r0
 8019436:	6800      	ldr	r0, [r0, #0]
 8019438:	f7f5 fd0e 	bl	800ee58 <is_uxrce_rmw_identifier_valid>
 801943c:	b908      	cbnz	r0, 8019442 <rmw_trigger_guard_condition+0x12>
 801943e:	2001      	movs	r0, #1
 8019440:	bd10      	pop	{r4, pc}
 8019442:	6863      	ldr	r3, [r4, #4]
 8019444:	2201      	movs	r2, #1
 8019446:	741a      	strb	r2, [r3, #16]
 8019448:	2000      	movs	r0, #0
 801944a:	bd10      	pop	{r4, pc}
 801944c:	2001      	movs	r0, #1
 801944e:	4770      	bx	lr

08019450 <calloc>:
 8019450:	4b02      	ldr	r3, [pc, #8]	@ (801945c <calloc+0xc>)
 8019452:	460a      	mov	r2, r1
 8019454:	4601      	mov	r1, r0
 8019456:	6818      	ldr	r0, [r3, #0]
 8019458:	f000 b802 	b.w	8019460 <_calloc_r>
 801945c:	20000104 	.word	0x20000104

08019460 <_calloc_r>:
 8019460:	b570      	push	{r4, r5, r6, lr}
 8019462:	fba1 5402 	umull	r5, r4, r1, r2
 8019466:	b93c      	cbnz	r4, 8019478 <_calloc_r+0x18>
 8019468:	4629      	mov	r1, r5
 801946a:	f000 f887 	bl	801957c <_malloc_r>
 801946e:	4606      	mov	r6, r0
 8019470:	b928      	cbnz	r0, 801947e <_calloc_r+0x1e>
 8019472:	2600      	movs	r6, #0
 8019474:	4630      	mov	r0, r6
 8019476:	bd70      	pop	{r4, r5, r6, pc}
 8019478:	220c      	movs	r2, #12
 801947a:	6002      	str	r2, [r0, #0]
 801947c:	e7f9      	b.n	8019472 <_calloc_r+0x12>
 801947e:	462a      	mov	r2, r5
 8019480:	4621      	mov	r1, r4
 8019482:	f000 fbbf 	bl	8019c04 <memset>
 8019486:	e7f5      	b.n	8019474 <_calloc_r+0x14>

08019488 <getenv>:
 8019488:	b507      	push	{r0, r1, r2, lr}
 801948a:	4b04      	ldr	r3, [pc, #16]	@ (801949c <getenv+0x14>)
 801948c:	4601      	mov	r1, r0
 801948e:	aa01      	add	r2, sp, #4
 8019490:	6818      	ldr	r0, [r3, #0]
 8019492:	f000 f805 	bl	80194a0 <_findenv_r>
 8019496:	b003      	add	sp, #12
 8019498:	f85d fb04 	ldr.w	pc, [sp], #4
 801949c:	20000104 	.word	0x20000104

080194a0 <_findenv_r>:
 80194a0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80194a4:	f8df a06c 	ldr.w	sl, [pc, #108]	@ 8019514 <_findenv_r+0x74>
 80194a8:	4606      	mov	r6, r0
 80194aa:	4689      	mov	r9, r1
 80194ac:	4617      	mov	r7, r2
 80194ae:	f000 fcf5 	bl	8019e9c <__env_lock>
 80194b2:	f8da 4000 	ldr.w	r4, [sl]
 80194b6:	b134      	cbz	r4, 80194c6 <_findenv_r+0x26>
 80194b8:	464b      	mov	r3, r9
 80194ba:	4698      	mov	r8, r3
 80194bc:	f813 2b01 	ldrb.w	r2, [r3], #1
 80194c0:	b13a      	cbz	r2, 80194d2 <_findenv_r+0x32>
 80194c2:	2a3d      	cmp	r2, #61	@ 0x3d
 80194c4:	d1f9      	bne.n	80194ba <_findenv_r+0x1a>
 80194c6:	4630      	mov	r0, r6
 80194c8:	f000 fcee 	bl	8019ea8 <__env_unlock>
 80194cc:	2000      	movs	r0, #0
 80194ce:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80194d2:	eba8 0809 	sub.w	r8, r8, r9
 80194d6:	46a3      	mov	fp, r4
 80194d8:	f854 0b04 	ldr.w	r0, [r4], #4
 80194dc:	2800      	cmp	r0, #0
 80194de:	d0f2      	beq.n	80194c6 <_findenv_r+0x26>
 80194e0:	4642      	mov	r2, r8
 80194e2:	4649      	mov	r1, r9
 80194e4:	f000 fba3 	bl	8019c2e <strncmp>
 80194e8:	2800      	cmp	r0, #0
 80194ea:	d1f4      	bne.n	80194d6 <_findenv_r+0x36>
 80194ec:	f854 3c04 	ldr.w	r3, [r4, #-4]
 80194f0:	eb03 0508 	add.w	r5, r3, r8
 80194f4:	f813 3008 	ldrb.w	r3, [r3, r8]
 80194f8:	2b3d      	cmp	r3, #61	@ 0x3d
 80194fa:	d1ec      	bne.n	80194d6 <_findenv_r+0x36>
 80194fc:	f8da 3000 	ldr.w	r3, [sl]
 8019500:	ebab 0303 	sub.w	r3, fp, r3
 8019504:	109b      	asrs	r3, r3, #2
 8019506:	4630      	mov	r0, r6
 8019508:	603b      	str	r3, [r7, #0]
 801950a:	f000 fccd 	bl	8019ea8 <__env_unlock>
 801950e:	1c68      	adds	r0, r5, #1
 8019510:	e7dd      	b.n	80194ce <_findenv_r+0x2e>
 8019512:	bf00      	nop
 8019514:	2000003c 	.word	0x2000003c

08019518 <malloc>:
 8019518:	4b02      	ldr	r3, [pc, #8]	@ (8019524 <malloc+0xc>)
 801951a:	4601      	mov	r1, r0
 801951c:	6818      	ldr	r0, [r3, #0]
 801951e:	f000 b82d 	b.w	801957c <_malloc_r>
 8019522:	bf00      	nop
 8019524:	20000104 	.word	0x20000104

08019528 <free>:
 8019528:	4b02      	ldr	r3, [pc, #8]	@ (8019534 <free+0xc>)
 801952a:	4601      	mov	r1, r0
 801952c:	6818      	ldr	r0, [r3, #0]
 801952e:	f000 bcc1 	b.w	8019eb4 <_free_r>
 8019532:	bf00      	nop
 8019534:	20000104 	.word	0x20000104

08019538 <sbrk_aligned>:
 8019538:	b570      	push	{r4, r5, r6, lr}
 801953a:	4e0f      	ldr	r6, [pc, #60]	@ (8019578 <sbrk_aligned+0x40>)
 801953c:	460c      	mov	r4, r1
 801953e:	6831      	ldr	r1, [r6, #0]
 8019540:	4605      	mov	r5, r0
 8019542:	b911      	cbnz	r1, 801954a <sbrk_aligned+0x12>
 8019544:	f000 fc26 	bl	8019d94 <_sbrk_r>
 8019548:	6030      	str	r0, [r6, #0]
 801954a:	4621      	mov	r1, r4
 801954c:	4628      	mov	r0, r5
 801954e:	f000 fc21 	bl	8019d94 <_sbrk_r>
 8019552:	1c43      	adds	r3, r0, #1
 8019554:	d103      	bne.n	801955e <sbrk_aligned+0x26>
 8019556:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 801955a:	4620      	mov	r0, r4
 801955c:	bd70      	pop	{r4, r5, r6, pc}
 801955e:	1cc4      	adds	r4, r0, #3
 8019560:	f024 0403 	bic.w	r4, r4, #3
 8019564:	42a0      	cmp	r0, r4
 8019566:	d0f8      	beq.n	801955a <sbrk_aligned+0x22>
 8019568:	1a21      	subs	r1, r4, r0
 801956a:	4628      	mov	r0, r5
 801956c:	f000 fc12 	bl	8019d94 <_sbrk_r>
 8019570:	3001      	adds	r0, #1
 8019572:	d1f2      	bne.n	801955a <sbrk_aligned+0x22>
 8019574:	e7ef      	b.n	8019556 <sbrk_aligned+0x1e>
 8019576:	bf00      	nop
 8019578:	200076f4 	.word	0x200076f4

0801957c <_malloc_r>:
 801957c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8019580:	1ccd      	adds	r5, r1, #3
 8019582:	f025 0503 	bic.w	r5, r5, #3
 8019586:	3508      	adds	r5, #8
 8019588:	2d0c      	cmp	r5, #12
 801958a:	bf38      	it	cc
 801958c:	250c      	movcc	r5, #12
 801958e:	2d00      	cmp	r5, #0
 8019590:	4606      	mov	r6, r0
 8019592:	db01      	blt.n	8019598 <_malloc_r+0x1c>
 8019594:	42a9      	cmp	r1, r5
 8019596:	d904      	bls.n	80195a2 <_malloc_r+0x26>
 8019598:	230c      	movs	r3, #12
 801959a:	6033      	str	r3, [r6, #0]
 801959c:	2000      	movs	r0, #0
 801959e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80195a2:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8019678 <_malloc_r+0xfc>
 80195a6:	f000 f869 	bl	801967c <__malloc_lock>
 80195aa:	f8d8 3000 	ldr.w	r3, [r8]
 80195ae:	461c      	mov	r4, r3
 80195b0:	bb44      	cbnz	r4, 8019604 <_malloc_r+0x88>
 80195b2:	4629      	mov	r1, r5
 80195b4:	4630      	mov	r0, r6
 80195b6:	f7ff ffbf 	bl	8019538 <sbrk_aligned>
 80195ba:	1c43      	adds	r3, r0, #1
 80195bc:	4604      	mov	r4, r0
 80195be:	d158      	bne.n	8019672 <_malloc_r+0xf6>
 80195c0:	f8d8 4000 	ldr.w	r4, [r8]
 80195c4:	4627      	mov	r7, r4
 80195c6:	2f00      	cmp	r7, #0
 80195c8:	d143      	bne.n	8019652 <_malloc_r+0xd6>
 80195ca:	2c00      	cmp	r4, #0
 80195cc:	d04b      	beq.n	8019666 <_malloc_r+0xea>
 80195ce:	6823      	ldr	r3, [r4, #0]
 80195d0:	4639      	mov	r1, r7
 80195d2:	4630      	mov	r0, r6
 80195d4:	eb04 0903 	add.w	r9, r4, r3
 80195d8:	f000 fbdc 	bl	8019d94 <_sbrk_r>
 80195dc:	4581      	cmp	r9, r0
 80195de:	d142      	bne.n	8019666 <_malloc_r+0xea>
 80195e0:	6821      	ldr	r1, [r4, #0]
 80195e2:	1a6d      	subs	r5, r5, r1
 80195e4:	4629      	mov	r1, r5
 80195e6:	4630      	mov	r0, r6
 80195e8:	f7ff ffa6 	bl	8019538 <sbrk_aligned>
 80195ec:	3001      	adds	r0, #1
 80195ee:	d03a      	beq.n	8019666 <_malloc_r+0xea>
 80195f0:	6823      	ldr	r3, [r4, #0]
 80195f2:	442b      	add	r3, r5
 80195f4:	6023      	str	r3, [r4, #0]
 80195f6:	f8d8 3000 	ldr.w	r3, [r8]
 80195fa:	685a      	ldr	r2, [r3, #4]
 80195fc:	bb62      	cbnz	r2, 8019658 <_malloc_r+0xdc>
 80195fe:	f8c8 7000 	str.w	r7, [r8]
 8019602:	e00f      	b.n	8019624 <_malloc_r+0xa8>
 8019604:	6822      	ldr	r2, [r4, #0]
 8019606:	1b52      	subs	r2, r2, r5
 8019608:	d420      	bmi.n	801964c <_malloc_r+0xd0>
 801960a:	2a0b      	cmp	r2, #11
 801960c:	d917      	bls.n	801963e <_malloc_r+0xc2>
 801960e:	1961      	adds	r1, r4, r5
 8019610:	42a3      	cmp	r3, r4
 8019612:	6025      	str	r5, [r4, #0]
 8019614:	bf18      	it	ne
 8019616:	6059      	strne	r1, [r3, #4]
 8019618:	6863      	ldr	r3, [r4, #4]
 801961a:	bf08      	it	eq
 801961c:	f8c8 1000 	streq.w	r1, [r8]
 8019620:	5162      	str	r2, [r4, r5]
 8019622:	604b      	str	r3, [r1, #4]
 8019624:	4630      	mov	r0, r6
 8019626:	f000 f82f 	bl	8019688 <__malloc_unlock>
 801962a:	f104 000b 	add.w	r0, r4, #11
 801962e:	1d23      	adds	r3, r4, #4
 8019630:	f020 0007 	bic.w	r0, r0, #7
 8019634:	1ac2      	subs	r2, r0, r3
 8019636:	bf1c      	itt	ne
 8019638:	1a1b      	subne	r3, r3, r0
 801963a:	50a3      	strne	r3, [r4, r2]
 801963c:	e7af      	b.n	801959e <_malloc_r+0x22>
 801963e:	6862      	ldr	r2, [r4, #4]
 8019640:	42a3      	cmp	r3, r4
 8019642:	bf0c      	ite	eq
 8019644:	f8c8 2000 	streq.w	r2, [r8]
 8019648:	605a      	strne	r2, [r3, #4]
 801964a:	e7eb      	b.n	8019624 <_malloc_r+0xa8>
 801964c:	4623      	mov	r3, r4
 801964e:	6864      	ldr	r4, [r4, #4]
 8019650:	e7ae      	b.n	80195b0 <_malloc_r+0x34>
 8019652:	463c      	mov	r4, r7
 8019654:	687f      	ldr	r7, [r7, #4]
 8019656:	e7b6      	b.n	80195c6 <_malloc_r+0x4a>
 8019658:	461a      	mov	r2, r3
 801965a:	685b      	ldr	r3, [r3, #4]
 801965c:	42a3      	cmp	r3, r4
 801965e:	d1fb      	bne.n	8019658 <_malloc_r+0xdc>
 8019660:	2300      	movs	r3, #0
 8019662:	6053      	str	r3, [r2, #4]
 8019664:	e7de      	b.n	8019624 <_malloc_r+0xa8>
 8019666:	230c      	movs	r3, #12
 8019668:	6033      	str	r3, [r6, #0]
 801966a:	4630      	mov	r0, r6
 801966c:	f000 f80c 	bl	8019688 <__malloc_unlock>
 8019670:	e794      	b.n	801959c <_malloc_r+0x20>
 8019672:	6005      	str	r5, [r0, #0]
 8019674:	e7d6      	b.n	8019624 <_malloc_r+0xa8>
 8019676:	bf00      	nop
 8019678:	200076f8 	.word	0x200076f8

0801967c <__malloc_lock>:
 801967c:	4801      	ldr	r0, [pc, #4]	@ (8019684 <__malloc_lock+0x8>)
 801967e:	f000 bbd6 	b.w	8019e2e <__retarget_lock_acquire_recursive>
 8019682:	bf00      	nop
 8019684:	2000783d 	.word	0x2000783d

08019688 <__malloc_unlock>:
 8019688:	4801      	ldr	r0, [pc, #4]	@ (8019690 <__malloc_unlock+0x8>)
 801968a:	f000 bbd1 	b.w	8019e30 <__retarget_lock_release_recursive>
 801968e:	bf00      	nop
 8019690:	2000783d 	.word	0x2000783d

08019694 <srand>:
 8019694:	b538      	push	{r3, r4, r5, lr}
 8019696:	4b10      	ldr	r3, [pc, #64]	@ (80196d8 <srand+0x44>)
 8019698:	681d      	ldr	r5, [r3, #0]
 801969a:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 801969c:	4604      	mov	r4, r0
 801969e:	b9b3      	cbnz	r3, 80196ce <srand+0x3a>
 80196a0:	2018      	movs	r0, #24
 80196a2:	f7ff ff39 	bl	8019518 <malloc>
 80196a6:	4602      	mov	r2, r0
 80196a8:	6328      	str	r0, [r5, #48]	@ 0x30
 80196aa:	b920      	cbnz	r0, 80196b6 <srand+0x22>
 80196ac:	4b0b      	ldr	r3, [pc, #44]	@ (80196dc <srand+0x48>)
 80196ae:	480c      	ldr	r0, [pc, #48]	@ (80196e0 <srand+0x4c>)
 80196b0:	2146      	movs	r1, #70	@ 0x46
 80196b2:	f000 fbd5 	bl	8019e60 <__assert_func>
 80196b6:	490b      	ldr	r1, [pc, #44]	@ (80196e4 <srand+0x50>)
 80196b8:	4b0b      	ldr	r3, [pc, #44]	@ (80196e8 <srand+0x54>)
 80196ba:	e9c0 1300 	strd	r1, r3, [r0]
 80196be:	4b0b      	ldr	r3, [pc, #44]	@ (80196ec <srand+0x58>)
 80196c0:	6083      	str	r3, [r0, #8]
 80196c2:	230b      	movs	r3, #11
 80196c4:	8183      	strh	r3, [r0, #12]
 80196c6:	2100      	movs	r1, #0
 80196c8:	2001      	movs	r0, #1
 80196ca:	e9c2 0104 	strd	r0, r1, [r2, #16]
 80196ce:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 80196d0:	2200      	movs	r2, #0
 80196d2:	611c      	str	r4, [r3, #16]
 80196d4:	615a      	str	r2, [r3, #20]
 80196d6:	bd38      	pop	{r3, r4, r5, pc}
 80196d8:	20000104 	.word	0x20000104
 80196dc:	0801b740 	.word	0x0801b740
 80196e0:	0801b757 	.word	0x0801b757
 80196e4:	abcd330e 	.word	0xabcd330e
 80196e8:	e66d1234 	.word	0xe66d1234
 80196ec:	0005deec 	.word	0x0005deec

080196f0 <rand>:
 80196f0:	4b16      	ldr	r3, [pc, #88]	@ (801974c <rand+0x5c>)
 80196f2:	b510      	push	{r4, lr}
 80196f4:	681c      	ldr	r4, [r3, #0]
 80196f6:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80196f8:	b9b3      	cbnz	r3, 8019728 <rand+0x38>
 80196fa:	2018      	movs	r0, #24
 80196fc:	f7ff ff0c 	bl	8019518 <malloc>
 8019700:	4602      	mov	r2, r0
 8019702:	6320      	str	r0, [r4, #48]	@ 0x30
 8019704:	b920      	cbnz	r0, 8019710 <rand+0x20>
 8019706:	4b12      	ldr	r3, [pc, #72]	@ (8019750 <rand+0x60>)
 8019708:	4812      	ldr	r0, [pc, #72]	@ (8019754 <rand+0x64>)
 801970a:	2152      	movs	r1, #82	@ 0x52
 801970c:	f000 fba8 	bl	8019e60 <__assert_func>
 8019710:	4911      	ldr	r1, [pc, #68]	@ (8019758 <rand+0x68>)
 8019712:	4b12      	ldr	r3, [pc, #72]	@ (801975c <rand+0x6c>)
 8019714:	e9c0 1300 	strd	r1, r3, [r0]
 8019718:	4b11      	ldr	r3, [pc, #68]	@ (8019760 <rand+0x70>)
 801971a:	6083      	str	r3, [r0, #8]
 801971c:	230b      	movs	r3, #11
 801971e:	8183      	strh	r3, [r0, #12]
 8019720:	2100      	movs	r1, #0
 8019722:	2001      	movs	r0, #1
 8019724:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8019728:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 801972a:	480e      	ldr	r0, [pc, #56]	@ (8019764 <rand+0x74>)
 801972c:	690b      	ldr	r3, [r1, #16]
 801972e:	694c      	ldr	r4, [r1, #20]
 8019730:	4a0d      	ldr	r2, [pc, #52]	@ (8019768 <rand+0x78>)
 8019732:	4358      	muls	r0, r3
 8019734:	fb02 0004 	mla	r0, r2, r4, r0
 8019738:	fba3 3202 	umull	r3, r2, r3, r2
 801973c:	3301      	adds	r3, #1
 801973e:	eb40 0002 	adc.w	r0, r0, r2
 8019742:	e9c1 3004 	strd	r3, r0, [r1, #16]
 8019746:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 801974a:	bd10      	pop	{r4, pc}
 801974c:	20000104 	.word	0x20000104
 8019750:	0801b740 	.word	0x0801b740
 8019754:	0801b757 	.word	0x0801b757
 8019758:	abcd330e 	.word	0xabcd330e
 801975c:	e66d1234 	.word	0xe66d1234
 8019760:	0005deec 	.word	0x0005deec
 8019764:	5851f42d 	.word	0x5851f42d
 8019768:	4c957f2d 	.word	0x4c957f2d

0801976c <realloc>:
 801976c:	4b02      	ldr	r3, [pc, #8]	@ (8019778 <realloc+0xc>)
 801976e:	460a      	mov	r2, r1
 8019770:	4601      	mov	r1, r0
 8019772:	6818      	ldr	r0, [r3, #0]
 8019774:	f000 b802 	b.w	801977c <_realloc_r>
 8019778:	20000104 	.word	0x20000104

0801977c <_realloc_r>:
 801977c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019780:	4680      	mov	r8, r0
 8019782:	4615      	mov	r5, r2
 8019784:	460c      	mov	r4, r1
 8019786:	b921      	cbnz	r1, 8019792 <_realloc_r+0x16>
 8019788:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801978c:	4611      	mov	r1, r2
 801978e:	f7ff bef5 	b.w	801957c <_malloc_r>
 8019792:	b92a      	cbnz	r2, 80197a0 <_realloc_r+0x24>
 8019794:	f000 fb8e 	bl	8019eb4 <_free_r>
 8019798:	2400      	movs	r4, #0
 801979a:	4620      	mov	r0, r4
 801979c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80197a0:	f000 fbd2 	bl	8019f48 <_malloc_usable_size_r>
 80197a4:	4285      	cmp	r5, r0
 80197a6:	4606      	mov	r6, r0
 80197a8:	d802      	bhi.n	80197b0 <_realloc_r+0x34>
 80197aa:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 80197ae:	d8f4      	bhi.n	801979a <_realloc_r+0x1e>
 80197b0:	4629      	mov	r1, r5
 80197b2:	4640      	mov	r0, r8
 80197b4:	f7ff fee2 	bl	801957c <_malloc_r>
 80197b8:	4607      	mov	r7, r0
 80197ba:	2800      	cmp	r0, #0
 80197bc:	d0ec      	beq.n	8019798 <_realloc_r+0x1c>
 80197be:	42b5      	cmp	r5, r6
 80197c0:	462a      	mov	r2, r5
 80197c2:	4621      	mov	r1, r4
 80197c4:	bf28      	it	cs
 80197c6:	4632      	movcs	r2, r6
 80197c8:	f000 fb3b 	bl	8019e42 <memcpy>
 80197cc:	4621      	mov	r1, r4
 80197ce:	4640      	mov	r0, r8
 80197d0:	f000 fb70 	bl	8019eb4 <_free_r>
 80197d4:	463c      	mov	r4, r7
 80197d6:	e7e0      	b.n	801979a <_realloc_r+0x1e>

080197d8 <_strtoul_l.constprop.0>:
 80197d8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80197dc:	4e34      	ldr	r6, [pc, #208]	@ (80198b0 <_strtoul_l.constprop.0+0xd8>)
 80197de:	4686      	mov	lr, r0
 80197e0:	460d      	mov	r5, r1
 80197e2:	4628      	mov	r0, r5
 80197e4:	f815 4b01 	ldrb.w	r4, [r5], #1
 80197e8:	5d37      	ldrb	r7, [r6, r4]
 80197ea:	f017 0708 	ands.w	r7, r7, #8
 80197ee:	d1f8      	bne.n	80197e2 <_strtoul_l.constprop.0+0xa>
 80197f0:	2c2d      	cmp	r4, #45	@ 0x2d
 80197f2:	d12f      	bne.n	8019854 <_strtoul_l.constprop.0+0x7c>
 80197f4:	782c      	ldrb	r4, [r5, #0]
 80197f6:	2701      	movs	r7, #1
 80197f8:	1c85      	adds	r5, r0, #2
 80197fa:	f033 0010 	bics.w	r0, r3, #16
 80197fe:	d109      	bne.n	8019814 <_strtoul_l.constprop.0+0x3c>
 8019800:	2c30      	cmp	r4, #48	@ 0x30
 8019802:	d12c      	bne.n	801985e <_strtoul_l.constprop.0+0x86>
 8019804:	7828      	ldrb	r0, [r5, #0]
 8019806:	f000 00df 	and.w	r0, r0, #223	@ 0xdf
 801980a:	2858      	cmp	r0, #88	@ 0x58
 801980c:	d127      	bne.n	801985e <_strtoul_l.constprop.0+0x86>
 801980e:	786c      	ldrb	r4, [r5, #1]
 8019810:	2310      	movs	r3, #16
 8019812:	3502      	adds	r5, #2
 8019814:	f04f 38ff 	mov.w	r8, #4294967295	@ 0xffffffff
 8019818:	2600      	movs	r6, #0
 801981a:	fbb8 f8f3 	udiv	r8, r8, r3
 801981e:	fb03 f908 	mul.w	r9, r3, r8
 8019822:	ea6f 0909 	mvn.w	r9, r9
 8019826:	4630      	mov	r0, r6
 8019828:	f1a4 0c30 	sub.w	ip, r4, #48	@ 0x30
 801982c:	f1bc 0f09 	cmp.w	ip, #9
 8019830:	d81c      	bhi.n	801986c <_strtoul_l.constprop.0+0x94>
 8019832:	4664      	mov	r4, ip
 8019834:	42a3      	cmp	r3, r4
 8019836:	dd2a      	ble.n	801988e <_strtoul_l.constprop.0+0xb6>
 8019838:	f1b6 3fff 	cmp.w	r6, #4294967295	@ 0xffffffff
 801983c:	d007      	beq.n	801984e <_strtoul_l.constprop.0+0x76>
 801983e:	4580      	cmp	r8, r0
 8019840:	d322      	bcc.n	8019888 <_strtoul_l.constprop.0+0xb0>
 8019842:	d101      	bne.n	8019848 <_strtoul_l.constprop.0+0x70>
 8019844:	45a1      	cmp	r9, r4
 8019846:	db1f      	blt.n	8019888 <_strtoul_l.constprop.0+0xb0>
 8019848:	fb00 4003 	mla	r0, r0, r3, r4
 801984c:	2601      	movs	r6, #1
 801984e:	f815 4b01 	ldrb.w	r4, [r5], #1
 8019852:	e7e9      	b.n	8019828 <_strtoul_l.constprop.0+0x50>
 8019854:	2c2b      	cmp	r4, #43	@ 0x2b
 8019856:	bf04      	itt	eq
 8019858:	782c      	ldrbeq	r4, [r5, #0]
 801985a:	1c85      	addeq	r5, r0, #2
 801985c:	e7cd      	b.n	80197fa <_strtoul_l.constprop.0+0x22>
 801985e:	2b00      	cmp	r3, #0
 8019860:	d1d8      	bne.n	8019814 <_strtoul_l.constprop.0+0x3c>
 8019862:	2c30      	cmp	r4, #48	@ 0x30
 8019864:	bf0c      	ite	eq
 8019866:	2308      	moveq	r3, #8
 8019868:	230a      	movne	r3, #10
 801986a:	e7d3      	b.n	8019814 <_strtoul_l.constprop.0+0x3c>
 801986c:	f1a4 0c41 	sub.w	ip, r4, #65	@ 0x41
 8019870:	f1bc 0f19 	cmp.w	ip, #25
 8019874:	d801      	bhi.n	801987a <_strtoul_l.constprop.0+0xa2>
 8019876:	3c37      	subs	r4, #55	@ 0x37
 8019878:	e7dc      	b.n	8019834 <_strtoul_l.constprop.0+0x5c>
 801987a:	f1a4 0c61 	sub.w	ip, r4, #97	@ 0x61
 801987e:	f1bc 0f19 	cmp.w	ip, #25
 8019882:	d804      	bhi.n	801988e <_strtoul_l.constprop.0+0xb6>
 8019884:	3c57      	subs	r4, #87	@ 0x57
 8019886:	e7d5      	b.n	8019834 <_strtoul_l.constprop.0+0x5c>
 8019888:	f04f 36ff 	mov.w	r6, #4294967295	@ 0xffffffff
 801988c:	e7df      	b.n	801984e <_strtoul_l.constprop.0+0x76>
 801988e:	1c73      	adds	r3, r6, #1
 8019890:	d106      	bne.n	80198a0 <_strtoul_l.constprop.0+0xc8>
 8019892:	2322      	movs	r3, #34	@ 0x22
 8019894:	f8ce 3000 	str.w	r3, [lr]
 8019898:	4630      	mov	r0, r6
 801989a:	b932      	cbnz	r2, 80198aa <_strtoul_l.constprop.0+0xd2>
 801989c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80198a0:	b107      	cbz	r7, 80198a4 <_strtoul_l.constprop.0+0xcc>
 80198a2:	4240      	negs	r0, r0
 80198a4:	2a00      	cmp	r2, #0
 80198a6:	d0f9      	beq.n	801989c <_strtoul_l.constprop.0+0xc4>
 80198a8:	b106      	cbz	r6, 80198ac <_strtoul_l.constprop.0+0xd4>
 80198aa:	1e69      	subs	r1, r5, #1
 80198ac:	6011      	str	r1, [r2, #0]
 80198ae:	e7f5      	b.n	801989c <_strtoul_l.constprop.0+0xc4>
 80198b0:	0801b7b0 	.word	0x0801b7b0

080198b4 <strtoul>:
 80198b4:	4613      	mov	r3, r2
 80198b6:	460a      	mov	r2, r1
 80198b8:	4601      	mov	r1, r0
 80198ba:	4802      	ldr	r0, [pc, #8]	@ (80198c4 <strtoul+0x10>)
 80198bc:	6800      	ldr	r0, [r0, #0]
 80198be:	f7ff bf8b 	b.w	80197d8 <_strtoul_l.constprop.0>
 80198c2:	bf00      	nop
 80198c4:	20000104 	.word	0x20000104

080198c8 <std>:
 80198c8:	2300      	movs	r3, #0
 80198ca:	b510      	push	{r4, lr}
 80198cc:	4604      	mov	r4, r0
 80198ce:	e9c0 3300 	strd	r3, r3, [r0]
 80198d2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80198d6:	6083      	str	r3, [r0, #8]
 80198d8:	8181      	strh	r1, [r0, #12]
 80198da:	6643      	str	r3, [r0, #100]	@ 0x64
 80198dc:	81c2      	strh	r2, [r0, #14]
 80198de:	6183      	str	r3, [r0, #24]
 80198e0:	4619      	mov	r1, r3
 80198e2:	2208      	movs	r2, #8
 80198e4:	305c      	adds	r0, #92	@ 0x5c
 80198e6:	f000 f98d 	bl	8019c04 <memset>
 80198ea:	4b0d      	ldr	r3, [pc, #52]	@ (8019920 <std+0x58>)
 80198ec:	6263      	str	r3, [r4, #36]	@ 0x24
 80198ee:	4b0d      	ldr	r3, [pc, #52]	@ (8019924 <std+0x5c>)
 80198f0:	62a3      	str	r3, [r4, #40]	@ 0x28
 80198f2:	4b0d      	ldr	r3, [pc, #52]	@ (8019928 <std+0x60>)
 80198f4:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80198f6:	4b0d      	ldr	r3, [pc, #52]	@ (801992c <std+0x64>)
 80198f8:	6323      	str	r3, [r4, #48]	@ 0x30
 80198fa:	4b0d      	ldr	r3, [pc, #52]	@ (8019930 <std+0x68>)
 80198fc:	6224      	str	r4, [r4, #32]
 80198fe:	429c      	cmp	r4, r3
 8019900:	d006      	beq.n	8019910 <std+0x48>
 8019902:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8019906:	4294      	cmp	r4, r2
 8019908:	d002      	beq.n	8019910 <std+0x48>
 801990a:	33d0      	adds	r3, #208	@ 0xd0
 801990c:	429c      	cmp	r4, r3
 801990e:	d105      	bne.n	801991c <std+0x54>
 8019910:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8019914:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8019918:	f000 ba88 	b.w	8019e2c <__retarget_lock_init_recursive>
 801991c:	bd10      	pop	{r4, pc}
 801991e:	bf00      	nop
 8019920:	08019ad9 	.word	0x08019ad9
 8019924:	08019afb 	.word	0x08019afb
 8019928:	08019b33 	.word	0x08019b33
 801992c:	08019b57 	.word	0x08019b57
 8019930:	200076fc 	.word	0x200076fc

08019934 <stdio_exit_handler>:
 8019934:	4a02      	ldr	r2, [pc, #8]	@ (8019940 <stdio_exit_handler+0xc>)
 8019936:	4903      	ldr	r1, [pc, #12]	@ (8019944 <stdio_exit_handler+0x10>)
 8019938:	4803      	ldr	r0, [pc, #12]	@ (8019948 <stdio_exit_handler+0x14>)
 801993a:	f000 b869 	b.w	8019a10 <_fwalk_sglue>
 801993e:	bf00      	nop
 8019940:	200000f8 	.word	0x200000f8
 8019944:	0801a8b1 	.word	0x0801a8b1
 8019948:	20000108 	.word	0x20000108

0801994c <cleanup_stdio>:
 801994c:	6841      	ldr	r1, [r0, #4]
 801994e:	4b0c      	ldr	r3, [pc, #48]	@ (8019980 <cleanup_stdio+0x34>)
 8019950:	4299      	cmp	r1, r3
 8019952:	b510      	push	{r4, lr}
 8019954:	4604      	mov	r4, r0
 8019956:	d001      	beq.n	801995c <cleanup_stdio+0x10>
 8019958:	f000 ffaa 	bl	801a8b0 <_fflush_r>
 801995c:	68a1      	ldr	r1, [r4, #8]
 801995e:	4b09      	ldr	r3, [pc, #36]	@ (8019984 <cleanup_stdio+0x38>)
 8019960:	4299      	cmp	r1, r3
 8019962:	d002      	beq.n	801996a <cleanup_stdio+0x1e>
 8019964:	4620      	mov	r0, r4
 8019966:	f000 ffa3 	bl	801a8b0 <_fflush_r>
 801996a:	68e1      	ldr	r1, [r4, #12]
 801996c:	4b06      	ldr	r3, [pc, #24]	@ (8019988 <cleanup_stdio+0x3c>)
 801996e:	4299      	cmp	r1, r3
 8019970:	d004      	beq.n	801997c <cleanup_stdio+0x30>
 8019972:	4620      	mov	r0, r4
 8019974:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8019978:	f000 bf9a 	b.w	801a8b0 <_fflush_r>
 801997c:	bd10      	pop	{r4, pc}
 801997e:	bf00      	nop
 8019980:	200076fc 	.word	0x200076fc
 8019984:	20007764 	.word	0x20007764
 8019988:	200077cc 	.word	0x200077cc

0801998c <global_stdio_init.part.0>:
 801998c:	b510      	push	{r4, lr}
 801998e:	4b0b      	ldr	r3, [pc, #44]	@ (80199bc <global_stdio_init.part.0+0x30>)
 8019990:	4c0b      	ldr	r4, [pc, #44]	@ (80199c0 <global_stdio_init.part.0+0x34>)
 8019992:	4a0c      	ldr	r2, [pc, #48]	@ (80199c4 <global_stdio_init.part.0+0x38>)
 8019994:	601a      	str	r2, [r3, #0]
 8019996:	4620      	mov	r0, r4
 8019998:	2200      	movs	r2, #0
 801999a:	2104      	movs	r1, #4
 801999c:	f7ff ff94 	bl	80198c8 <std>
 80199a0:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80199a4:	2201      	movs	r2, #1
 80199a6:	2109      	movs	r1, #9
 80199a8:	f7ff ff8e 	bl	80198c8 <std>
 80199ac:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80199b0:	2202      	movs	r2, #2
 80199b2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80199b6:	2112      	movs	r1, #18
 80199b8:	f7ff bf86 	b.w	80198c8 <std>
 80199bc:	20007834 	.word	0x20007834
 80199c0:	200076fc 	.word	0x200076fc
 80199c4:	08019935 	.word	0x08019935

080199c8 <__sfp_lock_acquire>:
 80199c8:	4801      	ldr	r0, [pc, #4]	@ (80199d0 <__sfp_lock_acquire+0x8>)
 80199ca:	f000 ba30 	b.w	8019e2e <__retarget_lock_acquire_recursive>
 80199ce:	bf00      	nop
 80199d0:	2000783e 	.word	0x2000783e

080199d4 <__sfp_lock_release>:
 80199d4:	4801      	ldr	r0, [pc, #4]	@ (80199dc <__sfp_lock_release+0x8>)
 80199d6:	f000 ba2b 	b.w	8019e30 <__retarget_lock_release_recursive>
 80199da:	bf00      	nop
 80199dc:	2000783e 	.word	0x2000783e

080199e0 <__sinit>:
 80199e0:	b510      	push	{r4, lr}
 80199e2:	4604      	mov	r4, r0
 80199e4:	f7ff fff0 	bl	80199c8 <__sfp_lock_acquire>
 80199e8:	6a23      	ldr	r3, [r4, #32]
 80199ea:	b11b      	cbz	r3, 80199f4 <__sinit+0x14>
 80199ec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80199f0:	f7ff bff0 	b.w	80199d4 <__sfp_lock_release>
 80199f4:	4b04      	ldr	r3, [pc, #16]	@ (8019a08 <__sinit+0x28>)
 80199f6:	6223      	str	r3, [r4, #32]
 80199f8:	4b04      	ldr	r3, [pc, #16]	@ (8019a0c <__sinit+0x2c>)
 80199fa:	681b      	ldr	r3, [r3, #0]
 80199fc:	2b00      	cmp	r3, #0
 80199fe:	d1f5      	bne.n	80199ec <__sinit+0xc>
 8019a00:	f7ff ffc4 	bl	801998c <global_stdio_init.part.0>
 8019a04:	e7f2      	b.n	80199ec <__sinit+0xc>
 8019a06:	bf00      	nop
 8019a08:	0801994d 	.word	0x0801994d
 8019a0c:	20007834 	.word	0x20007834

08019a10 <_fwalk_sglue>:
 8019a10:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8019a14:	4607      	mov	r7, r0
 8019a16:	4688      	mov	r8, r1
 8019a18:	4614      	mov	r4, r2
 8019a1a:	2600      	movs	r6, #0
 8019a1c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8019a20:	f1b9 0901 	subs.w	r9, r9, #1
 8019a24:	d505      	bpl.n	8019a32 <_fwalk_sglue+0x22>
 8019a26:	6824      	ldr	r4, [r4, #0]
 8019a28:	2c00      	cmp	r4, #0
 8019a2a:	d1f7      	bne.n	8019a1c <_fwalk_sglue+0xc>
 8019a2c:	4630      	mov	r0, r6
 8019a2e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8019a32:	89ab      	ldrh	r3, [r5, #12]
 8019a34:	2b01      	cmp	r3, #1
 8019a36:	d907      	bls.n	8019a48 <_fwalk_sglue+0x38>
 8019a38:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8019a3c:	3301      	adds	r3, #1
 8019a3e:	d003      	beq.n	8019a48 <_fwalk_sglue+0x38>
 8019a40:	4629      	mov	r1, r5
 8019a42:	4638      	mov	r0, r7
 8019a44:	47c0      	blx	r8
 8019a46:	4306      	orrs	r6, r0
 8019a48:	3568      	adds	r5, #104	@ 0x68
 8019a4a:	e7e9      	b.n	8019a20 <_fwalk_sglue+0x10>

08019a4c <iprintf>:
 8019a4c:	b40f      	push	{r0, r1, r2, r3}
 8019a4e:	b507      	push	{r0, r1, r2, lr}
 8019a50:	4906      	ldr	r1, [pc, #24]	@ (8019a6c <iprintf+0x20>)
 8019a52:	ab04      	add	r3, sp, #16
 8019a54:	6808      	ldr	r0, [r1, #0]
 8019a56:	f853 2b04 	ldr.w	r2, [r3], #4
 8019a5a:	6881      	ldr	r1, [r0, #8]
 8019a5c:	9301      	str	r3, [sp, #4]
 8019a5e:	f000 fbfd 	bl	801a25c <_vfiprintf_r>
 8019a62:	b003      	add	sp, #12
 8019a64:	f85d eb04 	ldr.w	lr, [sp], #4
 8019a68:	b004      	add	sp, #16
 8019a6a:	4770      	bx	lr
 8019a6c:	20000104 	.word	0x20000104

08019a70 <sniprintf>:
 8019a70:	b40c      	push	{r2, r3}
 8019a72:	b530      	push	{r4, r5, lr}
 8019a74:	4b17      	ldr	r3, [pc, #92]	@ (8019ad4 <sniprintf+0x64>)
 8019a76:	1e0c      	subs	r4, r1, #0
 8019a78:	681d      	ldr	r5, [r3, #0]
 8019a7a:	b09d      	sub	sp, #116	@ 0x74
 8019a7c:	da08      	bge.n	8019a90 <sniprintf+0x20>
 8019a7e:	238b      	movs	r3, #139	@ 0x8b
 8019a80:	602b      	str	r3, [r5, #0]
 8019a82:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8019a86:	b01d      	add	sp, #116	@ 0x74
 8019a88:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8019a8c:	b002      	add	sp, #8
 8019a8e:	4770      	bx	lr
 8019a90:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8019a94:	f8ad 3014 	strh.w	r3, [sp, #20]
 8019a98:	bf14      	ite	ne
 8019a9a:	f104 33ff 	addne.w	r3, r4, #4294967295	@ 0xffffffff
 8019a9e:	4623      	moveq	r3, r4
 8019aa0:	9304      	str	r3, [sp, #16]
 8019aa2:	9307      	str	r3, [sp, #28]
 8019aa4:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8019aa8:	9002      	str	r0, [sp, #8]
 8019aaa:	9006      	str	r0, [sp, #24]
 8019aac:	f8ad 3016 	strh.w	r3, [sp, #22]
 8019ab0:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8019ab2:	ab21      	add	r3, sp, #132	@ 0x84
 8019ab4:	a902      	add	r1, sp, #8
 8019ab6:	4628      	mov	r0, r5
 8019ab8:	9301      	str	r3, [sp, #4]
 8019aba:	f000 faa9 	bl	801a010 <_svfiprintf_r>
 8019abe:	1c43      	adds	r3, r0, #1
 8019ac0:	bfbc      	itt	lt
 8019ac2:	238b      	movlt	r3, #139	@ 0x8b
 8019ac4:	602b      	strlt	r3, [r5, #0]
 8019ac6:	2c00      	cmp	r4, #0
 8019ac8:	d0dd      	beq.n	8019a86 <sniprintf+0x16>
 8019aca:	9b02      	ldr	r3, [sp, #8]
 8019acc:	2200      	movs	r2, #0
 8019ace:	701a      	strb	r2, [r3, #0]
 8019ad0:	e7d9      	b.n	8019a86 <sniprintf+0x16>
 8019ad2:	bf00      	nop
 8019ad4:	20000104 	.word	0x20000104

08019ad8 <__sread>:
 8019ad8:	b510      	push	{r4, lr}
 8019ada:	460c      	mov	r4, r1
 8019adc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8019ae0:	f000 f946 	bl	8019d70 <_read_r>
 8019ae4:	2800      	cmp	r0, #0
 8019ae6:	bfab      	itete	ge
 8019ae8:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8019aea:	89a3      	ldrhlt	r3, [r4, #12]
 8019aec:	181b      	addge	r3, r3, r0
 8019aee:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8019af2:	bfac      	ite	ge
 8019af4:	6563      	strge	r3, [r4, #84]	@ 0x54
 8019af6:	81a3      	strhlt	r3, [r4, #12]
 8019af8:	bd10      	pop	{r4, pc}

08019afa <__swrite>:
 8019afa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019afe:	461f      	mov	r7, r3
 8019b00:	898b      	ldrh	r3, [r1, #12]
 8019b02:	05db      	lsls	r3, r3, #23
 8019b04:	4605      	mov	r5, r0
 8019b06:	460c      	mov	r4, r1
 8019b08:	4616      	mov	r6, r2
 8019b0a:	d505      	bpl.n	8019b18 <__swrite+0x1e>
 8019b0c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8019b10:	2302      	movs	r3, #2
 8019b12:	2200      	movs	r2, #0
 8019b14:	f000 f91a 	bl	8019d4c <_lseek_r>
 8019b18:	89a3      	ldrh	r3, [r4, #12]
 8019b1a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8019b1e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8019b22:	81a3      	strh	r3, [r4, #12]
 8019b24:	4632      	mov	r2, r6
 8019b26:	463b      	mov	r3, r7
 8019b28:	4628      	mov	r0, r5
 8019b2a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8019b2e:	f000 b941 	b.w	8019db4 <_write_r>

08019b32 <__sseek>:
 8019b32:	b510      	push	{r4, lr}
 8019b34:	460c      	mov	r4, r1
 8019b36:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8019b3a:	f000 f907 	bl	8019d4c <_lseek_r>
 8019b3e:	1c43      	adds	r3, r0, #1
 8019b40:	89a3      	ldrh	r3, [r4, #12]
 8019b42:	bf15      	itete	ne
 8019b44:	6560      	strne	r0, [r4, #84]	@ 0x54
 8019b46:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8019b4a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8019b4e:	81a3      	strheq	r3, [r4, #12]
 8019b50:	bf18      	it	ne
 8019b52:	81a3      	strhne	r3, [r4, #12]
 8019b54:	bd10      	pop	{r4, pc}

08019b56 <__sclose>:
 8019b56:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8019b5a:	f000 b891 	b.w	8019c80 <_close_r>

08019b5e <_vsniprintf_r>:
 8019b5e:	b530      	push	{r4, r5, lr}
 8019b60:	4614      	mov	r4, r2
 8019b62:	2c00      	cmp	r4, #0
 8019b64:	b09b      	sub	sp, #108	@ 0x6c
 8019b66:	4605      	mov	r5, r0
 8019b68:	461a      	mov	r2, r3
 8019b6a:	da05      	bge.n	8019b78 <_vsniprintf_r+0x1a>
 8019b6c:	238b      	movs	r3, #139	@ 0x8b
 8019b6e:	6003      	str	r3, [r0, #0]
 8019b70:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8019b74:	b01b      	add	sp, #108	@ 0x6c
 8019b76:	bd30      	pop	{r4, r5, pc}
 8019b78:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8019b7c:	f8ad 300c 	strh.w	r3, [sp, #12]
 8019b80:	bf14      	ite	ne
 8019b82:	f104 33ff 	addne.w	r3, r4, #4294967295	@ 0xffffffff
 8019b86:	4623      	moveq	r3, r4
 8019b88:	9302      	str	r3, [sp, #8]
 8019b8a:	9305      	str	r3, [sp, #20]
 8019b8c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8019b90:	9100      	str	r1, [sp, #0]
 8019b92:	9104      	str	r1, [sp, #16]
 8019b94:	f8ad 300e 	strh.w	r3, [sp, #14]
 8019b98:	4669      	mov	r1, sp
 8019b9a:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 8019b9c:	f000 fa38 	bl	801a010 <_svfiprintf_r>
 8019ba0:	1c43      	adds	r3, r0, #1
 8019ba2:	bfbc      	itt	lt
 8019ba4:	238b      	movlt	r3, #139	@ 0x8b
 8019ba6:	602b      	strlt	r3, [r5, #0]
 8019ba8:	2c00      	cmp	r4, #0
 8019baa:	d0e3      	beq.n	8019b74 <_vsniprintf_r+0x16>
 8019bac:	9b00      	ldr	r3, [sp, #0]
 8019bae:	2200      	movs	r2, #0
 8019bb0:	701a      	strb	r2, [r3, #0]
 8019bb2:	e7df      	b.n	8019b74 <_vsniprintf_r+0x16>

08019bb4 <vsniprintf>:
 8019bb4:	b507      	push	{r0, r1, r2, lr}
 8019bb6:	9300      	str	r3, [sp, #0]
 8019bb8:	4613      	mov	r3, r2
 8019bba:	460a      	mov	r2, r1
 8019bbc:	4601      	mov	r1, r0
 8019bbe:	4803      	ldr	r0, [pc, #12]	@ (8019bcc <vsniprintf+0x18>)
 8019bc0:	6800      	ldr	r0, [r0, #0]
 8019bc2:	f7ff ffcc 	bl	8019b5e <_vsniprintf_r>
 8019bc6:	b003      	add	sp, #12
 8019bc8:	f85d fb04 	ldr.w	pc, [sp], #4
 8019bcc:	20000104 	.word	0x20000104

08019bd0 <memmove>:
 8019bd0:	4288      	cmp	r0, r1
 8019bd2:	b510      	push	{r4, lr}
 8019bd4:	eb01 0402 	add.w	r4, r1, r2
 8019bd8:	d902      	bls.n	8019be0 <memmove+0x10>
 8019bda:	4284      	cmp	r4, r0
 8019bdc:	4623      	mov	r3, r4
 8019bde:	d807      	bhi.n	8019bf0 <memmove+0x20>
 8019be0:	1e43      	subs	r3, r0, #1
 8019be2:	42a1      	cmp	r1, r4
 8019be4:	d008      	beq.n	8019bf8 <memmove+0x28>
 8019be6:	f811 2b01 	ldrb.w	r2, [r1], #1
 8019bea:	f803 2f01 	strb.w	r2, [r3, #1]!
 8019bee:	e7f8      	b.n	8019be2 <memmove+0x12>
 8019bf0:	4402      	add	r2, r0
 8019bf2:	4601      	mov	r1, r0
 8019bf4:	428a      	cmp	r2, r1
 8019bf6:	d100      	bne.n	8019bfa <memmove+0x2a>
 8019bf8:	bd10      	pop	{r4, pc}
 8019bfa:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8019bfe:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8019c02:	e7f7      	b.n	8019bf4 <memmove+0x24>

08019c04 <memset>:
 8019c04:	4402      	add	r2, r0
 8019c06:	4603      	mov	r3, r0
 8019c08:	4293      	cmp	r3, r2
 8019c0a:	d100      	bne.n	8019c0e <memset+0xa>
 8019c0c:	4770      	bx	lr
 8019c0e:	f803 1b01 	strb.w	r1, [r3], #1
 8019c12:	e7f9      	b.n	8019c08 <memset+0x4>

08019c14 <strchr>:
 8019c14:	b2c9      	uxtb	r1, r1
 8019c16:	4603      	mov	r3, r0
 8019c18:	4618      	mov	r0, r3
 8019c1a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8019c1e:	b112      	cbz	r2, 8019c26 <strchr+0x12>
 8019c20:	428a      	cmp	r2, r1
 8019c22:	d1f9      	bne.n	8019c18 <strchr+0x4>
 8019c24:	4770      	bx	lr
 8019c26:	2900      	cmp	r1, #0
 8019c28:	bf18      	it	ne
 8019c2a:	2000      	movne	r0, #0
 8019c2c:	4770      	bx	lr

08019c2e <strncmp>:
 8019c2e:	b510      	push	{r4, lr}
 8019c30:	b16a      	cbz	r2, 8019c4e <strncmp+0x20>
 8019c32:	3901      	subs	r1, #1
 8019c34:	1884      	adds	r4, r0, r2
 8019c36:	f810 2b01 	ldrb.w	r2, [r0], #1
 8019c3a:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8019c3e:	429a      	cmp	r2, r3
 8019c40:	d103      	bne.n	8019c4a <strncmp+0x1c>
 8019c42:	42a0      	cmp	r0, r4
 8019c44:	d001      	beq.n	8019c4a <strncmp+0x1c>
 8019c46:	2a00      	cmp	r2, #0
 8019c48:	d1f5      	bne.n	8019c36 <strncmp+0x8>
 8019c4a:	1ad0      	subs	r0, r2, r3
 8019c4c:	bd10      	pop	{r4, pc}
 8019c4e:	4610      	mov	r0, r2
 8019c50:	e7fc      	b.n	8019c4c <strncmp+0x1e>

08019c52 <strstr>:
 8019c52:	780a      	ldrb	r2, [r1, #0]
 8019c54:	b570      	push	{r4, r5, r6, lr}
 8019c56:	b96a      	cbnz	r2, 8019c74 <strstr+0x22>
 8019c58:	bd70      	pop	{r4, r5, r6, pc}
 8019c5a:	429a      	cmp	r2, r3
 8019c5c:	d109      	bne.n	8019c72 <strstr+0x20>
 8019c5e:	460c      	mov	r4, r1
 8019c60:	4605      	mov	r5, r0
 8019c62:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 8019c66:	2b00      	cmp	r3, #0
 8019c68:	d0f6      	beq.n	8019c58 <strstr+0x6>
 8019c6a:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 8019c6e:	429e      	cmp	r6, r3
 8019c70:	d0f7      	beq.n	8019c62 <strstr+0x10>
 8019c72:	3001      	adds	r0, #1
 8019c74:	7803      	ldrb	r3, [r0, #0]
 8019c76:	2b00      	cmp	r3, #0
 8019c78:	d1ef      	bne.n	8019c5a <strstr+0x8>
 8019c7a:	4618      	mov	r0, r3
 8019c7c:	e7ec      	b.n	8019c58 <strstr+0x6>
	...

08019c80 <_close_r>:
 8019c80:	b538      	push	{r3, r4, r5, lr}
 8019c82:	4d06      	ldr	r5, [pc, #24]	@ (8019c9c <_close_r+0x1c>)
 8019c84:	2300      	movs	r3, #0
 8019c86:	4604      	mov	r4, r0
 8019c88:	4608      	mov	r0, r1
 8019c8a:	602b      	str	r3, [r5, #0]
 8019c8c:	f7e8 fe00 	bl	8002890 <_close>
 8019c90:	1c43      	adds	r3, r0, #1
 8019c92:	d102      	bne.n	8019c9a <_close_r+0x1a>
 8019c94:	682b      	ldr	r3, [r5, #0]
 8019c96:	b103      	cbz	r3, 8019c9a <_close_r+0x1a>
 8019c98:	6023      	str	r3, [r4, #0]
 8019c9a:	bd38      	pop	{r3, r4, r5, pc}
 8019c9c:	20007838 	.word	0x20007838

08019ca0 <_reclaim_reent>:
 8019ca0:	4b29      	ldr	r3, [pc, #164]	@ (8019d48 <_reclaim_reent+0xa8>)
 8019ca2:	681b      	ldr	r3, [r3, #0]
 8019ca4:	4283      	cmp	r3, r0
 8019ca6:	b570      	push	{r4, r5, r6, lr}
 8019ca8:	4604      	mov	r4, r0
 8019caa:	d04b      	beq.n	8019d44 <_reclaim_reent+0xa4>
 8019cac:	69c3      	ldr	r3, [r0, #28]
 8019cae:	b1ab      	cbz	r3, 8019cdc <_reclaim_reent+0x3c>
 8019cb0:	68db      	ldr	r3, [r3, #12]
 8019cb2:	b16b      	cbz	r3, 8019cd0 <_reclaim_reent+0x30>
 8019cb4:	2500      	movs	r5, #0
 8019cb6:	69e3      	ldr	r3, [r4, #28]
 8019cb8:	68db      	ldr	r3, [r3, #12]
 8019cba:	5959      	ldr	r1, [r3, r5]
 8019cbc:	2900      	cmp	r1, #0
 8019cbe:	d13b      	bne.n	8019d38 <_reclaim_reent+0x98>
 8019cc0:	3504      	adds	r5, #4
 8019cc2:	2d80      	cmp	r5, #128	@ 0x80
 8019cc4:	d1f7      	bne.n	8019cb6 <_reclaim_reent+0x16>
 8019cc6:	69e3      	ldr	r3, [r4, #28]
 8019cc8:	4620      	mov	r0, r4
 8019cca:	68d9      	ldr	r1, [r3, #12]
 8019ccc:	f000 f8f2 	bl	8019eb4 <_free_r>
 8019cd0:	69e3      	ldr	r3, [r4, #28]
 8019cd2:	6819      	ldr	r1, [r3, #0]
 8019cd4:	b111      	cbz	r1, 8019cdc <_reclaim_reent+0x3c>
 8019cd6:	4620      	mov	r0, r4
 8019cd8:	f000 f8ec 	bl	8019eb4 <_free_r>
 8019cdc:	6961      	ldr	r1, [r4, #20]
 8019cde:	b111      	cbz	r1, 8019ce6 <_reclaim_reent+0x46>
 8019ce0:	4620      	mov	r0, r4
 8019ce2:	f000 f8e7 	bl	8019eb4 <_free_r>
 8019ce6:	69e1      	ldr	r1, [r4, #28]
 8019ce8:	b111      	cbz	r1, 8019cf0 <_reclaim_reent+0x50>
 8019cea:	4620      	mov	r0, r4
 8019cec:	f000 f8e2 	bl	8019eb4 <_free_r>
 8019cf0:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8019cf2:	b111      	cbz	r1, 8019cfa <_reclaim_reent+0x5a>
 8019cf4:	4620      	mov	r0, r4
 8019cf6:	f000 f8dd 	bl	8019eb4 <_free_r>
 8019cfa:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8019cfc:	b111      	cbz	r1, 8019d04 <_reclaim_reent+0x64>
 8019cfe:	4620      	mov	r0, r4
 8019d00:	f000 f8d8 	bl	8019eb4 <_free_r>
 8019d04:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 8019d06:	b111      	cbz	r1, 8019d0e <_reclaim_reent+0x6e>
 8019d08:	4620      	mov	r0, r4
 8019d0a:	f000 f8d3 	bl	8019eb4 <_free_r>
 8019d0e:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 8019d10:	b111      	cbz	r1, 8019d18 <_reclaim_reent+0x78>
 8019d12:	4620      	mov	r0, r4
 8019d14:	f000 f8ce 	bl	8019eb4 <_free_r>
 8019d18:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 8019d1a:	b111      	cbz	r1, 8019d22 <_reclaim_reent+0x82>
 8019d1c:	4620      	mov	r0, r4
 8019d1e:	f000 f8c9 	bl	8019eb4 <_free_r>
 8019d22:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8019d24:	b111      	cbz	r1, 8019d2c <_reclaim_reent+0x8c>
 8019d26:	4620      	mov	r0, r4
 8019d28:	f000 f8c4 	bl	8019eb4 <_free_r>
 8019d2c:	6a23      	ldr	r3, [r4, #32]
 8019d2e:	b14b      	cbz	r3, 8019d44 <_reclaim_reent+0xa4>
 8019d30:	4620      	mov	r0, r4
 8019d32:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8019d36:	4718      	bx	r3
 8019d38:	680e      	ldr	r6, [r1, #0]
 8019d3a:	4620      	mov	r0, r4
 8019d3c:	f000 f8ba 	bl	8019eb4 <_free_r>
 8019d40:	4631      	mov	r1, r6
 8019d42:	e7bb      	b.n	8019cbc <_reclaim_reent+0x1c>
 8019d44:	bd70      	pop	{r4, r5, r6, pc}
 8019d46:	bf00      	nop
 8019d48:	20000104 	.word	0x20000104

08019d4c <_lseek_r>:
 8019d4c:	b538      	push	{r3, r4, r5, lr}
 8019d4e:	4d07      	ldr	r5, [pc, #28]	@ (8019d6c <_lseek_r+0x20>)
 8019d50:	4604      	mov	r4, r0
 8019d52:	4608      	mov	r0, r1
 8019d54:	4611      	mov	r1, r2
 8019d56:	2200      	movs	r2, #0
 8019d58:	602a      	str	r2, [r5, #0]
 8019d5a:	461a      	mov	r2, r3
 8019d5c:	f7e8 fdbf 	bl	80028de <_lseek>
 8019d60:	1c43      	adds	r3, r0, #1
 8019d62:	d102      	bne.n	8019d6a <_lseek_r+0x1e>
 8019d64:	682b      	ldr	r3, [r5, #0]
 8019d66:	b103      	cbz	r3, 8019d6a <_lseek_r+0x1e>
 8019d68:	6023      	str	r3, [r4, #0]
 8019d6a:	bd38      	pop	{r3, r4, r5, pc}
 8019d6c:	20007838 	.word	0x20007838

08019d70 <_read_r>:
 8019d70:	b538      	push	{r3, r4, r5, lr}
 8019d72:	4d07      	ldr	r5, [pc, #28]	@ (8019d90 <_read_r+0x20>)
 8019d74:	4604      	mov	r4, r0
 8019d76:	4608      	mov	r0, r1
 8019d78:	4611      	mov	r1, r2
 8019d7a:	2200      	movs	r2, #0
 8019d7c:	602a      	str	r2, [r5, #0]
 8019d7e:	461a      	mov	r2, r3
 8019d80:	f7e8 fd4d 	bl	800281e <_read>
 8019d84:	1c43      	adds	r3, r0, #1
 8019d86:	d102      	bne.n	8019d8e <_read_r+0x1e>
 8019d88:	682b      	ldr	r3, [r5, #0]
 8019d8a:	b103      	cbz	r3, 8019d8e <_read_r+0x1e>
 8019d8c:	6023      	str	r3, [r4, #0]
 8019d8e:	bd38      	pop	{r3, r4, r5, pc}
 8019d90:	20007838 	.word	0x20007838

08019d94 <_sbrk_r>:
 8019d94:	b538      	push	{r3, r4, r5, lr}
 8019d96:	4d06      	ldr	r5, [pc, #24]	@ (8019db0 <_sbrk_r+0x1c>)
 8019d98:	2300      	movs	r3, #0
 8019d9a:	4604      	mov	r4, r0
 8019d9c:	4608      	mov	r0, r1
 8019d9e:	602b      	str	r3, [r5, #0]
 8019da0:	f7e8 fdaa 	bl	80028f8 <_sbrk>
 8019da4:	1c43      	adds	r3, r0, #1
 8019da6:	d102      	bne.n	8019dae <_sbrk_r+0x1a>
 8019da8:	682b      	ldr	r3, [r5, #0]
 8019daa:	b103      	cbz	r3, 8019dae <_sbrk_r+0x1a>
 8019dac:	6023      	str	r3, [r4, #0]
 8019dae:	bd38      	pop	{r3, r4, r5, pc}
 8019db0:	20007838 	.word	0x20007838

08019db4 <_write_r>:
 8019db4:	b538      	push	{r3, r4, r5, lr}
 8019db6:	4d07      	ldr	r5, [pc, #28]	@ (8019dd4 <_write_r+0x20>)
 8019db8:	4604      	mov	r4, r0
 8019dba:	4608      	mov	r0, r1
 8019dbc:	4611      	mov	r1, r2
 8019dbe:	2200      	movs	r2, #0
 8019dc0:	602a      	str	r2, [r5, #0]
 8019dc2:	461a      	mov	r2, r3
 8019dc4:	f7e8 fd48 	bl	8002858 <_write>
 8019dc8:	1c43      	adds	r3, r0, #1
 8019dca:	d102      	bne.n	8019dd2 <_write_r+0x1e>
 8019dcc:	682b      	ldr	r3, [r5, #0]
 8019dce:	b103      	cbz	r3, 8019dd2 <_write_r+0x1e>
 8019dd0:	6023      	str	r3, [r4, #0]
 8019dd2:	bd38      	pop	{r3, r4, r5, pc}
 8019dd4:	20007838 	.word	0x20007838

08019dd8 <__errno>:
 8019dd8:	4b01      	ldr	r3, [pc, #4]	@ (8019de0 <__errno+0x8>)
 8019dda:	6818      	ldr	r0, [r3, #0]
 8019ddc:	4770      	bx	lr
 8019dde:	bf00      	nop
 8019de0:	20000104 	.word	0x20000104

08019de4 <__libc_init_array>:
 8019de4:	b570      	push	{r4, r5, r6, lr}
 8019de6:	4d0d      	ldr	r5, [pc, #52]	@ (8019e1c <__libc_init_array+0x38>)
 8019de8:	4c0d      	ldr	r4, [pc, #52]	@ (8019e20 <__libc_init_array+0x3c>)
 8019dea:	1b64      	subs	r4, r4, r5
 8019dec:	10a4      	asrs	r4, r4, #2
 8019dee:	2600      	movs	r6, #0
 8019df0:	42a6      	cmp	r6, r4
 8019df2:	d109      	bne.n	8019e08 <__libc_init_array+0x24>
 8019df4:	4d0b      	ldr	r5, [pc, #44]	@ (8019e24 <__libc_init_array+0x40>)
 8019df6:	4c0c      	ldr	r4, [pc, #48]	@ (8019e28 <__libc_init_array+0x44>)
 8019df8:	f000 ff4e 	bl	801ac98 <_init>
 8019dfc:	1b64      	subs	r4, r4, r5
 8019dfe:	10a4      	asrs	r4, r4, #2
 8019e00:	2600      	movs	r6, #0
 8019e02:	42a6      	cmp	r6, r4
 8019e04:	d105      	bne.n	8019e12 <__libc_init_array+0x2e>
 8019e06:	bd70      	pop	{r4, r5, r6, pc}
 8019e08:	f855 3b04 	ldr.w	r3, [r5], #4
 8019e0c:	4798      	blx	r3
 8019e0e:	3601      	adds	r6, #1
 8019e10:	e7ee      	b.n	8019df0 <__libc_init_array+0xc>
 8019e12:	f855 3b04 	ldr.w	r3, [r5], #4
 8019e16:	4798      	blx	r3
 8019e18:	3601      	adds	r6, #1
 8019e1a:	e7f2      	b.n	8019e02 <__libc_init_array+0x1e>
 8019e1c:	0801b928 	.word	0x0801b928
 8019e20:	0801b928 	.word	0x0801b928
 8019e24:	0801b928 	.word	0x0801b928
 8019e28:	0801b92c 	.word	0x0801b92c

08019e2c <__retarget_lock_init_recursive>:
 8019e2c:	4770      	bx	lr

08019e2e <__retarget_lock_acquire_recursive>:
 8019e2e:	4770      	bx	lr

08019e30 <__retarget_lock_release_recursive>:
 8019e30:	4770      	bx	lr

08019e32 <strcpy>:
 8019e32:	4603      	mov	r3, r0
 8019e34:	f811 2b01 	ldrb.w	r2, [r1], #1
 8019e38:	f803 2b01 	strb.w	r2, [r3], #1
 8019e3c:	2a00      	cmp	r2, #0
 8019e3e:	d1f9      	bne.n	8019e34 <strcpy+0x2>
 8019e40:	4770      	bx	lr

08019e42 <memcpy>:
 8019e42:	440a      	add	r2, r1
 8019e44:	4291      	cmp	r1, r2
 8019e46:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 8019e4a:	d100      	bne.n	8019e4e <memcpy+0xc>
 8019e4c:	4770      	bx	lr
 8019e4e:	b510      	push	{r4, lr}
 8019e50:	f811 4b01 	ldrb.w	r4, [r1], #1
 8019e54:	f803 4f01 	strb.w	r4, [r3, #1]!
 8019e58:	4291      	cmp	r1, r2
 8019e5a:	d1f9      	bne.n	8019e50 <memcpy+0xe>
 8019e5c:	bd10      	pop	{r4, pc}
	...

08019e60 <__assert_func>:
 8019e60:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8019e62:	4614      	mov	r4, r2
 8019e64:	461a      	mov	r2, r3
 8019e66:	4b09      	ldr	r3, [pc, #36]	@ (8019e8c <__assert_func+0x2c>)
 8019e68:	681b      	ldr	r3, [r3, #0]
 8019e6a:	4605      	mov	r5, r0
 8019e6c:	68d8      	ldr	r0, [r3, #12]
 8019e6e:	b954      	cbnz	r4, 8019e86 <__assert_func+0x26>
 8019e70:	4b07      	ldr	r3, [pc, #28]	@ (8019e90 <__assert_func+0x30>)
 8019e72:	461c      	mov	r4, r3
 8019e74:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8019e78:	9100      	str	r1, [sp, #0]
 8019e7a:	462b      	mov	r3, r5
 8019e7c:	4905      	ldr	r1, [pc, #20]	@ (8019e94 <__assert_func+0x34>)
 8019e7e:	f000 fd3f 	bl	801a900 <fiprintf>
 8019e82:	f000 fde3 	bl	801aa4c <abort>
 8019e86:	4b04      	ldr	r3, [pc, #16]	@ (8019e98 <__assert_func+0x38>)
 8019e88:	e7f4      	b.n	8019e74 <__assert_func+0x14>
 8019e8a:	bf00      	nop
 8019e8c:	20000104 	.word	0x20000104
 8019e90:	0801b8eb 	.word	0x0801b8eb
 8019e94:	0801b8bd 	.word	0x0801b8bd
 8019e98:	0801b8b0 	.word	0x0801b8b0

08019e9c <__env_lock>:
 8019e9c:	4801      	ldr	r0, [pc, #4]	@ (8019ea4 <__env_lock+0x8>)
 8019e9e:	f7ff bfc6 	b.w	8019e2e <__retarget_lock_acquire_recursive>
 8019ea2:	bf00      	nop
 8019ea4:	2000783c 	.word	0x2000783c

08019ea8 <__env_unlock>:
 8019ea8:	4801      	ldr	r0, [pc, #4]	@ (8019eb0 <__env_unlock+0x8>)
 8019eaa:	f7ff bfc1 	b.w	8019e30 <__retarget_lock_release_recursive>
 8019eae:	bf00      	nop
 8019eb0:	2000783c 	.word	0x2000783c

08019eb4 <_free_r>:
 8019eb4:	b538      	push	{r3, r4, r5, lr}
 8019eb6:	4605      	mov	r5, r0
 8019eb8:	2900      	cmp	r1, #0
 8019eba:	d041      	beq.n	8019f40 <_free_r+0x8c>
 8019ebc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8019ec0:	1f0c      	subs	r4, r1, #4
 8019ec2:	2b00      	cmp	r3, #0
 8019ec4:	bfb8      	it	lt
 8019ec6:	18e4      	addlt	r4, r4, r3
 8019ec8:	f7ff fbd8 	bl	801967c <__malloc_lock>
 8019ecc:	4a1d      	ldr	r2, [pc, #116]	@ (8019f44 <_free_r+0x90>)
 8019ece:	6813      	ldr	r3, [r2, #0]
 8019ed0:	b933      	cbnz	r3, 8019ee0 <_free_r+0x2c>
 8019ed2:	6063      	str	r3, [r4, #4]
 8019ed4:	6014      	str	r4, [r2, #0]
 8019ed6:	4628      	mov	r0, r5
 8019ed8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8019edc:	f7ff bbd4 	b.w	8019688 <__malloc_unlock>
 8019ee0:	42a3      	cmp	r3, r4
 8019ee2:	d908      	bls.n	8019ef6 <_free_r+0x42>
 8019ee4:	6820      	ldr	r0, [r4, #0]
 8019ee6:	1821      	adds	r1, r4, r0
 8019ee8:	428b      	cmp	r3, r1
 8019eea:	bf01      	itttt	eq
 8019eec:	6819      	ldreq	r1, [r3, #0]
 8019eee:	685b      	ldreq	r3, [r3, #4]
 8019ef0:	1809      	addeq	r1, r1, r0
 8019ef2:	6021      	streq	r1, [r4, #0]
 8019ef4:	e7ed      	b.n	8019ed2 <_free_r+0x1e>
 8019ef6:	461a      	mov	r2, r3
 8019ef8:	685b      	ldr	r3, [r3, #4]
 8019efa:	b10b      	cbz	r3, 8019f00 <_free_r+0x4c>
 8019efc:	42a3      	cmp	r3, r4
 8019efe:	d9fa      	bls.n	8019ef6 <_free_r+0x42>
 8019f00:	6811      	ldr	r1, [r2, #0]
 8019f02:	1850      	adds	r0, r2, r1
 8019f04:	42a0      	cmp	r0, r4
 8019f06:	d10b      	bne.n	8019f20 <_free_r+0x6c>
 8019f08:	6820      	ldr	r0, [r4, #0]
 8019f0a:	4401      	add	r1, r0
 8019f0c:	1850      	adds	r0, r2, r1
 8019f0e:	4283      	cmp	r3, r0
 8019f10:	6011      	str	r1, [r2, #0]
 8019f12:	d1e0      	bne.n	8019ed6 <_free_r+0x22>
 8019f14:	6818      	ldr	r0, [r3, #0]
 8019f16:	685b      	ldr	r3, [r3, #4]
 8019f18:	6053      	str	r3, [r2, #4]
 8019f1a:	4408      	add	r0, r1
 8019f1c:	6010      	str	r0, [r2, #0]
 8019f1e:	e7da      	b.n	8019ed6 <_free_r+0x22>
 8019f20:	d902      	bls.n	8019f28 <_free_r+0x74>
 8019f22:	230c      	movs	r3, #12
 8019f24:	602b      	str	r3, [r5, #0]
 8019f26:	e7d6      	b.n	8019ed6 <_free_r+0x22>
 8019f28:	6820      	ldr	r0, [r4, #0]
 8019f2a:	1821      	adds	r1, r4, r0
 8019f2c:	428b      	cmp	r3, r1
 8019f2e:	bf04      	itt	eq
 8019f30:	6819      	ldreq	r1, [r3, #0]
 8019f32:	685b      	ldreq	r3, [r3, #4]
 8019f34:	6063      	str	r3, [r4, #4]
 8019f36:	bf04      	itt	eq
 8019f38:	1809      	addeq	r1, r1, r0
 8019f3a:	6021      	streq	r1, [r4, #0]
 8019f3c:	6054      	str	r4, [r2, #4]
 8019f3e:	e7ca      	b.n	8019ed6 <_free_r+0x22>
 8019f40:	bd38      	pop	{r3, r4, r5, pc}
 8019f42:	bf00      	nop
 8019f44:	200076f8 	.word	0x200076f8

08019f48 <_malloc_usable_size_r>:
 8019f48:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8019f4c:	1f18      	subs	r0, r3, #4
 8019f4e:	2b00      	cmp	r3, #0
 8019f50:	bfbc      	itt	lt
 8019f52:	580b      	ldrlt	r3, [r1, r0]
 8019f54:	18c0      	addlt	r0, r0, r3
 8019f56:	4770      	bx	lr

08019f58 <__ssputs_r>:
 8019f58:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8019f5c:	688e      	ldr	r6, [r1, #8]
 8019f5e:	461f      	mov	r7, r3
 8019f60:	42be      	cmp	r6, r7
 8019f62:	680b      	ldr	r3, [r1, #0]
 8019f64:	4682      	mov	sl, r0
 8019f66:	460c      	mov	r4, r1
 8019f68:	4690      	mov	r8, r2
 8019f6a:	d82d      	bhi.n	8019fc8 <__ssputs_r+0x70>
 8019f6c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8019f70:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8019f74:	d026      	beq.n	8019fc4 <__ssputs_r+0x6c>
 8019f76:	6965      	ldr	r5, [r4, #20]
 8019f78:	6909      	ldr	r1, [r1, #16]
 8019f7a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8019f7e:	eba3 0901 	sub.w	r9, r3, r1
 8019f82:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8019f86:	1c7b      	adds	r3, r7, #1
 8019f88:	444b      	add	r3, r9
 8019f8a:	106d      	asrs	r5, r5, #1
 8019f8c:	429d      	cmp	r5, r3
 8019f8e:	bf38      	it	cc
 8019f90:	461d      	movcc	r5, r3
 8019f92:	0553      	lsls	r3, r2, #21
 8019f94:	d527      	bpl.n	8019fe6 <__ssputs_r+0x8e>
 8019f96:	4629      	mov	r1, r5
 8019f98:	f7ff faf0 	bl	801957c <_malloc_r>
 8019f9c:	4606      	mov	r6, r0
 8019f9e:	b360      	cbz	r0, 8019ffa <__ssputs_r+0xa2>
 8019fa0:	6921      	ldr	r1, [r4, #16]
 8019fa2:	464a      	mov	r2, r9
 8019fa4:	f7ff ff4d 	bl	8019e42 <memcpy>
 8019fa8:	89a3      	ldrh	r3, [r4, #12]
 8019faa:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8019fae:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8019fb2:	81a3      	strh	r3, [r4, #12]
 8019fb4:	6126      	str	r6, [r4, #16]
 8019fb6:	6165      	str	r5, [r4, #20]
 8019fb8:	444e      	add	r6, r9
 8019fba:	eba5 0509 	sub.w	r5, r5, r9
 8019fbe:	6026      	str	r6, [r4, #0]
 8019fc0:	60a5      	str	r5, [r4, #8]
 8019fc2:	463e      	mov	r6, r7
 8019fc4:	42be      	cmp	r6, r7
 8019fc6:	d900      	bls.n	8019fca <__ssputs_r+0x72>
 8019fc8:	463e      	mov	r6, r7
 8019fca:	6820      	ldr	r0, [r4, #0]
 8019fcc:	4632      	mov	r2, r6
 8019fce:	4641      	mov	r1, r8
 8019fd0:	f7ff fdfe 	bl	8019bd0 <memmove>
 8019fd4:	68a3      	ldr	r3, [r4, #8]
 8019fd6:	1b9b      	subs	r3, r3, r6
 8019fd8:	60a3      	str	r3, [r4, #8]
 8019fda:	6823      	ldr	r3, [r4, #0]
 8019fdc:	4433      	add	r3, r6
 8019fde:	6023      	str	r3, [r4, #0]
 8019fe0:	2000      	movs	r0, #0
 8019fe2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8019fe6:	462a      	mov	r2, r5
 8019fe8:	f7ff fbc8 	bl	801977c <_realloc_r>
 8019fec:	4606      	mov	r6, r0
 8019fee:	2800      	cmp	r0, #0
 8019ff0:	d1e0      	bne.n	8019fb4 <__ssputs_r+0x5c>
 8019ff2:	6921      	ldr	r1, [r4, #16]
 8019ff4:	4650      	mov	r0, sl
 8019ff6:	f7ff ff5d 	bl	8019eb4 <_free_r>
 8019ffa:	230c      	movs	r3, #12
 8019ffc:	f8ca 3000 	str.w	r3, [sl]
 801a000:	89a3      	ldrh	r3, [r4, #12]
 801a002:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801a006:	81a3      	strh	r3, [r4, #12]
 801a008:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801a00c:	e7e9      	b.n	8019fe2 <__ssputs_r+0x8a>
	...

0801a010 <_svfiprintf_r>:
 801a010:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a014:	4698      	mov	r8, r3
 801a016:	898b      	ldrh	r3, [r1, #12]
 801a018:	061b      	lsls	r3, r3, #24
 801a01a:	b09d      	sub	sp, #116	@ 0x74
 801a01c:	4607      	mov	r7, r0
 801a01e:	460d      	mov	r5, r1
 801a020:	4614      	mov	r4, r2
 801a022:	d510      	bpl.n	801a046 <_svfiprintf_r+0x36>
 801a024:	690b      	ldr	r3, [r1, #16]
 801a026:	b973      	cbnz	r3, 801a046 <_svfiprintf_r+0x36>
 801a028:	2140      	movs	r1, #64	@ 0x40
 801a02a:	f7ff faa7 	bl	801957c <_malloc_r>
 801a02e:	6028      	str	r0, [r5, #0]
 801a030:	6128      	str	r0, [r5, #16]
 801a032:	b930      	cbnz	r0, 801a042 <_svfiprintf_r+0x32>
 801a034:	230c      	movs	r3, #12
 801a036:	603b      	str	r3, [r7, #0]
 801a038:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801a03c:	b01d      	add	sp, #116	@ 0x74
 801a03e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a042:	2340      	movs	r3, #64	@ 0x40
 801a044:	616b      	str	r3, [r5, #20]
 801a046:	2300      	movs	r3, #0
 801a048:	9309      	str	r3, [sp, #36]	@ 0x24
 801a04a:	2320      	movs	r3, #32
 801a04c:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 801a050:	f8cd 800c 	str.w	r8, [sp, #12]
 801a054:	2330      	movs	r3, #48	@ 0x30
 801a056:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 801a1f4 <_svfiprintf_r+0x1e4>
 801a05a:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 801a05e:	f04f 0901 	mov.w	r9, #1
 801a062:	4623      	mov	r3, r4
 801a064:	469a      	mov	sl, r3
 801a066:	f813 2b01 	ldrb.w	r2, [r3], #1
 801a06a:	b10a      	cbz	r2, 801a070 <_svfiprintf_r+0x60>
 801a06c:	2a25      	cmp	r2, #37	@ 0x25
 801a06e:	d1f9      	bne.n	801a064 <_svfiprintf_r+0x54>
 801a070:	ebba 0b04 	subs.w	fp, sl, r4
 801a074:	d00b      	beq.n	801a08e <_svfiprintf_r+0x7e>
 801a076:	465b      	mov	r3, fp
 801a078:	4622      	mov	r2, r4
 801a07a:	4629      	mov	r1, r5
 801a07c:	4638      	mov	r0, r7
 801a07e:	f7ff ff6b 	bl	8019f58 <__ssputs_r>
 801a082:	3001      	adds	r0, #1
 801a084:	f000 80a7 	beq.w	801a1d6 <_svfiprintf_r+0x1c6>
 801a088:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801a08a:	445a      	add	r2, fp
 801a08c:	9209      	str	r2, [sp, #36]	@ 0x24
 801a08e:	f89a 3000 	ldrb.w	r3, [sl]
 801a092:	2b00      	cmp	r3, #0
 801a094:	f000 809f 	beq.w	801a1d6 <_svfiprintf_r+0x1c6>
 801a098:	2300      	movs	r3, #0
 801a09a:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 801a09e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801a0a2:	f10a 0a01 	add.w	sl, sl, #1
 801a0a6:	9304      	str	r3, [sp, #16]
 801a0a8:	9307      	str	r3, [sp, #28]
 801a0aa:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 801a0ae:	931a      	str	r3, [sp, #104]	@ 0x68
 801a0b0:	4654      	mov	r4, sl
 801a0b2:	2205      	movs	r2, #5
 801a0b4:	f814 1b01 	ldrb.w	r1, [r4], #1
 801a0b8:	484e      	ldr	r0, [pc, #312]	@ (801a1f4 <_svfiprintf_r+0x1e4>)
 801a0ba:	f7e6 f8a1 	bl	8000200 <memchr>
 801a0be:	9a04      	ldr	r2, [sp, #16]
 801a0c0:	b9d8      	cbnz	r0, 801a0fa <_svfiprintf_r+0xea>
 801a0c2:	06d0      	lsls	r0, r2, #27
 801a0c4:	bf44      	itt	mi
 801a0c6:	2320      	movmi	r3, #32
 801a0c8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801a0cc:	0711      	lsls	r1, r2, #28
 801a0ce:	bf44      	itt	mi
 801a0d0:	232b      	movmi	r3, #43	@ 0x2b
 801a0d2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801a0d6:	f89a 3000 	ldrb.w	r3, [sl]
 801a0da:	2b2a      	cmp	r3, #42	@ 0x2a
 801a0dc:	d015      	beq.n	801a10a <_svfiprintf_r+0xfa>
 801a0de:	9a07      	ldr	r2, [sp, #28]
 801a0e0:	4654      	mov	r4, sl
 801a0e2:	2000      	movs	r0, #0
 801a0e4:	f04f 0c0a 	mov.w	ip, #10
 801a0e8:	4621      	mov	r1, r4
 801a0ea:	f811 3b01 	ldrb.w	r3, [r1], #1
 801a0ee:	3b30      	subs	r3, #48	@ 0x30
 801a0f0:	2b09      	cmp	r3, #9
 801a0f2:	d94b      	bls.n	801a18c <_svfiprintf_r+0x17c>
 801a0f4:	b1b0      	cbz	r0, 801a124 <_svfiprintf_r+0x114>
 801a0f6:	9207      	str	r2, [sp, #28]
 801a0f8:	e014      	b.n	801a124 <_svfiprintf_r+0x114>
 801a0fa:	eba0 0308 	sub.w	r3, r0, r8
 801a0fe:	fa09 f303 	lsl.w	r3, r9, r3
 801a102:	4313      	orrs	r3, r2
 801a104:	9304      	str	r3, [sp, #16]
 801a106:	46a2      	mov	sl, r4
 801a108:	e7d2      	b.n	801a0b0 <_svfiprintf_r+0xa0>
 801a10a:	9b03      	ldr	r3, [sp, #12]
 801a10c:	1d19      	adds	r1, r3, #4
 801a10e:	681b      	ldr	r3, [r3, #0]
 801a110:	9103      	str	r1, [sp, #12]
 801a112:	2b00      	cmp	r3, #0
 801a114:	bfbb      	ittet	lt
 801a116:	425b      	neglt	r3, r3
 801a118:	f042 0202 	orrlt.w	r2, r2, #2
 801a11c:	9307      	strge	r3, [sp, #28]
 801a11e:	9307      	strlt	r3, [sp, #28]
 801a120:	bfb8      	it	lt
 801a122:	9204      	strlt	r2, [sp, #16]
 801a124:	7823      	ldrb	r3, [r4, #0]
 801a126:	2b2e      	cmp	r3, #46	@ 0x2e
 801a128:	d10a      	bne.n	801a140 <_svfiprintf_r+0x130>
 801a12a:	7863      	ldrb	r3, [r4, #1]
 801a12c:	2b2a      	cmp	r3, #42	@ 0x2a
 801a12e:	d132      	bne.n	801a196 <_svfiprintf_r+0x186>
 801a130:	9b03      	ldr	r3, [sp, #12]
 801a132:	1d1a      	adds	r2, r3, #4
 801a134:	681b      	ldr	r3, [r3, #0]
 801a136:	9203      	str	r2, [sp, #12]
 801a138:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 801a13c:	3402      	adds	r4, #2
 801a13e:	9305      	str	r3, [sp, #20]
 801a140:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 801a204 <_svfiprintf_r+0x1f4>
 801a144:	7821      	ldrb	r1, [r4, #0]
 801a146:	2203      	movs	r2, #3
 801a148:	4650      	mov	r0, sl
 801a14a:	f7e6 f859 	bl	8000200 <memchr>
 801a14e:	b138      	cbz	r0, 801a160 <_svfiprintf_r+0x150>
 801a150:	9b04      	ldr	r3, [sp, #16]
 801a152:	eba0 000a 	sub.w	r0, r0, sl
 801a156:	2240      	movs	r2, #64	@ 0x40
 801a158:	4082      	lsls	r2, r0
 801a15a:	4313      	orrs	r3, r2
 801a15c:	3401      	adds	r4, #1
 801a15e:	9304      	str	r3, [sp, #16]
 801a160:	f814 1b01 	ldrb.w	r1, [r4], #1
 801a164:	4824      	ldr	r0, [pc, #144]	@ (801a1f8 <_svfiprintf_r+0x1e8>)
 801a166:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 801a16a:	2206      	movs	r2, #6
 801a16c:	f7e6 f848 	bl	8000200 <memchr>
 801a170:	2800      	cmp	r0, #0
 801a172:	d036      	beq.n	801a1e2 <_svfiprintf_r+0x1d2>
 801a174:	4b21      	ldr	r3, [pc, #132]	@ (801a1fc <_svfiprintf_r+0x1ec>)
 801a176:	bb1b      	cbnz	r3, 801a1c0 <_svfiprintf_r+0x1b0>
 801a178:	9b03      	ldr	r3, [sp, #12]
 801a17a:	3307      	adds	r3, #7
 801a17c:	f023 0307 	bic.w	r3, r3, #7
 801a180:	3308      	adds	r3, #8
 801a182:	9303      	str	r3, [sp, #12]
 801a184:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801a186:	4433      	add	r3, r6
 801a188:	9309      	str	r3, [sp, #36]	@ 0x24
 801a18a:	e76a      	b.n	801a062 <_svfiprintf_r+0x52>
 801a18c:	fb0c 3202 	mla	r2, ip, r2, r3
 801a190:	460c      	mov	r4, r1
 801a192:	2001      	movs	r0, #1
 801a194:	e7a8      	b.n	801a0e8 <_svfiprintf_r+0xd8>
 801a196:	2300      	movs	r3, #0
 801a198:	3401      	adds	r4, #1
 801a19a:	9305      	str	r3, [sp, #20]
 801a19c:	4619      	mov	r1, r3
 801a19e:	f04f 0c0a 	mov.w	ip, #10
 801a1a2:	4620      	mov	r0, r4
 801a1a4:	f810 2b01 	ldrb.w	r2, [r0], #1
 801a1a8:	3a30      	subs	r2, #48	@ 0x30
 801a1aa:	2a09      	cmp	r2, #9
 801a1ac:	d903      	bls.n	801a1b6 <_svfiprintf_r+0x1a6>
 801a1ae:	2b00      	cmp	r3, #0
 801a1b0:	d0c6      	beq.n	801a140 <_svfiprintf_r+0x130>
 801a1b2:	9105      	str	r1, [sp, #20]
 801a1b4:	e7c4      	b.n	801a140 <_svfiprintf_r+0x130>
 801a1b6:	fb0c 2101 	mla	r1, ip, r1, r2
 801a1ba:	4604      	mov	r4, r0
 801a1bc:	2301      	movs	r3, #1
 801a1be:	e7f0      	b.n	801a1a2 <_svfiprintf_r+0x192>
 801a1c0:	ab03      	add	r3, sp, #12
 801a1c2:	9300      	str	r3, [sp, #0]
 801a1c4:	462a      	mov	r2, r5
 801a1c6:	4b0e      	ldr	r3, [pc, #56]	@ (801a200 <_svfiprintf_r+0x1f0>)
 801a1c8:	a904      	add	r1, sp, #16
 801a1ca:	4638      	mov	r0, r7
 801a1cc:	f3af 8000 	nop.w
 801a1d0:	1c42      	adds	r2, r0, #1
 801a1d2:	4606      	mov	r6, r0
 801a1d4:	d1d6      	bne.n	801a184 <_svfiprintf_r+0x174>
 801a1d6:	89ab      	ldrh	r3, [r5, #12]
 801a1d8:	065b      	lsls	r3, r3, #25
 801a1da:	f53f af2d 	bmi.w	801a038 <_svfiprintf_r+0x28>
 801a1de:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801a1e0:	e72c      	b.n	801a03c <_svfiprintf_r+0x2c>
 801a1e2:	ab03      	add	r3, sp, #12
 801a1e4:	9300      	str	r3, [sp, #0]
 801a1e6:	462a      	mov	r2, r5
 801a1e8:	4b05      	ldr	r3, [pc, #20]	@ (801a200 <_svfiprintf_r+0x1f0>)
 801a1ea:	a904      	add	r1, sp, #16
 801a1ec:	4638      	mov	r0, r7
 801a1ee:	f000 f9bb 	bl	801a568 <_printf_i>
 801a1f2:	e7ed      	b.n	801a1d0 <_svfiprintf_r+0x1c0>
 801a1f4:	0801b8ec 	.word	0x0801b8ec
 801a1f8:	0801b8f6 	.word	0x0801b8f6
 801a1fc:	00000000 	.word	0x00000000
 801a200:	08019f59 	.word	0x08019f59
 801a204:	0801b8f2 	.word	0x0801b8f2

0801a208 <__sfputc_r>:
 801a208:	6893      	ldr	r3, [r2, #8]
 801a20a:	3b01      	subs	r3, #1
 801a20c:	2b00      	cmp	r3, #0
 801a20e:	b410      	push	{r4}
 801a210:	6093      	str	r3, [r2, #8]
 801a212:	da08      	bge.n	801a226 <__sfputc_r+0x1e>
 801a214:	6994      	ldr	r4, [r2, #24]
 801a216:	42a3      	cmp	r3, r4
 801a218:	db01      	blt.n	801a21e <__sfputc_r+0x16>
 801a21a:	290a      	cmp	r1, #10
 801a21c:	d103      	bne.n	801a226 <__sfputc_r+0x1e>
 801a21e:	f85d 4b04 	ldr.w	r4, [sp], #4
 801a222:	f000 bb7f 	b.w	801a924 <__swbuf_r>
 801a226:	6813      	ldr	r3, [r2, #0]
 801a228:	1c58      	adds	r0, r3, #1
 801a22a:	6010      	str	r0, [r2, #0]
 801a22c:	7019      	strb	r1, [r3, #0]
 801a22e:	4608      	mov	r0, r1
 801a230:	f85d 4b04 	ldr.w	r4, [sp], #4
 801a234:	4770      	bx	lr

0801a236 <__sfputs_r>:
 801a236:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a238:	4606      	mov	r6, r0
 801a23a:	460f      	mov	r7, r1
 801a23c:	4614      	mov	r4, r2
 801a23e:	18d5      	adds	r5, r2, r3
 801a240:	42ac      	cmp	r4, r5
 801a242:	d101      	bne.n	801a248 <__sfputs_r+0x12>
 801a244:	2000      	movs	r0, #0
 801a246:	e007      	b.n	801a258 <__sfputs_r+0x22>
 801a248:	f814 1b01 	ldrb.w	r1, [r4], #1
 801a24c:	463a      	mov	r2, r7
 801a24e:	4630      	mov	r0, r6
 801a250:	f7ff ffda 	bl	801a208 <__sfputc_r>
 801a254:	1c43      	adds	r3, r0, #1
 801a256:	d1f3      	bne.n	801a240 <__sfputs_r+0xa>
 801a258:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0801a25c <_vfiprintf_r>:
 801a25c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a260:	460d      	mov	r5, r1
 801a262:	b09d      	sub	sp, #116	@ 0x74
 801a264:	4614      	mov	r4, r2
 801a266:	4698      	mov	r8, r3
 801a268:	4606      	mov	r6, r0
 801a26a:	b118      	cbz	r0, 801a274 <_vfiprintf_r+0x18>
 801a26c:	6a03      	ldr	r3, [r0, #32]
 801a26e:	b90b      	cbnz	r3, 801a274 <_vfiprintf_r+0x18>
 801a270:	f7ff fbb6 	bl	80199e0 <__sinit>
 801a274:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801a276:	07d9      	lsls	r1, r3, #31
 801a278:	d405      	bmi.n	801a286 <_vfiprintf_r+0x2a>
 801a27a:	89ab      	ldrh	r3, [r5, #12]
 801a27c:	059a      	lsls	r2, r3, #22
 801a27e:	d402      	bmi.n	801a286 <_vfiprintf_r+0x2a>
 801a280:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801a282:	f7ff fdd4 	bl	8019e2e <__retarget_lock_acquire_recursive>
 801a286:	89ab      	ldrh	r3, [r5, #12]
 801a288:	071b      	lsls	r3, r3, #28
 801a28a:	d501      	bpl.n	801a290 <_vfiprintf_r+0x34>
 801a28c:	692b      	ldr	r3, [r5, #16]
 801a28e:	b99b      	cbnz	r3, 801a2b8 <_vfiprintf_r+0x5c>
 801a290:	4629      	mov	r1, r5
 801a292:	4630      	mov	r0, r6
 801a294:	f000 fb84 	bl	801a9a0 <__swsetup_r>
 801a298:	b170      	cbz	r0, 801a2b8 <_vfiprintf_r+0x5c>
 801a29a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801a29c:	07dc      	lsls	r4, r3, #31
 801a29e:	d504      	bpl.n	801a2aa <_vfiprintf_r+0x4e>
 801a2a0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801a2a4:	b01d      	add	sp, #116	@ 0x74
 801a2a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a2aa:	89ab      	ldrh	r3, [r5, #12]
 801a2ac:	0598      	lsls	r0, r3, #22
 801a2ae:	d4f7      	bmi.n	801a2a0 <_vfiprintf_r+0x44>
 801a2b0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801a2b2:	f7ff fdbd 	bl	8019e30 <__retarget_lock_release_recursive>
 801a2b6:	e7f3      	b.n	801a2a0 <_vfiprintf_r+0x44>
 801a2b8:	2300      	movs	r3, #0
 801a2ba:	9309      	str	r3, [sp, #36]	@ 0x24
 801a2bc:	2320      	movs	r3, #32
 801a2be:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 801a2c2:	f8cd 800c 	str.w	r8, [sp, #12]
 801a2c6:	2330      	movs	r3, #48	@ 0x30
 801a2c8:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 801a478 <_vfiprintf_r+0x21c>
 801a2cc:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 801a2d0:	f04f 0901 	mov.w	r9, #1
 801a2d4:	4623      	mov	r3, r4
 801a2d6:	469a      	mov	sl, r3
 801a2d8:	f813 2b01 	ldrb.w	r2, [r3], #1
 801a2dc:	b10a      	cbz	r2, 801a2e2 <_vfiprintf_r+0x86>
 801a2de:	2a25      	cmp	r2, #37	@ 0x25
 801a2e0:	d1f9      	bne.n	801a2d6 <_vfiprintf_r+0x7a>
 801a2e2:	ebba 0b04 	subs.w	fp, sl, r4
 801a2e6:	d00b      	beq.n	801a300 <_vfiprintf_r+0xa4>
 801a2e8:	465b      	mov	r3, fp
 801a2ea:	4622      	mov	r2, r4
 801a2ec:	4629      	mov	r1, r5
 801a2ee:	4630      	mov	r0, r6
 801a2f0:	f7ff ffa1 	bl	801a236 <__sfputs_r>
 801a2f4:	3001      	adds	r0, #1
 801a2f6:	f000 80a7 	beq.w	801a448 <_vfiprintf_r+0x1ec>
 801a2fa:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801a2fc:	445a      	add	r2, fp
 801a2fe:	9209      	str	r2, [sp, #36]	@ 0x24
 801a300:	f89a 3000 	ldrb.w	r3, [sl]
 801a304:	2b00      	cmp	r3, #0
 801a306:	f000 809f 	beq.w	801a448 <_vfiprintf_r+0x1ec>
 801a30a:	2300      	movs	r3, #0
 801a30c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 801a310:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801a314:	f10a 0a01 	add.w	sl, sl, #1
 801a318:	9304      	str	r3, [sp, #16]
 801a31a:	9307      	str	r3, [sp, #28]
 801a31c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 801a320:	931a      	str	r3, [sp, #104]	@ 0x68
 801a322:	4654      	mov	r4, sl
 801a324:	2205      	movs	r2, #5
 801a326:	f814 1b01 	ldrb.w	r1, [r4], #1
 801a32a:	4853      	ldr	r0, [pc, #332]	@ (801a478 <_vfiprintf_r+0x21c>)
 801a32c:	f7e5 ff68 	bl	8000200 <memchr>
 801a330:	9a04      	ldr	r2, [sp, #16]
 801a332:	b9d8      	cbnz	r0, 801a36c <_vfiprintf_r+0x110>
 801a334:	06d1      	lsls	r1, r2, #27
 801a336:	bf44      	itt	mi
 801a338:	2320      	movmi	r3, #32
 801a33a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801a33e:	0713      	lsls	r3, r2, #28
 801a340:	bf44      	itt	mi
 801a342:	232b      	movmi	r3, #43	@ 0x2b
 801a344:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801a348:	f89a 3000 	ldrb.w	r3, [sl]
 801a34c:	2b2a      	cmp	r3, #42	@ 0x2a
 801a34e:	d015      	beq.n	801a37c <_vfiprintf_r+0x120>
 801a350:	9a07      	ldr	r2, [sp, #28]
 801a352:	4654      	mov	r4, sl
 801a354:	2000      	movs	r0, #0
 801a356:	f04f 0c0a 	mov.w	ip, #10
 801a35a:	4621      	mov	r1, r4
 801a35c:	f811 3b01 	ldrb.w	r3, [r1], #1
 801a360:	3b30      	subs	r3, #48	@ 0x30
 801a362:	2b09      	cmp	r3, #9
 801a364:	d94b      	bls.n	801a3fe <_vfiprintf_r+0x1a2>
 801a366:	b1b0      	cbz	r0, 801a396 <_vfiprintf_r+0x13a>
 801a368:	9207      	str	r2, [sp, #28]
 801a36a:	e014      	b.n	801a396 <_vfiprintf_r+0x13a>
 801a36c:	eba0 0308 	sub.w	r3, r0, r8
 801a370:	fa09 f303 	lsl.w	r3, r9, r3
 801a374:	4313      	orrs	r3, r2
 801a376:	9304      	str	r3, [sp, #16]
 801a378:	46a2      	mov	sl, r4
 801a37a:	e7d2      	b.n	801a322 <_vfiprintf_r+0xc6>
 801a37c:	9b03      	ldr	r3, [sp, #12]
 801a37e:	1d19      	adds	r1, r3, #4
 801a380:	681b      	ldr	r3, [r3, #0]
 801a382:	9103      	str	r1, [sp, #12]
 801a384:	2b00      	cmp	r3, #0
 801a386:	bfbb      	ittet	lt
 801a388:	425b      	neglt	r3, r3
 801a38a:	f042 0202 	orrlt.w	r2, r2, #2
 801a38e:	9307      	strge	r3, [sp, #28]
 801a390:	9307      	strlt	r3, [sp, #28]
 801a392:	bfb8      	it	lt
 801a394:	9204      	strlt	r2, [sp, #16]
 801a396:	7823      	ldrb	r3, [r4, #0]
 801a398:	2b2e      	cmp	r3, #46	@ 0x2e
 801a39a:	d10a      	bne.n	801a3b2 <_vfiprintf_r+0x156>
 801a39c:	7863      	ldrb	r3, [r4, #1]
 801a39e:	2b2a      	cmp	r3, #42	@ 0x2a
 801a3a0:	d132      	bne.n	801a408 <_vfiprintf_r+0x1ac>
 801a3a2:	9b03      	ldr	r3, [sp, #12]
 801a3a4:	1d1a      	adds	r2, r3, #4
 801a3a6:	681b      	ldr	r3, [r3, #0]
 801a3a8:	9203      	str	r2, [sp, #12]
 801a3aa:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 801a3ae:	3402      	adds	r4, #2
 801a3b0:	9305      	str	r3, [sp, #20]
 801a3b2:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 801a488 <_vfiprintf_r+0x22c>
 801a3b6:	7821      	ldrb	r1, [r4, #0]
 801a3b8:	2203      	movs	r2, #3
 801a3ba:	4650      	mov	r0, sl
 801a3bc:	f7e5 ff20 	bl	8000200 <memchr>
 801a3c0:	b138      	cbz	r0, 801a3d2 <_vfiprintf_r+0x176>
 801a3c2:	9b04      	ldr	r3, [sp, #16]
 801a3c4:	eba0 000a 	sub.w	r0, r0, sl
 801a3c8:	2240      	movs	r2, #64	@ 0x40
 801a3ca:	4082      	lsls	r2, r0
 801a3cc:	4313      	orrs	r3, r2
 801a3ce:	3401      	adds	r4, #1
 801a3d0:	9304      	str	r3, [sp, #16]
 801a3d2:	f814 1b01 	ldrb.w	r1, [r4], #1
 801a3d6:	4829      	ldr	r0, [pc, #164]	@ (801a47c <_vfiprintf_r+0x220>)
 801a3d8:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 801a3dc:	2206      	movs	r2, #6
 801a3de:	f7e5 ff0f 	bl	8000200 <memchr>
 801a3e2:	2800      	cmp	r0, #0
 801a3e4:	d03f      	beq.n	801a466 <_vfiprintf_r+0x20a>
 801a3e6:	4b26      	ldr	r3, [pc, #152]	@ (801a480 <_vfiprintf_r+0x224>)
 801a3e8:	bb1b      	cbnz	r3, 801a432 <_vfiprintf_r+0x1d6>
 801a3ea:	9b03      	ldr	r3, [sp, #12]
 801a3ec:	3307      	adds	r3, #7
 801a3ee:	f023 0307 	bic.w	r3, r3, #7
 801a3f2:	3308      	adds	r3, #8
 801a3f4:	9303      	str	r3, [sp, #12]
 801a3f6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801a3f8:	443b      	add	r3, r7
 801a3fa:	9309      	str	r3, [sp, #36]	@ 0x24
 801a3fc:	e76a      	b.n	801a2d4 <_vfiprintf_r+0x78>
 801a3fe:	fb0c 3202 	mla	r2, ip, r2, r3
 801a402:	460c      	mov	r4, r1
 801a404:	2001      	movs	r0, #1
 801a406:	e7a8      	b.n	801a35a <_vfiprintf_r+0xfe>
 801a408:	2300      	movs	r3, #0
 801a40a:	3401      	adds	r4, #1
 801a40c:	9305      	str	r3, [sp, #20]
 801a40e:	4619      	mov	r1, r3
 801a410:	f04f 0c0a 	mov.w	ip, #10
 801a414:	4620      	mov	r0, r4
 801a416:	f810 2b01 	ldrb.w	r2, [r0], #1
 801a41a:	3a30      	subs	r2, #48	@ 0x30
 801a41c:	2a09      	cmp	r2, #9
 801a41e:	d903      	bls.n	801a428 <_vfiprintf_r+0x1cc>
 801a420:	2b00      	cmp	r3, #0
 801a422:	d0c6      	beq.n	801a3b2 <_vfiprintf_r+0x156>
 801a424:	9105      	str	r1, [sp, #20]
 801a426:	e7c4      	b.n	801a3b2 <_vfiprintf_r+0x156>
 801a428:	fb0c 2101 	mla	r1, ip, r1, r2
 801a42c:	4604      	mov	r4, r0
 801a42e:	2301      	movs	r3, #1
 801a430:	e7f0      	b.n	801a414 <_vfiprintf_r+0x1b8>
 801a432:	ab03      	add	r3, sp, #12
 801a434:	9300      	str	r3, [sp, #0]
 801a436:	462a      	mov	r2, r5
 801a438:	4b12      	ldr	r3, [pc, #72]	@ (801a484 <_vfiprintf_r+0x228>)
 801a43a:	a904      	add	r1, sp, #16
 801a43c:	4630      	mov	r0, r6
 801a43e:	f3af 8000 	nop.w
 801a442:	4607      	mov	r7, r0
 801a444:	1c78      	adds	r0, r7, #1
 801a446:	d1d6      	bne.n	801a3f6 <_vfiprintf_r+0x19a>
 801a448:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801a44a:	07d9      	lsls	r1, r3, #31
 801a44c:	d405      	bmi.n	801a45a <_vfiprintf_r+0x1fe>
 801a44e:	89ab      	ldrh	r3, [r5, #12]
 801a450:	059a      	lsls	r2, r3, #22
 801a452:	d402      	bmi.n	801a45a <_vfiprintf_r+0x1fe>
 801a454:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801a456:	f7ff fceb 	bl	8019e30 <__retarget_lock_release_recursive>
 801a45a:	89ab      	ldrh	r3, [r5, #12]
 801a45c:	065b      	lsls	r3, r3, #25
 801a45e:	f53f af1f 	bmi.w	801a2a0 <_vfiprintf_r+0x44>
 801a462:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801a464:	e71e      	b.n	801a2a4 <_vfiprintf_r+0x48>
 801a466:	ab03      	add	r3, sp, #12
 801a468:	9300      	str	r3, [sp, #0]
 801a46a:	462a      	mov	r2, r5
 801a46c:	4b05      	ldr	r3, [pc, #20]	@ (801a484 <_vfiprintf_r+0x228>)
 801a46e:	a904      	add	r1, sp, #16
 801a470:	4630      	mov	r0, r6
 801a472:	f000 f879 	bl	801a568 <_printf_i>
 801a476:	e7e4      	b.n	801a442 <_vfiprintf_r+0x1e6>
 801a478:	0801b8ec 	.word	0x0801b8ec
 801a47c:	0801b8f6 	.word	0x0801b8f6
 801a480:	00000000 	.word	0x00000000
 801a484:	0801a237 	.word	0x0801a237
 801a488:	0801b8f2 	.word	0x0801b8f2

0801a48c <_printf_common>:
 801a48c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801a490:	4616      	mov	r6, r2
 801a492:	4698      	mov	r8, r3
 801a494:	688a      	ldr	r2, [r1, #8]
 801a496:	690b      	ldr	r3, [r1, #16]
 801a498:	f8dd 9020 	ldr.w	r9, [sp, #32]
 801a49c:	4293      	cmp	r3, r2
 801a49e:	bfb8      	it	lt
 801a4a0:	4613      	movlt	r3, r2
 801a4a2:	6033      	str	r3, [r6, #0]
 801a4a4:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 801a4a8:	4607      	mov	r7, r0
 801a4aa:	460c      	mov	r4, r1
 801a4ac:	b10a      	cbz	r2, 801a4b2 <_printf_common+0x26>
 801a4ae:	3301      	adds	r3, #1
 801a4b0:	6033      	str	r3, [r6, #0]
 801a4b2:	6823      	ldr	r3, [r4, #0]
 801a4b4:	0699      	lsls	r1, r3, #26
 801a4b6:	bf42      	ittt	mi
 801a4b8:	6833      	ldrmi	r3, [r6, #0]
 801a4ba:	3302      	addmi	r3, #2
 801a4bc:	6033      	strmi	r3, [r6, #0]
 801a4be:	6825      	ldr	r5, [r4, #0]
 801a4c0:	f015 0506 	ands.w	r5, r5, #6
 801a4c4:	d106      	bne.n	801a4d4 <_printf_common+0x48>
 801a4c6:	f104 0a19 	add.w	sl, r4, #25
 801a4ca:	68e3      	ldr	r3, [r4, #12]
 801a4cc:	6832      	ldr	r2, [r6, #0]
 801a4ce:	1a9b      	subs	r3, r3, r2
 801a4d0:	42ab      	cmp	r3, r5
 801a4d2:	dc26      	bgt.n	801a522 <_printf_common+0x96>
 801a4d4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 801a4d8:	6822      	ldr	r2, [r4, #0]
 801a4da:	3b00      	subs	r3, #0
 801a4dc:	bf18      	it	ne
 801a4de:	2301      	movne	r3, #1
 801a4e0:	0692      	lsls	r2, r2, #26
 801a4e2:	d42b      	bmi.n	801a53c <_printf_common+0xb0>
 801a4e4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 801a4e8:	4641      	mov	r1, r8
 801a4ea:	4638      	mov	r0, r7
 801a4ec:	47c8      	blx	r9
 801a4ee:	3001      	adds	r0, #1
 801a4f0:	d01e      	beq.n	801a530 <_printf_common+0xa4>
 801a4f2:	6823      	ldr	r3, [r4, #0]
 801a4f4:	6922      	ldr	r2, [r4, #16]
 801a4f6:	f003 0306 	and.w	r3, r3, #6
 801a4fa:	2b04      	cmp	r3, #4
 801a4fc:	bf02      	ittt	eq
 801a4fe:	68e5      	ldreq	r5, [r4, #12]
 801a500:	6833      	ldreq	r3, [r6, #0]
 801a502:	1aed      	subeq	r5, r5, r3
 801a504:	68a3      	ldr	r3, [r4, #8]
 801a506:	bf0c      	ite	eq
 801a508:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801a50c:	2500      	movne	r5, #0
 801a50e:	4293      	cmp	r3, r2
 801a510:	bfc4      	itt	gt
 801a512:	1a9b      	subgt	r3, r3, r2
 801a514:	18ed      	addgt	r5, r5, r3
 801a516:	2600      	movs	r6, #0
 801a518:	341a      	adds	r4, #26
 801a51a:	42b5      	cmp	r5, r6
 801a51c:	d11a      	bne.n	801a554 <_printf_common+0xc8>
 801a51e:	2000      	movs	r0, #0
 801a520:	e008      	b.n	801a534 <_printf_common+0xa8>
 801a522:	2301      	movs	r3, #1
 801a524:	4652      	mov	r2, sl
 801a526:	4641      	mov	r1, r8
 801a528:	4638      	mov	r0, r7
 801a52a:	47c8      	blx	r9
 801a52c:	3001      	adds	r0, #1
 801a52e:	d103      	bne.n	801a538 <_printf_common+0xac>
 801a530:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801a534:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801a538:	3501      	adds	r5, #1
 801a53a:	e7c6      	b.n	801a4ca <_printf_common+0x3e>
 801a53c:	18e1      	adds	r1, r4, r3
 801a53e:	1c5a      	adds	r2, r3, #1
 801a540:	2030      	movs	r0, #48	@ 0x30
 801a542:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 801a546:	4422      	add	r2, r4
 801a548:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 801a54c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 801a550:	3302      	adds	r3, #2
 801a552:	e7c7      	b.n	801a4e4 <_printf_common+0x58>
 801a554:	2301      	movs	r3, #1
 801a556:	4622      	mov	r2, r4
 801a558:	4641      	mov	r1, r8
 801a55a:	4638      	mov	r0, r7
 801a55c:	47c8      	blx	r9
 801a55e:	3001      	adds	r0, #1
 801a560:	d0e6      	beq.n	801a530 <_printf_common+0xa4>
 801a562:	3601      	adds	r6, #1
 801a564:	e7d9      	b.n	801a51a <_printf_common+0x8e>
	...

0801a568 <_printf_i>:
 801a568:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801a56c:	7e0f      	ldrb	r7, [r1, #24]
 801a56e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 801a570:	2f78      	cmp	r7, #120	@ 0x78
 801a572:	4691      	mov	r9, r2
 801a574:	4680      	mov	r8, r0
 801a576:	460c      	mov	r4, r1
 801a578:	469a      	mov	sl, r3
 801a57a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 801a57e:	d807      	bhi.n	801a590 <_printf_i+0x28>
 801a580:	2f62      	cmp	r7, #98	@ 0x62
 801a582:	d80a      	bhi.n	801a59a <_printf_i+0x32>
 801a584:	2f00      	cmp	r7, #0
 801a586:	f000 80d2 	beq.w	801a72e <_printf_i+0x1c6>
 801a58a:	2f58      	cmp	r7, #88	@ 0x58
 801a58c:	f000 80b9 	beq.w	801a702 <_printf_i+0x19a>
 801a590:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 801a594:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 801a598:	e03a      	b.n	801a610 <_printf_i+0xa8>
 801a59a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 801a59e:	2b15      	cmp	r3, #21
 801a5a0:	d8f6      	bhi.n	801a590 <_printf_i+0x28>
 801a5a2:	a101      	add	r1, pc, #4	@ (adr r1, 801a5a8 <_printf_i+0x40>)
 801a5a4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 801a5a8:	0801a601 	.word	0x0801a601
 801a5ac:	0801a615 	.word	0x0801a615
 801a5b0:	0801a591 	.word	0x0801a591
 801a5b4:	0801a591 	.word	0x0801a591
 801a5b8:	0801a591 	.word	0x0801a591
 801a5bc:	0801a591 	.word	0x0801a591
 801a5c0:	0801a615 	.word	0x0801a615
 801a5c4:	0801a591 	.word	0x0801a591
 801a5c8:	0801a591 	.word	0x0801a591
 801a5cc:	0801a591 	.word	0x0801a591
 801a5d0:	0801a591 	.word	0x0801a591
 801a5d4:	0801a715 	.word	0x0801a715
 801a5d8:	0801a63f 	.word	0x0801a63f
 801a5dc:	0801a6cf 	.word	0x0801a6cf
 801a5e0:	0801a591 	.word	0x0801a591
 801a5e4:	0801a591 	.word	0x0801a591
 801a5e8:	0801a737 	.word	0x0801a737
 801a5ec:	0801a591 	.word	0x0801a591
 801a5f0:	0801a63f 	.word	0x0801a63f
 801a5f4:	0801a591 	.word	0x0801a591
 801a5f8:	0801a591 	.word	0x0801a591
 801a5fc:	0801a6d7 	.word	0x0801a6d7
 801a600:	6833      	ldr	r3, [r6, #0]
 801a602:	1d1a      	adds	r2, r3, #4
 801a604:	681b      	ldr	r3, [r3, #0]
 801a606:	6032      	str	r2, [r6, #0]
 801a608:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 801a60c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 801a610:	2301      	movs	r3, #1
 801a612:	e09d      	b.n	801a750 <_printf_i+0x1e8>
 801a614:	6833      	ldr	r3, [r6, #0]
 801a616:	6820      	ldr	r0, [r4, #0]
 801a618:	1d19      	adds	r1, r3, #4
 801a61a:	6031      	str	r1, [r6, #0]
 801a61c:	0606      	lsls	r6, r0, #24
 801a61e:	d501      	bpl.n	801a624 <_printf_i+0xbc>
 801a620:	681d      	ldr	r5, [r3, #0]
 801a622:	e003      	b.n	801a62c <_printf_i+0xc4>
 801a624:	0645      	lsls	r5, r0, #25
 801a626:	d5fb      	bpl.n	801a620 <_printf_i+0xb8>
 801a628:	f9b3 5000 	ldrsh.w	r5, [r3]
 801a62c:	2d00      	cmp	r5, #0
 801a62e:	da03      	bge.n	801a638 <_printf_i+0xd0>
 801a630:	232d      	movs	r3, #45	@ 0x2d
 801a632:	426d      	negs	r5, r5
 801a634:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 801a638:	4859      	ldr	r0, [pc, #356]	@ (801a7a0 <_printf_i+0x238>)
 801a63a:	230a      	movs	r3, #10
 801a63c:	e011      	b.n	801a662 <_printf_i+0xfa>
 801a63e:	6821      	ldr	r1, [r4, #0]
 801a640:	6833      	ldr	r3, [r6, #0]
 801a642:	0608      	lsls	r0, r1, #24
 801a644:	f853 5b04 	ldr.w	r5, [r3], #4
 801a648:	d402      	bmi.n	801a650 <_printf_i+0xe8>
 801a64a:	0649      	lsls	r1, r1, #25
 801a64c:	bf48      	it	mi
 801a64e:	b2ad      	uxthmi	r5, r5
 801a650:	2f6f      	cmp	r7, #111	@ 0x6f
 801a652:	4853      	ldr	r0, [pc, #332]	@ (801a7a0 <_printf_i+0x238>)
 801a654:	6033      	str	r3, [r6, #0]
 801a656:	bf14      	ite	ne
 801a658:	230a      	movne	r3, #10
 801a65a:	2308      	moveq	r3, #8
 801a65c:	2100      	movs	r1, #0
 801a65e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 801a662:	6866      	ldr	r6, [r4, #4]
 801a664:	60a6      	str	r6, [r4, #8]
 801a666:	2e00      	cmp	r6, #0
 801a668:	bfa2      	ittt	ge
 801a66a:	6821      	ldrge	r1, [r4, #0]
 801a66c:	f021 0104 	bicge.w	r1, r1, #4
 801a670:	6021      	strge	r1, [r4, #0]
 801a672:	b90d      	cbnz	r5, 801a678 <_printf_i+0x110>
 801a674:	2e00      	cmp	r6, #0
 801a676:	d04b      	beq.n	801a710 <_printf_i+0x1a8>
 801a678:	4616      	mov	r6, r2
 801a67a:	fbb5 f1f3 	udiv	r1, r5, r3
 801a67e:	fb03 5711 	mls	r7, r3, r1, r5
 801a682:	5dc7      	ldrb	r7, [r0, r7]
 801a684:	f806 7d01 	strb.w	r7, [r6, #-1]!
 801a688:	462f      	mov	r7, r5
 801a68a:	42bb      	cmp	r3, r7
 801a68c:	460d      	mov	r5, r1
 801a68e:	d9f4      	bls.n	801a67a <_printf_i+0x112>
 801a690:	2b08      	cmp	r3, #8
 801a692:	d10b      	bne.n	801a6ac <_printf_i+0x144>
 801a694:	6823      	ldr	r3, [r4, #0]
 801a696:	07df      	lsls	r7, r3, #31
 801a698:	d508      	bpl.n	801a6ac <_printf_i+0x144>
 801a69a:	6923      	ldr	r3, [r4, #16]
 801a69c:	6861      	ldr	r1, [r4, #4]
 801a69e:	4299      	cmp	r1, r3
 801a6a0:	bfde      	ittt	le
 801a6a2:	2330      	movle	r3, #48	@ 0x30
 801a6a4:	f806 3c01 	strble.w	r3, [r6, #-1]
 801a6a8:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 801a6ac:	1b92      	subs	r2, r2, r6
 801a6ae:	6122      	str	r2, [r4, #16]
 801a6b0:	f8cd a000 	str.w	sl, [sp]
 801a6b4:	464b      	mov	r3, r9
 801a6b6:	aa03      	add	r2, sp, #12
 801a6b8:	4621      	mov	r1, r4
 801a6ba:	4640      	mov	r0, r8
 801a6bc:	f7ff fee6 	bl	801a48c <_printf_common>
 801a6c0:	3001      	adds	r0, #1
 801a6c2:	d14a      	bne.n	801a75a <_printf_i+0x1f2>
 801a6c4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801a6c8:	b004      	add	sp, #16
 801a6ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801a6ce:	6823      	ldr	r3, [r4, #0]
 801a6d0:	f043 0320 	orr.w	r3, r3, #32
 801a6d4:	6023      	str	r3, [r4, #0]
 801a6d6:	4833      	ldr	r0, [pc, #204]	@ (801a7a4 <_printf_i+0x23c>)
 801a6d8:	2778      	movs	r7, #120	@ 0x78
 801a6da:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 801a6de:	6823      	ldr	r3, [r4, #0]
 801a6e0:	6831      	ldr	r1, [r6, #0]
 801a6e2:	061f      	lsls	r7, r3, #24
 801a6e4:	f851 5b04 	ldr.w	r5, [r1], #4
 801a6e8:	d402      	bmi.n	801a6f0 <_printf_i+0x188>
 801a6ea:	065f      	lsls	r7, r3, #25
 801a6ec:	bf48      	it	mi
 801a6ee:	b2ad      	uxthmi	r5, r5
 801a6f0:	6031      	str	r1, [r6, #0]
 801a6f2:	07d9      	lsls	r1, r3, #31
 801a6f4:	bf44      	itt	mi
 801a6f6:	f043 0320 	orrmi.w	r3, r3, #32
 801a6fa:	6023      	strmi	r3, [r4, #0]
 801a6fc:	b11d      	cbz	r5, 801a706 <_printf_i+0x19e>
 801a6fe:	2310      	movs	r3, #16
 801a700:	e7ac      	b.n	801a65c <_printf_i+0xf4>
 801a702:	4827      	ldr	r0, [pc, #156]	@ (801a7a0 <_printf_i+0x238>)
 801a704:	e7e9      	b.n	801a6da <_printf_i+0x172>
 801a706:	6823      	ldr	r3, [r4, #0]
 801a708:	f023 0320 	bic.w	r3, r3, #32
 801a70c:	6023      	str	r3, [r4, #0]
 801a70e:	e7f6      	b.n	801a6fe <_printf_i+0x196>
 801a710:	4616      	mov	r6, r2
 801a712:	e7bd      	b.n	801a690 <_printf_i+0x128>
 801a714:	6833      	ldr	r3, [r6, #0]
 801a716:	6825      	ldr	r5, [r4, #0]
 801a718:	6961      	ldr	r1, [r4, #20]
 801a71a:	1d18      	adds	r0, r3, #4
 801a71c:	6030      	str	r0, [r6, #0]
 801a71e:	062e      	lsls	r6, r5, #24
 801a720:	681b      	ldr	r3, [r3, #0]
 801a722:	d501      	bpl.n	801a728 <_printf_i+0x1c0>
 801a724:	6019      	str	r1, [r3, #0]
 801a726:	e002      	b.n	801a72e <_printf_i+0x1c6>
 801a728:	0668      	lsls	r0, r5, #25
 801a72a:	d5fb      	bpl.n	801a724 <_printf_i+0x1bc>
 801a72c:	8019      	strh	r1, [r3, #0]
 801a72e:	2300      	movs	r3, #0
 801a730:	6123      	str	r3, [r4, #16]
 801a732:	4616      	mov	r6, r2
 801a734:	e7bc      	b.n	801a6b0 <_printf_i+0x148>
 801a736:	6833      	ldr	r3, [r6, #0]
 801a738:	1d1a      	adds	r2, r3, #4
 801a73a:	6032      	str	r2, [r6, #0]
 801a73c:	681e      	ldr	r6, [r3, #0]
 801a73e:	6862      	ldr	r2, [r4, #4]
 801a740:	2100      	movs	r1, #0
 801a742:	4630      	mov	r0, r6
 801a744:	f7e5 fd5c 	bl	8000200 <memchr>
 801a748:	b108      	cbz	r0, 801a74e <_printf_i+0x1e6>
 801a74a:	1b80      	subs	r0, r0, r6
 801a74c:	6060      	str	r0, [r4, #4]
 801a74e:	6863      	ldr	r3, [r4, #4]
 801a750:	6123      	str	r3, [r4, #16]
 801a752:	2300      	movs	r3, #0
 801a754:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 801a758:	e7aa      	b.n	801a6b0 <_printf_i+0x148>
 801a75a:	6923      	ldr	r3, [r4, #16]
 801a75c:	4632      	mov	r2, r6
 801a75e:	4649      	mov	r1, r9
 801a760:	4640      	mov	r0, r8
 801a762:	47d0      	blx	sl
 801a764:	3001      	adds	r0, #1
 801a766:	d0ad      	beq.n	801a6c4 <_printf_i+0x15c>
 801a768:	6823      	ldr	r3, [r4, #0]
 801a76a:	079b      	lsls	r3, r3, #30
 801a76c:	d413      	bmi.n	801a796 <_printf_i+0x22e>
 801a76e:	68e0      	ldr	r0, [r4, #12]
 801a770:	9b03      	ldr	r3, [sp, #12]
 801a772:	4298      	cmp	r0, r3
 801a774:	bfb8      	it	lt
 801a776:	4618      	movlt	r0, r3
 801a778:	e7a6      	b.n	801a6c8 <_printf_i+0x160>
 801a77a:	2301      	movs	r3, #1
 801a77c:	4632      	mov	r2, r6
 801a77e:	4649      	mov	r1, r9
 801a780:	4640      	mov	r0, r8
 801a782:	47d0      	blx	sl
 801a784:	3001      	adds	r0, #1
 801a786:	d09d      	beq.n	801a6c4 <_printf_i+0x15c>
 801a788:	3501      	adds	r5, #1
 801a78a:	68e3      	ldr	r3, [r4, #12]
 801a78c:	9903      	ldr	r1, [sp, #12]
 801a78e:	1a5b      	subs	r3, r3, r1
 801a790:	42ab      	cmp	r3, r5
 801a792:	dcf2      	bgt.n	801a77a <_printf_i+0x212>
 801a794:	e7eb      	b.n	801a76e <_printf_i+0x206>
 801a796:	2500      	movs	r5, #0
 801a798:	f104 0619 	add.w	r6, r4, #25
 801a79c:	e7f5      	b.n	801a78a <_printf_i+0x222>
 801a79e:	bf00      	nop
 801a7a0:	0801b8fd 	.word	0x0801b8fd
 801a7a4:	0801b90e 	.word	0x0801b90e

0801a7a8 <__sflush_r>:
 801a7a8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 801a7ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801a7b0:	0716      	lsls	r6, r2, #28
 801a7b2:	4605      	mov	r5, r0
 801a7b4:	460c      	mov	r4, r1
 801a7b6:	d454      	bmi.n	801a862 <__sflush_r+0xba>
 801a7b8:	684b      	ldr	r3, [r1, #4]
 801a7ba:	2b00      	cmp	r3, #0
 801a7bc:	dc02      	bgt.n	801a7c4 <__sflush_r+0x1c>
 801a7be:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 801a7c0:	2b00      	cmp	r3, #0
 801a7c2:	dd48      	ble.n	801a856 <__sflush_r+0xae>
 801a7c4:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 801a7c6:	2e00      	cmp	r6, #0
 801a7c8:	d045      	beq.n	801a856 <__sflush_r+0xae>
 801a7ca:	2300      	movs	r3, #0
 801a7cc:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 801a7d0:	682f      	ldr	r7, [r5, #0]
 801a7d2:	6a21      	ldr	r1, [r4, #32]
 801a7d4:	602b      	str	r3, [r5, #0]
 801a7d6:	d030      	beq.n	801a83a <__sflush_r+0x92>
 801a7d8:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 801a7da:	89a3      	ldrh	r3, [r4, #12]
 801a7dc:	0759      	lsls	r1, r3, #29
 801a7de:	d505      	bpl.n	801a7ec <__sflush_r+0x44>
 801a7e0:	6863      	ldr	r3, [r4, #4]
 801a7e2:	1ad2      	subs	r2, r2, r3
 801a7e4:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 801a7e6:	b10b      	cbz	r3, 801a7ec <__sflush_r+0x44>
 801a7e8:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 801a7ea:	1ad2      	subs	r2, r2, r3
 801a7ec:	2300      	movs	r3, #0
 801a7ee:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 801a7f0:	6a21      	ldr	r1, [r4, #32]
 801a7f2:	4628      	mov	r0, r5
 801a7f4:	47b0      	blx	r6
 801a7f6:	1c43      	adds	r3, r0, #1
 801a7f8:	89a3      	ldrh	r3, [r4, #12]
 801a7fa:	d106      	bne.n	801a80a <__sflush_r+0x62>
 801a7fc:	6829      	ldr	r1, [r5, #0]
 801a7fe:	291d      	cmp	r1, #29
 801a800:	d82b      	bhi.n	801a85a <__sflush_r+0xb2>
 801a802:	4a2a      	ldr	r2, [pc, #168]	@ (801a8ac <__sflush_r+0x104>)
 801a804:	410a      	asrs	r2, r1
 801a806:	07d6      	lsls	r6, r2, #31
 801a808:	d427      	bmi.n	801a85a <__sflush_r+0xb2>
 801a80a:	2200      	movs	r2, #0
 801a80c:	6062      	str	r2, [r4, #4]
 801a80e:	04d9      	lsls	r1, r3, #19
 801a810:	6922      	ldr	r2, [r4, #16]
 801a812:	6022      	str	r2, [r4, #0]
 801a814:	d504      	bpl.n	801a820 <__sflush_r+0x78>
 801a816:	1c42      	adds	r2, r0, #1
 801a818:	d101      	bne.n	801a81e <__sflush_r+0x76>
 801a81a:	682b      	ldr	r3, [r5, #0]
 801a81c:	b903      	cbnz	r3, 801a820 <__sflush_r+0x78>
 801a81e:	6560      	str	r0, [r4, #84]	@ 0x54
 801a820:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801a822:	602f      	str	r7, [r5, #0]
 801a824:	b1b9      	cbz	r1, 801a856 <__sflush_r+0xae>
 801a826:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 801a82a:	4299      	cmp	r1, r3
 801a82c:	d002      	beq.n	801a834 <__sflush_r+0x8c>
 801a82e:	4628      	mov	r0, r5
 801a830:	f7ff fb40 	bl	8019eb4 <_free_r>
 801a834:	2300      	movs	r3, #0
 801a836:	6363      	str	r3, [r4, #52]	@ 0x34
 801a838:	e00d      	b.n	801a856 <__sflush_r+0xae>
 801a83a:	2301      	movs	r3, #1
 801a83c:	4628      	mov	r0, r5
 801a83e:	47b0      	blx	r6
 801a840:	4602      	mov	r2, r0
 801a842:	1c50      	adds	r0, r2, #1
 801a844:	d1c9      	bne.n	801a7da <__sflush_r+0x32>
 801a846:	682b      	ldr	r3, [r5, #0]
 801a848:	2b00      	cmp	r3, #0
 801a84a:	d0c6      	beq.n	801a7da <__sflush_r+0x32>
 801a84c:	2b1d      	cmp	r3, #29
 801a84e:	d001      	beq.n	801a854 <__sflush_r+0xac>
 801a850:	2b16      	cmp	r3, #22
 801a852:	d11e      	bne.n	801a892 <__sflush_r+0xea>
 801a854:	602f      	str	r7, [r5, #0]
 801a856:	2000      	movs	r0, #0
 801a858:	e022      	b.n	801a8a0 <__sflush_r+0xf8>
 801a85a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801a85e:	b21b      	sxth	r3, r3
 801a860:	e01b      	b.n	801a89a <__sflush_r+0xf2>
 801a862:	690f      	ldr	r7, [r1, #16]
 801a864:	2f00      	cmp	r7, #0
 801a866:	d0f6      	beq.n	801a856 <__sflush_r+0xae>
 801a868:	0793      	lsls	r3, r2, #30
 801a86a:	680e      	ldr	r6, [r1, #0]
 801a86c:	bf08      	it	eq
 801a86e:	694b      	ldreq	r3, [r1, #20]
 801a870:	600f      	str	r7, [r1, #0]
 801a872:	bf18      	it	ne
 801a874:	2300      	movne	r3, #0
 801a876:	eba6 0807 	sub.w	r8, r6, r7
 801a87a:	608b      	str	r3, [r1, #8]
 801a87c:	f1b8 0f00 	cmp.w	r8, #0
 801a880:	dde9      	ble.n	801a856 <__sflush_r+0xae>
 801a882:	6a21      	ldr	r1, [r4, #32]
 801a884:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 801a886:	4643      	mov	r3, r8
 801a888:	463a      	mov	r2, r7
 801a88a:	4628      	mov	r0, r5
 801a88c:	47b0      	blx	r6
 801a88e:	2800      	cmp	r0, #0
 801a890:	dc08      	bgt.n	801a8a4 <__sflush_r+0xfc>
 801a892:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801a896:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801a89a:	81a3      	strh	r3, [r4, #12]
 801a89c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801a8a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801a8a4:	4407      	add	r7, r0
 801a8a6:	eba8 0800 	sub.w	r8, r8, r0
 801a8aa:	e7e7      	b.n	801a87c <__sflush_r+0xd4>
 801a8ac:	dfbffffe 	.word	0xdfbffffe

0801a8b0 <_fflush_r>:
 801a8b0:	b538      	push	{r3, r4, r5, lr}
 801a8b2:	690b      	ldr	r3, [r1, #16]
 801a8b4:	4605      	mov	r5, r0
 801a8b6:	460c      	mov	r4, r1
 801a8b8:	b913      	cbnz	r3, 801a8c0 <_fflush_r+0x10>
 801a8ba:	2500      	movs	r5, #0
 801a8bc:	4628      	mov	r0, r5
 801a8be:	bd38      	pop	{r3, r4, r5, pc}
 801a8c0:	b118      	cbz	r0, 801a8ca <_fflush_r+0x1a>
 801a8c2:	6a03      	ldr	r3, [r0, #32]
 801a8c4:	b90b      	cbnz	r3, 801a8ca <_fflush_r+0x1a>
 801a8c6:	f7ff f88b 	bl	80199e0 <__sinit>
 801a8ca:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801a8ce:	2b00      	cmp	r3, #0
 801a8d0:	d0f3      	beq.n	801a8ba <_fflush_r+0xa>
 801a8d2:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 801a8d4:	07d0      	lsls	r0, r2, #31
 801a8d6:	d404      	bmi.n	801a8e2 <_fflush_r+0x32>
 801a8d8:	0599      	lsls	r1, r3, #22
 801a8da:	d402      	bmi.n	801a8e2 <_fflush_r+0x32>
 801a8dc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801a8de:	f7ff faa6 	bl	8019e2e <__retarget_lock_acquire_recursive>
 801a8e2:	4628      	mov	r0, r5
 801a8e4:	4621      	mov	r1, r4
 801a8e6:	f7ff ff5f 	bl	801a7a8 <__sflush_r>
 801a8ea:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801a8ec:	07da      	lsls	r2, r3, #31
 801a8ee:	4605      	mov	r5, r0
 801a8f0:	d4e4      	bmi.n	801a8bc <_fflush_r+0xc>
 801a8f2:	89a3      	ldrh	r3, [r4, #12]
 801a8f4:	059b      	lsls	r3, r3, #22
 801a8f6:	d4e1      	bmi.n	801a8bc <_fflush_r+0xc>
 801a8f8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801a8fa:	f7ff fa99 	bl	8019e30 <__retarget_lock_release_recursive>
 801a8fe:	e7dd      	b.n	801a8bc <_fflush_r+0xc>

0801a900 <fiprintf>:
 801a900:	b40e      	push	{r1, r2, r3}
 801a902:	b503      	push	{r0, r1, lr}
 801a904:	4601      	mov	r1, r0
 801a906:	ab03      	add	r3, sp, #12
 801a908:	4805      	ldr	r0, [pc, #20]	@ (801a920 <fiprintf+0x20>)
 801a90a:	f853 2b04 	ldr.w	r2, [r3], #4
 801a90e:	6800      	ldr	r0, [r0, #0]
 801a910:	9301      	str	r3, [sp, #4]
 801a912:	f7ff fca3 	bl	801a25c <_vfiprintf_r>
 801a916:	b002      	add	sp, #8
 801a918:	f85d eb04 	ldr.w	lr, [sp], #4
 801a91c:	b003      	add	sp, #12
 801a91e:	4770      	bx	lr
 801a920:	20000104 	.word	0x20000104

0801a924 <__swbuf_r>:
 801a924:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a926:	460e      	mov	r6, r1
 801a928:	4614      	mov	r4, r2
 801a92a:	4605      	mov	r5, r0
 801a92c:	b118      	cbz	r0, 801a936 <__swbuf_r+0x12>
 801a92e:	6a03      	ldr	r3, [r0, #32]
 801a930:	b90b      	cbnz	r3, 801a936 <__swbuf_r+0x12>
 801a932:	f7ff f855 	bl	80199e0 <__sinit>
 801a936:	69a3      	ldr	r3, [r4, #24]
 801a938:	60a3      	str	r3, [r4, #8]
 801a93a:	89a3      	ldrh	r3, [r4, #12]
 801a93c:	071a      	lsls	r2, r3, #28
 801a93e:	d501      	bpl.n	801a944 <__swbuf_r+0x20>
 801a940:	6923      	ldr	r3, [r4, #16]
 801a942:	b943      	cbnz	r3, 801a956 <__swbuf_r+0x32>
 801a944:	4621      	mov	r1, r4
 801a946:	4628      	mov	r0, r5
 801a948:	f000 f82a 	bl	801a9a0 <__swsetup_r>
 801a94c:	b118      	cbz	r0, 801a956 <__swbuf_r+0x32>
 801a94e:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 801a952:	4638      	mov	r0, r7
 801a954:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801a956:	6823      	ldr	r3, [r4, #0]
 801a958:	6922      	ldr	r2, [r4, #16]
 801a95a:	1a98      	subs	r0, r3, r2
 801a95c:	6963      	ldr	r3, [r4, #20]
 801a95e:	b2f6      	uxtb	r6, r6
 801a960:	4283      	cmp	r3, r0
 801a962:	4637      	mov	r7, r6
 801a964:	dc05      	bgt.n	801a972 <__swbuf_r+0x4e>
 801a966:	4621      	mov	r1, r4
 801a968:	4628      	mov	r0, r5
 801a96a:	f7ff ffa1 	bl	801a8b0 <_fflush_r>
 801a96e:	2800      	cmp	r0, #0
 801a970:	d1ed      	bne.n	801a94e <__swbuf_r+0x2a>
 801a972:	68a3      	ldr	r3, [r4, #8]
 801a974:	3b01      	subs	r3, #1
 801a976:	60a3      	str	r3, [r4, #8]
 801a978:	6823      	ldr	r3, [r4, #0]
 801a97a:	1c5a      	adds	r2, r3, #1
 801a97c:	6022      	str	r2, [r4, #0]
 801a97e:	701e      	strb	r6, [r3, #0]
 801a980:	6962      	ldr	r2, [r4, #20]
 801a982:	1c43      	adds	r3, r0, #1
 801a984:	429a      	cmp	r2, r3
 801a986:	d004      	beq.n	801a992 <__swbuf_r+0x6e>
 801a988:	89a3      	ldrh	r3, [r4, #12]
 801a98a:	07db      	lsls	r3, r3, #31
 801a98c:	d5e1      	bpl.n	801a952 <__swbuf_r+0x2e>
 801a98e:	2e0a      	cmp	r6, #10
 801a990:	d1df      	bne.n	801a952 <__swbuf_r+0x2e>
 801a992:	4621      	mov	r1, r4
 801a994:	4628      	mov	r0, r5
 801a996:	f7ff ff8b 	bl	801a8b0 <_fflush_r>
 801a99a:	2800      	cmp	r0, #0
 801a99c:	d0d9      	beq.n	801a952 <__swbuf_r+0x2e>
 801a99e:	e7d6      	b.n	801a94e <__swbuf_r+0x2a>

0801a9a0 <__swsetup_r>:
 801a9a0:	b538      	push	{r3, r4, r5, lr}
 801a9a2:	4b29      	ldr	r3, [pc, #164]	@ (801aa48 <__swsetup_r+0xa8>)
 801a9a4:	4605      	mov	r5, r0
 801a9a6:	6818      	ldr	r0, [r3, #0]
 801a9a8:	460c      	mov	r4, r1
 801a9aa:	b118      	cbz	r0, 801a9b4 <__swsetup_r+0x14>
 801a9ac:	6a03      	ldr	r3, [r0, #32]
 801a9ae:	b90b      	cbnz	r3, 801a9b4 <__swsetup_r+0x14>
 801a9b0:	f7ff f816 	bl	80199e0 <__sinit>
 801a9b4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801a9b8:	0719      	lsls	r1, r3, #28
 801a9ba:	d422      	bmi.n	801aa02 <__swsetup_r+0x62>
 801a9bc:	06da      	lsls	r2, r3, #27
 801a9be:	d407      	bmi.n	801a9d0 <__swsetup_r+0x30>
 801a9c0:	2209      	movs	r2, #9
 801a9c2:	602a      	str	r2, [r5, #0]
 801a9c4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801a9c8:	81a3      	strh	r3, [r4, #12]
 801a9ca:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801a9ce:	e033      	b.n	801aa38 <__swsetup_r+0x98>
 801a9d0:	0758      	lsls	r0, r3, #29
 801a9d2:	d512      	bpl.n	801a9fa <__swsetup_r+0x5a>
 801a9d4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801a9d6:	b141      	cbz	r1, 801a9ea <__swsetup_r+0x4a>
 801a9d8:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 801a9dc:	4299      	cmp	r1, r3
 801a9de:	d002      	beq.n	801a9e6 <__swsetup_r+0x46>
 801a9e0:	4628      	mov	r0, r5
 801a9e2:	f7ff fa67 	bl	8019eb4 <_free_r>
 801a9e6:	2300      	movs	r3, #0
 801a9e8:	6363      	str	r3, [r4, #52]	@ 0x34
 801a9ea:	89a3      	ldrh	r3, [r4, #12]
 801a9ec:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 801a9f0:	81a3      	strh	r3, [r4, #12]
 801a9f2:	2300      	movs	r3, #0
 801a9f4:	6063      	str	r3, [r4, #4]
 801a9f6:	6923      	ldr	r3, [r4, #16]
 801a9f8:	6023      	str	r3, [r4, #0]
 801a9fa:	89a3      	ldrh	r3, [r4, #12]
 801a9fc:	f043 0308 	orr.w	r3, r3, #8
 801aa00:	81a3      	strh	r3, [r4, #12]
 801aa02:	6923      	ldr	r3, [r4, #16]
 801aa04:	b94b      	cbnz	r3, 801aa1a <__swsetup_r+0x7a>
 801aa06:	89a3      	ldrh	r3, [r4, #12]
 801aa08:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 801aa0c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 801aa10:	d003      	beq.n	801aa1a <__swsetup_r+0x7a>
 801aa12:	4621      	mov	r1, r4
 801aa14:	4628      	mov	r0, r5
 801aa16:	f000 f846 	bl	801aaa6 <__smakebuf_r>
 801aa1a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801aa1e:	f013 0201 	ands.w	r2, r3, #1
 801aa22:	d00a      	beq.n	801aa3a <__swsetup_r+0x9a>
 801aa24:	2200      	movs	r2, #0
 801aa26:	60a2      	str	r2, [r4, #8]
 801aa28:	6962      	ldr	r2, [r4, #20]
 801aa2a:	4252      	negs	r2, r2
 801aa2c:	61a2      	str	r2, [r4, #24]
 801aa2e:	6922      	ldr	r2, [r4, #16]
 801aa30:	b942      	cbnz	r2, 801aa44 <__swsetup_r+0xa4>
 801aa32:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 801aa36:	d1c5      	bne.n	801a9c4 <__swsetup_r+0x24>
 801aa38:	bd38      	pop	{r3, r4, r5, pc}
 801aa3a:	0799      	lsls	r1, r3, #30
 801aa3c:	bf58      	it	pl
 801aa3e:	6962      	ldrpl	r2, [r4, #20]
 801aa40:	60a2      	str	r2, [r4, #8]
 801aa42:	e7f4      	b.n	801aa2e <__swsetup_r+0x8e>
 801aa44:	2000      	movs	r0, #0
 801aa46:	e7f7      	b.n	801aa38 <__swsetup_r+0x98>
 801aa48:	20000104 	.word	0x20000104

0801aa4c <abort>:
 801aa4c:	b508      	push	{r3, lr}
 801aa4e:	2006      	movs	r0, #6
 801aa50:	f000 f88e 	bl	801ab70 <raise>
 801aa54:	2001      	movs	r0, #1
 801aa56:	f7e7 fed7 	bl	8002808 <_exit>

0801aa5a <__swhatbuf_r>:
 801aa5a:	b570      	push	{r4, r5, r6, lr}
 801aa5c:	460c      	mov	r4, r1
 801aa5e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801aa62:	2900      	cmp	r1, #0
 801aa64:	b096      	sub	sp, #88	@ 0x58
 801aa66:	4615      	mov	r5, r2
 801aa68:	461e      	mov	r6, r3
 801aa6a:	da0d      	bge.n	801aa88 <__swhatbuf_r+0x2e>
 801aa6c:	89a3      	ldrh	r3, [r4, #12]
 801aa6e:	f013 0f80 	tst.w	r3, #128	@ 0x80
 801aa72:	f04f 0100 	mov.w	r1, #0
 801aa76:	bf14      	ite	ne
 801aa78:	2340      	movne	r3, #64	@ 0x40
 801aa7a:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 801aa7e:	2000      	movs	r0, #0
 801aa80:	6031      	str	r1, [r6, #0]
 801aa82:	602b      	str	r3, [r5, #0]
 801aa84:	b016      	add	sp, #88	@ 0x58
 801aa86:	bd70      	pop	{r4, r5, r6, pc}
 801aa88:	466a      	mov	r2, sp
 801aa8a:	f000 f879 	bl	801ab80 <_fstat_r>
 801aa8e:	2800      	cmp	r0, #0
 801aa90:	dbec      	blt.n	801aa6c <__swhatbuf_r+0x12>
 801aa92:	9901      	ldr	r1, [sp, #4]
 801aa94:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 801aa98:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 801aa9c:	4259      	negs	r1, r3
 801aa9e:	4159      	adcs	r1, r3
 801aaa0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 801aaa4:	e7eb      	b.n	801aa7e <__swhatbuf_r+0x24>

0801aaa6 <__smakebuf_r>:
 801aaa6:	898b      	ldrh	r3, [r1, #12]
 801aaa8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801aaaa:	079d      	lsls	r5, r3, #30
 801aaac:	4606      	mov	r6, r0
 801aaae:	460c      	mov	r4, r1
 801aab0:	d507      	bpl.n	801aac2 <__smakebuf_r+0x1c>
 801aab2:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 801aab6:	6023      	str	r3, [r4, #0]
 801aab8:	6123      	str	r3, [r4, #16]
 801aaba:	2301      	movs	r3, #1
 801aabc:	6163      	str	r3, [r4, #20]
 801aabe:	b003      	add	sp, #12
 801aac0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801aac2:	ab01      	add	r3, sp, #4
 801aac4:	466a      	mov	r2, sp
 801aac6:	f7ff ffc8 	bl	801aa5a <__swhatbuf_r>
 801aaca:	9f00      	ldr	r7, [sp, #0]
 801aacc:	4605      	mov	r5, r0
 801aace:	4639      	mov	r1, r7
 801aad0:	4630      	mov	r0, r6
 801aad2:	f7fe fd53 	bl	801957c <_malloc_r>
 801aad6:	b948      	cbnz	r0, 801aaec <__smakebuf_r+0x46>
 801aad8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801aadc:	059a      	lsls	r2, r3, #22
 801aade:	d4ee      	bmi.n	801aabe <__smakebuf_r+0x18>
 801aae0:	f023 0303 	bic.w	r3, r3, #3
 801aae4:	f043 0302 	orr.w	r3, r3, #2
 801aae8:	81a3      	strh	r3, [r4, #12]
 801aaea:	e7e2      	b.n	801aab2 <__smakebuf_r+0xc>
 801aaec:	89a3      	ldrh	r3, [r4, #12]
 801aaee:	6020      	str	r0, [r4, #0]
 801aaf0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801aaf4:	81a3      	strh	r3, [r4, #12]
 801aaf6:	9b01      	ldr	r3, [sp, #4]
 801aaf8:	e9c4 0704 	strd	r0, r7, [r4, #16]
 801aafc:	b15b      	cbz	r3, 801ab16 <__smakebuf_r+0x70>
 801aafe:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801ab02:	4630      	mov	r0, r6
 801ab04:	f000 f84e 	bl	801aba4 <_isatty_r>
 801ab08:	b128      	cbz	r0, 801ab16 <__smakebuf_r+0x70>
 801ab0a:	89a3      	ldrh	r3, [r4, #12]
 801ab0c:	f023 0303 	bic.w	r3, r3, #3
 801ab10:	f043 0301 	orr.w	r3, r3, #1
 801ab14:	81a3      	strh	r3, [r4, #12]
 801ab16:	89a3      	ldrh	r3, [r4, #12]
 801ab18:	431d      	orrs	r5, r3
 801ab1a:	81a5      	strh	r5, [r4, #12]
 801ab1c:	e7cf      	b.n	801aabe <__smakebuf_r+0x18>

0801ab1e <_raise_r>:
 801ab1e:	291f      	cmp	r1, #31
 801ab20:	b538      	push	{r3, r4, r5, lr}
 801ab22:	4605      	mov	r5, r0
 801ab24:	460c      	mov	r4, r1
 801ab26:	d904      	bls.n	801ab32 <_raise_r+0x14>
 801ab28:	2316      	movs	r3, #22
 801ab2a:	6003      	str	r3, [r0, #0]
 801ab2c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801ab30:	bd38      	pop	{r3, r4, r5, pc}
 801ab32:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 801ab34:	b112      	cbz	r2, 801ab3c <_raise_r+0x1e>
 801ab36:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801ab3a:	b94b      	cbnz	r3, 801ab50 <_raise_r+0x32>
 801ab3c:	4628      	mov	r0, r5
 801ab3e:	f000 f853 	bl	801abe8 <_getpid_r>
 801ab42:	4622      	mov	r2, r4
 801ab44:	4601      	mov	r1, r0
 801ab46:	4628      	mov	r0, r5
 801ab48:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801ab4c:	f000 b83a 	b.w	801abc4 <_kill_r>
 801ab50:	2b01      	cmp	r3, #1
 801ab52:	d00a      	beq.n	801ab6a <_raise_r+0x4c>
 801ab54:	1c59      	adds	r1, r3, #1
 801ab56:	d103      	bne.n	801ab60 <_raise_r+0x42>
 801ab58:	2316      	movs	r3, #22
 801ab5a:	6003      	str	r3, [r0, #0]
 801ab5c:	2001      	movs	r0, #1
 801ab5e:	e7e7      	b.n	801ab30 <_raise_r+0x12>
 801ab60:	2100      	movs	r1, #0
 801ab62:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 801ab66:	4620      	mov	r0, r4
 801ab68:	4798      	blx	r3
 801ab6a:	2000      	movs	r0, #0
 801ab6c:	e7e0      	b.n	801ab30 <_raise_r+0x12>
	...

0801ab70 <raise>:
 801ab70:	4b02      	ldr	r3, [pc, #8]	@ (801ab7c <raise+0xc>)
 801ab72:	4601      	mov	r1, r0
 801ab74:	6818      	ldr	r0, [r3, #0]
 801ab76:	f7ff bfd2 	b.w	801ab1e <_raise_r>
 801ab7a:	bf00      	nop
 801ab7c:	20000104 	.word	0x20000104

0801ab80 <_fstat_r>:
 801ab80:	b538      	push	{r3, r4, r5, lr}
 801ab82:	4d07      	ldr	r5, [pc, #28]	@ (801aba0 <_fstat_r+0x20>)
 801ab84:	2300      	movs	r3, #0
 801ab86:	4604      	mov	r4, r0
 801ab88:	4608      	mov	r0, r1
 801ab8a:	4611      	mov	r1, r2
 801ab8c:	602b      	str	r3, [r5, #0]
 801ab8e:	f7e7 fe8b 	bl	80028a8 <_fstat>
 801ab92:	1c43      	adds	r3, r0, #1
 801ab94:	d102      	bne.n	801ab9c <_fstat_r+0x1c>
 801ab96:	682b      	ldr	r3, [r5, #0]
 801ab98:	b103      	cbz	r3, 801ab9c <_fstat_r+0x1c>
 801ab9a:	6023      	str	r3, [r4, #0]
 801ab9c:	bd38      	pop	{r3, r4, r5, pc}
 801ab9e:	bf00      	nop
 801aba0:	20007838 	.word	0x20007838

0801aba4 <_isatty_r>:
 801aba4:	b538      	push	{r3, r4, r5, lr}
 801aba6:	4d06      	ldr	r5, [pc, #24]	@ (801abc0 <_isatty_r+0x1c>)
 801aba8:	2300      	movs	r3, #0
 801abaa:	4604      	mov	r4, r0
 801abac:	4608      	mov	r0, r1
 801abae:	602b      	str	r3, [r5, #0]
 801abb0:	f7e7 fe8a 	bl	80028c8 <_isatty>
 801abb4:	1c43      	adds	r3, r0, #1
 801abb6:	d102      	bne.n	801abbe <_isatty_r+0x1a>
 801abb8:	682b      	ldr	r3, [r5, #0]
 801abba:	b103      	cbz	r3, 801abbe <_isatty_r+0x1a>
 801abbc:	6023      	str	r3, [r4, #0]
 801abbe:	bd38      	pop	{r3, r4, r5, pc}
 801abc0:	20007838 	.word	0x20007838

0801abc4 <_kill_r>:
 801abc4:	b538      	push	{r3, r4, r5, lr}
 801abc6:	4d07      	ldr	r5, [pc, #28]	@ (801abe4 <_kill_r+0x20>)
 801abc8:	2300      	movs	r3, #0
 801abca:	4604      	mov	r4, r0
 801abcc:	4608      	mov	r0, r1
 801abce:	4611      	mov	r1, r2
 801abd0:	602b      	str	r3, [r5, #0]
 801abd2:	f7e7 fe09 	bl	80027e8 <_kill>
 801abd6:	1c43      	adds	r3, r0, #1
 801abd8:	d102      	bne.n	801abe0 <_kill_r+0x1c>
 801abda:	682b      	ldr	r3, [r5, #0]
 801abdc:	b103      	cbz	r3, 801abe0 <_kill_r+0x1c>
 801abde:	6023      	str	r3, [r4, #0]
 801abe0:	bd38      	pop	{r3, r4, r5, pc}
 801abe2:	bf00      	nop
 801abe4:	20007838 	.word	0x20007838

0801abe8 <_getpid_r>:
 801abe8:	f7e7 bdf6 	b.w	80027d8 <_getpid>

0801abec <fmaxf>:
 801abec:	b508      	push	{r3, lr}
 801abee:	ed2d 8b02 	vpush	{d8}
 801abf2:	eeb0 8a40 	vmov.f32	s16, s0
 801abf6:	eef0 8a60 	vmov.f32	s17, s1
 801abfa:	f000 f831 	bl	801ac60 <__fpclassifyf>
 801abfe:	b930      	cbnz	r0, 801ac0e <fmaxf+0x22>
 801ac00:	eeb0 8a68 	vmov.f32	s16, s17
 801ac04:	eeb0 0a48 	vmov.f32	s0, s16
 801ac08:	ecbd 8b02 	vpop	{d8}
 801ac0c:	bd08      	pop	{r3, pc}
 801ac0e:	eeb0 0a68 	vmov.f32	s0, s17
 801ac12:	f000 f825 	bl	801ac60 <__fpclassifyf>
 801ac16:	2800      	cmp	r0, #0
 801ac18:	d0f4      	beq.n	801ac04 <fmaxf+0x18>
 801ac1a:	eeb4 8ae8 	vcmpe.f32	s16, s17
 801ac1e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801ac22:	dded      	ble.n	801ac00 <fmaxf+0x14>
 801ac24:	e7ee      	b.n	801ac04 <fmaxf+0x18>

0801ac26 <fminf>:
 801ac26:	b508      	push	{r3, lr}
 801ac28:	ed2d 8b02 	vpush	{d8}
 801ac2c:	eeb0 8a40 	vmov.f32	s16, s0
 801ac30:	eef0 8a60 	vmov.f32	s17, s1
 801ac34:	f000 f814 	bl	801ac60 <__fpclassifyf>
 801ac38:	b930      	cbnz	r0, 801ac48 <fminf+0x22>
 801ac3a:	eeb0 8a68 	vmov.f32	s16, s17
 801ac3e:	eeb0 0a48 	vmov.f32	s0, s16
 801ac42:	ecbd 8b02 	vpop	{d8}
 801ac46:	bd08      	pop	{r3, pc}
 801ac48:	eeb0 0a68 	vmov.f32	s0, s17
 801ac4c:	f000 f808 	bl	801ac60 <__fpclassifyf>
 801ac50:	2800      	cmp	r0, #0
 801ac52:	d0f4      	beq.n	801ac3e <fminf+0x18>
 801ac54:	eeb4 8ae8 	vcmpe.f32	s16, s17
 801ac58:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801ac5c:	d5ed      	bpl.n	801ac3a <fminf+0x14>
 801ac5e:	e7ee      	b.n	801ac3e <fminf+0x18>

0801ac60 <__fpclassifyf>:
 801ac60:	ee10 3a10 	vmov	r3, s0
 801ac64:	f033 4000 	bics.w	r0, r3, #2147483648	@ 0x80000000
 801ac68:	d00d      	beq.n	801ac86 <__fpclassifyf+0x26>
 801ac6a:	f5a0 0300 	sub.w	r3, r0, #8388608	@ 0x800000
 801ac6e:	f1b3 4ffe 	cmp.w	r3, #2130706432	@ 0x7f000000
 801ac72:	d30a      	bcc.n	801ac8a <__fpclassifyf+0x2a>
 801ac74:	4b07      	ldr	r3, [pc, #28]	@ (801ac94 <__fpclassifyf+0x34>)
 801ac76:	1e42      	subs	r2, r0, #1
 801ac78:	429a      	cmp	r2, r3
 801ac7a:	d908      	bls.n	801ac8e <__fpclassifyf+0x2e>
 801ac7c:	f1a0 43ff 	sub.w	r3, r0, #2139095040	@ 0x7f800000
 801ac80:	4258      	negs	r0, r3
 801ac82:	4158      	adcs	r0, r3
 801ac84:	4770      	bx	lr
 801ac86:	2002      	movs	r0, #2
 801ac88:	4770      	bx	lr
 801ac8a:	2004      	movs	r0, #4
 801ac8c:	4770      	bx	lr
 801ac8e:	2003      	movs	r0, #3
 801ac90:	4770      	bx	lr
 801ac92:	bf00      	nop
 801ac94:	007ffffe 	.word	0x007ffffe

0801ac98 <_init>:
 801ac98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801ac9a:	bf00      	nop
 801ac9c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801ac9e:	bc08      	pop	{r3}
 801aca0:	469e      	mov	lr, r3
 801aca2:	4770      	bx	lr

0801aca4 <_fini>:
 801aca4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801aca6:	bf00      	nop
 801aca8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801acaa:	bc08      	pop	{r3}
 801acac:	469e      	mov	lr, r3
 801acae:	4770      	bx	lr
