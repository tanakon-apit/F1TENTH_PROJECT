
BNO_Calibrate.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000053dc  0800018c  0800018c  0000118c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000048  08005568  08005568  00006568  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080055b0  080055b0  00007010  2**0
                  CONTENTS
  4 .ARM          00000008  080055b0  080055b0  000065b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080055b8  080055b8  00007010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080055b8  080055b8  000065b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080055bc  080055bc  000065bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000010  20000000  080055c0  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000290  20000010  080055d0  00007010  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  200002a0  080055d0  000072a0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00007010  2**0
                  CONTENTS, READONLY
 12 .debug_info   00010b25  00000000  00000000  00007040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000283f  00000000  00000000  00017b65  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d70  00000000  00000000  0001a3a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000a59  00000000  00000000  0001b118  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00021330  00000000  00000000  0001bb71  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00012fad  00000000  00000000  0003cea1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c325e  00000000  00000000  0004fe4e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001130ac  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000036c4  00000000  00000000  001130f0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000007a  00000000  00000000  001167b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800018c <__do_global_dtors_aux>:
 800018c:	b510      	push	{r4, lr}
 800018e:	4c05      	ldr	r4, [pc, #20]	@ (80001a4 <__do_global_dtors_aux+0x18>)
 8000190:	7823      	ldrb	r3, [r4, #0]
 8000192:	b933      	cbnz	r3, 80001a2 <__do_global_dtors_aux+0x16>
 8000194:	4b04      	ldr	r3, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x1c>)
 8000196:	b113      	cbz	r3, 800019e <__do_global_dtors_aux+0x12>
 8000198:	4804      	ldr	r0, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x20>)
 800019a:	f3af 8000 	nop.w
 800019e:	2301      	movs	r3, #1
 80001a0:	7023      	strb	r3, [r4, #0]
 80001a2:	bd10      	pop	{r4, pc}
 80001a4:	20000010 	.word	0x20000010
 80001a8:	00000000 	.word	0x00000000
 80001ac:	08005550 	.word	0x08005550

080001b0 <frame_dummy>:
 80001b0:	b508      	push	{r3, lr}
 80001b2:	4b03      	ldr	r3, [pc, #12]	@ (80001c0 <frame_dummy+0x10>)
 80001b4:	b11b      	cbz	r3, 80001be <frame_dummy+0xe>
 80001b6:	4903      	ldr	r1, [pc, #12]	@ (80001c4 <frame_dummy+0x14>)
 80001b8:	4803      	ldr	r0, [pc, #12]	@ (80001c8 <frame_dummy+0x18>)
 80001ba:	f3af 8000 	nop.w
 80001be:	bd08      	pop	{r3, pc}
 80001c0:	00000000 	.word	0x00000000
 80001c4:	20000014 	.word	0x20000014
 80001c8:	08005550 	.word	0x08005550

080001cc <__aeabi_drsub>:
 80001cc:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80001d0:	e002      	b.n	80001d8 <__adddf3>
 80001d2:	bf00      	nop

080001d4 <__aeabi_dsub>:
 80001d4:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080001d8 <__adddf3>:
 80001d8:	b530      	push	{r4, r5, lr}
 80001da:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001de:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001e2:	ea94 0f05 	teq	r4, r5
 80001e6:	bf08      	it	eq
 80001e8:	ea90 0f02 	teqeq	r0, r2
 80001ec:	bf1f      	itttt	ne
 80001ee:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001f2:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001f6:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001fa:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001fe:	f000 80e2 	beq.w	80003c6 <__adddf3+0x1ee>
 8000202:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000206:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800020a:	bfb8      	it	lt
 800020c:	426d      	neglt	r5, r5
 800020e:	dd0c      	ble.n	800022a <__adddf3+0x52>
 8000210:	442c      	add	r4, r5
 8000212:	ea80 0202 	eor.w	r2, r0, r2
 8000216:	ea81 0303 	eor.w	r3, r1, r3
 800021a:	ea82 0000 	eor.w	r0, r2, r0
 800021e:	ea83 0101 	eor.w	r1, r3, r1
 8000222:	ea80 0202 	eor.w	r2, r0, r2
 8000226:	ea81 0303 	eor.w	r3, r1, r3
 800022a:	2d36      	cmp	r5, #54	@ 0x36
 800022c:	bf88      	it	hi
 800022e:	bd30      	pophi	{r4, r5, pc}
 8000230:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000234:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000238:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 800023c:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000240:	d002      	beq.n	8000248 <__adddf3+0x70>
 8000242:	4240      	negs	r0, r0
 8000244:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000248:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 800024c:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000250:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000254:	d002      	beq.n	800025c <__adddf3+0x84>
 8000256:	4252      	negs	r2, r2
 8000258:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800025c:	ea94 0f05 	teq	r4, r5
 8000260:	f000 80a7 	beq.w	80003b2 <__adddf3+0x1da>
 8000264:	f1a4 0401 	sub.w	r4, r4, #1
 8000268:	f1d5 0e20 	rsbs	lr, r5, #32
 800026c:	db0d      	blt.n	800028a <__adddf3+0xb2>
 800026e:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000272:	fa22 f205 	lsr.w	r2, r2, r5
 8000276:	1880      	adds	r0, r0, r2
 8000278:	f141 0100 	adc.w	r1, r1, #0
 800027c:	fa03 f20e 	lsl.w	r2, r3, lr
 8000280:	1880      	adds	r0, r0, r2
 8000282:	fa43 f305 	asr.w	r3, r3, r5
 8000286:	4159      	adcs	r1, r3
 8000288:	e00e      	b.n	80002a8 <__adddf3+0xd0>
 800028a:	f1a5 0520 	sub.w	r5, r5, #32
 800028e:	f10e 0e20 	add.w	lr, lr, #32
 8000292:	2a01      	cmp	r2, #1
 8000294:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000298:	bf28      	it	cs
 800029a:	f04c 0c02 	orrcs.w	ip, ip, #2
 800029e:	fa43 f305 	asr.w	r3, r3, r5
 80002a2:	18c0      	adds	r0, r0, r3
 80002a4:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002a8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80002ac:	d507      	bpl.n	80002be <__adddf3+0xe6>
 80002ae:	f04f 0e00 	mov.w	lr, #0
 80002b2:	f1dc 0c00 	rsbs	ip, ip, #0
 80002b6:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002ba:	eb6e 0101 	sbc.w	r1, lr, r1
 80002be:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80002c2:	d31b      	bcc.n	80002fc <__adddf3+0x124>
 80002c4:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80002c8:	d30c      	bcc.n	80002e4 <__adddf3+0x10c>
 80002ca:	0849      	lsrs	r1, r1, #1
 80002cc:	ea5f 0030 	movs.w	r0, r0, rrx
 80002d0:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d4:	f104 0401 	add.w	r4, r4, #1
 80002d8:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002dc:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80002e0:	f080 809a 	bcs.w	8000418 <__adddf3+0x240>
 80002e4:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80002e8:	bf08      	it	eq
 80002ea:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002ee:	f150 0000 	adcs.w	r0, r0, #0
 80002f2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002f6:	ea41 0105 	orr.w	r1, r1, r5
 80002fa:	bd30      	pop	{r4, r5, pc}
 80002fc:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000300:	4140      	adcs	r0, r0
 8000302:	eb41 0101 	adc.w	r1, r1, r1
 8000306:	3c01      	subs	r4, #1
 8000308:	bf28      	it	cs
 800030a:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800030e:	d2e9      	bcs.n	80002e4 <__adddf3+0x10c>
 8000310:	f091 0f00 	teq	r1, #0
 8000314:	bf04      	itt	eq
 8000316:	4601      	moveq	r1, r0
 8000318:	2000      	moveq	r0, #0
 800031a:	fab1 f381 	clz	r3, r1
 800031e:	bf08      	it	eq
 8000320:	3320      	addeq	r3, #32
 8000322:	f1a3 030b 	sub.w	r3, r3, #11
 8000326:	f1b3 0220 	subs.w	r2, r3, #32
 800032a:	da0c      	bge.n	8000346 <__adddf3+0x16e>
 800032c:	320c      	adds	r2, #12
 800032e:	dd08      	ble.n	8000342 <__adddf3+0x16a>
 8000330:	f102 0c14 	add.w	ip, r2, #20
 8000334:	f1c2 020c 	rsb	r2, r2, #12
 8000338:	fa01 f00c 	lsl.w	r0, r1, ip
 800033c:	fa21 f102 	lsr.w	r1, r1, r2
 8000340:	e00c      	b.n	800035c <__adddf3+0x184>
 8000342:	f102 0214 	add.w	r2, r2, #20
 8000346:	bfd8      	it	le
 8000348:	f1c2 0c20 	rsble	ip, r2, #32
 800034c:	fa01 f102 	lsl.w	r1, r1, r2
 8000350:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000354:	bfdc      	itt	le
 8000356:	ea41 010c 	orrle.w	r1, r1, ip
 800035a:	4090      	lslle	r0, r2
 800035c:	1ae4      	subs	r4, r4, r3
 800035e:	bfa2      	ittt	ge
 8000360:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000364:	4329      	orrge	r1, r5
 8000366:	bd30      	popge	{r4, r5, pc}
 8000368:	ea6f 0404 	mvn.w	r4, r4
 800036c:	3c1f      	subs	r4, #31
 800036e:	da1c      	bge.n	80003aa <__adddf3+0x1d2>
 8000370:	340c      	adds	r4, #12
 8000372:	dc0e      	bgt.n	8000392 <__adddf3+0x1ba>
 8000374:	f104 0414 	add.w	r4, r4, #20
 8000378:	f1c4 0220 	rsb	r2, r4, #32
 800037c:	fa20 f004 	lsr.w	r0, r0, r4
 8000380:	fa01 f302 	lsl.w	r3, r1, r2
 8000384:	ea40 0003 	orr.w	r0, r0, r3
 8000388:	fa21 f304 	lsr.w	r3, r1, r4
 800038c:	ea45 0103 	orr.w	r1, r5, r3
 8000390:	bd30      	pop	{r4, r5, pc}
 8000392:	f1c4 040c 	rsb	r4, r4, #12
 8000396:	f1c4 0220 	rsb	r2, r4, #32
 800039a:	fa20 f002 	lsr.w	r0, r0, r2
 800039e:	fa01 f304 	lsl.w	r3, r1, r4
 80003a2:	ea40 0003 	orr.w	r0, r0, r3
 80003a6:	4629      	mov	r1, r5
 80003a8:	bd30      	pop	{r4, r5, pc}
 80003aa:	fa21 f004 	lsr.w	r0, r1, r4
 80003ae:	4629      	mov	r1, r5
 80003b0:	bd30      	pop	{r4, r5, pc}
 80003b2:	f094 0f00 	teq	r4, #0
 80003b6:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80003ba:	bf06      	itte	eq
 80003bc:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80003c0:	3401      	addeq	r4, #1
 80003c2:	3d01      	subne	r5, #1
 80003c4:	e74e      	b.n	8000264 <__adddf3+0x8c>
 80003c6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ca:	bf18      	it	ne
 80003cc:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003d0:	d029      	beq.n	8000426 <__adddf3+0x24e>
 80003d2:	ea94 0f05 	teq	r4, r5
 80003d6:	bf08      	it	eq
 80003d8:	ea90 0f02 	teqeq	r0, r2
 80003dc:	d005      	beq.n	80003ea <__adddf3+0x212>
 80003de:	ea54 0c00 	orrs.w	ip, r4, r0
 80003e2:	bf04      	itt	eq
 80003e4:	4619      	moveq	r1, r3
 80003e6:	4610      	moveq	r0, r2
 80003e8:	bd30      	pop	{r4, r5, pc}
 80003ea:	ea91 0f03 	teq	r1, r3
 80003ee:	bf1e      	ittt	ne
 80003f0:	2100      	movne	r1, #0
 80003f2:	2000      	movne	r0, #0
 80003f4:	bd30      	popne	{r4, r5, pc}
 80003f6:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003fa:	d105      	bne.n	8000408 <__adddf3+0x230>
 80003fc:	0040      	lsls	r0, r0, #1
 80003fe:	4149      	adcs	r1, r1
 8000400:	bf28      	it	cs
 8000402:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000406:	bd30      	pop	{r4, r5, pc}
 8000408:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 800040c:	bf3c      	itt	cc
 800040e:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000412:	bd30      	popcc	{r4, r5, pc}
 8000414:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000418:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 800041c:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000420:	f04f 0000 	mov.w	r0, #0
 8000424:	bd30      	pop	{r4, r5, pc}
 8000426:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800042a:	bf1a      	itte	ne
 800042c:	4619      	movne	r1, r3
 800042e:	4610      	movne	r0, r2
 8000430:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000434:	bf1c      	itt	ne
 8000436:	460b      	movne	r3, r1
 8000438:	4602      	movne	r2, r0
 800043a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800043e:	bf06      	itte	eq
 8000440:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000444:	ea91 0f03 	teqeq	r1, r3
 8000448:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 800044c:	bd30      	pop	{r4, r5, pc}
 800044e:	bf00      	nop

08000450 <__aeabi_ui2d>:
 8000450:	f090 0f00 	teq	r0, #0
 8000454:	bf04      	itt	eq
 8000456:	2100      	moveq	r1, #0
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000460:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000464:	f04f 0500 	mov.w	r5, #0
 8000468:	f04f 0100 	mov.w	r1, #0
 800046c:	e750      	b.n	8000310 <__adddf3+0x138>
 800046e:	bf00      	nop

08000470 <__aeabi_i2d>:
 8000470:	f090 0f00 	teq	r0, #0
 8000474:	bf04      	itt	eq
 8000476:	2100      	moveq	r1, #0
 8000478:	4770      	bxeq	lr
 800047a:	b530      	push	{r4, r5, lr}
 800047c:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000480:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000484:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 8000488:	bf48      	it	mi
 800048a:	4240      	negmi	r0, r0
 800048c:	f04f 0100 	mov.w	r1, #0
 8000490:	e73e      	b.n	8000310 <__adddf3+0x138>
 8000492:	bf00      	nop

08000494 <__aeabi_f2d>:
 8000494:	0042      	lsls	r2, r0, #1
 8000496:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800049a:	ea4f 0131 	mov.w	r1, r1, rrx
 800049e:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004a2:	bf1f      	itttt	ne
 80004a4:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80004a8:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80004ac:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80004b0:	4770      	bxne	lr
 80004b2:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80004b6:	bf08      	it	eq
 80004b8:	4770      	bxeq	lr
 80004ba:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80004be:	bf04      	itt	eq
 80004c0:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80004c4:	4770      	bxeq	lr
 80004c6:	b530      	push	{r4, r5, lr}
 80004c8:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80004cc:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004d0:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80004d4:	e71c      	b.n	8000310 <__adddf3+0x138>
 80004d6:	bf00      	nop

080004d8 <__aeabi_ul2d>:
 80004d8:	ea50 0201 	orrs.w	r2, r0, r1
 80004dc:	bf08      	it	eq
 80004de:	4770      	bxeq	lr
 80004e0:	b530      	push	{r4, r5, lr}
 80004e2:	f04f 0500 	mov.w	r5, #0
 80004e6:	e00a      	b.n	80004fe <__aeabi_l2d+0x16>

080004e8 <__aeabi_l2d>:
 80004e8:	ea50 0201 	orrs.w	r2, r0, r1
 80004ec:	bf08      	it	eq
 80004ee:	4770      	bxeq	lr
 80004f0:	b530      	push	{r4, r5, lr}
 80004f2:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80004f6:	d502      	bpl.n	80004fe <__aeabi_l2d+0x16>
 80004f8:	4240      	negs	r0, r0
 80004fa:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004fe:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000502:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000506:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800050a:	f43f aed8 	beq.w	80002be <__adddf3+0xe6>
 800050e:	f04f 0203 	mov.w	r2, #3
 8000512:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000516:	bf18      	it	ne
 8000518:	3203      	addne	r2, #3
 800051a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800051e:	bf18      	it	ne
 8000520:	3203      	addne	r2, #3
 8000522:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000526:	f1c2 0320 	rsb	r3, r2, #32
 800052a:	fa00 fc03 	lsl.w	ip, r0, r3
 800052e:	fa20 f002 	lsr.w	r0, r0, r2
 8000532:	fa01 fe03 	lsl.w	lr, r1, r3
 8000536:	ea40 000e 	orr.w	r0, r0, lr
 800053a:	fa21 f102 	lsr.w	r1, r1, r2
 800053e:	4414      	add	r4, r2
 8000540:	e6bd      	b.n	80002be <__adddf3+0xe6>
 8000542:	bf00      	nop

08000544 <__aeabi_dmul>:
 8000544:	b570      	push	{r4, r5, r6, lr}
 8000546:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800054a:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800054e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000552:	bf1d      	ittte	ne
 8000554:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000558:	ea94 0f0c 	teqne	r4, ip
 800055c:	ea95 0f0c 	teqne	r5, ip
 8000560:	f000 f8de 	bleq	8000720 <__aeabi_dmul+0x1dc>
 8000564:	442c      	add	r4, r5
 8000566:	ea81 0603 	eor.w	r6, r1, r3
 800056a:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800056e:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000572:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000576:	bf18      	it	ne
 8000578:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 800057c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000580:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000584:	d038      	beq.n	80005f8 <__aeabi_dmul+0xb4>
 8000586:	fba0 ce02 	umull	ip, lr, r0, r2
 800058a:	f04f 0500 	mov.w	r5, #0
 800058e:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000592:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 8000596:	fbe0 e503 	umlal	lr, r5, r0, r3
 800059a:	f04f 0600 	mov.w	r6, #0
 800059e:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005a2:	f09c 0f00 	teq	ip, #0
 80005a6:	bf18      	it	ne
 80005a8:	f04e 0e01 	orrne.w	lr, lr, #1
 80005ac:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80005b0:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80005b4:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80005b8:	d204      	bcs.n	80005c4 <__aeabi_dmul+0x80>
 80005ba:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005be:	416d      	adcs	r5, r5
 80005c0:	eb46 0606 	adc.w	r6, r6, r6
 80005c4:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005c8:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005cc:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005d0:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005d4:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005d8:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80005dc:	bf88      	it	hi
 80005de:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80005e2:	d81e      	bhi.n	8000622 <__aeabi_dmul+0xde>
 80005e4:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80005e8:	bf08      	it	eq
 80005ea:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005ee:	f150 0000 	adcs.w	r0, r0, #0
 80005f2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005f6:	bd70      	pop	{r4, r5, r6, pc}
 80005f8:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80005fc:	ea46 0101 	orr.w	r1, r6, r1
 8000600:	ea40 0002 	orr.w	r0, r0, r2
 8000604:	ea81 0103 	eor.w	r1, r1, r3
 8000608:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 800060c:	bfc2      	ittt	gt
 800060e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000612:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000616:	bd70      	popgt	{r4, r5, r6, pc}
 8000618:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800061c:	f04f 0e00 	mov.w	lr, #0
 8000620:	3c01      	subs	r4, #1
 8000622:	f300 80ab 	bgt.w	800077c <__aeabi_dmul+0x238>
 8000626:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800062a:	bfde      	ittt	le
 800062c:	2000      	movle	r0, #0
 800062e:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000632:	bd70      	pople	{r4, r5, r6, pc}
 8000634:	f1c4 0400 	rsb	r4, r4, #0
 8000638:	3c20      	subs	r4, #32
 800063a:	da35      	bge.n	80006a8 <__aeabi_dmul+0x164>
 800063c:	340c      	adds	r4, #12
 800063e:	dc1b      	bgt.n	8000678 <__aeabi_dmul+0x134>
 8000640:	f104 0414 	add.w	r4, r4, #20
 8000644:	f1c4 0520 	rsb	r5, r4, #32
 8000648:	fa00 f305 	lsl.w	r3, r0, r5
 800064c:	fa20 f004 	lsr.w	r0, r0, r4
 8000650:	fa01 f205 	lsl.w	r2, r1, r5
 8000654:	ea40 0002 	orr.w	r0, r0, r2
 8000658:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 800065c:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000660:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000664:	fa21 f604 	lsr.w	r6, r1, r4
 8000668:	eb42 0106 	adc.w	r1, r2, r6
 800066c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000670:	bf08      	it	eq
 8000672:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000676:	bd70      	pop	{r4, r5, r6, pc}
 8000678:	f1c4 040c 	rsb	r4, r4, #12
 800067c:	f1c4 0520 	rsb	r5, r4, #32
 8000680:	fa00 f304 	lsl.w	r3, r0, r4
 8000684:	fa20 f005 	lsr.w	r0, r0, r5
 8000688:	fa01 f204 	lsl.w	r2, r1, r4
 800068c:	ea40 0002 	orr.w	r0, r0, r2
 8000690:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000694:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000698:	f141 0100 	adc.w	r1, r1, #0
 800069c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006a0:	bf08      	it	eq
 80006a2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006a6:	bd70      	pop	{r4, r5, r6, pc}
 80006a8:	f1c4 0520 	rsb	r5, r4, #32
 80006ac:	fa00 f205 	lsl.w	r2, r0, r5
 80006b0:	ea4e 0e02 	orr.w	lr, lr, r2
 80006b4:	fa20 f304 	lsr.w	r3, r0, r4
 80006b8:	fa01 f205 	lsl.w	r2, r1, r5
 80006bc:	ea43 0302 	orr.w	r3, r3, r2
 80006c0:	fa21 f004 	lsr.w	r0, r1, r4
 80006c4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006c8:	fa21 f204 	lsr.w	r2, r1, r4
 80006cc:	ea20 0002 	bic.w	r0, r0, r2
 80006d0:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006d4:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d8:	bf08      	it	eq
 80006da:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006de:	bd70      	pop	{r4, r5, r6, pc}
 80006e0:	f094 0f00 	teq	r4, #0
 80006e4:	d10f      	bne.n	8000706 <__aeabi_dmul+0x1c2>
 80006e6:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80006ea:	0040      	lsls	r0, r0, #1
 80006ec:	eb41 0101 	adc.w	r1, r1, r1
 80006f0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80006f4:	bf08      	it	eq
 80006f6:	3c01      	subeq	r4, #1
 80006f8:	d0f7      	beq.n	80006ea <__aeabi_dmul+0x1a6>
 80006fa:	ea41 0106 	orr.w	r1, r1, r6
 80006fe:	f095 0f00 	teq	r5, #0
 8000702:	bf18      	it	ne
 8000704:	4770      	bxne	lr
 8000706:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800070a:	0052      	lsls	r2, r2, #1
 800070c:	eb43 0303 	adc.w	r3, r3, r3
 8000710:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000714:	bf08      	it	eq
 8000716:	3d01      	subeq	r5, #1
 8000718:	d0f7      	beq.n	800070a <__aeabi_dmul+0x1c6>
 800071a:	ea43 0306 	orr.w	r3, r3, r6
 800071e:	4770      	bx	lr
 8000720:	ea94 0f0c 	teq	r4, ip
 8000724:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000728:	bf18      	it	ne
 800072a:	ea95 0f0c 	teqne	r5, ip
 800072e:	d00c      	beq.n	800074a <__aeabi_dmul+0x206>
 8000730:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000734:	bf18      	it	ne
 8000736:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800073a:	d1d1      	bne.n	80006e0 <__aeabi_dmul+0x19c>
 800073c:	ea81 0103 	eor.w	r1, r1, r3
 8000740:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000744:	f04f 0000 	mov.w	r0, #0
 8000748:	bd70      	pop	{r4, r5, r6, pc}
 800074a:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800074e:	bf06      	itte	eq
 8000750:	4610      	moveq	r0, r2
 8000752:	4619      	moveq	r1, r3
 8000754:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000758:	d019      	beq.n	800078e <__aeabi_dmul+0x24a>
 800075a:	ea94 0f0c 	teq	r4, ip
 800075e:	d102      	bne.n	8000766 <__aeabi_dmul+0x222>
 8000760:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000764:	d113      	bne.n	800078e <__aeabi_dmul+0x24a>
 8000766:	ea95 0f0c 	teq	r5, ip
 800076a:	d105      	bne.n	8000778 <__aeabi_dmul+0x234>
 800076c:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000770:	bf1c      	itt	ne
 8000772:	4610      	movne	r0, r2
 8000774:	4619      	movne	r1, r3
 8000776:	d10a      	bne.n	800078e <__aeabi_dmul+0x24a>
 8000778:	ea81 0103 	eor.w	r1, r1, r3
 800077c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000780:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000784:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000788:	f04f 0000 	mov.w	r0, #0
 800078c:	bd70      	pop	{r4, r5, r6, pc}
 800078e:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000792:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 8000796:	bd70      	pop	{r4, r5, r6, pc}

08000798 <__aeabi_ddiv>:
 8000798:	b570      	push	{r4, r5, r6, lr}
 800079a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800079e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80007a2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007a6:	bf1d      	ittte	ne
 80007a8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007ac:	ea94 0f0c 	teqne	r4, ip
 80007b0:	ea95 0f0c 	teqne	r5, ip
 80007b4:	f000 f8a7 	bleq	8000906 <__aeabi_ddiv+0x16e>
 80007b8:	eba4 0405 	sub.w	r4, r4, r5
 80007bc:	ea81 0e03 	eor.w	lr, r1, r3
 80007c0:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007c4:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007c8:	f000 8088 	beq.w	80008dc <__aeabi_ddiv+0x144>
 80007cc:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007d0:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80007d4:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007d8:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007dc:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007e0:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007e4:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007e8:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007ec:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80007f0:	429d      	cmp	r5, r3
 80007f2:	bf08      	it	eq
 80007f4:	4296      	cmpeq	r6, r2
 80007f6:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80007fa:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80007fe:	d202      	bcs.n	8000806 <__aeabi_ddiv+0x6e>
 8000800:	085b      	lsrs	r3, r3, #1
 8000802:	ea4f 0232 	mov.w	r2, r2, rrx
 8000806:	1ab6      	subs	r6, r6, r2
 8000808:	eb65 0503 	sbc.w	r5, r5, r3
 800080c:	085b      	lsrs	r3, r3, #1
 800080e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000812:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8000816:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800081a:	ebb6 0e02 	subs.w	lr, r6, r2
 800081e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000822:	bf22      	ittt	cs
 8000824:	1ab6      	subcs	r6, r6, r2
 8000826:	4675      	movcs	r5, lr
 8000828:	ea40 000c 	orrcs.w	r0, r0, ip
 800082c:	085b      	lsrs	r3, r3, #1
 800082e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000832:	ebb6 0e02 	subs.w	lr, r6, r2
 8000836:	eb75 0e03 	sbcs.w	lr, r5, r3
 800083a:	bf22      	ittt	cs
 800083c:	1ab6      	subcs	r6, r6, r2
 800083e:	4675      	movcs	r5, lr
 8000840:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000844:	085b      	lsrs	r3, r3, #1
 8000846:	ea4f 0232 	mov.w	r2, r2, rrx
 800084a:	ebb6 0e02 	subs.w	lr, r6, r2
 800084e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000852:	bf22      	ittt	cs
 8000854:	1ab6      	subcs	r6, r6, r2
 8000856:	4675      	movcs	r5, lr
 8000858:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 800085c:	085b      	lsrs	r3, r3, #1
 800085e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000862:	ebb6 0e02 	subs.w	lr, r6, r2
 8000866:	eb75 0e03 	sbcs.w	lr, r5, r3
 800086a:	bf22      	ittt	cs
 800086c:	1ab6      	subcs	r6, r6, r2
 800086e:	4675      	movcs	r5, lr
 8000870:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000874:	ea55 0e06 	orrs.w	lr, r5, r6
 8000878:	d018      	beq.n	80008ac <__aeabi_ddiv+0x114>
 800087a:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800087e:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000882:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000886:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800088a:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800088e:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000892:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000896:	d1c0      	bne.n	800081a <__aeabi_ddiv+0x82>
 8000898:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 800089c:	d10b      	bne.n	80008b6 <__aeabi_ddiv+0x11e>
 800089e:	ea41 0100 	orr.w	r1, r1, r0
 80008a2:	f04f 0000 	mov.w	r0, #0
 80008a6:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80008aa:	e7b6      	b.n	800081a <__aeabi_ddiv+0x82>
 80008ac:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008b0:	bf04      	itt	eq
 80008b2:	4301      	orreq	r1, r0
 80008b4:	2000      	moveq	r0, #0
 80008b6:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80008ba:	bf88      	it	hi
 80008bc:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80008c0:	f63f aeaf 	bhi.w	8000622 <__aeabi_dmul+0xde>
 80008c4:	ebb5 0c03 	subs.w	ip, r5, r3
 80008c8:	bf04      	itt	eq
 80008ca:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008d2:	f150 0000 	adcs.w	r0, r0, #0
 80008d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008da:	bd70      	pop	{r4, r5, r6, pc}
 80008dc:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80008e0:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008e4:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008e8:	bfc2      	ittt	gt
 80008ea:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008ee:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008f2:	bd70      	popgt	{r4, r5, r6, pc}
 80008f4:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80008f8:	f04f 0e00 	mov.w	lr, #0
 80008fc:	3c01      	subs	r4, #1
 80008fe:	e690      	b.n	8000622 <__aeabi_dmul+0xde>
 8000900:	ea45 0e06 	orr.w	lr, r5, r6
 8000904:	e68d      	b.n	8000622 <__aeabi_dmul+0xde>
 8000906:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800090a:	ea94 0f0c 	teq	r4, ip
 800090e:	bf08      	it	eq
 8000910:	ea95 0f0c 	teqeq	r5, ip
 8000914:	f43f af3b 	beq.w	800078e <__aeabi_dmul+0x24a>
 8000918:	ea94 0f0c 	teq	r4, ip
 800091c:	d10a      	bne.n	8000934 <__aeabi_ddiv+0x19c>
 800091e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000922:	f47f af34 	bne.w	800078e <__aeabi_dmul+0x24a>
 8000926:	ea95 0f0c 	teq	r5, ip
 800092a:	f47f af25 	bne.w	8000778 <__aeabi_dmul+0x234>
 800092e:	4610      	mov	r0, r2
 8000930:	4619      	mov	r1, r3
 8000932:	e72c      	b.n	800078e <__aeabi_dmul+0x24a>
 8000934:	ea95 0f0c 	teq	r5, ip
 8000938:	d106      	bne.n	8000948 <__aeabi_ddiv+0x1b0>
 800093a:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800093e:	f43f aefd 	beq.w	800073c <__aeabi_dmul+0x1f8>
 8000942:	4610      	mov	r0, r2
 8000944:	4619      	mov	r1, r3
 8000946:	e722      	b.n	800078e <__aeabi_dmul+0x24a>
 8000948:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800094c:	bf18      	it	ne
 800094e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000952:	f47f aec5 	bne.w	80006e0 <__aeabi_dmul+0x19c>
 8000956:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800095a:	f47f af0d 	bne.w	8000778 <__aeabi_dmul+0x234>
 800095e:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000962:	f47f aeeb 	bne.w	800073c <__aeabi_dmul+0x1f8>
 8000966:	e712      	b.n	800078e <__aeabi_dmul+0x24a>

08000968 <__aeabi_uldivmod>:
 8000968:	b953      	cbnz	r3, 8000980 <__aeabi_uldivmod+0x18>
 800096a:	b94a      	cbnz	r2, 8000980 <__aeabi_uldivmod+0x18>
 800096c:	2900      	cmp	r1, #0
 800096e:	bf08      	it	eq
 8000970:	2800      	cmpeq	r0, #0
 8000972:	bf1c      	itt	ne
 8000974:	f04f 31ff 	movne.w	r1, #4294967295
 8000978:	f04f 30ff 	movne.w	r0, #4294967295
 800097c:	f000 b96a 	b.w	8000c54 <__aeabi_idiv0>
 8000980:	f1ad 0c08 	sub.w	ip, sp, #8
 8000984:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000988:	f000 f806 	bl	8000998 <__udivmoddi4>
 800098c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000990:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000994:	b004      	add	sp, #16
 8000996:	4770      	bx	lr

08000998 <__udivmoddi4>:
 8000998:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800099c:	9d08      	ldr	r5, [sp, #32]
 800099e:	460c      	mov	r4, r1
 80009a0:	2b00      	cmp	r3, #0
 80009a2:	d14e      	bne.n	8000a42 <__udivmoddi4+0xaa>
 80009a4:	4694      	mov	ip, r2
 80009a6:	458c      	cmp	ip, r1
 80009a8:	4686      	mov	lr, r0
 80009aa:	fab2 f282 	clz	r2, r2
 80009ae:	d962      	bls.n	8000a76 <__udivmoddi4+0xde>
 80009b0:	b14a      	cbz	r2, 80009c6 <__udivmoddi4+0x2e>
 80009b2:	f1c2 0320 	rsb	r3, r2, #32
 80009b6:	4091      	lsls	r1, r2
 80009b8:	fa20 f303 	lsr.w	r3, r0, r3
 80009bc:	fa0c fc02 	lsl.w	ip, ip, r2
 80009c0:	4319      	orrs	r1, r3
 80009c2:	fa00 fe02 	lsl.w	lr, r0, r2
 80009c6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80009ca:	fa1f f68c 	uxth.w	r6, ip
 80009ce:	fbb1 f4f7 	udiv	r4, r1, r7
 80009d2:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80009d6:	fb07 1114 	mls	r1, r7, r4, r1
 80009da:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80009de:	fb04 f106 	mul.w	r1, r4, r6
 80009e2:	4299      	cmp	r1, r3
 80009e4:	d90a      	bls.n	80009fc <__udivmoddi4+0x64>
 80009e6:	eb1c 0303 	adds.w	r3, ip, r3
 80009ea:	f104 30ff 	add.w	r0, r4, #4294967295
 80009ee:	f080 8112 	bcs.w	8000c16 <__udivmoddi4+0x27e>
 80009f2:	4299      	cmp	r1, r3
 80009f4:	f240 810f 	bls.w	8000c16 <__udivmoddi4+0x27e>
 80009f8:	3c02      	subs	r4, #2
 80009fa:	4463      	add	r3, ip
 80009fc:	1a59      	subs	r1, r3, r1
 80009fe:	fa1f f38e 	uxth.w	r3, lr
 8000a02:	fbb1 f0f7 	udiv	r0, r1, r7
 8000a06:	fb07 1110 	mls	r1, r7, r0, r1
 8000a0a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000a0e:	fb00 f606 	mul.w	r6, r0, r6
 8000a12:	429e      	cmp	r6, r3
 8000a14:	d90a      	bls.n	8000a2c <__udivmoddi4+0x94>
 8000a16:	eb1c 0303 	adds.w	r3, ip, r3
 8000a1a:	f100 31ff 	add.w	r1, r0, #4294967295
 8000a1e:	f080 80fc 	bcs.w	8000c1a <__udivmoddi4+0x282>
 8000a22:	429e      	cmp	r6, r3
 8000a24:	f240 80f9 	bls.w	8000c1a <__udivmoddi4+0x282>
 8000a28:	4463      	add	r3, ip
 8000a2a:	3802      	subs	r0, #2
 8000a2c:	1b9b      	subs	r3, r3, r6
 8000a2e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000a32:	2100      	movs	r1, #0
 8000a34:	b11d      	cbz	r5, 8000a3e <__udivmoddi4+0xa6>
 8000a36:	40d3      	lsrs	r3, r2
 8000a38:	2200      	movs	r2, #0
 8000a3a:	e9c5 3200 	strd	r3, r2, [r5]
 8000a3e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000a42:	428b      	cmp	r3, r1
 8000a44:	d905      	bls.n	8000a52 <__udivmoddi4+0xba>
 8000a46:	b10d      	cbz	r5, 8000a4c <__udivmoddi4+0xb4>
 8000a48:	e9c5 0100 	strd	r0, r1, [r5]
 8000a4c:	2100      	movs	r1, #0
 8000a4e:	4608      	mov	r0, r1
 8000a50:	e7f5      	b.n	8000a3e <__udivmoddi4+0xa6>
 8000a52:	fab3 f183 	clz	r1, r3
 8000a56:	2900      	cmp	r1, #0
 8000a58:	d146      	bne.n	8000ae8 <__udivmoddi4+0x150>
 8000a5a:	42a3      	cmp	r3, r4
 8000a5c:	d302      	bcc.n	8000a64 <__udivmoddi4+0xcc>
 8000a5e:	4290      	cmp	r0, r2
 8000a60:	f0c0 80f0 	bcc.w	8000c44 <__udivmoddi4+0x2ac>
 8000a64:	1a86      	subs	r6, r0, r2
 8000a66:	eb64 0303 	sbc.w	r3, r4, r3
 8000a6a:	2001      	movs	r0, #1
 8000a6c:	2d00      	cmp	r5, #0
 8000a6e:	d0e6      	beq.n	8000a3e <__udivmoddi4+0xa6>
 8000a70:	e9c5 6300 	strd	r6, r3, [r5]
 8000a74:	e7e3      	b.n	8000a3e <__udivmoddi4+0xa6>
 8000a76:	2a00      	cmp	r2, #0
 8000a78:	f040 8090 	bne.w	8000b9c <__udivmoddi4+0x204>
 8000a7c:	eba1 040c 	sub.w	r4, r1, ip
 8000a80:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000a84:	fa1f f78c 	uxth.w	r7, ip
 8000a88:	2101      	movs	r1, #1
 8000a8a:	fbb4 f6f8 	udiv	r6, r4, r8
 8000a8e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000a92:	fb08 4416 	mls	r4, r8, r6, r4
 8000a96:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000a9a:	fb07 f006 	mul.w	r0, r7, r6
 8000a9e:	4298      	cmp	r0, r3
 8000aa0:	d908      	bls.n	8000ab4 <__udivmoddi4+0x11c>
 8000aa2:	eb1c 0303 	adds.w	r3, ip, r3
 8000aa6:	f106 34ff 	add.w	r4, r6, #4294967295
 8000aaa:	d202      	bcs.n	8000ab2 <__udivmoddi4+0x11a>
 8000aac:	4298      	cmp	r0, r3
 8000aae:	f200 80cd 	bhi.w	8000c4c <__udivmoddi4+0x2b4>
 8000ab2:	4626      	mov	r6, r4
 8000ab4:	1a1c      	subs	r4, r3, r0
 8000ab6:	fa1f f38e 	uxth.w	r3, lr
 8000aba:	fbb4 f0f8 	udiv	r0, r4, r8
 8000abe:	fb08 4410 	mls	r4, r8, r0, r4
 8000ac2:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000ac6:	fb00 f707 	mul.w	r7, r0, r7
 8000aca:	429f      	cmp	r7, r3
 8000acc:	d908      	bls.n	8000ae0 <__udivmoddi4+0x148>
 8000ace:	eb1c 0303 	adds.w	r3, ip, r3
 8000ad2:	f100 34ff 	add.w	r4, r0, #4294967295
 8000ad6:	d202      	bcs.n	8000ade <__udivmoddi4+0x146>
 8000ad8:	429f      	cmp	r7, r3
 8000ada:	f200 80b0 	bhi.w	8000c3e <__udivmoddi4+0x2a6>
 8000ade:	4620      	mov	r0, r4
 8000ae0:	1bdb      	subs	r3, r3, r7
 8000ae2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000ae6:	e7a5      	b.n	8000a34 <__udivmoddi4+0x9c>
 8000ae8:	f1c1 0620 	rsb	r6, r1, #32
 8000aec:	408b      	lsls	r3, r1
 8000aee:	fa22 f706 	lsr.w	r7, r2, r6
 8000af2:	431f      	orrs	r7, r3
 8000af4:	fa20 fc06 	lsr.w	ip, r0, r6
 8000af8:	fa04 f301 	lsl.w	r3, r4, r1
 8000afc:	ea43 030c 	orr.w	r3, r3, ip
 8000b00:	40f4      	lsrs	r4, r6
 8000b02:	fa00 f801 	lsl.w	r8, r0, r1
 8000b06:	0c38      	lsrs	r0, r7, #16
 8000b08:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000b0c:	fbb4 fef0 	udiv	lr, r4, r0
 8000b10:	fa1f fc87 	uxth.w	ip, r7
 8000b14:	fb00 441e 	mls	r4, r0, lr, r4
 8000b18:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000b1c:	fb0e f90c 	mul.w	r9, lr, ip
 8000b20:	45a1      	cmp	r9, r4
 8000b22:	fa02 f201 	lsl.w	r2, r2, r1
 8000b26:	d90a      	bls.n	8000b3e <__udivmoddi4+0x1a6>
 8000b28:	193c      	adds	r4, r7, r4
 8000b2a:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000b2e:	f080 8084 	bcs.w	8000c3a <__udivmoddi4+0x2a2>
 8000b32:	45a1      	cmp	r9, r4
 8000b34:	f240 8081 	bls.w	8000c3a <__udivmoddi4+0x2a2>
 8000b38:	f1ae 0e02 	sub.w	lr, lr, #2
 8000b3c:	443c      	add	r4, r7
 8000b3e:	eba4 0409 	sub.w	r4, r4, r9
 8000b42:	fa1f f983 	uxth.w	r9, r3
 8000b46:	fbb4 f3f0 	udiv	r3, r4, r0
 8000b4a:	fb00 4413 	mls	r4, r0, r3, r4
 8000b4e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000b52:	fb03 fc0c 	mul.w	ip, r3, ip
 8000b56:	45a4      	cmp	ip, r4
 8000b58:	d907      	bls.n	8000b6a <__udivmoddi4+0x1d2>
 8000b5a:	193c      	adds	r4, r7, r4
 8000b5c:	f103 30ff 	add.w	r0, r3, #4294967295
 8000b60:	d267      	bcs.n	8000c32 <__udivmoddi4+0x29a>
 8000b62:	45a4      	cmp	ip, r4
 8000b64:	d965      	bls.n	8000c32 <__udivmoddi4+0x29a>
 8000b66:	3b02      	subs	r3, #2
 8000b68:	443c      	add	r4, r7
 8000b6a:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000b6e:	fba0 9302 	umull	r9, r3, r0, r2
 8000b72:	eba4 040c 	sub.w	r4, r4, ip
 8000b76:	429c      	cmp	r4, r3
 8000b78:	46ce      	mov	lr, r9
 8000b7a:	469c      	mov	ip, r3
 8000b7c:	d351      	bcc.n	8000c22 <__udivmoddi4+0x28a>
 8000b7e:	d04e      	beq.n	8000c1e <__udivmoddi4+0x286>
 8000b80:	b155      	cbz	r5, 8000b98 <__udivmoddi4+0x200>
 8000b82:	ebb8 030e 	subs.w	r3, r8, lr
 8000b86:	eb64 040c 	sbc.w	r4, r4, ip
 8000b8a:	fa04 f606 	lsl.w	r6, r4, r6
 8000b8e:	40cb      	lsrs	r3, r1
 8000b90:	431e      	orrs	r6, r3
 8000b92:	40cc      	lsrs	r4, r1
 8000b94:	e9c5 6400 	strd	r6, r4, [r5]
 8000b98:	2100      	movs	r1, #0
 8000b9a:	e750      	b.n	8000a3e <__udivmoddi4+0xa6>
 8000b9c:	f1c2 0320 	rsb	r3, r2, #32
 8000ba0:	fa20 f103 	lsr.w	r1, r0, r3
 8000ba4:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ba8:	fa24 f303 	lsr.w	r3, r4, r3
 8000bac:	4094      	lsls	r4, r2
 8000bae:	430c      	orrs	r4, r1
 8000bb0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000bb4:	fa00 fe02 	lsl.w	lr, r0, r2
 8000bb8:	fa1f f78c 	uxth.w	r7, ip
 8000bbc:	fbb3 f0f8 	udiv	r0, r3, r8
 8000bc0:	fb08 3110 	mls	r1, r8, r0, r3
 8000bc4:	0c23      	lsrs	r3, r4, #16
 8000bc6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000bca:	fb00 f107 	mul.w	r1, r0, r7
 8000bce:	4299      	cmp	r1, r3
 8000bd0:	d908      	bls.n	8000be4 <__udivmoddi4+0x24c>
 8000bd2:	eb1c 0303 	adds.w	r3, ip, r3
 8000bd6:	f100 36ff 	add.w	r6, r0, #4294967295
 8000bda:	d22c      	bcs.n	8000c36 <__udivmoddi4+0x29e>
 8000bdc:	4299      	cmp	r1, r3
 8000bde:	d92a      	bls.n	8000c36 <__udivmoddi4+0x29e>
 8000be0:	3802      	subs	r0, #2
 8000be2:	4463      	add	r3, ip
 8000be4:	1a5b      	subs	r3, r3, r1
 8000be6:	b2a4      	uxth	r4, r4
 8000be8:	fbb3 f1f8 	udiv	r1, r3, r8
 8000bec:	fb08 3311 	mls	r3, r8, r1, r3
 8000bf0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000bf4:	fb01 f307 	mul.w	r3, r1, r7
 8000bf8:	42a3      	cmp	r3, r4
 8000bfa:	d908      	bls.n	8000c0e <__udivmoddi4+0x276>
 8000bfc:	eb1c 0404 	adds.w	r4, ip, r4
 8000c00:	f101 36ff 	add.w	r6, r1, #4294967295
 8000c04:	d213      	bcs.n	8000c2e <__udivmoddi4+0x296>
 8000c06:	42a3      	cmp	r3, r4
 8000c08:	d911      	bls.n	8000c2e <__udivmoddi4+0x296>
 8000c0a:	3902      	subs	r1, #2
 8000c0c:	4464      	add	r4, ip
 8000c0e:	1ae4      	subs	r4, r4, r3
 8000c10:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000c14:	e739      	b.n	8000a8a <__udivmoddi4+0xf2>
 8000c16:	4604      	mov	r4, r0
 8000c18:	e6f0      	b.n	80009fc <__udivmoddi4+0x64>
 8000c1a:	4608      	mov	r0, r1
 8000c1c:	e706      	b.n	8000a2c <__udivmoddi4+0x94>
 8000c1e:	45c8      	cmp	r8, r9
 8000c20:	d2ae      	bcs.n	8000b80 <__udivmoddi4+0x1e8>
 8000c22:	ebb9 0e02 	subs.w	lr, r9, r2
 8000c26:	eb63 0c07 	sbc.w	ip, r3, r7
 8000c2a:	3801      	subs	r0, #1
 8000c2c:	e7a8      	b.n	8000b80 <__udivmoddi4+0x1e8>
 8000c2e:	4631      	mov	r1, r6
 8000c30:	e7ed      	b.n	8000c0e <__udivmoddi4+0x276>
 8000c32:	4603      	mov	r3, r0
 8000c34:	e799      	b.n	8000b6a <__udivmoddi4+0x1d2>
 8000c36:	4630      	mov	r0, r6
 8000c38:	e7d4      	b.n	8000be4 <__udivmoddi4+0x24c>
 8000c3a:	46d6      	mov	lr, sl
 8000c3c:	e77f      	b.n	8000b3e <__udivmoddi4+0x1a6>
 8000c3e:	4463      	add	r3, ip
 8000c40:	3802      	subs	r0, #2
 8000c42:	e74d      	b.n	8000ae0 <__udivmoddi4+0x148>
 8000c44:	4606      	mov	r6, r0
 8000c46:	4623      	mov	r3, r4
 8000c48:	4608      	mov	r0, r1
 8000c4a:	e70f      	b.n	8000a6c <__udivmoddi4+0xd4>
 8000c4c:	3e02      	subs	r6, #2
 8000c4e:	4463      	add	r3, ip
 8000c50:	e730      	b.n	8000ab4 <__udivmoddi4+0x11c>
 8000c52:	bf00      	nop

08000c54 <__aeabi_idiv0>:
 8000c54:	4770      	bx	lr
 8000c56:	bf00      	nop

08000c58 <BNO055_Init>:

//Setup Offsets


HAL_StatusTypeDef BNO055_Init(BNO055_Structure *bno, I2C_HandleTypeDef *hi2cx, uint8_t addr, OPRMode mode)
{
 8000c58:	b580      	push	{r7, lr}
 8000c5a:	b08a      	sub	sp, #40	@ 0x28
 8000c5c:	af04      	add	r7, sp, #16
 8000c5e:	60f8      	str	r0, [r7, #12]
 8000c60:	60b9      	str	r1, [r7, #8]
 8000c62:	4611      	mov	r1, r2
 8000c64:	461a      	mov	r2, r3
 8000c66:	460b      	mov	r3, r1
 8000c68:	71fb      	strb	r3, [r7, #7]
 8000c6a:	4613      	mov	r3, r2
 8000c6c:	71bb      	strb	r3, [r7, #6]
	uint8_t txbuffer;
	uint8_t rxbuffer;

	bno->hi2cx = hi2cx;
 8000c6e:	68fb      	ldr	r3, [r7, #12]
 8000c70:	68ba      	ldr	r2, [r7, #8]
 8000c72:	601a      	str	r2, [r3, #0]
	bno->address = BNO055_ADD_H;
 8000c74:	68fb      	ldr	r3, [r7, #12]
 8000c76:	2252      	movs	r2, #82	@ 0x52
 8000c78:	711a      	strb	r2, [r3, #4]
	if (addr == 0) bno->address = BNO055_ADD_L;
 8000c7a:	79fb      	ldrb	r3, [r7, #7]
 8000c7c:	2b00      	cmp	r3, #0
 8000c7e:	d102      	bne.n	8000c86 <BNO055_Init+0x2e>
 8000c80:	68fb      	ldr	r3, [r7, #12]
 8000c82:	2250      	movs	r2, #80	@ 0x50
 8000c84:	711a      	strb	r2, [r3, #4]

	HAL_I2C_Mem_Read(bno->hi2cx, bno->address, CHIP_ID, 1, &rxbuffer, 1, 10);
 8000c86:	68fb      	ldr	r3, [r7, #12]
 8000c88:	6818      	ldr	r0, [r3, #0]
 8000c8a:	68fb      	ldr	r3, [r7, #12]
 8000c8c:	791b      	ldrb	r3, [r3, #4]
 8000c8e:	4619      	mov	r1, r3
 8000c90:	230a      	movs	r3, #10
 8000c92:	9302      	str	r3, [sp, #8]
 8000c94:	2301      	movs	r3, #1
 8000c96:	9301      	str	r3, [sp, #4]
 8000c98:	f107 0316 	add.w	r3, r7, #22
 8000c9c:	9300      	str	r3, [sp, #0]
 8000c9e:	2301      	movs	r3, #1
 8000ca0:	2200      	movs	r2, #0
 8000ca2:	f002 f971 	bl	8002f88 <HAL_I2C_Mem_Read>
	if (rxbuffer != 0xA0) {
 8000ca6:	7dbb      	ldrb	r3, [r7, #22]
 8000ca8:	2ba0      	cmp	r3, #160	@ 0xa0
 8000caa:	d018      	beq.n	8000cde <BNO055_Init+0x86>
		HAL_Delay(1000);
 8000cac:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000cb0:	f001 fb9a 	bl	80023e8 <HAL_Delay>
		HAL_I2C_Mem_Read(bno->hi2cx, bno->address, CHIP_ID, 1, &rxbuffer, 1, 10);
 8000cb4:	68fb      	ldr	r3, [r7, #12]
 8000cb6:	6818      	ldr	r0, [r3, #0]
 8000cb8:	68fb      	ldr	r3, [r7, #12]
 8000cba:	791b      	ldrb	r3, [r3, #4]
 8000cbc:	4619      	mov	r1, r3
 8000cbe:	230a      	movs	r3, #10
 8000cc0:	9302      	str	r3, [sp, #8]
 8000cc2:	2301      	movs	r3, #1
 8000cc4:	9301      	str	r3, [sp, #4]
 8000cc6:	f107 0316 	add.w	r3, r7, #22
 8000cca:	9300      	str	r3, [sp, #0]
 8000ccc:	2301      	movs	r3, #1
 8000cce:	2200      	movs	r2, #0
 8000cd0:	f002 f95a 	bl	8002f88 <HAL_I2C_Mem_Read>
		if (rxbuffer != 0xA0) return HAL_ERROR;
 8000cd4:	7dbb      	ldrb	r3, [r7, #22]
 8000cd6:	2ba0      	cmp	r3, #160	@ 0xa0
 8000cd8:	d001      	beq.n	8000cde <BNO055_Init+0x86>
 8000cda:	2301      	movs	r3, #1
 8000cdc:	e099      	b.n	8000e12 <BNO055_Init+0x1ba>
	}

	txbuffer = CONFIGMODE;
 8000cde:	2300      	movs	r3, #0
 8000ce0:	75fb      	strb	r3, [r7, #23]
	HAL_I2C_Mem_Write(bno->hi2cx, bno->address, OPR_MODE, 1, &txbuffer, 1, 10);
 8000ce2:	68fb      	ldr	r3, [r7, #12]
 8000ce4:	6818      	ldr	r0, [r3, #0]
 8000ce6:	68fb      	ldr	r3, [r7, #12]
 8000ce8:	791b      	ldrb	r3, [r3, #4]
 8000cea:	4619      	mov	r1, r3
 8000cec:	230a      	movs	r3, #10
 8000cee:	9302      	str	r3, [sp, #8]
 8000cf0:	2301      	movs	r3, #1
 8000cf2:	9301      	str	r3, [sp, #4]
 8000cf4:	f107 0317 	add.w	r3, r7, #23
 8000cf8:	9300      	str	r3, [sp, #0]
 8000cfa:	2301      	movs	r3, #1
 8000cfc:	223d      	movs	r2, #61	@ 0x3d
 8000cfe:	f002 f82f 	bl	8002d60 <HAL_I2C_Mem_Write>
	HAL_Delay(10);
 8000d02:	200a      	movs	r0, #10
 8000d04:	f001 fb70 	bl	80023e8 <HAL_Delay>

	txbuffer = 0x20;
 8000d08:	2320      	movs	r3, #32
 8000d0a:	75fb      	strb	r3, [r7, #23]
	HAL_I2C_Mem_Write(bno->hi2cx, bno->address, SYS_TRIGGER, 1, &txbuffer, 1, 10);
 8000d0c:	68fb      	ldr	r3, [r7, #12]
 8000d0e:	6818      	ldr	r0, [r3, #0]
 8000d10:	68fb      	ldr	r3, [r7, #12]
 8000d12:	791b      	ldrb	r3, [r3, #4]
 8000d14:	4619      	mov	r1, r3
 8000d16:	230a      	movs	r3, #10
 8000d18:	9302      	str	r3, [sp, #8]
 8000d1a:	2301      	movs	r3, #1
 8000d1c:	9301      	str	r3, [sp, #4]
 8000d1e:	f107 0317 	add.w	r3, r7, #23
 8000d22:	9300      	str	r3, [sp, #0]
 8000d24:	2301      	movs	r3, #1
 8000d26:	223f      	movs	r2, #63	@ 0x3f
 8000d28:	f002 f81a 	bl	8002d60 <HAL_I2C_Mem_Write>
	HAL_Delay(30);
 8000d2c:	201e      	movs	r0, #30
 8000d2e:	f001 fb5b 	bl	80023e8 <HAL_Delay>

	do {
		HAL_I2C_Mem_Read(bno->hi2cx, bno->address, CHIP_ID, 1, &rxbuffer, 1, 10);
 8000d32:	68fb      	ldr	r3, [r7, #12]
 8000d34:	6818      	ldr	r0, [r3, #0]
 8000d36:	68fb      	ldr	r3, [r7, #12]
 8000d38:	791b      	ldrb	r3, [r3, #4]
 8000d3a:	4619      	mov	r1, r3
 8000d3c:	230a      	movs	r3, #10
 8000d3e:	9302      	str	r3, [sp, #8]
 8000d40:	2301      	movs	r3, #1
 8000d42:	9301      	str	r3, [sp, #4]
 8000d44:	f107 0316 	add.w	r3, r7, #22
 8000d48:	9300      	str	r3, [sp, #0]
 8000d4a:	2301      	movs	r3, #1
 8000d4c:	2200      	movs	r2, #0
 8000d4e:	f002 f91b 	bl	8002f88 <HAL_I2C_Mem_Read>
	} while (rxbuffer != 0xA0);
 8000d52:	7dbb      	ldrb	r3, [r7, #22]
 8000d54:	2ba0      	cmp	r3, #160	@ 0xa0
 8000d56:	d1ec      	bne.n	8000d32 <BNO055_Init+0xda>
	HAL_Delay(50);
 8000d58:	2032      	movs	r0, #50	@ 0x32
 8000d5a:	f001 fb45 	bl	80023e8 <HAL_Delay>

	txbuffer = Normal_Mode;
 8000d5e:	2300      	movs	r3, #0
 8000d60:	75fb      	strb	r3, [r7, #23]
	HAL_I2C_Mem_Write(bno->hi2cx, bno->address, PWR_MODE, 1, &txbuffer, 1, 10);
 8000d62:	68fb      	ldr	r3, [r7, #12]
 8000d64:	6818      	ldr	r0, [r3, #0]
 8000d66:	68fb      	ldr	r3, [r7, #12]
 8000d68:	791b      	ldrb	r3, [r3, #4]
 8000d6a:	4619      	mov	r1, r3
 8000d6c:	230a      	movs	r3, #10
 8000d6e:	9302      	str	r3, [sp, #8]
 8000d70:	2301      	movs	r3, #1
 8000d72:	9301      	str	r3, [sp, #4]
 8000d74:	f107 0317 	add.w	r3, r7, #23
 8000d78:	9300      	str	r3, [sp, #0]
 8000d7a:	2301      	movs	r3, #1
 8000d7c:	223e      	movs	r2, #62	@ 0x3e
 8000d7e:	f001 ffef 	bl	8002d60 <HAL_I2C_Mem_Write>
	HAL_Delay(10);
 8000d82:	200a      	movs	r0, #10
 8000d84:	f001 fb30 	bl	80023e8 <HAL_Delay>

	txbuffer = Page_ID_00;
 8000d88:	2300      	movs	r3, #0
 8000d8a:	75fb      	strb	r3, [r7, #23]
	HAL_I2C_Mem_Write(bno->hi2cx, bno->address, PAGE_ID, 1, &txbuffer, 1, 10);
 8000d8c:	68fb      	ldr	r3, [r7, #12]
 8000d8e:	6818      	ldr	r0, [r3, #0]
 8000d90:	68fb      	ldr	r3, [r7, #12]
 8000d92:	791b      	ldrb	r3, [r3, #4]
 8000d94:	4619      	mov	r1, r3
 8000d96:	230a      	movs	r3, #10
 8000d98:	9302      	str	r3, [sp, #8]
 8000d9a:	2301      	movs	r3, #1
 8000d9c:	9301      	str	r3, [sp, #4]
 8000d9e:	f107 0317 	add.w	r3, r7, #23
 8000da2:	9300      	str	r3, [sp, #0]
 8000da4:	2301      	movs	r3, #1
 8000da6:	2207      	movs	r2, #7
 8000da8:	f001 ffda 	bl	8002d60 <HAL_I2C_Mem_Write>
	HAL_Delay(10);
 8000dac:	200a      	movs	r0, #10
 8000dae:	f001 fb1b 	bl	80023e8 <HAL_Delay>

	txbuffer = 0x00;
 8000db2:	2300      	movs	r3, #0
 8000db4:	75fb      	strb	r3, [r7, #23]
	HAL_I2C_Mem_Write(bno->hi2cx, bno->address, SYS_TRIGGER, 1, &txbuffer, 1, 10);
 8000db6:	68fb      	ldr	r3, [r7, #12]
 8000db8:	6818      	ldr	r0, [r3, #0]
 8000dba:	68fb      	ldr	r3, [r7, #12]
 8000dbc:	791b      	ldrb	r3, [r3, #4]
 8000dbe:	4619      	mov	r1, r3
 8000dc0:	230a      	movs	r3, #10
 8000dc2:	9302      	str	r3, [sp, #8]
 8000dc4:	2301      	movs	r3, #1
 8000dc6:	9301      	str	r3, [sp, #4]
 8000dc8:	f107 0317 	add.w	r3, r7, #23
 8000dcc:	9300      	str	r3, [sp, #0]
 8000dce:	2301      	movs	r3, #1
 8000dd0:	223f      	movs	r2, #63	@ 0x3f
 8000dd2:	f001 ffc5 	bl	8002d60 <HAL_I2C_Mem_Write>
	HAL_Delay(10);
 8000dd6:	200a      	movs	r0, #10
 8000dd8:	f001 fb06 	bl	80023e8 <HAL_Delay>

	bno->mode = mode;
 8000ddc:	68fb      	ldr	r3, [r7, #12]
 8000dde:	79ba      	ldrb	r2, [r7, #6]
 8000de0:	715a      	strb	r2, [r3, #5]
	HAL_I2C_Mem_Write(bno->hi2cx, bno->address, OPR_MODE, 1, &bno->mode, 1, 10);
 8000de2:	68fb      	ldr	r3, [r7, #12]
 8000de4:	6818      	ldr	r0, [r3, #0]
 8000de6:	68fb      	ldr	r3, [r7, #12]
 8000de8:	791b      	ldrb	r3, [r3, #4]
 8000dea:	4619      	mov	r1, r3
 8000dec:	68fb      	ldr	r3, [r7, #12]
 8000dee:	3305      	adds	r3, #5
 8000df0:	220a      	movs	r2, #10
 8000df2:	9202      	str	r2, [sp, #8]
 8000df4:	2201      	movs	r2, #1
 8000df6:	9201      	str	r2, [sp, #4]
 8000df8:	9300      	str	r3, [sp, #0]
 8000dfa:	2301      	movs	r3, #1
 8000dfc:	223d      	movs	r2, #61	@ 0x3d
 8000dfe:	f001 ffaf 	bl	8002d60 <HAL_I2C_Mem_Write>
	HAL_Delay(1000);
 8000e02:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000e06:	f001 faef 	bl	80023e8 <HAL_Delay>

	bno->flag = HAL_OK;
 8000e0a:	68fb      	ldr	r3, [r7, #12]
 8000e0c:	2200      	movs	r2, #0
 8000e0e:	719a      	strb	r2, [r3, #6]

	return HAL_OK;
 8000e10:	2300      	movs	r3, #0
}
 8000e12:	4618      	mov	r0, r3
 8000e14:	3718      	adds	r7, #24
 8000e16:	46bd      	mov	sp, r7
 8000e18:	bd80      	pop	{r7, pc}

08000e1a <BNO055_getCalibration>:

void BNO055_getCalibration(BNO055_Structure *bno, uint8_t *sys, uint8_t *gyro, uint8_t *accel, uint8_t *mag)
{
 8000e1a:	b580      	push	{r7, lr}
 8000e1c:	b08a      	sub	sp, #40	@ 0x28
 8000e1e:	af04      	add	r7, sp, #16
 8000e20:	60f8      	str	r0, [r7, #12]
 8000e22:	60b9      	str	r1, [r7, #8]
 8000e24:	607a      	str	r2, [r7, #4]
 8000e26:	603b      	str	r3, [r7, #0]
	uint8_t txbuffer;
	txbuffer = Page_ID_00;
 8000e28:	2300      	movs	r3, #0
 8000e2a:	75fb      	strb	r3, [r7, #23]

	HAL_I2C_Mem_Write(bno->hi2cx, bno->address, PAGE_ID, 1, &txbuffer, 1, 10);
 8000e2c:	68fb      	ldr	r3, [r7, #12]
 8000e2e:	6818      	ldr	r0, [r3, #0]
 8000e30:	68fb      	ldr	r3, [r7, #12]
 8000e32:	791b      	ldrb	r3, [r3, #4]
 8000e34:	4619      	mov	r1, r3
 8000e36:	230a      	movs	r3, #10
 8000e38:	9302      	str	r3, [sp, #8]
 8000e3a:	2301      	movs	r3, #1
 8000e3c:	9301      	str	r3, [sp, #4]
 8000e3e:	f107 0317 	add.w	r3, r7, #23
 8000e42:	9300      	str	r3, [sp, #0]
 8000e44:	2301      	movs	r3, #1
 8000e46:	2207      	movs	r2, #7
 8000e48:	f001 ff8a 	bl	8002d60 <HAL_I2C_Mem_Write>

	HAL_Delay(10);
 8000e4c:	200a      	movs	r0, #10
 8000e4e:	f001 facb 	bl	80023e8 <HAL_Delay>
	HAL_I2C_Mem_Read(bno->hi2cx, bno->address, CALIB_STAT, 1, bno->RxBuffer, 1, 10);
 8000e52:	68fb      	ldr	r3, [r7, #12]
 8000e54:	6818      	ldr	r0, [r3, #0]
 8000e56:	68fb      	ldr	r3, [r7, #12]
 8000e58:	791b      	ldrb	r3, [r3, #4]
 8000e5a:	4619      	mov	r1, r3
 8000e5c:	68fb      	ldr	r3, [r7, #12]
 8000e5e:	33b8      	adds	r3, #184	@ 0xb8
 8000e60:	220a      	movs	r2, #10
 8000e62:	9202      	str	r2, [sp, #8]
 8000e64:	2201      	movs	r2, #1
 8000e66:	9201      	str	r2, [sp, #4]
 8000e68:	9300      	str	r3, [sp, #0]
 8000e6a:	2301      	movs	r3, #1
 8000e6c:	2235      	movs	r2, #53	@ 0x35
 8000e6e:	f002 f88b 	bl	8002f88 <HAL_I2C_Mem_Read>


	if (sys != NULL) {
 8000e72:	68bb      	ldr	r3, [r7, #8]
 8000e74:	2b00      	cmp	r3, #0
 8000e76:	d006      	beq.n	8000e86 <BNO055_getCalibration+0x6c>
		*sys = (bno->RxBuffer[0] >> 6) & 0x03;
 8000e78:	68fb      	ldr	r3, [r7, #12]
 8000e7a:	f893 30b8 	ldrb.w	r3, [r3, #184]	@ 0xb8
 8000e7e:	099b      	lsrs	r3, r3, #6
 8000e80:	b2da      	uxtb	r2, r3
 8000e82:	68bb      	ldr	r3, [r7, #8]
 8000e84:	701a      	strb	r2, [r3, #0]
	}
	if (gyro != NULL) {
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	2b00      	cmp	r3, #0
 8000e8a:	d009      	beq.n	8000ea0 <BNO055_getCalibration+0x86>
		*gyro = (bno->RxBuffer[0] >> 4) & 0x03;
 8000e8c:	68fb      	ldr	r3, [r7, #12]
 8000e8e:	f893 30b8 	ldrb.w	r3, [r3, #184]	@ 0xb8
 8000e92:	091b      	lsrs	r3, r3, #4
 8000e94:	b2db      	uxtb	r3, r3
 8000e96:	f003 0303 	and.w	r3, r3, #3
 8000e9a:	b2da      	uxtb	r2, r3
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	701a      	strb	r2, [r3, #0]
	}
	if (accel != NULL) {
 8000ea0:	683b      	ldr	r3, [r7, #0]
 8000ea2:	2b00      	cmp	r3, #0
 8000ea4:	d009      	beq.n	8000eba <BNO055_getCalibration+0xa0>
		*accel = (bno->RxBuffer[0] >> 2) & 0x03;
 8000ea6:	68fb      	ldr	r3, [r7, #12]
 8000ea8:	f893 30b8 	ldrb.w	r3, [r3, #184]	@ 0xb8
 8000eac:	089b      	lsrs	r3, r3, #2
 8000eae:	b2db      	uxtb	r3, r3
 8000eb0:	f003 0303 	and.w	r3, r3, #3
 8000eb4:	b2da      	uxtb	r2, r3
 8000eb6:	683b      	ldr	r3, [r7, #0]
 8000eb8:	701a      	strb	r2, [r3, #0]
	}
	if (mag != NULL) {
 8000eba:	6a3b      	ldr	r3, [r7, #32]
 8000ebc:	2b00      	cmp	r3, #0
 8000ebe:	d007      	beq.n	8000ed0 <BNO055_getCalibration+0xb6>
		*mag = bno->RxBuffer[0] & 0x03;
 8000ec0:	68fb      	ldr	r3, [r7, #12]
 8000ec2:	f893 30b8 	ldrb.w	r3, [r3, #184]	@ 0xb8
 8000ec6:	f003 0303 	and.w	r3, r3, #3
 8000eca:	b2da      	uxtb	r2, r3
 8000ecc:	6a3b      	ldr	r3, [r7, #32]
 8000ece:	701a      	strb	r2, [r3, #0]
	}
}
 8000ed0:	bf00      	nop
 8000ed2:	3718      	adds	r7, #24
 8000ed4:	46bd      	mov	sp, r7
 8000ed6:	bd80      	pop	{r7, pc}

08000ed8 <BNO055_isFullyCalibrated>:

HAL_StatusTypeDef BNO055_isFullyCalibrated(BNO055_Structure *bno)
{
 8000ed8:	b580      	push	{r7, lr}
 8000eda:	b088      	sub	sp, #32
 8000edc:	af04      	add	r7, sp, #16
 8000ede:	6078      	str	r0, [r7, #4]
	uint8_t check_config = (BNO055_read8(bno, OPR_MODE) & 0x0F);
 8000ee0:	213d      	movs	r1, #61	@ 0x3d
 8000ee2:	6878      	ldr	r0, [r7, #4]
 8000ee4:	f000 f950 	bl	8001188 <BNO055_read8>
 8000ee8:	4603      	mov	r3, r0
 8000eea:	f003 030f 	and.w	r3, r3, #15
 8000eee:	73fb      	strb	r3, [r7, #15]
	uint8_t txbuffer;
	txbuffer = NDOF;
 8000ef0:	230c      	movs	r3, #12
 8000ef2:	73bb      	strb	r3, [r7, #14]
	if (check_config != NDOF){
 8000ef4:	7bfb      	ldrb	r3, [r7, #15]
 8000ef6:	2b0c      	cmp	r3, #12
 8000ef8:	d012      	beq.n	8000f20 <BNO055_isFullyCalibrated+0x48>
		HAL_I2C_Mem_Write(bno->hi2cx, bno->address, OPR_MODE, 1, &txbuffer, 1, 10);
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	6818      	ldr	r0, [r3, #0]
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	791b      	ldrb	r3, [r3, #4]
 8000f02:	4619      	mov	r1, r3
 8000f04:	230a      	movs	r3, #10
 8000f06:	9302      	str	r3, [sp, #8]
 8000f08:	2301      	movs	r3, #1
 8000f0a:	9301      	str	r3, [sp, #4]
 8000f0c:	f107 030e 	add.w	r3, r7, #14
 8000f10:	9300      	str	r3, [sp, #0]
 8000f12:	2301      	movs	r3, #1
 8000f14:	223d      	movs	r2, #61	@ 0x3d
 8000f16:	f001 ff23 	bl	8002d60 <HAL_I2C_Mem_Write>
		HAL_Delay(20);
 8000f1a:	2014      	movs	r0, #20
 8000f1c:	f001 fa64 	bl	80023e8 <HAL_Delay>
	}

	bno->mode = NDOF;
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	220c      	movs	r2, #12
 8000f24:	715a      	strb	r2, [r3, #5]
	uint8_t system, gyro, accel, mag;

	BNO055_getCalibration(bno, &system, &gyro, &accel, &mag);
 8000f26:	f107 000b 	add.w	r0, r7, #11
 8000f2a:	f107 020c 	add.w	r2, r7, #12
 8000f2e:	f107 010d 	add.w	r1, r7, #13
 8000f32:	f107 030a 	add.w	r3, r7, #10
 8000f36:	9300      	str	r3, [sp, #0]
 8000f38:	4603      	mov	r3, r0
 8000f3a:	6878      	ldr	r0, [r7, #4]
 8000f3c:	f7ff ff6d 	bl	8000e1a <BNO055_getCalibration>

	switch(bno->mode){
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	795b      	ldrb	r3, [r3, #5]
 8000f44:	3b01      	subs	r3, #1
 8000f46:	2b0b      	cmp	r3, #11
 8000f48:	f200 80fa 	bhi.w	8001140 <BNO055_isFullyCalibrated+0x268>
 8000f4c:	a201      	add	r2, pc, #4	@ (adr r2, 8000f54 <BNO055_isFullyCalibrated+0x7c>)
 8000f4e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000f52:	bf00      	nop
 8000f54:	08000f85 	.word	0x08000f85
 8000f58:	08000f8f 	.word	0x08000f8f
 8000f5c:	08000f99 	.word	0x08000f99
 8000f60:	08000fa3 	.word	0x08000fa3
 8000f64:	08000fcb 	.word	0x08000fcb
 8000f68:	08000ff3 	.word	0x08000ff3
 8000f6c:	0800101b 	.word	0x0800101b
 8000f70:	08001055 	.word	0x08001055
 8000f74:	0800107d 	.word	0x0800107d
 8000f78:	080010a5 	.word	0x080010a5
 8000f7c:	080010cd 	.word	0x080010cd
 8000f80:	08001107 	.word	0x08001107
	case ACCONLY:
		if(accel == 3) return HAL_OK;
 8000f84:	7afb      	ldrb	r3, [r7, #11]
 8000f86:	2b03      	cmp	r3, #3
 8000f88:	d101      	bne.n	8000f8e <BNO055_isFullyCalibrated+0xb6>
 8000f8a:	2300      	movs	r3, #0
 8000f8c:	e0f6      	b.n	800117c <BNO055_isFullyCalibrated+0x2a4>
	case MAGONLY:
		if(mag == 3) return HAL_OK;
 8000f8e:	7abb      	ldrb	r3, [r7, #10]
 8000f90:	2b03      	cmp	r3, #3
 8000f92:	d101      	bne.n	8000f98 <BNO055_isFullyCalibrated+0xc0>
 8000f94:	2300      	movs	r3, #0
 8000f96:	e0f1      	b.n	800117c <BNO055_isFullyCalibrated+0x2a4>
	case GYROONLY:
		if(gyro == 3) return HAL_OK;
 8000f98:	7b3b      	ldrb	r3, [r7, #12]
 8000f9a:	2b03      	cmp	r3, #3
 8000f9c:	d101      	bne.n	8000fa2 <BNO055_isFullyCalibrated+0xca>
 8000f9e:	2300      	movs	r3, #0
 8000fa0:	e0ec      	b.n	800117c <BNO055_isFullyCalibrated+0x2a4>
	case ACCMAG:
		if (accel == 3) Calibrated.accel = HAL_OK;
 8000fa2:	7afb      	ldrb	r3, [r7, #11]
 8000fa4:	2b03      	cmp	r3, #3
 8000fa6:	d102      	bne.n	8000fae <BNO055_isFullyCalibrated+0xd6>
 8000fa8:	4b76      	ldr	r3, [pc, #472]	@ (8001184 <BNO055_isFullyCalibrated+0x2ac>)
 8000faa:	2200      	movs	r2, #0
 8000fac:	701a      	strb	r2, [r3, #0]
		if (mag == 3) Calibrated.mag = HAL_OK;
 8000fae:	7abb      	ldrb	r3, [r7, #10]
 8000fb0:	2b03      	cmp	r3, #3
 8000fb2:	d102      	bne.n	8000fba <BNO055_isFullyCalibrated+0xe2>
 8000fb4:	4b73      	ldr	r3, [pc, #460]	@ (8001184 <BNO055_isFullyCalibrated+0x2ac>)
 8000fb6:	2200      	movs	r2, #0
 8000fb8:	705a      	strb	r2, [r3, #1]
		if(accel == 3 && mag == 3) return HAL_OK;
 8000fba:	7afb      	ldrb	r3, [r7, #11]
 8000fbc:	2b03      	cmp	r3, #3
 8000fbe:	d104      	bne.n	8000fca <BNO055_isFullyCalibrated+0xf2>
 8000fc0:	7abb      	ldrb	r3, [r7, #10]
 8000fc2:	2b03      	cmp	r3, #3
 8000fc4:	d101      	bne.n	8000fca <BNO055_isFullyCalibrated+0xf2>
 8000fc6:	2300      	movs	r3, #0
 8000fc8:	e0d8      	b.n	800117c <BNO055_isFullyCalibrated+0x2a4>
	case ACCGYRO:
		if (accel == 3) Calibrated.accel = HAL_OK;
 8000fca:	7afb      	ldrb	r3, [r7, #11]
 8000fcc:	2b03      	cmp	r3, #3
 8000fce:	d102      	bne.n	8000fd6 <BNO055_isFullyCalibrated+0xfe>
 8000fd0:	4b6c      	ldr	r3, [pc, #432]	@ (8001184 <BNO055_isFullyCalibrated+0x2ac>)
 8000fd2:	2200      	movs	r2, #0
 8000fd4:	701a      	strb	r2, [r3, #0]
		if (gyro) Calibrated.gyro = HAL_OK;
 8000fd6:	7b3b      	ldrb	r3, [r7, #12]
 8000fd8:	2b00      	cmp	r3, #0
 8000fda:	d002      	beq.n	8000fe2 <BNO055_isFullyCalibrated+0x10a>
 8000fdc:	4b69      	ldr	r3, [pc, #420]	@ (8001184 <BNO055_isFullyCalibrated+0x2ac>)
 8000fde:	2200      	movs	r2, #0
 8000fe0:	709a      	strb	r2, [r3, #2]
		if(accel == 3 && gyro == 3) return HAL_OK;
 8000fe2:	7afb      	ldrb	r3, [r7, #11]
 8000fe4:	2b03      	cmp	r3, #3
 8000fe6:	d104      	bne.n	8000ff2 <BNO055_isFullyCalibrated+0x11a>
 8000fe8:	7b3b      	ldrb	r3, [r7, #12]
 8000fea:	2b03      	cmp	r3, #3
 8000fec:	d101      	bne.n	8000ff2 <BNO055_isFullyCalibrated+0x11a>
 8000fee:	2300      	movs	r3, #0
 8000ff0:	e0c4      	b.n	800117c <BNO055_isFullyCalibrated+0x2a4>
	case MAGGYRO:
		if (mag == 3) Calibrated.mag = HAL_OK;
 8000ff2:	7abb      	ldrb	r3, [r7, #10]
 8000ff4:	2b03      	cmp	r3, #3
 8000ff6:	d102      	bne.n	8000ffe <BNO055_isFullyCalibrated+0x126>
 8000ff8:	4b62      	ldr	r3, [pc, #392]	@ (8001184 <BNO055_isFullyCalibrated+0x2ac>)
 8000ffa:	2200      	movs	r2, #0
 8000ffc:	705a      	strb	r2, [r3, #1]
		if (gyro == 3) Calibrated.gyro = HAL_OK;
 8000ffe:	7b3b      	ldrb	r3, [r7, #12]
 8001000:	2b03      	cmp	r3, #3
 8001002:	d102      	bne.n	800100a <BNO055_isFullyCalibrated+0x132>
 8001004:	4b5f      	ldr	r3, [pc, #380]	@ (8001184 <BNO055_isFullyCalibrated+0x2ac>)
 8001006:	2200      	movs	r2, #0
 8001008:	709a      	strb	r2, [r3, #2]
		if(mag == 3 && gyro == 3) return HAL_OK;
 800100a:	7abb      	ldrb	r3, [r7, #10]
 800100c:	2b03      	cmp	r3, #3
 800100e:	d104      	bne.n	800101a <BNO055_isFullyCalibrated+0x142>
 8001010:	7b3b      	ldrb	r3, [r7, #12]
 8001012:	2b03      	cmp	r3, #3
 8001014:	d101      	bne.n	800101a <BNO055_isFullyCalibrated+0x142>
 8001016:	2300      	movs	r3, #0
 8001018:	e0b0      	b.n	800117c <BNO055_isFullyCalibrated+0x2a4>
	case AMG:
		if (accel == 3) Calibrated.accel = HAL_OK;
 800101a:	7afb      	ldrb	r3, [r7, #11]
 800101c:	2b03      	cmp	r3, #3
 800101e:	d102      	bne.n	8001026 <BNO055_isFullyCalibrated+0x14e>
 8001020:	4b58      	ldr	r3, [pc, #352]	@ (8001184 <BNO055_isFullyCalibrated+0x2ac>)
 8001022:	2200      	movs	r2, #0
 8001024:	701a      	strb	r2, [r3, #0]
		if (mag == 3) Calibrated.mag = HAL_OK;
 8001026:	7abb      	ldrb	r3, [r7, #10]
 8001028:	2b03      	cmp	r3, #3
 800102a:	d102      	bne.n	8001032 <BNO055_isFullyCalibrated+0x15a>
 800102c:	4b55      	ldr	r3, [pc, #340]	@ (8001184 <BNO055_isFullyCalibrated+0x2ac>)
 800102e:	2200      	movs	r2, #0
 8001030:	705a      	strb	r2, [r3, #1]
		if (gyro == 3) Calibrated.gyro = HAL_OK;
 8001032:	7b3b      	ldrb	r3, [r7, #12]
 8001034:	2b03      	cmp	r3, #3
 8001036:	d102      	bne.n	800103e <BNO055_isFullyCalibrated+0x166>
 8001038:	4b52      	ldr	r3, [pc, #328]	@ (8001184 <BNO055_isFullyCalibrated+0x2ac>)
 800103a:	2200      	movs	r2, #0
 800103c:	709a      	strb	r2, [r3, #2]
		if(accel == 3 && mag == 3 && gyro == 3) return HAL_OK;
 800103e:	7afb      	ldrb	r3, [r7, #11]
 8001040:	2b03      	cmp	r3, #3
 8001042:	d107      	bne.n	8001054 <BNO055_isFullyCalibrated+0x17c>
 8001044:	7abb      	ldrb	r3, [r7, #10]
 8001046:	2b03      	cmp	r3, #3
 8001048:	d104      	bne.n	8001054 <BNO055_isFullyCalibrated+0x17c>
 800104a:	7b3b      	ldrb	r3, [r7, #12]
 800104c:	2b03      	cmp	r3, #3
 800104e:	d101      	bne.n	8001054 <BNO055_isFullyCalibrated+0x17c>
 8001050:	2300      	movs	r3, #0
 8001052:	e093      	b.n	800117c <BNO055_isFullyCalibrated+0x2a4>
	case IMU:
		if (accel == 3) Calibrated.accel = HAL_OK;
 8001054:	7afb      	ldrb	r3, [r7, #11]
 8001056:	2b03      	cmp	r3, #3
 8001058:	d102      	bne.n	8001060 <BNO055_isFullyCalibrated+0x188>
 800105a:	4b4a      	ldr	r3, [pc, #296]	@ (8001184 <BNO055_isFullyCalibrated+0x2ac>)
 800105c:	2200      	movs	r2, #0
 800105e:	701a      	strb	r2, [r3, #0]
		if (gyro == 3) Calibrated.gyro = HAL_OK;
 8001060:	7b3b      	ldrb	r3, [r7, #12]
 8001062:	2b03      	cmp	r3, #3
 8001064:	d102      	bne.n	800106c <BNO055_isFullyCalibrated+0x194>
 8001066:	4b47      	ldr	r3, [pc, #284]	@ (8001184 <BNO055_isFullyCalibrated+0x2ac>)
 8001068:	2200      	movs	r2, #0
 800106a:	709a      	strb	r2, [r3, #2]
		if(accel == 3 && gyro == 3) return HAL_OK;
 800106c:	7afb      	ldrb	r3, [r7, #11]
 800106e:	2b03      	cmp	r3, #3
 8001070:	d104      	bne.n	800107c <BNO055_isFullyCalibrated+0x1a4>
 8001072:	7b3b      	ldrb	r3, [r7, #12]
 8001074:	2b03      	cmp	r3, #3
 8001076:	d101      	bne.n	800107c <BNO055_isFullyCalibrated+0x1a4>
 8001078:	2300      	movs	r3, #0
 800107a:	e07f      	b.n	800117c <BNO055_isFullyCalibrated+0x2a4>
	case COMPASS:
		if (accel == 3) Calibrated.accel = HAL_OK;
 800107c:	7afb      	ldrb	r3, [r7, #11]
 800107e:	2b03      	cmp	r3, #3
 8001080:	d102      	bne.n	8001088 <BNO055_isFullyCalibrated+0x1b0>
 8001082:	4b40      	ldr	r3, [pc, #256]	@ (8001184 <BNO055_isFullyCalibrated+0x2ac>)
 8001084:	2200      	movs	r2, #0
 8001086:	701a      	strb	r2, [r3, #0]
		if (mag == 3) Calibrated.mag = HAL_OK;
 8001088:	7abb      	ldrb	r3, [r7, #10]
 800108a:	2b03      	cmp	r3, #3
 800108c:	d102      	bne.n	8001094 <BNO055_isFullyCalibrated+0x1bc>
 800108e:	4b3d      	ldr	r3, [pc, #244]	@ (8001184 <BNO055_isFullyCalibrated+0x2ac>)
 8001090:	2200      	movs	r2, #0
 8001092:	705a      	strb	r2, [r3, #1]
		if(accel == 3 && mag == 3) return HAL_OK;
 8001094:	7afb      	ldrb	r3, [r7, #11]
 8001096:	2b03      	cmp	r3, #3
 8001098:	d104      	bne.n	80010a4 <BNO055_isFullyCalibrated+0x1cc>
 800109a:	7abb      	ldrb	r3, [r7, #10]
 800109c:	2b03      	cmp	r3, #3
 800109e:	d101      	bne.n	80010a4 <BNO055_isFullyCalibrated+0x1cc>
 80010a0:	2300      	movs	r3, #0
 80010a2:	e06b      	b.n	800117c <BNO055_isFullyCalibrated+0x2a4>
	case M4G:
		if (accel == 3) Calibrated.accel = HAL_OK;
 80010a4:	7afb      	ldrb	r3, [r7, #11]
 80010a6:	2b03      	cmp	r3, #3
 80010a8:	d102      	bne.n	80010b0 <BNO055_isFullyCalibrated+0x1d8>
 80010aa:	4b36      	ldr	r3, [pc, #216]	@ (8001184 <BNO055_isFullyCalibrated+0x2ac>)
 80010ac:	2200      	movs	r2, #0
 80010ae:	701a      	strb	r2, [r3, #0]
		if (mag == 3) Calibrated.mag = HAL_OK;
 80010b0:	7abb      	ldrb	r3, [r7, #10]
 80010b2:	2b03      	cmp	r3, #3
 80010b4:	d102      	bne.n	80010bc <BNO055_isFullyCalibrated+0x1e4>
 80010b6:	4b33      	ldr	r3, [pc, #204]	@ (8001184 <BNO055_isFullyCalibrated+0x2ac>)
 80010b8:	2200      	movs	r2, #0
 80010ba:	705a      	strb	r2, [r3, #1]
		if(accel == 3 && mag == 3) return HAL_OK;
 80010bc:	7afb      	ldrb	r3, [r7, #11]
 80010be:	2b03      	cmp	r3, #3
 80010c0:	d104      	bne.n	80010cc <BNO055_isFullyCalibrated+0x1f4>
 80010c2:	7abb      	ldrb	r3, [r7, #10]
 80010c4:	2b03      	cmp	r3, #3
 80010c6:	d101      	bne.n	80010cc <BNO055_isFullyCalibrated+0x1f4>
 80010c8:	2300      	movs	r3, #0
 80010ca:	e057      	b.n	800117c <BNO055_isFullyCalibrated+0x2a4>
	case NDOF_FMC_OFF:
		if (accel == 3) Calibrated.accel = HAL_OK;
 80010cc:	7afb      	ldrb	r3, [r7, #11]
 80010ce:	2b03      	cmp	r3, #3
 80010d0:	d102      	bne.n	80010d8 <BNO055_isFullyCalibrated+0x200>
 80010d2:	4b2c      	ldr	r3, [pc, #176]	@ (8001184 <BNO055_isFullyCalibrated+0x2ac>)
 80010d4:	2200      	movs	r2, #0
 80010d6:	701a      	strb	r2, [r3, #0]
		if (mag == 3) Calibrated.mag = HAL_OK;
 80010d8:	7abb      	ldrb	r3, [r7, #10]
 80010da:	2b03      	cmp	r3, #3
 80010dc:	d102      	bne.n	80010e4 <BNO055_isFullyCalibrated+0x20c>
 80010de:	4b29      	ldr	r3, [pc, #164]	@ (8001184 <BNO055_isFullyCalibrated+0x2ac>)
 80010e0:	2200      	movs	r2, #0
 80010e2:	705a      	strb	r2, [r3, #1]
		if (gyro == 3) Calibrated.gyro = HAL_OK;
 80010e4:	7b3b      	ldrb	r3, [r7, #12]
 80010e6:	2b03      	cmp	r3, #3
 80010e8:	d102      	bne.n	80010f0 <BNO055_isFullyCalibrated+0x218>
 80010ea:	4b26      	ldr	r3, [pc, #152]	@ (8001184 <BNO055_isFullyCalibrated+0x2ac>)
 80010ec:	2200      	movs	r2, #0
 80010ee:	709a      	strb	r2, [r3, #2]
		if(accel == 3 && mag == 3 && gyro == 3) return HAL_OK;
 80010f0:	7afb      	ldrb	r3, [r7, #11]
 80010f2:	2b03      	cmp	r3, #3
 80010f4:	d107      	bne.n	8001106 <BNO055_isFullyCalibrated+0x22e>
 80010f6:	7abb      	ldrb	r3, [r7, #10]
 80010f8:	2b03      	cmp	r3, #3
 80010fa:	d104      	bne.n	8001106 <BNO055_isFullyCalibrated+0x22e>
 80010fc:	7b3b      	ldrb	r3, [r7, #12]
 80010fe:	2b03      	cmp	r3, #3
 8001100:	d101      	bne.n	8001106 <BNO055_isFullyCalibrated+0x22e>
 8001102:	2300      	movs	r3, #0
 8001104:	e03a      	b.n	800117c <BNO055_isFullyCalibrated+0x2a4>
	case NDOF:
		if (accel == 3) Calibrated.accel = HAL_OK;
 8001106:	7afb      	ldrb	r3, [r7, #11]
 8001108:	2b03      	cmp	r3, #3
 800110a:	d102      	bne.n	8001112 <BNO055_isFullyCalibrated+0x23a>
 800110c:	4b1d      	ldr	r3, [pc, #116]	@ (8001184 <BNO055_isFullyCalibrated+0x2ac>)
 800110e:	2200      	movs	r2, #0
 8001110:	701a      	strb	r2, [r3, #0]
		if (mag == 3) Calibrated.mag = HAL_OK;
 8001112:	7abb      	ldrb	r3, [r7, #10]
 8001114:	2b03      	cmp	r3, #3
 8001116:	d102      	bne.n	800111e <BNO055_isFullyCalibrated+0x246>
 8001118:	4b1a      	ldr	r3, [pc, #104]	@ (8001184 <BNO055_isFullyCalibrated+0x2ac>)
 800111a:	2200      	movs	r2, #0
 800111c:	705a      	strb	r2, [r3, #1]
		if (gyro == 3) Calibrated.gyro = HAL_OK;
 800111e:	7b3b      	ldrb	r3, [r7, #12]
 8001120:	2b03      	cmp	r3, #3
 8001122:	d102      	bne.n	800112a <BNO055_isFullyCalibrated+0x252>
 8001124:	4b17      	ldr	r3, [pc, #92]	@ (8001184 <BNO055_isFullyCalibrated+0x2ac>)
 8001126:	2200      	movs	r2, #0
 8001128:	709a      	strb	r2, [r3, #2]
		if(accel == 3 && mag == 3 && gyro == 3) return HAL_OK;
 800112a:	7afb      	ldrb	r3, [r7, #11]
 800112c:	2b03      	cmp	r3, #3
 800112e:	d107      	bne.n	8001140 <BNO055_isFullyCalibrated+0x268>
 8001130:	7abb      	ldrb	r3, [r7, #10]
 8001132:	2b03      	cmp	r3, #3
 8001134:	d104      	bne.n	8001140 <BNO055_isFullyCalibrated+0x268>
 8001136:	7b3b      	ldrb	r3, [r7, #12]
 8001138:	2b03      	cmp	r3, #3
 800113a:	d101      	bne.n	8001140 <BNO055_isFullyCalibrated+0x268>
 800113c:	2300      	movs	r3, #0
 800113e:	e01d      	b.n	800117c <BNO055_isFullyCalibrated+0x2a4>
	default:
		if (accel == 3) Calibrated.accel = HAL_OK;
 8001140:	7afb      	ldrb	r3, [r7, #11]
 8001142:	2b03      	cmp	r3, #3
 8001144:	d102      	bne.n	800114c <BNO055_isFullyCalibrated+0x274>
 8001146:	4b0f      	ldr	r3, [pc, #60]	@ (8001184 <BNO055_isFullyCalibrated+0x2ac>)
 8001148:	2200      	movs	r2, #0
 800114a:	701a      	strb	r2, [r3, #0]
		if (mag == 3) Calibrated.mag = HAL_OK;
 800114c:	7abb      	ldrb	r3, [r7, #10]
 800114e:	2b03      	cmp	r3, #3
 8001150:	d102      	bne.n	8001158 <BNO055_isFullyCalibrated+0x280>
 8001152:	4b0c      	ldr	r3, [pc, #48]	@ (8001184 <BNO055_isFullyCalibrated+0x2ac>)
 8001154:	2200      	movs	r2, #0
 8001156:	705a      	strb	r2, [r3, #1]
		if (gyro == 3) Calibrated.gyro = HAL_OK;
 8001158:	7b3b      	ldrb	r3, [r7, #12]
 800115a:	2b03      	cmp	r3, #3
 800115c:	d102      	bne.n	8001164 <BNO055_isFullyCalibrated+0x28c>
 800115e:	4b09      	ldr	r3, [pc, #36]	@ (8001184 <BNO055_isFullyCalibrated+0x2ac>)
 8001160:	2200      	movs	r2, #0
 8001162:	709a      	strb	r2, [r3, #2]
		if(accel == 3 && mag == 3 && gyro == 3) return HAL_OK;
 8001164:	7afb      	ldrb	r3, [r7, #11]
 8001166:	2b03      	cmp	r3, #3
 8001168:	d107      	bne.n	800117a <BNO055_isFullyCalibrated+0x2a2>
 800116a:	7abb      	ldrb	r3, [r7, #10]
 800116c:	2b03      	cmp	r3, #3
 800116e:	d104      	bne.n	800117a <BNO055_isFullyCalibrated+0x2a2>
 8001170:	7b3b      	ldrb	r3, [r7, #12]
 8001172:	2b03      	cmp	r3, #3
 8001174:	d101      	bne.n	800117a <BNO055_isFullyCalibrated+0x2a2>
 8001176:	2300      	movs	r3, #0
 8001178:	e000      	b.n	800117c <BNO055_isFullyCalibrated+0x2a4>
	}

	return HAL_ERROR;
 800117a:	2301      	movs	r3, #1
}
 800117c:	4618      	mov	r0, r3
 800117e:	3710      	adds	r7, #16
 8001180:	46bd      	mov	sp, r7
 8001182:	bd80      	pop	{r7, pc}
 8001184:	20000000 	.word	0x20000000

08001188 <BNO055_read8>:
	HAL_I2C_Mem_Write(bno->hi2cx, bno->address, OPR_MODE, 1, mode, 1, 10);
	HAL_Delay(20);
}

uint8_t BNO055_read8(BNO055_Structure *bno, uint8_t Register_Address)
{
 8001188:	b590      	push	{r4, r7, lr}
 800118a:	b089      	sub	sp, #36	@ 0x24
 800118c:	af04      	add	r7, sp, #16
 800118e:	6078      	str	r0, [r7, #4]
 8001190:	460b      	mov	r3, r1
 8001192:	70fb      	strb	r3, [r7, #3]
	uint16_t Register_Address_u16 = Register_Address;
 8001194:	78fb      	ldrb	r3, [r7, #3]
 8001196:	81fb      	strh	r3, [r7, #14]
	HAL_I2C_Mem_Read(bno->hi2cx, bno->address, Register_Address_u16, 1, bno->RxBuffer, 1, 10);
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	6818      	ldr	r0, [r3, #0]
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	791b      	ldrb	r3, [r3, #4]
 80011a0:	461c      	mov	r4, r3
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	33b8      	adds	r3, #184	@ 0xb8
 80011a6:	89fa      	ldrh	r2, [r7, #14]
 80011a8:	210a      	movs	r1, #10
 80011aa:	9102      	str	r1, [sp, #8]
 80011ac:	2101      	movs	r1, #1
 80011ae:	9101      	str	r1, [sp, #4]
 80011b0:	9300      	str	r3, [sp, #0]
 80011b2:	2301      	movs	r3, #1
 80011b4:	4621      	mov	r1, r4
 80011b6:	f001 fee7 	bl	8002f88 <HAL_I2C_Mem_Read>
	HAL_Delay(20);
 80011ba:	2014      	movs	r0, #20
 80011bc:	f001 f914 	bl	80023e8 <HAL_Delay>

	return bno->RxBuffer[0];
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	f893 30b8 	ldrb.w	r3, [r3, #184]	@ 0xb8
}
 80011c6:	4618      	mov	r0, r3
 80011c8:	3714      	adds	r7, #20
 80011ca:	46bd      	mov	sp, r7
 80011cc:	bd90      	pop	{r4, r7, pc}

080011ce <BNO055_getSensorOffsets>:

	return bno->RxBuffer[0];
}

HAL_StatusTypeDef BNO055_getSensorOffsets(BNO055_Structure *bno)
{
 80011ce:	b580      	push	{r7, lr}
 80011d0:	b088      	sub	sp, #32
 80011d2:	af04      	add	r7, sp, #16
 80011d4:	6078      	str	r0, [r7, #4]
	if (BNO055_isFullyCalibrated(bno) == HAL_OK){
 80011d6:	6878      	ldr	r0, [r7, #4]
 80011d8:	f7ff fe7e 	bl	8000ed8 <BNO055_isFullyCalibrated>
 80011dc:	4603      	mov	r3, r0
 80011de:	2b00      	cmp	r3, #0
 80011e0:	f040 80ed 	bne.w	80013be <BNO055_getSensorOffsets+0x1f0>

		uint8_t check_config = (BNO055_read8(bno, OPR_MODE) & 0x0F);
 80011e4:	213d      	movs	r1, #61	@ 0x3d
 80011e6:	6878      	ldr	r0, [r7, #4]
 80011e8:	f7ff ffce 	bl	8001188 <BNO055_read8>
 80011ec:	4603      	mov	r3, r0
 80011ee:	f003 030f 	and.w	r3, r3, #15
 80011f2:	73fb      	strb	r3, [r7, #15]
		uint8_t txbuffer;
		txbuffer = CONFIGMODE;
 80011f4:	2300      	movs	r3, #0
 80011f6:	73bb      	strb	r3, [r7, #14]
		if (check_config != CONFIGMODE){
 80011f8:	7bfb      	ldrb	r3, [r7, #15]
 80011fa:	2b00      	cmp	r3, #0
 80011fc:	d012      	beq.n	8001224 <BNO055_getSensorOffsets+0x56>
			HAL_I2C_Mem_Write(bno->hi2cx, bno->address, OPR_MODE, 1, &txbuffer, 1, 10);
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	6818      	ldr	r0, [r3, #0]
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	791b      	ldrb	r3, [r3, #4]
 8001206:	4619      	mov	r1, r3
 8001208:	230a      	movs	r3, #10
 800120a:	9302      	str	r3, [sp, #8]
 800120c:	2301      	movs	r3, #1
 800120e:	9301      	str	r3, [sp, #4]
 8001210:	f107 030e 	add.w	r3, r7, #14
 8001214:	9300      	str	r3, [sp, #0]
 8001216:	2301      	movs	r3, #1
 8001218:	223d      	movs	r2, #61	@ 0x3d
 800121a:	f001 fda1 	bl	8002d60 <HAL_I2C_Mem_Write>
			HAL_Delay(20);
 800121e:	2014      	movs	r0, #20
 8001220:	f001 f8e2 	bl	80023e8 <HAL_Delay>
		}

		HAL_I2C_Mem_Read(bno->hi2cx, bno->address, ACC_OFFSET_X_LSB, 1, bno->RxBuffer, 22, 10);
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	6818      	ldr	r0, [r3, #0]
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	791b      	ldrb	r3, [r3, #4]
 800122c:	4619      	mov	r1, r3
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	33b8      	adds	r3, #184	@ 0xb8
 8001232:	220a      	movs	r2, #10
 8001234:	9202      	str	r2, [sp, #8]
 8001236:	2216      	movs	r2, #22
 8001238:	9201      	str	r2, [sp, #4]
 800123a:	9300      	str	r3, [sp, #0]
 800123c:	2301      	movs	r3, #1
 800123e:	2255      	movs	r2, #85	@ 0x55
 8001240:	f001 fea2 	bl	8002f88 <HAL_I2C_Mem_Read>

		bno->offsets.accel_offset_x = ((bno->RxBuffer[1] <<8) | bno->RxBuffer[0]);
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	f893 30b9 	ldrb.w	r3, [r3, #185]	@ 0xb9
 800124a:	021b      	lsls	r3, r3, #8
 800124c:	b21a      	sxth	r2, r3
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	f893 30b8 	ldrb.w	r3, [r3, #184]	@ 0xb8
 8001254:	b21b      	sxth	r3, r3
 8001256:	4313      	orrs	r3, r2
 8001258:	b21a      	sxth	r2, r3
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	f8a3 20e4 	strh.w	r2, [r3, #228]	@ 0xe4
		bno->offsets.accel_offset_y = (bno->RxBuffer[3] <<8 | bno->RxBuffer[2]);
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	f893 30bb 	ldrb.w	r3, [r3, #187]	@ 0xbb
 8001266:	021b      	lsls	r3, r3, #8
 8001268:	b21a      	sxth	r2, r3
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	f893 30ba 	ldrb.w	r3, [r3, #186]	@ 0xba
 8001270:	b21b      	sxth	r3, r3
 8001272:	4313      	orrs	r3, r2
 8001274:	b21a      	sxth	r2, r3
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	f8a3 20e6 	strh.w	r2, [r3, #230]	@ 0xe6
		bno->offsets.accel_offset_z = (bno->RxBuffer[5] <<8 | bno->RxBuffer[4]);
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	f893 30bd 	ldrb.w	r3, [r3, #189]	@ 0xbd
 8001282:	021b      	lsls	r3, r3, #8
 8001284:	b21a      	sxth	r2, r3
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	f893 30bc 	ldrb.w	r3, [r3, #188]	@ 0xbc
 800128c:	b21b      	sxth	r3, r3
 800128e:	4313      	orrs	r3, r2
 8001290:	b21a      	sxth	r2, r3
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	f8a3 20e8 	strh.w	r2, [r3, #232]	@ 0xe8
		/* Accelerometer offset end*/

		/* Magnetometer offset Start*/
		bno->offsets.mag_offset_x = (bno->RxBuffer[7] <<8 | bno->RxBuffer[6]);
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	f893 30bf 	ldrb.w	r3, [r3, #191]	@ 0xbf
 800129e:	021b      	lsls	r3, r3, #8
 80012a0:	b21a      	sxth	r2, r3
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	f893 30be 	ldrb.w	r3, [r3, #190]	@ 0xbe
 80012a8:	b21b      	sxth	r3, r3
 80012aa:	4313      	orrs	r3, r2
 80012ac:	b21a      	sxth	r2, r3
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	f8a3 20ea 	strh.w	r2, [r3, #234]	@ 0xea
		bno->offsets.mag_offset_y = (bno->RxBuffer[9] <<8 | bno->RxBuffer[8]);
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	f893 30c1 	ldrb.w	r3, [r3, #193]	@ 0xc1
 80012ba:	021b      	lsls	r3, r3, #8
 80012bc:	b21a      	sxth	r2, r3
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	f893 30c0 	ldrb.w	r3, [r3, #192]	@ 0xc0
 80012c4:	b21b      	sxth	r3, r3
 80012c6:	4313      	orrs	r3, r2
 80012c8:	b21a      	sxth	r2, r3
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	f8a3 20ec 	strh.w	r2, [r3, #236]	@ 0xec
		bno->offsets.mag_offset_z = (bno->RxBuffer[11] <<8 | bno->RxBuffer[10]);
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	f893 30c3 	ldrb.w	r3, [r3, #195]	@ 0xc3
 80012d6:	021b      	lsls	r3, r3, #8
 80012d8:	b21a      	sxth	r2, r3
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	f893 30c2 	ldrb.w	r3, [r3, #194]	@ 0xc2
 80012e0:	b21b      	sxth	r3, r3
 80012e2:	4313      	orrs	r3, r2
 80012e4:	b21a      	sxth	r2, r3
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	f8a3 20ee 	strh.w	r2, [r3, #238]	@ 0xee
		/* Magnetometer offset end*/

		/* Gyro offset Start*/
		bno->offsets.gyro_offset_x = (bno->RxBuffer[13] <<8 | bno->RxBuffer[12]);
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	f893 30c5 	ldrb.w	r3, [r3, #197]	@ 0xc5
 80012f2:	021b      	lsls	r3, r3, #8
 80012f4:	b21a      	sxth	r2, r3
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	f893 30c4 	ldrb.w	r3, [r3, #196]	@ 0xc4
 80012fc:	b21b      	sxth	r3, r3
 80012fe:	4313      	orrs	r3, r2
 8001300:	b21a      	sxth	r2, r3
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	f8a3 20f0 	strh.w	r2, [r3, #240]	@ 0xf0
		bno->offsets.gyro_offset_y = (bno->RxBuffer[15] <<8 | bno->RxBuffer[14]);
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	f893 30c7 	ldrb.w	r3, [r3, #199]	@ 0xc7
 800130e:	021b      	lsls	r3, r3, #8
 8001310:	b21a      	sxth	r2, r3
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	f893 30c6 	ldrb.w	r3, [r3, #198]	@ 0xc6
 8001318:	b21b      	sxth	r3, r3
 800131a:	4313      	orrs	r3, r2
 800131c:	b21a      	sxth	r2, r3
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	f8a3 20f2 	strh.w	r2, [r3, #242]	@ 0xf2
		bno->offsets.gyro_offset_z = (bno->RxBuffer[17] <<8 | bno->RxBuffer[16]);
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	f893 30c9 	ldrb.w	r3, [r3, #201]	@ 0xc9
 800132a:	021b      	lsls	r3, r3, #8
 800132c:	b21a      	sxth	r2, r3
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	f893 30c8 	ldrb.w	r3, [r3, #200]	@ 0xc8
 8001334:	b21b      	sxth	r3, r3
 8001336:	4313      	orrs	r3, r2
 8001338:	b21a      	sxth	r2, r3
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	f8a3 20f4 	strh.w	r2, [r3, #244]	@ 0xf4
		/* Gyro offset end*/

		/*  Accelerometer radius Start*/
		bno->offsets.accel_radius = (bno->RxBuffer[19] <<8 | bno->RxBuffer[18]);
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	f893 30cb 	ldrb.w	r3, [r3, #203]	@ 0xcb
 8001346:	021b      	lsls	r3, r3, #8
 8001348:	b21a      	sxth	r2, r3
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	f893 30ca 	ldrb.w	r3, [r3, #202]	@ 0xca
 8001350:	b21b      	sxth	r3, r3
 8001352:	4313      	orrs	r3, r2
 8001354:	b21a      	sxth	r2, r3
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	f8a3 20f6 	strh.w	r2, [r3, #246]	@ 0xf6
		/*  Accelerometer radius end*/

		/*  Magnetometer radius Start*/
		bno->offsets.mag_radius = (bno->RxBuffer[21] <<8 | bno->RxBuffer[20]);
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	f893 30cd 	ldrb.w	r3, [r3, #205]	@ 0xcd
 8001362:	021b      	lsls	r3, r3, #8
 8001364:	b21a      	sxth	r2, r3
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	f893 30cc 	ldrb.w	r3, [r3, #204]	@ 0xcc
 800136c:	b21b      	sxth	r3, r3
 800136e:	4313      	orrs	r3, r2
 8001370:	b21a      	sxth	r2, r3
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	f8a3 20f8 	strh.w	r2, [r3, #248]	@ 0xf8
		/*  Magnetometer radius end*/

		check_config = (BNO055_read8(bno, OPR_MODE) & 0x0F);
 8001378:	213d      	movs	r1, #61	@ 0x3d
 800137a:	6878      	ldr	r0, [r7, #4]
 800137c:	f7ff ff04 	bl	8001188 <BNO055_read8>
 8001380:	4603      	mov	r3, r0
 8001382:	f003 030f 	and.w	r3, r3, #15
 8001386:	73fb      	strb	r3, [r7, #15]
		txbuffer = (uint8_t)bno->mode;
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	795b      	ldrb	r3, [r3, #5]
 800138c:	73bb      	strb	r3, [r7, #14]
		if (check_config != CONFIGMODE){
 800138e:	7bfb      	ldrb	r3, [r7, #15]
 8001390:	2b00      	cmp	r3, #0
 8001392:	d012      	beq.n	80013ba <BNO055_getSensorOffsets+0x1ec>
			HAL_I2C_Mem_Write(bno->hi2cx, bno->address, OPR_MODE, 1, &txbuffer, 1, 10);
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	6818      	ldr	r0, [r3, #0]
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	791b      	ldrb	r3, [r3, #4]
 800139c:	4619      	mov	r1, r3
 800139e:	230a      	movs	r3, #10
 80013a0:	9302      	str	r3, [sp, #8]
 80013a2:	2301      	movs	r3, #1
 80013a4:	9301      	str	r3, [sp, #4]
 80013a6:	f107 030e 	add.w	r3, r7, #14
 80013aa:	9300      	str	r3, [sp, #0]
 80013ac:	2301      	movs	r3, #1
 80013ae:	223d      	movs	r2, #61	@ 0x3d
 80013b0:	f001 fcd6 	bl	8002d60 <HAL_I2C_Mem_Write>
			HAL_Delay(20);
 80013b4:	2014      	movs	r0, #20
 80013b6:	f001 f817 	bl	80023e8 <HAL_Delay>
		}
		return HAL_OK;
 80013ba:	2300      	movs	r3, #0
 80013bc:	e000      	b.n	80013c0 <BNO055_getSensorOffsets+0x1f2>
	}
	return HAL_ERROR;
 80013be:	2301      	movs	r3, #1
}
 80013c0:	4618      	mov	r0, r3
 80013c2:	3710      	adds	r7, #16
 80013c4:	46bd      	mov	sp, r7
 80013c6:	bd80      	pop	{r7, pc}

080013c8 <BNO055_setSensoroffsets>:

void BNO055_setSensoroffsets(BNO055_Structure *bno)
{
 80013c8:	b580      	push	{r7, lr}
 80013ca:	b092      	sub	sp, #72	@ 0x48
 80013cc:	af04      	add	r7, sp, #16
 80013ce:	6078      	str	r0, [r7, #4]
	uint8_t check_config = (BNO055_read8(bno, OPR_MODE) & 0x0F);
 80013d0:	213d      	movs	r1, #61	@ 0x3d
 80013d2:	6878      	ldr	r0, [r7, #4]
 80013d4:	f7ff fed8 	bl	8001188 <BNO055_read8>
 80013d8:	4603      	mov	r3, r0
 80013da:	f003 030f 	and.w	r3, r3, #15
 80013de:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	uint8_t txbuffer[40];
	txbuffer[0] = CONFIGMODE;
 80013e2:	2300      	movs	r3, #0
 80013e4:	733b      	strb	r3, [r7, #12]
	if (check_config != CONFIGMODE){
 80013e6:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	d012      	beq.n	8001414 <BNO055_setSensoroffsets+0x4c>
		HAL_I2C_Mem_Write(bno->hi2cx, bno->address, OPR_MODE, 1, txbuffer, 1, 10);
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	6818      	ldr	r0, [r3, #0]
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	791b      	ldrb	r3, [r3, #4]
 80013f6:	4619      	mov	r1, r3
 80013f8:	230a      	movs	r3, #10
 80013fa:	9302      	str	r3, [sp, #8]
 80013fc:	2301      	movs	r3, #1
 80013fe:	9301      	str	r3, [sp, #4]
 8001400:	f107 030c 	add.w	r3, r7, #12
 8001404:	9300      	str	r3, [sp, #0]
 8001406:	2301      	movs	r3, #1
 8001408:	223d      	movs	r2, #61	@ 0x3d
 800140a:	f001 fca9 	bl	8002d60 <HAL_I2C_Mem_Write>
		HAL_Delay(20);
 800140e:	2014      	movs	r0, #20
 8001410:	f000 ffea 	bl	80023e8 <HAL_Delay>
	}

	txbuffer[0] = bno->offsets.accel_offset_x & 0x0FF;
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	f9b3 30e4 	ldrsh.w	r3, [r3, #228]	@ 0xe4
 800141a:	b2db      	uxtb	r3, r3
 800141c:	733b      	strb	r3, [r7, #12]
	txbuffer[1] = (bno->offsets.accel_offset_x >> 8) & 0x0FF;
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	f9b3 30e4 	ldrsh.w	r3, [r3, #228]	@ 0xe4
 8001424:	121b      	asrs	r3, r3, #8
 8001426:	b21b      	sxth	r3, r3
 8001428:	b2db      	uxtb	r3, r3
 800142a:	737b      	strb	r3, [r7, #13]
	txbuffer[2] = bno->offsets.accel_offset_y & 0x0FF;
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	f9b3 30e6 	ldrsh.w	r3, [r3, #230]	@ 0xe6
 8001432:	b2db      	uxtb	r3, r3
 8001434:	73bb      	strb	r3, [r7, #14]
	txbuffer[3] = (bno->offsets.accel_offset_y >> 8) & 0x0FF;
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	f9b3 30e6 	ldrsh.w	r3, [r3, #230]	@ 0xe6
 800143c:	121b      	asrs	r3, r3, #8
 800143e:	b21b      	sxth	r3, r3
 8001440:	b2db      	uxtb	r3, r3
 8001442:	73fb      	strb	r3, [r7, #15]
	txbuffer[4] = bno->offsets.accel_offset_z & 0x0FF;
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	f9b3 30e8 	ldrsh.w	r3, [r3, #232]	@ 0xe8
 800144a:	b2db      	uxtb	r3, r3
 800144c:	743b      	strb	r3, [r7, #16]
	txbuffer[5] = (bno->offsets.accel_offset_z >> 8) & 0x0FF;
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	f9b3 30e8 	ldrsh.w	r3, [r3, #232]	@ 0xe8
 8001454:	121b      	asrs	r3, r3, #8
 8001456:	b21b      	sxth	r3, r3
 8001458:	b2db      	uxtb	r3, r3
 800145a:	747b      	strb	r3, [r7, #17]
	txbuffer[6] = bno->offsets.mag_offset_x & 0x0FF;
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	f9b3 30ea 	ldrsh.w	r3, [r3, #234]	@ 0xea
 8001462:	b2db      	uxtb	r3, r3
 8001464:	74bb      	strb	r3, [r7, #18]
	txbuffer[7] = (bno->offsets.mag_offset_x >> 8) & 0x0FF;
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	f9b3 30ea 	ldrsh.w	r3, [r3, #234]	@ 0xea
 800146c:	121b      	asrs	r3, r3, #8
 800146e:	b21b      	sxth	r3, r3
 8001470:	b2db      	uxtb	r3, r3
 8001472:	74fb      	strb	r3, [r7, #19]
	txbuffer[8] = bno->offsets.mag_offset_y & 0x0FF;
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	f9b3 30ec 	ldrsh.w	r3, [r3, #236]	@ 0xec
 800147a:	b2db      	uxtb	r3, r3
 800147c:	753b      	strb	r3, [r7, #20]
	txbuffer[9] = (bno->offsets.mag_offset_y >> 8) & 0x0FF;
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	f9b3 30ec 	ldrsh.w	r3, [r3, #236]	@ 0xec
 8001484:	121b      	asrs	r3, r3, #8
 8001486:	b21b      	sxth	r3, r3
 8001488:	b2db      	uxtb	r3, r3
 800148a:	757b      	strb	r3, [r7, #21]
	txbuffer[10] = bno->offsets.mag_offset_z & 0x0FF;
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	f9b3 30ee 	ldrsh.w	r3, [r3, #238]	@ 0xee
 8001492:	b2db      	uxtb	r3, r3
 8001494:	75bb      	strb	r3, [r7, #22]
	txbuffer[11] = (bno->offsets.mag_offset_z >> 8) & 0x0FF;
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	f9b3 30ee 	ldrsh.w	r3, [r3, #238]	@ 0xee
 800149c:	121b      	asrs	r3, r3, #8
 800149e:	b21b      	sxth	r3, r3
 80014a0:	b2db      	uxtb	r3, r3
 80014a2:	75fb      	strb	r3, [r7, #23]
	txbuffer[12] = bno->offsets.gyro_offset_x & 0x0FF;
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	f9b3 30f0 	ldrsh.w	r3, [r3, #240]	@ 0xf0
 80014aa:	b2db      	uxtb	r3, r3
 80014ac:	763b      	strb	r3, [r7, #24]
	txbuffer[13] = (bno->offsets.gyro_offset_x >> 8) & 0x0FF;
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	f9b3 30f0 	ldrsh.w	r3, [r3, #240]	@ 0xf0
 80014b4:	121b      	asrs	r3, r3, #8
 80014b6:	b21b      	sxth	r3, r3
 80014b8:	b2db      	uxtb	r3, r3
 80014ba:	767b      	strb	r3, [r7, #25]
	txbuffer[14] = bno->offsets.gyro_offset_y & 0x0FF;
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	f9b3 30f2 	ldrsh.w	r3, [r3, #242]	@ 0xf2
 80014c2:	b2db      	uxtb	r3, r3
 80014c4:	76bb      	strb	r3, [r7, #26]
	txbuffer[15] = (bno->offsets.gyro_offset_y >> 8) & 0x0FF;
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	f9b3 30f2 	ldrsh.w	r3, [r3, #242]	@ 0xf2
 80014cc:	121b      	asrs	r3, r3, #8
 80014ce:	b21b      	sxth	r3, r3
 80014d0:	b2db      	uxtb	r3, r3
 80014d2:	76fb      	strb	r3, [r7, #27]
	txbuffer[16] = bno->offsets.gyro_offset_z & 0x0FF;
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	f9b3 30f4 	ldrsh.w	r3, [r3, #244]	@ 0xf4
 80014da:	b2db      	uxtb	r3, r3
 80014dc:	773b      	strb	r3, [r7, #28]
	txbuffer[17] = (bno->offsets.gyro_offset_z >> 8) & 0x0FF;
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	f9b3 30f4 	ldrsh.w	r3, [r3, #244]	@ 0xf4
 80014e4:	121b      	asrs	r3, r3, #8
 80014e6:	b21b      	sxth	r3, r3
 80014e8:	b2db      	uxtb	r3, r3
 80014ea:	777b      	strb	r3, [r7, #29]
	txbuffer[18] = bno->offsets.accel_radius & 0x0FF;
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	f9b3 30f6 	ldrsh.w	r3, [r3, #246]	@ 0xf6
 80014f2:	b2db      	uxtb	r3, r3
 80014f4:	77bb      	strb	r3, [r7, #30]
	txbuffer[19] = (bno->offsets.accel_radius >> 8) & 0x0FF;
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	f9b3 30f6 	ldrsh.w	r3, [r3, #246]	@ 0xf6
 80014fc:	121b      	asrs	r3, r3, #8
 80014fe:	b21b      	sxth	r3, r3
 8001500:	b2db      	uxtb	r3, r3
 8001502:	77fb      	strb	r3, [r7, #31]
	txbuffer[20] = bno->offsets.mag_radius & 0x0FF;
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	f9b3 30f8 	ldrsh.w	r3, [r3, #248]	@ 0xf8
 800150a:	b2db      	uxtb	r3, r3
 800150c:	f887 3020 	strb.w	r3, [r7, #32]
	txbuffer[21] = (bno->offsets.mag_radius >> 8) & 0x0FF;
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	f9b3 30f8 	ldrsh.w	r3, [r3, #248]	@ 0xf8
 8001516:	121b      	asrs	r3, r3, #8
 8001518:	b21b      	sxth	r3, r3
 800151a:	b2db      	uxtb	r3, r3
 800151c:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21

	HAL_I2C_Mem_Write(bno->hi2cx, bno->address, ACC_OFFSET_X_LSB, 1, txbuffer, 22, 10);
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	6818      	ldr	r0, [r3, #0]
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	791b      	ldrb	r3, [r3, #4]
 8001528:	4619      	mov	r1, r3
 800152a:	230a      	movs	r3, #10
 800152c:	9302      	str	r3, [sp, #8]
 800152e:	2316      	movs	r3, #22
 8001530:	9301      	str	r3, [sp, #4]
 8001532:	f107 030c 	add.w	r3, r7, #12
 8001536:	9300      	str	r3, [sp, #0]
 8001538:	2301      	movs	r3, #1
 800153a:	2255      	movs	r2, #85	@ 0x55
 800153c:	f001 fc10 	bl	8002d60 <HAL_I2C_Mem_Write>

	check_config = (BNO055_read8(bno, OPR_MODE) & 0x0F);
 8001540:	213d      	movs	r1, #61	@ 0x3d
 8001542:	6878      	ldr	r0, [r7, #4]
 8001544:	f7ff fe20 	bl	8001188 <BNO055_read8>
 8001548:	4603      	mov	r3, r0
 800154a:	f003 030f 	and.w	r3, r3, #15
 800154e:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	txbuffer[0] = (uint8_t)bno->mode;
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	795b      	ldrb	r3, [r3, #5]
 8001556:	733b      	strb	r3, [r7, #12]
	if (check_config != txbuffer[0]){
 8001558:	7b3b      	ldrb	r3, [r7, #12]
 800155a:	f897 2037 	ldrb.w	r2, [r7, #55]	@ 0x37
 800155e:	429a      	cmp	r2, r3
 8001560:	d012      	beq.n	8001588 <BNO055_setSensoroffsets+0x1c0>
		HAL_I2C_Mem_Write(bno->hi2cx, bno->address, OPR_MODE, 1, txbuffer, 1, 10);
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	6818      	ldr	r0, [r3, #0]
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	791b      	ldrb	r3, [r3, #4]
 800156a:	4619      	mov	r1, r3
 800156c:	230a      	movs	r3, #10
 800156e:	9302      	str	r3, [sp, #8]
 8001570:	2301      	movs	r3, #1
 8001572:	9301      	str	r3, [sp, #4]
 8001574:	f107 030c 	add.w	r3, r7, #12
 8001578:	9300      	str	r3, [sp, #0]
 800157a:	2301      	movs	r3, #1
 800157c:	223d      	movs	r2, #61	@ 0x3d
 800157e:	f001 fbef 	bl	8002d60 <HAL_I2C_Mem_Write>
		HAL_Delay(20);
 8001582:	2014      	movs	r0, #20
 8001584:	f000 ff30 	bl	80023e8 <HAL_Delay>
	}
}
 8001588:	bf00      	nop
 800158a:	3738      	adds	r7, #56	@ 0x38
 800158c:	46bd      	mov	sp, r7
 800158e:	bd80      	pop	{r7, pc}

08001590 <BNO055_Read>:

void BNO055_Read(BNO055_Structure *bno, Vector_Type type)
{
 8001590:	b580      	push	{r7, lr}
 8001592:	b092      	sub	sp, #72	@ 0x48
 8001594:	af04      	add	r7, sp, #16
 8001596:	6078      	str	r0, [r7, #4]
 8001598:	460b      	mov	r3, r1
 800159a:	70fb      	strb	r3, [r7, #3]
	uint8_t read_mode;
	HAL_I2C_Mem_Read(bno->hi2cx, bno->address, OPR_MODE, 1, &read_mode, 1, 10);
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	6818      	ldr	r0, [r3, #0]
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	791b      	ldrb	r3, [r3, #4]
 80015a4:	4619      	mov	r1, r3
 80015a6:	230a      	movs	r3, #10
 80015a8:	9302      	str	r3, [sp, #8]
 80015aa:	2301      	movs	r3, #1
 80015ac:	9301      	str	r3, [sp, #4]
 80015ae:	f107 0319 	add.w	r3, r7, #25
 80015b2:	9300      	str	r3, [sp, #0]
 80015b4:	2301      	movs	r3, #1
 80015b6:	223d      	movs	r2, #61	@ 0x3d
 80015b8:	f001 fce6 	bl	8002f88 <HAL_I2C_Mem_Read>
	if (read_mode != bno->mode) {
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	795a      	ldrb	r2, [r3, #5]
 80015c0:	7e7b      	ldrb	r3, [r7, #25]
 80015c2:	429a      	cmp	r2, r3
 80015c4:	d00f      	beq.n	80015e6 <BNO055_Read+0x56>
		HAL_I2C_Mem_Write(bno->hi2cx, bno->address, OPR_MODE, 1, &bno->mode, 1, 10);
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	6818      	ldr	r0, [r3, #0]
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	791b      	ldrb	r3, [r3, #4]
 80015ce:	4619      	mov	r1, r3
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	3305      	adds	r3, #5
 80015d4:	220a      	movs	r2, #10
 80015d6:	9202      	str	r2, [sp, #8]
 80015d8:	2201      	movs	r2, #1
 80015da:	9201      	str	r2, [sp, #4]
 80015dc:	9300      	str	r3, [sp, #0]
 80015de:	2301      	movs	r3, #1
 80015e0:	223d      	movs	r2, #61	@ 0x3d
 80015e2:	f001 fbbd 	bl	8002d60 <HAL_I2C_Mem_Write>
	}

	if (type != QUATERNION) {
 80015e6:	78fb      	ldrb	r3, [r7, #3]
 80015e8:	2b06      	cmp	r3, #6
 80015ea:	f000 8179 	beq.w	80018e0 <BNO055_Read+0x350>
		uint8_t rxbuffer[6];
		uint8_t data_reg;
		switch (type) {
 80015ee:	78fb      	ldrb	r3, [r7, #3]
 80015f0:	2b05      	cmp	r3, #5
 80015f2:	d827      	bhi.n	8001644 <BNO055_Read+0xb4>
 80015f4:	a201      	add	r2, pc, #4	@ (adr r2, 80015fc <BNO055_Read+0x6c>)
 80015f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80015fa:	bf00      	nop
 80015fc:	08001625 	.word	0x08001625
 8001600:	0800161d 	.word	0x0800161d
 8001604:	0800162d 	.word	0x0800162d
 8001608:	08001615 	.word	0x08001615
 800160c:	08001635 	.word	0x08001635
 8001610:	0800163d 	.word	0x0800163d
		case ACCELEROMETER:
			data_reg = ACC_DATA_X_LSB;
 8001614:	2308      	movs	r3, #8
 8001616:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
			break;
 800161a:	e013      	b.n	8001644 <BNO055_Read+0xb4>
		case GYROSCOPE:
			data_reg = GYR_DATA_X_LSB;
 800161c:	2314      	movs	r3, #20
 800161e:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
			break;
 8001622:	e00f      	b.n	8001644 <BNO055_Read+0xb4>
		case MAGNETOMETER:
			data_reg = MAG_DATA_X_LSB;
 8001624:	230e      	movs	r3, #14
 8001626:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
			break;
 800162a:	e00b      	b.n	8001644 <BNO055_Read+0xb4>
		case EULER:
			data_reg = EUL_DATA_HEADING_LSB;
 800162c:	231a      	movs	r3, #26
 800162e:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
			break;
 8001632:	e007      	b.n	8001644 <BNO055_Read+0xb4>
		case LINEARACCEL:
			data_reg = LIA_DATA_X_LSB;
 8001634:	2328      	movs	r3, #40	@ 0x28
 8001636:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
			break;
 800163a:	e003      	b.n	8001644 <BNO055_Read+0xb4>
		case GRAVITY:
			data_reg = GRV_DATA_X_LSB;
 800163c:	232e      	movs	r3, #46	@ 0x2e
 800163e:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
			break;
 8001642:	bf00      	nop
		default:
		}

		HAL_I2C_Mem_Read(bno->hi2cx, bno->address, data_reg, 1, rxbuffer, 6, 10);
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	6818      	ldr	r0, [r3, #0]
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	791b      	ldrb	r3, [r3, #4]
 800164c:	4619      	mov	r1, r3
 800164e:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8001652:	b29a      	uxth	r2, r3
 8001654:	230a      	movs	r3, #10
 8001656:	9302      	str	r3, [sp, #8]
 8001658:	2306      	movs	r3, #6
 800165a:	9301      	str	r3, [sp, #4]
 800165c:	f107 0310 	add.w	r3, r7, #16
 8001660:	9300      	str	r3, [sp, #0]
 8001662:	2301      	movs	r3, #1
 8001664:	f001 fc90 	bl	8002f88 <HAL_I2C_Mem_Read>

		int16_t x, y, z = 0;
 8001668:	2300      	movs	r3, #0
 800166a:	83fb      	strh	r3, [r7, #30]

		x  = ((int16_t) rxbuffer[0]) | (((int16_t) rxbuffer[1]) << 8);
 800166c:	7c3b      	ldrb	r3, [r7, #16]
 800166e:	b21a      	sxth	r2, r3
 8001670:	7c7b      	ldrb	r3, [r7, #17]
 8001672:	021b      	lsls	r3, r3, #8
 8001674:	b21b      	sxth	r3, r3
 8001676:	4313      	orrs	r3, r2
 8001678:	83bb      	strh	r3, [r7, #28]
		y  = ((int16_t) rxbuffer[2]) | (((int16_t) rxbuffer[3]) << 8);
 800167a:	7cbb      	ldrb	r3, [r7, #18]
 800167c:	b21a      	sxth	r2, r3
 800167e:	7cfb      	ldrb	r3, [r7, #19]
 8001680:	021b      	lsls	r3, r3, #8
 8001682:	b21b      	sxth	r3, r3
 8001684:	4313      	orrs	r3, r2
 8001686:	837b      	strh	r3, [r7, #26]
		z  = ((int16_t) rxbuffer[4]) | (((int16_t) rxbuffer[5]) << 8);
 8001688:	7d3b      	ldrb	r3, [r7, #20]
 800168a:	b21a      	sxth	r2, r3
 800168c:	7d7b      	ldrb	r3, [r7, #21]
 800168e:	021b      	lsls	r3, r3, #8
 8001690:	b21b      	sxth	r3, r3
 8001692:	4313      	orrs	r3, r2
 8001694:	83fb      	strh	r3, [r7, #30]

		switch (type) {
 8001696:	78fb      	ldrb	r3, [r7, #3]
 8001698:	2b05      	cmp	r3, #5
 800169a:	f200 818d 	bhi.w	80019b8 <BNO055_Read+0x428>
 800169e:	a201      	add	r2, pc, #4	@ (adr r2, 80016a4 <BNO055_Read+0x114>)
 80016a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80016a4:	08001773 	.word	0x08001773
 80016a8:	08001717 	.word	0x08001717
 80016ac:	080017cf 	.word	0x080017cf
 80016b0:	080016bd 	.word	0x080016bd
 80016b4:	0800182b 	.word	0x0800182b
 80016b8:	08001885 	.word	0x08001885
		case ACCELEROMETER:
			bno->accel.x = ((double)x) / 100.0;
 80016bc:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 80016c0:	4618      	mov	r0, r3
 80016c2:	f7fe fed5 	bl	8000470 <__aeabi_i2d>
 80016c6:	f04f 0200 	mov.w	r2, #0
 80016ca:	4bbd      	ldr	r3, [pc, #756]	@ (80019c0 <BNO055_Read+0x430>)
 80016cc:	f7ff f864 	bl	8000798 <__aeabi_ddiv>
 80016d0:	4602      	mov	r2, r0
 80016d2:	460b      	mov	r3, r1
 80016d4:	6879      	ldr	r1, [r7, #4]
 80016d6:	e9c1 2302 	strd	r2, r3, [r1, #8]
			bno->accel.y = ((double)y) / 100.0;
 80016da:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 80016de:	4618      	mov	r0, r3
 80016e0:	f7fe fec6 	bl	8000470 <__aeabi_i2d>
 80016e4:	f04f 0200 	mov.w	r2, #0
 80016e8:	4bb5      	ldr	r3, [pc, #724]	@ (80019c0 <BNO055_Read+0x430>)
 80016ea:	f7ff f855 	bl	8000798 <__aeabi_ddiv>
 80016ee:	4602      	mov	r2, r0
 80016f0:	460b      	mov	r3, r1
 80016f2:	6879      	ldr	r1, [r7, #4]
 80016f4:	e9c1 2304 	strd	r2, r3, [r1, #16]
			bno->accel.z = ((double)z) / 100.0;
 80016f8:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80016fc:	4618      	mov	r0, r3
 80016fe:	f7fe feb7 	bl	8000470 <__aeabi_i2d>
 8001702:	f04f 0200 	mov.w	r2, #0
 8001706:	4bae      	ldr	r3, [pc, #696]	@ (80019c0 <BNO055_Read+0x430>)
 8001708:	f7ff f846 	bl	8000798 <__aeabi_ddiv>
 800170c:	4602      	mov	r2, r0
 800170e:	460b      	mov	r3, r1
 8001710:	6879      	ldr	r1, [r7, #4]
 8001712:	e9c1 2306 	strd	r2, r3, [r1, #24]
		case GYROSCOPE:
			bno->gyro.x = ((double)x) / 16.0;
 8001716:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 800171a:	4618      	mov	r0, r3
 800171c:	f7fe fea8 	bl	8000470 <__aeabi_i2d>
 8001720:	f04f 0200 	mov.w	r2, #0
 8001724:	4ba7      	ldr	r3, [pc, #668]	@ (80019c4 <BNO055_Read+0x434>)
 8001726:	f7ff f837 	bl	8000798 <__aeabi_ddiv>
 800172a:	4602      	mov	r2, r0
 800172c:	460b      	mov	r3, r1
 800172e:	6879      	ldr	r1, [r7, #4]
 8001730:	e9c1 230e 	strd	r2, r3, [r1, #56]	@ 0x38
			bno->gyro.y = ((double)y) / 16.0;
 8001734:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8001738:	4618      	mov	r0, r3
 800173a:	f7fe fe99 	bl	8000470 <__aeabi_i2d>
 800173e:	f04f 0200 	mov.w	r2, #0
 8001742:	4ba0      	ldr	r3, [pc, #640]	@ (80019c4 <BNO055_Read+0x434>)
 8001744:	f7ff f828 	bl	8000798 <__aeabi_ddiv>
 8001748:	4602      	mov	r2, r0
 800174a:	460b      	mov	r3, r1
 800174c:	6879      	ldr	r1, [r7, #4]
 800174e:	e9c1 2310 	strd	r2, r3, [r1, #64]	@ 0x40
			bno->gyro.z = ((double)z) / 16.0;
 8001752:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8001756:	4618      	mov	r0, r3
 8001758:	f7fe fe8a 	bl	8000470 <__aeabi_i2d>
 800175c:	f04f 0200 	mov.w	r2, #0
 8001760:	4b98      	ldr	r3, [pc, #608]	@ (80019c4 <BNO055_Read+0x434>)
 8001762:	f7ff f819 	bl	8000798 <__aeabi_ddiv>
 8001766:	4602      	mov	r2, r0
 8001768:	460b      	mov	r3, r1
 800176a:	6879      	ldr	r1, [r7, #4]
 800176c:	e9c1 2312 	strd	r2, r3, [r1, #72]	@ 0x48
			break;
 8001770:	e122      	b.n	80019b8 <BNO055_Read+0x428>
		case MAGNETOMETER:
			bno->mag.x = ((double)x) / 16.0;
 8001772:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8001776:	4618      	mov	r0, r3
 8001778:	f7fe fe7a 	bl	8000470 <__aeabi_i2d>
 800177c:	f04f 0200 	mov.w	r2, #0
 8001780:	4b90      	ldr	r3, [pc, #576]	@ (80019c4 <BNO055_Read+0x434>)
 8001782:	f7ff f809 	bl	8000798 <__aeabi_ddiv>
 8001786:	4602      	mov	r2, r0
 8001788:	460b      	mov	r3, r1
 800178a:	6879      	ldr	r1, [r7, #4]
 800178c:	e9c1 2308 	strd	r2, r3, [r1, #32]
			bno->mag.y = ((double)y) / 16.0;
 8001790:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8001794:	4618      	mov	r0, r3
 8001796:	f7fe fe6b 	bl	8000470 <__aeabi_i2d>
 800179a:	f04f 0200 	mov.w	r2, #0
 800179e:	4b89      	ldr	r3, [pc, #548]	@ (80019c4 <BNO055_Read+0x434>)
 80017a0:	f7fe fffa 	bl	8000798 <__aeabi_ddiv>
 80017a4:	4602      	mov	r2, r0
 80017a6:	460b      	mov	r3, r1
 80017a8:	6879      	ldr	r1, [r7, #4]
 80017aa:	e9c1 230a 	strd	r2, r3, [r1, #40]	@ 0x28
			bno->mag.z = ((double)z) / 16.0;
 80017ae:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80017b2:	4618      	mov	r0, r3
 80017b4:	f7fe fe5c 	bl	8000470 <__aeabi_i2d>
 80017b8:	f04f 0200 	mov.w	r2, #0
 80017bc:	4b81      	ldr	r3, [pc, #516]	@ (80019c4 <BNO055_Read+0x434>)
 80017be:	f7fe ffeb 	bl	8000798 <__aeabi_ddiv>
 80017c2:	4602      	mov	r2, r0
 80017c4:	460b      	mov	r3, r1
 80017c6:	6879      	ldr	r1, [r7, #4]
 80017c8:	e9c1 230c 	strd	r2, r3, [r1, #48]	@ 0x30
			break;
 80017cc:	e0f4      	b.n	80019b8 <BNO055_Read+0x428>
		case EULER:
			bno->euler.yaw = ((double)x) / 16.0;
 80017ce:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 80017d2:	4618      	mov	r0, r3
 80017d4:	f7fe fe4c 	bl	8000470 <__aeabi_i2d>
 80017d8:	f04f 0200 	mov.w	r2, #0
 80017dc:	4b79      	ldr	r3, [pc, #484]	@ (80019c4 <BNO055_Read+0x434>)
 80017de:	f7fe ffdb 	bl	8000798 <__aeabi_ddiv>
 80017e2:	4602      	mov	r2, r0
 80017e4:	460b      	mov	r3, r1
 80017e6:	6879      	ldr	r1, [r7, #4]
 80017e8:	e9c1 2318 	strd	r2, r3, [r1, #96]	@ 0x60
			bno->euler.roll = ((double)y) / 16.0;
 80017ec:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 80017f0:	4618      	mov	r0, r3
 80017f2:	f7fe fe3d 	bl	8000470 <__aeabi_i2d>
 80017f6:	f04f 0200 	mov.w	r2, #0
 80017fa:	4b72      	ldr	r3, [pc, #456]	@ (80019c4 <BNO055_Read+0x434>)
 80017fc:	f7fe ffcc 	bl	8000798 <__aeabi_ddiv>
 8001800:	4602      	mov	r2, r0
 8001802:	460b      	mov	r3, r1
 8001804:	6879      	ldr	r1, [r7, #4]
 8001806:	e9c1 2314 	strd	r2, r3, [r1, #80]	@ 0x50
			bno->euler.pitch = ((double)z) / 16.0;
 800180a:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 800180e:	4618      	mov	r0, r3
 8001810:	f7fe fe2e 	bl	8000470 <__aeabi_i2d>
 8001814:	f04f 0200 	mov.w	r2, #0
 8001818:	4b6a      	ldr	r3, [pc, #424]	@ (80019c4 <BNO055_Read+0x434>)
 800181a:	f7fe ffbd 	bl	8000798 <__aeabi_ddiv>
 800181e:	4602      	mov	r2, r0
 8001820:	460b      	mov	r3, r1
 8001822:	6879      	ldr	r1, [r7, #4]
 8001824:	e9c1 2316 	strd	r2, r3, [r1, #88]	@ 0x58
			break;
 8001828:	e0c6      	b.n	80019b8 <BNO055_Read+0x428>
		case LINEARACCEL:
			bno->lin_acc.x = ((double)x) / 100.0;
 800182a:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 800182e:	4618      	mov	r0, r3
 8001830:	f7fe fe1e 	bl	8000470 <__aeabi_i2d>
 8001834:	f04f 0200 	mov.w	r2, #0
 8001838:	4b61      	ldr	r3, [pc, #388]	@ (80019c0 <BNO055_Read+0x430>)
 800183a:	f7fe ffad 	bl	8000798 <__aeabi_ddiv>
 800183e:	4602      	mov	r2, r0
 8001840:	460b      	mov	r3, r1
 8001842:	6879      	ldr	r1, [r7, #4]
 8001844:	e9c1 2322 	strd	r2, r3, [r1, #136]	@ 0x88
			bno->lin_acc.y = ((double)y) / 100.0;
 8001848:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 800184c:	4618      	mov	r0, r3
 800184e:	f7fe fe0f 	bl	8000470 <__aeabi_i2d>
 8001852:	f04f 0200 	mov.w	r2, #0
 8001856:	4b5a      	ldr	r3, [pc, #360]	@ (80019c0 <BNO055_Read+0x430>)
 8001858:	f7fe ff9e 	bl	8000798 <__aeabi_ddiv>
 800185c:	4602      	mov	r2, r0
 800185e:	460b      	mov	r3, r1
 8001860:	6879      	ldr	r1, [r7, #4]
 8001862:	e9c1 2324 	strd	r2, r3, [r1, #144]	@ 0x90
			bno->lin_acc.z = ((double)z) / 100.0;
 8001866:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 800186a:	4618      	mov	r0, r3
 800186c:	f7fe fe00 	bl	8000470 <__aeabi_i2d>
 8001870:	f04f 0200 	mov.w	r2, #0
 8001874:	4b52      	ldr	r3, [pc, #328]	@ (80019c0 <BNO055_Read+0x430>)
 8001876:	f7fe ff8f 	bl	8000798 <__aeabi_ddiv>
 800187a:	4602      	mov	r2, r0
 800187c:	460b      	mov	r3, r1
 800187e:	6879      	ldr	r1, [r7, #4]
 8001880:	e9c1 2326 	strd	r2, r3, [r1, #152]	@ 0x98
		case GRAVITY:
			bno->grav.x = ((double)x) / 100.0;
 8001884:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8001888:	4618      	mov	r0, r3
 800188a:	f7fe fdf1 	bl	8000470 <__aeabi_i2d>
 800188e:	f04f 0200 	mov.w	r2, #0
 8001892:	4b4b      	ldr	r3, [pc, #300]	@ (80019c0 <BNO055_Read+0x430>)
 8001894:	f7fe ff80 	bl	8000798 <__aeabi_ddiv>
 8001898:	4602      	mov	r2, r0
 800189a:	460b      	mov	r3, r1
 800189c:	6879      	ldr	r1, [r7, #4]
 800189e:	e9c1 2328 	strd	r2, r3, [r1, #160]	@ 0xa0
			bno->grav.y = ((double)y) / 100.0;
 80018a2:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 80018a6:	4618      	mov	r0, r3
 80018a8:	f7fe fde2 	bl	8000470 <__aeabi_i2d>
 80018ac:	f04f 0200 	mov.w	r2, #0
 80018b0:	4b43      	ldr	r3, [pc, #268]	@ (80019c0 <BNO055_Read+0x430>)
 80018b2:	f7fe ff71 	bl	8000798 <__aeabi_ddiv>
 80018b6:	4602      	mov	r2, r0
 80018b8:	460b      	mov	r3, r1
 80018ba:	6879      	ldr	r1, [r7, #4]
 80018bc:	e9c1 232a 	strd	r2, r3, [r1, #168]	@ 0xa8
			bno->grav.z = ((double)z) / 100.0;
 80018c0:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80018c4:	4618      	mov	r0, r3
 80018c6:	f7fe fdd3 	bl	8000470 <__aeabi_i2d>
 80018ca:	f04f 0200 	mov.w	r2, #0
 80018ce:	4b3c      	ldr	r3, [pc, #240]	@ (80019c0 <BNO055_Read+0x430>)
 80018d0:	f7fe ff62 	bl	8000798 <__aeabi_ddiv>
 80018d4:	4602      	mov	r2, r0
 80018d6:	460b      	mov	r3, r1
 80018d8:	6879      	ldr	r1, [r7, #4]
 80018da:	e9c1 232c 	strd	r2, r3, [r1, #176]	@ 0xb0
		bno->quat.y = y * scale;
		bno->quat.z = z * scale;
		bno->quat.w = w * scale;
	}

}
 80018de:	e06b      	b.n	80019b8 <BNO055_Read+0x428>
		HAL_I2C_Mem_Read(bno->hi2cx, bno->address, QUA_DATA_X_LSB, 1, rxbuffer, 8, 10);
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	6818      	ldr	r0, [r3, #0]
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	791b      	ldrb	r3, [r3, #4]
 80018e8:	4619      	mov	r1, r3
 80018ea:	230a      	movs	r3, #10
 80018ec:	9302      	str	r3, [sp, #8]
 80018ee:	2308      	movs	r3, #8
 80018f0:	9301      	str	r3, [sp, #4]
 80018f2:	f107 0308 	add.w	r3, r7, #8
 80018f6:	9300      	str	r3, [sp, #0]
 80018f8:	2301      	movs	r3, #1
 80018fa:	2222      	movs	r2, #34	@ 0x22
 80018fc:	f001 fb44 	bl	8002f88 <HAL_I2C_Mem_Read>
		int16_t x, y, z, w = 0;
 8001900:	2300      	movs	r3, #0
 8001902:	86bb      	strh	r3, [r7, #52]	@ 0x34
		x  = ((int16_t) rxbuffer[0]) | (((int16_t) rxbuffer[1]) << 8);
 8001904:	7a3b      	ldrb	r3, [r7, #8]
 8001906:	b21a      	sxth	r2, r3
 8001908:	7a7b      	ldrb	r3, [r7, #9]
 800190a:	021b      	lsls	r3, r3, #8
 800190c:	b21b      	sxth	r3, r3
 800190e:	4313      	orrs	r3, r2
 8001910:	867b      	strh	r3, [r7, #50]	@ 0x32
		y  = ((int16_t) rxbuffer[2]) | (((int16_t) rxbuffer[3]) << 8);
 8001912:	7abb      	ldrb	r3, [r7, #10]
 8001914:	b21a      	sxth	r2, r3
 8001916:	7afb      	ldrb	r3, [r7, #11]
 8001918:	021b      	lsls	r3, r3, #8
 800191a:	b21b      	sxth	r3, r3
 800191c:	4313      	orrs	r3, r2
 800191e:	863b      	strh	r3, [r7, #48]	@ 0x30
		z  = ((int16_t) rxbuffer[4]) | (((int16_t) rxbuffer[5]) << 8);
 8001920:	7b3b      	ldrb	r3, [r7, #12]
 8001922:	b21a      	sxth	r2, r3
 8001924:	7b7b      	ldrb	r3, [r7, #13]
 8001926:	021b      	lsls	r3, r3, #8
 8001928:	b21b      	sxth	r3, r3
 800192a:	4313      	orrs	r3, r2
 800192c:	85fb      	strh	r3, [r7, #46]	@ 0x2e
		w  = ((int16_t) rxbuffer[6]) | (((int16_t) rxbuffer[7]) << 8);
 800192e:	7bbb      	ldrb	r3, [r7, #14]
 8001930:	b21a      	sxth	r2, r3
 8001932:	7bfb      	ldrb	r3, [r7, #15]
 8001934:	021b      	lsls	r3, r3, #8
 8001936:	b21b      	sxth	r3, r3
 8001938:	4313      	orrs	r3, r2
 800193a:	86bb      	strh	r3, [r7, #52]	@ 0x34
		const double scale = (1.0 / (1 << 14));
 800193c:	f04f 0200 	mov.w	r2, #0
 8001940:	4b21      	ldr	r3, [pc, #132]	@ (80019c8 <BNO055_Read+0x438>)
 8001942:	e9c7 2308 	strd	r2, r3, [r7, #32]
		bno->quat.x = x * scale;
 8001946:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	@ 0x32
 800194a:	4618      	mov	r0, r3
 800194c:	f7fe fd90 	bl	8000470 <__aeabi_i2d>
 8001950:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001954:	f7fe fdf6 	bl	8000544 <__aeabi_dmul>
 8001958:	4602      	mov	r2, r0
 800195a:	460b      	mov	r3, r1
 800195c:	6879      	ldr	r1, [r7, #4]
 800195e:	e9c1 231a 	strd	r2, r3, [r1, #104]	@ 0x68
		bno->quat.y = y * scale;
 8001962:	f9b7 3030 	ldrsh.w	r3, [r7, #48]	@ 0x30
 8001966:	4618      	mov	r0, r3
 8001968:	f7fe fd82 	bl	8000470 <__aeabi_i2d>
 800196c:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001970:	f7fe fde8 	bl	8000544 <__aeabi_dmul>
 8001974:	4602      	mov	r2, r0
 8001976:	460b      	mov	r3, r1
 8001978:	6879      	ldr	r1, [r7, #4]
 800197a:	e9c1 231c 	strd	r2, r3, [r1, #112]	@ 0x70
		bno->quat.z = z * scale;
 800197e:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	@ 0x2e
 8001982:	4618      	mov	r0, r3
 8001984:	f7fe fd74 	bl	8000470 <__aeabi_i2d>
 8001988:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800198c:	f7fe fdda 	bl	8000544 <__aeabi_dmul>
 8001990:	4602      	mov	r2, r0
 8001992:	460b      	mov	r3, r1
 8001994:	6879      	ldr	r1, [r7, #4]
 8001996:	e9c1 231e 	strd	r2, r3, [r1, #120]	@ 0x78
		bno->quat.w = w * scale;
 800199a:	f9b7 3034 	ldrsh.w	r3, [r7, #52]	@ 0x34
 800199e:	4618      	mov	r0, r3
 80019a0:	f7fe fd66 	bl	8000470 <__aeabi_i2d>
 80019a4:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80019a8:	f7fe fdcc 	bl	8000544 <__aeabi_dmul>
 80019ac:	4602      	mov	r2, r0
 80019ae:	460b      	mov	r3, r1
 80019b0:	6879      	ldr	r1, [r7, #4]
 80019b2:	e9c1 2320 	strd	r2, r3, [r1, #128]	@ 0x80
}
 80019b6:	e7ff      	b.n	80019b8 <BNO055_Read+0x428>
 80019b8:	bf00      	nop
 80019ba:	3738      	adds	r7, #56	@ 0x38
 80019bc:	46bd      	mov	sp, r7
 80019be:	bd80      	pop	{r7, pc}
 80019c0:	40590000 	.word	0x40590000
 80019c4:	40300000 	.word	0x40300000
 80019c8:	3f100000 	.word	0x3f100000

080019cc <BNO55_setAxisRemap>:

void BNO55_setAxisRemap(BNO055_Structure *bno, Remap_Config config)
{
 80019cc:	b580      	push	{r7, lr}
 80019ce:	b092      	sub	sp, #72	@ 0x48
 80019d0:	af04      	add	r7, sp, #16
 80019d2:	6078      	str	r0, [r7, #4]
 80019d4:	460b      	mov	r3, r1
 80019d6:	70fb      	strb	r3, [r7, #3]
	uint8_t check_config = (BNO055_read8(bno, OPR_MODE) & 0x0F);
 80019d8:	213d      	movs	r1, #61	@ 0x3d
 80019da:	6878      	ldr	r0, [r7, #4]
 80019dc:	f7ff fbd4 	bl	8001188 <BNO055_read8>
 80019e0:	4603      	mov	r3, r0
 80019e2:	f003 030f 	and.w	r3, r3, #15
 80019e6:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	uint8_t txbuffer[40];
	txbuffer[0] = CONFIGMODE;
 80019ea:	2300      	movs	r3, #0
 80019ec:	733b      	strb	r3, [r7, #12]
	if (check_config != CONFIGMODE){
 80019ee:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	d012      	beq.n	8001a1c <BNO55_setAxisRemap+0x50>
		HAL_I2C_Mem_Write(bno->hi2cx, bno->address, OPR_MODE, 1, txbuffer, 1, 10);
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	6818      	ldr	r0, [r3, #0]
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	791b      	ldrb	r3, [r3, #4]
 80019fe:	4619      	mov	r1, r3
 8001a00:	230a      	movs	r3, #10
 8001a02:	9302      	str	r3, [sp, #8]
 8001a04:	2301      	movs	r3, #1
 8001a06:	9301      	str	r3, [sp, #4]
 8001a08:	f107 030c 	add.w	r3, r7, #12
 8001a0c:	9300      	str	r3, [sp, #0]
 8001a0e:	2301      	movs	r3, #1
 8001a10:	223d      	movs	r2, #61	@ 0x3d
 8001a12:	f001 f9a5 	bl	8002d60 <HAL_I2C_Mem_Write>
		HAL_Delay(20);
 8001a16:	2014      	movs	r0, #20
 8001a18:	f000 fce6 	bl	80023e8 <HAL_Delay>
	}

	txbuffer[0] = config;
 8001a1c:	78fb      	ldrb	r3, [r7, #3]
 8001a1e:	733b      	strb	r3, [r7, #12]
	HAL_I2C_Mem_Write(bno->hi2cx, bno->address, AXIS_MAP_CONFIG, 1, txbuffer, 1, 10);
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	6818      	ldr	r0, [r3, #0]
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	791b      	ldrb	r3, [r3, #4]
 8001a28:	4619      	mov	r1, r3
 8001a2a:	230a      	movs	r3, #10
 8001a2c:	9302      	str	r3, [sp, #8]
 8001a2e:	2301      	movs	r3, #1
 8001a30:	9301      	str	r3, [sp, #4]
 8001a32:	f107 030c 	add.w	r3, r7, #12
 8001a36:	9300      	str	r3, [sp, #0]
 8001a38:	2301      	movs	r3, #1
 8001a3a:	2241      	movs	r2, #65	@ 0x41
 8001a3c:	f001 f990 	bl	8002d60 <HAL_I2C_Mem_Write>
	HAL_Delay(20);
 8001a40:	2014      	movs	r0, #20
 8001a42:	f000 fcd1 	bl	80023e8 <HAL_Delay>

	check_config = (BNO055_read8(bno, OPR_MODE) & 0x0F);
 8001a46:	213d      	movs	r1, #61	@ 0x3d
 8001a48:	6878      	ldr	r0, [r7, #4]
 8001a4a:	f7ff fb9d 	bl	8001188 <BNO055_read8>
 8001a4e:	4603      	mov	r3, r0
 8001a50:	f003 030f 	and.w	r3, r3, #15
 8001a54:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	txbuffer[0] = (uint8_t)bno->mode;
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	795b      	ldrb	r3, [r3, #5]
 8001a5c:	733b      	strb	r3, [r7, #12]
	if (check_config != txbuffer[0]){
 8001a5e:	7b3b      	ldrb	r3, [r7, #12]
 8001a60:	f897 2037 	ldrb.w	r2, [r7, #55]	@ 0x37
 8001a64:	429a      	cmp	r2, r3
 8001a66:	d012      	beq.n	8001a8e <BNO55_setAxisRemap+0xc2>
		HAL_I2C_Mem_Write(bno->hi2cx, bno->address, OPR_MODE, 1, txbuffer, 1, 10);
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	6818      	ldr	r0, [r3, #0]
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	791b      	ldrb	r3, [r3, #4]
 8001a70:	4619      	mov	r1, r3
 8001a72:	230a      	movs	r3, #10
 8001a74:	9302      	str	r3, [sp, #8]
 8001a76:	2301      	movs	r3, #1
 8001a78:	9301      	str	r3, [sp, #4]
 8001a7a:	f107 030c 	add.w	r3, r7, #12
 8001a7e:	9300      	str	r3, [sp, #0]
 8001a80:	2301      	movs	r3, #1
 8001a82:	223d      	movs	r2, #61	@ 0x3d
 8001a84:	f001 f96c 	bl	8002d60 <HAL_I2C_Mem_Write>
		HAL_Delay(20);
 8001a88:	2014      	movs	r0, #20
 8001a8a:	f000 fcad 	bl	80023e8 <HAL_Delay>
	}
}
 8001a8e:	bf00      	nop
 8001a90:	3738      	adds	r7, #56	@ 0x38
 8001a92:	46bd      	mov	sp, r7
 8001a94:	bd80      	pop	{r7, pc}

08001a96 <BNO55_setAxisSign>:

void BNO55_setAxisSign(BNO055_Structure *bno, Remap_Sign sign)
{
 8001a96:	b580      	push	{r7, lr}
 8001a98:	b092      	sub	sp, #72	@ 0x48
 8001a9a:	af04      	add	r7, sp, #16
 8001a9c:	6078      	str	r0, [r7, #4]
 8001a9e:	460b      	mov	r3, r1
 8001aa0:	70fb      	strb	r3, [r7, #3]
	uint8_t check_config = (BNO055_read8(bno, OPR_MODE) & 0x0F);
 8001aa2:	213d      	movs	r1, #61	@ 0x3d
 8001aa4:	6878      	ldr	r0, [r7, #4]
 8001aa6:	f7ff fb6f 	bl	8001188 <BNO055_read8>
 8001aaa:	4603      	mov	r3, r0
 8001aac:	f003 030f 	and.w	r3, r3, #15
 8001ab0:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	uint8_t txbuffer[40];
	txbuffer[0] = CONFIGMODE;
 8001ab4:	2300      	movs	r3, #0
 8001ab6:	733b      	strb	r3, [r7, #12]
	if (check_config != CONFIGMODE){
 8001ab8:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8001abc:	2b00      	cmp	r3, #0
 8001abe:	d012      	beq.n	8001ae6 <BNO55_setAxisSign+0x50>
		HAL_I2C_Mem_Write(bno->hi2cx, bno->address, OPR_MODE, 1, txbuffer, 1, 10);
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	6818      	ldr	r0, [r3, #0]
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	791b      	ldrb	r3, [r3, #4]
 8001ac8:	4619      	mov	r1, r3
 8001aca:	230a      	movs	r3, #10
 8001acc:	9302      	str	r3, [sp, #8]
 8001ace:	2301      	movs	r3, #1
 8001ad0:	9301      	str	r3, [sp, #4]
 8001ad2:	f107 030c 	add.w	r3, r7, #12
 8001ad6:	9300      	str	r3, [sp, #0]
 8001ad8:	2301      	movs	r3, #1
 8001ada:	223d      	movs	r2, #61	@ 0x3d
 8001adc:	f001 f940 	bl	8002d60 <HAL_I2C_Mem_Write>
		HAL_Delay(20);
 8001ae0:	2014      	movs	r0, #20
 8001ae2:	f000 fc81 	bl	80023e8 <HAL_Delay>
	}

	txbuffer[0] = sign;
 8001ae6:	78fb      	ldrb	r3, [r7, #3]
 8001ae8:	733b      	strb	r3, [r7, #12]
	HAL_I2C_Mem_Write(bno->hi2cx, bno->address, AXIS_MAP_SIGN, 1, txbuffer, 1, 10);
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	6818      	ldr	r0, [r3, #0]
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	791b      	ldrb	r3, [r3, #4]
 8001af2:	4619      	mov	r1, r3
 8001af4:	230a      	movs	r3, #10
 8001af6:	9302      	str	r3, [sp, #8]
 8001af8:	2301      	movs	r3, #1
 8001afa:	9301      	str	r3, [sp, #4]
 8001afc:	f107 030c 	add.w	r3, r7, #12
 8001b00:	9300      	str	r3, [sp, #0]
 8001b02:	2301      	movs	r3, #1
 8001b04:	2242      	movs	r2, #66	@ 0x42
 8001b06:	f001 f92b 	bl	8002d60 <HAL_I2C_Mem_Write>
	HAL_Delay(20);
 8001b0a:	2014      	movs	r0, #20
 8001b0c:	f000 fc6c 	bl	80023e8 <HAL_Delay>

	check_config = (BNO055_read8(bno, OPR_MODE) & 0x0F);
 8001b10:	213d      	movs	r1, #61	@ 0x3d
 8001b12:	6878      	ldr	r0, [r7, #4]
 8001b14:	f7ff fb38 	bl	8001188 <BNO055_read8>
 8001b18:	4603      	mov	r3, r0
 8001b1a:	f003 030f 	and.w	r3, r3, #15
 8001b1e:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	txbuffer[0] = (uint8_t)bno->mode;
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	795b      	ldrb	r3, [r3, #5]
 8001b26:	733b      	strb	r3, [r7, #12]
	if (check_config != txbuffer[0]){
 8001b28:	7b3b      	ldrb	r3, [r7, #12]
 8001b2a:	f897 2037 	ldrb.w	r2, [r7, #55]	@ 0x37
 8001b2e:	429a      	cmp	r2, r3
 8001b30:	d012      	beq.n	8001b58 <BNO55_setAxisSign+0xc2>
		HAL_I2C_Mem_Write(bno->hi2cx, bno->address, OPR_MODE, 1, txbuffer, 1, 10);
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	6818      	ldr	r0, [r3, #0]
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	791b      	ldrb	r3, [r3, #4]
 8001b3a:	4619      	mov	r1, r3
 8001b3c:	230a      	movs	r3, #10
 8001b3e:	9302      	str	r3, [sp, #8]
 8001b40:	2301      	movs	r3, #1
 8001b42:	9301      	str	r3, [sp, #4]
 8001b44:	f107 030c 	add.w	r3, r7, #12
 8001b48:	9300      	str	r3, [sp, #0]
 8001b4a:	2301      	movs	r3, #1
 8001b4c:	223d      	movs	r2, #61	@ 0x3d
 8001b4e:	f001 f907 	bl	8002d60 <HAL_I2C_Mem_Write>
		HAL_Delay(20);
 8001b52:	2014      	movs	r0, #20
 8001b54:	f000 fc48 	bl	80023e8 <HAL_Delay>
	}
}
 8001b58:	bf00      	nop
 8001b5a:	3738      	adds	r7, #56	@ 0x38
 8001b5c:	46bd      	mov	sp, r7
 8001b5e:	bd80      	pop	{r7, pc}

08001b60 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8001b60:	b580      	push	{r7, lr}
 8001b62:	b082      	sub	sp, #8
 8001b64:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001b66:	4b10      	ldr	r3, [pc, #64]	@ (8001ba8 <MX_DMA_Init+0x48>)
 8001b68:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001b6a:	4a0f      	ldr	r2, [pc, #60]	@ (8001ba8 <MX_DMA_Init+0x48>)
 8001b6c:	f043 0301 	orr.w	r3, r3, #1
 8001b70:	6493      	str	r3, [r2, #72]	@ 0x48
 8001b72:	4b0d      	ldr	r3, [pc, #52]	@ (8001ba8 <MX_DMA_Init+0x48>)
 8001b74:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001b76:	f003 0301 	and.w	r3, r3, #1
 8001b7a:	607b      	str	r3, [r7, #4]
 8001b7c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 8001b7e:	2200      	movs	r2, #0
 8001b80:	2100      	movs	r1, #0
 8001b82:	200c      	movs	r0, #12
 8001b84:	f000 fd2f 	bl	80025e6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8001b88:	200c      	movs	r0, #12
 8001b8a:	f000 fd48 	bl	800261e <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 8001b8e:	2200      	movs	r2, #0
 8001b90:	2100      	movs	r1, #0
 8001b92:	200d      	movs	r0, #13
 8001b94:	f000 fd27 	bl	80025e6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 8001b98:	200d      	movs	r0, #13
 8001b9a:	f000 fd40 	bl	800261e <HAL_NVIC_EnableIRQ>

}
 8001b9e:	bf00      	nop
 8001ba0:	3708      	adds	r7, #8
 8001ba2:	46bd      	mov	sp, r7
 8001ba4:	bd80      	pop	{r7, pc}
 8001ba6:	bf00      	nop
 8001ba8:	40021000 	.word	0x40021000

08001bac <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001bac:	b580      	push	{r7, lr}
 8001bae:	b088      	sub	sp, #32
 8001bb0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bb2:	f107 030c 	add.w	r3, r7, #12
 8001bb6:	2200      	movs	r2, #0
 8001bb8:	601a      	str	r2, [r3, #0]
 8001bba:	605a      	str	r2, [r3, #4]
 8001bbc:	609a      	str	r2, [r3, #8]
 8001bbe:	60da      	str	r2, [r3, #12]
 8001bc0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001bc2:	4b1d      	ldr	r3, [pc, #116]	@ (8001c38 <MX_GPIO_Init+0x8c>)
 8001bc4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001bc6:	4a1c      	ldr	r2, [pc, #112]	@ (8001c38 <MX_GPIO_Init+0x8c>)
 8001bc8:	f043 0304 	orr.w	r3, r3, #4
 8001bcc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001bce:	4b1a      	ldr	r3, [pc, #104]	@ (8001c38 <MX_GPIO_Init+0x8c>)
 8001bd0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001bd2:	f003 0304 	and.w	r3, r3, #4
 8001bd6:	60bb      	str	r3, [r7, #8]
 8001bd8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001bda:	4b17      	ldr	r3, [pc, #92]	@ (8001c38 <MX_GPIO_Init+0x8c>)
 8001bdc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001bde:	4a16      	ldr	r2, [pc, #88]	@ (8001c38 <MX_GPIO_Init+0x8c>)
 8001be0:	f043 0301 	orr.w	r3, r3, #1
 8001be4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001be6:	4b14      	ldr	r3, [pc, #80]	@ (8001c38 <MX_GPIO_Init+0x8c>)
 8001be8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001bea:	f003 0301 	and.w	r3, r3, #1
 8001bee:	607b      	str	r3, [r7, #4]
 8001bf0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001bf2:	4b11      	ldr	r3, [pc, #68]	@ (8001c38 <MX_GPIO_Init+0x8c>)
 8001bf4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001bf6:	4a10      	ldr	r2, [pc, #64]	@ (8001c38 <MX_GPIO_Init+0x8c>)
 8001bf8:	f043 0302 	orr.w	r3, r3, #2
 8001bfc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001bfe:	4b0e      	ldr	r3, [pc, #56]	@ (8001c38 <MX_GPIO_Init+0x8c>)
 8001c00:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001c02:	f003 0302 	and.w	r3, r3, #2
 8001c06:	603b      	str	r3, [r7, #0]
 8001c08:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 8001c0a:	2200      	movs	r2, #0
 8001c0c:	2108      	movs	r1, #8
 8001c0e:	480b      	ldr	r0, [pc, #44]	@ (8001c3c <MX_GPIO_Init+0x90>)
 8001c10:	f000 fff2 	bl	8002bf8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD3_Pin;
 8001c14:	2308      	movs	r3, #8
 8001c16:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c18:	2301      	movs	r3, #1
 8001c1a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c1c:	2300      	movs	r3, #0
 8001c1e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c20:	2300      	movs	r3, #0
 8001c22:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LD3_GPIO_Port, &GPIO_InitStruct);
 8001c24:	f107 030c 	add.w	r3, r7, #12
 8001c28:	4619      	mov	r1, r3
 8001c2a:	4804      	ldr	r0, [pc, #16]	@ (8001c3c <MX_GPIO_Init+0x90>)
 8001c2c:	f000 fe7a 	bl	8002924 <HAL_GPIO_Init>

}
 8001c30:	bf00      	nop
 8001c32:	3720      	adds	r7, #32
 8001c34:	46bd      	mov	sp, r7
 8001c36:	bd80      	pop	{r7, pc}
 8001c38:	40021000 	.word	0x40021000
 8001c3c:	48000400 	.word	0x48000400

08001c40 <MX_I2C3_Init>:
DMA_HandleTypeDef hdma_i2c3_rx;
DMA_HandleTypeDef hdma_i2c3_tx;

/* I2C3 init function */
void MX_I2C3_Init(void)
{
 8001c40:	b580      	push	{r7, lr}
 8001c42:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8001c44:	4b1b      	ldr	r3, [pc, #108]	@ (8001cb4 <MX_I2C3_Init+0x74>)
 8001c46:	4a1c      	ldr	r2, [pc, #112]	@ (8001cb8 <MX_I2C3_Init+0x78>)
 8001c48:	601a      	str	r2, [r3, #0]
  hi2c3.Init.Timing = 0x00300F38;
 8001c4a:	4b1a      	ldr	r3, [pc, #104]	@ (8001cb4 <MX_I2C3_Init+0x74>)
 8001c4c:	4a1b      	ldr	r2, [pc, #108]	@ (8001cbc <MX_I2C3_Init+0x7c>)
 8001c4e:	605a      	str	r2, [r3, #4]
  hi2c3.Init.OwnAddress1 = 0;
 8001c50:	4b18      	ldr	r3, [pc, #96]	@ (8001cb4 <MX_I2C3_Init+0x74>)
 8001c52:	2200      	movs	r2, #0
 8001c54:	609a      	str	r2, [r3, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001c56:	4b17      	ldr	r3, [pc, #92]	@ (8001cb4 <MX_I2C3_Init+0x74>)
 8001c58:	2201      	movs	r2, #1
 8001c5a:	60da      	str	r2, [r3, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001c5c:	4b15      	ldr	r3, [pc, #84]	@ (8001cb4 <MX_I2C3_Init+0x74>)
 8001c5e:	2200      	movs	r2, #0
 8001c60:	611a      	str	r2, [r3, #16]
  hi2c3.Init.OwnAddress2 = 0;
 8001c62:	4b14      	ldr	r3, [pc, #80]	@ (8001cb4 <MX_I2C3_Init+0x74>)
 8001c64:	2200      	movs	r2, #0
 8001c66:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001c68:	4b12      	ldr	r3, [pc, #72]	@ (8001cb4 <MX_I2C3_Init+0x74>)
 8001c6a:	2200      	movs	r2, #0
 8001c6c:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001c6e:	4b11      	ldr	r3, [pc, #68]	@ (8001cb4 <MX_I2C3_Init+0x74>)
 8001c70:	2200      	movs	r2, #0
 8001c72:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001c74:	4b0f      	ldr	r3, [pc, #60]	@ (8001cb4 <MX_I2C3_Init+0x74>)
 8001c76:	2200      	movs	r2, #0
 8001c78:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8001c7a:	480e      	ldr	r0, [pc, #56]	@ (8001cb4 <MX_I2C3_Init+0x74>)
 8001c7c:	f000 ffd4 	bl	8002c28 <HAL_I2C_Init>
 8001c80:	4603      	mov	r3, r0
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	d001      	beq.n	8001c8a <MX_I2C3_Init+0x4a>
  {
    Error_Handler();
 8001c86:	f000 f9ed 	bl	8002064 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001c8a:	2100      	movs	r1, #0
 8001c8c:	4809      	ldr	r0, [pc, #36]	@ (8001cb4 <MX_I2C3_Init+0x74>)
 8001c8e:	f001 fd67 	bl	8003760 <HAL_I2CEx_ConfigAnalogFilter>
 8001c92:	4603      	mov	r3, r0
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	d001      	beq.n	8001c9c <MX_I2C3_Init+0x5c>
  {
    Error_Handler();
 8001c98:	f000 f9e4 	bl	8002064 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 8001c9c:	2100      	movs	r1, #0
 8001c9e:	4805      	ldr	r0, [pc, #20]	@ (8001cb4 <MX_I2C3_Init+0x74>)
 8001ca0:	f001 fda9 	bl	80037f6 <HAL_I2CEx_ConfigDigitalFilter>
 8001ca4:	4603      	mov	r3, r0
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	d001      	beq.n	8001cae <MX_I2C3_Init+0x6e>
  {
    Error_Handler();
 8001caa:	f000 f9db 	bl	8002064 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8001cae:	bf00      	nop
 8001cb0:	bd80      	pop	{r7, pc}
 8001cb2:	bf00      	nop
 8001cb4:	2000002c 	.word	0x2000002c
 8001cb8:	40005c00 	.word	0x40005c00
 8001cbc:	00300f38 	.word	0x00300f38

08001cc0 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001cc0:	b580      	push	{r7, lr}
 8001cc2:	b0a0      	sub	sp, #128	@ 0x80
 8001cc4:	af00      	add	r7, sp, #0
 8001cc6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001cc8:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8001ccc:	2200      	movs	r2, #0
 8001cce:	601a      	str	r2, [r3, #0]
 8001cd0:	605a      	str	r2, [r3, #4]
 8001cd2:	609a      	str	r2, [r3, #8]
 8001cd4:	60da      	str	r2, [r3, #12]
 8001cd6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001cd8:	f107 0318 	add.w	r3, r7, #24
 8001cdc:	2254      	movs	r2, #84	@ 0x54
 8001cde:	2100      	movs	r1, #0
 8001ce0:	4618      	mov	r0, r3
 8001ce2:	f003 fc08 	bl	80054f6 <memset>
  if(i2cHandle->Instance==I2C3)
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	4a5b      	ldr	r2, [pc, #364]	@ (8001e58 <HAL_I2C_MspInit+0x198>)
 8001cec:	4293      	cmp	r3, r2
 8001cee:	f040 80ae 	bne.w	8001e4e <HAL_I2C_MspInit+0x18e>

  /* USER CODE END I2C3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C3;
 8001cf2:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001cf6:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK1;
 8001cf8:	2300      	movs	r3, #0
 8001cfa:	64bb      	str	r3, [r7, #72]	@ 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001cfc:	f107 0318 	add.w	r3, r7, #24
 8001d00:	4618      	mov	r0, r3
 8001d02:	f002 fc71 	bl	80045e8 <HAL_RCCEx_PeriphCLKConfig>
 8001d06:	4603      	mov	r3, r0
 8001d08:	2b00      	cmp	r3, #0
 8001d0a:	d001      	beq.n	8001d10 <HAL_I2C_MspInit+0x50>
    {
      Error_Handler();
 8001d0c:	f000 f9aa 	bl	8002064 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d10:	4b52      	ldr	r3, [pc, #328]	@ (8001e5c <HAL_I2C_MspInit+0x19c>)
 8001d12:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001d14:	4a51      	ldr	r2, [pc, #324]	@ (8001e5c <HAL_I2C_MspInit+0x19c>)
 8001d16:	f043 0301 	orr.w	r3, r3, #1
 8001d1a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001d1c:	4b4f      	ldr	r3, [pc, #316]	@ (8001e5c <HAL_I2C_MspInit+0x19c>)
 8001d1e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001d20:	f003 0301 	and.w	r3, r3, #1
 8001d24:	617b      	str	r3, [r7, #20]
 8001d26:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d28:	4b4c      	ldr	r3, [pc, #304]	@ (8001e5c <HAL_I2C_MspInit+0x19c>)
 8001d2a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001d2c:	4a4b      	ldr	r2, [pc, #300]	@ (8001e5c <HAL_I2C_MspInit+0x19c>)
 8001d2e:	f043 0302 	orr.w	r3, r3, #2
 8001d32:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001d34:	4b49      	ldr	r3, [pc, #292]	@ (8001e5c <HAL_I2C_MspInit+0x19c>)
 8001d36:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001d38:	f003 0302 	and.w	r3, r3, #2
 8001d3c:	613b      	str	r3, [r7, #16]
 8001d3e:	693b      	ldr	r3, [r7, #16]
    /**I2C3 GPIO Configuration
    PA7     ------> I2C3_SCL
    PB4 (NJTRST)     ------> I2C3_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001d40:	2380      	movs	r3, #128	@ 0x80
 8001d42:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001d44:	2312      	movs	r3, #18
 8001d46:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d48:	2300      	movs	r3, #0
 8001d4a:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d4c:	2303      	movs	r3, #3
 8001d4e:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8001d50:	2304      	movs	r3, #4
 8001d52:	67fb      	str	r3, [r7, #124]	@ 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d54:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8001d58:	4619      	mov	r1, r3
 8001d5a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001d5e:	f000 fde1 	bl	8002924 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001d62:	2310      	movs	r3, #16
 8001d64:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001d66:	2312      	movs	r3, #18
 8001d68:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d6a:	2300      	movs	r3, #0
 8001d6c:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d6e:	2303      	movs	r3, #3
 8001d70:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8001d72:	2304      	movs	r3, #4
 8001d74:	67fb      	str	r3, [r7, #124]	@ 0x7c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d76:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8001d7a:	4619      	mov	r1, r3
 8001d7c:	4838      	ldr	r0, [pc, #224]	@ (8001e60 <HAL_I2C_MspInit+0x1a0>)
 8001d7e:	f000 fdd1 	bl	8002924 <HAL_GPIO_Init>

    /* I2C3 clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 8001d82:	4b36      	ldr	r3, [pc, #216]	@ (8001e5c <HAL_I2C_MspInit+0x19c>)
 8001d84:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001d86:	4a35      	ldr	r2, [pc, #212]	@ (8001e5c <HAL_I2C_MspInit+0x19c>)
 8001d88:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8001d8c:	6593      	str	r3, [r2, #88]	@ 0x58
 8001d8e:	4b33      	ldr	r3, [pc, #204]	@ (8001e5c <HAL_I2C_MspInit+0x19c>)
 8001d90:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001d92:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8001d96:	60fb      	str	r3, [r7, #12]
 8001d98:	68fb      	ldr	r3, [r7, #12]

    /* I2C3 DMA Init */
    /* I2C3_RX Init */
    hdma_i2c3_rx.Instance = DMA1_Channel3;
 8001d9a:	4b32      	ldr	r3, [pc, #200]	@ (8001e64 <HAL_I2C_MspInit+0x1a4>)
 8001d9c:	4a32      	ldr	r2, [pc, #200]	@ (8001e68 <HAL_I2C_MspInit+0x1a8>)
 8001d9e:	601a      	str	r2, [r3, #0]
    hdma_i2c3_rx.Init.Request = DMA_REQUEST_3;
 8001da0:	4b30      	ldr	r3, [pc, #192]	@ (8001e64 <HAL_I2C_MspInit+0x1a4>)
 8001da2:	2203      	movs	r2, #3
 8001da4:	605a      	str	r2, [r3, #4]
    hdma_i2c3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001da6:	4b2f      	ldr	r3, [pc, #188]	@ (8001e64 <HAL_I2C_MspInit+0x1a4>)
 8001da8:	2200      	movs	r2, #0
 8001daa:	609a      	str	r2, [r3, #8]
    hdma_i2c3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001dac:	4b2d      	ldr	r3, [pc, #180]	@ (8001e64 <HAL_I2C_MspInit+0x1a4>)
 8001dae:	2200      	movs	r2, #0
 8001db0:	60da      	str	r2, [r3, #12]
    hdma_i2c3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001db2:	4b2c      	ldr	r3, [pc, #176]	@ (8001e64 <HAL_I2C_MspInit+0x1a4>)
 8001db4:	2280      	movs	r2, #128	@ 0x80
 8001db6:	611a      	str	r2, [r3, #16]
    hdma_i2c3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001db8:	4b2a      	ldr	r3, [pc, #168]	@ (8001e64 <HAL_I2C_MspInit+0x1a4>)
 8001dba:	2200      	movs	r2, #0
 8001dbc:	615a      	str	r2, [r3, #20]
    hdma_i2c3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001dbe:	4b29      	ldr	r3, [pc, #164]	@ (8001e64 <HAL_I2C_MspInit+0x1a4>)
 8001dc0:	2200      	movs	r2, #0
 8001dc2:	619a      	str	r2, [r3, #24]
    hdma_i2c3_rx.Init.Mode = DMA_NORMAL;
 8001dc4:	4b27      	ldr	r3, [pc, #156]	@ (8001e64 <HAL_I2C_MspInit+0x1a4>)
 8001dc6:	2200      	movs	r2, #0
 8001dc8:	61da      	str	r2, [r3, #28]
    hdma_i2c3_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001dca:	4b26      	ldr	r3, [pc, #152]	@ (8001e64 <HAL_I2C_MspInit+0x1a4>)
 8001dcc:	2200      	movs	r2, #0
 8001dce:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_i2c3_rx) != HAL_OK)
 8001dd0:	4824      	ldr	r0, [pc, #144]	@ (8001e64 <HAL_I2C_MspInit+0x1a4>)
 8001dd2:	f000 fc3f 	bl	8002654 <HAL_DMA_Init>
 8001dd6:	4603      	mov	r3, r0
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	d001      	beq.n	8001de0 <HAL_I2C_MspInit+0x120>
    {
      Error_Handler();
 8001ddc:	f000 f942 	bl	8002064 <Error_Handler>
    }

    __HAL_LINKDMA(i2cHandle,hdmarx,hdma_i2c3_rx);
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	4a20      	ldr	r2, [pc, #128]	@ (8001e64 <HAL_I2C_MspInit+0x1a4>)
 8001de4:	63da      	str	r2, [r3, #60]	@ 0x3c
 8001de6:	4a1f      	ldr	r2, [pc, #124]	@ (8001e64 <HAL_I2C_MspInit+0x1a4>)
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	6293      	str	r3, [r2, #40]	@ 0x28

    /* I2C3_TX Init */
    hdma_i2c3_tx.Instance = DMA1_Channel2;
 8001dec:	4b1f      	ldr	r3, [pc, #124]	@ (8001e6c <HAL_I2C_MspInit+0x1ac>)
 8001dee:	4a20      	ldr	r2, [pc, #128]	@ (8001e70 <HAL_I2C_MspInit+0x1b0>)
 8001df0:	601a      	str	r2, [r3, #0]
    hdma_i2c3_tx.Init.Request = DMA_REQUEST_3;
 8001df2:	4b1e      	ldr	r3, [pc, #120]	@ (8001e6c <HAL_I2C_MspInit+0x1ac>)
 8001df4:	2203      	movs	r2, #3
 8001df6:	605a      	str	r2, [r3, #4]
    hdma_i2c3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001df8:	4b1c      	ldr	r3, [pc, #112]	@ (8001e6c <HAL_I2C_MspInit+0x1ac>)
 8001dfa:	2210      	movs	r2, #16
 8001dfc:	609a      	str	r2, [r3, #8]
    hdma_i2c3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001dfe:	4b1b      	ldr	r3, [pc, #108]	@ (8001e6c <HAL_I2C_MspInit+0x1ac>)
 8001e00:	2200      	movs	r2, #0
 8001e02:	60da      	str	r2, [r3, #12]
    hdma_i2c3_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001e04:	4b19      	ldr	r3, [pc, #100]	@ (8001e6c <HAL_I2C_MspInit+0x1ac>)
 8001e06:	2280      	movs	r2, #128	@ 0x80
 8001e08:	611a      	str	r2, [r3, #16]
    hdma_i2c3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001e0a:	4b18      	ldr	r3, [pc, #96]	@ (8001e6c <HAL_I2C_MspInit+0x1ac>)
 8001e0c:	2200      	movs	r2, #0
 8001e0e:	615a      	str	r2, [r3, #20]
    hdma_i2c3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001e10:	4b16      	ldr	r3, [pc, #88]	@ (8001e6c <HAL_I2C_MspInit+0x1ac>)
 8001e12:	2200      	movs	r2, #0
 8001e14:	619a      	str	r2, [r3, #24]
    hdma_i2c3_tx.Init.Mode = DMA_NORMAL;
 8001e16:	4b15      	ldr	r3, [pc, #84]	@ (8001e6c <HAL_I2C_MspInit+0x1ac>)
 8001e18:	2200      	movs	r2, #0
 8001e1a:	61da      	str	r2, [r3, #28]
    hdma_i2c3_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001e1c:	4b13      	ldr	r3, [pc, #76]	@ (8001e6c <HAL_I2C_MspInit+0x1ac>)
 8001e1e:	2200      	movs	r2, #0
 8001e20:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_i2c3_tx) != HAL_OK)
 8001e22:	4812      	ldr	r0, [pc, #72]	@ (8001e6c <HAL_I2C_MspInit+0x1ac>)
 8001e24:	f000 fc16 	bl	8002654 <HAL_DMA_Init>
 8001e28:	4603      	mov	r3, r0
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	d001      	beq.n	8001e32 <HAL_I2C_MspInit+0x172>
    {
      Error_Handler();
 8001e2e:	f000 f919 	bl	8002064 <Error_Handler>
    }

    __HAL_LINKDMA(i2cHandle,hdmatx,hdma_i2c3_tx);
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	4a0d      	ldr	r2, [pc, #52]	@ (8001e6c <HAL_I2C_MspInit+0x1ac>)
 8001e36:	639a      	str	r2, [r3, #56]	@ 0x38
 8001e38:	4a0c      	ldr	r2, [pc, #48]	@ (8001e6c <HAL_I2C_MspInit+0x1ac>)
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	6293      	str	r3, [r2, #40]	@ 0x28

    /* I2C3 interrupt Init */
    HAL_NVIC_SetPriority(I2C3_EV_IRQn, 0, 0);
 8001e3e:	2200      	movs	r2, #0
 8001e40:	2100      	movs	r1, #0
 8001e42:	2048      	movs	r0, #72	@ 0x48
 8001e44:	f000 fbcf 	bl	80025e6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C3_EV_IRQn);
 8001e48:	2048      	movs	r0, #72	@ 0x48
 8001e4a:	f000 fbe8 	bl	800261e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }
}
 8001e4e:	bf00      	nop
 8001e50:	3780      	adds	r7, #128	@ 0x80
 8001e52:	46bd      	mov	sp, r7
 8001e54:	bd80      	pop	{r7, pc}
 8001e56:	bf00      	nop
 8001e58:	40005c00 	.word	0x40005c00
 8001e5c:	40021000 	.word	0x40021000
 8001e60:	48000400 	.word	0x48000400
 8001e64:	20000080 	.word	0x20000080
 8001e68:	40020030 	.word	0x40020030
 8001e6c:	200000c8 	.word	0x200000c8
 8001e70:	4002001c 	.word	0x4002001c

08001e74 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001e74:	b580      	push	{r7, lr}
 8001e76:	b086      	sub	sp, #24
 8001e78:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001e7a:	f000 fa40 	bl	80022fe <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001e7e:	f000 f88f 	bl	8001fa0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001e82:	f7ff fe93 	bl	8001bac <MX_GPIO_Init>
  MX_DMA_Init();
 8001e86:	f7ff fe6b 	bl	8001b60 <MX_DMA_Init>
  MX_USART2_UART_Init();
 8001e8a:	f000 f975 	bl	8002178 <MX_USART2_UART_Init>
  MX_I2C3_Init();
 8001e8e:	f7ff fed7 	bl	8001c40 <MX_I2C3_Init>
  /* USER CODE BEGIN 2 */
	while (BNO055_Init(&bno, &hi2c3, 0, NDOF) != HAL_OK) {
 8001e92:	e002      	b.n	8001e9a <main+0x26>
		HAL_Delay(100);
 8001e94:	2064      	movs	r0, #100	@ 0x64
 8001e96:	f000 faa7 	bl	80023e8 <HAL_Delay>
	while (BNO055_Init(&bno, &hi2c3, 0, NDOF) != HAL_OK) {
 8001e9a:	230c      	movs	r3, #12
 8001e9c:	2200      	movs	r2, #0
 8001e9e:	493a      	ldr	r1, [pc, #232]	@ (8001f88 <main+0x114>)
 8001ea0:	483a      	ldr	r0, [pc, #232]	@ (8001f8c <main+0x118>)
 8001ea2:	f7fe fed9 	bl	8000c58 <BNO055_Init>
 8001ea6:	4603      	mov	r3, r0
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	d1f3      	bne.n	8001e94 <main+0x20>
	}

	while(BNO055_isFullyCalibrated(&bno) != HAL_OK){
 8001eac:	e030      	b.n	8001f10 <main+0x9c>
		HAL_I2C_Mem_Read(bno.hi2cx, bno.address, OPR_MODE, 1, bno.RxBuffer, 1, 10);
 8001eae:	4b37      	ldr	r3, [pc, #220]	@ (8001f8c <main+0x118>)
 8001eb0:	6818      	ldr	r0, [r3, #0]
 8001eb2:	4b36      	ldr	r3, [pc, #216]	@ (8001f8c <main+0x118>)
 8001eb4:	791b      	ldrb	r3, [r3, #4]
 8001eb6:	4619      	mov	r1, r3
 8001eb8:	230a      	movs	r3, #10
 8001eba:	9302      	str	r3, [sp, #8]
 8001ebc:	2301      	movs	r3, #1
 8001ebe:	9301      	str	r3, [sp, #4]
 8001ec0:	4b33      	ldr	r3, [pc, #204]	@ (8001f90 <main+0x11c>)
 8001ec2:	9300      	str	r3, [sp, #0]
 8001ec4:	2301      	movs	r3, #1
 8001ec6:	223d      	movs	r2, #61	@ 0x3d
 8001ec8:	f001 f85e 	bl	8002f88 <HAL_I2C_Mem_Read>
		mode = bno.RxBuffer[0] & 0x0F;
 8001ecc:	4b2f      	ldr	r3, [pc, #188]	@ (8001f8c <main+0x118>)
 8001ece:	f893 30b8 	ldrb.w	r3, [r3, #184]	@ 0xb8
 8001ed2:	f003 030f 	and.w	r3, r3, #15
 8001ed6:	b2da      	uxtb	r2, r3
 8001ed8:	4b2e      	ldr	r3, [pc, #184]	@ (8001f94 <main+0x120>)
 8001eda:	701a      	strb	r2, [r3, #0]
		HAL_Delay(20);
 8001edc:	2014      	movs	r0, #20
 8001ede:	f000 fa83 	bl	80023e8 <HAL_Delay>

		HAL_I2C_Mem_Read(bno.hi2cx, bno.address, CALIB_STAT, 1, bno.RxBuffer, 1, 10);
 8001ee2:	4b2a      	ldr	r3, [pc, #168]	@ (8001f8c <main+0x118>)
 8001ee4:	6818      	ldr	r0, [r3, #0]
 8001ee6:	4b29      	ldr	r3, [pc, #164]	@ (8001f8c <main+0x118>)
 8001ee8:	791b      	ldrb	r3, [r3, #4]
 8001eea:	4619      	mov	r1, r3
 8001eec:	230a      	movs	r3, #10
 8001eee:	9302      	str	r3, [sp, #8]
 8001ef0:	2301      	movs	r3, #1
 8001ef2:	9301      	str	r3, [sp, #4]
 8001ef4:	4b26      	ldr	r3, [pc, #152]	@ (8001f90 <main+0x11c>)
 8001ef6:	9300      	str	r3, [sp, #0]
 8001ef8:	2301      	movs	r3, #1
 8001efa:	2235      	movs	r2, #53	@ 0x35
 8001efc:	f001 f844 	bl	8002f88 <HAL_I2C_Mem_Read>
		calibated = bno.RxBuffer[0];
 8001f00:	4b22      	ldr	r3, [pc, #136]	@ (8001f8c <main+0x118>)
 8001f02:	f893 20b8 	ldrb.w	r2, [r3, #184]	@ 0xb8
 8001f06:	4b24      	ldr	r3, [pc, #144]	@ (8001f98 <main+0x124>)
 8001f08:	701a      	strb	r2, [r3, #0]
		HAL_Delay(20);
 8001f0a:	2014      	movs	r0, #20
 8001f0c:	f000 fa6c 	bl	80023e8 <HAL_Delay>
	while(BNO055_isFullyCalibrated(&bno) != HAL_OK){
 8001f10:	481e      	ldr	r0, [pc, #120]	@ (8001f8c <main+0x118>)
 8001f12:	f7fe ffe1 	bl	8000ed8 <BNO055_isFullyCalibrated>
 8001f16:	4603      	mov	r3, r0
 8001f18:	2b00      	cmp	r3, #0
 8001f1a:	d1c8      	bne.n	8001eae <main+0x3a>
	}
	sys = 1;
 8001f1c:	4b1f      	ldr	r3, [pc, #124]	@ (8001f9c <main+0x128>)
 8001f1e:	2201      	movs	r2, #1
 8001f20:	701a      	strb	r2, [r3, #0]

	while(BNO055_getSensorOffsets(&bno) != HAL_OK){
 8001f22:	e002      	b.n	8001f2a <main+0xb6>
		sys = 2;
 8001f24:	4b1d      	ldr	r3, [pc, #116]	@ (8001f9c <main+0x128>)
 8001f26:	2202      	movs	r2, #2
 8001f28:	701a      	strb	r2, [r3, #0]
	while(BNO055_getSensorOffsets(&bno) != HAL_OK){
 8001f2a:	4818      	ldr	r0, [pc, #96]	@ (8001f8c <main+0x118>)
 8001f2c:	f7ff f94f 	bl	80011ce <BNO055_getSensorOffsets>
 8001f30:	4603      	mov	r3, r0
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	d1f6      	bne.n	8001f24 <main+0xb0>
	}

	BNO055_setSensoroffsets(&bno);
 8001f36:	4815      	ldr	r0, [pc, #84]	@ (8001f8c <main+0x118>)
 8001f38:	f7ff fa46 	bl	80013c8 <BNO055_setSensoroffsets>
	sys = 3;
 8001f3c:	4b17      	ldr	r3, [pc, #92]	@ (8001f9c <main+0x128>)
 8001f3e:	2203      	movs	r2, #3
 8001f40:	701a      	strb	r2, [r3, #0]

	BNO55_setAxisRemap(&bno, P0_Config);
 8001f42:	2121      	movs	r1, #33	@ 0x21
 8001f44:	4811      	ldr	r0, [pc, #68]	@ (8001f8c <main+0x118>)
 8001f46:	f7ff fd41 	bl	80019cc <BNO55_setAxisRemap>

	BNO55_setAxisSign(&bno, P0_Sign);
 8001f4a:	2104      	movs	r1, #4
 8001f4c:	480f      	ldr	r0, [pc, #60]	@ (8001f8c <main+0x118>)
 8001f4e:	f7ff fda2 	bl	8001a96 <BNO55_setAxisSign>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	uint32_t bno_time = HAL_GetTick() + 10;
 8001f52:	f000 fa3d 	bl	80023d0 <HAL_GetTick>
 8001f56:	4603      	mov	r3, r0
 8001f58:	330a      	adds	r3, #10
 8001f5a:	607b      	str	r3, [r7, #4]
	while (1)
	{
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
		uint32_t time = HAL_GetTick();
 8001f5c:	f000 fa38 	bl	80023d0 <HAL_GetTick>
 8001f60:	6038      	str	r0, [r7, #0]
		if (time >= bno_time) //bno.flag == HAL_OK &&
 8001f62:	683a      	ldr	r2, [r7, #0]
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	429a      	cmp	r2, r3
 8001f68:	d3f8      	bcc.n	8001f5c <main+0xe8>
		{
			bno_time += 10;
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	330a      	adds	r3, #10
 8001f6e:	607b      	str	r3, [r7, #4]
			BNO055_Read(&bno, EULER);
 8001f70:	2102      	movs	r1, #2
 8001f72:	4806      	ldr	r0, [pc, #24]	@ (8001f8c <main+0x118>)
 8001f74:	f7ff fb0c 	bl	8001590 <BNO055_Read>
			BNO055_Read(&bno, LINEARACCEL);
 8001f78:	2104      	movs	r1, #4
 8001f7a:	4804      	ldr	r0, [pc, #16]	@ (8001f8c <main+0x118>)
 8001f7c:	f7ff fb08 	bl	8001590 <BNO055_Read>
			//			BNO055_Read(&bno, EULER);
			bno.flag = HAL_BUSY;
 8001f80:	4b02      	ldr	r3, [pc, #8]	@ (8001f8c <main+0x118>)
 8001f82:	2202      	movs	r2, #2
 8001f84:	719a      	strb	r2, [r3, #6]
	{
 8001f86:	e7e9      	b.n	8001f5c <main+0xe8>
 8001f88:	2000002c 	.word	0x2000002c
 8001f8c:	20000110 	.word	0x20000110
 8001f90:	200001c8 	.word	0x200001c8
 8001f94:	20000211 	.word	0x20000211
 8001f98:	20000212 	.word	0x20000212
 8001f9c:	20000210 	.word	0x20000210

08001fa0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001fa0:	b580      	push	{r7, lr}
 8001fa2:	b096      	sub	sp, #88	@ 0x58
 8001fa4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001fa6:	f107 0314 	add.w	r3, r7, #20
 8001faa:	2244      	movs	r2, #68	@ 0x44
 8001fac:	2100      	movs	r1, #0
 8001fae:	4618      	mov	r0, r3
 8001fb0:	f003 faa1 	bl	80054f6 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001fb4:	463b      	mov	r3, r7
 8001fb6:	2200      	movs	r2, #0
 8001fb8:	601a      	str	r2, [r3, #0]
 8001fba:	605a      	str	r2, [r3, #4]
 8001fbc:	609a      	str	r2, [r3, #8]
 8001fbe:	60da      	str	r2, [r3, #12]
 8001fc0:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8001fc2:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8001fc6:	f001 fc81 	bl	80038cc <HAL_PWREx_ControlVoltageScaling>
 8001fca:	4603      	mov	r3, r0
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	d001      	beq.n	8001fd4 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8001fd0:	f000 f848 	bl	8002064 <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8001fd4:	f001 fc5c 	bl	8003890 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8001fd8:	4b21      	ldr	r3, [pc, #132]	@ (8002060 <SystemClock_Config+0xc0>)
 8001fda:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001fde:	4a20      	ldr	r2, [pc, #128]	@ (8002060 <SystemClock_Config+0xc0>)
 8001fe0:	f023 0318 	bic.w	r3, r3, #24
 8001fe4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 8001fe8:	2314      	movs	r3, #20
 8001fea:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8001fec:	2301      	movs	r3, #1
 8001fee:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8001ff0:	2301      	movs	r3, #1
 8001ff2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8001ff4:	2300      	movs	r3, #0
 8001ff6:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8001ff8:	2360      	movs	r3, #96	@ 0x60
 8001ffa:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001ffc:	2302      	movs	r3, #2
 8001ffe:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8002000:	2301      	movs	r3, #1
 8002002:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8002004:	2301      	movs	r3, #1
 8002006:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 16;
 8002008:	2310      	movs	r3, #16
 800200a:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 800200c:	2307      	movs	r3, #7
 800200e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8002010:	2302      	movs	r3, #2
 8002012:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8002014:	2302      	movs	r3, #2
 8002016:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002018:	f107 0314 	add.w	r3, r7, #20
 800201c:	4618      	mov	r0, r3
 800201e:	f001 fcab 	bl	8003978 <HAL_RCC_OscConfig>
 8002022:	4603      	mov	r3, r0
 8002024:	2b00      	cmp	r3, #0
 8002026:	d001      	beq.n	800202c <SystemClock_Config+0x8c>
  {
    Error_Handler();
 8002028:	f000 f81c 	bl	8002064 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800202c:	230f      	movs	r3, #15
 800202e:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002030:	2303      	movs	r3, #3
 8002032:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002034:	2300      	movs	r3, #0
 8002036:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002038:	2300      	movs	r3, #0
 800203a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800203c:	2300      	movs	r3, #0
 800203e:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8002040:	463b      	mov	r3, r7
 8002042:	2101      	movs	r1, #1
 8002044:	4618      	mov	r0, r3
 8002046:	f002 f8ab 	bl	80041a0 <HAL_RCC_ClockConfig>
 800204a:	4603      	mov	r3, r0
 800204c:	2b00      	cmp	r3, #0
 800204e:	d001      	beq.n	8002054 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 8002050:	f000 f808 	bl	8002064 <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 8002054:	f002 fcbe 	bl	80049d4 <HAL_RCCEx_EnableMSIPLLMode>
}
 8002058:	bf00      	nop
 800205a:	3758      	adds	r7, #88	@ 0x58
 800205c:	46bd      	mov	sp, r7
 800205e:	bd80      	pop	{r7, pc}
 8002060:	40021000 	.word	0x40021000

08002064 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002064:	b480      	push	{r7}
 8002066:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002068:	b672      	cpsid	i
}
 800206a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 800206c:	bf00      	nop
 800206e:	e7fd      	b.n	800206c <Error_Handler+0x8>

08002070 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002070:	b480      	push	{r7}
 8002072:	b083      	sub	sp, #12
 8002074:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002076:	4b0f      	ldr	r3, [pc, #60]	@ (80020b4 <HAL_MspInit+0x44>)
 8002078:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800207a:	4a0e      	ldr	r2, [pc, #56]	@ (80020b4 <HAL_MspInit+0x44>)
 800207c:	f043 0301 	orr.w	r3, r3, #1
 8002080:	6613      	str	r3, [r2, #96]	@ 0x60
 8002082:	4b0c      	ldr	r3, [pc, #48]	@ (80020b4 <HAL_MspInit+0x44>)
 8002084:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002086:	f003 0301 	and.w	r3, r3, #1
 800208a:	607b      	str	r3, [r7, #4]
 800208c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800208e:	4b09      	ldr	r3, [pc, #36]	@ (80020b4 <HAL_MspInit+0x44>)
 8002090:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002092:	4a08      	ldr	r2, [pc, #32]	@ (80020b4 <HAL_MspInit+0x44>)
 8002094:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002098:	6593      	str	r3, [r2, #88]	@ 0x58
 800209a:	4b06      	ldr	r3, [pc, #24]	@ (80020b4 <HAL_MspInit+0x44>)
 800209c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800209e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80020a2:	603b      	str	r3, [r7, #0]
 80020a4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80020a6:	bf00      	nop
 80020a8:	370c      	adds	r7, #12
 80020aa:	46bd      	mov	sp, r7
 80020ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020b0:	4770      	bx	lr
 80020b2:	bf00      	nop
 80020b4:	40021000 	.word	0x40021000

080020b8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80020b8:	b480      	push	{r7}
 80020ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80020bc:	bf00      	nop
 80020be:	e7fd      	b.n	80020bc <NMI_Handler+0x4>

080020c0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80020c0:	b480      	push	{r7}
 80020c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80020c4:	bf00      	nop
 80020c6:	e7fd      	b.n	80020c4 <HardFault_Handler+0x4>

080020c8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80020c8:	b480      	push	{r7}
 80020ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80020cc:	bf00      	nop
 80020ce:	e7fd      	b.n	80020cc <MemManage_Handler+0x4>

080020d0 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80020d0:	b480      	push	{r7}
 80020d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80020d4:	bf00      	nop
 80020d6:	e7fd      	b.n	80020d4 <BusFault_Handler+0x4>

080020d8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80020d8:	b480      	push	{r7}
 80020da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80020dc:	bf00      	nop
 80020de:	e7fd      	b.n	80020dc <UsageFault_Handler+0x4>

080020e0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80020e0:	b480      	push	{r7}
 80020e2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80020e4:	bf00      	nop
 80020e6:	46bd      	mov	sp, r7
 80020e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ec:	4770      	bx	lr

080020ee <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80020ee:	b480      	push	{r7}
 80020f0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80020f2:	bf00      	nop
 80020f4:	46bd      	mov	sp, r7
 80020f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020fa:	4770      	bx	lr

080020fc <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80020fc:	b480      	push	{r7}
 80020fe:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002100:	bf00      	nop
 8002102:	46bd      	mov	sp, r7
 8002104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002108:	4770      	bx	lr

0800210a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800210a:	b580      	push	{r7, lr}
 800210c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800210e:	f000 f94b 	bl	80023a8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002112:	bf00      	nop
 8002114:	bd80      	pop	{r7, pc}
	...

08002118 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8002118:	b580      	push	{r7, lr}
 800211a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c3_tx);
 800211c:	4802      	ldr	r0, [pc, #8]	@ (8002128 <DMA1_Channel2_IRQHandler+0x10>)
 800211e:	f000 fb51 	bl	80027c4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 8002122:	bf00      	nop
 8002124:	bd80      	pop	{r7, pc}
 8002126:	bf00      	nop
 8002128:	200000c8 	.word	0x200000c8

0800212c <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 800212c:	b580      	push	{r7, lr}
 800212e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c3_rx);
 8002130:	4802      	ldr	r0, [pc, #8]	@ (800213c <DMA1_Channel3_IRQHandler+0x10>)
 8002132:	f000 fb47 	bl	80027c4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 8002136:	bf00      	nop
 8002138:	bd80      	pop	{r7, pc}
 800213a:	bf00      	nop
 800213c:	20000080 	.word	0x20000080

08002140 <I2C3_EV_IRQHandler>:

/**
  * @brief This function handles I2C3 event interrupt.
  */
void I2C3_EV_IRQHandler(void)
{
 8002140:	b580      	push	{r7, lr}
 8002142:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C3_EV_IRQn 0 */

  /* USER CODE END I2C3_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c3);
 8002144:	4802      	ldr	r0, [pc, #8]	@ (8002150 <I2C3_EV_IRQHandler+0x10>)
 8002146:	f001 f839 	bl	80031bc <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C3_EV_IRQn 1 */

  /* USER CODE END I2C3_EV_IRQn 1 */
}
 800214a:	bf00      	nop
 800214c:	bd80      	pop	{r7, pc}
 800214e:	bf00      	nop
 8002150:	2000002c 	.word	0x2000002c

08002154 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8002154:	b480      	push	{r7}
 8002156:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8002158:	4b06      	ldr	r3, [pc, #24]	@ (8002174 <SystemInit+0x20>)
 800215a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800215e:	4a05      	ldr	r2, [pc, #20]	@ (8002174 <SystemInit+0x20>)
 8002160:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002164:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8002168:	bf00      	nop
 800216a:	46bd      	mov	sp, r7
 800216c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002170:	4770      	bx	lr
 8002172:	bf00      	nop
 8002174:	e000ed00 	.word	0xe000ed00

08002178 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8002178:	b580      	push	{r7, lr}
 800217a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800217c:	4b14      	ldr	r3, [pc, #80]	@ (80021d0 <MX_USART2_UART_Init+0x58>)
 800217e:	4a15      	ldr	r2, [pc, #84]	@ (80021d4 <MX_USART2_UART_Init+0x5c>)
 8002180:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8002182:	4b13      	ldr	r3, [pc, #76]	@ (80021d0 <MX_USART2_UART_Init+0x58>)
 8002184:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8002188:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800218a:	4b11      	ldr	r3, [pc, #68]	@ (80021d0 <MX_USART2_UART_Init+0x58>)
 800218c:	2200      	movs	r2, #0
 800218e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002190:	4b0f      	ldr	r3, [pc, #60]	@ (80021d0 <MX_USART2_UART_Init+0x58>)
 8002192:	2200      	movs	r2, #0
 8002194:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002196:	4b0e      	ldr	r3, [pc, #56]	@ (80021d0 <MX_USART2_UART_Init+0x58>)
 8002198:	2200      	movs	r2, #0
 800219a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800219c:	4b0c      	ldr	r3, [pc, #48]	@ (80021d0 <MX_USART2_UART_Init+0x58>)
 800219e:	220c      	movs	r2, #12
 80021a0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80021a2:	4b0b      	ldr	r3, [pc, #44]	@ (80021d0 <MX_USART2_UART_Init+0x58>)
 80021a4:	2200      	movs	r2, #0
 80021a6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80021a8:	4b09      	ldr	r3, [pc, #36]	@ (80021d0 <MX_USART2_UART_Init+0x58>)
 80021aa:	2200      	movs	r2, #0
 80021ac:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80021ae:	4b08      	ldr	r3, [pc, #32]	@ (80021d0 <MX_USART2_UART_Init+0x58>)
 80021b0:	2200      	movs	r2, #0
 80021b2:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80021b4:	4b06      	ldr	r3, [pc, #24]	@ (80021d0 <MX_USART2_UART_Init+0x58>)
 80021b6:	2200      	movs	r2, #0
 80021b8:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80021ba:	4805      	ldr	r0, [pc, #20]	@ (80021d0 <MX_USART2_UART_Init+0x58>)
 80021bc:	f002 fd0c 	bl	8004bd8 <HAL_UART_Init>
 80021c0:	4603      	mov	r3, r0
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d001      	beq.n	80021ca <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80021c6:	f7ff ff4d 	bl	8002064 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80021ca:	bf00      	nop
 80021cc:	bd80      	pop	{r7, pc}
 80021ce:	bf00      	nop
 80021d0:	20000214 	.word	0x20000214
 80021d4:	40004400 	.word	0x40004400

080021d8 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80021d8:	b580      	push	{r7, lr}
 80021da:	b09e      	sub	sp, #120	@ 0x78
 80021dc:	af00      	add	r7, sp, #0
 80021de:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80021e0:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 80021e4:	2200      	movs	r2, #0
 80021e6:	601a      	str	r2, [r3, #0]
 80021e8:	605a      	str	r2, [r3, #4]
 80021ea:	609a      	str	r2, [r3, #8]
 80021ec:	60da      	str	r2, [r3, #12]
 80021ee:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80021f0:	f107 0310 	add.w	r3, r7, #16
 80021f4:	2254      	movs	r2, #84	@ 0x54
 80021f6:	2100      	movs	r1, #0
 80021f8:	4618      	mov	r0, r3
 80021fa:	f003 f97c 	bl	80054f6 <memset>
  if(uartHandle->Instance==USART2)
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	4a28      	ldr	r2, [pc, #160]	@ (80022a4 <HAL_UART_MspInit+0xcc>)
 8002204:	4293      	cmp	r3, r2
 8002206:	d148      	bne.n	800229a <HAL_UART_MspInit+0xc2>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8002208:	2302      	movs	r3, #2
 800220a:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800220c:	2300      	movs	r3, #0
 800220e:	637b      	str	r3, [r7, #52]	@ 0x34
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002210:	f107 0310 	add.w	r3, r7, #16
 8002214:	4618      	mov	r0, r3
 8002216:	f002 f9e7 	bl	80045e8 <HAL_RCCEx_PeriphCLKConfig>
 800221a:	4603      	mov	r3, r0
 800221c:	2b00      	cmp	r3, #0
 800221e:	d001      	beq.n	8002224 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8002220:	f7ff ff20 	bl	8002064 <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002224:	4b20      	ldr	r3, [pc, #128]	@ (80022a8 <HAL_UART_MspInit+0xd0>)
 8002226:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002228:	4a1f      	ldr	r2, [pc, #124]	@ (80022a8 <HAL_UART_MspInit+0xd0>)
 800222a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800222e:	6593      	str	r3, [r2, #88]	@ 0x58
 8002230:	4b1d      	ldr	r3, [pc, #116]	@ (80022a8 <HAL_UART_MspInit+0xd0>)
 8002232:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002234:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002238:	60fb      	str	r3, [r7, #12]
 800223a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800223c:	4b1a      	ldr	r3, [pc, #104]	@ (80022a8 <HAL_UART_MspInit+0xd0>)
 800223e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002240:	4a19      	ldr	r2, [pc, #100]	@ (80022a8 <HAL_UART_MspInit+0xd0>)
 8002242:	f043 0301 	orr.w	r3, r3, #1
 8002246:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002248:	4b17      	ldr	r3, [pc, #92]	@ (80022a8 <HAL_UART_MspInit+0xd0>)
 800224a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800224c:	f003 0301 	and.w	r3, r3, #1
 8002250:	60bb      	str	r3, [r7, #8]
 8002252:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA15 (JTDI)     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = VCP_TX_Pin;
 8002254:	2304      	movs	r3, #4
 8002256:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002258:	2302      	movs	r3, #2
 800225a:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800225c:	2300      	movs	r3, #0
 800225e:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002260:	2303      	movs	r3, #3
 8002262:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002264:	2307      	movs	r3, #7
 8002266:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 8002268:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 800226c:	4619      	mov	r1, r3
 800226e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002272:	f000 fb57 	bl	8002924 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VCP_RX_Pin;
 8002276:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800227a:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800227c:	2302      	movs	r3, #2
 800227e:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002280:	2300      	movs	r3, #0
 8002282:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002284:	2303      	movs	r3, #3
 8002286:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF3_USART2;
 8002288:	2303      	movs	r3, #3
 800228a:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 800228c:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8002290:	4619      	mov	r1, r3
 8002292:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002296:	f000 fb45 	bl	8002924 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 800229a:	bf00      	nop
 800229c:	3778      	adds	r7, #120	@ 0x78
 800229e:	46bd      	mov	sp, r7
 80022a0:	bd80      	pop	{r7, pc}
 80022a2:	bf00      	nop
 80022a4:	40004400 	.word	0x40004400
 80022a8:	40021000 	.word	0x40021000

080022ac <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80022ac:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80022e4 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80022b0:	f7ff ff50 	bl	8002154 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80022b4:	480c      	ldr	r0, [pc, #48]	@ (80022e8 <LoopForever+0x6>)
  ldr r1, =_edata
 80022b6:	490d      	ldr	r1, [pc, #52]	@ (80022ec <LoopForever+0xa>)
  ldr r2, =_sidata
 80022b8:	4a0d      	ldr	r2, [pc, #52]	@ (80022f0 <LoopForever+0xe>)
  movs r3, #0
 80022ba:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80022bc:	e002      	b.n	80022c4 <LoopCopyDataInit>

080022be <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80022be:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80022c0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80022c2:	3304      	adds	r3, #4

080022c4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80022c4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80022c6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80022c8:	d3f9      	bcc.n	80022be <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80022ca:	4a0a      	ldr	r2, [pc, #40]	@ (80022f4 <LoopForever+0x12>)
  ldr r4, =_ebss
 80022cc:	4c0a      	ldr	r4, [pc, #40]	@ (80022f8 <LoopForever+0x16>)
  movs r3, #0
 80022ce:	2300      	movs	r3, #0
  b LoopFillZerobss
 80022d0:	e001      	b.n	80022d6 <LoopFillZerobss>

080022d2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80022d2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80022d4:	3204      	adds	r2, #4

080022d6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80022d6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80022d8:	d3fb      	bcc.n	80022d2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80022da:	f003 f915 	bl	8005508 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80022de:	f7ff fdc9 	bl	8001e74 <main>

080022e2 <LoopForever>:

LoopForever:
    b LoopForever
 80022e2:	e7fe      	b.n	80022e2 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80022e4:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 80022e8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80022ec:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 80022f0:	080055c0 	.word	0x080055c0
  ldr r2, =_sbss
 80022f4:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 80022f8:	200002a0 	.word	0x200002a0

080022fc <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80022fc:	e7fe      	b.n	80022fc <ADC1_IRQHandler>

080022fe <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80022fe:	b580      	push	{r7, lr}
 8002300:	b082      	sub	sp, #8
 8002302:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002304:	2300      	movs	r3, #0
 8002306:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002308:	2003      	movs	r0, #3
 800230a:	f000 f961 	bl	80025d0 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800230e:	2000      	movs	r0, #0
 8002310:	f000 f80e 	bl	8002330 <HAL_InitTick>
 8002314:	4603      	mov	r3, r0
 8002316:	2b00      	cmp	r3, #0
 8002318:	d002      	beq.n	8002320 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800231a:	2301      	movs	r3, #1
 800231c:	71fb      	strb	r3, [r7, #7]
 800231e:	e001      	b.n	8002324 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002320:	f7ff fea6 	bl	8002070 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002324:	79fb      	ldrb	r3, [r7, #7]
}
 8002326:	4618      	mov	r0, r3
 8002328:	3708      	adds	r7, #8
 800232a:	46bd      	mov	sp, r7
 800232c:	bd80      	pop	{r7, pc}
	...

08002330 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002330:	b580      	push	{r7, lr}
 8002332:	b084      	sub	sp, #16
 8002334:	af00      	add	r7, sp, #0
 8002336:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002338:	2300      	movs	r3, #0
 800233a:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 800233c:	4b17      	ldr	r3, [pc, #92]	@ (800239c <HAL_InitTick+0x6c>)
 800233e:	781b      	ldrb	r3, [r3, #0]
 8002340:	2b00      	cmp	r3, #0
 8002342:	d023      	beq.n	800238c <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8002344:	4b16      	ldr	r3, [pc, #88]	@ (80023a0 <HAL_InitTick+0x70>)
 8002346:	681a      	ldr	r2, [r3, #0]
 8002348:	4b14      	ldr	r3, [pc, #80]	@ (800239c <HAL_InitTick+0x6c>)
 800234a:	781b      	ldrb	r3, [r3, #0]
 800234c:	4619      	mov	r1, r3
 800234e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002352:	fbb3 f3f1 	udiv	r3, r3, r1
 8002356:	fbb2 f3f3 	udiv	r3, r2, r3
 800235a:	4618      	mov	r0, r3
 800235c:	f000 f96d 	bl	800263a <HAL_SYSTICK_Config>
 8002360:	4603      	mov	r3, r0
 8002362:	2b00      	cmp	r3, #0
 8002364:	d10f      	bne.n	8002386 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	2b0f      	cmp	r3, #15
 800236a:	d809      	bhi.n	8002380 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800236c:	2200      	movs	r2, #0
 800236e:	6879      	ldr	r1, [r7, #4]
 8002370:	f04f 30ff 	mov.w	r0, #4294967295
 8002374:	f000 f937 	bl	80025e6 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002378:	4a0a      	ldr	r2, [pc, #40]	@ (80023a4 <HAL_InitTick+0x74>)
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	6013      	str	r3, [r2, #0]
 800237e:	e007      	b.n	8002390 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8002380:	2301      	movs	r3, #1
 8002382:	73fb      	strb	r3, [r7, #15]
 8002384:	e004      	b.n	8002390 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8002386:	2301      	movs	r3, #1
 8002388:	73fb      	strb	r3, [r7, #15]
 800238a:	e001      	b.n	8002390 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 800238c:	2301      	movs	r3, #1
 800238e:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8002390:	7bfb      	ldrb	r3, [r7, #15]
}
 8002392:	4618      	mov	r0, r3
 8002394:	3710      	adds	r7, #16
 8002396:	46bd      	mov	sp, r7
 8002398:	bd80      	pop	{r7, pc}
 800239a:	bf00      	nop
 800239c:	2000000c 	.word	0x2000000c
 80023a0:	20000004 	.word	0x20000004
 80023a4:	20000008 	.word	0x20000008

080023a8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80023a8:	b480      	push	{r7}
 80023aa:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80023ac:	4b06      	ldr	r3, [pc, #24]	@ (80023c8 <HAL_IncTick+0x20>)
 80023ae:	781b      	ldrb	r3, [r3, #0]
 80023b0:	461a      	mov	r2, r3
 80023b2:	4b06      	ldr	r3, [pc, #24]	@ (80023cc <HAL_IncTick+0x24>)
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	4413      	add	r3, r2
 80023b8:	4a04      	ldr	r2, [pc, #16]	@ (80023cc <HAL_IncTick+0x24>)
 80023ba:	6013      	str	r3, [r2, #0]
}
 80023bc:	bf00      	nop
 80023be:	46bd      	mov	sp, r7
 80023c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023c4:	4770      	bx	lr
 80023c6:	bf00      	nop
 80023c8:	2000000c 	.word	0x2000000c
 80023cc:	2000029c 	.word	0x2000029c

080023d0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80023d0:	b480      	push	{r7}
 80023d2:	af00      	add	r7, sp, #0
  return uwTick;
 80023d4:	4b03      	ldr	r3, [pc, #12]	@ (80023e4 <HAL_GetTick+0x14>)
 80023d6:	681b      	ldr	r3, [r3, #0]
}
 80023d8:	4618      	mov	r0, r3
 80023da:	46bd      	mov	sp, r7
 80023dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023e0:	4770      	bx	lr
 80023e2:	bf00      	nop
 80023e4:	2000029c 	.word	0x2000029c

080023e8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80023e8:	b580      	push	{r7, lr}
 80023ea:	b084      	sub	sp, #16
 80023ec:	af00      	add	r7, sp, #0
 80023ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80023f0:	f7ff ffee 	bl	80023d0 <HAL_GetTick>
 80023f4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80023fa:	68fb      	ldr	r3, [r7, #12]
 80023fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002400:	d005      	beq.n	800240e <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8002402:	4b0a      	ldr	r3, [pc, #40]	@ (800242c <HAL_Delay+0x44>)
 8002404:	781b      	ldrb	r3, [r3, #0]
 8002406:	461a      	mov	r2, r3
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	4413      	add	r3, r2
 800240c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800240e:	bf00      	nop
 8002410:	f7ff ffde 	bl	80023d0 <HAL_GetTick>
 8002414:	4602      	mov	r2, r0
 8002416:	68bb      	ldr	r3, [r7, #8]
 8002418:	1ad3      	subs	r3, r2, r3
 800241a:	68fa      	ldr	r2, [r7, #12]
 800241c:	429a      	cmp	r2, r3
 800241e:	d8f7      	bhi.n	8002410 <HAL_Delay+0x28>
  {
  }
}
 8002420:	bf00      	nop
 8002422:	bf00      	nop
 8002424:	3710      	adds	r7, #16
 8002426:	46bd      	mov	sp, r7
 8002428:	bd80      	pop	{r7, pc}
 800242a:	bf00      	nop
 800242c:	2000000c 	.word	0x2000000c

08002430 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002430:	b480      	push	{r7}
 8002432:	b085      	sub	sp, #20
 8002434:	af00      	add	r7, sp, #0
 8002436:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	f003 0307 	and.w	r3, r3, #7
 800243e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002440:	4b0c      	ldr	r3, [pc, #48]	@ (8002474 <__NVIC_SetPriorityGrouping+0x44>)
 8002442:	68db      	ldr	r3, [r3, #12]
 8002444:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002446:	68ba      	ldr	r2, [r7, #8]
 8002448:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800244c:	4013      	ands	r3, r2
 800244e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002450:	68fb      	ldr	r3, [r7, #12]
 8002452:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002454:	68bb      	ldr	r3, [r7, #8]
 8002456:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002458:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800245c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002460:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002462:	4a04      	ldr	r2, [pc, #16]	@ (8002474 <__NVIC_SetPriorityGrouping+0x44>)
 8002464:	68bb      	ldr	r3, [r7, #8]
 8002466:	60d3      	str	r3, [r2, #12]
}
 8002468:	bf00      	nop
 800246a:	3714      	adds	r7, #20
 800246c:	46bd      	mov	sp, r7
 800246e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002472:	4770      	bx	lr
 8002474:	e000ed00 	.word	0xe000ed00

08002478 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002478:	b480      	push	{r7}
 800247a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800247c:	4b04      	ldr	r3, [pc, #16]	@ (8002490 <__NVIC_GetPriorityGrouping+0x18>)
 800247e:	68db      	ldr	r3, [r3, #12]
 8002480:	0a1b      	lsrs	r3, r3, #8
 8002482:	f003 0307 	and.w	r3, r3, #7
}
 8002486:	4618      	mov	r0, r3
 8002488:	46bd      	mov	sp, r7
 800248a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800248e:	4770      	bx	lr
 8002490:	e000ed00 	.word	0xe000ed00

08002494 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002494:	b480      	push	{r7}
 8002496:	b083      	sub	sp, #12
 8002498:	af00      	add	r7, sp, #0
 800249a:	4603      	mov	r3, r0
 800249c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800249e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	db0b      	blt.n	80024be <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80024a6:	79fb      	ldrb	r3, [r7, #7]
 80024a8:	f003 021f 	and.w	r2, r3, #31
 80024ac:	4907      	ldr	r1, [pc, #28]	@ (80024cc <__NVIC_EnableIRQ+0x38>)
 80024ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024b2:	095b      	lsrs	r3, r3, #5
 80024b4:	2001      	movs	r0, #1
 80024b6:	fa00 f202 	lsl.w	r2, r0, r2
 80024ba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80024be:	bf00      	nop
 80024c0:	370c      	adds	r7, #12
 80024c2:	46bd      	mov	sp, r7
 80024c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024c8:	4770      	bx	lr
 80024ca:	bf00      	nop
 80024cc:	e000e100 	.word	0xe000e100

080024d0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80024d0:	b480      	push	{r7}
 80024d2:	b083      	sub	sp, #12
 80024d4:	af00      	add	r7, sp, #0
 80024d6:	4603      	mov	r3, r0
 80024d8:	6039      	str	r1, [r7, #0]
 80024da:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80024dc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	db0a      	blt.n	80024fa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80024e4:	683b      	ldr	r3, [r7, #0]
 80024e6:	b2da      	uxtb	r2, r3
 80024e8:	490c      	ldr	r1, [pc, #48]	@ (800251c <__NVIC_SetPriority+0x4c>)
 80024ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024ee:	0112      	lsls	r2, r2, #4
 80024f0:	b2d2      	uxtb	r2, r2
 80024f2:	440b      	add	r3, r1
 80024f4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80024f8:	e00a      	b.n	8002510 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80024fa:	683b      	ldr	r3, [r7, #0]
 80024fc:	b2da      	uxtb	r2, r3
 80024fe:	4908      	ldr	r1, [pc, #32]	@ (8002520 <__NVIC_SetPriority+0x50>)
 8002500:	79fb      	ldrb	r3, [r7, #7]
 8002502:	f003 030f 	and.w	r3, r3, #15
 8002506:	3b04      	subs	r3, #4
 8002508:	0112      	lsls	r2, r2, #4
 800250a:	b2d2      	uxtb	r2, r2
 800250c:	440b      	add	r3, r1
 800250e:	761a      	strb	r2, [r3, #24]
}
 8002510:	bf00      	nop
 8002512:	370c      	adds	r7, #12
 8002514:	46bd      	mov	sp, r7
 8002516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800251a:	4770      	bx	lr
 800251c:	e000e100 	.word	0xe000e100
 8002520:	e000ed00 	.word	0xe000ed00

08002524 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002524:	b480      	push	{r7}
 8002526:	b089      	sub	sp, #36	@ 0x24
 8002528:	af00      	add	r7, sp, #0
 800252a:	60f8      	str	r0, [r7, #12]
 800252c:	60b9      	str	r1, [r7, #8]
 800252e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	f003 0307 	and.w	r3, r3, #7
 8002536:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002538:	69fb      	ldr	r3, [r7, #28]
 800253a:	f1c3 0307 	rsb	r3, r3, #7
 800253e:	2b04      	cmp	r3, #4
 8002540:	bf28      	it	cs
 8002542:	2304      	movcs	r3, #4
 8002544:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002546:	69fb      	ldr	r3, [r7, #28]
 8002548:	3304      	adds	r3, #4
 800254a:	2b06      	cmp	r3, #6
 800254c:	d902      	bls.n	8002554 <NVIC_EncodePriority+0x30>
 800254e:	69fb      	ldr	r3, [r7, #28]
 8002550:	3b03      	subs	r3, #3
 8002552:	e000      	b.n	8002556 <NVIC_EncodePriority+0x32>
 8002554:	2300      	movs	r3, #0
 8002556:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002558:	f04f 32ff 	mov.w	r2, #4294967295
 800255c:	69bb      	ldr	r3, [r7, #24]
 800255e:	fa02 f303 	lsl.w	r3, r2, r3
 8002562:	43da      	mvns	r2, r3
 8002564:	68bb      	ldr	r3, [r7, #8]
 8002566:	401a      	ands	r2, r3
 8002568:	697b      	ldr	r3, [r7, #20]
 800256a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800256c:	f04f 31ff 	mov.w	r1, #4294967295
 8002570:	697b      	ldr	r3, [r7, #20]
 8002572:	fa01 f303 	lsl.w	r3, r1, r3
 8002576:	43d9      	mvns	r1, r3
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800257c:	4313      	orrs	r3, r2
         );
}
 800257e:	4618      	mov	r0, r3
 8002580:	3724      	adds	r7, #36	@ 0x24
 8002582:	46bd      	mov	sp, r7
 8002584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002588:	4770      	bx	lr
	...

0800258c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800258c:	b580      	push	{r7, lr}
 800258e:	b082      	sub	sp, #8
 8002590:	af00      	add	r7, sp, #0
 8002592:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	3b01      	subs	r3, #1
 8002598:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800259c:	d301      	bcc.n	80025a2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800259e:	2301      	movs	r3, #1
 80025a0:	e00f      	b.n	80025c2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80025a2:	4a0a      	ldr	r2, [pc, #40]	@ (80025cc <SysTick_Config+0x40>)
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	3b01      	subs	r3, #1
 80025a8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80025aa:	210f      	movs	r1, #15
 80025ac:	f04f 30ff 	mov.w	r0, #4294967295
 80025b0:	f7ff ff8e 	bl	80024d0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80025b4:	4b05      	ldr	r3, [pc, #20]	@ (80025cc <SysTick_Config+0x40>)
 80025b6:	2200      	movs	r2, #0
 80025b8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80025ba:	4b04      	ldr	r3, [pc, #16]	@ (80025cc <SysTick_Config+0x40>)
 80025bc:	2207      	movs	r2, #7
 80025be:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80025c0:	2300      	movs	r3, #0
}
 80025c2:	4618      	mov	r0, r3
 80025c4:	3708      	adds	r7, #8
 80025c6:	46bd      	mov	sp, r7
 80025c8:	bd80      	pop	{r7, pc}
 80025ca:	bf00      	nop
 80025cc:	e000e010 	.word	0xe000e010

080025d0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80025d0:	b580      	push	{r7, lr}
 80025d2:	b082      	sub	sp, #8
 80025d4:	af00      	add	r7, sp, #0
 80025d6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80025d8:	6878      	ldr	r0, [r7, #4]
 80025da:	f7ff ff29 	bl	8002430 <__NVIC_SetPriorityGrouping>
}
 80025de:	bf00      	nop
 80025e0:	3708      	adds	r7, #8
 80025e2:	46bd      	mov	sp, r7
 80025e4:	bd80      	pop	{r7, pc}

080025e6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80025e6:	b580      	push	{r7, lr}
 80025e8:	b086      	sub	sp, #24
 80025ea:	af00      	add	r7, sp, #0
 80025ec:	4603      	mov	r3, r0
 80025ee:	60b9      	str	r1, [r7, #8]
 80025f0:	607a      	str	r2, [r7, #4]
 80025f2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80025f4:	2300      	movs	r3, #0
 80025f6:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80025f8:	f7ff ff3e 	bl	8002478 <__NVIC_GetPriorityGrouping>
 80025fc:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80025fe:	687a      	ldr	r2, [r7, #4]
 8002600:	68b9      	ldr	r1, [r7, #8]
 8002602:	6978      	ldr	r0, [r7, #20]
 8002604:	f7ff ff8e 	bl	8002524 <NVIC_EncodePriority>
 8002608:	4602      	mov	r2, r0
 800260a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800260e:	4611      	mov	r1, r2
 8002610:	4618      	mov	r0, r3
 8002612:	f7ff ff5d 	bl	80024d0 <__NVIC_SetPriority>
}
 8002616:	bf00      	nop
 8002618:	3718      	adds	r7, #24
 800261a:	46bd      	mov	sp, r7
 800261c:	bd80      	pop	{r7, pc}

0800261e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800261e:	b580      	push	{r7, lr}
 8002620:	b082      	sub	sp, #8
 8002622:	af00      	add	r7, sp, #0
 8002624:	4603      	mov	r3, r0
 8002626:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002628:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800262c:	4618      	mov	r0, r3
 800262e:	f7ff ff31 	bl	8002494 <__NVIC_EnableIRQ>
}
 8002632:	bf00      	nop
 8002634:	3708      	adds	r7, #8
 8002636:	46bd      	mov	sp, r7
 8002638:	bd80      	pop	{r7, pc}

0800263a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800263a:	b580      	push	{r7, lr}
 800263c:	b082      	sub	sp, #8
 800263e:	af00      	add	r7, sp, #0
 8002640:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002642:	6878      	ldr	r0, [r7, #4]
 8002644:	f7ff ffa2 	bl	800258c <SysTick_Config>
 8002648:	4603      	mov	r3, r0
}
 800264a:	4618      	mov	r0, r3
 800264c:	3708      	adds	r7, #8
 800264e:	46bd      	mov	sp, r7
 8002650:	bd80      	pop	{r7, pc}
	...

08002654 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002654:	b480      	push	{r7}
 8002656:	b085      	sub	sp, #20
 8002658:	af00      	add	r7, sp, #0
 800265a:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	2b00      	cmp	r3, #0
 8002660:	d101      	bne.n	8002666 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8002662:	2301      	movs	r3, #1
 8002664:	e098      	b.n	8002798 <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	461a      	mov	r2, r3
 800266c:	4b4d      	ldr	r3, [pc, #308]	@ (80027a4 <HAL_DMA_Init+0x150>)
 800266e:	429a      	cmp	r2, r3
 8002670:	d80f      	bhi.n	8002692 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	461a      	mov	r2, r3
 8002678:	4b4b      	ldr	r3, [pc, #300]	@ (80027a8 <HAL_DMA_Init+0x154>)
 800267a:	4413      	add	r3, r2
 800267c:	4a4b      	ldr	r2, [pc, #300]	@ (80027ac <HAL_DMA_Init+0x158>)
 800267e:	fba2 2303 	umull	r2, r3, r2, r3
 8002682:	091b      	lsrs	r3, r3, #4
 8002684:	009a      	lsls	r2, r3, #2
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	4a48      	ldr	r2, [pc, #288]	@ (80027b0 <HAL_DMA_Init+0x15c>)
 800268e:	641a      	str	r2, [r3, #64]	@ 0x40
 8002690:	e00e      	b.n	80026b0 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	461a      	mov	r2, r3
 8002698:	4b46      	ldr	r3, [pc, #280]	@ (80027b4 <HAL_DMA_Init+0x160>)
 800269a:	4413      	add	r3, r2
 800269c:	4a43      	ldr	r2, [pc, #268]	@ (80027ac <HAL_DMA_Init+0x158>)
 800269e:	fba2 2303 	umull	r2, r3, r2, r3
 80026a2:	091b      	lsrs	r3, r3, #4
 80026a4:	009a      	lsls	r2, r3, #2
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	4a42      	ldr	r2, [pc, #264]	@ (80027b8 <HAL_DMA_Init+0x164>)
 80026ae:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	2202      	movs	r2, #2
 80026b4:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 80026c6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80026ca:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 80026d4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	691b      	ldr	r3, [r3, #16]
 80026da:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80026e0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	699b      	ldr	r3, [r3, #24]
 80026e6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80026ec:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	6a1b      	ldr	r3, [r3, #32]
 80026f2:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80026f4:	68fa      	ldr	r2, [r7, #12]
 80026f6:	4313      	orrs	r3, r2
 80026f8:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	68fa      	ldr	r2, [r7, #12]
 8002700:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if (hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	689b      	ldr	r3, [r3, #8]
 8002706:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800270a:	d039      	beq.n	8002780 <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002710:	4a27      	ldr	r2, [pc, #156]	@ (80027b0 <HAL_DMA_Init+0x15c>)
 8002712:	4293      	cmp	r3, r2
 8002714:	d11a      	bne.n	800274c <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8002716:	4b29      	ldr	r3, [pc, #164]	@ (80027bc <HAL_DMA_Init+0x168>)
 8002718:	681a      	ldr	r2, [r3, #0]
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800271e:	f003 031c 	and.w	r3, r3, #28
 8002722:	210f      	movs	r1, #15
 8002724:	fa01 f303 	lsl.w	r3, r1, r3
 8002728:	43db      	mvns	r3, r3
 800272a:	4924      	ldr	r1, [pc, #144]	@ (80027bc <HAL_DMA_Init+0x168>)
 800272c:	4013      	ands	r3, r2
 800272e:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8002730:	4b22      	ldr	r3, [pc, #136]	@ (80027bc <HAL_DMA_Init+0x168>)
 8002732:	681a      	ldr	r2, [r3, #0]
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	6859      	ldr	r1, [r3, #4]
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800273c:	f003 031c 	and.w	r3, r3, #28
 8002740:	fa01 f303 	lsl.w	r3, r1, r3
 8002744:	491d      	ldr	r1, [pc, #116]	@ (80027bc <HAL_DMA_Init+0x168>)
 8002746:	4313      	orrs	r3, r2
 8002748:	600b      	str	r3, [r1, #0]
 800274a:	e019      	b.n	8002780 <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 800274c:	4b1c      	ldr	r3, [pc, #112]	@ (80027c0 <HAL_DMA_Init+0x16c>)
 800274e:	681a      	ldr	r2, [r3, #0]
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002754:	f003 031c 	and.w	r3, r3, #28
 8002758:	210f      	movs	r1, #15
 800275a:	fa01 f303 	lsl.w	r3, r1, r3
 800275e:	43db      	mvns	r3, r3
 8002760:	4917      	ldr	r1, [pc, #92]	@ (80027c0 <HAL_DMA_Init+0x16c>)
 8002762:	4013      	ands	r3, r2
 8002764:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8002766:	4b16      	ldr	r3, [pc, #88]	@ (80027c0 <HAL_DMA_Init+0x16c>)
 8002768:	681a      	ldr	r2, [r3, #0]
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	6859      	ldr	r1, [r3, #4]
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002772:	f003 031c 	and.w	r3, r3, #28
 8002776:	fa01 f303 	lsl.w	r3, r1, r3
 800277a:	4911      	ldr	r1, [pc, #68]	@ (80027c0 <HAL_DMA_Init+0x16c>)
 800277c:	4313      	orrs	r3, r2
 800277e:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
  /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
  /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	2200      	movs	r2, #0
 8002784:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	2201      	movs	r2, #1
 800278a:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	2200      	movs	r2, #0
 8002792:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8002796:	2300      	movs	r3, #0
}
 8002798:	4618      	mov	r0, r3
 800279a:	3714      	adds	r7, #20
 800279c:	46bd      	mov	sp, r7
 800279e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027a2:	4770      	bx	lr
 80027a4:	40020407 	.word	0x40020407
 80027a8:	bffdfff8 	.word	0xbffdfff8
 80027ac:	cccccccd 	.word	0xcccccccd
 80027b0:	40020000 	.word	0x40020000
 80027b4:	bffdfbf8 	.word	0xbffdfbf8
 80027b8:	40020400 	.word	0x40020400
 80027bc:	400200a8 	.word	0x400200a8
 80027c0:	400204a8 	.word	0x400204a8

080027c4 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80027c4:	b580      	push	{r7, lr}
 80027c6:	b084      	sub	sp, #16
 80027c8:	af00      	add	r7, sp, #0
 80027ca:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80027e0:	f003 031c 	and.w	r3, r3, #28
 80027e4:	2204      	movs	r2, #4
 80027e6:	409a      	lsls	r2, r3
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	4013      	ands	r3, r2
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	d026      	beq.n	800283e <HAL_DMA_IRQHandler+0x7a>
 80027f0:	68bb      	ldr	r3, [r7, #8]
 80027f2:	f003 0304 	and.w	r3, r3, #4
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d021      	beq.n	800283e <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	f003 0320 	and.w	r3, r3, #32
 8002804:	2b00      	cmp	r3, #0
 8002806:	d107      	bne.n	8002818 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	681a      	ldr	r2, [r3, #0]
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	f022 0204 	bic.w	r2, r2, #4
 8002816:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800281c:	f003 021c 	and.w	r2, r3, #28
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002824:	2104      	movs	r1, #4
 8002826:	fa01 f202 	lsl.w	r2, r1, r2
 800282a:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002830:	2b00      	cmp	r3, #0
 8002832:	d071      	beq.n	8002918 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002838:	6878      	ldr	r0, [r7, #4]
 800283a:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 800283c:	e06c      	b.n	8002918 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002842:	f003 031c 	and.w	r3, r3, #28
 8002846:	2202      	movs	r2, #2
 8002848:	409a      	lsls	r2, r3
 800284a:	68fb      	ldr	r3, [r7, #12]
 800284c:	4013      	ands	r3, r2
 800284e:	2b00      	cmp	r3, #0
 8002850:	d02e      	beq.n	80028b0 <HAL_DMA_IRQHandler+0xec>
 8002852:	68bb      	ldr	r3, [r7, #8]
 8002854:	f003 0302 	and.w	r3, r3, #2
 8002858:	2b00      	cmp	r3, #0
 800285a:	d029      	beq.n	80028b0 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	f003 0320 	and.w	r3, r3, #32
 8002866:	2b00      	cmp	r3, #0
 8002868:	d10b      	bne.n	8002882 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	681a      	ldr	r2, [r3, #0]
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	f022 020a 	bic.w	r2, r2, #10
 8002878:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	2201      	movs	r2, #1
 800287e:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002886:	f003 021c 	and.w	r2, r3, #28
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800288e:	2102      	movs	r1, #2
 8002890:	fa01 f202 	lsl.w	r2, r1, r2
 8002894:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	2200      	movs	r2, #0
 800289a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d038      	beq.n	8002918 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80028aa:	6878      	ldr	r0, [r7, #4]
 80028ac:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 80028ae:	e033      	b.n	8002918 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80028b4:	f003 031c 	and.w	r3, r3, #28
 80028b8:	2208      	movs	r2, #8
 80028ba:	409a      	lsls	r2, r3
 80028bc:	68fb      	ldr	r3, [r7, #12]
 80028be:	4013      	ands	r3, r2
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	d02a      	beq.n	800291a <HAL_DMA_IRQHandler+0x156>
 80028c4:	68bb      	ldr	r3, [r7, #8]
 80028c6:	f003 0308 	and.w	r3, r3, #8
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d025      	beq.n	800291a <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	681a      	ldr	r2, [r3, #0]
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	f022 020e 	bic.w	r2, r2, #14
 80028dc:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80028e2:	f003 021c 	and.w	r2, r3, #28
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028ea:	2101      	movs	r1, #1
 80028ec:	fa01 f202 	lsl.w	r2, r1, r2
 80028f0:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	2201      	movs	r2, #1
 80028f6:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	2201      	movs	r2, #1
 80028fc:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	2200      	movs	r2, #0
 8002904:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800290c:	2b00      	cmp	r3, #0
 800290e:	d004      	beq.n	800291a <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002914:	6878      	ldr	r0, [r7, #4]
 8002916:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8002918:	bf00      	nop
 800291a:	bf00      	nop
}
 800291c:	3710      	adds	r7, #16
 800291e:	46bd      	mov	sp, r7
 8002920:	bd80      	pop	{r7, pc}
	...

08002924 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002924:	b480      	push	{r7}
 8002926:	b087      	sub	sp, #28
 8002928:	af00      	add	r7, sp, #0
 800292a:	6078      	str	r0, [r7, #4]
 800292c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800292e:	2300      	movs	r3, #0
 8002930:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002932:	e148      	b.n	8002bc6 <HAL_GPIO_Init+0x2a2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002934:	683b      	ldr	r3, [r7, #0]
 8002936:	681a      	ldr	r2, [r3, #0]
 8002938:	2101      	movs	r1, #1
 800293a:	697b      	ldr	r3, [r7, #20]
 800293c:	fa01 f303 	lsl.w	r3, r1, r3
 8002940:	4013      	ands	r3, r2
 8002942:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	2b00      	cmp	r3, #0
 8002948:	f000 813a 	beq.w	8002bc0 <HAL_GPIO_Init+0x29c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800294c:	683b      	ldr	r3, [r7, #0]
 800294e:	685b      	ldr	r3, [r3, #4]
 8002950:	f003 0303 	and.w	r3, r3, #3
 8002954:	2b01      	cmp	r3, #1
 8002956:	d005      	beq.n	8002964 <HAL_GPIO_Init+0x40>
 8002958:	683b      	ldr	r3, [r7, #0]
 800295a:	685b      	ldr	r3, [r3, #4]
 800295c:	f003 0303 	and.w	r3, r3, #3
 8002960:	2b02      	cmp	r3, #2
 8002962:	d130      	bne.n	80029c6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	689b      	ldr	r3, [r3, #8]
 8002968:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800296a:	697b      	ldr	r3, [r7, #20]
 800296c:	005b      	lsls	r3, r3, #1
 800296e:	2203      	movs	r2, #3
 8002970:	fa02 f303 	lsl.w	r3, r2, r3
 8002974:	43db      	mvns	r3, r3
 8002976:	693a      	ldr	r2, [r7, #16]
 8002978:	4013      	ands	r3, r2
 800297a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800297c:	683b      	ldr	r3, [r7, #0]
 800297e:	68da      	ldr	r2, [r3, #12]
 8002980:	697b      	ldr	r3, [r7, #20]
 8002982:	005b      	lsls	r3, r3, #1
 8002984:	fa02 f303 	lsl.w	r3, r2, r3
 8002988:	693a      	ldr	r2, [r7, #16]
 800298a:	4313      	orrs	r3, r2
 800298c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	693a      	ldr	r2, [r7, #16]
 8002992:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	685b      	ldr	r3, [r3, #4]
 8002998:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800299a:	2201      	movs	r2, #1
 800299c:	697b      	ldr	r3, [r7, #20]
 800299e:	fa02 f303 	lsl.w	r3, r2, r3
 80029a2:	43db      	mvns	r3, r3
 80029a4:	693a      	ldr	r2, [r7, #16]
 80029a6:	4013      	ands	r3, r2
 80029a8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80029aa:	683b      	ldr	r3, [r7, #0]
 80029ac:	685b      	ldr	r3, [r3, #4]
 80029ae:	091b      	lsrs	r3, r3, #4
 80029b0:	f003 0201 	and.w	r2, r3, #1
 80029b4:	697b      	ldr	r3, [r7, #20]
 80029b6:	fa02 f303 	lsl.w	r3, r2, r3
 80029ba:	693a      	ldr	r2, [r7, #16]
 80029bc:	4313      	orrs	r3, r2
 80029be:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	693a      	ldr	r2, [r7, #16]
 80029c4:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80029c6:	683b      	ldr	r3, [r7, #0]
 80029c8:	685b      	ldr	r3, [r3, #4]
 80029ca:	f003 0303 	and.w	r3, r3, #3
 80029ce:	2b03      	cmp	r3, #3
 80029d0:	d017      	beq.n	8002a02 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	68db      	ldr	r3, [r3, #12]
 80029d6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80029d8:	697b      	ldr	r3, [r7, #20]
 80029da:	005b      	lsls	r3, r3, #1
 80029dc:	2203      	movs	r2, #3
 80029de:	fa02 f303 	lsl.w	r3, r2, r3
 80029e2:	43db      	mvns	r3, r3
 80029e4:	693a      	ldr	r2, [r7, #16]
 80029e6:	4013      	ands	r3, r2
 80029e8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80029ea:	683b      	ldr	r3, [r7, #0]
 80029ec:	689a      	ldr	r2, [r3, #8]
 80029ee:	697b      	ldr	r3, [r7, #20]
 80029f0:	005b      	lsls	r3, r3, #1
 80029f2:	fa02 f303 	lsl.w	r3, r2, r3
 80029f6:	693a      	ldr	r2, [r7, #16]
 80029f8:	4313      	orrs	r3, r2
 80029fa:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	693a      	ldr	r2, [r7, #16]
 8002a00:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002a02:	683b      	ldr	r3, [r7, #0]
 8002a04:	685b      	ldr	r3, [r3, #4]
 8002a06:	f003 0303 	and.w	r3, r3, #3
 8002a0a:	2b02      	cmp	r3, #2
 8002a0c:	d123      	bne.n	8002a56 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002a0e:	697b      	ldr	r3, [r7, #20]
 8002a10:	08da      	lsrs	r2, r3, #3
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	3208      	adds	r2, #8
 8002a16:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002a1a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002a1c:	697b      	ldr	r3, [r7, #20]
 8002a1e:	f003 0307 	and.w	r3, r3, #7
 8002a22:	009b      	lsls	r3, r3, #2
 8002a24:	220f      	movs	r2, #15
 8002a26:	fa02 f303 	lsl.w	r3, r2, r3
 8002a2a:	43db      	mvns	r3, r3
 8002a2c:	693a      	ldr	r2, [r7, #16]
 8002a2e:	4013      	ands	r3, r2
 8002a30:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002a32:	683b      	ldr	r3, [r7, #0]
 8002a34:	691a      	ldr	r2, [r3, #16]
 8002a36:	697b      	ldr	r3, [r7, #20]
 8002a38:	f003 0307 	and.w	r3, r3, #7
 8002a3c:	009b      	lsls	r3, r3, #2
 8002a3e:	fa02 f303 	lsl.w	r3, r2, r3
 8002a42:	693a      	ldr	r2, [r7, #16]
 8002a44:	4313      	orrs	r3, r2
 8002a46:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002a48:	697b      	ldr	r3, [r7, #20]
 8002a4a:	08da      	lsrs	r2, r3, #3
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	3208      	adds	r2, #8
 8002a50:	6939      	ldr	r1, [r7, #16]
 8002a52:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002a5c:	697b      	ldr	r3, [r7, #20]
 8002a5e:	005b      	lsls	r3, r3, #1
 8002a60:	2203      	movs	r2, #3
 8002a62:	fa02 f303 	lsl.w	r3, r2, r3
 8002a66:	43db      	mvns	r3, r3
 8002a68:	693a      	ldr	r2, [r7, #16]
 8002a6a:	4013      	ands	r3, r2
 8002a6c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002a6e:	683b      	ldr	r3, [r7, #0]
 8002a70:	685b      	ldr	r3, [r3, #4]
 8002a72:	f003 0203 	and.w	r2, r3, #3
 8002a76:	697b      	ldr	r3, [r7, #20]
 8002a78:	005b      	lsls	r3, r3, #1
 8002a7a:	fa02 f303 	lsl.w	r3, r2, r3
 8002a7e:	693a      	ldr	r2, [r7, #16]
 8002a80:	4313      	orrs	r3, r2
 8002a82:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	693a      	ldr	r2, [r7, #16]
 8002a88:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002a8a:	683b      	ldr	r3, [r7, #0]
 8002a8c:	685b      	ldr	r3, [r3, #4]
 8002a8e:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	f000 8094 	beq.w	8002bc0 <HAL_GPIO_Init+0x29c>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002a98:	4b52      	ldr	r3, [pc, #328]	@ (8002be4 <HAL_GPIO_Init+0x2c0>)
 8002a9a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002a9c:	4a51      	ldr	r2, [pc, #324]	@ (8002be4 <HAL_GPIO_Init+0x2c0>)
 8002a9e:	f043 0301 	orr.w	r3, r3, #1
 8002aa2:	6613      	str	r3, [r2, #96]	@ 0x60
 8002aa4:	4b4f      	ldr	r3, [pc, #316]	@ (8002be4 <HAL_GPIO_Init+0x2c0>)
 8002aa6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002aa8:	f003 0301 	and.w	r3, r3, #1
 8002aac:	60bb      	str	r3, [r7, #8]
 8002aae:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002ab0:	4a4d      	ldr	r2, [pc, #308]	@ (8002be8 <HAL_GPIO_Init+0x2c4>)
 8002ab2:	697b      	ldr	r3, [r7, #20]
 8002ab4:	089b      	lsrs	r3, r3, #2
 8002ab6:	3302      	adds	r3, #2
 8002ab8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002abc:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002abe:	697b      	ldr	r3, [r7, #20]
 8002ac0:	f003 0303 	and.w	r3, r3, #3
 8002ac4:	009b      	lsls	r3, r3, #2
 8002ac6:	220f      	movs	r2, #15
 8002ac8:	fa02 f303 	lsl.w	r3, r2, r3
 8002acc:	43db      	mvns	r3, r3
 8002ace:	693a      	ldr	r2, [r7, #16]
 8002ad0:	4013      	ands	r3, r2
 8002ad2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8002ada:	d00d      	beq.n	8002af8 <HAL_GPIO_Init+0x1d4>
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	4a43      	ldr	r2, [pc, #268]	@ (8002bec <HAL_GPIO_Init+0x2c8>)
 8002ae0:	4293      	cmp	r3, r2
 8002ae2:	d007      	beq.n	8002af4 <HAL_GPIO_Init+0x1d0>
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	4a42      	ldr	r2, [pc, #264]	@ (8002bf0 <HAL_GPIO_Init+0x2cc>)
 8002ae8:	4293      	cmp	r3, r2
 8002aea:	d101      	bne.n	8002af0 <HAL_GPIO_Init+0x1cc>
 8002aec:	2302      	movs	r3, #2
 8002aee:	e004      	b.n	8002afa <HAL_GPIO_Init+0x1d6>
 8002af0:	2307      	movs	r3, #7
 8002af2:	e002      	b.n	8002afa <HAL_GPIO_Init+0x1d6>
 8002af4:	2301      	movs	r3, #1
 8002af6:	e000      	b.n	8002afa <HAL_GPIO_Init+0x1d6>
 8002af8:	2300      	movs	r3, #0
 8002afa:	697a      	ldr	r2, [r7, #20]
 8002afc:	f002 0203 	and.w	r2, r2, #3
 8002b00:	0092      	lsls	r2, r2, #2
 8002b02:	4093      	lsls	r3, r2
 8002b04:	693a      	ldr	r2, [r7, #16]
 8002b06:	4313      	orrs	r3, r2
 8002b08:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002b0a:	4937      	ldr	r1, [pc, #220]	@ (8002be8 <HAL_GPIO_Init+0x2c4>)
 8002b0c:	697b      	ldr	r3, [r7, #20]
 8002b0e:	089b      	lsrs	r3, r3, #2
 8002b10:	3302      	adds	r3, #2
 8002b12:	693a      	ldr	r2, [r7, #16]
 8002b14:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002b18:	4b36      	ldr	r3, [pc, #216]	@ (8002bf4 <HAL_GPIO_Init+0x2d0>)
 8002b1a:	689b      	ldr	r3, [r3, #8]
 8002b1c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	43db      	mvns	r3, r3
 8002b22:	693a      	ldr	r2, [r7, #16]
 8002b24:	4013      	ands	r3, r2
 8002b26:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002b28:	683b      	ldr	r3, [r7, #0]
 8002b2a:	685b      	ldr	r3, [r3, #4]
 8002b2c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	d003      	beq.n	8002b3c <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 8002b34:	693a      	ldr	r2, [r7, #16]
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	4313      	orrs	r3, r2
 8002b3a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002b3c:	4a2d      	ldr	r2, [pc, #180]	@ (8002bf4 <HAL_GPIO_Init+0x2d0>)
 8002b3e:	693b      	ldr	r3, [r7, #16]
 8002b40:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002b42:	4b2c      	ldr	r3, [pc, #176]	@ (8002bf4 <HAL_GPIO_Init+0x2d0>)
 8002b44:	68db      	ldr	r3, [r3, #12]
 8002b46:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	43db      	mvns	r3, r3
 8002b4c:	693a      	ldr	r2, [r7, #16]
 8002b4e:	4013      	ands	r3, r2
 8002b50:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002b52:	683b      	ldr	r3, [r7, #0]
 8002b54:	685b      	ldr	r3, [r3, #4]
 8002b56:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d003      	beq.n	8002b66 <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 8002b5e:	693a      	ldr	r2, [r7, #16]
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	4313      	orrs	r3, r2
 8002b64:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002b66:	4a23      	ldr	r2, [pc, #140]	@ (8002bf4 <HAL_GPIO_Init+0x2d0>)
 8002b68:	693b      	ldr	r3, [r7, #16]
 8002b6a:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8002b6c:	4b21      	ldr	r3, [pc, #132]	@ (8002bf4 <HAL_GPIO_Init+0x2d0>)
 8002b6e:	685b      	ldr	r3, [r3, #4]
 8002b70:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002b72:	68fb      	ldr	r3, [r7, #12]
 8002b74:	43db      	mvns	r3, r3
 8002b76:	693a      	ldr	r2, [r7, #16]
 8002b78:	4013      	ands	r3, r2
 8002b7a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002b7c:	683b      	ldr	r3, [r7, #0]
 8002b7e:	685b      	ldr	r3, [r3, #4]
 8002b80:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	d003      	beq.n	8002b90 <HAL_GPIO_Init+0x26c>
        {
          temp |= iocurrent;
 8002b88:	693a      	ldr	r2, [r7, #16]
 8002b8a:	68fb      	ldr	r3, [r7, #12]
 8002b8c:	4313      	orrs	r3, r2
 8002b8e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002b90:	4a18      	ldr	r2, [pc, #96]	@ (8002bf4 <HAL_GPIO_Init+0x2d0>)
 8002b92:	693b      	ldr	r3, [r7, #16]
 8002b94:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8002b96:	4b17      	ldr	r3, [pc, #92]	@ (8002bf4 <HAL_GPIO_Init+0x2d0>)
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	43db      	mvns	r3, r3
 8002ba0:	693a      	ldr	r2, [r7, #16]
 8002ba2:	4013      	ands	r3, r2
 8002ba4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002ba6:	683b      	ldr	r3, [r7, #0]
 8002ba8:	685b      	ldr	r3, [r3, #4]
 8002baa:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d003      	beq.n	8002bba <HAL_GPIO_Init+0x296>
        {
          temp |= iocurrent;
 8002bb2:	693a      	ldr	r2, [r7, #16]
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	4313      	orrs	r3, r2
 8002bb8:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002bba:	4a0e      	ldr	r2, [pc, #56]	@ (8002bf4 <HAL_GPIO_Init+0x2d0>)
 8002bbc:	693b      	ldr	r3, [r7, #16]
 8002bbe:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002bc0:	697b      	ldr	r3, [r7, #20]
 8002bc2:	3301      	adds	r3, #1
 8002bc4:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002bc6:	683b      	ldr	r3, [r7, #0]
 8002bc8:	681a      	ldr	r2, [r3, #0]
 8002bca:	697b      	ldr	r3, [r7, #20]
 8002bcc:	fa22 f303 	lsr.w	r3, r2, r3
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	f47f aeaf 	bne.w	8002934 <HAL_GPIO_Init+0x10>
  }
}
 8002bd6:	bf00      	nop
 8002bd8:	bf00      	nop
 8002bda:	371c      	adds	r7, #28
 8002bdc:	46bd      	mov	sp, r7
 8002bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002be2:	4770      	bx	lr
 8002be4:	40021000 	.word	0x40021000
 8002be8:	40010000 	.word	0x40010000
 8002bec:	48000400 	.word	0x48000400
 8002bf0:	48000800 	.word	0x48000800
 8002bf4:	40010400 	.word	0x40010400

08002bf8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002bf8:	b480      	push	{r7}
 8002bfa:	b083      	sub	sp, #12
 8002bfc:	af00      	add	r7, sp, #0
 8002bfe:	6078      	str	r0, [r7, #4]
 8002c00:	460b      	mov	r3, r1
 8002c02:	807b      	strh	r3, [r7, #2]
 8002c04:	4613      	mov	r3, r2
 8002c06:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002c08:	787b      	ldrb	r3, [r7, #1]
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d003      	beq.n	8002c16 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002c0e:	887a      	ldrh	r2, [r7, #2]
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002c14:	e002      	b.n	8002c1c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002c16:	887a      	ldrh	r2, [r7, #2]
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8002c1c:	bf00      	nop
 8002c1e:	370c      	adds	r7, #12
 8002c20:	46bd      	mov	sp, r7
 8002c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c26:	4770      	bx	lr

08002c28 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002c28:	b580      	push	{r7, lr}
 8002c2a:	b082      	sub	sp, #8
 8002c2c:	af00      	add	r7, sp, #0
 8002c2e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d101      	bne.n	8002c3a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002c36:	2301      	movs	r3, #1
 8002c38:	e08d      	b.n	8002d56 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002c40:	b2db      	uxtb	r3, r3
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d106      	bne.n	8002c54 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	2200      	movs	r2, #0
 8002c4a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002c4e:	6878      	ldr	r0, [r7, #4]
 8002c50:	f7ff f836 	bl	8001cc0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	2224      	movs	r2, #36	@ 0x24
 8002c58:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	681a      	ldr	r2, [r3, #0]
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	f022 0201 	bic.w	r2, r2, #1
 8002c6a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	685a      	ldr	r2, [r3, #4]
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8002c78:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	689a      	ldr	r2, [r3, #8]
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002c88:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	68db      	ldr	r3, [r3, #12]
 8002c8e:	2b01      	cmp	r3, #1
 8002c90:	d107      	bne.n	8002ca2 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	689a      	ldr	r2, [r3, #8]
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002c9e:	609a      	str	r2, [r3, #8]
 8002ca0:	e006      	b.n	8002cb0 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	689a      	ldr	r2, [r3, #8]
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8002cae:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	68db      	ldr	r3, [r3, #12]
 8002cb4:	2b02      	cmp	r3, #2
 8002cb6:	d108      	bne.n	8002cca <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	685a      	ldr	r2, [r3, #4]
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002cc6:	605a      	str	r2, [r3, #4]
 8002cc8:	e007      	b.n	8002cda <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	685a      	ldr	r2, [r3, #4]
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002cd8:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	685b      	ldr	r3, [r3, #4]
 8002ce0:	687a      	ldr	r2, [r7, #4]
 8002ce2:	6812      	ldr	r2, [r2, #0]
 8002ce4:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8002ce8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002cec:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	68da      	ldr	r2, [r3, #12]
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002cfc:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	691a      	ldr	r2, [r3, #16]
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	695b      	ldr	r3, [r3, #20]
 8002d06:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	699b      	ldr	r3, [r3, #24]
 8002d0e:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	430a      	orrs	r2, r1
 8002d16:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	69d9      	ldr	r1, [r3, #28]
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	6a1a      	ldr	r2, [r3, #32]
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	430a      	orrs	r2, r1
 8002d26:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	681a      	ldr	r2, [r3, #0]
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	f042 0201 	orr.w	r2, r2, #1
 8002d36:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	2200      	movs	r2, #0
 8002d3c:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	2220      	movs	r2, #32
 8002d42:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	2200      	movs	r2, #0
 8002d4a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	2200      	movs	r2, #0
 8002d50:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8002d54:	2300      	movs	r3, #0
}
 8002d56:	4618      	mov	r0, r3
 8002d58:	3708      	adds	r7, #8
 8002d5a:	46bd      	mov	sp, r7
 8002d5c:	bd80      	pop	{r7, pc}
	...

08002d60 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002d60:	b580      	push	{r7, lr}
 8002d62:	b088      	sub	sp, #32
 8002d64:	af02      	add	r7, sp, #8
 8002d66:	60f8      	str	r0, [r7, #12]
 8002d68:	4608      	mov	r0, r1
 8002d6a:	4611      	mov	r1, r2
 8002d6c:	461a      	mov	r2, r3
 8002d6e:	4603      	mov	r3, r0
 8002d70:	817b      	strh	r3, [r7, #10]
 8002d72:	460b      	mov	r3, r1
 8002d74:	813b      	strh	r3, [r7, #8]
 8002d76:	4613      	mov	r3, r2
 8002d78:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002d80:	b2db      	uxtb	r3, r3
 8002d82:	2b20      	cmp	r3, #32
 8002d84:	f040 80f9 	bne.w	8002f7a <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002d88:	6a3b      	ldr	r3, [r7, #32]
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d002      	beq.n	8002d94 <HAL_I2C_Mem_Write+0x34>
 8002d8e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	d105      	bne.n	8002da0 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002d9a:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8002d9c:	2301      	movs	r3, #1
 8002d9e:	e0ed      	b.n	8002f7c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002da6:	2b01      	cmp	r3, #1
 8002da8:	d101      	bne.n	8002dae <HAL_I2C_Mem_Write+0x4e>
 8002daa:	2302      	movs	r3, #2
 8002dac:	e0e6      	b.n	8002f7c <HAL_I2C_Mem_Write+0x21c>
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	2201      	movs	r2, #1
 8002db2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002db6:	f7ff fb0b 	bl	80023d0 <HAL_GetTick>
 8002dba:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002dbc:	697b      	ldr	r3, [r7, #20]
 8002dbe:	9300      	str	r3, [sp, #0]
 8002dc0:	2319      	movs	r3, #25
 8002dc2:	2201      	movs	r2, #1
 8002dc4:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8002dc8:	68f8      	ldr	r0, [r7, #12]
 8002dca:	f000 fadd 	bl	8003388 <I2C_WaitOnFlagUntilTimeout>
 8002dce:	4603      	mov	r3, r0
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	d001      	beq.n	8002dd8 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8002dd4:	2301      	movs	r3, #1
 8002dd6:	e0d1      	b.n	8002f7c <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	2221      	movs	r2, #33	@ 0x21
 8002ddc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	2240      	movs	r2, #64	@ 0x40
 8002de4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	2200      	movs	r2, #0
 8002dec:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	6a3a      	ldr	r2, [r7, #32]
 8002df2:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8002df8:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8002dfa:	68fb      	ldr	r3, [r7, #12]
 8002dfc:	2200      	movs	r2, #0
 8002dfe:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002e00:	88f8      	ldrh	r0, [r7, #6]
 8002e02:	893a      	ldrh	r2, [r7, #8]
 8002e04:	8979      	ldrh	r1, [r7, #10]
 8002e06:	697b      	ldr	r3, [r7, #20]
 8002e08:	9301      	str	r3, [sp, #4]
 8002e0a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002e0c:	9300      	str	r3, [sp, #0]
 8002e0e:	4603      	mov	r3, r0
 8002e10:	68f8      	ldr	r0, [r7, #12]
 8002e12:	f000 f9ed 	bl	80031f0 <I2C_RequestMemoryWrite>
 8002e16:	4603      	mov	r3, r0
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	d005      	beq.n	8002e28 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	2200      	movs	r2, #0
 8002e20:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8002e24:	2301      	movs	r3, #1
 8002e26:	e0a9      	b.n	8002f7c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002e2c:	b29b      	uxth	r3, r3
 8002e2e:	2bff      	cmp	r3, #255	@ 0xff
 8002e30:	d90e      	bls.n	8002e50 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	22ff      	movs	r2, #255	@ 0xff
 8002e36:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002e3c:	b2da      	uxtb	r2, r3
 8002e3e:	8979      	ldrh	r1, [r7, #10]
 8002e40:	2300      	movs	r3, #0
 8002e42:	9300      	str	r3, [sp, #0]
 8002e44:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002e48:	68f8      	ldr	r0, [r7, #12]
 8002e4a:	f000 fc57 	bl	80036fc <I2C_TransferConfig>
 8002e4e:	e00f      	b.n	8002e70 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002e54:	b29a      	uxth	r2, r3
 8002e56:	68fb      	ldr	r3, [r7, #12]
 8002e58:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002e5e:	b2da      	uxtb	r2, r3
 8002e60:	8979      	ldrh	r1, [r7, #10]
 8002e62:	2300      	movs	r3, #0
 8002e64:	9300      	str	r3, [sp, #0]
 8002e66:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002e6a:	68f8      	ldr	r0, [r7, #12]
 8002e6c:	f000 fc46 	bl	80036fc <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002e70:	697a      	ldr	r2, [r7, #20]
 8002e72:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002e74:	68f8      	ldr	r0, [r7, #12]
 8002e76:	f000 fad6 	bl	8003426 <I2C_WaitOnTXISFlagUntilTimeout>
 8002e7a:	4603      	mov	r3, r0
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	d001      	beq.n	8002e84 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8002e80:	2301      	movs	r3, #1
 8002e82:	e07b      	b.n	8002f7c <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e88:	781a      	ldrb	r2, [r3, #0]
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e94:	1c5a      	adds	r2, r3, #1
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002e9e:	b29b      	uxth	r3, r3
 8002ea0:	3b01      	subs	r3, #1
 8002ea2:	b29a      	uxth	r2, r3
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002eac:	3b01      	subs	r3, #1
 8002eae:	b29a      	uxth	r2, r3
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002eb8:	b29b      	uxth	r3, r3
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d034      	beq.n	8002f28 <HAL_I2C_Mem_Write+0x1c8>
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d130      	bne.n	8002f28 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002ec6:	697b      	ldr	r3, [r7, #20]
 8002ec8:	9300      	str	r3, [sp, #0]
 8002eca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002ecc:	2200      	movs	r2, #0
 8002ece:	2180      	movs	r1, #128	@ 0x80
 8002ed0:	68f8      	ldr	r0, [r7, #12]
 8002ed2:	f000 fa59 	bl	8003388 <I2C_WaitOnFlagUntilTimeout>
 8002ed6:	4603      	mov	r3, r0
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	d001      	beq.n	8002ee0 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8002edc:	2301      	movs	r3, #1
 8002ede:	e04d      	b.n	8002f7c <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002ee4:	b29b      	uxth	r3, r3
 8002ee6:	2bff      	cmp	r3, #255	@ 0xff
 8002ee8:	d90e      	bls.n	8002f08 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	22ff      	movs	r2, #255	@ 0xff
 8002eee:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002ef4:	b2da      	uxtb	r2, r3
 8002ef6:	8979      	ldrh	r1, [r7, #10]
 8002ef8:	2300      	movs	r3, #0
 8002efa:	9300      	str	r3, [sp, #0]
 8002efc:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002f00:	68f8      	ldr	r0, [r7, #12]
 8002f02:	f000 fbfb 	bl	80036fc <I2C_TransferConfig>
 8002f06:	e00f      	b.n	8002f28 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002f0c:	b29a      	uxth	r2, r3
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002f16:	b2da      	uxtb	r2, r3
 8002f18:	8979      	ldrh	r1, [r7, #10]
 8002f1a:	2300      	movs	r3, #0
 8002f1c:	9300      	str	r3, [sp, #0]
 8002f1e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002f22:	68f8      	ldr	r0, [r7, #12]
 8002f24:	f000 fbea 	bl	80036fc <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002f2c:	b29b      	uxth	r3, r3
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d19e      	bne.n	8002e70 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002f32:	697a      	ldr	r2, [r7, #20]
 8002f34:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002f36:	68f8      	ldr	r0, [r7, #12]
 8002f38:	f000 fabc 	bl	80034b4 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002f3c:	4603      	mov	r3, r0
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d001      	beq.n	8002f46 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8002f42:	2301      	movs	r3, #1
 8002f44:	e01a      	b.n	8002f7c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	2220      	movs	r2, #32
 8002f4c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	6859      	ldr	r1, [r3, #4]
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	681a      	ldr	r2, [r3, #0]
 8002f58:	4b0a      	ldr	r3, [pc, #40]	@ (8002f84 <HAL_I2C_Mem_Write+0x224>)
 8002f5a:	400b      	ands	r3, r1
 8002f5c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	2220      	movs	r2, #32
 8002f62:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	2200      	movs	r2, #0
 8002f6a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002f6e:	68fb      	ldr	r3, [r7, #12]
 8002f70:	2200      	movs	r2, #0
 8002f72:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8002f76:	2300      	movs	r3, #0
 8002f78:	e000      	b.n	8002f7c <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8002f7a:	2302      	movs	r3, #2
  }
}
 8002f7c:	4618      	mov	r0, r3
 8002f7e:	3718      	adds	r7, #24
 8002f80:	46bd      	mov	sp, r7
 8002f82:	bd80      	pop	{r7, pc}
 8002f84:	fe00e800 	.word	0xfe00e800

08002f88 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002f88:	b580      	push	{r7, lr}
 8002f8a:	b088      	sub	sp, #32
 8002f8c:	af02      	add	r7, sp, #8
 8002f8e:	60f8      	str	r0, [r7, #12]
 8002f90:	4608      	mov	r0, r1
 8002f92:	4611      	mov	r1, r2
 8002f94:	461a      	mov	r2, r3
 8002f96:	4603      	mov	r3, r0
 8002f98:	817b      	strh	r3, [r7, #10]
 8002f9a:	460b      	mov	r3, r1
 8002f9c:	813b      	strh	r3, [r7, #8]
 8002f9e:	4613      	mov	r3, r2
 8002fa0:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002fa8:	b2db      	uxtb	r3, r3
 8002faa:	2b20      	cmp	r3, #32
 8002fac:	f040 80fd 	bne.w	80031aa <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8002fb0:	6a3b      	ldr	r3, [r7, #32]
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d002      	beq.n	8002fbc <HAL_I2C_Mem_Read+0x34>
 8002fb6:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	d105      	bne.n	8002fc8 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002fc2:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8002fc4:	2301      	movs	r3, #1
 8002fc6:	e0f1      	b.n	80031ac <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002fce:	2b01      	cmp	r3, #1
 8002fd0:	d101      	bne.n	8002fd6 <HAL_I2C_Mem_Read+0x4e>
 8002fd2:	2302      	movs	r3, #2
 8002fd4:	e0ea      	b.n	80031ac <HAL_I2C_Mem_Read+0x224>
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	2201      	movs	r2, #1
 8002fda:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002fde:	f7ff f9f7 	bl	80023d0 <HAL_GetTick>
 8002fe2:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002fe4:	697b      	ldr	r3, [r7, #20]
 8002fe6:	9300      	str	r3, [sp, #0]
 8002fe8:	2319      	movs	r3, #25
 8002fea:	2201      	movs	r2, #1
 8002fec:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8002ff0:	68f8      	ldr	r0, [r7, #12]
 8002ff2:	f000 f9c9 	bl	8003388 <I2C_WaitOnFlagUntilTimeout>
 8002ff6:	4603      	mov	r3, r0
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	d001      	beq.n	8003000 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8002ffc:	2301      	movs	r3, #1
 8002ffe:	e0d5      	b.n	80031ac <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	2222      	movs	r2, #34	@ 0x22
 8003004:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	2240      	movs	r2, #64	@ 0x40
 800300c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	2200      	movs	r2, #0
 8003014:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	6a3a      	ldr	r2, [r7, #32]
 800301a:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8003020:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	2200      	movs	r2, #0
 8003026:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003028:	88f8      	ldrh	r0, [r7, #6]
 800302a:	893a      	ldrh	r2, [r7, #8]
 800302c:	8979      	ldrh	r1, [r7, #10]
 800302e:	697b      	ldr	r3, [r7, #20]
 8003030:	9301      	str	r3, [sp, #4]
 8003032:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003034:	9300      	str	r3, [sp, #0]
 8003036:	4603      	mov	r3, r0
 8003038:	68f8      	ldr	r0, [r7, #12]
 800303a:	f000 f92d 	bl	8003298 <I2C_RequestMemoryRead>
 800303e:	4603      	mov	r3, r0
 8003040:	2b00      	cmp	r3, #0
 8003042:	d005      	beq.n	8003050 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	2200      	movs	r2, #0
 8003048:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 800304c:	2301      	movs	r3, #1
 800304e:	e0ad      	b.n	80031ac <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003054:	b29b      	uxth	r3, r3
 8003056:	2bff      	cmp	r3, #255	@ 0xff
 8003058:	d90e      	bls.n	8003078 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	22ff      	movs	r2, #255	@ 0xff
 800305e:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003064:	b2da      	uxtb	r2, r3
 8003066:	8979      	ldrh	r1, [r7, #10]
 8003068:	4b52      	ldr	r3, [pc, #328]	@ (80031b4 <HAL_I2C_Mem_Read+0x22c>)
 800306a:	9300      	str	r3, [sp, #0]
 800306c:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8003070:	68f8      	ldr	r0, [r7, #12]
 8003072:	f000 fb43 	bl	80036fc <I2C_TransferConfig>
 8003076:	e00f      	b.n	8003098 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800307c:	b29a      	uxth	r2, r3
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003086:	b2da      	uxtb	r2, r3
 8003088:	8979      	ldrh	r1, [r7, #10]
 800308a:	4b4a      	ldr	r3, [pc, #296]	@ (80031b4 <HAL_I2C_Mem_Read+0x22c>)
 800308c:	9300      	str	r3, [sp, #0]
 800308e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003092:	68f8      	ldr	r0, [r7, #12]
 8003094:	f000 fb32 	bl	80036fc <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8003098:	697b      	ldr	r3, [r7, #20]
 800309a:	9300      	str	r3, [sp, #0]
 800309c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800309e:	2200      	movs	r2, #0
 80030a0:	2104      	movs	r1, #4
 80030a2:	68f8      	ldr	r0, [r7, #12]
 80030a4:	f000 f970 	bl	8003388 <I2C_WaitOnFlagUntilTimeout>
 80030a8:	4603      	mov	r3, r0
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d001      	beq.n	80030b2 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 80030ae:	2301      	movs	r3, #1
 80030b0:	e07c      	b.n	80031ac <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80030bc:	b2d2      	uxtb	r2, r2
 80030be:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80030c4:	1c5a      	adds	r2, r3, #1
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80030ce:	3b01      	subs	r3, #1
 80030d0:	b29a      	uxth	r2, r3
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80030da:	b29b      	uxth	r3, r3
 80030dc:	3b01      	subs	r3, #1
 80030de:	b29a      	uxth	r2, r3
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80030e8:	b29b      	uxth	r3, r3
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d034      	beq.n	8003158 <HAL_I2C_Mem_Read+0x1d0>
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d130      	bne.n	8003158 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80030f6:	697b      	ldr	r3, [r7, #20]
 80030f8:	9300      	str	r3, [sp, #0]
 80030fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80030fc:	2200      	movs	r2, #0
 80030fe:	2180      	movs	r1, #128	@ 0x80
 8003100:	68f8      	ldr	r0, [r7, #12]
 8003102:	f000 f941 	bl	8003388 <I2C_WaitOnFlagUntilTimeout>
 8003106:	4603      	mov	r3, r0
 8003108:	2b00      	cmp	r3, #0
 800310a:	d001      	beq.n	8003110 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 800310c:	2301      	movs	r3, #1
 800310e:	e04d      	b.n	80031ac <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003114:	b29b      	uxth	r3, r3
 8003116:	2bff      	cmp	r3, #255	@ 0xff
 8003118:	d90e      	bls.n	8003138 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	22ff      	movs	r2, #255	@ 0xff
 800311e:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003124:	b2da      	uxtb	r2, r3
 8003126:	8979      	ldrh	r1, [r7, #10]
 8003128:	2300      	movs	r3, #0
 800312a:	9300      	str	r3, [sp, #0]
 800312c:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8003130:	68f8      	ldr	r0, [r7, #12]
 8003132:	f000 fae3 	bl	80036fc <I2C_TransferConfig>
 8003136:	e00f      	b.n	8003158 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800313c:	b29a      	uxth	r2, r3
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003146:	b2da      	uxtb	r2, r3
 8003148:	8979      	ldrh	r1, [r7, #10]
 800314a:	2300      	movs	r3, #0
 800314c:	9300      	str	r3, [sp, #0]
 800314e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003152:	68f8      	ldr	r0, [r7, #12]
 8003154:	f000 fad2 	bl	80036fc <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800315c:	b29b      	uxth	r3, r3
 800315e:	2b00      	cmp	r3, #0
 8003160:	d19a      	bne.n	8003098 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003162:	697a      	ldr	r2, [r7, #20]
 8003164:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003166:	68f8      	ldr	r0, [r7, #12]
 8003168:	f000 f9a4 	bl	80034b4 <I2C_WaitOnSTOPFlagUntilTimeout>
 800316c:	4603      	mov	r3, r0
 800316e:	2b00      	cmp	r3, #0
 8003170:	d001      	beq.n	8003176 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8003172:	2301      	movs	r3, #1
 8003174:	e01a      	b.n	80031ac <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	2220      	movs	r2, #32
 800317c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	6859      	ldr	r1, [r3, #4]
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	681a      	ldr	r2, [r3, #0]
 8003188:	4b0b      	ldr	r3, [pc, #44]	@ (80031b8 <HAL_I2C_Mem_Read+0x230>)
 800318a:	400b      	ands	r3, r1
 800318c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	2220      	movs	r2, #32
 8003192:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	2200      	movs	r2, #0
 800319a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	2200      	movs	r2, #0
 80031a2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80031a6:	2300      	movs	r3, #0
 80031a8:	e000      	b.n	80031ac <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 80031aa:	2302      	movs	r3, #2
  }
}
 80031ac:	4618      	mov	r0, r3
 80031ae:	3718      	adds	r7, #24
 80031b0:	46bd      	mov	sp, r7
 80031b2:	bd80      	pop	{r7, pc}
 80031b4:	80002400 	.word	0x80002400
 80031b8:	fe00e800 	.word	0xfe00e800

080031bc <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c) /* Derogation MISRAC2012-Rule-8.13 */
{
 80031bc:	b580      	push	{r7, lr}
 80031be:	b084      	sub	sp, #16
 80031c0:	af00      	add	r7, sp, #0
 80031c2:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	699b      	ldr	r3, [r3, #24]
 80031ca:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80031d8:	2b00      	cmp	r3, #0
 80031da:	d005      	beq.n	80031e8 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80031e0:	68ba      	ldr	r2, [r7, #8]
 80031e2:	68f9      	ldr	r1, [r7, #12]
 80031e4:	6878      	ldr	r0, [r7, #4]
 80031e6:	4798      	blx	r3
  }
}
 80031e8:	bf00      	nop
 80031ea:	3710      	adds	r7, #16
 80031ec:	46bd      	mov	sp, r7
 80031ee:	bd80      	pop	{r7, pc}

080031f0 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 80031f0:	b580      	push	{r7, lr}
 80031f2:	b086      	sub	sp, #24
 80031f4:	af02      	add	r7, sp, #8
 80031f6:	60f8      	str	r0, [r7, #12]
 80031f8:	4608      	mov	r0, r1
 80031fa:	4611      	mov	r1, r2
 80031fc:	461a      	mov	r2, r3
 80031fe:	4603      	mov	r3, r0
 8003200:	817b      	strh	r3, [r7, #10]
 8003202:	460b      	mov	r3, r1
 8003204:	813b      	strh	r3, [r7, #8]
 8003206:	4613      	mov	r3, r2
 8003208:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800320a:	88fb      	ldrh	r3, [r7, #6]
 800320c:	b2da      	uxtb	r2, r3
 800320e:	8979      	ldrh	r1, [r7, #10]
 8003210:	4b20      	ldr	r3, [pc, #128]	@ (8003294 <I2C_RequestMemoryWrite+0xa4>)
 8003212:	9300      	str	r3, [sp, #0]
 8003214:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8003218:	68f8      	ldr	r0, [r7, #12]
 800321a:	f000 fa6f 	bl	80036fc <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800321e:	69fa      	ldr	r2, [r7, #28]
 8003220:	69b9      	ldr	r1, [r7, #24]
 8003222:	68f8      	ldr	r0, [r7, #12]
 8003224:	f000 f8ff 	bl	8003426 <I2C_WaitOnTXISFlagUntilTimeout>
 8003228:	4603      	mov	r3, r0
 800322a:	2b00      	cmp	r3, #0
 800322c:	d001      	beq.n	8003232 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 800322e:	2301      	movs	r3, #1
 8003230:	e02c      	b.n	800328c <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003232:	88fb      	ldrh	r3, [r7, #6]
 8003234:	2b01      	cmp	r3, #1
 8003236:	d105      	bne.n	8003244 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003238:	893b      	ldrh	r3, [r7, #8]
 800323a:	b2da      	uxtb	r2, r3
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	629a      	str	r2, [r3, #40]	@ 0x28
 8003242:	e015      	b.n	8003270 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8003244:	893b      	ldrh	r3, [r7, #8]
 8003246:	0a1b      	lsrs	r3, r3, #8
 8003248:	b29b      	uxth	r3, r3
 800324a:	b2da      	uxtb	r2, r3
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003252:	69fa      	ldr	r2, [r7, #28]
 8003254:	69b9      	ldr	r1, [r7, #24]
 8003256:	68f8      	ldr	r0, [r7, #12]
 8003258:	f000 f8e5 	bl	8003426 <I2C_WaitOnTXISFlagUntilTimeout>
 800325c:	4603      	mov	r3, r0
 800325e:	2b00      	cmp	r3, #0
 8003260:	d001      	beq.n	8003266 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8003262:	2301      	movs	r3, #1
 8003264:	e012      	b.n	800328c <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003266:	893b      	ldrh	r3, [r7, #8]
 8003268:	b2da      	uxtb	r2, r3
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8003270:	69fb      	ldr	r3, [r7, #28]
 8003272:	9300      	str	r3, [sp, #0]
 8003274:	69bb      	ldr	r3, [r7, #24]
 8003276:	2200      	movs	r2, #0
 8003278:	2180      	movs	r1, #128	@ 0x80
 800327a:	68f8      	ldr	r0, [r7, #12]
 800327c:	f000 f884 	bl	8003388 <I2C_WaitOnFlagUntilTimeout>
 8003280:	4603      	mov	r3, r0
 8003282:	2b00      	cmp	r3, #0
 8003284:	d001      	beq.n	800328a <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8003286:	2301      	movs	r3, #1
 8003288:	e000      	b.n	800328c <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 800328a:	2300      	movs	r3, #0
}
 800328c:	4618      	mov	r0, r3
 800328e:	3710      	adds	r7, #16
 8003290:	46bd      	mov	sp, r7
 8003292:	bd80      	pop	{r7, pc}
 8003294:	80002000 	.word	0x80002000

08003298 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8003298:	b580      	push	{r7, lr}
 800329a:	b086      	sub	sp, #24
 800329c:	af02      	add	r7, sp, #8
 800329e:	60f8      	str	r0, [r7, #12]
 80032a0:	4608      	mov	r0, r1
 80032a2:	4611      	mov	r1, r2
 80032a4:	461a      	mov	r2, r3
 80032a6:	4603      	mov	r3, r0
 80032a8:	817b      	strh	r3, [r7, #10]
 80032aa:	460b      	mov	r3, r1
 80032ac:	813b      	strh	r3, [r7, #8]
 80032ae:	4613      	mov	r3, r2
 80032b0:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 80032b2:	88fb      	ldrh	r3, [r7, #6]
 80032b4:	b2da      	uxtb	r2, r3
 80032b6:	8979      	ldrh	r1, [r7, #10]
 80032b8:	4b20      	ldr	r3, [pc, #128]	@ (800333c <I2C_RequestMemoryRead+0xa4>)
 80032ba:	9300      	str	r3, [sp, #0]
 80032bc:	2300      	movs	r3, #0
 80032be:	68f8      	ldr	r0, [r7, #12]
 80032c0:	f000 fa1c 	bl	80036fc <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80032c4:	69fa      	ldr	r2, [r7, #28]
 80032c6:	69b9      	ldr	r1, [r7, #24]
 80032c8:	68f8      	ldr	r0, [r7, #12]
 80032ca:	f000 f8ac 	bl	8003426 <I2C_WaitOnTXISFlagUntilTimeout>
 80032ce:	4603      	mov	r3, r0
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	d001      	beq.n	80032d8 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 80032d4:	2301      	movs	r3, #1
 80032d6:	e02c      	b.n	8003332 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80032d8:	88fb      	ldrh	r3, [r7, #6]
 80032da:	2b01      	cmp	r3, #1
 80032dc:	d105      	bne.n	80032ea <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80032de:	893b      	ldrh	r3, [r7, #8]
 80032e0:	b2da      	uxtb	r2, r3
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	629a      	str	r2, [r3, #40]	@ 0x28
 80032e8:	e015      	b.n	8003316 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80032ea:	893b      	ldrh	r3, [r7, #8]
 80032ec:	0a1b      	lsrs	r3, r3, #8
 80032ee:	b29b      	uxth	r3, r3
 80032f0:	b2da      	uxtb	r2, r3
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80032f8:	69fa      	ldr	r2, [r7, #28]
 80032fa:	69b9      	ldr	r1, [r7, #24]
 80032fc:	68f8      	ldr	r0, [r7, #12]
 80032fe:	f000 f892 	bl	8003426 <I2C_WaitOnTXISFlagUntilTimeout>
 8003302:	4603      	mov	r3, r0
 8003304:	2b00      	cmp	r3, #0
 8003306:	d001      	beq.n	800330c <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8003308:	2301      	movs	r3, #1
 800330a:	e012      	b.n	8003332 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800330c:	893b      	ldrh	r3, [r7, #8]
 800330e:	b2da      	uxtb	r2, r3
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8003316:	69fb      	ldr	r3, [r7, #28]
 8003318:	9300      	str	r3, [sp, #0]
 800331a:	69bb      	ldr	r3, [r7, #24]
 800331c:	2200      	movs	r2, #0
 800331e:	2140      	movs	r1, #64	@ 0x40
 8003320:	68f8      	ldr	r0, [r7, #12]
 8003322:	f000 f831 	bl	8003388 <I2C_WaitOnFlagUntilTimeout>
 8003326:	4603      	mov	r3, r0
 8003328:	2b00      	cmp	r3, #0
 800332a:	d001      	beq.n	8003330 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 800332c:	2301      	movs	r3, #1
 800332e:	e000      	b.n	8003332 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8003330:	2300      	movs	r3, #0
}
 8003332:	4618      	mov	r0, r3
 8003334:	3710      	adds	r7, #16
 8003336:	46bd      	mov	sp, r7
 8003338:	bd80      	pop	{r7, pc}
 800333a:	bf00      	nop
 800333c:	80002000 	.word	0x80002000

08003340 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8003340:	b480      	push	{r7}
 8003342:	b083      	sub	sp, #12
 8003344:	af00      	add	r7, sp, #0
 8003346:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	699b      	ldr	r3, [r3, #24]
 800334e:	f003 0302 	and.w	r3, r3, #2
 8003352:	2b02      	cmp	r3, #2
 8003354:	d103      	bne.n	800335e <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	2200      	movs	r2, #0
 800335c:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	699b      	ldr	r3, [r3, #24]
 8003364:	f003 0301 	and.w	r3, r3, #1
 8003368:	2b01      	cmp	r3, #1
 800336a:	d007      	beq.n	800337c <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	699a      	ldr	r2, [r3, #24]
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	f042 0201 	orr.w	r2, r2, #1
 800337a:	619a      	str	r2, [r3, #24]
  }
}
 800337c:	bf00      	nop
 800337e:	370c      	adds	r7, #12
 8003380:	46bd      	mov	sp, r7
 8003382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003386:	4770      	bx	lr

08003388 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8003388:	b580      	push	{r7, lr}
 800338a:	b084      	sub	sp, #16
 800338c:	af00      	add	r7, sp, #0
 800338e:	60f8      	str	r0, [r7, #12]
 8003390:	60b9      	str	r1, [r7, #8]
 8003392:	603b      	str	r3, [r7, #0]
 8003394:	4613      	mov	r3, r2
 8003396:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003398:	e031      	b.n	80033fe <I2C_WaitOnFlagUntilTimeout+0x76>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800339a:	683b      	ldr	r3, [r7, #0]
 800339c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80033a0:	d02d      	beq.n	80033fe <I2C_WaitOnFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80033a2:	f7ff f815 	bl	80023d0 <HAL_GetTick>
 80033a6:	4602      	mov	r2, r0
 80033a8:	69bb      	ldr	r3, [r7, #24]
 80033aa:	1ad3      	subs	r3, r2, r3
 80033ac:	683a      	ldr	r2, [r7, #0]
 80033ae:	429a      	cmp	r2, r3
 80033b0:	d302      	bcc.n	80033b8 <I2C_WaitOnFlagUntilTimeout+0x30>
 80033b2:	683b      	ldr	r3, [r7, #0]
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	d122      	bne.n	80033fe <I2C_WaitOnFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	699a      	ldr	r2, [r3, #24]
 80033be:	68bb      	ldr	r3, [r7, #8]
 80033c0:	4013      	ands	r3, r2
 80033c2:	68ba      	ldr	r2, [r7, #8]
 80033c4:	429a      	cmp	r2, r3
 80033c6:	bf0c      	ite	eq
 80033c8:	2301      	moveq	r3, #1
 80033ca:	2300      	movne	r3, #0
 80033cc:	b2db      	uxtb	r3, r3
 80033ce:	461a      	mov	r2, r3
 80033d0:	79fb      	ldrb	r3, [r7, #7]
 80033d2:	429a      	cmp	r2, r3
 80033d4:	d113      	bne.n	80033fe <I2C_WaitOnFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80033da:	f043 0220 	orr.w	r2, r3, #32
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	2220      	movs	r2, #32
 80033e6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	2200      	movs	r2, #0
 80033ee:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	2200      	movs	r2, #0
 80033f6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 80033fa:	2301      	movs	r3, #1
 80033fc:	e00f      	b.n	800341e <I2C_WaitOnFlagUntilTimeout+0x96>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	699a      	ldr	r2, [r3, #24]
 8003404:	68bb      	ldr	r3, [r7, #8]
 8003406:	4013      	ands	r3, r2
 8003408:	68ba      	ldr	r2, [r7, #8]
 800340a:	429a      	cmp	r2, r3
 800340c:	bf0c      	ite	eq
 800340e:	2301      	moveq	r3, #1
 8003410:	2300      	movne	r3, #0
 8003412:	b2db      	uxtb	r3, r3
 8003414:	461a      	mov	r2, r3
 8003416:	79fb      	ldrb	r3, [r7, #7]
 8003418:	429a      	cmp	r2, r3
 800341a:	d0be      	beq.n	800339a <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800341c:	2300      	movs	r3, #0
}
 800341e:	4618      	mov	r0, r3
 8003420:	3710      	adds	r7, #16
 8003422:	46bd      	mov	sp, r7
 8003424:	bd80      	pop	{r7, pc}

08003426 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003426:	b580      	push	{r7, lr}
 8003428:	b084      	sub	sp, #16
 800342a:	af00      	add	r7, sp, #0
 800342c:	60f8      	str	r0, [r7, #12]
 800342e:	60b9      	str	r1, [r7, #8]
 8003430:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003432:	e033      	b.n	800349c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003434:	687a      	ldr	r2, [r7, #4]
 8003436:	68b9      	ldr	r1, [r7, #8]
 8003438:	68f8      	ldr	r0, [r7, #12]
 800343a:	f000 f87f 	bl	800353c <I2C_IsErrorOccurred>
 800343e:	4603      	mov	r3, r0
 8003440:	2b00      	cmp	r3, #0
 8003442:	d001      	beq.n	8003448 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003444:	2301      	movs	r3, #1
 8003446:	e031      	b.n	80034ac <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003448:	68bb      	ldr	r3, [r7, #8]
 800344a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800344e:	d025      	beq.n	800349c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003450:	f7fe ffbe 	bl	80023d0 <HAL_GetTick>
 8003454:	4602      	mov	r2, r0
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	1ad3      	subs	r3, r2, r3
 800345a:	68ba      	ldr	r2, [r7, #8]
 800345c:	429a      	cmp	r2, r3
 800345e:	d302      	bcc.n	8003466 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8003460:	68bb      	ldr	r3, [r7, #8]
 8003462:	2b00      	cmp	r3, #0
 8003464:	d11a      	bne.n	800349c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	699b      	ldr	r3, [r3, #24]
 800346c:	f003 0302 	and.w	r3, r3, #2
 8003470:	2b02      	cmp	r3, #2
 8003472:	d013      	beq.n	800349c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003478:	f043 0220 	orr.w	r2, r3, #32
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	2220      	movs	r2, #32
 8003484:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	2200      	movs	r2, #0
 800348c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	2200      	movs	r2, #0
 8003494:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8003498:	2301      	movs	r3, #1
 800349a:	e007      	b.n	80034ac <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	699b      	ldr	r3, [r3, #24]
 80034a2:	f003 0302 	and.w	r3, r3, #2
 80034a6:	2b02      	cmp	r3, #2
 80034a8:	d1c4      	bne.n	8003434 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80034aa:	2300      	movs	r3, #0
}
 80034ac:	4618      	mov	r0, r3
 80034ae:	3710      	adds	r7, #16
 80034b0:	46bd      	mov	sp, r7
 80034b2:	bd80      	pop	{r7, pc}

080034b4 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80034b4:	b580      	push	{r7, lr}
 80034b6:	b084      	sub	sp, #16
 80034b8:	af00      	add	r7, sp, #0
 80034ba:	60f8      	str	r0, [r7, #12]
 80034bc:	60b9      	str	r1, [r7, #8]
 80034be:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80034c0:	e02f      	b.n	8003522 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80034c2:	687a      	ldr	r2, [r7, #4]
 80034c4:	68b9      	ldr	r1, [r7, #8]
 80034c6:	68f8      	ldr	r0, [r7, #12]
 80034c8:	f000 f838 	bl	800353c <I2C_IsErrorOccurred>
 80034cc:	4603      	mov	r3, r0
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	d001      	beq.n	80034d6 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80034d2:	2301      	movs	r3, #1
 80034d4:	e02d      	b.n	8003532 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80034d6:	f7fe ff7b 	bl	80023d0 <HAL_GetTick>
 80034da:	4602      	mov	r2, r0
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	1ad3      	subs	r3, r2, r3
 80034e0:	68ba      	ldr	r2, [r7, #8]
 80034e2:	429a      	cmp	r2, r3
 80034e4:	d302      	bcc.n	80034ec <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80034e6:	68bb      	ldr	r3, [r7, #8]
 80034e8:	2b00      	cmp	r3, #0
 80034ea:	d11a      	bne.n	8003522 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	699b      	ldr	r3, [r3, #24]
 80034f2:	f003 0320 	and.w	r3, r3, #32
 80034f6:	2b20      	cmp	r3, #32
 80034f8:	d013      	beq.n	8003522 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80034fe:	f043 0220 	orr.w	r2, r3, #32
 8003502:	68fb      	ldr	r3, [r7, #12]
 8003504:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	2220      	movs	r2, #32
 800350a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	2200      	movs	r2, #0
 8003512:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003516:	68fb      	ldr	r3, [r7, #12]
 8003518:	2200      	movs	r2, #0
 800351a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 800351e:	2301      	movs	r3, #1
 8003520:	e007      	b.n	8003532 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	699b      	ldr	r3, [r3, #24]
 8003528:	f003 0320 	and.w	r3, r3, #32
 800352c:	2b20      	cmp	r3, #32
 800352e:	d1c8      	bne.n	80034c2 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003530:	2300      	movs	r3, #0
}
 8003532:	4618      	mov	r0, r3
 8003534:	3710      	adds	r7, #16
 8003536:	46bd      	mov	sp, r7
 8003538:	bd80      	pop	{r7, pc}
	...

0800353c <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800353c:	b580      	push	{r7, lr}
 800353e:	b08a      	sub	sp, #40	@ 0x28
 8003540:	af00      	add	r7, sp, #0
 8003542:	60f8      	str	r0, [r7, #12]
 8003544:	60b9      	str	r1, [r7, #8]
 8003546:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003548:	2300      	movs	r3, #0
 800354a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	699b      	ldr	r3, [r3, #24]
 8003554:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8003556:	2300      	movs	r3, #0
 8003558:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800355e:	69bb      	ldr	r3, [r7, #24]
 8003560:	f003 0310 	and.w	r3, r3, #16
 8003564:	2b00      	cmp	r3, #0
 8003566:	d068      	beq.n	800363a <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	2210      	movs	r2, #16
 800356e:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003570:	e049      	b.n	8003606 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8003572:	68bb      	ldr	r3, [r7, #8]
 8003574:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003578:	d045      	beq.n	8003606 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800357a:	f7fe ff29 	bl	80023d0 <HAL_GetTick>
 800357e:	4602      	mov	r2, r0
 8003580:	69fb      	ldr	r3, [r7, #28]
 8003582:	1ad3      	subs	r3, r2, r3
 8003584:	68ba      	ldr	r2, [r7, #8]
 8003586:	429a      	cmp	r2, r3
 8003588:	d302      	bcc.n	8003590 <I2C_IsErrorOccurred+0x54>
 800358a:	68bb      	ldr	r3, [r7, #8]
 800358c:	2b00      	cmp	r3, #0
 800358e:	d13a      	bne.n	8003606 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	685b      	ldr	r3, [r3, #4]
 8003596:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800359a:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80035a2:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	699b      	ldr	r3, [r3, #24]
 80035aa:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80035ae:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80035b2:	d121      	bne.n	80035f8 <I2C_IsErrorOccurred+0xbc>
 80035b4:	697b      	ldr	r3, [r7, #20]
 80035b6:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80035ba:	d01d      	beq.n	80035f8 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 80035bc:	7cfb      	ldrb	r3, [r7, #19]
 80035be:	2b20      	cmp	r3, #32
 80035c0:	d01a      	beq.n	80035f8 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	685a      	ldr	r2, [r3, #4]
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80035d0:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 80035d2:	f7fe fefd 	bl	80023d0 <HAL_GetTick>
 80035d6:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80035d8:	e00e      	b.n	80035f8 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80035da:	f7fe fef9 	bl	80023d0 <HAL_GetTick>
 80035de:	4602      	mov	r2, r0
 80035e0:	69fb      	ldr	r3, [r7, #28]
 80035e2:	1ad3      	subs	r3, r2, r3
 80035e4:	2b19      	cmp	r3, #25
 80035e6:	d907      	bls.n	80035f8 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 80035e8:	6a3b      	ldr	r3, [r7, #32]
 80035ea:	f043 0320 	orr.w	r3, r3, #32
 80035ee:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 80035f0:	2301      	movs	r3, #1
 80035f2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 80035f6:	e006      	b.n	8003606 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	699b      	ldr	r3, [r3, #24]
 80035fe:	f003 0320 	and.w	r3, r3, #32
 8003602:	2b20      	cmp	r3, #32
 8003604:	d1e9      	bne.n	80035da <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	699b      	ldr	r3, [r3, #24]
 800360c:	f003 0320 	and.w	r3, r3, #32
 8003610:	2b20      	cmp	r3, #32
 8003612:	d003      	beq.n	800361c <I2C_IsErrorOccurred+0xe0>
 8003614:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003618:	2b00      	cmp	r3, #0
 800361a:	d0aa      	beq.n	8003572 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 800361c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003620:	2b00      	cmp	r3, #0
 8003622:	d103      	bne.n	800362c <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	2220      	movs	r2, #32
 800362a:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 800362c:	6a3b      	ldr	r3, [r7, #32]
 800362e:	f043 0304 	orr.w	r3, r3, #4
 8003632:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8003634:	2301      	movs	r3, #1
 8003636:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	699b      	ldr	r3, [r3, #24]
 8003640:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8003642:	69bb      	ldr	r3, [r7, #24]
 8003644:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003648:	2b00      	cmp	r3, #0
 800364a:	d00b      	beq.n	8003664 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 800364c:	6a3b      	ldr	r3, [r7, #32]
 800364e:	f043 0301 	orr.w	r3, r3, #1
 8003652:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800365c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800365e:	2301      	movs	r3, #1
 8003660:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8003664:	69bb      	ldr	r3, [r7, #24]
 8003666:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800366a:	2b00      	cmp	r3, #0
 800366c:	d00b      	beq.n	8003686 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 800366e:	6a3b      	ldr	r3, [r7, #32]
 8003670:	f043 0308 	orr.w	r3, r3, #8
 8003674:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800367e:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003680:	2301      	movs	r3, #1
 8003682:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8003686:	69bb      	ldr	r3, [r7, #24]
 8003688:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800368c:	2b00      	cmp	r3, #0
 800368e:	d00b      	beq.n	80036a8 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8003690:	6a3b      	ldr	r3, [r7, #32]
 8003692:	f043 0302 	orr.w	r3, r3, #2
 8003696:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80036a0:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80036a2:	2301      	movs	r3, #1
 80036a4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 80036a8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	d01c      	beq.n	80036ea <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80036b0:	68f8      	ldr	r0, [r7, #12]
 80036b2:	f7ff fe45 	bl	8003340 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	6859      	ldr	r1, [r3, #4]
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	681a      	ldr	r2, [r3, #0]
 80036c0:	4b0d      	ldr	r3, [pc, #52]	@ (80036f8 <I2C_IsErrorOccurred+0x1bc>)
 80036c2:	400b      	ands	r3, r1
 80036c4:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80036ca:	6a3b      	ldr	r3, [r7, #32]
 80036cc:	431a      	orrs	r2, r3
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	2220      	movs	r2, #32
 80036d6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	2200      	movs	r2, #0
 80036de:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	2200      	movs	r2, #0
 80036e6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 80036ea:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 80036ee:	4618      	mov	r0, r3
 80036f0:	3728      	adds	r7, #40	@ 0x28
 80036f2:	46bd      	mov	sp, r7
 80036f4:	bd80      	pop	{r7, pc}
 80036f6:	bf00      	nop
 80036f8:	fe00e800 	.word	0xfe00e800

080036fc <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80036fc:	b480      	push	{r7}
 80036fe:	b087      	sub	sp, #28
 8003700:	af00      	add	r7, sp, #0
 8003702:	60f8      	str	r0, [r7, #12]
 8003704:	607b      	str	r3, [r7, #4]
 8003706:	460b      	mov	r3, r1
 8003708:	817b      	strh	r3, [r7, #10]
 800370a:	4613      	mov	r3, r2
 800370c:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800370e:	897b      	ldrh	r3, [r7, #10]
 8003710:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003714:	7a7b      	ldrb	r3, [r7, #9]
 8003716:	041b      	lsls	r3, r3, #16
 8003718:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800371c:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003722:	6a3b      	ldr	r3, [r7, #32]
 8003724:	4313      	orrs	r3, r2
 8003726:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800372a:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	685a      	ldr	r2, [r3, #4]
 8003732:	6a3b      	ldr	r3, [r7, #32]
 8003734:	0d5b      	lsrs	r3, r3, #21
 8003736:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 800373a:	4b08      	ldr	r3, [pc, #32]	@ (800375c <I2C_TransferConfig+0x60>)
 800373c:	430b      	orrs	r3, r1
 800373e:	43db      	mvns	r3, r3
 8003740:	ea02 0103 	and.w	r1, r2, r3
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	697a      	ldr	r2, [r7, #20]
 800374a:	430a      	orrs	r2, r1
 800374c:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800374e:	bf00      	nop
 8003750:	371c      	adds	r7, #28
 8003752:	46bd      	mov	sp, r7
 8003754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003758:	4770      	bx	lr
 800375a:	bf00      	nop
 800375c:	03ff63ff 	.word	0x03ff63ff

08003760 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003760:	b480      	push	{r7}
 8003762:	b083      	sub	sp, #12
 8003764:	af00      	add	r7, sp, #0
 8003766:	6078      	str	r0, [r7, #4]
 8003768:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003770:	b2db      	uxtb	r3, r3
 8003772:	2b20      	cmp	r3, #32
 8003774:	d138      	bne.n	80037e8 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800377c:	2b01      	cmp	r3, #1
 800377e:	d101      	bne.n	8003784 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003780:	2302      	movs	r3, #2
 8003782:	e032      	b.n	80037ea <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	2201      	movs	r2, #1
 8003788:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	2224      	movs	r2, #36	@ 0x24
 8003790:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	681a      	ldr	r2, [r3, #0]
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	f022 0201 	bic.w	r2, r2, #1
 80037a2:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	681a      	ldr	r2, [r3, #0]
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80037b2:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	6819      	ldr	r1, [r3, #0]
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	683a      	ldr	r2, [r7, #0]
 80037c0:	430a      	orrs	r2, r1
 80037c2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	681a      	ldr	r2, [r3, #0]
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	f042 0201 	orr.w	r2, r2, #1
 80037d2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	2220      	movs	r2, #32
 80037d8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	2200      	movs	r2, #0
 80037e0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80037e4:	2300      	movs	r3, #0
 80037e6:	e000      	b.n	80037ea <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80037e8:	2302      	movs	r3, #2
  }
}
 80037ea:	4618      	mov	r0, r3
 80037ec:	370c      	adds	r7, #12
 80037ee:	46bd      	mov	sp, r7
 80037f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037f4:	4770      	bx	lr

080037f6 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80037f6:	b480      	push	{r7}
 80037f8:	b085      	sub	sp, #20
 80037fa:	af00      	add	r7, sp, #0
 80037fc:	6078      	str	r0, [r7, #4]
 80037fe:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003806:	b2db      	uxtb	r3, r3
 8003808:	2b20      	cmp	r3, #32
 800380a:	d139      	bne.n	8003880 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003812:	2b01      	cmp	r3, #1
 8003814:	d101      	bne.n	800381a <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8003816:	2302      	movs	r3, #2
 8003818:	e033      	b.n	8003882 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	2201      	movs	r2, #1
 800381e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	2224      	movs	r2, #36	@ 0x24
 8003826:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	681a      	ldr	r2, [r3, #0]
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	f022 0201 	bic.w	r2, r2, #1
 8003838:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8003848:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800384a:	683b      	ldr	r3, [r7, #0]
 800384c:	021b      	lsls	r3, r3, #8
 800384e:	68fa      	ldr	r2, [r7, #12]
 8003850:	4313      	orrs	r3, r2
 8003852:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	68fa      	ldr	r2, [r7, #12]
 800385a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	681a      	ldr	r2, [r3, #0]
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	f042 0201 	orr.w	r2, r2, #1
 800386a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	2220      	movs	r2, #32
 8003870:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	2200      	movs	r2, #0
 8003878:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800387c:	2300      	movs	r3, #0
 800387e:	e000      	b.n	8003882 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003880:	2302      	movs	r3, #2
  }
}
 8003882:	4618      	mov	r0, r3
 8003884:	3714      	adds	r7, #20
 8003886:	46bd      	mov	sp, r7
 8003888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800388c:	4770      	bx	lr
	...

08003890 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8003890:	b480      	push	{r7}
 8003892:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003894:	4b05      	ldr	r3, [pc, #20]	@ (80038ac <HAL_PWR_EnableBkUpAccess+0x1c>)
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	4a04      	ldr	r2, [pc, #16]	@ (80038ac <HAL_PWR_EnableBkUpAccess+0x1c>)
 800389a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800389e:	6013      	str	r3, [r2, #0]
}
 80038a0:	bf00      	nop
 80038a2:	46bd      	mov	sp, r7
 80038a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038a8:	4770      	bx	lr
 80038aa:	bf00      	nop
 80038ac:	40007000 	.word	0x40007000

080038b0 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80038b0:	b480      	push	{r7}
 80038b2:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80038b4:	4b04      	ldr	r3, [pc, #16]	@ (80038c8 <HAL_PWREx_GetVoltageRange+0x18>)
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 80038bc:	4618      	mov	r0, r3
 80038be:	46bd      	mov	sp, r7
 80038c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038c4:	4770      	bx	lr
 80038c6:	bf00      	nop
 80038c8:	40007000 	.word	0x40007000

080038cc <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80038cc:	b480      	push	{r7}
 80038ce:	b085      	sub	sp, #20
 80038d0:	af00      	add	r7, sp, #0
 80038d2:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80038da:	d130      	bne.n	800393e <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80038dc:	4b23      	ldr	r3, [pc, #140]	@ (800396c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80038e4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80038e8:	d038      	beq.n	800395c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80038ea:	4b20      	ldr	r3, [pc, #128]	@ (800396c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80038f2:	4a1e      	ldr	r2, [pc, #120]	@ (800396c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80038f4:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80038f8:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80038fa:	4b1d      	ldr	r3, [pc, #116]	@ (8003970 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	2232      	movs	r2, #50	@ 0x32
 8003900:	fb02 f303 	mul.w	r3, r2, r3
 8003904:	4a1b      	ldr	r2, [pc, #108]	@ (8003974 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8003906:	fba2 2303 	umull	r2, r3, r2, r3
 800390a:	0c9b      	lsrs	r3, r3, #18
 800390c:	3301      	adds	r3, #1
 800390e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003910:	e002      	b.n	8003918 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	3b01      	subs	r3, #1
 8003916:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003918:	4b14      	ldr	r3, [pc, #80]	@ (800396c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800391a:	695b      	ldr	r3, [r3, #20]
 800391c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003920:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003924:	d102      	bne.n	800392c <HAL_PWREx_ControlVoltageScaling+0x60>
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	2b00      	cmp	r3, #0
 800392a:	d1f2      	bne.n	8003912 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800392c:	4b0f      	ldr	r3, [pc, #60]	@ (800396c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800392e:	695b      	ldr	r3, [r3, #20]
 8003930:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003934:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003938:	d110      	bne.n	800395c <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800393a:	2303      	movs	r3, #3
 800393c:	e00f      	b.n	800395e <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800393e:	4b0b      	ldr	r3, [pc, #44]	@ (800396c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8003946:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800394a:	d007      	beq.n	800395c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800394c:	4b07      	ldr	r3, [pc, #28]	@ (800396c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8003954:	4a05      	ldr	r2, [pc, #20]	@ (800396c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003956:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800395a:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 800395c:	2300      	movs	r3, #0
}
 800395e:	4618      	mov	r0, r3
 8003960:	3714      	adds	r7, #20
 8003962:	46bd      	mov	sp, r7
 8003964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003968:	4770      	bx	lr
 800396a:	bf00      	nop
 800396c:	40007000 	.word	0x40007000
 8003970:	20000004 	.word	0x20000004
 8003974:	431bde83 	.word	0x431bde83

08003978 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003978:	b580      	push	{r7, lr}
 800397a:	b088      	sub	sp, #32
 800397c:	af00      	add	r7, sp, #0
 800397e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	2b00      	cmp	r3, #0
 8003984:	d102      	bne.n	800398c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8003986:	2301      	movs	r3, #1
 8003988:	f000 bc02 	b.w	8004190 <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800398c:	4b96      	ldr	r3, [pc, #600]	@ (8003be8 <HAL_RCC_OscConfig+0x270>)
 800398e:	689b      	ldr	r3, [r3, #8]
 8003990:	f003 030c 	and.w	r3, r3, #12
 8003994:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003996:	4b94      	ldr	r3, [pc, #592]	@ (8003be8 <HAL_RCC_OscConfig+0x270>)
 8003998:	68db      	ldr	r3, [r3, #12]
 800399a:	f003 0303 	and.w	r3, r3, #3
 800399e:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	f003 0310 	and.w	r3, r3, #16
 80039a8:	2b00      	cmp	r3, #0
 80039aa:	f000 80e4 	beq.w	8003b76 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80039ae:	69bb      	ldr	r3, [r7, #24]
 80039b0:	2b00      	cmp	r3, #0
 80039b2:	d007      	beq.n	80039c4 <HAL_RCC_OscConfig+0x4c>
 80039b4:	69bb      	ldr	r3, [r7, #24]
 80039b6:	2b0c      	cmp	r3, #12
 80039b8:	f040 808b 	bne.w	8003ad2 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80039bc:	697b      	ldr	r3, [r7, #20]
 80039be:	2b01      	cmp	r3, #1
 80039c0:	f040 8087 	bne.w	8003ad2 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80039c4:	4b88      	ldr	r3, [pc, #544]	@ (8003be8 <HAL_RCC_OscConfig+0x270>)
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	f003 0302 	and.w	r3, r3, #2
 80039cc:	2b00      	cmp	r3, #0
 80039ce:	d005      	beq.n	80039dc <HAL_RCC_OscConfig+0x64>
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	699b      	ldr	r3, [r3, #24]
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	d101      	bne.n	80039dc <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 80039d8:	2301      	movs	r3, #1
 80039da:	e3d9      	b.n	8004190 <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	6a1a      	ldr	r2, [r3, #32]
 80039e0:	4b81      	ldr	r3, [pc, #516]	@ (8003be8 <HAL_RCC_OscConfig+0x270>)
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	f003 0308 	and.w	r3, r3, #8
 80039e8:	2b00      	cmp	r3, #0
 80039ea:	d004      	beq.n	80039f6 <HAL_RCC_OscConfig+0x7e>
 80039ec:	4b7e      	ldr	r3, [pc, #504]	@ (8003be8 <HAL_RCC_OscConfig+0x270>)
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80039f4:	e005      	b.n	8003a02 <HAL_RCC_OscConfig+0x8a>
 80039f6:	4b7c      	ldr	r3, [pc, #496]	@ (8003be8 <HAL_RCC_OscConfig+0x270>)
 80039f8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80039fc:	091b      	lsrs	r3, r3, #4
 80039fe:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003a02:	4293      	cmp	r3, r2
 8003a04:	d223      	bcs.n	8003a4e <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	6a1b      	ldr	r3, [r3, #32]
 8003a0a:	4618      	mov	r0, r3
 8003a0c:	f000 fd8c 	bl	8004528 <RCC_SetFlashLatencyFromMSIRange>
 8003a10:	4603      	mov	r3, r0
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d001      	beq.n	8003a1a <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8003a16:	2301      	movs	r3, #1
 8003a18:	e3ba      	b.n	8004190 <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003a1a:	4b73      	ldr	r3, [pc, #460]	@ (8003be8 <HAL_RCC_OscConfig+0x270>)
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	4a72      	ldr	r2, [pc, #456]	@ (8003be8 <HAL_RCC_OscConfig+0x270>)
 8003a20:	f043 0308 	orr.w	r3, r3, #8
 8003a24:	6013      	str	r3, [r2, #0]
 8003a26:	4b70      	ldr	r3, [pc, #448]	@ (8003be8 <HAL_RCC_OscConfig+0x270>)
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	6a1b      	ldr	r3, [r3, #32]
 8003a32:	496d      	ldr	r1, [pc, #436]	@ (8003be8 <HAL_RCC_OscConfig+0x270>)
 8003a34:	4313      	orrs	r3, r2
 8003a36:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003a38:	4b6b      	ldr	r3, [pc, #428]	@ (8003be8 <HAL_RCC_OscConfig+0x270>)
 8003a3a:	685b      	ldr	r3, [r3, #4]
 8003a3c:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	69db      	ldr	r3, [r3, #28]
 8003a44:	021b      	lsls	r3, r3, #8
 8003a46:	4968      	ldr	r1, [pc, #416]	@ (8003be8 <HAL_RCC_OscConfig+0x270>)
 8003a48:	4313      	orrs	r3, r2
 8003a4a:	604b      	str	r3, [r1, #4]
 8003a4c:	e025      	b.n	8003a9a <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003a4e:	4b66      	ldr	r3, [pc, #408]	@ (8003be8 <HAL_RCC_OscConfig+0x270>)
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	4a65      	ldr	r2, [pc, #404]	@ (8003be8 <HAL_RCC_OscConfig+0x270>)
 8003a54:	f043 0308 	orr.w	r3, r3, #8
 8003a58:	6013      	str	r3, [r2, #0]
 8003a5a:	4b63      	ldr	r3, [pc, #396]	@ (8003be8 <HAL_RCC_OscConfig+0x270>)
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	6a1b      	ldr	r3, [r3, #32]
 8003a66:	4960      	ldr	r1, [pc, #384]	@ (8003be8 <HAL_RCC_OscConfig+0x270>)
 8003a68:	4313      	orrs	r3, r2
 8003a6a:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003a6c:	4b5e      	ldr	r3, [pc, #376]	@ (8003be8 <HAL_RCC_OscConfig+0x270>)
 8003a6e:	685b      	ldr	r3, [r3, #4]
 8003a70:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	69db      	ldr	r3, [r3, #28]
 8003a78:	021b      	lsls	r3, r3, #8
 8003a7a:	495b      	ldr	r1, [pc, #364]	@ (8003be8 <HAL_RCC_OscConfig+0x270>)
 8003a7c:	4313      	orrs	r3, r2
 8003a7e:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003a80:	69bb      	ldr	r3, [r7, #24]
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d109      	bne.n	8003a9a <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	6a1b      	ldr	r3, [r3, #32]
 8003a8a:	4618      	mov	r0, r3
 8003a8c:	f000 fd4c 	bl	8004528 <RCC_SetFlashLatencyFromMSIRange>
 8003a90:	4603      	mov	r3, r0
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d001      	beq.n	8003a9a <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8003a96:	2301      	movs	r3, #1
 8003a98:	e37a      	b.n	8004190 <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003a9a:	f000 fc81 	bl	80043a0 <HAL_RCC_GetSysClockFreq>
 8003a9e:	4602      	mov	r2, r0
 8003aa0:	4b51      	ldr	r3, [pc, #324]	@ (8003be8 <HAL_RCC_OscConfig+0x270>)
 8003aa2:	689b      	ldr	r3, [r3, #8]
 8003aa4:	091b      	lsrs	r3, r3, #4
 8003aa6:	f003 030f 	and.w	r3, r3, #15
 8003aaa:	4950      	ldr	r1, [pc, #320]	@ (8003bec <HAL_RCC_OscConfig+0x274>)
 8003aac:	5ccb      	ldrb	r3, [r1, r3]
 8003aae:	f003 031f 	and.w	r3, r3, #31
 8003ab2:	fa22 f303 	lsr.w	r3, r2, r3
 8003ab6:	4a4e      	ldr	r2, [pc, #312]	@ (8003bf0 <HAL_RCC_OscConfig+0x278>)
 8003ab8:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8003aba:	4b4e      	ldr	r3, [pc, #312]	@ (8003bf4 <HAL_RCC_OscConfig+0x27c>)
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	4618      	mov	r0, r3
 8003ac0:	f7fe fc36 	bl	8002330 <HAL_InitTick>
 8003ac4:	4603      	mov	r3, r0
 8003ac6:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8003ac8:	7bfb      	ldrb	r3, [r7, #15]
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	d052      	beq.n	8003b74 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8003ace:	7bfb      	ldrb	r3, [r7, #15]
 8003ad0:	e35e      	b.n	8004190 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	699b      	ldr	r3, [r3, #24]
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d032      	beq.n	8003b40 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8003ada:	4b43      	ldr	r3, [pc, #268]	@ (8003be8 <HAL_RCC_OscConfig+0x270>)
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	4a42      	ldr	r2, [pc, #264]	@ (8003be8 <HAL_RCC_OscConfig+0x270>)
 8003ae0:	f043 0301 	orr.w	r3, r3, #1
 8003ae4:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003ae6:	f7fe fc73 	bl	80023d0 <HAL_GetTick>
 8003aea:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003aec:	e008      	b.n	8003b00 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003aee:	f7fe fc6f 	bl	80023d0 <HAL_GetTick>
 8003af2:	4602      	mov	r2, r0
 8003af4:	693b      	ldr	r3, [r7, #16]
 8003af6:	1ad3      	subs	r3, r2, r3
 8003af8:	2b02      	cmp	r3, #2
 8003afa:	d901      	bls.n	8003b00 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8003afc:	2303      	movs	r3, #3
 8003afe:	e347      	b.n	8004190 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003b00:	4b39      	ldr	r3, [pc, #228]	@ (8003be8 <HAL_RCC_OscConfig+0x270>)
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	f003 0302 	and.w	r3, r3, #2
 8003b08:	2b00      	cmp	r3, #0
 8003b0a:	d0f0      	beq.n	8003aee <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003b0c:	4b36      	ldr	r3, [pc, #216]	@ (8003be8 <HAL_RCC_OscConfig+0x270>)
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	4a35      	ldr	r2, [pc, #212]	@ (8003be8 <HAL_RCC_OscConfig+0x270>)
 8003b12:	f043 0308 	orr.w	r3, r3, #8
 8003b16:	6013      	str	r3, [r2, #0]
 8003b18:	4b33      	ldr	r3, [pc, #204]	@ (8003be8 <HAL_RCC_OscConfig+0x270>)
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	6a1b      	ldr	r3, [r3, #32]
 8003b24:	4930      	ldr	r1, [pc, #192]	@ (8003be8 <HAL_RCC_OscConfig+0x270>)
 8003b26:	4313      	orrs	r3, r2
 8003b28:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003b2a:	4b2f      	ldr	r3, [pc, #188]	@ (8003be8 <HAL_RCC_OscConfig+0x270>)
 8003b2c:	685b      	ldr	r3, [r3, #4]
 8003b2e:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	69db      	ldr	r3, [r3, #28]
 8003b36:	021b      	lsls	r3, r3, #8
 8003b38:	492b      	ldr	r1, [pc, #172]	@ (8003be8 <HAL_RCC_OscConfig+0x270>)
 8003b3a:	4313      	orrs	r3, r2
 8003b3c:	604b      	str	r3, [r1, #4]
 8003b3e:	e01a      	b.n	8003b76 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8003b40:	4b29      	ldr	r3, [pc, #164]	@ (8003be8 <HAL_RCC_OscConfig+0x270>)
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	4a28      	ldr	r2, [pc, #160]	@ (8003be8 <HAL_RCC_OscConfig+0x270>)
 8003b46:	f023 0301 	bic.w	r3, r3, #1
 8003b4a:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003b4c:	f7fe fc40 	bl	80023d0 <HAL_GetTick>
 8003b50:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003b52:	e008      	b.n	8003b66 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003b54:	f7fe fc3c 	bl	80023d0 <HAL_GetTick>
 8003b58:	4602      	mov	r2, r0
 8003b5a:	693b      	ldr	r3, [r7, #16]
 8003b5c:	1ad3      	subs	r3, r2, r3
 8003b5e:	2b02      	cmp	r3, #2
 8003b60:	d901      	bls.n	8003b66 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8003b62:	2303      	movs	r3, #3
 8003b64:	e314      	b.n	8004190 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003b66:	4b20      	ldr	r3, [pc, #128]	@ (8003be8 <HAL_RCC_OscConfig+0x270>)
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	f003 0302 	and.w	r3, r3, #2
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	d1f0      	bne.n	8003b54 <HAL_RCC_OscConfig+0x1dc>
 8003b72:	e000      	b.n	8003b76 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003b74:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	f003 0301 	and.w	r3, r3, #1
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d073      	beq.n	8003c6a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8003b82:	69bb      	ldr	r3, [r7, #24]
 8003b84:	2b08      	cmp	r3, #8
 8003b86:	d005      	beq.n	8003b94 <HAL_RCC_OscConfig+0x21c>
 8003b88:	69bb      	ldr	r3, [r7, #24]
 8003b8a:	2b0c      	cmp	r3, #12
 8003b8c:	d10e      	bne.n	8003bac <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8003b8e:	697b      	ldr	r3, [r7, #20]
 8003b90:	2b03      	cmp	r3, #3
 8003b92:	d10b      	bne.n	8003bac <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003b94:	4b14      	ldr	r3, [pc, #80]	@ (8003be8 <HAL_RCC_OscConfig+0x270>)
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	d063      	beq.n	8003c68 <HAL_RCC_OscConfig+0x2f0>
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	685b      	ldr	r3, [r3, #4]
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	d15f      	bne.n	8003c68 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8003ba8:	2301      	movs	r3, #1
 8003baa:	e2f1      	b.n	8004190 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	685b      	ldr	r3, [r3, #4]
 8003bb0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003bb4:	d106      	bne.n	8003bc4 <HAL_RCC_OscConfig+0x24c>
 8003bb6:	4b0c      	ldr	r3, [pc, #48]	@ (8003be8 <HAL_RCC_OscConfig+0x270>)
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	4a0b      	ldr	r2, [pc, #44]	@ (8003be8 <HAL_RCC_OscConfig+0x270>)
 8003bbc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003bc0:	6013      	str	r3, [r2, #0]
 8003bc2:	e025      	b.n	8003c10 <HAL_RCC_OscConfig+0x298>
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	685b      	ldr	r3, [r3, #4]
 8003bc8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003bcc:	d114      	bne.n	8003bf8 <HAL_RCC_OscConfig+0x280>
 8003bce:	4b06      	ldr	r3, [pc, #24]	@ (8003be8 <HAL_RCC_OscConfig+0x270>)
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	4a05      	ldr	r2, [pc, #20]	@ (8003be8 <HAL_RCC_OscConfig+0x270>)
 8003bd4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003bd8:	6013      	str	r3, [r2, #0]
 8003bda:	4b03      	ldr	r3, [pc, #12]	@ (8003be8 <HAL_RCC_OscConfig+0x270>)
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	4a02      	ldr	r2, [pc, #8]	@ (8003be8 <HAL_RCC_OscConfig+0x270>)
 8003be0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003be4:	6013      	str	r3, [r2, #0]
 8003be6:	e013      	b.n	8003c10 <HAL_RCC_OscConfig+0x298>
 8003be8:	40021000 	.word	0x40021000
 8003bec:	08005568 	.word	0x08005568
 8003bf0:	20000004 	.word	0x20000004
 8003bf4:	20000008 	.word	0x20000008
 8003bf8:	4ba0      	ldr	r3, [pc, #640]	@ (8003e7c <HAL_RCC_OscConfig+0x504>)
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	4a9f      	ldr	r2, [pc, #636]	@ (8003e7c <HAL_RCC_OscConfig+0x504>)
 8003bfe:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003c02:	6013      	str	r3, [r2, #0]
 8003c04:	4b9d      	ldr	r3, [pc, #628]	@ (8003e7c <HAL_RCC_OscConfig+0x504>)
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	4a9c      	ldr	r2, [pc, #624]	@ (8003e7c <HAL_RCC_OscConfig+0x504>)
 8003c0a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003c0e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	685b      	ldr	r3, [r3, #4]
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	d013      	beq.n	8003c40 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c18:	f7fe fbda 	bl	80023d0 <HAL_GetTick>
 8003c1c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003c1e:	e008      	b.n	8003c32 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003c20:	f7fe fbd6 	bl	80023d0 <HAL_GetTick>
 8003c24:	4602      	mov	r2, r0
 8003c26:	693b      	ldr	r3, [r7, #16]
 8003c28:	1ad3      	subs	r3, r2, r3
 8003c2a:	2b64      	cmp	r3, #100	@ 0x64
 8003c2c:	d901      	bls.n	8003c32 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8003c2e:	2303      	movs	r3, #3
 8003c30:	e2ae      	b.n	8004190 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003c32:	4b92      	ldr	r3, [pc, #584]	@ (8003e7c <HAL_RCC_OscConfig+0x504>)
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	d0f0      	beq.n	8003c20 <HAL_RCC_OscConfig+0x2a8>
 8003c3e:	e014      	b.n	8003c6a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c40:	f7fe fbc6 	bl	80023d0 <HAL_GetTick>
 8003c44:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003c46:	e008      	b.n	8003c5a <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003c48:	f7fe fbc2 	bl	80023d0 <HAL_GetTick>
 8003c4c:	4602      	mov	r2, r0
 8003c4e:	693b      	ldr	r3, [r7, #16]
 8003c50:	1ad3      	subs	r3, r2, r3
 8003c52:	2b64      	cmp	r3, #100	@ 0x64
 8003c54:	d901      	bls.n	8003c5a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8003c56:	2303      	movs	r3, #3
 8003c58:	e29a      	b.n	8004190 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003c5a:	4b88      	ldr	r3, [pc, #544]	@ (8003e7c <HAL_RCC_OscConfig+0x504>)
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	d1f0      	bne.n	8003c48 <HAL_RCC_OscConfig+0x2d0>
 8003c66:	e000      	b.n	8003c6a <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003c68:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	f003 0302 	and.w	r3, r3, #2
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	d060      	beq.n	8003d38 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8003c76:	69bb      	ldr	r3, [r7, #24]
 8003c78:	2b04      	cmp	r3, #4
 8003c7a:	d005      	beq.n	8003c88 <HAL_RCC_OscConfig+0x310>
 8003c7c:	69bb      	ldr	r3, [r7, #24]
 8003c7e:	2b0c      	cmp	r3, #12
 8003c80:	d119      	bne.n	8003cb6 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8003c82:	697b      	ldr	r3, [r7, #20]
 8003c84:	2b02      	cmp	r3, #2
 8003c86:	d116      	bne.n	8003cb6 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003c88:	4b7c      	ldr	r3, [pc, #496]	@ (8003e7c <HAL_RCC_OscConfig+0x504>)
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003c90:	2b00      	cmp	r3, #0
 8003c92:	d005      	beq.n	8003ca0 <HAL_RCC_OscConfig+0x328>
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	68db      	ldr	r3, [r3, #12]
 8003c98:	2b00      	cmp	r3, #0
 8003c9a:	d101      	bne.n	8003ca0 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8003c9c:	2301      	movs	r3, #1
 8003c9e:	e277      	b.n	8004190 <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003ca0:	4b76      	ldr	r3, [pc, #472]	@ (8003e7c <HAL_RCC_OscConfig+0x504>)
 8003ca2:	685b      	ldr	r3, [r3, #4]
 8003ca4:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	691b      	ldr	r3, [r3, #16]
 8003cac:	061b      	lsls	r3, r3, #24
 8003cae:	4973      	ldr	r1, [pc, #460]	@ (8003e7c <HAL_RCC_OscConfig+0x504>)
 8003cb0:	4313      	orrs	r3, r2
 8003cb2:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003cb4:	e040      	b.n	8003d38 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	68db      	ldr	r3, [r3, #12]
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	d023      	beq.n	8003d06 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003cbe:	4b6f      	ldr	r3, [pc, #444]	@ (8003e7c <HAL_RCC_OscConfig+0x504>)
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	4a6e      	ldr	r2, [pc, #440]	@ (8003e7c <HAL_RCC_OscConfig+0x504>)
 8003cc4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003cc8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003cca:	f7fe fb81 	bl	80023d0 <HAL_GetTick>
 8003cce:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003cd0:	e008      	b.n	8003ce4 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003cd2:	f7fe fb7d 	bl	80023d0 <HAL_GetTick>
 8003cd6:	4602      	mov	r2, r0
 8003cd8:	693b      	ldr	r3, [r7, #16]
 8003cda:	1ad3      	subs	r3, r2, r3
 8003cdc:	2b02      	cmp	r3, #2
 8003cde:	d901      	bls.n	8003ce4 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8003ce0:	2303      	movs	r3, #3
 8003ce2:	e255      	b.n	8004190 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003ce4:	4b65      	ldr	r3, [pc, #404]	@ (8003e7c <HAL_RCC_OscConfig+0x504>)
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	d0f0      	beq.n	8003cd2 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003cf0:	4b62      	ldr	r3, [pc, #392]	@ (8003e7c <HAL_RCC_OscConfig+0x504>)
 8003cf2:	685b      	ldr	r3, [r3, #4]
 8003cf4:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	691b      	ldr	r3, [r3, #16]
 8003cfc:	061b      	lsls	r3, r3, #24
 8003cfe:	495f      	ldr	r1, [pc, #380]	@ (8003e7c <HAL_RCC_OscConfig+0x504>)
 8003d00:	4313      	orrs	r3, r2
 8003d02:	604b      	str	r3, [r1, #4]
 8003d04:	e018      	b.n	8003d38 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003d06:	4b5d      	ldr	r3, [pc, #372]	@ (8003e7c <HAL_RCC_OscConfig+0x504>)
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	4a5c      	ldr	r2, [pc, #368]	@ (8003e7c <HAL_RCC_OscConfig+0x504>)
 8003d0c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003d10:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d12:	f7fe fb5d 	bl	80023d0 <HAL_GetTick>
 8003d16:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003d18:	e008      	b.n	8003d2c <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003d1a:	f7fe fb59 	bl	80023d0 <HAL_GetTick>
 8003d1e:	4602      	mov	r2, r0
 8003d20:	693b      	ldr	r3, [r7, #16]
 8003d22:	1ad3      	subs	r3, r2, r3
 8003d24:	2b02      	cmp	r3, #2
 8003d26:	d901      	bls.n	8003d2c <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8003d28:	2303      	movs	r3, #3
 8003d2a:	e231      	b.n	8004190 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003d2c:	4b53      	ldr	r3, [pc, #332]	@ (8003e7c <HAL_RCC_OscConfig+0x504>)
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003d34:	2b00      	cmp	r3, #0
 8003d36:	d1f0      	bne.n	8003d1a <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	f003 0308 	and.w	r3, r3, #8
 8003d40:	2b00      	cmp	r3, #0
 8003d42:	d03c      	beq.n	8003dbe <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	695b      	ldr	r3, [r3, #20]
 8003d48:	2b00      	cmp	r3, #0
 8003d4a:	d01c      	beq.n	8003d86 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003d4c:	4b4b      	ldr	r3, [pc, #300]	@ (8003e7c <HAL_RCC_OscConfig+0x504>)
 8003d4e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003d52:	4a4a      	ldr	r2, [pc, #296]	@ (8003e7c <HAL_RCC_OscConfig+0x504>)
 8003d54:	f043 0301 	orr.w	r3, r3, #1
 8003d58:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d5c:	f7fe fb38 	bl	80023d0 <HAL_GetTick>
 8003d60:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003d62:	e008      	b.n	8003d76 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003d64:	f7fe fb34 	bl	80023d0 <HAL_GetTick>
 8003d68:	4602      	mov	r2, r0
 8003d6a:	693b      	ldr	r3, [r7, #16]
 8003d6c:	1ad3      	subs	r3, r2, r3
 8003d6e:	2b02      	cmp	r3, #2
 8003d70:	d901      	bls.n	8003d76 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8003d72:	2303      	movs	r3, #3
 8003d74:	e20c      	b.n	8004190 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003d76:	4b41      	ldr	r3, [pc, #260]	@ (8003e7c <HAL_RCC_OscConfig+0x504>)
 8003d78:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003d7c:	f003 0302 	and.w	r3, r3, #2
 8003d80:	2b00      	cmp	r3, #0
 8003d82:	d0ef      	beq.n	8003d64 <HAL_RCC_OscConfig+0x3ec>
 8003d84:	e01b      	b.n	8003dbe <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003d86:	4b3d      	ldr	r3, [pc, #244]	@ (8003e7c <HAL_RCC_OscConfig+0x504>)
 8003d88:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003d8c:	4a3b      	ldr	r2, [pc, #236]	@ (8003e7c <HAL_RCC_OscConfig+0x504>)
 8003d8e:	f023 0301 	bic.w	r3, r3, #1
 8003d92:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d96:	f7fe fb1b 	bl	80023d0 <HAL_GetTick>
 8003d9a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003d9c:	e008      	b.n	8003db0 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003d9e:	f7fe fb17 	bl	80023d0 <HAL_GetTick>
 8003da2:	4602      	mov	r2, r0
 8003da4:	693b      	ldr	r3, [r7, #16]
 8003da6:	1ad3      	subs	r3, r2, r3
 8003da8:	2b02      	cmp	r3, #2
 8003daa:	d901      	bls.n	8003db0 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8003dac:	2303      	movs	r3, #3
 8003dae:	e1ef      	b.n	8004190 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003db0:	4b32      	ldr	r3, [pc, #200]	@ (8003e7c <HAL_RCC_OscConfig+0x504>)
 8003db2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003db6:	f003 0302 	and.w	r3, r3, #2
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	d1ef      	bne.n	8003d9e <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	f003 0304 	and.w	r3, r3, #4
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	f000 80a6 	beq.w	8003f18 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003dcc:	2300      	movs	r3, #0
 8003dce:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8003dd0:	4b2a      	ldr	r3, [pc, #168]	@ (8003e7c <HAL_RCC_OscConfig+0x504>)
 8003dd2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003dd4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	d10d      	bne.n	8003df8 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003ddc:	4b27      	ldr	r3, [pc, #156]	@ (8003e7c <HAL_RCC_OscConfig+0x504>)
 8003dde:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003de0:	4a26      	ldr	r2, [pc, #152]	@ (8003e7c <HAL_RCC_OscConfig+0x504>)
 8003de2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003de6:	6593      	str	r3, [r2, #88]	@ 0x58
 8003de8:	4b24      	ldr	r3, [pc, #144]	@ (8003e7c <HAL_RCC_OscConfig+0x504>)
 8003dea:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003dec:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003df0:	60bb      	str	r3, [r7, #8]
 8003df2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003df4:	2301      	movs	r3, #1
 8003df6:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003df8:	4b21      	ldr	r3, [pc, #132]	@ (8003e80 <HAL_RCC_OscConfig+0x508>)
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003e00:	2b00      	cmp	r3, #0
 8003e02:	d118      	bne.n	8003e36 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003e04:	4b1e      	ldr	r3, [pc, #120]	@ (8003e80 <HAL_RCC_OscConfig+0x508>)
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	4a1d      	ldr	r2, [pc, #116]	@ (8003e80 <HAL_RCC_OscConfig+0x508>)
 8003e0a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003e0e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003e10:	f7fe fade 	bl	80023d0 <HAL_GetTick>
 8003e14:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003e16:	e008      	b.n	8003e2a <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003e18:	f7fe fada 	bl	80023d0 <HAL_GetTick>
 8003e1c:	4602      	mov	r2, r0
 8003e1e:	693b      	ldr	r3, [r7, #16]
 8003e20:	1ad3      	subs	r3, r2, r3
 8003e22:	2b02      	cmp	r3, #2
 8003e24:	d901      	bls.n	8003e2a <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8003e26:	2303      	movs	r3, #3
 8003e28:	e1b2      	b.n	8004190 <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003e2a:	4b15      	ldr	r3, [pc, #84]	@ (8003e80 <HAL_RCC_OscConfig+0x508>)
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	d0f0      	beq.n	8003e18 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	689b      	ldr	r3, [r3, #8]
 8003e3a:	2b01      	cmp	r3, #1
 8003e3c:	d108      	bne.n	8003e50 <HAL_RCC_OscConfig+0x4d8>
 8003e3e:	4b0f      	ldr	r3, [pc, #60]	@ (8003e7c <HAL_RCC_OscConfig+0x504>)
 8003e40:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003e44:	4a0d      	ldr	r2, [pc, #52]	@ (8003e7c <HAL_RCC_OscConfig+0x504>)
 8003e46:	f043 0301 	orr.w	r3, r3, #1
 8003e4a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003e4e:	e029      	b.n	8003ea4 <HAL_RCC_OscConfig+0x52c>
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	689b      	ldr	r3, [r3, #8]
 8003e54:	2b05      	cmp	r3, #5
 8003e56:	d115      	bne.n	8003e84 <HAL_RCC_OscConfig+0x50c>
 8003e58:	4b08      	ldr	r3, [pc, #32]	@ (8003e7c <HAL_RCC_OscConfig+0x504>)
 8003e5a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003e5e:	4a07      	ldr	r2, [pc, #28]	@ (8003e7c <HAL_RCC_OscConfig+0x504>)
 8003e60:	f043 0304 	orr.w	r3, r3, #4
 8003e64:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003e68:	4b04      	ldr	r3, [pc, #16]	@ (8003e7c <HAL_RCC_OscConfig+0x504>)
 8003e6a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003e6e:	4a03      	ldr	r2, [pc, #12]	@ (8003e7c <HAL_RCC_OscConfig+0x504>)
 8003e70:	f043 0301 	orr.w	r3, r3, #1
 8003e74:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003e78:	e014      	b.n	8003ea4 <HAL_RCC_OscConfig+0x52c>
 8003e7a:	bf00      	nop
 8003e7c:	40021000 	.word	0x40021000
 8003e80:	40007000 	.word	0x40007000
 8003e84:	4b9a      	ldr	r3, [pc, #616]	@ (80040f0 <HAL_RCC_OscConfig+0x778>)
 8003e86:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003e8a:	4a99      	ldr	r2, [pc, #612]	@ (80040f0 <HAL_RCC_OscConfig+0x778>)
 8003e8c:	f023 0301 	bic.w	r3, r3, #1
 8003e90:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003e94:	4b96      	ldr	r3, [pc, #600]	@ (80040f0 <HAL_RCC_OscConfig+0x778>)
 8003e96:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003e9a:	4a95      	ldr	r2, [pc, #596]	@ (80040f0 <HAL_RCC_OscConfig+0x778>)
 8003e9c:	f023 0304 	bic.w	r3, r3, #4
 8003ea0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	689b      	ldr	r3, [r3, #8]
 8003ea8:	2b00      	cmp	r3, #0
 8003eaa:	d016      	beq.n	8003eda <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003eac:	f7fe fa90 	bl	80023d0 <HAL_GetTick>
 8003eb0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003eb2:	e00a      	b.n	8003eca <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003eb4:	f7fe fa8c 	bl	80023d0 <HAL_GetTick>
 8003eb8:	4602      	mov	r2, r0
 8003eba:	693b      	ldr	r3, [r7, #16]
 8003ebc:	1ad3      	subs	r3, r2, r3
 8003ebe:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003ec2:	4293      	cmp	r3, r2
 8003ec4:	d901      	bls.n	8003eca <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8003ec6:	2303      	movs	r3, #3
 8003ec8:	e162      	b.n	8004190 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003eca:	4b89      	ldr	r3, [pc, #548]	@ (80040f0 <HAL_RCC_OscConfig+0x778>)
 8003ecc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003ed0:	f003 0302 	and.w	r3, r3, #2
 8003ed4:	2b00      	cmp	r3, #0
 8003ed6:	d0ed      	beq.n	8003eb4 <HAL_RCC_OscConfig+0x53c>
 8003ed8:	e015      	b.n	8003f06 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003eda:	f7fe fa79 	bl	80023d0 <HAL_GetTick>
 8003ede:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003ee0:	e00a      	b.n	8003ef8 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003ee2:	f7fe fa75 	bl	80023d0 <HAL_GetTick>
 8003ee6:	4602      	mov	r2, r0
 8003ee8:	693b      	ldr	r3, [r7, #16]
 8003eea:	1ad3      	subs	r3, r2, r3
 8003eec:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003ef0:	4293      	cmp	r3, r2
 8003ef2:	d901      	bls.n	8003ef8 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8003ef4:	2303      	movs	r3, #3
 8003ef6:	e14b      	b.n	8004190 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003ef8:	4b7d      	ldr	r3, [pc, #500]	@ (80040f0 <HAL_RCC_OscConfig+0x778>)
 8003efa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003efe:	f003 0302 	and.w	r3, r3, #2
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	d1ed      	bne.n	8003ee2 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003f06:	7ffb      	ldrb	r3, [r7, #31]
 8003f08:	2b01      	cmp	r3, #1
 8003f0a:	d105      	bne.n	8003f18 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003f0c:	4b78      	ldr	r3, [pc, #480]	@ (80040f0 <HAL_RCC_OscConfig+0x778>)
 8003f0e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003f10:	4a77      	ldr	r2, [pc, #476]	@ (80040f0 <HAL_RCC_OscConfig+0x778>)
 8003f12:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003f16:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	f003 0320 	and.w	r3, r3, #32
 8003f20:	2b00      	cmp	r3, #0
 8003f22:	d03c      	beq.n	8003f9e <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f28:	2b00      	cmp	r3, #0
 8003f2a:	d01c      	beq.n	8003f66 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003f2c:	4b70      	ldr	r3, [pc, #448]	@ (80040f0 <HAL_RCC_OscConfig+0x778>)
 8003f2e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003f32:	4a6f      	ldr	r2, [pc, #444]	@ (80040f0 <HAL_RCC_OscConfig+0x778>)
 8003f34:	f043 0301 	orr.w	r3, r3, #1
 8003f38:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003f3c:	f7fe fa48 	bl	80023d0 <HAL_GetTick>
 8003f40:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003f42:	e008      	b.n	8003f56 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003f44:	f7fe fa44 	bl	80023d0 <HAL_GetTick>
 8003f48:	4602      	mov	r2, r0
 8003f4a:	693b      	ldr	r3, [r7, #16]
 8003f4c:	1ad3      	subs	r3, r2, r3
 8003f4e:	2b02      	cmp	r3, #2
 8003f50:	d901      	bls.n	8003f56 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8003f52:	2303      	movs	r3, #3
 8003f54:	e11c      	b.n	8004190 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003f56:	4b66      	ldr	r3, [pc, #408]	@ (80040f0 <HAL_RCC_OscConfig+0x778>)
 8003f58:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003f5c:	f003 0302 	and.w	r3, r3, #2
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	d0ef      	beq.n	8003f44 <HAL_RCC_OscConfig+0x5cc>
 8003f64:	e01b      	b.n	8003f9e <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003f66:	4b62      	ldr	r3, [pc, #392]	@ (80040f0 <HAL_RCC_OscConfig+0x778>)
 8003f68:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003f6c:	4a60      	ldr	r2, [pc, #384]	@ (80040f0 <HAL_RCC_OscConfig+0x778>)
 8003f6e:	f023 0301 	bic.w	r3, r3, #1
 8003f72:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003f76:	f7fe fa2b 	bl	80023d0 <HAL_GetTick>
 8003f7a:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003f7c:	e008      	b.n	8003f90 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003f7e:	f7fe fa27 	bl	80023d0 <HAL_GetTick>
 8003f82:	4602      	mov	r2, r0
 8003f84:	693b      	ldr	r3, [r7, #16]
 8003f86:	1ad3      	subs	r3, r2, r3
 8003f88:	2b02      	cmp	r3, #2
 8003f8a:	d901      	bls.n	8003f90 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8003f8c:	2303      	movs	r3, #3
 8003f8e:	e0ff      	b.n	8004190 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003f90:	4b57      	ldr	r3, [pc, #348]	@ (80040f0 <HAL_RCC_OscConfig+0x778>)
 8003f92:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003f96:	f003 0302 	and.w	r3, r3, #2
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	d1ef      	bne.n	8003f7e <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	f000 80f3 	beq.w	800418e <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003fac:	2b02      	cmp	r3, #2
 8003fae:	f040 80c9 	bne.w	8004144 <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8003fb2:	4b4f      	ldr	r3, [pc, #316]	@ (80040f0 <HAL_RCC_OscConfig+0x778>)
 8003fb4:	68db      	ldr	r3, [r3, #12]
 8003fb6:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003fb8:	697b      	ldr	r3, [r7, #20]
 8003fba:	f003 0203 	and.w	r2, r3, #3
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003fc2:	429a      	cmp	r2, r3
 8003fc4:	d12c      	bne.n	8004020 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003fc6:	697b      	ldr	r3, [r7, #20]
 8003fc8:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003fd0:	3b01      	subs	r3, #1
 8003fd2:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003fd4:	429a      	cmp	r2, r3
 8003fd6:	d123      	bne.n	8004020 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003fd8:	697b      	ldr	r3, [r7, #20]
 8003fda:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003fe2:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003fe4:	429a      	cmp	r2, r3
 8003fe6:	d11b      	bne.n	8004020 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003fe8:	697b      	ldr	r3, [r7, #20]
 8003fea:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003ff2:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003ff4:	429a      	cmp	r2, r3
 8003ff6:	d113      	bne.n	8004020 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003ff8:	697b      	ldr	r3, [r7, #20]
 8003ffa:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004002:	085b      	lsrs	r3, r3, #1
 8004004:	3b01      	subs	r3, #1
 8004006:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004008:	429a      	cmp	r2, r3
 800400a:	d109      	bne.n	8004020 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800400c:	697b      	ldr	r3, [r7, #20]
 800400e:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004016:	085b      	lsrs	r3, r3, #1
 8004018:	3b01      	subs	r3, #1
 800401a:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800401c:	429a      	cmp	r2, r3
 800401e:	d06b      	beq.n	80040f8 <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004020:	69bb      	ldr	r3, [r7, #24]
 8004022:	2b0c      	cmp	r3, #12
 8004024:	d062      	beq.n	80040ec <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8004026:	4b32      	ldr	r3, [pc, #200]	@ (80040f0 <HAL_RCC_OscConfig+0x778>)
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800402e:	2b00      	cmp	r3, #0
 8004030:	d001      	beq.n	8004036 <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 8004032:	2301      	movs	r3, #1
 8004034:	e0ac      	b.n	8004190 <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8004036:	4b2e      	ldr	r3, [pc, #184]	@ (80040f0 <HAL_RCC_OscConfig+0x778>)
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	4a2d      	ldr	r2, [pc, #180]	@ (80040f0 <HAL_RCC_OscConfig+0x778>)
 800403c:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004040:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004042:	f7fe f9c5 	bl	80023d0 <HAL_GetTick>
 8004046:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004048:	e008      	b.n	800405c <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800404a:	f7fe f9c1 	bl	80023d0 <HAL_GetTick>
 800404e:	4602      	mov	r2, r0
 8004050:	693b      	ldr	r3, [r7, #16]
 8004052:	1ad3      	subs	r3, r2, r3
 8004054:	2b02      	cmp	r3, #2
 8004056:	d901      	bls.n	800405c <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 8004058:	2303      	movs	r3, #3
 800405a:	e099      	b.n	8004190 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800405c:	4b24      	ldr	r3, [pc, #144]	@ (80040f0 <HAL_RCC_OscConfig+0x778>)
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004064:	2b00      	cmp	r3, #0
 8004066:	d1f0      	bne.n	800404a <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004068:	4b21      	ldr	r3, [pc, #132]	@ (80040f0 <HAL_RCC_OscConfig+0x778>)
 800406a:	68da      	ldr	r2, [r3, #12]
 800406c:	4b21      	ldr	r3, [pc, #132]	@ (80040f4 <HAL_RCC_OscConfig+0x77c>)
 800406e:	4013      	ands	r3, r2
 8004070:	687a      	ldr	r2, [r7, #4]
 8004072:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8004074:	687a      	ldr	r2, [r7, #4]
 8004076:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8004078:	3a01      	subs	r2, #1
 800407a:	0112      	lsls	r2, r2, #4
 800407c:	4311      	orrs	r1, r2
 800407e:	687a      	ldr	r2, [r7, #4]
 8004080:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8004082:	0212      	lsls	r2, r2, #8
 8004084:	4311      	orrs	r1, r2
 8004086:	687a      	ldr	r2, [r7, #4]
 8004088:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800408a:	0852      	lsrs	r2, r2, #1
 800408c:	3a01      	subs	r2, #1
 800408e:	0552      	lsls	r2, r2, #21
 8004090:	4311      	orrs	r1, r2
 8004092:	687a      	ldr	r2, [r7, #4]
 8004094:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8004096:	0852      	lsrs	r2, r2, #1
 8004098:	3a01      	subs	r2, #1
 800409a:	0652      	lsls	r2, r2, #25
 800409c:	4311      	orrs	r1, r2
 800409e:	687a      	ldr	r2, [r7, #4]
 80040a0:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80040a2:	06d2      	lsls	r2, r2, #27
 80040a4:	430a      	orrs	r2, r1
 80040a6:	4912      	ldr	r1, [pc, #72]	@ (80040f0 <HAL_RCC_OscConfig+0x778>)
 80040a8:	4313      	orrs	r3, r2
 80040aa:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80040ac:	4b10      	ldr	r3, [pc, #64]	@ (80040f0 <HAL_RCC_OscConfig+0x778>)
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	4a0f      	ldr	r2, [pc, #60]	@ (80040f0 <HAL_RCC_OscConfig+0x778>)
 80040b2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80040b6:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80040b8:	4b0d      	ldr	r3, [pc, #52]	@ (80040f0 <HAL_RCC_OscConfig+0x778>)
 80040ba:	68db      	ldr	r3, [r3, #12]
 80040bc:	4a0c      	ldr	r2, [pc, #48]	@ (80040f0 <HAL_RCC_OscConfig+0x778>)
 80040be:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80040c2:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80040c4:	f7fe f984 	bl	80023d0 <HAL_GetTick>
 80040c8:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80040ca:	e008      	b.n	80040de <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80040cc:	f7fe f980 	bl	80023d0 <HAL_GetTick>
 80040d0:	4602      	mov	r2, r0
 80040d2:	693b      	ldr	r3, [r7, #16]
 80040d4:	1ad3      	subs	r3, r2, r3
 80040d6:	2b02      	cmp	r3, #2
 80040d8:	d901      	bls.n	80040de <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 80040da:	2303      	movs	r3, #3
 80040dc:	e058      	b.n	8004190 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80040de:	4b04      	ldr	r3, [pc, #16]	@ (80040f0 <HAL_RCC_OscConfig+0x778>)
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	d0f0      	beq.n	80040cc <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80040ea:	e050      	b.n	800418e <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80040ec:	2301      	movs	r3, #1
 80040ee:	e04f      	b.n	8004190 <HAL_RCC_OscConfig+0x818>
 80040f0:	40021000 	.word	0x40021000
 80040f4:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80040f8:	4b27      	ldr	r3, [pc, #156]	@ (8004198 <HAL_RCC_OscConfig+0x820>)
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004100:	2b00      	cmp	r3, #0
 8004102:	d144      	bne.n	800418e <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8004104:	4b24      	ldr	r3, [pc, #144]	@ (8004198 <HAL_RCC_OscConfig+0x820>)
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	4a23      	ldr	r2, [pc, #140]	@ (8004198 <HAL_RCC_OscConfig+0x820>)
 800410a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800410e:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004110:	4b21      	ldr	r3, [pc, #132]	@ (8004198 <HAL_RCC_OscConfig+0x820>)
 8004112:	68db      	ldr	r3, [r3, #12]
 8004114:	4a20      	ldr	r2, [pc, #128]	@ (8004198 <HAL_RCC_OscConfig+0x820>)
 8004116:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800411a:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800411c:	f7fe f958 	bl	80023d0 <HAL_GetTick>
 8004120:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004122:	e008      	b.n	8004136 <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004124:	f7fe f954 	bl	80023d0 <HAL_GetTick>
 8004128:	4602      	mov	r2, r0
 800412a:	693b      	ldr	r3, [r7, #16]
 800412c:	1ad3      	subs	r3, r2, r3
 800412e:	2b02      	cmp	r3, #2
 8004130:	d901      	bls.n	8004136 <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 8004132:	2303      	movs	r3, #3
 8004134:	e02c      	b.n	8004190 <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004136:	4b18      	ldr	r3, [pc, #96]	@ (8004198 <HAL_RCC_OscConfig+0x820>)
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800413e:	2b00      	cmp	r3, #0
 8004140:	d0f0      	beq.n	8004124 <HAL_RCC_OscConfig+0x7ac>
 8004142:	e024      	b.n	800418e <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004144:	69bb      	ldr	r3, [r7, #24]
 8004146:	2b0c      	cmp	r3, #12
 8004148:	d01f      	beq.n	800418a <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800414a:	4b13      	ldr	r3, [pc, #76]	@ (8004198 <HAL_RCC_OscConfig+0x820>)
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	4a12      	ldr	r2, [pc, #72]	@ (8004198 <HAL_RCC_OscConfig+0x820>)
 8004150:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004154:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004156:	f7fe f93b 	bl	80023d0 <HAL_GetTick>
 800415a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800415c:	e008      	b.n	8004170 <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800415e:	f7fe f937 	bl	80023d0 <HAL_GetTick>
 8004162:	4602      	mov	r2, r0
 8004164:	693b      	ldr	r3, [r7, #16]
 8004166:	1ad3      	subs	r3, r2, r3
 8004168:	2b02      	cmp	r3, #2
 800416a:	d901      	bls.n	8004170 <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 800416c:	2303      	movs	r3, #3
 800416e:	e00f      	b.n	8004190 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004170:	4b09      	ldr	r3, [pc, #36]	@ (8004198 <HAL_RCC_OscConfig+0x820>)
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004178:	2b00      	cmp	r3, #0
 800417a:	d1f0      	bne.n	800415e <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 800417c:	4b06      	ldr	r3, [pc, #24]	@ (8004198 <HAL_RCC_OscConfig+0x820>)
 800417e:	68da      	ldr	r2, [r3, #12]
 8004180:	4905      	ldr	r1, [pc, #20]	@ (8004198 <HAL_RCC_OscConfig+0x820>)
 8004182:	4b06      	ldr	r3, [pc, #24]	@ (800419c <HAL_RCC_OscConfig+0x824>)
 8004184:	4013      	ands	r3, r2
 8004186:	60cb      	str	r3, [r1, #12]
 8004188:	e001      	b.n	800418e <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800418a:	2301      	movs	r3, #1
 800418c:	e000      	b.n	8004190 <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 800418e:	2300      	movs	r3, #0
}
 8004190:	4618      	mov	r0, r3
 8004192:	3720      	adds	r7, #32
 8004194:	46bd      	mov	sp, r7
 8004196:	bd80      	pop	{r7, pc}
 8004198:	40021000 	.word	0x40021000
 800419c:	feeefffc 	.word	0xfeeefffc

080041a0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80041a0:	b580      	push	{r7, lr}
 80041a2:	b084      	sub	sp, #16
 80041a4:	af00      	add	r7, sp, #0
 80041a6:	6078      	str	r0, [r7, #4]
 80041a8:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	2b00      	cmp	r3, #0
 80041ae:	d101      	bne.n	80041b4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80041b0:	2301      	movs	r3, #1
 80041b2:	e0e7      	b.n	8004384 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80041b4:	4b75      	ldr	r3, [pc, #468]	@ (800438c <HAL_RCC_ClockConfig+0x1ec>)
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	f003 0307 	and.w	r3, r3, #7
 80041bc:	683a      	ldr	r2, [r7, #0]
 80041be:	429a      	cmp	r2, r3
 80041c0:	d910      	bls.n	80041e4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80041c2:	4b72      	ldr	r3, [pc, #456]	@ (800438c <HAL_RCC_ClockConfig+0x1ec>)
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	f023 0207 	bic.w	r2, r3, #7
 80041ca:	4970      	ldr	r1, [pc, #448]	@ (800438c <HAL_RCC_ClockConfig+0x1ec>)
 80041cc:	683b      	ldr	r3, [r7, #0]
 80041ce:	4313      	orrs	r3, r2
 80041d0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80041d2:	4b6e      	ldr	r3, [pc, #440]	@ (800438c <HAL_RCC_ClockConfig+0x1ec>)
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	f003 0307 	and.w	r3, r3, #7
 80041da:	683a      	ldr	r2, [r7, #0]
 80041dc:	429a      	cmp	r2, r3
 80041de:	d001      	beq.n	80041e4 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80041e0:	2301      	movs	r3, #1
 80041e2:	e0cf      	b.n	8004384 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	f003 0302 	and.w	r3, r3, #2
 80041ec:	2b00      	cmp	r3, #0
 80041ee:	d010      	beq.n	8004212 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	689a      	ldr	r2, [r3, #8]
 80041f4:	4b66      	ldr	r3, [pc, #408]	@ (8004390 <HAL_RCC_ClockConfig+0x1f0>)
 80041f6:	689b      	ldr	r3, [r3, #8]
 80041f8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80041fc:	429a      	cmp	r2, r3
 80041fe:	d908      	bls.n	8004212 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004200:	4b63      	ldr	r3, [pc, #396]	@ (8004390 <HAL_RCC_ClockConfig+0x1f0>)
 8004202:	689b      	ldr	r3, [r3, #8]
 8004204:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	689b      	ldr	r3, [r3, #8]
 800420c:	4960      	ldr	r1, [pc, #384]	@ (8004390 <HAL_RCC_ClockConfig+0x1f0>)
 800420e:	4313      	orrs	r3, r2
 8004210:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	f003 0301 	and.w	r3, r3, #1
 800421a:	2b00      	cmp	r3, #0
 800421c:	d04c      	beq.n	80042b8 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	685b      	ldr	r3, [r3, #4]
 8004222:	2b03      	cmp	r3, #3
 8004224:	d107      	bne.n	8004236 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004226:	4b5a      	ldr	r3, [pc, #360]	@ (8004390 <HAL_RCC_ClockConfig+0x1f0>)
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800422e:	2b00      	cmp	r3, #0
 8004230:	d121      	bne.n	8004276 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8004232:	2301      	movs	r3, #1
 8004234:	e0a6      	b.n	8004384 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	685b      	ldr	r3, [r3, #4]
 800423a:	2b02      	cmp	r3, #2
 800423c:	d107      	bne.n	800424e <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800423e:	4b54      	ldr	r3, [pc, #336]	@ (8004390 <HAL_RCC_ClockConfig+0x1f0>)
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004246:	2b00      	cmp	r3, #0
 8004248:	d115      	bne.n	8004276 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800424a:	2301      	movs	r3, #1
 800424c:	e09a      	b.n	8004384 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	685b      	ldr	r3, [r3, #4]
 8004252:	2b00      	cmp	r3, #0
 8004254:	d107      	bne.n	8004266 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004256:	4b4e      	ldr	r3, [pc, #312]	@ (8004390 <HAL_RCC_ClockConfig+0x1f0>)
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	f003 0302 	and.w	r3, r3, #2
 800425e:	2b00      	cmp	r3, #0
 8004260:	d109      	bne.n	8004276 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8004262:	2301      	movs	r3, #1
 8004264:	e08e      	b.n	8004384 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004266:	4b4a      	ldr	r3, [pc, #296]	@ (8004390 <HAL_RCC_ClockConfig+0x1f0>)
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800426e:	2b00      	cmp	r3, #0
 8004270:	d101      	bne.n	8004276 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8004272:	2301      	movs	r3, #1
 8004274:	e086      	b.n	8004384 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004276:	4b46      	ldr	r3, [pc, #280]	@ (8004390 <HAL_RCC_ClockConfig+0x1f0>)
 8004278:	689b      	ldr	r3, [r3, #8]
 800427a:	f023 0203 	bic.w	r2, r3, #3
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	685b      	ldr	r3, [r3, #4]
 8004282:	4943      	ldr	r1, [pc, #268]	@ (8004390 <HAL_RCC_ClockConfig+0x1f0>)
 8004284:	4313      	orrs	r3, r2
 8004286:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004288:	f7fe f8a2 	bl	80023d0 <HAL_GetTick>
 800428c:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800428e:	e00a      	b.n	80042a6 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004290:	f7fe f89e 	bl	80023d0 <HAL_GetTick>
 8004294:	4602      	mov	r2, r0
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	1ad3      	subs	r3, r2, r3
 800429a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800429e:	4293      	cmp	r3, r2
 80042a0:	d901      	bls.n	80042a6 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 80042a2:	2303      	movs	r3, #3
 80042a4:	e06e      	b.n	8004384 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80042a6:	4b3a      	ldr	r3, [pc, #232]	@ (8004390 <HAL_RCC_ClockConfig+0x1f0>)
 80042a8:	689b      	ldr	r3, [r3, #8]
 80042aa:	f003 020c 	and.w	r2, r3, #12
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	685b      	ldr	r3, [r3, #4]
 80042b2:	009b      	lsls	r3, r3, #2
 80042b4:	429a      	cmp	r2, r3
 80042b6:	d1eb      	bne.n	8004290 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	f003 0302 	and.w	r3, r3, #2
 80042c0:	2b00      	cmp	r3, #0
 80042c2:	d010      	beq.n	80042e6 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	689a      	ldr	r2, [r3, #8]
 80042c8:	4b31      	ldr	r3, [pc, #196]	@ (8004390 <HAL_RCC_ClockConfig+0x1f0>)
 80042ca:	689b      	ldr	r3, [r3, #8]
 80042cc:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80042d0:	429a      	cmp	r2, r3
 80042d2:	d208      	bcs.n	80042e6 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80042d4:	4b2e      	ldr	r3, [pc, #184]	@ (8004390 <HAL_RCC_ClockConfig+0x1f0>)
 80042d6:	689b      	ldr	r3, [r3, #8]
 80042d8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	689b      	ldr	r3, [r3, #8]
 80042e0:	492b      	ldr	r1, [pc, #172]	@ (8004390 <HAL_RCC_ClockConfig+0x1f0>)
 80042e2:	4313      	orrs	r3, r2
 80042e4:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80042e6:	4b29      	ldr	r3, [pc, #164]	@ (800438c <HAL_RCC_ClockConfig+0x1ec>)
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	f003 0307 	and.w	r3, r3, #7
 80042ee:	683a      	ldr	r2, [r7, #0]
 80042f0:	429a      	cmp	r2, r3
 80042f2:	d210      	bcs.n	8004316 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80042f4:	4b25      	ldr	r3, [pc, #148]	@ (800438c <HAL_RCC_ClockConfig+0x1ec>)
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	f023 0207 	bic.w	r2, r3, #7
 80042fc:	4923      	ldr	r1, [pc, #140]	@ (800438c <HAL_RCC_ClockConfig+0x1ec>)
 80042fe:	683b      	ldr	r3, [r7, #0]
 8004300:	4313      	orrs	r3, r2
 8004302:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004304:	4b21      	ldr	r3, [pc, #132]	@ (800438c <HAL_RCC_ClockConfig+0x1ec>)
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	f003 0307 	and.w	r3, r3, #7
 800430c:	683a      	ldr	r2, [r7, #0]
 800430e:	429a      	cmp	r2, r3
 8004310:	d001      	beq.n	8004316 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8004312:	2301      	movs	r3, #1
 8004314:	e036      	b.n	8004384 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	f003 0304 	and.w	r3, r3, #4
 800431e:	2b00      	cmp	r3, #0
 8004320:	d008      	beq.n	8004334 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004322:	4b1b      	ldr	r3, [pc, #108]	@ (8004390 <HAL_RCC_ClockConfig+0x1f0>)
 8004324:	689b      	ldr	r3, [r3, #8]
 8004326:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	68db      	ldr	r3, [r3, #12]
 800432e:	4918      	ldr	r1, [pc, #96]	@ (8004390 <HAL_RCC_ClockConfig+0x1f0>)
 8004330:	4313      	orrs	r3, r2
 8004332:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	f003 0308 	and.w	r3, r3, #8
 800433c:	2b00      	cmp	r3, #0
 800433e:	d009      	beq.n	8004354 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004340:	4b13      	ldr	r3, [pc, #76]	@ (8004390 <HAL_RCC_ClockConfig+0x1f0>)
 8004342:	689b      	ldr	r3, [r3, #8]
 8004344:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	691b      	ldr	r3, [r3, #16]
 800434c:	00db      	lsls	r3, r3, #3
 800434e:	4910      	ldr	r1, [pc, #64]	@ (8004390 <HAL_RCC_ClockConfig+0x1f0>)
 8004350:	4313      	orrs	r3, r2
 8004352:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004354:	f000 f824 	bl	80043a0 <HAL_RCC_GetSysClockFreq>
 8004358:	4602      	mov	r2, r0
 800435a:	4b0d      	ldr	r3, [pc, #52]	@ (8004390 <HAL_RCC_ClockConfig+0x1f0>)
 800435c:	689b      	ldr	r3, [r3, #8]
 800435e:	091b      	lsrs	r3, r3, #4
 8004360:	f003 030f 	and.w	r3, r3, #15
 8004364:	490b      	ldr	r1, [pc, #44]	@ (8004394 <HAL_RCC_ClockConfig+0x1f4>)
 8004366:	5ccb      	ldrb	r3, [r1, r3]
 8004368:	f003 031f 	and.w	r3, r3, #31
 800436c:	fa22 f303 	lsr.w	r3, r2, r3
 8004370:	4a09      	ldr	r2, [pc, #36]	@ (8004398 <HAL_RCC_ClockConfig+0x1f8>)
 8004372:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8004374:	4b09      	ldr	r3, [pc, #36]	@ (800439c <HAL_RCC_ClockConfig+0x1fc>)
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	4618      	mov	r0, r3
 800437a:	f7fd ffd9 	bl	8002330 <HAL_InitTick>
 800437e:	4603      	mov	r3, r0
 8004380:	72fb      	strb	r3, [r7, #11]

  return status;
 8004382:	7afb      	ldrb	r3, [r7, #11]
}
 8004384:	4618      	mov	r0, r3
 8004386:	3710      	adds	r7, #16
 8004388:	46bd      	mov	sp, r7
 800438a:	bd80      	pop	{r7, pc}
 800438c:	40022000 	.word	0x40022000
 8004390:	40021000 	.word	0x40021000
 8004394:	08005568 	.word	0x08005568
 8004398:	20000004 	.word	0x20000004
 800439c:	20000008 	.word	0x20000008

080043a0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80043a0:	b480      	push	{r7}
 80043a2:	b089      	sub	sp, #36	@ 0x24
 80043a4:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80043a6:	2300      	movs	r3, #0
 80043a8:	61fb      	str	r3, [r7, #28]
 80043aa:	2300      	movs	r3, #0
 80043ac:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80043ae:	4b3e      	ldr	r3, [pc, #248]	@ (80044a8 <HAL_RCC_GetSysClockFreq+0x108>)
 80043b0:	689b      	ldr	r3, [r3, #8]
 80043b2:	f003 030c 	and.w	r3, r3, #12
 80043b6:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80043b8:	4b3b      	ldr	r3, [pc, #236]	@ (80044a8 <HAL_RCC_GetSysClockFreq+0x108>)
 80043ba:	68db      	ldr	r3, [r3, #12]
 80043bc:	f003 0303 	and.w	r3, r3, #3
 80043c0:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80043c2:	693b      	ldr	r3, [r7, #16]
 80043c4:	2b00      	cmp	r3, #0
 80043c6:	d005      	beq.n	80043d4 <HAL_RCC_GetSysClockFreq+0x34>
 80043c8:	693b      	ldr	r3, [r7, #16]
 80043ca:	2b0c      	cmp	r3, #12
 80043cc:	d121      	bne.n	8004412 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80043ce:	68fb      	ldr	r3, [r7, #12]
 80043d0:	2b01      	cmp	r3, #1
 80043d2:	d11e      	bne.n	8004412 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80043d4:	4b34      	ldr	r3, [pc, #208]	@ (80044a8 <HAL_RCC_GetSysClockFreq+0x108>)
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	f003 0308 	and.w	r3, r3, #8
 80043dc:	2b00      	cmp	r3, #0
 80043de:	d107      	bne.n	80043f0 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80043e0:	4b31      	ldr	r3, [pc, #196]	@ (80044a8 <HAL_RCC_GetSysClockFreq+0x108>)
 80043e2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80043e6:	0a1b      	lsrs	r3, r3, #8
 80043e8:	f003 030f 	and.w	r3, r3, #15
 80043ec:	61fb      	str	r3, [r7, #28]
 80043ee:	e005      	b.n	80043fc <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80043f0:	4b2d      	ldr	r3, [pc, #180]	@ (80044a8 <HAL_RCC_GetSysClockFreq+0x108>)
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	091b      	lsrs	r3, r3, #4
 80043f6:	f003 030f 	and.w	r3, r3, #15
 80043fa:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80043fc:	4a2b      	ldr	r2, [pc, #172]	@ (80044ac <HAL_RCC_GetSysClockFreq+0x10c>)
 80043fe:	69fb      	ldr	r3, [r7, #28]
 8004400:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004404:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004406:	693b      	ldr	r3, [r7, #16]
 8004408:	2b00      	cmp	r3, #0
 800440a:	d10d      	bne.n	8004428 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 800440c:	69fb      	ldr	r3, [r7, #28]
 800440e:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004410:	e00a      	b.n	8004428 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8004412:	693b      	ldr	r3, [r7, #16]
 8004414:	2b04      	cmp	r3, #4
 8004416:	d102      	bne.n	800441e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004418:	4b25      	ldr	r3, [pc, #148]	@ (80044b0 <HAL_RCC_GetSysClockFreq+0x110>)
 800441a:	61bb      	str	r3, [r7, #24]
 800441c:	e004      	b.n	8004428 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800441e:	693b      	ldr	r3, [r7, #16]
 8004420:	2b08      	cmp	r3, #8
 8004422:	d101      	bne.n	8004428 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004424:	4b23      	ldr	r3, [pc, #140]	@ (80044b4 <HAL_RCC_GetSysClockFreq+0x114>)
 8004426:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8004428:	693b      	ldr	r3, [r7, #16]
 800442a:	2b0c      	cmp	r3, #12
 800442c:	d134      	bne.n	8004498 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800442e:	4b1e      	ldr	r3, [pc, #120]	@ (80044a8 <HAL_RCC_GetSysClockFreq+0x108>)
 8004430:	68db      	ldr	r3, [r3, #12]
 8004432:	f003 0303 	and.w	r3, r3, #3
 8004436:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8004438:	68bb      	ldr	r3, [r7, #8]
 800443a:	2b02      	cmp	r3, #2
 800443c:	d003      	beq.n	8004446 <HAL_RCC_GetSysClockFreq+0xa6>
 800443e:	68bb      	ldr	r3, [r7, #8]
 8004440:	2b03      	cmp	r3, #3
 8004442:	d003      	beq.n	800444c <HAL_RCC_GetSysClockFreq+0xac>
 8004444:	e005      	b.n	8004452 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8004446:	4b1a      	ldr	r3, [pc, #104]	@ (80044b0 <HAL_RCC_GetSysClockFreq+0x110>)
 8004448:	617b      	str	r3, [r7, #20]
      break;
 800444a:	e005      	b.n	8004458 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 800444c:	4b19      	ldr	r3, [pc, #100]	@ (80044b4 <HAL_RCC_GetSysClockFreq+0x114>)
 800444e:	617b      	str	r3, [r7, #20]
      break;
 8004450:	e002      	b.n	8004458 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8004452:	69fb      	ldr	r3, [r7, #28]
 8004454:	617b      	str	r3, [r7, #20]
      break;
 8004456:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004458:	4b13      	ldr	r3, [pc, #76]	@ (80044a8 <HAL_RCC_GetSysClockFreq+0x108>)
 800445a:	68db      	ldr	r3, [r3, #12]
 800445c:	091b      	lsrs	r3, r3, #4
 800445e:	f003 0307 	and.w	r3, r3, #7
 8004462:	3301      	adds	r3, #1
 8004464:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8004466:	4b10      	ldr	r3, [pc, #64]	@ (80044a8 <HAL_RCC_GetSysClockFreq+0x108>)
 8004468:	68db      	ldr	r3, [r3, #12]
 800446a:	0a1b      	lsrs	r3, r3, #8
 800446c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004470:	697a      	ldr	r2, [r7, #20]
 8004472:	fb03 f202 	mul.w	r2, r3, r2
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	fbb2 f3f3 	udiv	r3, r2, r3
 800447c:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800447e:	4b0a      	ldr	r3, [pc, #40]	@ (80044a8 <HAL_RCC_GetSysClockFreq+0x108>)
 8004480:	68db      	ldr	r3, [r3, #12]
 8004482:	0e5b      	lsrs	r3, r3, #25
 8004484:	f003 0303 	and.w	r3, r3, #3
 8004488:	3301      	adds	r3, #1
 800448a:	005b      	lsls	r3, r3, #1
 800448c:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800448e:	697a      	ldr	r2, [r7, #20]
 8004490:	683b      	ldr	r3, [r7, #0]
 8004492:	fbb2 f3f3 	udiv	r3, r2, r3
 8004496:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8004498:	69bb      	ldr	r3, [r7, #24]
}
 800449a:	4618      	mov	r0, r3
 800449c:	3724      	adds	r7, #36	@ 0x24
 800449e:	46bd      	mov	sp, r7
 80044a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044a4:	4770      	bx	lr
 80044a6:	bf00      	nop
 80044a8:	40021000 	.word	0x40021000
 80044ac:	08005580 	.word	0x08005580
 80044b0:	00f42400 	.word	0x00f42400
 80044b4:	007a1200 	.word	0x007a1200

080044b8 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80044b8:	b480      	push	{r7}
 80044ba:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80044bc:	4b03      	ldr	r3, [pc, #12]	@ (80044cc <HAL_RCC_GetHCLKFreq+0x14>)
 80044be:	681b      	ldr	r3, [r3, #0]
}
 80044c0:	4618      	mov	r0, r3
 80044c2:	46bd      	mov	sp, r7
 80044c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044c8:	4770      	bx	lr
 80044ca:	bf00      	nop
 80044cc:	20000004 	.word	0x20000004

080044d0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80044d0:	b580      	push	{r7, lr}
 80044d2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80044d4:	f7ff fff0 	bl	80044b8 <HAL_RCC_GetHCLKFreq>
 80044d8:	4602      	mov	r2, r0
 80044da:	4b06      	ldr	r3, [pc, #24]	@ (80044f4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80044dc:	689b      	ldr	r3, [r3, #8]
 80044de:	0a1b      	lsrs	r3, r3, #8
 80044e0:	f003 0307 	and.w	r3, r3, #7
 80044e4:	4904      	ldr	r1, [pc, #16]	@ (80044f8 <HAL_RCC_GetPCLK1Freq+0x28>)
 80044e6:	5ccb      	ldrb	r3, [r1, r3]
 80044e8:	f003 031f 	and.w	r3, r3, #31
 80044ec:	fa22 f303 	lsr.w	r3, r2, r3
}
 80044f0:	4618      	mov	r0, r3
 80044f2:	bd80      	pop	{r7, pc}
 80044f4:	40021000 	.word	0x40021000
 80044f8:	08005578 	.word	0x08005578

080044fc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80044fc:	b580      	push	{r7, lr}
 80044fe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8004500:	f7ff ffda 	bl	80044b8 <HAL_RCC_GetHCLKFreq>
 8004504:	4602      	mov	r2, r0
 8004506:	4b06      	ldr	r3, [pc, #24]	@ (8004520 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004508:	689b      	ldr	r3, [r3, #8]
 800450a:	0adb      	lsrs	r3, r3, #11
 800450c:	f003 0307 	and.w	r3, r3, #7
 8004510:	4904      	ldr	r1, [pc, #16]	@ (8004524 <HAL_RCC_GetPCLK2Freq+0x28>)
 8004512:	5ccb      	ldrb	r3, [r1, r3]
 8004514:	f003 031f 	and.w	r3, r3, #31
 8004518:	fa22 f303 	lsr.w	r3, r2, r3
}
 800451c:	4618      	mov	r0, r3
 800451e:	bd80      	pop	{r7, pc}
 8004520:	40021000 	.word	0x40021000
 8004524:	08005578 	.word	0x08005578

08004528 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8004528:	b580      	push	{r7, lr}
 800452a:	b086      	sub	sp, #24
 800452c:	af00      	add	r7, sp, #0
 800452e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8004530:	2300      	movs	r3, #0
 8004532:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8004534:	4b2a      	ldr	r3, [pc, #168]	@ (80045e0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004536:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004538:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800453c:	2b00      	cmp	r3, #0
 800453e:	d003      	beq.n	8004548 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8004540:	f7ff f9b6 	bl	80038b0 <HAL_PWREx_GetVoltageRange>
 8004544:	6178      	str	r0, [r7, #20]
 8004546:	e014      	b.n	8004572 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8004548:	4b25      	ldr	r3, [pc, #148]	@ (80045e0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800454a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800454c:	4a24      	ldr	r2, [pc, #144]	@ (80045e0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800454e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004552:	6593      	str	r3, [r2, #88]	@ 0x58
 8004554:	4b22      	ldr	r3, [pc, #136]	@ (80045e0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004556:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004558:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800455c:	60fb      	str	r3, [r7, #12]
 800455e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8004560:	f7ff f9a6 	bl	80038b0 <HAL_PWREx_GetVoltageRange>
 8004564:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8004566:	4b1e      	ldr	r3, [pc, #120]	@ (80045e0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004568:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800456a:	4a1d      	ldr	r2, [pc, #116]	@ (80045e0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800456c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004570:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004572:	697b      	ldr	r3, [r7, #20]
 8004574:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004578:	d10b      	bne.n	8004592 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	2b80      	cmp	r3, #128	@ 0x80
 800457e:	d919      	bls.n	80045b4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	2ba0      	cmp	r3, #160	@ 0xa0
 8004584:	d902      	bls.n	800458c <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004586:	2302      	movs	r3, #2
 8004588:	613b      	str	r3, [r7, #16]
 800458a:	e013      	b.n	80045b4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800458c:	2301      	movs	r3, #1
 800458e:	613b      	str	r3, [r7, #16]
 8004590:	e010      	b.n	80045b4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	2b80      	cmp	r3, #128	@ 0x80
 8004596:	d902      	bls.n	800459e <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8004598:	2303      	movs	r3, #3
 800459a:	613b      	str	r3, [r7, #16]
 800459c:	e00a      	b.n	80045b4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	2b80      	cmp	r3, #128	@ 0x80
 80045a2:	d102      	bne.n	80045aa <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80045a4:	2302      	movs	r3, #2
 80045a6:	613b      	str	r3, [r7, #16]
 80045a8:	e004      	b.n	80045b4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	2b70      	cmp	r3, #112	@ 0x70
 80045ae:	d101      	bne.n	80045b4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80045b0:	2301      	movs	r3, #1
 80045b2:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80045b4:	4b0b      	ldr	r3, [pc, #44]	@ (80045e4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	f023 0207 	bic.w	r2, r3, #7
 80045bc:	4909      	ldr	r1, [pc, #36]	@ (80045e4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80045be:	693b      	ldr	r3, [r7, #16]
 80045c0:	4313      	orrs	r3, r2
 80045c2:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80045c4:	4b07      	ldr	r3, [pc, #28]	@ (80045e4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	f003 0307 	and.w	r3, r3, #7
 80045cc:	693a      	ldr	r2, [r7, #16]
 80045ce:	429a      	cmp	r2, r3
 80045d0:	d001      	beq.n	80045d6 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80045d2:	2301      	movs	r3, #1
 80045d4:	e000      	b.n	80045d8 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80045d6:	2300      	movs	r3, #0
}
 80045d8:	4618      	mov	r0, r3
 80045da:	3718      	adds	r7, #24
 80045dc:	46bd      	mov	sp, r7
 80045de:	bd80      	pop	{r7, pc}
 80045e0:	40021000 	.word	0x40021000
 80045e4:	40022000 	.word	0x40022000

080045e8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80045e8:	b580      	push	{r7, lr}
 80045ea:	b086      	sub	sp, #24
 80045ec:	af00      	add	r7, sp, #0
 80045ee:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80045f0:	2300      	movs	r3, #0
 80045f2:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80045f4:	2300      	movs	r3, #0
 80045f6:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004600:	2b00      	cmp	r3, #0
 8004602:	d031      	beq.n	8004668 <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004608:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 800460c:	d01a      	beq.n	8004644 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 800460e:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8004612:	d814      	bhi.n	800463e <HAL_RCCEx_PeriphCLKConfig+0x56>
 8004614:	2b00      	cmp	r3, #0
 8004616:	d009      	beq.n	800462c <HAL_RCCEx_PeriphCLKConfig+0x44>
 8004618:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800461c:	d10f      	bne.n	800463e <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 800461e:	4b5d      	ldr	r3, [pc, #372]	@ (8004794 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004620:	68db      	ldr	r3, [r3, #12]
 8004622:	4a5c      	ldr	r2, [pc, #368]	@ (8004794 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004624:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004628:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 800462a:	e00c      	b.n	8004646 <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	3304      	adds	r3, #4
 8004630:	2100      	movs	r1, #0
 8004632:	4618      	mov	r0, r3
 8004634:	f000 f9de 	bl	80049f4 <RCCEx_PLLSAI1_Config>
 8004638:	4603      	mov	r3, r0
 800463a:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800463c:	e003      	b.n	8004646 <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800463e:	2301      	movs	r3, #1
 8004640:	74fb      	strb	r3, [r7, #19]
      break;
 8004642:	e000      	b.n	8004646 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 8004644:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004646:	7cfb      	ldrb	r3, [r7, #19]
 8004648:	2b00      	cmp	r3, #0
 800464a:	d10b      	bne.n	8004664 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800464c:	4b51      	ldr	r3, [pc, #324]	@ (8004794 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800464e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004652:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800465a:	494e      	ldr	r1, [pc, #312]	@ (8004794 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800465c:	4313      	orrs	r3, r2
 800465e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8004662:	e001      	b.n	8004668 <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004664:	7cfb      	ldrb	r3, [r7, #19]
 8004666:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004670:	2b00      	cmp	r3, #0
 8004672:	f000 809e 	beq.w	80047b2 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004676:	2300      	movs	r3, #0
 8004678:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800467a:	4b46      	ldr	r3, [pc, #280]	@ (8004794 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800467c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800467e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004682:	2b00      	cmp	r3, #0
 8004684:	d101      	bne.n	800468a <HAL_RCCEx_PeriphCLKConfig+0xa2>
 8004686:	2301      	movs	r3, #1
 8004688:	e000      	b.n	800468c <HAL_RCCEx_PeriphCLKConfig+0xa4>
 800468a:	2300      	movs	r3, #0
 800468c:	2b00      	cmp	r3, #0
 800468e:	d00d      	beq.n	80046ac <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004690:	4b40      	ldr	r3, [pc, #256]	@ (8004794 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004692:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004694:	4a3f      	ldr	r2, [pc, #252]	@ (8004794 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004696:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800469a:	6593      	str	r3, [r2, #88]	@ 0x58
 800469c:	4b3d      	ldr	r3, [pc, #244]	@ (8004794 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800469e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80046a0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80046a4:	60bb      	str	r3, [r7, #8]
 80046a6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80046a8:	2301      	movs	r3, #1
 80046aa:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80046ac:	4b3a      	ldr	r3, [pc, #232]	@ (8004798 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	4a39      	ldr	r2, [pc, #228]	@ (8004798 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 80046b2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80046b6:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80046b8:	f7fd fe8a 	bl	80023d0 <HAL_GetTick>
 80046bc:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80046be:	e009      	b.n	80046d4 <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80046c0:	f7fd fe86 	bl	80023d0 <HAL_GetTick>
 80046c4:	4602      	mov	r2, r0
 80046c6:	68fb      	ldr	r3, [r7, #12]
 80046c8:	1ad3      	subs	r3, r2, r3
 80046ca:	2b02      	cmp	r3, #2
 80046cc:	d902      	bls.n	80046d4 <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 80046ce:	2303      	movs	r3, #3
 80046d0:	74fb      	strb	r3, [r7, #19]
        break;
 80046d2:	e005      	b.n	80046e0 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80046d4:	4b30      	ldr	r3, [pc, #192]	@ (8004798 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80046dc:	2b00      	cmp	r3, #0
 80046de:	d0ef      	beq.n	80046c0 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 80046e0:	7cfb      	ldrb	r3, [r7, #19]
 80046e2:	2b00      	cmp	r3, #0
 80046e4:	d15a      	bne.n	800479c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80046e6:	4b2b      	ldr	r3, [pc, #172]	@ (8004794 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80046e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80046ec:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80046f0:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80046f2:	697b      	ldr	r3, [r7, #20]
 80046f4:	2b00      	cmp	r3, #0
 80046f6:	d01e      	beq.n	8004736 <HAL_RCCEx_PeriphCLKConfig+0x14e>
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80046fc:	697a      	ldr	r2, [r7, #20]
 80046fe:	429a      	cmp	r2, r3
 8004700:	d019      	beq.n	8004736 <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004702:	4b24      	ldr	r3, [pc, #144]	@ (8004794 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004704:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004708:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800470c:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800470e:	4b21      	ldr	r3, [pc, #132]	@ (8004794 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004710:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004714:	4a1f      	ldr	r2, [pc, #124]	@ (8004794 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004716:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800471a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800471e:	4b1d      	ldr	r3, [pc, #116]	@ (8004794 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004720:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004724:	4a1b      	ldr	r2, [pc, #108]	@ (8004794 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004726:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800472a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800472e:	4a19      	ldr	r2, [pc, #100]	@ (8004794 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004730:	697b      	ldr	r3, [r7, #20]
 8004732:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004736:	697b      	ldr	r3, [r7, #20]
 8004738:	f003 0301 	and.w	r3, r3, #1
 800473c:	2b00      	cmp	r3, #0
 800473e:	d016      	beq.n	800476e <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004740:	f7fd fe46 	bl	80023d0 <HAL_GetTick>
 8004744:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004746:	e00b      	b.n	8004760 <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004748:	f7fd fe42 	bl	80023d0 <HAL_GetTick>
 800474c:	4602      	mov	r2, r0
 800474e:	68fb      	ldr	r3, [r7, #12]
 8004750:	1ad3      	subs	r3, r2, r3
 8004752:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004756:	4293      	cmp	r3, r2
 8004758:	d902      	bls.n	8004760 <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 800475a:	2303      	movs	r3, #3
 800475c:	74fb      	strb	r3, [r7, #19]
            break;
 800475e:	e006      	b.n	800476e <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004760:	4b0c      	ldr	r3, [pc, #48]	@ (8004794 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004762:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004766:	f003 0302 	and.w	r3, r3, #2
 800476a:	2b00      	cmp	r3, #0
 800476c:	d0ec      	beq.n	8004748 <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 800476e:	7cfb      	ldrb	r3, [r7, #19]
 8004770:	2b00      	cmp	r3, #0
 8004772:	d10b      	bne.n	800478c <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004774:	4b07      	ldr	r3, [pc, #28]	@ (8004794 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004776:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800477a:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004782:	4904      	ldr	r1, [pc, #16]	@ (8004794 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004784:	4313      	orrs	r3, r2
 8004786:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 800478a:	e009      	b.n	80047a0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800478c:	7cfb      	ldrb	r3, [r7, #19]
 800478e:	74bb      	strb	r3, [r7, #18]
 8004790:	e006      	b.n	80047a0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 8004792:	bf00      	nop
 8004794:	40021000 	.word	0x40021000
 8004798:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800479c:	7cfb      	ldrb	r3, [r7, #19]
 800479e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80047a0:	7c7b      	ldrb	r3, [r7, #17]
 80047a2:	2b01      	cmp	r3, #1
 80047a4:	d105      	bne.n	80047b2 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80047a6:	4b8a      	ldr	r3, [pc, #552]	@ (80049d0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80047a8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80047aa:	4a89      	ldr	r2, [pc, #548]	@ (80049d0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80047ac:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80047b0:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	f003 0301 	and.w	r3, r3, #1
 80047ba:	2b00      	cmp	r3, #0
 80047bc:	d00a      	beq.n	80047d4 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80047be:	4b84      	ldr	r3, [pc, #528]	@ (80049d0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80047c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80047c4:	f023 0203 	bic.w	r2, r3, #3
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	6a1b      	ldr	r3, [r3, #32]
 80047cc:	4980      	ldr	r1, [pc, #512]	@ (80049d0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80047ce:	4313      	orrs	r3, r2
 80047d0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	f003 0302 	and.w	r3, r3, #2
 80047dc:	2b00      	cmp	r3, #0
 80047de:	d00a      	beq.n	80047f6 <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80047e0:	4b7b      	ldr	r3, [pc, #492]	@ (80049d0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80047e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80047e6:	f023 020c 	bic.w	r2, r3, #12
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80047ee:	4978      	ldr	r1, [pc, #480]	@ (80049d0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80047f0:	4313      	orrs	r3, r2
 80047f2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	f003 0320 	and.w	r3, r3, #32
 80047fe:	2b00      	cmp	r3, #0
 8004800:	d00a      	beq.n	8004818 <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004802:	4b73      	ldr	r3, [pc, #460]	@ (80049d0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004804:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004808:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004810:	496f      	ldr	r1, [pc, #444]	@ (80049d0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004812:	4313      	orrs	r3, r2
 8004814:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004820:	2b00      	cmp	r3, #0
 8004822:	d00a      	beq.n	800483a <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004824:	4b6a      	ldr	r3, [pc, #424]	@ (80049d0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004826:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800482a:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004832:	4967      	ldr	r1, [pc, #412]	@ (80049d0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004834:	4313      	orrs	r3, r2
 8004836:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004842:	2b00      	cmp	r3, #0
 8004844:	d00a      	beq.n	800485c <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004846:	4b62      	ldr	r3, [pc, #392]	@ (80049d0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004848:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800484c:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004854:	495e      	ldr	r1, [pc, #376]	@ (80049d0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004856:	4313      	orrs	r3, r2
 8004858:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004864:	2b00      	cmp	r3, #0
 8004866:	d00a      	beq.n	800487e <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004868:	4b59      	ldr	r3, [pc, #356]	@ (80049d0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800486a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800486e:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004876:	4956      	ldr	r1, [pc, #344]	@ (80049d0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004878:	4313      	orrs	r3, r2
 800487a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004886:	2b00      	cmp	r3, #0
 8004888:	d00a      	beq.n	80048a0 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800488a:	4b51      	ldr	r3, [pc, #324]	@ (80049d0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800488c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004890:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004898:	494d      	ldr	r1, [pc, #308]	@ (80049d0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800489a:	4313      	orrs	r3, r2
 800489c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80048a8:	2b00      	cmp	r3, #0
 80048aa:	d028      	beq.n	80048fe <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80048ac:	4b48      	ldr	r3, [pc, #288]	@ (80049d0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80048ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80048b2:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80048ba:	4945      	ldr	r1, [pc, #276]	@ (80049d0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80048bc:	4313      	orrs	r3, r2
 80048be:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80048c6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80048ca:	d106      	bne.n	80048da <HAL_RCCEx_PeriphCLKConfig+0x2f2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80048cc:	4b40      	ldr	r3, [pc, #256]	@ (80049d0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80048ce:	68db      	ldr	r3, [r3, #12]
 80048d0:	4a3f      	ldr	r2, [pc, #252]	@ (80049d0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80048d2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80048d6:	60d3      	str	r3, [r2, #12]
 80048d8:	e011      	b.n	80048fe <HAL_RCCEx_PeriphCLKConfig+0x316>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80048de:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80048e2:	d10c      	bne.n	80048fe <HAL_RCCEx_PeriphCLKConfig+0x316>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	3304      	adds	r3, #4
 80048e8:	2101      	movs	r1, #1
 80048ea:	4618      	mov	r0, r3
 80048ec:	f000 f882 	bl	80049f4 <RCCEx_PLLSAI1_Config>
 80048f0:	4603      	mov	r3, r0
 80048f2:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80048f4:	7cfb      	ldrb	r3, [r7, #19]
 80048f6:	2b00      	cmp	r3, #0
 80048f8:	d001      	beq.n	80048fe <HAL_RCCEx_PeriphCLKConfig+0x316>
        {
          /* set overall return value */
          status = ret;
 80048fa:	7cfb      	ldrb	r3, [r7, #19]
 80048fc:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004906:	2b00      	cmp	r3, #0
 8004908:	d028      	beq.n	800495c <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800490a:	4b31      	ldr	r3, [pc, #196]	@ (80049d0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800490c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004910:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004918:	492d      	ldr	r1, [pc, #180]	@ (80049d0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800491a:	4313      	orrs	r3, r2
 800491c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004924:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004928:	d106      	bne.n	8004938 <HAL_RCCEx_PeriphCLKConfig+0x350>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800492a:	4b29      	ldr	r3, [pc, #164]	@ (80049d0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800492c:	68db      	ldr	r3, [r3, #12]
 800492e:	4a28      	ldr	r2, [pc, #160]	@ (80049d0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004930:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004934:	60d3      	str	r3, [r2, #12]
 8004936:	e011      	b.n	800495c <HAL_RCCEx_PeriphCLKConfig+0x374>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800493c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004940:	d10c      	bne.n	800495c <HAL_RCCEx_PeriphCLKConfig+0x374>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	3304      	adds	r3, #4
 8004946:	2101      	movs	r1, #1
 8004948:	4618      	mov	r0, r3
 800494a:	f000 f853 	bl	80049f4 <RCCEx_PLLSAI1_Config>
 800494e:	4603      	mov	r3, r0
 8004950:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004952:	7cfb      	ldrb	r3, [r7, #19]
 8004954:	2b00      	cmp	r3, #0
 8004956:	d001      	beq.n	800495c <HAL_RCCEx_PeriphCLKConfig+0x374>
      {
        /* set overall return value */
        status = ret;
 8004958:	7cfb      	ldrb	r3, [r7, #19]
 800495a:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004964:	2b00      	cmp	r3, #0
 8004966:	d01c      	beq.n	80049a2 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004968:	4b19      	ldr	r3, [pc, #100]	@ (80049d0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800496a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800496e:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004976:	4916      	ldr	r1, [pc, #88]	@ (80049d0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004978:	4313      	orrs	r3, r2
 800497a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004982:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004986:	d10c      	bne.n	80049a2 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	3304      	adds	r3, #4
 800498c:	2102      	movs	r1, #2
 800498e:	4618      	mov	r0, r3
 8004990:	f000 f830 	bl	80049f4 <RCCEx_PLLSAI1_Config>
 8004994:	4603      	mov	r3, r0
 8004996:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004998:	7cfb      	ldrb	r3, [r7, #19]
 800499a:	2b00      	cmp	r3, #0
 800499c:	d001      	beq.n	80049a2 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
      {
        /* set overall return value */
        status = ret;
 800499e:	7cfb      	ldrb	r3, [r7, #19]
 80049a0:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80049aa:	2b00      	cmp	r3, #0
 80049ac:	d00a      	beq.n	80049c4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80049ae:	4b08      	ldr	r3, [pc, #32]	@ (80049d0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80049b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80049b4:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80049bc:	4904      	ldr	r1, [pc, #16]	@ (80049d0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80049be:	4313      	orrs	r3, r2
 80049c0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80049c4:	7cbb      	ldrb	r3, [r7, #18]
}
 80049c6:	4618      	mov	r0, r3
 80049c8:	3718      	adds	r7, #24
 80049ca:	46bd      	mov	sp, r7
 80049cc:	bd80      	pop	{r7, pc}
 80049ce:	bf00      	nop
 80049d0:	40021000 	.word	0x40021000

080049d4 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 80049d4:	b480      	push	{r7}
 80049d6:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 80049d8:	4b05      	ldr	r3, [pc, #20]	@ (80049f0 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	4a04      	ldr	r2, [pc, #16]	@ (80049f0 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 80049de:	f043 0304 	orr.w	r3, r3, #4
 80049e2:	6013      	str	r3, [r2, #0]
}
 80049e4:	bf00      	nop
 80049e6:	46bd      	mov	sp, r7
 80049e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ec:	4770      	bx	lr
 80049ee:	bf00      	nop
 80049f0:	40021000 	.word	0x40021000

080049f4 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80049f4:	b580      	push	{r7, lr}
 80049f6:	b084      	sub	sp, #16
 80049f8:	af00      	add	r7, sp, #0
 80049fa:	6078      	str	r0, [r7, #4]
 80049fc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80049fe:	2300      	movs	r3, #0
 8004a00:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004a02:	4b74      	ldr	r3, [pc, #464]	@ (8004bd4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004a04:	68db      	ldr	r3, [r3, #12]
 8004a06:	f003 0303 	and.w	r3, r3, #3
 8004a0a:	2b00      	cmp	r3, #0
 8004a0c:	d018      	beq.n	8004a40 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8004a0e:	4b71      	ldr	r3, [pc, #452]	@ (8004bd4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004a10:	68db      	ldr	r3, [r3, #12]
 8004a12:	f003 0203 	and.w	r2, r3, #3
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	429a      	cmp	r2, r3
 8004a1c:	d10d      	bne.n	8004a3a <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	681b      	ldr	r3, [r3, #0]
       ||
 8004a22:	2b00      	cmp	r3, #0
 8004a24:	d009      	beq.n	8004a3a <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8004a26:	4b6b      	ldr	r3, [pc, #428]	@ (8004bd4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004a28:	68db      	ldr	r3, [r3, #12]
 8004a2a:	091b      	lsrs	r3, r3, #4
 8004a2c:	f003 0307 	and.w	r3, r3, #7
 8004a30:	1c5a      	adds	r2, r3, #1
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	685b      	ldr	r3, [r3, #4]
       ||
 8004a36:	429a      	cmp	r2, r3
 8004a38:	d047      	beq.n	8004aca <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8004a3a:	2301      	movs	r3, #1
 8004a3c:	73fb      	strb	r3, [r7, #15]
 8004a3e:	e044      	b.n	8004aca <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	2b03      	cmp	r3, #3
 8004a46:	d018      	beq.n	8004a7a <RCCEx_PLLSAI1_Config+0x86>
 8004a48:	2b03      	cmp	r3, #3
 8004a4a:	d825      	bhi.n	8004a98 <RCCEx_PLLSAI1_Config+0xa4>
 8004a4c:	2b01      	cmp	r3, #1
 8004a4e:	d002      	beq.n	8004a56 <RCCEx_PLLSAI1_Config+0x62>
 8004a50:	2b02      	cmp	r3, #2
 8004a52:	d009      	beq.n	8004a68 <RCCEx_PLLSAI1_Config+0x74>
 8004a54:	e020      	b.n	8004a98 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004a56:	4b5f      	ldr	r3, [pc, #380]	@ (8004bd4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	f003 0302 	and.w	r3, r3, #2
 8004a5e:	2b00      	cmp	r3, #0
 8004a60:	d11d      	bne.n	8004a9e <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8004a62:	2301      	movs	r3, #1
 8004a64:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004a66:	e01a      	b.n	8004a9e <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004a68:	4b5a      	ldr	r3, [pc, #360]	@ (8004bd4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004a70:	2b00      	cmp	r3, #0
 8004a72:	d116      	bne.n	8004aa2 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8004a74:	2301      	movs	r3, #1
 8004a76:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004a78:	e013      	b.n	8004aa2 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004a7a:	4b56      	ldr	r3, [pc, #344]	@ (8004bd4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004a82:	2b00      	cmp	r3, #0
 8004a84:	d10f      	bne.n	8004aa6 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004a86:	4b53      	ldr	r3, [pc, #332]	@ (8004bd4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004a8e:	2b00      	cmp	r3, #0
 8004a90:	d109      	bne.n	8004aa6 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8004a92:	2301      	movs	r3, #1
 8004a94:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004a96:	e006      	b.n	8004aa6 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8004a98:	2301      	movs	r3, #1
 8004a9a:	73fb      	strb	r3, [r7, #15]
      break;
 8004a9c:	e004      	b.n	8004aa8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004a9e:	bf00      	nop
 8004aa0:	e002      	b.n	8004aa8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004aa2:	bf00      	nop
 8004aa4:	e000      	b.n	8004aa8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004aa6:	bf00      	nop
    }

    if(status == HAL_OK)
 8004aa8:	7bfb      	ldrb	r3, [r7, #15]
 8004aaa:	2b00      	cmp	r3, #0
 8004aac:	d10d      	bne.n	8004aca <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8004aae:	4b49      	ldr	r3, [pc, #292]	@ (8004bd4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004ab0:	68db      	ldr	r3, [r3, #12]
 8004ab2:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	6819      	ldr	r1, [r3, #0]
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	685b      	ldr	r3, [r3, #4]
 8004abe:	3b01      	subs	r3, #1
 8004ac0:	011b      	lsls	r3, r3, #4
 8004ac2:	430b      	orrs	r3, r1
 8004ac4:	4943      	ldr	r1, [pc, #268]	@ (8004bd4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004ac6:	4313      	orrs	r3, r2
 8004ac8:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8004aca:	7bfb      	ldrb	r3, [r7, #15]
 8004acc:	2b00      	cmp	r3, #0
 8004ace:	d17c      	bne.n	8004bca <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8004ad0:	4b40      	ldr	r3, [pc, #256]	@ (8004bd4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	4a3f      	ldr	r2, [pc, #252]	@ (8004bd4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004ad6:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8004ada:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004adc:	f7fd fc78 	bl	80023d0 <HAL_GetTick>
 8004ae0:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004ae2:	e009      	b.n	8004af8 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004ae4:	f7fd fc74 	bl	80023d0 <HAL_GetTick>
 8004ae8:	4602      	mov	r2, r0
 8004aea:	68bb      	ldr	r3, [r7, #8]
 8004aec:	1ad3      	subs	r3, r2, r3
 8004aee:	2b02      	cmp	r3, #2
 8004af0:	d902      	bls.n	8004af8 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8004af2:	2303      	movs	r3, #3
 8004af4:	73fb      	strb	r3, [r7, #15]
        break;
 8004af6:	e005      	b.n	8004b04 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004af8:	4b36      	ldr	r3, [pc, #216]	@ (8004bd4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004b00:	2b00      	cmp	r3, #0
 8004b02:	d1ef      	bne.n	8004ae4 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8004b04:	7bfb      	ldrb	r3, [r7, #15]
 8004b06:	2b00      	cmp	r3, #0
 8004b08:	d15f      	bne.n	8004bca <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004b0a:	683b      	ldr	r3, [r7, #0]
 8004b0c:	2b00      	cmp	r3, #0
 8004b0e:	d110      	bne.n	8004b32 <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004b10:	4b30      	ldr	r3, [pc, #192]	@ (8004bd4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004b12:	691b      	ldr	r3, [r3, #16]
 8004b14:	f023 4378 	bic.w	r3, r3, #4160749568	@ 0xf8000000
 8004b18:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8004b1c:	687a      	ldr	r2, [r7, #4]
 8004b1e:	6892      	ldr	r2, [r2, #8]
 8004b20:	0211      	lsls	r1, r2, #8
 8004b22:	687a      	ldr	r2, [r7, #4]
 8004b24:	68d2      	ldr	r2, [r2, #12]
 8004b26:	06d2      	lsls	r2, r2, #27
 8004b28:	430a      	orrs	r2, r1
 8004b2a:	492a      	ldr	r1, [pc, #168]	@ (8004bd4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004b2c:	4313      	orrs	r3, r2
 8004b2e:	610b      	str	r3, [r1, #16]
 8004b30:	e027      	b.n	8004b82 <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8004b32:	683b      	ldr	r3, [r7, #0]
 8004b34:	2b01      	cmp	r3, #1
 8004b36:	d112      	bne.n	8004b5e <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004b38:	4b26      	ldr	r3, [pc, #152]	@ (8004bd4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004b3a:	691b      	ldr	r3, [r3, #16]
 8004b3c:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 8004b40:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8004b44:	687a      	ldr	r2, [r7, #4]
 8004b46:	6892      	ldr	r2, [r2, #8]
 8004b48:	0211      	lsls	r1, r2, #8
 8004b4a:	687a      	ldr	r2, [r7, #4]
 8004b4c:	6912      	ldr	r2, [r2, #16]
 8004b4e:	0852      	lsrs	r2, r2, #1
 8004b50:	3a01      	subs	r2, #1
 8004b52:	0552      	lsls	r2, r2, #21
 8004b54:	430a      	orrs	r2, r1
 8004b56:	491f      	ldr	r1, [pc, #124]	@ (8004bd4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004b58:	4313      	orrs	r3, r2
 8004b5a:	610b      	str	r3, [r1, #16]
 8004b5c:	e011      	b.n	8004b82 <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004b5e:	4b1d      	ldr	r3, [pc, #116]	@ (8004bd4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004b60:	691b      	ldr	r3, [r3, #16]
 8004b62:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8004b66:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8004b6a:	687a      	ldr	r2, [r7, #4]
 8004b6c:	6892      	ldr	r2, [r2, #8]
 8004b6e:	0211      	lsls	r1, r2, #8
 8004b70:	687a      	ldr	r2, [r7, #4]
 8004b72:	6952      	ldr	r2, [r2, #20]
 8004b74:	0852      	lsrs	r2, r2, #1
 8004b76:	3a01      	subs	r2, #1
 8004b78:	0652      	lsls	r2, r2, #25
 8004b7a:	430a      	orrs	r2, r1
 8004b7c:	4915      	ldr	r1, [pc, #84]	@ (8004bd4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004b7e:	4313      	orrs	r3, r2
 8004b80:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8004b82:	4b14      	ldr	r3, [pc, #80]	@ (8004bd4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	4a13      	ldr	r2, [pc, #76]	@ (8004bd4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004b88:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8004b8c:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004b8e:	f7fd fc1f 	bl	80023d0 <HAL_GetTick>
 8004b92:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004b94:	e009      	b.n	8004baa <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004b96:	f7fd fc1b 	bl	80023d0 <HAL_GetTick>
 8004b9a:	4602      	mov	r2, r0
 8004b9c:	68bb      	ldr	r3, [r7, #8]
 8004b9e:	1ad3      	subs	r3, r2, r3
 8004ba0:	2b02      	cmp	r3, #2
 8004ba2:	d902      	bls.n	8004baa <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 8004ba4:	2303      	movs	r3, #3
 8004ba6:	73fb      	strb	r3, [r7, #15]
          break;
 8004ba8:	e005      	b.n	8004bb6 <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004baa:	4b0a      	ldr	r3, [pc, #40]	@ (8004bd4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004bb2:	2b00      	cmp	r3, #0
 8004bb4:	d0ef      	beq.n	8004b96 <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 8004bb6:	7bfb      	ldrb	r3, [r7, #15]
 8004bb8:	2b00      	cmp	r3, #0
 8004bba:	d106      	bne.n	8004bca <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8004bbc:	4b05      	ldr	r3, [pc, #20]	@ (8004bd4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004bbe:	691a      	ldr	r2, [r3, #16]
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	699b      	ldr	r3, [r3, #24]
 8004bc4:	4903      	ldr	r1, [pc, #12]	@ (8004bd4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004bc6:	4313      	orrs	r3, r2
 8004bc8:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8004bca:	7bfb      	ldrb	r3, [r7, #15]
}
 8004bcc:	4618      	mov	r0, r3
 8004bce:	3710      	adds	r7, #16
 8004bd0:	46bd      	mov	sp, r7
 8004bd2:	bd80      	pop	{r7, pc}
 8004bd4:	40021000 	.word	0x40021000

08004bd8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004bd8:	b580      	push	{r7, lr}
 8004bda:	b082      	sub	sp, #8
 8004bdc:	af00      	add	r7, sp, #0
 8004bde:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	2b00      	cmp	r3, #0
 8004be4:	d101      	bne.n	8004bea <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004be6:	2301      	movs	r3, #1
 8004be8:	e040      	b.n	8004c6c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004bee:	2b00      	cmp	r3, #0
 8004bf0:	d106      	bne.n	8004c00 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	2200      	movs	r2, #0
 8004bf6:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004bfa:	6878      	ldr	r0, [r7, #4]
 8004bfc:	f7fd faec 	bl	80021d8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	2224      	movs	r2, #36	@ 0x24
 8004c04:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	681a      	ldr	r2, [r3, #0]
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	f022 0201 	bic.w	r2, r2, #1
 8004c14:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c1a:	2b00      	cmp	r3, #0
 8004c1c:	d002      	beq.n	8004c24 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8004c1e:	6878      	ldr	r0, [r7, #4]
 8004c20:	f000 fa54 	bl	80050cc <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004c24:	6878      	ldr	r0, [r7, #4]
 8004c26:	f000 f825 	bl	8004c74 <UART_SetConfig>
 8004c2a:	4603      	mov	r3, r0
 8004c2c:	2b01      	cmp	r3, #1
 8004c2e:	d101      	bne.n	8004c34 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8004c30:	2301      	movs	r3, #1
 8004c32:	e01b      	b.n	8004c6c <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	685a      	ldr	r2, [r3, #4]
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004c42:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	689a      	ldr	r2, [r3, #8]
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004c52:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	681a      	ldr	r2, [r3, #0]
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	f042 0201 	orr.w	r2, r2, #1
 8004c62:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004c64:	6878      	ldr	r0, [r7, #4]
 8004c66:	f000 fad3 	bl	8005210 <UART_CheckIdleState>
 8004c6a:	4603      	mov	r3, r0
}
 8004c6c:	4618      	mov	r0, r3
 8004c6e:	3708      	adds	r7, #8
 8004c70:	46bd      	mov	sp, r7
 8004c72:	bd80      	pop	{r7, pc}

08004c74 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004c74:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004c78:	b08a      	sub	sp, #40	@ 0x28
 8004c7a:	af00      	add	r7, sp, #0
 8004c7c:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004c7e:	2300      	movs	r3, #0
 8004c80:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004c84:	68fb      	ldr	r3, [r7, #12]
 8004c86:	689a      	ldr	r2, [r3, #8]
 8004c88:	68fb      	ldr	r3, [r7, #12]
 8004c8a:	691b      	ldr	r3, [r3, #16]
 8004c8c:	431a      	orrs	r2, r3
 8004c8e:	68fb      	ldr	r3, [r7, #12]
 8004c90:	695b      	ldr	r3, [r3, #20]
 8004c92:	431a      	orrs	r2, r3
 8004c94:	68fb      	ldr	r3, [r7, #12]
 8004c96:	69db      	ldr	r3, [r3, #28]
 8004c98:	4313      	orrs	r3, r2
 8004c9a:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004c9c:	68fb      	ldr	r3, [r7, #12]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	681a      	ldr	r2, [r3, #0]
 8004ca2:	4bb4      	ldr	r3, [pc, #720]	@ (8004f74 <UART_SetConfig+0x300>)
 8004ca4:	4013      	ands	r3, r2
 8004ca6:	68fa      	ldr	r2, [r7, #12]
 8004ca8:	6812      	ldr	r2, [r2, #0]
 8004caa:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8004cac:	430b      	orrs	r3, r1
 8004cae:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004cb0:	68fb      	ldr	r3, [r7, #12]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	685b      	ldr	r3, [r3, #4]
 8004cb6:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8004cba:	68fb      	ldr	r3, [r7, #12]
 8004cbc:	68da      	ldr	r2, [r3, #12]
 8004cbe:	68fb      	ldr	r3, [r7, #12]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	430a      	orrs	r2, r1
 8004cc4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004cc6:	68fb      	ldr	r3, [r7, #12]
 8004cc8:	699b      	ldr	r3, [r3, #24]
 8004cca:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004ccc:	68fb      	ldr	r3, [r7, #12]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	4aa9      	ldr	r2, [pc, #676]	@ (8004f78 <UART_SetConfig+0x304>)
 8004cd2:	4293      	cmp	r3, r2
 8004cd4:	d004      	beq.n	8004ce0 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004cd6:	68fb      	ldr	r3, [r7, #12]
 8004cd8:	6a1b      	ldr	r3, [r3, #32]
 8004cda:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004cdc:	4313      	orrs	r3, r2
 8004cde:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004ce0:	68fb      	ldr	r3, [r7, #12]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	689b      	ldr	r3, [r3, #8]
 8004ce6:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8004cea:	68fb      	ldr	r3, [r7, #12]
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004cf0:	430a      	orrs	r2, r1
 8004cf2:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004cf4:	68fb      	ldr	r3, [r7, #12]
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	4aa0      	ldr	r2, [pc, #640]	@ (8004f7c <UART_SetConfig+0x308>)
 8004cfa:	4293      	cmp	r3, r2
 8004cfc:	d126      	bne.n	8004d4c <UART_SetConfig+0xd8>
 8004cfe:	4ba0      	ldr	r3, [pc, #640]	@ (8004f80 <UART_SetConfig+0x30c>)
 8004d00:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004d04:	f003 0303 	and.w	r3, r3, #3
 8004d08:	2b03      	cmp	r3, #3
 8004d0a:	d81b      	bhi.n	8004d44 <UART_SetConfig+0xd0>
 8004d0c:	a201      	add	r2, pc, #4	@ (adr r2, 8004d14 <UART_SetConfig+0xa0>)
 8004d0e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d12:	bf00      	nop
 8004d14:	08004d25 	.word	0x08004d25
 8004d18:	08004d35 	.word	0x08004d35
 8004d1c:	08004d2d 	.word	0x08004d2d
 8004d20:	08004d3d 	.word	0x08004d3d
 8004d24:	2301      	movs	r3, #1
 8004d26:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004d2a:	e080      	b.n	8004e2e <UART_SetConfig+0x1ba>
 8004d2c:	2302      	movs	r3, #2
 8004d2e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004d32:	e07c      	b.n	8004e2e <UART_SetConfig+0x1ba>
 8004d34:	2304      	movs	r3, #4
 8004d36:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004d3a:	e078      	b.n	8004e2e <UART_SetConfig+0x1ba>
 8004d3c:	2308      	movs	r3, #8
 8004d3e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004d42:	e074      	b.n	8004e2e <UART_SetConfig+0x1ba>
 8004d44:	2310      	movs	r3, #16
 8004d46:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004d4a:	e070      	b.n	8004e2e <UART_SetConfig+0x1ba>
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	4a8c      	ldr	r2, [pc, #560]	@ (8004f84 <UART_SetConfig+0x310>)
 8004d52:	4293      	cmp	r3, r2
 8004d54:	d138      	bne.n	8004dc8 <UART_SetConfig+0x154>
 8004d56:	4b8a      	ldr	r3, [pc, #552]	@ (8004f80 <UART_SetConfig+0x30c>)
 8004d58:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004d5c:	f003 030c 	and.w	r3, r3, #12
 8004d60:	2b0c      	cmp	r3, #12
 8004d62:	d82d      	bhi.n	8004dc0 <UART_SetConfig+0x14c>
 8004d64:	a201      	add	r2, pc, #4	@ (adr r2, 8004d6c <UART_SetConfig+0xf8>)
 8004d66:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d6a:	bf00      	nop
 8004d6c:	08004da1 	.word	0x08004da1
 8004d70:	08004dc1 	.word	0x08004dc1
 8004d74:	08004dc1 	.word	0x08004dc1
 8004d78:	08004dc1 	.word	0x08004dc1
 8004d7c:	08004db1 	.word	0x08004db1
 8004d80:	08004dc1 	.word	0x08004dc1
 8004d84:	08004dc1 	.word	0x08004dc1
 8004d88:	08004dc1 	.word	0x08004dc1
 8004d8c:	08004da9 	.word	0x08004da9
 8004d90:	08004dc1 	.word	0x08004dc1
 8004d94:	08004dc1 	.word	0x08004dc1
 8004d98:	08004dc1 	.word	0x08004dc1
 8004d9c:	08004db9 	.word	0x08004db9
 8004da0:	2300      	movs	r3, #0
 8004da2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004da6:	e042      	b.n	8004e2e <UART_SetConfig+0x1ba>
 8004da8:	2302      	movs	r3, #2
 8004daa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004dae:	e03e      	b.n	8004e2e <UART_SetConfig+0x1ba>
 8004db0:	2304      	movs	r3, #4
 8004db2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004db6:	e03a      	b.n	8004e2e <UART_SetConfig+0x1ba>
 8004db8:	2308      	movs	r3, #8
 8004dba:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004dbe:	e036      	b.n	8004e2e <UART_SetConfig+0x1ba>
 8004dc0:	2310      	movs	r3, #16
 8004dc2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004dc6:	e032      	b.n	8004e2e <UART_SetConfig+0x1ba>
 8004dc8:	68fb      	ldr	r3, [r7, #12]
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	4a6a      	ldr	r2, [pc, #424]	@ (8004f78 <UART_SetConfig+0x304>)
 8004dce:	4293      	cmp	r3, r2
 8004dd0:	d12a      	bne.n	8004e28 <UART_SetConfig+0x1b4>
 8004dd2:	4b6b      	ldr	r3, [pc, #428]	@ (8004f80 <UART_SetConfig+0x30c>)
 8004dd4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004dd8:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8004ddc:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8004de0:	d01a      	beq.n	8004e18 <UART_SetConfig+0x1a4>
 8004de2:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8004de6:	d81b      	bhi.n	8004e20 <UART_SetConfig+0x1ac>
 8004de8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004dec:	d00c      	beq.n	8004e08 <UART_SetConfig+0x194>
 8004dee:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004df2:	d815      	bhi.n	8004e20 <UART_SetConfig+0x1ac>
 8004df4:	2b00      	cmp	r3, #0
 8004df6:	d003      	beq.n	8004e00 <UART_SetConfig+0x18c>
 8004df8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004dfc:	d008      	beq.n	8004e10 <UART_SetConfig+0x19c>
 8004dfe:	e00f      	b.n	8004e20 <UART_SetConfig+0x1ac>
 8004e00:	2300      	movs	r3, #0
 8004e02:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004e06:	e012      	b.n	8004e2e <UART_SetConfig+0x1ba>
 8004e08:	2302      	movs	r3, #2
 8004e0a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004e0e:	e00e      	b.n	8004e2e <UART_SetConfig+0x1ba>
 8004e10:	2304      	movs	r3, #4
 8004e12:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004e16:	e00a      	b.n	8004e2e <UART_SetConfig+0x1ba>
 8004e18:	2308      	movs	r3, #8
 8004e1a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004e1e:	e006      	b.n	8004e2e <UART_SetConfig+0x1ba>
 8004e20:	2310      	movs	r3, #16
 8004e22:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004e26:	e002      	b.n	8004e2e <UART_SetConfig+0x1ba>
 8004e28:	2310      	movs	r3, #16
 8004e2a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004e2e:	68fb      	ldr	r3, [r7, #12]
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	4a51      	ldr	r2, [pc, #324]	@ (8004f78 <UART_SetConfig+0x304>)
 8004e34:	4293      	cmp	r3, r2
 8004e36:	d17a      	bne.n	8004f2e <UART_SetConfig+0x2ba>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004e38:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8004e3c:	2b08      	cmp	r3, #8
 8004e3e:	d824      	bhi.n	8004e8a <UART_SetConfig+0x216>
 8004e40:	a201      	add	r2, pc, #4	@ (adr r2, 8004e48 <UART_SetConfig+0x1d4>)
 8004e42:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e46:	bf00      	nop
 8004e48:	08004e6d 	.word	0x08004e6d
 8004e4c:	08004e8b 	.word	0x08004e8b
 8004e50:	08004e75 	.word	0x08004e75
 8004e54:	08004e8b 	.word	0x08004e8b
 8004e58:	08004e7b 	.word	0x08004e7b
 8004e5c:	08004e8b 	.word	0x08004e8b
 8004e60:	08004e8b 	.word	0x08004e8b
 8004e64:	08004e8b 	.word	0x08004e8b
 8004e68:	08004e83 	.word	0x08004e83
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004e6c:	f7ff fb30 	bl	80044d0 <HAL_RCC_GetPCLK1Freq>
 8004e70:	61f8      	str	r0, [r7, #28]
        break;
 8004e72:	e010      	b.n	8004e96 <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004e74:	4b44      	ldr	r3, [pc, #272]	@ (8004f88 <UART_SetConfig+0x314>)
 8004e76:	61fb      	str	r3, [r7, #28]
        break;
 8004e78:	e00d      	b.n	8004e96 <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004e7a:	f7ff fa91 	bl	80043a0 <HAL_RCC_GetSysClockFreq>
 8004e7e:	61f8      	str	r0, [r7, #28]
        break;
 8004e80:	e009      	b.n	8004e96 <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004e82:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004e86:	61fb      	str	r3, [r7, #28]
        break;
 8004e88:	e005      	b.n	8004e96 <UART_SetConfig+0x222>
      default:
        pclk = 0U;
 8004e8a:	2300      	movs	r3, #0
 8004e8c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004e8e:	2301      	movs	r3, #1
 8004e90:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8004e94:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8004e96:	69fb      	ldr	r3, [r7, #28]
 8004e98:	2b00      	cmp	r3, #0
 8004e9a:	f000 8107 	beq.w	80050ac <UART_SetConfig+0x438>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004e9e:	68fb      	ldr	r3, [r7, #12]
 8004ea0:	685a      	ldr	r2, [r3, #4]
 8004ea2:	4613      	mov	r3, r2
 8004ea4:	005b      	lsls	r3, r3, #1
 8004ea6:	4413      	add	r3, r2
 8004ea8:	69fa      	ldr	r2, [r7, #28]
 8004eaa:	429a      	cmp	r2, r3
 8004eac:	d305      	bcc.n	8004eba <UART_SetConfig+0x246>
          (pclk > (4096U * huart->Init.BaudRate)))
 8004eae:	68fb      	ldr	r3, [r7, #12]
 8004eb0:	685b      	ldr	r3, [r3, #4]
 8004eb2:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004eb4:	69fa      	ldr	r2, [r7, #28]
 8004eb6:	429a      	cmp	r2, r3
 8004eb8:	d903      	bls.n	8004ec2 <UART_SetConfig+0x24e>
      {
        ret = HAL_ERROR;
 8004eba:	2301      	movs	r3, #1
 8004ebc:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8004ec0:	e0f4      	b.n	80050ac <UART_SetConfig+0x438>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8004ec2:	69fb      	ldr	r3, [r7, #28]
 8004ec4:	2200      	movs	r2, #0
 8004ec6:	461c      	mov	r4, r3
 8004ec8:	4615      	mov	r5, r2
 8004eca:	f04f 0200 	mov.w	r2, #0
 8004ece:	f04f 0300 	mov.w	r3, #0
 8004ed2:	022b      	lsls	r3, r5, #8
 8004ed4:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8004ed8:	0222      	lsls	r2, r4, #8
 8004eda:	68f9      	ldr	r1, [r7, #12]
 8004edc:	6849      	ldr	r1, [r1, #4]
 8004ede:	0849      	lsrs	r1, r1, #1
 8004ee0:	2000      	movs	r0, #0
 8004ee2:	4688      	mov	r8, r1
 8004ee4:	4681      	mov	r9, r0
 8004ee6:	eb12 0a08 	adds.w	sl, r2, r8
 8004eea:	eb43 0b09 	adc.w	fp, r3, r9
 8004eee:	68fb      	ldr	r3, [r7, #12]
 8004ef0:	685b      	ldr	r3, [r3, #4]
 8004ef2:	2200      	movs	r2, #0
 8004ef4:	603b      	str	r3, [r7, #0]
 8004ef6:	607a      	str	r2, [r7, #4]
 8004ef8:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004efc:	4650      	mov	r0, sl
 8004efe:	4659      	mov	r1, fp
 8004f00:	f7fb fd32 	bl	8000968 <__aeabi_uldivmod>
 8004f04:	4602      	mov	r2, r0
 8004f06:	460b      	mov	r3, r1
 8004f08:	4613      	mov	r3, r2
 8004f0a:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004f0c:	69bb      	ldr	r3, [r7, #24]
 8004f0e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004f12:	d308      	bcc.n	8004f26 <UART_SetConfig+0x2b2>
 8004f14:	69bb      	ldr	r3, [r7, #24]
 8004f16:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004f1a:	d204      	bcs.n	8004f26 <UART_SetConfig+0x2b2>
        {
          huart->Instance->BRR = usartdiv;
 8004f1c:	68fb      	ldr	r3, [r7, #12]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	69ba      	ldr	r2, [r7, #24]
 8004f22:	60da      	str	r2, [r3, #12]
 8004f24:	e0c2      	b.n	80050ac <UART_SetConfig+0x438>
        }
        else
        {
          ret = HAL_ERROR;
 8004f26:	2301      	movs	r3, #1
 8004f28:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8004f2c:	e0be      	b.n	80050ac <UART_SetConfig+0x438>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004f2e:	68fb      	ldr	r3, [r7, #12]
 8004f30:	69db      	ldr	r3, [r3, #28]
 8004f32:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004f36:	d16a      	bne.n	800500e <UART_SetConfig+0x39a>
  {
    switch (clocksource)
 8004f38:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8004f3c:	2b08      	cmp	r3, #8
 8004f3e:	d834      	bhi.n	8004faa <UART_SetConfig+0x336>
 8004f40:	a201      	add	r2, pc, #4	@ (adr r2, 8004f48 <UART_SetConfig+0x2d4>)
 8004f42:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f46:	bf00      	nop
 8004f48:	08004f6d 	.word	0x08004f6d
 8004f4c:	08004f8d 	.word	0x08004f8d
 8004f50:	08004f95 	.word	0x08004f95
 8004f54:	08004fab 	.word	0x08004fab
 8004f58:	08004f9b 	.word	0x08004f9b
 8004f5c:	08004fab 	.word	0x08004fab
 8004f60:	08004fab 	.word	0x08004fab
 8004f64:	08004fab 	.word	0x08004fab
 8004f68:	08004fa3 	.word	0x08004fa3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004f6c:	f7ff fab0 	bl	80044d0 <HAL_RCC_GetPCLK1Freq>
 8004f70:	61f8      	str	r0, [r7, #28]
        break;
 8004f72:	e020      	b.n	8004fb6 <UART_SetConfig+0x342>
 8004f74:	efff69f3 	.word	0xefff69f3
 8004f78:	40008000 	.word	0x40008000
 8004f7c:	40013800 	.word	0x40013800
 8004f80:	40021000 	.word	0x40021000
 8004f84:	40004400 	.word	0x40004400
 8004f88:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004f8c:	f7ff fab6 	bl	80044fc <HAL_RCC_GetPCLK2Freq>
 8004f90:	61f8      	str	r0, [r7, #28]
        break;
 8004f92:	e010      	b.n	8004fb6 <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004f94:	4b4c      	ldr	r3, [pc, #304]	@ (80050c8 <UART_SetConfig+0x454>)
 8004f96:	61fb      	str	r3, [r7, #28]
        break;
 8004f98:	e00d      	b.n	8004fb6 <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004f9a:	f7ff fa01 	bl	80043a0 <HAL_RCC_GetSysClockFreq>
 8004f9e:	61f8      	str	r0, [r7, #28]
        break;
 8004fa0:	e009      	b.n	8004fb6 <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004fa2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004fa6:	61fb      	str	r3, [r7, #28]
        break;
 8004fa8:	e005      	b.n	8004fb6 <UART_SetConfig+0x342>
      default:
        pclk = 0U;
 8004faa:	2300      	movs	r3, #0
 8004fac:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004fae:	2301      	movs	r3, #1
 8004fb0:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8004fb4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004fb6:	69fb      	ldr	r3, [r7, #28]
 8004fb8:	2b00      	cmp	r3, #0
 8004fba:	d077      	beq.n	80050ac <UART_SetConfig+0x438>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004fbc:	69fb      	ldr	r3, [r7, #28]
 8004fbe:	005a      	lsls	r2, r3, #1
 8004fc0:	68fb      	ldr	r3, [r7, #12]
 8004fc2:	685b      	ldr	r3, [r3, #4]
 8004fc4:	085b      	lsrs	r3, r3, #1
 8004fc6:	441a      	add	r2, r3
 8004fc8:	68fb      	ldr	r3, [r7, #12]
 8004fca:	685b      	ldr	r3, [r3, #4]
 8004fcc:	fbb2 f3f3 	udiv	r3, r2, r3
 8004fd0:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004fd2:	69bb      	ldr	r3, [r7, #24]
 8004fd4:	2b0f      	cmp	r3, #15
 8004fd6:	d916      	bls.n	8005006 <UART_SetConfig+0x392>
 8004fd8:	69bb      	ldr	r3, [r7, #24]
 8004fda:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004fde:	d212      	bcs.n	8005006 <UART_SetConfig+0x392>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004fe0:	69bb      	ldr	r3, [r7, #24]
 8004fe2:	b29b      	uxth	r3, r3
 8004fe4:	f023 030f 	bic.w	r3, r3, #15
 8004fe8:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004fea:	69bb      	ldr	r3, [r7, #24]
 8004fec:	085b      	lsrs	r3, r3, #1
 8004fee:	b29b      	uxth	r3, r3
 8004ff0:	f003 0307 	and.w	r3, r3, #7
 8004ff4:	b29a      	uxth	r2, r3
 8004ff6:	8afb      	ldrh	r3, [r7, #22]
 8004ff8:	4313      	orrs	r3, r2
 8004ffa:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8004ffc:	68fb      	ldr	r3, [r7, #12]
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	8afa      	ldrh	r2, [r7, #22]
 8005002:	60da      	str	r2, [r3, #12]
 8005004:	e052      	b.n	80050ac <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 8005006:	2301      	movs	r3, #1
 8005008:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 800500c:	e04e      	b.n	80050ac <UART_SetConfig+0x438>
      }
    }
  }
  else
  {
    switch (clocksource)
 800500e:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8005012:	2b08      	cmp	r3, #8
 8005014:	d827      	bhi.n	8005066 <UART_SetConfig+0x3f2>
 8005016:	a201      	add	r2, pc, #4	@ (adr r2, 800501c <UART_SetConfig+0x3a8>)
 8005018:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800501c:	08005041 	.word	0x08005041
 8005020:	08005049 	.word	0x08005049
 8005024:	08005051 	.word	0x08005051
 8005028:	08005067 	.word	0x08005067
 800502c:	08005057 	.word	0x08005057
 8005030:	08005067 	.word	0x08005067
 8005034:	08005067 	.word	0x08005067
 8005038:	08005067 	.word	0x08005067
 800503c:	0800505f 	.word	0x0800505f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005040:	f7ff fa46 	bl	80044d0 <HAL_RCC_GetPCLK1Freq>
 8005044:	61f8      	str	r0, [r7, #28]
        break;
 8005046:	e014      	b.n	8005072 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005048:	f7ff fa58 	bl	80044fc <HAL_RCC_GetPCLK2Freq>
 800504c:	61f8      	str	r0, [r7, #28]
        break;
 800504e:	e010      	b.n	8005072 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005050:	4b1d      	ldr	r3, [pc, #116]	@ (80050c8 <UART_SetConfig+0x454>)
 8005052:	61fb      	str	r3, [r7, #28]
        break;
 8005054:	e00d      	b.n	8005072 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005056:	f7ff f9a3 	bl	80043a0 <HAL_RCC_GetSysClockFreq>
 800505a:	61f8      	str	r0, [r7, #28]
        break;
 800505c:	e009      	b.n	8005072 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800505e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005062:	61fb      	str	r3, [r7, #28]
        break;
 8005064:	e005      	b.n	8005072 <UART_SetConfig+0x3fe>
      default:
        pclk = 0U;
 8005066:	2300      	movs	r3, #0
 8005068:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800506a:	2301      	movs	r3, #1
 800506c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8005070:	bf00      	nop
    }

    if (pclk != 0U)
 8005072:	69fb      	ldr	r3, [r7, #28]
 8005074:	2b00      	cmp	r3, #0
 8005076:	d019      	beq.n	80050ac <UART_SetConfig+0x438>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005078:	68fb      	ldr	r3, [r7, #12]
 800507a:	685b      	ldr	r3, [r3, #4]
 800507c:	085a      	lsrs	r2, r3, #1
 800507e:	69fb      	ldr	r3, [r7, #28]
 8005080:	441a      	add	r2, r3
 8005082:	68fb      	ldr	r3, [r7, #12]
 8005084:	685b      	ldr	r3, [r3, #4]
 8005086:	fbb2 f3f3 	udiv	r3, r2, r3
 800508a:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800508c:	69bb      	ldr	r3, [r7, #24]
 800508e:	2b0f      	cmp	r3, #15
 8005090:	d909      	bls.n	80050a6 <UART_SetConfig+0x432>
 8005092:	69bb      	ldr	r3, [r7, #24]
 8005094:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005098:	d205      	bcs.n	80050a6 <UART_SetConfig+0x432>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800509a:	69bb      	ldr	r3, [r7, #24]
 800509c:	b29a      	uxth	r2, r3
 800509e:	68fb      	ldr	r3, [r7, #12]
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	60da      	str	r2, [r3, #12]
 80050a4:	e002      	b.n	80050ac <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 80050a6:	2301      	movs	r3, #1
 80050a8:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80050ac:	68fb      	ldr	r3, [r7, #12]
 80050ae:	2200      	movs	r2, #0
 80050b0:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 80050b2:	68fb      	ldr	r3, [r7, #12]
 80050b4:	2200      	movs	r2, #0
 80050b6:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 80050b8:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 80050bc:	4618      	mov	r0, r3
 80050be:	3728      	adds	r7, #40	@ 0x28
 80050c0:	46bd      	mov	sp, r7
 80050c2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80050c6:	bf00      	nop
 80050c8:	00f42400 	.word	0x00f42400

080050cc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80050cc:	b480      	push	{r7}
 80050ce:	b083      	sub	sp, #12
 80050d0:	af00      	add	r7, sp, #0
 80050d2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80050d8:	f003 0308 	and.w	r3, r3, #8
 80050dc:	2b00      	cmp	r3, #0
 80050de:	d00a      	beq.n	80050f6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	685b      	ldr	r3, [r3, #4]
 80050e6:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	430a      	orrs	r2, r1
 80050f4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80050fa:	f003 0301 	and.w	r3, r3, #1
 80050fe:	2b00      	cmp	r3, #0
 8005100:	d00a      	beq.n	8005118 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	685b      	ldr	r3, [r3, #4]
 8005108:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	430a      	orrs	r2, r1
 8005116:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800511c:	f003 0302 	and.w	r3, r3, #2
 8005120:	2b00      	cmp	r3, #0
 8005122:	d00a      	beq.n	800513a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	685b      	ldr	r3, [r3, #4]
 800512a:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	430a      	orrs	r2, r1
 8005138:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800513e:	f003 0304 	and.w	r3, r3, #4
 8005142:	2b00      	cmp	r3, #0
 8005144:	d00a      	beq.n	800515c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	685b      	ldr	r3, [r3, #4]
 800514c:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	430a      	orrs	r2, r1
 800515a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005160:	f003 0310 	and.w	r3, r3, #16
 8005164:	2b00      	cmp	r3, #0
 8005166:	d00a      	beq.n	800517e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	689b      	ldr	r3, [r3, #8]
 800516e:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	430a      	orrs	r2, r1
 800517c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005182:	f003 0320 	and.w	r3, r3, #32
 8005186:	2b00      	cmp	r3, #0
 8005188:	d00a      	beq.n	80051a0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	689b      	ldr	r3, [r3, #8]
 8005190:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	430a      	orrs	r2, r1
 800519e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80051a4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80051a8:	2b00      	cmp	r3, #0
 80051aa:	d01a      	beq.n	80051e2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	685b      	ldr	r3, [r3, #4]
 80051b2:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	430a      	orrs	r2, r1
 80051c0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80051c6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80051ca:	d10a      	bne.n	80051e2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	685b      	ldr	r3, [r3, #4]
 80051d2:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	430a      	orrs	r2, r1
 80051e0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80051e6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80051ea:	2b00      	cmp	r3, #0
 80051ec:	d00a      	beq.n	8005204 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	685b      	ldr	r3, [r3, #4]
 80051f4:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	430a      	orrs	r2, r1
 8005202:	605a      	str	r2, [r3, #4]
  }
}
 8005204:	bf00      	nop
 8005206:	370c      	adds	r7, #12
 8005208:	46bd      	mov	sp, r7
 800520a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800520e:	4770      	bx	lr

08005210 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005210:	b580      	push	{r7, lr}
 8005212:	b098      	sub	sp, #96	@ 0x60
 8005214:	af02      	add	r7, sp, #8
 8005216:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	2200      	movs	r2, #0
 800521c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005220:	f7fd f8d6 	bl	80023d0 <HAL_GetTick>
 8005224:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	f003 0308 	and.w	r3, r3, #8
 8005230:	2b08      	cmp	r3, #8
 8005232:	d12e      	bne.n	8005292 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005234:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8005238:	9300      	str	r3, [sp, #0]
 800523a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800523c:	2200      	movs	r2, #0
 800523e:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8005242:	6878      	ldr	r0, [r7, #4]
 8005244:	f000 f88c 	bl	8005360 <UART_WaitOnFlagUntilTimeout>
 8005248:	4603      	mov	r3, r0
 800524a:	2b00      	cmp	r3, #0
 800524c:	d021      	beq.n	8005292 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005254:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005256:	e853 3f00 	ldrex	r3, [r3]
 800525a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800525c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800525e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005262:	653b      	str	r3, [r7, #80]	@ 0x50
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	461a      	mov	r2, r3
 800526a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800526c:	647b      	str	r3, [r7, #68]	@ 0x44
 800526e:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005270:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005272:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005274:	e841 2300 	strex	r3, r2, [r1]
 8005278:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800527a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800527c:	2b00      	cmp	r3, #0
 800527e:	d1e6      	bne.n	800524e <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	2220      	movs	r2, #32
 8005284:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	2200      	movs	r2, #0
 800528a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800528e:	2303      	movs	r3, #3
 8005290:	e062      	b.n	8005358 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	f003 0304 	and.w	r3, r3, #4
 800529c:	2b04      	cmp	r3, #4
 800529e:	d149      	bne.n	8005334 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80052a0:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80052a4:	9300      	str	r3, [sp, #0]
 80052a6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80052a8:	2200      	movs	r2, #0
 80052aa:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80052ae:	6878      	ldr	r0, [r7, #4]
 80052b0:	f000 f856 	bl	8005360 <UART_WaitOnFlagUntilTimeout>
 80052b4:	4603      	mov	r3, r0
 80052b6:	2b00      	cmp	r3, #0
 80052b8:	d03c      	beq.n	8005334 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80052c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80052c2:	e853 3f00 	ldrex	r3, [r3]
 80052c6:	623b      	str	r3, [r7, #32]
   return(result);
 80052c8:	6a3b      	ldr	r3, [r7, #32]
 80052ca:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80052ce:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	461a      	mov	r2, r3
 80052d6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80052d8:	633b      	str	r3, [r7, #48]	@ 0x30
 80052da:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052dc:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80052de:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80052e0:	e841 2300 	strex	r3, r2, [r1]
 80052e4:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80052e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80052e8:	2b00      	cmp	r3, #0
 80052ea:	d1e6      	bne.n	80052ba <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	3308      	adds	r3, #8
 80052f2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80052f4:	693b      	ldr	r3, [r7, #16]
 80052f6:	e853 3f00 	ldrex	r3, [r3]
 80052fa:	60fb      	str	r3, [r7, #12]
   return(result);
 80052fc:	68fb      	ldr	r3, [r7, #12]
 80052fe:	f023 0301 	bic.w	r3, r3, #1
 8005302:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	3308      	adds	r3, #8
 800530a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800530c:	61fa      	str	r2, [r7, #28]
 800530e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005310:	69b9      	ldr	r1, [r7, #24]
 8005312:	69fa      	ldr	r2, [r7, #28]
 8005314:	e841 2300 	strex	r3, r2, [r1]
 8005318:	617b      	str	r3, [r7, #20]
   return(result);
 800531a:	697b      	ldr	r3, [r7, #20]
 800531c:	2b00      	cmp	r3, #0
 800531e:	d1e5      	bne.n	80052ec <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	2220      	movs	r2, #32
 8005324:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	2200      	movs	r2, #0
 800532c:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005330:	2303      	movs	r3, #3
 8005332:	e011      	b.n	8005358 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	2220      	movs	r2, #32
 8005338:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	2220      	movs	r2, #32
 800533e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	2200      	movs	r2, #0
 8005346:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	2200      	movs	r2, #0
 800534c:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	2200      	movs	r2, #0
 8005352:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8005356:	2300      	movs	r3, #0
}
 8005358:	4618      	mov	r0, r3
 800535a:	3758      	adds	r7, #88	@ 0x58
 800535c:	46bd      	mov	sp, r7
 800535e:	bd80      	pop	{r7, pc}

08005360 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005360:	b580      	push	{r7, lr}
 8005362:	b084      	sub	sp, #16
 8005364:	af00      	add	r7, sp, #0
 8005366:	60f8      	str	r0, [r7, #12]
 8005368:	60b9      	str	r1, [r7, #8]
 800536a:	603b      	str	r3, [r7, #0]
 800536c:	4613      	mov	r3, r2
 800536e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005370:	e049      	b.n	8005406 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005372:	69bb      	ldr	r3, [r7, #24]
 8005374:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005378:	d045      	beq.n	8005406 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800537a:	f7fd f829 	bl	80023d0 <HAL_GetTick>
 800537e:	4602      	mov	r2, r0
 8005380:	683b      	ldr	r3, [r7, #0]
 8005382:	1ad3      	subs	r3, r2, r3
 8005384:	69ba      	ldr	r2, [r7, #24]
 8005386:	429a      	cmp	r2, r3
 8005388:	d302      	bcc.n	8005390 <UART_WaitOnFlagUntilTimeout+0x30>
 800538a:	69bb      	ldr	r3, [r7, #24]
 800538c:	2b00      	cmp	r3, #0
 800538e:	d101      	bne.n	8005394 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005390:	2303      	movs	r3, #3
 8005392:	e048      	b.n	8005426 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005394:	68fb      	ldr	r3, [r7, #12]
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	f003 0304 	and.w	r3, r3, #4
 800539e:	2b00      	cmp	r3, #0
 80053a0:	d031      	beq.n	8005406 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80053a2:	68fb      	ldr	r3, [r7, #12]
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	69db      	ldr	r3, [r3, #28]
 80053a8:	f003 0308 	and.w	r3, r3, #8
 80053ac:	2b08      	cmp	r3, #8
 80053ae:	d110      	bne.n	80053d2 <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80053b0:	68fb      	ldr	r3, [r7, #12]
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	2208      	movs	r2, #8
 80053b6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80053b8:	68f8      	ldr	r0, [r7, #12]
 80053ba:	f000 f838 	bl	800542e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80053be:	68fb      	ldr	r3, [r7, #12]
 80053c0:	2208      	movs	r2, #8
 80053c2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80053c6:	68fb      	ldr	r3, [r7, #12]
 80053c8:	2200      	movs	r2, #0
 80053ca:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 80053ce:	2301      	movs	r3, #1
 80053d0:	e029      	b.n	8005426 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80053d2:	68fb      	ldr	r3, [r7, #12]
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	69db      	ldr	r3, [r3, #28]
 80053d8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80053dc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80053e0:	d111      	bne.n	8005406 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80053e2:	68fb      	ldr	r3, [r7, #12]
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80053ea:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80053ec:	68f8      	ldr	r0, [r7, #12]
 80053ee:	f000 f81e 	bl	800542e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80053f2:	68fb      	ldr	r3, [r7, #12]
 80053f4:	2220      	movs	r2, #32
 80053f6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80053fa:	68fb      	ldr	r3, [r7, #12]
 80053fc:	2200      	movs	r2, #0
 80053fe:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8005402:	2303      	movs	r3, #3
 8005404:	e00f      	b.n	8005426 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005406:	68fb      	ldr	r3, [r7, #12]
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	69da      	ldr	r2, [r3, #28]
 800540c:	68bb      	ldr	r3, [r7, #8]
 800540e:	4013      	ands	r3, r2
 8005410:	68ba      	ldr	r2, [r7, #8]
 8005412:	429a      	cmp	r2, r3
 8005414:	bf0c      	ite	eq
 8005416:	2301      	moveq	r3, #1
 8005418:	2300      	movne	r3, #0
 800541a:	b2db      	uxtb	r3, r3
 800541c:	461a      	mov	r2, r3
 800541e:	79fb      	ldrb	r3, [r7, #7]
 8005420:	429a      	cmp	r2, r3
 8005422:	d0a6      	beq.n	8005372 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005424:	2300      	movs	r3, #0
}
 8005426:	4618      	mov	r0, r3
 8005428:	3710      	adds	r7, #16
 800542a:	46bd      	mov	sp, r7
 800542c:	bd80      	pop	{r7, pc}

0800542e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800542e:	b480      	push	{r7}
 8005430:	b095      	sub	sp, #84	@ 0x54
 8005432:	af00      	add	r7, sp, #0
 8005434:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800543c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800543e:	e853 3f00 	ldrex	r3, [r3]
 8005442:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8005444:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005446:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800544a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	461a      	mov	r2, r3
 8005452:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005454:	643b      	str	r3, [r7, #64]	@ 0x40
 8005456:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005458:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800545a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800545c:	e841 2300 	strex	r3, r2, [r1]
 8005460:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005462:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005464:	2b00      	cmp	r3, #0
 8005466:	d1e6      	bne.n	8005436 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	3308      	adds	r3, #8
 800546e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005470:	6a3b      	ldr	r3, [r7, #32]
 8005472:	e853 3f00 	ldrex	r3, [r3]
 8005476:	61fb      	str	r3, [r7, #28]
   return(result);
 8005478:	69fb      	ldr	r3, [r7, #28]
 800547a:	f023 0301 	bic.w	r3, r3, #1
 800547e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	3308      	adds	r3, #8
 8005486:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005488:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800548a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800548c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800548e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005490:	e841 2300 	strex	r3, r2, [r1]
 8005494:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005496:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005498:	2b00      	cmp	r3, #0
 800549a:	d1e5      	bne.n	8005468 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80054a0:	2b01      	cmp	r3, #1
 80054a2:	d118      	bne.n	80054d6 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80054aa:	68fb      	ldr	r3, [r7, #12]
 80054ac:	e853 3f00 	ldrex	r3, [r3]
 80054b0:	60bb      	str	r3, [r7, #8]
   return(result);
 80054b2:	68bb      	ldr	r3, [r7, #8]
 80054b4:	f023 0310 	bic.w	r3, r3, #16
 80054b8:	647b      	str	r3, [r7, #68]	@ 0x44
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	461a      	mov	r2, r3
 80054c0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80054c2:	61bb      	str	r3, [r7, #24]
 80054c4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80054c6:	6979      	ldr	r1, [r7, #20]
 80054c8:	69ba      	ldr	r2, [r7, #24]
 80054ca:	e841 2300 	strex	r3, r2, [r1]
 80054ce:	613b      	str	r3, [r7, #16]
   return(result);
 80054d0:	693b      	ldr	r3, [r7, #16]
 80054d2:	2b00      	cmp	r3, #0
 80054d4:	d1e6      	bne.n	80054a4 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	2220      	movs	r2, #32
 80054da:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	2200      	movs	r2, #0
 80054e2:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	2200      	movs	r2, #0
 80054e8:	669a      	str	r2, [r3, #104]	@ 0x68
}
 80054ea:	bf00      	nop
 80054ec:	3754      	adds	r7, #84	@ 0x54
 80054ee:	46bd      	mov	sp, r7
 80054f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054f4:	4770      	bx	lr

080054f6 <memset>:
 80054f6:	4402      	add	r2, r0
 80054f8:	4603      	mov	r3, r0
 80054fa:	4293      	cmp	r3, r2
 80054fc:	d100      	bne.n	8005500 <memset+0xa>
 80054fe:	4770      	bx	lr
 8005500:	f803 1b01 	strb.w	r1, [r3], #1
 8005504:	e7f9      	b.n	80054fa <memset+0x4>
	...

08005508 <__libc_init_array>:
 8005508:	b570      	push	{r4, r5, r6, lr}
 800550a:	4d0d      	ldr	r5, [pc, #52]	@ (8005540 <__libc_init_array+0x38>)
 800550c:	4c0d      	ldr	r4, [pc, #52]	@ (8005544 <__libc_init_array+0x3c>)
 800550e:	1b64      	subs	r4, r4, r5
 8005510:	10a4      	asrs	r4, r4, #2
 8005512:	2600      	movs	r6, #0
 8005514:	42a6      	cmp	r6, r4
 8005516:	d109      	bne.n	800552c <__libc_init_array+0x24>
 8005518:	4d0b      	ldr	r5, [pc, #44]	@ (8005548 <__libc_init_array+0x40>)
 800551a:	4c0c      	ldr	r4, [pc, #48]	@ (800554c <__libc_init_array+0x44>)
 800551c:	f000 f818 	bl	8005550 <_init>
 8005520:	1b64      	subs	r4, r4, r5
 8005522:	10a4      	asrs	r4, r4, #2
 8005524:	2600      	movs	r6, #0
 8005526:	42a6      	cmp	r6, r4
 8005528:	d105      	bne.n	8005536 <__libc_init_array+0x2e>
 800552a:	bd70      	pop	{r4, r5, r6, pc}
 800552c:	f855 3b04 	ldr.w	r3, [r5], #4
 8005530:	4798      	blx	r3
 8005532:	3601      	adds	r6, #1
 8005534:	e7ee      	b.n	8005514 <__libc_init_array+0xc>
 8005536:	f855 3b04 	ldr.w	r3, [r5], #4
 800553a:	4798      	blx	r3
 800553c:	3601      	adds	r6, #1
 800553e:	e7f2      	b.n	8005526 <__libc_init_array+0x1e>
 8005540:	080055b8 	.word	0x080055b8
 8005544:	080055b8 	.word	0x080055b8
 8005548:	080055b8 	.word	0x080055b8
 800554c:	080055bc 	.word	0x080055bc

08005550 <_init>:
 8005550:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005552:	bf00      	nop
 8005554:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005556:	bc08      	pop	{r3}
 8005558:	469e      	mov	lr, r3
 800555a:	4770      	bx	lr

0800555c <_fini>:
 800555c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800555e:	bf00      	nop
 8005560:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005562:	bc08      	pop	{r3}
 8005564:	469e      	mov	lr, r3
 8005566:	4770      	bx	lr
