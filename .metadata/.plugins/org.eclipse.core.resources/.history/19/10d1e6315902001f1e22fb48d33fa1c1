/*
 * AS5600.h
 *
 *  Created on: Apr 18, 2024
 *      Author: tucha
 */

#ifndef INC_AS5600_H_
#define INC_AS5600_H_

#include "stm32g4xx_hal.h"
#include "math.h"

#define AS5600_ADDRESS 0x36 << 1

#define AS5600_ANGLE 0x0E
#define AS5600_SW_DIRECTION_PIN 255
#define AS5600_CLOCK_WISE          0  //  LOW
#define AS5600_COUNTERCLOCK_WISE  1  //  HIGH

//  ERROR CODES
#define     AS5600_OK                 0
#define     AS5600_ERROR_I2C_READ_0   -100
#define     AS5600_ERROR_I2C_READ_1   -101
#define     AS5600_ERROR_I2C_READ_2   -102
#define     AS5600_ERROR_I2C_READ_3   -103
#define     AS5600_ERROR_I2C_WRITE_0  -200
#define     AS5600_ERROR_I2C_WRITE_1  -201

extern HAL_StatusTypeDef ret;
extern uint8_t reg_buf[1];
extern uint8_t buf[12];
extern uint8_t Data_buf[2];

extern uint8_t _directionPin;

//  for getAngularSpeed()
extern uint32_t _lastMeasurement;
extern int16_t  _lastAngle;

//  for readAngle() and rawAngle()
extern uint16_t _offset;

//  cumulative position counter
//  works only if the sensor is read often enough.
extern int32_t  _position;
extern int16_t  _lastPosition;

//Protected
//uint8_t  _directionPin    = 255;
//uint8_t  _direction       = AS5600_CLOCK_WISE;
extern int      _error;

typedef enum {
	Degree,
	Radian
}Angle_Unit;

typedef struct {
	I2C_HandleTypeDef *hi2cx;
	uint8_t address;
	HAL_StatusTypeDef flag;
	uint8_t RxBuffer[2];
	float gain;
	float prev_ang;
}AS5600_Structure;

HAL_StatusTypeDef AS5600_Init(AS5600_Structure *as5600, Angle_Unit unit);

//uint16_t AS5600_readRaw(AS5600_Structure *as5600);

float AS5600_Read(AS5600_Structure *as5600);

float AS5600_getCumulativePosition(AS5600_Structure *as5600);

float AS5600_resetCumulativePosition(AS5600_Structure *as5600, float position);

//int AS5600_lastError();
//
//int32_t AS5600_getRevolutions();
//
float AS5600_resetPosition(float position);

#endif /* INC_AS5600_H_ */
