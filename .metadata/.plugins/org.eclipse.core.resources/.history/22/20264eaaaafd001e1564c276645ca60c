/*
 * BNO055.c
 *
 *  Created on: Apr 18, 2024
 *      Author: 08809
 */

#include "BNO055.h"

Calibration_Stat Calibrated = {.accel=HAL_BUSY, .gyro=HAL_BUSY, .mag=HAL_BUSY};


HAL_StatusTypeDef BNO055_Init(BNO055_Structure *bno, I2C_HandleTypeDef *hi2cx, uint8_t addr, OPRMode mode)
{
	bno->TxBuffer[0] = Page_ID_00;
	bno->TxBuffer[1] = CONFIGMODE;
	bno->TxBuffer[2] = 0x20; // Reset
	bno->TxBuffer[3] = Normal_Mode;

	bno->hi2cx = hi2cx;
	bno->address = BNO055_ADD_H;
	bno->mode = mode;
	if (addr == 0) bno->address = BNO055_ADD_L;

	HAL_I2C_Mem_Write_DMA(bno->hi2cx, bno->address, PAGE_ID, 1, &bno->TxBuffer[0], 1);

	HAL_Delay(10);
	HAL_I2C_Mem_Read_DMA(bno->hi2cx, bno->address, CHIP_ID, 1, bno->RxBuffer, 1);
	if (bno->RxBuffer[0] != 0xA0) return HAL_ERROR;

	HAL_Delay(10);
	HAL_I2C_Mem_Write_DMA(bno->hi2cx, bno->address, OPR_MODE, 1, &bno->TxBuffer[1], 1);

	HAL_Delay(10);
	HAL_I2C_Mem_Write_DMA(bno->hi2cx, bno->address, SYS_TRIGGER, 1, &bno->TxBuffer[2], 1);

	HAL_Delay(30);
	HAL_I2C_Mem_Read_DMA(bno->hi2cx, bno->address, CHIP_ID, 1, bno->RxBuffer, 1);
	if (bno->RxBuffer[0] != 0xA0) return HAL_ERROR;

	HAL_Delay(10);
	HAL_I2C_Mem_Write_DMA(bno->hi2cx, bno->address, PWR_MODE, 1, &bno->TxBuffer[3], 1);

	HAL_Delay(10);
	HAL_I2C_Mem_Write_DMA(bno->hi2cx, bno->address, PAGE_ID, 1, &bno->TxBuffer[0], 1);

	HAL_Delay(10);
	HAL_I2C_Mem_Write_DMA(bno->hi2cx, bno->address, OPR_MODE, 1, &bno->mode, 1);
	HAL_Delay(20);

	return HAL_OK;
}

void BNO055_getCalibration(BNO055_Structure *bno, uint8_t *sys, uint8_t *gyro, uint8_t *accel, uint8_t *mag)
{
	bno->TxBuffer[0] = Page_ID_00;

	HAL_I2C_Mem_Write_DMA(bno->hi2cx, bno->address, PAGE_ID, 1, &bno->TxBuffer[0], 1);

	HAL_Delay(10);
	HAL_I2C_Mem_Read_DMA(bno->hi2cx, bno->address, CALIB_STAT, 1, bno->RxBuffer, 1);


	if (sys != NULL) {
		*sys = (bno->RxBuffer[0] >> 6) & 0x03;
	}
	if (gyro != NULL) {
		*gyro = (bno->RxBuffer[0] >> 4) & 0x03;
	}
	if (accel != NULL) {
		*accel = (bno->RxBuffer[0] >> 2) & 0x03;
	}
	if (mag != NULL) {
		*mag = bno->RxBuffer[0] & 0x03;
	}
}

HAL_StatusTypeDef BNO055_isFullyCalibrated(BNO055_Structure *bno)
{
	uint8_t system, gyro, accel, mag;

	BNO055_getCalibration(bno, &system, &gyro, &accel, &mag);

	switch(bno->mode){
	case ACCONLY:
		if(accel == 3) return HAL_OK;
	case MAGONLY:
		if(mag == 3) return HAL_OK;
	case GYROONLY:
		if(gyro == 3) return HAL_OK;
	case ACCMAG:
		if(accel == 3 && mag == 3) return HAL_OK;
		else if (accel == 3) Calibrated.accel = HAL_OK;
		else if (mag == 3) Calibrated.mag = HAL_OK;
	case ACCGYRO:
		if(accel == 3 && gyro == 3) return HAL_OK;
		else if (accel == 3) Calibrated.accel = HAL_OK;
		else if (gyro) Calibrated.gyro = HAL_OK;
	case MAGGYRO:
		if(mag == 3 && gyro == 3) return HAL_OK;
		else if (mag == 3) Calibrated.mag = HAL_OK;
		else if (gyro) Calibrated.gyro = HAL_OK;
	case AMG:
		if(accel == 3 && mag == 3 && gyro == 3) return HAL_OK;
		else if (accel == 3) Calibrated.accel = HAL_OK;
		else if (mag == 3) Calibrated.mag = HAL_OK;
		else if (gyro) Calibrated.gyro = HAL_OK;
	case IMU:
		if(accel == 3 && gyro == 3) return HAL_OK;
		else if (accel == 3) Calibrated.accel = HAL_OK;
		else if (gyro == 3) Calibrated.gyro = HAL_OK;
	case COMPASS:
		if(accel == 3 && mag == 3) return HAL_OK;
		else if (accel == 3) Calibrated.accel = HAL_OK;
		else if (mag == 3) Calibrated.mag = HAL_OK;
	case M4G:
		if(accel == 3 && mag == 3) return HAL_OK;
		else if (accel == 3) Calibrated.accel = HAL_OK;
		else if (mag == 3) Calibrated.mag = HAL_OK;
	case NDOF_FMC_OFF:
		if(accel == 3 && mag == 3 && gyro == 3) return HAL_OK;
		else if (accel == 3) Calibrated.accel = HAL_OK;
		else if (mag == 3) Calibrated.mag = HAL_OK;
		else if (gyro) Calibrated.gyro = HAL_OK;
	case NDOF:
		if(accel == 3 && mag == 3 && gyro == 3) return HAL_OK;
		else if (accel == 3) Calibrated.accel = HAL_OK;
		else if (mag == 3) Calibrated.mag = HAL_OK;
		else if (gyro) Calibrated.gyro = HAL_OK;
	default:
		if(accel == 3 && mag == 3 && gyro == 3) return HAL_OK;
		else if (accel == 3) Calibrated.accel = HAL_OK;
		else if (mag == 3) Calibrated.mag = HAL_OK;
		else if (gyro) Calibrated.gyro = HAL_OK;
	}

	return HAL_ERROR;
}

void BNO055_setMode(BNO055_Structure *bno, OPRMode *mode)
{
	HAL_I2C_Mem_Write_DMA(bno->hi2cx, bno->address, OPR_MODE, 1, mode, 1);
	HAL_Delay(20);
}

void BNO055_read8(BNO055_Structure *bno, uint8_t *Register_Address)
{
	uint16_t *Register_Address_u16 = (uint16_t *)Register_Address;
	HAL_I2C_Mem_Read_DMA(bno->hi2cx, bno->address, &Register_Address_u16, 1, bno->RxBuffer, 1);
	HAL_Delay(20);
}

void BNO055_getSensorOffsets(BNO055_Structure *bno)
{
	if (BNO055_isFullyCalibrated(bno) == HAL_OK){
		BNO055_setMode(bno, CONFIGMODE);

		HAL_I2C_Mem_Read_DMA(bno->hi2cx, bno->address, ACC_OFFSET_X_MSB, 1, bno->RxBuffer, 1);
//		bno->offsets.accel_offset_x = (bno->RxBuffer[0]<<8 |)
//		ACC_OFFSET_X_LSB
//		ACC_OFFSET_X_MSB
	}
}



