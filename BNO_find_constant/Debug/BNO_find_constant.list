
BNO_find_constant.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005828  0800018c  0800018c  0000118c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000048  080059b4  080059b4  000069b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080059fc  080059fc  0000700c  2**0
                  CONTENTS
  4 .ARM          00000008  080059fc  080059fc  000069fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005a04  08005a04  0000700c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005a04  08005a04  00006a04  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08005a08  08005a08  00006a08  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08005a0c  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000424  2000000c  08005a18  0000700c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000430  08005a18  00007430  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000700c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001a44a  00000000  00000000  0000703c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000033cd  00000000  00000000  00021486  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001a78  00000000  00000000  00024858  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000014cf  00000000  00000000  000262d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002301d  00000000  00000000  0002779f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00020049  00000000  00000000  0004a7bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d44d1  00000000  00000000  0006a805  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0013ecd6  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000071f4  00000000  00000000  0013ed1c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000007e  00000000  00000000  00145f10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800018c <__do_global_dtors_aux>:
 800018c:	b510      	push	{r4, lr}
 800018e:	4c05      	ldr	r4, [pc, #20]	@ (80001a4 <__do_global_dtors_aux+0x18>)
 8000190:	7823      	ldrb	r3, [r4, #0]
 8000192:	b933      	cbnz	r3, 80001a2 <__do_global_dtors_aux+0x16>
 8000194:	4b04      	ldr	r3, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x1c>)
 8000196:	b113      	cbz	r3, 800019e <__do_global_dtors_aux+0x12>
 8000198:	4804      	ldr	r0, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x20>)
 800019a:	f3af 8000 	nop.w
 800019e:	2301      	movs	r3, #1
 80001a0:	7023      	strb	r3, [r4, #0]
 80001a2:	bd10      	pop	{r4, pc}
 80001a4:	2000000c 	.word	0x2000000c
 80001a8:	00000000 	.word	0x00000000
 80001ac:	0800599c 	.word	0x0800599c

080001b0 <frame_dummy>:
 80001b0:	b508      	push	{r3, lr}
 80001b2:	4b03      	ldr	r3, [pc, #12]	@ (80001c0 <frame_dummy+0x10>)
 80001b4:	b11b      	cbz	r3, 80001be <frame_dummy+0xe>
 80001b6:	4903      	ldr	r1, [pc, #12]	@ (80001c4 <frame_dummy+0x14>)
 80001b8:	4803      	ldr	r0, [pc, #12]	@ (80001c8 <frame_dummy+0x18>)
 80001ba:	f3af 8000 	nop.w
 80001be:	bd08      	pop	{r3, pc}
 80001c0:	00000000 	.word	0x00000000
 80001c4:	20000010 	.word	0x20000010
 80001c8:	0800599c 	.word	0x0800599c

080001cc <__aeabi_uldivmod>:
 80001cc:	b953      	cbnz	r3, 80001e4 <__aeabi_uldivmod+0x18>
 80001ce:	b94a      	cbnz	r2, 80001e4 <__aeabi_uldivmod+0x18>
 80001d0:	2900      	cmp	r1, #0
 80001d2:	bf08      	it	eq
 80001d4:	2800      	cmpeq	r0, #0
 80001d6:	bf1c      	itt	ne
 80001d8:	f04f 31ff 	movne.w	r1, #4294967295
 80001dc:	f04f 30ff 	movne.w	r0, #4294967295
 80001e0:	f000 b96a 	b.w	80004b8 <__aeabi_idiv0>
 80001e4:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001ec:	f000 f806 	bl	80001fc <__udivmoddi4>
 80001f0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f8:	b004      	add	sp, #16
 80001fa:	4770      	bx	lr

080001fc <__udivmoddi4>:
 80001fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000200:	9d08      	ldr	r5, [sp, #32]
 8000202:	460c      	mov	r4, r1
 8000204:	2b00      	cmp	r3, #0
 8000206:	d14e      	bne.n	80002a6 <__udivmoddi4+0xaa>
 8000208:	4694      	mov	ip, r2
 800020a:	458c      	cmp	ip, r1
 800020c:	4686      	mov	lr, r0
 800020e:	fab2 f282 	clz	r2, r2
 8000212:	d962      	bls.n	80002da <__udivmoddi4+0xde>
 8000214:	b14a      	cbz	r2, 800022a <__udivmoddi4+0x2e>
 8000216:	f1c2 0320 	rsb	r3, r2, #32
 800021a:	4091      	lsls	r1, r2
 800021c:	fa20 f303 	lsr.w	r3, r0, r3
 8000220:	fa0c fc02 	lsl.w	ip, ip, r2
 8000224:	4319      	orrs	r1, r3
 8000226:	fa00 fe02 	lsl.w	lr, r0, r2
 800022a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800022e:	fa1f f68c 	uxth.w	r6, ip
 8000232:	fbb1 f4f7 	udiv	r4, r1, r7
 8000236:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800023a:	fb07 1114 	mls	r1, r7, r4, r1
 800023e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000242:	fb04 f106 	mul.w	r1, r4, r6
 8000246:	4299      	cmp	r1, r3
 8000248:	d90a      	bls.n	8000260 <__udivmoddi4+0x64>
 800024a:	eb1c 0303 	adds.w	r3, ip, r3
 800024e:	f104 30ff 	add.w	r0, r4, #4294967295
 8000252:	f080 8112 	bcs.w	800047a <__udivmoddi4+0x27e>
 8000256:	4299      	cmp	r1, r3
 8000258:	f240 810f 	bls.w	800047a <__udivmoddi4+0x27e>
 800025c:	3c02      	subs	r4, #2
 800025e:	4463      	add	r3, ip
 8000260:	1a59      	subs	r1, r3, r1
 8000262:	fa1f f38e 	uxth.w	r3, lr
 8000266:	fbb1 f0f7 	udiv	r0, r1, r7
 800026a:	fb07 1110 	mls	r1, r7, r0, r1
 800026e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000272:	fb00 f606 	mul.w	r6, r0, r6
 8000276:	429e      	cmp	r6, r3
 8000278:	d90a      	bls.n	8000290 <__udivmoddi4+0x94>
 800027a:	eb1c 0303 	adds.w	r3, ip, r3
 800027e:	f100 31ff 	add.w	r1, r0, #4294967295
 8000282:	f080 80fc 	bcs.w	800047e <__udivmoddi4+0x282>
 8000286:	429e      	cmp	r6, r3
 8000288:	f240 80f9 	bls.w	800047e <__udivmoddi4+0x282>
 800028c:	4463      	add	r3, ip
 800028e:	3802      	subs	r0, #2
 8000290:	1b9b      	subs	r3, r3, r6
 8000292:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000296:	2100      	movs	r1, #0
 8000298:	b11d      	cbz	r5, 80002a2 <__udivmoddi4+0xa6>
 800029a:	40d3      	lsrs	r3, r2
 800029c:	2200      	movs	r2, #0
 800029e:	e9c5 3200 	strd	r3, r2, [r5]
 80002a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a6:	428b      	cmp	r3, r1
 80002a8:	d905      	bls.n	80002b6 <__udivmoddi4+0xba>
 80002aa:	b10d      	cbz	r5, 80002b0 <__udivmoddi4+0xb4>
 80002ac:	e9c5 0100 	strd	r0, r1, [r5]
 80002b0:	2100      	movs	r1, #0
 80002b2:	4608      	mov	r0, r1
 80002b4:	e7f5      	b.n	80002a2 <__udivmoddi4+0xa6>
 80002b6:	fab3 f183 	clz	r1, r3
 80002ba:	2900      	cmp	r1, #0
 80002bc:	d146      	bne.n	800034c <__udivmoddi4+0x150>
 80002be:	42a3      	cmp	r3, r4
 80002c0:	d302      	bcc.n	80002c8 <__udivmoddi4+0xcc>
 80002c2:	4290      	cmp	r0, r2
 80002c4:	f0c0 80f0 	bcc.w	80004a8 <__udivmoddi4+0x2ac>
 80002c8:	1a86      	subs	r6, r0, r2
 80002ca:	eb64 0303 	sbc.w	r3, r4, r3
 80002ce:	2001      	movs	r0, #1
 80002d0:	2d00      	cmp	r5, #0
 80002d2:	d0e6      	beq.n	80002a2 <__udivmoddi4+0xa6>
 80002d4:	e9c5 6300 	strd	r6, r3, [r5]
 80002d8:	e7e3      	b.n	80002a2 <__udivmoddi4+0xa6>
 80002da:	2a00      	cmp	r2, #0
 80002dc:	f040 8090 	bne.w	8000400 <__udivmoddi4+0x204>
 80002e0:	eba1 040c 	sub.w	r4, r1, ip
 80002e4:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002e8:	fa1f f78c 	uxth.w	r7, ip
 80002ec:	2101      	movs	r1, #1
 80002ee:	fbb4 f6f8 	udiv	r6, r4, r8
 80002f2:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002f6:	fb08 4416 	mls	r4, r8, r6, r4
 80002fa:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80002fe:	fb07 f006 	mul.w	r0, r7, r6
 8000302:	4298      	cmp	r0, r3
 8000304:	d908      	bls.n	8000318 <__udivmoddi4+0x11c>
 8000306:	eb1c 0303 	adds.w	r3, ip, r3
 800030a:	f106 34ff 	add.w	r4, r6, #4294967295
 800030e:	d202      	bcs.n	8000316 <__udivmoddi4+0x11a>
 8000310:	4298      	cmp	r0, r3
 8000312:	f200 80cd 	bhi.w	80004b0 <__udivmoddi4+0x2b4>
 8000316:	4626      	mov	r6, r4
 8000318:	1a1c      	subs	r4, r3, r0
 800031a:	fa1f f38e 	uxth.w	r3, lr
 800031e:	fbb4 f0f8 	udiv	r0, r4, r8
 8000322:	fb08 4410 	mls	r4, r8, r0, r4
 8000326:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800032a:	fb00 f707 	mul.w	r7, r0, r7
 800032e:	429f      	cmp	r7, r3
 8000330:	d908      	bls.n	8000344 <__udivmoddi4+0x148>
 8000332:	eb1c 0303 	adds.w	r3, ip, r3
 8000336:	f100 34ff 	add.w	r4, r0, #4294967295
 800033a:	d202      	bcs.n	8000342 <__udivmoddi4+0x146>
 800033c:	429f      	cmp	r7, r3
 800033e:	f200 80b0 	bhi.w	80004a2 <__udivmoddi4+0x2a6>
 8000342:	4620      	mov	r0, r4
 8000344:	1bdb      	subs	r3, r3, r7
 8000346:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800034a:	e7a5      	b.n	8000298 <__udivmoddi4+0x9c>
 800034c:	f1c1 0620 	rsb	r6, r1, #32
 8000350:	408b      	lsls	r3, r1
 8000352:	fa22 f706 	lsr.w	r7, r2, r6
 8000356:	431f      	orrs	r7, r3
 8000358:	fa20 fc06 	lsr.w	ip, r0, r6
 800035c:	fa04 f301 	lsl.w	r3, r4, r1
 8000360:	ea43 030c 	orr.w	r3, r3, ip
 8000364:	40f4      	lsrs	r4, r6
 8000366:	fa00 f801 	lsl.w	r8, r0, r1
 800036a:	0c38      	lsrs	r0, r7, #16
 800036c:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000370:	fbb4 fef0 	udiv	lr, r4, r0
 8000374:	fa1f fc87 	uxth.w	ip, r7
 8000378:	fb00 441e 	mls	r4, r0, lr, r4
 800037c:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000380:	fb0e f90c 	mul.w	r9, lr, ip
 8000384:	45a1      	cmp	r9, r4
 8000386:	fa02 f201 	lsl.w	r2, r2, r1
 800038a:	d90a      	bls.n	80003a2 <__udivmoddi4+0x1a6>
 800038c:	193c      	adds	r4, r7, r4
 800038e:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000392:	f080 8084 	bcs.w	800049e <__udivmoddi4+0x2a2>
 8000396:	45a1      	cmp	r9, r4
 8000398:	f240 8081 	bls.w	800049e <__udivmoddi4+0x2a2>
 800039c:	f1ae 0e02 	sub.w	lr, lr, #2
 80003a0:	443c      	add	r4, r7
 80003a2:	eba4 0409 	sub.w	r4, r4, r9
 80003a6:	fa1f f983 	uxth.w	r9, r3
 80003aa:	fbb4 f3f0 	udiv	r3, r4, r0
 80003ae:	fb00 4413 	mls	r4, r0, r3, r4
 80003b2:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003b6:	fb03 fc0c 	mul.w	ip, r3, ip
 80003ba:	45a4      	cmp	ip, r4
 80003bc:	d907      	bls.n	80003ce <__udivmoddi4+0x1d2>
 80003be:	193c      	adds	r4, r7, r4
 80003c0:	f103 30ff 	add.w	r0, r3, #4294967295
 80003c4:	d267      	bcs.n	8000496 <__udivmoddi4+0x29a>
 80003c6:	45a4      	cmp	ip, r4
 80003c8:	d965      	bls.n	8000496 <__udivmoddi4+0x29a>
 80003ca:	3b02      	subs	r3, #2
 80003cc:	443c      	add	r4, r7
 80003ce:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80003d2:	fba0 9302 	umull	r9, r3, r0, r2
 80003d6:	eba4 040c 	sub.w	r4, r4, ip
 80003da:	429c      	cmp	r4, r3
 80003dc:	46ce      	mov	lr, r9
 80003de:	469c      	mov	ip, r3
 80003e0:	d351      	bcc.n	8000486 <__udivmoddi4+0x28a>
 80003e2:	d04e      	beq.n	8000482 <__udivmoddi4+0x286>
 80003e4:	b155      	cbz	r5, 80003fc <__udivmoddi4+0x200>
 80003e6:	ebb8 030e 	subs.w	r3, r8, lr
 80003ea:	eb64 040c 	sbc.w	r4, r4, ip
 80003ee:	fa04 f606 	lsl.w	r6, r4, r6
 80003f2:	40cb      	lsrs	r3, r1
 80003f4:	431e      	orrs	r6, r3
 80003f6:	40cc      	lsrs	r4, r1
 80003f8:	e9c5 6400 	strd	r6, r4, [r5]
 80003fc:	2100      	movs	r1, #0
 80003fe:	e750      	b.n	80002a2 <__udivmoddi4+0xa6>
 8000400:	f1c2 0320 	rsb	r3, r2, #32
 8000404:	fa20 f103 	lsr.w	r1, r0, r3
 8000408:	fa0c fc02 	lsl.w	ip, ip, r2
 800040c:	fa24 f303 	lsr.w	r3, r4, r3
 8000410:	4094      	lsls	r4, r2
 8000412:	430c      	orrs	r4, r1
 8000414:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000418:	fa00 fe02 	lsl.w	lr, r0, r2
 800041c:	fa1f f78c 	uxth.w	r7, ip
 8000420:	fbb3 f0f8 	udiv	r0, r3, r8
 8000424:	fb08 3110 	mls	r1, r8, r0, r3
 8000428:	0c23      	lsrs	r3, r4, #16
 800042a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800042e:	fb00 f107 	mul.w	r1, r0, r7
 8000432:	4299      	cmp	r1, r3
 8000434:	d908      	bls.n	8000448 <__udivmoddi4+0x24c>
 8000436:	eb1c 0303 	adds.w	r3, ip, r3
 800043a:	f100 36ff 	add.w	r6, r0, #4294967295
 800043e:	d22c      	bcs.n	800049a <__udivmoddi4+0x29e>
 8000440:	4299      	cmp	r1, r3
 8000442:	d92a      	bls.n	800049a <__udivmoddi4+0x29e>
 8000444:	3802      	subs	r0, #2
 8000446:	4463      	add	r3, ip
 8000448:	1a5b      	subs	r3, r3, r1
 800044a:	b2a4      	uxth	r4, r4
 800044c:	fbb3 f1f8 	udiv	r1, r3, r8
 8000450:	fb08 3311 	mls	r3, r8, r1, r3
 8000454:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000458:	fb01 f307 	mul.w	r3, r1, r7
 800045c:	42a3      	cmp	r3, r4
 800045e:	d908      	bls.n	8000472 <__udivmoddi4+0x276>
 8000460:	eb1c 0404 	adds.w	r4, ip, r4
 8000464:	f101 36ff 	add.w	r6, r1, #4294967295
 8000468:	d213      	bcs.n	8000492 <__udivmoddi4+0x296>
 800046a:	42a3      	cmp	r3, r4
 800046c:	d911      	bls.n	8000492 <__udivmoddi4+0x296>
 800046e:	3902      	subs	r1, #2
 8000470:	4464      	add	r4, ip
 8000472:	1ae4      	subs	r4, r4, r3
 8000474:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000478:	e739      	b.n	80002ee <__udivmoddi4+0xf2>
 800047a:	4604      	mov	r4, r0
 800047c:	e6f0      	b.n	8000260 <__udivmoddi4+0x64>
 800047e:	4608      	mov	r0, r1
 8000480:	e706      	b.n	8000290 <__udivmoddi4+0x94>
 8000482:	45c8      	cmp	r8, r9
 8000484:	d2ae      	bcs.n	80003e4 <__udivmoddi4+0x1e8>
 8000486:	ebb9 0e02 	subs.w	lr, r9, r2
 800048a:	eb63 0c07 	sbc.w	ip, r3, r7
 800048e:	3801      	subs	r0, #1
 8000490:	e7a8      	b.n	80003e4 <__udivmoddi4+0x1e8>
 8000492:	4631      	mov	r1, r6
 8000494:	e7ed      	b.n	8000472 <__udivmoddi4+0x276>
 8000496:	4603      	mov	r3, r0
 8000498:	e799      	b.n	80003ce <__udivmoddi4+0x1d2>
 800049a:	4630      	mov	r0, r6
 800049c:	e7d4      	b.n	8000448 <__udivmoddi4+0x24c>
 800049e:	46d6      	mov	lr, sl
 80004a0:	e77f      	b.n	80003a2 <__udivmoddi4+0x1a6>
 80004a2:	4463      	add	r3, ip
 80004a4:	3802      	subs	r0, #2
 80004a6:	e74d      	b.n	8000344 <__udivmoddi4+0x148>
 80004a8:	4606      	mov	r6, r0
 80004aa:	4623      	mov	r3, r4
 80004ac:	4608      	mov	r0, r1
 80004ae:	e70f      	b.n	80002d0 <__udivmoddi4+0xd4>
 80004b0:	3e02      	subs	r6, #2
 80004b2:	4463      	add	r3, ip
 80004b4:	e730      	b.n	8000318 <__udivmoddi4+0x11c>
 80004b6:	bf00      	nop

080004b8 <__aeabi_idiv0>:
 80004b8:	4770      	bx	lr
 80004ba:	bf00      	nop

080004bc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004bc:	b580      	push	{r7, lr}
 80004be:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004c0:	f001 f883 	bl	80015ca <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004c4:	f000 f82a 	bl	800051c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004c8:	f000 fc14 	bl	8000cf4 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80004cc:	f000 fbe2 	bl	8000c94 <MX_USART2_UART_Init>
  MX_CRC_Init();
 80004d0:	f000 f886 	bl	80005e0 <MX_CRC_Init>
  MX_I2C1_SMBUS_Init();
 80004d4:	f000 f8a6 	bl	8000624 <MX_I2C1_SMBUS_Init>
  MX_I2C3_Init();
 80004d8:	f000 f8e6 	bl	80006a8 <MX_I2C3_Init>
  MX_LPTIM1_Init();
 80004dc:	f000 f924 	bl	8000728 <MX_LPTIM1_Init>
  MX_RNG_Init();
 80004e0:	f000 f94e 	bl	8000780 <MX_RNG_Init>
  MX_SPI1_Init();
 80004e4:	f000 f960 	bl	80007a8 <MX_SPI1_Init>
  MX_SWPMI1_Init();
 80004e8:	f000 f99c 	bl	8000824 <MX_SWPMI1_Init>
  MX_TIM1_Init();
 80004ec:	f000 f9ba 	bl	8000864 <MX_TIM1_Init>
  MX_TIM2_Init();
 80004f0:	f000 fa0e 	bl	8000910 <MX_TIM2_Init>
  MX_TIM6_Init();
 80004f4:	f000 fa80 	bl	80009f8 <MX_TIM6_Init>
  MX_TIM15_Init();
 80004f8:	f000 fab4 	bl	8000a64 <MX_TIM15_Init>
  MX_TIM16_Init();
 80004fc:	f000 fb26 	bl	8000b4c <MX_TIM16_Init>
  MX_USART1_Init();
 8000500:	f000 fb9c 	bl	8000c3c <MX_USART1_Init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  HAL_GPIO_TogglePin(LD3_GPIO_Port, LD3_Pin);
 8000504:	2108      	movs	r1, #8
 8000506:	4804      	ldr	r0, [pc, #16]	@ (8000518 <main+0x5c>)
 8000508:	f001 fc52 	bl	8001db0 <HAL_GPIO_TogglePin>
	  HAL_Delay(1000);
 800050c:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000510:	f001 f8d0 	bl	80016b4 <HAL_Delay>
	  HAL_GPIO_TogglePin(LD3_GPIO_Port, LD3_Pin);
 8000514:	bf00      	nop
 8000516:	e7f5      	b.n	8000504 <main+0x48>
 8000518:	48000400 	.word	0x48000400

0800051c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800051c:	b580      	push	{r7, lr}
 800051e:	b096      	sub	sp, #88	@ 0x58
 8000520:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000522:	f107 0314 	add.w	r3, r7, #20
 8000526:	2244      	movs	r2, #68	@ 0x44
 8000528:	2100      	movs	r1, #0
 800052a:	4618      	mov	r0, r3
 800052c:	f005 fa09 	bl	8005942 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000530:	463b      	mov	r3, r7
 8000532:	2200      	movs	r2, #0
 8000534:	601a      	str	r2, [r3, #0]
 8000536:	605a      	str	r2, [r3, #4]
 8000538:	609a      	str	r2, [r3, #8]
 800053a:	60da      	str	r2, [r3, #12]
 800053c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800053e:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8000542:	f001 fe41 	bl	80021c8 <HAL_PWREx_ControlVoltageScaling>
 8000546:	4603      	mov	r3, r0
 8000548:	2b00      	cmp	r3, #0
 800054a:	d001      	beq.n	8000550 <SystemClock_Config+0x34>
  {
    Error_Handler();
 800054c:	f000 fc1c 	bl	8000d88 <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000550:	f001 fe1c 	bl	800218c <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8000554:	4b21      	ldr	r3, [pc, #132]	@ (80005dc <SystemClock_Config+0xc0>)
 8000556:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800055a:	4a20      	ldr	r2, [pc, #128]	@ (80005dc <SystemClock_Config+0xc0>)
 800055c:	f023 0318 	bic.w	r3, r3, #24
 8000560:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 8000564:	2314      	movs	r3, #20
 8000566:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8000568:	2301      	movs	r3, #1
 800056a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 800056c:	2301      	movs	r3, #1
 800056e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000570:	2300      	movs	r3, #0
 8000572:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000574:	2360      	movs	r3, #96	@ 0x60
 8000576:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000578:	2302      	movs	r3, #2
 800057a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 800057c:	2301      	movs	r3, #1
 800057e:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000580:	2301      	movs	r3, #1
 8000582:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 40;
 8000584:	2328      	movs	r3, #40	@ 0x28
 8000586:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000588:	2307      	movs	r3, #7
 800058a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800058c:	2302      	movs	r3, #2
 800058e:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000590:	2302      	movs	r3, #2
 8000592:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000594:	f107 0314 	add.w	r3, r7, #20
 8000598:	4618      	mov	r0, r3
 800059a:	f001 fe6b 	bl	8002274 <HAL_RCC_OscConfig>
 800059e:	4603      	mov	r3, r0
 80005a0:	2b00      	cmp	r3, #0
 80005a2:	d001      	beq.n	80005a8 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 80005a4:	f000 fbf0 	bl	8000d88 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005a8:	230f      	movs	r3, #15
 80005aa:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005ac:	2303      	movs	r3, #3
 80005ae:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005b0:	2300      	movs	r3, #0
 80005b2:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80005b4:	2300      	movs	r3, #0
 80005b6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005b8:	2300      	movs	r3, #0
 80005ba:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80005bc:	463b      	mov	r3, r7
 80005be:	2104      	movs	r1, #4
 80005c0:	4618      	mov	r0, r3
 80005c2:	f002 fa6b 	bl	8002a9c <HAL_RCC_ClockConfig>
 80005c6:	4603      	mov	r3, r0
 80005c8:	2b00      	cmp	r3, #0
 80005ca:	d001      	beq.n	80005d0 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 80005cc:	f000 fbdc 	bl	8000d88 <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 80005d0:	f002 fe7e 	bl	80032d0 <HAL_RCCEx_EnableMSIPLLMode>
}
 80005d4:	bf00      	nop
 80005d6:	3758      	adds	r7, #88	@ 0x58
 80005d8:	46bd      	mov	sp, r7
 80005da:	bd80      	pop	{r7, pc}
 80005dc:	40021000 	.word	0x40021000

080005e0 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 80005e0:	b580      	push	{r7, lr}
 80005e2:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 80005e4:	4b0d      	ldr	r3, [pc, #52]	@ (800061c <MX_CRC_Init+0x3c>)
 80005e6:	4a0e      	ldr	r2, [pc, #56]	@ (8000620 <MX_CRC_Init+0x40>)
 80005e8:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 80005ea:	4b0c      	ldr	r3, [pc, #48]	@ (800061c <MX_CRC_Init+0x3c>)
 80005ec:	2200      	movs	r2, #0
 80005ee:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 80005f0:	4b0a      	ldr	r3, [pc, #40]	@ (800061c <MX_CRC_Init+0x3c>)
 80005f2:	2200      	movs	r2, #0
 80005f4:	715a      	strb	r2, [r3, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 80005f6:	4b09      	ldr	r3, [pc, #36]	@ (800061c <MX_CRC_Init+0x3c>)
 80005f8:	2200      	movs	r2, #0
 80005fa:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 80005fc:	4b07      	ldr	r3, [pc, #28]	@ (800061c <MX_CRC_Init+0x3c>)
 80005fe:	2200      	movs	r2, #0
 8000600:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 8000602:	4b06      	ldr	r3, [pc, #24]	@ (800061c <MX_CRC_Init+0x3c>)
 8000604:	2201      	movs	r2, #1
 8000606:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8000608:	4804      	ldr	r0, [pc, #16]	@ (800061c <MX_CRC_Init+0x3c>)
 800060a:	f001 f95d 	bl	80018c8 <HAL_CRC_Init>
 800060e:	4603      	mov	r3, r0
 8000610:	2b00      	cmp	r3, #0
 8000612:	d001      	beq.n	8000618 <MX_CRC_Init+0x38>
  {
    Error_Handler();
 8000614:	f000 fbb8 	bl	8000d88 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8000618:	bf00      	nop
 800061a:	bd80      	pop	{r7, pc}
 800061c:	20000028 	.word	0x20000028
 8000620:	40023000 	.word	0x40023000

08000624 <MX_I2C1_SMBUS_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_SMBUS_Init(void)
{
 8000624:	b580      	push	{r7, lr}
 8000626:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hsmbus1.Instance = I2C1;
 8000628:	4b1c      	ldr	r3, [pc, #112]	@ (800069c <MX_I2C1_SMBUS_Init+0x78>)
 800062a:	4a1d      	ldr	r2, [pc, #116]	@ (80006a0 <MX_I2C1_SMBUS_Init+0x7c>)
 800062c:	601a      	str	r2, [r3, #0]
  hsmbus1.Init.Timing = 0x10909CEC;
 800062e:	4b1b      	ldr	r3, [pc, #108]	@ (800069c <MX_I2C1_SMBUS_Init+0x78>)
 8000630:	4a1c      	ldr	r2, [pc, #112]	@ (80006a4 <MX_I2C1_SMBUS_Init+0x80>)
 8000632:	605a      	str	r2, [r3, #4]
  hsmbus1.Init.AnalogFilter = SMBUS_ANALOGFILTER_ENABLE;
 8000634:	4b19      	ldr	r3, [pc, #100]	@ (800069c <MX_I2C1_SMBUS_Init+0x78>)
 8000636:	2200      	movs	r2, #0
 8000638:	609a      	str	r2, [r3, #8]
  hsmbus1.Init.OwnAddress1 = 2;
 800063a:	4b18      	ldr	r3, [pc, #96]	@ (800069c <MX_I2C1_SMBUS_Init+0x78>)
 800063c:	2202      	movs	r2, #2
 800063e:	60da      	str	r2, [r3, #12]
  hsmbus1.Init.AddressingMode = SMBUS_ADDRESSINGMODE_7BIT;
 8000640:	4b16      	ldr	r3, [pc, #88]	@ (800069c <MX_I2C1_SMBUS_Init+0x78>)
 8000642:	2201      	movs	r2, #1
 8000644:	611a      	str	r2, [r3, #16]
  hsmbus1.Init.DualAddressMode = SMBUS_DUALADDRESS_DISABLE;
 8000646:	4b15      	ldr	r3, [pc, #84]	@ (800069c <MX_I2C1_SMBUS_Init+0x78>)
 8000648:	2200      	movs	r2, #0
 800064a:	615a      	str	r2, [r3, #20]
  hsmbus1.Init.OwnAddress2 = 0;
 800064c:	4b13      	ldr	r3, [pc, #76]	@ (800069c <MX_I2C1_SMBUS_Init+0x78>)
 800064e:	2200      	movs	r2, #0
 8000650:	619a      	str	r2, [r3, #24]
  hsmbus1.Init.OwnAddress2Masks = SMBUS_OA2_NOMASK;
 8000652:	4b12      	ldr	r3, [pc, #72]	@ (800069c <MX_I2C1_SMBUS_Init+0x78>)
 8000654:	2200      	movs	r2, #0
 8000656:	61da      	str	r2, [r3, #28]
  hsmbus1.Init.GeneralCallMode = SMBUS_GENERALCALL_DISABLE;
 8000658:	4b10      	ldr	r3, [pc, #64]	@ (800069c <MX_I2C1_SMBUS_Init+0x78>)
 800065a:	2200      	movs	r2, #0
 800065c:	621a      	str	r2, [r3, #32]
  hsmbus1.Init.NoStretchMode = SMBUS_NOSTRETCH_DISABLE;
 800065e:	4b0f      	ldr	r3, [pc, #60]	@ (800069c <MX_I2C1_SMBUS_Init+0x78>)
 8000660:	2200      	movs	r2, #0
 8000662:	625a      	str	r2, [r3, #36]	@ 0x24
  hsmbus1.Init.PacketErrorCheckMode = SMBUS_PEC_DISABLE;
 8000664:	4b0d      	ldr	r3, [pc, #52]	@ (800069c <MX_I2C1_SMBUS_Init+0x78>)
 8000666:	2200      	movs	r2, #0
 8000668:	629a      	str	r2, [r3, #40]	@ 0x28
  hsmbus1.Init.PeripheralMode = SMBUS_PERIPHERAL_MODE_SMBUS_SLAVE;
 800066a:	4b0c      	ldr	r3, [pc, #48]	@ (800069c <MX_I2C1_SMBUS_Init+0x78>)
 800066c:	2200      	movs	r2, #0
 800066e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hsmbus1.Init.SMBusTimeout = 0x000083D0;
 8000670:	4b0a      	ldr	r3, [pc, #40]	@ (800069c <MX_I2C1_SMBUS_Init+0x78>)
 8000672:	f248 32d0 	movw	r2, #33744	@ 0x83d0
 8000676:	631a      	str	r2, [r3, #48]	@ 0x30
  if (HAL_SMBUS_Init(&hsmbus1) != HAL_OK)
 8000678:	4808      	ldr	r0, [pc, #32]	@ (800069c <MX_I2C1_SMBUS_Init+0x78>)
 800067a:	f002 ff82 	bl	8003582 <HAL_SMBUS_Init>
 800067e:	4603      	mov	r3, r0
 8000680:	2b00      	cmp	r3, #0
 8000682:	d001      	beq.n	8000688 <MX_I2C1_SMBUS_Init+0x64>
  {
    Error_Handler();
 8000684:	f000 fb80 	bl	8000d88 <Error_Handler>
  }

  /** configuration Alert Mode
  */
  if (HAL_SMBUS_EnableAlert_IT(&hsmbus1) != HAL_OK)
 8000688:	4804      	ldr	r0, [pc, #16]	@ (800069c <MX_I2C1_SMBUS_Init+0x78>)
 800068a:	f003 f832 	bl	80036f2 <HAL_SMBUS_EnableAlert_IT>
 800068e:	4603      	mov	r3, r0
 8000690:	2b00      	cmp	r3, #0
 8000692:	d001      	beq.n	8000698 <MX_I2C1_SMBUS_Init+0x74>
  {
    Error_Handler();
 8000694:	f000 fb78 	bl	8000d88 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000698:	bf00      	nop
 800069a:	bd80      	pop	{r7, pc}
 800069c:	2000004c 	.word	0x2000004c
 80006a0:	40005400 	.word	0x40005400
 80006a4:	10909cec 	.word	0x10909cec

080006a8 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 80006a8:	b580      	push	{r7, lr}
 80006aa:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 80006ac:	4b1b      	ldr	r3, [pc, #108]	@ (800071c <MX_I2C3_Init+0x74>)
 80006ae:	4a1c      	ldr	r2, [pc, #112]	@ (8000720 <MX_I2C3_Init+0x78>)
 80006b0:	601a      	str	r2, [r3, #0]
  hi2c3.Init.Timing = 0x10909CEC;
 80006b2:	4b1a      	ldr	r3, [pc, #104]	@ (800071c <MX_I2C3_Init+0x74>)
 80006b4:	4a1b      	ldr	r2, [pc, #108]	@ (8000724 <MX_I2C3_Init+0x7c>)
 80006b6:	605a      	str	r2, [r3, #4]
  hi2c3.Init.OwnAddress1 = 0;
 80006b8:	4b18      	ldr	r3, [pc, #96]	@ (800071c <MX_I2C3_Init+0x74>)
 80006ba:	2200      	movs	r2, #0
 80006bc:	609a      	str	r2, [r3, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80006be:	4b17      	ldr	r3, [pc, #92]	@ (800071c <MX_I2C3_Init+0x74>)
 80006c0:	2201      	movs	r2, #1
 80006c2:	60da      	str	r2, [r3, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80006c4:	4b15      	ldr	r3, [pc, #84]	@ (800071c <MX_I2C3_Init+0x74>)
 80006c6:	2200      	movs	r2, #0
 80006c8:	611a      	str	r2, [r3, #16]
  hi2c3.Init.OwnAddress2 = 0;
 80006ca:	4b14      	ldr	r3, [pc, #80]	@ (800071c <MX_I2C3_Init+0x74>)
 80006cc:	2200      	movs	r2, #0
 80006ce:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80006d0:	4b12      	ldr	r3, [pc, #72]	@ (800071c <MX_I2C3_Init+0x74>)
 80006d2:	2200      	movs	r2, #0
 80006d4:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80006d6:	4b11      	ldr	r3, [pc, #68]	@ (800071c <MX_I2C3_Init+0x74>)
 80006d8:	2200      	movs	r2, #0
 80006da:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80006dc:	4b0f      	ldr	r3, [pc, #60]	@ (800071c <MX_I2C3_Init+0x74>)
 80006de:	2200      	movs	r2, #0
 80006e0:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 80006e2:	480e      	ldr	r0, [pc, #56]	@ (800071c <MX_I2C3_Init+0x74>)
 80006e4:	f001 fb7e 	bl	8001de4 <HAL_I2C_Init>
 80006e8:	4603      	mov	r3, r0
 80006ea:	2b00      	cmp	r3, #0
 80006ec:	d001      	beq.n	80006f2 <MX_I2C3_Init+0x4a>
  {
    Error_Handler();
 80006ee:	f000 fb4b 	bl	8000d88 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80006f2:	2100      	movs	r1, #0
 80006f4:	4809      	ldr	r0, [pc, #36]	@ (800071c <MX_I2C3_Init+0x74>)
 80006f6:	f001 fc10 	bl	8001f1a <HAL_I2CEx_ConfigAnalogFilter>
 80006fa:	4603      	mov	r3, r0
 80006fc:	2b00      	cmp	r3, #0
 80006fe:	d001      	beq.n	8000704 <MX_I2C3_Init+0x5c>
  {
    Error_Handler();
 8000700:	f000 fb42 	bl	8000d88 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 8000704:	2100      	movs	r1, #0
 8000706:	4805      	ldr	r0, [pc, #20]	@ (800071c <MX_I2C3_Init+0x74>)
 8000708:	f001 fc52 	bl	8001fb0 <HAL_I2CEx_ConfigDigitalFilter>
 800070c:	4603      	mov	r3, r0
 800070e:	2b00      	cmp	r3, #0
 8000710:	d001      	beq.n	8000716 <MX_I2C3_Init+0x6e>
  {
    Error_Handler();
 8000712:	f000 fb39 	bl	8000d88 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8000716:	bf00      	nop
 8000718:	bd80      	pop	{r7, pc}
 800071a:	bf00      	nop
 800071c:	2000009c 	.word	0x2000009c
 8000720:	40005c00 	.word	0x40005c00
 8000724:	10909cec 	.word	0x10909cec

08000728 <MX_LPTIM1_Init>:
  * @brief LPTIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPTIM1_Init(void)
{
 8000728:	b580      	push	{r7, lr}
 800072a:	af00      	add	r7, sp, #0
  /* USER CODE END LPTIM1_Init 0 */

  /* USER CODE BEGIN LPTIM1_Init 1 */

  /* USER CODE END LPTIM1_Init 1 */
  hlptim1.Instance = LPTIM1;
 800072c:	4b12      	ldr	r3, [pc, #72]	@ (8000778 <MX_LPTIM1_Init+0x50>)
 800072e:	4a13      	ldr	r2, [pc, #76]	@ (800077c <MX_LPTIM1_Init+0x54>)
 8000730:	601a      	str	r2, [r3, #0]
  hlptim1.Init.Clock.Source = LPTIM_CLOCKSOURCE_APBCLOCK_LPOSC;
 8000732:	4b11      	ldr	r3, [pc, #68]	@ (8000778 <MX_LPTIM1_Init+0x50>)
 8000734:	2200      	movs	r2, #0
 8000736:	605a      	str	r2, [r3, #4]
  hlptim1.Init.Clock.Prescaler = LPTIM_PRESCALER_DIV1;
 8000738:	4b0f      	ldr	r3, [pc, #60]	@ (8000778 <MX_LPTIM1_Init+0x50>)
 800073a:	2200      	movs	r2, #0
 800073c:	609a      	str	r2, [r3, #8]
  hlptim1.Init.Trigger.Source = LPTIM_TRIGSOURCE_SOFTWARE;
 800073e:	4b0e      	ldr	r3, [pc, #56]	@ (8000778 <MX_LPTIM1_Init+0x50>)
 8000740:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000744:	615a      	str	r2, [r3, #20]
  hlptim1.Init.OutputPolarity = LPTIM_OUTPUTPOLARITY_HIGH;
 8000746:	4b0c      	ldr	r3, [pc, #48]	@ (8000778 <MX_LPTIM1_Init+0x50>)
 8000748:	2200      	movs	r2, #0
 800074a:	621a      	str	r2, [r3, #32]
  hlptim1.Init.UpdateMode = LPTIM_UPDATE_IMMEDIATE;
 800074c:	4b0a      	ldr	r3, [pc, #40]	@ (8000778 <MX_LPTIM1_Init+0x50>)
 800074e:	2200      	movs	r2, #0
 8000750:	625a      	str	r2, [r3, #36]	@ 0x24
  hlptim1.Init.CounterSource = LPTIM_COUNTERSOURCE_INTERNAL;
 8000752:	4b09      	ldr	r3, [pc, #36]	@ (8000778 <MX_LPTIM1_Init+0x50>)
 8000754:	2200      	movs	r2, #0
 8000756:	629a      	str	r2, [r3, #40]	@ 0x28
  hlptim1.Init.Input1Source = LPTIM_INPUT1SOURCE_GPIO;
 8000758:	4b07      	ldr	r3, [pc, #28]	@ (8000778 <MX_LPTIM1_Init+0x50>)
 800075a:	2200      	movs	r2, #0
 800075c:	62da      	str	r2, [r3, #44]	@ 0x2c
  hlptim1.Init.Input2Source = LPTIM_INPUT2SOURCE_GPIO;
 800075e:	4b06      	ldr	r3, [pc, #24]	@ (8000778 <MX_LPTIM1_Init+0x50>)
 8000760:	2200      	movs	r2, #0
 8000762:	631a      	str	r2, [r3, #48]	@ 0x30
  if (HAL_LPTIM_Init(&hlptim1) != HAL_OK)
 8000764:	4804      	ldr	r0, [pc, #16]	@ (8000778 <MX_LPTIM1_Init+0x50>)
 8000766:	f001 fc6f 	bl	8002048 <HAL_LPTIM_Init>
 800076a:	4603      	mov	r3, r0
 800076c:	2b00      	cmp	r3, #0
 800076e:	d001      	beq.n	8000774 <MX_LPTIM1_Init+0x4c>
  {
    Error_Handler();
 8000770:	f000 fb0a 	bl	8000d88 <Error_Handler>
  }
  /* USER CODE BEGIN LPTIM1_Init 2 */

  /* USER CODE END LPTIM1_Init 2 */

}
 8000774:	bf00      	nop
 8000776:	bd80      	pop	{r7, pc}
 8000778:	200000f0 	.word	0x200000f0
 800077c:	40007c00 	.word	0x40007c00

08000780 <MX_RNG_Init>:
  * @brief RNG Initialization Function
  * @param None
  * @retval None
  */
static void MX_RNG_Init(void)
{
 8000780:	b580      	push	{r7, lr}
 8000782:	af00      	add	r7, sp, #0
  /* USER CODE END RNG_Init 0 */

  /* USER CODE BEGIN RNG_Init 1 */

  /* USER CODE END RNG_Init 1 */
  hrng.Instance = RNG;
 8000784:	4b06      	ldr	r3, [pc, #24]	@ (80007a0 <MX_RNG_Init+0x20>)
 8000786:	4a07      	ldr	r2, [pc, #28]	@ (80007a4 <MX_RNG_Init+0x24>)
 8000788:	601a      	str	r2, [r3, #0]
  if (HAL_RNG_Init(&hrng) != HAL_OK)
 800078a:	4805      	ldr	r0, [pc, #20]	@ (80007a0 <MX_RNG_Init+0x20>)
 800078c:	f002 fea2 	bl	80034d4 <HAL_RNG_Init>
 8000790:	4603      	mov	r3, r0
 8000792:	2b00      	cmp	r3, #0
 8000794:	d001      	beq.n	800079a <MX_RNG_Init+0x1a>
  {
    Error_Handler();
 8000796:	f000 faf7 	bl	8000d88 <Error_Handler>
  }
  /* USER CODE BEGIN RNG_Init 2 */

  /* USER CODE END RNG_Init 2 */

}
 800079a:	bf00      	nop
 800079c:	bd80      	pop	{r7, pc}
 800079e:	bf00      	nop
 80007a0:	20000128 	.word	0x20000128
 80007a4:	50060800 	.word	0x50060800

080007a8 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80007a8:	b580      	push	{r7, lr}
 80007aa:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80007ac:	4b1b      	ldr	r3, [pc, #108]	@ (800081c <MX_SPI1_Init+0x74>)
 80007ae:	4a1c      	ldr	r2, [pc, #112]	@ (8000820 <MX_SPI1_Init+0x78>)
 80007b0:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80007b2:	4b1a      	ldr	r3, [pc, #104]	@ (800081c <MX_SPI1_Init+0x74>)
 80007b4:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80007b8:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80007ba:	4b18      	ldr	r3, [pc, #96]	@ (800081c <MX_SPI1_Init+0x74>)
 80007bc:	2200      	movs	r2, #0
 80007be:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 80007c0:	4b16      	ldr	r3, [pc, #88]	@ (800081c <MX_SPI1_Init+0x74>)
 80007c2:	f44f 7240 	mov.w	r2, #768	@ 0x300
 80007c6:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80007c8:	4b14      	ldr	r3, [pc, #80]	@ (800081c <MX_SPI1_Init+0x74>)
 80007ca:	2200      	movs	r2, #0
 80007cc:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80007ce:	4b13      	ldr	r3, [pc, #76]	@ (800081c <MX_SPI1_Init+0x74>)
 80007d0:	2200      	movs	r2, #0
 80007d2:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80007d4:	4b11      	ldr	r3, [pc, #68]	@ (800081c <MX_SPI1_Init+0x74>)
 80007d6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80007da:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80007dc:	4b0f      	ldr	r3, [pc, #60]	@ (800081c <MX_SPI1_Init+0x74>)
 80007de:	2200      	movs	r2, #0
 80007e0:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80007e2:	4b0e      	ldr	r3, [pc, #56]	@ (800081c <MX_SPI1_Init+0x74>)
 80007e4:	2200      	movs	r2, #0
 80007e6:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80007e8:	4b0c      	ldr	r3, [pc, #48]	@ (800081c <MX_SPI1_Init+0x74>)
 80007ea:	2200      	movs	r2, #0
 80007ec:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80007ee:	4b0b      	ldr	r3, [pc, #44]	@ (800081c <MX_SPI1_Init+0x74>)
 80007f0:	2200      	movs	r2, #0
 80007f2:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 80007f4:	4b09      	ldr	r3, [pc, #36]	@ (800081c <MX_SPI1_Init+0x74>)
 80007f6:	2207      	movs	r2, #7
 80007f8:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80007fa:	4b08      	ldr	r3, [pc, #32]	@ (800081c <MX_SPI1_Init+0x74>)
 80007fc:	2200      	movs	r2, #0
 80007fe:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000800:	4b06      	ldr	r3, [pc, #24]	@ (800081c <MX_SPI1_Init+0x74>)
 8000802:	2208      	movs	r2, #8
 8000804:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000806:	4805      	ldr	r0, [pc, #20]	@ (800081c <MX_SPI1_Init+0x74>)
 8000808:	f002 ffc6 	bl	8003798 <HAL_SPI_Init>
 800080c:	4603      	mov	r3, r0
 800080e:	2b00      	cmp	r3, #0
 8000810:	d001      	beq.n	8000816 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8000812:	f000 fab9 	bl	8000d88 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000816:	bf00      	nop
 8000818:	bd80      	pop	{r7, pc}
 800081a:	bf00      	nop
 800081c:	20000138 	.word	0x20000138
 8000820:	40013000 	.word	0x40013000

08000824 <MX_SWPMI1_Init>:
  * @brief SWPMI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SWPMI1_Init(void)
{
 8000824:	b580      	push	{r7, lr}
 8000826:	af00      	add	r7, sp, #0
  /* USER CODE END SWPMI1_Init 0 */

  /* USER CODE BEGIN SWPMI1_Init 1 */

  /* USER CODE END SWPMI1_Init 1 */
  hswpmi1.Instance = SWPMI1;
 8000828:	4b0c      	ldr	r3, [pc, #48]	@ (800085c <MX_SWPMI1_Init+0x38>)
 800082a:	4a0d      	ldr	r2, [pc, #52]	@ (8000860 <MX_SWPMI1_Init+0x3c>)
 800082c:	601a      	str	r2, [r3, #0]
  hswpmi1.Init.VoltageClass = SWPMI_VOLTAGE_CLASS_B;
 800082e:	4b0b      	ldr	r3, [pc, #44]	@ (800085c <MX_SWPMI1_Init+0x38>)
 8000830:	2202      	movs	r2, #2
 8000832:	605a      	str	r2, [r3, #4]
  hswpmi1.Init.BitRate = 19;
 8000834:	4b09      	ldr	r3, [pc, #36]	@ (800085c <MX_SWPMI1_Init+0x38>)
 8000836:	2213      	movs	r2, #19
 8000838:	609a      	str	r2, [r3, #8]
  hswpmi1.Init.TxBufferingMode = SWPMI_TX_NO_SOFTWAREBUFFER;
 800083a:	4b08      	ldr	r3, [pc, #32]	@ (800085c <MX_SWPMI1_Init+0x38>)
 800083c:	2200      	movs	r2, #0
 800083e:	60da      	str	r2, [r3, #12]
  hswpmi1.Init.RxBufferingMode = SWPMI_RX_NO_SOFTWAREBUFFER;
 8000840:	4b06      	ldr	r3, [pc, #24]	@ (800085c <MX_SWPMI1_Init+0x38>)
 8000842:	2200      	movs	r2, #0
 8000844:	611a      	str	r2, [r3, #16]
  if (HAL_SWPMI_Init(&hswpmi1) != HAL_OK)
 8000846:	4805      	ldr	r0, [pc, #20]	@ (800085c <MX_SWPMI1_Init+0x38>)
 8000848:	f003 f84a 	bl	80038e0 <HAL_SWPMI_Init>
 800084c:	4603      	mov	r3, r0
 800084e:	2b00      	cmp	r3, #0
 8000850:	d001      	beq.n	8000856 <MX_SWPMI1_Init+0x32>
  {
    Error_Handler();
 8000852:	f000 fa99 	bl	8000d88 <Error_Handler>
  }
  /* USER CODE BEGIN SWPMI1_Init 2 */

  /* USER CODE END SWPMI1_Init 2 */

}
 8000856:	bf00      	nop
 8000858:	bd80      	pop	{r7, pc}
 800085a:	bf00      	nop
 800085c:	2000019c 	.word	0x2000019c
 8000860:	40008800 	.word	0x40008800

08000864 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000864:	b580      	push	{r7, lr}
 8000866:	b088      	sub	sp, #32
 8000868:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 800086a:	f107 030c 	add.w	r3, r7, #12
 800086e:	2200      	movs	r2, #0
 8000870:	601a      	str	r2, [r3, #0]
 8000872:	605a      	str	r2, [r3, #4]
 8000874:	609a      	str	r2, [r3, #8]
 8000876:	60da      	str	r2, [r3, #12]
 8000878:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800087a:	463b      	mov	r3, r7
 800087c:	2200      	movs	r2, #0
 800087e:	601a      	str	r2, [r3, #0]
 8000880:	605a      	str	r2, [r3, #4]
 8000882:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000884:	4b20      	ldr	r3, [pc, #128]	@ (8000908 <MX_TIM1_Init+0xa4>)
 8000886:	4a21      	ldr	r2, [pc, #132]	@ (800090c <MX_TIM1_Init+0xa8>)
 8000888:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 800088a:	4b1f      	ldr	r3, [pc, #124]	@ (8000908 <MX_TIM1_Init+0xa4>)
 800088c:	2200      	movs	r2, #0
 800088e:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000890:	4b1d      	ldr	r3, [pc, #116]	@ (8000908 <MX_TIM1_Init+0xa4>)
 8000892:	2200      	movs	r2, #0
 8000894:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8000896:	4b1c      	ldr	r3, [pc, #112]	@ (8000908 <MX_TIM1_Init+0xa4>)
 8000898:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800089c:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800089e:	4b1a      	ldr	r3, [pc, #104]	@ (8000908 <MX_TIM1_Init+0xa4>)
 80008a0:	2200      	movs	r2, #0
 80008a2:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80008a4:	4b18      	ldr	r3, [pc, #96]	@ (8000908 <MX_TIM1_Init+0xa4>)
 80008a6:	2200      	movs	r2, #0
 80008a8:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80008aa:	4b17      	ldr	r3, [pc, #92]	@ (8000908 <MX_TIM1_Init+0xa4>)
 80008ac:	2200      	movs	r2, #0
 80008ae:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80008b0:	4815      	ldr	r0, [pc, #84]	@ (8000908 <MX_TIM1_Init+0xa4>)
 80008b2:	f003 f88f 	bl	80039d4 <HAL_TIM_Base_Init>
 80008b6:	4603      	mov	r3, r0
 80008b8:	2b00      	cmp	r3, #0
 80008ba:	d001      	beq.n	80008c0 <MX_TIM1_Init+0x5c>
  {
    Error_Handler();
 80008bc:	f000 fa64 	bl	8000d88 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_EXTERNAL1;
 80008c0:	2307      	movs	r3, #7
 80008c2:	60fb      	str	r3, [r7, #12]
  sSlaveConfig.InputTrigger = TIM_TS_ITR0;
 80008c4:	2300      	movs	r3, #0
 80008c6:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_SlaveConfigSynchro(&htim1, &sSlaveConfig) != HAL_OK)
 80008c8:	f107 030c 	add.w	r3, r7, #12
 80008cc:	4619      	mov	r1, r3
 80008ce:	480e      	ldr	r0, [pc, #56]	@ (8000908 <MX_TIM1_Init+0xa4>)
 80008d0:	f003 fb79 	bl	8003fc6 <HAL_TIM_SlaveConfigSynchro>
 80008d4:	4603      	mov	r3, r0
 80008d6:	2b00      	cmp	r3, #0
 80008d8:	d001      	beq.n	80008de <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 80008da:	f000 fa55 	bl	8000d88 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80008de:	2300      	movs	r3, #0
 80008e0:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80008e2:	2300      	movs	r3, #0
 80008e4:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80008e6:	2300      	movs	r3, #0
 80008e8:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80008ea:	463b      	mov	r3, r7
 80008ec:	4619      	mov	r1, r3
 80008ee:	4806      	ldr	r0, [pc, #24]	@ (8000908 <MX_TIM1_Init+0xa4>)
 80008f0:	f004 f8c8 	bl	8004a84 <HAL_TIMEx_MasterConfigSynchronization>
 80008f4:	4603      	mov	r3, r0
 80008f6:	2b00      	cmp	r3, #0
 80008f8:	d001      	beq.n	80008fe <MX_TIM1_Init+0x9a>
  {
    Error_Handler();
 80008fa:	f000 fa45 	bl	8000d88 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80008fe:	bf00      	nop
 8000900:	3720      	adds	r7, #32
 8000902:	46bd      	mov	sp, r7
 8000904:	bd80      	pop	{r7, pc}
 8000906:	bf00      	nop
 8000908:	200001d8 	.word	0x200001d8
 800090c:	40012c00 	.word	0x40012c00

08000910 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000910:	b580      	push	{r7, lr}
 8000912:	b08e      	sub	sp, #56	@ 0x38
 8000914:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000916:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800091a:	2200      	movs	r2, #0
 800091c:	601a      	str	r2, [r3, #0]
 800091e:	605a      	str	r2, [r3, #4]
 8000920:	609a      	str	r2, [r3, #8]
 8000922:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000924:	f107 031c 	add.w	r3, r7, #28
 8000928:	2200      	movs	r2, #0
 800092a:	601a      	str	r2, [r3, #0]
 800092c:	605a      	str	r2, [r3, #4]
 800092e:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000930:	463b      	mov	r3, r7
 8000932:	2200      	movs	r2, #0
 8000934:	601a      	str	r2, [r3, #0]
 8000936:	605a      	str	r2, [r3, #4]
 8000938:	609a      	str	r2, [r3, #8]
 800093a:	60da      	str	r2, [r3, #12]
 800093c:	611a      	str	r2, [r3, #16]
 800093e:	615a      	str	r2, [r3, #20]
 8000940:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000942:	4b2c      	ldr	r3, [pc, #176]	@ (80009f4 <MX_TIM2_Init+0xe4>)
 8000944:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000948:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 800094a:	4b2a      	ldr	r3, [pc, #168]	@ (80009f4 <MX_TIM2_Init+0xe4>)
 800094c:	2200      	movs	r2, #0
 800094e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000950:	4b28      	ldr	r3, [pc, #160]	@ (80009f4 <MX_TIM2_Init+0xe4>)
 8000952:	2200      	movs	r2, #0
 8000954:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8000956:	4b27      	ldr	r3, [pc, #156]	@ (80009f4 <MX_TIM2_Init+0xe4>)
 8000958:	f04f 32ff 	mov.w	r2, #4294967295
 800095c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800095e:	4b25      	ldr	r3, [pc, #148]	@ (80009f4 <MX_TIM2_Init+0xe4>)
 8000960:	2200      	movs	r2, #0
 8000962:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000964:	4b23      	ldr	r3, [pc, #140]	@ (80009f4 <MX_TIM2_Init+0xe4>)
 8000966:	2200      	movs	r2, #0
 8000968:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800096a:	4822      	ldr	r0, [pc, #136]	@ (80009f4 <MX_TIM2_Init+0xe4>)
 800096c:	f003 f832 	bl	80039d4 <HAL_TIM_Base_Init>
 8000970:	4603      	mov	r3, r0
 8000972:	2b00      	cmp	r3, #0
 8000974:	d001      	beq.n	800097a <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 8000976:	f000 fa07 	bl	8000d88 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800097a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800097e:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000980:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000984:	4619      	mov	r1, r3
 8000986:	481b      	ldr	r0, [pc, #108]	@ (80009f4 <MX_TIM2_Init+0xe4>)
 8000988:	f003 fa54 	bl	8003e34 <HAL_TIM_ConfigClockSource>
 800098c:	4603      	mov	r3, r0
 800098e:	2b00      	cmp	r3, #0
 8000990:	d001      	beq.n	8000996 <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 8000992:	f000 f9f9 	bl	8000d88 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim2) != HAL_OK)
 8000996:	4817      	ldr	r0, [pc, #92]	@ (80009f4 <MX_TIM2_Init+0xe4>)
 8000998:	f003 f873 	bl	8003a82 <HAL_TIM_OC_Init>
 800099c:	4603      	mov	r3, r0
 800099e:	2b00      	cmp	r3, #0
 80009a0:	d001      	beq.n	80009a6 <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 80009a2:	f000 f9f1 	bl	8000d88 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80009a6:	2300      	movs	r3, #0
 80009a8:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80009aa:	2300      	movs	r3, #0
 80009ac:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80009ae:	f107 031c 	add.w	r3, r7, #28
 80009b2:	4619      	mov	r1, r3
 80009b4:	480f      	ldr	r0, [pc, #60]	@ (80009f4 <MX_TIM2_Init+0xe4>)
 80009b6:	f004 f865 	bl	8004a84 <HAL_TIMEx_MasterConfigSynchronization>
 80009ba:	4603      	mov	r3, r0
 80009bc:	2b00      	cmp	r3, #0
 80009be:	d001      	beq.n	80009c4 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 80009c0:	f000 f9e2 	bl	8000d88 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 80009c4:	2300      	movs	r3, #0
 80009c6:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80009c8:	2300      	movs	r3, #0
 80009ca:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80009cc:	2300      	movs	r3, #0
 80009ce:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80009d0:	2300      	movs	r3, #0
 80009d2:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_OC_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80009d4:	463b      	mov	r3, r7
 80009d6:	2200      	movs	r2, #0
 80009d8:	4619      	mov	r1, r3
 80009da:	4806      	ldr	r0, [pc, #24]	@ (80009f4 <MX_TIM2_Init+0xe4>)
 80009dc:	f003 f914 	bl	8003c08 <HAL_TIM_OC_ConfigChannel>
 80009e0:	4603      	mov	r3, r0
 80009e2:	2b00      	cmp	r3, #0
 80009e4:	d001      	beq.n	80009ea <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 80009e6:	f000 f9cf 	bl	8000d88 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80009ea:	bf00      	nop
 80009ec:	3738      	adds	r7, #56	@ 0x38
 80009ee:	46bd      	mov	sp, r7
 80009f0:	bd80      	pop	{r7, pc}
 80009f2:	bf00      	nop
 80009f4:	20000224 	.word	0x20000224

080009f8 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 80009f8:	b580      	push	{r7, lr}
 80009fa:	b084      	sub	sp, #16
 80009fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80009fe:	1d3b      	adds	r3, r7, #4
 8000a00:	2200      	movs	r2, #0
 8000a02:	601a      	str	r2, [r3, #0]
 8000a04:	605a      	str	r2, [r3, #4]
 8000a06:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8000a08:	4b14      	ldr	r3, [pc, #80]	@ (8000a5c <MX_TIM6_Init+0x64>)
 8000a0a:	4a15      	ldr	r2, [pc, #84]	@ (8000a60 <MX_TIM6_Init+0x68>)
 8000a0c:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 0;
 8000a0e:	4b13      	ldr	r3, [pc, #76]	@ (8000a5c <MX_TIM6_Init+0x64>)
 8000a10:	2200      	movs	r2, #0
 8000a12:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a14:	4b11      	ldr	r3, [pc, #68]	@ (8000a5c <MX_TIM6_Init+0x64>)
 8000a16:	2200      	movs	r2, #0
 8000a18:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 65535;
 8000a1a:	4b10      	ldr	r3, [pc, #64]	@ (8000a5c <MX_TIM6_Init+0x64>)
 8000a1c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000a20:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a22:	4b0e      	ldr	r3, [pc, #56]	@ (8000a5c <MX_TIM6_Init+0x64>)
 8000a24:	2200      	movs	r2, #0
 8000a26:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8000a28:	480c      	ldr	r0, [pc, #48]	@ (8000a5c <MX_TIM6_Init+0x64>)
 8000a2a:	f002 ffd3 	bl	80039d4 <HAL_TIM_Base_Init>
 8000a2e:	4603      	mov	r3, r0
 8000a30:	2b00      	cmp	r3, #0
 8000a32:	d001      	beq.n	8000a38 <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 8000a34:	f000 f9a8 	bl	8000d88 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000a38:	2300      	movs	r3, #0
 8000a3a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000a3c:	2300      	movs	r3, #0
 8000a3e:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8000a40:	1d3b      	adds	r3, r7, #4
 8000a42:	4619      	mov	r1, r3
 8000a44:	4805      	ldr	r0, [pc, #20]	@ (8000a5c <MX_TIM6_Init+0x64>)
 8000a46:	f004 f81d 	bl	8004a84 <HAL_TIMEx_MasterConfigSynchronization>
 8000a4a:	4603      	mov	r3, r0
 8000a4c:	2b00      	cmp	r3, #0
 8000a4e:	d001      	beq.n	8000a54 <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 8000a50:	f000 f99a 	bl	8000d88 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8000a54:	bf00      	nop
 8000a56:	3710      	adds	r7, #16
 8000a58:	46bd      	mov	sp, r7
 8000a5a:	bd80      	pop	{r7, pc}
 8000a5c:	20000270 	.word	0x20000270
 8000a60:	40001000 	.word	0x40001000

08000a64 <MX_TIM15_Init>:
  * @brief TIM15 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM15_Init(void)
{
 8000a64:	b580      	push	{r7, lr}
 8000a66:	b08c      	sub	sp, #48	@ 0x30
 8000a68:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM15_Init 0 */

  /* USER CODE END TIM15_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000a6a:	f107 0320 	add.w	r3, r7, #32
 8000a6e:	2200      	movs	r2, #0
 8000a70:	601a      	str	r2, [r3, #0]
 8000a72:	605a      	str	r2, [r3, #4]
 8000a74:	609a      	str	r2, [r3, #8]
 8000a76:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000a78:	f107 0314 	add.w	r3, r7, #20
 8000a7c:	2200      	movs	r2, #0
 8000a7e:	601a      	str	r2, [r3, #0]
 8000a80:	605a      	str	r2, [r3, #4]
 8000a82:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8000a84:	1d3b      	adds	r3, r7, #4
 8000a86:	2200      	movs	r2, #0
 8000a88:	601a      	str	r2, [r3, #0]
 8000a8a:	605a      	str	r2, [r3, #4]
 8000a8c:	609a      	str	r2, [r3, #8]
 8000a8e:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM15_Init 1 */

  /* USER CODE END TIM15_Init 1 */
  htim15.Instance = TIM15;
 8000a90:	4b2c      	ldr	r3, [pc, #176]	@ (8000b44 <MX_TIM15_Init+0xe0>)
 8000a92:	4a2d      	ldr	r2, [pc, #180]	@ (8000b48 <MX_TIM15_Init+0xe4>)
 8000a94:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 0;
 8000a96:	4b2b      	ldr	r3, [pc, #172]	@ (8000b44 <MX_TIM15_Init+0xe0>)
 8000a98:	2200      	movs	r2, #0
 8000a9a:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a9c:	4b29      	ldr	r3, [pc, #164]	@ (8000b44 <MX_TIM15_Init+0xe0>)
 8000a9e:	2200      	movs	r2, #0
 8000aa0:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 65535;
 8000aa2:	4b28      	ldr	r3, [pc, #160]	@ (8000b44 <MX_TIM15_Init+0xe0>)
 8000aa4:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000aa8:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000aaa:	4b26      	ldr	r3, [pc, #152]	@ (8000b44 <MX_TIM15_Init+0xe0>)
 8000aac:	2200      	movs	r2, #0
 8000aae:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 8000ab0:	4b24      	ldr	r3, [pc, #144]	@ (8000b44 <MX_TIM15_Init+0xe0>)
 8000ab2:	2200      	movs	r2, #0
 8000ab4:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000ab6:	4b23      	ldr	r3, [pc, #140]	@ (8000b44 <MX_TIM15_Init+0xe0>)
 8000ab8:	2200      	movs	r2, #0
 8000aba:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim15) != HAL_OK)
 8000abc:	4821      	ldr	r0, [pc, #132]	@ (8000b44 <MX_TIM15_Init+0xe0>)
 8000abe:	f002 ff89 	bl	80039d4 <HAL_TIM_Base_Init>
 8000ac2:	4603      	mov	r3, r0
 8000ac4:	2b00      	cmp	r3, #0
 8000ac6:	d001      	beq.n	8000acc <MX_TIM15_Init+0x68>
  {
    Error_Handler();
 8000ac8:	f000 f95e 	bl	8000d88 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000acc:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000ad0:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim15, &sClockSourceConfig) != HAL_OK)
 8000ad2:	f107 0320 	add.w	r3, r7, #32
 8000ad6:	4619      	mov	r1, r3
 8000ad8:	481a      	ldr	r0, [pc, #104]	@ (8000b44 <MX_TIM15_Init+0xe0>)
 8000ada:	f003 f9ab 	bl	8003e34 <HAL_TIM_ConfigClockSource>
 8000ade:	4603      	mov	r3, r0
 8000ae0:	2b00      	cmp	r3, #0
 8000ae2:	d001      	beq.n	8000ae8 <MX_TIM15_Init+0x84>
  {
    Error_Handler();
 8000ae4:	f000 f950 	bl	8000d88 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim15) != HAL_OK)
 8000ae8:	4816      	ldr	r0, [pc, #88]	@ (8000b44 <MX_TIM15_Init+0xe0>)
 8000aea:	f003 f82b 	bl	8003b44 <HAL_TIM_IC_Init>
 8000aee:	4603      	mov	r3, r0
 8000af0:	2b00      	cmp	r3, #0
 8000af2:	d001      	beq.n	8000af8 <MX_TIM15_Init+0x94>
  {
    Error_Handler();
 8000af4:	f000 f948 	bl	8000d88 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000af8:	2300      	movs	r3, #0
 8000afa:	617b      	str	r3, [r7, #20]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000afc:	2300      	movs	r3, #0
 8000afe:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 8000b00:	f107 0314 	add.w	r3, r7, #20
 8000b04:	4619      	mov	r1, r3
 8000b06:	480f      	ldr	r0, [pc, #60]	@ (8000b44 <MX_TIM15_Init+0xe0>)
 8000b08:	f003 ffbc 	bl	8004a84 <HAL_TIMEx_MasterConfigSynchronization>
 8000b0c:	4603      	mov	r3, r0
 8000b0e:	2b00      	cmp	r3, #0
 8000b10:	d001      	beq.n	8000b16 <MX_TIM15_Init+0xb2>
  {
    Error_Handler();
 8000b12:	f000 f939 	bl	8000d88 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8000b16:	2300      	movs	r3, #0
 8000b18:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8000b1a:	2301      	movs	r3, #1
 8000b1c:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8000b1e:	2300      	movs	r3, #0
 8000b20:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 0;
 8000b22:	2300      	movs	r3, #0
 8000b24:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim15, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8000b26:	1d3b      	adds	r3, r7, #4
 8000b28:	2204      	movs	r2, #4
 8000b2a:	4619      	mov	r1, r3
 8000b2c:	4805      	ldr	r0, [pc, #20]	@ (8000b44 <MX_TIM15_Init+0xe0>)
 8000b2e:	f003 f8e5 	bl	8003cfc <HAL_TIM_IC_ConfigChannel>
 8000b32:	4603      	mov	r3, r0
 8000b34:	2b00      	cmp	r3, #0
 8000b36:	d001      	beq.n	8000b3c <MX_TIM15_Init+0xd8>
  {
    Error_Handler();
 8000b38:	f000 f926 	bl	8000d88 <Error_Handler>
  }
  /* USER CODE BEGIN TIM15_Init 2 */

  /* USER CODE END TIM15_Init 2 */

}
 8000b3c:	bf00      	nop
 8000b3e:	3730      	adds	r7, #48	@ 0x30
 8000b40:	46bd      	mov	sp, r7
 8000b42:	bd80      	pop	{r7, pc}
 8000b44:	200002bc 	.word	0x200002bc
 8000b48:	40014000 	.word	0x40014000

08000b4c <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 8000b4c:	b580      	push	{r7, lr}
 8000b4e:	b092      	sub	sp, #72	@ 0x48
 8000b50:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM16_Init 0 */

  /* USER CODE END TIM16_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8000b52:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000b56:	2200      	movs	r2, #0
 8000b58:	601a      	str	r2, [r3, #0]
 8000b5a:	605a      	str	r2, [r3, #4]
 8000b5c:	609a      	str	r2, [r3, #8]
 8000b5e:	60da      	str	r2, [r3, #12]
 8000b60:	611a      	str	r2, [r3, #16]
 8000b62:	615a      	str	r2, [r3, #20]
 8000b64:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000b66:	463b      	mov	r3, r7
 8000b68:	222c      	movs	r2, #44	@ 0x2c
 8000b6a:	2100      	movs	r1, #0
 8000b6c:	4618      	mov	r0, r3
 8000b6e:	f004 fee8 	bl	8005942 <memset>

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 8000b72:	4b30      	ldr	r3, [pc, #192]	@ (8000c34 <MX_TIM16_Init+0xe8>)
 8000b74:	4a30      	ldr	r2, [pc, #192]	@ (8000c38 <MX_TIM16_Init+0xec>)
 8000b76:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 0;
 8000b78:	4b2e      	ldr	r3, [pc, #184]	@ (8000c34 <MX_TIM16_Init+0xe8>)
 8000b7a:	2200      	movs	r2, #0
 8000b7c:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b7e:	4b2d      	ldr	r3, [pc, #180]	@ (8000c34 <MX_TIM16_Init+0xe8>)
 8000b80:	2200      	movs	r2, #0
 8000b82:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 65535;
 8000b84:	4b2b      	ldr	r3, [pc, #172]	@ (8000c34 <MX_TIM16_Init+0xe8>)
 8000b86:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000b8a:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000b8c:	4b29      	ldr	r3, [pc, #164]	@ (8000c34 <MX_TIM16_Init+0xe8>)
 8000b8e:	2200      	movs	r2, #0
 8000b90:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 8000b92:	4b28      	ldr	r3, [pc, #160]	@ (8000c34 <MX_TIM16_Init+0xe8>)
 8000b94:	2200      	movs	r2, #0
 8000b96:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b98:	4b26      	ldr	r3, [pc, #152]	@ (8000c34 <MX_TIM16_Init+0xe8>)
 8000b9a:	2200      	movs	r2, #0
 8000b9c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8000b9e:	4825      	ldr	r0, [pc, #148]	@ (8000c34 <MX_TIM16_Init+0xe8>)
 8000ba0:	f002 ff18 	bl	80039d4 <HAL_TIM_Base_Init>
 8000ba4:	4603      	mov	r3, r0
 8000ba6:	2b00      	cmp	r3, #0
 8000ba8:	d001      	beq.n	8000bae <MX_TIM16_Init+0x62>
  {
    Error_Handler();
 8000baa:	f000 f8ed 	bl	8000d88 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim16) != HAL_OK)
 8000bae:	4821      	ldr	r0, [pc, #132]	@ (8000c34 <MX_TIM16_Init+0xe8>)
 8000bb0:	f002 ff67 	bl	8003a82 <HAL_TIM_OC_Init>
 8000bb4:	4603      	mov	r3, r0
 8000bb6:	2b00      	cmp	r3, #0
 8000bb8:	d001      	beq.n	8000bbe <MX_TIM16_Init+0x72>
  {
    Error_Handler();
 8000bba:	f000 f8e5 	bl	8000d88 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8000bbe:	2300      	movs	r3, #0
 8000bc0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.Pulse = 0;
 8000bc2:	2300      	movs	r3, #0
 8000bc4:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000bc6:	2300      	movs	r3, #0
 8000bc8:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000bca:	2300      	movs	r3, #0
 8000bcc:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000bce:	2300      	movs	r3, #0
 8000bd0:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000bd2:	2300      	movs	r3, #0
 8000bd4:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000bd6:	2300      	movs	r3, #0
 8000bd8:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIM_OC_ConfigChannel(&htim16, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000bda:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000bde:	2200      	movs	r2, #0
 8000be0:	4619      	mov	r1, r3
 8000be2:	4814      	ldr	r0, [pc, #80]	@ (8000c34 <MX_TIM16_Init+0xe8>)
 8000be4:	f003 f810 	bl	8003c08 <HAL_TIM_OC_ConfigChannel>
 8000be8:	4603      	mov	r3, r0
 8000bea:	2b00      	cmp	r3, #0
 8000bec:	d001      	beq.n	8000bf2 <MX_TIM16_Init+0xa6>
  {
    Error_Handler();
 8000bee:	f000 f8cb 	bl	8000d88 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000bf2:	2300      	movs	r3, #0
 8000bf4:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000bf6:	2300      	movs	r3, #0
 8000bf8:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000bfa:	2300      	movs	r3, #0
 8000bfc:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000bfe:	2300      	movs	r3, #0
 8000c00:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000c02:	2300      	movs	r3, #0
 8000c04:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000c06:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000c0a:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000c0c:	2300      	movs	r3, #0
 8000c0e:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim16, &sBreakDeadTimeConfig) != HAL_OK)
 8000c10:	463b      	mov	r3, r7
 8000c12:	4619      	mov	r1, r3
 8000c14:	4807      	ldr	r0, [pc, #28]	@ (8000c34 <MX_TIM16_Init+0xe8>)
 8000c16:	f003 ff9b 	bl	8004b50 <HAL_TIMEx_ConfigBreakDeadTime>
 8000c1a:	4603      	mov	r3, r0
 8000c1c:	2b00      	cmp	r3, #0
 8000c1e:	d001      	beq.n	8000c24 <MX_TIM16_Init+0xd8>
  {
    Error_Handler();
 8000c20:	f000 f8b2 	bl	8000d88 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */
  HAL_TIM_MspPostInit(&htim16);
 8000c24:	4803      	ldr	r0, [pc, #12]	@ (8000c34 <MX_TIM16_Init+0xe8>)
 8000c26:	f000 fb6d 	bl	8001304 <HAL_TIM_MspPostInit>

}
 8000c2a:	bf00      	nop
 8000c2c:	3748      	adds	r7, #72	@ 0x48
 8000c2e:	46bd      	mov	sp, r7
 8000c30:	bd80      	pop	{r7, pc}
 8000c32:	bf00      	nop
 8000c34:	20000308 	.word	0x20000308
 8000c38:	40014400 	.word	0x40014400

08000c3c <MX_USART1_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_Init(void)
{
 8000c3c:	b580      	push	{r7, lr}
 8000c3e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  husart1.Instance = USART1;
 8000c40:	4b12      	ldr	r3, [pc, #72]	@ (8000c8c <MX_USART1_Init+0x50>)
 8000c42:	4a13      	ldr	r2, [pc, #76]	@ (8000c90 <MX_USART1_Init+0x54>)
 8000c44:	601a      	str	r2, [r3, #0]
  husart1.Init.BaudRate = 115200;
 8000c46:	4b11      	ldr	r3, [pc, #68]	@ (8000c8c <MX_USART1_Init+0x50>)
 8000c48:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000c4c:	605a      	str	r2, [r3, #4]
  husart1.Init.WordLength = USART_WORDLENGTH_8B;
 8000c4e:	4b0f      	ldr	r3, [pc, #60]	@ (8000c8c <MX_USART1_Init+0x50>)
 8000c50:	2200      	movs	r2, #0
 8000c52:	609a      	str	r2, [r3, #8]
  husart1.Init.StopBits = USART_STOPBITS_1;
 8000c54:	4b0d      	ldr	r3, [pc, #52]	@ (8000c8c <MX_USART1_Init+0x50>)
 8000c56:	2200      	movs	r2, #0
 8000c58:	60da      	str	r2, [r3, #12]
  husart1.Init.Parity = USART_PARITY_NONE;
 8000c5a:	4b0c      	ldr	r3, [pc, #48]	@ (8000c8c <MX_USART1_Init+0x50>)
 8000c5c:	2200      	movs	r2, #0
 8000c5e:	611a      	str	r2, [r3, #16]
  husart1.Init.Mode = USART_MODE_TX_RX;
 8000c60:	4b0a      	ldr	r3, [pc, #40]	@ (8000c8c <MX_USART1_Init+0x50>)
 8000c62:	220c      	movs	r2, #12
 8000c64:	615a      	str	r2, [r3, #20]
  husart1.Init.CLKPolarity = USART_POLARITY_LOW;
 8000c66:	4b09      	ldr	r3, [pc, #36]	@ (8000c8c <MX_USART1_Init+0x50>)
 8000c68:	2200      	movs	r2, #0
 8000c6a:	619a      	str	r2, [r3, #24]
  husart1.Init.CLKPhase = USART_PHASE_1EDGE;
 8000c6c:	4b07      	ldr	r3, [pc, #28]	@ (8000c8c <MX_USART1_Init+0x50>)
 8000c6e:	2200      	movs	r2, #0
 8000c70:	61da      	str	r2, [r3, #28]
  husart1.Init.CLKLastBit = USART_LASTBIT_DISABLE;
 8000c72:	4b06      	ldr	r3, [pc, #24]	@ (8000c8c <MX_USART1_Init+0x50>)
 8000c74:	2200      	movs	r2, #0
 8000c76:	621a      	str	r2, [r3, #32]
  if (HAL_USART_Init(&husart1) != HAL_OK)
 8000c78:	4804      	ldr	r0, [pc, #16]	@ (8000c8c <MX_USART1_Init+0x50>)
 8000c7a:	f004 fc70 	bl	800555e <HAL_USART_Init>
 8000c7e:	4603      	mov	r3, r0
 8000c80:	2b00      	cmp	r3, #0
 8000c82:	d001      	beq.n	8000c88 <MX_USART1_Init+0x4c>
  {
    Error_Handler();
 8000c84:	f000 f880 	bl	8000d88 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000c88:	bf00      	nop
 8000c8a:	bd80      	pop	{r7, pc}
 8000c8c:	20000354 	.word	0x20000354
 8000c90:	40013800 	.word	0x40013800

08000c94 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000c94:	b580      	push	{r7, lr}
 8000c96:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000c98:	4b14      	ldr	r3, [pc, #80]	@ (8000cec <MX_USART2_UART_Init+0x58>)
 8000c9a:	4a15      	ldr	r2, [pc, #84]	@ (8000cf0 <MX_USART2_UART_Init+0x5c>)
 8000c9c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000c9e:	4b13      	ldr	r3, [pc, #76]	@ (8000cec <MX_USART2_UART_Init+0x58>)
 8000ca0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000ca4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000ca6:	4b11      	ldr	r3, [pc, #68]	@ (8000cec <MX_USART2_UART_Init+0x58>)
 8000ca8:	2200      	movs	r2, #0
 8000caa:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000cac:	4b0f      	ldr	r3, [pc, #60]	@ (8000cec <MX_USART2_UART_Init+0x58>)
 8000cae:	2200      	movs	r2, #0
 8000cb0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000cb2:	4b0e      	ldr	r3, [pc, #56]	@ (8000cec <MX_USART2_UART_Init+0x58>)
 8000cb4:	2200      	movs	r2, #0
 8000cb6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000cb8:	4b0c      	ldr	r3, [pc, #48]	@ (8000cec <MX_USART2_UART_Init+0x58>)
 8000cba:	220c      	movs	r2, #12
 8000cbc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000cbe:	4b0b      	ldr	r3, [pc, #44]	@ (8000cec <MX_USART2_UART_Init+0x58>)
 8000cc0:	2200      	movs	r2, #0
 8000cc2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000cc4:	4b09      	ldr	r3, [pc, #36]	@ (8000cec <MX_USART2_UART_Init+0x58>)
 8000cc6:	2200      	movs	r2, #0
 8000cc8:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000cca:	4b08      	ldr	r3, [pc, #32]	@ (8000cec <MX_USART2_UART_Init+0x58>)
 8000ccc:	2200      	movs	r2, #0
 8000cce:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000cd0:	4b06      	ldr	r3, [pc, #24]	@ (8000cec <MX_USART2_UART_Init+0x58>)
 8000cd2:	2200      	movs	r2, #0
 8000cd4:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000cd6:	4805      	ldr	r0, [pc, #20]	@ (8000cec <MX_USART2_UART_Init+0x58>)
 8000cd8:	f003 ffb2 	bl	8004c40 <HAL_UART_Init>
 8000cdc:	4603      	mov	r3, r0
 8000cde:	2b00      	cmp	r3, #0
 8000ce0:	d001      	beq.n	8000ce6 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000ce2:	f000 f851 	bl	8000d88 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000ce6:	bf00      	nop
 8000ce8:	bd80      	pop	{r7, pc}
 8000cea:	bf00      	nop
 8000cec:	200003a4 	.word	0x200003a4
 8000cf0:	40004400 	.word	0x40004400

08000cf4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000cf4:	b580      	push	{r7, lr}
 8000cf6:	b088      	sub	sp, #32
 8000cf8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cfa:	f107 030c 	add.w	r3, r7, #12
 8000cfe:	2200      	movs	r2, #0
 8000d00:	601a      	str	r2, [r3, #0]
 8000d02:	605a      	str	r2, [r3, #4]
 8000d04:	609a      	str	r2, [r3, #8]
 8000d06:	60da      	str	r2, [r3, #12]
 8000d08:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d0a:	4b1d      	ldr	r3, [pc, #116]	@ (8000d80 <MX_GPIO_Init+0x8c>)
 8000d0c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d0e:	4a1c      	ldr	r2, [pc, #112]	@ (8000d80 <MX_GPIO_Init+0x8c>)
 8000d10:	f043 0304 	orr.w	r3, r3, #4
 8000d14:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000d16:	4b1a      	ldr	r3, [pc, #104]	@ (8000d80 <MX_GPIO_Init+0x8c>)
 8000d18:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d1a:	f003 0304 	and.w	r3, r3, #4
 8000d1e:	60bb      	str	r3, [r7, #8]
 8000d20:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d22:	4b17      	ldr	r3, [pc, #92]	@ (8000d80 <MX_GPIO_Init+0x8c>)
 8000d24:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d26:	4a16      	ldr	r2, [pc, #88]	@ (8000d80 <MX_GPIO_Init+0x8c>)
 8000d28:	f043 0301 	orr.w	r3, r3, #1
 8000d2c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000d2e:	4b14      	ldr	r3, [pc, #80]	@ (8000d80 <MX_GPIO_Init+0x8c>)
 8000d30:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d32:	f003 0301 	and.w	r3, r3, #1
 8000d36:	607b      	str	r3, [r7, #4]
 8000d38:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d3a:	4b11      	ldr	r3, [pc, #68]	@ (8000d80 <MX_GPIO_Init+0x8c>)
 8000d3c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d3e:	4a10      	ldr	r2, [pc, #64]	@ (8000d80 <MX_GPIO_Init+0x8c>)
 8000d40:	f043 0302 	orr.w	r3, r3, #2
 8000d44:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000d46:	4b0e      	ldr	r3, [pc, #56]	@ (8000d80 <MX_GPIO_Init+0x8c>)
 8000d48:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d4a:	f003 0302 	and.w	r3, r3, #2
 8000d4e:	603b      	str	r3, [r7, #0]
 8000d50:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 8000d52:	2200      	movs	r2, #0
 8000d54:	2108      	movs	r1, #8
 8000d56:	480b      	ldr	r0, [pc, #44]	@ (8000d84 <MX_GPIO_Init+0x90>)
 8000d58:	f001 f812 	bl	8001d80 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LD3_Pin */
  GPIO_InitStruct.Pin = LD3_Pin;
 8000d5c:	2308      	movs	r3, #8
 8000d5e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d60:	2301      	movs	r3, #1
 8000d62:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d64:	2300      	movs	r3, #0
 8000d66:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d68:	2300      	movs	r3, #0
 8000d6a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LD3_GPIO_Port, &GPIO_InitStruct);
 8000d6c:	f107 030c 	add.w	r3, r7, #12
 8000d70:	4619      	mov	r1, r3
 8000d72:	4804      	ldr	r0, [pc, #16]	@ (8000d84 <MX_GPIO_Init+0x90>)
 8000d74:	f000 fe9a 	bl	8001aac <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000d78:	bf00      	nop
 8000d7a:	3720      	adds	r7, #32
 8000d7c:	46bd      	mov	sp, r7
 8000d7e:	bd80      	pop	{r7, pc}
 8000d80:	40021000 	.word	0x40021000
 8000d84:	48000400 	.word	0x48000400

08000d88 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d88:	b480      	push	{r7}
 8000d8a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d8c:	b672      	cpsid	i
}
 8000d8e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000d90:	bf00      	nop
 8000d92:	e7fd      	b.n	8000d90 <Error_Handler+0x8>

08000d94 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d94:	b480      	push	{r7}
 8000d96:	b083      	sub	sp, #12
 8000d98:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d9a:	4b0f      	ldr	r3, [pc, #60]	@ (8000dd8 <HAL_MspInit+0x44>)
 8000d9c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000d9e:	4a0e      	ldr	r2, [pc, #56]	@ (8000dd8 <HAL_MspInit+0x44>)
 8000da0:	f043 0301 	orr.w	r3, r3, #1
 8000da4:	6613      	str	r3, [r2, #96]	@ 0x60
 8000da6:	4b0c      	ldr	r3, [pc, #48]	@ (8000dd8 <HAL_MspInit+0x44>)
 8000da8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000daa:	f003 0301 	and.w	r3, r3, #1
 8000dae:	607b      	str	r3, [r7, #4]
 8000db0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000db2:	4b09      	ldr	r3, [pc, #36]	@ (8000dd8 <HAL_MspInit+0x44>)
 8000db4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000db6:	4a08      	ldr	r2, [pc, #32]	@ (8000dd8 <HAL_MspInit+0x44>)
 8000db8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000dbc:	6593      	str	r3, [r2, #88]	@ 0x58
 8000dbe:	4b06      	ldr	r3, [pc, #24]	@ (8000dd8 <HAL_MspInit+0x44>)
 8000dc0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000dc2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000dc6:	603b      	str	r3, [r7, #0]
 8000dc8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000dca:	bf00      	nop
 8000dcc:	370c      	adds	r7, #12
 8000dce:	46bd      	mov	sp, r7
 8000dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd4:	4770      	bx	lr
 8000dd6:	bf00      	nop
 8000dd8:	40021000 	.word	0x40021000

08000ddc <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8000ddc:	b480      	push	{r7}
 8000dde:	b085      	sub	sp, #20
 8000de0:	af00      	add	r7, sp, #0
 8000de2:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	681b      	ldr	r3, [r3, #0]
 8000de8:	4a0a      	ldr	r2, [pc, #40]	@ (8000e14 <HAL_CRC_MspInit+0x38>)
 8000dea:	4293      	cmp	r3, r2
 8000dec:	d10b      	bne.n	8000e06 <HAL_CRC_MspInit+0x2a>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8000dee:	4b0a      	ldr	r3, [pc, #40]	@ (8000e18 <HAL_CRC_MspInit+0x3c>)
 8000df0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000df2:	4a09      	ldr	r2, [pc, #36]	@ (8000e18 <HAL_CRC_MspInit+0x3c>)
 8000df4:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000df8:	6493      	str	r3, [r2, #72]	@ 0x48
 8000dfa:	4b07      	ldr	r3, [pc, #28]	@ (8000e18 <HAL_CRC_MspInit+0x3c>)
 8000dfc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000dfe:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000e02:	60fb      	str	r3, [r7, #12]
 8000e04:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 8000e06:	bf00      	nop
 8000e08:	3714      	adds	r7, #20
 8000e0a:	46bd      	mov	sp, r7
 8000e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e10:	4770      	bx	lr
 8000e12:	bf00      	nop
 8000e14:	40023000 	.word	0x40023000
 8000e18:	40021000 	.word	0x40021000

08000e1c <HAL_SMBUS_MspInit>:
* This function configures the hardware resources used in this example
* @param hsmbus: SMBUS handle pointer
* @retval None
*/
void HAL_SMBUS_MspInit(SMBUS_HandleTypeDef* hsmbus)
{
 8000e1c:	b580      	push	{r7, lr}
 8000e1e:	b09e      	sub	sp, #120	@ 0x78
 8000e20:	af00      	add	r7, sp, #0
 8000e22:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e24:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8000e28:	2200      	movs	r2, #0
 8000e2a:	601a      	str	r2, [r3, #0]
 8000e2c:	605a      	str	r2, [r3, #4]
 8000e2e:	609a      	str	r2, [r3, #8]
 8000e30:	60da      	str	r2, [r3, #12]
 8000e32:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000e34:	f107 0310 	add.w	r3, r7, #16
 8000e38:	2254      	movs	r2, #84	@ 0x54
 8000e3a:	2100      	movs	r1, #0
 8000e3c:	4618      	mov	r0, r3
 8000e3e:	f004 fd80 	bl	8005942 <memset>
  if(hsmbus->Instance==I2C1)
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	681b      	ldr	r3, [r3, #0]
 8000e46:	4a1f      	ldr	r2, [pc, #124]	@ (8000ec4 <HAL_SMBUS_MspInit+0xa8>)
 8000e48:	4293      	cmp	r3, r2
 8000e4a:	d137      	bne.n	8000ebc <HAL_SMBUS_MspInit+0xa0>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8000e4c:	2340      	movs	r3, #64	@ 0x40
 8000e4e:	613b      	str	r3, [r7, #16]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8000e50:	2300      	movs	r3, #0
 8000e52:	63fb      	str	r3, [r7, #60]	@ 0x3c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000e54:	f107 0310 	add.w	r3, r7, #16
 8000e58:	4618      	mov	r0, r3
 8000e5a:	f002 f843 	bl	8002ee4 <HAL_RCCEx_PeriphCLKConfig>
 8000e5e:	4603      	mov	r3, r0
 8000e60:	2b00      	cmp	r3, #0
 8000e62:	d001      	beq.n	8000e68 <HAL_SMBUS_MspInit+0x4c>
    {
      Error_Handler();
 8000e64:	f7ff ff90 	bl	8000d88 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e68:	4b17      	ldr	r3, [pc, #92]	@ (8000ec8 <HAL_SMBUS_MspInit+0xac>)
 8000e6a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000e6c:	4a16      	ldr	r2, [pc, #88]	@ (8000ec8 <HAL_SMBUS_MspInit+0xac>)
 8000e6e:	f043 0301 	orr.w	r3, r3, #1
 8000e72:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000e74:	4b14      	ldr	r3, [pc, #80]	@ (8000ec8 <HAL_SMBUS_MspInit+0xac>)
 8000e76:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000e78:	f003 0301 	and.w	r3, r3, #1
 8000e7c:	60fb      	str	r3, [r7, #12]
 8000e7e:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PA1     ------> I2C1_SMBA
    PA9     ------> I2C1_SCL
    PA10     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_9|GPIO_PIN_10;
 8000e80:	f240 6302 	movw	r3, #1538	@ 0x602
 8000e84:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000e86:	2312      	movs	r3, #18
 8000e88:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e8a:	2300      	movs	r3, #0
 8000e8c:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e8e:	2303      	movs	r3, #3
 8000e90:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000e92:	2304      	movs	r3, #4
 8000e94:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e96:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8000e9a:	4619      	mov	r1, r3
 8000e9c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000ea0:	f000 fe04 	bl	8001aac <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000ea4:	4b08      	ldr	r3, [pc, #32]	@ (8000ec8 <HAL_SMBUS_MspInit+0xac>)
 8000ea6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000ea8:	4a07      	ldr	r2, [pc, #28]	@ (8000ec8 <HAL_SMBUS_MspInit+0xac>)
 8000eaa:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000eae:	6593      	str	r3, [r2, #88]	@ 0x58
 8000eb0:	4b05      	ldr	r3, [pc, #20]	@ (8000ec8 <HAL_SMBUS_MspInit+0xac>)
 8000eb2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000eb4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000eb8:	60bb      	str	r3, [r7, #8]
 8000eba:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000ebc:	bf00      	nop
 8000ebe:	3778      	adds	r7, #120	@ 0x78
 8000ec0:	46bd      	mov	sp, r7
 8000ec2:	bd80      	pop	{r7, pc}
 8000ec4:	40005400 	.word	0x40005400
 8000ec8:	40021000 	.word	0x40021000

08000ecc <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000ecc:	b580      	push	{r7, lr}
 8000ece:	b0a0      	sub	sp, #128	@ 0x80
 8000ed0:	af00      	add	r7, sp, #0
 8000ed2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ed4:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8000ed8:	2200      	movs	r2, #0
 8000eda:	601a      	str	r2, [r3, #0]
 8000edc:	605a      	str	r2, [r3, #4]
 8000ede:	609a      	str	r2, [r3, #8]
 8000ee0:	60da      	str	r2, [r3, #12]
 8000ee2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000ee4:	f107 0318 	add.w	r3, r7, #24
 8000ee8:	2254      	movs	r2, #84	@ 0x54
 8000eea:	2100      	movs	r1, #0
 8000eec:	4618      	mov	r0, r3
 8000eee:	f004 fd28 	bl	8005942 <memset>
  if(hi2c->Instance==I2C3)
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	681b      	ldr	r3, [r3, #0]
 8000ef6:	4a2d      	ldr	r2, [pc, #180]	@ (8000fac <HAL_I2C_MspInit+0xe0>)
 8000ef8:	4293      	cmp	r3, r2
 8000efa:	d153      	bne.n	8000fa4 <HAL_I2C_MspInit+0xd8>

  /* USER CODE END I2C3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C3;
 8000efc:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000f00:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK1;
 8000f02:	2300      	movs	r3, #0
 8000f04:	64bb      	str	r3, [r7, #72]	@ 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000f06:	f107 0318 	add.w	r3, r7, #24
 8000f0a:	4618      	mov	r0, r3
 8000f0c:	f001 ffea 	bl	8002ee4 <HAL_RCCEx_PeriphCLKConfig>
 8000f10:	4603      	mov	r3, r0
 8000f12:	2b00      	cmp	r3, #0
 8000f14:	d001      	beq.n	8000f1a <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8000f16:	f7ff ff37 	bl	8000d88 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f1a:	4b25      	ldr	r3, [pc, #148]	@ (8000fb0 <HAL_I2C_MspInit+0xe4>)
 8000f1c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f1e:	4a24      	ldr	r2, [pc, #144]	@ (8000fb0 <HAL_I2C_MspInit+0xe4>)
 8000f20:	f043 0301 	orr.w	r3, r3, #1
 8000f24:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000f26:	4b22      	ldr	r3, [pc, #136]	@ (8000fb0 <HAL_I2C_MspInit+0xe4>)
 8000f28:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f2a:	f003 0301 	and.w	r3, r3, #1
 8000f2e:	617b      	str	r3, [r7, #20]
 8000f30:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f32:	4b1f      	ldr	r3, [pc, #124]	@ (8000fb0 <HAL_I2C_MspInit+0xe4>)
 8000f34:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f36:	4a1e      	ldr	r2, [pc, #120]	@ (8000fb0 <HAL_I2C_MspInit+0xe4>)
 8000f38:	f043 0302 	orr.w	r3, r3, #2
 8000f3c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000f3e:	4b1c      	ldr	r3, [pc, #112]	@ (8000fb0 <HAL_I2C_MspInit+0xe4>)
 8000f40:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f42:	f003 0302 	and.w	r3, r3, #2
 8000f46:	613b      	str	r3, [r7, #16]
 8000f48:	693b      	ldr	r3, [r7, #16]
    /**I2C3 GPIO Configuration
    PA7     ------> I2C3_SCL
    PB4 (NJTRST)     ------> I2C3_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8000f4a:	2380      	movs	r3, #128	@ 0x80
 8000f4c:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000f4e:	2312      	movs	r3, #18
 8000f50:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f52:	2300      	movs	r3, #0
 8000f54:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f56:	2303      	movs	r3, #3
 8000f58:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8000f5a:	2304      	movs	r3, #4
 8000f5c:	67fb      	str	r3, [r7, #124]	@ 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f5e:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8000f62:	4619      	mov	r1, r3
 8000f64:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000f68:	f000 fda0 	bl	8001aac <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000f6c:	2310      	movs	r3, #16
 8000f6e:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000f70:	2312      	movs	r3, #18
 8000f72:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f74:	2300      	movs	r3, #0
 8000f76:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f78:	2303      	movs	r3, #3
 8000f7a:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8000f7c:	2304      	movs	r3, #4
 8000f7e:	67fb      	str	r3, [r7, #124]	@ 0x7c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f80:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8000f84:	4619      	mov	r1, r3
 8000f86:	480b      	ldr	r0, [pc, #44]	@ (8000fb4 <HAL_I2C_MspInit+0xe8>)
 8000f88:	f000 fd90 	bl	8001aac <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 8000f8c:	4b08      	ldr	r3, [pc, #32]	@ (8000fb0 <HAL_I2C_MspInit+0xe4>)
 8000f8e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000f90:	4a07      	ldr	r2, [pc, #28]	@ (8000fb0 <HAL_I2C_MspInit+0xe4>)
 8000f92:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8000f96:	6593      	str	r3, [r2, #88]	@ 0x58
 8000f98:	4b05      	ldr	r3, [pc, #20]	@ (8000fb0 <HAL_I2C_MspInit+0xe4>)
 8000f9a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000f9c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8000fa0:	60fb      	str	r3, [r7, #12]
 8000fa2:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 8000fa4:	bf00      	nop
 8000fa6:	3780      	adds	r7, #128	@ 0x80
 8000fa8:	46bd      	mov	sp, r7
 8000faa:	bd80      	pop	{r7, pc}
 8000fac:	40005c00 	.word	0x40005c00
 8000fb0:	40021000 	.word	0x40021000
 8000fb4:	48000400 	.word	0x48000400

08000fb8 <HAL_LPTIM_MspInit>:
* This function configures the hardware resources used in this example
* @param hlptim: LPTIM handle pointer
* @retval None
*/
void HAL_LPTIM_MspInit(LPTIM_HandleTypeDef* hlptim)
{
 8000fb8:	b580      	push	{r7, lr}
 8000fba:	b098      	sub	sp, #96	@ 0x60
 8000fbc:	af00      	add	r7, sp, #0
 8000fbe:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000fc0:	f107 030c 	add.w	r3, r7, #12
 8000fc4:	2254      	movs	r2, #84	@ 0x54
 8000fc6:	2100      	movs	r1, #0
 8000fc8:	4618      	mov	r0, r3
 8000fca:	f004 fcba 	bl	8005942 <memset>
  if(hlptim->Instance==LPTIM1)
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	681b      	ldr	r3, [r3, #0]
 8000fd2:	4a11      	ldr	r2, [pc, #68]	@ (8001018 <HAL_LPTIM_MspInit+0x60>)
 8000fd4:	4293      	cmp	r3, r2
 8000fd6:	d11a      	bne.n	800100e <HAL_LPTIM_MspInit+0x56>

  /* USER CODE END LPTIM1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPTIM1;
 8000fd8:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000fdc:	60fb      	str	r3, [r7, #12]
    PeriphClkInit.Lptim1ClockSelection = RCC_LPTIM1CLKSOURCE_PCLK;
 8000fde:	2300      	movs	r3, #0
 8000fe0:	643b      	str	r3, [r7, #64]	@ 0x40
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000fe2:	f107 030c 	add.w	r3, r7, #12
 8000fe6:	4618      	mov	r0, r3
 8000fe8:	f001 ff7c 	bl	8002ee4 <HAL_RCCEx_PeriphCLKConfig>
 8000fec:	4603      	mov	r3, r0
 8000fee:	2b00      	cmp	r3, #0
 8000ff0:	d001      	beq.n	8000ff6 <HAL_LPTIM_MspInit+0x3e>
    {
      Error_Handler();
 8000ff2:	f7ff fec9 	bl	8000d88 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPTIM1_CLK_ENABLE();
 8000ff6:	4b09      	ldr	r3, [pc, #36]	@ (800101c <HAL_LPTIM_MspInit+0x64>)
 8000ff8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000ffa:	4a08      	ldr	r2, [pc, #32]	@ (800101c <HAL_LPTIM_MspInit+0x64>)
 8000ffc:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8001000:	6593      	str	r3, [r2, #88]	@ 0x58
 8001002:	4b06      	ldr	r3, [pc, #24]	@ (800101c <HAL_LPTIM_MspInit+0x64>)
 8001004:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001006:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800100a:	60bb      	str	r3, [r7, #8]
 800100c:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN LPTIM1_MspInit 1 */

  /* USER CODE END LPTIM1_MspInit 1 */
  }

}
 800100e:	bf00      	nop
 8001010:	3760      	adds	r7, #96	@ 0x60
 8001012:	46bd      	mov	sp, r7
 8001014:	bd80      	pop	{r7, pc}
 8001016:	bf00      	nop
 8001018:	40007c00 	.word	0x40007c00
 800101c:	40021000 	.word	0x40021000

08001020 <HAL_RNG_MspInit>:
* This function configures the hardware resources used in this example
* @param hrng: RNG handle pointer
* @retval None
*/
void HAL_RNG_MspInit(RNG_HandleTypeDef* hrng)
{
 8001020:	b580      	push	{r7, lr}
 8001022:	b098      	sub	sp, #96	@ 0x60
 8001024:	af00      	add	r7, sp, #0
 8001026:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001028:	f107 030c 	add.w	r3, r7, #12
 800102c:	2254      	movs	r2, #84	@ 0x54
 800102e:	2100      	movs	r1, #0
 8001030:	4618      	mov	r0, r3
 8001032:	f004 fc86 	bl	8005942 <memset>
  if(hrng->Instance==RNG)
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	681b      	ldr	r3, [r3, #0]
 800103a:	4a19      	ldr	r2, [pc, #100]	@ (80010a0 <HAL_RNG_MspInit+0x80>)
 800103c:	4293      	cmp	r3, r2
 800103e:	d12a      	bne.n	8001096 <HAL_RNG_MspInit+0x76>

  /* USER CODE END RNG_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RNG;
 8001040:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8001044:	60fb      	str	r3, [r7, #12]
    PeriphClkInit.RngClockSelection = RCC_RNGCLKSOURCE_PLLSAI1;
 8001046:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 800104a:	653b      	str	r3, [r7, #80]	@ 0x50
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 800104c:	2301      	movs	r3, #1
 800104e:	613b      	str	r3, [r7, #16]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8001050:	2301      	movs	r3, #1
 8001052:	617b      	str	r3, [r7, #20]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 16;
 8001054:	2310      	movs	r3, #16
 8001056:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 8001058:	2307      	movs	r3, #7
 800105a:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 800105c:	2302      	movs	r3, #2
 800105e:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8001060:	2302      	movs	r3, #2
 8001062:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_48M2CLK;
 8001064:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8001068:	62bb      	str	r3, [r7, #40]	@ 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800106a:	f107 030c 	add.w	r3, r7, #12
 800106e:	4618      	mov	r0, r3
 8001070:	f001 ff38 	bl	8002ee4 <HAL_RCCEx_PeriphCLKConfig>
 8001074:	4603      	mov	r3, r0
 8001076:	2b00      	cmp	r3, #0
 8001078:	d001      	beq.n	800107e <HAL_RNG_MspInit+0x5e>
    {
      Error_Handler();
 800107a:	f7ff fe85 	bl	8000d88 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RNG_CLK_ENABLE();
 800107e:	4b09      	ldr	r3, [pc, #36]	@ (80010a4 <HAL_RNG_MspInit+0x84>)
 8001080:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001082:	4a08      	ldr	r2, [pc, #32]	@ (80010a4 <HAL_RNG_MspInit+0x84>)
 8001084:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001088:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800108a:	4b06      	ldr	r3, [pc, #24]	@ (80010a4 <HAL_RNG_MspInit+0x84>)
 800108c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800108e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001092:	60bb      	str	r3, [r7, #8]
 8001094:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN RNG_MspInit 1 */

  /* USER CODE END RNG_MspInit 1 */
  }

}
 8001096:	bf00      	nop
 8001098:	3760      	adds	r7, #96	@ 0x60
 800109a:	46bd      	mov	sp, r7
 800109c:	bd80      	pop	{r7, pc}
 800109e:	bf00      	nop
 80010a0:	50060800 	.word	0x50060800
 80010a4:	40021000 	.word	0x40021000

080010a8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80010a8:	b580      	push	{r7, lr}
 80010aa:	b08a      	sub	sp, #40	@ 0x28
 80010ac:	af00      	add	r7, sp, #0
 80010ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010b0:	f107 0314 	add.w	r3, r7, #20
 80010b4:	2200      	movs	r2, #0
 80010b6:	601a      	str	r2, [r3, #0]
 80010b8:	605a      	str	r2, [r3, #4]
 80010ba:	609a      	str	r2, [r3, #8]
 80010bc:	60da      	str	r2, [r3, #12]
 80010be:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	681b      	ldr	r3, [r3, #0]
 80010c4:	4a18      	ldr	r2, [pc, #96]	@ (8001128 <HAL_SPI_MspInit+0x80>)
 80010c6:	4293      	cmp	r3, r2
 80010c8:	d129      	bne.n	800111e <HAL_SPI_MspInit+0x76>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80010ca:	4b18      	ldr	r3, [pc, #96]	@ (800112c <HAL_SPI_MspInit+0x84>)
 80010cc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80010ce:	4a17      	ldr	r2, [pc, #92]	@ (800112c <HAL_SPI_MspInit+0x84>)
 80010d0:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80010d4:	6613      	str	r3, [r2, #96]	@ 0x60
 80010d6:	4b15      	ldr	r3, [pc, #84]	@ (800112c <HAL_SPI_MspInit+0x84>)
 80010d8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80010da:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80010de:	613b      	str	r3, [r7, #16]
 80010e0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010e2:	4b12      	ldr	r3, [pc, #72]	@ (800112c <HAL_SPI_MspInit+0x84>)
 80010e4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80010e6:	4a11      	ldr	r2, [pc, #68]	@ (800112c <HAL_SPI_MspInit+0x84>)
 80010e8:	f043 0301 	orr.w	r3, r3, #1
 80010ec:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80010ee:	4b0f      	ldr	r3, [pc, #60]	@ (800112c <HAL_SPI_MspInit+0x84>)
 80010f0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80010f2:	f003 0301 	and.w	r3, r3, #1
 80010f6:	60fb      	str	r3, [r7, #12]
 80010f8:	68fb      	ldr	r3, [r7, #12]
    PA4     ------> SPI1_NSS
    PA5     ------> SPI1_SCK
    PA11     ------> SPI1_MISO
    PA12     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_11|GPIO_PIN_12;
 80010fa:	f641 0330 	movw	r3, #6192	@ 0x1830
 80010fe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001100:	2302      	movs	r3, #2
 8001102:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001104:	2300      	movs	r3, #0
 8001106:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001108:	2303      	movs	r3, #3
 800110a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800110c:	2305      	movs	r3, #5
 800110e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001110:	f107 0314 	add.w	r3, r7, #20
 8001114:	4619      	mov	r1, r3
 8001116:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800111a:	f000 fcc7 	bl	8001aac <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 800111e:	bf00      	nop
 8001120:	3728      	adds	r7, #40	@ 0x28
 8001122:	46bd      	mov	sp, r7
 8001124:	bd80      	pop	{r7, pc}
 8001126:	bf00      	nop
 8001128:	40013000 	.word	0x40013000
 800112c:	40021000 	.word	0x40021000

08001130 <HAL_SWPMI_MspInit>:
* This function configures the hardware resources used in this example
* @param hswpmi: SWPMI handle pointer
* @retval None
*/
void HAL_SWPMI_MspInit(SWPMI_HandleTypeDef* hswpmi)
{
 8001130:	b580      	push	{r7, lr}
 8001132:	b09e      	sub	sp, #120	@ 0x78
 8001134:	af00      	add	r7, sp, #0
 8001136:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001138:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 800113c:	2200      	movs	r2, #0
 800113e:	601a      	str	r2, [r3, #0]
 8001140:	605a      	str	r2, [r3, #4]
 8001142:	609a      	str	r2, [r3, #8]
 8001144:	60da      	str	r2, [r3, #12]
 8001146:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001148:	f107 0310 	add.w	r3, r7, #16
 800114c:	2254      	movs	r2, #84	@ 0x54
 800114e:	2100      	movs	r1, #0
 8001150:	4618      	mov	r0, r3
 8001152:	f004 fbf6 	bl	8005942 <memset>
  if(hswpmi->Instance==SWPMI1)
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	681b      	ldr	r3, [r3, #0]
 800115a:	4a20      	ldr	r2, [pc, #128]	@ (80011dc <HAL_SWPMI_MspInit+0xac>)
 800115c:	4293      	cmp	r3, r2
 800115e:	d138      	bne.n	80011d2 <HAL_SWPMI_MspInit+0xa2>

  /* USER CODE END SWPMI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_SWPMI1;
 8001160:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001164:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Swpmi1ClockSelection = RCC_SWPMI1CLKSOURCE_PCLK;
 8001166:	2300      	movs	r3, #0
 8001168:	65fb      	str	r3, [r7, #92]	@ 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800116a:	f107 0310 	add.w	r3, r7, #16
 800116e:	4618      	mov	r0, r3
 8001170:	f001 feb8 	bl	8002ee4 <HAL_RCCEx_PeriphCLKConfig>
 8001174:	4603      	mov	r3, r0
 8001176:	2b00      	cmp	r3, #0
 8001178:	d001      	beq.n	800117e <HAL_SWPMI_MspInit+0x4e>
    {
      Error_Handler();
 800117a:	f7ff fe05 	bl	8000d88 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SWPMI1_CLK_ENABLE();
 800117e:	4b18      	ldr	r3, [pc, #96]	@ (80011e0 <HAL_SWPMI_MspInit+0xb0>)
 8001180:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001182:	4a17      	ldr	r2, [pc, #92]	@ (80011e0 <HAL_SWPMI_MspInit+0xb0>)
 8001184:	f043 0304 	orr.w	r3, r3, #4
 8001188:	65d3      	str	r3, [r2, #92]	@ 0x5c
 800118a:	4b15      	ldr	r3, [pc, #84]	@ (80011e0 <HAL_SWPMI_MspInit+0xb0>)
 800118c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800118e:	f003 0304 	and.w	r3, r3, #4
 8001192:	60fb      	str	r3, [r7, #12]
 8001194:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001196:	4b12      	ldr	r3, [pc, #72]	@ (80011e0 <HAL_SWPMI_MspInit+0xb0>)
 8001198:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800119a:	4a11      	ldr	r2, [pc, #68]	@ (80011e0 <HAL_SWPMI_MspInit+0xb0>)
 800119c:	f043 0301 	orr.w	r3, r3, #1
 80011a0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80011a2:	4b0f      	ldr	r3, [pc, #60]	@ (80011e0 <HAL_SWPMI_MspInit+0xb0>)
 80011a4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80011a6:	f003 0301 	and.w	r3, r3, #1
 80011aa:	60bb      	str	r3, [r7, #8]
 80011ac:	68bb      	ldr	r3, [r7, #8]
    /**SWPMI1 GPIO Configuration
    PA8     ------> SWPMI1_IO
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80011ae:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80011b2:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011b4:	2302      	movs	r3, #2
 80011b6:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011b8:	2300      	movs	r3, #0
 80011ba:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011bc:	2303      	movs	r3, #3
 80011be:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF12_SWPMI1;
 80011c0:	230c      	movs	r3, #12
 80011c2:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011c4:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 80011c8:	4619      	mov	r1, r3
 80011ca:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80011ce:	f000 fc6d 	bl	8001aac <HAL_GPIO_Init>
  /* USER CODE BEGIN SWPMI1_MspInit 1 */

  /* USER CODE END SWPMI1_MspInit 1 */
  }

}
 80011d2:	bf00      	nop
 80011d4:	3778      	adds	r7, #120	@ 0x78
 80011d6:	46bd      	mov	sp, r7
 80011d8:	bd80      	pop	{r7, pc}
 80011da:	bf00      	nop
 80011dc:	40008800 	.word	0x40008800
 80011e0:	40021000 	.word	0x40021000

080011e4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80011e4:	b580      	push	{r7, lr}
 80011e6:	b08e      	sub	sp, #56	@ 0x38
 80011e8:	af00      	add	r7, sp, #0
 80011ea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011ec:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80011f0:	2200      	movs	r2, #0
 80011f2:	601a      	str	r2, [r3, #0]
 80011f4:	605a      	str	r2, [r3, #4]
 80011f6:	609a      	str	r2, [r3, #8]
 80011f8:	60da      	str	r2, [r3, #12]
 80011fa:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM1)
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	681b      	ldr	r3, [r3, #0]
 8001200:	4a3b      	ldr	r2, [pc, #236]	@ (80012f0 <HAL_TIM_Base_MspInit+0x10c>)
 8001202:	4293      	cmp	r3, r2
 8001204:	d10c      	bne.n	8001220 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001206:	4b3b      	ldr	r3, [pc, #236]	@ (80012f4 <HAL_TIM_Base_MspInit+0x110>)
 8001208:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800120a:	4a3a      	ldr	r2, [pc, #232]	@ (80012f4 <HAL_TIM_Base_MspInit+0x110>)
 800120c:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001210:	6613      	str	r3, [r2, #96]	@ 0x60
 8001212:	4b38      	ldr	r3, [pc, #224]	@ (80012f4 <HAL_TIM_Base_MspInit+0x110>)
 8001214:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001216:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800121a:	623b      	str	r3, [r7, #32]
 800121c:	6a3b      	ldr	r3, [r7, #32]
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }

}
 800121e:	e063      	b.n	80012e8 <HAL_TIM_Base_MspInit+0x104>
  else if(htim_base->Instance==TIM2)
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	681b      	ldr	r3, [r3, #0]
 8001224:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001228:	d10c      	bne.n	8001244 <HAL_TIM_Base_MspInit+0x60>
    __HAL_RCC_TIM2_CLK_ENABLE();
 800122a:	4b32      	ldr	r3, [pc, #200]	@ (80012f4 <HAL_TIM_Base_MspInit+0x110>)
 800122c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800122e:	4a31      	ldr	r2, [pc, #196]	@ (80012f4 <HAL_TIM_Base_MspInit+0x110>)
 8001230:	f043 0301 	orr.w	r3, r3, #1
 8001234:	6593      	str	r3, [r2, #88]	@ 0x58
 8001236:	4b2f      	ldr	r3, [pc, #188]	@ (80012f4 <HAL_TIM_Base_MspInit+0x110>)
 8001238:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800123a:	f003 0301 	and.w	r3, r3, #1
 800123e:	61fb      	str	r3, [r7, #28]
 8001240:	69fb      	ldr	r3, [r7, #28]
}
 8001242:	e051      	b.n	80012e8 <HAL_TIM_Base_MspInit+0x104>
  else if(htim_base->Instance==TIM6)
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	4a2b      	ldr	r2, [pc, #172]	@ (80012f8 <HAL_TIM_Base_MspInit+0x114>)
 800124a:	4293      	cmp	r3, r2
 800124c:	d10c      	bne.n	8001268 <HAL_TIM_Base_MspInit+0x84>
    __HAL_RCC_TIM6_CLK_ENABLE();
 800124e:	4b29      	ldr	r3, [pc, #164]	@ (80012f4 <HAL_TIM_Base_MspInit+0x110>)
 8001250:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001252:	4a28      	ldr	r2, [pc, #160]	@ (80012f4 <HAL_TIM_Base_MspInit+0x110>)
 8001254:	f043 0310 	orr.w	r3, r3, #16
 8001258:	6593      	str	r3, [r2, #88]	@ 0x58
 800125a:	4b26      	ldr	r3, [pc, #152]	@ (80012f4 <HAL_TIM_Base_MspInit+0x110>)
 800125c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800125e:	f003 0310 	and.w	r3, r3, #16
 8001262:	61bb      	str	r3, [r7, #24]
 8001264:	69bb      	ldr	r3, [r7, #24]
}
 8001266:	e03f      	b.n	80012e8 <HAL_TIM_Base_MspInit+0x104>
  else if(htim_base->Instance==TIM15)
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	4a23      	ldr	r2, [pc, #140]	@ (80012fc <HAL_TIM_Base_MspInit+0x118>)
 800126e:	4293      	cmp	r3, r2
 8001270:	d129      	bne.n	80012c6 <HAL_TIM_Base_MspInit+0xe2>
    __HAL_RCC_TIM15_CLK_ENABLE();
 8001272:	4b20      	ldr	r3, [pc, #128]	@ (80012f4 <HAL_TIM_Base_MspInit+0x110>)
 8001274:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001276:	4a1f      	ldr	r2, [pc, #124]	@ (80012f4 <HAL_TIM_Base_MspInit+0x110>)
 8001278:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800127c:	6613      	str	r3, [r2, #96]	@ 0x60
 800127e:	4b1d      	ldr	r3, [pc, #116]	@ (80012f4 <HAL_TIM_Base_MspInit+0x110>)
 8001280:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001282:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001286:	617b      	str	r3, [r7, #20]
 8001288:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800128a:	4b1a      	ldr	r3, [pc, #104]	@ (80012f4 <HAL_TIM_Base_MspInit+0x110>)
 800128c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800128e:	4a19      	ldr	r2, [pc, #100]	@ (80012f4 <HAL_TIM_Base_MspInit+0x110>)
 8001290:	f043 0301 	orr.w	r3, r3, #1
 8001294:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001296:	4b17      	ldr	r3, [pc, #92]	@ (80012f4 <HAL_TIM_Base_MspInit+0x110>)
 8001298:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800129a:	f003 0301 	and.w	r3, r3, #1
 800129e:	613b      	str	r3, [r7, #16]
 80012a0:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80012a2:	2308      	movs	r3, #8
 80012a4:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012a6:	2302      	movs	r3, #2
 80012a8:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012aa:	2300      	movs	r3, #0
 80012ac:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012ae:	2300      	movs	r3, #0
 80012b0:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_TIM15;
 80012b2:	230e      	movs	r3, #14
 80012b4:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012b6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80012ba:	4619      	mov	r1, r3
 80012bc:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80012c0:	f000 fbf4 	bl	8001aac <HAL_GPIO_Init>
}
 80012c4:	e010      	b.n	80012e8 <HAL_TIM_Base_MspInit+0x104>
  else if(htim_base->Instance==TIM16)
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	4a0d      	ldr	r2, [pc, #52]	@ (8001300 <HAL_TIM_Base_MspInit+0x11c>)
 80012cc:	4293      	cmp	r3, r2
 80012ce:	d10b      	bne.n	80012e8 <HAL_TIM_Base_MspInit+0x104>
    __HAL_RCC_TIM16_CLK_ENABLE();
 80012d0:	4b08      	ldr	r3, [pc, #32]	@ (80012f4 <HAL_TIM_Base_MspInit+0x110>)
 80012d2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80012d4:	4a07      	ldr	r2, [pc, #28]	@ (80012f4 <HAL_TIM_Base_MspInit+0x110>)
 80012d6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80012da:	6613      	str	r3, [r2, #96]	@ 0x60
 80012dc:	4b05      	ldr	r3, [pc, #20]	@ (80012f4 <HAL_TIM_Base_MspInit+0x110>)
 80012de:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80012e0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80012e4:	60fb      	str	r3, [r7, #12]
 80012e6:	68fb      	ldr	r3, [r7, #12]
}
 80012e8:	bf00      	nop
 80012ea:	3738      	adds	r7, #56	@ 0x38
 80012ec:	46bd      	mov	sp, r7
 80012ee:	bd80      	pop	{r7, pc}
 80012f0:	40012c00 	.word	0x40012c00
 80012f4:	40021000 	.word	0x40021000
 80012f8:	40001000 	.word	0x40001000
 80012fc:	40014000 	.word	0x40014000
 8001300:	40014400 	.word	0x40014400

08001304 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001304:	b580      	push	{r7, lr}
 8001306:	b088      	sub	sp, #32
 8001308:	af00      	add	r7, sp, #0
 800130a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800130c:	f107 030c 	add.w	r3, r7, #12
 8001310:	2200      	movs	r2, #0
 8001312:	601a      	str	r2, [r3, #0]
 8001314:	605a      	str	r2, [r3, #4]
 8001316:	609a      	str	r2, [r3, #8]
 8001318:	60da      	str	r2, [r3, #12]
 800131a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM16)
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	4a11      	ldr	r2, [pc, #68]	@ (8001368 <HAL_TIM_MspPostInit+0x64>)
 8001322:	4293      	cmp	r3, r2
 8001324:	d11c      	bne.n	8001360 <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM16_MspPostInit 0 */

  /* USER CODE END TIM16_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001326:	4b11      	ldr	r3, [pc, #68]	@ (800136c <HAL_TIM_MspPostInit+0x68>)
 8001328:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800132a:	4a10      	ldr	r2, [pc, #64]	@ (800136c <HAL_TIM_MspPostInit+0x68>)
 800132c:	f043 0301 	orr.w	r3, r3, #1
 8001330:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001332:	4b0e      	ldr	r3, [pc, #56]	@ (800136c <HAL_TIM_MspPostInit+0x68>)
 8001334:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001336:	f003 0301 	and.w	r3, r3, #1
 800133a:	60bb      	str	r3, [r7, #8]
 800133c:	68bb      	ldr	r3, [r7, #8]
    /**TIM16 GPIO Configuration
    PA6     ------> TIM16_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 800133e:	2340      	movs	r3, #64	@ 0x40
 8001340:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001342:	2302      	movs	r3, #2
 8001344:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001346:	2300      	movs	r3, #0
 8001348:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800134a:	2300      	movs	r3, #0
 800134c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF14_TIM16;
 800134e:	230e      	movs	r3, #14
 8001350:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001352:	f107 030c 	add.w	r3, r7, #12
 8001356:	4619      	mov	r1, r3
 8001358:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800135c:	f000 fba6 	bl	8001aac <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM16_MspPostInit 1 */

  /* USER CODE END TIM16_MspPostInit 1 */
  }

}
 8001360:	bf00      	nop
 8001362:	3720      	adds	r7, #32
 8001364:	46bd      	mov	sp, r7
 8001366:	bd80      	pop	{r7, pc}
 8001368:	40014400 	.word	0x40014400
 800136c:	40021000 	.word	0x40021000

08001370 <HAL_USART_MspInit>:
* This function configures the hardware resources used in this example
* @param husart: USART handle pointer
* @retval None
*/
void HAL_USART_MspInit(USART_HandleTypeDef* husart)
{
 8001370:	b580      	push	{r7, lr}
 8001372:	b09e      	sub	sp, #120	@ 0x78
 8001374:	af00      	add	r7, sp, #0
 8001376:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001378:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 800137c:	2200      	movs	r2, #0
 800137e:	601a      	str	r2, [r3, #0]
 8001380:	605a      	str	r2, [r3, #4]
 8001382:	609a      	str	r2, [r3, #8]
 8001384:	60da      	str	r2, [r3, #12]
 8001386:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001388:	f107 0310 	add.w	r3, r7, #16
 800138c:	2254      	movs	r2, #84	@ 0x54
 800138e:	2100      	movs	r1, #0
 8001390:	4618      	mov	r0, r3
 8001392:	f004 fad6 	bl	8005942 <memset>
  if(husart->Instance==USART1)
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	4a1e      	ldr	r2, [pc, #120]	@ (8001414 <HAL_USART_MspInit+0xa4>)
 800139c:	4293      	cmp	r3, r2
 800139e:	d135      	bne.n	800140c <HAL_USART_MspInit+0x9c>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80013a0:	2301      	movs	r3, #1
 80013a2:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80013a4:	2300      	movs	r3, #0
 80013a6:	633b      	str	r3, [r7, #48]	@ 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80013a8:	f107 0310 	add.w	r3, r7, #16
 80013ac:	4618      	mov	r0, r3
 80013ae:	f001 fd99 	bl	8002ee4 <HAL_RCCEx_PeriphCLKConfig>
 80013b2:	4603      	mov	r3, r0
 80013b4:	2b00      	cmp	r3, #0
 80013b6:	d001      	beq.n	80013bc <HAL_USART_MspInit+0x4c>
    {
      Error_Handler();
 80013b8:	f7ff fce6 	bl	8000d88 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80013bc:	4b16      	ldr	r3, [pc, #88]	@ (8001418 <HAL_USART_MspInit+0xa8>)
 80013be:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80013c0:	4a15      	ldr	r2, [pc, #84]	@ (8001418 <HAL_USART_MspInit+0xa8>)
 80013c2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80013c6:	6613      	str	r3, [r2, #96]	@ 0x60
 80013c8:	4b13      	ldr	r3, [pc, #76]	@ (8001418 <HAL_USART_MspInit+0xa8>)
 80013ca:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80013cc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80013d0:	60fb      	str	r3, [r7, #12]
 80013d2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80013d4:	4b10      	ldr	r3, [pc, #64]	@ (8001418 <HAL_USART_MspInit+0xa8>)
 80013d6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80013d8:	4a0f      	ldr	r2, [pc, #60]	@ (8001418 <HAL_USART_MspInit+0xa8>)
 80013da:	f043 0302 	orr.w	r3, r3, #2
 80013de:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80013e0:	4b0d      	ldr	r3, [pc, #52]	@ (8001418 <HAL_USART_MspInit+0xa8>)
 80013e2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80013e4:	f003 0302 	and.w	r3, r3, #2
 80013e8:	60bb      	str	r3, [r7, #8]
 80013ea:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PB5     ------> USART1_CK
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 80013ec:	23e0      	movs	r3, #224	@ 0xe0
 80013ee:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013f0:	2302      	movs	r3, #2
 80013f2:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013f4:	2300      	movs	r3, #0
 80013f6:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013f8:	2303      	movs	r3, #3
 80013fa:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80013fc:	2307      	movs	r3, #7
 80013fe:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001400:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8001404:	4619      	mov	r1, r3
 8001406:	4805      	ldr	r0, [pc, #20]	@ (800141c <HAL_USART_MspInit+0xac>)
 8001408:	f000 fb50 	bl	8001aac <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 800140c:	bf00      	nop
 800140e:	3778      	adds	r7, #120	@ 0x78
 8001410:	46bd      	mov	sp, r7
 8001412:	bd80      	pop	{r7, pc}
 8001414:	40013800 	.word	0x40013800
 8001418:	40021000 	.word	0x40021000
 800141c:	48000400 	.word	0x48000400

08001420 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001420:	b580      	push	{r7, lr}
 8001422:	b09e      	sub	sp, #120	@ 0x78
 8001424:	af00      	add	r7, sp, #0
 8001426:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001428:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 800142c:	2200      	movs	r2, #0
 800142e:	601a      	str	r2, [r3, #0]
 8001430:	605a      	str	r2, [r3, #4]
 8001432:	609a      	str	r2, [r3, #8]
 8001434:	60da      	str	r2, [r3, #12]
 8001436:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001438:	f107 0310 	add.w	r3, r7, #16
 800143c:	2254      	movs	r2, #84	@ 0x54
 800143e:	2100      	movs	r1, #0
 8001440:	4618      	mov	r0, r3
 8001442:	f004 fa7e 	bl	8005942 <memset>
  if(huart->Instance==USART2)
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	4a28      	ldr	r2, [pc, #160]	@ (80014ec <HAL_UART_MspInit+0xcc>)
 800144c:	4293      	cmp	r3, r2
 800144e:	d148      	bne.n	80014e2 <HAL_UART_MspInit+0xc2>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001450:	2302      	movs	r3, #2
 8001452:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001454:	2300      	movs	r3, #0
 8001456:	637b      	str	r3, [r7, #52]	@ 0x34
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001458:	f107 0310 	add.w	r3, r7, #16
 800145c:	4618      	mov	r0, r3
 800145e:	f001 fd41 	bl	8002ee4 <HAL_RCCEx_PeriphCLKConfig>
 8001462:	4603      	mov	r3, r0
 8001464:	2b00      	cmp	r3, #0
 8001466:	d001      	beq.n	800146c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001468:	f7ff fc8e 	bl	8000d88 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800146c:	4b20      	ldr	r3, [pc, #128]	@ (80014f0 <HAL_UART_MspInit+0xd0>)
 800146e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001470:	4a1f      	ldr	r2, [pc, #124]	@ (80014f0 <HAL_UART_MspInit+0xd0>)
 8001472:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001476:	6593      	str	r3, [r2, #88]	@ 0x58
 8001478:	4b1d      	ldr	r3, [pc, #116]	@ (80014f0 <HAL_UART_MspInit+0xd0>)
 800147a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800147c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001480:	60fb      	str	r3, [r7, #12]
 8001482:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001484:	4b1a      	ldr	r3, [pc, #104]	@ (80014f0 <HAL_UART_MspInit+0xd0>)
 8001486:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001488:	4a19      	ldr	r2, [pc, #100]	@ (80014f0 <HAL_UART_MspInit+0xd0>)
 800148a:	f043 0301 	orr.w	r3, r3, #1
 800148e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001490:	4b17      	ldr	r3, [pc, #92]	@ (80014f0 <HAL_UART_MspInit+0xd0>)
 8001492:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001494:	f003 0301 	and.w	r3, r3, #1
 8001498:	60bb      	str	r3, [r7, #8]
 800149a:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA15 (JTDI)     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = VCP_TX_Pin;
 800149c:	2304      	movs	r3, #4
 800149e:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014a0:	2302      	movs	r3, #2
 80014a2:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014a4:	2300      	movs	r3, #0
 80014a6:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014a8:	2303      	movs	r3, #3
 80014aa:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80014ac:	2307      	movs	r3, #7
 80014ae:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 80014b0:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 80014b4:	4619      	mov	r1, r3
 80014b6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80014ba:	f000 faf7 	bl	8001aac <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VCP_RX_Pin;
 80014be:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80014c2:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014c4:	2302      	movs	r3, #2
 80014c6:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014c8:	2300      	movs	r3, #0
 80014ca:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014cc:	2303      	movs	r3, #3
 80014ce:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF3_USART2;
 80014d0:	2303      	movs	r3, #3
 80014d2:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 80014d4:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 80014d8:	4619      	mov	r1, r3
 80014da:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80014de:	f000 fae5 	bl	8001aac <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80014e2:	bf00      	nop
 80014e4:	3778      	adds	r7, #120	@ 0x78
 80014e6:	46bd      	mov	sp, r7
 80014e8:	bd80      	pop	{r7, pc}
 80014ea:	bf00      	nop
 80014ec:	40004400 	.word	0x40004400
 80014f0:	40021000 	.word	0x40021000

080014f4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80014f4:	b480      	push	{r7}
 80014f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80014f8:	bf00      	nop
 80014fa:	e7fd      	b.n	80014f8 <NMI_Handler+0x4>

080014fc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80014fc:	b480      	push	{r7}
 80014fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001500:	bf00      	nop
 8001502:	e7fd      	b.n	8001500 <HardFault_Handler+0x4>

08001504 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001504:	b480      	push	{r7}
 8001506:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001508:	bf00      	nop
 800150a:	e7fd      	b.n	8001508 <MemManage_Handler+0x4>

0800150c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800150c:	b480      	push	{r7}
 800150e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001510:	bf00      	nop
 8001512:	e7fd      	b.n	8001510 <BusFault_Handler+0x4>

08001514 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001514:	b480      	push	{r7}
 8001516:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001518:	bf00      	nop
 800151a:	e7fd      	b.n	8001518 <UsageFault_Handler+0x4>

0800151c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800151c:	b480      	push	{r7}
 800151e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001520:	bf00      	nop
 8001522:	46bd      	mov	sp, r7
 8001524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001528:	4770      	bx	lr

0800152a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800152a:	b480      	push	{r7}
 800152c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800152e:	bf00      	nop
 8001530:	46bd      	mov	sp, r7
 8001532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001536:	4770      	bx	lr

08001538 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001538:	b480      	push	{r7}
 800153a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800153c:	bf00      	nop
 800153e:	46bd      	mov	sp, r7
 8001540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001544:	4770      	bx	lr

08001546 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001546:	b580      	push	{r7, lr}
 8001548:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800154a:	f000 f893 	bl	8001674 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800154e:	bf00      	nop
 8001550:	bd80      	pop	{r7, pc}
	...

08001554 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001554:	b480      	push	{r7}
 8001556:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001558:	4b06      	ldr	r3, [pc, #24]	@ (8001574 <SystemInit+0x20>)
 800155a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800155e:	4a05      	ldr	r2, [pc, #20]	@ (8001574 <SystemInit+0x20>)
 8001560:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001564:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8001568:	bf00      	nop
 800156a:	46bd      	mov	sp, r7
 800156c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001570:	4770      	bx	lr
 8001572:	bf00      	nop
 8001574:	e000ed00 	.word	0xe000ed00

08001578 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001578:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80015b0 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 800157c:	f7ff ffea 	bl	8001554 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001580:	480c      	ldr	r0, [pc, #48]	@ (80015b4 <LoopForever+0x6>)
  ldr r1, =_edata
 8001582:	490d      	ldr	r1, [pc, #52]	@ (80015b8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001584:	4a0d      	ldr	r2, [pc, #52]	@ (80015bc <LoopForever+0xe>)
  movs r3, #0
 8001586:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001588:	e002      	b.n	8001590 <LoopCopyDataInit>

0800158a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800158a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800158c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800158e:	3304      	adds	r3, #4

08001590 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001590:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001592:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001594:	d3f9      	bcc.n	800158a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001596:	4a0a      	ldr	r2, [pc, #40]	@ (80015c0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001598:	4c0a      	ldr	r4, [pc, #40]	@ (80015c4 <LoopForever+0x16>)
  movs r3, #0
 800159a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800159c:	e001      	b.n	80015a2 <LoopFillZerobss>

0800159e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800159e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80015a0:	3204      	adds	r2, #4

080015a2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80015a2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80015a4:	d3fb      	bcc.n	800159e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80015a6:	f004 f9d5 	bl	8005954 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80015aa:	f7fe ff87 	bl	80004bc <main>

080015ae <LoopForever>:

LoopForever:
    b LoopForever
 80015ae:	e7fe      	b.n	80015ae <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80015b0:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 80015b4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80015b8:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80015bc:	08005a0c 	.word	0x08005a0c
  ldr r2, =_sbss
 80015c0:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80015c4:	20000430 	.word	0x20000430

080015c8 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80015c8:	e7fe      	b.n	80015c8 <ADC1_IRQHandler>

080015ca <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80015ca:	b580      	push	{r7, lr}
 80015cc:	b082      	sub	sp, #8
 80015ce:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80015d0:	2300      	movs	r3, #0
 80015d2:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80015d4:	2003      	movs	r0, #3
 80015d6:	f000 f943 	bl	8001860 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80015da:	2000      	movs	r0, #0
 80015dc:	f000 f80e 	bl	80015fc <HAL_InitTick>
 80015e0:	4603      	mov	r3, r0
 80015e2:	2b00      	cmp	r3, #0
 80015e4:	d002      	beq.n	80015ec <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80015e6:	2301      	movs	r3, #1
 80015e8:	71fb      	strb	r3, [r7, #7]
 80015ea:	e001      	b.n	80015f0 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80015ec:	f7ff fbd2 	bl	8000d94 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80015f0:	79fb      	ldrb	r3, [r7, #7]
}
 80015f2:	4618      	mov	r0, r3
 80015f4:	3708      	adds	r7, #8
 80015f6:	46bd      	mov	sp, r7
 80015f8:	bd80      	pop	{r7, pc}
	...

080015fc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80015fc:	b580      	push	{r7, lr}
 80015fe:	b084      	sub	sp, #16
 8001600:	af00      	add	r7, sp, #0
 8001602:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001604:	2300      	movs	r3, #0
 8001606:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001608:	4b17      	ldr	r3, [pc, #92]	@ (8001668 <HAL_InitTick+0x6c>)
 800160a:	781b      	ldrb	r3, [r3, #0]
 800160c:	2b00      	cmp	r3, #0
 800160e:	d023      	beq.n	8001658 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001610:	4b16      	ldr	r3, [pc, #88]	@ (800166c <HAL_InitTick+0x70>)
 8001612:	681a      	ldr	r2, [r3, #0]
 8001614:	4b14      	ldr	r3, [pc, #80]	@ (8001668 <HAL_InitTick+0x6c>)
 8001616:	781b      	ldrb	r3, [r3, #0]
 8001618:	4619      	mov	r1, r3
 800161a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800161e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001622:	fbb2 f3f3 	udiv	r3, r2, r3
 8001626:	4618      	mov	r0, r3
 8001628:	f000 f941 	bl	80018ae <HAL_SYSTICK_Config>
 800162c:	4603      	mov	r3, r0
 800162e:	2b00      	cmp	r3, #0
 8001630:	d10f      	bne.n	8001652 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	2b0f      	cmp	r3, #15
 8001636:	d809      	bhi.n	800164c <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001638:	2200      	movs	r2, #0
 800163a:	6879      	ldr	r1, [r7, #4]
 800163c:	f04f 30ff 	mov.w	r0, #4294967295
 8001640:	f000 f919 	bl	8001876 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001644:	4a0a      	ldr	r2, [pc, #40]	@ (8001670 <HAL_InitTick+0x74>)
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	6013      	str	r3, [r2, #0]
 800164a:	e007      	b.n	800165c <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 800164c:	2301      	movs	r3, #1
 800164e:	73fb      	strb	r3, [r7, #15]
 8001650:	e004      	b.n	800165c <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001652:	2301      	movs	r3, #1
 8001654:	73fb      	strb	r3, [r7, #15]
 8001656:	e001      	b.n	800165c <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001658:	2301      	movs	r3, #1
 800165a:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800165c:	7bfb      	ldrb	r3, [r7, #15]
}
 800165e:	4618      	mov	r0, r3
 8001660:	3710      	adds	r7, #16
 8001662:	46bd      	mov	sp, r7
 8001664:	bd80      	pop	{r7, pc}
 8001666:	bf00      	nop
 8001668:	20000008 	.word	0x20000008
 800166c:	20000000 	.word	0x20000000
 8001670:	20000004 	.word	0x20000004

08001674 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001674:	b480      	push	{r7}
 8001676:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001678:	4b06      	ldr	r3, [pc, #24]	@ (8001694 <HAL_IncTick+0x20>)
 800167a:	781b      	ldrb	r3, [r3, #0]
 800167c:	461a      	mov	r2, r3
 800167e:	4b06      	ldr	r3, [pc, #24]	@ (8001698 <HAL_IncTick+0x24>)
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	4413      	add	r3, r2
 8001684:	4a04      	ldr	r2, [pc, #16]	@ (8001698 <HAL_IncTick+0x24>)
 8001686:	6013      	str	r3, [r2, #0]
}
 8001688:	bf00      	nop
 800168a:	46bd      	mov	sp, r7
 800168c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001690:	4770      	bx	lr
 8001692:	bf00      	nop
 8001694:	20000008 	.word	0x20000008
 8001698:	2000042c 	.word	0x2000042c

0800169c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800169c:	b480      	push	{r7}
 800169e:	af00      	add	r7, sp, #0
  return uwTick;
 80016a0:	4b03      	ldr	r3, [pc, #12]	@ (80016b0 <HAL_GetTick+0x14>)
 80016a2:	681b      	ldr	r3, [r3, #0]
}
 80016a4:	4618      	mov	r0, r3
 80016a6:	46bd      	mov	sp, r7
 80016a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ac:	4770      	bx	lr
 80016ae:	bf00      	nop
 80016b0:	2000042c 	.word	0x2000042c

080016b4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80016b4:	b580      	push	{r7, lr}
 80016b6:	b084      	sub	sp, #16
 80016b8:	af00      	add	r7, sp, #0
 80016ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80016bc:	f7ff ffee 	bl	800169c <HAL_GetTick>
 80016c0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80016c6:	68fb      	ldr	r3, [r7, #12]
 80016c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80016cc:	d005      	beq.n	80016da <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 80016ce:	4b0a      	ldr	r3, [pc, #40]	@ (80016f8 <HAL_Delay+0x44>)
 80016d0:	781b      	ldrb	r3, [r3, #0]
 80016d2:	461a      	mov	r2, r3
 80016d4:	68fb      	ldr	r3, [r7, #12]
 80016d6:	4413      	add	r3, r2
 80016d8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80016da:	bf00      	nop
 80016dc:	f7ff ffde 	bl	800169c <HAL_GetTick>
 80016e0:	4602      	mov	r2, r0
 80016e2:	68bb      	ldr	r3, [r7, #8]
 80016e4:	1ad3      	subs	r3, r2, r3
 80016e6:	68fa      	ldr	r2, [r7, #12]
 80016e8:	429a      	cmp	r2, r3
 80016ea:	d8f7      	bhi.n	80016dc <HAL_Delay+0x28>
  {
  }
}
 80016ec:	bf00      	nop
 80016ee:	bf00      	nop
 80016f0:	3710      	adds	r7, #16
 80016f2:	46bd      	mov	sp, r7
 80016f4:	bd80      	pop	{r7, pc}
 80016f6:	bf00      	nop
 80016f8:	20000008 	.word	0x20000008

080016fc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80016fc:	b480      	push	{r7}
 80016fe:	b085      	sub	sp, #20
 8001700:	af00      	add	r7, sp, #0
 8001702:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	f003 0307 	and.w	r3, r3, #7
 800170a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800170c:	4b0c      	ldr	r3, [pc, #48]	@ (8001740 <__NVIC_SetPriorityGrouping+0x44>)
 800170e:	68db      	ldr	r3, [r3, #12]
 8001710:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001712:	68ba      	ldr	r2, [r7, #8]
 8001714:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001718:	4013      	ands	r3, r2
 800171a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800171c:	68fb      	ldr	r3, [r7, #12]
 800171e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001720:	68bb      	ldr	r3, [r7, #8]
 8001722:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001724:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001728:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800172c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800172e:	4a04      	ldr	r2, [pc, #16]	@ (8001740 <__NVIC_SetPriorityGrouping+0x44>)
 8001730:	68bb      	ldr	r3, [r7, #8]
 8001732:	60d3      	str	r3, [r2, #12]
}
 8001734:	bf00      	nop
 8001736:	3714      	adds	r7, #20
 8001738:	46bd      	mov	sp, r7
 800173a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800173e:	4770      	bx	lr
 8001740:	e000ed00 	.word	0xe000ed00

08001744 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001744:	b480      	push	{r7}
 8001746:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001748:	4b04      	ldr	r3, [pc, #16]	@ (800175c <__NVIC_GetPriorityGrouping+0x18>)
 800174a:	68db      	ldr	r3, [r3, #12]
 800174c:	0a1b      	lsrs	r3, r3, #8
 800174e:	f003 0307 	and.w	r3, r3, #7
}
 8001752:	4618      	mov	r0, r3
 8001754:	46bd      	mov	sp, r7
 8001756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800175a:	4770      	bx	lr
 800175c:	e000ed00 	.word	0xe000ed00

08001760 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001760:	b480      	push	{r7}
 8001762:	b083      	sub	sp, #12
 8001764:	af00      	add	r7, sp, #0
 8001766:	4603      	mov	r3, r0
 8001768:	6039      	str	r1, [r7, #0]
 800176a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800176c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001770:	2b00      	cmp	r3, #0
 8001772:	db0a      	blt.n	800178a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001774:	683b      	ldr	r3, [r7, #0]
 8001776:	b2da      	uxtb	r2, r3
 8001778:	490c      	ldr	r1, [pc, #48]	@ (80017ac <__NVIC_SetPriority+0x4c>)
 800177a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800177e:	0112      	lsls	r2, r2, #4
 8001780:	b2d2      	uxtb	r2, r2
 8001782:	440b      	add	r3, r1
 8001784:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001788:	e00a      	b.n	80017a0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800178a:	683b      	ldr	r3, [r7, #0]
 800178c:	b2da      	uxtb	r2, r3
 800178e:	4908      	ldr	r1, [pc, #32]	@ (80017b0 <__NVIC_SetPriority+0x50>)
 8001790:	79fb      	ldrb	r3, [r7, #7]
 8001792:	f003 030f 	and.w	r3, r3, #15
 8001796:	3b04      	subs	r3, #4
 8001798:	0112      	lsls	r2, r2, #4
 800179a:	b2d2      	uxtb	r2, r2
 800179c:	440b      	add	r3, r1
 800179e:	761a      	strb	r2, [r3, #24]
}
 80017a0:	bf00      	nop
 80017a2:	370c      	adds	r7, #12
 80017a4:	46bd      	mov	sp, r7
 80017a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017aa:	4770      	bx	lr
 80017ac:	e000e100 	.word	0xe000e100
 80017b0:	e000ed00 	.word	0xe000ed00

080017b4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80017b4:	b480      	push	{r7}
 80017b6:	b089      	sub	sp, #36	@ 0x24
 80017b8:	af00      	add	r7, sp, #0
 80017ba:	60f8      	str	r0, [r7, #12]
 80017bc:	60b9      	str	r1, [r7, #8]
 80017be:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80017c0:	68fb      	ldr	r3, [r7, #12]
 80017c2:	f003 0307 	and.w	r3, r3, #7
 80017c6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80017c8:	69fb      	ldr	r3, [r7, #28]
 80017ca:	f1c3 0307 	rsb	r3, r3, #7
 80017ce:	2b04      	cmp	r3, #4
 80017d0:	bf28      	it	cs
 80017d2:	2304      	movcs	r3, #4
 80017d4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80017d6:	69fb      	ldr	r3, [r7, #28]
 80017d8:	3304      	adds	r3, #4
 80017da:	2b06      	cmp	r3, #6
 80017dc:	d902      	bls.n	80017e4 <NVIC_EncodePriority+0x30>
 80017de:	69fb      	ldr	r3, [r7, #28]
 80017e0:	3b03      	subs	r3, #3
 80017e2:	e000      	b.n	80017e6 <NVIC_EncodePriority+0x32>
 80017e4:	2300      	movs	r3, #0
 80017e6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80017e8:	f04f 32ff 	mov.w	r2, #4294967295
 80017ec:	69bb      	ldr	r3, [r7, #24]
 80017ee:	fa02 f303 	lsl.w	r3, r2, r3
 80017f2:	43da      	mvns	r2, r3
 80017f4:	68bb      	ldr	r3, [r7, #8]
 80017f6:	401a      	ands	r2, r3
 80017f8:	697b      	ldr	r3, [r7, #20]
 80017fa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80017fc:	f04f 31ff 	mov.w	r1, #4294967295
 8001800:	697b      	ldr	r3, [r7, #20]
 8001802:	fa01 f303 	lsl.w	r3, r1, r3
 8001806:	43d9      	mvns	r1, r3
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800180c:	4313      	orrs	r3, r2
         );
}
 800180e:	4618      	mov	r0, r3
 8001810:	3724      	adds	r7, #36	@ 0x24
 8001812:	46bd      	mov	sp, r7
 8001814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001818:	4770      	bx	lr
	...

0800181c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800181c:	b580      	push	{r7, lr}
 800181e:	b082      	sub	sp, #8
 8001820:	af00      	add	r7, sp, #0
 8001822:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	3b01      	subs	r3, #1
 8001828:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800182c:	d301      	bcc.n	8001832 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800182e:	2301      	movs	r3, #1
 8001830:	e00f      	b.n	8001852 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001832:	4a0a      	ldr	r2, [pc, #40]	@ (800185c <SysTick_Config+0x40>)
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	3b01      	subs	r3, #1
 8001838:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800183a:	210f      	movs	r1, #15
 800183c:	f04f 30ff 	mov.w	r0, #4294967295
 8001840:	f7ff ff8e 	bl	8001760 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001844:	4b05      	ldr	r3, [pc, #20]	@ (800185c <SysTick_Config+0x40>)
 8001846:	2200      	movs	r2, #0
 8001848:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800184a:	4b04      	ldr	r3, [pc, #16]	@ (800185c <SysTick_Config+0x40>)
 800184c:	2207      	movs	r2, #7
 800184e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001850:	2300      	movs	r3, #0
}
 8001852:	4618      	mov	r0, r3
 8001854:	3708      	adds	r7, #8
 8001856:	46bd      	mov	sp, r7
 8001858:	bd80      	pop	{r7, pc}
 800185a:	bf00      	nop
 800185c:	e000e010 	.word	0xe000e010

08001860 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001860:	b580      	push	{r7, lr}
 8001862:	b082      	sub	sp, #8
 8001864:	af00      	add	r7, sp, #0
 8001866:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001868:	6878      	ldr	r0, [r7, #4]
 800186a:	f7ff ff47 	bl	80016fc <__NVIC_SetPriorityGrouping>
}
 800186e:	bf00      	nop
 8001870:	3708      	adds	r7, #8
 8001872:	46bd      	mov	sp, r7
 8001874:	bd80      	pop	{r7, pc}

08001876 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001876:	b580      	push	{r7, lr}
 8001878:	b086      	sub	sp, #24
 800187a:	af00      	add	r7, sp, #0
 800187c:	4603      	mov	r3, r0
 800187e:	60b9      	str	r1, [r7, #8]
 8001880:	607a      	str	r2, [r7, #4]
 8001882:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001884:	2300      	movs	r3, #0
 8001886:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001888:	f7ff ff5c 	bl	8001744 <__NVIC_GetPriorityGrouping>
 800188c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800188e:	687a      	ldr	r2, [r7, #4]
 8001890:	68b9      	ldr	r1, [r7, #8]
 8001892:	6978      	ldr	r0, [r7, #20]
 8001894:	f7ff ff8e 	bl	80017b4 <NVIC_EncodePriority>
 8001898:	4602      	mov	r2, r0
 800189a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800189e:	4611      	mov	r1, r2
 80018a0:	4618      	mov	r0, r3
 80018a2:	f7ff ff5d 	bl	8001760 <__NVIC_SetPriority>
}
 80018a6:	bf00      	nop
 80018a8:	3718      	adds	r7, #24
 80018aa:	46bd      	mov	sp, r7
 80018ac:	bd80      	pop	{r7, pc}

080018ae <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80018ae:	b580      	push	{r7, lr}
 80018b0:	b082      	sub	sp, #8
 80018b2:	af00      	add	r7, sp, #0
 80018b4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80018b6:	6878      	ldr	r0, [r7, #4]
 80018b8:	f7ff ffb0 	bl	800181c <SysTick_Config>
 80018bc:	4603      	mov	r3, r0
}
 80018be:	4618      	mov	r0, r3
 80018c0:	3708      	adds	r7, #8
 80018c2:	46bd      	mov	sp, r7
 80018c4:	bd80      	pop	{r7, pc}
	...

080018c8 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 80018c8:	b580      	push	{r7, lr}
 80018ca:	b082      	sub	sp, #8
 80018cc:	af00      	add	r7, sp, #0
 80018ce:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	d101      	bne.n	80018da <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 80018d6:	2301      	movs	r3, #1
 80018d8:	e054      	b.n	8001984 <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	7f5b      	ldrb	r3, [r3, #29]
 80018de:	b2db      	uxtb	r3, r3
 80018e0:	2b00      	cmp	r3, #0
 80018e2:	d105      	bne.n	80018f0 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	2200      	movs	r2, #0
 80018e8:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 80018ea:	6878      	ldr	r0, [r7, #4]
 80018ec:	f7ff fa76 	bl	8000ddc <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	2202      	movs	r2, #2
 80018f4:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	791b      	ldrb	r3, [r3, #4]
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	d10c      	bne.n	8001918 <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	4a22      	ldr	r2, [pc, #136]	@ (800198c <HAL_CRC_Init+0xc4>)
 8001904:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	689a      	ldr	r2, [r3, #8]
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	f022 0218 	bic.w	r2, r2, #24
 8001914:	609a      	str	r2, [r3, #8]
 8001916:	e00c      	b.n	8001932 <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	6899      	ldr	r1, [r3, #8]
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	68db      	ldr	r3, [r3, #12]
 8001920:	461a      	mov	r2, r3
 8001922:	6878      	ldr	r0, [r7, #4]
 8001924:	f000 f834 	bl	8001990 <HAL_CRCEx_Polynomial_Set>
 8001928:	4603      	mov	r3, r0
 800192a:	2b00      	cmp	r3, #0
 800192c:	d001      	beq.n	8001932 <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 800192e:	2301      	movs	r3, #1
 8001930:	e028      	b.n	8001984 <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	795b      	ldrb	r3, [r3, #5]
 8001936:	2b00      	cmp	r3, #0
 8001938:	d105      	bne.n	8001946 <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	f04f 32ff 	mov.w	r2, #4294967295
 8001942:	611a      	str	r2, [r3, #16]
 8001944:	e004      	b.n	8001950 <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	687a      	ldr	r2, [r7, #4]
 800194c:	6912      	ldr	r2, [r2, #16]
 800194e:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	689b      	ldr	r3, [r3, #8]
 8001956:	f023 0160 	bic.w	r1, r3, #96	@ 0x60
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	695a      	ldr	r2, [r3, #20]
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	430a      	orrs	r2, r1
 8001964:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	689b      	ldr	r3, [r3, #8]
 800196c:	f023 0180 	bic.w	r1, r3, #128	@ 0x80
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	699a      	ldr	r2, [r3, #24]
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	430a      	orrs	r2, r1
 800197a:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	2201      	movs	r2, #1
 8001980:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 8001982:	2300      	movs	r3, #0
}
 8001984:	4618      	mov	r0, r3
 8001986:	3708      	adds	r7, #8
 8001988:	46bd      	mov	sp, r7
 800198a:	bd80      	pop	{r7, pc}
 800198c:	04c11db7 	.word	0x04c11db7

08001990 <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 8001990:	b480      	push	{r7}
 8001992:	b087      	sub	sp, #28
 8001994:	af00      	add	r7, sp, #0
 8001996:	60f8      	str	r0, [r7, #12]
 8001998:	60b9      	str	r1, [r7, #8]
 800199a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800199c:	2300      	movs	r3, #0
 800199e:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 80019a0:	231f      	movs	r3, #31
 80019a2:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_CRC_POL_LENGTH(PolyLength));

  /* Ensure that the generating polynomial is odd */
  if ((Pol & (uint32_t)(0x1U)) ==  0U)
 80019a4:	68bb      	ldr	r3, [r7, #8]
 80019a6:	f003 0301 	and.w	r3, r3, #1
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	d102      	bne.n	80019b4 <HAL_CRCEx_Polynomial_Set+0x24>
  {
    status =  HAL_ERROR;
 80019ae:	2301      	movs	r3, #1
 80019b0:	75fb      	strb	r3, [r7, #23]
 80019b2:	e063      	b.n	8001a7c <HAL_CRCEx_Polynomial_Set+0xec>
     * definition. HAL_ERROR is reported if Pol degree is
     * larger than that indicated by PolyLength.
     * Look for MSB position: msb will contain the degree of
     *  the second to the largest polynomial member. E.g., for
     *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
    while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 80019b4:	bf00      	nop
 80019b6:	693b      	ldr	r3, [r7, #16]
 80019b8:	1e5a      	subs	r2, r3, #1
 80019ba:	613a      	str	r2, [r7, #16]
 80019bc:	2b00      	cmp	r3, #0
 80019be:	d009      	beq.n	80019d4 <HAL_CRCEx_Polynomial_Set+0x44>
 80019c0:	693b      	ldr	r3, [r7, #16]
 80019c2:	f003 031f 	and.w	r3, r3, #31
 80019c6:	68ba      	ldr	r2, [r7, #8]
 80019c8:	fa22 f303 	lsr.w	r3, r2, r3
 80019cc:	f003 0301 	and.w	r3, r3, #1
 80019d0:	2b00      	cmp	r3, #0
 80019d2:	d0f0      	beq.n	80019b6 <HAL_CRCEx_Polynomial_Set+0x26>
    {
    }

    switch (PolyLength)
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	2b18      	cmp	r3, #24
 80019d8:	d846      	bhi.n	8001a68 <HAL_CRCEx_Polynomial_Set+0xd8>
 80019da:	a201      	add	r2, pc, #4	@ (adr r2, 80019e0 <HAL_CRCEx_Polynomial_Set+0x50>)
 80019dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80019e0:	08001a6f 	.word	0x08001a6f
 80019e4:	08001a69 	.word	0x08001a69
 80019e8:	08001a69 	.word	0x08001a69
 80019ec:	08001a69 	.word	0x08001a69
 80019f0:	08001a69 	.word	0x08001a69
 80019f4:	08001a69 	.word	0x08001a69
 80019f8:	08001a69 	.word	0x08001a69
 80019fc:	08001a69 	.word	0x08001a69
 8001a00:	08001a5d 	.word	0x08001a5d
 8001a04:	08001a69 	.word	0x08001a69
 8001a08:	08001a69 	.word	0x08001a69
 8001a0c:	08001a69 	.word	0x08001a69
 8001a10:	08001a69 	.word	0x08001a69
 8001a14:	08001a69 	.word	0x08001a69
 8001a18:	08001a69 	.word	0x08001a69
 8001a1c:	08001a69 	.word	0x08001a69
 8001a20:	08001a51 	.word	0x08001a51
 8001a24:	08001a69 	.word	0x08001a69
 8001a28:	08001a69 	.word	0x08001a69
 8001a2c:	08001a69 	.word	0x08001a69
 8001a30:	08001a69 	.word	0x08001a69
 8001a34:	08001a69 	.word	0x08001a69
 8001a38:	08001a69 	.word	0x08001a69
 8001a3c:	08001a69 	.word	0x08001a69
 8001a40:	08001a45 	.word	0x08001a45
    {

      case CRC_POLYLENGTH_7B:
        if (msb >= HAL_CRC_LENGTH_7B)
 8001a44:	693b      	ldr	r3, [r7, #16]
 8001a46:	2b06      	cmp	r3, #6
 8001a48:	d913      	bls.n	8001a72 <HAL_CRCEx_Polynomial_Set+0xe2>
        {
          status =   HAL_ERROR;
 8001a4a:	2301      	movs	r3, #1
 8001a4c:	75fb      	strb	r3, [r7, #23]
        }
        break;
 8001a4e:	e010      	b.n	8001a72 <HAL_CRCEx_Polynomial_Set+0xe2>
      case CRC_POLYLENGTH_8B:
        if (msb >= HAL_CRC_LENGTH_8B)
 8001a50:	693b      	ldr	r3, [r7, #16]
 8001a52:	2b07      	cmp	r3, #7
 8001a54:	d90f      	bls.n	8001a76 <HAL_CRCEx_Polynomial_Set+0xe6>
        {
          status =   HAL_ERROR;
 8001a56:	2301      	movs	r3, #1
 8001a58:	75fb      	strb	r3, [r7, #23]
        }
        break;
 8001a5a:	e00c      	b.n	8001a76 <HAL_CRCEx_Polynomial_Set+0xe6>
      case CRC_POLYLENGTH_16B:
        if (msb >= HAL_CRC_LENGTH_16B)
 8001a5c:	693b      	ldr	r3, [r7, #16]
 8001a5e:	2b0f      	cmp	r3, #15
 8001a60:	d90b      	bls.n	8001a7a <HAL_CRCEx_Polynomial_Set+0xea>
        {
          status =   HAL_ERROR;
 8001a62:	2301      	movs	r3, #1
 8001a64:	75fb      	strb	r3, [r7, #23]
        }
        break;
 8001a66:	e008      	b.n	8001a7a <HAL_CRCEx_Polynomial_Set+0xea>

      case CRC_POLYLENGTH_32B:
        /* no polynomial definition vs. polynomial length issue possible */
        break;
      default:
        status =  HAL_ERROR;
 8001a68:	2301      	movs	r3, #1
 8001a6a:	75fb      	strb	r3, [r7, #23]
        break;
 8001a6c:	e006      	b.n	8001a7c <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 8001a6e:	bf00      	nop
 8001a70:	e004      	b.n	8001a7c <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 8001a72:	bf00      	nop
 8001a74:	e002      	b.n	8001a7c <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 8001a76:	bf00      	nop
 8001a78:	e000      	b.n	8001a7c <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 8001a7a:	bf00      	nop
    }
  }
  if (status == HAL_OK)
 8001a7c:	7dfb      	ldrb	r3, [r7, #23]
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	d10d      	bne.n	8001a9e <HAL_CRCEx_Polynomial_Set+0x10e>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 8001a82:	68fb      	ldr	r3, [r7, #12]
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	68ba      	ldr	r2, [r7, #8]
 8001a88:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 8001a8a:	68fb      	ldr	r3, [r7, #12]
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	689b      	ldr	r3, [r3, #8]
 8001a90:	f023 0118 	bic.w	r1, r3, #24
 8001a94:	68fb      	ldr	r3, [r7, #12]
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	687a      	ldr	r2, [r7, #4]
 8001a9a:	430a      	orrs	r2, r1
 8001a9c:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 8001a9e:	7dfb      	ldrb	r3, [r7, #23]
}
 8001aa0:	4618      	mov	r0, r3
 8001aa2:	371c      	adds	r7, #28
 8001aa4:	46bd      	mov	sp, r7
 8001aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aaa:	4770      	bx	lr

08001aac <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001aac:	b480      	push	{r7}
 8001aae:	b087      	sub	sp, #28
 8001ab0:	af00      	add	r7, sp, #0
 8001ab2:	6078      	str	r0, [r7, #4]
 8001ab4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001ab6:	2300      	movs	r3, #0
 8001ab8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001aba:	e148      	b.n	8001d4e <HAL_GPIO_Init+0x2a2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001abc:	683b      	ldr	r3, [r7, #0]
 8001abe:	681a      	ldr	r2, [r3, #0]
 8001ac0:	2101      	movs	r1, #1
 8001ac2:	697b      	ldr	r3, [r7, #20]
 8001ac4:	fa01 f303 	lsl.w	r3, r1, r3
 8001ac8:	4013      	ands	r3, r2
 8001aca:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001acc:	68fb      	ldr	r3, [r7, #12]
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	f000 813a 	beq.w	8001d48 <HAL_GPIO_Init+0x29c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001ad4:	683b      	ldr	r3, [r7, #0]
 8001ad6:	685b      	ldr	r3, [r3, #4]
 8001ad8:	f003 0303 	and.w	r3, r3, #3
 8001adc:	2b01      	cmp	r3, #1
 8001ade:	d005      	beq.n	8001aec <HAL_GPIO_Init+0x40>
 8001ae0:	683b      	ldr	r3, [r7, #0]
 8001ae2:	685b      	ldr	r3, [r3, #4]
 8001ae4:	f003 0303 	and.w	r3, r3, #3
 8001ae8:	2b02      	cmp	r3, #2
 8001aea:	d130      	bne.n	8001b4e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	689b      	ldr	r3, [r3, #8]
 8001af0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001af2:	697b      	ldr	r3, [r7, #20]
 8001af4:	005b      	lsls	r3, r3, #1
 8001af6:	2203      	movs	r2, #3
 8001af8:	fa02 f303 	lsl.w	r3, r2, r3
 8001afc:	43db      	mvns	r3, r3
 8001afe:	693a      	ldr	r2, [r7, #16]
 8001b00:	4013      	ands	r3, r2
 8001b02:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001b04:	683b      	ldr	r3, [r7, #0]
 8001b06:	68da      	ldr	r2, [r3, #12]
 8001b08:	697b      	ldr	r3, [r7, #20]
 8001b0a:	005b      	lsls	r3, r3, #1
 8001b0c:	fa02 f303 	lsl.w	r3, r2, r3
 8001b10:	693a      	ldr	r2, [r7, #16]
 8001b12:	4313      	orrs	r3, r2
 8001b14:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	693a      	ldr	r2, [r7, #16]
 8001b1a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	685b      	ldr	r3, [r3, #4]
 8001b20:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001b22:	2201      	movs	r2, #1
 8001b24:	697b      	ldr	r3, [r7, #20]
 8001b26:	fa02 f303 	lsl.w	r3, r2, r3
 8001b2a:	43db      	mvns	r3, r3
 8001b2c:	693a      	ldr	r2, [r7, #16]
 8001b2e:	4013      	ands	r3, r2
 8001b30:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001b32:	683b      	ldr	r3, [r7, #0]
 8001b34:	685b      	ldr	r3, [r3, #4]
 8001b36:	091b      	lsrs	r3, r3, #4
 8001b38:	f003 0201 	and.w	r2, r3, #1
 8001b3c:	697b      	ldr	r3, [r7, #20]
 8001b3e:	fa02 f303 	lsl.w	r3, r2, r3
 8001b42:	693a      	ldr	r2, [r7, #16]
 8001b44:	4313      	orrs	r3, r2
 8001b46:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	693a      	ldr	r2, [r7, #16]
 8001b4c:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001b4e:	683b      	ldr	r3, [r7, #0]
 8001b50:	685b      	ldr	r3, [r3, #4]
 8001b52:	f003 0303 	and.w	r3, r3, #3
 8001b56:	2b03      	cmp	r3, #3
 8001b58:	d017      	beq.n	8001b8a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	68db      	ldr	r3, [r3, #12]
 8001b5e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001b60:	697b      	ldr	r3, [r7, #20]
 8001b62:	005b      	lsls	r3, r3, #1
 8001b64:	2203      	movs	r2, #3
 8001b66:	fa02 f303 	lsl.w	r3, r2, r3
 8001b6a:	43db      	mvns	r3, r3
 8001b6c:	693a      	ldr	r2, [r7, #16]
 8001b6e:	4013      	ands	r3, r2
 8001b70:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001b72:	683b      	ldr	r3, [r7, #0]
 8001b74:	689a      	ldr	r2, [r3, #8]
 8001b76:	697b      	ldr	r3, [r7, #20]
 8001b78:	005b      	lsls	r3, r3, #1
 8001b7a:	fa02 f303 	lsl.w	r3, r2, r3
 8001b7e:	693a      	ldr	r2, [r7, #16]
 8001b80:	4313      	orrs	r3, r2
 8001b82:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	693a      	ldr	r2, [r7, #16]
 8001b88:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001b8a:	683b      	ldr	r3, [r7, #0]
 8001b8c:	685b      	ldr	r3, [r3, #4]
 8001b8e:	f003 0303 	and.w	r3, r3, #3
 8001b92:	2b02      	cmp	r3, #2
 8001b94:	d123      	bne.n	8001bde <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001b96:	697b      	ldr	r3, [r7, #20]
 8001b98:	08da      	lsrs	r2, r3, #3
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	3208      	adds	r2, #8
 8001b9e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001ba2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001ba4:	697b      	ldr	r3, [r7, #20]
 8001ba6:	f003 0307 	and.w	r3, r3, #7
 8001baa:	009b      	lsls	r3, r3, #2
 8001bac:	220f      	movs	r2, #15
 8001bae:	fa02 f303 	lsl.w	r3, r2, r3
 8001bb2:	43db      	mvns	r3, r3
 8001bb4:	693a      	ldr	r2, [r7, #16]
 8001bb6:	4013      	ands	r3, r2
 8001bb8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001bba:	683b      	ldr	r3, [r7, #0]
 8001bbc:	691a      	ldr	r2, [r3, #16]
 8001bbe:	697b      	ldr	r3, [r7, #20]
 8001bc0:	f003 0307 	and.w	r3, r3, #7
 8001bc4:	009b      	lsls	r3, r3, #2
 8001bc6:	fa02 f303 	lsl.w	r3, r2, r3
 8001bca:	693a      	ldr	r2, [r7, #16]
 8001bcc:	4313      	orrs	r3, r2
 8001bce:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001bd0:	697b      	ldr	r3, [r7, #20]
 8001bd2:	08da      	lsrs	r2, r3, #3
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	3208      	adds	r2, #8
 8001bd8:	6939      	ldr	r1, [r7, #16]
 8001bda:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001be4:	697b      	ldr	r3, [r7, #20]
 8001be6:	005b      	lsls	r3, r3, #1
 8001be8:	2203      	movs	r2, #3
 8001bea:	fa02 f303 	lsl.w	r3, r2, r3
 8001bee:	43db      	mvns	r3, r3
 8001bf0:	693a      	ldr	r2, [r7, #16]
 8001bf2:	4013      	ands	r3, r2
 8001bf4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001bf6:	683b      	ldr	r3, [r7, #0]
 8001bf8:	685b      	ldr	r3, [r3, #4]
 8001bfa:	f003 0203 	and.w	r2, r3, #3
 8001bfe:	697b      	ldr	r3, [r7, #20]
 8001c00:	005b      	lsls	r3, r3, #1
 8001c02:	fa02 f303 	lsl.w	r3, r2, r3
 8001c06:	693a      	ldr	r2, [r7, #16]
 8001c08:	4313      	orrs	r3, r2
 8001c0a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	693a      	ldr	r2, [r7, #16]
 8001c10:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001c12:	683b      	ldr	r3, [r7, #0]
 8001c14:	685b      	ldr	r3, [r3, #4]
 8001c16:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	f000 8094 	beq.w	8001d48 <HAL_GPIO_Init+0x29c>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c20:	4b52      	ldr	r3, [pc, #328]	@ (8001d6c <HAL_GPIO_Init+0x2c0>)
 8001c22:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001c24:	4a51      	ldr	r2, [pc, #324]	@ (8001d6c <HAL_GPIO_Init+0x2c0>)
 8001c26:	f043 0301 	orr.w	r3, r3, #1
 8001c2a:	6613      	str	r3, [r2, #96]	@ 0x60
 8001c2c:	4b4f      	ldr	r3, [pc, #316]	@ (8001d6c <HAL_GPIO_Init+0x2c0>)
 8001c2e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001c30:	f003 0301 	and.w	r3, r3, #1
 8001c34:	60bb      	str	r3, [r7, #8]
 8001c36:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001c38:	4a4d      	ldr	r2, [pc, #308]	@ (8001d70 <HAL_GPIO_Init+0x2c4>)
 8001c3a:	697b      	ldr	r3, [r7, #20]
 8001c3c:	089b      	lsrs	r3, r3, #2
 8001c3e:	3302      	adds	r3, #2
 8001c40:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c44:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001c46:	697b      	ldr	r3, [r7, #20]
 8001c48:	f003 0303 	and.w	r3, r3, #3
 8001c4c:	009b      	lsls	r3, r3, #2
 8001c4e:	220f      	movs	r2, #15
 8001c50:	fa02 f303 	lsl.w	r3, r2, r3
 8001c54:	43db      	mvns	r3, r3
 8001c56:	693a      	ldr	r2, [r7, #16]
 8001c58:	4013      	ands	r3, r2
 8001c5a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8001c62:	d00d      	beq.n	8001c80 <HAL_GPIO_Init+0x1d4>
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	4a43      	ldr	r2, [pc, #268]	@ (8001d74 <HAL_GPIO_Init+0x2c8>)
 8001c68:	4293      	cmp	r3, r2
 8001c6a:	d007      	beq.n	8001c7c <HAL_GPIO_Init+0x1d0>
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	4a42      	ldr	r2, [pc, #264]	@ (8001d78 <HAL_GPIO_Init+0x2cc>)
 8001c70:	4293      	cmp	r3, r2
 8001c72:	d101      	bne.n	8001c78 <HAL_GPIO_Init+0x1cc>
 8001c74:	2302      	movs	r3, #2
 8001c76:	e004      	b.n	8001c82 <HAL_GPIO_Init+0x1d6>
 8001c78:	2307      	movs	r3, #7
 8001c7a:	e002      	b.n	8001c82 <HAL_GPIO_Init+0x1d6>
 8001c7c:	2301      	movs	r3, #1
 8001c7e:	e000      	b.n	8001c82 <HAL_GPIO_Init+0x1d6>
 8001c80:	2300      	movs	r3, #0
 8001c82:	697a      	ldr	r2, [r7, #20]
 8001c84:	f002 0203 	and.w	r2, r2, #3
 8001c88:	0092      	lsls	r2, r2, #2
 8001c8a:	4093      	lsls	r3, r2
 8001c8c:	693a      	ldr	r2, [r7, #16]
 8001c8e:	4313      	orrs	r3, r2
 8001c90:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001c92:	4937      	ldr	r1, [pc, #220]	@ (8001d70 <HAL_GPIO_Init+0x2c4>)
 8001c94:	697b      	ldr	r3, [r7, #20]
 8001c96:	089b      	lsrs	r3, r3, #2
 8001c98:	3302      	adds	r3, #2
 8001c9a:	693a      	ldr	r2, [r7, #16]
 8001c9c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001ca0:	4b36      	ldr	r3, [pc, #216]	@ (8001d7c <HAL_GPIO_Init+0x2d0>)
 8001ca2:	689b      	ldr	r3, [r3, #8]
 8001ca4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001ca6:	68fb      	ldr	r3, [r7, #12]
 8001ca8:	43db      	mvns	r3, r3
 8001caa:	693a      	ldr	r2, [r7, #16]
 8001cac:	4013      	ands	r3, r2
 8001cae:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001cb0:	683b      	ldr	r3, [r7, #0]
 8001cb2:	685b      	ldr	r3, [r3, #4]
 8001cb4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001cb8:	2b00      	cmp	r3, #0
 8001cba:	d003      	beq.n	8001cc4 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 8001cbc:	693a      	ldr	r2, [r7, #16]
 8001cbe:	68fb      	ldr	r3, [r7, #12]
 8001cc0:	4313      	orrs	r3, r2
 8001cc2:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001cc4:	4a2d      	ldr	r2, [pc, #180]	@ (8001d7c <HAL_GPIO_Init+0x2d0>)
 8001cc6:	693b      	ldr	r3, [r7, #16]
 8001cc8:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001cca:	4b2c      	ldr	r3, [pc, #176]	@ (8001d7c <HAL_GPIO_Init+0x2d0>)
 8001ccc:	68db      	ldr	r3, [r3, #12]
 8001cce:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001cd0:	68fb      	ldr	r3, [r7, #12]
 8001cd2:	43db      	mvns	r3, r3
 8001cd4:	693a      	ldr	r2, [r7, #16]
 8001cd6:	4013      	ands	r3, r2
 8001cd8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001cda:	683b      	ldr	r3, [r7, #0]
 8001cdc:	685b      	ldr	r3, [r3, #4]
 8001cde:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	d003      	beq.n	8001cee <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 8001ce6:	693a      	ldr	r2, [r7, #16]
 8001ce8:	68fb      	ldr	r3, [r7, #12]
 8001cea:	4313      	orrs	r3, r2
 8001cec:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001cee:	4a23      	ldr	r2, [pc, #140]	@ (8001d7c <HAL_GPIO_Init+0x2d0>)
 8001cf0:	693b      	ldr	r3, [r7, #16]
 8001cf2:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001cf4:	4b21      	ldr	r3, [pc, #132]	@ (8001d7c <HAL_GPIO_Init+0x2d0>)
 8001cf6:	685b      	ldr	r3, [r3, #4]
 8001cf8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001cfa:	68fb      	ldr	r3, [r7, #12]
 8001cfc:	43db      	mvns	r3, r3
 8001cfe:	693a      	ldr	r2, [r7, #16]
 8001d00:	4013      	ands	r3, r2
 8001d02:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001d04:	683b      	ldr	r3, [r7, #0]
 8001d06:	685b      	ldr	r3, [r3, #4]
 8001d08:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001d0c:	2b00      	cmp	r3, #0
 8001d0e:	d003      	beq.n	8001d18 <HAL_GPIO_Init+0x26c>
        {
          temp |= iocurrent;
 8001d10:	693a      	ldr	r2, [r7, #16]
 8001d12:	68fb      	ldr	r3, [r7, #12]
 8001d14:	4313      	orrs	r3, r2
 8001d16:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001d18:	4a18      	ldr	r2, [pc, #96]	@ (8001d7c <HAL_GPIO_Init+0x2d0>)
 8001d1a:	693b      	ldr	r3, [r7, #16]
 8001d1c:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8001d1e:	4b17      	ldr	r3, [pc, #92]	@ (8001d7c <HAL_GPIO_Init+0x2d0>)
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001d24:	68fb      	ldr	r3, [r7, #12]
 8001d26:	43db      	mvns	r3, r3
 8001d28:	693a      	ldr	r2, [r7, #16]
 8001d2a:	4013      	ands	r3, r2
 8001d2c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001d2e:	683b      	ldr	r3, [r7, #0]
 8001d30:	685b      	ldr	r3, [r3, #4]
 8001d32:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	d003      	beq.n	8001d42 <HAL_GPIO_Init+0x296>
        {
          temp |= iocurrent;
 8001d3a:	693a      	ldr	r2, [r7, #16]
 8001d3c:	68fb      	ldr	r3, [r7, #12]
 8001d3e:	4313      	orrs	r3, r2
 8001d40:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001d42:	4a0e      	ldr	r2, [pc, #56]	@ (8001d7c <HAL_GPIO_Init+0x2d0>)
 8001d44:	693b      	ldr	r3, [r7, #16]
 8001d46:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001d48:	697b      	ldr	r3, [r7, #20]
 8001d4a:	3301      	adds	r3, #1
 8001d4c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001d4e:	683b      	ldr	r3, [r7, #0]
 8001d50:	681a      	ldr	r2, [r3, #0]
 8001d52:	697b      	ldr	r3, [r7, #20]
 8001d54:	fa22 f303 	lsr.w	r3, r2, r3
 8001d58:	2b00      	cmp	r3, #0
 8001d5a:	f47f aeaf 	bne.w	8001abc <HAL_GPIO_Init+0x10>
  }
}
 8001d5e:	bf00      	nop
 8001d60:	bf00      	nop
 8001d62:	371c      	adds	r7, #28
 8001d64:	46bd      	mov	sp, r7
 8001d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d6a:	4770      	bx	lr
 8001d6c:	40021000 	.word	0x40021000
 8001d70:	40010000 	.word	0x40010000
 8001d74:	48000400 	.word	0x48000400
 8001d78:	48000800 	.word	0x48000800
 8001d7c:	40010400 	.word	0x40010400

08001d80 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001d80:	b480      	push	{r7}
 8001d82:	b083      	sub	sp, #12
 8001d84:	af00      	add	r7, sp, #0
 8001d86:	6078      	str	r0, [r7, #4]
 8001d88:	460b      	mov	r3, r1
 8001d8a:	807b      	strh	r3, [r7, #2]
 8001d8c:	4613      	mov	r3, r2
 8001d8e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001d90:	787b      	ldrb	r3, [r7, #1]
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	d003      	beq.n	8001d9e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001d96:	887a      	ldrh	r2, [r7, #2]
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001d9c:	e002      	b.n	8001da4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001d9e:	887a      	ldrh	r2, [r7, #2]
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001da4:	bf00      	nop
 8001da6:	370c      	adds	r7, #12
 8001da8:	46bd      	mov	sp, r7
 8001daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dae:	4770      	bx	lr

08001db0 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001db0:	b480      	push	{r7}
 8001db2:	b085      	sub	sp, #20
 8001db4:	af00      	add	r7, sp, #0
 8001db6:	6078      	str	r0, [r7, #4]
 8001db8:	460b      	mov	r3, r1
 8001dba:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	695b      	ldr	r3, [r3, #20]
 8001dc0:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001dc2:	887a      	ldrh	r2, [r7, #2]
 8001dc4:	68fb      	ldr	r3, [r7, #12]
 8001dc6:	4013      	ands	r3, r2
 8001dc8:	041a      	lsls	r2, r3, #16
 8001dca:	68fb      	ldr	r3, [r7, #12]
 8001dcc:	43d9      	mvns	r1, r3
 8001dce:	887b      	ldrh	r3, [r7, #2]
 8001dd0:	400b      	ands	r3, r1
 8001dd2:	431a      	orrs	r2, r3
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	619a      	str	r2, [r3, #24]
}
 8001dd8:	bf00      	nop
 8001dda:	3714      	adds	r7, #20
 8001ddc:	46bd      	mov	sp, r7
 8001dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001de2:	4770      	bx	lr

08001de4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001de4:	b580      	push	{r7, lr}
 8001de6:	b082      	sub	sp, #8
 8001de8:	af00      	add	r7, sp, #0
 8001dea:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	d101      	bne.n	8001df6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001df2:	2301      	movs	r3, #1
 8001df4:	e08d      	b.n	8001f12 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001dfc:	b2db      	uxtb	r3, r3
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	d106      	bne.n	8001e10 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	2200      	movs	r2, #0
 8001e06:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001e0a:	6878      	ldr	r0, [r7, #4]
 8001e0c:	f7ff f85e 	bl	8000ecc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	2224      	movs	r2, #36	@ 0x24
 8001e14:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	681a      	ldr	r2, [r3, #0]
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	f022 0201 	bic.w	r2, r2, #1
 8001e26:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	685a      	ldr	r2, [r3, #4]
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8001e34:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	689a      	ldr	r2, [r3, #8]
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001e44:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	68db      	ldr	r3, [r3, #12]
 8001e4a:	2b01      	cmp	r3, #1
 8001e4c:	d107      	bne.n	8001e5e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	689a      	ldr	r2, [r3, #8]
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8001e5a:	609a      	str	r2, [r3, #8]
 8001e5c:	e006      	b.n	8001e6c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	689a      	ldr	r2, [r3, #8]
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8001e6a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	68db      	ldr	r3, [r3, #12]
 8001e70:	2b02      	cmp	r3, #2
 8001e72:	d108      	bne.n	8001e86 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	685a      	ldr	r2, [r3, #4]
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8001e82:	605a      	str	r2, [r3, #4]
 8001e84:	e007      	b.n	8001e96 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	685a      	ldr	r2, [r3, #4]
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001e94:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	685b      	ldr	r3, [r3, #4]
 8001e9c:	687a      	ldr	r2, [r7, #4]
 8001e9e:	6812      	ldr	r2, [r2, #0]
 8001ea0:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001ea4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001ea8:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	68da      	ldr	r2, [r3, #12]
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001eb8:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	691a      	ldr	r2, [r3, #16]
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	695b      	ldr	r3, [r3, #20]
 8001ec2:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	699b      	ldr	r3, [r3, #24]
 8001eca:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	430a      	orrs	r2, r1
 8001ed2:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	69d9      	ldr	r1, [r3, #28]
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	6a1a      	ldr	r2, [r3, #32]
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	430a      	orrs	r2, r1
 8001ee2:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	681a      	ldr	r2, [r3, #0]
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	f042 0201 	orr.w	r2, r2, #1
 8001ef2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	2200      	movs	r2, #0
 8001ef8:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	2220      	movs	r2, #32
 8001efe:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	2200      	movs	r2, #0
 8001f06:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	2200      	movs	r2, #0
 8001f0c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8001f10:	2300      	movs	r3, #0
}
 8001f12:	4618      	mov	r0, r3
 8001f14:	3708      	adds	r7, #8
 8001f16:	46bd      	mov	sp, r7
 8001f18:	bd80      	pop	{r7, pc}

08001f1a <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8001f1a:	b480      	push	{r7}
 8001f1c:	b083      	sub	sp, #12
 8001f1e:	af00      	add	r7, sp, #0
 8001f20:	6078      	str	r0, [r7, #4]
 8001f22:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001f2a:	b2db      	uxtb	r3, r3
 8001f2c:	2b20      	cmp	r3, #32
 8001f2e:	d138      	bne.n	8001fa2 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001f36:	2b01      	cmp	r3, #1
 8001f38:	d101      	bne.n	8001f3e <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8001f3a:	2302      	movs	r3, #2
 8001f3c:	e032      	b.n	8001fa4 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	2201      	movs	r2, #1
 8001f42:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	2224      	movs	r2, #36	@ 0x24
 8001f4a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	681a      	ldr	r2, [r3, #0]
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	f022 0201 	bic.w	r2, r2, #1
 8001f5c:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	681a      	ldr	r2, [r3, #0]
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8001f6c:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	6819      	ldr	r1, [r3, #0]
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	683a      	ldr	r2, [r7, #0]
 8001f7a:	430a      	orrs	r2, r1
 8001f7c:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	681a      	ldr	r2, [r3, #0]
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	f042 0201 	orr.w	r2, r2, #1
 8001f8c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	2220      	movs	r2, #32
 8001f92:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	2200      	movs	r2, #0
 8001f9a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8001f9e:	2300      	movs	r3, #0
 8001fa0:	e000      	b.n	8001fa4 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8001fa2:	2302      	movs	r3, #2
  }
}
 8001fa4:	4618      	mov	r0, r3
 8001fa6:	370c      	adds	r7, #12
 8001fa8:	46bd      	mov	sp, r7
 8001faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fae:	4770      	bx	lr

08001fb0 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8001fb0:	b480      	push	{r7}
 8001fb2:	b085      	sub	sp, #20
 8001fb4:	af00      	add	r7, sp, #0
 8001fb6:	6078      	str	r0, [r7, #4]
 8001fb8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001fc0:	b2db      	uxtb	r3, r3
 8001fc2:	2b20      	cmp	r3, #32
 8001fc4:	d139      	bne.n	800203a <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001fcc:	2b01      	cmp	r3, #1
 8001fce:	d101      	bne.n	8001fd4 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8001fd0:	2302      	movs	r3, #2
 8001fd2:	e033      	b.n	800203c <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	2201      	movs	r2, #1
 8001fd8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	2224      	movs	r2, #36	@ 0x24
 8001fe0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	681a      	ldr	r2, [r3, #0]
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	f022 0201 	bic.w	r2, r2, #1
 8001ff2:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8001ffc:	68fb      	ldr	r3, [r7, #12]
 8001ffe:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8002002:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002004:	683b      	ldr	r3, [r7, #0]
 8002006:	021b      	lsls	r3, r3, #8
 8002008:	68fa      	ldr	r2, [r7, #12]
 800200a:	4313      	orrs	r3, r2
 800200c:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	68fa      	ldr	r2, [r7, #12]
 8002014:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	681a      	ldr	r2, [r3, #0]
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	f042 0201 	orr.w	r2, r2, #1
 8002024:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	2220      	movs	r2, #32
 800202a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	2200      	movs	r2, #0
 8002032:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8002036:	2300      	movs	r3, #0
 8002038:	e000      	b.n	800203c <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800203a:	2302      	movs	r3, #2
  }
}
 800203c:	4618      	mov	r0, r3
 800203e:	3714      	adds	r7, #20
 8002040:	46bd      	mov	sp, r7
 8002042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002046:	4770      	bx	lr

08002048 <HAL_LPTIM_Init>:
  *         LPTIM_InitTypeDef and initialize the associated handle.
  * @param  hlptim LPTIM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LPTIM_Init(LPTIM_HandleTypeDef *hlptim)
{
 8002048:	b580      	push	{r7, lr}
 800204a:	b084      	sub	sp, #16
 800204c:	af00      	add	r7, sp, #0
 800204e:	6078      	str	r0, [r7, #4]
  uint32_t tmpcfgr;

  /* Check the LPTIM handle allocation */
  if (hlptim == NULL)
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	2b00      	cmp	r3, #0
 8002054:	d101      	bne.n	800205a <HAL_LPTIM_Init+0x12>
  {
    return HAL_ERROR;
 8002056:	2301      	movs	r3, #1
 8002058:	e08f      	b.n	800217a <HAL_LPTIM_Init+0x132>
  /* Check the parameters */
  assert_param(IS_LPTIM_INSTANCE(hlptim->Instance));

  assert_param(IS_LPTIM_CLOCK_SOURCE(hlptim->Init.Clock.Source));
  assert_param(IS_LPTIM_CLOCK_PRESCALER(hlptim->Init.Clock.Prescaler));
  if ((hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_ULPTIM)
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	685b      	ldr	r3, [r3, #4]
 800205e:	2b01      	cmp	r3, #1
  assert_param(IS_LPTIM_COUNTER_SOURCE(hlptim->Init.CounterSource));
#if defined(LPTIM_RCR_REP)
  assert_param(IS_LPTIM_REPETITION(hlptim->Init.RepetitionCounter));
#endif

  if (hlptim->State == HAL_LPTIM_STATE_RESET)
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	f893 3036 	ldrb.w	r3, [r3, #54]	@ 0x36
 8002066:	b2db      	uxtb	r3, r3
 8002068:	2b00      	cmp	r3, #0
 800206a:	d106      	bne.n	800207a <HAL_LPTIM_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hlptim->Lock = HAL_UNLOCKED;
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	2200      	movs	r2, #0
 8002070:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hlptim->MspInitCallback(hlptim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_LPTIM_MspInit(hlptim);
 8002074:	6878      	ldr	r0, [r7, #4]
 8002076:	f7fe ff9f 	bl	8000fb8 <HAL_LPTIM_MspInit>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
  }

  /* Change the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_BUSY;
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	2202      	movs	r2, #2
 800207e:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36
  }

#endif

  /* Get the LPTIMx CFGR value */
  tmpcfgr = hlptim->Instance->CFGR;
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	68db      	ldr	r3, [r3, #12]
 8002088:	60fb      	str	r3, [r7, #12]

  if ((hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_ULPTIM)
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	685b      	ldr	r3, [r3, #4]
 800208e:	2b01      	cmp	r3, #1
 8002090:	d004      	beq.n	800209c <HAL_LPTIM_Init+0x54>
      || (hlptim->Init.CounterSource == LPTIM_COUNTERSOURCE_EXTERNAL))
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002096:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800209a:	d103      	bne.n	80020a4 <HAL_LPTIM_Init+0x5c>
  {
    tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_CKPOL | LPTIM_CFGR_CKFLT));
 800209c:	68fb      	ldr	r3, [r7, #12]
 800209e:	f023 031e 	bic.w	r3, r3, #30
 80020a2:	60fb      	str	r3, [r7, #12]
  }
  if (hlptim->Init.Trigger.Source != LPTIM_TRIGSOURCE_SOFTWARE)
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	695b      	ldr	r3, [r3, #20]
 80020a8:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80020ac:	4293      	cmp	r3, r2
 80020ae:	d005      	beq.n	80020bc <HAL_LPTIM_Init+0x74>
  {
    tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_TRGFLT | LPTIM_CFGR_TRIGSEL));
 80020b0:	68fb      	ldr	r3, [r7, #12]
 80020b2:	f423 4360 	bic.w	r3, r3, #57344	@ 0xe000
 80020b6:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 80020ba:	60fb      	str	r3, [r7, #12]
  }

  /* Clear CKSEL, PRESC, TRIGEN, TRGFLT, WAVPOL, PRELOAD & COUNTMODE bits */
  tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_CKSEL | LPTIM_CFGR_TRIGEN | LPTIM_CFGR_PRELOAD |
 80020bc:	68fa      	ldr	r2, [r7, #12]
 80020be:	4b31      	ldr	r3, [pc, #196]	@ (8002184 <HAL_LPTIM_Init+0x13c>)
 80020c0:	4013      	ands	r3, r2
 80020c2:	60fb      	str	r3, [r7, #12]
                          LPTIM_CFGR_WAVPOL | LPTIM_CFGR_PRESC | LPTIM_CFGR_COUNTMODE));

  /* Set initialization parameters */
  tmpcfgr |= (hlptim->Init.Clock.Source    |
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	685a      	ldr	r2, [r3, #4]
              hlptim->Init.Clock.Prescaler |
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	689b      	ldr	r3, [r3, #8]
  tmpcfgr |= (hlptim->Init.Clock.Source    |
 80020cc:	431a      	orrs	r2, r3
              hlptim->Init.OutputPolarity  |
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	6a1b      	ldr	r3, [r3, #32]
              hlptim->Init.Clock.Prescaler |
 80020d2:	431a      	orrs	r2, r3
              hlptim->Init.UpdateMode      |
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
              hlptim->Init.OutputPolarity  |
 80020d8:	431a      	orrs	r2, r3
              hlptim->Init.CounterSource);
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
              hlptim->Init.UpdateMode      |
 80020de:	4313      	orrs	r3, r2
  tmpcfgr |= (hlptim->Init.Clock.Source    |
 80020e0:	68fa      	ldr	r2, [r7, #12]
 80020e2:	4313      	orrs	r3, r2
 80020e4:	60fb      	str	r3, [r7, #12]

  /* Glitch filters for internal triggers and  external inputs are configured
   * only if an internal clock source is provided to the LPTIM
   */
  if (hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_APBCLOCK_LPOSC)
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	685b      	ldr	r3, [r3, #4]
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d107      	bne.n	80020fe <HAL_LPTIM_Init+0xb6>
  {
    tmpcfgr |= (hlptim->Init.Trigger.SampleTime |
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	69da      	ldr	r2, [r3, #28]
                hlptim->Init.UltraLowPowerClock.SampleTime);
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	691b      	ldr	r3, [r3, #16]
    tmpcfgr |= (hlptim->Init.Trigger.SampleTime |
 80020f6:	4313      	orrs	r3, r2
 80020f8:	68fa      	ldr	r2, [r7, #12]
 80020fa:	4313      	orrs	r3, r2
 80020fc:	60fb      	str	r3, [r7, #12]
  }

  /* Configure LPTIM external clock polarity and digital filter */
  if ((hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_ULPTIM)
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	685b      	ldr	r3, [r3, #4]
 8002102:	2b01      	cmp	r3, #1
 8002104:	d004      	beq.n	8002110 <HAL_LPTIM_Init+0xc8>
      || (hlptim->Init.CounterSource == LPTIM_COUNTERSOURCE_EXTERNAL))
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800210a:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800210e:	d107      	bne.n	8002120 <HAL_LPTIM_Init+0xd8>
  {
    tmpcfgr |= (hlptim->Init.UltraLowPowerClock.Polarity |
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	68da      	ldr	r2, [r3, #12]
                hlptim->Init.UltraLowPowerClock.SampleTime);
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	691b      	ldr	r3, [r3, #16]
    tmpcfgr |= (hlptim->Init.UltraLowPowerClock.Polarity |
 8002118:	4313      	orrs	r3, r2
 800211a:	68fa      	ldr	r2, [r7, #12]
 800211c:	4313      	orrs	r3, r2
 800211e:	60fb      	str	r3, [r7, #12]
  }

  /* Configure LPTIM external trigger */
  if (hlptim->Init.Trigger.Source != LPTIM_TRIGSOURCE_SOFTWARE)
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	695b      	ldr	r3, [r3, #20]
 8002124:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002128:	4293      	cmp	r3, r2
 800212a:	d00a      	beq.n	8002142 <HAL_LPTIM_Init+0xfa>
  {
    /* Enable External trigger and set the trigger source */
    tmpcfgr |= (hlptim->Init.Trigger.Source     |
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	695a      	ldr	r2, [r3, #20]
                hlptim->Init.Trigger.ActiveEdge |
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	699b      	ldr	r3, [r3, #24]
    tmpcfgr |= (hlptim->Init.Trigger.Source     |
 8002134:	431a      	orrs	r2, r3
                hlptim->Init.Trigger.SampleTime);
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	69db      	ldr	r3, [r3, #28]
                hlptim->Init.Trigger.ActiveEdge |
 800213a:	4313      	orrs	r3, r2
    tmpcfgr |= (hlptim->Init.Trigger.Source     |
 800213c:	68fa      	ldr	r2, [r7, #12]
 800213e:	4313      	orrs	r3, r2
 8002140:	60fb      	str	r3, [r7, #12]
  }

  /* Write to LPTIMx CFGR */
  hlptim->Instance->CFGR = tmpcfgr;
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	68fa      	ldr	r2, [r7, #12]
 8002148:	60da      	str	r2, [r3, #12]

  /* Configure LPTIM input sources */
  if (hlptim->Instance == LPTIM1)
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	4a0e      	ldr	r2, [pc, #56]	@ (8002188 <HAL_LPTIM_Init+0x140>)
 8002150:	4293      	cmp	r3, r2
 8002152:	d108      	bne.n	8002166 <HAL_LPTIM_Init+0x11e>
    /* Check LPTIM Input1 and Input2 sources */
    assert_param(IS_LPTIM_INPUT1_SOURCE(hlptim->Instance, hlptim->Init.Input1Source));
    assert_param(IS_LPTIM_INPUT2_SOURCE(hlptim->Instance, hlptim->Init.Input2Source));

    /* Configure LPTIM Input1 and Input2 sources */
    hlptim->Instance->OR = (hlptim->Init.Input1Source | hlptim->Init.Input2Source);
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	430a      	orrs	r2, r1
 8002162:	621a      	str	r2, [r3, #32]
 8002164:	e004      	b.n	8002170 <HAL_LPTIM_Init+0x128>
  {
    /* Check LPTIM2 Input1 source */
    assert_param(IS_LPTIM_INPUT1_SOURCE(hlptim->Instance, hlptim->Init.Input1Source));

    /* Configure LPTIM2 Input1 source */
    hlptim->Instance->OR = hlptim->Init.Input1Source;
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	687a      	ldr	r2, [r7, #4]
 800216c:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800216e:	621a      	str	r2, [r3, #32]
  }

  /* Change the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_READY;
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	2201      	movs	r2, #1
 8002174:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36

  /* Return function status */
  return HAL_OK;
 8002178:	2300      	movs	r3, #0
}
 800217a:	4618      	mov	r0, r3
 800217c:	3710      	adds	r7, #16
 800217e:	46bd      	mov	sp, r7
 8002180:	bd80      	pop	{r7, pc}
 8002182:	bf00      	nop
 8002184:	ff19f1fe 	.word	0xff19f1fe
 8002188:	40007c00 	.word	0x40007c00

0800218c <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 800218c:	b480      	push	{r7}
 800218e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002190:	4b05      	ldr	r3, [pc, #20]	@ (80021a8 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	4a04      	ldr	r2, [pc, #16]	@ (80021a8 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002196:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800219a:	6013      	str	r3, [r2, #0]
}
 800219c:	bf00      	nop
 800219e:	46bd      	mov	sp, r7
 80021a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021a4:	4770      	bx	lr
 80021a6:	bf00      	nop
 80021a8:	40007000 	.word	0x40007000

080021ac <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80021ac:	b480      	push	{r7}
 80021ae:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80021b0:	4b04      	ldr	r3, [pc, #16]	@ (80021c4 <HAL_PWREx_GetVoltageRange+0x18>)
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 80021b8:	4618      	mov	r0, r3
 80021ba:	46bd      	mov	sp, r7
 80021bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021c0:	4770      	bx	lr
 80021c2:	bf00      	nop
 80021c4:	40007000 	.word	0x40007000

080021c8 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80021c8:	b480      	push	{r7}
 80021ca:	b085      	sub	sp, #20
 80021cc:	af00      	add	r7, sp, #0
 80021ce:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80021d6:	d130      	bne.n	800223a <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80021d8:	4b23      	ldr	r3, [pc, #140]	@ (8002268 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80021e0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80021e4:	d038      	beq.n	8002258 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80021e6:	4b20      	ldr	r3, [pc, #128]	@ (8002268 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80021ee:	4a1e      	ldr	r2, [pc, #120]	@ (8002268 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80021f0:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80021f4:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80021f6:	4b1d      	ldr	r3, [pc, #116]	@ (800226c <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	2232      	movs	r2, #50	@ 0x32
 80021fc:	fb02 f303 	mul.w	r3, r2, r3
 8002200:	4a1b      	ldr	r2, [pc, #108]	@ (8002270 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8002202:	fba2 2303 	umull	r2, r3, r2, r3
 8002206:	0c9b      	lsrs	r3, r3, #18
 8002208:	3301      	adds	r3, #1
 800220a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800220c:	e002      	b.n	8002214 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800220e:	68fb      	ldr	r3, [r7, #12]
 8002210:	3b01      	subs	r3, #1
 8002212:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002214:	4b14      	ldr	r3, [pc, #80]	@ (8002268 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002216:	695b      	ldr	r3, [r3, #20]
 8002218:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800221c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002220:	d102      	bne.n	8002228 <HAL_PWREx_ControlVoltageScaling+0x60>
 8002222:	68fb      	ldr	r3, [r7, #12]
 8002224:	2b00      	cmp	r3, #0
 8002226:	d1f2      	bne.n	800220e <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002228:	4b0f      	ldr	r3, [pc, #60]	@ (8002268 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800222a:	695b      	ldr	r3, [r3, #20]
 800222c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002230:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002234:	d110      	bne.n	8002258 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8002236:	2303      	movs	r3, #3
 8002238:	e00f      	b.n	800225a <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800223a:	4b0b      	ldr	r3, [pc, #44]	@ (8002268 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8002242:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002246:	d007      	beq.n	8002258 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002248:	4b07      	ldr	r3, [pc, #28]	@ (8002268 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002250:	4a05      	ldr	r2, [pc, #20]	@ (8002268 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002252:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002256:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8002258:	2300      	movs	r3, #0
}
 800225a:	4618      	mov	r0, r3
 800225c:	3714      	adds	r7, #20
 800225e:	46bd      	mov	sp, r7
 8002260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002264:	4770      	bx	lr
 8002266:	bf00      	nop
 8002268:	40007000 	.word	0x40007000
 800226c:	20000000 	.word	0x20000000
 8002270:	431bde83 	.word	0x431bde83

08002274 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002274:	b580      	push	{r7, lr}
 8002276:	b088      	sub	sp, #32
 8002278:	af00      	add	r7, sp, #0
 800227a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	2b00      	cmp	r3, #0
 8002280:	d102      	bne.n	8002288 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8002282:	2301      	movs	r3, #1
 8002284:	f000 bc02 	b.w	8002a8c <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002288:	4b96      	ldr	r3, [pc, #600]	@ (80024e4 <HAL_RCC_OscConfig+0x270>)
 800228a:	689b      	ldr	r3, [r3, #8]
 800228c:	f003 030c 	and.w	r3, r3, #12
 8002290:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002292:	4b94      	ldr	r3, [pc, #592]	@ (80024e4 <HAL_RCC_OscConfig+0x270>)
 8002294:	68db      	ldr	r3, [r3, #12]
 8002296:	f003 0303 	and.w	r3, r3, #3
 800229a:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	f003 0310 	and.w	r3, r3, #16
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	f000 80e4 	beq.w	8002472 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80022aa:	69bb      	ldr	r3, [r7, #24]
 80022ac:	2b00      	cmp	r3, #0
 80022ae:	d007      	beq.n	80022c0 <HAL_RCC_OscConfig+0x4c>
 80022b0:	69bb      	ldr	r3, [r7, #24]
 80022b2:	2b0c      	cmp	r3, #12
 80022b4:	f040 808b 	bne.w	80023ce <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80022b8:	697b      	ldr	r3, [r7, #20]
 80022ba:	2b01      	cmp	r3, #1
 80022bc:	f040 8087 	bne.w	80023ce <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80022c0:	4b88      	ldr	r3, [pc, #544]	@ (80024e4 <HAL_RCC_OscConfig+0x270>)
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	f003 0302 	and.w	r3, r3, #2
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	d005      	beq.n	80022d8 <HAL_RCC_OscConfig+0x64>
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	699b      	ldr	r3, [r3, #24]
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	d101      	bne.n	80022d8 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 80022d4:	2301      	movs	r3, #1
 80022d6:	e3d9      	b.n	8002a8c <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	6a1a      	ldr	r2, [r3, #32]
 80022dc:	4b81      	ldr	r3, [pc, #516]	@ (80024e4 <HAL_RCC_OscConfig+0x270>)
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	f003 0308 	and.w	r3, r3, #8
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	d004      	beq.n	80022f2 <HAL_RCC_OscConfig+0x7e>
 80022e8:	4b7e      	ldr	r3, [pc, #504]	@ (80024e4 <HAL_RCC_OscConfig+0x270>)
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80022f0:	e005      	b.n	80022fe <HAL_RCC_OscConfig+0x8a>
 80022f2:	4b7c      	ldr	r3, [pc, #496]	@ (80024e4 <HAL_RCC_OscConfig+0x270>)
 80022f4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80022f8:	091b      	lsrs	r3, r3, #4
 80022fa:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80022fe:	4293      	cmp	r3, r2
 8002300:	d223      	bcs.n	800234a <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	6a1b      	ldr	r3, [r3, #32]
 8002306:	4618      	mov	r0, r3
 8002308:	f000 fd8c 	bl	8002e24 <RCC_SetFlashLatencyFromMSIRange>
 800230c:	4603      	mov	r3, r0
 800230e:	2b00      	cmp	r3, #0
 8002310:	d001      	beq.n	8002316 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8002312:	2301      	movs	r3, #1
 8002314:	e3ba      	b.n	8002a8c <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002316:	4b73      	ldr	r3, [pc, #460]	@ (80024e4 <HAL_RCC_OscConfig+0x270>)
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	4a72      	ldr	r2, [pc, #456]	@ (80024e4 <HAL_RCC_OscConfig+0x270>)
 800231c:	f043 0308 	orr.w	r3, r3, #8
 8002320:	6013      	str	r3, [r2, #0]
 8002322:	4b70      	ldr	r3, [pc, #448]	@ (80024e4 <HAL_RCC_OscConfig+0x270>)
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	6a1b      	ldr	r3, [r3, #32]
 800232e:	496d      	ldr	r1, [pc, #436]	@ (80024e4 <HAL_RCC_OscConfig+0x270>)
 8002330:	4313      	orrs	r3, r2
 8002332:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002334:	4b6b      	ldr	r3, [pc, #428]	@ (80024e4 <HAL_RCC_OscConfig+0x270>)
 8002336:	685b      	ldr	r3, [r3, #4]
 8002338:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	69db      	ldr	r3, [r3, #28]
 8002340:	021b      	lsls	r3, r3, #8
 8002342:	4968      	ldr	r1, [pc, #416]	@ (80024e4 <HAL_RCC_OscConfig+0x270>)
 8002344:	4313      	orrs	r3, r2
 8002346:	604b      	str	r3, [r1, #4]
 8002348:	e025      	b.n	8002396 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800234a:	4b66      	ldr	r3, [pc, #408]	@ (80024e4 <HAL_RCC_OscConfig+0x270>)
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	4a65      	ldr	r2, [pc, #404]	@ (80024e4 <HAL_RCC_OscConfig+0x270>)
 8002350:	f043 0308 	orr.w	r3, r3, #8
 8002354:	6013      	str	r3, [r2, #0]
 8002356:	4b63      	ldr	r3, [pc, #396]	@ (80024e4 <HAL_RCC_OscConfig+0x270>)
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	6a1b      	ldr	r3, [r3, #32]
 8002362:	4960      	ldr	r1, [pc, #384]	@ (80024e4 <HAL_RCC_OscConfig+0x270>)
 8002364:	4313      	orrs	r3, r2
 8002366:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002368:	4b5e      	ldr	r3, [pc, #376]	@ (80024e4 <HAL_RCC_OscConfig+0x270>)
 800236a:	685b      	ldr	r3, [r3, #4]
 800236c:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	69db      	ldr	r3, [r3, #28]
 8002374:	021b      	lsls	r3, r3, #8
 8002376:	495b      	ldr	r1, [pc, #364]	@ (80024e4 <HAL_RCC_OscConfig+0x270>)
 8002378:	4313      	orrs	r3, r2
 800237a:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800237c:	69bb      	ldr	r3, [r7, #24]
 800237e:	2b00      	cmp	r3, #0
 8002380:	d109      	bne.n	8002396 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	6a1b      	ldr	r3, [r3, #32]
 8002386:	4618      	mov	r0, r3
 8002388:	f000 fd4c 	bl	8002e24 <RCC_SetFlashLatencyFromMSIRange>
 800238c:	4603      	mov	r3, r0
 800238e:	2b00      	cmp	r3, #0
 8002390:	d001      	beq.n	8002396 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8002392:	2301      	movs	r3, #1
 8002394:	e37a      	b.n	8002a8c <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002396:	f000 fc81 	bl	8002c9c <HAL_RCC_GetSysClockFreq>
 800239a:	4602      	mov	r2, r0
 800239c:	4b51      	ldr	r3, [pc, #324]	@ (80024e4 <HAL_RCC_OscConfig+0x270>)
 800239e:	689b      	ldr	r3, [r3, #8]
 80023a0:	091b      	lsrs	r3, r3, #4
 80023a2:	f003 030f 	and.w	r3, r3, #15
 80023a6:	4950      	ldr	r1, [pc, #320]	@ (80024e8 <HAL_RCC_OscConfig+0x274>)
 80023a8:	5ccb      	ldrb	r3, [r1, r3]
 80023aa:	f003 031f 	and.w	r3, r3, #31
 80023ae:	fa22 f303 	lsr.w	r3, r2, r3
 80023b2:	4a4e      	ldr	r2, [pc, #312]	@ (80024ec <HAL_RCC_OscConfig+0x278>)
 80023b4:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80023b6:	4b4e      	ldr	r3, [pc, #312]	@ (80024f0 <HAL_RCC_OscConfig+0x27c>)
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	4618      	mov	r0, r3
 80023bc:	f7ff f91e 	bl	80015fc <HAL_InitTick>
 80023c0:	4603      	mov	r3, r0
 80023c2:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80023c4:	7bfb      	ldrb	r3, [r7, #15]
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d052      	beq.n	8002470 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 80023ca:	7bfb      	ldrb	r3, [r7, #15]
 80023cc:	e35e      	b.n	8002a8c <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	699b      	ldr	r3, [r3, #24]
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d032      	beq.n	800243c <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80023d6:	4b43      	ldr	r3, [pc, #268]	@ (80024e4 <HAL_RCC_OscConfig+0x270>)
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	4a42      	ldr	r2, [pc, #264]	@ (80024e4 <HAL_RCC_OscConfig+0x270>)
 80023dc:	f043 0301 	orr.w	r3, r3, #1
 80023e0:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80023e2:	f7ff f95b 	bl	800169c <HAL_GetTick>
 80023e6:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80023e8:	e008      	b.n	80023fc <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80023ea:	f7ff f957 	bl	800169c <HAL_GetTick>
 80023ee:	4602      	mov	r2, r0
 80023f0:	693b      	ldr	r3, [r7, #16]
 80023f2:	1ad3      	subs	r3, r2, r3
 80023f4:	2b02      	cmp	r3, #2
 80023f6:	d901      	bls.n	80023fc <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 80023f8:	2303      	movs	r3, #3
 80023fa:	e347      	b.n	8002a8c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80023fc:	4b39      	ldr	r3, [pc, #228]	@ (80024e4 <HAL_RCC_OscConfig+0x270>)
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	f003 0302 	and.w	r3, r3, #2
 8002404:	2b00      	cmp	r3, #0
 8002406:	d0f0      	beq.n	80023ea <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002408:	4b36      	ldr	r3, [pc, #216]	@ (80024e4 <HAL_RCC_OscConfig+0x270>)
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	4a35      	ldr	r2, [pc, #212]	@ (80024e4 <HAL_RCC_OscConfig+0x270>)
 800240e:	f043 0308 	orr.w	r3, r3, #8
 8002412:	6013      	str	r3, [r2, #0]
 8002414:	4b33      	ldr	r3, [pc, #204]	@ (80024e4 <HAL_RCC_OscConfig+0x270>)
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	6a1b      	ldr	r3, [r3, #32]
 8002420:	4930      	ldr	r1, [pc, #192]	@ (80024e4 <HAL_RCC_OscConfig+0x270>)
 8002422:	4313      	orrs	r3, r2
 8002424:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002426:	4b2f      	ldr	r3, [pc, #188]	@ (80024e4 <HAL_RCC_OscConfig+0x270>)
 8002428:	685b      	ldr	r3, [r3, #4]
 800242a:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	69db      	ldr	r3, [r3, #28]
 8002432:	021b      	lsls	r3, r3, #8
 8002434:	492b      	ldr	r1, [pc, #172]	@ (80024e4 <HAL_RCC_OscConfig+0x270>)
 8002436:	4313      	orrs	r3, r2
 8002438:	604b      	str	r3, [r1, #4]
 800243a:	e01a      	b.n	8002472 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800243c:	4b29      	ldr	r3, [pc, #164]	@ (80024e4 <HAL_RCC_OscConfig+0x270>)
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	4a28      	ldr	r2, [pc, #160]	@ (80024e4 <HAL_RCC_OscConfig+0x270>)
 8002442:	f023 0301 	bic.w	r3, r3, #1
 8002446:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002448:	f7ff f928 	bl	800169c <HAL_GetTick>
 800244c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800244e:	e008      	b.n	8002462 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002450:	f7ff f924 	bl	800169c <HAL_GetTick>
 8002454:	4602      	mov	r2, r0
 8002456:	693b      	ldr	r3, [r7, #16]
 8002458:	1ad3      	subs	r3, r2, r3
 800245a:	2b02      	cmp	r3, #2
 800245c:	d901      	bls.n	8002462 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 800245e:	2303      	movs	r3, #3
 8002460:	e314      	b.n	8002a8c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002462:	4b20      	ldr	r3, [pc, #128]	@ (80024e4 <HAL_RCC_OscConfig+0x270>)
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	f003 0302 	and.w	r3, r3, #2
 800246a:	2b00      	cmp	r3, #0
 800246c:	d1f0      	bne.n	8002450 <HAL_RCC_OscConfig+0x1dc>
 800246e:	e000      	b.n	8002472 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002470:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	f003 0301 	and.w	r3, r3, #1
 800247a:	2b00      	cmp	r3, #0
 800247c:	d073      	beq.n	8002566 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800247e:	69bb      	ldr	r3, [r7, #24]
 8002480:	2b08      	cmp	r3, #8
 8002482:	d005      	beq.n	8002490 <HAL_RCC_OscConfig+0x21c>
 8002484:	69bb      	ldr	r3, [r7, #24]
 8002486:	2b0c      	cmp	r3, #12
 8002488:	d10e      	bne.n	80024a8 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800248a:	697b      	ldr	r3, [r7, #20]
 800248c:	2b03      	cmp	r3, #3
 800248e:	d10b      	bne.n	80024a8 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002490:	4b14      	ldr	r3, [pc, #80]	@ (80024e4 <HAL_RCC_OscConfig+0x270>)
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002498:	2b00      	cmp	r3, #0
 800249a:	d063      	beq.n	8002564 <HAL_RCC_OscConfig+0x2f0>
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	685b      	ldr	r3, [r3, #4]
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	d15f      	bne.n	8002564 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80024a4:	2301      	movs	r3, #1
 80024a6:	e2f1      	b.n	8002a8c <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	685b      	ldr	r3, [r3, #4]
 80024ac:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80024b0:	d106      	bne.n	80024c0 <HAL_RCC_OscConfig+0x24c>
 80024b2:	4b0c      	ldr	r3, [pc, #48]	@ (80024e4 <HAL_RCC_OscConfig+0x270>)
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	4a0b      	ldr	r2, [pc, #44]	@ (80024e4 <HAL_RCC_OscConfig+0x270>)
 80024b8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80024bc:	6013      	str	r3, [r2, #0]
 80024be:	e025      	b.n	800250c <HAL_RCC_OscConfig+0x298>
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	685b      	ldr	r3, [r3, #4]
 80024c4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80024c8:	d114      	bne.n	80024f4 <HAL_RCC_OscConfig+0x280>
 80024ca:	4b06      	ldr	r3, [pc, #24]	@ (80024e4 <HAL_RCC_OscConfig+0x270>)
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	4a05      	ldr	r2, [pc, #20]	@ (80024e4 <HAL_RCC_OscConfig+0x270>)
 80024d0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80024d4:	6013      	str	r3, [r2, #0]
 80024d6:	4b03      	ldr	r3, [pc, #12]	@ (80024e4 <HAL_RCC_OscConfig+0x270>)
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	4a02      	ldr	r2, [pc, #8]	@ (80024e4 <HAL_RCC_OscConfig+0x270>)
 80024dc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80024e0:	6013      	str	r3, [r2, #0]
 80024e2:	e013      	b.n	800250c <HAL_RCC_OscConfig+0x298>
 80024e4:	40021000 	.word	0x40021000
 80024e8:	080059b4 	.word	0x080059b4
 80024ec:	20000000 	.word	0x20000000
 80024f0:	20000004 	.word	0x20000004
 80024f4:	4ba0      	ldr	r3, [pc, #640]	@ (8002778 <HAL_RCC_OscConfig+0x504>)
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	4a9f      	ldr	r2, [pc, #636]	@ (8002778 <HAL_RCC_OscConfig+0x504>)
 80024fa:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80024fe:	6013      	str	r3, [r2, #0]
 8002500:	4b9d      	ldr	r3, [pc, #628]	@ (8002778 <HAL_RCC_OscConfig+0x504>)
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	4a9c      	ldr	r2, [pc, #624]	@ (8002778 <HAL_RCC_OscConfig+0x504>)
 8002506:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800250a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	685b      	ldr	r3, [r3, #4]
 8002510:	2b00      	cmp	r3, #0
 8002512:	d013      	beq.n	800253c <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002514:	f7ff f8c2 	bl	800169c <HAL_GetTick>
 8002518:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800251a:	e008      	b.n	800252e <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800251c:	f7ff f8be 	bl	800169c <HAL_GetTick>
 8002520:	4602      	mov	r2, r0
 8002522:	693b      	ldr	r3, [r7, #16]
 8002524:	1ad3      	subs	r3, r2, r3
 8002526:	2b64      	cmp	r3, #100	@ 0x64
 8002528:	d901      	bls.n	800252e <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800252a:	2303      	movs	r3, #3
 800252c:	e2ae      	b.n	8002a8c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800252e:	4b92      	ldr	r3, [pc, #584]	@ (8002778 <HAL_RCC_OscConfig+0x504>)
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002536:	2b00      	cmp	r3, #0
 8002538:	d0f0      	beq.n	800251c <HAL_RCC_OscConfig+0x2a8>
 800253a:	e014      	b.n	8002566 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800253c:	f7ff f8ae 	bl	800169c <HAL_GetTick>
 8002540:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002542:	e008      	b.n	8002556 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002544:	f7ff f8aa 	bl	800169c <HAL_GetTick>
 8002548:	4602      	mov	r2, r0
 800254a:	693b      	ldr	r3, [r7, #16]
 800254c:	1ad3      	subs	r3, r2, r3
 800254e:	2b64      	cmp	r3, #100	@ 0x64
 8002550:	d901      	bls.n	8002556 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8002552:	2303      	movs	r3, #3
 8002554:	e29a      	b.n	8002a8c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002556:	4b88      	ldr	r3, [pc, #544]	@ (8002778 <HAL_RCC_OscConfig+0x504>)
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800255e:	2b00      	cmp	r3, #0
 8002560:	d1f0      	bne.n	8002544 <HAL_RCC_OscConfig+0x2d0>
 8002562:	e000      	b.n	8002566 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002564:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	f003 0302 	and.w	r3, r3, #2
 800256e:	2b00      	cmp	r3, #0
 8002570:	d060      	beq.n	8002634 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8002572:	69bb      	ldr	r3, [r7, #24]
 8002574:	2b04      	cmp	r3, #4
 8002576:	d005      	beq.n	8002584 <HAL_RCC_OscConfig+0x310>
 8002578:	69bb      	ldr	r3, [r7, #24]
 800257a:	2b0c      	cmp	r3, #12
 800257c:	d119      	bne.n	80025b2 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800257e:	697b      	ldr	r3, [r7, #20]
 8002580:	2b02      	cmp	r3, #2
 8002582:	d116      	bne.n	80025b2 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002584:	4b7c      	ldr	r3, [pc, #496]	@ (8002778 <HAL_RCC_OscConfig+0x504>)
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800258c:	2b00      	cmp	r3, #0
 800258e:	d005      	beq.n	800259c <HAL_RCC_OscConfig+0x328>
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	68db      	ldr	r3, [r3, #12]
 8002594:	2b00      	cmp	r3, #0
 8002596:	d101      	bne.n	800259c <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8002598:	2301      	movs	r3, #1
 800259a:	e277      	b.n	8002a8c <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800259c:	4b76      	ldr	r3, [pc, #472]	@ (8002778 <HAL_RCC_OscConfig+0x504>)
 800259e:	685b      	ldr	r3, [r3, #4]
 80025a0:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	691b      	ldr	r3, [r3, #16]
 80025a8:	061b      	lsls	r3, r3, #24
 80025aa:	4973      	ldr	r1, [pc, #460]	@ (8002778 <HAL_RCC_OscConfig+0x504>)
 80025ac:	4313      	orrs	r3, r2
 80025ae:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80025b0:	e040      	b.n	8002634 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	68db      	ldr	r3, [r3, #12]
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d023      	beq.n	8002602 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80025ba:	4b6f      	ldr	r3, [pc, #444]	@ (8002778 <HAL_RCC_OscConfig+0x504>)
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	4a6e      	ldr	r2, [pc, #440]	@ (8002778 <HAL_RCC_OscConfig+0x504>)
 80025c0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80025c4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025c6:	f7ff f869 	bl	800169c <HAL_GetTick>
 80025ca:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80025cc:	e008      	b.n	80025e0 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80025ce:	f7ff f865 	bl	800169c <HAL_GetTick>
 80025d2:	4602      	mov	r2, r0
 80025d4:	693b      	ldr	r3, [r7, #16]
 80025d6:	1ad3      	subs	r3, r2, r3
 80025d8:	2b02      	cmp	r3, #2
 80025da:	d901      	bls.n	80025e0 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80025dc:	2303      	movs	r3, #3
 80025de:	e255      	b.n	8002a8c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80025e0:	4b65      	ldr	r3, [pc, #404]	@ (8002778 <HAL_RCC_OscConfig+0x504>)
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	d0f0      	beq.n	80025ce <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80025ec:	4b62      	ldr	r3, [pc, #392]	@ (8002778 <HAL_RCC_OscConfig+0x504>)
 80025ee:	685b      	ldr	r3, [r3, #4]
 80025f0:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	691b      	ldr	r3, [r3, #16]
 80025f8:	061b      	lsls	r3, r3, #24
 80025fa:	495f      	ldr	r1, [pc, #380]	@ (8002778 <HAL_RCC_OscConfig+0x504>)
 80025fc:	4313      	orrs	r3, r2
 80025fe:	604b      	str	r3, [r1, #4]
 8002600:	e018      	b.n	8002634 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002602:	4b5d      	ldr	r3, [pc, #372]	@ (8002778 <HAL_RCC_OscConfig+0x504>)
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	4a5c      	ldr	r2, [pc, #368]	@ (8002778 <HAL_RCC_OscConfig+0x504>)
 8002608:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800260c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800260e:	f7ff f845 	bl	800169c <HAL_GetTick>
 8002612:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002614:	e008      	b.n	8002628 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002616:	f7ff f841 	bl	800169c <HAL_GetTick>
 800261a:	4602      	mov	r2, r0
 800261c:	693b      	ldr	r3, [r7, #16]
 800261e:	1ad3      	subs	r3, r2, r3
 8002620:	2b02      	cmp	r3, #2
 8002622:	d901      	bls.n	8002628 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8002624:	2303      	movs	r3, #3
 8002626:	e231      	b.n	8002a8c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002628:	4b53      	ldr	r3, [pc, #332]	@ (8002778 <HAL_RCC_OscConfig+0x504>)
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002630:	2b00      	cmp	r3, #0
 8002632:	d1f0      	bne.n	8002616 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	f003 0308 	and.w	r3, r3, #8
 800263c:	2b00      	cmp	r3, #0
 800263e:	d03c      	beq.n	80026ba <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	695b      	ldr	r3, [r3, #20]
 8002644:	2b00      	cmp	r3, #0
 8002646:	d01c      	beq.n	8002682 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002648:	4b4b      	ldr	r3, [pc, #300]	@ (8002778 <HAL_RCC_OscConfig+0x504>)
 800264a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800264e:	4a4a      	ldr	r2, [pc, #296]	@ (8002778 <HAL_RCC_OscConfig+0x504>)
 8002650:	f043 0301 	orr.w	r3, r3, #1
 8002654:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002658:	f7ff f820 	bl	800169c <HAL_GetTick>
 800265c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800265e:	e008      	b.n	8002672 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002660:	f7ff f81c 	bl	800169c <HAL_GetTick>
 8002664:	4602      	mov	r2, r0
 8002666:	693b      	ldr	r3, [r7, #16]
 8002668:	1ad3      	subs	r3, r2, r3
 800266a:	2b02      	cmp	r3, #2
 800266c:	d901      	bls.n	8002672 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800266e:	2303      	movs	r3, #3
 8002670:	e20c      	b.n	8002a8c <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002672:	4b41      	ldr	r3, [pc, #260]	@ (8002778 <HAL_RCC_OscConfig+0x504>)
 8002674:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002678:	f003 0302 	and.w	r3, r3, #2
 800267c:	2b00      	cmp	r3, #0
 800267e:	d0ef      	beq.n	8002660 <HAL_RCC_OscConfig+0x3ec>
 8002680:	e01b      	b.n	80026ba <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002682:	4b3d      	ldr	r3, [pc, #244]	@ (8002778 <HAL_RCC_OscConfig+0x504>)
 8002684:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002688:	4a3b      	ldr	r2, [pc, #236]	@ (8002778 <HAL_RCC_OscConfig+0x504>)
 800268a:	f023 0301 	bic.w	r3, r3, #1
 800268e:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002692:	f7ff f803 	bl	800169c <HAL_GetTick>
 8002696:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002698:	e008      	b.n	80026ac <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800269a:	f7fe ffff 	bl	800169c <HAL_GetTick>
 800269e:	4602      	mov	r2, r0
 80026a0:	693b      	ldr	r3, [r7, #16]
 80026a2:	1ad3      	subs	r3, r2, r3
 80026a4:	2b02      	cmp	r3, #2
 80026a6:	d901      	bls.n	80026ac <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80026a8:	2303      	movs	r3, #3
 80026aa:	e1ef      	b.n	8002a8c <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80026ac:	4b32      	ldr	r3, [pc, #200]	@ (8002778 <HAL_RCC_OscConfig+0x504>)
 80026ae:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80026b2:	f003 0302 	and.w	r3, r3, #2
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d1ef      	bne.n	800269a <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	f003 0304 	and.w	r3, r3, #4
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	f000 80a6 	beq.w	8002814 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80026c8:	2300      	movs	r3, #0
 80026ca:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80026cc:	4b2a      	ldr	r3, [pc, #168]	@ (8002778 <HAL_RCC_OscConfig+0x504>)
 80026ce:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80026d0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	d10d      	bne.n	80026f4 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80026d8:	4b27      	ldr	r3, [pc, #156]	@ (8002778 <HAL_RCC_OscConfig+0x504>)
 80026da:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80026dc:	4a26      	ldr	r2, [pc, #152]	@ (8002778 <HAL_RCC_OscConfig+0x504>)
 80026de:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80026e2:	6593      	str	r3, [r2, #88]	@ 0x58
 80026e4:	4b24      	ldr	r3, [pc, #144]	@ (8002778 <HAL_RCC_OscConfig+0x504>)
 80026e6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80026e8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80026ec:	60bb      	str	r3, [r7, #8]
 80026ee:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80026f0:	2301      	movs	r3, #1
 80026f2:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80026f4:	4b21      	ldr	r3, [pc, #132]	@ (800277c <HAL_RCC_OscConfig+0x508>)
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	d118      	bne.n	8002732 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002700:	4b1e      	ldr	r3, [pc, #120]	@ (800277c <HAL_RCC_OscConfig+0x508>)
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	4a1d      	ldr	r2, [pc, #116]	@ (800277c <HAL_RCC_OscConfig+0x508>)
 8002706:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800270a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800270c:	f7fe ffc6 	bl	800169c <HAL_GetTick>
 8002710:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002712:	e008      	b.n	8002726 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002714:	f7fe ffc2 	bl	800169c <HAL_GetTick>
 8002718:	4602      	mov	r2, r0
 800271a:	693b      	ldr	r3, [r7, #16]
 800271c:	1ad3      	subs	r3, r2, r3
 800271e:	2b02      	cmp	r3, #2
 8002720:	d901      	bls.n	8002726 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8002722:	2303      	movs	r3, #3
 8002724:	e1b2      	b.n	8002a8c <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002726:	4b15      	ldr	r3, [pc, #84]	@ (800277c <HAL_RCC_OscConfig+0x508>)
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800272e:	2b00      	cmp	r3, #0
 8002730:	d0f0      	beq.n	8002714 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	689b      	ldr	r3, [r3, #8]
 8002736:	2b01      	cmp	r3, #1
 8002738:	d108      	bne.n	800274c <HAL_RCC_OscConfig+0x4d8>
 800273a:	4b0f      	ldr	r3, [pc, #60]	@ (8002778 <HAL_RCC_OscConfig+0x504>)
 800273c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002740:	4a0d      	ldr	r2, [pc, #52]	@ (8002778 <HAL_RCC_OscConfig+0x504>)
 8002742:	f043 0301 	orr.w	r3, r3, #1
 8002746:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800274a:	e029      	b.n	80027a0 <HAL_RCC_OscConfig+0x52c>
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	689b      	ldr	r3, [r3, #8]
 8002750:	2b05      	cmp	r3, #5
 8002752:	d115      	bne.n	8002780 <HAL_RCC_OscConfig+0x50c>
 8002754:	4b08      	ldr	r3, [pc, #32]	@ (8002778 <HAL_RCC_OscConfig+0x504>)
 8002756:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800275a:	4a07      	ldr	r2, [pc, #28]	@ (8002778 <HAL_RCC_OscConfig+0x504>)
 800275c:	f043 0304 	orr.w	r3, r3, #4
 8002760:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002764:	4b04      	ldr	r3, [pc, #16]	@ (8002778 <HAL_RCC_OscConfig+0x504>)
 8002766:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800276a:	4a03      	ldr	r2, [pc, #12]	@ (8002778 <HAL_RCC_OscConfig+0x504>)
 800276c:	f043 0301 	orr.w	r3, r3, #1
 8002770:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002774:	e014      	b.n	80027a0 <HAL_RCC_OscConfig+0x52c>
 8002776:	bf00      	nop
 8002778:	40021000 	.word	0x40021000
 800277c:	40007000 	.word	0x40007000
 8002780:	4b9a      	ldr	r3, [pc, #616]	@ (80029ec <HAL_RCC_OscConfig+0x778>)
 8002782:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002786:	4a99      	ldr	r2, [pc, #612]	@ (80029ec <HAL_RCC_OscConfig+0x778>)
 8002788:	f023 0301 	bic.w	r3, r3, #1
 800278c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002790:	4b96      	ldr	r3, [pc, #600]	@ (80029ec <HAL_RCC_OscConfig+0x778>)
 8002792:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002796:	4a95      	ldr	r2, [pc, #596]	@ (80029ec <HAL_RCC_OscConfig+0x778>)
 8002798:	f023 0304 	bic.w	r3, r3, #4
 800279c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	689b      	ldr	r3, [r3, #8]
 80027a4:	2b00      	cmp	r3, #0
 80027a6:	d016      	beq.n	80027d6 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80027a8:	f7fe ff78 	bl	800169c <HAL_GetTick>
 80027ac:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80027ae:	e00a      	b.n	80027c6 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80027b0:	f7fe ff74 	bl	800169c <HAL_GetTick>
 80027b4:	4602      	mov	r2, r0
 80027b6:	693b      	ldr	r3, [r7, #16]
 80027b8:	1ad3      	subs	r3, r2, r3
 80027ba:	f241 3288 	movw	r2, #5000	@ 0x1388
 80027be:	4293      	cmp	r3, r2
 80027c0:	d901      	bls.n	80027c6 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 80027c2:	2303      	movs	r3, #3
 80027c4:	e162      	b.n	8002a8c <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80027c6:	4b89      	ldr	r3, [pc, #548]	@ (80029ec <HAL_RCC_OscConfig+0x778>)
 80027c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80027cc:	f003 0302 	and.w	r3, r3, #2
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	d0ed      	beq.n	80027b0 <HAL_RCC_OscConfig+0x53c>
 80027d4:	e015      	b.n	8002802 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80027d6:	f7fe ff61 	bl	800169c <HAL_GetTick>
 80027da:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80027dc:	e00a      	b.n	80027f4 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80027de:	f7fe ff5d 	bl	800169c <HAL_GetTick>
 80027e2:	4602      	mov	r2, r0
 80027e4:	693b      	ldr	r3, [r7, #16]
 80027e6:	1ad3      	subs	r3, r2, r3
 80027e8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80027ec:	4293      	cmp	r3, r2
 80027ee:	d901      	bls.n	80027f4 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80027f0:	2303      	movs	r3, #3
 80027f2:	e14b      	b.n	8002a8c <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80027f4:	4b7d      	ldr	r3, [pc, #500]	@ (80029ec <HAL_RCC_OscConfig+0x778>)
 80027f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80027fa:	f003 0302 	and.w	r3, r3, #2
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d1ed      	bne.n	80027de <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002802:	7ffb      	ldrb	r3, [r7, #31]
 8002804:	2b01      	cmp	r3, #1
 8002806:	d105      	bne.n	8002814 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002808:	4b78      	ldr	r3, [pc, #480]	@ (80029ec <HAL_RCC_OscConfig+0x778>)
 800280a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800280c:	4a77      	ldr	r2, [pc, #476]	@ (80029ec <HAL_RCC_OscConfig+0x778>)
 800280e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002812:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	f003 0320 	and.w	r3, r3, #32
 800281c:	2b00      	cmp	r3, #0
 800281e:	d03c      	beq.n	800289a <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002824:	2b00      	cmp	r3, #0
 8002826:	d01c      	beq.n	8002862 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002828:	4b70      	ldr	r3, [pc, #448]	@ (80029ec <HAL_RCC_OscConfig+0x778>)
 800282a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800282e:	4a6f      	ldr	r2, [pc, #444]	@ (80029ec <HAL_RCC_OscConfig+0x778>)
 8002830:	f043 0301 	orr.w	r3, r3, #1
 8002834:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002838:	f7fe ff30 	bl	800169c <HAL_GetTick>
 800283c:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800283e:	e008      	b.n	8002852 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002840:	f7fe ff2c 	bl	800169c <HAL_GetTick>
 8002844:	4602      	mov	r2, r0
 8002846:	693b      	ldr	r3, [r7, #16]
 8002848:	1ad3      	subs	r3, r2, r3
 800284a:	2b02      	cmp	r3, #2
 800284c:	d901      	bls.n	8002852 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 800284e:	2303      	movs	r3, #3
 8002850:	e11c      	b.n	8002a8c <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002852:	4b66      	ldr	r3, [pc, #408]	@ (80029ec <HAL_RCC_OscConfig+0x778>)
 8002854:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002858:	f003 0302 	and.w	r3, r3, #2
 800285c:	2b00      	cmp	r3, #0
 800285e:	d0ef      	beq.n	8002840 <HAL_RCC_OscConfig+0x5cc>
 8002860:	e01b      	b.n	800289a <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002862:	4b62      	ldr	r3, [pc, #392]	@ (80029ec <HAL_RCC_OscConfig+0x778>)
 8002864:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002868:	4a60      	ldr	r2, [pc, #384]	@ (80029ec <HAL_RCC_OscConfig+0x778>)
 800286a:	f023 0301 	bic.w	r3, r3, #1
 800286e:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002872:	f7fe ff13 	bl	800169c <HAL_GetTick>
 8002876:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002878:	e008      	b.n	800288c <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800287a:	f7fe ff0f 	bl	800169c <HAL_GetTick>
 800287e:	4602      	mov	r2, r0
 8002880:	693b      	ldr	r3, [r7, #16]
 8002882:	1ad3      	subs	r3, r2, r3
 8002884:	2b02      	cmp	r3, #2
 8002886:	d901      	bls.n	800288c <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8002888:	2303      	movs	r3, #3
 800288a:	e0ff      	b.n	8002a8c <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800288c:	4b57      	ldr	r3, [pc, #348]	@ (80029ec <HAL_RCC_OscConfig+0x778>)
 800288e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002892:	f003 0302 	and.w	r3, r3, #2
 8002896:	2b00      	cmp	r3, #0
 8002898:	d1ef      	bne.n	800287a <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800289e:	2b00      	cmp	r3, #0
 80028a0:	f000 80f3 	beq.w	8002a8a <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80028a8:	2b02      	cmp	r3, #2
 80028aa:	f040 80c9 	bne.w	8002a40 <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80028ae:	4b4f      	ldr	r3, [pc, #316]	@ (80029ec <HAL_RCC_OscConfig+0x778>)
 80028b0:	68db      	ldr	r3, [r3, #12]
 80028b2:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80028b4:	697b      	ldr	r3, [r7, #20]
 80028b6:	f003 0203 	and.w	r2, r3, #3
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80028be:	429a      	cmp	r2, r3
 80028c0:	d12c      	bne.n	800291c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80028c2:	697b      	ldr	r3, [r7, #20]
 80028c4:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80028cc:	3b01      	subs	r3, #1
 80028ce:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80028d0:	429a      	cmp	r2, r3
 80028d2:	d123      	bne.n	800291c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80028d4:	697b      	ldr	r3, [r7, #20]
 80028d6:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80028de:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80028e0:	429a      	cmp	r2, r3
 80028e2:	d11b      	bne.n	800291c <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80028e4:	697b      	ldr	r3, [r7, #20]
 80028e6:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80028ee:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80028f0:	429a      	cmp	r2, r3
 80028f2:	d113      	bne.n	800291c <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80028f4:	697b      	ldr	r3, [r7, #20]
 80028f6:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80028fe:	085b      	lsrs	r3, r3, #1
 8002900:	3b01      	subs	r3, #1
 8002902:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002904:	429a      	cmp	r2, r3
 8002906:	d109      	bne.n	800291c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002908:	697b      	ldr	r3, [r7, #20]
 800290a:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002912:	085b      	lsrs	r3, r3, #1
 8002914:	3b01      	subs	r3, #1
 8002916:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002918:	429a      	cmp	r2, r3
 800291a:	d06b      	beq.n	80029f4 <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800291c:	69bb      	ldr	r3, [r7, #24]
 800291e:	2b0c      	cmp	r3, #12
 8002920:	d062      	beq.n	80029e8 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8002922:	4b32      	ldr	r3, [pc, #200]	@ (80029ec <HAL_RCC_OscConfig+0x778>)
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800292a:	2b00      	cmp	r3, #0
 800292c:	d001      	beq.n	8002932 <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 800292e:	2301      	movs	r3, #1
 8002930:	e0ac      	b.n	8002a8c <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8002932:	4b2e      	ldr	r3, [pc, #184]	@ (80029ec <HAL_RCC_OscConfig+0x778>)
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	4a2d      	ldr	r2, [pc, #180]	@ (80029ec <HAL_RCC_OscConfig+0x778>)
 8002938:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800293c:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800293e:	f7fe fead 	bl	800169c <HAL_GetTick>
 8002942:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002944:	e008      	b.n	8002958 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002946:	f7fe fea9 	bl	800169c <HAL_GetTick>
 800294a:	4602      	mov	r2, r0
 800294c:	693b      	ldr	r3, [r7, #16]
 800294e:	1ad3      	subs	r3, r2, r3
 8002950:	2b02      	cmp	r3, #2
 8002952:	d901      	bls.n	8002958 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 8002954:	2303      	movs	r3, #3
 8002956:	e099      	b.n	8002a8c <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002958:	4b24      	ldr	r3, [pc, #144]	@ (80029ec <HAL_RCC_OscConfig+0x778>)
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002960:	2b00      	cmp	r3, #0
 8002962:	d1f0      	bne.n	8002946 <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002964:	4b21      	ldr	r3, [pc, #132]	@ (80029ec <HAL_RCC_OscConfig+0x778>)
 8002966:	68da      	ldr	r2, [r3, #12]
 8002968:	4b21      	ldr	r3, [pc, #132]	@ (80029f0 <HAL_RCC_OscConfig+0x77c>)
 800296a:	4013      	ands	r3, r2
 800296c:	687a      	ldr	r2, [r7, #4]
 800296e:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8002970:	687a      	ldr	r2, [r7, #4]
 8002972:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8002974:	3a01      	subs	r2, #1
 8002976:	0112      	lsls	r2, r2, #4
 8002978:	4311      	orrs	r1, r2
 800297a:	687a      	ldr	r2, [r7, #4]
 800297c:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800297e:	0212      	lsls	r2, r2, #8
 8002980:	4311      	orrs	r1, r2
 8002982:	687a      	ldr	r2, [r7, #4]
 8002984:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8002986:	0852      	lsrs	r2, r2, #1
 8002988:	3a01      	subs	r2, #1
 800298a:	0552      	lsls	r2, r2, #21
 800298c:	4311      	orrs	r1, r2
 800298e:	687a      	ldr	r2, [r7, #4]
 8002990:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8002992:	0852      	lsrs	r2, r2, #1
 8002994:	3a01      	subs	r2, #1
 8002996:	0652      	lsls	r2, r2, #25
 8002998:	4311      	orrs	r1, r2
 800299a:	687a      	ldr	r2, [r7, #4]
 800299c:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 800299e:	06d2      	lsls	r2, r2, #27
 80029a0:	430a      	orrs	r2, r1
 80029a2:	4912      	ldr	r1, [pc, #72]	@ (80029ec <HAL_RCC_OscConfig+0x778>)
 80029a4:	4313      	orrs	r3, r2
 80029a6:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80029a8:	4b10      	ldr	r3, [pc, #64]	@ (80029ec <HAL_RCC_OscConfig+0x778>)
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	4a0f      	ldr	r2, [pc, #60]	@ (80029ec <HAL_RCC_OscConfig+0x778>)
 80029ae:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80029b2:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80029b4:	4b0d      	ldr	r3, [pc, #52]	@ (80029ec <HAL_RCC_OscConfig+0x778>)
 80029b6:	68db      	ldr	r3, [r3, #12]
 80029b8:	4a0c      	ldr	r2, [pc, #48]	@ (80029ec <HAL_RCC_OscConfig+0x778>)
 80029ba:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80029be:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80029c0:	f7fe fe6c 	bl	800169c <HAL_GetTick>
 80029c4:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80029c6:	e008      	b.n	80029da <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80029c8:	f7fe fe68 	bl	800169c <HAL_GetTick>
 80029cc:	4602      	mov	r2, r0
 80029ce:	693b      	ldr	r3, [r7, #16]
 80029d0:	1ad3      	subs	r3, r2, r3
 80029d2:	2b02      	cmp	r3, #2
 80029d4:	d901      	bls.n	80029da <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 80029d6:	2303      	movs	r3, #3
 80029d8:	e058      	b.n	8002a8c <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80029da:	4b04      	ldr	r3, [pc, #16]	@ (80029ec <HAL_RCC_OscConfig+0x778>)
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d0f0      	beq.n	80029c8 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80029e6:	e050      	b.n	8002a8a <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80029e8:	2301      	movs	r3, #1
 80029ea:	e04f      	b.n	8002a8c <HAL_RCC_OscConfig+0x818>
 80029ec:	40021000 	.word	0x40021000
 80029f0:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80029f4:	4b27      	ldr	r3, [pc, #156]	@ (8002a94 <HAL_RCC_OscConfig+0x820>)
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	d144      	bne.n	8002a8a <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002a00:	4b24      	ldr	r3, [pc, #144]	@ (8002a94 <HAL_RCC_OscConfig+0x820>)
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	4a23      	ldr	r2, [pc, #140]	@ (8002a94 <HAL_RCC_OscConfig+0x820>)
 8002a06:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002a0a:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002a0c:	4b21      	ldr	r3, [pc, #132]	@ (8002a94 <HAL_RCC_OscConfig+0x820>)
 8002a0e:	68db      	ldr	r3, [r3, #12]
 8002a10:	4a20      	ldr	r2, [pc, #128]	@ (8002a94 <HAL_RCC_OscConfig+0x820>)
 8002a12:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002a16:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002a18:	f7fe fe40 	bl	800169c <HAL_GetTick>
 8002a1c:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002a1e:	e008      	b.n	8002a32 <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002a20:	f7fe fe3c 	bl	800169c <HAL_GetTick>
 8002a24:	4602      	mov	r2, r0
 8002a26:	693b      	ldr	r3, [r7, #16]
 8002a28:	1ad3      	subs	r3, r2, r3
 8002a2a:	2b02      	cmp	r3, #2
 8002a2c:	d901      	bls.n	8002a32 <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 8002a2e:	2303      	movs	r3, #3
 8002a30:	e02c      	b.n	8002a8c <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002a32:	4b18      	ldr	r3, [pc, #96]	@ (8002a94 <HAL_RCC_OscConfig+0x820>)
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d0f0      	beq.n	8002a20 <HAL_RCC_OscConfig+0x7ac>
 8002a3e:	e024      	b.n	8002a8a <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002a40:	69bb      	ldr	r3, [r7, #24]
 8002a42:	2b0c      	cmp	r3, #12
 8002a44:	d01f      	beq.n	8002a86 <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002a46:	4b13      	ldr	r3, [pc, #76]	@ (8002a94 <HAL_RCC_OscConfig+0x820>)
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	4a12      	ldr	r2, [pc, #72]	@ (8002a94 <HAL_RCC_OscConfig+0x820>)
 8002a4c:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002a50:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a52:	f7fe fe23 	bl	800169c <HAL_GetTick>
 8002a56:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002a58:	e008      	b.n	8002a6c <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002a5a:	f7fe fe1f 	bl	800169c <HAL_GetTick>
 8002a5e:	4602      	mov	r2, r0
 8002a60:	693b      	ldr	r3, [r7, #16]
 8002a62:	1ad3      	subs	r3, r2, r3
 8002a64:	2b02      	cmp	r3, #2
 8002a66:	d901      	bls.n	8002a6c <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 8002a68:	2303      	movs	r3, #3
 8002a6a:	e00f      	b.n	8002a8c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002a6c:	4b09      	ldr	r3, [pc, #36]	@ (8002a94 <HAL_RCC_OscConfig+0x820>)
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	d1f0      	bne.n	8002a5a <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 8002a78:	4b06      	ldr	r3, [pc, #24]	@ (8002a94 <HAL_RCC_OscConfig+0x820>)
 8002a7a:	68da      	ldr	r2, [r3, #12]
 8002a7c:	4905      	ldr	r1, [pc, #20]	@ (8002a94 <HAL_RCC_OscConfig+0x820>)
 8002a7e:	4b06      	ldr	r3, [pc, #24]	@ (8002a98 <HAL_RCC_OscConfig+0x824>)
 8002a80:	4013      	ands	r3, r2
 8002a82:	60cb      	str	r3, [r1, #12]
 8002a84:	e001      	b.n	8002a8a <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8002a86:	2301      	movs	r3, #1
 8002a88:	e000      	b.n	8002a8c <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 8002a8a:	2300      	movs	r3, #0
}
 8002a8c:	4618      	mov	r0, r3
 8002a8e:	3720      	adds	r7, #32
 8002a90:	46bd      	mov	sp, r7
 8002a92:	bd80      	pop	{r7, pc}
 8002a94:	40021000 	.word	0x40021000
 8002a98:	feeefffc 	.word	0xfeeefffc

08002a9c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002a9c:	b580      	push	{r7, lr}
 8002a9e:	b084      	sub	sp, #16
 8002aa0:	af00      	add	r7, sp, #0
 8002aa2:	6078      	str	r0, [r7, #4]
 8002aa4:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	d101      	bne.n	8002ab0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002aac:	2301      	movs	r3, #1
 8002aae:	e0e7      	b.n	8002c80 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002ab0:	4b75      	ldr	r3, [pc, #468]	@ (8002c88 <HAL_RCC_ClockConfig+0x1ec>)
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	f003 0307 	and.w	r3, r3, #7
 8002ab8:	683a      	ldr	r2, [r7, #0]
 8002aba:	429a      	cmp	r2, r3
 8002abc:	d910      	bls.n	8002ae0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002abe:	4b72      	ldr	r3, [pc, #456]	@ (8002c88 <HAL_RCC_ClockConfig+0x1ec>)
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	f023 0207 	bic.w	r2, r3, #7
 8002ac6:	4970      	ldr	r1, [pc, #448]	@ (8002c88 <HAL_RCC_ClockConfig+0x1ec>)
 8002ac8:	683b      	ldr	r3, [r7, #0]
 8002aca:	4313      	orrs	r3, r2
 8002acc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002ace:	4b6e      	ldr	r3, [pc, #440]	@ (8002c88 <HAL_RCC_ClockConfig+0x1ec>)
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	f003 0307 	and.w	r3, r3, #7
 8002ad6:	683a      	ldr	r2, [r7, #0]
 8002ad8:	429a      	cmp	r2, r3
 8002ada:	d001      	beq.n	8002ae0 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002adc:	2301      	movs	r3, #1
 8002ade:	e0cf      	b.n	8002c80 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	f003 0302 	and.w	r3, r3, #2
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	d010      	beq.n	8002b0e <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	689a      	ldr	r2, [r3, #8]
 8002af0:	4b66      	ldr	r3, [pc, #408]	@ (8002c8c <HAL_RCC_ClockConfig+0x1f0>)
 8002af2:	689b      	ldr	r3, [r3, #8]
 8002af4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002af8:	429a      	cmp	r2, r3
 8002afa:	d908      	bls.n	8002b0e <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002afc:	4b63      	ldr	r3, [pc, #396]	@ (8002c8c <HAL_RCC_ClockConfig+0x1f0>)
 8002afe:	689b      	ldr	r3, [r3, #8]
 8002b00:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	689b      	ldr	r3, [r3, #8]
 8002b08:	4960      	ldr	r1, [pc, #384]	@ (8002c8c <HAL_RCC_ClockConfig+0x1f0>)
 8002b0a:	4313      	orrs	r3, r2
 8002b0c:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	f003 0301 	and.w	r3, r3, #1
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d04c      	beq.n	8002bb4 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	685b      	ldr	r3, [r3, #4]
 8002b1e:	2b03      	cmp	r3, #3
 8002b20:	d107      	bne.n	8002b32 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002b22:	4b5a      	ldr	r3, [pc, #360]	@ (8002c8c <HAL_RCC_ClockConfig+0x1f0>)
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d121      	bne.n	8002b72 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8002b2e:	2301      	movs	r3, #1
 8002b30:	e0a6      	b.n	8002c80 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	685b      	ldr	r3, [r3, #4]
 8002b36:	2b02      	cmp	r3, #2
 8002b38:	d107      	bne.n	8002b4a <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002b3a:	4b54      	ldr	r3, [pc, #336]	@ (8002c8c <HAL_RCC_ClockConfig+0x1f0>)
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d115      	bne.n	8002b72 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002b46:	2301      	movs	r3, #1
 8002b48:	e09a      	b.n	8002c80 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	685b      	ldr	r3, [r3, #4]
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d107      	bne.n	8002b62 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002b52:	4b4e      	ldr	r3, [pc, #312]	@ (8002c8c <HAL_RCC_ClockConfig+0x1f0>)
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	f003 0302 	and.w	r3, r3, #2
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d109      	bne.n	8002b72 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002b5e:	2301      	movs	r3, #1
 8002b60:	e08e      	b.n	8002c80 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002b62:	4b4a      	ldr	r3, [pc, #296]	@ (8002c8c <HAL_RCC_ClockConfig+0x1f0>)
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d101      	bne.n	8002b72 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002b6e:	2301      	movs	r3, #1
 8002b70:	e086      	b.n	8002c80 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002b72:	4b46      	ldr	r3, [pc, #280]	@ (8002c8c <HAL_RCC_ClockConfig+0x1f0>)
 8002b74:	689b      	ldr	r3, [r3, #8]
 8002b76:	f023 0203 	bic.w	r2, r3, #3
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	685b      	ldr	r3, [r3, #4]
 8002b7e:	4943      	ldr	r1, [pc, #268]	@ (8002c8c <HAL_RCC_ClockConfig+0x1f0>)
 8002b80:	4313      	orrs	r3, r2
 8002b82:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002b84:	f7fe fd8a 	bl	800169c <HAL_GetTick>
 8002b88:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002b8a:	e00a      	b.n	8002ba2 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002b8c:	f7fe fd86 	bl	800169c <HAL_GetTick>
 8002b90:	4602      	mov	r2, r0
 8002b92:	68fb      	ldr	r3, [r7, #12]
 8002b94:	1ad3      	subs	r3, r2, r3
 8002b96:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002b9a:	4293      	cmp	r3, r2
 8002b9c:	d901      	bls.n	8002ba2 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8002b9e:	2303      	movs	r3, #3
 8002ba0:	e06e      	b.n	8002c80 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002ba2:	4b3a      	ldr	r3, [pc, #232]	@ (8002c8c <HAL_RCC_ClockConfig+0x1f0>)
 8002ba4:	689b      	ldr	r3, [r3, #8]
 8002ba6:	f003 020c 	and.w	r2, r3, #12
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	685b      	ldr	r3, [r3, #4]
 8002bae:	009b      	lsls	r3, r3, #2
 8002bb0:	429a      	cmp	r2, r3
 8002bb2:	d1eb      	bne.n	8002b8c <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	f003 0302 	and.w	r3, r3, #2
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	d010      	beq.n	8002be2 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	689a      	ldr	r2, [r3, #8]
 8002bc4:	4b31      	ldr	r3, [pc, #196]	@ (8002c8c <HAL_RCC_ClockConfig+0x1f0>)
 8002bc6:	689b      	ldr	r3, [r3, #8]
 8002bc8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002bcc:	429a      	cmp	r2, r3
 8002bce:	d208      	bcs.n	8002be2 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002bd0:	4b2e      	ldr	r3, [pc, #184]	@ (8002c8c <HAL_RCC_ClockConfig+0x1f0>)
 8002bd2:	689b      	ldr	r3, [r3, #8]
 8002bd4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	689b      	ldr	r3, [r3, #8]
 8002bdc:	492b      	ldr	r1, [pc, #172]	@ (8002c8c <HAL_RCC_ClockConfig+0x1f0>)
 8002bde:	4313      	orrs	r3, r2
 8002be0:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002be2:	4b29      	ldr	r3, [pc, #164]	@ (8002c88 <HAL_RCC_ClockConfig+0x1ec>)
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	f003 0307 	and.w	r3, r3, #7
 8002bea:	683a      	ldr	r2, [r7, #0]
 8002bec:	429a      	cmp	r2, r3
 8002bee:	d210      	bcs.n	8002c12 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002bf0:	4b25      	ldr	r3, [pc, #148]	@ (8002c88 <HAL_RCC_ClockConfig+0x1ec>)
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	f023 0207 	bic.w	r2, r3, #7
 8002bf8:	4923      	ldr	r1, [pc, #140]	@ (8002c88 <HAL_RCC_ClockConfig+0x1ec>)
 8002bfa:	683b      	ldr	r3, [r7, #0]
 8002bfc:	4313      	orrs	r3, r2
 8002bfe:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002c00:	4b21      	ldr	r3, [pc, #132]	@ (8002c88 <HAL_RCC_ClockConfig+0x1ec>)
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	f003 0307 	and.w	r3, r3, #7
 8002c08:	683a      	ldr	r2, [r7, #0]
 8002c0a:	429a      	cmp	r2, r3
 8002c0c:	d001      	beq.n	8002c12 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8002c0e:	2301      	movs	r3, #1
 8002c10:	e036      	b.n	8002c80 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	f003 0304 	and.w	r3, r3, #4
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d008      	beq.n	8002c30 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002c1e:	4b1b      	ldr	r3, [pc, #108]	@ (8002c8c <HAL_RCC_ClockConfig+0x1f0>)
 8002c20:	689b      	ldr	r3, [r3, #8]
 8002c22:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	68db      	ldr	r3, [r3, #12]
 8002c2a:	4918      	ldr	r1, [pc, #96]	@ (8002c8c <HAL_RCC_ClockConfig+0x1f0>)
 8002c2c:	4313      	orrs	r3, r2
 8002c2e:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	f003 0308 	and.w	r3, r3, #8
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	d009      	beq.n	8002c50 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002c3c:	4b13      	ldr	r3, [pc, #76]	@ (8002c8c <HAL_RCC_ClockConfig+0x1f0>)
 8002c3e:	689b      	ldr	r3, [r3, #8]
 8002c40:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	691b      	ldr	r3, [r3, #16]
 8002c48:	00db      	lsls	r3, r3, #3
 8002c4a:	4910      	ldr	r1, [pc, #64]	@ (8002c8c <HAL_RCC_ClockConfig+0x1f0>)
 8002c4c:	4313      	orrs	r3, r2
 8002c4e:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002c50:	f000 f824 	bl	8002c9c <HAL_RCC_GetSysClockFreq>
 8002c54:	4602      	mov	r2, r0
 8002c56:	4b0d      	ldr	r3, [pc, #52]	@ (8002c8c <HAL_RCC_ClockConfig+0x1f0>)
 8002c58:	689b      	ldr	r3, [r3, #8]
 8002c5a:	091b      	lsrs	r3, r3, #4
 8002c5c:	f003 030f 	and.w	r3, r3, #15
 8002c60:	490b      	ldr	r1, [pc, #44]	@ (8002c90 <HAL_RCC_ClockConfig+0x1f4>)
 8002c62:	5ccb      	ldrb	r3, [r1, r3]
 8002c64:	f003 031f 	and.w	r3, r3, #31
 8002c68:	fa22 f303 	lsr.w	r3, r2, r3
 8002c6c:	4a09      	ldr	r2, [pc, #36]	@ (8002c94 <HAL_RCC_ClockConfig+0x1f8>)
 8002c6e:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002c70:	4b09      	ldr	r3, [pc, #36]	@ (8002c98 <HAL_RCC_ClockConfig+0x1fc>)
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	4618      	mov	r0, r3
 8002c76:	f7fe fcc1 	bl	80015fc <HAL_InitTick>
 8002c7a:	4603      	mov	r3, r0
 8002c7c:	72fb      	strb	r3, [r7, #11]

  return status;
 8002c7e:	7afb      	ldrb	r3, [r7, #11]
}
 8002c80:	4618      	mov	r0, r3
 8002c82:	3710      	adds	r7, #16
 8002c84:	46bd      	mov	sp, r7
 8002c86:	bd80      	pop	{r7, pc}
 8002c88:	40022000 	.word	0x40022000
 8002c8c:	40021000 	.word	0x40021000
 8002c90:	080059b4 	.word	0x080059b4
 8002c94:	20000000 	.word	0x20000000
 8002c98:	20000004 	.word	0x20000004

08002c9c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002c9c:	b480      	push	{r7}
 8002c9e:	b089      	sub	sp, #36	@ 0x24
 8002ca0:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8002ca2:	2300      	movs	r3, #0
 8002ca4:	61fb      	str	r3, [r7, #28]
 8002ca6:	2300      	movs	r3, #0
 8002ca8:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002caa:	4b3e      	ldr	r3, [pc, #248]	@ (8002da4 <HAL_RCC_GetSysClockFreq+0x108>)
 8002cac:	689b      	ldr	r3, [r3, #8]
 8002cae:	f003 030c 	and.w	r3, r3, #12
 8002cb2:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002cb4:	4b3b      	ldr	r3, [pc, #236]	@ (8002da4 <HAL_RCC_GetSysClockFreq+0x108>)
 8002cb6:	68db      	ldr	r3, [r3, #12]
 8002cb8:	f003 0303 	and.w	r3, r3, #3
 8002cbc:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002cbe:	693b      	ldr	r3, [r7, #16]
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	d005      	beq.n	8002cd0 <HAL_RCC_GetSysClockFreq+0x34>
 8002cc4:	693b      	ldr	r3, [r7, #16]
 8002cc6:	2b0c      	cmp	r3, #12
 8002cc8:	d121      	bne.n	8002d0e <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8002cca:	68fb      	ldr	r3, [r7, #12]
 8002ccc:	2b01      	cmp	r3, #1
 8002cce:	d11e      	bne.n	8002d0e <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002cd0:	4b34      	ldr	r3, [pc, #208]	@ (8002da4 <HAL_RCC_GetSysClockFreq+0x108>)
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	f003 0308 	and.w	r3, r3, #8
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	d107      	bne.n	8002cec <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002cdc:	4b31      	ldr	r3, [pc, #196]	@ (8002da4 <HAL_RCC_GetSysClockFreq+0x108>)
 8002cde:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002ce2:	0a1b      	lsrs	r3, r3, #8
 8002ce4:	f003 030f 	and.w	r3, r3, #15
 8002ce8:	61fb      	str	r3, [r7, #28]
 8002cea:	e005      	b.n	8002cf8 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002cec:	4b2d      	ldr	r3, [pc, #180]	@ (8002da4 <HAL_RCC_GetSysClockFreq+0x108>)
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	091b      	lsrs	r3, r3, #4
 8002cf2:	f003 030f 	and.w	r3, r3, #15
 8002cf6:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002cf8:	4a2b      	ldr	r2, [pc, #172]	@ (8002da8 <HAL_RCC_GetSysClockFreq+0x10c>)
 8002cfa:	69fb      	ldr	r3, [r7, #28]
 8002cfc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002d00:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002d02:	693b      	ldr	r3, [r7, #16]
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	d10d      	bne.n	8002d24 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002d08:	69fb      	ldr	r3, [r7, #28]
 8002d0a:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002d0c:	e00a      	b.n	8002d24 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8002d0e:	693b      	ldr	r3, [r7, #16]
 8002d10:	2b04      	cmp	r3, #4
 8002d12:	d102      	bne.n	8002d1a <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002d14:	4b25      	ldr	r3, [pc, #148]	@ (8002dac <HAL_RCC_GetSysClockFreq+0x110>)
 8002d16:	61bb      	str	r3, [r7, #24]
 8002d18:	e004      	b.n	8002d24 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8002d1a:	693b      	ldr	r3, [r7, #16]
 8002d1c:	2b08      	cmp	r3, #8
 8002d1e:	d101      	bne.n	8002d24 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002d20:	4b23      	ldr	r3, [pc, #140]	@ (8002db0 <HAL_RCC_GetSysClockFreq+0x114>)
 8002d22:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002d24:	693b      	ldr	r3, [r7, #16]
 8002d26:	2b0c      	cmp	r3, #12
 8002d28:	d134      	bne.n	8002d94 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002d2a:	4b1e      	ldr	r3, [pc, #120]	@ (8002da4 <HAL_RCC_GetSysClockFreq+0x108>)
 8002d2c:	68db      	ldr	r3, [r3, #12]
 8002d2e:	f003 0303 	and.w	r3, r3, #3
 8002d32:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002d34:	68bb      	ldr	r3, [r7, #8]
 8002d36:	2b02      	cmp	r3, #2
 8002d38:	d003      	beq.n	8002d42 <HAL_RCC_GetSysClockFreq+0xa6>
 8002d3a:	68bb      	ldr	r3, [r7, #8]
 8002d3c:	2b03      	cmp	r3, #3
 8002d3e:	d003      	beq.n	8002d48 <HAL_RCC_GetSysClockFreq+0xac>
 8002d40:	e005      	b.n	8002d4e <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8002d42:	4b1a      	ldr	r3, [pc, #104]	@ (8002dac <HAL_RCC_GetSysClockFreq+0x110>)
 8002d44:	617b      	str	r3, [r7, #20]
      break;
 8002d46:	e005      	b.n	8002d54 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002d48:	4b19      	ldr	r3, [pc, #100]	@ (8002db0 <HAL_RCC_GetSysClockFreq+0x114>)
 8002d4a:	617b      	str	r3, [r7, #20]
      break;
 8002d4c:	e002      	b.n	8002d54 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8002d4e:	69fb      	ldr	r3, [r7, #28]
 8002d50:	617b      	str	r3, [r7, #20]
      break;
 8002d52:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002d54:	4b13      	ldr	r3, [pc, #76]	@ (8002da4 <HAL_RCC_GetSysClockFreq+0x108>)
 8002d56:	68db      	ldr	r3, [r3, #12]
 8002d58:	091b      	lsrs	r3, r3, #4
 8002d5a:	f003 0307 	and.w	r3, r3, #7
 8002d5e:	3301      	adds	r3, #1
 8002d60:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002d62:	4b10      	ldr	r3, [pc, #64]	@ (8002da4 <HAL_RCC_GetSysClockFreq+0x108>)
 8002d64:	68db      	ldr	r3, [r3, #12]
 8002d66:	0a1b      	lsrs	r3, r3, #8
 8002d68:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002d6c:	697a      	ldr	r2, [r7, #20]
 8002d6e:	fb03 f202 	mul.w	r2, r3, r2
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d78:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002d7a:	4b0a      	ldr	r3, [pc, #40]	@ (8002da4 <HAL_RCC_GetSysClockFreq+0x108>)
 8002d7c:	68db      	ldr	r3, [r3, #12]
 8002d7e:	0e5b      	lsrs	r3, r3, #25
 8002d80:	f003 0303 	and.w	r3, r3, #3
 8002d84:	3301      	adds	r3, #1
 8002d86:	005b      	lsls	r3, r3, #1
 8002d88:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8002d8a:	697a      	ldr	r2, [r7, #20]
 8002d8c:	683b      	ldr	r3, [r7, #0]
 8002d8e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d92:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002d94:	69bb      	ldr	r3, [r7, #24]
}
 8002d96:	4618      	mov	r0, r3
 8002d98:	3724      	adds	r7, #36	@ 0x24
 8002d9a:	46bd      	mov	sp, r7
 8002d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002da0:	4770      	bx	lr
 8002da2:	bf00      	nop
 8002da4:	40021000 	.word	0x40021000
 8002da8:	080059cc 	.word	0x080059cc
 8002dac:	00f42400 	.word	0x00f42400
 8002db0:	007a1200 	.word	0x007a1200

08002db4 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002db4:	b480      	push	{r7}
 8002db6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002db8:	4b03      	ldr	r3, [pc, #12]	@ (8002dc8 <HAL_RCC_GetHCLKFreq+0x14>)
 8002dba:	681b      	ldr	r3, [r3, #0]
}
 8002dbc:	4618      	mov	r0, r3
 8002dbe:	46bd      	mov	sp, r7
 8002dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dc4:	4770      	bx	lr
 8002dc6:	bf00      	nop
 8002dc8:	20000000 	.word	0x20000000

08002dcc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002dcc:	b580      	push	{r7, lr}
 8002dce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002dd0:	f7ff fff0 	bl	8002db4 <HAL_RCC_GetHCLKFreq>
 8002dd4:	4602      	mov	r2, r0
 8002dd6:	4b06      	ldr	r3, [pc, #24]	@ (8002df0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002dd8:	689b      	ldr	r3, [r3, #8]
 8002dda:	0a1b      	lsrs	r3, r3, #8
 8002ddc:	f003 0307 	and.w	r3, r3, #7
 8002de0:	4904      	ldr	r1, [pc, #16]	@ (8002df4 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002de2:	5ccb      	ldrb	r3, [r1, r3]
 8002de4:	f003 031f 	and.w	r3, r3, #31
 8002de8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002dec:	4618      	mov	r0, r3
 8002dee:	bd80      	pop	{r7, pc}
 8002df0:	40021000 	.word	0x40021000
 8002df4:	080059c4 	.word	0x080059c4

08002df8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002df8:	b580      	push	{r7, lr}
 8002dfa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002dfc:	f7ff ffda 	bl	8002db4 <HAL_RCC_GetHCLKFreq>
 8002e00:	4602      	mov	r2, r0
 8002e02:	4b06      	ldr	r3, [pc, #24]	@ (8002e1c <HAL_RCC_GetPCLK2Freq+0x24>)
 8002e04:	689b      	ldr	r3, [r3, #8]
 8002e06:	0adb      	lsrs	r3, r3, #11
 8002e08:	f003 0307 	and.w	r3, r3, #7
 8002e0c:	4904      	ldr	r1, [pc, #16]	@ (8002e20 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002e0e:	5ccb      	ldrb	r3, [r1, r3]
 8002e10:	f003 031f 	and.w	r3, r3, #31
 8002e14:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002e18:	4618      	mov	r0, r3
 8002e1a:	bd80      	pop	{r7, pc}
 8002e1c:	40021000 	.word	0x40021000
 8002e20:	080059c4 	.word	0x080059c4

08002e24 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002e24:	b580      	push	{r7, lr}
 8002e26:	b086      	sub	sp, #24
 8002e28:	af00      	add	r7, sp, #0
 8002e2a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002e2c:	2300      	movs	r3, #0
 8002e2e:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002e30:	4b2a      	ldr	r3, [pc, #168]	@ (8002edc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002e32:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002e34:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	d003      	beq.n	8002e44 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002e3c:	f7ff f9b6 	bl	80021ac <HAL_PWREx_GetVoltageRange>
 8002e40:	6178      	str	r0, [r7, #20]
 8002e42:	e014      	b.n	8002e6e <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002e44:	4b25      	ldr	r3, [pc, #148]	@ (8002edc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002e46:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002e48:	4a24      	ldr	r2, [pc, #144]	@ (8002edc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002e4a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002e4e:	6593      	str	r3, [r2, #88]	@ 0x58
 8002e50:	4b22      	ldr	r3, [pc, #136]	@ (8002edc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002e52:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002e54:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002e58:	60fb      	str	r3, [r7, #12]
 8002e5a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002e5c:	f7ff f9a6 	bl	80021ac <HAL_PWREx_GetVoltageRange>
 8002e60:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8002e62:	4b1e      	ldr	r3, [pc, #120]	@ (8002edc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002e64:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002e66:	4a1d      	ldr	r2, [pc, #116]	@ (8002edc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002e68:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002e6c:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002e6e:	697b      	ldr	r3, [r7, #20]
 8002e70:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002e74:	d10b      	bne.n	8002e8e <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	2b80      	cmp	r3, #128	@ 0x80
 8002e7a:	d919      	bls.n	8002eb0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	2ba0      	cmp	r3, #160	@ 0xa0
 8002e80:	d902      	bls.n	8002e88 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002e82:	2302      	movs	r3, #2
 8002e84:	613b      	str	r3, [r7, #16]
 8002e86:	e013      	b.n	8002eb0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002e88:	2301      	movs	r3, #1
 8002e8a:	613b      	str	r3, [r7, #16]
 8002e8c:	e010      	b.n	8002eb0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	2b80      	cmp	r3, #128	@ 0x80
 8002e92:	d902      	bls.n	8002e9a <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8002e94:	2303      	movs	r3, #3
 8002e96:	613b      	str	r3, [r7, #16]
 8002e98:	e00a      	b.n	8002eb0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	2b80      	cmp	r3, #128	@ 0x80
 8002e9e:	d102      	bne.n	8002ea6 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002ea0:	2302      	movs	r3, #2
 8002ea2:	613b      	str	r3, [r7, #16]
 8002ea4:	e004      	b.n	8002eb0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	2b70      	cmp	r3, #112	@ 0x70
 8002eaa:	d101      	bne.n	8002eb0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002eac:	2301      	movs	r3, #1
 8002eae:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002eb0:	4b0b      	ldr	r3, [pc, #44]	@ (8002ee0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	f023 0207 	bic.w	r2, r3, #7
 8002eb8:	4909      	ldr	r1, [pc, #36]	@ (8002ee0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002eba:	693b      	ldr	r3, [r7, #16]
 8002ebc:	4313      	orrs	r3, r2
 8002ebe:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002ec0:	4b07      	ldr	r3, [pc, #28]	@ (8002ee0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	f003 0307 	and.w	r3, r3, #7
 8002ec8:	693a      	ldr	r2, [r7, #16]
 8002eca:	429a      	cmp	r2, r3
 8002ecc:	d001      	beq.n	8002ed2 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8002ece:	2301      	movs	r3, #1
 8002ed0:	e000      	b.n	8002ed4 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8002ed2:	2300      	movs	r3, #0
}
 8002ed4:	4618      	mov	r0, r3
 8002ed6:	3718      	adds	r7, #24
 8002ed8:	46bd      	mov	sp, r7
 8002eda:	bd80      	pop	{r7, pc}
 8002edc:	40021000 	.word	0x40021000
 8002ee0:	40022000 	.word	0x40022000

08002ee4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002ee4:	b580      	push	{r7, lr}
 8002ee6:	b086      	sub	sp, #24
 8002ee8:	af00      	add	r7, sp, #0
 8002eea:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002eec:	2300      	movs	r3, #0
 8002eee:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002ef0:	2300      	movs	r3, #0
 8002ef2:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	d031      	beq.n	8002f64 <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002f04:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8002f08:	d01a      	beq.n	8002f40 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 8002f0a:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8002f0e:	d814      	bhi.n	8002f3a <HAL_RCCEx_PeriphCLKConfig+0x56>
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	d009      	beq.n	8002f28 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8002f14:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8002f18:	d10f      	bne.n	8002f3a <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 8002f1a:	4b5d      	ldr	r3, [pc, #372]	@ (8003090 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002f1c:	68db      	ldr	r3, [r3, #12]
 8002f1e:	4a5c      	ldr	r2, [pc, #368]	@ (8003090 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002f20:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002f24:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002f26:	e00c      	b.n	8002f42 <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	3304      	adds	r3, #4
 8002f2c:	2100      	movs	r1, #0
 8002f2e:	4618      	mov	r0, r3
 8002f30:	f000 f9de 	bl	80032f0 <RCCEx_PLLSAI1_Config>
 8002f34:	4603      	mov	r3, r0
 8002f36:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002f38:	e003      	b.n	8002f42 <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002f3a:	2301      	movs	r3, #1
 8002f3c:	74fb      	strb	r3, [r7, #19]
      break;
 8002f3e:	e000      	b.n	8002f42 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 8002f40:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002f42:	7cfb      	ldrb	r3, [r7, #19]
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	d10b      	bne.n	8002f60 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002f48:	4b51      	ldr	r3, [pc, #324]	@ (8003090 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002f4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002f4e:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002f56:	494e      	ldr	r1, [pc, #312]	@ (8003090 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002f58:	4313      	orrs	r3, r2
 8002f5a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8002f5e:	e001      	b.n	8002f64 <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002f60:	7cfb      	ldrb	r3, [r7, #19]
 8002f62:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	f000 809e 	beq.w	80030ae <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002f72:	2300      	movs	r3, #0
 8002f74:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002f76:	4b46      	ldr	r3, [pc, #280]	@ (8003090 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002f78:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002f7a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d101      	bne.n	8002f86 <HAL_RCCEx_PeriphCLKConfig+0xa2>
 8002f82:	2301      	movs	r3, #1
 8002f84:	e000      	b.n	8002f88 <HAL_RCCEx_PeriphCLKConfig+0xa4>
 8002f86:	2300      	movs	r3, #0
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	d00d      	beq.n	8002fa8 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002f8c:	4b40      	ldr	r3, [pc, #256]	@ (8003090 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002f8e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002f90:	4a3f      	ldr	r2, [pc, #252]	@ (8003090 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002f92:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002f96:	6593      	str	r3, [r2, #88]	@ 0x58
 8002f98:	4b3d      	ldr	r3, [pc, #244]	@ (8003090 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002f9a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002f9c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002fa0:	60bb      	str	r3, [r7, #8]
 8002fa2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002fa4:	2301      	movs	r3, #1
 8002fa6:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002fa8:	4b3a      	ldr	r3, [pc, #232]	@ (8003094 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	4a39      	ldr	r2, [pc, #228]	@ (8003094 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8002fae:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002fb2:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002fb4:	f7fe fb72 	bl	800169c <HAL_GetTick>
 8002fb8:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002fba:	e009      	b.n	8002fd0 <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002fbc:	f7fe fb6e 	bl	800169c <HAL_GetTick>
 8002fc0:	4602      	mov	r2, r0
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	1ad3      	subs	r3, r2, r3
 8002fc6:	2b02      	cmp	r3, #2
 8002fc8:	d902      	bls.n	8002fd0 <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 8002fca:	2303      	movs	r3, #3
 8002fcc:	74fb      	strb	r3, [r7, #19]
        break;
 8002fce:	e005      	b.n	8002fdc <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002fd0:	4b30      	ldr	r3, [pc, #192]	@ (8003094 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	d0ef      	beq.n	8002fbc <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 8002fdc:	7cfb      	ldrb	r3, [r7, #19]
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d15a      	bne.n	8003098 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002fe2:	4b2b      	ldr	r3, [pc, #172]	@ (8003090 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002fe4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002fe8:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002fec:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002fee:	697b      	ldr	r3, [r7, #20]
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	d01e      	beq.n	8003032 <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002ff8:	697a      	ldr	r2, [r7, #20]
 8002ffa:	429a      	cmp	r2, r3
 8002ffc:	d019      	beq.n	8003032 <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002ffe:	4b24      	ldr	r3, [pc, #144]	@ (8003090 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003000:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003004:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003008:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800300a:	4b21      	ldr	r3, [pc, #132]	@ (8003090 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800300c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003010:	4a1f      	ldr	r2, [pc, #124]	@ (8003090 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003012:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003016:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800301a:	4b1d      	ldr	r3, [pc, #116]	@ (8003090 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800301c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003020:	4a1b      	ldr	r2, [pc, #108]	@ (8003090 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003022:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003026:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800302a:	4a19      	ldr	r2, [pc, #100]	@ (8003090 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800302c:	697b      	ldr	r3, [r7, #20]
 800302e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003032:	697b      	ldr	r3, [r7, #20]
 8003034:	f003 0301 	and.w	r3, r3, #1
 8003038:	2b00      	cmp	r3, #0
 800303a:	d016      	beq.n	800306a <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800303c:	f7fe fb2e 	bl	800169c <HAL_GetTick>
 8003040:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003042:	e00b      	b.n	800305c <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003044:	f7fe fb2a 	bl	800169c <HAL_GetTick>
 8003048:	4602      	mov	r2, r0
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	1ad3      	subs	r3, r2, r3
 800304e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003052:	4293      	cmp	r3, r2
 8003054:	d902      	bls.n	800305c <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 8003056:	2303      	movs	r3, #3
 8003058:	74fb      	strb	r3, [r7, #19]
            break;
 800305a:	e006      	b.n	800306a <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800305c:	4b0c      	ldr	r3, [pc, #48]	@ (8003090 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800305e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003062:	f003 0302 	and.w	r3, r3, #2
 8003066:	2b00      	cmp	r3, #0
 8003068:	d0ec      	beq.n	8003044 <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 800306a:	7cfb      	ldrb	r3, [r7, #19]
 800306c:	2b00      	cmp	r3, #0
 800306e:	d10b      	bne.n	8003088 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003070:	4b07      	ldr	r3, [pc, #28]	@ (8003090 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003072:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003076:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800307e:	4904      	ldr	r1, [pc, #16]	@ (8003090 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003080:	4313      	orrs	r3, r2
 8003082:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8003086:	e009      	b.n	800309c <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003088:	7cfb      	ldrb	r3, [r7, #19]
 800308a:	74bb      	strb	r3, [r7, #18]
 800308c:	e006      	b.n	800309c <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 800308e:	bf00      	nop
 8003090:	40021000 	.word	0x40021000
 8003094:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003098:	7cfb      	ldrb	r3, [r7, #19]
 800309a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800309c:	7c7b      	ldrb	r3, [r7, #17]
 800309e:	2b01      	cmp	r3, #1
 80030a0:	d105      	bne.n	80030ae <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80030a2:	4b8a      	ldr	r3, [pc, #552]	@ (80032cc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80030a4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80030a6:	4a89      	ldr	r2, [pc, #548]	@ (80032cc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80030a8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80030ac:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	f003 0301 	and.w	r3, r3, #1
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d00a      	beq.n	80030d0 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80030ba:	4b84      	ldr	r3, [pc, #528]	@ (80032cc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80030bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80030c0:	f023 0203 	bic.w	r2, r3, #3
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	6a1b      	ldr	r3, [r3, #32]
 80030c8:	4980      	ldr	r1, [pc, #512]	@ (80032cc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80030ca:	4313      	orrs	r3, r2
 80030cc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	f003 0302 	and.w	r3, r3, #2
 80030d8:	2b00      	cmp	r3, #0
 80030da:	d00a      	beq.n	80030f2 <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80030dc:	4b7b      	ldr	r3, [pc, #492]	@ (80032cc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80030de:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80030e2:	f023 020c 	bic.w	r2, r3, #12
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80030ea:	4978      	ldr	r1, [pc, #480]	@ (80032cc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80030ec:	4313      	orrs	r3, r2
 80030ee:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	f003 0320 	and.w	r3, r3, #32
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d00a      	beq.n	8003114 <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80030fe:	4b73      	ldr	r3, [pc, #460]	@ (80032cc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003100:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003104:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800310c:	496f      	ldr	r1, [pc, #444]	@ (80032cc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800310e:	4313      	orrs	r3, r2
 8003110:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800311c:	2b00      	cmp	r3, #0
 800311e:	d00a      	beq.n	8003136 <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003120:	4b6a      	ldr	r3, [pc, #424]	@ (80032cc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003122:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003126:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800312e:	4967      	ldr	r1, [pc, #412]	@ (80032cc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003130:	4313      	orrs	r3, r2
 8003132:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800313e:	2b00      	cmp	r3, #0
 8003140:	d00a      	beq.n	8003158 <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003142:	4b62      	ldr	r3, [pc, #392]	@ (80032cc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003144:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003148:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003150:	495e      	ldr	r1, [pc, #376]	@ (80032cc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003152:	4313      	orrs	r3, r2
 8003154:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003160:	2b00      	cmp	r3, #0
 8003162:	d00a      	beq.n	800317a <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003164:	4b59      	ldr	r3, [pc, #356]	@ (80032cc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003166:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800316a:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003172:	4956      	ldr	r1, [pc, #344]	@ (80032cc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003174:	4313      	orrs	r3, r2
 8003176:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003182:	2b00      	cmp	r3, #0
 8003184:	d00a      	beq.n	800319c <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003186:	4b51      	ldr	r3, [pc, #324]	@ (80032cc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003188:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800318c:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003194:	494d      	ldr	r1, [pc, #308]	@ (80032cc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003196:	4313      	orrs	r3, r2
 8003198:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	d028      	beq.n	80031fa <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80031a8:	4b48      	ldr	r3, [pc, #288]	@ (80032cc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80031aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80031ae:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80031b6:	4945      	ldr	r1, [pc, #276]	@ (80032cc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80031b8:	4313      	orrs	r3, r2
 80031ba:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80031c2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80031c6:	d106      	bne.n	80031d6 <HAL_RCCEx_PeriphCLKConfig+0x2f2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80031c8:	4b40      	ldr	r3, [pc, #256]	@ (80032cc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80031ca:	68db      	ldr	r3, [r3, #12]
 80031cc:	4a3f      	ldr	r2, [pc, #252]	@ (80032cc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80031ce:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80031d2:	60d3      	str	r3, [r2, #12]
 80031d4:	e011      	b.n	80031fa <HAL_RCCEx_PeriphCLKConfig+0x316>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80031da:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80031de:	d10c      	bne.n	80031fa <HAL_RCCEx_PeriphCLKConfig+0x316>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	3304      	adds	r3, #4
 80031e4:	2101      	movs	r1, #1
 80031e6:	4618      	mov	r0, r3
 80031e8:	f000 f882 	bl	80032f0 <RCCEx_PLLSAI1_Config>
 80031ec:	4603      	mov	r3, r0
 80031ee:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80031f0:	7cfb      	ldrb	r3, [r7, #19]
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d001      	beq.n	80031fa <HAL_RCCEx_PeriphCLKConfig+0x316>
        {
          /* set overall return value */
          status = ret;
 80031f6:	7cfb      	ldrb	r3, [r7, #19]
 80031f8:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003202:	2b00      	cmp	r3, #0
 8003204:	d028      	beq.n	8003258 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003206:	4b31      	ldr	r3, [pc, #196]	@ (80032cc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003208:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800320c:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003214:	492d      	ldr	r1, [pc, #180]	@ (80032cc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003216:	4313      	orrs	r3, r2
 8003218:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003220:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003224:	d106      	bne.n	8003234 <HAL_RCCEx_PeriphCLKConfig+0x350>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003226:	4b29      	ldr	r3, [pc, #164]	@ (80032cc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003228:	68db      	ldr	r3, [r3, #12]
 800322a:	4a28      	ldr	r2, [pc, #160]	@ (80032cc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800322c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003230:	60d3      	str	r3, [r2, #12]
 8003232:	e011      	b.n	8003258 <HAL_RCCEx_PeriphCLKConfig+0x374>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003238:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800323c:	d10c      	bne.n	8003258 <HAL_RCCEx_PeriphCLKConfig+0x374>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	3304      	adds	r3, #4
 8003242:	2101      	movs	r1, #1
 8003244:	4618      	mov	r0, r3
 8003246:	f000 f853 	bl	80032f0 <RCCEx_PLLSAI1_Config>
 800324a:	4603      	mov	r3, r0
 800324c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800324e:	7cfb      	ldrb	r3, [r7, #19]
 8003250:	2b00      	cmp	r3, #0
 8003252:	d001      	beq.n	8003258 <HAL_RCCEx_PeriphCLKConfig+0x374>
      {
        /* set overall return value */
        status = ret;
 8003254:	7cfb      	ldrb	r3, [r7, #19]
 8003256:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003260:	2b00      	cmp	r3, #0
 8003262:	d01c      	beq.n	800329e <HAL_RCCEx_PeriphCLKConfig+0x3ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003264:	4b19      	ldr	r3, [pc, #100]	@ (80032cc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003266:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800326a:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003272:	4916      	ldr	r1, [pc, #88]	@ (80032cc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003274:	4313      	orrs	r3, r2
 8003276:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800327e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003282:	d10c      	bne.n	800329e <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	3304      	adds	r3, #4
 8003288:	2102      	movs	r1, #2
 800328a:	4618      	mov	r0, r3
 800328c:	f000 f830 	bl	80032f0 <RCCEx_PLLSAI1_Config>
 8003290:	4603      	mov	r3, r0
 8003292:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003294:	7cfb      	ldrb	r3, [r7, #19]
 8003296:	2b00      	cmp	r3, #0
 8003298:	d001      	beq.n	800329e <HAL_RCCEx_PeriphCLKConfig+0x3ba>
      {
        /* set overall return value */
        status = ret;
 800329a:	7cfb      	ldrb	r3, [r7, #19]
 800329c:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	d00a      	beq.n	80032c0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80032aa:	4b08      	ldr	r3, [pc, #32]	@ (80032cc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80032ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80032b0:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80032b8:	4904      	ldr	r1, [pc, #16]	@ (80032cc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80032ba:	4313      	orrs	r3, r2
 80032bc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80032c0:	7cbb      	ldrb	r3, [r7, #18]
}
 80032c2:	4618      	mov	r0, r3
 80032c4:	3718      	adds	r7, #24
 80032c6:	46bd      	mov	sp, r7
 80032c8:	bd80      	pop	{r7, pc}
 80032ca:	bf00      	nop
 80032cc:	40021000 	.word	0x40021000

080032d0 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 80032d0:	b480      	push	{r7}
 80032d2:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 80032d4:	4b05      	ldr	r3, [pc, #20]	@ (80032ec <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	4a04      	ldr	r2, [pc, #16]	@ (80032ec <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 80032da:	f043 0304 	orr.w	r3, r3, #4
 80032de:	6013      	str	r3, [r2, #0]
}
 80032e0:	bf00      	nop
 80032e2:	46bd      	mov	sp, r7
 80032e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032e8:	4770      	bx	lr
 80032ea:	bf00      	nop
 80032ec:	40021000 	.word	0x40021000

080032f0 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80032f0:	b580      	push	{r7, lr}
 80032f2:	b084      	sub	sp, #16
 80032f4:	af00      	add	r7, sp, #0
 80032f6:	6078      	str	r0, [r7, #4]
 80032f8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80032fa:	2300      	movs	r3, #0
 80032fc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80032fe:	4b74      	ldr	r3, [pc, #464]	@ (80034d0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003300:	68db      	ldr	r3, [r3, #12]
 8003302:	f003 0303 	and.w	r3, r3, #3
 8003306:	2b00      	cmp	r3, #0
 8003308:	d018      	beq.n	800333c <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800330a:	4b71      	ldr	r3, [pc, #452]	@ (80034d0 <RCCEx_PLLSAI1_Config+0x1e0>)
 800330c:	68db      	ldr	r3, [r3, #12]
 800330e:	f003 0203 	and.w	r2, r3, #3
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	429a      	cmp	r2, r3
 8003318:	d10d      	bne.n	8003336 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	681b      	ldr	r3, [r3, #0]
       ||
 800331e:	2b00      	cmp	r3, #0
 8003320:	d009      	beq.n	8003336 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8003322:	4b6b      	ldr	r3, [pc, #428]	@ (80034d0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003324:	68db      	ldr	r3, [r3, #12]
 8003326:	091b      	lsrs	r3, r3, #4
 8003328:	f003 0307 	and.w	r3, r3, #7
 800332c:	1c5a      	adds	r2, r3, #1
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	685b      	ldr	r3, [r3, #4]
       ||
 8003332:	429a      	cmp	r2, r3
 8003334:	d047      	beq.n	80033c6 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8003336:	2301      	movs	r3, #1
 8003338:	73fb      	strb	r3, [r7, #15]
 800333a:	e044      	b.n	80033c6 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	2b03      	cmp	r3, #3
 8003342:	d018      	beq.n	8003376 <RCCEx_PLLSAI1_Config+0x86>
 8003344:	2b03      	cmp	r3, #3
 8003346:	d825      	bhi.n	8003394 <RCCEx_PLLSAI1_Config+0xa4>
 8003348:	2b01      	cmp	r3, #1
 800334a:	d002      	beq.n	8003352 <RCCEx_PLLSAI1_Config+0x62>
 800334c:	2b02      	cmp	r3, #2
 800334e:	d009      	beq.n	8003364 <RCCEx_PLLSAI1_Config+0x74>
 8003350:	e020      	b.n	8003394 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003352:	4b5f      	ldr	r3, [pc, #380]	@ (80034d0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	f003 0302 	and.w	r3, r3, #2
 800335a:	2b00      	cmp	r3, #0
 800335c:	d11d      	bne.n	800339a <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 800335e:	2301      	movs	r3, #1
 8003360:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003362:	e01a      	b.n	800339a <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003364:	4b5a      	ldr	r3, [pc, #360]	@ (80034d0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800336c:	2b00      	cmp	r3, #0
 800336e:	d116      	bne.n	800339e <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8003370:	2301      	movs	r3, #1
 8003372:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003374:	e013      	b.n	800339e <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003376:	4b56      	ldr	r3, [pc, #344]	@ (80034d0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800337e:	2b00      	cmp	r3, #0
 8003380:	d10f      	bne.n	80033a2 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003382:	4b53      	ldr	r3, [pc, #332]	@ (80034d0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800338a:	2b00      	cmp	r3, #0
 800338c:	d109      	bne.n	80033a2 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 800338e:	2301      	movs	r3, #1
 8003390:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003392:	e006      	b.n	80033a2 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003394:	2301      	movs	r3, #1
 8003396:	73fb      	strb	r3, [r7, #15]
      break;
 8003398:	e004      	b.n	80033a4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800339a:	bf00      	nop
 800339c:	e002      	b.n	80033a4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800339e:	bf00      	nop
 80033a0:	e000      	b.n	80033a4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80033a2:	bf00      	nop
    }

    if(status == HAL_OK)
 80033a4:	7bfb      	ldrb	r3, [r7, #15]
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	d10d      	bne.n	80033c6 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80033aa:	4b49      	ldr	r3, [pc, #292]	@ (80034d0 <RCCEx_PLLSAI1_Config+0x1e0>)
 80033ac:	68db      	ldr	r3, [r3, #12]
 80033ae:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	6819      	ldr	r1, [r3, #0]
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	685b      	ldr	r3, [r3, #4]
 80033ba:	3b01      	subs	r3, #1
 80033bc:	011b      	lsls	r3, r3, #4
 80033be:	430b      	orrs	r3, r1
 80033c0:	4943      	ldr	r1, [pc, #268]	@ (80034d0 <RCCEx_PLLSAI1_Config+0x1e0>)
 80033c2:	4313      	orrs	r3, r2
 80033c4:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80033c6:	7bfb      	ldrb	r3, [r7, #15]
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	d17c      	bne.n	80034c6 <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80033cc:	4b40      	ldr	r3, [pc, #256]	@ (80034d0 <RCCEx_PLLSAI1_Config+0x1e0>)
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	4a3f      	ldr	r2, [pc, #252]	@ (80034d0 <RCCEx_PLLSAI1_Config+0x1e0>)
 80033d2:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80033d6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80033d8:	f7fe f960 	bl	800169c <HAL_GetTick>
 80033dc:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80033de:	e009      	b.n	80033f4 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80033e0:	f7fe f95c 	bl	800169c <HAL_GetTick>
 80033e4:	4602      	mov	r2, r0
 80033e6:	68bb      	ldr	r3, [r7, #8]
 80033e8:	1ad3      	subs	r3, r2, r3
 80033ea:	2b02      	cmp	r3, #2
 80033ec:	d902      	bls.n	80033f4 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80033ee:	2303      	movs	r3, #3
 80033f0:	73fb      	strb	r3, [r7, #15]
        break;
 80033f2:	e005      	b.n	8003400 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80033f4:	4b36      	ldr	r3, [pc, #216]	@ (80034d0 <RCCEx_PLLSAI1_Config+0x1e0>)
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	d1ef      	bne.n	80033e0 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003400:	7bfb      	ldrb	r3, [r7, #15]
 8003402:	2b00      	cmp	r3, #0
 8003404:	d15f      	bne.n	80034c6 <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003406:	683b      	ldr	r3, [r7, #0]
 8003408:	2b00      	cmp	r3, #0
 800340a:	d110      	bne.n	800342e <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800340c:	4b30      	ldr	r3, [pc, #192]	@ (80034d0 <RCCEx_PLLSAI1_Config+0x1e0>)
 800340e:	691b      	ldr	r3, [r3, #16]
 8003410:	f023 4378 	bic.w	r3, r3, #4160749568	@ 0xf8000000
 8003414:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8003418:	687a      	ldr	r2, [r7, #4]
 800341a:	6892      	ldr	r2, [r2, #8]
 800341c:	0211      	lsls	r1, r2, #8
 800341e:	687a      	ldr	r2, [r7, #4]
 8003420:	68d2      	ldr	r2, [r2, #12]
 8003422:	06d2      	lsls	r2, r2, #27
 8003424:	430a      	orrs	r2, r1
 8003426:	492a      	ldr	r1, [pc, #168]	@ (80034d0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003428:	4313      	orrs	r3, r2
 800342a:	610b      	str	r3, [r1, #16]
 800342c:	e027      	b.n	800347e <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 800342e:	683b      	ldr	r3, [r7, #0]
 8003430:	2b01      	cmp	r3, #1
 8003432:	d112      	bne.n	800345a <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003434:	4b26      	ldr	r3, [pc, #152]	@ (80034d0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003436:	691b      	ldr	r3, [r3, #16]
 8003438:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 800343c:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8003440:	687a      	ldr	r2, [r7, #4]
 8003442:	6892      	ldr	r2, [r2, #8]
 8003444:	0211      	lsls	r1, r2, #8
 8003446:	687a      	ldr	r2, [r7, #4]
 8003448:	6912      	ldr	r2, [r2, #16]
 800344a:	0852      	lsrs	r2, r2, #1
 800344c:	3a01      	subs	r2, #1
 800344e:	0552      	lsls	r2, r2, #21
 8003450:	430a      	orrs	r2, r1
 8003452:	491f      	ldr	r1, [pc, #124]	@ (80034d0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003454:	4313      	orrs	r3, r2
 8003456:	610b      	str	r3, [r1, #16]
 8003458:	e011      	b.n	800347e <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800345a:	4b1d      	ldr	r3, [pc, #116]	@ (80034d0 <RCCEx_PLLSAI1_Config+0x1e0>)
 800345c:	691b      	ldr	r3, [r3, #16]
 800345e:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8003462:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8003466:	687a      	ldr	r2, [r7, #4]
 8003468:	6892      	ldr	r2, [r2, #8]
 800346a:	0211      	lsls	r1, r2, #8
 800346c:	687a      	ldr	r2, [r7, #4]
 800346e:	6952      	ldr	r2, [r2, #20]
 8003470:	0852      	lsrs	r2, r2, #1
 8003472:	3a01      	subs	r2, #1
 8003474:	0652      	lsls	r2, r2, #25
 8003476:	430a      	orrs	r2, r1
 8003478:	4915      	ldr	r1, [pc, #84]	@ (80034d0 <RCCEx_PLLSAI1_Config+0x1e0>)
 800347a:	4313      	orrs	r3, r2
 800347c:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 800347e:	4b14      	ldr	r3, [pc, #80]	@ (80034d0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	4a13      	ldr	r2, [pc, #76]	@ (80034d0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003484:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8003488:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800348a:	f7fe f907 	bl	800169c <HAL_GetTick>
 800348e:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003490:	e009      	b.n	80034a6 <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003492:	f7fe f903 	bl	800169c <HAL_GetTick>
 8003496:	4602      	mov	r2, r0
 8003498:	68bb      	ldr	r3, [r7, #8]
 800349a:	1ad3      	subs	r3, r2, r3
 800349c:	2b02      	cmp	r3, #2
 800349e:	d902      	bls.n	80034a6 <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 80034a0:	2303      	movs	r3, #3
 80034a2:	73fb      	strb	r3, [r7, #15]
          break;
 80034a4:	e005      	b.n	80034b2 <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80034a6:	4b0a      	ldr	r3, [pc, #40]	@ (80034d0 <RCCEx_PLLSAI1_Config+0x1e0>)
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d0ef      	beq.n	8003492 <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 80034b2:	7bfb      	ldrb	r3, [r7, #15]
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	d106      	bne.n	80034c6 <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80034b8:	4b05      	ldr	r3, [pc, #20]	@ (80034d0 <RCCEx_PLLSAI1_Config+0x1e0>)
 80034ba:	691a      	ldr	r2, [r3, #16]
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	699b      	ldr	r3, [r3, #24]
 80034c0:	4903      	ldr	r1, [pc, #12]	@ (80034d0 <RCCEx_PLLSAI1_Config+0x1e0>)
 80034c2:	4313      	orrs	r3, r2
 80034c4:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80034c6:	7bfb      	ldrb	r3, [r7, #15]
}
 80034c8:	4618      	mov	r0, r3
 80034ca:	3710      	adds	r7, #16
 80034cc:	46bd      	mov	sp, r7
 80034ce:	bd80      	pop	{r7, pc}
 80034d0:	40021000 	.word	0x40021000

080034d4 <HAL_RNG_Init>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RNG_Init(RNG_HandleTypeDef *hrng)
{
 80034d4:	b580      	push	{r7, lr}
 80034d6:	b084      	sub	sp, #16
 80034d8:	af00      	add	r7, sp, #0
 80034da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
#if defined(RNG_CR_CONDRST)
  uint32_t cr_value;
#endif  /* RNG_CR_CONDRST */
  /* Check the RNG handle allocation */
  if (hrng == NULL)
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d101      	bne.n	80034e6 <HAL_RNG_Init+0x12>
  {
    return HAL_ERROR;
 80034e2:	2301      	movs	r3, #1
 80034e4:	e049      	b.n	800357a <HAL_RNG_Init+0xa6>

    /* Init the low level hardware */
    hrng->MspInitCallback(hrng);
  }
#else
  if (hrng->State == HAL_RNG_STATE_RESET)
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	795b      	ldrb	r3, [r3, #5]
 80034ea:	b2db      	uxtb	r3, r3
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	d105      	bne.n	80034fc <HAL_RNG_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrng->Lock = HAL_UNLOCKED;
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	2200      	movs	r2, #0
 80034f4:	711a      	strb	r2, [r3, #4]

    /* Init the low level hardware */
    HAL_RNG_MspInit(hrng);
 80034f6:	6878      	ldr	r0, [r7, #4]
 80034f8:	f7fd fd92 	bl	8001020 <HAL_RNG_MspInit>
  }
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */

  /* Change RNG peripheral state */
  hrng->State = HAL_RNG_STATE_BUSY;
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	2202      	movs	r2, #2
 8003500:	715a      	strb	r2, [r3, #5]
  MODIFY_REG(hrng->Instance->CR, RNG_CR_CED, hrng->Init.ClockErrorDetection);
#endif /* RNG_CR_CED */
#endif /* RNG_CR_CONDRST */

  /* Enable the RNG Peripheral */
  __HAL_RNG_ENABLE(hrng);
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	681a      	ldr	r2, [r3, #0]
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	f042 0204 	orr.w	r2, r2, #4
 8003510:	601a      	str	r2, [r3, #0]

  /* verify that no seed error */
  if (__HAL_RNG_GET_IT(hrng, RNG_IT_SEI) != RESET)
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	685b      	ldr	r3, [r3, #4]
 8003518:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800351c:	2b40      	cmp	r3, #64	@ 0x40
 800351e:	d104      	bne.n	800352a <HAL_RNG_Init+0x56>
  {
    hrng->State = HAL_RNG_STATE_ERROR;
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	2204      	movs	r2, #4
 8003524:	715a      	strb	r2, [r3, #5]
    return HAL_ERROR;
 8003526:	2301      	movs	r3, #1
 8003528:	e027      	b.n	800357a <HAL_RNG_Init+0xa6>
  }
  /* Get tick */
  tickstart = HAL_GetTick();
 800352a:	f7fe f8b7 	bl	800169c <HAL_GetTick>
 800352e:	60f8      	str	r0, [r7, #12]
  /* Check if data register contains valid random data */
  while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_SECS) != RESET)
 8003530:	e015      	b.n	800355e <HAL_RNG_Init+0x8a>
  {
    if ((HAL_GetTick() - tickstart) > RNG_TIMEOUT_VALUE)
 8003532:	f7fe f8b3 	bl	800169c <HAL_GetTick>
 8003536:	4602      	mov	r2, r0
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	1ad3      	subs	r3, r2, r3
 800353c:	2b02      	cmp	r3, #2
 800353e:	d90e      	bls.n	800355e <HAL_RNG_Init+0x8a>
    {
      /* New check to avoid false timeout detection in case of preemption */
      if (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_SECS) != RESET)
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	685b      	ldr	r3, [r3, #4]
 8003546:	f003 0304 	and.w	r3, r3, #4
 800354a:	2b04      	cmp	r3, #4
 800354c:	d107      	bne.n	800355e <HAL_RNG_Init+0x8a>
      {
        hrng->State = HAL_RNG_STATE_ERROR;
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	2204      	movs	r2, #4
 8003552:	715a      	strb	r2, [r3, #5]
        hrng->ErrorCode = HAL_RNG_ERROR_TIMEOUT;
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	2202      	movs	r2, #2
 8003558:	609a      	str	r2, [r3, #8]
        return HAL_ERROR;
 800355a:	2301      	movs	r3, #1
 800355c:	e00d      	b.n	800357a <HAL_RNG_Init+0xa6>
  while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_SECS) != RESET)
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	685b      	ldr	r3, [r3, #4]
 8003564:	f003 0304 	and.w	r3, r3, #4
 8003568:	2b04      	cmp	r3, #4
 800356a:	d0e2      	beq.n	8003532 <HAL_RNG_Init+0x5e>
      }
    }
  }

  /* Initialize the RNG state */
  hrng->State = HAL_RNG_STATE_READY;
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	2201      	movs	r2, #1
 8003570:	715a      	strb	r2, [r3, #5]

  /* Initialise the error code */
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	2200      	movs	r2, #0
 8003576:	609a      	str	r2, [r3, #8]

  /* Return function status */
  return HAL_OK;
 8003578:	2300      	movs	r3, #0
}
 800357a:	4618      	mov	r0, r3
 800357c:	3710      	adds	r7, #16
 800357e:	46bd      	mov	sp, r7
 8003580:	bd80      	pop	{r7, pc}

08003582 <HAL_SMBUS_Init>:
  * @param  hsmbus Pointer to a SMBUS_HandleTypeDef structure that contains
  *                the configuration information for the specified SMBUS.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SMBUS_Init(SMBUS_HandleTypeDef *hsmbus)
{
 8003582:	b580      	push	{r7, lr}
 8003584:	b082      	sub	sp, #8
 8003586:	af00      	add	r7, sp, #0
 8003588:	6078      	str	r0, [r7, #4]
  /* Check the SMBUS handle allocation */
  if (hsmbus == NULL)
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	2b00      	cmp	r3, #0
 800358e:	d101      	bne.n	8003594 <HAL_SMBUS_Init+0x12>
  {
    return HAL_ERROR;
 8003590:	2301      	movs	r3, #1
 8003592:	e0aa      	b.n	80036ea <HAL_SMBUS_Init+0x168>
  assert_param(IS_SMBUS_GENERAL_CALL(hsmbus->Init.GeneralCallMode));
  assert_param(IS_SMBUS_NO_STRETCH(hsmbus->Init.NoStretchMode));
  assert_param(IS_SMBUS_PEC(hsmbus->Init.PacketErrorCheckMode));
  assert_param(IS_SMBUS_PERIPHERAL_MODE(hsmbus->Init.PeripheralMode));

  if (hsmbus->State == HAL_SMBUS_STATE_RESET)
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003598:	2b00      	cmp	r3, #0
 800359a:	d106      	bne.n	80035aa <HAL_SMBUS_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hsmbus->Lock = HAL_UNLOCKED;
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	2200      	movs	r2, #0
 80035a0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hsmbus->MspInitCallback(hsmbus);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_SMBUS_MspInit(hsmbus);
 80035a4:	6878      	ldr	r0, [r7, #4]
 80035a6:	f7fd fc39 	bl	8000e1c <HAL_SMBUS_MspInit>
#endif /* USE_HAL_SMBUS_REGISTER_CALLBACKS */
  }

  hsmbus->State = HAL_SMBUS_STATE_BUSY;
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	2202      	movs	r2, #2
 80035ae:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Disable the selected SMBUS peripheral */
  __HAL_SMBUS_DISABLE(hsmbus);
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	681a      	ldr	r2, [r3, #0]
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	f022 0201 	bic.w	r2, r2, #1
 80035be:	601a      	str	r2, [r3, #0]

  /*---------------------------- SMBUSx TIMINGR Configuration ------------------------*/
  /* Configure SMBUSx: Frequency range */
  hsmbus->Instance->TIMINGR = hsmbus->Init.Timing & TIMING_CLEAR_MASK;
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	685a      	ldr	r2, [r3, #4]
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80035cc:	611a      	str	r2, [r3, #16]

  /*---------------------------- SMBUSx TIMEOUTR Configuration ------------------------*/
  /* Configure SMBUSx: Bus Timeout  */
  hsmbus->Instance->TIMEOUTR &= ~I2C_TIMEOUTR_TIMOUTEN;
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	695a      	ldr	r2, [r3, #20]
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80035dc:	615a      	str	r2, [r3, #20]
  hsmbus->Instance->TIMEOUTR &= ~I2C_TIMEOUTR_TEXTEN;
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	695a      	ldr	r2, [r3, #20]
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 80035ec:	615a      	str	r2, [r3, #20]
  hsmbus->Instance->TIMEOUTR = hsmbus->Init.SMBusTimeout;
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	687a      	ldr	r2, [r7, #4]
 80035f4:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80035f6:	615a      	str	r2, [r3, #20]

  /*---------------------------- SMBUSx OAR1 Configuration -----------------------*/
  /* Configure SMBUSx: Own Address1 and ack own address1 mode */
  hsmbus->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	689a      	ldr	r2, [r3, #8]
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003606:	609a      	str	r2, [r3, #8]

  if (hsmbus->Init.OwnAddress1 != 0UL)
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	68db      	ldr	r3, [r3, #12]
 800360c:	2b00      	cmp	r3, #0
 800360e:	d012      	beq.n	8003636 <HAL_SMBUS_Init+0xb4>
  {
    if (hsmbus->Init.AddressingMode == SMBUS_ADDRESSINGMODE_7BIT)
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	691b      	ldr	r3, [r3, #16]
 8003614:	2b01      	cmp	r3, #1
 8003616:	d107      	bne.n	8003628 <HAL_SMBUS_Init+0xa6>
    {
      hsmbus->Instance->OAR1 = (I2C_OAR1_OA1EN | hsmbus->Init.OwnAddress1);
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	68da      	ldr	r2, [r3, #12]
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003624:	609a      	str	r2, [r3, #8]
 8003626:	e006      	b.n	8003636 <HAL_SMBUS_Init+0xb4>
    }
    else /* SMBUS_ADDRESSINGMODE_10BIT */
    {
      hsmbus->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hsmbus->Init.OwnAddress1);
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	68da      	ldr	r2, [r3, #12]
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8003634:	609a      	str	r2, [r3, #8]
    }
  }

  /*---------------------------- SMBUSx CR2 Configuration ------------------------*/
  /* Configure SMBUSx: Addressing Master mode */
  if (hsmbus->Init.AddressingMode == SMBUS_ADDRESSINGMODE_10BIT)
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	691b      	ldr	r3, [r3, #16]
 800363a:	2b02      	cmp	r3, #2
 800363c:	d104      	bne.n	8003648 <HAL_SMBUS_Init+0xc6>
  {
    hsmbus->Instance->CR2 = (I2C_CR2_ADD10);
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8003646:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process) */
  /* AUTOEND and NACK bit will be manage during Transfer process */
  hsmbus->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	685b      	ldr	r3, [r3, #4]
 800364e:	687a      	ldr	r2, [r7, #4]
 8003650:	6812      	ldr	r2, [r2, #0]
 8003652:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8003656:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800365a:	6053      	str	r3, [r2, #4]

  /*---------------------------- SMBUSx OAR2 Configuration -----------------------*/
  /* Configure SMBUSx: Dual mode and Own Address2 */
  hsmbus->Instance->OAR2 = (hsmbus->Init.DualAddressMode | hsmbus->Init.OwnAddress2 | \
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	695a      	ldr	r2, [r3, #20]
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	699b      	ldr	r3, [r3, #24]
 8003664:	ea42 0103 	orr.w	r1, r2, r3
                            (hsmbus->Init.OwnAddress2Masks << 8U));
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	69db      	ldr	r3, [r3, #28]
 800366c:	021a      	lsls	r2, r3, #8
  hsmbus->Instance->OAR2 = (hsmbus->Init.DualAddressMode | hsmbus->Init.OwnAddress2 | \
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	430a      	orrs	r2, r1
 8003674:	60da      	str	r2, [r3, #12]

  /*---------------------------- SMBUSx CR1 Configuration ------------------------*/
  /* Configure SMBUSx: Generalcall and NoStretch mode */
  hsmbus->Instance->CR1 = (hsmbus->Init.GeneralCallMode | hsmbus->Init.NoStretchMode | \
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	6a1a      	ldr	r2, [r3, #32]
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800367e:	431a      	orrs	r2, r3
                           hsmbus->Init.PacketErrorCheckMode | hsmbus->Init.PeripheralMode | \
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
  hsmbus->Instance->CR1 = (hsmbus->Init.GeneralCallMode | hsmbus->Init.NoStretchMode | \
 8003684:	431a      	orrs	r2, r3
                           hsmbus->Init.PacketErrorCheckMode | hsmbus->Init.PeripheralMode | \
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800368a:	ea42 0103 	orr.w	r1, r2, r3
                           hsmbus->Init.AnalogFilter);
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	689a      	ldr	r2, [r3, #8]
  hsmbus->Instance->CR1 = (hsmbus->Init.GeneralCallMode | hsmbus->Init.NoStretchMode | \
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	681b      	ldr	r3, [r3, #0]
                           hsmbus->Init.PacketErrorCheckMode | hsmbus->Init.PeripheralMode | \
 8003696:	430a      	orrs	r2, r1
  hsmbus->Instance->CR1 = (hsmbus->Init.GeneralCallMode | hsmbus->Init.NoStretchMode | \
 8003698:	601a      	str	r2, [r3, #0]

  /* Enable Slave Byte Control only in case of Packet Error Check is enabled
     and SMBUS Peripheral is set in Slave mode */
  if ((hsmbus->Init.PacketErrorCheckMode == SMBUS_PEC_ENABLE) && \
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800369e:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80036a2:	d110      	bne.n	80036c6 <HAL_SMBUS_Init+0x144>
      ((hsmbus->Init.PeripheralMode == SMBUS_PERIPHERAL_MODE_SMBUS_SLAVE) || \
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
  if ((hsmbus->Init.PacketErrorCheckMode == SMBUS_PEC_ENABLE) && \
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	d004      	beq.n	80036b6 <HAL_SMBUS_Init+0x134>
       (hsmbus->Init.PeripheralMode == SMBUS_PERIPHERAL_MODE_SMBUS_SLAVE_ARP)))
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
      ((hsmbus->Init.PeripheralMode == SMBUS_PERIPHERAL_MODE_SMBUS_SLAVE) || \
 80036b0:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80036b4:	d107      	bne.n	80036c6 <HAL_SMBUS_Init+0x144>
  {
    hsmbus->Instance->CR1 |= I2C_CR1_SBC;
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	681a      	ldr	r2, [r3, #0]
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 80036c4:	601a      	str	r2, [r3, #0]
  }

  /* Enable the selected SMBUS peripheral */
  __HAL_SMBUS_ENABLE(hsmbus);
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	681a      	ldr	r2, [r3, #0]
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	f042 0201 	orr.w	r2, r2, #1
 80036d4:	601a      	str	r2, [r3, #0]

  hsmbus->ErrorCode = HAL_SMBUS_ERROR_NONE;
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	2200      	movs	r2, #0
 80036da:	64da      	str	r2, [r3, #76]	@ 0x4c
  hsmbus->PreviousState = HAL_SMBUS_STATE_READY;
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	2201      	movs	r2, #1
 80036e0:	641a      	str	r2, [r3, #64]	@ 0x40
  hsmbus->State = HAL_SMBUS_STATE_READY;
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	2201      	movs	r2, #1
 80036e6:	649a      	str	r2, [r3, #72]	@ 0x48

  return HAL_OK;
 80036e8:	2300      	movs	r3, #0
}
 80036ea:	4618      	mov	r0, r3
 80036ec:	3708      	adds	r7, #8
 80036ee:	46bd      	mov	sp, r7
 80036f0:	bd80      	pop	{r7, pc}

080036f2 <HAL_SMBUS_EnableAlert_IT>:
  * @param  hsmbus Pointer to a SMBUS_HandleTypeDef structure that contains
  *                the configuration information for the specified SMBUSx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SMBUS_EnableAlert_IT(SMBUS_HandleTypeDef *hsmbus)
{
 80036f2:	b580      	push	{r7, lr}
 80036f4:	b082      	sub	sp, #8
 80036f6:	af00      	add	r7, sp, #0
 80036f8:	6078      	str	r0, [r7, #4]
  /* Enable SMBus alert */
  hsmbus->Instance->CR1 |= I2C_CR1_ALERTEN;
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	681a      	ldr	r2, [r3, #0]
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	f442 0280 	orr.w	r2, r2, #4194304	@ 0x400000
 8003708:	601a      	str	r2, [r3, #0]

  /* Clear ALERT flag */
  __HAL_SMBUS_CLEAR_FLAG(hsmbus, SMBUS_FLAG_ALERT);
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8003712:	61da      	str	r2, [r3, #28]

  /* Enable Alert Interrupt */
  SMBUS_Enable_IRQ(hsmbus, SMBUS_IT_ALERT);
 8003714:	2180      	movs	r1, #128	@ 0x80
 8003716:	6878      	ldr	r0, [r7, #4]
 8003718:	f000 f805 	bl	8003726 <SMBUS_Enable_IRQ>

  return HAL_OK;
 800371c:	2300      	movs	r3, #0
}
 800371e:	4618      	mov	r0, r3
 8003720:	3708      	adds	r7, #8
 8003722:	46bd      	mov	sp, r7
 8003724:	bd80      	pop	{r7, pc}

08003726 <SMBUS_Enable_IRQ>:
  *                the configuration information for the specified SMBUS.
  * @param  InterruptRequest Value of @ref SMBUS_Interrupt_configuration_definition.
  * @retval HAL status
  */
static void SMBUS_Enable_IRQ(SMBUS_HandleTypeDef *hsmbus, uint32_t InterruptRequest)
{
 8003726:	b480      	push	{r7}
 8003728:	b085      	sub	sp, #20
 800372a:	af00      	add	r7, sp, #0
 800372c:	6078      	str	r0, [r7, #4]
 800372e:	6039      	str	r1, [r7, #0]
  uint32_t tmpisr = 0UL;
 8003730:	2300      	movs	r3, #0
 8003732:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & SMBUS_IT_ALERT) == SMBUS_IT_ALERT)
 8003734:	683b      	ldr	r3, [r7, #0]
 8003736:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800373a:	2b00      	cmp	r3, #0
 800373c:	d003      	beq.n	8003746 <SMBUS_Enable_IRQ+0x20>
  {
    /* Enable ERR interrupt */
    tmpisr |= SMBUS_IT_ERRI;
 800373e:	68fb      	ldr	r3, [r7, #12]
 8003740:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003744:	60fb      	str	r3, [r7, #12]
  }

  if ((InterruptRequest & SMBUS_IT_ADDR) == SMBUS_IT_ADDR)
 8003746:	683b      	ldr	r3, [r7, #0]
 8003748:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800374c:	2b38      	cmp	r3, #56	@ 0x38
 800374e:	d103      	bne.n	8003758 <SMBUS_Enable_IRQ+0x32>
  {
    /* Enable ADDR, STOP interrupt */
    tmpisr |= SMBUS_IT_ADDRI | SMBUS_IT_STOPI | SMBUS_IT_NACKI | SMBUS_IT_ERRI;
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	f043 03b8 	orr.w	r3, r3, #184	@ 0xb8
 8003756:	60fb      	str	r3, [r7, #12]
  }

  if ((InterruptRequest & SMBUS_IT_TX) == SMBUS_IT_TX)
 8003758:	683b      	ldr	r3, [r7, #0]
 800375a:	f003 03f2 	and.w	r3, r3, #242	@ 0xf2
 800375e:	2bf2      	cmp	r3, #242	@ 0xf2
 8003760:	d103      	bne.n	800376a <SMBUS_Enable_IRQ+0x44>
  {
    /* Enable ERR, TC, STOP, NACK, RXI interrupt */
    tmpisr |= SMBUS_IT_ERRI | SMBUS_IT_TCI | SMBUS_IT_STOPI | SMBUS_IT_NACKI | SMBUS_IT_TXI;
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	f043 03f2 	orr.w	r3, r3, #242	@ 0xf2
 8003768:	60fb      	str	r3, [r7, #12]
  }

  if ((InterruptRequest & SMBUS_IT_RX) == SMBUS_IT_RX)
 800376a:	683b      	ldr	r3, [r7, #0]
 800376c:	f003 03d4 	and.w	r3, r3, #212	@ 0xd4
 8003770:	2bd4      	cmp	r3, #212	@ 0xd4
 8003772:	d103      	bne.n	800377c <SMBUS_Enable_IRQ+0x56>
  {
    /* Enable ERR, TC, STOP, NACK, TXI interrupt */
    tmpisr |= SMBUS_IT_ERRI | SMBUS_IT_TCI | SMBUS_IT_STOPI | SMBUS_IT_NACKI | SMBUS_IT_RXI;
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	f043 03f4 	orr.w	r3, r3, #244	@ 0xf4
 800377a:	60fb      	str	r3, [r7, #12]
  }

  /* Enable interrupts only at the end */
  /* to avoid the risk of SMBUS interrupt handle execution before */
  /* all interrupts requested done */
  __HAL_SMBUS_ENABLE_IT(hsmbus, tmpisr);
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	6819      	ldr	r1, [r3, #0]
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	68fa      	ldr	r2, [r7, #12]
 8003788:	430a      	orrs	r2, r1
 800378a:	601a      	str	r2, [r3, #0]
}
 800378c:	bf00      	nop
 800378e:	3714      	adds	r7, #20
 8003790:	46bd      	mov	sp, r7
 8003792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003796:	4770      	bx	lr

08003798 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003798:	b580      	push	{r7, lr}
 800379a:	b084      	sub	sp, #16
 800379c:	af00      	add	r7, sp, #0
 800379e:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d101      	bne.n	80037aa <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80037a6:	2301      	movs	r3, #1
 80037a8:	e095      	b.n	80038d6 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	d108      	bne.n	80037c4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	685b      	ldr	r3, [r3, #4]
 80037b6:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80037ba:	d009      	beq.n	80037d0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	2200      	movs	r2, #0
 80037c0:	61da      	str	r2, [r3, #28]
 80037c2:	e005      	b.n	80037d0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	2200      	movs	r2, #0
 80037c8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	2200      	movs	r2, #0
 80037ce:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	2200      	movs	r2, #0
 80037d4:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80037dc:	b2db      	uxtb	r3, r3
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d106      	bne.n	80037f0 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	2200      	movs	r2, #0
 80037e6:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80037ea:	6878      	ldr	r0, [r7, #4]
 80037ec:	f7fd fc5c 	bl	80010a8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	2202      	movs	r2, #2
 80037f4:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	681a      	ldr	r2, [r3, #0]
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003806:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	68db      	ldr	r3, [r3, #12]
 800380c:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8003810:	d902      	bls.n	8003818 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8003812:	2300      	movs	r3, #0
 8003814:	60fb      	str	r3, [r7, #12]
 8003816:	e002      	b.n	800381e <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8003818:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800381c:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	68db      	ldr	r3, [r3, #12]
 8003822:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 8003826:	d007      	beq.n	8003838 <HAL_SPI_Init+0xa0>
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	68db      	ldr	r3, [r3, #12]
 800382c:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8003830:	d002      	beq.n	8003838 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	2200      	movs	r2, #0
 8003836:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	685b      	ldr	r3, [r3, #4]
 800383c:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	689b      	ldr	r3, [r3, #8]
 8003844:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8003848:	431a      	orrs	r2, r3
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	691b      	ldr	r3, [r3, #16]
 800384e:	f003 0302 	and.w	r3, r3, #2
 8003852:	431a      	orrs	r2, r3
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	695b      	ldr	r3, [r3, #20]
 8003858:	f003 0301 	and.w	r3, r3, #1
 800385c:	431a      	orrs	r2, r3
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	699b      	ldr	r3, [r3, #24]
 8003862:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003866:	431a      	orrs	r2, r3
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	69db      	ldr	r3, [r3, #28]
 800386c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003870:	431a      	orrs	r2, r3
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	6a1b      	ldr	r3, [r3, #32]
 8003876:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800387a:	ea42 0103 	orr.w	r1, r2, r3
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003882:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	430a      	orrs	r2, r1
 800388c:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	699b      	ldr	r3, [r3, #24]
 8003892:	0c1b      	lsrs	r3, r3, #16
 8003894:	f003 0204 	and.w	r2, r3, #4
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800389c:	f003 0310 	and.w	r3, r3, #16
 80038a0:	431a      	orrs	r2, r3
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80038a6:	f003 0308 	and.w	r3, r3, #8
 80038aa:	431a      	orrs	r2, r3
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	68db      	ldr	r3, [r3, #12]
 80038b0:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 80038b4:	ea42 0103 	orr.w	r1, r2, r3
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	430a      	orrs	r2, r1
 80038c4:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	2200      	movs	r2, #0
 80038ca:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	2201      	movs	r2, #1
 80038d0:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 80038d4:	2300      	movs	r3, #0
}
 80038d6:	4618      	mov	r0, r3
 80038d8:	3710      	adds	r7, #16
 80038da:	46bd      	mov	sp, r7
 80038dc:	bd80      	pop	{r7, pc}
	...

080038e0 <HAL_SWPMI_Init>:
  * @brief Initialize the SWPMI peripheral according to the specified parameters in the SWPMI_InitTypeDef.
  * @param hswpmi SWPMI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SWPMI_Init(SWPMI_HandleTypeDef *hswpmi)
{
 80038e0:	b580      	push	{r7, lr}
 80038e2:	b084      	sub	sp, #16
 80038e4:	af00      	add	r7, sp, #0
 80038e6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80038e8:	2300      	movs	r3, #0
 80038ea:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 80038ec:	2300      	movs	r3, #0
 80038ee:	60bb      	str	r3, [r7, #8]

  /* Check the SWPMI handle allocation */
  if (hswpmi == NULL)
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d102      	bne.n	80038fc <HAL_SWPMI_Init+0x1c>
  {
    status = HAL_ERROR;
 80038f6:	2301      	movs	r3, #1
 80038f8:	73fb      	strb	r3, [r7, #15]
 80038fa:	e061      	b.n	80039c0 <HAL_SWPMI_Init+0xe0>
    assert_param(IS_SWPMI_VOLTAGE_CLASS(hswpmi->Init.VoltageClass));
    assert_param(IS_SWPMI_BITRATE_VALUE(hswpmi->Init.BitRate));
    assert_param(IS_SWPMI_TX_BUFFERING_MODE(hswpmi->Init.TxBufferingMode));
    assert_param(IS_SWPMI_RX_BUFFERING_MODE(hswpmi->Init.RxBufferingMode));

    if (hswpmi->State == HAL_SWPMI_STATE_RESET)
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003902:	b2db      	uxtb	r3, r3
 8003904:	2b00      	cmp	r3, #0
 8003906:	d106      	bne.n	8003916 <HAL_SWPMI_Init+0x36>
    {
      /* Allocate lock resource and initialize it */
      hswpmi->Lock = HAL_UNLOCKED;
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	2200      	movs	r2, #0
 800390c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        hswpmi->MspInitCallback = HAL_SWPMI_MspInit;
      }
      hswpmi->MspInitCallback(hswpmi);
#else
      /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
      HAL_SWPMI_MspInit(hswpmi);
 8003910:	6878      	ldr	r0, [r7, #4]
 8003912:	f7fd fc0d 	bl	8001130 <HAL_SWPMI_MspInit>
#endif
    }

    hswpmi->State = HAL_SWPMI_STATE_BUSY;
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	2202      	movs	r2, #2
 800391a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Disable SWPMI interface */
    CLEAR_BIT(hswpmi->Instance->CR, SWPMI_CR_SWPACT);
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	681a      	ldr	r2, [r3, #0]
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	f022 0220 	bic.w	r2, r2, #32
 800392c:	601a      	str	r2, [r3, #0]

    /* Clear all SWPMI interface flags */
    WRITE_REG(hswpmi->Instance->ICR, 0x019F);
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	f240 129f 	movw	r2, #415	@ 0x19f
 8003936:	611a      	str	r2, [r3, #16]

    /* Apply Voltage class selection */
    MODIFY_REG(hswpmi->Instance->OR, SWPMI_OR_CLASS, hswpmi->Init.VoltageClass);
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800393e:	f023 0102 	bic.w	r1, r3, #2
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	685a      	ldr	r2, [r3, #4]
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	430a      	orrs	r2, r1
 800394c:	625a      	str	r2, [r3, #36]	@ 0x24

    /* If Voltage class B, apply 300us delay */
    if (hswpmi->Init.VoltageClass == SWPMI_VOLTAGE_CLASS_B)
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	685b      	ldr	r3, [r3, #4]
 8003952:	2b02      	cmp	r3, #2
 8003954:	d112      	bne.n	800397c <HAL_SWPMI_Init+0x9c>
    {
      /* Insure 300us wait to insure SWPMI_IO output not higher than 1.8V */
      /* Wait loop initialization and execution                            */
      /* Note: Variable divided by 4 to compensate partially CPU processing cycles. */
      wait_loop_index = (300U * (SystemCoreClock / (1000000U * 4U))) + 150U;
 8003956:	4b1d      	ldr	r3, [pc, #116]	@ (80039cc <HAL_SWPMI_Init+0xec>)
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	4a1d      	ldr	r2, [pc, #116]	@ (80039d0 <HAL_SWPMI_Init+0xf0>)
 800395c:	fba2 2303 	umull	r2, r3, r2, r3
 8003960:	0d1b      	lsrs	r3, r3, #20
 8003962:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8003966:	fb02 f303 	mul.w	r3, r2, r3
 800396a:	3396      	adds	r3, #150	@ 0x96
 800396c:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0U)
 800396e:	e002      	b.n	8003976 <HAL_SWPMI_Init+0x96>
      {
        wait_loop_index--;
 8003970:	68bb      	ldr	r3, [r7, #8]
 8003972:	3b01      	subs	r3, #1
 8003974:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0U)
 8003976:	68bb      	ldr	r3, [r7, #8]
 8003978:	2b00      	cmp	r3, #0
 800397a:	d1f9      	bne.n	8003970 <HAL_SWPMI_Init+0x90>
      }
    }

    /* Configure the BRR register (Bitrate) */
    WRITE_REG(hswpmi->Instance->BRR, hswpmi->Init.BitRate);
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	687a      	ldr	r2, [r7, #4]
 8003982:	6892      	ldr	r2, [r2, #8]
 8003984:	605a      	str	r2, [r3, #4]

    /* Apply SWPMI CR configuration */
    MODIFY_REG(hswpmi->Instance->CR, \
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	f023 010f 	bic.w	r1, r3, #15
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	68da      	ldr	r2, [r3, #12]
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	691b      	ldr	r3, [r3, #16]
 8003998:	431a      	orrs	r2, r3
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	430a      	orrs	r2, r1
 80039a0:	601a      	str	r2, [r3, #0]
               SWPMI_CR_RXDMA | SWPMI_CR_TXDMA  | SWPMI_CR_RXMODE | SWPMI_CR_TXMODE, \
               hswpmi->Init.TxBufferingMode | hswpmi->Init.RxBufferingMode);

    hswpmi->ErrorCode = HAL_SWPMI_ERROR_NONE;
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	2200      	movs	r2, #0
 80039a6:	639a      	str	r2, [r3, #56]	@ 0x38
    hswpmi->State = HAL_SWPMI_STATE_READY;
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	2201      	movs	r2, #1
 80039ac:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Enable SWPMI peripheral */
    SET_BIT(hswpmi->Instance->CR, SWPMI_CR_SWPACT);
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	681a      	ldr	r2, [r3, #0]
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	f042 0220 	orr.w	r2, r2, #32
 80039be:	601a      	str	r2, [r3, #0]
  }

  return status;
 80039c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80039c2:	4618      	mov	r0, r3
 80039c4:	3710      	adds	r7, #16
 80039c6:	46bd      	mov	sp, r7
 80039c8:	bd80      	pop	{r7, pc}
 80039ca:	bf00      	nop
 80039cc:	20000000 	.word	0x20000000
 80039d0:	431bde83 	.word	0x431bde83

080039d4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80039d4:	b580      	push	{r7, lr}
 80039d6:	b082      	sub	sp, #8
 80039d8:	af00      	add	r7, sp, #0
 80039da:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	2b00      	cmp	r3, #0
 80039e0:	d101      	bne.n	80039e6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80039e2:	2301      	movs	r3, #1
 80039e4:	e049      	b.n	8003a7a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80039ec:	b2db      	uxtb	r3, r3
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	d106      	bne.n	8003a00 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	2200      	movs	r2, #0
 80039f6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80039fa:	6878      	ldr	r0, [r7, #4]
 80039fc:	f7fd fbf2 	bl	80011e4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	2202      	movs	r2, #2
 8003a04:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	681a      	ldr	r2, [r3, #0]
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	3304      	adds	r3, #4
 8003a10:	4619      	mov	r1, r3
 8003a12:	4610      	mov	r0, r2
 8003a14:	f000 fb1a 	bl	800404c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	2201      	movs	r2, #1
 8003a1c:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	2201      	movs	r2, #1
 8003a24:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	2201      	movs	r2, #1
 8003a2c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	2201      	movs	r2, #1
 8003a34:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	2201      	movs	r2, #1
 8003a3c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	2201      	movs	r2, #1
 8003a44:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	2201      	movs	r2, #1
 8003a4c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	2201      	movs	r2, #1
 8003a54:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	2201      	movs	r2, #1
 8003a5c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	2201      	movs	r2, #1
 8003a64:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	2201      	movs	r2, #1
 8003a6c:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	2201      	movs	r2, #1
 8003a74:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003a78:	2300      	movs	r3, #0
}
 8003a7a:	4618      	mov	r0, r3
 8003a7c:	3708      	adds	r7, #8
 8003a7e:	46bd      	mov	sp, r7
 8003a80:	bd80      	pop	{r7, pc}

08003a82 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8003a82:	b580      	push	{r7, lr}
 8003a84:	b082      	sub	sp, #8
 8003a86:	af00      	add	r7, sp, #0
 8003a88:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	d101      	bne.n	8003a94 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 8003a90:	2301      	movs	r3, #1
 8003a92:	e049      	b.n	8003b28 <HAL_TIM_OC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003a9a:	b2db      	uxtb	r3, r3
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	d106      	bne.n	8003aae <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	2200      	movs	r2, #0
 8003aa4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 8003aa8:	6878      	ldr	r0, [r7, #4]
 8003aaa:	f000 f841 	bl	8003b30 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	2202      	movs	r2, #2
 8003ab2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	681a      	ldr	r2, [r3, #0]
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	3304      	adds	r3, #4
 8003abe:	4619      	mov	r1, r3
 8003ac0:	4610      	mov	r0, r2
 8003ac2:	f000 fac3 	bl	800404c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	2201      	movs	r2, #1
 8003aca:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	2201      	movs	r2, #1
 8003ad2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	2201      	movs	r2, #1
 8003ada:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	2201      	movs	r2, #1
 8003ae2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	2201      	movs	r2, #1
 8003aea:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	2201      	movs	r2, #1
 8003af2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	2201      	movs	r2, #1
 8003afa:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	2201      	movs	r2, #1
 8003b02:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	2201      	movs	r2, #1
 8003b0a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	2201      	movs	r2, #1
 8003b12:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	2201      	movs	r2, #1
 8003b1a:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	2201      	movs	r2, #1
 8003b22:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003b26:	2300      	movs	r3, #0
}
 8003b28:	4618      	mov	r0, r3
 8003b2a:	3708      	adds	r7, #8
 8003b2c:	46bd      	mov	sp, r7
 8003b2e:	bd80      	pop	{r7, pc}

08003b30 <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 8003b30:	b480      	push	{r7}
 8003b32:	b083      	sub	sp, #12
 8003b34:	af00      	add	r7, sp, #0
 8003b36:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 8003b38:	bf00      	nop
 8003b3a:	370c      	adds	r7, #12
 8003b3c:	46bd      	mov	sp, r7
 8003b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b42:	4770      	bx	lr

08003b44 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8003b44:	b580      	push	{r7, lr}
 8003b46:	b082      	sub	sp, #8
 8003b48:	af00      	add	r7, sp, #0
 8003b4a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d101      	bne.n	8003b56 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8003b52:	2301      	movs	r3, #1
 8003b54:	e049      	b.n	8003bea <HAL_TIM_IC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003b5c:	b2db      	uxtb	r3, r3
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	d106      	bne.n	8003b70 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	2200      	movs	r2, #0
 8003b66:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8003b6a:	6878      	ldr	r0, [r7, #4]
 8003b6c:	f000 f841 	bl	8003bf2 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	2202      	movs	r2, #2
 8003b74:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	681a      	ldr	r2, [r3, #0]
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	3304      	adds	r3, #4
 8003b80:	4619      	mov	r1, r3
 8003b82:	4610      	mov	r0, r2
 8003b84:	f000 fa62 	bl	800404c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	2201      	movs	r2, #1
 8003b8c:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	2201      	movs	r2, #1
 8003b94:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	2201      	movs	r2, #1
 8003b9c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	2201      	movs	r2, #1
 8003ba4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	2201      	movs	r2, #1
 8003bac:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	2201      	movs	r2, #1
 8003bb4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	2201      	movs	r2, #1
 8003bbc:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	2201      	movs	r2, #1
 8003bc4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	2201      	movs	r2, #1
 8003bcc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	2201      	movs	r2, #1
 8003bd4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	2201      	movs	r2, #1
 8003bdc:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	2201      	movs	r2, #1
 8003be4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003be8:	2300      	movs	r3, #0
}
 8003bea:	4618      	mov	r0, r3
 8003bec:	3708      	adds	r7, #8
 8003bee:	46bd      	mov	sp, r7
 8003bf0:	bd80      	pop	{r7, pc}

08003bf2 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8003bf2:	b480      	push	{r7}
 8003bf4:	b083      	sub	sp, #12
 8003bf6:	af00      	add	r7, sp, #0
 8003bf8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8003bfa:	bf00      	nop
 8003bfc:	370c      	adds	r7, #12
 8003bfe:	46bd      	mov	sp, r7
 8003c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c04:	4770      	bx	lr
	...

08003c08 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           const TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8003c08:	b580      	push	{r7, lr}
 8003c0a:	b086      	sub	sp, #24
 8003c0c:	af00      	add	r7, sp, #0
 8003c0e:	60f8      	str	r0, [r7, #12]
 8003c10:	60b9      	str	r1, [r7, #8]
 8003c12:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003c14:	2300      	movs	r3, #0
 8003c16:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003c1e:	2b01      	cmp	r3, #1
 8003c20:	d101      	bne.n	8003c26 <HAL_TIM_OC_ConfigChannel+0x1e>
 8003c22:	2302      	movs	r3, #2
 8003c24:	e066      	b.n	8003cf4 <HAL_TIM_OC_ConfigChannel+0xec>
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	2201      	movs	r2, #1
 8003c2a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	2b14      	cmp	r3, #20
 8003c32:	d857      	bhi.n	8003ce4 <HAL_TIM_OC_ConfigChannel+0xdc>
 8003c34:	a201      	add	r2, pc, #4	@ (adr r2, 8003c3c <HAL_TIM_OC_ConfigChannel+0x34>)
 8003c36:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c3a:	bf00      	nop
 8003c3c:	08003c91 	.word	0x08003c91
 8003c40:	08003ce5 	.word	0x08003ce5
 8003c44:	08003ce5 	.word	0x08003ce5
 8003c48:	08003ce5 	.word	0x08003ce5
 8003c4c:	08003c9f 	.word	0x08003c9f
 8003c50:	08003ce5 	.word	0x08003ce5
 8003c54:	08003ce5 	.word	0x08003ce5
 8003c58:	08003ce5 	.word	0x08003ce5
 8003c5c:	08003cad 	.word	0x08003cad
 8003c60:	08003ce5 	.word	0x08003ce5
 8003c64:	08003ce5 	.word	0x08003ce5
 8003c68:	08003ce5 	.word	0x08003ce5
 8003c6c:	08003cbb 	.word	0x08003cbb
 8003c70:	08003ce5 	.word	0x08003ce5
 8003c74:	08003ce5 	.word	0x08003ce5
 8003c78:	08003ce5 	.word	0x08003ce5
 8003c7c:	08003cc9 	.word	0x08003cc9
 8003c80:	08003ce5 	.word	0x08003ce5
 8003c84:	08003ce5 	.word	0x08003ce5
 8003c88:	08003ce5 	.word	0x08003ce5
 8003c8c:	08003cd7 	.word	0x08003cd7
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	68b9      	ldr	r1, [r7, #8]
 8003c96:	4618      	mov	r0, r3
 8003c98:	f000 fa3c 	bl	8004114 <TIM_OC1_SetConfig>
      break;
 8003c9c:	e025      	b.n	8003cea <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	68b9      	ldr	r1, [r7, #8]
 8003ca4:	4618      	mov	r0, r3
 8003ca6:	f000 fab1 	bl	800420c <TIM_OC2_SetConfig>
      break;
 8003caa:	e01e      	b.n	8003cea <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	68b9      	ldr	r1, [r7, #8]
 8003cb2:	4618      	mov	r0, r3
 8003cb4:	f000 fb24 	bl	8004300 <TIM_OC3_SetConfig>
      break;
 8003cb8:	e017      	b.n	8003cea <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	68b9      	ldr	r1, [r7, #8]
 8003cc0:	4618      	mov	r0, r3
 8003cc2:	f000 fb95 	bl	80043f0 <TIM_OC4_SetConfig>
      break;
 8003cc6:	e010      	b.n	8003cea <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 5 in Output Compare */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	68b9      	ldr	r1, [r7, #8]
 8003cce:	4618      	mov	r0, r3
 8003cd0:	f000 fbec 	bl	80044ac <TIM_OC5_SetConfig>
      break;
 8003cd4:	e009      	b.n	8003cea <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 6 in Output Compare */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	68b9      	ldr	r1, [r7, #8]
 8003cdc:	4618      	mov	r0, r3
 8003cde:	f000 fc3d 	bl	800455c <TIM_OC6_SetConfig>
      break;
 8003ce2:	e002      	b.n	8003cea <HAL_TIM_OC_ConfigChannel+0xe2>
    }

    default:
      status = HAL_ERROR;
 8003ce4:	2301      	movs	r3, #1
 8003ce6:	75fb      	strb	r3, [r7, #23]
      break;
 8003ce8:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	2200      	movs	r2, #0
 8003cee:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003cf2:	7dfb      	ldrb	r3, [r7, #23]
}
 8003cf4:	4618      	mov	r0, r3
 8003cf6:	3718      	adds	r7, #24
 8003cf8:	46bd      	mov	sp, r7
 8003cfa:	bd80      	pop	{r7, pc}

08003cfc <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8003cfc:	b580      	push	{r7, lr}
 8003cfe:	b086      	sub	sp, #24
 8003d00:	af00      	add	r7, sp, #0
 8003d02:	60f8      	str	r0, [r7, #12]
 8003d04:	60b9      	str	r1, [r7, #8]
 8003d06:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003d08:	2300      	movs	r3, #0
 8003d0a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003d12:	2b01      	cmp	r3, #1
 8003d14:	d101      	bne.n	8003d1a <HAL_TIM_IC_ConfigChannel+0x1e>
 8003d16:	2302      	movs	r3, #2
 8003d18:	e088      	b.n	8003e2c <HAL_TIM_IC_ConfigChannel+0x130>
 8003d1a:	68fb      	ldr	r3, [r7, #12]
 8003d1c:	2201      	movs	r2, #1
 8003d1e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  if (Channel == TIM_CHANNEL_1)
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	2b00      	cmp	r3, #0
 8003d26:	d11b      	bne.n	8003d60 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8003d2c:	68bb      	ldr	r3, [r7, #8]
 8003d2e:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8003d30:	68bb      	ldr	r3, [r7, #8]
 8003d32:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8003d34:	68bb      	ldr	r3, [r7, #8]
 8003d36:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 8003d38:	f000 fcfe 	bl	8004738 <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	699a      	ldr	r2, [r3, #24]
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	f022 020c 	bic.w	r2, r2, #12
 8003d4a:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	6999      	ldr	r1, [r3, #24]
 8003d52:	68bb      	ldr	r3, [r7, #8]
 8003d54:	689a      	ldr	r2, [r3, #8]
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	430a      	orrs	r2, r1
 8003d5c:	619a      	str	r2, [r3, #24]
 8003d5e:	e060      	b.n	8003e22 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	2b04      	cmp	r3, #4
 8003d64:	d11c      	bne.n	8003da0 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8003d66:	68fb      	ldr	r3, [r7, #12]
 8003d68:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8003d6a:	68bb      	ldr	r3, [r7, #8]
 8003d6c:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8003d6e:	68bb      	ldr	r3, [r7, #8]
 8003d70:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8003d72:	68bb      	ldr	r3, [r7, #8]
 8003d74:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 8003d76:	f000 fd64 	bl	8004842 <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8003d7a:	68fb      	ldr	r3, [r7, #12]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	699a      	ldr	r2, [r3, #24]
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 8003d88:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	6999      	ldr	r1, [r3, #24]
 8003d90:	68bb      	ldr	r3, [r7, #8]
 8003d92:	689b      	ldr	r3, [r3, #8]
 8003d94:	021a      	lsls	r2, r3, #8
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	430a      	orrs	r2, r1
 8003d9c:	619a      	str	r2, [r3, #24]
 8003d9e:	e040      	b.n	8003e22 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	2b08      	cmp	r3, #8
 8003da4:	d11b      	bne.n	8003dde <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8003da6:	68fb      	ldr	r3, [r7, #12]
 8003da8:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8003daa:	68bb      	ldr	r3, [r7, #8]
 8003dac:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8003dae:	68bb      	ldr	r3, [r7, #8]
 8003db0:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8003db2:	68bb      	ldr	r3, [r7, #8]
 8003db4:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 8003db6:	f000 fdb1 	bl	800491c <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	69da      	ldr	r2, [r3, #28]
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	f022 020c 	bic.w	r2, r2, #12
 8003dc8:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8003dca:	68fb      	ldr	r3, [r7, #12]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	69d9      	ldr	r1, [r3, #28]
 8003dd0:	68bb      	ldr	r3, [r7, #8]
 8003dd2:	689a      	ldr	r2, [r3, #8]
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	430a      	orrs	r2, r1
 8003dda:	61da      	str	r2, [r3, #28]
 8003ddc:	e021      	b.n	8003e22 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	2b0c      	cmp	r3, #12
 8003de2:	d11c      	bne.n	8003e1e <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8003de8:	68bb      	ldr	r3, [r7, #8]
 8003dea:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8003dec:	68bb      	ldr	r3, [r7, #8]
 8003dee:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8003df0:	68bb      	ldr	r3, [r7, #8]
 8003df2:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 8003df4:	f000 fdce 	bl	8004994 <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	69da      	ldr	r2, [r3, #28]
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 8003e06:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	69d9      	ldr	r1, [r3, #28]
 8003e0e:	68bb      	ldr	r3, [r7, #8]
 8003e10:	689b      	ldr	r3, [r3, #8]
 8003e12:	021a      	lsls	r2, r3, #8
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	430a      	orrs	r2, r1
 8003e1a:	61da      	str	r2, [r3, #28]
 8003e1c:	e001      	b.n	8003e22 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8003e1e:	2301      	movs	r3, #1
 8003e20:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	2200      	movs	r2, #0
 8003e26:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003e2a:	7dfb      	ldrb	r3, [r7, #23]
}
 8003e2c:	4618      	mov	r0, r3
 8003e2e:	3718      	adds	r7, #24
 8003e30:	46bd      	mov	sp, r7
 8003e32:	bd80      	pop	{r7, pc}

08003e34 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003e34:	b580      	push	{r7, lr}
 8003e36:	b084      	sub	sp, #16
 8003e38:	af00      	add	r7, sp, #0
 8003e3a:	6078      	str	r0, [r7, #4]
 8003e3c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003e3e:	2300      	movs	r3, #0
 8003e40:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003e48:	2b01      	cmp	r3, #1
 8003e4a:	d101      	bne.n	8003e50 <HAL_TIM_ConfigClockSource+0x1c>
 8003e4c:	2302      	movs	r3, #2
 8003e4e:	e0b6      	b.n	8003fbe <HAL_TIM_ConfigClockSource+0x18a>
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	2201      	movs	r2, #1
 8003e54:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	2202      	movs	r2, #2
 8003e5c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	689b      	ldr	r3, [r3, #8]
 8003e66:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003e68:	68bb      	ldr	r3, [r7, #8]
 8003e6a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003e6e:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8003e72:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003e74:	68bb      	ldr	r3, [r7, #8]
 8003e76:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003e7a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	68ba      	ldr	r2, [r7, #8]
 8003e82:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003e84:	683b      	ldr	r3, [r7, #0]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003e8c:	d03e      	beq.n	8003f0c <HAL_TIM_ConfigClockSource+0xd8>
 8003e8e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003e92:	f200 8087 	bhi.w	8003fa4 <HAL_TIM_ConfigClockSource+0x170>
 8003e96:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003e9a:	f000 8086 	beq.w	8003faa <HAL_TIM_ConfigClockSource+0x176>
 8003e9e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003ea2:	d87f      	bhi.n	8003fa4 <HAL_TIM_ConfigClockSource+0x170>
 8003ea4:	2b70      	cmp	r3, #112	@ 0x70
 8003ea6:	d01a      	beq.n	8003ede <HAL_TIM_ConfigClockSource+0xaa>
 8003ea8:	2b70      	cmp	r3, #112	@ 0x70
 8003eaa:	d87b      	bhi.n	8003fa4 <HAL_TIM_ConfigClockSource+0x170>
 8003eac:	2b60      	cmp	r3, #96	@ 0x60
 8003eae:	d050      	beq.n	8003f52 <HAL_TIM_ConfigClockSource+0x11e>
 8003eb0:	2b60      	cmp	r3, #96	@ 0x60
 8003eb2:	d877      	bhi.n	8003fa4 <HAL_TIM_ConfigClockSource+0x170>
 8003eb4:	2b50      	cmp	r3, #80	@ 0x50
 8003eb6:	d03c      	beq.n	8003f32 <HAL_TIM_ConfigClockSource+0xfe>
 8003eb8:	2b50      	cmp	r3, #80	@ 0x50
 8003eba:	d873      	bhi.n	8003fa4 <HAL_TIM_ConfigClockSource+0x170>
 8003ebc:	2b40      	cmp	r3, #64	@ 0x40
 8003ebe:	d058      	beq.n	8003f72 <HAL_TIM_ConfigClockSource+0x13e>
 8003ec0:	2b40      	cmp	r3, #64	@ 0x40
 8003ec2:	d86f      	bhi.n	8003fa4 <HAL_TIM_ConfigClockSource+0x170>
 8003ec4:	2b30      	cmp	r3, #48	@ 0x30
 8003ec6:	d064      	beq.n	8003f92 <HAL_TIM_ConfigClockSource+0x15e>
 8003ec8:	2b30      	cmp	r3, #48	@ 0x30
 8003eca:	d86b      	bhi.n	8003fa4 <HAL_TIM_ConfigClockSource+0x170>
 8003ecc:	2b20      	cmp	r3, #32
 8003ece:	d060      	beq.n	8003f92 <HAL_TIM_ConfigClockSource+0x15e>
 8003ed0:	2b20      	cmp	r3, #32
 8003ed2:	d867      	bhi.n	8003fa4 <HAL_TIM_ConfigClockSource+0x170>
 8003ed4:	2b00      	cmp	r3, #0
 8003ed6:	d05c      	beq.n	8003f92 <HAL_TIM_ConfigClockSource+0x15e>
 8003ed8:	2b10      	cmp	r3, #16
 8003eda:	d05a      	beq.n	8003f92 <HAL_TIM_ConfigClockSource+0x15e>
 8003edc:	e062      	b.n	8003fa4 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003ee2:	683b      	ldr	r3, [r7, #0]
 8003ee4:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003ee6:	683b      	ldr	r3, [r7, #0]
 8003ee8:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003eea:	683b      	ldr	r3, [r7, #0]
 8003eec:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003eee:	f000 fda9 	bl	8004a44 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	689b      	ldr	r3, [r3, #8]
 8003ef8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003efa:	68bb      	ldr	r3, [r7, #8]
 8003efc:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8003f00:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	68ba      	ldr	r2, [r7, #8]
 8003f08:	609a      	str	r2, [r3, #8]
      break;
 8003f0a:	e04f      	b.n	8003fac <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003f10:	683b      	ldr	r3, [r7, #0]
 8003f12:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003f14:	683b      	ldr	r3, [r7, #0]
 8003f16:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003f18:	683b      	ldr	r3, [r7, #0]
 8003f1a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003f1c:	f000 fd92 	bl	8004a44 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	689a      	ldr	r2, [r3, #8]
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003f2e:	609a      	str	r2, [r3, #8]
      break;
 8003f30:	e03c      	b.n	8003fac <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003f36:	683b      	ldr	r3, [r7, #0]
 8003f38:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003f3a:	683b      	ldr	r3, [r7, #0]
 8003f3c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003f3e:	461a      	mov	r2, r3
 8003f40:	f000 fc50 	bl	80047e4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	2150      	movs	r1, #80	@ 0x50
 8003f4a:	4618      	mov	r0, r3
 8003f4c:	f000 fd5f 	bl	8004a0e <TIM_ITRx_SetConfig>
      break;
 8003f50:	e02c      	b.n	8003fac <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003f56:	683b      	ldr	r3, [r7, #0]
 8003f58:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003f5a:	683b      	ldr	r3, [r7, #0]
 8003f5c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003f5e:	461a      	mov	r2, r3
 8003f60:	f000 fcac 	bl	80048bc <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	2160      	movs	r1, #96	@ 0x60
 8003f6a:	4618      	mov	r0, r3
 8003f6c:	f000 fd4f 	bl	8004a0e <TIM_ITRx_SetConfig>
      break;
 8003f70:	e01c      	b.n	8003fac <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003f76:	683b      	ldr	r3, [r7, #0]
 8003f78:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003f7a:	683b      	ldr	r3, [r7, #0]
 8003f7c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003f7e:	461a      	mov	r2, r3
 8003f80:	f000 fc30 	bl	80047e4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	2140      	movs	r1, #64	@ 0x40
 8003f8a:	4618      	mov	r0, r3
 8003f8c:	f000 fd3f 	bl	8004a0e <TIM_ITRx_SetConfig>
      break;
 8003f90:	e00c      	b.n	8003fac <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	681a      	ldr	r2, [r3, #0]
 8003f96:	683b      	ldr	r3, [r7, #0]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	4619      	mov	r1, r3
 8003f9c:	4610      	mov	r0, r2
 8003f9e:	f000 fd36 	bl	8004a0e <TIM_ITRx_SetConfig>
      break;
 8003fa2:	e003      	b.n	8003fac <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8003fa4:	2301      	movs	r3, #1
 8003fa6:	73fb      	strb	r3, [r7, #15]
      break;
 8003fa8:	e000      	b.n	8003fac <HAL_TIM_ConfigClockSource+0x178>
      break;
 8003faa:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	2201      	movs	r2, #1
 8003fb0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	2200      	movs	r2, #0
 8003fb8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003fbc:	7bfb      	ldrb	r3, [r7, #15]
}
 8003fbe:	4618      	mov	r0, r3
 8003fc0:	3710      	adds	r7, #16
 8003fc2:	46bd      	mov	sp, r7
 8003fc4:	bd80      	pop	{r7, pc}

08003fc6 <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8003fc6:	b580      	push	{r7, lr}
 8003fc8:	b082      	sub	sp, #8
 8003fca:	af00      	add	r7, sp, #0
 8003fcc:	6078      	str	r0, [r7, #4]
 8003fce:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003fd6:	2b01      	cmp	r3, #1
 8003fd8:	d101      	bne.n	8003fde <HAL_TIM_SlaveConfigSynchro+0x18>
 8003fda:	2302      	movs	r3, #2
 8003fdc:	e031      	b.n	8004042 <HAL_TIM_SlaveConfigSynchro+0x7c>
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	2201      	movs	r2, #1
 8003fe2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	2202      	movs	r2, #2
 8003fea:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 8003fee:	6839      	ldr	r1, [r7, #0]
 8003ff0:	6878      	ldr	r0, [r7, #4]
 8003ff2:	f000 fb0d 	bl	8004610 <TIM_SlaveTimer_SetConfig>
 8003ff6:	4603      	mov	r3, r0
 8003ff8:	2b00      	cmp	r3, #0
 8003ffa:	d009      	beq.n	8004010 <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	2201      	movs	r2, #1
 8004000:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    __HAL_UNLOCK(htim);
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	2200      	movs	r2, #0
 8004008:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    return HAL_ERROR;
 800400c:	2301      	movs	r3, #1
 800400e:	e018      	b.n	8004042 <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	68da      	ldr	r2, [r3, #12]
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800401e:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	68da      	ldr	r2, [r3, #12]
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800402e:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	2201      	movs	r2, #1
 8004034:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	2200      	movs	r2, #0
 800403c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004040:	2300      	movs	r3, #0
}
 8004042:	4618      	mov	r0, r3
 8004044:	3708      	adds	r7, #8
 8004046:	46bd      	mov	sp, r7
 8004048:	bd80      	pop	{r7, pc}
	...

0800404c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800404c:	b480      	push	{r7}
 800404e:	b085      	sub	sp, #20
 8004050:	af00      	add	r7, sp, #0
 8004052:	6078      	str	r0, [r7, #4]
 8004054:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	4a2a      	ldr	r2, [pc, #168]	@ (8004108 <TIM_Base_SetConfig+0xbc>)
 8004060:	4293      	cmp	r3, r2
 8004062:	d003      	beq.n	800406c <TIM_Base_SetConfig+0x20>
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800406a:	d108      	bne.n	800407e <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004072:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004074:	683b      	ldr	r3, [r7, #0]
 8004076:	685b      	ldr	r3, [r3, #4]
 8004078:	68fa      	ldr	r2, [r7, #12]
 800407a:	4313      	orrs	r3, r2
 800407c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	4a21      	ldr	r2, [pc, #132]	@ (8004108 <TIM_Base_SetConfig+0xbc>)
 8004082:	4293      	cmp	r3, r2
 8004084:	d00b      	beq.n	800409e <TIM_Base_SetConfig+0x52>
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800408c:	d007      	beq.n	800409e <TIM_Base_SetConfig+0x52>
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	4a1e      	ldr	r2, [pc, #120]	@ (800410c <TIM_Base_SetConfig+0xc0>)
 8004092:	4293      	cmp	r3, r2
 8004094:	d003      	beq.n	800409e <TIM_Base_SetConfig+0x52>
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	4a1d      	ldr	r2, [pc, #116]	@ (8004110 <TIM_Base_SetConfig+0xc4>)
 800409a:	4293      	cmp	r3, r2
 800409c:	d108      	bne.n	80040b0 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800409e:	68fb      	ldr	r3, [r7, #12]
 80040a0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80040a4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80040a6:	683b      	ldr	r3, [r7, #0]
 80040a8:	68db      	ldr	r3, [r3, #12]
 80040aa:	68fa      	ldr	r2, [r7, #12]
 80040ac:	4313      	orrs	r3, r2
 80040ae:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80040b6:	683b      	ldr	r3, [r7, #0]
 80040b8:	695b      	ldr	r3, [r3, #20]
 80040ba:	4313      	orrs	r3, r2
 80040bc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	68fa      	ldr	r2, [r7, #12]
 80040c2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80040c4:	683b      	ldr	r3, [r7, #0]
 80040c6:	689a      	ldr	r2, [r3, #8]
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80040cc:	683b      	ldr	r3, [r7, #0]
 80040ce:	681a      	ldr	r2, [r3, #0]
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	4a0c      	ldr	r2, [pc, #48]	@ (8004108 <TIM_Base_SetConfig+0xbc>)
 80040d8:	4293      	cmp	r3, r2
 80040da:	d007      	beq.n	80040ec <TIM_Base_SetConfig+0xa0>
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	4a0b      	ldr	r2, [pc, #44]	@ (800410c <TIM_Base_SetConfig+0xc0>)
 80040e0:	4293      	cmp	r3, r2
 80040e2:	d003      	beq.n	80040ec <TIM_Base_SetConfig+0xa0>
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	4a0a      	ldr	r2, [pc, #40]	@ (8004110 <TIM_Base_SetConfig+0xc4>)
 80040e8:	4293      	cmp	r3, r2
 80040ea:	d103      	bne.n	80040f4 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80040ec:	683b      	ldr	r3, [r7, #0]
 80040ee:	691a      	ldr	r2, [r3, #16]
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	2201      	movs	r2, #1
 80040f8:	615a      	str	r2, [r3, #20]
}
 80040fa:	bf00      	nop
 80040fc:	3714      	adds	r7, #20
 80040fe:	46bd      	mov	sp, r7
 8004100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004104:	4770      	bx	lr
 8004106:	bf00      	nop
 8004108:	40012c00 	.word	0x40012c00
 800410c:	40014000 	.word	0x40014000
 8004110:	40014400 	.word	0x40014400

08004114 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004114:	b480      	push	{r7}
 8004116:	b087      	sub	sp, #28
 8004118:	af00      	add	r7, sp, #0
 800411a:	6078      	str	r0, [r7, #4]
 800411c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	6a1b      	ldr	r3, [r3, #32]
 8004122:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	6a1b      	ldr	r3, [r3, #32]
 8004128:	f023 0201 	bic.w	r2, r3, #1
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	685b      	ldr	r3, [r3, #4]
 8004134:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	699b      	ldr	r3, [r3, #24]
 800413a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004142:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004146:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	f023 0303 	bic.w	r3, r3, #3
 800414e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004150:	683b      	ldr	r3, [r7, #0]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	68fa      	ldr	r2, [r7, #12]
 8004156:	4313      	orrs	r3, r2
 8004158:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800415a:	697b      	ldr	r3, [r7, #20]
 800415c:	f023 0302 	bic.w	r3, r3, #2
 8004160:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004162:	683b      	ldr	r3, [r7, #0]
 8004164:	689b      	ldr	r3, [r3, #8]
 8004166:	697a      	ldr	r2, [r7, #20]
 8004168:	4313      	orrs	r3, r2
 800416a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	4a24      	ldr	r2, [pc, #144]	@ (8004200 <TIM_OC1_SetConfig+0xec>)
 8004170:	4293      	cmp	r3, r2
 8004172:	d007      	beq.n	8004184 <TIM_OC1_SetConfig+0x70>
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	4a23      	ldr	r2, [pc, #140]	@ (8004204 <TIM_OC1_SetConfig+0xf0>)
 8004178:	4293      	cmp	r3, r2
 800417a:	d003      	beq.n	8004184 <TIM_OC1_SetConfig+0x70>
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	4a22      	ldr	r2, [pc, #136]	@ (8004208 <TIM_OC1_SetConfig+0xf4>)
 8004180:	4293      	cmp	r3, r2
 8004182:	d10c      	bne.n	800419e <TIM_OC1_SetConfig+0x8a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004184:	697b      	ldr	r3, [r7, #20]
 8004186:	f023 0308 	bic.w	r3, r3, #8
 800418a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800418c:	683b      	ldr	r3, [r7, #0]
 800418e:	68db      	ldr	r3, [r3, #12]
 8004190:	697a      	ldr	r2, [r7, #20]
 8004192:	4313      	orrs	r3, r2
 8004194:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004196:	697b      	ldr	r3, [r7, #20]
 8004198:	f023 0304 	bic.w	r3, r3, #4
 800419c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	4a17      	ldr	r2, [pc, #92]	@ (8004200 <TIM_OC1_SetConfig+0xec>)
 80041a2:	4293      	cmp	r3, r2
 80041a4:	d007      	beq.n	80041b6 <TIM_OC1_SetConfig+0xa2>
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	4a16      	ldr	r2, [pc, #88]	@ (8004204 <TIM_OC1_SetConfig+0xf0>)
 80041aa:	4293      	cmp	r3, r2
 80041ac:	d003      	beq.n	80041b6 <TIM_OC1_SetConfig+0xa2>
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	4a15      	ldr	r2, [pc, #84]	@ (8004208 <TIM_OC1_SetConfig+0xf4>)
 80041b2:	4293      	cmp	r3, r2
 80041b4:	d111      	bne.n	80041da <TIM_OC1_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80041b6:	693b      	ldr	r3, [r7, #16]
 80041b8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80041bc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80041be:	693b      	ldr	r3, [r7, #16]
 80041c0:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80041c4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80041c6:	683b      	ldr	r3, [r7, #0]
 80041c8:	695b      	ldr	r3, [r3, #20]
 80041ca:	693a      	ldr	r2, [r7, #16]
 80041cc:	4313      	orrs	r3, r2
 80041ce:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80041d0:	683b      	ldr	r3, [r7, #0]
 80041d2:	699b      	ldr	r3, [r3, #24]
 80041d4:	693a      	ldr	r2, [r7, #16]
 80041d6:	4313      	orrs	r3, r2
 80041d8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	693a      	ldr	r2, [r7, #16]
 80041de:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	68fa      	ldr	r2, [r7, #12]
 80041e4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80041e6:	683b      	ldr	r3, [r7, #0]
 80041e8:	685a      	ldr	r2, [r3, #4]
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	697a      	ldr	r2, [r7, #20]
 80041f2:	621a      	str	r2, [r3, #32]
}
 80041f4:	bf00      	nop
 80041f6:	371c      	adds	r7, #28
 80041f8:	46bd      	mov	sp, r7
 80041fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041fe:	4770      	bx	lr
 8004200:	40012c00 	.word	0x40012c00
 8004204:	40014000 	.word	0x40014000
 8004208:	40014400 	.word	0x40014400

0800420c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800420c:	b480      	push	{r7}
 800420e:	b087      	sub	sp, #28
 8004210:	af00      	add	r7, sp, #0
 8004212:	6078      	str	r0, [r7, #4]
 8004214:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	6a1b      	ldr	r3, [r3, #32]
 800421a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	6a1b      	ldr	r3, [r3, #32]
 8004220:	f023 0210 	bic.w	r2, r3, #16
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	685b      	ldr	r3, [r3, #4]
 800422c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	699b      	ldr	r3, [r3, #24]
 8004232:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800423a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800423e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004246:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004248:	683b      	ldr	r3, [r7, #0]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	021b      	lsls	r3, r3, #8
 800424e:	68fa      	ldr	r2, [r7, #12]
 8004250:	4313      	orrs	r3, r2
 8004252:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004254:	697b      	ldr	r3, [r7, #20]
 8004256:	f023 0320 	bic.w	r3, r3, #32
 800425a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800425c:	683b      	ldr	r3, [r7, #0]
 800425e:	689b      	ldr	r3, [r3, #8]
 8004260:	011b      	lsls	r3, r3, #4
 8004262:	697a      	ldr	r2, [r7, #20]
 8004264:	4313      	orrs	r3, r2
 8004266:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	4a22      	ldr	r2, [pc, #136]	@ (80042f4 <TIM_OC2_SetConfig+0xe8>)
 800426c:	4293      	cmp	r3, r2
 800426e:	d10d      	bne.n	800428c <TIM_OC2_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004270:	697b      	ldr	r3, [r7, #20]
 8004272:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004276:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004278:	683b      	ldr	r3, [r7, #0]
 800427a:	68db      	ldr	r3, [r3, #12]
 800427c:	011b      	lsls	r3, r3, #4
 800427e:	697a      	ldr	r2, [r7, #20]
 8004280:	4313      	orrs	r3, r2
 8004282:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004284:	697b      	ldr	r3, [r7, #20]
 8004286:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800428a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	4a19      	ldr	r2, [pc, #100]	@ (80042f4 <TIM_OC2_SetConfig+0xe8>)
 8004290:	4293      	cmp	r3, r2
 8004292:	d007      	beq.n	80042a4 <TIM_OC2_SetConfig+0x98>
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	4a18      	ldr	r2, [pc, #96]	@ (80042f8 <TIM_OC2_SetConfig+0xec>)
 8004298:	4293      	cmp	r3, r2
 800429a:	d003      	beq.n	80042a4 <TIM_OC2_SetConfig+0x98>
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	4a17      	ldr	r2, [pc, #92]	@ (80042fc <TIM_OC2_SetConfig+0xf0>)
 80042a0:	4293      	cmp	r3, r2
 80042a2:	d113      	bne.n	80042cc <TIM_OC2_SetConfig+0xc0>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80042a4:	693b      	ldr	r3, [r7, #16]
 80042a6:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80042aa:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80042ac:	693b      	ldr	r3, [r7, #16]
 80042ae:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80042b2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80042b4:	683b      	ldr	r3, [r7, #0]
 80042b6:	695b      	ldr	r3, [r3, #20]
 80042b8:	009b      	lsls	r3, r3, #2
 80042ba:	693a      	ldr	r2, [r7, #16]
 80042bc:	4313      	orrs	r3, r2
 80042be:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80042c0:	683b      	ldr	r3, [r7, #0]
 80042c2:	699b      	ldr	r3, [r3, #24]
 80042c4:	009b      	lsls	r3, r3, #2
 80042c6:	693a      	ldr	r2, [r7, #16]
 80042c8:	4313      	orrs	r3, r2
 80042ca:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	693a      	ldr	r2, [r7, #16]
 80042d0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	68fa      	ldr	r2, [r7, #12]
 80042d6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80042d8:	683b      	ldr	r3, [r7, #0]
 80042da:	685a      	ldr	r2, [r3, #4]
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	697a      	ldr	r2, [r7, #20]
 80042e4:	621a      	str	r2, [r3, #32]
}
 80042e6:	bf00      	nop
 80042e8:	371c      	adds	r7, #28
 80042ea:	46bd      	mov	sp, r7
 80042ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042f0:	4770      	bx	lr
 80042f2:	bf00      	nop
 80042f4:	40012c00 	.word	0x40012c00
 80042f8:	40014000 	.word	0x40014000
 80042fc:	40014400 	.word	0x40014400

08004300 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004300:	b480      	push	{r7}
 8004302:	b087      	sub	sp, #28
 8004304:	af00      	add	r7, sp, #0
 8004306:	6078      	str	r0, [r7, #4]
 8004308:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	6a1b      	ldr	r3, [r3, #32]
 800430e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	6a1b      	ldr	r3, [r3, #32]
 8004314:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	685b      	ldr	r3, [r3, #4]
 8004320:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	69db      	ldr	r3, [r3, #28]
 8004326:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004328:	68fb      	ldr	r3, [r7, #12]
 800432a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800432e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004332:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	f023 0303 	bic.w	r3, r3, #3
 800433a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800433c:	683b      	ldr	r3, [r7, #0]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	68fa      	ldr	r2, [r7, #12]
 8004342:	4313      	orrs	r3, r2
 8004344:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004346:	697b      	ldr	r3, [r7, #20]
 8004348:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800434c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800434e:	683b      	ldr	r3, [r7, #0]
 8004350:	689b      	ldr	r3, [r3, #8]
 8004352:	021b      	lsls	r3, r3, #8
 8004354:	697a      	ldr	r2, [r7, #20]
 8004356:	4313      	orrs	r3, r2
 8004358:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	4a21      	ldr	r2, [pc, #132]	@ (80043e4 <TIM_OC3_SetConfig+0xe4>)
 800435e:	4293      	cmp	r3, r2
 8004360:	d10d      	bne.n	800437e <TIM_OC3_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004362:	697b      	ldr	r3, [r7, #20]
 8004364:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8004368:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800436a:	683b      	ldr	r3, [r7, #0]
 800436c:	68db      	ldr	r3, [r3, #12]
 800436e:	021b      	lsls	r3, r3, #8
 8004370:	697a      	ldr	r2, [r7, #20]
 8004372:	4313      	orrs	r3, r2
 8004374:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004376:	697b      	ldr	r3, [r7, #20]
 8004378:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800437c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	4a18      	ldr	r2, [pc, #96]	@ (80043e4 <TIM_OC3_SetConfig+0xe4>)
 8004382:	4293      	cmp	r3, r2
 8004384:	d007      	beq.n	8004396 <TIM_OC3_SetConfig+0x96>
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	4a17      	ldr	r2, [pc, #92]	@ (80043e8 <TIM_OC3_SetConfig+0xe8>)
 800438a:	4293      	cmp	r3, r2
 800438c:	d003      	beq.n	8004396 <TIM_OC3_SetConfig+0x96>
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	4a16      	ldr	r2, [pc, #88]	@ (80043ec <TIM_OC3_SetConfig+0xec>)
 8004392:	4293      	cmp	r3, r2
 8004394:	d113      	bne.n	80043be <TIM_OC3_SetConfig+0xbe>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004396:	693b      	ldr	r3, [r7, #16]
 8004398:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800439c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800439e:	693b      	ldr	r3, [r7, #16]
 80043a0:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80043a4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80043a6:	683b      	ldr	r3, [r7, #0]
 80043a8:	695b      	ldr	r3, [r3, #20]
 80043aa:	011b      	lsls	r3, r3, #4
 80043ac:	693a      	ldr	r2, [r7, #16]
 80043ae:	4313      	orrs	r3, r2
 80043b0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80043b2:	683b      	ldr	r3, [r7, #0]
 80043b4:	699b      	ldr	r3, [r3, #24]
 80043b6:	011b      	lsls	r3, r3, #4
 80043b8:	693a      	ldr	r2, [r7, #16]
 80043ba:	4313      	orrs	r3, r2
 80043bc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	693a      	ldr	r2, [r7, #16]
 80043c2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	68fa      	ldr	r2, [r7, #12]
 80043c8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80043ca:	683b      	ldr	r3, [r7, #0]
 80043cc:	685a      	ldr	r2, [r3, #4]
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	697a      	ldr	r2, [r7, #20]
 80043d6:	621a      	str	r2, [r3, #32]
}
 80043d8:	bf00      	nop
 80043da:	371c      	adds	r7, #28
 80043dc:	46bd      	mov	sp, r7
 80043de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043e2:	4770      	bx	lr
 80043e4:	40012c00 	.word	0x40012c00
 80043e8:	40014000 	.word	0x40014000
 80043ec:	40014400 	.word	0x40014400

080043f0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80043f0:	b480      	push	{r7}
 80043f2:	b087      	sub	sp, #28
 80043f4:	af00      	add	r7, sp, #0
 80043f6:	6078      	str	r0, [r7, #4]
 80043f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	6a1b      	ldr	r3, [r3, #32]
 80043fe:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	6a1b      	ldr	r3, [r3, #32]
 8004404:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	685b      	ldr	r3, [r3, #4]
 8004410:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	69db      	ldr	r3, [r3, #28]
 8004416:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800441e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004422:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800442a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800442c:	683b      	ldr	r3, [r7, #0]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	021b      	lsls	r3, r3, #8
 8004432:	68fa      	ldr	r2, [r7, #12]
 8004434:	4313      	orrs	r3, r2
 8004436:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004438:	693b      	ldr	r3, [r7, #16]
 800443a:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800443e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004440:	683b      	ldr	r3, [r7, #0]
 8004442:	689b      	ldr	r3, [r3, #8]
 8004444:	031b      	lsls	r3, r3, #12
 8004446:	693a      	ldr	r2, [r7, #16]
 8004448:	4313      	orrs	r3, r2
 800444a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	4a14      	ldr	r2, [pc, #80]	@ (80044a0 <TIM_OC4_SetConfig+0xb0>)
 8004450:	4293      	cmp	r3, r2
 8004452:	d007      	beq.n	8004464 <TIM_OC4_SetConfig+0x74>
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	4a13      	ldr	r2, [pc, #76]	@ (80044a4 <TIM_OC4_SetConfig+0xb4>)
 8004458:	4293      	cmp	r3, r2
 800445a:	d003      	beq.n	8004464 <TIM_OC4_SetConfig+0x74>
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	4a12      	ldr	r2, [pc, #72]	@ (80044a8 <TIM_OC4_SetConfig+0xb8>)
 8004460:	4293      	cmp	r3, r2
 8004462:	d109      	bne.n	8004478 <TIM_OC4_SetConfig+0x88>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004464:	697b      	ldr	r3, [r7, #20]
 8004466:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800446a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800446c:	683b      	ldr	r3, [r7, #0]
 800446e:	695b      	ldr	r3, [r3, #20]
 8004470:	019b      	lsls	r3, r3, #6
 8004472:	697a      	ldr	r2, [r7, #20]
 8004474:	4313      	orrs	r3, r2
 8004476:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	697a      	ldr	r2, [r7, #20]
 800447c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	68fa      	ldr	r2, [r7, #12]
 8004482:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004484:	683b      	ldr	r3, [r7, #0]
 8004486:	685a      	ldr	r2, [r3, #4]
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	693a      	ldr	r2, [r7, #16]
 8004490:	621a      	str	r2, [r3, #32]
}
 8004492:	bf00      	nop
 8004494:	371c      	adds	r7, #28
 8004496:	46bd      	mov	sp, r7
 8004498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800449c:	4770      	bx	lr
 800449e:	bf00      	nop
 80044a0:	40012c00 	.word	0x40012c00
 80044a4:	40014000 	.word	0x40014000
 80044a8:	40014400 	.word	0x40014400

080044ac <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80044ac:	b480      	push	{r7}
 80044ae:	b087      	sub	sp, #28
 80044b0:	af00      	add	r7, sp, #0
 80044b2:	6078      	str	r0, [r7, #4]
 80044b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	6a1b      	ldr	r3, [r3, #32]
 80044ba:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	6a1b      	ldr	r3, [r3, #32]
 80044c0:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	685b      	ldr	r3, [r3, #4]
 80044cc:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80044d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80044da:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80044de:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80044e0:	683b      	ldr	r3, [r7, #0]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	68fa      	ldr	r2, [r7, #12]
 80044e6:	4313      	orrs	r3, r2
 80044e8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80044ea:	693b      	ldr	r3, [r7, #16]
 80044ec:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 80044f0:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80044f2:	683b      	ldr	r3, [r7, #0]
 80044f4:	689b      	ldr	r3, [r3, #8]
 80044f6:	041b      	lsls	r3, r3, #16
 80044f8:	693a      	ldr	r2, [r7, #16]
 80044fa:	4313      	orrs	r3, r2
 80044fc:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	4a13      	ldr	r2, [pc, #76]	@ (8004550 <TIM_OC5_SetConfig+0xa4>)
 8004502:	4293      	cmp	r3, r2
 8004504:	d007      	beq.n	8004516 <TIM_OC5_SetConfig+0x6a>
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	4a12      	ldr	r2, [pc, #72]	@ (8004554 <TIM_OC5_SetConfig+0xa8>)
 800450a:	4293      	cmp	r3, r2
 800450c:	d003      	beq.n	8004516 <TIM_OC5_SetConfig+0x6a>
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	4a11      	ldr	r2, [pc, #68]	@ (8004558 <TIM_OC5_SetConfig+0xac>)
 8004512:	4293      	cmp	r3, r2
 8004514:	d109      	bne.n	800452a <TIM_OC5_SetConfig+0x7e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8004516:	697b      	ldr	r3, [r7, #20]
 8004518:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800451c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800451e:	683b      	ldr	r3, [r7, #0]
 8004520:	695b      	ldr	r3, [r3, #20]
 8004522:	021b      	lsls	r3, r3, #8
 8004524:	697a      	ldr	r2, [r7, #20]
 8004526:	4313      	orrs	r3, r2
 8004528:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	697a      	ldr	r2, [r7, #20]
 800452e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	68fa      	ldr	r2, [r7, #12]
 8004534:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8004536:	683b      	ldr	r3, [r7, #0]
 8004538:	685a      	ldr	r2, [r3, #4]
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	693a      	ldr	r2, [r7, #16]
 8004542:	621a      	str	r2, [r3, #32]
}
 8004544:	bf00      	nop
 8004546:	371c      	adds	r7, #28
 8004548:	46bd      	mov	sp, r7
 800454a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800454e:	4770      	bx	lr
 8004550:	40012c00 	.word	0x40012c00
 8004554:	40014000 	.word	0x40014000
 8004558:	40014400 	.word	0x40014400

0800455c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800455c:	b480      	push	{r7}
 800455e:	b087      	sub	sp, #28
 8004560:	af00      	add	r7, sp, #0
 8004562:	6078      	str	r0, [r7, #4]
 8004564:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	6a1b      	ldr	r3, [r3, #32]
 800456a:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	6a1b      	ldr	r3, [r3, #32]
 8004570:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	685b      	ldr	r3, [r3, #4]
 800457c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004582:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800458a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800458e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004590:	683b      	ldr	r3, [r7, #0]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	021b      	lsls	r3, r3, #8
 8004596:	68fa      	ldr	r2, [r7, #12]
 8004598:	4313      	orrs	r3, r2
 800459a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800459c:	693b      	ldr	r3, [r7, #16]
 800459e:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80045a2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80045a4:	683b      	ldr	r3, [r7, #0]
 80045a6:	689b      	ldr	r3, [r3, #8]
 80045a8:	051b      	lsls	r3, r3, #20
 80045aa:	693a      	ldr	r2, [r7, #16]
 80045ac:	4313      	orrs	r3, r2
 80045ae:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	4a14      	ldr	r2, [pc, #80]	@ (8004604 <TIM_OC6_SetConfig+0xa8>)
 80045b4:	4293      	cmp	r3, r2
 80045b6:	d007      	beq.n	80045c8 <TIM_OC6_SetConfig+0x6c>
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	4a13      	ldr	r2, [pc, #76]	@ (8004608 <TIM_OC6_SetConfig+0xac>)
 80045bc:	4293      	cmp	r3, r2
 80045be:	d003      	beq.n	80045c8 <TIM_OC6_SetConfig+0x6c>
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	4a12      	ldr	r2, [pc, #72]	@ (800460c <TIM_OC6_SetConfig+0xb0>)
 80045c4:	4293      	cmp	r3, r2
 80045c6:	d109      	bne.n	80045dc <TIM_OC6_SetConfig+0x80>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80045c8:	697b      	ldr	r3, [r7, #20]
 80045ca:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80045ce:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80045d0:	683b      	ldr	r3, [r7, #0]
 80045d2:	695b      	ldr	r3, [r3, #20]
 80045d4:	029b      	lsls	r3, r3, #10
 80045d6:	697a      	ldr	r2, [r7, #20]
 80045d8:	4313      	orrs	r3, r2
 80045da:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	697a      	ldr	r2, [r7, #20]
 80045e0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	68fa      	ldr	r2, [r7, #12]
 80045e6:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80045e8:	683b      	ldr	r3, [r7, #0]
 80045ea:	685a      	ldr	r2, [r3, #4]
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	693a      	ldr	r2, [r7, #16]
 80045f4:	621a      	str	r2, [r3, #32]
}
 80045f6:	bf00      	nop
 80045f8:	371c      	adds	r7, #28
 80045fa:	46bd      	mov	sp, r7
 80045fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004600:	4770      	bx	lr
 8004602:	bf00      	nop
 8004604:	40012c00 	.word	0x40012c00
 8004608:	40014000 	.word	0x40014000
 800460c:	40014400 	.word	0x40014400

08004610 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8004610:	b580      	push	{r7, lr}
 8004612:	b086      	sub	sp, #24
 8004614:	af00      	add	r7, sp, #0
 8004616:	6078      	str	r0, [r7, #4]
 8004618:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800461a:	2300      	movs	r3, #0
 800461c:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	689b      	ldr	r3, [r3, #8]
 8004624:	613b      	str	r3, [r7, #16]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004626:	693b      	ldr	r3, [r7, #16]
 8004628:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800462c:	613b      	str	r3, [r7, #16]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 800462e:	683b      	ldr	r3, [r7, #0]
 8004630:	685b      	ldr	r3, [r3, #4]
 8004632:	693a      	ldr	r2, [r7, #16]
 8004634:	4313      	orrs	r3, r2
 8004636:	613b      	str	r3, [r7, #16]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 8004638:	693b      	ldr	r3, [r7, #16]
 800463a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800463e:	f023 0307 	bic.w	r3, r3, #7
 8004642:	613b      	str	r3, [r7, #16]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 8004644:	683b      	ldr	r3, [r7, #0]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	693a      	ldr	r2, [r7, #16]
 800464a:	4313      	orrs	r3, r2
 800464c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	693a      	ldr	r2, [r7, #16]
 8004654:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 8004656:	683b      	ldr	r3, [r7, #0]
 8004658:	685b      	ldr	r3, [r3, #4]
 800465a:	2b70      	cmp	r3, #112	@ 0x70
 800465c:	d01a      	beq.n	8004694 <TIM_SlaveTimer_SetConfig+0x84>
 800465e:	2b70      	cmp	r3, #112	@ 0x70
 8004660:	d860      	bhi.n	8004724 <TIM_SlaveTimer_SetConfig+0x114>
 8004662:	2b60      	cmp	r3, #96	@ 0x60
 8004664:	d054      	beq.n	8004710 <TIM_SlaveTimer_SetConfig+0x100>
 8004666:	2b60      	cmp	r3, #96	@ 0x60
 8004668:	d85c      	bhi.n	8004724 <TIM_SlaveTimer_SetConfig+0x114>
 800466a:	2b50      	cmp	r3, #80	@ 0x50
 800466c:	d046      	beq.n	80046fc <TIM_SlaveTimer_SetConfig+0xec>
 800466e:	2b50      	cmp	r3, #80	@ 0x50
 8004670:	d858      	bhi.n	8004724 <TIM_SlaveTimer_SetConfig+0x114>
 8004672:	2b40      	cmp	r3, #64	@ 0x40
 8004674:	d019      	beq.n	80046aa <TIM_SlaveTimer_SetConfig+0x9a>
 8004676:	2b40      	cmp	r3, #64	@ 0x40
 8004678:	d854      	bhi.n	8004724 <TIM_SlaveTimer_SetConfig+0x114>
 800467a:	2b30      	cmp	r3, #48	@ 0x30
 800467c:	d055      	beq.n	800472a <TIM_SlaveTimer_SetConfig+0x11a>
 800467e:	2b30      	cmp	r3, #48	@ 0x30
 8004680:	d850      	bhi.n	8004724 <TIM_SlaveTimer_SetConfig+0x114>
 8004682:	2b20      	cmp	r3, #32
 8004684:	d051      	beq.n	800472a <TIM_SlaveTimer_SetConfig+0x11a>
 8004686:	2b20      	cmp	r3, #32
 8004688:	d84c      	bhi.n	8004724 <TIM_SlaveTimer_SetConfig+0x114>
 800468a:	2b00      	cmp	r3, #0
 800468c:	d04d      	beq.n	800472a <TIM_SlaveTimer_SetConfig+0x11a>
 800468e:	2b10      	cmp	r3, #16
 8004690:	d04b      	beq.n	800472a <TIM_SlaveTimer_SetConfig+0x11a>
 8004692:	e047      	b.n	8004724 <TIM_SlaveTimer_SetConfig+0x114>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPRESCALER(sSlaveConfig->TriggerPrescaler));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
      /* Configure the ETR Trigger source */
      TIM_ETR_SetConfig(htim->Instance,
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	6818      	ldr	r0, [r3, #0]
                        sSlaveConfig->TriggerPrescaler,
 8004698:	683b      	ldr	r3, [r7, #0]
 800469a:	68d9      	ldr	r1, [r3, #12]
                        sSlaveConfig->TriggerPolarity,
 800469c:	683b      	ldr	r3, [r7, #0]
 800469e:	689a      	ldr	r2, [r3, #8]
                        sSlaveConfig->TriggerFilter);
 80046a0:	683b      	ldr	r3, [r7, #0]
 80046a2:	691b      	ldr	r3, [r3, #16]
      TIM_ETR_SetConfig(htim->Instance,
 80046a4:	f000 f9ce 	bl	8004a44 <TIM_ETR_SetConfig>
      break;
 80046a8:	e040      	b.n	800472c <TIM_SlaveTimer_SetConfig+0x11c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 80046aa:	683b      	ldr	r3, [r7, #0]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	2b05      	cmp	r3, #5
 80046b0:	d101      	bne.n	80046b6 <TIM_SlaveTimer_SetConfig+0xa6>
      {
        return HAL_ERROR;
 80046b2:	2301      	movs	r3, #1
 80046b4:	e03b      	b.n	800472e <TIM_SlaveTimer_SetConfig+0x11e>
      }

      /* Disable the Channel 1: Reset the CC1E Bit */
      tmpccer = htim->Instance->CCER;
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	6a1b      	ldr	r3, [r3, #32]
 80046bc:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	6a1a      	ldr	r2, [r3, #32]
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	f022 0201 	bic.w	r2, r2, #1
 80046cc:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	699b      	ldr	r3, [r3, #24]
 80046d4:	60bb      	str	r3, [r7, #8]

      /* Set the filter */
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80046d6:	68bb      	ldr	r3, [r7, #8]
 80046d8:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80046dc:	60bb      	str	r3, [r7, #8]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 80046de:	683b      	ldr	r3, [r7, #0]
 80046e0:	691b      	ldr	r3, [r3, #16]
 80046e2:	011b      	lsls	r3, r3, #4
 80046e4:	68ba      	ldr	r2, [r7, #8]
 80046e6:	4313      	orrs	r3, r2
 80046e8:	60bb      	str	r3, [r7, #8]

      /* Write to TIMx CCMR1 and CCER registers */
      htim->Instance->CCMR1 = tmpccmr1;
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	68ba      	ldr	r2, [r7, #8]
 80046f0:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	68fa      	ldr	r2, [r7, #12]
 80046f8:	621a      	str	r2, [r3, #32]
      break;
 80046fa:	e017      	b.n	800472c <TIM_SlaveTimer_SetConfig+0x11c>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI1 Filter and Polarity */
      TIM_TI1_ConfigInputStage(htim->Instance,
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 8004700:	683b      	ldr	r3, [r7, #0]
 8004702:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 8004704:	683b      	ldr	r3, [r7, #0]
 8004706:	691b      	ldr	r3, [r3, #16]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004708:	461a      	mov	r2, r3
 800470a:	f000 f86b 	bl	80047e4 <TIM_TI1_ConfigInputStage>
      break;
 800470e:	e00d      	b.n	800472c <TIM_SlaveTimer_SetConfig+0x11c>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI2 Filter and Polarity */
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 8004714:	683b      	ldr	r3, [r7, #0]
 8004716:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 8004718:	683b      	ldr	r3, [r7, #0]
 800471a:	691b      	ldr	r3, [r3, #16]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800471c:	461a      	mov	r2, r3
 800471e:	f000 f8cd 	bl	80048bc <TIM_TI2_ConfigInputStage>
      break;
 8004722:	e003      	b.n	800472c <TIM_SlaveTimer_SetConfig+0x11c>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      break;
    }

    default:
      status = HAL_ERROR;
 8004724:	2301      	movs	r3, #1
 8004726:	75fb      	strb	r3, [r7, #23]
      break;
 8004728:	e000      	b.n	800472c <TIM_SlaveTimer_SetConfig+0x11c>
      break;
 800472a:	bf00      	nop
  }

  return status;
 800472c:	7dfb      	ldrb	r3, [r7, #23]
}
 800472e:	4618      	mov	r0, r3
 8004730:	3718      	adds	r7, #24
 8004732:	46bd      	mov	sp, r7
 8004734:	bd80      	pop	{r7, pc}
	...

08004738 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8004738:	b480      	push	{r7}
 800473a:	b087      	sub	sp, #28
 800473c:	af00      	add	r7, sp, #0
 800473e:	60f8      	str	r0, [r7, #12]
 8004740:	60b9      	str	r1, [r7, #8]
 8004742:	607a      	str	r2, [r7, #4]
 8004744:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004746:	68fb      	ldr	r3, [r7, #12]
 8004748:	6a1b      	ldr	r3, [r3, #32]
 800474a:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	6a1b      	ldr	r3, [r3, #32]
 8004750:	f023 0201 	bic.w	r2, r3, #1
 8004754:	68fb      	ldr	r3, [r7, #12]
 8004756:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	699b      	ldr	r3, [r3, #24]
 800475c:	617b      	str	r3, [r7, #20]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 800475e:	68fb      	ldr	r3, [r7, #12]
 8004760:	4a1e      	ldr	r2, [pc, #120]	@ (80047dc <TIM_TI1_SetConfig+0xa4>)
 8004762:	4293      	cmp	r3, r2
 8004764:	d007      	beq.n	8004776 <TIM_TI1_SetConfig+0x3e>
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800476c:	d003      	beq.n	8004776 <TIM_TI1_SetConfig+0x3e>
 800476e:	68fb      	ldr	r3, [r7, #12]
 8004770:	4a1b      	ldr	r2, [pc, #108]	@ (80047e0 <TIM_TI1_SetConfig+0xa8>)
 8004772:	4293      	cmp	r3, r2
 8004774:	d101      	bne.n	800477a <TIM_TI1_SetConfig+0x42>
 8004776:	2301      	movs	r3, #1
 8004778:	e000      	b.n	800477c <TIM_TI1_SetConfig+0x44>
 800477a:	2300      	movs	r3, #0
 800477c:	2b00      	cmp	r3, #0
 800477e:	d008      	beq.n	8004792 <TIM_TI1_SetConfig+0x5a>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8004780:	697b      	ldr	r3, [r7, #20]
 8004782:	f023 0303 	bic.w	r3, r3, #3
 8004786:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8004788:	697a      	ldr	r2, [r7, #20]
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	4313      	orrs	r3, r2
 800478e:	617b      	str	r3, [r7, #20]
 8004790:	e003      	b.n	800479a <TIM_TI1_SetConfig+0x62>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8004792:	697b      	ldr	r3, [r7, #20]
 8004794:	f043 0301 	orr.w	r3, r3, #1
 8004798:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800479a:	697b      	ldr	r3, [r7, #20]
 800479c:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80047a0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 80047a2:	683b      	ldr	r3, [r7, #0]
 80047a4:	011b      	lsls	r3, r3, #4
 80047a6:	b2db      	uxtb	r3, r3
 80047a8:	697a      	ldr	r2, [r7, #20]
 80047aa:	4313      	orrs	r3, r2
 80047ac:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80047ae:	693b      	ldr	r3, [r7, #16]
 80047b0:	f023 030a 	bic.w	r3, r3, #10
 80047b4:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 80047b6:	68bb      	ldr	r3, [r7, #8]
 80047b8:	f003 030a 	and.w	r3, r3, #10
 80047bc:	693a      	ldr	r2, [r7, #16]
 80047be:	4313      	orrs	r3, r2
 80047c0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80047c2:	68fb      	ldr	r3, [r7, #12]
 80047c4:	697a      	ldr	r2, [r7, #20]
 80047c6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80047c8:	68fb      	ldr	r3, [r7, #12]
 80047ca:	693a      	ldr	r2, [r7, #16]
 80047cc:	621a      	str	r2, [r3, #32]
}
 80047ce:	bf00      	nop
 80047d0:	371c      	adds	r7, #28
 80047d2:	46bd      	mov	sp, r7
 80047d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047d8:	4770      	bx	lr
 80047da:	bf00      	nop
 80047dc:	40012c00 	.word	0x40012c00
 80047e0:	40014000 	.word	0x40014000

080047e4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80047e4:	b480      	push	{r7}
 80047e6:	b087      	sub	sp, #28
 80047e8:	af00      	add	r7, sp, #0
 80047ea:	60f8      	str	r0, [r7, #12]
 80047ec:	60b9      	str	r1, [r7, #8]
 80047ee:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80047f0:	68fb      	ldr	r3, [r7, #12]
 80047f2:	6a1b      	ldr	r3, [r3, #32]
 80047f4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80047f6:	68fb      	ldr	r3, [r7, #12]
 80047f8:	6a1b      	ldr	r3, [r3, #32]
 80047fa:	f023 0201 	bic.w	r2, r3, #1
 80047fe:	68fb      	ldr	r3, [r7, #12]
 8004800:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004802:	68fb      	ldr	r3, [r7, #12]
 8004804:	699b      	ldr	r3, [r3, #24]
 8004806:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004808:	693b      	ldr	r3, [r7, #16]
 800480a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800480e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	011b      	lsls	r3, r3, #4
 8004814:	693a      	ldr	r2, [r7, #16]
 8004816:	4313      	orrs	r3, r2
 8004818:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800481a:	697b      	ldr	r3, [r7, #20]
 800481c:	f023 030a 	bic.w	r3, r3, #10
 8004820:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004822:	697a      	ldr	r2, [r7, #20]
 8004824:	68bb      	ldr	r3, [r7, #8]
 8004826:	4313      	orrs	r3, r2
 8004828:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800482a:	68fb      	ldr	r3, [r7, #12]
 800482c:	693a      	ldr	r2, [r7, #16]
 800482e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	697a      	ldr	r2, [r7, #20]
 8004834:	621a      	str	r2, [r3, #32]
}
 8004836:	bf00      	nop
 8004838:	371c      	adds	r7, #28
 800483a:	46bd      	mov	sp, r7
 800483c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004840:	4770      	bx	lr

08004842 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8004842:	b480      	push	{r7}
 8004844:	b087      	sub	sp, #28
 8004846:	af00      	add	r7, sp, #0
 8004848:	60f8      	str	r0, [r7, #12]
 800484a:	60b9      	str	r1, [r7, #8]
 800484c:	607a      	str	r2, [r7, #4]
 800484e:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	6a1b      	ldr	r3, [r3, #32]
 8004854:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004856:	68fb      	ldr	r3, [r7, #12]
 8004858:	6a1b      	ldr	r3, [r3, #32]
 800485a:	f023 0210 	bic.w	r2, r3, #16
 800485e:	68fb      	ldr	r3, [r7, #12]
 8004860:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004862:	68fb      	ldr	r3, [r7, #12]
 8004864:	699b      	ldr	r3, [r3, #24]
 8004866:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8004868:	693b      	ldr	r3, [r7, #16]
 800486a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800486e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	021b      	lsls	r3, r3, #8
 8004874:	693a      	ldr	r2, [r7, #16]
 8004876:	4313      	orrs	r3, r2
 8004878:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800487a:	693b      	ldr	r3, [r7, #16]
 800487c:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8004880:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8004882:	683b      	ldr	r3, [r7, #0]
 8004884:	031b      	lsls	r3, r3, #12
 8004886:	b29b      	uxth	r3, r3
 8004888:	693a      	ldr	r2, [r7, #16]
 800488a:	4313      	orrs	r3, r2
 800488c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800488e:	697b      	ldr	r3, [r7, #20]
 8004890:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8004894:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8004896:	68bb      	ldr	r3, [r7, #8]
 8004898:	011b      	lsls	r3, r3, #4
 800489a:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 800489e:	697a      	ldr	r2, [r7, #20]
 80048a0:	4313      	orrs	r3, r2
 80048a2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80048a4:	68fb      	ldr	r3, [r7, #12]
 80048a6:	693a      	ldr	r2, [r7, #16]
 80048a8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80048aa:	68fb      	ldr	r3, [r7, #12]
 80048ac:	697a      	ldr	r2, [r7, #20]
 80048ae:	621a      	str	r2, [r3, #32]
}
 80048b0:	bf00      	nop
 80048b2:	371c      	adds	r7, #28
 80048b4:	46bd      	mov	sp, r7
 80048b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048ba:	4770      	bx	lr

080048bc <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80048bc:	b480      	push	{r7}
 80048be:	b087      	sub	sp, #28
 80048c0:	af00      	add	r7, sp, #0
 80048c2:	60f8      	str	r0, [r7, #12]
 80048c4:	60b9      	str	r1, [r7, #8]
 80048c6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80048c8:	68fb      	ldr	r3, [r7, #12]
 80048ca:	6a1b      	ldr	r3, [r3, #32]
 80048cc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80048ce:	68fb      	ldr	r3, [r7, #12]
 80048d0:	6a1b      	ldr	r3, [r3, #32]
 80048d2:	f023 0210 	bic.w	r2, r3, #16
 80048d6:	68fb      	ldr	r3, [r7, #12]
 80048d8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80048da:	68fb      	ldr	r3, [r7, #12]
 80048dc:	699b      	ldr	r3, [r3, #24]
 80048de:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80048e0:	693b      	ldr	r3, [r7, #16]
 80048e2:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80048e6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	031b      	lsls	r3, r3, #12
 80048ec:	693a      	ldr	r2, [r7, #16]
 80048ee:	4313      	orrs	r3, r2
 80048f0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80048f2:	697b      	ldr	r3, [r7, #20]
 80048f4:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80048f8:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80048fa:	68bb      	ldr	r3, [r7, #8]
 80048fc:	011b      	lsls	r3, r3, #4
 80048fe:	697a      	ldr	r2, [r7, #20]
 8004900:	4313      	orrs	r3, r2
 8004902:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004904:	68fb      	ldr	r3, [r7, #12]
 8004906:	693a      	ldr	r2, [r7, #16]
 8004908:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800490a:	68fb      	ldr	r3, [r7, #12]
 800490c:	697a      	ldr	r2, [r7, #20]
 800490e:	621a      	str	r2, [r3, #32]
}
 8004910:	bf00      	nop
 8004912:	371c      	adds	r7, #28
 8004914:	46bd      	mov	sp, r7
 8004916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800491a:	4770      	bx	lr

0800491c <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800491c:	b480      	push	{r7}
 800491e:	b087      	sub	sp, #28
 8004920:	af00      	add	r7, sp, #0
 8004922:	60f8      	str	r0, [r7, #12]
 8004924:	60b9      	str	r1, [r7, #8]
 8004926:	607a      	str	r2, [r7, #4]
 8004928:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  tmpccer = TIMx->CCER;
 800492a:	68fb      	ldr	r3, [r7, #12]
 800492c:	6a1b      	ldr	r3, [r3, #32]
 800492e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004930:	68fb      	ldr	r3, [r7, #12]
 8004932:	6a1b      	ldr	r3, [r3, #32]
 8004934:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800493c:	68fb      	ldr	r3, [r7, #12]
 800493e:	69db      	ldr	r3, [r3, #28]
 8004940:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8004942:	693b      	ldr	r3, [r7, #16]
 8004944:	f023 0303 	bic.w	r3, r3, #3
 8004948:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= TIM_ICSelection;
 800494a:	693a      	ldr	r2, [r7, #16]
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	4313      	orrs	r3, r2
 8004950:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8004952:	693b      	ldr	r3, [r7, #16]
 8004954:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004958:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 800495a:	683b      	ldr	r3, [r7, #0]
 800495c:	011b      	lsls	r3, r3, #4
 800495e:	b2db      	uxtb	r3, r3
 8004960:	693a      	ldr	r2, [r7, #16]
 8004962:	4313      	orrs	r3, r2
 8004964:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8004966:	697b      	ldr	r3, [r7, #20]
 8004968:	f423 6320 	bic.w	r3, r3, #2560	@ 0xa00
 800496c:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 800496e:	68bb      	ldr	r3, [r7, #8]
 8004970:	021b      	lsls	r3, r3, #8
 8004972:	f403 6320 	and.w	r3, r3, #2560	@ 0xa00
 8004976:	697a      	ldr	r2, [r7, #20]
 8004978:	4313      	orrs	r3, r2
 800497a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800497c:	68fb      	ldr	r3, [r7, #12]
 800497e:	693a      	ldr	r2, [r7, #16]
 8004980:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8004982:	68fb      	ldr	r3, [r7, #12]
 8004984:	697a      	ldr	r2, [r7, #20]
 8004986:	621a      	str	r2, [r3, #32]
}
 8004988:	bf00      	nop
 800498a:	371c      	adds	r7, #28
 800498c:	46bd      	mov	sp, r7
 800498e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004992:	4770      	bx	lr

08004994 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8004994:	b480      	push	{r7}
 8004996:	b087      	sub	sp, #28
 8004998:	af00      	add	r7, sp, #0
 800499a:	60f8      	str	r0, [r7, #12]
 800499c:	60b9      	str	r1, [r7, #8]
 800499e:	607a      	str	r2, [r7, #4]
 80049a0:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  tmpccer = TIMx->CCER;
 80049a2:	68fb      	ldr	r3, [r7, #12]
 80049a4:	6a1b      	ldr	r3, [r3, #32]
 80049a6:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80049a8:	68fb      	ldr	r3, [r7, #12]
 80049aa:	6a1b      	ldr	r3, [r3, #32]
 80049ac:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80049b0:	68fb      	ldr	r3, [r7, #12]
 80049b2:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80049b4:	68fb      	ldr	r3, [r7, #12]
 80049b6:	69db      	ldr	r3, [r3, #28]
 80049b8:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 80049ba:	693b      	ldr	r3, [r7, #16]
 80049bc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80049c0:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	021b      	lsls	r3, r3, #8
 80049c6:	693a      	ldr	r2, [r7, #16]
 80049c8:	4313      	orrs	r3, r2
 80049ca:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 80049cc:	693b      	ldr	r3, [r7, #16]
 80049ce:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80049d2:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 80049d4:	683b      	ldr	r3, [r7, #0]
 80049d6:	031b      	lsls	r3, r3, #12
 80049d8:	b29b      	uxth	r3, r3
 80049da:	693a      	ldr	r2, [r7, #16]
 80049dc:	4313      	orrs	r3, r2
 80049de:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 80049e0:	697b      	ldr	r3, [r7, #20]
 80049e2:	f423 4320 	bic.w	r3, r3, #40960	@ 0xa000
 80049e6:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 80049e8:	68bb      	ldr	r3, [r7, #8]
 80049ea:	031b      	lsls	r3, r3, #12
 80049ec:	f403 4320 	and.w	r3, r3, #40960	@ 0xa000
 80049f0:	697a      	ldr	r2, [r7, #20]
 80049f2:	4313      	orrs	r3, r2
 80049f4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80049f6:	68fb      	ldr	r3, [r7, #12]
 80049f8:	693a      	ldr	r2, [r7, #16]
 80049fa:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	697a      	ldr	r2, [r7, #20]
 8004a00:	621a      	str	r2, [r3, #32]
}
 8004a02:	bf00      	nop
 8004a04:	371c      	adds	r7, #28
 8004a06:	46bd      	mov	sp, r7
 8004a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a0c:	4770      	bx	lr

08004a0e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004a0e:	b480      	push	{r7}
 8004a10:	b085      	sub	sp, #20
 8004a12:	af00      	add	r7, sp, #0
 8004a14:	6078      	str	r0, [r7, #4]
 8004a16:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	689b      	ldr	r3, [r3, #8]
 8004a1c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004a1e:	68fb      	ldr	r3, [r7, #12]
 8004a20:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004a24:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004a26:	683a      	ldr	r2, [r7, #0]
 8004a28:	68fb      	ldr	r3, [r7, #12]
 8004a2a:	4313      	orrs	r3, r2
 8004a2c:	f043 0307 	orr.w	r3, r3, #7
 8004a30:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	68fa      	ldr	r2, [r7, #12]
 8004a36:	609a      	str	r2, [r3, #8]
}
 8004a38:	bf00      	nop
 8004a3a:	3714      	adds	r7, #20
 8004a3c:	46bd      	mov	sp, r7
 8004a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a42:	4770      	bx	lr

08004a44 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004a44:	b480      	push	{r7}
 8004a46:	b087      	sub	sp, #28
 8004a48:	af00      	add	r7, sp, #0
 8004a4a:	60f8      	str	r0, [r7, #12]
 8004a4c:	60b9      	str	r1, [r7, #8]
 8004a4e:	607a      	str	r2, [r7, #4]
 8004a50:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004a52:	68fb      	ldr	r3, [r7, #12]
 8004a54:	689b      	ldr	r3, [r3, #8]
 8004a56:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004a58:	697b      	ldr	r3, [r7, #20]
 8004a5a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004a5e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004a60:	683b      	ldr	r3, [r7, #0]
 8004a62:	021a      	lsls	r2, r3, #8
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	431a      	orrs	r2, r3
 8004a68:	68bb      	ldr	r3, [r7, #8]
 8004a6a:	4313      	orrs	r3, r2
 8004a6c:	697a      	ldr	r2, [r7, #20]
 8004a6e:	4313      	orrs	r3, r2
 8004a70:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004a72:	68fb      	ldr	r3, [r7, #12]
 8004a74:	697a      	ldr	r2, [r7, #20]
 8004a76:	609a      	str	r2, [r3, #8]
}
 8004a78:	bf00      	nop
 8004a7a:	371c      	adds	r7, #28
 8004a7c:	46bd      	mov	sp, r7
 8004a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a82:	4770      	bx	lr

08004a84 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004a84:	b480      	push	{r7}
 8004a86:	b085      	sub	sp, #20
 8004a88:	af00      	add	r7, sp, #0
 8004a8a:	6078      	str	r0, [r7, #4]
 8004a8c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004a94:	2b01      	cmp	r3, #1
 8004a96:	d101      	bne.n	8004a9c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004a98:	2302      	movs	r3, #2
 8004a9a:	e04f      	b.n	8004b3c <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	2201      	movs	r2, #1
 8004aa0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	2202      	movs	r2, #2
 8004aa8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	685b      	ldr	r3, [r3, #4]
 8004ab2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	689b      	ldr	r3, [r3, #8]
 8004aba:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	4a21      	ldr	r2, [pc, #132]	@ (8004b48 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8004ac2:	4293      	cmp	r3, r2
 8004ac4:	d108      	bne.n	8004ad8 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8004ac6:	68fb      	ldr	r3, [r7, #12]
 8004ac8:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8004acc:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8004ace:	683b      	ldr	r3, [r7, #0]
 8004ad0:	685b      	ldr	r3, [r3, #4]
 8004ad2:	68fa      	ldr	r2, [r7, #12]
 8004ad4:	4313      	orrs	r3, r2
 8004ad6:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004ad8:	68fb      	ldr	r3, [r7, #12]
 8004ada:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004ade:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004ae0:	683b      	ldr	r3, [r7, #0]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	68fa      	ldr	r2, [r7, #12]
 8004ae6:	4313      	orrs	r3, r2
 8004ae8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	68fa      	ldr	r2, [r7, #12]
 8004af0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	4a14      	ldr	r2, [pc, #80]	@ (8004b48 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8004af8:	4293      	cmp	r3, r2
 8004afa:	d009      	beq.n	8004b10 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004b04:	d004      	beq.n	8004b10 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	4a10      	ldr	r2, [pc, #64]	@ (8004b4c <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8004b0c:	4293      	cmp	r3, r2
 8004b0e:	d10c      	bne.n	8004b2a <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004b10:	68bb      	ldr	r3, [r7, #8]
 8004b12:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004b16:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004b18:	683b      	ldr	r3, [r7, #0]
 8004b1a:	689b      	ldr	r3, [r3, #8]
 8004b1c:	68ba      	ldr	r2, [r7, #8]
 8004b1e:	4313      	orrs	r3, r2
 8004b20:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	68ba      	ldr	r2, [r7, #8]
 8004b28:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	2201      	movs	r2, #1
 8004b2e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	2200      	movs	r2, #0
 8004b36:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004b3a:	2300      	movs	r3, #0
}
 8004b3c:	4618      	mov	r0, r3
 8004b3e:	3714      	adds	r7, #20
 8004b40:	46bd      	mov	sp, r7
 8004b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b46:	4770      	bx	lr
 8004b48:	40012c00 	.word	0x40012c00
 8004b4c:	40014000 	.word	0x40014000

08004b50 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8004b50:	b480      	push	{r7}
 8004b52:	b085      	sub	sp, #20
 8004b54:	af00      	add	r7, sp, #0
 8004b56:	6078      	str	r0, [r7, #4]
 8004b58:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8004b5a:	2300      	movs	r3, #0
 8004b5c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004b64:	2b01      	cmp	r3, #1
 8004b66:	d101      	bne.n	8004b6c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8004b68:	2302      	movs	r3, #2
 8004b6a:	e060      	b.n	8004c2e <HAL_TIMEx_ConfigBreakDeadTime+0xde>
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	2201      	movs	r2, #1
 8004b70:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8004b7a:	683b      	ldr	r3, [r7, #0]
 8004b7c:	68db      	ldr	r3, [r3, #12]
 8004b7e:	4313      	orrs	r3, r2
 8004b80:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8004b82:	68fb      	ldr	r3, [r7, #12]
 8004b84:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004b88:	683b      	ldr	r3, [r7, #0]
 8004b8a:	689b      	ldr	r3, [r3, #8]
 8004b8c:	4313      	orrs	r3, r2
 8004b8e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8004b90:	68fb      	ldr	r3, [r7, #12]
 8004b92:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8004b96:	683b      	ldr	r3, [r7, #0]
 8004b98:	685b      	ldr	r3, [r3, #4]
 8004b9a:	4313      	orrs	r3, r2
 8004b9c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8004b9e:	68fb      	ldr	r3, [r7, #12]
 8004ba0:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8004ba4:	683b      	ldr	r3, [r7, #0]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	4313      	orrs	r3, r2
 8004baa:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8004bac:	68fb      	ldr	r3, [r7, #12]
 8004bae:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8004bb2:	683b      	ldr	r3, [r7, #0]
 8004bb4:	691b      	ldr	r3, [r3, #16]
 8004bb6:	4313      	orrs	r3, r2
 8004bb8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8004bba:	68fb      	ldr	r3, [r7, #12]
 8004bbc:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8004bc0:	683b      	ldr	r3, [r7, #0]
 8004bc2:	695b      	ldr	r3, [r3, #20]
 8004bc4:	4313      	orrs	r3, r2
 8004bc6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8004bc8:	68fb      	ldr	r3, [r7, #12]
 8004bca:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8004bce:	683b      	ldr	r3, [r7, #0]
 8004bd0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004bd2:	4313      	orrs	r3, r2
 8004bd4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8004bd6:	68fb      	ldr	r3, [r7, #12]
 8004bd8:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 8004bdc:	683b      	ldr	r3, [r7, #0]
 8004bde:	699b      	ldr	r3, [r3, #24]
 8004be0:	041b      	lsls	r3, r3, #16
 8004be2:	4313      	orrs	r3, r2
 8004be4:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	4a14      	ldr	r2, [pc, #80]	@ (8004c3c <HAL_TIMEx_ConfigBreakDeadTime+0xec>)
 8004bec:	4293      	cmp	r3, r2
 8004bee:	d115      	bne.n	8004c1c <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8004bf0:	68fb      	ldr	r3, [r7, #12]
 8004bf2:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 8004bf6:	683b      	ldr	r3, [r7, #0]
 8004bf8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004bfa:	051b      	lsls	r3, r3, #20
 8004bfc:	4313      	orrs	r3, r2
 8004bfe:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8004c00:	68fb      	ldr	r3, [r7, #12]
 8004c02:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8004c06:	683b      	ldr	r3, [r7, #0]
 8004c08:	69db      	ldr	r3, [r3, #28]
 8004c0a:	4313      	orrs	r3, r2
 8004c0c:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8004c0e:	68fb      	ldr	r3, [r7, #12]
 8004c10:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8004c14:	683b      	ldr	r3, [r7, #0]
 8004c16:	6a1b      	ldr	r3, [r3, #32]
 8004c18:	4313      	orrs	r3, r2
 8004c1a:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	68fa      	ldr	r2, [r7, #12]
 8004c22:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	2200      	movs	r2, #0
 8004c28:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004c2c:	2300      	movs	r3, #0
}
 8004c2e:	4618      	mov	r0, r3
 8004c30:	3714      	adds	r7, #20
 8004c32:	46bd      	mov	sp, r7
 8004c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c38:	4770      	bx	lr
 8004c3a:	bf00      	nop
 8004c3c:	40012c00 	.word	0x40012c00

08004c40 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004c40:	b580      	push	{r7, lr}
 8004c42:	b082      	sub	sp, #8
 8004c44:	af00      	add	r7, sp, #0
 8004c46:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	2b00      	cmp	r3, #0
 8004c4c:	d101      	bne.n	8004c52 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004c4e:	2301      	movs	r3, #1
 8004c50:	e040      	b.n	8004cd4 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004c56:	2b00      	cmp	r3, #0
 8004c58:	d106      	bne.n	8004c68 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	2200      	movs	r2, #0
 8004c5e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004c62:	6878      	ldr	r0, [r7, #4]
 8004c64:	f7fc fbdc 	bl	8001420 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	2224      	movs	r2, #36	@ 0x24
 8004c6c:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	681a      	ldr	r2, [r3, #0]
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	f022 0201 	bic.w	r2, r2, #1
 8004c7c:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c82:	2b00      	cmp	r3, #0
 8004c84:	d002      	beq.n	8004c8c <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8004c86:	6878      	ldr	r0, [r7, #4]
 8004c88:	f000 fa54 	bl	8005134 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004c8c:	6878      	ldr	r0, [r7, #4]
 8004c8e:	f000 f825 	bl	8004cdc <UART_SetConfig>
 8004c92:	4603      	mov	r3, r0
 8004c94:	2b01      	cmp	r3, #1
 8004c96:	d101      	bne.n	8004c9c <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8004c98:	2301      	movs	r3, #1
 8004c9a:	e01b      	b.n	8004cd4 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	685a      	ldr	r2, [r3, #4]
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004caa:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	689a      	ldr	r2, [r3, #8]
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004cba:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	681a      	ldr	r2, [r3, #0]
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	f042 0201 	orr.w	r2, r2, #1
 8004cca:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004ccc:	6878      	ldr	r0, [r7, #4]
 8004cce:	f000 fad3 	bl	8005278 <UART_CheckIdleState>
 8004cd2:	4603      	mov	r3, r0
}
 8004cd4:	4618      	mov	r0, r3
 8004cd6:	3708      	adds	r7, #8
 8004cd8:	46bd      	mov	sp, r7
 8004cda:	bd80      	pop	{r7, pc}

08004cdc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004cdc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004ce0:	b08a      	sub	sp, #40	@ 0x28
 8004ce2:	af00      	add	r7, sp, #0
 8004ce4:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004ce6:	2300      	movs	r3, #0
 8004ce8:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004cec:	68fb      	ldr	r3, [r7, #12]
 8004cee:	689a      	ldr	r2, [r3, #8]
 8004cf0:	68fb      	ldr	r3, [r7, #12]
 8004cf2:	691b      	ldr	r3, [r3, #16]
 8004cf4:	431a      	orrs	r2, r3
 8004cf6:	68fb      	ldr	r3, [r7, #12]
 8004cf8:	695b      	ldr	r3, [r3, #20]
 8004cfa:	431a      	orrs	r2, r3
 8004cfc:	68fb      	ldr	r3, [r7, #12]
 8004cfe:	69db      	ldr	r3, [r3, #28]
 8004d00:	4313      	orrs	r3, r2
 8004d02:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004d04:	68fb      	ldr	r3, [r7, #12]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	681a      	ldr	r2, [r3, #0]
 8004d0a:	4bb4      	ldr	r3, [pc, #720]	@ (8004fdc <UART_SetConfig+0x300>)
 8004d0c:	4013      	ands	r3, r2
 8004d0e:	68fa      	ldr	r2, [r7, #12]
 8004d10:	6812      	ldr	r2, [r2, #0]
 8004d12:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8004d14:	430b      	orrs	r3, r1
 8004d16:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004d18:	68fb      	ldr	r3, [r7, #12]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	685b      	ldr	r3, [r3, #4]
 8004d1e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8004d22:	68fb      	ldr	r3, [r7, #12]
 8004d24:	68da      	ldr	r2, [r3, #12]
 8004d26:	68fb      	ldr	r3, [r7, #12]
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	430a      	orrs	r2, r1
 8004d2c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004d2e:	68fb      	ldr	r3, [r7, #12]
 8004d30:	699b      	ldr	r3, [r3, #24]
 8004d32:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004d34:	68fb      	ldr	r3, [r7, #12]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	4aa9      	ldr	r2, [pc, #676]	@ (8004fe0 <UART_SetConfig+0x304>)
 8004d3a:	4293      	cmp	r3, r2
 8004d3c:	d004      	beq.n	8004d48 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004d3e:	68fb      	ldr	r3, [r7, #12]
 8004d40:	6a1b      	ldr	r3, [r3, #32]
 8004d42:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004d44:	4313      	orrs	r3, r2
 8004d46:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004d48:	68fb      	ldr	r3, [r7, #12]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	689b      	ldr	r3, [r3, #8]
 8004d4e:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8004d52:	68fb      	ldr	r3, [r7, #12]
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004d58:	430a      	orrs	r2, r1
 8004d5a:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004d5c:	68fb      	ldr	r3, [r7, #12]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	4aa0      	ldr	r2, [pc, #640]	@ (8004fe4 <UART_SetConfig+0x308>)
 8004d62:	4293      	cmp	r3, r2
 8004d64:	d126      	bne.n	8004db4 <UART_SetConfig+0xd8>
 8004d66:	4ba0      	ldr	r3, [pc, #640]	@ (8004fe8 <UART_SetConfig+0x30c>)
 8004d68:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004d6c:	f003 0303 	and.w	r3, r3, #3
 8004d70:	2b03      	cmp	r3, #3
 8004d72:	d81b      	bhi.n	8004dac <UART_SetConfig+0xd0>
 8004d74:	a201      	add	r2, pc, #4	@ (adr r2, 8004d7c <UART_SetConfig+0xa0>)
 8004d76:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d7a:	bf00      	nop
 8004d7c:	08004d8d 	.word	0x08004d8d
 8004d80:	08004d9d 	.word	0x08004d9d
 8004d84:	08004d95 	.word	0x08004d95
 8004d88:	08004da5 	.word	0x08004da5
 8004d8c:	2301      	movs	r3, #1
 8004d8e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004d92:	e080      	b.n	8004e96 <UART_SetConfig+0x1ba>
 8004d94:	2302      	movs	r3, #2
 8004d96:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004d9a:	e07c      	b.n	8004e96 <UART_SetConfig+0x1ba>
 8004d9c:	2304      	movs	r3, #4
 8004d9e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004da2:	e078      	b.n	8004e96 <UART_SetConfig+0x1ba>
 8004da4:	2308      	movs	r3, #8
 8004da6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004daa:	e074      	b.n	8004e96 <UART_SetConfig+0x1ba>
 8004dac:	2310      	movs	r3, #16
 8004dae:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004db2:	e070      	b.n	8004e96 <UART_SetConfig+0x1ba>
 8004db4:	68fb      	ldr	r3, [r7, #12]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	4a8c      	ldr	r2, [pc, #560]	@ (8004fec <UART_SetConfig+0x310>)
 8004dba:	4293      	cmp	r3, r2
 8004dbc:	d138      	bne.n	8004e30 <UART_SetConfig+0x154>
 8004dbe:	4b8a      	ldr	r3, [pc, #552]	@ (8004fe8 <UART_SetConfig+0x30c>)
 8004dc0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004dc4:	f003 030c 	and.w	r3, r3, #12
 8004dc8:	2b0c      	cmp	r3, #12
 8004dca:	d82d      	bhi.n	8004e28 <UART_SetConfig+0x14c>
 8004dcc:	a201      	add	r2, pc, #4	@ (adr r2, 8004dd4 <UART_SetConfig+0xf8>)
 8004dce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004dd2:	bf00      	nop
 8004dd4:	08004e09 	.word	0x08004e09
 8004dd8:	08004e29 	.word	0x08004e29
 8004ddc:	08004e29 	.word	0x08004e29
 8004de0:	08004e29 	.word	0x08004e29
 8004de4:	08004e19 	.word	0x08004e19
 8004de8:	08004e29 	.word	0x08004e29
 8004dec:	08004e29 	.word	0x08004e29
 8004df0:	08004e29 	.word	0x08004e29
 8004df4:	08004e11 	.word	0x08004e11
 8004df8:	08004e29 	.word	0x08004e29
 8004dfc:	08004e29 	.word	0x08004e29
 8004e00:	08004e29 	.word	0x08004e29
 8004e04:	08004e21 	.word	0x08004e21
 8004e08:	2300      	movs	r3, #0
 8004e0a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004e0e:	e042      	b.n	8004e96 <UART_SetConfig+0x1ba>
 8004e10:	2302      	movs	r3, #2
 8004e12:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004e16:	e03e      	b.n	8004e96 <UART_SetConfig+0x1ba>
 8004e18:	2304      	movs	r3, #4
 8004e1a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004e1e:	e03a      	b.n	8004e96 <UART_SetConfig+0x1ba>
 8004e20:	2308      	movs	r3, #8
 8004e22:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004e26:	e036      	b.n	8004e96 <UART_SetConfig+0x1ba>
 8004e28:	2310      	movs	r3, #16
 8004e2a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004e2e:	e032      	b.n	8004e96 <UART_SetConfig+0x1ba>
 8004e30:	68fb      	ldr	r3, [r7, #12]
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	4a6a      	ldr	r2, [pc, #424]	@ (8004fe0 <UART_SetConfig+0x304>)
 8004e36:	4293      	cmp	r3, r2
 8004e38:	d12a      	bne.n	8004e90 <UART_SetConfig+0x1b4>
 8004e3a:	4b6b      	ldr	r3, [pc, #428]	@ (8004fe8 <UART_SetConfig+0x30c>)
 8004e3c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004e40:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8004e44:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8004e48:	d01a      	beq.n	8004e80 <UART_SetConfig+0x1a4>
 8004e4a:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8004e4e:	d81b      	bhi.n	8004e88 <UART_SetConfig+0x1ac>
 8004e50:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004e54:	d00c      	beq.n	8004e70 <UART_SetConfig+0x194>
 8004e56:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004e5a:	d815      	bhi.n	8004e88 <UART_SetConfig+0x1ac>
 8004e5c:	2b00      	cmp	r3, #0
 8004e5e:	d003      	beq.n	8004e68 <UART_SetConfig+0x18c>
 8004e60:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004e64:	d008      	beq.n	8004e78 <UART_SetConfig+0x19c>
 8004e66:	e00f      	b.n	8004e88 <UART_SetConfig+0x1ac>
 8004e68:	2300      	movs	r3, #0
 8004e6a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004e6e:	e012      	b.n	8004e96 <UART_SetConfig+0x1ba>
 8004e70:	2302      	movs	r3, #2
 8004e72:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004e76:	e00e      	b.n	8004e96 <UART_SetConfig+0x1ba>
 8004e78:	2304      	movs	r3, #4
 8004e7a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004e7e:	e00a      	b.n	8004e96 <UART_SetConfig+0x1ba>
 8004e80:	2308      	movs	r3, #8
 8004e82:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004e86:	e006      	b.n	8004e96 <UART_SetConfig+0x1ba>
 8004e88:	2310      	movs	r3, #16
 8004e8a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004e8e:	e002      	b.n	8004e96 <UART_SetConfig+0x1ba>
 8004e90:	2310      	movs	r3, #16
 8004e92:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004e96:	68fb      	ldr	r3, [r7, #12]
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	4a51      	ldr	r2, [pc, #324]	@ (8004fe0 <UART_SetConfig+0x304>)
 8004e9c:	4293      	cmp	r3, r2
 8004e9e:	d17a      	bne.n	8004f96 <UART_SetConfig+0x2ba>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004ea0:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8004ea4:	2b08      	cmp	r3, #8
 8004ea6:	d824      	bhi.n	8004ef2 <UART_SetConfig+0x216>
 8004ea8:	a201      	add	r2, pc, #4	@ (adr r2, 8004eb0 <UART_SetConfig+0x1d4>)
 8004eaa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004eae:	bf00      	nop
 8004eb0:	08004ed5 	.word	0x08004ed5
 8004eb4:	08004ef3 	.word	0x08004ef3
 8004eb8:	08004edd 	.word	0x08004edd
 8004ebc:	08004ef3 	.word	0x08004ef3
 8004ec0:	08004ee3 	.word	0x08004ee3
 8004ec4:	08004ef3 	.word	0x08004ef3
 8004ec8:	08004ef3 	.word	0x08004ef3
 8004ecc:	08004ef3 	.word	0x08004ef3
 8004ed0:	08004eeb 	.word	0x08004eeb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004ed4:	f7fd ff7a 	bl	8002dcc <HAL_RCC_GetPCLK1Freq>
 8004ed8:	61f8      	str	r0, [r7, #28]
        break;
 8004eda:	e010      	b.n	8004efe <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004edc:	4b44      	ldr	r3, [pc, #272]	@ (8004ff0 <UART_SetConfig+0x314>)
 8004ede:	61fb      	str	r3, [r7, #28]
        break;
 8004ee0:	e00d      	b.n	8004efe <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004ee2:	f7fd fedb 	bl	8002c9c <HAL_RCC_GetSysClockFreq>
 8004ee6:	61f8      	str	r0, [r7, #28]
        break;
 8004ee8:	e009      	b.n	8004efe <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004eea:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004eee:	61fb      	str	r3, [r7, #28]
        break;
 8004ef0:	e005      	b.n	8004efe <UART_SetConfig+0x222>
      default:
        pclk = 0U;
 8004ef2:	2300      	movs	r3, #0
 8004ef4:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004ef6:	2301      	movs	r3, #1
 8004ef8:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8004efc:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8004efe:	69fb      	ldr	r3, [r7, #28]
 8004f00:	2b00      	cmp	r3, #0
 8004f02:	f000 8107 	beq.w	8005114 <UART_SetConfig+0x438>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004f06:	68fb      	ldr	r3, [r7, #12]
 8004f08:	685a      	ldr	r2, [r3, #4]
 8004f0a:	4613      	mov	r3, r2
 8004f0c:	005b      	lsls	r3, r3, #1
 8004f0e:	4413      	add	r3, r2
 8004f10:	69fa      	ldr	r2, [r7, #28]
 8004f12:	429a      	cmp	r2, r3
 8004f14:	d305      	bcc.n	8004f22 <UART_SetConfig+0x246>
          (pclk > (4096U * huart->Init.BaudRate)))
 8004f16:	68fb      	ldr	r3, [r7, #12]
 8004f18:	685b      	ldr	r3, [r3, #4]
 8004f1a:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004f1c:	69fa      	ldr	r2, [r7, #28]
 8004f1e:	429a      	cmp	r2, r3
 8004f20:	d903      	bls.n	8004f2a <UART_SetConfig+0x24e>
      {
        ret = HAL_ERROR;
 8004f22:	2301      	movs	r3, #1
 8004f24:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8004f28:	e0f4      	b.n	8005114 <UART_SetConfig+0x438>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8004f2a:	69fb      	ldr	r3, [r7, #28]
 8004f2c:	2200      	movs	r2, #0
 8004f2e:	461c      	mov	r4, r3
 8004f30:	4615      	mov	r5, r2
 8004f32:	f04f 0200 	mov.w	r2, #0
 8004f36:	f04f 0300 	mov.w	r3, #0
 8004f3a:	022b      	lsls	r3, r5, #8
 8004f3c:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8004f40:	0222      	lsls	r2, r4, #8
 8004f42:	68f9      	ldr	r1, [r7, #12]
 8004f44:	6849      	ldr	r1, [r1, #4]
 8004f46:	0849      	lsrs	r1, r1, #1
 8004f48:	2000      	movs	r0, #0
 8004f4a:	4688      	mov	r8, r1
 8004f4c:	4681      	mov	r9, r0
 8004f4e:	eb12 0a08 	adds.w	sl, r2, r8
 8004f52:	eb43 0b09 	adc.w	fp, r3, r9
 8004f56:	68fb      	ldr	r3, [r7, #12]
 8004f58:	685b      	ldr	r3, [r3, #4]
 8004f5a:	2200      	movs	r2, #0
 8004f5c:	603b      	str	r3, [r7, #0]
 8004f5e:	607a      	str	r2, [r7, #4]
 8004f60:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004f64:	4650      	mov	r0, sl
 8004f66:	4659      	mov	r1, fp
 8004f68:	f7fb f930 	bl	80001cc <__aeabi_uldivmod>
 8004f6c:	4602      	mov	r2, r0
 8004f6e:	460b      	mov	r3, r1
 8004f70:	4613      	mov	r3, r2
 8004f72:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004f74:	69bb      	ldr	r3, [r7, #24]
 8004f76:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004f7a:	d308      	bcc.n	8004f8e <UART_SetConfig+0x2b2>
 8004f7c:	69bb      	ldr	r3, [r7, #24]
 8004f7e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004f82:	d204      	bcs.n	8004f8e <UART_SetConfig+0x2b2>
        {
          huart->Instance->BRR = usartdiv;
 8004f84:	68fb      	ldr	r3, [r7, #12]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	69ba      	ldr	r2, [r7, #24]
 8004f8a:	60da      	str	r2, [r3, #12]
 8004f8c:	e0c2      	b.n	8005114 <UART_SetConfig+0x438>
        }
        else
        {
          ret = HAL_ERROR;
 8004f8e:	2301      	movs	r3, #1
 8004f90:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8004f94:	e0be      	b.n	8005114 <UART_SetConfig+0x438>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004f96:	68fb      	ldr	r3, [r7, #12]
 8004f98:	69db      	ldr	r3, [r3, #28]
 8004f9a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004f9e:	d16a      	bne.n	8005076 <UART_SetConfig+0x39a>
  {
    switch (clocksource)
 8004fa0:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8004fa4:	2b08      	cmp	r3, #8
 8004fa6:	d834      	bhi.n	8005012 <UART_SetConfig+0x336>
 8004fa8:	a201      	add	r2, pc, #4	@ (adr r2, 8004fb0 <UART_SetConfig+0x2d4>)
 8004faa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004fae:	bf00      	nop
 8004fb0:	08004fd5 	.word	0x08004fd5
 8004fb4:	08004ff5 	.word	0x08004ff5
 8004fb8:	08004ffd 	.word	0x08004ffd
 8004fbc:	08005013 	.word	0x08005013
 8004fc0:	08005003 	.word	0x08005003
 8004fc4:	08005013 	.word	0x08005013
 8004fc8:	08005013 	.word	0x08005013
 8004fcc:	08005013 	.word	0x08005013
 8004fd0:	0800500b 	.word	0x0800500b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004fd4:	f7fd fefa 	bl	8002dcc <HAL_RCC_GetPCLK1Freq>
 8004fd8:	61f8      	str	r0, [r7, #28]
        break;
 8004fda:	e020      	b.n	800501e <UART_SetConfig+0x342>
 8004fdc:	efff69f3 	.word	0xefff69f3
 8004fe0:	40008000 	.word	0x40008000
 8004fe4:	40013800 	.word	0x40013800
 8004fe8:	40021000 	.word	0x40021000
 8004fec:	40004400 	.word	0x40004400
 8004ff0:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004ff4:	f7fd ff00 	bl	8002df8 <HAL_RCC_GetPCLK2Freq>
 8004ff8:	61f8      	str	r0, [r7, #28]
        break;
 8004ffa:	e010      	b.n	800501e <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004ffc:	4b4c      	ldr	r3, [pc, #304]	@ (8005130 <UART_SetConfig+0x454>)
 8004ffe:	61fb      	str	r3, [r7, #28]
        break;
 8005000:	e00d      	b.n	800501e <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005002:	f7fd fe4b 	bl	8002c9c <HAL_RCC_GetSysClockFreq>
 8005006:	61f8      	str	r0, [r7, #28]
        break;
 8005008:	e009      	b.n	800501e <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800500a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800500e:	61fb      	str	r3, [r7, #28]
        break;
 8005010:	e005      	b.n	800501e <UART_SetConfig+0x342>
      default:
        pclk = 0U;
 8005012:	2300      	movs	r3, #0
 8005014:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8005016:	2301      	movs	r3, #1
 8005018:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 800501c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800501e:	69fb      	ldr	r3, [r7, #28]
 8005020:	2b00      	cmp	r3, #0
 8005022:	d077      	beq.n	8005114 <UART_SetConfig+0x438>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005024:	69fb      	ldr	r3, [r7, #28]
 8005026:	005a      	lsls	r2, r3, #1
 8005028:	68fb      	ldr	r3, [r7, #12]
 800502a:	685b      	ldr	r3, [r3, #4]
 800502c:	085b      	lsrs	r3, r3, #1
 800502e:	441a      	add	r2, r3
 8005030:	68fb      	ldr	r3, [r7, #12]
 8005032:	685b      	ldr	r3, [r3, #4]
 8005034:	fbb2 f3f3 	udiv	r3, r2, r3
 8005038:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800503a:	69bb      	ldr	r3, [r7, #24]
 800503c:	2b0f      	cmp	r3, #15
 800503e:	d916      	bls.n	800506e <UART_SetConfig+0x392>
 8005040:	69bb      	ldr	r3, [r7, #24]
 8005042:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005046:	d212      	bcs.n	800506e <UART_SetConfig+0x392>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005048:	69bb      	ldr	r3, [r7, #24]
 800504a:	b29b      	uxth	r3, r3
 800504c:	f023 030f 	bic.w	r3, r3, #15
 8005050:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005052:	69bb      	ldr	r3, [r7, #24]
 8005054:	085b      	lsrs	r3, r3, #1
 8005056:	b29b      	uxth	r3, r3
 8005058:	f003 0307 	and.w	r3, r3, #7
 800505c:	b29a      	uxth	r2, r3
 800505e:	8afb      	ldrh	r3, [r7, #22]
 8005060:	4313      	orrs	r3, r2
 8005062:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8005064:	68fb      	ldr	r3, [r7, #12]
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	8afa      	ldrh	r2, [r7, #22]
 800506a:	60da      	str	r2, [r3, #12]
 800506c:	e052      	b.n	8005114 <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 800506e:	2301      	movs	r3, #1
 8005070:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8005074:	e04e      	b.n	8005114 <UART_SetConfig+0x438>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005076:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800507a:	2b08      	cmp	r3, #8
 800507c:	d827      	bhi.n	80050ce <UART_SetConfig+0x3f2>
 800507e:	a201      	add	r2, pc, #4	@ (adr r2, 8005084 <UART_SetConfig+0x3a8>)
 8005080:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005084:	080050a9 	.word	0x080050a9
 8005088:	080050b1 	.word	0x080050b1
 800508c:	080050b9 	.word	0x080050b9
 8005090:	080050cf 	.word	0x080050cf
 8005094:	080050bf 	.word	0x080050bf
 8005098:	080050cf 	.word	0x080050cf
 800509c:	080050cf 	.word	0x080050cf
 80050a0:	080050cf 	.word	0x080050cf
 80050a4:	080050c7 	.word	0x080050c7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80050a8:	f7fd fe90 	bl	8002dcc <HAL_RCC_GetPCLK1Freq>
 80050ac:	61f8      	str	r0, [r7, #28]
        break;
 80050ae:	e014      	b.n	80050da <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80050b0:	f7fd fea2 	bl	8002df8 <HAL_RCC_GetPCLK2Freq>
 80050b4:	61f8      	str	r0, [r7, #28]
        break;
 80050b6:	e010      	b.n	80050da <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80050b8:	4b1d      	ldr	r3, [pc, #116]	@ (8005130 <UART_SetConfig+0x454>)
 80050ba:	61fb      	str	r3, [r7, #28]
        break;
 80050bc:	e00d      	b.n	80050da <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80050be:	f7fd fded 	bl	8002c9c <HAL_RCC_GetSysClockFreq>
 80050c2:	61f8      	str	r0, [r7, #28]
        break;
 80050c4:	e009      	b.n	80050da <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80050c6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80050ca:	61fb      	str	r3, [r7, #28]
        break;
 80050cc:	e005      	b.n	80050da <UART_SetConfig+0x3fe>
      default:
        pclk = 0U;
 80050ce:	2300      	movs	r3, #0
 80050d0:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80050d2:	2301      	movs	r3, #1
 80050d4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 80050d8:	bf00      	nop
    }

    if (pclk != 0U)
 80050da:	69fb      	ldr	r3, [r7, #28]
 80050dc:	2b00      	cmp	r3, #0
 80050de:	d019      	beq.n	8005114 <UART_SetConfig+0x438>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80050e0:	68fb      	ldr	r3, [r7, #12]
 80050e2:	685b      	ldr	r3, [r3, #4]
 80050e4:	085a      	lsrs	r2, r3, #1
 80050e6:	69fb      	ldr	r3, [r7, #28]
 80050e8:	441a      	add	r2, r3
 80050ea:	68fb      	ldr	r3, [r7, #12]
 80050ec:	685b      	ldr	r3, [r3, #4]
 80050ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80050f2:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80050f4:	69bb      	ldr	r3, [r7, #24]
 80050f6:	2b0f      	cmp	r3, #15
 80050f8:	d909      	bls.n	800510e <UART_SetConfig+0x432>
 80050fa:	69bb      	ldr	r3, [r7, #24]
 80050fc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005100:	d205      	bcs.n	800510e <UART_SetConfig+0x432>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005102:	69bb      	ldr	r3, [r7, #24]
 8005104:	b29a      	uxth	r2, r3
 8005106:	68fb      	ldr	r3, [r7, #12]
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	60da      	str	r2, [r3, #12]
 800510c:	e002      	b.n	8005114 <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 800510e:	2301      	movs	r3, #1
 8005110:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005114:	68fb      	ldr	r3, [r7, #12]
 8005116:	2200      	movs	r2, #0
 8005118:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 800511a:	68fb      	ldr	r3, [r7, #12]
 800511c:	2200      	movs	r2, #0
 800511e:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8005120:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 8005124:	4618      	mov	r0, r3
 8005126:	3728      	adds	r7, #40	@ 0x28
 8005128:	46bd      	mov	sp, r7
 800512a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800512e:	bf00      	nop
 8005130:	00f42400 	.word	0x00f42400

08005134 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005134:	b480      	push	{r7}
 8005136:	b083      	sub	sp, #12
 8005138:	af00      	add	r7, sp, #0
 800513a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005140:	f003 0308 	and.w	r3, r3, #8
 8005144:	2b00      	cmp	r3, #0
 8005146:	d00a      	beq.n	800515e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	685b      	ldr	r3, [r3, #4]
 800514e:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	430a      	orrs	r2, r1
 800515c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005162:	f003 0301 	and.w	r3, r3, #1
 8005166:	2b00      	cmp	r3, #0
 8005168:	d00a      	beq.n	8005180 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	685b      	ldr	r3, [r3, #4]
 8005170:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	430a      	orrs	r2, r1
 800517e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005184:	f003 0302 	and.w	r3, r3, #2
 8005188:	2b00      	cmp	r3, #0
 800518a:	d00a      	beq.n	80051a2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	685b      	ldr	r3, [r3, #4]
 8005192:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	430a      	orrs	r2, r1
 80051a0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80051a6:	f003 0304 	and.w	r3, r3, #4
 80051aa:	2b00      	cmp	r3, #0
 80051ac:	d00a      	beq.n	80051c4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	685b      	ldr	r3, [r3, #4]
 80051b4:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	430a      	orrs	r2, r1
 80051c2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80051c8:	f003 0310 	and.w	r3, r3, #16
 80051cc:	2b00      	cmp	r3, #0
 80051ce:	d00a      	beq.n	80051e6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	689b      	ldr	r3, [r3, #8]
 80051d6:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	430a      	orrs	r2, r1
 80051e4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80051ea:	f003 0320 	and.w	r3, r3, #32
 80051ee:	2b00      	cmp	r3, #0
 80051f0:	d00a      	beq.n	8005208 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	689b      	ldr	r3, [r3, #8]
 80051f8:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	430a      	orrs	r2, r1
 8005206:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800520c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005210:	2b00      	cmp	r3, #0
 8005212:	d01a      	beq.n	800524a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	685b      	ldr	r3, [r3, #4]
 800521a:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	430a      	orrs	r2, r1
 8005228:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800522e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005232:	d10a      	bne.n	800524a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	685b      	ldr	r3, [r3, #4]
 800523a:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	430a      	orrs	r2, r1
 8005248:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800524e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005252:	2b00      	cmp	r3, #0
 8005254:	d00a      	beq.n	800526c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	685b      	ldr	r3, [r3, #4]
 800525c:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	430a      	orrs	r2, r1
 800526a:	605a      	str	r2, [r3, #4]
  }
}
 800526c:	bf00      	nop
 800526e:	370c      	adds	r7, #12
 8005270:	46bd      	mov	sp, r7
 8005272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005276:	4770      	bx	lr

08005278 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005278:	b580      	push	{r7, lr}
 800527a:	b098      	sub	sp, #96	@ 0x60
 800527c:	af02      	add	r7, sp, #8
 800527e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	2200      	movs	r2, #0
 8005284:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005288:	f7fc fa08 	bl	800169c <HAL_GetTick>
 800528c:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	f003 0308 	and.w	r3, r3, #8
 8005298:	2b08      	cmp	r3, #8
 800529a:	d12e      	bne.n	80052fa <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800529c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80052a0:	9300      	str	r3, [sp, #0]
 80052a2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80052a4:	2200      	movs	r2, #0
 80052a6:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80052aa:	6878      	ldr	r0, [r7, #4]
 80052ac:	f000 f88c 	bl	80053c8 <UART_WaitOnFlagUntilTimeout>
 80052b0:	4603      	mov	r3, r0
 80052b2:	2b00      	cmp	r3, #0
 80052b4:	d021      	beq.n	80052fa <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80052bc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80052be:	e853 3f00 	ldrex	r3, [r3]
 80052c2:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80052c4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80052c6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80052ca:	653b      	str	r3, [r7, #80]	@ 0x50
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	461a      	mov	r2, r3
 80052d2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80052d4:	647b      	str	r3, [r7, #68]	@ 0x44
 80052d6:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052d8:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80052da:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80052dc:	e841 2300 	strex	r3, r2, [r1]
 80052e0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80052e2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80052e4:	2b00      	cmp	r3, #0
 80052e6:	d1e6      	bne.n	80052b6 <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	2220      	movs	r2, #32
 80052ec:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	2200      	movs	r2, #0
 80052f2:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80052f6:	2303      	movs	r3, #3
 80052f8:	e062      	b.n	80053c0 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	f003 0304 	and.w	r3, r3, #4
 8005304:	2b04      	cmp	r3, #4
 8005306:	d149      	bne.n	800539c <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005308:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800530c:	9300      	str	r3, [sp, #0]
 800530e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005310:	2200      	movs	r2, #0
 8005312:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8005316:	6878      	ldr	r0, [r7, #4]
 8005318:	f000 f856 	bl	80053c8 <UART_WaitOnFlagUntilTimeout>
 800531c:	4603      	mov	r3, r0
 800531e:	2b00      	cmp	r3, #0
 8005320:	d03c      	beq.n	800539c <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005328:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800532a:	e853 3f00 	ldrex	r3, [r3]
 800532e:	623b      	str	r3, [r7, #32]
   return(result);
 8005330:	6a3b      	ldr	r3, [r7, #32]
 8005332:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005336:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	461a      	mov	r2, r3
 800533e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005340:	633b      	str	r3, [r7, #48]	@ 0x30
 8005342:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005344:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005346:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005348:	e841 2300 	strex	r3, r2, [r1]
 800534c:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800534e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005350:	2b00      	cmp	r3, #0
 8005352:	d1e6      	bne.n	8005322 <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	3308      	adds	r3, #8
 800535a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800535c:	693b      	ldr	r3, [r7, #16]
 800535e:	e853 3f00 	ldrex	r3, [r3]
 8005362:	60fb      	str	r3, [r7, #12]
   return(result);
 8005364:	68fb      	ldr	r3, [r7, #12]
 8005366:	f023 0301 	bic.w	r3, r3, #1
 800536a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	3308      	adds	r3, #8
 8005372:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005374:	61fa      	str	r2, [r7, #28]
 8005376:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005378:	69b9      	ldr	r1, [r7, #24]
 800537a:	69fa      	ldr	r2, [r7, #28]
 800537c:	e841 2300 	strex	r3, r2, [r1]
 8005380:	617b      	str	r3, [r7, #20]
   return(result);
 8005382:	697b      	ldr	r3, [r7, #20]
 8005384:	2b00      	cmp	r3, #0
 8005386:	d1e5      	bne.n	8005354 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	2220      	movs	r2, #32
 800538c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	2200      	movs	r2, #0
 8005394:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005398:	2303      	movs	r3, #3
 800539a:	e011      	b.n	80053c0 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	2220      	movs	r2, #32
 80053a0:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	2220      	movs	r2, #32
 80053a6:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	2200      	movs	r2, #0
 80053ae:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	2200      	movs	r2, #0
 80053b4:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	2200      	movs	r2, #0
 80053ba:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 80053be:	2300      	movs	r3, #0
}
 80053c0:	4618      	mov	r0, r3
 80053c2:	3758      	adds	r7, #88	@ 0x58
 80053c4:	46bd      	mov	sp, r7
 80053c6:	bd80      	pop	{r7, pc}

080053c8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80053c8:	b580      	push	{r7, lr}
 80053ca:	b084      	sub	sp, #16
 80053cc:	af00      	add	r7, sp, #0
 80053ce:	60f8      	str	r0, [r7, #12]
 80053d0:	60b9      	str	r1, [r7, #8]
 80053d2:	603b      	str	r3, [r7, #0]
 80053d4:	4613      	mov	r3, r2
 80053d6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80053d8:	e049      	b.n	800546e <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80053da:	69bb      	ldr	r3, [r7, #24]
 80053dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80053e0:	d045      	beq.n	800546e <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80053e2:	f7fc f95b 	bl	800169c <HAL_GetTick>
 80053e6:	4602      	mov	r2, r0
 80053e8:	683b      	ldr	r3, [r7, #0]
 80053ea:	1ad3      	subs	r3, r2, r3
 80053ec:	69ba      	ldr	r2, [r7, #24]
 80053ee:	429a      	cmp	r2, r3
 80053f0:	d302      	bcc.n	80053f8 <UART_WaitOnFlagUntilTimeout+0x30>
 80053f2:	69bb      	ldr	r3, [r7, #24]
 80053f4:	2b00      	cmp	r3, #0
 80053f6:	d101      	bne.n	80053fc <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80053f8:	2303      	movs	r3, #3
 80053fa:	e048      	b.n	800548e <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80053fc:	68fb      	ldr	r3, [r7, #12]
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	f003 0304 	and.w	r3, r3, #4
 8005406:	2b00      	cmp	r3, #0
 8005408:	d031      	beq.n	800546e <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800540a:	68fb      	ldr	r3, [r7, #12]
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	69db      	ldr	r3, [r3, #28]
 8005410:	f003 0308 	and.w	r3, r3, #8
 8005414:	2b08      	cmp	r3, #8
 8005416:	d110      	bne.n	800543a <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005418:	68fb      	ldr	r3, [r7, #12]
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	2208      	movs	r2, #8
 800541e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005420:	68f8      	ldr	r0, [r7, #12]
 8005422:	f000 f838 	bl	8005496 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005426:	68fb      	ldr	r3, [r7, #12]
 8005428:	2208      	movs	r2, #8
 800542a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800542e:	68fb      	ldr	r3, [r7, #12]
 8005430:	2200      	movs	r2, #0
 8005432:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8005436:	2301      	movs	r3, #1
 8005438:	e029      	b.n	800548e <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800543a:	68fb      	ldr	r3, [r7, #12]
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	69db      	ldr	r3, [r3, #28]
 8005440:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005444:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005448:	d111      	bne.n	800546e <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800544a:	68fb      	ldr	r3, [r7, #12]
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8005452:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005454:	68f8      	ldr	r0, [r7, #12]
 8005456:	f000 f81e 	bl	8005496 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800545a:	68fb      	ldr	r3, [r7, #12]
 800545c:	2220      	movs	r2, #32
 800545e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005462:	68fb      	ldr	r3, [r7, #12]
 8005464:	2200      	movs	r2, #0
 8005466:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 800546a:	2303      	movs	r3, #3
 800546c:	e00f      	b.n	800548e <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800546e:	68fb      	ldr	r3, [r7, #12]
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	69da      	ldr	r2, [r3, #28]
 8005474:	68bb      	ldr	r3, [r7, #8]
 8005476:	4013      	ands	r3, r2
 8005478:	68ba      	ldr	r2, [r7, #8]
 800547a:	429a      	cmp	r2, r3
 800547c:	bf0c      	ite	eq
 800547e:	2301      	moveq	r3, #1
 8005480:	2300      	movne	r3, #0
 8005482:	b2db      	uxtb	r3, r3
 8005484:	461a      	mov	r2, r3
 8005486:	79fb      	ldrb	r3, [r7, #7]
 8005488:	429a      	cmp	r2, r3
 800548a:	d0a6      	beq.n	80053da <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800548c:	2300      	movs	r3, #0
}
 800548e:	4618      	mov	r0, r3
 8005490:	3710      	adds	r7, #16
 8005492:	46bd      	mov	sp, r7
 8005494:	bd80      	pop	{r7, pc}

08005496 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005496:	b480      	push	{r7}
 8005498:	b095      	sub	sp, #84	@ 0x54
 800549a:	af00      	add	r7, sp, #0
 800549c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80054a4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80054a6:	e853 3f00 	ldrex	r3, [r3]
 80054aa:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80054ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80054ae:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80054b2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	461a      	mov	r2, r3
 80054ba:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80054bc:	643b      	str	r3, [r7, #64]	@ 0x40
 80054be:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80054c0:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80054c2:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80054c4:	e841 2300 	strex	r3, r2, [r1]
 80054c8:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80054ca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80054cc:	2b00      	cmp	r3, #0
 80054ce:	d1e6      	bne.n	800549e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	3308      	adds	r3, #8
 80054d6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80054d8:	6a3b      	ldr	r3, [r7, #32]
 80054da:	e853 3f00 	ldrex	r3, [r3]
 80054de:	61fb      	str	r3, [r7, #28]
   return(result);
 80054e0:	69fb      	ldr	r3, [r7, #28]
 80054e2:	f023 0301 	bic.w	r3, r3, #1
 80054e6:	64bb      	str	r3, [r7, #72]	@ 0x48
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	3308      	adds	r3, #8
 80054ee:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80054f0:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80054f2:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80054f4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80054f6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80054f8:	e841 2300 	strex	r3, r2, [r1]
 80054fc:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80054fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005500:	2b00      	cmp	r3, #0
 8005502:	d1e5      	bne.n	80054d0 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005508:	2b01      	cmp	r3, #1
 800550a:	d118      	bne.n	800553e <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005512:	68fb      	ldr	r3, [r7, #12]
 8005514:	e853 3f00 	ldrex	r3, [r3]
 8005518:	60bb      	str	r3, [r7, #8]
   return(result);
 800551a:	68bb      	ldr	r3, [r7, #8]
 800551c:	f023 0310 	bic.w	r3, r3, #16
 8005520:	647b      	str	r3, [r7, #68]	@ 0x44
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	461a      	mov	r2, r3
 8005528:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800552a:	61bb      	str	r3, [r7, #24]
 800552c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800552e:	6979      	ldr	r1, [r7, #20]
 8005530:	69ba      	ldr	r2, [r7, #24]
 8005532:	e841 2300 	strex	r3, r2, [r1]
 8005536:	613b      	str	r3, [r7, #16]
   return(result);
 8005538:	693b      	ldr	r3, [r7, #16]
 800553a:	2b00      	cmp	r3, #0
 800553c:	d1e6      	bne.n	800550c <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	2220      	movs	r2, #32
 8005542:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	2200      	movs	r2, #0
 800554a:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	2200      	movs	r2, #0
 8005550:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8005552:	bf00      	nop
 8005554:	3754      	adds	r7, #84	@ 0x54
 8005556:	46bd      	mov	sp, r7
 8005558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800555c:	4770      	bx	lr

0800555e <HAL_USART_Init>:
  *         parameters in the USART_InitTypeDef and initialize the associated handle.
  * @param  husart USART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_USART_Init(USART_HandleTypeDef *husart)
{
 800555e:	b580      	push	{r7, lr}
 8005560:	b082      	sub	sp, #8
 8005562:	af00      	add	r7, sp, #0
 8005564:	6078      	str	r0, [r7, #4]
  /* Check the USART handle allocation */
  if (husart == NULL)
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	2b00      	cmp	r3, #0
 800556a:	d101      	bne.n	8005570 <HAL_USART_Init+0x12>
  {
    return HAL_ERROR;
 800556c:	2301      	movs	r3, #1
 800556e:	e03c      	b.n	80055ea <HAL_USART_Init+0x8c>
  }

  /* Check the parameters */
  assert_param(IS_USART_INSTANCE(husart->Instance));

  if (husart->State == HAL_USART_STATE_RESET)
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	f893 3049 	ldrb.w	r3, [r3, #73]	@ 0x49
 8005576:	b2db      	uxtb	r3, r3
 8005578:	2b00      	cmp	r3, #0
 800557a:	d106      	bne.n	800558a <HAL_USART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    husart->Lock = HAL_UNLOCKED;
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	2200      	movs	r2, #0
 8005580:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

    /* Init the low level hardware */
    husart->MspInitCallback(husart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_USART_MspInit(husart);
 8005584:	6878      	ldr	r0, [r7, #4]
 8005586:	f7fb fef3 	bl	8001370 <HAL_USART_MspInit>
#endif /* USE_HAL_USART_REGISTER_CALLBACKS */
  }

  husart->State = HAL_USART_STATE_BUSY;
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	2202      	movs	r2, #2
 800558e:	f883 2049 	strb.w	r2, [r3, #73]	@ 0x49

  /* Disable the Peripheral */
  __HAL_USART_DISABLE(husart);
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	681a      	ldr	r2, [r3, #0]
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	f022 0201 	bic.w	r2, r2, #1
 80055a0:	601a      	str	r2, [r3, #0]

  /* Set the Usart Communication parameters */
  if (USART_SetConfig(husart) == HAL_ERROR)
 80055a2:	6878      	ldr	r0, [r7, #4]
 80055a4:	f000 f85c 	bl	8005660 <USART_SetConfig>
 80055a8:	4603      	mov	r3, r0
 80055aa:	2b01      	cmp	r3, #1
 80055ac:	d101      	bne.n	80055b2 <HAL_USART_Init+0x54>
  {
    return HAL_ERROR;
 80055ae:	2301      	movs	r3, #1
 80055b0:	e01b      	b.n	80055ea <HAL_USART_Init+0x8c>

  /* In Synchronous mode, the following bits must be kept cleared:
  - LINEN bit in the USART_CR2 register
  - HDSEL, SCEN and IREN bits in the USART_CR3 register.
  */
  husart->Instance->CR2 &= ~USART_CR2_LINEN;
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	685a      	ldr	r2, [r3, #4]
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80055c0:	605a      	str	r2, [r3, #4]
  husart->Instance->CR3 &= ~(USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN);
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	689a      	ldr	r2, [r3, #8]
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80055d0:	609a      	str	r2, [r3, #8]

  /* Enable the Peripheral */
  __HAL_USART_ENABLE(husart);
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	681a      	ldr	r2, [r3, #0]
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	f042 0201 	orr.w	r2, r2, #1
 80055e0:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving husart->State to Ready */
  return (USART_CheckIdleState(husart));
 80055e2:	6878      	ldr	r0, [r7, #4]
 80055e4:	f000 f96a 	bl	80058bc <USART_CheckIdleState>
 80055e8:	4603      	mov	r3, r0
}
 80055ea:	4618      	mov	r0, r3
 80055ec:	3708      	adds	r7, #8
 80055ee:	46bd      	mov	sp, r7
 80055f0:	bd80      	pop	{r7, pc}

080055f2 <USART_WaitOnFlagUntilTimeout>:
  * @param  Timeout timeout duration.
  * @retval HAL status
  */
static HAL_StatusTypeDef USART_WaitOnFlagUntilTimeout(USART_HandleTypeDef *husart, uint32_t Flag, FlagStatus Status,
                                                      uint32_t Tickstart, uint32_t Timeout)
{
 80055f2:	b580      	push	{r7, lr}
 80055f4:	b084      	sub	sp, #16
 80055f6:	af00      	add	r7, sp, #0
 80055f8:	60f8      	str	r0, [r7, #12]
 80055fa:	60b9      	str	r1, [r7, #8]
 80055fc:	603b      	str	r3, [r7, #0]
 80055fe:	4613      	mov	r3, r2
 8005600:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_USART_GET_FLAG(husart, Flag) ? SET : RESET) == Status)
 8005602:	e018      	b.n	8005636 <USART_WaitOnFlagUntilTimeout+0x44>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005604:	69bb      	ldr	r3, [r7, #24]
 8005606:	f1b3 3fff 	cmp.w	r3, #4294967295
 800560a:	d014      	beq.n	8005636 <USART_WaitOnFlagUntilTimeout+0x44>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800560c:	f7fc f846 	bl	800169c <HAL_GetTick>
 8005610:	4602      	mov	r2, r0
 8005612:	683b      	ldr	r3, [r7, #0]
 8005614:	1ad3      	subs	r3, r2, r3
 8005616:	69ba      	ldr	r2, [r7, #24]
 8005618:	429a      	cmp	r2, r3
 800561a:	d302      	bcc.n	8005622 <USART_WaitOnFlagUntilTimeout+0x30>
 800561c:	69bb      	ldr	r3, [r7, #24]
 800561e:	2b00      	cmp	r3, #0
 8005620:	d109      	bne.n	8005636 <USART_WaitOnFlagUntilTimeout+0x44>
      {
        husart->State = HAL_USART_STATE_READY;
 8005622:	68fb      	ldr	r3, [r7, #12]
 8005624:	2201      	movs	r2, #1
 8005626:	f883 2049 	strb.w	r2, [r3, #73]	@ 0x49

        /* Process Unlocked */
        __HAL_UNLOCK(husart);
 800562a:	68fb      	ldr	r3, [r7, #12]
 800562c:	2200      	movs	r2, #0
 800562e:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

        return HAL_TIMEOUT;
 8005632:	2303      	movs	r3, #3
 8005634:	e00f      	b.n	8005656 <USART_WaitOnFlagUntilTimeout+0x64>
  while ((__HAL_USART_GET_FLAG(husart, Flag) ? SET : RESET) == Status)
 8005636:	68fb      	ldr	r3, [r7, #12]
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	69da      	ldr	r2, [r3, #28]
 800563c:	68bb      	ldr	r3, [r7, #8]
 800563e:	4013      	ands	r3, r2
 8005640:	68ba      	ldr	r2, [r7, #8]
 8005642:	429a      	cmp	r2, r3
 8005644:	bf0c      	ite	eq
 8005646:	2301      	moveq	r3, #1
 8005648:	2300      	movne	r3, #0
 800564a:	b2db      	uxtb	r3, r3
 800564c:	461a      	mov	r2, r3
 800564e:	79fb      	ldrb	r3, [r7, #7]
 8005650:	429a      	cmp	r2, r3
 8005652:	d0d7      	beq.n	8005604 <USART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005654:	2300      	movs	r3, #0
}
 8005656:	4618      	mov	r0, r3
 8005658:	3710      	adds	r7, #16
 800565a:	46bd      	mov	sp, r7
 800565c:	bd80      	pop	{r7, pc}
	...

08005660 <USART_SetConfig>:
  * @brief Configure the USART peripheral.
  * @param husart USART handle.
  * @retval HAL status
  */
static HAL_StatusTypeDef USART_SetConfig(USART_HandleTypeDef *husart)
{
 8005660:	b580      	push	{r7, lr}
 8005662:	b088      	sub	sp, #32
 8005664:	af00      	add	r7, sp, #0
 8005666:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  USART_ClockSourceTypeDef clocksource;
  HAL_StatusTypeDef ret                = HAL_OK;
 8005668:	2300      	movs	r3, #0
 800566a:	77bb      	strb	r3, [r7, #30]
  uint16_t brrtemp;
  uint32_t usartdiv                    = 0x00000000;
 800566c:	2300      	movs	r3, #0
 800566e:	61bb      	str	r3, [r7, #24]
  *  the USART Word Length, Parity and Mode:
  *  set the M bits according to husart->Init.WordLength value
  *  set PCE and PS bits according to husart->Init.Parity value
  *  set TE and RE bits according to husart->Init.Mode value
  *  force OVER8 to 1 to allow to reach the maximum speed (Fclock/8) */
  tmpreg = (uint32_t)husart->Init.WordLength | husart->Init.Parity | husart->Init.Mode | USART_CR1_OVER8;
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	689a      	ldr	r2, [r3, #8]
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	691b      	ldr	r3, [r3, #16]
 8005678:	431a      	orrs	r2, r3
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	695b      	ldr	r3, [r3, #20]
 800567e:	4313      	orrs	r3, r2
 8005680:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005684:	617b      	str	r3, [r7, #20]
  MODIFY_REG(husart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	681a      	ldr	r2, [r3, #0]
 800568c:	4b87      	ldr	r3, [pc, #540]	@ (80058ac <USART_SetConfig+0x24c>)
 800568e:	4013      	ands	r3, r2
 8005690:	687a      	ldr	r2, [r7, #4]
 8005692:	6812      	ldr	r2, [r2, #0]
 8005694:	6979      	ldr	r1, [r7, #20]
 8005696:	430b      	orrs	r3, r1
 8005698:	6013      	str	r3, [r2, #0]
  /* Clear and configure the USART Clock, CPOL, CPHA, LBCL STOP and SLVEN bits:
   * set CPOL bit according to husart->Init.CLKPolarity value
   * set CPHA bit according to husart->Init.CLKPhase value
   * set LBCL bit according to husart->Init.CLKLastBit value (used in SPI master mode only)
   * set STOP[13:12] bits according to husart->Init.StopBits value */
  tmpreg = (uint32_t)(USART_CLOCK_ENABLE);
 800569a:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800569e:	617b      	str	r3, [r7, #20]
  tmpreg |= (uint32_t)husart->Init.CLKLastBit;
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	6a1b      	ldr	r3, [r3, #32]
 80056a4:	697a      	ldr	r2, [r7, #20]
 80056a6:	4313      	orrs	r3, r2
 80056a8:	617b      	str	r3, [r7, #20]
  tmpreg |= ((uint32_t)husart->Init.CLKPolarity | (uint32_t)husart->Init.CLKPhase);
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	699a      	ldr	r2, [r3, #24]
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	69db      	ldr	r3, [r3, #28]
 80056b2:	4313      	orrs	r3, r2
 80056b4:	697a      	ldr	r2, [r7, #20]
 80056b6:	4313      	orrs	r3, r2
 80056b8:	617b      	str	r3, [r7, #20]
  tmpreg |= (uint32_t)husart->Init.StopBits;
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	68db      	ldr	r3, [r3, #12]
 80056be:	697a      	ldr	r2, [r7, #20]
 80056c0:	4313      	orrs	r3, r2
 80056c2:	617b      	str	r3, [r7, #20]
  MODIFY_REG(husart->Instance->CR2, USART_CR2_FIELDS, tmpreg);
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	685b      	ldr	r3, [r3, #4]
 80056ca:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	697a      	ldr	r2, [r7, #20]
 80056d4:	430a      	orrs	r2, r1
 80056d6:	605a      	str	r2, [r3, #4]
  MODIFY_REG(husart->Instance->PRESC, USART_PRESC_PRESCALER, husart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  /* BRR is filled-up according to OVER8 bit setting which is forced to 1     */
  USART_GETCLOCKSOURCE(husart, clocksource);
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	4a74      	ldr	r2, [pc, #464]	@ (80058b0 <USART_SetConfig+0x250>)
 80056de:	4293      	cmp	r3, r2
 80056e0:	d121      	bne.n	8005726 <USART_SetConfig+0xc6>
 80056e2:	4b74      	ldr	r3, [pc, #464]	@ (80058b4 <USART_SetConfig+0x254>)
 80056e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80056e8:	f003 0303 	and.w	r3, r3, #3
 80056ec:	2b03      	cmp	r3, #3
 80056ee:	d817      	bhi.n	8005720 <USART_SetConfig+0xc0>
 80056f0:	a201      	add	r2, pc, #4	@ (adr r2, 80056f8 <USART_SetConfig+0x98>)
 80056f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80056f6:	bf00      	nop
 80056f8:	08005709 	.word	0x08005709
 80056fc:	08005715 	.word	0x08005715
 8005700:	0800570f 	.word	0x0800570f
 8005704:	0800571b 	.word	0x0800571b
 8005708:	2301      	movs	r3, #1
 800570a:	77fb      	strb	r3, [r7, #31]
 800570c:	e045      	b.n	800579a <USART_SetConfig+0x13a>
 800570e:	2302      	movs	r3, #2
 8005710:	77fb      	strb	r3, [r7, #31]
 8005712:	e042      	b.n	800579a <USART_SetConfig+0x13a>
 8005714:	2304      	movs	r3, #4
 8005716:	77fb      	strb	r3, [r7, #31]
 8005718:	e03f      	b.n	800579a <USART_SetConfig+0x13a>
 800571a:	2308      	movs	r3, #8
 800571c:	77fb      	strb	r3, [r7, #31]
 800571e:	e03c      	b.n	800579a <USART_SetConfig+0x13a>
 8005720:	2310      	movs	r3, #16
 8005722:	77fb      	strb	r3, [r7, #31]
 8005724:	e039      	b.n	800579a <USART_SetConfig+0x13a>
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	4a63      	ldr	r2, [pc, #396]	@ (80058b8 <USART_SetConfig+0x258>)
 800572c:	4293      	cmp	r3, r2
 800572e:	d132      	bne.n	8005796 <USART_SetConfig+0x136>
 8005730:	4b60      	ldr	r3, [pc, #384]	@ (80058b4 <USART_SetConfig+0x254>)
 8005732:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005736:	f003 030c 	and.w	r3, r3, #12
 800573a:	2b0c      	cmp	r3, #12
 800573c:	d828      	bhi.n	8005790 <USART_SetConfig+0x130>
 800573e:	a201      	add	r2, pc, #4	@ (adr r2, 8005744 <USART_SetConfig+0xe4>)
 8005740:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005744:	08005779 	.word	0x08005779
 8005748:	08005791 	.word	0x08005791
 800574c:	08005791 	.word	0x08005791
 8005750:	08005791 	.word	0x08005791
 8005754:	08005785 	.word	0x08005785
 8005758:	08005791 	.word	0x08005791
 800575c:	08005791 	.word	0x08005791
 8005760:	08005791 	.word	0x08005791
 8005764:	0800577f 	.word	0x0800577f
 8005768:	08005791 	.word	0x08005791
 800576c:	08005791 	.word	0x08005791
 8005770:	08005791 	.word	0x08005791
 8005774:	0800578b 	.word	0x0800578b
 8005778:	2300      	movs	r3, #0
 800577a:	77fb      	strb	r3, [r7, #31]
 800577c:	e00d      	b.n	800579a <USART_SetConfig+0x13a>
 800577e:	2302      	movs	r3, #2
 8005780:	77fb      	strb	r3, [r7, #31]
 8005782:	e00a      	b.n	800579a <USART_SetConfig+0x13a>
 8005784:	2304      	movs	r3, #4
 8005786:	77fb      	strb	r3, [r7, #31]
 8005788:	e007      	b.n	800579a <USART_SetConfig+0x13a>
 800578a:	2308      	movs	r3, #8
 800578c:	77fb      	strb	r3, [r7, #31]
 800578e:	e004      	b.n	800579a <USART_SetConfig+0x13a>
 8005790:	2310      	movs	r3, #16
 8005792:	77fb      	strb	r3, [r7, #31]
 8005794:	e001      	b.n	800579a <USART_SetConfig+0x13a>
 8005796:	2310      	movs	r3, #16
 8005798:	77fb      	strb	r3, [r7, #31]

  switch (clocksource)
 800579a:	7ffb      	ldrb	r3, [r7, #31]
 800579c:	2b08      	cmp	r3, #8
 800579e:	d85a      	bhi.n	8005856 <USART_SetConfig+0x1f6>
 80057a0:	a201      	add	r2, pc, #4	@ (adr r2, 80057a8 <USART_SetConfig+0x148>)
 80057a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80057a6:	bf00      	nop
 80057a8:	080057cd 	.word	0x080057cd
 80057ac:	080057eb 	.word	0x080057eb
 80057b0:	08005809 	.word	0x08005809
 80057b4:	08005857 	.word	0x08005857
 80057b8:	08005823 	.word	0x08005823
 80057bc:	08005857 	.word	0x08005857
 80057c0:	08005857 	.word	0x08005857
 80057c4:	08005857 	.word	0x08005857
 80057c8:	08005841 	.word	0x08005841
  {
    case USART_CLOCKSOURCE_PCLK1:
      pclk = HAL_RCC_GetPCLK1Freq();
 80057cc:	f7fd fafe 	bl	8002dcc <HAL_RCC_GetPCLK1Freq>
 80057d0:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8(pclk, husart->Init.BaudRate, husart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8(pclk, husart->Init.BaudRate));
 80057d2:	693b      	ldr	r3, [r7, #16]
 80057d4:	005a      	lsls	r2, r3, #1
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	685b      	ldr	r3, [r3, #4]
 80057da:	085b      	lsrs	r3, r3, #1
 80057dc:	441a      	add	r2, r3
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	685b      	ldr	r3, [r3, #4]
 80057e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80057e6:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      break;
 80057e8:	e038      	b.n	800585c <USART_SetConfig+0x1fc>
    case USART_CLOCKSOURCE_PCLK2:
      pclk = HAL_RCC_GetPCLK2Freq();
 80057ea:	f7fd fb05 	bl	8002df8 <HAL_RCC_GetPCLK2Freq>
 80057ee:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8(pclk, husart->Init.BaudRate, husart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8(pclk, husart->Init.BaudRate));
 80057f0:	693b      	ldr	r3, [r7, #16]
 80057f2:	005a      	lsls	r2, r3, #1
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	685b      	ldr	r3, [r3, #4]
 80057f8:	085b      	lsrs	r3, r3, #1
 80057fa:	441a      	add	r2, r3
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	685b      	ldr	r3, [r3, #4]
 8005800:	fbb2 f3f3 	udiv	r3, r2, r3
 8005804:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      break;
 8005806:	e029      	b.n	800585c <USART_SetConfig+0x1fc>
    case USART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8(HSI_VALUE, husart->Init.BaudRate, husart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8(HSI_VALUE, husart->Init.BaudRate));
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	685b      	ldr	r3, [r3, #4]
 800580c:	085b      	lsrs	r3, r3, #1
 800580e:	f103 73f4 	add.w	r3, r3, #31981568	@ 0x1e80000
 8005812:	f503 4390 	add.w	r3, r3, #18432	@ 0x4800
 8005816:	687a      	ldr	r2, [r7, #4]
 8005818:	6852      	ldr	r2, [r2, #4]
 800581a:	fbb3 f3f2 	udiv	r3, r3, r2
 800581e:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      break;
 8005820:	e01c      	b.n	800585c <USART_SetConfig+0x1fc>
    case USART_CLOCKSOURCE_SYSCLK:
      pclk = HAL_RCC_GetSysClockFreq();
 8005822:	f7fd fa3b 	bl	8002c9c <HAL_RCC_GetSysClockFreq>
 8005826:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8(pclk, husart->Init.BaudRate, husart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8(pclk, husart->Init.BaudRate));
 8005828:	693b      	ldr	r3, [r7, #16]
 800582a:	005a      	lsls	r2, r3, #1
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	685b      	ldr	r3, [r3, #4]
 8005830:	085b      	lsrs	r3, r3, #1
 8005832:	441a      	add	r2, r3
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	685b      	ldr	r3, [r3, #4]
 8005838:	fbb2 f3f3 	udiv	r3, r2, r3
 800583c:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      break;
 800583e:	e00d      	b.n	800585c <USART_SetConfig+0x1fc>
    case USART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8(LSE_VALUE, husart->Init.BaudRate, husart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8(LSE_VALUE, husart->Init.BaudRate));
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	685b      	ldr	r3, [r3, #4]
 8005844:	085b      	lsrs	r3, r3, #1
 8005846:	f503 3280 	add.w	r2, r3, #65536	@ 0x10000
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	685b      	ldr	r3, [r3, #4]
 800584e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005852:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      break;
 8005854:	e002      	b.n	800585c <USART_SetConfig+0x1fc>
    default:
      ret = HAL_ERROR;
 8005856:	2301      	movs	r3, #1
 8005858:	77bb      	strb	r3, [r7, #30]
      break;
 800585a:	bf00      	nop
  }

  /* USARTDIV must be greater than or equal to 0d16 and smaller than or equal to ffff */
  if ((usartdiv >= USART_BRR_MIN) && (usartdiv <= USART_BRR_MAX))
 800585c:	69bb      	ldr	r3, [r7, #24]
 800585e:	2b0f      	cmp	r3, #15
 8005860:	d916      	bls.n	8005890 <USART_SetConfig+0x230>
 8005862:	69bb      	ldr	r3, [r7, #24]
 8005864:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005868:	d212      	bcs.n	8005890 <USART_SetConfig+0x230>
  {
    brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800586a:	69bb      	ldr	r3, [r7, #24]
 800586c:	b29b      	uxth	r3, r3
 800586e:	f023 030f 	bic.w	r3, r3, #15
 8005872:	81fb      	strh	r3, [r7, #14]
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005874:	69bb      	ldr	r3, [r7, #24]
 8005876:	085b      	lsrs	r3, r3, #1
 8005878:	b29b      	uxth	r3, r3
 800587a:	f003 0307 	and.w	r3, r3, #7
 800587e:	b29a      	uxth	r2, r3
 8005880:	89fb      	ldrh	r3, [r7, #14]
 8005882:	4313      	orrs	r3, r2
 8005884:	81fb      	strh	r3, [r7, #14]
    husart->Instance->BRR = brrtemp;
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	89fa      	ldrh	r2, [r7, #14]
 800588c:	60da      	str	r2, [r3, #12]
 800588e:	e001      	b.n	8005894 <USART_SetConfig+0x234>
  }
  else
  {
    ret = HAL_ERROR;
 8005890:	2301      	movs	r3, #1
 8005892:	77bb      	strb	r3, [r7, #30]
  husart->NbTxDataToProcess = 1U;
  husart->NbRxDataToProcess = 1U;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  husart->RxISR   = NULL;
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	2200      	movs	r2, #0
 8005898:	639a      	str	r2, [r3, #56]	@ 0x38
  husart->TxISR   = NULL;
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	2200      	movs	r2, #0
 800589e:	63da      	str	r2, [r3, #60]	@ 0x3c

  return ret;
 80058a0:	7fbb      	ldrb	r3, [r7, #30]
}
 80058a2:	4618      	mov	r0, r3
 80058a4:	3720      	adds	r7, #32
 80058a6:	46bd      	mov	sp, r7
 80058a8:	bd80      	pop	{r7, pc}
 80058aa:	bf00      	nop
 80058ac:	efff69f3 	.word	0xefff69f3
 80058b0:	40013800 	.word	0x40013800
 80058b4:	40021000 	.word	0x40021000
 80058b8:	40004400 	.word	0x40004400

080058bc <USART_CheckIdleState>:
  * @brief Check the USART Idle State.
  * @param husart USART handle.
  * @retval HAL status
  */
static HAL_StatusTypeDef USART_CheckIdleState(USART_HandleTypeDef *husart)
{
 80058bc:	b580      	push	{r7, lr}
 80058be:	b086      	sub	sp, #24
 80058c0:	af02      	add	r7, sp, #8
 80058c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the USART ErrorCode */
  husart->ErrorCode = HAL_USART_ERROR_NONE;
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	2200      	movs	r2, #0
 80058c8:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80058ca:	f7fb fee7 	bl	800169c <HAL_GetTick>
 80058ce:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((husart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	f003 0308 	and.w	r3, r3, #8
 80058da:	2b08      	cmp	r3, #8
 80058dc:	d10e      	bne.n	80058fc <USART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (USART_WaitOnFlagUntilTimeout(husart, USART_ISR_TEACK, RESET, tickstart, USART_TEACK_REACK_TIMEOUT) != HAL_OK)
 80058de:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80058e2:	9300      	str	r3, [sp, #0]
 80058e4:	68fb      	ldr	r3, [r7, #12]
 80058e6:	2200      	movs	r2, #0
 80058e8:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80058ec:	6878      	ldr	r0, [r7, #4]
 80058ee:	f7ff fe80 	bl	80055f2 <USART_WaitOnFlagUntilTimeout>
 80058f2:	4603      	mov	r3, r0
 80058f4:	2b00      	cmp	r3, #0
 80058f6:	d001      	beq.n	80058fc <USART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80058f8:	2303      	movs	r3, #3
 80058fa:	e01e      	b.n	800593a <USART_CheckIdleState+0x7e>
    }
  }
  /* Check if the Receiver is enabled */
  if ((husart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	f003 0304 	and.w	r3, r3, #4
 8005906:	2b04      	cmp	r3, #4
 8005908:	d10e      	bne.n	8005928 <USART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (USART_WaitOnFlagUntilTimeout(husart, USART_ISR_REACK, RESET, tickstart, USART_TEACK_REACK_TIMEOUT) != HAL_OK)
 800590a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800590e:	9300      	str	r3, [sp, #0]
 8005910:	68fb      	ldr	r3, [r7, #12]
 8005912:	2200      	movs	r2, #0
 8005914:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8005918:	6878      	ldr	r0, [r7, #4]
 800591a:	f7ff fe6a 	bl	80055f2 <USART_WaitOnFlagUntilTimeout>
 800591e:	4603      	mov	r3, r0
 8005920:	2b00      	cmp	r3, #0
 8005922:	d001      	beq.n	8005928 <USART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005924:	2303      	movs	r3, #3
 8005926:	e008      	b.n	800593a <USART_CheckIdleState+0x7e>
    }
  }

  /* Initialize the USART state*/
  husart->State = HAL_USART_STATE_READY;
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	2201      	movs	r2, #1
 800592c:	f883 2049 	strb.w	r2, [r3, #73]	@ 0x49

  /* Process Unlocked */
  __HAL_UNLOCK(husart);
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	2200      	movs	r2, #0
 8005934:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  return HAL_OK;
 8005938:	2300      	movs	r3, #0
}
 800593a:	4618      	mov	r0, r3
 800593c:	3710      	adds	r7, #16
 800593e:	46bd      	mov	sp, r7
 8005940:	bd80      	pop	{r7, pc}

08005942 <memset>:
 8005942:	4402      	add	r2, r0
 8005944:	4603      	mov	r3, r0
 8005946:	4293      	cmp	r3, r2
 8005948:	d100      	bne.n	800594c <memset+0xa>
 800594a:	4770      	bx	lr
 800594c:	f803 1b01 	strb.w	r1, [r3], #1
 8005950:	e7f9      	b.n	8005946 <memset+0x4>
	...

08005954 <__libc_init_array>:
 8005954:	b570      	push	{r4, r5, r6, lr}
 8005956:	4d0d      	ldr	r5, [pc, #52]	@ (800598c <__libc_init_array+0x38>)
 8005958:	4c0d      	ldr	r4, [pc, #52]	@ (8005990 <__libc_init_array+0x3c>)
 800595a:	1b64      	subs	r4, r4, r5
 800595c:	10a4      	asrs	r4, r4, #2
 800595e:	2600      	movs	r6, #0
 8005960:	42a6      	cmp	r6, r4
 8005962:	d109      	bne.n	8005978 <__libc_init_array+0x24>
 8005964:	4d0b      	ldr	r5, [pc, #44]	@ (8005994 <__libc_init_array+0x40>)
 8005966:	4c0c      	ldr	r4, [pc, #48]	@ (8005998 <__libc_init_array+0x44>)
 8005968:	f000 f818 	bl	800599c <_init>
 800596c:	1b64      	subs	r4, r4, r5
 800596e:	10a4      	asrs	r4, r4, #2
 8005970:	2600      	movs	r6, #0
 8005972:	42a6      	cmp	r6, r4
 8005974:	d105      	bne.n	8005982 <__libc_init_array+0x2e>
 8005976:	bd70      	pop	{r4, r5, r6, pc}
 8005978:	f855 3b04 	ldr.w	r3, [r5], #4
 800597c:	4798      	blx	r3
 800597e:	3601      	adds	r6, #1
 8005980:	e7ee      	b.n	8005960 <__libc_init_array+0xc>
 8005982:	f855 3b04 	ldr.w	r3, [r5], #4
 8005986:	4798      	blx	r3
 8005988:	3601      	adds	r6, #1
 800598a:	e7f2      	b.n	8005972 <__libc_init_array+0x1e>
 800598c:	08005a04 	.word	0x08005a04
 8005990:	08005a04 	.word	0x08005a04
 8005994:	08005a04 	.word	0x08005a04
 8005998:	08005a08 	.word	0x08005a08

0800599c <_init>:
 800599c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800599e:	bf00      	nop
 80059a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80059a2:	bc08      	pop	{r3}
 80059a4:	469e      	mov	lr, r3
 80059a6:	4770      	bx	lr

080059a8 <_fini>:
 80059a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80059aa:	bf00      	nop
 80059ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80059ae:	bc08      	pop	{r3}
 80059b0:	469e      	mov	lr, r3
 80059b2:	4770      	bx	lr
